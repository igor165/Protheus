#INCLUDE "MDTC365.ch"
#Include "Protheus.ch"
#DEFINE PESQ_TOP  5
#DEFINE PESQ_SKIP 15

#DEFINE _nVERSAO 1 //Versao do fonte

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTC365
Consulta Geral de ASO

@author  Inacio Luiz Kolling
@since   12/04/2000
@sample  MDTC365()

@return  Lógico, Sempre Verdadeiro
/*/
//-------------------------------------------------------------------
Function MDTC365()

	// Guarda conteudo e declara variaveis padroes
	Local aNGBEGINPRM := NGBEGINPRM( _nVERSAO )

	Local lSigaMdtPS := IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )
	Private aRotina  := MenuDef()

	// A variável cPROGRAMA não pode ser excluída do programa
	// Pois é usada no SX3 _RELACAO

	cPROGRAMA := 'MDTA200'

	If FindFunction( "MDTRESTRI" ) .And. !MDTRESTRI( "MDTC365" )
		// Devolve variaveis armazenadas (NGRIGHTCLICK)
		NGRETURNPRM( aNGBEGINPRM )
		Return .F.
	EndIf

	If lSigaMdtps
		Private cCadastro := OemtoAnsi( STR0016 )  //"Clientes"

		dbSelectArea( "SA1" )
		dbSetOrder( 1 )

		mBrowse( 6, 1, 22, 75, "SA1" )
	Else

		cCadastro := OemToAnsi( STR0006 ) //"ASO"

		// Endereça a função de BROWSE
		dbSelectArea( "TMY" )
		dbSetOrder( 2 )

		mBrowse( 6, 1, 22, 75, "TMY", , , , , , fLegndAso() )

		// Recupera a Ordem Original do arquivo principal
		dbSelectArea( "TMY" )
		dbSetOrder( 1 )

	EndIf

	// Retorna conteudo de variaveis padroes
	NGRETURNPRM( aNGBEGINPRM )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDC365EXA
Monta um browse com os Exames do ASO

@type    Function
@author  Inacio Luiz Kolling
@since   12/04/2000

@sample  MDC365EXA()
@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function MDC365EXA()

	Local OldRot

	OldRot := aCLONE( aROTINA )
	cCadas := cCadastro

	cCadastro := OemtoAnsi( STR0007 ) //"Exames Aso"

	aRotina := { { STR0001, "AXPESQUI", 0, 1 },; //"Pesquisar"
	             { STR0002, "NGCAD01", 0, 2 }}  //"Visualizar"

	M->TM5_NUMASO := TMY->TMY_NUMASO

	dbSelectArea( "TM5" )

	aNGFIELD := {}

	dbSelectArea( "TM5" )

	cKey := M->TM5_NUMASO

	bWHILE := { || !Eof() .And. TM5->TM5_NUMASO == M->TM5_NUMASO }

	bFOR   := { || TM5_FILIAL == xFilial( "TM5" ) .And. ;
	              TM5_NUMASO == M->TM5_NUMASO }

	dbSelectArea( "TM5" )
	DbSetOrder( 4 )

	NGCONSULTA( "TRB5", cKey, bWHILE, bFOR, aRotina, {}, aNGFIELD )

	dbSelectArea( "TM5" )
	dbSetOrder( 1 )

	aRotina := aCLONE( OldRot )
	cCadastro := cCadas

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} MDC365AGE
Monta um browse com os Agentes do ASO

@type    Function
@author  Inacio Luiz Kolling
@since   12/04/2000

@sample  MDC365AGE()
@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function MDC365AGE()

	Local OldRot

	OldRot := aCLONE( aROTINA )
	cCadas := cCadastro

	cCadastro := OemtoAnsi( STR0008 ) //"Agente Aso"

	aRotina := { { STR0001, "AXPESQUI", 0, 1 },; //"Pesquisar"
	             { STR0002, "NGCAD01", 0, 2 } } //"Visualizar"

	M->TMC_NUMASO := TMY->TMY_NUMASO

	dbSelectArea( "TMC" )

	aNGFIELD := {}

	dbSelectArea( "TMC" )

	cKey := M->TMC_NUMASO

	bWHILE := { || !Eof() .And. TMC->TMC_NUMASO == M->TMC_NUMASO }

	bFOR   := { || TMC_FILIAL == xFilial( "TMC" ) .And. ;
	              TMC_NUMASO == M->TMC_NUMASO }

	dbSelectArea( "TMC" )
	dbSetOrder( 1 )

	NGCONSULTA( "TRBC", cKey, bWHILE, bFOR, aRotina, {}, aNGFIELD )

	dbSelectArea( "TMC" )
	dbSetOrder( 1 )

	aRotina := aCLONE( OldRot )
	cCadastro := cCadas

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} MDC365RIS
Monta um browse com os Riscos do ASO

@type    Function
@author  Inacio Luiz Kolling
@since   12/04/2000

@sample  MDC365RIS()
@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function MDC365RIS()

	Local OldRot

	OldRot := aCLONE( aROTINA )
	cCadas := cCadastro

	cCadastro := OemtoAnsi( STR0005 ) //"Riscos Aso"

	aRotina := { { STR0001, "AXPESQUI", 0, 1 },; //"Pesquisar"
	             { STR0002, "NGCAD01", 0, 2 },; //"Visualizar"
	             { STR0009, "MDC365DET", 0, 3 } } //"Detalhes"

	M->TMX_NUMASO := TMY->TMY_NUMASO

	dbSelectArea( "TMX" )

	aNGFIELD := {}

	dbSelectArea( "TMX" )

	cKey := M->TMX_NUMASO

	bWHILE := { || !Eof() .And. TMX->TMX_NUMASO == M->TMX_NUMASO }

	bFOR   := { || TMX_FILIAL == xFilial( "TMX" ) .And. ;
	              TMX_NUMASO == M->TMX_NUMASO }

	dbSelectArea( "TMX" )
	dbSetOrder( 1 )

	NGCONSULTA( "TRBP", cKey, bWHILE, bFOR, aRotina, {}, aNGFIELD )

	dbSelectArea( "TMX" )
	dbSetOrder( 1 )

	aRotina := aCLONE( OldRot )
	cCadastro := cCadas

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} MDC365DET
Monta um browse com os Detalhes do Riscos

@type    Function
@author  Inacio Luiz Kolling
@since   12/04/2000

@sample  MDC365DET()
@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function MDC365DET()

	Local OldRot

	OldRot := aCLONE( aROTINA )
	cCadas := cCadastro

	cCadastro := OemtoAnsi( STR0010 ) //"Detalhes Risco"

	aRotina := { { STR0001, "AXPESQUI", 0, 1 },; //"Pesquisar"
	             { STR0002, "NGCAD01", 0, 2 } } //"Visualizar"

	M->TN0_NUMRIS := TMX->TMX_NUMRIS

	dbSelectArea( "TN0" )

	aNGFIELD := {}

	dbSelectArea( "TN0" )

	cKey := M->TN0_NUMRIS

	bWHILE := { || !Eof() .And. TN0->TN0_NUMRIS == M->TN0_NUMRIS }

	bFOR   := { || TN0_FILIAL == xFilial( "TN0" ) .And. ;
	              TN0_NUMRIS == M->TN0_NUMRIS }

	dbSelectArea( "TN0" )
	dbSetOrder( 1 )

	NGCONSULTA( "TRB0", cKey, bWHILE, bFOR, aRotina, {}, aNGFIELD )

	dbSelectArea( "TN0" )
	dbSetOrder( 1 )

	aRotina := aCLONE( OldRot )
	cCadastro := cCadas

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} PesqMDTC365
Pesquisas genericas. Essa função é uma adaptação da função
AxPesqui(). Ela pesquisa corretamente o numero do ASO.

@type    Function
@author  Andre E. Perez Alvarez
@since   19/07/2006

@sample  PesqMDTC365()
@return  Numérico, Sempre 1
/*/
//-------------------------------------------------------------------
Function PesqMDTC365()

	Local oDlg
	Local oCbx
	Local cOrd
	Local oBigGet
	Local nSavReg
	Local cAlias
	Local ni
	Local nj
	Local cCpofil
	Local dCampo
	Local nOrd    := 1
	Local lSeek   := .F.
	Local aLista  := {}
	Local bSav12  := SetKey( VK_F12 )
	Local cCampo  := Space( 40 )

	Local lDetail := .F.
	Local lUseDetail := .F.
	Local aAllLista
	Local oDetail
	Local aMyOrd	:= {}
	Local aScroll	:= {}
	Local lSeeAll   := GetBrwSeeMode()
	Local aPesqVar  := {}
	Local cVar
	Local bBloco
	Local cMsg := ""

	Private aOrd     := {}
	Private nSizeTMY := IIf( ( TAMSX3( "TMY_NUMASO" )[1] ) < 1, 6, ( TAMSX3( "TMY_NUMASO" )[1] ) )

	/*/
	aLista
	[1] := F3
	[2] := tipo
	[3] := tamanho
	[4] := decimais
	[5] := titulo
	/*/

	SetKey( VK_F12, { || NIL } )

	cAlias := Alias()
	dbSelectArea( cAlias )
	cCpofil := PrefixoCpo( cAlias ) + "_FILIAL"
	nSavReg := Recno()

	If cCpofil $ Indexkey()	.And. !lSeeAll
		If &cCpofil != cFilial
			dbSeek( cFilial )
		EndIf
	Else
		dbGoTop()
	EndIf

	If Eof()
		Help( " ", 1, "A000FI" )
		SetKey( VK_F12, bSav12 )
		Return 3
	EndIf

	If nSavReg != Recno()
		dbGoTo( nSavReg )
	Endif

	AxPesqOrd( cAlias, @aMyOrd, @lUseDetail, lSeeAll )

	nOrd := 1
	cOrd := aOrd[1]
	For nI := 1 To Len( aOrd )
		aOrd[nI] := OemToAnsi( aOrd[nI] )
	Next

	If IndexOrd() > Len( aOrd )
		cOrd := 1 //aOrd[Len(aOrd)]
		nOrd := 1 //Len(aOrd)
	ElseIf IndexOrd() <= 1
		cOrd := aOrd[1]
		nOrd := 1
	Else
		cOrd := aOrd[IndexOrd()]
		nOrd := IndexOrd()
	EndIf

	If lUseDetail .And. !PesqList( cAlias, lSeeAll, @aPesqVar, @aAllLista, @cMsg )
		Help( , , "PESQLIST", , STR0011 + cMsg + STR0012, 1, 1 ) //"O campo "###" não foi encontrado no Dicionário de Campos (SX3)"
		Return 0
	EndIf

	DEFINE MSDIALOG oDlg FROM 00, 00 To 100, 490 PIXEL TITLE OemToAnsi( STR0013 ) //"Pesquisa"

	@05, 05 COMBOBOX oCBX VAR cOrd ITEMS aOrd SIZE 206, 36 PIXEL OF oDlg FONT oDlg:oFont

	@22, 05 MSGET oBigGet VAR cCampo SIZE 206, 10 PIXEL

	DEFINE SBUTTON FROM 05, 215 TYPE 1 OF oDlg ENABLE ACTION (lSeek := .T., oDlg:End())
	DEFINE SBUTTON FROM 20, 215 TYPE 2 OF oDlg ENABLE ACTION oDlg:End()

	If ( lUseDetail )
		DEFINE SBUTTON oDetail FROM 35, 215 TYPE 5 OF oDlg ENABLE ONSTOP STR0014 ACTION (lDetail := PesqDetail( lDetail, @oDlg, @aScroll, @oBigGet, nOrd ))	//"Detalhes"

		For ni := 1 To Len( aAllLista )
			Aadd( aScroll, Nil )
			@22, 05 SCROLLBOX aScroll[ni] VERTICAL SIZE 84, 205 BORDER
			aScroll[ni]:Hide()

			For nj := 1 To Len( aAllLista[ni] )
				cVar := "aPesqVar[" + StrZero( ni, 2 ) + "][" + StrZero( nj, 2 ) + "]"
				bBloco  := &( "{ | u | If( PCount() == 0, " + cVar + "," + cVar + " := u)}" )
				PesqInit( aAllLista[ni], aScroll[ni], nj, bBloco, cVar )
			Next
		Next

		oCbx:bChange := { || PesqChange( @nOrd, oCbx:nAt, @aLista, cAlias, @aAllLista, @aScroll, @lDetail, @oDetail, @oDlg, @oBigGet ) }
		aLista := Aclone( aAllLista[nOrd] )
	Else
		oCbx:bChange := { || nOrd := oCbx:nAt }
	EndIf

	ACTIVATE MSDIALOG oDlg CENTERED

	If ( lSeek )
		If nOrd == 1
			cCampo := Space( nSizeTMY - Len( AllTrim( cCampo ) ) ) + AllTrim( cCampo )
		ElseIf nOrd == 2
			cCampo := SubSTR( cCampo, 1, 9 ) + Space( nSizeTMY - Len( AllTrim( SubSTR( cCampo, 10, nSizeTMY ) ) ) ) +;
						 AllTrim( SubSTR( cCampo, 10, nSizeTMY ) )
		EndIf
		AxPesqSeek( cAlias, lDetail, cCampo, aLista, aMyOrd, nOrd, lSeeAll, aPesqVar )
		SetKey( VK_F12, bSav12 )
		If ( nOrd == 1 ) .Or. ( nOrd == 2 )
			cCampo := Space( 40 )
		EndIf
	Else
		SetKey( VK_F12, bSav12 )
		Return 0
	EndIf

Return 1

//-------------------------------------------------------------------
/*/{Protheus.doc} AxPesqSeek
Utilizada para busca em pesquisas

@type    Static Function
@author  NG Informática
@since   01/01/2000

@sample  AxPesqSeek( "TMY", .T., "TMY_NUMASO", { , c, 2, , "Número"}, {1, 2}, 3, .T., {1, 2} )
@param   cAlias,   Caracter, Alias da tabela
@param   lDetail,  Lógico,   Detalhes da busca
@param   cCampo,   Caracter, Campo da tabela a ser pesquisado
@param   aLista,   Array,    Contém o tipo, decrição e tamanho do campo
@param   aMyOrd,   Array,    Contém a os registros desejados em ordem
@param   nOrd,     Numérico, Ordem desejada
@param   lSeeAll,  Lógico,   Se deseja trazer todos os registros
@param   aPesqVar, Array,    Array da pesquisa

@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Static Function AxPesqSeek( cAlias, lDetail, cCampo, aLista, aMyOrd, nOrd, lSeeAll, aPesqVar )

	Local nReg
	Local nChave  := 1
	Local cFil    := ""
	Local cCpofil := PrefixoCpo( cAlias ) + "_FILIAL"
	Local aFils	  := {}
	Local nI

	dbSelectArea( cAlias )
	If ( lDetail )
		cCampo := ""
		For nI := 1 To Len( aPesqVar[nOrd] )
			If ( aLista[nI][2] == "C" .And. ( Len( cCampo ) != aLista[nI][3] ) )
				cCampo += Subs( aPesqVar[nOrd][nI], 1, aLista[nI][3] )
			ElseIf ( aLista[nI][2] == "D" )
				cCampo += Dtos( aPesqVar[nOrd][nI] )
			ElseIf ( aLista[nI][2] == "N" )
				cCampo += Str( aPesqVar[nOrd][nI], aLista[nI][3], aLista[nI][4] )
			Else
				cCampo += aPesqVar[nOrd][nI]
			EndIf
		Next
	EndIf

	cCampo := Trim( cCampo )
	If nOrd == 1
		cCampo := Space( nSizeTMY - Len( AllTrim( cCampo ) ) ) + AllTrim( cCampo )
	Elseif nOrd == 2
		cCampo := SubSTR( cCampo, 1, 9 ) + Space( nSizeTMY - Len( AllTrim( SubSTR( cCampo, 10, nSizeTMY ) ) ) ) +;
				   AllTrim( SubSTR( cCampo, 10, nSizeTMY ) )
	EndIf

	nReg := Recno()
	SET SOFTSEEK ON
	dbSetOrder( aMyOrd[nOrd, 1] )
	If cCpofil $ IndexKey()  //Procura pela filial
		cFil := cFilial
		nChave := 11
	EndIf

	If !lDetail .And. ( ( "DTOS" $ Upper( IndexKey( nOrd ) ) ) .Or. ( "DTOC" $ Upper( IndexKey( nOrd ) ) ) ) .And. cAlias != "SM2"
		If ( lSeeAll )
			cCampo := Subs( cCampo, 1, 2 ) + ConvData( IndexKey( nOrd ), Subs( cCampo, 3 ) )
		Else
			cCampo := ConvData( IndexKey( nOrd ), cCampo )
		EndIf
	EndIf

	If Subs( cAlias, 1, 3 ) == "SM2"
		dCampo:=Ctod( AllTrim( cCampo ) )
		dbSeek( dCampo )

	ElseIf !( cCpofil $ IndexKey() ) .Or. !aMyOrd[nOrd, 2] .Or. lSeeAll
		dbSeek( cCampo )

		If ( lSeeAll )
			aFils	:= GetBrwFils()
			cFil	:= &cCpoFil

			// Testa se o usuario pode ver a filial encontrada.
			// Se não puder posiciona na proxima filial valida para o usuário, se não puder vai para EOF

			If ( aScan( aFils, cFil ) == 0 )
				If ( (nI := aScan( aFils, {|x| x > cFil} )) == 0 )
					dbSeek( Chr( 255 ) )
				Else
					dbSeek( aFils[nI] )
				EndIf
			EndIf

		EndIf

	Else
		dbSeek( cFilial + cCampo )
		If Subs( &( IndexKey() ), 1, 2 ) != cFilial	 // IR Para EOF
			dbSeek( Chr( 255 ) )
		EndIf
	EndIf

	If Eof()
		DbGoTo( nReg )
		Help( " ", 1, "PESQ01" )
	EndIf
	SET SOFTSEEK OFF
	lRefresh := .T.

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef

Utilizacao de Menu Funcional.

@type    static function

@author  Rafael Diogo Richter
@since   29/11/2006

@return aRotina, array, Array com opcoes da rotina.
@obs Parametros do array a Rotina:
		1. Nome a aparecer no cabecalho
		2. Nome da Rotina associada
		3. Reservado
		4. Tipo de Transao a ser efetuada:
		    1 - Pesquisa e Posiciona em um Banco de Dados
		    2 - Simplesmente Mostra os Campos
		    3 - Inclui registros no Bancos de Dados
		    4 - Altera o registro corrente
		    5 - Remove o registro corrente do Banco de Dados
		5. Nivel de acesso
		6. Habilita Menu Funcional

/*/
//-------------------------------------------------------------------
Static Function MenuDef()

	Local lSigaMdtPS := IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )
	Local aRotina

	If lSigaMdtps
		aRotina := { { STR0001, "AxPesqui", 0, 1 },; //"Pesquisar"
		             { STR0002, "NGCAD01", 0, 2 },; //"Visualizar"
		             { StrTran( STR0015, "'", "" ), "MDTC365TMY", 0, 4 } } //"Atestados (ASO's)"
	Else
		aRotina := { { STR0001, "PesqMDTC365", 0, 1 },; //"Pesquisar"
	                 { STR0002, "NGCAD01", 0, 2 },;     //"Visualizar"
	                 { STR0003, "MDC365EXA", 0, 3 },;   //"Exame ASO"
	                 { STR0004, "MDC365AGE", 0, 4 },;   //"Agentes ASO"
	                 { STR0005, "MDC365RIS", 0, 5 },;   //"Riscos ASO"
					 { STR0017, "MDTC365Leg", 0, 6 } }  //Legenda
	EndIf

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTC365TMY
Monta um browse com os atestados médicos do cliente.

@type    Function
@author  Andre E. Perez Alvarez
@since   20/11/2007

@sample  MDTC365TMY()
@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function MDTC365TMY()

	Local aArea	:= GetArea()
	Local oldROTINA := aCLONE( aROTINA )
	Local oldCad := cCadastro

	cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA

	aRotina := { { STR0001, "PesqMDTC365", 0, 1 },; //"Pesquisar"
	             { STR0002, "NGCAD01", 0, 2 },;     //"Visualizar"
	             { STR0003, "MDC365EXA", 0, 3 },;   //"Exame ASO"
	             { STR0004, "MDC365AGE", 0, 4 },;   //"Agentes ASO"
	             { STR0005, "MDC365RIS", 0, 5 },;   //"Riscos ASO"
				 { STR0017, "MDTC365Leg", 0, 6 } }  //Legenda

	cCadastro := OemToAnsi( STR0006 ) //"ASO"

	// Endereca a funcao de BROWSE
	dbSelectArea( "TMY" )
	Set Filter To TMY->(TMY_CLIENT+TMY_LOJA) == cCliMdtps
	dbSetOrder( 2 )

	mBrowse( 6, 1, 22, 75, "TMY", , , , , , fLegndAso() )

	// Recupera a Ordem Original do arquivo principal
	dbSelectArea( "TMY" )
	Set Filter To
	dbSetOrder( 1 )

	aROTINA := aCLONE( oldROTINA )
	RestArea( aArea )
	cCadastro := oldCad

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} fLegndAso
Função que define as cores das situações dos ASO's.

@type    Function
@author  Milena Leite de Olivera
@since   05/03/2020

@sample  fLegndAso()
@return  aCores,Contém as cores das situações do ASO
/*/
//-------------------------------------------------------------------
Function fLegndAso()

	Local aCores :=	{ { "Empty( TMY->TMY_DTEMIS )", "BR_VERMELHO" },;
					  { "!Empty( TMY->TMY_DTEMIS )", "BR_VERDE" } }

Return ( aCores )

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTC365Leg
Cria uma janela contendo a legenda da mBrowse

@type    Function
@author  Milena Leite de Oliveira
@since   05/03/2020

@sample  MDTC365Leg()
@return  boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDTC365Leg()

	If Type( "cCadastro" ) == "U"
		Private cCadastro := STR0017 // "Legenda"
	EndIf
	BrwLegenda(	OemToAnsi( cCadastro ),;
				OemToAnsi( STR0017 ),; // "Legenda"
				{ { "BR_VERDE", OemToAnsi( STR0018 ) },;      // "ASO Emitido"
				  { "BR_VERMELHO", OemToAnsi( STR0019 ) } } ) // "ASO Não Emitido"

Return .T.
