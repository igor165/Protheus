#INCLUDE "Protheus.ch"
#INCLUDE "COLORS.CH"
#INCLUDE "MDTA725.ch"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA725
Cadastro de EPI'S por Centro de Custo.

@author Liber De Esteban O.P. Refeito por: Guilherme Freudenburg
@since  29/09/04 Refeito em: 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Function MDTA725()

	//---------------------------------------------------------------------------------------
	// Armazena variaveis p/ devolucao (NGRIGHTCLICK)
	//---------------------------------------------------------------------------------------
	Local aNGBEGINPRM := NGBEGINPRM()
	Private lSigaMdtPS := IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )
	PRIVATE aRotina := MenuDef( lSigaMdtPS, .F. )
	//---------------------------------------------------------------------------------------
	// Define o cabecalho da tela de atualizacoes
	//---------------------------------------------------------------------------------------
	PRIVATE cCadastro := OemtoAnsi( STR0021 )  //"Clientes"
	PRIVATE aCHKDEL := {}, bNGGRAVA
	Private cPrograma := "MDTA725"
	Private cCliMdtPs
	PRIVATE cALCusto := "SI3"
	PRIVATE cFiCusto := "I3_CUSTO"
	PRIVATE cFiDesc  := "I3_DESC"
	If Alltrim( GETMV( "MV_MCONTAB" ) ) == "CTB"
		cALCusto := "CTT"
		cFiCusto := "CTT_CUSTO"
		cFiDesc  := "CTT_DESC01"
	Endif
	/*	DbSelectArea(cALCusto)
		DbSetOrder(1)
		mBrowse( 6, 1,22,75,cALCusto)*/
	//Se for prestador de serviço
	If lSigaMdtPS
		DbSelectArea( "SA1" )
		DbSetOrder( 1 )
		mBrowse( 6, 1, 22, 75, "SA1" )
	Else
		MDT725CAD()
	Endif

	//---------------------------------------------------------------------------------------
	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	//---------------------------------------------------------------------------------------

	NGRETURNPRM( aNGBEGINPRM )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.
Parametros do array a Rotina:
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada
	3. Reservado
	4. Tipo de Transa‡„o a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
		2 - Simplesmente Mostra os Campos
		3 - Inclui registros no Bancos de Dados
		4 - Altera o registro corrente
		5 - Remove o registro corrente do Banco de Dados
		5. Nivel de acesso
		6. Habilita Menu Funcional

@author Guilherme Freudenburg
@since 18/11/13
@return Array com opcoes da rotina.
/*/
//---------------------------------------------------------------------
Static Function MenuDef( lPres, lMdi )

	Local aRotina
	Local lSigaMdtPS := IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )

	Default lPres := .F.
	Default lMdi   := .T.

	If lPres
		aRotina :=	{    {	STR0001, "AxPesqui", 0, 1	},;  //"Pesquisar"
						 {	STR0002, "NGCAD01", 0, 2	},;  //"Visualizar"
						 {	STR0022, "MDT725CAD", 0, 4	} }  //"Centros de Custo"
	Else
		aRotina :=  { 	 { 	STR0001, "AxPesqui", 0, 1   	},;  //"Pesquisar"
						 {   STR0002, "NGCAD01", 0, 2  	},;  //"Visualizar"
						 { 	STR0003, "MDT725EPI", 0, 4, 3	},;  //"EPIs"
						 {  	"Copiar", "MDT725COP", 0, 4   	} }  //"Copiar"

		If !lMdi .And. !lSigaMdtPS .And. AliasInDic( "TY4" ) .And. ;
			SuperGetMv( "MV_NGMDTTR", .F., "2" ) == "1" .And. FindFunction( "MDTGERTRM" )

			aAdd( aRotina, { STR0025, "MDTGERTRM", 0, 4 } )//"Treinamentos"

		EndIf

	Endif

Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT725CAD
Monta um browse dos Centro de Custo.

@author Guilherme Freudenburg
@since 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT725CAD()

	Local aArea := GetArea()
	Local cOldCad := cCadastro
	Private nSizeCli := IIf( ( TAMSX3( "A1_COD" )[1]) < 1, 6, ( TAMSX3( "A1_COD" )[1] ) )
	Private nSizeLoj := IIf( ( TAMSX3( "A1_LOJA" )[1] ) < 1, 2, ( TAMSX3( "A1_LOJA" )[1] ) )

	aRotina := MenuDef( , .F. )

	DbSelectArea( cALCusto )
	//Se for prestador de serviço faz filtro de centro de custo por cliente
	If lSigaMdtPS
		cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA
		If cALCusto == "SI3"
			Set Filter To SubStr( SI3->I3_CUSTO, 1, nSizeCli+nSizeLoj ) == cCliMdtps
		Else
			Set Filter To SubStr( CTT->CTT_CUSTO, 1, nSizeCli+nSizeLoj ) == cCliMdtps
		Endif
	Else
		cCadastro := OemtoAnsi( STR0004 ) //"EPIs Relacionados por Centro de Custo"
	Endif
	DbSetOrder( 1 )
	mBrowse( 6, 1, 22, 75, cALCusto )

	RestArea( aArea )
	cCadastro := cOldCad

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT725EPI
Monta um browse dos Planos.

@author Guilherme Freudenburg
@since 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT725EPI( cAlias, nReg, nOpcx )

	//Objetos de Tela
	Local oDlgEPI, oPnlEPI, oPnlAll
	Local oGetEPI
	Local oMenu

	//Variaveis de inicializacao de GetDados
	Local aNoFields := {}
	Local nInd
	Local cKeyGet
	Local cWhileGet

	//Variaveis de tela
	Local aInfo, aPosObj
	Local aSize := MsAdvSize( , .F., 430 ), aObjects := {}

	//Variaveis de GetDados
	Local lAltProg := IIf( INCLUI .Or. ALTERA, .T., .F. )
	Private aCols := {}, aHeader := {}
	Private cTime725 := "99:99:99"
	Private cEpie725 := Space( 15 )

	//---------------------------------------------------------------------------------------
	// Verifica qual tipo de produto eh o tipo EPI
	// e atualiza a consulta padrao de EPIs de acordo com isso
	//---------------------------------------------------------------------------------------
	Private cTipo := SuperGetMv( "MV_MDTPEPI", .F., "" )
	Private lSX5  := !Empty( cTipo )  //Variaveis utilizadas na validacao do campo TOH_EPI

	aRotSetOpc( "TOH", 1, 4 )

	//Inicializa variaveis de Tela
	Aadd( aObjects, {050, 050, .T., .T. } )
	Aadd( aObjects, {100, 100, .T., .T. } )
	aInfo   := { aSize[1], aSize[2], aSize[3], aSize[4], 0, 0 }
	aPosObj := MsObjSize( aInfo, aObjects, .T. )

	// Monta a GetDados dos Requisitos Legais
	aAdd( aNoFields, "TOH_CC" )
	aAdd( aNoFields, "TOH_FILIAL" )
	aAdd( aNoFields, 'TOH_DESCCC' )
	If lSigaMdtPs
		aAdd( aNoFields, "TOH_CLIENT" )
		aAdd( aNoFields, "TOH_LOJA" )
		nInd		:= 4
		cKeyGet 	:= "SA1->A1_COD+SA1->A1_LOJA+"	+ cALCusto + "->"+cFiCusto
		cWhileGet 	:= "TOH->TOH_FILIAL == '"+xFilial( "TOH" )+"' .AND. TOH->TOH_CC == '"+&( cALCusto + "->"+cFiCusto )+"'"+;
							" .AND. TOH->TOH_CLIENT+TOH->TOH_LOJA == '"+SA1->A1_COD+SA1->A1_LOJA+"'"
	Else
		nInd		:= 1
		cKeyGet 	:= cALCusto + "->"+cFiCusto
		cWhileGet 	:= "TOH->TOH_FILIAL == '"+xFilial( "TOH" )+"' .AND. TOH->TOH_CC == '"+&( cALCusto + "->"+cFiCusto )+"'"
	EndIf

	//Monta aCols e aHeader de TOH
	dbSelectArea( "TOH" )
	dbSetOrder( nInd )
	FillGetDados( nOpcx, "TOH", 1, cKeyGet, {|| }, {|| .T.}, aNoFields, , , ,;
						 {|| NGMontaAcols( "TOH", &cKeyGet, cWhileGet ) } )
	If Empty( aCols )
		aCols := BLANKGETD( aHeader )
	Endif

	nOpca := 0

	DEFINE MSDIALOG oDlgEPI TITLE cCadastro From aSize[7], 0 To aSize[6], aSize[5] OF oMainWnd PIXEL

		oPnlAll := TPanel():New( , , , oDlgEPI, , , , , , , , .F., .F. )
			oPnlAll:Align := CONTROL_ALIGN_ALLCLIENT

		oPnlEPI := TPanel():New(0, 0, Nil, oPnlAll, Nil, .T., .F., Nil, Nil, 0, 60, .T., .F. )
			oPnlEPI:Align := CONTROL_ALIGN_TOP

			TSay():New( 6, 7, {| | OemtoAnsi( STR0005 ) }, oPnlEPI, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 020, 008 )//"Centro de Custo"
			TGet():New( 5, 27, {|u| IIf( PCount() > 0, &(cALCusto + "->"+cFiCusto) := u, &(cALCusto + "->"+cFiCusto) )}, oPnlEPI, 40, 10, "@!",;
							 , CLR_BLACK, CLR_WHITE, , , , .T., "", , {|| .F. }, .F., .F., , .F., .F., , , , , , .T. )

			TSay():New( 6, 80, {| | OemtoAnsi( STR0006 ) }, oPnlEPI, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 025, 008 )//"Nome Centro de Custo"
			TGet():New( 5, 110, {|u| IIf( PCount() > 0, &(cALCusto + "->"+cFiDesc) := u, &(cALCusto + "->"+cFiDesc) )}, oPnlEPI, 150, 10, "@!",;
							 , CLR_BLACK, CLR_WHITE, , , , .T., "", , {|| .F. }, .F., .F., , .F., .F., , , , , , .T. )


			TButton():New( 30, 5, STR0009, oPnlEPI, {|| MDT725BU( oGetEPI, cTipo, lSX5 )}, 49, 12, , /*oFont*/ , , .T., , , , /* bWhen*/ , , )

			PutFileInEof( "TOH" )
			oGetEPI := MsNewGetDados():New( 0, 0, 200, 210, IIF( !lAltProg, 0, GD_INSERT+GD_UPDATE+GD_DELETE ),;
									 {|| MDT725Lin( "TOH", , @oGetEPI )}, {|| MDT725Lin( "TOH", .T., @oGetEPI )}, /*cIniCpos*/ , /*aAlterGDa*/ ,;
									/*nFreeze*/ , /*nMax*/ , /*cFieldOk */ , /*cSuperDel*/ , /*cDelOk */ , oPnlAll, aHeader, aCols )

			oGetEPI:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

		NGPOPUP( asMenu, @oMenu, oPnlEPI )
		oPnlEPI:bRClicked:= { |o, x, y| oMenu:Activate( x, y, oPnlEPI ) }
		aSort( oGetEPI:aCOLS, , , { |x, y| x[1] < y[1] } ) //Ordena por EPI

	ACTIVATE MSDIALOG oDlgEPI ON INIT EnchoiceBar( oDlgEPI, {|| nOpca:=1, IIf( MDT725TOk( oGetEPI ), oDlgEPI:End(), nOpca := 0 )}, {|| oDlgEPI:End(), nOpca := 0} )

	If nOpca == 1
		fGravaEPI( oGetEPI )//Grava EPI
	Endif

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT725BU
Mostra um markbrowse com todos os Requisitos Legais
para poder seleciona-los de uma so vez.(Baseado na funcao MDT230BU)

@author Guilherme Freudenburg
@since 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT725BU( oGetEPI, cTipo, lSX5 )

	Local aArea := GetArea()
	//Variaveis para montar TRB
	Local aDBF, aTRBRE
	Local oTempTRB
	//Variaveis de Tela
	Local oDlgEPI
	Local oMARKFReq
	Local oPnlMSG
	//
	Local bOkReq	 := {|| nOpcao := 1, oDlgEPI:End()}
	Local bCancelReq := {|| nOpcao := 0, oDlgEPI:End()}
	Local nOpcao
	Local lInverte, lRet

	Local cKeyEPI := ""
	Local cResultEPI := Space( 60 )
	Local aEPICombo := {STR0003, STR0006, STR0026}//"EPI"##"Descrição"##"Marcados"
	Local oButtonEPI
	Local oEPICombo
	Local oGetMrk
	Private cMarca := GetMark()
	Private cAliasTRB := GetNextAlias()
	lInverte:= .F.

	//Valores e Caracteristicas da TRB
	aDBF := {}
	AADD( aDBF, { "TRB_OK", "C", 02, 0 } )
	AADD( aDBF, { "TRB_CODEPI", "C", TamSX3( "B1_COD" )[1], 0 } )
	AADD( aDBF, { "TRB_DESC", "C", TamSX3( "B1_DESC" )[1], 0 } )

	aTRBRE := {}
	AADD( aTRBRE, { "TRB_OK", NIL, " ", } )
	AADD( aTRBRE, { "TRB_CODEPI", NIL, STR0012, } )  //"Cod. Requisito"
	AADD( aTRBRE, { "TRB_DESC", NIL, STR0013, } )  //"Desc. Requisito"

	//Cria TRB
	oTempTRB := FWTemporaryTable():New( cAliasTRB, aDBF )
	oTempTRB:AddIndex( "1", {"TRB_CODEPI"} )
	oTempTRB:AddIndex( "2", {"TRB_DESC"} )
	oTempTRB:AddIndex( "3", {"TRB_OK"} )
	oTempTRB:Create()

	dbSelectArea( "SB1" )

	Processa( {|lEnd| fBuscaEPI( cAliasTRB, oGetEPI, cTipo, lSX5 )}, STR0023, STR0024 )//"Buscando Requisitos..."//"Espere"
	Dbselectarea( cAliasTRB )
	Dbgotop()
	If (cAliasTRB)->(Reccount()) <= 0
		oTempTRB:Delete()
		RestArea( aArea )
		lRefresh := .T.
		Msgstop( STR0014, STR0015 )  //"Não existem Requisitos cadastrados" //"ATENÇÃO"
		Return .T.
	Endif

	nOpcao := 0

	DEFINE MSDIALOG oDlgEPI TITLE OemToAnsi( STR0003 ) From 64, 160 To 580, 730 OF oMainWnd Pixel  //"Requisitos"

		oPnlMSG := TPanel():New(0, 0, Nil, oDlgEPI, Nil, .T., .F., Nil, Nil, , , .T., .F. )
			oPnlMSG:Align := CONTROL_ALIGN_ALLCLIENT

			@ 8, 5 TO 40, 272 PIXEL OF oPnlMSG
			TSay():New( 15, 15, {|| OemtoAnsi( STR0016 ) }, oPnlMSG, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 010 )//"Estes são os EPI's cadastrados no sistema."
			TSay():New( 25, 15, {|| OemtoAnsi( STR0017 ) }, oPnlMSG, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 010 )//"Selecione aqueles que são necessários a este centro de custo."

			//Campo combo de indice para busca
			oEPICombo := TComboBox():New( 45, 5, {|u| IIf( Pcount()>0, cKeyEPI:= u, cKeyEPI ) }, aEPICombo,;
												 190, 10, oPnlMSG, , {|| OrdMarkEPI( @oEPICombo, @oGetMrk, @oMARKFReq ) }, /*bValid*/ , /*nClrBack*/ , CLR_BLACK,;
												 .T., /*oFont*/ , , , /*bWhen*/ , , , , , cKeyEPI, /*cLabelText*/ , /*nLabelPos*/ , /*oLabelFont*/ , CLR_BLACK  )
			//Campo de busca
			oGetMrk := TGet():New( 58, 5, {|u| IIf( Pcount()>0, cResultEPI:= u, cResultEPI ) }, oPnlMSG, 190, 7, "@!",;
											 /*bValid*/ , CLR_BLACK, /*nClrBack*/ , /*oFont*/ , , , .T., , , {|| oEPICombo:nAt != 3 },;
											 , , /*bChange*/ , /*lReadOnly*/ , /*lPassword*/ , , cResultEPI, , , , /*lHasButton*/ ,;
											 /*lNoButton*/ , /*cLabelText*/ , /*nLabelPos*/ , /*oLabelFont*/ , /*nLabelColor*/ )
			//Botão de pesquisa
			oButtonEPI := TButton():New( 44, 200, STR0001, oPnlMSG, {|| IIf( oEPICombo:nAt != 3, fBusEPI725( @oEPICombo, @oGetMrk, @oMARKFReq ), .T. ) },;
												 73, 12, , /*oFont*/ , , .T., , , , {|| oEPICombo:nAt != 3  }, , )//Pesquisar

			oMARKFReq := MsSelect():New( cAliasTRB, "TRB_OK", , aTRBRE, @lINVERTE, @cMARCA, {73, 5, 267, 272}, , , oPnlMSG )
			oMARKFReq:oBROWSE:lHASMARK		:= .T.
			oMARKFReq:oBROWSE:lCANALLMARK	:= .T.
			oMARKFReq:oBROWSE:bALLMARK		:= {|| fInverte( cMarca, cAliasTRB, "TRB_OK", oMARKFReq, .T. ) }//Funcao inverte marcadores

	ACTIVATE MSDIALOG oDlgEPI ON INIT EnchoiceBar( oDlgEPI, bOkReq, bCancelReq ) CENTERED

	lRet := ( nOpcao == 1 )

	If lRet
		MDT725CPY( oGetEPI, cAliasTRB )//Funcao para copiar planos a GetDados
	Endif

	oTempTRB:Delete()

	RestArea( aArea )

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT725CPY
Copia os planos selecionados no markbrowse para a GetDados.

@author Guilherme Freudenburg
@since 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Static Function MDT725CPY( oGetEPI, cAliasTRB )

	Local nCols, nPosCod
	Local aColsOk := aClone( oGetEPI:aCols )
	Local aHeadOk := aClone( oGetEPI:aHeader )
	Local aColsTp := BLANKGETD( aHeadOk )

	nPosCod := aScan( aHeadOk, {|x| Trim( Upper( x[2] ) ) == "TOH_CODEPI"} )
	nPosDes := aScan( aHeadOk, {|x| Trim( Upper( x[2] ) ) == "TOH_DESC"} )

	For nCols := Len( aColsOk ) To 1 Step -1 //Deleta do aColsOk os registros - não marcados; não estiver encontrado
		dbSelectArea( cAliasTRB )
		dbSetOrder( 1 )
		If !dbSeek( aColsOK[nCols, nPosCod] ) .Or. Empty( ( cAliasTRB )->TRB_OK )
			aDel( aColsOk, nCols )
			aSize( aColsOk, Len( aColsOk )-1 )
		EndIf
	Next nCols

	dbSelectArea( cAliasTRB )
	dbGoTop()
	While (cAliasTRB)->(!Eof())
		If !Empty( (cAliasTRB)->TRB_OK ) .And. aScan( aColsOk, {|x| x[nPosCod] == (cAliasTRB)->TRB_CODEPI } ) == 0
			aAdd( aColsOk, aClone( aColsTp[1] ) )
			aColsOk[Len( aColsOk ), nPosCod] := (cAliasTRB)->TRB_CODEPI
			aColsOk[Len( aColsOk ), nPosDes] := (cAliasTRB)->TRB_DESC
		EndIf
		(cAliasTRB)->(dbSkip())
	End

	If Len( aColsOK ) <= 0
		aColsOK := aClone( aColsTp )
	EndIf

	aSort( aColsOK, , , { |x, y| x[1] < y[1] } ) //Ordena por plano
	oGetEPI:aCols := aClone( aColsOK )
	oGetEPI:oBrowse:Refresh()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fGravaEPI
Funcao para gravar dados da MsNewGetDados,
Plano Emergenciais na TOH

@author Guilherme Freudenburg
@since 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Static Function fGravaEPI( oObjeto )

	Local aArea := GetArea()
	Local i, j, nPosCod
	Local nOrd, cKey, cWhile
	Local aColsOk := aClone( oObjeto:aCols )
	Local aHeadOk := aClone( oObjeto:aHeader )

	nPosCod := aScan( aHeadOk, {|x| Trim( Upper( x[2] ) ) == "TOH_CODEPI"} )
	If lSigaMdtPs
		nOrd 	:= 4
		cKey 	:= xFilial( "TOH" )+SA1->A1_COD+SA1->A1_LOJA+&( cALCusto + "->"+cFiCusto )
		cWhile  := "xFilial('TOH')+SA1->A1_COD+SA1->A1_LOJA+"+cALCusto + "->"+cFiCusto+" == TOH->TOH_FILIAL+TOH->TOH_CLIENT+TOH->TOH_LOJA+TOH->TOH_CC"
	Else
		nOrd 	:= 1
		cKey 	:= xFilial( "TOH" )+&(cALCusto + "->"+cFiCusto)
		cWhile  := "xFilial('TOH')+"+cALCusto + "->"+cFiCusto+" == TOH->TOH_FILIAL+TOH->TOH_CC"
	EndIf

	If Len( aColsOK ) > 0
		//Coloca os deletados por primeiro
		aSORT( aColsOK, , , { |x, y| x[Len( aColsOK[1] )] .And. !y[Len( aColsOK[1] )] } )

		For i:=1 to Len( aColsOK )
			If !aColsOK[i][Len( aColsOK[i] )] .And. !Empty( aColsOK[i][nPosCod] )
				dbSelectArea( "TOH" )
				dbSetOrder( nOrd )
				If dbSeek( cKey+aColsOK[i][nPosCod] )
					RecLock( "TOH", .F. )
				Else
					RecLock( "TOH", .T. )
				Endif
				For j:=1 to FCount()
					If "_FILIAL"$Upper( FieldName( j ) )
						FieldPut( j, xFilial( "TOH" ) )
					ElseIf "_CC"$Upper( FieldName( j ) )
						FieldPut( j, &(cALCusto + "->"+cFiCusto) )
					ElseIf "_CLIENT"$Upper( FieldName( j ) )
						FieldPut( j, SA1->A1_COD )
					ElseIf "_LOJA"$Upper( FieldName( j ) )
						FieldPut( j, SA1->A1_LOJA )
					ElseIf (nPos := aScan( aHeadOk, {|x| Trim( Upper( x[2] ) ) == Trim( Upper( FieldName( j ) ) ) } ) ) > 0
						FieldPut( j, aColsOK[i, nPos] )
					Endif
				Next j
				MsUnlock( "TOH" )
			Elseif !Empty( aColsOK[i][nPosCod] )
				dbSelectArea( "TOH" )
				dbSetOrder( nOrd )
				If dbSeek( cKey+aColsOK[i][nPosCod] )
					RecLock( "TOH", .F. )
					dbDelete()
					MsUnlock( "TOH" )
				Endif
			Endif
		Next i
	Endif

	dbSelectArea( "TOH" )
	dbSetOrder( nOrd )
	dbSeek( cKey )
	While !Eof() .And. &(cWhile)
		If aScan( aColsOK, {|x| x[nPosCod] == TOH->TOH_CODEPI .And. !x[Len( x )]} ) == 0
			RecLock( "TOH", .F. )
			DbDelete()
			MsUnLock( "TOH" )
		Endif
		dbSelectArea( "TOH" )
		dbSkip()
	End
	RestArea( aArea )

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT725Lin
Valida linhas do MsNewGetDados dos Planos Emergenciais.

@author Guilherme Freudenburg
@since 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT725Lin( cAlias, lFim, oObjeto )

	Local nX
	Local aColsOk := {}, aHeadOk := {}
	Local nPosCod := 1, nAt := 1
	Default lFim := .F.

	aColsOk := aClone( oObjeto:aCols )
	aHeadOk := aClone( oObjeto:aHeader )
	nAt     := oObjeto:nAt

	If cAlias == "TOH"
		nPosCod := aScan( aHeadOk, {|x| Trim( Upper( x[2] ) ) == "TOH_CODEPI"} )
		If lFim
			If Len( aColsOk ) == 1 .And. Empty( aColsOk[1][nPosCod] )
				Return .T.
			EndIf
		EndIf
	EndIf

	//Percorre aCols
	For nX:= 1 to Len( aColsOk )
		If !aColsOk[nX][Len( aColsOk[nX] )]
			If lFim .Or. nX == nAt
				//VerIfica se os campos obrigatórios estão preenchidos
				If Empty( aColsOk[nX][nPosCod] )
					//Mostra mensagem de Help
					Help( 1, " ", "OBRIGAT2", , aHeadOk[nPosCod][1], 3, 0 )
					Return .F.
				Endif
			Endif
			//Verifica se é somente LinhaOk
			If nX <> nAt .And. !aColsOk[nAt][Len( aColsOk[nAt] )]
				If aColsOk[nX][nPosCod] == aColsOk[nAt][nPosCod] .And. !aColsOK[nX][Len( aColsOK[nX] )]
					Help( " ", 1, "JAEXISTINF", , aHeadOk[nPosCod][1] )
					Return .F.
				Endif
			Endif
		Endif
	Next nX

	PutFileInEof( "TOH" )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT725TOk
Função para verificar toda a MsNewGetdados.

@author Guilherme Freudenburg
@since 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT725TOk(oObjeto)

	If !MDT725Lin( "TOH", .T., @oObjeto )
		Return .F.
	Endif

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fBuscaEPI
Funcao para retornar todos os Requisitos.

@author Guilherme Freudenburg
@since 18/11/13
@return Nil
/*/
//---------------------------------------------------------------------
Function fBuscaEPI( cAliasTRB, oGetEPI, cTipo, lSX5 )

	Local nPosCod := 1
	Local aArea   := GetArea()
	Local aColsOK := aClone( oGetEPI:aCols )
	Local aHeadOk := aClone( oGetEPI:aHeader )

	nPosCod := aScan( aHeadOk, {|x| Trim( Upper( x[2] ) ) == "TOH_CODEPI"} )

	dbSelectArea( "SB1" )
	dbSetOrder( 1 )
	If dbSeek( xFilial( "SB1" ) )
		While SB1->(!Eof()) .And. SB1->B1_FILIAL == xFilial( "SB1" )
			If SB1->B1_MSBLQL <> '2'
				SB1->(dbSkip())
				Loop
			EndIf
			If !Empty( cTipo ) .And. ( lSX5 ) .And. !(SB1->B1_TIPO $ cTipo)
				SB1->(dbSkip())
				Loop
			EndIf
			RecLock( cAliasTRB, .T. )
			(cAliasTRB)->TRB_OK     := IIf( aScan( aColsOk, {|x| x[nPosCod] == SB1->B1_COD } ) > 0, cMarca, " " )
			(cAliasTRB)->TRB_CODEPI := SB1->B1_COD
			(cAliasTRB)->TRB_DESC := SB1->B1_DESC
			(cAliasTRB)->(MsUnLock())
			SB1->(dbSkip())
		End
	EndIf

	RestArea( aArea )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA725CHK
Consiste a existencia de outro codigo na GetDados

@author Liber De Esteban O.P.   Alterado : Guilherme Freudenburg
@since 29/09/04                   Data: 18/11/2013
@return Nil
/*/
//---------------------------------------------------------------------
Function MDTA725CHK()
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NG725EXCC
Valida exclusao do registro

@author Denis hyroshi de Souza.  Alterado : Guilherme Freudenburg
@since 29/09/04                   Data: 18/11/2013
@return Nil
/*/
//---------------------------------------------------------------------
Function NG725EXCC()
Local aArea := GetArea()
Local nPOS 	:= aSCAN( aHEADER, { |x| Trim( Upper( x[2] ) ) == "TOH_CODEPI" } )
Local nPerm	:= SuperGetMv( "MV_NGEPICC", .F., 1 )

If nPerm == 2
	Dbselectarea( "SRA" )
	Dbsetorder( 2 )
	Dbseek( xFilial( "SRA" )+&cFiCusto )
	While !Eof() .And. xFilial( "SRA" )+&cFiCusto == SRA->RA_FILIAL+SRA->RA_CC
	   Dbselectarea( "TNF" )
		Dbsetorder( 3 )
		If Dbseek( xFilial( "TNF" )+SRA->RA_MAT+aCols[n, nPOS] )   //TNF->TNF_CODEPI
			If Substr( cTime725, 1, 7 ) != Substr( Time(), 1, 7 ) .Or. cEpie725 <> aCols[n, nPOS]
				MsgStop( STR0018+;  //"Esta informação não poderá ser excluída, o EPI consta como "
							 STR0019, STR0020 )  //"Entregue para algum funcionário que pertence a este centro de custo."  //"ATENÇÃO"
			Endif
			RestArea( aArea )
			cTime725 := Time()
			cEpie725 := aCols[n, nPOS]
			Return .F.
		Endif

		Dbselectarea( "SRA" )
		Dbskip()
	End
EndIf
RestArea( aArea )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT725COP
Replica os EPI's de um centro de custo para outros centros de custo
selecionados.

@return .T.

@sample MDT725COP()

@author Julia Kondlatsch
@since 08/01/2018
/*/
//---------------------------------------------------------------------
Function MDT725COP()

	Local aArea		:= GetArea() //Salva a Area Atual

	//Variaveis para montar TRB
	Local cAliasTRB	:= GetNextAlias()
	Local cAliasTOH := GetNextAlias()
	Local aDBF, aTRB, aDescIdx
	Local oTempTRB1

	//Variaveis da Montagem do MarkBrowse
	Local lOK := .F.
	Local lInverte

	//Definicoes de Objetos
	Local oDialog
	Local oMark

	//Centro de custo que foi posicionado ao ser selecionado no browse
	Private cCCAtual := &(cALCusto + '->' + cFiCusto)

	//Variaveis Privadas
	Private cMarca	:= GetMark()

	//Variaveis da Pesquisa
	Private cPesquisar := Space( 200 )//Valor a ser pesquisado
	Private cCbxPesq   := ""
	Private aCbxPesq //ComboBox com indices de pesquisa
	Private oBtnPesq, oPesquisar//Botao de Pesquisa e Campo para Pesquisa
	Private oCbxPesq //ComboBox de Pesquisa

	//Alias com os registros de EPI do centro de custo selecionado
	BeginSQL Alias cAliasTOH

		SELECT TOH.TOH_FILIAL, TOH.TOH_CODEPI
		FROM  %table:TOH% TOH
		WHERE TOH.TOH_FILIAL =  %xFilial:TOH% AND
			  TOH.TOH_CC =  %exp:cCCAtual% AND
			  TOH.%notDel%

	EndSQL

	//Inicia criação do Mark
	lInverte := .F.

	//Valores e Caracteristicas da TRB com os centros de custo
	aDBF		:= {}
	aTRB		:= {}
	aDescIdx	:= {}

	aAdd( aDBF, { "OK", "C", 02, 0 } )
	aAdd( aDBF, { "CODIGO", "C", TAMSX3( cFiCusto )[1], 0 } )
	aAdd( aDBF, { "DESCRI", "C", TAMSX3( cFiDesc )[1], 0 } )
	aAdd( ADBF, { "FILIAL", "C", FwSizeFilial(), 0 } )

	aAdd( aTRB, { "OK", NIL, " ", } ) // Marcado ou não
	aAdd( aTRB, { "CODIGO", NIL, STR0012, } ) //"Código"
	aAdd( aTRB, { "DESCRI", NIL, STR0006, } ) //"Descrição"

	aAdd( aDescIdx, STR0012 + "+" + STR0006 ) //"Código"###"Descrição"
	aAdd( aDescIdx, STR0006 + "+" + STR0012 ) //"Descrição"###"Código"
	aAdd( aDescIdx, STR0026 ) //"Marcados"

	//Cria TRB
	oTempTRB1 := FWTemporaryTable():New( cAliasTRB, aDBF )
	oTempTRB1:AddIndex( "1", {"CODIGO", "DESCRI"} )
	oTempTRB1:AddIndex( "2", {"DESCRI", "CODIGO"} )
	oTempTRB1:AddIndex( "3", {"OK"} )
	oTempTRB1:Create()

	//Chama a função que preenche a TRB com os centros de custo
	Processa( { | lEnd | fBuscaCC( @cAliasTRB ) }, STR0035, STR0036 ) //"Buscando Registros..."###"Aguarde"

	dbSelectArea( cAliasTRB )
	dbGoTop()
	If ( cAliasTRB )->(Reccount()) <= 0

		lRefresh := .T.
		Msgstop( STR0027, STR0020 ) //"Não existem registros cadastrados."###"ATENÇÃO"

	ElseIf ( cAliasTOH )->(Eof())

		lRefresh := .T.
		Msgstop( STR0028, STR0020 ) //"Não existem EPi's a serem copiados."###"ATENÇÃO"

	Else
		//Criação da Tela
		DEFINE MSDIALOG oDialog TITLE OemToAnsi( STR0029 ) From 64, 160 To 580, 736 OF oMainWnd Pixel //"Cópia de EPI's"

			//--- DESCRICAO ( TOPO )
			oPanelDLG := TPanel():New( 0, 0, , oDialog, , .T., .F., , , 0, 0, .F., .F. )
			oPanelDLG:Align := CONTROL_ALIGN_ALLCLIENT

				oPanel := TPanel():New( 0, 0, , oPanelDLG, , .T., .F., , , 0, 55, .F., .F. )
				oPanel:Align := CONTROL_ALIGN_TOP

					@ 8, 9.6 TO 45, 280 OF oPanel PIXEL

					TSay():New( 19, 12, { | | OemtoAnsi( STR0030 ) }, oPanel, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 010 ) //"Estes são os centros de custo cadastrados no sistema."
					TSay():New( 29, 12, { | | OemtoAnsi( STR0031 ) }, oPanel, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 010 ) //"Selecione aqueles que devem receber o mesmo EPI."

				//--- PESQUISAR
				//Define as opcoes de Pesquisa
				aCbxPesq := aClone( aDescIdx )
				cCbxPesq := aCbxPesq[ 1 ]

				oPnlPesq := TPanel():New( 01, 01, , oPanelDLG, , , , CLR_BLACK, CLR_WHITE, 50, 30, .T., .T. )
				oPnlPesq:Align := CONTROL_ALIGN_ALLCLIENT

					oCbxPesq := TComboBox():New( 002, 002, { | u | IIf( PCount() > 0, cCbxPesq := u, cCbxPesq ) },;
														 aCbxPesq, 200, 08, oPnlPesq, , { | | };
														, , , , .T., , , , , , , , , "cCbxPesq" )
						oCbxPesq:bChange := { | | fSetIndex( cAliasTRB, aCbxPesq, @cPesquisar, oMark ) }

					oPesquisar := TGet():New( 015, 002, { | u | IIf( PCount() > 0, cPesquisar := u, cPesquisar ) }, oPnlPesq, 200, 008, "", { | | .T. }, CLR_BLACK, CLR_WHITE, ,;
							 				 .F., , .T./*lPixel*/, , .F., { | | cCbxPesq != aCbxPesq[ Len( aCbxPesq ) ] }/*bWhen*/, .F., .F., , .F./*lReadOnly*/, .F., "", "cPesquisar", , , , .F./*lHasButton*/ )

					oBtnPesq := TButton():New( 002, 220, STR0001, oPnlPesq, { | | fPesqTRB( cAliasTRB, oMark ) },; //"Pesquisar"
															 70, 10, , , .F., .T., .F., , .F., , , .F. )

				oMark := MsSelect():New( cAliasTRB, "OK", , aTRB, @lInverte, @cMarca, { 120, 5, 254, 281 } )
				oMark:oBrowse:lHasMark		:= .T.
				oMark:oBrowse:lCanAllMark	:= .T.
				oMark:oBrowse:bAllMark		:= { | | fInverte( cMarca, cAliasTRB, "OK", oMark, .T. ) }//Funcao inverte marcadores
				oMark:bMark	   				:= { | | fInverte( cMarca, cAliasTRB, "OK", oMark ) }//Funcao inverte marcadores
				oMark:oBrowse:Align			:= CONTROL_ALIGN_BOTTOM

		ACTIVATE MSDIALOG oDialog ON INIT EnchoiceBar( oDialog, {|| lOK := .T., oDialog:End()}, {|| lOk := .F., oDialog:End()} ) CENTERED

		If lOK
			fGravCopy( cAliasTRB, cAliasTOH )
		Endif

	Endif

	oTempTRB1:Delete()

	RestArea( aArea )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fSetIndex
Seta o indice para pesquisa

@return

@param cAliasTRB	- Alias do TRB ( Obrigatório )
@param aCbxPesq		- Indices de pesquisa do markbrowse. ( Obrigatório )
@param cPesquisar	- Valor da Pesquisa ( Obrigatório )
@param oMark		- Objeto do MarkBrowse ( Obrigatório )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fSetIndex( cAliasTRB, aCbxPesq, cPesquisar, oMark )

	Local nIndice := fRetInd( aCbxPesq ) // Retorna numero do indice selecionado

	// Efetua ordenacao do alias do markbrowse, conforme indice selecionado
	dbSelectArea( cAliasTRB )
	dbSetOrder( nIndice )
	dbGoTop()

	// Se o indice selecionado for o ultimo [Marcados]
	If nIndice == Len( aCbxPesq )
		cPesquisar := Space( Len( cPesquisar ) )// Limpa campo de pesquisa
		oPesquisar:Disable()              		// Desabilita campo de pesquisa
		oBtnPesq:Disable()              		// Desabilita botao de pesquisa
		oMark:oBrowse:SetFocus()     			// Define foco no markbrowse
	Else
		oPesquisar:Enable()               		// Habilita campo de pesquisa
		oBtnPesq:Enable()               		// Habilita botao de pesquisa
		oBtnPesq:SetFocus()             		// Define foco no campo de pesquisa
	Endif

	oMark:oBrowse:Refresh()

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} fRetInd
Retorna o indice, em numero, do item selecionado no combobox

@return nIndice - Retorna o valor do Indice

@param aIndMrk - Indices de pesquisa do markbrowse. ( Obrigatório )

@sample fRetInd( {} )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fRetInd( aIndMrk )

	Local nIndice := aScan( aIndMrk, { | x | AllTrim( x ) == AllTrim( cCbxPesq ) } )

	// Se o indice nao foi encontrado nos indices pre-definidos, apresenta mensagem
	If nIndice == 0
		ShowHelpDlg( STR0020, { STR0032 }, 1,; //"Atenção"###"Índice não encontrado."
							 { STR0033 }, 1 )   //"Contate o administrador do sistema."
		nIndice := 1
	Endif

Return nIndice
//---------------------------------------------------------------------
/*/{Protheus.doc} fBuscaCC
Realiza a busca dos registros de centro de custo para alimentar o TRB

@return Nil

@param cAliasTRB Caracter Indica o Alias do TRB

@sample fBuscaCC( 'TRB' )

@author Jackson Machado
@since 18/07/2013
/*/
//---------------------------------------------------------------------
Static Function fBuscaCC( cAliasTRB )

	Local aAreaTab	:= ( cALCusto )->( GetArea() )

	dbSelectArea( cALCusto )
	dbSetOrder( 1 )
	dbGoTop()
	While ( cALCusto )->( !Eof() )
		If cCCAtual <> &(cALCusto + '->' + cFiCusto)
			RecLock( cAliasTRB, .T. )
			( cAliasTRB )->OK		:= Space( 2 )
			( cAliasTRB )->CODIGO	:= &(cALCusto + '->' + cFiCusto)
			( cAliasTRB )->DESCRI	:= &(cALCusto + '->' + cFiDesc )
			( cAliasTRB )->FILIAL	:= &(cALCusto + '->' + cALCusto + '_FILIAL')
			( cAliasTRB )->( MsUnLock() )
		EndIf
		( cALCusto )->( dbSkip() )
	End
	RestArea( aAreaTab )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fGravCopy
Grava EPI's de acordo com a cópia feita

@return Sempre verdadeiro

@param cAliasTRB Caracter Indica o Alias do TRB com os centros de custo
@param cAliasTRB Caracter Indica o Alias da tabela TOH com os EPIs a
serem copiados

@sample fGravCopy( 'TRB' )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fGravCopy( cAliasTRB, cAliasTOH )

	Local aEPICopy	:= {}

	dbSelectArea( cAliasTRB )
    dbSetOrder( 1 )
	dbGoTop()
	While ( cAliasTRB )->( !Eof() )
		If !Empty( ( cAliasTRB )->OK ) //Se estiver marcado

			dbSelectArea( cAliasTOH )
			dbGoTop()
			While ( cAliasTOH )->( !Eof() )

				dbSelectArea( "TOH" )
				dbSetOrder( 1 )
				If dbSeek( ( cAliasTRB )->FILIAL + ( cAliasTRB )->CODIGO + ( cAliasTOH )->TOH_CODEPI )
					RecLock( "TOH", .F. )
				Else
					RecLock( "TOH", .T. )
				Endif

				If aScan( aEPICopy, { | x | x == ( cAliasTOH )->TOH_CODEPI } ) == 0
					aAdd( aEPICopy, ( cAliasTOH )->TOH_CODEPI )
				EndIf

				TOH->TOH_FILIAL := ( cAliasTRB )->FILIAL
				TOH->TOH_CC 	:= ( cAliasTRB )->CODIGO
				TOH->TOH_CODEPI := ( cAliasTOH )->TOH_CODEPI

				TOH->( MsUnlock() )

				( cAliasTOH )->( dbSkip() )
			End

			//Deleta os EPIs antigos da Função, para inclusão dos novos
			dbSelectArea( "TOH" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TOH", ( cAliasTRB )->FILIAL ) + ( cAliasTRB )->CODIGO )
				While TOH->(!Eof()) .And. xFilial( "TOH", ( cAliasTRB )->FILIAL ) == TOH->TOH_FILIAL .And. ( cAliasTRB )->CODIGO == TOH->TOH_CC
					If aScan( aEPICopy, { | x | x == TOH->TOH_CODEPI } ) == 0
						RecLock( "TOH", .F. )
						TOH->( dbDelete() )
						TOH->( MsUnlock() )
					Endif
					TOH->( dbSkip() )
				End
			EndIf

		EndIf
		( cAliasTRB )->( dbSkip() )
	End

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fInverte
Inverte as marcacoes ( bAllMark )

@return Nil

@param cMarca 		- Valor da marca do TRB ( Obrigatório )
@param cAliasTRB	- Alias do TRB ( Obrigatório )
@param cCampoOk		- Nome do campo da TRB que terá a marca invertida
@param oMark		- Objeto do MarkBrowse
@param lAll			- Indica se eh AllMark


@sample fInverte( "E" , "TRB" )

@author Julia Kondlatsch
@since 09/01/2018
/*/
//---------------------------------------------------------------------
Static Function fInverte( cMarca, cAliasTRB, cCampoOk, oMark, lAll )

	Local aArea := {}

	Default lAll := .F.

	If lAll
		aArea := GetArea()

		dbSelectArea( cAliasTRB )
		dbGoTop()
		While ( cAliasTRB )->( !Eof() )
			RecLock( cAliasTRB, .F. )
			( cAliasTRB )->&( cCampoOk ) := IIf( !Empty( ( cAliasTRB )->&( cCampoOk ) ), " ", cMarca )
			( cAliasTRB )->( MsUnLock() )
			( cAliasTRB )->( dbskip() )
		End

		RestArea( aArea )
	EndIf

	// Atualiza markbrowse
	If ValType( oMark ) != "U"
		oMark:oBrowse:Refresh()
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fPesqTRB
Funcao de Pesquisar no Browse.

@samples fPesqTRB()

@return Sempre verdadeiro

@param cAliasTRB	- Alias do MarkBrowse ( Obrigatório )
@param oMark 		- Objeto do MarkBrowse ( Obrigatório )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fPesqTRB( cAliasTRB, oMark )

	Local nRecNoAtu := 1//Variavel para salvar o recno
	Local lRet		:= .T.

	//Posiciona no TRB e salva o recno
	dbSelectArea( cAliasTRB )
	nRecNoAtu := RecNo()

	dbSelectArea( cAliasTRB )
	If dbSeek( AllTrim( cPesquisar ) )
		//Caso exista a pesquisa, posiciona
		oMark:oBrowse:SetFocus()
	Else
		//Caso nao exista, retorna ao primeiro recno e exibe mensagem
		dbGoTo( nRecNoAtu )
		ApMsgInfo( STR0034, STR0020 ) //"Valor não encontrado."###"Atenção"
		oPesquisar:SetFocus()
		lRet := .F.
	EndIf

	// Atualiza markbrowse
	oMark:oBrowse:Refresh( .T. )

Return lRet
//------------------------------------------------------
/*/{Protheus.doc} OrdMarkEPI()
Função de ordenação para o MarkBrose conforme selecionado
no ComboBox

@param  oCombo, objeto, Objeto do comboBox
@param  oGet,   objeto, Objeto do campo Get
@param  oMark,  objeto, Objeto do MarkBrowse

@author  Milena Leite de Oliveira
@since   14/02/2020
@return  Lógico
/*/
//------------------------------------------------------
Static Function OrdMarkEPI( oCombo, oGet, oMark )

	Local nIndEPI

	nIndEPI := oCombo:nAt
	//Ordena TRB conforme selecionado no combo
	dbSelectArea( cAliasTRB )
	dbSetOrder( nIndEPI )
	dbGoTop()
	//Caso for marcação, limpa Get
	If nIndEPI == 3 //TRB_OK
		oGet:cText	:= Space( 60 )
	EndIf

	oMark:oBrowse:Refresh()

Return .T.

//------------------------------------------------------
/*/{Protheus.doc} fBusEPI725()
Função de busca do EPI para o Mark Browse

@param  oCombo, objeto, Objeto do comboBox
@param  oGet,   objeto, Objeto do campo Get
@param  oMark,  objeto, Objeto do MarkBrowse

@author  Milena Leite de Oliveira
@since   14/02/2020
@return  Lógico
/*/
//------------------------------------------------------
Static Function fBusEPI725( oCombo, oGet, oMark )

	Local lRet
	Local nInd
	Local cResult

	lRet    := .T.
	nInd    := oCombo:nAt
	cResult := AllTrim( oGet:cText )

	dbSelectArea( cAliasTRB )
	dbSetOrder( nInd )

	If ! ( lRet := dbSeek( cResult ) )
		MsgInfo( STR0034, STR0015 )//"Valor não encontrado."##"ATENÇÃO"
		(cAliasTRB)->(dbGoTop())
	Else
		oMark:oBrowse:SetFocus()//Se encontra resultado, focaliza tela do mark
	EndIf

Return lRet
