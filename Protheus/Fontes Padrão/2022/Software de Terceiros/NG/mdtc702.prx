#Include "Protheus.ch"
#Include "MDTC702.ch"

#DEFINE _nVERSAO 3 //Versao do fonte

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA183
Consulta de Medidas de Controle, com Tipo de Controle = 2 - Medida 
 Coletiva;

@author Guilherme Benkendorf
@since 20/05/2013
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Function MDTC702

	Local aNGBEGINPRM := NGBEGINPRM(_nVERSAO) // Armazena variaveis para devolucao [NGRIGHTCLICK]
	Local cExprFilTop := ""
	
	Private lSigaMdtPs  := GetNewPar("MV_MDTPS","N") == "S"
	Private cCadastro := OemtoAnsi( If(lSigaMdtPs, STR0001, STR0002) ) // "Clientes" "Medidas de Controle"
	
	 If !lSigaMdtPs
	 	cExprFilTop :=  "TO4_FILIAL = '" + xFilial("TO4") + "' AND TO4_TIPCTR = '2'"
	 EndIf
	
	MDT702BRW( If( lSigaMdtPs, "SA1", "TO4" ), 1, MenuDef(lSigaMdtPs), cExprFilTop )
	
	NGRETURNPRM(aNGBEGINPRM) // Devolve variaveis armazenadas [NGRIGHTCLICK]
	
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Menu Funcional.

@author Guilherme Benkendorf
@since 20/05/2013
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function MenuDef(lMdtPs)
	
	Local aRotina := {}
	Local lRis	:= .T.
	
	Default lMdtPs	:= GetNewPar("MV_MDTPS","N") == "S"
	
	lRis	:= !lMdtPs
		
	If lMdtPs
		aRotina := {	{ STR0003	, "AxPesqui"  , 0, 1 } ,; // "Pesquisar"
						{ STR0002	, "MDTC702MeC", 0, 2 } }  // "Medidas de Controle"
	Else
		aRotina := {	{ STR0003	, "AxPesqui"	, 0, 1 } ,;   // "Pesquisar"
						{ STR0004	, "NGCAD01"		, 0, 2 } }
	EndIf
	
	If lRis
		aAdd( aRotina, { STR0005	,"MDT702CAD"	, 0, 2 } )  // "Riscos"
	EndIf

		
Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT702BRW
Tela inicial para selecao de Cliente. [Prestador de Servico]

@author Guilherme Benkendorf
@since 20/05/2013
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function MDT702BRW(cAliasBrw, nOrdBrw, aRotPar, cExprFilTop)
	
	Default aRotPar := {}
	Default nOrdBrw := 1
	Default cExprFilTop := ""
	
	Private aRotina := aClone(aRotPar)
	
	If Len(aRotina) == 0
		Return
	Endif
	
	dbSelectArea(cAliasBrw)
	dbSetOrder(nOrdBrw)
	mBrowse(6, 1, 22, 75, cAliasBrw,,,,,,,,,,,,,,cExprFilTop)
	
Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT183PSPQ
Tela inicialm para selecao de Cliente. [Prestador de Servico]

@author Hugo R. Pereira
@since 18/01/2013
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function MDTC702MeC(cAlias, nRecno, nOpcx)

	Local cExprFilTop :=  "TO4_FILIAL = '" + xFilial("TO4") + "' AND TO4_TIPCTR = '2'"	
	Private cCliMdtPs := SA1->A1_COD + SA1->A1_LOJA	
	
	dbSelectArea("TO4")
	
	MDT702BRW( "TO4", 1, MenuDef(.F.,.T.), cExprFilTop )
	
Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT702CAD
Tela de relacao, os riscos relacionados as Medidas de Controle

@author Guilherme Benkendorf
@since 20/05/2013
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT702CAD()
	Local nX			:= 0
	Local nY			:= 0
	//Objeto grafico para os riscos
	Local oDlgRis
	//Objeto da TCBrowse
	Local oBrwList
	//Arrays de titulo e informacoes para TCBrowse
	Local aTitulos	:= {}
	Local aRisco	:= {}
	Local aBrowse	:= {}
	
	//Variaveis de tela
	Local aInfo		:= {}
	Local aPosObj	:= {}
	Local aSize		:= MsAdvSize(,.f.,430)
	Local aObjects	:= {}
	
	//Carrega os Riscos vinculados
	MDTC702Ris( @aRisco )
	
	If Len(aRisco) == 0
		MsgInfo(STR0006 + Alltrim(TO4->TO4_CONTRO) + " - " + Alltrim(TO4->TO4_NOMCTR), STR0007 )//"Não há riscos vinculados a Medida de Controle: "###"Atenção"
		Return
	Endif
	//Carrega os titulos a serem apresentados;
	fTituloRis( @aTitulos )
	
	//Inicializa variaveis de Tela
	Aadd(aObjects,{050,050,.t.,.t.})
	Aadd(aObjects,{100,100,.t.,.t.})
	aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.t.)
	
	DEFINE MSDIALOG oDlgRis TITLE STR0005 From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd PIXEL //"Riscos"

		oBrwList := TCBrowse():New( 0 , 0, 0, 0, , aTitulos , , oDlgRis,,,,,,,,,,,,.F.,,.T.,,,,.T.,.T.)
	   //Define array a ser utilizada
	   oBrwList:SetArray( aRisco )
	   //Define as posicoes do array a serem exibidas
		oBrwList:bLine := {|| fRetLine(	aRisco , oBrwList:nAt ) }
	   oBrwList:Align   := CONTROL_ALIGN_ALLCLIENT
	    
	ACTIVATE MSDIALOG oDlgRis ON INIT EnchoiceBar( oDlgRis,{|| oDlgRis:End() }, {|| oDlgRis:End() }) CENTERED
	
Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MDTC702Ris
Busca valores do risco e armazena na array

@author Guilherme Benkendorf
@since 20/05/2013
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function MDTC702Ris(aRisco)
    
	Local nCampo:= 0
	Local nX		:= 0
    
	Local nIndTO9	:= 1 ////TO9_FILIAL+TO9_NUMRIS+TO9_EPC

	Local nIndTN0	:= 1 //TN0_FILIAL+TN0_NUMRIS
	Local cSeekTN0	:= "xFilial('TN0')"
	Local cWhileTN0	:= "xFilial('TN0') == TN0->TN0_FILIAL"
	
	Local cCliente	:= If( lSigaMdtPs, cCliMdtPs , "" )
	
	Local aCmps		:= {}
	//Carrega array com os campos utilizados
	fPrepCampo( @aCmps )
	
	If lSigaMdtPs
		nIndTN0		:= 8 //TN0_FILIAL+TN0_CODCLI+TN0_LOJACL+TN0_NUMRIS
		cWhileTN0	:= "xFilial('TN0') == TN0->TN0_FILIAL .AND. '" + cCliente + "' == TN0->TN0_CODCLI + TN0->TN0_LOJACL"
		
		nIndTO9		:= 2//TO9_FILIAL+TO9_CLIENT+TO9_LOJA+TO9_NUMRIS+TO9_EPC
	EndIf
	//Verifica todos os riscos
	dbSelectArea("TN0")
	dbSetOrder(nIndTN0)
	dbSeek(&cSeekTN0. + cCliente)
	
	While !Eof() .And. &cWhileTN0.
		
		dbSelectArea("TO9")
		dbSetOrder(nIndTO9)
		//Caso nao tenha vinculo com Medidas de controle
		If !dbSeek(xFilial("TO9") + cCliente + TN0->TN0_NUMRIS)
			dbSelectArea("TN0")
			dbSkip()
			Loop
		EndIf
		
	   If !dbSeek(xFilial("TO9") + cCliente + TO9->TO9_NUMRIS + "2" + TO4->TO4_CONTRO)
			dbSelectArea("TN0")
			dbSkip()
			Loop
		EndIf
		//Verifica se ja foi cadastrado o risco no array				
		If aScan( aRisco, {|x| x[1] == TN0->TN0_NUMRIS } ) == 0
			//Adiciona mais um array multiplo em aRisco e incremeta posicao
			aAdd( aRisco, Array(Len(aCmps)) )
			nX += 1

			For nCampo := 1 To Len(aCmps)
				 //Verifica os campos Virtuais, com Combo e cadastra valores especificos
				If aCmps[nCampo] == "TN0_NOMAGE"
					aRisco[nX , nCampo] := NGSEEK("TMA", TN0->TN0_AGENTE, 1, "TMA_NOMAGE")  
				ElseIf aCmps[nCampo] == "TN0_NOMFON"
					aRisco[nX , nCampo] := NGSEEK("TN7", TN0->TN0_FONTE, 1, "TN7_NOMFON")
				  
				ElseIf aCmps[nCampo] == "TN0_DESCCC"
					aRisco[nX , nCampo] := MDT180BRW( .T. )
				    
				ElseIf aCmps[nCampo] == "TN0_DESCFU"
					aRisco[nX , nCampo] := MDT180FUN( .T. )
				    
				ElseIf aCmps[nCampo] == "TN0_DESCDP"
					aRisco[nX , nCampo] := MDT180BRW( .T. , 2 )
				    
				ElseIf aCmps[nCampo] == "TN0_NOMTAR"
					aRisco[nX , nCampo] := MDT180BRW2( .T. )
				    
				ElseIf aCmps[nCampo] == "TN0_LISASO"   
					aRisco[nX , nCampo] := NGRETSX3BOX("TN0_LISASO", TN0->&(aCmps[nCampo]) )
				
				ElseIf aCmps[nCampo] == "TN0_GRAU"
			  		aRisco[nX , nCampo] := NGRETSX3BOX("TN0_GRAU", TN0->&(aCmps[nCampo]) )
				
				ElseIf aCmps[nCampo] == "TN0_NECEPI"
					aRisco[nX , nCampo] := NGRETSX3BOX("TN0_NECEPI", TN0->&(aCmps[nCampo]) )
				//Cadastra valores no aRisco
				Else
					aRisco[nX , nCampo] := TN0->&(aCmps[nCampo])			    
				EndIf
			Next nCampo
		EndIf
		
		dbSelectArea("TN0")
		dbSkip()
	End

Return 
//---------------------------------------------------------------------
/*/{Protheus.doc} Mdt183Brw
Cria array com titulos atraves da funcao fPrepCampo

@author Guilherme Benkendorf
@since 20/05/2013
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function fTituloRis ( aTitulos )
	Local nX		:= 0
	Local aCampos	:= {}
    //Verifica os campos a serem consultados
	fPrepCampo( @aCampos )
	//Seleciona SX3 na ordem "CAMPOS"
	dbSelectArea("SX3")
	dbSetOrder(2)

	For nX := 1 To Len(aCampos)
		//Verifica se existe campo
		If dbSeek(aCampos[nX])
            //Adiciona o titulo no array de titulos
			aAdd( aTitulos, X3Titulo() )

		EndIf

	Next nX
 
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} Mdt183Brw
Cria array com os campos a ser tratado na rotina

@author Guilherme Benkendorf
@since 20/05/2013
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function fPrepCampo ( aCampos )
	Local nX	:= 0
	Local lDepto := NGCADICBASE( "TN0_DEPTO", "A" , "TN0" , .F. )
	
	aAdd( aCampos,"TN0_FILIAL" ) // Filial												
	aAdd( aCampos,"TN0_NUMRIS" ) // Num Risco
	aAdd( aCampos,"TN0_AGENTE" ) // Agente
	aAdd( aCampos,"TN0_NOMAGE" ) // Nome do Agente
	aAdd( aCampos,"TN0_FONTE"  ) // Fonte Geradora
	aAdd( aCampos,"TN0_NOMFON" ) // Nome da Fonte Geradora
	aAdd( aCampos,"TN0_DTAVAL" ) // Data avaliacao
	aAdd( aCampos,"TN0_DTELIM" ) // Data Eliminacao
	aAdd( aCampos,"TN0_CC"     ) // Centro de Custo
	aAdd( aCampos,"TN0_DESCCC" ) // Descricao do Centro de Custo
	aAdd( aCampos,"TN0_CODFUN" ) // Codigo do Funcionario
	aAdd( aCampos,"TN0_DESCFU" ) // Descricao do Funcionario
	aAdd( aCampos,"TN0_CODTAR" ) // Codigo da Tarefa
	aAdd( aCampos,"TN0_NOMTAR" ) // Nome da tarefa
	If lDepto //Caso utilize Departamento. 
		aAdd( aCampos,"TN0_DEPTO"  ) // Departamento
		aAdd( aCampos,"TN0_DESCDP" ) // Descricao do Departamento
	EndIf
	aAdd( aCampos,"TN0_LISASO" ) // Considerar Risco
	aAdd( aCampos,"TN0_GRAU"   ) // Grau do Risco
	aAdd( aCampos,"TN0_NECEPI" ) // Necessita de EPI
	
	//Verifica no dicionario a existecia dos campos
	// caso nao existir excluir do array
	dbSelectArea("SX3")
	dbSetOrder(2)
	For nX := Len( aCampos ) To 1 Step -1
		If !dbSeek( aCampos[nX] )
			aDel( aCampos,nX )
			aSize( aCampos, Len(aCampos)-1 )
		EndIf
	Next nX

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} fRetLine
Retorna as informcaoes a serem apresentadas na linha

@return aRet  - Array contendo as informacoes a serem apresentadas na linha

@param aPosicioes - Informacoes do array do listbox
@param nPosicao  - Posicao atual do listbox

@sample
fRetLine( aArray , 1 )

@author Jackson Machado
@since 14/02/2013
/*/
//---------------------------------------------------------------------
Static Function fRetLine( aPosicoes , nPosicao )
 
 Local nCount	:= 1 //Contador do For
 Local aRet		:= {}//Retorno para o bLine do List
 
 // Utiliza a estrutura de repeticao For para 'jogar' no retorno a quantidade correta de posicoes
 For nCount := 1 To Len( aPosicoes[ nPosicao ] )
  aAdd( aRet , aPosicoes[ nPosicao , nCount ] )
 Next nCount

Return aRet