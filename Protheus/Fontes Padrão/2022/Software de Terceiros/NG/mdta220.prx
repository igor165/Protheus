#INCLUDE "MDTA220.ch"
#Include "Protheus.ch"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA220
Programa de Cadastro de Laudo x Equipamento

@author Thiago Machado
@since 27/07/00
@version MP12
@return .T.
/*/
//---------------------------------------------------------------------
Function MDTA220

	//-----------------------------------------------
	//Guarda conteudo e declara variaveis padroes
	//-----------------------------------------------
	Local aNGBEGINPRM := NGBEGINPRM( )

	aOldMenu := ACLONE(asMenu)
	asMenu := NGRIGHTCLICK("MDTA220")

	aNGCAD02:={;
			If(Type("aCHOICE") == "A",ACLONE(aCHOICE),{}),;
			If(Type("aVARNAO") == "A",ACLONE(aVARNAO),{}),;
			If(Type("aGETNAO") == "A",ACLONE(aGETNAO),{}),;
			If(Type("cGETWHILE") == "C",cGETWHILE,NIL),;
			If(Type("cGETMAKE") == "C",cGETMAKE,NIL),;
			If(Type("cGETKEY") == "C",cGETKEY,NIL),;
			If(Type("cGETALIAS") == "C",cGETALIAS,NIL),;
			If(Type("cTUDOOK") == "C",cTUDOOK,NIL),;
			If(Type("cLINOK") == "C",cLINOK,NIL),;
			If(Type("aRELAC") == "A",ACLONE(aRELAC),{}),;
			If(Type("aCHKDEL") == "A",ACLONE(aCHKDEL),{}),;
			If(Type("bngGRAVA") == "A",ACLONE(bngGRAVA),{}),;
			If(Type("aNGBUTTON") == "A",ACLONE(aNGBUTTON),{})}

	Private lMdtps := .F.
	Private aVetinr := {}

	If SuperGetMv("MV_MDTPS",.F.,"N") == "S"
		lMdtps := .T.
	Endif

	//---------------------------------------------------------------------
	// Define Array contendo as Rotinas a executar do programa
	// ----------- Elementos contidos por dimensao ------------
	// 1. Nome a aparecer no cabecalho
	// 2. Nome da Rotina associada
	// 3. Usado pela rotina
	// 4. Tipo de Transação a ser efetuada
	//    1 - Pesquisa e Posiciona em um Banco de Dados
	//    2 - Simplesmente Mostra os Campos
	//    3 - Inclui registros no Bancos de Dados
	//    4 - Altera o registro corrente
	//    5 - Remove o registro corrente do Banco de Dados
	//---------------------------------------------------------------------
	PRIVATE aRotina := MenuDef()

	If lMdtps
		//---------------------------------------------------------------------
		//Define o cabecalho da tela de atualizacoes
		//---------------------------------------------------------------------
		cCadastro := OemtoAnsi(STR0006) //"Equipamentos Utilizados no Laudo"
		aCHKDEL := {}
		bNGGRAVA := ""
		cPrograma := "MDTA220"
		cCliMdtPs := ""

		nSizeCli := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
		nSizeLoj := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))

		DbSelectArea("SA1")
		DbSetOrder(1)
		mBrowse( 6, 1,22,75,"SA1")
	Else
		//---------------------------------------------------------------------
		//Define o cabecalho da tela de atualizacoes
		//---------------------------------------------------------------------
		cCadastro := OemtoAnsi(STR0006) //"Equipamentos Utilizados no Laudo"
		aCHKDEL := {}
		bNGGRAVA := ""

		//----------------------------
		//Endereca a funcao de BROWSE
		//----------------------------
		DbSelectArea("TO0")
		DbSetOrder(1)
		mBrowse( 6, 1,22,75,"TO0")
	Endif

	//--------------------------------------
	//Retorna conteudo de variaveis padroes
	//--------------------------------------
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} N220AGEN
Busca valores para dois campos virtuais ao mesmo tempo
codigo e nome do agente, na inclusao.

@author Thiago Machado
@since 27/07/00
@version MP12
@return .T.
/*/
//---------------------------------------------------------------------
Function N220AGEN()

	Local cOLDALI   := ALIAS()
	Local cAGE
	DbselectArea("TN0")
	DbsetOrder(1)
	If Dbseek(xfilial("TN0")+M->TO2_NUMRIS)
	cAGE := TN0->TN0_AGENTE
			DbselectArea("TMA")
			DbsetOrder(1)
			If Dbseek(xfilial("TMA") + cAGE)
				M->TO2_NOMAGE := TMA->TMA_NOMAGE
			Endif
	Endif
	DbSelectArea(cOLDALI)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NG220CDA
Busca Codigo do agente para mostrar na tela de alteracao

@author Thiago Machado
@since 27/07/00
@version MP12
@return .T.
/*/
//---------------------------------------------------------------------
Function NG220CDA()

	Local cOLDALI   := ALIAS()
	DbselectArea("TN0")
	DbsetOrder(1)
	If Dbseek(xfilial("TN0")+TNJ->TNJ_NUMRIS)
	cCodAgen := TN0->TN0_AGENTE
	DbselectArea("TMA")
	DbsetOrder(1)
	If Dbseek(xfilial("TMA") + cCodAgen)
		M->TNJ_NOMAGE := TMA->TMA_NOMAGE
	Endif
	Lrefresh := .T.
	Endif

	DbSelectArea(cOLDALI)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NG220EQ
Inclusao dos equipamentos utilizados no laudo

@author Thiago Olis Machado
@since 14/08/2001
@version MP12
@return .T.
/*/
//---------------------------------------------------------------------
Function NG220EQ(cAlias,nReg,nOpcx)

	LOCAL i
	Local aSize   := MsAdvSize(,.F.,430)
	Local aInfo   := {aSize[4],aSize[5],aSize[6],0,0}
	Local oDlgHCO
	Local nLeft
	Local oPnlLd, oPnlEqp
	Local oDlg220, nX
	Local lOk := .F.
	Local aPages:= {},aTitles:= {}
	Local cKEY := ""
	Private lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .T. , .F. )
	Private oMenu
	//Private aTELA[0][0],aGETS[0],aHeader[0],Continua,nUsado:=0,aCols := {}

	//Variaveis de Enchoice
	Private aTela := {}, aGets := {}

	//Variaveis de GetDados
	Private aCols := {}, aHeader := {}
	Private aCols01 := {}, aHead01 := {}
	Private aCols02 := {}, aHead02 := {}
	Private oGet01, oGet02, aObjects := {}

	//Variaveis de tamanho de tela e objetos
	//Private aSize := MsAdvSize(,.F.,430), aObjects := {}
	Aadd(aObjects,{050,050,.T.,.T.})
	Aadd(aObjects,{100,100,.T.,.T.})
	aInfo := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.T.)

	//Variaveis para Estrutura Organizacional e TRB
	Private aLocal := {}, aMarcado := {}
	Private oTree
	Private aVETINR := {}
	Private aItensCar := {},nNivel := 0,nMaxNivel := 0

	bCampo   := {|nCPO| Field(nCPO) }

	If !(Alltrim(GetTheme()) == "FLAT") .And. !SetMdiChild()
		aSize[6] := aSize[6]-50
		aSize[5] := aSize[5]-30
		aSize[4] := aSize[4]-02
		nLeft := 2
	EndIf

	dbSelectArea("TM7")
	dbSetOrder(1)

	DbSelectArea("TO2")
	FOR i := 1 TO FCount()
	      M->&(EVAL(bCampo,i)) := &(EVAL(bCampo,i))

	      If nOPCX == 3    //INCLUIR
	         IF      ValType(M->&(EVAL(bCampo,i))) == "C"
	                M->&(EVAL(bCampo,i)) := SPACE(LEN(M->&(EVAL(bCampo,i))))
	         ELSEIF ValType(M->&(EVAL(bCampo,i))) == "N"
	                M->&(EVAL(bCampo,i)) := 0
	         ELSEIF ValType(M->&(EVAL(bCampo,i))) == "D"
	                M->&(EVAL(bCampo,i)) := cTod("  /  /  ")
	         ELSEIF ValType(M->&(EVAL(bCampo,i))) == "L"
	                M->&(EVAL(bCampo,i)) := .F.
	         ENDIF
	      Endif
	Next i

	M->TO2_LAUDO   := TO0->TO0_LAUDO

	MDTA220IN(nOPCX)

	cTUDOOK  := "NG400TUDOK"
	cLINOK   := "NG400LINOK"

	nOPCAP := 0

	Aadd(aTitles,OemToAnsi(STR0016))//"Equipamentos"
	Aadd(aPages,"Header 1")
	Aadd(aTitles,OemToAnsi(STR0022))//"Bens"
	Aadd(aPages,"Header 2")

	Define MsDialog oDlg220 Title Ccadastro From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd Pixel

	  	//Painel de Fundo
		oPnlLd := TPanel():New(0,0,,oDlg220,,,,,,0,0,.F.,.F.)
		oPnlLd:Align := CONTROL_ALIGN_ALLCLIENT

			//Painel dos campos
			oPanelCmps := TPanel():New(00,00,,oPnlLd,,,,,,0,60,.F.,.F.)
			oPanelCmps:Align:= CONTROL_ALIGN_TOP

				@ 0.2,01 SAY OemToAnsi(STR0008) Of oPanelCmps //"Laudo"
				@ 0.2,04 MSGET TO0->TO0_LAUDO When .F. Of oPanelCmps

				@ 1.2,01 SAY OemToAnsi(STR0009) Of oPanelCmps //"Nome"
				@ 1.2,04 MSGET TO0->TO0_NOME When .F. SIZE 180,7 Of oPanelCmps

				@ 2.2,01 SAY OemToAnsi(STR0010) Of oPanelCmps //"Dt.Incic"
				@ 2.2,04 MSGET TO0->TO0_DTINIC Size 45,9 When .F. Of oPanelCmps HasButton
				@ 2.2,18 SAY OemToAnsi(STR0011) Of oPanelCmps //"Data Fim"
				@ 2.2,21 MSGET TO0->TO0_DTFIM Size 45,9 When .F. Of oPanelCmps HasButton

				@ 45,5 BUTTON "&"+STR0016 OF oPanelCmps SIZE 39,12 PIXEL ACTION ( MDT220BU() ) //"Equipamentos"
				@ 45,65 BUTTON "&"+STR0022 OF oPanelCmps SIZE 39,12 PIXEL ACTION ( MDT220BENS() ) //"Bens"

			//-----------------------
			//Parte de baixo da tela
			//-----------------------
			oPanelBot := TPanel():New(0,0,,oPnlLd,,,,,,0,aPosObj[2,4],.F.,.F.)
			oPanelBot:Align := CONTROL_ALIGN_ALLCLIENT

			oFolder220 := TFolder():New(aSize[6]/5,0,aTitles,aPages,oPanelBot,,,,.T.,.F.)
			oFolder220:aDialogs[1]:oFont := oDlg220:oFont
			oFolder220:aDialogs[2]:oFont := oDlg220:oFont
			//oFolder220:bSetOption := {|nOption| U_fValTotal(nOpcx)}
			oFolder220:Align := CONTROL_ALIGN_ALLCLIENT
			aMarcado := aClone(aLocal)

			//------------------
			//Controle Getdados
			//------------------

			//****************************** Equipametos *******************************
			aHeader := {}
			aCols := {}
			aGETNAO := {"TO2_LAUDO","TO2_NOMLAU"}
			If lSigaMdtps
				cGet01	:= "TO2->TO2_FILIAL == '"+xFilial("TO2")+"' .And. TO2->TO2_LAUDO = '"+TO0->TO0_LAUDO+"' .And. TO2->TO2_CLIENT+TO2->TO2_LOJA = '"+TO0->TO0_CLIENT+TO0->TO0_LOJA+"'"
				cKEY		:= "TO2->TO2_CLIENT+TO2->TO2_LOJA+TO2->TO2_LAUDO"
				nOrder1 	:= NGRETORDEM("TO2","TO2_FILIAL+TO2_CLIENT+TO2_LOJA+TO2_LAUDO+TO2_EQPTO",.T.)
				FillGetDados( nOpcx, "TO2", nOrder1, cKEY, {|| }, {|| .T.},aGETNAO,,,,{|| NGMontaAcols("TO2", TO0->TO0_CLIENT+TO0->TO0_LOJA+TO0->TO0_LAUDO,cGet01)})
			Else
				cGet01	:= "TO2->TO2_FILIAL == '"+xFilial("TO2")+"' .And. TO2->TO2_LAUDO = '"+TO0->TO0_LAUDO+"'"
				cKEY		:= "TO2->TO2_LAUDO"
				nOrder1 	:= NGRETORDEM("TO2_FILIAL+TO2_LAUDO+TO2_EQPTO",.T.)
				FillGetDados( nOpcx, "TO2", nOrder1, cKEY, {|| }, {|| .T.},aGETNAO,,,,{|| NGMontaAcols("TO2", TO0->TO0_LAUDO,cGet01)})
			EndIf

			aCols01 := aClone(aCols)
			aHead01 := aClone(aHeader)

			If Empty(aCols01)// .Or. nOpcx == 3
			   aCols01 := BlankGetd(aHead01)
			Endif

			n      := Len(aCols01)
			oGet01 := MsNewGetDados():New(005, 005, 100, 200,IIF(!Inclui.And.!Altera,0,GD_INSERT+GD_UPDATE+GD_DELETE),"COMBLinOk1()  .And. PutFileInEof( 'TO2' )","CHKTUDOK",,,,9999,,,,oFolder220:aDialogs[1],aHead01, aCols01)

			oGet01:oBrowse:Default()
			//oGet01:oBrowse:bChange:= {|| fChange() }
			oGet01:oBrowse:Refresh()
			oGet01:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

			PutFileInEof("TO2")
			//oGet01:oBrowse:bChange:= {|| fChange() }

			//******************************** Bens ************************************
			aHeader := {}
			aCols := {}
			aGETNAO := {"TOD_LAUDO"}//Retira campo Laudo da Get
			If lSigaMdtps
				cGet02 := "TOD->TOD_FILIAL == '"+xFilial("TOD")+"' .And. TOD->TOD_LAUDO = '"+TO0->TO0_LAUDO+"' .And. TOD->TOD_CLIENT+TOD->TOD_LOJA = '"+TO0->TO0_CLIENT+TO0->TO0_LOJA+"'"
				cKEY		:= "TOD->TOD_CLIENT+TOD->TOD_LOJA+TOD->TOD_LAUDO"
				nOrder2 	:= NGRETORDEM("TOD","TOD_FILIAL+TOD_CLIENT+TOD_LOJA+TOD_LAUDO+TOD_CODBEM",.T.)
				FillGetDados( nOpcx, "TOD", nOrder2, cKEY, {|| }, {|| .T.},aGETNAO,,,,{|| NGMontaAcols("TOD", TO0->TO0_CLIENT+TO0->TO0_LOJA+TO0->TO0_LAUDO,cGet02)})
			Else
				cGet02 := "TOD->TOD_FILIAL == '"+xFilial("TOD")+"' .And. TOD->TOD_LAUDO = '"+TO0->TO0_LAUDO+"'"
				cKEY		:= "TOD->TOD_LAUDO"
				nOrder2 	:= NGRETORDEM("TOD_FILIAL+TOD_LAUDO+TOD_CODBEM",.T.)
				FillGetDados( nOpcx, "TOD", nOrder2, cKEY, {|| }, {|| .T.},aGETNAO,,,,{|| NGMontaAcols("TOD", TO0->TO0_LAUDO,cGet02)})
			EndIf

			aCols02 := aClone(aCols)
			aHead02 := aClone(aHeader)

			If Empty(aCols02)// .Or. nOpcx == 3
			   aCols02 := BlankGetd(aHead02)
			Endif

			n      := Len(aCols02)
			oGet02 := MsNewGetDados():New(005, 005, 100, 200,IIF(!Inclui.And.!Altera,0,GD_INSERT+GD_UPDATE+GD_DELETE),"COMBLinOk2()  .And. PutFileInEof( 'TOD' )","CHKTUDOK",,,,9999,,,,oFolder220:aDialogs[2],aHead02, aCols02)
			oGet02:oBrowse:Default()
			oGet02:oBrowse:Refresh()
			oGet02:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

			PutFileInEof("TOD")

			//------------
			//Transporte
			//------------
			aTela := {}
			aGets := {}

	ACTIVATE MSDIALOG oDlg220 ON INIT EnchoiceBar(oDlg220,{||nOpcap:=1,oDlg220:End()},{||oDlg220:End()})CENTERED

	If nOpcap = 1
	   NG220GRAVA()
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} COMBLinOk1
Critica se a linha digitada esta' Ok

@author Thiago Olis Machado
@since 14/08/2001
@version MP12
@return lRet
/*/
//---------------------------------------------------------------------
Function COMBLinOk1(o)

	Local xx := 0, npos, lRET := .T.
	Local nX

	nPOS := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TO2_EQPTO"})

	If n > 1
	For nX := 1 to Len(oGet01:aCols)
			If oGet01:aCols[nX][1] == oGet01:aCols[n][1] .And. (!oGet01:aCols[n][Len(oGet01:aCols[n])] .And. !oGet01:aCols[nX][Len(oGet01:aCols[nX])])
				xx := xx + 1
		EndIf
	Next
	Endif

	If xx > 1
	Help(" ",1,"JAEXISTINF")
	lRet := .F.
	Endif

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} CHKTUDOK
Critica se a linha digitada esta' Ok

@author Thiago Olis Machado
@since 14/08/2001
@version MP12
@return lRet
/*/
//---------------------------------------------------------------------
Function CHKTUDOK()

	Local lRET := .T.
	/*
	If n > 1
	For nX := 1 to Len(aCOLS)
		If nX != n
			If oGet01:aCols[nX][1] == oGet01:aCols[n][1]
				xx := xx + 1
			Endif
		EndIf
	Next
	Endif

	If xx > 0
	Help(" ",1,"JAEXISTINF")
	lRet := .F.
	Endif
	*/

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} NG220GRAVA
Grava os equipamentos utilizados no laudo

@author Thiago Olis Machado
@since 14/08/2001
@version MP12
@return .T.
/*/
//---------------------------------------------------------------------
Function NG220GRAVA()

	Local x

	If lMDTPS //Prestador
		DbSelectArea("TO2")
		DbSetOrder(3)
		For x := 1 To Len(oGet01:aCols)

			If oGet01:aCols[x][Len(oGet01:aCols[x])]
			dbSelectArea("TO2")
				If DbSeek(xFilial("TO2")+SA1->A1_COD+SA1->A1_LOJA+TO0->TO0_LAUDO+oGet01:aCols[x][1])
					RecLock("TO2",.F.,.T.)
					dbDelete()
					MSUNLOCK("TO2")
				EndIf
				dbSelectArea("TO2")
				Loop
			Endif
			If !empty(oGet01:aCols[x][1])
				dbSelectArea("TO2")
				If !DbSeek(xFilial("TO2")+SA1->A1_COD+SA1->A1_LOJA+TO0->TO0_LAUDO+oGet01:aCols[x][1])
					RecLock("TO2",.T.)
					TO2->TO2_FILIAL := xFilial("TO2")
					TO2->TO2_LAUDO  := TO0->TO0_LAUDO
					TO2->TO2_CLIENT := SA1->A1_COD
					TO2->TO2_LOJA   := SA1->A1_LOJA
					TO2->TO2_EQPTO  := oGet01:aCols[x][1]
					MsUnlock("TO2")
				Endif
			Endif
		Next x
		//Tabela TOD
		For x := 1 To Len(oGet02:aCols)

			If oGet02:aCols[x][Len(oGet02:aCols[x])]
			dbSelectArea("TOD")
			If DbSeek(xFilial("TOD")+SA1->A1_COD+SA1->A1_LOJA+TO0->TO0_LAUDO+oGet02:aCols[x][1])
				RecLock("TOD",.F.,.T.)
				dbDelete()
				MSUNLOCK("TOD")
			EndIf
			dbSelectArea("TOD")
			Loop
			Endif
			If !empty(oGet02:aCols[x][1])
				dbSelectArea("TOD")
				If !DbSeek(xFilial("TOD")+SA1->A1_COD+SA1->A1_LOJA+TO0->TO0_LAUDO+oGet02:aCols[x][1])
					RecLock("TOD",.T.)
				TOD->TOD_FILIAL := xFilial("TOD")
					TOD->TOD_LAUDO  := TO0->TO0_LAUDO
					TOD->TOD_CLIENT := SA1->A1_COD
					TOD->TOD_LOJA   := SA1->A1_LOJA
					TOD->TOD_CODBEM  := oGet02:aCols[x][1]
					MsUnlock("TOD")
			Endif
			Endif
		Next x

		Dbselectarea("TO2")
		Dbsetorder(3)
		DbSeek(xFilial("TO2")+SA1->A1_COD+SA1->A1_LOJA+TO0->TO0_LAUDO)
		While !eof() .And. xFilial("TO2") == TO2->TO2_FILIAL  .And.;
							TO0->TO0_LAUDO == TO2->TO2_LAUDO  .And.;
							SA1->A1_COD    == TO2->TO2_CLIENT .And.;
							SA1->A1_LOJA   == TO2->TO2_LOJA

			lDelete := .T.
			For x := 1 To Len(oGet01:aCols)
				If trim(TO2->TO2_EQPTO) == trim(oGet01:aCols[x][1])
					lDelete := .F.
				Endif
			Next x

			If lDelete
				Reclock("TO2",.F.,.T.)
				Dbdelete()
				MsunLock("TO2")
			Endif

			Dbselectarea("TO2")
			Dbskip()
		End

	Else //Padrão
		DbSelectArea("TO2")
		DbSetOrder(1)
		//Tabela TO2
		For x := 1 To Len(oGet01:aCols)

			If oGet01:aCols[x][Len(oGet01:aCols[x])]
			dbSelectArea("TO2")
			If DbSeek(xFilial("TO2")+TO0->TO0_LAUDO+oGet01:aCols[x][1])
				RecLock("TO2",.F.,.T.)
				dbDelete()
				MSUNLOCK("TO2")
			EndIf
			dbSelectArea("TO2")
			Loop
			Endif
			If !empty(oGet01:aCols[x][1])
				dbSelectArea("TO2")
				If !DbSeek(xFilial("TO2")+TO0->TO0_LAUDO+oGet01:aCols[x][1])
					RecLock("TO2",.T.)
				TO2->TO2_FILIAL := xFilial("TO2")
					TO2->TO2_LAUDO  := TO0->TO0_LAUDO
					TO2->TO2_EQPTO  := oGet01:aCols[x][1]
					MsUnlock("TO2")
			Endif
			Endif
		Next x

		//Tabela TOD
		For x := 1 To Len(oGet02:aCols)
			If oGet02:aCols[x][Len(oGet02:aCols[x])]
			dbSelectArea("TOD")
			If DbSeek(xFilial("TOD")+TO0->TO0_LAUDO+oGet02:aCols[x][1])
				RecLock("TOD",.F.,.T.)
				dbDelete()
				MSUNLOCK("TOD")
			EndIf
			dbSelectArea("TOD")
			Loop
			Endif
			If !empty(oGet02:aCols[x][1])
				dbSelectArea("TOD")
				If !DbSeek(xFilial("TOD")+TO0->TO0_LAUDO+oGet02:aCols[x][1])
					RecLock("TOD",.T.)
				TOD->TOD_FILIAL := xFilial("TOD")
					TOD->TOD_LAUDO  := TO0->TO0_LAUDO
					TOD->TOD_CODBEM  := oGet02:aCols[x][1]
					MsUnlock("TOD")
			Endif
			Endif
		Next x

		Dbselectarea("TO2")
		Dbsetorder(1)
		DbSeek(xFilial("TO2")+TO0->TO0_LAUDO)
		While !eof() .And. xFilial("TO2") == TO2->TO2_FILIAL .And.;
							TO0->TO0_LAUDO == TO2->TO2_LAUDO

			lDelete := .T.
			For x := 1 To Len(oGet01:aCols)
				If trim(TO2->TO2_EQPTO) == trim(oGet01:aCols[x][1])
					lDelete := .F.
				Endif
			Next x

			If lDelete
				Reclock("TO2",.F.,.T.)
				Dbdelete()
				MsunLock("TO2")
			Endif

			Dbselectarea("TO2")
			Dbskip()
		End
	Endif

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA220IN
Cria aCols dos equipamentos

@author Thiago Olis Machado
@since 14/08/2001
@version MP12
@return nil
/*/
//---------------------------------------------------------------------
Function MDTA220IN(nOPCX)

	Local aNAO := {}, cKEY, cGETWHILE
	Local aNoFields := {}
	Local aYesFields := {}

	#IFDEF TOP
		aAdd(aNoFields, 'TO2_LAUDO')
		aAdd(aNoFields, 'TO2_NOMLAU')
		cQuery := "SELECT * FROM "+RetSqlName("TO2")+" TO2 "
		cQuery += "WHERE "
		If lMdtps
			aAdd(aNoFields, 'TO2_CLIENT')
			aAdd(aNoFields, 'TO2_LOJA')
			cQuery += "TO2.TO2_CLIENT = '"+SA1->A1_COD+"' AND TO2.TO2_LOJA = '"+SA1->A1_LOJA+"' AND "
		Endif
		cQuery += "TO2.TO2_FILIAL = '"+xFilial("TO2")+"' AND TO2.TO2_LAUDO = '"+M->TO2_LAUDO+"'"+" AND TO2.D_E_L_E_T_ = ' '"
		aAdd(aYesFields, 'TO2_EQPTO')
		aAdd(aYesFields, 'TO2_NOEQTO')
		If lMdtps
			FillGetDados( 4, "TO2", 3, xFilial("TO2")+SA1->A1_COD+SA1->A1_LOJA+M->TO2_LAUDO,;
						{|| "TO2->TO2_FILIAL + TO2->TO2_CLIENT + TO2->TO2_LOJA + TO2->TO2_LAUDO"},;
						{|| .T.},aNoFields,aYesFields,,cQuery)
		Else
			FillGetDados( 4, "TO2", 1, xFilial("TO2")+M->TO2_LAUDO, {|| "TO2->TO2_FILIAL + TO2->TO2_LAUDO"},;
						{|| .T.},aNoFields,aYesFields,,cQuery)
		Endif
	#ELSE
		aAdd(aNoFields, 'TO2_LAUDO')
		aAdd(aNoFields, 'TO2_NOMLAU')
		aAdd(aYesFields, 'TO2_EQPTO')
		aAdd(aYesFields, 'TO2_NOEQTO')

		If lMdtps
			aAdd(aNoFields, 'TO2_CLIENT')
			aAdd(aNoFields, 'TO2_LOJA')
			cKEY := 'SA1->A1_COD+SA1->A1_LOJA+M->TO2_LAUDO'
			cGET := "TO2->TO2_FILIAL == '"+xFilial("TO2")+"' .And. TO2->TO2_CLIENT+TO2->TO2_LOJA+TO2->TO2_LAUDO  == '" + SA1->A1_COD+SA1->A1_LOJA+M->TO2_LAUDO + "'"
			FillGetDados( 4, "TO2", 3, cKey, {|| }, {|| .T.},aNoFields,aYesFields,,,{|| NGMontaAcols("TO2",&cKEY,cGET)})
		Else
			cKEY := 'M->TO2_LAUDO'
			cGET := "TO2->TO2_FILIAL  == '"+xFilial("TO2")+"' .And. TO2->TO2_LAUDO == '" + M->TO2_LAUDO + "'"
			FillGetDados( 4, "TO2", 1, cKey, {|| }, {|| .T.},aNoFields,aYesFields,,,{|| NGMontaAcols("TO2",&cKEY,cGET)})
		Endif
	#ENDIF


	If Empty(aCols)
	aCols := BlankGetd(aHeader)
	Else
	M->TO2_EQPTO  := TO2->TO2_EQPTO
	EndIf

	/*
	cKEY      := "M->TO2_LAUDO"
	cGETWHILE := "TO2_LAUDO == TO0->TO0_LAUDO .And. TO2_FILIAL == xFilial('TO2')"
	AAdd(aNAO,"TO2_LAUDO")
	AAdd(aNAO,"TO2_NOMLAU")

	aHEAINS := CABECGETD("TO2", aNAO)
	aGETINS :=MAKEGETDA("TO2", cKEY,aHeaIns, cGETWHILE)
	If Empty(aGETINS)
	aGETINS :=BLANKGETD(aHeaIns)
	Else
	M->TO2_EQPTO  := TO2->TO2_EQPTO
	Endif
	*/

	DbSelectArea("TO2")
	If lMdtps
		DbSetOrder(3)
	Else
		DbSetOrder(1)
	Endif

Return NIL

//---------------------------------------------------------------------
/*/{Protheus.doc} MAKEGETDA
Monta aCols dos equipamentos para exclusao ou inclusao

@Param cAli
@Param cKey
@Param aVETOR
@Param cWhile

@author Thiago Olis Machado
@since 15/08/2001
@version MP12
@return aRET
/*/
//---------------------------------------------------------------------
Function MAKEGETDA(cAli,cKey,aVETOR,cWhile)

	Local i, aRET := {}, cOLD := Alias(), xx, nv:=1

	dbSelectArea(cALI)
	DbSeek(xFilial(cALI)+&cKEY)

	DO While !eof() .And. &cWhile.
	AADD(aRET, {})

	For i := 1 to Len(aVETOR)-2
		If aVETOR[i][10] == "V"
			AAdd(aRET[nv],  CriaVar(Alltrim(aVETOR[i][2])) )
		Else
			xx :=  aVETOR[i][2]
			AADD(aRET[nv], &xx.)
		Endif
	Next

		Aadd(aRET[nv],cAli)
		Aadd(aRET[nv],(cALI)->(Recno()))
	AADD(aRET[nv], .F.)

	DbSkip()
	nv++
	Enddo

	dbSelectArea(cOLD)

Return aRET

//---------------------------------------------------------------------
/*/{Protheus.doc} NG220VIS

@author
@since
@version MP12
@return .T.
/*/
//---------------------------------------------------------------------
Function NG220VIS()

	NGCAD02("TO0",RECNO(),2)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.

Parametros do array a Rotina:
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada
	3. Reservado
	4. Tipo de Transação a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
		2 - Simplesmente Mostra os Campos
		3 - Inclui registros no Bancos de Dados
		4 - Altera o registro corrente
		5 - Remove o registro corrente do Banco de Dados
	5. Nivel de acesso
	6. Habilita Menu Funcional

@author Rafael Diogo Richter
@since 29/11/2006
@version MP12
@return aRotina
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina
	Private lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .T. , .F. )

	If lSigaMdtPS
		aRotina := { 	{ STR0001,"AxPesqui"  , 0 , 1},;  //"Pesquisar"
						{ STR0002,"NGCAD01"   , 0 , 2},;  //"Visualizar"
						{ STR0021,"MDT220CAD" , 0 , 4} }  //"Laudos"
	Else
		aRotina :=	{ 	{STR0001 ,  "AxPesqui"  , 0 , 1},; //"Pesquisar"
						{STR0002 ,  "NGCAD01"   , 0 , 2},; //"Visualizar"
						{STR0007 ,  "NG220EQ"   , 0 , 4}}   //"Equipamentos"
	Endif

Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT220BU
Mostra um markbrowse com todos os Riscos para o usuario
poder seleciona-los de uma soh vez.

@author Andre Perez Alvarez
@since 04/08/07
@version MP12
@return lRet
/*/
//---------------------------------------------------------------------
Static Function MDT220BU()

	Local nCnt2 := 0, x, y, xx
	Local aArea := GetArea()
	Local aAreaTM7 := TM7->(GetArea())
	Local oDlgF,oFont
	Local oMARK1
	Local nSizeTM7 := If((TAMSX3("TM7_NOEQTO")[1]) < 1,20,(TAMSX3("TM7_NOEQTO")[1]))
	Local nOld
	Local nAltura := GetScreenRes()[2]
	Local nLargura := GetScreenRes()[1]
	Local cFilTM7 := xFilial("TM7")
	Local cPesquisar:=Space( 200 )

	//Variaveis para montagem da TRB
	Local aDBF, aTRB1
	Local aDescIdx:={}

	Private oTempTRB
	Private cAliasTRB1	:= GetNextAlias()
	Private cMarca := GetMark()
	Private OldCols
	Private aCbxPesq //ComboBox com indices de pesquisa
	Private cCbxPesq   := ""
	Private oCbxPesq //ComboBox de Pesquisa
	Private aSize := MsAdvSize(,.F.,430), aObjects := {}

	Aadd(aObjects,{050,050,.T.,.T.})
	Aadd(aObjects,{100,100,.T.,.T.})
	aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.T.)

	OldCols := aCLONE(oGet01:aCols)

	lInverte:= .F.

	lQuery := .T.

	dbSelectArea("TO2")

	aDBF := {}
	AADD(aDBF,{ "TM7_OK"    , "C" ,02      , 0 })
	AADD(aDBF,{ "TM7_EQPTO" , "C" ,06      , 0 })
	AADD(aDBF,{ "TM7_NOEQTO", "C" ,nSizeTM7, 0 })

	aTRB1 := {}
	AADD(aTRB1,{ "TM7_OK"    ,NIL," "    ,})
	AADD(aTRB1,{ "TM7_EQPTO" ,NIL,STR0012,})  //"Equipamento"
	AADD(aTRB1,{ "TM7_NOEQTO",NIL,STR0013,})  //"Nome Equipamento"

	//Cria TRB
	oTempTRB := FWTemporaryTable():New( cAliasTRB1, aDBF )
	oTempTRB:AddIndex( "1", {"TM7_EQPTO"} )
	oTempTRB:AddIndex( "2", {"TM7_NOEQTO"} )
	oTempTRB:AddIndex( "3", {"TM7_OK"} )
	oTempTRB:Create()

	dbSelectArea("TM7")

	dbSelectArea(cAliasTRB1)
	Processa({|lEnd| fBuscaTM7( cAliasTRB1 , cFilTM7 )},STR0030,STR0031)

	Dbselectarea(cAliasTRB1)
	Dbgotop()
	If (cAliasTRB1)->(Reccount()) <= 0
		oTempTRB:Delete()
		RestArea(aAreaTM7)
		RestArea(aArea)
		lRefresh := .T.
		Msgstop(STR0014,STR0015)  //"Não existem equipamentos cadastrados." //"ATENÇÃO"
		Return .T.
	Else
		While !eof()
			If aSCAN( OldCols , { | x | x [ 1 ] == ( cAliasTRB1 )->TM7_EQPTO } )  > 0
				RecLock(cAliasTRB1,.F.)
				(cAliasTRB1)->TM7_OK :=cMarca
				MSUNLOCK(cAliasTRB1)
			EndIf
			dbSelectArea(cAliasTRB1)
			dbSkip()
		End
		dbSelectArea(cAliasTRB1)
		dbGoTop()
	Endif

	nOpt := 2
	DEFINE FONT oFont NAME "Arial" SIZE 0,-12
	DEFINE MSDIALOG oDlgF TITLE OemToAnsi(STR0016)From 0,0 To aSize[6]/1.2,aSize[5]/2.2 OF oMainWnd Pixel//"Equipamentos"

		oPnlFnd 		:= TPanel():New( 01 , 01 , , oDlgF , , , , CLR_BLACK , CLR_WHITE , 0 , 55 , .T. , .F. )
		oPnlFnd:Align	:= CONTROL_ALIGN_ALLCLIENT

		oPnl 		:= TPanel():New( 01 , 01 , , oPnlFnd , , , , CLR_BLACK , CLR_WHITE , 0 , 55 , .T. , .F. )
		oPnl:Align	:= CONTROL_ALIGN_TOP

		@ 10,08 TO 45 , 265  OF oPnl PIXEL
		@ 19,15 SAY STR0017 SIZE 200,10 of oPnl PIXEL FONT oFont //"Estes são os equipamentos cadastrados no sistema."
		@ 29,15 SAY STR0018 SIZE 200,10 of oPnl PIXEL FONT oFont //"Selecione aqueles que foram utilizados no laudo."


		//--- PESQUISAR
		//Define as opcoes de Pesquisa
		aCbxPesq := aClone( aDescIdx )
		aAdd( aCbxPesq , STR0026 ) //"Código+Descrição"
		aAdd( aCbxPesq , STR0027 ) //"Descrição+Código"
		aAdd( aCbxPesq , STR0028 ) //"Marcados"

		oPnlPesq 		:= TPanel():New( 01 , 01 , , oPnlFnd , , , , CLR_BLACK , CLR_WHITE , 0 , 55 , .T. , .T. )
		oPnlPesq:Align	:= CONTROL_ALIGN_TOP

		oCbxPesq := TComboBox():New( 010 , 005 , { | u | If( PCount() > 0 , cCbxPesq := u , cCbxPesq ) } , ;
		aCbxPesq , 200 , 08 , oPnlPesq , , { | | } ;
				, , , , .T. , , , , , , , , , "cCbxPesq" )
		oCbxPesq:bChange := { | | fIndexSet(cAliasTRB1 , aCbxPesq , @cPesquisar , oMARK1 ) }

		oPesquisar := TGet():New( 025 , 005 , { | u | If( PCount() > 0 , cPesquisar := u , cPesquisar ) } , oPnlPesq , 200 , 008 , "" , { | | .T. } , CLR_BLACK , CLR_WHITE , ,;
									.F. , , .T. /*lPixel*/ , , .F. , { | | cCbxPesq <> aCbxPesq[ Len( aCbxPesq ) ] }/*bWhen*/ , .F. , .F. , , .F. /*lReadOnly*/ , .F. , "" , "cPesquisar" , , , , .F. /*lHasButton*/ )

		oBtnPesq := TButton():New( 010 , 220 , STR0001 , oPnlPesq , { | | fTRBPes(cAliasTRB1 , oMARK1 , cPesquisar) } , ;//"Pesquisar"
										60 , 10 , , , .F. , .T. , .F. , , .F. , , , .F. )

		oMARK1 := MsSelect():NEW(cAliasTRB1,"TM7_OK",,aTRB1,@lINVERTE,@cMARCA, , , , oPnlFnd )
		oMARK1:bMARK := {|| MDT220MK(cMarca,lInverte)}
		oMARK1:oBROWSE:Align := CONTROL_ALIGN_ALLCLIENT
		oMARK1:oBROWSE:lHASMARK := .T.
		oMARK1:oBROWSE:lCANALLMARK := .T.
		oMARK1:oBROWSE:bALLMARK := {|| MDTA220INV(cMarca,.T.) }
	ACTIVATE MSDIALOG oDlgF ON INIT EnchoiceBar(oDlgF,{|| nOpt := 1,oDlgf:End()},{|| nOpt := 2,oDlgf:End()})

	If nOpt == 2
		oTempTRB:Delete()
	Else
		Processa({|lEnd| MDT220CPY()})
	Endif

	RestArea(aAreaTM7)
	RestArea(aArea)
	lRefresh := .T.

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT220MK

@author Andre Perez Alvarez
@since 19/07/07
@version MP12
@return
/*/
//---------------------------------------------------------------------
Function MDT220MK(cMarca,lInverte)
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA220INV
Inverte a marcacao do browse

@author Andre Perez Alvarez
@since 19/07/07
@version MP12
@return .T.
/*/
//---------------------------------------------------------------------
Function MDTA220INV(cMarca,lInv)

	Local aArea := GetArea()

	Dbselectarea(cAliasTRB1)
	Dbgotop()
	If lInv
		While !eof()
			(cAliasTRB1)->TM7_OK := IF(TM7_OK == "  ",cMARCA,"  ")
			Dbskip()
		End
	Else
		While !eof()
			(cAliasTRB1)->T9_OK := IF(T9_OK == "  ",cMARCA,"  ")
			Dbskip()
		End
	EndIf

	RestArea(aArea)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT220CPY
Copia os EPI'selecionados no markbrowse para o a GetDados

@author Andre Perez Alvarez
@since 20/07/07
@version MP12
@return .T.
/*/
//---------------------------------------------------------------------
Static Function MDT220CPY()

	Local nPosic
	Local aColsVal	:= {}
	Local aHeadVal 	:= aHead01
	Local aColsAux  := BlankGetd(aHeadVal)[ 1 ]
	Local cCampo    := ''
	Local cNivCpo   := ''
	Local nCps      := 0
	Local cTipo	    := ''
	Local cRelac    := ''

	Dbselectarea(cAliasTRB1)

	ProcRegua(reccount())
	Set Filter To !Empty((cAliasTRB1)->TM7_OK)
	(cAliasTRB1)->(Dbgotop())
	While (cAliasTRB1)->(!EoF())

		IncProc()

		If !( Len( aColsVal ) == 1 .And. Empty( aColsVal[ 1 , 1 ] ) )
			aTmpCols := Array( Len( aHeadVal ) + 1 )

			aAdd( aColsVal , aTmpCols )
		EndIf

		//Se não houver, adiciona uma linha vazia no acols
		If Len( aCols ) <> 1 .Or. !Empty(aCols[ Len( aCols ), 1 ])
			aAdd( aCols , aClone( aColsAux ) )
		EndIf

		For nCps := 1 To Len(aHeadVal)

			nLen     := Len( aColsVal )
			cCampo   := AllTrim(aHeadVal[ nCps, 2 ])
			cTipo    := GetSx3Cache( cCampo, 'X3_TIPO'    )
			cRelac   := GetSx3Cache( cCampo, 'X3_RELACAO' )

			If cCampo == "TO2_EQPTO"
				aColsVal[nLen, nCps ] := (cAliasTRB1)->TM7_EQPTO
			ElseIf cCampo == "TO2_NOEQTO"
				aColsVal[nLen, nCps ] := (cAliasTRB1)->TM7_NOEQTO
			ElseIf ExistIni(cCampo)
				aColsVal[nLen, nCps ] := InitPad(cRelac)
			Endif

		Next nCps

		Dbselectarea(cAliasTRB1)
		Dbskip()
	End
	If Len(aColsVal) <= 0 //Verificar se o acols esta sem registros
		aColsVal := BLANKGETD(aHeadVal)//Adiciona o aHeader
	EndIf

	oGet01:aCols := aCLONE(aColsVal)
	oGet01:oBrowse:Refresh()

	oTempTRB:Delete()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT220CAD
Visualiza os laudos do cliente e permite relacionar equipamentos
a cada laudo.

@author Thiago Machado
@since 27/07/00
@version MP12
@return uRet
/*/
//---------------------------------------------------------------------
Function MDT220CAD()

	Local aArea	:= GetArea()
	Local oldROTINA := aCLONE(aROTINA)
	LOCAL cFiltraSRJ			//Variavel para filtro
	LOCAL aIndexSRJ	:= {}		//Variavel Para Filtro
	Local uRet
	Local oldCad := cCadastro
	cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA

	PRIVATE aRotina := { {STR0001 , "AxPesqui"  , 0 , 1},;  //"Pesquisar"
						{STR0002,  "NGCAD01"   , 0 , 2},; //"Visualizar"
						{STR0007 , "NG220EQ"   , 0 , 4}}   //"Equipamentos"

	PRIVATE cCadastro := OemtoAnsi(STR0006) //"Equipamentos Utilizados no Laudo"
	PRIVATE aCHKDEL := {}, bNGGRAVA

	DbSelectArea("TO0")
	Set Filter To TO0->TO0_CLIENT+TO0->TO0_LOJA == SA1->A1_COD+SA1->A1_LOJA
	DbSetOrder(1)
	mBrowse( 6, 1,22,75,"TO0")

	aROTINA := aCLONE(oldROTINA)
	RestArea(aArea)
	cCadastro := oldCad

Return uRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT220BENS
Mostra um markbrowse com todos os Riscos para o usuario
poder seleciona-los de uma so vez.

@author Andre Perez Alvarez
@since 25/05/13
@version MP12
@return
/*/
//---------------------------------------------------------------------
Static Function MDT220BENS()

	Local nCnt2 := 0, x, y, xx
	Local aArea := GetArea()
	Local aAreaST9 := ST9->(GetArea())
	Local oDlgF,oFont
	Local oMARK1
	Local oPnlAll
	//Local nSizeST9 := If((TAMSX3("ST9_NOME")[1]) < 1,20,(TAMSX3("ST9_NOME")[1]))
	Local nOld
	Local cFilST9 := xFilial("ST9")
	Local aDescIdx	:= {}
	Local cPesquisar:=Space( 200 )

	Private cAliasTRB1	:= GetNextAlias()
	Private cMarca := GetMark()
	Private OldCols := aCLONE(oGet02:aCols)
	Private aCbxPesq //ComboBox com indices de pesquisa
	Private cCbxPesq   := ""
	Private oCbxPesq //ComboBox de Pesquisa
	Private aSize := MsAdvSize(,.F.,430), aObjects := {}

	Aadd(aObjects,{050,050,.T.,.T.})
	Aadd(aObjects,{100,100,.T.,.T.})
	aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.T.)

	lInverte:= .F.

	lQuery := .T.

	dbSelectArea("TO2")

	aDBF := {}
	AADD(aDBF,{ "T9_OK"    ,"C",02 ,0 })
	AADD(aDBF,{ "T9_CODBEM","C",16 ,0 })
	AADD(aDBF,{ "T9_NOME"	,"C",40 ,0 })

	aTRB1 := {}
	AADD(aTRB1,{ "T9_OK"    	,NIL," "    ,})
	AADD(aTRB1,{ "T9_CODBEM"	,NIL,STR0029,})  //"Bem"
	AADD(aTRB1,{ "T9_NOME"	,NIL,STR0009,})  //"Nome"

	//Cria TRB
	oTempTRB := FWTemporaryTable():New( cAliasTRB1, aDBF )
	oTempTRB:AddIndex( "1", {"T9_CODBEM"} )
	oTempTRB:AddIndex( "2", {"T9_NOME"} )
	oTempTRB:AddIndex( "3", {"T9_OK"} )
	oTempTRB:Create()

	dbSelectArea("ST9")

	dbSelectArea(cAliasTRB1)
	Processa({|lEnd| fBuscaT9( cAliasTRB1 , oGet02 , cFilST9 )},STR0030,STR0031)

	Dbselectarea(cAliasTRB1)
	Dbgotop()
	If (cAliasTRB1)->(Reccount()) <= 0
		oTempTRB:Delete()
		RestArea(aAreaST9)
		RestArea(aArea)
		lRefresh := .T.
		Msgstop(STR0014,STR0015)  //"Não existem equipamentos cadastrados." //"ATENÇÃO"
		Return .T.
	Else
		While !eof()
			If aSCAN(OldCols,{|x| x[1] == (cAliasTRB1)->T9_CODBEM } )  > 0
				RecLock(cAliasTRB1,.F.)
				(cAliasTRB1)->T9_OK :=cMarca
				MSUNLOCK(cAliasTRB1)
			EndIf
			dbSelectArea(cAliasTRB1)
			dbSkip()
		End
		dbSelectArea(cAliasTRB1)
		dbGoTop()
	Endif

	nOpt := 2
	DEFINE FONT oFont NAME "Arial" SIZE 0,-12
	DEFINE MSDIALOG oDlgF TITLE OemToAnsi(STR0022) From 0,0 To aSize[6]/1.2,aSize[5]/2.2 OF oMainWnd Pixel//"Bens"

	oPnlAll := TPanel():New(00,00,,oDlgF,,,,,,,,.F.,.F.)
	oPnlAll:Align := CONTROL_ALIGN_ALLCLIENT

	oPnlTop := TPanel():New( 0 , 0 , , oPnlAll , , .T. , .F. , , , 0 , 55 , .T. , .F. )
	oPnlTop:Align := CONTROL_ALIGN_TOP

	@ 10,08 TO 45 , 265 OF oPnlTop PIXEL
	@ 19,15 SAY STR0017 SIZE 200,10 of oPnlTop PIXEL FONT oFont //"Estes são os equipamentos cadastrados no sistema."
	@ 29,15 SAY STR0018 SIZE 200,10 of oPnlTop PIXEL FONT oFont //"Selecione aqueles que foram utilizados no laudo."

	//--- PESQUISAR
	//Define as opcoes de Pesquisa
	aCbxPesq := aClone( aDescIdx )
	aAdd( aCbxPesq , STR0026 ) //"Código+Descrição"
	aAdd( aCbxPesq , STR0027 ) //"Descrição+Código"
	aAdd( aCbxPesq , STR0028 ) //"Marcados"
	cCbxPesq := aCbxPesq[ 1 ]

	oPnl 		:= TPanel():New( 0 , 0 , , oPnlAll , , , , CLR_BLACK , CLR_WHITE , 0 , 55 , .T. , .F. )
	oPnl:Align	:= CONTROL_ALIGN_TOP

	oCbxPesq := TComboBox():New( 010 , 005 , { | u | If( PCount() > 0 , cCbxPesq := u , cCbxPesq ) } , ;
	aCbxPesq , 200 , 08 , oPnl , , { | | } ;
	, , , , .T. , , , , , , , , , "cCbxPesq" )
	oCbxPesq:bChange := { | | fIndexSet( cAliasTRB1 , aCbxPesq , @cPesquisar , oMARK1 ) }

	oPesquisar := TGet():New( 025 , 005 , { | u | If( PCount() > 0 , cPesquisar := u , cPesquisar ) } , oPnl , 200 , 008 , "" , { | | .T. } , CLR_BLACK , CLR_WHITE , ,;
	.F. , , .T. /*lPixel*/ , , .F. , { | | cCbxPesq <> aCbxPesq[ Len( aCbxPesq ) ] }/*bWhen*/ , .F. , .F. , , .F. /*lReadOnly*/ , .F. , "" , "cPesquisar" , , , , .F. /*lHasButton*/ )

	oBtnPesq := TButton():New( 010 , 210 , STR0001 , oPnl , { | | fTRBPes( cAliasTRB1 , oMARK1 , cPesquisar) } , ;//"Pesquisar" //"Pesquisar"
	60 , 10 , , , .F. , .T. , .F. , , .F. , , , .F. )

	oMARK1 := MsSelect():NEW(cAliasTRB1,"T9_OK",,aTRB1,@lINVERTE,@cMARCA, , , , oPnlAll)
	oMARK1:bMARK := {|| MDT220MK(cMarca,lInverte)}
	oMARK1:oBROWSE:Align := CONTROL_ALIGN_ALLCLIENT
	oMARK1:oBROWSE:lHASMARK := .T.
	oMARK1:oBROWSE:lCANALLMARK := .T.
	oMARK1:oBROWSE:bALLMARK := {|| MDTA220INV(cMarca,.F.) }
	ACTIVATE MSDIALOG oDlgF ON INIT EnchoiceBar(oDlgF,{|| nOpt := 1,oDlgf:End()},{|| nOpt := 2,oDlgf:End()})

	If nOpt == 2
		oTempTRB:Delete()
	Else
		Processa({|lEnd| MDT220CBen()})
	Endif

	RestArea(aAreaST9)
	RestArea(aArea)
	lRefresh := .T.

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT220CBen
Copia os Bens selecionados do markbrowse para a GetDados.

@author Rodrigo Soledade
@since 28/05/13
@version MP12
@return
/*/
//---------------------------------------------------------------------
Static Function MDT220CBen()

	Local nPosic
	Local nCols:=0

	aColsOk := oGet02:aCols
	aHeadOk := aClone(aHeader)
	aColsTp := BLANKGETD(aHeadOk)

	nPosCod := aScan( aHeadOk,{|x| Trim(Upper(x[2])) == "TOD_CODBEM"})
	nPosDes := aScan( aHeadOk,{|x| Trim(Upper(x[2])) == "TOD_NOME"})

	For nCols := Len(aColsOk) To 1 Step -1 //Deleta do aColsOk os registros - não marcados; não estiver encontrado
		dbSelectArea(cAliasTRB1)
		dbSetOrder(1)
		If !dbSeek(aColsOK[nCols,nPosCod]) .Or. Empty((cAliasTRB1)->T9_OK)
			aDel(aColsOk,nCols)
			aSize(aColsOk,Len(aColsOk)-1)
		EndIf
	Next nCols

	dbSelectArea(cAliasTRB1)
	dbGoTop()
	While (cAliasTRB1)->(!Eof())
		If !Empty((cAliasTRB1)->T9_OK) .And. aScan( aColsOk , {|x| x[nPosCod] == (cAliasTRB1)->T9_CODBEM } ) == 0
			aAdd(aColsOk,aClone(aColsTp[1]))
			aColsOk[Len(aColsOk),nPosCod] := (cAliasTRB1)->T9_CODBEM
			aColsOk[Len(aColsOk),nPosDes] := (cAliasTRB1)->T9_NOME
		EndIf
		(cAliasTRB1)->(dbSkip())
	End

	If Len(aColsOK) <= 0
		aColsOK := aClone(aColsTp)
	EndIf

	aSort(aColsOk,,,{ |x, y| x[1] < y[1] }) //Ordena por plano
	oGet02:aCols := aClone( aColsOk )

	oGet02:oBrowse:Refresh()

	oTempTRB:Delete()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} COMBLinOk2
Critica se a linha digitada esta' Ok

@Param o - Objeto a ser verificado.

@author Rodrigo Soledade
@since 03/06/2013
@version MP12
@return
/*/
//---------------------------------------------------------------------
Function COMBLinOk2(o)

	Local xx := 0, npos, lRET := .T.
	Local nX

	nPOS := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOD_CODBEM"})

	If n > 1
	For nX := 1 to Len(oGet02:aCols)
			If oGet02:aCols[nX][1] == oGet02:aCols[n][1] .And. (!oGet02:aCols[n][Len(oGet02:aCols[n])] .And. !oGet02:aCols[nX][Len(oGet02:aCols[nX])])
				xx := xx + 1
		EndIf
	Next
	Endif

	If xx > 1
	Help(" ",1,"JAEXISTINF")
	lRet := .F.
	Endif

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} fTRBPes
Funcao de Pesquisar no Browse.

@samples fTRBPes()

@return Sempre verdadeiro

@param cAliasTRB1	- Alias do MarkBrowse ( Obrigatório )
@param oMark 		- Objeto do MarkBrowse ( Obrigatório )

@author Guilherme Freudenburg
@since 05/03/2014
/*/
//---------------------------------------------------------------------
Static Function fTRBPes(cAliasTRB , oMark , cPesquisar )

	Local nRecNoAtu := 1//Variavel para salvar o recno
	Local lRet		:= .T.

	//Posiciona no TRB e salva o recno
	dbSelectArea( cAliasTRB )
	nRecNoAtu := RecNo()

	dbSelectArea( cAliasTRB )
	If dbSeek( AllTrim( cPesquisar ) )
		//Caso exista a pesquisa, posiciona
		oMark:oBrowse:SetFocus()
	Else
		//Caso nao exista, retorna ao primeiro recno e exibe mensagem
		dbGoTo( nRecNoAtu )
		ApMsgInfo( STR0023 , STR0015 ) //"Valor não encontrado."###"Atenção"
		oPesquisar:SetFocus()
		lRet := .F.
	EndIf

	// Atualiza markbrowse
	oMark:oBrowse:Refresh(.T.)

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} fIndexSet
Seta o indice para pesquisa.

@return

@param cAliasTRB	- Alias do TRB ( Obrigatório )
@param aCbxPesq	- Indices de pesquisa do markbrowse. ( Obrigatório )
@param cPesquisar	- Valor da Pesquisa ( Obrigatório )
@param oMark		- Objeto do MarkBrowse ( Obrigatório )

@author Guilherme Freudenburg
@since 05/03/2014
/*/
//---------------------------------------------------------------------
Static Function fIndexSet( cAliasTRB , aCbxPesq , cPesquisar , oMark )

	Local nIndice := fIndComb( aCbxPesq ) // Retorna numero do indice selecionado

	// Efetua ordenacao do alias do markbrowse, conforme indice selecionado
	dbSelectArea( cAliasTRB )
	dbSetOrder( nIndice )
	dbGoTop()

	// Se o indice selecionado for o ultimo [Marcados]
	If nIndice == Len( aCbxPesq )
		cPesquisar := Space( Len( cPesquisar ) ) // Limpa campo de pesquisa
		oPesquisar:Disable()              // Desabilita campo de pesquisa
		oBtnPesq:Disable()              // Desabilita botao de pesquisa
		oMark:oBrowse:SetFocus()     // Define foco no markbrowse
	Else
		oPesquisar:Enable()               // Habilita campo de pesquisa
		oBtnPesq:Enable()               // Habilita botao de pesquisa
		oBtnPesq:SetFocus()             // Define foco no campo de pesquisa
	Endif

	oMark:oBrowse:Refresh()

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} fIndComb
Retorna o indice, em numero, do item selecionado no combobox

@return nIndice - Retorna o valor do Indice

@param aIndMrk - Indices de pesquisa do markbrowse. ( Obrigatório )

@author Guilherme Freudenburg
@since 05/03/2014
/*/
//---------------------------------------------------------------------
Static Function fIndComb( aIndMrk )

	Local nIndice := aScan( aIndMrk , { | x | AllTrim( x ) == AllTrim( cCbxPesq ) } )

	// Se o indice nao foi encontrado nos indices pre-definidos, apresenta mensagem
	If nIndice == 0
		ShowHelpDlg( STR0015 ,	{ STR0024 } , 1 , ; //"Atenção"###"Índice não encontrado."
									{ STR0025 } , 1 ) //"Contate o administrador do sistema."
		nIndice := 1
	Endif

Return nIndice

//---------------------------------------------------------------------
/*/{Protheus.doc} fBuscaTM7
Funcao para retornar todos os Ambientes

@author Guilherme Freudenburg
@since 13/03/2014
@return
/*/
//---------------------------------------------------------------------
Static Function fBuscaTM7( cAliasTRB , cFilTM7 )

	Local nPosCod := 1
	Local nIndex  := 1
	Local cSeek   := cFilTM7
	Local cWhile  := " TM7->TM7_FILIAL == '" + cFilTM7 + "'"
	Local aArea   := GetArea()
	Local aColsOK := aClone(oGet01:aCols)
	Local aHeadOk := aClone(oGet01:aHeader)

	nPosCod	:= aSCAN( aHeadOk, { |x| Trim( Upper(x[2]) ) == "TO2_EQPTO"})

	dbSelectArea( "TM7" )
	dbSetOrder( nIndex )
	If dbSeek( cSeek )
		While TM7->(!Eof()) .And. &( cWhile )
			RecLock( cAliasTRB , .T. )
			(cAliasTRB)->TM7_OK     		 := If( aScan( aColsOk , {|x| x[nPosCod] == TM7->TM7_EQPTO } ) > 0, cMarca , " " )
			(cAliasTRB)->TM7_EQPTO 		 := TM7->TM7_EQPTO
			(cAliasTRB)->TM7_NOEQTO  	 := TM7->TM7_NOEQTO
			(cAliasTRB)->(MsUnLock())
			TM7->(dbSkip())
		End
	EndIf

	RestArea(aArea)

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fBuscaT9
Funcao para retornar todos os Ambientes

@author Guilherme Freudenburg
@since 13/03/2014
@return
/*/
//---------------------------------------------------------------------
Static Function fBuscaT9( cAliasTRB , oGet , cFilT9 )

	Local nPosCod := 1
	Local nIndex  := 1
	Local cSeek   := cFilT9
	Local cWhile  := " ST9->T9_FILIAL == '" + cFilT9 + "'"
	Local aArea   := GetArea()
	Local aColsOK := aClone(oGet:aCols)
	Local aHeadOk := aClone(oGet:aHeader)

	If lSigaMdtPs
		nIndex := 3
		cSeek  += cCliMdtPs
		cWhile += " ST9->T9_CODBEM == SA1->A1_COD .And. ST9->T9_LOJACL == SA1->A1_LOJA"
	EndIf
	nPosCod	:= aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOD_CODBEM"})

	dbSelectArea( "ST9" )
	dbSetOrder( nIndex )
	If dbSeek( cSeek )
		While ST9->(!Eof()) .And. &( cWhile )
			RecLock( cAliasTRB , .T. )
			(cAliasTRB)->T9_OK     := If( aScan( aColsOk , {|x| x[nPosCod] == ST9->T9_CODBEM } ) > 0, cMarca , " " )
			(cAliasTRB)->T9_CODBEM:= ST9->T9_CODBEM
			(cAliasTRB)->T9_NOME   := ST9->T9_NOME
			(cAliasTRB)->(MsUnLock())
			ST9->(dbSkip())
		End
	EndIf

	RestArea(aArea)

Return