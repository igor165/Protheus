#INCLUDE "PROTHEUS.CH"

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTV002
Quntidade de O.S. Corretivas terminadas (Número total de corretivas).

@param De_Data, Data, Data início
@param Ate_Data, Data, Data fim
@param De_Bem, Caractere, Bem início
@param [Ate_Bem], Caractere, Bem fim
@param De_Ccusto, Caractere, Centro de custo início
@param [Ate_Ccusto], Caractere, Centro de custo fim
@param De_CenTra, Caractere, Centro de trabalho início
@param [Ate_CenTra], Caractere, Centro de trabalho fim
@param Con_SobOS, Caracter, Determina se aglutinas as O.S.
@param Con_MinOS, Caracter, Considera número minimo de duas O.S.?
@param Con_Parada, Caracter, Considera apenas OS que tiveram parada.

@author Wexlei Silveira
@since 31/07/2018
@version P12
@return nResult, Numérico, Quantidade de O.S.
/*/
//------------------------------------------------------------------------------
Function MNTV002(De_Data,Ate_Data,De_Bem,Ate_Bem,De_Ccusto,Ate_Ccusto,;
                 De_CenTra,Ate_CenTra,Con_SobOS,Con_MinOS,Con_Parada)

	Local aArea     := GetArea()
	Local aParams   := {}
	Local aContOs   := {}
	Local aWhere    := { '%%', '%%' }
	Local aFields   := { '%%', '%%' }
	Local cCodIndic := "MNTV002"
	Local cAliasOS  := GetNextAlias()
	Local cHora     := ""
	Local cQueryTJ  := ''
	Local cQueryTS  := ''
	Local cFieldTJ  := ''
	Local cFieldTS  := ''
	Local dData     := cToD("")
	Local nResult   := 0
	Local nContOS   := 0
	Local nX        := 0

	Default De_Bem    := ""
	Default De_Ccusto := ""
	Default De_CenTra := ""
	Default Con_SobOS := "2"
	Default Con_MinOS := "2"
	Default Con_Parada:= "2"

	// Armazena os Parâmetros
	If NGI6MVHIST()

		aParams := {}
		aAdd(aParams, {"DE_DATA"   , De_Data})
		aAdd(aParams, {"ATE_DATA"  , Ate_Data})
		aAdd(aParams, {"DE_BEM"    , De_Bem})
		aAdd(aParams, {"ATE_BEM"   , Ate_Bem})
		aAdd(aParams, {"DE_CCUSTO" , De_Ccusto})
		aAdd(aParams, {"ATE_CCUSTO", Ate_Ccusto})
		aAdd(aParams, {"DE_CENTRA" , De_CenTra})
		aAdd(aParams, {"ATE_CENTRA", Ate_CenTra})
		NGI6PREPPA(aParams, cCodIndic)

	EndIf

	If FindFunction( 'KPIDateOS' )

		// Define condição de data para consulta
		aWhere  := KPIDateOS( { De_Data, Ate_Data }, Con_Parada )

		// Define campos de data para consulta
		aFields := KPIDtOSFld( { De_Data, Ate_Data }, Con_Parada )

	Else

		cFieldTJ += '%'
		cFieldTJ += ' CASE '
		cFieldTJ += 	" WHEN STJ.TJ_DTPRINI <> ' ' THEN STJ.TJ_DTPRINI "
		cFieldTJ += 	' ELSE STJ.TJ_DTMRINI '
    	cFieldTJ += ' END AS IS_DATAINI, '
		cFieldTJ += ' CASE '
		cFieldTJ += 	" WHEN ( STJ.TJ_HOPRINI <> ' ' AND LTRIM( RTRIM( STJ.TJ_HOPRINI ) ) <> ':' ) THEN STJ.TJ_HOPRINI "
    	cFieldTJ += 	' ELSE STJ.TJ_HOMRINI '
		cFieldTJ += ' END AS IS_HORAINI, '
		cFieldTJ += ' CASE '
		cFieldTJ += 	" WHEN STJ.TJ_DTPRFIM <> ' ' THEN STJ.TJ_DTPRFIM "
		cFieldTJ += 	' ELSE STJ.TJ_DTMRFIM '
		cFieldTJ += ' END AS IS_DATAFIM, '
    	cFieldTJ += ' CASE '
		cFieldTJ += 	" WHEN ( STJ.TJ_HOPRFIM <> ' ' AND LTRIM( RTRIM( STJ.TJ_HOPRFIM ) ) <> ':' ) THEN STJ.TJ_HOPRFIM "
    	cFieldTJ += 	' ELSE STJ.TJ_HOMRFIM
    	cFieldTJ += ' END AS IS_HORAFIM '
		cFieldTJ += '%'

		cFieldTS += '%'
		cFieldTS += ' CASE '
		cFieldTS += 	" WHEN STS.TS_DTPRINI <> ' ' THEN STS.TS_DTPRINI "
		cFieldTS += 	' ELSE STS.TS_DTMRINI '
    	cFieldTS += ' END AS IS_DATAINI, '
		cFieldTS += ' CASE '
		cFieldTS += 	" WHEN ( STS.TS_HOPRINI <> ' ' AND LTRIM( RTRIM( STS.TS_HOPRINI ) ) <> ':' ) THEN STS.TS_HOPRINI "
    	cFieldTS += 	' ELSE STS.TS_HOMRINI '
		cFieldTS += ' END AS IS_HORAINI, '
		cFieldTS += ' CASE '
		cFieldTS += 	" WHEN STS.TS_DTPRFIM <> ' ' THEN STS.TS_DTPRFIM "
		cFieldTS += 	' ELSE STS.TS_DTMRFIM '
		cFieldTS += ' END AS IS_DATAFIM, '
    	cFieldTS += ' CASE '
		cFieldTS += 	" WHEN ( STS.TS_HOPRFIM <> ' ' AND LTRIM( RTRIM( STS.TS_HOPRFIM ) ) <> ':' ) THEN STS.TS_HOPRFIM "
    	cFieldTS += 	' ELSE STS.TS_HOMRFIM
    	cFieldTS += ' END AS IS_HORAFIM '
		cFieldTS += '%'

		aFields := { cFieldTJ, cFieldTS }

		cQueryTJ += '%'
		cQueryTS += '%'

		If Con_Parada == '1' // Considera somente com Parada de OS.

			cQueryTJ += " AND STJ.TJ_DTPRINI <> ' ' AND STJ.TJ_HOPRINI <> ' ' "
			cQueryTJ += " AND STJ.TJ_DTPRFIM <> ' ' AND STJ.TJ_HOPRFIM <> ' ' "

			cQueryTS += " AND STS.TS_DTPRINI <> ' ' AND STS.TS_HOPRINI <> ' ' "
			cQueryTS += " AND STS.TS_DTPRFIM <> ' ' AND STS.TS_HOPRFIM <> ' ' "

		EndIf

		cQueryTJ += ' AND ( STJ.TJ_DTPRINI >= ' + ValToSQL( De_Data )  + ' OR '
		cQueryTJ +=	      ' STJ.TJ_DTMRINI >= ' + ValToSQL( De_Data )  + ' ) AND '
		cQueryTJ +=	     '( STJ.TJ_DTPRFIM <= ' + ValToSQL( Ate_Data ) + ' OR '
		cQueryTJ +=	      ' STJ.TJ_DTMRFIM <= ' + ValToSQL( Ate_Data ) + ' ) AND '

		cQueryTS += ' AND ( STS.TS_DTPRINI >= ' + ValToSQL( De_Data )  + ' OR '
		cQueryTS +=	      ' STS.TS_DTMRINI >= ' + ValToSQL( De_Data )  + ' ) AND '
		cQueryTS +=	     '( STS.TS_DTPRFIM <= ' + ValToSQL( Ate_Data ) + ' OR '
		cQueryTS +=	      ' STS.TS_DTMRFIM <= ' + ValToSQL( Ate_Data ) + ' ) AND '

		cQueryTJ += '%'
		cQueryTS += '%'

		aWhere := { cQueryTJ, cQueryTS }

	EndIf

	BeginSQL Alias cAliasOS

		SELECT
			TJ_CODBEM ,
			%exp:aFields[1]%
		FROM
			%table:STJ% STJ
		WHERE
			STJ.TJ_FILIAL  = %xFilial:STJ% AND
			STJ.TJ_PLANO   = '000000'      AND
			STJ.TJ_TIPOOS  = 'B'         AND
			STJ.TJ_TERMINO = 'S'         AND
			STJ.TJ_SITUACA = 'L'         AND
			( STJ.TJ_CODBEM  BETWEEN %exp:De_Bem%     AND %exp:Ate_Bem%    ) AND
			( STJ.TJ_CCUSTO  BETWEEN %exp:De_Ccusto%  AND %exp:Ate_Ccusto% ) AND
			( STJ.TJ_CENTRAB BETWEEN %exp:De_CenTra%  AND %exp:Ate_CenTra% ) AND
			STJ.%NotDel%
			%exp:aWhere[1]%

		UNION

			SELECT
				TS_CODBEM ,
				%exp:aFields[2]%
			FROM
				%table:STS% STS
			WHERE
				STS.TS_FILIAL= %xFilial:STS% AND
				STS.TS_PLANO = '000000'      AND
				STS.TS_TIPOOS  = 'B'         AND
				STS.TS_TERMINO = 'S'         AND
				STS.TS_SITUACA = 'L'         AND
				( STS.TS_CODBEM  BETWEEN %exp:De_Bem%     AND %exp:Ate_Bem%    ) AND
				( STS.TS_CCUSTO  BETWEEN %exp:De_Ccusto%  AND %exp:Ate_Ccusto% ) AND
				( STS.TS_CENTRAB BETWEEN %exp:De_CenTra%  AND %exp:Ate_CenTra% ) AND
				STS.%NotDel%
				%exp:aWhere[2]%

		ORDER BY
			TJ_CODBEM ,
			IS_DATAINI,
			IS_DATAFIM,
			IS_HORAINI,
			IS_HORAFIM

	EndSQL

	NGI6PREPDA(cAliasOS, cCodIndic)

	dbSelectArea(cAliasOS)
	While (cAliasOS)->(!Eof())
		If Con_SobOS == "1" // Caso filtre sobreposição de OS.

			nContOS := aScan(aContOs, {|x| Alltrim(x[1]) == Alltrim((cAliasOS)->TJ_CODBEM) } ) // Verifica se o bem já foi adicionado no array.
			If nContOS == 0 // Caso seja um bem diferente.
				aAdd(aContOs, {(cAliasOS)->TJ_CODBEM, 1}) // Adiciona o bem no array.
			Else // Caso seja o mesmo bem.
				If !( (cAliasOS)->IS_DATAINI + (cAliasOS)->IS_HORAINI <= DToS(dData) + cHora .And.;
					(cAliasOS)->IS_DATAFIM + (cAliasOS)->IS_HORAFIM >= DToS(dData) + cHora )
					aContOs[nContOS,2] += 1 // Soma o registro.
				EndIf
			EndIf
			cHora   := (cAliasOS)->IS_HORAFIM
			dData   := SToD((cAliasOS)->IS_DATAFIM)

		Else

			nContOS := aScan(aContOs, {|x| Alltrim(x[1]) == Alltrim((cAliasOS)->TJ_CODBEM) } ) // Verifica se o bem já foi adicionado no array.
			If nContOS > 0 // Caso registro já exista no array.
				aContOs[nContOS,2] += 1 // Soma o registro.
			Else
				aAdd(aContOs, {(cAliasOS)->TJ_CODBEM, 1}) // Adiciona o bem no array.
			EndIf

		EndIf

		(cAliasOS)->(dbSkip())

	End

	dbSelectArea(cAliasOS)
	dbCloseArea()

	For nX := 1 To Len(aContOs)

		If Con_MinOS == "1"
			If aContOs[nX,2] > 1
				nResult += aContOs[nX,2]
			EndIf
		Else
			nResult += aContOs[nX,2]
		EndIf

	Next nX

	// RESULTADO
	NGI6PREPVA(cCodIndic, nResult)

	RestArea(aArea)

Return nResult
