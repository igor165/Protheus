#include "Mdta900.ch"
#include "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA900
Programa Cadastro do Historico de Alteracao do GFIP

@type    function
@author  Denis Hyroshi de Souza
@since   18/01/2004
@sample  MDTA900()

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDTA900

	// Guarda conteudo e declara variaveis padroes

	Local aNGBEGINPRM := NGBEGINPRM()

	Private lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .T. , .F. )
	Private aRotina := MenuDef()
	Private cCliMdtPs := Space(Len(SA1->A1_COD+SA1->A1_LOJA))
	Private cCadastro := OemtoAnsi(STR0004) //"Alteracoes do GFIP"
	Private aCHKDEL := {}, bNGGRAVA

	If lSigaMdtps
		dbSelectArea("SA1")
		dbSetOrder(1)
		mBrowse( 6, 1,22,75,"SA1")
	Else
		dbSelectArea("SRA")
		dbSetOrder(1)
		mBrowse( 006 , 001 , 022 , 075 , "SRA" , NIL , NIL , NIL , NIL , NIL , fCriaCor() )
	EndIf

	// Retorna conteudo de variaveis padroes
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT900SRA
Filtra os funcionarios do cliente

@type    function
@author  Denis Hyroshi de Souza
@since   29/06/2010
@sample  MDT900SRA()

@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function MDT900SRA()

	Local aArea	:= GetArea()
	Local oldROTINA := aCLONE(aROTINA)
	Local oldCad := cCadastro

	cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA

	nSizeSA1 := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
	nSizeLo1 := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))

	aRotina :=	{ { STR0001 ,"AxPesqui"  , 0 , 1},; //"Pesquisar"
	{ STR0002 ,"NGCAD01"  , 0 , 2},; //"Visualizar"
	{ STR0003 ,"NGFUN900"  , 0 , 4},; //"Historico"
	{ STR0010 , "GpLegend" , 0 , 6,,.F. }} //"Legenda"

	dbSelectArea("SRA")
	Set Filter To SubStr(SRA->RA_CC,1,nSizeSA1+nSizeLo1) == cCliMdtps
	dbSetOrder(1)
	mBrowse( 006 , 001 , 022 , 075 , "SRA" , NIL , NIL , NIL , NIL , NIL , fCriaCor() )

	dbSelectArea("SRA")
	Set Filter To

	aROTINA := aCLONE(oldROTINA)
	RestArea(aArea)
	cCadastro := oldCad

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} NGFUN900
Programa de Inclusão,alteração,exclusão

@type    function
@author  Denis Hyroshi de Souza
@since   18/01/2004
@sample  NGFUN900( 'SR9', 1, 1 )
@param   cAlias, Caractere, Alias da tabela utilizada
@param   nReg, Numérico, Número do registro posicionado
@param   nOpcx, Numérico, Opção delecionada do menu

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function NGFUN900( cAlias, nReg, nOpcx )

	Local LVar01    :=1
	Local nLinhas    :=0
	Local bCampo
	Local nCnt
	Local GetList    :={}
	Local nSavRec
	Local oDlg
	Local oPnlTop
	Local oGet
	Local i
	Local oMenu
	Local OEnchoise
	Local aButtons   := {}
	Local aNoFields  := {}
	Local aExc       := {}

	Private aHeader  := {}
	Private aCols    := {}

	nSavRec := RecNo()
	nOpcao:=nOpcx
	dbSelectArea( cAlias )
	dbSetOrder(1)

	FOR i := 1 TO FCount()
		x   := "m->" + FieldName(i)
		&x. := FieldGet(i)
	Next i

	Private aTELA[0][0],aGETS[0],nUsado:=0

	bCampo := {|nCPO| Field(nCPO) }

	dbSelectArea("SX2")
	dbSeek("SR9")

	dbSelectArea("SX3")
	Dbsetorder(1)
	dbgotop()
	dbSeek("SR9")

	aAdd(aNoFields, 'R9_MAT')
	aAdd(aNoFields, 'R9_CAMPO')

	aCampos := { 'R9_DATA', 'R9_DESC' }
	aExc    := { { 'R9_DESC', 'X3_TITULO' , STR0005 }, ; //"Codigo GFIP"
				 { 'R9_DESC', 'X3_PICTURE', "99"    }, ;
				 { 'R9_DESC', 'X3_TAMANHO', 2       }  }

	aHeader := NGHeadExc( aCampos, .F., .F.,, aExc)

	#IFDEF TOP
		cQuery := "SELECT * FROM "+RetSqlName("SR9")+" SR9 WHERE SR9.R9_FILIAL = '"+SRA->RA_FILIAL+"' AND SR9.R9_MAT = '"+;
		SRA->RA_MAT+"' AND SR9.R9_CAMPO = '"+"RA_OCORREN"+"' AND SR9.D_E_L_E_T_ = ' '"
		FillGetDados( 4, "SR9", 1, SRA->RA_FILIAL+SRA->RA_MAT+"RA_OCORREN", {|| "SR9->R9_FILIAL + SR9->R9_MAT + SR9->R9_CAMPO"}, {|| .T.} ,;
						aNoFields,,,cQuery)
	#ELSE
		cKEY := "SRA->RA_MAT+'RA_OCORREN'"
		cGET := "SR9->R9_FILIAL == '"+xFilial("SR9")+"' .And. SR9->R9_MAT == '"+ SRA->RA_MAT +"' .And. SR9->R9_CAMPO == 'RA_OCORREN'"
		FillGetDados( 4, "SR9", 1, cKey, {|| }, {|| .T.},aNoFields,,,,{|| NGMontaAcols("SR9",&cKEY,cGET)})
	#ENDIF

	If Empty(aCols)
		aCols := BlankGetd(aHeader)
	EndIf

	aSort(aCols,,,{|x,y| x[1] < y[1] })

	nOpca := 0
	DEFINE MSDIALOG oDlg TITLE cCadastro From 9,0 To 28,60 OF oMainWnd
		oPnlTop := TPanel():New( , , , oDlg , , , , , , , 25 , .F. , .F. )
			oPnlTop:Align := CONTROL_ALIGN_TOP
			@ 0.5 ,.8 Say OemToAnsi( STR0006 ) Of oPnlTop //"Matricula"
			@ 0.5 ,04 MsGet MDTHideCpo( SRA->RA_MAT, "RA_MAT" ) Size 30 , 10 When .F. Of oPnlTop
			@ 0.5 ,10 Say OemToAnsi( STR0007 ) Of oPnlTop//"Nome"
			@ 0.5 ,13 MsGet MDTHideCpo( SRA->RA_NOME, "RA_NOME" ) Size 120 , 10 When .F. Of oPnlTop

		dbSelectArea("SR9")
		NgPopUp(AsMenu,@oMenu)
		oDlg:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}
		oGet := MSGetDados():New(25,5,125,228,nOpcx,"NG900LinOk","NG900TudOk","",.T.,,,,3000)
			oGet:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpca:=1,if(oGet:TudoOk(),oDlg:End(),nOpca := 0)},{||oDlg:End()},,aButtons) centered

	If nOpca == 1
		Begin Transaction
			lGravaOk := NG900GRAV("SR9",nOpca)
			EvalTrigger()
		End Transaction
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NG900GRAV
Grava os dados no SR9

@type    function
@author  Denis Hyroshi de Souza
@since   18/01/2004
@sample  NG900GRAV( 'SR9', 1 )
@param   cAlias, Caractere, Alias da tabela utilizada
@param   nOpcao, Numérico, Opção delecionada do menu

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function NG900GRAV( cAlias, nOpcao )

	Local nx ,ny ,nMaxArray , aBACK := aCLONE(aCOLS), i, nInd

	dbSelectArea("SR9")

	aCOLS := {}
	aEVAL(aBACK, {|x| If( !Empty(x[1]),  AAdd(aCOLS,x), NIL) })
	nMaxArray := Len(aCols)

	If nMaxArray <= 0
		Return .F.
	EndIf

	nCampo1 := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "R9_DATA" })
	nDesc1  := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "R9_DESC" })

	For nx = 1 to nMaxArray
		If aCols[nx][Len(aCols[nx])]
			dbSelectArea("SR9")
			Dbsetorder(1)
			If dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+"RA_OCORREN"+DTOS(aCols[nx][nCampo1]))
				RecLock("SR9",.F.,.T.)
				dbDelete()
				MSUNLOCK("SR9")
			EndIf
			dbSelectArea("SR9")
			Loop
		EndIf

		If nCampo1 > 0 .And. !Empty(aCols[nx][nCampo1])
			dbSelectArea("SR9")
			Dbsetorder(1)
			If dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+"RA_OCORREN"+DTOS(aCols[nx][nCampo1]))
				RecLock("SR9",.F.)
			Else
				RecLock("SR9",.T.)
			EndIf

			SR9->R9_FILIAL := SRA->RA_FILIAL
			SR9->R9_MAT    := SRA->RA_MAT
			SR9->R9_CAMPO  := "RA_OCORREN"

			dbSelectArea("SR9")
			dbSetOrder(1)
			FOR i := 1 TO FCount()
				If FieldName(i) == "R9_FILIAL" .Or. FieldName(i) == "R9_MAT" .Or. FieldName(i) == "R9_CAMPO" .Or.;
					aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == FieldName(i) }) < 1
					Loop
				EndIf

				If FieldName(i) == "R9_DESC"
					SR9->R9_DESC := SubStr(aCols[nx,nDesc1],1,2)
				Else
					x   := "m->" + FieldName(i)
					&x. := aCols[nx][aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == FieldName(i) })]
					y   := "SR9->" + FieldName(i)
					&y := &x
				EndIf
			Next i
			MSUNLOCK("SR9")
		EndIf
	Next nx

	//Deleta registros que foram alterados
	dbSelectArea("SR9")
	Dbsetorder(1)
	dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+"RA_OCORREN")
	While !eof() .And. SRA->RA_FILIAL == SR9->R9_FILIAL .And. SRA->RA_MAT == SR9->R9_MAT .And. ;
		"RA_OCORREN" == SR9->R9_CAMPO

		xx := 0
		cCondTNF := Dtos(SR9->R9_DATA)+Substr(SR9->R9_DESC,1,2)

		For nInd := 1 to Len(aCols)
			If DTOS(aCols[nInd,nCampo1])+Substr(aCols[nInd,nDesc1],1,2) == cCondTNF
				xx++
			EndIf
		Next nInd

		If xx == 0
			RecLock("SR9",.F.,.T.)
			dbDelete()
			MsunLock("SR9")
		EndIf
		Dbskip()
	End

	DbSelectArea("SRA")

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NG900LinOk
Critica se a linha digitada está Ok

@type    function
@author  Denis Hyroshi de Souza
@since   18/01/2004
@sample  NG900LinOk()
@param   o, Obejto, Browse a ser verificado

@return  lRET, Lógico, Verdadeiro se a linha estiver ok
/*/
//-------------------------------------------------------------------
Function NG900LinOk(o)

	Local xx := 0, npos:= 0,npos1:= 0,npos2:= 0, lRET := .T.
	Local nX
	Local aArea := GetArea()

	nCampo1 := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "R9_DATA" })
	nDesc1  := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "R9_DESC" })

	If !acols[n][len(Acols[n])]
		If Empty(aCOLS[n][nCampo1])
			//"ATENÇÃO" # "Data em branco." # "Informar a data."
			ShowHelpDlg( STR0012, { STR0013 },1,{ STR0014 },1)
			Return .F.
		ElseIf aCOLS[n][nCampo1] > dDataBase
			//"ATENÇÃO" # "Data inválida." # "A data informada nao pode ser maior que a data atual."
			ShowHelpDlg( STR0012, { STR0015 },1,{ STR0016 },1)
			Return .F.
		EndIf
		If aCOLS[n][nCampo1] < SRA->RA_ADMISSA
			Msginfo( STR0008 + Chr(13) + ; //"A data de alteracao nao pode ser anterior a data de admissao do funcionario."
						STR0009 + dToc( SRA->RA_ADMISSA ) ) //"Data de Admissao: "
			Return .F.
		EndIf
	EndIf

	If nCampo1 > 0 .And. nDesc1 > 0
		For nX := 1 to Len(aCOLS)
			If nx <> n
				If aCOLS[nX][nCampo1] == aCOLS[n][nCampo1]
					xx++
				EndIf
			EndIf
		Next
	EndIf

	If xx > 0
		Help(" ",1,"JAEXISTINF")
		Return .F.
	EndIf

	RestArea(aArea)

Return lRET

//-------------------------------------------------------------------
/*/{Protheus.doc} NG900TudOk
Critica se a nota toda está Ok

@type    function
@author  Denis Hyroshi de Souza
@since   18/01/2004
@sample  NG900TudOk()
@param   o, Obejto, Browse a ser verificado

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function NG900TudOk(o)
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
description
@type    function
@author  Rafael Diogo Richter
@since   29/11/2006
@sample  MenuDef()

@return  Nil, Sempre nulo

@Obs     Parametros do array a Rotina:
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada
	3. Reservado
	4. Tipo de Transação a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
		2 - Simplesmente Mostra os Campos
		3 - Inclui registros no Bancos de Dados
		4 - Altera o registro corrente
		5 - Remove o registro corrente do Banco de Dados
	5. Nivel de acesso
	6. Habilita Menu Funcional

@return  aRotina, Array, Opções da rotina
/*/
//-------------------------------------------------------------------
Static Function MenuDef()

	Local lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .T. , .F. )
	Local aRotina

	If lSigaMdtps
		aRotina := { 	{ STR0001,   "AxPesqui"  , 0 , 1},; //"Pesquisar"
						{ STR0002,   "NGCAD01"   , 0 , 2},; //"Visualizar"
						{ STR0011,   "MDT900SRA" , 0 , 4} } //"Funcionários"
	Else
		aRotina :=	{ 	{ STR0001 ,"AxPesqui"  , 0 , 1 },; //"Pesquisar"
						{ STR0002 ,"NGCAD01"   , 0 , 2 },; //"Visualizar"
						{ STR0003 ,"NGFUN900"  , 0 , 4 },; //"Historico"
						{ STR0010 ,"GpLegend"  , 0 , 6,,.F. }} //"Legenda"
	EndIf

Return aRotina
