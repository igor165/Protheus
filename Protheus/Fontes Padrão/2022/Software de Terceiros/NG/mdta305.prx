#INCLUDE "Mdta305.ch"
#INCLUDE "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA305

Programa de Cadastro das Ordens de Servico dos Funcionarios

@author  Denis Hyroshi de Souza
@since   18/08/03
/*/
//-------------------------------------------------------------------
Function MDTA305
	// Armazena variaveis p/ devolucao (NGRIGHTCLICK)
	Local aNGBEGINPRM := NGBEGINPRM()
	Local aNao:={}

	Private asMenu
	Private lSigaMdtPS := SuperGetMv("MV_MDTPS",.F.,"N") == "S"
	Private cCadastro
	Private aRotina := MenuDef()

	If lSigaMdtps
		cCadastro := OemtoAnsi(STR0020)  // "Clientes"
		DbSelectArea("SA1")
		DbSetOrder(1)
		mBrowse( 6, 1,22,75,"SA1")
	Else
		Private cPrograma := "MDTA305"
		Private aChkDel := {}, bNgGrava
		Private lPostoSer := .F., nIndFun := 1, nIndFun2 := 1, cCpoCodF := "M->TOB_CODFUN"
		cCadastro := OemtoAnsi(STR0006) // "Funcionários x Ordem de Serviço"

		If TOB->(FieldPos("TOB_CODPOS")) > 0 .And. TOC->(FieldPos("TOC_CODPOS")) > 0 .And. SRA->(FieldPos("RA_POSTO")) > 0
			nIndFun   := 4
			nIndFun2  := 3
			lPostoSer := .T.
			cCpoCodF  := "M->TOB_CODPOS"
		EndIf

		If !SuperGetMV("MV_NG2QDO",.F.,"2") == "1" // Verifica se tem integração com o modulo de QDO
			aNao := {"TOB_DTELAB", "TOB_DTREVI", "TOB_DOCFIL", "TOB_DOCTO"} // Adiciona os campos que não irão aparecer na tela
		EndIf

		aVARNAO := {}
		aCHOICE := NGCAMPNSX3( "TOB", aNao )

		aGETNAO :=	{ {"TOC_CODFUN", "M->TOB_CODFUN"},;
					  {"TOC_CC"    , "M->TOB_CC"    } }
		aAdd( aGETNAO , {"TOC_DEPTO" ,"M->TOB_DEPTO" } )

		If lPostoSer
			aGETNAO := { {"TOC_CODFUN","M->TOB_CODFUN"}, {"TOC_CODPOS","M->TOB_CODPOS"},;
						 {"TOC_CC"    ,"M->TOB_CC"    } }
		Endif

		cGETWHILE := "TOC_FILIAL == xFilial('TOC') .and. TOC_CODFUN == M->TOB_CODFUN .and. TOC_CC == M->TOB_CC"
		cGETWHILE += " .And. TOC_DEPTO == M->TOB_DEPTO"

		If lPostoSer
			cGETWHILE := "TOC_FILIAL == xFilial('TOC') .and. TOC_CODPOS == M->TOB_CODPOS .and. TOC_CC == M->TOB_CC"
		Endif

		cGETMAKE  := "TOB->TOB_CODFUN + TOB->TOB_CC"
		cGETMAKE += " + TOB->TOB_DEPTO"

		If lPostoSer
			cGETMAKE  := "TOB->TOB_CODPOS + TOB->TOB_CC"
		Endif

		cGETKEY   := "M->TOB_CODFUN + M->TOB_CC + M->TOC_MAT"
		cGETKEY   := "M->TOB_CODFUN + M->TOB_CC + M->TOB_DEPTO + M->TOC_MAT"

		If lPostoSer
			cGETKEY   := "M->TOB_CODPOS + M->TOB_CC + M->TOC_MAT"
		Endif

		cGETALIAS := "TOC"
		cTUDOOK   := "AllwaysTrue()"
		cLINOK    := "A305LINOK()"

		dbSelectArea("TOC")
		dbSetOrder(nIndFun2)

		dbSelectArea("TOB")
		dbSetOrder(nIndFun)
		mBrowse(6,1,22,75,"TOB")

		dbSelectArea("TOB")
		dbSetOrder(1)
		dbSelectArea("TOC")
		dbSetOrder(1)

	EndIf

	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	NGRETURNPRM(aNGBEGINPRM)

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA305INC

Inclui, altera e exclui Ordens de Servico

@author  Denis Hyroshi de Souza
@since   18/08/03

@sample  MDTA305INC(""TOB"", 1, 1)

@param   cAlias, Caracter, Tabela a ser manipulada
@param   nRecno, Numerico, Registro que está posicionado
@param   nOpcX, Numerico, Operação sendo executada
/*/
//-------------------------------------------------------------------
Function MDTA305INC(cAlias, nRecno, nOpcx)

	Local aArea := GetArea()
	Local aNao:={}

	Private aNgButton := {}
	Aadd(aNgButton,{"PARAMETROS" ,{||MDT305QDO()},STR0011,STR0012}) //"Relacionar documento" #  "Rel.Doc."

	If nOpcx == 3
		bNGGRAVA := {|| MDT305VLD() }
	Endif
	If !SuperGetMV("MV_NG2QDO",.F.,"2") == "1" //Verifica se tem integração com o modulo de QDO
		aNao := {"TOB_DTELAB", "TOB_DTREVI", "TOB_DOCFIL", "TOB_DOCTO"}//Adiciona os campos que não irão aparecer na tela
	Endif
	aCHOICE := NGCAMPNSX3("TOB",aNao)
	NGCAD02(cAlias,nRecno,nOpcx)

	bNGGRAVA := {}

	DbSelectArea("TOC")
	Dbsetorder(nIndFun2)
	Dbselectarea("TOB")
	Dbsetorder(nIndFun)

	RestArea(aArea)
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} A305CHKMAT

Consiste a existencia de outro codigo na GetDados

@author  Denis Hyroshi de Souza
@since   18/08/03

@return  Logico, Sempre .T.
/*/
//-------------------------------------------------------------------
Function A305LINOK()
	Local nPOS   := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOC_MAT"  })
	Local nDtEnt := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOC_DTENT"})
	Local nDtFim := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOC_DTFIM"})
	If nPOS > 0
		If !aCols[n][len(aCols[n])]
			If n # 1
				If Empty(aCols[n][nPOS])
					HELP(" ",1,"OBRIGAT",,NGRETTITULO(aHeader[nPOS][2])+Space(35),3)
					Return .F.
				Endif
			Endif
		EndIf
	Endif
	If !aTail(aCols[n])
		If nDtFim > 0 .and. nDtEnt > 0
			If aCols[n][nDtFim] < aCols[n][nDtEnt] .and. !Empty(aCols[n][nDtFim])
				MsgInfo(STR0043,STR0009) //"A Data de Devolução não pode ser menor que a Data de Entrega"##"ATENÇÃO"
				Return .F.
			EndIf
		EndIf
	EndIf

	PutFileInEof( "TOC" )
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} A305CHKMAT

Consiste a existencia de outro codigo na GetDados

@author  Denis Hyroshi de Souza
@since   18/08/03

@return  Logico, Determina se o codigo ja existe na GetDados
/*/
//-------------------------------------------------------------------
Function A305CHKMAT()
	Local xx := 0, npos, lRET := .T.
	Local nX
	nPOS := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOC_MAT"})

	If nPOS > 0
		For nX := 1 to Len(aCOLS)
			If aCOLS[nX][nPOS] == M->TOC_MAT .and. !aCOLS[nX][Len(aCOLS[nX])]
				xx := xx + 1
			Endif
		Next nX
	Endif

	If xx > 0
		Help(" ",1,"JAEXISTINF")
		lRet := .f.
	Endif

Return lRET

//-------------------------------------------------------------------
/*/{Protheus.doc} A305DTVLD

Verifica se a data de entrada e superior a admissao do funcionario

@author  Denis Hyroshi de Souza
@since   18/08/03

@return  Logico, Determina se a data de entrada e valida
                 em relacao a data de admissao do funcionario
/*/
//-------------------------------------------------------------------
Function A305DTVLD()
	Local lRet   := .t.
	Local nPOS   := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOC_MAT"  })
	Local nDtEnt := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOC_DTENT"})
	Local nDtFim := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TOC_DTFIM"})

	If nPOS <= 0
		Return .f.
	Endif

	Dbselectarea("SRA")
	DbsetOrder(1)
	If Dbseek(xFilial("SRA")+aCols[n][nPOS])
		If SRA->RA_ADMISSA > M->TOC_DTENT
			Msginfo(STR0007+chr(13)+STR0008,STR0009) //"A data de entrada não pode ser inferior à"###"data de admissão do funcionário."###"ATENCAO"
			lRet := .f.
		Endif
	Endif

	If !aTail(aCols[n])
		If nDtFim > 0
			If !Empty(aCols[n][nDtEnt]) .and. !Empty(aCols[n][nDtFim])
				If M->TOC_DTENT > aCols[n][nDtFim]
					Msginfo(STR0044,STR0009) //"A Data de Entrada não pode ser maior que a Data de Devolução"##"ATENCAO"
					lRet := .F.
				EndIf
			EndIf
		EndIf
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT305VLD

Verifica se existe registro com a mesma chave

@author  Denis Hyroshi de Souza
@since   18/08/03

@return  Logico, Determina se a chave verificada e repetida
/*/
//-------------------------------------------------------------------
Function MDT305VLD()

	Local lRetRet := .t.
	Local lTOBDepto:= NGCADICBASE( "TOB_DEPTO" , "A" , "TOB" , .F. )

	Local aArea := GetArea()
	Local aAreaTOB := TOB->(GetArea())

	Dbselectarea("TOB")
	Dbsetorder(nIndFun)
	If Dbseek(xFilial("TOB")+&(cCpoCodF)+M->TOB_CC+If(lTOBDepto , M->TOB_DEPTO, ""))
		Help(" ",1,"JAEXISTINF")
		lRetRet := .f.
	Endif

	// Se chamada a partir da do campo TOB_DTREVI (Revisao)
	If !Empty(M->TOB_DTREVI) .And. Empty(M->TOB_DTELAB)
		ShowHelpDlg( STR0013,	{	STR0051 }, 2, ; // "Não é permitido informar uma data de revisão sem uma data de elaboração já definida."
								{	STR0052 }, 2 )  // "Defina uma data de elaboração."

		lRetRet := .f.
	Endif

	RestArea(aAreaTOB)
	RestArea(aArea)

Return lRetRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT305QDO

Monta a tela de visualizacao ou relacionamento do documento

@author  Andre E. Perez Alvarez
@since   20/08/06

@return Logico, Sempre .F. quando e tela de relacionamento
/*/
//-------------------------------------------------------------------
Function MDT305QDO()

	Local oDlgQdo,oRadio, oMenuQdo
	Local nRadio := 1,nOpc := 1
	Local lRet := .T.,lGrava

	Define MsDialog oDlgQdo From 03.5,6 To 150,320 Title STR0013 Pixel  //"Atencao"
	Define FONT oBold NAME "Courier New" SIZE 0, -13 BOLD
	@ 0, 0 BITMAP oBmp RESNAME "PROJETOAP" oF oDlgQdo SIZE 35,250 NOBORDER WHEN .F. PIXEL

	@ 05,040 Say OemToAnsi(STR0014) Size 117,7 Of oDlgQdo Pixel Font oBold  //"O que deseja fazer ?"

	@ 20,048 Radio oRadio Var nRadio Items STR0015,STR0016,STR0017 3d Size 105,10 Of oDlgQdo Pixel //"Relacionar um documento"#"Visualizar documento relacionado"#"Apagar documento relacionado"

	Define sButton From 055,090 Type 1 Enable Of oDlgQdo Action (lGrava := .T.,oDlgQdo:End())
	Define sButton From 055,120 Type 2 Enable Of oDlgQdo Action (lGrava := .F.,oDlgQdo:End())

	NgPopUp(asMenu,@oMenuQdo)
	oDlgQdo:bRClicked:= { |o,x,y| oMenuQdo:Activate(x,y,oDlgQdo)}
	Activate MsDialog oDlgQdo Centered

	If !lGrava
		lRet := .F.
	Else
		If nRadio == 1
			If !MDT305RQDO()
				lRet := .F.
			EndIf
		ElseIf nRadio == 2
			If !MDT305VQDO()
				lRet := .F.
			EndIf
		Else
			M->TOB_DOCTO  := " "
			M->TOB_DOCFIL := " "
		EndIf
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT305RQDO

Relaciona uma ocorrencia a um documento QDO

@author  Perez Alvarez
@since   20/08/06

@return  Logico, Sempre .F.
/*/
//-------------------------------------------------------------------
Function MDT305RQDO()

	Local lRet := .F.

	lRet := ConPad1( , , , "QDH",,,.f.)

	If lRet
		M->TOB_DOCTO  := QDH->QDH_DOCTO
		M->TOB_DOCFIL := QDH->QDH_FILIAL
	EndIf

Return .F.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT305VQDO

Visualiza um documento QDO

@author  Andre E. Perez Alvarez
@since   20/08/06

@return  Logico, Retorna .T. quando o documento foi visualizado
/*/
//-------------------------------------------------------------------
Function MDT305VQDO()

	Local _lRet := .F.

	If !Empty(M->TOB_DOCTO)
		If QDOVIEW( , M->TOB_DOCTO ) //Visualiza documento Word...
			_lRet := .T.
		Endif
	Else
		MsgInfo(STR0018,STR0019)//"Nao existe documento associado a esta ordem de serviço."#"NÃO CONFORMIDADE"
	Endif

Return _lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef

Utilizacao de Menu Funcional

@author  Rafael Diogo Richter
@since   29/11/2006

@return  Array, Array com opcoes da rotina
/*/
//-------------------------------------------------------------------
Static Function MenuDef()

	Local lPyme := Iif(Type("__lPyme") <> "U",__lPyme,.F.)
	Local lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .t. , .f. )
	Local aRotina

	If lSigaMdtps
		aRotina := { { STR0001,   "AxPesqui"  , 0 , 1},; //"Pesquisar"
					{ STR0002,   "NGCAD01"   , 0 , 2},; //"Visualizar"
					{ STR0021,   "MDT305ORD" , 0 , 4} } //"Ord. Serviço"
	Else
		aRotina :=	{ {STR0001,"AxPesqui"  ,0,1},; //"Pesquisar"
					{STR0002,"MDTA305INC",0,2},; //"Visualizar"
					{STR0003,"MDTA305INC",0,3},; //"Incluir"
					{STR0004,"MDTA305INC",0,4},; //"Alterar"
					{STR0005,"MDTA305INC",0,5} } //"Excluir"

		AAdd( aRotina, { STR0022, "MDTA305LOT", 0, 3 } ) //"Incluir Lote"
		If !lPyme
		AAdd( aRotina, { STR0010, "MsDocument", 0, 4 } )  //"Conhecimento"
		EndIf
	Endif

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT305ORD

Monta um browse com as ordens de serviço do cliente.

@author  Andre Perez Alvarez
@since   20/09/07
/*/
//-------------------------------------------------------------------
Function MDT305ORD()

	Local aArea	    := GetArea()
	Local oldROTINA := aCLONE(aROTINA)
	Local oldCad    := cCadastro
	Local lPyme     := Iif(Type("__lPyme") <> "U",__lPyme,.F.)
	Local aNao      := { "TOB_CLIENT", "TOB_LOJA", "TOB_FILIAL" }
	cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA

	aRotina :=	{ {STR0001,"AxPesqui"  ,0,1},; //"Pesquisar"
				{STR0002,"MDTA305INC",0,2},; //"Visualizar"
				{STR0003,"MDTA305INC",0,3},; //"Incluir"
				{STR0004,"MDTA305INC",0,4},; //"Alterar"
				{STR0005,"MDTA305INC",0,5} } //"Excluir"

	AAdd( aRotina, { STR0022, "MDTA305LOT", 0, 3 } ) //"Incluir Lote"
	If !lPyme
	AAdd( aRotina, { STR0010, "MsDocument", 0, 4 } )  //"Conhecimento"
	EndIf

	Private cPrograma := "MDTA305"
	Private cCadastro := OemtoAnsi(STR0006) //"Funcionários x Ordem de Serviço"
	Private aChkDel := {}, bNgGrava
	Private lPostoSer := .f.

	Private nIndFun  := NGRETORDEM("TOB","TOB_FILIAL+TOB_CLIENT+TOB_LOJA+TOB_CODFUN+TOB_CC",.F.)
	Private nIndFun2 := NGRETORDEM("TOC","TOC_FILIAL+TOC_CLIENT+TOC_LOJA+TOC_CODFUN+TOC_CC+TOC_MAT",.F.)
	Private cCpoCodF := "cCliMdtPs + M->TOB_CODFUN"

	If nIndFun == 0
		nIndFun := 5
	Endif

	If nIndFun2 == 0
		nIndFun2 := 4
	Endif

	If TOB->(FieldPos("TOB_CODPOS")) > 0 .and. TOC->(FieldPos("TOC_CODPOS")) > 0 .and. SRA->(FieldPos("RA_POSTO")) > 0
		nIndFun   := 4
		nIndFun2  := 3
		lPostoSer := .t.
		cCpoCodF  := "cCliMdtPs + M->TOB_CODPOS"
	Endif

	aCHOICE := {}

	aCHOICE := NGCAMPNSX3( 'TOB' , aNao )

	aVARNAO := {}
	aGETNAO :=	{ {"TOC_CODFUN","M->TOB_CODFUN"},;
				{"TOC_CC"    ,"M->TOB_CC"    },;
				{"TOC_CLIENT","M->TOB_CLIENT"},;
				{"TOC_LOJA"  ,"M->TOB_LOJA"  } }
	If lPostoSer
		aGETNAO :=	{ {"TOC_CODFUN","M->TOB_CODFUN"},{"TOC_CODPOS","M->TOB_CODPOS"},;
					{"TOC_CC"    ,"M->TOB_CC"    } }
	Endif

	If lPostoSer
		cGETWHILE := "TOC_FILIAL == xFilial('TOC') .and. TOC_CODPOS == M->TOB_CODPOS .and. TOC_CC == M->TOB_CC .AND. "
	Else
		cGETWHILE := "TOC_FILIAL == xFilial('TOC') .and. TOC_CODFUN == M->TOB_CODFUN .and. TOC_CC == M->TOB_CC .AND. "
	Endif
	cGETWHILE += "TOC_CLIENT+TOC_LOJA == cCliMdtps"

	cGETMAKE  := "TOB->TOB_CLIENT + TOB->TOB_LOJA + TOB->TOB_CODFUN + TOB->TOB_CC"
	If lPostoSer
		cGETMAKE  := "TOB->TOB_CLIENT + TOB->TOB_LOJA + TOB->TOB_CODPOS + TOB->TOB_CC"
	Endif

	cGETKEY   := "M->TOB_CLIENT + M->TOB_LOJA + M->TOB_CODFUN + M->TOB_CC + M->TOC_MAT"
	If lPostoSer
		cGETKEY   := "M->TOB_CLIENT + M->TOB_LOJA + M->TOB_CODPOS + M->TOB_CC + M->TOC_MAT"
	Endif

	cGETALIAS := "TOC"
	cTUDOOK   := "AllwaysTrue()"
	cLINOK    := "A305LINOK()"

	aCHKDEL := { {"TOB->TOB_CLIENT + TOB->TOB_LOJA + TOB->TOB_CODFUN+TOB->TOB_CC","TOC", 1}}
	If lPostoSer
		aCHKDEL := {{"TOB->TOB_CLIENT + TOB->TOB_LOJA + TOB->TOB_CODPOS+TOB->TOB_CC","TOC", 3}}
	Endif

	DbSelectArea("TOC")
	Dbsetorder(nIndFun2)

	Dbselectarea("TOB")
	Set Filter To TOB->TOB_CLIENT+TOB->TOB_LOJA == cCliMdtps
	Dbsetorder(nIndFun)
	mBrowse(6,1,22,75,"TOB")

	Dbselectarea("TOB")
	Set Filter To
	Dbsetorder(1)

	Dbselectarea("TOC")
	Dbsetorder(1)

	aROTINA := aCLONE(oldROTINA)
	RestArea(aArea)
	cCadastro := oldCad

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA305LOT

Inclusao em Lote

@author  Denis Hyroshi de Souza
@since   17/03/10

@sample  MDTA305LOT("TOB", 1, 1)

@param   cAlias, Caracter, Tabela a ser manipulada
@param   nRecno, Numerico, Registro que está posicionado
@param   nOpcX, Numerico, Operação sendo executada
/*/
//-------------------------------------------------------------------
Function MDTA305LOT( cAlias, nRecno, nOpcx )

	Local lFlatMode := If(FindFunction("FLATMODE"),FlatMode(),SetMDIChild())
	Local lTOBDepto:= NGCADICBASE( "TOB_DEPTO" , "A" , "TOB" , .F. )
	Local Sv_aNao := If( Type("aNao")=="A" , aClone(aNao) , {} )
	Local Sv_aCho := If( Type("aCHOICE")=="A" , aClone(aCHOICE) , {} )

	Local cAliasFun := If(lSigaMdtps,"TOS","SRJ")

	// Carregando variaveis de controle da tela
	Private aAC := {STR0023,STR0024},aCRA:= {STR0024,STR0025,STR0023} // "Abandona"###"Confirma"###"Confirma"###"Redigita"###"Abandona"
	Private aTELA[0][0],aGETS[0],Continua,nUsado:=0
	Private aSize := MsAdvSize(,.F.,430), aObjects := {}
	Private aButtons := {{"LEGENDA",{||Mdta305Leg()}, STR0057, STR0057}} // "Legenda"

	aAdd(aObjects, { 050, 050, .T., .T. } )
	aInfo := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.t.)

	// Carregando variaveis dos objetos da tela
	Private oFont12  := TFont():New("Arial",,-12,.F.,.F.)
	Private cAliasCTT := "SI3"
	Private nSizeSI3 := If((TAMSX3("I3_CUSTO")[1]) < 1,9,(TAMSX3("I3_CUSTO")[1]))
	Private nSizeSRJ := If((TAMSX3("RJ_FUNCAO")[1]) < 1,5,(TAMSX3("RJ_FUNCAO")[1]))
	Private nSizeSQB := If((TAMSX3("QB_DEPTO")[1]) < 1 ,9, (TAMSX3("QB_DEPTO")[1]))
	Private oCheckOK := LoadBitmap(GetResources(),'LBOK')
	Private oUnCheck := LoadBitmap(GetResources(),'LBNO')
	Private oMenu
	Private oBFuncion, aBFuncion, bBFuncion
	Private cBuscaFil  := Space(40)
	Private cDeFunTOB  := Space(nSizeSRJ)
	Private cAteFunTOB := Replicate("Z",nSizeSRJ)
	Private cDeCusTOB  := Space(nSizeSI3)
	Private cAteCusTOB := Replicate("Z",nSizeSI3)
	Private cDeDepTOB  := Space(nSizeSI3)
	Private cAteDepTOB := Replicate("Z",nSizeSQB)
	Private M->TOC_DTENT := dDataBase
	Private aBackFun   := {}

	If Alltrim(GETMV("MV_MCONTAB")) == "CTB"
		cAliasCTT := "CTT"
	Endif

	aBFuncion := { {.F., Space(1), Space(6), Space(40), Space(nSizeSRJ), Space(nSizeSI3) }}
	aNao := {"TOB_CODFUN", "TOB_CC", "TOB_NOMFUN", "TOB_DESCC"}

	aAdd( aBFuncion[1], Space( nSizeSQB ) )
	aAdd( aNao, "TOB_DESCC" )

	aChoice := NGCAMPNSX3( "TOB", aNao )

	dbSelectArea( "TOB" )
	RegToMemory( "TOB", .T.)

	nOpca := 0

	DEFINE MSDIALOG oDlg TITLE OemToAnsi(cCadastro) From aSize[7],0 To aSize[6],aSize[5] COLOR CLR_BLACK,CLR_WHITE OF oMainWnd PIXEL
		oDlg:LESCCLOSE := .f.

		// Panel com Titulo
		oPanelT3:=TPanel():New(00,00,,oDlg,,,,,RGB(0,50,100),12,12,.F.,.F.)
		oPanelT3:Align := CONTROL_ALIGN_TOP
		oPanelT3:nHeight := 18
		@ 01,005 SAY STR0026 OF oPanelT3 Pixel Font oFont12 Color CLR_WHITE //"Filtro"

		// Panel de filtragem
		oPanelTit:=TPanel():New(00,00,,oDlg,,,,,RGB(255,255,255),12,12,.F.,.T.)
			oPanelTit:Align := CONTROL_ALIGN_TOP
			oPanelTit:nHeight := 88

			@ 003,003 Say STR0027 Size 33,7 OF oPanelTit Pixel //"De Função"
			@ 003,040 MsGet cDeFunTOB Size 030,5 OF oPanelTit Pixel Picture "@!" F3 cAliasFun Valid fVldCpoTBO(cAliasFun , cDeFunTOB , cAteFunTOB , 1) HASBUTTON

			@ 015,003 Say STR0028 Size 33,7 OF oPanelTit Pixel //"Até Função"
			@ 015,040 MsGet cAteFunTOB Size 030,5 OF oPanelTit Pixel Picture "@!" F3 cAliasFun Valid fVldCpoTBO(cAliasFun , cDeFunTOB , cAteFunTOB , 2) HASBUTTON

			@ 003,163 Say STR0029 Size 33,7 OF oPanelTit Pixel //"De C. Custo"
			@ 003,200 MsGet cDeCusTOB Size 080,5 OF oPanelTit Pixel Picture "@!" F3 If(lSigaMdtps,"MDTPS2",cAliasCTT) Valid fVldCpoTBO(cAliasCTT , cDeCusTOB , cAteCusTOB , 1) HASBUTTON

			@ 015,163 Say STR0030 Size 33,7 OF oPanelTit Pixel //"Até C. Custo"
			@ 015,200 MsGet cAteCusTOB Size 080,5 OF oPanelTit Pixel Picture "@!" F3 If(lSigaMdtps,"MDTPS2",cAliasCTT) Valid fVldCpoTBO(cAliasCTT , cDeCusTOB , cAteCusTOB , 2) HASBUTTON

			@ 003,320 Say STR0058 Size 33,7 OF oPanelTit Pixel //"De Depto."
			@ 003,357 MsGet cDeDepTOB Size 080,5 OF oPanelTit Pixel Picture "@!" F3 "MDTSQB" Valid fVldCpoTBO("SQB" , cDeDepTOB , cAteDepTOB , 1) HASBUTTON

			@ 015,320 Say STR0059 Size 33,7 OF oPanelTit Pixel //"Até Depto."
			@ 015,357 MsGet cAteDepTOB Size 080,5 OF oPanelTit Pixel Picture "@!" F3 "MDTSQB" Valid fVldCpoTBO("SQB" , cDeDepTOB , cAteDepTOB , 2) HASBUTTON

			@ 027,003 Button oGerCons PROMPT STR0031 OF oPanelTit SIZE 55,12 PIXEL ACTION fBuscaFun() //"Buscar Funcionários"

		// Panel com Titulo
		oPanelT2:=TPanel():New(00,00,,oDlg,,,,,RGB(0,50,100),12,12,.F.,.F.)
			oPanelT2:Align := CONTROL_ALIGN_TOP
			oPanelT2:nHeight := 18
			@ 01,005 SAY STR0032 OF oPanelT2 Pixel Font oFont12 Color CLR_WHITE //"Selecionar os Funcionários"

		// Lista de Funcionarios
		nTelaP2 := aSize[6] - aSize[7] - 342
		nTelaP2 := If( nTelaP2 < 150 , 150 , nTelaP2 )
		nLarVCB := If( lFlatMode , aPosObj[1,4]-10 , aPosObj[1,4] )
		nAltVCB := If( nTelaP2 < 260 , nTelaP2/2.4 , nTelaP2/2.15 )

		oPanelFun:=TPanel():New(00,00,,oDlg,,,,,RGB(255,255,255),12,12,.T.,.F.)
			oPanelFun:Align := CONTROL_ALIGN_TOP
			oPanelFun:nHeight := nTelaP2

			@ 003,003 Say STR0033 Size 33,7 OF oPanelFun Pixel //"Dt. Entrega"                                                                                                      '
			@ 003,040 MsGet M->TOC_DTENT Size 044,5 OF oPanelFun Pixel Valid Naovazio(M->TOC_DTENT) Picture "99/99/9999" HASBUTTON

			@ 003,163 Say OemToAnsi(STR0034) Of oPanelFun Pixel //"Localizar"
			@ 003,200 MsGet cBuscaFil Valid fLocFuncion(cBuscaFil) Picture '@!' Size 100,5 Of oPanelFun Pixel

		oBFuncion := VCBrowse():New( 015 , 1, nLarVCB,nAltVCB,,,,oPanelFun,,,,,{||},,,,,,,.F.,,.T.,,.F.,,.t.,.t.)
			oBFuncion:SetArray(aBFuncion)

			oBFuncion:aHeaders := {" "," ",STR0035,STR0036,STR0037,STR0038,STR0060} //"Matrícula"###"Nome"###"Função"###"Centro de Custo"###"Departamento"
			oBFuncion:aColSizes:= {10,10,30,140,40,70}
			bBFuncion:= { || { If(aBFuncion[oBFuncion:nAt,1],oCheckOK,oUnCheck), Mdta305Sem(),aBFuncion[oBFuncion:nAt,3], aBFuncion[oBFuncion:nAt,4],;
										aBFuncion[oBFuncion:nAt,5], aBFuncion[oBFuncion:nAt,6] , aBFuncion[oBFuncion:nAt,7] } }

			oBFuncion:bLine:= bBFuncion
			oBFuncion:bLDblClick := {|| fMarkFunc() , oBFuncion:DrawSelect() }
			oBFuncion:bHeaderClick := {|| fMarkTudo() }
			oBFuncion:nAt := 1
			oBFuncion:nScrollType := 1

		// Panel com Titulo
		oPanelT1:=TPanel():New(00,00,,oDlg,,,,,RGB(0,50,100),12,12,.F.,.F.)
			oPanelT1:Align := CONTROL_ALIGN_TOP
			oPanelT1:nHeight := 25
			@ 01,005 SAY STR0039 OF oPanelT1 Pixel Font oFont12 Color CLR_WHITE //"Outras Informações"

		// Outras Informacoes
		oEnchoice := MsMGet():New("TOB",nRecno,nOpcx,,,,aChoice,{13,0,60,aPosObj[1,4]},,,,,,oDlg,,,.F.)
			oEnchoice:oBox:Align := CONTROL_ALIGN_ALLCLIENT
			NGPOPUP(asMenu,@oMenu)
			oDlg:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpca:=1,If( !obrigatorio(aGets,aTela) .Or. !fChk305(),nOpca := 0,oDlg:End())},{||oDlg:End()},,@aButtons) CENTERED

	aNao    := aClone(Sv_aNao)
	aCHOICE := aClone(Sv_aCho)

	If nOpca == 1 // Inclusao
		fGrava305()
	Endif

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fGrava305

Funcao para gravar em lote

@author  Denis Hyroshi de Souza
@since   25/07/03
/*/
//-------------------------------------------------------------------
Static Function fGrava305()

	Local aNaoCpo := { "TOB_CODFUN", "TOB_CC", "TOB_DEPTO", "TOB_NOMFUN", "TOB_DESCC", "TOB_FILIAL" }
	Local nFor, nX

	aSort( aBFuncion, , , { |x, y| x[5] + x[6] < y[5] + y[6] .And. x[7] < y[7] } )
	cChvSav := "#!"

	For nX := 1 To Len( aBFuncion )

		If Empty(aBFuncion[nX,5]) .Or. Empty(aBFuncion[nX,6]) .Or. !aBFuncion[nX,1]
			Loop
		Endif

		If cChvSav <> aBFuncion[nX,5] + aBFuncion[nX,6] + aBFuncion[nX,7]
			cChvSav := aBFuncion[nX,5] + aBFuncion[nX,6] + aBFuncion[nX,7]
			dbSelectArea("TOB")
			dbSetOrder(1)

			If dbSeek( xFilial("TOB") + aBFuncion[nX,5] + aBFuncion[nX,6] + aBFuncion[nX,7] )
				RecLock("TOB",.F.)
			Else
				RecLock("TOB",.T.)
			EndIf

			For nFor := 1 To FCOUNT()

				If aScan( aNaoCpo, { |x| x == Alltrim( FieldName( nFor ) ) } ) == 0
					nCmpo := "M->" + FieldName(nFor)
					FieldPut(nFor, &nCmpo.)
				EndIf

			Next nFor

			TOB->TOB_FILIAL := xFilial("TOB")
			TOB->TOB_CODFUN := aBFuncion[nX,5]
			TOB->TOB_CC     := aBFuncion[nX,6]
			TOB->TOB_DEPTO  := aBFuncion[nX,7]
			TOB->(MsUnLock())
		EndIf

		dbSelectArea("TOC")
		dbSetOrder(1)

		If dbSeek(xFilial("TOC") + aBFuncion[nX,5] + aBFuncion[nX,6] + aBFuncion[nX,7] + aBFuncion[nX,3])
			RecLock("TOC",.F.)
		Else
			RecLock("TOC",.T.)
			TOC->TOC_FILIAL := xFilial("TOC")
			TOC->TOC_CODFUN := aBFuncion[nX,5]
			TOC->TOC_CC     := aBFuncion[nX,6]
			TOC->TOC_DEPTO  := aBFuncion[nX,7]
			TOC->TOC_MAT    := aBFuncion[nX,3]
		EndIf

		TOC->TOC_DTENT := M->TOC_DTENT
		TOC->(MsUnLock())
	Next nX

	dbSelectArea("TOB")
	dbGoTop()

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fMarkFunc

Funcao para marcar/desmarcar opcao selecionada

@author  Denis Hyroshi de Souza
@since   25/07/03
/*/
//-------------------------------------------------------------------
Static Function fMarkFunc()
	aBFuncion[oBFuncion:nAt,1] := !aBFuncion[oBFuncion:nAt,1]
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fMarkTudo

Funcao para marcar/desmarcar tudo

@author  Denis Hyroshi de Souza
@since   25/07/03
/*/
//-------------------------------------------------------------------
Static Function fMarkTudo()
	Local nXX, lAchou

	lAchou := .f.
	For nXX := 1 To Len(aBFuncion)
		If !aBFuncion[nXX,1]
			lAchou := .t.
			Exit
		Endif
	Next nXX

	If lAchou //Marcar tudo
		For nXX := 1 To Len(aBFuncion)
			aBFuncion[nXX,1] := .T.
		Next nXX
	Else
		For nXX := 1 To Len(aBFuncion)
			aBFuncion[nXX,1] := .F.
		Next nXX
	Endif
	oBFuncion:Refresh()

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fLocFuncion

Localiza Funcionario

@author  Denis Hyroshi de Souza
@since   27/11/07
/*/
//-------------------------------------------------------------------
Static Function fLocFuncion()
	Local lAchou := .f.
	Local nPosTmp

	If Empty(cBuscaFil)
		Return .t.
	Endif

	nPosTmp := aSCAN( aBFuncion ,{|x| Substr(x[2],1,Len(Alltrim(cBuscaFil))) == Alltrim(cBuscaFil) })
	If nPosTmp > 0
		lAchou := .t.
	Else
		nPosTmp := aSCAN( aBFuncion ,{|x| Substr(x[3],1,Len(Alltrim(cBuscaFil))) == Alltrim(cBuscaFil) })
		If nPosTmp > 0
			lAchou := .t.
		Endif
	Endif

	If lAchou
		oBFuncion:nAt := nPosTmp
		oBFuncion:REFRESH()
	Else
		MsgInfo(STR0040,STR0013) //"Não foi possível localizar este funcionário."###"Atenção"
		cBuscaFil := Space(40)
		Return .t.
	Endif

Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} fBuscaFun

Busca funcionarios

@author  Denis Hyroshi de Souza
@since   09/02/10
/*/
//-------------------------------------------------------------------
Static Function fBuscaFun()
	Local aArea := GetArea()
	Local lTOBDepto := NGCADICBASE( "TOB_DEPTO" , "A" , "TOB" , .F. )
	Local nPos      := aScan( aBackFun ,{|x|	x[1] == cDeFunTOB .and. x[2] == cAteFunTOB .and.;
															x[3] == cDeCusTOB .and. x[4] == cAteCusTOB } )
	Local bAddBFunc := { |x| aAdd( x , { .f. , SRA->RA_SITFOLH, SRA->RA_MAT , SRA->RA_NOME , SRA->RA_CODFUNC , SRA->RA_CC } ) }
	aBFuncion := {}

	If lTOBDepto
		nPos   := aScan( aBackFun ,{|x|	x[1] == cDeFunTOB .and. x[2] == cAteFunTOB .and.;
															x[3] == cDeCusTOB .and. x[4] == cAteCusTOB .and.;
															x[5] == cDeDepTOB .and. x[6] == cAteDepTOB})
		bAddBFunc := { |x| aAdd( x , { .f. , SRA->RA_SITFOLH, SRA->RA_MAT , SRA->RA_NOME , SRA->RA_CODFUNC , SRA->RA_CC , SRA->RA_DEPTO } ) }
	EndIf

	If nPos > 0
		If lTOBDepto
			aBFuncion := aClone(aBackFun[nPos,7])
		Else
		aBFuncion := aClone(aBackFun[nPos,5])
		EndIf
	Else
		If lSigaMdtPS
			dbSelectArea("SRA")
			dbSetOrder(2)
			dbSeek(xFilial("SRA")+cCliMdtPs,.t.)
			While !eof() .and. xFilial("SRA") == SRA->RA_FILIAL .and. Substr(SRA->RA_CC,1,Len(cCliMdtPs)) <= cCliMdtPs
				If SRA->RA_CODFUNC >= cDeFunTOB .and. SRA->RA_CODFUNC <= cAteFunTOB .and. SRA->RA_CC >= cDeCusTOB .and. SRA->RA_CC <= cAteCusTOB .and. SRA->RA_SITFOLH != "D"
					Eval( bAddBFunc , aBFuncion )
				Endif
				dbSkip()
			End
		ElseIf !Empty(cDeFunTOB) .and. cAteFunTOB <> Replicate("Z",Len(cAteFunTOB))
			dbSelectArea("SRA")
			dbSetOrder(7)
			dbSeek(xFilial("SRA")+cDeFunTOB,.t.)
			While !eof() .and. xFilial("SRA") == SRA->RA_FILIAL .and. SRA->RA_CODFUNC <= cAteFunTOB
				If ( ( SRA->RA_CC >= cDeCusTOB .and. SRA->RA_CC <= cAteCusTOB ) .Or.;
						( lTOBDepto .And. SRA->RA_DEPTO >= cDeDepTOB .and. SRA->RA_DEPTO <= cAteDepTOB ) );
						.and. SRA->RA_SITFOLH != "D"

					Eval( bAddBFunc , aBFuncion )
				Endif
				dbSkip()
			End
		ElseIf If(lTOBDepto,(!Empty(cDeCusTOB) .And. cAteCusTOB <> Replicate("Z",Len(cAteCusTOB))),.T.)
			dbSelectArea("SRA")
			dbSetOrder(2)
			dbSeek(xFilial("SRA")+cDeCusTOB,.t.)
			While !eof() .and. xFilial("SRA") == SRA->RA_FILIAL .and. SRA->RA_CC <= cAteCusTOB
				If ( ( SRA->RA_CODFUNC >= cDeFunTOB .and. SRA->RA_CODFUNC <= cAteFunTOB ) .Or.;
						( lTOBDepto .And. SRA->RA_DEPTO >= cDeDepTOB .and. SRA->RA_DEPTO <= cAteDepTOB ) );
						.And. SRA->RA_SITFOLH != "D"

					Eval( bAddBFunc , aBFuncion )
				Endif
				dbSkip()
			End
		ElseIf lTOBDepto
			dbSelectArea("SRA")
			dbSetOrder(21) //RA_FILIAL+RA_DEPTO+RA_MAT
			dbSeek(xFilial("SRA")+cDeDepTOB,.t.)
			While !eof() .and. xFilial("SRA") == SRA->RA_FILIAL .and. SRA->RA_DEPTO <= cAteDepTOB
				If ( ( SRA->RA_CC >= cDeCusTOB .and. SRA->RA_CC <= cAteCusTOB ) .Or.;
						( SRA->RA_CODFUNC >= cDeFunTOB .and. SRA->RA_CODFUNC <= cAteFunTOB ) );
					.And. SRA->RA_SITFOLH != "D"

					Eval( bAddBFunc , aBFuncion )
		Endif
				dbSkip()
			End
		Endif

		aSORT(aBFuncion,,,{|x,y| x[3] < y[3] })
		If lTOBDepto
			aAdd( aBackFun ,{ cDeFunTOB , cAteFunTOB , cDeCusTOB , cAteCusTOB , cDeDepTOB , cAteDepTOB ,aClone(aBFuncion) })
		Else
		aAdd( aBackFun ,{ cDeFunTOB , cAteFunTOB , cDeCusTOB , cAteCusTOB , aClone(aBFuncion) })
		EndIf
		dbSelectArea("SRA")
		dbSetOrder(1)
	Endif

	If Len(aBFuncion) == 0
		If lTOBDepto
			aBFuncion := {{ .F., Space(1), Space(6), Space(40), Space(nSizeSRJ), Space(nSizeSI3) , Space(nSizeSQB) }}
		Else
		aBFuncion := {{ .F., Space(1), Space(6), Space(40), Space(nSizeSRJ), Space(nSizeSI3) }}
		EndIf
		MsgInfo(STR0041,STR0013) //"Não foi encontrado nenhum funcionário com o filtro selecionado."###"Atenção"
	Endif

	oBFuncion:SetArray(aBFuncion)
	oBFuncion:bLine:= bBFuncion
	oBFuncion:GoTop()
	oBFuncion:Refresh()

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fChk305

Valida inclusao em lote

@author  Denis Hyroshi de Souza
@since   09/02/10
/*/
//-------------------------------------------------------------------
Static Function fChk305()
	Local lTem := .f.,nX

	For nX := 1 To Len(aBFuncion)
		If aBFuncion[nX,1] .and. !Empty(aBFuncion[nX,3])
			lTem := .t.
			Exit
		Endif
	Next nX

	If !lTem
		MsgInfo(STR0042,STR0013) //"Nenhum funcionário foi selecionado."###"Atenção"
	Endif

Return lTem

//-------------------------------------------------------------------
/*/{Protheus.doc} fVldFunc

Valida codigo do funcao em um cenario de pergunta De/Ate

@author  Denis Hyroshi de Souza
@since   25/07/03

@sample  fVldCpoTBO(cAliasFun , cDeFunTOB , cAteFunTOB , 1)

@param   cAliasAux, Caracter, Alias onte o codigo sera verificado
@param   cCodDe, Caracter, Conteudo da pergunta De
@param   cCodAte, Caracter, Conteudo da pergunta Ate
@param   nTipo, Numerico, Se ira validar a pergunta De (1) ou Ate (2)

@return  Logico, .T. se o codigo for valido para a pergunta
/*/
//-------------------------------------------------------------------
Static Function fVldCpoTBO( cAliasAux , cCodDe , cCodAte , nTipo )

	If nTipo == 1 .and. !Empty(cCodDe)
		If !ExistCpo(cAliasAux,cCodDe)
			Return .f.
		Endif
	ElseIf nTipo == 2 .and. cCodAte <> Replicate("Z",Len(cCodAte))
		If !ExistCpo(cAliasAux,cCodAte)
			Return .f.
		Endif
		If cCodAte < cCodDe .or. Empty(cCodAte)
			Help(" ",1,"DEATEINVAL")
			Return .f.
		Endif
	Endif

Return .t.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT305VDTR
Validacao do campo Data de Revisao, nao permitindo que seja menor que a data de Elaboracao da O.S.
Funcao chamada no X3_VALID do campo TOB_DTREVI.

@param nFldCall Define que efetuou a chamada da funcao.
					 1 - Data de Elaboracao [TOB_DTELAB]
					 2 - Data de Revisao    [TOB_DTREVI]

@author Hugo R. Pereira
@since 08/10/2012
@version MP10
@return dDtRefer
/*/
//---------------------------------------------------------------------
Function MDT305VDTR( nFldCall )

	Local cCmpr, cFldIni, cFldFim

	Store "" To cCmpr, cFldIni, cFldFim

	Default nFldCall := 0

	If Str(nFldCall, 1) $ "1/2" .And. Type("M->TOB_DTREVI") == "D" .And. Type("M->TOB_DTELAB") == "D"

		// Se chamada a partir da do campo TOB_DTREVI (Revisao)
		If nFldCall == 2 .And. !Empty(M->TOB_DTREVI) .And. Empty(M->TOB_DTELAB)
			ShowHelpDlg( STR0013,	{	STR0051 }, 2, ; // "Não é permitido informar uma data de revisão sem uma data de elaboração já definida."
											{	STR0052 }, 2 )  // "Defina uma data de elaboração."

			Return .F.
		Endif

		If !( Empty(M->TOB_DTREVI) .Or. ( M->TOB_DTREVI >= M->TOB_DTELAB ) )

			SetArgCmpr( nFldCall, @cFldIni, @cFldFim, @cCmpr )

			ShowHelpDlg( STR0013,	{	STR0045 + " " + cFldIni + " " + ;					// "Atenção" ## "O campo"
												STR0046 + " " + cCmpr + " " + STR0047 + " " + ;	// "não pode ser" ## "que o campo"
												cFldFim + "." },1, ;
											{	STR0050 }, 1 ) 											// "Informe uma data válida."

			Return .F.
		Endif
	Endif

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SetArgCmpr
Validacao do campo Data de Revisao, nao permitindo que seja menor que a data de Elaboracao da O.S.
Funcao chamada no X3_VALID do campo TOB_DTREVI.

@param nFldCall Define que efetuou a chamada da funcao.
@param cFldIni  Define campo inicial da mensagem.
@param cFldFim  Define campo final da mensagem.
@param cCmpr    Define termo de comparacao.

@author Hugo R. Pereira
@since 08/10/2012
@version MP10
@return dDtRefer
/*/
//---------------------------------------------------------------------
Static Function SetArgCmpr( nFldCall, cFldIni, cFldFim, cCmpr )

	If nFldCall == 1 // Data de Elaboracao
		cCmpr   := STR0049 // "maior"
		cFldIni := AllTrim(NGRetTitulo("TOB_DTELAB"))
		cFldFim := AllTrim(NGRetTitulo("TOB_DTREVI"))
	Else // Data de Revisao
		cCmpr   := STR0048 // "menor"
		cFldIni := AllTrim(NGRetTitulo("TOB_DTREVI"))
		cFldFim := AllTrim(NGRetTitulo("TOB_DTELAB"))
	Endif

Return

//---------------------------------------------------------------------
/*/ {Protheus.doc} Mdta305Leg
Mostra a situcao na folha do funcionario com relacao a cor.
Funcao chamada no aButtons do MsDialog.

@author Lucas Guszak
@since 18/06/2013
@version MP11
@return
/*/
//---------------------------------------------------------------------
Function Mdta305Leg()

	Local aLegenda := {	{"BR_VERDE"	,STR0053},; // "Situação Normal"
							{"BR_PINK"		,STR0054},; // "Transferido"
							{"BR_AMARELO"	,STR0055},; // "Afastado"
							{"BR_AZUL"		,STR0056}} // "Férias"

	BrwLegenda(cCadastro,STR0057,aLegenda) // "Legenda"

Return

//---------------------------------------------------------------------
/*/ {Protheus.doc} Mdta305Sem
Monta o semaforo da getdados de acordo com a situacao do funcionario.
Funcao chamada no preenchimento da getdados.

@author Lucas Guszak
@since 20/06/2013
@version MP11
@return LoadBitmap(GetResources(),cCor)
/*/
//---------------------------------------------------------------------
Function Mdta305Sem()

	Local cCor := ""

	// " " - Situação Normal, T - Transferido, A - Afastado, F - Ferias
	If(aBFuncion[oBFuncion:nAt,2]==" ",cCor := 'BR_VERDE'	,;
	If(aBFuncion[oBFuncion:nAt,2]=='T',cCor := 'BR_PINK'	,;
	If(aBFuncion[oBFuncion:nAt,2]=='A',cCor := 'BR_AMARELO'	,;
	If(aBFuncion[oBFuncion:nAt,2]=='F',cCor := 'BR_AZUL'	,))))

Return LoadBitmap(GetResources(),cCor)
//---------------------------------------------------------------------
/*/ {Protheus.doc} MDTA305Val
Validação dos campos da TOB

@param nCampo Numerico Indica o campo a ser validado.
@author Guilherme Benkendorf
@since 28/09/2015
@version MP12
@return lRet Boolean
/*/
//---------------------------------------------------------------------
Function MDTA305Val( nCampo )
	Local lRet := .T.
	Local lValChav := Type("M->TOB_CC") == "C" .And. Type("M->TOB_DEPTO") == "C"
	Local cCustoSQB

	If nCampo == 1 //TOB_CC
		lRet := Empty( M->TOB_CC ) .Or. CTB105CC()
	ElseIf nCampo == 2 //TOB_DEPTO
		lRet := Empty( M->TOB_DEPTO ) .Or. ExistCPO( 'SQB' , M->TOB_DEPTO, 1 )

		cCustoSQB :=  NgSeek( "SQB" , M->TOB_DEPTO , 1 , "SQB->QB_CC" )
		If lRet .And. lValChav .And. !Empty( M->TOB_CC ) .And. !Empty( cCustoSQB ) .And. cCustoSQB <> M->TOB_CC
			MsgAlert( STR0061, STR0013 ) //"O departamento está com o Centro de Custo diferente da O.S. Selecione um departamento que possua o mesmo Centro de Custo."//"Atenção"
		EndIf

	EndIf

	If lRet .And. lValChav .And. !Empty( M->TOB_CC) .And. !Empty( M->TOB_DEPTO )
		lRet := EXISTCHAV('TOB',M->TOB_CODFUN+M->TOB_CC+M->TOB_DEPTO)
	EndIf

Return lRet