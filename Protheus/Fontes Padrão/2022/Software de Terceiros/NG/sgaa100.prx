#Include "SGAA100.ch"
#Include "Protheus.ch"
#Include "DbTree.ch"
#Include "Ptmenu.ch"

#DEFINE __cHora Substr(Time(),1,5)	// Variavel utilizada para verificacao da TPN
#DEFINE _NoVrfSit "_NOSITNIV"		// Verifica se deve avaliar a situacao do nivel

//-------------------------------------------------------------------
/*/{Protheus.doc} SGAA100
Programa para cadastrar níveis organizacionais da empresa.

@type    function
@author  Thiago Olis Machado
@since   15/09/2003
@sample  SGAA100()

@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function SGAA100()

	Local aNGBEGINPRM := NGBEGINPRM()
	Local cModTAF := ""
	Local cModTCJ := ""

	// Define Variaveis Private
	Private nOldTitX,nOldTitY
	Private oDocOld,cOldDocto
	Private cARQTA100, cARQTA100x

	Private lRotina   := SgRotina()
	Private aRotina   := MenuDef()
	Private cCadastro := OemToAnsi(STR0001) //"Nivel Organizacional"

	Private oFontDialog:= TFont():New("Arial",6,15,,.T.,,,,.F.)
	Private lRateio := NGCADICBASE('TAF_RATEIO','D','TAF',.F.)
	Private lFamilia:= NGCADICBASE('TAF_CODFAM','D','TAF',.F.)
	Private lDepto		:= NGCADICBASE('TAF_DEPTO','D','TAF',.F.)

	Private ldbTree     := .F.
	Private lSH1        := .F.
	Private lGrava      := .F.
	Private aItensCar   := {}
	Private aVETINR     := {}
	Private nNivel      := 0
	Private nMaxNivel   := 0

	Private M->TAF_MAT := ""
	Private M->TAF_CCUSTO := ""
	Private M->TAF_CENTRA := ""
	Private lFirstUOrd := .T.

	//Limpa variavel de click da direita pois sera controlado pelo fonte
	aSMenu := {}

	//Verifica o compartilhamento das tabelas TCJ e TAF
	cModTAF := FWModeAccess("TAF") + FWModeAccess("TAF",2) + FWModeAccess("TAF",3)
	cModTCJ := FWModeAccess("TCJ") + FWModeAccess("TCJ",2) + FWModeAccess("TCJ",3)

	If cModTAF <> cModTCJ
		MsgAlert(STR0108+chr(13); //"Existe um problema de compartilhamento entre as tabelas TAF e TCJ."
		+STR0109,STR0082) //"Favor verificar o compartilhamento dessas tabelas para que sejam iguais." # "ATENÇÃO"
		Return .T.
	EndIf

	aRotina :=	{	{STR0002	,"AxPesqui"	 , 0 , 1},;   //"Pesquisar"
					{STR0004	,"SG100PROC" , 0 , 3},;   //"Incluir"
					{STR0110	,"SG100PROC" , 0 , 4 ,3}} //"Manip. Estrutura"

	If !lRotina
		Inclui := .F.
		DbSelectArea("TAF")
		DbSetOrder(1)
		DbSeek(xFilial("TAF")+"001000")

		Sg100Proc(Alias(),Recno(),4)

		DbSelectArea("TAF")
		DbSetOrder(1)

		//Retorna Variaveis
		NGRETURNPRM(aNGBEGINPRM)
		Return .T.
	EndIf
	// Endereca a funcao de BROWSE

	DbSelectARea("TAF")
	DbSetOrder(1)
	DbSeek(xFilial("TAF"))

	mBrowse(6,1,22,75,"TAF")

	DbSelectArea("TAF")
	DbSetOrder(1)

	//Retorna Variaveis
	NGRETURNPRM(aNGBEGINPRM)

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Proc
Função para processamento da estrutura.

@type    function
@author  Thiago Olis Machado
@since   15/09/2003
@sample  Sg100Proc( 'XYZ', 24, 4 )

@param   cAlias, Caractere, Alias do Arquivo
@param   nRecno, Numérico, Chave de Pesquisa
@param   nOpcx, Numérico, Opção do Browse Escolhida

@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function Sg100Proc( cAlias, nRecno, nOpcx )

	Local cTitulo := cCadastro
	Local sg  // Variavel incrementadora
	Local j, nIdx
	Local aOldRot := aClone(aRotina)
	Local aTRB := {}
	Local cDescricao
	Local oTempTRB
	Local oTempB100
	Local oTempC100
	Local lAccsResp	:= IIf( FindFunction( "MDTVldFldAcc" ), MDTVldFldAcc( "TAF_MAT" ), ( lAltera .Or. lInclui ) )

	Private oTree 			 // Objeto para montar a arvore
	Private cProc      := Space( Len( TAF->TAF_CODNIV ) ) // Codigo do Nivel da Estrutura
	Private lFstChoice := .F. // Escolha do Modulo SIGASGA
	Private lSndChoice := .F. // Escolha do Modulo SIGAMDT
	Private lTrdChoice := .F. // Escolha do Modulo SIGAMNT
	Private lFirst     := .T. // Define a primeira vez que inclui um item na estrutura
	Private lFirstMod2 := .T.
	Private lFirstMod3 := .T.
	Private lPai
	Private _nModulo   := "1"  // Default da Escolha do modulo
	Private aDbInfo    := {}  // Armazena as informacoes para depois gravar
	Private cRespon    := Space( Len( TAF->TAF_MAT ) ) // Responsavel
	Private cNome      := Space( Len( QAA->QAA_NOME ) ) // Nome do Responsavel
	Private cLocal     := "000" //Codigo do Nivel da Estrurura para o Filho
	Private cOrdem     := Space( Len( TAF->TAF_ORDEM ) )
	Private cCodEst    := Space(03) // Codigo da Estrutura toda
	Private cFolderA   := "FOLDER10" // Folder Verde Fechado
	Private cFolderB   := "FOLDER11" // Folder Verde Aberto
	Private cDesc      := Space( Len( TAF->TAF_NOMNIV ) ) //Descricao do pai da estrutura
	Private oCheck1  // Escolha do modulo
	Private oCheck2 // Escolha do modulo
	Private oCheck3 // Escolha do modulo
	Private oResp            // Codigo do responsavel
	Private oDesc            // Descricao da Identificacao
	Private oNome            // Nome do Responsavel
	Private oDlg 			 // Objeto para montar a janela
	Private cPaiMdt    := ''    // Armazena o codigo do pai do Mdt
	Private cPaiMnt    := ''    // Armazena o codigo do pai do Mnt
	Private oEnc01
	Private aSvATela   := {}, aSvAGets := {}
	Private oMenu
	Private nOpcGrava  := nOpcx
	Private aSMenu     := {}
	Private vRetS      := {}, lRetS := .F.
	Private nTotalRat
	Private aCols      := {}
	Private aTudoSZ2   := {}
	Private aTELA[0][0]
	Private aGETS[0]
	Private cNivCpy := ""

	//Variaveis de perfil
	Private lVisual := .T.
	Private lInclui := .F.
	Private lAltera := .F.
	Private lExclui := .F.
	Private cTRBTAK, cTRBSGA

	aRotina := {	{ STR0002 , "AxPesqui"  , 0 , 1 }     ,;	//"Pesquisar"
				{STR0110   ,"SG100PROC", 0 , 2},;     //"Manip. Estrutura"
				{STR0004   ,"SG100PROC", 0 , 3},;     //"Incluir"
				{STR0110   ,"SG100PROC", 0 , 4, 0},;  //"Manip. Estrutura"
				{STR0110   ,"SG100PROC", 0 , 5, 3}}   //"Manip. Estrutura"

	vRetS := NGCADICBASE('TAF_ETAPA','A','TAF')
	lRetS := If(!vRetS[1],.F.,.T.)

	If nModulo == 56
		lFstChoice := .T.
	ElseIf nModulo == 35
		lSndChoice := .T.
	ElseIf nModulo == 19
		lTrdChoice := .T.
	EndIf

	//define perfil
	aSMenu := SG100PERF()

	If !lRotina
		cTitulo:= cCadastro + " - " + aRotina[ nOpcx ][ 01 ] // Titulo da janela
	EndIf

	If nOpcx <> 4
		nOpcx ++
	EndIf

	If !SgRotina() .And. nOpcx == 3
		MsgInfo(STR0026) //"Ja existe uma Estrutura Organizacional cadastrada"
		//Retorna aRotina
		aRotina := aClone(aOldRot)
		Return .T.
	EndIf

	aTRB := SGATRBEST(.T.)//Define estrutura do TRB
	cTRBSGA := aTRB[3]
	oTempTRB := FWTemporaryTable():New( cTRBSGA, aTRB[1] )
	For nIdx := 1 To Len( aTRB[2] )
		oTempTRB:AddIndex( RETASC( cValToChar( nIdx ) , 1 , .T. ), aTRB[2,nIdx] )
	Next nIdx
	oTempTRB:Create()

	If Empty(cDesc)
		//Devido retorno de 1 caracter em branco da funcao SGATRBEST se o conteudo for vazio alimenta novamente
		cDesc := Space( Len( TAF->TAF_NOMNIV ) )
	EndIf

	//Define as colunas ( Niveis ) da estrutura

	aCampos2 := {}

	aAdd(aCampos2,{"CODNIV"   ,"C",03,0})
	aAdd(aCampos2,{"DESCRI"   ,"C",40,0})
	aAdd(aCampos2,{"NIVSUP"   ,"C",03,0})
	aAdd(aCampos2,{"DATAPRO"  ,"D",08,0})
	aAdd(aCampos2,{"HORAPRO"  ,"C",05,0})
	aAdd(aCampos2,{"TIPROC"   ,"C",01,0})
	aAdd(aCampos2,{"MODSGA"   ,"C",01,0})
	aAdd(aCampos2,{"MODMNT"   ,"C",01,0})
	aAdd(aCampos2,{"MODMDT"   ,"C",01,0})
	aAdd(aCampos2,{"NIVEL"    ,"N",03,0})

	oTempB100 := FWTemporaryTable():New( "TRBTCJ", aCampos2 )
	oTempB100:AddIndex( "1", {"CODNIV","NIVSUP","TIPROC","DATAPRO","HORAPRO"} )
	oTempB100:Create()

	aCampos3 := {}

	aAdd(aCampos3,{"CODNIV"   ,"C",Len(TAK->TAK_CODNIV),0})
	aAdd(aCampos3,{"CODFUN"   ,"C",Len(TAK->TAK_CODFUN),0})
	aAdd(aCampos3,{"MAT"  		,"C",Len(TAK->TAK_MAT)   ,0})
	aAdd(aCampos3,{"OPERAC"    ,"C",01				   ,0})

	cTRBTAK := GetNextAlias()
	oTempC100 := FWTemporaryTable():New( cTRBTAK, aCampos3 )
	oTempC100:AddIndex( "1", {"CODNIV","CODFUN","MAT"} )
	oTempC100:Create()

	If nOpcx = 3
		cCodEst := Sg100CodEs()
		lPai    := .T.
	Else
		dbSelectArea("TAF")
		dbSetOrder(1)
		dbSeek(xFilial("TAF")+"001"+"000")
		cCodEst := TAF->TAF_CODEST
		cProc   := TAF->TAF_CODNIV
		cDesc   := TAF->TAF_NOMNIV
		cRespon   := IIf( FindFunction( "MDTHideCpo" ), MDTHideCpo( TAF->TAF_MAT, "TAF_MAT" ), TAF->TAF_MAT )

		QAA->(dbSeek(xFilial('QAA')+TAF->TAF_MAT))
		cNome   := IIf( FindFunction( "MDTHideCpo" ), MDTHideCpo( QAA->QAA_NOME, "QAA_NOME" ), QAA->QAA_NOME )

		lPai    := .F.
	EndIf

	//Define o codigo autonumerado da estrutura
	cProc := '001'

	cDescricao := cDesc

	Define MsDialog oDlg From 03.5,6 To 390,585 Title cTitulo Pixel

	// Cria Objeto DbTree.
	oTree := SG100CTTREE()

	@ 09,008 Say OemToAnsi(STR0025) Size 37,7 Of oDlg Pixel Color CLR_BLUE  //"Identificacao"
	@ 07,047 MsGet oDesc Var cDescricao Size 223,08 Of oDlg Pixel Valid Sg100Build(oTree, oDlg, cDescricao, nOpcX, cProc, nModulo) When lPai
	oDesc:SetFocus()

	oDesc:bHelp := {|| ShowHelpCpo(STR0025,{STR0133},2,{},2)} //"Identificação"###"Nome de identificação deste nível."

	@ 24,008 Say OemToAnsi(STR0009) Size 37,7 Of oDlg Pixel //"Responsável"

	@ 22,047 MsGet oResp Var cRespon Size 65,08 Of oDlg Pixel Picture "@!" Valid If(Vazio(),.T.,ExistCpo("QAA", cRespon)) .And.;
																				Sg100Nome(cRespon) F3 "QAA";
																				When lAccsResp HasButton
	oResp:bHelp := {|| ShowHelpCpo(STR0009,{STR0130},2,{},2)} //"Responsável"###"Informe o responsável."

	@ 24,112 Say OemToAnsi(STR0073) Size 37,7 Of oDlg Pixel //"Descrição"
	@ 22,140 MsGet oNome Var cNome Size 130,08 Of oDlg Pixel When .F.

	If !Inclui
		If nModulo == 56
			Processa({|lEnd| Sg100Tree(@lEnd,cProc,3)},STR0047,STR0074,.T.) //"Aguarde..."###"Carregando Estrutura..."
		ElseIf nModulo == 35
			Processa({|lEnd| Sg100Tree(@lEnd,cProc,5)},STR0047,STR0074,.T.) //"Aguarde..."###"Carregando Estrutura..."
		ElseIf nModulo == 19
			Processa({|lEnd| Sg100Tree(@lEnd,cProc,4)},STR0047,STR0074,.T.) //"Aguarde..."###"Carregando Estrutura..."
		EndIf
	EndIf

	oTree:SetUpdatesEnable(.T.)

	@ 160, 010 CheckBox oCheck1 Var lFstChoice Prompt OemToAnsi("SIGASGA") On Change MsgRun( STR0047, STR0074, { || Sg100Mod(oTree, oDlg, 3,nOpcx) } ); //###"Aguarde..."###"Carregando Estrutura..."
																		Size 102,7 Of oDlg Pixel

	@ 160, 125 CheckBox oCheck2 Var lSndChoice Prompt OemToAnsi("SIGAMDT") On Change MsgRun( STR0047, STR0074, { || Sg100Mod(oTree, oDlg, 5,nOpcx) } ); //"Aguarde..."###"Carregando Estrutura..."
																		Size 102,7 Of oDlg Pixel

	@ 160, 240 CheckBox oCheck3 Var lTrdChoice Prompt OemToAnsi("SIGAMNT") On Change MsgRun( STR0047, STR0074, { || Sg100Mod(oTree, oDlg, 4,nOpcx) } ); //"Aguarde..."###"Carregando Estrutura..."
																		Size 102,7 Of oDlg Pixel

	Define sButton From 175,215 Type 1 Enable Of oDlg Action Sg100Grava(oDlg,nOpcx)
	Define sButton From 175,246 Type 2 Enable Of oDlg Action oDlg:End()

	@ 085,553 BTNBMP oInc Resource "bmpvisual" Size 17,17 Pixel Of oDlg Noborder Pixel Action Sg100Ident(4)
	oInc:cToolTip := OemToAnsi(STR0003) //"Visualizar"

	@ 120,553 BTNBMP oInc Resource "bmpincluir" Size 17,17 Pixel Of oDlg Noborder Pixel Action Sg100Ident(1) When lInclui
	oInc:cToolTip := OemToAnsi(STR0004) //"Incluir"

	@ 155,553 BTNBMP oAlt Resource "note" Size 17,17 Pixel Of oDlg Noborder Pixel Action Sg100Ident(2) When lAltera
	oAlt:cToolTip := OemToAnsi(STR0005) //"Alterar"

	@ 190,553 BTNBMP oExc Resource "excluir" Size 17,17 Pixel Of oDlg Noborder Pixel Action Sg100Ident(3) When lExclui
	oExc:cToolTip := OemToAnsi(STR0006) //"Excluir"

	@ 250,553 BTNBMP oExc Resource "NGSETAUPLEFT" Size 17,17 Pixel Of oDlg Noborder Pixel Action (Sg100Troca(1,oTree)) When lAltera
	oExc:cToolTip := OemToAnsi(STR0075) //"Alterar Ordem"

	Activate MsDialog oDlg Centered

	//Deleta o arquivo temporario fisicamente
	oTempTRB:Delete()
	oTempB100:Delete()
	oTempC100:Delete()

	//Retorna aRotina
	aRotina := aClone(aOldRot)

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} SG100RClick
Mostra o Click da Direita

@type    function
@author  Roger Rodrigues
@since   12/08/2009
@sample  SG100RClick( )

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function SG100RClick( x, y, o )

	Sg100Pop(@AsMenu,@oMenu)
	oMenu:Activate(x,y,oMenu)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Build
Montagem do arquivo temporario para o Tree

@type    function
@author  Thiago Olis Machado
@since   15/09/2003
@sample  Sg100Build( oTree, oDlg, 'Teste', 4, '', 35 )

@param   oTree, Objeto, Objeto onde cria a árvore
@param   oDlg, Objeto, Objeto onde cria a janela
@param   cDescr, Caractere, Descrição do pai
@param   nOpcX, Numérico, Opcao do Browse Escolhida
@param   cProc, Caractere, Ordem do pai
@param   nModulo, Numérico, Módulo utilizado

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Build( oTree, oDlg, cDescr, nOpcX, cProc, nModulo )

	//Valida nome
	If Empty(cDescr)
		Help(1," ","OBRIGAT2",,STR0025,3,0)//"Identificação"
		Return .F.
	EndIf

	dbSelectArea(cTRBSGA)
	dbSetOrder(1)
	If nOpcX == 3 .And. !dbSeek("001000")

		// Criação de uma nova estrutura
		DbAddTree oTree Prompt cDescr Opened Resource cFolderA, cFolderB Cargo cProc+'LOC '
		(cTRBSGA)->(DbAppend())
		(cTRBSGA)->CODEST  := Sg100CodEs()
		(cTRBSGA)->CODPRO  := cProc
		(cTRBSGA)->DESCRI  := cDescr
		(cTRBSGA)->NIVSUP  := '000'
		(cTRBSGA)->RESPONS := cRespon
		(cTRBSGA)->TIPO    := '2'
		(cTRBSGA)->MODSGA  := "X"
		(cTRBSGA)->MODMDT  := "X"
		(cTRBSGA)->MODMNT  := "X"
		(cTRBSGA)->ORDEM	:= cProc
		(cTRBSGA)->NIVEL   := 1
		(cTRBSGA)->OPERAC  := "I"

		If lRetS
			(cTRBSGA)->ETAPA	:= "2"
		EndIf

		If lSitNiv // Verifica se deve analisar situacao do nivel
			(cTRBSGA)->SITNIV := "1"
			(cTRBSGA)->ATFIL := "0"
		EndIf

		DbEndTree oTree
	Else
		dbSeek("001000")

		DbAddTree oTree Prompt cDescr Opened Resource cFolderA, cFolderB Cargo cProc+'LOC '
		RecLock(cTRBSGA,.F.)
		(cTRBSGA)->CODEST  := Sg100CodEs()
		(cTRBSGA)->CODPRO  := "001"
		(cTRBSGA)->DESCRI  := cDescr
		(cTRBSGA)->NIVSUP  := '000'
		(cTRBSGA)->RESPONS := cRespon
		(cTRBSGA)->TIPO    := '2'
		(cTRBSGA)->MODSGA  := "X"
		(cTRBSGA)->MODMDT  := "X"
		(cTRBSGA)->MODMNT  := "X"
		(cTRBSGA)->ORDEM	:= "001"
		(cTRBSGA)->NIVEL   := 1
		(cTRBSGA)->OPERAC  := "I"

		If lRetS
			(cTRBSGA)->ETAPA	:= "2"
		EndIf

		If lSitNiv // Verifica se deve analisar situacao do nivel
			(cTRBSGA)->SITNIV := "1"
			(cTRBSGA)->ATFIL  := "0"
		EndIf

		MsUnlock(cTRBSGA)
		DbEndTree oTree
	EndIf

	oTree:Refresh()
	oTree:SetFocus()
	lPai := .F.

	If lDbTree
	oTree:Refresh()
	Else
	oDlg:SetFocus()
	EndIf

	oResp:SetFocus()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Nome
Busca o nome do responsável

@type    function
@author  Thiago Olis Machado
@since   15/09/2003
@sample  Sg100Nome( '0001' )
@param   cRespon, Caractere, Código do responsável

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Nome( cRespon )

	If Empty(cRespon)
		cNome := ""
	Else
		QAA->(dbSeek(xFilial('QAA')+cRespon))
		cNome:= QAA->QAA_NOME
	EndIf

	oNome:Refresh()

	//Procura Estrutura no TRB e muda o seu Responsável
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek("001"+"001")
		RecLock(cTRBSGA,.F.)
		(cTRBSGA)->RESPONS := cRespon
		MsUnlock(cTRBSGA)
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Mod
Remontagem da arvore de acordo com o modulo

@type    function
@author  Thiago Olis Machado
@since   16/09/2003
@sample  Sg100Mod( oTree, oDlg, 35, 4 )

@param   oTree, Objeto, Objeto onde cria a arvore
@param   oDlg, Objeto, Objeto onde cria a janela
@param   nMod, Numérico, Modulo a ser carregado 3-SGA; 4-MNT; 5-MDT
@param   nOpcx, Numérico, Modo de gravacao

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Mod( oTree, oDlg, nMod, nOpcx )

	If !Empty(cDesc)
		//Grava os dados antes de recarregar arvore
		If MsgYesNo(STR0092 + CHR(13) + STR0093) //"Deseja gravar os dados cadastrados?"###"Caso contrário todos os dados serão perdidos!"
			Sg100Grava(oDlg,nOpcx,.F.)
		EndIf
	EndIf

	//Reinicia o valor de todas as variaveis utilizadas no SG100Tree para recarregar arvore
	cLocal   := "000" //Codigo do Nivel da Estrurura para o Filho
	cOrdem   := Space( Len( TAF->TAF_ORDEM ) )
	cCodEst  := Space(03) // Codigo da Estrutura toda

	DbSelectArea("TAF")
	DbSetOrder(1)
	If DbSeek(xFilial("TAF")+"001000")//Verifica se a estrutura principal ja esta cadastrada

	cCodEst := TAF->TAF_CODEST
	cProc   := TAF->TAF_CODNIV
	cDesc   := TAF->TAF_NOMNIV
	lPai    := .F.

		dbSelectArea(cTRBSGA)
		Zap

		dbSelectArea("TRBTCJ")
		Zap

		dbSelectArea(cTRBTAK)
		Zap

		aItensCar := {}
		cProc := "001"

		//Limpa a arvore e recarrega do zero de acordo com o modulo
		oTree:Reset()
		dbSelectArea(oTree:cArqTree)
		ZAP

		// Destrói o objeto.
		oTree:Free()

		// Cria Novamente o Objeto DbTree.
		oTree := SG100CTTREE()
		oTree:SetUpdatesEnable(.F.)

		Processa({|lEnd| Sg100Tree(@lEnd,cProc,nMod)},STR0047,STR0074,.T.) //"Aguarde..."###"Carregando Estrutura..."

		oTree:SetUpdatesEnable(.T.)
		oTree:Refresh()
		oTree:SetFocus()

		If nMod = 3
			lFstChoice := .T.
			lSndChoice := .F.
			lTrdChoice := .F.
		ElseIf nMod = 5
		lFstChoice := .F.
		lSndChoice := .T.
		lTrdChoice := .F.
		ElseIf nMod = 4
		lFstChoice := .F.
		lSndChoice := .F.
		lTrdChoice := .T.
		EndIf

		aSMenu := SG100PERF()
		Sg100Pop(@AsMenu,@oMenu)
	Else

		dbSelectArea(cTRBSGA)
		Zap

		dbSelectArea("TRBTCJ")
		Zap

		dbSelectArea(cTRBTAK)
		Zap

		cCodEst := Sg100CodEs()
		oTree:Reset()

		If nModulo == 56
			lFstChoice := .T.
			lSndChoice := .F.
			lTrdChoice := .F.
		ElseIf nModulo == 35
			lFstChoice := .F.
			lSndChoice := .T.
			lTrdChoice := .F.
		ElseIf nModulo == 19
			lFstChoice := .F.
			lSndChoice := .F.
			lTrdChoice := .T.
		EndIf

		lPai := .T.

		oDesc:Refresh()
		oDesc:SetFocus()

		ShowHelpDlg(STR0082,{STR0111},1) //"Atenção"###"Favor cadastrar uma estrutura antes de mudar de módulo."

	EndIf

	oCheck1:Refresh()
	oCheck2:Refresh()
	oCheck3:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Local
Inclui local na estrutura

@type    function
@author  Thiago Olis Machado
@since   16/09/2003
@sample  Sg100Local( '', '', 'X', 4, 5 )

@param   cModSga, Caractere,
@param   cModMnt, Caractere,
@param   cModMdt, Caractere,
@param   nOpc, Numérico, Opção de transação
@param   nMod, Numérico, nMod, Numérico, Modulo a ser carregado 3-SGA; 4-MNT; 5-MDT

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Local( cModSga, cModMnt, cModMdt, nOpc, nMod )

	Local oDlgLoc  // Objeto da janela principal
	Local i,bCampo, nAlt := 589
	LOCAL aSize   :={}
	LOCAL aInfo   :={}
	LOCAL aObjects:={}
	LOCAL aPosObj :={}
	Local aRelac  := {}
	Local nLevel  := 0
	Local aAreaTCJ := {}
	Local lSGA, lMDT, lMNT
	Local lVer11 := (SX2->(FieldPos("X2_MODOEMP")) > 0)
	Local nOpcOld := nOpc
	Local lDepto:= NGCADICBASE( "TAF_DEPTO", "A" , "TAF" , .F. )
	Local oTempTAP

	Private lChoice1 := .T. // Escolha do Modulo SIGASGA
	Private lChoice2 := .F. // Escolha do Modulo SIGAMDT
	Private lChoice3 := .F. // Escolha do Modulo SIGAMNT

	SgaPvt100()

	lGrava := .F.

	aCampos4 := {}

	aAdd(aCampos4,{"CODNIV"   ,"C",Len(TAK->TAK_CODNIV),0})
	aAdd(aCampos4,{"CODFUN"   ,"C",Len(TAK->TAK_CODFUN),0})
	aAdd(aCampos4,{"MAT"  		,"C",Len(TAK->TAK_MAT)   ,0})
	aAdd(aCampos4,{"OPERAC"    ,"C",01				   ,0})

	cTRBTAP := GetNextAlias()

	oTempTAP := FWTemporaryTable():New( cTRBTAP, aCampos4 )
	oTempTAP:AddIndex( "1", {"CODNIV","CODFUN","MAT"} )
	oTempTAP:Create()

	If nOpc == 3
		If SubStr( oTree:GetCargo(), 4, 3 ) <> 'LOC'
			oTempTAP:Delete()
			Return Nil
		EndIf

		cFolderA := 'FOLDER10'
		cFolderB := 'FOLDER11'

		cCodLevel := SubStr( oTree:GetCargo(), 1, 3 )
		DbSelectArea(cTRBSGA)
		DbSetOrder(2)
		DbSeek(cCodEst+cCodLevel)
		nLevel := (cTRBSGA)->NIVEL

		Inclui := .T.
		nRecno := 1
		// Vale 000 apenas da primeira vez que entra no Incluir.
		// ('Primeira vez' por entrada na rotina de Estrutura Organizacional).
		If cLocal == "000"
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbGoBottom()
			cLocal := TAF->TAF_CODNIV

			If Empty(cLocal)
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbGoBottom()
				cLocal := (cTRBSGA)->CODPRO
			EndIf

			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf

		Else

			DbSelectArea(cTRBSGA)
			DbSetOrder(2)
			DbGoBottom()
				cLocal := (cTRBSGA)->CODPRO

			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf

			cLocal := LastCodNiv(cLocal)

		EndIf

		lChoice1 := IIf(!Empty(cModSga),.T.,.F.)
		lChoice2 := IIf(!Empty(cModMdt),.T.,.F.)
		lChoice3 := IIf(!Empty(cModMnt),.T.,.F.)

		lSGA := lChoice1
		lMDT := lChoice2
		lMNT := lChoice3

	Else

		cLocal := SubStr( oTree:GetCargo(), 1, 3 )
		DbSelectArea('TAF')
		DbSetOrder(2)
		If DbSeek(xFilial('TAF')+cCodEst+cLocal)
			nRecno := Recno()
			nLevel := TAF->TAF_NIVEL
		Else
			nOpcOld := If(nOpc == 2,nOpc,4)
			nOpc := 4
			nRecno := 1
		EndIf

		DbSelectArea(cTRBSGA)
		DbSetOrder(2)
		If DbSeek(cCodEst+cLocal)
			aRelac   := { { "TAF_NOMNIV", "(cTRBSGA)->DESCRI"  }, ;
						  { "TAF_CODNIV", "cLocal"             }, ;
						  { "TAF_MAT"   , "(cTRBSGA)->RESPONS" }, ;
						  { "TAF_CENTRA", "(cTRBSGA)->CENTRAB" }, ;
						  { "TAF_CCUSTO", "(cTRBSGA)->CC"      }, ;
						  { "TAF_CODAMB", "(cTRBSGA)->AMBIE"   }  }
			If lRetS
				AADD(aRelac, {"TAF_ETAPA","(cTRBSGA)->ETAPA"})
			EndIf
			If lRateio
				AADD(aRelac,{"TAF_RATEIO","(cTRBSGA)->RATEIO"})
			EndIf
			If lFamilia
				AADD(aRelac,{"TAF_CODFAM","(cTRBSGA)->CODFAM"})
			EndIf
			If lDepto
				AADD(aRelac,{"TAF_DEPTO","(cTRBSGA)->DEPTO"})
			EndIf

			If oCheckLoc1 <> Nil
				oCheckLoc1:Refresh()
				oCheckLoc2:Refresh()
				oCheckLoc3:Refresh()
			EndIf

			lChoice1 := IIf(!Empty((cTRBSGA)->MODSGA),.T.,.F.)
			lChoice2 := IIf(!Empty((cTRBSGA)->MODMDT),.T.,.F.)
			lChoice3 := IIf(!Empty((cTRBSGA)->MODMNT),.T.,.F.)
			lSGA := lChoice1
			lMDT := lChoice2
			lMNT := lChoice3
		EndIf
	EndIf

	aAdd(aOpc, {lChoice1,lChoice2,lChoice3 } )
	bCampo := {|nCPO| Field(nCPO) }

	//Se for versao 11
	If lVer11
		nAlt := 680
	EndIf
	Define MsDialog oDlgLoc From 400.5,226 To nAlt,850 Title STR0025 Pixel  //"Identificacao"

	aNao := {	"TAF_CODEST" ,;
					"TAF_NIVEL"  ,;
					"TAF_INDCON" ,;
					"TAF_CODCON" ,;
					"TAF_NIVSUP" ,;
					"TAF_ORDEM"  ,;
					"TAF_SITNIV"  }

	aChoice  := NGCAMPNSX3("TAF",aNao)

	Aadd(aObjects,{285,060,.F.,.F.,.F.}) // Indica dimensoes x e y e indica que redimensiona x e y
	Aadd(aObjects,{90,180,.T.,.T.,.F.}) // Indica dimensoes x e y e indica que redimensiona x e y e assume que retorno sera em linha final coluna final (.F.)

	aSize:=MsAdvSize()
	aInfo:={aSize[1],aSize[2],aSize[3],aSize[4],3,3}
	aPosObj:=MsObjSize(aInfo,aObjects,.T.)

	Dbselectarea("TAF")
	RegToMemory("TAF",(nOpc == 3))
	oEnc01:= MsMGet():New("TAF",nRecno,nOpcOld,,,,aChoice,{0,0,285,315},,3,,,,oDlgLoc,,.T.,.F.,,,,,,,.T.)
	oEnc01:oBox:Align := CONTROL_ALIGN_ALLCLIENT

	For i := 1 to Len(aRELAC)
		cCampo := "M->" + aRELAC[i][1]
		cRelac := aRELAC[i][2]
		&cCampo. := &cRelac
	Next

	If !Empty(M->TAF_MAT)
		M->TAF_NOMRES := NGSEEK("QAA",M->TAF_MAT,1,'QAA_NOME')
	EndIf

	If !Empty(M->TAF_CENTRA)
		M->TAF_NOMTRA := NGSEEK("SHB",M->TAF_CENTRA,1,'HB_NOME')
	EndIf

	If !Empty(M->TAF_CCUSTO)
		M->TAF_NOMCC := NGSEEK("CTT",M->TAF_CCUSTO,1,'CTT_DESC01')
	EndIf

	If lFamilia
		If !Empty(M->TAF_CODFAM)
			M->TAF_DESFAM := NGSEEK("ST6",M->TAF_CODFAM,1,'T6_NOME')
		EndIf
	EndIf

	If lDepto
		If !Empty(M->TAF_DEPTO)
			M->TAF_DESCDP := NGSEEK("SQB",M->TAF_DEPTO,1,'QB_DESCRIC')
		EndIf
	EndIf

	If !Empty(M->TAF_CODAMB)
		M->TAF_NOMAMB := NGSEEK( 'TNE', M->TAF_CODAMB, 1, 'TNE_NOME' )
	EndIf

	If lVer11
		oPnlLoc := TPanel():New(,,,oDlgLoc,,,,,RGB(255,255,255),,14,.F.,.F.)
		oPnlLoc:Align := CONTROL_ALIGN_BOTTOM


		@ 003, 045 CheckBox oCheckLoc1 Var lChoice1 Prompt OemToAnsi("SIGASGA") On Change SgChanMod(cLocal,1,cDesLoc,,.T.);
																			Size 102,7 Of oPnlLoc Pixel When (nOpc <> 2)

		@ 003, 130 CheckBox oCheckLoc2 Var lChoice2 Prompt OemToAnsi("SIGAMDT") On Change SgChanMod(cLocal,2,cDesLoc,,.T.);
																			Size 102,7 Of oPnlLoc Pixel When (nOpc <> 2)

		@ 003, 205 CheckBox oCheckLoc3 Var lChoice3 Prompt OemToAnsi("SIGAMNT") On Change SgChanMod(cLocal,3,cDesLoc,,.T.);
																			Size 102,7 Of oPnlLoc Pixel When (nOpc <> 2)
	Else
		@ 083, 045 CheckBox oCheckLoc1 Var lChoice1 Prompt OemToAnsi("SIGASGA") On Change SgChanMod(cLocal,1,cDesLoc,,.T.);
																			Size 102,7 Of oDlgLoc Pixel When (nOpc <> 2)

		@ 083, 130 CheckBox oCheckLoc2 Var lChoice2 Prompt OemToAnsi("SIGAMDT") On Change SgChanMod(cLocal,2,cDesLoc,,.T.);
																			Size 102,7 Of oDlgLoc Pixel When (nOpc <> 2)

		@ 083, 205 CheckBox oCheckLoc3 Var lChoice3 Prompt OemToAnsi("SIGAMNT") On Change SgChanMod(cLocal,3,cDesLoc,,.T.);
																			Size 102,7 Of oDlgLoc Pixel When (nOpc <> 2)
	EndIf

	Activate MsDialog oDlgLoc On Init (Sg100Bar( oDlgLoc, nOpcOld, M->TAF_NOMNIV )) Centered

	If lGrava .And. nOpc <> 2
		DbSelectArea(oTree:cArqTree)
		If nOpc == 3
			If (lChoice1 .And. lFstChoice) .Or. (lChoice2 .And. lSndChoice) .Or. (lChoice3 .And. lTrdChoice)
				oTree:AddItem(M->TAF_NOMNIV,cLocal+'LOC ',cFolderA,cFolderB,,, 2)
			EndIf
			DbSelectArea(cTRBSGA)
			RecLock(cTRBSGA,.T.)
			(cTRBSGA)->CODEST  := cCodEst
			(cTRBSGA)->CODPRO  := cLocal
			(cTRBSGA)->DESCRI  := M->TAF_NOMNIV
			(cTRBSGA)->NIVSUP  := SubStr( oTree:GetCargo(), 1, 3 )
			(cTRBSGA)->RESPONS := M->TAF_MAT
			(cTRBSGA)->CC      := M->TAF_CCUSTO
			(cTRBSGA)->CENTRAB := M->TAF_CENTRA
			(cTRBSGA)->DOCFIL  := cFilDoc
			(cTRBSGA)->TIPO    := '2'
			(cTRBSGA)->AMBIE   := M->TAF_CODAMB

			If lChoice1
				(cTRBSGA)->MODSGA  := 'X'
			Else
				(cTRBSGA)->MODSGA  := ' '
			EndIf

			If lChoice2
				(cTRBSGA)->MODMDT  := 'X'
			Else
				(cTRBSGA)->MODMDT  := ' '
			EndIf

			If lChoice3
				(cTRBSGA)->MODMNT  := 'X'
			Else
				(cTRBSGA)->MODMNT  := ' '
			EndIf

			(cTRBSGA)->ORDEM	:= M->TAF_CODNIV //GetUltOrd(cTRBSGA)
			(cTRBSGA)->NIVEL	:= nLevel+1

			If lRetS
				(cTRBSGA)->ETAPA	:= M->TAF_ETAPA
			EndIf

			If lRateio
				(cTRBSGA)->RATEIO  := M->TAF_RATEIO
			EndIf
			If lFamilia
				(cTRBSGA)->CODFAM := M->TAF_CODFAM
			EndIf
			If lDepto
				(cTRBSGA)->DEPTO := M->TAF_DEPTO
			EndIf

			If lSitNiv // Verifica se deve analisar situacao do nivel
				(cTRBSGA)->SITNIV := "1"
				(cTRBSGA)->ATFIL  := "0"
			EndIf

			(cTRBSGA)->OPERAC	:= "I"
			MsUnLock(cTRBSGA)

			aAreaTCJ := GetArea()
			dbSelectArea('TRBTCJ')
			dbSetOrder(1)
			If !dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+"N"+DTOS(dDataBase)+Time())
				RecLock('TRBTCJ',.T.)
				TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
				TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
				TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
				TRBTCJ->DATAPRO := dDataBase
				TRBTCJ->HORAPRO := Time()
				TRBTCJ->TIPROC  := "N"
				TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
				TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
				TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
				TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
				MsUnLock('TRBTCJ')
			EndIf
			RestArea(aAreaTCJ)
		Else
			If (lChoice1 .And. lFstChoice) .Or. (lChoice2 .And. lSndChoice) .Or. (lChoice3 .And. lTrdChoice)
				oTree:ChangePrompt(M->TAF_NOMNIV,cLocal)
			Else
				oTree:TreeSeek((cTRBSGA)->CODPRO)
				oTree:DelItem()
			EndIf
			DbSelectArea(cTRBSGA)
			DbSetOrder(2)
			If DbSeek(cCodEst+cLocal)
				(cTRBSGA)->DESCRI  := M->TAF_NOMNIV
				(cTRBSGA)->RESPONS := M->TAF_MAT
				(cTRBSGA)->CC      := M->TAF_CCUSTO
				(cTRBSGA)->CENTRAB := M->TAF_CENTRA
				(cTRBSGA)->DOCFIL  := cFilDoc
				(cTRBSGA)->AMBIE   := M->TAF_CODAMB

				If lRetS
					(cTRBSGA)->ETAPA := M->TAF_ETAPA
				EndIf
				If lChoice1
					(cTRBSGA)->MODSGA  := 'X'
				Else
					(cTRBSGA)->MODSGA  := ' '
				EndIf

				If lChoice2
					(cTRBSGA)->MODMDT  := 'X'
				Else
					(cTRBSGA)->MODMDT  := ' '
				EndIf

				If lChoice3
					(cTRBSGA)->MODMNT  := 'X'
				Else
					(cTRBSGA)->MODMNT  := ' '
				EndIf
				If lRateio
					(cTRBSGA)->RATEIO  := M->TAF_RATEIO
				EndIf
				If lFamilia
					(cTRBSGA)->CODFAM := M->TAF_CODFAM
				EndIf
				If lDepto
					(cTRBSGA)->DEPTO := M->TAF_DEPTO
				EndIf

				If (lChoice1 <> lSGA .Or. lChoice2 <> lMDT .Or. lChoice3 <> lMNT) .And. NGCADICBASE("TCJ_MODSGA","D","TCJ",.F.)
					aAreaTCJ := GetArea()
					dbSelectArea('TRBTCJ')
					dbSetOrder(1)
					If !dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+"M"+DTOS(dDataBase)+Time())
						RecLock('TRBTCJ',.T.)
						TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
						TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
						TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
						TRBTCJ->DATAPRO := dDataBase
						TRBTCJ->HORAPRO := Time()
						TRBTCJ->TIPROC  := "M"
						TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
						TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
						TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
						TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
						MsUnLock('TRBTCJ')
					EndIf
					RestArea(aAreaTCJ)
				EndIf
			EndIf
		EndIf
		oTree:Refresh()
		oTree:SetFocus()
		dbSelectArea(cTRBTAP)
		dbSetOrder(1)
		dbSeek(cLocal)
		While !eof() .And. (cTRBTAP)->CODNIV == cLocal
			DbSelectArea(cTRBTAK)
			DbSetOrder(1)
			If DbSeek(cLocal+(cTRBTAP)->CODFUN+(cTRBTAP)->MAT)
				RecLock(cTRBTAK,.F.)
			Else
				RecLock(cTRBTAK,.T.)
			EndIf
			(cTRBTAK)->CODNIV := cLocal
			(cTRBTAK)->CODFUN := (cTRBTAP)->CODFUN
			(cTRBTAK)->MAT    := (cTRBTAP)->MAT
			(cTRBTAK)->OPERAC := (cTRBTAP)->OPERAC
			MsUnLock(cTRBTAK)
			dbSelectArea(cTRBTAP)
			dbSkip()
		End
	Else
		Sg100Back()
	EndIf

	oTempTAP:Delete()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Inc
Funcao para incremento do código do nível da estrutura.

@type    function
@author  Rafael Diogo Richter
@since   28/02/2006
@sample  Sg100Inc('')
@param   cLocal, Caractere, Código do local pai

@return  Caractere, Código do novo local
/*/
//-------------------------------------------------------------------
Function Sg100Inc( cLocal )

	Local nPos1 := 0, nPos2 := 0, nPos3 := 0
	Local cCasa1, cCasa2, cCasa3
	Local aLetras   :=	{"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V",;
								"W","X","Y","Z"}

	cCasa1 := SubStr(cLocal,1,1)
	cCasa2 := SubStr(cLocal,2,1)
	cCasa3 := SubStr(cLocal,3,1)
	nPos1 := aScan(aLetras,{|x| x == cCasa1})
	nPos2 := aScan(aLetras,{|x| x == cCasa2})
	nPos3 := aScan(aLetras,{|x| x == cCasa3})

	If nPos3 > 0
		If aLetras[nPos3] == "Z"
		cCasa3 := "0"
		If nPos2 > 0
			If aLetras[nPos2] == "Z"
				cCasa2 := "0"
				If nPos1 > 0
					If aLetras[nPos1] == "Z"
						MsgStop(STR0076+CHR(10)+STR0077, STR0078) //"Limite da Estrutura Organizacional Alcançado!"###"Não é possível incluir mais itens."###"Atenção!"
						cLocal := "***"
						Return cLocal
					Else
						nPos1++
						cCasa1 := aLetras[nPos1]
					EndIf
				ElseIf cCasa1 == "9"
					cCasa1 := "A"
				Else
						cCasa1 := Str(Val(cCasa1)+1)
				EndIf
			Else
				nPos2++
				cCasa2 := aLetras[nPos2]
			EndIf
		ElseIf cCasa2 == "9"
			cCasa2 := "A"
		Else
				cCasa2 := Str(Val(cCasa2)+1)
		EndIf
		Else
		nPos3++
		cCasa3 := aLetras[nPos3]
		EndIf
	ElseIf cCasa3 == "9"
	cCasa3 := "A"
	Else
		cCasa3 := Str(Val(cCasa3)+1)
	EndIf

	cLocal := (AllTrim(cCasa1)+AllTrim(cCasa2)+AllTrim(cCasa3))

Return cLocal

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Auto
Incrementa o numero da estrutura.

@type    function
@author  Thiago Olis Machado
@since   15/09/2003
@sample  Sg100Auto()

@return  Caractere, Código incrementado
/*/
//-------------------------------------------------------------------
Function Sg100Auto()

	Local cAuto := cLocal

	If Inclui
	If lFirst
		cAuto := '001'
		lFirst := .F.
	EndIf
	Else
	TAF->(DbSetOrder(2))
	If TAF->(DbSeek(xFilial('TAF')+cCodEst))
		While !TAF->(Eof()) .And. xFilial('TAF') == TAF->TAF_FILIAL .And.;
				TAF->TAF_CODEST == cCodEst

				cAuto := TAF->TAF_CODNIV
				TAF->(DbSkip())
		End
	EndIf
	EndIf

	If cProc > cAuto
	cAuto := cProc
	EndIf
	cAuto := StrZero( Val( cAuto )+1, 3 )

Return cAuto

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Del
Deleta um item na estrutura

@type    function
@author  Thiago Olis Machado
@since   15/09/2003
@sample  Sg100Del( 35 )
@param   nModulo, Numérico, Número do módulo utilizado

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Del( nModulo )

	Local aChkDel := {{"TAG",2},;
					{"TAV",2},;
					{"TAB",6},;
					{"TBC",2},;
					{"TBJ",2}}
	Local i,k :=1
	Local aAreaTCJ := {}
	Local aTRBSGA := {}
	Local cDesc := ""

	cLocal := SubStr( oTree:GetCargo(), 1, 3 )

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek(cCodEst+cLocal)
	cDesc := AllTrim( ( cTRBSGA )->DESCRI )

	If cLocal == "001"
		MsgStop(STR0079,STR0078) //"Não é possível excluir o 1º item da Estrutura."###"Atenção!"
		Return .F.
	EndIf

	If !MsgYesNo(STR0134+'"'+cDesc+'"? '+STR0165) //"Tem certeza que deseja excluir o nível "xxx" ? Participantes e documentos relacionados tambem serão deletados."
		Return .F.
	EndIf

	For i := 1 to Len(aCHKDEL)
		DbSelectArea(aCHKDEL[i][1])
		OldInd := INDEXORD()
		DbSetOrder(aCHKDEL[i][2])
		cKEY := cLocal
		lDEL := !( DbSeek(xFilial() + '001'+cLocal) )
		DbSetOrder(OldInd)
		If !lDEL
			cError := AllTrim(FwX2Nome( aCHKDEL[i][1] )) + " (" + aCHKDEL[i][1] + ")"
			HELP(" ",1,"NGINTMOD",,cError,5,1)
			Return .F.
			Exit
		EndIf
	Next
	If FindFunction("NGVALSX9")
		dbSelectArea("TAF")
		dbSetOrder(2)
		If dbSeek(xFilial("TAF")+cCodEst+cLocal)
			If !NGVALSX9("TAF",{"TAG","TAV","TAB","TBC","TBJ"},.T.)
				Return .F.
			EndIf
		EndIf
	EndIf

	dbSelectArea("STJ")
	dbSetOrder(2)
	If dbSeek(xFilial("STJ")+"L"+cLocal)
		MsgStop(STR0094+CHR(13)+CHR(10)+STR0095+STJ->TJ_ORDEM,STR0078) //"Esse Item não pode ser excluído pois existe Ordem de Serviço relacionada ao mesmo."###"Ordem: "###"Atenção!"
		Return .F.
	EndIf

	dbSelectArea("STS")
	dbSetOrder(2)
	If dbSeek(xFilial("STS")+"L"+cLocal)
		MsgStop(STR0096+CHR(13)+CHR(10)+STR0095+STS->TS_ORDEM,STR0078) //"Esse Item não pode ser excluído pois existe Histórico de Manutenção relacionado ao mesmo."###"Ordem: "###"Atenção!"
		Return .F.
	EndIf

	dbSelectArea("TQB")
	dbSetOrder(5)
	If dbSeek(xFilial("TQB")+cLocal)
		If TQB->TQB_TIPOSS == "L"
			MsgStop(STR0097+CHR(13)+CHR(10)+STR0098+TQB->TQB_SOLICI,STR0078) //"Esse Item não pode ser excluído pois existe Solicitação de Serviço relacionado ao mesmo."###"Solicitação: "###"Atenção!"
			Return .F.
		EndIf
	EndIf

	aTreeDel := {}
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbGoTop()
	cCodEst := (cTRBSGA)->CODEST
	cCod := cLocal
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst+cCod)
		aAdd(aTreeDel,{(cTRBSGA)->CODPRO, (cTRBSGA)->TIPO, (cTRBSGA)->DESCRI, (cTRBSGA)->NIVSUP})
		aSize(aTreeDel,Len(aTreeDel))
	EndIf

	k:= 1
	While k <= Len(aTreeDel)
		nPos := aScan(aItensCar, {|x| x == aTreeDel[k][1]})
		If nPos > 0
			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbSeek(cCodEst+aTreeDel[k][1])
			While !Eof() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == aTreeDel[k][1]
				aAdd(aTreeDel,{(cTRBSGA)->CODPRO,(cTRBSGA)->TIPO,(cTRBSGA)->DESCRI, (cTRBSGA)->NIVSUP})
				aSize(aTreeDel,Len(aTreeDel))
				dbSelectArea(cTRBSGA)
				dbSetOrder(1)
				dbSkip()
			End
		Else
			oTree:TreeSeek(aTreeDel[k][1])
			SG100VChg()
			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbSeek(cCodEst+aTreeDel[k][1])
			While !Eof() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == aTreeDel[k][1]
				aAdd(aTreeDel,{(cTRBSGA)->CODPRO,(cTRBSGA)->TIPO,(cTRBSGA)->DESCRI, (cTRBSGA)->NIVSUP})
				aSize(aTreeDel,Len(aTreeDel))
				dbSelectArea(cTRBSGA)
				dbSetOrder(1)
				dbSkip()
			End
		EndIf
		For i := 1 to Len(aCHKDEL)
			DbSelectArea(aCHKDEL[i][1])
			OldInd := INDEXORD()
			DbSetOrder(aCHKDEL[i][2])
			cKEY := aTreeDel[k][1]
			lDEL := !( DbSeek(xFilial() + '001'+aTreeDel[k][1]) )
			DbSetOrder(OldInd)
			If !lDEL
				cError := AllTrim(FwX2Nome( aCHKDEL[i][1] )) + " (" + aCHKDEL[i][1] + ")"
				HELP(" ",1,"NGINTMOD",,cError,5,1)
				Return .F.
				Exit
			EndIf
		Next
		dbSelectArea("STJ")
		dbSetOrder(2)
		If dbSeek(xFilial("STJ")+"L"+aTreeDel[k][1])
			MsgStop(STR0099+CHR(13)+CHR(10)+STR0100+AllTrim(aTreeDel[k][1])+" - "+AllTrim(aTreeDel[k][3]),STR0082) //"Existem itens abaixo desse nível que não podem ser excluídos"###"Item: "###"Atenção"
			Return .F.
		EndIf
		dbSelectArea("STS")
		dbSetOrder(2)
		If dbSeek(xFilial("STS")+"L"+aTreeDel[k][1])
			MsgStop(STR0099+CHR(13)+CHR(10)+STR0100+AllTrim(aTreeDel[k][1])+" - "+AllTrim(aTreeDel[k][3]),STR0082) //"Existem itens abaixo desse nível que não podem ser excluídos"###"Item: "###"Atenção"
			Return .F.
		EndIf
		dbSelectArea("TQB")
		dbSetOrder(5)
		If dbSeek(xFilial("TQB")+aTreeDel[k][1])
			If TQB->TQB_TIPOSS == "L"
				MsgStop(STR0099+CHR(13)+CHR(10)+STR0100+AllTrim(aTreeDel[k][1])+" - "+AllTrim(aTreeDel[k][3]),STR0082) //"Existem itens abaixo desse nível que não podem ser excluídos"###"Item: "###"Atenção"
				Return .F.
			EndIf
		EndIf
		k++
	End

	oTree:TreeSeek(cLocal)
	oTree:DelItem()
	oTree:Refresh()
	oTree:SetFocus()
	k:=1
	For k:=1 to Len(aTreeDel)
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek(cCodEst+aTreeDel[k][1])
			RecLock(cTRBSGA,.F.)
			(cTRBSGA)->DELETADO := 'X'
			MsUnLock(cTRBSGA)

			aAreaTCJ := GetArea()
			dbSelectArea('TRBTCJ')
			dbSetOrder(1)
			If !dbSeek(aTreeDel[k][1]+aTreeDel[k][4]+"E"+DTOS(dDataBase)+Time())
				RecLock("TRBTCJ",.T.)
				TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
				TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
				TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
				TRBTCJ->DATAPRO := dDataBase
				TRBTCJ->HORAPRO := Time()
				TRBTCJ->TIPROC  := "E"
				TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
				TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
				TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
				TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
				MsUnLock("TRBTCJ")
			EndIf
			RestArea(aAreaTCJ)
		EndIf
	Next k

	If ExistBlock("SGAA1004")
		ExecBlock("SGAA1004",.F.,.F.)
	EndIf

	cPosNivel := SubStr(oTree:GetCargo(),1,3)

	dbSeek("001"+cPosNivel)
	cPosNivel := (cTRBSGA)->NIVSUP
	oTree:TreeSeek(cPosNivel)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100ExFil
Exclui os filhos do item excluído.

@type    function
@author  Rafael Diogo Richter
@since   15/08/2008
@sample  Sg100ExFil( '001' )
@param   cCodPai, Caractere, Código do nível pai

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100ExFil( cCodPai )

	Local aAreaTCJ := {}
	Local nTRBSGA

	RecLock(cTRBSGA,.F.)
	(cTRBSGA)->DELETADO := 'X'
	MsUnLock(cTRBSGA)

	aAreaTCJ := GetArea()
	dbSelectArea('TRBTCJ')
	dbSetOrder(1)
	If !dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+"E"+DTOS(dDataBase)+Time())
		RecLock('TRBTCJ',.T.)
		TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
		TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
		TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
		TRBTCJ->DATAPRO := dDataBase
		TRBTCJ->HORAPRO := Time()
		TRBTCJ->TIPROC  := "E"
		TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
		TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
		TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
		TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
		MsUnLock('TRBTCJ')
	EndIf
	RestArea(aAreaTCJ)


	dbSelectArea(cTRBSGA)
	dbSetOrder(1)
	dbSeek(cCodEst+cCodPai)
	While !Eof() .And. (cTRBSGA)->NIVSUP == cCodPai
		nTRBSGA := (cTRBSGA)->(Recno())

		RecLock(cTRBSGA,.F.)
		(cTRBSGA)->DELETADO := 'X'
		MsUnLock(cTRBSGA)

		aAreaTCJ := GetArea()
		dbSelectArea('TRBTCJ')
		dbSetOrder(1)
		If !dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+"E"+DTOS(dDataBase)+Time())
			RecLock('TRBTCJ',.T.)
			TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
			TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
			TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
			TRBTCJ->DATAPRO := dDataBase
			TRBTCJ->HORAPRO := Time()
			TRBTCJ->TIPROC  := "E"
			TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
			TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
			TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
			TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
			MsUnLock('TRBTCJ')
		EndIf
		RestArea(aAreaTCJ)

		dbSelectArea(cTRBSGA)
		If dbSeek(cCodEst+(cTRBSGA)->CODPRO)
			Sg100ExFil((cTRBSGA)->CODPRO)
		EndIf

		dbSelectArea(cTRBSGA)
		dbGoto(nTRBSGA)
		dbSkip()
	End

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Back
Volta o incremento do codigo do nível

@type    function
@author  Thiago Olis Machado
@since   15/09/2003
@sample  Sg100Back()

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Back()

	cLocal := StrZero( Val( cLocal )-1, 3 )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100CodEs
Busca o código da estrutura.

@type    function
@author  Thiago Olis Machado
@since   17/09/2003
@sample  Sg100CodEs()

@return  Carcatere, Código encontrado
/*/
//-------------------------------------------------------------------
Function Sg100CodEs()

	Local cAutoNumerado := '000'

	TAF->(DbGotop())
	Do While !TAF->(Eof()) .And. xFilial("TAF") == TAF->TAF_FILIAL

	cAutoNumerado := TAF->TAF_CODEST
	TAF->(dbSkip())
	EndDo

Return StrZero( Val( cAutoNumerado )+1, 3 )

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Grava
Grava as informacoes da estrutura

@type    function
@author  Thiago Olis Machado
@since   18/09/2003
@sample  Sg100Grava( oDlg, 4, .F. )

@param   oDlg, Objeto, Objeto onde cria a janela
@param   nOpcx, Numérico, Opção selecionada
@param   lFim, Lógico, Verdadeiro se for para sair da tela após a gravação

@return  return_type, return_descr
/*/
//-------------------------------------------------------------------
Function Sg100Grava( oDlg, nOpcx, lFim )

	Local i := 1
	Local lDel    := .F.
	Local lAchou  := .F.
	Local lAltDes := .F.
	Local cCodEst := "001"
	Local cCCusto
	Local cCentra

	Local aAreaTRB := GetArea()
	Local aAreaTAF := {}
	Local aNivel   := {} // Array com os niveis que foram modificados caso um registro tenha sido incluido ao mesmo tempo

	Default lFim := .T.

	If lInclui .Or. lAltera .Or. lExclui
		DbselectArea(cTRBSGA)
		dbSetOrder(2)
		DbGoTop()
		While (cTRBSGA)->(!Eof())

			lAchou := .F.
			lDel := .F.
			lAltDes := .F.
			cCodEst:= (cTRBSGA)->CODEST

			If (cTRBSGA)->OPERAC == "I" .And. (cTRBSGA)->CODPRO == "001"
				If !SgRotina()
					MsgInfo(STR0026) //"Ja existe uma Estrutura Organizacional cadastrada"
					Return .T.
				EndIf
			EndIf

			DbSelectArea("TAF")
			DbSetOrder(2)
			If !DbSeek(xFilial("TAF")+(cTRBSGA)->CODEST+(cTRBSGA)->CODPRO) .And. !Empty((cTRBSGA)->DELETADO)
				dbSelectArea(cTRBSGA)
				dbSkip()
				Loop
			Else
				If (cTRBSGA)->OPERAC <> "I"
					DbSelectArea("TAF")
					DbSetOrder(2)
					If DbSeek(xFilial("TAF")+ (cTRBSGA)->CODEST+ (cTRBSGA)->CODPRO)
					lAchou := .T.
					If !Empty( (cTRBSGA)->DELETADO )

							dbSelectArea("TAK")
							dbSetOrder(1)
							dbSeek(xFilial("TAK")+"001"+(cTRBSGA)->CODPRO)
							While !eof() .And. TAK->TAK_FILIAL+"001"+TAK->TAK_CODNIV == xFilial("TAK")+"001"+(cTRBSGA)->CODPRO
								aAreaTAK := GetArea()
								RecLock("TAK",.F.)
								dbDelete()
								MsUnlock("TAK")
								RestArea(aAreaTAK)
								dbSelectArea("TAK")
								dbSkip()
							End
							// Exclui Bem/Localizacao da Restrição de Acesso
							If FindFunction("NGDeleteTUB")
								NGDeleteTUB()
							EndIf

							RecLock("TAF",.F.)
							DbDelete()

							cCodNiv := (cTRBSGA)->CODPRO
							lDel := .T.
					Else
							RecLock("TAF",.F.)
							lAltDes := .F.

							If Alltrim(TAF->TAF_NOMNIV) <> AllTrim((cTRBSGA)->DESCRI)
								lAltDes := .T.
							EndIf

					EndIf
					EndIf
				EndIf
				If !lAchou //Inclusão
					//Acha o ultimo registro da tabela
					cCodNiv := "000"
					#IFDEF TOP
						cAliasQry := GetNextAlias()
						cQuery := " SELECT MAX(TAF.TAF_CODNIV) CODMAX FROM "+RetSqlName("TAF")+" TAF "
						cQuery += " WHERE TAF.TAF_FILIAL = '"+xFilial("TAF")+"'"
						cQuery := ChangeQuery(cQuery)
						MPSysOpenQuery( cQuery , cAliasQry )

						dbSelectArea(cAliasQry)
						dbGoTop()
						If !Eof()
							cCodNiv := (cAliasQry)->CODMAX
						EndIf
						(cAliasQry)->(dbCloseArea())

					#ELSE
						dbSelectArea("TAF")
						dbSetOrder(1)
						While !Eof() .And. TAF->TAF_FILIAL == xFilial("TAF")
							cCodNiv := TAF->TAF_CODNIV
						End
					#EndIf

					If cCodNiv != "000" .And. !Empty(cCodNiv)
						If FindFunction("Soma1Old")
							cCodNiv := Soma1Old(AllTrim(cCodNiv),3)
							aADD( aNivel,{cCodNiv, (cTRBSGA)->CODPRO })
						Else
							cCodNiv := Soma1(AllTrim(cCodNiv),3)
							aADD( aNivel,{cCodNiv, (cTRBSGA)->CODPRO })
						EndIf
					Else
						cCodNiv := "001"
					EndIf

					RecLock("TAF",.T.)
				EndIf

				If !lDel
					Replace TAF_FILIAL With xFilial('TAF')
					Replace TAF_CODEST With (cTRBSGA)->CODEST

					If !lAchou
						Replace TAF_CODNIV  With cCodNiv
					Else
						Replace TAF_CODNIV With (cTRBSGA)->CODPRO
						cCodNiv := (cTRBSGA)->CODPRO
					EndIf

					Replace TAF_NOMNIV With (cTRBSGA)->DESCRI
					Replace TAF_NIVEL  With (cTRBSGA)->NIVEL

					nPos := aScan(aNivel,{ |x| Trim(Upper(x[2])) == (cTRBSGA)->NIVSUP})
					If nPos > 0
						Replace TAF_NIVSUP With aNivel[nPos][1]
						(cTRBSGA)->NIVSUP := aNivel[nPos][1]
					Else
						Replace TAF_NIVSUP With (cTRBSGA)->NIVSUP
					EndIf

					Replace TAF_MAT    With (cTRBSGA)->RESPONS
					Replace TAF_INDCON With (cTRBSGA)->TIPO
					Replace TAF_CODCON With (cTRBSGA)->CODTIPO
					Replace TAF_CCUSTO With (cTRBSGA)->CC
					Replace TAF_CENTRA With (cTRBSGA)->CENTRAB
					Replace TAF_MODSGA With (cTRBSGA)->MODSGA
					Replace TAF_MODMNT With (cTRBSGA)->MODMNT
					Replace TAF_MODMDT With (cTRBSGA)->MODMDT
					Replace TAF_ORDEM  With (cTRBSGA)->ORDEM
					Replace TAF_CODAMB with (cTRBSGA)->AMBIE

					If lRetS
						Replace TAF_ETAPA  With (cTRBSGA)->ETAPA
					EndIf

					If lRateio
						Replace TAF_RATEIO  With (cTRBSGA)->RATEIO
					EndIf

					If lFamilia
						Replace TAF_CODFAM With (cTRBSGA)->CODFAM
					EndIf

					If lDepto
						Replace TAF_DEPTO With (cTRBSGA)->DEPTO
					EndIf

					If lSitNiv // Verifica se deve analisar situacao do nivel
						Replace TAF_SITNIV  With (cTRBSGA)->SITNIV
				EndIf

				EndIf

				aAreaTRB := GetArea()
				MsUnLock("TAF")

				// Verifica se houve alteracao da situacao do nivel
				If lSitNiv .And. (cTRBSGA)->ATFIL == "1"
					aAreaTAF := TAF->(GetArea())
					DbSelectArea("TAF")
					DbSetOrder(2)
					If DbSeek(xFilial("TAF") + (cTRBSGA)->CODEST + (cTRBSGA)->CODPRO)
						VrfSitFil( TAF->(Recno()), TAF->TAF_SITNIV, .T. )
					EndIf
					RestArea(aAreaTAF)
				EndIf

				If !lDel
					//-----------------------------------------------
					// Inclui Bem/Localizacao na Restricao de Acesso
					//-----------------------------------------------
					If !lAchou .And. FindFunction("NGInsertTUB")
						NGInsertTUB()
					EndIf

					//-----------------------------------------------
					// Altera Centro de Custo e Centro de Trabalho
					// do Bem de acordo com a Localizacao Pai
					//-----------------------------------------------
					cCCusto := (cTRBSGA)->CC
					cCentra := (cTRBSGA)->CENTRAB
					If TAF->TAF_INDCON == "1" //Bem
						dbSelectArea("ST9")
						dbSetOrder(1)
						If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
							cCCusto  := ST9->T9_CCUSTO
							cCentra  := ST9->T9_CENTRAB
							If ST9->T9_MOVIBEM != 'N' //Permite movimentacao de CC
								aTrbArea := (cTRBSGA)->(GetArea())
								dbSelectArea(cTRBSGA)
								dbSetOrder(2)
								If dbSeek("001"+(cTRBSGA)->NIVSUP+cFilAnt)
									cCCusto := (cTRBSGA)->CC
									cCentra := (cTRBSGA)->CENTRAB
								EndIf

								If !Empty(cCCusto) .And. (ST9->T9_CCUSTO != cCCusto .Or. ST9->T9_CENTRAB != cCentra)
									NGRETCC(ST9->T9_CODBEM,dDataBase,cCCusto,cCentra,__cHora,"D","",.F.)
									//Deleta TPN "temporaria" criada anteriormente
									dbSelectArea("TPN")
									dbSetOrder(1)
									dbSeek(xFilial("TPN")+ST9->T9_CODBEM+DTOS(dDataBase)+__cHora)
									dbSkip(-1)
									If !Eof() .And. xFilial("TPN") == TPN->TPN_FILIAL .And. TPN->TPN_CODBEM == ST9->T9_CODBEM .And. ;
										cCCusto == TPN->TPN_CCUSTO .And. cCentra == TPN->TPN_CTRAB
										dbSkip()
										RecLock("TPN",.F.)
										dbDelete()
										MsUnLock()
									EndIf
								EndIf
								If Empty(cCCusto)
									cCCusto := ST9->T9_CCUSTO
									cCentra := ST9->T9_CENTRAB
								EndIf

								RestArea(aTrbArea)
							EndIf
						EndIf

					EndIf

					//-------------------------------------------------
					// Altera Bem/Localizacao na Restricao de Acesso
					//-------------------------------------------------
					If lAchou .And. FindFunction("NGAlterTUB")
						NGAlterTUB(cCCusto,cCentra)

						If TAF->TAF_INDCON == '2' .And. (cCCusto != TAF->TAF_CCUSTO .Or. cCentra != TAF->TAF_CENTRA)
							RecLock("TAF",.F.)
							TAF->TAF_CCUSTO := cCCusto
							TAF->TAF_CENTRA := cCentra
							MsUnLock("TAF")
							//Atualiza centro de custo
							dbSelectArea(cTRBSGA)
							RecLock(cTRBSGA,.F.)
							(cTRBSGA)->CC := cCCusto
							(cTRBSGA)->CENTRAB := cCentra
							MsUnLock(cTRBSGA)
							dbSelectArea("TAF")
						EndIf
					EndIf
				EndIf

				If lAltDes .And. NGCADICBASE("TCJ_CODNIV","D","TCJ",.F.)
					dbSelectArea("TCJ")
					dbSetOrder(1)
					dbSeek(xFilial("TCJ")+TAF->TAF_CODNIV)
					While !Eof() .And. TCJ->TCJ_FILIAL == xFilial("TCJ") .And. TCJ->TCJ_CODNIV == TAF->TAF_CODNIV
						RecLock("TCJ",.F.)
						TCJ->TCJ_DESNIV := TAF->TAF_NOMNIV
						MsUnLock("TCJ")
						dbSelectArea("TCJ")
						dbSetOrder(1)
						dbSkip()
					End
				EndIf

				dbSelectArea(cTRBTAK)
				dbSetOrder(1)
				dbSeek((cTRBSGA)->CODPRO)
				While !EoF() .And. (cTRBTAK)->CODNIV == (cTRBSGA)->CODPRO
					If lAchou .And. !Empty((cTRBSGA)->DELETADO)
						dbSelectArea("TAK")
						dbSetOrder(1)
						If dbSeek(xFilial("TAK")+"001"+(cTRBSGA)->CODPRO+(cTRBTAK)->MAT)
							RecLock("TAK",.F.)
							dbDelete()
							MsUnlock("TAK")
						EndIf
					ElseIf lAchou
						dbSelectArea("TAK")
						dbSetOrder(1)
						If dbSeek(xFilial("TAK")+"001"+(cTRBTAK)->CODNIV+(cTRBTAK)->MAT)
							If (cTRBTAK)->OPERAC <> "S"
								RecLock("TAK",.F.)
								dbDelete()
								MsUnlock("TAK")
							EndIf
						Else
							If (cTRBTAK)->OPERAC == "S"
								RecLock("TAK",.T.)
								TAK->TAK_FILIAL := xFilial("TAK")
								TAK->TAK_CODEST := "001"
								TAK->TAK_CODNIV := (cTRBSGA)->CODPRO
								TAK->TAK_CODFUN := (cTRBTAK)->CODFUN
								TAK->TAK_MAT    := (cTRBTAK)->MAT
								MsUnlock("TAK")
							EndIf
						EndIf
					Else
						If (cTRBTAK)->OPERAC == "S"
							dbSelectArea("TAK")
							RecLock("TAK",.T.)
							TAK->TAK_FILIAL := xFilial("TAK")
							TAK->TAK_CODEST := "001"
							TAK->TAK_CODNIV := cCodNiv
							TAK->TAK_CODFUN := (cTRBTAK)->CODFUN
							TAK->TAK_MAT    := (cTRBTAK)->MAT
							MsUnlock("TAK")
						EndIf
					EndIf

					dbSelectArea(cTRBTAK)
					dbSkip()
				End

				RestArea(aAreaTRB)

				If NGCADICBASE("TCJ_CODNIV","D","TCJ",.F.)
					dbSelectArea("TRBTCJ")
					dbSetOrder(1)
					dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP)
					While !Eof() .And. (cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP == TRBTCJ->CODNIV+TRBTCJ->NIVSUP

						dbSelectArea("TCJ")
						dbSetOrder(1)
						If !dbSeek(xFilial("TCJ")+cCodNiv+TRBTCJ->NIVSUP+TRBTCJ->TIPROC+DTOS(TRBTCJ->DATAPRO)+TRBTCJ->HORAPRO)
							RecLock("TCJ",.T.)
							TCJ->TCJ_FILIAL := xFilial("TCJ")
							TCJ->TCJ_CODNIV := cCodNiv

							nPos := aScan(aNivel,{ |x| Trim(Upper(x[2])) == TRBTCJ->NIVSUP})
							If nPos > 0
								TCJ->TCJ_NIVSUP := aNivel[nPos][1]
							Else
								TCJ->TCJ_NIVSUP := TRBTCJ->NIVSUP
							EndIf

							TCJ->TCJ_DESNIV := (cTRBSGA)->DESCRI
							TCJ->TCJ_DATA   := TRBTCJ->DATAPRO
							TCJ->TCJ_HORA   := TRBTCJ->HORAPRO
							TCJ->TCJ_TIPROC := TRBTCJ->TIPROC

							If NGCADICBASE("TCJ_MODSGA","D","TCJ",.F.)
								TCJ->TCJ_MODSGA	:= TRBTCJ->MODSGA
								TCJ->TCJ_MODMDT	:= TRBTCJ->MODMDT
								TCJ->TCJ_MODMNT	:= TRBTCJ->MODMNT
								TCJ->TCJ_NIVEL	:= TRBTCJ->NIVEL
							EndIf
							MsUnLock("TCJ")
						EndIf

						dbSelectArea("TRBTCJ")
						dbSkip()
					End
				EndIf
				RestArea(aAreaTRB)
			EndIf
			DbSelectArea(cTRBSGA)
			DbSkip()
		End
	EndIf

	If ExistBlock("SGAA1002")
		ExecBlock("SGAA1002",.F.,.F.)
	EndIf

	dbSelectArea(cTRBSGA)
	ZAP

	dbSelectArea("TRBTCJ")
	ZAP

	dbSelectArea(cTRBTAK)
	ZAP

	If lFim
		oDlg:End()
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Tree
Monta a estrutura apartir do arquivo TAF

@type    function
@author  Thiago Olis Machado
@since   19/09/2003
@sample  Sg100Tree( .F., 'Teste', 5, {} )

@param   lEnd, Lógico, Verdadeiro de for para finalizar a tela
@param   cPai, Caractere, Código do nível pai
@param   nMod, Numérico, nMod, Numérico, Modulo a ser carregado 3-SGA; 4-MNT; 5-MDT
@param   aNivMrk, Array, Níveis da estrutura

@return  Objeto, Estrutura da árvore
/*/
//-------------------------------------------------------------------
Function Sg100Tree( lEnd, cPai, nMod, aNivMrk )

	Local cCodSup
	Local cCodNiv
	Local cCargoP
	Local cFldI01
	Local cFldI02
	Local lAtivo
	Local lAllIntv
	Local lShowIntv
	Local cBmp
	Local lBmp      := IsInCallStack("Sg110Pro")
	Local lDepto    := NGCADICBASE( "TAF_DEPTO", "A" , "TAF" , .F. )
	Local lRetS     := NGCADICBASE('TAF_ETAPA','A','TAF',.F.)
	Local lRateio   := NGCADICBASE('TAF_RATEIO','D','TAF',.F.)
	Local lFamilia  := NGCADICBASE('TAF_CODFAM','D','TAF',.F.)
	Local aArea     := GetArea()
	Local nMaxNvl   := 1

	Private cCargo  := 'LOC'

	Default aNivMrk := { { _NoVrfSit } } // Define por default, que todos os niveis serao apresentados, indiferente da situacao

	aItensCar := {}
	cFolderA  := "FOLDER10" // Folder Verde Fechado
	cFolderB  := "FOLDER11" // Folder Verde Aberto
	cBmp      := SetBmpTree(lBmp)
	lAllIntv  := aScan( aNivMrk, {|x| x[1] == _NoVrfSit } ) > 0 // Verifica se todos os niveis inativos serao apresentados

	// Verifica se deve analisar situacao do nivel, e se nem todos os niveis inativos serao apresentados
	If lSitNiv .And. !lAllIntv
		SetNivPai( @aNivMrk ) // Define que os pais inativos serao apresentados
	EndIf

	DbSelectArea(cTRBSGA)
	DbSetOrder(2)
	If !dbSeek(cCodEst+TAF->TAF_CODNIV)
		RecLock(cTRBSGA,.T.)
		(cTRBSGA)->CODEST  := cCodEst
		(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
		(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV //cDesc
		(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP //cNivSup
		(cTRBSGA)->RESPONS := TAF->TAF_MAT	  //cMat
		(cTRBSGA)->TIPO    := TAF->TAF_INDCON //cIndCon
		(cTRBSGA)->CODTIPO := TAF->TAF_CODCON //cCodCon
		(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL //cFilDoc
		(cTRBSGA)->CC      := TAF->TAF_CCUSTO //cCC
		(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA //cCT
		(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA //cModSga
		(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT //cModMnt
		(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT //cModMdt
		(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM  //cOrdem
		(cTRBSGA)->NIVEL   := 1
		(cTRBSGA)->OPERAC  := "A"
		(cTRBSGA)->AMBIE   := TAF->TAF_CODAMB

		If lRetS
			(cTRBSGA)->ETAPA := TAF->TAF_ETAPA
		EndIf

		If lRateio
			(cTRBSGA)->RATEIO := IIF(Empty(TAF->TAF_RATEIO),'2',TAF->TAF_RATEIO)
		EndIf
		If lFamilia
			(cTRBSGA)->CODFAM := TAF->TAF_CODFAM
		EndIf
		If lSitNiv // Verifica se deve analisar situacao do nivel
			(cTRBSGA)->SITNIV := TAF->TAF_SITNIV
			(cTRBSGA)->ATFIL := "0"
		EndIf
		If lDepto
			(cTRBSGA)->DEPTO := TAF->TAF_DEPTO //cDepto
		EndIf

		MsUnLock(cTRBSGA)
	EndIf

	cBmp := SetBmpTree(lBmp)
	DbAddTree oTree Prompt cDesc Opened Resource cFolderA, cFolderB Cargo cPai+cCargo+cBmp

	cPai:="001"
	cPaiMnt := "001"
	cPaiMdt := "001"

	DbSelectArea('TAF')
	DbSetOrder(1)
	DbSeek(xFilial('TAF')+cCodEst+cPai)
	While !TAF->(Eof()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And. TAF->TAF_NIVSUP == cPai

		If lEnd
			@ Prow()+1,001 PSay STR0080 //"CANCELADO PELO OPERADOR"
			Exit
		EndIf

		If TAF->TAF_INDCON == '0' //Ilustracao - Planta Grafica
			TAF->(DbSkip())
			Loop
		EndIf

		//Verifica se o modulo cadastrado eh compativel com o selecionado
		If nMod == 3 .And. Empty(TAF->TAF_MODSGA)
			TAF->(DbSkip())
			Loop
		EndIf

		If nMod == 4 .And. Empty(TAF->TAF_MODMNT)
			TAF->(DbSkip())
			Loop
		EndIf

		If nMod == 5 .And. Empty(TAF->TAF_MODMDT)
			TAF->(DbSkip())
			Loop
		EndIf

		// Verifica se o nivel é inativo, e se deve apresentar itens inativos
		If lSitNiv .And. TAF->TAF_SITNIV == "2" .And. ( !lAllIntv .And. !ShowIntv( TAF->TAF_CODNIV, aNivMrk ) )
			TAF->(DbSkip())
			Loop
		EndIf

		If TAF->TAF_INDCON == '1'

			dbSelectArea("ST9")
			dbSetOrder(1)
			If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
				If ST9->T9_SITBEM == "I" .Or. ST9->T9_SITBEM == "T"
					TAF->(dbSkip())
					Loop
				EndIf
			Else
				TAF->(dbSkip())
				Loop
			EndIf
			cCargo   := 'BEM'
			cFolderA := 'FOLDER5'
			cFolderB := 'FOLDER6'
		ElseIf TAF->TAF_INDCON == '2'
			cCargo := 'LOC'
			cFolderA := 'FOLDER10'
			cFolderB := 'FOLDER11'
		ElseIf TAF->TAF_INDCON == '3'
			cCargo := 'FUN'
			cFolderA := 'FOLDER14'
			cFolderB := 'FOLDER15'
		Else
			cCargo := 'TAR'
			cFolderA := 'FOLDER12'
			cFolderB := 'FOLDER13'
		EndIf

		If FindFunction("NGValidTUA") .And. !NGValidTUA()
			TAF->(dbSkip())
			Loop
		EndIf

		DbSelectArea(cTRBSGA)
		DbSetOrder(2)
		RecLock(cTRBSGA,.T.)
		(cTRBSGA)->CODEST  := cCodEst
		(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
		(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV //cDesc
		(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP //cNivSup
		(cTRBSGA)->RESPONS := TAF->TAF_MAT	  //cMat
		(cTRBSGA)->TIPO    := TAF->TAF_INDCON //cIndCon
		(cTRBSGA)->CODTIPO := TAF->TAF_CODCON //cCodCon
		(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL //cFilDoc
		(cTRBSGA)->CC      := TAF->TAF_CCUSTO //cCC
		(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA //cCT
		(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA //cModSga
		(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT //cModMnt
		(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT //cModMdt
		(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM  //cOrdem
		(cTRBSGA)->NIVEL   := 2
		(cTRBSGA)->OPERAC  := "A"
		(cTRBSGA)->AMBIE   := TAF->TAF_CODAMB

		If lRetS
			(cTRBSGA)->ETAPA	 := TAF->TAF_ETAPA
		EndIf

		If lRateio
			(cTRBSGA)->RATEIO  := IIF(Empty(TAF->TAF_RATEIO),'2',TAF->TAF_RATEIO)
		EndIf
		If lFamilia
			(cTRBSGA)->CODFAM := TAF->TAF_CODFAM
		EndIf
		If lSitNiv // Verifica se deve analisar situacao do nivel
			(cTRBSGA)->SITNIV  := TAF->TAF_SITNIV
			(cTRBSGA)->ATFIL  := "0"
		EndIf
		If lDepto
			(cTRBSGA)->DEPTO   := TAF->TAF_DEPTO //cDepto
		EndIf

		MsUnlock(cTRBSGA)
		TAF->(DbSkip())
	End

	#IFDEF TOP
		cAliasQry := GetNextAlias()
		cQuery := " SELECT COUNT(*) nCount FROM "+RetSqlName("TAF")+" TAF "
		cQuery += " WHERE TAF.TAF_FILIAL = '"+xFilial("TAF")+"' AND TAF.TAF_NIVSUP = '001' AND TAF.D_E_L_E_T_ <> '*'"
		cQuery := ChangeQuery(cQuery)
		MPSysOpenQuery( cQuery , cAliasQry )

		dbSelectArea(cAliasQry)
		dbGoTop()
		If !Eof()
			ProcRegua((cAliasQry)->nCount)
		EndIf
		(cAliasQry)->(dbCloseArea())
	#EndIf

	dbSelectArea(cTRBSGA)
	dbSetOrder(5)
	nNivel		:= 2
	nMaxNivel	:= 2

	While nNivel<=nMaxNivel

		dbSelectArea(cTRBSGA)
		dbSeek(cCodEst+Str(nNivel,2,0))
		While !Eof() .And. nNivel==(cTRBSGA)->NIVEL

			aArea := GetArea()
			IncProc() // Incrementa regua de processamento

			cFilho:=(cTRBSGA)->CODPRO
			lAtivo := !lSitNiv .Or. (cTRBSGA)->SITNIV <> "2"

			// Define cor dos folders conforme sua situacao [ Ativo / Inativo ]
			SetTpNiv( (cTRBSGA)->TIPO, 2, lAtivo ) // Define variaveis de controle para tree

			If nMod == 3 .And. Empty((cTRBSGA)->MODSGA)
				dbSelectArea(cTRBSGA)
				dbSkip()
				Loop
			EndIf

			If nMod == 4 .And. Empty((cTRBSGA)->MODMNT)
				dbSelectArea(cTRBSGA)
				dbSkip()
			EndIf

			If nMod == 5 .And. Empty((cTRBSGA)->MODMDT)
				dbSelectArea(cTRBSGA)
				dbSkip()
				Loop
			EndIf

			cCodSup := (cTRBSGA)->NIVSUP
			cCodNiv := (cTRBSGA)->CODPRO

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCodSup)

			If (cTRBSGA)->TIPO == '1'
				cCargoP := 'BEM'
			ElseIf (cTRBSGA)->TIPO == '2'
				cCargoP := 'LOC'
			ElseIf (cTRBSGA)->TIPO == '3'
				cCargoP := 'FUN'
			Else
				cCargoP := 'TAR'
			EndIf

			oTree:TreeSeek((cTRBSGA)->CODPRO+cCargoP)

			nPos := aScan(aItensCar, {|x| x == (cTRBSGA)->CODPRO+cCargoP})
			If nPos == 0
				Aadd(aItensCar,(cTRBSGA)->CODPRO+cCargoP)
			EndIf

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCodNiv)

			cBmp := SetBmpTree(lBmp)
			oTree:AddItem( (cTRBSGA)->DESCRI, (cTRBSGA)->CODPRO + cCargo + cBmp, cFolderA, cFolderB, , , 2 )

			dbSelectArea('TAF')
			dbSetOrder(1)
			If dbSeek(xFilial('TAF')+cCodEst+cCodNiv)
				While !TAF->(Eof()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And. TAF->TAF_NIVSUP == cCodNiv

					//Verifica se o modulo cadastrado eh compativel com o selecionado

					If TAF->TAF_INDCON == '0' //Ilustracao - Planta Grafica
						TAF->(DbSkip())
						Loop
					EndIf

					If nMod == 3 .And. Empty(TAF->TAF_MODSGA)
						dbSelectArea("TAF")
						dbSkip()
						Loop
					EndIf

					If nMod == 4 .And. Empty(TAF->TAF_MODMNT)
						dbSelectArea("TAF")
						dbSkip()
						Loop
					EndIf

					If nMod == 5 .And. Empty(TAF->TAF_MODMDT)
						dbSelectArea("TAF")
						dbSkip()
						Loop
					EndIf

					// Verifica se o nivel é inativo, e se deve apresentar itens inativos
					If lSitNiv .And. TAF->TAF_SITNIV == "2" .And. ( !lAllIntv .And. !ShowIntv( TAF->TAF_CODNIV, aNivMrk ) )
						dbSelectArea("TAF")
						TAF->(DbSkip())
						Loop
					EndIf

					oTree:TreeSeek((cTRBSGA)->CODPRO+cCargo)

					lAtivo := !lSitNiv .Or. TAF->TAF_SITNIV <> "2"

					SetTpNiv( TAF->TAF_INDCON, 2, lAtivo ) // Define variaveis de controle para tree

					If TAF->TAF_INDCON == '1'
						dbSelectArea("ST9")
						dbSetOrder(1)
						If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
							If ST9->T9_SITBEM == "I" .Or. ST9->T9_SITBEM == "T"
								dbSelectArea("TAF")
								dbSkip()
								Loop
							EndIf
						Else
							dbSelectArea("TAF")
							dbSkip()
							Loop
						EndIf
					EndIf

					If FindFunction("NGValidTUA") .And. !NGValidTUA()
						dbSelectArea("TAF")
						dbSkip()
						Loop
					EndIf

					nRec:=(cTRBSGA)->(RECNO())

					DbSelectArea(cTRBSGA)
					RecLock(cTRBSGA,.T.)
					(cTRBSGA)->CODEST  := cCodEst
					(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
					(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV //cDesc
					(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP //cNivSup
					(cTRBSGA)->RESPONS := TAF->TAF_MAT	  //cMat
					(cTRBSGA)->TIPO    := TAF->TAF_INDCON //cIndCon
					(cTRBSGA)->CODTIPO := TAF->TAF_CODCON //cCodCon
					(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL //cFilDoc
					(cTRBSGA)->CC      := TAF->TAF_CCUSTO //cCC
					(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA //cCT
					(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA //cModSga
					(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT //cModMnt
					(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT //cModMdt
					(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM  //cOrdem
					(cTRBSGA)->AMBIE   := TAF->TAF_CODAMB //cAmbin

					If lRetS
						(cTRBSGA)->ETAPA	 := TAF->TAF_ETAPA
					EndIf

					If lRateio
						(cTRBSGA)->RATEIO  := TAF->TAF_RATEIO
					EndIf
					If lFamilia
						(cTRBSGA)->CODFAM := TAF->TAF_CODFAM
					EndIf
					If lSitNiv // Verifica se deve analisar situacao do nivel
						(cTRBSGA)->SITNIV   := TAF->TAF_SITNIV
						(cTRBSGA)->ATFIL  := "0"
					EndIf
					If lDepto
						(cTRBSGA)->DEPTO   := TAF->TAF_DEPTO //cDepto
					EndIf

					(cTRBSGA)->OPERAC	:= "A"
					(cTRBSGA)->NIVEL   := nNivel+1
					(cTRBSGA)->(DbGoto(nRec))

					cBmp := SetBmpTree(lBmp)
					oTree:AddItem( TAF->TAF_NOMNIV, TAF->TAF_CODNIV + cCargo + cBmp, cFolderA, cFolderB, , , 2 )
					Exit
				End
			EndIf
			RestArea(aArea)

			dbSelectArea(cTRBSGA)
			dbSetOrder(5)
			DbSkip()
		End
		nNivel++
	End

	nMaxNvl := nNivel

	DbEndTree oTree

	dbSelectArea(cTRBSGA)
	dbSetOrder(5)
	If (cTRBSGA)->(RecCount()) > 0

		While nMaxNvl >= 1

			dbSeek("001"+Str(nMaxNvl,2,0))
			While (cTRBSGA)->NIVEL == nMaxNvl

				If (cTRBSGA)->TIPO == '1'
					cCargo   := 'BEM'
				ElseIf (cTRBSGA)->TIPO == '2'
					cCargo := 'LOC'
				ElseIf (cTRBSGA)->TIPO == '3'
					cCargo := 'FUN'
				Else
					cCargo := 'TAR'
				EndIf

				oTree:TreeSeek((cTRBSGA)->CODPRO+cCargo)

				oTree:PtCollapse()
				(cTRBSGA)->(dbSkip())
			End
			nMaxNvl--
		End
	EndIf

Return oTree

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100ArTre
Monta a estrutura apartir da array aDbInfo

@type    function
@author  Thiago Olis Machado
@since   23/09/2003
@sample  Sg100ArTre()

@param   cPai, Caractere, Código do nível pai
@param   nMod, Numérico, nMod, Numérico, Modulo a ser carregado 3-SGA; 4-MNT; 5-MDT

@return  Objeto, Estrutura da árvore
/*/
//-------------------------------------------------------------------
Function Sg100ArTre( cPai, nMod )

	Local cCodSup, cCodNiv, cCargoP
	Local nMaxNvl
	Private cCargo := 'LOC'

	cFolderA := "FOLDER10" // Folder Verde Fechado
	cFolderB := "FOLDER11" // Folder Verde Aberto

	DbAddTree oTree Prompt cDesc Opened Resource cFolderA, cFolderB Cargo cPai+cCargo+' '

	cPai:="001"
	DbSelectArea(cTRBSGA)
	DbSetOrder(5)
	nNivel		:=2
	nMaxNivel	:=99

	ProcRegua(RecCount())
	While nNivel<=nMaxNivel

		dbSeek(cCodEst+Str(nNivel,2,0))

		If (cTRBSGA)->NIVEL = 0
		Exit
		EndIf

		IncProc()

		While !(cTRBSGA)->(Eof()) .And. nNivel==(cTRBSGA)->NIVEL

			cFilho:=(cTRBSGA)->CODPRO

			SetTpNiv( (cTRBSGA)->TIPO, 2, !lSitNiv .Or. (cTRBSGA)->SITNIV <> "2" ) // Define variaveis de controle para tree

			If nMod == 3 .And. Empty( (cTRBSGA)->MODSGA	 )
			(cTRBSGA)->(DbSkip())
			Loop
			EndIf

			If nMod == 4 .And. Empty( (cTRBSGA)->MODMNT	 )
				(cTRBSGA)->(DbSkip())
				Loop
			EndIf

			If nMod == 5 .And. Empty( (cTRBSGA)->MODMDT	 )
				(cTRBSGA)->(DbSkip())
				Loop
			EndIf

			If !Empty((cTRBSGA)->DELETADO)
				(cTRBSGA)->(DbSkip())
				Loop
			EndIf

			cCodSup := (cTRBSGA)->NIVSUP
			cCodNiv := (cTRBSGA)->CODPRO

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCodSup)

			If (cTRBSGA)->TIPO == '1'
				cCargoP := 'BEM'
			ElseIf (cTRBSGA)->TIPO == '2'
				cCargoP := 'LOC'
			ElseIf (cTRBSGA)->TIPO == '3'
				cCargoP := 'FUN'
			Else
				cCargoP := 'TAR'
			EndIf

			oTree:TreeSeek((cTRBSGA)->CODPRO+cCargoP)

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCodNiv)
			oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargo+' ',cFolderA,cFolderB,,, 2)

			dbSelectArea(cTRBSGA)
			dbSetOrder(5)

			(cTRBSGA)->(DbSkip())
		End
		nNivel++
	End
	nMaxNvl := nNivel

	DbEndTree oTree

	dbSelectArea(cTRBSGA)
	dbSetOrder(5)
	If (cTRBSGA)->(RecCount()) > 0
		While nMaxNvl >= 1
			dbSeek("001"+Str(nMaxNvl,2,0))
			While (cTRBSGA)->NIVEL == nMaxNvl
				If (cTRBSGA)->TIPO == '1'
					cCargo   := 'BEM'
				ElseIf (cTRBSGA)->TIPO == '2'
					cCargo := 'LOC'
				ElseIf (cTRBSGA)->TIPO == '3'
					cCargo := 'FUN'
				Else
					cCargo := 'TAR'
				EndIf

				oTree:TreeSeek((cTRBSGA)->CODPRO+cCargo)
				oTree:PtCollapse()
				(cTRBSGA)->(dbSkip())
			End
			nMaxNvl--
		End
	EndIf

Return oTree

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Bem
Inclui Bem na estrutura

@type    function
@author  Thiago Olis Machado
@since   24/09/2003
@sample  Sg100Bem( 4 )
@param   nOpc, Numérico, Opção selecionada

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Bem(nOpc)

	Local aAreaTCJ := {}
	Local nLevel  := 0

	Private oDlgBem, oNomeBem
	Private cNomeBem := Space( Len( ST9->T9_NOME ) ) // Nome do Bem
	Private cCodBem  := Space( Len( ST9->T9_CODBEM ) ) // Codigo do Bem
	Private cRateio := ' '

	If nOpc == 3
		If SubStr( oTree:GetCargo(), 4, 3 ) <> 'LOC'
			Return Nil
		EndIf

		nLevel := (cTRBSGA)->NIVEL

		If cLocal == "000"
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbGoBottom()

			cLocal := TAF->TAF_CODNIV
			If Empty(cLocal)
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbGoBottom()
				cLocal := (cTRBSGA)->CODPRO
			EndIf

			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf

		Else
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbGoBottom()

			cLocal := (cTRBSGA)->CODPRO
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf

		EndIf

	Else
	cLocal   := SubStr( oTree:GetCargo(), 1, 3 )

	DbSelectArea('TAF')
	DbSetOrder(2)
	If DbSeek(xFilial('TAF')+cCodEst+cLocal)
		nLevel := TAF->TAF_NIVEL
			cCodBem := TAF->TAF_CODCON
	Else
			dbSelectArea(cTRBSGA)
			dbSetOrder(02)
			DbSeek(cCodEst+cLocal)
		nLevel := (cTRBSGA)->NIVEL
			cCodBem := (cTRBSGA)->CODTIPO
	EndIf

		cNomeBem := NGSEEK("ST9",cCodBem,1,"ST9->T9_NOME")
	If lRateio
		aOldArea := GetArea()
		dbSelectArea(cTRBSGA)
		dbSetOrder(02)
		DbSeek(cCodEst+cLocal)
			cRateio  := IIF((cTRBSGA)->RATEIO='1',"Sim","Nao")
			RestArea(aOldArea)
		EndIf

	EndIf

	lGrava := .F.

	Define MsDialog oDlgBem From 03.5,6 To 160,580 Title STR0012 Pixel //"Bem"

	@ 20,008 Say OemToAnsi(STR0013) Size 37,7 Of oDlgBem Pixel  //"Cod. Estrutura"
	@ 18,047 MsGet cLocal  Size 038,08 Of oDlgBem Pixel When .F.

	@ 35,008 Say OemToAnsi(STR0014)  Size 37,7 Of oDlgBem Pixel //"Codigo Bem"
	@ 33,047 MsGet cCodBem Size 065,08 Of oDlgBem Pixel Picture "@!";
												Valid ExistCpo("ST9", cCodBem) .And.;
												Sg100NoBem(cCodBem) F3 "ST9" HasButton When (nOpc <> 2)

	@ 33,115 MsGet oNomeBem Var cNomeBem Size 160,08 Of oDlgBem Pixel When .F.
	If ExistBlock("SGAA1003")
		ExecBlock("SGAA1003",.F.,.F.)
	EndIf

	Define sButton From 055,200 Type 1 Enable Of oDlgBem Action If(ExistCpo("ST9", cCodBem),(lGrava := .T.,oDlgBem:End()),)
	Define sButton From 055,230 Type 2 Enable Of oDlgBem Action (lGrava := .F., oDlgBem:End())

	Activate MsDialog oDlgBem Centered

	If lGrava .And. nOpc <> 2
		If nOpc == 3
			dbSelectArea(cTRBSGA)
			dbSetOrder(3)
			If dbSeek("1"+cCodBem)
				While !eof() .And. (cTRBSGA)->TIPO+(cTRBSGA)->CODTIPO == "1"+cCodBem
					If Empty((cTRBSGA)->DELETADO)
						Help(" ",1,"JAEXISTINF")
						Return .F.
					EndIf
					dbSelectArea(cTRBSGA)
					dbSkip()
				End
			Else
				dbSelectArea("TAF")
				dbSetOrder(6)
				If dbSeek(xFilial("TAF")+"X"+"1"+cCodBem)
					Help(" ",1,"JAEXISTINF")
					Return .F.
				EndIf
			EndIf
			oTree:AddItem(cCodBem+Space(4)+cNomeBem,cLocal+'BEM ','FOLDER5','FOLDER6',,, 2)
			DbSelectArea(cTRBSGA)
			RecLock(cTRBSGA,.T.)
			(cTRBSGA)->CODEST  := cCodEst
			(cTRBSGA)->CODPRO  := cLocal
			(cTRBSGA)->DESCRI  := cCodBem+Space(4)+cNomeBem
			(cTRBSGA)->NIVSUP  := SubStr( oTree:GetCargo(), 1, 3 )
			(cTRBSGA)->TIPO    := '1'
			(cTRBSGA)->CODTIPO := cCodBem
			(cTRBSGA)->MODMNT  := 'X'
			(cTRBSGA)->ORDEM	 := cLocal
			(cTRBSGA)->OPERAC	:= "I"
			(cTRBSGA)->NIVEL	:= nLevel+1
			MsUnLock(cTRBSGA)

			aAreaTCJ := GetArea()
			dbSelectArea('TRBTCJ')
			dbSetOrder(1)
			If !dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+"N"+DTOS(dDataBase)+Time())
				RecLock('TRBTCJ',.T.)
				TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
				TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
				TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
				TRBTCJ->DATAPRO := dDataBase
				TRBTCJ->HORAPRO := Time()
				TRBTCJ->TIPROC  := "N"
				TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
				TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
				TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
				TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
				MsUnLock('TRBTCJ')
			EndIf
			RestArea(aAreaTCJ)
		Else
			oTree:ChangePrompt(cCodBem+Space(4)+cNomeBem,cLocal)
			DbSelectArea(cTRBSGA)
			DbSetOrder(2)
			If DbSeek(cCodEst+cLocal)
				RecLock(cTRBSGA,.F.)
				(cTRBSGA)->CODTIPO := cCodBem
				MsUnLock(cTRBSGA)
			EndIf
		EndIf
		If lRateio
			RecLock(cTRBSGA,.F.)
			(cTRBSGA)->RATEIO := IIF(cRateio="Sim",'1','2')
			MsUnLock(cTRBSGA)
		EndIf

		oTree:Refresh()
		oTree:SetFocus()
	Else
		Sg100Back()
	EndIf

	cRateio := ' '

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100NoBem
Busca o nome do Bem

@type    function
@author  Thiago Olis Machado
@since   24/09/2003
@sample  Sg100NoBem( '001' )
@param   cBem, Caractere, Código do bem

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100NoBem( cBem )

	ST9->(dbSeek(xFilial('ST9')+cBem))
	If ST9->T9_SITBEM == "I"
		MsgStop(STR0090,STR0078) //"Este bem se encontra Inativo no sistema."###"Atenção!"
		Return .F.
	EndIf
	If ST9->T9_SITBEM == "T"
		MsgStop(STR0091,STR0078) //"Este bem foi Transferido desta filial."###"Atenção!"
		Return .F.
	EndIf
	cNomeBem := ST9->T9_NOME
	oNomeBem:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100NomCC
Busca o nome do Centro de Custo

@type    function
@author  Thiago Olis Machado
@since   29/04/2004
@sample  Sg100NomCC( '001' )
@param   cCC, Caractere, Código do centro de custo

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100NomCC( cCC )

	SI3->(DbSeek(xFilial('SI3')+cCC))
	cNomeCC := SI3->I3_DESC
	oNomeCC:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100NomCT
Busca o nome do Centro de Trabalho

@type    function
@author  Thiago Olis Machado
@since   26/05/2004
@sample  Sg100NomCT( '001' )
@param   cCT, Caractere, Código do centro de trabalho

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100NomCT( cCT )

	SHB->(DbSeek(xFilial('SHB')+cCT))
	cNomeCT := SHB->HB_NOME
	oNomeCT:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100DbClick
Busca o nome do Bem

@type    function
@author  Thiago Olis Machado
@since   24/09/2003
@sample  Sg100DbClick( 4 )
@param   nOpcao, Numérico, Operação sendo feita

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100DbClick( nOpcao )

	Local cModSga := ''
	Local cModMnt := ''
	Local cModMdt := ''

	Default nOpcao := 4

	If !lAltera
		nOpcao := 2
	EndIf

	If lFstChoice
	cModSga := 'X'
	ElseIf lSndChoice
	cModMdt := 'X'
	Else
	cModMnt := 'X'
	EndIf

	If SubStr( oTree:GetCargo(), 4, 3 ) == 'LOC'
	Sg100Local(cModSga,cModMnt,cModMdt,nOpcao)
	ElseIf SubStr( oTree:GetCargo(), 4, 3 ) == 'BEM'
	Sg100Bem(nOpcao)
	ElseIf SubStr( oTree:GetCargo(), 4, 3 ) == 'TAR'
	Sg100Tar(nOpcao)
	ElseIf SubStr( oTree:GetCargo(), 4, 3 ) == 'FUN'
	Sg100Fun(nOpcao)
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Tar
Inclui Tarefa na Estrutura

@type    function
@author  Thiago Olis Machado
@since   29/09/2003
@sample  Sg100Tar(4)
@param   nOpc, Numérico, Operação sendo feita

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Tar( nOpc )

	Local oDlgTar
	Local aAreaTCJ := {}
	Local nLevel
	Private cCodTar  := Space( Len( TN5->TN5_CODTAR ) ) // Codigo da Tarefa
	Private cNomeTar := Space( Len( TN5->TN5_NOMTAR ) ) // Nome da Tarefa
	Private oNomeTar

	If nOpc == 3
		nLevel := (cTRBSGA)->NIVEL
		If SubStr( oTree:GetCargo(), 4, 3 ) == 'TAR'
		Return Nil
		EndIf

		If cLocal == "000"
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbGoBottom()
			cLocal := TAF->TAF_CODNIV
			If Empty(cLocal)
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbGoBottom()
				cLocal := (cTRBSGA)->CODPRO
			EndIf
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf
		Else
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbGoBottom()
			cLocal := (cTRBSGA)->CODPRO
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf
		EndIf

	Else
	DbSelectArea('TAF')
	DbSetOrder(2)
	If DbSeek(xFilial('TAF')+cCodEst+cLocal)
		nLevel := TAF->TAF_NIVEL
	Else
		nLevel := (cTRBSGA)->NIVEL
	EndIf
	cLocal   := SubStr( oTree:GetCargo(), 1, 3 )
	cCodTar  := SubStr( oTree:GetPrompt(), 1, 6 )
	cNomeTar := SubStr( oTree:GetPrompt(), 7, 30 )
	EndIf

	Define MsDialog oDlgTar From 03.5,6 To 160,580 Title STR0010 Pixel //"Tarefa"

	@ 20,008 Say OemToAnsi(STR0013) Size 37,7 Of oDlgTar Pixel  //"Cod. Estrutura"
	@ 18,047 MsGet cLocal  Size 038,08 Of oDlgTar Pixel When .F.

	@ 35,008 Say OemToAnsi(STR0015)  Size 37,7 Of oDlgTar Pixel //"Codigo Tarefa"
	@ 33,047 MsGet cCodTar Size 038,08 Of oDlgTar Pixel Picture "@!";
												Valid ExistCpo("TN5", cCodTar) .And.;
												Sg100NoTar(cCodTar) F3 "TN5" HasButton When (nOpc <> 2)

	@ 33,100 MsGet oNomeTar Var cNomeTar Size 160,08 Of oDlgTar Pixel When .F.

	Define sButton From 055,200 Type 1 Enable Of oDlgTar Action If(ExistCpo("TN5", cCodTar),(lGrava := .T.,oDlgTar:End()),)
	Define sButton From 055,230 Type 2 Enable Of oDlgTar Action (lGrava := .F., oDlgTar:End())

	Activate MsDialog oDlgTar Centered

	If lGrava .And. nOpc <> 2
		If nOpc == 3
			oTree:AddItem(cCodTar+' '+cNomeTar,cLocal+'TAR ','FOLDER12','FOLDER13',,, 2)
			DbSelectArea(cTRBSGA)
			RecLock(cTRBSGA,.T.)
			(cTRBSGA)->CODEST  := cCodEst
			(cTRBSGA)->CODPRO  := cLocal
			(cTRBSGA)->DESCRI  := cCodTar+cNomeTar
			(cTRBSGA)->NIVSUP  := SubStr( oTree:GetCargo(), 1, 3 )
			(cTRBSGA)->TIPO    := '4'
			(cTRBSGA)->CODTIPO := cCodTar
			(cTRBSGA)->MODMDT  := 'X'
			(cTRBSGA)->ORDEM   := cLocal
			(cTRBSGA)->OPERAC	:= "I"
			(cTRBSGA)->NIVEL  := nLevel+1
			MsUnLock(cTRBSGA)

			aAreaTCJ := GetArea()
			dbSelectArea('TRBTCJ')
			dbSetOrder(1)
			If !dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+"N"+DTOS(dDataBase)+Time())
				RecLock('TRBTCJ',.T.)
				TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
				TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
				TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
				TRBTCJ->DATAPRO := dDataBase
				TRBTCJ->HORAPRO := Time()
				TRBTCJ->TIPROC  := "N"
				TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
				TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
				TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
				TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
				MsUnLock('TRBTCJ')
			EndIf
			RestArea(aAreaTCJ)
		Else
			oTree:ChangePrompt(cCodTar+' '+cNomeTar,cLocal)
			DbSelectArea(cTRBSGA)
			DbSetOrder(2)
			If DbSeek(cCodEst+cLocal)
				(cTRBSGA)->CODTIPO := cCodTar
			EndIf
		EndIf
		If lRateio
			(cTRBSGA)->RATEIO := IIF(cRateio="Sim",'1','2')
		EndIf

		oTree:Refresh()
		oTree:SetFocus()
	Else
		Sg100Back()
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100NoTar
Busca o nome da Tarefa

@type    function
@author  Thiago Olis Machado
@since   24/09/2003
@sample  Sg100NoTar( '001' )
@param   cCodTar, Caractere, Código da tarefa

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100NoTar( cCodTar )

	TN5->(dbSeek(xFilial('TN5')+cCodTar))
	cNomeTar := TN5->TN5_NOMTAR
	oNomeTar:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Fun
Inclui Funcao na Estrutura

@type    function
@author  Thiago Olis Machado
@since   24/09/2003
@sample  Sg100Fun( 4 )
@param   nOpc, Numérico, Operação sendo feita

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Fun( nOpc )

	Local oDlgFun
	Local aAreaTCJ := {}
	Local nLevel
	Private cCodFun  := Space( Len( SRJ->RJ_FUNCAO ) ) // Codigo da Funcao
	Private cNomeFun := Space( Len( SRJ->RJ_DESC   ) ) // Nome da Funcao
	Private oNomeFun

	If nOpc == 3
		nLevel := (cTRBSGA)->NIVEL
		If SubStr( oTree:GetCargo(), 4, 3 ) <> 'LOC'
		Return Nil
		EndIf

		If cLocal == "000"
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbGoBottom()
			cLocal := TAF->TAF_CODNIV
			If Empty(cLocal)
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbGoBottom()
				cLocal := (cTRBSGA)->CODPRO
			EndIf
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf
		Else
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbGoBottom()
			cLocal := (cTRBSGA)->CODPRO
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf
		EndIf

	Else
	DbSelectArea('TAF')
	DbSetOrder(2)
	If DbSeek(xFilial('TAF')+cCodEst+cLocal)
		nLevel := TAF->TAF_NIVEL
	Else
		nLevel := (cTRBSGA)->NIVEL
	EndIf
	cLocal   := SubStr( oTree:GetCargo(), 1, 3 )
	cCodFun  := SubStr( oTree:GetPrompt(), 1, 9 )
	cNomeFun := SubStr( oTree:GetPrompt(), 6, 30 )
	EndIf

	Define MsDialog oDlgFun From 03.5,6 To 160,580 Title STR0011 Pixel //"Funcao"

	@ 20,008 Say OemToAnsi(STR0013) Size 37,7 Of oDlgFun Pixel  //"Cod. Estrutura"
	@ 18,047 MsGet cLocal  Size 038,08 Of oDlgFun Pixel When .F.

	@ 35,008 Say OemToAnsi(STR0016)  Size 37,7 Of oDlgFun Pixel //"Codigo Funcao"
	@ 33,047 MsGet cCodFun Size 038,08 Of oDlgFun Pixel Picture "@!";
												Valid ExistCpo("SRJ", cCodFun) .And.;
												Sg100NoFun(cCodFun) F3 "SRJ" HasButton When (nOpc <> 2)

	@ 33,100 MsGet oNomeFun Var cNomeFun Size 160,08 Of oDlgFun Pixel When .F.

	Define sButton From 055,200 Type 1 Enable Of oDlgFun Action If(ExistCpo("SRJ", cCodFun),(lGrava := .T.,oDlgFun:End()),)
	Define sButton From 055,230 Type 2 Enable Of oDlgFun Action (lGrava := .F., oDlgFun:End())

	Activate MsDialog oDlgFun Centered

	If lGrava .And. nOpc <> 2
	If nOpc == 3
			oTree:AddItem(cCodFun+' '+cNomeFun,cLocal+'FUN ','FOLDER14','FOLDER15',,, 2)
			DbSelectArea(cTRBSGA)
			RecLock(cTRBSGA,.T.)
			(cTRBSGA)->CODEST  := cCodEst
			(cTRBSGA)->CODPRO  := cLocal
			(cTRBSGA)->DESCRI  := cCodFun+cNomeFun
			(cTRBSGA)->NIVSUP  := SubStr( oTree:GetCargo(), 1, 3 )
			(cTRBSGA)->TIPO    := '3'
			(cTRBSGA)->CODTIPO := cCodFun
			(cTRBSGA)->MODMDT  := 'X'
			(cTRBSGA)->ORDEM	 := cLocal
			(cTRBSGA)->OPERAC	:= "I"
			(cTRBSGA)->NIVEL   := nLevel+1
			MsUnLock(cTRBSGA)

			aAreaTCJ := GetArea()
			dbSelectArea('TRBTCJ')
			dbSetOrder(1)
			If !dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+"N"+DTOS(dDataBase)+Time())
				RecLock('TRBTCJ',.T.)
				TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
				TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
				TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
				TRBTCJ->DATAPRO := dDataBase
				TRBTCJ->HORAPRO := Time()
				TRBTCJ->TIPROC  := "N"
				TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
				TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
				TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
				TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
				MsUnLock('TRBTCJ')
			EndIf
			RestArea(aAreaTCJ)
	Else
		oTree:ChangePrompt(cCodFun+' '+cNomeFun,cLocal)
		DbSelectArea(cTRBSGA)
		DbSetOrder(2)
		If DbSeek(cCodEst+cLocal)
			(cTRBSGA)->CODTIPO := cCodFun
		EndIf
	EndIf
	If lRateio
		(cTRBSGA)->RATEIO := IIF(cRateio="Sim",'1','2')
	EndIf

	oTree:Refresh()
	oTree:SetFocus()
	Else
	Sg100Back()
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100NoFun
Busca o nome da Função

@type    function
@author  Thiago Olis Machado
@since   29/09/2003
@sample  Sg100NoFun( '001' )
@param   cCodFun, Carcatere, Código da função

@return  Lógico, Sempre verdadeiros
/*/
//-------------------------------------------------------------------
Function Sg100NoFun( cCodFun )

	SRJ->(dbSeek(xFilial('SRJ')+cCodFun))
	cNomeFun := SRJ->RJ_DESC
	oNomeFun:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100ChkFi
Busca por filhos do pai que sera alterado

@type    function
@author  Thiago Olis Machado
@since   24/09/2003
@sample  Sg100ChkFi( '001', 5, 'Teste',  )

@param   cLocal, Caractere, Código do local
@param   nMod, Numérico, nMod, Numérico, Modulo a ser carregado 3-SGA; 4-MNT; 5-MDT
@param   cDesc, Caractere, Decrição do nível
@param   nTipo, Numérico, Tipo do nível
@param   lFirst, Lógico, Se for o primeiro nível

@return  Lógico, Sempre verdadeiros
/*/
//-------------------------------------------------------------------
Function Sg100ChkFi( cLocal, nMod, cDesc, nTipo, lFirst )

	Local lRet := .T.,nRecno

	If lFirst
	aFilhosLoc := {}
	aFilhosOut := {}
	EndIf

	DbSelectArea(cTRBSGA)
	DbSetOrder(1)
	DbSeek(cCodEst+cLocal)

	While (cTRBSGA)->(!Eof()) .And. (cTRBSGA)->NIVSUP == cLocal

			If !Empty((cTRBSGA)->DELETADO)
			DbSelectArea(cTRBSGA)
			DbSkip()
			Loop
		EndIf

		nRecno := (cTRBSGA)->(Recno())
		cFilho := (cTRBSGA)->CODPRO
		If DbSeek(cCodEst+(cTRBSGA)->CODPRO)
			If (cTRBSGA)->NIVSUP == cFilho
				Sg100ChkFi((cTRBSGA)->NIVSUP,,(cTRBSGA)->DESCRI,(cTRBSGA)->TIPO,.F.)
			EndIf
		EndIf

		DbSelectArea(cTRBSGA)
		DbGoto(nRecno)
		If (cTRBSGA)->TIPO == '2'
			aAdd( aFilhosLoc, { (cTRBSGA)->CODPRO,(cTRBSGA)->DESCRI } )
			Else
			aAdd( aFilhosOut, { (cTRBSGA)->CODPRO,(cTRBSGA)->DESCRI,(cTRBSGA)->TIPO } )
		EndIf

		DbSelectArea(cTRBSGA)
		DbSkip()
	End

	If Len( aFilhosOut ) > 0
		If nMod = 2
		If aFilhosOut[1][3] == '3' .Or. aFilhosOut[1][3] == '4' .And. !lChoice2
			MsgStop(STR0024) //"Nao sera possivel desmarcar o modulo atual pois ele possui filhos relacionados"
			lRet := .F.
		EndIf
		ElseIf nMod = 3
		If aFilhosOut[1][3] == '1' .And. !lChoice3
			MsgStop(STR0024) //"Nao sera possivel desmarcar o modulo atual pois ele possui filhos relacionados"
			lRet := .F.
		EndIf
		EndIf
	EndIf

	If !lRet
		lChoice1 := aOpc[1][1]
		lChoice2 := aOpc[1][2]
		lChoice3 := aOpc[1][3]
		oCheckLoc1:Refresh()
		oCheckLoc2:Refresh()
		oCheckLoc3:Refresh()
		Return .F.
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} SgMsg
Mostra mensagem com escolha para usuário quando o bem tiver filhos

@type    function
@author  Thiago Olis Machado
@since   24/09/2003
@sample  SgMsg()

@return  Lógico, Verdadeiro quando o usuário confrmar a tela
/*/
//-------------------------------------------------------------------
Function SgMsg()

	Local oDlgMsg,oRadio
	Local nRadio := 1,nOpc := 1
	Local lRet := .T.

	Define MsDialog oDlgMsg From 03.5,6 To 150,320 Title STR0017 Pixel //"Atencao"
	DEFINE FONT oBold NAME "Courier New" SIZE 0, -13 BOLD
	@ 0, 0 BITMAP oBmp RESNAME "PROJETOAP" oF oDlgMsg SIZE 35,250 NOBORDER WHEN .F. PIXEL

	@ 10,040 Say OemToAnsi(STR0029) Size 117,7 Of oDlgMsg Pixel  Font oBold  //"Esse local possui filhos. "
	@ 17,040 Say OemToAnsi(STR0030) Size 117,7 Of oDlgMsg Pixel  Font oBold  //"O que deseja fazer ?"

	@ 28,048 Radio oRadio Var nRadio Items STR0019, STR0020 3d Size 70,10 Of oDlgMsg Pixel //"Repassar todos os filhos"###"Escolher os filhos"

	Define sButton From 055,090 Type 1 Enable Of oDlgMsg Action (lGrava := .T.,oDlgMsg:End())
	Define sButton From 055,120 Type 2 Enable Of oDlgMsg Action (lGrava := .F.,oDlgMsg:End())

	Activate MsDialog oDlgMsg Centered

	If !lGrava
	lRet := .F.
	Else
	If nRadio == 1
		Sg100AllFi(nRadio)
	Else
		Sg100AlgFi(nRadio)
	EndIf
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100AllFi
Função que marca todos os filhos com a opção do pai.

@type    function
@author  Thiago Olis Machado
@since   03/10/2003
@sample  Sg100AllFi( 1 )
@param   nRadio, Numérico, Opção selecionada pelo usuário

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100AllFi( nRadio )

	Local ix

	For ix := 1 To Len( aFilhosLoc )
		DbSelectArea(cTRBSGA)
		DbSetOrder(2)
		If DbSeek( cCodEst+aFilhosLoc[ix][1] )
		RecLock(cTRBSGA,.F.)
		(cTRBSGA)->MODSGA := If(lChoice1,'X',' ')
		(cTRBSGA)->MODMDT := If(lChoice2,'X',' ')
		(cTRBSGA)->MODMNT := If(lChoice3,'X',' ')
		MsUnLock(cTRBSGA)
		EndIf
	Next ix

	aFilhosLoc := {}

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100AlgFi
Funcao que mostra todos os filhos que podem ser copiados para outra
estrutura para o usuario escolher.

@type    function
@author  Thiago Olis Machado
@since   03/10/2003
@sample  Sg100AlgFi( 1 )
@param   nRadio, Numérico, Opção selecionada pelo usuário

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100AlgFi( nRadio )

	Local oDlgAlg,oMark, oTemp100X
	Local nOpcx := 2
	Local iy

	aDbf := {}
	aAdd(aDBF,{ "TRB_OK"       , "C" ,02, 0 })
	aAdd(aDBF,{ "TRB_CODIGO"   , "C" ,03, 0 })
	aAdd(aDBF,{ "TRB_DESCRI"   , "C" ,40, 0 })

	oTemp100X := FWTemporaryTable():New( "TRBX", aDBF )
	oTemp100X:AddIndex( "1", {"TRB_CODIGO"} )
	oTemp100X:Create()

	aMark := {}

	aAdd(aMark,{"TRB_OK"       ,NIL," ",})
	aAdd(aMark,{"TRB_CODIGO"   ,NIL,STR0021 ,})   //"Cod Processo"
	aAdd(aMark,{"TRB_DESCRI"   ,NIL,STR0022    ,})   //"Descricao"

	lInverte:= .F.
	cMarca  := GetMark()
	lQuery  := .T.

	For iy := 2 To Len( aFilhosLoc )

		DbSelectArea('TRBX')
		DbSetOrder(1)
		If !DbSeek( aFilhosLoc[iy][1] )
		RecLock('TRBX',.T.)
			TRBX->TRB_OK      := ''
			TRBX->TRB_CODIGO  := aFilhosLoc[iy][1]
			TRBX->TRB_DESCRI  := aFilhosLoc[iy][2]
			MsUnLock('TRBX')

		EndIf
	Next iy

	TRBX->(DbGotop())

	Define MsDialog oDlgAlg Title STR0023 From 6.5,0 To 28,80 Of oMainWnd //"Filhos"

	oMark       := MsSelect():New("TRBX","TRB_OK",,aMark,@lInverte,@cMarca,{35,1,143,315})
	oMark:oBrowse:lHasMark = .F.
	oMark:oBrowse:lCanAllMark := .T.

	Activate MsDialog oDlgAlg On Init EnchoiceBar(oDlgAlg,{|| nOpcx := 1,oDlgAlg:End()},{|| nOpcx := 2,oDlgAlg:End()}) Centered

	If nOpcx == 1
	DbSelectArea(cTRBSGA)
	DbSetOrder(2)
	If DbSeek( cCodEst+aFilhosLoc[1][1] )
		RecLock(cTRBSGA,.F.)
		(cTRBSGA)->MODSGA := If(lChoice1,'X',' ')
		(cTRBSGA)->MODMDT := If(lChoice2,'X',' ')
		(cTRBSGA)->MODMNT := If(lChoice3,'X',' ')
		MsUnLock(cTRBSGA)
	EndIf

	DbSelectArea('TRBX')
	DbGotop()
	Do While !Eof()
		If !Empty( TRBX->TRB_OK )

			DbSelectArea(cTRBSGA)
			DbSetOrder(2)
			If DbSeek( cCodEst+TRBX->TRB_CODIGO )
				RecLock(cTRBSGA,.F.)
				(cTRBSGA)->MODSGA := If(lChoice1,'X',' ')
				(cTRBSGA)->MODMDT := If(lChoice2,'X',' ')
				(cTRBSGA)->MODMNT := If(lChoice3,'X',' ')
				MsUnLock(cTRBSGA)
			EndIf
		EndIf
		DbSelectArea('TRBX')
		DbSkip()
	EndDo
	EndIf

	//Deleta o arquivo temporario fisicamente
	oTemp100X:Delete()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100NomLoc
Funcao para montar a tela com os documentos.

@type    function
@author  Thiago Olis Machado
@since   05/04/2004
@sample  Sg100NomLoc( '001' )
@param   cRespon, Caractere, Código do responsável

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100NomLoc( cRespon )

	QAA->(dbSeek(xFilial('QAA')+cRespon))
	cNomeRes:= QAA->QAA_NOME
	oNomeRes:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Bar
EnchoiceBar especifica do Sgaa100

@type    function
@author  Thiago Olis Machado
@since   06/09/2001
@sample  Sg100Bar( oDlg, 4, 'Teste' )

@param   oDlg, Objeto,  Objeto onde cria a janela
@param   nOpc, Numérico, Operação sendo feita
@param   cDesNiv, Caractere, descrição do nível

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Bar( oDlg, nOpc, cDesNiv )

	Local bSet15, bSet24
	Private oBar

	Define ButtonBar oBar Size 25,25 3D Top Of oDlg

	Define BUTTON oBtnRec RESOURCE "S4WB006N"   OF oBar	     ACTION NaoDisp()	 //PROMPT STR0031 TOOLTIP STR0031 //"Recortar"###"Recortar"
	oBtnRec:cToolTip := OemToAnsi(STR0031)//"Recortar"
	Define BUTTON oBtnCop RESOURCE "S4WB005N"   OF oBar       ACTION NaoDisp() 	 //PROMPT STR0032 TOOLTIP STR0032 //"Copiar"###"Copiar"
	oBtnCop:cToolTip := OemToAnsi(STR0032)//"Copiar"
	Define BUTTON oBtnCol RESOURCE "S4WB007N"   OF oBar	     ACTION NaoDisp() 	 //PROMPT STR0033 TOOLTIP STR0033 //"Colar"###"Colar"
	oBtnCol:cToolTip := OemToAnsi(STR0033)//"Colar"
	Define BUTTON oBtnCal RESOURCE "S4WB008N"   OF oBar GROUP ACTION Calculadora()//PROMPT STR0034 TOOLTIP STR0034 //"Calculadora"###"Calculadora"
	oBtnCal:cToolTip := OemToAnsi(STR0034)//"Calculadora"
	Define BUTTON oBtnAge RESOURCE "S4WB009N"   OF oBar 	  	  ACTION Agenda() 	 //PROMPT STR0035 TOOLTIP STR0035 //"Agenda"###"Agenda"
	oBtnAge:cToolTip := OemToAnsi(STR0035)//"Agenda"
	Define BUTTON oBtnGer RESOURCE "S4WB010N"   OF oBar 	 	  ACTION OurSpool() 	 //PROMPT STR0036 TOOLTIP STR0036		  //"Gerenciador de Impressão"###"Gerenciador de Impressão"
	oBtnGer:cToolTip := OemToAnsi(STR0036)//"Gerenciador de Impressão"
	Define BUTTON oBtnHel RESOURCE "S4WB016N"   OF oBar GROUP ACTION HelProg()	 //PROMPT STR0037 TOOLTIP STR0038 //"Help de Programa"###"Help"
	oBtnHel:cToolTip := OemToAnsi(STR0037)//"Help de Programa"
	Define Button oBtnDoc Resource "sduprop" Of oBar GROUP Action Sg100Qdo(cDesNiv)   //PROMPT STR0039 TOOLTIP STR0039 //"Documentos Relacioandos"###"Documentos Relacioandos"
	oBtnDoc:cToolTip := OemToAnsi(STR0039)//"Documentos Relacioandos"
	Define Button oBtnPar Resource "RESPONSA"   Of oBar GROUP Action Sg100Resp(nOpc)  //PROMPT STR0040 TOOLTIP STR0040 //"Participantes"###"Participantes"
	oBtnPar:cToolTip := OemToAnsi(STR0040)//"Participantes"
	If ExistBlock("SGAA1001")
		ExecBlock("SGAA1001",.F.,.F.)
	EndIf
	Define Button oBtnOk RESOURCE "OK"  Of oBar GROUP ACTION If(!SG100VALCC() .Or. !Obrigatorio(aGets,aTela),lGrava := .F.,(lGrava:=.T.,oDlg:End()))
	oBtnOk:cToolTip := OemToAnsi("Ok")
	SetKEY(15,oBtnOk:bAction)
	Define Button oBtnCan Resource "CANCEL"     Of oBar GROUP ACTION (lGrava := .F.,oDlg:End(), ButtonOff(bSet15,bSet24,.T.))
	SetKEY(24,oBtnCan:bAction)
	oBtnCan:cToolTip := OemToAnsi(STR0101)	//"Cancelar - <Ctrl-X>"
	oDlg:bSet15 := oBtnOk:bAction
	oDlg:bSet24 := oBtnCan:bAction

	oBar:bRClicked := {|| AllwaysTrue()}

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100Qdo
Monta uma tela para escolha da visualizacao ou Relacionamento

@type    function
@author  Thiago Olis Machado
@since   05/04/04
@sample  Sg100Qdo( 'Teste', '001', .T. )

@param   cDesNiv, Caractere, Descrição do nível
@param   cLocDoc, Caractere, Código do nível da estrutura
@param   lTemp, Lógico,

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg100Qdo( cDesNiv, cLocDoc ,lTemp )

	Local cDesc := cDesNiv
	Local oFontDialog:= TFont():New("Arial",6,15,,.T.,,,,.F.)
	Local i,lDelete := .F.
	Local lGrava := .F.

	Default lTemp := .F.
	Default cLocDoc := cLocal

	Private cLocTree := cLocDoc
	Private aWord := {}
	Private oDlgQdo,oPanel,oWord1,oWord2,oWord3,oWord4,oWord5,oWord6,oBmp
	Private aOldMenu := aClone( aSMenu )
	Private oFontMet   := TFont():New("Courier New",6,0)
	Private oFontIden  := TFont():New("Courier New",09,09,,.T.,,,,.F.,.F.)
	Private nNumDoc := 0
	Private nContWo := 0
	Private nDocto := 1
	Private cDocto1,cDocto2,cDocto3,cDocto4,cDocto5,cDocto6
	Private nTitX,nTitY,nPicX,nPicY

	Private oMenu1
	Private oLoc1,cLoc1 := ' '
	Private oLoc2,cLoc2 := ' '
	Private oDesc1,oDesc2,oDesc3,oDesc4,oDesc5,oDesc6

	Define MsDialog oDlgQdo Title STR0070 From 09,00 To 22,50 //"Documentos Relacionados"

	oDlgQdo:lEscClose := .F.

	Define FONT oBold NAME "Courier New" Size 0, -13 BOLD

	@ 000,000 MsPanel oPanel Prompt "" Size __DlgWidth( oDlgQdo ),__DlgHeight( oDlgQdo ) Of oDlgQdo
	@ 000,000 BitMap oBmp ResName "PROJETOAP" oF oPanel Size 45,300 NoBorder When .F. Pixel
	TBitmap():New(000,000,205,015,"TOOLBAR",,.T.,oPanel,,,,.T.,,,,,.T.)

	@ 003,005 Say OemToAnsi('Identificacao') Of oPanel Size 37,7 Pixel //Font oFontIden
	@ 002,047 MsGet M->TAF_NOMNIV Size 130,08 Of oPanel Pixel When .F. Font oFontDialog

	@ 030,005 Say OemToAnsi('Documento') Of oPanel Size 45,15 Pixel Font oFontDialog Color CLR_BLUE
	@ 037,007 Say oLoc1 Var cLoc1 Size 048, 08 Of oPanel Pixel
	@ 045,005 Say OemToAnsi('Revisao') Of oPanel Size 45,15 Pixel Font oFontDialog Color CLR_BLUE
	@ 052,007 Say oLoc2 Var cLoc2 Size 048, 08 Of oPanel Pixel

	oPanel:bRClicked:= { |o,x,y| oMenu1:Activate(x,y,oPanel)}
	Sg100Menu(@oMenu1,@oPanel)

	SgProcDoc(lTemp)

	Define sButton From 079,130 Type 1 Enable Of oDlgQdo Action (lGrava := .T.,oDlgQdo:End())
	Define sButton From 079,160 Type 2 Enable Of oDlgQdo Action (lGrava := .F.,oDlgQdo:End())

	Activate MsDialog oDlgQdo Centered

	If lGrava
		If !lTemp
			Sg100GrQdo()
		Else
			For i:= 1 To Len( aWord )
				DbSelectArea(cTRBTAL)
				DbSetOrder(1)
				If DbSeek(xFilial("TAL")+'001'+cLocTree+aWord[i][2]+aWord[i][1])
					RecLock(cTRBTAL,.F.)
					lDelete := .T.
				Else
					RecLock(cTRBTAL,.T.)
				EndIf

				If aWord[i][3] == 'S'
					(cTRBTAL)->FILIAL := xFilial("TAL")
					(cTRBTAL)->CODEST := '001'
					(cTRBTAL)->CODNIV := cLocTree
					(cTRBTAL)->FILDOC := aWord[i][2]
					(cTRBTAL)->DOCTO  := aWord[i][1]
					(cTRBTAL)->SITUAC := 'S'
				Else
					If lDelete
						DbDelete()
					EndIf
				EndIf
				MsUnLock(cTRBTAL)
			Next i
		EndIf
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100RelQdo
Relaciona um procedimento a um documento QDO

@type    function
@author  Thiago Olis Machado
@since   05/04/2004
@sample  Sg100RelQdo()

@return  Lógico, Verdadeiro se o documento já existir ou se o usuário
já tiver relacionado o numero máximo de documentos permitidos
/*/
//-------------------------------------------------------------------
Function Sg100RelQdo()

	Local lRet := .F.
	Local nPosDoc

	lRet := ConPad1( , , , "QDT1",,,.F.)
	If lRet
		cDocto  := QDH->QDH_DOCTO
		cFilDoc := QDH->QDH_FILIAL
		nPosDoc := aScan(aWord, {|x| x[1] == cDocto .And. x[3] == 'S'})
		If nPosDoc > 0
			If aWord[nPosDoc][3] <> 'N'
				MsgStop('Esse documento ja existe')
				Return .T.
			EndIf
		EndIf
		If nDocto == 1
			nTitX := 015
			nTitY := 053
			nPicX := 030
			nPicY := 050
			cDocto1 := cDocto
			@ nTitX,nTitY Bitmap oWord1 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc1 Var cDocto1 Size 100, 7 Of oPanel Pixel
			oWord1:blClicked := { || SgDescWo(cDocto1,oWord1,1,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto1
			oWord1:blDblClick := { || Sg100VieQdo(cDocto1) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 1
		ElseIf nDocto == 2
			nTitX := 015
			nTitY := 103
			nPicX := 030
			nPicY := 100
			cDocto2 := cDocto
			@ nTitX,nTitY Bitmap oWord2 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc2 Var cDocto2 Size 100, 7 Of oPanel Pixel
			oWord2:blClicked := { || SgDescWo(cDocto2,oWord2,2,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto2
			oWord2:blDblClick := { || Sg100VieQdo(cDocto2) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 2
		ElseIf nDocto == 3
			nTitX := 015
			nTitY := 153
			nPicX := 030
			nPicY := 150
		cDocto3 := cDocto
			@ nTitX,nTitY Bitmap oWord3 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc3 Var cDocto3 Size 100, 7 Of oPanel Pixel
			oWord3:blClicked := { || SgDescWo(cDocto3,oWord3,3,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto3
			oWord3:blDblClick := { || Sg100VieQdo(cDocto3) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 3
		ElseIf nDocto == 4
			nTitX := 050
			nTitY := 053
			nPicX := 065
			nPicY := 050
			cDocto4 := cDocto
			@ nTitX,nTitY Bitmap oWord4 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc4 Var cDocto4 Size 100, 7 Of oPanel Pixel
			oWord4:blClicked := { || SgDescWo(cDocto4,oWord4,4,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto4
			oWord4:blDblClick := { || Sg100VieQdo(cDocto4) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 4
		ElseIf nDocto == 5
			nTitX := 050
			nTitY := 103
			nPicX := 065
			nPicY := 100
			cDocto5 := cDocto
			@ nTitX,nTitY Bitmap oWord5 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc5 Var cDocto5 Size 100, 7 Of oPanel Pixel
			oWord5:blClicked := { || SgDescWo(cDocto5,oWord5,5,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto5
			oWord5:blDblClick := { || Sg100VieQdo(cDocto5) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 5
		ElseIf nDocto == 6
			nTitX := 050
			nTitY := 153
			nPicX := 065
			nPicY := 150
			cDocto6 := cDocto
			@ nTitX,nTitY Bitmap oWord6 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc6 Var cDocto6 Size 100, 7 Of oPanel Pixel
			oWord6:blClicked := { || SgDescWo(cDocto6,oWord6,6,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto6
			oWord6:blDblClick := { || Sg100VieQdo(cDocto6) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 6
		EndIf
		If nDocto > 6
			MsgStop('Voce ja relacionou o numero maximo de Documento permitidos')
			Return .T.
		EndIf
		nDocto += 1
	EndIf

Return .F.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg100VieQdo
Visualiza um documento QDO

@type    function
@author  Thiago Olis Machado
@since   24/09/2003
@sample  Sg100VieQdo( 'XXX' )
@param   cDocto7, Caractere, Código do documento

@return  Lógico, Verdadeiro se leitura ocorreu normalmente
/*/
//-------------------------------------------------------------------
Function Sg100VieQdo( cDocto7 )

	Local _lRet := .F.

	If !Empty(cDocto7)
		CursorWait()
		If QDOVIEW( , cDocto7 ) //Visualiza documento Word...
			_lRet := .T.
		EndIf
		CursorArrow()
	Else
		MsgInfo(STR0041)  //"Nao existe documento associado a este procedimento"
	EndIf

Return _lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} SgRotina
Funcao para saber se ja tem uma estrutura cadastrada

@type    function
@author  Thiago Olis Machado
@since   05/04/2004
@sample  SgRotina()

@return  Lógico, Verdadeiro se não houver uma estrutura cadastrada
/*/
//-------------------------------------------------------------------
Function SgRotina()

	Local _lRet
	Local nCount := 0
	Local aOldArea := GetArea() // Guarda variaveis de alias e indice

	dbSelectArea("TAF")
	dbSetOrder(1)
	dbSeek(xFilial("TAF"))
	Do While !Eof() .And. xFilial("TAF") == TAF->TAF_FILIAL
	nCount ++
	dbSkip()
	EndDo
	_lRet := IIF(nCount>0,.F.,.T.)
	RestArea(aOldArea)

Return _lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Sg100Menu ³ Autor ³ Thiago Machado        ³ Data ³ 28.05.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Funcao para montar um menu pop-up.                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100Menu(oMenu1,oParent)

	Local oSubMenu

	Menu oMenu1 PopUp Of oParent
		Menu oSubMenu Popup
				MenuItem STR0043 //"Por Nome"
				MenuItem STR0044 //"Por Revisao"
		EndMenu
		MenuItem STR0045 Action Sg100RelQdo() BmpFile "PROJETOAP" //"Novo"
		MenuItem STR0006 Action Sg100Exc() //"Excluir"
	ENDMENU

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³SgProcDoc ³ Autor ³ Thiago Machado        ³ Data ³ 05.04.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Funcao que procura e apresenta os documentos ja cadastrados ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function SgProcDoc(lTemp)

	Local aSeek

	Default lTemp := .F.

	If !lTemp
		aSeek := {"TAL", xFilial("TAL")+'001'+cLocTree, "TAL->TAL_FILIAL+TAL->TAL_CODEST+TAL->TAL_CODNIV", "TAL->TAL_DOCTO" , "TAL->TAL_FILDOC"}
	Else
		aSeek := {cTRBTAL, xFilial("TAL")+'001'+cLocTree, "(cTRBTAL)->FILIAL+(cTRBTAL)->CODEST+(cTRBTAL)->CODNIV", "(cTRBTAL)->DOCTO", "(cTRBTAL)->FILDOC" }
	EndIf

	DbSelectArea(aSeek[1])
	DbSetOrder(1)
	DbSeek(aSeek[2])
	Do While !Eof() .And. ( aSeek[2] == &(aSeek[3]) )

		If nDocto == 1
			nTitX := 015
			nTitY := 053
			nPicX := 030
			nPicY := 050
			cDocto1 := &(aSeek[4])
			cFilDoc := &(aSeek[5])
			@ nTitX,nTitY Bitmap oWord1 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc1 Var cDocto1 Size 100, 7 Of oPanel Pixel
			oWord1:blClicked := { || SgDescWo(cDocto1,oWord1,1,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto1
			oWord1:blDblClick := { || Sg100VieQdo(cDocto1) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 1
		ElseIf nDocto == 2
			nTitX := 015
			nTitY := 103
			nPicX := 030
			nPicY := 100
			cDocto2 := &(aSeek[4])
			cFilDoc := &(aSeek[5])
			@ nTitX,nTitY Bitmap oWord2 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc2 Var cDocto2 Size 100, 7 Of oPanel Pixel
			oWord2:blClicked := { || SgDescWo(cDocto2,oWord2,2,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto2
			oWord2:blDblClick := { || Sg100VieQdo(cDocto2) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 2
		ElseIf nDocto == 3
			nTitX := 015
			nTitY := 153
			nPicX := 030
			nPicY := 150
		cDocto3 := &(aSeek[4])
		cFilDoc := &(aSeek[5])
			@ nTitX,nTitY Bitmap oWord3 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc3 Var cDocto3 Size 100, 7 Of oPanel Pixel
			oWord3:blClicked := { || SgDescWo(cDocto3,oWord3,3,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto3
			oWord3:blDblClick := { || Sg100VieQdo(cDocto3) }
			aAdd( aWord,{cDocumento,cFilDoc,'S'} )
			nNumDoc := 3
		ElseIf nDocto == 4
			nTitX := 050
			nTitY := 053
			nPicX := 065
			nPicY := 050
			cDocto4 := &(aSeek[4])
			cFilDoc := &(aSeek[5])
			@ nTitX,nTitY Bitmap oWord4 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc4 Var cDocto4 Size 100, 7 Of oPanel Pixel
			oWord4:blClicked := { || SgDescWo(cDocto4,oWord4,4,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto4
			oWord4:blDblClick := { || Sg100VieQdo(cDocto4) }
			aAdd( aWord,{cDocumento,cFILDOC,'S'} )
			nNumDoc := 4
		ElseIf nDocto == 5
			nTitX := 050
			nTitY := 103
			nPicX := 065
			nPicY := 100
			cDocto5 := &(aSeek[4])
			cFilDoc := &(aSeek[5])
			@ nTitX,nTitY Bitmap oWord5 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc5 Var cDocto5 Size 100, 7 Of oPanel Pixel
			oWord5:blClicked := { || SgDescWo(cDocto5,oWord5,5,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto5
			oWord5:blDblClick := { || Sg100VieQdo(cDocto5) }
			aAdd( aWord,{cDocumento,cFILDOC,'S'} )
			nNumDoc := 5
		ElseIf nDocto == 6
			nTitX := 050
			nTitY := 153
			nPicX := 065
			nPicY := 150
			cDocto6 := &(aSeek[4])
			cFilDoc := &(aSeek[5])
			@ nTitX,nTitY Bitmap oWord6 FileName "Word.gif" Pixel Of oPanel Size 225,125 NOBORDER
			@ nPicX,nPicY Say oDesc6 Var cDocto6 Size 100, 7 Of oPanel Pixel
			oWord6:blClicked := { || SgDescWo(cDocto6,oWord6,6,nTitX,nTitY,nPicX,nPicY) }
			cDocumento := cDocto6
			oWord6:blDblClick := { || Sg100VieQdo(cDocto6) }
			aAdd( aWord,{cDocumento,cFILDOC,'S'} )
			nNumDoc := 6
		EndIf
		nDocto += 1
		If lTemp
			(cTRBTAL)->(dbSkip())
		Else
			TAL->(DbSkip())
		EndIf
	EndDo

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³SgDescWo  ³ Autor ³ Thiago Machado        ³ Data ³ 05.04.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para montar a tela com os documentos.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function SgDescWo(cDocuto,oDocuto,nNDocto,TitX,TitY)

	QDH->(DbSeek(xFilial("QDH")+cDocuto))
	cDocumento := cDocuto
	cLoc1 := cDocuto
	cLoc2 := QDH->QDH_RV
	oLoc1:Refresh()
	oLoc2:Refresh()
	nNumDoc := nNDocto
	oDocumento:=oDocuto
	nOldTitX := TitX
	nOldTitY := TitY
	oDocOld  := oDocuto
	cOldDocto := cDocuto
	nContWo++

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Sg100Exc  ³ Autor ³ Thiago Machado        ³ Data ³ 05.04.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para excluir documentos relacionados.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100Exc()

Local nPos := 0

	If nNumDoc > 0
		oWord&(alltrim(str(nNumDoc))):hide()
		oDesc&(alltrim(str(nNumDoc))):hide()
		oPanel:Refresh()
		nPos := aScan(aWord, {|x| x[1] == cDocumento .And. x[3] == 'S'})
		If nPos > 0
			aWord[nPos][3] := 'N'
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Sg100GrQdo³ Autor ³ Thiago Machado        ³ Data ³ 03.06.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para gravar os documentos relacionados.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100GrQdo()

	Local i,lDelete := .F.

	For i:= 1 To Len( aWord )

		DbSelectArea("TAL")
		DbSetOrder(1)
		If DbSeek(xFilial("TAL")+'001'+cLocTree+aWord[i][2]+aWord[i][1])
			RecLock('TAL',.F.)
			lDelete := .T.
		Else
			RecLock('TAL',.T.)
		EndIf

		If aWord[i][3] == 'S'
			TAL->TAL_FILIAL := xFilial('TAL')
			TAL->TAL_CODEST := '001'
			TAL->TAL_CODNIV := cLocTree
			TAL->TAL_FILDOC := aWord[i][2]
			TAL->TAL_DOCTO  := aWord[i][1]
		Else
			If lDelete
				DbDelete()
			EndIf
		EndIf
		MsUnLock('TAL')

	Next i

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³SgChanMod ³ Autor ³ Thiago Machado        ³ Data ³ 12.07.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para Controlar se aquele local possui filhos.       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function SgChanMod(cLocal,nMod,cDesLoc)

	Sg100ChkFi(cLocal,1,cDesLoc,,.F.)

	If Len( aFilhosLoc ) > 1
		If !SgMsg()
			lChoice1 := aOpc[1][1]
			lChoice2 := aOpc[1][2]
			lChoice3 := aOpc[1][3]
			oCheckLoc1:Refresh()
			oCheckLoc2:Refresh()
			oCheckLoc3:Refresh()
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³SG100RESP ³ Autor ³ Thiago Olis Machado   ³ Data ³13/05/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Funcao para vincular Responsaveis a Estrutura Organizacional³±±
±±ÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100Resp(nOpc)

	Local oDlg
	Local oBtn1
	Local oBtn3
	Local oBtn4
	Local oBtn5
	Local oBtn6
	Local oBtn7
	Local oBtn8
	Local aFuncao  := {}
	Local oOk      := LoadBitmap( GetResources(), "ENABLE" )
	Local oNo      := LoadBitmap( GetResources(), "LBNO" )
	Local oDemt	   := LoadBitmap( GetResources(), "BR_VERMELHO" )  //Demitido durante o processo de Elaboracao
	Local oBmp
	Local oFont := TFont():New("Arial",7,15,.T.,.T.,,,,.F.)
	Private aQDG     := {}
	Private aQdGDoc  := {}
	Private aQdjDoc  := {}
	Private aSize 	 := MsAdvSize(,.F.,430)
	Private oQDJ
	Private oQDG
	Private oGet
	Private nOpca    := 0
	Private n        := 1
	Private cCadastro:= ""
	Private cFilDep  := xFilial("QAA")
	Private cCodMat:= Space(Len(QAA->QAA_MAT))
	Private bQDGLine1
	Private bQDGLine2

	MsgRun(OemToAnsi(STR0046),OemToAnsi(STR0047),Sg100CarFun(@aFuncao))  //"Carregando Funcoes"###"Aguarde..."
	MsgRun(OemToAnsi(STR0048),OemToAnsi(STR0047),Sg100CarQdj(@aQdGDoc))  //"Carregando Funcionarios"###"Aguarde..."

	nAltura := aSize[6] / 1.1
	nLargura := aSize[5] / 2.15
	Define MsDialog oDlg Title OemToAnsi(STR0040) From aSize[7],000 To nAltura,nLargura Of oMainWnd Pixel  //"Participantes"

	//-----------
	//Cabecalho
	//-----------
	oPnlPai := TPanel():New(00,00,,oDlg,,,,,,425,200,.F.,.F.)
	oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

	TGroup():New(15,03,045,309 ,OemToAnsi(STR0025),oPnlPai,,,.T.)//"Identificacao"

	@ 025,007 Bitmap oBmp Resource "FOLDER11" Size 8,8 Pixel Of oPnlPai Noborder When .F.
	@ 026,019 Say OemToAnsi(cLocal+"   -") Of oPnlPai Pixel Font oFont
	If Empty(M->TAF_NOMNIV)
		@ 026,041 Say OemToAnsi(STR0081) Of oPnlPai Pixel Font oFont //'Novo Item'
	Else
		@ 026,041 Say OemToAnsi(M->TAF_NOMNIV) Of oPnlPai Pixel Font oFont
	EndIf

	//---------------------------
	//Parte de Cima da Tela
	//---------------------------

	TGroup():New(55,03,145,309 ,OemToAnsi(STR0049),oPnlPai,,,.T.)//"Funcao"

	@ 065,006 Button oBtn1 Prompt OemToAnsi(STR0011) Size 050,011 Of oPnlPai Pixel; //"Funcao"
	Action If(Sg100Usr(@aFuncao),MsgRun(OemToAnsi(STR0050),OemToAnsi(STR0047),; //"Atualizando Informacoes..."###"Aguarde..."
	{|| Sg100AlArr(oQdj:nAt)}),) When (nOpc <> 2)

	@ 080,007 ListBox oQdj Fields;
	Header  STR0051,STR0011,STR0022,; //"Filial"###"Funcao"###"Descricao"
	Size    300,062 Of oPnlPai Pixel

	bQDJLine1 := { || { aQDJDoc[oQDJ:nAt,1],aQDJDoc[oQDJ:nAt,2],aQDJDoc[oQDJ:nAt,3]}}
	bQDJLine2 := { || { Space( 02 ), Space( 06 ), Space( 40 ) } }
	oQdj:SetArray( aQDJDoc )
	If Len(aQDJDoc) > 0
		oQdj:bLine := bQdjLine1
	Else
		oQdj:bLine := bQdjLine2
	EndIf

	oQdj:SetFocus(.T.)
	oQdj:Refresh()

	//---------------------------
	//Parte de Baixo da Tela
	//---------------------------

	TGroup():New(145,03,235,309 ,OemToAnsi(STR0052),oPnlPai,,,.T.)//"Participantes"

	@ 155,006 Button oBtn5 Prompt OemToAnsi(STR0053) Size 067,011 Of oPnlPai Pixel ; //"Marcar/Desmarcar todos"
	Action If(Len(aQDGDoc)>0 ,Sg100MRcbT(@aQDGDoc),oQDG:Refresh()) When (nOpc <> 2)

	@ 155,075 Button oBtn3 PROMPT OemToAnsi(STR0054) Size 062,011 Of oPnlPai Pixel ; //"Incluir Participantes"
	Action Sg100AlUsr() When (nOpc <> 2)

	@ 155,139 Button oBtn6 Prompt OemToAnsi(STR0055) Size 062,011 Of oPnlPai Pixel;                  //" Pesquisa "
	Action If(Len(aQDGDoc)>0 ,Sg100PesqPa(aQDGDoc),)

	@ 155,203 Button oBtn8 Prompt OemToAnsi(STR0056) Size 062,011 Of oPnlPai Pixel; //"Legenda"
	Action Sg100Legen()

	@ 170,007 ListBox oQdg Fields;
	Header  " ",;
	STR0057,; //"Matricula"
	STR0058     ,; //"Nome"
	STR0011   ;                         //"Funcao"
	Size    300,062 Of oPnlPai Pixel;
		ON DBLCLICK Sg100MdRcb( aQdgDoc, oQdg:nAt )

	bQDGLine1 := { || { If( aQDgDoc[oQDg:nAt,4] == "S" ,IF( Sg100MRLed(cFilDep+aQDGDoc[oQDG:nAt,5]) ,oOk , oDemt ), oNo ),;
								aQDGDoc[oQDg:nAt,5],aQDGDoc[oQDg:nAt,6],aQDGDoc[oQDg:nAt,3]}}

	bQDGLine2 := { || { oNo, Space(Len(QAA->QAA_MAT)), Space( 40 ), Space(Len(QAA->QAA_CODFUNC))} }

	oQDG:SetArray( aQDGDoc )
	IIF(Len(aQDGDoc)>0,oQDG:bLine:= bQDGLine1,oQDG:bLine:= bQDGLine2)

	oQDG:GoTop()
	oQDG:Refresh()
	Sg100AlArr(oQDJ:nAt)
	oQDJ:bChange:={||(oQDG:SetArray(aQDgDoc)),oQDG:bLine:= If(Len(aQDJDoc)>0,bQDGLine1,bQDGLine2),oQDG:GoTop(),oQDG:Refresh()}
	oQDG:cToolTip := OemToAnsi(STR0059)	 //"Duplo click para Habilitar/Desabilitar destinat rio"

	Activate MsDialog oDlg On Init SgRespBar(oDlg,{|| If(nOpc == 2 .Or. SgRespGrav(),oDlg:End(),.F.)},;
											{|| oDlg:End()}) Centered

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao    ³Sg100Legen ³ Autor ³ Thiago Olis Machado  ³ Data ³ 13/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao ³ Cria uma janela contendo a legenda da mBrowse              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Sgaa100()                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100Legen()

	Local aCores := { {'ENABLE'     , OemtoAnsi(STR0060) },;  //"Usuario Marcado"
					{'LBNO'       , OemtoAnsi(STR0061)},;	  //"Usuario Desmarcado"
					{'BR_VERMELHO', OemtoAnsi(STR0071)} }    //"Usuario Inativo"

	Local cTitulo := OemToAnsi(STR0040) //"Participantes"
	Local cMensagem := OemToAnsi(STR0056) 	  //"Legenda"
	Local ny       := 0
	Local nx       := 0
	Local aBmp[Len(aCores)]
	Local aSays[Len(aCores)]
	Local oDlgLeg

	Define MsDialog oDlgLeg From 0,0 To (Len(aCores)*20)+75,304 Title cTitulo Pixel

	@ 00,00 Bitmap oBmp ResName "PROJETOAP" Of oDlgLeg Size 35,155 Noborder When .F. Pixel
	@ 11,35 To 013,400 Label '' Of oDlgLeg Pixel
	@ 03,37 Say cMensagem Of oDlgLeg Pixel Size 100,009
	For nx := 1 to Len(aCores)
		@ 19+((nx-1)*10),44 Bitmap aBmp[nx] ResName aCores[nx][1] Of oDlgLeg Size 20,20 NoBorder When .F. Pixel
		@ 19+((nx-1)*10),54 Say If((ny+=1)==ny,aCores[ny][2]+If(ny==Len(aCores),If((ny:=0)==ny,"",""),""),"") Of oDlgLeg Pixel
	Next
	ny := 0

	Define sButton From 25+((nx-1)*10),124 Type 1 Enable Of oDlgLeg Action oDlgLeg:End()

	Activate MsDialog oDlgLeg Centered

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo     ³Sg100CarFun ³ Autor ³ Thiago Olis Machado        ³ Data ³ 13/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio  ³ Carrega Funcao para Selecao no Cadastro de Usuarios/Pastas        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso       ³ Sgaa100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100CarFun(aFuncao)

	Local cNomeFuncao := ''

	DbSelectArea("QAC")
	QAC->(DbSetOrder(1))
	QAC->(DbGotop())
	While QAC->(!Eof())
		Aadd(aFuncao,{"N",QAC->QAC_FILIAL,QAC->QAC_FUNCAO,QAC->QAC_DESC})
		QAC->(DbSkip())
	EndDo

	DbSelectArea("TAK")
	TAK->(DbSetOrder(1))
	TAK->(dbSeek(xFilial("TAK")))
	While TAK->(!Eof() .And. xFilial("TAK") == TAK->TAK_FILIAL)
		If TAK->TAK_CODNIV == cLocal
			If aScan( aQdjDoc,{|x| x[2] == TAK->TAK_CODFUN } ) == 0
				If QAC->(DbSeek(xFilial("QAC")+TAK->TAK_CODFUN))
					cNomeFuncao := QAC->QAC_DESC
				EndIf
				Aadd(aQdjDoc,{TAK->TAK_FILIAL,TAK->TAK_CODFUN,cNomeFuncao})
			EndIf
		EndIf
		TAK->(DbSkip())
	End
	DbSelectArea(cTRBTAP)
	DbSetOrder(1)
	dbSeek(cLocal)
	While !Eof() .And. (cTRBTAP)->CODNIV == cLocal
		If aScan( aQdjDoc,{|x| x[2] == (cTRBTAP)->CODFUN } ) == 0
			If QAC->(DbSeek(xFilial("QAC")+(cTRBTAP)->CODFUN))
				cNomeFuncao := QAC->QAC_DESC
			EndIf
			Aadd(aQdjDoc,{xFilial("TAK"),(cTRBTAP)->CODFUN,cNomeFuncao})
		EndIf
		dbSelectArea(cTRBTAP)
		DbSkip()
	End
	DbSelectArea(cTRBTAK)
	DbSetOrder(1)
	dbSeek(cLocal)
	While !Eof() .And. (cTRBTAK)->CODNIV == cLocal
		If aScan( aQdjDoc,{|x| x[2] == (cTRBTAK)->CODFUN } ) == 0
			If QAC->(DbSeek(xFilial("QAC")+(cTRBTAK)->CODFUN))
				cNomeFuncao := QAC->QAC_DESC
			EndIf
			Aadd(aQdjDoc,{xFilial("TAK"),(cTRBTAK)->CODFUN,cNomeFuncao})
		EndIf
		dbSelectArea(cTRBTAK)
		DbSkip()
	End

	aQdjDoc := aSort( aQdjDoc,,,{|x,y| x[2] < y[2]} )

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³ SG100USR   ³ Autor ³ Thiago Olis Machado        ³ Data ³ 13/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Inclusao de Usuarios                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ SGAA100()                                                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100Usr(aFuncao)

	Local oDeptos
	Local oDlg1
	Local oBtn1
	Local oOk       := LoadBitmap( GetResources(), "ENABLE" )
	Local oNo       := LoadBitmap( GetResources(), "LBNO" )
	Local aAuxFuncao:= Aclone(aFuncao)
	Local lRet      := .F.
	Local nPosDep   := 1
	Local nMarca
	Local i
	Local bQADLine1
	Local bQADLine2

	If Len(aQDJDoc) > 0
		If (nPosDep:= aScan(aFuncao,{|x| x[2]+x[3] == aQDJDoc[oQDJ:nAt,2]+aQDJDoc[oQDJ:nAt,3]})) == 0
			nPosDep:= 1
		EndIf
	EndIf

	For i:=1 to Len(aFuncao)

		nMarca := aScan(aQDJDoc,{|x| x[2] == aFuncao[i][3]})

		If nMarca > 0
			aFuncao[i][1] := "S"
		EndIf

	Next

	Define MsDialog oDlg1 Title OemToAnsi(STR0011) From 000,000 To 200,425 Of oMainWnd Pixel //"Funcao"
	oPnlPai := TPanel():New(00,00,,oDlg1,,,,,,425,200,.F.,.F.)
	oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

	@ 003,003 To 086,210 Label OemToAnsi(STR0011) Of oPnlPai Pixel  //"Funcao"
	@ 011,007 ListBox oDeptos Fields;
				Header  " ", ;
						OemToAnsi(STR0051),;  //"Filial"
						OemToAnsi(STR0011),; //"Funcao"
								OemToAnsi(STR0022) ;                      //"Descricao"
				Size 200,060 Of oPnlPai Pixel;
				On DblClick If(Len(aFuncao) > 0,aFuncao[oDeptos:nAt,1]:=IIf(aFuncao[oDeptos:nAt,1]="S","N","S"),.T.)

	bQADLine1 := {|| {If(aFuncao[oDeptos:nAt,1] == "S",oOk, oNo),aFuncao[oDeptos:nAt,2],aFuncao[oDeptos:nAt,3],aFuncao[oDeptos:nAt,4]}}
	bQADLine2 := {|| {oNo,Space(Len(QAC->QAC_FILIAL)),Space(18),Space(25) }}

	oDeptos:SetArray(aFuncao)
	oDeptos:bLine:= If(Len(aFuncao)>0,bQADLine1,bQADLine2)
	oDeptos:nAt:= nPosDep
	oDeptos:SetFocus(.T.)
	oDeptos:Refresh()

	@ 073,006 Button oBtn1 Prompt OemToAnsi(STR0053) Size 067,011 Of oPnlPai Pixel;  //"Marcar/Desmarcar todos"
				Action If(Len(@aFuncao)>0 ,Sg100MKTd(@aFuncao),oDeptos:Refresh())

	@ 073,075 Button oBtn2 Prompt OemToAnsi(STR0063) Size 050,011 Of oPnlPai Pixel;  //"Pesquisa Funcao"
				Action Sg100PesqFu(@oDeptos,aFuncao)

	Activate MsDialog oDlg1 Centered On Init EnchoiceBar(oDlg1,{|| Sg100GrQdj(@aFuncao),lRet:=.T.,oDlg1:End()},{|| aFuncao:= aAuxFuncao,oDlg1:End()})

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³ Sg100AlArr ³ Autor ³ Thiago Olis Machado        ³ Data ³ 13/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Atualiza os arrays do listbox                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ Sgaa100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100AlArr(nAt)

	oQdj:SetArray(aQDJDoc)
	oQdj:bLine:= If(Len(aQDJDoc)>0,bQDJLine1,bQDJLine2)
	oQdj:GoTop()
	oQdj:Refresh()
	If Len(aQdjDoc) > 0
		oQdg:SetArray(aQDgDoc)
		oQdg:bLine:= bQdgLine1
	Else
		oQdg:SetArray({})
		oQdg:bLine:= bQdgLine2
	EndIf
	oQdg:GoTop()
	oQdg:Refresh()

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo     ³ SG100GRQDJ ³ Autor ³ Thiago Olis Machado        ³ Data ³ 13/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio  ³                                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso       ³ SGAA100()                                                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100GrQdj(aFuncao)

	Local nCnt   	:= 0
	Local nPos   	:= 0
	Local nPos1  	:= 0
	Local aAuxQDG   := {}

	CursorWait()
	For nCnt:= 1 To Len(aFuncao)

		If aFuncao[nCnt,1] == "S"
			DbSelectArea("QAA")
			DbSetOrder(4)
			DbSeek(xFilial("QAA")+aFuncao[nCnt,3])
			While QAA->(!Eof()) .And. xFilial("QAA") == QAA->QAA_FILIAL .And.;
					QAA->QAA_CODFUNC == aFuncao[nCnt,3]

				If (nPos := aScan(aQDGDoc,{|x| x[5] == QAA->QAA_MAT})) == 0 .And. QAA->QAA_STATUS == "1"
					Aadd(aQDGDoc,{"","",aFuncao[nCnt,3],"S",QAA->QAA_MAT,QAA->QAA_NOME})
				EndIf

				DbSkip()
			End
			If (nPos1 := aScan(aQDJDoc,{|x| x[1]+x[2] == aFuncao[nCnt,2]+aFuncao[nCnt,3]})) == 0
				Aadd(aQDJDoc,{xFilial("TAK"),aFuncao[nCnt,3],aFuncao[nCnt,4],"","","" } )
			EndIf
		Else
			If (nPos := aScan(aQDjDoc,{|x| x[2]+x[3] == aFuncao[nCnT,2]+aFuncao[nCnT,3]})) > 0
			aDel(aQdjDoc,nPos)
			aSize(aQdjDoc,Len(aQdgjoc)-1)
			EndIf
		EndIf
	Next nCnt

	If Len(aQdjDoc) > 0
		aQdjDoc:= aSort( aQdjDoc,,,{ |x,y| x[1]+x[2] < y[1]+y[2] } )
	EndIf
	If Len(aQdGDoc) > 0
		aQdGDoc:= aSort( aQdGDoc,,,{ |x,y| x[3] < y[3] } )
	EndIf

	CursorArrow()
	oQdg:Refresh()

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³ SG100MdRcb ³ Autor ³ Thiago Olis Machado        ³ Data ³ 13/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Atualiza os lancamentos dos destinatarios                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ QDOA053()                                                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100MdRcb(aQDG,nPos)

	If Len( aQDG ) > 0
		aQDG[nPos,4]:= If(aQDG[nPos,4] == "N","S","N")
	EndIf
	oQDG:Refresh()

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³ SG100MRLed ³ Autor ³ Thiago Olis Machado        ³ Data ³ 13/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Marca/Desmarca os destinatarios verificando a situacao na Folha   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ SGAA100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100MRLed(cChave)

	Local lDemito:=.F.

	QAA->(dbSetOrder(1))
	IF QAA->(dbSeek(cChave))
		lDemito:=QA_SitFolh()
	EndIf

Return (lDemito)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³ Sg100MRcbT ³ Autor ³ Thiago Olis Machado        ³ Data ³ 13/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Marca/Desmarca os destinatarios                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ SGAA100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100MRcbT(aQDG)

	Local cChave:= ""
	Local nPos  := ""
	Local nC    := ""
	If Len( aQDG ) > 0
		nC:= Ascan( aQDG, { |X| x[4] == "S" } )
		aEval(aQDG,{|x|x[4]:= If(nC > 0,"N","S") })
	EndIf

Return aQDG

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg100AlUsr
Edita o cadastro do funcionario corrente

@return .T., Lógico, sempre verdadeiro

@sample Sg100AlUsr( "0000002" )

@author	Thiago Olis Machado
@since	14/05/2004
/*/
//---------------------------------------------------------------------
Function Sg100AlUsr()

	Local oDlg3
	Local oCodPar
	Local cCodPar  := Space( Len( QAA->QAA_MAT ) )
	Local nOpcao1  := 0
	Local nPos     := 0
	Local lAccsPar := IIf( FindFunction( "MDTVldFldAcc" ), MDTVldFldAcc( "QAA_MAT" ), .T. )

	Private oNomePar
	Private cNomePar := Space( Len( QAA->QAA_NOME ) )

	Define MsDialog oDlg3 Title OemToAnsi( STR0064 ) From 000, 000 To 110, 310 OF oMainWnd Pixel //"Inclui Participante"

	@ 003, 003 TO 040, 153 LABEL OemToAnsi( STR0065 ) Of oDlg3 Pixel  //"Participante"

	@ 010, 006 MsGet oCodPar Var cCodPar Picture '@!' F3 "QAA" Size 065, 008 Of oDlg3 Pixel ;
		Valid ( ExistCpo( "QAA", cCodPar ), Sg100NomPar( cCodPar ) ) HasButton When lAccsPar

	@ 025, 006 MsGet oNomePar Var cNomePar Size 100, 008 Of oDlg3 Pixel
		oNomePar:lReadOnly:= .T.

	Define sButton From 041,095 Type 1 Enable Of oDlg3 Action ( nOpcao1 := 1, oDlg3:End() )

	Define sButton From 041,125 Type 2 Enable Of oDlg3 Action oDlg3:End()

	Activate MsDialog oDlg3 Centered

	If nOpcao1 == 1 .And. !Empty( cCodPar )
		If ( nPos := aScan( aQdgDoc, { |x| x[5] == cCodPar } ) ) > 0
			Help( " ", 1, STR0082, , STR0066, 3, 1 ) //"ATENÇÃO" "Esse funcionario ja esta listado como participante"
		Else
			If nPos == 0
				QAA->( DbSetOrder( 1 ) )
				If QAA->( DbSeek( xFilial( "QAA" ) + cCodPar ) )
					aAdd( aQDGDoc, { "", "", QAA->QAA_CODFUN, "S", QAA->QAA_MAT, QAA->QAA_NOME } )
					oQdg:Refresh()
				EndIf
			EndIf
		EndIf
	EndIf

	aQdGDoc := aSort( aQdGDoc, , , { | x, y | x[3] < y[3] } )

	If Len( aQdgDoc ) > 0
		oQdg:SetArray( aQDgDoc )
		oQdg:bLine:= bQdgLine1
	Else
		oQdg:SetArray( {} )
		oQdg:bLine:= bQdgLine2
	EndIf

	oQdg:GoTop()
	oQdg:Refresh()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg100PesqPa
Pesquisa Participantes

@return Nil, Nulo

@sample Sg100PesqPa( { "0000002" } )

@param	aQDGDoc, Array, Array com os participantes

@author	Thiago Olis Machado
@since	14/05/2004
/*/
//---------------------------------------------------------------------
Function Sg100PesqPa( aQDGDoc )

	Local oDlg2
	Local oCodPar
	Local cCodPar  := Space( Len( QAA->QAA_MAT ) )
	Local lAccsPar := IIf( FindFunction( "MDTVldFldAcc" ), MDTVldFldAcc( "QAA_MAT" ), .T. )
	Local nOpcao1  := 0
	Local nPos     := 0

	Private oNomePar
	Private cNomePar := Space( Len( QAA->QAA_NOME ) )

	Define MsDialog oDlg2 Title OemToAnsi( STR0067 ) From 000, 000 To 110, 310 OF oMainWnd Pixel //"Pesquisa Participante"

	@ 003, 003 TO 040, 153 LABEL OemToAnsi( STR0065 ) Of oDlg2 Pixel  //"Participante"

	@ 010, 006 MsGet oCodPar Var cCodPar Picture '@!' F3 "QAA" Size 065, 008 Of oDlg2 Pixel;
		Valid ( ExistCpo( "QAA", cCodPar ), Sg100NomPar( cCodPar ) ) HasButton When lAccsPar

	@ 025, 006 MsGet oNomePar Var cNomePar Size 100, 008 Of oDlg2 Pixel
		oNomePar:lReadOnly:= .T.

	Define sButton From 041, 095 Type 1 Enable Of oDlg2 Action ( nOpcao1 := 1, oDlg2:End() )

	Define sButton From 041, 125 Type 2 Enable Of oDlg2 Action oDlg2:End()

	Activate MsDialog oDlg2 Centered

	If nOpcao1 == 1 .And. !Empty( cCodPar )
		If ( nPos:= aScan( aQdgDoc, { |x| x[5] == cCodPar } ) ) > 0
			oQdg:nAt := nPos
			oQdg:Refresh()
		Else
			If nPos == 0
				Help( " ", 1, STR0082, , STR0068, 3, 1 ) //"ATENÇÃO"##"Esse funcionario nao esta listado como participante"
			EndIf
		EndIf
	EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³SG100NOMPAR ³ Autor ³ Thiago Olis Machado        ³ Data ³ 14/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Traz o nome do Responsavel                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ SGAA100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100NomPar(cRespon)

	QAA->(dbSeek(xFilial('QAA')+cRespon))
	cNomePar:= QAA->QAA_NOME
	oNomePar:Refresh()

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³SG100MKTD   ³ Autor ³ Thiago Olis Machado        ³ Data ³ 14/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Marca todas as funcoes                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ SGAA100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100MKTd(aQdg)

	Local cChave:= ""
	Local nPos  := ""
	Local nC    := ""

	If Len( aQDG ) > 0
		nC:= Ascan( aQDG, { |X| x[1] == "S" } )
		aEval(aQDG,{|x|x[1]:= If(nC > 0,"N","S") })
	EndIf

Return aQDG

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³SG100PESQFU ³ Autor ³ Thiago Olis Machado        ³ Data ³ 14/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Pesquisa Funcao                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ SGAA100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100PesqFu(oDeptos,aFuncao)

	Local oDlg4
	Local oCodFun
	Local cCodFun  := Space( Len( QAC->QAC_FUNCAO ) )
	Local nOpcao1  := 0
	Local nPos     := 0

	Private oNomeFun
	Private cNomeFun := Space( Len( QAC->QAC_DESC ) )

	Define MsDialog oDlg4 Title OemToAnsi(STR0063) From 000,000 To 110,310 OF oMainWnd Pixel //"Pesquisa Funcao"

	@ 003,003 TO 040,153 LABEL OemToAnsi(STR0011) Of oDlg4 Pixel  //"Funcao"

	@ 010,006 MsGet oCodFun Var cCodFun Picture '@!' F3 "QAC" Size 044,008 Of oDlg4 Pixel;
				Valid (ExistCpo("QAC",cCodFun),Sg100NoFun(cCodFun)) HasButton

	@ 025,006 MsGet oNomeFun Var cNomeFun Size 100,008 Of oDlg4 Pixel
	oNomeFun:lReadOnly:= .T.

	Define sButton From 041,095 Type 1 Enable Of oDlg4;
			Action (nOpcao1:= 1,oDlg4:End())

	Define sButton From 041,125 Type 2 Enable Of oDlg4;
			Action oDlg4:End()

	Activate MsDialog oDlg4 Centered

	If nOpcao1 == 1
		If (nPos:= aScan(aFuncao,{|x| x[3] == cCodFun} )) > 0
			oDeptos:nAt:= nPos
			oDeptos:Refresh()
		Else
			If nPos == 0
				Help(" ",1,STR0082,,STR0069,3,1) //"ATENÇÃO" "Esta funcao nao esta cadastrada"
			EndIf
		EndIf
	EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³SGRESPGRAV  ³ Autor ³ Thiago Olis Machado        ³ Data ³ 31/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Grava Responsaveis                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ SGAA100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function SgRespGrav()

	Local i

	For i:= 1 To Len(aQDGDoc)
		DbSelectArea(cTRBTAP)
		DbSetOrder(1)
		If DbSeek(cLocal+aQdgDoc[i][3]+aQdgDoc[i][5])
			RecLock(cTRBTAP,.F.)
		Else
			RecLock(cTRBTAP,.T.)
		EndIf
		(cTRBTAP)->CODNIV := cLocal
		(cTRBTAP)->CODFUN := aQdgDoc[i][3]
		(cTRBTAP)->MAT    := aQdgDoc[i][5]
		(cTRBTAP)->OPERAC := aQdgDoc[i][4]//Verifica tipo de operacao
		MsUnLock(cTRBTAP)
	Next i

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funao	  ³SGRESPGRAV  ³ Autor ³ Thiago Olis Machado        ³ Data ³ 31/05/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descriao  ³ Grava Responsaveis                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		  ³ SGAA100                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Sg100CarQdj(aQdGDoc)

	Local cNomeFun := ''

	DbSelectArea("TAK")
	TAK->(DbSetOrder(1))
	TAK->(dbSeek(xFilial("TAK")))
	While TAK->(!Eof()) .And. xFilial("TAK") == TAK->TAK_FILIAL
		If TAK->TAK_CODNIV == cLocal
			DbSelectArea("QAA")
			DbSetOrder(1)
			If DbSeek(xFilial("QAA")+TAK->TAK_MAT)
				cNomeFun := QAA->QAA_NOME
			EndIf
			If aScan( aQdgDoc,{|x| x[5] == TAK->TAK_MAT } ) == 0
				Aadd(aQdGDoc,{"","",TAK->TAK_CODFUN,'S',TAK->TAK_MAT,cNomeFun})
			EndIf
		EndIf
		TAK->(DbSkip())
	End
	dbSelectArea(cTRBTAP)
	dbSetOrder(1)
	dbSeek(cLocal)
	While !Eof() .And. (cTRBTAP)->CODNIV == cLocal
			DbSelectArea("QAA")
			DbSetOrder(1)
			If DbSeek(xFilial("QAA")+(cTRBTAP)->MAT)
				cNomeFun := QAA->QAA_NOME
			EndIf
			If aScan( aQdgDoc,{|x| x[5] == (cTRBTAP)->MAT } ) == 0
				Aadd(aQdGDoc,{"","",(cTRBTAP)->CODFUN,(cTRBTAP)->OPERAC,(cTRBTAP)->MAT,cNomeFun})
			EndIf
		dbSelectArea(cTRBTAP)
		DbSkip()
	End
	dbSelectArea(cTRBTAK)
	dbSetOrder(1)
	dbSeek(cLocal)
	While !Eof() .And. (cTRBTAK)->CODNIV == cLocal
			DbSelectArea("QAA")
			DbSetOrder(1)
			If DbSeek(xFilial("QAA")+(cTRBTAK)->MAT)
				cNomeFun := QAA->QAA_NOME
			EndIf
			If aScan( aQdgDoc,{|x| x[5] == (cTRBTAK)->MAT } ) == 0
				Aadd(aQdGDoc,{"","",(cTRBTAK)->CODFUN,(cTRBTAK)->OPERAC,(cTRBTAK)->MAT,cNomeFun})
			EndIf
		dbSelectArea(cTRBTAK)
		DbSkip()
	End

	aQdGDoc := aSort( aQdGDoc,,,{|x,y| x[3] < y[3]} )

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Sg100Bar  ³ Autor ³ Thiago Machado        ³ Data ³ 13.04.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ EnchoiceBar especifica do Sgaa100                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function SgRespBar(oDlg,bOk,bCancel,bCria,nOpca)
Return (EnchoiceBar(oDlg,bOk,bCancel,,))

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Sg100Troca³ Autor ³ Rafael Diogo Richter  ³ Data ³ 03/03/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Altera a Ordem dos itens na estrutura.                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100Troca(nUpDown,oTree)

	Local cAtual
	Local aArea := GetArea()
	Local cDesc := AllTrim( oTree:GetPrompt() )
	oTree:bChange:= {||}

	cAtual := oTree:GetCargo()

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst+Substr(cAtual,1,3))
		If (cTRBSGA)->TIPO == "1"
			dbSelectArea("ST9")
			dbSetOrder(1)
			If dbSeek(xFilial("ST9")+(cTRBSGA)->CODTIPO)
				cDesc := AllTrim(ST9->T9_CODBEM)+" - "+AllTrim(ST9->T9_NOME)+" "
			EndIf
		ElseIf (cTRBSGA)->TIPO == "3"
			dbSelectArea("SRJ")
			dbSetOrder(1)
			If dbSeek(xFilial("SRJ")+(cTRBSGA)->CODTIPO)
				cDesc := AllTrim(SRJ->RJ_FUNCAO)+" - "+AllTrim(SRJ->RJ_DESC)+" "
			EndIf
		ElseIf (cTRBSGA)->TIPO == "4"
			dbSelectArea("TN5")
			dbSetOrder(1)
			If dbSeek(xFilial("TN5")+(cTRBSGA)->CODTIPO)
				cDesc := AllTrim(TN5->TN5_CODTAR)+" - "+AllTrim(TN5->TN5_NOMTAR)+" "
			EndIf
		EndIf
	EndIf

	MsgAlert(STR0083+cDesc+STR0084) //"Informe abaixo de qual nivel o "###" ficará"

	oTree:blClicked := { || Processa( { |lEnd | Sg100NTroc(cAtual),   oTree:TreeSeek((oTree:cArqTree)->T_CARGO) }) }

	RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Sg100Ident³ Autor ³ Rafael Diogo Richter  ³ Data ³17/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Programa para Inclusao de uma identificacao atraves dos     ³±±
±±³          ³botoes localizados no lado direito da tela.                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Tabelas   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100Ident(nOpc)

	If !VldIdent(nOpc)
		Return .T.
	EndIf

	If lFstChoice
		If nOpc == 1
			Sg100Local('X','','',3,1)
		ElseIf nOpc == 2
			Sg100DbClick()
		ElseIf nOpc == 3
			Sg100Del()
		Else
			Sg100DbClick(2)
		EndIf
	ElseIf lSndChoice
		If nOpc == 1
			Sg100Local('','','X',3,2)
		ElseIf nOpc == 2
			Sg100DbClick()
		ElseIf nOpc == 3
			Sg100Del(2)
		Else
			Sg100DbClick(2)
		EndIf
	Else
		If nOpc == 1
			Sg100Local('','X','',3,3)
		ElseIf nOpc == 2
			Sg100DbClick()
		ElseIf nOpc == 3
			Sg100Del(3)
		Else
			Sg100DbClick(2)
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³VldIdent  ³ Autor ³ Rafael Diogo Richter  ³ Data ³17/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Valida identificação										  ³±±
±±³          ³															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Tabelas   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function VldIdent(nOpc)

	If lFstChoice
		If Str(nOpc,1) $ "1,2"
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			If dbSeek( cCodEst + SubStr( oTree:GetCargo(), 1, 3 ) ) .And. ( lSitNiv .And. (cTRBSGA)->SITNIV == "2" )
				ShowHelpDlg(STR0078,{STR0123 + CRLF + STR0124},1,; // "Atenção!" ## ""O nível está inativo." ## "A operação não é permitida para um nivel inativo."
								{STR0125},2)                            // "Ative o nível para realizar a operação desejada."
				Return .F.
			EndIf
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Sg100NTroc³ Autor ³ Thiago Olis Machado   ³ Data ³17/03/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Tabelas   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100NTroc(cAtual)

	Local aArea := (cTRBSGA)->(GetArea())
	Local cNivSup, cNivel, cValNivel, cValNivAtu
	Local aAreaTCJ := {}
	Local i, aTree := {}
	Local cDesc := AllTrim( oTree:GetPrompt() )
	Local cNovo, lAltOrd

	If SubStr(oTree:GetCargo(),1,3) = '001'
		Help(" ",1,"NGATENCAO",,STR0087+Chr(13)+Chr(10)+ STR0088,3,1) //"Não é permitido mover itens para o"###" mesmo nível do pai da estrutura"
		oTree:blClicked := { || }
		oTree:bChange:= {||SG100VChg()}
		CursorArrow()
		Return .F.
	EndIf

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst+Substr(cAtual,1,3))
		cValNivel := (cTRBSGA)->NIVEL
	EndIf

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst+Substr(oTree:GetCargo(),1,3))
		cValNivAtu := (cTRBSGA)->NIVEL
	EndIf

	If cValNivAtu <> cValNivel
		ShowHelpDlg( STR0082, { STR0131 }, 2,; // "ATENÇÃO" ## "Não é permitido alterar a ordem de níveis diferentes!"
										{ STR0132 }, 2 ) // "Altere a ordem de um nível para um mesmo nível."
		oTree:blClicked := { || }
		oTree:bChange:= {||SG100VChg()}
		CursorArrow()
		Return .F.
	EndIf

	If oTree:GetCargo() == cAtual
		oTree:blClicked := { || }
		oTree:bChange:= {||SG100VChg()}
		CursorArrow()
		Return .F.
	EndIf

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst+Substr(oTree:GetCargo(),1,3))
		If (cTRBSGA)->TIPO == "1"
			dbSelectArea("ST9")
			dbSetOrder(1)
			If dbSeek(xFilial("ST9")+(cTRBSGA)->CODTIPO)
				cDesc := AllTrim(ST9->T9_CODBEM)+" - "+AllTrim(ST9->T9_NOME)+" "
			EndIf
		ElseIf (cTRBSGA)->TIPO == "3"
			dbSelectArea("SRJ")
			dbSetOrder(1)
			If dbSeek(xFilial("SRJ")+(cTRBSGA)->CODTIPO)
				cDesc := AllTrim(SRJ->RJ_FUNCAO)+" - "+AllTrim(SRJ->RJ_DESC)+" "
			EndIf
		ElseIf (cTRBSGA)->TIPO == "4"
			dbSelectArea("TN5")
			dbSetOrder(1)
			If dbSeek(xFilial("TN5")+(cTRBSGA)->CODTIPO)
				cDesc := AllTrim(TN5->TN5_CODTAR)+" - "+AllTrim(TN5->TN5_NOMTAR)+" "
			EndIf
		EndIf
	EndIf

	If !MsgYesNo( STR0085+cDesc ) //"Confirma que o item ficará abaixo do "
		oTree:blClicked := { || }
		oTree:bChange:= {||SG100VChg()}
		CursorArrow()
		Return .F.
	EndIf

	cNovo := oTree:GetCargo()

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek(cCodEst+SubStr(cNovo,1,3))
	cFather := (cTRBSGA)->NIVSUP
	cOrdem	:= (cTRBSGA)->ORDEM
	cNivel	:= (cTRBSGA)->NIVEL
	nRec	:= (cTRBSGA)->(Recno())

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek(cCodEst+cFather)

	If (cTRBSGA)->TIPO == '1'
		cCarSup	:= 'BEM'
	ElseIf (cTRBSGA)->TIPO == '2'
		cCarSup	:= 'LOC'
	ElseIf (cTRBSGA)->TIPO == '3'
		cCarSup	:= 'FUN'
	Else
		cCarSup	:= 'TAR'
	EndIf

	DbSelectArea(cTRBSGA)
	DbSetOrder(2)
	DbSeek(cCodEst+SubStr(cAtual,1,3))

	If (cTRBSGA)->NIVSUP == "000"
		MsgStop(STR0086,STR0078) //"Esse item já se encontra no primeiro nível da estrutura."###"Atenção!"
		oTree:blClicked := { || }
		oTree:bChange:= {||SG100VChg()}
		CursorArrow()
		Return .F.
	EndIf

	cNivSup := (cTRBSGA)->NIVSUP

	RecLock(cTRBSGA,.F.)
	(cTRBSGA)->NIVSUP := cFather
	(cTRBSGA)->NIVEL  := cNivel
	MsUnlock(cTRBSGA)

	aAreaTCJ := GetArea()
	dbSelectArea('TRBTCJ')
	dbSetOrder(1)
	If !dbSeek((cTRBSGA)->CODPRO+cNivSup+"O"+DTOS(dDataBase)+Time())
		RecLock('TRBTCJ',.T.)
		TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
		TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
		TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
		TRBTCJ->DATAPRO := dDataBase
		TRBTCJ->HORAPRO := Time()
		TRBTCJ->TIPROC  := "O"
		TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
		TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
		TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
		TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
		MsUnLock('TRBTCJ')
	EndIf
	dbSelectArea("TRBTCJ")
	dbSetOrder(1)
	dbSeek((cTRBSGA)->CODPRO)
	While !Eof() .And. TRBTCJ->CODNIV == (cTRBSGA)->CODPRO
		If TRBTCJ->NIVSUP <> (cTRBSGA)->NIVSUP
			RecLock("TRBTCJ",.F.)
			TRBTCJ->NIVSUP := (cTRBSGA)->NIVSUP
			TRBTCJ->NIVEL  := (cTRBSGA)->NIVEL
			MsUnlock("TRBTCJ")
		EndIf
		dbSelectArea("TRBTCJ")
		dbSkip()
	End
	RestArea(aAreaTCJ)

	lAltOrd := .F.
	dbSelectArea(cTRBSGA)
	dbSetOrder(4)
	dbSeek(cCodEst+cFather)
	While !Eof() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == cFather

		If (cTRBSGA)->(Recno()) == nRec
			lAltOrd := .T.
			(cTRBSGA)->(dbSkip())
			Loop
		EndIf

		If lAltOrd
			cNewOrd := (cTRBSGA)->ORDEM
			RecLock(cTRBSGA,.F.)
			(cTRBSGA)->ORDEM  := Soma1(cNewOrd)
			MsUnlock(cTRBSGA)
		EndIf

		(cTRBSGA)->(dbSkip())
	End

	DbSelectArea(cTRBSGA)
	DbSetOrder(2)
	DbSeek(cCodEst+SubStr(cAtual,1,3))
	RecLock(cTRBSGA,.F.)
	(cTRBSGA)->ORDEM  := Soma1(cOrdem)
	MsUnlock(cTRBSGA)

	ProcRegua(RecCount())

	oTree:TreeSeek(cAtual)
	oTree:DelItem()

	dbSelectArea(oTree:cArqTree)
	dbSetOrder(4)
	dbSeek(cFather+cCarSup)
	cIDItem := (oTree:cArqTree)->T_IDCODE

	dbSelectArea(oTree:cArqTree)
	dbSetOrder(2)
	dbSeek(cIDItem)
	While !Eof() .And. (oTree:cArqTree)->T_IDTREE == cIDItem
		aAdd(aTree,(oTree:cArqTree)->T_CARGO)
		(oTree:cArqTree)->(dbSkip())
	End
	//Deleta itens da arvore
	For i := 1 To Len(aTree)
		oTree:TreeSeek(aTree[i])
		oTree:DelItem()
	Next i

	//Recria a arvore
	MsgRun(STR0102,STR0103,{||Sg100DelAr(cFather,cCarSup)}) //"Alterando Ordem dos itens"###"Aguarde"

	dbSelectArea(cTRBSGA)
	dbSetOrder(4)
	dbSeek("001"+cFather)

	SetTpNiv( (cTRBSGA)->TIPO, 2, !lSitNiv .Or. (cTRBSGA)->SITNIV <> "2" ) // Define variaveis de controle para tree

	//Não permite incluir registros deletados na árvore
	While !Eof() .And. !Empty((cTRBSGA)->DELETADO)
		DbSkip()
	EndDo

	If !Eof()
		oTree:TreeSeek(cFather+cCarSup)
		oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargo+' ',cFolderA,cFolderB,,, 2)

		nPos := aScan(aItensCar, {|x| x == cFather+cCarSup})
		If nPos == 0
			Aadd(aItensCar,cFather+cCarSup)
			Processa({||SG100ChgAr(cFather,cCarSup)},STR0103,STR0104,.T.) //"Aguarde"###"Carregando itens filhos"
		EndIf

		Aadd(aItensCar,cAtual)
		Processa({||SG100ChgAr(SubStr(cAtual,1,3),SubStr(cAtual,4,6))},STR0103,STR0104,.T.) //"Aguarde"###"Carregando itens filhos"

	EndIf

	oTree:blClicked := { || }
	oTree:bChange:= {||SG100VChg()}
	CursorArrow()

	DbSelectArea(cTRBSGA)
	DbSetOrder(4)

	RestArea(aArea)
	oTree:TreeSeek(cAtual)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ SG100Chg ³ Autor ³ Rafael Diogo Richter  ³ Data ³14/04/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Monta os filhos do item selecionado.                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function SG100Chg(cCodNiv,cCarSup,nMod,aNivMrk)

	Local cAliasQry
	Local lFirst   := .T.
	Local lAtivo   := .T.
	Local lPAlter  := .F.
	Local lTmpSit  := .T.
	Local lAllIntv
	Local lFamilia:= NGCADICBASE('TAF_CODFAM','D','TAF',.F.)

	Local lBmp := IsInCallStack("Sg100Pro")
	Local cBmp := SetBmpTree(lBmp)

	Default aNivMrk := { { _NoVrfSit } } // Define por default, que todos os niveis serao apresentados, indiferente da situacao

	lAllIntv  := aScan( aNivMrk, {|x| x[1] == _NoVrfSit } ) > 0 // Verifica se todos os niveis inativos serao apresentados

	#IFDEF TOP
		cAliasQry := GetNextAlias()
		cQuery := " SELECT COUNT(*) nCount FROM "+RetSqlName("TAF")+" TAF "
		cQuery += " WHERE TAF.TAF_FILIAL = '"+xFilial("TAF")+"' AND TAF.TAF_NIVSUP = '"+cCodNiv+"' AND TAF.D_E_L_E_T_ <> '*'"
		cQuery := ChangeQuery(cQuery)
		MPSysOpenQuery( cQuery , cAliasQry )

		dbSelectArea(cAliasQry)
		dbGoTop()
		If !Eof()
			ProcRegua((cAliasQry)->nCount)
		EndIf
		(cAliasQry)->(dbCloseArea())
	#EndIf

	// Verifica se o pai esta inativo
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek( cCodEst + cCodNiv )
		lAtivo  := !lSitNiv .Or. (cTRBSGA)->SITNIV <> "2"
		lPAlter := lSitNiv .And. (cTRBSGA)->ATFIL == "1" // Verifica se o pai foi alterado em tela
	EndIf

	DbSelectArea('TAF')
	DbSetOrder(1)
	If DbSeek(xFilial('TAF')+cCodEst+cCodNiv)
		While !TAF->(Eof()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And.;
			TAF->TAF_NIVSUP == cCodNiv

			IncProc() // Incrementa regua de processamento

			If TAF->TAF_INDCON == '0' //Ilustracao - Planta Grafica
				TAF->(DbSkip())
				Loop
			EndIf

			If nMod == 3 .And. Empty(TAF->TAF_MODSGA)
				TAF->(DbSkip())
				Loop
			EndIf

			If nMod == 4 .And. Empty(TAF->TAF_MODMNT)
				TAF->(DbSkip())
				Loop
			EndIf

			If nMod == 5 .And. Empty(TAF->TAF_MODMDT)
				TAF->(DbSkip())
				Loop
			EndIf

			// Verifica se o nivel e' inativo, e se deve apresentar itens inativos
			If lSitNiv .And. TAF->TAF_SITNIV == "2" .And. ( !lAllIntv .And. !ShowIntv( TAF->TAF_CODNIV, aNivMrk ) )
				TAF->(DbSkip())
				Loop
			EndIf

			If FindFunction("NGValidTUA") .And. !NGValidTUA()
				dbSelectArea("TAF")
				dbSkip()
				Loop
			EndIf

			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbSeek("001"+cCodNiv)

			nNivel := (cTRBSGA)->NIVEL
			lTmpSit := !lSitNiv .Or. ( (lAtivo .And. lPAlter) .Or. (!lPAlter .And. TAF->TAF_SITNIV <> "2" ) )

			// Verifica se o item esta inativo, a situacao do pai e situacao do nivel em questao
			SetTpNiv( TAF->TAF_INDCON, 2, lTmpSit ) // Define variaveis de controle para tree

			If !lFirst

				If TAF->TAF_INDCON == '1'
					dbSelectArea("ST9")
					dbSetOrder(1)
					If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
						If ST9->T9_SITBEM == "I" .Or. ST9->T9_SITBEM == "T"
							TAF->(dbSkip())
							Loop
						EndIf
					Else
						TAF->(dbSkip())
						Loop
					EndIf
				EndIf

				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				If !dbSeek(cCodEst+TAF->TAF_CODNIV)
					RecLock(cTRBSGA,.T.)
					(cTRBSGA)->CODEST  := cCodEst
					(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
					(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV   	//cDesc
					(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP		//cNivSup
					(cTRBSGA)->RESPONS := TAF->TAF_MAT			//cMat
					(cTRBSGA)->TIPO    := TAF->TAF_INDCON		//cIndCon
					(cTRBSGA)->CODTIPO := TAF->TAF_CODCON		//cCodCon
					(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL		//cFilDoc
					(cTRBSGA)->CC      := TAF->TAF_CCUSTO		//cCC
					(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA		//cCT
					(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA		//cModSga
					(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT		//cModMnt
					(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT		//cModMdt
					(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM		//cOrdem
					(cTRBSGA)->AMBIE   := TAF->TAF_CODAMB
					(cTRBSGA)->DEPTO   := TAF->TAF_DEPTO

					If lRetS
						(cTRBSGA)->ETAPA	 := TAF->TAF_ETAPA
					EndIf

					If lRateio
						(cTRBSGA)->RATEIO  := TAF->TAF_RATEIO
					EndIf
					If lFamilia
						(cTRBSGA)->CODFAM := TAF->TAF_CODFAM
					EndIf
					If lSitNiv // Verifica se deve analisar situacao do nivel
						(cTRBSGA)->SITNIV  := If( lTmpSit, "1", "2" )
						(cTRBSGA)->ATFIL  := If( lPAlter, "1", "0" )
					EndIf

					(cTRBSGA)->OPERAC	:= "A"
					(cTRBSGA)->NIVEL   := nNivel

					If !oTree:TreeSeek((cTRBSGA)->CODPRO) .And. Empty((cTRBSGA)->DELETADO)
						cBmp := SetBmpTree(lBmp)
						oTree:TreeSeek(TAF->TAF_NIVSUP+cCarSup)
						oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargo+cBmp,cFolderA,cFolderB,,, 2)
					EndIf
				Else
					oTree:TreeSeek(TAF->TAF_NIVSUP+cCarSup)
				EndIf
			Else
				lFirst := .F.

				cBmp := SetBmpTree(lBmp)
				oTree:ChangeBmp( cFolderA, cFolderB, , , (cTRBSGA)->CODPRO+cCargo+cBmp )	// Folder vermelho fechado e aberto

			EndIf

			aAreaTAF := TAF->(GetArea())

			dbSelectArea('TAF')
			dbSetOrder(1)
			If dbSeek(xFilial('TAF')+cCodEst+(cTRBSGA)->CODPRO)
				While !TAF->(Eof()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And.;
					TAF->TAF_NIVSUP == (cTRBSGA)->CODPRO

					If TAF->TAF_INDCON == '0' //Ilustracao - Planta Grafica
						TAF->(DbSkip())
						Loop
					EndIf

					// Verifica se o nivel e' inativo, e se deve apresentar itens inativos
					If lSitNiv .And. TAF->TAF_SITNIV == "2" .And. ( !lAllIntv .And. !ShowIntv( TAF->TAF_CODNIV, aNivMrk ) )
						TAF->(DbSkip())
						Loop
					EndIf

					lTmpSit := !lSitNiv .Or. ( (lAtivo .And. lPAlter) .Or. (!lPAlter .And. TAF->TAF_SITNIV <> "2" ) )

					// Define variaveis de controle para tree
					SetTpNiv( TAF->TAF_INDCON, 2, lTmpSit, {"cFolderA","cFolderB","cCarFil"} )

					If TAF->TAF_INDCON == '1'
						dbSelectArea("ST9")
						dbSetOrder(1)
						If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
							If ST9->T9_SITBEM == "I" .Or. ST9->T9_SITBEM == "T"
								TAF->(dbSkip())
								Loop
							EndIf
						Else
							TAF->(dbSkip())
							Loop
						EndIf
					EndIf

					If FindFunction("NGValidTUA") .And. !NGValidTUA()
						dbSelectArea("TAF")
						dbSkip()
						Loop
					EndIf

					nRec:=(cTRBSGA)->(RECNO())

					DbSelectArea(cTRBSGA)
					dbSetOrder(2)
					If !dbSeek(cCodEst+TAF->TAF_CODNIV)
						RecLock(cTRBSGA,.T.)
						(cTRBSGA)->CODEST  := cCodEst
						(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
						(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV   	//cDesc
						(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP		//cNivSup
						(cTRBSGA)->RESPONS := TAF->TAF_MAT			//cMat
						(cTRBSGA)->TIPO    := TAF->TAF_INDCON		//cIndCon
						(cTRBSGA)->CODTIPO := TAF->TAF_CODCON		//cCodCon
						(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL		//cFilDoc
						(cTRBSGA)->CC      := TAF->TAF_CCUSTO		//cCC
						(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA		//cCT
						(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA		//cModSga
						(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT		//cModMnt
						(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT		//cModMdt
						(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM		//cOrdem

						If lRetS
							(cTRBSGA)->ETAPA	 := TAF->TAF_ETAPA
						EndIf

						If lRateio
							(cTRBSGA)->RATEIO  := TAF->TAF_RATEIO
						EndIf
						If lFamilia
							(cTRBSGA)->CODFAM := TAF->TAF_CODFAM
						EndIf
						If lSitNiv // Verifica se deve analisar situacao do nivel
							(cTRBSGA)->SITNIV  := If( lTmpSit, "1", "2" )
							(cTRBSGA)->ATFIL  := If( lPAlter, "1", "0" )
						EndIf

						(cTRBSGA)->OPERAC	:= "A"
						(cTRBSGA)->NIVEL   := nNivel+1
						(cTRBSGA)->(DbGoto(nRec))

						If !oTree:TreeSeek(TAF->TAF_CODNIV)
							oTree:TreeSeek(TAF->TAF_NIVSUP+cCargo)
							oTree:AddItem(TAF->TAF_NOMNIV,TAF->TAF_CODNIV+cCarFil+' ',cFolderA,cFolderB,,, 2)
						EndIf
					Else
						oTree:TreeSeek(TAF->TAF_NIVSUP+cCargo)
					EndIf
					Exit
				End
			EndIf

		RestArea(aAreaTAF)

		oTree:TreeSeek(aItensCar[Len(aItensCar)])

			dbSelectArea("TAF")
			TAF->(DbSkip())
		End
	EndIf

	oTree:TreeSeek(oTree:GetCargo())

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Sg100VChg ³ Autor ³ Rafael Diogo Richter  ³ Data ³15/04/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Verifica se o item selecionado ja foi carregado             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100VChg( nMod, aNivMrk )

	Local cCodNiv := SubStr(oTree:GetCargo(),1,3)
	Local cCargo := SubStr(oTree:GetCargo(),4,3)
	Local cPriNiv := ""
	Local nPos := 0
	Local nFil := 0
	Local lPai := .F.
	Local lAtivo := .T.

	Default nMod := 0
	Default aNivMrk := { { _NoVrfSit } } // Define por default, que todos os niveis serao apresentados, indiferente da situacao

	dbSelectArea(oTree:cArqTree)
	dbSetOrder(4)
	dbSeek(cCodNiv+cCargo)
	If (oTree:cArqTree)->T_ISTREE == "S"
		lPai := .T.
	EndIf

	nPos := aScan(aItensCar, {|x| x == cCodNiv+cCargo})
	If nPos == 0 .And. lPai
		Aadd(aItensCar,cCodNiv+cCargo)

		dbSelectArea(cTRBSGA)
		dbSetOrder(1)
		dbSeek(cCodEst+cCodNiv)
		While !Eof() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == cCodNiv
			cPriNiv := (cTRBSGA)->CODPRO
			nFil++
			If nFil >= 2
				Exit
			EndIf
			(cTRBSGA)->(dbSkip())
		End

		If nFil == 1 .And. !Empty(cPriNiv)
			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			If dbSeek(cCodEst+cPriNiv)
				nFil++
			EndIf
		EndIf

		If nMod == 0
			If lFstChoice
				nMod := 3
			ElseIf	lSndChoice
				nMod := 5
			ElseIf 	lTrdChoice
				nMod := 4
			EndIf
		EndIf

		If nFil > 1
			Processa({|| SG100ChgAr(cCodNiv,cCargo,nMod,aNivMrk) },STR0103,STR0104,.T.) //"Aguarde"###"Carregando itens filhos"
		Else
			Processa({|| SG100Chg(cCodNiv,cCargo,nMod,aNivMrk)},STR0103,STR0104,.T.) //"Aguarde"###"Carregando itens filhos"
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Sg100DelAr³ Autor ³ Rafael Diogo Richter  ³ Data ³15/04/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Deleta os itens do array aItensCar                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100DelAr(cFather,cCarSup)

	Local nPos
	Local cCargo

	nPos := aScan(aItensCar, {|x| x == cFather+cCarSup})
	If nPos > 0
		aDel(aItensCar,nPos)
		aSize(aItensCar, Len(aItensCar)-1)
	EndIf

	dbSelectArea(cTRBSGA)
	dBSetOrder(1)
	dbSeek(cCodEst+cFather)
	While !Eof() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == cFather

		If (cTRBSGA)->TIPO == '1'
			cCargo   := 'BEM'
		ElseIf (cTRBSGA)->TIPO == '2'
			cCargo := 'LOC'
		ElseIf (cTRBSGA)->TIPO == '3'
			cCargo := 'FUN'
		Else
			cCargo := 'TAR'
		EndIf

		cCodNiv := (cTRBSGA)->CODPRO

		nTRBSGA := (cTRBSGA)->(Recno())

		dbSelectArea(cTRBSGA)
		If dbSeek(cCodEst+cCodNiv)
			nPos := aScan(aItensCar, {|x| x == cCodNiv+cCargo})
			If nPos > 0
				aDel(aItensCar,nPos)
				aSize(aItensCar, Len(aItensCar)-1)
			EndIf
			Sg100DelAF((cTRBSGA)->CODPRO,cCargo)
		EndIf

		dbSelectArea(cTRBSGA)
		dbGoto(nTRBSGA)
		(cTRBSGA)->(dbSkip())
	End

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Sg100DelAF³ Autor ³ Rafael Diogo Richter  ³ Data ³15/04/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Deleta os itens do array aItensCar                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100DelAF(cFather,cCarSup)

	Local nPos
	Local cCargo

	nPos := aScan(aItensCar, {|x| x == cFather+cCarSup})
	If nPos > 0
		aDel(aItensCar,nPos)
		aSize(aItensCar, Len(aItensCar)-1)
	EndIf

	dbSelectArea(cTRBSGA)
	dBSetOrder(1)
	dbSeek(cCodEst+cFather)
	While !Eof() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == cFather

		If (cTRBSGA)->TIPO == '1'
			cCargo   := 'BEM'
		ElseIf (cTRBSGA)->TIPO == '2'
			cCargo := 'LOC'
		ElseIf (cTRBSGA)->TIPO == '3'
			cCargo := 'FUN'
		Else
			cCargo := 'TAR'
		EndIf

		cCodNiv := (cTRBSGA)->CODPRO

		nTRBSGA := (cTRBSGA)->(Recno())

		dbSelectArea(cTRBSGA)
		If dbSeek(cCodEst+cCodNiv)
			nPos := aScan(aItensCar, {|x| x == cCodNiv+cCargo})
			If nPos > 0
				aDel(aItensCar,nPos)
				aSize(aItensCar, Len(aItensCar)-1)
			EndIf
			Sg100DelAF((cTRBSGA)->CODPRO,cCargo)
		EndIf

		dbSelectArea(cTRBSGA)
		dbGoto(nTRBSGA)
		(cTRBSGA)->(dbSkip())
	End

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³SG100ChgAr³ Autor ³ Rafael Diogo Richter  ³ Data ³14/04/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Monta os filhos do item selecionado.                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function SG100ChgAr(cCodNiv, cCargo, nMod, aNivMrk)

	Local cAliasQry, lAtvFil
	Local lFirst := .T.
	Local lAtivo := .T.
	Local lAllIntv := .F.

	Local lBmp := IsInCallStack("Sg100Pro")
	Local cBmp := SetBmpTree(lBmp)

	Default lSitNiv := .T.
	Default aNivMrk   := { { _NoVrfSit } }

	lAllIntv  := aScan( aNivMrk, {|x| x[1] == _NoVrfSit } ) > 0 // Verifica se todos os niveis inativos serao apresentados

	#IFDEF TOP
		cAliasQry := GetNextAlias()
		cQuery := " SELECT COUNT(*) nCount FROM "+RetSqlName("TAF")+" TAF "
		cQuery += " WHERE TAF.TAF_FILIAL = '"+xFilial("TAF")+"' AND TAF.TAF_NIVSUP = '"+cCodNiv+"' AND TAF.D_E_L_E_T_ <> '*'"
		cQuery := ChangeQuery(cQuery)
		MPSysOpenQuery( cQuery , cAliasQry )

		dbSelectArea(cAliasQry)
		dbGoTop()
		If !Eof()
			ProcRegua((cAliasQry)->nCount)
		EndIf
		(cAliasQry)->(dbCloseArea())
	#EndIf

	// Verifica se o pai esta inativo
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst+cCodNiv)
		lAtivo  := !lSitNiv .Or. (cTRBSGA)->SITNIV <> "2"
		lPAlter := lSitNiv .And. (cTRBSGA)->ATFIL == "1" // Verifica se o pai foi alterado em tela
	EndIf

	DbSelectArea(cTRBSGA)
	DbSetOrder(4)
	If DbSeek(cCodEst+cCodNiv)
		While !(cTRBSGA)->(Eof()) .And. (cTRBSGA)->CODEST == cCodEst .And.;
			(cTRBSGA)->NIVSUP == cCodNiv

			IncProc() // Incrementa regua de processamento

			If nMod == 3 .And. Empty((cTRBSGA)->MODSGA)
				(cTRBSGA)->(DbSkip())
				Loop
			EndIf

			If nMod == 4 .And. Empty((cTRBSGA)->MODMNT)
				(cTRBSGA)->(DbSkip())
				Loop
			EndIf

			If nMod == 5 .And. Empty((cTRBSGA)->MODMDT)
				(cTRBSGA)->(DbSkip())
				Loop
			EndIf

			// Verifica se o nivel e' inativo, e se deve apresentar itens inativos
			If lSitNiv .And. (cTRBSGA)->SITNIV == "2" .And. ( !lAllIntv .And. !ShowIntv( (cTRBSGA)->CODPRO, aNivMrk ) )
				(cTRBSGA)->(DbSkip())
				Loop
			EndIf

			nRecTRB := (cTRBSGA)->(RECNO())

			nNivel 	:= (cTRBSGA)->NIVEL
			cCodNivF := (cTRBSGA)->CODPRO

			lAtvFil := ( lAtivo .And. (!lSitNiv .Or. (cTRBSGA)->SITNIV <> "2") ) // Verifica se nivel filho esta ativo
			SetTpNiv( (cTRBSGA)->TIPO, 2, !lSitNiv .Or. lAtvFil, {"cFolderA","cFolderB","cCargoF"} ) // Define variaveis de controle para tree

			If !lFirst
				If (cTRBSGA)->TIPO == '1'
					dbSelectArea("ST9")
					dbSetOrder(1)
					If dbSeek(xFilial("ST9")+(cTRBSGA)->CODTIPO)
						If ST9->T9_SITBEM == "I" .Or. ST9->T9_SITBEM == "T"
							(cTRBSGA)->(dbSkip())
							Loop
						EndIf
					Else
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf
				EndIf

				dbSelectArea(oTree:cArqTree)
				dbSetOrder(4)

				If !dbSeek((cTRBSGA)->CODPRO) .And. Empty((cTRBSGA)->DELETADO)
					cBmp := SetBmpTree(lBmp)
					oTree:TreeSeek((cTRBSGA)->NIVSUP+cCargo)
					oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargoF+cBmp,cFolderA,cFolderB,,, 2)
				EndIf

			Else
				lFirst := .F.
			EndIf

			If Empty((cTRBSGA)->DELETADO)
				dbSelectArea(cTRBSGA)
				dbSetOrder(4)
				If dbSeek(cCodEst+cCodNivF)
					While !(cTRBSGA)->(Eof()) .And. (cTRBSGA)->CODEST == cCodEst .And.;
						(cTRBSGA)->NIVSUP == cCodNivF

						oTree:TreeSeek(cCodNivF+cCargoF)
						SetTpNiv( (cTRBSGA)->TIPO, 2, !lSitNiv .Or. lAtvFil, {"cFolderA","cFolderB","cCargoF1"} ) // Define variaveis de controle para tree

						If (cTRBSGA)->TIPO == '1'
							dbSelectArea("ST9")
							dbSetOrder(1)
							If dbSeek(xFilial("ST9")+(cTRBSGA)->CODTIPO)
								If ST9->T9_SITBEM == "I" .Or. ST9->T9_SITBEM == "T"
									(cTRBSGA)->(dbSkip())
									Loop
								EndIf
							Else
								(cTRBSGA)->(dbSkip())
								Loop
							EndIf
						EndIf
						dbSelectArea(oTree:cArqTree)
						dbSetOrder(4)
						If !dbSeek((cTRBSGA)->CODPRO)
							cBmp := SetBmpTree(lBmp)
							oTree:TreeSeek((cTRBSGA)->NIVSUP+cCargoF)
							oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargoF1+cBmp,cFolderA,cFolderB,,, 2)
						EndIf
						Exit
					End
				EndIf
			EndIf
			oTree:TreeSeek(cCodNiv+cCargo)

			dbSelectArea(cTRBSGA)
			dbSetOrder(4)
			dbGoTo(nRecTRB)
			(cTRBSGA)->(DbSkip())
		End
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ Sg100Cpy ³ Autor ³ Rafael Diogo Richter  ³ Data ³08/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Faz a copia do item selecionado.                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100Cpy()

	cNivCpy := oTree:GetCargo()

	If SubStr(cNivCpy,4,6) <> "LOC"
		MsgStop(STR0105,STR0082) //"O item selecionado não é uma localização. Cópia cancelada."###"Atenção"
		Return .F.
	EndIf

	If oMenu <> Nil
		oMenu:hide()
		MsFreeObj(@oMenu,.T.)
		oMenu:End()
		oMenu:=NIL
	EndIf

	aSMenu := SG100PERF(.T.)

	Sg100Pop(@AsMenu,@oMenu)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ Sg100Pop ³ Autor ³ Rafael Diogo Richter  ³ Data ³10/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Cria o menu Popup do item selecionado                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100Pop(aSMenu,oMenu)

	Local nX,cImg
	Local oItem
	Local lDis

	oMenu := TMenu():New(0,0,0,0,.T.,,Nil)
	If Len(aSMenu) > 0
		For nX := 1 to Len(aSMenu)
		//Verifica posicao 3 - Imagem da opcao do clique
			cImg := If(Len(aSMenu[nX]) >= 3,aSMenu[nX][3],Nil)
			lDis := If(Len(aSMenu[nX]) >= 4,aSMenu[nX][4],Nil)

			oItem := TMenuItem():New(oMenu:Owner(),aSMenu[nX][1],,,,&("{|| "+aSMenu[nX][2]+"}"),,cImg,,,,,,,.T.)
			oMenu:Add(oItem)
		Next nX
	EndIf

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ Sg100ClC ³ Autor ³ Rafael Diogo Richter  ³ Data ³31/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Cancela a copia do item.                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100ClC()

	If oMenu <> Nil
		oMenu:hide()
		MsFreeObj(@oMenu,.T.)
		oMenu:End()
		oMenu:=NIL
	EndIf

	aSMenu := SG100PERF()

	Sg100Pop(@AsMenu,@oMenu)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ Sg100Clr ³ Autor ³ Rafael Diogo Richter  ³ Data ³31/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Cola o item copiado.                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Sg100Clr()

	Local aTree := {}
	Local cNivClr := oTree:GetCargo()
	Local k, aAreaTCJ := {}

	If SubStr(cNivClr,4,6) <> "LOC"
		MsgStop(STR0105,STR0082) //"O item selecionado não é uma localização. Cópia cancelada."###"Atenção"
	Else
		nPos := aScan(aItensCar, {|x| x == cNivClr})
		If nPos == 0
			Aadd(aItensCar,cNivClr)
		EndIf

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek(cCodEst+SubStr(cNivCpy,1,3))
			aAdd(aTree,{(cTRBSGA)->CODEST,(cTRBSGA)->CODPRO,(cTRBSGA)->DESCRI,(cTRBSGA)->NIVSUP,(cTRBSGA)->RESPONS,(cTRBSGA)->CC,(cTRBSGA)->CENTRAB,;
							(cTRBSGA)->DOCFIL,(cTRBSGA)->TIPO,(cTRBSGA)->CODTIPO,(cTRBSGA)->MODSGA,(cTRBSGA)->MODMDT,(cTRBSGA)->MODMNT,(cTRBSGA)->ORDEM,(cTRBSGA)->NIVEL,(cTRBSGA)->SITNIV})

			Aadd(aItensCar,((cTRBSGA)->CODPRO)+"LOC")
		EndIf

		k:= 1
		While k <= Len(aTree)
			nPos := aScan(aItensCar, {|x| x == aTree[k][2]+If((cTRBSGA)->TIPO=="1","BEM","LOC")})
			If nPos > 0
				dbSelectArea(cTRBSGA)
				dbSetOrder(1)
				dbSeek(cCodEst+aTree[k][2])
				While !Eof() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == aTree[k][2]
					If !Empty((cTRBSGA)->DELETADO)
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf
					aAdd(aTree,{(cTRBSGA)->CODEST,(cTRBSGA)->CODPRO,(cTRBSGA)->DESCRI,(cTRBSGA)->NIVSUP,(cTRBSGA)->RESPONS,(cTRBSGA)->CC,(cTRBSGA)->CENTRAB,;
									(cTRBSGA)->DOCFIL,(cTRBSGA)->TIPO,(cTRBSGA)->CODTIPO,(cTRBSGA)->MODSGA,(cTRBSGA)->MODMDT,(cTRBSGA)->MODMNT,(cTRBSGA)->ORDEM,(cTRBSGA)->NIVEL,(cTRBSGA)->SITNIV})

					(cTRBSGA)->(dbSkip())
				End
			Else
				dbSelectArea("TAF")
				dbSetOrder(1)
				dbSeek(xFilial("TAF")+cCodEst+aTree[k][2])
				While !Eof() .And. TAF->TAF_FILIAL == xFilial("TAF") .And. TAF->TAF_CODEST == cCodEst .And. TAF->TAF_NIVSUP == aTree[k][2]
					aAdd(aTree,{TAF->TAF_CODEST,TAF->TAF_CODNIV,TAF->TAF_NOMNIV,TAF->TAF_NIVSUP,TAF->TAF_MAT,TAF->TAF_CCUSTO,TAF->TAF_CENTRA,;
									TAF->TAF_DOCFIL,TAF->TAF_INDCON,TAF->TAF_CODCON,TAF->TAF_MODSGA,TAF->TAF_MODMDT,TAF->TAF_MODMNT,TAF->TAF_ORDEM,TAF->TAF_NIVEL, TAF->TAF_SITNIV})
					TAF->(dbSkip())
				End
			EndIf
			k++
		End
	EndIf

	aTreeRel := {}
	cNivSOld := ""
	cNivFil	:= ""
	lNivFil	:= .F.
	lPrimFil	:= .F.
	For k := 1 To Len(aTree)
		If aTree[k][9] <> "2"
			Loop
		EndIf

		If cLocal == "000"
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbGoBottom()
			cLocal := TAF->TAF_CODNIV
			If Empty(cLocal)
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbGoBottom()
				cLocal := (cTRBSGA)->CODPRO
			EndIf
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf
		Else
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbGoBottom()
			cLocal := (cTRBSGA)->CODPRO
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf
		EndIf

		lNivFil	:= .F.

		If k == 1
			cNivSOld := aTree[k][2]
			aAdd(aTreeRel,{aTree[k][2],cLocal})
			aTree[k][2] := cLocal
			aTree[k][4] := SubStr(cNivClr,1,3)
		Else
			If cNivSOld == aTree[k][4]
				aAdd(aTreeRel,{aTree[k][2],cLocal})
				aTree[k][2] := cLocal
				aTree[k][4] := aTreeRel[1][2]
				If !lPrimFil
					lPrimFil	:= .T.
					lNivFil	:= .T.
				EndIf
			Else
				nPos := aScan(aTreeRel, {|x| x[1] == aTree[k][4]})
				If nPos > 0
					aAdd(aTreeRel,{aTree[k][2],cLocal})
					aTree[k][2] := cLocal
					aTree[k][4] := aTreeRel[nPos][2]
				EndIf
			EndIf
		EndIf
		//Posiciona no nivel em que serao adicionados os itens copiados
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		dbSeek(cCodEst+aTree[k][4])
		nNivel := (cTRBSGA)->NIVEL

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		Reclock(cTRBSGA,.T.)
		(cTRBSGA)->CODEST	:= aTree[k][1]
		(cTRBSGA)->CODPRO	:= aTree[k][2]
		(cTRBSGA)->DESCRI	:= aTree[k][3]
		(cTRBSGA)->NIVSUP	:= aTree[k][4]
		(cTRBSGA)->RESPONS	:= aTree[k][5]
		(cTRBSGA)->CC		:= aTree[k][6]
		(cTRBSGA)->CENTRAB	:= aTree[k][7]
		(cTRBSGA)->DOCFIL	:= aTree[k][8]
		(cTRBSGA)->TIPO		:= aTree[k][9]
		(cTRBSGA)->CODTIPO	:= aTree[k][10]
		(cTRBSGA)->MODSGA	:= aTree[k][11]
		(cTRBSGA)->MODMDT	:= aTree[k][12]
		(cTRBSGA)->MODMNT	:= aTree[k][13]
		(cTRBSGA)->ORDEM	:= aTree[k][2]
		(cTRBSGA)->NIVEL	:= nNivel+1
		(cTRBSGA)->OPERAC	:= "I"
		If lSitNiv
			(cTRBSGA)->SITNIV	:= aTree[k][16]
		EndIf
		MsUnLock(cTRBSGA)

		SetTpNiv( (cTRBSGA)->TIPO, 2, !lSitNiv .Or. (cTRBSGA)->SITNIV <> "2" ) // Define variaveis de controle para tree

		If k == 1
			oTree:TreeSeek(cNivClr)
			oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargo+' ',cFolderA,cFolderB,,, 2)

			cNivFil := (cTRBSGA)->CODPRO+cCargo
		ElseIf lNivFil
			oTree:TreeSeek(cNivFil)
			oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargo+' ',cFolderA,cFolderB,,, 2)
		EndIf

		aAreaTCJ := GetArea()
		dbSelectArea('TRBTCJ')
		dbSetOrder(1)
		If !dbSeek((cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+"N"+DTOS(dDataBase)+Time())
			RecLock('TRBTCJ',.T.)
			TRBTCJ->CODNIV  := (cTRBSGA)->CODPRO
			TRBTCJ->DESCRI  := SubStr((cTRBSGA)->DESCRI,1,40)
			TRBTCJ->NIVSUP  := (cTRBSGA)->NIVSUP
			TRBTCJ->DATAPRO := dDataBase
			TRBTCJ->HORAPRO := Time()
			TRBTCJ->TIPROC  := "N"
			TRBTCJ->MODSGA  := (cTRBSGA)->MODSGA
			TRBTCJ->MODMDT  := (cTRBSGA)->MODMDT
			TRBTCJ->MODMNT  := (cTRBSGA)->MODMNT
			TRBTCJ->NIVEL	:= (cTRBSGA)->NIVEL
			MsUnLock('TRBTCJ')
		EndIf
		RestArea(aAreaTCJ)

	Next k

	oTree:TreeSeek(cNivClr)

	If oMenu <> Nil
		oMenu:hide()
		MsFreeObj(@oMenu,.T.)
		oMenu:End()
		oMenu:=NIL
	EndIf

	aSMenu := SG100PERF()

	Sg100Pop(@AsMenu,@oMenu)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MenuDef  ³ Autor ³ Rafael Diogo Richter  ³ Data ³29/11/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Utilizacao de Menu Funcional.                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Array com opcoes da rotina.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Parametros do array a Rotina:                               ³±±
±±³          ³1. Nome a aparecer no cabecalho                             ³±±
±±³          ³2. Nome da Rotina associada                                 ³±±
±±³          ³3. Reservado                                                ³±±
±±³          ³4. Tipo de Transao a ser efetuada:                        ³±±
±±³          ³	  1 - Pesquisa e Posiciona em um Banco de Dados           ³±±
±±³          ³    2 - Simplesmente Mostra os Campos                       ³±±
±±³          ³    3 - Inclui registros no Bancos de Dados                 ³±±
±±³          ³    4 - Altera o registro corrente                          ³±±
±±³          ³    5 - Remove o registro corrente do Banco de Dados        ³±±
±±³          ³5. Nivel de acesso                                          ³±±
±±³          ³6. Habilita Menu Funcional                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MenuDef()

	Local aRotina := { {STR0002   ,"AxPesqui"  , 0 , 1},;    //"Pesquisar"
						{STR0110,"SG100PROC", 0 , 3}} //"Manip. Estrutura"

Return aRotina

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SG100PERF ºAutor  ³Roger Rodrigues     º Data ³  05/02/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Define Perfil de visualização da estrutura organizacional   º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³SGAA100                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function SG100PERF(lCopy)

	Local aSMenu := {}
	Local lSitNiv := NGCADICBASE( "TAF_SITNIV", "A", "TAF", .F. )

	//Inclusao
	If Trim(Upper(Substr(aCBrowse,3,1))) == "X"
		lInclui := .T.
	EndIf

	//Alteracao
	If Trim(Upper(Substr(aCBrowse,4,1))) == "X"
		lAltera := .T.
	EndIf

	//Exclusao
	If Trim(Upper(Substr(aCBrowse,5,1))) == "X"
		lExclui := .T.
	EndIf

	If lInclui
		If lFstChoice
			If lSitNiv // Verifica se deve analisar situacao do nivel
				aAdd(aSMenu, {STR0122,"Sg100StAtv()","DESTINOS"})  //"Ativar/Inativar"
			EndIf
			aAdd(aSMenu, {STR0025,"Sg100Ident(1)"})  //"Identificacao"
		ElseIf lSndChoice
			aAdd(aSMenu, {STR0010,"Sg100Tar(3)"}) //"Tarefa"
			aAdd(aSMenu, {STR0011,"Sg100Fun(3)"}) //"Funcao"
			aAdd(aSMenu, {STR0025,"Sg100Ident(1)"})  //"Identificacao"
		ElseIf lTrdChoice
			aAdd(aSMenu, {STR0012,"Sg100Bem(3)"})//"Bem"
			aAdd(aSMenu, {STR0025,"Sg100Ident(1)"}) //"Identificacao"
		EndIf
	EndIf

	If lExclui
		If lFstChoice
			aAdd(aSMenu, {STR0006,"Sg100Del()"}) //"Excluir"
		ElseIf lSndChoice
			aAdd(aSMenu, {STR0006,"Sg100Del(2)"}) //"Excluir"
		ElseIf lTrdChoice
			aAdd(aSMenu, {STR0006,"Sg100Del(3)"}) //"Excluir"
		EndIf
	EndIf

	If lInclui
		Aadd(asMenu,{"Copiar","Sg100Cpy()","S4WB005N"})
	EndIf

	If lCopy
		Aadd(asMenu,{STR0107,"Sg100Clr()","S4WB007N"}) //"Colar"
		Aadd(asMenu,{STR0106,"Sg100ClC()","UpdError"}) //"Cancelar Cópia"
	EndIf

Return aSMenu

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³SG100VALCCºAutor  ³Jackson Machado     º Data ³  11/08/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Valida Centro de Trabalho com Centro de Custo				  º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³SGAA100                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function SG100VALCC()

	dbSelectArea("SHB")
	dbSetOrder(1)
	If dbSeek(xFilial("SHB")+M->TAF_CENTRA)
		If SHB->HB_CC <> M->TAF_CCUSTO
			ShowHelpDlg( STR0082, { STR0114 }, 2,; // "ATENÇÃO" ## "Este centro de trabalho não pertence ao centro de custo."
										{ STR0115 }, 2 ) // "Informe outro centro de trabalho."
			Return .F.
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SG100CTTREE
Cria objeto DbTree.

@author André Felipe Joriatti
@since 01/11/2012
@version MP11
@parametros
@return Nil
/*/
//---------------------------------------------------------------------
Static Function SG100CTTREE()

	oTree := DbTree():New(040, 008, 155, 272, oDlg,,, .T.)
	Sg100Pop(@AsMenu,@oMenu)
	oTree:bRClicked:= { |o,x,y| SG100RClick(x,y,o)}
	oTree:blDblClick := { || Sg100DbClick(2)}
	oTree:bChange:= {|| SG100VChg()}
	oTree:SetUpdatesEnable(.F.)

Return oTree

//---------------------------------------------------------------------
/*/{Protheus.doc} SetTpNiv
Define cor do folder conforme situacao(status) do nivel [Ativo/Inativo].

@param cTipo   Codigo do tipo.
@param nSitAtv Define situacao.
               Opcoes: 1 - Requisita que seja verificado baseado na posicao da tree.
                              2 - Informa se esta ativo ou nao no parametro 'lAtivo'.
@param lInfAtv Opcao informada quando parametro 'nSitAtv' passado como '1'.
@param aVarRef Array contendo as referencias do nivel.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function SetTpNiv( cTipo, nSitAtv, lInfAtv, aVarRef )

	Local lAtvCnd := Type("lSitNiv") == "L" .And. lSitNiv // Consistencia da variavel referente ao update relacionado [UPDSGA09/25]
	Local aMVrRef := { "cFolderA", "cFolderB", "cCargo" } // Controle de variaveis utilizadas para atualizacao da tree
	Local lSitAtv := .T.

	Local aCrtNiv := {} // Array de controle das caracteristicas do nivel
	Local nVar

	Default aVarRef := aClone(aMVrRef)
	Default lInfAtv := .T.
	Default nSitAtv := 1

	// Se o update estiver aplicado, verifica o parametro 'nSitAtv', e define se o nivel sera ativado ou inativado
	lSitAtv := If( lAtvCnd, If( nSitAtv == 1, VrfSitNiv( oTree:GetCargo() )[2], lInfAtv .Or. !lAtvCnd ), .T. )
	aCrtNiv := GetTpNiv( cTipo, lSitAtv )

	// Atualiza variaveis do processo
	For nVar := 1 To Len(aVarRef)

		// Se o o item em questao nao esta definido corretamente, atribui o conteudo default [aMVrRef]
		If Valtype(aVarRef[nVar]) != "C" .Or. Empty(aVarRef[nVar])
			aVarRef[nVar] := aMVrRef[nVar]
		EndIf

		// Define variavel caso nao esteja declarada
		If fVldType( aVarRef[nVar] ) != "C"
			_SetOwnerPrvt( aVarRef[nVar], "" )
		EndIf

		// Alimenta variavel com o conteudo selecionado
		&(aVarRef[nVar]) := aCrtNiv[nVar]

	Next nVar

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fVldType
Valida a Tipagem da variável - Retirada Sonarqube P.O.G.

@param xVariable, Undefined, Valor a ser avaliado

@return Caracter, Indica o tipo do Dado
@author Jackson Machado
@since 12/12/2018
/*/
//---------------------------------------------------------------------
Static Function fVldType( xVariable )
Return Type( xVariable )

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg100StAtv
Define situacao do nivel selecionado através do click da direita,
se sera ativado ou inativado.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function Sg100StAtv()

	Local aArea    := GetArea()
	Local aAreaTrb := (cTRBSGA)->(GetArea())

	Local cNivAt  := oTree:GetCargo()    // Chave da Tree
	Local aNivel  := VrfSitNiv( cNivAt ) // Verifica se nivel esta inativo

	Local cSitNiv   := "1"
	Local cMsgYesNo := STR0120 // "Deseja realmente ativar o nível selecionado?"

	// Verifica se o nivel foi encontrado, ou se e o primeiro nivel da estrutura
	If aNivel[1] <= 0 .Or. IntvFrstNv( cNivAt )
		Return
	EndIf

   dbSelectArea(cTRBSGA)
   dbGoTo(aNivel[1])

	// Se o nivel esta ativo
	If aNivel[2]
		cSitNiv   := "2"
		cMsgYesNo := STR0121 // "Deseja realmente inativar o nível selecionado?"
	EndIf

	// Pergunta ao usuario se deseja ativar/inativar o nivel em questao
	If MsgYesNo( cMsgYesNo )

		If VrfSitPai( aNivel[1] )         // Verifica situacao dos pais
			AtSitNiv( cNivAt, cSitNiv ) // Atualiza situacao do nivel
		EndIf

	EndIf

	RestArea(aAreaTrb)
	RestArea(aArea)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} IntvFrstNv
Verifica se a inativacao e referente ao primeiro nivel da estrutura.

@param cCargo Cargo proveniente da tree, a ser verificado

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function IntvFrstNv( cCargo )

	If ( lFrstNiv := ( SubStr(cCargo, 1, 3) == "001" ) ) // Se o 'cargo' atual da tree for '001' [Primeiro nivel]

		ShowHelpDlg( STR0082, { STR0118 }, 2,; // "ATENÇÃO" ## "O nível 001 não pode ser inativado"
									 { STR0119 }, 2 ) // "Não é possivel inativar o primeiro nível da estrutura."
	EndIf

Return lFrstNiv

//---------------------------------------------------------------------
/*/{Protheus.doc} VrfSitPai
Verifica situacao dos pais.

@param nRecNiv Recno do nivel a ser verificado

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function VrfSitPai( nRecNiv )

	Local cFrstNv := Replicate("0",TAMSX3("TAF_NIVSUP")[1])
	Local aNivSup := {}
	Local aClrTp  := {}
	Local lTreeExt := IsInCallStack("MNTA902")

	Local nNivSup
	Local lRetOk := .T.

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
   dbGoTo(nRecNiv)

	// Verifica os niveis pais
	While (cTRBSGA)->NIVSUP != cFrstNv
		dbSelectArea(cTRBSGA)
		If !dbSeek(cCodEst + (cTRBSGA)->NIVSUP) .Or. (cTRBSGA)->SITNIV <> "2"
			Exit
		EndIf
		If (cTRBSGA)->TIPO == "2"
			aAdd( aNivSup, Recno() )
		EndIf
	End

	// Caso haja niveis superiores, altera as definicoes do nivel em questao
	If Len(aNivSup) > 0
		If ( lRetOk := MsgYesNo( STR0116 + CRLF + ;	// "Para prosseguir será preciso ativar os pais do nível atual."
											STR0117 ) )     	// "Deseja realmente continuar?"

			For nNivSup := 1 To Len(aNivSup)
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbGoTo( aNivSup[nNivSup] )

				RecLock(cTRBSGA,.F.)
				(cTRBSGA)->SITNIV := "1"
				(cTRBSGA)->(MsUnlock())

				aClrTp := GetTpNiv( (cTRBSGA)->TIPO )                                    				// Retorna informacoes do nivel
				If oTree:TreeSeek((cTRBSGA)->CODPRO + aClrTp[3] + If(lTreeExt, cFilAnt, ' ') )
					oTree:ChangeBmp( aClrTp[1], aClrTp[2], , , (cTRBSGA)->CODPRO + aClrTp[3] + If(lTreeExt, cFilAnt, ' ') )	// Folder vermelho fechado e aberto
				EndIf
			Next nNivSup

		EndIf
	EndIf

Return lRetOk

//---------------------------------------------------------------------
/*/{Protheus.doc} VrfSitNiv
Verifica situacao de um determinado nivel.

@param cNivAt Codigo do nivel a ser verificado

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function VrfSitNiv( cNivAt )

	Local aArea    := GetArea()
	Local aAreaTrb := (cTRBSGA)->(GetArea())

	Local lAtvCnd  := Type("lSitNiv") == "L" .And. lSitNiv // Consistencia da variavel referente ao update relacionado [UPDSGA09/25]
	Local cLevel   := SubStr( cNivAt, 1, 3 )

	Local nRecTrb  := 0
	Local lLvlAtv  := .T.

	// Caso seja necessario verificar o campo de situacao, e o Nivel atual nao for do tipo localizacao
	If !lAtvCnd .Or. ( SubStr( cNivAt, 4, 3 ) <> "LOC" )
		Return .T.
	EndIf

	// Busca recno e situacao do nivel
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst + cLevel)
		nRecTrb := Recno()
		lLvlAtv := (cTRBSGA)->SITNIV <> "2"
	EndIf

	RestArea(aAreaTrb)
	RestArea(aArea)

Return { nRecTrb, lLvlAtv }

//---------------------------------------------------------------------
/*/{Protheus.doc} GetTpNiv
Define cor do folder conforme situacao(status) do nivel [Ativo/Inativo].

@param cTipo  Tipo do nivel
@param lAtivo Se o nivel esta ativo

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function GetTpNiv( cTipo, lAtivo )

	Local cFldI01, cFldI02, cCargo

	Default lAtivo  := .T.

	// Se o item estiver inativo
	If !lAtivo
		cFldI01 := "cadeado"
		cFldI02 := "cadeado"
	EndIf

	Do Case
		Case cTipo == "1"
			cCargo  := "BEM"
			If lAtivo
				cFldI01 := "FOLDER5"
				cFldI02 := "FOLDER6"
			EndIf
		Case cTipo == "2"
			cCargo  := "LOC"
			If lAtivo
				cFldI01 := "FOLDER10"
				cFldI02 := "FOLDER11"
			EndIf
		Case cTipo == "3"
		  	cCargo  := "FUN"
		  	If lAtivo
				cFldI01 := "FOLDER14"
				cFldI02 := "FOLDER15"
			EndIf
		OtherWise
			cCargo  := "TAR"
			If lAtivo
				cFldI01 := "FOLDER12"
				cFldI02 := "FOLDER13"
			EndIf
	EndCase

Return { cFldI01, cFldI02, cCargo }

//---------------------------------------------------------------------
/*/{Protheus.doc} AtSitNiv
Define situacao de um determinado nivel

@param cNivAt Codigo do nivel atual
@param cSitAt Situacao a ser alterada

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function AtSitNiv( cNivAt, cSitAt )

	Local aCrtNiv, nRecTrb

	Local aArea    := GetArea()
	Local aAreaTrb := (cTRBSGA)->(GetArea())

	nRecTrb := RecTrbTree( cNivAt )

	If nRecTrb > 0 .And. cSitAt $ "1/2"

		// Altera situacao do nivel em questao
		dbSelectArea(cTRBSGA)
		dbGoTo(nRecTrb)

		RecLock(cTRBSGA, .F.)
		(cTRBSGA)->SITNIV := cSitAt
		(cTRBSGA)->ATFIL  := "0"
		(cTRBSGA)->(MsUnlock())

		// Define caracteristicas conforme a situacao do nível
		aCrtNiv := GetTpNiv( (cTRBSGA)->TIPO, (cTRBSGA)->SITNIV <> "2" )
		oTree:ChangeBmp( aCrtNiv[1], aCrtNiv[2], , , cNivAt )

		// Se a situacao foi alterada para inativo, inativa todos os filhos, caso contrario, questiona se deve
		If cSitAt == "2" .Or. ( VrfFilNiv((cTRBSGA)->CODPRO) .And. MsgYesNo(STR0126) ) // "Deseja ativar os filhos?"
			VrfSitFil( nRecTrb, cSitAt, .F. )
		EndIf

	EndIf

	RestArea(aAreaTrb)
	RestArea(aArea)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} VrfFilNiv
Verifica se nivel possui filhos.

@param cNivRef Nivel a ser verificado

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function VrfFilNiv(cNivRef)

	Local lFilNiv := .F.

	Local aArea    := GetArea()
	Local aAreaSGA := (cTRBSGA)->(GetArea())

	// Verifica se ha algum filho no nivel considerado
	dbSelectArea(cTRBSGA)
	dbSetOrder(1)
	dbSeek("001" + cNivRef)
	While (cTRBSGA)->(!Eof()) .And. (cTRBSGA)->CODEST == "001" .And. (cTRBSGA)->NIVSUP == cNivRef
		If ( lFilNiv := ((cTRBSGA)->TIPO == "2") )
			Exit
		EndIf
		dbSkip()
	End

	RestArea(aAreaSGA)
	RestArea(aArea)

Return lFilNiv

//---------------------------------------------------------------------
/*/{Protheus.doc} VrfSitFil
Verifica/Atualiza situacao dos niveis filhos

@param nRecNiv  Recno do nivel a ser verificado
@param cSitAt   Situacao do nivel a ser alterada
@param lVrfBase Define se deve avaliar a conforme a base de dados, ou o processo atual

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function VrfSitFil( nRecNiv, cSitAt, lVrfBase )

   Local cTblOpr, cFilTbl, cKeyTbl, cFldSit

	Local nNiv     := 1
	Local aEstruct := {}
	Local lTreeExt := IsInCallStack("MNTA902")

	Local aCrtNiv  := {}
	Local cCrgNiv  := {}

	// Armazena areas atuais
	Local aArea    := GetArea()
	Local aAreaTAF := TAF->(GetArea())
	Local aAreaTRB := (cTRBSGA)->(GetArea())

	Default lVrfBase := .F.

	Store "" To cTblOpr, cFilTbl, cKeyTbl, cFldSit

	// Define variaveis da operacao
	cTblOpr := If( lVrfBase, "TAF", cTRBSGA )
	cFilTbl := If( lVrfBase, xFilial(cTblOpr), "" )

	dbSelectArea(cTblOpr)
	dbGoto(nRecNiv)

	// Define registro do nivel no array de controle
	SetEstFld( @aEstruct, lVrfBase )

	While nNiv <= Len(aEstruct)

		cKeyTbl := cFilTbl + cCodEst + aEstruct[nNiv][2]

		dbSelectArea(cTblOpr)
		dbSetOrder(1)
		dbSeek( cKeyTbl )

		While !Eof() .And. RetFldRef( "CODEST", lVrfBase, .T. ) == cCodEst .And. ;
									RetFldRef( "NIVSUP", lVrfBase, .T. ) == aEstruct[nNiv][2]

			// Define registro do nivel no array de controle
			SetEstFld( @aEstruct, lVrfBase )

			If !lVrfBase

				If !Empty( (cTRBSGA)->DELETADO )
					(cTblOpr)->(dbSkip())
					Loop
				EndIf

			Else

				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				If dbSeek( TAF->TAF_CODEST + TAF->TAF_CODNIV )
					(cTblOpr)->(dbSkip())
					Loop
				EndIf

			EndIf

			cFldSit := RetFldRef( "SITNIV", lVrfBase, .F. )

			RecLock(cTblOpr, .F.)
			&cFldSit. := cSitAt

			If !lVrfBase
				(cTRBSGA)->ATFIL := "1"
			EndIf

			(cTblOpr)->(MsUnlock())

			// Se estiver avaliando o processo atual, altera as definicoes relacionadas
			If !lVrfBase
				cCrgNiv := (cTRBSGA)->CODPRO + If( (cTRBSGA)->TIPO == "1", "BEM", "LOC" ) + If(lTreeExt, cFilAnt, ' ')
				aCrtNiv := GetTpNiv( (cTRBSGA)->TIPO, (cTRBSGA)->SITNIV <> "2" )
				If oTree:TreeSeek( cCrgNiv )
					oTree:ChangeBmp( aCrtNiv[1], aCrtNiv[2], , , cCrgNiv )
				EndIf
			EndIf

			(cTblOpr)->(dbSkip())
		End

		nNiv++
	End

	RestArea(aAreaTAF)
	RestArea(aAreaTRB)
	RestArea(aArea)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} RetFldRef
Retorna conteudo/string de campo informado.

@param cField  Campo a ser verificado
@param lBase   Define se deve verificar a base, ou o processo atual
@param lRetCnt Define tipo de retorno.
					Opcoes: .T. - Execucao do campo. &(Campo).
					        .F. - String do campo.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function RetFldRef( cField, lBase, lRetCnt )

	Local aFields := { { "CODEST","TAF_CODEST" }, { "NIVSUP", "TAF_NIVSUP" }, { "SITNIV", "TAF_SITNIV" } }
	Local cRetFld := ""

	Local nPosRet := If( lBase, 2, 1 )
	Local cTblRef := If( lBase, "TAF", "(cTRBSGA)" ) + "->"

	Local nPos := aScan( aFields, {|x| x[1] == cField } )

	Default lRetCnt := .F.

	If nPos > 0
		cRetFld := cTblRef + aFields[nPos][nPosRet]
	EndIf

Return If( lRetCnt, &cRetFld., cRetFld )

//---------------------------------------------------------------------
/*/{Protheus.doc} SetEstFld
Define/Incrementa array de controle de itens da estrutura.

@param aEstruct Array de controle da estrutura.
@param lVrfBase Define se deve verificar a base de dados, ou o processo atual.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function SetEstFld( aEstruct, lVrfBase )

	Default lVrfBase := .F.

	If !lVrfBase

		aAdd( aEstruct, {	(cTRBSGA)->CODEST , (cTRBSGA)->CODPRO  , (cTRBSGA)->DESCRI , (cTRBSGA)->NIVSUP , (cTRBSGA)->RESPONS , ;
								(cTRBSGA)->CC     , (cTRBSGA)->CENTRAB , (cTRBSGA)->DOCFIL , (cTRBSGA)->TIPO   , (cTRBSGA)->CODTIPO , ;
								(cTRBSGA)->MODSGA , (cTRBSGA)->MODMDT  , (cTRBSGA)->MODMNT , (cTRBSGA)->ORDEM  , (cTRBSGA)->NIVEL     } )

	Else

		aAdd( aEstruct, {	TAF->TAF_CODEST , TAF->TAF_CODNIV , TAF->TAF_NOMNIV , TAF->TAF_NIVSUP , TAF->TAF_MAT    , ;
								TAF->TAF_CCUSTO , TAF->TAF_CENTRA , TAF->TAF_DOCFIL , TAF->TAF_INDCON , TAF->TAF_CODCON , ;
								TAF->TAF_MODSGA , TAF->TAF_MODMDT , TAF->TAF_MODMNT , TAF->TAF_ORDEM  , TAF->TAF_NIVEL    } )

	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} RecTrbTree
Busca recno de nivel atraves do cargo da tree.

@param cCargo Cargo proveniente da tree, do nivel atual.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function RecTrbTree( cCargo )

	Local cLevel  := SubStr( cCargo, 1, 3 )
	Local nRecTrb := 0

	Local aArea    := GetArea()
	Local aAreaTrb := (cTRBSGA)->(GetArea())

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst + cLevel)
		nRecTrb := Recno()
	EndIf

	RestArea(aAreaTrb)
	RestArea(aArea)

Return nRecTrb

//---------------------------------------------------------------------
/*/{Protheus.doc} SetNivPai
Define itens pais em referencia aos niveis repassados.

@param aNivSup Array de controle dos niveis pais.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function SetNivPai( aNivSup )

	Local cFrstNv  := Replicate("0",TAMSX3("TAF_NIVSUP")[1])
	Local aNivAtu  := aClone(aNivSup)
	Local aAreaTAF := TAF->(GetArea())
	Local nNiv

	Default aNivSup := {}

	For nNiv := 1 To Len(aNivAtu)
		dbSelectArea("TAF")
		dbSetOrder(2)
		dbSeek( xFilial("TAF") + cCodest + aNivAtu[nNiv][1] )

		While TAF->TAF_NIVSUP != cFrstNv
			dbSelectArea("TAF")
			If !dbSeek(xFilial("TAF") + cCodEst + TAF->TAF_NIVSUP) .Or. TAF->TAF_SITNIV <> "2"
				Exit
			EndIf

			// Adiciona nivel array de controle dos mesmos
			If aScan( aNivSup, {|x| x[1] == TAF->TAF_CODNIV } ) == 0
				aAdd( aNivSup, { TAF->TAF_CODNIV, .F. } )
			EndIf
		End
	Next nNiv

	RestArea(aAreaTAF)

Return aNivSup

//---------------------------------------------------------------------
/*/{Protheus.doc} ShowIntv
Verifica se deve apresentar o nivel atual, conforme array de niveis marcados.

@param cNivelAtu Codigo do nivel atual.
@param aNivMrk   Array com os niveis definidos como marcados.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ShowIntv( cNivelAtu, aNivMrk )
Return aScan( aNivMrk, {|x| x[1] == cNivelAtu } ) > 0

//---------------------------------------------------------------------
/*/{Protheus.doc} SetBmpTree
Define variavel de controle cBmp, conforme 'folders' predefinidos.

@param lBmp Define se deve avaliar os folders para definicao.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function SetBmpTree(lBmp)

	Default lBmp := .F.

	If !lBmp
		cBMP := " "
	ElseIf AllTrim(Upper(cFolderA)) == "FOLDER10"
		cBMP := "1"
	ElseIf AllTrim(Upper(cFolderA)) == "FOLDER7"
		cBMP := "2"
	Else
		cBMP := "3"
	EndIf

Return cBMP

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg100NvAtv
Verifica na base de dados a situacao do nivel informado. [ Ativo | Inativo ]

@param cNivel  Codigo do nivel da estrutura a ser verificada.
@param cCodest Codigo da estrutura.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function Sg100NvAtv(cNivel, cCodest, lShowMsg)

	Local lSitNiv := NGCADICBASE( "TAF_SITNIV", "A", "TAF", .F. )
	Local lNvAtv := .T.

	Local aArea    := {}
	Local aAreaTAF := {}

	Default cCodest := "001"
	Default lShowMsg := .F.

	If !lSitNiv
		Return .T.
	EndIf

	aArea    := GetArea()
	aAreaTAF := TAF->(GetArea())

	dbSelectArea("TAF")
	dbSetOrder(2)
	If dbSeek( xFilial("TAF") + cCodest + cNivel ) .And. TAF->TAF_SITNIV == "2"
		lNvAtv := .F.
	EndIf

	If lShowMsg .And. !lNvAtv
		ShowHelpDlg(STR0078,{STR0127 + CRLF + STR0128},1,; // "ATENÇÃO" ## "O nível está inativo." ## "A operação não é permitida para um nivel inativo."
						  			{STR0129},2)                   // "Ative o nível para realizar a operação desejada."
	EndIf

	RestArea(aAreaTAF)
	RestArea(aArea)

Return lNvAtv

//---------------------------------------------------------------------
/*/{Protheus.doc} LastCodNiv
Retorna o ultimo codigo do nivel disponivel,
verificando a tabela temporaria de controle da estrutura.

@param cCodNiv Codigo do nivel da estrutura a ser verificada.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function LastCodNiv( cCodNiv )

	Local aArea    := GetArea()
	Local aAreaTRB := (cTRBSGA)->(GetArea())

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	While dbSeek(cCodest + cCodNiv)
		cCodNiv := If( FindFunction("Soma1Old"),  ;
							Soma1Old(AllTrim(cCodNiv)), ;
							Soma1(AllTrim(cCodNiv)) )
	End

	RestArea(aAreaTRB)
	RestArea(aArea)

Return cCodNiv


//---------------------------------------------------------------------
/*/{Protheus.doc} SgaPvt100
Carrega as variaves privadas dentro da função.

@author Gabriel Augusto Werlich
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function SgaPvt100()

	_SetOwnerPrvt("cDesLoc" 	, Space( Len( TAF->TAF_NOMNIV ) ))
	_SetOwnerPrvt("cRespons"	, Space( Len( TAF->TAF_MAT )  	)) // Codigo do Responsavel
	_SetOwnerPrvt("cFilDoc"	, Space( Len( TAF->TAF_DOCFIL ) )) // Codigo do Documento Relacionado
	_SetOwnerPrvt("cNomeRes"	, Space( Len( QAA->QAA_NOME ) 	)) // Nome do Responsavel
	_SetOwnerPrvt("cCC"		, Space( Len( TAF->TAF_CCUSTO ) )) // Codigo do Centro de Custo
	_SetOwnerPrvt("cNomeCC"	, Space( Len( SI3->I3_DESC ) 	)) // Nome do Centro de Custo
	_SetOwnerPrvt("oRespon") // Codigo do responsavel
	_SetOwnerPrvt("cCT"		, Space( Len( TAF->TAF_CENTRA ) ))
	_SetOwnerPrvt("oCT")
	_SetOwnerPrvt("oNomeCC")
	_SetOwnerPrvt("oCC")
	_SetOwnerPrvt("cNomeCT"	, Space( Len( SHB->HB_NOME ) ))
	_SetOwnerPrvt("oNomeRes") // Obejto para remontar o nome do responsavel na tela ( refresh )
	_SetOwnerPrvt("oCheckLoc1")
	_SetOwnerPrvt("oCheckLoc2")
	_SetOwnerPrvt("oCheckLoc3")
	_SetOwnerPrvt("oNomeCT")
	_SetOwnerPrvt("aOpc",{})
	_SetOwnerPrvt("aFilhosLoc", {})
	_SetOwnerPrvt("aFilhosOut", {})
	_SetOwnerPrvt("oDocumento")
	_SetOwnerPrvt("cDocumento", "")

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} GetUltOrd
Busca último código de ordem na TAF ou TRB.

@author Gabriel Augusto Werlich
@since 03/11/2014
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function GetUltOrd(cTRBSGA)

	Local aAreaTRB		:= GetArea()
	Local cUltCodNiv	:= "000"

	If lFirstUOrd

		cAliasQry := GetNextAlias()
		cQuery := " SELECT MAX(TAF_ORDEM) AS cLastOrdem FROM "+RetSqlName("TAF")+" TAF "
		cQuery += " WHERE TAF.TAF_FILIAL = '"+xFilial("TAF")+"' AND TAF.D_E_L_E_T_ <> '*'"
		cQuery += " AND TAF_MODSGA = 'X'"
		cQuery := ChangeQuery(cQuery)
		MPSysOpenQuery( cQuery , cAliasQry )

		dbSelectArea(cAliasQry)
		dbGoTop()
		If !Empty((cAliasQry)->cLastOrdem)
			cUltCodNiv := (cAliasQry)->cLastOrdem
		EndIf
		(cAliasQry)->(dbCloseArea())

		lFirstUOrd := .F.

	Else

		dbSelectArea(cTRBSGA)
		dbSetOrder(6)
		dbGoTop()

		cUltCodNiv := (cTRBSGA)->ORDEM

	EndIf

	If FindFunction("Soma1Old")
		cUltCodNiv := Soma1Old(AllTrim(cUltCodNiv))
	Else
		cUltCodNiv := Soma1(AllTrim(cUltCodNiv))
	EndIf

	RestArea(aAreaTRB)

Return cUltCodNiv
