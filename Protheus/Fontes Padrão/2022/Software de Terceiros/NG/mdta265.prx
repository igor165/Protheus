#INCLUDE "Mdta265.ch"
#Include "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA265

Programa de Cadastro de Epc por risco.
Para cada risco definido o usuario porderá relacionar os EPC's previamente definidos e ja registrados no sistema.

@author  Denis Hyroshi de Souza
@since   09/07/2003
/*/
//-------------------------------------------------------------------
Function MDTA265()

	//Armazena variaveis para devolucao (NGRIGHTCLICK)
	Local aNGBEGINPRM	:= NGBEGINPRM()
	Private cCliMdtPs	:= ""
	Private aTROCAF3	:= {}
	Private aInfo		:= {}
	Private aPosObj		:= {}
	Private aSize		:= MsAdvSize( , .F., 430 )
	Private aObjects	:= {}

	lSigaMdtPS := IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )

	Private aRotina := MenuDef()

	If lSigaMdtps
		cCadastro := OemtoAnsi( STR0021 ) //"Clientes"

		DbSelectArea( "SA1" )
		DbSetOrder( 1 )

		mBrowse( 6, 1, 22, 75, "SA1" )
	Else

		//Define o cabecalho da tela de atualizacoes
		cCadastro := OemtoAnsi( STR0008 ) //"Riscos"
		Private aCHKDEL := {}, bNGGRAVA
		Private lSH1    := .F.

		//Endereca a funcao de BROWSE
		DbSelectArea( "TN0" )
		DbSetOrder( 1 )
		mBrowse( 6, 1, 22, 75, "TN0" )

	Endif

	//Devolve variaveis armazenadas (NGRIGHTCLICK)
	NGRETURNPRM( aNGBEGINPRM )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef

Utilizacao de Menu Funcional.

@author  Rafael Diogo Richter
@since   29/11/2006
@version version
@return  aRotina, Array, Array com opcoes da rotina
/*/
//-------------------------------------------------------------------
Static Function MenuDef( lMdtPs )

	Local aRotina

	Default lMdtPs := IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )

	If lMdtPs
		aRotina := { { STR0002,   "AxPesqui"  , 0 , 1},; //"Pesquisar"
		             { STR0003,   "NGCAD01"   , 0 , 2},; //"Visualizar"
		             { STR0008,   "MDT265RI"  , 0 , 4} } //"Riscos"
	Else

		aRotina :=  { { STR0002, "AxPesqui" , 0 , 1},;  //"Pesquisar"
	                  { STR0003, "NGCAD01"	, 0 , 2},;  //"Visualizar"
	                  { STR0012, "MDT265EPC", 0 , 4, 3} }  //"EPC's"

	Endif

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT265EPC

Programa de Inclusão, Alteração, Exclusão

@author  Andre Perez Alvarez
@since   04/08/2007
/*/
//-------------------------------------------------------------------
Function MDT265EPC( cAlias, nReg, nOpcx, aSiz, aObj )

	Local lUPDMDT81 := NGCADICBASE( "TO9_OPCEPC", "A", "TO9", .F. )
	Local nPosOpc	:= 1

	//Variaveis para os campos
	Local nPosFlat	:= 050
	Local nPosRight	:= 005
	Local nPosFlat2	:= 050
	Local nPosRight2:= 005

	//Variaveis de tela
	Local oMenu, oDlgECP
	Local oPnlAll, oPnlTop, oPnlECP

	//Variaveis objetos de interfaces
	Local oSayNumRis, oSayNomAge
	Local oGetNumRis, oGetNomAge
	Local oButtonECP, oBtnECPMC

	//Variaveis da GetDados
	Local lAltProg		:= IIf( INCLUI .Or. ALTERA, .T., .F. )
	Private aColsEPC	:= {}
	Private aHeaderEPC	:= {}

	Private cUtilEPC	:= SuperGetMv( "MV_NG2UEPC", .F., "1" ) //Indica a consistencia dos EPC, por: 1=Bens; 2 = Medidas de Controle; 3 - Ambos;
	Private oGetEPC

	If IsInCallStack( "MDTA180" )//Se for do fonte MDTA180 será passado por parametros
		aSize:= aClone( aSiz )
		aObjects:= aClone( aObj )
	Else
		//Inicializa variaveis de Tela
		Aadd( aObjects, { 050, 050, .T., .T. } )
		Aadd( aObjects, { 100, 100, .T., .T. } )
	Endif

	aInfo   := { aSize[1], aSize[2], aSize[3], aSize[4], 0, 0 }
	aPosObj := MsObjSize( aInfo, aObjects, .T. )

	//Caso o parâmetro esteja com seu conteúdo vazio joga "3"
	If Empty( cUtilEPC )
		cUtilEPC := "3"
	EndIf

	// Caso seja utilizado Ambos os EPC (Bens e Medidas de Controle) altera posicao do botao "EPC M.C."
	If cUtilEPC == "3"
		nPosFlat2	:= 050
		nPosRight2	:= 060
	EndIf

	// Monta o cabecalho
	NG265Cabec( nOpcx )
	//Caso aColsEPC esteja vazio
	// 1 - Inicializa array vazio
	// 2 - Caso tenha rodado o UPDMDT81 inicializa o valor de TO9_OPCEPC conforme o parametro
	If Len( aColsEPC ) == 0
		aColsEPC := BLANKGETD( aHeaderEPC )

		If lUPDMDT81

			nPosOpc := aSCAN( aHeaderEPC, {|x| AllTrim( Upper( X[2] ) ) == "TO9_OPCEPC" } )

			Do Case
				Case cUtilEPC == "1"
					aColsEPC[ 1, nPosOpc ] := "1" //Bens
				Case cUtilEPC == "2"
					aColsEPC[ 1, nPosOpc ] := "2" //Medidas de Controle
			EndCase

		EndIf
	EndIf

	// Verifica se o conteudo do parametro eh diferente de 1 e faz o filtro
	If cUtilEPC <> "1"
		dbSelectArea( "TO4" )
		Set Filter To xFilial( "TO4" ) == TO4->TO4_FILIAL .And. TO4->TO4_TIPCTR == "2"
	EndIf

	//Posiciona TMA para gravar o Agente na TO9
	dbSelectArea( "TMA" )
	dbSetOrder( 1 )
	dbSeek( xFilial( "TMA" ) + TN0->TN0_AGENTE )

	nOpca := 0
	DEFINE MSDIALOG oDlgEPC TITLE STR0009 From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd PIXEL
		//Panel Principal
		oPnlAll := TPanel():New(0, 0, Nil, oDlgEPC, Nil, .T., .F., Nil, Nil, 0, 70, .T., .F. )
		oPnlAll:Align := CONTROL_ALIGN_ALLCLIENT
		    // Panel do Topo
			oPnlTop := TPanel():New(0, 0, Nil, oPnlAll, Nil, .T., .F., Nil, Nil, 0, 70, .T., .F. )
			oPnlTop:Align := CONTROL_ALIGN_TOP

				oSayNumRis	:= TSay():New( 009, 005, { || OemtoAnsi( STR0010 ) }, oPnlTop, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 035, 012 ) //"Num.Risco"

				oGetNumRis	:= TGet():New( 007, 035, { |u| IIf( PCount() > 0, TN0->TN0_NUMRIS := u, TN0->TN0_NUMRIS ) }, oPnlTop, 040, 012, "@!",;
							    , CLR_BLACK, CLR_WHITE, , , , .T., "", , { || .F. }, .F., .F., , .F., .F., , , , , , .T. )

				oSayNomAge	:= TSay():New( 009, 095, { || OemtoAnsi( STR0011 ) }, oPnlTop, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 050, 012 ) //"Nome Agente"

				oGetNomAge	:= TGet():New( 007, 135, { |u| IIf( PCount() > 0, TMA->TMA_NOMAGE := u, TMA->TMA_NOMAGE )}, oPnlTop, 230, 012, "@!",;
							    , CLR_BLACK, CLR_WHITE, , , , .T., "", , { || .F. }, .F., .F., , .F., .F., , , , , , .T. )
				//Se for diferente de "Medidas de Controle" nao apresenta "EPC"
				If cUtilEPC <> "2"
					oButtonEPC	:= TButton():New( nPosFlat, nPosRight, STR0025, oPnlTop, { || MDT265BUT( "1" ) }, 49, 12, , , , .T.,;
											    , , , { || .T. } ) //"EPCs Bens"
				EndIf
			    //Se for diferente de "Bens" e nao executado UPDDMT81, nao apresenta "EPCs M.C."
				If cUtilEPC <> "1" .And. lUPDMDT81
					oBtnEPCMC	:= TButton():New( nPosFlat2, nPosRight2, STR0026, oPnlTop, { || MDT265BUT( "2" ) }, 49, 12, , , , .T.,;
											    , , , { || .T. } ) //"EPCs M. C."
				EndIf

			//Coloca tabela em fim de arquivo para não apresentar informações na nova linha.
			PutFileInEof( "TO9" )


		   //Panel do resto da tela
			oPnlEPC := TPanel():New(0, 0, Nil, oPnlAll, Nil, .T., .F., Nil, Nil, 0, 0, .T., .F. )
			oPnlEPC:Align := CONTROL_ALIGN_ALLCLIENT

				oGetEPC := MsNewGetDados():New( 0, 0, 200, 210, IIf( !lAltProg, 0, GD_INSERT + GD_UPDATE + GD_DELETE ),;
			 							    { || NG265LinOk() }, { || NG265TudOk() },/*cIniCpos*/ , /*aAlterGDa*/ ,;
			 							    /*nFreeze*/ , /*nMax*/ , /*cFieldOk */ , /*cSuperDel*/ , /*cDelOk */ ,;
			 							    oPnlEPC, aHeaderEPC, aColsEPC, { || fChangeEPC() } )
			   	oGetEPC:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
				NGPOPUP( asMenu, @oMenu, oPnlAll )
				oPnlAll:bRClicked:= { |o, x, y| oMenu:Activate( x, y, oPnlAll ) }

	ACTIVATE MSDIALOG oDlgEPC ON INIT EnchoiceBar(oDlgEPC,{||nOpca:=1,if(oGetEPC:TudoOk(),oDlgEPC:End(),nOpca := 0)},{||oDlgEPC:End(),nOpca := 0})

	If nOpcA == 1
	   Begin Transaction

			lGravaOk := NG265GRAV( "TO9", nOpca )
			If !lGravaOk
				MsgStop( STR0013, STR0014 ) //"Não foi possível completar a operação."  //"Aviso"
			Else
			  //Processa Gatilhos
			   EvalTrigger()
			EndIf

		End Transaction
	Endif

	// Verifica se o conteudo do parametro eh diferente de 1 e limpa o filtro
	If cUtilEPC <> "1"
		dbSelectArea( "TO4" )
		Set Filter To
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NG265LinOk

Critica se a linha digitada está Ok

@author  Andre Perez Alvarez
@since   04/07/2007
@version version
/*/
//-------------------------------------------------------------------
Function NG265LinOk( lFim )

	Local lUPDMDT81	:= NGCADICBASE( "TO9_OPCEPC", "A", "TO9", .F. )
	Local nPosCod	:= 1
	Local nPosOpc	:= 1
	Local nAt		:= 1
	Local nX
	Local nCols
	Local nHead

	Default lFim	:= .F.

	nAt := oGetEPC:nAt

	nPosCod := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_EPC" } )
	nPosOpc := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_OPCEPC" } )

	If lFim
		If Len( oGetEPC:aCols ) == 1 .And. Empty( oGetEPC:aCols[1][nPosCod] )
			Return .T.
		EndIf
	EndIf

	//Percorre aCols
	For nX:= 1 to Len( oGetEPC:aCols )
		If !aTail( oGetEPC:aCols[nX] )
			If lFim .Or. nX == nAt
				//Verifica se os campos obrigatórios estão preenchidos
				If Empty( oGetEPC:aCols[nX][nPosCod] )
					//Mostra mensagem de Help
					Help( 1, " ", "OBRIGAT2", , oGetEPC:aHeader[nPosCod][1], 3, 0 )
					Return .F.
				Endif
				If nPosOpc > 0 .And. Empty( oGetEPC:aCols[nX][nPosOpc] )
					//Mostra mensagem de Help
					Help( 1, " ", "OBRIGAT2", , oGetEPC:aHeader[nPosOpc][1], 3, 0 )
					Return .F.
				Endif
			Endif
			//Verifica se é somente TO9_OPCEPC e TO9_EPC sao iguais
			If nX <> nAt .And. !aTail( oGetEPC:aCols[nAt] )
				If AllTrim( oGetEPC:aCols[nX][nPosCod] ) == AllTrim( oGetEPC:aCols[nAt][nPosCod] ) .And. oGetEPC:aCols[nX][nPosOpc] == oGetEPC:aCols[nAt][nPosOpc]
					Help( " ", 1, "JAEXISTINF", , oGetEPC:aHeader[nPosCod][1] )
					Return .F.
				Endif
			Endif
		Endif
	Next nX

	//Coloca tabela em fim de arquivo para não apresentar informações na nova linha.
	PutFileInEof( "TO9" )
	PutFileInEof( "ST9" )
	PutFileInEof( "TO4" )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NG265TudOk

Critica se a nota toda está Ok

@author  Andre Perez Alvarez
@since   04/07/2007
/*/
//-------------------------------------------------------------------
Function NG265TudOk()

	Local lRet := .T.

	lRet := NG265LinOk( .T. )

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} NG265EXCC

Valida exclusao do registro

@author  Andre Perez Alvarez
@since   04/07/2007
/*/
//-------------------------------------------------------------------
Function NG265EXCC()
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NG265GRAV

Grava os dados na TO9

@author  Andre Perez Alvarez
@since   04/08/2007
/*/
//-------------------------------------------------------------------
Function NG265GRAV( cAlias, nOpcao )

	Local lSigaMdtPs	:= GetNewPar( "MV_MDTPS", "N" ) == "S"
	Local aArea			:= GetArea()
	Local nX, ny, nZ, nPosCod
	Local nIndTO9, cSeekTO9, cWhile
	Local lSeekaCols //Variavel auxiliar para verificar as possiveis buscas conforme a existencia do campo TO9_OPCEPC

	nPosCod := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_EPC" } )
	nPosOpc := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_OPCEPC" } )

	If lSigaMdtPs
		nIndTO9	:= 2  //TO9_FILIAL+TO9_CLIENT+TO9_LOJA+TO9_NUMRIS+TO9_OPCEPC+TO9_EPC
		cSeekTO9	:= xFilial( "TO9" ) + cCliMdtps + TN0->TN0_NUMRIS
		cCondTO9	:= "TO9->TO9_FILIAL+TO9->TO9_CLIENT+TO9->TO9_LOJA+TO9->TO9_NUMRIS"
		cWhileTO9:= "TO9->TO9_FILIAL+TO9->TO9_CLIENT+TO9->TO9_LOJA+TO9->TO9_NUMRIS == xFilial('TO9')+cCliMdtps+TN0->TN0_NUMRIS"
	Else
		nIndTO9 	:= 1  //TO9_FILIAL+TO9_NUMRIS+TO9_EPC
		cSeekTO9	:= xFilial( "TO9" ) + TN0->TN0_NUMRIS
		cCondTO9	:= "TO9->TO9_FILIAL+TO9->TO9_NUMRIS"
		cWhileTO9	:= "TO9->TO9_FILIAL+TO9->TO9_NUMRIS == xFilial('TO9')+TN0->TN0_NUMRIS"
	EndIf

	If Len( oGetEPC:aCols ) > 0

		//Coloca os deletados por primeiro
		aSORT( oGetEPC:aCols, , , { |x, y| x[ Len( oGetEPC:aCols[1] ) ] .And. !y[ Len( oGetEPC:aCols[1] ) ] } )

		For nX:=1 To Len( oGetEPC:aCols )

			//Caso não estaja deletado e campo TO9_EPC nao estaja vazio, grava ou altera na TO9
			If !aTail( oGetEPC:aCols[nX] ) .And. !Empty( oGetEPC:aCols[nX][nPosCod] )
				dbSelectArea( cAlias )
				dbSetOrder( nIndTO9 )
				//Caso encontrado chave na TO9 Altera, senao inclui cSeekTO9 + TO9_OPCEPC + TO9_EPC
				If nPosOpc == 0
					lSeekaCols := dbSeek( cSeekTO9 + oGetEPC:aCols[nX][nPosCod] )
				Else
					lSeekaCols := dbSeek( cSeekTO9 + oGetEPC:aCols[nX][nPosOpc] + oGetEPC:aCols[nX][nPosCod] )
				EndIf
				//
				If lSeekaCols
					RecLock( ( cAlias ), .F. )
				Else
					RecLock( ( cAlias ), .T. )
				Endif
				For nZ:=1 to FCount()
					If "_FILIAL" $ Upper( FieldName( nZ ) )
						FieldPut( nZ, xFilial( cAlias ) )
					ElseIf "_CLIENT" $ Upper( FieldName( nZ ) )
						FieldPut( nZ, SA1->A1_COD )
					ElseIf "_LOJA" $ Upper( FieldName( nZ ) )
						FieldPut( nZ, SA1->A1_LOJA )
					ElseIf "_NUMRIS" $ Upper( FieldName( nZ ) )
						FieldPut( nZ, TN0->TN0_NUMRIS )
					ElseIf "_AGENTE" $ Upper( FieldName( nZ ) )
						FieldPut( nZ, TMA->TMA_AGENTE )
					ElseIf ( nPos := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == Trim( Upper( FieldName( nZ ) ) ) } ) ) > 0
						FieldPut( nZ, oGetEPC:aCols[nX, nPos] )
					Endif
				Next nZ
				MsUnlock( cAlias )

			Elseif !Empty( oGetEPC:aCols[nX][nPosCod] )
				dbSelectArea( cAlias )
				dbSetOrder( nIndTO9 )
				//Faz as possiveis busca, verificando se existe campo TO9_OPCEPC
				If nPosOpc == 0
					lSeekaCols := dbSeek( cSeekTO9 + oGetEPC:aCols[nX][nPosCod] )
				Else
					lSeekaCols := dbSeek( cSeekTO9 + oGetEPC:aCols[nX][nPosOpc] + oGetEPC:aCols[nX][nPosCod] )
				EndIf

				If lSeekaCols
					RecLock( ( cAlias ), .F. )
					dbDelete()
					MsUnlock( ( cAlias ) )
				Endif
			Endif
		Next nX
	Endif

	dbSelectArea( cAlias )
	dbSetOrder( nIndTO9 )
	dbSeek( cSeekTO9 )
	While !Eof() .And. &( cWhileTO9 )
		//Faz as possiveis busca, verificando se existe campo TO9_OPCEPC
		If nPosOpc == 0
			lSeekaCols := aScan( oGetEPC:aCols, { |x| Alltrim( Upper( x[nPosCod] ) ) == Alltrim( Upper( TO9_EPC ) ) .And. !x[Len( x )] } ) == 0
		Else
			lSeekaCols := aScan( oGetEPC:aCols, { |x| Alltrim( Upper( x[nPosOpc] + x[nPosCod] ) ) == Alltrim( Upper( TO9->TO9_OPCEPC + TO9_EPC ) ) ;
							.And. !x[Len( x )] } ) == 0
		EndIf
		If lSeekaCols
			RecLock( ( cAlias ), .F. )
			DbDelete()
			MsUnLock( cAlias )
		Endif
		dbSelectArea( cAlias )
		dbSkip()
	End
	RestArea( aArea )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT265EPI

Mostra um markbrowse com todos os EPC's para o usuario poder seleciona-los de uma soh vez.

@author  Andre Perez Alvarez
@since   18/07/2007
@version version
/*/
//-------------------------------------------------------------------
Static Function MDT265BUT( cButtonEPC )

	Local lUPDMDT81 := NGCADICBASE( "TO9_OPCEPC", "A", "TO9", .F. )
	Local aArea		:= GetArea()

	// Variaveis de tela
	Local oDlgMkb, oFont, oMarkEPC
	Local oPanelAll, oPanelTop, oPanelMark

	// Variaveis de tamanho dos campos da TRB
	Local nSizeOk	:= 2
	Local nSizeCodB, nSizeNome

	//Variaveis dos valores da TRB
	Local cMarca := GetMark()
	Local cAliasCmp

	//Alias da TRB
	Local cAliasEPC := GetNextAlias()
	Local oTempEPC

	lInverte:= .F.

	//Caso seja o Botao "EPC" traz markbrowse de ST9
	If cButtonEPC == "1"
		cAliasCmp	:= "ST9"
		nSizeCodB	:= TamSX3( "T9_CODBEM" )[1]
		nSizeNome	:= IIf( ( TAMSX3( "T9_NOME" )[1] ) < 1, 20, ( TAMSX3( "T9_NOME" )[1] ) )

	//Caso seja o Botao de  "EPC M.C."
	ElseIf cButtonEPC == "2"
		cAliasCmp	:= "TO4"
		nSizeCodB	:= TamSX3( "TO4_CONTRO" )[1]
		nSizeNome	:= TamSX3( "TO4_NOMCTR" )[1]
	EndIf

	dbSelectArea( cAliasCmp )

	aDBF		:= {}
	aTRB1		:= {}
	If lUPDMDT81
		aAdd( aDBF, { "T9_OPCEPC", "C", 1, 0 } )
	EndIf

	aAdd( aDBF, { "T9_OK",		"C", nSizeOk,   0 } )
	aAdd( aDBF, { "T9_CODBEM",	"C", nSizeCodB, 0 } )
	aAdd( aDBF, { "T9_NOME",	"C", nSizeNome, 0 } )

	aAdd( aTRB1, { "T9_OK", 	NIL, Space( 2 ), } )
	aAdd( aTRB1, { "T9_CODBEM",	NIL, STR0015, 	 } ) //"Código EPC"
	aAdd( aTRB1, { "T9_NOME", 	NIL, STR0016, 	 } ) //"Nome do EPC"

	//Cria TRB
	oTempEPC := FWTemporaryTable():New( cAliasEPC, aDBF )
	If lUPDMDT81
		oTempEPC:AddIndex( "1", { "T9_OPCEPC", "T9_CODBEM" } )
	Else
		oTempEPC:AddIndex( "1", { "T9_CODBEM" } )
	EndIf
	oTempEPC:Create()

	nSizeCli := IIf( ( TAMSX3( "A1_COD" )[1] ) < 1, 6, ( TAMSX3( "A1_COD" )[1] ) )
	nSizeLoj := IIf( ( TAMSX3( "A1_LOJA" )[1] ) < 1, 2, ( TAMSX3( "A1_LOJA" )[1] ) )

	dbSelectArea( cAliasEPC )
	//Busca todos os EPCs
	Processa( { |lEnd| fSearchEPC( cAliasEPC, cAliasCmp, cButtonEPC, @cMarca ) }, STR0023 + "...", STR0024 ) //"Buscando EPC" ## "Espere"

	Dbselectarea( cAliasEPC )
	Dbgotop()
	If (cAliasEPC)->(Reccount()) <= 0
		dbSelectArea( cAliasEPC )
		//Use
		oTempEPC:Delete()
		RestArea( aArea )
		lRefresh := .T.
		Msgstop( STR0017, STR0018 ) //"Não existem EPC's cadastrados." //"ATENÇÃO"
		Return .T.
	Endif

	nOpt := 2
	oFont := TFont():New( "ARIAL", , 14.5, ,/*lBold*/ , , , , ,/*lUnderline*/ , /*lItalic*/ )

	DEFINE MSDIALOG oDlgMkb TITLE OemToAnsi(STR0012) From 150,0 To 690,565 PIXEL OF oMainWnd //"EPC's"

		oPanelAll := TPanel():New(0, 0, Nil, oDlgMkb, Nil, .T., .F., Nil, Nil, 0, 0, .F., .F. )
		oPanelAll:Align := CONTROL_ALIGN_ALLCLIENT

		oPanelTop := TPanel():New(0, 0, Nil, oPanelAll, Nil, .T., .F., Nil, Nil, 0, 50, .F., .F. )
		oPanelTop:Align := CONTROL_ALIGN_TOP

			TGroup():New( 5, 5, 40, 280,/*cCaption*/ , oPanelTop, CLR_BLACK, CLR_WHITE, .T.,/*uParam10*/ )

			TSay():New( 015, 015, { || IIf( cButtonEPC == "1", OemtoAnsi( STR0019 ), OemtoAnsi( STR0027 ) ) }, oPanelTop, , oFont, .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 014 ) //"Estes são os bens cadastrados no sistema."

			TSay():New( 025, 015, { || OemtoAnsi( STR0020 ) }, oPanelTop, , oFont, .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 014 ) //"Selecione os EPC's que são necessários para este risco."

		oPanelMark := TPanel():New(0, 0, Nil, oPanelAll, Nil, .T., .F., Nil, Nil, 0, 70, .F., .F. )
		oPanelMark:Align := CONTROL_ALIGN_ALLCLIENT

		oMarkEPC := MsSelect():New( cAliasEPC, "T9_OK", , aTRB1, @lINVERTE, @cMARCA, { 000, 005, 200, 280 }, , , oPanelMark )
		oMarkEPC:oBROWSE:lHASMARK := .T.
		oMarkEPC:oBROWSE:lCANALLMARK := .T.
		oMarkEPC:oBROWSE:bALLMARK := {|| MDTA265INV( @cMarca, cAliasEPC ) }

	ACTIVATE MSDIALOG oDlgMkb ON INIT EnchoiceBar(oDlgMkb,{|| nOpt := 1,oDlgMkb:End()},{|| nOpt := 2,oDlgMkb:End()})

	If nOpt == 1
		Processa( { |lEnd| MDT265CPY( cAliasEPC, cButtonEPC ) } )
	EndIf

	dbSelectArea( cAliasEPC )
	//Use
	oTempEPC:Delete()

	RestArea( aArea )
	lRefresh := .T.

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA265INV

Inverte a marcacao do browse

@author  Andre Perez Alvarez
@since   19/07/2007
@version version
/*/
//-------------------------------------------------------------------
Function MDTA265INV( cMarca, cAliasEPC )

	Local aArea := GetArea()

	Dbselectarea( cAliasEPC )
	Dbgotop()
	While !Eof()
		( cAliasEPC )->T9_OK := IIf( ( cAliasEPC )->T9_OK == "  ", cMARCA, "  " )
		Dbskip()
	End

	RestArea( aArea )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT265CPY

Copia os EPC'selecionados no markbrowse para o a GetDados

@author  Andre Perez Alvarez
@since   20/07/2007
@version version
/*/
//-------------------------------------------------------------------
Static Function MDT265CPY( cAliasTRB, cButtonEPC )

	Local nPosCod, nPosDes, nPosOpc
	Local nCols
	Local lPosOpc
	Local lSeekTRB

	Local aColsTp	:= BLANKGETD( oGetEPC:aHeader )

	nPosCod := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_EPC" } )
	nPosDes := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_NOMEPC" } )
	nPosOpc := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_OPCEPC" } )

	For nCols := Len( oGetEPC:aCols ) To 1 Step -1

		dbSelectArea( cAliasTRB )
		dbSetOrder( 1 )
      //Caso não existir faz a busca pelo indice (T9_CODBEM). Senao pelo (T9_OPCEPC + T9_CODBEM)
		If nPosOpc == 0
			lSeekTRB := dbSeek( oGetEPC:aCols[nCols, nPosCod] )
		Else
			lSeekTRB := dbSeek( oGetEPC:aCols[nCols, nPosOpc] + oGetEPC:aCols[nCols, nPosCod] )
		EndIf
		//Deletara do aCols os valores nao existente na TRB ou que nao foram preenchidos no MarkBrowse
		If ( !lSeekTRB .Or. Empty( ( cAliasTRB )->T9_OK ) )
		 	//Caso tenha rodado o UPDMDT81 nao conscidera valores conforme o parametro do Botoa ( cButtonEPC )
			// ou que não estejao deletados
			//Deixado !Empty(oGetEPC:aCols[nCols,nPosOpc]) caso aCols esteja vazio, não deletara a primeira linha vazia...
			If nPosOpc > 0 .And. !Empty( oGetEPC:aCols[nCols, nPosOpc] )
				If oGetEPC:aCols[nCols, nPosOpc] <> cButtonEPC
					Loop
				EndIf
			EndIf

			aDel( oGetEPC:aCols, nCols )
			aSize( oGetEPC:aCols, Len( oGetEPC:aCols ) -1 )
		EndIf
	Next nCols

	dbSelectArea( cAliasTRB )
	dbGoTop()
	While ( cAliasTRB )->( !Eof() )

		//Carrega no aCols os valores preenchidos no MarkBrowse | Se existir TO9_OPCEPC vai verificar se o aCols esta igual a opcao do botao (cButtonEPC)
		If !Empty( ( cAliasTRB )->T9_OK ) .And. aScan( oGetEPC:aCols, { |x| Alltrim( UPPER( x[nPosCod] ) ) == Alltrim( UPPER( ( cAliasTRB )->T9_CODBEM ) );
			.And. IIf( nPosOpc > 0, x[nPosOpc] == cButtonEPC, .T.) } ) == 0

			aAdd( oGetEPC:aCols, aClone( aColsTp[1] ) )
			oGetEPC:aCols[ Len( oGetEPC:aCols ), nPosCod ] := (cAliasTRB)->T9_CODBEM
			oGetEPC:aCols[ Len( oGetEPC:aCols ), nPosDes ] := (cAliasTRB)->T9_NOME

			//Caso TO9_OPCEPC exista atribui valor;
			If nPosOpc > 0
				oGetEPC:aCols[ Len( oGetEPC:aCols ), nPosOpc ] := cButtonEPC
			EndIf

		EndIf
		( cAliasTRB )->( dbSkip() )
	End

	If Len( oGetEPC:aCols ) <= 0
		oGetEPC:aCols := aClone( aColsTp )
	EndIf

	aSort( oGetEPC:aCols, , , { |x, y| x[1] < y[1] } ) //Ordena por OPCEPC

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG265Cabec()
Monta cabecalho para rotina de EPC

@author Guilherme Benkendorf
@since 14/05/13
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function NG265Cabec( nOpcx )

	Local cKeyGet
	Local cWhileGet
	Local nInd
	Local aNoFields	:= {}

	// Monta a GetDados dos Requisitos Legais
	aAdd( aNoFields, "TO9_FILIAL" )
	aAdd( aNoFields, "TO9_NUMRIS" )
	aAdd( aNoFields, "TO9_AGENTE" )
	aAdd( aNoFields, "TO9_NOMAGE" )
	aAdd( aNoFields, "TO9_CONTRO" )

	If lSigaMdtPs
		aAdd( aNoFields, "TO9_CLIENT" )
		aAdd( aNoFields, "TO9_LOJA" )
		nInd		:= 2
		cKeyGet 	:= "SA1->A1_COD+SA1->A1_LOJA+TN0->TN0_NUMRIS"
		cWhileGet 	:= "TO9->TO9_FILIAL == '" + xFilial( "TO9" ) + "' .AND. TO9->TO9_NUMRIS == '" + TN0->TN0_NUMRIS + "'" + ;
						" .AND. TO9->TO9_CLIENT+TO9->TO9_LOJA == '" + SA1->A1_COD + SA1->A1_LOJA + "'"
	Else
		nInd		:= 1
		cKeyGet 	:= "TN0->TN0_NUMRIS"
		cWhileGet 	:= "TO9->TO9_FILIAL == '" + xFilial( "TO9" ) + "' .AND. TO9->TO9_NUMRIS == '" + TN0->TN0_NUMRIS + "'"
	EndIf

	//Monta aCols e aHeader de TO9
	dbSelectArea( "TO9" )
	dbSetOrder( nInd )
	FillGetDados( nOpcx, "TO9", nInd, cKeyGet, { || }, { || .T.}, aNoFields, , , ,;
	    { || NGMontaAcols( "TO9", &cKeyGet, cWhileGet ) }, , aHeaderEPC, aColsEPC )

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT265RI

Monta um browse com as tarefas por funcionario

@author  Andre Perez Alvarez
@since   04/10/2007
@version version
/*/
//-------------------------------------------------------------------
Function MDT265RI( cAlias, nReg, nOpcx )

	Local aArea		:= GetArea()
	Local oldROTINA	:= aCLONE( aROTINA )
	Local oldCad	:= cCadastro
	cCliMdtPs		:= SA1->A1_COD+SA1->A1_LOJA

	aRotina			:=  MenuDef( .F. )

	// Define o cabecalho da tela de atualizacoes
	Private cCadastro	:= OemToAnsi( STR0008 ) //"Riscos"
	Private aCHKDEL		:= {}, bNGGRAVA
	Private lSH1		:= .F.

	// Endereca a funcao de BROWSE

	DbSelectArea( "TN0" )
	Set Filter To TN0_CODCLI+TN0_LOJACL == cCliMdtps
	DbSetOrder( 8 )  //TN0_FILIAL+TN0_CODCLI+TN0_LOJACL+TN0_NUMRIS
	mBrowse( 6, 1, 22, 75, "TN0" )

	DbSelectArea( "TN0" )
	Set Filter To

	aROTINA := aCLONE( oldROTINA )
	RestArea( aArea )
	cCadastro := oldCad

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MD265EPC()
Valida o campo "Código do EPC".

@author Andre Perez Alvarez
@since 04/10/07
@version MP11
@return lRet / .T. / .F.

@Obs.: Alterado por Guilherme Benkendorf no dia 23/05/13;
/*/
//---------------------------------------------------------------------
Function MD265EPC()

	Local aArea		:= GetArea()
	Local lRet		:= .T.
	Local nAt
	Local nSizeCli	:= IIf( ( TAMSX3( "A1_COD" )[1] ) < 1, 6, ( TAMSX3( "A1_COD" )[1] ) )
	Local nSizeLoj	:= IIf( ( TAMSX3( "A1_LOJA" )[1] ) < 1, 2, ( TAMSX3( "A1_LOJA" )[1] ) )
	Local nPosOPC	:= 0
	Local nPosic
	Local cTabAtu := ""
	Local cTabRel := "ST9"
	Local aColsOk := {}
	Local aHeadOk := {}

	If IsInCallStack( "MDT181REL" )
		nPosic		:= oFolder:nOption//Seleciona folder posicionado - Variavel oFolder declarada como private no MDTA181
		nAt			:= &( "oGetDad" + cValToChar( nPosic ) ):nAt
		aColsOk	:= aClone( &( "oGetDad" + cValToChar( nPosic ) ):aCols )
		aHeadOk	:= aClone( &( "aHeader" + cValToChar( nPosic ) ) )
		cTabAtu := aRelacio[ nPosic ][ 1 ]
		cTabRel := aRelacio[ nPosic ][ 4 ]
	Else
		nAt		:= oGetEPC:nAt
		aColsOk	:= oGetEPC:aCols
		aHeadOk	:= oGetEPC:aHeader
	EndIf

	If !Empty( cTabAtu )
		If cTabAtu == "TO9"
			lRet := ExistCPO( ( cTabRel ), M->TO9_EPC ) .And. ExistChav( "TO9", Alltrim( TN0->TN0_NUMRIS + M->TO9_EPC ) )
		EndIf
	Else
		nPosOPC	:= aScan( aHeadOk, { | x | Trim( Upper( x[ 2 ] ) ) == "TO9_OPCEPC" } )

	 	//Verifica se existe campo conforme parametro ou opcao selecionada de TO9_OPCEPC
		If nPosOPC > 0
			If cUtilEPC == "1"  .Or. aColsOk[ nAt, nPosOPC ] == "1"
				cTabRel	:= "ST9"
			ElseIf cUtilEPC == "2" .Or. aColsOk[ nAt, nPosOPC ] == "2"
				cTabRel	:= "TO4"
			EndIf
		EndIf

		//Valida campo TO9_EPC
		If lSigaMdtPs
			//Verifica se existe campo conforme parametro ou opcao selecionada de TO9_OPCEPC
			If nPosOPC == 0
				lRet := ExistCPO( ( cTabRel ), M->TO9_EPC ) .And. ExistChav( "TO9", Alltrim( cCliMdtps + TN0->TN0_NUMRIS + M->TO9_EPC ), 2 )
			Else
				lRet := ExistCPO( ( cTabRel ), M->TO9_EPC ) .And. ExistChav( "TO9", Alltrim( cCliMdtps + TN0->TN0_NUMRIS + aColsOk[nAt, nPosOPC] + M->TO9_EPC ), 2 )
			EndIf

			If lRet .And. cTabRel == "ST9"
				dbSelectArea( cTabRel )
				dbSeek( xFilial( ( cTabRel ) ) + M->TO9_EPC )
				lRet := Substr( ST9->T9_CCUSTO, 1, nSizeCli + nSizeLoj ) == cCliMdtPs
				If !lRet
					MsgStop( STR0022 )  //"O centro de custo do bem selecionado não pertence ao cliente."
				Endif
			ElseIf lRet .And. cTabRel == "TO4"
				lRet := .T.
			EndIf
		Else
			If nPosOPC == 0
				lRet := ExistCPO( ( cTabRel ), M->TO9_EPC ) .And. ExistChav( "TO9", Alltrim( TN0->TN0_NUMRIS + M->TO9_EPC ) )
			Else
				lRet := ExistCPO( ( cTabRel ), M->TO9_EPC ) .And. ExistChav( "TO9", Alltrim( TN0->TN0_NUMRIS + aColsOk[nAt, nPosOPC] + M->TO9_EPC ) )
			EndIf
		Endif
	EndIf

	RestArea( aArea )

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} fSearchEPC
Funcao para retornar todos os Equipamentos de protecao coletivo - EPC

@author Guilherme Benkendorf
@since 13/05/13
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function fSearchEPC( cAliasTRB, cAliasCmp, cButtonEPC, cMarca )

	Local nPosCod
	Local nPosOpc
	Local cCondEPC, cCodigo, cNome
	Local aArea   := GetArea()

	nPosCod := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_EPC" } )
	nPosOpc := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_OPCEPC" } )

	If cButtonEPC == "1"
		cCondEPC	:= "ST9->T9_FILIAL == xFilial('ST9') .And. ST9->T9_SITMAN == 'A' .And. ST9->T9_SITBEM == 'A' "
		cCodigo		:= "T9_CODBEM"
		cNome       := "T9_NOME"
		If lSigaMdtPs
			cCondEPC += " .And. Substr(ST9->T9_CCUSTO,1,nSizeCli+nSizeLoj) == cCliMdtPs"
		EndIf

	ElseIf cButtonEPC == "2"
		cCodigo		:= "TO4_CONTRO"
		cNome       := "TO4_NOMCTR"
		cCondEPC    := "xFILIAL('TO4') == TO4->TO4_FILIAL .AND. TO4->TO4_TIPCTR == '2'"
	EndIf

	dbSelectArea( cAliasCmp )
	dbSetOrder( 1 )
	dbSeek( xFilial( cAliasCmp ) )
	While (cAliasCmp)->(!Eof())
		If !(&cCondEPC)
			(cAliasCmp)->(dbSkip())
			Loop
		EndIf
		RecLock( cAliasTRB, .T. )
		//Marca quando codigo EPC estiver no aCols & se existir campo TO9_OPCEPC verifica se eh o campo eh igual ao botao solicitado
		(cAliasTRB)->T9_OK := IIf( aScan( oGetEPC:aCols, { |x| AllTrim( UPPER( x[nPosCod] ) ) == AllTrim( UPPER( &( cAliasCmp + "->" + cCodigo ) ) );
							.And. IIf(nPosOpc > 0, x[nPosOpc] == cButtonEPC, .T.) } ) > 0, cMarca, " " )
		If nPosOpc > 0
			(cAliasTRB)->T9_OPCEPC	:= cButtonEPC
		EndIf
		(cAliasTRB)->T9_CODBEM	:= &(cAliasCmp + "->" + cCodigo)
		(cAliasTRB)->T9_NOME		:= &(cAliasCmp + "->" + cNome)
		(cAliasTRB)->(MsUnLock())
		(cAliasCmp)->(dbSkip())
	End

	RestArea( aArea )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fChangeEPC()

@author Guilherme Benkendorf
@since 13/05/13
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function fChangeEPC()

	Local nPosOPC
	Local nPosEPC
	Local nAt := oGetEPC:nAt
	Local lUPDMDTA1 := NGCADICBASE( "TAF_CODAMB", "A", "TAF", .F. )

	nPosEPC	:= aScan( oGetEPC:aHeader, {|x| Trim( Upper( x[2] ) ) == "TO9_EPC" } )
	nPosOPC	:= aScan( oGetEPC:aHeader, {|x| Trim( Upper( x[2] ) ) == "TO9_OPCEPC" } )

	aTROCAF3 := {}

	If nPosOPC > 0
		If Empty( oGetEPC:aCols[ nAt, nPosEPC ] )

			//Se MV_NG2UEPC for igual a 'S'
			If cUtilEPC == "1" //Bens
				oGetEPC:aCols[ nAt, nPosOPC ] := "1"

			//Se MV_NG2UEPC for igual a 'M'
			ElseIf cUtilEPC == "2" //Medidas de Controle
				oGetEPC:aCols[ nAt, nPosOPC ] := "2"

			EndIf
		EndIf

		If oGetEPC:aCols[ nAt, nPosOPC ] == "1" //Bens
			//Troca F3 de TO9_EPC para ST9
			aAdd( aTROCAF3, { "TO9_EPC", IIf( lUPDMDTA1, "ST9MDT", "ST9" ) } )

		ElseIf oGetEPC:aCols[ nAt, nPosOPC ] == "2"
			//Troca F3 de TO9_EPC para TO4
			aAdd( aTROCAF3, { "TO9_EPC", "TO4" } )

		EndIf
	EndIf

	oGetEPC:Refresh()
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT265Relc
Funcao para relacao do nome da EPC, dependendo da Opcao de EPC;

@author Guilherme Benkendorf
@since 14/05/13
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT265Relc( cCampo )

	Local lUPDMDT81 := NGCADICBASE( "TO9_OPCEPC", "A", "TO9", .F. )
	Local lValOpc
	Local cRet := ""

	lValOpc := TO9->TO9_OPCEPC == "2"
	cVarChv := TO9->TO9_EPC

	// Relacao de TO9_NOMEPC conforme opcao gravada.

	If cCampo == "TO9_NOMEPC"
		If lUPDMDT81 .And. lValOpc //EPC Medidas de Controle
			cRet := Posicione( "TO4", 1, xFilial( "TO4" ) + SubStr( cVarChv, 1, TAMSX3( "TO4_CONTRO" )[1] ), "TO4_NOMCTR" )
		Else //EPC Bem
			cRet := Posicione( "ST9", 1, xFilial( "ST9" ) + SubStr( cVarChv, 1, TAMSX3( "T9_CODBEM" )[1] ), "T9_NOME" )
		EndIf
	EndIf

Return cRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT265WOpc
When de TO9_OPCEPC, dependentes do parametro MV_NG2UEPC;

@author Guilherme Benkendorf
@since 13/05/13
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT265WHEN(cCampo)

	Local nPosOPC
	Local nAt
	Local nPosic
	Local lRet		:= .F.
	Local cUtilEPC	:= SuperGetMv( "MV_NG2UEPC", .F., "1" ) //Indica a consistencia dos EPC, por: 1=Bens; 2 = Medidas de Controle; 3 - Ambos;
	Local aColsOk	:= {}
	Local aHeadOk	:= {}

	//Caso o parâmetro esteja com seu conteúdo vazio joga "3"
	If Empty( cUtilEPC )
		cUtilEPC := "3"
	EndIf

	If IsInCallStack( "MDT181REL" )
		lRet := .T.
	Else
		nAt		:= oGetEPC:nAt
		aColsOk	:= oGetEPC:aCols
		aHeadOk	:= oGetEPC:aHeader

	  	nPosOPC	:= aScan( aHeadOk, { |x| Trim( Upper( x[2] ) ) == "TO9_OPCEPC" } )

		//Caso tenha o campo TO9_OPCEPC e o valor do parametro for igual a 3 - Ambos distrava
		If nPosOPC > 0
			If cCampo == "TO9_OPCEPC"
				lRet := cUtilEPC == "3"
			EndIf
			//Caso esteja com parametro de utilizacao apenas com 1 ou 2, trava opcao ja gravadas do outro tipo;
			If cCampo == "TO9_EPC"
				If aColsOk[ nAt, nPosOPC ] == "1"
					lRet := cUtilEPC <> "2"
				ElseIf aColsOk[ nAt, nPosOPC ] == "2"
					lRet := cUtilEPC <> "1"
				EndIf
			EndIf
		EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT265VOpc
Valid do TO9_OPCEPC, conforme parametro MV_NG2UEPC;

@author Guilherme Benkendorf
@since 14/05/13
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT265VOpc()

	Local nPosCod
	Local cAlias    := "ST9"
	Local nInd		:= IIf( lSigaMdtPs, 2, 1 )
	Local nAt		:= oGetEPC:nAt
	Local lRet		:= .T.
	Local cUtilEPC	:= SuperGetMv( "MV_NG2UEPC", .F., "1" )//Indica a consistencia dos EPC, por: 1=Bens; 2 = Medidas de Controle; 3 - Ambos;
	Local lUPDMDTA1 := NGCADICBASE( "TAF_CODAMB", "A", "TAF", .F. )

	//Caso o parâmetro esteja com seu conteúdo vazio joga "3"
	If Empty( cUtilEPC )
		cUtilEPC := "3"
	EndIf

	nPosCod := aScan( oGetEPC:aHeader, { |x| Trim( Upper( x[2] ) ) == "TO9_EPC" } )

	//É feita a troca do F3 tambem na validacao do TO9_OPCEPC
	aTROCAF3 := {}

	If cUtilEPC == "1"  .Or. M->TO9_OPCEPC == "1"
		aAdd( aTROCAF3, { "TO9_EPC", IIf( lUPDMDTA1, "ST9MDT", "ST9" ) } )
	ElseIf cUtilEPC == "2" .Or. M->TO9_OPCEPC == "2"
		aAdd( aTROCAF3, { "TO9_EPC", "TO4" } )
	EndIf

	//Verifica o parametro ou opcao escolhido na TO9_OPCEPC para escolher alias a ser verificado
	If !Empty( oGetEPC:aCols[nAt, nPosCod] ) .And. !Empty( M->TO9_OPCEPC )
		If cUtilEPC == "1"  .Or. M->TO9_OPCEPC == "1"
			cAlias	:= "ST9"
		ElseIf cUtilEPC == "2" .Or. M->TO9_OPCEPC == "2"
			cAlias	:= "TO4"
		EndIf

		lRet := IIf( !Empty( oGetEPC:aCols[nAt, nPosCod] ), ExistCPO( ( cAlias ), oGetEPC:aCols[nAt, nPosCod] ) .And.;
				ExistChav( "TO9", cCliMdtps + TN0->TN0_NUMRIS + M->TO9_OPCEPC + oGetEPC:aCols[nAt, nPosCod], nInd ), .T. )
	EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} NG265OPCX7
Gatilho para o campo TO9_OPCEPC;

@author Guilherme Benkendorf
@since 15/05/13
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Function MDT265SX7( cCampo )

	Local aArea		:= GetArea()
	Local nPosOPC	:= 0
	Local nAt		:= 0
	Local cRet		:= ""
	Local cUtilEPC	:= SuperGetMv( "MV_NG2UEPC", .F., "1" ) //Indica a consistencia dos EPC, por: 1=Bens; 2 = Medidas de Controle; 3 - Ambos;
	Local cTabAtu	:= ""
	Local cTabRel	:= ""
	Local aColsOk	:= {}
	Local aHeadOk	:= {}

	//Caso o parâmetro esteja com seu conteúdo vazio joga "3"
	If Empty( cUtilEPC )
		cUtilEPC := "3"
	EndIf

	If IsInCallStack( "MDT181REL" )
		nPosic		:= oFolder:nOption//Seleciona folder posicionado - Variavel oFolder declarada como private no MDTA181
		nAt			:= &( "oGetDad" + cValToChar( nPosic ) ):nAt
		aColsOk	:= aClone( &( "oGetDad" + cValToChar( nPosic ) ):aCols )
		aHeadOk	:= aClone( &( "aHeader" + cValToChar( nPosic ) ) )
		cTabAtu := aRelacio[ nPosic ][ 1 ]
		cTabRel := aRelacio[ nPosic ][ 4 ]
	Else
		nAt		:= oGetEPC:nAt
		aColsOk	:= oGetEPC:aCols
		aHeadOk	:= oGetEPC:aHeader
	EndIf

	If !Empty( cTabAtu )
		If cTabAtu == "TO9" .And. cTabRel == "ST9"
			cRet := NGSEEK( "ST9", M->TO9_EPC, 1, "T9_NOME" )
		ElseIf cTabAtu == "TO9" .And. cTabRel == "TO4"
			cRet := NGSEEK( "TO4", M->TO9_EPC, 1, "TO4_NOMCTR" )
		EndIf
	Else

		nPosOpc	:= aScan( aHeadOk, { |x| Trim( Upper( x[2] ) ) == "TO9_OPCEPC" } )
	    // Gatilho de TO9_OPCEPC
		If cCampo == "TO9_OPCEPC"
			If nPosOpc > 0 .And. Empty( aColsOk[ nAt, nPosOpc ] )
			    //Gatilho conforme o parametro
				If cUtilEPC == "1"//Bens
					cRet	:= "1"
				ElseIf cUtilEPC == "2"// Medidas de Controle
					cRet	:= "2"
				EndIf
				// Se cUtilEPC estiver como 3- Ambos, valor fica em branco, usuarios selecionara valor desejado
			Else
				cRet := aColsOk[ nAt, nPosOpc ]
			EndIf

	    // Gatilho de TO9_EPC
		ElseIf cCampo == "TO9_EPC"
			//Se foi executado o UPDMDT81
			If nPosOpc > 0
				// Faz gatilho conforme o valor do parametro
				If cUtilEPC == "1" .Or. aColsOk[ nAt, nPosOpc ] == "1" .Or. ( Empty( aColsOk[ nAt, nPosOpc ] ) .And. cUtilEPC == "3" )

					cRet := NGSEEK( "ST9", M->TO9_EPC, 1, "T9_NOME" )

				ElseIf cUtilEPC == "2" .Or. aColsOk[ nAt, nPosOpc ] == "2"

					cRet := NGSEEK( "TO4", M->TO9_EPC, 1, "TO4_NOMCTR" )

				EndIf
			Else
				cRet := NGSEEK( "ST9", M->TO9_EPC, 1, "T9_NOME" )
			EndIf
		EndIf
	EndIf

	RestArea( aArea )

Return cRet