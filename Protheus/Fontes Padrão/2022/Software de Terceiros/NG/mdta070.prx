#INCLUDE "MDTA070.ch"
#Include "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA070
Programa de Cadastro de Usuarios do Sistema

@author  Marcio Costa
@since   19/12/1999
@return  Lógico, Sempre Verdadeiro
/*/
//-------------------------------------------------------------------
Function MDTA070

	// Armazena variaveis p/ devolucao (NGRIGHTCLICK)
	Local aNGBEGINPRM := NGBEGINPRM(,,{"TMK"})

	// Define Array contendo as Rotinas a executar do programa
	//  ----------- Elementos contidos por dimensao ------------
	//  1. Nome a aparecer no cabecalho
	//  2. Nome da Rotina associada
	//  3. Usado pela rotina
	//  4. Tipo de Transa‡„o a ser efetuada
	//     1 - Pesquisa e Posiciona em um Banco de Dados
	//     2 - Simplesmente Mostra os Campos
	//     3 - Inclui registros no Bancos de Dados
	//     4 - Altera o registro corrente
	//     5 - Remove o registro corrente do Banco de Dados
	Private aRotina := MenuDef()

	// Define o cabecalho da tela de atualizacoes
	Private cCadastro := OemtoAnsi(STR0006) // //"Usuarios"
	Private aCHKDEL := {}, bNGGRAVA := {|| MDT070EXC() .And. MDTObriEsoc( "TMK" , !(Inclui .Or. Altera) ) } //Verifica se campos obrigatórios ao eSocial estão preenchidos
	Private aChkSql := {}

	If AMiIn( 35 , 07 ) // Somente autorizado para SIGAMDT

		// aCHKDEL array que verifica a INTEGRIDADE REFERENCIAL na exclu-
		// são do registro.
		//
		// 1 - Chave de pesquisa
		// 2 - Alias de pesquisa
		// 3 - Ordem de pesquisa
		aCHKDEL := { {'TMK->TMK_CODUSU'    , "TML", 1},;
					{'TMK->TMK_CODUSU'    , "TMT", 2},;
					{'TMK->TMK_CODUSU'    , "TMY", 4},;
					{'TMK->TMK_CODUSU'    , "TMJ", 1},;
					{'TMK->TMK_CODUSU'    , "TMW", 2},;
					{'TMK->TMK_CODUSU'    , "TMV", 2},;
					{'TMK->TMK_CODUSU'    , "TNW", 2},;
					{'TMK->TMK_CODUSU'    , "TO0", 3},;
					{'TMK->TMK_CODUSU'    , "TLE", 2},;
					{'TMK->TMK_CODUSU'    , "TL5", 4}}

		If NGCADICBASE("TLV_FILIAL","A","TLV",.F.)
			aAdd( aCHKDEL, {'TMK->TMK_CODUSU'    , "TLV", 3} )
		Endif

		// Endereca a funcao de BROWSE
		DbSelectArea("TMK")
		DbSetOrder(1)
		mBrowse( 6, 1,22,75,"TMK")
	EndIf

	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} GRAVAMED
Função que verifica se o usuario é médico, caso seja ele vai ser
gravado na tabela TNP - Medicos Emiten. Atest.

@author  Marcio Costa
@since   19/12/1999

@param   cALIAT, Caractere, Alisas da tabela
@param   nREG1, Numérico, Número do registro
@param   nOPX, Numérico, Número da Opção

@return  Lógico, Sempre Verdadeiro
/*/
//-------------------------------------------------------------------
Function GRAVAMED( cALIAT , nREG1, nOPX )

	// Removido campo da tela, pois deverá ser apresentado somente na nova agenda
	If !IsInCallStack( 'MDTA076' )
		aNao := { 'TMK_QTDHRS' }
		aChoice := NGCAMPNSX3( 'TMK', aNao )
	EndIf

	nRETU := NGCAD01( cALIAT, nREG1, nOPX )
	If nRETU == 1
		If TMK->TMK_INDFUN == '1' .Or. TMK->TMK_INDFUN == '6'
			Dbselectarea( 'TNP' )
			Dbsetorder( 1 )
			If !Dbseek( xFilial( 'TNP' ) + TMK->TMK_CODUSU )
				RecLock( 'TNP', .T. )
				TNP->TNP_FILIAL := xFilial( 'TNP' )
				TNP->TNP_EMITEN := TMK->TMK_CODUSU
				TNP->TNP_NOME   := TMK->TMK_NOMUSU
				If TNP->( FieldPos( 'TNP_INDFUN' ) ) > 0
					TNP->TNP_INDFUN := TMK->TMK_INDFUN
				Endif
				If TNP->( FieldPos( 'TNP_ENTCLA' ) ) > 0
					TNP->TNP_ENTCLA := TMK->TMK_ENTCLA
				Endif
				If TNP->( FieldPos( 'TNP_NUMENT' ) ) > 0
					TNP->TNP_NUMENT := TMK->TMK_NUMENT
				Endif
				If TNP->( FieldPos( 'TNP_USUARI' ) ) > 0
					TNP->TNP_USUARI := TMK->TMK_USUARI
				Endif
				If TNP->( FieldPos( 'TNP_UF' ) ) > 0
					TNP->TNP_UF := TMK->TMK_UF
				Endif
				MsunLock( 'TNP' )
			Else
				RecLock( 'TNP', .F. )
				TNP->TNP_NOME	:= TMK->TMK_NOMUSU
				TNP->TNP_ENTCLA	:= TMK->TMK_ENTCLA
				TNP->TNP_NUMENT	:= TMK->TMK_NUMENT
				TNP->TNP_INDFUN	:= TMK->TMK_INDFUN
				If TNP->( FieldPos( 'TNP_USUARI' ) ) > 0
					TNP->TNP_USUARI := TMK->TMK_USUARI
				Endif
				If TNP->( FieldPos( 'TNP_UF' ) ) > 0
					TNP->TNP_UF := TMK->TMK_UF
				Endif
				MsunLock( 'TNP' )
			Endif
		Endif
	Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional

@obs Parametros do array aRotina:
1. Nome a aparecer no cabecalho
2. Nome da Rotina associada
3. Reservado
4. Tipo de Transão a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
    2 - Simplesmente Mostra os Campos
    3 - Inclui registros no Bancos de Dados
    4 - Altera o registro corrente
    5 - Remove o registro corrente do Banco de Dados
5. Nivel de acesso
6. Habilita Menu Funcional

@author  Rafael Diogo Richter
@since   29/11/2006
@return  aRotina, Array, Opções da rotina
/*/
//-------------------------------------------------------------------
Static Function MenuDef()

	Local lPyme := Iif(Type("__lPyme") <> "U",__lPyme,.F.)
	Local aRotina
	Local lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .T. , .F. )

	If !lSigaMdtPS
		aRotina := 	{ 	{ STR0001, "AxPesqui"  , 0 , 1},; // //"Pesquisar"
						{ STR0002,"NGCAD01"   , 0 , 2},; // //"Visualizar"
						{ STR0003,   "GRAVAMED"   , 0 , 3},; // //"Incluir"
						{ STR0004,   "GRAVAMED"   , 0 , 4},; // //"Alterar"
						{ STR0005,   "NGCAD01"   , 0 , 5, 3} } // //"Excluir"
	Else
		aRotina := 	{ 	{ STR0001,"AxPesqui"  , 0 , 1},; // //"Pesquisar"
						{ STR0002,"NGCAD01"   , 0 , 2},; // //"Visualizar"
						{ STR0003,"GRAVAMED"  , 0 , 3},; // //"Incluir"
						{ STR0004,"GRAVAMED"  , 0 , 4},; // //"Alterar"
						{ STR0005,"NGCAD01"   , 0 , 5, 3},;  // //"Excluir"
						{ STR0008,"MDTA320",0 , 6 , 3 } } //"Agenda Servico"
	EndIf

	If !lPyme
		AAdd( aRotina, { STR0007, "MsDocument", 0, 4 } )  //"Conhecimento"
	EndIf

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT70WHEN
When dos campos da tabela TMK

@author  Roger Rodrigues
@since   14/09/2010
@sample  MDT70WHEN("TMK_CALEND")
@param   cCampo, Caractere, Nome do campo utilizado.

@return  lRet, Lógico, Verdadeiro se o campo pode ser editado
/*/
//-------------------------------------------------------------------
Function MDT70WHEN(cCampo)

	Local lRet := .T.
	Local cCodiUsr := RetCodUsr()
	Local cUsrPerm := SuperGetMv("MV_NG2USR",.F.,"000000")

	If cCampo == "TMK_CALEND" .And. NGCADICBASE("TMK_CALEND","A","TMK", .F.)
		dbSelectArea("TML")
		dbSetOrder(1)
		If dbSeek(xFilial("TML")+M->TMK_CODUSU)
			M->TMK_CALEND := TML->TML_CALEND
			M->TMK_DESCAL := NGSEEK("SH7",TML->TML_CALEND,1,"H7_DESCRI")
			lRet := .F.
		Endif
	ElseIf cCampo == "TMK_USUARI" .And. NGCADICBASE("TMK_USUARI","A","TMK", .F.)
		If !(cCodiUsr $ cUsrPerm)
			lRet := .F.
		EndIf
	Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT070EXC
Deleta os registros relacionados na TNP

@author  Jackson Machado
@since   20/01/2012
@return  Lógico, Sempre Verdadeiro
/*/
//-------------------------------------------------------------------
Static Function MDT070EXC()

	Local aAreaTMK	:= TMK->( GetArea() )
	Local aoldSX9	:= aClone( aChkSql )

	aChkSql := Nil

	If !INCLUI .And. !ALTERA
		If M->TMK_INDFUN == '1' .Or. M->TMK_INDFUN == '6'
			dbSelectArea( 'TNP' )
			dbSetOrder( 1 )
			dbseek( xFilial( 'TNP' ) + M->TMK_CODUSU )
			If TNP->TNP_INDFUN == '1' .Or. TNP->TNP_INDFUN == '6'
				If !NGVALSX9( 'TNP', , .T. )
					aChkSql := aClone( aoldSX9 )
					RestArea( aAreaTMK )
					Return .F.
				Endif
			EndIf

			dbSelectArea( 'TNP' )
			dbSetOrder( 1 )
			If dbseek( xFilial( 'TNP' ) + M->TMK_CODUSU )
				While !Eof() .And. M->TMK_CODUSU == TNP->TNP_EMITEN
					If TNP->TNP_INDFUN == '1' .Or. TNP->TNP_INDFUN == '6'
						RecLock( 'TNP', .F. )
						dbDelete()
						TNP->( MsUnLock() )
						TNP->( dbSkip() )
					Else
						TNP->( dbSkip() )
					EndIf
				End
			EndIf
		EndIf
	ElseIf INCLUI .Or. ALTERA
		// Caso seja inclusão de médico do trabalho ou médico, valida a integridade com a tabela TNP
		If IIf( INCLUI, M->TMK_INDFUN == '1' .Or. M->TMK_INDFUN == '6',;
		( TMK->TMK_INDFUN == '1' .Or. TMK->TMK_INDFUN == '6' ) .Or.( M->TMK_INDFUN == '1' .Or. M->TMK_INDFUN == '6' ) )
			dbSelectArea( 'TNP' )
			dbSetOrder( 1 )
			If dbseek( xFilial( 'TNP' ) + M->TMK_CODUSU )
				If ALTERA .And. M->TMK_INDFUN != TMK->TMK_INDFUN
					ShowHelpDlg( STR0010 , { STR0017 + FWX3Titulo( "TMK_INDFUN" ) + CRLF + STR0018 } , 2 , { STR0019 } , 2 )
					// "Não é permitido alterar o campo "
					// "Já existe registro relacionado ao médico emitente de atestado."
					// "Realize o cadastro de um novo usuário com a função desejada."
					Return .F.
				ElseIf INCLUI
					ShowHelpDlg( STR0010 , { STR0015 } , 2 , { STR0016 } , 2 )
					// "Não é possível incluir o médico. Código já existênte na tabela de Emitentes de Atestado (TNP)"
					// "Favor informar um código de usuário diferente"
					Return .F.
				EndIf
				RestArea( aAreaTMK )
			EndIf
		EndIf
	Endif

	dbSelectArea( 'TMK' )
	aChkSql := aClone( aoldSX9 )
	RestArea( aAreaTMK )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT070VUS
Valida o usuario digitado
Uso TMK_USUARI

@return .T./.F.

@sample
MDT070VUS()

@author Jackson Machado
@since 21/08/2012
/*/
//---------------------------------------------------------------------
Function MDT070VUS(lTNP)

	Local nPosTMK
	Local nOrdTMK
	Local lConfirma := .T.
	Local lUseTNP   := If(lTNP == Nil,.F.,lTNP)
	Local cAlias    := IF(lUseTNP,"TNP","TMK")
	Local nIdx		:= IF(lUseTNP,3,4)
	Local cUserVal  := IF(lUseTNP,M->TNP_USUARI,M->TMK_USUARI)
	Local cUserAtu  := IF(lUseTNP,TNP->TNP_USUARI,TMK->TMK_USUARI)
	Local cCampVer  := IF(lUseTNP,"TNP_USUARI","TMK_USUARI")

	nPosTMK   := (cAlias)->(Recno())
	nOrdTMK   := (cAlias)->(IndexOrd())

	If !Empty(cUserVal)
		PswOrder(2)
		If PswSeek(cUserVal)
			IF INCLUI
				(cAlias)->(DbSetOrder(nIdx))
				If (cAlias)->(dbSeek(PADR(cUserVal,25)))
					While (cAlias)->&(cCampVer) == PADR(cUserVal,25)
						If xFilial( cAlias ) == ( cAlias )->&( PrefixoCPO( cAlias ) + "_FILIAL" )
							MsgAlert(OemToAnsi(STR0009),OemToAnsi(STR0010)) //"J  existe um usu rio cadastrado com este login." ### "ATENÇÃO"
							lConfirma := .F.
						EndIf
						(cAlias)->(dbSkip())
					End
				Endif
			Else
				IF PADR(cUserVal,25) <> PADR(cUserAtu,25)
					(cAlias)->(DbSetOrder(nIdx))
					If (cAlias)->(dbSeek(PADR(cUserVal,25)))
						While (cAlias)->&(cCampVer) == PADR(cUserVal,25)
							If xFilial( cAlias ) == ( cAlias )->&( PrefixoCPO( cAlias ) + "_FILIAL" )
								MsgAlert(OemToAnsi(STR0009),OemToAnsi(STR0010)) //"J  existe um usu rio cadastrado com este login." ### "ATENÇÃO"
								lConfirma := .F.
							EndIf
							(cAlias)->(dbSkip())
						End
					Endif
				ENDIF
			ENDIF
		Else
			MsgAlert(OemToAnsi(STR0011),OemToAnsi(STR0010)) //"Não foi encontrado usuário com este login." ### "ATENÇÃO"
			lConfirma := .F.
		Endif
	Endif

	(cAlias)->(DbSetOrder(nOrdTMK))
	(cAlias)->(DbGoto(nPosTMK))

Return lConfirma

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT070VENT
Função utilizada no valid do campo TMK_NUMENT, para avisar o usuário
que não deve haver caracteres especiais e o número não deve ser maior
que 10 caracteres quando houver integração com o GPE.

@author  Julia Kondlatsch
@since   09/05/2018
@return  nRet, Lógico, Verdeiro se o não houverem caracteres no
número
/*/
//-------------------------------------------------------------------
Function MDT070VENT()

	Local nX       := 0
	Local lRet     := .T.
	Local cString  := AllTrim(M->TMK_NUMENT)

	If SuperGetMv('MV_MDTGPE', .F., 'N') == 'S' //Se possuir integração com o estoque

		For nX := 0 To Len( cString )
			If !LetterOrNum( SubStr( cString, nX, 1 ) )
				lRet := .F.
				Exit
			EndIf
		Next 'nX'

		If Len( cString ) > 10
			lRet := .F.
		EndIf

		If !lRet
			lRet := MsgYesNo( STR0012 + CRLF + STR0013, STR0014 ) //Para a correta integração com o CAGED o Número da Entidade de Classe deve conter apenas caracteres alfanuméricos e não pode ser superior a 10 caracteres.' + CRLF + ' Deseja manter o número informado?' # 'Atenção'
		EndIf

	EndIf

Return lRet
