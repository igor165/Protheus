#Include "MDTC315.ch"
#Include "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTC315
Consulta Geral de Exames do Funcionário

@type    function
@author  Inacio Luiz Kolling
@since   10/04/2000
@sample  MDTC315()

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDTC315()

	//Guarda conteudo e declara variaveis padroes
	Local aNGBEGINPRM := NGBEGINPRM()

	// Define o cabecalho da tela de baixas
	Private cPrograma := "MDTC310"
	Private aRotina   := MenuDef()
	Private cChvFor   := STR0019 // "Fornecedor+Loja+Exame+Início"
	Private cTitPes   := STR0001 // "Pesquisar"
	Private cChvExa   := STR0018 // "Ficha Médica+Data Exame+Cod. Exame"

	cCadastro := OemToAnsi(STR0005) //"Exames"

	If FindFunction("MDTRESTRI") .And. !MDTRESTRI(cPrograma)
		// Devolve variaveis armazenadas (NGRIGHTCLICK)
		NGRETURNPRM(aNGBEGINPRM)
		Return .F.
	EndIf

	// Endereca a funcao de BROWSE
	mBrowse( 6, 1,22,75,"TM4")

	// Recupera a Ordem Original do arquivo principal
	dbSelectArea("TM4")
	dbSetOrder(1)

	//Retorna conteudo de variaveis padroes
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDC315EXA
Monta um browse com os exames

@type    function
@author  Inacio Luiz Kolling
@since   10/04/2000
@sample  MDC315EXA()

@return  Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function MDC315EXA()

	Local OldRot
	Local cPerg  := "MDT315    "

	OldRot := aCLONE(aROTINA)

	aRotina := { { STR0001, "NGPESQTRB( 'TRB5',{ cChvExa }, 9, cTitPes )", 0, 1     }, ; // "Pesquisar"
				 { STR0002, "NGCAD01"                                    , 0, 2     }, ; // "Visualizar"
				 { STR0006, "MDC315RES"                                  , 0, 6 , 0 } }  // "Resultado"

	nRECNO := RECNO()

	// Variaveis utilizadas para parametros
	// mv_ch1     // Tipo de Exames (Progrados,Pendentes,Realizados,Todos)
	// mv_ch2     // De  Data
	// mv_ch3     // Ate Data

	lSigaMdtPS	:= IIF( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .T. , .F. )
	nTa1 		:= IIF((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
	nTa1L		:= IIF((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))
	nSizeTD	:= nTa1+nTa1L

	If !pergunte(AllTrim(cPerg),.T.)
		aRotina := aCLONE(OldRot)
		return
	EndIf

	M->TM5_EXAME := TM4->TM4_EXAME
	cTIP := STR0007 //'Programadas'

	dbSelectArea("TM5")

	If lSigaMdtps
		cKey := M->TM5_EXAME + mv_par04+mv_par05
		bWHILE := {|| !eof() .And. TM5->TM5_EXAME == M->TM5_EXAME .And. SubStr(TM5->TM5_CC,1,nSizeTD) >= mv_par04+mv_par05 .And. SubStr(TM5->TM5_CC,1,nSizeTD) <= mv_par06+mv_par07 }
	Else
		cKey := M->TM5_EXAME
		bWHILE := {|| !eof() .And. TM5->TM5_EXAME == M->TM5_EXAME}
	EndIf

	If mv_par01 = 1 // PROGRAMADOS

		bFOR   := {|| TM5_FILIAL  == xFilial("TM5") .And. ;
					TM5_EXAME   == M->TM5_EXAME   .And. ;
					(TM5_DTPROG >= MV_PAR02       .And. ;
					TM5_DTPROG <= MV_PAR03)       .And. ;
					TM5_DTPROG >= dDataBase       .And. ;
					Empty(TM5_DTRESU)}

	ElseIf mv_par01 = 2  // PENDENTES

		bFOR   := {|| TM5_FILIAL  == xFilial("TM5") .And. ;
					TM5_EXAME   == M->TM5_EXAME   .And. ;
					(TM5_DTPROG >= MV_PAR02        .And. ;
					TM5_DTPROG <= MV_PAR03)       .And. ;
					TM5_DTPROG <= dDataBase       .And. ;
					Empty(TM5_DTRESU)}

		cTIP := STR0008 //'Pendentes'

	ElseIf mv_par01 = 3  // REALIZADOS

		bFOR   := {|| TM5_FILIAL  == xFilial("TM5") .And. ;
					TM5_EXAME   == M->TM5_EXAME   .And. ;
					(TM5_DTPROG >= MV_PAR02        .And. ;
					TM5_DTPROG <= MV_PAR03)       .And. ;
					!Empty(TM5_DTRESU)}

		cTIP := STR0009 //'Realizadas'
	Else
		bFOR   := {|| TM5_FILIAL  == xFilial("TM5") .And. ;
					TM5_EXAME   == M->TM5_EXAME   .And. ;
					(TM5_DTPROG >= MV_PAR02        .And. ;
					TM5_DTPROG <= MV_PAR03)}
		cTIP := STR0010 //'Todos'
	EndIf

	dbSelectArea("TM5")
	If lSigaMdtps
		DbSetOrder(17)  //TM5_FILIAL+TM5_EXAME+TM5_CC+TM5_FORNEC+TM5_LOJA
	Else
		DbSetOrder(2)  //TM5_FILIAL+TM5_EXAME+TM5_FORNEC
	EndIf

	NGCONSULTA( "TRB5", cKey, bWHILE, bFOR, aRotina, {}, , , .T. )

	dbSelectArea("TM5")
	dbSetOrder(1)

	aRotina := aCLONE(OldRot)

	dbSelectArea("TM4")
	DbSetOrder(1)
	DBgoto(nRECNO)

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} MDC315FEX
Monta um browse dos Exames X Fornecedores

@type    function
@author  Inacio Luiz Kolling
@since   10/04/2000
@sample  MDC315FEX()

@return Nil, Sempre nulo
/*/
//-------------------------------------------------------------------
Function MDC315FEX()

	Local olddetalhe

	Private cCadastro := OemtoAnsi(STR0011) //"Exames X Fornecedor"

	olddetalhe := aCLONE(aROTINA)

	aRotina := { { STR0001, "NGPESQTRB('TRBD', { cChvFor }, 20, cTitPes )", 0, 1 }, ; // "Pesquisar"
				{ STR0002, "NGCAD01"                                  , 0, 2 } }  // "Visualizar"

	aNGFIELD := {}

	M->TMD_EXAME := TM4->TM4_EXAME

	dbSelectArea("TMD")
	dbSetOrder(2)

	bWHILE := {|| !eof() .And. TMD->TMD_EXAME == M->TMD_EXAME}

	bFOR   := {|| TMD_FILIAL  == xFilial("TMD") .And. ;
				TMD_EXAME   == M->TMD_EXAME}

	NGCONSULTA("TRBD", M->TMD_EXAME, bWHILE, bFOR, aRotina,{},aNGFIELD)

	dbSelectArea("TMD")
	dbSetOrder(1)

	aRotina := aCLONE(olddetalhe)

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} MDC315RES
Verifica se já foi informado o resultado do exame

@type    function
@author  Inacio Luiz Kolling
@since   10/04/2000
@sample  MDC315RES( 'XXX', 1, 3 )

@param   cALIAS, Caractere, Alias utilizado
@param   nREG, Numéricp, Numero do registro
@param   nOPCX, Numérico, Operação sendo efetuada

@return  Numérico, Retorna a peração efetuada, passada por parâmetro
/*/
//-------------------------------------------------------------------
Function MDC315RES( cALIAS, nREG, nOPCX )

	If Empty(TM5->TM5_DTRESU)
		Help(" ",1,"NGSINFREXA") //"Nao Foi Informado o Resultado do Exame"
	Else
		MDC305RES()
	EndIf

	dbSelectArea("TM5")

Return nOPCX

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilização de Menu Funcional

@type    function
@author  Rafael Diogo Richter
@since   29/11/2006
@sample  MenuDef()
@param   param, param_type, param_descr

@Obs     Parametros do array a Rotina:
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada
	3. Reservado
	4. Tipo de Transação a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
		2 - Simplesmente Mostra os Campos
		3 - Inclui registros no Bancos de Dados
		4 - Altera o registro corrente
		5 - Remove o registro corrente do Banco de Dados
	5. Nivel de acesso
	6. Habilita Menu Funcional

@return  aRotina, Array, Opções da rotina
/*/
//-------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina :=  { { STR0001 ,"AxPesqui"  , 0 , 1},; //"Pesquisar"
						{ STR0002 ,"NGCAD01"  , 0 , 2},; //"Visualizar"
						{ STR0003 ,"MDC315EXA" , 0 , 3},; //"Consulta"
						{ STR0004 ,"MDC315FEX" , 0 , 4}}  //"Forn X Exames"

Return aRotina

/*---------------------------------------------------------------------
{Protheus.doc} MDT315VLDT
Valida Parâmetro Até Data

@type    function
@author  Bruno Lobo de Souza
@since   12/12/2013
@sample  MDT315VLDT(MV_PAR02,MV_PAR03)

@param   cParDe, Caractere, Data inicail da busca
@param   cParAte, Caractere, Datav final da busca

@return  Lógico, Verdadeiro se os parâmetros fores válidos
---------------------------------------------------------------------*/
Function MDT315VLDT(cParDe,cParAte)

	Local lRet := .T.

	If cParAte < cParDe
		Help(" ",1,"DATAINVALI")
		lRet := .F.
	EndIf

Return lRet