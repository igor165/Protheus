#INCLUDE "PROTHEUS.CH"
#INCLUDE "MNTA995.ch"

//Variaveis estaticas com as posicoes da array aShape
Static __IDPNEU__     := 1
Static __CODPNEU__    := 2
Static __IMGX__       := 3
Static __IMGY__       := 4
Static __TYPE__       := 5
Static __ARRTXT__     := 6
Static __IDTXT__      := 1
Static __VIDA__       := 1
Static __ESTEPE__     := 2
Static __INVISIBLE__  := 3
Static __INFO__       := 7
Static __TOOLTIP__    := 8
Static __TXTVISIBLE__ := 9

//----------------------------
//Posições da array aPNEUSINI
//----------------------------
Static __LOCALIZ__ := 1
Static __CODBEM__  := 2
Static __CODFAMI__ := 3
Static __EIXO__    := 4
Static __TIPEIXO__ := 5
Static __MEDIDA__  := 6
Static __SULCO__   := 7
Static __BANDA__   := 8
Static __DOT__     := 9
Static __STATUS__  := 10
Static __SEQREL__  := 11
Static __MOTIVO__  := 12
Static __CODESTO__ := 13
Static __LOCPAD__  := 14
Static __USUARIO__ := 15
Static __CCUSTO__  := 16
Static __CENTRAB__ := 17

//Usadas no MNTA231
Static __LIVRE__   := 18 // Opcao Livre
Static __LOCALAM__ := 19 // Almoxarifado
Static __NUMLOTE__ := 20 // Sub_lote
Static __LOTECTL__ := 21 // Lote
Static __NUMSERI__ := 22 // Numero da serie
Static __LOCALIF__ := 23 // Localizacao fisica
Static __DATAVAL__ := 24 // Data de validade
Static __CODEANT__ := 25 // Codigo do produto no estoque antigo

// Execucao automatica da rotina
Static l995Auto    := .F.

Static lUseSRA     := .F.

//--------------------------------------
//Posições da array aMedicao e aCalibra
//--------------------------------------
#DEFINE __cPneu__ 1
#DEFINE __nSulco1__ 2
#DEFINE __nSulco2__ 3
#DEFINE __nSulco3__ 4
#DEFINE __nCalAfe__ 2
#DEFINE __nCalRea__ 3

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA995
Cadastro de calibragens dos veiculos.

@author Rafael Diogo Richter.
@since 02/03/2009
@version 1.0

@param [xRotAuto], array, Quando em Rotina automática contém array com campos
da Calibragem/Medição de Sulco
@param [xRotAutC], array, Quando em Rotina automática contém array com campos
dos pneus na Calibragem/Medição de Sulco
@param [nOpcAuto], numérico, Opções da rotina automática (Default 3 - Inclusão)
@return boolean, Nulo.

@obs Criação de execauto.
@autor Diego de Oliveira.
@since 05/12/2019
/*/
//---------------------------------------------------------------------
Function MNTA995( xRotAuto, xRotAutC, nOpcAuto )

	Local aNGBEGINPRM := {}

	If !FindFunction( 'MNTAmIIn' ) .Or. MNTAmIIn( 95 )

		lUseSRA := Trim( Posicione( 'SX3', 2, 'TTO_EXECUT', 'X3_F3' ) ) == 'CAD'

		aNGBEGINPRM := NGBEGINPRM()

		Private aRotina := MenuDef()
		Private cBem    := Space(Len(ST9->T9_CODBEM))
		Private dData   := dDataBase
		Private cHrCal  := Time()
		Private cExecut := Space(Len(SRA->RA_MAT))
		Private oMenu
		Private cCadastro := STR0073 //"Calibragem e Medição de Sulco"

		// Variável utilizada quando execução do fonte é feita através de MsExecAuto
		Default nOpcAuto := 3

		// Define se a rotina está sendo executada de forma automática, por meio da variável estática l995Auto
		l995Auto := ValType(xRotAuto) <> "U"

		If l995Auto // Caso a a chamada seja para Rotina Automática

			Private aRotAuto := aClone(xRotAuto)
			Private aCalAuto := aClone(xRotAutC)
			mBrowseAuto(nOpcAuto, aRotAuto, "TTO")
			l995Auto := .F. // retorna no valor inicial

		Else

			mBrowse(6,1,22,75,"TTO")
		EndIf

		dbSelectArea("TTO")
		dbSetOrder(1)

		//Retorna conteúdo de variáveis padrões
		NGRETURNPRM(aNGBEGINPRM)

	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA995Pro
Monta a calibração e medição de sulco no modo simples

@param cAlias, string, tabela do processo
@param nRecno, numerico, registro posicionado
@param nOpcx, numerico, operação
@author Rafael Diogo Richter
@since 02/03/2009

@return boolean, se obteve sucesso
/*/
//---------------------------------------------------------------------
Static Function MNTA995Pro( cAlias, nRecno, nOpcx)

	Local _aArea := GetArea()
	Local cCampo, nX, nY, cCaption, cPict, cValid, cF3
	Local cWhen, nLargSay, oSay, oGet,oGet2,oGet3
	Local cBlkGet,cBlkWhen,cBlkVld
	Local XI,LT,CT,XW,XX,XD1,ZZ,nCL,nLC
	Local nCalAnt,nCalPos
	Local nDESIG := 2
	Local aSize := {}
	Local nLeft := 0
	Local oPanel1
	Local oGet1
	Local cValue999 := "999"
	Local lRet := .T.
	Local lOfuscar := .F.
	Local cNomExec := Trim( IIf( lUseSRA, Posicione( 'SRA', 1, xFilial( 'SRA' ) + cExecut, 'RA_NOME' ),;
		Posicione( 'ST1', 1, xFilial( 'ST1' ) + cExecut, 'T1_NOME' ) ) )

	Private bSet15,bSet24,odlge
	Private cFORMA  := Space(LEN(TQ0->TQ0_DESENH))
	Private cBEMNOM := Space(LEN(ST9->T9_NOME)), cFORNOM := Space(Len(ST6->T6_NOME))
	Private cBEMME  := cBem,cMONTAG := STR0001
	Private lRot750 := .F.

	Private oFont

	If !l995Auto
		aSize := MsAdvSize()
		oFont := TFont():New(,,,,.T.,,,,.F.,.F.)

		If !(Alltrim(GetTheme()) == "FLAT") .And. !SetMdiChild()
			aSize[7] := aSize[7]-50
			aSize[6] := aSize[6]-30
			aSize[5] := aSize[5]-14
			nLeft := 5
		EndIf
	EndIf

	lRet := MNT995VTTO('TTO_BEMPAI') // validação de veículo

	If lRet .And. nOpcx <> 3
		dbSelectArea("TTO")
		dbSetOrder(2) //TTO_FILIAL + DTOS(TTO_DRCALI) + TTO_HRCALI + TTO_BEMPAI
		If dbSeek(xFilial("TTO")+DTOS(dData)+cHrCal+cBem)
			cNum995 := TTO->TTO_NUMCAL
		Else
			Help(' ', 1, STR0070,,STR0160, 1, 0,,,,,,) // "Calibragem/Medição de Sulco não encontrada"
			lRet := .F.
		EndIf
	EndIf

	dbSelectArea("ST9")
	dbSetOrder(1)
	dbSeek(xFilial('ST9')+cBem)

	cVTMod := ST9->T9_TIPMOD
	cFORMA := ST9->T9_CODFAMI

	If lRet
		cLineOk   := "AllwaysTrue()"
		cAllOk    := "AllwaysTrue()"
		nDESIGM   := nDESIG
		cBEMNOM   := ST9->T9_NOME
		cFORNOM   := Alltrim(NGSEEK("ST6",cFORMA,1,"ST6->T6_NOME"))
		cMODNOM   := Alltrim(NGSEEK("TQR",cVTMod,1,"TQR->TQR_DESMOD"))
		cSTRINGT9 := Space(Len(ST9->T9_CODBEM))
		cFAMISTC  := Space(Len(ST9->T9_CODFAMI))
		cBEMSTC   := cSTRINGT9
		aARRAPTQ1 := {}
		aARRAYSTC := {}
		aBEMLOC   := {}
		aARRAYTRB := {}
		aNOMEVAR  := {}
		aDESIGNE  := {}
		aCALIB2   := {}
		aCOLLINH  := {}
		oGets     := {}
		aC        := {}


		// VERIFICA AS LOCALIZAÇÕES DO DESENHO DO RODADO

		dbSelectArea("TQ1")
		While !Eof() .And. TQ1->TQ1_FILIAL == xFILIAL("TQ1");
			.And. TQ1->TQ1_DESENH == TQ0->TQ0_DESENH;
			.And. TQ1->TQ1_TIPMOD == TQ0->TQ0_TIPMOD

			aAdd(aARRAPTQ1,{TQ1->TQ1_QTDPNE,TQ1->TQ1_LOCPN1,TQ1->TQ1_LOCPN2,;
							TQ1->TQ1_LOCPN3,TQ1->TQ1_LOCPN4,TQ1->TQ1_LOCPN5,;
							TQ1->TQ1_LOCPN6,TQ1->TQ1_LOCPN7,TQ1->TQ1_LOCPN8,;
							TQ1->TQ1_LOCPN9,TQ1->TQ1_LOCPN0,TQ1->TQ1_EIXO,;
							TQ1->TQ1_FAMIL1,TQ1->TQ1_FAMIL2,TQ1->TQ1_FAMIL3,;
							TQ1->TQ1_FAMIL4,TQ1->TQ1_FAMIL5,TQ1->TQ1_FAMIL6,;
							TQ1->TQ1_FAMIL7,TQ1->TQ1_FAMIL8,TQ1->TQ1_FAMIL9,;
							TQ1->TQ1_FAMIL0,TQ1->TQ1_TIPEIX,Val(TQ1->TQ1_SEQREL)})

			aAdd(aARRAYSTC,{TQ1->TQ1_QTDPNE,cBEMSTC,cBEMSTC,cBEMSTC,cBEMSTC,;
							cBEMSTC,cBEMSTC,cBEMSTC,cBEMSTC,cBEMSTC,cBEMSTC,;
							TQ1->TQ1_EIXO,cFAMISTC,cFAMISTC,cFAMISTC,cFAMISTC,;
							cFAMISTC,cFAMISTC,cFAMISTC,cFAMISTC,cFAMISTC,cFAMISTC,;
							TQ1->TQ1_TIPEIX,Val(TQ1->TQ1_SEQREL)})

			dbSelectArea("TQ1")
			dbSkip()
		End

		nAUXEIXO := Len(aARRAPTQ1)

		// VERIFICA OS COMPONETES DA ESTRUTURA

		aBEM    := NGCOMPEST(cBEM,'B',.F.,.F.)
		aBEMLOC := {}

		// LOCALIZAÇÃO NA ESTRUTURA
		For xi := 1 to Len(aBEM)
			dbSelectArea("ST9")
			dbSetOrder(1)
			If dbSeek(XFILIAL("ST9")+aBEM[xi])
				dbSelectArea("STC")
				dbSetOrder(3)
				If dbSeek(XFILIAL("STC")+aBEM[xi])
					While !Eof() .And. stc->tc_filial = Xfilial('STC') .And.;
						stc->tc_compone = aBEM[xi]
						If !Empty(STC->TC_LOCALIZ) .And. STC->TC_TIPOEST = 'B'  .And. STC->TC_CODBEM == cBem
							aAdd(aBEMLOC,{STC->TC_LOCALIZ,aBEM[xi],Space(Len(stz->tz_causa)),st9->t9_codfami,stc->tc_codbem})
							Exit
						EndIf
						dbSkip()
					End
				EndIf
			EndIf
		Next

		// MONTA A ESTRUTURA DO ESQUEMA DE RODADO COM OS RODADOS
		For LT := 1 to Len(aARRAPTQ1)
			For CT := 2 to 11
				cLOC    := ALLTRIM(aARRAPTQ1[LT][CT])
				cBEMSTC := cSTRINGT9
				cBEMPAI := cSTRINGT9
				If !Empty(cLOC)
					nPOS := aScan(aBEMLOC,{|x| x[1]+x[4] == aARRAPTQ1[LT][CT]+aARRAPTQ1[LT][CT+11]})
					If nPOS > 0
						cBEMSTC := aBEMLOC[nPOS][2]
						cBEMPAI := aBEMLOC[nPOS][5]
						aARRAYSTC[LT][CT]    := cBEMSTC
						aARRAYSTC[LT][CT+11] := aBEMLOC[nPOS][4]
					EndIf

					If CT >= 2 .And. CT <= 11
						cLOCTRB := cLOC+SPACE(LEN(STC->TC_LOCALIZ)-LEN(cLOC))
						aAdd(aARRAYTRB,{cLOCTRB,SPACE(8),cBEMSTC,aARRAPTQ1[LT][CT+11],cBEMPAI,;
										aARRAPTQ1[LT,23]})
					EndIf
				EndIf
			Next CT
		Next LT

		aARRAYCOL := {175,105,95,70,36,1}
		nCOL      := If(nAUXEIXO < 7,aARRAYCOL[nAUXEIXO],0)
		nCOLX     := nCOL - 1
		cTIPODEG  := STR0001 //"RODADOS"
		nMaxPe    := 0

		For xw := 1 To nAUXEIXO
			cEIX   := Alltrim(Str(xw,3))
			vPNUEI := {}
			vDESIG := {}
			aCALIB := {}
			nMaxPe := Max(nMaxPe,aARRAYSTC[xw,1])
			For zz := 1 To aARRAYSTC[xw][1]
				cPNEI := If(zz = 10,Str(zz,2),Str(zz,1))
				cVARP := Space(10)
				cVARP := Alltrim('P'+cPNEI+'E'+cEIX)
				Public &(cVARP) := aARRAYSTC[XW][zz+1]

				nPOST := aScan(aARRAYTRB,{|x| x[1] == aARRAPTQ1[xw][zz+1]})
				If nPOST > 0
					aARRAYTRB[nPOST][2] := cVARP
				EndIf
				cVARPA := Space(10)
				cVARPP := Space(10)
				cVARPA := cVARP+"A"
				cVARPP := cVARP+"P"
				Public &(cVARPA) := 0
				Public &(cVARPP) := 0
				aAdd(vPNUEI,cVARP)
				aAdd(vDESIG,aARRAYTRB[nPOST][1])
				aAdd(aCALIB,{cVARPA,cVARPP})
			Next zz
			aAdd(aNOMEVAR,vPNUEI)
			aAdd(aDESIGNE,vDESIG)
			aAdd(aCALIB2,aCALIB)
		Next xw

		aSMENU := {}
		vVQE   := If(nDESIGM = 1,{45,40,35,30,25,20,15,10,5,0},;
								{80,70,60,50,50,40,40,15,20,0})
		// 1
		l11 := If(nDESIGM = 1,95-vVQE[nMaxPe],152-vVQE[nMaxPe])//+15

		// 2
		l21 := If(nDESIGM = 1,82-vVQE[nMaxPe] ,129-vVQE[nMaxPe])//+15
		l22 := If(nDESIGM = 1,107-vVQE[nMaxPe],177-vVQE[nMaxPe])//+15

		// 3
		l31 := If(nDESIGM = 1,80-vVQE[nMaxPe] ,134-vVQE[nMaxPe])//+15
		l32 := If(nDESIGM = 1,95-vVQE[nMaxPe] ,172-vVQE[nMaxPe])//+30
		l33 := If(nDESIGM = 1,110-vVQE[nMaxPe],210-vVQE[nMaxPe])//+45

		// 4
		l41 := If(nDESIGM = 1,67-vVQE[nMaxPe] ,91-vVQE[nMaxPe])
		l42 := If(nDESIGM = 1,82-vVQE[nMaxPe] ,129-vVQE[nMaxPe]) //+15
		l43 := If(nDESIGM = 1,107-vVQE[nMaxPe],177-vVQE[nMaxPe]) //+15
		l44 := If(nDESIGM = 1,122-vVQE[nMaxPe],215-vVQE[nMaxPe]) //+30

		// 5
		l51 := If(nDESIGM = 1,65-vVQE[nMaxPe] ,96-vVQE[nMaxPe])
		l52 := If(nDESIGM = 1,80-vVQE[nMaxPe] ,134-vVQE[nMaxPe])//+15
		l53 := If(nDESIGM = 1,95-vVQE[nMaxPe] ,172-vVQE[nMaxPe])//+30
		l54 := If(nDESIGM = 1,110-vVQE[nMaxPe],210-vVQE[nMaxPe])//+45
		l55 := If(nDESIGM = 1,125-vVQE[nMaxPe],248-vVQE[nMaxPe])//+75

		// 6
		l61 := If(nDESIGM = 1,52-vVQE[nMaxPe] ,68-vVQE[nMaxPe])
		l62 := If(nDESIGM = 1,67-vVQE[nMaxPe] ,106-vVQE[nMaxPe])//+15
		l63 := If(nDESIGM = 1,82-vVQE[nMaxPe] ,144-vVQE[nMaxPe])//+30
		l64 := If(nDESIGM = 1,107-vVQE[nMaxPe],192-vVQE[nMaxPe])//+30
		l65 := If(nDESIGM = 1,122-vVQE[nMaxPe],230-vVQE[nMaxPe])//+45
		l66 := If(nDESIGM = 1,137-vVQE[nMaxPe],268-vVQE[nMaxPe])//+60

		// 7
		l71 := If(nDESIGM = 1,50-vVQE[nMaxPe] ,73-vVQE[nMaxPe])
		l72 := If(nDESIGM = 1,65-vVQE[nMaxPe] ,96-vVQE[nMaxPe])
		l73 := If(nDESIGM = 1,80-vVQE[nMaxPe] ,119-vVQE[nMaxPe])
		l74 := If(nDESIGM = 1,95-vVQE[nMaxPe] ,142-vVQE[nMaxPe])
		l75 := If(nDESIGM = 1,110-vVQE[nMaxPe],165-vVQE[nMaxPe])
		l76 := If(nDESIGM = 1,125-vVQE[nMaxPe],188-vVQE[nMaxPe])
		l77 := If(nDESIGM = 1,140-vVQE[nMaxPe],211-vVQE[nMaxPe])

		// 8
		l81 := If(nDESIGM = 1,37-vVQE[nMaxPe] ,45-vVQE[nMaxPe])
		l82 := If(nDESIGM = 1,52-vVQE[nMaxPe] ,68-vVQE[nMaxPe])
		l83 := If(nDESIGM = 1,67-vVQE[nMaxPe] ,91-vVQE[nMaxPe])
		l84 := If(nDESIGM = 1,82-vVQE[nMaxPe] ,114-vVQE[nMaxPe])
		l85 := If(nDESIGM = 1,107-vVQE[nMaxPe],162-vVQE[nMaxPe])
		l86 := If(nDESIGM = 1,122-vVQE[nMaxPe],185-vVQE[nMaxPe])
		l87 := If(nDESIGM = 1,137-vVQE[nMaxPe],208-vVQE[nMaxPe])
		l88 := If(nDESIGM = 1,152-vVQE[nMaxPe],231-vVQE[nMaxPe])

		// 9
		l91 := If(nDESIGM = 1,35-vVQE[nMaxPe] ,50-vVQE[nMaxPe])
		l92 := If(nDESIGM = 1,50-vVQE[nMaxPe] ,73-vVQE[nMaxPe])
		l93 := If(nDESIGM = 1,65-vVQE[nMaxPe] ,96-vVQE[nMaxPe])
		l94 := If(nDESIGM = 1,80-vVQE[nMaxPe] ,119-vVQE[nMaxPe])
		l95 := If(nDESIGM = 1,95-vVQE[nMaxPe] ,142-vVQE[nMaxPe])
		l96 := If(nDESIGM = 1,110-vVQE[nMaxPe],165-vVQE[nMaxPe])
		l97 := If(nDESIGM = 1,125-vVQE[nMaxPe],188-vVQE[nMaxPe])
		l98 := If(nDESIGM = 1,140-vVQE[nMaxPe],211-vVQE[nMaxPe])
		l99 := If(nDESIGM = 1,155-vVQE[nMaxPe],234-vVQE[nMaxPe])

		// 10
		l01 := If(nDESIGM = 1,22-vVQE[nMaxPe] ,22-vVQE[nMaxPe])
		l02 := If(nDESIGM = 1,37-vVQE[nMaxPe] ,60-vVQE[nMaxPe])//+15
		l03 := If(nDESIGM = 1,52-vVQE[nMaxPe] ,98-vVQE[nMaxPe])//+30
		l04 := If(nDESIGM = 1,67-vVQE[nMaxPe] ,136-vVQE[nMaxPe])//+45
		l05 := If(nDESIGM = 1,82-vVQE[nMaxPe] ,174-vVQE[nMaxPe])//+60
		l06 := If(nDESIGM = 1,107-vVQE[nMaxPe],222-vVQE[nMaxPe])//+60
		l07 := If(nDESIGM = 1,122-vVQE[nMaxPe],260-vVQE[nMaxPe])//+75
		l08 := If(nDESIGM = 1,137-vVQE[nMaxPe],298-vVQE[nMaxPe])//+90
		l09 := If(nDESIGM = 1,152-vVQE[nMaxPe],336-vVQE[nMaxPe])//+105
		l00 := If(nDESIGM = 1,167-vVQE[nMaxPe],374-vVQE[nMaxPe])//+120

		For xx := 1 To nAUXEIXO

			lSTEPEI := If(Alltrim(aARRAYSTC[xx][6]) == STR0023,.T.,.F.)
			nCOL    := If(lSTEPEI,nCOL - 1,nCOL)

			If aARRAYSTC[xx][1] = 1
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1] ,{l11 ,nCOL},aDESIGNE[xx,1],"@!",,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				aAdd(aCOLLINH,{nCOL,l11})
			ElseIf aARRAYSTC[xx][1] = 2
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1] ,{l21 ,nCOL},aDESIGNE[xx,1],"@!",,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2] ,{l22 ,nCOL},aDESIGNE[xx,2],"@!",,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				aAdd(aCOLLINH,{nCOL,l21,l22})

			ElseIf aARRAYSTC[xx][1] = 3
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1] ,{l31 ,nCOL},aDESIGNE[xx,1],"@!",,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2] ,{l32 ,nCOL},aDESIGNE[xx,2],"@!",,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][4])
				aAdd(aC,{aNOMEVAR[xx][3] ,{l33 ,nCOL},aDESIGNE[xx,3],"@!",,,,58,aCALIB2[xx][3][1],aCALIB2[xx][3][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][4]})
				aAdd(aCOLLINH,{nCOL,l31,l32,l33})

			ElseIf aARRAYSTC[xx][1] = 4
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1] ,{l41 ,nCOL},aDESIGNE[xx,1],"@!",,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2] ,{l42 ,nCOL},aDESIGNE[xx,2],"@!",,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][4])
				aAdd(aC,{aNOMEVAR[xx][3] ,{l43 ,nCOL},aDESIGNE[xx,3],"@!",,,,58,aCALIB2[xx][3][1],aCALIB2[xx][3][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][4]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][5])
				aAdd(aC,{aNOMEVAR[xx][4] ,{l44 ,nCOL},aDESIGNE[xx,4],"@!",,,,58,aCALIB2[xx][4][1],aCALIB2[xx][4][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][5]})
				aAdd(aCOLLINH,{nCOL,l41,l42,l43,l44})

			ElseIf aARRAYSTC[xx][1] = 5
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1] ,{l51 ,nCOL},aDESIGNE[xx,1],"@!",,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2] ,{l52 ,nCOL},aDESIGNE[xx,2],"@!",,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][4])
				aAdd(aC,{aNOMEVAR[xx][3] ,{l53 ,nCOL},aDESIGNE[xx,3],"@!",,,,58,aCALIB2[xx][3][1],aCALIB2[xx][3][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][4]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][5])
				aAdd(aC,{aNOMEVAR[xx][4] ,{l54 ,nCOL},aDESIGNE[xx,4],"@!",,,,58,aCALIB2[xx][4][1],aCALIB2[xx][4][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][5]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][6])
				aAdd(aC,{aNOMEVAR[xx][5] ,{l55 ,nCOL},aDESIGNE[xx,5],"@!",,,,58,aCALIB2[xx][5][1],aCALIB2[xx][5][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][6]})
				aAdd(aCOLLINH,{nCOL,l51,l52,l53,l54,l55})

			ElseIf aARRAYSTC[xx][1] = 6
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1] ,{l61 ,nCOL},aDESIGNE[xx,1],"@!",,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2] ,{l62 ,nCOL},aDESIGNE[xx,2],"@!",,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][4])
				aAdd(aC,{aNOMEVAR[xx][3] ,{l63 ,nCOL},aDESIGNE[xx,3],"@!",,,,58,aCALIB2[xx][3][1],aCALIB2[xx][3][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][4]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][5])
				aAdd(aC,{aNOMEVAR[xx][4] ,{l64 ,nCOL},aDESIGNE[xx,4],"@!",,,,58,aCALIB2[xx][4][1],aCALIB2[xx][4][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][5]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][6])
				aAdd(aC,{aNOMEVAR[xx][5] ,{l65 ,nCOL},aDESIGNE[xx,5],"@!",,,,58,aCALIB2[xx][5][1],aCALIB2[xx][5][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][6]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][7])
				aAdd(aC,{aNOMEVAR[xx][6] ,{l66 ,nCOL},aDESIGNE[xx,6],"@!",,,,58,aCALIB2[xx][6][1],aCALIB2[xx][6][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][7]})
				aAdd(aCOLLINH,{nCOL,l61,l62,l63,l64,l65,l66})

			ElseIf aARRAYSTC[xx][1] = 7
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1]  ,{l71 ,nCOL},aDESIGNE[xx,1],"@!" ,,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2]  ,{l72 ,nCOL},aDESIGNE[xx,2],"@!" ,,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][4])
				aAdd(aC,{aNOMEVAR[xx][3]  ,{l73 ,nCOL},aDESIGNE[xx,3],"@!" ,,,,58,aCALIB2[xx][3][1],aCALIB2[xx][3][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][4]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][5])
				aAdd(aC,{aNOMEVAR[xx][4]  ,{l74 ,nCOL},aDESIGNE[xx,4],"@!" ,,,,58,aCALIB2[xx][4][1],aCALIB2[xx][4][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][5]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][6])
				aAdd(aC,{aNOMEVAR[xx][5]  ,{l75 ,nCOL},aDESIGNE[xx,5],"@!" ,,,,58,aCALIB2[xx][5][1],aCALIB2[xx][5][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][6]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][7])
				aAdd(aC,{aNOMEVAR[xx][6]  ,{l76 ,nCOL},aDESIGNE[xx,6],"@!" ,,,,58,aCALIB2[xx][6][1],aCALIB2[xx][6][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][7]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][8])
				aAdd(aC,{aNOMEVAR[xx][7]  ,{l77 ,nCOL},aDESIGNE[xx,7],"@!" ,,,,58,aCALIB2[xx][7][1],aCALIB2[xx][7][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][8]})
				aAdd(aCOLLINH,{nCOL,l71,l72,l73,l73,l74,l76,l77})

			ElseIf aARRAYSTC[xx][1] = 8
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1]  ,{l81 ,nCOL},aDESIGNE[xx,1],"@!" ,,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2]  ,{l82 ,nCOL},aDESIGNE[xx,2],"@!" ,,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][4])
				aAdd(aC,{aNOMEVAR[xx][3]  ,{l83 ,nCOL},aDESIGNE[xx,3],"@!" ,,,,58,aCALIB2[xx][3][1],aCALIB2[xx][3][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][4]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][5])
				aAdd(aC,{aNOMEVAR[xx][4]  ,{l84 ,nCOL},aDESIGNE[xx,4],"@!" ,,,,58,aCALIB2[xx][4][1],aCALIB2[xx][4][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][5]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][6])
				aAdd(aC,{aNOMEVAR[xx][5]  ,{l85 ,nCOL},aDESIGNE[xx,5],"@!" ,,,,58,aCALIB2[xx][5][1],aCALIB2[xx][5][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][6]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][7])
				aAdd(aC,{aNOMEVAR[xx][6]  ,{l86 ,nCOL},aDESIGNE[xx,6],"@!" ,,,,58,aCALIB2[xx][6][1],aCALIB2[xx][6][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][7]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][8])
				aAdd(aC,{aNOMEVAR[xx][7]  ,{l87 ,nCOL},aDESIGNE[xx,7],"@!" ,,,,58,aCALIB2[xx][7][1],aCALIB2[xx][7][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][8]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][9])
				aAdd(aC,{aNOMEVAR[xx][8]  ,{l88 ,nCOL},aDESIGNE[xx,8],"@!" ,,,,58,aCALIB2[xx][8][1],aCALIB2[xx][8][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][9]})
				aAdd(aCOLLINH,{nCOL,l81,l82,l83,l84,l85,l86,l87,l88})

			ElseIf aARRAYSTC[xx][1] = 9
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1]  ,{l91 ,nCOL},aDESIGNE[xx,1],"@!" ,,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2]  ,{l92 ,nCOL},aDESIGNE[xx,2],"@!" ,,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][4])
				aAdd(aC,{aNOMEVAR[xx][3]  ,{l93 ,nCOL},aDESIGNE[xx,3],"@!" ,,,,58,aCALIB2[xx][3][1],aCALIB2[xx][3][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][4]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][5])
				aAdd(aC,{aNOMEVAR[xx][4]  ,{l94 ,nCOL},aDESIGNE[xx,4],"@!" ,,,,58,aCALIB2[xx][4][1],aCALIB2[xx][4][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][5]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][6])
				aAdd(aC,{aNOMEVAR[xx][5]  ,{l95 ,nCOL},aDESIGNE[xx,5],"@!" ,,,,58,aCALIB2[xx][5][1],aCALIB2[xx][5][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][6]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][7])
				aAdd(aC,{aNOMEVAR[xx][6]  ,{l96 ,nCOL},aDESIGNE[xx,6],"@!" ,,,,58,aCALIB2[xx][6][1],aCALIB2[xx][6][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][7]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][8])
				aAdd(aC,{aNOMEVAR[xx][7]  ,{l97 ,nCOL},aDESIGNE[xx,7],"@!" ,,,,58,aCALIB2[xx][7][1],aCALIB2[xx][7][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][8]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][9])
				aAdd(aC,{aNOMEVAR[xx][8]  ,{l98 ,nCOL},aDESIGNE[xx,8],"@!" ,,,,58,aCALIB2[xx][8][1],aCALIB2[xx][8][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][9]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][10])
				aAdd(aC,{aNOMEVAR[xx][9]  ,{l99 ,nCOL},aDESIGNE[xx,9],"@!" ,,,,58,aCALIB2[xx][9][1],aCALIB2[xx][9][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][10]})
				aAdd(aCOLLINH,{nCOL,l91,l92,l93,l94,l95,l96,l97,l98,l99})

			ElseIf aARRAYSTC[xx][1] = 10
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][2])
				aAdd(aC,{aNOMEVAR[xx][1]  ,{l01 ,nCOL},aDESIGNE[xx,1],"@!" ,,,,58,aCALIB2[xx][1][1],aCALIB2[xx][1][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][2]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][3])
				aAdd(aC,{aNOMEVAR[xx][2]  ,{l02 ,nCOL},aDESIGNE[xx,2],"@!" ,,,,58,aCALIB2[xx][2][1],aCALIB2[xx][2][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][3]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][4])
				aAdd(aC,{aNOMEVAR[xx][3]  ,{l03 ,nCOL},aDESIGNE[xx,3],"@!" ,,,,58,aCALIB2[xx][3][1],aCALIB2[xx][3][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][4]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][5])
				aAdd(aC,{aNOMEVAR[xx][4]  ,{l04 ,nCOL},aDESIGNE[xx,4],"@!" ,,,,58,aCALIB2[xx][4][1],aCALIB2[xx][4][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][5]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][6])
				aAdd(aC,{aNOMEVAR[xx][5]  ,{l05 ,nCOL},aDESIGNE[xx,5],"@!" ,,,,58,aCALIB2[xx][5][1],aCALIB2[xx][5][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][6]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][7])
				aAdd(aC,{aNOMEVAR[xx][6]  ,{l06 ,nCOL},aDESIGNE[xx,6],"@!" ,,,,58,aCALIB2[xx][6][1],aCALIB2[xx][6][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][7]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][8])
				aAdd(aC,{aNOMEVAR[xx][7]  ,{l07 ,nCOL},aDESIGNE[xx,7],"@!" ,,,,58,aCALIB2[xx][7][1],aCALIB2[xx][7][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][8]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][9])
				aAdd(aC,{aNOMEVAR[xx][8]  ,{l08 ,nCOL},aDESIGNE[xx,8],"@!" ,,,,58,aCALIB2[xx][8][1],aCALIB2[xx][8][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][9]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][10])
				aAdd(aC,{aNOMEVAR[xx][9]  ,{l09 ,nCOL},aDESIGNE[xx,9],"@!" ,,,,58,aCALIB2[xx][9][1],aCALIB2[xx][9][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][10]})
				dbSelectArea("TTP")
				dbSetOrder(1)
				dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+aARRAYSTC[xx][11])
				aAdd(aC,{aNOMEVAR[xx][10] ,{l00 ,nCOL},aDESIGNE[xx,10],"@!",,,,58,aCALIB2[xx][10][1],aCALIB2[xx][10][2],If(nOpcx==3,0,TTP->TTP_CALATU),If(nOpcx==3,0,TTP->TTP_CALREA),aARRAYSTC[xx][11]})
				aAdd(aCOLLINH,{nCOL,l01,l02,l03,l04,l05,l06,l07,l08,l09,l00})
			EndIf
			nCOL := nCOL + 65
		Next xx

		cTIPODE2 := STR0001 //"RODADOS"
		If nDESIGM = 2
			cTIPODE2 := STR0016 //"LOCALIZAÇÃO"
		ElseIf nDESIGM = 3
			cTIPODE2 := STR0017 //"FAMÍLIA"
		EndIf

	EndIf

	nOpca := 0

	If !l995auto

		If lRet
			cTiTel := STR0018+"..: "+ALLTRIM(cBEM)+" - "+Alltrim(cBEMNOM)+Space(10)+STR0022+"..: "+Alltrim(cVTMod)+" - "+cMODNOM
			DEFINE MSDIALOG odlge TITLE OemToAnsi(cTiTel) FROM aSize[7],nLeft to aSize[6],aSize[5] Pixel
			oDlgE:lEscClose := .F.

			oScrollBox := TScrollBox():new(odlge,0,0,100,100,.T.,.T.,.T.)
				oScrollBox:Align := CONTROL_ALIGN_ALLCLIENT

				oPanel1 := TPanel():New(01,01,,odlge,,,,,RGB(190,190,190),10,10,.F.,.F.)
					oPanel1:Align := CONTROL_ALIGN_TOP
					oPanel1:nHeight := 30

				If Len(aSMenu) > 0
					NGPOPUP(aSMenu,@oMenu)
					odlge:bRClicked      := { |o,x,y| oMenu:Activate(x,y,odlge)}
					oScrollBox:bRClicked := { |o,x,y| oMenu:Activate(x,y,oScrollBox)}
					oPanel1:bRClicked    := { |o,x,y| oMenu:Activate(x,y,oPanel1)}
				EndIf

				@ 002,005  BUTTON STR0025 SIZE 65,10 PIXEL ACTION MNTA995IMT(cBEM,aARRAPTQ1,aARRAYTRB,cVTMod) Of oPanel1

				@ 003,128 SAY STR0026 SIZE 25,7 FONT oFont COLOR CLR_BLACK Of oPanel1 Pixel //"Data"
				@ 001,150 MSGET dData Picture '99/99/9999' When .F. SIZE 40,7 Of oPanel1 Pixel

				@ 003,208 SAY STR0027 SIZE 25,7 FONT oFont COLOR CLR_BLACK Of oPanel1 Pixel //"Hora"
				@ 002,230 MSGET cHrCal Picture '99:99' When .F. SIZE 20,7 Of oPanel1 Pixel VALID NGVALHORA(cHrCal,.T.)

				// [LGPD] Se as funcionalidades, referentes à LGPD, podem ser utilizadas
				If FindFunction( 'FWPDCanUse' ) .And. FwPdCanUse( .T. )

					// [LGPD] Caso o usuário não possua acesso ao(s) campo(s), deve-se ofuscá-lo(s)
					lOfuscar := Len( FwProtectedDataUtil():UsrAccessPDField( __CUSERID, { IIf( lUseSRA, 'RA_NOME', 'T1_NOME' ) } ) ) == 0

				EndIf

				@ 003,278 SAY STR0028 SIZE 30,7 FONT oFont COLOR CLR_BLACK Of oPanel1 Pixel //"Executante"
				@ 002,310 MSGET oGet1 Var cNomExec Picture '@!' When .F. SIZE 85,7 Of oPanel1 Pixel

				If lOfuscar
					oGet1:lObfuscate := .T.
					oGet1:bWhen := {|| .F. }
				EndIf

				For nCL := 1 To Len(aCOLLINH)
					If aARRAYSTC[nCL][1] > 1
						nINCOL := If(aARRAYSTC[nCL][1] = 2,26,27)
						For nLC := 2 To Len(aCOLLINH[nCL])-1
							@ aCOLLINH[nCL,nLC]+9,aCOLLINH[nCL,1]+25 To aCOLLINH[nCL,nLC+1]+.5,aCOLLINH[nCL,1]+nINCOL Of oScrollbox pixel
						Next nLC
					EndIf
				Next nCL

				@ 004,002 SAY STR0029 SIZE 220,7 FONT oFont Of oScrollbox Pixel //"Informar a Calibragem Aferida e a Calibragem Realizada dos respectivos Pneus:"

				@ 014,002 SAY STR0030 SIZE 50,7 FONT oFont COLOR CLR_BLACK Of oScrollbox Pixel //"Calibragem"
				@ 022,004 SAY STR0031 SIZE 50,7 FONT oFont COLOR CLR_BLACK Of oScrollbox Pixel //" Aferida"

				@ 014,042 SAY STR0030 SIZE 50,7 FONT oFont COLOR CLR_GREEN Of oScrollbox Pixel //"Calibragem"
				@ 022,044 SAY STR0032 SIZE 50,7 FONT oFont COLOR CLR_GREEN Of oScrollbox Pixel //"Realizada"

				@ 2.4,1.0 MSGET cValue999 Picture '@!' SIZE 12,7 WHEN .F. FONT oFont COLOR CLR_BLACK Of oScrollbox
				@ 2.4,6.0 MSGET cValue999 Picture '@!' SIZE 12,7 WHEN .F. FONT oFont COLOR CLR_GREEN Of oScrollbox

				For XD1 := 1 to Len(aC)
					cCampo   := aC[XD1,1]
					nX       := aC[XD1,2,1]  // LINHA
					nY       := aC[XD1,2,2]  // COLUNA
					cCaption := Iif(Empty(aC[XD1,3])," ",aC[XD1,3])
					cPict    := Iif(Empty(aC[XD1,4]),Nil,aC[XD1,4])
					cValid   := Iif(Empty(aC[XD1,5]),".T.",aC[XD1,5])
					cF3      := Iif(Empty(aC[XD1,6]),NIL,aC[XD1,6])
					cWhen    := Iif(aC[XD1,7]==NIL,".T.",Iif(aC[XD1,7],".T.",".F."))
					cWhen    := Iif(!(Str(nOpcx,1,0)$"346"),".F.",cWhen)
					nSIZE    := Iif(Empty(aC[XD1,8]),Nil,aC[XD1,8])
					cBlkGet  := "{ | u | If( PCount() == 0, "+cCampo+","+cCampo+":= u ) }"
					cBlKVld  := "{|| "+cValid+"}"
					cBlKWhen := "{|| .F. }"
					oGet     := TGet():New( nX, nY,&cBlKGet,oScrollBox,nSIZE,,cPict,&(cBlkVld),,,,.F.,,.T.,,.F.,&(cBlkWhen),.F.,.F.,,.F.,.F.,cF3,(cCampo))
					aAdd(oGets,oGet)
				Next XD1

				For nCL := 1 To Len(aARRAYSTC)
					cCaption := If(aARRAYSTC[nCL,12] = STR0023,aARRAYSTC[nCL,12],;
					Alltrim(aARRAYSTC[nCL,12])+CHR(167)+" "+STR0024)
					cBlKSay1 := "{|| OemToAnsi('"+cCaption+"')}"
					oSay     := TSay():New(aCOLLINH[nCL,2]-8,aCOLLINH[nCL,1]+2,&cBlkSay1,oScrollBox,,, .F., .F., .F., .T.,CLR_HBLUE,,,, .F., .F., .F., .F., .F. )
					nLargSay := GetTextWidth(0,cCaption) / 1.8
					cCaption := oSay:cCaption

					If nDESIGM <> 1
						nItq1 := If(nDESIGM = 2,1,12)
						For XD1 := 1 To aARRAYSTC[nCL,1]
							nINCOL    := aCOLLINH[nCL][1]
							cCaption  := aARRAPTQ1[nCL,XD1+nItq1]
							cBlKSay2  := "{|| OemToAnsi('"+cCaption+"')}"
							oSay2     := TSay():New(aCOLLINH[nCL,XD1+1]+12.5,nINCOL+2,&cBlkSay2,oScrollBox,,, .F., .F., .F., .T.,CLR_HRED,,,, .F., .F., .F., .F., .F. )
							nLargSay2 := GetTextWidth(0,cCaption) / 1.8
							cCaption  := oSay2:cCaption
						Next XD1
					EndIf
				Next nCL
				//Campos para informar calibragem.
				For XD1 := 1 to Len(aC)
					nCalAnt  := aC[XD1,9]
					nCalPos  := aC[XD1,10]
					nX       := aC[XD1,2,1]  // LINHA
					nY       := aC[XD1,2,2]  // COLUNA
					cCaption := Iif(Empty(aC[XD1,3])," ",aC[XD1,3])
					cPict    := Iif(Empty(aC[XD1,4]),Nil,aC[XD1,4])
					cValid1  := Iif(Empty(aC[XD1,5]),".T.",aC[XD1,5])
					cValid2	 := "MNTA995VGet('"+aC[XD1,13]+"',"+aC[XD1,10]+")"
					cF3      := Iif(Empty(aC[XD1,6]),NIL,aC[XD1,6])
					cWhen    := Iif(aC[XD1,7]==NIL,".T.",Iif(aC[XD1,7],".T.",".F."))
					cWhen    := Iif(!(Str(nOpcx,1,0)$"346"),".F.",cWhen)
					nSIZE    := Iif(Empty(aC[XD1,8]),Nil,aC[XD1,8])
					cBlkGet2 := "{ | u | If( PCount() == 0, "+nCalAnt+","+nCalAnt+":= u ) }"
					cBlkGet3 := "{ | u | If( PCount() == 0, "+nCalPos+","+nCalPos+":= u ) }"
					cBlKVld1 := "{|| "+cValid1+"}"
					cBlKVld2 := "{|| "+cValid2+"}"
					cBlKWhen := "{|| nOpcx == 3 .Or. nOpcx == 4 }"
					oGet2    := TGet():New( nX+20, nY,&cBlKGet2,oScrollBox,15,,"@E 999",&(cBlkVld1),CLR_BLACK,,oFont,.F.,,.T.,,.F.,&(cBlkWhen),.F.,.F.,,.F.,.F.,cF3,(nCalAnt))
					oGet2:cText := aC[XD1,11]
					oGet3    := TGet():New( nX+20, nY+30,&cBlKGet3,oScrollBox,15,,"@E 999",&(cBlkVld2),CLR_GREEN,,oFont,.F.,,.T.,,.F.,&(cBlkWhen),.F.,.F.,,.F.,.F.,cF3,(nCalPos))
					oGet3:cText := aC[XD1,12]
					aAdd(oGets,oGet2)
					aAdd(oGets,oGet3)
				Next XD1
			ACTIVATE MSDIALOG odlge ON INIT EnchoiceBar(odlge,{||If(!MNTA995Vld(),nopca := 0,(nopca:=1,odlge:End()))},{||odlge:End()})
		EndIf
	Else
		lRet := MN995AUTO1()

		If lRet
			nOpca := 1
		EndIf
	EndIf

	If nOpca == 1
		//GRAVA CALIBRAGENS modelo simples
		MNTA995GRV(nOpcx)
	EndIf

	RestArea(_aArea)

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNTA995VGet ³ Autor ³ Rafael Diogo Richter ³ Data ³03/03/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Valida os valores de calibracao informados                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA995                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNTA995VGet(cPneu,nCalReal)
Local cMedida, cTipMod
Local aAreaST9 := ST9->(GetArea())

dbSelectArea("TQS")
dbSetOrder(1)
dbSeek(xFilial("TQS")+cPneu)
cMedida := TQS->TQS_MEDIDA

dbSelectArea("ST9")
dbSetOrder(1)
dbSeek(xFilial("ST9")+cPneu)
cTipMod := ST9->T9_TIPMOD

dbSelectArea("TQX")
dbSetOrder(1)
If dbSeek(xFilial("TQX")+cMedida+cTipMod)
	If nCalReal <> 0
		If nCalReal > TQX->TQX_CALMAX
			If MsgYesNo(STR0033+Chr(13)+Chr(10)+STR0034,STR0035) //"Calibração acima do limite máximo permitido."###"Deseja continuar?"###"Atenção"
				RestArea(aAreaST9)
				Return .T.
			Else
				RestArea(aAreaST9)
				Return .F.
			EndIf
		ElseIf nCalReal < TQX->TQX_CALMIN
			If MsgYesNo(STR0036+Chr(13)+Chr(10)+STR0034,STR0035) //"Calibração abaixo do limite mínimo permitido."###"Deseja continuar?"###"Atenção"
				RestArea(aAreaST9)
				Return .T.
			Else
				RestArea(aAreaST9)
				Return .F.
			EndIf
		EndIf
	EndIf
EndIf

RestArea(aAreaST9)

Return .T.

//------------------------------------------------
/*/{Protheus.doc} MNTA995GRV
Realiza gravação para modelo simples
quando veículo não tem modelo gráfico cadastrado

@param nOpcx, numerico, operação atual
@author Rafael Diogo Richter
@since 02/03/2009
@return
/*/
//------------------------------------------------
Static Function MNTA995GRV(nOpcx)

	Local i,j

	//Posiciona para garantir o registro correto na alteração/exclusão
	If nOpcx <> 3
		dbSelectArea("TTO")
		dbSetOrder(2) //TTO_FILIAL + DTOS(TTO_DRCALI) + TTO_HRCALI + TTO_BEMPAI
		dbSeek(xFilial("TTO")+DTOS(dData)+cHrCal+cBem)
	EndIf

	If nOpcx == 3 .Or. nOpcx == 4
		dbSelectArea("TTO")
		If nOpcx == 3
			RecLock("TTO",.T.)
			TTO->TTO_FILIAL := xFilial("TTO")
			TTO->TTO_NUMCAL := GetSXENum("TTO","TTO_NUMCAL")
			ConfirmSX8()
		Else
			RecLock("TTO",.F.)
		EndIf
		TTO->TTO_DTCALI := dData
		TTO->TTO_HRCALI := cHrCal
		TTO->TTO_EXECUT := cExecut
		TTO->TTO_BEMPAI := cBem
		TTO->(MsUnLock())

		For i:= 1 to Len(aCalib2)
			For j:= 1 to Len(aCalib2[i])
				nPos:= ASCAN(aC,{|x| x[1] == Substr(aCalib2[i][j][1],1,4)})
				If nPos > 0
					dbSelectArea("TTP")
					dbSetOrder(1)
					If dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+&(aC[nPos][1]))
						RecLock("TTP",.F.)
					Else
						RecLock("TTP",.T.)
						TTP->TTP_FILIAL := xFilial("TTP")
						TTP->TTP_NUMCAL := TTO->TTO_NUMCAL
					EndIf
					TTP->TTP_PNEU   := &(aC[nPos][1])
					TTP->TTP_CODLOC := aC[nPos][3]
					TTP->TTP_CALATU := &(aCalib2[i][j][1])
					TTP->TTP_CALREA := &(aCalib2[i][j][2])
					TTP->(MsUnLock())
				EndIf
			Next j
		Next i
	Else
		If nOpcx == 5
			dbSelectArea("TTO")
			dbSetOrder(1)
			If dbSeek(xFilial("TTO")+TTO->TTO_NUMCAL)
				RecLock("TTO",.F.)
				dbDelete()
				TTO->(MsUnLock())
			Endif

			For i:= 1 to Len(aCalib2)
				For j:= 1 to Len(aCalib2[i])
					nPos:= ASCAN(aC,{|x| x[1] == Substr(aCalib2[i][j][1],1,4)})
					dbSelectArea("TTP")
					dbSetOrder(1)
					If dbSeek(xFilial("TTP")+TTO->TTO_NUMCAL+&(aC[nPos][1]))
						RecLock("TTP",.F.)
						dbDelete()
						TTP->(MsUnLock())
					EndIf
				Next j
			Next i
		EndIf
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTA995Vld
 Valida a gravacao da calibragem dos pneus no modelo simples

@author  Rafael Diogo Richter
@since   02/03/2009
@version P12
/*/
//-------------------------------------------------------------------
Static Function MNTA995Vld()
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNTA995Inc
Tela Inicial de parametros

@author  Rafael Diogo Richter
@since   02/03/2009
@version P12
/*/
//-------------------------------------------------------------------
Function MNTA995Inc( cAlias, nReg, nOpc )

	Local oDlgPar
	Local oFont
	Local lOk 	:= .F.

	// Caso seja execução automática
	If l995Auto

		cBem    := ""
		cExecut := ""
		dData   := CTOD("")
		cHrCal  := "  :  "

		// Inicializa e valida informações da tela inicial (TTO)
		lOk := MN995AUTO1(nOpc)

	Else // Caso não seja execução automática

		cBem    := Space(Len(ST9->T9_CODBEM))
		dData   := dDataBase
		cHrCal  := SubStr(Time(),1,5)
		cExecut := Space( Len( IIf( lUseSRA, SRA->RA_MAT, ST1->T1_CODFUNC ) ) )
		
		If INCLUI
			oFont := TFont():New(,,,,.T.)
			Define MsDialog oDlgPar From 0,0 To 205,265 Title STR0073 COLOR CLR_BLACK,CLR_WHITE Pixel //'Calibragem e Medição de Sulco'

				oDlgPar:lEscClose := .F.

				@ 006,003 To 085, 130 LABEL STR0038 OF oDlgPar Pixel //"Informe as seguintes perguntas:"

				@ 021,008 SAY STR0039 SIZE 25,7 FONT oFont COLOR CLR_HBLUE Of oDlgPar Pixel //"Veículo ?"
				@ 020,050 MSGET cBem Picture '@!' SIZE 60,7 F3 "ST9" Valid IIf( !Empty( cBem ), MNT995VTTO('TTO_BEMPAI'), .T. ) Of oDlgPar Pixel HASBUTTON

				@ 036,008 SAY STR0040 SIZE 25,7 FONT oFont COLOR CLR_HBLUE Of oDlgPar Pixel //"Data ?"
				@ 035,050 MSGET dData Picture '99/99/9999' SIZE 50,7 Of oDlgPar VALID MNT995VlDt() Pixel HASBUTTON

				@ 051,008 SAY STR0041 SIZE 25,7 FONT oFont COLOR CLR_HBLUE Of oDlgPar Pixel //"Hora ?"
				@ 050,050 MSGET cHrCal Picture '99:99' SIZE 20,7 Of oDlgPar Pixel VALID MNT995VlDt()

				@ 066,008 SAY STR0042 SIZE 35,7 FONT oFont COLOR CLR_BLACK Of oDlgPar Pixel //"Executante ?"
				@ 065,050 MSGET cExecut Picture '@!' SIZE 60,7 F3 IIf( lUseSRA, 'CAD', 'ST1' ) Valid MNT995VTTO('TTO_EXECUT') Of oDlgPar Pixel HASBUTTON

				DEFINE SBUTTON oBtn1 FROM 090,074 TYPE 1 ENABLE PIXEL ACTION (If(!MNTA995VPar( nOpc ),lOk:=.F.,(lOk:=.T.,oDlgPar:End()))) Of oDlgPar
				DEFINE SBUTTON oBtn2 FROM 090,104 TYPE 2 ENABLE PIXEL ACTION (lOk:=.F.,oDlgPar:End()) Of oDlgPar

			Activate MsDialog oDlgPar Centered
		Else
			cBem    := TTO->TTO_BEMPAI
			dData   := TTO->TTO_DTCALI
			cHrCal  := TTO->TTO_HRCALI
			cExecut := TTO->TTO_EXECUT
			lOk     := .T.
		EndIf
	Endif

	If lOk

		If MNTOPEN232(cBem) .AND. NGCADICBASE("TTP_SULCO1","A","TTP",.F.) //Indica se irá ser aberta no modo gráfico
			MNTA995Gra(cAlias,nReg,nOpc) // modelo gráfico
		Else
			MNTA995Pro(cAlias,nReg,nOpc) // modelo simples
		EndIf
	EndIf

Return lOk

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA995VPar
Validação dos parâmetros iniciais: bem, data, hora e executante

@author Rafael Diogo Richter
@since 02/03/2009

@return boolean, se obteve sucesso
/*/
//---------------------------------------------------------------------
Static Function MNTA995VPar(nOpc)

	Local lRet := .T.
	Local aStr := {}

	// Bem
	If !Empty( cBem )
		lRet := MNT995VTTO('TTO_BEMPAI')
	Else
		HELP(" ",1,"OBRIGAT",,STR0039,05) //"Veículo ?"
		lRet := .F.
	EndIf

	// Data e hora
	If lRet
		If Empty(dData)
			HELP(" ",1,"OBRIGAT",,STR0040,05) //"Data ?"
			lRet := .F.
		ElseIf Empty(StrTran(cHrCal,":",""))
			HELP(" ",1,"OBRIGAT",,STR0041,05) //"Hora ?"
			lRet := .F.
		Else
			lRet := MNT995VlDt()
		EndIf
	EndIf
 
	// Executante
	If lRet .And. !Empty( cExecut )

		lRet := EXISTCPO( IIf( lUseSRA, 'SRA', 'ST1' ), cExecut )
	
	EndIf

	// verifica se veículo tem componentes na estrutura
	If lRet

		aStr := NGRETSTCDT( cBem, dData, cHrCal )

		If Len( aStr ) == 0
			// "Bem " # " não possui pneus em sua estrutura."
			Help(' ',1,STR0070 ,,STR0011 +AllTrim( cBem) + STR0097,2,1,,,,,, )
			lRet := .F.
		EndIf

	EndIf

	dbSelectArea("TTO")
	dbSetOrder(3) //TTO_FILIAL+TTO_BEMPAI+DTOS(TTO_DTCALI)+TTO_HRCALI
	If lRet .And. nOpc == 3 .And. dbSeek(xFilial("TTO")+cBem+DtoS(dData)+cHrCal)
		Help(' ',1,STR0070 ,,"Já existe um registro com estas informações (Veículo/Data/Hora).",2,1,,,,,,{"Digite outra Data e Hora ou outro Veículo."} )
		lRet := .F.
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Menu funcional

@author Ricardo Dal Ponte
@since 29/11/2006
@Obs Parametros do array a Rotina
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada    
	3. Reservado                   
	4. Tipo de Transação a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
		2 - Simplesmente Mostra os Campos
		3 - Inclui registros no Bancos de Dados
		4 - Altera o registro corrente
		5 - Remove o registro corrente do Banco de Dados
	5. Nivel de acesso
	6. Habilita Menu Funcional
@return array
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina := {{ STR0043, 'AxPesqui', 0, 1    },; // 'Pesquisar'
					{ STR0044, 'MNTA995Inc', 0, 2    },; // 'Visualizar'
					{ STR0045, 'MNTA995Inc', 0, 3    },; // 'Incluir'
					{ STR0046, 'MNTA995Inc', 0, 4, 0 },; // 'Alterar'
					{ STR0047, 'MNTA995Inc', 0, 5, 3 },; // 'Excluir'
					{ STR0050, 'MNTR995'   , 0, 6, 0 }}  // 'Imprimir'

Return aRotina


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNTA995IMT³ Autor ³ In cio Luiz Kolling   ³ Data ³25/05/05  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Selecao de impressao da legenda                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA995                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNTA995IMT(cBEM,aARRAPTQ1,aARRAYTRB,cTMod)
nTGIOPL := 1
tg_bOk  := tb_bCancel := nil
tg_oDlg := oSend( MSDialog(), "New", 9, 0, 15, 45,;
           STR0048,,,.F.,,,,,oMainWnd,.F.,,,.F.) //"Quanto a Legenda ?"
  oSEND(TRadMenu(),"New",20,25,{STR0049,STR0050},bSETGET(nTGIOPL),tg_oDlg,,,; //"Não Imprimir"###"Imprimir"
                   ,,,,,70,12,,,.T., .T.)

   tg_bOk     := {||oSend(tg_oDlg,"End")}
   tg_bCancel := {||nTGIOPL:=0,oSend(tg_oDlg,"End")}
   tg_bInit   := {|| EnchoiceBar(tg_oDlg,tg_bOk,tg_bCancel) }

oSend(tg_oDlg,"Activate",,,,.T.,,, tg_bInit )

IF nTGIOPL # 0
   MNTA995IMP(cBEM,aARRAPTQ1,aARRAYTRB,nTGIOPL,cTMod)
   tg_lRet := .T.
Endif
Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNTA995IMP³ Autor ³ In cio Luiz Kolling   ³ Data ³25/05/05  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ImpressÆo do esquema de rodado                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA995                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNTA995IMP(cVBEMPAI,aAREXIOS,aARTRB,nLEGEN,cVModT,lTMSp,cTiPag,;
                    lPreview,nVPag,nTipD)

	Local lCTMSp := If(lTMSP <> Nil,.T.,.F.)
	Local lPrevW := If(lPreview = Nil,.T.,lPreview)
	Local nPagIm := If(nVPag = Nil,1,nVPag)
	Local nTipDe := If(nTipD  = Nil,2,nTipD)
	Local i      := 1
	Local x      := 0
	Local cMENSA := Space(1),xi,lt,ct
	Private lin  := 0
	Private oFont11,oFont14,oFont17
	Private lTIPAG := "P" ,nLINHAM := 2500, nCOLUAM := 3100

	Dbselectarea("ST9")
	Dbsetorder(1)
	If !Dbseek(xFilial('ST9')+cVBEMPAI)
	cMENSA := STR0051 //"Bem Não Cadastrado"
	Endif

	Dbselectarea("STC")
	Dbsetorder(1)
	If !Dbseek( xFilial('STC')+cVBEMPAI)
	If Empty(cMENSA)
		cMENSA := STR0052 //"Estrutura do Bem Não Cadastrada"
	Endif
	Endif

	Dbselectarea("TQ0")
	Dbsetorder(1)
	If !Dbseek( xFilial('TQ0')+ST9->T9_CODFAMI+cVModT)
	If Empty(cMENSA)
		cMENSA := STR0053 //"Esquema Padrão Não Cadastrado"
	Endif
	Endif

	Dbselectarea("TQ1")
	Dbsetorder(1)
	If !Dbseek( xFilial('TQ1')+TQ0->TQ0_DESENH+cVModT)
	If Empty(cMENSA)
		cMENSA := STR0054+cVFORMA //"Não Existe Itens Para Esquema de Rodado "
	Endif
	Endif

	If !Empty(cMENSA)
		HELP(' ',1,STR0070 ,,cMENSA,2,0) //"Não conformidade"
	Return .F.
	Endif

	If aAREXIOS <> NIL
	aAREIXO := Aclone(aAREXIOS)
	aARESTB := Aclone(aARTRB)
	Else
	// MONTA IMPRESSÃO EXTRA SOMENTE COM O CÓDIGO DO BEM COM PARÂMETRO
	aARESTP   := {}
	aAREIXO   := {}
	aARYSTC   := {}
	cBEMMP    := Space(Len(ST9->T9_CODBEM))
	cBEMSTC   := Space(Len(ST9->T9_CODBEM))
	cSTRINGT9 := Space(Len(ST9->T9_CODBEM))
	cFAMISTC  := SPACE(LEN(ST9->T9_CODFAMI))
	NDESIGM   := nTipDe

	// VERIFICA AS LOCALIZAÇÕES DO DESENHO DO RODADO

	While !EOF() .And. TQ1->TQ1_FILIAL == xFILIAL("TQ0");
		.And. TQ1->TQ1_DESENH == TQ0->TQ0_DESENH;
		.And. TQ1->TQ1_TIPMOD == TQ0->TQ0_TIPMOD
		Aadd(aAREIXO,{TQ1->TQ1_QTDPNE,TQ1->TQ1_LOCPN1,TQ1->TQ1_LOCPN2,;
						TQ1->TQ1_LOCPN3,TQ1->TQ1_LOCPN4,TQ1->TQ1_LOCPN5,;
						TQ1->TQ1_LOCPN6,TQ1->TQ1_LOCPN7,TQ1->TQ1_LOCPN8,;
						TQ1->TQ1_LOCPN9,TQ1->TQ1_LOCPN0,TQ1->TQ1_EIXO,;
						TQ1->TQ1_FAMIL1,TQ1->TQ1_FAMIL2,TQ1->TQ1_FAMIL3,;
						TQ1->TQ1_FAMIL4,TQ1->TQ1_FAMIL5,TQ1->TQ1_FAMIL6,;
						TQ1->TQ1_FAMIL7,TQ1->TQ1_FAMIL8,TQ1->TQ1_FAMIL9,;
						TQ1->TQ1_FAMIL0})

		Aadd(aARYSTC,{TQ1->TQ1_QTDPNE,cBEMSTC,cBEMSTC,cBEMSTC,cBEMSTC,;
						cBEMSTC,cBEMSTC,cBEMSTC,cBEMSTC,cBEMSTC,cBEMSTC,;
						TQ1->TQ1_EIXO,cFAMISTC,cFAMISTC,cFAMISTC,cFAMISTC,;
						cFAMISTC,cFAMISTC,cFAMISTC,cFAMISTC,cFAMISTC,;
						cFAMISTC})
		Dbselectarea("TQ1")
		DbSkip()
	End

	// VERIFICA OS COMPONETES DA ESTRUTURA

	aBEMEST := NGCOMPEST(cVBEMPAI,'B',.F.,.F.)
	If Len(aBEMEST) == 0
		HELP(' ',1,STR0070 ,,STR0055,2,0) //"Este Bem não tem estrutura.."###"Não Conformidade"
		Return .F.
	Endif

	// LOCALIZACÃO NA ESTRUTURA
	aBEMESTLOC := {}
	For xi := 1 to Len(aBEMEST)
		Dbselectarea("ST9")
		Dbsetorder(1)
		If Dbseek(XFILIAL("ST9")+aBEMEST[xi])
			Dbselectarea("STC")
			Dbsetorder(3)
			If Dbseek(XFILIAL("STC")+aBEMEST[xi])
				While !Eof() .And. stc->tc_filial = Xfilial('STC') .And.;
				stc->tc_compone = aBEMEST[xi]
				If !Empty(STC->TC_LOCALIZ) .And. STC->TC_TIPOEST = 'B'
					Aadd(aBEMESTLOC,{STC->TC_LOCALIZ,aBEMEST[xi],Space(Len(stz->tz_causa)),st9->t9_codfami,stc->tc_codbem})
					Exit
				Endif
				Dbskip()
				End
			Endif
		Endif
	Next

	aARESTB := {}

	// MONTA A ESTRUTURA DO ESQUEMA DE RODADO COM OS RODADOS
	For LT := 1 to Len(aAREIXO)
		For CT := 2 to 11
			cLOC    := ALLTRIM(aAREIXO[LT][CT])
			cBEMSTC := cSTRINGT9

			If !Empty(cLOC)
				nPOS := ASCAN(aBEMESTLOC,{|x| x[1]+x[4] == aAREIXO[LT][CT]+aAREIXO[LT][CT+11]})
				If nPOS > 0
				cBEMSTC := aBEMESTLOC[nPOS][2]
				cBEMPAI := aBEMESTLOC[nPOS][5]
				aARYSTC[LT][CT]    := cBEMSTC
				aARYSTC[LT][CT+11] := aBEMESTLOC[nPOS][4]
				Endif

				If CT >= 2 .And. CT <= 11
				cLOCTRB := cLOC+SPACE(LEN(STC->TC_LOCALIZ)-LEN(cLOC))
				Aadd(aARESTB,{cLOCTRB,SPACE(8),cBEMSTC,aAREIXO[LT][CT+11]})
				Endif
			Endif
		Next CT
	Next LT
	Endif

	oFont11 := TFont():New("Arial",11,11,,.F.,,,,.T.,.F.)
	oFont14 := TFont():New("Arial",14,14,,.T.,,,,.T.,.F.)
	oFont17 := TFont():New("Arial",17,17,,.T.,,,,.T.,.F.)
	oFont18 := TFont():New("Arial",18,18,,.T.,,,,.T.,.F.)

	If !lCTMSp
	oPrint  := TMSPrinter():New( OemToAnsi(STR0056)) //"Impressão do Esquema de Rodado"
	oPrint:SetlandScape() // Paisagem

	//   oPrint:SetPortrait() // Normal

	Endif

	MNTA995IM2(oPrint,@i,@lin,cVBEMPAI,nLEGEN,cVModT,cTiPag,lPrevW,nPagIm)


Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNTA995IM2³ Autor ³ In cio Luiz Kolling   ³ Data ³25/05/05  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ImpressÆo do rodado                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA995                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNTA995IM2(oPrint,i,lin,cVBEMP,nVLEG,cVMod,cTpPag,lPrevW,nPagIm)

	Local XL := 0,hh,h2,nPAG := 1,lPRINC := .T.

	cCOR     := CLR_HRED
	cCOR2    := CLR_BLUE
	cTIPODIM := STR0001 //"RODADOS"
	cTIPODFA := If (nDESIGM = 2,STR0057,STR0058) //"LOC."###"FAM."
	cNOMBEM  := Alltrim(NGSEEK("ST9",cVBEMP,1,"ST9->T9_NOME"))
	cMODNOM  := Alltrim(NGSEEK("TQR",cVMod,1,"TQR->TQR_DESMOD"))
	nTAMARP  := Len(aAREIXO)
	nCOLP2   := 30
	nTamLin  := If(cTpPag = "P",2550,1800)
	nLINHA   := 710
	nUTLIN   := 0
	cHrImp    := "         "+STR0059+" "+Dtoc(date())+"  "+Time() //"Emissão"
	nLISOMA  := 0
	nMaxPe   := 0
	nPAG     := nPagIm

	nL01     := 320
	nL02     := 470
	nL03     := 620
	nL04     := 770
	nL05     := 920
	nL06     := 1070
	nL07     := 1220
	nL08     := 1370
	nL09     := 1520
	nL10     := 1670
	nL11     := 1820
	cTitRel  := STR0060+Alltrim(st9->t9_codbem)+" - "+cNOMBEM+Space(10)+STR0022+"..: "+Alltrim(cVMod)+" - "+ cMODNOM //"Estrutura do rodado...:   "###"Modelo"

	For xl := 1 to nTAMARP
	If lPRINC
		lPRINC := .F.
		oPrint:StartPage()
		oPrint:Say(020,0040,cTitRel,oFont14)

		oPrint:Box(100,390,200,920)
		oPrint:Say(115,040,STR0061,oFont14) //"Apresentação   "
		oPrint:Say(125,402,cTIPODIM,oFont11)

			oPrint:Box(200,540,280,920)
			oPrint:Line(200,730,280,730)
			oPrint:Say(220,550,STR0062,oFont11) //"Cal.Afer."
			oPrint:Say(220,740,STR0063,oFont11,,CLR_GREEN) //"Cal.Real."

		cPAGI := STR0064+" "+Str(nPAG,2)+"    "+cHrImp //"Página"
		oPrint:Say(125,2000,cPAGI,oFont14)
		If nDESIGM <> 1
			oPrint:Box(200,390,280,490)
			oPrint:Say(220,402,cTIPODFA,oFont11,,cCOR)
		Endif
	Endif

	//   If nCOLP2 > 2550
	If nCOLP2 > nTamLin
		nLINHA := 710
		nCOLP2 := 30
		nPAG   += 1
		nUTLIN := 0
		oPrint:EndPage()
		oPrint:StartPage()
		cPAGI := STR0064+" "+Str(nPAG,2)+"    "+cHrImp //"Página"
		oPrint:Say(125,2000,cPAGI,oFont14)
	Endif

	cNOEIXO := If(Alltrim(aAREIXO[xl][12]) = STR0023,STR0023,; //"RESERVA"###"RESERVA"
					Alltrim(aAREIXO[xl][12])+" "+CHR(176)+" "+STR0024) //"EIXO"

	If aAREIXO[xl][1] = 1
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL06-20,85,370,1)
			oPrint:Say(nL06-85      ,nCOLP2+5,cNOEIXO,oFont14)
			oPrint:Say(nL06,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			nUTLIN := Max(nUTLIN,1050)
		Else
			oPrint:Say(nL06+140 ,nCOLP2+7,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+952,85,380,1)
			oPrint:Say(nL01+972,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1037,85,155,1)
			oPrint:Say(nL01+1049,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1035,nCOLP2+210,nL01+1120,nCOLP2+380)
			oPrint:Say(nL01+1049,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+1035,nCOLP2+295,nL01+1120,nCOLP2+295)
			oPrint:Say(nL01+1049,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,1450)
		Endif
	ElseIf aAREIXO[xl][1] = 2
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL05-20,85,370,1)
			MNTA220BX(oPrint,@i,@lin,nL07-20,85,370,1)
			MNTA220EI1(oPrint,@i,@lin,nL05+65,nL05+280,1,1,170,nLISOMA)
			oPrint:Say(nL05-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			nUTLIN := Max(nUTLIN,1250)
		Else
			oPrint:Say(nL05+140 ,nCOLP2+100,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+802,85,380,1)
			oPrint:Say(nL01+822,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+887,85,155,1)
			oPrint:Say(nL01+899,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+887,nCOLP2+210,nL01+973,nCOLP2+380)
			oPrint:Say(nL01+898,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+887,nCOLP2+295,nL01+973,nCOLP2+295)
			oPrint:Say(nL01+898,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			// DIVISOR
			MNTA220EI1(oPrint,@i,@lin,nL01+887,nL01+1119,2,1,170,nLISOMA)


			MNTA220BX(oPrint,@i,@lin,nL01+1119,85,380,1)
			oPrint:Say(nL01+1139,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1204,85,155,1)
			oPrint:Say(nL01+1216,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1204,nCOLP2+210,nL01+1290,nCOLP2+380)
			oPrint:Say(nL01+1215,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+1204,nCOLP2+295,nL01+1290,nCOLP2+295)
			oPrint:Say(nL01+1215,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,1650)
		Endif
	ElseIf aAREIXO[xl][1] = 3
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		nPN3 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][4]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL05-20,85,370,2)
			MNTA220BX(oPrint,@i,@lin,nL07-20,85,370,1)
			MNTA220EI1(oPrint,@i,@lin,nL05+65,nL05+130,2,1,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL06+62,nL06+130,2,1,170,nLISOMA)
			oPrint:Say(nL05-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL06,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			nUTLIN := Max(nUTLIN,1250)
		Else
			oPrint:Say(nL05+100,nCOLP2+100,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+761,85,380,1)
			oPrint:Say(nL01+781,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+846,85,155,1)
			oPrint:Say(nL01+858,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+846,nCOLP2+210,nL01+932,nCOLP2+380)
			oPrint:Say(nL01+857,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+846,nCOLP2+295,nL01+932,nCOLP2+295)
			oPrint:Say(nL01+857,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+846,nL01+952,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+952,85,380,1)
			oPrint:Say(nL01+972,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1037,85,155,1)
			oPrint:Say(nL01+1049,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1037,nCOLP2+210,nL01+1123,nCOLP2+380)
			oPrint:Say(nL01+1048,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+1037,nCOLP2+295,nL01+1123,nCOLP2+295)
			oPrint:Say(nL01+1048,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1037,nL01+1143,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1143,85,380,1)
			oPrint:Say(nL01+1163,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1228,85,155,1)
			oPrint:Say(nL01+1240,nCOLP2  ,aARESTB[nPN3,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1228,nCOLP2+210,nL01+1314,nCOLP2+380)
			oPrint:Say(nL01+1239,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN3,2]+"A"))),oFont11)
			oPrint:Line(nL01+1228,nCOLP2+295,nL01+1314,nCOLP2+295)
			oPrint:Say(nL01+1239,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN3,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,1650)
		Endif
	ElseIf aAREIXO[xl][1] = 4
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		nPN3 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][4]})
		nPN4 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][5]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL04-20,85,370,2)
			MNTA220BX(oPrint,@i,@lin,nL07-20,85,370,2)
			MNTA220EI1(oPrint,@i,@lin,nL04+65,nL04+125,2,1,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL05+57,nL05+280,2,1,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL07+65,nL07+125,2,1,170,nLISOMA)
			oPrint:Say(nL04-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL04,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			oPrint:Say(nL08,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			nUTLIN := Max(nUTLIN,1455)
		Else
			oPrint:Say(nL04+100 ,nCOLP2+100,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+611,85,380,1)
			oPrint:Say(nL01+631,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+696,85,155,1)
			oPrint:Say(nL01+708,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+696,nCOLP2+210,nL01+782,nCOLP2+380)
			oPrint:Say(nL01+707,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+696,nCOLP2+295,nL01+782,nCOLP2+295)
			oPrint:Say(nL01+707,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+696,nL01+802,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+802,85,380,1)
			oPrint:Say(nL01+822,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+887,85,155,1)
			oPrint:Say(nL01+899,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+887,nCOLP2+210,nL01+973,nCOLP2+380)
			oPrint:Say(nL01+898,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+887,nCOLP2+295,nL01+973,nCOLP2+295)
			oPrint:Say(nL01+898,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			// DIVISOR
			MNTA220EI1(oPrint,@i,@lin,nL01+887,nL01+1119,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1119,85,380,1)
			oPrint:Say(nL01+1139,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1204,85,155,1)
			oPrint:Say(nL01+1216,nCOLP2  ,aARESTB[nPN3,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1204,nCOLP2+210,nL01+1290,nCOLP2+380)
			oPrint:Say(nL01+1215,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN3,2]+"A"))),oFont11)
			oPrint:Line(nL01+1204,nCOLP2+295,nL01+1290,nCOLP2+295)
			oPrint:Say(nL01+1215,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN3,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1204,nL01+1310,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1310,85,380,1)
			oPrint:Say(nL01+1330,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1395,85,155,1)
			oPrint:Say(nL01+1407,nCOLP2  ,aARESTB[nPN4,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1395,nCOLP2+210,nL01+1481,nCOLP2+380)
			oPrint:Say(nL01+1406,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN4,2]+"A"))),oFont11)
			oPrint:Line(nL01+1395,nCOLP2+295,nL01+1481,nCOLP2+295)
			oPrint:Say(nL01+1406,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN4,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,1855)
		Endif
	ElseIf aAREIXO[xl][1] = 5
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		nPN3 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][4]})
		nPN4 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][5]})
		nPN5 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][6]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL04-20,85,370,2)
			MNTA220BX(oPrint,@i,@lin,nL06-20,85,370,1)
			MNTA220BX(oPrint,@i,@lin,nL07-20,85,370,2)
			MNTA220EI1(oPrint,@i,@lin,nL04+65,nL04+130,2,1,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL05+58,nL05+130,2,1,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL06+65,nL06+130,2,2,170,nLISOMA)
			oPrint:Say(nL04-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL04,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			oPrint:Say(nL06,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			oPrint:Say(nL08,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			anUTLIN := Max(nUTLIN,1450)
		Else
			oPrint:Say(nL04+60,nCOLP2+100,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+570,85,380,1)
			oPrint:Say(nL01+590,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+655,85,155,1)
			oPrint:Say(nL01+667,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+655,nCOLP2+210,nL01+741,nCOLP2+380)
			oPrint:Say(nL01+666,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+655,nCOLP2+295,nL01+741,nCOLP2+295)
			oPrint:Say(nL01+666,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+655,nL01+761,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+761,85,380,1)
			oPrint:Say(nL01+781,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+846,85,155,1)
			oPrint:Say(nL01+858,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+846,nCOLP2+210,nL01+932,nCOLP2+380)
			oPrint:Say(nL01+857,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+846,nCOLP2+295,nL01+932,nCOLP2+295)
			oPrint:Say(nL01+857,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+846,nL01+952,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+952,85,380,1)
			oPrint:Say(nL01+972,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1037,85,155,1)
			oPrint:Say(nL01+1049,nCOLP2  ,aARESTB[nPN3,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1037,nCOLP2+210,nL01+1123,nCOLP2+380)
			oPrint:Say(nL01+1048,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN3,2]+"A"))),oFont11)
			oPrint:Line(nL01+1037,nCOLP2+295,nL01+1123,nCOLP2+295)
			oPrint:Say(nL01+1048,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN3,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1037,nL01+1143,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1143,85,380,1)
			oPrint:Say(nL01+1163,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1228,85,155,1)
			oPrint:Say(nL01+1240,nCOLP2  ,aARESTB[nPN4,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1228,nCOLP2+210,nL01+1314,nCOLP2+380)
			oPrint:Say(nL01+1239,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN4,2]+"A"))),oFont11)
			oPrint:Line(nL01+1228,nCOLP2+295,nL01+1314,nCOLP2+295)
			oPrint:Say(nL01+1239,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN4,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1228,nL01+1334,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1334,85,380,1)
			oPrint:Say(nL01+1354,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1419,85,155,1)
			oPrint:Say(nL01+1431,nCOLP2  ,aARESTB[nPN5,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1419,nCOLP2+210,nL01+1505,nCOLP2+380)
			oPrint:Say(nL01+1430,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN5,2]+"A"))),oFont11)
			oPrint:Line(nL01+1419,nCOLP2+295,nL01+1505,nCOLP2+295)
			oPrint:Say(nL01+1430,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN5,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,1850)
		Endif
	ElseIf aAREIXO[xl][1] = 6
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		nPN3 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][4]})
		nPN4 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][5]})
		nPN5 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][6]})
		nPN6 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][7]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL03-20,85,370,3)
			MNTA220BX(oPrint,@i,@lin,nL07-20,85,370,3)
			MNTA220EI1(oPrint,@i,@lin,nL03+65,nL03+130,2,2,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL05+50,nL05+280,2,1,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL07+65,nL07+130,2,2,170,nLISOMA)
			oPrint:Say(nL03-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL03,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL04,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			oPrint:Say(nL08,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			oPrint:Say(nL09,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			nUTLIN := Max(nUTLIN,1550)
		Else
			oPrint:Say(nL03+60 ,nCOLP2+100,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+420,85,380,1)
			oPrint:Say(nL01+440,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+505,85,155,1)
			oPrint:Say(nL01+517,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+505,nCOLP2+210,nL01+591,nCOLP2+380)
			oPrint:Say(nL01+516,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+505,nCOLP2+295,nL01+591,nCOLP2+295)
			oPrint:Say(nL01+516,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+586,nL01+611,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+611,85,380,1)
			oPrint:Say(nL01+631,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+696,85,155,1)
			oPrint:Say(nL01+708,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+696,nCOLP2+210,nL01+782,nCOLP2+380)
			oPrint:Say(nL01+707,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+696,nCOLP2+295,nL01+782,nCOLP2+295)
			oPrint:Say(nL01+707,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+696,nL01+802,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+802,85,380,1)
			oPrint:Say(nL01+822,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+887,85,155,1)
			oPrint:Say(nL01+899,nCOLP2  ,aARESTB[nPN3,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+887,nCOLP2+210,nL01+973,nCOLP2+380)
			oPrint:Say(nL01+898,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN3,2]+"A"))),oFont11)
			oPrint:Line(nL01+887,nCOLP2+295,nL01+973,nCOLP2+295)
			oPrint:Say(nL01+898,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN3,2]+"P"))),oFont11,,CLR_GREEN)

			// DIVISOR
			MNTA220EI1(oPrint,@i,@lin,nL01+887,nL01+1119,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1119,85,380,1)
			oPrint:Say(nL01+1139,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1204,85,155,1)
			oPrint:Say(nL01+1216,nCOLP2  ,aARESTB[nPN4,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1204,nCOLP2+210,nL01+1290,nCOLP2+380)
			oPrint:Say(nL01+1215,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN4,2]+"A"))),oFont11)
			oPrint:Line(nL01+1204,nCOLP2+295,nL01+1290,nCOLP2+295)
			oPrint:Say(nL01+1215,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN4,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1204,nL01+1310,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1310,85,380,1)
			oPrint:Say(nL01+1330,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1395,85,155,1)
			oPrint:Say(nL01+1407,nCOLP2  ,aARESTB[nPN5,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1395,nCOLP2+210,nL01+1481,nCOLP2+380)
			oPrint:Say(nL01+1406,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN5,2]+"A"))),oFont11)
			oPrint:Line(nL01+1395,nCOLP2+295,nL01+1481,nCOLP2+295)
			oPrint:Say(nL01+1406,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN5,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1395,nL01+1501,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1501,85,380,1)
			oPrint:Say(nL01+1521,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1586,85,155,1)
			oPrint:Say(nL01+1598,nCOLP2  ,aARESTB[nPN6,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1586,nCOLP2+210,nL01+1672,nCOLP2+380)
			oPrint:Say(nL01+1597,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN6,2]+"A"))),oFont11)
			oPrint:Line(nL01+1586,nCOLP2+295,nL01+1672,nCOLP2+295)
			oPrint:Say(nL01+1597,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN6,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,1950)
		Endif
	ElseIf aAREIXO[xl][1] = 7
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		nPN3 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][4]})
		nPN4 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][5]})
		nPN5 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][6]})
		nPN6 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][7]})
		nPN7 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][8]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL03-20,85,370,3)
			MNTA220BX(oPrint,@i,@lin,nL06-20,85,370,1)
			MNTA220BX(oPrint,@i,@lin,nL07-20,85,370,3)
			MNTA220EI1(oPrint,@i,@lin,nL03+65,nL03+130,2,2,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL05+58,nL05+130,2,1,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL06+65,nL06+130,2,3,170,nLISOMA)
			oPrint:Say(nL03-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL03,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL04,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			oPrint:Say(nL06,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			oPrint:Say(nL08,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			oPrint:Say(nL09,nCOLP2  ,aARESTB[nPN7,3],oFont11)
			nUTLIN := Max(nUTLIN,1750)
		Else
			oPrint:Say(nL03+20 ,nCOLP2+100,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+380,85,380,1)
			oPrint:Say(nL01+390,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+465,85,155,1)
			oPrint:Say(nL01+477,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+465,nCOLP2+210,nL01+551,nCOLP2+380)
			oPrint:Say(nL01+476,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+465,nCOLP2+295,nL01+551,nCOLP2+295)
			oPrint:Say(nL01+476,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+465,nL01+570,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+570,85,380,1)
			oPrint:Say(nL01+590,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+655,85,155,1)
			oPrint:Say(nL01+667,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+655,nCOLP2+210,nL01+741,nCOLP2+380)
			oPrint:Say(nL01+666,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+655,nCOLP2+295,nL01+741,nCOLP2+295)
			oPrint:Say(nL01+666,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+655,nL01+761,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+761,85,380,1)
			oPrint:Say(nL01+781,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+846,85,155,1)
			oPrint:Say(nL01+858,nCOLP2  ,aARESTB[nPN3,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+846,nCOLP2+210,nL01+932,nCOLP2+380)
			oPrint:Say(nL01+857,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN3,2]+"A"))),oFont11)
			oPrint:Line(nL01+846,nCOLP2+295,nL01+932,nCOLP2+295)
			oPrint:Say(nL01+857,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN3,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+846,nL01+952,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+952,85,380,1)
			oPrint:Say(nL01+972,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1037,85,155,1)
			oPrint:Say(nL01+1049,nCOLP2  ,aARESTB[nPN4,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1037,nCOLP2+210,nL01+1123,nCOLP2+380)
			oPrint:Say(nL01+1048,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN4,2]+"A"))),oFont11)
			oPrint:Line(nL01+1037,nCOLP2+295,nL01+1123,nCOLP2+295)
			oPrint:Say(nL01+1048,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN4,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1037,nL01+1143,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1143,85,380,1)
			oPrint:Say(nL01+1163,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1228,85,155,1)
			oPrint:Say(nL01+1240,nCOLP2  ,aARESTB[nPN5,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1228,nCOLP2+210,nL01+1314,nCOLP2+380)
			oPrint:Say(nL01+1239,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN5,2]+"A"))),oFont11)
			oPrint:Line(nL01+1228,nCOLP2+295,nL01+1314,nCOLP2+295)
			oPrint:Say(nL01+1239,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN5,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1228,nL01+1334,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1334,85,380,1)
			oPrint:Say(nL01+1354,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1419,85,155,1)
			oPrint:Say(nL01+1431,nCOLP2  ,aARESTB[nPN6,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1419,nCOLP2+210,nL01+1505,nCOLP2+380)
			oPrint:Say(nL01+1430,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN6,2]+"A"))),oFont11)
			oPrint:Line(nL01+1419,nCOLP2+295,nL01+1505,nCOLP2+295)
			oPrint:Say(nL01+1430,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN6,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1419,nL01+1525,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1525,85,380,1)
			oPrint:Say(nL01+1545,nCOLP2  ,aARESTB[nPN7,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1610,85,155,1)
			oPrint:Say(nL01+1622,nCOLP2  ,aARESTB[nPN7,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1610,nCOLP2+210,nL01+1696,nCOLP2+380)
			oPrint:Say(nL01+1621,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN7,2]+"A"))),oFont11)
			oPrint:Line(nL01+1610,nCOLP2+295,nL01+1696,nCOLP2+295)
			oPrint:Say(nL01+1621,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN7,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,2150)
		Endif

	ElseIf aAREIXO[xl][1] = 8
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		nPN3 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][4]})
		nPN4 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][5]})
		nPN5 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][6]})
		nPN6 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][7]})
		nPN7 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][8]})
		nPN8 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][9]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL02-20,85,370,4)
			MNTA220BX(oPrint,@i,@lin,nL07-20,85,370,4)
			MNTA220EI1(oPrint,@i,@lin,nL02+65,nL02+130,2,3,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL05+45,nL05+280,2,1,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL07+65,nL07+130,2,3,170,nLISOMA)
			oPrint:Say(nL02-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL02,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL03,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			oPrint:Say(nL04,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			oPrint:Say(nL08,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			oPrint:Say(nL09,nCOLP2  ,aARESTB[nPN7,3],oFont11)
			oPrint:Say(nL10,nCOLP2  ,aARESTB[nPN8,3],oFont11)
			nUTLIN := Max(nUTLIN,1950)
		Else
			oPrint:Say(nL02+20 ,nCOLP2+100,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+230,85,380,1)
			oPrint:Say(nL01+250,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+315,85,155,1)
			oPrint:Say(nL01+327,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+315,nCOLP2+210,nL01+401,nCOLP2+380)
			oPrint:Say(nL01+326,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+315,nCOLP2+295,nL01+401,nCOLP2+295)
			oPrint:Say(nL01+326,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+315,nL01+315,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+420,85,380,1)
			oPrint:Say(nL01+440,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+505,85,155,1)
			oPrint:Say(nL01+517,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+505,nCOLP2+210,nL01+591,nCOLP2+380)
			oPrint:Say(nL01+516,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+505,nCOLP2+295,nL01+591,nCOLP2+295)
			oPrint:Say(nL01+516,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+505,nL01+611,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+611,85,380,1)
			oPrint:Say(nL01+631,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+696,85,155,1)
			oPrint:Say(nL01+708,nCOLP2  ,aARESTB[nPN3,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+696,nCOLP2+210,nL01+782,nCOLP2+380)
			oPrint:Say(nL01+707,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN3,2]+"A"))),oFont11)
			oPrint:Line(nL01+696,nCOLP2+295,nL01+782,nCOLP2+295)
			oPrint:Say(nL01+707,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN3,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+696,nL01+802,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+802,85,380,1)
			oPrint:Say(nL01+822,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+887,85,155,1)
			oPrint:Say(nL01+899,nCOLP2  ,aARESTB[nPN4,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+887,nCOLP2+210,nL01+973,nCOLP2+380)
			oPrint:Say(nL01+898,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN4,2]+"A"))),oFont11)
			oPrint:Line(nL01+887,nCOLP2+295,nL01+973,nCOLP2+295)
			oPrint:Say(nL01+898,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN4,2]+"P"))),oFont11,,CLR_GREEN)

			// DIVISOR
			MNTA220EI1(oPrint,@i,@lin,nL01+969,nL01+887,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1119,85,380,1)
			oPrint:Say(nL01+1139,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1204,85,155,1)
			oPrint:Say(nL01+1216,nCOLP2  ,aARESTB[nPN5,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1204,nCOLP2+210,nL01+1290,nCOLP2+380)
			oPrint:Say(nL01+1215,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN5,2]+"A"))),oFont11)
			oPrint:Line(nL01+1204,nCOLP2+295,nL01+1290,nCOLP2+295)
			oPrint:Say(nL01+1215,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN5,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1204,nL01+1310,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1310,85,380,1)
			oPrint:Say(nL01+1330,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1395,85,155,1)
			oPrint:Say(nL01+1407,nCOLP2  ,aARESTB[nPN6,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1395,nCOLP2+210,nL01+1481,nCOLP2+380)
			oPrint:Say(nL01+1406,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN6,2]+"A"))),oFont11)
			oPrint:Line(nL01+1395,nCOLP2+295,nL01+1481,nCOLP2+295)
			oPrint:Say(nL01+1406,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN6,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1395,nL01+1501,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1501,85,380,1)
			oPrint:Say(nL01+1521,nCOLP2  ,aARESTB[nPN7,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1586,85,155,1)
			oPrint:Say(nL01+1598,nCOLP2  ,aARESTB[nPN7,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1586,nCOLP2+210,nL01+1672,nCOLP2+380)
			oPrint:Say(nL01+1597,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN7,2]+"A"))),oFont11)
			oPrint:Line(nL01+1586,nCOLP2+295,nL01+1672,nCOLP2+295)
			oPrint:Say(nL01+1597,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN7,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1586,nL01+1692,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1692,85,380,1)
			oPrint:Say(nL01+1717,nCOLP2  ,aARESTB[nPN8,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1777,85,155,1)
			oPrint:Say(nL01+1794,nCOLP2  ,aARESTB[nPN8,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1777,nCOLP2+210,nL01+1863,nCOLP2+380)
			oPrint:Say(nL01+1788,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN8,2]+"A"))),oFont11)
			oPrint:Line(nL01+1777,nCOLP2+295,nL01+1863,nCOLP2+295)
			oPrint:Say(nL01+1788,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN8,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,2350)
		Endif
	ElseIf aAREIXO[xl][1] = 9
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		nPN3 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][4]})
		nPN4 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][5]})
		nPN5 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][6]})
		nPN6 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][7]})
		nPN7 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][8]})
		nPN8 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][9]})
		nPN9 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][10]})
		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL02-20,85,370,4)
			MNTA220BX(oPrint,@i,@lin,nL06-20,85,370,5)
			MNTA220EI1(oPrint,@i,@lin,nL02+65,nL02+130,2,4,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL05+65,nL05+130,2,5,170,nLISOMA)
			oPrint:Say(nL02-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL02,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL03,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			oPrint:Say(nL04,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			oPrint:Say(nL06,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			oPrint:Say(nL08,nCOLP2  ,aARESTB[nPN7,3],oFont11)
			oPrint:Say(nL09,nCOLP2  ,aARESTB[nPN8,3],oFont11)
			oPrint:Say(nL10,nCOLP2  ,aARESTB[nPN9,3],oFont11)
			nUTLIN := Max(nUTLIN,2150)
		Else
			oPrint:Say(nL02-20  ,nCOLP2+100,cNOEIXO,oFont14)
			MNTA220BX(oPrint,@i,@lin,nL01+190,85,380,1)
			oPrint:Say(nL01+200,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+275,85,155,1)
			oPrint:Say(nL01+290,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+275,nCOLP2+210,nL01+361,nCOLP2+380)
			oPrint:Say(nL01+286,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+275,nCOLP2+295,nL01+361,nCOLP2+295)
			oPrint:Say(nL01+286,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+275,nL01+380,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+380,85,380,1)
			oPrint:Say(nL01+390,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+465,85,155,1)
			oPrint:Say(nL01+477,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+465,nCOLP2+210,nL01+551,nCOLP2+380)
			oPrint:Say(nL01+476,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+465,nCOLP2+295,nL01+551,nCOLP2+295)
			oPrint:Say(nL01+476,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+465,nL01+570,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+570,85,380,1)
			oPrint:Say(nL01+590,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+655,85,155,1)
			oPrint:Say(nL01+667,nCOLP2  ,aARESTB[nPN3,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+655,nCOLP2+210,nL01+741,nCOLP2+380)
			oPrint:Say(nL01+666,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN3,2]+"A"))),oFont11)
			oPrint:Line(nL01+655,nCOLP2+295,nL01+741,nCOLP2+295)
			oPrint:Say(nL01+666,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN3,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+655,nL01+761,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+761,85,380,1)
			oPrint:Say(nL01+781,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+846,85,155,1)
			oPrint:Say(nL01+858,nCOLP2  ,aARESTB[nPN4,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+846,nCOLP2+210,nL01+932,nCOLP2+380)
			oPrint:Say(nL01+857,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN4,2]+"A"))),oFont11)
			oPrint:Line(nL01+846,nCOLP2+295,nL01+932,nCOLP2+295)
			oPrint:Say(nL01+857,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN4,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+846,nL01+952,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+952,85,380,1)
			oPrint:Say(nL01+972,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1037,85,155,1)
			oPrint:Say(nL01+1049,nCOLP2  ,aARESTB[nPN5,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1037,nCOLP2+210,nL01+1123,nCOLP2+380)
			oPrint:Say(nL01+1048,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN5,2]+"A"))),oFont11)
			oPrint:Line(nL01+1037,nCOLP2+295,nL01+1123,nCOLP2+295)
			oPrint:Say(nL01+1048,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN5,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1037,nL01+1143,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1143,85,380,1)
			oPrint:Say(nL01+1163,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1228,85,155,1)
			oPrint:Say(nL01+1240,nCOLP2  ,aARESTB[nPN6,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1228,nCOLP2+210,nL01+1314,nCOLP2+380)
			oPrint:Say(nL01+1239,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN6,2]+"A"))),oFont11)
			oPrint:Line(nL01+1228,nCOLP2+295,nL01+1314,nCOLP2+295)
			oPrint:Say(nL01+1239,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN6,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1228,nL01+1334,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1334,85,380,1)
			oPrint:Say(nL01+1354,nCOLP2  ,aARESTB[nPN7,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1419,85,155,1)
			oPrint:Say(nL01+1431,nCOLP2  ,aARESTB[nPN7,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1419,nCOLP2+210,nL01+1505,nCOLP2+380)
			oPrint:Say(nL01+1430,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN7,2]+"A"))),oFont11)
			oPrint:Line(nL01+1419,nCOLP2+295,nL01+1505,nCOLP2+295)
			oPrint:Say(nL01+1430,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN7,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1419,nL01+1525,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1525,85,380,1)
			oPrint:Say(nL01+1545,nCOLP2  ,aARESTB[nPN8,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1610,85,155,1)
			oPrint:Say(nL01+1622,nCOLP2  ,aARESTB[nPN8,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1610,nCOLP2+210,nL01+1696,nCOLP2+380)
			oPrint:Say(nL01+1621,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN8,2]+"A"))),oFont11)
			oPrint:Line(nL01+1610,nCOLP2+295,nL01+1696,nCOLP2+295)
			oPrint:Say(nL01+1621,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN8,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1610,nL01+1716,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1716,85,380,1)
			oPrint:Say(nL01+1736,nCOLP2  ,aARESTB[nPN9,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1801,85,155,1)
			oPrint:Say(nL01+1813,nCOLP2  ,aARESTB[nPN9,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1801,nCOLP2+210,nL01+1887,nCOLP2+380)
			oPrint:Say(nL01+1812,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN9,2]+"A"))),oFont11)
			oPrint:Line(nL01+1801,nCOLP2+295,nL01+1887,nCOLP2+295)
			oPrint:Say(nL01+1812,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN9,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,2550)
		Endif

	ElseIf aAREIXO[xl][1] = 10
		nPN1 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][2]})
		nPN2 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][3]})
		nPN3 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][4]})
		nPN4 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][5]})
		nPN5 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][6]})
		nPN6 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][7]})
		nPN7 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][8]})
		nPN8 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][9]})
		nPN9 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][10]})
		nPN0 := ASCAN(aARESTB,{|x| x[1] == aAREIXO[xl][11]})

		If nDESIGM = 1
			MNTA220BX(oPrint,@i,@lin,nL01-20,85,370,5)
			MNTA220EI1(oPrint,@i,@lin,nL01+65,nL01+130,2,4,170,nLISOMA)
			MNTA220EI1(oPrint,@i,@lin,nL05+45,nL05+280,2,1,170,nLISOMA)
			MNTA220BX(oPrint,@i,@lin,nL07-20,85,370,5)
			MNTA220EI1(oPrint,@i,@lin,nL07+65,nL07+130,2,4,170,nLISOMA)
			oPrint:Say(nL01-85      ,nCOLP2+100,cNOEIXO,oFont14)
			oPrint:Say(nL01,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			oPrint:Say(nL02,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			oPrint:Say(nL03,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			oPrint:Say(nL04,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			oPrint:Say(nL05,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			oPrint:Say(nL07,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			oPrint:Say(nL08,nCOLP2  ,aARESTB[nPN7,3],oFont11)
			oPrint:Say(nL09,nCOLP2  ,aARESTB[nPN8,3],oFont11)
			oPrint:Say(nL10,nCOLP2  ,aARESTB[nPN9,3],oFont11)
			oPrint:Say(nL11,nCOLP2  ,aARESTB[nPN0,3],oFont11)
			nUTLIN := Max(nUTLIN,2350)
		Else
			oPrint:Say(nL01-15      ,nCOLP2+100,cNOEIXO,oFont14)

			MNTA220BX(oPrint,@i,@lin,nL01+40,85,380,1)
			oPrint:Say(nL01+50,nCOLP2  ,aARESTB[nPN1,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+125,85,155,1)
			oPrint:Say(nL01+140,nCOLP2  ,aARESTB[nPN1,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+125,nCOLP2+210,nL01+211,nCOLP2+380)
			oPrint:Say(nL01+136,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN1,2]+"A"))),oFont11)
			oPrint:Line(nL01+125,nCOLP2+295,nL01+211,nCOLP2+295)
			oPrint:Say(nL01+136,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN1,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+125,nL01+230,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+230,85,380,1)
			oPrint:Say(nL01+250,nCOLP2  ,aARESTB[nPN2,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+315,85,155,1)
			oPrint:Say(nL01+327,nCOLP2  ,aARESTB[nPN2,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+314,nCOLP2+210,nL01+400,nCOLP2+380)
			oPrint:Say(nL01+325,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN2,2]+"A"))),oFont11)
			oPrint:Line(nL01+314,nCOLP2+295,nL01+400,nCOLP2+295)
			oPrint:Say(nL01+325,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN2,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+315,nL01+420,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+420,85,380,1)
			oPrint:Say(nL01+440,nCOLP2  ,aARESTB[nPN3,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+505,85,155,1)
			oPrint:Say(nL01+517,nCOLP2  ,aARESTB[nPN3,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+505,nCOLP2+210,nL01+591,nCOLP2+380)
			oPrint:Say(nL01+516,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN3,2]+"A"))),oFont11)
			oPrint:Line(nL01+505,nCOLP2+295,nL01+591,nCOLP2+295)
			oPrint:Say(nL01+516,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN3,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+505,nL01+611,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+611,85,380,1)
			oPrint:Say(nL01+631,nCOLP2  ,aARESTB[nPN4,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+696,85,155,1)
			oPrint:Say(nL01+708,nCOLP2  ,aARESTB[nPN4,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+695,nCOLP2+210,nL01+781,nCOLP2+380)
			oPrint:Say(nL01+706,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN4,2]+"A"))),oFont11)
			oPrint:Line(nL01+695,nCOLP2+295,nL01+781,nCOLP2+295)
			oPrint:Say(nL01+706,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN4,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+696,nL01+802,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+802,85,380,1)
			oPrint:Say(nL01+822,nCOLP2  ,aARESTB[nPN5,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+887,85,155,1)
			oPrint:Say(nL01+899,nCOLP2  ,aARESTB[nPN5,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+887,nCOLP2+210,nL01+973,nCOLP2+380)
			oPrint:Say(nL01+898,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN5,2]+"A"))),oFont11)
			oPrint:Line(nL01+887,nCOLP2+295,nL01+973,nCOLP2+295)
			oPrint:Say(nL01+898,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN5,2]+"P"))),oFont11,,CLR_GREEN)

			// DIVISOR
			MNTA220EI1(oPrint,@i,@lin,nL01+887,nL01+1119,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1119,85,380,1)
			oPrint:Say(nL01+1139,nCOLP2  ,aARESTB[nPN6,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1204,85,155,1)
			oPrint:Say(nL01+1216,nCOLP2  ,aARESTB[nPN6,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1204,nCOLP2+210,nL01+1290,nCOLP2+380)
			oPrint:Say(nL01+1215,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN6,2]+"A"))),oFont11)
			oPrint:Line(nL01+1204,nCOLP2+295,nL01+1290,nCOLP2+295)
			oPrint:Say(nL01+1215,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN6,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1204,nL01+1310,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1310,85,380,1)
			oPrint:Say(nL01+1330,nCOLP2  ,aARESTB[nPN7,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1395,85,155,1)
			oPrint:Say(nL01+1407,nCOLP2  ,aARESTB[nPN7,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1395,nCOLP2+210,nL01+1481,nCOLP2+380)
			oPrint:Say(nL01+1406,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN7,2]+"A"))),oFont11)
			oPrint:Line(nL01+1395,nCOLP2+295,nL01+1481,nCOLP2+295)
			oPrint:Say(nL01+1406,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN7,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1395,nL01+1501,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1501,85,380,1)
			oPrint:Say(nL01+1521,nCOLP2  ,aARESTB[nPN8,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1586,85,155,1)
			oPrint:Say(nL01+1598,nCOLP2  ,aARESTB[nPN8,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1586,nCOLP2+210,nL01+1672,nCOLP2+380)
			oPrint:Say(nL01+1597,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN8,2]+"A"))),oFont11)
			oPrint:Line(nL01+1586,nCOLP2+295,nL01+1672,nCOLP2+295)
			oPrint:Say(nL01+1597,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN8,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1586,nL01+1692,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1692,85,380,1)
			oPrint:Say(nL01+1717,nCOLP2  ,aARESTB[nPN9,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1777,85,155,1)
			oPrint:Say(nL01+1794,nCOLP2  ,aARESTB[nPN9,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1777,nCOLP2+210,nL01+1863,nCOLP2+380)
			oPrint:Say(nL01+1788,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN9,2]+"A"))),oFont11)
			oPrint:Line(nL01+1777,nCOLP2+295,nL01+1863,nCOLP2+295)
			oPrint:Say(nL01+1788,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN9,2]+"P"))),oFont11,,CLR_GREEN)

			MNTA220EI1(oPrint,@i,@lin,nL01+1777,nL01+1893,2,1,170,nLISOMA)

			MNTA220BX(oPrint,@i,@lin,nL01+1893,85,380,1)
			oPrint:Say(nL01+1913,nCOLP2  ,aARESTB[nPN0,3],oFont11)
			MNTA220BX(oPrint,@i,@lin,nL01+1978,85,155,1)
			oPrint:Say(nL01+1990,nCOLP2  ,aARESTB[nPN0,If(nDESIGM = 2,1,4)],oFont11,,cCOR)

				//Imprime as Calibragens
				oPrint:Box(nL01+1978,nCOLP2+210,nL01+2064,nCOLP2+380)
			oPrint:Say(nL01+1989,nCOLP2+220  ,AllTrim(Str(&(aARESTB[nPN0,2]+"A"))),oFont11)
			oPrint:Line(nL01+1978,nCOLP2+295,nL01+2064,nCOLP2+295)
			oPrint:Say(nL01+1989,nCOLP2+310  ,AllTrim(Str(&(aARESTB[nPN0,2]+"P"))),oFont11,,CLR_GREEN)

			nUTLIN := Max(nUTLIN,2750)
		Endif
	Endif
	nCOLP2 := nCOLP2 + 420
	Next xl

	If nVLEG = 2
	nLIN := nUTLIN+70
	If nLIN > 2350
		nPAG   += 1
		nUTLIN := 0
		oPrint:EndPage()
		oPrint:StartPage()
		cPAGI := STR0064+" "+Str(nPAG,2)+"    "+cHrImp //"Página"
		oPrint:Say(10,2000,cPAGI,oFont14)
		nLIN := 60
	Endif

	// GERAR UMA MATRIZ COM OS DESENHO

	If nDESIGM <> 1
		cDESIGF := If(nDESIGM = 2,STR0016,STR0017) //"LOCALIZAÇÃO"###"FAMÍLIA"
		aDESIGF := {}
		For h2 := 1 To Len(aARESTB)
			cCODESIG := If(nDESIGM = 2,aARESTB[h2][1],aARESTB[h2][4])
			If ASCAN(aDESIGF,{|x| x[1] == cCODESIG}) = 0
				Aadd(aDESIGF,{cCODESIG})
			Endif
		Next h2
	Endif

	oPrint:Say(nLIN,040,STR0065,oFont18) //"LEGENDA"

	nLIN := nLIN + 90
	oPrint:Say(nLIN,040,Upper(STR0001),oFont14) //"RODADOS"

	If nDESIGM <> 1
		oPrint:Say(nLIN,1540,Upper(cDESIGF),oFont14,,cCOR)
	Endif

	nLIN := nLIN + 50
	For hh := 1 To Len(aARESTB)
		If nLIN > 2350
			nPAG   += 1
			oPrint:EndPage()
			oPrint:StartPage()
			cPAGI := STR0066+" "+Str(nPAG,2)+"    "+cHrImp //"Página"
			oPrint:Say(10,2000,cPAGI,oFont14)
			oPrint:Say(40,040,Upper(STR0001),oFont14) //"RODADOS"
			nLIN  := 90
		Endif

		If !Empty(aARESTB[hh][3])
			oPrint:Say(nLIN,040,aARESTB[hh][3],oFont11)
			oPrint:Say(nLIN,402,"- "+NGSEEK("ST9",aARESTB[hh,3],1,"T9_NOME"),oFont11)
		Endif

		If nDESIGM <> 1
			If hh <= Len(aDESIGF)
				oPrint:Say(nLIN,1540,aDESIGF[hh,1],oFont11,,cCOR)
				If nDESIGM = 2
				oPrint:Say(nLIN,1700,"- "+NGSEEK("TPS",aDESIGF[hh,1],1,"TPS_NOME"),oFont11,,cCOR)
				Else
				oPrint:Say(nLIN,1700,"- "+NGSEEK("ST6",aDESIGF[hh,1],1,"T6_NOME"),oFont11,,cCOR)
				Endif
			Endif
		Endif
		nLIN := nLIN + 40
	Next hh
	Endif

	oPrint:EndPage()
	If lPrevW
	oPrint:Preview()
	Endif

Return Nil


//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA995Gra
Monta a calibração e medição de sulco no modo gráfico.

@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function MNTA995Gra(cAlias,nReg,nOpc,cBem750,cCiclo,cOrSer)

	//Guarda conteudo e declara variaveis padroes
	Local aNGBEGINPRM := NGBEGINPRM(,"MNTA995",{},.T.,.T.)

	// Objetos na tela
	Local oDlg, oMenu
	Local oPnlBtn
	Local oTCabecalho, oPnlInferior
	Local oTRodape, oPnlRodape
	Local oTMenu
	Local oScrllCentro

	// Variáveis de caminhos para as imagens
	Local cBARRAS     := If(isSRVunix(),"/","\")

	// Indica se todas as imagens foram exportadas
	Local lOkImg := .F.

	// Indica confirmação da tela
	Local lTudOk := .F.

	// Resolução da tela
	Local nResTotal
	Local aScreenRes
	Local oSize
	Local aSize

	Private nLargura, nAltura

	Private dDtDig    := dDataBase
	Private cCicl750  := cCiclo
	Private cOS750    := cOrSer
	Private lRot750   := .F.
	Private aPneInf   := {}

	// Variável padrão com o diretoria das imagens
	Private cDirImg

	//Variável utilizada na função NGFILT232 ( favor não retirar )
	Private lRodzSXB := .F.

	If !l995Auto
		aScreenRes  := GetScreenRes()
		oSize       := FwDefSize():New(.T.)
		aSize       := MsAdvSize(,.F.,430)

		nLargura  := aSize[5]
		nAltura   := aSize[6]+If(PtGetTheme() = "MDI",120,0)
		cDirImg   := GetTempPath()+"rodados"+cBARRAS

		nLinIniTla := oSize:aWindSize[1] // Linha  inicial da tela
		nColIniTla := oSize:aWindSize[2] // Coluna inicial da tela
		nLinFimTla := oSize:aWindSize[3] // Linha  final   da tela
		nColFimTla := oSize:aWindSize[4] // Coluna final   da tela

		Processa({ |lEnd| lOkImg := MNTA232IMG() },STR0067) //"Aguarde.. Exportando Imagens..."

		If !lOkImg
			MsgStop(STR0068 + CRLF + ; //"Existem algumas imagens necessárias para a utilização desta rotina que não foram encontradas."
					STR0069,STR0070) //"Favor alertar o administrador para que o sistema seja atualizado corretamente."##"NÃO CONFORMIDADE"
			Return .F.
		EndIf

		// Validacao com o tamanho da tela se menor que 1024x768
		nResTotal := aScreenRes[1] * aScreenRes[2]
		If nResTotal < (1024 * 768)
			ShowHelpDlg(STR0035,{STR0071},1,{STR0072},2) //"Atenção"##"A resolução do seu monitor não está compatível."##"Ajustar para no mínimo 1024x768 Pixels."
			Return .F.
		EndIf

	EndIf

	//----------------------------------------------------
	// Código do pneu selecionado para Medição/Calibragem
	//----------------------------------------------------
	Private cPneuAtu
	Private cEixo995
	Private cPosicao
	Private cMedida
	Private cDesenho
	Private nSulcoAtu
	Private dDtSulco
	Private cHrSulco
	Private M->TTP_SULCO1 := 0
	Private M->TTP_SULCO2 := 0
	Private M->TTP_SULCO3 := 0
	Private nCalMin       := 0
	Private nCalMax       := 0
	Private M->TTP_CALATU := 0
	Private M->TTP_CALREA := 0
	Private aINSPE        := {}
	Private aRodi         := {}

	If !Empty(cBem750)
		INCLUI  := .T.
		ALTERA  := .F.
		lRot750 := .T.
		cBem    := cBem750
		cExecut := ""
		dData   := dDataBase
		cHrCal  := SubStr(Time(),1,5)
	EndIf

	dbSelectArea("ST9")
	dbSetOrder(1)
	dbSeek(xFilial("ST9")+cBem)

	// Variáveis do Cabeçalho
	Private oDtMov
	Private cBemPai995 := ST9->T9_CODBEM
	Private cDescBem   := Trim(ST9->T9_CODBEM) + " - " + Trim(ST9->T9_NOME)
	Private cDesTipMod := Trim(ST9->T9_TIPMOD) + " - " + Trim(NGSEEK("TQR",ST9->T9_TIPMOD,1,"TQR->TQR_DESMOD"))
	Private cTipMod    := ST9->T9_TIPMOD
	Private cDesCodFam := Trim(ST9->T9_CODFAMI) + " - " + Trim(NGSEEK("ST6",ST9->T9_CODFAMI,1,"ST6->T6_NOME"))
	Private cCodFami   := ST9->T9_CODFAMI
	Private cNomBem    := ST9->T9_NOME
	Private cPlaca     := Trim(ST9->T9_PLACA)
	Private cLocal     := Trim(ST9->T9_UFEMPLA) + " - " + Trim(Substr(ST9->T9_CIDEMPL,1,15))
	Private cNum995    := If(INCLUI,GetSXENum("TTO","TTO_NUMCAL"),TTO->TTO_NUMCAL)
	Private cExecut995 := cExecut
	Private cNomExe995 := IIf( lUseSRA, NGSEEK( 'SRA', cExecut995, 1, 'SRA->RA_NOME' ), NGSEEK( 'ST1', cExecut995, 1, 'ST1->T1_NOME' ) )
	Private dData995   := dData
	Private cHora995   := cHrCal
	Private nPOSCONT   := 0
	Private nPOSOLD1   := 0
	Private nPOSCON2   := 0
	Private nPOSOLD2   := 0
	Private lTEMCONT   := ST9->T9_TEMCONT = "S"
	Private lTEMCON2   := NGIFDICIONA("TPE",xFilial("TPE")+cBemPai995,1)
	Private cLocMerc   := ""
	Private cLocRuss  := ""
	Private cTamFont   := "7"

	// Variáveis de controle dos shapes
	Private nId       := 0
	Private aShape    := {}
	Private aAllShape := {}
	Private aRodizio  := {}

	// ID dos shapes do Rodape para Calibragem e Medição
	Private nIdCalib,nIdMedic

	// Localiza codigo da imagem na estrutura
	Private cCodImg     := Trim(NGSEEK("TQ0",cCodFami+cTipMod,1,"TQ0->TQ0_CODEST"))
	Private aEstruturas := NGRETESTRU(cCodImg)
	Private nPosEstru   := 1

	// Variável de Shape em Foco
	Private nFocus  := Nil

	// Objeto TPaintPanel
	Private oTCentro
	Private oPne

	// Array contendo objetos da Medida de Sulco e Calibragem
	Private aObjMed := {}
	Private aObjCal := {}

	// Objetos para serem focados
	Private oCalAfe, oSulco1

	// Objeto botão de Avançar
	Private oNext

	// Array contendo dados das Medições, Calibragens e Problemas
	Private aMedicao  := {}
	Private aCalibra  := {}
	Private aProblem  := {}
	Private aShapeAux := {}

	// Variáveis de array de controle
	Private aPNEUSINI := {}
	Private aPNEUSFIM := {}
	Private aBEMLOC   := {}

	// Título do oDlg
	Private cCadastro := If(!lRot750,STR0073,STR0135)//'Calibragem e Medição de Sulco'##"Registro de Inspeções e Calibragem"

	// Variáveis de INCLUI e ALTERA do MNTA995
	Private INCLUI995 := INCLUI
	Private ALTERA995 := ALTERA

	// Variável utilizada pelo MNTA420
	Private lCORRET  := .T.
	Private aTROCAF3 := {}
	Private lUsouF7  := .F.

	// Retorna o valor do contador 1 na Data e Hora da Calibragem
	If lTEMCONT
		aContador := NGACUMEHIS(cBemPai995,dData995,cHora995,1,'E')
		If aContador[3] == dData995 .And. aContador[4] == cHora995
			nPOSOLD1 := aContador[1]
			nPOSCONT := aContador[1]
		EndIf
	EndIf

	// Retorna o valor do contador 2 na Data e Hora da Calibragem
	If lTEMCON2
		aContador := NGACUMEHIS(cBemPai995,dData995,cHora995,2,'E')
		If aContador[3] == dData995 .And. aContador[4] == cHora995
			nPOSOLD2 := aContador[1]
			nPOSCON2 := aContador[1]
		EndIf
	EndIf

	If nOpc == 5
		SetExclui()
	EndIf

	If l995Auto

		MNT995INPN() // Carrega a estrutura do bem pai

		lTudOk := MN995AUTO2() .And. ;// Valida contador
				MNA995CARG(nOpc) .And. ; // Carrega o conteúdo dos pneus (calibragem/sulco)
				ValidDlg( nOpc ) // validação

	Else

		// Variáveis do caminho das imagens
		Private cImgPlaca   := lower(cDirImg+"NG_RODADOS_PLACA.PNG")
		Private cImgEstru   := lower(cDirImg+"NG_ESTRUTURA_"+cCodImg+".PNG")
		Private cImgCalib   := lower(cDirImg+"NG_PNEU_VAZIO.PNG")
		Private cImgMedic   := lower(cDirImg+"NG_PNEU_MEDICAO.PNG")
		Private cImgPlMerc  := lower(cDirImg+"ng_rodados_mercosul_placa.png")
		Private cImgBand    := cDirImg
		Private cLogMerc    := lower(cDirImg+"ng_rodados_logo_mercosul.png")
		Private cImgPlRuss  := lower(cDirImg + "ng_rodados_russia_placa.png")

		//Verificação de data e país para utilização da nova placa do mercosul
		If CPAISLOC == "BRA" .And. dToS(DDATABASE) >= "20170101"
			cLocMerc := "BRASIL"
			cImgBand := lower(cImgBand + "ng_rodados_merc_band_bra.png")
		ElseIf CPAISLOC == "ARG" .And. dToS(DDATABASE) >= "20160101"
			cLocMerc := "REPUBLICA ARGENTINA"
			cImgBand := lower(cImgBand + "ng_rodados_merc_band_arg.png")
		ElseIf CPAISLOC == "PAR" .And. dToS(DDATABASE) >= "20160101"
			cLocMerc := "REPUBLICA DEL PARAGUAY"
			cImgBand := lower(cImgBand + "ng_rodados_merc_band_pry.png")
		ElseIf CPAISLOC == "VEN" .And. dToS(DDATABASE) >= "20160101"
			cLocMerc := "REPUBLICA BOLIVARIANA DE VENEZUELA"
			cImgBand := lower(cImgBand + "ng_rodados_merc_band_ven.png")
			cTamFont := "6"
		ElseIf CPAISLOC == "URU" .And. dToS(DDATABASE) >= "20160101"
			cLocMerc := "URUGUAY"
			cImgBand := lower(cImgBand + "ng_rodados_merc_band_ury.png")
		ElseIf CPAISLOC == "URS"
			cLocRuss	:= "RUS"
			cImgBand	:= lower(cImgBand + "ng_rodados_russia_band.png")
			cImgPlaca	:= lower(cDirImg + "ng_rodados_russia_placa.png")
		EndIf

		DEFINE MSDIALOG oDlg TITLE cCadastro FROM nLinIniTla,nColIniTla TO nLinFimTla,nColFimTla Of oMainWnd COLOR CLR_BLACK,CLR_WHITE Pixel STYLE nOR(WS_VISIBLE,WS_POPUP)

			oDlg:lEscClose := .F.
			oDlg995        := oDlg

			oPanelTot       := TPanel():Create(oDlg,0,0,,,.F.,,,CLR_WHITE,0,0)
			oPanelTot:Align := CONTROL_ALIGN_ALLCLIENT

			//Variáveis de Altura e Largura
			nAltCabec  := 110
			nAltRodape := 100
			nLargScrll := nLargura*(1-(250*1)/nLargura) + If(PtGetTheme()= "MDI",5,0)//Calcula tamanho para o Centro
			nAltCentro := nAltura/2 - nAltRodape - nAltCabec  //(Total - Rodape - Cabecalho)

			oTCabecalho       := TPaintPanel():new(0,0,nLargura/2,nAltCabec/2,oPanelTot,.F.)
			oTCabecalho:Align := CONTROL_ALIGN_TOP

			nImgWidth  := Val(aEstruturas[nPosEstru][2])
			nImgHeight := Val(aEstruturas[nPosEstru][3])

			//Medidas da Estrutura
			nLargEstru := nImgWidth  //Largura da Estrutura (Verificar Tamanho da imagem)
			nAltEstru  := nImgHeight //Altura da Estrutura (Verificar Tamanho da imagem)

			//Barra Lateral Esquerda - Botoes
			oPnlBtn       := TPanel():New(0,0,,oPanelTot,,,,,RGB(67,70,87),13,0,.F.,.F.)
			oPnlBtn:Align := CONTROL_ALIGN_LEFT

			If !lRot750
				oBtnAux          := TBtnBmp():NewBar("ng_ico_osvermelho","ng_ico_osvermelho",,,,{||MNC600ORD(aBEMLOC[nFocus][__CODBEM__])},,oPnlBtn)
				oBtnAux:cToolTip := STR0077 //"Consultar Ordem de Serviço"
				oBtnAux:Align    := CONTROL_ALIGN_TOP

				oBtnAux          := TBtnBmp():NewBar("ng_ico_visualizar","ng_ico_visualizar",,,,{||fVisualBem(aBEMLOC[nFocus][__CODBEM__])},,oPnlBtn)
				oBtnAux:cToolTip := STR0136 //"Visualizar Pneu"
				oBtnAux:Align    := CONTROL_ALIGN_TOP

				oBtnAux          := TBtnBmp():NewBar("ng_ico_localizar","ng_ico_localizar",,,,{||MNTC125(aBEMLOC[nFocus][__CODBEM__],.F.,,1)},,oPnlBtn)
				oBtnAux:cToolTip := STR0074 //"Consulta Pneu"
				oBtnAux:Align    := CONTROL_ALIGN_TOP

				oBtnAux          := TBtnBmp():NewBar("ng_ico_sulco","ng_ico_sulco",,,,{||MNTA080SUH(aBEMLOC[nFocus][__CODBEM__])},,oPnlBtn)
				oBtnAux:cToolTip := STR0076 //"Histórico de Sulco"
				oBtnAux:Align    := CONTROL_ALIGN_TOP

				oBtnAux          := TBtnBmp():NewBar("ng_ico_historico","ng_ico_historico",,,,{|| MNTA080HCO(aBEMLOC[nFocus][__CODBEM__])},,oPnlBtn)
				oBtnAux:cToolTip := STR0075 //"Histórico do Contador"
				oBtnAux:Align    := CONTROL_ALIGN_TOP
			EndIf

			oBtnAux          := TBtnBmp():NewBar("ng_ico_iosco","ng_ico_iosco",,,,{|| NG420INC("STJ",0,3,cBemPai995,,'B')},,oPnlBtn)
			oBtnAux:cToolTip := STR0128 //"Abrir Ordem de Serviço"
			oBtnAux:Align    := CONTROL_ALIGN_TOP

			oBtnAux          := TBtnBmp():NewBar("ng_ico_final","ng_ico_final",,,,{|| If(MsgYesNo(STR0078,STR0035),oDlg:End(),.F.)},,oPnlBtn) //"Deseja realmente sair?"###"Atenção"
			oBtnAux:cToolTip := STR0079 //"Sair"
			oBtnAux:Align    := CONTROL_ALIGN_TOP

			//Panel da Estrutura e do Rodape
			oPnlInferior       := TPanel():New(0,0,,oPanelTot,,,,CLR_WHITE,,nLargScrll/2,nAltCentro,.F.,.F.)
			oPnlInferior:Align := CONTROL_ALIGN_RIGHT

			oScrllCentro       := TScrollBox():New(oPnlInferior,72,12,nAltCentro,nLargScrll/2,.T.,.T.,.F.)
			oScrllCentro:Align := CONTROL_ALIGN_TOP
			oTCentro           := TPaintPanel():new(0,0,If(nLargScrll/2 > nLargEstru/2, nLargScrll/2,nLargEstru/2),;
								IIf(nAltCentro > nAltEstru/2, nAltCentro,nAltEstru/2) ,oScrllCentro,.F.)

			//Se o tamanho da estrutura for menor que o centro(ScrollBox)
			If nLargEstru / 2 < nLargScrll / 2 .And. nAltEstru / 2 < nAltCentro
				oTCentro:Align := CONTROL_ALIGN_ALLCLIENT
			EndIf

			//Rodapé
			oPnlRodape       := TPanel():New(0,0,,oPnlInferior,,,,CLR_WHITE,,nLargScrll/2,nAltRodape,.F.,.F.)
			oPnlRodape:Align := CONTROL_ALIGN_TOP

			oTRodape         := TPaintPanel():new(0,0,nLargScrll/2,100,oPnlRodape,.F.)
			oTRodape:Align   := CONTROL_ALIGN_ALLCLIENT

			//Barra Lateral Esquerda
			oPnlRodizio       := TPanel():New(70,500,,oPanelTot,,,,,CLR_WHITE,(nLargura - nLargScrll)/2,nAltCentro+nAltRodape,.F.,.F.)
			oPnlRodizio:Align := CONTROL_ALIGN_ALLCLIENT

			oPnlAux       := TPanel():New(0,0,,oPnlRodizio,,,,,RGB(67,70,87),0,13,.F.,.F.)
			oPnlAux:Align := CONTROL_ALIGN_TOP

			aAdd(aObjMed,TSay():New(03,03,{|| STR0080},oPnlAux,,TFont():New("Verdana",,14,,.T.),,,,.T.,CLR_WHITE,CLR_WHITE,80,20)) //"Medição de Sulco"
			aAdd(aObjCal,TSay():New(03,03,{|| STR0030},oPnlAux,,TFont():New("Verdana",,14,,.T.),,,,.T.,CLR_WHITE,CLR_WHITE,80,20)) //"Calibragem"

			oTMenu       := TPaintPanel():new(0,0,10,10,oPnlRodizio,.T.)
			oTMenu:Align := CONTROL_ALIGN_ALLCLIENT

			//Cria Rodapé
			CreateHeader(@oTCabecalho,nAltCabec,nLargura+ If(PtGetTheme()= "MDI",5,0))

			//Cria Centro
			CreateCenter(@oTCentro,nAltCentro,nLargScrll)

			//Cria Menu
			CreateMenu(@oTMenu,nLargura - nLargScrll - oTMenu:nWidth)

			//Cria Rodapé
			CreateFooter(@oTRodape,nLargScrll,nAltRodape*2)

			//Eventos do TPaintPanel Central (Estrutura/Pneus)
			oTCentro:blClicked := {|x,y| ClickTire(oTCentro)}

			If !lRot750
				oTCentro:bRClicked := {|x,y| MenuPopUp(x,y,@oMenu,oTCentro) }  //Botão direito
			EndIf

			oTCentro:bLDblClick := {|x,y| ClickTire(oTCentro)}    //Duplo clique

			//Eventos do TPaintPanel Inferior (Rodapé)
			oTRodape:blClicked  := {|x,y| ClickFooter(oTRodape)}
			oTRodape:blClicked  := {|x,y| ClickFooter(oTRodape)}
			oTRodape:bLDblClick := {|x,y| ClickFooter(oTRodape)}

		ACTIVATE MSDIALOG oDlg ON INIT If(InitTire(oDlg),EnchoiceBar(@oDlg,{|| IIf( ValidDlg( nOpc ),(lTudOk :=.T.,oDlg:End()),lTudOk := .F.)},{|| lTudOk := .F.,oDlg:End()}),oDlg:End())

	EndIf

	If lTudOk
		If nOpc == 5
			DeleteReg()
		ElseIf nOpc <> 2
			Save(nOpc)
		EndIf
	ElseIf INCLUI995
		RollBackSX8()
	EndIf

	//Retorna conteudo de variáveis padrões
	NGRETURNPRM(aNGBEGINPRM)
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} ValidDlg
Valida todo o Dialog de Calibragem e Medição de Sulco

@param nOpc, numérico, tipo de operação
@return lRet  , Lógico, Valor que garante integridade do registro.
@author Vitor Emanuel Batista
@since 18/05/2011
@version 1.0
/*/
//---------------------------------------------------------------------
Static Function ValidDlg( nOpc )

	Local lRet    := .T.
	Local aSulco  := {M->TTP_SULCO1,M->TTP_SULCO2,M->TTP_SULCO3}
	Local lVldSlc := IIf(aScan(aSulco, {|x| x > 0}) > 0, .T., .F.)

	If !l995auto //Via execauto valida em outro trecho
		//Se vier da rotina de inspeção, faz verificações adicionais
		If lRot750 .And. !VERIFVET(2)
			lRet := .F.
		EndIf

		//-------------------------------------------------------------------------------------------------------------------------
		// Valida valor do menor suco de acordo com a TQV
		// Só realiza a validação desde que a chamada venha da rotina MNTA750 ou esteja posicionado no shape de medição de sulco.
		//-------------------------------------------------------------------------------------------------------------------------
		If lRet .And. (lVldSlc .Or. lRot750) .And. !ValidSulco(cPneuAtu, aSulco, dData995, cHora995)
			lRet := .F.
		EndIf

		//------------------------------
		// Valida valores da calibragem
		//------------------------------
		If lRet .And. !ValidCalib(M->TTP_CALATU,M->TTP_CALREA,nCalMin,nCalMax)
			lRet := .F.
		EndIf

		//---------------------------------
		// Salva informações do pneu atual
		//---------------------------------
		SaveArray(nFocus)
	EndIf

	//-------------------
	// Valida Contador 1
	//-------------------
	If lRet .And. lTEMCONT .And. !Empty(nPOSCONT) .And. Empty(nPOSOLD1)
		If !NGCHKHISTO(cBemPai995,dData995,nPOSCONT,cHora995,1,,.T.)
			lRet := .F.
		EndIf
		If lRet .And. !NGVALIVARD(cBemPai995,nPOSCONT,dData995,cHora995,1,.T.)
			lRet := .F.
		EndIf
	EndIf
	//-------------------
	// Valida Contador 2
	//-------------------
	If lRet .And. lTEMCON2 .And. !Empty(nPOSCON2) .And. Empty(nPOSOLD2)
		If !NGCHKHISTO(cBemPai995,dData995,nPOSCON2,cHora995,2,,.T.)
			lRet := .F.
		EndIf
		If lRet .And. !NGVALIVARD(cBemPai995,nPOSCON2,dData995,cHora995,2,.T.)
			lRet := .F.
		EndIf
	EndIf

	lRet := lRet .And. fAtLeastOne( nOpc ) // verifica se há pelo menos um campo informado
 
Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} CreateHeader
Carrega objetos do menu

@param oPanel Objeto pai
@param nAltura Algura disponível para o cabeçalho
@param nLargura Largura disponível para o cabeçalho
@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function CreateHeader(oPanel,nAltura,nLargura)

	Local nCabecX  := 20
	Local nCabecY  := 13

	Local nPlacaX := nCabecX+730
	Local nPlacaY := nCabecY-11
	Local nPlacaZ := 18
	Local oGet1
	Local lOfuscar := .F.

	// [LGPD] Se as funcionalidades, referentes à LGPD, podem ser utilizadas
	If FindFunction( 'FWPDCanUse' ) .And. FwPdCanUse( .T. )

		// [LGPD] Caso o usuário não possua acesso ao(s) campo(s), deve-se ofuscá-lo(s)
		lOfuscar := Len( FwProtectedDataUtil():UsrAccessPDField( __CUSERID, { IIf( lUseSRA, 'RA_NOME', 'T1_NOME' ) } ) ) == 0

	EndIf

	oPanel:addShape(	"id="+RetId()+";type=1;left=0;top=0;width="+Str(nLargura)+";height=600;"+;
							"gradient=1,0,0,0,0,0.0,#eeeeee;pen-width=0;pen-color=#ffffff;is-container=1;")

    If !lRot750

    	//-------------
    	// Bem
    	//-------------
    	oPanel:addShape("id="+RetId()+";type=7;left="+Str(nCabecX)+";top="+Str(nCabecY)+";width=200;height=30;"+;
    						 "text="+STR0081+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Bem:"
    	@ nCabecY-009,nCabecX+025 MsGet cDescBem Of oPanel Picture '@!' When .F. Size 120,08 Pixel

    	//-------------
    	// Dt Mov.
    	//-------------
    	oPanel:addShape("id="+RetId()+";type=7;left="+Str(nCabecX+320)+";top="+Str(nCabecY)+";width=200;height=30;"+;
    						 "text="+STR0082+";font=Verdana,08,0,0,1;pen-color=#0000FF;pen-width=1;is-container=0")	//"Data:"
    	@ nCabecY-009,nCabecX+190 MsGet oDtMov Var dData995 Of oPanel Picture '99/99/9999' Size 45,08 HASBUTTON When .F. Pixel

    	//-------------
    	// Esquema
    	//-------------
    	oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nCabecX)+";top="+Str(nCabecY+27)+;
    							";width=200;height=30;text="+STR0083+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Esquema:"
    	@ nCabecY+006,nCabecX+025 MsGet cDesCodFam Of oPanel Picture '@!' When .F. Size 120,08 Pixel

    	//-------------
    	// Hr. Leitura
    	//-------------
    	oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nCabecX+525)+";top="+Str(nCabecY)+;
    							";width=200;height=30;text="+STR0084+";font=Verdana,08,0,0,1;pen-color=#0000FF;pen-width=1;is-container=0") //"Hora:"
    	@ nCabecY-009,nCabecX+290 MsGet cHora995 Of oPanel Picture '99:99' Size 20,08 When MNTA995CCB(cBemPai995, dData995, cHora995) Pixel

    	//------------
    	// Executante
    	//------------
    	oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nCabecX+320)+";top="+Str(nCabecY+27)+;
    							";width=200;height=30;text="+STR0085+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Executante:"
    	@ nCabecY+006,nCabecX+190 MsGet oGet1 Var (AllTrim(cExecut995) + " - " +cNomExe995) Of oPanel Picture '@!' Valid Positivo(nPOSCONT) Size 160,08 When .F. Pixel
		If lOfuscar
			oGet1:lObfuscate := .T.
			oGet1:bWhen := {|| .F. }
		EndIf

    	//-------------
    	// Contador 1
    	//-------------
    	oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nCabecX+320)+";top="+Str(nCabecY+57)+;
    							";width=200;height=30;text="+STR0086+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Contador 1:"
    	@ nCabecY+021,nCabecX+190 MsGet nPOSCONT Of oPanel Picture '@E 999,999,999' Valid MNT995VTTO('POSCONT') Size 60,08 HASBUTTON When MNT995WTTO('TTO_POSCON') Pixel

    	//----------
    	// Modelo
    	//----------
    	oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nCabecX)+";top="+Str(nCabecY+57)+;
    							";width=200;height=30;text="+STR0087+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Modelo:"
    	@ nCabecY+021,nCabecX+025 MsGet cDesTipMod Of oPanel Picture '@!' When .F. Size 120,08 Pixel

    	//------------
    	// Contador 2
    	//------------
    	oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nCabecX+525)+";top="+Str(nCabecY+57)+;
    							";width=200;height=30;text="+STR0088+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Contador 2:"
    	@ nCabecY+021,nCabecX+290 MsGet nPOSCON2 Of oPanel Picture '@E 999,999,999' Valid MNT995VTTO('POSCONT2') Size 60,08 HASBUTTON When MNT995WTTO('TTO_POSCO2') Pixel

    Else

        //-------------
        // Frota
        //-------------
        oPanel:addShape("id="+RetId()+";type=7;left="+Str(nCabecX)+";top="+Str(nCabecY)+";width=200;height=30;"+;
            "text="+STR0137+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Frota:"
        @ nCabecY-009,nCabecX+025 MsGet cDescBem Of oPanel Picture '@!' When .F. Size 120,08 Pixel

        //-------------
        // Dt Inspec.
        //-------------
        oPanel:addShape("id="+RetId()+";type=7;left="+Str(nCabecX+345)+";top="+Str(nCabecY)+";width=200;height=30;"+;
            "text="+STR0138+";font=Verdana,08,0,0,1;pen-color=#0000FF;pen-width=1;is-container=0") //"Data:"
        @ nCabecY-009,nCabecX+210 MsGet oDtMov Var dData995 Of oPanel Picture '99/99/9999' Size 45,08 HASBUTTON When .T. Pixel
        oDtMov:bHelp := {|| ShowHelpCpo( "TR9_DTINSP",;
                { STR0151 },2,; // "Selecione a empresa da Parte Diária."
                { STR0152 },2 ) } // "Deve estar cadastrada no sistema para utilização."

        //-------------
        // Esquema
        //-------------
        oPanel:addShape(    "id="+RetId()+";type=7;left="+Str(nCabecX)+";top="+Str(nCabecY+27)+;
            ";width=200;height=30;text="+STR0083+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Esquema:"
        @ nCabecY+006,nCabecX+025 MsGet cDesCodFam Of oPanel Picture '@!' When .F. Size 120,08 Pixel

        //-------------
        // Hr. Inspec
        //-------------
        cHora995 := Substr(Time(),1,5)
        oPanel:addShape(    "id="+RetId()+";type=7;left="+Str(nCabecX+555)+";top="+Str(nCabecY)+;
            ";width=200;height=30;text="+STR0139+";font=Verdana,08,0,0,1;pen-color=#0000FF;pen-width=1;is-container=0") //"Hora:"
        @ nCabecY-009,nCabecX+315 MsGet oHrIns Var cHora995 Of oPanel Picture '99:99' Size 20,08  When MNTA995CCB(cBemPai995, dData995, cHora995) VALID NGVALHORA(cHora995) Pixel
        oHrIns:bHelp := {|| ShowHelpCpo( "TR9_HRINSP",;
                { STR0153},2,; // "Selecione a empresa da Parte Diária."
                { STR0154 },2 ) } // "Deve estar cadastrada no sistema para utilização."

         //-------------
        // Ordem
        //-------------
        oPanel:addShape(    "id="+RetId()+";type=7;left="+Str(nCabecX+555)+";top="+Str(nCabecY+27)+;
            ";width=200;height=30;text="+STR0140+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Ordem:"
        @ nCabecY+006,nCabecX+315 MsGet cOS750 Of oPanel Picture '@!' Size 29,08 When .F. Pixel

        //-------------
        // Ciclo
        //-------------
        oPanel:addShape(    "id="+RetId()+";type=7;left="+Str(nCabecX+555)+";top="+Str(nCabecY+57)+;
            ";width=200;height=30;text="+STR0141+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Ciclo:"
        @ nCabecY+021,nCabecX+315 MsGet cCicl750 Of oPanel Picture '@!' Size 10,08 When .F. Pixel

        //-------------
        // Dt Digit.
        //-------------
        oPanel:addShape(    "id="+RetId()+";type=7;left="+Str(nCabecX+345)+";top="+Str(nCabecY+27)+";width=200;height=30;"+;
            "text="+STR0142+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Data:"
        @ nCabecY+006,nCabecX+210 MsGet oDtDig Var dDtDig Of oPanel Picture '99/99/9999' Size 45,08 HASBUTTON When .F. Pixel


        //-------------
        // Contador 1
        //-------------
        oPanel:addShape(    "id="+RetId()+";type=7;left="+Str(nCabecX+345)+";top="+Str(nCabecY+57)+;
            ";width=200;height=30;text="+STR0086+";font=Verdana,08,0,0,1;"+ If(lTemCont,"pen-color=#0000FF","pen-color=#000000")+ ";pen-width=1;is-container=0") //"Contador 1:"
        @ nCabecY+021,nCabecX+210 MsGet oCont Var nPOSCONT Of oPanel Picture '@E 999,999,999' Valid Vazio(nPOSCONT) .Or. CHKPOSLIM(cBemPai995,nPOSCONT,1) Size 35,08 HASBUTTON When MNT995WTTO('TTO_POSCON') Pixel
        oCont:bHelp := {|| ShowHelpCpo( "TR9_KMATU",;
                    { STR0146 },2,; // "Selecione a empresa da Parte Diária."
                    { STR0147 },2 ) } // "Deve estar cadastrada no sistema para utilização."

        //----------
        // Modelo
        //----------
        oPanel:addShape(    "id="+RetId()+";type=7;left="+Str(nCabecX)+";top="+Str(nCabecY+57)+;
            ";width=200;height=30;text="+STR0087+";font=Verdana,08,0,0,1;pen-color=#000000;pen-width=1;is-container=0") //"Modelo:"
        @ nCabecY+021,nCabecX+025 MsGet cDesTipMod Of oPanel Picture '@!' When .F. Size 120,08 Pixel
    EndIf
	//------------
	// Cria Placa
	//------------
	//Verificação de data e país para utilização da nova placa do mercosul
	If !Empty(cPlaca) .And. !Empty(cLocMerc) .And. !Empty(cImgPlMerc) .And. ((dToS(DDATABASE) >= "20160101" .And. CPAISLOC $ "ARG-PAR-VEN-URU") .Or. (dToS(DDATABASE) >= "20170101" .And. CPAISLOC = "BRA"))
		oPanel:addShape(	"id="+RetId()+";type=8;left="+Str(nPlacaX)+";top="+Str(nPlacaY)+";width=85;height=38;image-file="+;
								cImgPlMerc+";can-move=0;can-deform=0;can-mark=0;is-container=1")
		oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nPlacaX+38)+";top="+Str(nPlacaY+nPlacaZ)+";width=175;height=60;text="+;
								cLocMerc+";font=FE Engschrift,"+cTamFont+",1,0,3;pen-color=#FFFFFF;pen-width=1;is-container=0")
		oPanel:addShape( "id="+RetId()+";type=8;left="+Str(nPlacaX+215)+";top="+Str(nPlacaY+11)+";width=85;height=38;image-file="+;
								cImgBand+";can-move=0;can-deform=0;can-mark=0;is-container=1")
		oPanel:addShape( "id="+RetId()+";type=8;left="+Str(nPlacaX+11)+";top="+Str(nPlacaY+10)+";width=85;height=38;image-file="+;
								cLogMerc+";can-move=0;can-deform=0;can-mark=0;is-container=1")
		oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nPlacaX+10)+";top="+Str(nPlacaY+34)+";width=230;height=50;text="+;
								cPlaca+";font=FE Engschrift,30,1,0,3;pen-color=#000000;pen-width=1;is-container=0")

	//Forma antiga de exibição de placa
	ElseIf !Empty(cPlaca) .And. ((dToS(DDATABASE) <= "20160101" .And. CPAISLOC $ "ARG-PAR-VEN-URU") .Or. (dToS(DDATABASE) <= "20170101" .And. CPAISLOC = "BRA"))
		oPanel:addShape(	"id="+RetId()+";type=8;left="+Str(nPlacaX)+";top="+Str(nPlacaY)+";width=85;height=38;image-file="+;
								cImgPlaca+";can-move=0;can-deform=0;can-mark=0;is-container=1")
		oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nPlacaX+38)+";top="+Str(nPlacaY+17)+";width=175;height=60;text="+;
								cLocal+";font=Verdana,10,1,0,3;pen-color=#000000;pen-width=1;is-container=0")
		oPanel:addShape(	"id="+RetId()+";type=7;left="+Str(nPlacaX+10)+";top="+Str(nPlacaY+34)+";width=230;height=50;text="+;
								cPlaca+";font=Verdana,23,1,0,3;pen-color=#000000;pen-width=1;is-container=0")
	ElseIf  !Empty(cPlaca) .And. !Empty(cImgPlRuss) .And. CPAISLOC = "URS"

		//Placa modelo Rússia
		oPanel:addShape("id="+RetId()+";type=8;left="+Str(nPlacaX)+";top="+;
						Str(nPlacaY)+";width=85;height=38;image-file="+cImgPlRuss+;
						";can-move=0;can-deform=0;can-mark=0;is-container=1")
		//Localização
		oPanel:addShape("id="+RetId()+";type=7;left="+Str(nPlacaX+107)+";top="+;
						Str(nPlacaY+58)+";width=175;height=60;text="+cLocRuss+;
						";font=FE Engschrift,14,1,0,3;pen-color=#000000;"+;
						"pen-width=1;is-container=0")
		//Números referente a macroregião na Rússia (a ser estudado)
		oPanel:addShape("id="+RetId()+";type=7;left="+Str(nPlacaX+155)+";top="+;
						Str(nPlacaY+25)+";width=85;height=38;text="+'105'+;
						";font=Arial,17,1,0,3;pen-width=1;is-container=0")
		//Bandeira
		oPanel:addShape("id="+RetId()+";type=8;left="+Str(nPlacaX+217)+";top="+;
						Str(nPlacaY+61)+";width=85;height=38;image-file="+cImgBand+;
						";can-move=0;can-deform=0;can-mark=0;is-container=1")
		//Placa do bem
		oPanel:addShape("id="+RetId()+";type=7;left="+Str(nPlacaX-25)+";top="+;
						Str(nPlacaY+30)+";width=230;height=50;text="+cPlaca+;
						";font=FE Engschrift,23,1,0,3;pen-color=#000000;"+;
						"pen-width=1;is-container=0")

	EndIf

	//-----------------------
	//Container com Gradient
	//-----------------------
	oPanel:addShape(	"id="+RetId()+";type=1;left=0;top="+Str(nAltura-10)+";width="+Str(nLargura)+";height=5;"+;
							"gradient=1,0,0,0,180,1.0,#849CB6,0.1,#849CB6,0.1,#849CB6;pen-width=0;pen-color=#849CB6;can-move=0;can-mark=0;is-container=1;")

	oPanel:addShape(	"id="+RetId()+";type=1;left=0;top="+Str(nAltura-5)+";width="+Str(nLargura)+";height=5;"+;
							"gradient=1,0,0,0,180,1.0,#849CB6,0.1,#EAEAEA,0.0,#849CB6;pen-width=0;pen-color=#FFFFFF;can-move=0;can-mark=0;is-container=1;")
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} CreateMenu
Carrega objetos do menu

@param oPanel Objeto pai
@param nLargura Largura disponível para o menu
@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function CreateMenu(oPanel,nLargura)

	Local oFont := TFont():New('Verdana',,14,,.T.)

	//Container com Gradient
	oPanel:addShape(	"id="+RetId()+";type=1;left=0;top=0;width="+AllTrim(Str(nLargura))+";height="+Str(nAltura)+";"+;
							"gradient=1,10,0,229,0,0.0,#C6C6C6,0.1,#EAEAEA,1.0,#EAEAEA;pen-width=0;"+;
							"pen-color=#000000;can-move=0;can-mark=0;is-container=1;")

	//---------------------------------------------------
	// Divisão entre o TPaintPanel do centro e do rodape
	//---------------------------------------------------
	oPanel:addShape(	"id="+RetId()+";type=1;left="+AllTrim(Str(nLargura-6))+";top=0;width=5;height="+Str(nAltura)+";gradient=1,10,0,229,0,0.0,#8D949E;pen-width=0;"+;
							"pen-color=#000000;can-move=0;can-mark=0;is-container=0;")


	nH := Int(((oPanel:nClientHeight - 435) / 20)/4)

	//---------------------------
	// Dados do Pneu selecionado
	//---------------------------
	TSay():New(05 + nH,05,{||STR0001},oPanel,,oFont,,,,.T.,CLR_BLACK,CLR_BLACK,50,20) //'Rodados'

	TSay():New(15 + nH*2,05,{|| STR0104},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20) //'Código Pneu'
    @ 14 + nH*2,40  MSget oPne Var cPneuAtu Picture "@!" Valid DispPneu() Of oPanel SIZE 065,08 HASBUTTON When lRot750 F3 "NGPNEU" PIXEL
    oPne:bHelp := {|| ShowHelpCpo( STR0148,;
                    { STR0149 },2,; // "Selecione a empresa da Parte Diária."
                    { STR0150 },2 ) } // "Deve estar cadastrada no sistema para utilização."

	TSay():New(26 + nH*3,05,{|| STR0105},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)//'Eixo'
	TGet():New(25 + nH*3,40,{||cEixo995},oPanel,065,008,"@!",,0,,,.F.,,.T.,,.F.,{|| .F.},.F.,.F.,,.F.,.F.,,"cEixo995")

	TSay():New(37 + nH*4,05,{|| STR0106},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)//'Posição'
	TGet():New(36 + nH*4,40,{||cPosicao},oPanel,065,008,"@!",,0,,,.F.,,.T.,,.F.,{|| .F.},.F.,.F.,,.F.,.F.,,"cPosicao")

	TSay():New(48 + nH*5,05,{|| STR0107},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)//'Medida'
	TGet():New(47 + nH*5,40,{||cMedida},oPanel,065,008,"@!",,0,,,.F.,,.T.,,.F.,{|| .F.},.F.,.F.,,.F.,.F.,,"cMedida")

	TSay():New(59 + nH*6,05,{|| STR0108},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)//'Desenho'
	TGet():New(58 + nH*6,40,{||cDesenho},oPanel,065,008,"@!",,0,,,.F.,,.T.,,.F.,{|| .F.},.F.,.F.,,.F.,.F.,,"cDesenho")


	//-----------------------------
	// OBJETOS DA MEDIÇÃO DE SULCO
	//-----------------------------
	//-------------------------------------------
	// Dados da última medição feita para o pneu
	//-------------------------------------------
	aAdd(aObjMed,TSay():New(75 + nH*7,05,{|| STR0109},oPanel,,oFont,,,,.T.,CLR_BLACK,CLR_BLACK,80,50))//'Medição Anterior'

	aAdd(aObjMed,TSay():New(85 + nH*8,05,{|| STR0110},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)) //'Sulco Anterior'
	aAdd(aObjMed,TGet():New(84 + nH*8,55,{||nSulcoAtu},oPanel,050,008,"@E 999.99",,0,,,.F.,,.T.,,.T.,{|| .F.},.F.,.F.,,.F.,.F.,,"nSulcoAtu",,,,.T.))

	aAdd(aObjMed,TSay():New(96 + nH*9,05,{|| STR0111},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)) //'Data medição'
	aAdd(aObjMed,TGet():New(95 + nH*9,55,{||dDtSulco},oPanel,050,008,"99/99/9999",,0,,,.F.,,.T.,,.T.,{|| .F.},.F.,.F.,,.F.,.F.,,"dDtSulco",,,,.T.))

	aAdd(aObjMed,TSay():New(107 + nH*10,05,{|| STR0112},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20))//'Hora medição'
	aAdd(aObjMed,TGet():New(106 + nH*10,55,{||cHrSulco},oPanel,020,008,"@!",,0,,,.F.,,.T.,,.T.,{|| .F.},.F.,.F.,,.F.,.F.,,"cHrSulco",,,,.T.))

	//-----------------------------------
	// Dados da nova digitação de medida
	//-----------------------------------
	aAdd(aObjMed,TSay():New(120 + nH*11,05,{|| STR0113},oPanel,,oFont,,,,.T.,CLR_BLACK,CLR_BLACK,100,50)) //'Informar nova medição'

	aAdd(aObjMed,TSay():New(130 + nH*12,05,{|| STR0114},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20))//'1ª Medição'
	@ 129 + nH*12,55  MSget oSulco1 Var M->TTP_SULCO1 Picture "@E 999.99" Valid Positivo(M->TTP_SULCO1) Of oPanel SIZE 050,08 HASBUTTON When INCLUI995 .OR. ALTERA995 PIXEL
	aAdd(aObjMed,oSulco1)

	aAdd(aObjMed,TSay():New(141 + nH*13,05,{|| STR0115},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)) //'2ª Medição'
	@ 140 + nH*13,55  MSget oAux Var M->TTP_SULCO2 Picture "@E 999.99" Valid Positivo(M->TTP_SULCO2) Of oPanel SIZE 050,08 HASBUTTON When INCLUI995 .OR. ALTERA995 PIXEL
	aAdd(aObjMed,oAux)

	aAdd(aObjMed,TSay():New(152 + nH*14,05,{|| STR0116},oPanel,,,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)) //'3ª Medição'
	@ 151 + nH*14,55  MSget oAux Var M->TTP_SULCO3 Picture "@E 999.99" Valid Positivo(M->TTP_SULCO3) Of oPanel SIZE 050,08 HASBUTTON When INCLUI995 .OR. ALTERA995 PIXEL
	aAdd(aObjMed,oAux)

	//-----------------------
	// OBJETOS DA CALIBRAGEM
	//-----------------------
	//------------------------------------------
	// Dados do máximo e mínimo para calibragem
	//------------------------------------------
	aAdd(aObjCal,TSay():New(75 + nH*7,05,{|| STR0117},oPanel,,oFont,,,,.T.,CLR_BLACK,CLR_BLACK,50,50)) //'Limites'

	aAdd(aObjCal,TSay():New(90 + nH*8,25,{|| STR0118},oPanel,,oFont,,,,.T.,CLR_RED,CLR_BLACK,50,20)) //'Mínimo'
	aAdd(aObjCal,TGet():New(98 + nH*8,30,{||nCalMin},oPanel,010,008,"@E 999",,0,,,.F.,,.T.,,.T.,{|| .F.},.F.,.F.,,.F.,.F.,,"nCalMin",,,,.T.))

	aAdd(aObjCal,TSay():New(90 + nH*8,59,{|| STR0119},oPanel,,oFont,,,,.T.,CLR_GREEN,CLR_BLACK,50,20)) //'Máximo'
	aAdd(aObjCal,TGet():New(98 + nH*8,66,{||nCalMax},oPanel,010,008,"@E 999",,0,,,.F.,,.T.,,.T.,{|| .F.},.F.,.F.,,.F.,.F.,,"nCalMax",,,,.T.))


	//-----------------------------------
	// Dados da nova digitação de medida
	//-----------------------------------
	aAdd(aObjCal,TSay():New(120 + nH*11,05,{|| STR0120},oPanel,,oFont,,,,.T.,CLR_BLACK,CLR_BLACK,100,50)) //'Informar calibragem'

	aAdd(aObjCal,TSay():New(135 + nH*12,25,{|| STR0121},oPanel,,oFont,,,,.T.,CLR_BLACK,CLR_BLACK,50,20)) //'Aferida'
	@ 143 + nH*12,30  MSget oCalAfe Var M->TTP_CALATU Picture "@E 999" Valid Positivo(M->TTP_CALATU) Of oPanel SIZE 10,08 HASBUTTON When INCLUI995 .OR. ALTERA995 PIXEL
	aAdd(aObjCal,oCalAfe)

	aAdd(aObjCal,TSay():New(135 + nH*12,58,{|| STR0122},oPanel,,oFont,,,,.T.,CLR_GREEN,CLR_BLACK,50,20)) //'Realizada'
	@ 143 + nH*12,66  MSget oAux Var M->TTP_CALREA Picture "@E 999" Valid ValidCalib(M->TTP_CALATU,M->TTP_CALREA,nCalMin,nCalMax) Of oPanel SIZE 10,08 HASBUTTON When INCLUI995 .OR. ALTERA995 PIXEL
	aAdd(aObjCal,oAux)

	//---------------------------------------------
	// Inclui botões de Problema, Avançar e Voltar
	//---------------------------------------------
	oNext := TButton():New( 165 + nH*17, 055, STR0089,oPanel,{|| ChangeTire(nFocus+1)},40,10,,,.F.,.T.,.F.,,.F.,,,.F. ) //"Avançar >"
	TButton():New( 165 + nH*17, 015, STR0090,oPanel,{|| ChangeTire(nFocus-1)},40,10,,,.F.,.T.,.F.,,.F.,,,.F. ) //"< Voltar"
	TButton():New( 175 + nH*18, 035, STR0091,oPanel,{|| Problem(nFocus)},40,10,,,.F.,.T.,.F.,,.F.,,,.F. ) //"Problema"

	//------------------------------------
	// Da Hide e Show nos objetos do menu
	//------------------------------------
    If !lRot750
        SetVisible(aObjMed,.F.) // Esconde objetos de Medição
        SetVisible(aObjCal,.T.) // Mostra objetos de Calibração
    Else
        SetVisible(aObjMed,.T.) // Esconde objetos de Medição
        SetVisible(aObjCal,.F.) // Mostra objetos de Calibração
    EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} Problem
Exibe janela para se informar o problema com o pneu

@param nFocus Posicao atual na array aBEMLOC
@author Vitor Emanuel Batista
@since 09/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function Problem(nFocus)
	Local oDlg, oPnlPai
	Local cAux      := ""
	Local lTudOk    := .F.
	Local cPneu     := If(!lRot750,aBEMLOC[nFocus][__CODBEM__],If(!Empty(aBEMLOC[nFocus][__CODBEM__]),aBEMLOC[nFocus][__CODBEM__],""))
	Local nPos      := aScan(aProblem,{|x| x[1] == cPneu})

	Private M->TTP_PROBLE := Space(6)

    If Empty(cPneu)
        MsgStop(STR0134)
        Return .F.
    EndIf

	If nPos > 0
		M->TTP_PROBLE := aProblem[nPos][2]
	EndIf

	dbSelectArea("ST8")
	dbSetOrder(1)
	dbSeek(xFilial("ST8")+M->TTP_PROBLE+"P")

	DEFINE MsDIALOG oDlg TITLE STR0092 + AllTrim(cPneu) From 0,0 To 150,570 COLOR CLR_BLACK,CLR_WHITE Pixel //"Problema com o Pneu "

		oPnlPai := TPanel():New(00,00,,oDlg,,,,,,370,110,.F.,.F.)
			oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

			TSay():New(10,10,{|| STR0091},oPnlPai,,/*oFont*/,,,,.T.,CLR_HBLUE,CLR_BLACK,50,20) //'Problema'
			@ 08,45  MSget M->TTP_PROBLE Picture "@!" Valid ExistCpo("ST8",M->TTP_PROBLE+"P") Of oPnlPai F3 "ST8" SIZE 40,08 HASBUTTON When INCLUI995 .OR. ALTERA995 PIXEL
			@ -100,-110  MSget cAux Picture "@!" Of oPnlPai SIZE 01,01 PIXEL

			TSay():New(25,10,{|| STR0093},oPnlPai,,/*oFont*/,,,,.T.,CLR_BLACK,CLR_BLACK,50,20) //'Descrição'
			@ 23,45  MSget ST8->T8_NOME Picture "@!" Of oPnlPai SIZE 120,08 HASBUTTON When .F. PIXEL
	ACTIVATE MsDIALOG oDlg On Init EnchoiceBar(oDlg,{|| lTudOk := .T.,oDlg:End() },{|| lTudOk := .F.,oDlg:End()}) Centered

	If lTudOk
		If nPos == 0
			aAdd(aProblem,{cPneu,M->TTP_PROBLE})
		Else
			aProblem[nPos][2] := M->TTP_PROBLE
		EndIf
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} Save
Salva as informações de Calibragem e Medição

@param nOpca, Numerico, Opção de manipulação do registro.

@author Vitor Emanuel Batista
@since 09/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function Save(nOpca)

	Local cBanda, cDesenho
	Local nX, nProblem
	Local lInclui

	//----------------------------
	// Confirma número sequêncial
	//----------------------------
	TTO->(ConfirmSX8())

	//-----------------------------
	// Cadastra informações da TTO
	//-----------------------------
	dbSelectArea("TTO")
	dbSetOrder(1)
	lInclui := !dbSeek(xFilial("TTO")+cNum995)
	RecLock("TTO",lInclui)
	TTO->TTO_FILIAL := xFilial("TTO")
	TTO->TTO_NUMCAL := cNum995
	TTO->TTO_DTCALI := dData995
	TTO->TTO_HRCALI := cHora995
	TTO->TTO_EXECUT := cExecut995
	TTO->TTO_BEMPAI := cBemPai995
	MsUnLock()

	If ExistBlock("MNTA9952")
		ExecBlock("MNTA9952",.F.,.F.,{xFilial("TTO")+cNum995, nOpca})
	EndIf

	//-----------------------------
	// Cadastra informações da TTP
	//-----------------------------
	For nX := 1 To Len(aBEMLOC)
		dbSelectArea("TTP")
		dbSetOrder(1)
		lInclui := !dbSeek(xFilial("TTP")+cNum995+aBEMLOC[nX][__CODBEM__])
		RecLock("TTP",lInclui)
		TTP->TTP_FILIAL := xFilial("TTP")
		TTP->TTP_NUMCAL := cNum995
		TTP->TTP_PNEU   := aBEMLOC[nX][__CODPNEU__]
		TTP->TTP_CODLOC := aBEMLOC[nX][__LOCALIZ__]
		TTP->TTP_CALATU := aCalibra[nX][__nCalAfe__]
		TTP->TTP_CALREA := aCalibra[nX][__nCalRea__]
		TTP->TTP_SULCO1 := aMedicao[nX][__nSulco1__]
		TTP->TTP_SULCO2 := aMedicao[nX][__nSulco2__]
		TTP->TTP_SULCO3 := aMedicao[nX][__nSulco3__]

		nLoc := aScan(aPNEUSINI,{|x| x[__LOCALIZ__] == TTP->TTP_CODLOC})

		If nLoc > 0
		    Aadd(aINSPE, {aPNEUSINI[nLoc][__EIXO__], TTP->TTP_PNEU, TTP->TTP_CODLOC, TTP->TTP_SULCO1, TTP->TTP_SULCO2, TTP->TTP_SULCO3})
		EndIf

		If (nProblem := aScan(aProblem,{|x| x[1] == TTP->TTP_PNEU})) > 0
			TTP->TTP_PROBLE := aProblem[nProblem][2]
		EndIf
		MsUnLock()

		//--------------------------------------------------
		// Cadastra informações do Histórico de Sulco (TQV)
		//--------------------------------------------------
		dbSelectArea("TQV")
		dbSetOrder(1)
		dbSeek(xFilial("TQV")+aMedicao[nX][__cPneu__]+DTOS(dData995)+cHora995,.T.)
		dbSkip(-1)
		cBanda   := TQV->TQV_BANDA
		cDesenho := TQV->TQV_DESENH
		lInclui := !dbSeek(xFilial("TQV")+aMedicao[nX][__cPneu__]+DTOS(dData995)+cHora995)
		aSulco := aSort({aMedicao[nX][__nSulco1__],aMedicao[nX][__nSulco2__],aMedicao[nX][__nSulco3__]})
		aSulco[1] := If(aSulco[1] == 0, If(aSulco[2] == 0,aSulco[3],aSulco[2]),aSulco[1])
		If aSulco[1] > 0
			RecLock("TQV",lInclui)
			TQV->TQV_FILIAL := xFilial("TQV")
			TQV->TQV_CODBEM := aMedicao[nX][__cPneu__]
			TQV->TQV_DTMEDI := dData995
			TQV->TQV_HRMEDI := cHora995
			TQV->TQV_BANDA  := cBanda
			TQV->TQV_DESENH := cDesenho
			TQV->TQV_SULCO  := aSulco[1]
			MsUnLock()

			dbSelectArea("TQS")
			dbSetOrder(1)
			dbSeek(xFilial("TQS")+aBEMLOC[nX][__CODBEM__])
			If !lRot750 .And. DTOS(TQS->TQS_DTMEAT)+TQS->TQS_HRMEAT <= DTOS(dData995)+cHora995 .And. TQS->TQS_SULCAT != aSulco[1]
				RecLock("TQS",.F.)
				TQS->TQS_DTMEAT := dData995
				TQS->TQS_HRMEAT := cHora995
				TQS->TQS_SULCAT := aSulco[1]
				MsUnLock()
			EndIf
		ElseIf !lInclui
			//------------------------
			// Exclui registro da TQV
			//------------------------
			RecLock("TQV",.F.)
			dbDelete()
			MsUnLock()

			dbSkip(-1)
			dbSelectArea("TQS")
			dbSetOrder(1)
			dbSeek(xFilial("TQS")+TTP->TTP_PNEU)

			//-------------------------------------------
			// Altera TQS de acordo com a última medição
			//-------------------------------------------
			If DTOS(TQS->TQS_DTMEAT)+TQS->TQS_HRMEAT == DTOS(dData995)+cHora995
				RecLock("TQS",.F.)
				TQS->TQS_DTMEAT := TQV->TQV_DTMEDI
				TQS->TQS_HRMEAT := TQV->TQV_HRMEDI
				TQS->TQS_SULCAT := TQV->TQV_SULCO
				MsUnLock()
			EndIf

		EndIf
	Next nX

	//---------------------
	// Atualiza Contador 1
	//---------------------
	If lTEMCONT .And. !Empty(nPOSCONT) .And. Empty(nPOSOLD1)
		NGTRETCON(cBemPai995,dData995,nPOSCONT,cHora995,1,,.T.)
	EndIf

	//---------------------
	// Atualiza Contador 2
	//---------------------
	If lTEMCON2 .And. !Empty(nPOSCON2) .And. Empty(nPOSOLD2)
		NGTRETCON(cBemPai995,dData995,nPOSCON2,cHora995,2,,.T.)
	EndIf

	If lRot750
		Mnt750Ok(cHora995, dData995, dDtDig, nPOSCONT, cNum995, aINSPE)
		MNT750INC()
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} LoadTire
Carrega variaveis utilizadas na Calibragem e Medição de Sulco

@param nFocus Posicao atual na array aBEMLOC
@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function LoadTire(nFocus)

	Local nPos

    If !lRot750
        cPneuAtu := aBEMLOC[nFocus][__CODBEM__]
        nPos := aScan(aPNEUSINI,{|x| x[__CODBEM__] == cPneuAtu})
    Else
        cPneuAtu := aPNEUSFIM[nFocus][__CODBEM__]
        nPos := nFocus
    EndIf

   If !Empty(cPneuAtu)
    	//----------------------------
    	// Código do pneu selecionado
    	//----------------------------

       	dbSelectArea("ST9")
       	dbSetOrder(1)
    	dbSeek(xFilial("ST9")+cPneuAtu)

    	cNoEix   := NGSEEK('TQ1',cCodFami+cTipMod+Str(aPNEUSINI[nPos][__EIXO__],3),1,'TQ1->TQ1_EIXO')
    	cNoEix   := If(Upper(cNoEix) = Upper("RESERVA"),'R',cValToChar(aPNEUSINI[nPos][__EIXO__]))
    	cEixo995 := If(AllTrim(cNoEix) == "R",STR0095,AllTrim(cNoEix) + STR0094) //"RESERVA"##"º EIXO"
    	cPosicao := NGSEEK("TPS",aPNEUSINI[nPos][__LOCALIZ__],1,"TPS->TPS_NOME")
    	cMedida  := NGSEEK("TQT",aPNEUSINI[nPos][__MEDIDA__],1,"TQT->TQT_DESMED")

		//---------------------------------------------------------
		// Limites de calibragem - Modelo x Medida quando possuir
		//---------------------------------------------------------
    	dbSelectArea("TQX")
    	dbSetOrder(1)
    	If dbSeek(xFilial("TQX")+aPNEUSINI[nPos][__MEDIDA__]+ST9->T9_TIPMOD)
    		nCalMin  := TQX->TQX_CALMIN
    		nCalMax  := TQX->TQX_CALMAX
		Else
    		nCalMin  := 0
    		nCalMax  := 0
		EndIf

    	dbSelectArea("TQV")
    	dbSetOrder(1)
    	If dbSeek(xFilial("TQV")+cPneuAtu+DTOS(dData995)+cHora995) .Or. !dbSeek(xFilial("TQV")+cPneuAtu+DTOS(dData995)+cHora995,.T.)
    		dbSkip(-1)
    	EndIf

    	cDesenho := TQV->TQV_DESENH
    	nSulcoAtu:= TQV->TQV_SULCO
    	dDtSulco := TQV->TQV_DTMEDI
    	cHrSulco := TQV->TQV_HRMEDI

    	//--------------------------------
    	// Carrega informações da Medição
    	//--------------------------------
    	If (nPos := aScan(aMedicao,{|x| x[__cPneu__] == cPneuAtu})) >0
    		M->TTP_SULCO1  := aMedicao[nPos][__nSulco1__]
    		M->TTP_SULCO2  := aMedicao[nPos][__nSulco2__]
    		M->TTP_SULCO3  := aMedicao[nPos][__nSulco3__]
    	Else
    		M->TTP_SULCO1  := 0
    		M->TTP_SULCO2  := 0
    		M->TTP_SULCO3  := 0
    	EndIf

    	//-----------------------------------
    	// Carrega informações da Calibração
    	//-----------------------------------
    	If (nPos := aScan(aCalibra,{|x| x[__cPneu__] == cPneuAtu})) >0
    		M->TTP_CALATU  := aCalibra[nPos][__nCalAfe__]
    		M->TTP_CALREA  := aCalibra[nPos][__nCalRea__]
    	Else
    		M->TTP_CALATU  := 0
    		M->TTP_CALREA  := 0
    	EndIf
    Else
        cEixo995 := ""
        cPosicao := ""
        cMedida  := ""
        cDesenho := ""
        nCalMin  := 0
        nCalMax  := 0
        nSulcoAtu:= 0
        dDtSulco := CtoD("  /  /  ")
        cHrSulco := ""
        M->TTP_SULCO1  := 0
        M->TTP_SULCO2  := 0
        M->TTP_SULCO3  := 0
        M->TTP_CALATU  := 0
        M->TTP_CALREA  := 0
    EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} SaveArray
Salva informacoes nas arrays de controle de Medição e Calibração

@param nFocus Posicao atual na array aBEMLOC
@author Vitor Emanuel Batista
@since 06/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function SaveArray(nFocus)

    Local cPneu := If(!lRot750,aBEMLOC[nFocus][__CODBEM__],cPneuAtu)
    Local nPos  := If(!lRot750,aScan(aMedicao,{|x| x[__cPneu__] == cPneu}),nFocus)

    If !Empty(cPneuAtu) .And. lRot750
        aBEMLOC[nFocus][__CODBEM__] := cPneuAtu
    EndIf

	//-------------------------------------------
	// Cria registro na aMedicao se já não houver
	//-------------------------------------------
	If nPos == 0
		aAdd(aMedicao,Array(4))
		nPos := Len(aMedicao)
	EndIf

	aMedicao[nPos][__cPneu__] := cPneu
	aMedicao[nPos][__nSulco1__] := M->TTP_SULCO1
	aMedicao[nPos][__nSulco2__] := M->TTP_SULCO2
	aMedicao[nPos][__nSulco3__] := M->TTP_SULCO3

	nPos := If(!lRot750,aScan(aCalibra,{|x| x[__cPneu__] == cPneu}),nFocus)

	//--------------------------------------------
	// Cria registro na aCalibra se já não houver
	//--------------------------------------------
	If nPos == 0
		aAdd(aCalibra,Array(3))
		nPos := Len(aCalibra)
	EndIf

	aCalibra[nPos][__cPneu__]   := cPneu
	aCalibra[nPos][__nCalAfe__] := M->TTP_CALATU
	aCalibra[nPos][__nCalRea__] := M->TTP_CALREA

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} InitTire
Inicializa informações do primeiro pneu

@author Vitor Emanuel Batista
@since 06/05/2011
@version MP10
@return Lógico que indica se será aberto ou não a rotina
/*/
//---------------------------------------------------------------------
Static Function InitTire(oDlg)
	Local nShape
	Local nX

	If !l995Auto
		aShapeAux := aClone(aShape)//Guarda a formação original do veículo
	EndIf

	If Len(aBEMLOC) == 0
		If !l995Auto
			If !lRot750
				SetVisible(aObjMed,.F.) // Esconde objetos de Medição
				SetVisible(aObjCal,.T.) // Mostra objetos de Calibração
			Else
				SetVisible(aObjMed,.T.) // Esconde objetos de Medição
				SetVisible(aObjCal,.F.) // Mostra objetos de Calibração
			EndIf
		EndIf
		Help(' ',1,STR0070 ,,STR0096+AllTrim(cBemPai995)+STR0097,2,1,,,,,, )
		Return .F.
	EndIf

	//---------------------------------------------------
	// Carrega informações das arrays aMedicao e aCalibra
	//---------------------------------------------------
	For nX := 1 To Len(aBEMLOC)
		dbSelectArea("TTP")
		dbSetOrder(1)
		If dbSeek(xFilial("TTP")+cNum995+aBEMLOC[nX][__CODBEM__])
			aAdd(aMedicao,{TTP->TTP_PNEU,TTP->TTP_SULCO1,TTP->TTP_SULCO2,TTP->TTP_SULCO3})
			aAdd(aCalibra,{TTP->TTP_PNEU,TTP->TTP_CALATU,TTP->TTP_CALREA})
			aAdd(aProblem,{TTP->TTP_PNEU,TTP->TTP_PROBLE})
		Else
			aAdd(aMedicao,{aBEMLOC[nX][__CODBEM__],0,0,0})
			aAdd(aCalibra,{aBEMLOC[nX][__CODBEM__],0,0})
		EndIf
	Next nX

	//-------------------------------
	// Posição atual na Array aShape
	//-------------------------------
	nFocus := 1
	nShape := GetIdShape(nFocus)

	If !l995Auto
		//---------------------------------
		// Coloca a imagem do pneu em foco
		//---------------------------------
		NGClickPneu(oTCentro,nShape,.T.)

		//----------------------------
		// Código do pneu selecionado
		//----------------------------
		cPneuAtu := aShape[nShape][__CODBEM__]

		//-----------------------------
		// Carrega informações do pneu
		//-----------------------------
		LoadTire(nFocus)

		//------------------------------------
		// Da Hide e Show nos objetos do menu
		//------------------------------------
		If !lRot750
			SetVisible(aObjMed,.F.) // Esconde objetos de Medição
			SetVisible(aObjCal,.T.) // Mostra objetos de Calibração
		Else
			SetVisible(aObjMed,.T.) // Esconde objetos de Medição
			SetVisible(aObjCal,.F.) // Mostra objetos de Calibração
		EndIf
		//----------------------------------------------------------------
		// Altera Foco para o botão para atualização dos objetos em tela
		//----------------------------------------------------------------
		oNext:SetFocus()

		//------------------------------------
		// Seta foco para os primeiros campos
		//------------------------------------

		If oCalAfe:lVisible
			oCalAfe:SetFocus()
		Else
			oSulco1:SetFocus()
		EndIf

		If lRot750
			oPne:SetFocus()
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} GetIdShape
Retorna o id do shape de acordo com a posição da array do pneu

@param nFocus Indica a posição do pneu
@author Vitor Emanuel Batista
@since 06/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function GetIdShape(nFocus)
    Local nShape := 0

    If lRot750
        nShape := aScan(aShape,{|aShape| aShape[__INFO__][2] == aPNEUSFIM[nFocus][__LOCALIZ__]})
    Else
        nShape := aScan(aShape,{|aShape| aShape[__CODBEM__] == aBEMLOC[nFocus][__CODBEM__]})
    EndIf

Return nShape

//---------------------------------------------------------------------
/*/{Protheus.doc} ChangeTire
Troca de pneu (próximo ou anterior), carregando as informações e o foco
do pneu

@param [nNext], numerico, indica posição do próximo pneu selecionado
@param [nSave], numerico, indica a posição do pneu que está posicionado para validar
@author Vitor Emanuel Batista
@since 06/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ChangeTire( nNext, nSave )

	Local nShape := 0

	Default nSave := nFocus

	If INCLUI .Or. ALTERA
		//------------------------------------------------
		// Valida valor do menor suco de acordo com a TQV
		//------------------------------------------------
		If ( Empty(M->TTP_CALATU) .And. Empty(M->TTP_CALREA) ) .Or. l995Auto
			If !ValidSulco(cPneuAtu,{M->TTP_SULCO1,M->TTP_SULCO2,M->TTP_SULCO3},dData995,cHora995)
				Return .F.
			EndIf
		EndIf

		//------------------------------
		// Valida valores da calibragem
		//------------------------------
		If !ValidCalib(M->TTP_CALATU,M->TTP_CALREA,nCalMin,nCalMax,cPneuAtu)
			Return .F.
		EndIf
	EndIf

	//---------------------------------
	// Salva informações do pneu atual
	//---------------------------------
	SaveArray( nSave )

	If l995Auto
		Return .T.
	EndIf

	nShape := GetIdShape(nFocus)

	//-------------------------------------
	// Altera imagem de foco do pneu atual
	//-------------------------------------
	NGClickPneu(oTCentro,nShape,.F.,.F.)

	If nNext > Len(aBEMLOC)
		nNext := 1
	ElseIf nNext < 1
		nNext := Len(aBEMLOC)
	EndIf
	nFocus := nNext

	nShape := GetIdShape(nFocus)


	//-------------------------------------
	// Carrega informações do próximo pneu
	//-------------------------------------
	LoadTire(nFocus)

    //---------------------------------------
    // Altera imagem de foco do próximo pneu
    //---------------------------------------
    NGClickPneu(oTCentro,nShape,.T.,.F.)

	//----------------------------------------------------------------
	// Altera Foco para o botão para atualização dos objetos em tela
	//----------------------------------------------------------------
	oNext:SetFocus()
	oNext:NextControl():SetFocus()

	//------------------------------------
	// Seta foco para os primeiros campos
	//------------------------------------
	If oCalAfe:lVisible
		oCalAfe:SetFocus()
	Else
		oSulco1:SetFocus()
	EndIf

    If lRot750
        oPne:SetFocus()
    EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SetVisible
Executa Hide/Show para a array de objetos

@param aObject Array contendo objetos
@param lVisible Indica se objetos serao mostrados ou nao
@author Vitor Emanuel Batista
@since 06/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function SetVisible(aObject,lVisible)
	Local nX

	Default lVisible := .T.

	For nX := 1 To Len(aObject)
		If lVisible
			aObject[nX]:Show()
		Else
			aObject[nX]:Hide()
		EndIf
	Next nX

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} CreateCenter
Cria todos os objetos do centro do programa

@param oPanel Objeto pai
@param nAltura Altura disponível para o Centro
@param nLargura Largura disponível para o Centro
@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function CreateCenter(oPanel,nAltura,nLargura)

	Local nWidth  := Val(aEstruturas[nPosEstru][2])
	Local nHeight := Val(aEstruturas[nPosEstru][3])
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Posicao X e Y de toda a estrutura e Pneus³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Local nTop  := (nAltura - nHeight/2)
	Local nLeft := (nLargura - nWidth)/2

	//Se der valores negativos, zera
	nTop  := If(nTop < 0,0,nTop)
	nLeft := If(nLeft < 0,0,nLeft)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Cria Container³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oPanel:addShape(	"id="+RetId()+";type=1;left=0;top=0;width="+Str(If(nLargura > nWidth,nLargura,nWidth)+10)+";height="+Str(If(nAltura*2 > nHeight,nAltura*2,nHeight))+";"+;
							"gradient=1,0,0,0,0,0.0,#FFFFFF;pen-width=0;pen-color=#FFFFFF;can-move=0;can-mark=0;is-container=1;")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Cria Estrutura³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oPanel:addShape(	"id=12;type=8;left="+Str(nLeft)+";top="+Str(nTop)+";width="+Str(nWidth)+";height="+Str(nHeight)+;
							";image-file="+cImgEstru+";can-move=0;can-deform=0;can-mark=0;is-container=1")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Cria Pneus    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	MNT995INPN(oPanel, nAltura, nLargura)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} CreateAxle
Cria todos os objetos do centro do programa

@param oPanel Objeto pai
@param lStepe Indica que eixo sera de Stepes
@param nAtu Numero do eixo atual a ser criado
@param nTop Posicao Y inicial que pneu sera criado
@param nLeft Posicao X inicial que pneu sera criado
@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function CreateAxle(oTPanel,lStepe,nAtu,nTop,nLeft)

    Local cCodPneu     := ''
    Local cLocaliz     := ''
	Local cPneuFam     := ''
    Local cPneuX       := ''
	Local cPneuY       := ''
	Local nY           := 0
	Local nPos         := 0
	Local nEixo        := 0
	Local nEstru       := IIf( lStepe, 5, 4 ) // Posição
    Local lInvisible   := .F.
    Local lClick       := .F.
    Local lVisibleText := .T.
	Local lFound       := .T.

	For nY := 1 To Len(aEstruturas[nPosEstru][nEstru][nAtu])
		cCodType := aEstruturas[nPosEstru][nEstru][nAtu][nY][1]
		nPneuX := nLeft+Val(aEstruturas[nPosEstru][nEstru][nAtu][nY][2])
		nPneuY := nTop+Val(aEstruturas[nPosEstru][nEstru][nAtu][nY][3])
		cPneuX := cValToChar(nPneuX)
		cPneuY := cValToChar(nPneuY)
		nEixo  := nAtu
		cCodPneu := ""

		cLocaliz := &("TQ1->TQ1_LOCPN"+cValToChar(nY))
		cPneuFam := &("TQ1->TQ1_FAMIL"+cValToChar(nY))

		nPos     := aSCAN(aBEMLOC,{|aArray| aArray[1]+aArray[4] == cLocaliz+cPneuFam })

		//Adiciona na última posição o número do Eixo
		If lStepe
			aAdd(aEstruturas[nPosEstru][nEstru][nAtu][nY],0)
			nEixo := 0
		EndIf

		If nPos > 0
			aBEMLOC[nPos][6] := nEixo
			aBEMLOC[nPos][7] := nY
		EndIf

		If !lStepe .Or. (lStepe .And. TQ0->TQ0_STEPES != "N" .And. Val(TQ0->TQ0_STEPES) >= nY)
			cCodPneu := If(nPos>0,aBEMLOC[nPos][__CODBEM__],"")
			dbSelectArea("ST9")
			dbSetOrder(1)
			dbSeek(xFilial("ST9")+cCodPneu)
			dbSelectArea("TQS")
			dbSetOrder(1)
			dbSeek(xFilial("TQS")+cCodPneu)

			dbSelectArea( 'TQV' )
			dbSetOrder( 1 ) // TQV_FILIAL + TQV_CODBEM + TQV_DTMEDI + TQV_HRMEDI + TQV_BANDA
			lFound := dbSeek( FWxFilial( 'TQV' ) + cCodPneu + DToS( dData995 ) + cHora995 ) 

			If !l995Auto

				lInvisible := Empty(cCodPneu)

				nVidPne    := Val( IIf( lFound, TQV->TQV_BANDA, TQS->TQS_BANDAA ) )
				cToolTip   := If(!lInvisible, Trim(cCodPneu) + " - " + Trim(NGSEEK("ST9",cCodPneu,1,"ST9->T9_NOME")),"")
				cCodAux    := cCodPneu

				If lRot750
					nVidPne  := 1
					cToolTip := ""
					lVisibleText := .F.
				EndIf

				NGCriaPneu( oTPanel,;
						nPneuX,; //Posicao X
						nPneuY,; //Posicao Y
						cCodType,;
						cCodAux,; //Codigo que sera impresso no pneu
						nVidPne,; //Vida do pneu
						lStepe,; //Estepe
						lClick,; //Clicado
						lInvisible,; //Invisivel
						{ cPneuFam, cLocaliz },;//aEstruturas[nPosEstru][nEstru][nAtu][nY],;
						cToolTip,; //Tipo Bem
						lVisibleText) //Indica se apresentará o código do pneu
			EndIf

			aAdd(aPNEUSINI,Array(25))
			aTail(aPNEUSINI)[__LOCALIZ__] := cLocaliz			//[01] LOCALIZACAO
			aTail(aPNEUSINI)[__CODBEM__]  := cCodPneu			//[02] CODBEM - PNEU
			aTail(aPNEUSINI)[__CODFAMI__] := cPneuFam			//[03] CODIGO FAMILIA
			aTail(aPNEUSINI)[__EIXO__]    := Val(TQ1->TQ1_SEQREL)	//[04] EIXO
			aTail(aPNEUSINI)[__TIPEIXO__] := TQ1->TQ1_TIPEIX	//[05] TIPO DE EIXO
			aTail(aPNEUSINI)[__MEDIDA__]  := TQS->TQS_MEDIDA	//[06] MEDIDA
			aTail(aPNEUSINI)[__SULCO__]   := TQS->TQS_SULCAT	//[07] SULCO
			aTail(aPNEUSINI)[__BANDA__]   := TQS->TQS_BANDAA	//[08] BANDA
			aTail(aPNEUSINI)[__DOT__]     := TQS->TQS_DOT		//[09] DOT
			aTail(aPNEUSINI)[__STATUS__]  := ST9->T9_STATUS	//[10] STATUS
			aTail(aPNEUSINI)[__SEQREL__]  := TQ1->TQ1_SEQREL	//[11] SEQ REL
			aTail(aPNEUSINI)[__MOTIVO__]  := Space(6)			//[12] MOTIVO
			aTail(aPNEUSINI)[__CODESTO__] := ST9->T9_CODESTO	//[13]  T9_CODESTO
			aTail(aPNEUSINI)[__LOCPAD__]  := Space(Len(SB1->B1_LOCPAD))//[14] B1_LOCPAD
			aTail(aPNEUSINI)[__USUARIO__] := ''					//[15] USUARIO TZ_USUARIO
			aTail(aPNEUSINI)[__CCUSTO__]  := ST9->T9_CCUSTO	//[16] CENTRO DE CUSTO
			aTail(aPNEUSINI)[__CENTRAB__] := ST9->T9_CENTRAB   //[17] CENTRO DE TRABALHO
			aTail(aPNEUSINI)[__LIVRE__]   := ""
			aTail(aPNEUSINI)[__LOCALAM__] := Space(Len(STL->TL_LOCAL))   //[19] Almoxarifado
			aTail(aPNEUSINI)[__NUMLOTE__] := Space(Len(STL->TL_NUMLOTE)) //[20] Sub_lote
			aTail(aPNEUSINI)[__LOTECTL__] := Space(Len(STL->TL_LOTECTL)) //[21] Lote
			aTail(aPNEUSINI)[__NUMSERI__] := Space(Len(STL->TL_NUMSERI)) //[22] Numero da serie
			aTail(aPNEUSINI)[__LOCALIF__] := Space(Len(STL->TL_LOCALIZ)) //[23] Localizacao fisica
			aTail(aPNEUSINI)[__DATAVAL__] := Ctod("  /  /  ")            //[24] Data validade
			aTail(aPNEUSINI)[__CODEANT__] := ST9->T9_CODESTO             //[25] Codigo do produto no estoque antigo
		EndIf

	Next nY

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} CreateFooter
Cria objetos no rodape do programa

@param oPanel Objeto pai
@param nLargura Largura disponível
@param nAltRod Altura disponível
@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function CreateFooter(oPanel,nLargura,nAltRod)

	Local nImgX := (nLargura-220-73)/2 //Total - Distancia X da ultima imagem + Tamanho da imagem
	Local nImgY := 35
	Local nLegCorY := 0
	nImgX := If(nImgX<0,0,nImgX)

	//Container com Gradient
	oPanel:addShape(	"id="+RetId()+";type=1;left=0;top=0;width="+Str(nLargura)+";height="+Str(nAltRod)+";"+;
							"gradient=1,0,0,0,180,0.0,#FFFFFF,0.1,#FDFBFD,1.0,#CDD1D4;pen-width=0;pen-color=#FFFFFF;can-move=0;can-mark=0;is-container=1;")

	//Linha acima do Gradient
	oPanel:addShape(	"id="+RetId()+";type=1;left=0;top="+Str(nLegCorY*2)+";width="+AllTrim(Str(nLargura))+";height=20;"+;
							"gradient=1,10,0,229,0,0.0,#F2F3F6;pen-width=0;pen-color=#F2F3F6;can-move=0;can-mark=0;is-container=0;")

	@ nLegCorY+1.5, nImgX/4 + 30 BITMAP oBmp0 RESNAME "BR_PRETO" SIZE 16,16 NOBORDER OF oPanel PIXEL
	@ nLegCorY+1.5, nImgX/4 + 45 Say STR0098 OF oPanel Pixel //"Novo"
	@ nLegCorY+1.5, nImgX/4 + 90 BITMAP oBmp1 RESNAME "BR_VERDE" SIZE 16,16 NOBORDER OF oPanel PIXEL
	@ nLegCorY+1.5, nImgX/4 + 105 Say STR0099 OF oPanel Pixel //"1 Vida"
	@ nLegCorY+1.5, nImgX/4 + 150 BITMAP oBmp2 RESNAME "BR_AZUL" SIZE 16,16 NOBORDER OF oPanel PIXEL
	@ nLegCorY+1.5, nImgX/4 + 165 Say STR0100 OF oPanel Pixel //"2 Vidas"
	@ nLegCorY+1.5, nImgX/4 + 210 BITMAP oBmp3 RESNAME "BR_LARANJA" SIZE 16,16 NOBORDER OF oPanel PIXEL
	@ nLegCorY+1.5, nImgX/4 + 225 Say STR0101 OF oPanel Pixel //"3 Vidas"
	@ nLegCorY+1.5, nImgX/4 + 265 BITMAP oBmp3 RESNAME "BR_VERMELHO" SIZE 16,16 NOBORDER OF oPanel PIXEL
	@ nLegCorY+1.5, nImgX/4 + 280 Say STR0102 OF oPanel Pixel //"4 Vidas"
	If ExistBlock("MNTA9951") // Verifica se existe o ponto de entrada
		ExecBlock("MNTA9951",.F.,.F.,{oPanel}) // Executa ponto de entrada
	EndIf
	//Linha acima do Gradient
	oPanel:addShape(	"id="+RetId()+";type=1;left=0;top=20;width="+AllTrim(Str(nLargura))+";height=5;"+;
							"gradient=1,10,0,229,0,0.0,#CDD1D4;pen-width=0;pen-color=#CDD1D4;can-move=0;can-mark=0;is-container=0;")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Imagens - Status ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	//Estoque
	nIdCalib := Val(RetId())
	oPanel:addShape(	"id="+Str(nIdCalib)+";type=8;left="+Str(nImgX)+";top="+Str(nImgY)+;
							";width=68;height=73;image-file="+cImgCalib+";tooltip="+STR0030+";can-mark=1;is-container=0") //"Calibragem"
	oPanel:addShape(	"id="+Str(nIdCalib)+";type=7;left="+Str(nImgX-45)+";top="+Str(nImgY+70)+;
							";width=175;height=60;text="+STR0030+";font=Verdana,12,1,1,3;"+; //"Calibragem"
							"pen-color=#000000;pen-width=1;tooltip="+STR0030+";can-mark=1;is-container=0") //"Calibragem"

	//
	nIdMedic := Val(RetId())
	oPanel:addShape(	"id="+Str(nIdMedic)+";type=8;left="+Str(nImgX+220)+";top="+Str(nImgY)+;
							";width=129;height=129;image-file="+cImgMedic+";tooltip="+STR0080+";can-mark=1;is-container=0") //"Medição de Sulco"
	oPanel:addShape(	"id="+Str(nIdMedic)+";type=7;left="+Str(nImgX+172)+";top="+Str(nImgY+70)+;
							";width=175;height=60;text="+STR0080+";font=Verdana,12,1,1,3;"+; //"Medição de Sulco"
							"pen-color=#000000;pen-width=1;tooltip="+STR0080+";can-mark=1;is-container=0") //"Medição de Sulco"


Return

//---------------------------------------------------------------------
/*/{Protheus.doc} ClickTire
Executa funcionalidades ao clicar sobre as imagens do rodape, Calibragem e Medição de Sulco

@param oPanel Objeto pai
@param nLargura Largura disponível
@param nAltRod Altura disponível
@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ClickTire(oPanel)
	Local nShapeAtu := oPanel:ShapeAtu
	Local nShape

	If !VERIFVET(1) .Or. !ValidCalib(M->TTP_CALATU,M->TTP_CALREA,nCalMin,nCalMax)
	   Return
	EndIf
	//Clicou na Imagem Pneu
	nShape := aSCAN(aShape,{|x| (x[__IDPNEU__] == nShapeAtu) .And. !aTail(X)[__INVISIBLE__]})
	If nShape == 0
		//Clicou no Texto do código só pneu
		nShape := aSCAN(aShape,{|x| (x[__ARRTXT__][__IDTXT__] == nShapeAtu) .And. !aTail(X)[__INVISIBLE__]})
	EndIf

	//Se encontrou o shape
    If nShape > 0
        If lRot750
            nPos := aScan(aPNEUSFIM,{|x| x[__LOCALIZ__] == aShape[nShape][__INFO__][2]})
            If nPos > 0
                ChangeTire(nPos)
            EndIf

            lCONDP := CONPAD1(NIL,NIL,NIL,"NGPNEU",NIL,NIL,.F.)

            If lCONDP
                cPneuAtu := ST9->T9_CODBEM
            EndIf

        Else
            nPos := aScan(aBEMLOC,{|x| x[__CODBEM__] == aShape[nShape][__CODBEM__] })
            If nPos > 0
                ChangeTire(nPos)
            EndIf
        EndIf
    EndIf

    If oCalAfe:lVisible
        oCalAfe:SetFocus()
    Else
        oSulco1:SetFocus()
    EndIf
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuPopUp
Exibe menu popup para o pneu clicado

@param x Posição clicado em X
@param y Posição clicado em Y
@param oMenu Objeto de menu popup
@param oPanel Objeto pai
@author Vitor Emanuel Batista
@since 12/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function MenuPopUp(x,y,oMenu,oPanel)

	Local nShape


	//--------------------------------------
	// Localiza na array, se clicou no Pneu
	//--------------------------------------
	nShape := aSCAN(aShape,{|x| (x[__IDPNEU__] == oPanel:ShapeAtu) .And. !aTail(X)[__INVISIBLE__] })
	If nShape == 0
		//---------------------------------------
		// Localiza na array, se clicou no Texto
		//---------------------------------------
		nShape := aSCAN(aShape,{|x| (x[__ARRTXT__][__IDTXT__] == oPanel:ShapeAtu) .And. !aTail(X)[__INVISIBLE__] })
	EndIf

	If nShape > 0
		//----------------------------------------------
		// Cria objeto oMenu caso não tenha sido criado
		//----------------------------------------------
		If Type("oMenu") != "O"
			oMenu := TMenu():New(0,0,0,0,.T.,,Nil)
				oMenu:Add(TMenuItem():New(oMenu:Owner(),STR0074,,,,{|| MNTC125(aBEMLOC[nFocus][__CODBEM__]) },,"DBG10",,,,,,,.T.)	) //'Consulta Pneu'
				oMenu:Add(TMenuItem():New(oMenu:Owner(),STR0077,,,,{|| MNC600ORD(aBEMLOC[nFocus][__CODBEM__])},,"NGOSVERMELHO",,,,,,,.T.)) //"Ordem de Serviço"
				oMenu:Add(TMenuItem():New(oMenu:Owner(),STR0076,,,,{|| MNTA080SUH(aBEMLOC[nFocus][__CODBEM__])},,'PAPEL_ESCRITO',,,,,,,.T.)) //"Histórico de Sulco"
		EndIf

		//----------------------------------------------
		// Chama função de clique no pneu para dar foco
		//----------------------------------------------
		ClickTire(oPanel)

		//------------------
		// Exibe menu PopUp
		//------------------
		oMenu:Activate(x,y,@oPanel)
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} ClickFooter
Executa funcionalidades ao clicar sobre as imagens do rodape, Calibragem e Medição de Sulco

@param oPanel Objeto pai
@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ClickFooter(oPanel)
	Local nShapeAtu := oPanel:ShapeAtu

	//----------------------------------------------------------------
	// Altera Foco para o botão para atualização dos objetos em tela
	//----------------------------------------------------------------
	oNext:SetFocus()

	If nIdCalib == nShapeAtu
        SetVisible(aObjMed,.F.) // Esconde objetos de Medição
        SetVisible(aObjCal,.T.) // Mostra objetos de Calibração
	ElseIf nIdMedic == nShapeAtu
		SetVisible(aObjMed,.T.)
		SetVisible(aObjCal,.F.)
	EndIf

	//------------------------------------
	// Seta foco para os primeiros campos
	//------------------------------------
	If oCalAfe:lVisible
		oCalAfe:SetFocus()
	Else
		oSulco1:SetFocus()
	EndIf

    If lRot750
        oPne:SetFocus()
    EndIf
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} RetId
Incrementa ID para o shape

@author Vitor Emanuel Batista
@since 02/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function RetId()
Return AllTrim(Str(++nId))

//---------------------------------------------------------------------
/*/{Protheus.doc} ValidSulco
Valida o sulco informado.

@author Vitor Emanuel Batista
@since 03/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ValidSulco(cPneu,aSulco,dData,cHora)

	Local lRet   := .T.
	Local nSulco := 0
	Local cERRO  := ""

	If !INCLUI995 .And. !ALTERA995
		Return .T.
	EndIf

	aSulco := aSort(aSulco)
	nSulco := If(aSulco[1] == 0, If(aSulco[2] == 0,aSulco[3],aSulco[2]),aSulco[1])

	If lRet
    	dbSelectArea("TQV")
    	dbSetOrder(1)
    	If dbSeek(xFilial("TQV")+cPneu+DTOS(dData)+cHora,.T.)
    		dbSkip(-1)
    		M->TQV_SULCO  := TQV->TQV_SULCO
    		M->TQV_DTMEDI := TQV->TQV_DTMEDI
    		M->TQV_HRMEDI := TQV->TQV_HRMEDI
    		dbSkip()
    	Else
    		dbSkip(-1)
    		M->TQV_SULCO  := TQV->TQV_SULCO
    		M->TQV_DTMEDI := TQV->TQV_DTMEDI
    		M->TQV_HRMEDI := TQV->TQV_HRMEDI
    	EndIf

    	dbSkip()
    	If DTOS(M->TQV_DTMEDI)+M->TQV_HRMEDI < DTOS(dData)+cHora .And. M->TQV_SULCO < nSulco
    		cERRO := STR0123 + CRLF + CRLF //"Sulco informado é maior que ao do histórico."
    	ElseIf TQV->TQV_CODBEM == cPneu .And. DTOS(TQV->TQV_DTMEDI)+TQV->TQV_HRMEDI > DTOS(dData)+cHora .And. TQV->TQV_SULCO > nSulco
    		cERRO := STR0124 + CRLF + CRLF //"Sulco informado é menor que ao do histórico."
    		M->TQV_SULCO  := TQV->TQV_SULCO
    		M->TQV_DTMEDI := TQV->TQV_DTMEDI
    		M->TQV_HRMEDI := TQV->TQV_HRMEDI
    	EndIf

		If !Empty(cERRO)
			cERRO += STR0167 + Alltrim(cPneu) + CRLF //"Pneu.....:"
        	cERRO += STR0125 + DTOC(M->TQV_DTMEDI) + CRLF //"Data.....: "
            cERRO += STR0126 + M->TQV_HRMEDI + CRLF //"Hora.....: "
            cERRO += STR0127 + AllTrim(Transform(M->TQV_SULCO,"@E 999.99")) //"Sulco....: "
 			HELP(' ',1,STR0035 ,,cERRO,2,0)
            lRet := .F.
		EndIf
	EndIf
Return lRet


//---------------------------------------------------------------------
/*/{Protheus.doc} ValidCalib
Valida o valor digitado para a calibragem do pneu

@param nCalAtu Valor Atual da calibragem
@param nCalRea Valor da calibragem
@param nCalMin mínimo de calibragem
@param nCalMax máximo de calibragem
@param cPneuAtu Código do Pneu a ser validado
@author Vitor Emanuel Batista
@since 12/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ValidCalib(nCalAtu,nCalRea,nCalMin,nCalMax,cPneuAtu)

	Local cErroAuto := ''

	If !Positivo(nCalRea) .Or. !Positivo(nCalAtu)
		Help(' ', 1, STR0070,,STR0163, 1, 0,,,,,,) //"O valor da calibragem não pode ser negativo."
		Return .F.
	EndIf

	If nCalRea <> 0 .And. nCalMax <> 0
		If nCalRea > nCalMax
			If l995Auto
				cErroAuto := STR0167 + Alltrim(cPneuAtu) + CRLF + STR0033+CRLF
			EndIf
			Return IIf(!l995Auto, MsgYesNo(STR0033+CRLF+STR0034,STR0035),HELP(' ',1,STR0035 ,,cErroAuto+CRLF,2,0)) //"Calibração acima do limite máximo permitido."##"Deseja continuar?"##"Atenção"
		ElseIf nCalRea < nCalMin
			If l995Auto
				cErroAuto := STR0167 + Alltrim(cPneuAtu) + CRLF + STR0036+CRLF
			EndIf
			Return IIf(!l995Auto, MsgYesNo(STR0036+CRLF+STR0034,STR0035),HELP(' ',1,STR0035 ,,cErroAuto+CRLF,2,0)) //"Calibração abaixo do limite mínimo permitido."##"Deseja continuar?"##"Atenção"
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} DeleteReg
Exclui toda a Calibragem e Medição

@author Vitor Emanuel Batista
@since 12/05/2011
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function DeleteReg()

	dbSelectArea("TTO")
	dbSetOrder(1)
	dbSeek(xFilial("TTO")+cNum995)
	RecLock("TTO",.F.)
	dbDelete()
	MsUnLock()

	dbSelectArea("TTP")
	dbSetOrder(1)
	dbSeek(xFilial("TTP")+cNum995)
	While !Eof() .And. xFilial("TTP") == TTP->TTP_FILIAL .And. TTP->TTP_NUMCAL == cNum995

		dbSelectArea("TQV")
		dbSetOrder(1)
		If dbSeek(xFilial("TQV")+TTP->TTP_PNEU+DTOS(dData995)+cHora995)
			//------------------------
			// Exclui registro da TQV
			//------------------------
			RecLock("TQV",.F.)
			dbDelete()
			MsUnLock()

			dbSkip(-1)
			dbSelectArea("TQS")
			dbSetOrder(1)
			dbSeek(xFilial("TQS")+TTP->TTP_PNEU)

			//-------------------------------------------
			// Altera TQS de acordo com a última medição
			//-------------------------------------------
			If DTOS(TQS->TQS_DTMEAT)+TQS->TQS_HRMEAT == DTOS(dData995)+cHora995
				RecLock("TQS",.F.)
				TQS->TQS_DTMEAT := TQV->TQV_DTMEDI
				TQS->TQS_HRMEAT := TQV->TQV_HRMEDI
				TQS->TQS_SULCAT := TQV->TQV_SULCO
				MsUnLock()
			EndIf

		EndIf

		RecLock("TTP",.F.)
		dbDelete()
		MsUnLock()
		dbSelectArea("TTP")
		dbSkip()
	EndDo

	//Exclui o lançamento de contador relacionado ao bem do Contador 1
	If lTEMCONT .And. !Empty(nPOSCONT)
		MNT470EXCO(cBemPai995,dData995,cHora995,1)
	EndIf

	//Exclui o lançamento de contador relacionado ao bem do Contador 2
	If lTEMCON2 .And. !Empty(nPOSCON2)
		MNT470EXCO(cBemPai995,dData995,cHora995,2)
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} DispPneu
Dispara gatilho para o Campo do Pneu

@author William Rozin Gaspar
@since 11/06/2014
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function DispPneu()
Local lRet := .T.
Local nPosPne
Local nShape := GetIdShape(nFocus)

If !Empty(cPneuAtu) //.And. lRot750
    If VERIFVET(1)
        //Faz gatilho das informações principais do pneus
        cNoEix := NGSEEK('TQ1',cCodFami+cTipMod+Str(aPNEUSINI[nFocus][__EIXO__],3),1,'TQ1->TQ1_EIXO')
        cNoEix := If(Upper(cNoEix) = Upper("RESERVA"),'R',cValToChar(aPNEUSINI[nFocus][__EIXO__]))
        cEixo995 := If(AllTrim(cNoEix) == "R",STR0095,AllTrim(cNoEix) + STR0094) //"RESERVA"##"º EIXO"
        cPosicao := If(!lRot750,NGSEEK("TPS",aPNEUSINI[nFocus][__LOCALIZ__],1,"TPS->TPS_NOME"),NGSEEK("TPS",aPNEUSFIM[nFocus][__LOCALIZ__],1,"TPS->TPS_NOME"))
        cMedida  :=  If(!lRot750,NGSEEK("TQT",aPNEUSINI[nFocus][__MEDIDA__],1,"TQT->TQT_DESMED"),NGSEEK("TQT",aPNEUSFIM[nFocus][__MEDIDA__],1,"TQT->TQT_DESMED"))

        //Faz gatilho da calibragem mínima e máxima do pneu
        dbSelectArea("TQX")
        dbSetOrder(1)
        dbSeek(xFilial("TQX")+aPNEUSINI[nFocus][__MEDIDA__]+ST9->T9_TIPMOD)
        nCalMin  := TQX->TQX_CALMIN
        nCalMax  := TQX->TQX_CALMAX

        //Faz gatilho da medição de sulco do pneu
        dbSelectArea("TQV")
        dbSetOrder(1)
        If dbSeek(xFilial("TQV")+cPneuAtu+DTOS(dData995)+cHora995) .Or. !dbSeek(xFilial("TQV")+cPneuAtu+DTOS(dData995)+cHora995,.T.)
            dbSkip(-1)
        EndIf

        cDesenho := TQV->TQV_DESENH
        nSulcoAtu:= TQV->TQV_SULCO
        dDtSulco := TQV->TQV_DTMEDI
        cHrSulco := TQV->TQV_HRMEDI

        aShape[nShape][__CODPNEU__] := cPneuAtu

        nPosPne := aScan(aPNEUSFIM,{|x| x[__LOCALIZ__] == aShape[nShape][__INFO__][2]})
        If nPosPne > 0
            aPNEUSFIM[nPosPne][__CODBEM__] := cPneuAtu
        EndIf

        aShape[nShape][__TXTVISIBLE__] := .T.
        aTail(aShape[nShape])[__VIDA__] := Val(NGSEEK("TQS", cPneuAtu, 1, "TQS_BANDAA"))

        NGClickPneu(oTCentro,nShape,.T.,.F.,.T.)
    Else
        cPneuAtu := Space(16)
        lRet := .F.
    EndIf
Else
    nPosPne := aScan(aPNEUSFIM,{|x| x[__LOCALIZ__] == aShape[nShape][__INFO__][2]})
    If nPosPne > 0
        aPNEUSFIM[nPosPne][__CODBEM__] := Space(16)
    EndIf

    cEixo995 := ""
    cPosicao := ""
    cMedida  := ""
    cDesenho := ""
    nCalMin  := 0
    nCalMax  := 0
    nSulcoAtu:= 0
    dDtSulco := CtoD("  /  /  ")
    cHrSulco := ""
    M->TTP_SULCO1  := 0
    M->TTP_SULCO2  := 0
    M->TTP_SULCO3  := 0
    M->TTP_CALATU  := 0
    M->TTP_CALREA  := 0


    aShape[nShape][__TXTVISIBLE__] := .F.
    aTail(aShape[nShape])[__VIDA__] := 1

    NGClickPneu(oTCentro,nShape,.T.,.F.,.F.)
EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} VERIFVET
Função que retorna se o Pneu informado já existe (tanto na base quanto na estrutura) e se a
todos os pneus foram digitados

@author William Rozin Gaspar
@param nVld: Qual das situações a função irá validar
    1 - Valida quando for disparado pelo gatilho
    2 - Valida quando confirmar a tela
@since 18/06/2014
@return Nil
/*/
//---------------------------------------------------------------------
Static Function VERIFVET(nVld)
    Local nI := 0
    Local nCount  := 0
    Local nQuant  := 0
    Local lRet    := .T.

    If lRot750
        For nI := 1 to Len(aPNEUSFIM)
            If !Empty(aPNEUSFIM[nI][__CODBEM__])
                If Alltrim(aPNEUSFIM[nI][__CODBEM__]) == Alltrim(cPneuAtu) .And. nI <> nFocus
                    nCount++
                EndIf
                nQuant += 1
            EndIf
        Next nI

        If nVld == 1 .And. !Empty(cPneuAtu)
            dbSelectArea("ST9")
            dbSetOrder(1)
            If !dbSeek(xFilial("ST9")+cPneuAtu)
                Help(" ",1,"REGNOIS",,NGSX2NOME('ST9'),3,1) //Se o Bem não existir
                lRet := .F.
            Else
                If ST9->T9_CATBEM <> "3" //Se bem For diferente de Pneu
                    ShowHelpDlg(STR0035,{STR0143},2,{STR0144},2)//Atenção##"O bem digitado não é um Pneu."##"Favor informar um bem que corresponda a um Pneu."
                    lRet := .F.
                Else
                    If nCount > 0 //Se bem já foi informado na estrutura
                        ShowHelpDlg(STR0035,{STR0129},2,{STR0130},2)//Atenção##"Este Pneu já foi informado."##"Informe outro Pneu para esta localização."
                        lRet := .F.
                    EndIf
                EndIf
            EndIf
        EndIf

        If nVld == 2
            If nQuant < 1 //Condição para não permitir posseguir sem informar pelo menos um Pneu na Estrutura.
                ShowHelpDlg(STR0035,{STR0131},2,{STR0132},2)//Atenção##"Um ou mais pneus não foram informados."##"Informe todos os Pneus para este veículo."
                lRet := .F.
            Else
                If (Empty(nPOSCONT) .And. lTEMCONT) .Or. (Empty(SubStr(cHora995,1,2)) .Or. Empty(SubStr(cHora995,3,2))) .Or. Empty(dData995)
                    Help(" ",1,"OBRIGAT",,STR0159,05) //"Contador"
                    lRet := .F.
                EndIf
            EndIf
        EndIf
    EndIf
Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT995VlDt
Função que valida data e hora informada

@author Tainã Alberto Cardoso
@since 06/05/2015
@version MP11
@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT995VlDt()

	Local lRet := .T.

	If dData > dDataBase
		Help(' ', 1, STR0070,,;           // "Não conformidade"
                     STR0155, 1, 0,,,,,,; // "Data não pode ser maior que a atual."
                     {STR0156})           // "Informe uma data menor ou igual a atual."
		lRet := .F.

	ElseIf !Empty(dData) .And.  !Empty(cHrCal)

		If dData == dDataBase .And. cHrCal > SubStr(Time(),1,5)
			Help(' ', 1, STR0070,,;       // "Não conformidade"
                     STR0157, 1, 0,,,,,,; // "Hora não pode ser maior que a atual."
                     {STR0158})           // "Informe uma hora menor ou igual a atual."
			lRet := .F.

		ElseIf !NGVALHORA(cHrCal,.T.)

			lRet := .F.

		EndIf

	EndIf

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} fVisualBem
Visualiza cadastro de Bens

@param cCodBem - Codigo do bem

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Static Function fVisualBem(cCodBem)

	Local aArea := GetArea()

	dbSelectArea("ST9")
	dbSetOrder( 1 )
	If dbSeek( xFilial("ST9") + cCodBem )
		MNTA080CAD( 'ST9' , ST9->( Recno() ) , 2 )
	EndIf

	RestArea( aArea )
Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA995CCB
Carrega o valor do contador do bem se o campo estiver bloqueado

@param cCobBem: Código do bem
@param dData: Data
@param cHora: Hora
@author Wexlei Silveira
@since 08/06/2016
@version MP11
@return True
/*/
//---------------------------------------------------------------------
Static Function MNTA995CCB(cCobBem, dData, cHora)

	If FindFunction("NGBlCont") .And. !NGBlCont( cCobBem )
		nPOSCONT := NGTpCont(cCobBem, dData, cHora)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT995VTTO
Validacao dos campos da tabela TTO.

@param cField Codigo do campo a ser validado

@author Diego de Oliveira.
@since 05/12/2019

@return Lógico, Se o dado e' valido
/*/
//---------------------------------------------------------------------
Static Function MNT995VTTO( cField )

	Local lRet := .T.

	If cField == 'TTO_BEMPAI'

		//-----------------------------------------------
		// Valida veículo
		//-----------------------------------------------
		dbSelectArea("ST9")
		dbSetOrder(1)
		If !dbSeek(xFilial('ST9')+cBem)
			Help( " ",1,STR0070,,STR0011+Alltrim(cBem)+STR0012,3,1 ) //Não Conformidade #Bem Não Cadastrado
			lRet := .F.
		EndIf

		//-----------------------------------------------
		//Validação de estrutura padrão
		//-----------------------------------------------
		If lRet
			dbSelectArea("TQ0")
			dbSetOrder(1)
			If !dbSeek( xFilial('TQ0') + ST9->T9_CODFAMI + ST9->T9_TIPMOD)
				Help(' ',1,STR0070 ,,STR0014+ ST9->T9_CODFAMI +"  "+STR0022+"  "+ ST9->T9_TIPMOD+"  "+STR0021,2,0,,,,,,)
				lRet := .F. //Não Conformidade " # Esquema padrão  " # "Modelo" # " não cadastrado"
			EndIf
		EndIf

		//-----------------------------------------------
		//Validação de estrutura do rodado
		//-----------------------------------------------
		If lRet
			dbSelectArea("TQ1")
			dbSetOrder(1)
			If !dbSeek( xFilial('TQ1') + TQ0->TQ0_DESENH + ST9->T9_TIPMOD)
				//Não Conformidade # Esquema rodados  # "Modelo" # " não cadastrado"
				Help(' ',1,STR0070 ,,STR0015+ ST9->T9_CODFAMI +"  "+STR0022+" "+ ST9->T9_TIPMOD +STR0021,2,0,,,,,,)
				lRet := .F.
			EndIf
		EndIf

	ElseIf cField == 'TTO_EXECUT'
		
		lRet := Empty( cExecut ) .Or. ExistCPO( IIf( lUseSRA, 'SRA', 'ST1' ), cExecut )

	ElseIf cField == 'TTO_POSCON'
		lRet := Vazio(nPOSCONT) .Or. CHKPOSLIM(cBemPai995,nPOSCONT,1)

	ElseIf cField == 'TTO_POSCO2'
		lRet := Vazio(nPOSCON2) .Or. CHKPOSLIM(cBemPai995,nPOSCON2,2)

	Endif

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT995WTTO
Modo de edicao dos campos da tabela TTO.

@param cField   , Caracter -  Código do campo a ser validado

@author Diego de Oliveira.
@since 05/12/2019

@return Lógico, Se o dado pode ser editado
/*/
//---------------------------------------------------------------------
Static Function MNT995WTTO( cField )

	Local lRet := .T.

	If cField == 'TTO_POSCON'
		If lTEMCONT
			lRet := lTEMCONT .And. nPOSOLD1 == 0 .And.;
			( !FindFunction( "NGBlCont" ) .Or. NGBlCont( IIf( ValType(cBem) == "C",cBem,"" ) ) ) .And.;
			(Inclui .Or. Altera)
		EndIf

	ElseIf cField == 'TTO_POSCO2'
		If lTEMCON2
			lRet := lTEMCON2 .And. nPOSOLD2 == 0 .And. ( Inclui .Or. Altera )
		Else
			lRet := .F. //Condição para fechar o campo quando não possuir segundo contador
		EndIf

	Endif

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT995INPN
Atribui os dados da estrutura e suas posições.

@param oPnlCal Objeto pai
@param nAltura Altura disponível para o Centro
@param nLargura Largura disponível para o Centro

@author Vitor Emanuel Batista
@since 05/12/2019

@return Nil
/*/
//---------------------------------------------------------------------
Static Function MNT995INPN(oPnlCal, nAltura, nLargura)

	Local nX, nY
	Local cEixo
	Local aStructSTZ := NGRETSTCDT(cBemPai995,dData995,cHora995)
	Local nWidth  := Val(aEstruturas[nPosEstru][2])
	Local nHeight := Val(aEstruturas[nPosEstru][3])
	Local nTop	  := 0
	Local nLeft	  := 0

	If !l995Auto
		nTop  := (nAltura - nHeight/2)
		nLeft := (nLargura - nWidth)/2
	EndIf

	aBEMLOC   := {}
	aPNEUSINI := {}

	For nX := 1 To Len(aStructSTZ)
		If ST9->(dbSeek(xFilial("ST9")+aStructSTZ[nX][1])) .And. ST9->T9_CATBEM == '3' .And. aStructSTZ[nX][7] == cBemPai995

			//--------------------------------------------------------
			// Verifica se a Família está de acordo com a localização
			//--------------------------------------------------------
			dbSelectArea("TQ1")
			dbSetOrder(1)
			dbSeek(xFilial("TQ1")+cCodFami+cTipMod)
			While !Eof() .And. xFilial("TQ1") == TQ1->TQ1_FILIAL .And. TQ1->TQ1_DESENH == cCodFami ;
								.And. TQ1->TQ1_TIPMOD == cTipMod

				If	(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN1 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL1) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN2 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL2) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN3 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL3) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN4 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL4) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN5 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL5) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN6 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL6) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN7 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL7) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN8 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL8) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN9 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL9) .OR.;
					(aStructSTZ[nX][6] == TQ1->TQ1_LOCPN0 .AND. ST9->T9_CODFAMI == TQ1->TQ1_FAMIL0)

					nPos     := aSCAN(aBEMLOC,{|x| x[1] == aStructSTZ[nX][6] })

					If nPos == 0
						aAdd(aBEMLOC,{aStructSTZ[nX][6],aStructSTZ[nX][1],Space(Len(STZ->TZ_CAUSA)),ST9->T9_CODFAMI,cBemPai995,0,0})
					EndIf
					Exit
				EndIf
				dbSelectArea("TQ1")
				dbSkip()
			EndDo
		EndIf
	Next nX

	//Realiza a inclusão das localizações que não existem na estrutura de Bens (STZ)
    If lRot750
        dbSelectArea("TQ1")
        dbSetOrder(1)
        dbSeek(xFilial("TQ1")+cCodFami+cTipMod)
        While !Eof() .And. xFilial("TQ1") == TQ1->TQ1_FILIAL .And. TQ1->TQ1_DESENH == cCodFami ;
                     .And. TQ1->TQ1_TIPMOD == cTipMod

            For nX := 0 to 9
                If !Empty( &("TQ1->TQ1_LOCPN"+cValToChar(nX)) )
                    dbSelectArea("STZ")
                    dbSetOrder(3)
                    If !dbSeek(xFilial("STZ")+cBemPai995+&("TQ1->TQ1_LOCPN"+cValToChar(nX)))
                        If aScan(aBEMLOC,{|x| x[1] ==  &("TQ1->TQ1_LOCPN"+cValToChar(nX))}) == 0
                            aAdd(aBEMLOC,{&("TQ1->TQ1_LOCPN"+cValToChar(nX)),Space(16),Space(Len(STZ->TZ_CAUSA)),&("TQ1->TQ1_FAMIL"+cValToChar(nX)),cBemPai995,0,0})
                        EndIf
                    EndIf
                EndIf
            Next nX

            dbSelectArea("TQ1")
            dbSkip()
        EndDo

    Endif

	dbSelectArea("TQ0")
	dbSetOrder(1)
	dbSeek(xFilial("TQ0")+cCodFami+cTipMod)

	//Adiciona Stepes na Estrutura
	For nY := 1 To Len(aEstruturas[nPosEstru][5])

		lReserva := .F.
		dbSelectArea("TQ1")
		dbSetOrder(1)
		dbSeek(xFilial("TQ1")+cCodFami+cTipMod)
		While !Eof() .And. xFilial("TQ1") == TQ1->TQ1_FILIAL .And. TQ1->TQ1_DESENH == cCodFami ;
							.And. TQ1->TQ1_TIPMOD == cTipMod
			If TQ1->TQ1_EIXO = STR0095 //"RESERVA"
				lReserva := .T.
				Exit
			EndIf
			dbSkip()
		EndDo

		If lReserva .And. !l995auto
			CreateAxle(oPnlCal,.T.,nY,nTop,nLeft)
		ElseIf lReserva .And. l995auto
			CreateAxle(oPnlCal,.T.,nY,1,1)
		EndIf

	Next nY

	//Adiciona Pneus na Estrutura
	For nX := 1 to Len(aEstruturas[nPosEstru][4])

		cEixo   := cValToChar(nX)

		dbSelectArea("TQ1")
		dbSetOrder(1)
		dbSeek(xFilial("TQ1")+TQ0->TQ0_DESENH+TQ0->TQ0_TIPMOD+Str(nX,3))

       	If l995auto
		   	CreateAxle(oPnlCal,.F.,nX,1,1)
		Else
			CreateAxle(oPnlCal,.F.,nX,nTop,nLeft)
		EndIf

	Next nX

	aSort(aBEMLOC,,,{|x,y| x[6] < y[6] .Or. (x[6] == y[6] .And. x[7] < y[7])})

	//Faz copia do aPNEUSINI para o aPNEUSFIM
	aPNEUSFIM := aCLONE(aPNEUSINI)
	nTamTRB   := Len(aPNEUSINI[1]) //Nao retirar, utilizado por pontos de entrada

	//Limpa o código do Pneu para ser utilizado na rotina de Inspeção(MNTA750)
	If lRot750
	   For nX := 1 to Len(aPNEUSFIM)
	       aPNEUSFIM[nX][__CODBEM__] := Space(16)
	   Next nX
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MN995AUTO1
Carrega variáveis iniciais e validações para execauto e

@author Diego de Oliveira.
@since 05/12/2019

@return Lógico, Prossegue ou não com a inserção.
/*/
//---------------------------------------------------------------------
Static Function MN995AUTO1(nOpc)

	Local lRet   := .T.
	Local nIndex := 0

	// -----------------------------------------------------------
	// Inicialização dos parâmetros
	// -----------------------------------------------------------

	nIndex := aScan(aRotAuto,{|x| Upper(AllTrim(x[1])) == 'TTO_BEMPAI' })
	If nIndex > 0
		cBem := aRotAuto[nIndex][2] // veículo
	EndIf

	nIndex := aScan(aRotAuto,{|x| Upper(AllTrim(x[1])) == 'TTO_DTCALI' })
	If nIndex > 0
		dData := aRotAuto[nIndex][2] // data
	EndIf

	nIndex := aScan(aRotAuto,{|x| Upper(AllTrim(x[1])) == 'TTO_HRCALI' })
	If nIndex > 0
		cHrCal := aRotAuto[nIndex][2] // Hora
	EndIf

	nIndex  := aScan(aRotAuto,{|x| Upper(AllTrim(x[1])) == 'TTO_EXECUT' })
	If nIndex > 0
		cExecut := aRotAuto[nIndex][2] // Executante
	EndIf

	nIndex  := aScan(aRotAuto,{|x| Upper(AllTrim(x[1])) == "TTO_NUMCAL" })
	If nIndex > 0
		cNum995 := aRotAuto[nIndex][2] //Campo Número Calibragem
	EndIf

	lRet := MNTA995VPar(nOpc) // Executa validação dos parâmetros iniciais

	//Verifica se possui o array das medições
	If lRet .And. nOpc <> 5 .And. ( ValType(aCalAuto) <> "A" .Or. Len( aCalAuto ) == 0 )
		Help(' ', 1, STR0070,,STR0162, 1, 0,,,,,,) // "Conteúdo do array para execução automática está vazio."
		lRet := .F.
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MN995AUTO2
Validações de contador para execauto

@author Diego de Oliveira.
@since 05/12/2019

@return Lógico, Prossegue ou não com a inserção.
/*/
//---------------------------------------------------------------------
Static Function MN995AUTO2()

	Local lRet := .T.
	Local nIndex := 0

	// Contador 1
	nIndex := aScan(aRotAuto,{|x| Upper(AllTrim(x[1])) == "TTO_POSCON" })
	If nIndex > 0
		lRet := MNT995WTTO('TTO_POSCON')
		If lRet
			nPOSOLD1 := aRotAuto[nIndex][2]
			nPOSCONT := aRotAuto[nIndex][2]

			lRet := MNT995VTTO('TTO_POSCON')
		EndIf
	EndIf

	// Contador 2
	nIndex := aScan(aRotAuto,{|x| Upper(AllTrim(x[1])) == "TTO_POSCO2" })
	If lRet .And. nIndex > 0
		lRet := MNT995WTTO('TTO_POSCO2')
		If lRet
			nPOSOLD2 := aRotAuto[nIndex][2]
			nPOSCON2 := aRotAuto[nIndex][2]

			lRet := MNT995VTTO('TTO_POSCO2')
		EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNA995CARG
Processo para carregar os dados recebidos do execauto (Rotina Automática)

@param nOpc   , Numérico - Código da Operação (incluir/alterar/excluir)

@author Diego de Oliveira.
@since 16/01/2020
@return Lógico, Prossegue ou não com a inserção.
/*/
//---------------------------------------------------------------------
Static Function MNA995CARG(nOpc)

	Local lRet	   := .T.
	Local nPos	   := 0
	Local nPosPne  := 0
	Local nPneu1   := 0
	Local nCalAtu  := 0
	Local nSulco1  := 0
	Local nSulco2  := 0
	Local nSulco3  := 0
	Local nCalRea  := 0

	InitTire() //Alimenta os arrays de Calibragem e Medição de Sulco

	//Posiciona para exclusão/alteração
	If l995auto .And. nOpc <> 3
		dbSelectArea("TTO")
		dbSetOrder(2) //TTO_FILIAL + DTOS(TTO_DRCALI) + TTO_HRCALI + TTO_BEMPAI
		If dbSeek(xFilial("TTO")+DTOS(dData)+cHrCal+cBem)
			cNum995 := TTO->TTO_NUMCAL
		Else
			Help(' ', 1, STR0013,,STR0160, 1, 0,,,,,,) //"Calibragem/Medição de Sulco não encontrada"
			lRet := .F.
		EndIf
	EndIf

	For nPos := 1 To Len(aCalAuto)

		//Atribui dados para utilização da rotina com informações do array execauto
		nPneu1	 := aScan(aCalAuto[nPos],{|x| Upper(AllTrim(x[1])) == "TTP_PNEU" })
		nCalAtu	 := aScan(aCalAuto[nPos],{|x| Upper(AllTrim(x[1])) == "TTP_CALATU" })
		nCalRea	 := aScan(aCalAuto[nPos],{|x| Upper(AllTrim(x[1])) == "TTP_CALREA" })
		nSulco1	 := aScan(aCalAuto[nPos],{|x| Upper(AllTrim(x[1])) == "TTP_SULCO1" })
		nSulco2	 := aScan(aCalAuto[nPos],{|x| Upper(AllTrim(x[1])) == "TTP_SULCO2" })
		nSulco3	 := aScan(aCalAuto[nPos],{|x| Upper(AllTrim(x[1])) == "TTP_SULCO3" })

		If nPneu1 == 0
			// Quando campo Pneu não está na estrutura
			Help(' ', 1, STR0070,,STR0165, 1, 0,,,,,,) //'Código do pneu não encontrado'
			lRet := .F.
		EndIf

		dbSelectArea("ST9")
		dbSetOrder(1)
		If lRet .And. !dbSeek(xFilial("ST9") + aCalAuto[nPos, nPneu1, 2])
			// Quando pneu não existe
			Help(' ', 1, STR0070,,aCalAuto[nPos, nPneu1, 2] + space(1) + STR0166, 1, 0,,,,,,) //'Código do pneu inválido'
			lRet := .F.
		EndIf

		If lRet
			cPneuAtu := aCalAuto[nPos, nPneu1, 2]

			//Procura a posição do Pneu no aPNEUSINI para buscar a medida do pneu
			nPosPne := aScan(aPNEUSINI,{|x| Alltrim(x[__CODBEM__]) == Alltrim( cPneuAtu ) })
			nCalMin := 0
			nCalMax := 0

			dbSelectArea("TQX")
			dbSetOrder(1)
			If nPosPne > 0 .And. dbSeek(xFilial("TQX")+aPNEUSINI[nPosPne][__MEDIDA__]+ST9->T9_TIPMOD)
				nCalMin  := TQX->TQX_CALMIN
				nCalMax  := TQX->TQX_CALMAX
			EndIf

			M->TTP_CALATU := IIf(nCalAtu > 0, aCalAuto[nPos, nCalatu, 2],0)
			M->TTP_CALREA := IIf(nCalRea > 0, aCalAuto[nPos, nCalRea, 2],0)
			M->TTP_SULCO1 := IIf(nSulco1 > 0, aCalAuto[nPos, nSulco1, 2],0)
			M->TTP_SULCO2 := IIf(nSulco2 > 0, aCalAuto[nPos, nSulco2, 2],0)
			M->TTP_SULCO3 := IIf(nSulco3 > 0, aCalAuto[nPos, nSulco3, 2],0)

			nPosPne := aScan(aBEMLOC,{|x| Alltrim( x[__CODBEM__] ) == Alltrim( cPneuAtu ) })

			If nPosPne > 0

				//--------------------------------------------
				// Valida e salva informações do pneu atual
				//--------------------------------------------
				lRet := ChangeTire( , nPosPne )

			Else
				//Verificação de pneu de outra estrutura
				Help(' ', 1, STR0070,,STR0148+space(1)+cPneuAtu+STR0161, 1, 0,,,,,,) // "Pneu não é desta estrutura."
				lRet := .F.
			EndIf

		EndIf

		If !lRet
			Exit
		EndIf

	Next nPos

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} fAtLeastOne
Valida se pelo menos um valor foi informado

@param nOpc, numérico, código da Operação (incluir/alterar/excluir)
@author Maria Elisandra de Paula
@since 28/10/2021
@return boolean, se obteve sucesso
/*/
//---------------------------------------------------------------------
Static Function fAtLeastOne( nOpc )

	Local lRet := .T.
	Local nX   := 0

	If nOpc == 3 .Or. nOpc == 4

		lRet := .F.

		//-----------------------------------------------------------------------------------
		// Verifica se há pelo menos uma informação de pneu informado, de Calib. ou medição
		//-----------------------------------------------------------------------------------
		For nX := 1 To Len( aBemLoc )

			If aCalibra[nX][__nCalAfe__] > 0 .Or. ;// aferida
				aCalibra[nX][__nCalRea__] > 0 .Or. ; // realizada
				aMedicao[nX][__nSulco1__] > 0 .Or. ; // sulco 1
				aMedicao[nX][__nSulco2__] > 0 .Or. ; // sulco 2
				aMedicao[nX][__nSulco3__] > 0 // sulco 3

				lRet := .T.

				Exit

			EndIf

		Next nX

		If !lRet
			Help(' ', 1, STR0070,,STR0168, 1, 0,,,,,,) // "Nenhum campo foi informado. Deve haver pelo menos um campo maior que zero."
		EndIf

	EndIf

Return lRet 
