#include "MDTA450.ch"
#include "Protheus.ch"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA450
Programa de Cadastro de Exames por Funcao

@return Nil

@author Denis Hyroshi de Souza
@since 24/06/2005
/*/
//---------------------------------------------------------------------
Function MDTA450()

	//Armazena variaveis p/ devolucao (NGRIGHTCLICK)
	Local aNGBEGINPRM := NGBEGINPRM( )

	Private aRotina := MenuDef()
	Private lSigaMdtPS := SuperGetMv("MV_MDTPS",.F.,"N") == "S"
	Private cCadastro  := OemtoAnsi(STR0001) //"Exames por Função"
	Private CHKDEL     := {}, bNGGRAVA
	Private cPrograma  := "MDTA450"
	Private aVetinr    := {}

	If FindFunction("MDTRESTRI") .AND. !MDTRESTRI(cPrograma)
		
		// Devolve variaveis armazenadas (NGRIGHTCLICK)
		NGRETURNPRM(aNGBEGINPRM)
		Return .F.
	EndIf

	//Se for prestador de serviço
	If lSigaMdtPS
		DbSelectArea("TOS")
		Set Filter To TOS_CLIENT == SA1->A1_COD .and. TOS_LOJA == SA1->A1_LOJA
		DbSetOrder(1)
		mBrowse(06,01,22,75,"TOS")
	Else
		DbSelectArea("SRJ")
		DbSetOrder(1)
		mBrowse(06,01,22,75,"SRJ")
	EndIf

	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT450EXAM
Inclusão / Alteração / Exclusão de exames

@param cAlias, Caractere, Alias da tabela
@param nReg, Numérico, Numero do registro posicionado na tabela
@param nOpcx, Numérico, Valor da operação a ser relizada

@return .T.

@author Denis Hyroshi de Souza
@since 11/08/2000
/*/
//---------------------------------------------------------------------
Function MDT450EXAM(cAlias,nReg,nOpcx)

	Local i
	Local oDlg, oPanelTop, oPanelMid, oPnlTOT
	Local aNoFields := {}
	Local lBlockBt := If(SuperGetMV("MV_NG2SEG",.T.,"2") == "1",.F.,.T.) .AND. !(SuperGetMV("MV_MDTPS",.F.,"N") == "S")
	Private oGet
	Private cFaixa := "  "
	Private aHeader := {}
	Private aCols := {}
	Private lValDel := .T.

	//Variaveis de tamanho de tela e objetos
	Private aSize := MsAdvSize(,.F.,430), aObjects := {}
	Aadd(aObjects,{050,050,.T.,.T.})
	Aadd(aObjects,{020,020,.T.,.T.})
	Aadd(aObjects,{100,100,.T.,.T.})
	aInfo := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.T.)

	// Verifica se existe algum dado no arquivo
	dbSelectArea( cAlias )
	dbSetOrder(1)

	FOR i := 1 TO FCount()
		x   := "m->" + FieldName(i)
		&x. := FieldGet(i)
	Next i

	Private cSeekTON := 'xFilial("TON")+SRJ->RJ_FUNCAO'
	Private cLoopTON := 'TON_FILIAL+TON_CODFUN == '+cSeekTON
	If lSigaMdtPS
		cSeekTON := 'xFilial("TON")+TOS->TOS_CODFUN+TOS->TOS_CLIENT+TOS->TOS_LOJA'
		cLoopTON := 'TON_FILIAL+TON_CODFUN+TON_CLIENT+TON_LOJA == '+cSeekTON
	Endif

	cALIAS := "TON"
	dbSelectArea("TON")
	dbSetOrder(If(lSigaMdtPS,1,3))
	dbSeek(&cSeekTON.)

	// Monta a entrada de dados do arquivo
	Private aTELA := {},aGETS := {}, aChoice := {}

	// Monta o cabecalho
	aAdd(aNoFields, 'TON_CODFUN')
	aAdd(aNoFields, 'TON_CLIENT')
	aAdd(aNoFields, 'TON_LOJA')
	aAdd(aNoFields, 'TON_DESFUN')

	If lSigaMdtps
		#IFDEF TOP
			cQuery := "SELECT * FROM "+RetSqlName("TON")+" TON WHERE TON.TON_FILIAL = '"+xFilial("TON")+"' AND TON.TON_CODFUN = '"+;
						TOS->TOS_CODFUN+"' AND TON.TON_CLIENT = '"+TOS->TOS_CLIENT+"' AND TON.TON_LOJA = '"+TOS->TOS_LOJA+"' AND TON.D_E_L_E_T_ = ' '"
			FillGetDados( 4, "TON", 1, xFilial("TON")+TOS->TOS_CODFUN+TOS->TOS_CLIENT+TOS->TOS_LOJA, {|| "TON->TON_FILIAL + TON->TON_CODFUN + TON->TON_CLIENT + TON->TON_LOJA"}, {|| .T.},aNoFields,,,cQuery)
		#ELSE
			cKEY := "TOS->TOS_CODFUN+TOS->TOS_CLIENT+TOS->TOS_LOJA"
			cGET := "TON->TON_FILIAL == '"+xFilial("TON")+"' .And. TON->TON_CODFUN+TON->TON_CLIENT+TON->TON_LOJA == '" + TOS->TOS_CODFUN+TOS->TOS_CLIENT+TOS->TOS_LOJA + "'"
			FillGetDados( 4, "TON", 1, cKey, {|| }, {|| .T.},aNoFields,,,,{|| NGMontaAcols("TON",&cKEY,cGET)})
		#ENDIF
	Else
		#IFDEF TOP
			cQuery := "SELECT * FROM "+RetSqlName("TON")+" TON WHERE TON.TON_FILIAL = '"+xFilial("TON")+"' AND TON.TON_CODFUN = '"+;
						SRJ->RJ_FUNCAO+"' AND TON.D_E_L_E_T_ = ' '"
			FillGetDados( 4, "TON", 1, xFilial("TON")+SRJ->RJ_FUNCAO, {|| "TON->TON_FILIAL + TON->TON_CODFUN"}, {|| .T.},aNoFields,,,cQuery)
		#ELSE
			cKEY := "SRJ->RJ_FUNCAO"
			cGET := "TON->TON_FILIAL == '"+xFilial("TON")+"' .And. TON->TON_CODFUN == '" + SRJ->RJ_FUNCAO + "'"
			FillGetDados( 4, "TON", 1, cKey, {|| }, {|| .T.},aNoFields,,,,{|| NGMontaAcols("TON",&cKEY,cGET)})
		#ENDIF
	EndIf

	If Empty(aCols)
	aCols := BlankGetd(aHeader)
	EndIf

	dbSelectArea("SRJ")
	If lSigaMdtPS
		dbSetorder(1)
		dbSeek(xFilial("SRJ")+TOS->TOS_CODFUN)
	Endif
	cCBO  := SRJ->RJ_CBO
	If SRJ->(FieldPos("RJ_CODCBO")) > 0
		If !Empty(SRJ->RJ_CODCBO)
			cCBO := SRJ->RJ_CODCBO
		Endif
	Endif

	nOpca  := 0
	Inclui := .T.
	Altera := .F.

	DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd Pixel

		oPnlTOT := TPanel():New( , , , oDlg , , , , , , , , .F. , .F. )
		oPnlTOT:Align := CONTROL_ALIGN_ALLCLIENT


		oPanelTop := TPanel():New(,,,oPnlTOT,,,,,RGB(255,255,255),, aPosObj[1,3], .F., .F. )
		oPanelTop:Align := CONTROL_ALIGN_TOP

		RegToMemory("SRJ",.F.)
		//Monta aChoice
		aADD(aChoice,"RJ_FUNCAO")
		aADD(aChoice,"RJ_DESC")
		aADD(aChoice,"RJ_CARGO")
		If SRJ->(FieldPos("RJ_CODCBO")) > 0
			aADD(aChoice,"RJ_CODCBO")
		Else
			aADD(aChoice,"RJ_CBO")
		Endif

		//Monta enchoice de Funcao
		oEnchoice := Msmget():New("SRJ", SRJ->(Recno()),2,,,,aCHOICE,,,3,,,,oPanelTop,,,,,.T.,)
		oEnchoice:oBox:Align := CONTROL_ALIGN_TOP

		oPanelMid := TPanel():New(,,,oPnlTOT,,,,,RGB(255,255,255),, 20, .F., .F. )
		oPanelMid:Align := CONTROL_ALIGN_BOTTOM

		@ 08,004 SAY OemToAnsi(STR0014) OF oPanelMid PIXEL//"Faixa Periodica - Padrao"
		@ 04,070 MSGET cFaixa PICTURE PesqPict( "TMQ" , "TMQ_FAIXA" ) VALID (If(Empty(cFaixa),.T.,ExistCpo("TMQ",cFaixa))) F3 "TMQ" SIZE 25,10 OF oPanelMid PIXEL HasButton
		@ 03,110 BUTTON STR0015 SIZE 40,12 PIXEL ACTION (MDT450MLT()) OF oPanelMid  When lBlockBt//"&Todos Exames"

		dbSelectArea("TON")
		oGet := MSGetDados():New(aPosObj[3,1],aPosObj[3,2],aPosObj[3,3],aPosObj[3,4],nOpcx,"MDT450LinOk() .AND. PutFileInEof('TON')","MDT450LinOk(.T.)","",.T.,,,,3000,,,,)
		oGet:oBrowse:Align := CONTROL_ALIGN_BOTTOM

		//Implementa Click da Direita
		If Len(aSMenu) > 0
			NGPOPUP(aSMenu,@oMenu)
			oDlg:bRClicked	:= { |o,x,y| oMenu:Activate(x,y,oDlg)}
			oPanelTop:bRClicked := { |o,x,y| oMenu:Activate(x,y,oDlg)}
			oPanelMid:bRClicked := { |o,x,y| oMenu:Activate(x,y,oDlg)}
		Endif
		PutFileInEof("TON")

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpca:=1,if(oGet:TudoOk(),oDlg:End(),nOpca := 0)},{||oDlg:End(),nOpca := 0})

	If nOpcA == 1
		Begin Transaction
		NG450GRAV(cAlias,nOpca)
		EvalTrigger()
		End Transaction
	Endif

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NG450GRAV
Grava os dados na TON - Exame por Função

@return .T.

@param cAlias - Alias da tabela utilizada para a gravação
@param nOpcao - Opção desejadas

@sample MDTA450

@author Guilherme Freudenburg
@since 03/02/2016
/*/
//---------------------------------------------------------------------
Function NG450GRAV( cAlias , nOpcao )

	Local nX, nY
	Local aArea   := GetArea() //Salva área posicionada
	Local nCODEXA := aSCAN( aHEADER, { |x| AllTrim( Upper( X[ 2 ] ) ) == "TON_CODEXA" } ) //Verifica a posição do campo de Código de Exame.
	Local nIdx 	  := If( lSigaMdtPS , 1 , 3 ) //Altera o Indice da TON
	Local nPos 	  := 0

	ASORT( aCols , , , { | x , y | x[ Len( aCols[ n ] ) ] .and. !y[ Len( aCols[ n ] ) ] } )//Ordena pelos registros deletados.

	If ExistBlock( 'MDTA4501' ) // Ponto de entrada para gravar exames por função
		Execblock( 'MDTA4501', .F., .F. )
	Else
		For nX := 1 To Len( aCols )
			If !Empty( aCols[ nX , nCODEXA ] )
				If !aCols[ nX , Len( aCols[ nX ] ) ] //Se não for excluido
					dbSelectArea( cAlias )
					dbSetOrder(nIdx)
					If dbSeek( xFilial( cAlias ) + If( lSigaMdtPs , cCliMdtPs , "" ) + SRJ->RJ_FUNCAO + aCols[ nX , nCODEXA ] )//Verifica se registro já existe
						RecLock("TON",.F.) //Altera o registro
					Else
						RecLock("TON",.T.) //Inclui o registro
					Endif
					For nY := 1 to FCount()//Percorre todos os campos da tabela gravando as informacoes, caso necessaria inclusao específica, feita condicao via If/ElseIf
						If "_FILIAL" $ Upper( FieldName( nY ) )
							FieldPut( nY , xFilial( cAlias ) ) //Filial
						ElseIf "_CODFUN" $ Upper( FieldName( nY ) )
							FieldPut( nY , SRJ->RJ_FUNCAO ) //Código do exame
						ElseIf "_DESFUN" $ Upper( FieldName( nY ) )
							FieldPut( nY , SRJ->RJ_DESC ) //Descrição do Exame
						ElseIf "_CLIENT" $ Upper( FieldName( nY ) )
							FieldPut( nY , SA1->A1_COD ) //Cliente
						ElseIf "_LOJA" $ Upper( FieldName( nY ) )
							FieldPut( nY , SA1->A1_LOJA ) //Loja
						ElseIf (nPos := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == AllTrim(Upper(FieldName( nY ))) })) > 0//Caso posicao do campo esteja no aHeader
							FieldPut( nY , aCols[ nX , nPos])
						Endif
					Next nY
					( cAlias )->( MsUnLock() )
				Else //Caso seja excluido
					If dbSeek(xFilial( cAlias ) + If( lSigaMdtPs , cCliMdtPs , "" ) + SRJ->RJ_FUNCAO + aCols[ nX , nCODEXA ] ) //Caso seja excluido más exista na tabela
						RecLock( cAlias , .F. )
						( cAlias )->( dbDelete() )//Deleta registro
						( cAlias )->( MsUnLock() )
					EndIf
				Endif
			Endif
		Next i

		//Verifica toda a tabela, para que delete os registros caso este nao estejam no aCols ou seja 'exclusao'
		dbSelectArea( cAlias )
		dbSetOrder( nIdx )
		dbSeek( xFilial( cAlias ) + If( lSigaMdtPs , cCliMdtPs , "" ) + SRJ->RJ_FUNCAO )
			While ( cAlias )->( !Eof() ) .And. TON->TON_CODFUN == SRJ->RJ_FUNCAO .And. If( lSigaMdtPs , cCliMdtPs == TON->TON_CLIENT+TON->TON_LOJA , .T. )
				If  aScan( aCols, { |x| x[ nCODEXA ] == TON->TON_CODEXA }) == 0
					RecLock( cAlias , .F. )
					( cAlias )->( dbDelete() )
					( cAlias )->( MsUnLock() )
				Endif
				dbSelectArea( cAlias )
				( cAlias )->( dbSkip() )
			End
	EndIf

	RestArea(aArea)//Retorna área

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT450LinOk
Critica se a linha digitada esta' Ok

@param lFim, boolean, se verdadeiro indica que será efetuada a validação
					  de toda a grid (tudoOk), se falso validação da 
					  linha (linOk)

@return .T./.F.

@author Deivys Joenck
@since 11/08/2000
/*/
//---------------------------------------------------------------------
Function MDT450LinOk(lFim)

	Local f
	Local nCodExa:= aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TON_CODEXA"})
	Local nFaixa := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TON_FAIXA"})
	Local nTipoEx:= aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TON_TIPOEX"})
	Default lFim := .F.

	If Len(aCols) == 1
		If Empty(aCols[1][nCodExa]) .or. aCols[1][Len(aCols[1])]
			Return .T.
		Endif
	Endif
	//Percorre aCols
	For f:= 1 to Len(aCols)
		If !aCols[f][Len(aCols[f])]
			If f == n .or. lFim
				//Verifica se os campos obrigatórios estão preenchidos
				If Empty(aCols[f][nCodExa])
					//Mostra mensagem de Help
					Help(1," ","OBRIGAT2",,aHeader[nCodExa][1],3,0)
					Return .F.
				Endif
				If Empty(aCols[f][nTipoEx])
					//Mostra mensagem de Help
					Help(1," ","OBRIGAT2",,aHeader[nTipoEx][1],3,0)
					Return .F.
				ElseIf aCols[f][nTipoEx] $ "2 -6 -7 -8 -12-13-14" .or. aCols[f][nTipoEx] == "11"
					If Empty(aCols[f][nFaixa])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeader[nFaixa][1],3,0)
						Return .F.
					Endif

				Endif
			Endif
			//Verifica se é somente LinhaOk
			If f <> n .and. !aCols[n][Len(aCols[n])]
				If aCols[f][nCodExa] == aCols[n][nCodExa]
					Help(" ",1,"JAEXISTINF")
					Return .F.
				Endif
			Endif
		Endif
	Next f

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} D450CHK
Consiste a existencia de outro codigo na GetDados

@return lRet, boolean

@author Deivys Joenck
@since 11/08/2000
/*/
//---------------------------------------------------------------------
Function D450CHK()

	Local aArea := GetArea()
	Local f,lRet := .T.
	Local nCodExa:= aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TON_CODEXA"})

	If !ExistCpo("TM4",M->TON_CODEXA)
		Return .F.
	Endif

	//Percorre aCols
	For f:= 1 to Len(aCols)
		If !aCols[f][Len(aCols[f])]
			//Verifica se é somente LinhaOk
			If f <> n
				If aCols[f][nCodExa] == M->TON_CODEXA
					Help(" ",1,"JAEXISTINF")
					Return .F.
				Endif
			Endif
		Endif
	Next f
	If lSigaMdtPS .and. lRet
		If !MdtTemTOL(/*Cliente*/,/*Loja*/,M->TON_CODEXA,.T.)
			lRet := .F.
			RestArea(aArea)
			Return lRet
		Endif

		lAchoExa := .F.
		DbSelectArea("TOU")
		DbSetOrder(2)
		DbSeek(xFilial("TOU")+cCliMdtPs)
		While !EOF() .and. xFilial("TOU")+cCliMdtPs == TOU->(TOU_FILIAL+TOU_CLIENT+TOU_LOJAC)
			Dbselectarea("TOL")
			Dbsetorder(3)
			Dbseek(xFilial("TOL")+TOU->TOU_FORNEC+TOU->TOU_LOJAF)
			While !eof() .and. xFilial("TOL")+TOU->TOU_FORNEC+TOU->TOU_LOJAF == TOL->(TOL_FILIAL+TOL_FORNEC+TOL_LOJAFO) .and. !lAchoExa
				If TOL->TOL_STATUS $ "1/3" .and. TOL->TOL_TIPCON == "2"
					Dbselectarea("TOM")
					Dbsetorder(1)
					Dbseek(xFilial("TOM")+TOL->TOL_NUMERO)
					While !eof() .and. xFilial("TOM")+TOL->TOL_NUMERO == TOM->TOM_FILIAL+TOM->TOM_NUMERO .and. !lAchoExa
						If Alltrim("MDTE"+M->TON_CODEXA) == Alltrim(TOM->TOM_SERVIC)
							lAchoExa := .T.
						Endif
						Dbselectarea("TOM")
						Dbskip()
					End
				Endif
				Dbselectarea("TOL")
				Dbskip()
			End

			DbSelectArea("TOU")
			DbSkip()
		End

	Endif

	RestArea(aArea)

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT450InBw
Inicializador de browse

@param nTipo, numeric, define se busca a descrição do exame ou da função

@return cDesc, caracter, retorna a descrição de acordo com 'nTipo'

@author Denis Hyroshi de Souza
@since 11/08/2000
/*/
//---------------------------------------------------------------------
Function MDT450InBw(nTipo)

	Local aArea  := GetArea()
	Local cDesc  := " "

	If nTipo == 1
		cDesc := Posicione("TM4",1,xFilial("TM4")+TON->TON_CODEXA,"TM4_NOMEXA")
	Elseif nTipo == 2
		cDesc := Posicione("SRJ",1,xFilial("SRJ")+TON->TON_CODFUN,"RJ_DESC")
	Endif

	RestArea(aArea)

Return cDesc

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT450FAX
Inicializador de browse

@return .T.

@author Denis Hyroshi de Souza
@since 11/08/2000
/*/
//---------------------------------------------------------------------
Function MDT450FAX()

	Local nPOS := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TON_FAIXA"})

	If empty(aCols[n,nPOS])
		aCols[n,nPOS] := cFaixa
		lRefresh := .T.
	Endif

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT450MLT
Retorna os epis da funcao exercida pelo funcionario

@return .T.

@author Denis Hyroshi de Souza
@since 01/02/2003
/*/
//---------------------------------------------------------------------
Function MDT450MLT()

	Local x, y
	Local nPos1, nPos2

	Local oDlgF
	Local oFont
	Local oMARK1
	Local oMenu
	Local oTempTRB1

	Local lGrava    := .F.
	
	Local cCampo    := ''
	Local cRelac    := ''
	Local nCps      := 0
	Local aColsAux  := BlankGetd(aHeader)[ 1 ]
	Local aArea     := GetArea()

	Private cAliasTRB1 := GetNextAlias()
	Private cMARCA     := GetMark()
	Private aVetinr    := {}

	nPOS1 := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TON_CODEXA"})
	nPOS2 := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TON_DESEXA"})

	lInverte:= .F.

	lQuery := .T.

	dbSelectArea("TOH")

	aDBF := {}
	AADD(aDBF,{ "TOH_OK"     , "C" ,02, 0 })
	AADD(aDBF,{ "TOH_CODEXA" , "C" ,If(TAMSX3("TM4_EXAME")[1] < 1, 6, TAMSX3("TM4_EXAME")[1]), 0 })
	AADD(aDBF,{ "TOH_NOMEXA" , "C" ,30, 0 })

	aTRB1 := {}
	AADD(aTRB1,{ "TOH_OK"    ,NIL," ",})
	AADD(aTRB1,{ "TOH_CODEXA",NIL,STR0019,})  //"Exame"
	AADD(aTRB1,{ "TOH_NOMEXA",NIL,STR0020,})  //"Descricao"

	//Cria TRB
	oTempTRB1 := FWTemporaryTable():New( cAliasTRB1, aDBF )
	oTempTRB1:AddIndex( "1", {"TOH_NOMEXA"} )
	oTempTRB1:AddIndex( "2", {"TOH_CODEXA"} )
	oTempTRB1:Create()

	Dbselectarea("TM4")
	Dbsetorder(1)
	Dbseek(xFilial("TM4"))
	While !eof() .and. TM4->TM4_FILIAL == xFilial("TM4")

		If lSigaMdtPS
			If !MdtTemTOL(/*Cliente*/,/*Loja*/,TM4->TM4_EXAME,.F.)
				Dbselectarea("TM4")
				Dbskip()
				Loop
			Endif
		Endif

		(cAliasTRB1)->(DbAppend())
		If aSCAN(aCols,{|x| X[nPOS1] == TM4->TM4_EXAME}) > 0
			(cAliasTRB1)->TOH_OK := cMarca
		Endif
		(cAliasTRB1)->TOH_CODEXA := TM4->TM4_EXAME
		(cAliasTRB1)->TOH_NOMEXA := TM4->TM4_NOMEXA

		Dbselectarea("TM4")
		Dbskip()
	End

	Dbselectarea(cAliasTRB1)
	Dbsetorder(1)
	Dbgotop()
	If (cAliasTRB1)->(Reccount()) <= 0
		oTempTRB1:Delete()
		RestArea(aArea)
		lRefresh := .T.
		Msgstop(STR0021,STR0017)  //"Não existe exames cadastrados."  //"ATENÇÃO"
		Return .T.
	Endif
	//Organiza tela por ordem de código
	Dbselectarea(cAliasTRB1)
	Dbsetorder(2)//"TOH_CODEXA"
	(cAliasTRB1)->(DbGoTop())

	nOpca1 := 2
	DEFINE FONT oFont NAME "Arial" SIZE 0,-12
	DEFINE MSDIALOG oDlgF TITLE OemToAnsi(STR0035) From 11,10 To 32,94.5 OF oMainWnd  //"Exames"

	oMARK1 := MsSelect():NEW(cAliasTRB1,"TOH_OK",,aTRB1,@lINVERTE,@cMARCA,{20,5,155,330})
	oMARK1:bMARK := {|| MDT695MKFU(cMarca,lInverte)}
	oMARK1:oBROWSE:lHASMARK := .T.
	oMARK1:oBROWSE:lCANALLMARK := .T.
	oMARK1:oBROWSE:bALLMARK := {|| MDTA695INV(cMarca,.F.) }
	oMARK1:oBROWSE:ALIGN := CONTROL_ALIGN_ALLCLIENT

	NgPopUp(asMenu,@oMenu)
	oDlgF:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlgF)}
	ACTIVATE MSDIALOG oDlgF ON INIT EnchoiceBar(oDlgF,{|| nOpca1 := 1,oDlgf:End()},{|| nOpca1 := 2,oDlgf:End()}) Centered

	If nOpca1 == 1

		aCols := {}

		Dbselectarea(cAliasTRB1)
		Set Filter To !Empty((cAliasTRB1)->TOH_OK)
		Dbgotop()
		While (cAliasTRB1)->(!EoF())

			lGrava := .T.
			For x := 1 to len(aCOLS)
				If (cAliasTRB1)->TOH_CODEXA == aCols[x][nPos1]
					lGrava := .F.
					Exit
				EndIf
			Next x

			If lGrava

				If Len( aCols ) <> 1 .Or. !Empty(aCols[ Len( aCols ), nPOS1 ])
					aAdd( aCols , aClone( aColsAux ) )
				EndIf

				For nCps := 1 To Len(aHeader)

					cCampo  := AllTrim(aHeader[ nCps, 2 ])
					cRelac  := GetSx3Cache( cCampo, "X3_RELACAO" )

					If cCampo == "TON_CODEXA"
						aCols[ Len( aCols ) , nCps ] := (cAliasTRB1)->TOH_CODEXA
					ElseIf cCampo == "TON_DESEXA"
						aCols[ Len( aCols ) , nCps ] := (cAliasTRB1)->TOH_NOMEXA
					ElseIf cCampo == "TON_FAIXA"
						aCols[ Len( aCols ) , nCps ] := cFaixa
					ElseIF ExistIni(cCampo)
						aCols[ Len( aCols ) , nCps ] := InitPad(cRelac)
					Endif

				Next cCps

			Endif

			(cAliasTRB1)->(dbSkip())
		End

		If Len(aCols) == 0
			aCols := BlankGetD(aHeader)
		Endif

	EndIf

	oTempTRB1:Delete()

	RestArea(aArea)
	lRefresh := .T.

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT450CPEX
Copia perfil de uma empresa para varias outras

@return .T.

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function MDT450CPEX()
	
	Local OldRot, nOpca, i
	Local aArea := GetArea()
	Local oPnlTop
	Local oTempTRBF

	Private oDlg, oGet, oMenu
	Private aExames := {}

	Private cDeFuncao  := Space(Len(SRJ->RJ_FUNCAO))
	Private cAteFuncao := Space(Len(SRJ->RJ_FUNCAO))
	Private cCli_O     := SRJ->RJ_FUNCAO
	Private cNom_O     := SRJ->RJ_DESC
	
	If lSigaMdtPS
		cCli_O      := TOS->TOS_CODFUN
		cNom_O      := TOS->TOS_DESFUN
	Endif

	cProgOld := cPrograma
	cPrograma := "MDTA120"

	If lSigaMdtPS
		DbSelectArea("TOS")
		Set Filter To
	Endif

	OldRot := aCLONE(aROTINA)
	aROTINA := {}

	lInverte:= .F.
	cMARCA  := GetMark()
	lQuery := .T.

	aDBF := {}
	AADD(aDBF,{"OK"    ,"C",02,0})
	AADD(aDBF,{"CODIGO","C",Len(SRJ->RJ_FUNCAO),0})
	AADD(aDBF,{"NOME"  ,"C",30,0})

	aTRB1 := {}
	AADD(aTRB1,{"OK"    ,NIL," "		,})
	AADD(aTRB1,{"CODIGO",NIL,STR0022	,}) //"Funcao"
	AADD(aTRB1,{"NOME"	,NIL,STR0020    ,}) //"Descricao"

	//Cria TRB
	oTempTRBF := FWTemporaryTable():New( "TRBFUN", aDBF )
	oTempTRBF:AddIndex( "1", {"CODIGO"} )
	oTempTRBF:Create()

	nOpcx := 3
	nOpca := 1
	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0023) From 9,0 To 35.5,84.5 OF oMainWnd  //"Copiar Exames"

	oDlg:lEscClose := .F.

	oPnlTop := TPanel():New(00,00,,oDlg,,,,,,0,60,.F.,.F.)
		oPnlTop:Align := CONTROL_ALIGN_TOP

	@ 03, 06  TO 55, 140 LABEL STR0024  OF oPnlTop PIXEL //"Origem"
	@ 03, 150 TO 55, 330 LABEL STR0025 OF oPnlTop PIXEL  //"Destino"

	@ 12,13 SAY STR0022  SIZE 33,7 OF oPnlTop PIXEL  //"Função"
	@ 24,13 SAY STR0020  SIZE 33,7 OF oPnlTop PIXEL  //"Descrição"

	@ 12,50  MSGET cCli_O SIZE 050,10 OF oPnlTop PIXEL PICTURE "@!" F3 "SRJ" VALID (MDTA450TOS(4)) HASBUTTON
	@ 24,50  MSGET cNom_O SIZE 080,10 OF oPnlTop PIXEL PICTURE "@!" WHEN .F.

	@ 12,163 SAY STR0026 SIZE 33,7 OF oPnlTop PIXEL  //"De Função"
	@ 12,200 MSGET cDeFuncao SIZE 050,10 OF oPnlTop PIXEL PICTURE "@!" F3 "SRJ" VALID (MDTA450TOS(1)) HASBUTTON

	@ 24,163 SAY STR0027 SIZE 33,7 OF oPnlTop PIXEL  //"Ate Função"
	@ 24,200 MSGET cAteFuncao SIZE 050,10 OF oPnlTop PIXEL PICTURE "@!" F3 "SRJ" VALID (MDTA450TOS(2)) HASBUTTON

	@ 39,165 BUTTON STR0002 OF oPnlTop SIZE 35,12 PIXEL ACTION (MDT450PESQ(),oMark:oBrowse:Refresh(.T.))  //"Pesquisa"

	oMARK := MsSelect():NEW("TRBFUN","OK",,aTRB1,@lINVERTE,@cMARCA,{70,06,200,330},,,oDlg)
	oMARK:bMARK := {|| MDTA450MAQ(cMarca,lInverte)}
	oMARK:oBROWSE:lHASMARK := .T.
	oMARK:oBROWSE:lCANALLMARK := .T.
	oMARK:oBROWSE:bALLMARK := {|| MDTA450INV(cMarca) }
	oMARK:oBROWSE:ALIGN := CONTROL_ALIGN_ALLCLIENT

	NgPopUp(asMenu,@oMenu)
	oDlg:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}
	ACTIVATE MSDIALOG oDlg ON INIT ( EnchoiceBar(oDlg,{||nOpca:=2,if(MDTA450TOS(3),oDlg:End(),nOpca := 1)},{||nOpca:=1,if(NG450TdOk(.F.),oDlg:End(),nOpca := 1)}))

	If nOpca = 2

		If ExistBlock( 'MDTA4502' ) // Ponto de entrada para copiar exames por função

			Execblock( 'MDTA4502', .F., .F. )

		Else

			Dbselectarea("TRBFUN")
			Dbgotop()
			While !EOF()
				If TRBFUN->OK <> cMarca
					Dbselectarea("TRBFUN")
					Dbskip()
					Loop
				Endif
				If TRBFUN->CODIGO == cCli_O
					Dbselectarea("TRBFUN")
					Dbskip()
					Loop
				Endif

				Private cSeek1TON := 'xFilial("TON")+TRBFUN->CODIGO'
				Private cLoop1TON := cSeek1TON+" == TON->(TON_FILIAL+TON_CODFUN)"
				Private cSeek2TON := 'xFilial("TON")+cCli_O'
				Private cLoop2TON := cSeek2TON+" == TON->(TON_FILIAL+TON_CODFUN)"
				Private cChaveTON := 'xFilial("TON")+TRBFUN->CODIGO+TON->TON_CODEXA'

				If lSigaMdtPS
					cSeek1TON := 'xFilial("TON")+TRBFUN->CODIGO+cCliMdtPs'
					cLoop1TON := cSeek1TON+" == TON->(TON_FILIAL+TON_CODFUN+TON_CLIENT+TON_LOJA)"
					cSeek2TON := 'xFilial("TON")+cCli_O+cCliMdtPs'
					cLoop2TON := cSeek2TON+" == TON->(TON_FILIAL+TON_CODFUN+TON_CLIENT+TON_LOJA)"
					cChaveTON := 'xFilial("TON")+TRBFUN->CODIGO+cCliMdtPs+TON->TON_CODEXA'
				Endif

				//Apaga Dados antigos
				Dbselectarea("TON")
				DbSetOrder(If(lSigaMdtPS,1,3))
				DbSeek(&cSeek1TON.)
				While !EOF() .AND. &cLoop1TON.

					Dbselectarea("TON")
					RecLock("TON",.F.)
					DbDelete()
					MsUnLock("TON")
					Dbskip()

				End
				//Apaga Dados antigos

				Dbselectarea("TON")
				DbSetOrder(If(lSigaMdtPS,1,3))
				DbSeek(&cSeek2TON.)
				While !EOF() .AND. &cLoop2TON.
					aTONarea := TON->(getarea())

					Dbselectarea("TON")
					DbSetOrder(If(lSigaMdtPS,1,3))
					If DbSeek(&cChaveTON.)
						restarea(aTONarea)
						Dbselectarea("TON")
						Dbskip()
						Loop
					Endif

					restarea(aTONarea)

					FOR i := 1 TO FCount()
					x   := "m->" + FieldName(i)
					y   := "TON->" + FieldName(i)
					&x := &y
					Next i

					RecLock("TON",.T.)
					TON->TON_FILIAL := xFilial('TON')
					TON->TON_CODFUN := TRBFUN->CODIGO

					FOR i := 1 TO FCount()
					If FieldName(i) == "TON_FILIAL" .OR. FieldName(i) == "TON_CODFUN"
						Loop
					EndIf
					x   := "m->" + FieldName(i)
					y   := "TON->" + FieldName(i)
					&y := &x
					Next i
					Msunlock("TON")

					restarea(aTONarea)
					DbSkip()
				END

				Dbselectarea("TRBFUN")
				DbSkip()
			End

		EndIf

	EndIf

	oTempTRBF:Delete()
	aRotina := aCLONE(OldRot)
	RestArea(aArea)
	lRefresh := .T.

	cPrograma := cProgOld

	If lSigaMdtPS
		DbSelectArea("TOS")
		Set Filter To TOS_CLIENT == SA1->A1_COD .and. TOS_LOJA == SA1->A1_LOJA
	Endif

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA450TOS
Valida codigo do Cliente 

@return .T.

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function MDTA450TOS(nTipo)

	If nTipo == 1 .and. !Empty(cDeFuncao)
		If lSigaMdtPS
			If !ExistCpo("TOS",cDeFuncao+cCliMdtPs,1)
				Return .F.
			Endif
		Else
			If !ExistCpo("SRJ",cDeFuncao)
				Return .F.
			Endif
		Endif
		If !Empty(cAteFuncao) .And. cDeFuncao > cAteFuncao
			ShowHelpDlg(STR0036,{STR0039},2,{STR0040},2)//ATENÇÂO! "'De Funçao'não pode ser maior que 'Ate Função'""Favor, informar um valor menor para 'De Funçao'"
			Return .F.
		Endif
	ElseIf nTipo == 2 .and. cAteFuncao <> Replicate("Z",Len(cAteFuncao))
		If lSigaMdtPS
			If !ExistCpo("TOS",cAteFuncao+cCliMdtPs,1)
				Return .F.
			Endif
		Else
			If !ExistCpo("SRJ",cAteFuncao)
				Return .F.
			Endif
		Endif
		If cAteFuncao < cDeFuncao
			ShowHelpDlg(STR0036,{STR0037},2,{STR0038},2)//ATENÇÂO! "Ate Função não pode ser menor que De Funação !" "Informe um um valor maior para Ate Funçao. "
			Return .F.
		Endif
	ElseIf nTipo == 3
		If cAteFuncao < cDeFuncao .or. Empty(cAteFuncao)
			Help(" ",1,"DEATEINVAL")
			Return .F.
		Endif
		If lSigaMdtPS
			If !MsgYesNo( STR0029 + Alltrim(cNom_O)+ STR0030 +; //"Os exames da função " //" do cliente "
			Alltrim(NGSEEK("SA1",cCliMdtPs,1,"SA1->A1_NOME"))+;
			STR0031 )  //" serão copiados para as funções selecionadas. Confirma copia dos exames?"
				return .F.
			Endif
		Else
			If !MsgYesNo(STR0029 + Alltrim(cNom_O)+; //"Os exames da função "
				STR0031)  //" serão copiados para as funções selecionadas. Confirma copia dos exames?"
				return .F.
			Endif
		Endif
	ElseIf nTipo == 4
		If lSigaMdtPS
			If !ExistCpo("TOS",cCli_O+cCliMdtPs,1)
				Return .F.
			Endif
			cNom_O := NGSEEK("TOS",cCli_O,1,"TOS->TOS_DESFUN")
		Else
			If !ExistCpo("SRJ",cCli_O)
				Return .F.
			Endif
			cNom_O := NGSEEK("SRJ",cCli_O,1,"SRJ->RJ_DESC")
		Endif
	Endif

	lRefresh := .T.

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT450PESQ
Funcao que busca as funcoes  pelo filtro

@return .T.

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function MDT450PESQ()

	Local aArea := GetArea()
	Local aAreaTAB

	If lSigaMdtPS
		aAreaTAB := TOS->(GetArea())
	Else
		aAreaTAB := SRJ->(GetArea())
	Endif

	Dbselectarea("TRBFUN")
	Zap

	If lSigaMdtPS
		Dbselectarea("TOS")
		Dbsetorder(2)
		Dbseek(xFilial("TOS")+cCliMdtPs)
		While !eof() .and. xFilial("TOS") == TOS->TOS_FILIAL .and. TOS->TOS_CLIENT+TOS->TOS_LOJA <= cCliMdtPs
			If TOS->TOS_CODFUN >= cDeFuncao .and. TOS->TOS_CODFUN <= cAteFuncao
				Dbselectarea("TRBFUN")
				Dbgotop()
				If !Dbseek(TOS->TOS_CODFUN)
					RecLock("TRBFUN",.T.)
					TRBFUN->OK := cMarca
					TRBFUN->CODIGO := TOS->TOS_CODFUN
					TRBFUN->NOME   := TOS->TOS_DESFUN
					Msunlock("TRBFUN")
				Endif
			Endif
			Dbselectarea("TOS")
			Dbskip()
		End
	Else
		Dbselectarea("SRJ")
		Dbsetorder(1)
		Dbseek(xFilial("SRJ"))
		While !eof() .and. xFilial("SRJ") == SRJ->RJ_FILIAL
			If SRJ->RJ_FUNCAO >= cDeFuncao .and. SRJ->RJ_FUNCAO <= cAteFuncao
				Dbselectarea("TRBFUN")
				Dbgotop()
				If !Dbseek(SRJ->RJ_FUNCAO)
					RecLock("TRBFUN",.T.)
					TRBFUN->OK := cMarca
					TRBFUN->CODIGO := SRJ->RJ_FUNCAO
					TRBFUN->NOME   := SRJ->RJ_DESC
					Msunlock("TRBFUN")
				Endif
			Endif
			Dbselectarea("SRJ")
			Dbskip()
		End
	Endif
	Dbselectarea("TRBFUN")
	Dbgotop()

	RestArea(aAreaTAB)
	RestArea(aArea)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA450INV
Inverte Marcacao do Browse

@return .T.

@author Denis Hyroshi de Souza
@since 25/07/2006
/*/
//---------------------------------------------------------------------
Function MDTA450INV(cMarca)

	Local aArea := GetArea()

	Dbselectarea("TRBFUN")
	Dbgotop()
	While !eof()
		TRBFUN->OK := IF(TRBFUN->OK == "  ",cMARCA,"  ")
		Dbskip()
	End

	RestArea(aArea)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA450MAQ
Marcacao do Browse

@return .T.

@author Denis Hyroshi de Souza
@since 25/07/2006
/*/
//---------------------------------------------------------------------
Function MDTA450MAQ(cMarca,lInverte)
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NG450TdOk
Valida cancelamento de tela de copia de perfis

@return MsgYesNo, function, retorna uma mensagem de decisão

@author Denis Hyroshi de Souza
@since 15/08/2005
/*/
//---------------------------------------------------------------------
Function NG450TdOk(lTipo)
Return MsgYesNo(STR0032,STR0033)  //"Deseja cancelar a Geração de Copias de Exames?" //"AVISO"

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional
@type static function
@author Rafael Diogo Richter
@since 29/11/2006
@return array, opções do menu com o seguinte layout:
				Parametros do array a Rotina:
				1. Nome a aparecer no cabecalho
				2. Nome da Rotina associada
				3. Reservado
				4. Tipo de Transação a ser efetuada:
					1 - Pesquisa e Posiciona em um Banco de Dados
					2 - Simplesmente Mostra os Campos
					3 - Inclui registros no Bancos de Dados
					4 - Altera o registro corrente
					5 - Remove o registro corrente do Banco de Dados
				5. Nivel de acesso
				6. Habilita Menu Funcional

/*/
//-------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina := {}

	//Se for prestador de serviço
	If SuperGetMv("MV_MDTPS",.F.,"N") == "S"
		aRotina := { 	{STR0002, 'PesqBrw' , 0 , 1},;   //'Pesquisar'
						{STR0003, "NGCAD01" , 0 , 2},;   //'Visualizar'
						{STR0004, "NGCAD01" , 0 , 3},;   //'Incluir'
						{STR0005, "NGCAD01" , 0 , 4},;   //'Alterar'
						{STR0006, "NGCAD01" , 0 , 5},;   //'Excluir'
						{STR0007, 'MDT450EXAM', 0 , 4},; //'E&xames'
						{STR0008, 'MDT450CPEX', 0 , 4}}  //'C&opiar Exames'
	Else
		aRotina := { 	{STR0002, 'PesqBrw', 0 , 1},;  //'Pesquisar'
						{STR0003, "NGCAD01", 0 , 2},;  //'Visualizar'
						{STR0007, 'MDT450EXAM', 0 , 4},;  //'E&xames'
						{STR0008, 'MDT450CPEX' , 0 , 4}}  //'C&opiar Exames'
	EndIf

Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT450VLIN
Valida a alteracao do exame, se este ja esta gravado
Uso MDTA450 - When de Campos

@return Nil

@sample
MDT450VLIN()

@author Jackson Machado
@since 21/08/2012
/*/
//---------------------------------------------------------------------
Function MDT450VLIN()

	Local nRec, nAt

	If Type("oGet") == "O" .AND. SuperGetMV("MV_NG2SEG",.F.,"2") == "1" .AND. !(SuperGetMV("MV_MDTPS",.F.,"N") == "S")
		nAt := oGet:oBrowse:nAt
		nRec := aCols[nAt][Len(aCols[nAt])-1]
		If nRec > 0
			dbSelectArea("TON")
			dbGoTo(nRec)
		Endif
	Endif

Return .T.
