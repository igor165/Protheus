#INCLUDE "MDTA730.ch"
#Include "Protheus.ch"
#DEFINE _nVERSAO 2 //Versao do fonte
//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA730
Programa de Cadastro de Obras  

@return .T. 

@author Denis Hyroshi de Souza
@since 11/12/07
/*/
//---------------------------------------------------------------------
Function MDTA730 
Local aNGBEGINPRM := NGBEGINPRM(_nVERSAO)

//---------------------------------------------------------
// Define Array contendo as Rotinas a executar do programa
// ----------- Elementos contidos por dimensao ------------
// 1. Nome a aparecer no cabecalho
// 2. Nome da Rotina associada
// 3. Usado pela rotina
// 4. Tipo de Transa‡„o a ser efetuada
//    1 - Pesquisa e Posiciona em um Banco de Dados
//    2 - Simplesmente Mostra os Campos
//    3 - Inclui registros no Bancos de Dados  
//    4 - Altera o registro corrente
//    5 - Remove o registro corrente do Banco de Dados
//-------------------------------------------------------
PRIVATE aRotina := MenuDef()

//-------------------------------------------------------
// Define o cabecalho da tela de atualizacoes
//-------------------------------------------------------
PRIVATE cCadastro := OemtoAnsi(STR0001) //"Obras"
PRIVATE aSMENU := {}, aCHKDEL := {}, bNGGRAVA
PRIVATE cPrograma := "MDTA730"

Private aMemos := {}

If AMiIn( 35 ) // Somente autorizado para SIGAMDT
	dbSelectArea("SX3")
	dbSetOrder(2)
	If dbSeek("TLL_DESCLO")
		aAdd(aMemos,{"TLL_DESCLO","TLL_MEMOLO"})
	Endif
	If dbSeek("TLL_DESCEM")
		aAdd(aMemos,{"TLL_DESCEM","TLL_MEMOEM"})
	Endif
	If dbSeek("TLL_DESCIN")
		aAdd(aMemos,{"TLL_DESCIN","TLL_MEMOIN"})
	Endif
	If dbSeek("TLL_DESCPE")
		aAdd(aMemos,{"TLL_DESCPE","TLL_MEMOPE"})
	Endif
	If dbSeek("TLL_DESCSI")
		aAdd(aMemos,{"TLL_DESCSI","TLL_MEMOSI"})
	Endif
	
	//-----------------------------------------------------------------
	// aCHKDEL array que verifica a INTEGRIDADE REFERENCIAL na exclu-
	// s„o do registro.
	//
	// 1 - Chave de pesquisa
	// 2 - Alias de pesquisa
	// 3 - Ordem de pesquisa
	//------------------------------------------------------------------
	aCHKDEL :=	{ {'TLL->TLL_CC' , "TLR", 1},;
					{'TLL->TLL_CC' , "TLO", 1},;
					{'TLL->TLL_CC' , "TLN", 1},;
					{'TLL->TLL_CC' , "TLM", 1}}

	             
	//-------------------------------------------------------
	// Endereca a funcao de BROWSE
	//-------------------------------------------------------
	dbSelectArea("TLL")
	dbSetOrder(1)
	mBrowse( 6, 1,22,75,"TLL")

EndIf

NGRETURNPRM(aNGBEGINPRM)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.
Parametros do array a Rotina:
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada
	3. Reservado
	4. Tipo de Transão a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
		2 - Simplesmente Mostra os Campos
		3 - Inclui registros no Bancos de Dados
		4 - Altera o registro corrente
		5 - Remove o registro corrente do Banco de Dados
		5. Nivel de acesso
		6. Habilita Menu Funcional

@author Denis Hyroshi de Souza
@since 11/12/2007
@return aRotina - Array com opcoes da rotina. 
/*/
//---------------------------------------------------------------------
Static Function MenuDef()
Local aRotina :=	{ 	{ STR0002,	"AxPesqui"  , 0 , 1},; //"Pesquisar"
	                    { STR0003,	"NGCAD01"   , 0 , 2},; //"Visualizar"
	                    { STR0004,	"NGCAD01"   , 0 , 3},; //"Incluir"
	                    { STR0005,	"NGCAD01"   , 0 , 4},; //"Alterar"
	                    { STR0006,	"NGCAD01"   , 0 , 5, 3},; //"Excluir"
	                    { STR0007,	"MDT730FASE", 0 , 6, 3} } //"Fases/Ativ."

Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT730FASE
Cadastro de Fases da Obra

@sample MDTA730
@return 

@author Denis Hyroshi de Souza
@since 11/12/07
/*/
//---------------------------------------------------------------------
Function MDT730FASE()

Local cOldCad := cCadastro
Local aOldRot := aClone(aRotina)
Local aOldMem := aClone(aMemos)
Local aOldDel := aClone(aChkdel)
Local bOldGrv := bNgGrava
Local aArea   := GetArea()
Local aAreaTLL:= TLL->(GetArea())

cCadastro := OemtoAnsi(STR0008) //"Fases da Obra"
aChkdel := {}
aMemos  := {}
bNgGrava:= {|| Mdt730Tok()}

Private lCodObra    := .f.
Private cTLL_CC     := TLL->TLL_CC
Private cTLL_Nome   := TLL->TLL_NOMECC

Private aRelac := {{"TLM_CC","cTLL_CC"},{"TLM_NOMECC","cTLL_Nome"}}

Begin Sequence
	aRotina :=	{ { STR0002,	"AxPesqui"	, 0 , 1},; //"Pesquisar"
	              { STR0003,	"MDT730C02"	, 0 , 2},; //"Visualizar"
	              { STR0004,	"MDT730C02"	, 0 , 3},; //"Incluir"
	              { STR0005,	"MDT730C02"	, 0 , 4},; //"Alterar"
	              { STR0006,	"MDT730C02"	, 0 , 5, 3}} //"Excluir"
	//Verifica se o UPDMDT58 está aplicado
	If NGCADICBASE("TK1_AREA","A","TK1",.F.)
		aAdd(aRotina,{ STR0010,	"MDT730REL(1)"	, 0 , 4}) //"Vivencia x Fase"
		aAdd(aRotina,{ STR0011,	"MDT730REL(2)"	, 0 , 4}) //"Equipto. x Fase"
		aAdd(aRotina,{ STR0012,	"MDT730REL(3)"	, 0 , 4}) //"EPC x Fase"
	Endif

	aCHOICE := {}
	aVARNAO := {}
	aGETNAO := { { "TLP_CC"		, "M->TLM_CC"		},;
	             { "TLP_FASE"	, "M->TLM_FASE"		},;
	             { "TLP_SUBFAS"	, "M->TLM_SUBFAS"   } }
	
	cGETWHILE := "TLP_FILIAL == xFilial('TLP') .and. TLP_CC == M->TLM_CC .and. TLP_FASE == M->TLM_FASE .and. TLP_SUBFAS == M->TLM_SUBFAS"
	cGETMAKE  := "M->TLM_CC + M->TLM_FASE + M->TLM_SUBFAS"
	cGETKEY   := "M->TLM_CC + M->TLM_FASE + M->TLM_SUBFAS + M->TLP_CODTAR"
	cGETALIAS := "TLP"
	cTUDOOK   := "AllwaysTrue()"
	cLINOK    := "AllwaysTrue()"

	dbSelectArea("TLP")
	dbSetOrder(1)

	//----------------------------------------
	//  Endereca a funcao de BROWSE       
	//----------------------------------------
	cFiltroTLM := "TLM_FILIAL = '"+xFilial("TLM",TLL->TLL_FILIAL)+"'"
	cFiltroTLM += " AND TLM_CC = '"+TLL->TLL_CC+"'"
	TLM->(dbGoTop())
	mBrowse( 6, 1,22,75,"TLM",,,,,,,,,,,,,,cFiltroTLM)
	
End Sequence

RestArea(aAreaTLL)
RestArea(aArea)
aRotina   := aClone(aOldRot)
aMemos    := aClone(aOldMem)
aChkdel   := aClone(aOldDel)
cCadastro := cOldCad
bNgGrava  := bOldGrv
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT730C02
Tela de cadastro Fase da Obra 

@param cAlias - Alias da tabela utilizada. 
@param nRecno - Registro posicionado.
@param nOpcx - Opção escolhida. 

@sample MDTA730
@return 

@author Denis  
@since 06/02/2008
/*/
//---------------------------------------------------------------------
Function MDT730C02(cAlias,nRecno,nOpcx)

PutFileInEof("TLP") //Coloca arquivo TLP sem registro nenhum selecionado, para nao mostrar a descrição na Getdados quando o codigo estiver vazio

dbSelectArea("TLM")
NGCAD02(cAlias,nRecno,nOpcx)
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} Mdt730Tok
Valida confirmacao da tela 

@sample MDTA730
@return .T.

@author Denis  
@since 06/02/2008
/*/
//---------------------------------------------------------------------
Function Mdt730Tok()
If Inclui
	If !Empty(M->TLM_SUBFAS) .and. M->TLM_SUBFAS == M->TLM_FASE
		MsgInfo(STR0009) //"A Sub-fase não pode ser a mesma informada no campo Fase."
		Return .f.
	Endif
	Return ExistChav("TLM",M->TLM_CC+M->TLM_FASE+M->TLM_SUBFAS)
Endif
Return .t.

//---------------------------------------------------------------------
/*/{Protheus.doc} Mdt730VlAt
Valida o codigo da atividade/tarefa 

@sample MDTA730
@return lRet

@author Denis  
@since 06/02/2008
/*/
//---------------------------------------------------------------------
Function Mdt730VlAt()
Local cOldTabe := Alias()
Local lRet     := .t.

If !Empty(M->TLM_SUBFAS)
	lRet := ExistCpo("TLZ",M->TLM_SUBFAS)
	If lRet
		If M->TLM_SUBFAS == M->TLM_FASE
			MsgInfo(STR0009) //"A Sub-fase não pode ser a mesma informada no campo Fase."
			lRet := .f.
		Endif
	Endif
	If !Empty(cOldTabe)
		dbSelectArea(cOldTabe)
	Endif
Endif

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} Mdt730InAt
Inicializador padrao do campo Descricao Atividade 

@sample MDTA730
@return cDesc

@author Denis  
@since 06/02/2008
/*/
//---------------------------------------------------------------------
Function Mdt730InAt()
Local cDesc := Space(20)

If !Inclui
	If !Empty(TLP->TLP_SUBFAS)
		cDesc := PadR(NgSeek("TLZ",TLP->TLP_SUBFAS,1,"TLZ_DESCRI"),40)
	Endif
Endif

Return cDesc

//---------------------------------------------------------------------
/*/{Protheus.doc} OrdFaseTLM
Valida ordem do numero da fase da obra 

@sample MDTA730
@return lRet

@author Denis  
@since 06/02/2008
/*/
//---------------------------------------------------------------------
Function OrdFaseTLM()
Local cOldTabe := Alias()
Local lRet     := .t.

lRet := ExistCpo("TLZ",M->TLM_FASE)

If !Empty(cOldTabe)
	dbSelectArea(cOldTabe)
Endif
Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} Mdt730VlTr
Monta tela para relacionamento de Areas, Equipt. e EPC

@param cTLP_CODTAR - Código da tarefa. 

@sample MDTA730
@return lRet

@author Denis  
@since 06/02/2008
/*/
//---------------------------------------------------------------------
Function Mdt730VlTr(cTLP_CODTAR)
Local aArea := GetArea()
Local lRet,nFor
Local nPosDesc := aScan(aHeader, {|x| AllTrim(Upper(X[2])) == "TLP_DESATI" })
Local nPosTare := aScan(aHeader, {|x| AllTrim(Upper(X[2])) == "TLP_CODTAR" })

lRet := ExistCpo("TN5",cTLP_CODTAR)

If lRet
	For nFor := 1 To Len(aCols)
		If nFor <> n .and. !aCols[n,Len(aCols[n])]
			If aCols[nFor,nPosTare] == cTLP_CODTAR .And. !aCols[nFor][Len(aCols[nFor])]
				lRet := .f.
				Help(" ",1,"JAEXISTINF")
				Exit
			Endif
		Endif
	Next nFor
Endif

If lRet
	aCols[n,nPosDesc] := NgSeek("TN5",cTLP_CODTAR,1,"TN5_NOMTAR") 
Endif

RestArea(aArea)
Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT730REL
Monta tela para relacionamento de Areas, Equipt. e EPC

@param nOpc - Opção selecionada.

@sample MDTA730
@return .T.

@author Roger Rodrigues
@since 17/05/10
/*/
//---------------------------------------------------------------------
Function MDT730REL(nOpc) 
Local aNGBEGINPRM := NGBEGINPRM(_nVERSAO, "MDTA730" )
Local i, j, nOpca := 0, lAltera := .F.
Local aOldaCols := {}
Private nPosCod, nPosDesc, nPosMemo
Private cTitulo := "", cButton := "", cChave := "", cWhile := ""
Private cAliasRot := "", cAliasTRB := "", aNao := {}, aMemo := {}
Private oMenu, oDlg730, oPanel730, oGet730//Objetos da tela
Private cTLM_FASE := TLM->TLM_FASE//Relacao do campo fase
Private cTLM_SUBFASE := TLM->TLM_SUBFAS//Relacao do campo Sub-Fase

//Variaveis de tamanho de tela e objetos
Private aSize := MsAdvSize(,.f.,430), aObjects := {}
Aadd(aObjects,{050,050,.t.,.t.})
Aadd(aObjects,{020,020,.t.,.t.})
Aadd(aObjects,{100,100,.t.,.t.})
aInfo := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
aPosObj := MsObjSize(aInfo, aObjects,.t.)

If nOpc == 1
	cTitulo := STR0013 //"Áreas de Vivência da Fase"
	cAliasRot	:= "TK1"
	cAliasTRB 	:= "TLS"
	cButton := STR0014 //"Área Vivência"
	aNao 	:= {"TK1_AREA", "TK1_DESVIV", "TK1_MEMO1"}
	aMemo	:= {"TK1_CARACT", "TK1_MEMO1"}
	cChave	:= "M->TK1_CC+M->TK1_FASE+M->TK1_SUBFAS"
	cWhile	:= "M->TK1_CC+M->TK1_FASE+M->TK1_SUBFAS == TK1->TK1_CC+TK1->TK1_FASE+TK1->TK1_SUBFAS"
ElseIf nOpc == 2
	cTitulo := STR0015 //"Equipamentos da Fase"
	cAliasRot	:= "TK2"
	cAliasTRB 	:= "TNH"
	cButton := STR0016 //"Equipamentos"
	aNao 	:= {"TK2_CODEQU", "TK2_DESCRI", "TK2_MEMO1"}
	aMemo	:= {"TK2_OBSERV", "TK2_MEMO1"}
	cChave	:= "M->TK2_CC+M->TK2_FASE+M->TK2_SUBFAS"
	cWhile	:= "M->TK2_CC+M->TK2_FASE+M->TK2_SUBFAS == TK2->TK2_CC+TK2->TK2_FASE+TK2->TK2_SUBFAS"
Else
	cTitulo := STR0017 //"EPC's da Fase"
	cAliasRot	:= "TK3"
	cAliasTRB 	:= "ST9"
	cButton := STR0018 //"EPC's"
	aNao 	:= {"TK3_CODEPC", "TK3_DESCRI", "TK3_MEMO1"}
	aMemo	:= {"TK3_OBSERV", "TK3_MEMO1"}
	cChave	:= "M->TK3_CC+M->TK3_FASE+M->TK3_SUBFAS"
	cWhile	:= "M->TK3_CC+M->TK3_FASE+M->TK3_SUBFAS == TK3->TK3_CC+TK3->TK3_FASE+TK3->TK3_SUBFAS"

	//Variavel para filtro na consulta ST9EPC
	M->TLO_CC := TLM->TLM_CC
Endif

aHeader := {}
aCols := {}

//Atribui valor as varáiveis de tela
dbSelectarea(cAliasRot)
RegToMemory(cAliasRot,.T.)

//Monta aChoice
aChoice := NGCAMPNSX3(cAliasRot,aNao)

//Variaveis de posicao da getdados
nPosCod := 1
nPosDesc:= 2
nPosMemo:= 3

dbSelectArea(cAliasRot)
dbSetOrder(1)
//Monta aCols e aHeader
FillGetDados(4, cAliasRot, 1,&cChave., {|| }, {|| .T.},,aNao,,,{|| NGMontaAcols(cAliasRot,&cChave.,cWhile) } )
   
If Len(aCols) == 0
   aCols := BlankGetd(aHeader)
EndIf

//Faz clone do aCols para verificação
aOldaCols := aClone(aCols)

Define MSDialog oDlg730 Title cTitulo From aSize[7],0 To aSize[6],aSize[5] Of oMainWnd Pixel

oPanelTop := TPanel():New(,,,oDlg730,,,,,RGB(255,255,255),, aPosObj[1,3], .F., .F. )
oPanelTop:Align := CONTROL_ALIGN_TOP

oEnchoice := Msmget():New(cAliasRot, 0, 3,,,,aCHOICE,aPosObj[1],,3,,,,oPanelTop)
oEnchoice:oBox:Align := CONTROL_ALIGN_ALLCLIENT

oPanelMid := TPanel():New(,,,oDlg730,,,,,RGB(255,255,255),, 20, .F., .F. )
oPanelMid:Align := CONTROL_ALIGN_TOP

@ 03,05 Button cButton Size 49,12 Pixel Action (MDTA730MRK(nOpc)) OF oPanelMid

oGet730 := MSGetDados():New(aPosObj[3,1],aPosObj[3,2],aPosObj[3,3],aPosObj[3,4],4,"MDT730OK()","MDT730OK(.T.)","",.t.,,,,3000)
oGet730:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

//Implementa Click da Direita
If Len(aSMenu) > 0
	NGPOPUP(aSMenu,@oMenu)
	oDlg730:bRClicked	:= { |o,x,y| oMenu:Activate(x,y,oDlg730)}
	oPanelTop:bRClicked := { |o,x,y| oMenu:Activate(x,y,oDlg730)}
	oPanelMid:bRClicked := { |o,x,y| oMenu:Activate(x,y,oDlg730)}
Endif

//Coloca em Final de Arquivo para não carregar o inicializador padrão ao incluir
PutFileInEof(cAliasRot)
		
ACTIVATE MSDIALOG oDlg730 ON INIT EnchoiceBar(oDlg730,{||nOpca:=1,if(oGet730:TudoOk(),oDlg730:End(),nOpca := 0)},{||nOpca:=0,oDlg730:End()})//{||}

//Se confirmar, grava
If nOpca == 1
	//Verifica se deve deletar os antigos
	For i:=1 to Len(aOldaCols)
		If i > Len(aCols) .or. (aCols[i][nPosCod] <> aOldaCols[i][nPosCod])
			dbSelectArea(cAliasRot)
			dbSetOrder(1)
			If dbSeek(xFilial(cAliasRot)+&cChave.+aOldaCols[i][nPosCod])
				RecLock(cAliasRot,.F.)
				dbDelete()
				MsUnlock(cAliasRot)
				MSMM(&(aMemo[1]),,,,2,,,,,)
			Endif
		Endif
	Next i
	//Coloca os deletados por primeiro
	ASORT(aCols,,, { |x, y| x[Len(aCols[n])] .and. !y[Len(aCols[n])] } )
	For i:=1 To Len(aCols)
		If !aCols[i][Len(aCols[i])] .AND. !Empty(aCols[i][nPosCod])
			dbSelectArea(cAliasRot)
			dbSetOrder(1)
			If dbSeek(xFilial(cAliasRot)+&cChave.+aCols[i][nPosCod])
				RecLock(cAliasRot,.F.)
				lAltera := .T.
			Else
				RecLock(cAliasRot,.T.)
				lAltera := .F.
			Endif
			For j:=1 to FCount()
                 If "_FILIAL"$Upper(FieldName(j))
                    FieldPut(j, xFilial(cAliasRot))
                 ElseIf "_CC"$Upper(FieldName(j))
                    FieldPut(j, cTLL_CC)
                 ElseIf "_FASE"$Upper(FieldName(j))
                    FieldPut(j, cTLM_FASE)
                 ElseIf "_SUBFAS"$Upper(FieldName(j))
                    FieldPut(j, cTLM_SUBFASE)
                 Else
                 	If Upper(aMemo[1]) $ Upper(FieldName(j))//Grava campo Memo
	                 	If (nPos := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == AllTrim(Upper(aMemo[2])) })) > 0
	                 		If lAltera
								MSMM(&(aMemo[1]),TAMSX3(aMemo[2])[1],,aCols[i][nPos],1,,,cAliasRot,aMemo[1])	                 		
	                 		Else
								MSMM(,TAMSX3(aMemo[2])[1],,aCols[i][nPos],1,,,cAliasRot,aMemo[1])
							Endif
	                 	Endif                 	
                 	Else
	                 	If (nPos := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == AllTrim(Upper(FieldName(j))) })) > 0
		                    FieldPut(j, aCols[i][nPos])
	                 	Endif
					Endif
                 Endif
			Next j
			MsUnlock(cAliasRot)
		ElseIf !Empty(aCols[i][nPosCod])
			dbSelectArea(cAliasRot)
			dbSetOrder(1)
			If dbSeek(xFilial(cAliasRot)+&cChave.+aCols[i][nPosCod])
				RecLock(cAliasRot,.F.)
				dbDelete()
				MsUnlock(cAliasRot)
				MSMM(&(aMemo[1]),,,,2,,,,,)
			Endif
		Endif
	Next i
Endif

NGRETURNPRM(aNGBEGINPRM)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA730MRK
Valida código e carrega campo memo 

@param nOpcao - Opção selecionada.

@sample MDTA730
@return .T.

@author Roger Rodrigues
@since 18/05/10 
/*/
//---------------------------------------------------------------------
Function MDTA730MRK(nOpcao)
Local oFont, oDlgMrk
Local nOpt := 0, nPos := 0, i
Local cFrase := "", lMarcado := .F.
Local cCond := "", cCodigo := ""
Local oPnlPai
Local oTempMRK

Private oMarkRel
Private cAliasMrk := GetNextAlias()
Private aDBFMRK := {}, aFieldsMRK := {}//Array com campos do TRB
Private cMarca
Private lInverte := .F.

dbSelectArea(cAliasRot)
cMarca := GetMark()//Define marcacao

//Define campos do arquivo temporario
aADD(aDBFMRK,{"OK"		,"C",2	,0	})
aADD(aDBFMRK,{"CODIGO"	,"C",TAMSX3(aNao[1])[1]	,TAMSX3(aNao[1])[2]	})
aADD(aDBFMRK,{"DESCRI" 	,"C",TAMSX3(aNao[2])[1]	,TAMSX3(aNao[2])[2]	})
aADD(aDBFMRK,{"MEMO" 	,"M",TAMSX3(aNao[3])[1]	,TAMSX3(aNao[3])[2]	})

aADD(aFieldsMRK, {"OK", Nil,"", "" })
aADD(aFieldsMRK, {"CODIGO"	,Nil,RetTitle(aNao[1])	, PesqPict(cAliasRot, aNao[1])	})
aADD(aFieldsMRK, {"DESCRI"	,Nil,RetTitle(aNao[2])	, PesqPict(cAliasRot, aNao[2])	})

//Cria Arquivo temporario
oTempMRK := FWTemporaryTable():New( cAliasMrk, aDBFMRK )
oTempMRK:AddIndex( "1", {"OK"} )
oTempMRK:AddIndex( "2", {"CODIGO"} )
oTempMRK:Create()

//Limpa Arquivo temporario
dbSelectArea(cAliasMrk)
Zap

//Verifica frase
If nOpcao == 1
	cFrase 		:= STR0019 //"Estas são as áreas de vivência cadastradas no sistema."
	cCond 		:= "TLS->TLS_FILIAL"
	cCodigo		:= "TLS->TLS_AREA"
ElseIf nOpcao == 2
	cFrase 		:= STR0020 //"Estes são os equipamentos cadastrados no sistema."
	cCond 		:= "TNH->TNH_FILIAL"
	cCodigo		:= "TNH->TNH_CODOBJ"
Else
	cFrase 		:= STR0021 //"Estes são os EPC's cadastrados no sistema."
	cCond 		:= "ST9->T9_FILIAL"
	cCodigo		:= "ST9->T9_CODBEM"
Endif

//Carrega Arquivo Temporario
dbSelectArea(cAliasTRB)
dbSetOrder(1)
dbSeek(xFilial(cAliasTRB))
While !eof() .and. xFilial(cAliasTRB) == &(cCond)
	lMarcado := .F.
	//Se for EPC, verifica se é do Centro de Custo da Obra
	If cAliasTRB == "ST9"
		If AllTrim(Upper(ST9->T9_CCUSTO)) <> AllTrim(Upper(M->TLO_CC))
			dbSelectArea(cAliasTRB)
			dbSkip()
			Loop
		Endif
	ElseIf cAliasTRB == "TNH" .and. NGCADICBASE("TNH_TIPOBJ","A","TNH",.F.)
		If TNH->TNH_TIPOBJ == "2"
			dbSelectArea(cAliasTRB)
			dbSkip()
			Loop
		Endif
	Endif
	i:=0
	//Verifica se deve marcar
	For i:=1 to Len(aCols)
		If (Trim(Upper(aCols[i][nPosCod])) == Trim(Upper(&(cCodigo)))) .and. !aCols[i][Len(aCols[i])]
			lMarcado := .T.
			Exit
		Endif
	Next i
	RecLock(cAliasMrk,.T.)
	(cAliasMrk)->OK := If(lMarcado, cMarca, Space(2))
	If cAliasTRB == "TLS"
		(cAliasMrk)->CODIGO := TLS->TLS_AREA
		(cAliasMrk)->DESCRI := TLS->TLS_DESVIV
		(cAliasMrk)->MEMO	:= If(lMarcado .and. i <> 0,aCols[i][nPosMemo],MSMM(TLS->TLS_CODMEM,80))
	ElseIf cAliasTRB == "TNH"
		(cAliasMrk)->CODIGO := TNH->TNH_CODOBJ
		(cAliasMrk)->DESCRI := TNH->TNH_DESOBJ
		(cAliasMrk)->MEMO	:= If(lMarcado .and. i <> 0,aCols[i][nPosMemo],"")
	Else
		(cAliasMrk)->CODIGO := ST9->T9_CODBEM
		(cAliasMrk)->DESCRI := ST9->T9_NOME
		(cAliasMrk)->MEMO	:= If(lMarcado .and. i <> 0,aCols[i][nPosMemo],"")
	Endif
	MsUnlock(cAliasMrk)
	dbSelectarea(cAliasTRB)
	dbSkip()
End

Define FONT oFont NAME "Arial" SIZE 0,-12
Define MsDialog oDlgMrk Title cTitulo From 08,15 To 42,84.5 Of oMainWnd

	oPnlPai := TPanel():New(0,0,,oDlgMrk,,,,,,100,100,.F.,.F.)
	oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT
	
	@ 1,1 TO 33,277 OF oPnlPai PIXEL
	@ 5,30 SAY cFrase SIZE 200,10 of oPnlPai PIXEL FONT oFont CENTER
	@ 15,30 SAY STR0022 SIZE 200,10 of oPnlPai Pixel FONT oFont CENTER //"Selecione o que deseja relacionar à fase da obra."
	
	oMarkRel := MsSelect():NEW(cAliasMrk,"OK",,aFieldsMRK,@lINVERTE,@cMARCA,{35,1,240,278},,,oPnlPai)
	
	oMarkRel:oBrowse:lHasMark := .T.
	oMarkRel:oBrowse:lCanAllMark := .T.
	oMarkRel:oBrowse:bAllMark := { || f730ALLMRK()}
	
	//Atualiza MarkBrowse
	dbSelectArea(cAliasMrk)
	dbSetOrder(2)
	dbGoTop()
	oMarkRel:oBrowse:Refresh(.T.)
	
Activate MsDialog oDlgMrk On Init EnchoiceBar(oDlgMrk,{|| nOpt := 1,oDlgMrk:End()},{|| nOpt := 0,oDlgMrk:End()}) Centered

//Se confirmar monta aCols
If nOpt == 1
	aCols := {}
	dbSelectArea(cAliasMrk)
	dbSetOrder(2)
	dbGoTop()
	While !eof()
		If !Empty((cAliasMrk)->OK)
			aAdd(aCols,{(cAliasMrk)->CODIGO, (cAliasMrk)->DESCRI,(cAliasMrk)->MEMO, "", 0,.F.} )
		Endif
		dbSelectArea(cAliasMrk)
		dbSkip()
	End
	//Se o aCols estiver sem registros
	If Len(aCols) == 0
		aCols := BlankGetd(aHeader)
	Endif
	n := 1
	oGet730:Refresh()
Endif

//Deleta Arquivo temporario
oTempMRK:Delete()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT730MEMO
Valida código e carrega campo memo 

@param cCod - Código do registro.

@sample MDTA730
@return lRet

@author Roger Rodrigues
@since 17/05/10
/*/
//---------------------------------------------------------------------
Function MDT730MEMO(cCod)
Local aArea := GetArea()

lRet := ExistCpo(cAliasTRB,cCod)
If lRet .and. cAliasRot == "TK1"
	dbSelectArea("TLS")
	dbSetOrder(1)
	If dbSeek(xFilial("TLS")+cCod)
		aCols[n][nPosMemo] := MSMM(TLS->TLS_CODMEM,80)
	Endif
ElseIf lRet .and. cAliasRot == "TK2"
	If NGCADICBASE("TNH_TIPOBJ","A","TNH",.F.)
		dbSelectArea("TNH")
		dbSetOrder(1)
		If dbSeek(xFilial("TNH")+cCod)
			lRet := If( TNH->TNH_TIPOBJ <> "2" , .T. , .F. )
			If !lRet
				ShowHelpDlg(STR0023,{STR0024},2,; //"Atenção"###"O equipamento selecionado não pode ser utilizado no PCMAT."
							{STR0025},3) //"Favor informar um equipamento cujo campo 'Exibir PCMAT' estiver como 1=Sim."
			Endif
		Endif
	Endif
Endif

RestArea(aArea)
Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT730OK
Verifica se a linha da GetDados está OK 

@param lFIm - Verifica todos os campos quando for fim.

@sample MDTA730
@return .T.

@author Roger Rodrigues
@since 20/05/10 
/*/
//---------------------------------------------------------------------
Function MDT730OK(lFim)
Local f
Default lFim := .F.

If Len(aCols) == 1
	If Empty(aCols[1][nPosCod]) .or. aCols[1][Len(aCols[1])]
		Return .T.
	Endif
Endif
//Percorre aCols
For f:= 1 to Len(aCols)
	If !aCols[f][Len(aCols[f])]
		If lFim .or. f == n
			//VerIfica se os campos obrigatórios estão preenchidos
			If Empty(aCols[f][nPosCod])
				//Mostra mensagem de Help
				Help(1," ","OBRIGAT2",,aHeader[nPosCod][1],3,0)
				Return .F.
			Endif
		Endif
		//Verifica se é somente LinhaOk
		If f <> n .and. !aCols[n][Len(aCols[n])]
			If aCols[f][nPosCod] == aCols[n][nPosCod]
				Help(" ",1,"JAEXISTINF")
				Return .F.
			Endif
		Endif
	Endif
Next f

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} f730VLDT
Valida as datas da Obra e Fase da Obra 

@param dDataIni - Data Inicial.
@param dDataFim - Data final.
@param nOpc  - Opção que determina se será campo inicial ou final.
@param nData - Determina se a data da obra será validada. 
@param lReal - Determina se é a data real ou prevista. 

@sample MDTA730
@return lRet - Variavel de controle da validação. 

@author Roger Rodrigues
@since 27/05/10
/*/
//---------------------------------------------------------------------
Function f730VLDT( dDataIni, dDataFim, nOpc, nData, lReal )
Local lRet := .T.  
Local aArea := GetArea()  
Local dData := STOD("")
Default nData := 0 //Define se validara com as datas da Obra( TLL )
Default lReal := .T.   

If ( nOpc == 1 .and. !Empty( dDataIni ) ) .or. ( nOpc == 2 .and. !Empty( dDataFim ) ) //Verifica se a data digitada está preenchida
	If dDataIni > dDataFim .and. !Empty( dDataFim ) //Verifica datas
		lRet := .F.
		If nOpc == 1 //Se estiver preenchendo Ini
			Help( " " , 1 , "DATAMAIOR" )
		Elseif nOpc == 2 //Se estiver preenchendo Fim
			Help( " " , 1 , "DATAMENOR" ) 
		Endif  
	Endif        
	   
	If lRet
		If dDataIni > dDataBase .And. nOpc == 1 .And. lReal//Se estiver preenchendo Ini
			lRet:= .F.
			ShowHelpDlg( STR0028 , { STR0029 } , 2 , { STR0030 } , 2 )
		EndIf
		If dDataFim > dDataBase .And. nOpc == 2 .And. lReal//Se estiver preenchendo Fim
			lRet:= .F.
			ShowHelpDlg(STR0028,{STR0031},2,{STR0030},2)
		Endif 
	EndIf
	
	If nData <> 0 .and. lRet
		dbSelectArea( "TLL" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TLL" ) + M->TLM_CC )
		If nOpc == 1
			dData := dDataIni
		ElseIf nOpc == 2
			dData := dDataFim
		Endif
		If nData == 1 //Valida com datas previstas
			If ( !Empty( TLL->TLL_DTINIP ) .and. !Empty( TLL->TLL_DTFIMP ) ) .and. ( dData < TLL->TLL_DTINIP .or. dData > TLL->TLL_DTFIMP )
				lRet := .F.
			Elseif !Empty( TLL->TLL_DTINIP ) .and. dData < TLL->TLL_DTINIP
				lRet := .F.
			Elseif !Empty( TLL->TLL_DTFIMP ) .and. dData > TLL->TLL_DTFIMP
				lRet := .F.
			Endif
			If !lRet
				ShowHelpDlg( STR0023 , { STR0026 } , 2 ) //"Atenção"###"A data informada deve estar entre as datas previstas da obra."
			Endif
		Elseif nData == 2 //Valida com datas reais
			If ( !Empty( TLL->TLL_DTINIR ) .and. !Empty( TLL->TLL_DTFIMR ) ) .and. ( dData < TLL->TLL_DTINIR .or. dData > TLL->TLL_DTFIMR )
				lRet := .F.
			Elseif !Empty( TLL->TLL_DTINIR ) .and. dData < TLL->TLL_DTINIR
				lRet := .F.
			Elseif !Empty( TLL->TLL_DTFIMR ) .and. dData > TLL->TLL_DTFIMR
				lRet := .F.
			Endif
			If !lRet
				ShowHelpDlg( STR0023 , { STR0027 } , 2 ) //"Atenção"###"A data informada deve estar entre as datas de realização da obra."
			Endif
		Endif
	Endif
Endif
	
RestArea( aArea ) 
Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} f730ALLMRK
Marca itens do browse 

@sample MDTA730
@return .T.

@author Roger Rodrigues
@since 28/05/10  
/*/
//---------------------------------------------------------------------
Function f730ALLMRK()
Local lMarca:= .F.

//Verifica se existe item desmarcado
dbSelectArea(cAliasMrk)
dbSetOrder(1)
dbGoTop()
While !eof()
	If Empty((cAliasMrk)->OK)
		lMarca := .T.
		Exit
	Endif
	dbSelectArea(cAliasMrk)
	dbSkip()
End
//Marca ou desmarca todos
dbSelectArea(cAliasMrk)
dbSetOrder(2)
dbGoTop()
While !eof()
	RecLock(cAliasMrk,.F.)
	(cAliasMrk)->OK := If(lMarca, cMarca, Space(2))
	MsUnlock(cAliasMrk)
	dbSelectArea(cAliasMrk)
	dbSkip()	
End

//Atualiza MarkBrowse
dbSelectArea(cAliasMrk)
dbSetOrder(2)
dbGoTop()
oMarkRel:oBrowse:Refresh(.T.)

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT730SX7
Regras de SX7 da tabela TLL
Uso Genérico

@return

@sample
MDT730SX7( 1 )

@param 	
		
@author Jackson Machado
@since 16/11/2012
@version 1.0
/*/
//--------------------------------------------------------------------- 
Function MDT730SX7( nRet )
Local cRet   := ""
Default nRet := 1

If nRet == 1
	cRet := SubStr(M->TLL_CC,1,nTamCli)
ElseIf nRet == 2
	cRet := SubStr(M->TLL_CC,nTamCli+1,nTamLoj)
EndIf

Return cRet