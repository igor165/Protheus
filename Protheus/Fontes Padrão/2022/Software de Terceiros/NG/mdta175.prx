#INCLUDE "MDTA175.ch"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA175
Programa de Cadastro de Agenda de Lembretes

@return

@sample MDTA175()

@author Thiago Olis Machado - Refeito por: Jackson Machado
@since 10/07/01 - Revisão: 19/05/2014
/*/
//---------------------------------------------------------------------
Function MDTA175()

	// Armazena as variáveis
	Local aNGBEGINPRM := NGBEGINPRM( )

	Local oBrowse

	If GetSx3Cache( 'TNW_LOGIN', 'X3_TAMANHO' ) < 25
		NGINCOMPDIC( "UPDMDT39" , "TDHERF" )
	Else
		oBrowse := FWMBrowse():New()
			oBrowse:SetAlias( "TNW" )			// Alias da tabela utilizada
			oBrowse:SetMenuDef( "MDTA175" )	// Nome do fonte onde esta a função MenuDef
			oBrowse:SetDescription( STR0006 )	// Descrição do browse ###"Agenda de Lembretes"
		oBrowse:Activate()
	Endif
	// Devolve as variáveis armazenadas
	NGRETURNPRM( aNGBEGINPRM )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Definição do Menu (padrão MVC).

@author Jackson Machado
@since 19/05/2014

@return aRotina array com o Menu MVC
/*/
//---------------------------------------------------------------------
Static Function MenuDef()
//Inicializa MenuDef com todas as opções
Return FWMVCMenu( "MDTA175" )
//---------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Definição do Modelo (padrão MVC).

@author Jackson Machado
@since 19/05/2014

@return oModel objeto do Modelo MVC
/*/
//---------------------------------------------------------------------
Static Function ModelDef()

    // Cria a estrutura a ser usada no Modelo de Dados
	Local oStructTNW := FWFormStruct( 1 ,"TNW" , /*bAvalCampo*/ , /*lViewUsado*/ )

	// Modelo de dados que será construído
	Local oModel

	// Cria o objeto do Modelo de Dados
	// cID     Identificador do modelo
	// bPre    Code-Block de pre-edição do formulário de edição. Indica se a edição esta liberada
	// bPost   Code-Block de validação do formulário de edição
	// bCommit Code-Block de persistência do formulário de edição
	// bCancel Code-Block de cancelamento do formulário de edição
	oModel := MPFormModel():New( "MDTA175" , /*bPre*/ , { | oModel | fMPosValid( oModel ) } /*bPost*/ , /*bCommit*/ , /*bCancel*/ )
		//--------------------------------------------------
		// Componentes do Modelo
		//--------------------------------------------------

		// Adiciona ao modelo um componente de Formulário Principal
		// cId          Identificador do modelo
		// cOwner       Identificador superior do modelo
		// oModelStruct Objeto com  a estrutura de dados
		// bPre         Code-Block de pré-edição do formulário de edição. Indica se a edição esta liberada
		// bPost        Code-Block de validação do formulário de edição
		// bLoad        Code-Block de carga dos dados do formulário de edição
		oModel:AddFields( "TNWMASTER" , Nil , oStructTNW , /*bPre*/ , /*bPost*/ , /*bLoad*/ )
			// Adiciona a descrição do Modelo de Dados (Geral)
			oModel:SetDescription( STR0006 /*cDescricao*/ ) // "Agenda de Lembretes"
			// Adiciona a descricao do Componente do Modelo de Dados
			oModel:GetModel( "TNWMASTER" ):SetDescription( STR0006 ) // "Agenda de Lembretes"

Return oModel

//---------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Definição da View (padrão MVC).

@author Jackson Machado
@since 19/05/2014

@return oView objeto da View MVC
/*/
//---------------------------------------------------------------------
Static Function ViewDef()

	// Cria um objeto de Modelo de dados baseado no ModelDef() do fonte informado
	Local oModel := FWLoadModel( "MDTA175" )

	// Cria a estrutura a ser usada na View
	Local oStructTNW := FWFormStruct( 2 , "TNW" , /*bAvalCampo*/ , /*lViewUsado*/ )

	// Interface de visualização construída
	Local oView

	// Cria o objeto de View
	oView := FWFormView():New()
		// Objeto do model a se associar a view.
		oView:SetModel( oModel )
		// Adiciona no View um controle do tipo formulário (antiga Enchoice)
		// cFormModelID - Representa o ID criado no Model que essa FormField irá representar
		// oStruct - Objeto do model a se associar a view.
		// cLinkID - Representa o ID criado no Model ,Só é necessári o caso estamos mundando o ID no View.
		oView:AddField( "VIEW_TNW" , oStructTNW , "TNWMASTER" )
			//Adiciona um titulo para o formulário
			oView:EnableTitleView( "VIEW_TNW" , STR0006 )	// Descrição do browse ###"Agenda de Lembretes"
			// Cria os componentes "box" horizontais para receberem elementos da View
			// cID		  	Id do Box a ser utilizado
			// nPercHeight  Valor da Altura do box( caso o lFixPixel seja .T. é a qtd de pixel exato)
			// cIdOwner 	Id do Box Vertical pai. Podemos fazer diversas criações uma dentro da outra.
			// lFixPixel	Determina que o valor passado no nPercHeight é na verdade a qtd de pixel a ser usada.
			// cIDFolder	Id da folder onde queremos criar o o box se passado esse valor, é necessário informar o cIDSheet
			// cIDSheet     Id da Sheet(Folha de dados) onde queremos criar o o box.
			oView:CreateHorizontalBox( "TELATNW" , 100,/*cIDOwner*/,/*lFixPixel*/,/*cIDFolder*/,/*cIDSheet*/ )
		// Associa um View a um box
		oView:SetOwnerView( "VIEW_TNW" , "TELATNW" )

		//Inclusão de itens no Ações Relacionadas de acordo com o NGRightClick
   		NGMVCUserBtn( oView )

Return oView
//---------------------------------------------------------------------
/*/{Protheus.doc} fMPosValid
Pós-validação do modelo de dados.

@author Jackson Machado
@since 19/05/2014

@param oModel - Objeto do modelo de dados (Obrigatório)

@return Lígico - Retorna verdadeiro caso validacoes estejam corretas
/*/
//---------------------------------------------------------------------
Static Function fMPosValid( oModel )

	Local lRet			:= .T.

	Local aAreaTNW		:= TNW->( GetArea() )

	Local nOperation	:= oModel:GetOperation() // Operação de ação sobre o Modelo
	Local oModelTNW		:= oModel:GetModel( "TNWMASTER" )

	Private aCHKSQL 	:= {} // Variável para consistência na exclusão (via SX9)
	Private aCHKDEL 	:= {} // Variável para consistência na exclusão (via Cadastro)

	// Recebe SX9 - Formato:
	// 1 - Domínio (tabela)
	// 2 - Campo do Domínio
	// 3 - Contra-Domínio (tabela)
	// 4 - Campo do Contra-Domínio
	// 5 - Condição SQL
	// 6 - Comparação da Filial do Domínio
	// 7 - Comparação da Filial do Contra-Domínio
	aCHKSQL := NGRETSX9( "TNW" )

	// Recebe relação do Cadastro - Formato:
	// 1 - Chave
	// 2 - Alias
	// 3 - Ordem (Índice)
	//aAdd(aCHKDEL, { CODIGO , TBL , IDX } )

	If nOperation == MODEL_OPERATION_DELETE //Exclusão

		If !NGCHKDEL( "TNW" )
			lRet := .F.
		EndIf

		If lRet .And. !NGVALSX9( "TNW" , {} , .T. , .T. )
			lRet := .F.
		EndIf

	EndIf

	RestArea( aAreaTNW )

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT175VAL
Validações de campos da tela

@author Jackson Machado
@since 19/05/2014

@param cCampo - Indica o campo que será validado

@return Lógico - Retorna verdadeiro caso validacoes estejam corretas
/*/
//---------------------------------------------------------------------
Function MDT175VAL( cCampo )

	Local aArea
	Local aAreaSX3
	Local lRet		:= .T.
	Local oModelTNW	:= FWModelActive()
	Local oViewTNW	:= FWViewActive()
	Local lModelo	:= ValType( oModelTNW ) == "O"
	Local lModUsu	:= lModelo

	//Variaveis a receber os valores de validação
	Local cLogin
	Local cUsuarFim
	Local dDataIni
	Local dDataFim
	Local cHoraIni
	Local cHoraFim

	aArea	 := GetArea()
	aAreaSX3 := SX3->( GetArea() )
	lModUsu	 := lModUsu .And. X3Uso( GetSx3Cache( 'TNW_USUFIM', 'X3_USADO' ) )
	RestArea( aAreaSX3 )
	RestArea( aArea )

	//Alimenta os campos com valores para validação
	If lModelo
		cLogin 		:= oModelTNW:GetValue( "TNWMASTER" , "TNW_LOGIN" )
		If lModUsu
			cUsuarFim	:= oModelTNW:GetValue( "TNWMASTER" , "TNW_USUFIM" )
		Else
			If Type( "M->TNW_USUFIM" ) <> "U"
				cUsuarFim	:= M->TNW_USUFIM
			Else
				cUsuarFim	:= ""
			EndIF
		EndIf
		dDataIni	:= oModelTNW:GetValue( "TNWMASTER" , "TNW_DTINIC" )
		dDataFim	:= oModelTNW:GetValue( "TNWMASTER" , "TNW_DTFIM" )
		cHoraIni	:= oModelTNW:GetValue( "TNWMASTER" , "TNW_HRINIC" )
		cHoraFim	:= oModelTNW:GetValue( "TNWMASTER" , "TNW_HRFIM" )
	Else
		cLogin 		:= M->TNW_LOGIN
		cUsuarFim	:= M->TNW_USUFIM
		dDataIni	:= M->TNW_DTINIC
		dDataFim	:= M->TNW_DTFIM
		cHoraIni	:= M->TNW_HRINIC
		cHoraFim	:= M->TNW_HRFIM
	EndIf

	If cCampo == "TNW_LOGIN"
		PswOrder(2) //Seta indice por Usuário
		//Localiza Usuario
		If !PswSeek( cLogin , .T. )
			Help( " " , 1 , "REGNOIS" )
			lRet := .F.
		Else
			If lModelo
				oModelTNW:LoadValue( "TNWMASTER" , "TNW_LOGIN" , Padr( PswRet()[ 1 , 2 ] , 25	) )//Coloca o Login Correto
			Else
				cLogin := Padr( PswRet()[ 1 , 2 ] , 25	) //Coloca o Login Correto
			EndIf
		Endif
	ElseIf cCampo == "TNW_USUFIM"
		If !Empty( cUsuarFim )
			PswOrder( 2 ) //Seta indice por Usuário
			//Localiza Usuario
			If !PswSeek( cUsuarFim , .T. )
				Help( " " , 1 , "REGNOIS" )
				lRet := .F.
			Else
				If lModelo
					oModelTNW:LoadValue( "TNWMASTER" , "TNW_USUFIM" , Padr( PswRet()[ 1 , 2 ] , 25	) )//Coloca o Login Correto
				Else
					cUsuarFim := Padr( PswRet()[ 1 , 2 ] , 25	) //Coloca o Login Correto
				EndIf
			Endif
		Endif
	ElseIf cCampo == "TNW_DTFIM" .or. cCampo == "TNW_DTINIC" .or. cCampo == "TNW_HRINIC" .or. cCampo == "TNW_HRFIM"
		If cCampo == "TNW_DTINIC"
			If !NaoVazio( dDataIni )
				lRet := .F.
			Endif
		ElseIf cCampo == "TNW_HRINIC"
			If !NaoVazio( StrTran( cHoraIni , ":" , "" ) )
				lRet := .F.
			ElseIf !NGVALHORA( cHoraIni , .T. )
				lRet := .F.
			Endif
		ElseIf cCampo == "TNW_HRFIM"
			If !Empty( StrTran( cHoraFim , ":" , "" ) ) .and. !NGVALHORA( cHoraFim , .T. )
				lRet := .F.
			Endif
		Endif

		If Empty( dDataFim ) .And. !Empty( cHoraFim ) .And. AllTrim( cHoraFim ) <> ":"
			Help( " " , 1 , "HRINVAL" , , STR0007 , 1 , 0 )	//"Quando data fim vazia, horário final deve ser vazio."
			lRet := .F.
		EndIf

		If lRet .And. !Empty( dDataFim )

			If Empty( StrTran( cHoraFim , ":" , "" ) )
				If dDataIni > dDataFim
					If cCampo == "TNW_DTINIC"
						Help( " " , 1 , "DTINIINVAL" , , STR0008 , 1 , 0 )	//"Data início deve ser menor ou igual a data fim."
					Else
						Help( " " , 1 , "DTFIMINVAL" , , STR0009 , 1 , 0 )	//"Data fim deve ser maior ou igual a data início."
					EndIf
					lRet := .F.
				EndIf
			ElseIf dDataIni == dDataFim .and. cHoraFim == cHoraIni
				Help( " " , 1 , "NOINTERV" , , STR0010 , 1 , 0 )	//"Para datas iguais informar hora início diferente de hora fim."
				lRet := .F.
			ElseIf dDataIni > dDataFim
				If cCampo == "TNW_DTINIC"
					Help( " " , 1 , "DTMAIOR" , , STR0011 , 1 , 0 )	//"Data início deve ser menor ou igual a data fim."
				Else
					Help( " " , 1 , "DTMAIOR" , , STR0012 , 1 , 0 )	//"Data fim deve ser maior ou igual a data início."
				EndIf
				lRet := .F.
			ElseIf !Empty( cHoraFim )
				If dDataIni == dDataFim .and. cHoraFim < cHoraIni
					Help( " " , 1 , "HRINVAL" , , STR0013 , 1 , 0 )	//"Informar data e hora início menor que data e hora fim."
					lRet := .F.
				ElseIf dDataFim == dDataBase .and. cHoraFim < Time()
					If cCampo == "TNW_DTFIM"
						Help( " " , 1 , "DTINVAL" , , STR0014 , 1 , 0 )	//"Para a hora fim informada, a data fim deverá ser maior que a data atual."
					Else
						Help( " " , 1 , "HRMENOR" , , STR0015 , 1 , 0 )	//"Para data fim igual a data de hoje informar hora fim maior que hora atual."
					EndIf
					lRet := .F.
				EndIf
			Endif
		Endif
	Endif

	If lModelo
		oViewTNW:Refresh()
	EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT175INI
Inicializadores Padrões

@author Jackson Machado
@since 19/05/2014

@param nInic - Indica o campo que será iniciado

@return xRet - Indefinido Retorno da inicialização
/*/
//---------------------------------------------------------------------
Function MDT175INI( nInic )

	Local xRet
	Local cCodUsu
	Local oModelTNW	:= FWModelActive()
	Local lModelo		:= ValType( oModelTNW ) == "O"

	If nInic == 1
		If INCLUI
			xRet := Space( 40 )
		ElseIf lModelo
			cCodUsu	:= oModelTNW:GetValue( "TNWMASTER" , "TNW_CODUSU" )
			xRet 		:= Posicione( "TMK" , 1 , xFilial( "TMK" ) + cCodUsu , "TMK_NOMUSU" )
		Else
			xRet := Posicione( "TMK" , 1 , xFilial( "TMK" ) + M->TNW_CODUSU , "TMK_NOMUSU" )
		EndIf
	EndIf

Return xRet