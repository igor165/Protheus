#INCLUDE "MDTA120.ch"
#Include "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA120
Programa de Exames do funcionario
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDTA120()

	//Guarda conteudo e declara variaveis padroes
	Local aNGBEGINPRM := NGBEGINPRM()
	Private lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .t. , .f. )
	Private aAC  := { STR0001,STR0002 },;  //"Abandona"###"Confirma"
			aCRA := { STR0002,STR0003,STR0001 }  //"Confirma"###"Redigita"###"Abandona"

	Private aRotina :=	MenuDef()
	PRIVATE cCadastro
	Private asMenu

	If FindFunction("MDTRESTRI") .AND. !MDTRESTRI(cPrograma)

		// Devolve variaveis armazenadas (NGRIGHTCLICK)
		NGRETURNPRM(aNGBEGINPRM)
		Return .F.
	Endif

	If lSigaMdtps

		nSizeCli := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
		nSizeLoj := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))
		cCadastro := OemtoAnsi(STR0102)  //"Clientes"

		DbSelectArea("SA1")
		DbSetOrder(1)

		mBrowse( 6, 1,22,75,"SA1")
	Else

		asMenu := NGRIGHTCLICK("MDTA005")

		nSizeCli := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
		nSizeLoj := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))

		// Define o cabecalho da tela de atualizacoes
		cCadastro := STR0007 //"Exames do Funcionario"
		Private cAlias    := "TM5"
		Private cNUMFIC   := space(09)
		Private cPrograma := "MDTA120"

		cCadastro := OemtoAnsi(cCadastro)

		// Endereca a funcao de BROWSE
		mBrowse( 6, 1,22,75,"TM0",,,,,,fFichaCor() )
	Endif

	//Retorna conteudo de variaveis padroes
	NGRETURNPRM(aNGBEGINPRM)

Return .T.


//-------------------------------------------------------------------
/*/{Protheus.doc} INEXA120
Inclusao de ocorrencias da ficha
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@param cAlias, caracter, Alias da tabela onde serao gravados os dados
@param nReg, numeric, Numero do registro na tabela TM5 no qual sera utilizado
						para montar a enchoice
@param nOpcx, numeric, Opcao utilizada na enchoice
@param param, param_type, param_descr

@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function INEXA120(cAlias,nReg,nOpcx)

	Local LVar01:=1,nLinhas:=0,cSaveMenuh, bCampo
	Local GetList:={}, nOpcao:=3
	Local lGravaOK := .T.
	Local oDlg, oGet, i
	Local nOldIndex := Indexord()
	Local nSizeCli := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
	Local nSizeLoj := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))
	Local lCLICK   := (TYPE("aSMENU")   == "A") .And. Len(aSMENU) > 0
	Local oEnchoice

	//Salva a integridade dos dados
	Private aTELA[0][0],aGETS[0],aHeader[0],Continua,nUsado:=0,oMenu
	Private aSize := MsAdvSize(,.f.,430), aObjects := {}
	Aadd(aObjects,{050,050,.t.,.t.})
	Aadd(aObjects,{100,100,.t.,.t.})
	aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.t.)

	If lSigaMdtps
		If !MdtTemTOL(/*Cliente*/,/*Loja*/,/*Exame*/,.F.) //Valida se tem contrato
			MsgStop(STR0117)//"Não poderá ser incluído exames, pois o cliente não possui contrato ativo."
			dbSelectArea("TM5")
			Return .f.
		Endif
	Endif

	dbSelectArea("TM5")

	RegToMemory("TM5",INCLUI)

	aAreaTM5 := TM5->(GetArea())
	MDT120INIT(cNUMFIC)

	lRefresh := .T.

	dbSelectArea("TM5")

	aPos1 := {  15,  1, 140,315 }
	Continua := .F.
	dbSelectArea( "TM5" )

	nOpca := 0

	DEFINE MSDIALOG oDlg TITLE Ccadastro From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd COLOR CLR_BLACK,CLR_WHITE PIXEL

	oEnchoice := Msmget():New("TM5", nReg, nopcx,,,,,aPosObj[1],,3)

	If lCLICK
		NGPOPUP(aSMenu,@oMenu)
		oDlg:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}
		oEnchoice:oBox:bRClicked := { |o,x,y| oMenu:Activate(x,y,oDlg)}
	Endif

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpca:=1,If(!obrigatorio(aGets,aTela),nOpca := 0,If(!CHCKGRAEX(),nOpca := 0,oDlg:End()))},{||oDlg:End()},;
							AlignObject(oDlg,{oEnchoice:oBox},1))

	If nOpcA == 1
		lGravaOk := CEXAGRAVA(cAlias,nOpcao)
		If !lGravaOk
			Help(" ",1,"A120NAOREG")
		Else
			//Processa Gatilhos
			EvalTrigger()
			If __lSX8
				ConfirmSX8()
			Endif
		EndIf
	ElseIf __lSX8
		RollBackSX8()
	Endif

	//Ponto de entrada chamado na Inclusão de registro, passa o parametro nOpca, que deve ser verificado
	//na rotina do ponto de entrada através do paramixb, caso for == 1, entao a inclusao foi confirmada,
	//caso igual a 0, a inclusão foi cancelada.
	If ExistBlock("MDTA120B")
		ExecBlock("MDTA120B",.F.,.F.,{nOpcA})
	Endif
	dbSelectArea("TM5")
	#IFNDEF TOP
		dbSetOrder(nOldIndex)
	#ELSE
		dbSetOrder(1)
	#ENDIF
	lREFRESH := .T.

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} CHCKGRAEX
Consistencia antes de gravar exame.
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@return boolean, retorna verdadeiro se aprovado nas validações
/*/
//-------------------------------------------------------------------
Function CHCKGRAEX()

	Local nIND := IndexOrd()
	Local lRet := .T.
	Local aAreaTMD

	If !obrigatorio( aGets, aTela )
	lRet := .F.
	Else
		dbSelectArea( "TM5" )
		dbSetOrder( 8 )
		If !ExistChav( "TM5", M->TM5_NUMFIC + DTOS(M->TM5_DTPROG) + M->TM5_HRPROG + M->TM5_EXAME, 8)
			dbSetOrder( nIND )
			lRet := .F.
		Endif
	Endif

	If !EMPTY(M->TM5_FORNEC)
		If !CARRELOJA()
			Return .f.
		Endif
		aAreaTMD := GetArea()
		If !Empty(M->TM5_EXAME)
			dbSelectArea("TMD")
			dbSetOrder(1)
			If !dbSeek(xFilial("TMD")+M->TM5_FORNEC+M->TM5_LOJA+M->TM5_EXAME)
				ShowHelpDlg( STR0108 ,;
					{ STR0180 + Trim(NGSEEK("TM4",M->TM5_EXAME,1,"TM4_NOMEXA")) } , 2 ,;
					{ STR0181 + Trim(NGSEEK("TM4",M->TM5_EXAME,1,"TM4_NOMEXA")) } , 2 )
				lRet := .F.
			EndIf
		EndIf
		RestArea(aAreaTMD)
	Endif

	If lRet .And. ExistBlock( "MDTA1202" )
		lRet := ExecBlock( "MDTA1202", .F., .F. )
		If ValType( lRet ) <> "L"
			lRet := .F.
		EndIf
	EndIf

	dbSetOrder( nIND )

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} CEXAGRAVA
Grava o registro
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@param cAlias, caracter, alias posicionado
@param nOpcao, numeric, operação realizada
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function CEXAGRAVA(cAlias,nOpcao)

	Local ny

	//Grava no arquivo de Ocorrencias - TM5
	dbSelectArea( "TM5" )
	RecLock("TM5",.T.)

	For ny := 1 To TM5->(FCOUNT())
		nx := "m->" + FieldName(ny)
		FieldPut(ny, &nx.)
	Next ny
	MSUNLOCK("TM5")

	If lSigaMdtps
		//Grava TOU relacionado
		MDT120GTOU()
	Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} VIEXA120
Visualiza Ocorrencias da ficha
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@param cAlias, caracter, alias posicionado
@param nReg, numeric, recno do registro posicionado
@param nOpcx, numeric, operação realizada
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function VIEXA120(cAlias,nReg,nOpcx)

	aAreaTM5 := TM5->(GetArea())
	nRet :=  NGCAD01("TM5", nReg, 2)
	RestArea(aAreaTM5)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} ALEXA120
Altera de ocorrencias da ficha
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@param cAlias, caracter, alias posicionado
@param nReg, numeric, recno do registro posicionado
@param nOpcx, numeric, operação realizada
@return numeric, retorna 1 se a construção da interface foi bem
sucedida e 0 se não foi
/*/
//-------------------------------------------------------------------
Function ALEXA120(cAlias,nReg,nOpcx)

	Local lConsulta := IsInCallStack("MDTC990") .Or. IsInCallStack("MDTC500")
	Local cCpsVld	:= If( NGCADICBASE("TMK_USUARI","A","TMK",.F.) .And. Empty( TM5->TM5_USERGA ) , "TM5->TM5_USERGI" , "TM5->TM5_USERGA" )

	aAreaTM5 := TM5->(GetArea())

	If Type( "lSuperUsr" ) <> "L" .Or. !lSuperUsr
		If FindFunction("MDTRESTRI") .AND. NGCADICBASE("TMK_USUARI","A","TMK",.F.) .AND. !Empty(TM5->TM5_DTRESU) .AND. !MDTRESTUS(MDTDATALO( cCpsVld , .F. ) )
			RestArea(aAreaTM5)
			Return 0
		Endif
	EndIf

	If !lConsulta
		bNGGRAVA := {|| fVldConfirm(Inclui, Altera) }
	EndIf
	nRet :=  NGCAD01("TM5", nReg, nOpcx)
	If !lConsulta
		bNGGRAVA := {}
	EndIf

	If lSigaMdtps .AND. !lConsulta
		//Grava TOU relacionado
		MDT120GTOU()
	Endif

	If ExistBlock("MDTA120AL") .AND. !lConsulta
		ExecBlock("MDTA120AL",.F.,.F.)
	Endif


	RestArea(aAreaTM5)

Return nRet
//-------------------------------------------------------------------
/*/{Protheus.doc} fVldConfirm
Verificação de Confirmação da Gravação de Exame
@type function
@author Jackson Machado
@since 30/08/2019
@param Inclui, Lógico, Indica se trata-se de uma inclusão
@param Altera, Lógico, Indica se trata-se de uma alteração
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function fVldConfirm(Inclui, Altera)

	Local lRet := CARRELOJA()

	If lRet .And. ExistBlock("MDTA1202")
		lRet := ExecBlock( "MDTA1202", .F., .F. )
		If ValType( lRet ) <> "L"
			lRet := .F.
		EndIf
	EndIf

Return lRet
//-------------------------------------------------------------------
/*/{Protheus.doc} EXEXA120
Exclusao de ocorrencias da ficha
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@param cAlias, caracter, alias posicionado
@param nReg, numeric, recno do registro posicionado
@param nOpcx, numeric, operação realizada
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function EXEXA120( cAlias, nReg, nOpcx )

	Local cCpsVld		:= IIf( NGCADICBASE("TMK_USUARI","A","TMK",.F.) .And. Empty( TM5->TM5_USERGA ) , "TM5->TM5_USERGI" , "TM5->TM5_USERGA" )
	Local nAsoTM5		:= TM5->TM5_NUMASO
	Local aAreaTMY		:= {}

	If Type( "lSuperUsr" ) <> "L" .Or. !lSuperUsr
		If FindFunction("MDTRESTUS") .And. NGCADICBASE("TMK_USUARI","A","TMK",.F.)  .And. !Empty(TM5->TM5_DTRESU) .And. !MDTRESTUS(MDTDATALO(cCpsVld,.F.))
			Return .F.
		Endif
	EndIf

	If nOpcx == 5 .And. FindFunction("MDTEXCSBI") .And. NGCADICBASE("TMK_USUARI","A","TMK",.F.)  .And. !Empty(TM5->TM5_DTRESU) .And. !MDTEXCSBI(MDTDATALO("TM5->TM5_USERGI"))
		Return .F.
	Endif

	If Len( nAsoTM5 ) <> 0
		aAreaTMY := TMY->( getArea() )
		dbSelectArea("TMY")
		dbSetOrder(01)
		If !Empty( nAsoTM5 ) .And. !dbSeek( xFilial("TMY") + nAsoTM5 )
			RecLock("TM5", .F.)
				TM5->TM5_NUMASO := Space( Len( TM5->TM5_NUMASO ) )
			MsUnlock("TM5")
		EndIf
		RestArea( aAreaTMY )
	EndIf

	bNGGRAVA := {|| CHKTA120() }

	nRet := NGCAD01("TM5", nReg, 5)
	cNUMFIC  := TM5->TM5_NUMFIC
	dDTPROG  := TM5->TM5_DTPROG
	cHRPROG  := TM5->TM5_HRPROG
	cEXAME   := TM5->TM5_EXAME
	aAreaTM5 := TM5->(GetArea())

	If nRet = 1

		dbSelectArea( "TM6" )
		dbSetOrder( 2 )
		dbSeek( xFilial("TM6") + cNUMFIC + DTOS(dDTPROG) + cHRPROG + cEXAME )

		While !Eof()								.And.;
				xFilial("TM6") == TM6->TM6_FILIAL  .And.;
				TM6->TM6_NUMFIC == cNUMFIC		    .And.;
				TM6->TM6_DTPROG == dDTPROG         .And.;
				TM6->TM6_HRPROG == cHRPROG			.And.;
				TM6->TM6_EXAME  == cEXAME

			RecLock("TM6",.F.)
			dbDelete()
			MSUNLOCK("TM6")
			dbSkip()
		End

		dbSelectArea( "TM9" )
		dbSetOrder( 3 )
		dbSeek( xFilial("TM9") + cNUMFIC + DTOS(dDTPROG) + cHRPROG + cEXAME )

		While !Eof()								.And.;
				xFilial("TM9") == TM9->TM9_FILIAL	.And.;
				TM9->TM9_NUMFIC == cNUMFIC			.And.;
				TM9->TM9_DTPROG == dDTPROG  	    .And.;
				TM9->TM9_HRPROG == cHRPROG			.And.;
				TM9->TM9_EXAME  == cEXAME

			RecLock("TM9",.F.)
			dbdelete()
			MSUNLOCK("TM9")
			dbSkip()
		End

		dbSelectArea( "TN4" )
		dbSetOrder( 3 )
		dbSeek( xFilial("TN4") + cNUMFIC + DTOS(dDTPROG) + cHRPROG + cEXAME )
		While !Eof()						  		.And.;
				xFilial("TN4") == TN4->TN4_FILIAL  .And.;
				TN4->TN4_NUMFIC == cNUMFIC			.And.;
				TN4->TN4_DTPROG == dDTPROG   	    .And.;
				TN4->TN4_HRPROG == cHRPROG			.And.;
				TN4->TN4_EXAME  == cEXAME

			RecLock("TN4",.F.)
			dbdelete()
			MSUNLOCK("TN4")
			dbSkip()
		End


		If AliasInDic("TYB")
			dbSelectArea( "TYB" )
			dbSetOrder( 1 ) //TYB_FILIAL+TYB_NUMFIC+DTOS(TYB_DTPROG)+TYB_EXAME
			dbSeek( xFilial("TYB") + cNUMFIC + DTOS(dDTPROG) + cHRPROG + cEXAME )

			While !Eof()								.AND.;
					xFilial("TYB") == TYB->TYB_FILIAL	.AND.;
					TYB->TYB_NUMFIC == cNUMFIC			.AND.;
					TYB->TYB_DTPROG == dDTPROG  	    .AND.;
					TYB->TYB_HRPROG == cHRPROG			.AND.;
					TYB->TYB_EXAME  == cEXAME

					RecLock("TYB",.F.)
					dbdelete()
					TYB->( MSUNLOCK() )
					TYB->( dbSkip() )
			End
		EndIf
		If AliasInDic("TYC")
			dbSelectArea( "TYC" )
			dbSetOrder( 1 )//TYC_FILIAL+TYC_NUMFIC+DTOS(TYC_DTPROG)+TYC_EXAME
			dbSeek( xFilial("TYC") + cNUMFIC + DTOS(dDTPROG) + cHRPROG + cEXAME )

			While !Eof()								.AND.;
					xFilial("TYC") == TYC->TYC_FILIAL	.AND.;
					TYC->TYC_NUMFIC == cNUMFIC			.AND.;
					TYC->TYC_DTPROG == dDTPROG  	    .AND.;
					TYC->TYC_HRPROG == cHRPROG			.AND.;
					TYC->TYC_EXAME  == cEXAME

					RecLock("TYC",.F.)
					dbdelete()
					TYC->( MSUNLOCK() )
					TYC->( dbSkip() )
			End
		EndIf
	Endif

	dbSelectArea(cAlias)
	RestArea(aAreaTM5)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} CHKTA120
Validação chamada pelo bloco de gravação da exclusão do exame
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@return boolean, retorna falso caso valor do aso seja diferente de 0
/*/
//-------------------------------------------------------------------
Function CHKTA120()

	Local lRet := .T.

	If VAL(TM5->TM5_NUMASO) <> 0
		Help(" ",1,"MSG_EXCEXE")
		lRet := .F.
	Endif

	If ExistBlock( "MDTA1201" )
		lRet := ExecBlock( "MDTA1201", .F., .F. )
		If ValType( lRet ) <> "L"
			lRet := .F.
		EndIf
	Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} FORNEXA
Consistencia fornecedor exame
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@return boolean, retorna verdadeiro se encontrar correspondência na
tabela de 'preços dos exames'
/*/
//-------------------------------------------------------------------
Function FORNEXA()

	Local lRet := .T.

	dbSelectArea("TMD")
	dbSetOrder(1)
	If !dbSeek(xFilial("TMD") + M->TM5_FORNEC + M->TM5_LOJA + M->TM5_EXAME)
		Help(" ",1,"MSG_NEXAME")
		lRet := .F.
	Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} CARRELOJA
Carrega o codigo do loja
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@return boolean, retorna verdadeiro ou falso de acordo com as validações
/*/
//-------------------------------------------------------------------
Function CARRELOJA()

	Local dDtExa		:= If( !Empty(M->TM5_DTRESU) , M->TM5_DTRESU , M->TM5_DTPROG )
	Local lTemFornec	:= .F.
	Local aArea		:= GetArea()
	Local lRet			:= .T.
	Local cLoja 		:= Space(2)
	Local lSigaMdtps	:= SuperGetMv("MV_MDTPS",.F.,"N") == "S"

	If !EMPTY(M->TM5_FORNEC)

		DbselectArea("SA2")
		DbsetOrder(1)

		If !Empty(M->TM5_FORNEC)

			If M->TM5_FORNEC != TMD->TMD_FORNEC
				TMD->(DbSetOrder(1))
				TMD->(DbSeek(xFilial("TMD")+M->TM5_FORNEC))
			Endif

			cLoja := TMD->TMD_LOJA	             //M //-> TM5_LOJA
			lRet := ExistCpo("SA2",M->TM5_FORNEC+cLoja)
			M->TM5_LOJA:= cLoja

		Else

			If Dbseek(xfilial("TMD")+M->TM5_FORNEC+M->TM5_LOJA)
				lRefresh := .t.
			Endif

		Endif

		If !lSigaMdtps
			dbSelectArea("TMD")
			dbSetOrder(1)
			If !dbSeek(xFilial("TMD")+M->TM5_FORNEC+M->TM5_LOJA+M->TM5_EXAME)
				ShowHelpDlg( STR0108 ,;
					{ STR0180 + Trim(NGSEEK("TM4",M->TM5_EXAME,1,"TM4_NOMEXA")) } , 2 ,;
					{ STR0181 + Trim(NGSEEK("TM4",M->TM5_EXAME,1,"TM4_NOMEXA")) } , 2 )
				lRet := .F.
			Else
				dbSelectArea("TMD")
				dbSetOrder(1)
				dbSeek(xFilial("TMD")+M->TM5_FORNEC+M->TM5_LOJA+M->TM5_EXAME)
				While !eof() .and. xFilial("TMD")+M->TM5_FORNEC+M->TM5_LOJA+M->TM5_EXAME == TMD->(TMD_FILIAL+TMD_FORNEC+TMD_LOJA+TMD_EXAME)
				If TMD->(FieldPos("TMD_DTFIM")) > 0
						If dDtExa >= TMD->TMD_DTINIC .AND. (dDtExa <= TMD->TMD_DTFIM .OR. Empty(TMD->TMD_DTFIM))
							lTemFornec := .T.
							Exit
						Endif
					Else
						If dDtExa >= TMD->TMD_DTINIC
							lTemFornec := .t.
							Exit
						Endif
					Endif
					DbSelectArea("TMD")
					dbSkip()
				End

				If !lTemFornec
					MsgStop(STR0118+Trim(NGSEEK("TM4",M->TM5_EXAME,1,"TM4_NOMEXA"))+STR0119,STR0182)//"O exame '"##"' ' não está no período de fornecimento. Verifique o período no cadastro de Fornecedor de Exames."
					M->TM5_LOJA := Space(Len(M->TM5_LOJA))
					lRet := .F.
				Endif
			EndIf
		Endif
	Else
		M->TM5_LOJA := Space(Len(M->TM5_LOJA))
	Endif

	RestArea(aArea)

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} NUMPCMSO
Procura o proximo número do PCMSO ou altera indicador exame
@type function
@author Inacio Luiz Kolling
@since 22/01/2000
@return boolean, retorna verdadeiro ou falso de acordo com as validações
/*/
//-------------------------------------------------------------------
Function NUMPCMSO()

	Local lRet := .T.
	Private lNGMDTPS  := .F.

	If SuperGetMv("MV_NGMDTPS",.F.,"N") == "S"
		lNGMDTPS := .T.
	Endif

	If M->TM5_ORIGEX = "2"

	lPCMSO := .F.
	dbSelectArea("TMW")
	dbSetOrder(1)
	Dbgobottom()
	Do While !BOF()
		If TMW->TMW_FILIAL != xFilial("TMW")
			dbSkip(-1)
			Loop
		Endif
		If lNGMDTPS .or. lSigaMdtPS
			If M->TM5_CC < TMW->TMW_CCDE .OR. M->TM5_CC > TMW->TMW_CCATE
				dbSelectArea("TMW")
				dbSkip(-1)
				Loop
			EndIf
		EndIf

		If M->TM5_DTPROG >= TMW->TMW_DTINIC .AND. M->TM5_DTPROG <= TMW->TMW_DTFIM
			If Empty(M->TM5_PCMSO)
				M->TM5_PCMSO := TMW->TMW_PCMSO
			Endif
			lRefresh := .T.
			lPCMSO := .T.
			Exit
		Endif
		dbSkip(-1)
	EndDo

	If !lPCMSO
		Help(" ",1,"MSG_PCMSO")
		lRet := .F.
	Endif

	Else
		M->TM5_PCMSO  := SPACE(06)
		M->TM5_NATEXA := SPACE(01)
		lRefresh := .T.
	Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} REXAME120

Programa de Resultado do exame

@type    function

@author  Inacio Luiz Kolling
@since   02/02/2000

@return .T., boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function REXAME120()

	Local nOpc := 4
	Local aNGBEGINPRM := {}
	Local cCpsVld := If( NGCADICBASE("TMK_USUARI", "A", "TMK", .F.) .And. ;
					 Empty(TM5->TM5_USERGA), "TM5->TM5_USERGI", "TM5->TM5_USERGA")
	Local nOpcTAF
	Local dDtResul

	If !IsInCallStack("MDTA120")//Se nao foi chamado pelo MDTA120
		aNGBEGINPRM := NGBEGINPRM(,"MDTA120",, .F.)
		lSigaMdtps  := SuperGetMv("MV_MDTPS", .F., "N") == "S"
	Endif

	If IsIncallStack("MDTC990") .Or. IsInCallStack("MDTC500")
		aRotSetOpc("TM5", TM5->( Recno() ), 2)
		nOpc := 2
	EndIf

	If Type( "lSuperUsr" ) <> "L" .Or. !lSuperUsr
		If nOpc <> 2 .AND. FindFunction("MDTRESTUS") .AND. NGCADICBASE("TMK_USUARI","A","TMK",.F.)  .AND. !Empty(TM5->TM5_DTRESU) .AND. !MDTRESTUS(MDTDATALO(cCpsVld,.F.))
			NGRETURNPRM(aNGBEGINPRM)
			Return .F.
		Endif
	EndIf

	/*/
	+--------------------------------------------------------------+
	| Define Array contendo as Rotinas a executar do programa      |
	| ----------- Elementos contidos por dimensao ------------     |
	| 1. Nome a aparecer no cabecalho                              |
	| 2. Nome da Rotina associada                                  |
	| 3. Usado pela rotina                                         |
	| 4. Tipo de Transao a ser efetuada                          |
	|    1 - Pesquisa e Posiciona em um Banco de Dados             |
	|    2 - Simplesmente Mostra os Campos                         |
	|    3 - Inclui registros no Bancos de Dados                   |
	|    4 - Altera o registro corrente                            |
	|    5 - Remove o registro corrente do Banco de Dados          |
	+--------------------------------------------------------------+
	/*/

	oldROTINA := aCLONE(aROTINA)
	cCad      := cCadastro
	cNUMFIC   := TM5->TM5_NUMFIC
	dDTPROG   := TM5->TM5_DTPROG
	cHRPROG   := TM5->TM5_HRPROG
	cEXAME    := TM5->TM5_EXAME

	Private aAreaTM5 := TM5->(GetArea())

	dbSelectArea("TM4")
	dbSetOrder(1)
	If dbSeek(xFilial("TM4")+TM5->TM5_EXAME)
		Do Case
			Case TM4->TM4_INDRES = "1"

				cCadastro := STR0013 //"Exames Normal"

				nOpcTAF		:= If( Empty( TM5->TM5_DTRESU ) , 3 , 4 )
				dDtResul	:= TM5->TM5_DTRESU

				Begin Transaction

				If ALEXA120("TM5",RECNO(),nOpc) == 1 .AND. nOpc <> 2
					ALTDTRES( .F. , , , nOpcTAF , dDtResul )
				Endif

				End Transaction

			Case TM4->TM4_INDRES = "2"

				cCadastro := STR0014 //"Exames Por Agente"
				INAGA120()

			Case TM4->TM4_INDRES = "3"

				cCadastro := STR0015 //"Itens do Exames"
				INQUA120()

			Case TM4->TM4_INDRES = "4"

				cCadastro := STR0016 //"Exames Audiometria"
				cArqu := "TM9"
				If ExistBlock("VAUDIO120")
					ExecBlock("VAUDIO120",.F.,.F.)
				Else
					AUDIO120( , , nOpc )
				EndIf

			Otherwise

				If TM4->TM4_OFTIPO == "1" //Acuidade Visual

					cArqu := "TYB"
					cCadastro := STR0192 //"Exame Oftalmológico Acuidade Visual"
					MDT120OR() //Monta tela de Acuidade Visual

				ElseIf TM4->TM4_OFTIPO == "2" //Snellen

					cArqu := "TYC"
					cCadastro := STR0193 //"Exame Oftalmológico Snellen"
					MDT120SN() //Monta tela de Snellen

				EndIf

		EndCase

	Endif

	RestArea(aAreaTM5)
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} INAGA120
Inclusao de Resultados por Agente
@type function
@author Inacio Luiz Kolling
@since 02/02/2000
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function INAGA120()

	Local LVar01:=1,nLinhas:=0,cSaveMenuh, bCampo
	Local GetList:={}, nOpcao:=3
	Local lGravaOK := .T.
	Local oDlg, oGet, i, oMenu
	Local lConsulta := IsInCallStack("MDTC990") .Or. IsInCallStack("MDTC500")
	Local lCLICK   := (TYPE("aSMENU")   == "A") .And. Len(aSMENU) > 0
	Local oEnchoice

	Private oMenu
	Private aSize := MsAdvSize(,.f.,430), aObjects := {}
	Aadd(aObjects,{050,050,.t.,.t.})
	Aadd(aObjects,{100,100,.t.,.t.})
	aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.t.)


	//Salva a integridade dos dados
	aRELAC	:=	{	{ "TN4_NUMFIC", "TM5->TM5_NUMFIC"},;
					{ "TN4_DTPROG", "TM5->TM5_DTPROG"},;
					{ "TN4_HRPROG", "TM5->TM5_HRPROG"},;
					{ "TN4_EXAME" , "TM5->TM5_EXAME"} }

	INCLUI := .T.

	dbSelectArea( "TN4" )
	dbSetOrder( 3 )

	If !dbSeek( xFilial("TN4") + cNUMFIC + DTOS(dDTPROG) + cHRPROG + cEXAME )
		cCadastro := cCadastro + STR0017 //" - Incluir"

		Private aTELA[0][0],aGETS[0],aHeader[0],nUsado:=0

		dbSelectArea("TN4")

		bCampo    := { |nCPO| Field(nCPO) }

		For i := 1 To FCount()
			M->&(EVAL(bCampo,i)) := FieldGet(i)

			If Inclui
				If ValType(M->&(EVAL(bCampo,i))) == "C"
					M->&(EVAL(bCampo,i)) := SPACE(LEN(M->&(EVAL(bCampo,i))))
				ELSEIF ValType(M->&(EVAL(bCampo,i))) == "N"
					M->&(EVAL(bCampo,i)) := 0
				ELSEIF ValType(M->&(EVAL(bCampo,i))) == "D"
					M->&(EVAL(bCampo,i)) := cTod("  /  /  ")
				ELSEIF ValType(M->&(EVAL(bCampo,i))) == "L"
					M->&(EVAL(bCampo,i)) := .F.
				ENDIF
			Else
				M->&(EVAL(bCampo,i)) := TN4->&(EVAL(bCampo,i))
			Endif
		Next i

		M->TN4_NUMFIC := TM5->TM5_NUMFIC
		M->TN4_DTPROG := TM5->TM5_DTPROG
		M->TN4_HRPROG := TM5->TM5_HRPROG
		M->TN4_EXAME  := TM5->TM5_EXAME

		dbSelectArea("TN4")

		aPos1 := {  15,  1, 140, 315 }
		Continua := .F.
		dbSelectArea( "TN4" )

		nRet := 0
		nOpcx := 3

		DEFINE MSDIALOG oDlg TITLE OemToAnsi(cCadastro) From aSize[ 7 ],0 To aSize[ 6 ],aSize[ 5 ] OF oMainWnd PIXEL

		oEnchoice := MsMGet():New( "TN4" , Recno() , nOpcx , , , , , aPosObj[ 1 ] , , 3 )

		oEnchoice:oBox:align := CONTROL_ALIGN_ALLCLIENT
		If lCLICK
			NgPopUp( asMenu , @oMenu )
			oDlg:bRClicked:= { | o , x , y | oMenu:Activate( x , y , oDlg ) }
			oEnchoice:oBox:bRClicked := { | o , x , y | oMenu:Activate( x , y , oDlg ) }
		EndIf

		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg , ;
													{ | | nRet:=1 , If( !Obrigatorio( aGets , aTela ) , nRet := 0 , oDlg:End() ) } , ;
													{ | | oDlg:End() } )

		If nRet == 1
			lGravaOk := AGENGRAVA(cAlias,nOpcao)
			If !lGravaOk
				Help(" ",1,"A120NAOREG")
			Else
			//Processa Gatilhos
				EvalTrigger()
				If __lSX8
					ConfirmSX8()
				Endif
			EndIf
		ElseIf __lSX8
				RollBackSX8()
		Endif
	Else
		If lConsulta
			cCadastro := cCadastro + " - " + STR0005
			aRotSetOpc( "TN4" , Recno() , 2 )
			nRet := NGCAD01( "TN4" , RECNO() , 2 )
		Else
			cCadastro := cCadastro + STR0018 //" - Alterar"
			INCLUI := .F.
			nRet := NGCAD01("TN4",RECNO(),4)
		EndIf
	Endif

	If nRet = 1 .AND. !lConsulta
		RestArea(aAreaTM5)
		//Altera data do Resultado
		ALTDTRES(.F., ,)
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} AGENGRAVA
Grava o registro do arquivo de Ocorrencias - TN4
@type function
@author Inacio Luiz Kolling
@since meados de 1900 e guaraná com rolha
@param cAlias, caracter, alias
@param nOpcao, numeric, param_descr
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function AGENGRAVA(cAlias, nOpcao)

	Local ny

	dbSelectArea( "TN4" )
	RecLock("TN4",.T.)

	For ny := 1 To TN4->(FCOUNT())
		nx := "m->" + FieldName(ny)
		FieldPut(ny, &nx.)
	Next ny
	TN4->TN4_FILIAL := xFilial("TN4")

	MSUNLOCK("TN4")

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} INQUA120
Inclusao de Resultados Quantitativo dos Itens do Exame
@type function
@author Inacio Luiz Kolling
@since 02/02/2000
@param cAlias, caracter, alias posicionado
@param nReg, numeric, recno do registro posicionado
@param nOpcx, numeric, operação realizada
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function INQUA120(cAlias,nReg,nOpcx)

	Local nX
	Local nY
	Local nZ
	Local i,oMenu3
	Local nCnt       := 0
    Local nCp        := 0
	Local cNomCp     := ""
	Local cUsado     := ""
	Local cNvlCpo    := ""
	Local aTamCpo    := {}
	Local cTipo      := ""
	Local cContx     := ""
	Local aStrTM6    := TM6->( dbStruct() )
	Local nFimCpos   := 0
	Local aColsAux   := {}
	Local aCpsRES    := { "TM8_ITEM"  , "TM8_NOMITE", "TM8_LIMMIN", "TM8_LIMMAX", ;
	                      "TM6_QTDITE", "TM6_DESRES" }
	Local aCpsTM6    := { }
	Local aCpsNao    := { "TM6_NUMFIC", "TM6_DTPROG", "TM6_HRPROG", "TM6_EXAME" , ;
                        "TM6_NOMEXA", "TM6_ITEM"  , "TM6_NOMITE", "TM6_QTDITE", ;
                        "TM6_DESRES" }
	Local bOkReq     := { ||nOpca:=1, IIf( oGet:TudoOk(), oDlg3:End(), nOpca := 0 ) }
	Local bCancelReq := { ||oDlg3:End(), nOpca := 0 }

	//Inclui possíveis campos adicionais
	For nZ := 1 to Len( aStrTM6 )
		If aScan( aCpsNao, {|x| x == aStrTM6[ nZ, 1 ]} ) == 0
			aAdd( aCpsRES, aStrTM6[ nZ, 1 ] )
			aAdd( aCpsTM6, aStrTM6[ nZ, 1 ] )
		EndIf
	Next nZ

	dbSelectArea("TM4")
	dbSetOrder(1)
	dbSeek(xFilial("TM4")+cEXAME)
	cNEXAME := TM4->TM4_NOMEXA

	// MODELO DE GETDADOS COM USO DE VARIAS ARQUIVOS

	LEITEM   := .F.
	LENOMITE := .F.
	LELIMMIN := .F.
	LELIMMAX := .F.

	If IsInCallStack("MDTC990") .Or. IsInCallStack("MDTC500")
		nOpcx:=2
	Else
		nOpcx:=4
	EndIf

	nUsado  := 0
	aHeader := {}

	aHeader := NGHeadExc( aCpsRES, .F. )
	nFimCpos := Len(aHeader) //Pega a posição do ultimo campo do aHeader

	nITEM   := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "TM8_ITEM"   })
	nNOMITE := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "TM8_NOMITE" })
	nLIMMIN := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "TM8_LIMMIN" })
	nLIMMAX := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "TM8_LIMMAX" })
	nQTDITE := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "TM6_QTDITE" })
	nDESRES := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "TM6_DESRES" })

	dbSetOrder(1)

	dbSelectArea("TM8")
	dbSetOrder(1)
	dbSeek(xFilial("TM8")+cEXAME)

	nCnt   := 0
	nItens := 0
	While TM8->( !Eof() ) .And. TM8->TM8_FILIAL == xFilial("TM8") .And. TM8->TM8_EXAME == cEXAME
		If ( TM8->TM8_SEXO == ( If( SRA->RA_SEXO == "M","1","2" ) ) .Or. TM8->TM8_SEXO == "3" )
			nCnt := nCnt + 1
		EndIf
		TM8->( dbSkip() )
	End

	If nCnt > 0 //Se exitirem itens para o exame

		//Inclui coluna de registro atraves de funcao generica
		ADHeadRec("SC7", aHeader)

		aColsAux := BlankGetd( aHeader )[1]

		dbSelectArea("TM8")
		dbSetOrder(1)
		dbSeek(xFilial("TM8")+cEXAME)

		aCols := {}

		nCnt := 0
		While TM8->( !Eof() )						.And.;
				TM8->TM8_FILIAL == xFilial("TM8")	.And.;
				TM8->TM8_EXAME == cEXAME

			If( TM8->TM8_SEXO == ( If( SRA->RA_SEXO == "M","1","2" ) ) .Or. TM8->TM8_SEXO == "3" )
				nCnt++

				aAdd( aCols,  aClone( aColsAux ) )

				//Montando aCols
				aCOLS[nCnt][nITEM]   := TM8->TM8_ITEM
				aCOLS[nCnt][nNOMITE] := TM8->TM8_NOMITE
				aCOLS[nCnt][nLIMMIN] := TM8->TM8_LIMMIN
				aCOLS[nCnt][nLIMMAX] := TM8->TM8_LIMMAX
				aCOLS[nCnt][nQTDITE] := 00.00
				aCOLS[nCnt][nDESRES] := space(40)

				aCols[nCnt][nFimCpos+1] := "TM8"
				aCols[nCnt][nFimCpos+2] := TM8->(Recno())
				aCols[nCnt][nFimCpos+3] := .F.

				nUsado := 6

				For nCp := 1 To Len(aCpsTM6)

					cNomCp  := aCpsTM6[ nCp ]
					lUso    := X3USO( GetSx3Cache( cNomCp, "X3_USADO" ) )
					cNvlCpo := GetSx3Cache( cNomCp, "X3_NIVEL" )
					aTamCpo := TamSX3( cNomCp )
					cTipo   := GetSx3Cache( cNomCp, "X3_TIPO")

					If lUso .And. cNivel >= cNvlCpo
						nUsado++
						//Monta Array de 1 elemento vazio. Se incluso.
						IF cTipo == "C"
							aCOLS[nCnt][nUsado] := SPACE(aTamCpo[1])
						ElseIf cTipo == "N"
							aCOLS[nCnt][nUsado] := 0
						ElseIf cTipo == "D"
							aCOLS[nCnt][nUsado] := dDataBase
						ElseIf cTipo == "M"
							aCOLS[nCnt][nUsado] := ""
						Else
							aCOLS[nCnt][nUsado] := .F.
						Endif
					EndIf

				Next nCp

				dbSelectArea("TM6")
				dbSetOrder( 2 )
				If dbSeek( xFilial("TM6") + cNUMFIC + DTOS(dDTPROG) + cHRPROG + cEXAME + TM8->TM8_ITEM )
					aCOLS[nCnt][nQTDITE] := TM6->TM6_QTDITE
					aCOLS[nCnt][nDESRES] := TM6->TM6_DESRES
					While !Eof() .And. (xFilial("TM6")+cNUMFIC+DTOS(dDTPROG)+cHRPROG+cEXAME+TM8->TM8_ITEM) == TM6->(TM6_FILIAL+TM6_NUMFIC+DTOS(TM6_DTPROG)+TM6_HRPROG+TM6_EXAME+TM6_ITEM)

						nUsado := 6
						For nCp := 1 To Len(aCpsTM6)

							cNomCp  := aCpsTM6[ nCp ]
							lUso    := X3USO( GetSx3Cache( cNomCp, "X3_USADO" ) )
							cNvlCpo := GetSx3Cache( cNomCp, "X3_NIVEL" )
							cContx   := GetSx3Cache( cNomCp, "X3_CONTEXT")

							If lUso .And. cNivel >= cNvlCpo

								nUsado++
								If cContx # "V"
									aCOLS[nCnt][nUsado] := &("TM6" + "->" + cNomCp)
								ElseIf cContx == "V"
									aCOLS[nCnt][nUsado] := CriaVar(Alltrim(cNomCp))
								Endif

							EndIf

						Next nCp

						dbSelectArea("TM6")
						dbSkip()
					End
				Endif

				nItens := nItens + 1
				lRefresh := .T.

			EndIf

			dbSelectArea( "TM8" )
			dbSkip()

		End

	Else
		Help(" ",1,"NGSSITENSE") //"Nao existe itens para este Exame"
		Return .T.
	Endif

	cTudoOk  :="NGC0TUDOK()"
	cLinhaOk :="NGC0LINHOK()"

	nOPCA := 0
		DEFINE MSDIALOG oDlg3 TITLE OemToAnsi( cCadastro ) From 9, 0 To 35, 90 OF oMainWnd

			oPnlSup := TPanel():New( 0, 0, , oDlg3, , , , , , , , .F., .F. )
				oPnlSup:Align := CONTROL_ALIGN_ALLCLIENT

				@ 08, 05   SAY OemToAnsi( STR0020 ) Of oPnlSup Pixel //"Exame"
				@ 07, 25   MSGET cEXAME Of oPnlSup When .F. Pixel
				@ 28, 05   SAY OemToAnsi( STR0021 ) Of oPnlSup Pixel //"Nome"
				@ 27, 25  MSGET cNEXAME Of oPnlSup When .F. Pixel

			oGet := MSGetDados():New( 50, 1, 160, 355, nOpcx, "NGC0LINHOK", "NGC0TUDOK", "", .F., , , , nItens, , , , , oPnlSup )

		NgPopUp( asMenu, @oMenu3, oDlg3 )
		oDlg3:bRClicked:= { |o, x, y| oMenu3:Activate( x, y, oDlg3 )}
		ACTIVATE MSDIALOG oDlg3 ON INIT EnchoiceBar( oDlg3, bOkReq, bCancelReq ) CENTERED

	If nOPCA == 1 .And. nOpcx != 2

		nPassa := "1"
		For nX := 1 To nItens

			dbSelectArea("TM6")
			dbSetOrder( 2 ) //TM6_FILIAL+TM6_NUMFIC+DTOS(TM6_DTPROG)+TM6_HRPROG+TM6_EXAME+TM6_ITEM
			If dbSeek( xFilial("TM6") +cNUMFIC +DTOS(dDTPROG) +cHRPROG +cEXAME +aCols[nx][nITEM] )
				RecLock("TM6",.F.)
				dbdelete()
				MSUNLOCK("TM6")
			EndIf

			RecLock("TM6",.T.)
			TM6->TM6_FILIAL := xfilial("TM6")
			TM6->TM6_NUMFIC := cNUMFIC
			TM6->TM6_DTPROG := dDTPROG
			TM6->TM6_HRPROG := cHRPROG
			TM6->TM6_EXAME  := cEXAME
			TM6->TM6_ITEM   := aCols[nX][nITEM]
			TM6->TM6_QTDITE := aCols[nX][nQTDITE]
			TM6->TM6_DESRES := aCols[nX][nDESRES]

			FOR i := 1 TO FCount()
					If FieldName(i) == "TM6_FILIAL" .Or. FieldName(i) == "TM6_NUMFIC" .Or. FieldName(i) == "TM6_DTPROG" .Or.;
					FieldName(i) == "TM6_HRPROG" .Or. FieldName(i) == "TM6_EXAME" .Or. FieldName(i) == "TM6_NOMEXA" .Or.;
					FieldName(i) == "TM6_ITEM" .Or. FieldName(i) == "TM6_NOMITE" .Or. FieldName(i) == "TM6_QTDITE" .Or.;
					FieldName(i) == "TM6_DESRES"
						Loop
					EndIf
					If (aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == FieldName(i)})) > 0
					x   := "m->" + FieldName(i)
					&x. := aCols[nX][aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == FieldName(i) })]
					y   := "TM6->" + FieldName(i)
					&y := &x
					Endif
			Next i

			MSUNLOCK("TM6")

			dbSelectArea("TM8")
			dbSetOrder(1)
			dbSeek(xFilial("TM8")+ TM6->TM6_EXAME+TM6->TM6_ITEM)

			If TM6->TM6_QTDITE < TM8->TM8_LIMMIN .Or. TM6->TM6_QTDITE > TM8->TM8_LIMMAX
					nPassa := "2"
			EndIf

		Next
		RestArea(aAreaTM5)

		//Altera data de Resultado
		ALTDTRES(.F., ,nPassa)

	Endif

	dbSelectArea("TN4")

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NGC0LINHOK
Consistencia da linha
(Descontinuada)
@type function
@author Inacio Luiz Kolling
@since 24/02/2000
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function NGC0LINHOK

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NGC0TUDOK
Consistencia final
(Descontinuada)
@type function
@author Inacio Luiz Kolling
@since 24/02/2000
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function NGC0TUDOK

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} function
Visualizar,Incluir,Alterar exames audiometria
@type function
@author Inacio Luiz Kolling
@since 02/02/2000
@param cAlias, caracter, alias posicionado
@param nReg, numeric, recno do registro posicionado
@param nOpcx, numeric, operação realizada
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function AUDIO120(cAlias, nReg, nOpcx)

	dbSelectArea("TM9")

	//Verifica se os campos novos da versão 10 release 1.2 existem. Caso afirmativo o programa irá se comportar conforme especificação dessa release

	If	TM9->(FieldPos("TM9_ODMA25")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMA50")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMA10")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMA20")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMA30")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMA40")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMA60")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMA80")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMA25")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMA50")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMA10")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMA20")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMA30")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMA40")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMA60")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMA80")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMED5")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODMED3")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMED5")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEMED3")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODCLIN")) > 0 .AND.;
		TM9->(FieldPos("TM9_ODINSS")) > 0 .AND.;
		TM9->(FieldPos("TM9_OECLIN")) > 0 .AND.;
		TM9->(FieldPos("TM9_OEINSS")) > 0

		If TM9->(FieldPos("TM9_ODAS25")) > 0
			fMod3Audio( cAlias , nReg , nOpcx )
		Else
			_MDT120AUDIO( cAlias , nReg , nOpcx )
		Endif
	Else

		MDT120AUDIO( cAlias , nReg , nOpcx )

	Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} RESULT120
Calcula o resultado do exame conforme as frequencias
@type function
@author Denis Hyroshi de Souza
@since 14/03/2003
@return boolean, sempre falso
/*/
//-------------------------------------------------------------------
Function RESULT120()

	Local nMaior, nMenor
	Local lRight := .F., lLeft := .F.
	aSeqOD := {}
	aSeqOE := {}
	aViaOt := {}
	aViaOE := {}
	aViaOD := {}

	If Substr(M->TM9_ODREFE,1,1) == "2" .OR.;
	Substr(M->TM9_OEREFE,1,1) == "2"
		nRecno := Recno()
		NG120AUDIO()    //Recolhe informacoes do exame referencial
		dbSelectArea("TM9")
		dbSetOrder(1)
		Dbgoto(nRecno)
	Endif

	If lTipoPer .and. Substr(M->TM9_INDVIA,1,1) $ "1/2"
		NG120VIAOT( If(Substr(M->TM9_INDVIA,1,1)=="1","2","1") ) //Recolhe informacoes do exame em outra via

		//ORELHA DIREITA
		If Len(aViaOD) > 0
			//Verifica se audicao normal
			If Val(M->TM9_OD05KH) <= 25 .and. Val(M->TM9_OD1KHZ) <= 25 .and. Val(M->TM9_OD2KHZ) <= 25 .and. ;
				Val(M->TM9_OD3KHZ) <= 25 .and. Val(M->TM9_OD4KHZ) <= 25 .and. Val(M->TM9_OD6KHZ) <= 25 .and. ;
				aViaOD[2] <= 25 .and. aViaOD[3] <= 25 .and. aViaOD[4] <= 25 .and. ;
				aViaOD[5] <= 25 .and. aViaOD[6] <= 25 .and. aViaOD[7] <= 25

				M->TM9_ODTIPE := aTipoPerda[5]
			Endif
			//Verifica se perda condutiva
			If Substr(M->TM9_INDVIA,1,1) == "1"
				If Val(M->TM9_OD05KH) > 25 .and. Val(M->TM9_OD1KHZ) > 25 .and. Val(M->TM9_OD2KHZ) > 25 .and. ;
					Val(M->TM9_OD3KHZ) > 25 .and. Val(M->TM9_OD4KHZ) > 25 .and. Val(M->TM9_OD6KHZ) > 25 .and. ;
					aViaOD[2] <= 25 .and. aViaOD[3] <= 25 .and. aViaOD[4] <= 25 .and. ;
					aViaOD[5] <= 25 .and. aViaOD[6] <= 25 .and. aViaOD[7] <= 25 .and. ;
					(Val(M->TM9_OD05KH) - aViaOD[2]) >= 10 .and. (Val(M->TM9_OD1KHZ) - aViaOD[3]) >= 10 .and. ;
					(Val(M->TM9_OD2KHZ) - aViaOD[4]) >= 10 .and. (Val(M->TM9_OD3KHZ) - aViaOD[5]) >= 10 .and. ;
					(Val(M->TM9_OD4KHZ) - aViaOD[6]) >= 10

					M->TM9_ODTIPE := aTipoPerda[1]
				Endif
			Else
				If Val(M->TM9_OD05KH) <= 25 .and. Val(M->TM9_OD1KHZ) <= 25 .and. Val(M->TM9_OD2KHZ) <= 25 .and. ;
					Val(M->TM9_OD3KHZ) <= 25 .and. Val(M->TM9_OD4KHZ) <= 25 .and. Val(M->TM9_OD6KHZ) <= 25 .and. ;
					aViaOD[2] > 25 .and. aViaOD[3] > 25 .and. aViaOD[4] > 25 .and. ;
					aViaOD[5] > 25 .and. aViaOD[6] > 25 .and. aViaOD[7] > 25 .and. ;
					(aViaOD[2] - Val(M->TM9_OD05KH)) >= 10 .and. (aViaOD[3] - Val(M->TM9_OD1KHZ)) >= 10 .and. ;
					(aViaOD[4] - Val(M->TM9_OD2KHZ)) >= 10 .and. (aViaOD[5] - Val(M->TM9_OD3KHZ)) >= 10 .and. ;
					(aViaOD[6] - Val(M->TM9_OD4KHZ)) >= 10

					M->TM9_ODTIPE := aTipoPerda[1]
				Endif
			Endif
			//Verifica se perda sensorioneural
			If Substr(M->TM9_INDVIA,1,1) == "1"
				If Val(M->TM9_OD05KH) > 25 .and. Val(M->TM9_OD1KHZ) > 25 .and. Val(M->TM9_OD2KHZ) > 25 .and. ;
					Val(M->TM9_OD3KHZ) > 25 .and. Val(M->TM9_OD4KHZ) > 25 .and. Val(M->TM9_OD6KHZ) > 25 .and. ;
					aViaOD[2] > 25 .and. aViaOD[3] > 25 .and. aViaOD[4] > 25 .and. ;
					aViaOD[5] > 25 .and. aViaOD[6] > 25 .and. ;
					!TemGAP(Val(M->TM9_OD05KH),aViaOD[2] , 5) .and. !TemGAP(Val(M->TM9_OD1KHZ),aViaOD[3] , 5) .and. ;
					!TemGAP(Val(M->TM9_OD2KHZ),aViaOD[4] , 5) .and. !TemGAP(Val(M->TM9_OD3KHZ),aViaOD[5] , 5) .and. ;
					!TemGAP(Val(M->TM9_OD4KHZ),aViaOD[6] , 5)

					M->TM9_ODTIPE := aTipoPerda[2]
				Endif
			Else
				If Val(M->TM9_OD05KH) > 25 .and. Val(M->TM9_OD1KHZ) > 25 .and. Val(M->TM9_OD2KHZ) > 25 .and. ;
					Val(M->TM9_OD3KHZ) > 25 .and. Val(M->TM9_OD4KHZ) > 25 .and. ;
					aViaOD[2] > 25 .and. aViaOD[3] > 25 .and. aViaOD[4] > 25 .and. ;
					aViaOD[5] > 25 .and. aViaOD[6] > 25 .and. aViaOD[7] > 25 .and. ;
					!TemGAP(Val(M->TM9_OD05KH),aViaOD[2] , 5) .and. !TemGAP(Val(M->TM9_OD1KHZ),aViaOD[3] , 5) .and. ;
					!TemGAP(Val(M->TM9_OD2KHZ),aViaOD[4] , 5) .and. !TemGAP(Val(M->TM9_OD3KHZ),aViaOD[5] , 5) .and. ;
					!TemGAP(Val(M->TM9_OD4KHZ),aViaOD[6] , 5)

					M->TM9_ODTIPE := aTipoPerda[2]
				Endif
			Endif
			//Verifica se perda mista
			If Substr(M->TM9_INDVIA,1,1) == "1"
				If Val(M->TM9_OD05KH) > 25 .and. Val(M->TM9_OD1KHZ) > 25 .and. Val(M->TM9_OD2KHZ) > 25 .and. ;
					Val(M->TM9_OD3KHZ) > 25 .and. Val(M->TM9_OD4KHZ) > 25 .and. Val(M->TM9_OD6KHZ) > 25 .and. ;
					aViaOD[2] > 25 .and. aViaOD[3] > 25 .and. aViaOD[4] > 25 .and. ;
					aViaOD[5] > 25 .and. aViaOD[6] > 25 .and. ;
					TemGAP(Val(M->TM9_OD05KH),aViaOD[2] , 09) .and. TemGAP(Val(M->TM9_OD1KHZ),aViaOD[3] , 09) .and. ;
					TemGAP(Val(M->TM9_OD2KHZ),aViaOD[4] , 09) .and. TemGAP(Val(M->TM9_OD3KHZ),aViaOD[5] , 09) .and. ;
					TemGAP(Val(M->TM9_OD4KHZ),aViaOD[6] , 09)

					M->TM9_ODTIPE := aTipoPerda[3]
				Endif
			Else
				If Val(M->TM9_OD05KH) > 25 .and. Val(M->TM9_OD1KHZ) > 25 .and. Val(M->TM9_OD2KHZ) > 25 .and. ;
					Val(M->TM9_OD3KHZ) > 25 .and. Val(M->TM9_OD4KHZ) > 25 .and. ;
					aViaOD[2] > 25 .and. aViaOD[3] > 25 .and. aViaOD[4] > 25 .and. ;
					aViaOD[5] > 25 .and. aViaOD[6] > 25 .and. aViaOD[7] > 25 .and. ;
					TemGAP(Val(M->TM9_OD05KH),aViaOD[2] , 09) .and. TemGAP(Val(M->TM9_OD1KHZ),aViaOD[3] , 09) .and. ;
					TemGAP(Val(M->TM9_OD2KHZ),aViaOD[4] , 09) .and. TemGAP(Val(M->TM9_OD3KHZ),aViaOD[5] , 09) .and. ;
					TemGAP(Val(M->TM9_OD4KHZ),aViaOD[6] , 09)

					M->TM9_ODTIPE := aTipoPerda[3]
				Endif
			Endif
		Endif

		//ORELHA ESQUERDA

		If Len(aViaOE) > 0
			//Verifica se audicao normal
			If Val(M->TM9_OE05KH) <= 25 .and. Val(M->TM9_OE1KHZ) <= 25 .and. Val(M->TM9_OE2KHZ) <= 25 .and. ;
				Val(M->TM9_OE3KHZ) <= 25 .and. Val(M->TM9_OE4KHZ) <= 25 .and. Val(M->TM9_OE6KHZ) <= 25 .and. ;
				aViaOE[2] <= 25 .and. aViaOE[3] <= 25 .and. aViaOE[4] <= 25 .and. ;
				aViaOE[5] <= 25 .and. aViaOE[6] <= 25 .and. aViaOE[7] <= 25

				M->TM9_OETIPE := aTipoPerda[5]
			Endif
			//Verifica se perda condutiva
			If Substr(M->TM9_INDVIA,1,1) == "1"
				If Val(M->TM9_OE05KH) > 25 .and. Val(M->TM9_OE1KHZ) > 25 .and. Val(M->TM9_OE2KHZ) > 25 .and. ;
					Val(M->TM9_OE3KHZ) > 25 .and. Val(M->TM9_OE4KHZ) > 25 .and. Val(M->TM9_OE6KHZ) > 25 .and. ;
					aViaOE[2] <= 25 .and. aViaOE[3] <= 25 .and. aViaOE[4] <= 25 .and. ;
					aViaOE[5] <= 25 .and. aViaOE[6] <= 25 .and. aViaOE[7] <= 25 .and. ;
					(Val(M->TM9_OE05KH) - aViaOE[2]) >= 10 .and. (Val(M->TM9_OE1KHZ) - aViaOE[3]) >= 10 .and. ;
					(Val(M->TM9_OE2KHZ) - aViaOE[4]) >= 10 .and. (Val(M->TM9_OE3KHZ) - aViaOE[5]) >= 10 .and. ;
					(Val(M->TM9_OE4KHZ) - aViaOE[6]) >= 10

					M->TM9_OETIPE := aTipoPerda[1]
				Endif
			Else
				If Val(M->TM9_OE05KH) <= 25 .and. Val(M->TM9_OE1KHZ) <= 25 .and. Val(M->TM9_OE2KHZ) <= 25 .and. ;
					Val(M->TM9_OE3KHZ) <= 25 .and. Val(M->TM9_OE4KHZ) <= 25 .and. Val(M->TM9_OE6KHZ) <= 25 .and. ;
					aViaOE[2] > 25 .and. aViaOE[3] > 25 .and. aViaOE[4] > 25 .and. ;
					aViaOE[5] > 25 .and. aViaOE[6] > 25 .and. aViaOE[7] > 25 .and. ;
					(aViaOE[2] - Val(M->TM9_OE05KH)) >= 10 .and. (aViaOE[3] - Val(M->TM9_OE1KHZ)) >= 10 .and. ;
					(aViaOE[4] - Val(M->TM9_OE2KHZ)) >= 10 .and. (aViaOE[5] - Val(M->TM9_OE3KHZ)) >= 10 .and. ;
					(aViaOE[6] - Val(M->TM9_OE4KHZ)) >= 10

					M->TM9_OETIPE := aTipoPerda[1]
				Endif
			Endif
			//Verifica se perda sensorioneural
			If Substr(M->TM9_INDVIA,1,1) == "1"
				If Val(M->TM9_OE05KH) > 25 .and. Val(M->TM9_OE1KHZ) > 25 .and. Val(M->TM9_OE2KHZ) > 25 .and. ;
					Val(M->TM9_OE3KHZ) > 25 .and. Val(M->TM9_OE4KHZ) > 25 .and. Val(M->TM9_OE6KHZ) > 25 .and. ;
					aViaOE[2] > 25 .and. aViaOE[3] > 25 .and. aViaOE[4] > 25 .and. ;
					aViaOE[5] > 25 .and. aViaOE[6] > 25 .and. ;
					!TemGAP(Val(M->TM9_OE05KH),aViaOE[2] , 5) .and. !TemGAP(Val(M->TM9_OE1KHZ),aViaOE[3] , 5) .and. ;
					!TemGAP(Val(M->TM9_OE2KHZ),aViaOE[4] , 5) .and. !TemGAP(Val(M->TM9_OE3KHZ),aViaOE[5] , 5) .and. ;
					!TemGAP(Val(M->TM9_OE4KHZ),aViaOE[6] , 5)

					M->TM9_OETIPE := aTipoPerda[2]
				Endif
			Else
				If Val(M->TM9_OE05KH) > 25 .and. Val(M->TM9_OE1KHZ) > 25 .and. Val(M->TM9_OE2KHZ) > 25 .and. ;
					Val(M->TM9_OE3KHZ) > 25 .and. Val(M->TM9_OE4KHZ) > 25 .and. ;
					aViaOE[2] > 25 .and. aViaOE[3] > 25 .and. aViaOE[4] > 25 .and. ;
					aViaOE[5] > 25 .and. aViaOE[6] > 25 .and. aViaOE[7] > 25 .and. ;
					!TemGAP(Val(M->TM9_OE05KH),aViaOE[2] , 5) .and. !TemGAP(Val(M->TM9_OE1KHZ),aViaOE[3] , 5) .and. ;
					!TemGAP(Val(M->TM9_OE2KHZ),aViaOE[4] , 5) .and. !TemGAP(Val(M->TM9_OE3KHZ),aViaOE[5] , 5) .and. ;
					!TemGAP(Val(M->TM9_OE4KHZ),aViaOE[6] , 5)

					M->TM9_OETIPE := aTipoPerda[2]
				Endif
			Endif
			//Verifica se perda mista
			If Substr(M->TM9_INDVIA,1,1) == "1"
				If Val(M->TM9_OE05KH) > 25 .and. Val(M->TM9_OE1KHZ) > 25 .and. Val(M->TM9_OE2KHZ) > 25 .and. ;
					Val(M->TM9_OE3KHZ) > 25 .and. Val(M->TM9_OE4KHZ) > 25 .and. Val(M->TM9_OE6KHZ) > 25 .and. ;
					aViaOE[2] > 25 .and. aViaOE[3] > 25 .and. aViaOE[4] > 25 .and. ;
					aViaOE[5] > 25 .and. aViaOE[6] > 25 .and. ;
					TemGAP(Val(M->TM9_OE05KH),aViaOE[2] , 09) .and. TemGAP(Val(M->TM9_OE1KHZ),aViaOE[3] , 09) .and. ;
					TemGAP(Val(M->TM9_OE2KHZ),aViaOE[4] , 09) .and. TemGAP(Val(M->TM9_OE3KHZ),aViaOE[5] , 09) .and. ;
					TemGAP(Val(M->TM9_OE4KHZ),aViaOE[6] , 09)

					M->TM9_OETIPE := aTipoPerda[3]
				Endif
			Else
				If Val(M->TM9_OE05KH) > 25 .and. Val(M->TM9_OE1KHZ) > 25 .and. Val(M->TM9_OE2KHZ) > 25 .and. ;
					Val(M->TM9_OE3KHZ) > 25 .and. Val(M->TM9_OE4KHZ) > 25 .and. ;
					aViaOE[2] > 25 .and. aViaOE[3] > 25 .and. aViaOE[4] > 25 .and. ;
					aViaOE[5] > 25 .and. aViaOE[6] > 25 .and. aViaOE[7] > 25 .and. ;
					TemGAP(Val(M->TM9_OE05KH),aViaOE[2] , 09) .and. TemGAP(Val(M->TM9_OE1KHZ),aViaOE[3] , 09) .and. ;
					TemGAP(Val(M->TM9_OE2KHZ),aViaOE[4] , 09) .and. TemGAP(Val(M->TM9_OE3KHZ),aViaOE[5] , 09) .and. ;
					TemGAP(Val(M->TM9_OE4KHZ),aViaOE[6] , 09)

					M->TM9_OETIPE := aTipoPerda[3]
				Endif
			Endif
		Endif

	Endif

	If Substr(M->TM9_ODREFE,1,1) == "2" //Orelha Direita - Sequencial
		If Len(aSeqOD) > 0
			//SUGESSTIVO DE DESENCADEAMENTO
			If (aSeqOD[1][1] <= 25) .AND. (aSeqOD[1][2] <= 25) .AND. (aSeqOD[1][3] <= 25) .AND. (aSeqOD[1][4] <= 25) .AND.;
			(aSeqOD[1][5] <= 25) .AND. (aSeqOD[1][6] <= 25) .AND. (aSeqOD[1][7] <= 25) .AND. (aSeqOD[1][8] <= 25)
				If ((Val(M->TM9_OD3KHZ)+Val(M->TM9_OD4KHZ)+Val(M->TM9_OD6KHZ))/3) >= (((aSeqOD[1][5]+aSeqOD[1][6]+aSeqOD[1][7])/3)+10)
					M->TM9_ODRESU := aResul[4]
					lRight := .T.
				Elseif (Val(M->TM9_OD3KHZ) >= aSeqOD[1][5]+15) .OR. (Val(M->TM9_OD4KHZ) >= aSeqOD[1][6]+15) .OR.;
					(Val(M->TM9_OD6KHZ) >= aSeqOD[1][7]+15)

					M->TM9_ODRESU := aResul[4]
					lRight := .T.
				Endif
			//SUGESSTIVO DE AGRAVAMENTO
			Elseif (aSeqOD[1][5] > 25) .OR. (aSeqOD[1][6] > 25) .OR. (aSeqOD[1][7] > 25)
				nMaior := VALMAXMIN({aSeqOD[1][5],aSeqOD[1][6],aSeqOD[1][7]})
				nMenor := VALMAXMIN({aSeqOD[1][1],aSeqOD[1][2],aSeqOD[1][3],aSeqOD[1][4],aSeqOD[1][8]})
				If nMaior > nMenor
					If ((Val(M->TM9_OD3KHZ)+Val(M->TM9_OD4KHZ)+Val(M->TM9_OD6KHZ))/3) >= (((aSeqOD[1][5]+aSeqOD[1][6]+aSeqOD[1][7])/3)+15) .OR. ;
					((Val(M->TM9_OD05KH)+Val(M->TM9_OD1KHZ)+Val(M->TM9_OD2KHZ))/3) >= (((aSeqOD[1][2]+aSeqOD[1][3]+aSeqOD[1][4])/3)+15)

						M->TM9_ODRESU := aResul[5]
						lRight := .T.
					Elseif (Val(M->TM9_OD025K) >= aSeqOD[1][1]+15) .OR. (Val(M->TM9_OD05KH) >= aSeqOD[1][2]+15) .OR.;
							(Val(M->TM9_OD1KHZ) >= aSeqOD[1][3]+15) .OR. (Val(M->TM9_OD2KHZ) >= aSeqOD[1][4]+15) .OR.;
							(Val(M->TM9_OD3KHZ) >= aSeqOD[1][5]+15) .OR. (Val(M->TM9_OD4KHZ) >= aSeqOD[1][6]+15) .OR.;
							(Val(M->TM9_OD6KHZ) >= aSeqOD[1][7]+15) .OR. (Val(M->TM9_OD8KHZ) >= aSeqOD[1][8]+15)

						M->TM9_ODRESU := aResul[5]
						lRight := .T.
					Endif
				Endif
			Endif
		Endif
	Endif

	If Substr(M->TM9_OEREFE,1,1) == "2" //Orelha Esquerda - Sequencial
		If Len(aSeqOE) > 0
			//SUGESSTIVO DE DESENCADEAMENTO
			If (aSeqOE[1][1] <= 25) .AND. (aSeqOE[1][2] <= 25) .AND. (aSeqOE[1][3] <= 25) .AND. (aSeqOE[1][4] <= 25) .AND.;
			(aSeqOE[1][5] <= 25) .AND. (aSeqOE[1][6] <= 25) .AND. (aSeqOE[1][7] <= 25) .AND. (aSeqOE[1][8] <= 25)
				If ((Val(M->TM9_OE3KHZ)+Val(M->TM9_OE4KHZ)+Val(M->TM9_OE6KHZ))/3) >= (((aSeqOE[1][5]+aSeqOE[1][6]+aSeqOE[1][7])/3)+10)
					M->TM9_OERESU := aResul[4]
					lLeft := .T.
				Elseif (Val(M->TM9_OE3KHZ) >= aSeqOE[1][5]+15) .OR. (Val(M->TM9_OE4KHZ) >= aSeqOE[1][6]+15) .OR.;
					(Val(M->TM9_OE6KHZ) >= aSeqOE[1][7]+15)

					M->TM9_OERESU := aResul[4]
					lLeft := .T.
				Endif
			//SUGESSTIVO DE AGRAVAMENTO
			Elseif (aSeqOE[1][5] > 25) .OR. (aSeqOE[1][6] > 25) .OR. (aSeqOE[1][7] > 25)
				nMaior := VALMAXMIN({aSeqOE[1][5],aSeqOE[1][6],aSeqOE[1][7]})
				nMenor := VALMAXMIN({aSeqOE[1][1],aSeqOE[1][2],aSeqOE[1][3],aSeqOE[1][4],aSeqOE[1][8]})
				If nMaior > nMenor
					If ((Val(M->TM9_OE3KHZ)+Val(M->TM9_OE4KHZ)+Val(M->TM9_OE6KHZ))/3) >= (((aSeqOE[1][5]+aSeqOE[1][6]+aSeqOE[1][7])/3)+15) .OR. ;
					((Val(M->TM9_OE05KH)+Val(M->TM9_OE1KHZ)+Val(M->TM9_OE2KHZ))/3) >= (((aSeqOE[1][2]+aSeqOE[1][3]+aSeqOE[1][4])/3)+15)

						M->TM9_OERESU := aResul[5]
						lLeft := .T.
					Elseif (Val(M->TM9_OE025K) >= aSeqOE[1][1]+15) .OR. (Val(M->TM9_OE05KH) >= aSeqOE[1][2]+15) .OR.;
							(Val(M->TM9_OE1KHZ) >= aSeqOE[1][3]+15) .OR. (Val(M->TM9_OE2KHZ) >= aSeqOE[1][4]+15) .OR.;
							(Val(M->TM9_OE3KHZ) >= aSeqOE[1][5]+15) .OR. (Val(M->TM9_OE4KHZ) >= aSeqOE[1][6]+15) .OR.;
							(Val(M->TM9_OE6KHZ) >= aSeqOE[1][7]+15) .OR. (Val(M->TM9_OE8KHZ) >= aSeqOE[1][8]+15)

						M->TM9_OERESU := aResul[5]
						lLeft := .T.
					Endif
				Endif
			Endif
		Endif
	Endif

	If !lRight //Orelha Direita - Referencia
		M->TM9_ODRESU := aResul[3]

		If (Val(M->TM9_OD025K) <= 25) .AND. (Val(M->TM9_OD05KH) <= 25) .AND. (Val(M->TM9_OD1KHZ) <= 25) .AND.;
			(Val(M->TM9_OD2KHZ) <= 25) .AND. (Val(M->TM9_OD3KHZ) <= 25) .AND. (Val(M->TM9_OD4KHZ) <= 25) .AND.;
			(Val(M->TM9_OD6KHZ) <= 25) .AND. (Val(M->TM9_OD8KHZ) <= 25)

			M->TM9_ODRESU := aResul[1]
		Elseif (Val(M->TM9_OD3KHZ) > 25) .OR. (Val(M->TM9_OD4KHZ) > 25) .OR. (Val(M->TM9_OD6KHZ) > 25)
			nMaior := VALMAXMIN({Val(M->TM9_OD3KHZ),Val(M->TM9_OD4KHZ),Val(M->TM9_OD6KHZ)})
			nMenor := VALMAXMIN({Val(M->TM9_OD025K),Val(M->TM9_OD05KH),Val(M->TM9_OD1KHZ),Val(M->TM9_OD2KHZ),Val(M->TM9_OD8KHZ)})
			If nMaior > nMenor
				M->TM9_ODRESU := aResul[2]
			Endif
		Endif
	Endif
	If !lLeft //Orelha Esquerda - Referencia
		M->TM9_OERESU := aResul[3]

		If (Val(M->TM9_OE025K) <= 25) .AND. (Val(M->TM9_OE05KH) <= 25) .AND. (Val(M->TM9_OE1KHZ) <= 25) .AND.;
			(Val(M->TM9_OE2KHZ) <= 25) .AND. (Val(M->TM9_OE3KHZ) <= 25) .AND. (Val(M->TM9_OE4KHZ) <= 25) .AND.;
			(Val(M->TM9_OE6KHZ) <= 25) .AND. (Val(M->TM9_OE8KHZ) <= 25)

			M->TM9_OERESU := aResul[1]
		Elseif (Val(M->TM9_OE3KHZ) > 25) .OR. (Val(M->TM9_OE4KHZ) > 25) .OR. (Val(M->TM9_OE6KHZ) > 25)
			nMaior := VALMAXMIN({Val(M->TM9_OE3KHZ),Val(M->TM9_OE4KHZ),Val(M->TM9_OE6KHZ)})
			nMenor := VALMAXMIN({Val(M->TM9_OE025K),Val(M->TM9_OE05KH),Val(M->TM9_OE1KHZ),Val(M->TM9_OE2KHZ),Val(M->TM9_OE8KHZ)})
			If nMaior > nMenor
				M->TM9_OERESU := aResul[2]
			Endif
		Endif
	Endif

	lRefresh := .T.
Return .F.

//-------------------------------------------------------------------
/*/{Protheus.doc} VALMAXMIN
VERIFICA O MAIOR OU MENOR MUMERO DE UMA ARRAY
@type static function
@author NG Informatica
@since meados da arca de Noé
@param aValores, array, array com os valores a serem avaliados
@param nOp, numeric, indica se será verificado o maior valor do array
nOp = 1 ou o menor valor do array
@return numeric, retorna o maior ou menor valor do array de acordo com a operação
/*/
//-------------------------------------------------------------------
Static Function VALMAXMIN(aValores, nOp)

	Local nVal := 0
	Local lFirst := .T.
	Local x
	Default nOp  := 1

	For x := 1 To Len(aValores)
		If lFirst
			nVal := aValores[x]
			lFirst := .F.
		Else
			If nOp == 1
				If aValores[x] > nVal
					nVal := aValores[x]
				Endif
			Else
				If aValores[x] < nVal
					nVal := aValores[x]
				Endif
			Endif
		Endif
	Next x

Return nVal

//-------------------------------------------------------------------
/*/{Protheus.doc} NG120AUDIO
Retorna os exames de audimetria do funcionario
@type function
@author Denis Hyroshi de Souza
@since 04/11/2002
@return null, sempre nulo
/*/
//-------------------------------------------------------------------
Function NG120AUDIO()

	Local x
	lTRUE	:= .T.
	lODS	:= .F.
	lOES	:= .F.

	dbSelectArea("TM9")
	dbSetOrder(3)  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
	Dbgobottom()
	While !BoF() .AND. lTRUE

		If xFilial("TM9") == TM9->TM9_FILIAL .AND. TM9->TM9_NUMFIC == cNUMFIC .and. TM9->TM9_INDVIA == "1"

			If TM9->TM9_DTPROG > dDTPROG
				dbSkip(-1)
				Loop
			Endif

			If TM9->TM9_ODREFE == "1"
				dbSelectArea( "TM5" )
				dbSetOrder( 8 )
				If dbSeek( xFilial("TM5") + cNUMFIC + DtoS(TM9->TM9_DTPROG) + TM9->TM9_HRPROG + TM9->TM9_EXAME )
					If !lODS
						AADD(aSeqOD,{TM9->TM9_OD025K,TM9->TM9_OD05KH,TM9->TM9_OD1KHZ,TM9->TM9_OD2KHZ,;
									TM9->TM9_OD3KHZ,TM9->TM9_OD4KHZ,TM9->TM9_OD6KHZ,TM9->TM9_OD8KHZ})
						lODS := .T.
						For x := 1 To Len(aSeqOD[1])
							If aSeqOD[1][x] == -1     //Valor vazio
								aSeqOD[1][x] := 0
							Elseif aSeqOD[1][x] == -2   //Ausente
								aSeqOD[1][x] := 115
							Endif
						Next x
					Endif
				Endif
			Endif

			If TM9->TM9_OEREFE == "1"
				dbSelectArea( "TM5" )
				dbSetOrder( 8 )
				If dbSeek( xFilial("TM5") + cNUMFIC + DtoS(TM9->TM9_DTPROG) + TM9->TM9_HRPROG + TM9->TM9_EXAME )
					If !lOES
						AADD(aSeqOE,{TM9->TM9_OE025K,TM9->TM9_OE05KH,TM9->TM9_OE1KHZ,TM9->TM9_OE2KHZ,;
									TM9->TM9_OE3KHZ,TM9->TM9_OE4KHZ,TM9->TM9_OE6KHZ,TM9->TM9_OE8KHZ})
						lOES := .T.
						For x := 1 To Len(aSeqOE[1])
							If aSeqOE[1][x] == -1    //Valor vazio
								aSeqOE[1][x] := 0
							Elseif aSeqOE[1][x] == -2   //Ausente
								aSeqOE[1][x] := 115
							Endif
						Next x
					Endif
				Endif
			Endif
		Endif

		dbSelectArea("TM9")
		dbSkip(-1)

		If lODS .AND. lOES
			lTRUE := .F.
		Endif
	End

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} VERNOEQTO
Mostra o nome do equipamento
@type function
@author Inacio Luiz Kolling
@since 02/02/2000
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function VERNOEQTO()

	Local aArea := GetArea()

	dbSelectArea("TM7")
	dbSetOrder(1)
	dbSeek(xFilial("TM7")+M->TM9_EQPTO)
	M->TM9_NOEQTO := TM7->TM7_NOEQTO
	M->TM9_DTCALI := TM7->TM7_DTCALI
	M->TM9_DTAFER := TM7->TM7_DTAFER

	dbSelectArea( "TM9" )
	dbSetOrder( 3 )
	If !dbSeek( xFilial("TM9") + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME )
		M->TM9_DTCALI := TM7->TM7_DTCALI
		M->TM9_DTAFER := TM7->TM7_DTAFER
	Else
		If M->TM9_EQPTO != TM9->TM9_EQPTO
			M->TM9_DTCALI := TM7->TM7_DTCALI
			M->TM9_DTAFER := TM7->TM7_DTAFER
		Else
			M->TM9_DTCALI := TM9->TM9_DTCALI
			M->TM9_DTAFER := TM9->TM9_DTAFER
			If Empty(TM9->TM9_DTCALI) .AND. Empty(TM9->TM9_DTAFER)
				M->TM9_DTCALI := TM7->TM7_DTCALI
				M->TM9_DTAFER := TM7->TM7_DTAFER
			Endif
		Endif
	Endif

	RestArea( aArea )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} VERNOUSUA
Mostra o nome do Usuario
@type function
@author Inacio Luiz Kolling
@since 02/02/2000
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function VERNOUSUA()

	dbSelectArea("TMK")
	dbSetOrder(1)
	dbSeek(xFilial("TMK")+M->TM9_USURES)
	M->TM9_NOMUSU := TMK->TMK_NOMUSU

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} ALTDTRES
Altera a data e o tipo de resultado do exame ( TM5 )
@type function
@author Inacio Luiz Kolling
@since 02/02/2000
@param lAudio, boolean, param_descr
@param lTemOrig, boolean, param_descr
@param nPassa, numeric, param_descr
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function ALTDTRES( lAudio , lTemOrig , nPassa , nOpcTAF , dDtResul )

	Local nResul := If(nPassa == Nil,"1",nPassa)
	Local lCpoTM5 := .F.
	Local oDlg1,oScr,oCbx, oMenu1
	Local aCodRes := {"1-"+STR0120,"2-"+STR0121," "}//"Normal"##"Alterado"
	Local aExaRef := {"1-"+STR0022,"2-"+STR0023," "} //"1-Sim"###"2-Nao"
	Local aIndAgr := {"1-"+STR0022,"2-"+STR0023," "} //"1-Sim"###"2-Nao"
	Local aOriAgr := {"1-"+STR0122,"2-"+STR0123," "}//"Ocupacional"##"Nao Ocupacional"
	Local nSizeCli := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
	Local nSizeLoj := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))

	Local aCodFat := {"1-"+STR0022,"2-"+STR0023,"3-"+STR0124," "}//SIM##NAO##"Externo"
	Local lContratoOK := .f.
	Local oMenu

	Private M->TM5_DTRESU := TM5->TM5_DTRESU
	Private M->TM5_CODRES := TM5->TM5_CODRES
	Private M->TM5_INDRES := aCodRes[VAL(If(Empty(TM5->TM5_INDRES),nResul,TM5->TM5_INDRES))]
	Private asMenu

	If asMenu == NIL
		asMenu := NGRIGHTCLICK("MDTA120")
	EndIf

	If lSigaMdtps
		Private M->TM5_VALFAT := TM5->TM5_VALFAT
		Private M->TM5_INDFAT := aCodFat[VAL(If(Empty(TM5->TM5_INDFAT),"2",TM5->TM5_INDFAT))]
		Private M->TM5_DTFAT  := TM5->TM5_DTFAT

		lContratoOK := MdtTemTOL(/*Cliente*/,/*Loja*/,TM5->TM5_EXAME,.F.)
		If lContratoOK //Valida se tem contrato
			M->TM5_VALFAT := TOM->TOM_VALOR
		Endif
	Endif


	dbSelectArea("TM5")
	If lAudio
		If TM5->(!eof()) .AND. TM5->(!bof())
			cEXAREF := TM9->TM9_ODREFE
			cINDAGR := If(TM9->TM9_ODRESU == "5","1","2")
			cORIAGR := If(lTemOrig,TM9->TM9_ODORIG," ")
			cRESULT := If(TM9->TM9_ODRESU=="1","1","2")
			If TM9->TM9_OERESU > TM9->TM9_ODRESU
				cEXAREF := TM9->TM9_OEREFE
				cINDAGR := If(TM9->TM9_OERESU == "5","1","2")
				cORIAGR := If(lTemOrig,TM9->TM9_OEORIG," ")
				cRESULT := If(TM9->TM9_OERESU=="1","1","2")
			Endif
			RecLock("TM5",.F.)
			TM5->TM5_EXAREF := cEXAREF
			TM5->TM5_INDAGR := cINDAGR
			TM5->TM5_ORIAGR := cORIAGR
			TM5->TM5_INDRES := aCodRes[VAL(cRESULT)]
			MSUNLOCK("TM5")
			M->TM5_INDRES := aCodRes[VAL(cRESULT)]
		Endif
	Else
		lCpoTM5 := .T.
		M->TM5_EXAREF := aExaRef[VAL(If(Empty(TM5->TM5_EXAREF),"2",TM5->TM5_EXAREF))]
		M->TM5_INDAGR := aIndAgr[VAL(If(Empty(TM5->TM5_INDAGR),"3",TM5->TM5_INDAGR))]
		M->TM5_ORIAGR := aOriAgr[VAL(If(Empty(TM5->TM5_ORIAGR),"3",TM5->TM5_ORIAGR))]
	Endif

	opcao := 0

	DEFINE MSDIALOG oDlg1 TITLE OemToAnsi(STR0125) from 10,15 To 27,67 of oMainwnd//"Informações do Resultado Exame"

		@ 1.0,2  SAY OemToAnsi(STR0126) OF oScr//"Dt. Resultado Exame ?"
		@ 1.0,13 MSGET M->TM5_DTRESU PICTURE "99/99/9999" VALID NaoVazio(M->TM5_DTRESU) WHEN .T. SIZE 45,08 OF oScr HasButton

		@ 2.1,2  SAY OemToAnsi(STR0127) OF oScr//"Codigo Resultado ?"
		@ 2.1,13 MSGET M->TM5_CODRES PICTURE "@!" VALID (If(Empty(M->TM5_CODRES),.T.,ExistCpo("TMU",M->TM5_CODRES))) F3 "TMU" WHEN .T. SIZE 40,08 OF oScr HasButton

		@ 3.2,2  SAY OemToAnsi(STR0128) OF oScr//"Indicador Resultado ?"
		@ 3.2,13 COMBOBOX oCbx VAR M->TM5_INDRES VALID NG120VLEX(lCpoTM5) ITEMS aCodRes SIZE 80,40 OF oScr

		If lSigaMdtps

			If lCpoTM5
				@ 4.3,2  SAY OemToAnsi(STR0129) OF oScr//"Exame Referencial ?"
				@ 4.3,13 COMBOBOX oCbx VAR M->TM5_EXAREF VALID NG120VLEX() ITEMS aExaRef SIZE 80,40 OF oScr

				@ 5.4,2  SAY OemToAnsi(STR0130) OF oScr//"Agravamento ?"
				@ 5.4,13 COMBOBOX oCbx VAR M->TM5_INDAGR VALID NG120VLAG() ITEMS aIndAgr When NG120WNAG() SIZE 80,40 OF oScr

				@ 6.5,2  SAY OemToAnsi(STR0131) OF oScr//"Origem Agravamento ?"
				@ 6.5,13 COMBOBOX oCbx VAR M->TM5_ORIAGR ITEMS aOriAgr When (Substr(M->TM5_INDAGR,1,1)=="1") SIZE 80,40 OF oScr

				@ 7.6,2  SAY OemToAnsi(STR0132) OF oScr//"Valor Exame ?"
				@ 7.6,13 MSGET M->TM5_VALFAT PICTURE "@E 999,999,999.99" VALID Positivo(M->TM5_VALFAT) WHEN !lContratoOK SIZE 55,08 OF oScr

				@ 8.6,2  SAY OemToAnsi(STR0133) OF oScr//"Indicador Faturamento ?"
				@ 8.6,13 COMBOBOX oCbx VAR M->TM5_INDFAT ITEMS aCodFat SIZE 80,40 OF oScr

				@ 9.7,2  SAY OemToAnsi(STR0134) OF oScr//"Data Faturamento ?"
				@ 9.7,13 MSGET M->TM5_DTFAT PICTURE "99/99/9999" WHEN .t. SIZE 45,08 OF oScr HasButton


				DEFINE SBUTTON FROM 112,128 TYPE 1 ENABLE OF oDlg1 ACTION EVAL({|| opcao := 1,oDlg1:End()})
				DEFINE SBUTTON FROM 112,158 TYPE 2 ENABLE OF oDlg1 ACTION oDlg1:END()
			Else
				@ 4.3,2  SAY OemToAnsi(STR0132) OF oScr//"Valor Exame ?"
				@ 4.3,13 MSGET M->TM5_VALFAT PICTURE "@E 999,999,999.99" VALID Positivo(M->TM5_VALFAT) WHEN !lContratoOK SIZE 55,08 OF oScr

				@ 5.4,2  SAY OemToAnsi(STR0133) OF oScr//"Indicador Faturamento ?"
				@ 5.4,13 COMBOBOX oCbx VAR M->TM5_INDFAT ITEMS aCodFat SIZE 80,40 OF oScr

				@ 6.6,2  SAY OemToAnsi(STR0134) OF oScr//"Data Faturamento ?"
				@ 6.6,13 MSGET M->TM5_DTFAT PICTURE "99/99/9999" WHEN .t. SIZE 45,08 OF oScr HasButton

				DEFINE SBUTTON FROM 110,128 TYPE 1 ENABLE OF oDlg1 ACTION EVAL({|| opcao := 1,oDlg1:End()})
				DEFINE SBUTTON FROM 110,158 TYPE 2 ENABLE OF oDlg1 ACTION oDlg1:END()
			Endif

		Else

			If lCpoTM5
				@ 4.3,2  SAY OemToAnsi(STR0129) OF oScr//"Exame Referencial ?"
				@ 4.3,13 COMBOBOX oCbx VAR M->TM5_EXAREF VALID NG120VLEX() ITEMS aExaRef SIZE 80,40 OF oScr

				@ 5.4,2  SAY OemToAnsi(STR0130) OF oScr//"Agravamento ?"
				@ 5.4,13 COMBOBOX oCbx VAR M->TM5_INDAGR VALID NG120VLAG() ITEMS aIndAgr When NG120WNAG() SIZE 80,40 OF oScr

				@ 6.5,2  SAY OemToAnsi(STR0131) OF oScr//"Origem Agravamento ?"
				@ 6.5,13 COMBOBOX oCbx VAR M->TM5_ORIAGR ITEMS aOriAgr When (Substr(M->TM5_INDAGR,1,1)=="1") SIZE 80,40 OF oScr
			Endif

			DEFINE SBUTTON FROM 115,132 TYPE 1 ENABLE OF oDlg1 ACTION EVAL({|| opcao := 1,oDlg1:End()})
			DEFINE SBUTTON FROM 115,162 TYPE 2 ENABLE OF oDlg1 ACTION oDlg1:END()

		Endif

		NgPopUp(asMenu,@oMenu1)
		oDlg1:bRClicked:= { |o,x,y| oMenu1:Activate(x,y,oDlg1)}
	ACTIVATE MSDIALOG oDlg1 CENTERED

	If opcao == 1 //pergunte("MDT120",.T.)
		RestArea(aAreaTM5)
		RecLock("TM5",.F.)
		TM5->TM5_DTRESU := M->TM5_DTRESU
		TM5->TM5_CODRES := M->TM5_CODRES
		TM5->TM5_INDRES := M->TM5_INDRES
		If lCpoTM5
			TM5->TM5_EXAREF := M->TM5_EXAREF
			TM5->TM5_INDAGR := M->TM5_INDAGR
			TM5->TM5_ORIAGR := M->TM5_ORIAGR
		Endif
		If lSigaMdtps
			TM5->TM5_VALFAT := M->TM5_VALFAT
			TM5->TM5_INDFAT := M->TM5_INDFAT
			TM5->TM5_DTFAT  := M->TM5_DTFAT
			If Empty(TM5->TM5_DTINCL) .or. Empty(TM5->TM5_HRINCL)
				TM5->TM5_DTINCL := dDatabase
				TM5->TM5_HRINCL := Time()
				TM5->TM5_USUDIG := cUserName
			Endif
		Endif
		MSUNLOCK("TM5")
	Endif

	If lAudio
		IF msgYESNO(STR0104)
			MDTREXA()
		ENDIF
	Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} ChkDecib
Retorna o valor relacionado com a posicao da indice da vetor
@type function
@author Denis H. de Souza
@since 18/07/2002
@param nOdecib, numeric, conteudo avaliado
@return boolean, caso nenhuma das condições seja satisfeita, retorna falso
/*/
//-------------------------------------------------------------------
Function ChkDecib(nOdecib)

	Local nMaxOssea := 70
	Local nParam := 0

	If Substr(M->TM9_INDVIA,1,1) == "2"

		If Empty(nOdecib)
			return .T.
		Endif
		If (nPos1 := AT("--",nOdecib)) > 0
			return .F.
		Endif
		If (nPos1 := AT("-",nOdecib)) > 0 .AND. (nPos2 := RAT("-",nOdecib)) > 0
			If nPos1 != nPos2
				return .F.
			Endif
		Endif
		If (nPos1 := AT("-",nOdecib)) > 0
			If Substr(Alltrim(nOdecib),1,1) != "-"
				return .F.
			Endif
			If !LetterOrNum(Substr(nOdecib,1,1)) .AND. !LetterOrNum(Substr(nOdecib,2,1)) .AND. ;
				!LetterOrNum(Substr(nOdecib,3,1))
				return .F.
			Endif
		Endif

		If Val(nOdecib) >= -10 .AND. Val(nOdecib) <= 130 .AND. ((Val(nOdecib) % 5) = 0)
			nParam := GETMV("MV_MDTOSSE")
			If nParam > 0
				nMaxOssea := nParam
			Endif
			If Val(nOdecib) > nMaxOssea
				msginfo(STR0103 + AllTrim(STR(nMaxOssea)) + ".")  //"O valor máximo para a via óssea é "
				Return .F.
			Endif
			return .T.
		Else
			msginfo(STR0042+chr(13)+chr(13)+"-10, -5, 0, 5, 10, 15, 20, 25, 30,"+chr(13); //"Valores Aceitos:"
												+"35, 40, 45, 50, 55, 60, 65, 70, 75,"+chr(13);
												+"80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130.",STR0043) //"Valor Nao Aceito"
		Endif

	Else

		If Empty(nOdecib)
			return .T.
		Endif
		If (nPos1 := AT("--",nOdecib)) > 0
			return .F.
		Endif
		If (nPos1 := AT("-",nOdecib)) > 0 .AND. (nPos2 := RAT("-",nOdecib)) > 0
			If nPos1 != nPos2
				return .F.
			Endif
		Endif
		If (nPos1 := AT("-",nOdecib)) > 0
			If Substr(Alltrim(nOdecib),1,1) != "-"
				return .F.
			Endif
			If !LetterOrNum(Substr(nOdecib,1,1)) .AND. !LetterOrNum(Substr(nOdecib,2,1)) .AND. ;
				!LetterOrNum(Substr(nOdecib,3,1))
				return .F.
			Endif
		Endif
		If Val(nOdecib) >= -10 .AND. Val(nOdecib) <= 130 .AND. ((Val(nOdecib) % 5) = 0)
			return .T.
		Else
			msginfo(STR0042+chr(13)+chr(13)+"-10, -5, 0, 5, 10, 15, 20, 25, 30,"+chr(13); //"Valores Aceitos:"
														+"35, 40, 45, 50, 55, 60, 65, 70, 75,"+chr(13);
														+"80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130.",STR0043) //"Valor Nao Aceito"
		Endif

	Endif

return .F.

//-------------------------------------------------------------------
/*/{Protheus.doc} StrA120
Converte Inteiro p/ String com validações
@type function
@author Denis Hyroshi de Souza
@since 02/07/2004
@param nDecibes, numeric, valor a ser convertido
@return caracter, valor convertido
/*/
//-------------------------------------------------------------------
Function StrA120(nDecibes)

	Local cDecibes := Space(3)
	Local cAux     := Space(3)

	If nDecibes == -2
		cDecibes := "A  "
	Elseif nDecibes != -1 .and. nDecibes != -3
		cAux := Alltrim(Str(nDecibes,3))
		If Len(cAux) == 3
			cDecibes := cAux
		Elseif Len(cAux) < 3
			cDecibes := cAux+Space(3-Len(cAux))
		Else
			cDecibes := Substr(cAux,1,3)
		Endif
	Endif

Return cDecibes

//-------------------------------------------------------------------
/*/{Protheus.doc} NG120WNAG
Funcao que verifica se o campo TM5_INDAGR devera ser usado
@type function
@author Denis Hyroshi de Souza
@since 17/12/2004
@return boolean, retorna verdadeiro se resultado do exame for alterado
					e for exame referencial
/*/
//-------------------------------------------------------------------
Function NG120WNAG()

Return If(M->TM5_INDRES != "2" .OR. M->TM5_EXAREF != "2",.F.,.T.)

//-------------------------------------------------------------------
/*/{Protheus.doc} NG120VLEX
Validação do campo TM5_EXAREF
@type function
@author Denis Hyroshi de Souza
@since 17/12/2004
@param lCpoTM5, boolean, indica se valida de acordo com a TM5
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function NG120VLEX(lCpoTM5)

If !lCpoTM5 .AND. lCpoTM5 != nil
	Return .T.
Endif
If M->TM5_INDRES != "2" .OR. M->TM5_EXAREF != "2"
	M->TM5_INDAGR := " "
	M->TM5_ORIAGR := " "
Endif
lRefresh := .T.

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NG120VLAG
Validação do campo TM5_INDAGR
@type function
@author Denis Hyroshi de Souza
@since 17/12/2004
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function NG120VLAG()

	If M->TM5_INDAGR != "1"
		M->TM5_ORIAGR := " "
	Endif
	lRefresh := .T.

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT120AG
Funcao que valida o campo TN4_AGENTE
@type function
@author Andre E. Perez Alvarez
@since 14/09/2006
@return boolean, retorna verdadeiro caso o conteudo especificado exista
/*/
//-------------------------------------------------------------------
Function MDT120AG()
Return ( EXISTCPO("TMB", M->TN4_AGENTE + M->TN4_EXAME) .And.;
  		EXISTCHAV("TN4", M->TN4_NUMFIC + DTOS(M->TN4_DTPROG) + M->TN4_HRPROG +;
					M->TN4_EXAME+M->TN4_AGENTE) )


//-------------------------------------------------------------------
/*/{Protheus.doc} MDT120PK
Funçao que valida o campo TM5_HRPROG
@type function
@author Andre E. Perez Alvarez
@since 14/09/2006
@return boolean, retorna falso caso não exista a chave
/*/
//-------------------------------------------------------------------
Function MDT120PK()

	Local lRet := .T.

	If !ExistChav("TM5", M->TM5_NUMFIC + DTOS(M->TM5_DTPROG) + M->TM5_HRPROG + M->TM5_EXAME, 8 )
		lRet := .F.
	Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional
@type static function
@author Rafael Diogo Richter
@since 11/01/2007
@return array, opções do menu com o seguinte layout:
				Parametros do array a Rotina:
				1. Nome a aparecer no cabecalho
				2. Nome da Rotina associada
				3. Reservado
				4. Tipo de Transação a ser efetuada:
					1 - Pesquisa e Posiciona em um Banco de Dados
					2 - Simplesmente Mostra os Campos
					3 - Inclui registros no Bancos de Dados
					4 - Altera o registro corrente
					5 - Remove o registro corrente do Banco de Dados
				5. Nivel de acesso
				6. Habilita Menu Funcional

/*/
//-------------------------------------------------------------------
Static Function MenuDef( nBrw, lBrwPS )

	Local aRotina
	Local lSigaMdtPs := SuperGetMv("MV_MDTPS", .F., "N") == "S"
	Local lPyme      := Iif(Type("__lPyme") <> "U",__lPyme,.F.)

	Default nBrw     := If( IsInCallStack( "MDTA120A" ), 2, 1 )
	Default lBrwPS   := SuperGetMv("MV_MDTPS", .F., "N") == "S"

	If lBrwPS
		aRotina := { {STR0004, "AxPesqui", 0, 1},; //"Pesquisar"
					 {STR0005, "NGCAD01" , 0, 2},; //"Visualizar"
					 {STR0101, "MDTA120_", 0, 4} } //"Fichas Médicas"
	Else
		If nBrw == 1
			aRotina :=  { {STR0004, "AxPesqui"     , 0, 1},; //"Pesquisar"
						{STR0005, "NGCAD01"      , 0, 2},; //"Visualizar"
						{STR0006, "MDTA120A(.F.)", 0, 4},; //"Exames"
						{STR0100, "GpLegend"     , 0, 6, 0, .F.} } //"Legenda"
		Else
			aRotina :=  { { STR0004 ,"PesqBrw"	, 0, 1	}		,;	//"Pesquisar"
						{ STR0005 ,"VIEXA120"	, 0, 2	}		,;	//"Visualizar"
						{ STR0008 ,"INEXA120"	, 0, 3	}		,;	//"Incluir"
						{ STR0009 ,"ALEXA120"	, 0, 4	}		,;	//"Alterar"
						{ STR0010 ,"EXEXA120"	, 0, 5, 3	}	,;	//"Excluir"
						{ STR0011 ,"REXAME120"	, 0, 2	}		,;	//"Resultado"
						{ STR0100 ,"MDT120Leg"	, 0 , 6	} }			//"Legenda"

			If !lPyme
				aAdd( aRotina, { STR0069, "MsDocument", 0, 4 } )  //"Conhecimento"
			EndIf

			If !lSigaMdtPs .AND. SuperGetMv("MV_NG2AUDI",.F.,"2") == "1"
				aAdd( aRotina , {  STR0189,"MDTA991('TM5',{'TM5_NUMFIC','TM5_USERGI'},{'"+TM0->TM0_NUMFIC+"',STOD('"+DTOS(TM0->TM0_DTIMPL)+"')})" , 0 , 3 } )//"Hist. Exc."
			EndIf
		EndIf
	Endif

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA120_
Monta um browse com as fichas medicas do cliente
@type function
@author Andre Perez Alvarez
@since 25/09/2007
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDTA120_()

	Local aArea			:= GetArea()
	Local aAreaTM0		:= TM0->( GetArea() )
	Local aIndexTM0		:= {}

	Local oldROTINA := aCLONE(aROTINA)

	Local uRet

	Local aOldMenu
	Local aNGCAD02 := {}
	Private asMenu

	aOldMenu := ACLONE(asMenu)
	asMenu := NGRIGHTCLICK("MDTA120")

	aNGCAD02 := {;
					If(Type("aCHOICE")   == "A",ACLONE(aCHOICE),{}),;
					If(Type("aVARNAO")   == "A",ACLONE(aVARNAO),{}),;
					If(Type("aGETNAO")   == "A",ACLONE(aGETNAO),{}),;
					If(Type("cGETWHILE") == "C",cGETWHILE,NIL),;
					If(Type("cGETMAKE")  == "C",cGETMAKE,NIL),;
					If(Type("cGETKEY")   == "C",cGETKEY,NIL),;
					If(Type("cGETALIAS") == "C",cGETALIAS,NIL),;
					If(Type("cTUDOOK")   == "C",cTUDOOK,NIL),;
					If(Type("cLINOK")    == "C",cLINOK,NIL),;
					If(Type("aRELAC")    == "A",ACLONE(aRELAC),{}),;
					If(Type("aCHKDEL")   == "A",ACLONE(aCHKDEL),{}),;
					If(Type("bngGRAVA")  == "A",ACLONE(bngGRAVA),{}),;
					If(Type("aNGBUTTON") == "A",ACLONE(aNGBUTTON),{});
				}

	Private cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA
	Private aAC := { STR0001,STR0002 },; //"Abandona"###"Confirma"
			aCRA:= { STR0002,STR0003,STR0001 } //"Confirma"###"Redigita"###"Abandona"
	Private cAlias    := "TM5"
	Private cNUMFIC   := space(09)
	Private cPrograma := "MDTA120"
	aCHKDEL := { }

	Begin Sequence

		aRotina :=  MenuDef( 1 , .F. )

		Private bFiltraBrw	:= { || NIL }
		Private cCadastro	:= OemToAnsi(STR0007+STR0135+Alltrim(SA1->A1_NOME))


		// Inicializa o filtro utilizando a funcao FilBrowse
		cFiltraRh := ChkRh("MDTA120","TM0","1")
		cFiltraRh += IF(!Empty(cFiltraRh),' .and. ','')
		cFiltraRh += 'TM0_CLIENT+TM0_LOJA == "'+cCliMdtPs+'"'
		bFiltraBrw := { || FilBrowse("TM0",@aIndexTM0,@cFiltraRH) }
		Eval( bFiltraBrw )

		TM0->( dbGoTop() )
		mBrowse( 6, 1,22,75,"TM0",,,,,,fFichaCor() )

		// Deleta o filtro utilizando a funcao FilBrowse
		EndFilBrw( "TM0" , aIndexTm0 )

	End Sequence


	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	asMenu  := ACLONE(aOldMenu)
	aCHOICE := ACLONE(aNGCAD02[1])
	aVARNAO := ACLONE(aNGCAD02[2])
	AGETNAO := ACLONE(aNGCAD02[3])
	If(aNGCAD02[4] != NIL,cGETWHILE := aNGCAD02[4],)
	If(aNGCAD02[5] != NIL,cGETMAKE  := aNGCAD02[5],)
	If(aNGCAD02[6] != NIL,cGETKEY   := aNGCAD02[6],)
	If(aNGCAD02[7] != NIL,cGETALIAS := aNGCAD02[7],)
	If(aNGCAD02[8] != NIL,cTUDOOK   := aNGCAD02[8],)
	If(aNGCAD02[9] != NIL,cLINOK    := aNGCAD02[9],)
	aRELAC    := ACLONE(aNGCAD02[10])
	aCHKDEL   := ACLONE(aNGCAD02[11])
	bngGRAVA  := ACLONE(aNGCAD02[12])
	aNGBUTTON := ACLONE(aNGCAD02[13])

	RestArea( aAreaTm0 )
	RestArea( aArea )
	aROTINA := aCLONE(oldROTINA)
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} NG120VIAOT
Busca informacoes do exame realizado em outra via
@type type
@author author
@since date
@param cViaCond, caracter, indica a via de condução
@return null, sempre nulo
/*/
//-------------------------------------------------------------------
Function NG120VIAOT(cViaCond)

	Local x
	Local aAreaXXX := GetArea()
	Local aAreaEXA := TM9->(GetArea())
	Local aAreaTM9 := {}

	dbSelectArea("TM9")
	dbSetOrder(1)
	dbSeek( xFilial("TM9") + cNUMFIC  )
	While !eof() .and. xFilial("TM9") == TM9->TM9_FILIAL .and. TM9->TM9_NUMFIC == cNUMFIC

		If TM9->TM9_INDVIA == cViaCond
			dbSelectArea("TM5")
			dbSetOrder(8)
			If dbSeek( xFilial("TM5") + TM9->TM9_NUMFIC + DtoS(TM9->TM9_DTPROG) + TM9->TM9_HRPROG + TM9->TM9_EXAME )
				If TM9->TM9_DTPROG == dDTPROG
					aAreaTM9 := TM9->(GetArea())
					Exit
				ElseIf TM9->TM9_DTPROG >= dDTPROG-30 .and. TM9->TM9_DTPROG <= dDTPROG+30
					aAreaTM9 := TM9->(GetArea())
				Endif
			Endif
		Endif

		dbSelectArea("TM9")
		dbSkip()
	End

	If Len(aAreaTM9) > 0
		RestArea(aAreaTM9)
		If !Eof()
			aViaOD := {TM9->TM9_OD025K,TM9->TM9_OD05KH,TM9->TM9_OD1KHZ,TM9->TM9_OD2KHZ,;
						TM9->TM9_OD3KHZ,TM9->TM9_OD4KHZ,TM9->TM9_OD6KHZ,TM9->TM9_OD8KHZ}
			For x := 1 To Len(aViaOD)
				If aViaOD[x] == -1
					aViaOD[x] := 0
				Endif
			Next x
			aViaOE := {TM9->TM9_OE025K,TM9->TM9_OE05KH,TM9->TM9_OE1KHZ,TM9->TM9_OE2KHZ,;
						TM9->TM9_OE3KHZ,TM9->TM9_OE4KHZ,TM9->TM9_OE6KHZ,TM9->TM9_OE8KHZ}
			For x := 1 To Len(aViaOE)
				If aViaOE[x] == -1
					aViaOE[x] := 0
				Endif
			Next x
		Endif
	Endif

	RestArea(aAreaEXA)
	RestArea(aAreaXXX)
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} TemGAP
Valida perda mista
@type static function
@author Denis Hyroshi de Souza
@since 26/11/2007
@param nValor01, numeric, primeiro valor da limiar para comparação
@param nValor02, numeric, segundo valor da limiar para comparação
@param nDiff, numeric, diferença aceitavel
@return boolean, retorna verdadeiro se aprovado nas validações
/*/
//-------------------------------------------------------------------
Static Function TemGAP(nValor01, nValor02, nDiff)

	Local lRet := .f.

	If nValor01 > nValor02
		If (nValor01 - nValor02) > nDiff
			lRet := .t.
		Endif
	ElseIf nValor01 < nValor02
		If (nValor02 - nValor01) > nDiff
			lRet := .t.
		Endif
	Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} _MDT120AUDIO
Visualizar,Incluir,Alterar exames audiometria
@type function
@author André E. Perez Álvarez
@since 03/03/2008
@param cAlias, caracter, alias principal da rotina
@param nReg, numeric, recno do registro posicionado
@param nOpcx, numeric, operação selecionada
@return return_type, return_description
/*/
//-------------------------------------------------------------------
Function _MDT120AUDIO(cAlias,nReg,nOpcx)

	Local nX
	Local lPCA := .F.	//Denota se a pergunta "Deseja ir à tela de Programa de Saúde?" sera' feita

	Local nLi
	Local nLi2
	Local nCol
	Local nCol2
	Local nCol3
	Local nCol4
	Local nBase := 135

	Local aPages := {}, aTitles := {}, aVar := {}
	Local nControl := 0
	Local oFont
	Local oMemo, oMenu
	Local lAerea := .F.
	Local lResul := .F.
	Local cUsdNor := ""
	Local oDlg
	Local oPanelF1, oPanelF2
	Local oPanelF3, oPanelF4
	Local cODRela := GetSx3Cache( "TM9_ODORIG", "X3_RELACAO")
	Local cOERela := GetSx3Cache( "TM9_OEORIG", "X3_RELACAO")

	Private aButtons := {}
	Aadd(aButtons,{"HISTORIC" ,{||RESANT120()},STR0105,STR0106})//"Resultados Anteriores", "Resultados"
	Private cFilTM9 := xFilial("TM9")
	Private cFilTMK := xFilial("TMK")
	Private cFilTM7 := xfilial("TM7")

	Private oCbx,oCalcResult

	//"1-Requer Interpretação"//"Normal"//"Surdez Leve"//"Surdez Moderada"//"Surdez Severa"//"Surdez Profunda"//"Surdez total"
	aClinico := {"1-"+STR0070,"2-"+STR0047,"3-"+STR0055,"4-"+STR0056,"5-"+STR0057,"6-"+STR0058,"7-"+STR0071}

	//"1-Requer Interpretação"//"Normal"//"3-Redução em Grau Mínimo"//"4-Redução em Grau Médio"//"5-Redução em Grau Máximo"//"6-Perda de Audição"
	aINSS := {"1-"+STR0070,"2-"+STR0047,"3-"+STR0072,"4-"+STR0073,"5-"+STR0074,"6-"+STR0075}
	aResul := {"1-"+STR0070,"2-"+STR0026,"3-"+STR0027,;//"1-Requer Interpretação"//"2-Limiares Aceitáveis"//"3-Sugestivo do PAIR"
				"4-"+STR0028,"5-"+STR0029,"6-"+STR0030,"7-"+STR0075}//"4-Não Sugestivo do PAIR"//"5-Sugestivo de Desencadeamento"//"6-Sugestivo de Agravamento"//7-Perda de audição

	aOrAnormal := MDTCbox("TM9_ODORIG"," ",1) //Carrega opcoes do combo TM9_ODORIG

	aRefer := {"1-"+STR0022,"2-"+STR0023} //"1-Sim"###"2-Nao"

	aCodRes := {"1-"+STR0047,"2-"+STR0096} //{"1-Normal","2-Alterado"," "}

	For nX := 6 to Len(aResul)
		aResul[nX] := Substr(aResul[nX],1,1)+"-"+Substr(aResul[nX],3)
	Next nX

	Private aSeqOE := {}
	Private aSeqOD := {}

	aDcibs := {"-10-"+STR0136,"-05-"+STR0136,"0-"+STR0136,"05-"+STR0136,"10-"+STR0136,"15-"+STR0136,"20-"+STR0136,"25-"+STR0136,;
			"30-"+STR0136,"35-"+STR0136,"40-"+STR0136,"45-"+STR0136,"50-"+STR0136,;
			"55-"+STR0136,"60-"+STR0136,"65-"+STR0136,"70-"+STR0136,"75-"+STR0136,;
			"80-"+STR0136,"85-"+STR0136,"90-"+STR0136,"95-"+STR0136,"100-"+STR0136,;
			"105-"+STR0136,"110-"+STR0136,"115-"+STR0136,"120-"+STR0136,"125-"+STR0136,"130-"+STR0136} //"Decibeis"

	aDICBS := {-10,-5,0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,;
			80,85,90,95,100,105,110,115,120,125,130}

	//--<><><><><><>-- Verifica se o campo 0,25 é usado

	Private l025od := .T.
	Private l025oe := .T.

	cUsdNor := GetSx3Cache( "TNC_HRACID", "X3_USADO" )

	l025od := (GetSx3Cache( "TM9_OD025K", "X3_USADO" ) == cUsdNor)
	l025oe := (GetSx3Cache( "TM9_OE025K", "X3_USADO" ) == cUsdNor)

	//--<><><><><><>--

	// Outras Informações
	If Empty(TM5->TM5_DTRESU)
		M->TM5_DTRESU := dDataBase
	Else
		M->TM5_DTRESU := TM5->TM5_DTRESU
	Endif
	M->TM5_CODRES := TM5->TM5_CODRES
	If Empty(TM5->TM5_INDRES)
		M->TM5_INDRES := aCodRes[1]
	Else
		M->TM5_INDRES := aCodRes[Val(TM5->TM5_INDRES)]
	Endif
	M->TM5_RESULT := Space(20)
	NOCODIGO() //M->TM5_RESULT
	If Empty(TM5->TM5_DESRES)
		M->TM5_DESRES := Space(80)
	Else
		M->TM5_DESRES := TM5->TM5_DESRES
	Endif
	M->TM5_OBSERV := Space(80)
	If !Empty(TM5->TM5_OBSERV)
		M->TM5_OBSERV := TM5->TM5_OBSERV
	Endif

	//Variaveis para armazenar o Resultado da Via Aerea
	M->TM9_EQPTO  := SPACE(LEN(TM9->TM9_EQPTO))
	M->TM9_NOEQTO := SPACE(30)
	M->TM9_ODMEAT := SPACE(LEN(TM9->TM9_ODMEAT))
	M->TM9_OEMEAT := SPACE(LEN(TM9->TM9_OEMEAT))

	// Campos UPDMDT87
	Private lUpdMdt87 := NGCADICBASE("TM9_ODLMIN","A","TM9",.F.)
	Private lUpdLimMk := fLimMask()
	M->TM9_ODLMIN := Space(3)
	M->TM9_ODLMAX := Space(3)
	M->TM9_OELMIN := Space(3)
	M->TM9_OELMAX := Space(3)
	M2_ODLMIN     := Space(3)
	M2_ODLMAX     := Space(3)
	M2_OELMIN     := Space(3)
	M2_OELMAX     := Space(3)
	M->TM9_ODMSRT := 0
	M->TM9_ODSDT  := 0
	M->TM9_ODMIRF := 0
	M->TM9_OEMSRT := 0
	M->TM9_OESDT  := 0
	M->TM9_OEMIRF := 0

	//Limiares
	M->TM9_OD025K := SPACE(3)
	M->TM9_OD05KH := SPACE(3)
	M->TM9_OD1KHZ := SPACE(3)
	M->TM9_OD2KHZ := SPACE(3)
	M->TM9_OD3KHZ := SPACE(3)
	M->TM9_OD4KHZ := SPACE(3)
	M->TM9_OD6KHZ := SPACE(3)
	M->TM9_OD8KHZ := SPACE(3)
	//Mascaramento
	M->TM9_ODMA25 := SPACE(3)
	M->TM9_ODMA50 := SPACE(3)
	M->TM9_ODMA10 := SPACE(3)
	M->TM9_ODMA20 := SPACE(3)
	M->TM9_ODMA30 := SPACE(3)
	M->TM9_ODMA40 := SPACE(3)
	M->TM9_ODMA60 := SPACE(3)
	M->TM9_ODMA80 := SPACE(3)

	//Limiares
	M->TM9_OE05KH := SPACE(3)
	M->TM9_OE025K := SPACE(3)
	M->TM9_OE1KHZ := SPACE(3)
	M->TM9_OE2KHZ := SPACE(3)
	M->TM9_OE3KHZ := SPACE(3)
	M->TM9_OE4KHZ := SPACE(3)
	M->TM9_OE6KHZ := SPACE(3)
	M->TM9_OE8KHZ := SPACE(3)
	//Mascaramento
	M->TM9_OEMA25 := SPACE(3)
	M->TM9_OEMA50 := SPACE(3)
	M->TM9_OEMA10 := SPACE(3)
	M->TM9_OEMA20 := SPACE(3)
	M->TM9_OEMA30 := SPACE(3)
	M->TM9_OEMA40 := SPACE(3)
	M->TM9_OEMA60 := SPACE(3)
	M->TM9_OEMA80 := SPACE(3)

	M->TM9_REPOUS := 0
	M->TM9_USURES := If(!MDTWHNSBI(),MDTUSRLOG(1),Space(12))
	M->TM9_NOMUSU := Space(20)
	M->TM9_ODRECF := 0
	M->TM9_ODREMO := 0
	M->TM9_ODREDI := 0
	M->TM9_OERECF := 0
	M->TM9_OEREMO := 0
	M->TM9_OEREDI := 0
	M->TM9_DTCALI := cTod("  /  /    ")
	M->TM9_DTAFER := cTod("  /  /    ")
	M->TM9_ODORIG := aOrAnormal[1]
	M->TM9_OEORIG := aOrAnormal[1]

	If "1/2/3" $ cODRela
		M->TM9_ODORIG := aOrAnormal[ Val(AllTrim(cODRela)) ]
	Endif

	If "1/2" $ cOERela
		M->TM9_OEORIG := aOrAnormal[ Val(AllTrim(cOERela)) ]
	Endif

	//Metodos
	M->TM9_ODCLIN := aClinico[1]
	M->TM9_OECLIN := aClinico[1]

	M->TM9_ODINSS := aINSS[1]
	M->TM9_OEINSS := aINSS[1]
	//Metodos - Portaria 19
	M->TM9_ODREFE := aRefer[2]
	M->TM9_OEREFE := aRefer[2]
	M->TM9_ODRESU := aResul[1]
	M->TM9_OERESU := aResul[1]

	//Medias
	M->TM9_ODMED5 := Space(6)
	M->TM9_ODMED3 := Space(6)
	M->TM9_OEMED5 := Space(6)
	M->TM9_OEMED3 := Space(6)

	//Verifica se o Resultado da Via Aerea ja existe
	dbSelectArea( "TM9" )
	dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
	If dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "1" )	  //Via Aerea

		lAerea := .T.

		//----- Outras Informacoes -----------//
		//Meatoscopia
		M->TM9_ODMEAT := TM9->TM9_ODMEAT
		M->TM9_OEMEAT := TM9->TM9_OEMEAT
		//Logoaudiometria
		M->TM9_ODRECF := TM9->TM9_ODRECF
		M->TM9_ODREMO := TM9->TM9_ODREMO
		M->TM9_ODREDI := TM9->TM9_ODREDI
		M->TM9_OERECF := TM9->TM9_OERECF
		M->TM9_OEREMO := TM9->TM9_OEREMO
		M->TM9_OEREDI := TM9->TM9_OEREDI
		If lUpdMdt87
			M->TM9_ODLMIN := TM9->TM9_ODLMIN
			M->TM9_ODLMAX := TM9->TM9_ODLMAX
			M->TM9_OELMIN := TM9->TM9_OELMIN
			M->TM9_OELMAX := TM9->TM9_OELMAX
			M->TM9_ODMSRT := TM9->TM9_ODMSRT
			M->TM9_ODSDT  := TM9->TM9_ODSDT
			M->TM9_ODMIRF := TM9->TM9_ODMIRF
			M->TM9_OEMSRT := TM9->TM9_OEMSRT
			M->TM9_OESDT  := TM9->TM9_OESDT
			M->TM9_OEMIRF := TM9->TM9_OEMIRF
		Endif
		//Hrs Repouso
		M->TM9_REPOUS := TM9->TM9_REPOUS
		//Equipamento
		M->TM9_EQPTO  := TM9->TM9_EQPTO
		M->TM9_DTAFER := TM9->TM9_DTAFER
		M->TM9_DTCALI := TM9->TM9_DTCALI
		M->TM9_USURES := TM9->TM9_USURES
		//----------------------------------//

		//Limiares
		M->TM9_OD025K := StrA120(TM9->TM9_OD025K)
		M->TM9_OD05KH := StrA120(TM9->TM9_OD05KH)
		M->TM9_OD1KHZ := StrA120(TM9->TM9_OD1KHZ)
		M->TM9_OD2KHZ := StrA120(TM9->TM9_OD2KHZ)
		M->TM9_OD3KHZ := StrA120(TM9->TM9_OD3KHZ)
		M->TM9_OD4KHZ := StrA120(TM9->TM9_OD4KHZ)
		M->TM9_OD6KHZ := StrA120(TM9->TM9_OD6KHZ)
		M->TM9_OD8KHZ := StrA120(TM9->TM9_OD8KHZ)
		//Mascaramento
		M->TM9_ODMA25 := StrA120(TM9->TM9_ODMA25)
		M->TM9_ODMA50 := StrA120(TM9->TM9_ODMA50)
		M->TM9_ODMA10 := StrA120(TM9->TM9_ODMA10)
		M->TM9_ODMA20 := StrA120(TM9->TM9_ODMA20)
		M->TM9_ODMA30 := StrA120(TM9->TM9_ODMA30)
		M->TM9_ODMA40 := StrA120(TM9->TM9_ODMA40)
		M->TM9_ODMA60 := StrA120(TM9->TM9_ODMA60)
		M->TM9_ODMA80 := StrA120(TM9->TM9_ODMA80)

		//Limiares
		M->TM9_OE025K := StrA120(TM9->TM9_OE025K)
		M->TM9_OE05KH := StrA120(TM9->TM9_OE05KH)
		M->TM9_OE1KHZ := StrA120(TM9->TM9_OE1KHZ)
		M->TM9_OE2KHZ := StrA120(TM9->TM9_OE2KHZ)
		M->TM9_OE3KHZ := StrA120(TM9->TM9_OE3KHZ)
		M->TM9_OE4KHZ := StrA120(TM9->TM9_OE4KHZ)
		M->TM9_OE6KHZ := StrA120(TM9->TM9_OE6KHZ)
		M->TM9_OE8KHZ := StrA120(TM9->TM9_OE8KHZ)
		//Mascaramento
		M->TM9_OEMA25 := StrA120(TM9->TM9_OEMA25)
		M->TM9_OEMA50 := StrA120(TM9->TM9_OEMA50)
		M->TM9_OEMA10 := StrA120(TM9->TM9_OEMA10)
		M->TM9_OEMA20 := StrA120(TM9->TM9_OEMA20)
		M->TM9_OEMA30 := StrA120(TM9->TM9_OEMA30)
		M->TM9_OEMA40 := StrA120(TM9->TM9_OEMA40)
		M->TM9_OEMA60 := StrA120(TM9->TM9_OEMA60)
		M->TM9_OEMA80 := StrA120(TM9->TM9_OEMA80)

		//Medias
		If TM9->TM9_ODMED5 != 999.99
			M->TM9_ODMED5 := STRMED120(TM9->TM9_ODMED5)
		Endif
		If TM9->TM9_ODMED3 != 999.99
			M->TM9_ODMED3 := STRMED120(TM9->TM9_ODMED3)
		Endif
		If TM9->TM9_OEMED5 != 999.99
			M->TM9_OEMED5 := STRMED120(TM9->TM9_OEMED5)
		Endif
		If TM9->TM9_OEMED3 != 999.99
			M->TM9_OEMED3 := STRMED120(TM9->TM9_OEMED3)
		Endif

		//Resultados
		If !Empty(TM9->TM9_ODCLIN)
			M->TM9_ODCLIN := aClinico[VAL(TM9->TM9_ODCLIN)]
		Endif
		If !Empty(TM9->TM9_OECLIN)
			M->TM9_OECLIN := aClinico[VAL(TM9->TM9_OECLIN)]
		Endif

		If !Empty(TM9->TM9_ODINSS)
			M->TM9_ODINSS := aINSS[VAL(TM9->TM9_ODINSS)]
		Endif
		If !Empty(TM9->TM9_OEINSS)
			M->TM9_OEINSS := aINSS[VAL(TM9->TM9_OEINSS)]
		Endif

		//Portaria 19
		M->TM9_ODREFE := aRefer[VAL(TM9->TM9_ODREFE)]
		M->TM9_OEREFE := aRefer[VAL(TM9->TM9_OEREFE)]
		M->TM9_ODRESU := aResul[VAL(TM9->TM9_ODRESU)]
		M->TM9_OERESU := aResul[VAL(TM9->TM9_OERESU)]

		//Origem Anormalidade
		cIndArray := If(Empty(TM9->TM9_ODORIG),"1",TM9->TM9_ODORIG)
		M->TM9_ODORIG := aOrAnormal[VAL(cIndArray)]
		cIndArray := If(Empty(TM9->TM9_OEORIG),"1",TM9->TM9_OEORIG)
		M->TM9_OEORIG := aOrAnormal[VAL(cIndArray)]

	Endif

	//Variaveis para armazenar o Resultado da Via Ossea

	//Limiares
	M2_OD05KH := SPACE(3)
	M2_OD1KHZ := SPACE(3)
	M2_OD2KHZ := SPACE(3)
	M2_OD3KHZ := SPACE(3)
	M2_OD4KHZ := SPACE(3)
	//Mascaramento
	M2_ODMA50 := SPACE(3)
	M2_ODMA10 := SPACE(3)
	M2_ODMA20 := SPACE(3)
	M2_ODMA30 := SPACE(3)
	M2_ODMA40 := SPACE(3)
	//Limiares
	M2_OE05KH := SPACE(3)
	M2_OE1KHZ := SPACE(3)
	M2_OE2KHZ := SPACE(3)
	M2_OE3KHZ := SPACE(3)
	M2_OE4KHZ := SPACE(3)
	//Mascaramento
	M2_OEMA50 := SPACE(3)
	M2_OEMA10 := SPACE(3)
	M2_OEMA20 := SPACE(3)
	M2_OEMA30 := SPACE(3)
	M2_OEMA40 := SPACE(3)

	//Verifica se o Resultado da Via Ossea ja existe
	dbSelectArea( "TM9" )
	dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
	If dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "2" )	  //Via Ossea

		If !lAerea  //Se foi gravado apenas o Resultado da Via Ossea
			//----- Outras Informacoes ----------//
			//Meatoscopia
			M->TM9_ODMEAT := TM9->TM9_ODMEAT
			M->TM9_OEMEAT := TM9->TM9_OEMEAT
			//Logoaudiometria
			M->TM9_ODRECF := TM9->TM9_ODRECF
			M->TM9_ODREMO := TM9->TM9_ODREMO
			M->TM9_ODREDI := TM9->TM9_ODREDI
			M->TM9_OERECF := TM9->TM9_OERECF
			M->TM9_OEREMO := TM9->TM9_OEREMO
			M->TM9_OEREDI := TM9->TM9_OEREDI
			If lUpdMdt87
				M->TM9_ODMSRT := TM9->TM9_ODMSRT
				M->TM9_ODSDT  := TM9->TM9_ODSDT
				M->TM9_ODMIRF := TM9->TM9_ODMIRF
				M->TM9_OEMSRT := TM9->TM9_OEMSRT
				M->TM9_OESDT  := TM9->TM9_OESDT
				M->TM9_OEMIRF := TM9->TM9_OEMIRF
			Endif
			//Hrs Repouso
			M->TM9_REPOUS := TM9->TM9_REPOUS
			//Equipamento
			M->TM9_EQPTO  := TM9->TM9_EQPTO
			M->TM9_DTAFER := TM9->TM9_DTAFER
			M->TM9_DTCALI := TM9->TM9_DTCALI
			M->TM9_USURES := TM9->TM9_USURES
			//----------------------------------//
		Endif

		If lUpdMdt87
			M2_ODLMIN := TM9->TM9_ODLMIN
			M2_ODLMAX := TM9->TM9_ODLMAX
			M2_OELMIN := TM9->TM9_OELMIN
			M2_OELMAX := TM9->TM9_OELMAX
		Endif

		//Limiares
		M2_OD05KH := StrA120(TM9->TM9_OD05KH)
		M2_OD1KHZ := StrA120(TM9->TM9_OD1KHZ)
		M2_OD2KHZ := StrA120(TM9->TM9_OD2KHZ)
		M2_OD3KHZ := StrA120(TM9->TM9_OD3KHZ)
		M2_OD4KHZ := StrA120(TM9->TM9_OD4KHZ)
		//Mascaramento
		M2_ODMA50 := StrA120(TM9->TM9_ODMA50)
		M2_ODMA10 := StrA120(TM9->TM9_ODMA10)
		M2_ODMA20 := StrA120(TM9->TM9_ODMA20)
		M2_ODMA30 := StrA120(TM9->TM9_ODMA30)
		M2_ODMA40 := StrA120(TM9->TM9_ODMA40)

		//Lineares
		M2_OE05KH := StrA120(TM9->TM9_OE05KH)
		M2_OE1KHZ := StrA120(TM9->TM9_OE1KHZ)
		M2_OE2KHZ := StrA120(TM9->TM9_OE2KHZ)
		M2_OE3KHZ := StrA120(TM9->TM9_OE3KHZ)
		M2_OE4KHZ := StrA120(TM9->TM9_OE4KHZ)
		//Mascaramento
		M2_OEMA50 := StrA120(TM9->TM9_OEMA50)
		M2_OEMA10 := StrA120(TM9->TM9_OEMA10)
		M2_OEMA20 := StrA120(TM9->TM9_OEMA20)
		M2_OEMA30 := StrA120(TM9->TM9_OEMA30)
		M2_OEMA40 := StrA120(TM9->TM9_OEMA40)

	Endif

	NOEQUIP1()

	VNomeUsu(M->TM9_USURES)

	nOPCA := 0

	//Definicao da Tela

	Aadd(aTitles,OemToAnsi(STR0076)) //"Via &Aérea"
	Aadd(aPages,"Header 1")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0077)) //"Via Ó&ssea"
	Aadd(aPages,"Header 2")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0089)) //"Logoaudiometria"
	Aadd(aPages,"Header 3")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0078)) //"&Outras Informações"
	Aadd(aPages,"Header 4")
	nControl++

	DEFINE FONT oFont NAME "Arial" SIZE 0,-11

	Define MsDialog oDlg Title STR0090 From 0,0 To 36,115.5 Of oMainWnd COLOR CLR_BLACK,CLR_WHITE //"Resultado - Exame Audiométrico"
	oDlg:lEscClose := .F.

	oFolder := TFolder():New(1,0,aTitles,aPages,oDlg,,,,.F.,.F.,482.7,335,)
	oFolder:aDialogs[1]:oFont := oDlg:oFont
	oFolder:aDialogs[2]:oFont := oDlg:oFont
	oFolder:aDialogs[3]:oFont := oDlg:oFont
	oFolder:aDialogs[4]:oFont := oDlg:oFont

	//Cria paineis de adequacao
	oPanelF1 := TPanel():New(0,0,,oFolder:aDialogs[1],,,,,,0,0,.F.,.F.)
		oPanelF1:Align := CONTROL_ALIGN_ALLCLIENT
	oPanelF2 := TPanel():New(0,0,,oFolder:aDialogs[2],,,,,,0,0,.F.,.F.)
		oPanelF2:Align := CONTROL_ALIGN_ALLCLIENT
	oPanelF3 := TPanel():New(0,0,,oFolder:aDialogs[3],,,,,,0,0,.F.,.F.)
		oPanelF3:Align := CONTROL_ALIGN_ALLCLIENT
	oPanelF4 := TPanel():New(0,0,,oFolder:aDialogs[4],,,,,,0,0,.F.,.F.)
		oPanelF4:Align := CONTROL_ALIGN_ALLCLIENT

	// Folder 01
	// ORELHA DIREITA
	nLi := 0.6

	@ nLi,1 TO If(lUpdMdt87 .and. lUpdLimMk,16.3,15.4),27.9 LABEL STR0035 OF oPanelF1 Color CLR_HRED  //"Orelha Direita"

	// Limiar
	nLi += 1 // nLi = 3.7
	@ nLi+0.1,2.3 SAY OemToAnsi(STR0080) OF oPanelF1  //"Limiar de audibilidade"

	nLi += 0.8 // nLi = 4.7
	nLi2 := nLi + 0.7 //nLi2 = 5.4

	If l025od
		@ nLi,3.2 SAY OemToAnsi("0,25") OF oPanelF1
		@ nLi2,2.6   MSGET M->TM9_OD025K SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OD025K) OF oPanelF1
	Endif

	@ nLi,6.2 SAY OemToAnsi("0,50") OF oPanelF1
	@ nLi2,5.6   MSGET M->TM9_OD05KH SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OD05KH) OF oPanelF1

	@ nLi,9.2   SAY OemToAnsi("1,00") OF oPanelF1
	@ nLi2,8.6   MSGET M->TM9_OD1KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OD1KHZ) OF oPanelF1

	@ nLi,12.2  SAY OemToAnsi("2,00") OF oPanelF1
	@ nLi2,11.6  MSGET M->TM9_OD2KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OD2KHZ) OF oPanelF1

	@ nLi,15.2  SAY OemToAnsi("3,00") OF oPanelF1
	@ nLi2,14.6  MSGET M->TM9_OD3KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OD3KHZ) OF oPanelF1

	@ nLi,18.2  SAY OemToAnsi("4,00") OF oPanelF1
	@ nLi2,17.6  MSGET M->TM9_OD4KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OD4KHZ) OF oPanelF1

	@ nLi,21.2  SAY OemToAnsi("6,00") OF oPanelF1
	@ nLi2,20.6  MSGET M->TM9_OD6KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OD6KHZ) OF oPanelF1

	@ nLi,24.2  SAY OemToAnsi("8,00") OF oPanelF1
	@ nLi2,23.6  MSGET M->TM9_OD8KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OD8KHZ) OF oPanelF1

	// Mascaramento
	nLi := nLi2 + 1.2  //6.4
	@ nLi+0.3,2.3 SAY OemToAnsi(STR0081) OF oPanelF1  //"Limiar de audibilidade com mascaramento"

	nLi += 1	//nLi = 7.6
	nLi2 := nLi + 0.7   //nLi2 = 8.3

	@ nLi,3.2 SAY OemToAnsi("0,25") OF oPanelF1
	@ nLi2,2.6   MSGET M->TM9_ODMA25 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODMA25) OF oPanelF1

	@ nLi,6.2 SAY OemToAnsi("0,50") OF oPanelF1
	@ nLi2,5.6   MSGET M->TM9_ODMA50 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODMA50) OF oPanelF1

	@ nLi,9.2   SAY OemToAnsi("1,00") OF oPanelF1
	@ nLi2,8.6   MSGET M->TM9_ODMA10 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODMA10) OF oPanelF1

	@ nLi,12.2  SAY OemToAnsi("2,00") OF oPanelF1
	@ nLi2,11.6  MSGET M->TM9_ODMA20 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODMA20) OF oPanelF1

	@ nLi,15.2  SAY OemToAnsi("3,00") OF oPanelF1
	@ nLi2,14.6  MSGET M->TM9_ODMA30 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODMA30) OF oPanelF1

	@ nLi,18.2  SAY OemToAnsi("4,00") OF oPanelF1
	@ nLi2,17.6  MSGET M->TM9_ODMA40 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODMA40) OF oPanelF1

	@ nLi,21.2  SAY OemToAnsi("6,00") OF oPanelF1
	@ nLi2,20.6  MSGET M->TM9_ODMA60 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODMA60) OF oPanelF1

	@ nLi,24.2  SAY OemToAnsi("8,00") OF oPanelF1
	@ nLi2,23.6  MSGET M->TM9_ODMA80 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODMA80) OF oPanelF1

	// Limites de Mascaramento
	If lUpdMdt87 .And. lUpdLimMk
		nLi := nLi2 + 1.2
		@ nLi+0.3,2.3 SAY OemToAnsi(STR0172) OF oPanelF1 //"Valores de Mascaramento"
		@ nLi+1.2,2.6  SAY OemToAnsi(STR0173) OF oPanelF1 //"Mínimo"
		@ nLi+1.2,5.6  MSGET M->TM9_ODLMIN SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODLMIN,,3) OF oPanelF1
		@ nLi+1.2,8.8  SAY OemToAnsi(STR0174) OF oPanelF1 //"Máximo"
		@ nLi+1.2,11.8 MSGET M->TM9_ODLMAX SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_ODLMAX,,3) OF oPanelF1
	Endif

	// Referencial
	@ nLi+2.9,2.6  SAY OemToAnsi(STR0079) Of oPanelF1  //"Referencial"
	@ nLi+2.8,6.6  COMBOBOX oCbx VAR M->TM9_ODREFE ITEMS aRefer SIZE 30,46 Of oPanelF1

	// Médias - Limiar
	nLi += 2.9  //10.6

	@ nLi-1.2,12.5 TO nLi-1.2+1.6,26.8 LABEL STR0082 OF oPanelF1  //"Médias"

	@ nLi,13  SAY OemToAnsi("[.5,1,2]") OF oPanelF1
	@ nLi,15.5  MSGET M->TM9_ODMED5 SIZE 30,10 Valid CheckDB(M->TM9_ODMED5) When .F. OF oPanelF1 //Picture "@E 999.99"

	@ nLi,20.1  SAY OemToAnsi("[3,4,6]") OF oPanelF1
	@ nLi,22.6  MSGET M->TM9_ODMED3 SIZE 30,10 Valid CheckDB(M->TM9_ODMED3) When .F. OF oPanelF1 //Picture "@E 999.99"

	// RESULTADO
	nLi += 0.3
	nCol := 4.0
	nCol2 := nCol + 3.6

	@ nLi+0.4,3.5 TO nLi+If(lUpdMdt87 .And. lUpdLimMk,5.2,5.6),25.0 LABEL STR0011 OF oPanelF1  //"Resultado"

	nLi += 2.3	//nLi = 15.2
	@ nLi,nCol SAY OemToAnsi(STR0084) OF oPanelF1 //"Clínico"
	@ nLi-0.17,nCol2   COMBOBOX oCbx VAR M->TM9_ODCLIN WHEN MDTA120WHEN(1) ITEMS aClinico SIZE nBase,60 OF oPanelF1 FONT oFont

	nLi += 1.5
	@ nLi,nCol SAY OemToAnsi(STR0087) OF oPanelF1 //"INSS"
	@ nLi-0.17,nCol2   COMBOBOX oCbx VAR M->TM9_ODINSS WHEN MDTA120WHEN(2) ITEMS aINSS SIZE nBase,60 OF oPanelF1 FONT oFont

	nLi += 1.5
	@ nLi,nCol   SAY OemToAnsi(STR0088) OF oPanelF1 //"Portaria 19"

	@ nLi-0.17,nCol2   COMBOBOX oCbx VAR M->TM9_ODRESU WHEN MDTA120WHEN(3) Valid MDT120VRES(M->TM9_ODRESU,M->TM9_OERESU) ITEMS aResul SIZE nBase,60 OF oPanelF1 FONT oFont

	//ORELHA ESQUERDA

	nLi := 0.6
	@ nLi,29 TO If(lUpdMdt87 .And. lUpdLimMk,16.3,15.4),55.9 LABEL STR0041 OF oPanelF1 Color CLR_HBLUE //"Orelha Esquerda"

	//Limiar
	nLi += 1	//nLi = 3.7
	@ nLi+0.1,30.3 SAY OemToAnsi(STR0080) OF oPanelF1  //"Limiar de audibilidade"

	nLi += 0.8	//nLi = 4.7
	nLi2 := nLi + 0.7   //nLi2 = 5.4

	If l025oe
		@ nLi,31.2 SAY OemToAnsi("0,25") OF oPanelF1
		@ nLi2,30.6   MSGET M->TM9_OE025K SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OE025K) OF oPanelF1
	Endif

	@ nLi,34.2 SAY OemToAnsi("0,50") OF oPanelF1
	@ nLi2,33.6   MSGET M->TM9_OE05KH SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OE05KH) OF oPanelF1

	@ nLi,37.2   SAY OemToAnsi("1,00") OF oPanelF1
	@ nLi2,36.6   MSGET M->TM9_OE1KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OE1KHZ) OF oPanelF1

	@ nLi,40.2  SAY OemToAnsi("2,00") OF oPanelF1
	@ nLi2,39.6  MSGET M->TM9_OE2KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OE2KHZ) OF oPanelF1

	@ nLi,43.2  SAY OemToAnsi("3,00") OF oPanelF1
	@ nLi2,42.6  MSGET M->TM9_OE3KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OE3KHZ) OF oPanelF1

	@ nLi,46.2  SAY OemToAnsi("4,00") OF oPanelF1
	@ nLi2,45.6  MSGET M->TM9_OE4KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OE4KHZ) OF oPanelF1

	@ nLi,49.2  SAY OemToAnsi("6,00") OF oPanelF1
	@ nLi2,48.6  MSGET M->TM9_OE6KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OE6KHZ) OF oPanelF1

	@ nLi,52.2  SAY OemToAnsi("8,00") OF oPanelF1
	@ nLi2,51.6  MSGET M->TM9_OE8KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OE8KHZ) OF oPanelF1

	// Mascaramento
	nLi := nLi2 + 1.2  //6.4
	@ nLi+0.3,30.3 SAY OemToAnsi(STR0081) OF oPanelF1  //"Limiar de audibilidade com mascaramento"

	nLi += 1	//nLi = 7.6
	nLi2 := nLi + 0.7   //nLi2 = 8.3

	@ nLi,31.2 SAY OemToAnsi("0,25") OF oPanelF1
	@ nLi2,30.6   MSGET M->TM9_OEMA25 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OEMA25) OF oPanelF1

	@ nLi,34.2 SAY OemToAnsi("0,50") OF oPanelF1
	@ nLi2,33.6   MSGET M->TM9_OEMA50 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OEMA50) OF oPanelF1

	@ nLi,37.2   SAY OemToAnsi("1,00") OF oPanelF1
	@ nLi2,36.6   MSGET M->TM9_OEMA10 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OEMA10) OF oPanelF1

	@ nLi,40.2  SAY OemToAnsi("2,00") OF oPanelF1
	@ nLi2,39.6  MSGET M->TM9_OEMA20 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OEMA20) OF oPanelF1

	@ nLi,43.2  SAY OemToAnsi("3,00") OF oPanelF1
	@ nLi2,42.6  MSGET M->TM9_OEMA30 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OEMA30) OF oPanelF1

	@ nLi,46.2  SAY OemToAnsi("4,00") OF oPanelF1
	@ nLi2,45.6  MSGET M->TM9_OEMA40 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OEMA40) OF oPanelF1

	@ nLi,49.2  SAY OemToAnsi("6,00") OF oPanelF1
	@ nLi2,48.6  MSGET M->TM9_OEMA60 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OEMA60) OF oPanelF1

	@ nLi,52.2  SAY OemToAnsi("8,00") OF oPanelF1
	@ nLi2,51.6  MSGET M->TM9_OEMA80 SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OEMA80) OF oPanelF1

	//Limites de Mascaramento
	If lUpdMdt87 .And. lUpdLimMk
		nLi := nLi2 + 1.2
		@ nLi+0.3,30.3 SAY OemToAnsi(STR0172) OF oPanelF1 //"Valores de Mascaramento"
		@ nLi+1.2,30.6  SAY OemToAnsi(STR0173) OF oPanelF1 //"Mínimo"
		@ nLi+1.2,33.6  MSGET M->TM9_OELMIN SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OELMIN,,4) OF oPanelF1
		@ nLi+1.2,36.8  SAY OemToAnsi(STR0174) OF oPanelF1 //"Máximo"
		@ nLi+1.2,39.8 MSGET M->TM9_OELMAX SIZE 0,10 Picture "@!" Valid CheckDB(M->TM9_OELMAX,,4) OF oPanelF1
	Endif

	//Referencial
	@ nLi+2.9,30.6  SAY OemToAnsi(STR0079) Of oPanelF1  //"Referencial"
	@ nLi+2.8,34.6  COMBOBOX oCbx VAR M->TM9_OEREFE ITEMS aRefer SIZE 30,46 Of oPanelF1

	//Médias - Limiar
	nLi += 2.9  //10.6

	@ nLi-1.2,40.5 TO nLi-1.2+1.6,54.8 LABEL STR0082 OF oPanelF1  //"Médias"

	@ nLi,41  SAY OemToAnsi("[.5,1,2]") OF oPanelF1
	@ nLi,43.5  MSGET M->TM9_OEMED5 SIZE 30,10 Valid CheckDB(M->TM9_OEMED5) When .F. OF oPanelF1 //Picture "@E 999.99"

	@ nLi,48.1  SAY OemToAnsi("[3,4,6]") OF oPanelF1
	@ nLi,50.6  MSGET M->TM9_OEMED3 SIZE 30,10 Valid CheckDB(M->TM9_OEMED3) When .F. OF oPanelF1 //Picture "@E 999.99"

	// RESULTADO
	nLi += 0.3
	nCol := 32
	nCol2 := nCol + 3.6

	@ nLi+0.2,31.5 TO nLi+If(lUpdMdt87 .And. lUpdLimMk,5.2,5.6),53 LABEL STR0011 OF oPanelF1  //"Resultado"

	nLi += 2.3	//nLi = 15.2
	@ nLi,nCol SAY OemToAnsi(STR0084) OF oPanelF1 //"Clínico"
	@ nLi-0.17,nCol2   COMBOBOX oCbx VAR M->TM9_OECLIN WHEN MDTA120WHEN(4) ITEMS aClinico SIZE nBase,60 OF oPanelF1 FONT oFont

	nLi += 1.5
	@ nLi,nCol SAY OemToAnsi(STR0087) OF oPanelF1 //"INSS"
	@ nLi-0.17,nCol2   COMBOBOX oCbx VAR M->TM9_OEINSS WHEN MDTA120WHEN(5) ITEMS aINSS SIZE nBase,60 OF oPanelF1 FONT oFont

	nLi += 1.5
	@ nLi,nCol   SAY OemToAnsi(STR0088) OF oPanelF1 //"Portaria 19"
	@ nLi-0.17,nCol2   COMBOBOX oCbx VAR M->TM9_OERESU Valid MDT120VRES(M->TM9_ODRESU,M->TM9_OERESU) WHEN MDTA120WHEN(6) ITEMS aResul SIZE nBase,60 OF oPanelF1 FONT oFont

	//"&Calcular Resultados"
	@ nLi+215,197 BUTTON oCalcResult Prompt STR0067 SIZE 60,12 PIXEL ACTION _RESULT120() OF oPanelF1

	// Folder 02
	// ORELHA DIREITA
	nLi := 0.6

	@ nLi,1 TO nLi+If(lUpdMdt87 .And. lUpdLimMk,8.3,6.8),27.9 LABEL STR0035 OF oPanelF2 Color CLR_HRED  //"Orelha Direita"

	//Limiar
	nLi += 1	//nLi = 3.7
	@ nLi+0.1,2.3 SAY OemToAnsi(STR0080) OF oPanelF2  //"Limiar de audibilidade"

	nLi += 0.8	//nLi = 4.7
	nLi2 := nLi + 0.7   //nLi2 = 5.4

	@ nLi,6.2 SAY OemToAnsi("0,50") OF oPanelF2
	@ nLi2,5.6   MSGET M2_OD05KH SIZE 0,10 Picture "@!" Valid CheckDB(M2_OD05KH,.T.) OF oPanelF2

	@ nLi,9.2   SAY OemToAnsi("1,00") OF oPanelF2
	@ nLi2,8.6   MSGET M2_OD1KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M2_OD1KHZ,.T.) OF oPanelF2

	@ nLi,12.2  SAY OemToAnsi("2,00") OF oPanelF2
	@ nLi2,11.6  MSGET M2_OD2KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M2_OD2KHZ,.T.) OF oPanelF2

	@ nLi,15.2  SAY OemToAnsi("3,00") OF oPanelF2
	@ nLi2,14.6  MSGET M2_OD3KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M2_OD3KHZ,.T.) OF oPanelF2

	@ nLi,18.2  SAY OemToAnsi("4,00") OF oPanelF2
	@ nLi2,17.6  MSGET M2_OD4KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M2_OD4KHZ,.T.) OF oPanelF2

	// Mascaramento
	nLi := nLi2 + 1.2  //6.4
	@ nLi+0.3,2.3 SAY OemToAnsi(STR0081) OF oPanelF2  //"Limiar de audibilidade com mascaramento"

	nLi += 1	//nLi = 7.6
	nLi2 := nLi + 0.7   //nLi2 = 8.3

	@ nLi,6.2 SAY OemToAnsi("0,50") OF oPanelF2
	@ nLi2,5.6   MSGET M2_ODMA50 SIZE 0,10 Picture "@!" Valid CheckDB(M2_ODMA50,.T.) OF oPanelF2

	@ nLi,9.2   SAY OemToAnsi("1,00") OF oPanelF2
	@ nLi2,8.6   MSGET M2_ODMA10 SIZE 0,10 Picture "@!" Valid CheckDB(M2_ODMA10,.T.) OF oPanelF2

	@ nLi,12.2  SAY OemToAnsi("2,00") OF oPanelF2
	@ nLi2,11.6  MSGET M2_ODMA20 SIZE 0,10 Picture "@!" Valid CheckDB(M2_ODMA20,.T.) OF oPanelF2

	@ nLi,15.2  SAY OemToAnsi("3,00") OF oPanelF2
	@ nLi2,14.6  MSGET M2_ODMA30 SIZE 0,10 Picture "@!" Valid CheckDB(M2_ODMA30,.T.) OF oPanelF2

	@ nLi,18.2  SAY OemToAnsi("4,00") OF oPanelF2
	@ nLi2,17.6  MSGET M2_ODMA40 SIZE 0,10 Picture "@!" Valid CheckDB(M2_ODMA40,.T.) OF oPanelF2


	//Limites de Mascaramento
	If lUpdMdt87 .And. lUpdLimMk
		nLi := nLi2 + 1.2
		@ nLi+0.3,2.3  SAY OemToAnsi(STR0172) OF oPanelF2 //"Valores de Mascaramento"
		@ nLi+1.2,5.6  SAY OemToAnsi(STR0173) OF oPanelF2 //"Mínimo"
		@ nLi+1.2,8.6  MSGET M2_ODLMIN SIZE 0,10 Picture "@!" Valid CheckDB(M2_ODLMIN,,1) OF oPanelF2
		@ nLi+1.2,11.8 SAY OemToAnsi(STR0174) OF oPanelF2 //"Máximo"
		@ nLi+1.2,14.8 MSGET M2_ODLMAX SIZE 0,10 Picture "@!" Valid CheckDB(M2_ODLMAX,,1) OF oPanelF2
	Endif

	//ORELHA ESQUERDA

	nLi := 0.6
	@ nLi,29 TO nLi+If(lUpdMdt87 .And. lUpdLimMk,8.3,6.8),55.9 LABEL STR0041 OF oPanelF2 Color CLR_HBLUE //"Orelha Esquerda"

	//Limiar
	nLi += 1	//nLi = 3.7
	@ nLi+0.1,30.3 SAY OemToAnsi(STR0080) OF oPanelF2  //"Limiar de audibilidade"

	nLi += 0.8	//nLi = 4.7
	nLi2 := nLi + 0.7   //nLi2 = 5.4

	@ nLi,34.2 SAY OemToAnsi("0,50") OF oPanelF2
	@ nLi2,33.6   MSGET M2_OE05KH SIZE 0,10 Picture "@!" Valid CheckDB(M2_OE05KH,.T.) OF oPanelF2

	@ nLi,37.2   SAY OemToAnsi("1,00") OF oPanelF2
	@ nLi2,36.6   MSGET M2_OE1KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M2_OE1KHZ,.T.) OF oPanelF2

	@ nLi,40.2  SAY OemToAnsi("2,00") OF oPanelF2
	@ nLi2,39.6  MSGET M2_OE2KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M2_OE2KHZ,.T.) OF oPanelF2

	@ nLi,43.2  SAY OemToAnsi("3,00") OF oPanelF2
	@ nLi2,42.6  MSGET M2_OE3KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M2_OE3KHZ,.T.) OF oPanelF2

	@ nLi,46.2  SAY OemToAnsi("4,00") OF oPanelF2
	@ nLi2,45.6  MSGET M2_OE4KHZ SIZE 0,10 Picture "@!" Valid CheckDB(M2_OE4KHZ,.T.) OF oPanelF2

	//Mascaramento
	nLi := nLi2 + 1.2  //6.4
	@ nLi+0.3,30.3 SAY OemToAnsi(STR0081) OF oPanelF2  //"Limiar de audibilidade com mascaramento"

	nLi += 1	//nLi = 7.6
	nLi2 := nLi + 0.7   //nLi2 = 8.3

	@ nLi,34.2 SAY OemToAnsi("0,50") OF oPanelF2
	@ nLi2,33.6   MSGET M2_OEMA50 SIZE 0,10 Picture "@!" Valid CheckDB(M2_OEMA50,.T.) OF oPanelF2

	@ nLi,37.2   SAY OemToAnsi("1,00") OF oPanelF2
	@ nLi2,36.6   MSGET M2_OEMA10 SIZE 0,10 Picture "@!" Valid CheckDB(M2_OEMA10,.T.) OF oPanelF2

	@ nLi,40.2  SAY OemToAnsi("2,00") OF oPanelF2
	@ nLi2,39.6  MSGET M2_OEMA20 SIZE 0,10 Picture "@!" Valid CheckDB(M2_OEMA20,.T.) OF oPanelF2

	@ nLi,43.2  SAY OemToAnsi("3,00") OF oPanelF2
	@ nLi2,42.6  MSGET M2_OEMA30 SIZE 0,10 Picture "@!" Valid CheckDB(M2_OEMA30,.T.) OF oPanelF2

	@ nLi,46.2  SAY OemToAnsi("4,00") OF oPanelF2
	@ nLi2,45.6  MSGET M2_OEMA40 SIZE 0,10 Picture "@!" Valid CheckDB(M2_OEMA40,.T.) OF oPanelF2

	// Limites de Mascaramento
	If lUpdMdt87 .And. lUpdLimMk
		nLi := nLi2 + 1.2
		@ nLi+0.3,30.3 SAY OemToAnsi(STR0172) OF oPanelF2 //"Valores de Mascaramento"
		@ nLi+1.2,33.6 SAY OemToAnsi(STR0173) OF oPanelF2 //"Mínimo"
		@ nLi+1.2,36.6 MSGET M2_OELMIN SIZE 0,10 Picture "@!" Valid CheckDB(M2_OELMIN,,2) OF oPanelF2
		@ nLi+1.2,39.8 SAY OemToAnsi(STR0174) OF oPanelF2 //"Máximo"
		@ nLi+1.2,42.8 MSGET M2_OELMAX SIZE 0,10 Picture "@!" Valid CheckDB(M2_OELMAX,,2) OF oPanelF2
	Endif

	// Folder 03

	// ORELHA DIREITA
	nLi := 0.6
	@ nLi,1 TO nLi+If(lUpdMdt87,9.2,8),27.9 LABEL STR0035 OF oPanelF3 Color CLR_HRED  //"Orelha Direita"

	// Meatoscopia
	nLi += 1.1
	@ nLi,2.3   SAY OemToAnsi(STR0036) Of oPanelF3  //"Meatoscopia"
	@ nLi,8.8   MSGET M->TM9_ODMEAT picture "@!" SIZE 78,10 Of oPanelF3

	// Logoaudiometria
	nLi += 1.5
	@ nLi,2.3  SAY OemToAnsi("S.R.T.") OF oPanelF3
	@ nLi,8.8  MSGET M->TM9_ODRECF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODRECF") OF oPanelF3

	If lUpdMdt87
		@ nLi,12.7 SAY OemToAnsi(STR0175) OF oPanelF3 //"Vl. Masc."
		@ nLi,16 MSGET M->TM9_ODMSRT SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODMSRT") OF oPanelF3
		nLi += 1.5
		@ nLi,2.3 SAY OemToAnsi("S.D.T.") OF oPanelF3
		@ nLi,8.8  MSGET M->TM9_ODSDT SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODSDT") OF oPanelF3
	Endif

	nLi += 1.5
	@ nLi+0.5,2.3 SAY OemToAnsi("I.R.F.") OF oPanelF3

	@ nLi,5.0 SAY OemToAnsi(STR0039) OF oPanelF3 //"Qt Monos"
	@ nLi,8.8  MSGET M->TM9_ODREMO SIZE 20,10 picture "999" Valid CheckSX3("TM9_ODREMO") OF oPanelF3

	nLi += 1
	@ nLi,5.0  SAY OemToAnsi(STR0040) OF oPanelF3 //"Qt Dissil"
	@ nLi,8.8  MSGET M->TM9_ODREDI SIZE 20,10 picture "999" Valid CheckSX3("TM9_ODREDI") OF oPanelF3

	If lUpdMdt87
		@ nLi-0.5,12.7 SAY OemToAnsi(STR0175) OF oPanelF3 //"Vl. Masc."
		@ nLi-0.5,16 MSGET M->TM9_ODMIRF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODMIRF") OF oPanelF3
	Endif

	// Origem Anormalidade
	nLi += 1.5
	@ nLi+0.1,2.3  SAY OemToAnsi(STR0064) OF oPanelF3  //"Orig. Anormalidade"
	@ nLi,8.8  COMBOBOX oCbx VAR M->TM9_ODORIG ITEMS aOrAnormal SIZE 78,55 OF oPanelF3 FONT oFont

	//ORELHA ESQUERDA
	nLi := 0.6
	@ nLi,29 TO nLi+If(lUpdMdt87,9.2,8),55.9 LABEL STR0041 OF oPanelF3 Color CLR_HBLUE //"Orelha Esquerda"

	//Meatoscopia
	nLi += 1.1    //nLi = 1.5
	@ nLi,30.3   SAY OemToAnsi(STR0036) Of oPanelF3  //"Meatoscopia"
	@ nLi,36.6   MSGET M->TM9_OEMEAT picture "@!" SIZE 78,10 Of oPanelF3

	//Logoaudiometria
	nLi += 1.5

	@ nLi,30.3  SAY OemToAnsi("S.R.T.") OF oPanelF3
	@ nLi,36.6  MSGET M->TM9_OERECF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OERECF") OF oPanelF3

	If lUpdMdt87
		@ nLi,40.7 SAY OemToAnsi(STR0175) OF oPanelF3 //"Vl. Masc."
		@ nLi,43.8 MSGET M->TM9_OEMSRT SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OEMSRT") OF oPanelF3
		nLi += 1.5
		@ nLi,30.3 SAY OemToAnsi("S.D.T.") OF oPanelF3
		@ nLi,36.6  MSGET M->TM9_OESDT SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OESDT") OF oPanelF3
	Endif

	nLi += 1.5	//nLi = 6.7
	@ nLi+0.5,30.3 SAY OemToAnsi("I.R.F.") OF oPanelF3

	@ nLi,33.3 SAY OemToAnsi(STR0039) OF oPanelF3 //"Qt Monos"
	@ nLi,36.6  MSGET M->TM9_OEREMO SIZE 20,10 picture "999" Valid CheckSX3("TM9_OEREMO") OF oPanelF3

	nLi += 1	//nLi = 7.7
	@ nLi,33.3  SAY OemToAnsi(STR0040) OF oPanelF3 //"Qt Dissil"
	@ nLi,36.6  MSGET M->TM9_OEREDI SIZE 20,10 picture "999" Valid CheckSX3("TM9_OEREDI") OF oPanelF3

	If lUpdMdt87
		@ nLi-0.5,40.7 SAY OemToAnsi(STR0175) OF oPanelF3 //"Vl. Masc."
		@ nLi-0.5,43.8 MSGET M->TM9_OEMIRF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OEMIRF") OF oPanelF3
	Endif

	// Origem Anormalidade
	nLi += 1.5
	@ nLi+0.1,30.3  SAY OemToAnsi(STR0064) OF oPanelF3  //"Orig. Anormalidade"
	@ nLi,36.6  COMBOBOX oCbx VAR M->TM9_OEORIG ITEMS aOrAnormal SIZE 78,55 OF oPanelF3 FONT oFont

	// Folder 04
	nLi := 0.5
	nCol := 2
	nCol2 := nCol+5.5
	nCol3 := 18.7
	nCol4 := 23

	//Informacoes do Resultado
	@ nLi,nCol   SAY OemToAnsi(STR0092) Of oPanelF4 Color CLR_HBLUE  //"Dt. Resultado"
	@ nLi,nCol2   MSGET M->TM5_DTRESU picture "99/99/99" SIZE 45,08 Of oPanelF4 Valid NaoVazio(M->TM5_DTRESU) HasButton
	@ nLi,(nCol3-0.7)  SAY OemToAnsi(STR0033) Of oPanelF4 //"Hrs Repouso"
	@ nLi,nCol4  MSGET M->TM9_REPOUS  SIZE 20,10 Picture "99" Of oPanelF4
	nLi += 1
	@ nLi,nCol Say OemToAnsi(STR0093) Of oPanelF4   //"Cód. Resultado"
	@ nLi,nCol2 MsGet M->TM5_CODRES Size 30,10 Picture "@!" Of oPanelF4 F3 "TMU";
						Valid If(Empty(M->TM5_CODRES),.T.,EXISTCPO("TMU",M->TM5_CODRES)) .And. NOCODIGO() HasButton
	@ nLi,nCol3 Say OemToAnsi(STR0011) Of oPanelF4 //"Resultado"
	@ nLi,nCol4 MsGet M->TM5_RESULT Picture "@!" SIZE 138,10 Of oPanelF4 When .F.
	nLi += 1
	@ nLi,nCol  SAY OemToAnsi(STR0099) Of oPanelF4  //"Ind. Resultado"
	@ nLi,nCol2 COMBOBOX oCbx VAR M->TM5_INDRES ITEMS aCodRes SIZE 80,40 Of oPanelF4
	nLi += 1.1
	@ nLi,nCol  SAY OemToAnsi(STR0094) Of oPanelF4 //"Det. Resultado"
	@ nLi,nCol2  GET oMemo Var M->TM5_DESRES MEMO SIZE 261,20 MEMO Of oPanelF4
	nLi += 1.8
	@ nLi,nCol  SAY OemToAnsi(STR0095) Of oPanelF4 //"Obs. Resultado"
	@ nLi,nCol2  MSGET M->TM5_OBSERV  SIZE 263,10 Picture "@!" Of oPanelF4

	// Equipamento
	nLi += 1.9
	@ nLi-1.2,2 TO 10.0,41.0 LABEL STR0031 OF oPanelF4   //"Equipamento"
	nLi += 0.2
	@ nLi,2.5   Say OemToAnsi(STR0031) Of oPanelF4 Color CLR_HBLUE //"Equipamento"
	@ nLi,nCol2 MsGet M->TM9_EQPTO Size 30,10 Picture "@!" Of oPanelF4 F3 "TM7" Valid If(NaoVazio(M->TM9_EQPTO),ExistCpo("TM7",M->TM9_EQPTO) .And. NOEQUIP1(),.F.) HasButton
	@ nLi,nCol3 Say OemToAnsi(STR0097) Of oPanelF4 //"Nome Equip."
	@ nLi,nCol4 MsGet M->TM9_NOEQTO Picture "@!" SIZE 140,10 Of oPanelF4 When .F.
	nLi += 1
	@ nLi,2.5 SAY OemToAnsi(STR0045) Of oPanelF4 Color CLR_HBLUE  //"Aferição"
	@ nLi,nCol2 MSGET M->TM9_DTAFER picture "99/99/99" SIZE 45,08 Of oPanelF4  Valid NaoVazio(M->TM9_DTAFER) HasButton
	@ nLi,nCol3   SAY OemToAnsi(STR0044) Of oPanelF4 //"Calibração"
	@ nLi,nCol4 MSGET M->TM9_DTCALI picture "99/99/99" SIZE 45,08 Of oPanelF4 HasButton
	nLi += 1
	@ nLi,2.5   SAY OemToAnsi(STR0034) Of oPanelF4 Color CLR_HBLUE //"Responsável"
	@ nLi,nCol2 MSGET M->TM9_USURES SIZE 50,10 Picture "@!" Of oPanelF4 F3 "TMK";
					Valid If(NaoVazio(M->TM9_USURES),ExistCpo("TMK",M->TM9_USURES) .And. VNomeUsu(M->TM9_USURES),.F.) HasButton
	@ nLi,nCol3 SAY OemToAnsi(STR0098) Of oPanelF4 //"Nome Resp."
	@ nLi,nCol4 MSGET M->TM9_NOMUSU picture "@!" SIZE 140,10 When .F. Of oPanelF4

	If Type("asMenu") == "U"
		asMenu := NGRIGHTCLICK("MDTA120")
	Endif

	NgPopUp(asMenu,@oMenu)
	oDlg:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}

	If nOpcx == 2
		oPanelF1:Disable()
		oPanelF2:Disable()
		oPanelF3:Disable()
		oPanelF4:Disable()
	EndIf

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOPCA:=1,If(!AUDITUDOK(lUpdMdt87 .and. lUpdLimMk),nOPCAO := 0,oDlg:End())},{||oDlg:End()},,aButtons) Centered

	If nOPCA == 1 .And. nOpcx <> 2

		//Grava o resultado da Via Aerea

		//Verifica se alguma informacao está preenchida
		If 	!Empty(M->TM9_OD025K) .Or.;
			!Empty(M->TM9_OD05KH) .Or.;
			!Empty(M->TM9_OD1KHZ) .Or.;
			!Empty(M->TM9_OD2KHZ) .Or.;
			!Empty(M->TM9_OD3KHZ) .Or.;
			!Empty(M->TM9_OD4KHZ) .Or.;
			!Empty(M->TM9_OD6KHZ) .Or.;
			!Empty(M->TM9_OD8KHZ) .Or.;
			!Empty(M->TM9_ODMA25) .Or.;
			!Empty(M->TM9_ODMA50) .Or.;
			!Empty(M->TM9_ODMA10) .Or.;
			!Empty(M->TM9_ODMA20) .Or.;
			!Empty(M->TM9_ODMA30) .Or.;
			!Empty(M->TM9_ODMA40) .Or.;
			!Empty(M->TM9_ODMA60) .Or.;
			!Empty(M->TM9_ODMA80) .Or.;
			!Empty(M->TM9_OE025K) .Or.;
			!Empty(M->TM9_OE05KH) .Or.;
			!Empty(M->TM9_OE1KHZ) .Or.;
			!Empty(M->TM9_OE2KHZ) .Or.;
			!Empty(M->TM9_OE3KHZ) .Or.;
			!Empty(M->TM9_OE4KHZ) .Or.;
			!Empty(M->TM9_OE6KHZ) .Or.;
			!Empty(M->TM9_OE8KHZ) .Or.;
			!Empty(M->TM9_OEMA25) .Or.;
			!Empty(M->TM9_OEMA50) .Or.;
			!Empty(M->TM9_OEMA10) .Or.;
			!Empty(M->TM9_OEMA20) .Or.;
			!Empty(M->TM9_OEMA30) .Or.;
			!Empty(M->TM9_OEMA40) .Or.;
			!Empty(M->TM9_OEMA60) .Or.;
			!Empty(M->TM9_OEMA80)

				lResul := .T.

				DbSelectArea("TM9")
				dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
				If !dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "1" )
					RecLock("TM9",.T.)
					TM9->TM9_FILIAL := cFilTM9
					TM9->TM9_NUMFIC := cNUMFIC
					TM9->TM9_DTPROG := dDTPROG
					TM9->TM9_HRPROG := cHRPROG
					TM9->TM9_EXAME  := cEXAME
				Else
					RecLock("TM9",.F.) // altera
				Endif

				TM9->TM9_INDVIA := "1"

				//------- Outras Informacoes  --------//
				TM9->TM9_REPOUS := M->TM9_REPOUS
				//Equipamento
				TM9->TM9_EQPTO  := M->TM9_EQPTO
				TM9->TM9_DTAFER := M->TM9_DTAFER
				TM9->TM9_DTCALI := M->TM9_DTCALI
				TM9->TM9_USURES := M->TM9_USURES
				//Meatoscopia
				TM9->TM9_ODMEAT := M->TM9_ODMEAT
				TM9->TM9_OEMEAT := M->TM9_OEMEAT
				//Logoaudiometria
				TM9->TM9_ODRECF := M->TM9_ODRECF
				TM9->TM9_ODREMO := M->TM9_ODREMO
				TM9->TM9_ODREDI := M->TM9_ODREDI
				TM9->TM9_OERECF := M->TM9_OERECF
				TM9->TM9_OEREMO := M->TM9_OEREMO
				TM9->TM9_OEREDI := M->TM9_OEREDI

				If lUpdMdt87
					TM9->TM9_ODLMIN := M->TM9_ODLMIN
					TM9->TM9_ODLMAX := M->TM9_ODLMAX
					TM9->TM9_OELMIN := M->TM9_OELMIN
					TM9->TM9_OELMAX := M->TM9_OELMAX
					TM9->TM9_ODMSRT := M->TM9_ODMSRT
					TM9->TM9_ODSDT  := M->TM9_ODSDT
					TM9->TM9_ODMIRF := M->TM9_ODMIRF
					TM9->TM9_OEMSRT := M->TM9_OEMSRT
					TM9->TM9_OESDT  := M->TM9_OESDT
					TM9->TM9_OEMIRF := M->TM9_OEMIRF
				Endif

				//Limiar - OD
				TM9->TM9_OD025K := LimiarDB(M->TM9_OD025K)
				TM9->TM9_OD05KH := LimiarDB(M->TM9_OD05KH)
				TM9->TM9_OD1KHZ := LimiarDB(M->TM9_OD1KHZ)
				TM9->TM9_OD2KHZ := LimiarDB(M->TM9_OD2KHZ)
				TM9->TM9_OD3KHZ := LimiarDB(M->TM9_OD3KHZ)
				TM9->TM9_OD4KHZ := LimiarDB(M->TM9_OD4KHZ)
				TM9->TM9_OD6KHZ := LimiarDB(M->TM9_OD6KHZ)
				TM9->TM9_OD8KHZ := LimiarDB(M->TM9_OD8KHZ)
				//Limiar - OE
				TM9->TM9_OE025K := LimiarDB(M->TM9_OE025K)
				TM9->TM9_OE05KH := LimiarDB(M->TM9_OE05KH)
				TM9->TM9_OE1KHZ := LimiarDB(M->TM9_OE1KHZ)
				TM9->TM9_OE2KHZ := LimiarDB(M->TM9_OE2KHZ)
				TM9->TM9_OE3KHZ := LimiarDB(M->TM9_OE3KHZ)
				TM9->TM9_OE4KHZ := LimiarDB(M->TM9_OE4KHZ)
				TM9->TM9_OE6KHZ := LimiarDB(M->TM9_OE6KHZ)
				TM9->TM9_OE8KHZ := LimiarDB(M->TM9_OE8KHZ)

				//Mascaramento - OD
				TM9->TM9_ODMA25 := LimiarDB(M->TM9_ODMA25)
				TM9->TM9_ODMA50 := LimiarDB(M->TM9_ODMA50)
				TM9->TM9_ODMA10 := LimiarDB(M->TM9_ODMA10)
				TM9->TM9_ODMA20 := LimiarDB(M->TM9_ODMA20)
				TM9->TM9_ODMA30 := LimiarDB(M->TM9_ODMA30)
				TM9->TM9_ODMA40 := LimiarDB(M->TM9_ODMA40)
				TM9->TM9_ODMA60 := LimiarDB(M->TM9_ODMA60)
				TM9->TM9_ODMA80 := LimiarDB(M->TM9_ODMA80)
				//Mascaramento - OE
				TM9->TM9_OEMA25 := LimiarDB(M->TM9_OEMA25)
				TM9->TM9_OEMA50 := LimiarDB(M->TM9_OEMA50)
				TM9->TM9_OEMA10 := LimiarDB(M->TM9_OEMA10)
				TM9->TM9_OEMA20 := LimiarDB(M->TM9_OEMA20)
				TM9->TM9_OEMA30 := LimiarDB(M->TM9_OEMA30)
				TM9->TM9_OEMA40 := LimiarDB(M->TM9_OEMA40)
				TM9->TM9_OEMA60 := LimiarDB(M->TM9_OEMA60)
				TM9->TM9_OEMA80 := LimiarDB(M->TM9_OEMA80)

				//Origem Anormalidade
				TM9->TM9_ODORIG := M->TM9_ODORIG
				TM9->TM9_OEORIG := M->TM9_OEORIG

				//Resultados
				TM9->TM9_ODCLIN := M->TM9_ODCLIN
				TM9->TM9_OECLIN := M->TM9_OECLIN

				TM9->TM9_ODINSS := M->TM9_ODINSS
				TM9->TM9_OEINSS := M->TM9_OEINSS

				//Referencial
				TM9->TM9_ODREFE := M->TM9_ODREFE
				TM9->TM9_OEREFE := M->TM9_OEREFE
				//Portaria 19
				TM9->TM9_ODRESU := M->TM9_ODRESU
				TM9->TM9_OERESU := M->TM9_OERESU

				//Medias
				TM9->TM9_ODMED5 := If( Empty(M->TM9_ODMED5), 999.99, STRPONTO(M->TM9_ODMED5) )
				TM9->TM9_ODMED3 := If( Empty(M->TM9_ODMED3), 999.99, STRPONTO(M->TM9_ODMED3) )
				TM9->TM9_OEMED5 := If( Empty(M->TM9_OEMED5), 999.99, STRPONTO(M->TM9_OEMED5) )
				TM9->TM9_OEMED3 := If( Empty(M->TM9_OEMED3), 999.99, STRPONTO(M->TM9_OEMED3) )

				MSUNLOCK("TM9")
		Endif

		//Grava o resultado da Via Ossea

		//Verifica se alguma informacao está preenchida
		If 	!Empty(M2_OD05KH) .Or.;
			!Empty(M2_OD1KHZ) .Or.;
			!Empty(M2_OD2KHZ) .Or.;
			!Empty(M2_OD3KHZ) .Or.;
			!Empty(M2_OD4KHZ) .Or.;
			!Empty(M2_ODMA50) .Or.;
			!Empty(M2_ODMA10) .Or.;
			!Empty(M2_ODMA20) .Or.;
			!Empty(M2_ODMA30) .Or.;
			!Empty(M2_ODMA40) .Or.;
			!Empty(M2_OE05KH) .Or.;
			!Empty(M2_OE1KHZ) .Or.;
			!Empty(M2_OE2KHZ) .Or.;
			!Empty(M2_OE3KHZ) .Or.;
			!Empty(M2_OE4KHZ) .Or.;
			!Empty(M2_OEMA50) .Or.;
			!Empty(M2_OEMA10) .Or.;
			!Empty(M2_OEMA20) .Or.;
			!Empty(M2_OEMA30) .Or.;
			!Empty(M2_OEMA40)

				lResul := .T.

				DbSelectArea("TM9")
				dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
				If !dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "2" )
					RecLock("TM9",.T.)
					TM9->TM9_FILIAL := cFilTM9
					TM9->TM9_NUMFIC := cNUMFIC
					TM9->TM9_DTPROG := dDTPROG
					TM9->TM9_HRPROG := cHRPROG
					TM9->TM9_EXAME  := cEXAME
				Else
					RecLock("TM9",.F.) //altera
				Endif

				TM9->TM9_INDVIA := "2"

				//------- Outras Informacoes  --------//
				TM9->TM9_REPOUS := M->TM9_REPOUS
				//Equipamento
				TM9->TM9_EQPTO  := M->TM9_EQPTO
				TM9->TM9_DTAFER := M->TM9_DTAFER
				TM9->TM9_DTCALI := M->TM9_DTCALI
				TM9->TM9_USURES := M->TM9_USURES
				//Meatoscopia
				TM9->TM9_ODMEAT := M->TM9_ODMEAT
				TM9->TM9_OEMEAT := M->TM9_OEMEAT
				//Logoaudiometria
				TM9->TM9_ODRECF := M->TM9_ODRECF
				TM9->TM9_ODREMO := M->TM9_ODREMO
				TM9->TM9_ODREDI := M->TM9_ODREDI
				TM9->TM9_OERECF := M->TM9_OERECF
				TM9->TM9_OEREMO := M->TM9_OEREMO
				TM9->TM9_OEREDI := M->TM9_OEREDI
				If lUpdMdt87
					TM9->TM9_ODLMIN := M2_ODLMIN
					TM9->TM9_ODLMAX := M2_ODLMAX
					TM9->TM9_OELMIN := M2_OELMIN
					TM9->TM9_OELMAX := M2_OELMAX
					TM9->TM9_ODMSRT := M->TM9_ODMSRT
					TM9->TM9_ODSDT  := M->TM9_ODSDT
					TM9->TM9_ODMIRF := M->TM9_ODMIRF
					TM9->TM9_OEMSRT := M->TM9_OEMSRT
					TM9->TM9_OESDT  := M->TM9_OESDT
					TM9->TM9_OEMIRF := M->TM9_OEMIRF
				Endif

				//Limiar - OD
				TM9->TM9_OD025K := -1
				TM9->TM9_OD05KH := LimiarDB(M2_OD05KH)
				TM9->TM9_OD1KHZ := LimiarDB(M2_OD1KHZ)
				TM9->TM9_OD2KHZ := LimiarDB(M2_OD2KHZ)
				TM9->TM9_OD3KHZ := LimiarDB(M2_OD3KHZ)
				TM9->TM9_OD4KHZ := LimiarDB(M2_OD4KHZ)
				TM9->TM9_OD6KHZ := -1
				TM9->TM9_OD8KHZ := -1
				//Limiar - OE
				TM9->TM9_OE025K := -1
				TM9->TM9_OE05KH := LimiarDB(M2_OE05KH)
				TM9->TM9_OE1KHZ := LimiarDB(M2_OE1KHZ)
				TM9->TM9_OE2KHZ := LimiarDB(M2_OE2KHZ)
				TM9->TM9_OE3KHZ := LimiarDB(M2_OE3KHZ)
				TM9->TM9_OE4KHZ := LimiarDB(M2_OE4KHZ)
				TM9->TM9_OE6KHZ := -1
				TM9->TM9_OE8KHZ := -1

				//Mascaramento - OD
				TM9->TM9_ODMA25 := -1
				TM9->TM9_ODMA50 := LimiarDB(M2_ODMA50)
				TM9->TM9_ODMA10 := LimiarDB(M2_ODMA10)
				TM9->TM9_ODMA20 := LimiarDB(M2_ODMA20)
				TM9->TM9_ODMA30 := LimiarDB(M2_ODMA30)
				TM9->TM9_ODMA40 := LimiarDB(M2_ODMA40)
				TM9->TM9_ODMA60 := -1
				TM9->TM9_ODMA80 := -1
				//Mascaramento - OE
				TM9->TM9_OEMA25 := -1
				TM9->TM9_OEMA50 := LimiarDB(M2_OEMA50)
				TM9->TM9_OEMA10 := LimiarDB(M2_OEMA10)
				TM9->TM9_OEMA20 := LimiarDB(M2_OEMA20)
				TM9->TM9_OEMA30 := LimiarDB(M2_OEMA30)
				TM9->TM9_OEMA40 := LimiarDB(M2_OEMA40)
				TM9->TM9_OEMA60 := -1
				TM9->TM9_OEMA80 := -1

				//Origem Anormalidade
				TM9->TM9_ODORIG := M->TM9_ODORIG
				TM9->TM9_OEORIG := M->TM9_OEORIG

				//Resultados
				TM9->TM9_ODCLIN := M->TM9_ODCLIN
				TM9->TM9_OECLIN := M->TM9_OECLIN

				TM9->TM9_ODINSS := M->TM9_ODINSS
				TM9->TM9_OEINSS := M->TM9_OEINSS
				//Referencial
				TM9->TM9_ODREFE := M->TM9_ODREFE
				TM9->TM9_OEREFE := M->TM9_OEREFE
				//Portaria 19
				TM9->TM9_ODRESU := M->TM9_ODRESU
				TM9->TM9_OERESU := M->TM9_OERESU

				//Medias
				TM9->TM9_ODMED5 := If( Empty(M->TM9_ODMED5), 999.99, STRPONTO(M->TM9_ODMED5) )
				TM9->TM9_ODMED3 := If( Empty(M->TM9_ODMED3), 999.99, STRPONTO(M->TM9_ODMED3) )
				TM9->TM9_OEMED5 := If( Empty(M->TM9_OEMED5), 999.99, STRPONTO(M->TM9_OEMED5) )
				TM9->TM9_OEMED3 := If( Empty(M->TM9_OEMED3), 999.99, STRPONTO(M->TM9_OEMED3) )

				MSUNLOCK("TM9")
		Endif

		If !lResul  //Se nenhuma informacao da Via Aerea ou Ossea foi prenchida
			If 	!Empty(M->TM9_ODMEAT) .Or.;
				!Empty(M->TM9_OEMEAT) .Or.;
				!Empty(M->TM9_ODRECF) .Or.;
				!Empty(M->TM9_ODREMO) .Or.;
				!Empty(M->TM9_ODREDI) .Or.;
				!Empty(M->TM9_OERECF) .Or.;
				!Empty(M->TM9_OEREMO) .Or.;
				!Empty(M->TM9_OEREDI)

					lResul := .T.

					DbSelectArea("TM9")
					dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
					If !dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "1" )
						RecLock("TM9",.T.)
						TM9->TM9_FILIAL := cFilTM9
						TM9->TM9_NUMFIC := cNUMFIC
						TM9->TM9_DTPROG := dDTPROG
						TM9->TM9_HRPROG := cHRPROG
						TM9->TM9_EXAME  := cEXAME
					Else
						RecLock("TM9",.F.) // altera
					Endif

					TM9->TM9_INDVIA := "1"

					//------- Outras Informacoes  --------//
					TM9->TM9_REPOUS := M->TM9_REPOUS
					//Equipamento
					TM9->TM9_EQPTO  := M->TM9_EQPTO
					TM9->TM9_DTAFER := M->TM9_DTAFER
					TM9->TM9_DTCALI := M->TM9_DTCALI
					TM9->TM9_USURES := M->TM9_USURES
					//Meatoscopia
					TM9->TM9_ODMEAT := M->TM9_ODMEAT
					TM9->TM9_OEMEAT := M->TM9_OEMEAT
					//Logoaudiometria
					TM9->TM9_ODRECF := M->TM9_ODRECF
					TM9->TM9_ODREMO := M->TM9_ODREMO
					TM9->TM9_ODREDI := M->TM9_ODREDI
					TM9->TM9_OERECF := M->TM9_OERECF
					TM9->TM9_OEREMO := M->TM9_OEREMO
					TM9->TM9_OEREDI := M->TM9_OEREDI
					If lUpdMdt87
						TM9->TM9_ODLMIN := M->TM9_ODLMIN
						TM9->TM9_ODLMAX := M->TM9_ODLMAX
						TM9->TM9_OELMIN := M->TM9_OELMIN
						TM9->TM9_OELMAX := M->TM9_OELMAX
						TM9->TM9_ODMSRT := M->TM9_ODMSRT
						TM9->TM9_ODSDT  := M->TM9_ODSDT
						TM9->TM9_ODMIRF := M->TM9_ODMIRF
						TM9->TM9_OEMSRT := M->TM9_OEMSRT
						TM9->TM9_OESDT  := M->TM9_OESDT
						TM9->TM9_OEMIRF := M->TM9_OEMIRF
					Endif
					//----------------------------------//

					//Limiar - OD
					TM9->TM9_OD025K := LimiarDB(M->TM9_OD025K)
					TM9->TM9_OD05KH := LimiarDB(M->TM9_OD05KH)
					TM9->TM9_OD1KHZ := LimiarDB(M->TM9_OD1KHZ)
					TM9->TM9_OD2KHZ := LimiarDB(M->TM9_OD2KHZ)
					TM9->TM9_OD3KHZ := LimiarDB(M->TM9_OD3KHZ)
					TM9->TM9_OD4KHZ := LimiarDB(M->TM9_OD4KHZ)
					TM9->TM9_OD6KHZ := LimiarDB(M->TM9_OD6KHZ)
					TM9->TM9_OD8KHZ := LimiarDB(M->TM9_OD8KHZ)
					//Limiar - OE
					TM9->TM9_OE025K := LimiarDB(M->TM9_OE025K)
					TM9->TM9_OE05KH := LimiarDB(M->TM9_OE05KH)
					TM9->TM9_OE1KHZ := LimiarDB(M->TM9_OE1KHZ)
					TM9->TM9_OE2KHZ := LimiarDB(M->TM9_OE2KHZ)
					TM9->TM9_OE3KHZ := LimiarDB(M->TM9_OE3KHZ)
					TM9->TM9_OE4KHZ := LimiarDB(M->TM9_OE4KHZ)
					TM9->TM9_OE6KHZ := LimiarDB(M->TM9_OE6KHZ)
					TM9->TM9_OE8KHZ := LimiarDB(M->TM9_OE8KHZ)

					//Mascaramento - OD
					TM9->TM9_ODMA25 := LimiarDB(M->TM9_ODMA25)
					TM9->TM9_ODMA50 := LimiarDB(M->TM9_ODMA50)
					TM9->TM9_ODMA10 := LimiarDB(M->TM9_ODMA10)
					TM9->TM9_ODMA20 := LimiarDB(M->TM9_ODMA20)
					TM9->TM9_ODMA30 := LimiarDB(M->TM9_ODMA30)
					TM9->TM9_ODMA40 := LimiarDB(M->TM9_ODMA40)
					TM9->TM9_ODMA60 := LimiarDB(M->TM9_ODMA60)
					TM9->TM9_ODMA80 := LimiarDB(M->TM9_ODMA80)
					//Mascaramento - OE
					TM9->TM9_OEMA25 := LimiarDB(M->TM9_OEMA25)
					TM9->TM9_OEMA50 := LimiarDB(M->TM9_OEMA50)
					TM9->TM9_OEMA10 := LimiarDB(M->TM9_OEMA10)
					TM9->TM9_OEMA20 := LimiarDB(M->TM9_OEMA20)
					TM9->TM9_OEMA30 := LimiarDB(M->TM9_OEMA30)
					TM9->TM9_OEMA40 := LimiarDB(M->TM9_OEMA40)
					TM9->TM9_OEMA60 := LimiarDB(M->TM9_OEMA60)
					TM9->TM9_OEMA80 := LimiarDB(M->TM9_OEMA80)

					//Origem Anormalidade
					TM9->TM9_ODORIG := M->TM9_ODORIG
					TM9->TM9_OEORIG := M->TM9_OEORIG

					//Resultados
					TM9->TM9_ODCLIN := M->TM9_ODCLIN
					TM9->TM9_OECLIN := M->TM9_OECLIN

					TM9->TM9_ODINSS := M->TM9_ODINSS
					TM9->TM9_OEINSS := M->TM9_OEINSS
					//Referencial
					TM9->TM9_ODREFE := M->TM9_ODREFE
					TM9->TM9_OEREFE := M->TM9_OEREFE
					//Portaria 19
					TM9->TM9_ODRESU := M->TM9_ODRESU
					TM9->TM9_OERESU := M->TM9_OERESU

					//Medias
					TM9->TM9_ODMED5 := If( Empty(M->TM9_ODMED5), 999.99, STRPONTO(M->TM9_ODMED5) )
					TM9->TM9_ODMED3 := If( Empty(M->TM9_ODMED3), 999.99, STRPONTO(M->TM9_ODMED3) )
					TM9->TM9_OEMED5 := If( Empty(M->TM9_OEMED5), 999.99, STRPONTO(M->TM9_OEMED5) )
					TM9->TM9_OEMED3 := If( Empty(M->TM9_OEMED3), 999.99, STRPONTO(M->TM9_OEMED3) )

					MSUNLOCK("TM9")

			Endif
		Endif

		If lResul

			//Altera data de Resultado
			RestArea(aAreaTM5)

			_ALTDTRES(.T.)

			Do Case
				Case Substr(M->TM9_ODREFE,1,1) == "2"
					If Substr(M->TM9_ODRESU,1,1) == "2"   .Or.;
					Substr(M->TM9_ODRESU,1,1) == "4"   .Or.;
					Substr(M->TM9_ODRESU,1,1) == "5"
							lPCA := .T.
					EndIf
				Case Substr(M->TM9_OEREFE,1,1) == "2"
					If Substr(M->TM9_OERESU,1,1) == "2"   .Or.;
					Substr(M->TM9_OERESU,1,1) == "4"   .Or.;
					Substr(M->TM9_OERESU,1,1) == "5"
							lPCA := .T.
					EndIf
			EndCase

			If lPCA
				If MsgYesNo(STR0068) //"Deseja ir à tela de Programa de Saúde?"
					cPrograma := "MDTA110"
					MDTA110A()
					cPrograma := "MDTA120"
				EndIf
			EndIf

		Endif

	Endif

Return .T.
//-------------------------------------------------------------------
/*/{Protheus.doc} MDT120AUDIO
Visualizar,Incluir,Alterar exames audiometria
@type function
@author  Inacio Luiz Kolling
@since 02/02/2000
@param cAlias, caracter, alias principal da rotina
@param nReg, numeric, recno do registro posicionado
@param nOpcx, numeric, operação selecionada
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDT120AUDIO(cAlias,nReg,nOpcx)

	Local nli    := 0,nnx
	Local nsize  := 0
	Local nsize1 := 0
	Local nLinhehe
	Local lPCA := .F.	//Denota se a pergunta "Deseja ir à tela de Programa de Saúde?" sera' feita
	Local oMenu3
	Local cUsdNor := ""
	Local oMenu
	Local oPnl
	Local cODRela := GetSx3Cache( "TM9_ODORIG", "X3_RELACAO")
	Local cOERela := GetSx3Cache( "TM9_OEORIG", "X3_RELACAO")

	Private aButtons := {}
	Aadd(aButtons,{"HISTORIC" ,{||RESANT120()},STR0105,STR0106})//"Resultados Anteriores", "Resultados"
	Private lTipoPer := .F.
	Private lTemCali := .F.
	Private lTemAfer := .F.
	Private lTemOrig := .F.
	Private oCbx,oCbx1,oCbx2
	Private oCheck01,oCheck02,oCheck03,oCheck04,oCheck05,oCheck06,oCheck07,oCheck08
	Private oCheck11,oCheck12,oCheck13,oCheck14,oCheck15,oCheck16,oCheck17,oCheck18
	Private asMenu, oCalcResult

	If asMenu == NIL
		asMenu := NGRIGHTCLICK("MDTA120")
	EndIf

	aTipoPerda := {"1-"+STR0137,"2-"+STR0138,"3-"+STR0139,"4-"+STR0140," "}//"Condutiva"##"Sensorioneural"##"Mista"##"Central"

	aOrAnormal := MDTCbox("TM9_ODORIG"," ",1) //Carrega opcoes do combo TM9_ODORIG

	aRefer := {"1-"+STR0022,"2-"+STR0023} //"1-Sim"###"2-Nao"

	aVia   := {"1-"+STR0024,"2-"+STR0025} //"1-Via Aerea"###"2-Via Ossea"

	Private aResul := MDTCbox("TM9_ODRESU"," ",1)

	For nNX := 1 To Len(aResul)
		aResul[nNX] := Substr(aResul[nNX],1,1)+"-"+Substr(aResul[nNX],3)
	Next nNX

	Private aSeqOE := {}
	Private aSeqOD := {}
	Private aViaOE := {}
	Private aViaOD := {}

	aDcibs := {"-10-"+STR0136,"-05-"+STR0136,"0-"+STR0136,"05-"+STR0136,"10-"+STR0136,"15-"+STR0136,"20-"+STR0136,"25-"+STR0136,;
			"30-"+STR0136,"35-"+STR0136,"40-"+STR0136,"45-"+STR0136,"50-"+STR0136,;
			"55-"+STR0136,"60-"+STR0136,"65-"+STR0136,"70-"+STR0136,"75-"+STR0136,;
			"80-"+STR0136,"85-"+STR0136,"90-"+STR0136,"95-"+STR0136,"100-"+STR0136,;
			"105-"+STR0136,"110-"+STR0136,"115-"+STR0136,"120-"+STR0136,"125-"+STR0136,"130-"+STR0136}


	aDICBS := {-10,-5,0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,;
			80,85,90,95,100,105,110,115,120,125,130}

	//--<><><><><><>-- Verifica se o campo 0,25 é usado

	Private l025od := .T.
	Private l025oe := .T.

	cUsdNor := GetSx3Cache( "TNC_HRACID", "X3_USADO" )

	l025od := (GetSx3Cache( "TM9_OD025K", "X3_USADO" ) == cUsdNor)
	l025oe := (GetSx3Cache( "TM9_OE025K", "X3_USADO" ) == cUsdNor)

	//--<><><><><><>--

	// Merluzzi   1=Grau 0;2=Grau 1;3=Grau 2;4=Grau 3;5=Grau 4;6=Grau 5;7=Grau 6;8=Grau 7
	// Davis      1=Normal;2=Leve;3=Moderada;4=Severa;5=Profunda
	// Davis Adp. 1=Normal;2=Leve;3=Moderada;4=Acentuada;5=Severa;6=Profunda

	If X3USO( GetSx3Cache( "TM9_ODMERL", "X3_USADO") )
		If X3USO( GetSx3Cache( "TM9_OEMERL", "X3_USADO") )
			nli += 1.2
			nsize += 1.8
			nsize1 += 15.9
			lMerluzz := .T.
		Endif
	Endif

	If X3USO( GetSx3Cache( "TM9_ODTIPE", "X3_USADO") )
		If X3USO( GetSx3Cache( "TM9_OETIPE", "X3_USADO") )
			nli += 1.2
			nsize += 1.8
			nsize1 += 15.9
			lTipoPer := .T.
		Endif
	Endif

	lTemAfer := .T.
	lTemCali := .T.
	lTemOrig := .T.
	nli += 1
	nsize += 2
	nsize1 += 11.9

	M->TM9_EQPTO  := SPACE(LEN(TM9->TM9_EQPTO))
	M->TM9_NOEQTO := SPACE(30)
	M->TM9_ODREFE := aRefer[2]
	M->TM9_ODMEAT := SPACE(LEN(TM9->TM9_ODMEAT))
	M->TM9_OD025K := SPACE(3)
	M->TM9_OD05KH := SPACE(3)
	M->TM9_OD1KHZ := SPACE(3)
	M->TM9_OD2KHZ := SPACE(3)
	M->TM9_OD3KHZ := SPACE(3)
	M->TM9_OD4KHZ := SPACE(3)
	M->TM9_OD6KHZ := SPACE(3)
	M->TM9_OD8KHZ := SPACE(3)
	M->TM9_ODRESU := aResul[1]
	M->TM9_OEREFE := aRefer[2]
	M->TM9_OEMEAT := SPACE(LEN(TM9->TM9_OEMEAT))
	M->TM9_OE05KH := SPACE(3)
	M->TM9_OE025K := SPACE(3)
	M->TM9_OE1KHZ := SPACE(3)
	M->TM9_OE2KHZ := SPACE(3)
	M->TM9_OE3KHZ := SPACE(3)
	M->TM9_OE4KHZ := SPACE(3)
	M->TM9_OE6KHZ := SPACE(3)
	M->TM9_OE8KHZ := SPACE(3)
	M->TM9_OERESU := aResul[1]
	M->TM9_REPOUS := 0
	M->TM9_USURES := If(!MDTWHNSBI(),MDTUSRLOG(1),Space(12))
	M->TM9_NOMUSU := Space(20)
	M->TM9_ODRECF := 0
	M->TM9_ODREMO := 0
	M->TM9_ODREDI := 0
	M->TM9_OERECF := 0
	M->TM9_OEREMO := 0
	M->TM9_OEREDI := 0
	M->TM9_INDVIA := aVia[1]
	M->TM9_DTCALI := cTod("  /  /    ")
	M->TM9_DTAFER := cTod("  /  /    ")
	M->TM9_ODORIG := aOrAnormal[1]
	M->TM9_OEORIG := aOrAnormal[1]
	M->TM9_ODTIPE := aTipoPerda[5]
	M->TM9_OETIPE := aTipoPerda[5]

	M->TM9_AOD025 := .F.
	M->TM9_AOD050 := .F.
	M->TM9_AOD100 := .F.
	M->TM9_AOD200 := .F.
	M->TM9_AOD300 := .F.
	M->TM9_AOD400 := .F.
	M->TM9_AOD600 := .F.
	M->TM9_AOD800 := .F.

	M->TM9_AOE025 := .F.
	M->TM9_AOE050 := .F.
	M->TM9_AOE100 := .F.
	M->TM9_AOE200 := .F.
	M->TM9_AOE300 := .F.
	M->TM9_AOE400 := .F.
	M->TM9_AOE600 := .F.
	M->TM9_AOE800 := .F.

	If "1/2/3" $ cODRela
		M->TM9_ODORIG := aOrAnormal[ Val(AllTrim(cODRela)) ]
	Endif

	If "1/2" $ cOERela
		M->TM9_OEORIG := aOrAnormal[ Val(AllTrim(cOERela)) ]
	Endif

	dbSelectArea( "TM9" )
	dbSetOrder( 3 )
	If dbSeek( xFilial("TM9") + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME )

			M->TM9_AOD025 := If(TM9->TM9_AOD025=="1",.T.,.F.)
			M->TM9_AOD050 := If(TM9->TM9_AOD050=="1",.T.,.F.)
			M->TM9_AOD100 := If(TM9->TM9_AOD100=="1",.T.,.F.)
			M->TM9_AOD200 := If(TM9->TM9_AOD200=="1",.T.,.F.)
			M->TM9_AOD300 := If(TM9->TM9_AOD300=="1",.T.,.F.)
			M->TM9_AOD400 := If(TM9->TM9_AOD400=="1",.T.,.F.)
			M->TM9_AOD600 := If(TM9->TM9_AOD600=="1",.T.,.F.)
			M->TM9_AOD800 := If(TM9->TM9_AOD800=="1",.T.,.F.)

			M->TM9_AOE025 := If(TM9->TM9_AOE025=="1",.T.,.F.)
			M->TM9_AOE050 := If(TM9->TM9_AOE050=="1",.T.,.F.)
			M->TM9_AOE100 := If(TM9->TM9_AOE100=="1",.T.,.F.)
			M->TM9_AOE200 := If(TM9->TM9_AOE200=="1",.T.,.F.)
			M->TM9_AOE300 := If(TM9->TM9_AOE300=="1",.T.,.F.)
			M->TM9_AOE400 := If(TM9->TM9_AOE400=="1",.T.,.F.)
			M->TM9_AOE600 := If(TM9->TM9_AOE600=="1",.T.,.F.)
			M->TM9_AOE800 := If(TM9->TM9_AOE800=="1",.T.,.F.)

		M->TM9_EQPTO  := TM9->TM9_EQPTO
		M->TM9_ODMEAT := TM9->TM9_ODMEAT
		M->TM9_ODREFE := aRefer[VAL(TM9->TM9_ODREFE)]
		M->TM9_OD025K := StrA120(TM9->TM9_OD025K)
		M->TM9_OD05KH := StrA120(TM9->TM9_OD05KH)
		M->TM9_OD1KHZ := StrA120(TM9->TM9_OD1KHZ)
		M->TM9_OD2KHZ := StrA120(TM9->TM9_OD2KHZ)
		M->TM9_OD3KHZ := StrA120(TM9->TM9_OD3KHZ)
		M->TM9_OD4KHZ := StrA120(TM9->TM9_OD4KHZ)
		M->TM9_OD6KHZ := StrA120(TM9->TM9_OD6KHZ)
		M->TM9_OD8KHZ := StrA120(TM9->TM9_OD8KHZ)
		M->TM9_ODRESU := aResul[VAL(TM9->TM9_ODRESU)]
		M->TM9_OEMEAT := TM9->TM9_OEMEAT
		M->TM9_OEREFE := aRefer[VAL(TM9->TM9_OEREFE)]
		M->TM9_OE025K := StrA120(TM9->TM9_OE025K)
		M->TM9_OE05KH := StrA120(TM9->TM9_OE05KH)
		M->TM9_OE1KHZ := StrA120(TM9->TM9_OE1KHZ)
		M->TM9_OE2KHZ := StrA120(TM9->TM9_OE2KHZ)
		M->TM9_OE3KHZ := StrA120(TM9->TM9_OE3KHZ)
		M->TM9_OE4KHZ := StrA120(TM9->TM9_OE4KHZ)
		M->TM9_OE6KHZ := StrA120(TM9->TM9_OE6KHZ)
		M->TM9_OE8KHZ := StrA120(TM9->TM9_OE8KHZ)
		M->TM9_OERESU := aResul[VAL(TM9->TM9_OERESU)]
		M->TM9_REPOUS := TM9->TM9_REPOUS
		M->TM9_USURES := TM9->TM9_USURES
		M->TM9_ODRECF := TM9->TM9_ODRECF
		M->TM9_ODREMO := TM9->TM9_ODREMO
		M->TM9_ODREDI := TM9->TM9_ODREDI
		M->TM9_OERECF := TM9->TM9_OERECF
		M->TM9_OEREMO := TM9->TM9_OEREMO
		M->TM9_OEREDI := TM9->TM9_OEREDI
		M->TM9_INDVIA := aVia[VAL(TM9->TM9_INDVIA)]
		If lTipoPer
			If !Empty(TM9->TM9_ODTIPE)
				M->TM9_ODTIPE := aTipoPerda[VAL(TM9->TM9_ODTIPE)]
			Endif
			If !Empty(TM9->TM9_OETIPE)
				M->TM9_OETIPE := aTipoPerda[VAL(TM9->TM9_OETIPE)]
			Endif
		Endif
		M->TM9_DTAFER := TM9->TM9_DTAFER
		M->TM9_DTCALI := TM9->TM9_DTCALI
		cIndArray := If( Empty(TM9->TM9_ODORIG), "1", TM9->TM9_ODORIG )
		M->TM9_ODORIG := aOrAnormal[VAL(cIndArray)]
		cIndArray := If( Empty(TM9->TM9_OEORIG), "1", TM9->TM9_OEORIG )
		M->TM9_OEORIG := aOrAnormal[VAL(cIndArray)]
	Else

		//Inclusao
		If !Empty( cODRela )
			lIncTmp   := Inclui
			Inclui    := .T.
			cIndRelac := InitPad( cODRela )
			Inclui    := lIncTmp
			If Valtype(cIndRelac) == "C"
				nIndRelac := Val(cIndRelac)
				If nIndRelac == 1 .Or. nIndRelac == 2
					M->TM9_ODORIG := aOrAnormal[nIndRelac]
				Endif
			Endif
		Endif
		If !Empty( cOERela )
			lIncTmp   := Inclui
			Inclui    := .T.
			cIndRelac := InitPad( cOERela )
			Inclui    := lIncTmp
			If Valtype(cIndRelac) == "C"
				nIndRelac := Val(cIndRelac)
				If nIndRelac == 1 .Or. nIndRelac == 2
					M->TM9_OEORIG := aOrAnormal[nIndRelac]
				Endif
			Endif
		Endif

	Endif

	VERNOEQTO()
	VERNOUSUA()
	nOPCA := 0

	DEFINE MSDIALOG oDlg3 TITLE OemToAnsi(cCadastro) From 6.5,0 To 34+nsize,97 OF oMainWnd

	oPnl := TPanel():New( , , , oDlg3 , , , , , , , , .F. , .F. )
		oPnl:Align := CONTROL_ALIGN_ALLCLIENT

	@ 0.3,0.5  SAY OemToAnsi(STR0031) Of oPnl//"Equipamento"

	@ 0.3,5    MSGET M->TM9_EQPTO  SIZE 30,10 Picture "@!"  Valid ExistCpo("TM7",M->TM9_EQPTO);
			.And. VERNOEQTO() F3 "TM7" HasButton Of oPnl

	@ 0.3,10   SAY OemToAnsi(STR0021)  Of oPnl//"Nome"
	@ 0.3,12.5   MSGET M->TM9_NOEQTO picture "@!" SIZE 120,10 When .F. Of oPnl

	@ 0.3,28.5   SAY OemToAnsi(STR0044) Of oPnl //"Calibracao"
	@ 0.3,33     MSGET M->TM9_DTCALI picture "99/99/99" SIZE 45,08 When .T. HasButton Of oPnl

	@ 0.3,38.5   SAY OemToAnsi(STR0045)  Of oPnl//"Afericao"
	@ 0.3,42   MSGET M->TM9_DTAFER picture "99/99/99" SIZE 45,08 When .T. HasButton Of oPnl

	@ 1.3,0.5  SAY OemToAnsi(STR0034)  Of oPnl//"Responsavel"
	@ 1.3,5    MSGET M->TM9_USURES SIZE 30,10 Picture "@!"  Valid ExistCpo("TMK",M->TM9_USURES) ;
			.And. VERNOUSUA() F3 "TMK" HasButton Of oPnl

	@ 1.3,10   SAY OemToAnsi(STR0021) Of oPnl //"Nome"
	@ 1.3,12.5 MSGET M->TM9_NOMUSU picture "@!" SIZE 120,10 When .F. Of oPnl

	@ 1.3,28.5 SAY OemToAnsi(STR0033) Of oPnl //"Hrs Repouso"
	@ 1.3,33   MSGET M->TM9_REPOUS  SIZE 20,10 Picture "99" Of oPnl

	@ 1.3,37   SAY OemToAnsi(STR0032) Of oPnl //"Via Conducao"
	@ 1.3,42   COMBOBOX oCbx VAR M->TM9_INDVIA ITEMS aVia SIZE 45,40 OF oPnl

	@ 2.1,0 TO nli+12,23 LABEL Capital(STR0035) OF oPnl Color CLR_HRED //"ORELHA DIREITA"

	@ 2.8,1   SAY OemToAnsi(STR0036) OF oPnl //"Meatoscopia"
	@ 2.8,5   MSGET M->TM9_ODMEAT picture "@!" Valid CheckSX3("TM9_ODMEAT") ;
			SIZE 65,10 OF oPnl

	@ 2.8,15  SAY OemToAnsi(STR0037) OF oPnl //"Referencia"
	@ 2.8,19  COMBOBOX oCbx VAR M->TM9_ODREFE ITEMS aRefer SIZE 30,40 OF oPnl

	If l025od
		@ 3.8,1.7 SAY OemToAnsi("250") OF oPnl
		@ 3.8,5   MSGET M->TM9_OD025K SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OD025K) OF oPnl
	Endif

	@ 4.8,1.7 SAY OemToAnsi("500") OF oPnl
	@ 4.8,5   MSGET M->TM9_OD05KH SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OD05KH) OF oPnl

	@ 5.8,1   SAY OemToAnsi("1.000") OF oPnl
	@ 5.8,5   MSGET M->TM9_OD1KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OD1KHZ)  OF oPnl

	@ 06.8,1  SAY OemToAnsi("2.000") OF oPnl
	@ 06.8,5  MSGET M->TM9_OD2KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OD2KHZ)  OF oPnl

	@ 07.8,1  SAY OemToAnsi("3.000") OF oPnl
	@ 07.8,5  MSGET M->TM9_OD3KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OD3KHZ)  OF oPnl

	@ 08.8,1  SAY OemToAnsi("4.000") OF oPnl
	@ 08.8,5  MSGET M->TM9_OD4KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OD4KHZ)  OF oPnl

	@ 09.8,1  SAY OemToAnsi("6.000") OF oPnl
	@ 09.8,5  MSGET M->TM9_OD6KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OD6KHZ)  OF oPnl

	@ 10.8,1  SAY OemToAnsi("8.000") OF oPnl
	@ 10.8,5  MSGET M->TM9_OD8KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OD8KHZ)  OF oPnl

	@ 12.4,1  SAY OemToAnsi(STR0011)  OF oPnl//"Resultado"
	@ 12.9,1  SAY OemToAnsi(STR0088)  OF oPnl //"Portaria 19"
	@ 12.5,5  COMBOBOX oCbx VAR M->TM9_ODRESU ITEMS aResul SIZE 110,40 OF oPnl // PIXEL

	If lTemOrig
		@ 13.9,0.8  SAY OemToAnsi(STR0065) OF oPnl //"Origem"
		@ 14.4,0.8  SAY OemToAnsi(STR0066) OF oPnl //"Anormalidade"
		@ 14,5  COMBOBOX oCbx1 VAR M->TM9_ODORIG ITEMS aOrAnormal SIZE 60,40 OF oPnl
	Endif

	If l025od
		@049,72 Checkbox oCheck01 Var M->TM9_AOD025 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	Endif
	@062,72 Checkbox oCheck02 Var M->TM9_AOD050 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@075,72 Checkbox oCheck03 Var M->TM9_AOD100 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@088,72 Checkbox oCheck04 Var M->TM9_AOD200 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@101,72 Checkbox oCheck05 Var M->TM9_AOD300 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@114,72 Checkbox oCheck06 Var M->TM9_AOD400 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@127,72 Checkbox oCheck07 Var M->TM9_AOD600 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@140,72 Checkbox oCheck08 Var M->TM9_AOD800 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"

	@ 4.8,15.8  SAY OemToAnsi(STR0038) OF oPnl //"Rec Fala"
	@ 4.8,19  MSGET M->TM9_ODRECF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODRECF") OF oPnl

	@ 5.8,15.5 SAY OemToAnsi(STR0039) OF oPnl //"Qt Monos"
	@ 5.8,19  MSGET M->TM9_ODREMO SIZE 20,10 picture "999" Valid CheckSX3("TM9_ODREMO") OF oPnl

	@ 6.8,15.5  SAY OemToAnsi(STR0040) OF oPnl //"Qt Dissil"
	@ 6.8,19  MSGET M->TM9_ODREDI SIZE 20,10 picture "999" Valid CheckSX3("TM9_ODREDI") OF oPnl

	// ORELHA ESQUERDA
	@ 2.1,24 TO nli+12,47 LABEL Capital(STR0041) OF oPnl Color CLR_HBLUE //"ORELHA ESQUERDA"

	@ 2.8,25   SAY OemToAnsi(STR0036) OF oPnl //"Meatoscopia"
	@ 2.8,29   MSGET M->TM9_OEMEAT picture "@!" Valid CheckSX3("TM9_OEMEAT") ;
			SIZE 65,10 OF oPnl

	@ 2.8,39   SAY OemToAnsi(STR0037) OF oPnl //"Referencia"
	@ 2.8,43   COMBOBOX oCbx VAR M->TM9_OEREFE ITEMS aRefer SIZE 30,40 OF oPnl

	If l025oe
		@ 3.8,25.7 SAY OemToAnsi("250") OF oPnl
		@ 3.8,29   MSGET M->TM9_OE025K SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OE025K) OF oPnl
	Endif

	@ 4.8,25.7 SAY OemToAnsi("500") OF oPnl
	@ 4.8,29   MSGEt M->TM9_OE05KH SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OE05KH) OF oPnl

	@ 5.8,25   SAY OemToAnsi("1.000") OF oPnl
	@ 5.8,29   MSGET M->TM9_OE1KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OE1KHZ) OF oPnl

	@ 6.8,25   SAY OemToAnsi("2.000") OF oPnl
	@ 6.8,29   MSGET M->TM9_OE2KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OE2KHZ) OF oPnl

	@ 07.8,25  SAY OemToAnsi("3.000") OF oPnl
	@ 07.8,29  MSGET M->TM9_OE3KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OE3KHZ)  OF oPnl

	@ 08.8,25  SAY OemToAnsi("4.000") OF oPnl
	@ 08.8,29  MSGET M->TM9_OE4KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OE4KHZ)  OF oPnl

	@ 09.8,25  SAY OemToAnsi("6.000") OF oPnl
	@ 09.8,29  MSGET M->TM9_OE6KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OE6KHZ)  OF oPnl

	@ 10.8,25  SAY OemToAnsi("8.000") OF oPnl
	@ 10.8,29  MSGET M->TM9_OE8KHZ SIZE 30,10 Picture "999" Valid ChkDecib(M->TM9_OE8KHZ) OF oPnl


	@ 12.4,25  SAY OemToAnsi(STR0011) OF oPnl //"Resultado"
	@ 12.9,25  SAY OemToAnsi(STR0088) OF oPnl //"Portaria 19"
	@ 12.5,29  COMBOBOX oCbx VAR M->TM9_OERESU ITEMS aResul SIZE 110,40 OF oPnl

	If lTemOrig
		@ 13.9,24.8  SAY OemToAnsi(STR0065)OF oPnl //"Origem"
		@ 14.4,24.8  SAY OemToAnsi(STR0066)OF oPnl //"Anormalidade"
		@ 14,29  COMBOBOX oCbx2 VAR M->TM9_OEORIG ITEMS aOrAnormal SIZE 60,40 OF oPnl
	Endif

	If l025oe
		@049,264 Checkbox oCheck11 Var M->TM9_AOE025 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	Endif
	@062,264 Checkbox oCheck12 Var M->TM9_AOE050 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@075,264 Checkbox oCheck13 Var M->TM9_AOE100 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@088,264 Checkbox oCheck14 Var M->TM9_AOE200 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@101,264 Checkbox oCheck15 Var M->TM9_AOE300 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@114,264 Checkbox oCheck16 Var M->TM9_AOE400 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@127,264 Checkbox oCheck17 Var M->TM9_AOE600 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"
	@140,264 Checkbox oCheck18 Var M->TM9_AOE800 Prompt OemToAnsi(STR0141) Size 60,7 OF oPnl//"Ausente"

	@ 3.8,39.8   SAY OemToAnsi(STR0038) OF oPnl //"Rec Fala"
	@ 3.8,43   MSGET M->TM9_OERECF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OERECF") OF oPnl

	@ 4.8,39.5 SAY OemToAnsi(STR0039) OF oPnl //"Qt Monos"
	@ 4.8,43   MSGET M->TM9_OEREMO SIZE 20,10 picture "999" Valid CheckSX3("TM9_OEREMO") OF oPnl

	@ 5.8,39.5 SAY OemToAnsi(STR0040) OF oPnl //"Qt Dissil"
	@ 5.8,43   MSGET M->TM9_OEREDI SIZE 20,10 picture "999" Valid CheckSX3("TM9_OEREDI") OF oPnl

	@ 178+nsize1,155 BUTTON oCalcResult Prompt STR0067  SIZE 60,12 PIXEL ACTION RESULT120() OF oPnl //"&Calcular Resultados"

	NgPopUp(asMenu,@oMenu3)
	oPnl:bRClicked:= { |o,x,y| oMenu3:Activate(x,y,oPnl)}

	If nOpcx == 2
		oPnl:Disable()
	EndIf

	ACTIVATE MSDIALOG oDlg3 ON INIT EnchoiceBar(oDlg3,{||nopca:=1,If(!NGC0TUDOK(),nOPCAO := 0,oDlg3:End())},{||oDlg3:End()},,aButtons) CENTERED

	If nOPCA == 1 .And. nOpcx <> 2

		If ExistBlock("VMDT120P")
			ExecBlock("VMDT120P",.F.,.F.)
		Endif

	dbSelectArea( "TM9" )
	dbSetOrder( 3 )
	If !dbSeek( xFilial("TM9") + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME )
		RecLock("TM9",.T.)
		TM9->TM9_FILIAL := xFilial("TM9")
		TM9->TM9_NUMFIC := cNUMFIC
		TM9->TM9_DTPROG := dDTPROG
		TM9->TM9_HRPROG := cHRPROG
		TM9->TM9_EXAME  := cEXAME
	Else
		RecLock("TM9",.F.) // altera
	Endif

	TM9->TM9_EQPTO  := M->TM9_EQPTO
	TM9->TM9_ODMEAT := M->TM9_ODMEAT
	TM9->TM9_ODREFE := M->TM9_ODREFE
	TM9->TM9_OD025K := If(Empty(M->TM9_OD025K),-1,Val(M->TM9_OD025K))
	TM9->TM9_OD05KH := If(Empty(M->TM9_OD05KH),-1,Val(M->TM9_OD05KH))
	TM9->TM9_OD1KHZ := If(Empty(M->TM9_OD1KHZ),-1,Val(M->TM9_OD1KHZ))
	TM9->TM9_OD2KHZ := If(Empty(M->TM9_OD2KHZ),-1,Val(M->TM9_OD2KHZ))
	TM9->TM9_OD3KHZ := If(Empty(M->TM9_OD3KHZ),-1,Val(M->TM9_OD3KHZ))
	TM9->TM9_OD4KHZ := If(Empty(M->TM9_OD4KHZ),-1,Val(M->TM9_OD4KHZ))
	TM9->TM9_OD6KHZ := If(Empty(M->TM9_OD6KHZ),-1,Val(M->TM9_OD6KHZ))
	TM9->TM9_OD8KHZ := If(Empty(M->TM9_OD8KHZ),-1,Val(M->TM9_OD8KHZ))
	TM9->TM9_ODRESU := M->TM9_ODRESU
	TM9->TM9_OEMEAT := M->TM9_OEMEAT
	TM9->TM9_OEREFE := M->TM9_OEREFE
	TM9->TM9_OE025K := If(Empty(M->TM9_OE025K),-1,Val(M->TM9_OE025K))
	TM9->TM9_OE05KH := If(Empty(M->TM9_OE05KH),-1,Val(M->TM9_OE05KH))
	TM9->TM9_OE1KHZ := If(Empty(M->TM9_OE1KHZ),-1,Val(M->TM9_OE1KHZ))
	TM9->TM9_OE2KHZ := If(Empty(M->TM9_OE2KHZ),-1,Val(M->TM9_OE2KHZ))
	TM9->TM9_OE3KHZ := If(Empty(M->TM9_OE3KHZ),-1,Val(M->TM9_OE3KHZ))
	TM9->TM9_OE4KHZ := If(Empty(M->TM9_OE4KHZ),-1,Val(M->TM9_OE4KHZ))
	TM9->TM9_OE6KHZ := If(Empty(M->TM9_OE6KHZ),-1,Val(M->TM9_OE6KHZ))
	TM9->TM9_OE8KHZ := If(Empty(M->TM9_OE8KHZ),-1,Val(M->TM9_OE8KHZ))
	TM9->TM9_OERESU := M->TM9_OERESU
	TM9->TM9_REPOUS := M->TM9_REPOUS
	TM9->TM9_USURES := M->TM9_USURES
	TM9->TM9_ODRECF := M->TM9_ODRECF
	TM9->TM9_ODREMO := M->TM9_ODREMO
	TM9->TM9_ODREDI := M->TM9_ODREDI
	TM9->TM9_OERECF := M->TM9_OERECF
	TM9->TM9_OEREMO := M->TM9_OEREMO
	TM9->TM9_OEREDI := M->TM9_OEREDI
	TM9->TM9_INDVIA := M->TM9_INDVIA
	TM9->TM9_DTAFER := M->TM9_DTAFER
	TM9->TM9_DTCALI := M->TM9_DTCALI
		TM9->TM9_ODORIG := M->TM9_ODORIG
		TM9->TM9_OEORIG := M->TM9_OEORIG
	If lTipoPer
			TM9->TM9_ODTIPE := M->TM9_ODTIPE
			TM9->TM9_OETIPE := M->TM9_OETIPE
	Endif

		TM9->TM9_AOD025 := If(M->TM9_AOD025,"1","2")
		TM9->TM9_AOD050 := If(M->TM9_AOD050,"1","2")
		TM9->TM9_AOD100 := If(M->TM9_AOD100,"1","2")
		TM9->TM9_AOD200 := If(M->TM9_AOD200,"1","2")
		TM9->TM9_AOD300 := If(M->TM9_AOD300,"1","2")
		TM9->TM9_AOD400 := If(M->TM9_AOD400,"1","2")
		TM9->TM9_AOD600 := If(M->TM9_AOD600,"1","2")
		TM9->TM9_AOD800 := If(M->TM9_AOD800,"1","2")

		TM9->TM9_AOE025 := If(M->TM9_AOE025,"1","2")
		TM9->TM9_AOE050 := If(M->TM9_AOE050,"1","2")
		TM9->TM9_AOE100 := If(M->TM9_AOE100,"1","2")
		TM9->TM9_AOE200 := If(M->TM9_AOE200,"1","2")
		TM9->TM9_AOE300 := If(M->TM9_AOE300,"1","2")
		TM9->TM9_AOE400 := If(M->TM9_AOE400,"1","2")
		TM9->TM9_AOE600 := If(M->TM9_AOE600,"1","2")
		TM9->TM9_AOE800 := If(M->TM9_AOE800,"1","2")

	MSUNLOCK("TM9")
	RestArea(aAreaTM5)

	//Altera data de Resultado
	ALTDTRES(.T.,lTemOrig)

	Do Case
			Case Substr(M->TM9_ODREFE,1,1) == "2"
				If Substr(M->TM9_ODRESU,1,1) == "2"   .Or.;
				Substr(M->TM9_ODRESU,1,1) == "4"   .Or.;
				Substr(M->TM9_ODRESU,1,1) == "5"
						lPCA := .T.
				EndIf
			Case Substr(M->TM9_OEREFE,1,1) == "2"
				If Substr(M->TM9_OERESU,1,1) == "2"   .Or.;
				Substr(M->TM9_OERESU,1,1) == "4"   .Or.;
				Substr(M->TM9_OERESU,1,1) == "5"
						lPCA := .T.
				EndIf
	EndCase

		If lPCA
			If MsgYesNo(STR0068) //"Deseja ir à tela de Programa de Saúde?"
				cPrograma := "MDTA110"
				MDTA110A()
				cPrograma := "MDTA120"
			EndIf
		EndIf

	Endif

Return .T.
//-------------------------------------------------------------------
/*/{Protheus.doc} _RESULT120
Calcula o resultado do exame conforme as frequencias
@type function
@author Denis Hyroshi de Souza
@since 14/03/2003
@return boolean, sempre falso
/*/
//-------------------------------------------------------------------
Function _RESULT120()

	Local nMaior, nMenor
	Local lRight := .f., lLeft := .f.

	//Caso o limiar seja Ausente, ajusta o valor para calcular corretamente
	Local t_OD025K := If("A" $ M->TM9_OD025K, "130", M->TM9_OD025K)
	Local t_OD05KH := If("A" $ M->TM9_OD05KH, "130", M->TM9_OD05KH)
	Local t_OD1KHZ := If("A" $ M->TM9_OD1KHZ, "130", M->TM9_OD1KHZ)
	Local t_OD2KHZ := If("A" $ M->TM9_OD2KHZ, "130", M->TM9_OD2KHZ)
	Local t_OD3KHZ := If("A" $ M->TM9_OD3KHZ, "130", M->TM9_OD3KHZ)
	Local t_OD4KHZ := If("A" $ M->TM9_OD4KHZ, "130", M->TM9_OD4KHZ)
	Local t_OD6KHZ := If("A" $ M->TM9_OD6KHZ, "130", M->TM9_OD6KHZ)
	Local t_OD8KHZ := If("A" $ M->TM9_OD8KHZ, "130", M->TM9_OD8KHZ)

	Local t_OE05KH := If("A" $ M->TM9_OE05KH, "130", M->TM9_OE05KH)
	Local t_OE025K := If("A" $ M->TM9_OE025K, "130", M->TM9_OE025K)
	Local t_OE1KHZ := If("A" $ M->TM9_OE1KHZ, "130", M->TM9_OE1KHZ)
	Local t_OE2KHZ := If("A" $ M->TM9_OE2KHZ, "130", M->TM9_OE2KHZ)
	Local t_OE3KHZ := If("A" $ M->TM9_OE3KHZ, "130", M->TM9_OE3KHZ)
	Local t_OE4KHZ := If("A" $ M->TM9_OE4KHZ, "130", M->TM9_OE4KHZ)
	Local t_OE6KHZ := If("A" $ M->TM9_OE6KHZ, "130", M->TM9_OE6KHZ)
	Local t_OE8KHZ := If("A" $ M->TM9_OE8KHZ, "130", M->TM9_OE8KHZ)

	aSeqOD := {}
	aSeqOE := {}

	//Orelha Direita
	nMedia := (Val(t_OD05KH)+Val(t_OD1KHZ)+Val(t_OD2KHZ)) / 3

	If nMedia <= 25
		M->TM9_ODCLIN := aClinico[2]
	ElseIf nMedia <= 40
		M->TM9_ODCLIN := aClinico[3]
	ElseIf nMedia <= 55
		M->TM9_ODCLIN := aClinico[4]
	ElseIf nMedia <= 70
		M->TM9_ODCLIN := aClinico[5]
	ElseIf nMedia <= 90
		M->TM9_ODCLIN := aClinico[6]
	Else
		M->TM9_ODCLIN := aClinico[7]
	Endif

	//Orelha Esquerda
	nMedia := (Val(t_OE05KH)+Val(t_OE1KHZ)+Val(t_OE2KHZ)) / 3
	If nMedia <= 25
		M->TM9_OECLIN := aClinico[2]
	ElseIf nMedia <= 40
		M->TM9_OECLIN := aClinico[3]
	ElseIf nMedia <= 55
		M->TM9_OECLIN := aClinico[4]
	ElseIf nMedia <= 70
		M->TM9_OECLIN := aClinico[5]
	ElseIf nMedia <= 90
		M->TM9_OECLIN := aClinico[6]
	Else
		M->TM9_OECLIN := aClinico[7]
	Endif

	//Orelha Direita
	nMedia := (Val(t_OD05KH)+Val(t_OD1KHZ)+Val(t_OD2KHZ)) / 3
	If nMedia <= 30
		M->TM9_ODINSS := aINSS[2] //Normal
	Elseif nMedia <= 50
		M->TM9_ODINSS := aINSS[3] //Reducao em Grau Minimo
	Elseif nMedia <= 70
		M->TM9_ODINSS := aINSS[4] //Reudcao em Grau Medio
	Elseif nMedia <= 90
		M->TM9_ODINSS := aINSS[5] //Reducao em Grau Maximo
	Else
		M->TM9_ODINSS := aINSS[6] //Perda da audicao
	Endif

	//Orelha Esquerda
	nMedia := (Val(t_OE05KH)+Val(t_OE1KHZ)+Val(t_OE2KHZ)) / 3
	If nMedia <= 30
		M->TM9_OEINSS := aINSS[2] //Normal
	Elseif nMedia <= 50
		M->TM9_OEINSS := aINSS[3] //Reducao em Grau Minimo
	Elseif nMedia <= 70
		M->TM9_OEINSS := aINSS[4] //Reudcao em Grau Medio
	Elseif nMedia <= 90
		M->TM9_OEINSS := aINSS[5] //Reducao em Grau Maximo
	Else
		M->TM9_OEINSS := aINSS[6] //Perda da audicao
	Endif

	//Portaria 19
	If Substr(M->TM9_ODREFE,1,1) == "2" .or.;
	Substr(M->TM9_OEREFE,1,1) == "2"
		nRecno := Recno()
		NG120AUDIO()    //Recolhe informacoes do exame referencial
		Dbselectarea("TM9")
		Dbsetorder(1)
		Dbgoto(nRecno)
	Endif

	If Substr(M->TM9_ODREFE,1,1) == "2" //Orelha Direita - Sequencial
		If Len(aSeqOD) > 0
			//SUGESSTIVO DE DESENCADEAMENTO
			If (aSeqOD[1][1] <= 25) .and. (aSeqOD[1][2] <= 25) .and. (aSeqOD[1][3] <= 25) .and. (aSeqOD[1][4] <= 25) .and.;
			(aSeqOD[1][5] <= 25) .and. (aSeqOD[1][6] <= 25) .and. (aSeqOD[1][7] <= 25) .and. (aSeqOD[1][8] <= 25)
				If ((Val(t_OD3KHZ)+Val(t_OD4KHZ)+Val(t_OD6KHZ))/3) >= (((aSeqOD[1][5]+aSeqOD[1][6]+aSeqOD[1][7])/3)+10)
					M->TM9_ODRESU := aResul[5]
					lRight := .t.
				Elseif (Val(t_OD3KHZ) >= aSeqOD[1][5]+15) .or. (Val(t_OD4KHZ) >= aSeqOD[1][6]+15) .or.;
					(Val(t_OD6KHZ) >= aSeqOD[1][7]+15)

					M->TM9_ODRESU := aResul[5]
					lRight := .t.
				Endif
			//SUGESSTIVO DE AGRAVAMENTO
			Elseif (aSeqOD[1][5] > 25) .or. (aSeqOD[1][6] > 25) .or. (aSeqOD[1][7] > 25)
				nMaior := VALMAXMIN({aSeqOD[1][5],aSeqOD[1][6],aSeqOD[1][7]})
				nMenor := VALMAXMIN({aSeqOD[1][1],aSeqOD[1][2],aSeqOD[1][3],aSeqOD[1][4],aSeqOD[1][8]})
				If nMaior > nMenor
					If ((Val(t_OD3KHZ)+Val(t_OD4KHZ)+Val(t_OD6KHZ))/3) >= (((aSeqOD[1][5]+aSeqOD[1][6]+aSeqOD[1][7])/3)+15) .or. ;
					((Val(t_OD05KH)+Val(t_OD1KHZ)+Val(t_OD2KHZ))/3) >= (((aSeqOD[1][2]+aSeqOD[1][3]+aSeqOD[1][4])/3)+15)

						M->TM9_ODRESU := aResul[6]
						lRight := .t.
					Elseif (Val(t_OD025K) >= aSeqOD[1][1]+15) .or. (Val(t_OD05KH) >= aSeqOD[1][2]+15) .or.;
							(Val(t_OD1KHZ) >= aSeqOD[1][3]+15) .or. (Val(t_OD2KHZ) >= aSeqOD[1][4]+15) .or.;
							(Val(t_OD3KHZ) >= aSeqOD[1][5]+15) .or. (Val(t_OD4KHZ) >= aSeqOD[1][6]+15) .or.;
							(Val(t_OD6KHZ) >= aSeqOD[1][7]+15) .or. (Val(t_OD8KHZ) >= aSeqOD[1][8]+15)

						M->TM9_ODRESU := aResul[6]
						lRight := .t.
					Endif
				Endif
			Endif
		Endif
	Endif

	If Substr(M->TM9_OEREFE,1,1) == "2" //Orelha Esquerda - Sequencial
		If Len(aSeqOE) > 0
			//SUGESSTIVO DE DESENCADEAMENTO
			If (aSeqOE[1][1] <= 25) .and. (aSeqOE[1][2] <= 25) .and. (aSeqOE[1][3] <= 25) .and. (aSeqOE[1][4] <= 25) .and.;
			(aSeqOE[1][5] <= 25) .and. (aSeqOE[1][6] <= 25) .and. (aSeqOE[1][7] <= 25) .and. (aSeqOE[1][8] <= 25)
				If ((Val(t_OE3KHZ)+Val(t_OE4KHZ)+Val(t_OE6KHZ))/3) >= (((aSeqOE[1][5]+aSeqOE[1][6]+aSeqOE[1][7])/3)+10)
					M->TM9_OERESU := aResul[5]
					lLeft := .t.
				Elseif (Val(t_OE3KHZ) >= aSeqOE[1][5]+15) .or. (Val(t_OE4KHZ) >= aSeqOE[1][6]+15) .or.;
					(Val(t_OE6KHZ) >= aSeqOE[1][7]+15)

					M->TM9_OERESU := aResul[5]
					lLeft := .t.
				Endif
			//SUGESSTIVO DE AGRAVAMENTO
			Elseif (aSeqOE[1][5] > 25) .or. (aSeqOE[1][6] > 25) .or. (aSeqOE[1][7] > 25)
				nMaior := VALMAXMIN({aSeqOE[1][5],aSeqOE[1][6],aSeqOE[1][7]})
				nMenor := VALMAXMIN({aSeqOE[1][1],aSeqOE[1][2],aSeqOE[1][3],aSeqOE[1][4],aSeqOE[1][8]})
				If nMaior > nMenor
					If ((Val(t_OE3KHZ)+Val(t_OE4KHZ)+Val(t_OE6KHZ))/3) >= (((aSeqOE[1][5]+aSeqOE[1][6]+aSeqOE[1][7])/3)+15) .or. ;
					((Val(t_OE05KH)+Val(t_OE1KHZ)+Val(t_OE2KHZ))/3) >= (((aSeqOE[1][2]+aSeqOE[1][3]+aSeqOE[1][4])/3)+15)

						M->TM9_OERESU := aResul[6]
						lLeft := .t.
					Elseif (Val(t_OE025K) >= aSeqOE[1][1]+15) .or. (Val(t_OE05KH) >= aSeqOE[1][2]+15) .or.;
							(Val(t_OE1KHZ) >= aSeqOE[1][3]+15) .or. (Val(t_OE2KHZ) >= aSeqOE[1][4]+15) .or.;
							(Val(t_OE3KHZ) >= aSeqOE[1][5]+15) .or. (Val(t_OE4KHZ) >= aSeqOE[1][6]+15) .or.;
							(Val(t_OE6KHZ) >= aSeqOE[1][7]+15) .or. (Val(t_OE8KHZ) >= aSeqOE[1][8]+15)

						M->TM9_OERESU := aResul[6]
						lLeft := .t.
					Endif
				Endif
			Endif
		Endif
	Endif

	If !lRight //Orelha Direita - Referencia
		M->TM9_ODRESU := aResul[4]

		If (Val(t_OD025K) <= 25) .and. (Val(t_OD05KH) <= 25) .and. (Val(t_OD1KHZ) <= 25) .and.;
			(Val(t_OD2KHZ) <= 25) .and. (Val(t_OD3KHZ) <= 25) .and. (Val(t_OD4KHZ) <= 25) .and.;
			(Val(t_OD6KHZ) <= 25) .and. (Val(t_OD8KHZ) <= 25)

			M->TM9_ODRESU := aResul[2]
		Elseif (Val(t_OD3KHZ) > 25) .or. (Val(t_OD4KHZ) > 25) .or. (Val(t_OD6KHZ) > 25)
			nMaior := VALMAXMIN({Val(t_OD3KHZ),Val(t_OD4KHZ),Val(t_OD6KHZ)})
			nMenor := VALMAXMIN({Val(t_OD025K),Val(t_OD05KH),Val(t_OD1KHZ),Val(t_OD2KHZ),Val(t_OD8KHZ)})
			If nMaior > nMenor
				M->TM9_ODRESU := aResul[3]
			Endif
		Endif
	Endif
	If !lLeft //Orelha Esquerda - Referencia
		M->TM9_OERESU := aResul[4]

		If (Val(t_OE025K) <= 25) .and. (Val(t_OE05KH) <= 25) .and. (Val(t_OE1KHZ) <= 25) .and.;
			(Val(t_OE2KHZ) <= 25) .and. (Val(t_OE3KHZ) <= 25) .and. (Val(t_OE4KHZ) <= 25) .and.;
			(Val(t_OE6KHZ) <= 25) .and. (Val(t_OE8KHZ) <= 25)

			M->TM9_OERESU := aResul[2]
		Elseif (Val(t_OE3KHZ) > 25) .or. (Val(t_OE4KHZ) > 25) .or. (Val(t_OE6KHZ) > 25)
			nMaior := VALMAXMIN({Val(t_OE3KHZ),Val(t_OE4KHZ),Val(t_OE6KHZ)})
			nMenor := VALMAXMIN({Val(t_OE025K),Val(t_OE05KH),Val(t_OE1KHZ),Val(t_OE2KHZ),Val(t_OE8KHZ)})
			If nMaior > nMenor
				M->TM9_OERESU := aResul[3]
			Endif
		Endif
	Endif

	//Calcula as Medias
	fAvgCalc()

	MDT120VRES(M->TM9_ODRESU,M->TM9_OERESU) //Atualiza campo M->TM5_INDRES

	lRefresh := .t.
Return .f.

//-------------------------------------------------------------------
/*/{Protheus.doc} CheckDB
Retorna o valor relacionado com a posicao da indice da vetor
@type static function
@author Denis H. de Souza
@since 18/07/2002
@param nOdecib, numeric, valor do campo avaliado
@param lOssea, boolean, indica se é via ossea
@param nArea, numeric, indica o codigo da area
@return boolean, retorna verdadeiro ou falso de acordo com as validações
/*/
//-------------------------------------------------------------------
Static Function CheckDB(nOdecib, lOssea, nArea)

	Local nMaxOssea := 70
	Local nParam := 0
	Local nOldMin:= 0
	Local nOldMax:= 0
	Local nOelMin:= 0
	Local nOelMax:= 0
	Default lOssea := .F.
	Default nArea  := 0

	If nArea == 1 .Or. nArea == 2
		nOldMin:= Val(M->M2_ODLMIN)
		nOldMax:= Val(M->M2_ODLMAX)
		nOelMin:= Val(M->M2_OELMIN)
		nOelMax:= Val(M->M2_OELMAX)
	ElseIf nArea == 3 .Or. nArea == 4
		nOldMin:= Val(M->TM9_ODLMIN)
		nOldMax:= Val(M->TM9_ODLMAX)
		nOelMin:= Val(M->TM9_OELMIN)
		nOelMax:= Val(M->TM9_OELMAX)
	Endif

	If lOssea
		If nArea == 1 .Or. nArea == 3
			If !Empty(nOldMax) .And. (nOldMin > nOldMax) .Or. !Empty(nOldMax) .and. !Empty(nOldMin) .And. (nOldMax < nOldMin)
				ShowHelpDlg(STR0182,{STR0183},2,{STR0184},2)
			Return .F.
			Endif
		Endif
		If nArea == 2 .Or. nArea == 4
			If !Empty(nOelMax) .And. (nOelMin > nOelMax) .Or. !Empty(nOelMax) .and. !Empty(nOelMin) .And. (nOelMax < nOelMin)
				ShowHelpDlg(STR0182,{STR0183},2,{STR0184},2)
			Return .F.
			Endif
		Endif

		If Empty(nOdecib)
			return .t.
		Endif
		If "A  " == nOdecib
			Return .T.
		Endif

		nParam := GETMV("MV_MDTOSSE")
		If nParam > 0
			nMaxOssea := nParam
		Endif

		If aSCAN( aDICBS, { |x| AllTrim(Str(x)) == AllTrim(nOdecib) }) > 0
			If Val(nOdecib) > nMaxOssea
				msginfo(STR0103 + AllTrim(STR(nMaxOssea)) + ".")  //"O valor máximo para a via óssea é "
				Return .F.
			Endif
			Return .T.
		Else
			msginfo(STR0042+chr(13)+chr(13)+"-10, -5, 0, 5, 10, 15, 20, 25, 30,"+chr(13); //"Valores aceitos:"
										+"35, 40, 45, 50, 55, 60, 65, 70."+chr(13)+chr(13);
										+STR0091,STR0043) //"Digite a letra A caso a audibilidade seja ausente."//"Valor incorreto"
			Return .F.
		Endif

	Else
		If nArea == 1 .Or. nArea == 3
			If !Empty(nOldMax) .And. (nOldMin > nOldMax) .Or. !Empty(nOldMax) .and. !Empty(nOldMin) .And. (nOldMax < nOldMin)
				ShowHelpDlg(STR0182,{STR0183},2,{STR0184},2)
			Return .F.
			Endif
		Endif
		If nArea == 2 .Or. nArea == 4
			If !Empty(nOelMax) .And. (nOelMin > nOelMax) .Or. !Empty(nOelMax) .and. !Empty(nOelMin) .And. (nOelMax < nOelMin)
				ShowHelpDlg(STR0182,{STR0183},2,{STR0184},2)
			Return .F.
			Endif
		Endif
		If Empty(nOdecib)
			return .t.
		Endif
		If "A  " == nOdecib
			Return .T.
		Endif
		If aSCAN( aDICBS, { |x| AllTrim(Str(x)) == AllTrim(nOdecib) }) > 0
			Return .T.
		Else
			msginfo(STR0042+chr(13)+chr(13)+"-10, -5, 0, 5, 10, 15, 20, 25, 30,"+chr(13); //"Valores aceitos:"
										+"35, 40, 45, 50, 55, 60, 65, 70, 75,"+chr(13);
										+"80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130."+chr(13)+chr(13);
										+STR0091,STR0043) //"Digite a letra A caso a audibilidade seja ausente."//"Valor incorreto"
			Return .F.
		Endif
	Endif

Return .F.

//-------------------------------------------------------------------
/*/{Protheus.doc} AUDITUDOK
Consistência final
@type function
@author Andre Perez Alvarez
@since 26/05/2007
@param lUpdMdt87, boolean, indica se as alterações referentes ao
							update UPDMDT87 foram aplicadas
@return boolean, retorna verdadeiro se 'aprovado nas verificações',
					caso contrario falso
/*/
//-------------------------------------------------------------------
Function AUDITUDOK(lUpdMdt87)
	Local lRet
	Default lUpdMdt87 := .F.

	If Empty( M->TM5_DTRESU ) .OR. Empty( M->TM9_EQPTO ) .OR. Empty( M->TM9_DTAFER ) .OR. Empty( M->TM9_USURES )
		Help( ' ', 1, STR0182, , STR0237 + CRLF + ; //Atenção ## "Os seguintes campos são de preenchimento obrigatório: "
								"- " + STR0092 + CRLF + ; //Dt. Resultado
								"- " + STR0031 + CRLF + ; //Equipamento
								"- " + STR0045 + CRLF + ; //Afericao
								"- " + STR0034, 2, 0 ) //Responsavel
		Return .F.
	Endif

	If lUpdMdt87
		cTxtOre := ""
		If Val(M->TM9_ODLMIN) > Val(M->TM9_ODLMAX)
			cTxtOre := STR0151 + " - " + STR0035 //"Via Aérea"###"Orelha Direita"
		ElseIf Val(M->TM9_OELMIN) > Val(M->TM9_OELMAX)
			cTxtOre := STR0151 + " - " + STR0041 //"Via Aérea"###"Orelha Esquerda"
		ElseIf Val(M2_ODLMIN) > Val(M2_ODLMAX)
			cTxtOre := STR0152 + " - " + STR0035 //"Via Óssea"###"Orelha Direita"
		ElseIf Val(M2_OELMIN) > Val(M2_OELMAX)
			cTxtOre := STR0152 + " - " + STR0041 //"Via Óssea"###"Orelha Esquerda"
		Endif
		If !Empty(cTxtOre)
			Msginfo(STR0178,cTxtOre) //"O Limite Máximo não pode ser menor que o Limite Mínimo."
			Return .F.
		Endif
	Endif

	//Verifica se o Resultado foi Calculado
	lRet := MDT120EXCL()

Return lRet
//-------------------------------------------------------------------
/*/{Protheus.doc} VNomeUsu
Mostra o nome do Usuario
@type static function
@author Andre Perez Alvarez
@since 12/04/2007
@param cCod, caracter, codigo do usuário
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function VNomeUsu(cCod)

	DbSelectArea("TMK")
	DbSetOrder(1)
	DbSeek(cFilTMK+cCod)
	M->TM9_NOMUSU := TMK->TMK_NOMUSU

Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} NOEQUIP1
Mostra o nome do equipamento
@type static function
@author Andre Perez Alvarez
@since 13/04/2007
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function NOEQUIP1()

	Local nRecno := RECNO()
	Local cAlias := ALIAS()
	Local nIndex := INDEXORD()

	DbSelectArea("TM7")
	DbSetOrder(1)
	DbSeek(cFilTM7+M->TM9_EQPTO)
	M->TM9_NOEQTO := TM7->TM7_NOEQTO
	M->TM9_DTCALI := TM7->TM7_DTCALI
	M->TM9_DTAFER := TM7->TM7_DTAFER

	DbSelectArea("TM9")
	DbSetOrder(3)  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
	If !DbSeek(cFilTM9+cNUMFIC+dtos(dDTPROG)+cHRPROG+cEXAME+"1")
		M->TM9_DTCALI := TM7->TM7_DTCALI
		M->TM9_DTAFER := TM7->TM7_DTAFER
	Else
		If M->TM9_EQPTO != TM9->TM9_EQPTO
			M->TM9_DTCALI := TM7->TM7_DTCALI
			M->TM9_DTAFER := TM7->TM7_DTAFER
		Else
			M->TM9_DTCALI := TM9->TM9_DTCALI
			M->TM9_DTAFER := TM9->TM9_DTAFER
			If Empty(TM9->TM9_DTCALI) .and. Empty(TM9->TM9_DTAFER)
				M->TM9_DTCALI := TM7->TM7_DTCALI
				M->TM9_DTAFER := TM7->TM7_DTAFER
			Endif
		Endif
	Endif

	Dbselectarea(cAlias)
	Dbsetorder(nIndex)
	Dbgoto(nRecno)

Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} NOCODIGO
Mostra o nome do equipamento
@type static function
@author Andre Perez Alvarez
@since 13/04/2007
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function NOCODIGO()

	Local nRecno := RECNO()
	Local cAlias := ALIAS()
	Local nIndex := INDEXORD()

	DbSelectArea("TMU")
	DbSetOrder(1)
	If dbSeek(xFilial("TMU")+M->TM5_CODRES)
		M->TM5_RESULT := TMU->TMU_RESULT
	Endif

	Dbselectarea(cAlias)
	Dbsetorder(nIndex)
	Dbgoto(nRecno)

Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} LimiarDB
Grava os valores dos limiares de forma correta
@type static function
@author Andre Perez Alvarez
@since 10/08/2007
@param cCampo, param_type, param_descr
@return numeric, valor tratado da limiar
/*/
//-------------------------------------------------------------------
Static Function LimiarDB(cCampo)

	Local nDecib := 0

	If Empty(cCampo)
		nDecib := -1
	Elseif "A" $ cCampo
		nDecib := -2
	Else
		nDecib := Val(cCampo)
	Endif

Return nDecib

//-------------------------------------------------------------------
/*/{Protheus.doc} STRMED120
apresenta os valores de média
@type static function
@author Andre Perez Alvarez
@since 10/08/2007
@param cCampo, caracter, campo a ser tratado
@return numeric, valor tratado do campo
/*/
//-------------------------------------------------------------------
Static Function STRPONTO(cCampo)

	Local cTexto := AllTrim(cCampo)
	Local nLen := Len(cTexto)

	If nLen == 6
		cTexto := Transform(cTexto,Trim("999.99"))
	Elseif nLen == 5
		cTexto := Transform(cTexto,Trim("99.99"))
	Elseif nLen == 4
		cTexto := Transform(cTexto,Trim("9.99"))
	Elseif !Empty(cTexto)
		cTexto := Transform(cTexto,Trim("999.99"))
	Endif

Return Val(cTexto)

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT120VRES
Altera o Ind. Resultado a partir do resultado Portaria 19
@type function
@author Denis
@since 23/07/2009
@param cTM9_ODRESU, caracter, conteúdo campo 'Result. O.D.'
@param cTM9_OERESU, caracter, conteúdo campo 'Result. O.E.'
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDT120VRES(cTM9_ODRESU,cTM9_OERESU)

	If Substr(cTM9_ODRESU,1,1) >= Substr(cTM9_OERESU,1,1)
		M->TM5_INDRES := If( Substr(cTM9_ODRESU,1,1) $ "1/2" , aCodRes[1] , aCodRes[2] )
	Else
		M->TM5_INDRES := If( Substr(cTM9_OERESU,1,1) $ "1/2" , aCodRes[1] , aCodRes[2] )
	Endif

Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} _ALTDTRES
Altera a data e o tipo de resultado do exame ( TM5 )
@type function
@author Andre E. Perez Alvarez
@since 03/03/2008
@param lImpRel, boolean, indica se imprime relatório
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function _ALTDTRES(lImpRel)

	Local aCodFat := {"1-"+STR0022,"2-"+STR0023,"3-"+STR0124," "}//SIM##NAO##"Externo"
	Local lContratoOK := .f.

	Default lImpRel := .t.

	If lSigaMdtps
		Private M->TM5_VALFAT := TM5->TM5_VALFAT
		Private M->TM5_INDFAT := aCodFat[VAL(If(Empty(TM5->TM5_INDFAT),"2",TM5->TM5_INDFAT))]
		Private M->TM5_DTFAT  := TM5->TM5_DTFAT

		lContratoOK := MdtTemTOL(/*Cliente*/,/*Loja*/,TM5->TM5_EXAME,.F.)
		If lContratoOK //Valida se tem contrato
			M->TM5_VALFAT := TOM->TOM_VALOR
		Endif
	Endif

	dbSelectArea("TM5")
	If TM5->(!eof()) .AND. TM5->(!bof())
		cEXAREF := TM9->TM9_ODREFE
		cINDAGR := If(TM9->TM9_ODRESU == "6" .or. TM9->TM9_ODRESU == "7","1","2") //Sugestivo de Agravamento ou Perda de Audicao -> (Agravamento = Sim)
		cORIAGR := TM9->TM9_ODORIG
		cRESULT := If(TM9->TM9_ODRESU $ "1/2" ,"1","2")
		If TM9->TM9_OERESU > TM9->TM9_ODRESU
			cEXAREF := TM9->TM9_OEREFE
			cINDAGR := If(TM9->TM9_OERESU == "6" .or. TM9->TM9_OERESU == "7","1","2") //Sugestivo de Agravamento ou Perda de Audicao -> (Agravamento = Sim)
			cORIAGR := TM9->TM9_OEORIG
			cRESULT := If(TM9->TM9_OERESU $ "1/2" ,"1","2")
		Endif
		RecLock("TM5",.F.)
		TM5->TM5_DTRESU := M->TM5_DTRESU
		TM5->TM5_CODRES	:= M->TM5_CODRES
		TM5->TM5_DESRES	:= M->TM5_DESRES
		TM5->TM5_OBSERV	:= M->TM5_OBSERV
		TM5->TM5_EXAREF := cEXAREF
		TM5->TM5_INDAGR := cINDAGR
		TM5->TM5_ORIAGR := cORIAGR
		TM5->TM5_INDRES := M->TM5_INDRES
		If lSigaMdtps
			If Empty(TM5->TM5_DTINCL) .or. Empty(TM5->TM5_HRINCL)
				TM5->TM5_DTINCL := dDatabase
				TM5->TM5_HRINCL := Time()
				TM5->TM5_USUDIG := cUserName
			Endif
		Endif
		MSUNLOCK("TM5")
	Endif

	If lImpRel
		If msgYESNO(STR0104) //"Imprimir Relatório de Exame Auditivo? "
			MDTREXA()
		Endif
	Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} STRMED120
Mostra os valores dos limiares de forma correta
@type static function
@author Andre Perez Alvarez
@since 10/08/2007
@param cCampo, caracter, campo a ser avaliado e formatado
@return caracter, texto formatado de acordo com a limiar
/*/
//-------------------------------------------------------------------
Static Function STRMED120(cCampo)

	Local cTexto
	Local nLen

	If ValType(cCampo) == "N"
		cTexto := AllTrim(Str(cCampo))
	Else
		cTexto := cCampo
	Endif

	nLen := Len(cTexto)

	If nLen == 6
		cTexto := Transform(cCampo,Trim("@E 999.99"))
	Elseif nLen == 5
		cTexto := Transform(cCampo,Trim("@E 99.99"))
	Elseif nLen == 4
		cTexto := Transform(cCampo,Trim("@E 9.99"))
	Elseif !Empty(cTexto)
		cTexto := Transform(cCampo,Trim("@E 999.99"))
	Endif

Return cTexto

//-------------------------------------------------------------------
/*/{Protheus.doc} function
Cria uma janela contendo a legenda da mBrowse
@type function
@author Denis Hyroshi de Souza
@since 05/04/2005
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDT120Leg()

	If Type("cCadastro") == "U"
		Private cCadastro := STR0142 // "Legenda"
	EndIf
	BrwLegenda(	OemToAnsi(cCadastro), ;
				OemToAnsi(STR0142), ; // "Legenda"
				{ {"BR_VERDE"	, OemToAnsi(STR0143)}, ; // "Não Realizado - A vencer"
				  {"BR_VERMELHO", OemToAnsi(STR0144)}, ; // "Não Realizado - Vencido"
				  {"BR_AZUL"	, OemToAnsi(STR0145)} }; // "Realizado"
			  )
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} fNG120Cor
Retorna matriz com as condicoes para a legenda
@type function
@author Denis Hyroshi de Souza
@since 05/04/2005
@return array, array bidimensional sendo:
	primeira posição - condição para a legenda
	segunda posição - cor da lengenda
/*/
//-------------------------------------------------------------------
Function fNG120Cor()
	Local aCores :=	{ { "!Empty(TM5->TM5_DTRESU)"	  , "BR_AZUL"	 },;
					  { "TM5->TM5_DTPROG <  dDataBase", "BR_VERMELHO"},;
					  { "TM5->TM5_DTPROG >= dDataBase", "BR_VERDE"	 }}
Return(aCores)

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT120GTOU
Grava TOU relacionado
@type funtion
@author Elisangela Costa
@since 30/06/2006
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDT120GTOU()

	Local aArea := GetArea()
	Local cCLIENTE, cLOJACLI

	cCLIENTE := TM0->TM0_CLIENT
	cLOJACLI := TM0->TM0_LOJA

	If !Empty(TM5->TM5_FORNEC)
		DbSelectArea("TOU")
		DbSetOrder(01)
		If !DbSeek(xFilial("TOU")+TM5->TM5_FORNEC+TM5->TM5_LOJA+cCLIENTE+cLOJACLI)
			RecLock("TOU",.T.)
			TOU->TOU_FILIAL := xFilial("TOU")
			TOU->TOU_FORNEC := TM5->TM5_FORNEC
			TOU->TOU_LOJAF  := TM5->TM5_LOJA
			TOU->TOU_CLIENT := cCLIENTE
			TOU->TOU_LOJAC  := cLOJACLI
			MSUNLOCK("TOU")
		EndIf
	EndIf
	RestArea(aArea)
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} RESANT120
Busca informações dos exames realizados anteriormente
@type function
@author Roger Rodrigues
@since 26/01/2009
@return null, sempre nulo
/*/
//-------------------------------------------------------------------
Function RESANT120()

	Local aArea := GetArea()
	Local oDlgF,oFont, oTempTable
	Local lAusente3 := .F., lAusente5 := .F.
	Private lSigaMdtRl11 := If( NGCADICBASE("TQW_FILIAL","A","TQW",.F.), .f., .t.)

	If lSigaMdtRl11

		aDBF := {}
		AADD(aDBF,{ "DTRESU" , "D" ,10, 0 })
		AADD(aDBF,{ "ODRESU" , "C" ,40, 0 })
		AADD(aDBF,{ "ODMED5" , "N" ,07, 2 })
		AADD(aDBF,{ "ODMED3" , "N" ,07, 2 })
		AADD(aDBF,{ "ODREFE" , "C" ,08, 0 })
		AADD(aDBF,{ "OERESU" , "C" ,40, 0 })
		AADD(aDBF,{ "OEMED5" , "N" ,07, 2 })
		AADD(aDBF,{ "OEMED3" , "N" ,07, 2 })
		AADD(aDBF,{ "OEREFE" , "C" ,08, 0 })
		AADD(aDBF,{ "INDVIA" , "C" ,20, 0 })

		cAliasTRB := GetNextAlias()
		oTempTable := FWTemporaryTable():New( cAliasTRB, aDBF )
		oTempTable:AddIndex( "1", {"DTRESU","INDVIA"} )
		oTempTable:Create()

		Dbselectarea("TM9")
		Dbsetorder(1)
		Dbseek(xFilial("TM9"))
		While !eof() .and. TM9->TM9_FILIAL == xFilial("TM9")
				IF TM9->TM9_NUMFIC != cNUMFIC
					DbSelectArea("TM9")
					Dbskip()
					Loop
				ENDIF

				(cAliasTRB)->(DbAppend())
				dbSelectArea("TM5")
				dbSetOrder(1)
				dbSeek(xFilial("TM5") + TM9->TM9_NUMFIC + DTOS(TM9->TM9_DTPROG) + TM9->TM9_EXAME)
				Replace (cAliasTRB)->DTRESU with TM5->TM5_DTRESU

				If TM9->TM9_ODRESU == "1"
					Replace (cAliasTRB)->ODRESU with STR0026//"Limiares Aceitaveis"
				ENDIF
				If TM9->TM9_ODRESU == "2"
					Replace (cAliasTRB)->ODRESU with STR0027//"Sugestivo do PAIR"
				ENDIF
				If TM9->TM9_ODRESU == "3"
					Replace (cAliasTRB)->ODRESU with STR0028//"Nao Sugestivo do PAIR"
				ENDIF
				If TM9->TM9_ODRESU == "4"
					Replace (cAliasTRB)->ODRESU with STR0029//"Sugestivo de Desencadeamento"
				ENDIF
				If TM9->TM9_ODRESU == "5"
					Replace (cAliasTRB)->ODRESU with STR0030//"Sugestivo de Agravamento"
				ENDIF

				t_OD05KH := IF(TM9->TM9_OD05KH == -1 .or. TM9->TM9_OD05KH == -2, lAusente5 := .T., TM9->TM9_OD05KH)
				t_OD1KHZ := IF(TM9->TM9_OD1KHZ == -1 .or. TM9->TM9_OD1KHZ == -2, lAusente5 := .T., TM9->TM9_OD1KHZ)
				t_OD2KHZ := IF(TM9->TM9_OD2KHZ == -1 .or. TM9->TM9_OD2KHZ == -2, lAusente5 := .T., TM9->TM9_OD2KHZ)
				t_OD3KHZ := IF(TM9->TM9_OD3KHZ == -1 .or. TM9->TM9_OD3KHZ == -2, lAusente3 := .T., TM9->TM9_OD3KHZ)
				t_OD4KHZ := IF(TM9->TM9_OD4KHZ == -1 .or. TM9->TM9_OD4KHZ == -2, lAusente3 := .T., TM9->TM9_OD4KHZ)
				t_OD6KHZ := IF(TM9->TM9_OD6KHZ == -1 .or. TM9->TM9_OD6KHZ == -2, lAusente3 := .T., TM9->TM9_OD6KHZ)

				If lAusente5 .OR. TM9->TM9_AOD050 == "1" .OR. TM9->TM9_AOD100 == "1" .OR. TM9->TM9_AOD200 == "1"
					Replace (cAliasTRB)->ODMED5 with 0
				Else
					Replace (cAliasTRB)->ODMED5 with (t_OD05KH+t_OD1KHZ+t_OD2KHZ)/3
				Endif
				If lAusente3 .OR. TM9->TM9_AOD300 == "1" .OR. TM9->TM9_AOD400 == "1" .OR. TM9->TM9_AOD600 == "1"
					Replace (cAliasTRB)->ODMED3 with 0
				Else
					Replace (cAliasTRB)->ODMED3 with (t_OD3KHZ+t_OD4KHZ+t_OD6KHZ)/3
				Endif
				lAusente3 := .F.
				lAusente5 := .F.
				If TM9->TM9_ODREFE == "1"
					Replace (cAliasTRB)->ODREFE with STR0022// "Sim"
				Else
					Replace (cAliasTRB)->ODREFE with STR0023// "Não"
				EndIf

				If TM9->TM9_OERESU == "1"
					Replace (cAliasTRB)->OERESU with STR0026//"2-Limiares Aceitaveis"
				ENDIF
				If TM9->TM9_OERESU == "2"
					Replace (cAliasTRB)->OERESU with STR0027//"3-Sugestivo do PAIR"
				ENDIF
				If TM9->TM9_OERESU == "3"
					Replace (cAliasTRB)->OERESU with STR0028//"4-Nao Sugestivo do PAIR"
				ENDIF
				If TM9->TM9_OERESU == "4"
					Replace (cAliasTRB)->OERESU with STR0029//"5-Sugestivo de Desencadeamento"
				ENDIF
				If TM9->TM9_OERESU == "5"
					Replace (cAliasTRB)->OERESU with STR0030//"6-Sugestivo de Agravamento"
				ENDIF


				t_OE05KH := IF(TM9->TM9_OE05KH == -1 .or. TM9->TM9_OE05KH == -2, lAusente5 := .T., TM9->TM9_OE05KH)
				t_OE1KHZ := IF(TM9->TM9_OE1KHZ == -1 .or. TM9->TM9_OE1KHZ == -2, lAusente5 := .T., TM9->TM9_OE1KHZ)
				t_OE2KHZ := IF(TM9->TM9_OE2KHZ == -1 .or. TM9->TM9_OE2KHZ == -2, lAusente5 := .T., TM9->TM9_OE2KHZ)
				t_OE3KHZ := IF(TM9->TM9_OE3KHZ == -1 .or. TM9->TM9_OE3KHZ == -2, lAusente3 := .T., TM9->TM9_OE3KHZ)
				t_OE4KHZ := IF(TM9->TM9_OE4KHZ == -1 .or. TM9->TM9_OE4KHZ == -2, lAusente3 := .T., TM9->TM9_OE4KHZ)
				t_OE6KHZ := IF(TM9->TM9_OE6KHZ == -1 .or. TM9->TM9_OE6KHZ == -2, lAusente3 := .T., TM9->TM9_OE6KHZ)

				If lAusente5 .OR. TM9->TM9_AOE050 == "1" .OR. TM9->TM9_AOE100 == "1" .OR. TM9->TM9_AOE200 == "1"
					Replace (cAliasTRB)->OEMED5 with 0
				Else
					Replace (cAliasTRB)->OEMED5 with (t_OE05KH+t_OE1KHZ+t_OE2KHZ)/3
				Endif
				If lAusente3 .OR. TM9->TM9_AOE300 == "1" .OR. TM9->TM9_AOE400 == "1" .OR. TM9->TM9_AOE600 == "1"
					Replace (cAliasTRB)->OEMED3 with 0
				Else
					Replace (cAliasTRB)->OEMED3 with (t_OE3KHZ+t_OE4KHZ+t_OE6KHZ)/3
				Endif
				lAusente3 := .F.
				lAusente5 := .F.
				If TM9->TM9_OEREFE == "1"
					Replace (cAliasTRB)->OEREFE with STR0022// "Sim"
				Else
					Replace (cAliasTRB)->OEREFE with STR0023// "Não"
				EndIf

				If TM9->TM9_INDVIA == "1"
					Replace (cAliasTRB)->INDVIA with STR0024//  "1-Via Aerea"
				Else
					Replace (cAliasTRB)->INDVIA with STR0025//  "2- Via Ossea"
				EndIf
			Dbselectarea("TM9")
			Dbskip()
		End

		Dbselectarea(cAliasTRB)
		Dbsetorder(1)
		Dbgotop()
		If (cAliasTRB)->(Reccount()) <= 0
			dbSelectArea(cAliasTRB)
			Use
			RestArea(aArea)
			lRefresh := .t.
			Msgstop(STR0107,STR0108)//"Não existem exames audiométricos realizados anteriormente.", "Atenção"
			Return .t.
		Endif

		DEFINE FONT oFont NAME "Arial" SIZE 0,-12
		DEFINE MSDIALOG oDlgF TITLE OemToAnsi(STR0105) From 11,10 To 32,94.5 OF oMainWnd  //"Resultados Anteriores"

		DbselectArea((cAliasTRB))
		Dbgotop()
		@ 0.9,0.1 LISTBOX FIELDS   Transform(DTRESU,"99/99/9999"),;
									ODRESU,;
									Transform(ODMED5,"999.99"),;
									Transform(ODMED3,"999.99"),;
									ODREFE,;
									OERESU,;
									Transform(OEMED5,"999.99"),;
									Transform(OEMED3,"999.99"),;
									OEREFE,;
									INDVIA,;
									FieldSizes 11,40,08,08,20,40,08,08,20,20;
									Size 335,149;
									HEADERS STR0092,;// "Data Resultado"
									STR0035,;//  "ORELHA DIREITA"
									STR0111,;//"Média Or. D. .5 "
									STR0113,;//"Média Or. D. 3 "
									STR0109,;//"Or. Direita Referencial?"
									STR0041,;//  "ORELHA ESQUERDA"
									STR0112,;//"Média Or. E. .5 "
									STR0114,;//"Média Or. E. 3 "
									STR0110,;//"Or. Esquerda Referencial?"
									STR0032//  "Via Conducao"
		ACTIVATE MSDIALOG oDlgF ON INIT EnchoiceBar(oDlgF,{|| nOpca1 := 1,oDlgf:End()},{|| nOpca1 := 2,oDlgf:End()})
		dbSelectArea((cAliasTRB))
		Use
		RestArea(aArea)

	Else

		dbSelectArea("TM9")

		aDBF := {}
		AADD(aDBF,{ "DTRESU" , "D" ,10, 0 })
		AADD(aDBF,{ "ODRESU" , "C" ,40, 0 })
		AADD(aDBF,{ "ODMED5" , "N" ,07, 2 })
		AADD(aDBF,{ "ODMED3" , "N" ,07, 2 })
		AADD(aDBF,{ "ODREFE" , "C" ,08, 0 })
		AADD(aDBF,{ "OERESU" , "C" ,40, 0 })
		AADD(aDBF,{ "OEMED5" , "N" ,07, 2 })
		AADD(aDBF,{ "OEMED3" , "N" ,07, 2 })
		AADD(aDBF,{ "OEREFE" , "C" ,08, 0 })
		AADD(aDBF,{ "INDVIA" , "C" ,20, 0 })

		cAliasTRB := GetNextAlias()
		oTempTable := FWTemporaryTable():New( cAliasTRB, aDBF )
		oTempTable:AddIndex( "1", {"DTRESU","INDVIA"} )
		oTempTable:Create()

		Dbselectarea("TM9")
		Dbsetorder(1)
		Dbseek(xFilial("TM9"))
		While !eof() .and. TM9->TM9_FILIAL == xFilial("TM9")
				IF TM9->TM9_NUMFIC != cNUMFIC
					DbSelectArea("TM9")
					Dbskip()
					Loop
				ENDIF

				(cAliasTRB)->(DbAppend())
				dbSelectArea("TM5")
				dbSetOrder(1)

				dbSeek(xFilial("TM5") + TM9->TM9_NUMFIC + DTOS(TM9->TM9_DTPROG) + TM9->TM9_EXAME)
				Replace (cAliasTRB)->DTRESU with TM5->TM5_DTRESU

				If TM9->TM9_ODRESU == "1"
					Replace (cAliasTRB)->ODRESU with STR0070//"1-Requer Interpretação"
				ENDIF
				If TM9->TM9_ODRESU == "2"
					Replace (cAliasTRB)->ODRESU with STR0026//"2-Limiares Aceitaveis"
				ENDIF
				If TM9->TM9_ODRESU == "3"
					Replace (cAliasTRB)->ODRESU with STR0027//"3-Sugestivo do PAIR"
				ENDIF
				If TM9->TM9_ODRESU == "4"
					Replace (cAliasTRB)->ODRESU with STR0028//"4-Nao Sugestivo do PAIR"
				ENDIF
				If TM9->TM9_ODRESU == "5"
					Replace (cAliasTRB)->ODRESU with STR0029//"5-Sugestivo de Desencadeamento"
				ENDIF
				If TM9->TM9_ODRESU == "6"
					Replace (cAliasTRB)->ODRESU with STR0030//"6-Sugestivo de Agravamento"
				ENDIF
				If TM9->TM9_ODRESU == "7"
					Replace (cAliasTRB)->ODRESU with STR0075//"7-Perda de Audição"
				ENDIF

				If TM9->TM9_INDVIA == "1"
					If TM9->TM9_ODMED5 = 999.99
						Replace (cAliasTRB)->ODMED5 with 0
					Else
						Replace (cAliasTRB)->ODMED5 with TM9->TM9_ODMED5
					Endif
					If TM9->TM9_ODMED3 = 999.99
						Replace (cAliasTRB)->ODMED3 with 0
					Else
						Replace (cAliasTRB)->ODMED3 with TM9->TM9_ODMED3
					Endif
				Else
					t_OD05KH := IF(TM9->TM9_OD05KH == -1 .or. TM9->TM9_OD05KH == -2, lAusente5 := .T., TM9->TM9_OD05KH)
					t_OD1KHZ := IF(TM9->TM9_OD1KHZ == -1 .or. TM9->TM9_OD1KHZ == -2, lAusente5 := .T., TM9->TM9_OD1KHZ)
					t_OD2KHZ := IF(TM9->TM9_OD2KHZ == -1 .or. TM9->TM9_OD2KHZ == -2, lAusente5 := .T., TM9->TM9_OD2KHZ)
					t_OD3KHZ := IF(TM9->TM9_OD3KHZ == -1 .or. TM9->TM9_OD3KHZ == -2, lAusente3 := .T., TM9->TM9_OD3KHZ)
					t_OD4KHZ := IF(TM9->TM9_OD4KHZ == -1 .or. TM9->TM9_OD4KHZ == -2, lAusente3 := .T., TM9->TM9_OD4KHZ)

					If lAusente5
						Replace (cAliasTRB)->ODMED5 with 0
					Else
						Replace (cAliasTRB)->ODMED5 with (t_OD05KH+t_OD1KHZ+t_OD2KHZ)/3
					Endif
					If lAusente3
						Replace (cAliasTRB)->ODMED3 with 0
					Else
						Replace (cAliasTRB)->ODMED3 with (t_OD3KHZ+t_OD4KHZ)/2
					Endif
				Endif
				lAusente3 := .F.
				lAusente5 := .F.
				If TM9->TM9_ODREFE == "1"
					Replace (cAliasTRB)->ODREFE with STR0022// "Sim"
				Else
					Replace (cAliasTRB)->ODREFE with STR0023// "Não"
				EndIf

				If TM9->TM9_OERESU == "1"
					Replace (cAliasTRB)->OERESU with STR0070//"1-Requer Interpretação"
				ENDIF
				If TM9->TM9_OERESU == "2"
					Replace (cAliasTRB)->OERESU with STR0026//"2-Limiares Aceitaveis"
				ENDIF
				If TM9->TM9_OERESU == "3"
					Replace (cAliasTRB)->OERESU with STR0027//"3-Sugestivo do PAIR"
				ENDIF
				If TM9->TM9_OERESU == "4"
					Replace (cAliasTRB)->OERESU with STR0028//"4-Nao Sugestivo do PAIR"
				ENDIF
				If TM9->TM9_OERESU == "5"
					Replace (cAliasTRB)->OERESU with STR0029//"5-Sugestivo de Desencadeamento"
				ENDIF
				If TM9->TM9_OERESU == "6"
					Replace (cAliasTRB)->OERESU with STR0030//"6-Sugestivo de Agravamento"
				ENDIF
				If TM9->TM9_OERESU == "7"
					Replace (cAliasTRB)->OERESU with STR0075//"7-Perda de Audição"
				ENDIF

				If TM9->TM9_INDVIA == "1"
					If TM9->TM9_OEMED5 = 999.99
						Replace (cAliasTRB)->OEMED5 with 0
					Else
						Replace (cAliasTRB)->OEMED5 with TM9->TM9_OEMED5
					Endif
					If TM9->TM9_OEMED3 = 999.99
						Replace (cAliasTRB)->OEMED3 with 0
					Else
						Replace (cAliasTRB)->OEMED3 with TM9->TM9_OEMED3
					Endif
				Else
					t_OE05KH := IF(TM9->TM9_OE05KH == -1 .or. TM9->TM9_OE05KH == -2, lAusente5 := .T., TM9->TM9_OE05KH)
					t_OE1KHZ := IF(TM9->TM9_OE1KHZ == -1 .or. TM9->TM9_OE1KHZ == -2, lAusente5 := .T., TM9->TM9_OE1KHZ)
					t_OE2KHZ := IF(TM9->TM9_OE2KHZ == -1 .or. TM9->TM9_OE2KHZ == -2, lAusente5 := .T., TM9->TM9_OE2KHZ)
					t_OE3KHZ := IF(TM9->TM9_OE3KHZ == -1 .or. TM9->TM9_OE3KHZ == -2, lAusente3 := .T., TM9->TM9_OE3KHZ)
					t_OE4KHZ := IF(TM9->TM9_OE4KHZ == -1 .or. TM9->TM9_OE4KHZ == -2, lAusente3 := .T., TM9->TM9_OE4KHZ)

					If lAusente5
						Replace (cAliasTRB)->OEMED5 with 0
					Else
						Replace (cAliasTRB)->OEMED5 with (t_OE05KH+t_OE1KHZ+t_OE2KHZ)/3
					Endif
					If lAusente3
						Replace (cAliasTRB)->OEMED3 with 0
					Else
						Replace (cAliasTRB)->OEMED3 with (t_OE3KHZ+t_OE4KHZ)/2
					Endif
				Endif
				lAusente3 := .F.
				lAusente5 := .F.
				If TM9->TM9_OEREFE == "1"
					Replace (cAliasTRB)->OEREFE with STR0022// "Sim"
				Else
					Replace (cAliasTRB)->OEREFE with STR0023// "Não"
				EndIf

				If TM9->TM9_INDVIA == "1"
					Replace (cAliasTRB)->INDVIA with STR0024//  "1-Via Aerea"
				Else
					Replace (cAliasTRB)->INDVIA with STR0025//  "2- Via Ossea"
				EndIf
			Dbselectarea("TM9")
			Dbskip()
		End

		Dbselectarea((cAliasTRB))
		Dbsetorder(1)
		Dbgotop()
		If (cAliasTRB)->(Reccount()) <= 0
			dbSelectArea(cAliasTRB)
			Use
			RestArea(aArea)
			lRefresh := .t.
			Msgstop(STR0107,STR0108)//"Não existem exames audiométricos realizados anteriormente.", "Atenção"
			Return .t.
		Endif

		DEFINE FONT oFont NAME "Arial" SIZE 0,-12
		DEFINE MSDIALOG oDlgF TITLE OemToAnsi(STR0105) From 11,10 To 32,94.5 OF oMainWnd  //"Resultados Anteriores"

		DbselectArea((cAliasTRB))
		Dbgotop()
		@ 0.9,0.1 LISTBOX FIELDS   Transform(DTRESU,"99/99/9999"),;
									ODRESU,;
									Transform(ODMED5,"999.99"),;
									Transform(ODMED3,"999.99"),;
									ODREFE,;
									OERESU,;
									Transform(OEMED5,"999.99"),;
									Transform(OEMED3,"999.99"),;
									OEREFE,;
									INDVIA,;
									FieldSizes 11,40,08,08,20,40,08,08,20,20;
									Size 335,149;
									HEADERS STR0092,;// "Data Resultado"
									STR0035,;//  "ORELHA DIREITA"
									STR0111,;//"Média Or. D. .5 "
									STR0113,;//"Média Or. E. 3 "
									STR0109,;//"Or. Direita Referencial?"
									STR0041,;//  "ORELHA ESQUERDA"
									STR0112,;//"Média Or. E. .5 "
									STR0114,;//"Média Or. E. 3 "
									STR0110,;//"Or. Esquerda Referencial?"
									STR0032//  "Via Conducao"
		ACTIVATE MSDIALOG oDlgF ON INIT EnchoiceBar(oDlgF,{|| nOpca1 := 1,oDlgf:End()},{|| nOpca1 := 2,oDlgf:End()})
		dbSelectArea((cAliasTRB))
		Use
		RestArea(aArea)
	Endif

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fMod3Audio
Visualizar,Incluir,Alterar exames audiometria
@type static function
@author Denis
@since 26/01/2009
@param cAlias, caracter, alias da tabela principal da rotina
@param nReg, numeric, recno do registro posicionado
@param nOpcx, numeric, tipo de operação realizada
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function fMod3Audio(cAlias,nReg,nOpcx)

	Local nX
	Local aScrRes   := GetScreenRes()
	Local lFlatMode := If( aScrRes[2] <= 768 , If(FindFunction("FLATMODE"),FlatMode(),SetMDIChild()) , .F. )

	Local nLi
	Local nLi2
	Local nCol
	Local nCol2
	Local nCol3
	Local nCol4
	Local nBase := 135

	Local aPages := {}, aTitles := {}, aVar := {}
	Local nControl := 0
	Local oFont
	Local oMemo, oMenu
	Local lAerea := .F.
	Local cUsdNor := ""
	Local oDlg
	Local oFont12  := TFont():New("Arial",,-12,.T.,.T.)
	Local lMV_NG2UTM9 := If( SuperGetMv("MV_NG2UTM9",.F.,"N") == "S", .t. , .f. )
	Local cLastEqu := Space(Len(TM9->TM9_EQPTO))
	Local dLastAfe := StoD("")
	Local dLastCal := StoD("")
	Local cLastRes := Space(12)
	Local cLastDes := Space(30)
	Local cLastNom := Space(20)

	If lMV_NG2UTM9 //Busca ultimo equipamento e responsavel utilizado
		aRetFun  := fLastTM9()
		cLastEqu := If(aRetFun[1]<>nil,aRetFun[1],cLastEqu)
		cLastRes := If(aRetFun[2]<>nil,aRetFun[2],cLastRes)
	Endif

	Private nParFocus := 1 //Indica a mudança de foco
	Private cPerg120  := "MDT120F"

	Pergunte(cPerg120,.F.)

	nParFocus := mv_par01

	//Checkbox - Via Aerea do Exame
	Private oM_VA_OD := {nil,nil,nil,nil,nil,nil,nil,nil}
	Private lM_VA_OD := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
	Private oM_VA_OE := {nil,nil,nil,nil,nil,nil,nil,nil}
	Private lM_VA_OE := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
	Private oA_VA_OD := {nil,nil,nil,nil,nil,nil,nil,nil}
	Private lA_VA_OD := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
	Private oA_VA_OE := {nil,nil,nil,nil,nil,nil,nil,nil}
	Private lA_VA_OE := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}

	//Checkbox - Via Ossea do Exame
	Private oM_VO_OD := {nil,nil,nil,nil,nil}
	Private lM_VO_OD := {.F.,.F.,.F.,.F.,.F.}
	Private oM_VO_OE := {nil,nil,nil,nil,nil}
	Private lM_VO_OE := {.F.,.F.,.F.,.F.,.F.}
	Private oA_VO_OD := {nil,nil,nil,nil,nil}
	Private lA_VO_OD := {.F.,.F.,.F.,.F.,.F.}
	Private oA_VO_OE := {nil,nil,nil,nil,nil}
	Private lA_VO_OE := {.F.,.F.,.F.,.F.,.F.}

	//Checkbox - Via Aerea do Historico
	Private oM_HA_OD := {nil,nil,nil,nil,nil,nil,nil,nil}
	Private lM_HA_OD := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
	Private oM_HA_OE := {nil,nil,nil,nil,nil,nil,nil,nil}
	Private lM_HA_OE := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
	Private oA_HA_OD := {nil,nil,nil,nil,nil,nil,nil,nil}
	Private lA_HA_OD := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
	Private oA_HA_OE := {nil,nil,nil,nil,nil,nil,nil,nil}
	Private lA_HA_OE := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}

	//Checkbox - Via Ossea do Historico
	Private oM_HO_OD := {nil,nil,nil,nil,nil}
	Private lM_HO_OD := {.F.,.F.,.F.,.F.,.F.}
	Private oM_HO_OE := {nil,nil,nil,nil,nil}
	Private lM_HO_OE := {.F.,.F.,.F.,.F.,.F.}
	Private oA_HO_OD := {nil,nil,nil,nil,nil}
	Private lA_HO_OD := {.F.,.F.,.F.,.F.,.F.}
	Private oA_HO_OE := {nil,nil,nil,nil,nil}
	Private lA_HO_OE := {.F.,.F.,.F.,.F.,.F.}
	Private lAusente3 := .F., lAusente5 := .F.

	Private aButtons := {}

	Private cFilTM9 := xFilial("TM9")
	Private cFilTMK := xFilial("TMK")
	Private cFilTM7 := xfilial("TM7")

	Private oCbx,oCbxEx,oLeft05,oRight05,oAeDir25,oAeDir50,oCalcResult

	If nOpcx <> 2
		Aadd(aButtons,{"HISTORIC" ,{|| fImpRelat( cNUMFIC , dDTPROG , cHRPROG , cEXAME ) },STR0146,STR0147}) //"Imprimir Exame"###"Imprimir"
		Aadd(aButtons,{"PARAMETROS" ,{|| If(Pergunte(cPerg120,.T.),nParFocus := mv_par01,nil) },STR0169,STR0169}) //"Parâmetro"###"Parâmetro"
	EndIf

	//"1-Requer Interpretação"//"Normal"//"Surdez Leve"//"Surdez Moderada"//"Surdez Severa"//"Surdez Profunda"//"Surdez total"
	aClinico := {"1-"+STR0070,"2-"+STR0047,"3-"+STR0055,"4-"+STR0056,"5-"+STR0057,"6-"+STR0058,"7-"+STR0071}

	//"1-Requer Interpretação"//"Normal"//"3-Redução em Grau Mínimo"//"4-Redução em Grau Médio"//"5-Redução em Grau Máximo"//"6-Perda de Audição"
	aINSS := {"1-"+STR0070,"2-"+STR0047,"3-"+STR0072,"4-"+STR0073,"5-"+STR0074,"6-"+STR0075}
	aResul := {"1-"+STR0070,"2-"+STR0026,"3-"+STR0027,;//"1-Requer Interpretação"//"2-Limiares Aceitáveis"//"3-Sugestivo do PAIR"
				"4-"+STR0028,"5-"+STR0029,"6-"+STR0030,"7-"+STR0075}//"4-Não Sugestivo do PAIR"//"5-Sugestivo de Desencadeamento"//"6-Sugestivo de Agravamento"//7-Perda de audição

	aOrAnormal := MDTCbox("TM9_ODORIG"," ",1) //Carrega opcoes do combo TM9_ODORIG

	aRefer := {"1-"+STR0022,"2-"+STR0023} //"1-Sim"###"2-Nao"

	aCodRes := {"1-"+STR0047,"2-"+STR0096} //{"1-Normal","2-Alterado"," "}

	For nX := 6 to Len(aResul)
		aResul[nX] := Substr(aResul[nX],1,1)+"-"+Substr(aResul[nX],3)
	Next nX

	Private aSeqOE := {}
	Private aSeqOD := {}

	aDcibs := {"-10-"+STR0136,"-05-"+STR0136,"0-"+STR0136,"05-"+STR0136,"10-"+STR0136,"15-"+STR0136,"20-"+STR0136,"25-"+STR0136,;
			"30-"+STR0136,"35-"+STR0136,"40-"+STR0136,"45-"+STR0136,"50-"+STR0136,;
			"55-"+STR0136,"60-"+STR0136,"65-"+STR0136,"70-"+STR0136,"75-"+STR0136,;
			"80-"+STR0136,"85-"+STR0136,"90-"+STR0136,"95-"+STR0136,"100-"+STR0136,;
			"105-"+STR0136,"110-"+STR0136,"115-"+STR0136,"120-"+STR0136,"125-"+STR0136,"130-"+STR0136} //"Decibeis"

	aDICBS := {-10,-5,0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,;
			80,85,90,95,100,105,110,115,120,125,130}

	//--<><><><><><>-- Verifica se o campo 0,25 é usado

	Private l025od := .T.
	Private l025oe := .T.

	cUsdNor := GetSx3Cache( "TNC_HRACID", "X3_USADO" )

	l025od := (GetSx3Cache( "TM9_OD025K", "X3_USADO" ) == cUsdNor)
	l025oe := (GetSx3Cache( "TM9_OE025K", "X3_USADO" ) == cUsdNor)

	//--<><><><><><>--

	RegToMemory("TM5",.F.)
	If !Empty(M->TM5_INDRES)
		If Val(M->TM5_INDRES) > 0 .And. Val(M->TM5_INDRES) <= Len(aCodRes)
			M->TM5_INDRES := aCodRes[Val(M->TM5_INDRES)]
		Endif
	Endif
	RegToMemory("TM9",.T.)
	If !Empty(cLastRes)
		M->TM9_USURES := cLastRes
	ElseIf !MDTWHNSBI()
		M->TM9_USURES := MDTUSRLOG(1)
	Endif
	M->TM9_NOMUSU := cLastNom
	If !Empty(cLastEqu)
		M->TM9_EQPTO  := cLastEqu
	Endif

	// Campos UPDMDT87
	Private lUpdMdt87 := NGCADICBASE("TM9_ODLMIN","A","TM9",.F.)
	Private lUpdLimMk := fLimMask()
	M->TM9_ODLMIN := Space(3)
	M->TM9_ODLMAX := Space(3)
	M->TM9_OELMIN := Space(3)
	M->TM9_OELMAX := Space(3)
	M2_ODLMIN     := Space(3)
	M2_ODLMAX     := Space(3)
	M2_OELMIN     := Space(3)
	M2_OELMAX     := Space(3)
	M->TM9_ODMSRT := 0
	M->TM9_ODSDT  := 0
	M->TM9_ODMIRF := 0
	M->TM9_OEMSRT := 0
	M->TM9_OESDT  := 0
	M->TM9_OEMIRF := 0

	//Limiares
	M->TM9_OD025K := SPACE(3)
	M->TM9_OD05KH := SPACE(3)
	M->TM9_OD1KHZ := SPACE(3)
	M->TM9_OD2KHZ := SPACE(3)
	M->TM9_OD3KHZ := SPACE(3)
	M->TM9_OD4KHZ := SPACE(3)
	M->TM9_OD6KHZ := SPACE(3)
	M->TM9_OD8KHZ := SPACE(3)
	//Mascaramento
	M->TM9_ODMA25 := SPACE(3)
	M->TM9_ODMA50 := SPACE(3)
	M->TM9_ODMA10 := SPACE(3)
	M->TM9_ODMA20 := SPACE(3)
	M->TM9_ODMA30 := SPACE(3)
	M->TM9_ODMA40 := SPACE(3)
	M->TM9_ODMA60 := SPACE(3)
	M->TM9_ODMA80 := SPACE(3)

	//Limiares
	M->TM9_OE05KH := SPACE(3)
	M->TM9_OE025K := SPACE(3)
	M->TM9_OE1KHZ := SPACE(3)
	M->TM9_OE2KHZ := SPACE(3)
	M->TM9_OE3KHZ := SPACE(3)
	M->TM9_OE4KHZ := SPACE(3)
	M->TM9_OE6KHZ := SPACE(3)
	M->TM9_OE8KHZ := SPACE(3)
	//Mascaramento
	M->TM9_OEMA25 := SPACE(3)
	M->TM9_OEMA50 := SPACE(3)
	M->TM9_OEMA10 := SPACE(3)
	M->TM9_OEMA20 := SPACE(3)
	M->TM9_OEMA30 := SPACE(3)
	M->TM9_OEMA40 := SPACE(3)
	M->TM9_OEMA60 := SPACE(3)
	M->TM9_OEMA80 := SPACE(3)

	//Metodos
	M->TM9_ODCLIN := aClinico[1]
	M->TM9_OECLIN := aClinico[1]
	M->TM9_ODINSS := aINSS[1]
	M->TM9_OEINSS := aINSS[1]
	M->TM9_ODRESU := aResul[1]
	M->TM9_OERESU := aResul[1]

	//Metodos - Portaria 19
	If Val(M->TM9_ODREFE) > 0 .And. Val(M->TM9_ODREFE) <= Len(aRefer)
		M->TM9_ODREFE := aRefer[VAL(M->TM9_ODREFE)]
	Else
		If TM5->TM5_NATEXA == "1"
			M->TM9_ODREFE := aRefer[1]
		Else
			M->TM9_ODREFE := aRefer[2]
		Endif
	Endif
	If Val(M->TM9_OEREFE) > 0 .And. Val(M->TM9_OEREFE) <= Len(aRefer)
		M->TM9_OEREFE := aRefer[VAL(M->TM9_OEREFE)]
	Else
		If TM5->TM5_NATEXA == "1"
			M->TM9_OEREFE := aRefer[1]
		Else
			M->TM9_OEREFE := aRefer[2]
		Endif
	Endif

	//Medias
	M->TM9_ODMED5 := Space(6)
	M->TM9_ODMED3 := Space(6)
	M->TM9_OEMED5 := Space(6)
	M->TM9_OEMED3 := Space(6)

	//Verifica se o Resultado da Via Aerea ja existe
	dbSelectArea( "TM9" )
	dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
	If dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "1" )	  //Via Aerea

		lAerea := .T.

		//----- Outras Informacoes -----------//
		//Meatoscopia
		M->TM9_ODMEAT := TM9->TM9_ODMEAT
		M->TM9_OEMEAT := TM9->TM9_OEMEAT
		//Logoaudiometria
		M->TM9_ODRECF := TM9->TM9_ODRECF
		M->TM9_ODREMO := TM9->TM9_ODREMO
		M->TM9_ODREDI := TM9->TM9_ODREDI
		M->TM9_OERECF := TM9->TM9_OERECF
		M->TM9_OEREMO := TM9->TM9_OEREMO
		M->TM9_OEREDI := TM9->TM9_OEREDI
		If lUpdMdt87
			M->TM9_ODLMIN := TM9->TM9_ODLMIN
			M->TM9_ODLMAX := TM9->TM9_ODLMAX
			M->TM9_OELMIN := TM9->TM9_OELMIN
			M->TM9_OELMAX := TM9->TM9_OELMAX
			M->TM9_ODMSRT := TM9->TM9_ODMSRT
			M->TM9_ODSDT  := TM9->TM9_ODSDT
			M->TM9_ODMIRF := TM9->TM9_ODMIRF
			M->TM9_OEMSRT := TM9->TM9_OEMSRT
			M->TM9_OESDT  := TM9->TM9_OESDT
			M->TM9_OEMIRF := TM9->TM9_OEMIRF
		Endif
		//Hrs Repouso
		M->TM9_REPOUS := TM9->TM9_REPOUS
		//Equipamento
		M->TM9_EQPTO  := TM9->TM9_EQPTO
		M->TM9_DTAFER := TM9->TM9_DTAFER
		M->TM9_DTCALI := TM9->TM9_DTCALI
		M->TM9_USURES := TM9->TM9_USURES
		//----------------------------------//

		//Limiares
		M->TM9_OD025K := NG120DtoC(TM9->TM9_OD025K, @lA_VA_OD[1] , TM9->TM9_ODAS25 )
		M->TM9_OD05KH := NG120DtoC(TM9->TM9_OD05KH, @lA_VA_OD[2] , TM9->TM9_ODAS50 )
		M->TM9_OD1KHZ := NG120DtoC(TM9->TM9_OD1KHZ, @lA_VA_OD[3] , TM9->TM9_ODAS10 )
		M->TM9_OD2KHZ := NG120DtoC(TM9->TM9_OD2KHZ, @lA_VA_OD[4] , TM9->TM9_ODAS20 )
		M->TM9_OD3KHZ := NG120DtoC(TM9->TM9_OD3KHZ, @lA_VA_OD[5] , TM9->TM9_ODAS30 )
		M->TM9_OD4KHZ := NG120DtoC(TM9->TM9_OD4KHZ, @lA_VA_OD[6] , TM9->TM9_ODAS40 )
		M->TM9_OD6KHZ := NG120DtoC(TM9->TM9_OD6KHZ, @lA_VA_OD[7] , TM9->TM9_ODAS60 )
		M->TM9_OD8KHZ := NG120DtoC(TM9->TM9_OD8KHZ, @lA_VA_OD[8] , TM9->TM9_ODAS80 )
		//Mascaramento
		M->TM9_ODMA25 := fMkToChar(TM9->TM9_ODMA25, @lM_VA_OD[1] , lA_VA_OD[1] )
		M->TM9_ODMA50 := fMkToChar(TM9->TM9_ODMA50, @lM_VA_OD[2] , lA_VA_OD[2] )
		M->TM9_ODMA10 := fMkToChar(TM9->TM9_ODMA10, @lM_VA_OD[3] , lA_VA_OD[3] )
		M->TM9_ODMA20 := fMkToChar(TM9->TM9_ODMA20, @lM_VA_OD[4] , lA_VA_OD[4] )
		M->TM9_ODMA30 := fMkToChar(TM9->TM9_ODMA30, @lM_VA_OD[5] , lA_VA_OD[5] )
		M->TM9_ODMA40 := fMkToChar(TM9->TM9_ODMA40, @lM_VA_OD[6] , lA_VA_OD[6] )
		M->TM9_ODMA60 := fMkToChar(TM9->TM9_ODMA60, @lM_VA_OD[7] , lA_VA_OD[7] )
		M->TM9_ODMA80 := fMkToChar(TM9->TM9_ODMA80, @lM_VA_OD[8] , lA_VA_OD[8] )

		//Limiares
		M->TM9_OE025K := NG120DtoC(TM9->TM9_OE025K, @lA_VA_OE[1] , TM9->TM9_OEAS25 )
		M->TM9_OE05KH := NG120DtoC(TM9->TM9_OE05KH, @lA_VA_OE[2] , TM9->TM9_OEAS50 )
		M->TM9_OE1KHZ := NG120DtoC(TM9->TM9_OE1KHZ, @lA_VA_OE[3] , TM9->TM9_OEAS10 )
		M->TM9_OE2KHZ := NG120DtoC(TM9->TM9_OE2KHZ, @lA_VA_OE[4] , TM9->TM9_OEAS20 )
		M->TM9_OE3KHZ := NG120DtoC(TM9->TM9_OE3KHZ, @lA_VA_OE[5] , TM9->TM9_OEAS30 )
		M->TM9_OE4KHZ := NG120DtoC(TM9->TM9_OE4KHZ, @lA_VA_OE[6] , TM9->TM9_OEAS40 )
		M->TM9_OE6KHZ := NG120DtoC(TM9->TM9_OE6KHZ, @lA_VA_OE[7] , TM9->TM9_OEAS60 )
		M->TM9_OE8KHZ := NG120DtoC(TM9->TM9_OE8KHZ, @lA_VA_OE[8] , TM9->TM9_OEAS80 )
		//Mascaramento
		M->TM9_OEMA25 := fMkToChar(TM9->TM9_OEMA25, @lM_VA_OE[1] , lA_VA_OE[1] )
		M->TM9_OEMA50 := fMkToChar(TM9->TM9_OEMA50, @lM_VA_OE[2] , lA_VA_OE[2] )
		M->TM9_OEMA10 := fMkToChar(TM9->TM9_OEMA10, @lM_VA_OE[3] , lA_VA_OE[3] )
		M->TM9_OEMA20 := fMkToChar(TM9->TM9_OEMA20, @lM_VA_OE[4] , lA_VA_OE[4] )
		M->TM9_OEMA30 := fMkToChar(TM9->TM9_OEMA30, @lM_VA_OE[5] , lA_VA_OE[5] )
		M->TM9_OEMA40 := fMkToChar(TM9->TM9_OEMA40, @lM_VA_OE[6] , lA_VA_OE[6] )
		M->TM9_OEMA60 := fMkToChar(TM9->TM9_OEMA60, @lM_VA_OE[7] , lA_VA_OE[7] )
		M->TM9_OEMA80 := fMkToChar(TM9->TM9_OEMA80, @lM_VA_OE[8] , lA_VA_OE[8] )

		//Medias
		If TM9->TM9_ODMED5 != 999.99
			M->TM9_ODMED5 := STRMED120(TM9->TM9_ODMED5)
		Endif
		If TM9->TM9_ODMED3 != 999.99
			M->TM9_ODMED3 := STRMED120(TM9->TM9_ODMED3)
		Endif
		If TM9->TM9_OEMED5 != 999.99
			M->TM9_OEMED5 := STRMED120(TM9->TM9_OEMED5)
		Endif
		If TM9->TM9_OEMED3 != 999.99
			M->TM9_OEMED3 := STRMED120(TM9->TM9_OEMED3)
		Endif

		//Resultados
		If !Empty(TM9->TM9_ODCLIN)
			M->TM9_ODCLIN := aClinico[VAL(TM9->TM9_ODCLIN)]
		Endif
		If !Empty(TM9->TM9_OECLIN)
			M->TM9_OECLIN := aClinico[VAL(TM9->TM9_OECLIN)]
		Endif

		If !Empty(TM9->TM9_ODINSS)
			M->TM9_ODINSS := aINSS[VAL(TM9->TM9_ODINSS)]
		Endif
		If !Empty(TM9->TM9_OEINSS)
			M->TM9_OEINSS := aINSS[VAL(TM9->TM9_OEINSS)]
		Endif

		//Portaria 19
		M->TM9_ODREFE := aRefer[VAL(TM9->TM9_ODREFE)]
		M->TM9_OEREFE := aRefer[VAL(TM9->TM9_OEREFE)]
		M->TM9_ODRESU := aResul[VAL(TM9->TM9_ODRESU)]
		M->TM9_OERESU := aResul[VAL(TM9->TM9_OERESU)]

		//Origem Anormalidade
		cIndArray := If(Empty(TM9->TM9_ODORIG),"1",TM9->TM9_ODORIG)
		M->TM9_ODORIG := cIndArray
		cIndArray := If(Empty(TM9->TM9_OEORIG),"1",TM9->TM9_OEORIG)
		M->TM9_OEORIG := cIndArray

	Endif

	//Variaveis para armazenar o Resultado da Via Ossea
	//Limiares
	M2_OD05KH := SPACE(3)
	M2_OD1KHZ := SPACE(3)
	M2_OD2KHZ := SPACE(3)
	M2_OD3KHZ := SPACE(3)
	M2_OD4KHZ := SPACE(3)
	//Mascaramento
	M2_ODMA50 := SPACE(3)
	M2_ODMA10 := SPACE(3)
	M2_ODMA20 := SPACE(3)
	M2_ODMA30 := SPACE(3)
	M2_ODMA40 := SPACE(3)
	//Limiares Ausentes
	M2_ODAS50 := SPACE(3)
	M2_ODAS10 := SPACE(3)
	M2_ODAS20 := SPACE(3)
	M2_ODAS30 := SPACE(3)
	M2_ODAS40 := SPACE(3)
	//Limiares
	M2_OE05KH := SPACE(3)
	M2_OE1KHZ := SPACE(3)
	M2_OE2KHZ := SPACE(3)
	M2_OE3KHZ := SPACE(3)
	M2_OE4KHZ := SPACE(3)
	//Mascaramento
	M2_OEMA50 := SPACE(3)
	M2_OEMA10 := SPACE(3)
	M2_OEMA20 := SPACE(3)
	M2_OEMA30 := SPACE(3)
	M2_OEMA40 := SPACE(3)
	//Mascaramento
	M2_OEAS50 := SPACE(3)
	M2_OEAS10 := SPACE(3)
	M2_OEAS20 := SPACE(3)
	M2_OEAS30 := SPACE(3)
	M2_OEAS40 := SPACE(3)

	//Verifica se o Resultado da Via Ossea ja existe
	dbSelectArea( "TM9" )
	dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
	If dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "2" )	  //Via Ossea

		If !lAerea  //Se foi gravado apenas o Resultado da Via Ossea
			//----- Outras Informacoes ----------//
			//Meatoscopia
			M->TM9_ODMEAT := TM9->TM9_ODMEAT
			M->TM9_OEMEAT := TM9->TM9_OEMEAT
			//Logoaudiometria
			M->TM9_ODRECF := TM9->TM9_ODRECF
			M->TM9_ODREMO := TM9->TM9_ODREMO
			M->TM9_ODREDI := TM9->TM9_ODREDI
			M->TM9_OERECF := TM9->TM9_OERECF
			M->TM9_OEREMO := TM9->TM9_OEREMO
			M->TM9_OEREDI := TM9->TM9_OEREDI
			If lUpdMdt87
				M->TM9_ODMSRT := TM9->TM9_ODMSRT
				M->TM9_ODSDT  := TM9->TM9_ODSDT
				M->TM9_ODMIRF := TM9->TM9_ODMIRF
				M->TM9_OEMSRT := TM9->TM9_OEMSRT
				M->TM9_OESDT  := TM9->TM9_OESDT
				M->TM9_OEMIRF := TM9->TM9_OEMIRF
			Endif
			//Hrs Repouso
			M->TM9_REPOUS := TM9->TM9_REPOUS
			//Equipamento
			M->TM9_EQPTO  := TM9->TM9_EQPTO
			M->TM9_DTAFER := TM9->TM9_DTAFER
			M->TM9_DTCALI := TM9->TM9_DTCALI
			M->TM9_USURES := TM9->TM9_USURES
			//----------------------------------//
		Endif

		If lUpdMdt87
			M2_ODLMIN := TM9->TM9_ODLMIN
			M2_ODLMAX := TM9->TM9_ODLMAX
			M2_OELMIN := TM9->TM9_OELMIN
			M2_OELMAX := TM9->TM9_OELMAX
		Endif

		//Limiares
		M2_OD05KH := NG120DtoC(TM9->TM9_OD05KH, @lA_VO_OD[1] , TM9->TM9_ODAS50 )
		M2_OD1KHZ := NG120DtoC(TM9->TM9_OD1KHZ, @lA_VO_OD[2] , TM9->TM9_ODAS10 )
		M2_OD2KHZ := NG120DtoC(TM9->TM9_OD2KHZ, @lA_VO_OD[3] , TM9->TM9_ODAS20 )
		M2_OD3KHZ := NG120DtoC(TM9->TM9_OD3KHZ, @lA_VO_OD[4] , TM9->TM9_ODAS30 )
		M2_OD4KHZ := NG120DtoC(TM9->TM9_OD4KHZ, @lA_VO_OD[5] , TM9->TM9_ODAS40 )
		//Mascaramento
		M2_ODMA50 := fMkToChar(TM9->TM9_ODMA50, @lM_VO_OD[1] , lA_VO_OD[1] )
		M2_ODMA10 := fMkToChar(TM9->TM9_ODMA10, @lM_VO_OD[2] , lA_VO_OD[2] )
		M2_ODMA20 := fMkToChar(TM9->TM9_ODMA20, @lM_VO_OD[3] , lA_VO_OD[3] )
		M2_ODMA30 := fMkToChar(TM9->TM9_ODMA30, @lM_VO_OD[4] , lA_VO_OD[4] )
		M2_ODMA40 := fMkToChar(TM9->TM9_ODMA40, @lM_VO_OD[5] , lA_VO_OD[5] )

		//Lineares
		M2_OE05KH := NG120DtoC(TM9->TM9_OE05KH, @lA_VO_OE[1] , TM9->TM9_OEAS50 )
		M2_OE1KHZ := NG120DtoC(TM9->TM9_OE1KHZ, @lA_VO_OE[2] , TM9->TM9_OEAS10 )
		M2_OE2KHZ := NG120DtoC(TM9->TM9_OE2KHZ, @lA_VO_OE[3] , TM9->TM9_OEAS20 )
		M2_OE3KHZ := NG120DtoC(TM9->TM9_OE3KHZ, @lA_VO_OE[4] , TM9->TM9_OEAS30 )
		M2_OE4KHZ := NG120DtoC(TM9->TM9_OE4KHZ, @lA_VO_OE[5] , TM9->TM9_OEAS40 )
		//Mascaramento
		M2_OEMA50 := fMkToChar(TM9->TM9_OEMA50, @lM_VO_OE[1] , lM_VO_OE[1] )
		M2_OEMA10 := fMkToChar(TM9->TM9_OEMA10, @lM_VO_OE[2] , lM_VO_OE[2] )
		M2_OEMA20 := fMkToChar(TM9->TM9_OEMA20, @lM_VO_OE[3] , lM_VO_OE[3] )
		M2_OEMA30 := fMkToChar(TM9->TM9_OEMA30, @lM_VO_OE[4] , lM_VO_OE[4] )
		M2_OEMA40 := fMkToChar(TM9->TM9_OEMA40, @lM_VO_OE[5] , lM_VO_OE[5] )

	Endif

	NOEQUIP1()

	VNomeUsu(M->TM9_USURES)

	nOPCA := 0
	nCorAzul := 16742173

	//Array dos Resultados Anteriores
	aRetHis   := fResulAnt() //Carrega resultados anteriores
	aDadosHis := aRetHis[1]
	aHead_His := aRetHis[2]
	aHistorTM9:= aRetHis[3]
	aBoxDtEx  := aRetHis[4]
	cBoxDtEx  := aBoxDtEx[1]

	//Definicao da Tela
	Aadd(aTitles,OemToAnsi(STR0148)) //"Resultado Atual x Referência"
	Aadd(aPages,"Header 1")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0149)) //"Parecer Clínico"
	Aadd(aPages,"Header 2")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0089)) //"Logoaudiometria"
	Aadd(aPages,"Header 3")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0078)) //"&Outras Informações"
	Aadd(aPages,"Header 4")
	nControl++

	DEFINE FONT oFont NAME "Arial" SIZE 0,-11

	Define MsDialog oDlg Title STR0090 From 0,0 To 41,120 Of oMainWnd COLOR CLR_BLACK,CLR_WHITE //"Resultado - Exame Audiométrico"
	oPanelDlg:= tPanel():New(01,01,,oDlg,,,,,,0,0)
	oPanelDlg:Align := CONTROL_ALIGN_ALLCLIENT

	oPanel:= tPanel():New(01,01,,oPanelDlg,,,,CLR_BLACK,14211288,20,20)
	oPanel:Align := CONTROL_ALIGN_TOP

	@ 0.3,0.6 Say   STR0150  Of oPanel //"Ficha Médica"
	@ 0.2,006 MsGet MDTHideCpo( TM0->TM0_NUMFIC, "TM0_NUMFIC" ) Size 30,10 Of oPanel When .F.
	@ 0.2,011 MsGet MDTHideCpo( TM0->TM0_NOMFIC, "TM0_NOMFIC" ) Size 120,10 Of oPanel When .F.

	oFolder := TFolder():New(2,0,aTitles,aPages,oPanelDlg,,,,.F.,.F.,482.7,250,)
	oFolder:aDialogs[1]:oFont := oDlg:oFont
	oFolder:aDialogs[2]:oFont := oDlg:oFont
	oFolder:aDialogs[3]:oFont := oDlg:oFont
	oFolder:aDialogs[4]:oFont := oDlg:oFont
	oFolder:Align := CONTROL_ALIGN_ALLCLIENT

	// Folder 01
	oPanelF1 := TPanel():New(0,0,,oFolder:aDialogs[1],,,,,CLR_WHITE,10,10,.F.,.F.)
	oPanelF1:Align := CONTROL_ALIGN_ALLCLIENT

	//VIA AEREA - ORELHA DIREITA
	@ 0.2,0.2 TO 3.7+If(lUpdMdt87 .And. lUpdLimMk,1.2,0),28.9 LABEL STR0151 OF oPanelF1 Color CLR_HRED //"Via Aérea"

	//Limiares - Direita e Esquerda
	If l025od
		@ 0.9,1.3 SAY OemToAnsi("0,25") OF oPanelF1 Color CLR_HRED
		@ 1.5,0.6 MSGET M->TM9_OD025K SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OD025K) OF oPanelF1
	Endif
	@ 0.9,5.35 SAY OemToAnsi("0,5") OF oPanelF1 Color CLR_HRED
	@ 1.5,4.1  MSGET M->TM9_OD05KH SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OD05KH) .and. fAvgCalc() OF oPanelF1
	@ 0.9,9.1  SAY OemToAnsi("1") OF oPanelF1 Color CLR_HRED
	@ 1.5,7.6  MSGET M->TM9_OD1KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OD1KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,12.6 SAY OemToAnsi("2") OF oPanelF1 Color CLR_HRED
	@ 1.5,11.1 MSGET M->TM9_OD2KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OD2KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,16.1 SAY OemToAnsi("3") OF oPanelF1 Color CLR_HRED
	@ 1.5,14.6 MSGET M->TM9_OD3KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OD3KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,19.6 SAY OemToAnsi("4") OF oPanelF1 Color CLR_HRED
	@ 1.5,18.1 MSGET M->TM9_OD4KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OD4KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,23.1 SAY OemToAnsi("6") OF oPanelF1 Color CLR_HRED
	@ 1.5,21.6 MSGET M->TM9_OD6KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OD6KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,26.6 SAY OemToAnsi("8") OF oPanelF1 Color CLR_HRED
	@ 1.5,25.1 MSGET M->TM9_OD8KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OD8KHZ) .and. fAltFocus(1) OF oPanelF1

	If l025oe
		@ 0.9,30.3  SAY OemToAnsi("0,25") OF oPanelF1 Color nCorAzul
		@ 1.5,29.6 MSGET oAeDir25 Var M->TM9_OE025K SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OE025K) OF oPanelF1
	Endif
	@ 0.9,34.35 SAY OemToAnsi("0,5") OF oPanelF1 Color nCorAzul
	@ 1.5,33.1 MSGET oAeDir50 Var M->TM9_OE05KH SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OE05KH) .and. fAvgCalc() OF oPanelF1
	@ 0.9,38.1  SAY OemToAnsi("1") OF oPanelF1 Color nCorAzul
	@ 1.5,36.6 MSGET M->TM9_OE1KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OE1KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,41.6  SAY OemToAnsi("2") OF oPanelF1 Color nCorAzul
	@ 1.5,40.1 MSGET M->TM9_OE2KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OE2KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,45.1  SAY OemToAnsi("3") OF oPanelF1 Color nCorAzul
	@ 1.5,43.6 MSGET M->TM9_OE3KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OE3KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,48.6  SAY OemToAnsi("4") OF oPanelF1 Color nCorAzul
	@ 1.5,47.1 MSGET M->TM9_OE4KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OE4KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,52.1  SAY OemToAnsi("6") OF oPanelF1 Color nCorAzul
	@ 1.5,50.6 MSGET M->TM9_OE6KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OE6KHZ) .and. fAvgCalc() OF oPanelF1
	@ 0.9,55.6  SAY OemToAnsi("8") OF oPanelF1 Color nCorAzul
	@ 1.5,54.1 MSGET M->TM9_OE8KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OE8KHZ) .and. fAltFocus(2) OF oPanelF1

	If l025od
		@ 2.3,1.6 SAY "M" OF oPanelF1 Color CLR_HRED
		@ 2.3,3.2 SAY "A" OF oPanelF1 Color CLR_HRED
		@ 28,04   Checkbox oM_VA_OD[1] Var lM_VA_OD[1] On Change ValChkMas( lM_VA_OD[1] , oA_VA_OD[1] , "M->TM9_ODMA25" ) Prompt " " Size 30,7 OF oPanelF1
		@ 28,17   Checkbox oA_VA_OD[1] Var lA_VA_OD[1] On Change ValChkAus( lA_VA_OD[1] , oA_VA_OD[2] , "M->TM9_ODMA25" , "M->TM9_OD025K" , @lM_VA_OD[1] ) Prompt " " Size 30,7 OF oPanelF1
	Endif
	@ 2.3,5.1  SAY "M" OF oPanelF1 Color CLR_HRED
	@ 2.3,6.7  SAY "A" OF oPanelF1 Color CLR_HRED
	@ 28,32    Checkbox oM_VA_OD[2] Var lM_VA_OD[2] On Change ValChkMas( lM_VA_OD[2] , oA_VA_OD[2] , "M->TM9_ODMA50" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,45    Checkbox oA_VA_OD[2] Var lA_VA_OD[2] On Change ValChkAus( lA_VA_OD[2] , oA_VA_OD[3] , "M->TM9_ODMA50" , "M->TM9_OD05KH" , @lM_VA_OD[2] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,8.6  SAY "M" OF oPanelF1 Color CLR_HRED
	@ 2.3,10.2 SAY "A" OF oPanelF1 Color CLR_HRED
	@ 28,60    Checkbox oM_VA_OD[3] Var lM_VA_OD[3] On Change ValChkMas( lM_VA_OD[3] , oA_VA_OD[3] , "M->TM9_ODMA10" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,73    Checkbox oA_VA_OD[3] Var lA_VA_OD[3] On Change ValChkAus( lA_VA_OD[3] , oA_VA_OD[4] , "M->TM9_ODMA10" , "M->TM9_OD1KHZ" , @lM_VA_OD[3] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,12.1 SAY "M" OF oPanelF1 Color CLR_HRED
	@ 2.3,13.7 SAY "A" OF oPanelF1 Color CLR_HRED
	@ 28,88    Checkbox oM_VA_OD[4] Var lM_VA_OD[4] On Change ValChkMas( lM_VA_OD[4] , oA_VA_OD[4] , "M->TM9_ODMA20" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,101   Checkbox oA_VA_OD[4] Var lA_VA_OD[4] On Change ValChkAus( lA_VA_OD[4] , oA_VA_OD[5] , "M->TM9_ODMA20" , "M->TM9_OD2KHZ" , @lM_VA_OD[4] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,15.6 SAY "M" OF oPanelF1 Color CLR_HRED
	@ 2.3,17.2 SAY "A" OF oPanelF1 Color CLR_HRED
	@ 28,116   Checkbox oM_VA_OD[5] Var lM_VA_OD[5] On Change ValChkMas( lM_VA_OD[5] , oA_VA_OD[5] , "M->TM9_ODMA30" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,129   Checkbox oA_VA_OD[5] Var lA_VA_OD[5] On Change ValChkAus( lA_VA_OD[5] , oA_VA_OD[6] , "M->TM9_ODMA30" , "M->TM9_OD3KHZ" , @lM_VA_OD[5] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,19.1 SAY "M" OF oPanelF1 Color CLR_HRED
	@ 2.3,20.7 SAY "A" OF oPanelF1 Color CLR_HRED
	@ 28,144   Checkbox oM_VA_OD[6] Var lM_VA_OD[6] On Change ValChkMas( lM_VA_OD[6] , oA_VA_OD[6] , "M->TM9_ODMA40" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,157   Checkbox oA_VA_OD[6] Var lA_VA_OD[6] On Change ValChkAus( lA_VA_OD[6] , oA_VA_OD[7] , "M->TM9_ODMA40" , "M->TM9_OD4KHZ" , @lM_VA_OD[6] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,22.6 SAY "M" OF oPanelF1 Color CLR_HRED
	@ 2.3,24.2 SAY "A" OF oPanelF1 Color CLR_HRED
	@ 28,172   Checkbox oM_VA_OD[7] Var lM_VA_OD[7] On Change ValChkMas( lM_VA_OD[7] , oA_VA_OD[7] , "M->TM9_ODMA60" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,185   Checkbox oA_VA_OD[7] Var lA_VA_OD[7] On Change ValChkAus( lA_VA_OD[7] , oA_VA_OD[8] , "M->TM9_ODMA60" , "M->TM9_OD6KHZ" , @lM_VA_OD[7] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,26.1 SAY "M" OF oPanelF1 Color CLR_HRED
	@ 2.3,27.7 SAY "A" OF oPanelF1 Color CLR_HRED
	@ 28,200   Checkbox oM_VA_OD[8] Var lM_VA_OD[8] On Change ValChkMas( lM_VA_OD[8] , oA_VA_OD[8] , "M->TM9_ODMA80" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,213   Checkbox oA_VA_OD[8] Var lA_VA_OD[8] On Change ValChkAus( lA_VA_OD[8] , oA_VA_OD[7] , "M->TM9_ODMA80" , "M->TM9_OD8KHZ" , @lM_VA_OD[8] ) Prompt " " Size 30,7 OF oPanelF1

	//VIA AEREA - ORELHA ESQUERDA
	@ 0.2,29.2 TO 3.7+If(lUpdMdt87 .and. lUpdLimMk,1.2,0),57.9 LABEL STR0151 OF oPanelF1 Color nCorAzul //"Via Aérea"

	If l025od
		@ 2.3,30.6 SAY "M" OF oPanelF1 Color nCorAzul
		@ 2.3,32.2 SAY "A" OF oPanelF1 Color nCorAzul
		@ 28,236   Checkbox oM_VA_OE[1] Var lM_VA_OE[1] On Change ValChkMas( lM_VA_OE[1] , oA_VA_OE[1] , "M->TM9_OEMA25" ) Prompt " " Size 30,7 OF oPanelF1
		@ 28,249   Checkbox oA_VA_OE[1] Var lA_VA_OE[1] On Change ValChkAus( lA_VA_OE[1] , oA_VA_OE[2] , "M->TM9_OEMA25" , "M->TM9_OE025K" , @lM_VA_OE[1] ) Prompt " " Size 30,7 OF oPanelF1
	Endif
	@ 2.3,34.1 SAY "M" OF oPanelF1 Color nCorAzul
	@ 2.3,35.7 SAY "A" OF oPanelF1 Color nCorAzul
	@ 28,264   Checkbox oM_VA_OE[2] Var lM_VA_OE[2] On Change ValChkMas( lM_VA_OE[2] , oA_VA_OE[2] , "M->TM9_OEMA50" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,277   Checkbox oA_VA_OE[2] Var lA_VA_OE[2] On Change ValChkAus( lA_VA_OE[2] , oA_VA_OE[3] , "M->TM9_OEMA50" , "M->TM9_OE05KH" , @lM_VA_OE[2] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,37.6 SAY "M" OF oPanelF1 Color nCorAzul
	@ 2.3,39.2 SAY "A" OF oPanelF1 Color nCorAzul
	@ 28,292   Checkbox oM_VA_OE[3] Var lM_VA_OE[3] On Change ValChkMas( lM_VA_OE[3] , oA_VA_OE[3] , "M->TM9_OEMA10" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,305   Checkbox oA_VA_OE[3] Var lA_VA_OE[3] On Change ValChkAus( lA_VA_OE[3] , oA_VA_OE[4] , "M->TM9_OEMA10" , "M->TM9_OE1KHZ" , @lM_VA_OE[3] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,41.1 SAY "M" OF oPanelF1 Color nCorAzul
	@ 2.3,42.7 SAY "A" OF oPanelF1 Color nCorAzul
	@ 28,320   Checkbox oM_VA_OE[4] Var lM_VA_OE[4] On Change ValChkMas( lM_VA_OE[4] , oA_VA_OE[4] , "M->TM9_OEMA20" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,333   Checkbox oA_VA_OE[4] Var lA_VA_OE[4] On Change ValChkAus( lA_VA_OE[4] , oA_VA_OE[5] , "M->TM9_OEMA20" , "M->TM9_OE2KHZ" , @lM_VA_OE[4] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,44.6 SAY "M" OF oPanelF1 Color nCorAzul
	@ 2.3,46.2 SAY "A" OF oPanelF1 Color nCorAzul
	@ 28,348   Checkbox oM_VA_OE[5] Var lM_VA_OE[5] On Change ValChkMas( lM_VA_OE[5] , oA_VA_OE[5] , "M->TM9_OEMA30" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,361   Checkbox oA_VA_OE[5] Var lA_VA_OE[5] On Change ValChkAus( lA_VA_OE[5] , oA_VA_OE[6] , "M->TM9_OEMA30" , "M->TM9_OE3KHZ" , @lM_VA_OE[5] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,48.1 SAY "M" OF oPanelF1 Color nCorAzul
	@ 2.3,49.7 SAY "A" OF oPanelF1 Color nCorAzul
	@ 28,376   Checkbox oM_VA_OE[6] Var lM_VA_OE[6] On Change ValChkMas( lM_VA_OE[6] , oA_VA_OE[6] , "M->TM9_OEMA40" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,389   Checkbox oA_VA_OE[6] Var lA_VA_OE[6] On Change ValChkAus( lA_VA_OE[6] , oA_VA_OE[7] , "M->TM9_OEMA40" , "M->TM9_OE4KHZ" , @lM_VA_OE[6] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,51.6 SAY "M" OF oPanelF1 Color nCorAzul
	@ 2.3,53.2 SAY "A" OF oPanelF1 Color nCorAzul
	@ 28,404   Checkbox oM_VA_OE[7] Var lM_VA_OE[7] On Change ValChkMas( lM_VA_OE[7] , oA_VA_OE[7] , "M->TM9_OEMA60" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,417   Checkbox oA_VA_OE[7] Var lA_VA_OE[7] On Change ValChkAus( lA_VA_OE[7] , oA_VA_OE[8] , "M->TM9_OEMA60" , "M->TM9_OE6KHZ" , @lM_VA_OE[7] ) Prompt " " Size 30,7 OF oPanelF1
	@ 2.3,55.1 SAY "M" OF oPanelF1 Color nCorAzul
	@ 2.3,56.7 SAY "A" OF oPanelF1 Color nCorAzul
	@ 28,432   Checkbox oM_VA_OE[8] Var lM_VA_OE[8] On Change ValChkMas( lM_VA_OE[8] , oA_VA_OE[8] , "M->TM9_OEMA80" ) Prompt " " Size 30,7 OF oPanelF1
	@ 28,445   Checkbox oA_VA_OE[8] Var lA_VA_OE[8] On Change ValChkAus( lA_VA_OE[8] , oA_VA_OE[7] , "M->TM9_OEMA80" , "M->TM9_OE8KHZ" , @lM_VA_OE[8] ) Prompt " " Size 30,7 OF oPanelF1

	//Via Aerea (Mascaramento) - Orelha Direita
	@ 2.9,0.6  MSGET M->TM9_ODMA25 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_ODMA25) OF oPanelF1 When (lM_VA_OD[1])
	@ 2.9,4.1  MSGET M->TM9_ODMA50 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_ODMA50) OF oPanelF1 When (lM_VA_OD[2])
	@ 2.9,7.6  MSGET M->TM9_ODMA10 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_ODMA10) OF oPanelF1 When (lM_VA_OD[3])
	@ 2.9,11.1 MSGET M->TM9_ODMA20 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_ODMA20) OF oPanelF1 When (lM_VA_OD[4])
	@ 2.9,14.6 MSGET M->TM9_ODMA30 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_ODMA30) OF oPanelF1 When (lM_VA_OD[5])
	@ 2.9,18.1 MSGET M->TM9_ODMA40 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_ODMA40) OF oPanelF1 When (lM_VA_OD[6])
	@ 2.9,21.6 MSGET M->TM9_ODMA60 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_ODMA60) OF oPanelF1 When (lM_VA_OD[7])
	@ 2.9,25.1 MSGET M->TM9_ODMA80 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_ODMA80) OF oPanelF1 When (lM_VA_OD[8])

	//Via Aerea (Mascaramento) - Orelha Esquerda
	@ 2.9,29.6 MSGET M->TM9_OEMA25 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OEMA25) OF oPanelF1 When (lM_VA_OE[1])
	@ 2.9,33.1 MSGET M->TM9_OEMA50 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OEMA50) OF oPanelF1 When (lM_VA_OE[2])
	@ 2.9,36.6 MSGET M->TM9_OEMA10 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OEMA10) OF oPanelF1 When (lM_VA_OE[3])
	@ 2.9,40.1 MSGET M->TM9_OEMA20 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OEMA20) OF oPanelF1 When (lM_VA_OE[4])
	@ 2.9,43.6 MSGET M->TM9_OEMA30 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OEMA30) OF oPanelF1 When (lM_VA_OE[5])
	@ 2.9,47.1 MSGET M->TM9_OEMA40 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OEMA40) OF oPanelF1 When (lM_VA_OE[6])
	@ 2.9,50.6 MSGET M->TM9_OEMA60 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OEMA60) OF oPanelF1 When (lM_VA_OE[7])
	@ 2.9,54.1 MSGET M->TM9_OEMA80 SIZE 26,10 Picture "@!" Valid CheckDB(M->TM9_OEMA80) OF oPanelF1 When (lM_VA_OE[8])

	nLinA := 2.9
	nLinB := 77

	//Limites de Mascaramento
	If lUpdMdt87 .and. lUpdLimMk
		@ nLinA+0.9,0.6  SAY OemToAnsi(STR0177) OF oPanelF1 Color CLR_HRED //"Valores de"
		@ nLinA+1.4,0.6  SAY OemToAnsi(STR0176) OF oPanelF1 Color CLR_HRED //"Mascaramento:"
		@ nLinA+1.1,6.6  SAY OemToAnsi(STR0173) OF oPanelF1 Color CLR_HRED //"Mínimo"
		@ nLinA+1.0,9.1  MSGET M->TM9_ODLMIN SIZE 10,10 Picture "@!" Valid CheckDB(M->TM9_ODLMIN,,3) OF oPanelF1
		@ nLinA+1.1,12.3 SAY OemToAnsi(STR0174) OF oPanelF1 Color CLR_HRED //"Máximo"
		@ nLinA+1.0,15.1 MSGET M->TM9_ODLMAX SIZE 10,10 Picture "@!" Valid CheckDB(M->TM9_ODLMAX,,3) OF oPanelF1

		@ nLinA+0.9,29.6 SAY OemToAnsi(STR0177) OF oPanelF1 Color nCorAzul //"Valores de"
		@ nLinA+1.4,29.6 SAY OemToAnsi(STR0176) OF oPanelF1 Color nCorAzul //"Mascaramento:"
		@ nLinA+1.1,35.6 SAY OemToAnsi(STR0173) OF oPanelF1 Color nCorAzul //"Mínimo"
		@ nLinA+1.0,38.1 MSGET M->TM9_OELMIN SIZE 10,10 Picture "@!" Valid CheckDB(M->TM9_OELMIN,,4) OF oPanelF1
		@ nLinA+1.1,41.3 SAY OemToAnsi(STR0174) OF oPanelF1 Color nCorAzul //"Máximo"
		@ nLinA+1.0,44.1 MSGET M->TM9_OELMAX SIZE 10,10 Picture "@!" Valid CheckDB(M->TM9_OELMAX,,4) OF oPanelF1

		nLinA += 1.2
		nLinB += 16
	Endif

	//Via Ossea
	@ nLinA+0.9,0.2 TO nLinA+4.3+If(lUpdMdt87 .and. lUpdLimMk,1.2,0),18.2 LABEL STR0152 OF oPanelF1 Color CLR_HRED //"Via Óssea"
	@ nLinA+1.8,1.3  SAY OemToAnsi("0,5") OF oPanelF1 Color CLR_HRED
	@ nLinA+2.4,0.6  MSGET oLeft05 Var M2_OD05KH SIZE 26,10 Picture "@!" Valid CheckDB(M2_OD05KH,.T.) OF oPanelF1
	@ nLinA+1.8,5.35 SAY OemToAnsi("1") OF oPanelF1 Color CLR_HRED
	@ nLinA+2.4,4.1  MSGET M2_OD1KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M2_OD1KHZ,.T.) OF oPanelF1
	@ nLinA+1.8,9.1  SAY OemToAnsi("2") OF oPanelF1 Color CLR_HRED
	@ nLinA+2.4,7.6  MSGET M2_OD2KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M2_OD2KHZ,.T.) OF oPanelF1
	@ nLinA+1.8,12.6 SAY OemToAnsi("3") OF oPanelF1 Color CLR_HRED
	@ nLinA+2.4,11.1 MSGET M2_OD3KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M2_OD3KHZ,.T.) OF oPanelF1
	@ nLinA+1.8,16.1 SAY OemToAnsi("4") OF oPanelF1 Color CLR_HRED
	@ nLinA+2.4,14.6 MSGET M2_OD4KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M2_OD4KHZ,.T.) .and. fAltFocus(If(l025oe,3,4)) OF oPanelF1

	@ nLinA+1.8,30.3 SAY OemToAnsi("0,5") OF oPanelF1 Color nCorAzul
	@ nLinA+2.4,29.6 MSGET oRight05 Var M2_OE05KH SIZE 26,10 Picture "@!" Valid CheckDB(M2_OE05KH,.T.) OF oPanelF1
	@ nLinA+1.8,34.6 SAY OemToAnsi("1") OF oPanelF1 Color nCorAzul
	@ nLinA+2.4,33.1 MSGET M2_OE1KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M2_OE1KHZ,.T.) OF oPanelF1
	@ nLinA+1.8,38.1 SAY OemToAnsi("2") OF oPanelF1 Color nCorAzul
	@ nLinA+2.4,36.6 MSGET M2_OE2KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M2_OE2KHZ,.T.) OF oPanelF1
	@ nLinA+1.8,41.6 SAY OemToAnsi("3") OF oPanelF1 Color nCorAzul
	@ nLinA+2.4,40.1 MSGET M2_OE3KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M2_OE3KHZ,.T.) OF oPanelF1
	@ nLinA+1.8,45.1 SAY OemToAnsi("4") OF oPanelF1 Color nCorAzul
	@ nLinA+2.4,43.6 MSGET M2_OE4KHZ SIZE 26,10 Picture "@!" Valid CheckDB(M2_OE4KHZ,.T.) OF oPanelF1

	@ nLinA+3.2,1.6  SAY "M" OF oPanelF1 Color CLR_HRED
	@ nLinA+3.2,3.2  SAY "A" OF oPanelF1 Color CLR_HRED
	@ nLinB,04  Checkbox oM_VO_OD[1] Var lM_VO_OD[1] On Change ValChkMas( lM_VO_OD[1] , oA_VO_OD[1] , "M2_ODMA50" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,17  Checkbox oA_VO_OD[1] Var lA_VO_OD[1] On Change ValChkAus( lA_VO_OD[1] , oA_VO_OD[2] , "M2_ODMA50" , "M2_OD05KH" , @lM_VO_OD[1] ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinA+3.2,5.1  SAY "M" OF oPanelF1 Color CLR_HRED
	@ nLinA+3.2,6.7  SAY "A" OF oPanelF1 Color CLR_HRED
	@ nLinB,32  Checkbox oM_VO_OD[2] Var lM_VO_OD[2] On Change ValChkMas( lM_VO_OD[2] , oA_VO_OD[2] , "M2_ODMA10" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,45  Checkbox oA_VO_OD[2] Var lA_VO_OD[2] On Change ValChkAus( lA_VO_OD[2] , oA_VO_OD[3] , "M2_ODMA10" , "M2_OD1KHZ" , @lM_VO_OD[2] ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinA+3.2,8.6  SAY "M" OF oPanelF1 Color CLR_HRED
	@ nLinA+3.2,10.2 SAY "A" OF oPanelF1 Color CLR_HRED
	@ nLinB,60  Checkbox oM_VO_OD[3] Var lM_VO_OD[3] On Change ValChkMas( lM_VO_OD[3] , oA_VO_OD[3] , "M2_ODMA20" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,73  Checkbox oA_VO_OD[3] Var lA_VO_OD[3] On Change ValChkAus( lA_VO_OD[3] , oA_VO_OD[4] , "M2_ODMA20" , "M2_OD2KHZ" , @lM_VO_OD[3] ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinA+3.2,12.1 SAY "M" OF oPanelF1 Color CLR_HRED
	@ nLinA+3.2,13.7 SAY "A" OF oPanelF1 Color CLR_HRED
	@ nLinB,88  Checkbox oM_VO_OD[4] Var lM_VO_OD[4] On Change ValChkMas( lM_VO_OD[4] , oA_VO_OD[4] , "M2_ODMA30" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,101 Checkbox oA_VO_OD[4] Var lA_VO_OD[4] On Change ValChkAus( lA_VO_OD[4] , oA_VO_OD[5] , "M2_ODMA30" , "M2_OD3KHZ" , @lM_VO_OD[4] ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinA+3.2,15.6 SAY "M" OF oPanelF1 Color CLR_HRED
	@ nLinA+3.2,17.2 SAY "A" OF oPanelF1 Color CLR_HRED
	@ nLinB,116 Checkbox oM_VO_OD[5] Var lM_VO_OD[5] On Change ValChkMas( lM_VO_OD[5] , oA_VO_OD[5] , "M2_ODMA40" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,129 Checkbox oA_VO_OD[5] Var lA_VO_OD[5] On Change ValChkAus( lA_VO_OD[5] , oA_VO_OD[4] , "M2_ODMA40" , "M2_OD4KHZ" , @lM_VO_OD[5] ) Prompt " " Size 30,7 OF oPanelF1

	@ nLinA+0.9,29.2 TO nLinA+4.3+If(lUpdMdt87 .and. lUpdLimMk,1.2,0),47.2 LABEL STR0152 OF oPanelF1 Color nCorAzul //"Via Óssea"

	@ nLinA+3.2,30.6 SAY "M" OF oPanelF1 Color nCorAzul
	@ nLinA+3.2,32.2 SAY "A" OF oPanelF1 Color nCorAzul
	@ nLinB,236 Checkbox oM_VO_OE[1] Var lM_VO_OE[1] On Change ValChkMas( lM_VO_OE[1] , oA_VO_OE[1] , "M2_OEMA50" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,249 Checkbox oA_VO_OE[1] Var lA_VO_OE[1] On Change ValChkAus( lA_VO_OE[1] , oA_VO_OE[2] , "M2_OEMA50" , "M2_OE05KH" , @lM_VO_OE[1] ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinA+3.2,34.1 SAY "M" OF oPanelF1 Color nCorAzul
	@ nLinA+3.2,35.7 SAY "A" OF oPanelF1 Color nCorAzul
	@ nLinB,264 Checkbox oM_VO_OE[2] Var lM_VO_OE[2] On Change ValChkMas( lM_VO_OE[2] , oA_VO_OE[2] , "M2_OEMA10" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,277 Checkbox oA_VO_OE[2] Var lA_VO_OE[2] On Change ValChkAus( lA_VO_OE[2] , oA_VO_OE[3] , "M2_OEMA10" , "M2_OE1KHZ" , @lM_VO_OE[2] ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinA+3.2,37.6 SAY "M" OF oPanelF1 Color nCorAzul
	@ nLinA+3.2,39.2 SAY "A" OF oPanelF1 Color nCorAzul
	@ nLinB,292 Checkbox oM_VO_OE[3] Var lM_VO_OE[3] On Change ValChkMas( lM_VO_OE[3] , oA_VO_OE[3] , "M2_OEMA20" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,305 Checkbox oA_VO_OE[3] Var lA_VO_OE[3] On Change ValChkAus( lA_VO_OE[3] , oA_VO_OE[4] , "M2_OEMA20" , "M2_OE2KHZ" , @lM_VO_OE[3] ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinA+3.2,41.1 SAY "M" OF oPanelF1 Color nCorAzul
	@ nLinA+3.2,42.7 SAY "A" OF oPanelF1 Color nCorAzul
	@ nLinB,320 Checkbox oM_VO_OE[4] Var lM_VO_OE[4] On Change ValChkMas( lM_VO_OE[4] , oA_VO_OE[4] , "M2_OEMA30" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,333 Checkbox oA_VO_OE[4] Var lA_VO_OE[4] On Change ValChkAus( lA_VO_OE[4] , oA_VO_OE[5] , "M2_OEMA30" , "M2_OE3KHZ" , @lM_VO_OE[4] ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinA+3.2,44.6 SAY "M" OF oPanelF1 Color nCorAzul
	@ nLinA+3.2,46.2 SAY "A" OF oPanelF1 Color nCorAzul
	@ nLinB,348 Checkbox oM_VO_OE[5] Var lM_VO_OE[5] On Change ValChkMas( lM_VO_OE[5] , oA_VO_OE[5] , "M2_OEMA40" ) Prompt " " Size 30,7 OF oPanelF1
	@ nLinB,361 Checkbox oA_VO_OE[5] Var lA_VO_OE[5] On Change ValChkAus( lA_VO_OE[5] , oA_VO_OE[4] , "M2_OEMA40" , "M2_OE4KHZ" , @lM_VO_OE[5] ) Prompt " " Size 30,7 OF oPanelF1

	//Via Ossea (Mascaramento) - Orelha Direita
	@ nLinA+3.8,0.6  MSGET M2_ODMA50 SIZE 26,10 Picture "@!" Valid CheckDB(M2_ODMA50,.T.) OF oPanelF1 When (lM_VO_OD[1])
	@ nLinA+3.8,4.1  MSGET M2_ODMA10 SIZE 26,10 Picture "@!" Valid CheckDB(M2_ODMA10,.T.) OF oPanelF1 When (lM_VO_OD[2])
	@ nLinA+3.8,7.6  MSGET M2_ODMA20 SIZE 26,10 Picture "@!" Valid CheckDB(M2_ODMA20,.T.) OF oPanelF1 When (lM_VO_OD[3])
	@ nLinA+3.8,11.1 MSGET M2_ODMA30 SIZE 26,10 Picture "@!" Valid CheckDB(M2_ODMA30,.T.) OF oPanelF1 When (lM_VO_OD[4])
	@ nLinA+3.8,14.6 MSGET M2_ODMA40 SIZE 26,10 Picture "@!" Valid CheckDB(M2_ODMA40,.T.) OF oPanelF1 When (lM_VO_OD[5])

	//Via Ossea (Mascaramento) - Orelha Esquerda
	@ nLinA+3.8,29.6 MSGET M2_OEMA50 SIZE 26,10 Picture "@!" Valid CheckDB(M2_OEMA50,.T.) OF oPanelF1 When (lM_VO_OE[1])
	@ nLinA+3.8,33.1 MSGET M2_OEMA10 SIZE 26,10 Picture "@!" Valid CheckDB(M2_OEMA10,.T.) OF oPanelF1 When (lM_VO_OE[2])
	@ nLinA+3.8,36.6 MSGET M2_OEMA20 SIZE 26,10 Picture "@!" Valid CheckDB(M2_OEMA20,.T.) OF oPanelF1 When (lM_VO_OE[3])
	@ nLinA+3.8,40.1 MSGET M2_OEMA30 SIZE 26,10 Picture "@!" Valid CheckDB(M2_OEMA30,.T.) OF oPanelF1 When (lM_VO_OE[4])
	@ nLinA+3.8,43.6 MSGET M2_OEMA40 SIZE 26,10 Picture "@!" Valid CheckDB(M2_OEMA40,.T.) OF oPanelF1 When (lM_VO_OE[5])

	//Via Aerea (Médias) - Orelha Direita
	@ nLinA+0.9,18.4 TO nLinA+3.1,28.9 LABEL STR0082 OF oPanelF1 Color CLR_HRED //"Médias"
	@ nLinA+1.8,20.1 SAY OemToAnsi("[.5,1,2]") OF oPanelF1  Color CLR_HRED
	@ nLinA+2.4,19.3 MSGET M->TM9_ODMED5 SIZE 30,10 When .F. OF oPanelF1
	@ nLinA+1.8,24.9 SAY OemToAnsi("[3,4,6]") OF oPanelF1 Color CLR_HRED
	@ nLinA+2.4,24.1 MSGET M->TM9_ODMED3 SIZE 30,10 When .F. OF oPanelF1

	//Via Aerea (Médias) - Orelha Esquerda
	@ nLinA+0.9,47.4 TO nLinA+3.1,57.9 LABEL STR0082 OF oPanelF1 Color nCorAzul //"Médias"
	@ nLinA+1.8,49.1 SAY OemToAnsi("[.5,1,2]") OF oPanelF1 Color nCorAzul
	@ nLinA+2.4,48.3 MSGET M->TM9_OEMED5 SIZE 30,10 When .F. OF oPanelF1
	@ nLinA+1.8,53.9 SAY OemToAnsi("[3,4,6]") OF oPanelF1 Color nCorAzul
	@ nLinA+2.4,53.1 MSGET M->TM9_OEMED3 SIZE 30,10 When .F. OF oPanelF1

	//Via Aerea (Ind. Referencial) - Orelha Direita
	@ nLinA+3.9,20.9 SAY OemToAnsi(STR0079) Of oPanelF1 Color CLR_HRED //"Referencial"
	@ nLinA+3.8,25.1 COMBOBOX oCbx VAR M->TM9_ODREFE ITEMS aRefer SIZE 30,46 Of oPanelF1

	//Via Aerea (Ind. Referencial) - Orelha Esquerda
	@ nLinA+3.9,49.9 SAY OemToAnsi(STR0079) Of oPanelF1 Color nCorAzul //"Referencial"
	@ nLinA+3.8,54.1 COMBOBOX oCbx VAR M->TM9_OEREFE ITEMS aRefer SIZE 30,46 Of oPanelF1

	nLinA += 3.8
	nLinB += 28

	//Limites de Mascaramento
	If lUpdMdt87 .and. lUpdLimMk
		@ nLinA+0.9,0.6  SAY OemToAnsi(STR0177) OF oPanelF1 Color CLR_HRED //"Valores de"
		@ nLinA+1.4,0.6  SAY OemToAnsi(STR0176) OF oPanelF1 Color CLR_HRED //"Mascaramento:"
		@ nLinA+1.1,6.6  SAY OemToAnsi(STR0173) OF oPanelF1 Color CLR_HRED //"Mínimo"
		@ nLinA+1.0,9.1  MSGET M2_ODLMIN SIZE 10,10 Picture "@!" Valid CheckDB(M2_ODLMIN,,1) OF oPanelF1
		@ nLinA+1.1,12.3 SAY OemToAnsi(STR0174) OF oPanelF1 Color CLR_HRED //"Máximo"
		@ nLinA+1.0,15.1 MSGET M2_ODLMAX SIZE 10,10 Picture "@!" Valid CheckDB(M2_ODLMAX,,1) OF oPanelF1

		@ nLinA+0.9,29.6  SAY OemToAnsi(STR0177) OF oPanelF1 Color nCorAzul //"Valores de"
		@ nLinA+1.4,29.6  SAY OemToAnsi(STR0176) OF oPanelF1 Color nCorAzul //"Mascaramento:"
		@ nLinA+1.1,35.6  SAY OemToAnsi(STR0173) OF oPanelF1 Color nCorAzul //"Mínimo"
		@ nLinA+1.0,38.1  MSGET M2_OELMIN SIZE 10,10 Picture "@!" Valid CheckDB(M2_OELMIN,,2) OF oPanelF1
		@ nLinA+1.1,41.3 SAY OemToAnsi(STR0174) OF oPanelF1 Color nCorAzul //"Máximo"
		@ nLinA+1.0,44.1 MSGET M2_OELMAX SIZE 10,10 Picture "@!" Valid CheckDB(M2_OELMAX,,2) OF oPanelF1

		nLinA += 1.2
		nLinB += 18
	Endif

	//Panel Divisor
	oPanelDiv:=TPanel():New(nLinB,00,,oPanelF1,,,,,RGB(56,56,56),490,5,.F.,.F.)

	//HISTORICO
	cOdMed3  := Space(6)
	cOdMed5  := Space(6)
	cOeMed3  := Space(6)
	cOeMed5  := Space(6)
	cIndODre := aRefer[2]
	cIndOEre := aRefer[2]
	cBoxDtEx := aBoxDtEx[Len(aBoxDtEx)]
	cH_VA_OD := {Space(3),Space(3),Space(3),Space(3),Space(3),Space(3),Space(3),Space(3)}
	cH_VA_OE := {Space(3),Space(3),Space(3),Space(3),Space(3),Space(3),Space(3),Space(3)}
	cH_VO_OD := {Space(3),Space(3),Space(3),Space(3),Space(3)}
	cH_VO_OE := {Space(3),Space(3),Space(3),Space(3),Space(3)}

	oPanelHis:=TPanel():New(nLinB+3,00,,oPanelF1,,,,,RGB(235,235,235),490,110,.F.,.F.)

	@ 0.3,0.2 SAY OemToAnsi(STR0153) Of oPanelHis //"Data do Exame"
	@ 0.2,5.4 COMBOBOX oCbxEx VAR cBoxDtEx ITEMS aBoxDtEx On Change MudaExame(oCbxEx) SIZE 67,46 Of oPanelHis
	oCbxEx:nAT := Len(aBoxDtEx)

	// Via Aerea (Ind. Referencial) - Orelha Direita
	@ 0.3,20.9 SAY OemToAnsi(STR0079) Of oPanelHis Color CLR_HRED //"Referencial"
	@ 0.2,25.1 COMBOBOX oCbxOD1 VAR cIndODre ITEMS aRefer SIZE 30,46 Of oPanelHis When .F.

	// Via Aerea (Ind. Referencial) - Orelha Esquerda
	@ 0.3,49.9 SAY OemToAnsi(STR0079) Of oPanelHis Color nCorAzul //"Referencial"
	@ 0.2,54.1 COMBOBOX oCbxOE1 VAR cIndOEre ITEMS aRefer SIZE 30,46 Of oPanelHis When .F.

	// VIA AEREA - ORELHA DIREITA
	@ 1.2,0.2 TO 3.8,28.9 LABEL STR0151 OF oPanelHis Color CLR_HRED //"Via Aérea"
	If l025od
		@ 1.9,1.3 SAY OemToAnsi("0,25") OF oPanelHis Color CLR_HRED
		@ 2.5,0.6 MSGET cH_VA_OD[1] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	Endif
	@ 1.9,5.35 SAY OemToAnsi("0,5") OF oPanelHis Color CLR_HRED
	@ 2.5,4.1  MSGET cH_VA_OD[2] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,9.1  SAY OemToAnsi("1") OF oPanelHis Color CLR_HRED
	@ 2.5,7.6  MSGET cH_VA_OD[3] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,12.6 SAY OemToAnsi("2") OF oPanelHis Color CLR_HRED
	@ 2.5,11.1 MSGET cH_VA_OD[4] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,16.1 SAY OemToAnsi("3") OF oPanelHis Color CLR_HRED
	@ 2.5,14.6 MSGET cH_VA_OD[5] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,19.6 SAY OemToAnsi("4") OF oPanelHis Color CLR_HRED
	@ 2.5,18.1 MSGET cH_VA_OD[6] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,23.1 SAY OemToAnsi("6") OF oPanelHis Color CLR_HRED
	@ 2.5,21.6 MSGET cH_VA_OD[7] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,26.6 SAY OemToAnsi("8") OF oPanelHis Color CLR_HRED
	@ 2.5,25.1 MSGET cH_VA_OD[8] SIZE 26,10 Picture "@!" OF oPanelHis When .F.

	If l025od
		@ 3.3,1.6 SAY "M" OF oPanelHis Color CLR_HRED
		@ 3.3,3.2 SAY "A" OF oPanelHis Color CLR_HRED
		@ 41,04   Checkbox oM_HA_OD[1] Var lM_HA_OD[1] Prompt " " Size 30,7 OF oPanelHis When .F.
		@ 41,17   Checkbox oA_HA_OD[1] Var lA_HA_OD[1] Prompt " " Size 30,7 OF oPanelHis When .F.
	Endif
	@ 3.3,5.1  SAY "M" OF oPanelHis Color CLR_HRED
	@ 3.3,6.7  SAY "A" OF oPanelHis Color CLR_HRED
	@ 41,32    Checkbox oM_HA_OD[2] Var lM_HA_OD[2] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,45    Checkbox oA_HA_OD[2] Var lA_HA_OD[2] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,8.6  SAY "M" OF oPanelHis Color CLR_HRED
	@ 3.3,10.2 SAY "A" OF oPanelHis Color CLR_HRED
	@ 41,60    Checkbox oM_HA_OD[3] Var lM_HA_OD[3] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,73    Checkbox oA_HA_OD[3] Var lA_HA_OD[3] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,12.1 SAY "M" OF oPanelHis Color CLR_HRED
	@ 3.3,13.7 SAY "A" OF oPanelHis Color CLR_HRED
	@ 41,88    Checkbox oM_HA_OD[4] Var lM_HA_OD[4] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,101   Checkbox oA_HA_OD[4] Var lA_HA_OD[4] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,15.6 SAY "M" OF oPanelHis Color CLR_HRED
	@ 3.3,17.2 SAY "A" OF oPanelHis Color CLR_HRED
	@ 41,116   Checkbox oM_HA_OD[5] Var lM_HA_OD[5] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,129   Checkbox oA_HA_OD[5] Var lA_HA_OD[5] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,19.1 SAY "M" OF oPanelHis Color CLR_HRED
	@ 3.3,20.7 SAY "A" OF oPanelHis Color CLR_HRED
	@ 41,144   Checkbox oM_HA_OD[6] Var lM_HA_OD[6] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,157   Checkbox oA_HA_OD[6] Var lA_HA_OD[6] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,22.6 SAY "M" OF oPanelHis Color CLR_HRED
	@ 3.3,24.2 SAY "A" OF oPanelHis Color CLR_HRED
	@ 41,172   Checkbox oM_HA_OD[7] Var lM_HA_OD[7] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,185   Checkbox oA_HA_OD[7] Var lA_HA_OD[7] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,26.1 SAY "M" OF oPanelHis Color CLR_HRED
	@ 3.3,27.7 SAY "A" OF oPanelHis Color CLR_HRED
	@ 41,200   Checkbox oM_HA_OD[8] Var lM_HA_OD[8] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,213   Checkbox oA_HA_OD[8] Var lA_HA_OD[8] Prompt " " Size 30,7 OF oPanelHis When .F.

	// VIA AEREA - ORELHA ESQUERDA
	@ 1.2,29.2 TO 3.8,57.9 LABEL STR0151 OF oPanelHis Color nCorAzul //"Via Aérea"
	If l025oe
		@ 1.9,30.3  SAY OemToAnsi("0,25") OF oPanelHis Color nCorAzul
		@ 2.5,29.6 MSGET cH_VA_OE[1] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	Endif
	@ 1.9,34.35 SAY OemToAnsi("0,5") OF oPanelHis Color nCorAzul
	@ 2.5,33.1 MSGET cH_VA_OE[2] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,38.1  SAY OemToAnsi("1") OF oPanelHis Color nCorAzul
	@ 2.5,36.6 MSGET cH_VA_OE[3] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,41.6  SAY OemToAnsi("2") OF oPanelHis Color nCorAzul
	@ 2.5,40.1 MSGET cH_VA_OE[4] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,45.1  SAY OemToAnsi("3") OF oPanelHis Color nCorAzul
	@ 2.5,43.6 MSGET cH_VA_OE[5] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,48.6  SAY OemToAnsi("4") OF oPanelHis Color nCorAzul
	@ 2.5,47.1 MSGET cH_VA_OE[6] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,52.1  SAY OemToAnsi("6") OF oPanelHis Color nCorAzul
	@ 2.5,50.6 MSGET cH_VA_OE[7] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 1.9,55.6  SAY OemToAnsi("8") OF oPanelHis Color nCorAzul
	@ 2.5,54.1 MSGET cH_VA_OE[8] SIZE 26,10 Picture "@!" OF oPanelHis When .F.

	If l025od
		@ 3.3,30.6 SAY "M" OF oPanelHis Color nCorAzul
		@ 3.3,32.2 SAY "A" OF oPanelHis Color nCorAzul
		@ 41,236   Checkbox oM_HA_OE[1] Var lM_HA_OE[1] Prompt " " Size 30,7 OF oPanelHis When .F.
		@ 41,249   Checkbox oA_HA_OE[1] Var lA_HA_OE[1] Prompt " " Size 30,7 OF oPanelHis When .F.
	Endif
	@ 3.3,34.1 SAY "M" OF oPanelHis Color nCorAzul
	@ 3.3,35.7 SAY "A" OF oPanelHis Color nCorAzul
	@ 41,264   Checkbox oM_HA_OE[2] Var lM_HA_OE[2] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,277   Checkbox oA_HA_OE[2] Var lA_HA_OE[2] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,37.6 SAY "M" OF oPanelHis Color nCorAzul
	@ 3.3,39.2 SAY "A" OF oPanelHis Color nCorAzul
	@ 41,292   Checkbox oM_HA_OE[3] Var lM_HA_OE[3] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,305   Checkbox oA_HA_OE[3] Var lA_HA_OE[3] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,41.1 SAY "M" OF oPanelHis Color nCorAzul
	@ 3.3,42.7 SAY "A" OF oPanelHis Color nCorAzul
	@ 41,320   Checkbox oM_HA_OE[4] Var lM_HA_OE[4] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,333   Checkbox oA_HA_OE[4] Var lA_HA_OE[4] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,44.6 SAY "M" OF oPanelHis Color nCorAzul
	@ 3.3,46.2 SAY "A" OF oPanelHis Color nCorAzul
	@ 41,348   Checkbox oM_HA_OE[5] Var lM_HA_OE[5] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,361   Checkbox oA_HA_OE[5] Var lA_HA_OE[5] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,48.1 SAY "M" OF oPanelHis Color nCorAzul
	@ 3.3,49.7 SAY "A" OF oPanelHis Color nCorAzul
	@ 41,376   Checkbox oM_HA_OE[6] Var lM_HA_OE[6] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,389   Checkbox oA_HA_OE[6] Var lA_HA_OE[6] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,51.6 SAY "M" OF oPanelHis Color nCorAzul
	@ 3.3,53.2 SAY "A" OF oPanelHis Color nCorAzul
	@ 41,404   Checkbox oM_HA_OE[7] Var lM_HA_OE[7] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,417   Checkbox oA_HA_OE[7] Var lA_HA_OE[7] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 3.3,55.1 SAY "M" OF oPanelHis Color nCorAzul
	@ 3.3,56.7 SAY "A" OF oPanelHis Color nCorAzul
	@ 41,432   Checkbox oM_HA_OE[8] Var lM_HA_OE[8] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 41,445   Checkbox oA_HA_OE[8] Var lA_HA_OE[8] Prompt " " Size 30,7 OF oPanelHis When .F.

	// Via Ossea - Orelha Direita
	@ 3.9,0.2 TO 6.6,18.2 LABEL STR0152 OF oPanelHis Color CLR_HRED //"Via Óssea"
	@ 4.8,1.3  SAY OemToAnsi("0,5") OF oPanelHis Color CLR_HRED
	@ 5.4,0.6  MSGET cH_VO_OD[1] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 4.8,5.35 SAY OemToAnsi("1") OF oPanelHis Color CLR_HRED
	@ 5.4,4.1  MSGET cH_VO_OD[2] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 4.8,9.1  SAY OemToAnsi("2") OF oPanelHis Color CLR_HRED
	@ 5.4,7.6  MSGET cH_VO_OD[3] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 4.8,12.6 SAY OemToAnsi("3") OF oPanelHis Color CLR_HRED
	@ 5.4,11.1 MSGET cH_VO_OD[4] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 4.8,16.1 SAY OemToAnsi("4") OF oPanelHis Color CLR_HRED
	@ 5.4,14.6 MSGET cH_VO_OD[5] SIZE 26,10 Picture "@!" OF oPanelHis When .F.

	@ 6.2,1.6  SAY "M" OF oPanelHis Color CLR_HRED
	@ 6.2,3.2  SAY "A" OF oPanelHis Color CLR_HRED
	@ 78.6,04  Checkbox oM_HO_OD[1] Var lM_HO_OD[1] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,17  Checkbox oA_HO_OD[1] Var lA_HO_OD[1] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 6.2,5.1  SAY "M" OF oPanelHis Color CLR_HRED
	@ 6.2,6.7  SAY "A" OF oPanelHis Color CLR_HRED
	@ 78.6,32  Checkbox oM_HO_OD[2] Var lM_HO_OD[2] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,45  Checkbox oA_HO_OD[2] Var lA_HO_OD[2] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 6.2,8.6  SAY "M" OF oPanelHis Color CLR_HRED
	@ 6.2,10.2 SAY "A" OF oPanelHis Color CLR_HRED
	@ 78.6,60  Checkbox oM_HO_OD[3] Var lM_HO_OD[3] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,73  Checkbox oA_HO_OD[3] Var lA_HO_OD[3] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 6.2,12.1 SAY "M" OF oPanelHis Color CLR_HRED
	@ 6.2,13.7 SAY "A" OF oPanelHis Color CLR_HRED
	@ 78.6,88  Checkbox oM_HO_OD[4] Var lM_HO_OD[4] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,101 Checkbox oA_HO_OD[4] Var lA_HO_OD[4] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 6.2,15.6 SAY "M" OF oPanelHis Color CLR_HRED
	@ 6.2,17.2 SAY "A" OF oPanelHis Color CLR_HRED
	@ 78.6,116 Checkbox oM_HO_OD[5] Var lM_HO_OD[5] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,129 Checkbox oA_HO_OD[5] Var lA_HO_OD[5] Prompt " " Size 30,7 OF oPanelHis When .F.

	// Via Ossea - Orelha Esquerda
	@ 3.9,29.2 TO 6.6,47.2 LABEL STR0152 OF oPanelHis Color nCorAzul //"Via Óssea"
	@ 4.8,30.3 SAY OemToAnsi("0,5") OF oPanelHis Color nCorAzul
	@ 5.4,29.6 MSGET cH_VO_OE[1] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 4.8,34.6 SAY OemToAnsi("1") OF oPanelHis Color nCorAzul
	@ 5.4,33.1 MSGET cH_VO_OE[2] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 4.8,38.1 SAY OemToAnsi("2") OF oPanelHis Color nCorAzul
	@ 5.4,36.6 MSGET cH_VO_OE[3] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 4.8,41.6 SAY OemToAnsi("3") OF oPanelHis Color nCorAzul
	@ 5.4,40.1 MSGET cH_VO_OE[4] SIZE 26,10 Picture "@!" OF oPanelHis When .F.
	@ 4.8,45.1 SAY OemToAnsi("4") OF oPanelHis Color nCorAzul
	@ 5.4,43.6 MSGET cH_VO_OE[5] SIZE 26,10 Picture "@!" OF oPanelHis When .F.

	@ 6.2,30.6 SAY "M" OF oPanelHis Color nCorAzul
	@ 6.2,32.2 SAY "A" OF oPanelHis Color nCorAzul
	@ 78.6,236 Checkbox oM_HO_OE[1] Var lM_HO_OE[1] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,249 Checkbox oA_HO_OE[1] Var lA_HO_OE[1] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 6.2,34.1 SAY "M" OF oPanelHis Color nCorAzul
	@ 6.2,35.7 SAY "A" OF oPanelHis Color nCorAzul
	@ 78.6,264 Checkbox oM_HO_OE[2] Var lM_HO_OE[2] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,277 Checkbox oA_HO_OE[2] Var lA_HO_OE[2] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 6.2,37.6 SAY "M" OF oPanelHis Color nCorAzul
	@ 6.2,39.2 SAY "A" OF oPanelHis Color nCorAzul
	@ 78.6,292 Checkbox oM_HO_OE[3] Var lM_HO_OE[3] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,305 Checkbox oA_HO_OE[3] Var lA_HO_OE[3] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 6.2,41.1 SAY "M" OF oPanelHis Color nCorAzul
	@ 6.2,42.7 SAY "A" OF oPanelHis Color nCorAzul
	@ 78.6,320 Checkbox oM_HO_OE[4] Var lM_HO_OE[4] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,333 Checkbox oA_HO_OE[4] Var lA_HO_OE[4] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 6.2,44.6 SAY "M" OF oPanelHis Color nCorAzul
	@ 6.2,46.2 SAY "A" OF oPanelHis Color nCorAzul
	@ 78.6,348 Checkbox oM_HO_OE[5] Var lM_HO_OE[5] Prompt " " Size 30,7 OF oPanelHis When .F.
	@ 78.6,361 Checkbox oA_HO_OE[5] Var lA_HO_OE[5] Prompt " " Size 30,7 OF oPanelHis When .F.

	// Via Aerea (Médias) - Orelha Direita
	@ 3.9,18.4 TO 6.0,28.9 LABEL STR0082 OF oPanelHis Color CLR_HRED //"Médias"
	@ 4.8,20.1 SAY OemToAnsi("[.5,1,2]") OF oPanelHis Color CLR_HRED
	@ 5.4,19.3 MSGET cOdMed5 SIZE 30,10 When .F. OF oPanelHis
	@ 4.8,24.9 SAY OemToAnsi("[3,4,6]") OF oPanelHis Color CLR_HRED
	@ 5.4,24.1 MSGET cOdMed3 SIZE 30,10 When .F. OF oPanelHis

	// Via Aerea (Médias) - Orelha Esquerda
	@ 3.9,47.4 TO 6.0,57.9 LABEL STR0082 OF oPanelHis Color nCorAzul //"Médias"
	@ 4.8,49.1 SAY OemToAnsi("[.5,1,2]") OF oPanelHis Color nCorAzul
	@ 5.4,48.3 MSGET cOeMed5 SIZE 30,10 When .F. OF oPanelHis
	@ 4.8,53.9 SAY OemToAnsi("[3,4,6]") OF oPanelHis Color nCorAzul
	@ 5.4,53.1 MSGET cOeMed3 SIZE 30,10 When .F. OF oPanelHis

	// Folder 02
	oPanelF2:=TPanel():New(0,0,,oFolder:aDialogs[2],,,,,CLR_WHITE,10,10,.F.,.F.)
	oPanelF2:Align := CONTROL_ALIGN_ALLCLIENT

	// Resultado - Orelha Direita
	@ 0.2,3.5 TO 4.3,27.4 LABEL STR0011 OF oPanelF2 Color CLR_HRED //"Resultado"
	@ 1.2,4.0 SAY OemToAnsi(STR0084) OF oPanelF2 Color CLR_HRED //"Clínico"
	@ 1.1,8.5 COMBOBOX oCbx VAR M->TM9_ODCLIN WHEN MDTA120WHEN(1) ITEMS aClinico SIZE nBase,60 OF oPanelF2 FONT oFont
	@ 2.3,4.0 SAY OemToAnsi(STR0087) OF oPanelF2 Color CLR_HRED //"INSS"
	@ 2.2,8.5 COMBOBOX oCbx VAR M->TM9_ODINSS WHEN MDTA120WHEN(2) ITEMS aINSS SIZE nBase,60 OF oPanelF2 FONT oFont
	@ 3.4,4.0 SAY OemToAnsi(STR0088) OF oPanelF2 Color CLR_HRED //"Portaria 19"
	@ 3.3,8.5 COMBOBOX oCbx VAR M->TM9_ODRESU WHEN MDTA120WHEN(3) Valid MDT120VRES(M->TM9_ODRESU,M->TM9_OERESU) ITEMS aResul SIZE nBase,60 OF oPanelF2 FONT oFont

	// Resultado - Orelha Esquerda
	@ 0.2,30.7 TO 4.3,54.6 LABEL STR0011 OF oPanelF2 Color nCorAzul //"Resultado"
	@ 1.2,31.2 SAY OemToAnsi(STR0084) OF oPanelF2 Color nCorAzul //"Clínico"
	@ 1.1,35.7 COMBOBOX oCbx VAR M->TM9_OECLIN WHEN MDTA120WHEN(4) ITEMS aClinico SIZE nBase,60 OF oPanelF2 FONT oFont
	@ 2.3,31.2 SAY OemToAnsi(STR0087) OF oPanelF2 Color nCorAzul //"INSS"
	@ 2.2,35.7 COMBOBOX oCbx VAR M->TM9_OEINSS WHEN MDTA120WHEN(5) ITEMS aINSS SIZE nBase,60 OF oPanelF2 FONT oFont
	@ 3.4,31.2 SAY OemToAnsi(STR0088) OF oPanelF2 Color nCorAzul //"Portaria 19"
	@ 3.3,35.7 COMBOBOX oCbx VAR M->TM9_OERESU WHEN MDTA120WHEN(6) Valid MDT120VRES(M->TM9_ODRESU,M->TM9_OERESU) ITEMS aResul SIZE nBase,60 OF oPanelF2 FONT oFont

	// Resultado (Botão Calcular)
	@ 65,202 BUTTON oCalcResult Prompt STR0067 SIZE 60,12 PIXEL ACTION _RESULT120() OF oPanelF2 //"&Calcular Resultados"

	// Resultados Anteriores
	oPanelTit:=TPanel():New(80,4,,oPanelF2,,,,,RGB(56,56,56),459,8,.F.,.F.)
	@ 0.05,24.6 SAY STR0105 Of oPanelTit Color CLR_WHITE Font oFont12 //"Resultados Anteriores"

	_nPosFim := If(lFlatMode,182,200)
	_nPosBut := If(lFlatMode,185,203)

	oBrowHis := MsNewGetDados():New(88,4,_nPosFim,463,0,,,,,,9999,,,,oPanelF2,aHead_His,aDadosHis)
	oBrowHis:oBrowse:Refresh()
	oBrowHis:oBrowse:lUseDefaultColors := .f.
	oBrowHis:oBrowse:aColumns[1]:bClrFore := {|| If(aDadosHis[oBrowHis:oBrowse:nAt,15]=="1",CLR_HRED,If(aDadosHis[oBrowHis:oBrowse:nAt,15]=="2",nCorAzul,CLR_WHITE)) }
	@ _nPosBut,420 BUTTON STR0147 SIZE 40,12 PIXEL ACTION fMDTR489() OF oPanelF2 //"Imprimir"

	// Folder 03
	oPanelF3:=TPanel():New(0,0,,oFolder:aDialogs[3],,,,,CLR_WHITE,10,10,.F.,.F.)
	oPanelF3:Align := CONTROL_ALIGN_ALLCLIENT

	// ORELHA DIREITA
	nLi := 0.2
	@ nLi,0.2 TO nLi+If(lUpdMdt87,9.2,8),28.9 LABEL STR0035 OF oPanelF3 Color CLR_HRED //"Orelha Direita"
	nLi += 1.1
	@ nLi,2.3   SAY OemToAnsi(STR0036) Of oPanelF3 Color CLR_HRED //"Meatoscopia"
	@ nLi,8.8   MSGET M->TM9_ODMEAT picture "@!" SIZE 78,10 Of oPanelF3
	nLi += 1.5
	@ nLi,2.3  SAY OemToAnsi("S.R.T.") OF oPanelF3 Color CLR_HRED
	@ nLi,8.8  MSGET M->TM9_ODRECF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODRECF") OF oPanelF3
	If lUpdMdt87
		@ nLi,12.7 SAY OemToAnsi(STR0175) OF oPanelF3 Color CLR_HRED //"Vl. Masc."
		@ nLi,16 MSGET M->TM9_ODMSRT SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODMSRT") OF oPanelF3
		nLi += 1.5
		@ nLi,2.3 SAY OemToAnsi("S.D.T.") OF oPanelF3 Color CLR_HRED
		@ nLi,8.8  MSGET M->TM9_ODSDT SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODSDT") OF oPanelF3
	Endif
	nLi += 1.5
	@ nLi+0.5,2.3 SAY OemToAnsi("I.R.F.") OF oPanelF3 Color CLR_HRED
	@ nLi,4.8 SAY OemToAnsi(STR0039) OF oPanelF3 Color CLR_HRED //"Quant. Mon."
	@ nLi,8.8  MSGET M->TM9_ODREMO SIZE 20,10 picture "999" Valid CheckSX3("TM9_ODREMO") OF oPanelF3
	nLi += 1
	@ nLi,4.8  SAY OemToAnsi(STR0040) OF oPanelF3 Color CLR_HRED //"Quant. Diss."
	@ nLi,8.8  MSGET M->TM9_ODREDI SIZE 20,10 picture "999" Valid CheckSX3("TM9_ODREDI") OF oPanelF3
	If lUpdMdt87
		@ nLi-0.5,12.7 SAY OemToAnsi(STR0175) OF oPanelF3 Color CLR_HRED //"Vl. Masc."
		@ nLi-0.5,16 MSGET M->TM9_ODMIRF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_ODMIRF") OF oPanelF3
	Endif
	nLi += 1.5
	@ nLi+0.1,2.3  SAY OemToAnsi(STR0064) OF oPanelF3 Color CLR_HRED //"Orig. Anormalidade"
	@ nLi,8.8  COMBOBOX oCbx VAR M->TM9_ODORIG ITEMS aOrAnormal SIZE 78,55 OF oPanelF3 FONT oFont

	// ORELHA ESQUERDA
	nLi := 0.2
	@ nLi,29.2 TO nLi+If(lUpdMdt87,9.2,8),57.9 LABEL STR0041 OF oPanelF3 Color nCorAzul //"Orelha Esquerda"
	nLi += 1.1    //nLi = 1.5
	@ nLi,30.3   SAY OemToAnsi(STR0036) Of oPanelF3 Color nCorAzul //"Meatoscopia"
	@ nLi,36.6   MSGET M->TM9_OEMEAT picture "@!" SIZE 78,10 Of oPanelF3
	nLi += 1.5
	@ nLi,30.3  SAY OemToAnsi("S.R.T.") OF oPanelF3 Color nCorAzul
	@ nLi,36.6  MSGET M->TM9_OERECF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OERECF") OF oPanelF3
	If lUpdMdt87
		@ nLi,40.7 SAY OemToAnsi(STR0175) OF oPanelF3 Color nCorAzul //"Vl. Masc."
		@ nLi,43.8 MSGET M->TM9_OEMSRT SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OEMSRT") OF oPanelF3
		nLi += 1.5
		@ nLi,30.3 SAY OemToAnsi("S.D.T.") OF oPanelF3 Color nCorAzul
		@ nLi,36.6  MSGET M->TM9_OESDT SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OESDT") OF oPanelF3
	Endif
	nLi += 1.5	//nLi = 6.7
	@ nLi+0.5,30.3 SAY OemToAnsi("I.R.F.") OF oPanelF3 Color nCorAzul
	@ nLi,32.9 SAY OemToAnsi(STR0039) OF oPanelF3 Color nCorAzul //"Quant. Mon."
	@ nLi,36.6  MSGET M->TM9_OEREMO SIZE 20,10 picture "999" Valid CheckSX3("TM9_OEREMO") OF oPanelF3
	nLi += 1	//nLi = 7.7
	@ nLi,32.9  SAY OemToAnsi(STR0040) OF oPanelF3 Color nCorAzul //"Quant. Diss."
	@ nLi,36.6  MSGET M->TM9_OEREDI SIZE 20,10 picture "999" Valid CheckSX3("TM9_OEREDI") OF oPanelF3
	If lUpdMdt87
		@ nLi-0.5,40.7 SAY OemToAnsi(STR0175) OF oPanelF3 Color nCorAzul //"Vl. Masc."
		@ nLi-0.5,43.8 MSGET M->TM9_OEMIRF SIZE 20,10 picture "9999" Valid CheckSX3("TM9_OEMIRF") OF oPanelF3
	Endif
	nLi += 1.5
	@ nLi+0.1,30.3  SAY OemToAnsi(STR0064) OF oPanelF3 Color nCorAzul //"Orig. Anormalidade"
	@ nLi,36.6  COMBOBOX oCbx VAR M->TM9_OEORIG ITEMS aOrAnormal SIZE 78,55 OF oPanelF3 FONT oFont

	// Folder 04
	oPanelF4:=TPanel():New(0,0,,oFolder:aDialogs[4],,,,,CLR_WHITE,10,10,.F.,.F.)
	oPanelF4:Align := CONTROL_ALIGN_ALLCLIENT

	nLi := 0.3
	nCol := 2
	nCol2 := nCol+5.5
	nCol3 := 18.7
	nCol4 := 23

	// Informacoes do Resultado
	@ nLi,nCol  SAY OemToAnsi(STR0092) Of oPanelF4 Color CLR_HBLUE  //"Dt. Resultado"
	@ nLi,nCol2 MSGET M->TM5_DTRESU picture "99/99/99" SIZE 45,08 Of oPanelF4 Valid NaoVazio(M->TM5_DTRESU) HasButton
	@ nLi,(nCol3-0.7) SAY OemToAnsi(STR0033) Of oPanelF4 //"Hrs Repouso"
	@ nLi,nCol4 MSGET M->TM9_REPOUS  SIZE 20,10 Picture "99" Of oPanelF4
	nLi += 1
	@ nLi,nCol  Say OemToAnsi(STR0093) Of oPanelF4   //"Cód. Resultado"
	@ nLi,nCol2 MsGet M->TM5_CODRES Size 30,10 Picture "@!" Of oPanelF4 F3 "TMU";
						Valid If(Empty(M->TM5_CODRES),.T.,EXISTCPO("TMU",M->TM5_CODRES)) .AND. NOCODIGO() HasButton
	@ nLi,nCol3 Say OemToAnsi(STR0011) Of oPanelF4 //"Resultado"
	@ nLi,nCol4 MsGet M->TM5_RESULT Picture "@!" SIZE 138,10 Of oPanelF4 When .f.
	nLi += 1
	@ nLi,nCol  SAY OemToAnsi(STR0099) Of oPanelF4  //"Ind. Resultado"
	@ nLi,nCol2 COMBOBOX oCbx VAR M->TM5_INDRES ITEMS aCodRes SIZE 80,40 Of oPanelF4
	nLi += 1.1
	@ nLi,nCol  SAY OemToAnsi(STR0094) Of oPanelF4 //"Det. Resultado"
	@ nLi,nCol2 GET oMemo Var M->TM5_DESRES MEMO SIZE 261,20 MEMO Of oPanelF4
	nLi += 1.8
	@ nLi,nCol  SAY OemToAnsi(STR0095) Of oPanelF4 //"Obs. Resultado"
	@ nLi,nCol2 MSGET M->TM5_OBSERV  SIZE 263,10 Picture "@!" Of oPanelF4

	// Equipamento
	nLi += 1.6
	@ nLi-1.2,2 TO 9.1,41.0 LABEL STR0031 OF oPanelF4   //"Equipamento"
	@ nLi,2.5   Say OemToAnsi(STR0031) Of oPanelF4 Color CLR_HBLUE //"Equipamento"
	@ nLi,nCol2 MsGet M->TM9_EQPTO Size 30,10 Picture "@!" Of oPanelF4 F3 "TM7" Valid If(NaoVazio(M->TM9_EQPTO),ExistCpo("TM7",M->TM9_EQPTO) .AND. NOEQUIP1(),.F.) HasButton
	@ nLi,nCol3 Say OemToAnsi(STR0097) Of oPanelF4 //"Nome Equip."
	@ nLi,nCol4 MsGet M->TM9_NOEQTO Picture "@!" SIZE 140,10 Of oPanelF4 When .f.
	nLi += 1
	@ nLi,2.5   SAY OemToAnsi(STR0045) Of oPanelF4 Color CLR_HBLUE  //"Aferição"
	@ nLi,nCol2 MSGET M->TM9_DTAFER picture "99/99/99" SIZE 45,08 Of oPanelF4  Valid NaoVazio(M->TM9_DTAFER) HasButton
	@ nLi,nCol3 SAY OemToAnsi(STR0044) Of oPanelF4 //"Calibração"
	@ nLi,nCol4 MSGET M->TM9_DTCALI picture "99/99/99" SIZE 45,08 Of oPanelF4 HasButton
	nLi += 1
	@ nLi,2.5   SAY OemToAnsi(STR0034) Of oPanelF4 Color CLR_HBLUE //"Responsável"
	@ nLi,nCol2 MSGET M->TM9_USURES SIZE 50,10 Picture "@!" Of oPanelF4 F3 "TMK";
					Valid If(NaoVazio(M->TM9_USURES),ExistCpo("TMK",M->TM9_USURES) .AND. VNomeUsu(M->TM9_USURES),.F.) HasButton
	@ nLi,nCol3 SAY OemToAnsi(STR0098) Of oPanelF4 //"Nome Resp."
	@ nLi,nCol4 MSGET M->TM9_NOMUSU picture "@!" SIZE 140,10 When .f. Of oPanelF4
	nLi += 0.2

	If Type("asMenu") == "U"
		asMenu := NGRIGHTCLICK("MDTA120")
	Endif

	// Click da direita
	NgPopUp(asMenu,@oMenu)
	oDlg:bRClicked             := { |o,x,y| oMenu:Activate(x,y,oDlg)}
	oPanelDlg:bRClicked        := { |o,x,y| oMenu:Activate(x,y,oPanelDlg)}
	oPanel:bRClicked           := { |o,x,y| oMenu:Activate(x,y,oPanel)}
	oPanelHis:bRClicked        := { |o,x,y| oMenu:Activate(x,y,oPanelHis)}
	oPanelTit:bRClicked        := { |o,x,y| oMenu:Activate(x,y,oPanelTit)}
	oPanelF1:bRClicked         := { |o,x,y| oMenu:Activate(x,y,oPanelF1)}
	oPanelF2:bRClicked         := { |o,x,y| oMenu:Activate(x,y,oPanelF2)}
	oPanelF3:bRClicked         := { |o,x,y| oMenu:Activate(x,y,oPanelF3)}
	oPanelF4:bRClicked         := { |o,x,y| oMenu:Activate(x,y,oPanelF4)}
	oBrowHis:oBrowse:bRClicked := { |o,x,y| oMenu:Activate(x,y,oBrowHis:oBrowse)}

	If oCbxEx:nAT > 1
		MudaExame(oCbxEx)
	Endif

	If nOpcx == 2
		oPanelF1:Disable()
		oPanelF2:Disable()
		oPanelF3:Disable()
		oPanelF4:Disable()
	EndIf

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOPCA:=1,If(!AUDITUDOK(lUpdMdt87 .and. lUpdLimMk),nOPCAO := 0,oDlg:End())},{||oDlg:End()},,aButtons) Centered

	If nOPCA == 1 .AND. nOpcx <> 2
		fGravaMod3(.T.)
	Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} fGravaMod3
Grava informacoes do exame
@type static function
@author Denis
@since 26/01/2009
@param lMsg, boolean, indica se apresenta a mensagem
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function fGravaMod3(lMsg)
	Local lPCA 		:= .F.	//Denota se a pergunta "Deseja ir à tela de Programa de Saúde?" sera' feita
	Local lResul 	:= .F.
	Local lClenRes	:= .T.

	//--------------------------------
	// Grava o resultado da Via Aerea
	//--------------------------------
	dbSelectArea( "TM9" )
	dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
	If !dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "1" )
		RecLock("TM9",.T.)
		TM9->TM9_FILIAL := cFilTM9
		TM9->TM9_NUMFIC := cNUMFIC
		TM9->TM9_DTPROG := dDTPROG
		TM9->TM9_HRPROG := cHRPROG
		TM9->TM9_EXAME  := cEXAME
	Else
		RecLock("TM9",.F.) // altera
	EndIf
	TM9->TM9_INDVIA := "1"
	//------- Outras Informacoes  --------//
	TM9->TM9_REPOUS := M->TM9_REPOUS
	//Equipamento
	TM9->TM9_EQPTO  := M->TM9_EQPTO
	TM9->TM9_DTAFER := M->TM9_DTAFER
	TM9->TM9_DTCALI := M->TM9_DTCALI
	TM9->TM9_USURES := M->TM9_USURES
	//Meatoscopia
	TM9->TM9_ODMEAT := M->TM9_ODMEAT
	TM9->TM9_OEMEAT := M->TM9_OEMEAT
	//Logoaudiometria
	TM9->TM9_ODRECF := M->TM9_ODRECF
	TM9->TM9_ODREMO := M->TM9_ODREMO
	TM9->TM9_ODREDI := M->TM9_ODREDI
	TM9->TM9_OERECF := M->TM9_OERECF
	TM9->TM9_OEREMO := M->TM9_OEREMO
	TM9->TM9_OEREDI := M->TM9_OEREDI
	TM9->TM9_ODMSRT := M->TM9_ODMSRT
	TM9->TM9_ODSDT  := M->TM9_ODSDT
	TM9->TM9_ODMIRF := M->TM9_ODMIRF
	TM9->TM9_OEMSRT := M->TM9_OEMSRT
	TM9->TM9_OESDT  := M->TM9_OESDT
	TM9->TM9_OEMIRF := M->TM9_OEMIRF
	//Origem Anormalidade
	TM9->TM9_ODORIG := M->TM9_ODORIG
	TM9->TM9_OEORIG := M->TM9_OEORIG
	//Referencial
	TM9->TM9_ODREFE := M->TM9_ODREFE
	TM9->TM9_OEREFE := M->TM9_OEREFE
	//Resultados
	TM9->TM9_ODCLIN := M->TM9_ODCLIN
	TM9->TM9_OECLIN := M->TM9_OECLIN
	TM9->TM9_ODINSS := M->TM9_ODINSS
	TM9->TM9_OEINSS := M->TM9_OEINSS
	//Portaria 19
	TM9->TM9_ODRESU := M->TM9_ODRESU
	TM9->TM9_OERESU := M->TM9_OERESU
	//Verifica se alguma informacao está preenchida
	If 	!Empty(M->TM9_OD025K) .Or.;
		!Empty(M->TM9_OD05KH) .Or.;
		!Empty(M->TM9_OD1KHZ) .Or.;
		!Empty(M->TM9_OD2KHZ) .Or.;
		!Empty(M->TM9_OD3KHZ) .Or.;
		!Empty(M->TM9_OD4KHZ) .Or.;
		!Empty(M->TM9_OD6KHZ) .Or.;
		!Empty(M->TM9_OD8KHZ) .Or.;
		!Empty(M->TM9_ODMA25) .Or.;
		!Empty(M->TM9_ODMA50) .Or.;
		!Empty(M->TM9_ODMA10) .Or.;
		!Empty(M->TM9_ODMA20) .Or.;
		!Empty(M->TM9_ODMA30) .Or.;
		!Empty(M->TM9_ODMA40) .Or.;
		!Empty(M->TM9_ODMA60) .Or.;
		!Empty(M->TM9_ODMA80) .Or.;
		!Empty(M->TM9_OE025K) .Or.;
		!Empty(M->TM9_OE05KH) .Or.;
		!Empty(M->TM9_OE1KHZ) .Or.;
		!Empty(M->TM9_OE2KHZ) .Or.;
		!Empty(M->TM9_OE3KHZ) .Or.;
		!Empty(M->TM9_OE4KHZ) .Or.;
		!Empty(M->TM9_OE6KHZ) .Or.;
		!Empty(M->TM9_OE8KHZ) .Or.;
		!Empty(M->TM9_OEMA25) .Or.;
		!Empty(M->TM9_OEMA50) .Or.;
		!Empty(M->TM9_OEMA10) .Or.;
		!Empty(M->TM9_OEMA20) .Or.;
		!Empty(M->TM9_OEMA30) .Or.;
		!Empty(M->TM9_OEMA40) .Or.;
		!Empty(M->TM9_OEMA60) .Or.;
		!Empty(M->TM9_OEMA80)

		lClenRes := .F.

		//Limiar - OD
		TM9->TM9_OD025K := fCharToDb(M->TM9_OD025K, lA_VA_OD[1] , "TM9->TM9_ODAS25" , M->TM9_ODMA25 )
		TM9->TM9_OD05KH := fCharToDb(M->TM9_OD05KH, lA_VA_OD[2] , "TM9->TM9_ODAS50" , M->TM9_ODMA50 )
		TM9->TM9_OD1KHZ := fCharToDb(M->TM9_OD1KHZ, lA_VA_OD[3] , "TM9->TM9_ODAS10" , M->TM9_ODMA10 )
		TM9->TM9_OD2KHZ := fCharToDb(M->TM9_OD2KHZ, lA_VA_OD[4] , "TM9->TM9_ODAS20" , M->TM9_ODMA20 )
		TM9->TM9_OD3KHZ := fCharToDb(M->TM9_OD3KHZ, lA_VA_OD[5] , "TM9->TM9_ODAS30" , M->TM9_ODMA30 )
		TM9->TM9_OD4KHZ := fCharToDb(M->TM9_OD4KHZ, lA_VA_OD[6] , "TM9->TM9_ODAS40" , M->TM9_ODMA40 )
		TM9->TM9_OD6KHZ := fCharToDb(M->TM9_OD6KHZ, lA_VA_OD[7] , "TM9->TM9_ODAS60" , M->TM9_ODMA60 )
		TM9->TM9_OD8KHZ := fCharToDb(M->TM9_OD8KHZ, lA_VA_OD[8] , "TM9->TM9_ODAS80" , M->TM9_ODMA80 )
		//Limiar - OE
		TM9->TM9_OE025K := fCharToDb(M->TM9_OE025K, lA_VA_OE[1] , "TM9->TM9_OEAS25" , M->TM9_OEMA25 )
		TM9->TM9_OE05KH := fCharToDb(M->TM9_OE05KH, lA_VA_OE[2] , "TM9->TM9_OEAS50" , M->TM9_OEMA50 )
		TM9->TM9_OE1KHZ := fCharToDb(M->TM9_OE1KHZ, lA_VA_OE[3] , "TM9->TM9_OEAS10" , M->TM9_OEMA10 )
		TM9->TM9_OE2KHZ := fCharToDb(M->TM9_OE2KHZ, lA_VA_OE[4] , "TM9->TM9_OEAS20" , M->TM9_OEMA20 )
		TM9->TM9_OE3KHZ := fCharToDb(M->TM9_OE3KHZ, lA_VA_OE[5] , "TM9->TM9_OEAS30" , M->TM9_OEMA30 )
		TM9->TM9_OE4KHZ := fCharToDb(M->TM9_OE4KHZ, lA_VA_OE[6] , "TM9->TM9_OEAS40" , M->TM9_OEMA40 )
		TM9->TM9_OE6KHZ := fCharToDb(M->TM9_OE6KHZ, lA_VA_OE[7] , "TM9->TM9_OEAS60" , M->TM9_OEMA60 )
		TM9->TM9_OE8KHZ := fCharToDb(M->TM9_OE8KHZ, lA_VA_OE[8] , "TM9->TM9_OEAS80" , M->TM9_OEMA80 )
		//Mascaramento - OD
		TM9->TM9_ODMA25 := fCharToMk(M->TM9_ODMA25, lA_VA_OD[1], lM_VA_OD[1], M->TM9_OD025K)
		TM9->TM9_ODMA50 := fCharToMk(M->TM9_ODMA50, lA_VA_OD[2], lM_VA_OD[2], M->TM9_OD05KH)
		TM9->TM9_ODMA10 := fCharToMk(M->TM9_ODMA10, lA_VA_OD[3], lM_VA_OD[3], M->TM9_OD1KHZ)
		TM9->TM9_ODMA20 := fCharToMk(M->TM9_ODMA20, lA_VA_OD[4], lM_VA_OD[4], M->TM9_OD2KHZ)
		TM9->TM9_ODMA30 := fCharToMk(M->TM9_ODMA30, lA_VA_OD[5], lM_VA_OD[5], M->TM9_OD3KHZ)
		TM9->TM9_ODMA40 := fCharToMk(M->TM9_ODMA40, lA_VA_OD[6], lM_VA_OD[6], M->TM9_OD4KHZ)
		TM9->TM9_ODMA60 := fCharToMk(M->TM9_ODMA60, lA_VA_OD[7], lM_VA_OD[7], M->TM9_OD6KHZ)
		TM9->TM9_ODMA80 := fCharToMk(M->TM9_ODMA80, lA_VA_OD[8], lM_VA_OD[8], M->TM9_OD8KHZ)
		//Mascaramento - OE
		TM9->TM9_OEMA25 := fCharToMk(M->TM9_OEMA25, lA_VA_OE[1], lM_VA_OE[1], M->TM9_OE025K)
		TM9->TM9_OEMA50 := fCharToMk(M->TM9_OEMA50, lA_VA_OE[2], lM_VA_OE[2], M->TM9_OE05KH)
		TM9->TM9_OEMA10 := fCharToMk(M->TM9_OEMA10, lA_VA_OE[3], lM_VA_OE[3], M->TM9_OE1KHZ)
		TM9->TM9_OEMA20 := fCharToMk(M->TM9_OEMA20, lA_VA_OE[4], lM_VA_OE[4], M->TM9_OE2KHZ)
		TM9->TM9_OEMA30 := fCharToMk(M->TM9_OEMA30, lA_VA_OE[5], lM_VA_OE[5], M->TM9_OE3KHZ)
		TM9->TM9_OEMA40 := fCharToMk(M->TM9_OEMA40, lA_VA_OE[6], lM_VA_OE[6], M->TM9_OE4KHZ)
		TM9->TM9_OEMA60 := fCharToMk(M->TM9_OEMA60, lA_VA_OE[7], lM_VA_OE[7], M->TM9_OE6KHZ)
		TM9->TM9_OEMA80 := fCharToMk(M->TM9_OEMA80, lA_VA_OE[8], lM_VA_OE[8], M->TM9_OE8KHZ)
		//Medias
		TM9->TM9_ODMED5 := If( Empty(M->TM9_ODMED5), 999.99, STRPONTO(M->TM9_ODMED5) )
		TM9->TM9_ODMED3 := If( Empty(M->TM9_ODMED3), 999.99, STRPONTO(M->TM9_ODMED3) )
		TM9->TM9_OEMED5 := If( Empty(M->TM9_OEMED5), 999.99, STRPONTO(M->TM9_OEMED5) )
		TM9->TM9_OEMED3 := If( Empty(M->TM9_OEMED3), 999.99, STRPONTO(M->TM9_OEMED3) )
		//Limites
		TM9->TM9_ODLMIN := M->TM9_ODLMIN
		TM9->TM9_ODLMAX := M->TM9_ODLMAX
		TM9->TM9_OELMIN := M->TM9_OELMIN
		TM9->TM9_OELMAX := M->TM9_OELMAX
	Else
		//Limiar - OD
		TM9->TM9_OD025K := -1
		TM9->TM9_OD05KH := -1
		TM9->TM9_OD1KHZ := -1
		TM9->TM9_OD2KHZ := -1
		TM9->TM9_OD3KHZ := -1
		TM9->TM9_OD4KHZ := -1
		TM9->TM9_OD6KHZ := -1
		TM9->TM9_OD8KHZ := -1
		//Limiar - OE
		TM9->TM9_OE025K := -1
		TM9->TM9_OE05KH := -1
		TM9->TM9_OE1KHZ := -1
		TM9->TM9_OE2KHZ := -1
		TM9->TM9_OE3KHZ := -1
		TM9->TM9_OE4KHZ := -1
		TM9->TM9_OE6KHZ := -1
		TM9->TM9_OE8KHZ := -1
		//Limiares Ausentes - OE
		TM9->TM9_ODAS25 := " "
		TM9->TM9_ODAS50 := " "
		TM9->TM9_ODAS10 := " "
		TM9->TM9_ODAS20 := " "
		TM9->TM9_ODAS30 := " "
		TM9->TM9_ODAS40 := " "
		TM9->TM9_ODAS60 := " "
		TM9->TM9_ODAS80 := " "
		//Mascaramento - OD
		TM9->TM9_ODMA25 := -1
		TM9->TM9_ODMA50 := -1
		TM9->TM9_ODMA10 := -1
		TM9->TM9_ODMA20 := -1
		TM9->TM9_ODMA30 := -1
		TM9->TM9_ODMA40 := -1
		TM9->TM9_ODMA60 := -1
		TM9->TM9_ODMA80 := -1
		//Mascaramento - OE
		TM9->TM9_OEMA25 := -1
		TM9->TM9_OEMA50 := -1
		TM9->TM9_OEMA10 := -1
		TM9->TM9_OEMA20 := -1
		TM9->TM9_OEMA30 := -1
		TM9->TM9_OEMA40 := -1
		TM9->TM9_OEMA60 := -1
		TM9->TM9_OEMA80 := -1
		//Limiares Ausentes - OE
		TM9->TM9_OEAS25 := " "
		TM9->TM9_OEAS50 := " "
		TM9->TM9_OEAS10 := " "
		TM9->TM9_OEAS20 := " "
		TM9->TM9_OEAS30 := " "
		TM9->TM9_OEAS40 := " "
		TM9->TM9_OEAS60 := " "
		TM9->TM9_OEAS80 := " "
		//Medias
		TM9->TM9_ODMED5 := 0
		TM9->TM9_ODMED3 := 0
		TM9->TM9_OEMED5 := 0
		TM9->TM9_OEMED3 := 0
		//Limites
		TM9->TM9_ODLMIN := Space( 3 )
		TM9->TM9_ODLMAX := Space( 3 )
		TM9->TM9_OELMIN := Space( 3 )
		TM9->TM9_OELMAX := Space( 3 )
	Endif
	MsUnLock( "TM9" )

	//--------------------------------
	// Grava o resultado da Via Ossea
	//--------------------------------
	dbSelectArea("TM9")
	dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
	If !dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "2" )
		RecLock("TM9",.T.)
		TM9->TM9_FILIAL := cFilTM9
		TM9->TM9_NUMFIC := cNUMFIC
		TM9->TM9_DTPROG := dDTPROG
		TM9->TM9_HRPROG := cHRPROG
		TM9->TM9_EXAME  := cEXAME
	Else
		RecLock("TM9",.F.) //altera
	Endif
	TM9->TM9_INDVIA := "2"
	//------- Outras Informacoes  --------//
	TM9->TM9_REPOUS := M->TM9_REPOUS
	//Equipamento
	TM9->TM9_EQPTO  := M->TM9_EQPTO
	TM9->TM9_DTAFER := M->TM9_DTAFER
	TM9->TM9_DTCALI := M->TM9_DTCALI
	TM9->TM9_USURES := M->TM9_USURES
	//Meatoscopia
	TM9->TM9_ODMEAT := M->TM9_ODMEAT
	TM9->TM9_OEMEAT := M->TM9_OEMEAT
	//Logoaudiometria
	TM9->TM9_ODRECF := M->TM9_ODRECF
	TM9->TM9_ODREMO := M->TM9_ODREMO
	TM9->TM9_ODREDI := M->TM9_ODREDI
	TM9->TM9_OERECF := M->TM9_OERECF
	TM9->TM9_OEREMO := M->TM9_OEREMO
	TM9->TM9_OEREDI := M->TM9_OEREDI
	TM9->TM9_ODMSRT := M->TM9_ODMSRT
	TM9->TM9_ODSDT  := M->TM9_ODSDT
	TM9->TM9_ODMIRF := M->TM9_ODMIRF
	TM9->TM9_OEMSRT := M->TM9_OEMSRT
	TM9->TM9_OESDT  := M->TM9_OESDT
	TM9->TM9_OEMIRF := M->TM9_OEMIRF
	//Origem Anormalidade
	TM9->TM9_ODORIG := M->TM9_ODORIG
	TM9->TM9_OEORIG := M->TM9_OEORIG
	//Referencial
	TM9->TM9_ODREFE := M->TM9_ODREFE
	TM9->TM9_OEREFE := M->TM9_OEREFE
	//Resultados
	TM9->TM9_ODCLIN := M->TM9_ODCLIN
	TM9->TM9_OECLIN := M->TM9_OECLIN
	TM9->TM9_ODINSS := M->TM9_ODINSS
	TM9->TM9_OEINSS := M->TM9_OEINSS
	//Portaria 19
	TM9->TM9_ODRESU := M->TM9_ODRESU
	TM9->TM9_OERESU := M->TM9_OERESU
	//Verifica se alguma informacao está preenchida
	If 	!Empty(M2_OD05KH) .Or.;
		!Empty(M2_OD1KHZ) .Or.;
		!Empty(M2_OD2KHZ) .Or.;
		!Empty(M2_OD3KHZ) .Or.;
		!Empty(M2_OD4KHZ) .Or.;
		!Empty(M2_ODMA50) .Or.;
		!Empty(M2_ODMA10) .Or.;
		!Empty(M2_ODMA20) .Or.;
		!Empty(M2_ODMA30) .Or.;
		!Empty(M2_ODMA40) .Or.;
		!Empty(M2_OE05KH) .Or.;
		!Empty(M2_OE1KHZ) .Or.;
		!Empty(M2_OE2KHZ) .Or.;
		!Empty(M2_OE3KHZ) .Or.;
		!Empty(M2_OE4KHZ) .Or.;
		!Empty(M2_OEMA50) .Or.;
		!Empty(M2_OEMA10) .Or.;
		!Empty(M2_OEMA20) .Or.;
		!Empty(M2_OEMA30) .Or.;
		!Empty(M2_OEMA40)

		lClenRes := .F.

		//Limiar - OD
		TM9->TM9_OD025K := -1
		TM9->TM9_OD05KH := fCharToDb(M2_OD05KH, lA_VO_OD[1] , "TM9->TM9_ODAS50" , M2_ODMA50 )
		TM9->TM9_OD1KHZ := fCharToDb(M2_OD1KHZ, lA_VO_OD[2] , "TM9->TM9_ODAS10" , M2_ODMA10 )
		TM9->TM9_OD2KHZ := fCharToDb(M2_OD2KHZ, lA_VO_OD[3] , "TM9->TM9_ODAS20" , M2_ODMA20 )
		TM9->TM9_OD3KHZ := fCharToDb(M2_OD3KHZ, lA_VO_OD[4] , "TM9->TM9_ODAS30" , M2_ODMA30 )
		TM9->TM9_OD4KHZ := fCharToDb(M2_OD4KHZ, lA_VO_OD[5] , "TM9->TM9_ODAS40" , M2_ODMA40 )
		TM9->TM9_OD6KHZ := -1
		TM9->TM9_OD8KHZ := -1
		//Limiar - OE
		TM9->TM9_OE025K := -1
		TM9->TM9_OE05KH := fCharToDb(M2_OE05KH, lA_VO_OE[1] , "TM9->TM9_OEAS50" , M2_OEMA50 )
		TM9->TM9_OE1KHZ := fCharToDb(M2_OE1KHZ, lA_VO_OE[2] , "TM9->TM9_OEAS10" , M2_OEMA10 )
		TM9->TM9_OE2KHZ := fCharToDb(M2_OE2KHZ, lA_VO_OE[3] , "TM9->TM9_OEAS20" , M2_OEMA20 )
		TM9->TM9_OE3KHZ := fCharToDb(M2_OE3KHZ, lA_VO_OE[4] , "TM9->TM9_OEAS30" , M2_OEMA30 )
		TM9->TM9_OE4KHZ := fCharToDb(M2_OE4KHZ, lA_VO_OE[5] , "TM9->TM9_OEAS40" , M2_OEMA40 )
		TM9->TM9_OE6KHZ := -1
		TM9->TM9_OE8KHZ := -1
		//Mascaramento - OD
		TM9->TM9_ODMA25 := -1
		TM9->TM9_ODMA50 := fCharToMk(M2_ODMA50, lA_VO_OD[1], lM_VO_OD[1], M2_OD05KH)
		TM9->TM9_ODMA10 := fCharToMk(M2_ODMA10, lA_VO_OD[2], lM_VO_OD[2], M2_OD1KHZ)
		TM9->TM9_ODMA20 := fCharToMk(M2_ODMA20, lA_VO_OD[3], lM_VO_OD[3], M2_OD2KHZ)
		TM9->TM9_ODMA30 := fCharToMk(M2_ODMA30, lA_VO_OD[4], lM_VO_OD[4], M2_OD3KHZ)
		TM9->TM9_ODMA40 := fCharToMk(M2_ODMA40, lA_VO_OD[5], lM_VO_OD[5], M2_OD4KHZ)
		TM9->TM9_ODMA60 := -1
		TM9->TM9_ODMA80 := -1
		//Mascaramento - OE
		TM9->TM9_OEMA25 := -1
		TM9->TM9_OEMA50 := fCharToMk(M2_OEMA50, lA_VO_OE[1], lM_VO_OE[1], M2_OE05KH)
		TM9->TM9_OEMA10 := fCharToMk(M2_OEMA10, lA_VO_OE[2], lM_VO_OE[2], M2_OE1KHZ)
		TM9->TM9_OEMA20 := fCharToMk(M2_OEMA20, lA_VO_OE[3], lM_VO_OE[3], M2_OE2KHZ)
		TM9->TM9_OEMA30 := fCharToMk(M2_OEMA30, lA_VO_OE[4], lM_VO_OE[4], M2_OE3KHZ)
		TM9->TM9_OEMA40 := fCharToMk(M2_OEMA40, lA_VO_OE[5], lM_VO_OE[5], M2_OE4KHZ)
		TM9->TM9_OEMA60 := -1
		TM9->TM9_OEMA80 := -1
		//Limites
		TM9->TM9_ODLMIN := M2_ODLMIN
		TM9->TM9_ODLMAX := M2_ODLMAX
		TM9->TM9_OELMIN := M2_OELMIN
		TM9->TM9_OELMAX := M2_OELMAX
	Else
		//Limiar - OD
		TM9->TM9_OD025K := -1
		TM9->TM9_OD05KH := -1
		TM9->TM9_OD1KHZ := -1
		TM9->TM9_OD2KHZ := -1
		TM9->TM9_OD3KHZ := -1
		TM9->TM9_OD4KHZ := -1
		TM9->TM9_OD6KHZ := -1
		TM9->TM9_OD8KHZ := -1
		//Limiar - OE
		TM9->TM9_OE025K := -1
		TM9->TM9_OE05KH := -1
		TM9->TM9_OE1KHZ := -1
		TM9->TM9_OE2KHZ := -1
		TM9->TM9_OE3KHZ := -1
		TM9->TM9_OE4KHZ := -1
		TM9->TM9_OE6KHZ := -1
		TM9->TM9_OE8KHZ := -1
		//Limiares Ausentes - OE
		TM9->TM9_ODAS25 := " "
		TM9->TM9_ODAS50 := " "
		TM9->TM9_ODAS10 := " "
		TM9->TM9_ODAS20 := " "
		TM9->TM9_ODAS30 := " "
		TM9->TM9_ODAS40 := " "
		TM9->TM9_ODAS60 := " "
		TM9->TM9_ODAS80 := " "
		//Mascaramento - OD
		TM9->TM9_ODMA25 := -1
		TM9->TM9_ODMA50 := -1
		TM9->TM9_ODMA10 := -1
		TM9->TM9_ODMA20 := -1
		TM9->TM9_ODMA30 := -1
		TM9->TM9_ODMA40 := -1
		TM9->TM9_ODMA60 := -1
		TM9->TM9_ODMA80 := -1
		//Mascaramento - OE
		TM9->TM9_OEMA25 := -1
		TM9->TM9_OEMA50 := -1
		TM9->TM9_OEMA10 := -1
		TM9->TM9_OEMA20 := -1
		TM9->TM9_OEMA30 := -1
		TM9->TM9_OEMA40 := -1
		TM9->TM9_OEMA60 := -1
		TM9->TM9_OEMA80 := -1
		//Limiares Ausentes - OE
		TM9->TM9_OEAS25 := " "
		TM9->TM9_OEAS50 := " "
		TM9->TM9_OEAS10 := " "
		TM9->TM9_OEAS20 := " "
		TM9->TM9_OEAS30 := " "
		TM9->TM9_OEAS40 := " "
		TM9->TM9_OEAS60 := " "
		TM9->TM9_OEAS80 := " "
		//Limites
		TM9->TM9_ODLMIN := Space( 3 )
		TM9->TM9_ODLMAX := Space( 3 )
		TM9->TM9_OELMIN := Space( 3 )
		TM9->TM9_OELMAX := Space( 3 )
	Endif
	MsUnLock("TM9")

	If lClenRes
		dbSelectArea("TM9")
		dbSetOrder( 3 )  //TM9_FILIAL+TM9_NUMFIC+DTOS(TM9_DTPROG)+TM9_HRPROG+TM9_EXAME+TM9_INDVIA
		dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "1" )
		RecLock( "TM9" , .F. )
		//Resultados
		TM9->TM9_ODCLIN := "1"
		TM9->TM9_OECLIN := "1"
		TM9->TM9_ODINSS := "1"
		TM9->TM9_OEINSS := "1"
		//Portaria 19
		TM9->TM9_ODRESU := "1"
		TM9->TM9_OERESU := "1"
		TM9->( MsUnLock() )
		dbSeek( cFilTM9 + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "2" )
		RecLock( "TM9" , .F. )
		//Resultados
		TM9->TM9_ODCLIN := "1"
		TM9->TM9_OECLIN := "1"
		TM9->TM9_ODINSS := "1"
		TM9->TM9_OEINSS := "1"
		//Portaria 19
		TM9->TM9_ODRESU := "1"
		TM9->TM9_OERESU := "1"
		TM9->( MsUnLock() )
	EndIf

	//Altera data de Resultado
	RestArea(aAreaTM5)
	_ALTDTRES(.F.)
	If Substr(M->TM9_ODRESU,1,1) != "1" .And. Substr(M->TM9_ODRESU,1,1) != "2"
		lPCA := .T.
	EndIf
	If Substr(M->TM9_OERESU,1,1) != "1" .And. Substr(M->TM9_OERESU,1,1) != "2"
		lPCA := .T.
	EndIf
	If lPCA .And. lMsg
		If MsgYesNo(STR0068) //"Deseja ir à tela de Programa de Saúde?"
			cPrograma := "MDTA110"
			MDTA110A()
			cPrograma := "MDTA120"
		EndIf
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} ValChkMas
Ao marcar o checkbox M
@type static function
@author Denis
@since 26/01/2009
@param lTemp, boolean, param_descr
@param oTemp, object, param_descr
@param cCpoTemp, caracter, param_descr
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function ValChkMas( lTemp , oTemp , cCpoTemp )
If !lTemp
	&(cCpoTemp) := Space( Len( &(cCpoTemp) ) )
Endif
oTemp:SetFocus()
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} ValChkAus
Ao marcar o checkbox A..

LEGADO, remover assim que possível

@type static function
@author Denis
@since 26/01/2009
@param param, param_type, param_descr
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function ValChkAus( lTemp , oTemp , cCpo1Tmp , cCpo2Tmp , lCpo3Tmp )
Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} NG120DtoC
Converte Inteiro p/ String com validacoes
@type function
@author Denis Hyroshi de Souza
@since 02/07/2004
@param nDecibes, numeric, valor a ser convertido
@param lCpoAusente, boolean, limiar de ausência
@param cCpoAus, caracter, valor campo de ausência
@param lMostraA, boolean, indica se apresenta 'A'
@return caracter, valor convertido em caracter
/*/
//-------------------------------------------------------------------
Function NG120DtoC(nDecibes, lCpoAusente, cCpoAus , lMostraA)

	Local cDecibes := Space(3)
	Local cAux     := Space(3)

	Default lMostraA := .f.

	If nDecibes == -2 .or. nDecibes == -4
		lCpoAusente := .t.
		If !Empty(cCpoAus)
			cDecibes := PadR(cCpoAus,3)
		ElseIf lMostraA
			cDecibes := "A  "
		Endif
	Elseif nDecibes != -1
		cAux := Alltrim(Str(nDecibes,3))
		cDecibes := PadR(cAux,3)
	Endif

Return cDecibes

//-------------------------------------------------------------------
/*/{Protheus.doc} fMkToChar
Converte Inteiro p/ String com validacoes
@type static function
@author Denis Hyroshi de Souza
@since 02/07/2004
@param nDecibes, numeric, valor numerico a ser convertido
@param lCpoMascara, boolean, indica limiar de mascaramento
@param lTempAus, boolean, indica limiar de ausência
@return caracter, valor convertido
/*/
//-------------------------------------------------------------------
Static Function fMkToChar(nDecibes, lCpoMascara, lTempAus)

	Local cDecibes := Space(3)
	Local cAux     := Space(3)

	If nDecibes != -1 .and. nDecibes != -2
		lCpoMascara := .t.
		If nDecibes != -3
			cAux := Alltrim(Str(nDecibes,3))
			cDecibes := PadR(cAux,3)
		Endif
	ElseIf nDecibes == -2 .and. lTempAus
		lCpoMascara := .t.
	Endif

Return cDecibes

//-------------------------------------------------------------------
/*/{Protheus.doc} fCharToDb
Grava os valores dos limiares de forma correta
@type staticfuncion
@author Andre Perez Alvarez
@since 10/08/2007
@param cCampo, caracter, campo a ser avaliado
@param lAusente, boolean, indica se o limiar está ausente
@param cCpoLAus, caracter, limiar de ausencia
@param cMasc, caracter, indica o limiar de mascaramento
@return numeric, limiar que será atribuido ao campo
/*/
//-------------------------------------------------------------------
Static Function fCharToDb(cCampo, lAusente, cCpoLAus, cMasc)

	Local nDecib := 0

	If lAusente
		nDecib := -2
		If !Empty(cMasc)
			nDecib := -4
		Endif
		If Empty(cCampo)
			&(cCpoLAus) := " "
		Else
			&(cCpoLAus) := Padr(Alltrim(cCampo),3)
		Endif
	Else
		If Empty(cCampo)
			nDecib := -1
		Else
			nDecib := Val(cCampo)
		Endif
	Endif

Return nDecib

//-------------------------------------------------------------------
/*/{Protheus.doc} fCharToMk
Grava os valores dos limiares de forma correta
@type static function
@author Andre Perez Alvarez
@since 10/08/2007
@param cCampo, caracter, campo a ser avaliado
@param lAusente, boolean, indica se o limiar está ausente
@param lMascara, boolean, indica se o limiar está mascarado
@param cCampo2, caracter, valor do mascaramento
@return numeric, limiar que será atribuido ao campo
/*/
//-------------------------------------------------------------------
Static Function fCharToMk(cCampo, lAusente, lMascara, cCampo2)

Local nDecib := 0

If lMascara
	If !Empty(cCampo)
		nDecib := Val(cCampo)
	ElseIf !Empty(cCampo2)
		nDecib := -3
	Else
		nDecib := -1
	Endif
Else
	nDecib := -1
Endif

Return nDecib

//-------------------------------------------------------------------
/*/{Protheus.doc} fResulAnt
Busca informações dos exames realizados anteriormente
@type static function
@author Denis
@since 26/01/2009
@return array, array com quatro posições sendo:
	1º - array multidimencional contendo os resultados da audiometria
	2º - array no formato 'aheader'
	3º - array com o 'histórico' da TM9
	4º - array com datas
/*/
//-------------------------------------------------------------------
Static Function fResulAnt()

	Local aRet      := {}
	Local aHea      := {}
	Local aBox      := {}
	Local aHis      := {}
	Local nPos
	Local nCpo      := 0
	Local nTam      := 0
	Local nX        := 0
	Local nY        := 0
	Local aArAux    := {}
	Local aCpOD2KHZ := {  { , "0,25"   , "xOD025K", 3  }, ;
						  { , "0,5"    , "xOD05KH", 3  }, ;
						  { , "1"	   , "xOD1KHZ", 3  }, ;
						  { , "2"	   , "xOD2KHZ", 3  }, ;
						  { , "3"	   , "xOD3KHZ", 3  }, ;
					 	  { , "4"	   , "xOD4KHZ", 3  }, ;
						  { , "6"	   , "xOD6KHZ", 3  }, ;
						  { , "8"	   , "xOD8KHZ", 3  }, ;
						  { , STR0157  , "xOE1KHZ", 10 }, ; // "Média .5,1,2"
						  { , STR0158  , "xOE2KHZ", 10 } }  // "Média 3,4,6"

	Local aCampos   := {  { "TM5_DTRESU", STR0154 , "xDTRESU", 8  }, ; // "Data Resultado"
						  { "TM9_ODREFE", STR0155 , "xODREFE", 3  }, ; // "Referencial?"
	  					  { "TM9_INDVIA", STR0156 , "xINDVIA", 10 }, ; // "Via"
	  					  { "TM9_OD2KHZ", aCpOD2KHZ               }, ; // Valores
	   				      { "TMY_INDPAR", STR0149 , "xINDPAR", 40 }  } // "Parecer Clínico"*/

	For nX := 1 To Len( aCampos )

		cCpo   := aCampos[ nX , 1 ] //Campo atual
		//Se for os campos do TM9_OD2KHZ pega o array com as informações do campo
		nTam   := IIf( ValType(aCampos[ nX , 2 ] ) == "A", Len( aCampos[ nX , 2 ] ), 1 )
		aArAux := IIf( nTam > 1 , aClone(aCampos[ nX , 2 ]) , aClone(aCampos) )

		For nY := 1 To nTam
			nInd := IIf( nTam > 1, nY, nX )
			aAdd( aHea , {  aArAux[ nInd , 2 ]           , ;
							aArAux[ nInd , 3 ]           , ;
							X3Picture(cCpo)              , ;
							aArAux[ nInd , 4 ]           , ;
							GetSx3Cache( cCpo, "X3_DECIMAL"  ) , ;
							GetSx3Cache( cCpo, "X3_VALID"    ) , ;
							GetSx3Cache( cCpo, "X3_USADO"    ) , ;
							IIf( nTam > 1 , "C", GetSx3Cache( cCpo, "X3_TIPO" ) ), ;
							GetSx3Cache( cCpo, "X3_ARQUIVO"  ) , ;
							GetSx3Cache( cCpo, "X3_CONTEXT"  )    } )
		Next nY

	Next nX

	dbSelectArea("TM9")
	dbSetOrder(1)
	dbSeek(xFilial("TM9")+cNUMFIC)
	While !eof() .And. TM9->TM9_FILIAL == xFilial("TM9") .And. TM9->TM9_NUMFIC == cNUMFIC

		//Descarta se o exame for o exame apresentado na tela.
		If TM9->TM9_NUMFIC == cNUMFIC .And. TM9->TM9_DTPROG == dDTPROG .And. TM9->TM9_HRPROG == cHRPROG .And. TM9->TM9_EXAME == cEXAME
			dbSelectArea("TM9")
			dbSkip()
			Loop
		Endif

		dbSelectArea("TM5")
		dbSetOrder(8)
		If !dbSeek( xFilial("TM5") + TM9->TM9_NUMFIC + DtoS(TM9->TM9_DTPROG) + TM9->TM9_HRPROG + TM9->TM9_EXAME )
			dbSelectArea("TM9")
			dbSkip()
			Loop
		Endif

		nMEDIA3d := 0
		nMEDIA5d := 0
		lFalso := .F.
		x_OD025K := NG120DtoC(TM9->TM9_OD025K, @lFalso , TM9->TM9_ODAS25 , .T. )
		x_OD05KH := NG120DtoC(TM9->TM9_OD05KH, @lFalso , TM9->TM9_ODAS50 , .T. )
		x_OD1KHZ := NG120DtoC(TM9->TM9_OD1KHZ, @lFalso , TM9->TM9_ODAS10 , .T. )
		x_OD2KHZ := NG120DtoC(TM9->TM9_OD2KHZ, @lFalso , TM9->TM9_ODAS20 , .T. )
		x_OD3KHZ := NG120DtoC(TM9->TM9_OD3KHZ, @lFalso , TM9->TM9_ODAS30 , .T. )
		x_OD4KHZ := NG120DtoC(TM9->TM9_OD4KHZ, @lFalso , TM9->TM9_ODAS40 , .T. )
		x_OD6KHZ := NG120DtoC(TM9->TM9_OD6KHZ, @lFalso , TM9->TM9_ODAS60 , .T. )
		x_OD8KHZ := NG120DtoC(TM9->TM9_OD8KHZ, @lFalso , TM9->TM9_ODAS80 , .T. )

		If  !Empty(x_OD025K) .Or. !Empty(x_OD05KH) .Or.;
			!Empty(x_OD1KHZ) .Or. !Empty(x_OD2KHZ) .Or.;
			!Empty(x_OD3KHZ) .Or. !Empty(x_OD4KHZ) .Or.;
			!Empty(x_OD6KHZ) .Or. !Empty(x_OD8KHZ)

			lAusente3 := .F.
			lAusente5 := .F.
			cPARECER  := " "
			If Len(aResul) >= VAL(TM9->TM9_ODRESU)
				cPARECER := Substr(aResul[VAL(TM9->TM9_ODRESU)],3)
			Endif
			If TM9->TM9_INDVIA == "1"
				t_OD05KH  := IF(Empty(x_OD05KH) .Or. Alltrim(x_OD05KH) == "A", lAusente5 := .T., Val(x_OD05KH))
				t_OD1KHZ  := IF(Empty(x_OD1KHZ) .Or. Alltrim(x_OD1KHZ) == "A", lAusente5 := .T., Val(x_OD1KHZ))
				t_OD2KHZ  := IF(Empty(x_OD2KHZ) .Or. Alltrim(x_OD2KHZ) == "A", lAusente5 := .T., Val(x_OD2KHZ))
				t_OD3KHZ  := IF(Empty(x_OD3KHZ) .Or. Alltrim(x_OD3KHZ) == "A", lAusente3 := .T., Val(x_OD3KHZ))
				t_OD4KHZ  := IF(Empty(x_OD4KHZ) .Or. Alltrim(x_OD4KHZ) == "A", lAusente3 := .T., Val(x_OD4KHZ))
				t_OD6KHZ  := IF(Empty(x_OD6KHZ) .Or. Alltrim(x_OD6KHZ) == "A", lAusente3 := .T., Val(x_OD6KHZ))
				If !lAusente5
					nMEDIA5d := (t_OD05KH+t_OD1KHZ+t_OD2KHZ)/3
				Endif
				If !lAusente3
					nMEDIA3d := (t_OD3KHZ+t_OD4KHZ+t_OD6KHZ)/3
				Endif
			Else
				t_OD05KH  := IF(Empty(x_OD05KH) .Or. Alltrim(x_OD05KH) == "A", lAusente5 := .T., Val(x_OD05KH))
				t_OD1KHZ  := IF(Empty(x_OD1KHZ) .Or. Alltrim(x_OD1KHZ) == "A", lAusente5 := .T., Val(x_OD1KHZ))
				t_OD2KHZ  := IF(Empty(x_OD2KHZ) .Or. Alltrim(x_OD2KHZ) == "A", lAusente5 := .T., Val(x_OD2KHZ))
				t_OD3KHZ  := IF(Empty(x_OD3KHZ) .Or. Alltrim(x_OD3KHZ) == "A", lAusente3 := .T., Val(x_OD3KHZ))
				t_OD4KHZ  := IF(Empty(x_OD4KHZ) .Or. Alltrim(x_OD4KHZ) == "A", lAusente3 := .T., Val(x_OD4KHZ))
				If !lAusente5
					nMEDIA5d := (t_OD05KH+t_OD1KHZ+t_OD2KHZ)/3
				Endif
				If !lAusente3
					nMEDIA3d := (t_OD3KHZ+t_OD4KHZ)/2
				Endif
			Endif


			aAdd( aRet , {	TM5->TM5_DTRESU,;
							If(TM9->TM9_ODREFE == "1",STR0022,STR0159),; //"Sim"###"Não"
							If(TM9->TM9_INDVIA == "1",STR0160,STR0161),; //"Aérea"###"Óssea"
							x_OD025K,;
							x_OD05KH,;
							x_OD1KHZ,;
							x_OD2KHZ,;
							x_OD3KHZ,;
							x_OD4KHZ,;
							x_OD6KHZ,;
							x_OD8KHZ,;
							If(!lAusente5,Transform(nMEDIA5d,"@E 9,999.99"),""),;
							If(!lAusente3,Transform(nMEDIA3d,"@E 9,999.99"),""),;
							cPARECER,;
							"1",;
							TM9->TM9_DTPROG,;
							.F.})
		Endif

		nMEDIA3d := 0
		nMEDIA5d := 0
		lFalso := .F.
		x_OE025K := NG120DtoC(TM9->TM9_OE025K, @lFalso , TM9->TM9_OEAS25 , .T. )
		x_OE05KH := NG120DtoC(TM9->TM9_OE05KH, @lFalso , TM9->TM9_OEAS50 , .T. )
		x_OE1KHZ := NG120DtoC(TM9->TM9_OE1KHZ, @lFalso , TM9->TM9_OEAS10 , .T. )
		x_OE2KHZ := NG120DtoC(TM9->TM9_OE2KHZ, @lFalso , TM9->TM9_OEAS20 , .T. )
		x_OE3KHZ := NG120DtoC(TM9->TM9_OE3KHZ, @lFalso , TM9->TM9_OEAS30 , .T. )
		x_OE4KHZ := NG120DtoC(TM9->TM9_OE4KHZ, @lFalso , TM9->TM9_OEAS40 , .T. )
		x_OE6KHZ := NG120DtoC(TM9->TM9_OE6KHZ, @lFalso , TM9->TM9_OEAS60 , .T. )
		x_OE8KHZ := NG120DtoC(TM9->TM9_OE8KHZ, @lFalso , TM9->TM9_OEAS80 , .T. )

		If  !Empty(x_OE025K) .Or. !Empty(x_OE05KH) .Or.;
			!Empty(x_OE1KHZ) .Or. !Empty(x_OE2KHZ) .Or.;
			!Empty(x_OE3KHZ) .Or. !Empty(x_OE4KHZ) .Or.;
			!Empty(x_OE6KHZ) .Or. !Empty(x_OE8KHZ)

			lAusente3 := .F.
			lAusente5 := .F.
			cPARECER  := " "
			If Len(aResul) >= VAL(TM9->TM9_OERESU)
				cPARECER := Substr(aResul[VAL(TM9->TM9_OERESU)],3)
			Endif
			If TM9->TM9_INDVIA == "1"
				t_OE05KH  := IF(Empty(x_OE05KH) .Or. Alltrim(x_OE05KH) == "A", lAusente5 := .T., Val(x_OE05KH))
				t_OE1KHZ  := IF(Empty(x_OE1KHZ) .Or. Alltrim(x_OE1KHZ) == "A", lAusente5 := .T., Val(x_OE1KHZ))
				t_OE2KHZ  := IF(Empty(x_OE2KHZ) .Or. Alltrim(x_OE2KHZ) == "A", lAusente5 := .T., Val(x_OE2KHZ))
				t_OE3KHZ  := IF(Empty(x_OE3KHZ) .Or. Alltrim(x_OE3KHZ) == "A", lAusente3 := .T., Val(x_OE3KHZ))
				t_OE4KHZ  := IF(Empty(x_OE4KHZ) .Or. Alltrim(x_OE4KHZ) == "A", lAusente3 := .T., Val(x_OE4KHZ))
				t_OE6KHZ  := IF(Empty(x_OE6KHZ) .Or. Alltrim(x_OE6KHZ) == "A", lAusente3 := .T., Val(x_OE6KHZ))
				If !lAusente5
					nMEDIA5d := (t_OE05KH+t_OE1KHZ+t_OE2KHZ)/3
				Endif
				If !lAusente3
					nMEDIA3d := (t_OE3KHZ+t_OE4KHZ+t_OE6KHZ)/3
				Endif
			Else
				t_OE05KH  := IF(Empty(x_OE05KH) .Or. Alltrim(x_OE05KH) == "A", lAusente5 := .T., Val(x_OE05KH))
				t_OE1KHZ  := IF(Empty(x_OE1KHZ) .Or. Alltrim(x_OE1KHZ) == "A", lAusente5 := .T., Val(x_OE1KHZ))
				t_OE2KHZ  := IF(Empty(x_OE2KHZ) .Or. Alltrim(x_OE2KHZ) == "A", lAusente5 := .T., Val(x_OE2KHZ))
				t_OE3KHZ  := IF(Empty(x_OE3KHZ) .Or. Alltrim(x_OE3KHZ) == "A", lAusente3 := .T., Val(x_OE3KHZ))
				t_OE4KHZ  := IF(Empty(x_OE4KHZ) .Or. Alltrim(x_OE4KHZ) == "A", lAusente3 := .T., Val(x_OE4KHZ))
				If !lAusente5
					nMEDIA5d := (t_OE05KH+t_OE1KHZ+t_OE2KHZ)/3
				Endif
				If !lAusente3
					nMEDIA3d := (t_OE3KHZ+t_OE4KHZ)/2
				Endif
			Endif


			aAdd( aRet , {	TM5->TM5_DTRESU,;
							If(TM9->TM9_OEREFE == "1",STR0022,STR0159),; //"Sim"###"Não"
							If(TM9->TM9_INDVIA == "1",STR0160,STR0161),; //"Aérea"###"Óssea"
							x_OE025K,;
							x_OE05KH,;
							x_OE1KHZ,;
							x_OE2KHZ,;
							x_OE3KHZ,;
							x_OE4KHZ,;
							x_OE6KHZ,;
							x_OE8KHZ,;
							If(!lAusente5,Transform(nMEDIA5d,"@E 9,999.99"),""),;
							If(!lAusente3,Transform(nMEDIA3d,"@E 9,999.99"),""),;
							cPARECER,;
							"2",;
							TM9->TM9_DTPROG,;
							.F.})
		Endif

		nPos := aSCAN(aHis, {|x| x[1] == TM9->TM9_DTPROG .And. x[2] == TM9->TM9_HRPROG })
		If nPos == 0
			aAdd( aHis , { TM9->TM9_DTPROG , TM9->TM9_HRPROG , TM5->TM5_DTRESU , 0 , 0 , "2" } )
			nPos := Len(aHis)
		Endif
		If TM9->TM9_INDVIA == "2"
			aHis[nPos,5] := TM9->(Recno())
		Else
			aHis[nPos,4] := TM9->(Recno())
			aHis[nPos,6] := If( TM9->TM9_ODREFE == "1" .Or. TM9->TM9_OEREFE == "1" , "1" , "2" )
		Endif

		dbSelectArea("TM9")
		dbSkip()
	End

	aSORT(aRet,,,{|x,y| DtoS(x[1])+DtoS(x[16])+x[3]+x[15] < DtoS(y[1])+DtoS(y[16])+y[3]+y[15] })
	aSORT(aHis,,,{|x,y| DtoS(x[3])+DtoS(x[1])+x[2] < DtoS(y[3])+DtoS(y[1])+y[2] })

	aAdd( aBox , Space(10) )
	For nPos := 1 To Len(aHis)
		If aHis[nPos,6] == "1"
			aAdd( aBox , DtoC(aHis[nPos,3]) + " ("+STR0079+")" ) //"Referencial"
		Else
			aAdd( aBox , DtoC(aHis[nPos,3]) )
		Endif
	Next nPos

	If Len(aRet) == 0
		aAdd( aRet , {	Stod("")," "," "," "," "," "," "," "," "," "," "," "," "," "," ",Stod(""),.F.})
	Endif

Return {aRet,aHea,aHis,aBox}

//-------------------------------------------------------------------
/*/{Protheus.doc} MudaExame
Altera exame na tela de historico
@type static function
@author Denis
@since 26/01/2009
@param oCbxEx, object, instância da classe de combobox
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function MudaExame(oCbxEx)
Local nPosBox
Local lAusente3 := .F.
Local lAusente5 := .F.
Local nMEDIA5d  := 0
Local nMEDIA3d  := 0
Local lAerea    := .F.
cOdMed3  := Space(6)
cOdMed5  := Space(6)
cOeMed3  := Space(6)
cOeMed5  := Space(6)
cIndODre := aRefer[2]
cIndOEre := aRefer[2]
cH_VA_OD := {Space(3),Space(3),Space(3),Space(3),Space(3),Space(3),Space(3),Space(3)}
cH_VA_OE := {Space(3),Space(3),Space(3),Space(3),Space(3),Space(3),Space(3),Space(3)}
cH_VO_OD := {Space(3),Space(3),Space(3),Space(3),Space(3)}
cH_VO_OE := {Space(3),Space(3),Space(3),Space(3),Space(3)}
lM_HA_OD := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
lM_HA_OE := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
lA_HA_OD := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
lA_HA_OE := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.}
lM_HO_OD := {.F.,.F.,.F.,.F.,.F.}
lM_HO_OE := {.F.,.F.,.F.,.F.,.F.}
lA_HO_OD := {.F.,.F.,.F.,.F.,.F.}
lA_HO_OE := {.F.,.F.,.F.,.F.,.F.}

If oCbxEx:nAT > 1
	nPosBox := oCbxEx:nAT - 1

	If nPosBox <= Len(aHistorTM9) .And. aHistorTM9[nPosBox,4] > 0
		lAerea := .T.
		dbSelectArea("TM9")
		dbGoTo(aHistorTM9[nPosBox,4])
		If !Eof() .And. !Bof()
			cH_VA_OD[1] := NG120DtoC(TM9->TM9_OD025K, @lA_HA_OD[1] , TM9->TM9_ODAS25 )
			cH_VA_OD[2] := NG120DtoC(TM9->TM9_OD05KH, @lA_HA_OD[2] , TM9->TM9_ODAS50 )
			cH_VA_OD[3] := NG120DtoC(TM9->TM9_OD1KHZ, @lA_HA_OD[3] , TM9->TM9_ODAS10 )
			cH_VA_OD[4] := NG120DtoC(TM9->TM9_OD2KHZ, @lA_HA_OD[4] , TM9->TM9_ODAS20 )
			cH_VA_OD[5] := NG120DtoC(TM9->TM9_OD3KHZ, @lA_HA_OD[5] , TM9->TM9_ODAS30 )
			cH_VA_OD[6] := NG120DtoC(TM9->TM9_OD4KHZ, @lA_HA_OD[6] , TM9->TM9_ODAS40 )
			cH_VA_OD[7] := NG120DtoC(TM9->TM9_OD6KHZ, @lA_HA_OD[7] , TM9->TM9_ODAS60 )
			cH_VA_OD[8] := NG120DtoC(TM9->TM9_OD8KHZ, @lA_HA_OD[8] , TM9->TM9_ODAS80 )
			//Mascaramento
			fMkToChar(TM9->TM9_ODMA25, @lM_HA_OD[1] , lA_HA_OD[1] )
			fMkToChar(TM9->TM9_ODMA50, @lM_HA_OD[2] , lA_HA_OD[2] )
			fMkToChar(TM9->TM9_ODMA10, @lM_HA_OD[3] , lA_HA_OD[3] )
			fMkToChar(TM9->TM9_ODMA20, @lM_HA_OD[4] , lA_HA_OD[4] )
			fMkToChar(TM9->TM9_ODMA30, @lM_HA_OD[5] , lA_HA_OD[5] )
			fMkToChar(TM9->TM9_ODMA40, @lM_HA_OD[6] , lA_HA_OD[6] )
			fMkToChar(TM9->TM9_ODMA60, @lM_HA_OD[7] , lA_HA_OD[7] )
			fMkToChar(TM9->TM9_ODMA80, @lM_HA_OD[8] , lA_HA_OD[8] )

			If VAL(TM9->TM9_ODREFE) > 0 .And. VAL(TM9->TM9_ODREFE) <= Len(aRefer)
				cIndODre := aRefer[VAL(TM9->TM9_ODREFE)]
			Endif
			If VAL(TM9->TM9_OEREFE) > 0 .And. VAL(TM9->TM9_OEREFE) <= Len(aRefer)
				cIndOEre := aRefer[VAL(TM9->TM9_OEREFE)]
			Endif
			nMEDIA5d := 0
			nMEDIA3d := 0
			If  !Empty(cH_VA_OD[1]) .Or. !Empty(cH_VA_OD[2]) .Or.;
				!Empty(cH_VA_OD[3]) .Or. !Empty(cH_VA_OD[4]) .Or.;
				!Empty(cH_VA_OD[5]) .Or. !Empty(cH_VA_OD[6]) .Or.;
				!Empty(cH_VA_OD[7]) .Or. !Empty(cH_VA_OD[8])

				lAusente3 := .F.
				lAusente5 := .F.
				t_OD05KH  := IF(Empty(cH_VA_OD[2]), lAusente5 := .T., Val(cH_VA_OD[2]))
				t_OD1KHZ  := IF(Empty(cH_VA_OD[3]), lAusente5 := .T., Val(cH_VA_OD[3]))
				t_OD2KHZ  := IF(Empty(cH_VA_OD[4]), lAusente5 := .T., Val(cH_VA_OD[4]))
				t_OD3KHZ  := IF(Empty(cH_VA_OD[5]), lAusente3 := .T., Val(cH_VA_OD[5]))
			    t_OD4KHZ  := IF(Empty(cH_VA_OD[6]), lAusente3 := .T., Val(cH_VA_OD[6]))
			    t_OD6KHZ  := IF(Empty(cH_VA_OD[7]), lAusente3 := .T., Val(cH_VA_OD[7]))
				If !lAusente5
					nMEDIA5d := (t_OD05KH+t_OD1KHZ+t_OD2KHZ)/3
					cOdMed5  := Transform(nMEDIA5d,"@E 9,999.99")
				Endif
				If !lAusente3
					nMEDIA3d := (t_OD3KHZ+t_OD4KHZ+t_OD6KHZ)/3
					cOdMed3  := Transform(nMEDIA3d,"@E 9,999.99")
				Endif
			Endif

			cH_VA_OE[1] := NG120DtoC(TM9->TM9_OE025K, @lA_HA_OE[1] , TM9->TM9_OEAS25 )
			cH_VA_OE[2] := NG120DtoC(TM9->TM9_OE05KH, @lA_HA_OE[2] , TM9->TM9_OEAS50 )
			cH_VA_OE[3] := NG120DtoC(TM9->TM9_OE1KHZ, @lA_HA_OE[3] , TM9->TM9_OEAS10 )
			cH_VA_OE[4] := NG120DtoC(TM9->TM9_OE2KHZ, @lA_HA_OE[4] , TM9->TM9_OEAS20 )
			cH_VA_OE[5] := NG120DtoC(TM9->TM9_OE3KHZ, @lA_HA_OE[5] , TM9->TM9_OEAS30 )
			cH_VA_OE[6] := NG120DtoC(TM9->TM9_OE4KHZ, @lA_HA_OE[6] , TM9->TM9_OEAS40 )
			cH_VA_OE[7] := NG120DtoC(TM9->TM9_OE6KHZ, @lA_HA_OE[7] , TM9->TM9_OEAS60 )
			cH_VA_OE[8] := NG120DtoC(TM9->TM9_OE8KHZ, @lA_HA_OE[8] , TM9->TM9_OEAS80 )
			//Mascaramento
			fMkToChar(TM9->TM9_OEMA25, @lM_HA_OE[1] , lA_HA_OE[1] )
			fMkToChar(TM9->TM9_OEMA50, @lM_HA_OE[2] , lA_HA_OE[2] )
			fMkToChar(TM9->TM9_OEMA10, @lM_HA_OE[3] , lA_HA_OE[3] )
			fMkToChar(TM9->TM9_OEMA20, @lM_HA_OE[4] , lA_HA_OE[4] )
			fMkToChar(TM9->TM9_OEMA30, @lM_HA_OE[5] , lA_HA_OE[5] )
			fMkToChar(TM9->TM9_OEMA40, @lM_HA_OE[6] , lA_HA_OE[6] )
			fMkToChar(TM9->TM9_OEMA60, @lM_HA_OE[7] , lA_HA_OE[7] )
			fMkToChar(TM9->TM9_OEMA80, @lM_HA_OE[8] , lA_HA_OE[8] )

			nMEDIA5d := 0
			nMEDIA3d := 0
			If  !Empty(cH_VA_OE[1]) .Or. !Empty(cH_VA_OE[2]) .Or.;
				!Empty(cH_VA_OE[3]) .Or. !Empty(cH_VA_OE[4]) .Or.;
				!Empty(cH_VA_OE[5]) .Or. !Empty(cH_VA_OE[6]) .Or.;
				!Empty(cH_VA_OE[7]) .Or. !Empty(cH_VA_OE[8])

				lAusente3 := .F.
				lAusente5 := .F.
				t_OD05KH  := IF(Empty(cH_VA_OE[2]), lAusente5 := .T., Val(cH_VA_OE[2]))
				t_OD1KHZ  := IF(Empty(cH_VA_OE[3]), lAusente5 := .T., Val(cH_VA_OE[3]))
				t_OD2KHZ  := IF(Empty(cH_VA_OE[4]), lAusente5 := .T., Val(cH_VA_OE[4]))
				t_OD3KHZ  := IF(Empty(cH_VA_OE[5]), lAusente3 := .T., Val(cH_VA_OE[5]))
			    t_OD4KHZ  := IF(Empty(cH_VA_OE[6]), lAusente3 := .T., Val(cH_VA_OE[6]))
			    t_OD6KHZ  := IF(Empty(cH_VA_OE[7]), lAusente3 := .T., Val(cH_VA_OE[7]))
				If !lAusente5
					nMEDIA5d := (t_OD05KH+t_OD1KHZ+t_OD2KHZ)/3
					cOEMed5  := Transform(nMEDIA5d,"@E 9,999.99")
				Endif
				If !lAusente3
					nMEDIA3d := (t_OD3KHZ+t_OD4KHZ+t_OD6KHZ)/3
					cOEMed3  := Transform(nMEDIA3d,"@E 9,999.99")
				Endif
			Endif
		Endif
	Endif

	If nPosBox <= Len(aHistorTM9) .And. aHistorTM9[nPosBox,5] > 0
		dbSelectArea("TM9")
		dbGoTo(aHistorTM9[nPosBox,5])
		If !Eof() .And. !Bof()

			lFalso := .F.
			cH_VO_OD[1] := NG120DtoC(TM9->TM9_OD05KH, @lA_HO_OD[1] , TM9->TM9_ODAS50 )
			cH_VO_OD[2] := NG120DtoC(TM9->TM9_OD1KHZ, @lA_HO_OD[2] , TM9->TM9_ODAS10 )
			cH_VO_OD[3] := NG120DtoC(TM9->TM9_OD2KHZ, @lA_HO_OD[3] , TM9->TM9_ODAS20 )
			cH_VO_OD[4] := NG120DtoC(TM9->TM9_OD3KHZ, @lA_HO_OD[4] , TM9->TM9_ODAS30 )
			cH_VO_OD[5] := NG120DtoC(TM9->TM9_OD4KHZ, @lA_HO_OD[5] , TM9->TM9_ODAS40 )
			//Mascaramento
			fMkToChar(TM9->TM9_ODMA50, @lM_HO_OD[1] , lA_HO_OD[1] )
			fMkToChar(TM9->TM9_ODMA10, @lM_HO_OD[2] , lA_HO_OD[2] )
			fMkToChar(TM9->TM9_ODMA20, @lM_HO_OD[3] , lA_HO_OD[3] )
			fMkToChar(TM9->TM9_ODMA30, @lM_HO_OD[4] , lA_HO_OD[4] )
			fMkToChar(TM9->TM9_ODMA40, @lM_HO_OD[5] , lA_HO_OD[5] )

			If !lAerea
				If VAL(TM9->TM9_ODREFE) > 0 .And. VAL(TM9->TM9_ODREFE) <= Len(aRefer)
					cIndODre := aRefer[VAL(TM9->TM9_ODREFE)]
				Endif
				If VAL(TM9->TM9_OEREFE) > 0 .And. VAL(TM9->TM9_OEREFE) <= Len(aRefer)
					cIndOEre := aRefer[VAL(TM9->TM9_OEREFE)]
				Endif
			Endif

			nMEDIA5d := 0
			nMEDIA3d := 0
			If  !Empty(cH_VA_OD[1]) .Or. !Empty(cH_VA_OD[2]) .Or.;
				!Empty(cH_VA_OD[3]) .Or. !Empty(cH_VA_OD[4]) .Or.;
				!Empty(cH_VA_OD[5]) .Or. !Empty(cH_VA_OD[6]) .Or.;
				!Empty(cH_VA_OD[7]) .Or. !Empty(cH_VA_OD[8])

				lAusente3 := .F.
				lAusente5 := .F.
				t_OD05KH  := IF(Empty(cH_VA_OD[2]), lAusente5 := .T., Val(cH_VA_OD[2]))
				t_OD1KHZ  := IF(Empty(cH_VA_OD[3]), lAusente5 := .T., Val(cH_VA_OD[3]))
				t_OD2KHZ  := IF(Empty(cH_VA_OD[4]), lAusente5 := .T., Val(cH_VA_OD[4]))
				t_OD3KHZ  := IF(Empty(cH_VA_OD[5]), lAusente3 := .T., Val(cH_VA_OD[5]))
			    t_OD4KHZ  := IF(Empty(cH_VA_OD[6]), lAusente3 := .T., Val(cH_VA_OD[6]))
				If !lAusente5
					nMEDIA5d := (t_OD05KH+t_OD1KHZ+t_OD2KHZ)/3
					cOdMed5  := Transform(nMEDIA5d,"@E 9,999.99")
				Endif
				If !lAusente3
					nMEDIA3d := (t_OD3KHZ+t_OD4KHZ)/2
					cOdMed3  := Transform(nMEDIA3d,"@E 9,999.99")
				Endif
			Endif

			cH_VO_OE[1] := NG120DtoC(TM9->TM9_OE05KH, @lA_HO_OE[1] , TM9->TM9_OEAS50 )
			cH_VO_OE[2] := NG120DtoC(TM9->TM9_OE1KHZ, @lA_HO_OE[2] , TM9->TM9_OEAS10 )
			cH_VO_OE[3] := NG120DtoC(TM9->TM9_OE2KHZ, @lA_HO_OE[3] , TM9->TM9_OEAS20 )
			cH_VO_OE[4] := NG120DtoC(TM9->TM9_OE3KHZ, @lA_HO_OE[4] , TM9->TM9_OEAS30 )
			cH_VO_OE[5] := NG120DtoC(TM9->TM9_OE3KHZ, @lA_HO_OE[5] , TM9->TM9_OEAS40 )
			//Mascaramento
			fMkToChar(TM9->TM9_OEMA50, @lM_HO_OE[1] , lM_HO_OE[1] )
			fMkToChar(TM9->TM9_OEMA10, @lM_HO_OE[2] , lM_HO_OE[2] )
			fMkToChar(TM9->TM9_OEMA20, @lM_HO_OE[3] , lM_HO_OE[3] )
			fMkToChar(TM9->TM9_OEMA30, @lM_HO_OE[4] , lM_HO_OE[4] )
			fMkToChar(TM9->TM9_OEMA40, @lM_HO_OE[5] , lM_HO_OE[5] )

			nMEDIA5d := 0
			nMEDIA3d := 0
			If  !Empty(cH_VA_OE[1]) .Or. !Empty(cH_VA_OE[2]) .Or.;
				!Empty(cH_VA_OE[3]) .Or. !Empty(cH_VA_OE[4]) .Or.;
				!Empty(cH_VA_OE[5]) .Or. !Empty(cH_VA_OE[6]) .Or.;
				!Empty(cH_VA_OE[7]) .Or. !Empty(cH_VA_OE[8])

				lAusente3 := .F.
				lAusente5 := .F.
				t_OD05KH  := IF(Empty(cH_VA_OE[2]), lAusente5 := .T., Val(cH_VA_OE[2]))
				t_OD1KHZ  := IF(Empty(cH_VA_OE[3]), lAusente5 := .T., Val(cH_VA_OE[3]))
				t_OD2KHZ  := IF(Empty(cH_VA_OE[4]), lAusente5 := .T., Val(cH_VA_OE[4]))
				t_OD3KHZ  := IF(Empty(cH_VA_OE[5]), lAusente3 := .T., Val(cH_VA_OE[5]))
			    t_OD4KHZ  := IF(Empty(cH_VA_OE[6]), lAusente3 := .T., Val(cH_VA_OE[6]))
				If !lAusente5
					nMEDIA5d := (t_OD05KH+t_OD1KHZ+t_OD2KHZ)/3
					cOEMed5  := Transform(nMEDIA5d,"@E 9,999.99")
				Endif
				If !lAusente3
					nMEDIA3d := (t_OD3KHZ+t_OD4KHZ)/2
					cOEMed3  := Transform(nMEDIA3d,"@E 9,999.99")
				Endif
			Endif

		Endif
	Endif
Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} function
Imprimi relatorio de historico de exames
@type static function
@author Denis
@since 26/01/2009
@return null, sempre nulo
/*/
//-------------------------------------------------------------------
Static Function fMDTR489()

	Local aAreaXXX := GetArea()
	Local aAreaTM0 := TM0->(GetArea())
	Local aAreaSRA := SRA->(GetArea())

	If SubStr(M->TM9_OERESU,1,1) == "1" .Or. ;
		SubStr(M->TM9_ODRESU,1,1) == "1"
		If MsgYesNo(STR0170 + CHR(13) + ; //"Este exame não teve seus resultados calculados."
						STR0171) //"Deseja calcular os resultados?"

			If TM9->(FieldPos("TM9_ODAS25")) > 0
				oFolder:nOption := 2
				oCalcResult:SetFocus()
			Else
				oFolder:nOption := 1
				oCalcResult:SetFocus()
			Endif

			Return .F.
		Endif
	Endif

	MDTR489( "MDTA120" , cNUMFIC , cEXAME )

	RestArea(aAreaTM0)
	RestArea(aAreaSRA)
	RestArea(aAreaXXX)

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fImpRelat
realiza a impressão do resultado do exame
@type static function
@author Denis
@since 26/01/2009
@param cNUMFIC, caracter, codigo da ficha médica
@param dDTPROG, date, data de programação do exame
@param cHRPROG, caracter, hora de programação do exame
@param cEXAME, caracter, codigo do exame médico
@return null, sempre nulo
/*/
//-------------------------------------------------------------------
Static Function fImpRelat( cNUMFIC , dDTPROG , cHRPROG , cEXAME )

	Local aAreaXXX := GetArea()
	Local aAreaTM0 := TM0->(GetArea())
	Local aAreaSRA := SRA->(GetArea())
	Local lTem     := .f.
	Local nTamExa	:= If(TAMSX3("TM4_EXAME")[1] < 1, 6, TAMSX3("TM4_EXAME")[1])
	Local oTempTable
	Local cAliasTRB1 := GetNextAlias()

	dbSelectArea("TM9")
	aDBF := {}
	AADD(aDBF,{ "TM9_OK"     , "C" ,02, 0 })
	AADD(aDBF,{ "TM9_NUMFIC" , "C" ,09, 0 })
	AADD(aDBF,{ "TM9_EXAME"  , "C" ,nTamExa, 0 })
	AADD(aDBF,{ "TM9_DTPROG" , "D" ,08, 0 })
	AADD(aDBF,{ "TM9_HRPROG" , "C" ,05, 0 })
	AADD(aDBF,{ "TM9_EQPTO"  , "C" ,06, 0 })
	AADD(aDBF,{ "TM9_INDVIA" , "C" ,01, 0 })
	AADD(aDBF,{ "TM9_DESVIA" , "C" ,11, 0 })
	AADD(aDBF,{ "TM9_ODREFE" , "C" ,03, 0 })
	AADD(aDBF,{ "TM9_ODRESU" , "C" ,28, 0 })
	oTempTable := FWTemporaryTable():New( cAliasTRB1, aDBF )
	oTempTable:AddIndex( "1", {"TM9_NUMFIC","TM9_DTPROG","TM9_HRPROG","TM9_EXAME","TM9_INDVIA"} )
	oTempTable:Create()

	dbSelectArea("TM9")
	dbSetOrder(3)
	If dbSeek( xFilial("TM9") + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "1" )	  //Via Aerea
		lTem := .t.
	Else
		If dbSeek( xFilial("TM9") + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "2" )	  //Via Ossea
			lTem := .t.
		Endif
	Endif

	If !lTem
		lTem := .f.
		If MsgYesNo(STR0162) //"Este exame ainda não foi gravado. Deseja gravar e imprimir o resultado do exame?"
			If AUDITUDOK(lUpdMdt87 .and. lUpdLimMk)
				fGravaMod3(.F.)
				lTem := .t.
			Endif
		Endif
	Else
		lTem := .f.
		If AUDITUDOK(lUpdMdt87 .and. lUpdLimMk)
			fGravaMod3(.F.)
			lTem := .t.
		Endif
	Endif

	If lTem
		lTem := .f.
		dbSelectArea("TM9")
		dbSetOrder(3)
		If dbSeek( xFilial("TM9") + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "1" )	  //Via Aerea
			lTem := .t.
			dbSelectArea(cAliasTRB1)
			(cAliasTRB1)->(dbAppend())
			(cAliasTRB1)->TM9_OK     := "XX"
			(cAliasTRB1)->TM9_NUMFIC := TM9->TM9_NUMFIC
			(cAliasTRB1)->TM9_EXAME  := TM9->TM9_EXAME
			(cAliasTRB1)->TM9_DTPROG := TM9->TM9_DTPROG
			(cAliasTRB1)->TM9_HRPROG := TM9->TM9_HRPROG
			(cAliasTRB1)->TM9_EQPTO  := TM9->TM9_EQPTO
			(cAliasTRB1)->TM9_INDVIA := TM9->TM9_INDVIA
			(cAliasTRB1)->TM9_ODREFE := TM9->TM9_ODREFE
			(cAliasTRB1)->TM9_ODRESU := TM9->TM9_ODRESU
		Endif
		dbSelectArea("TM9")
		dbSetOrder(3)
		If dbSeek( xFilial("TM9") + cNUMFIC + DtoS(dDTPROG) + cHRPROG + cEXAME + "2" )	  //Via Ossea
			lTem := .t.
			dbSelectArea(cAliasTRB1)
			(cAliasTRB1)->(dbAppend())
			(cAliasTRB1)->TM9_OK     := "XX"
			(cAliasTRB1)->TM9_NUMFIC := TM9->TM9_NUMFIC
			(cAliasTRB1)->TM9_EXAME  := TM9->TM9_EXAME
			(cAliasTRB1)->TM9_DTPROG := TM9->TM9_DTPROG
			(cAliasTRB1)->TM9_HRPROG := TM9->TM9_HRPROG
			(cAliasTRB1)->TM9_EQPTO  := TM9->TM9_EQPTO
			(cAliasTRB1)->TM9_INDVIA := TM9->TM9_INDVIA
			(cAliasTRB1)->TM9_ODREFE := TM9->TM9_ODREFE
			(cAliasTRB1)->TM9_ODRESU := TM9->TM9_ODRESU
		Endif
		If lTem
			dbSelectArea(cAliasTRB1)
			dbGoTop()
			MDTR488IMP(cAliasTRB1)
		Else
			MsgInfo(STR0163) //"O Resultado do Exame ainda não foi gravado."
		Endif
	Endif

	dbSelectArea(cAliasTRB1)
	dbCloseArea()

	RestArea(aAreaTM0)
	RestArea(aAreaSRA)
	RestArea(aAreaXXX)
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fAvgCalc

@type static function
@author indefinido
@since indefinida
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function fAvgCalc()

	Local nMedD512
	Local nMedE512
	Local nMedD346
	Local nMedE346

	//Media [.5,1,2]
	If Empty(M->TM9_OD05KH) .or. Empty(M->TM9_OD1KHZ) .or. Empty(M->TM9_OD2KHZ) .or.;
	("A" $ M->TM9_OD05KH) .or. ("A" $ M->TM9_OD1KHZ) .or. ("A" $ M->TM9_OD2KHZ)
		nMedD512 := ""
	Else
		nMedD512 := (Val(M->TM9_OD05KH)+Val(M->TM9_OD1KHZ)+Val(M->TM9_OD2KHZ)) / 3
	Endif
	If Empty(M->TM9_OE05KH) .or. Empty(M->TM9_OE1KHZ) .or. Empty(M->TM9_OE2KHZ) .or.;
	("A" $ M->TM9_OE05KH) .or. ("A" $ M->TM9_OE1KHZ) .or. ("A" $ M->TM9_OE2KHZ)
		nMedE512 := ""
	Else
		nMedE512 := (Val(M->TM9_OE05KH)+Val(M->TM9_OE1KHZ)+Val(M->TM9_OE2KHZ)) / 3
	Endif

	//Media [3,4,6]
	If Empty(M->TM9_OD3KHZ) .or. Empty(M->TM9_OD4KHZ) .or. Empty(M->TM9_OD6KHZ) .or.;
	("A" $ M->TM9_OD3KHZ) .or. ("A" $ M->TM9_OD4KHZ) .or. ("A" $ M->TM9_OD6KHZ)
		nMedD346 := ""
	Else
		nMedD346 := (Val(M->TM9_OD3KHZ)+Val(M->TM9_OD4KHZ)+Val(M->TM9_OD6KHZ)) / 3
	Endif
	If Empty(M->TM9_OE3KHZ) .or. Empty(M->TM9_OE4KHZ) .or. Empty(M->TM9_OE6KHZ) .or.;
	("A" $ M->TM9_OE3KHZ) .or. ("A" $ M->TM9_OE4KHZ) .or. ("A" $ M->TM9_OE6KHZ)
		nMedE346 := ""
	Else
		nMedE346 := (Val(M->TM9_OE3KHZ)+Val(M->TM9_OE4KHZ)+Val(M->TM9_OE6KHZ)) / 3
	Endif

	M->TM9_ODMED5 := STRMED120(nMedD512)
	M->TM9_OEMED5 := STRMED120(nMedE512)
	M->TM9_ODMED3 := STRMED120(nMedD346)
	M->TM9_OEMED3 := STRMED120(nMedE346)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} fAltFocus
Alterada o foco ao digitar o limiar 8k da via aerea
@type static function
@author Denis
@since 26/01/2009
@param nTipo, numeric, codigo correspondente ao o objeto para o qual
						será alterado o foco
@return boolean, sempre verdadeiro
/*/
//-------------------------------------------------------------------
Static Function fAltFocus(nTipo)

	If nTipo == 1
		If nParFocus == 1
			oLeft05:SetFocus()
		Else
			If l025oe
				oAeDir25:SetFocus()
			Else
				oAeDir50:SetFocus()
			Endif
		Endif
	ElseIf nTipo == 2
		If nParFocus == 1
			oRight05:SetFocus()
		Else
			oLeft05:SetFocus()
		Endif
	ElseIf nTipo == 3
		If nParFocus == 1
			oAeDir25:SetFocus()
		Else
			oRight05:SetFocus()
		Endif
	ElseIf nTipo == 4
		If nParFocus == 1
			oAeDir50:SetFocus()
		Else
			oRight05:SetFocus()
		Endif
	Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} fLastTM9
Busca ultimo equipamento e responsavel utilizado
@type static function
@author Denis
@since 26/01/2009
@return array, retorna um array com duas posições (caso encontre dados),
				sendo a primeira posição o codigo do equipamento e
				a segunda o usuario responsável
/*/
//-------------------------------------------------------------------
Static Function fLastTM9()

	Local aRet := {nil,nil}

	#IFNDEF TOP
		dbSelectArea("TM9")
		dbSetOrder(1)
		dbGoBottom()
		While !Eof() .and. !Bof()
			If TM9->TM9_FILIAL = xFilial("TM9")
				If !Empty(TM9->TM9_EQPTO) .and. aRet[1] == nil
					aRet[1] := TM9->TM9_EQPTO
				Endif
				If !Empty(TM9->TM9_USURES) .and. aRet[2] == nil
					aRet[2] := TM9->TM9_USURES
				Endif
				If aRet[1] <> nil .and. aRet[2] <> nil
					Exit
				Endif
			Endif
			dbSkip(-1)
		End
	#ELSE
		cQuery := "SELECT TM9_EQPTO,TM9_USURES FROM "+RetSQLName("TM9")
		cQuery += " WHERE (TM9_EQPTO <> '' OR "
		cQuery += " TM9_USURES <> '') AND D_E_L_E_T_ = '' AND TM9_FILIAL = '"+xFilial("TM9")+"'"
		cQuery += " ORDER BY R_E_C_N_O_ DESC"
		MPSysOpenQuery( cQuery , "TM9TMP" )
		dbSelectArea("TM9TMP")
		dbGoTop()
		While !Eof() .and. !Bof()
			If !Empty(TM9TMP->TM9_EQPTO) .and. aRet[1] == nil
				aRet[1] := TM9TMP->TM9_EQPTO
			Endif
			If !Empty(TM9TMP->TM9_USURES) .and. aRet[2] == nil
				aRet[2] := TM9TMP->TM9_USURES
			Endif
			If aRet[1] <> nil .and. aRet[2] <> nil
				Exit
			Endif
			dbSkip()
		End
		dbSelectArea("TM9TMP")
		dbCloseArea()
	#ENDIF

Return aRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT120EXCL
Consiste confirmacao de Cálculo do Resultado
@type function
@author Hugo Rizzo Pereira
@since 12/01/2011
@return boolean, se confirmado o calculo dos resultados retorna
					verdadeiro caso contrario retorna falso
/*/
//-------------------------------------------------------------------
Function MDT120EXCL()

	Local lRet := .T.

	If SubStr(M->TM9_OERESU,1,1) == "1" .Or. ;
		SubStr(M->TM9_ODRESU,1,1) == "1"
		If MsgYesNo(STR0170 + CHR(13) + ; //"Este exame não teve seus resultados calculados."
						STR0171) //"Deseja calcular os resultados?"

			If TM9->(FieldPos("TM9_ODAS25")) > 0
				oFolder:nOption := 2
				oCalcResult:SetFocus()
			Else
				oFolder:nOption := 1
				oCalcResult:SetFocus()
			Endif

			lRet := .F.
		Endif
	Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} fLimMask
Verifica se esta habilitado campos de limite mascaramento
@type static function
@author Denis
@since 04/04/2011
@return boolean, retorna verdadeiro se o campo estiver como usado e
		o nível de acesso permita que seja acessado
/*/
//-------------------------------------------------------------------
Static Function fLimMask()

	Local lRet := .F.
	Local aArea := SX3->(GetArea())

	If X3Uso(GetSx3Cache("TM9_ODLMIN","X3_USADO")) .And. cNivel >= GetSx3Cache("TM9_ODLMIN","X3_NIVEL")
		lRet := .T.
	Endif

	RestArea(aArea)

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA120WHEN

Consiste em habilitar ou desabilitar campos.

@type    function

@author  Rodrigo Soledade
@since   16/08/2011

@obs foi identificado a inutilidade da função, visto que não há necessidade
		de efetuar o bloqueio de um campo visual

@param  nParam, numeric, indica o campo a ser avaliado
@return boolean, bloqueia os campos visuais.
/*/
//-------------------------------------------------------------------
Function MDTA120WHEN(nParam)

	Local aField := { "TM9_ODCLIN" , "TM9_ODINSS" , "TM9_ODRESU" , ;
						"TM9_OECLIN" , "TM9_OEINSS" , "TM9_OERESU" }

Return GetSX3Cache( aField[ nParam ] , "X3_VISUAL" ) <> "V"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120HIMP
Verifica os registros a serem impressos
Uso Genérico

@return

@sample
MDT120HIMP()

@author Jackson Machado
@since 21/08/2012
@version 1.0
/*/
//---------------------------------------------------------------------
Function MDT120HIMP(aRecnos)
	Local nInd
	Local cFilExa := "", cNumFic := "", cDtProg := "", cHrProg := "", cExame := "", cUsuLog := ""
	Local cAliExa := ""
	Local aArea   := GetArea()
	Local aRecCon := {}

	aRecnos := {{"TM5",{TM5->(RECNO())}}}

	dbSelectArea("TM4")
	dbSetOrder(1)
	If dbSeek(xFilial("TM4")+TM5->TM5_EXAME) .And. TM4->TM4_INDRES $ "2/3/4"
		If TM4->TM4_INDRES = "2"//"IBMP" -- TN4
	   		nInd    := 3
	   		cAliExa := "TN4"
	   		cFilExa	:= "TN4_FILIAL"
	   		cNumFic := "TN4_NUMFIC"
	   		cDtProg := "TN4_DTPROG"
	   		cHrProg := "TN4_HRPROG"
	   		cExame  := "TN4_EXAME"
	   		cUsuLog := "TN4_USERGI"
		ElseIf TM4->TM4_INDRES = "3"//"Itens do Exame" -- TM6
       		nInd    := 2
       		cAliExa := "TM6"
       		cFilExa	:= "TM6_FILIAL"
	   		cNumFic := "TM6_NUMFIC"
	   		cDtProg := "TM6_DTPROG"
	   		cHrProg := "TM6_HRPROG"
	   		cExame  := "TM6_EXAME"
	   		cUsuLog := "TM6_USERGI"
		ElseIf TM4->TM4_INDRES = "4"//"Audiometria" -- TM9
        	nInd    := 3
        	cAliExa := "TM9"
        	cFilExa	:= "TM9_FILIAL"
	   		cNumFic := "TM9_NUMFIC"
	   		cDtProg := "TM9_DTPROG"
	   		cHrProg := "TM9_HRPROG"
	   		cExame  := "TM9_EXAME"
	   		cUsuLog := "TM9_USERGI"
		Endif

		dbSelectArea(cAliExa)
		dbSetOrder(nInd)
		If dbSeek(xFilial(cAliExa)+TM5->TM5_NUMFIC+DTOS(TM5->TM5_DTPROG)+TM5->TM5_HRPROG+TM5->TM5_EXAME)
			While (cAliExa)->( !Eof() ) .And. ;
				xFilial(cAliExa) == &(cAliExa+"->"+cFilExa)  		.And.;
				&(cAliExa+"->"+cNumFic) == TM5->TM5_NUMFIC			.And.;
				&(cAliExa+"->"+cDtProg) == TM5->TM5_DTPROG   	    .And.;
				&(cAliExa+"->"+cHrProg) == TM5->TM5_HRPROG			.And.;
				&(cAliExa+"->"+cExame)  == TM5->TM5_EXAME

				aAdd(aRecCon,(cAliExa)->(Recno()))
				If (nPos := aScan(aRecnos,{|x| x[1] == cAliExa })) > 0
	   		    	aAdd(aRecnos[nPos][2],(cAliExa)->(Recno()))
	   		    Else
	   		    	aAdd(aRecnos,{cAliExa,{(cAliExa)->(Recno())}})
	   		    EndIf
				(cAliExa)->(dbSkip())
			End
		EndIf
		MDTBUSCADEL(@aRecnos,cAliExa,;
 			{xFilial(cAliExa),TM5->TM5_NUMFIC,DTOS(TM5->TM5_DTPROG),TM5->TM5_HRPROG,TM5->TM5_EXAME,MDTDATALO("TM5->TM5_USERGI")},;
 			{cFilExa,cNumFic,cDtProg,cHrProg,cExame,cUsuLog},aRecCon)
	Endif

	RestArea(aArea)
Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120DAT
Validação para os campos TM5_DTPROG e TM5_DTRESU

@author Guilherme Freudenburg
@since 13/12/2013
@return
/*/
//---------------------------------------------------------------------
Function MDT120DAT(nData)

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120WHE
Função que altera When do campo

@author Guilherme Freudenburg
@since 13/12/2013
@return
/*/
//---------------------------------------------------------------------
Function MDT120WHE(nCpo)
Local lRet := .T.

If nCpo == 1 //TM5_ORIGEX
	lRet := M->TM5_ORIGEX <> "1"
EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT120INIT

Inicializa variável r ou desabilitar campos.

@type    function

@author  Vitor Emanuel Batista
@since   06/02/2012

@param   cNUMFIC, caracter, numero da ficha médica
@return null, sempre nulo
/*/
//-------------------------------------------------------------------
Function MDT120INIT(cNUMFIC)

	M->TM5_FILIAL := xFilial("TM5")
	M->TM5_NOMFIC := trim( NgSeek("TM0",cNUMFIC,1,"TM0_NOMFIC") )
	M->TM5_NUMFIC := cNUMFIC

	If TM5->TM5_DTPROG == StoD("")
		M->TM5_DTPROG := dDataBase
	EndIf

	dbSelectArea("TM0")
	dbSetOrder(1)
	dbSeek(xFilial("TM0")+M->TM5_NUMFIC)

	dbSelectArea("SRA")
	dbSetOrder(1)
	If dbSeek(TM0->TM0_FILFUN+TM0->TM0_MAT) .AND. EMPTY(TM0->TM0_NUMDEP)

		dbSelectArea("SRJ")
		dbSetOrder(1)
		dbSeek(xFilial("SRJ")+SRA->RA_CODFUNC)
		cCBO  := SRJ->RJ_CBO

		If !Empty(SRJ->RJ_CODCBO)
			cCBO := SRJ->RJ_CODCBO
		Endif

		M->TM5_FILFUN := TM0->TM0_FILFUN
		M->TM5_MAT    := SRA->RA_MAT
		M->TM5_CC     := SRA->RA_CC
		M->TM5_CODFUN := SRA->RA_CODFUNC
		M->TM5_CBO    := cCBO
		M->TM5_TNOTRA := SRA->RA_TNOTRAB
		If SRA->(FieldPos("RA_POSTO")) > 0 .AND. TM5->(FieldPos("TM5_CODPOS")) > 0
			M->TM5_CODPOS := SRA->RA_POSTO
		Endif

		If lSigaMdtps
			M->TM5_NOMSET := Posicione("CTT",1,xFilial("CTT")+SRA->RA_CC,"CTT_DESC01")
			M->TM5_NOMFUN := SRJ->RJ_DESC
			M->TM5_NOMFOR := Space(40)
		Endif

	Else
		dbSelectArea("SRJ")
		dbSetOrder(1)
		dbSeek(xFilial("SRJ")+TM0->TM0_CODFUN)
		cCBO  := SRJ->RJ_CBO
		If !Empty(SRJ->RJ_CODCBO)
			cCBO := SRJ->RJ_CODCBO
		Endif
		M->TM5_CC     := TM0->TM0_CC
		M->TM5_CODFUN := TM0->TM0_CODFUN
		M->TM5_CBO    := cCBO
	EndIf
	If lSigaMdtps
		M->TM5_USUDIG := cUserName
	Endif

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120VLDR
Função de validação do campo TM5_DTRESU.

@type function

@source MDTA120.prx

@author Gabriel Gustavo de Mora
@since 24/08/2016

@sample MDT120VLDR()

@return Lógico, Retorna verdadeiro quando campo estiver com conteudo correto.
/*/
//---------------------------------------------------------------------
Function MDT120VLDR()

	Local lRet := .T.

	If !Empty(M->TM5_DTRESU)
		If M->TM5_DTRESU > dDataBase
			ShowHelpDlg( STR0182 , { STR0190 } , 1 , {STR0191} , 1 ) //"Data informada é maior que a data atual."##"Informe uma data menor ou igual a data atual."
			lRet := .F.
		EndIf
	EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120OR
tela de resultados Oftalmológicos Acuidade Visual

@type function

@source MDTA120.prx

@author Guilherme Freudenburg
@since 23/08/2017

@sample MDT120OR()

@return Lógico, Sempre Verdadeiro.
/*/
//---------------------------------------------------------------------
Function MDT120OR()

	Local oDlg
	Local oPanelDlg
	Local oPanel
	Local oFont
	Local oEnchoiFol
	Local oCheck1
	Local aCampLis := {}
	Local aALiTM0 := TM0->(GetArea())
	Local oPanelF1
	Local oPanelF2
	Local oPanelF3
	Local aTitles := {}
	Local aPages := {}
	Local lOk := .F.
	Local nX := 0
	Local nY := 0
	Local aCHOIFOL := {}
	Local aNaoFOL := {}
	Local nOpcSel := 1

	Local nView
	Local aViewStr := {}
	Local cTitle := ""
	Local cField := ""
	Local cValid := ""
	Local cCombo := ""

	Private cFiltro := ""
	Private oBrowHis
	Private aColLis := {}
	Private aList := {}
	Private aSize := MsAdvSize(, .f., 430), aObjects := {}

	Aadd(aObjects, {050, 050, .t., .t.})
	Aadd(aObjects, {100, 100, .t., .t.})
	aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects, .t.)

	//Campos que não apresentados em tela.
	aNaoFOL := { "TYB_FILIAL", "TYB_NUMFIC", "TYB_NOMFIC", "TYB_EXAME", "TYB_HRPROG", "TYB_DTPROG",;
					"TYB_OBSERV", "TYB_OFTIPO", "TYB_OLHOEL", "TYB_OLHODL", "TYB_OLHOAL",;
					"TYB_FORILL", "TYB_FORIVL", "TYB_COR1", "TYB_CORREL", "TYB_OLHOEP",;
					"TYB_OLHODP", "TYB_OLHOAP", "TYB_FORILP", "TYB_FORIVP", "TYB_ESTREP",;
					"TYB_CORREP", "TYB_VISUE", "TYB_FORIFP", "TYB_FORRPL", "TYB_FORIFL",;
					"TYB_ESTREL", "TYB_FORRPP", "TYB_VISUD", "TYB_REFERE", "TYB_AGRAVA",;
					"TYB_ORIGEM", "TYB_USACOR", "TYB_TIPO", "TYB_DETALH", "TYB_ESTERL",;
					"TYB_ESTERP", "TYB_COR2", "TYB_COR3", "TYB_COR4" }

	aCHOIFOL := NGCAMPNSX3("TYB", aNaoFOL) //Monta a estrutura dos campos da Enchoice.

	Aadd(aTitles, OemToAnsi(STR0210)) //"Oftalmologia"
	Aadd(aPages, "Header 1")
	Aadd(aTitles, OemToAnsi(STR0211)) //"Histórico"
	Aadd(aPages, "Header 2")
	Aadd(aTitles, OemToAnsi(STR0212)) //"Informações Gerais"
	Aadd(aPages, "Header 3")

	dbSelectArea("TYB")

	Define Font oFont Name "Arial" Size 07,17

	dbSelectArea("TYB")
	dbSetOrder(1)//TYB_FILIAL+TYB_NUMFIC+DTOS(TYB_DTPROG)+TYB_EXAME
	If dbSeek(xFilial("TYB") + TM0->TM0_NUMFIC + DTOS(TM5->TM5_DTPROG) +;
		TM5->TM5_HRPROG+TM5->TM5_EXAME)

		//Inicializa a Memória.
		RegToMemory("TYB",.F.)
		For nY := 1 To TYB->(FCOUNT()) //Percore todos os campos
			If FieldName(nY) <> 'TYB_OBSERV' .And. FieldName(nY) <> 'TYB_OBSERM' .And.;
				FieldName(nY) <> 'TYB_DETALH' .And. FieldName(nY) <> 'TYB_DETALM'

				cValor := "M->" + FieldName(nY) + " := TYB->" + FieldName(nY) //Seleciona o valor da memória.
				&cValor
			Else
				If FieldName(nY) == 'TYB_DETALM'
					M->TYB_DETALM := MSMM(TYB->TYB_DETALH,80)
				ElseIf FieldName(nY) == 'TYB_OBSERM'
					M->TYB_OBSERM := MSMM(TYB->TYB_OBSERV,80)
				EndIf
			EndIf
		Next nY
	Else
		//Inicaliza os valores de Memória
		RegToMemory("TYB",.T.)
	EndIf

	RestArea(aALiTM0)

	// Joga valores para a memória dos campos.
	M->TYB_FILIAL := xFilial("TYB")
	M->TYB_NUMFIC := TM0->TM0_NUMFIC
	M->TYB_EXAME  := TM5->TM5_EXAME
	M->TYB_HRPROG := TM5->TM5_HRPROG
	M->TYB_DTPROG := TM5->TM5_DTPROG
	M->TYB_OFTIPO := "1"

	//Verifica se campos de Resultado já foram preenchidos no exame.
	If !Empty(TM5->TM5_DTRESU)
		M->TYB_DTRESU := TM5->TM5_DTRESU
	EndIf
	If !Empty(TM5->TM5_CODRES)
		M->TYB_CODRES := TM5->TM5_CODRES
	EndIf
	If !Empty(TM5->TM5_INDRES)
		M->TYB_INDRES := TM5->TM5_INDRES
	EndIf

	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0213) From 0,0 To 605, 620 Style(DS_MODALFRAME);
		COLOR CLR_BLACK,CLR_WHITE OF oMainWnd Pixel //"Resultado - Ortho Rater"

	oPanelDlg:= tPanel():New(01, 01,, oDlg,,,,,,0, 0)
		oPanelDlg:Align := CONTROL_ALIGN_ALLCLIENT

	oPanel:= tPanel():New(01,01,,oPanelDlg,,,,CLR_BLACK,CLR_WHITE,10,10)
		oPanel:Align := CONTROL_ALIGN_ALLCLIENT

	@ 0.3, 0.6 Say STR0194 Of oPanel //"Ficha Médica"
	@ 0.2, 006 MsGet MDTHideCpo( TM0->TM0_NUMFIC, "TM0_NUMFIC" ) Size 30, 10 Of oPanel When .F.
	@ 0.2, 011 MsGet MDTHideCpo( TM0->TM0_NOMFIC, "TM0_NOMFIC" ) Size 120, 10 Of oPanel When .F.

	oFolder := TFolder():New(2,0,aTitles,aPages,oPanelDlg,,,,.f.,.f.,315,250,)
		oFolder:aDialogs[1]:oFont := oDlg:oFont
		oFolder:aDialogs[2]:oFont := oDlg:oFont
		oFolder:aDialogs[3]:oFont := oDlg:oFont

	//----------------------------
	// FOLDER DE OFTALMOLOGIA
	//----------------------------
	oPanelF1:=TPanel():New(0, 0,, oFolder:aDialogs[1],,,,, CLR_WHITE, 10, 10, .F., .F.)
		oPanelF1:Align := CONTROL_ALIGN_ALLCLIENT

	aAdd(aViewStr, {1, STR0195     , 00.4, 00.5, 16, 19}) //"Longe"
	aAdd(aViewStr, {2, "TYB_OLHOEL", 02.0, 01.5, 26, 10})
	aAdd(aViewStr, {2, "TYB_OLHODL", 02.0, 07.0, 26, 10})
	aAdd(aViewStr, {2, "TYB_OLHOAL", 02.0, 12.0, 26, 10})
	aAdd(aViewStr, {2, "TYB_FORILL", 04.0, 01.5, 26, 10})
	aAdd(aViewStr, {2, "TYB_FORIVL", 04.0, 07.0, 26, 10})
	aAdd(aViewStr, {2, "TYB_CORREL", 04.0, 12.0, 40, 10})
	aAdd(aViewStr, {2, "TYB_FORIFL", 06.0, 01.5, 70, 10})
	aAdd(aViewStr, {2, "TYB_FORRPL", 06.0, 12.0, 53, 12})
	aAdd(aViewStr, {2, "TYB_ESTERL", 08.0, 01.5, 70, 10})
	aAdd(aViewStr, {2, "TYB_ESTREL", 08.0, 12.0, 53, 12})

	aAdd(aViewStr, {1, STR0201   , 09.0, 01.2, 12.5, 18.5}) //"Cor"
	aAdd(aViewStr, {2, "TYB_COR1", 10.9, 02.0, 40  , 12  })
	aAdd(aViewStr, {2, "TYB_COR2", 10.9, 11.0, 40  , 12  })
	aAdd(aViewStr, {2, "TYB_COR3", 12.2, 02.0, 40  , 12  })
	aAdd(aViewStr, {2, "TYB_COR4", 12.2, 11.0, 40  , 12  })

	aAdd(aViewStr, {1, STR0202    , 13.0, 01.2, 15.5, 18.5}) //"Campo Visual"
	aAdd(aViewStr, {2, "TYB_VISUE", 15.5, 02.5, 55  , 12  })
	aAdd(aViewStr, {2, "TYB_VISUD", 15.5, 10.0, 55  , 12  })

	aAdd(aViewStr, {1, STR0205     , 00.4, 20.0, 09.5, 38.0}) //"Perto"
	aAdd(aViewStr, {2, "TYB_OLHOEP", 02.0, 21.0, 26  , 10  })
	aAdd(aViewStr, {2, "TYB_OLHODP", 02.0, 26.0, 26  , 10  })
	aAdd(aViewStr, {2, "TYB_OLHOAP", 02.0, 31.0, 26  , 10  })
	aAdd(aViewStr, {2, "TYB_FORILP", 04.0, 21.0, 26  , 10  })
	aAdd(aViewStr, {2, "TYB_FORIVP", 04.0, 26.0, 26  , 10  })
	aAdd(aViewStr, {2, "TYB_CORREP", 04.0, 31.0, 40  , 10  })
	aAdd(aViewStr, {2, "TYB_FORIFP", 06.0, 21.0, 70  , 10  })
	aAdd(aViewStr, {2, "TYB_FORRPP", 06.0, 31.0, 53  , 12  })
	aAdd(aViewStr, {2, "TYB_ESTERP", 08.0, 21.0, 70  , 10  })
	aAdd(aViewStr, {2, "TYB_ESTREP", 08.0, 31.0, 53  , 12  })

	aAdd(aViewStr, {1, STR0209     , 10.0, 20.0, 16.0, 38.0}) //"Exame"
	aAdd(aViewStr, {2, "TYB_REFERE", 12.0, 21.0, 40  , 12  })
	aAdd(aViewStr, {2, "TYB_AGRAVA", 13.8, 21.0, 40  , 12  })
	aAdd(aViewStr, {2, "TYB_ORIGEM", 13.8, 28.0, 60  , 12  })
	aAdd(aViewStr, {2, "TYB_USACOR", 15.5, 21.0, 40  , 12  })
	aAdd(aViewStr, {2, "TYB_TIPO"  , 15.5, 28.0, 50  , 12  })

	For nView := 1 To Len( aViewStr )
		If aViewStr[nView, 1] == 1
			@ aViewStr[nView, 3], aViewStr[nView, 4] To aViewStr[nView, 5], aViewStr[nView, 6];
				Label aViewStr[nView, 2] Of oPanelF1 Color 16742173
		Else
			cTitle := "{|| '" + ngRetTitulo(aViewStr[nView, 2]) + "' } "
			cValid := "{|| " + Posicione("SX3", 2, aViewStr[nView, 2], "X3_VALID") + "}"
			cField := "{ |u| if( Pcount() > 0, M->" + aViewStr[nView, 2] +;
						" := u, M->" + aViewStr[nView, 2] + ") }"
			cCbxVar := 'M->' + aViewStr[nView, 2]
			xCbx := Posicione("SX3", 2, aViewStr[nView, 2], "X3CBox()")
			cWhen := "{|| " + Posicione("SX3", 2, aViewStr[nView, 2], "X3_WHEN") + "}"

			TSay():New(aViewStr[nView, 3] - 0.5, aViewStr[nView, 4], &(cTitle), oPanelF1,,,,,,;
				.F., CLR_BLACK, CLR_WHITE, 40, 15)

			If Empty( xCbx )
				oGet := TGet():New(aViewStr[nView, 3], aViewStr[nView, 4],;
					&(cField), oPanelF1, aViewStr[nView, 5], aViewStr[nView, 6],;
					PesqPict( "TYB", aViewStr[nView, 2] ), &(cValid), CLR_BLACK,,,,, .F.,;
					,,,,,,,,, cCbxVar,,,,.T.,,)
			Else
				TComboBox():New(aViewStr[nView, 3], aViewStr[nView, 4], &(cField),;
					StrTokArr(AllTrim(xCbx), ";"), aViewStr[nView, 5], aViewStr[nView, 6],;
					oPanelF1,,, &(cValid),,, .F.,,,, &(cWhen)/*{|| .T. }bWhen*/,,,,,cCbxVar)
			EndIf
		EndIf
	Next nView

	//---------------------------
	// FOLDER DE HISTÓRICO
	//----------------------------
	oPanelF2:=TPanel():New(0,0,,oFolder:aDialogs[2],,,,,CLR_WHITE,10,10,.F.,.F.)
		oPanelF2:Align := CONTROL_ALIGN_ALLCLIENT

	oPnlF2Sup:= tPanel():New(01,01,,oPanelF2,,,,,CLR_WHITE,10,30)
		oPnlF2Sup:Align := CONTROL_ALIGN_TOP

	@ 0.3,1.0 TO 2.0,38.0 LABEL STR0215 OF oPnlF2Sup Color 16742173 //"Exibir"

	aSecSecao := {STR0216, STR0217, STR0218, STR0219}//"Todos","Anteriores","Referenciais","Referenciais Anteriores"

	cFiltro := "TYB->TYB_FILIAL == xFilial('TYB') .And. TYB->TYB_NUMFIC == TM5->TM5_NUMFIC .And. "
	cFiltro += "TYB->TYB_OFTIPO == TM4->TM4_OFTIPO"

	 aCampLis := { "TYB_DTPROG", "TYB_OLHOEL", "TYB_OLHODL", "TYB_OLHOAL", "TYB_FORIVL" }

	For nX := 1 To Len(aCampLis)
		aAdd(aColLis, fFieldCol( "{ | | " + aCampLis[nX] + " }", aCampLis[nX] ) )
	Next nX

	oBrowHis := FwBrowse():New()
		oBrowHis:SetAlias("TYB")
		oBrowHis:SetColumns(aColLis)//Define as colunas preestabelecidas
		oBrowHis:SetDataTable()
		oBrowHis:SetOwner(oPanelF2)//Define o objeto pai
		oBrowHis:DisableReport()//Desabilita botao de impressao
		oBrowHis:DisableConfig()//Desabilita botao de configuracao
		oBrowHis:SetFilterDefault(cFiltro)
		oBrowHis:Refresh()
		oBrowHis:Activate()//Ativa o browse

	//-----------------------------------------------
	//Cria um CheckList para selecionar os filtros.
	//-----------------------------------------------
	oCheck1 := TRadMenu():New(15, 20, aSecSecao,;
		{|u| If (PCount() == 0, nOpcSel, MDT120HIS( cFiltro, u, "TYB") )},;
		oPnlF2Sup,,,,,,,, 250, 012,,,, .T., .T.)

	//--------------------------------
	// FOLDER DE INFORMAÇÕES GERAIS
	//--------------------------------
	oPanelF3 := TPanel():New(0, 0,, oFolder:aDialogs[3],,,,, CLR_WHITE, 10, 10, .F., .F.)
		oPanelF3:Align := CONTROL_ALIGN_ALLCLIENT

	oEnchoiFol := MsMGet():New("TYB", 1 , 3,,,, aCHOIFOL, {0, 0, 300, 300},, 3,,,, oPanelF3)
		oEnchoiFol:oBox:Align := CONTROL_ALIGN_ALLCLIENT


	ACTIVATE MSDIALOG oDlg ON INIT;
		EnchoiceBar(oDlg, ;
					{ | | lOk := .T., If( MDT120OFV(.T.), oDlg:End(), lOk := .F.)},;
					{ | | lOk := .F., oDlg:End() }, .F.,) CENTERED //Abertura da Dialog utilizada.

	If lOk //Caso tenha confirmado a tela.
		dbSelectArea("TYB")
		dbSetOrder(1)
		If !dbSeek(xFilial("TYB") + TM0->TM0_NUMFIC + DTOS(TM5->TM5_DTPROG) +;
			TM5->TM5_HRPROG + TM5->TM5_EXAME)
			RecLock("TYB", .T.) //Trava tabela para alteração.
		Else
			RecLock("TYB", .F.) //Trava tabela para alteração.
		EndIf

		For nY := 1 To TYB->(FCOUNT()) //Percore todos os campos
			If FieldName(nY) <> 'TYB_OBSERV' .And. FieldName(nY) <> 'TYB_OBSERM' .And.;
				FieldName(nY) <> 'TYB_DETALH' .And. FieldName(nY) <> 'TYB_DETALM'
				nX := "M->" + FieldName(nY) //Seleciona o valor da memória.
				FieldPut(nY, &nX.) //Grava em base os registros.
			EndIf
		Next nY

		//Gravação dos campos MEMO.
		If !Empty(M->TYB_DETALM)
			MSMM(,,, &("M->TYB_DETALM"), 1,,,"TYB", "TYB_DETALH")
		EndIf
		If !Empty(M->TYB_OBSERM)
			MSMM(,,, &("M->TYB_OBSERM"), 1,,, "TYB", "TYB_OBSERV")
		EndIf

		TYB->( MsUnlock() ) //Destrava tabela.

		//----------------------------
		//Realiza a gravação na TM5
		//----------------------------
		RecLock("TM5",.F.)
		TM5->TM5_DTRESU := M->TYB_DTRESU
		TM5->TM5_CODRES := M->TYB_CODRES
		TM5->TM5_INDRES := M->TYB_INDRES
		TM5->TM5_EXAREF := M->TYB_REFERE
		TM5->TM5_INDAGR := M->TYB_AGRAVA
		TM5->TM5_ORIAGR := If(M->TYB_ORIGEM == '2', '1', '2')

		TM5->( MsUnlock() )
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120SN
MOntagem de tela do Resultado Snellen.

@type function

@source MDTA120.prx

@author Guilherme Freudenburg
@since 03/10/2017

@sample MDT120SN()

@return boolean, Sempre Verdadeiro.
/*/
//---------------------------------------------------------------------
Function MDT120SN()

	Local oDlg
	Local oPanelDlg
	Local oPanel
	Local oFont
	Local oEnchoiFol
	Local oEnc
	Local oCheck1

	Local aCampLis	:= {}
	Local aColLis	:= {}
	Local aList		:= {}
	Local aALiTM0	:= TM0->(GetArea())

	Local oPanelF1
	Local oPanelF2
	Local oPanelF3
	Local aTitles	:= {}
	Local aPages	:= {}
	Local lOk		:= .F.
	Local nX		:= 0
	Local nY		:= 0
	Local aChoiceF1 := {}
	Local aChoiceF3 := {}
	Local aNaoFOL	:= {}
	Local nOpcSel	:= 1

	Private oBrowHis
	Private aSize := MsAdvSize(,.F., 430), aObjects := {}
					Aadd(aObjects, {050, 050, .T., .T.})
					Aadd(aObjects, {100, 100, .T., .T.})
					aInfo   := {aSize[1], aSize[2], aSize[3], aSize[4], 0, 0}
					aPosObj := MsObjSize(aInfo, aObjects, .T.)

	//Campos da enchoice do folder 1
	aChoiceF1 := {"TYC_OLHOEL", "TYC_OLHODL", "TYC_OLHOAL", "TYC_CORREL", "TYC_REFERE",;
					"TYC_AGRAVA","TYC_ORIGEM","TYC_USACOR","TYC_TIPO"}

	//Campos que não apresentados em tela.
	aNaoFOL := { "TYC_FILIAL", "TYC_NUMFIC", "TYC_NOMFIC", "TYC_EXAME", "TYC_HRPROG", "TYC_DTPROG",;
					"TYC_OLHOEL", "TYC_OLHODL", "TYC_OLHOAL", "TYC_CORREL", "TYC_REFERE", "TYC_AGRAVA",;
					"TYC_ORIGEM", "TYC_USACOR", "TYC_TIPO", "TYC_DETALH", "TYC_OBSERV", "TYC_OFTIPO" }

	//Campos da enchoice do folder 3
	aChoiceF3 := NGCAMPNSX3("TYC", aNaoFOL) //Monta a estrutura dos campos da Enchoice.

	Aadd(aTitles, OemToAnsi(STR0210))//"Oftalmologia"
	Aadd(aPages, "Header 1")
	Aadd(aTitles, OemToAnsi(STR0211))//"Histórico"
	Aadd(aPages, "Header 2")
	Aadd(aTitles, OemToAnsi(STR0212))//"Informações Gerais"
	Aadd(aPages, "Header 3")

	dbSelectArea("TYC")

	Define Font oFont Name "Arial" Size 07,17

	dbSelectArea("TYC")
	dbSetOrder(1)//TYB_FILIAL+TYB_NUMFIC+DTOS(TYB_DTPROG)+TYB_EXAME
	If dbSeek(xFilial("TYC") + TM0->TM0_NUMFIC + DTOS(TM5->TM5_DTPROG) +;
		TM5->TM5_HRPROG + TM5->TM5_EXAME)

		//Inicializa a Memória.
		RegToMemory("TYC",.F.)

		For nY := 1 To TYC->(FCOUNT()) //Percorre todos os campos
			If FieldName(nY) <> 'TYC_OBSERV' .And. FieldName(nY) <> 'TYC_OBSERM' .And.;
				FieldName(nY) <> 'TYC_DETALH' .And. FieldName(nY) <> 'TYC_DETALM'

				cValor := "M->" + FieldName(nY) + " := TYC->" + FieldName(nY) //Seleciona o valor da memória.
				&cValor
			Else
				If FieldName(nY) == 'TYC_DETALM'
					M->TYC_DETALM := MSMM(TYC->TYC_DETALH,80)
				ElseIf FieldName(nY) == 'TYC_OBSERM'
					M->TYC_OBSERM := MSMM(TYC->TYC_OBSERV,80)
				EndIf
			EndIf
		Next nY
	Else
		//Inicializa a Memória.
		RegToMemory("TYC",.T.)
	EndIf
	RestArea(aALiTM0)


	// Atribui valores para a memória dos campos.
	M->TYC_FILIAL := xFilial("TYC")
	M->TYC_NUMFIC := TM0->TM0_NUMFIC
	M->TYC_EXAME  := TM5->TM5_EXAME
	M->TYC_HRPROG := TM5->TM5_HRPROG
	M->TYC_DTPROG := TM5->TM5_DTPROG
	M->TYC_OFTIPO := "2"

	//Verifica se campos de Resultado já foram preenchidos no exame.
	If !Empty(TM5->TM5_DTRESU)
		M->TYC_DTRESU := TM5->TM5_DTRESU
	EndIf
	If !Empty(TM5->TM5_CODRES)
		M->TYC_CODRES := TM5->TM5_CODRES
	EndIf
	If !Empty(TM5->TM5_INDRES)
		M->TYC_INDRES := TM5->TM5_INDRES
	EndIf

	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0214) From 0,0 To 550,620 COLOR CLR_BLACK,CLR_WHITE OF oMainWnd Pixel  //"Resultado - Exame Oftalmológico Snellen"

	oPanelDlg:= tPanel():New(01,01,,oDlg,,,,,,0,0)
		oPanelDlg:Align := CONTROL_ALIGN_ALLCLIENT

	oPnlTop := tPanel():New(01,01,,oPanelDlg,,,,CLR_BLACK,14211288,20,20)
		oPnlTop:Align := CONTROL_ALIGN_TOP

	oPnlFolder := tPanel():New(01,01,,oPanelDlg,,,,CLR_BLACK,14211288,10,10)
		oPnlFolder:Align := CONTROL_ALIGN_ALLCLIENT

	@ 0.3,0.6 Say STR0194 Of oPnlTop //"Ficha Médica"
	@ 0.2,006 MsGet MDTHideCpo( TM0->TM0_NUMFIC, "TM0_NUMFIC" ) Size 30,10 Of oPnlTop When .F.
	@ 0.2,011 MsGet MDTHideCpo( TM0->TM0_NOMFIC, "TM0_NOMFIC" ) Size 120,10 Of oPnlTop When .F.

	oFolder := TFolder():New(2,0,aTitles,aPages,oPnlFolder,,,,.f.,.f.,315,235,)
		oFolder:aDialogs[1]:oFont := oDlg:oFont
		oFolder:aDialogs[2]:oFont := oDlg:oFont
		oFolder:aDialogs[3]:oFont := oDlg:oFont
		oFolder:Align := CONTROL_ALIGN_ALLCLIENT

	// FOLDER DE OFTALMOLOGIA
	oPanelF1 := TPanel():New(0,0,,oFolder:aDialogs[1],,,,,CLR_WHITE,10,10,.F.,.F.)
		oPanelF1:Align := CONTROL_ALIGN_ALLCLIENT

		oEnc := MsMGet():New("TYC", 1, 3,,,, aChoiceF1, {0, 0, 300, 300}/*aPosObj[1]*/,, 3,,,, oPanelF1)
			oEnc:oBox:Align := CONTROL_ALIGN_ALLCLIENT


	// FOLDER DE HISTÓRICO
	oPanelF2:=TPanel():New(0,0,,oFolder:aDialogs[2],,,,,CLR_WHITE,10,10,.F.,.F.)
		oPanelF2:Align := CONTROL_ALIGN_ALLCLIENT

		oPnlF2Sup:= tPanel():New(01,01,,oPanelF2,,,,,CLR_WHITE,10,30)
			oPnlF2Sup:Align := CONTROL_ALIGN_TOP

		@ 0.3,1.0 TO 2.0,38.0 LABEL STR0215 OF oPnlF2Sup Color 16742173

		aSecSecao := {STR0216,STR0217,STR0218,STR0219}//"Todos","Anteriores","Referenciais","Referenciais Anteriores"

		cFiltro := "TYC->TYC_FILIAL == xFilial('TYC') .And. TYC->TYC_NUMFIC == TM5->TM5_NUMFIC"
		cFiltro += ".And. TYC->TYC_OFTIPO == TM4->TM4_OFTIPO"

		aCampLis := { "TYC_DTPROG", "TYC_OLHOEL", "TYC_OLHODL", "TYC_OLHOAL", "TYC_CORREL" }

		For nX := 1 To Len( aCampLis )
			If !Empty(GetSx3Cache(aCampLis[nX], "X3_CBOX"))
				aAdd(aColLis, fFieldCol(;
					"{|| AllTrim( NGRetSX3Box('"+ aCampLis[nX]+"', TYC->" + aCampLis[nX] + " ) ) }",;
					aCampLis[nX]))
			Else
				aAdd(aColLis, fFieldCol("{ | | " + aCampLis[nX] + " }", aCampLis[nX]))
			EndIf
		Next nX

		oBrowHis := FwBrowse():New()
		oBrowHis:SetAlias( "TYC" )
		oBrowHis:SetColumns(aColLis)//Define as colunas preestabelecidas
		oBrowHis:SetDataTable()
		oBrowHis:SetOwner(oPanelF2)//Define o objeto pai
		oBrowHis:DisableReport()//Desabilita botao de impressao
		oBrowHis:DisableConfig()//Desabilita botao de configuracao
		oBrowHis:SetFilterDefault( cFiltro )
		oBrowHis:Refresh()
		oBrowHis:Activate()//Ativa o browse

		// Cria um CheckList para selecionar os filtros.
		oCheck1 := TRadMenu():New(15, 20, aSecSecao,;
			{|u| If (PCount() == 0, nOpcSel, MDT120HIS( cFiltro , u , "TYC" ) )},;
			oPnlF2Sup,,,,,,,, 250, 012,,,, .T., .T.)

	// FOLDER DE INFORMAÇÕES GERAIS
	oPanelF3:=TPanel():New(0,0,,oFolder:aDialogs[3],,,,,CLR_WHITE,10,10,.F.,.F.)
	oPanelF3:Align := CONTROL_ALIGN_ALLCLIENT

	oEnchoiFol := MsMGet():New("TYC", 1, 3,,,, aChoiceF3, {0,0,300,300}/*aPosObj[1]*/,, 3,,,, oPanelF3)
		oEnchoiFol:oBox:Align := CONTROL_ALIGN_ALLCLIENT

	ACTIVATE MSDIALOG oDlg ON INIT;
		EnchoiceBar(oDlg,;
		{ | | lOk := .T., If( MDT120OFV(.F.), oDlg:End(), lOk := .F.)},;
		{ | | lOk := .F., oDlg:End() }, .F.,) CENTERED //Abertura da Dialog utilizada.

	If lOk //Caso tenha confirmado a tela.
		dbSelectArea("TYC")
		dbSetOrder(1)
		If !dbSeek(xFilial("TYC") + TM0->TM0_NUMFIC + DTOS(TM5->TM5_DTPROG) +;
			TM5->TM5_HRPROG+TM5->TM5_EXAME)
			RecLock("TYC", .T.) //Trava tabela para alteração.
		Else
			RecLock("TYC", .F.) //Trava tabela para alteração.
		EndIf

		For nY := 1 To TYC->(FCOUNT()) //Percore todos os campos
			If FieldName(nY) <> 'TYC_OBSERV' .And. FieldName(nY) <> 'TYC_OBSERM' .And.;
				FieldName(nY) <> 'TYC_DETALH' .And. FieldName(nY) <> 'TYC_DETALM'
				nX := "M->" + FieldName(nY) //Seleciona o valor da memória.
				FieldPut(nY, &nX.) //Grava em base os registros.
			EndIf
		Next nY

		//GRavação dos campos MEMO.
		If !Empty(M->TYC_DETALM)
			MSMM(,,, &("M->TYC_DETALM"), 1,,, "TYC", "TYC_DETALH")
		EndIf
		If !Empty(M->TYC_OBSERM)
			MSMM(,,, &("M->TYC_OBSERM"), 1,,, "TYC", "TYC_OBSERV")
		EndIf

		TYC->( MsUnlock() ) //Destrava tabela.

		//----------------------------
		//Realiza a gravação na TM5
		//----------------------------
		RecLock("TM5",.F.)
		TM5->TM5_DTRESU := M->TYC_DTRESU
		TM5->TM5_CODRES := M->TYC_CODRES
		TM5->TM5_INDRES := M->TYC_INDRES
		TM5->TM5_EXAREF := M->TYC_REFERE
		TM5->TM5_INDAGR := M->TYC_AGRAVA
		TM5->TM5_ORIAGR := If(M->TYC_ORIGEM == '2', '1', '2')
		TM5->( MsUnlock() )

	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120OFT
Responsavel por efetuar a validação dos campos de Valores Oftalmologicos.

@type function

@source MDTA120.prx

@author Guilherme Freudenburg
@since 30/08/2017

@sample MDT120OFT(10)

@return Lógico, Retorna verdadeiro quando campo estiver com conteudo correto.
/*/
//---------------------------------------------------------------------
Function MDT120OFT(nValor,nCamp)

	Local lRet := .T.
	Local cValor := ""
	Local lSnellen := (TM4->TM4_INDRES == '5' .And. TM4->TM4_OFTIPO == '2')

	Default nCamp := 1

	If nCamp == 1
		If !Empty(nValor) .And. nValor <> 0
			If (nVAlor <> 10 ) .And. (nVAlor <> 20 ) .And. (nVAlor <> 30 ) .And. (nVAlor <> 40 ) .And.;
				(nVAlor <> 50 ) .And. (nVAlor <> 60 ) .And. (nVAlor <> 70 ) .And. (nVAlor <> 80 ) .And. ;
				(nVAlor <> 90 ) .And. (nVAlor <> 100 ) .And. If(lSnellen, nVAlor <> 200, .T.)
				lRet := .F.
				//"Atenção"
				//"Valor do campo inválido!"
				If lSnellen
					//"Favor informar um valor dento da escala: 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ou 200"
					ShowHelpDlg(STR0108,{STR0220},2,{STR0233},2)
				Else
					//"Favor informar um valor dento da escala: 10, 20, 30, 40, 50, 60, 70, 80, 90 ou 100"
					ShowHelpDlg(STR0108,{STR0220},2,{STR0221},2)
				EndIf

			EndIf
		EndIf
	Else // Valida campos referentes a foria
		If !Empty(nValor)
			cValor := SubSTR( cValtoChar( nValor ) , 1 , 1 )
			If (cValor <> "0" ) .And. (cValor <> "1" ) .And. (cValor <> "2" ) .And. (cValor <> "3" ) .And.;
				(cValor <> "4" ) .And. (cValor <> "5" ) .And. (cValor <> "6" ) .And. (cValor <> "7" ) .And. ;
				(cValor <> "8" ) .And. (cValor <> "9" )
				lRet := .F.
				//"Atenção"
				//"Valor do campo inválido!"
				//"Favor informar um valor dento da escala: 0 a 9,9."
				ShowHelpDlg(STR0108,{STR0220},2,{STR0222},2)
			EndIf
		EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} fFieldCol
Define objeto das colunas

@return .T.

@sample fFieldCol()

@author Guilherme Freudenburg
@since 30/08/2017
/*/
//---------------------------------------------------------------------
Static Function fFieldCol(cData, cCampo)

	Local oColuna
	Local cX3Tipo := GetSx3Cache(cCampo, "X3_TIPO")
	Local cX3Titulo := Posicione( 'SX3' , 2 , cCampo , 'X3Titulo()' )//GetSx3Cache(cCampo, &('X3Titulo()'))

	//Adiciona as colunas do markbrowse
	oColuna := FWBrwColumn():New() //Cria objeto
		oColuna:SetAlign( If(cX3Tipo == "N",CONTROL_ALIGN_RIGHT,CONTROL_ALIGN_LEFT) ) //Define alinhamento
		oColuna:SetData( &(cData) ) //Define valor
		oColuna:SetEdit(.F.) //Indica se é editavel
		oColuna:SetTitle( AllTrim(cX3Titulo) ) //Define titulo###"Código"
		oColuna:SetType( cX3Tipo ) //Define tipo
		oColuna:SetSize(TAMSX3(cCampo)[1]+TAMSX3(cCampo)[2]) //Define tamanho
		oColuna:SetPicture( X3Picture(cCampo) ) //Define picture

Return oColuna


//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120OFV
Responsável por realizar a validação de TUDOOK

@author Guilherme Freudenburg
@since 28/08/2017

@sample MDT120OFV(.T.)

@param lTable - Caso .T. valida tabela TYB, caso contrário a TYC

@return lRet - Lógico, Verdadeiro quando preencher todas as verificações.
/*/
//---------------------------------------------------------------------
Function MDT120OFV(lTable)

	Local lRet := .T.
	Local cTable

	Default lTable := .T.

	cTable := If(lTable, "TYB", "TYC")
	Do Case
		Case Empty(&("M->"+cTable+"_DTRESU")) //Data Result.
			lRet := .F.
			Help(NIL, NIL, STR0108, NIL, STR0224, 1,; //"Atenção"##"O campo Data Result. é obrigatório."
					0, NIL, NIL, NIL, NIL, NIL, {STR0223})
		Case Empty(&("M->"+cTable+"_CODRES")) //Resultado
			lRet := .F.
			Help(NIL, NIL, STR0108, NIL, STR0225, 1,; //"Atenção"##"O campo Resultado é obrigatório."
					0, NIL, NIL, NIL, NIL, NIL, {STR0223})
		Case Empty(&("M->"+cTable+"_INDRES")) //Ind. Result.
			lRet := .F.
			Help(NIL, NIL, STR0108, NIL, STR0226, 1,; //"Atenção"##"O campo Ind. Result. é obrigatório."
					0, NIL, NIL, NIL, NIL, NIL, {STR0223})
		Case Empty(&("M->"+cTable+"_ATENDE")) //Atendente
			lRet := .F.
			Help(NIL, NIL, STR0108, NIL, STR0227, 1,; //"Atenção"##"O campo Atendente é obrigatório."
					0, NIL, NIL, NIL, NIL, NIL, {STR0223})
	EndCase

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT120HIS
Responsavel por montar o fitro.

@author Guilherme Freudenburg
@since 28/08/2017

@sample MDT120HIS( cFiltro, nVal)

@param cFiltro - Caracter - Filtro padrão já selecionado.
@param nVal - Numérico -Valor do filtro desejado.

@return Sempre Verdadeiro.
/*/
//---------------------------------------------------------------------
Function MDT120HIS( cFiltro , nVal , cTable )

	Default nVal := 1
	Default cTable := "TYB"

	If cTable == "TYB" //Acuidade Visual
		If nVal == 2  //Anteriores
			cFiltro += " .And. TYB->TYB_DTPROG < TM5->TM5_DTPROG"
		ElseIf nVal == 3 //Referenciais
			cFiltro += " .And. TYB->TYB_REFERE = '1'"
		ElseIf nVal == 4 // Referenciais Anteriores
			cFiltro += " .And. TYB->TYB_DTPROG < TM5->TM5_DTPROG .And. TYB->TYB_REFERE = '1'"
		Else //Todos
			cFiltro += " .And. ( TYB->TYB_REFERE = '1' .Or. TYB->TYB_REFERE = '2' ) "
		EndIf
	Else //Snellen
		If nVal == 2  //Anteriores
			cFiltro += " .And. TYC->TYC_DTPROG < TM5->TM5_DTPROG"
		ElseIf nVal == 3 //Referenciais
			cFiltro += " .And. TYC->TYC_REFERE = '1'"
		ElseIf nVal == 4 // Referenciais Anteriores
			cFiltro += " .And. TYC->TYC_DTPROG < TM5->TM5_DTPROG .And. TYC->TYC_REFERE = '1'"
		Else //Todos
			cFiltro += " .And. ( TYC->TYC_REFERE = '1' .Or. TYC->TYC_REFERE = '2' ) "
		EndIf
	EndIf

	oBrowHis:SetFilterDefault( cFiltro )
	oBrowHis:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT120TRIG
Gatilhos referentes aos exames oftalmológicos de acuidade visual.
Executado a partir do X7_REGRA.
@type function
@author Bruno Lobo de Souza
@since 13/08/2018
@param cDom, caracter, campo responsável por executar o gatilho (X7_CAMPO)
@return caracter, retorna o valor correspondente ao X7_REGRA, ou seja
					o valor a ser gatilhado ao campo destino (X7_CDOMIN).
/*/
//-------------------------------------------------------------------
Function MDT120VLD(cField)

	Local lRet := .T.
	Local aArea

	Do Case
		Case cField == 'TYB_AGRAVA'
			lRet := Pertence('12')
			If M->TYB_AGRAVA == '2'
				M->TYB_ORIGEM := '3'
			EndIf
		Case cField == 'TYC_AGRAVA'
			lRet := Pertence('12')
			If M->TYC_AGRAVA == '2'
				M->TYC_ORIGEM := '3'
			EndIf
		Case cField == 'TYB_USACOR'
			lRet := Pertence('123')
			If M->TYB_USACOR == '2'
				M->TYB_TIPO := '4'
			EndIf
		Case cField == 'TYC_USACOR'
			lRet := Pertence('123')
			If M->TYC_USACOR == '2'
				M->TYC_TIPO := '4'
			EndIf
		Case cField == 'TYB_DTRESU' .Or. cField == 'TYC_DTRESU'
			If !(lRet := &('M->'+cField) <= dDataBase)
				Help(NIL, NIL, STR0234, NIL, STR0190, 1,;
					0, NIL, NIL, NIL, NIL, NIL, {STR0191})
			EndIf
		Case cField == 'TYB_DTAFER' .Or. cField == 'TYC_DTAFER'
			If !(lRet := &('M->'+cField) <= dDataBase)
				Help(NIL, NIL, STR0234, NIL, STR0190, 1,;
					0, NIL, NIL, NIL, NIL, NIL, {STR0191})
			EndIf
		Case cField == 'TYB_CALIBR' .Or. cField == 'TYC_CALIBR'
			If !(lRet := &('M->'+cField) <= dDataBase)
				Help(NIL, NIL, STR0234, NIL, STR0190, 1,;
					0, NIL, NIL, NIL, NIL, NIL, {STR0191})
			EndIf
		Case cField == 'TYB_ATENDE' .Or. cField == 'TYC_ATENDE'
			aArea := GetArea()
			dbSelectArea('TMK')
			dbSetOrder(1)
			If dbSeek(xFilial('TMK')+&('M->'+cField))
				If !(lRet := TMK->TMK_DTINIC <= If(cField == 'TYB_ATENDE', M->TYB_DTRESU, M->TYC_DTRESU))
					ShowHelpDlg(STR0182,; //"Atenção"
						{STR0231}, 1,; //"O Atendente selecionado não havia iniciado suas funções na data informada para o resultado."
						{STR0232}, 1) //"Informe um atendente que tenha iniciado suas funções na data do resultado ou anterior."
				EndIf
			EndIf
			RestArea(aArea)
	EndCase

Return lRet
