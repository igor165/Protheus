#INCLUDE "MDTA010.ch"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

#DEFINE _nVERSAO 4 //Versao do fonte

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA010
Programa de Cadastro de Medicamentos

@return

@sample MDTA010()

@author Paulo Pego - Refeito por: Jackson Machado
@since 11/12/99 - Revisão: 09/09/13
/*/
//--------------------------------------------------------------------- 
Function MDTA010()  
	
	// Armazena as variáveis
	Local aNGBEGINPRM := NGBEGINPRM( _nVERSAO )
	
	Local oBrowse
	
	If AMiIn( 35 ) // Somente autorizado para SIGAMDT
	
		//Valida acesso a rotina
		If FindFunction("MDTRESTRI") .AND. !MDTRESTRI("MDTA010")
			Return .F.
		Endif
		
		oBrowse := FWMBrowse():New()
			oBrowse:SetAlias( "TM1" )			// Alias da tabela utilizada
			oBrowse:SetMenuDef( "MDTA010" )	// Nome do fonte onde esta a função MenuDef
			oBrowse:SetDescription( STR0006 )	// Descrição do browse ###"Medicamentos"
		oBrowse:Activate()
		
		// Devolve as variáveis armazenadas
		NGRETURNPRM(aNGBEGINPRM)
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Definição do Menu (padrão MVC).

@author Jackson Machado
@since 05/09/13

@return aRotina array com o Menu MVC
/*/
//---------------------------------------------------------------------
Static Function MenuDef()
//Inicializa MenuDef com todas as opções
Return FWMVCMenu( "MDTA010" )
//---------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Definição do Modelo (padrão MVC).

@author Jackson Machado
@since 05/09/13

@return oModel objeto do Modelo MVC
/*/
//---------------------------------------------------------------------
Static Function ModelDef()
    
    // Cria a estrutura a ser usada no Modelo de Dados
	Local oStructTM1 := FWFormStruct( 1 ,"TM1" , /*bAvalCampo*/ , /*lViewUsado*/ )
	
	// Modelo de dados que será construído
	Local oModel
	
	// Cria o objeto do Modelo de Dados
	// cID     Identificador do modelo 
	// bPre    Code-Block de pre-edição do formulário de edição. Indica se a edição esta liberada
	// bPost   Code-Block de validação do formulário de edição
	// bCommit Code-Block de persistência do formulário de edição
	// bCancel Code-Block de cancelamento do formulário de edição
	oModel := MPFormModel():New( "MDTA010" , /*bPre*/ , { | oModel | fMPosValid( oModel ) } /*bPost*/ , /*bCommit*/ , /*bCancel*/ )
		//--------------------------------------------------
		// Componentes do Modelo
		//--------------------------------------------------

		// Adiciona ao modelo um componente de Formulário Principal
		// cId          Identificador do modelo
		// cOwner       Identificador superior do modelo
		// oModelStruct Objeto com  a estrutura de dados
		// bPre         Code-Block de pré-edição do formulário de edição. Indica se a edição esta liberada
		// bPost        Code-Block de validação do formulário de edição
		// bLoad        Code-Block de carga dos dados do formulário de edição
		oModel:AddFields( "TM1MASTER" , Nil , oStructTM1 , /*bPre*/ , /*bPost*/ , /*bLoad*/ )
			// Adiciona a descrição do Modelo de Dados (Geral)
			oModel:SetDescription( STR0006 /*cDescricao*/ ) // "Medicamentos"
			// Adiciona a descricao do Componente do Modelo de Dados
			oModel:GetModel( "TM1MASTER" ):SetDescription( STR0006 ) // "Medicamentos"
			
Return oModel

//---------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Definição da View (padrão MVC).

@author Jackson Machado
@since 05/09/13

@return oView objeto da View MVC
/*/
//---------------------------------------------------------------------
Static Function ViewDef()
	
	// Cria um objeto de Modelo de dados baseado no ModelDef() do fonte informado
	Local oModel := FWLoadModel( "MDTA010" )
	
	// Cria a estrutura a ser usada na View
	Local oStructTM1 := FWFormStruct( 2 , "TM1" , /*bAvalCampo*/ , /*lViewUsado*/ )
	
	// Interface de visualização construída
	Local oView
	
	// Cria o objeto de View
	oView := FWFormView():New()
		// Objeto do model a se associar a view.
		oView:SetModel( oModel )
		// Adiciona no View um controle do tipo formulário (antiga Enchoice)
		// cFormModelID - Representa o ID criado no Model que essa FormField irá representar
		// oStruct - Objeto do model a se associar a view.
		// cLinkID - Representa o ID criado no Model ,Só é necessári o caso estamos mundando o ID no View.
		oView:AddField( "VIEW_TM1" , oStructTM1 , "TM1MASTER" )
			//Adiciona um titulo para o formulário
			oView:EnableTitleView( "VIEW_TM1" , STR0006 )	// Descrição do browse ###"Medicamentos"
			// Cria os componentes "box" horizontais para receberem elementos da View
			// cID		  	Id do Box a ser utilizado 
			// nPercHeight  Valor da Altura do box( caso o lFixPixel seja .T. é a qtd de pixel exato)
			// cIdOwner 	Id do Box Vertical pai. Podemos fazer diversas criações uma dentro da outra.
			// lFixPixel	Determina que o valor passado no nPercHeight é na verdade a qtd de pixel a ser usada.
			// cIDFolder	Id da folder onde queremos criar o o box se passado esse valor, é necessário informar o cIDSheet
			// cIDSheet     Id da Sheet(Folha de dados) onde queremos criar o o box.
			oView:CreateHorizontalBox( "TELATM1" , 100,/*cIDOwner*/,/*lFixPixel*/,/*cIDFolder*/,/*cIDSheet*/ )
		// Associa um View a um box
		oView:SetOwnerView( "VIEW_TM1" , "TELATM1" )

Return oView

//---------------------------------------------------------------------
/*/{Protheus.doc} fMPosValid
Pós-validação do modelo de dados.

@author Jackson Machado
@since 05/09/13

@param oModel - Objeto do modelo de dados (Obrigatório)

@return Lígico - Retorna verdadeiro caso validacoes estejam corretas
/*/
//---------------------------------------------------------------------
Static Function fMPosValid( oModel )
    
	Local lRet			:= .T.
	
	Local aAreaTM1		:= TM1->( GetArea() )

	Local nOperation	:= oModel:GetOperation() // Operação de ação sobre o Modelo
	Local oModelTM1	:= oModel:GetModel( "TM1MASTER" )

	Private aCHKSQL 	:= {} // Variável para consistência na exclusão (via SX9)
	Private aCHKDEL 	:= {} // Variável para consistência na exclusão (via Cadastro)

	// Recebe SX9 - Formato:
	// 1 - Domínio (tabela)
	// 2 - Campo do Domínio
	// 3 - Contra-Domínio (tabela)
	// 4 - Campo do Contra-Domínio
	// 5 - Condição SQL
	// 6 - Comparação da Filial do Domínio
	// 7 - Comparação da Filial do Contra-Domínio
	aCHKSQL := NGRETSX9( "TM1" )

	// Recebe relação do Cadastro - Formato:
	// 1 - Chave
	// 2 - Alias
	// 3 - Ordem (Índice)
	aAdd(aCHKDEL, { "TM1->TM1_CODMED" , "TM2" , 3 } )
	aAdd(aCHKDEL, { "TM1->TM1_CODMED" , "TM3" , 4 } )
	aAdd(aCHKDEL, { "TM1->TM1_CODMED" , "TY3" , 3 } ) 

	If nOperation == MODEL_OPERATION_DELETE //Exclusão

		If !NGCHKDEL( "TM1" )
			lRet := .F.
		EndIf

		If lRet .And. !NGVALSX9( "TM1" , {} , .T. , .T. )
			lRet := .F.
		EndIf

	EndIf

	RestArea( aAreaTM1 ) 

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA010VDT
Consiatencia de datas do campo TM1_DTVALI

@param dDataInfo - Data informada
@param nInterA - Quantidade a ser subtraida
@param nInterP - Quantidade a ser somada

@return lValid - Indica se validou corretamente

@author Ricardo Dal Ponte
@since 07/05/2007
/*/
//---------------------------------------------------------------------
Function MDTA010VDT( dDataInfo , nInterA , nInterP )
		
	Local lValid := .T.
	Local dDataAnt := dDataBase
	
	If Empty( dDataInfo )
		Return .T.
	EndIf
	
	If dDataInfo < dDataBase .And. !Empty( nInterA )
		dDataAnt := NGSubtMes( dDataBase , nInterA )
		
		If dDataInfo < dDataAnt
			MsgInfo( STR0008 + " " + DTOC( dDataAnt ) , STR0007 ) //"A Data informada é anterior a data limite" ## "ATENÇÃO"
			lValid := .F.
		EndIf
	EndIf
	
	If dDataInfo > dDataBase .And. !Empty( nInterP )
		dDataPos := NGSomaMes( dDataBase , nInterP )
		
		If dDataInfo > dDataPos
			MsgInfo( STR0009 + " " + DTOC( dDataPos ) , STR0007 ) //"A Data informada é superior a data limite" ## "ATENÇÃO"
			lValid := .F.
		EndIf
	EndIf

Return lValid
//---------------------------------------------------------------------
/*/{Protheus.doc} NGSubtMes
Calcula a nova data substraindo a qtde de meses informada
                                                         
@param dData - Data informada
@param nQtMes - Quantidade de Meses informado

@return dData - Retorna a data calculada

@author Ricardo Dal Ponte
@since 07/05/2007
/*/
//---------------------------------------------------------------------
Function NGSubtMes( dData , nQtMes )

	Local nDia		:= Day( dData )
	Local nMesIni	:= Month( dData )
	Local nMesNew	:= nMesIni - nQtMes
	Private nAno	:= Year( dData )
	
	nDIA := Strzero( nDIA , 2 )
	
	//----------------------------------------------
	// Calcula o novo mes e ano da data, de acordo
	// com a  quantidade de meses a ser somada.
	//----------------------------------------------
	While nMesNew < 1
		nMesNew := nMesNew + 12
		nAno := nAno - 1
	End
	nMesIni := nMesNew
	
	nAno	:= Alltrim( Strzero( nANO , 4 ) )
	nMesIni	:= Strzero( nMesIni , 2 )
	dData	:= CtoD( nDia + "/" + nMesIni + "/" + nAno )
	
	While Empty( dData )
		nDia	:= Val( nDia ) - 1
		nDia	:= Strzero( nDia , 2 )
		dData	:= CtoD( nDia + "/" + nMesIni + "/" + nAno )
	End
	
Return dData
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT010VLD
Consistencia de datas do campo TM1_DTVALI 

@param dDataInf - Data informada
                                                         
@return Lógico - Retorna verdadeiro caso validação esteja correta

@author Andre Perez Alvarez
@since 19/11/2007
/*/
//---------------------------------------------------------------------
Function MDT010VLD( dDataInf )

If dDataInf < dDataBase
	MsgStop( STR0010 )  //"A data informada é inferior à data atual."
	Return .F.
Endif

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT010WHEN
Verifica propriedade WHEN do campo passado como parâmetro.
                                                         
@param cCpo - Campo a ser verificado a propriedade WHEN
@return lRet - .T. se permitir edição, .F. caso contrário

@author Thiago Henrique dos Santos
@since 23/04/2013
/*/
//---------------------------------------------------------------------

Function MDT010WHEN( cCpo )

	Local lRet := .T.  
	
	If SuperGetMV( "MV_NG2SEG" , .F. , "2" ) == "1" .And. ALTERA .AND. Alltrim( cCpo ) == "TM1_NOMEDI"
	                               
		//TM3 - Movimentos de Medicamentos
		dbSelectArea( "TM3" )
		TM3->( dbSetOrder( 4 ) )	
		IF TM3->( dbSeek( xFilial( "TM3" ) + M->TM1_CODMED ) )
			
			lRet := .F.
			
		Else
		
			//TM2 - Medicamentos Utilizados   		
			dbSelectArea( "TM2" )
			TM2->( dbSetOrder( 3 ) )	
			IF TM2->( dbSeek( xFilial( "TM2" ) + M->TM1_CODMED ) )
			
				lRet := .F.	
			
			Else  		
				//TL5 - Atendimento de Enfermagem
				dbSelectArea( "TL5" )
				TL5->( dbSetOrder( 5 ) )
				IF TL5->( dbSeek( xFilial( "TL5" ) + M->TM1_CODMED ) )
	
					lRet := .F.	
					
				Endif
			Endif		
		Endif   
	Endif

Return lRet