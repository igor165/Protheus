#INCLUDE "Mdta216.ch"
#Include "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA216

Programa de Cadastro de Laudo por risco. Para cada risco definido
o usuario pordera relacionar os laudos previamente definidos e ja
registrados no sistema

@author  NG INFORMATICA
@since   23/07/01
@version version
/*/
//-------------------------------------------------------------------
Function MDTA216

	//Armazena variaveis p/ devolucao (NGRIGHTCLICK)

	Local aNGBEGINPRM := NGBEGINPRM()

	//---------------------------------------------------------------
	// Define Array contendo as Rotinas a executar do programa
	// ----------- Elementos contidos por dimensao ------------
	// 1. Nome a aparecer no cabecalho
	// 2. Nome da Rotina associada
	// 3. Usado pela rotina
	// 4. Tipo de Transa‡„o a ser efetuada
	//    1 - Pesquisa e Posiciona em um Banco de Dados
	//    2 - Simplesmente Mostra os Campos
	//    3 - Inclui registros no Bancos de Dados
	//    4 - Altera o registro corrente
	//    5 - Remove o registro corrente do Banco de Dados
	//---------------------------------------------------------------
	Private aRotina := MenuDef()

	//Define o cabecalho da tela de atualizacoes
	Private cCadastro	:= OemtoAnsi( STR0001 ) //"Laudos x Risco"
	Private cPrograma	:= "MDTA216"
	Private aCHKDEL		:= {}
	Private bNGGRAVA	:= {}
	Private bNGAFTCAD	:= {}
	Private aHEADER		:= {}
	Private aCols 		:= {}
	Private lSigaMdtPS	:= IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )

	If lSigaMdtPs
		DbSelectArea( "SA1" )
		DbSetOrder( 1 )
		mBrowse( 6, 1, 22, 75, "SA1" )
	Else
		bNGGRAVA  := { || MDT216_OK() }
		bNGAFTCAD := { || IIf( FindFunction( "MDTIntEsoc" ), MDTLauS2240(), ) }

		//Endereca a funcao de BROWSE
		DbSelectArea( "TO1" )
		DbSetOrder( 1 )
		mBrowse( 6, 1, 22, 75, "TO1" )
	EndIf

	NGRETURNPRM( aNGBEGINPRM )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef

Utilizacao de Menu Funcional

@return	aRotina, Array, Array com as opções da rotina

@author  Rafael Diogo Richter
@since   29/11/2006
/*/
//-------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina

	Private lSigaMdtPS := IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )

	// ------------- Parametros do array a Rotina -------------
	// 1. Nome a aparecer no cabecalho
	// 2. Nome da Rotina associada
	// 3. Reservado
	// 4. Tipo de Transa‡„o a ser efetuada:
	//    1 - Pesquisa e Posiciona em um Banco de Dados
	// 	  2 - Simplesmente Mostra os Campos
	// 	  3 - Inclui registros no Bancos de Dados
	// 	  4 - Altera o registro corrente
	// 	  5 - Remove o registro corrente do Banco de Dados
	// 5. Nivel de acesso
	// 6. Habilita Menu Funcional
	// --------------------------------------------------------

	If lSigaMdtPs
		aRotina := { { STR0002, "AxPesqui", 0, 1 },;//"Pesquisar"
					 { STR0003, "NGCAD01", 0, 2 },;  //"Visualizar"
					 { STR0007, "MDT216RIS", 0, 4 } }  //"Riscos"
	Else
		aRotina := { { STR0002, "AxPesqui", 0, 1 },;  //"Pesquisar"
					 { STR0003, "NGCAD01", 0, 2 },;  //"Visualizar"
					 { STR0004, "NGCAD01", 0, 3 },;  //"Incluir"
					 { STR0005, "NGCAD01", 0, 4 },;  //"Alterar"
					 { STR0006, "NGCAD01", 0, 5, 3 } }  //"Excluir"
	EndIf

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT216AGE

Busca valores para dois campos virtuais ao mesmo tempo codigo e
nome do agente, na inclusao

@author  NG
@since   23/07/01
/*/
//-------------------------------------------------------------------
Function MDT216AGE()

	Local cOLDALI := ALIAS()
	Local nX
	Local nPOS1	:= aSCAN( aHEADER, { |x| Trim( Upper( x[2] ) ) == "TO1_NUMRIS" } )
	Local nPOS2	:= aSCAN( aHEADER, { |x| Trim( Upper( x[2] ) ) == "TO1_NOMRIS" } )

	If !EXISTCPO( "TN0", M->TO1_NUMRIS )
		Return .F.
	EndIf
	If Type( "aHEADER" ) == "A" .And. nPOS1 > 0 .And. nPOS2 > 0
		xx := 0
		For nX := 1 to Len( aCOLS )
			If nX != n .And. !acols[ nx ][ Len( acols[ nx ] ) ] .And. aCOLS[ nX ][ nPOS1 ] == M->TO1_NUMRIS
				xx++
				Exit
			EndIf
		Next

		If xx > 0
			Help( " ", 1, "JAEXISTINF" )
			Return .F.
		Endif

		dbselectArea( "TN0" )
		dbsetOrder( 1 )
		dbseek( xFilial( "TN0" ) + M->TO1_NUMRIS )
		dbselectArea( "TMA" )
		dbsetOrder( 1 )
		dbseek( xFilial( "TMA" ) + TN0->TN0_AGENTE )
		aCols[ n, nPOS2 ] := TMA->TMA_NOMAGE
	Else
		If Inclui
			If !ExistChav( "TO1", M->TO1_LAUDO + M->TO1_NUMRIS )
				dbSelectArea( cOLDALI )
				Return .F.
			Endif
		Endif
		dbselectArea( "TN0" )
		dbsetOrder( 1 )
		If Dbseek( xFilial( "TN0" ) + M->TO1_NUMRIS )
		cAgente := TN0->TN0_AGENTE
		DbselectArea( "TMA" )
		DbsetOrder( 1 )
		If Dbseek( xFilial( "TMA" ) + cAgente )
			M->TO1_NOMRIS := TMA->TMA_NOMAGE
		Endif
		Endif
	Endif

	DbSelectArea( cOLDALI )

	If Type( "oGet215" ) == "O"
		oGet215:aCols := aClone( aCols )
		oGet215:oBrowse:Refresh()
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} DT216_OK

Valida inclusao

@author  NG
@since   23/07/01
/*/
//-------------------------------------------------------------------
Function MDT216_OK()

	Local lRet := .T.

	If Inclui
		If !ExistChav( "TO1", M->TO1_LAUDO + M->TO1_NUMRIS )
			lRet := .F.
		EndIf
	EndIf

	//Valida informações a serem enviadas ao eSocial
	/*If lRet
		lRet := MDTLauS2240( , .F. )
	EndIf*/

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT216RIS

Monta um browse com os riscos

@sample MDT216RIS()

@author Jackson Machado
@since 16/11/2012
/*/
//---------------------------------------------------------------------
Function MDT216RIS()

	Local aArea		:= GetArea() //Salva a area em utilizacao

	//Salva variaveis padroes
	Local oldROTINA	:= aCLONE( aROTINA )
	Local oldCad	:= cCadastro

	Private aNGFIELD := {}
	Private aCHKDEL	 := {}, bNGGRAVA

	//Define o cCliMdtPs, utilizado em filtros de SXB por exemplo
	Private cCliMdtPs := SA1->A1_COD + SA1->A1_LOJA

	//Monta o aRotina do novo Browse
	aRotina := {}

	aRotina := { { STR0002, "AxPesqui", 0, 1 },; //"Pesquisar"
				 { STR0003, "NGCAD01", 0, 2 },; //"Visualizar"
				 { STR0009, "MDT216CAD", 0, 4 },; //"Laudos"
				 { STR0008, "MDT180Leg", 0, 6, 0, .F. } } //"Legenda"

	//Definicao das variavies de NGCAD02
	aCHOICE := {}
	aAdd( aCHOICE, "TN0_NUMRIS" )
	aAdd( aCHOICE, "TN0_DTRECO" )
	aAdd( aCHOICE, "TN0_AGENTE" )
	aAdd( aCHOICE, "TN0_NOMAGE" )
	aAdd( aCHOICE, "TN0_FONTE" )
	aAdd( aCHOICE, "TN0_NOMFON" )
	aAdd( aCHOICE, "TN0_DTAVAL" )
	aAdd( aCHOICE, "TN0_DTELIM" )
	aAdd( aCHOICE, "TN0_CC" )
	aAdd( aCHOICE, "TN0_DESCCC" )
	aAdd( aCHOICE, "TN0_CODFUN" )
	aAdd( aCHOICE, "TN0_DESCFU" )
	aAdd( aCHOICE, "TN0_CODTAR" )
	aAdd( aCHOICE, "TN0_NOMTAR" )
	If NGCADICBASE( "TN0_DEPTO", "A", "TN0", .F. )
		aAdd( aCHOICE, "TN0_DEPTO" )
		aAdd( aCHOICE, "TN0_DESCDP" )
	EndIf
	aAdd( aCHOICE, "TN0_QTAGEN" )
	aAdd( aCHOICE, "TN0_UNIMED" )

	aVARNAO := {}
	aGETNAO := { { "TO1_CLIENT", "SA1->A1_COD" },;
				 { "TO1_LOJA", "SA1->A1_LOJA" },;
	             { "TO1_NUMRIS", "M->TN0_NUMRIS" },;
	             { "TO1_NOMRIS", " " } }

	cGETALIAS := "TO1"
	cGETMAKE  := "SA1->A1_COD + SA1->A1_LOJA + TN0->TN0_NUMRIS"
	cGETKEY   := "SA1->A1_COD + SA1->A1_LOJA + M->TN0_NUMRIS + M->TO1_LAUDO "
	cGETWHILE := "TO1_FILIAL == xFilial('TO1') .AND. TO1_CLIENT == SA1->A1_COD .AND. TO1_LOJA == SA1->A1_LOJA .AND. TO1_NUMRISC == M->TN0_NUMRIS"
	cTUDOOK   := "MDT216LIOK( 'TO1' , .T. ) .AND. PutFileInEof( 'TO1' ) "
	cLINOK    := "MDT216LIOK( 'TO1' )"

	dbSelectArea( "TN0" )
	DbSetOrder( 1 )
	Set Filter To TN0->TN0_CODCLI + TN0->TN0_LOJACL == SA1->A1_COD + SA1->A1_LOJA //Filtra a TN0 de acordo com o cliente.
	mBrowse( 6, 1, 22, 75, "TN0", , , , , , RiscoCor() )

	//Retorna variavies padroes
	aROTINA	  := aCLONE( oldROTINA )
	cCadastro := oldCad
	RestArea( aArea ) //Retorna a area em utilizacao

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT216CAD

Esta funcao foi criada pois, como o aRotina possui poucas opcoes, ao abrir a tela, esta vinha no modo de edicao incorreto.
Uso MDTA216

@sample MDT216CAD( "TN0", 1, 4 )

@author Jackson Machado
@since 16/11/2012
/*/
//---------------------------------------------------------------------
Function MDT216CAD( cAlias, nRec, nOpcx )

	Local aOldRot := aClone( aRotina ) //Salva o aRotina

	Private DTVALIDA := .F. //Variavel utilizada na tabela TN0
	Private lWDtRis	 := .F. //Variavel utilizada na tabela TN0 - TN0_DTELIM

	//Define modo de edicao como alteracao
	aRotSetOpc( cAlias, nRec, 4 )

	//Monta aRotina padrao
	aRotina := { { STR0002, "AxPesqui",	0, 1 },; //"Pesquisar"
				 { STR0003, "NGCAD01", 0, 2 },; //"Visualizar"
				 { STR0004, "NGCAD01", 0, 3 },; //"Incluir"
				 { STR0005, "NGCAD01", 0, 4 },; //"Alterar"
				 { STR0006, "NGCAD01", 0, 5 } } //"Excluir"

	//----------------------------------------------------------
	// As variavies cGETMAKE e cGETWHILE foram inicializadas
	// com vazio e .T., respecitivamente para que se pegue
	// todos os registros da tabela.
	// Portanto, a tabela foi filtrada.
	// Isto foi necessário pois não havia indice para esta
	// alteracao.
	//----------------------------------------------------------
	dbSelectArea( "TO1" )
	dbSetOrder( 4 )
	dbGoTop()

	dbSelectArea( cAlias )
	NGCAD02( cAlias, nRec, 4 )

	aRotina := aClone( aOldRot ) //Retorna o aRotina

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT216VAL

Valida os campos da TO1

@sample MDT216VAL( 1 )

@author Jackson Machado
@since 16/11/2012
/*/
//---------------------------------------------------------------------
Function MDT216VAL( nValid )

	Local lRet := .T.

	Default nValid := 0

	If nValid == 1
		If lSigaMdtPs
			If !ExistCPO( "TO0", cCliMdtPs + M->TO1_LAUDO, 6 )
				lRet := .F.
			EndIf
		Else
			If !ExistCPO( "TO0", M->TO1_LAUDO )
				lRet := .F.
			EndIf
		EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT216LIOK

Linha ok e Tudo ok

@sample MDT216LIOK("TO1")

@author Jackson Machado
@since 16/11/2012
/*/
//---------------------------------------------------------------------
Function MDT216LIOK( cAlias, lFim )

	Local nCont		:= 0
	Local nQtd		:= 0
	Local nPosCod	:= 1
	Local nAt		:= 1
	Local aColsOk	:= {}
	Local aHeadOk	:= {}
	Local lRet		:= .T.

	Default lFim	:= .F.

	If cAlias == "TO1"
		aColsOk := aClone( aCols )
		aHeadOk := aClone( aHeader )
		nAt     := n
		nPosCod := aScan( aHeader, { |x| Trim( Upper( x[2] ) ) == "TO1_LAUDO" } )
	Endif

	//Percorre aCols
	For nCont := 1 to Len( aColsOk )
		If !aColsOk[ nCont ][ Len( aColsOk[ nCont ] ) ]

			nQtd ++

			If lFim .Or. nCont == nAt
				//VerIfica se os campos obrigatórios estão preenchidos
				If Empty( aColsOk[ nCont ][ nPosCod ] )
					//Mostra mensagem de Help
					Help( 1, " ", "OBRIGAT2", , aHeadOk[ nPosCod ][ 1 ], 3, 0 )
					lRet := .F.
					Exit
				Endif
			Endif

			//Verifica se é somente LinhaOk
			If nCont <> nAt .And. !aColsOk[ nAt ][ Len( aColsOk[ nAt ] ) ]
				If aColsOk[ nCont ][ nPosCod ] == aColsOk[ nAt ][ nPosCod ]
					Help( " ", 1, "JAEXISTINF", , aHeadOk[ nPosCod ][ 1 ] )
					lRet := .F.
					Exit
				Endif
			Endif

		Endif
	Next f

	If lRet .And. nQtd == 0 .And. lFim
		Help( 1, " ", "OBRIGAT2", , aHeadOk[ nPosCod ][ 1 ], 3, 0 )
		lRet := .F.
	Endif

	PutFileInEof( "TO1" )

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT216REL

Valida os campos da TO1

@sample MDT216REL( 1 )

@author Jackson Machado
@since 16/11/2012
/*/
//---------------------------------------------------------------------
Function MDT216REL( nRel )

	Local cRet   := ""

	Default nRel := 0

	If nRel == 1
		If lSigaMdtPs
			cRet := IIf( INCLUI, ' ', POSICIONE( "TO0", 6, xFilial( "TO0" ) + cCliMdtPS + TO1->TO1_LAUDO, "TO0_NOME" ) )
		Else
			cRet := IIf( INCLUI, ' ', POSICIONE( "TO0", 1, xFilial( "TO0" ) + TO1->TO1_LAUDO, "TO0_NOME" ) )
		EndIf
	EndIf

Return lRet
