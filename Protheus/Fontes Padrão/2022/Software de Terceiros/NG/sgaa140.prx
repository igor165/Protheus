#Include "SGAA140.ch"
#Include "Protheus.ch"
#Include "DbTree.ch"

//---------------------------------------------------------------------
/*/{Protheus.doc} SGAA140()
Programa para definir Residuos
TAX - Residuos
TAZ - Criterios de Controle
TB7 - Tipo de Destinacao

@author  Thiago Olis Machado
@since   30/11/2004
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function SGAA140()

	If Amiin(56)	//Verifica se o usuário possui licença para acessar a rotina.

		Private aRotina 	:= MenuDef()
		Private cCadastro 	:= OemtoAnsi(STR0001)   //"Definicao de Residuos"
		Private AsMenu 		:= {}, aChkDel := {}, bNgGrava

		SETKEY(VK_F9, {|| NGVersao(STR0019,02)}) //"SGAA140"

		If !NGCADICBASE("TF1_CODRES","D","TF1",.F.)
			If !NGINCOMPDIC("UPDSGA31","THYWO2",.F.)
				Return .F.
			EndIf
		EndIf

		DbSelectArea( "TAX" )
		DbSetOrder( 01 )
		mBrowse( 6, 1,22,75,"TAX" )

	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg140Pro(cAlias,nRecno,nOpcx)
Programa para cadastrar Residuos/Criterio de Controle

@author  Thiago Olis Machado
@since   30/11/2004
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function Sg140Pro( cAlias, nRecno, nOpcx, aLocRes, lLocTemp )

	Local cTitulo 	:= cCadastro  // Titulo da janela
	Local oMainWnd	 // Objeto para montar a janela de cadastro
	Local oDlg
	Local oPnlAll
	Local lVisual 	:= .T.
	Local nControl	:= 0,lOk := .F.,lGetd := .T.
	Local aPages	:= {},aTitles:= {},aVar:= {}
	Local Ni,cGet
	Local oFont    	:= TFont():New("Arial",12,12,,.F.,,.F.,,.F.,.F.)
	Local oFont01  	:= TFont():New("Times New Roman",10,10,,.F.,,.F.,,.F.,.F.)
	Local aGrava140 := {}
	Local aRet140 := {}
	Local cMsgBottom
	Local oTempTable

	//Variaveis de controle
	Private lDestPad	:= AliasInDic( "TH0" )
	Private lPoluen		:= AliasInDic( "TEG" )
	Private aNgButton 	:= {}

	//Variaveis de tamanho de tela e objetos
	Private aSize := MsAdvSize(,.F.,430), aObjects := {}

	Default aLocRes	:= {}
	Default lLocTemp	:= .F.

	Aadd(aNgButton,{STR0016 ,{||SGAA140DO()},STR0017,STR0018}) //"Relacionar documento" - "Rel.Doc."

	Aadd(aObjects,{050,050,.T.,.T.})
	Aadd(aObjects,{100,100,.T.,	.T.})

	aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.T.)

	Private oEnc01,oTree,oGet01,oGet02,oEnc03
	Private oGet,aHeader,nItens,oMark
	Private aSvATela 		:= {}, aSvAGets := {}, aTela := {}
	Private aSvATela1 		:= {}, aSvAGets1 := {}
	Private aSvATela2 		:= {}, aSvAGets2 := {}
	Private cDesc    		:= Space( Len( TAF->TAF_NOMNIV ) ) //Descricao do pai da estrutura
	Private cCodEst  		:= '001'
	Private aLocal   		:= {}
	Private M->TAX_CODRES	:= ''
	Private M->TB7_TIPO   	:= ''
	Private M->TB7_CODTIP 	:= ''
	Private nTB7METODO,nTB7TIPO,nTB7CODTIP,nTB7ONDEMA,nTB7FREQUE,nTB7UM,nTB7COLETA
	Private aHist := {{},{},{},{},{},{},{}}
	Private oGet03,oGet04
	Private lRelacDes		:= AliasInDic( "TH0" )

	If lDestPad
		aAdd( aHist , {} )
	EndIf

	TAF->(DbSeek(xFilial('TAF')+'001'))
	cDesc   := TAF->TAF_NOMNIV

	aCampos := {}
	aAdd(aCampos,{"CODEST"   ,"C",03,0})
	aAdd(aCampos,{"CODPRO"   ,"C",03,0})
	aAdd(aCampos,{"DESCRI"   ,"C",40,0})
	aAdd(aCampos,{"NIVSUP"   ,"C",03,0})
	aAdd(aCampos,{"RESPONS"  ,"C",06,0})
	aAdd(aCampos,{"TIPO"     ,"C",01,0})
	aAdd(aCampos,{"CODTIPO"  ,"C",16,0})
	aAdd(aCampos,{"MODSGA"   ,"C",01,0})
	aAdd(aCampos,{"MODMNT"   ,"C",01,0})
	aAdd(aCampos,{"MODMDT"   ,"C",01,0})
	aAdd(aCampos,{"DELETADO" ,"C",01,0})

	oTempTable := FWTemporaryTable():New( "TRBSGA", aCampos )
	#IfDef Cdx
		oTempTable:AddIndex( "1", {"CODEST","NIVSUP"} )
		oTempTable:AddIndex( "2", {"CODEST","CODPRO"} )
	#Else
		oTempTable:AddIndex( "1", {"CODEST","NIVSUP"} )
		oTempTable:AddIndex( "2", {"CODEST","CODPRO"} )
	#EndIf
	oTempTable:Create()

	Aadd(aTitles,OemToAnsi(STR0002))   //"Residuos x Localizacao"
	Aadd(aPages,"Header 1")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0003))   //"Criterios de Controle"
	Aadd(aPages,"Header 2")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0004))   //"Tipo de Destinacao"
	Aadd(aPages,"Header 3")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0020))	//"Poluentes"
	Aadd(aPages,"Header 4")
	nControl++
	Aadd(aTitles,OemToAnsi(STR0021))	//"Monitoramento"
	Aadd(aPages,"Header 5")
	nControl++
	If lDestPad
		Aadd(aTitles,OemToAnsi("Destinos Internos"))	//"Destinos Internos"
		Aadd(aPages,"Header 6")
		nControl++
	EndIf

	//Esta verificação é feita para o uso do TNGPG
	If Type("Inclui") <> "L" .Or. Type("Altera") <> "L"
		If nOpcx == 3
			SetInclui()
		ElseIf nOpcx == 4
			SetAltera()
		Else
			Inclui := .F.
			Altera := .F.
		EndIf
	EndIf

	Define MsDialog oDlg Title cTitulo From aSize[7],0 To aSize[6],aSize[5] Of oMainWnd Pixel

	oPnlAll := TPanel():New(01,01,,oDlg,,,,,,10,10,.F.,.F.)
	oPnlAll:Align := CONTROL_ALIGN_ALLCLIENT

	oFolder := TFolder():New(6.5,0,aTitles,aPages,oPnlAll,,,,.F.,.F.,332,225,)
	oFolder:aDialogs[1]:oFont := oPnlAll:oFont
	oFolder:aDialogs[2]:oFont := oPnlAll:oFont
	oFolder:aDialogs[3]:oFont := oPnlAll:oFont
	oFolder:aDialogs[4]:oFont := oPnlAll:oFont
	oFolder:aDialogs[5]:oFont := oPnlAll:oFont
	If lDestPad
		oFolder:aDialogs[6]:oFont := oPnlAll:oFont
	EndIf

	oFolder:Align := CONTROL_ALIGN_ALLCLIENT

	aTela := {}
	aGets := {}
	Dbselectarea("TAX")
	RegToMemory("TAX",(nOpcx == 3))
	oEnc01:= MsMGet():New("TAX",nRecno,nOpcx,,,,,aPosObj[1],,,,,,oPnlAll,,,.F.,"aSvATela")
	oEnc01:oBox:bGotFocus := {|| NgEntraEnc("TAX")}
	oEnc01:oBox:Align := CONTROL_ALIGN_TOP
	aSvATela := aClone(aTela)
	aSvAGets := aClone(aGets)
	aHist[1] := aClone(aTela)
	// Folder 01

	oTree := DbTree():New(005, 022, 170, 302, oFolder:aDialogs[1],,, .T.)
	oTree:Align    := CONTROL_ALIGN_ALLCLIENT
	Processa({|lEnd| Sg140Tree('001',3,,aLocRes) ,aEval( aLocal, { | x | oTree:TreeSeek( x[1] + "LOC" ) } ) } ,"Aguarde...","Carregando Estrutura...",.T.)

	oTree:TreeSeek("001LOC")

	If Str(nOpcx,1) $ "2/5" .Or. !Empty( aLocRes )
	   oTree:BlDblClick := {||}
	   lGetd := .F.
	Else
		oTree:blDblClick := {|| Sg030ChangeBmp() }
	EndIf

	If !IsInCallStack("Sg030ChangeBmp()")
		oTree:TreeSeek("001LOC")
	EndIf

	cMsgBottom := If(Empty( aLocRes ),STR0006,STR0043) //"A seleção de áreas está desabilitada"

	aHist[2] := aClone(aLocal)

	oPnlBEst := TPanel():New( 900 , 900 , , oFolder:aDialogs[ 1 ] , , , , , , 200 , 200 , .F. , .F. )
	oPnlBEst:Align   := CONTROL_ALIGN_BOTTOM
	oPnlBEst:nHeight := 25

	@ 002,015 Say OemToAnsi(cMsgBottom) Size 207,27 Of oPnlBEst;  //"Escolha a area clicando duas vezes sobre a pasta"
	 		  Pixel Color CLR_HRED

	// Folder 02
	aCols := {}
	aHeader := {}

	cQuery := "SELECT * FROM "+RetSqlName("TAZ")+" TAZ WHERE TAZ.TAZ_FILIAL = '"+xFilial("TAZ")+"' AND TAZ.TAZ_CODRES = '"+TAX->TAX_CODRES+"'"+;
					" AND TAZ.D_E_L_E_T_ = ' '"
	FillGetDados( nOpcx, "TAZ", 1, xFilial("TAZ")+TAX->TAX_CODRES, {|| "TAZ->TAZ_FILIAL + TAZ->TAZ_CODRES"}, {|| .T.},{'TAZ_CODRES'},,,cQuery)

	aCols01 := aClone(aCols)
	aHeader01 := aClone(aHeader)

	If Empty(aCols01) .Or. nOpcx == 3
	   aCols01 := BlankGetd(aHeader01)
	EndIf

	oGet01 := MsNewGetDados():New(005, 005, 100, 190,IIF(!Inclui.And.!Altera,0,GD_INSERT+GD_UPDATE+GD_DELETE),"Sg140Lin1()","Sg140Lin1()",,,,9999,,,,oFolder:aDialogs[2],aHeader01, aCols01)
	oGet01:oBrowse:Default()
	oGet01:oBrowse:Refresh()
	oGet01:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	aSvCols01 := aClone(aCols01)
	aHist[3] := aClone(aCols01)
	//aSvAcon - aSvCols01

	// Folder 03
	aCols := {}
	aHeader := {}

	cQuery := "SELECT * FROM "+RetSqlName("TB7")+" TB7 WHERE TB7.TB7_FILIAL = '"+xFilial("TB7")+"' AND TB7.TB7_CODRES = '"+TAX->TAX_CODRES+"'"+;
					" AND TB7.D_E_L_E_T_ = ' '"
	FillGetDados( nOpcx, "TB7", 1, xFilial("TB7")+TAX->TAX_CODRES, {|| "TB7->TB7_FILIAL + TB7->TB7_CODRES"}, {|| .T.},{'TB7_CODRES'},,,cQuery)

	aCols02 := aClone(aCols)
	aHeader02 := aClone(aHeader)

	If Empty(aCols02) .Or. nOpcx == 3
	   aCols02 := BlankGetd(aHeader02)
	EndIf

	oGet02 := MsNewGetDados():New(005, 005, 100, 190,IIF(!Inclui.And.!Altera,0,GD_INSERT+GD_UPDATE+GD_DELETE),"Sg140Lin2()","Sg140Lin2()",,,,9999,,,,oFolder:aDialogs[3],aHeader02, aCols02)
	oGet02:oBrowse:bGotFocus := {|| SGA140EGET(2)}
	oGet02:oBrowse:Default()
	oGet02:oBrowse:Refresh()
	oGet02:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	aSvCols02 := aClone(aCols02)
	aHist[4] := aClone(aCols02)
	nTB7METODO := aScan( aHeader02, { |x| Trim( Upper(x[2]) ) == 'TB7_METODO'})
	nTB7TIPO   := aScan( aHeader02, { |x| Trim( Upper(x[2]) ) == 'TB7_TIPO'})
	nTB7CODTIP := aScan( aHeader02, { |x| Trim( Upper(x[2]) ) == 'TB7_CODTIP'})
	nTB7ONDEMA := aScan( aHeader02, { |x| Trim( Upper(x[2]) ) == 'TB7_ONDEMA'})
	nTB7FREQUE := aScan( aHeader02, { |x| Trim( Upper(x[2]) ) == 'TB7_FREQUE'})
	nTB7UM     := aScan( aHeader02, { |x| Trim( Upper(x[2]) ) == 'TB7_UM'})
	nTB7COLETA := aScan( aHeader02, { |x| Trim( Upper(x[2]) ) == 'TB7_COLETA'})

	// Folder 04
	aCols := {}
	aHeader := {}

	FillGetDados( nOpcx, "TF1", 1, "TAX->TAX_CODRES", {|| }, {|| .T.},{"TF1_CODRES"},,,,{|| NGMontaAcols("TF1", TAX->TAX_CODRES,"TF1->TF1_FILIAL == xFilial('TF1') .And. TF1->TF1_CODRES == TAX->TAX_CODRES")})

	aCols03 := aClone(aCols)
	aHeader03 := aClone(aHeader)

	If Empty(aCols03) .Or. nOpcx == 3
	   aCols03 := BlankGetd(aHeader03)
	EndIf

	oGet03 := MsNewGetDados():New(005, 005, 100, 190,IIF(!Inclui.And.!Altera,0,GD_INSERT+GD_UPDATE+GD_DELETE),"SG140LIN(3)","SG140LIN(3,.T.)",,,,9999,,,,oFolder:aDialogs[4],aHeader03, aCols03)
	oGet03:oBrowse:bGotFocus := {|| SGA140EGET(3)}
	oGet03:oBrowse:Default()
	oGet03:oBrowse:Refresh()
	oGet03:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	aSvCols03 := aClone(aCols03)
	aHist[6] := aClone(aCols03)

	// Folder 05
	aCols := {}
	aHeader := {}

	cQuery := "SELECT * FROM "+RetSqlName("TF2")+" TF2 WHERE TF2.TF2_FILIAL = '"+xFilial("TF2")+"' AND TF2.TF2_CODRES = '"+TAX->TAX_CODRES+"'"+;
					" AND TF2.D_E_L_E_T_ = ' '"
	FillGetDados( nOpcx, "TF2", 1, xFilial("TF2")+TAX->TAX_CODRES, {|| "TF2->TF2_FILIAL + TF2->TF2_CODRES"}, {|| .T.},{'TF2_CODRES'},,,cQuery)

	aCols04 := aClone(aCols)
	aHeader04 := aClone(aHeader)

	If Empty(aCols04) .Or. nOpcx == 3
	   aCols04 := BlankGetd(aHeader04)
	EndIf

	oGet04 := MsNewGetDados():New(005, 005, 100, 190,IIF(!Inclui.And.!Altera,0,GD_INSERT+GD_UPDATE+GD_DELETE),"SG140LIN(4)","SG140LIN(4,.T.)",,,,9999,,,,oFolder:aDialogs[5],aHeader04, aCols04)
	oGet04:oBrowse:bGotFocus := {|| SGA140EGET(4)}
	oGet04:oBrowse:Default()
	oGet04:oBrowse:Refresh()
	oGet04:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	aSvCols04 := aClone(aCols04)
	aHist[7] := aClone(aCols04)

	// Folder 06
	If lDestPad
		aCols := {}
		aHeader := {}

		cQuery := "SELECT * FROM "+RetSqlName("TH0")+" TH0 WHERE TH0.TH0_FILIAL = '"+xFilial("TH0")+"' AND TH0.TH0_CODRES = '"+TAX->TAX_CODRES+"'"+;
						" AND TH0.D_E_L_E_T_ = ' '"
		FillGetDados( nOpcx, "TH0", 1, xFilial("TH0")+TAX->TAX_CODRES, {|| "TH0->TH0_FILIAL + TH0->TH0_CODRES"}, {|| .T.},{"TH0_CODRES"},,,cQuery)

		aCols05 := aClone(aCols)
		aHeader05 := aClone(aHeader)

		If Empty(aCols05) .Or. nOpcx == 3
		   aCols05 := BlankGetd(aHeader05)
		EndIf

		oGet05 := MsNewGetDados():New(005, 005, 100, 190,IIF(!Inclui.And.!Altera,0,GD_INSERT+GD_UPDATE+GD_DELETE), "SG140LIN(5)","SG140LIN(5,.T.)",,,,9999,,,,oFolder:aDialogs[6],aHeader05, aCols05)
		oGet05:oBrowse:bGotFocus := {|| SGA140EGET(5)}
		oGet05:oBrowse:Default()
		oGet05:oBrowse:Refresh()
		oGet05:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
		aSvCols05 := aClone(aCols05)
		aHist[8] := aClone(aCols05)

		PutFileInEof( "TH0" )
	EndIf

	If !lPoluen
		oFolder:aDialogs[4]:Disable()
		oFolder:aDialogs[5]:Disable()
	EndIf


	Activate Dialog oDlg On Init (EnchoiceBar(oDlg, ;
										{|| lOk := .T., If( (aGrava140 := Sg140Obrig(nOpcx,lLocTemp))[1], oDlg:End(), lOk := .F.)}, ;
										{|| lOk:= .F., oDlg:End()},, ;
										aNgButton)) Centered

	DbSelectArea('TRBSGA')
	Use

	dbSelectArea("TAX")
	dbSetOrder(1)
	dbSeek(xFilial("TAX")+M->TAX_CODRES)

	If lOk
		aRet140 := aClone(aGrava140[2])
	EndIf

Return { lOk, aClone(aRet140) }

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg140Tree(cPai,nMod,cProg)
Monta a estrutura apartir do arquivo TAF

@author  Thiago Olis Machado
@since   30/11/2004
@version P11
@return  oTree
/*/
//---------------------------------------------------------------------
Function Sg140Tree(cPai,nMod,cProg,aLocRes)

	Local cDescri, nPosLocRes
	Private cCargo := 'LOC'
	Private cPrograma := cProg

	Default aLocRes := {}

	cFolderA := "FOLDER10" // Folder Verde Fechado
	cFolderB := "FOLDER11" // Folder Verde Aberto
	If Empty( cDesc )
	   Return oTree
	EndIf

	dbSelectArea('TAV')
	dbSetOrder(1)
	If DbSeek(xFilial('TAV')+M->TAX_CODRES+'001'+cPai)
		cFolderA := 'Folder7'
		cFolderB := 'Folder8'
		aAdd( aLocal,{ SubStr( cPai, 1, 3 ),.T. } )
	ElseIf ( nPosLocRes := aScan( aLocRes, {|x| AllTrim(cPai) == AllTrim(x)} ) ) > 0
		cFolderA := 'Folder7'
		cFolderB := 'Folder8'
		aAdd( aLocal,{ aLocRes[nPosLocRes],.T. } )
	Else
		cFolderA := 'Folder10'
		cFolderB := 'Folder11'
	EndIf

	DbAddTree oTree Prompt cDesc Opened Resource cFolderA, cFolderB Cargo cPai+cCargo+If(cFolderA == "Folder7","2","1")

	DbSelectArea('TRBSGA')
	DbSetOrder(2)
	If DbSeek(cCodEst+TAF->TAF_CODNIV)
	   RecLock('TRBSGA',.F.)
	Else
	   RecLock('TRBSGA',.T.)
	EndIf
	TRBSGA->CODEST  := cCodEst
	TRBSGA->CODPRO  := TAF->TAF_CODNIV
	TRBSGA->DESCRI  := cDesc
	TRBSGA->NIVSUP  := TAF->TAF_NIVSUP
	TRBSGA->RESPONS := TAF->TAF_MAT
	TRBSGA->TIPO    := TAF->TAF_INDCON
	TRBSGA->MODSGA  := TAF->TAF_MODSGA
	TRBSGA->MODMNT  := TAF->TAF_MODMNT
	TRBSGA->MODMDT  := TAF->TAF_MODMDT

	DbSelectArea('TAF')
	DbSetOrder(1)
	DbSeek(xFilial('TAF')+cCodEst+cPai)
	ProcRegua(RecCount())
	While !TAF->(Eof()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And.;
	      TAF->TAF_NIVSUP == cPai

		  IncProc() // Incrementa regua de processamento
		  If Empty( TAF->TAF_MODSGA ) .Or. TAF->TAF_INDCON <> "2"
		  	 TAF->(DbSkip())
		  	 Loop
		  EndIf

	      nRec    := Recno()
	      cComp   := TAF->TAF_CODNIV
	      cDescri := TAF->TAF_NOMNIV
	      cNivSup := TAF->TAF_NIVSUP
	      cMat    := TAF->TAF_MAT
	      cIndCon := TAF->TAF_INDCON
	      cCodCon := TAF->TAF_CODCON
	      cModSga := TAF->TAF_MODSGA
	      cModMnt := TAF->TAF_MODMNT
	      cModMdt := TAF->TAF_MODMDT
	      cCargo  := 'LOC'

	      DbSelectArea('TAV')
	      DbSetOrder(1)
	      If DbSeek(xFilial('TAV')+M->TAX_CODRES+'001'+cComp)
	         cFolderA := 'Folder7'
	         cFolderB := 'Folder8'
	         aAdd( aLocal,{ SubStr( cComp, 1, 3 ),.T. } )
	      ElseIf ( nPosLocRes := aScan( aLocRes, {|x| AllTrim(cComp) == AllTrim(x)} ) ) > 0
				cFolderA := 'Folder7'
				cFolderB := 'Folder8'
				aAdd( aLocal,{ aLocRes[nPosLocRes],.T. } )
	      Else
	  	      cFolderA := 'Folder10'
	    	   cFolderB := 'Folder11'
	      EndIf

	      DbSelectArea("TAF")
	      If DbSeek(xFilial('TAF')+cCodEst+cComp)
	         Sg140Filho(cComp,cDescri,cNivSup,cModSga,cModMnt,cModMdt,cMat,cCodCon,cIndCon,nMod,cCargo,cFolderA,cFolderB,aLocRes)
	      Else
	   	     DbAddItem oTree Prompt cDescri Resource cFolderA Cargo cComp+cCargo+If(cFolderA == "Folder7","2","1")
	   	     DbSelectArea('TRBSGA')
	   	     DbSetOrder(2)
	   	     If DbSeek(cCodEst+cComp)
						RecLock('TRBSGA',.F.)
					 Else
						RecLock('TRBSGA',.T.)
					 EndIf
					 TRBSGA->CODEST  := cCodEst
			   		 TRBSGA->CODPRO  := cComp
					 TRBSGA->DESCRI  := cDescri
					 TRBSGA->NIVSUP  := cNivSup
					 TRBSGA->RESPONS := cMat
					 TRBSGA->TIPO    := cIndCon
					 TRBSGA->MODSGA  := cModSga
					 TRBSGA->MODMNT  := cModMnt
					 TRBSGA->MODMDT  := cModMdt
	      EndIf

	      DbSelectArea('TAF')
	      DbGoto(nRec)
	      DbSkip()
	End
	oTree:TreeSeek(cPai+cCargo)
	DbEndTree oTree

Return oTree

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg140Filho()
Monta a estrutura dos filhos apartir do arquivo TAF

@author  Thiago Olis Machado
@since   30/11/2004
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function Sg140Filho(cPai,cDesc,cNivSup,cModSga,cModMnt,cModMdt,cMat,cCodTipo,cTipo,nMod,cCargo,cFolderA,cFolderB,aLocRes)

	Local nRec

	Default aLocRes := {}

	DbAddTree oTree Prompt cDesc Resource cFolderA, cFolderB Cargo cPai+cCargo+If(cFolderA == "Folder7","2","1")

	aAlias := GetArea()
	DbSelectArea('TRBSGA')
	DbSetOrder(2)
	If DbSeek(cCodEst+cPai)
	   RecLock('TRBSGA',.F.)
	Else
	   RecLock('TRBSGA',.T.)
	EndIf

	TRBSGA->CODEST  := cCodEst
	TRBSGA->CODPRO  := cPai
	TRBSGA->DESCRI  := cDesc
	TRBSGA->NIVSUP  := cNivSup
	TRBSGA->RESPONS := cMat
	TRBSGA->TIPO    := cTipo
	TRBSGA->CODTIPO := cCodTipo
	TRBSGA->MODSGA  := cModSga
	TRBSGA->MODMNT  := cModMnt
	TRBSGA->MODMDT  := cModMdt

	RestArea(aAlias)
	While !TAF->(Eof()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And.;
	      TAF->TAF_NIVSUP == cPai

		  IncProc() // Incrementa regua de processamento
		  If Empty( TAF->TAF_MODSGA ) .Or. TAF->TAF_INDCON <> "2"
		  	 TAF->(DbSkip())
		  	 Loop
		  EndIf

	      nRec    := Recno()
	      cComp   := TAF->TAF_CODNIV
	      cDescri := TAF->TAF_NOMNIV
	      cNivSup := TAF->TAF_NIVSUP
	      cMat    := TAF->TAF_MAT
	      cIndCon := TAF->TAF_INDCON
	      cCodCon := TAF->TAF_CODCON
	      cModSga := TAF->TAF_MODSGA
	      cModMnt := TAF->TAF_MODMNT
	      cModMdt := TAF->TAF_MODMDT
	      cCargo := 'LOC'

	      DbSelectArea('TAV')
	      DbSetOrder(1)
	      If DbSeek(xFilial('TAV')+M->TAX_CODRES+'001'+cComp)
	         cFolderA := 'Folder7'
	         cFolderB := 'Folder8'
	         aAdd( aLocal,{ SubStr( cComp, 1, 3 ),.T. } )
	       ElseIf ( nPosLocRes := aScan( aLocRes, {|x| AllTrim(cComp) == AllTrim(x)} ) ) > 0
				cFolderA := 'Folder7'
				cFolderB := 'Folder8'
				aAdd( aLocal,{ aLocRes[nPosLocRes],.T. } )
	      Else
	  	      cFolderA := 'Folder10'
	    	   cFolderB := 'Folder11'
	      EndIf

	      DbSelectArea("TAF")

	      If DbSeek(xFilial('TAF')+cCodEst+cComp)
	         Sg140Filho(cComp,cDescri,cNivSup,cModSga,cModMnt,cModMdt,cMat,cCodCon,cIndCon,,cCargo,cFolderA,cFolderB,aLocRes)
	      Else
	   	     DbAddItem oTree Prompt cDescri Resource cFolderA Cargo cComp+cCargo+If(cFolderA == "Folder7","2","1")
	   	     DbSelectArea('TRBSGA')
	   	     DbSetOrder(2)
	   	     If DbSeek(cCodEst+cComp)
				RecLock('TRBSGA',.F.)
			 Else
				RecLock('TRBSGA',.T.)
			 EndIf

			 TRBSGA->CODEST  := cCodEst
			 TRBSGA->CODPRO  := cComp
		  	 TRBSGA->DESCRI  := cDescri
			 TRBSGA->NIVSUP  := cNivSup
		 	 TRBSGA->RESPONS := cMat
			 TRBSGA->TIPO    := cIndCon
			 TRBSGA->CODTIPO := cCodCon
			 TRBSGA->MODSGA  := cModSga
			 TRBSGA->MODMNT  := cModMnt
			 TRBSGA->MODMDT  := cModMdt
	      EndIf
	      DbSelectArea('TAF')

	      DbGoto(nRec)
	      DbSkip()
	End
	DbEndTree oTree

Return Nil

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg140Obrig(nOpcx)
Faz validacoes dos campos obrigatorios

@author  Thiago Olis Machado
@since   30/11/2004
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function Sg140Obrig(nOpcx,lLocTemp)

	Local aOldArea := GetArea() // Guarda variaveis de alias e indice
	Local aRetGrava := {}

	If nOpcx == 2
		Return {.T., {}}
	EndIf

	If !Obrigatorio(aGets,aTela)
	   Return {.F., {}}
	EndIf

	If !Sg140Lin1()
		oFolder:nOption := 2
		Return {.F., {}}
	EndIf

	If !Sg140Lin2()
		oFolder:nOption := 3
		Return {.F., {}}
	EndIf

	If !Sg140Lin(3,.T.)
		oFolder:nOption := 5
		Return {.F., {}}
	EndIf

	If !Sg140Lin(4,.T.)
		oFolder:nOption := 6
		Return {.F., {}}
	EndIf

	If lDestPad
		If !Sg140Lin(5,.T.)
			oFolder:nOption := 7
			Return {.F., {}}
		EndIf
	EndIf

	aRetGrava := aClone(Sg140Grava(nOpcx,lLocTemp))

	RestArea(aOldArea)

Return {.T., aClone(aRetGrava)}

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg140Grava(nOpcx)
Grava as informacoes.

TAX    - Residuos
TAZ    - Criterios de Controle
@author  Thiago Olis Machado
TAV    - Residuos do Processo

@since   30/11/2004
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function Sg140Grava(nOpcx,lLocTemp)

	Local i,j,k,nX,nY
	Local lDelete := .F.
	Local nQtd := 0
	Local lHist := If(Inclui,.T.,.F.)

	Local lSgaSequen := NGCADICBASE("TAV_SEQUEN","A","TAV",.F.)

	If nOpcx == 5
		lHist := .T.
	EndIf
	If !lHist
		dbSelectArea("TAX")
		For i := 1 To FCOUNT()
			nx := "M->" + FieldName(i)
			If "_FILIAL"$Upper(nx)
				Loop
			Else
				If &(nx) <> &("TAX->"+FieldName(i))
					lHist := .T.
					Exit
				EndIf
			EndIf
		Next i
	EndIf
	If !lHist
		If Len(aLocal) <> Len(aHist[2])
			lHist := .T.
		Else
			For i:=1 to Len(aLocal)
				For k:=1 to Len(aLocal[i])
					If aLocal[i][k] <> aHist[2][i][k]
						lHist := .T.
						Exit
					EndIf
				Next k
			Next i
		EndIf
	EndIf
	If !lHist
		aCols := aClone(oGet01:aCols)
		If Len(aCols) <> Len(aHist[3])
			lHist := .T.
		Else
			For i:=1 to Len(aCols)
				For k:=1 to Len(aCols[i])
					If aCols[i][k] <> aHist[3][i][k]
						lHist := .T.
						Exit
					EndIf
				Next k
			Next i
		EndIf
	EndIf
	If !lHist
		aCols := aClone(oGet02:aCols)
		If Len(aCols) <> Len(aHist[4])
			lHist := .T.
		Else
			For i:=1 to Len(aCols)
				For k:=1 to Len(aCols[i])
					If aCols[i][k] <> aHist[4][i][k]
						lHist := .T.
						Exit
					EndIf
				Next k
			Next i
		EndIf
	EndIf
	If !lHist
		aCols := aClone(oGet03:aCols)
		If Len(aCols) <> Len(aHist[6])
			lHist := .T.
		Else
			For i:=1 to Len(aCols)
				For k:=1 to Len(aCols[i])
					If aCols[i][k] <> aHist[6][i][k]
						lHist := .T.
						Exit
					EndIf
				Next k
			Next i
		EndIf
	EndIf
	If !lHist
		aCols := aClone(oGet04:aCols)
		If Len(aCols) <> Len(aHist[7])
			lHist := .T.
		Else
			For i:=1 to Len(aCols)
				For k:=1 to Len(aCols[i])
					If aCols[i][k] <> aHist[7][i][k]
						lHist := .T.
						Exit
					EndIf
				Next k
			Next i
		EndIf
	EndIf
	If !lHist .And. lDestPad
		aCols := aClone(oGet05:aCols)
		If Len(aCols) <> Len(aHist[8])
			lHist := .T.
		Else
			For i:=1 to Len(aCols)
				For k:=1 to Len(aCols[i])
					If aCols[i][k] <> aHist[8][i][k]
						lHist := .T.
						Exit
					EndIf
				Next k
			Next i
		EndIf
	EndIf

	//Manipula a tabela TAX
	dbSelectArea('TAX')
	dbSetOrder(1)
	If DbSeek(xFilial('TAX')+M->TAX_CODRES)
		RecLock('TAX',.F.)
	Else
		RecLock('TAX',.T.)
	EndIf

	If nOpcx <> 5
		For nY := 1 To Fcount()
			nX := "M->" + FieldName(nY)
			If "_FILIAL"$Upper(nX)
				FieldPut(nY, xFilial('TAX'))
			Else
				FieldPut(nY, &nX.)
			EndIf
		Next nY
	Else
		DbDelete()
	EndIf

	MsUnLock('TAX')
	If lHist
		SGA140HIS(nOpcx) //Grava historico
	EndIf

	//Manipula a tabela TAV

	If !lLocTemp
		If nOpcx == 5
			TAV->(DbSetOrder(1))
			If TAV->(DbSeek(xFilial('TAV')+M->TAX_CODRES+'001'))
				While !TAV->(Eof()) .And. xFilial('TAV') == TAX->TAX_FILIAL .And.;
						TAV->TAV_CODRES == M->TAX_CODRES  .And.;
						TAV->TAV_CODEST == '001'
					RecLock('TAV',.F.)
					DbDelete()
					MsUnLock('TAV')
					TAV->(DbSkip())
				End
			EndIf

		Else

			For i:= 1 To Len( aLocal )

				DbSelectArea('TRBSGA')
				DbSetOrder(2)
				If DbSeek('001'+aLocal[i][1] )

					DbSelectArea('TAV')
					DbSetOrder(1)
					If !DbSeek(xFilial('TAV')+M->TAX_CODRES+'001'+aLocal[i][1])
						If aLocal[i][2]
							RecLock('TAV',.T.)
							TAV->TAV_FILIAL := xFilial('TAV')
							TAV->TAV_CODRES := M->TAX_CODRES
							TAV->TAV_CODEST := '001'
							TAV->TAV_CODNIV := aLocal[i][1]
							If lSgaSequen
								TAV->TAV_SEQUEN := "001"
							EndIf
							MsUnLock('TAV')
						EndIf
					Else
						If !aLocal[i][2]
							While !Eof() .And. TAV->TAV_FILIAL+TAV->TAV_CODRES+TAV->TAV_CODEST+TAV->TAV_CODNIV == xFilial('TAV')+M->TAX_CODRES+'001'+aLocal[i][1]
								RecLock('TAV',.F.)
								DbDelete()
								MsUnLock('TAV')
								dbSkip()
							End
						EndIf
					EndIf

				EndIf

			Next
		EndIf
	EndIf

	//Manipula a tabela TAZ

	If nOpcx == 5
		TAZ->(DbSetOrder(1))
		If TAZ->(DbSeek(xFilial('TAZ')+M->TAX_CODRES))
			While !TAZ->(Eof()) .And. xFilial('TAZ') == TAZ->TAZ_FILIAL .And.;
				TAZ->TAZ_CODRES == M->TAX_CODRES
				RecLock('TAZ',.F.)
				DbDelete()
				MsUnLock('TAZ')
				TAZ->(DbSkip())
			End
		EndIf
	Else
		aCols := aClone(oGet01:aCols)
		For j:= 1 To Len( aCols )
			DbSelectArea('TAZ')
			DbSetOrder(1)
			If DbSeek( xFilial('TAZ')+M->TAX_CODRES + aCols[j][1])
				RecLock('TAZ',.F.)
				lDelete := .T.
			Else
				If !Empty(aCols[j][1])
					If !aCols[j][Len(aCols[j])]
						RecLock('TAZ',.T.)
					Else
						Loop
					EndIf
				Else
					Loop
				EndIf
			EndIf

			If !Empty(aCols[j][1])
				If !aCols[j][Len(aCols[j])]
					TAZ->TAZ_FILIAL := xFilial('TAZ')
					TAZ->TAZ_CODRES := M->TAX_CODRES
					TAZ->TAZ_CODCRI := aCols[j][1]
					TAZ->TAZ_DESCRI := aCols[j][2]
					TAZ->TAZ_LIMMIN := aCols[j][3]
					TAZ->TAZ_LIMMAX := aCols[j][4]
					TAZ->TAZ_UNIMED := aCols[j][5]
					TAZ->TAZ_RESPON := aCols[j][6]
				Else
					If lDelete
						aEval(aCols, {|x| If(x[1] == aCols[j][1],nQtd++,Nil)})
						If nQtd <= 1
							DbDelete()
						EndIf
					EndIf
				EndIf
			EndIf
			MsUnLock('TAZ')
		Next j
	EndIf

	//Manipula a tabela TB7

	If nOpcx == 5
		TB7->(DbSetOrder(1))
		If TB7->(DbSeek(xFilial('TB7')+M->TAX_CODRES))
			While !TB7->(Eof()) .And. xFilial('TB7') == TB7->TB7_FILIAL .And.;
				TB7->TB7_CODRES == M->TAX_CODRES
				RecLock('TB7',.F.)
				DbDelete()
				MsUnLock('TB7')
				TB7->(DbSkip())
			End
		EndIf
	Else
		aCols := aClone(oGet02:aCols)

		For i := 1 to Len(aSvCols02)
			If aScan(aCols, {|x| x[2]+x[3] == aSvCols02[i][nTB7TIPO]+aSvCols02[i][nTB7CODTIP]}) == 0
				If NGIFDBSEEK('TB7',M->TAX_CODRES+aSvCols02[i][nTB7TIPO]+aSvCols02[i][nTB7CODTIP],1)
					RecLock('TB7',.F.)
					dbDelete()
					MsUnLock('TB7')
				EndIf
			EndIf
		Next

		For j:= 1 To Len( aCols )
			DbSelectArea('TB7')
			DbSetOrder(1)
			If DbSeek( xFilial('TB7')+M->TAX_CODRES + aCols[j][nTB7TIPO] + aCols[j][nTB7CODTIP])
				RecLock('TB7',.F.)
				lDelete := .T.
			Else
				If !Empty(aCols[j][nTB7TIPO])
					If !aCols[j][Len(aCols[j])]
						RecLock('TB7',.T.)
					Else
						Loop
					EndIf
				Else
					Loop
				EndIf
			EndIf

			If !Empty(aCols[j][nTB7TIPO])
				If !aCols[j][Len(aCols[j])]
					TB7->TB7_FILIAL := xFilial('TB7')
					TB7->TB7_CODRES := M->TAX_CODRES
					TB7->TB7_METODO := aCols[j][nTB7METODO]
					TB7->TB7_TIPO   := aCols[j][nTB7TIPO]
					TB7->TB7_CODTIP := aCols[j][nTB7CODTIP]
					TB7->TB7_ONDEMA := aCols[j][nTB7ONDEMA]
					TB7->TB7_FREQUE := aCols[j][nTB7FREQUE]
					TB7->TB7_UM     := aCols[j][nTB7UM]
					If nTB7COLETA > 0
					TB7->TB7_COLETA := aCols[j][nTB7COLETA]
					EndIf
				Else
					If lDelete
						aEval(aCols, {|x| If(x[1]+x[2] == aCols[j][nTB7TIPO]+aCols[j][nTB7CODTIP],nQtd++,Nil)})
						If nQtd <= 1
							DbDelete()
						EndIf
					EndIf
				EndIf
			EndIf
			MsUnLock('TB7')
		Next j
	EndIf

	//Manipula a tabela TF1

	//Grava Poluentes
	aColsPol := oGet03:aCols
	aHeadPol := oGet03:aHeader
	nPosPolu := aScan(aHeadPol, {|x| Trim(Upper(x[2])) == "TF1_CODPOL"})
	nPosData := aScan(aHeadPol, {|x| Trim(Upper(x[2])) == "TF1_DATA"})
	If Len(aColsPol) > 0
		ASORT(aColsPol,,, { |x, y| x[Len(aColsPol[1])] .And. !y[Len(aColsPol[1])] } )
	EndIf
	For i:=1 to Len(aColsPol)
		If aColsPol[i][Len(aColsPol[i])]
			dbSelectArea("TF1")
			dbSetOrder(1)
			If dbSeek(xFilial("TF1")+M->TAX_CODRES+aColsPol[i][nPosPolu]+DTOS(aColsPol[i][nPosData]))
				RecLock("TF1",.F.)
				dbDelete()
				MsUnlock("TF1")
			EndIf
		ElseIf !Empty(aColsPol[i][nPosPolu])
			dbSelectArea("TF1")
			dbSetOrder(1)
			If dbSeek(xFilial("TF1")+M->TAX_CODRES+aColsPol[i][nPosPolu]+DTOS(aColsPol[i][nPosData]))
				RecLock("TF1",.F.)
			Else
				RecLock("TF1",.T.)
			EndIf
			For k:=1 to FCount()
				If "_FILIAL"$Upper(FieldName(k))
					FieldPut(k, xFilial("TF1"))
				Elseif "_CODRES"$Upper(FieldName(k))
					FieldPut(k, M->TAX_CODRES)
				ElseIf (nPosCpo := aScan(aHeadPol, {|x| Trim(Upper(x[2])) == Trim(Upper(FieldName(k)))	})) > 0
					FieldPut(k, aColsPol[i][nPosCpo])
				EndIf
			Next k
			MsUnlock("TF1")
		EndIf
	Next i

	//Manipula a tabela TF2

	//Grava Tratamentos
	aColsTra := oGet04:aCols
	aHeadTra := oGet04:aHeader
	nPosAno  := aScan(aHeadTra, {|x| Trim(Upper(x[2])) == "TF2_ANO"})
	If Len(aColsTra) > 0
		ASORT(aColsTra,,, { |x, y| x[Len(aColsTra[1])] .And. !y[Len(aColsTra[1])] } )
	EndIf
	For i:=1 to Len(aColsTra)
		If aColsTra[i][Len(aColsTra[i])]
			dbSelectArea("TF2")
			dbSetOrder(1)
			If dbSeek(xFilial("TF2")+M->TAX_CODRES+aColsTra[i][nPosAno])
				RecLock("TF2",.F.)
				dbDelete()
				MsUnlock("TF2")
			EndIf
		ElseIf !Empty(aColsTra[i][nPosAno])
			dbSelectArea("TF2")
			dbSetOrder(1)
			If dbSeek(xFilial("TF2")+M->TAX_CODRES+aColsTra[i][nPosAno])
				RecLock("TF2",.F.)
			Else
				RecLock("TF2",.T.)
			EndIf
			For k:=1 to FCount()
				If "_FILIAL"$Upper(FieldName(k))
					FieldPut(k, xFilial("TF2"))
				Elseif "_CODRES"$Upper(FieldName(k))
					FieldPut(k, M->TAX_CODRES)
				ElseIf (nPosCpo := aScan(aHeadTra, {|x| Trim(Upper(x[2])) == Trim(Upper(FieldName(k)))	})) > 0
					FieldPut(k, aColsTra[i][nPosCpo])
				EndIf
			Next k
			MsUnlock("TF2")
		EndIf
	Next i

	//Manipula a tabela TH0

	If Type("oGet05") == "O" .And. lDestPad

		//Grava Destinos Padroes
		aColsDes := oGet05:aCols
		aHeadDes := oGet05:aHeader
		nPosCod  := aScan(aHeadDes, {|x| Trim(Upper(x[2])) == "TH0_DESTIN"})
		If Len(aColsDes) > 0
			ASORT(aColsDes,,, { |x, y| x[Len(aColsDes[1])] .And. !y[Len(aColsDes[1])] } )
		EndIf
		For i:=1 to Len(aColsDes)
			If aColsDes[i][Len(aColsDes[i])]
				dbSelectArea("TH0")
				dbSetOrder(1)
				If dbSeek(xFilial("TH0")+M->TAX_CODRES+aColsDes[i][nPosCod])
					RecLock("TH0",.F.)
					dbDelete()
					MsUnlock("TH0")
				EndIf
			ElseIf !Empty(aColsDes[i][nPosCod])
				dbSelectArea("TH0")
				dbSetOrder(1)
				If dbSeek(xFilial("TH0")+M->TAX_CODRES+aColsDes[i][nPosCod])
					RecLock("TH0",.F.)
				Else
					RecLock("TH0",.T.)
				EndIf
				For k:=1 to FCount()
					If "_FILIAL"$Upper(FieldName(k))
						FieldPut(k, xFilial("TH0"))
					Elseif "_CODRES"$Upper(FieldName(k))
						FieldPut(k, M->TAX_CODRES)
					ElseIf (nPosCpo := aScan(aHeadDes, {|x| Trim(Upper(x[2])) == Trim(Upper(FieldName(k)))	})) > 0
						FieldPut(k, aColsDes[i][nPosCpo])
					EndIf
				Next k
				MsUnlock("TH0")
			EndIf
		Next i

	EndIf

Return { aLocal }

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg140Lin1()
Valida a linha digitada no GetDados.


@author  Thiago Olis Machado
@since   30/11/2004
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function Sg140Lin1()

	Local nx,nCri
	Local nQtd := 0
	Local cCodCri := ''
	Local aCols01 := oGet01:aCols
	Local aHeader01 := oGet01:aHeader
	Local nCodCri, nDescri

	dbSelectArea("TAZ")
	dbGoBottom()
	dbSkip()

	n := oGet01:nAt

	nCodCri    := aScan( aHeader01, { |x| Trim( Upper(x[2]) ) == 'TAZ_CODCRI'})
	nDescri    := aScan( aHeader01, { |x| Trim( Upper(x[2]) ) == 'TAZ_DESCRI'})

	//Verifica se há algum campo da linha preenchido e obriga o preenchimento do código do critério e sua descrição.

	For nCri:=1 To Len(aCols01)
		If ( nPosReg := aScan(aCols01[nCri], {|x| !Empty(x) } ) ) > 0 .And. nPosReg < ( Len(aCols01[nCri]) - 3 )
			If Empty(aCols01[nCri][nCodCri])
				ShowHelpDlg( STR0032 , { STR0041+ AllTrim(NGRETTITULO("TAZ_CODCRI"))} , 2 , { STR0042 } , 2 ) //"É obrigatório o preenchimento do campo: " ## "Preencha corretamente o campo."
				Return .F.
			ElseIf Empty(aCols01[nCri][nDescri]) .And. !aCols01[nCri][Len(aCols01[nCri])]
				ShowHelpDlg( STR0032 , {STR0041+ AllTrim(NGRETTITULO("TAZ_DESCRI"))} , 2 , { STR0042 } , 2 ) //"É obrigatório o preenchimento do campo: " ## "Preencha corretamente o campo."
				Return .F.
			EndIf
		EndIf
	Next nCri

	If nCodCri > 0
		aEval( aCols01, { |x| nQtd += If( !x[Len(x)] .And. x[nCodCri] == aCols01[oGet01:nAt][nCodCri], 1, 0 ) } )
	EndIf

	If nQtd > 1
	Help(" ",1,STR0022,,STR0007,3,1) //"Criterio duplicado"
	Return .F.
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef()
Utilizacao de Menu Funcional.
				Parametros³Parametros do array a Rotina:
				1. Nome a aparecer no cabecalho
				2. Nome da Rotina associada
				3. Reservado
				4. Tipo de Transao a ser efetuada:
					1 - Pesquisa e Posiciona em um Banco de Dados
				  	2 - Simplesmente Mostra os Campos
				   	3 - Inclui registros no Bancos de Dados
				   	4 - Altera o registro corrente
				   	5 - Remove o registro corrente do Banco de Dados
				5. Nivel de acesso
				6. Habilita Menu Funcional

@author  Rafael Diogo Richter
@since   29/11/2006
@version P11
@return  aRotina
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

	Local lPyme   := Iif(Type("__lPyme") <> "U",__lPyme,.F.)

	Local aRotina :=	{ 	{ STR0023 , "AxPesqui"  , 0 , 1},;  //"Pesquisar"
	                    	{ STR0024 , "Sg140Pro"  , 0 , 2},;  //"Visualizar"
	                    	{ STR0025 , "Sg140Pro"  , 0 , 3},;  //"Incluir"
	                    	{ STR0026 , "Sg140Pro"  , 0 , 4},;
	                    	{ STR0027 , "Sg140Pro"  , 0 , 5, 3}}

	AAdd( aRotina, {STR0028 , "SGA140HDE", 0, 4 } )

	If !lPyme
	   AAdd( aRotina, {STR0030 , "MsDocument", 0, 4 } ) //
	EndIf

Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg140Lin2()
Valida a linha digitada no GetDados da TB7 (Class. Destin.

@author  Marcos Wagner Junior
@since   29/11/2006
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function Sg140Lin2()

	Local nx
	Local nQtd 		:= 0
	Local cTipo 	:= '', cCodTipo := ''
	Local aCols02 	:= oGet02:aCols
	Local aHeader02 := oGet02:aHeader

	dbSelectArea("TB7")
	dbGoBottom()
	dbSkip()

	n := oGet02:nAt

	cTipo    := aCols02[n][nTB7TIPO]
	cCodTipo := aCols02[n][nTB7CODTIP]

	If Len(aCols02) == 1 .And. Empty(aCols02[1][nTB7CODTIP])
	   Return .T.
	EndIf

	For nx:=1 To Len(aCols02)
	   If !aCols02[nx][Len(aCols02[nx])]
	      If Empty(aCols02[nx][nTB7TIPO])
				Help(" ",1,"OBRIGAT",,NGSEEKDIC("SX3","TB7_TIPO",2,"X3_TITULO"),05)
				Return .F.
	      EndIf
	      If Empty(aCols02[nx][nTB7CODTIP])
				Help(" ",1,"OBRIGAT",,NGSEEKDIC("SX3","TB7_CODTIP",2,"X3_TITULO"),05)
				Return .F.
	      EndIf
	   EndIf
	Next

	If nTB7TIPO > 0 .And. nTB7CODTIP > 0
	   aEval( aCols02, { |x| nQtd += iif( ! x[Len(aHeader02)+1] .And. x[nTB7TIPO]+x[nTB7CODTIP] == cTipo+cCodTipo, 1, 0 ) } )
	EndIf

	If nQtd > 1
	   Help(" ",1,STR0022,,STR0031,3,1) //"Tipo de destinação duplicado"
	   Return .F.
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SGA140EGET(nCols)
Alimenta variaveis na entrada da GetDados

@author  Marcos Wagner Junior
@since   19/11/2009
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function SGA140EGET(nCols)

	Local aCols02 := oGet02:aCols

	If nCols == 2
		n := oGet02:nAt
		M->TB7_CODTIP := aCols02[n][nTB7CODTIP]
		M->TB7_TIPO   := aCols02[n][nTB7TIPO]
	ElseIf nCols == 3
		n := oGet03:nAt
	ElseIf nCols == 4
		n := oGet04:nAt
	ElseIf lDestPad
		n := oGet05:nAt
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SGAA140DO()
Monta tela para relacionar documento.

@author  Marcos Wagner Junior
@since   04/12/2009
@version P11
@return  lRet
/*/
//---------------------------------------------------------------------
Static Function SGAA140DO()

	Local oDlgQdo,oRadio
	Local nRadio := 1,nOpc := 1
	Local lRet := .T.
	Local lGrava := .F.

	Define MsDialog oDlgQdo From 03.5,6 To 150,320 Title STR0032 Pixel //"Atenção"
	Define FONT oBold NAME "Courier New" SIZE 0, -13 BOLD
	@ 0, 0 BITMAP oBmp RESNAME "PROJETOAP" oF oDlgQdo SIZE 35,250 NOBORDER WHEN .F. PIXEL

	@ 05,040 Say OemToAnsi(STR0033) Size 117,7 Of oDlgQdo Pixel Font oBold //"O que deseja fazer ?"

	@ 20,048 Radio oRadio Var nRadio Items STR0034,STR0035,; //"Relacionar um documento" - "Visualizar documento relacionado"
	STR0036 3d Size 105,10 Of oDlgQdo Pixel //"Apagar um Documento Relacionamento"

	Define sButton From 055,090 Type 1 Enable Of oDlgQdo Action (lGrava := .T.,oDlgQdo:End())
	Define sButton From 055,120 Type 2 Enable Of oDlgQdo Action (lGrava := .F.,oDlgQdo:End())

	Activate MsDialog oDlgQdo Centered

	If !lGrava
	   lRet := .F.
	Else
	   If nRadio == 1
	  	  If !SGA140REQD() //!CMBARelQdo()
	  	  	 lRet := .F.
	  	  EndIf
	   ElseIf nRadio == 2
	  	  If SGA140VIEW() //CMBAVieQdo()
	  	  	 lRet := .F.
	  	  EndIf
	   Else
			M->TAX_DOCTO  := ' '
			M->TAX_DOCFIL := ' '
	   EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SGA140REQD()
Relaciona um procedimento a um documento QDO

@author  Marcos Wagner Junior
@since   17/11/2009
@version P11
@return  lRet
/*/
//---------------------------------------------------------------------
Static Function SGA140REQD()

	Local lRet := .F.

	lRet := ConPad1( , , , "QDT1",,,.F.)
	If lRet
		M->TAX_DOCTO  := QDH->QDH_DOCTO
		M->TAX_DOCFIL := QDH->QDH_FILIAL
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SGA140VIEW()
Visualiza um documento QDO

@author  Marcos Wagner Junior
@since   17/11/2009
@version P11
@return  _lRet
/*/
//---------------------------------------------------------------------
Static Function SGA140VIEW()

	Local _lRet := .F.

	If !Empty(M->TAX_DOCTO)
		If QDOVIEW( , M->TAX_DOCTO ) //Visualiza documento Word...
			_lRet := .T.
		EndIf
	Else
		MsgInfo(STR0037) //"Não existe documento associado!"
	EndIf

Return _lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SGA140HIS(nOpc)
Grava o historico da Definicao de Residuos

@author  Marcos Wagner Junior
@since   17/11/2009
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Static Function SGA140HIS(nOpc)

	If (nOpc == 3) .Or.  (nOpc == 4) .Or. (nOpc == 5)
		If nOpc == 3
			cOperOPC := "1
		ElseIf nOpc == 4
			cOperOPC := "2"
		Else
			cOperOPC := "3"
		EndIf

		dbSelectArea('TEO')
		dbSetOrder(01)
		If !dbSeek(xFilial('TEO')+M->TAX_CODRES+DTOS(dDATABASE)+SubStr(Time(),1,5)+cOperOPC)
			RecLock('TEO',.T.)
			TEO->TEO_FILIAL := xFilial('TEO')
			TEO->TEO_CODRES := M->TAX_CODRES
			TEO->TEO_DATHIS := dDATABASE
			TEO->TEO_HORHIS := Time()
			TEO->TEO_USUARI := cUserName
			TEO->TEO_OPERAC := cOperOPC
			TEO->(MsUnLock())
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SGA140HDE(nOpc)
Grava o historico da Definicao de Residuos

@author  Marcos Wagner Junior
@since   17/11/2009
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function SGA140HDE(nOpc)

	Local aOldArea := GetArea()
	Local aOldRot := aClone(aRotina)

	Private aNgButton 	:= {}
	Aadd(aNgButton,{STR0016 ,{||SGAA140DO()},STR0017,STR0018}) //"Relacionar documento" - "Rel.Doc."

	aRotina :=	{ { STR0009 , "AxPesqui" , 0 , 1},; //"Pesquisar"
	              { STR0010 , "NGCAD01"  , 0 , 2}}  //"Visualizar"

	DbSelectArea("TEO")
	DbSetOrder(1)
	Set Filter to ((TEO->TEO_CODRES == TAX->TAX_CODRES))

	mBrowse( 6, 1,22,75,"TEO")

	DbClearFilter()

	RestArea(aOldArea)
	aRotina := aClone(aOldRot)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SGAA140DO()
When do campo identificação

@author  Marcos Wagner Junior
@since  21/06/10
@version P11
@return  lRet
/*/
//---------------------------------------------------------------------
Function SG140WID()

	Local lRet := .T.

	If M->TAX_CLASSE == "2"
		M->TAX_IDENTI := "3"
		lRet := .F.
	Elseif M->TAX_CLASSE == "3"
		M->TAX_IDENTI := "4"
		lRet := .F.
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SG140VID()
Validação do campo identificação

@author  Marcos Wagner Junior
@since  21/06/10
@version P11
@return  lRet
/*/
//---------------------------------------------------------------------
Function SG140VID()

	Local lRet := .T.

	If M->TAX_CLASSE == "1"
		If M->TAX_IDENTI == "3" .Or. M->TAX_IDENTI == "4"
			ShowHelpDlg(STR0032,{STR0038+STR0039},3,{STR0040},1) //"Quando a classe for 1=Classe I - Perigoso, só podem ser selecionadas as opções 1=Fontes não específicas" - "Selecione uma opção válida."
			lRet := .F.
		EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SG140VID()
Validação do campo classe

@author  Marcos Wagner Junior
@since  21/06/10
@version P11
@return  lRet
/*/
//---------------------------------------------------------------------
Function SG140VCL()

	Local lRet := .T.

	If M->TAX_CLASSE == "1"
		M->TAX_IDENTI := ""
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SG140LIN(nGetDados,lFim)
Valida linha da get dados.

@author  Roger Rodrigues
@since   12/01/11
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function SG140LIN(nGetDados,lFim)

	Local f
	Local nAt, aColsVal, aHeadVal
	Local nPosCod := nPosDat := nPosCoe := nPosUni := 0
	Local nPosAno := nPosEfi := nPosMon := 0
	Default lFim  := .F.

	If nGetDados == 3
		nAt := oGet03:nAt
		aColsVal := oGet03:aCols
		aHeadVal := oGet03:aHeader
		nPosCod  := aSCAN(aHeadVal,{|x| Trim(Upper(x[2])) == "TF1_CODPOL"})
		nPosDat  := aSCAN(aHeadVal,{|x| Trim(Upper(x[2])) == "TF1_DATA"})
		nPosCoe  := aSCAN(aHeadVal,{|x| Trim(Upper(x[2])) == "TF1_COEFIC"})
		nPosUni  := aSCAN(aHeadVal,{|x| Trim(Upper(x[2])) == "TF1_UNIDAD"})
		If Len(aColsVal) == 1 .And. lFim .And. Empty(aColsVal[1][nPosCod])
			Return .T.
		EndIf
	ElseIf nGetDados == 4
		nAt := oGet04:nAt
		aColsVal := oGet04:aCols
		aHeadVal := oGet04:aHeader
		nPosAno  := aSCAN(aHeadVal,{|x| Trim(Upper(x[2])) == "TF2_ANO"})
		nPosEfi  := aSCAN(aHeadVal,{|x| Trim(Upper(x[2])) == "TF2_EFICIE"})
		nPosMon  := aSCAN(aHeadVal,{|x| Trim(Upper(x[2])) == "TF2_TIPMON"})
		If Len(aColsVal) == 1 .And. lFim .And. Empty(aColsVal[1][nPosAno])
			Return .T.
		EndIf
	ElseIf lDestPad
		nAt := oGet05:nAt
		aColsVal := oGet05:aCols
		aHeadVal := oGet05:aHeader
		nPosCod  := aSCAN(aHeadVal,{|x| Trim(Upper(x[2])) == "TH0_DESTIN"})
		If Len(aColsVal) == 1 .And. lFim .And. Empty(aColsVal[1][nPosCod])
			Return .T.
		EndIf
	EndIf

	//Percorre aCols
	For f:= 1 to Len(aColsVal)
		If !aColsVal[f][Len(aColsVal[f])]
			If lFim .Or. f == nAt
				//Verifica se os campos obrigatórios estão preenchidos
				If nGetDados == 3
					If Empty(aColsVal[f][nPosCod])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeadVal[nPosCod][1],3,0)
						Return .F.
					ElseIf Empty(aColsVal[f][nPosDat])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeadVal[nPosDat][1],3,0)
						Return .F.
					ElseIf Empty(aColsVal[f][nPosCoe])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeadVal[nPosCoe][1],3,0)
						Return .F.
					ElseIf Empty(aColsVal[f][nPosUni])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeadVal[nPosUni][1],3,0)
						Return .F.
					EndIf
				ElseIf nGetDados == 4
					If Empty(aColsVal[f][nPosAno])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeadVal[nPosAno][1],3,0)
						Return .F.
					ElseIf Empty(aColsVal[f][nPosEfi])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeadVal[nPosEfi][1],3,0)
						Return .F.
					ElseIf Empty(aColsVal[f][nPosMon])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeadVal[nPosMon][1],3,0)
						Return .F.
					EndIf
				ElseIf nGetDados == 5
					If Empty(aColsVal[f][nPosCod])
						//Mostra mensagem de Help
						Help(1," ","OBRIGAT2",,aHeadVal[nPosCod][1],3,0)
						Return .F.
					EndIf
				EndIf
			EndIf
			//Verifica se é somente LinhaOk
			If f <> nAt .And. !aColsVal[nAt][Len(aColsVal[nAt])]
				If nGetDados == 3
					If aColsVal[f][nPosCod]+DTOS(aColsVal[f][nPosDat]) == aColsVal[nAt][nPosCod]+DTOS(aColsVal[nAt][nPosDat])
						Help(" ",1,"JAEXISTINF",,aHeadVal[nPosCod][1])
						Return .F.
					EndIf
				ElseIf nGetDados == 4
					If aColsVal[f][nPosAno] == aColsVal[nAt][nPosAno]
						Help(" ",1,"JAEXISTINF",,aHeadVal[nPosAno][1])
						Return .F.
					EndIf
				ElseIf nGetDados == 5
					If aColsVal[f][nPosCod] == aColsVal[nAt][nPosCod]
						Help(" ",1,"JAEXISTINF",,aHeadVal[nPosCod][1])
						Return .F.
					EndIf
				EndIf
			EndIf
		EndIf
	Next f

	PutFileinEof("TF1")
	PutFileinEof("TF2")

	If AliasInDic("TH0")
		PutFileinEof("TH0")
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SG140WHEN(cCampo)
When dos campos da tela

@author  Roger Rodrigues
@since    16/03/11
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function SG140WHEN(cCampo)

	Local lRet := .T.
	Local nAt, nPosOnd, nPosTipo

	If cCampo == "TB7_FREQUE" .Or. cCampo == "TB7_UM"
		nAt := oGet02:nAt
		nPosOnd := aScan( oGet02:aHeader,{|x| Trim(Upper(x[2])) == "TB7_ONDEMA"})
		If nPosOnd > 0 .And. nAt > 0
			lRet := oGet02:aCols[nAt][nPosOnd] == "2"
		EndIf
	ElseIf cCampo == "TB7_CODTIP"
		nAt := oGet02:nAt
		nPosTipo := aScan( oGet02:aHeader,{|x| Trim(Upper(x[2])) == "TB7_TIPO"})
		If nPosTipo > 0
			M->TB7_TIPO := oGet02:aCols[nAt][nPosTipo]
		EndIf
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} SG140VAL
Faz chamada das validacoes da tela
@type    function
@author  Roger Rodrigues
@since   16/03/2011
@sample  SG140VAL( 'M->TB7_ONDEMA' )
@param   cCampo, Caractere, Campo para validação

@return  Nil, Sempre nulo
@return  lRet, Lógico, Verdadeiro se tudo for válido
/*/
//-------------------------------------------------------------------
Function SG140VAL( cCampo )

	Local lRet := .T.
	Local aHeadOk := aClone(aHeader)
	Local nAt := oGet02:nAt
	Local nPosCod := aScan( aHeadOk,{|x| Trim(Upper(x[2])) == "TB7_CODTIP"})
	Local nPosDes := aScan( aHeadOk,{|x| Trim(Upper(x[2])) == "TB7_DESC"})
	Local nPosTipo:= aScan( aHeadOk,{|x| Trim(Upper(x[2])) == "TB7_TIPO"})
	Local nPosOnd := aScan( aHeadOk,{|x| Trim(Upper(x[2])) == "TB7_ONDEMA"})
	Local nPosFre := aScan( aHeadOk,{|x| Trim(Upper(x[2])) == "TB7_FREQUE"})
	Local nPosUm  := aScan( aHeadOk,{|x| Trim(Upper(x[2])) == "TB7_UM"})
	Default cCampo := ReadVar()

	If cCampo == "M->TB7_CODTIP"
		If nAt > 0
			lRet := ExistCpo("TB6",M->TB7_CODTIP+oGet02:aCols[nAt][nPosTipo])
		EndIf
	ElseIf cCampo == "M->TB7_TIPO"
		lRet := Pertence("123456")
		If lRet .And. !Empty(oGet02:aCols[nAt][nPosCod])
			dbSelectArea("TB6")
			dbSetOrder(1)
			If dbSeek(xFilial("TB6")+oGet02:aCols[nAt][nPosCod]+M->TB7_TIPO)
				oGet02:aCols[nAt][nPosDes] := AllTrim(TB6->TB6_DESCRI)
			Else
				oGet02:aCols[nAt][nPosCod] := Space(TAMSX3("TB7_CODTIP")[1])
				oGet02:aCols[nAt][nPosDes] := Space(TAMSX3("TB7_DESC")[1])
			EndIf
			oGet02:oBrowse:Refresh()
		EndIf
	ElseIf cCampo == "M->TB7_ONDEMA"
		lRet := Pertence("12")
		If lRet .And. M->TB7_ONDEMA != "2"
			If nPosFre > 0
				oGet02:aCols[nAt][nPosFre]:= 0
				oGet02:aCols[nAt][nPosUm] := Space(1)
			EndIf
			If nPosUm > 0
				oGet02:aCols[nAt][nPosFre]:= 0
				oGet02:aCols[nAt][nPosUm] := Space(1)
			EndIf
			oGet02:oBrowse:Refresh()
		EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SGA140TREE
Realiza carregamento da estrutura organizacional

@author  Elynton Fellipe Bazzo
@since   09/09/2013
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function SGA140TREE( nOpcTree, aNivMrk, cFctClr)

	Local cLocal := ""
	Local i
	Local nMod := If( nModulo == 35, 5, If( nModulo == 56, 3, 4 ) )

	Default aNivMrk := {}
	Default cFctClr := ""

	If nOpcTree == 1//Opcao 1 Carrega tudo e 2 bChange

		//Posiciona no nivel pai da estrutura
		dbSelectArea("TAF")
		dbSetOrder(1)
		dbSeek(xFilial("TAF")+cCodest+"000")

		Processa({|lEnd| Sg100Tree(.F.,cCodest,nMod)},STR0014,STR0015,.T.) //"Aguarde..."###"Carregando Estrutura..."
		Processa( { |lEnd| Sg140MkNiv(aNivMrk) }, STR0014, STR0015, .T. ) // "Aguarde..." ## "Carregando Estrutura..."
		//Abre itens na estrutura
		For i:=1 to Len(aLocal)
			If aLocal[i][2]
				fPosicLoc(aLocal[i][1])
			EndIf
		Next i
	Else

		dbSelectArea(oTree:cArqTree)
		cLocal := SubStr( oTree:getCargo(), 1, 3 )
		SG100VChg(nMod)
	EndIf

	SG140COR(cLocal)//Troca cor das pastas

	// Executa funcao especifica de cores
	If !Empty(cFctClr)
		ExecFctClr(cFctClr)
	EndIf

	//Se estiver abrindo a tela, fecha a estrutura
	If nOpcTree == 1
		For i:=1 to Len(aLocal)
			If aLocal[i][2]
				oTree:TreeSeek(aLocal[i][1])
			EndIf
		Next i
		oTree:TreeSeek(cCodest)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SG140COR( cLocal )
Altera cor dos itens que foram previamente marcados

@author  Elynton Fellipe Bazzo
@since   09/09/2013
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function SG140COR( cLocal )

	Local i
	Local aArea := GetArea()

	For i:=1 to Len(aMarcado)
		If aMarcado[i][Len(aMarcado[i])]
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			If dbSeek(cCodest+aMarcado[i][1])
				dbSelectArea(oTree:cArqTree)
				dbSetOrder(4)
				If dbSeek(aMarcado[i][1])
					If SubStr( (oTree:cArqTree)->T_CARGO, 1, 3 ) == aMarcado[i][1] .And. SubStr( (oTree:cArqTree)->T_CARGO, 7, 1 ) != "2"//Desmraca

						oTree:TreeSeek(aMarcado[i][1])
						oTree:ChangeBmp("Folder7","Folder8")
						(oTree:cArqTree)->T_CARGO := SubStr(oTree:getCargo(),1,6)+"2"
						aMarcado[i][Len(aMarcado[i])] := .F.

						//Caso nao seja nivel clicado, fecha o mesmo
						If (cTRBSGA)->NIVSUP != cLocal .And. (cTRBSGA)->CODPRO != cCodest
							oTree:TreeSeek((cTRBSGA)->NIVSUP)
							oTree:PtCollapse()
						EndIf

						oTree:TreeSeek(cLocal)
					EndIf
				EndIf
			EndIf
		EndIf
	Next i

	RestArea( aArea )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc}  fPosicLoc(cCodigo)
Posiciona na localizacao a ser marcada

@author  Elynton Fellipe Bazzo
@since   09/09/2013
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Static Function fPosicLoc(cCodigo,aNivMrk)

	Local i
	Local cSupNiv  := cCodEst
	Local aLocPais := {}
	Local nMod := If( nModulo == 35, 5, If( nModulo == 56, 3, 4 ) )

	//Carrega itens pais
	If !Empty(cCodigo)

		aAdd(aLocPais, cCodigo)
		cSupNiv := NGSEEK("TAF",cCodigo,8,"TAF->TAF_NIVSUP")

		dbSelectArea("TAF")
		dbSetOrder(2)
		dbSeek(xFilial("TAF")+cCodEst+cCodigo)
		While !eof() .And. Found() .And. cSupNiv != "000"

			dbSelectArea("TAF")
			dbSetOrder(2)
			If dbSeek(xFilial("TAF")+cCodEst+cSupNiv)
				aAdd(aLocPais, TAF->TAF_CODNIV)
				cSupNiv := TAF->TAF_NIVSUP
			EndIf

		End
	Else
		Return .F.
	EndIf

	//Encontra item na arvore
	For i:=Len(aLocPais) to 1 Step -1
		oTree:TreeSeek(aLocPais[i]+"LOC")
		SG100VChg(nMod,aNivMrk)
	Next i

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SGAUPDFMR(cAlias)
Verirfica se update de FMR esta aplicado

@author  Roger Rodrigues
@since   16/03/11
@version P11
@return  .T.
/*/
//---------------------------------------------------------------------
Function SGAUPDFMR(cAlias)

	Default cAlias := "TDI"

	dbSelectArea("SX2")
	dbSetOrder(1)
	If !dbSeek("TDB") .Or. !dbSeek("TDC") .Or. !dbSeek("TDI") .Or. !dbSeek(cAlias)
		If !NGINCOMPDIC("UPDSGA05","00000013901/2011")
			Return .F.
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} ExecFctClr
Executa funcao para selecao de cores secundarias.

@param cFctClr Nome da funcao em forma de string, a ser executada.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ExecFctClr(cFctClr)

	Local nPos     := At("(", cFctClr)
	Local cExecFct := If(nPos > 0,;
								SubStr(cFctClr, 1, Len(cFctClr) - nPos),;
								cFctClr)

	If FindFunction( cExecFct )
		cFctClr += If(nPos > 0, "", "()")
		&cFctClr.
	EndIf

Return Nil

//---------------------------------------------------------------------
/*/{Protheus.doc} Sg140MkNiv
Define marcacao para os niveis relacionados.

@author Hugo R. Pereira
@since 09/10/2012
@version MP10
@return Nil
/*/
//---------------------------------------------------------------------
Function Sg140MkNiv(aNivMrk)

	Local i

	ProcRegua(Len(aLocal))

	// Abre itens na estrutura
	For i := 1 to Len(aLocal)
		IncProc()
		If aLocal[i][2]
			fPosicLoc( aLocal[i][1], aNivMrk )
		EndIf
	Next i

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} SGA140WH
When do campo Motivo

@type    function
@author  Marcos Wagner Junior
@since   06/11/2009
@sample  SGA140WH()
@return  lRet, Lógico, Verdadeiro se puder alterar o campo
/*/
//-------------------------------------------------------------------
Function SGA140WH()

	Local lRet := .T.

	If (!Empty(cA4_CODLAM) .And. M->TFD_DATAVA < dDATABASE) .Or. Empty(cA4_CODLAM) .Or.;
		(!Empty(M->TFD_CRLV) .And. M->TFD_DTCRLV < dDATABASE) .Or.;
		(!Empty(M->TFD_CIPP) .And. M->TFD_DTCIPP < dDATABASE) .Or.;
		(cA4_STATUS == '2' .And. M->TFD_DATAVA >= dDATABASE)
		lRet := .F.
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SG140VLCRI
Valida campos de Limite Minimo e Limite Maximo

@Param nParam (1/2)
@author Gabriel Augusto Werlich
@since 26/11/2014
@version MP11/12
@return lRet
/*/
//---------------------------------------------------------------------
Function SG140VLCRI( nParam )

	Local nLimMin := aScan( oGet01:aHeader, { |x| Trim( Upper(x[2]) ) == 'TAZ_LIMMIN'})
	Local nLimMax := aScan( oGet01:aHeader, { |x| Trim( Upper(x[2]) ) == 'TAZ_LIMMAX'})
	Local lRet := .T.

	If nParam == 1
		If Empty(oGet01:aCols[oGet01:nAt][nLimMax])
			lRet := .T.
		ElseIf M->TAZ_LIMMIN > oGet01:aCols[oGet01:nAt][nLimMax]
			lRet := .F.
			MsgStop(STR0044) //"O Lim. Mínimo precisa ser menor ou igual ao Lim. Máximo"
		EndIf
	Else
		If Empty(oGet01:aCols[oGet01:nAt][nLimMin])
			lRet := .T.
		ElseIf M->TAZ_LIMMAX < oGet01:aCols[oGet01:nAt][nLimMin]
			lRet := .F.
			MsgStop("O Lim. Máximo precisa ser maior ou igual ao Lim. Minimo") //"O Lim. Máximo precisa ser maior ou igual ao Lim. Minimo"
		EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SG140VLCOD
Valida campos de Limite Minimo e Limite Maximo

@Param nParam (1/2)
@author Gabriel Augusto Werlich
@since 26/11/2014
@version MP11/12
@return lRet
/*/
//---------------------------------------------------------------------
Function SG140VLCOD()

	Local cCodCri := aScan( oGet01:aHeader, { |x| Trim( Upper(x[2]) ) == 'TAZ_CODCRI'})
	Local nExiste := 0

	If oGet01:aCols[oGet01:nAt][cCodCri] == M->TAZ_CODCRI
		Return .T.
	EndIf

	nExiste := aScan( oGet01:aCols, { |x| x[1] == M->TAZ_CODCRI .And. !x[Len(x)] })

	If nExiste > 0
		Help(" ",1,STR0022,,STR0007,3,1) //"Critério duplicado"
		Return .F.
	EndIf

Return .T.