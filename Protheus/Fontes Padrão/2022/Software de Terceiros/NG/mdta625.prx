#include "MDTA625.ch"
#include "Protheus.ch"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ MDTA625  ³ Autor ³ Deivys Joenck         ³ Data ³ 09/08/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Cadastro de EPI'S por Função.                              ³±±
±±³          ³ EPI sao os produtos (SB1) e as Fun‡oes sao a mesma da folha³±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MDTA625()

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Armazena variaveis p/ devolucao (NGRIGHTCLICK) 						  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Local aNGBEGINPRM := NGBEGINPRM()
	lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .t. , .f. )
	aRotina := MenuDef( .F. )

	Private lPosTrab
	Private cCadastro

	If NGSX2MODO("SRJ") == "E" .And. NGSX2MODO("TNB") == "C"
		MsgAlert(STR0023+chr(13); //"Existe um problema de compartilhamento entre as tabelas SRJ e TNB."
		+STR0024+chr(13); //"Verifique o compartilhamento das tabelas para que seja como uma das opções descritas abaixo:"
		+STR0025+chr(13); //"SRJ (Compartilhada) e TNB (Compartilhada)"
		+STR0026+chr(13); //"SRJ (Compartilhada) e TNB (Exclusiva)"
		+STR0027,STR0028) //"SRJ (Exclusiva) e TNB (Exclusiva)"###"Atenção!"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Devolve variaveis armazenadas (NGRIGHTCLICK) 							  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		NGRETURNPRM(aNGBEGINPRM)

		Return .F.
	EndIf

	If lSigaMdtps

		lPosTrab  := .f.
		cCadastro := OemtoAnsi(STR0017)  //"Clientes"

		DbSelectArea("SA1")
		DbSetOrder(1)

		mBrowse( 6, 1,22,75,"SA1")

	Else

		lPosTrab  := .f.
		Private cAliasFun := "SRJ"
		Private cCCodFun  := "SRJ->RJ_FUNCAO"
		Private cDescFun  := "SRJ->RJ_DESC"
		Private cCCodTNB  := "TNB_CODFUN"
		Private nIndTNB   := 1
		Private aQryTNB   := {{"TNB_CODFUN","SRJ->RJ_FUNCAO"}}
		Private cCpo_SRJ  := "SRJ->RJ_FUNCAO"

		If  TNB->(FieldPos("TNB_CODPOS")) > 0 .and. ;
			SRA->(FieldPos("RA_POSTO"))   > 0 .and. ;
			(TAMSX3("ZZI_COD")[1])        > 0

			lPosTrab  := .t.
			cAliasFun := "ZZI"
			cCCodFun  := "ZZI->ZZI_COD"
			cDescFun  := "ZZI->ZZI_DESC"
			cCCodTNB  := "TNB_CODPOS"
			nIndTNB   := 4
			aQryTNB   := {{"TNB_CODPOS","ZZI->ZZI_COD"}}
			cCpo_SRJ  := "ZZI->ZZI_COD"
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Define o cabecalho da tela de atualizacoes                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cCadastro := OemtoAnsi(IF(lPosTrab,STR0018,STR0004)) //"EPIs Relacionados Funcao"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Endereca a funcao de BROWSE                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea(cAliasFun)
		DbSetOrder(1)
		mBrowse( 6, 1,22,75,cAliasFun)

	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Devolve variaveis armazenadas (NGRIGHTCLICK) 							  	  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NGFUN625
Programa de Inclusao,alteracao,exclusao de EPIs

@Param cAlias = Alias do arquivo
@Param nReg = Numero do registro
@Param nOpcx = Opção selecionada no menu

@return .T.

@author Deivys Joenck
@since 11/08/2000
/*/
//---------------------------------------------------------------------
Function NGFUN625(cAlias,nReg,nOpcx)

	Local oDlg, oGet, oPanelTop, oPanelMid, oPanelGet, oPanelTot
	Local i,nFor
	Local aNoFields := {}
	Private aCOLS := {}, aHeader := {}
	Private cTime625 := "99:99:99"
	Private cEpie625 := Space(15)

	//-------------------------------------------------------------
	//Verifica qual tipo de produto eh o tipo EPI
	//e atualiza a consulta padrao de EPI's de acordo com isso
	//-------------------------------------------------------------
	Private cTipo := SuperGetMv("MV_MDTPEPI",.F.,"")
	Private lSX5  := !Empty(cTipo)  //Variaveis utilizadas na validacao do campo TNX_EPI

	//Variaveis de tamanho de tela e objetos
	Private aSize := MsAdvSize(,.f.,430), aObjects := {}
	Aadd(aObjects,{050,050,.t.,.t.})
	Aadd(aObjects,{020,020,.t.,.t.})
	Aadd(aObjects,{100,100,.t.,.t.})
	aInfo := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.t.)

	//-------------------------------------------------------------
	//Verifica se existe algum dado no arquivo
	//-------------------------------------------------------------
	dbSelectArea( cAlias )
	dbSetOrder(1)

	//Validação para não deixar vincular um EPI a uma função Bloqueada
	If NGCADICBASE("RJ_MSBLQL","A","SRJ",.F.) //Não remover, pois o campo pode ser reservado.
		If SRJ->RJ_MSBLQL == "1"
			ShowHelpDlg( STR0028,{ STR0032 }, 2, ; //"Atenção" ### //"A Função esta bloqueada."
				{ STR0033 },2 ) //"Só é possível vincular EPIs em funções que não estejam bloqueadas."
			Return .F.
		EndIf
	EndIf

	FOR i := 1 TO FCount()
		x   := "m->" + FieldName(i)
		&x. := FieldGet(i)
	Next i

	cALIAS := "TNB"
	dbSelectArea("TNB")
	dbSetOrder(nIndTNB)
	dbSeek( xFilial(cAlias)+&(cCCodFun))

	//-------------------------------------------------------------
	//Monta a entrada de dados do arquivo
	//-------------------------------------------------------------
	Private aTELA := {},aGETS := {}

	//-------------------------------------------------------------
	//Monta o cabecalho
	//-------------------------------------------------------------

	aAdd(aNoFields, 'TNB_CODFUN')
	aAdd(aNoFields, 'TNB_CODPOS')
	aAdd(aNoFields, 'TNB_DESCFU')
	If lSigaMdtps
		aAdd(aNoFields, 'TNB_CLIENT')
		aAdd(aNoFields, 'TNB_LOJA')
		aAdd(aNoFields, 'TNB_NOME')
	Endif

	#IFDEF TOP
		If Len(aQryTNB) > 0
			cTmpQuery := ""
			For nFor := 1 To Len(aQryTNB)
				cTmpQuery += " AND TNB."+aQryTNB[nFor,1]+" = '"+&(aQryTNB[nFor,2])+"'"
			Next nFor
			cQuery := "SELECT * FROM "+RetSqlName("TNB")+" TNB WHERE TNB.TNB_FILIAL = '"+xFilial("TNB")+"' AND TNB.D_E_L_E_T_ = ' '"+cTmpQuery
		Else
			cQuery := "SELECT * FROM "+RetSqlName("TNB")+" TNB WHERE TNB.TNB_FILIAL = '"+xFilial("TNB")+"' AND TNB."+cCCodTNB+" = '"+&(cCCodFun)+"'"+;
				" AND TNB.D_E_L_E_T_ = ' '"
		Endif
		FillGetDados( 4, "TNB", nIndTNB, xFilial("TNB")+&(cCCodFun), {|| cCCodTNB}, {|| .T.},aNoFields,,,cQuery)
	#ELSE
		cGETWHTPB := "TNB->TNB_FILIAL == '"+xFilial("TNB")+"' .And. TNB->"+cCCodTNB+" == '" + &cCCodFun + "'"
		FillGetDados( 4, "TNB", 1, cCCodFun, {|| }, {|| .T.},aNoFields,,,,{|| NGMontaAcols("TNB",&cCCodFun,cGETWHTPB)})
	#ENDIF

	If Empty(aCols)
		aCols := BlankGetd(aHeader)
	EndIf

	cCBO  := " "
	If !lPosTrab
		cCBO  := SRJ->RJ_CBO
		If SRJ->(FieldPos("RJ_CODCBO")) > 0
			If !Empty(SRJ->RJ_CODCBO)
				cCBO := SRJ->RJ_CODCBO
			Endif
		Endif
	Endif

	PutFileInEof( "TNB" )

	nOpca := 0
	DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd Pixel

	oPanelTot := TPanel():New(0,0,,oDlg,,,,,,0,0,.F.,.F.)
		oPanelTot:Align := CONTROL_ALIGN_ALLCLIENT

	oPanelTop := TPanel():New(,,,oPanelTot,,,,,RGB(255,255,255),, If(lPosTrab,300,45), .F., .F. )
		oPanelTop:Align := CONTROL_ALIGN_TOP

	@ 5, 5  SAY OemtoAnsi(IF(lPosTrab,STR0019,STR0005)) PIXEL OF oPanelTop //"Funcao"
	@ 5, 35  MSGET &(cCpo_SRJ) SIZE 20,10 WHEN .F. PIXEL OF oPanelTop
	@ 5, 75  SAY OemToAnsi(STR0006) PIXEL OF oPanelTop //"Descricao"
	@ 5, 105 MSGET &(cDescFun) SIZE 150,10 WHEN .F. PIXEL OF oPanelTop
	If !lPosTrab
		@ 25, 5  SAY OemToAnsi(STR0007) PIXEL OF oPanelTop //"C.B.O."
		@ 25, 35   MSGET cCBO SIZE 20,10 WHEN .F. PIXEL OF oPanelTop
		@ 25, 75  SAY OemToAnsi(STR0009) PIXEL OF oPanelTop //"Cargo"
		@ 25, 105  MSGET SRJ->RJ_CARGO SIZE 20,10 WHEN .F. PIXEL OF oPanelTop
	Endif

	oPanelMid := TPanel():New(0,0,,oPanelTot,,    ,    ,,RGB(255,255,255),, 30, .F., .F. )
	oPanelMid:Align := CONTROL_ALIGN_TOP
	@ 03,5 BUTTON STR0010 SIZE 30,12 PIXEL ACTION (MDT625EPI(cTipo,lSX5)) PIXEL OF oPanelMid  //"&EPI's"

	dbSelectArea("TNB")
	oPanelGet := TPanel():New(0,0,,oPanelTot,,    ,    ,,RGB(255,255,255),, 300, .F., .F. )
	oPanelGet:Align := CONTROL_ALIGN_ALLCLIENT

	oGet := MSGetDados():New(aPosObj[3,1],aPosObj[3,2],aPosObj[3,3],aPosObj[3,4],nOpcx,"NG625LinOk()","AllWaysTrue()","",.t.,,,,1000,,,,"NG625EXCC()",oPanelGet)
	oGet:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

	//Implementa Click da Direita
	If Len(aSMenu) > 0
		NGPOPUP(aSMenu,@oMenu)
		oPanelTot:bRClicked	:= { |o,x,y| oMenu:Activate(x,y,oPanelTot)}
		oPanelTop:bRClicked := { |o,x,y| oMenu:Activate(x,y,oPanelTot)}
		oPanelMid:bRClicked := { |o,x,y| oMenu:Activate(x,y,oPanelTot)}
	Endif

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpca:=1,if(oGet:TudoOk(),oDlg:End(),nOpca := 0)},{||oDlg:End(),nOpca := 0})

	If nOpcA == 1
		Begin Transaction

			NG625GRAV(cAlias,nOpca)
			//Processa Gatilhos
			EvalTrigger()

		End Transaction

	Endif

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³NG625GRAV ³ Autor ³ Deivys Joenck         ³ Data ³ 11/08/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Grava os dados na TNB                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MDTA625                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function NG625GRAV(cAlias,nOpcao)

	Local i, j
	Local nCODEPI := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "TNB_CODEPI" })

	//Coloca os deletados por primeiro
	ASORT(aCols,,, { |x, y| x[Len(aCols[n])] .and. !y[Len(aCols[n])] } )
	For i:=1 To Len(aCols)
		If !aCols[i][Len(aCols[i])] .AND. !Empty(aCols[i][nCODEPI])
			dbSelectArea("TNB")
			dbSetOrder(nIndTNB)
			If dbSeek(xFilial("TNB")+&(cCCodFun)+aCols[i][nCODEPI])
				RecLock("TNB",.F.)
				lAltera := .T.
			Else
				RecLock("TNB",.T.)
				lAltera := .F.
			Endif
			If !lSigaMdtps
				TNB->(&(cCCodTNB)) := &(cCCodFun)
			Else
				TNB->TNB_CODFUN := TOS->TOS_CODFUN
			Endif
			For j:=1 to FCount()
				If "_NOME"$Upper(FieldName(j)) .or. "_DESC"$Upper(FieldName(j)) .or. "_DESCFU"$Upper(FieldName(j));
					.or. "_CODFUN"$Upper(FieldName(j)) .or. "_CODPOS"$Upper(FieldName(j))
					Loop
				Endif

				If "_FILIAL"$Upper(FieldName(j))
					FieldPut(j, xFilial("TNB"))
				ElseIf "_CLIENT"$Upper(FieldName(j))
					FieldPut(j, SA1->A1_COD)
				ElseIf "_LOJA"$Upper(FieldName(j))
					FieldPut(j, SA1->A1_LOJA)
				Else
					If (nPos := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == AllTrim(Upper(FieldName(j))) })) > 0
						FieldPut(j, aCols[i][nPos])
					Endif
				Endif
			Next j
			MsUnlock("TNB")
		ElseIf !Empty(aCols[i][nCODEPI])
			dbSelectArea("TNB")
			dbSetOrder(nIndTNB)
			If dbSeek(xFilial("TNB")+&(cCCodFun)+aCols[i][nCODEPI])
				RecLock("TNB",.F.)
				dbDelete()
				MsUnlock("TNB")
			Endif
		Endif
	Next i

	dbSelectArea("TNB")
	dbSetOrder(nIndTNB)
	dbSeek(xFilial("TNB")+&(cCCodFun))
	While !eof() .and. xFilial("TNB") == TNB->TNB_FILIAL .and.;
		&(cCCodFun) == TNB->(&(cCCodTNB))

		If aSCAN(aCols,{|x| AllTrim(x[1]) == AllTrim(TNB->TNB_CODEPI)}) == 0
			RecLock("TNB",.F.,.T.)
			dbDelete()
			MsunLock("TNB")
		Endif
		dbSkip()
	End

	dbSelectArea(cAliasFun)

Return .T.
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³NG625LinOk³ Autor ³ Deivys Joenck         ³ Data ³ 11/08/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Critica se a linha digitada esta' Ok                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpTM = Objeto a ser verificado.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTNG200                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function NG625LinOk()

	Local f
	Local nCODEPI := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TNB_CODEPI"})

	If Len(aCols) == 1
		If Empty(aCols[1][nCODEPI]) .or. aCols[1][Len(aCols[1])]
			Return .T.
		Endif
	Endif
	//Percorre aCols
	For f:= 1 to Len(aCols)
		If !aCols[f][Len(aCols[f])]
			If f == n
				//VerIfica se os campos obrigatórios estão preenchidos
				If Empty(aCols[f][nCODEPI])
					//Mostra mensagem de Help
					Help(1," ","OBRIGAT2",,aHeader[nCODEPI][1],3,0)
					Return .F.
				Endif
			Endif
			//Verifica se é somente Linha
			If f <> n .and. !aCols[n][Len(aCols[n])]
				If aCols[f][nCODEPI] == aCols[n][nCODEPI] .and. !aCols[f][Len(aCols[f])]
					Help(" ",1,"JAEXISTINF")
					Return .F.
				Endif
			Endif
		Endif
	Next f

Return .T.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³D625CHK   ³ Autor ³ Deivys Joenck         ³ Data ³ 11/08/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Consiste a existencia de outro codigo na GetDados          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function D625CHK()

	Local xx := 0, npos, lRET := .T.
	Local nX

	nPOS := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TNB_CODEPI" })

	If nPOS > 0
	For nX := 1 to Len(aCOLS)
		If ( aCOLS[nX][nPOS] == aCOLS[n][nPOS] ) .AND. ( nx <> n ) .AND. !aCols[nX][Len(aCols[nX])]
			xx := xx + 1
		Endif
	Next
	Endif

	If xx > 0
	Help(" ",1,"JAEXISTINF")
	lRet := .f.
	Endif

Return lRET
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³NG625EXCC ³ Autor ³Denis hyroshi de Souza ³ Data ³ 29/09/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Valida exclusao do registro                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
//Funcao Desativada
Function NG625EXCC()

	Local aArea := GetArea()
	Local aAreaSRA := SRA->(GetArea())
	Local nPOS := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TNB_CODEPI" })
	Local nSizeCli := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
	Local nSizeLoj := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))
	Local nPerm	:= SuperGetMv("MV_NGEPICC",.F.,1)

	If nPerm == 2
		If lSigaMdtps

			Dbselectarea("SRA")
			Set Filter To SRA->RA_FILIAL + SubStr(SRA->RA_CC,1,nSizeCli+nSizeLoj) + SRA->RA_CODFUNC == xFilial("SRA") + &(cCCodFun)
			Dbsetorder(7)  //RA_FILIAL+RA_CODFUNC
			dbGoTop()
			While !eof()

				Dbselectarea("TNF")
				Dbsetorder(3)
				If Dbseek(xFilial("TNF")+SRA->RA_MAT+aCols[n,nPOS])
					If Substr(cTime625,1,7) <> Substr(Time(),1,7) .or. cEpie625 <> aCols[n,nPOS]
						MsgStop(STR0020+;  //"Esta informação não poderá ser excluída, o EPI consta como entregue para "
									STR0021,STR0014)  //"algum funcionário que pertence a esta função."  //"ATENÇÃO"
					Endif
					Dbselectarea("SRA")
					Set Filter To
					RestArea(aArea)
					RestArea(aAreaSRA)
					cTime625 := Time()
					cEpie625 := aCols[n,nPOS]
					Return .f.
				Endif

				Dbselectarea("SRA")
				Dbskip()
			End

			Dbselectarea("SRA")
			Set Filter To
			RestArea(aAreaSRA)

		Else

			Dbselectarea("SRA")
			Dbsetorder(7)
			Dbseek(xFilial("SRA")+&(cCCodFun))
			While !eof() .and. xFilial("SRA")+&(cCCodFun) == SRA->RA_FILIAL+SRA->RA_CODFUNC

				Dbselectarea("TNF")
				Dbsetorder(3)
				If Dbseek(xFilial("TNF")+SRA->RA_MAT+aCols[n,nPOS])
					If Substr(cTime625,1,7) <> Substr(Time(),1,7) .or. cEpie625 <> aCols[n,nPOS]
						MsgStop(STR0020+;  //"Este dado não poderá ser excluído, pois este Epi consta nos Epi's entregues "
									STR0021,STR0014)  //"de algum funcionário que pertence a esta função."  //"ATENÇÃO"
					Endif
					RestArea(aArea)
					cTime625 := Time()
					cEpie625 := aCols[n,nPOS]
					Return .f.
				Endif

				Dbselectarea("SRA")
				Dbskip()
			End

		Endif
	Endif

	RestArea(aArea)

Return .t.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ MenuDef  ³ Autor ³ Andre E. Perez Alvarez³ Data ³13/12/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Utilizacao de Menu Funcional.                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MDTA625                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Array com opcoes da rotina.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Parametros do array a Rotina:                               ³±±
±±³          ³1. Nome a aparecer no cabecalho                             ³±±
±±³          ³2. Nome da Rotina associada                                 ³±±
±±³          ³3. Reservado                                                ³±±
±±³          ³4. Tipo de Transa‡„o a ser efetuada:                        ³±±
±±³          ³		1 - Pesquisa e Posiciona em um Banco de Dados         ³±±
±±³          ³    2 - Simplesmente Mostra os Campos                       ³±±
±±³          ³    3 - Inclui registros no Bancos de Dados                 ³±±
±±³          ³    4 - Altera o registro corrente                          ³±±
±±³          ³    5 - Remove o registro corrente do Banco de Dados        ³±±
±±³          ³5. Nivel de acesso                                          ³±±
±±³          ³6. Habilita Menu Funcional                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MenuDef( lMdi )

	Local lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .t. , .f. )
	Local aRotina

	Default lMdi   := .T.

	If lSigaMdtps
		aRotina := { { STR0001,   "AxPesqui"  , 0 , 1},; //"Pesquisar"
					{ STR0002,   "NGCAD01"   , 0 , 2},; //"Visualizar"
					{ STR0022,   "MDT625FU"  , 0 , 4} } //"Funções"
	Else
		aRotina := { { STR0001, "AxPesqui", 0 , 1},; //"Pesquisar"
					{ STR0002, "NGCAD01", 0 , 2},; //"Visualizar"
					{ STR0003, "NGFUN625", 0 , 4},;//"EPIs"
					{ STR0044, "MDT625RPL", 0,4} } //"Copiar"
		If !lMdi .And. !lSigaMdtPS .And. AliasInDic("TY4") .And. ;
			SuperGetMv( "MV_NGMDTTR" , .F. , "2" ) == "1" .And. FindFunction( "MDTGERTRM" )

			aAdd( aRotina , { STR0045 , "MDTGERTRM" , 0 , 4 } )//"Treinamentos"

		EndIf

	Endif

Return aRotina
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MDT625EPI ³ Autor ³Andre Perez Alvarez    ³ Data ³ 18/07/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Mostra um markbrowse com todos os EPI's para o usuario     ³±±
±±³          ³ poder seleciona-los de uma soh vez.                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MDT625EPI(cTipoEPI, lSX5)

	Local nCnt2 := 0, x, y, xx
	Local aArea := GetArea()
	Local aAreaSB1 := SB1->(GetArea())
	Local nPos1,nPos2
	Local oDlgF,oFont
	Local oMARK1
	Local nSizeSB1 := Len(SB1->B1_DESC)
	Local nOld
	Local nSizeCod := If((TAMSX3("B1_COD")[1]) < 1,20,(TAMSX3("B1_COD")[1]))
	Local cFiltro  := "", cRetPnt := ""

	//Variaveis de Busca do MarkBrowse
	Local cKeyEPI := "", cResultEPI := Space(60)
	Local aEPICombo := {STR0029,STR0006,STR0030}//"EPI"##"Descrição"##"Marcados"
	Local oEPICombo
	Local oPanelEpi
	Local oButtonEPI
	Local oGetEPI
	Local oTempEPI
	Private cTRBEPI := GetNextAlias()

	Private cMarca := GetMark()
	Private nUsed
	Private lGrava := .f.
	Private nColumn
	Private nContador := 0
	Private OldCols := aCLONE(aCols)
	Private nVazio := 0

	nPOS1 := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TNB_CODEPI"})
	nPOS2 := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TNB_DESC"})

	lInverte:= .f.

	lQuery := .t.

	dbSelectArea("TNB")

	aDBF := {}
	AADD(aDBF,{ "B1_OK"   , "C" ,Len(cMarca), 0 })
	AADD(aDBF,{ "B1_COD"  , "C" ,nSizeCod   , 0 })
	AADD(aDBF,{ "B1_DESC" , "C" ,nSizeSB1   , 0 })

	aTRB1 := {}
	AADD(aTRB1,{ "B1_OK"  ,NIL," ", })
	AADD(aTRB1,{ "B1_COD" ,NIL,STR0011            ,})  //"Codigo"
	AADD(aTRB1,{ "B1_DESC",NIL,STR0012            ,})  //"Descrição do Epi"

	oTempEPI := FWTemporaryTable():New( cTRBEPI, aDBF )
	oTempEPI:AddIndex( "1", {"B1_COD"} )
	oTempEPI:AddIndex( "2", {"B1_DESC"} )
	oTempEPI:AddIndex( "3", {"B1_OK"} )
	oTempEPI:Create()

	dbSelectArea(cTRBEPI)
	Processa({|lEnd| fBuscaReg( cTRBEPI,cTipoEPI )})

	Dbselectarea(cTRBEPI)
	Dbgotop()
	If (cTRBEPI)->(Reccount()) <= 0
		//Deleta o arquivo temporario fisicamente
		oTempEPI:Delete()
		RestArea(aAreaSB1)
		RestArea(aArea)
		lRefresh := .t.
		Msgstop(STR0013,STR0014)  //"Não existem EPI's cadastrados." //"ATENÇÃO"
		Return .t.
	Endif

	nOpt := 2
	DEFINE FONT oFont NAME "Arial" SIZE 0,-12
	DEFINE MSDIALOG oDlgF TITLE OemToAnsi("EPI's") From 150,0 To 750,550 PIXEL OF oMainWnd

	oPanelEpi		:= TPanel():New(,,,oDlgF,,,,,RGB(255,255,255),,, .F., .F. )
	oPanelEpi:Align	:= CONTROL_ALIGN_ALLCLIENT

	@ 8,5 TO 40,272 PIXEL OF oPanelEpi
	@ 15,15 SAY STR0015 SIZE 200,10 of oPanelEpi PIXEL FONT oFont //"Estes são os EPI's cadastrados no sistema."
	@ 25,15 SAY STR0016 SIZE 200,10 of oPanelEpi PIXEL FONT oFont //"Selecione aqueles que são necessários a esta função."

	//Campo combo de indice para busca
	oEPICombo := TComboBox():New( 45, 5, {|u| if( Pcount()>0, cKeyEPI:= u, cKeyEPI ) }, aEPICombo,;
												190, 10, oPanelEpi, ,{|| OrdMarkEPI( @oEPICombo , @oGetEPI, @oMark1 ) },/*bValid*/,/*nClrBack*/,CLR_BLACK,;
												.T., /*oFont*/, , ,/*bWhen*/, , , , , cKeyEPI, /*cLabelText*/ ,/*nLabelPos*/, /*oLabelFont*/, CLR_BLACK  )
	//Campo de busca
	oGetEPI := TGet():New( 58, 5, {|u| if( Pcount()>0, cResultEPI:= u, cResultEPI ) }, oPanelEpi, 190, 7, "@!",;
											/*bValid*/, CLR_BLACK, /*nClrBack*/, /*oFont*/, , , .T., , , {|| oEPICombo:nAt <> 3 },;
											, , /*bChange*/,/*lReadOnly*/,/*lPassword*/ , , cResultEPI, , , , /*lHasButton*/,;
											/*lNoButton*/, /*cLabelText*/ ,/*nLabelPos*/, /*oLabelFont*/, /*nLabelColor*/  )
	//Botão de pesquisa
	oButtonEPI := TButton():New( 44, 200, STR0001, oPanelEpi, {|| If(oEPICombo:nAt <> 3, fBusEPI625( @oEPICombo , @oGetEPI, @oMARK1 ), .T.) },;
												73, 12,	, /*oFont*/, , .T., , , , {|| oEPICombo:nAt <> 3  }, , )//Pesquisar

	oMARK1:= MsSelect():NEW(cTRBEPI,"B1_OK",,aTRB1,@lINVERTE,@cMARCA,{73,5,267,272},,,oPanelEpi)
	oMARK1:bMARK               := {|| MDT625MK(cMarca, lInverte, @oEPICombo, @oMark1)}
	oMARK1:oBROWSE:lHASMARK    := .T.
	oMARK1:oBROWSE:lCANALLMARK := .T.
	oMARK1:oBROWSE:bALLMARK    := {|| MDTA625INV(cMarca) }
	ACTIVATE MSDIALOG oDlgF ON INIT EnchoiceBar(oDlgF,{|| nOpt := 1,oDlgf:End()},{|| nOpt := 2,oDlgf:End()}) Centered

	If nOpt == 1
		Processa({|lEnd| MDT625CPY()})
	EndIf

	//Deleta o arquivo temporario fisicamente
	oTempEPI:Delete()

	RestArea(aAreaSB1)
	RestArea(aArea)
	lRefresh := .t.

Return
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Fun‡…o   ³MDT625MK  ³ Autor ³Andre Perez Alvarez    ³ Data ³ 19/07/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descri‡…o³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function MDT625MK(cMarca,lInverte, oCombo, oMark)

	Local nIndEPI

	nIndEPI := oCombo:nAt

	If nIndEPI == 3 // Ordena o marcado quando for o indice 3 - Marcado
		dbSelectArea(cTRBEPI)
		dbSetOrder(nIndEPI)
		oMark:oBrowse:Refresh()//Atualiza tela do Mark, para exibir a ordem
	EndIf

Return
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Fun‡…o   ³MDTA625INV³ Autor ³Andre Perez Alvarez    ³ Data ³ 19/07/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descri‡…o³ Inverte a marcacao do browse                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function MDTA625INV(cMarca)

	Local aArea := (cTRBEPI)->(GetArea())

	Dbselectarea(cTRBEPI)
	dbSetOrder(1)
	dbGoTop()
	While !Eof()
		(cTRBEPI)->B1_OK := IF(Empty((cTRBEPI)->B1_OK),cMARCA,Space(Len(cMARCA)))
		dbSelectArea(cTRBEPI)
		Dbskip()
	End

	RestArea(aArea)
	(cTRBEPI)->( dbGoTop() )

Return .t.
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Fun‡…o   ³MDT625CPY³ Autor ³Andre Perez Alvarez    ³ Data ³ 20/07/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descri‡…o³ Copia os EPI'selecionados no markbrowse para o a GetDados  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Static Function MDT625CPY()

	Local cCampo  := ''
	Local cRelac  := ''
	Local nCps    := 0
	Local aColsAux  := BlankGetd(aHeader)[ 1 ]

	aCols := {}

	Dbselectarea(cTRBEPI)
	ProcRegua((cTRBEPI)->(Reccount()))
	Set Filter To !Empty((cTRBEPI)->B1_OK)
	Dbgotop()
	While (cTRBEPI)->(!EoF())

		IncProc()

		lGrava := .T.
		If ( aSCAN(aCols,{|x| x[1] == (cTRBEPI)->B1_COD } )  > 0 )
			lGrava := .F.
		Endif

		If lGrava

			If Len( aCols ) <> 1 .Or. !Empty(aCols[ Len( aCols ), 1 ])
				aAdd( aCols , aClone( aColsAux ) )
			EndIf

			For nCps := 1 To Len(aHeader)

				cCampo  := aHeader[ nCps, 2 ]
				cRelac  := GetSx3Cache( cCampo, "X3_RELACAO" )

				If Trim(cCampo) = "TNB_CODEPI"
					aCols[ Len( aCols ) , nCps ] := (cTRBEPI)->B1_COD
				ElseIf Trim(cCampo) = "TNB_DESC"
					aCols[ Len( aCols ) , nCps ] := (cTRBEPI)->B1_DESC
				ElseIf ExistIni(cCampo)
					aCols[ Len( aCols ) , nCps ] := InitPad(cRelac)
				Endif

			Next nCps

		Endif

		(cTRBEPI)->(dbSkip())

	EndDo

	nPosCod := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TNB_CODEPI"})

	If Len(aCols) == 0
		aCols := BlankGetD(aHeader)
	ElseIf (cTRBEPI)->(Reccount()) > 0
		aSort(aCols,,,{|x,y| If(Empty(x[1]), x[1] > y[1], x[1] < y[1] ) })
	EndIf

Return .T.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ MDT090TAR  ³ Autor ³ Andre Perez Alvarez     ³ Data ³24/09/07  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta um browse com as funcoes do funcionario                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MDT625FU()                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³  SIGAMDT                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function MDT625FU()

	Local aArea	:= GetArea()
	Local oldROTINA := aCLONE(aROTINA)
	Local oldCad := cCadastro
	cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA

	Private cAliasFun := "TOS"
	Private cCCodFun  := "TOS->TOS_CLIENT+TOS->TOS_LOJA+TOS->TOS_CODFUN"
	Private cDescFun  := "TOS->TOS_DESFUN"
	Private cCCodTNB  := "TNB_CLIENT+TNB_LOJA+TNB_CODFUN"
	Private nIndTNB   := NGRETORDEM("TNB","TNB_FILIAL+TNB_CLIENT+TNB_LOJA+TNB_CODFUN+TNB_CODEPI",.T.)
	Private cCpo_SRJ  := "TOS->TOS_CODFUN"

	nIndTNB := If(nIndTNB == 0, 4, nIndTNB) //Indice Prestador Serviço

	aQryTNB := {{"TNB_CLIENT","TOS->TOS_CLIENT"},;
				{"TNB_LOJA"  ,"TOS->TOS_LOJA"  },;
				{"TNB_CODFUN","TOS->TOS_CODFUN"}}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define Array contendo as Rotinas admina executar do programa      ³
	//³ ----------- Elementos contidos por dimensao ------------     ³
	//³ 1. Nome a aparecer no cabecalho                              ³
	//³ 2. Nome da Rotina associada                                  ³
	//³ 3. Usado pela rotina                                         ³
	//³ 4. Tipo de Transa‡„o a ser efetuada                          ³
	//³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
	//³    2 - Simplesmente Mostra os Campos                         ³
	//³    3 - Inclui registros no Bancos de Dados                   ³
	//³    4 - Altera o registro corrente                            ³
	//³    5 - Remove o registro corrente do Banco de Dados          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aRotina := { { STR0001, "AxPesqui", 0 , 1},; //"Pesquisar"
				{ STR0002, "NGCAD01", 0 , 2},; //"Visualizar"
				{ STR0003, "NGFUN625", 0 , 4}}  //"EPIs"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define o cabecalho da tela de atualizacoes                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Private cCadastro := OemtoAnsi(STR0004) //"EPIs Relacionados Funcao"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Endereca a funcao de BROWSE                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DbSelectArea(cAliasFun)
	Set Filter To TOS->(TOS_CLIENT+TOS_LOJA) == cCliMdtps
	DbSetOrder(2)  //TOS_FILIAL+TOS_CLIENT+TOS_LOJA+TOS_CODFUN
	mBrowse( 6, 1,22,75,cAliasFun)

	DbSelectArea("TOS")
	Set Filter To

	aROTINA := aCLONE(oldROTINA)
	RestArea(aArea)
	cCadastro := oldCad

Return
//------------------------------------------------------
/*/{Protheus.doc} OrdMarkEPI()
Função de ordenação para o MarkBrose conforme selecionado
no ComboBox

oCombo - Objeto do comboBox
oGet   - Objeto do campo Get
oMark  - Objeto do MarkBrowse

@author  Guilherme Benkendorf
@since   26/12/2013
@version MP11
@return  Logico
/*/
//------------------------------------------------------
Static Function OrdMarkEPI( oCombo, oGet, oMark )

	Local nIndEPI

	nIndEPI := oCombo:nAt
	//Ordena TRB conforme selecionado no combo
	dbSelectArea(cTRBEPI)
	dbSetOrder(nIndEPI)
	dbGoTop()
	//Caso for marcação, limpa Get
	If nIndEPI == 3 //B1_OK
		oGet:cText	:= Space(60)
	EndIf

	oMark:oBrowse:Refresh()

Return .T.
//------------------------------------------------------
/*/{Protheus.doc} fBusEPI625()
Função de busca do EPI para o Mark Browse

oCombo - Objeto do comboBox
oGet   - Objeto do campo Get
oMark  - Objeto do MarkBrowse

@author  Guilherme Benkendorf
@since   26/12/2013
@version MP11
@return  Logico
/*/
//------------------------------------------------------
Static Function fBusEPI625( oCombo , oGet , oMark )

	Local lRet
	Local nInd
	Local cResult

	lRet    := .T.
	nInd    := oCombo:nAt
	cResult := AllTrim(oGet:cText)

	dbSelectArea(cTRBEPI)
	dbSetOrder(nInd)

	If ! ( lRet := dbSeek( cResult ) )
		MsgInfo( STR0031 , STR0014)//"Valor não encontrado."##"ATENÇÃO"
		(cTRBEPI)->(dbGoTop())
	Else
		oMark:oBrowse:SetFocus()//Se encontra resultado, focaliza tela do mark
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} fBuscaReg
Funcao para retornar todos os Ambientes

@param cAliasTRB - Alias usado na TRB
@param cTipoEPI - Tipo do EPI

@author Guilherme Freudenburg
@since 11/11/2014
@return
/*/
//---------------------------------------------------------------------
Static Function fBuscaReg( cAliasTRB ,cTipoEPI )

	Local nPosCod := 1
	Local nIndex  := 1
	Local cFiltro := "SB1->B1_MSBLQL <> '1'"
	Local cWhile  := "SB1->B1_FILIAL == xFilial('SB1')"
	Local aArea   := GetArea()
	Local aColsOK := aClone(aCols)
	Local aHeadOk := aClone(aHeader)

	If !Empty( cTipoEPI ) .AND. ( lSX5 ) .and. !ExistBlock("MDTA6251")
		//-----------------------------------------------------------------------------
		// O tipo definido no parametro deve estar cadastrado na tabela generica "02"
		// (que contem os tipos de produtos).
		//-----------------------------------------------------------------------------
		cFiltro += " .And. SB1->B1_TIPO $ '"+cTipoEPI+"'"
	Else
		//--------------------------------------------------------
		// Se o parametro nao estiver configurado,
		// OU se o valor dele nao existir na tabela generica "02",
		// considera todos os produtos como sendo EPI.
		//--------------------------------------------------------
		If ExistBlock("MDTA6251")
			cRetPnt := ExecBlock("MDTA6251",.F.,.F.)
			If ValType("cRetPnt") == "C" .and. !Empty(cRetPnt)
				If At(".AND.", Substr(Upper(cRetPnt),1,6)) == 0
					cFiltro += " .And. "
				Endif
				cFiltro += cRetPnt
			Endif
		Endif
	Endif

	nPosCod	:= aSCAN( aHeadOk, { |x| Trim( Upper(x[2]) ) == "TNB_CODEPI"})

	dbSelectArea( "SB1" )
	dbSetOrder( nIndex )
	If dbSeek( xFilial("SB1") )
		While SB1->(!Eof()) .AND. &( cWhile )

			If (!&cFiltro)
				SB1->(dbSkip())
				Loop
			Endif

			dbSelectArea( "TN3" )
			dbSetOrder( 2 )
			If !dbSeek( xFilial( "TN3" ) + SB1->B1_COD )
				dbSelectArea( "TL0" )
				dbSetOrder( 2 )
				If !dbSeek( xFilial( "TL0" ) + SB1->B1_COD )
					SB1->(dbSkip())
					Loop
				EndIf
			EndIf
			RecLock( cAliasTRB , .T. )
			(cAliasTRB)->B1_OK		:= If( aScan( aColsOk , {|x| x[nPosCod] == SB1->B1_COD } ) > 0, cMarca , " " )
			(cAliasTRB)->B1_COD		:= SB1->B1_COD
			(cAliasTRB)->B1_DESC		:= SB1->B1_DESC
			(cAliasTRB)->(MsUnLock())
			SB1->(dbSkip())
		End
	EndIf

	RestArea(aArea)

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT625RPL
Replica os EPI's de uma função para as funções selecionadas

@return Sempre nulo

@sample MDT625RPL()

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Function MDT625RPL()

	Local nCodEPI, nFor
	Local aNoFields := {}
	Local aArea		:= GetArea()//Salva a Area Atual

	//Variaveis para montar TRB
	Local cAliasTRB	:= GetNextAlias()
	Local aDBF, aTRB, aDescIdx
	Local oTempTRB1

	//Variaveis da Montagem do MarkBrowse
	Local lOK := .F.
	Local lInverte, lRet

	//Definicoes de Objetos
	Local oDialog
	Local oMark

	//Variaveis do aHeader e aCols fictício
	Private aHeader, aCols

	//Variaveis Privadas
	Private cMarca	:= GetMark()

	//Variaveis da Pesquisa
	Private cPesquisar := Space( 200 )//Valor a ser pesquisado
	Private cCbxPesq   := ""
	Private aCbxPesq //ComboBox com indices de pesquisa
	Private oBtnPesq, oPesquisar//Botao de Pesquisa e Campo para Pesquisa
	Private oCbxPesq //ComboBox de Pesquisa

	//Cria um aCols e aHeader temporário para cópia
	aAdd( aNoFields , "TNB_CODFUN" )
	aAdd( aNoFields , "TNB_CODPOS" )
	aAdd( aNoFields , "TNB_DESCFU" )

	If Len( aQryTNB ) > 0
		cTmpQuery := ""

		For nFor := 1 To Len( aQryTNB )
			cTmpQuery += " AND TNB." + aQryTNB[ nFor , 1 ] + " = '" + &( aQryTNB[ nFor , 2 ] ) + "'"
		Next nFor
		cQuery := "SELECT * FROM " + RetSqlName( "TNB" ) + " TNB WHERE TNB.TNB_FILIAL = '" + xFilial( "TNB" ) + "' AND TNB.D_E_L_E_T_ <> '*' " + cTmpQuery
	Else
		cQuery := "SELECT * FROM " + RetSqlName( "TNB" ) + " TNB WHERE TNB.TNB_FILIAL = '" + xFilial( "TNB" ) + "' AND TNB." + cCCodTNB + " = '" + &( cCCodFun ) + "'" + ;
					" AND TNB.D_E_L_E_T_ <> '*'"
	Endif
	FillGetDados( 4 , "TNB" , nIndTNB , xFilial( "TNB" ) + &( cCCodFun ) , { | | cCCodTNB } , { | | .T. } , aNoFields , , , cQuery )
	nCodEPI := aScan( aHeader , { | x | AllTrim( Upper( x[ 2 ] ) ) == "TNB_CODEPI" } )

	//Inicia criação do Mark
	lInverte := .F.

	//Valores e Caracteristicas da TRB
	aDBF		:= {}
	aTRB		:= {}
	aDescIdx	:= {}

	aAdd( aDBF , { "OK"     , "C" , 02 						, 0 } )
	aAdd( aDBF , { "CODIGO" , "C" , TAMSX3( "RJ_FUNCAO" )[1], 0 } )
	aAdd( aDBF , { "DESCRI" , "C" , TAMSX3( "RJ_DESC" )[1]	, 0 } )

	aAdd( aTRB , { "OK"     , NIL , " "	  	 				, 	} )
	aAdd( aTRB , { "CODIGO" , NIL , STR0011  				, 	} ) //"Código"
	aAdd( aTRB , { "DESCRI" , NIL , STR0006				, 	} ) //"Descrição"

	aAdd( aDescIdx , STR0011 + "+" + STR0006 ) //"Código"###"Descrição"
	aAdd( aDescIdx , STR0006 + "+" + STR0011 ) //"Descrição"###"Código"
	aAdd( aDescIdx , STR0030 ) //"Marcados"

	//Cria TRB
	oTempTRB1 := FWTemporaryTable():New( cAliasTRB, aDBF )
	oTempTRB1:AddIndex( "1", {"CODIGO","DESCRI"} )
	oTempTRB1:AddIndex( "2", {"DESCRI","CODIGO"} )
	oTempTRB1:AddIndex( "3", {"OK"} )
	oTempTRB1:Create()

	Processa( { | lEnd | fBuscaFun( @cAliasTRB ) } , STR0034 , STR0035 ) //"Buscando Registros"###"Aguarde"

	dbSelectArea( cAliasTRB )
	dbGoTop()
	If ( cAliasTRB )->(Reccount()) <= 0
		lRefresh := .T.
		Msgstop( STR0036 , STR0037 ) //"Não existem registros cadastrados."###"ATENÇÃO"
	ElseIf Len( aCols ) == 1 .And. Empty( aCols[ 1 , nCodEPI ] )
		lRefresh := .T.
		Msgstop( STR0038 , STR0037 ) //"Não existem EPi's a serem copiados."###"ATENÇÃO"
	Else

		DEFINE MSDIALOG oDialog TITLE OemToAnsi( STR0039 ) From 64,160 To 580,736 OF oMainWnd Pixel //"Cópia de EPI's"

			//--- DESCRICAO ( TOPO )
			oPanelDLG := TPanel():New( 0 , 0 , , oDialog , , .T. , .F. , , , 0 , 0 , .F. , .F. )
			oPanelDLG:Align := CONTROL_ALIGN_ALLCLIENT

				oPanel := TPanel():New( 0 , 0 , , oPanelDLG , , .T. , .F. , , , 0 , 55 , .F. , .F. )
				oPanel:Align := CONTROL_ALIGN_TOP

					@ 8,9.6 TO 45,280 OF oPanel PIXEL

					TSay():New( 19 , 12 , { | | OemtoAnsi( STR0040 ) } , oPanel , , , .F. , .F. , .F. , .T. , CLR_BLACK , CLR_WHITE , 200 , 010 ) //"Estes são as funções cadastradas no sistema."
					TSay():New( 29 , 12 , { | | OemtoAnsi( STR0041 ) } , oPanel , , , .F. , .F. , .F. , .T. , CLR_BLACK , CLR_WHITE , 200 , 010 ) //"Selecione aqueles que devem receber o mesmo EPI."

				//--- PESQUISAR
				//Define as opcoes de Pesquisa
				aCbxPesq := aClone( aDescIdx )
				cCbxPesq := aCbxPesq[ 1 ]

				oPnlPesq := TPanel():New( 01 , 01 , , oPanelDLG , , , , CLR_BLACK , CLR_WHITE , 50 , 30 , .T. , .T. )
				oPnlPesq:Align := CONTROL_ALIGN_ALLCLIENT

					oCbxPesq := TComboBox():New( 002 , 002 , { | u | If( PCount() > 0 , cCbxPesq := u , cCbxPesq ) } , ;
															aCbxPesq , 200 , 08 , oPnlPesq , , { | | } ;
															, , , , .T. , , , , , , , , , "cCbxPesq" )
						oCbxPesq:bChange := { | | fSetIndex( cAliasTRB , aCbxPesq , @cPesquisar , oMark ) }

					oPesquisar := TGet():New( 015 , 002 , { | u | If( PCount() > 0 , cPesquisar := u , cPesquisar ) } , oPnlPesq , 200 , 008 , "" , { | | .T. } , CLR_BLACK , CLR_WHITE , ,;
							 				.F. , , .T. /*lPixel*/ , , .F. , { | | cCbxPesq <> aCbxPesq[ Len( aCbxPesq ) ] }/*bWhen*/ , .F. , .F. , , .F. /*lReadOnly*/ , .F. , "" , "cPesquisar" , , , , .F. /*lHasButton*/ )

					oBtnPesq := TButton():New( 002 , 220 , STR0001 , oPnlPesq , { | | fPesqTRB( cAliasTRB , oMark ) } , ; //"Pesquisar"
															70 , 10 , , , .F. , .T. , .F. , , .F. , , , .F. )

				oMark := MsSelect():New( cAliasTRB , "OK" , , aTRB , @lInverte , @cMarca , { 120 , 5 , 254 , 281 } )
				oMark:oBrowse:lHasMark		:= .T.
				oMark:oBrowse:lCanAllMark	:= .T.
				oMark:oBrowse:bAllMark		:= { | | fInverte( cMarca , cAliasTRB , oMark , .T. ) }//Funcao inverte marcadores
				oMark:bMark	   				:= { | | fInverte( cMarca , cAliasTRB , oMark ) }//Funcao inverte marcadores
				oMark:oBrowse:Align			:= CONTROL_ALIGN_BOTTOM

		ACTIVATE MSDIALOG oDialog ON INIT EnchoiceBar(oDialog,{|| lOK := .T. ,oDialog:End()},{|| lOk := .F.,oDialog:End()}) CENTERED

		If lOK
			fGravCopy( cAliasTRB )
		Endif
	Endif

	oTempTRB1:Delete()

	RestArea( aArea )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fSetIndex
Seta o indice para pesquisa

@return

@param cAliasTRB	- Alias do TRB ( Obrigatório )
@param aCbxPesq		- Indices de pesquisa do markbrowse. ( Obrigatório )
@param cPesquisar	- Valor da Pesquisa ( Obrigatório )
@param oMark		- Objeto do MarkBrowse ( Obrigatório )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fSetIndex( cAliasTRB , aCbxPesq , cPesquisar , oMark )

	Local nIndice := fRetInd( aCbxPesq ) // Retorna numero do indice selecionado

	// Efetua ordenacao do alias do markbrowse, conforme indice selecionado
	dbSelectArea( cAliasTRB )
	dbSetOrder( nIndice )
	dbGoTop()

	// Se o indice selecionado for o ultimo [Marcados]
	If nIndice == Len( aCbxPesq )
		cPesquisar := Space( Len( cPesquisar ) ) // Limpa campo de pesquisa
		oPesquisar:Disable()              // Desabilita campo de pesquisa
		oBtnPesq:Disable()              // Desabilita botao de pesquisa
		oMark:oBrowse:SetFocus()     // Define foco no markbrowse
	Else
		oPesquisar:Enable()               // Habilita campo de pesquisa
		oBtnPesq:Enable()               // Habilita botao de pesquisa
		oBtnPesq:SetFocus()             // Define foco no campo de pesquisa
	Endif

	oMark:oBrowse:Refresh()

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fRetInd
Retorna o indice, em numero, do item selecionado no combobox

@return nIndice - Retorna o valor do Indice

@param aIndMrk - Indices de pesquisa do markbrowse. ( Obrigatório )

@sample fRetInd( {} )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fRetInd( aIndMrk )

	Local nIndice := aScan( aIndMrk , { | x | AllTrim( x ) == AllTrim( cCbxPesq ) } )

	// Se o indice nao foi encontrado nos indices pre-definidos, apresenta mensagem
	If nIndice == 0
		ShowHelpDlg( STR0037 ,	{ STR0042 } , 1 , ; //"Atenção"###"Índice não encontrado."
									{ STR0043 } , 1 ) //"Contate o administrador do sistema."
		nIndice := 1
	Endif

Return nIndice
//---------------------------------------------------------------------
/*/{Protheus.doc} fBuscaFun
Realiza a busca dos registros das funções para alimentar o TRB

@return Nil

@param cAliasTRB Caracter Indica o Alias do TRB

@sample fBuscaFun( 'TRB' )

@author Jackson Machado
@since 18/07/2013
/*/
//---------------------------------------------------------------------
Static Function fBuscaFun( cAliasTRB )

	Local cFunAtu	:= &( cCCodFun )
	Local aAreaTab	:= ( cAliasFun )->( GetArea() )

	dbSelectArea( cAliasFun )
	dbSetOrder( 1 )
	dbGoTop()
	While ( cAliasFun )->( !Eof() )
		If cFunAtu <> &( cCCodFun )
			RecLock( cAliasTRB , .T. )
			( cAliasTRB )->OK		:= Space( 2 )
			( cAliasTRB )->CODIGO	:= &( cCCodFun )
			( cAliasTRB )->DESCRI	:= &( cDescFun )
			( cAliasTRB )->( MsUnLock() )
		EndIf
		( cAliasFun )->( dbSkip() )
	End
	RestArea( aAreaTab )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fGravCopy
Grava EPI's de acordo com a cópia feita

@return Sempre verdadeiro

@param cAliasTRB Caracter Indica o Alias do TRB

@sample fGravCopy( 'TRB' )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fGravCopy( cAliasTRB )

	Local nPos
	Local nCodEPI := aScan( aHeader , { | x | AllTrim( Upper( x[ 2 ] ) ) == "TNB_CODEPI" } )
	Local j, nX
	Local cFunAtu	:= &( cCCodFun )

	dbSelectArea( cAliasTRB )
	dbSetOrder( 1 )
	dbGoTop()
	While ( cAliasTRB )->( !Eof() )
		If !Empty( ( cAliasTRB )->OK )
			For nX := 1 To Len( aCols )
				dbSelectArea( "TNB" )
				dbSetOrder( nIndTNB )
				If dbSeek( xFilial( "TNB" ) + ( cAliasTRB )->CODIGO + aCols[ nX , nCodEPI ] )
					RecLock( "TNB" , .F. )
				Else
					RecLock( "TNB" , .T. )
				Endif
				TNB->( &( cCCodTNB ) ) := ( cAliasTRB )->CODIGO
				For j := 1 to FCount()
					If "_NOME" $ Upper( FieldName( j ) ) .Or. ;
						"_DESC" $ Upper( FieldName( j ) ) .Or. ;
						"_DESCFU" $ Upper( FieldName( j ) ) .Or. ;
						"_CODFUN" $ Upper( FieldName( j ) ) .Or. ;
						"_CODPOS" $ Upper( FieldName( j ) )
						Loop
					Endif

					If "_FILIAL" $ Upper( FieldName( j ) )
						FieldPut( j , xFilial( "TNB" ) )
					Else
						If ( nPos := aScan( aHeader , { | x | AllTrim( Upper( x[ 2 ] ) ) == AllTrim( Upper( FieldName( j ) ) ) } ) ) > 0
							FieldPut( j , aCols[ nX , nPos ] )
						Endif
					Endif
				Next j
				TNB->( MsUnlock() )
			Next nX

			//Deleta os EPIs da Função, para inclusão dos novos
			dbSelectArea( "TNB" )
			dbSetOrder( nIndTNB )
			If dbSeek( xFilial( "TNB" ) + ( cAliasTRB )->CODIGO )
				While !Eof() .And. xFilial( "TNB" ) == TNB->TNB_FILIAL .And. ( cAliasTRB )->CODIGO == TNB->TNB_CODFUN
					If aScan( aCols , { | x | x[ nCodEPI ] == TNB->TNB_CODEPI .AND. !x[ Len( x ) ] } ) == 0
						RecLock( "TNB" , .F. )
						TNB->( dbDelete() )
						TNB->( MsUnlock() )
					Endif
					dbSelectArea( "TNB" )
					TNB->( dbSkip() )
				End
			EndIf

		EndIf
		( cAliasTRB )->( dbSkip() )
	End

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} fInverte
Inverte as marcacoes ( bAllMark )

@return Nil

@param cMarca 		- Valor da marca do TRB ( Obrigatório )
@param cAliasTRB	- Alias do TRB ( Obrigatório )
@param oMark		- Objeto do MarkBrowse ( Obrigatório )
@param lAll			- Indica se eh AllMark

@sample fInverte( "E" , "TRB" )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fInverte( cMarca , cAliasTRB , oMark , lAll )

	Local aArea := {}

	Default lAll := .F.

	If lAll
		aArea := GetArea()

		dbSelectArea( cAliasTRB )
		dbGoTop()
		While ( cAliasTRB )->( !Eof() )
			( cAliasTRB )->OK := IF( Empty( ( cAliasTRB )->OK ) , cMarca , Space( Len( cMarca ) ) )
			(cAliasTRB)->( dbskip() )
		End

		RestArea( aArea )
	EndIf

	// Atualiza markbrowse
	oMark:oBrowse:Refresh()

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} fPesqTRB
Funcao de Pesquisar no Browse.

@samples fPesqTRB()

@return Sempre verdadeiro

@param cAliasTRB	- Alias do MarkBrowse ( Obrigatório )
@param oMark 		- Objeto do MarkBrowse ( Obrigatório )

@author Jackson Machado
@since 07/08/2015
/*/
//---------------------------------------------------------------------
Static Function fPesqTRB( cAliasTRB , oMark )

	Local nRecNoAtu := 1//Variavel para salvar o recno
	Local lRet		:= .T.

	//Posiciona no TRB e salva o recno
	dbSelectArea( cAliasTRB )
	nRecNoAtu := RecNo()

	dbSelectArea( cAliasTRB )
	If dbSeek( AllTrim( cPesquisar ) )
		//Caso exista a pesquisa, posiciona
		oMark:oBrowse:SetFocus()
	Else
		//Caso nao exista, retorna ao primeiro recno e exibe mensagem
		dbGoTo( nRecNoAtu )
		ApMsgInfo( STR0031 , STR0037 ) //"Valor não encontrado."###"Atenção"
		oPesquisar:SetFocus()
		lRet := .F.
	EndIf

	// Atualiza markbrowse
	oMark:oBrowse:Refresh(.T.)

Return lRet