#INCLUDE 'mnta657.ch'
#Include 'TOTVS.ch'
#INCLUDE 'FWMVCDEF.CH'

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA657
Cria uma nova rotina chamada Registo de Saída de Combustível

@type Function

@author João Ricardo Santini Zandoná
@since 21/09/2021

@return Nil  
/*/ 
//------------------------------------------------------------------------------
Function MNTA657()

    Local aNGBeginPrm := {}
    Local oBrowse     := FWMBrowse():New()
    
    // Variáveis private usadas na consulta padrão NGM, campo TTH_TANQUE, função MNT616FILXB()
    Private cPosto    := TamSx3( 'TTH_POSTO' )[1]
    Private cLoja     := TamSx3( 'TTH_LOJA' )[1]
    Private cTanque   := TamSx3( 'TTH_TANQUE' )[1]

    If !FindFunction( 'MNTAmIIn' ) .Or. MNTAmIIn( 95 )

        aNGBeginPrm := NGBeginPrm()

        oBrowse:SetAlias( 'TTH' )         // Alias da tabela utilizada
        oBrowse:SetMenuDef( 'MNTA657' )   // Nome do fonte onde esta a função MenuDef
        oBrowse:SetDescription( STR0001 ) // 'Registo de Saída de Combustível'	

        oBrowse:Activate()

        NGReturnPrm( aNGBeginPrm )

    EndIf

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Inicializa o MenuDef com as suas opções

@type Function

@author João Ricardo Santini ZAndoná
@since 21/09/2021

@return FWMVCMenu() Vai retornar as opções padrão do menu, como 'Incluir', 
'Alterar', e 'Excluir'
/*/
//------------------------------------------------------------------------------
Static Function MenuDef()

Return FWMVCMenu( 'MNTA657' )

//------------------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Inicializa o ModelDef com as suas opções
 
@type Function

@author João Ricardo Santini ZAndoná
@since 21/09/2021

@return Objeto, leva as opções que Foram carregadas do ModelDef
/*/
//------------------------------------------------------------------------------

Static Function ModelDef()

	Local oModel
    //O quarto parâmetro do FWFormStruct define que o modelo carregue também campos setados como não usados.
	Local oStructTTH := FWFormStruct( 1,'TTH',,.F. )
    
	// Cria o objeto do Modelo de Dados
	oModel := MPFormModel():New( 'MNTA657', /*bPre*/, {|oModel|MNT657TDOK( oModel )}, {|oModel|CommitInfo( oModel )}, /*bCancel*/ )

	// Adiciona ao modelo uma estrutura de formulário de edição por campo
	oModel:AddFields( 'MNTA657_TTH', Nil, oStructTTH,/*bPre*/,/*bPost*/,/*bLoad*/ )

	oModel:SetDescription( STR0001 ) // Registo de Saída de Combustível

Return oModel

//------------------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Inicializa o ViewDef com as suas opções

@type Function

@author João Ricardo Santini ZAndoná
@since 21/09/2021

@return Object, Essa variável vai ser responsável pela construção da View.
/*/
//------------------------------------------------------------------------------
Static Function ViewDef()

	Local oModel := FWLoadModel( 'MNTA657' )
	Local oView  := FWFormView():New()

	// Objeto do model a se associar a view.
	oView:SetModel( oModel )

	// Adiciona no nosso View um controle do tipo FormFields( antiga enchoice )
	oView:AddField( 'MNTA657_TTH' , FWFormStruct( 2,'TTH',,.T. ), /*cLinkID*/ )

	// Criar um 'box' horizontal para receber algum elemento da view
	oView:CreateHorizontalBox( 'MASTER' , 100,/*cIDOwner*/,/*lFixPixel*/,/*cIDFolder*/,/*cIDSheet*/ )

	// Associa um View a um box
	oView:SetOwnerView( 'MNTA657_TTH' , 'MASTER' )

Return oView

//------------------------------------------------------------------------------
/*/{Protheus.doc} CommitInfo
Realiza o registro do cadastro de saída de combustível

@type Function

@author João Ricardo Santini ZAndoná
@since 29/09/2021
@Param oModel, objeto, recebe o modelo com todas as suas informações

@return Logica, retorna .T., para dar seguimento com o processo depois da alteração na TTV.
/*/
//------------------------------------------------------------------------------
Static Function CommitInfo( oModel )

    Local lReturn := .T.

	//--------------------------------------------------------------------------
	// Grava informações do Model na TTV
	//--------------------------------------------------------------------------
	
    // Início da Transação
    BEGIN TRANSACTION

        lReturn := MNTA657EST( oModel:getOperation(), oModel )

        If lReturn
            FwFormCommit( oModel )
            AlteraTTV( oModel )
        Else
            DisarmTransaction()
        EndIf

    END TRANSACTION
    // Final da transação

Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} AlteraTTV
Realiza a inclusão e alteração do registro na TTV

@type Function

@author João Ricardo Santini Zandoná
@since 29/09/2021
@Param oModel, objeto, recebe o modelo com todas as suas informações

@return Logica, retorna .T., para dar seguimento com o processo depois da alteração na TTV.
/*/
//------------------------------------------------------------------------------
Static Function AlteraTTV( oModel )

	Local cPosto     := oModel:GetValue( 'MNTA657_TTH', 'TTH_POSTO' )
	Local cLoja      := oModel:GetValue( 'MNTA657_TTH', 'TTH_LOJA' )
	Local cTanque    := oModel:GetValue( 'MNTA657_TTH', 'TTH_TANQUE' )
	Local cBomba     := oModel:GetValue( 'MNTA657_TTH', 'TTH_BOMBA' )
	Local cDtaBas    := oModel:GetValue( 'MNTA657_TTH', 'TTH_DTABAS' )
	Local cHraBas    := oModel:GetValue( 'MNTA657_TTH', 'TTH_HRABAS' )
	Local cQuant     := oModel:GetValue( 'MNTA657_TTH', 'TTH_QUANT' )
	Local nOperation := oModel:getOperation()

	If nOperation == MODEL_OPERATION_UPDATE
		
        NGAltTTVQnt( cPosto, cLoja, cTanque, cBomba, cDtaBas, cHraBas, '3', cQuant )
	
    ElseIf nOperation == MODEL_OPERATION_INSERT
		
        NGIncTTV( cPosto, cLoja, cTanque, cBomba, cDtaBas, cHraBas, '3', , cQuant )
    
    ElseIf nOperation == MODEL_OPERATION_DELETE
		
        If NGIFDBSEEK( "TTV",cPosto + cLoja + cTanque + cBomba + DTOS( cDtaBas ) + cHraBas + Space( TamSx3( 'TTV_NABAST' )[1] ),1 )
			
            NGDelTTV()
		
        Endif
	
    Endif
    
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA657VLD
Reconhece qual o campo que está sendo validado, e chama a função da sua 
validação

@type Function

@author João Ricardo Santini ZAndoná
@since 22/09/2021
@Params cCampo, caractere, traz o nome do campo que vai ser validado

@return Logica, carrega o retorno da validação requisitada.
/*/
//------------------------------------------------------------------------------
Function MNTA657VLD( cCampo )

    Local lReturn  := .T.
	Local oModel   := FWModelActive()

    DO CASE
        CASE cCampo == 'TTH_POSTO'
            lReturn := MNT657POST( 1 )
        CASE cCampo == 'TTH_LOJA'
            lReturn := MNT657POST( 2 )
        CASE cCampo == 'TTH_TANQUE'
            lReturn := MNT657TANQ( 1 )
        CASE cCampo == 'TTH_CODCOM'
            lReturn := MNT657COMB( oModel:GetValue( 'MNTA657_TTH', 'TTH_CODCOM' ) )
        CASE cCampo == 'TTH_TIPO'
            lReturn := MNT657TIPO( oModel:GetValue( 'MNTA657_TTH', 'TTH_TIPO'   ) )
        CASE cCampo == 'TTH_BOMBA'
            lReturn := MNT657TANQ( 2 )
        CASE cCampo == 'TTH_HRABAS'
            lReturn := NGVALHORA( oModel:GetValue( 'MNTA657_TTH', 'TTH_HRABAS' ) )
        CASE cCampo == 'TTH_MOTIV2'
            lReturn := EXISTCPO( 'TTX', oModel:GetValue( 'MNTA657_TTH', 'TTH_MOTIV2' ) ) .And. MNTMOTTH( oModel:GetValue( 'MNTA657_TTH', 'TTH_TIPO'   ),oModel:GetValue( 'MNTA657_TTH', 'TTH_MOTIV2' ) )
        CASE cCampo == 'TTH_MATRIC'
            lReturn := IIf( !Empty( oModel:GetValue( 'MNTA657_TTH', 'TTH_MATRIC' ) ),ExistCpo( 'SRA',oModel:GetValue( 'MNTA657_TTH', 'TTH_MATRIC' ) ),.T. )
        CASE cCampo == 'TTH_CCUSTO'
            lReturn := CTB105CC()                                                             
    ENDCASE

Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT657TDOK
Última validação antes de efetuar a ação ( Incluir, alterar, ou excluir ),
valida novamente se os campos estão corretos

@type Function

@author João Ricardo Santini Zandoná
@since 22/09/2021
@Param oModel, objeto, recebe o modelo com todas as suas informações

@return Logica, Retorna se todas as validações passaram, ou se alguma delas não 
passou.
/*/
//------------------------------------------------------------------------------
Function MNT657TDOK( oModel )

	Local aArea 	  := GetArea()
	Local lTemAfer    := .F.
	Local lReturn     := .T.
	Local lMNTA657    := ExistBlock( 'MNTA6570' )
    Local cPostoTTH   := oModel:GetValue( 'MNTA657_TTH', 'TTH_POSTO' )
    Local cLojaTTH    := oModel:GetValue( 'MNTA657_TTH', 'TTH_LOJA' )
    Local cTanqueTTH  := oModel:GetValue( 'MNTA657_TTH', 'TTH_TANQUE' )
    Local cCodcom     := oModel:GetValue( 'MNTA657_TTH', 'TTH_CODCOM' )
    Local cBomba      := oModel:GetValue( 'MNTA657_TTH', 'TTH_BOMBA' )
    Local dDtabas     := oModel:GetValue( 'MNTA657_TTH', 'TTH_DTABAS' )
    Local cHrabas     := oModel:GetValue( 'MNTA657_TTH', 'TTH_HRABAS' )
    Local cTipo       := oModel:GetValue( 'MNTA657_TTH', 'TTH_TIPO' )
	Local dDataFech   := SuperGetMv( "MV_ULMES", .F., STOD('') )
    Local nOperation  := oModel:getOperation()

	Private lAfericao := SuperGetMv( 'MV_NGMNTAF',.F.,'2' ) == '1' // Verifica parametro que indica se deve validar com afericao

	

	If dDataFech >= dDtabas .And. nOperation == 5

        Help( NIL, 1, STR0011, NIL, STR0020, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0031} ) // 'Aviso'###'A saída de combustível não pode ser excluída pois já houve fechamento do estoque na data de'###'Verifique a data de fechamento de estoque'
		lReturn := .F.
	
    EndIf

	If lReturn .And. !ExistChav( 'TTH', cPostoTTH + cLojaTTH + cTanqueTTH + cCodcom + cBomba + DTOS(dDtabas) + cHrabas )
		
		lReturn := .F.
	
    EndIf

	RestArea( aArea )

	If lReturn .And. Empty( cBomba ) .And. cTipo == '1'

		Help( NIL, 1, STR0011, NIL, STR0009, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0030} ) // 'Aviso'###'O campo Bomba deve ser preenchido'###'Escolha uma bomba para registrar a saída'
        lReturn := .F.
	
    EndIf

	If lReturn .And. lAfericao .And. cTipo == '1' .And. Inclui
		
        // Verifica a aferição da bomba
		dbSelectArea( 'TQL' )
		dbSetOrder( 1 ) // TQL_FILIAL+TQL_POSTO+TQL_LOJA+TQL_TANQUE+TQL_BOMBA+DTOS( TQL_DTCOLE )+TQL_HRINIC
		
        If dbSeek( xFilial( 'TQL' ) + cPostoTTH + cLojaTTH + cTanqueTTH + cBomba + DTOS(dDtabas) )
			
            While !Eof() .And. ;
				TQL->TQL_FILIAL + TQL->TQL_POSTO + TQL->TQL_LOJA + TQL->TQL_TANQUE;
				+ TQL->TQL_BOMBA + DTOS( TQL->TQL_DTCOLE ) == xFilial( 'TQL' );
				+ cPostoTTH + cLojaTTH + cTanqueTTH + cBomba + DTOS(dDtabas)
				
                If cHrabas > TQL->TQL_HRINIC .And. Empty( TQL->TQL_HRFIM )
					
                    lTemAfer := .T.
					EXIT
				
                ElseIf cHrabas > TQL->TQL_HRINIC .And. !Empty( TQL->TQL_HRFIM ) .And. cHrabas < TQL->TQL_HRFIM
					
                    lTemAfer := .T.
					EXIT
				
                EndIf
				
                TQL->( dbSkip() )
			
            End
		
        EndIf

		If !lTemAfer

			Help( NIL, 1, STR0011, NIL, STR0016, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0017} ) // 'ATENÇÃO'###'Tanque/Bomba não possui aferição para data do abastecimento.'###'Inclua uma aferição para a mesma data e com hora infeior ao abastecimento ou selecione um Tanque/Bomba aferido.'
			lReturn := .F.
		
        EndIf
	
    EndIf

	If lReturn .And. ((dDtabas == dDataBase .And. cHrabas > Substr( Time(),1,5 )) .Or. dDtabas > dDataBase)

		Help( NIL, 1, STR0011, NIL, STR0010, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0033} ) // 'ATENÇÃO'###'Data/hora da Saída do Combustível não pode ser maior que a data/hora atual.'###'Insira uma data/hora menor que a atual'
		lReturn := .F.
	
    EndIf

	//--------------------------------------------------------------------------
	// Verifica os abastecimentos do mesmo Posto/Loja/Tanque/Bomba
	//--------------------------------------------------------------------------

	If lReturn .And. !NGVALABAST( cPostoTTH, cLojaTTH, cTanqueTTH, cBomba, dDtabas, cHrabas, .F., .F. )
		
        lReturn := .F.
	
    EndIf

	// Valida se a data de abastecimento é maior que a data de bloqueio de estoque
	If lReturn .And. !fValDtUltF( oModel )

        lReturn := .F.
	
    EndIf

    If lReturn .And. !NGFRHAFAST( oModel:GetValue( 'MNTA657_TTH', 'TTH_MATRIC' ),dDtabas, dDtabas, .T. )

        lReturn := .F.
    
    EndIf

    If lReturn

        dbSelectArea('SRA')
        dbSetOrder(01) // Matricula + Nome
        If dbSeek(xFilial('SRA')+oModel:GetValue( 'MNTA657_TTH', 'TTH_MATRIC' ))

            If SRA->RA_SITFOLH == 'D'

                dbSelectArea('SX5')
                dbSetOrder(01) // Tabela + Chave
                If dbSeek(xFilial('SX5')+'31'+SRA->RA_SITFOLH)
                    
                    If SRA->RA_DEMISSA < oModel:GetValue( 'MNTA657_TTH', 'TTH_DTABAS' )
                        
                        Help( NIL, 1, STR0011, NIL, STR0029, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0028} ) // 'ATENÇÃO'###'Funcionário demitido!'###'1) 1) Verifique novamente a matrícula do funcionário'
                    
                    EndIf

                EndIf

                lReturn := .F.

            EndIf
        
        EndIf
    EndIf


	If lReturn .And. lMNTA657
		
        lReturn := ExecBlock( 'MNTA6570', .F., .F., {oModel} )
	
    EndIf

Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT657POST
Valida o posto inserido pelo usuário.

@type Function

@author João Ricardo Santini ZAndoná
@since 22/09/2021
@Param nTipo, numerico, indica qual o campo que está chamAndo essa validação
    nTipo = 1 - Está sendo chamado pela validação do campo TTH_POSTO
    nTipo = 2 - Está sendo chamado pela validação do campo TTH_LOJA

@return Logica, Retorna se registro inserido passou ou não nas validações.
/*/
//------------------------------------------------------------------------------
Function MNT657POST( nTipo )
    
    Local lReturn      := .T.
    Local oModel       := FWModelActive()
    Local cPostoTTH    := oModel:GetValue( 'MNTA657_TTH', 'TTH_POSTO' )
    Local cLojaTTH     := oModel:GetValue( 'MNTA657_TTH', 'TTH_LOJA' )

    If nTipo == 1
        
        If !ExistCpo( 'TQF',cPostoTTH )

            lReturn := .F.
        
        Else

            cPosto := cPostoTTH
            cLoja  := cLojaTTH
        
        EndIf
    
    ElseIf nTipo == 2

        If !ExistCpo( 'TQF',cPostoTTH + cLojaTTH )

            lReturn := .F.
       
        Else

            cPosto := cPostoTTH
            cLoja  := cLojaTTH
       
        EndIf
    
    EndIf

Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT657TANQ
Valida o tanque inserido pelo usuário.

@type Function

@author João Ricardo Santini ZAndoná
@since 22/09/2021
@Param nTipo, numerico, indica qual o campo que está chamAndo essa validação
        nTipo = 1 - Está sendo chamado pelo campo TTH_TANQUE
        nTipo = 2 - Está sendo chamado pelo campo TTH_BOMBA

@return Logica, Retorna se registro inserido passou ou não nas validações.
/*/
//------------------------------------------------------------------------------
Function MNT657TANQ( nTipo )

    Local aOldArea    := GetArea()
    Local lReturn     := .T.
    Local oModel      := FWModelActive()
    Local cTQI_CODCOM := TQI->TQI_CODCOM
    Local cPostoTTH   := oModel:GetValue( 'MNTA657_TTH', 'TTH_POSTO' )
    Local cLojaTTH    := oModel:GetValue( 'MNTA657_TTH', 'TTH_LOJA' )
    Local cTanqueTTH  := oModel:GetValue( 'MNTA657_TTH', 'TTH_TANQUE' )
    Local cBomba      := oModel:GetValue( 'MNTA657_TTH', 'TTH_BOMBA' )
    Local cCodCom     := oModel:GetValue( 'MNTA657_TTH', 'TTH_CODCOM' )

    dbSelectArea( 'TQJ' )
    dbSetOrder( 01 ) // TQJ_FILIAL+TQJ_CODPOS+TQJ_LOJA+TQJ_TANQUE+TQJ_BOMBA

    If nTipo == 1 .And. !dbSeek( xFilial( 'TQJ' ) + cPostoTTH + cLojaTTH + cTanqueTTH )
        
        Help( NIL, 1, STR0011, NIL, STR0002, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0021} ) // 'ATENÇÃO'###'Tanque/Bomba não possui aferição para data do abastecimento.'###'Inclua uma aferição para a mesma data e com hora infeior ao abastecimento ou selecione um Tanque/Bomba aferido.'###'1) Verificar se o código inserido foi relacionado ao posto'
        lReturn := .F.

    EndIf
    
    If lReturn .And. nTipo == 2 .And. !dbSeek( xFilial( 'TQJ' ) + cPostoTTH + cLojaTTH + cTanqueTTH + cBomba )
        
         Help( NIL, 1, STR0011, NIL, STR0003, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0022} ) // 'Bomba informada não pertence ao Tanque!' // 'ATENÇÃO' // '1) Verificar se o código inserido está relacionado ao tanque'
        lReturn := .F.

    EndIf

    If lReturn

        cTanque := cTanqueTTH
        dbSelectArea( 'TQI' )
        dbSetOrder( 01 ) // TQI_FILIAL+TQI_CODPOS+TQI_LOJA+TQI_TANQUE+TQI_CODCOM
        
        If dbSeek( xFilial( 'TQI' ) + cPostoTTH + cLojaTTH + cTanqueTTH + cTQI_CODCOM )
           
            oModel:SetValue( 'MNTA657_TTH', 'TTH_CODCOM', TQI->TQI_CODCOM ) 
        
        Else // Caso nao existe o combustivel
            
            If !dbSeek( xFilial( 'TQI' ) + cPostoTTH + cLojaTTH + cTanqueTTH + cCodCom )
                
                // Se nao foi selecionado combustivel, seleciona o primeiro combustivel do tanque
                dbSeek( xFilial( 'TQI' ) + cPostoTTH + cLojaTTH + cTanqueTTH )
                oModel:SetValue( 'MNTA657_TTH', 'TTH_CODCOM', TQI->TQI_CODCOM )
            
            EndIf
        
        EndIf
    
    EndIf

    RestArea( aOldArea )

Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT657COMB
Valida o combustivel inserido pelo usuário.

@type Function

@author João Ricardo Santini Zandoná
@since 22/09/2021
@Param cTQI_CODCOM, caractere, indica o código do combustível a ser validado

@return Logica, Retorna se registro inserido passou ou não nas validações.
/*/
//------------------------------------------------------------------------------
Function MNT657COMB( cTQI_CODCOM )

    Local lReturn  := .T.
    Local aArea    := GetArea()
    Local oModel   := FWModelActive()
    Local cChave   := ''

    If !EXISTCPO( 'TQM', cTQI_CODCOM )
        
        lReturn := .F.
    
    Else
        
        dbSelectArea( 'TQI' )
        dbSetOrder( 01 ) // TQI_FILIAL+TQI_CODPOS+TQI_LOJA+TQI_TANQUE+TQI_CODCOM

        // Tratamento realizado para chamandas via MNTA656
        cChave := IIf( Type( 'oModel' ) == 'O', xFilial( 'TQI' ) + oModel:GetValue( 'MNTA657_TTH', 'TTH_POSTO' ) + oModel:GetValue( 'MNTA657_TTH', 'TTH_LOJA' ) + oModel:GetValue( 'MNTA657_TTH', 'TTH_TANQUE' ) + cTQI_CODCOM,;
            xFilial( 'TQI' ) + M->TTH_POSTO + M->TTH_LOJA + M->TTH_TANQUE + cTQI_CODCOM )
        
        If !dbSeek( cChave )
            
			Help( NIL, 1, STR0011, NIL, STR0012, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0023} ) // 'Combustível não existe no Tanque deste Posto!'###'ATENÇÃO' ### '1) Verificar se o combustível inserido está relacionado ao tanque'
            lReturn := .F.
        
        EndIf
    
    EndIf

    RestArea( aArea )

Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT657TIPO
Valida o tipo de saída inserido pelo usuário.

@type Function

@author João Ricardo Santini ZAndoná
@since 22/09/2021
@Param cTTH_TIPO, caractere, indica qual o tipo de saída inserido pelo usuário
    cTTH_TIPO = 1 - Tipo de saída foi pela bomba
    cTTH_TIPO = 2 - Tipo de saída foi por outras formas

@return Logica, Seu resultado vai ser sempre verdadeiro.
/*/
//------------------------------------------------------------------------------
Function MNT657TIPO( cTTH_TIPO )

    Local oModel     := FWModelActive()
    Local cBomba     := oModel:GetValue( 'MNTA657_TTH', 'TTH_BOMBA' )
    Local cMotiv2    := oModel:GetValue( 'MNTA657_TTH', 'TTH_MOTIV2' )
    Local cDescri    := oModel:GetValue( 'MNTA657_TTH', 'TTH_DESCRI' )

    If cTTH_TIPO == '2'
        
        cBomba := TamSx3( 'TTH_BOMBA' )[1]
        
        If NGSEEK( 'TTX', cMotiv2, 1, 'TTX->TTX_MOTTTH' ) $ '4-5'
            
            cMotiv2 := TamSx3( 'TTH_MOTIV2' )[1]
        
        EndIf
    
    ElseIf cTTH_TIPO == '1'
            
            If !( NGSEEK( 'TTX', cMotiv2, 1, 'TTX->TTX_MOTTTH' ) $ '4-5' )
                
                cMotiv2 := TamSx3( 'TTH_MOTIV2' )[1]
            
            EndIf
    
    Else
            cMotiv2 := TamSx3( 'TTH_MOTIV2' )[1]
            cDescri := TamSx3( 'TTH_DESCRI' )[1]
    
    EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTMOTTH
Valida o motivo de saída inserido pelo usuário.

@type Function

@author João Ricardo Santini ZAndoná
@since 22/09/2021
@Param cTipo, caractere, indica qual o tipo de saída inserido pelo usuário
@Param cMotivo, caractere, indica qual o motivo de saída inserido pelo usuário

@return Logica, Indica se o registro do motivo passou pela validação ou não.
/*/
//------------------------------------------------------------------------------
Function MNTMOTTH( cTipo, cMotivo )

    Local lReturn := .T.
    cMotivo := NGSEEK( 'TTX', cMotivo, 1, 'TTX->TTX_MOTTTH' )

    If cTipo == '1'

        If !( cMotivo $ '4-5' )
            
			Help( NIL, 1, STR0011, NIL, STR0013, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0024} ) // 'Se o combustível foi retirado pela Bomba, somente serão aceitos os motivos Transf. P/ Apoio ou Aferição.'###'1) Insira um motivo de Transf. P/ Apoio ou Aferição'
            lReturn := .F.
        
        EndIf
    
    ElseIf cTipo == '2'
        
        If cMotivo $ '4-5'
            
			Help( NIL, 1, STR0011, NIL, STR0014, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0025} ) // 'Se o combustível não foi retirado pela Bomba, somente serão aceitos os motivos Vazamento, Evaporação, Drenagem e Outros Motivos.'
            lReturn := .F.
        
        EndIf
    
    EndIf

Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA657EST
Faz a baixa no estoque.

@type Function

@author João Ricardo Santini Zandoná
@since 22/09/2021
@Param nOpc, numerico, indica qual a operação que está sendo realizada
@Param oModel, objeto, recebe o modelo com todas as suas informações

@return Logica, Indica se a baixa foi feita ou não.
/*/
//------------------------------------------------------------------------------
Function MNTA657EST( nOpc, oModel )

    Local lReturn    := .T.
    Local lNMovEst	 := .T.
    Local lVMovEst	 := .F.
    Local cDocumSD3	 := ''
    Local cProduto   := ''
    Local cCustoTTH  := oModel:GetValue( 'MNTA657_TTH', 'TTH_CCUSTO' ) //O valor do Centro de custo só é atribuído quAndo passa por algumas validações, essa variável armazena o valor, até que essas validações aconteçam
    Local nQuant     := oModel:GetValue( 'MNTA657_TTH', 'TTH_QUANT' )
    Local cDtabas    := oModel:GetValue( 'MNTA657_TTH', 'TTH_DTABAS' )
    Local cMotiv2    := oModel:GetValue( 'MNTA657_TTH', 'TTH_MOTIV2' )
    Local cTanque    := oModel:GetValue( 'MNTA657_TTH', 'TTH_TANQUE' )
    Local cNumSeq    := oModel:GetValue( 'MNTA657_TTH', 'TTH_NUMSEQ' )
    Local cUsaInt3   := AllTrim( GetMv( 'MV_NGMNTES' ) )
    Local lAtstNovo := .T.

    dbSelectArea( 'SD3' ) //Movimentacoes Internas
    dbSetOrder( 04 )      //D3_FILIAL+D3_NUMSEQ+D3_CHAVE+D3_COD

    If dbSeek( xFilial( 'SD3' ) + cNumSeq + 'E0' )

        cDocumSD3 := SD3->D3_DOC //Documento

        If !Empty( SD3->D3_COD )
            cProduto := SD3->D3_COD
        EndIf

    EndIf

    If cUsaInt3 == 'S'

        lNMovEst := NGSEEK( 'TTX', cMotiv2, 1, 'TTX->TTX_ATUEST' ) == '1'
        If lNMovEst
            //Verifica se o MV_DOCSEQ está certo antes de entrar em execução automática, para mostrar mensagem de erro e finalizar
            If Empty( ProxNum() )
                lReturn := .F.
            Endif
        Endif

        If nOpc == 3 //Inclusao

            If lNMovEst
            
                cDocumSD3 := NextNumero( 'SD3', 2, 'D3_DOC', .T. )
                
                cProduto  := TQI->TQI_PRODUT
                cNumSeq   := MntMovEst( 'RE0', cTanque, cProduto, nQuant, cDtabas, cDocumSD3, Nil, cCustoTTH, ,  )
                lReturn   := !Empty(cNumSeq)

                If lReturn
                    
                    oModel:SetValue( 'MNTA657_TTH', 'TTH_NUMSEQ', cNumSeq )
                
                Endif

            Endif

        ElseIf nOpc == 4 //Alteracao

            If TTH->TTH_MOTIV2 != cMotiv2 //Alteracao de motivo

                lVMovEst  := NGSEEK( 'TTX', TTH->TTH_MOTIV2, 1, 'TTX->TTX_ATUEST' ) == '1'
				lAtstNovo := NGSEEK( 'TTX', cMotiv2, 1, 'TTX->TTX_ATUEST' ) == '2'
				 
				// Caso o  antigo motivo seja com alteração de estoque, e o novo motivo sem, ele entra na condição
				If lVMovEst .And. lAtstNovo
					
					cNumSeq := MntMovEst( 'RE0', cTanque, cProduto, nQuant, cDtabas, cDocumSD3, Nil, cCustoTTH, .T., cNumSeq )
					lReturn := !Empty(cNumSeq)
                    
                    If lReturn
                    
                        oModel:SetValue( 'MNTA657_TTH', 'TTH_NUMSEQ', ' ' )
                    
                    EndIf
				
				ElseIf !lVMovEst .And. !lAtstNovo // Quando o motivo anterior não movimentava estoque, mas o atual tem movimentação 
				
					cDocumSD3 := NextNumero( 'SD3', 2, 'D3_DOC', .T. )
                	cProduto  := TQI->TQI_PRODUT

                    cNumSeq := MntMovEst( 'RE0', cTanque, cProduto, nQuant, cDtabas, cDocumSD3, Nil, cCustoTTH )
                    lReturn := !Empty(cNumSeq)

                    If lReturn
                	    oModel:SetValue( 'MNTA657_TTH', 'TTH_NUMSEQ', cNumSeq)
                    EndIf

				EndIf

            ElseIf TTH->TTH_QUANT != nQuant //Alteracao de quantidade

                If lNMovEst

                    cNumSeq := MntMovEst( 'RE0', cTanque, cProduto, TTH->TTH_QUANT, cDtabas, cDocumSD3, Nil, cCustoTTH, .T., cNumSeq )
                    lReturn := !Empty(cNumSeq)

                    If lReturn

                        cDocumSD3 := NextNumero( 'SD3', 2, 'D3_DOC', .T. )
                        cNumSeq   := MntMovEst( 'RE0', cTanque, cProduto, nQuant, cDtabas, cDocumSD3, Nil, cCustoTTH, , cNumSeq )
                        lReturn   := !Empty(cNumSeq)

                        If lReturn
                            oModel:SetValue( 'MNTA657_TTH', 'TTH_NUMSEQ', cNumSeq )
                        EndIf
                    
                    EndIf

                Endif

            Endif

        ElseIf nOpc == 5 //Exclusao
            
            lVMovEst := NGSEEK( 'TTX', TTH->TTH_MOTIV2, 1, 'TTX->TTX_ATUEST' ) == '1'
            
            If lVMovEst

                cNumSeq := MntMovEst( 'RE0', cTanque, cProduto, nQuant, cDtabas, cDocumSD3, Nil, cCustoTTH, .T., cNumSeq )
                lReturn := !Empty(cNumSeq)

            EndIf

        Endif

    Endif
    
Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} fValDtUltF
Valida a data do abastecimento, junto com a data do último bloqueio de 
abastecimento.

@type Function

@author João Ricardo Santini Zandoná
@since 22/09/2021
@Param oModel, objeto, traz o oModel com todas as suas informações

@return Logica, Indica se a data do abastecimento passou ou não pelas 
validações.
/*/
//------------------------------------------------------------------------------
Static Function fValDtUltF( oModel )

	Local lReturn   := .T.
    Local dDataBloq := SuperGetMV( 'MV_DBLQMOV',.F.,STOD( '' ) )

    //Se possuir integração com o estoque, vai validar se a data do abastecimento é menor que a data de movimentações no estoque
    If AllTrim( SuperGetMv( 'MV_NGMNTES', .F., 'N' ) ) == 'S' .And. oModel:GetValue( 'MNTA657_TTH', 'TTH_DTABAS' ) <=  dDataBloq

        Help( NIL, 1, STR0011, NIL, STR0018, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0032} )// 'Não pode haver saida de combustivel se a data do mesmo for menor ou igual que a data de bloqueio de movimentações. '###'Verifique a data do bloqueio de movimentações'
        lReturn := .F.

    EndIf


Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT657WCC
Define o When do centro de custo.

@type Function

@author João Ricardo Santini ZAndoná
@since 22/09/2021

@return Logica, Indica se a definição do when foi ou não bem sucedida.
/*/
//------------------------------------------------------------------------------

Function MNT657WCC()

	Local lReturn := .T.

	If Altera
		
        If Empty( TTH->TTH_CCUSTO )
			
            lReturn := .F.
		
        EndIf

		If lReturn .And. SuperGetMv( 'MV_ESTNEG', .F., 'S' ) <> 'S'
			
            lReturn := .F.
		
        ElseIf lReturn .And. SuperGetMv( 'MV_ULMES', .F., dDataBase ) >= TTH->TTH_DTABAS
			
            lReturn := .F.
		
        EndIf

	EndIf

Return lReturn
