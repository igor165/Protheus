#INCLUDE "MDTA605.ch"
#Include "Protheus.ch"
#INCLUDE "FWMVCDEF.CH"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA605
Programa de Cadastro de Objetos causadores dos acidentes

@return

@Param lFontPS - Indica se esta sendo aberto pelo fonte correto no PS.

@sample MDTA605()

@author Thiago Machado - Refeito por: Jackson Machado
@since 23/06/00 - Revisão: 14/03/16
/*/
//---------------------------------------------------------------------
Function MDTA605( lFontPS )

	//Armazena as variáveis
	Local aNGBEGINPRM := NGBEGINPRM()
	Local oBrowse

	Private lSigaMdtPS := IIf( SuperGetMv( "MV_MDTPS", .F., "N" ) == "S", .T., .F. )

	Default lFontPS := IsInCallStack( "MDTA605PS" )

	//Caso houver algum inconsistencia será retornado as variaveis.
	If !fValExeRot( lFontPS )

		oBrowse := FWMBrowse():New()
			oBrowse:SetAlias( "TNH" ) //Alias da tabela utilizada
			oBrowse:SetMenuDef( "MDTA605" ) //Nome do fonte onde esta a função MenuDef
			oBrowse:SetDescription( STR0006 ) //Descrição do browse ###"Objeto Causador"

			If lSigaMdtPS
				nSizeSA1 := IIf( ( TAMSX3( "A1_COD" )[1] ) < 1, 6, ( TAMSX3( "A1_COD" )[1] ) )
				nSizeLo1 := IIf( ( TAMSX3( "A1_LOJA" )[1] ) < 1, 2, ( TAMSX3( "A1_LOJA" )[1] ) )

				cCliMdtPs := SA1->A1_COD + SA1->A1_LOJA

				oBrowse:SetFilterDefault( "TNH->(TNH_CLIENT+TNH_LOJA) == cCliMdtps" )
			EndIf

		oBrowse:Activate()

	EndIf

	// Devolve as variáveis armazenadas
	NGRETURNPRM( aNGBEGINPRM )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Definição do Menu (padrão MVC).

@author Jackson Machado
@since 14/03/16

@return aRotina array com o Menu MVC
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

	//Inicializa MenuDef com todas as opções

Return FWMVCMenu( "MDTA605" )

//---------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Definição do Modelo (padrão MVC).

@author Jackson Machado
@since 14/03/16

@return oModel objeto do Modelo MVC
/*/
//---------------------------------------------------------------------
Static Function ModelDef()

    //Cria a estrutura a ser usada no Modelo de Dados
	Local oStructTNH := FWFormStruct( 1, "TNH", /*bAvalCampo*/, /*lViewUsado*/ )

	// Modelo de dados que será construído
	Local oModel

	// Cria o objeto do Modelo de Dados
	// cID     Identificador do modelo
	// bPre    Code-Block de pre-edição do formulário de edição. Indica se a edição esta liberada
	// bPost   Code-Block de validação do formulário de edição
	// bCommit Code-Block de persistência do formulário de edição
	// bCancel Code-Block de cancelamento do formulário de edição
	oModel := MPFormModel():New( "MDTA605", /*bPre*/, { | oModel | fMPosValid( oModel ) } /*bPos*/, /*bCommit*/, /*bCancel*/ )

		//--------------------------------------------------
		// Componentes do Modelo
		//--------------------------------------------------
		// Adiciona ao modelo um componente de Formulário Principal
		// cId          Identificador do modelo
		// cOwner       Identificador superior do modelo
		// oModelStruct Objeto com  a estrutura de dados
		// bPre         Code-Block de pré-edição do formulário de edição. Indica se a edição esta liberada
		// bPost        Code-Block de validação do formulário de edição
		// bLoad        Code-Block de carga dos dados do formulário de edição
		oModel:AddFields( "TNHMASTER", Nil, oStructTNH, /*bPre*/, /*bPost*/, /*bLoad*/ )
			// Adiciona a descrição do Modelo de Dados (Geral)
			oModel:SetDescription( STR0006 ) //"Objeto Causador"
			// Adiciona a descricao do Componente do Modelo de Dados
			oModel:GetModel( "TNHMASTER" ):SetDescription( STR0006 ) //"Objeto Causador"

Return oModel

//---------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Definição da View (padrão MVC).

@author Jackson Machado
@since 14/03/16

@return oView objeto da View MVC
/*/
//---------------------------------------------------------------------
Static Function ViewDef()

	// Cria um objeto de Modelo de dados baseado no ModelDef() do fonte informado
	Local oModel := FWLoadModel( "MDTA605" )

	// Cria a estrutura a ser usada na View
	Local oStructTNH := FWFormStruct( 2, "TNH", /*bAvalCampo*/, /*lViewUsado*/ )

	// Interface de visualização construída
	Local oView

	// Cria o objeto de View
	oView := FWFormView():New()
		// Objeto do model a se associar a view.
		oView:SetModel( oModel )
		// Adiciona no View um controle do tipo formulário (antiga Enchoice)
		// cFormModelID - Representa o ID criado no Model que essa FormField irá representar
		// oStruct - Objeto do model a se associar a view.
		// cLinkID - Representa o ID criado no Model ,Só é necessári o caso estamos mundando o ID no View.
		oView:AddField( "VIEW_TNH", oStructTNH, "TNHMASTER" )
			//Adiciona um titulo para o formulário
			oView:EnableTitleView( "VIEW_TNH", STR0006 ) //Descrição do browse ###"Objeto Causador"
			// Cria os componentes "box" horizontais para receberem elementos da View
			// cID		  	Id do Box a ser utilizado
			// nPercHeight  Valor da Altura do box( caso o lFixPixel seja .T. é a qtd de pixel exato)
			// cIdOwner 	Id do Box Vertical pai. Podemos fazer diversas criações uma dentro da outra.
			// lFixPixel	Determina que o valor passado no nPercHeight é na verdade a qtd de pixel a ser usada.
			// cIDFolder	Id da folder onde queremos criar o o box se passado esse valor, é necessário informar o cIDSheet
			// cIDSheet     Id da Sheet(Folha de dados) onde queremos criar o o box.
			oView:CreateHorizontalBox( "TELATNH", 100, /*cIDOwner*/, /*lFixPixel*/, /*cIDFolder*/, /*cIDSheet*/ )
		// Associa um View a um box
		oView:SetOwnerView( "VIEW_TNH", "TELATNH" )

Return oView

//---------------------------------------------------------------------
/*/{Protheus.doc} fMPosValid
Pós-validação do modelo de dados.

@author Jackson Machado
@since 13/09/13

@param oModel - Objeto do modelo de dados (Obrigatório)

@return Lígico - Retorna verdadeiro caso validacoes estejam corretas
/*/
//---------------------------------------------------------------------
Static Function fMPosValid( oModel )

	Local lRet := .T.

	Local aAreaTNH := TNH->( GetArea() )

	Local nOperation := oModel:GetOperation() //Operação de ação sobre o Modelo
	Local oModelTNH	 := oModel:GetModel( "TNHMASTER" )

	Private aCHKSQL := {} // Variável para consistência na exclusão (via SX9)
	Private aCHKDEL := {} // Variável para consistência na exclusão (via Cadastro)

	// Recebe SX9 - Formato:
	// 1 - Domínio (tabela)
	// 2 - Campo do Domínio
	// 3 - Contra-Domínio (tabela)
	// 4 - Campo do Contra-Domínio
	// 5 - Condição SQL
	// 6 - Comparação da Filial do Domínio
	// 7 - Comparação da Filial do Contra-Domínio
	aCHKSQL := NGRETSX9( "TNH" )

	// Recebe relação do Cadastro - Formato:
	// 1 - Chave
	// 2 - Alias
	// 3 - Ordem (Índice)
	If lSigaMdtPS
		aAdd( aCHKDEL, { "cCliMdtps+TNH->TNH_CODOBJ", "TNC", 12 } )
	Else
		aAdd( aCHKDEL, { "TNH->TNH_CODOBJ", "TNC", 4 } )
	EndIf

	If nOperation == MODEL_OPERATION_DELETE //Exclusão
		If !NGCHKDEL( "TNH" )
			lRet := .F.
		EndIf

		If lRet .And. !NGVALSX9( "TNH", {}, .T., .T. )
			lRet := .F.
		EndIf
	Else
		lRet := MDTObriEsoc( "TNH", , oModelTNH ) //Verifica se campos obrigatórios ao eSocial estão preenchidos
	EndIf

	RestArea( aAreaTNH )

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} fValExeRot
Valida execução da rotina MDTA605PS

@return lIncons Boolean Indica se há inconsistencia na execução.
@param lFontPS  Boolean Indica se foi feito a chamada pelo MDTA605PS

@sample fValExeRot(.T.)

@author Jackson Machado
@since 14/03/2016
/*/
//---------------------------------------------------------------------
Static Function fValExeRot( lFontPS )

	Local lIncons := .F.

	//Verifica se usuario de acesso tem permissão para a execução.
	If FindFunction( "MDTRESTRI" ) .And. !MDTRESTRI( cPrograma )
		lIncons := .T.
	EndIf

	If !lIncons .And. lSigaMDTPS .And. !lFontPS
		ShowHelpDlg( "NOCALLPS", { "Função incorreta" }, 1, ;
					{ "Faz-se necessário a alteração do Menu. A rotina 'Objeto Causador' deverá chamar o programa MDTA605PS." + ;
					"Favor contate administrador de sistemas" }, 3 )
		lIncons := .T.
	EndIf

Return lIncons

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT605VOBJ
Validacao do Codigo do Objetos

@return lIncons Boolean Indica se há inconsistencia na execução.
@param lFontPS  Boolean Indica se foi feito a chamada pelo MDTA605PS

@sample fValExeRot(.T.)

@author Denis - Refeito por: Jackson Machado
@since 17/06/10 - Refeito em: 14/03/2016
/*/
//---------------------------------------------------------------------
Function MDT605VOBJ()

	Local lRet	 := .T.
	Local lPrest := Type( "cCliMdtPs" ) == "C" .And. !Empty( cCliMdtPs )

	If lPrest
		lRet := ExistChav( "TNH", cCliMdtps + M->TNH_CODOBJ, 3 )
	Else
		lRet := ExistChav( "TNH", M->TNH_CODOBJ )
	Endif

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT605WHEN
When dos Codigos de eSocial. Esta função foi descontinuada e será removida
na virada de release para a 12.1.27

@param nCampo Numerico Indica o campo de validação 1 - TNH_ESOC ; 2 - TNH_ESOC1

@sample MDT605WHEN( 1 )

@author Denis - Refeito por: Jackson Machado
@since 17/06/10 - Refeito em: 14/03/2016
/*/
//---------------------------------------------------------------------
Function MDT605WHEN()

Return .T.
