#INCLUDE "MNTR485.CH"
#INCLUDE "PROTHEUS.CH"

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTR485
Comsumo de Combustivel Por Obra e Tipo de Servico     
@author Inacio Luiz Kolling 
@since 27/02/2001
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTR485()

	Local cSTRING    := "SI3"
	Local cDESC1     := STR0001 //"Relatorio de Consumo de Combustivel Por Obra e Tipo de Servico."
	Local cDESC2     := STR0002 //"E permitido selecionar tipo de informacao a ser"
	Local cDESC3     := STR0003 //"apresentada, atraves dos parametros do relatorio."
	Local WNREL      := "MNTR485"

	Private aRETURN  := {STR0004,1,STR0005,1,2,1,"",1} //"Zebrado"###"Administracao"
	Private nLASTKEY := 0
	Private TITULO   := STR0006 //"Relatorio Consumo Combustivel Por Obra e Tipo de Servico"
	Private TAMANHO  := "M"
	Private NOMEPROG := "MNTR485"
	Private nTIPO    := 0

	Private nTamPro := TamSX3("B1_COD")[1]-15

	SetKey( VK_F9, { | | NGVersao( "MNTR485" , 2 ) } )

	//+--------------------------------------------------------------+
	//| Variaveis utilizadas para qarametros                         |
	//| MV_PAR01     -  De C.Custo (Obra)                            |
	//| MV_PAR02     -  Ate C.Custo                                  |
	//| MV_PAR03     -  De Tipo Servico                              |
	//| MV_PAR04     -  Ate Tipo Servico                             |
	//| MV_PAR05     -  De Grupo                                     |
	//| MV_PAR06     -  Ate Grupo                                    |
	//| MV_PAR07     -  De Produto                                   |
	//| MV_PAR08     -  Ate Produto                                  |
	//| MV_PAR09     -  De Data Inicio                               |
	//| MV_PAR10     -  Ate Data Fim                                 |
	//| MV_PAR11     -  De Familia                                   |
	//| MV_PAR12     -  Ate Familia                                  |
	//| MV_PAR13     -  De Bem                                       |
	//| MV_PAR14     -  Ate Bem                                      |
	//| MV_PAR15     -  Qtd. Caracter. Obra                          |
	//+--------------------------------------------------------------+

	Private cPERG := "MNT485"
	Pergunte(cPERG,.F.)

	//³ Envia controle para a funcao SETPRINT                        ³
	WNREL := SetPrint(cSTRING,WNREL,cPERG,TITULO,cDESC1,cDESC2,cDESC3,.F.,"")
	If nLASTKEY = 27
		Set Filter To
		Return
	EndIf
	SetDefault(aRETURN,cSTRING)
	RptStatus({|lEND| R485IMP(@lEND,WNREL,TITULO,TAMANHO)},TITULO)

Return Nil

//---------------------------------------------------------------------
/*/{Protheus.doc} R485IMP
Chamada do Relatório 
@author Inacio Luiz Kolling
@since 27/02/2001
@version undefined
@param lEND, logical, descricao
@param WNREL, , descricao
@param TITULO, , descricao
@param TAMANHO, , descricao
@type function
/*/
//---------------------------------------------------------------------
Static Function R485IMP(lEND,WNREL,TITULO,TAMANHO)
	
	Local cRODATXT := ""
	Local nCNTIMPR := 0

	//+--------------------------------------------------------------+
	//| Tabela Temporaria 											 |
	//+--------------------------------------------------------------+	
	Local oTempTable		

	//+--------------------------------------------------------------+
	//| Contadores de linha e pagina                                 |
	//+--------------------------------------------------------------+
	Private LI := 80,M_PAG := 1
	
	//+--------------------------------------------------------------+
	//| Verifica se deve comprimir ou nao                            |
	//+--------------------------------------------------------------+
	nTIPO  := IIF(aRETURN[4]==1,15,18)

	//+--------------------------------------------------------------+
	//| Alias da Tabela temporaria 									 |
	//+--------------------------------------------------------------+
	Private cTRB	:= GetNextAlias()

	//+--------------------------------------------------------------+
	//| Monta os Cabecalhos                                          |
	//+--------------------------------------------------------------+	
	Private CABEC1 := STR0028+Space(nTamPro)+STR0036 //"         Produto          Nome Do Produto                             Quantidade  Unidade" 
	Private CABEC2 := " "
	/*
	1         2         3         4         5         6         7         8         9
	01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
	***************************************************************************************************************
	Produto          Nome Do Produto                              Quantidade  Unidade
	***************************************************************************************************************
	Obra..: xxxxxx
	xxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	Tipo Servico...: xxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	xxxxxxxxxxxxxxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 999.999.999,99  xx
	xxxxxxxxxxxxxxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 999.999.999,99  xx
	*/

	If Empty(MV_PAR15)
		Help(" ",1,"NGMVERPARA")
		Return .F.
	EndIf

	aCAMPOS  := {}        
	aAdd(aCAMPOS,{"CCUSTO"  ,"C" ,Len(TPN->TPN_CCUSTO),0})
	aAdd(aCAMPOS,{"OBRA"    ,"C" ,MV_PAR15,0})
	aAdd(aCAMPOS,{"TIPOSER" ,"C" ,03,0})
	aAdd(aCAMPOS,{"PRODUTO" ,"C" ,nTamPro+15,0})
	aAdd(aCAMPOS,{"QUANTID" ,"N" ,16,2})

	//Intancia classe FWTemporaryTable
	oTempTable  := FWTemporaryTable():New( cTRB, aCAMPOS )
	//Cria indices
	oTempTable:AddIndex( "Ind01" , {"OBRA","CCUSTO","TIPOSER","PRODUTO"}  )
	//Cria a tabela temporaria
	oTempTable:Create()

	DbSelectArea("TPN")
	DbSetOrder(01)
	DbSeek(xFILIAL("TPN")+MV_PAR13,.T.)
	SetRegua(LastRec())
	While !Eof() .And. TPN-> TPN_FILIAL == xFILIAL("TPN") .And.;
					   TPN-> TPN_CODBEM <= MV_PAR14

		IncRegua() 
		If TPN->TPN_UTILIZ == 'P'
			DbSelectArea("TPN")
			DbSkip()
			Loop
		EndIf

		If TPN->TPN_CCUSTO < MV_PAR01 .Or. TPN->TPN_CCUSTO > MV_PAR02
			DbSelectArea("TPN")
			DbSkip()
			Loop
		EndIf

		If TPN->TPN_DTINIC < MV_PAR09 .Or. TPN->TPN_DTINIC > MV_PAR10
			DbSelectArea("TPN")
			DbSkip()
			Loop
		EndIf

		DbSelectArea("ST9")
		DbSetOrder(01)
		If DbSeek(xFILIAL("ST9")+TPN->TPN_CODBEM)
			If ST9->T9_CODFAMI < MV_PAR11 .Or. ST9->T9_CODFAMI > MV_PAR12
				DbSelectArea("TPN")
				DbSkip()
				Loop
			EndIf
		Else
			DbSelectArea("TPN")
			DbSkip()
			Loop
		EndIf   

		DbSelectArea("STJ")
		DbSetOrder(13)
		DbSeek(xFILIAL("STJ")+"B"+TPN->TPN_CODBEM+TPN->TPN_CCUSTO)
		While !Eof() .And. STJ->TJ_FILIAL == xFILIAL("STJ") .And.;
		STJ->TJ_TIPOOS = "B"                                .And.;
		STJ->TJ_CODBEM == TPN->TPN_CODBEM                   .And.;
		STJ->TJ_CCUSTO == TPN->TPN_CCUSTO 

			If STJ->TJ_SITUACA <> 'L'
				DbSelectArea("STJ")
				DbSkip()
				Loop
			EndIf

			If STJ->TJ_TIPO < MV_PAR03 .Or. STJ->TJ_TIPO > MV_PAR04
				DbSelectArea("STJ")
				DbSkip()
				Loop
			EndIf

			DbSelectArea("STL")
			DbSetOrder(01)
			DbSeek(xFILIAL("STL")+STJ->TJ_ORDEM+STJ->TJ_PLANO)
			While !Eof() .And. STL->TL_FILIAL == xFILIAL("STL") .And.;
			STL->TL_ORDEM == STJ->TJ_ORDEM                    .And.;
			STL->TL_PLANO == STJ->TJ_PLANO

				If Alltrim(STL->TL_SEQRELA) == "0"
					DbSelectArea("STL")
					DbSkip()
					Loop
				EndIf
				If STL->TL_TIPOREG <> 'P'
					DbSelectArea("STL")
					DbSkip()
					Loop
				EndIf
				If STL->TL_DTINICI < TPN->TPN_DTINIC 
					DbSelectArea("STL")
					DbSkip()
					Loop
				EndIf
				If STL->TL_CODIGO < MV_PAR07 .Or. STL->TL_CODIGO > MV_PAR08
					DbSelectArea("STL")
					DbSkip()
					Loop
				EndIf

				DbSelectArea("SB1")
				DbSetOrder(01)
				If DbSeek(xFILIAL("SB1")+STL->TL_CODIGO)
					If SB1->B1_GRUPO < MV_PAR05 .Or. SB1->B1_GRUPO > MV_PAR06
						DbSelectArea("STL")
						DbSkip()
						Loop
					EndIf
				Else
					DbSelectArea("STL")
					DbSkip()
					Loop
				EndIf

				R485GRTRAB(TPN->TPN_CCUSTO,STJ->TJ_TIPO,STL->TL_CODIGO,STL->TL_QUANTID)
				DbSelectArea("STL")
				DbSkip()
			End
			DbSelectArea("STJ")
			DbSkip()
		End
		DbSelectArea("STS")
		DbSetOrder(09)
		DbSeek(xFILIAL("STS")+"B"+TPN->TPN_CODBEM+TPN->TPN_CCUSTO)
		While !Eof() .And. STS->TS_FILIAL == xFILIAL("STS") .And.;
						   STS->TS_TIPOOS = "B"                                .And.;
						   STS->TS_CODBEM == TPN->TPN_CODBEM                   .And.;
						   STS->TS_CCUSTO == TPN->TPN_CCUSTO

			If STS->TS_SITUACA <> 'L'
				DbSelectArea("STS")
				DbSkip()
				Loop
			EndIf  

			If STS->TS_TIPO < MV_PAR03 .Or. STS->TS_TIPO > MV_PAR04
				DbSelectArea("STS")
				DbSkip()
				Loop
			EndIf

			DbSelectArea("STT")
			DbSetOrder(01)
			DbSeek(xFILIAL("STT")+STS->TS_ORDEM+STS->TS_PLANO)
			While !Eof() .And. STT->TT_FILIAL == xFILIAL("STT") .And.;
			STT->TT_ORDEM == STS->TS_ORDEM                      .And.;
			STT->TT_PLANO == STS->TS_PLANO

				If Alltrim(STT->TT_SEQRELA) == "0"
					DbSelectArea("STT")
					DbSkip()
					Loop
				EndIf
				If STT->TT_TIPOREG <> 'P'
					DbSelectArea("STT")
					DbSkip()
					Loop
				EndIf
				If STT->TT_DTINICI < TPN->TPN_DTINIC
					DbSelectArea("STT")
					DbSkip()
					Loop
				EndIf
				If STT->TT_CODIGO < MV_PAR07 .Or. STT->TT_CODIGO > MV_PAR08
					DbSelectArea("STT")
					DbSkip()
					Loop
				EndIf

				DbSelectArea("SB1")
				DbSetOrder(01) 
				If DbSeek(xFILIAL("SB1")+STT->TT_CODIGO)
					If SB1->B1_GRUPO < MV_PAR05 .Or. SB1->B1_GRUPO > MV_PAR06
						DbSelectArea("STT")
						DbSkip()
						Loop
					EndIf
				Else
					DbSelectArea("STT")
					DbSkip()
					Loop
				EndIf   

				R485GRTRAB(TPN->TPN_CCUSTO,STS->TS_TIPO,STT->TT_CODIGO,STT->TT_QUANTID)
				DbSelectArea("STT")
				DbSkip()
			End
			DbSelectArea("STS")
			DbSkip()
		End
		DbSelectArea("TPN")
		DbSkip()
	End

	DbSelectArea(cTRB)
	DbGotop()
	SetRegua(LastRec())
	While !Eof()
		cCODOBRA := (cTRB)->OBRA
		NGSOMALI(58)
		@ Li,000 Psay STR0029 + cCODOBRA

		DbSelectArea(cTRB)
		While !Eof() .And. (cTRB)->OBRA == cCODOBRA
			
			cCODCUST := (cTRB)->CCUSTO
			lPRIM    := .T.  
			NGSOMALI(58)
			DbSelectArea("SI3")
			DbSetOrder(01)
			DbSeek(xFILIAL("SI3")+cCODCUST)
			@ Li,002 Psay alltrim(cCODCUST) + " - " + SI3->I3_DESC

			DbSelectArea(cTRB)
			While !Eof() .And. (cTRB)->OBRA   == cCODOBRA .And.;
							   (cTRB)->CCUSTO == cCODCUST         

				cTIPOSER := (cTRB)->TIPOSER
				
				DbSelectArea("STE")
				DbSetOrder(01)
				DbSeek(xFILIAL("STE")+cTIPOSER)
				NGSOMALI(58)
				@ Li,004 Psay STR0030+cTIPOSER+" "+STE->TE_NOME //"Tipo Servico..: "
				NGSOMALI(58)

				DbSelectArea(cTRB)
				While !Eof() .And. (cTRB)->OBRA == cCODOBRA   .And.; 
				(cTRB)->CCUSTO == cCODCUST                    .And.;        
				(cTRB)->TIPOSER == cTIPOSER

					IncRegua()
					DbSelectArea("SB1")
					DbSetOrder(01)
					DbSeek(xFILIAL("SB1")+(cTRB)->PRODUTO)
					NGSOMALI(58)
					@ Li,009 Psay (cTRB)->PRODUTO Picture "@!"
					@ Li,026+nTamPro Psay Substr(SB1->B1_DESC,1,40)
					@ Li,070+nTamPro Psay (cTRB)->QUANTID Picture "@E 999,999.99"
					@ Li,082+nTamPro Psay SB1->B1_UM     
					DbSelectArea(cTRB)
					DbSkip()
				End
				NGSOMALI(58)
			End        
		End
	End
	RODA(nCNTIMPR,cRODATXT,TAMANHO)

	oTempTable:Delete() //Deleta Tabela Temporario

	//³ Devolve a condicao original do arquivo principam             ³
	RetIndex("ST9")
	Set Filter To
	Set Device To Screen
	If aRETURN[5] = 1
		Set Printer To
		DbCommitAll()
		OurSpool(WNREL)
	EndIf
	
	Ms_Flush()
	
Return Nil

//---------------------------------------------------------------------
/*/{Protheus.doc} R485GRTRAB
Grava no arquivo temporario  
@author Inacio Luiz Kolling
@since 21/02/2001
@version undefined
@param cCUSTO, characters, descricao
@param cTIPSER, characters, descricao
@param cPROD, characters, descricao
@param nQUANT, numeric, descricao
@type function
/*/
//---------------------------------------------------------------------
Static Function R485GRTRAB(cCUSTO,cTIPSER,cPROD,nQUANT)

	Local cOBRA := cCUSTO

	DbSelectArea(cTRB)
	If !DbSeek(Substr(cOBRA,1,MV_PAR15)+cOBRA+cTIPSER+cPROD)
		DbAppend()
		(cTRB)->CCUSTO := cOBRA
		(cTRB)->OBRA   := Substr(cOBRA,1,MV_PAR15)
		(cTRB)->TIPOSER := cTIPSER
		(cTRB)->PRODUTO := cPROD
	EndIf
	
	(cTRB)->QUANTID := (cTRB)->QUANTID+nQUANT

Return .T.