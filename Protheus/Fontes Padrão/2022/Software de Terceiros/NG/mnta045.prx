#INCLUDE "MNTA045.ch"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA045
Cadastro de características.
@type function

@author Vitor Emanuel Batista
@since 10/02/2012

@param
@return
/*/
//---------------------------------------------------------------------
Function MNTA045()

	Local aNGBeginPrm := {}
	Local oBrowse

	If !FindFunction( 'MNTAmIIn' ) .Or. MNTAmIIn( 19, 88, 35, 95 )

		aNGBeginPrm := NGBeginPrm()

		oBrowse := FWMBrowse():New()
		oBrowse:SetAlias("TPR")					// Alias da tabela utilizada
		oBrowse:SetMenuDef("MNTA045")			// Nome do fonte onde esta a função MenuDef
		oBrowse:SetDescription(STR0006)			// Descrição do browse -> "Caracteristicas"

		oBrowse:Activate()

		NGRETURNPRM( aNGBeginPrm )

	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Opções de menu

@author Vitor Emanuel Batista
@since 10/02/2012
@version P11
@return aRotina - Estrutura
[n,1] Nome a aparecer no cabecalho
[n,2] Nome da Rotina associada
[n,3] Reservado
[n,4] Tipo de Transação a ser efetuada:
1 - Pesquisa e Posiciona em um Banco de Dados
2 - Simplesmente Mostra os Campos
3 - Inclui registros no Bancos de Dados
4 - Altera o registro corrente
5 - Remove o registro corrente do Banco de Dados
6 - Alteração sem inclusão de registros
7 - Cópia
8 - Imprimir
[n,5] Nivel de acesso
[n,6] Habilita Menu Funcional
/*/
//---------------------------------------------------------------------
Static Function MenuDef()
	//Inicializa MenuDef com todas as opções
Return FWMVCMenu( 'MNTA045' )

//---------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Regras de Modelagem da gravacao

@author Vitor Emanuel Batista
@since 13/02/2012
@version P11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ModelDef()

	Local oModel

	Local oStructTPR := FWFormStruct(1,"TPR")

	// Cria o objeto do Modelo de Dados
	oModel := MPFormModel():New("MNTA045", /*bPre*/, /*bValid*/, /*bCommit*/, /*bCancel*/)

	// Adiciona ao modelo uma estrutura de formulário de edição por campo
	oModel:AddFields("MNTA045_TPR", Nil, oStructTPR,/*bPre*/,/*bPost*/,/*bLoad*/)

	// Descrição do Model
	oModel:SetDescription(STR0006)

Return oModel

//---------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Regras de Interface com o Usuario

@author Vitor Emanuel Batista
@since 13/02/2012
@version P11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function ViewDef()

	Local oModel := FWLoadModel("MNTA045")
	Local oView  := FWFormView():New()

	// Objeto do model a se associar a view.
	oView:SetModel(oModel)

	//Adiciona no nosso View um controle do tipo FormFields(antiga enchoice)
	oView:AddField( "MNTA045_TPR" , FWFormStruct(2,"TPR"), /*cLinkID*/ )	//

	// Criar um "box" horizontal para receber algum elemento da view
	oView:CreateHorizontalBox( "MASTER" , 100,/*cIDOwner*/,/*lFixPixel*/,/*cIDFolder*/,/*cIDSheet*/ )

	// Associa um View a um box
	oView:SetOwnerView( "MNTA045_TPR" , "MASTER" )

	//Inclusão de itens no Ações Relacionadas de acordo com o NGRightClick
	NGMVCUserBtn(oView)

Return oView

//-----------------------------------------------------------------
/*/{Protheus.doc} MNTA045VLD
Cria tabela temporária para utilização no filtro de características

@author Pedro Henrique Soares de Souza
@since 08/07/2014

@return { cARQFILSTB, cFilTRB }
/*/
//-----------------------------------------------------------------
Function MNTA045VLD()

	Local lRet := .F.

	Do Case
		Case ReadVar() $ "M->TPR_CODCAR"
		lRet := ExistChav( "TPR", M->TPR_CODCAR )
		Case ReadVar() $ "M->TPR_TPINFO"
		lRet := Pertence('1234')
		OtherWise
		lRet := .T.
	EndCase

Return lRet

//-----------------------------------------------------------------
/*/{Protheus.doc} MNTTRBSTB
Cria tabela temporária para utilização no filtro de características

@author Pedro Henrique Soares de Souza
@since 08/07/2014

@return { cARQFILSTB, cFilTRB }
/*/
//-----------------------------------------------------------------
Function MNT045TRB( lExclui, oTmpTbl, cTable )

	Local cFilTRB := GetNextAlias()
	Local aDBFFILSTB, vINDFILSTB
	Local oTMPFILSTB

	If Type("oTmpTbl") <> Nil //"U"
		oTMPFILSTB := oTmpTbl
	EndIf

	Default lExclui := .F.

	If !lExclui

		aDBFFILSTB := {{ "TB_CARACTE", "C", TAMSX3('TPR_CODCAR')[1], 0},;
		{ "TB_NOME"   , "C", TAMSX3('TPR_NOME')  [1], 0},;
		{ "TPR_TPINFO", "C", TAMSX3('TPR_TPINFO')[1], 0},;
		{ "TB_CONDOP" , "C", TAMSX3('TB_CONDOP') [1], 0},;
		{ "TB_DETALHE", "C", TAMSX3('TB_DETALHE')[1], 0},;
		{ "TB_INFO02" , "C", TAMSX3('TB_INFO02') [1], 0},;
		{ "TB_OBRIG"  , "C", 01, 0},;
		{ "TB_UNIDADE", "C", TAMSX3('TB_UNIDADE')[1], 0}}

		vINDFILSTB  := { "TB_CARACTE", "TB_NOME", "TB_OBRIG" }
		oTMPFILSTB	:= FWTemporaryTable():New( cFilTRB, aDBFFILSTB )
		oTMPFILSTB:AddIndex( "Ind01" , vINDFILSTB )
		oTMPFILSTB:Create()
	Else
		oTMPFILSTB:Delete()
	EndIf

Return { oTMPFILSTB, cFilTRB }

//----------------------------------------------------------------
/*/{Protheus.doc} MNT045FIL
Cria tela de filtro de características (utilização em relatórios)

@author Pedro Henrique Soares de Souza
@since 08/07/2014

@param cFilTRB Indica o nome da tabela temporária criada.

@return Nil Nulo
/*/
//----------------------------------------------------------------
Function MNT045FIL( cFilTRB )

	Local aArea   := GetArea()
	Local nCaract, nDescri, nCondOp, nTpInfo
	Local nDetail, nConte2, nObriga, nI
	Local oGet, oDlg, oPanel
	Local lOk
	Local aAlterCols := { "TB_CARACTE", "TB_OBRIG", "TB_CONDOP", "TB_DETALHE", "TB_INFO02" }
	Local cTitle     := ""
	Local cCampo     := ""
	Local cPict      := ""
	Local cValid     := ""
	Local cUso       := ""
	Local cType      := ""
	Local cF3        := ""
	Local cContext   := ""
	Local cCBOX      := ""
	Local cRelacao   := ""
	Local cWhen      := ""
	Local nTam       := 0
	Local nDec       := 0

	Private aCols    := {}
	Private aHeader  := {}

	//Limpa o bloco de código da tecla F4 para que o filtro não seja aberto duas vezes.
	SetKey(VK_F4, {|| })

	dbSelectArea( cFilTRB )
	dbSetOrder(1)
	dbGoTop()
	While !EoF()

		aAdd(aCols,{(cFilTRB)->TB_CARACTE,; // Indica a característica.
		            (cFilTRB)->TB_NOME,;    // Indica o nome da característica.
		            (cFilTRB)->TPR_TPINFO,; // Indica o tipo de campo da característica
		            (cFilTRB)->TB_CONDOP,;  // Indica a operação
		            (cFilTRB)->TB_DETALHE,; // Indica o 'Detalhe 1'
		            (cFilTRB)->TB_INFO02,;  // Indica o 'Detalhe 2'
		            (cFilTRB)->TB_UNIDADE,;	// Indica a unidade de medida
		            (cFilTRB)->TB_OBRIG,;	// Indica a característica.
		            .F.} )                  // Indica registros deletados

		dbSelectArea( cFilTRB )
		dbSkip()
	EndDo

	If Posicione("SX3",2,"TB_CARACTE","X3_ARQUIVO") <> ""

		cTitle   := Posicione("SX3",2,"TB_CARACTE","X3Titulo()")
		cCampo   := "TB_CARACTE"
		cPict    := X3Picture("TB_CARACTE")
		nTam     := TAMSX3("TB_CARACTE")[1]
		nDec     := TAMSX3("TB_CARACTE")[2]
		cValid   := "ExistCPO( 'TPR', M->TB_CARACTE ) .And. MNT045RSTB()"
		cUso     := Posicione("SX3",2,"TB_CARACTE","X3_USADO")
		cType    := Posicione("SX3",2,"TB_CARACTE","X3_TIPO")
		cF3      := Posicione("SX3",2,"TB_CARACTE","X3_F3")
		cContext := Posicione("SX3",2,"TB_CARACTE","X3_CONTEXT")
		cCBOX    := X3CBOX("TB_CARACTE")
		cRelacao := Posicione("SX3",2,"TB_CARACTE","X3_RELACAO")
		cWhen    := Posicione("SX3",2,"TB_CARACTE","X3_WHEN")

		aAdd(aHeader,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cF3, cContext, cCBOX, cRelacao, cWhen})
	EndIf

	If Posicione("SX3",2,"TB_NOME","X3_ARQUIVO") <> ""

		cTitle   := Posicione("SX3",2,"TB_NOME","X3Titulo()")
		cCampo   := "TB_NOME"
		cPict    := X3Picture("TB_NOME")
		nTam     := TAMSX3("TB_NOME")[1]
		nDec     := TAMSX3("TB_NOME")[2]
		cValid   := Posicione("SX3",2,"TB_NOME","X3_VALID")
		cUso     := Posicione("SX3",2,"TB_NOME","X3_USADO")
		cType    := Posicione("SX3",2,"TB_NOME","X3_TIPO")
		cF3      := Posicione("SX3",2,"TB_NOME","X3_F3")
		cContext := Posicione("SX3",2,"TB_NOME","X3_CONTEXT")
		cCBOX    := X3CBOX("TB_NOME")
		cRelacao := "''"
		cWhen    := ".F."

		aAdd(aHeader,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cF3, cContext, cCBOX, cRelacao, cWhen})
	EndIf

	If Posicione("SX3",2,"TPR_TPINFO","X3_ARQUIVO") <> ""

		cTitle   := Posicione("SX3",2,"TPR_TPINFO","X3Titulo()")
		cCampo   := "TPR_TPINFO"
		cPict    := "@!"
		nTam     := TAMSX3("TPR_TPINFO")[1]
		nDec     := TAMSX3("TPR_TPINFO")[2]
		cValid   := Posicione("SX3",2,"TPR_TPINFO","X3_VALID")
		cUso     := Posicione("SX3",2,"TPR_TPINFO","X3_USADO")
		cType    := Posicione("SX3",2,"TPR_TPINFO","X3_TIPO")
		cF3      := Posicione("SX3",2,"TPR_TPINFO","X3_F3")
		cContext := Posicione("SX3",2,"TPR_TPINFO","X3_CONTEXT")
		cCBOX    := X3CBOX("TPR_TPINFO")
		cRelacao := "''"
		cWhen    := ".F."

		aAdd(aHeader,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cF3, cContext, cCBOX, cRelacao, cWhen})
	EndIf

	If Posicione("SX3",2,"TB_CONDOP","X3_ARQUIVO") <> ""

		cTitle   := Posicione("SX3",2,"TB_CONDOP","X3Titulo()")
		cCampo   := "TB_CONDOP"
		cPict    := "@!"
		nTam     := TAMSX3("TB_CONDOP")[1]
		nDec     := TAMSX3("TB_CONDOP")[2]
		cValid   := "MNT045VSTB()"
		cUso     := Posicione("SX3",2,"TB_CONDOP","X3_USADO")
		cType    := Posicione("SX3",2,"TB_CONDOP","X3_TIPO")
		cF3      := Posicione("SX3",2,"TB_CONDOP","X3_F3")
		cContext := Posicione("SX3",2,"TB_CONDOP","X3_CONTEXT")
		cCBOX    := "1=Igual;2=Diferente;3=Menor;4=Maior;5=Menor ou Igual;6=Maior ou Igual;7=Entre"
		cRelacao := Posicione("SX3",2,"TB_CONDOP","X3_RELACAO")
		cWhen    := Posicione("SX3",2,"TB_CONDOP","X3_WHEN")

		aAdd(aHeader,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cF3, cContext, cCBOX, cRelacao, cWhen})
	EndIf

	If Posicione("SX3",2,"TB_DETALHE","X3_ARQUIVO") <> ""

		cTitle   := Posicione("SX3",2,"TB_DETALHE","X3Titulo()")
		cCampo   := "TB_DETALHE"
		cPict    := "@!"
		nTam     := TAMSX3("TB_DETALHE")[1]
		nDec     := TAMSX3("TB_DETALHE")[2]
		cValid   := Posicione("SX3",2,"TB_DETALHE","X3_VALID")
		cUso     := Posicione("SX3",2,"TB_DETALHE","X3_USADO")
		cType    := Posicione("SX3",2,"TB_DETALHE","X3_TIPO")
		cF3      := Posicione("SX3",2,"TB_DETALHE","X3_F3")
		cContext := Posicione("SX3",2,"TB_DETALHE","X3_CONTEXT")
		cCBOX    := X3CBOX("TB_DETALHE")
		cRelacao := Posicione("SX3",2,"TB_DETALHE","X3_RELACAO")
		cWhen    := Posicione("SX3",2,"TB_DETALHE","X3_WHEN")

		aAdd(aHeader,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cF3, cContext, cCBOX, cRelacao, cWhen})
	EndIf

	If Posicione("SX3",2,"TB_INFO02","X3_ARQUIVO") <> ""

		cTitle   := Posicione("SX3",2,"TB_INFO02","X3Titulo()")
		cCampo   := "TB_INFO02"
		cPict    := "@!"
		nTam     := TAMSX3("TB_INFO02")[1]
		nDec     := TAMSX3("TB_INFO02")[2]
		cValid   := Posicione("SX3",2,"TB_INFO02","X3_VALID")
		cUso     := Posicione("SX3",2,"TB_INFO02","X3_USADO")
		cType    := Posicione("SX3",2,"TB_INFO02","X3_TIPO")
		cF3      := Posicione("SX3",2,"TB_INFO02","X3_F3")
		cContext := Posicione("SX3",2,"TB_INFO02","X3_CONTEXT")
		cCBOX    := X3CBOX("TB_INFO02")
		cRelacao := Posicione("SX3",2,"TB_INFO02","X3_RELACAO")
		cWhen    := Posicione("SX3",2,"TB_INFO02","X3_WHEN")

		aAdd(aHeader,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cF3, cContext, cCBOX, cRelacao, cWhen})
	EndIf

	If Posicione("SX3",2,"TB_UNIDADE","X3_ARQUIVO") <> ""

		cTitle   := Posicione("SX3",2,"TB_UNIDADE","X3Titulo()")
		cCampo   := "TB_UNIDADE"
		cPict    := "@!"
		nTam     := TAMSX3("TB_UNIDADE")[1]
		nDec     := TAMSX3("TB_UNIDADE")[2]
		cValid   := Posicione("SX3",2,"TB_UNIDADE","X3_VALID")
		cUso     := Posicione("SX3",2,"TB_UNIDADE","X3_USADO")
		cType    := Posicione("SX3",2,"TB_UNIDADE","X3_TIPO")
		cF3      := Posicione("SX3",2,"TB_UNIDADE","X3_F3")
		cContext := Posicione("SX3",2,"TB_UNIDADE","X3_CONTEXT")
		cCBOX    := X3CBOX("TB_UNIDADE")
		cRelacao := Posicione("SX3",2,"TB_UNIDADE","X3_RELACAO")
		cWhen    := Posicione("SX3",2,"TB_UNIDADE","X3_WHEN")

		aAdd(aHeader,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cF3, cContext, cCBOX, cRelacao, cWhen})
	EndIf

	aAdd( aHeader, { STR0008, "TB_OBRIG", "@!", 1, 0, "Pertence('12')", "", "C", "", "", STR0009, "'1'"}) //"Obrigatório" ## "1=Sim;2=Não"
	DEFINE MSDIALOG oDlg Title STR0010 From 08,15 To 400,600 Of oMainWnd Pixel //"Filtro de Características"

		oPanel := TPanel():New( 01, 01,, oDlg,,,,,,,, .F., .F. )
		oPanel:Align := CONTROL_ALIGN_ALLCLIENT

		oGet := MsNewGetDados():New( 0, 0, 1000, 1000, GD_INSERT + GD_UPDATE + GD_DELETE, ;
		{|| fLinOk(oGet, .T.)},{|| fLinOk( oGet )},, aAlterCols,, 9999,,,, oPanel, aHeader, aCols )

		oGet:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
		oGet:oBrowse:Refresh()

	ACTIVATE MSDIALOG oDlg ON INIT (EnchoiceBar(oDlg, {|| If( fTudoOk( oGet ), (lOk := .T., oDlg:End()), lOk := .F.)},;
	                                                  {|| lOk := .F., oDlg:End() })) Centered

	If lOk
		dbSelectArea( cFilTRB )
		dbSetOrder(1)

		nCaract := aScan( aHeader,{|x| Trim( Upper(x[2]) ) == "TB_CARACTE"})
		nDescri := aScan( aHeader,{|x| Trim( Upper(x[2]) ) == "TB_NOME"   })
		nCondOp := aScan( aHeader,{|x| Trim( Upper(x[2]) ) == "TB_CONDOP" })
		nDetail := aScan( aHeader,{|x| Trim( Upper(x[2]) ) == "TB_DETALHE"})
		nConte2 := aScan( aHeader,{|x| Trim( Upper(x[2]) ) == "TB_INFO02" })
		nObriga := aScan( aHeader,{|x| Trim( Upper(x[2]) ) == "TB_OBRIG"  })
		nTpInfo := aScan( aHeader,{|x| Trim( Upper(x[2]) ) == "TPR_TPINFO"})
		nUnidad := aScan( aHeader,{|x| Trim( Upper(x[2]) ) == "TB_UNIDADE"})

		For nI := 1 To Len( oGet:aCols )
			If !ATail(oGet:aCols[nI])
				If !dbSeek(oGet:aCols[nI][nCaract])
					RecLock( cFilTRB, .T. )
					(cFilTRB)->TB_CARACTE   := oGet:aCols[nI][nCaract]
					(cFilTRB)->TB_NOME      := oGet:aCols[nI][nDescri]
					(cFilTRB)->TPR_TPINFO   := oGet:aCols[nI][nTpInfo]
					(cFilTRB)->TB_CONDOP    := oGet:aCols[nI][nCondOp]
					(cFilTRB)->TB_DETALHE   := oGet:aCols[nI][nDetail]
					(cFilTRB)->TB_INFO02    := oGet:aCols[nI][nConte2]
					(cFilTRB)->TB_OBRIG     := oGet:aCols[nI][nObriga]
					(cFilTRB)->TB_UNIDADE	:= oGet:aCols[nI][nUnidad]
					(cFilTRB)->(MsUnlock())
				EndIf
			EndIf
		Next nI
	Endif

	//Coloca a função do filtro novamente no bloco de código da tecla F4
	SetKey(VK_F4, {|| MNT045FIL( vFilTRB[2])})

	RestArea(aArea)

Return Nil

//----------------------------------------------------------------
/*/{Protheus.doc} MNT045STB
Verifica filtro de características a partir do código do bem e da
tabela temporária criada para o filtro.

@author Pedro Henrique Soares de Souza
@since 09/07/2014

@param cCodBem  - Indica o código do bem
@param cFilTRB  - Indica o nome da TRB utilizada

@return lRet Lógico
/*/
//----------------------------------------------------------------
Function MNT045STB( cCodBem, cFilTRB )

	Local aArea   := GetArea()
	Local aCarac  := {}
	Local lRet    := .F.
	Local nI

	dbSelectArea(cFilTRB)
	dbSetOrder(1)
	dbGoTop()
	While !EoF()
		aAdd( aCarac, { ((cFilTRB)->TB_OBRIG == '1'),;      // Indica se é ou não obrigatório.
		(cFilTRB)->TB_CARACTE,;         // Indica a característica.
		(cFilTRB)->TPR_TPINFO,;         // Indica o tipo de campo da característica
		(cFilTRB)->TB_CONDOP,;          // Indica a operação
		(cFilTRB)->TB_DETALHE,;         // Indica o 'Detalhe 1'
		(cFilTRB)->TB_INFO02,;						// Indica o 'Detalhe 2'
		(cFilTRB)->TB_UNIDADE })						// Indica a unidade de medida

		dbSelectArea(cFilTRB)
		dbSkip()
	EndDo

	For nI := 1 To Len(aCarac)

		dbSelectArea("STB")
		dbSetOrder(1)
		If dbSeek( xFilial("STB") + cCodBem + aCarac[nI][2])
			// Caso tenha a característica e não esteja de acordo com o filtro retorna .T.
			If !fCheckFil( STB->TB_DETALHE, STB->TB_INFO02, aCarac[nI][4], aCarac[nI][5], aCarac[nI][6], aCarac[nI][3], aCarac[nI][7])
				lRet := .T.
				Exit
			EndIf
		Else
			// Caso não tenha a característica e seja obrigatória retorna .T.
			If aCarac[nI][1]
				lRet := .T.
				Exit
			EndIf
		EndIf
	Next nI

	RestArea(aArea)

Return lRet

//----------------------------------------------------------------
/*/{Protheus.doc} fLinOk
Valida MsNewGetDados utilizado na função MNT045FIL

@author Pedro Henrique Soares de Souza
@since 09/07/2014

@param lLinOk - Indica se é LinhaOk (.T.) ou TudoOk (.F.)
@param oGet - Objeto do MsNewGetDados

@return lRet Lógico
/*/
//----------------------------------------------------------------
Static Function fLinOk( oGet, lLinOk )

	Local nCaract, nCondOp, nDetail, nConte2
	Local nI, nAt, nQtd := 0
	Local aColsOk, aHeadOk
	Local lRet := .T.

	Default lLinOk := .F.

	aColsOk := aClone( oGet:aCols )
	aHeadOk := aClone( oGet:aHeader )
	nAt     := oGet:nAt

	nTpInfo := aScan( aHeader, {|x| Trim(Upper(x[2])) == "TPR_TPINFO" })
	nCaract := aScan( aHeader, {|x| Trim(Upper(x[2])) == "TB_CARACTE" })
	nCondOp := aScan( aHeader, {|x| Trim(Upper(x[2])) == "TB_CONDOP" })
	nDetail := aScan( aHeader, {|x| Trim(Upper(x[2])) == "TB_DETALHE" })
	nConte2 := aScan( aHeader, {|x| Trim(Upper(x[2])) == "TB_INFO02" })

	For nI:= 1 to Len(aColsOk)
		If !aColsOk[nI][Len(aColsOk[nI])]
			If !lLinOk .Or. nI == nAt
				If Empty(aColsOk[nI][nCaract])
					Help(" ", 1, "NGATENCAO",, STR0011, 1, 0) //"O campo 'Característica' não pode ficar vazio!"
					lRet := .F.
				Endif

				If lRet .And. Empty(aColsOk[nI][nDetail])
					Help(" ", 1, "NGATENCAO",, STR0012, 1, 0) //"O campo 'Detalhe 1' não pode ficar vazio!"
					lRet := .F.

				Endif

				If lRet .And. aColsOk[nI][nCondOp] == '7'
					If Empty( aColsOk[nI][nConte2] )
						Help(" ",1, "NGATENCAO",, STR0013, 1, 0) //"Quando a Operação conter 'Entre' o campo 'Detalhe 2' não pode ficar vazio!"
						lRet := .F.
					EndIf

				EndIf

			Endif

			If lRet .And. nI <> nAt .And. !ATail(aColsOk[nAt])
				If aColsOk[nI][nCaract] == aColsOk[nAt][nCaract]
					Help(" ", 1, "JAEXISTINF",, aHeadOk[nCaract][1])
					lRet := .F.
				Endif
			Endif

			If !lRet
				Exit
			EndIf
		Endif
	Next nI

Return lRet

//----------------------------------------------------------------
/*/{Protheus.doc} fTudoOk
Valida tela utilizada na função MNT045FIL

@author Pedro Henrique Soares de Souza
@since 09/07/2014

@param oGet - Objeto do MsNewGetDados

@return lRet Lógico
/*/
//----------------------------------------------------------------
Static Function fTudoOk( oGet )

	Local lRet := .T.

	If !fLinOk(oGet, .F.)
		lRet := .F.
	EndIf

Return lRet

//----------------------------------------------------------------
/*/{Protheus.doc} fCheckFil
Verifica se a etapa faz parte do filtro

@author Pedro Henrique Soares de Souza
@since 15/07/2014

@param cConteudo1 Indica o 'Detalhe 1' da tabela STB
@param cConteudo2 Indica o 'Detalhe 2' da tabela STB
@param cOp Indica a operação utilizada no filtro
@param cInfo1 Indica o 'Detalhe 1' utilizada no filtro
@param cInfo2 Indica o 'Detalhe 2' utilizada no filtro
@param cTpInfo Indica o tipo de informação da característica

@return lRet Lógico
/*/
//----------------------------------------------------------------
Static Function fCheckFil( cConteudo1, cConteudo2, cOp, cInfo1, cInfo2, cTpInfo, cUnidade)

	Local aArea   := GetArea()
	Local lRet    := .F.
	Local cCondOp, cCondicao

	//Verifica se é a mesma unidade de medida
	If cUnidade == STB->TB_UNIDADE
		// Caso o tipo de informação seja Caráter ou Data adiciona aspas simples para validação
		If cTpInfo $ '1/3'
			cInfo1      := "'" + AllTrim(cInfo1) + "'"
			cInfo2      := "'" + AllTrim(cInfo2) + "'"
			cConteudo1  := "'" + AllTrim(cConteudo1) + "'"

			If !Empty( cConteudo2 )
				cConteudo2  := "'" + AllTrim(cConteudo2) + "'"
			EndIf
		EndIf

		// Verifica o tipo de operação do filtro
		Do Case
			Case cOp == "1"
			cCondOp := '#X1# == #Y1#'
			Case cOp == "2"
			cCondOp := '#X1# <> #Y1#'
			Case cOp == "3"
			cCondOp := '#X1# < #Y1#'
			Case cOp == "4"
			cCondOp := '#X1# > #Y1#'
			Case cOp == "5"
			cCondOp := '#X1# <= #Y1#'
			Case cOp == "6"
			cCondOp := '#X1# >= #Y1#'
			Case cOp == "7"
			cCondOp := '#X1# > #Y1# .AND. #X1# < #Y2#'
			OtherWise
			cCondOp := Space(TAMSX3('TB_CONDOP')[1])
		EndCase

		/*---------------------------------------------------------------
		Caso o 'Detalhe 02' da característica da STB esteja vazia...
		(Isso indica que a operação dela é 'Igual', se não, indica que
		a operação é 'Entre'.
		---------------------------------------------------------------*/
		If Empty( cConteudo2 )

			/*---------------------------------------------------------------
			Caso o tipo de informação seja Data, adiciona conversor CToD para
			comparação futura.
			---------------------------------------------------------------*/
			If cTpInfo == '3'
				cCondicao := StrTran( cCondOp, '#X1#', 'CToD(#X1#)')
				cCondicao := StrTran( cCondicao, '#Y1#', 'CToD(#Y1#)')

				If cOp == '7'
					cCondicao := StrTran( cCondicao, '#Y2#', 'CToD(#Y2#)')
				EndIf
			EndIf

			cCondicao := StrTran( cCondOp, '#X1#', cConteudo1 )
			cCondicao := StrTran( cCondicao, '#Y1#', cInfo1 )

			// Caso a operação do filtro seja 'Entre', substitui também o 'Detalhe 02'
			If cOp == '7'
				cCondicao := StrTran( cCondicao, '#Y2#', cInfo2 )
			EndIf
		Else
			If cOp == '1'
				//Caso a opção da fórmula seja 'Igual'
				cCondicao := '#Y1# >= #X1# .AND. #Y1# <= #X2#'

			ElseIf cOp == '2'
				//Caso a opção da fórmula seja 'Diferente'
				cCondicao := '#Y1# < #X1# .OR. #Y1# > #X2#'

			ElseIf cOp == '7'
				//Caso a opção da fórmula seja 'Entre'
				cCondicao := '(#Y1# > #X1# .AND. #Y1# < #X2#) .OR. (#Y2# > #X1# .AND. #Y2# < #X2#) .OR. '
				cCondicao += '(#Y1# <= #X2# .AND. #Y2# > #X1#)'

				/*---------------------------------------------------------------
				Caso o tipo de informação seja Data, adiciona conversor CToD para
				comparação futura.
				---------------------------------------------------------------*/
				If cTpInfo == '3'
					cCondicao := StrTran( cCondicao, '#Y2#', 'CToD(#Y2#)')
				EndIf

				// Subsitui Y2 pelo 'Detalhe 02' do filtro
				cCondicao := StrTran( cCondicao, '#Y2#', cInfo2 )

			Else
				/*---------------------------------------------------------------
				Caso opção da fórmula seja >, <, >= ou <=, utiliza apenas o
				operador, e cria uma nova validação
				---------------------------------------------------------------*/
				cCondOp := StrTran( cCondOp, '#X1#', '' )
				cCondOp := StrTran( cCondOp, '#Y1#', '' )

				cCondicao := '#X1# ' + cCondOp + ' #Y1# .OR. #X2# ' + cCondOp + ' #Y1#'
			EndIf

			/*---------------------------------------------------------------
			Caso o tipo de informação seja Data, adiciona conversor CToD para
			comparação futura.
			---------------------------------------------------------------*/
			If cTpInfo == '3'
				cCondicao := StrTran( cCondicao, '#X1#', 'CToD(#X1#)')
				cCondicao := StrTran( cCondicao, '#X2#', 'CToD(#X2#)')
				cCondicao := StrTran( cCondicao, '#Y1#', 'CToD(#Y1#)')
			EndIf

			cCondicao := StrTran( cCondicao, '#X1#', cConteudo1 )
			cCondicao := StrTran( cCondicao, '#X2#', cConteudo2 )
			cCondicao := StrTran( cCondicao, '#Y1#', cInfo1 )
		EndIf

		lRet := &(cCondicao)

	EndIf
	RestArea(aArea)






Return lRet

//-----------------------------------------------------------------
/*/{Protheus.doc} MNT045RSTB
Valida Relação do campo TPR_TPINFO utilizado no filtro de
características (Função MNT045FIL)

@author Pedro Henrique Soares de Souza
@since 15/07/2014
@return .T.
/*/
//-----------------------------------------------------------------
Function MNT045RSTB()

	Local nCarac

	nTpInfo := aScan( aHeader, {|x| AllTrim( Upper( x[2] ) ) == "TPR_TPINFO" })

	If nTpInfo > 0
		If !Empty(M->TB_CARACTE)
			aCols[n][nTpInfo] := NGSEEK("TPR", M->TB_CARACTE, 1, "TPR_TPINFO" )
		EndIf
	EndIf

Return .T.

//-----------------------------------------------------------------
/*/{Protheus.doc} MNT045VSTB
Valid do campo TB_CONDOP utilizado no filtro de
características (Função MNT045FIL)

@author Pedro Henrique Soares de Souza
@since 15/07/2014
@return .T.
/*/
//-----------------------------------------------------------------
Function MNT045VSTB()

	Local nCarac
	Local lRet := .T.

	nTpInfo := aScan( aHeader, {|x| AllTrim( Upper( x[2] ) ) == "TPR_TPINFO" })

	If nTpInfo > 0
		If aCols[n][nTpInfo] $ '2/3'
			lRet := Pertence('1234567')
		Else
			lRet := Pertence('12')

			If !lRet
				Help(" ",1,"NGATENCAO",, "Para 'Tipo de Informação' igual a caráter ou lógico só é possível utilizar as operações 'Igual' e 'Diferente'." , 1, 0)
			EndIf
		EndIf
	EndIf

Return lRet
