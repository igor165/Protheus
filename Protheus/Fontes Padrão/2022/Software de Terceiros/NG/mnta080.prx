#INCLUDE "MNTA080.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

Static oST9 := Nil
Static lRel12133 := GetRPORelease() >= '12.1.033'
Static lGFrota := IIf( lRel12133, MNTFrotas(), GetNewPar('MV_NGMNTFR','N') == 'S' )

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080
Cadastro de Bens

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function MNTA080()

	Local aNGBeginPrm := {}
	Local cFiltro     := "ST9->T9_CATBEM $ '1'"
	Local cError      := ''
	Local cSolution   := ''
	Local lMNTA080N   := ExistBlock( 'MNTA080N' )
	Local lValid      := .T.
	Local oBrowse

	If !FindFunction( 'MNTAmIIn' ) .Or. MNTAmIIn( 19, 95 )

		aNGBeginPrm := NGBeginPrm()

		Private cCadastro := STR0348 //"Cadastro de Bens"
		Private nOptRot   := 3

		//Variaveis utilizadas na consulta de OS referente ao bem corrente
		Private TIPOACOM  := IIF(M->T9_TEMCONT <> "N",.T.,.F.)
		Private TIPOACOM2 := IIF(M->TPE_SITUAC <>  2 ,.T.,.F.)
		Private lSITUACA  := .F.

		If !NGCADICBASE('T6_CATBEM','A','ST6',.F.)
			lValid    := .F.
			cError    := STR0388 //'Para cadastro de veículos, precisa da ultima release 12.1.7.'
			cSolution := STR0389 //'Atualizar o ambiente.'
		EndIf

		If lValid
			If lMNTA080N
				cFiltro += ExecBlock("MNTA080N",.F.,.F.)
			EndIf
			//Initializes Browse
			oBrowse := FWMBrowse():New()
			oBrowse:SetAlias( 'ST9' )
			oBrowse:SetDescription( cCadastro )
			oBrowse:SetFilterDefault( cFiltro )
			oBrowse:SetMenuDef('MNTA080')
			LegendST9( oBrowse )
			oBrowse:Activate()
		ElseIf !Empty( cError )
			//Show error
			Help( " ",1,STR0086,,cError + CRLF + cSolution,3,1 ) //"NAO CONFORMIDADE"
		EndIf

		NGReturnPrm( aNGBeginPrm )

	EndIf

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} LegendST9
Caption Browse

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function LegendST9( oBrowse )

	oBrowse:AddLegend("ST9->T9_SITBEM == 'A' .And. ST9->T9_SITMAN = 'A'","BR_VERDE"   ,STR0349) //"Bem Ativo Manutenção Ativo"
	oBrowse:AddLegend("ST9->T9_SITBEM == 'A' .And. ST9->T9_SITMAN = 'I'","BR_AMARELO" ,STR0350) //"Bem Ativo Manutenção Inativo"
	oBrowse:AddLegend("ST9->T9_SITBEM == 'I' .And. ST9->T9_SITMAN = 'A'",'BR_AZUL'    ,STR0351) //"Bem Inativo Manutenção Ativo"
	oBrowse:AddLegend("ST9->T9_SITBEM == 'I' .And. ST9->T9_SITMAN = 'I'",'BR_VERMELHO',STR0352) //"Bem Inativo Manutenção Inativo"
	oBrowse:AddLegend("ST9->T9_SITBEM == 'T'"                           ,'BR_CINZA'   ,STR0196) //"Bem Transferido"

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Menu Options

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Array - aRotina
/*/
//------------------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina := {}

	ADD OPTION aRotina Title STR0005 Action 'MNTA080CAD("ST9",ST9->(Recno()),2,"1")' OPERATION 2 ACCESS 0   //'Visualizar'
	ADD OPTION aRotina Title STR0006 Action 'MNTA080CAD("ST9",,3,"1")'               OPERATION 3 ACCESS 0   //'Incluir'
	ADD OPTION aRotina Title STR0231 Action 'MNTA080CAD("ST9",ST9->(Recno()),9,"1")' OPERATION 9 ACCESS 0   //'Copiar'
	ADD OPTION aRotina Title STR0007 Action 'MNTA080CAD("ST9",ST9->(Recno()),4,"1")' OPERATION 4 ACCESS 0   //'Alterar'
	ADD OPTION aRotina Title STR0354 Action 'VIEWDEF.MNTA080'                        OPERATION 8 ACCESS 0   //'Imprimir'
	ADD OPTION aRotina Title STR0353 Action 'MNTA080INA()'                           OPERATION 6 ACCESS 0   //'Inativar'
	ADD OPTION aRotina Title STR0008 Action 'MNTA080CAD("ST9",ST9->(Recno()),5,"1")' OPERATION 5 ACCESS 141 //'Excluir'

	If ExistBlock( 'MNTA080M' )
		aRotina := ExecBlock( 'MNTA080M', .F., .F., { aRotina } )
	EndIf

	If Type("__lPyme") == "U" .Or. !__lPyme
		ADD OPTION aRotina Title STR0035 Action 'MsDocument' OPERATION 4 ACCESS 0 //"Conhecimento"
	EndIf

Return aRotina

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080CAD
Apresenta cadastro de bens

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function MNTA080CAD( cAlias , nRecno , nOperation , cCatBem )

	Local aNGBeginPrm := NGBeginPrm()
	Local oExecView
    Local aAreaST9    := {}

	// Validation
	Local lValid	:= .T.
	Local cError	:= ""
	Local cSolution := ""

	Default cCatBem := ""

	If !NGCADICBASE('T6_CATBEM','A','ST6',.F.)//!NGCHKDIC( 2,, "T6_CATBEM" )
		lValid := .F.
		cError := STR0382    // 'Para cadastro de veículos, precisa da ultima release 12.1.7.'
		cSolution := STR0383 // 'Atualizar o ambiente.'
	EndIf

	If lValid
		If nOperation == 3
			If Len( AllTrim( cCatBem ) ) != 1
				cCatBem := fCatBem( cCatBem )
			EndIf
		Else
			dbSelectArea('ST9')
			DBGoTo( nRecno )
			cCatBem := ST9->T9_CATBEM
		EndIf

		If cCatBem == "2" .Or. cCatBem == "4"
			cRotinaST9 := "MNTA084"
			cCadastro  := STR0357  //"Cadastro de Veículos"
		ElseIf cCatBem == '3'
			cRotinaST9 := 'MNTA083'
			cCadastro  := STR0356 //"Cadastro de Pneus"
		Else
			cRotinaST9 := 'MNTA080'
			cCadastro  := STR0348 //"Cadastro de Bens"
		EndIf

		nOptRot := nOperation

		//Operação visualização não precisa paramentro
		If nOperation == 2
			nOperation := Nil
		EndIf

		oExecView := FWViewExec():New()
		oExecView:SetTitle(cCadastro)
		oExecView:SetSource(cRotinaST9)
		oExecView:SetOK({|| .T.})
		oExecView:SetModal(.F.)
		oExecView:SetOperation(nOperation)
		oExecView:OpenView(.F.)

        dbSelectArea("ST9")
		dbSetOrder(1)
		dbGoTo(Recno())
		aAreaST9 := GetArea()

		NGReturnPrm( aNGBeginPrm )

        RestArea(aAreaST9)

	ElseIf !Empty( cError )
		//----------------------------------------------------------------------
		// Show error
		//----------------------------------------------------------------------
		Help( " ",1,STR0086,,cError + CRLF + cSolution,3,1 ) // "NAO CONFORMIDADE"
	EndIf

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Modelo de dados da rotina

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return oModel
/*/
//------------------------------------------------------------------------------
Static Function ModelDef()

	Local oModel
	Local bPosValid := {|oModel| ValidInfo(oModel)	}  // Validação final
	Local bCommit   := {|oModel| CommitInfo(oModel) } // Gravação do formulario
	Local bCancel   := {|oModel| ValCancel(oModel) }

	// Cria o objeto do Modelo de Dados
	oModel := MPFormModel():New('MNTA080', , bPosValid , bCommit , bCancel )

	// Adiciona a descricao do Modelo de Dados
	oModel:SetDescription( STR0348 ) //"Cadastro de Bens"

	// Assets
	ModelST9(oModel)

	// Details
	ModelSTB(oModel)

	// Spare Parts
	ModelTPY(oModel)

	// Counter
	ModelTPE(oModel)

	//Tank
	ModelTT8(oModel)

Return oModel

//------------------------------------------------------------------------------
/*/{Protheus.doc} ModelST9
Modelo de dados da ST9

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Static Function ModelST9( oModel )

	Local aFldNoCopy := {}
	Local cAlias     := 'ST9'
	Local cModelId   := oModel:cId + '_' + cAlias
	Local oModelAux  := Nil
	Local oStructAux := FWFormStruct( 1, cAlias ) // Cria a estrutura a ser usada no Modelo de Dados
	
	// Para o módulo 95 (SIGAGFR), o campo T9_TIPMOD é obrigatório
	If lRel12133 .And. nModulo == 95
		oStructAux:SetProperty("T9_TIPMOD", MODEL_FIELD_OBRIGAT, .T.)
	EndIf
	
	//Remove campos de Veiculos
	oStructAux:RemoveField("T9_LOCPAD" )
	oStructAux:RemoveField("T9_CODTMS" )
	oStructAux:RemoveField("T9_PLACA"  )
	oStructAux:RemoveField("T9_CAPMAX" )
	oStructAux:RemoveField("T9_MEDIA"  )
	oStructAux:RemoveField("T9_TIPVEI" )
	oStructAux:RemoveField("T9_CHASSI" )
	oStructAux:RemoveField("T9_CORVEI" )
	oStructAux:RemoveField("T9_DESCOR" )
	oStructAux:RemoveField("T9_CIDEMPL")
	oStructAux:RemoveField("T9_UFEMPLA")
	oStructAux:RemoveField("T9_RENAVAM")
	oStructAux:RemoveField("T9_NRMOTOR")
	oStructAux:RemoveField("T9_CEREVEI")
	oStructAux:RemoveField("T9_MEDMIN" )
	oStructAux:RemoveField("T9_VALANO" )

	//Ponto de entrada para remover campos da tela
	If ExistBlock("MNTA080O")
		ExecBlock("MNTA080O",.F.,.F.,{1,cAlias,oStructAux})
	EndIf

	// Define campos que não podem ser copiados
	aAdd( aFldNoCopy, 'T9_CODIMOB' )
	aAdd( aFldNoCopy, 'T9_POSCONT' )
	aAdd( aFldNoCopy, 'T9_DTULTAC' )
	aAdd( aFldNoCopy, 'T9_CONTACU' )
	aAdd( aFldNoCopy, 'T9_VARDIA'  )
	aAdd( aFldNoCopy, 'T9_LIMICON' )
	aAdd( aFldNoCopy, 'T9_ESTRUTU' )
	aAdd( aFldNoCopy, 'T9_STATUS'  )
	aAdd( aFldNoCopy, 'T9_SITMAN'  )
	aAdd( aFldNoCopy, 'T9_SITBEM'  )
	aAdd( aFldNoCopy, 'T9_DTBAIXA' )
	aAdd( aFldNoCopy, 'T9_MTBAIXA' )
	aAdd( aFldNoCopy, 'T9_COMPRAD' )
	aAdd( aFldNoCopy, 'T9_DTVENDA' )
	aAdd( aFldNoCopy, 'T9_NFVENDA' )

	// To Do: Poderá ser removido na realese quando a realese 12.1.27 estiver obsoleta.
	If Trim( Posicione( 'SX3', 2, 'T9_CODIMOB', 'X3_VALID' ) ) == 'MNTA080VLD()'

		// Altera VALID utilizado no VIEW do campo T9_CODIMOB.
		oStructAux:SetProperty( 'T9_CODIMOB', MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, 'MNTA080VLD( , .T. )' ) )

	EndIf

	// Adiciona ao modelo uma estrutura de formulário de edição por campo
	oModel:AddFields( cModelId , , oStructAux )

	// Retorna componente especifico
	oModelAux := oModel:GetModel( cModelId )

	// Adiciona lista de campos ao modelo
	oModelAux:SetFldNoCopy( aFldNoCopy )

	// Adiciona a descricao do Componente do Modelo de Dados
	oModelAux:SetDescription( NgSX2Nome( cAlias ) )

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ModelSTB
Modelo de dados da STB

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function ModelSTB( oModel )

	Local oModelAux
	Local aUnique := {}
	Local aRelation := {}
	Local cAlias := 'STB'
	Local cModelId := oModel:cId + '_' + cAlias

	// Cria a estrutura a ser usada no Modelo de Dados
	Local oStructAux := FWFormStruct( 1, cAlias )

	// Validação de linha STB
	Local bLinePost := {|oModelGrid| LineSTBVld(oModelGrid)}

	//Retira campo obrigatório do Model, já que não será apresentado
	oStructAux:RemoveField("TB_CODBEM")

	// Define relacionamento entre ST9 e STB
	aAdd( aRelation , { 'TB_FILIAL' , 'xFilial( "STB" )' } )
	aAdd( aRelation , { 'TB_CODBEM' , 'T9_CODBEM' } )

	// Indica qual a chave que não pode repetir na grid
	aAdd( aUnique , 'TB_CARACTE' )

	// Adiciona ao modelo uma estrutura de formulário de edição por grid
	oModel:AddGrid( cModelId , oModel:cId + '_ST9' , oStructAux , , bLinePost )

	//Ponto de entrada para remover campos da tela
	If ExistBlock("MNTA080O")
		ExecBlock("MNTA080O",.F.,.F.,{1,cAlias,oStructAux})
	EndIf

	// Retorna o submodelo
	oModelAux := oModel:GetModel( cModelId )

	// Faz relaciomaneto entre os compomentes do model
	oModelAux:SetRelation( aRelation , ( cAlias )->( IndexKey( 1 ) ) )

	// Indica que o submodelo deve trabalhar com acols/aheader
	oModelAux:SetUseOldGrid(.T.)

	// Liga o controle de nao repeticao de linha
	oModelAux:SetUniqueLine( aUnique )

	// Indica que é opcional ter dados informados na Grid
	oModelAux:SetOptional(.T.)

	// Adiciona a descricao do Modelo de Dados
	oModelAux:SetDescription( NgSX2Nome( cAlias ) )

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ModelTPY
Modelo de dados da TPY

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function ModelTPY( oModel )

	Local oModelAux
	Local aUnique := {}
	Local aRelation := {}
	Local cAlias := 'TPY'
	Local cModelId := oModel:cId + '_' + cAlias

	// Cria a estrutura a ser usada no Modelo de Dados
	Local oStructAux := FWFormStruct( 1, cAlias )

	// Validação de linha TPY
	Local bLinePost := {|oModelGrid| LineTPYVld(oModelGrid)}

	//Retira campo obrigatório do Model, já que não será apresentado
	oStructAux:RemoveField("TPY_CODBEM")

	// Define relacionamento entre ST9 e STB
	aAdd( aRelation , { 'TPY_FILIAL' , 'xFilial( "TPY" )' } )
	aAdd( aRelation , { 'TPY_CODBEM' , 'T9_CODBEM' } )

	// Indica qual a chave que não pode repetir na grid
	aAdd( aUnique , 'TPY_CODPRO' )
	aAdd( aUnique , 'TPY_LOCGAR' )

	// Adiciona ao modelo uma estrutura de formulário de edição por grid
	oModel:AddGrid(cModelId , oModel:cId + '_ST9' , oStructAux , , bLinePost )

	//Ponto de entrada para remover campos da tela
	If ExistBlock("MNTA080O")
		ExecBlock("MNTA080O",.F.,.F.,{1,cAlias,oStructAux})
	EndIf

	// Retorna submodelo
	oModelAux := oModel:GetModel( cModelId )

	// Faz relaciomaneto entre os compomentes do model
	oModelAux:SetRelation( aRelation , ( cAlias )->(IndexKey(1)) )

	// Indica que o submodelo deve trabalhar com acols/aheader
	oModelAux:SetUseOldGrid(.T.)

	// Liga o controle de nao repeticao de linha
	oModelAux:SetUniqueLine( aUnique )

	// Indica que é opcional ter dados informados na Grid
	oModelAux:SetOptional(.T.)

	// Adiciona a descricao do Modelo de Dados
	oModelAux:SetDescription( NgSX2Nome( cAlias ) )

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ModelTPE
Modelo de dados da TPE

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function ModelTPE( oModel )

	Local oModelAux
	Local aRelation := {}
	Local cAlias    := 'TPE'
	Local cModelId  := oModel:cId + '_' + cAlias
	Local xInitPad  := FwBuildFeature( STRUCT_FEATURE_INIPAD,'""' )

	// Cria a estrutura a ser usada no Modelo de Dados
	Local oStructAux := FWFormStruct( 1, cAlias )

	oStructAux:SetProperty( '*' , MODEL_FIELD_OBRIGAT, .F. )
	oStructAux:SetProperty( 'TPE_CODBEM' , MODEL_FIELD_INIT, xInitPad )

	// Define relacionamento entre ST9 e STB
	aAdd( aRelation , { 'TPE_FILIAL' , 'xFilial( "TPE" )' } )
	aAdd( aRelation , { 'TPE_CODBEM' , 'T9_CODBEM' } )

	//Ponto de entrada para remover campos da tela
	If ExistBlock("MNTA080O")
		ExecBlock("MNTA080O",.F.,.F.,{1,cAlias,oStructAux})
	EndIf

	// Adiciona ao modelo uma estrutura de formulário de edição por campo
	oModel:AddFields( cModelId , oModel:cId + '_ST9' , oStructAux )

	// Retorna submodelo
	oModelAux := oModel:GetModel( cModelId )

	// Faz relaciomaneto entre os compomentes do model
	oModelAux:SetRelation( aRelation , ( cAlias )->( IndexKey( 1 ) ) )

	// Adiciona a descricao do Componente do Modelo de Dados
	oModelAux:SetDescription( NgSX2Nome( cAlias ) )

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Interface da rotina

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return oView
/*/
//------------------------------------------------------------------------------
Static Function ViewDef

	// Cria um objeto de Modelo de Dados baseado no ModelDef do fonte informado
	Local oModel   := FWLoadModel( 'MNTA080' )
	Local aRemoveBtn, aWhenBtn

	// Cria o objeto de View
	oView := FWFormView():New()

	// Define qual o Modelo de dados será utilizado
	oView:SetModel( oModel )

	// Cria Box na view
	oView:CreateHorizontalBox( 'MAIN', 100 )

	// Cria Folder na view
	oView:CreateFolder( 'MAIN_FOLDER' , 'MAIN' )

	// Asset
	ViewST9( oView , oModel )

	// Details
	ViewSTB( oView , oModel )

	// Spare Parts
	ViewTPY( oView , oModel )

	// Counter
	ViewCounter( oView , oModel )

	//Tank
	ViewTT8( oView , oModel )

	// Complementos
	aRemoveBtn	:= MNTRemovBtn('MNTA080')
	aWhenBtn	:= WhenBtn()

	//Inclusão de itens no Ações Relacionadas de acordo com o NGRightClick
	NGMVCUserBtn(oView , , aRemoveBtn , aWhenBtn )

Return oView

//------------------------------------------------------------------------------
/*/{Protheus.doc} ViewST9
View from ST9

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Static Function ViewST9( oView , oModel )

	Local cAlias := 'ST9'
	Local cTabView := 'ABA_' + cAlias
	Local cBoxView := 'BOX_' + cAlias

	// Cria a estrutura a ser usada no Modelo de Dados
	Local oStructAux := FWFormStruct( 2 , cAlias )

	oStructAux:RemoveField("T9_CODTMS")
	oStructAux:RemoveField("T9_LOCPAD")
	oStructAux:RemoveField("T9_PLACA")
	oStructAux:RemoveField("T9_CAPMAX")
	oStructAux:RemoveField("T9_MEDIA")
	oStructAux:RemoveField("T9_TIPVEI")
	oStructAux:RemoveField("T9_CHASSI")
	oStructAux:RemoveField("T9_CORVEI")
	oStructAux:RemoveField("T9_DESCOR")
	oStructAux:RemoveField("T9_CIDEMPL")
	oStructAux:RemoveField("T9_UFEMPLA")
	oStructAux:RemoveField("T9_RENAVAM")
	oStructAux:RemoveField("T9_NRMOTOR")
	oStructAux:RemoveField("T9_CEREVEI")
	oStructAux:RemoveField("T9_MEDMIN")
	oStructAux:RemoveField("T9_VALANO")
	oStructAux:RemoveField("T9_CATBEM")

	// Remove todos os campos do agrupamento de contador
	FilterField( oStructAux , '004' , .T. )

	//Adiciona no nosso View um controle do tipo FormFields(antiga enchoice)
	oView:AddField( 'VIEW_' + cAlias , oStructAux , oModel:cId + '_' + cAlias )

	//Ponto de entrada para remover campos da tela
	If ExistBlock("MNTA080O")
		ExecBlock("MNTA080O",.F.,.F.,{2,cAlias,oStructAux})
	EndIf

	// Cria pastas nas folders
	oView:AddSheet( 'MAIN_FOLDER', cTabView , STR0030 ) //'Bem'

	// Criar "box" horizontal para receber algum elemento da view
	oView:CreateHorizontalBox(cBoxView ,100,,,'MAIN_FOLDER',cTabView)

	// Relaciona o identificador (ID) da View com o "box" para exibição
	oView:SetOwnerView( 'VIEW_' + cAlias , cBoxView )

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ViewSTB
View from STB

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function ViewSTB( oView , oModel )

	Local cAlias := 'STB'
	Local cTabView := 'ABA_' + cAlias
	Local cBoxView := 'BOX_' + cAlias

	// Cria a estrutura a ser usada no Modelo de Dados
	Local oStructAux := FWFormStruct( 2 , cAlias )

	oStructAux:RemoveField("TB_CODBEM")

	//Adiciona no nosso View um controle do tipo FormFields(antiga enchoice)
	oView:AddGrid( 'VIEW_' + cAlias , oStructAux , oModel:cId + '_' + cAlias )

	//Ponto de entrada para remover campos da tela
	If ExistBlock("MNTA080O")
		ExecBlock("MNTA080O",.F.,.F.,{2,cAlias,oStructAux})
	EndIf

	//Adiciona um titulo para o grid
	oView:EnableTitleView('VIEW_' + cAlias , STR0361 )
	//"Informações de Características"

	// Cria pastas nas folders
	oView:AddSheet('MAIN_FOLDER',cTabView , STR0362) //'Características'

	// Criar "box" horizontal para receber algum elemento da view
	oView:CreateHorizontalBox( cBoxView , 100,,, 'MAIN_FOLDER', cTabView )

	// Relaciona o identificador (ID) da View com o "box" para exibição
	oView:SetOwnerView( 'VIEW_' + cAlias , cBoxView )

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ViewTPY
View from TPY

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function ViewTPY( oView , oModel )

	Local cAlias := 'TPY'
	Local cTabView := 'ABA_' + cAlias
	Local cBoxView := 'BOX_' + cAlias

	// Cria a estrutura a ser usada no Modelo de Dados
	Local oStructAux := FWFormStruct( 2 , cAlias )

	oStructAux:RemoveField("TPY_CODBEM")

	//Adiciona no nosso View um controle do tipo FormFields(antiga enchoice)
	oView:AddGrid( 'VIEW_' + cAlias , oStructAux , oModel:cId + '_' + cAlias )

	//Ponto de entrada para remover campos da tela
	If ExistBlock("MNTA080O")
		ExecBlock("MNTA080O",.F.,.F.,{2,cAlias,oStructAux})
	EndIf

	//Adiciona um titulo para o grid
	oView:EnableTitleView('VIEW_' + cAlias , STR0363 )
	//"Informações das Peças de Reposição"

	// Cria pastas nas folders
	oView:AddSheet( 'MAIN_FOLDER' , cTabView , STR0364 )//'Peças de Reposição'

	// Criar "box" horizontal para receber algum elemento da view
	oView:CreateHorizontalBox( cBoxView , 100,,, 'MAIN_FOLDER', cTabView)

	// Relaciona o identificador (ID) da View com o "box" para exibição
	oView:SetOwnerView( 'VIEW_' + cAlias , cBoxView )

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ViewCounter
View from Counter

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function ViewCounter( oView , oModel )

	// Cria a estrutura a ser usada no Modelo de Dados
	Local oStructCt1 := FWFormStruct( 2 , 'ST9' )
	Local oStructCt2 := FWFormStruct( 2 , 'TPE' )

	// Remove todos os campos que não são do agrupamento de contador
	FilterField( oStructCt1 , '004' )

	// Remove campo do relacionamento
	oStructCt2:RemoveField("TPE_CODBEM")
	oStructCt2:RemoveField("TPE_VIRADA")

	//Adiciona no nosso View um controle do tipo FormFields(antiga enchoice)
	oView:AddField( 'VIEW_CONT1' , oStructCt1 , oModel:cId + '_' + 'ST9' )

	//Adiciona no nosso View um controle do tipo FormFields(antiga enchoice)
	oView:AddField( 'VIEW_CONT2' , oStructCt2 , oModel:cId + '_' + 'TPE' )

	//Adiciona um titulo para o grid
	oView:EnableTitleView('VIEW_CONT2' , STR0014 ) //"Segundo Contador"

	// Cria pastas nas folders
	oView:AddSheet( 'MAIN_FOLDER', 'ABA_COUNTER' , STR0037 ) //'Contador'

	// Criar "box" horizontal para receber algum elemento da view
	oView:CreateHorizontalBox( 'BOX_CONT1' , 60,,, 'MAIN_FOLDER', 'ABA_COUNTER')

	// Relaciona o identificador (ID) da View com o "box" para exibição
	oView:SetOwnerView( 'VIEW_CONT1' , 'BOX_CONT1' )

	// Criar "box" horizontal para receber algum elemento da view
	oView:CreateHorizontalBox( 'BOX_CONT2' , 40,,, 'MAIN_FOLDER', 'ABA_COUNTER')

	// Relaciona o identificador (ID) da View com o "box" para exibição
	oView:SetOwnerView( 'VIEW_CONT2' , 'BOX_CONT2' )

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} FilterField
Filtra os campos de uma struct conforme o agrupamento. Desta forma, todos os
campos de um agrupamento podem ser removidos ou somente deixar esses campos

@param oStruct - Objeto da struct dos campos
@param cGroup  - Nome do agrupamento
@param lRemove - Indica se remove o agrupamento ou mantem

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Nil
/*/
//------------------------------------------------------------------------------
Function FilterField( oStruct , cGroup , lRemove )

	Local nField, cFieldName
	Local aRemoveFld := {}
	Local aStruct := oStruct:GetFields()

	Default lRemove := .F.

	// Seleciona campos a serem removidos
	For nField := 1 To Len( aStruct )

		cFieldName := aStruct[nField][MVC_VIEW_IDFIELD]
		cFieldGroup := oStruct:GetProperty( cFieldName , MVC_VIEW_GROUP_NUMBER )

		If lRemove .And. cFieldGroup == cGroup
			aAdd( aRemoveFld , cFieldName )
		ElseIf .Not. lRemove .And. cFieldGroup != cGroup
			aAdd( aRemoveFld , cFieldName )
		EndIf
	Next

	// Executa a remoção dos campos selecionados
	For nField := 1 To Len( aRemoveFld )
		oStruct:RemoveField( aRemoveFld[nField] )
	Next

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ValidInfo
Validação ao confirmar tela

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Static Function ValidInfo( oModel )

	// Inicializa classe
	oST9 := MntBem():New

	// Carrega a classe com modelo de dados
	oST9:ModelToClass( oModel )

	// Executa validação final
	oST9:Valid()

	// Se houver, apresenta erro
	oST9:ShowHelp()

Return oST9:IsValid()

//------------------------------------------------------------------------------
/*/{Protheus.doc} CommitInfo
Grava todas as informações

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@param oModel	- objeto do Modelo de Dados
	   lInativa = .T. - inativação
	   lInativa = .F. - Inclusão, Alteração e Deleção.
@return Bool
/*/
//------------------------------------------------------------------------------
Static Function CommitInfo(oModel, lInativa)

	Local lIntTec 	 := .F.
	Local lAltLin    := .F.
	Local lMnt080    := ExistBlock("MNTA080")
	Local nX         := 0
	Local nLenSub    := IIf(Type("oModel") == "U", 0, Len(oModel:AallSubModels)) //Verificar se possui SubModelos.

	Default lInativa := .F.

	If nLenSub > 0 .And. lMnt080//Caso possua Sub-Modelos
		For nX := 1 To nLenSub //Percorre todos.
			If oModel:AallSubModels[nX]:cId == 'MNTA080_STB' .Or.; //Verifica os modelos que possuem grid.
				oModel:AallSubModels[nX]:cId == 'MNTA080_TPY' .Or.;
				oModel:AallSubModels[nX]:cId == 'MNTA080_TT8'
				If Len(oModel:AallSubModels[nX]:GetLinesChanged()) > 0 //Caso possua alguma linha alterada.
					lAltLin := .T.
					Exit
				EndIf
			EndIf
		Next nX
	EndIf

	dbSelectArea('AA3')
	lIntTEC := FindFunction("At040ImpST9") .And. ( AA3->(FieldPos('AA3_CODBEM')) > 0 )

	If lMnt080 .And. !lInativa
		ExecBlock("MNTA080",.F.,.F.,{oModel,'FORMCOMMITTTSPRE','MNTA080',lAltLin})
	EndIf

	If !lInativa
		Do Case
			Case oST9:IsUpsert() //Upsert - Executa inclusão ou alteração do cadastro

				If oST9:Upsert() .And. oST9:IsInsert()
					ConfirmSX8()
				EndIf

			Case oST9:IsDelete() // Delete - Executa exclusão do cadastro
				oST9:Delete()
		Endcase
	EndIf

	If lMnt080 .And. !lInativa
		ExecBlock("MNTA080",.F.,.F.,{oST9,'MODELCOMMITTTS','MNTA080'})
	EndIf

	// Se houver, apresenta erro
	oST9:ShowHelp()

	If !lInativa .And. lIntTEC .And. oModel:GetOperation() == MODEL_OPERATION_UPDATE
		At040BmxBa()
	EndIf

	If lMnt080 .And. !lInativa
		ExecBlock("MNTA080",.F.,.F.,{oModel,'FORMCOMMITTTSPOS','MNTA080',lAltLin})
	EndIf

	//Ponto de entrada executado após gravações
	If lMnt080 .And. !lInativa
		ExecBlock("MNTA080",.F.,.F.,{oST9,'MODELCOMMITNTTS','MNTA080'})
	EndIf

	// Limpa classe
	oST9:Free()

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} WhenBtn
Indica em quais operações os botões devem aparecer no ações relacionadas

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Array - aWhenBtn
/*/
//------------------------------------------------------------------------------
Function WhenBtn()

	Local aWhenBtn	 := {}
	Local aOperation := {}

	aAdd( aOperation , MODEL_OPERATION_VIEW	)
	aAdd( aOperation , MODEL_OPERATION_UPDATE )
	aAdd( aOperation , MODEL_OPERATION_DELETE )

	aAdd( aWhenBtn , { 'MNC600CON'	, aOperation } )
	aAdd( aWhenBtn , { 'MNA080CON'	, aOperation } )
	aAdd( aWhenBtn , { 'MNTC090'	, aOperation } )
	aAdd( aWhenBtn , { 'MNC600ORD'	, aOperation } )
	aAdd( aWhenBtn , { 'MNTA080HCO' , aOperation } )
	aAdd( aWhenBtn , { 'MNTA080COM' , aOperation } )
	aAdd( aWhenBtn , { 'MNTA080PER' , aOperation } )
	aAdd( aWhenBtn , { 'MNTA080SUH' , aOperation } )
	aAdd( aWhenBtn , { 'MNTA080HST' , aOperation } )
	aAdd( aWhenBtn , { 'NGACOPLAD'	, aOperation } )
	aAdd( aWhenBtn , { 'MNTA688'	, aOperation } )
	aAdd( aWhenBtn , { 'MNTC085'	, aOperation } )
	aAdd( aWhenBtn , { 'MNTC075'	, aOperation } )

Return aWhenBtn

//------------------------------------------------------------------------------
/*/{Protheus.doc} LineSTBVld
Validação de linha - Grid Características

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
@Obs Utilizado em MNTA080, MNTA082, MNTA083, MNTA084
/*/
//------------------------------------------------------------------------------
Static Function LineSTBVld( oModelGrid )

	Local lValid := .T.
	Local cError := ""

	If .Not. oModelGrid:IsDeleted()

		If Empty( FWFldGet('TB_CARACTE') )
			cError := STR0303 // "O campo Característica não foi informado."
			cError += CRLF + STR0304 // "Informe uma característica!"
			lValid := .F.
		ElseIf Empty( FWFldGet('TB_DETALHE') )
			cError := STR0305 // "O campo obrigatório 'Detalhe 1'
			// não foi informado"
			cError += CRLF + STR0306 // "Informe o campo 'Detalhe 1'!"
			lValid := .F.
		ElseIf FWFldGet('TB_CONDOP') == '2' .And. Empty( FWFldGet('TB_INFO02') )
			cError := STR0309 // "O campo obrigatório 'Detalhe 2'
			// não foi informado"
			cError += CRLF + STR0308 // "Informe o campo 'Detalhe 2'!"
			lValid := .F.
		EndIf
	EndIf

	If .Not. Empty( cError )
		Help( " ",1,STR0109,,cError,3,1 ) // "NAO CONFORMIDADE"
	EndIf

Return lValid

//------------------------------------------------------------------------------
/*/{Protheus.doc} LineTPYVld
Validação de linha - Peças de Reposição

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
@Obs Utilizado em MNTA080, MNTA082 e MNTA084
/*/
//------------------------------------------------------------------------------
Static Function LineTPYVld( oModelGrid )

	Local lValid := .T.
	Local cError := ""

	If .Not. oModelGrid:IsDeleted()

		If Empty( FWFldGet('TPY_CODPRO') )
			cError := STR0365 //"O campo Código da Peça de Reposição
			// não foi informado."
			cError += CRLF + STR0366 //"Informe um código!"
			lValid := .F.

		ElseIf .Not. Empty( FWFldGet('TPY_QTDGAR') ) .And.;
		Empty( FWFldGet('TPY_UNIGAR') )
			cError := STR0367 //"O campo Unidade de Tempo da Garantia
			// não foi informado."
			cError += CRLF + STR0368 //"Informe uma unidade!"
			lValid := .F.

		ElseIf .Not. Empty( FWFldGet('TPY_UNIGAR') ) .And.;
		Empty( FWFldGet('TPY_QTDGAR') )
			cError := STR0369 //"O campo Quantidade de Tempo da Garantia
			// não foi informado."
			cError += CRLF + STR0370 //"Informe uma quantidade!"
			lValid := .F.
		EndIf
	EndIf

	If .Not. Empty( cError )
		Help( " ",1,STR0109,,cError,3,1 ) // "NAO CONFORMIDADE"
	EndIf

Return lValid

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080F3
Consulta especifica Recurso/Ferramenta

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
@obs Função utilizada somente no SXB - SH1SH4
/*/
//------------------------------------------------------------------------------
Function MNTA080F3C()

	Local cAlias

	If M->T9_FERRAME == 'R'
		If FindFunction( 'NGINTSFC' ) .And. NGINTSFC()
			cAlias := 'SH1DIS'
		Else
			cAlias := 'SH1'
		EndIf
	Else
		cAlias := 'SH4'
	EndIf

Return ConPad1( , , , cAlias , , , .F. )

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080F3
Retorna registro selecionado na especifica Recurso/Ferramenta

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
@obs Função utilizada somente no SXB - SH1SH4
/*/
//------------------------------------------------------------------------------
Function MNTA080F3R()

	Local cContent

	If M->T9_FERRAME == 'R'
		cContent := SH1->H1_CODIGO
	Else
		cContent := SH4->H4_CODIGO
	EndIf

Return cContent

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT080WHEN
Define modo de edição de Campos
@type function

@author Rafael Reinert
@since 30/11/2012

@param  [cField]   , string , Campo a ser validado.
@param  [lUseModel], booelan, Indica se utiliza modelo ativo para verificação.

@return boolean    , Indica se campo ficará aberto

@obs Alterações: Feita uma verificação na categoria do Bem, se for do tipo Pneu
bloqueia apenas o campo T9_CONTACU e atribui a ele a soma das bandas do
pneu.
/*/
//------------------------------------------------------------------------------
Function MNT080WHEN( cField, lUseModel )

	Local nCharIni, nCharEnd
	Local cImmobili  := ''
	Local cEquipment := ''
	Local lOpenField := .T.
	Local lNGMNTAT   := .F.
	Local aTrigger   := {}
	Local aArea      := GetArea()
	Local aAreaSTP   := STP->(GetArea())
	Local aAreaTPP   := TPP->(GetArea())
	Local nOptRot 	 := If(Type("nOptRot") == "U",3,nOptRot)
	Local oModelSN1  := Nil

	Private lDtvSgCnt := NGCADICBASE("TPE_SITUAC", "A", "TPE", .F.) //Indica se é possível ativar/desativar segundo contador
	Private aSegCont  := If(Type("aSegCont") == "U",fBusSegCnt(nOptRot),aSegCont)

	Default cField    := ReadVar()
	Default lUseModel := .F.

	If Type('oMainWnd') <> 'O'
		Return .T.
	EndIf

	If Type("cCatOrig") == "U"
		cCatOrig := "2"
	EndIf

	//--------------------------------------------------------------------------
	// Tratamento do nome de campo
	//--------------------------------------------------------------------------
	If '>' $ cField
		nCharIni	:= At( '>' , cField ) + 1
		nCharEnd	:= Len( cField )
		cField		:= SubStr( cField , nCharIni , nCharEnd )
		cField		:= Upper( cField )
		cField		:= Trim( cField )
	EndIf

	//--------------------------------------------------------------------------
	// T9_CATBEM - Categoria do Bem
	//--------------------------------------------------------------------------
	If cField $ "T9_CATBEM"

		lOpenField := ( lGFrota .Or. GetNewPar("MV_NGSTARI") == M->T9_STATUS )


	// Código de integração SIGAMNT x SIGAATF
	ElseIf cField $ 'T9_CODIMOB/N1_CODBEM'

		// SIGAMNT ou SIGAGFR
		If cField == 'T9_CODIMOB'
			
			cImmobili  := M->T9_CODIMOB
			cEquipment := M->T9_CODBEM
			lNGMNTAT   := SuperGetMv( 'MV_NGMNTAT', .F., '' ) $ '2#3'

		// SIGAATF
		Else

			// Utiiza informações do modelo ativo. Somente para situações que o valid não é acionado pelo dicionário.
			If lUseModel

				// Recupera modelo ativo.
				oModelSN1  := FwModelActive()
				
				cImmobili  := oModelSN1:GetValue( 'SN1MASTER', 'N1_CBASE' ) + oModelSN1:GetValue( 'SN1MASTER', 'N1_ITEM' )
				cEquipment := oModelSN1:GetValue( 'SN1MASTER', 'N1_CODBEM' )

			Else

				cImmobili  := M->N1_CBASE + M->N1_ITEM
				cEquipment := M->N1_CODBEM

			EndIf

			lNGMNTAT   := SuperGetMv( 'MV_NGMNTAT', .F., '' ) $ '1#3'

		EndIf
		
		If lNGMNTAT
			If !INCLUI .And. !MNTA080ATF( cImmobili, cEquipment )
				lOpenField := .F.
			EndIf
		Else
			lOpenField := lNGMNTAT
		EndIf

	//--------------------------------------------------------------------------
	// T9_STATUS - Status do Bem
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_STATUS"

		If Empty( M->T9_STATUS )
		ElseIf Altera .And. M->T9_CATBEM == "3"

			aAreaST9 := ST9->(GetArea())

			dbSelectArea("ST9")
			dbSetOrder(1)
			If dbSeek(xFilial("ST9") + M->T9_CODBEM)
				lOpenField := ( ST9->T9_STATUS == GetNewPar('MV_NGSTARI','') )
				lOpenField := IIf( ST9->T9_STATUS == GetNewPar('MV_NGSTAFG','') , .T. , lOpenField )
			EndIf

			RestArea(aAreaST9)

		EndIf

	//--------------------------------------------------------------------------
	// Data da garantia
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_DTGARAN"

		//lOpenField := ( .Not. Empty( M->T9_DTCOMPR ) .And.;
		//Empty( M->T9_PRGARAN ) .Or. ( M->T9_UNGARAN == 'H' ) )

	//--------------------------------------------------------------------------
	// Campos do primeiro contador
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_POSCONT/T9_DTULTAC/T9_CONTACU/T9_VARDIA"

		If cField == "T9_CONTACU" .And. M->T9_CATBEM == "3" .And. GetNewPar('MV_NGPNEUS','N') == "S" .And. M->T9_TEMCONT != "S"
			lOpenField := .F.
		EndIf

		// Se nao tiver contador, fecha campo
		If M->T9_TEMCONT == 'N'
			lOpenField := .F.

		ElseIf Altera .And. NGIfDBSeek( 'STP' , M->T9_CODBEM , 2 )
			// Pula para próximo registro da STP
			STP->(dbSkip())

			// Verifica se o próximo registro é do mesmo Bem.
			If 	STP->TP_FILIAL == xFilial( 'STP' ) .And. STP->TP_CODBEM == M->T9_CODBEM
				// Bloqueia campos em tela
				lOpenField := .F.
			EndIf
		EndIf

	//--------------------------------------------------------------------------
	// Campos do segundo contador
	//--------------------------------------------------------------------------
	ElseIf cField $ "TPE_POSCON/TPE_DTULTA/TPE_VARDIA/TPE_CONTAC"

		If M->T9_TEMCONT == 'N'
			lOpenField := .F.
		ElseIf Altera .And. NGIfDBSeek( 'TPP' , M->T9_CODBEM , 2 )

			// Pula para próximo registro da TPP
			TPP->(dbSkip())

			// Verifica se o próximo registro é do mesmo Bem.
			If TPP->TPP_FILIAL == xFilial( 'TPP' ) .And. TPP->TPP_CODBEM == M->T9_CODBEM
				// Bloqueia campos em tela
				lOpenField := .F.
			EndIf
		EndIf

		If lOpenField .And. lDtvSgCnt
			lOpenField := (M->TPE_SITUAC != '2')
		EndIf

	//--------------------------------------------------------------------------
	// Campos do segundo contador
	//--------------------------------------------------------------------------
	ElseIf cField $ "TPE_TPCONT/TPE_LIMICO/TPE_CONTGA"

		If M->T9_TEMCONT == 'N'
			lOpenField := .F.
		ElseIf lDtvSgCnt
			lOpenField := (M->TPE_SITUAC != '2')
        ElseIf !lDtvSgCnt
            lOpenField := .T.
		EndIf

	ElseIf cField $ "TPE_SITUAC"

		lOpenField := (M->T9_TEMCONT != 'N')

	//--------------------------------------------------------------------------
	// Campos de fornecedor e ano de fabricação
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_FORNECE"

		//lOpenField := ( M->T9_CATBEM != '1' )

	//--------------------------------------------------------------------------
	// T9_CODTMS - Código do TMS
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_CODTMS"

		If Inclui
			//Se for inclusão. O campo TMS será aberto apenas se for CATBEM == 2 (TMS)
			lOpenField := M->T9_CATBEM == "2"
		ElseIf cCatOrig <> M->T9_CATBEM
			//Se não for inclusão, e o usuário está mudando a categoria do veículo, só irá abrir se CATBEM == 2 (TMS). Dessa forma, se ele era TMS e passou a ser não
			//integrado ao TMS ficará fechado. Se não era TMS e começou a ser integrado o campo é aberto como se fosse uma inclusão.
			lOpenField := M->T9_CATBEM == "2"
		Else
			//Caso não seja inclusão ou está mantendo a mesma categoria mantém o campo fechado, visto que, se for TMS, na alteração não pode mudar o código. E se for
			//não integrado esse campo não é alterado.
			lOpenField := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_PLACA - Placa do veiculo
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_PLACA"

		lOpenField := ( M->T9_CATBEM $ '24' )

	//--------------------------------------------------------------------------
	// T9_RECFERR - Recurso/Ferramenta
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_RECFERR"

		lOpenField := ( M->T9_FERRAME $ "RF" )

	//--------------------------------------------------------------------------
	// T9_CCUSTO - Centro de usto
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_CCUSTO"

		lOpenField := Inclui .Or. ( Empty( ST9->T9_CCUSTO ) .And. IsInCallStack('MNTA086') )

		If lOpenField .And. M->T9_PADRAO == "N" .And. M->T9_FERRAME == 'R' .And.;
		NGIFDBSEEK( 'SH1' , M->T9_RECFERR , 1 ) .And. .Not. Empty( SH1->H1_CCUSTO )
			lOpenField := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_CALENDA - Calendario
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_CALENDA"

		If lOpenField .And. M->T9_PADRAO == "N" .And. M->T9_FERRAME == 'R' .And.;
		NGIFDBSEEK( 'SH1' , M->T9_RECFERR , 1 ) .And. .Not. Empty( SH1->H1_CALEND )
			lOpenField := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_NOME - Nome
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_NOME"

		If lOpenField .And. .Not. Empty( M->T9_NOME )  .And.;
		M->T9_PADRAO == "N" .And. M->T9_FERRAME == 'R' .And.;
		NGIFDBSEEK( 'SH1' , M->T9_RECFERR , 1 ) .And. .Not. Empty( SH1->H1_DESCRI )
			lOpenField := .F.
		EndIf

		If lOpenField .And. .Not. Empty( M->T9_NOME )  .And.;
		M->T9_PADRAO == "N" .And. M->T9_FERRAME == 'F' .And.;
		NGIFDBSEEK( 'SH4' , M->T9_RECFERR , 1 ) .And. .Not. Empty( SH4->H4_DESCRI )
			lOpenField := .F.
		EndIf

	//--------------------------------------------------------------------------
	// Campos de contador
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_TPCONTA/T9_PERACOM/T9_CONTGAR"

		lOpenField := ( M->T9_TEMCONT <> "N" )

	//--------------------------------------------------------------------------
	// T9_LIMICON - Limite contador
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_LIMICON"

		lOpenField := ( M->T9_TEMCONT == "S" )

	//--------------------------------------------------------------------------
	// T9_UNIACOM - Unidade de acompanhamento
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_UNIACOM"

		lOpenField := ( M->T9_PERACOM > 0  )

	//--------------------------------------------------------------------------
	// T9_VIRADAS - Viradas do contador
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_VIRADAS"

		lOpenField := ( M->T9_TEMCONT == "S" )

	//--------------------------------------------------------------------------
	// T9_SITMAN - Situação da manutenção
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_SITMAN"

		lOpenField := ( M->T9_SITBEM != 'T' )

	//--------------------------------------------------------------------------
	// T9_SITBEM - Situação do Bem
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_SITBEM"

		If nOptRot <> 9 //Opção 9 (Copiar) é permitido manipular o campo Situação do Bem
			If Inclui
				lOpenField := .F.
			Else
				If NGSeek( 'ST9' , M->T9_CODBEM , 1 , 'T9_SITBEM' ) != 'I'
					lOpenField := .F.
				EndIf
			EndIf
		EndIf
		//lOpenField := ( .Not. M->T9_SITBEM $ 'AT' )

	//--------------------------------------------------------------------------
	// Campos de baixa da estrutura
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_DTBAIXA/T9_MTBAIXA"

		lOpenField := ( M->T9_SITBEM != 'A' )

	//--------------------------------------------------------------------------
	// T9_LOJA - Loja do Fornecedor
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_LOJA"

		lOpenField := ( .Not. Empty( M->T9_FORNECE ) )

	//--------------------------------------------------------------------------
	// T9_LOJACLI - Loja do Cliente
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_LOJACLI"

		lOpenField := ( .Not. Empty( M->T9_CLIENTE ) )

	//--------------------------------------------------------------------------
	// T9_PRGARAN - Prazo de garantia
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_PRGARAN"

		lOpenField := ( .Not. Empty( M->T9_DTCOMPR ) )

	//--------------------------------------------------------------------------
	// T9_UNGARAN - Unidade de garantia
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_UNGARAN"

		lOpenField := ( .Not. Empty( M->T9_DTCOMPR ) .And. .Not. Empty( M->T9_PRGARAN ) )

	//--------------------------------------------------------------------------
	// T9_DTVENDA - Data de Venda
	//--------------------------------------------------------------------------
	ElseIf cField $ 'T9_DTVENDA'

		lOpenField := ( M->T9_SITBEM == 'I' )

	//--------------------------------------------------------------------------
	// T9_COMPRAD - Comprador
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_COMPRAD"

		lOpenField := ( .Not. Empty( M->T9_DTVENDA ) )

	//--------------------------------------------------------------------------
	// T9_NFVENDA - Nota Fiscal de Venda
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_NFVENDA"

		lOpenField := ( .Not. Empty( M->T9_DTVENDA ) .And. .Not. Empty( M->T9_COMPRAD ) )

	//--------------------------------------------------------------------------
	// T9_UNIDDES - Unidade de Vida
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_UNIDDES"

		lOpenField := ( .Not. Empty( M->T9_VALODES ) )

	//--------------------------------------------------------------------------
	// Campos de detalhes
	//--------------------------------------------------------------------------
	ElseIf cField $ "M->TB_DETALHE/M->TB_INFO02"

		lOpenField := MNT080DTLH(.T.,@aTrigger)

	//--------------------------------------------------------------------------
	// T9_PROPRIE - Proprietário
	//--------------------------------------------------------------------------
	ElseIf cField $ "T9_PROPRIE"

		lOpenField := (M->T9_CATBEM == "4" .And. (Inclui .Or. GetNewPar("MV_NGMNTCC","N") == "S") )

	ElseIf cField $ "T9_ALUGUEL"
		If SuperGetMV("MV_NGMNTCC",.F.,.F.) == "S" .And. !Empty(SuperGetMV("MV_NGDTINC",.F.,.F.))
			If M->T9_CATBEM == '4' .Or. M->T9_CATBEM  == '1'
				lOpenField := .T.
			EndIf
		EndIf
	EndIf

	If Len( aTrigger ) > 0
		ExecTrigger( aTrigger )
	EndIf

	RestArea(aAreaTPP)
	RestArea(aAreaSTP)
	RestArea(aArea)

Return lOpenField

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080VLD
Validação de campos.
@type function

@author NG Informática Ltda.
@since 01/01/2015

@param [cField]   , string , Campo para validação.
@param [lUseModel], boolean, Indica se utiliza modelo ativo para verificação.

@return booelan, Indica se o campo foi validado com êxito.
/*/
//------------------------------------------------------------------------------
Function MNTA080VLD( cField, lUseModel )

	// Variaveis de retorno
	Local lValid    := .T.
	Local cError    := ''
	LocaL cSolution := ''

	// Posionamento de tabelas
	Local aArea      := GetArea()
	Local aAreaST9   := ST9->( GetArea() )
	Local aAreaSN1   := SN1->( GetArea() )

	// Auxiliares para validação
	Local lTemManut  := .F.
	Local nOrdST9    := 0
	Local cCampo     := ""
	Local cTipo      := ""
	Local aTrigger   := {}
	Local nOld       := IIf(Type("n"  ) == 'N',n,0)
	Local nOptRot    := IIf(Type("nOptRot") == "U",3,nOptRot)
	Local nInd       := 0
	Local nTotTMS    := 0
	Local nTamTot    := 0
	Local aNgHeader  := {}
	Local cNewImmobi := ''
	Local cOldImmobi := ''
	Local cNewEquipm := ''
	LOcal cOldEquipm := ''
	Local cAlsSN1    := ''
	Local cAlsST9    := ''
	Local cKey       := ''
	Local lMnta085   := .F.
	Local lMnta086   := .F.
	Local lMnta087   := .F.

	Local oModelSN1  := Nil
	Local oModelST9  := Nil

	Local nOperation := 0

	Private lDtvSgCnt := NGCADICBASE("TPE_SITUAC", "A", "TPE", .F.) //Indica se é possível ativar/desativar segundo contador
	Private aSegCont  := If(Type("aSegCont") == "U",fBusSegCnt(nOptRot),aSegCont)

	Default cField    := ReadVar()
	Default lUseModel := .F.

	// Trata a váriavel para validar conteúdo padrão.
	cField := Trim( Upper( SubStr( cField , At( '>' , cField ) + 1 , Len( cField ) ) ) )

	If Type("cCatOrig") == "U"
		cCatOrig := "2"
	EndIf

	//--------------------------------------------------------------------------
	// T9_CODBEM - Código Bem
	//--------------------------------------------------------------------------
	If 'T9_CODBEM' $ cField

		If .Not. ExistChav( 'ST9' , M->T9_CODBEM )
			lValid := .F.
		ElseIf .Not. NGDUPST9()
			lValid := .F.
		EndIf

	// Código de integração SIGAMNT x SIGAATF
	ElseIf cField $ 'T9_CODIMOB/N1_CODBEM'
		
		/*
			To Do: Utilização do parâmetro lUseModel poderá ser removido na realese quando 
			a realese 12.1.27 estiver obsoleta.
		*/

		cAlsST9  := GetNextAlias()
		cAlsSN1  := GetNextAlias()

		If cField == 'T9_CODIMOB'

			// Utiiza informações do modelo ativo. Somente para situações que o valid não é acionado pelo dicionário.
			If lUseModel

				oModelST9  := FWModelActive()
				nOperation := oModelST9:getoperation()
				
				// Essa validação é exclusiva da utilização do MODEL, pois a validação será incorporada ao dicionário na realese 12.1.33.
				If Empty( oModelST9:GetValue( 'MNTA080_ST9', 'T9_CODIMOB' ) ) .Or. ExistCPO( 'SN1', oModelST9:GetValue( 'MNTA080_ST9', 'T9_CODIMOB' ) )
					
					cNewImmobi := oModelST9:GetValue( 'MNTA080_ST9', 'T9_CODIMOB' )
					cOldImmobi := IIf( ALTERA, ST9->T9_CODIMOB, oModelST9:GetValue( 'MNTA080_ST9', 'T9_CODIMOB' ) )
					cNewEquipm := oModelST9:GetValue( 'MNTA080_ST9', 'T9_CODBEM' )
					cOldEquipm := IIf( ALTERA, ST9->T9_CODBEM , oModelST9:GetValue( 'MNTA080_ST9', 'T9_CODBEM' ) )
				
				Else

					// Variável cError não atribuida pois o help é gerado pelo ExistCPO().
					lValid := .F.

				EndIf

			Else

				cNewImmobi := M->T9_CODIMOB
				cOldImmobi := IIf( ALTERA, ST9->T9_CODIMOB, M->T9_CODIMOB )
				cNewEquipm := M->T9_CODBEM
				cOldEquipm := IIf( ALTERA, ST9->T9_CODBEM, M->T9_CODBEM )

			EndIf
		
		Else
			
			// Utiiza informações do modelo ativo. Somente para situações que o valid não é acionado pelo dicionário.
			If lUseModel

				oModelSN1  := FWModelActive()
				nOperation := oModelSN1:getoperation()

				// Essa validação é exclusiva da utilização do MODEL, pois a validação será incorporada ao dicionário na realese 12.1.33.
				If Empty( oModelSN1:GetValue( 'SN1MASTER', 'N1_CODBEM' ) ) .Or. ExistCPO( 'ST9', oModelSN1:GetValue( 'SN1MASTER', 'N1_CODBEM' ) )

					cNewImmobi := oModelSN1:GetValue( 'SN1MASTER', 'N1_CBASE' ) + oModelSN1:GetValue( 'SN1MASTER', 'N1_ITEM' )
					cOldImmobi := IIf( ALTERA, SN1->N1_CBASE + SN1->N1_ITEM, oModelSN1:GetValue( 'SN1MASTER', 'N1_CBASE' ) + oModelSN1:GetValue( 'SN1MASTER', 'N1_ITEM' ) )
					cNewEquipm := oModelSN1:GetValue( 'SN1MASTER', 'N1_CODBEM' )
					cOldEquipm := IIf( ALTERA, SN1->N1_CODBEM, oModelSN1:GetValue( 'SN1MASTER', 'N1_CODBEM' ) )

				Else

					// Variável cError não atribuida pois o help é gerado pelo ExistCPO().
					lValid := .F.

				EndIf
			
			Else

				cNewImmobi := M->N1_CBASE + M->N1_ITEM
				cOldImmobi := IIf( ALTERA, SN1->N1_CBASE + SN1->N1_ITEM, M->N1_CBASE + M->N1_ITEM )
				cNewEquipm := M->N1_CODBEM
				cOldEquipm := IIf( ALTERA, SN1->N1_CODBEM, M->N1_CODBEM )

			EndIf

		EndIf

		If lValid .And. ( cField == 'T9_CODIMOB' .And. !Empty( cNewImmobi ) ) .Or. ( cField == 'N1_CODBEM' .And. !Empty( cNewEquipm ) )

			// Verifica se ja existe outro bem com mesmo codigo de imobilizado
			BeginSQL Alias cAlsST9

				SELECT
					ST9.T9_CODBEM
				FROM
					%table:ST9% ST9
				WHERE
					ST9.T9_FILIAL  =  %xFilial:ST9%    AND
					ST9.T9_CODIMOB =  %exp:cNewImmobi% AND
					ST9.T9_CODBEM NOT IN ( %exp:cNewEquipm% , %exp:cOldEquipm% ) AND
					ST9.%NotDel%

			EndSQL

			If (cAlsST9)->( !EoF() )

				lValid := .F.

				// Imobilizado possui vinculo com o Bem: XXXXX. Informe outro Imobilizado.
				cError    := STR0112 + ' ' + Trim( (cAlsST9)->T9_CODBEM )

				// Informe outro Imobilizado.
				cSolution := STR0113

			EndIf

			If lValid 

				If cField == 'N1_CODBEM' .Or. nOperation == 4

					// Verifica se ja existe outro ativo com mesmo codigo de bem
					BeginSQL Alias cAlsSN1

						SELECT
							SN1.N1_CBASE,
							SN1.N1_ITEM
						FROM
							%table:SN1% SN1
						WHERE
							SN1.N1_FILIAL = %xFilial:SN1%    AND
							SN1.N1_CODBEM = %exp:cNewEquipm% AND
							SN1.N1_CBASE || SN1.N1_ITEM NOT IN ( %exp:cNewImmobi% , %exp:cOldImmobi% ) AND
							SN1.%NotDel%

					EndSQL

					If (cAlsSN1)->( !EoF() )

						lValid := .F.

						// Bem possui vincuo com o Ativo: XXXX Item: XXXX
						cError    := STR0460 + Trim( (cAlsSN1)->N1_CBASE ) + STR0461 + Trim( (cAlsSN1)->N1_ITEM )

						// Informe outro Bem.
						cSolution := STR0462

					EndIf

					(cAlsSN1)->( dbCloseArea() )

				EndIf

				If lValid 

					// Verifica se ativo possui quantidade maior que 1.
					dbSelectArea( 'SN1' )
					dbSetOrder( 1 )
					If dbSeek( xFilial( 'SN1' ) + cNewImmobi ) .And. SN1->N1_QUANTD != 1

						lValid := .F.

						// Vinculo do Ativo com o Bem nao pode ser realizado.
						cError := STR0084

						// O campo Quantidade - N1_QUANTD no cadastro do Ativo Fixo e diferente de 1.
						cError += STR0085

					EndIf

				EndIf

			EndIf

			// Substitui gatilho do campo T9_CODIMOB para T9_CCUSTO quando o mesmo não encontra-se atualizado em dicionário.
			If lValid .And. cField == 'T9_CODIMOB' .And. Trim( Posicione( 'SX7', 1, 'T9_CODIMOB009', 'X7_CONDIC' ) ) != '!Empty( M->T9_CODIMOB )' .And.;
				!Empty( oModelST9 ) .And. !Empty( oModelST9:GetValue( 'MNTA080_ST9', 'T9_CODIMOB' ) )

				oModelST9:LoadValue( 'MNTA080_ST9', 'T9_CCUSTO', Posicione( 'SN3', 1, xFilial( 'SN3' ) + oModelST9:GetValue( 'MNTA080_ST9', 'T9_CODIMOB' ), 'N3_CUSTBEM' ) )

			EndIf
		
		EndIf

	//--------------------------------------------------------------------------
	// T9_FERRAME - Ferramenta
	//--------------------------------------------------------------------------
	ElseIf 'T9_FERRAME' $ cField

		If Empty( M->T9_FERRAME )
		ElseIf .Not. Pertence( 'FR' , M->T9_FERRAME )
			lValid := .F.
		Endif

	//--------------------------------------------------------------------------
	// T9_RECFERR - Recurso/Ferramenta
	//--------------------------------------------------------------------------
	ElseIf 'T9_RECFERR' $ cField

		If FindFunction( 'NGINTSFC' ) .And.;
		NGINTSFC() .And.;
		!Empty( M->T9_RECFERR ) .And.;
		M->T9_FERRAME == 'R'

			nOrdST9 := NGRETORDEM("ST9","T9_FILIAL+T9_FERRAME+T9_RECFERR")

			// Verifica se o recurso em questão está sendo
			// utilizado por mais de um bem
			dbSelectArea( 'ST9' )
			dbSetOrder( nOrdST9 )
			dbSeek( xFilial( 'ST9' ) + 'R' + M->T9_RECFERR )
			While !Eof() .And. ST9->T9_FILIAL == xFilial( 'ST9' ) .And.;
			ST9->T9_FERRAME + ST9->T9_RECFERR == 'R' + M->T9_RECFERR

				If M->T9_CODBEM <> ST9->T9_CODBEM
					cError := STR0270 //"O recurso já está sendo utilizado por outro bem."
					cError += " " + STR0271 //"Informe outro recurso."
					lValid := .F.
					Exit
				Endif
				ST9->( dbSkip() )
			End
		Endif

		If lValid
			If M->T9_FERRAME == 'R'
				lValid := ExistCpo( 'SH1' , M->T9_RECFERR )
			ElseIf M->T9_FERRAME == 'F'
				lValid := ExistCpo( 'SH4' , M->T9_RECFERR )
			EndIf
		EndIf

	//--------------------------------------------------------------------------
	// T9_TIPMOD - Modelo
	//--------------------------------------------------------------------------
	ElseIf 'T9_TIPMOD' $ cField

		If Empty( M->T9_TIPMOD )
		ElseIf .Not. ExistCpo( 'TQR' , M->T9_TIPMOD )
                lValid := .F.
		ElseIf NGIFDBSEEK( 'TQR' , M->T9_TIPMOD , 1 ) .And.;
			.Not. Empty( TQR->TQR_CATBEM ) .And. M->T9_CATBEM != TQR->TQR_CATBEM
			lValid := .F.
			cError := STR0371 //"Modelo inválido para a categoria do bem!"
		ElseIf .Not. MNT080BPAI()
			lValid := .F.
		ElseIf M->T9_PADRAO == 'S' .And. .Not. fLoad170()
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_CODFAMI - Familia
	//--------------------------------------------------------------------------
	ElseIf 'T9_CODFAMI' $ cField

		If Empty( M->T9_CODFAMI )
		ElseIf .Not. ExistCpo( 'ST6' , M->T9_CODFAMI )
			lValid := .F.
		ElseIf NGIFDBSEEK( 'ST6' , M->T9_CODFAMI , 1 ) .And.;
		.Not. Empty( ST6->T6_CATBEM ) .And. M->T9_CATBEM != ST6->T6_CATBEM
			lValid := .F.
			cError := STR0372 //"Família inválida para a categoria do bem!"
		ElseIf .Not. MNT080BPAI()
			lValid := .F.
		ElseIf M->T9_PADRAO == 'S' .And. .Not. fLoad170()
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_PADRAO - Bem Padrao
	//--------------------------------------------------------------------------
	ElseIf 'T9_PADRAO' $ cField

		If .Not. Pertence('SN' , M->T9_PADRAO )
			lValid := .F.
		ElseIf M->T9_PADRAO == 'S' .And. .Not. fLoad170()
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_CATBEM - Categoria
	//--------------------------------------------------------------------------
	ElseIf 'T9_CATBEM' $ cField

		If M->T9_CATBEM == "4" //Caso a categoria seja mudada para Não integrado limpa os campos de TMS depois de fazer bkp dos mesmos

			//Array de BKP com os registros de TMS, caso um veículo integrado com o TMS seja alterado para NÃO integrado.
			//Se dentro da mesma alteração o usuário voltar para INTEGRADO o sistema gatilha esse bkp.
			aArrayTMS := {}

			aAdd(aTrigger ,{"ST9","T9_TIPVEI" ,Space(Tamsx3("T9_TIPVEI" )[1])})
			aAdd(aArrayTMS,{"ST9","T9_TIPVEI" ,M->T9_TIPVEI})
			aAdd(aTrigger, {"ST9","T9_ANOMOD" ,Space(Tamsx3("T9_ANOMOD" )[1])})
			aAdd(aArrayTMS,{"ST9","T9_ANOMOD" ,M->T9_ANOMOD})
			aAdd(aTrigger, {"ST9","T9_ANOFAB" ,Space(Tamsx3("T9_ANOFAB" )[1])})
			aAdd(aArrayTMS,{"ST9","T9_ANOFAB" ,M->T9_ANOFAB})
			aAdd(aTrigger, {"ST9","T9_CHASSI" ,Space(Tamsx3("T9_CHASSI" )[1])})
			aAdd(aArrayTMS,{"ST9","T9_CHASSI" ,M->T9_CHASSI})
			aAdd(aTrigger, {"ST9","T9_PLACA"  ,Space(Tamsx3("T9_PLACA"  )[1])})
			aAdd(aArrayTMS,{"ST9","T9_PLACA"  ,M->T9_PLACA})
			aAdd(aTrigger, {"ST9","T9_RENAVAM",Space(Tamsx3("T9_RENAVAM")[1])})
			aAdd(aArrayTMS,{"ST9","T9_RENAVAM",M->T9_RENAVAM})
			aAdd(aTrigger, {"ST9","T9_CORVEI" ,Space(Tamsx3("T9_CORVEI" )[1])})
			aAdd(aArrayTMS,{"ST9","T9_CORVEI" ,M->T9_CORVEI})
			aAdd(aTrigger, {"ST9","T9_CIDEMPL",Space(Tamsx3("T9_CIDEMPL")[1])})
			aAdd(aArrayTMS,{"ST9","T9_CIDEMPL",M->T9_CIDEMPL})
			aAdd(aTrigger, {"ST9","T9_UFEMPLA",Space(Tamsx3("T9_UFEMPLA")[1])})
			aAdd(aArrayTMS,{"ST9","T9_UFEMPLA",M->T9_UFEMPLA})
			aAdd(aTrigger, {"ST9","T9_DESCOR" ,Space(Tamsx3("T9_DESCOR" )[1])})
			aAdd(aArrayTMS,{"ST9","T9_DESCOR" ,M->T9_DESCOR})
			aAdd(aTrigger, {"ST9","T9_CODTMS" ,Space(Tamsx3("T9_CODTMS" )[1])})
			aAdd(aArrayTMS,{"ST9","T9_CODTMS" ,M->T9_CODTMS})

			//Faz BKP dos campos de DA3 (TMS)
			aNgHeader := NGHeader("DA3")
			nTamTot := Len(aNgHeader)

			For nInd := 1 To nTamTot

				cCampo := aNgHeader[nInd,2]
				cTipo  := aNgHeader[nInd,8]
				If AllTrim(cTipo) == "N"
					aAdd(aTrigger ,{"DA3",cCampo,0})
					aAdd(aArrayTMS,{"DA3",cCampo,&("M->"+cCampo)})
				ElseIf AllTrim(cTipo) == "D"
					aAdd(aTrigger ,{"DA3",cCampo,cTod("  /  /  ")})
					aAdd(aArrayTMS,{"DA3",cCampo,&("M->"+cCampo)})
				Else
					aAdd(aTrigger ,{"DA3",cCampo,Space(Tamsx3(cCampo)[1])})
					aAdd(aArrayTMS,{"DA3",cCampo,&("M->"+cCampo)})
				EndIf

			Next nInd

			n       := nOld

		Else

			If cCatOrig == "2" .And. (Type("aArrayTMS") == "A")
				//Caso o bem originalmente seja integrado. E o usuário, sem salvar, alterou para não integrado
				//e depois voltou para integrado, o sistema irá gatilhar os campos originais.
				nTotTMS := Len(aArrayTMS)
				For nInd := 1 To nTotTMS
					aAdd(aTrigger,{aArrayTMS[nInd][1],aArrayTMS[nInd][2],aArrayTMS[nInd][3]})
				Next nInd
			EndIf

		EndIf

	//--------------------------------------------------------------------------
	// T9_STATUS - Status Bem
	//--------------------------------------------------------------------------
	ElseIf 'T9_STATUS' $ cField

		lMnta087 := IsInCallStack( 'MNTA087PN' ) // gera pneus a partir de aquisição de veículo

		If Empty( M->T9_STATUS )
		ElseIf !ExistCpo( 'TQY' , M->T9_STATUS )
			lValid := .F.
		ElseIf !lMnta087 .And. M->T9_STATUS == GetNewPar('MV_NGSTARI',"")
			Return .T.
		ElseIf NGIFDBSEEK( 'TQY' , M->T9_STATUS , 1 )
			If !Empty( TQY->TQY_CATBEM ) .And. M->T9_CATBEM != TQY->TQY_CATBEM
				lValid := .F.
				cError := STR0184 //"Status inválido para a categoria do bem!"
			EndIf

			If lValid

				lMnta085 := IsInCallStack( 'MNTA085' ) // gera pneus a partir de NF
				lMnta086 := IsInCallStack( 'MNTA086' ) // classificação de pneus

				If lMnta085 .Or. lMnta086
					cKey := Alltrim( SuperGetMv( 'MV_NGSTAEU', .F., '' )) + '/' // estoque usado
					cKey += Alltrim( SuperGetMv( 'MV_NGSTAER', .F., '' )) + '/' // estoque reformado
					cKey += Alltrim( SuperGetMv( 'MV_NGSTARS', .F., '' )) + '/' // removido de serviço
					cKey += Alltrim( SuperGetMv( 'MV_NGSTAEN', .F., '' )) + '/' // estoque novo
					cKey += Alltrim( SuperGetMv( 'MV_NGSTEST', .F., '' ))       // estoque da filial
				EndIf

				If lMnta085

					cKey +=  '/' + Alltrim( SuperGetMv( 'MV_NGSTAFG', .F., '' ) ) // aguardando marcação de fogo
					If !( M->T9_STATUS $ cKey )
						cError := STR0455 + ' ' + STR0456 // 'Para esta rotina são permitidos apenas status atrelados a estoque' + ' ' + 'ou aguardando marcação de fogo.'
						lValid := .F.
					EndIf

				ElseIf lMnta086
					
					If Empty( M->TQS_PLACA ) .And. OriginNf( ST9->T9_CODBEM ) .And. !( M->T9_STATUS $ cKey )
						cError := STR0458 // 'Para este pneu é permitido apenas status atrelados a estoque pois sua origem é de uma nota fiscal.'
						lValid := .F.
					EndIf

				ElseIf lMnta087

					cKey := Alltrim( SuperGetMv( 'MV_NGSTAPL', .F., '' ) )  + '/' // aplicado
					cKey += Alltrim( SuperGetMv( 'MV_NGSTAFG', .F., '' ) )        // aguardando marcação de fogo
					If  !( M->T9_STATUS $ cKey )
						cError := STR0459 + ' ' + STR0456  // 'Para esta rotina são permitidos apenas status aplicado' + ' ' + 'ou aguardando marcação de fogo.'
						lValid := .F.
					EndIf

				EndIf

			EndIf
		EndIf

	//--------------------------------------------------------------------------
	// T9_CCUSTO - Centro Custo
	//--------------------------------------------------------------------------
	ElseIf 'T9_CCUSTO' $ cField

		If !CTB105CC( M->T9_CCUSTO )
			lValid := .F.
		ElseIf !Empty( M->T9_CODIMOB ) .And. M->T9_CCUSTO != NGSeek( 'SN3' , M->T9_CODIMOB , 1 , 'N3_CUSTBEM' ) .And.;
			!Empty( NGSeek( 'SN3', M->T9_CODIMOB, 1, 'N3_CUSTBEM' ) )
				lValid := .F.
				cError := STR0373 //'O Centro de Custo não pode ser diferente do ativo fixo.'
		EndIf

	//--------------------------------------------------------------------------
	// T9_CALENDA - Turno
	//--------------------------------------------------------------------------
	ElseIf 'T9_CALENDA' $ cField

		If .Not. Empty( M->T9_CALENDA )
			lValid := ExistCpo( 'SH7' , M->T9_CALENDA )
		EndIf

	//--------------------------------------------------------------------------
	// T9_CENTRAB - C. Trabalho
	//--------------------------------------------------------------------------
	ElseIf 'T9_CENTRAB' $ cField

		If !Empty( M->T9_CENTRAB )

			If !ExistCPO( 'SHB', M->T9_CENTRAB, 1 )
				lValid := .F.
			ElseIf NGIFDBSEEK("SHB",M->T9_CENTRAB,1) .And. SHB->HB_CC <> M->T9_CCUSTO
				cError := STR0374 //'Centro de Trabalho informado não esta relacionado com o Centro de Custo.'
				lValid := .F.
			EndIf

		EndIf

	//--------------------------------------------------------------------------
	// T9_CLIENTE - Cliente
	//--------------------------------------------------------------------------
	ElseIf 'T9_CLIENTE' $ cField

		If !Empty( M->T9_CLIENTE ) .And. !Empty( M->T9_LOJACLI )
			aAdd(aTrigger,{ 'ST9','T9_LOJACLI',Space( TamSX3('T9_LOJACLI')[1] )})
		ElseIf !Empty( M->T9_CLIENTE )
			lValid := MNTA080CLI( M->T9_CLIENTE )
		EndIf

	//--------------------------------------------------------------------------
	// T9_LOJACLI - Loja Cliente
	//--------------------------------------------------------------------------
	ElseIf 'T9_LOJACLI' $ cField

		If !Empty( M->T9_CLIENTE ) .And. !Empty(M->T9_LOJACLI)
			lValid := ExistCpo( "SA1" , M->T9_CLIENTE + M->T9_LOJACLI )
		EndIf

	//--------------------------------------------------------------------------
	// T9_FORNECE - Fornecedor
	//--------------------------------------------------------------------------
	ElseIf 'T9_FORNECE' $ cField

		If !Empty( M->T9_FORNECE ) .And. !Empty( M->T9_LOJA )
			aAdd(aTrigger,{ 'ST9','T9_LOJA',Space( TamSX3('T9_LOJA')[1] )})
		ElseIf !Empty( M->T9_FORNECE )
			lValid := MNTA080FOR( M->T9_FORNECE )
		EndIf

	//--------------------------------------------------------------------------
	// T9_LOJA - Loja do Fornecedor
	//--------------------------------------------------------------------------
	ElseIf 'T9_LOJA' $ cField

		If !Empty( M->T9_FORNECE ) .And. !Empty( M->T9_LOJA )
			lValid := ExistCpo( 'SA2' , M->T9_FORNECE + M->T9_LOJA )
		EndIf

	//--------------------------------------------------------------------------
	// T9_TEMCON - Tem Contador
	//--------------------------------------------------------------------------
	ElseIf 'T9_TEMCONT' $ cField

		If .Not. Pertence( 'SNPI' , M->T9_TEMCONT )
			lValid := .F.

		ElseIf M->T9_TEMCONT == "N"

			//------------------------------------------------------
			// Verifica se há manutenção relacionada ao
			// bem que seja controlada por contador, tempo-contador,
			// contador fixo ou produção.
			//------------------------------------------------------
			dbSelectArea( 'STF')
			dbSetOrder(01)
			dbSeek( xFilial( 'STF') + M->T9_CODBEM )
			While !Eof() .And. STF->TF_CODBEM == M->T9_CODBEM
				If STF->TF_TIPACOM $ "CAPF"
					lTemManut := .T.
					Exit
				EndIf
				dbSelectArea("STF")
				dbSkip()
			EndDo

			If lTemManut
				lValid := MsgNoYes( STR0260 , "" )//"Este bem possui manuntenção
				// orientada pelo contador, alterando o tipo de contador poderá
				// impactar na geração de O.S. preventiva para essas manutenções."
			EndIf
		EndIf

	//--------------------------------------------------------------------------
	// T9_POSCONT - Posição Contador
	//--------------------------------------------------------------------------
	ElseIf 'T9_POSCONT' $ cField

		If .Not. Empty( M->T9_LIMICON ) .And. M->T9_POSCONT > M->T9_LIMICON
			lValid := .F.
			ChkHelp( "CONTADINAV" )
		ElseIf .Not. Positivo()
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_DTULTAC - Dt. Acomp.
	//--------------------------------------------------------------------------
	ElseIf 'T9_DTULTAC' $ cField

		If M->T9_DTULTAC > dDataBase
			cError := STR0375 //'A data informada não pode ser maior que a
			// data atual do sistema.'
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_VARDIA - Varicação dia
	//--------------------------------------------------------------------------
	ElseIf 'T9_VARDIA' $ cField

		If M->T9_POSCONT > 0 .And. .Not. NaoVazio( M->T9_VARDIA )
			lValid := .F.
		ElseIf .Not. Positivo( M->T9_VARDIA )
			lValid := .F.
		ElseIf .Not. NGCHKLIMVAR(M->T9_CODBEM,M->T9_CODFAMI,1,M->T9_VARDIA,.T.,.T.)
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_INDPOND - Pondera
	//--------------------------------------------------------------------------
	ElseIf 'T9_INDPOND' $ cField

		If .Not. Pertence( 'SN' , M->T9_INDPOND )
			lValid := .F.
		ElseIf M->T9_INDPOND == 'S'
			fFatorPond( @aTrigger )
		EndIf

	//--------------------------------------------------------------------------
	// T9_SITMAN - Situação Manutenção
	//--------------------------------------------------------------------------
	ElseIf 'T9_SITMAN' $ cField

		If (lValid := Pertence( 'AI' , M->T9_SITMAN ))
			If lValid .And. M->T9_SITMAN == "I" .And. !VldOSBem(1)
				lValid := .F.
				cError := STR0228 //Para inativação da manutenção é necessário que sejam finalizadas as ordens de serviço preventivas em aberto.
			EndIf
		EndIf

	//--------------------------------------------------------------------------
	// T9_SITBEM - Situação Bem
	//--------------------------------------------------------------------------
	ElseIf 'T9_SITBEM' $ cField

		If .Not. Pertence( 'AIT' , M->T9_SITBEM )
			lValid := .F.

		ElseIf M->T9_SITBEM == "T"
			cError := STR0197 //'O bem só pode assumir situação "Transferido"
			// através do processo de transferência.
			lValid := .F.

		ElseIf ST9->T9_SITBEM == "I" .And. M->T9_SITBEM == "A" .And.;
		GetNewPar('MV_NGDPST9') != "0"
			lValid := NGDUPST9()
		EndIf

	//--------------------------------------------------------------------------
	// T9_DTINSTA - Data Instal.
	//--------------------------------------------------------------------------
	ElseIf 'T9_DTINSTA' $ cField

		If M->T9_DTINSTA > dDataBase
			cError := STR0376 //'A data de instalação tem que ser maior ou
			// igual a data atual.'
			lValid := .F.

		ElseIf M->T9_DTINSTA < M->T9_DTCOMPR
			cError := STR0237 //'Data de instalação não pode ser menor que
			// a data da compra.'
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_CONTGAR - Cont. Garan.
	//--------------------------------------------------------------------------
	ElseIf 'T9_CONTGAR' $ cField

		lValid := Positivo( M->T9_CONTGAR )

	//--------------------------------------------------------------------------
	// T9_ITEMCTA -
	//--------------------------------------------------------------------------
	ElseIf 'T9_ITEMCTA' $ cField

		If Empty( M->T9_ITEMCTA )
		ElseIf .Not. Ctb105Item() //.Or. .Not. A103VldCC()
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// T9_DTVENDA - Data de venda
	//--------------------------------------------------------------------------
	ElseIf 'T9_DTVENDA' $ cField

		If Empty( M->T9_DTVENDA )
		ElseIf .Not. ValDt( M->T9_DTVENDA )
			lValid := .F.
		ElseIf .Not. Empty( M->T9_DTCOMPR )
			If M->T9_DTCOMPR > M->T9_DTVENDA
				cError := STR0377 //"A data de venda informada não pode ser
				// maior que a data de compra."
				lValid := .F.
			EndIf
		EndIf

	//---------------------------
	// Código de barras / QR 
	//---------------------------
	ElseIf 'T9_BARCODE' $ cField

		lValid := MntBarCode( M->T9_CODBEM, M->T9_BARCODE, .T.)

	//--------------------------------------------------------------------------
	// TB_CARACTE -
	//--------------------------------------------------------------------------
	ElseIf 'TB_CARACTE' $ cField

		If .Not. Empty( M->TB_CARACTE )
			lValid := ExistCpo( 'TPR' , M->TB_CARACTE )
		EndIf

	//--------------------------------------------------------------------------
	// TB_CONDOP -
	//--------------------------------------------------------------------------
	ElseIf 'TB_CONDOP' $ cField

		lValid := Pertence('12' , M->TB_CONDOP )

		If lValid .And. M->TB_CONDOP == '1'
			aAdd(aTrigger,{ 'STB','TB_INFO02',Space( TamSX3('TB_INFO02')[1] )})
		EndIf

	//--------------------------------------------------------------------------
	// TPY_CONGAR -
	//--------------------------------------------------------------------------
	ElseIf 'TPY_CONGAR' $ cField

		If .Not. Pertence( '12' , M->TPY_CONGAR )
			lValid := .F.

		ElseIf M->TPY_CONGAR == "2" .And. (Empty(M->TPE_CONTAC) .And. .Not. NGIFdbSeek("TPE",M->T9_CODBEM,1))
			cError := STR0281 //"Para informar segundo contador para peça com
			// garantia deve cadastrar o segundo contador e confirmar o cadastro de bem."
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// TPY_LOCGAR -
	//--------------------------------------------------------------------------
	ElseIf 'TPY_LOCGAR' $ cField

		If .Not. Empty( M->TPY_LOCGAR )
			lValid := ExistCpo( 'TPS' , M->TPY_LOCGAR )
		EndIf

	//--------------------------------------------------------------------------
	// TPE_DTULTA - Dt. Acomp.
	//--------------------------------------------------------------------------
	ElseIf 'TPE_DTULTA' $ cField

		If M->TPE_DTULTA > dDataBase
			cError := STR0375 //'A data informada não pode ser maior que a data atual do sistema.'
			lValid := .F.
		EndIf
	EndIf

	// Apresenta mensagem de erro.
	If !Empty( cError )
		Help( , , 'Help', , cError, 1, 0, , , , , , { cSolution } )
	EndIf

	If Len( aTrigger ) > 0
		ExecTrigger( aTrigger )
	EndIf

	If lValid
		ExecTrig( cField )
	EndIf

	RestArea( aAreaST9 )
	RestArea( aAreaSN1 )
	RestArea( aArea )

Return lValid

//------------------------------------------------------------------------------
/*/{Protheus.doc} ExecTrig
Executa gatilhos especificos

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@param aTrigger
@return Nil
/*/
//------------------------------------------------------------------------------
Function ExecTrig( cField )

	Local oModel
	Local cModelId
	Local oView
	Local xContent
	Local cFieldName := ""
	Local cTableName := ""
	Local nFields    := 0
	Local aTrigger   := {}
	Local cSumKm     := 0

	cField := Upper( AllTrim( cField ) )

	//--------------------------------------------------------------------------
	// T9_CODBEM - Código do bem
	//--------------------------------------------------------------------------
	If 'T9_CODBEM' $ cField

		If M->T9_CATBEM == "3"
			aAdd( aTrigger , { 'TQS_CODBEM', M->T9_CODBEM } )
			aAdd( aTrigger , { 'TQS_NUMFOG', SubStr(M->T9_CODBEM,1,TAMSX3("TQS_NUMFOG")[1]) } )
		EndIf

	ElseIf 'TQS_NUMFOG' $ cField

		If M->T9_CATBEM == "3"
			aAdd( aTrigger , { 'T9_CODBEM', SubStr(M->TQS_NUMFOG,1,TAMSX3("T9_CODBEM")[1]) } )
		EndIf

	//--------------------------------------------------------------------------
	// Km por banda
	//--------------------------------------------------------------------------
	//Contatenar todos os campos com / nao funciona, tem q ser separado
	ElseIf "TQS_KMOR" $ cField .Or. "TQS_KMR1" $ cField .Or. "TQS_KMR2" $ cField .Or. ;
		   "TQS_KMR3" $ cField .Or. "TQS_KMR4" $ cField

		If M->T9_CATBEM == "3" .And. ( M->T9_TEMCONT == "P" .Or. M->T9_TEMCONT == "I" )
			cSumKm := M->TQS_KMOR
			cSumKm += M->TQS_KMR1
			cSumKm += M->TQS_KMR2
			cSumKm += M->TQS_KMR3
			cSumKm += M->TQS_KMR4
			aAdd( aTrigger , { 'T9_CONTACU', cSumKm } )
		EndIf

	//--------------------------------------------------------------------------
	// T9_RECFERR - Recurso/Ferramenta
	//--------------------------------------------------------------------------
	ElseIf 'T9_RECFERR' $ cField

		// X7_SEQUENC - 001
		If M->T9_FERRAME == 'R'
			M->T9_NOME 	  := NGSeek('SH1',M->T9_RECFERR,1,'H1_DESCRI')
		EndIf
		// X7_SEQUENC - 002
		If M->T9_FERRAME == 'R' .And. Inclui
			M->T9_CCUSTO  := NGSeek('SH1',M->T9_RECFERR,1,'H1_CCUSTO')
		EndIf
		// X7_SEQUENC - 003
		If M->T9_FERRAME == 'R' .And. Inclui
			M->T9_CENTRAB := NGSeek('SH1',M->T9_RECFERR,1,'H1_CTRAB')
		EndIf
		// X7_SEQUENC - 004
		If M->T9_FERRAME == 'R'
			M->T9_CALENDA := NGSeek('SH1',M->T9_RECFERR,1,'H1_CALEND')
		EndIf
		// X7_SEQUENC - 005
		If M->T9_FERRAME == 'F'
			M->T9_NOME 	  := NGSeek('SH4',M->T9_RECFERR,1,'H4_DESCRI')
		EndIf

	//--------------------------------------------------------------------------
	// T9_STATUS - Status
	//--------------------------------------------------------------------------
	ElseIf 'T9_STATUS' $ cField

		If M->T9_CATBEM == "3" .And. !Empty( M->T9_STATUS ) .And. !Empty( GetNewPar('MV_NGSTAPL',"") ) .And.;
		   GetNewPar('MV_NGSTAPL',"" ) != M->T9_STATUS .And. GetNewPar('MV_NGPNEUS','N') == "S"
			aAdd( aTrigger , { 'TQS_EIXO'  , Space( TamSx3('TQS_EIXO'  )[1]) } )
			aAdd( aTrigger , { 'TQS_TIPEIX', Space( TamSx3('TQS_TIPEIX')[1]) } )
			aAdd( aTrigger , { 'TQS_PLACA' , Space( TamSx3('TQS_PLACA' )[1]) } )
			aAdd( aTrigger , { 'TQS_POSIC' , Space( TamSx3('TQS_POSIC' )[1]) } )
			aAdd( aTrigger , { 'TQS_NOMPAI', Space( TamSx3('TQS_NOMPAI')[1]) } )
		Endif

	//--------------------------------------------------------------------------
	// T9_TEMCONT - Tipo do contador
	//--------------------------------------------------------------------------
	ElseIf 'T9_TEMCONT' $ cField

		If M->T9_TEMCONT == 'N'

			If lDtvSgCnt
				aAdd(aTrigger,{'TPE_SITUAC',"2"})
			EndIf

			aAdd(aTrigger,{'TPE_TPCONT',aSegCont[1]})
			aAdd(aTrigger,{'TPE_DTULTA',aSegCont[2]})
			aAdd(aTrigger,{'TPE_POSCON',aSegCont[3]})
			aAdd(aTrigger,{'TPE_VARDIA',aSegCont[4]})
			aAdd(aTrigger,{'TPE_LIMICO',aSegCont[5]})
			aAdd(aTrigger,{'TPE_CONTAC',aSegCont[6]})
			aAdd(aTrigger,{'TPE_CONTGA',aSegCont[7]})
		EndIf

		If M->T9_TEMCONT != 'N'
			aAdd( aTrigger , { 'TPE_TPCONT', M->TPE_TPCONT } )
		EndIf

		If M->T9_TEMCONT == "P" .Or. M->T9_TEMCONT == "I"
			If M->T9_CATBEM == "3"
				cSumKm := M->TQS_KMOR
				cSumKm += M->TQS_KMR1
				cSumKm += M->TQS_KMR2
				cSumKm += M->TQS_KMR3
				cSumKm += M->TQS_KMR4
				aAdd( aTrigger , { 'T9_CONTACU', cSumKm } )
			EndIf
			aAdd( aTrigger , { 'T9_LIMICON' , Val( Replicate("9",TAMSX3("T9_LIMICON")[1]) ) } )
		ElseIf M->T9_TEMCONT == "S"
			aAdd( aTrigger , { 'T9_LIMICON' , 0 } )
		EndIf

	ElseIf 'TPE_SITUAC' $ cField

		If M->TPE_SITUAC == '2'
			aAdd(aTrigger,{'TPE_TPCONT',aSegCont[1]})
			aAdd(aTrigger,{'TPE_DTULTA',aSegCont[2]})
			aAdd(aTrigger,{'TPE_POSCON',aSegCont[3]})
			aAdd(aTrigger,{'TPE_VARDIA',aSegCont[4]})
			aAdd(aTrigger,{'TPE_LIMICO',aSegCont[5]})
			aAdd(aTrigger,{'TPE_CONTAC',aSegCont[6]})
			aAdd(aTrigger,{'TPE_CONTGA',aSegCont[7]})
		EndIf

	//--------------------------------------------------------------------------
	// T9_POSCONT - Posição do contador
	//--------------------------------------------------------------------------
	ElseIf 'T9_POSCONT' $ cField

		// X7_SEQUENC - 001
		If ( Inclui .Or. ( M->T9_TEMCONT == "S" .And. !NGIfDbSeek( 'STP' , M->T9_CODBEM , 1 ) ) ) .And.;
		   !( M->T9_CATBEM == "3" .And. GetNewPar('MV_NGPNEUS','N') == "S" .And. M->T9_TEMCONT != "S" )
			M->T9_CONTACU := M->T9_POSCONT
		EndIf
	//--------------------------------------------------------------------------
	// T9_FORNECE - Fornecedor
	//--------------------------------------------------------------------------
	ElseIf 'T9_FORNECE' $ cField
		If Empty( M->T9_FORNECE ) .And. !Empty( M->T9_LOJA )
			aAdd( aTrigger , { 'T9_LOJA', Space( TamSx3('T9_LOJA')[1]) } )
		EndIf
	EndIf

	//--------------------------------------------------------------------------
	// Atualiza campos de outras entidades
	//--------------------------------------------------------------------------
	For nFields := 1 To Len( aTrigger )

		If nFields == 1
			oModel := FWModelActive()
		EndIf

		cFieldName := Upper( AllTrim( aTrigger[nFields][1] ) )
		xContent   := aTrigger[nFields][2]
		&( 'M->' + cFieldName ) := xContent

		// Atualiza submodelo
		If ValType( oModel ) == 'O'
			If At( '_' , cFieldName ) == 3
				cTableName := 'S' + SubStr( cFieldName , 1 , 2 )
			Else
				cTableName := SubStr( cFieldName , 1 , 3 )
			EndIf
			cModelId := oModel:cId + '_' + cTableName
			If oModel:GetModel( cModelId ):HasField( cFieldName )
				oModel:LoadValue( cModelId , cFieldName , xContent )
			EndIf
		EndIf
	Next

	If Len( aTrigger ) > 0 .And. (IsInCallStack( 'MNTA080CAD' ) .Or. IsInCallStack( 'MNTA084CAD' ) )// Para garantir que há necessidade de atualizar a view
		oView := FWViewActive()
		oView:Refresh()
	EndIf

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} ExecTrigger
Executa gatilhos especificos

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@param aTrigger
@return Nil
/*/
//------------------------------------------------------------------------------
Function ExecTrigger( aTrigger )

	Local oModel := FWModelActive()
	Local oView
	Local cFieldName, xContent, nFieldPos, nFields
	Local lHeader :=  Type( 'aHeader' ) == 'A' .And. Type( 'aCols' ) == 'A'

	Default aTrigger := {}

	//--------------------------------------------------------------------------
	// Executa gatilhos
	//--------------------------------------------------------------------------
	For nFields := 1 To Len( aTrigger )
		cFieldName := AllTrim( aTrigger[nFields][2] )
		xContent   := aTrigger[nFields][3]
		If ValType( oModel ) == 'O'
			cModelId := oModel:cId + '_' + aTrigger[nFields][1]
			If oModel:GetModel( cModelId ):HasField( cFieldName )
				oModel:LoadValue( cModelId , cFieldName , xContent )
			EndIf
		Else
			If lHeader
				nFieldPos := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == cFieldName })
				If nFieldPos > 0
					aCols[n][nFieldPos] := xContent
				EndIf
			EndIf
			&( 'M->' + cFieldName ) := xContent
		EndIf
	Next

	//--------------------------------------------------------------------------
	// Atualiza view
	//--------------------------------------------------------------------------
	If Len( aTrigger ) > 0

		If IsInCallStack( 'MNTA080CAD' ) .Or. IsInCallStack( 'MNTA084CAD' )
		 	oView := FWViewActive()
			oView:Refresh()
		EndIf

		If Type("oGET01") == 'O'
			oGet01:oBrowse:Refresh()
		ElseIf Type("oGET17001") == 'O'
			oGET17001:oBrowse:Refresh()
		EndIf

	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT080BPAI
Verifica se o bem pertence a uma estrutura e caso afirmativo impede a
alteracao de sua Familia e Tipo Modelo.

@author Marcos Wagner Junior
@since 15/10/09
@version P11
@return Lógico, Define se o processo poderá continuar ou será interrompido.

@obs Alterações: Acrescentado verificação de existência de estrutura padrão,
esquema padrão, manutenção e manutenção padrão, CheckList e Documentos.
Podendo fazer a alteração de acordo com a regra de negócio, evitando a
inconsistência de informações.

Autor: Pablo Servin.
Data: 17/02/14.

/*/
//---------------------------------------------------------------------
Function MNT080BPAI()

	Local lReturn  := .T.
	Local aOldArea := GetArea()
	Local cCpo     := StrTran(ReadVar(),'M->','ST9->')
    Local lViewST9 := FWIsInCallStack( 'MNTA080CAD' ) .Or. FWIsInCallStack( 'MNTA084CAD' )
	Local lTipMod  := lRel12133 .Or. lGFrota

	If Altera // Se for uma alteração.
		If !Empty(&(cCpo)) .And. &(ReadVar()) != &(cCpo) // Se o conteúdo do campo não estiver vazio e for diferente do conteúdo.

			//--------------------------------------------------------------------------
			// Verifica se possui um esquema padrão na TQ0 e questiona o usuario sobre a alteracao
			// Essa validacao deve ocorrer apenas quando a view do cadastro estiver ativa (MNTA080CAD)
			// Não deve ser executada quando não houver view
			//--------------------------------------------------------------------------
			If lTipMod .And. lViewST9 .And.;
				fTemPadrao( 'TQ0', ST9->T9_CODFAMI, ST9->T9_TIPMOD, cCpo, 1 ) .And. ;
				!MsgYesNo( STR0283 ) //"Existe um esquema padrão cadastrado para esse tipo de modelo. Deseja alterar o modelo?"
				Return .F.
			EndIf

			//--------------------------------------------------------------------------
			// Verifica se possui Estrutura e/ou Estrutura Padrão (STC)
			//--------------------------------------------------------------------------
			// Se tiver uma estrutura de bem na STC, tanto como pai quanto como filho.
			If NGIFDBSEEK('STC',ST9->T9_CODBEM,1) .Or. NGIFDBSEEK('STC',ST9->T9_CODBEM,3)
				// Se contém uma estrutura padrão na STC, de acordo com a família do bem, mostra o help avisando que contém uma estrutura de bem cadastrada.
				If fTemPadrao( 'STC', Padr( ST9->T9_CODFAMI, Len( STC->TC_CODBEM ) ), ST9->T9_TIPMOD, cCpo, 1, 5 ) .Or. NGIFDBSEEK('STC',ST9->T9_CODFAMI,3)
					If Empty(STC->TC_COMPONE)
						ShowHelpDlg( STR0282,{STR0286, ""},5,; // "Alteração de Informação" ## "Existe uma estrutura de bem cadastrada."
						{ STR0284, STR0287},5) // "Para alteração do campo ->" ## "Exclua a estrutura do bem."
						Return .F.
					Else
						ShowHelpDlg( STR0282,{STR0286, ""},5,; // "Alteração de Informação" ## "Existe uma estrutura de bem cadastrada."
						{ STR0284, STR0302},5) // "Para alteração do campo ->" ## "Não é possível alterar o tipo modelo, pois existe uma estrutura padrão cadastrada. Desmonte-a para alteração do modelo."
						Return .F.
					EndIf
				EndIf
			ElseIf fTemPadrao( 'STC', Padr( ST9->T9_CODFAMI, Len( STC->TC_CODBEM ) ), ST9->T9_TIPMOD, cCpo, 1, 5 ) .Or. NGIFDBSEEK('STC',ST9->T9_CODFAMI,3)
				// Se o bem não conter uma estrutura e conter uma estrutura padrão para a família do bem...
				lReturn := .F.
			EndIf

			If lReturn
				//--------------------------------------------------------------------------
				// Verifica se possui Manutenção e/ou Manutenção Padrão (STF e TPF)
				//--------------------------------------------------------------------------
				If NGIFDBSEEK('STF', M->T9_CODBEM, 1)
					While STF->( !EoF() ) .And. STF->TF_CODBEM = M->T9_CODBEM // Percorre até o fim do arquivo enquanto for o mesmo bem.
						If STF->TF_PADRAO == 'N'
							lReturn := .F.
							dbSkip()
							Loop
						Else
							// Caso um padrão tenha sido encontrado
							If fTemPadrao( 'TPF', ST9->T9_CODFAMI, ST9->T9_TIPMOD, cCpo, 1, 4 )
								ShowHelpDlg( STR0282,{STR0300, ""},5,; // "Alteração de Informação" ## "Existe uma manutenção padrão vinculada ao bem."
													{ STR0284, STR0301},5) // "Para alteração do campo ->" ## "Desvincule a manutenção padrão alterando o campo 'Manut. Padrão' para 'Não' na rotina de Manutenção."
								Return .F.
							EndIf

							dbSelectArea('STF')
							dbSkip()
						EndIf
					End
				ElseIf fTemPadrao( 'TPF', ST9->T9_CODFAMI, ST9->T9_TIPMOD, cCpo, 1, 4 )
					// Caso encontre um padrão para Familia + Tipo modelo
					lReturn := .F.
				EndIf

				If lReturn
					//--------------------------------------------------------------------------
					// Verifica se possui Check List e/ou Check List Padrão (TTF e TTE [Etapas do Check List Padrão])
					//--------------------------------------------------------------------------
					If NGIFDBSEEK('TTF', M->T9_CODBEM, 3)
						If fTemPadrao( 'TTE', ST9->T9_CODFAMI, ST9->T9_TIPMOD, cCpo, 1 )
							ShowHelpDlg( STR0282,{STR0290, ""},5,; // "Alteração de Informação" ## "Existe um Check List cadastrado para o bem."
								{ STR0284, STR0291},5) // "Para alteração do campo ->" ## "Exclua o Check List do bem."
							Return .F.
						EndIf
					ElseIf fTemPadrao( 'TTE', ST9->T9_CODFAMI, ST9->T9_TIPMOD, cCpo, 1 )
						lReturn := .F.
					EndIf

					If lReturn
						//--------------------------------------------------------------------------
						// Verifica se possui Documento Obrigatório e/ou Documento Padrão (TS1 e TS5)
						//--------------------------------------------------------------------------
						If NGIFDBSEEK('TS1',M->T9_CODBEM, 1)
							If fTemPadrao( 'TS5', ST9->T9_CODFAMI, ST9->T9_TIPMOD, cCpo, 1 )
								ShowHelpDlg( STR0282,{STR0292, ""},5,; // "Alteração de Informação" ## "Existe um documento cadastrado para o bem."
								{ STR0284, STR0293},5) // "Para alteração do campo ->" ## "Exclua o documento do bem."
								Return .F.
							EndIf
						ElseIf fTemPadrao( 'TS5', ST9->T9_CODFAMI, ST9->T9_TIPMOD, cCpo, 1 )
							lReturn := .F.
						EndIf
					EndIf

				EndIf

			EndIf

		EndIf

		//--------------------------------------------------------------------------
		// Caso algum padrão tenha sido encontrado
		//--------------------------------------------------------------------------
		If !lReturn
			RestArea(aOldArea)
			// Apenas apresenta o MsgYesNo caso haja uma View e seja a de Bens
			Return !lViewST9 .Or. MsgYesNo( STR0294, STR0295 )
		EndIf
	EndIf

	RestArea(aOldArea)

Return .T.

//--------------------------------------------------------------------
/*/{Protheus.doc} fTemPadrao
Verifica se possui determinado padrão relacionado ao bem e
se a alteração do campo afeta o vínculo com o padrão atual.

@param cTabela, Caractere, Tabela a ser avaliada
@param cFamilia, Caractere, Código da família
@param cModelo, Caractere, Código do modelo
@param cCpo, Caractere, Nome do campo
@param nIndPad, Numérico, Índice do MNT Padrão
@param [nIndFrt], Numérico, Índice do Frotas

@author Hugo Rizzo Pereira
@since 13/07/2020
@return lógico, verdadeiro se encontrar padrão relacionado ao bem
/*/
//--------------------------------------------------------------------
Static Function fTemPadrao( cTabela, cFamilia, cModelo, cCpo, nIndPad, nIndFrt )

	Local lTemPadrao := .F.

	Default nIndFrt := nIndPad

	If lRel12133

		// Comportamento a partir do release 12.1.33
		// Existencia do conceito de Tipo Modelo '*' (TODOS)
		If MNTSeekPad( cTabela, nIndFrt, cFamilia, cModelo )

			// Somente questiona o usuário sobre um padrão existente,
			// se o padrão encontrado for afetado pela alteração do campo em questão
			lTemPadrao := 'ST9->T9_TIPMOD' != cCpo .Or. &( PrefixoCpo(cTabela) + '_TIPMOD' ) <> '*'
		EndIf

	ElseIf lGFrota // Para ambientes com Gestão de Frotas

		// Comportamento anterior ao release 12.1.33
		// Para gestão de Frotas, realiza a busca por Família e Modelo
		lTemPadrao := NGIFDBSEEK( cTabela, cFamilia + cModelo, nIndFrt )

	Else
		// Comportamento anterior ao release 12.1.33
		// Para MNT Padrão, realiza a busca apenas por Família
		lTemPadrao := NGIFDBSEEK( cTabela, cFamilia, nIndPad )
	EndIf

Return lTemPadrao

//--------------------------------------------------------------------
/*/{Protheus.doc} fLoad170
Alimenta os campos do ST9 com os campos do bem padrao TP9

@author Paulo Pego
@since /  /
@version P11
@return Bool
/*/
//--------------------------------------------------------------------
Static Function fLoad170()

	Local oModel    := FWModelActive() // Modelo de dados da rotina
	Local oModelST9 := oModel:GetModel( oModel:cId + '_ST9')
	Local oModelSTB := oModel:GetModel( oModel:cId + '_STB')
	Local oModelTPY
	Local oView

	// Estrutura de campos das entidades
	Local oStructST9 := oModelST9:GetStruct()
	Local oStructSTB := oModelSTB:GetStruct()
	Local oStructTPY

	Local cField080 := ""
	Local cField170 := ""
	Local aRelation := {}
	Local nFieldPos := 0
	Local lSeekReg  := .F.
	Local lTemPad   := .F.
	Local nLine     := 0
	Local nFields   := 0
	Local aFldModel := {}
	Local cChave    := ""
	Local aNAO      := {"T9_FILIAL","T9_CODBEM","T9_CODFAMI"}
    Local cFamilPad
    Local cModeloPad

	//----------------------------------------
	// Busca e posiciona no respectivo bem padrão (TP9)
	//----------------------------------------
	// A partir do release 12.1.33, o tipo modelo será utilizado
	// na busca de bem padrão, mesmo em ambientes sem Gestão de Frotas
	If lRel12133

		// Busca e posiciona na estrutura padrão
		lTemPad := MNTSeekPad( 'TP9', ;
								1, ; // TP9_FILIAL+TP9_CODFAM+TP9_TIPMOD
								oModelST9:GetValue('T9_CODFAMI'), ;
								oModelST9:GetValue('T9_TIPMOD') )

	Else

		// Para releases anteriores, o tipo modelo somente é utilizado,
		// na busca de bem padrão, para ambientes com Gestão de Frotas

		dbSelectArea('TP9')
		dbSetOrder(1) // TP9_FILIAL+TP9_CODFAM+TP9_TIPMOD
		cChave := xFilial('TP9') + oModelST9:GetValue('T9_CODFAMI')

		If lGFrota
			cChave += oModelST9:GetValue('T9_TIPMOD')
		EndIf
		lTemPad := dbSeek( cChave )

	EndIf

	// Caso não seja encontrado um bem padrão
	If !lTemPad
		Help(" ",1,"NGMSEMPDR")
		Return .F.
	EndIf

    // Familia e Modelo do bem padrão localizado
    // A função MNTSeekPad pode posicionar em um padrão com tipo modelo '*' (Todos)
    cFamilPad  := TP9->TP9_CODFAM
    cModeloPad := TP9->TP9_TIPMOD

	aFldModel := oStructST9:GetFields()

	//-----------------------------------------------
	// Carrega campos da ST9 conforme o padrão TP9
	//-----------------------------------------------
	For nFields := 1 To Len(aFldModel)

		cField080 := aFldModel[nFields][3]

		If aScan(aNAO , { |x| AllTrim(x) == cField080 }) > 0
			Loop
		EndIf

		cField170 := "TP9_" + Substr(cField080,4,6)
		nFieldPos := FieldPos( cField170 )

		//----------------------------------------------------------------
		//Verifica se o campo existe na TP9 e se há necessidade de alterar
		//----------------------------------------------------------------
		If nFieldPos > 0 .And. oModelST9:GetValue( cField080 ) != FieldGet( nFieldPos )
			If cField080 == "T9_ACOPLA"
				oModelST9:SetValue( cField080, IIf( FieldGet( nFieldPos ) == "N", "2", "1" ) )
			Else
				oModelST9:SetValue( cField080, FieldGet( FieldPos( cField170 ) ) )
			EndIf
		EndIf

	Next nFields

	//---------------------------------------------
	// Verifica se o bem é controlado por contador
	//---------------------------------------------
	If oModelST9:GetValue('T9_TEMCONT') == 'N'
		oModelST9:LoadValue('T9_TPCONTA'," ")
		oModelST9:LoadValue('T9_POSCONT', 0)
		oModelST9:LoadValue('T9_DTULTAC', CtoD('  /  /  '))
		oModelST9:LoadValue('T9_CONTACU', 0)
		oModelST9:LoadValue('T9_VARDIA'	, 0)
		oModelST9:LoadValue('T9_LIMICON', 0)
		oModelST9:LoadValue('T9_PERACOM', 0)
		oModelST9:LoadValue('T9_UNIACOM', " ")
	EndIf

	If M->T9_TEMCONT == "P" .Or. M->T9_TEMCONT == "I"
		oModelST9:LoadValue('T9_LIMICON', Val(Replicate("9",TAMSX3("T9_LIMICON")[1])))
	EndIf

	//--------------------------------------------------------------------------
	// Load grid - Details / Características
	//--------------------------------------------------------------------------
	aFldModel := oStructSTB:GetFields()
	aRelation := {}

	// Percorre campos que compõe a entidade do Json
	For nFields := 1 To Len(aFldModel)

		cField080 := aFldModel[nFields][3]

		If Substr(cField080,10,01) $ "0123456789"
			cFieldTPB := "TPB_" + Substr(cField080,4,5) + Substr(cField080,10,01)
		Else
			cFieldTPB := "TPB_" + Substr(cField080,4,6)
		EndIf

		aAdd(aRelation,{cField080,cFieldTPB})

	Next

    //--------------------------------------------------------------------------
    // Carrega Caracteristicas do Bem Padrao (TPB)
    //--------------------------------------------------------------------------
	nIndex    := 1
	cCondicao := 'TPB->TPB_FILIAL + TPB->TPB_CODFAM'
	cChave    := xFilial('TPB') + cFamilPad

	If lRel12133 .Or. lGFrota
		nIndex    := 4
		cChave    += cModeloPad
		cCondicao += ' + TPB->TPB_TIPMOD'
	EndIf

	dbSelectArea('TPB')
	dbSetOrder(nIndex)
	dbSeek(cChave)
	While .Not. TPB->(Eof()) .And. &(cCondicao) == cChave

		lSeekReg := .F.

		For nLine := 1 To oModelSTB:Length()

			oModelSTB:GoLine(nLine)

			If oModelSTB:IsDeleted()
				Loop
			EndIf

			If FWFldGet('TB_CARACTE') == TPB->TPB_CARACT
				lSeekReg := .T.
				Exit
			EndIf
		Next

		If !lSeekReg .And. (oModelSTB:Length() != 1 .Or. .Not. Empty(FWFldGet('TB_CARACTE')) .Or. oModelSTB:IsDeleted())
			//Adiciona linhas na grid
			oModelSTB:AddLine()
		EndIf

		For nFields := 1 To Len(aRelation)

			cField080 := aRelation[nFields][1]
			cField170 := aRelation[nFields][2]

			If FieldPos(cField170) < 1
				Loop
			EndIf

			// Valida e atribui valor ao campo
			oModelSTB:LoadValue(cField080 , TPB->(FieldGet(TPB->(FieldPos(cField170)))))
		Next

		// Set description
		If .Not. lSeekReg
			oModelSTB:LoadValue('TB_NOME',SubStr(NGSEEK("TPR",TPB->TPB_CARACT,1,"TPR_NOME"),1,TamSx3('TB_NOME')[1]))
		EndIf

		oModelSTB:lValid := .T.

		TPB->(dbSkip())
	End
	oModelSTB:GoLine(1)

	//--------------------------------------------------------------------------
	// Load grid - Spare Parts / Peças de Reposição
	//--------------------------------------------------------------------------
	If oModelST9:GetValue('T9_CATBEM') != '3'
		oModelTPY  := oModel:GetModel(oModel:cId + '_TPY')
		oStructTPY := oModelTPY:GetStruct()
		aFldModel  := oStructTPY:GetFields()
		aRelation  := {}

		// Percorre campos que compõe a entidade do Json
		For nFields := 1 To Len(aFldModel)

			cField080 := aFldModel[nFields][3]

			If Substr(cField080 , 7 , 1) $ "0123456789"
				cField170 := "TPK_" + Substr(cField080,5,6) + Substr(cField080,10,1)
			Else
				cField170 := "TPK_" + Substr(cField080,5,7)
			EndIf

			aAdd(aRelation , { cField080 , cField170 })
		Next
		
		//--------------------------------------------------------------------------
        // Carrega Peças de Reposição do Bem Padrao (TPK)
        //--------------------------------------------------------------------------
		nIndex    := 1
        cCondicao := 'TPK->TPK_FILIAL + TPK->TPK_CODFAM'
		cChave    := xFilial('TPK') + cFamilPad

		If lRel12133 .Or. lGFrota
			nIndex    := 3
			cChave    += cModeloPad
            cCondicao += ' + TPK->TPK_TIPMOD'
		EndIf

		dbSelectArea('TPK')
		dbSetOrder(nIndex)
		dbSeek(cChave)
		While .Not. TPK->(Eof()) .And. &(cCondicao) == cChave

			lSeekReg := .F.

			For nLine := 1 To oModelTPY:Length()

				oModelTPY:GoLine(nLine)

				If oModelTPY:IsDeleted()
					Loop
				EndIf

				If FWFldGet('TPY_CODPRO') == TPK->TPK_CODPRO
					lSeekReg := .T.
					Exit
				EndIf
			Next

			If !lSeekReg .And. (oModelTPY:Length() != 1 .Or. .Not. Empty(FWFldGet('TPY_CODPRO')) .Or. oModelTPY:IsDeleted())
				// Adiciona linhas na grid
				oModelTPY:AddLine()
			EndIf

			For nFields := 1 To Len(aRelation)

				cField080 := aRelation[nFields][1]
				cField170 := aRelation[nFields][2]

				If FieldPos(cField170) < 1
					Loop
				EndIf

				// Valida e atribui valor ao campo
				oModelTPY:LoadValue(cField080 , TPK->(FieldGet(TPK->(FieldPos(cField170)))))
			Next

			// Set description
			If .Not. lSeekReg
				oModelTPY:LoadValue('TPY_NOMPEC' , SubStr(NGSEEK("SB1",TPK->TPK_CODPRO,1,"B1_DESC") , 1 , TamSx3('TPY_NOMPEC')[1]))
			EndIf

			oModelTPY:lValid:=.T.

			TPK->(dbSkip())
		End
		oModelTPY:GoLine(1)
	EndIf

	dbSelectArea('ST9')

	//--------------------------------------------------------------------
	// Validação para garantir que há necessidade de atualizar a view
	//--------------------------------------------------------------------
	If IsInCallStack( 'MNTA080CAD' ) .Or. IsInCallStack( 'MNTA084CAD' )
		oView := FWViewActive()
		oView:Refresh()
	EndIf

Return .T.

//--------------------------------------------------------------------
/*/{Protheus.doc} CHKCENTRAB
Consiste se o C. de Trabalho pertence ao  C. CusTo

@author Inacio Luiz Kolling
@since / /
@version P11
@return Bool
/*/
//--------------------------------------------------------------------
Function CHKCENTRAB(vTRABA,vCUSTO)

	If ExistBlock("MNTA0806")
		ExecBlock("MNTA0806",.F.,.F.,{vTRABA,vCUSTO})
	Else
		If !Empty(vTRABA)
			If NGIFDBSEEK("SHB",vTRABA,1) .And. SHB->HB_CC <> vCUSTO
				Help(" ",1,"CCUSTOTRAB")
				Return .F.
			EndIf
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA080TEM
Realiza as devidas alteracoes de acordo com o tipo de
controle de Contador do Bem.
(ESTA FUNCAO ESTA' SENDO USADA NO SX3 - T9_TEMCONT)

@param nOpcSX3 -> Obrigatorio;
Indica a chamada desta funcao pelo SX3:
1 - RELACAO (campo: T9_LIMICON)
2 - VALID   (campo: T9_TEMCONT)

@author  Wagner S. de Lacerda
@since   18/01/2012
@version MP11
/*/
//---------------------------------------------------------------------
Function MNTA080TEM(nOpcSX3)

	Local aArea    := GetArea()
	Local aAreaST9 := {}
	Local uRet     := Nil

	Local nLimitCont := 0

	dbSelectArea("ST9")
	aAreaST9 := GetArea()

	If NGIFDBSEEK("ST9", M->T9_CODBEM, 1)
		nLimitCont := ST9->T9_LIMICON
	EndIf

	//Se o contador for controlado pelo "Pai da Estrutura" ou pelo
	// "Pai Imediato", então não há Limite de Contador para o Bem.
	If M->T9_TEMCONT == "P" .Or. M->T9_TEMCONT == "I"
		M->T9_LIMICON := Val( Replicate("9",TAMSX3("T9_LIMICON")[1]) )
	Else
		//Caso contrario, zera o limite para obrigar o usuario a informar
		//(mas se o bem ja estiver cadastrado, deixa o limite do cadastro anterior)
		If fEraseCount()
			M->T9_LIMICON := 0
		Else
			M->T9_LIMICON := nLimitCont
		EndIf
	EndIf

	//Define o retorno de acordo com a chamada da funcao
	If nOpcSX3 == 1 //RELACAO
		uRet := M->T9_LIMICON
	ElseIf nOpcSX3 == 2 //VALID
		uRet := .T.
	EndIf

	RestArea(aAreaST9)
	RestArea(aArea)

Return uRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT080SX7C
Condição para execução de gatilhos

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Function MNT080SX7C( cField , cSequence )

	Local lRunTrigger := .T.
	Local cStatusTire := ""

	Default cField	  := ""
	Default cSequence := ""

	cField 	  := AllTrim( Upper( cField ) )
	cSequence := AllTrim( cSequence )

	If cField == 'T9_TEMCONT'
		If cSequence < '009'
			lRunTrigger := ( M->T9_TEMCONT == "N" .And. fEraseCount() )
		EndIf
	ElseIf cField == 'T9_CONTGAR' .Or. cField == 'T9_VARDIA'
		If cSequence == '001' .Or. cSequence == '002'
			lRunTrigger := ( M->T9_UNGARAN == 'K' .And. .Not. Empty( M->T9_VARDIA ) )
		ElseIf cSequence == '003'
			lRunTrigger := ( M->T9_UNGARAN == 'K' .And. Empty( M->T9_VARDIA ) )
		EndIf
	ElseIf cField == 'T9_PADRAO'
		If cSequence == '008' .Or. cSequence == '011'
			lRunTrigger := M->T9_PADRAO == 'N' .And. M->T9_FERRAME == 'R'
		ElseIf cSequence == '009' .Or. cSequence == '010'
			lRunTrigger := M->T9_PADRAO == 'N' .And. M->T9_FERRAME == 'R' .And. Inclui
		ElseIf cSequence == '012'
			lRunTrigger := M->T9_PADRAO == 'N' .And. M->T9_FERRAME == 'F'
		EndIf
	ElseIf cField == 'T9_STATUS'
		If cSequence == '002'
			lRunTrigger := (M->T9_STATUS != GetNewPar('MV_NGSTAPL',"") .And. Inclui)

		ElseIf cSequence == '003' .Or. cSequence == '004'
			lRunTrigger := .F.

			If M->T9_CATBEM == '3' .And. .Not. Empty( M->T9_STATUS )
				cStatusTire := GetNewPar("MV_NGSTAEU")
				cStatusTire += "/" + GetNewPar("MV_NGSTAER")
				cStatusTire += "/" + GetNewPar("MV_NGSTARS")
				cStatusTire += "/" + GetNewPar("MV_NGSTAEN")
				cStatusTire += "/" + GetNewPar("MV_NGSTEST")

				If GetNewPar("MV_NGMNTES","N") == 'S' .And. GetNewPar("MV_NGPNEST","N") == 'S' .And. !(M->T9_STATUS $ cStatusTire)
					lRunTrigger := .T.
				ElseIf M->T9_STATUS $ GetNewPar("MV_NGSTAPL")
					lRunTrigger := .T.
				EndIf
			EndIf
		EndIf
	EndIf

Return lRunTrigger

//---------------------------------------------------------------------
/*/{Protheus.doc} CALCGARAN
Calcula a data de garantia do bem

@author  Inacio Luiz Kollin
@since   //
@version MP11
/*/
//---------------------------------------------------------------------
Function CALCGARAN( dDate , cUnit , nQuantity )

	Local oModel   := FwModelActive()
	Local nContGar := M->T9_CONTGAR

	If cUnit == 'K'
		If !Empty( M->T9_VARDIA )
			dDtGaran := NGPROXMDT(M->T9_DTCOMPR,'D',(nQuantity / M->T9_VARDIA) )
			nContGar := nQuantity
		Else
			dDtGaran := SToD( Space( 8 ) )
		EndIf

	ElseIf cUnit == 'H'
		If !Empty(M->T9_DTINSTA)
			dDtGaran := NGPROXMDT(M->T9_DTINSTA,'D',(nQuantity / 24) )
		Else
			dDtGaran := SToD( Space( 8 ) )
		EndIf

	Else
		dDtGaran := NGPROXMDT(dDate,cUnit,nQuantity)
	EndIf

	If ValType( oModel ) == "O"
		oModel:LoadValue( oModel:cId + '_ST9','T9_DTGARAN', dDtGaran )
		oModel:LoadValue( oModel:cId + '_ST9','T9_CONTGAR', nContGar )
	Else
		M->T9_DTGARAN := dDtGaran
		M->T9_CONTGAR := nContGar
	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} fFatorPond
Mostra o campo nome da caracteristica, utilia a funcao

@author  Paulo Pego
@since   //
@version MP11
/*/
//------------------------------------------------------------------------------
Static Function fFatorPond( aTrigger )

	Local aMES := {},i,nVAL, oDLG1, xContent

	For i := 1 To 12
		nVAL := Val(Substr(M->T9_PONDERA,((i-1)*5)+1,4))
		nVAL := If(nVAL > 0.00, nVAL, 1.00)
		aAdd(aMES,nVAL)
	Next
	nOPCA := 2
	Define MsDialog oDLG1 Title Oemtoansi(STR0015) From 15,4 To 30,75 Of oMainWnd //"Fator de Ponderacao"
	@ 01.5,.1 Say Oemtoansi(STR0016) //"Jan."
	@ 01.1,02 MsGet aMES[01] Picture "9.99" Valid aMES[01] > 0.00
	@ 02.9,.1 Say Oemtoansi(STR0017) //"Fev."
	@ 02.5,02 MsGet aMES[02] Picture "9.99" Valid aMES[02] > 0.00
	@ 04.4,.1 Say Oemtoansi(STR0018) //"Mar."
	@ 04.0,02 MsGet aMES[03] Picture "9.99" Valid aMES[03] > 0.00
	@ 05.9,.1 Say Oemtoansi(STR0019) //"Abr."
	@ 05.5,02 MsGet aMES[04] Picture "9.99" Valid aMES[04] > 0.00
	@ 01.5,11.1 Say Oemtoansi(STR0020) //"Mai."
	@ 01.1,13 MsGet aMES[05] Picture "9.99" Valid aMES[05] > 0.00
	@ 02.9,11.1 Say Oemtoansi(STR0021) //"Jun."
	@ 02.5,13 MsGet aMES[06] Picture "9.99" Valid aMES[06] > 0.00
	@ 04.4,11.1 Say Oemtoansi(STR0022) //"Jul."
	@ 04.0,13 MsGet aMES[07] Picture "9.99" Valid aMES[07] > 0.00
	@ 05.9,11.1 Say Oemtoansi(STR0023) //"Ago."
	@ 05.5,13 MsGet aMES[08] Picture "9.99" Valid aMES[08] > 0.00
	@ 01.5,21.1 Say Oemtoansi(STR0024) //"Set."
	@ 01.1,23 MsGet aMES[09] Picture "9.99" Valid aMES[09] > 0.00
	@ 02.9,21.1 Say Oemtoansi(STR0025) //"Out."
	@ 02.5,23 MsGet aMES[11] Picture "9.99" Valid aMES[10] > 0.00
	@ 04.4,21.1 Say Oemtoansi(STR0026) //"Nov."
	@ 04.0,23 MsGet aMES[11] Picture "9.99" Valid aMES[11] > 0.00
	@ 05.9,21.1 Say Oemtoansi(STR0027) //"Dez."
	@ 05.5,23 MsGet aMES[12] Picture "9.99" Valid aMES[12] > 0.00
	Activate MsDialog oDLG1 On Init EnchoiceBar(oDLG1,{||nOPCA:=2,oDLG1:End()},{||nOPCA:=1,oDLG1:End()})

	If nOPCA == 2
		xContent := ""
		For i := 1 To 12
			xContent += " " + Str(aMES[i],4,2)
		Next
		aAdd( aTrigger , { 'ST9' , 'T9_PONDERA' , xContent }  )
	EndIf

Return .T.

//--------------------------------------------------------------------
/*/{Protheus.doc} fEraseCount
Verifica histórico do contador do bem e se consta apenas o
contador da inclusão.

@author  NG Informática Ltda.
@since   12/09/2006
@version MP11
/*/
//--------------------------------------------------------------------
Static Function fEraseCount()

	Local aAreaSTP := STP->( GetArea() )
	Local lApaga := .T.

	If M->T9_TEMCONT == "N" .And. NGIFDBSEEK( 'STP' , M->T9_CODBEM , 2 )

		// Pula para próximo registro da STP
		dbSkip()

		// Verifica se o próximo registro é do mesmo Bem.
		If	STP->TP_FILIAL == xFILIAL("STP") .And. STP->TP_CODBEM == M->T9_CODBEM
			// Indica que não poderá apagar informações de contador
			// Pois existe histórico de contador
			lApaga := .F.
		EndIf
	EndIf

	RestArea(aAreaSTP)

Return lApaga

//--------------------------------------------------------------------
/*/{Protheus.doc} NG080ATATF
Atualiza do ativo fixo se estiver integrado com as informado cadastro
do bem. So vai atualizar se o parametro MV_NGMNTAT estiver = a 2 ou 3.

@param cCODIMOB	- Codigo do imobilizado
cNOME		- Nome do bem
dDATAAQ	- Data da compra
cCHAPA		- Chapa
cLOCAL		- Local
cFORNEC	- Fornecedor
cLOJA		- Loja
cCCUSTO	- Centro de Custo
cVALCPA	- Valor da compra
cNFISCAL	- Numero da nota fiscal
cCODBEM	- Codigo do bem a
nOPCS		- Tipo de execucao (4=Alteracao, 3=inclusao)
cAtvOld	- Código anterior do ativo

@author  Elisangela Costa
@since   25/11/2005
@return  .T.
/*/
//--------------------------------------------------------------------
Function NG080ATATF(aAtfAtuMnt, cCODIMOB,cNOME,dDATAAQ,cCHAPA,cLOCAL,cFORNEC,cLOJA,cCCUSTO,cVALCPA,cNFISCAL,cCODBEM,nOPCS,cAtvOld)

	If ValType( aAtfAtuMnt ) == 'A'

		If Len( aAtfAtuMnt ) > 0 .And.;
		aAtfAtuMnt[1] == 1 .And.;
		aAtfAtuMnt[5] == 1 .And.;
		NGIFdbSeek( 'ST9' , aAtfAtuMnt[4] , 1 )

			RecLock( 'ST9' , .F. )
			ST9->T9_CODIMOB := aAtfAtuMnt[2] + aAtfAtuMnt[3]
			MsUnLock( 'ST9' )
		EndIf

	ElseIf GetNewPar("MV_NGMNTAT") $ "2#3" .And. !Empty(cCODIMOB)

		If NGIFdbSeek('SN1',cCODIMOB,1) .And. SN1->N1_QUANTD == 1

			RecLock("SN1",.F.)
			SN1->N1_DESCRIC := SubStr(cNOME,1,40)
			SN1->N1_AQUISIC := dDATAAQ
			SN1->N1_CHAPA   := cCHAPA
			SN1->N1_LOCAL   := cLOCAL
			SN1->N1_FORNEC  := cFORNEC
			SN1->N1_LOJA    := cLOJA
			SN1->N1_NFISCAL := cNFISCAL
			SN1->N1_CODBEM  := cCODBEM
			MsUnlock("SN1")
			If NGIFdbSeek('SN3',cCODIMOB+"01",1)
				RecLock("SN3",.F.)
				SN3->N3_VORIG1  := cVALCPA
				MsUnlock("SN3")
			EndIf
		EndIf

		If nOPCS == 4
			If ValType( cAtvOld ) <> 'C'
				cAtvOld := cCODATFIXO
			EndIf

			If cCODIMOB <> cAtvOld .And.;
			!Empty( cAtvOld ) .And.;
			NGIFdbSeek( 'SN1' , cAtvOld , 1 )

				//Atualiza o codigo do bem no TMS
				RecLock("SN1",.F.)
				SN1->N1_CODBEM := Space(14)
				MsUnlock("SN1")
			EndIf
		EndIf
	EndIf
Return .T.

//--------------------------------------------------------------------
/*/{Protheus.doc} MNA080CON
Monta um browse das ordens de servico
Opção 'Histórico' do ações relacionadas

@param cCODBEM080, string, código do bem
@author Thiago Olis Machado
@since 18/03/02
@return boolean
/*/
//--------------------------------------------------------------------
Function MNA080CON( cCODBEM080 )


	If FindFunction( 'MNTA080A' )

		MNTA080A( cCODBEM080 ) // Apresenta menu de forma padrão

	Else

		MNA080CON2( cCODBEM080 )

	EndIf

Return .T.

//--------------------------------------------------------------------
/*/{Protheus.doc} MNA080CON2
Monta um browse das ordens de servico

@param cCODBEM080, string, código do bem
@param aMenu, array, menu da rotina
@author Thiago Olis Machado
@since 18/03/02
@return boolean
/*/
//--------------------------------------------------------------------
Function MNA080CON2( cCODBEM080, aMenu )

	Local oTmpTbl1
	Local aBackup := NGBeginPrm()
	Local aPesq   := {}
	Local aField  := {}
	Local aDbf    := {{"CODBEM"  , "C", 16,0} ,;
						{"NOMEBEM" , "C", 30,0} ,;
						{"SERVICO" , "C", 06,0} ,;
						{"NOMESER" , "C", 30,0} ,;
						{"SEQRELA" , "C", 03,0}}

	Default aMenu := { { STR0004, 'MNTA080PE', 0, 1 },; // 'Pesquisar'
						{ STR0005, 'MNT080STF', 0, 2 },; // 'Visualizar'
						{ STR0011, 'OS080HIST', 0, 3 }}  // 'Historico'

	Private cTRB080 := GetNextAlias()

	aRotina := aMenu

	M->T9_CODBEM := If(cCODBEM080 <> Nil,cCODBEM080,ST9->T9_CODBEM)
	aNgButton := {}

	oTmpTbl1 := FWTemporaryTable():New( cTRB080, aDbf )//Intancia classe FWTemporaryTable
	oTmpTbl1:AddIndex( "Ind01" , {"CODBEM","SERVICO"} )//Cria indices
	oTmpTbl1:Create()//Cria a tabela temporaria

	aField := {{STR0030 ,{|| (cTRB080)->CODBEM  }, "C", 16 , 0, "@!" },; //"Bem"
			{STR0041 ,{|| (cTRB080)->NOMEBEM }, "C", 30 , 0,  "@!"},; //"Nome do Bem"
			{STR0042 ,{|| (cTRB080)->SERVICO }, "C", 06 , 0, "@!" },;  //"Servico"
			{STR0043 ,{|| (cTRB080)->NOMESER }, "C", 30 , 0, "@!" },; //"Nome do Servico"
			{STR0044 ,{|| (cTRB080)->SEQRELA }, "C", 03 , 0, "@!" }}  //"Sequencia"

	NGDBAREAORDE("ST9",1)
	Processa({|| fProcMan() }) //Grava manutenções na tabela temporária
	NGSETIFARQUI(cTRB080)

	//Cria Array para montar a chave de pesquisa
	aAdd( aPesq , { STR0030 + " + " + STR0042, {{"","C" , 255 , 0 ,"","@!"} }} )

	oBrowse:= FWMBrowse():New()
	oBrowse:SetDescription(cCadastro)
	oBrowse:SetTemporary(.T.)
	oBrowse:SetAlias(cTRB080)
	oBrowse:SetFields( aField )
	oBrowse:SetProfileID('0801')
	oBrowse:SetSeek( .T., aPesq ) //chave de pesquisa

	oBrowse:Activate()

	oTmpTbl1:Delete()

	//---------------------------------------------------------
	// Recupera a Ordem Original do arquivo principal
	//--------------------------------------------------------
	NGDBAREAORDE("ST9",1)

	NGReturnPrm( aBackup ) //Recupera variáveis private

Return .T.

//--------------------------------------------------------------------
/*/{Protheus.doc} fProcMan
Grava as manutenções na tabela temporária da opção Histórico

@author Thiago Olis Machado
@since 18/03/02
@return .T.
/*/
//--------------------------------------------------------------------
Static Function fProcMan()

	nREC := Recno()

	ProcRegua(nREC)
	NGIFdbSeek("STF",M->T9_CODBEM,1)
	While !EoF() .And. STF->TF_FILIAL == xFilial("STF") .And. STF->TF_CODBEM == M->T9_CODBEM
		IncProc()
		//Valida permissao do usuario quando esta' na Arvore Logica ou Planta Grafica
		If (IsInCallStack("MNTA902") .Or. IsInCallStack("MNTA907")) .And. AliasInDic("TUA") .And. AliasInDic("TUB")
			If !NGValidTUA("STF")
				dbSelectArea("STF")
				dbSkip()
				Loop
			EndIf
		EndIf
		dbSelectArea(cTRB080)
		(cTRB080)->(DbAppend())
		(cTRB080)->CODBEM  := STF->TF_CODBEM
		(cTRB080)->NOMEBEM := NGSEEK("ST9",M->T9_CODBEM,1,"Substr(ST9->T9_NOME,1,30)")
		(cTRB080)->SERVICO := STF->TF_SERVICO
		(cTRB080)->SEQRELA := STF->TF_SEQRELA
		(cTRB080)->NOMESER := NGSEEK("ST4",STF->TF_SERVICO,1,"T4_NOME")
		NGDBSELSKIP("STF")
	End

	NGIFdbSeek("STJ","B"+M->T9_CODBEM,2)
	While !EoF() .And. xFilial("STJ") == STJ->TJ_FILIAL .And. STJ->TJ_TIPOOS = "B" ;
	.And. STJ->TJ_CODBEM == M->T9_CODBEM

		dbSelectArea(cTRB080)
		If !dbSeek(STJ->TJ_CODBEM+STJ->TJ_SERVICO)
			//Valida permissao do usuario quando esta' na Arvore Logica ou Planta Grafica
			If (IsInCallStack("MNTA902") .Or. IsInCallStack("MNTA907")) .And. AliasInDic("TUA") .And. AliasInDic("TUB")
				If !NGValidTUA("STJ")
					dbSelectArea("STJ")
					dbSkip()
					Loop
				EndIf
			EndIf
			(cTRB080)->(DbAppend())
			(cTRB080)->CODBEM  := STJ->TJ_CODBEM
			(cTRB080)->NOMEBEM := NGSEEK("ST9",M->T9_CODBEM,1,"Substr(ST9->T9_NOME,1,30)")
			(cTRB080)->SERVICO := STJ->TJ_SERVICO
			(cTRB080)->SEQRELA := STJ->TJ_SEQRELA
			(cTRB080)->NOMESER := NGSEEK("ST4",STJ->TJ_SERVICO,1,"T4_NOME")
		EndIf
		NGDBSELSKIP("STJ")
	End

	NGIFdbSeek("STS","B"+M->T9_CODBEM,2)
	While !EoF() .And. xFilial("STS") == STS->TS_FILIAL .And. STS->TS_TIPOOS = "B";
	.And. STS->TS_CODBEM == M->T9_CODBEM

		dbSelectArea(cTRB080)
		If !dbSeek(STS->TS_CODBEM+STS->TS_SERVICO)
			(cTRB080)->(DbAppend())
			(cTRB080)->CODBEM  := STS->TS_CODBEM
			(cTRB080)->NOMEBEM := NGSEEK("ST9",M->T9_CODBEM,1,"Substr(ST9->T9_NOME,1,30)")
			(cTRB080)->SERVICO := STS->TS_SERVICO
			(cTRB080)->SEQRELA := STS->TS_SEQRELA
			(cTRB080)->NOMESER := NGSEEK("ST4",STS->TS_SERVICO,1,"T4_NOME")
		EndIf
		NGDBSELSKIP("STS")
	End

Return .T.

//--------------------------------------------------------------------
/*/{Protheus.doc} OS080HIST

@author Thiago Olis Machado
@since 18/03/02
@return .T.
/*/
//--------------------------------------------------------------------
Function OS080HIST()

	Local aAreaST9 := ST9->(GetArea())

	dbSelectArea("ST9")

	OSHISTORI('ST9',Recno(),4,,(cTRB080)->CODBEM,(cTRB080)->SERVICO,(cTRB080)->SEQRELA)

	dbSelectArea(cTRB080)

	RestArea(aAreaST9)

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT080STF
Visualiza o cadastro da manutencao

@author Elisangela Costa
@since 19/05/2006
@return .T.
/*/
//------------------------------------------------------------------------------
Function MNT080STF()

	Local lACHO := .F.

	If EoF()
		Help("",1,"NGCONVAZIO") //Consulta vazia
	Else
		If (cTRB080)->SEQRELA = "0"
			MsgInfo(STR0090+Chr(13)+;//"Manutencao do tipo corretiva, nao possui cadastro de manutencao"
			STR0091,STR0029)//"ATENCAO"#"para ser visualizado."
			Return .T.
		EndIf

		If NGIFdbSeek('STF',(cTRB080)->CODBEM+(cTRB080)->SERVICO+(cTRB080)->SEQRELA,1)
			lACHO := .T.
		EndIf

		If lACHO
			MNC600FOLD("STF",Recno(),2)
		Else
			MsgInfo(STR0092,STR0029) //"Cadastro da manutencao nao existe"#ATENCAO
			Return .T.
		EndIf
	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080PE
Monta a caixa de pesquisa Bem + Servico

@author Elisangela Costa
@since 30/04/04
@return .T.
/*/
//------------------------------------------------------------------------------
Function MNTA080PE()
	Local oDlg

	cRCODBEM := Space(LEN(STF->TF_CODBEM))
	cRCSERVI := Space(LEN(STF->TF_SERVICO))

	Define MsDialog oDlg From 300,120 To 400,370 Title OemToAnsi(STR0004) Pixel
	@ 0.5,1 Say OemToAnsi(STR0030)
	@ 0.5,5 Msget cRCODBEM  Picture '@!' SIZE 75,10 F3 "ST9"
	@ 1.5,1 Say OemToAnsi(STR0042)
	@ 1.5,5 Msget cRCSERVI  Picture '@!' SIZE 50,10 F3 "ST4"
	@ 3.7,20 BUTTON "&OK" SIZE 30,10 ACTION MNTA080POS(oDlg)
	Activate MsDialog oDlg Centered

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080POS
Posiciona no registro

@author Elisangela Costa
@since 30/04/04
@return .T.
/*/
//------------------------------------------------------------------------------
Static Function MNTA080POS(oDlg)

	dbSelectArea(cTRB080)
	dbSeek(cRCODBEM+cRCSERVI)
	oDlg:End()

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080HCO
Historico do contador

@author Inacio Luiz Kolling
@since 25/07/03
@return .T.
/*/
//------------------------------------------------------------------------------
Function MNTA080HCO(cBEMHISC,nVOPC)

	Local cALIAH := Alias(), nINDOH := IndexOrd()
	Local aRotiold := If(Type("aROTINA") == "A",aClone(aROTINA),{}), ccadold := If(Type("cCADASTRO") == "C",cCADASTRO,"")
	Local nX, nC
	Local nTam     := 0
	Local nDec     := 0
	Local cTitle   := ""
	Local cCampo   := ""
	Local cPict    := ""
	Local cValid   := ""
	Local cUso     := ""
	Local cType    := ""
	Local cArq     := ""
	Local cContext := ""
	Local cX3NVL   := ""

	cBEMPES  := cBEMHISC
	nTPCONT  := If(nVOPC == Nil,0,nVOPC)
	lTEM2CNT := NGIFdbSeek('TPE',cBEMPES,1)

	NGDBAREAORDE("STP",02)
	lHisC1 := dbSeek(xFilial("STP")+cBEMPES,.F.)
	NGDBAREAORDE("STP",02)
	lHisC2 := dbSeek(xFilial("TPP")+cBEMPES,.F.)

	If (nTPCONT == 0 .And. !lHisC1 .And. !lHisC2) .Or. (nTPCONT == 1 .And. !lHisC1) .Or. (nTPCONT == 2 .And. lTEM2CNT .And. !lHisC2)
		APMSGINFO(STR0185,STR0029) //"Não existem registros de histórico de contador para este bem!"##"ATENCAO"
		Return .F.
	EndIf

	Private oDlgHCO, oPanel, oSplitter, oPanel1, oPanel2, oPnl1Top, oPnl2Top
	Private aSize := MsAdvSize()
	Private nLeft := 0
	Private aChoice1 := {}, aHead1 := {}, aCols1 := {}, oGet1
	Private aChoice2 := {}, aHead2 := {}, aCols2 := {}, oGet2
	Private oFont12B := TFont():New("Arial",,-12,,.T.,,,,.T.,.F.)

	If !(AllTrim(GetTheme()) == "FLAT") .And. !SetMdiChild()
		aSize[7] := aSize[7]-50
		aSize[6] := aSize[6]-30
		aSize[5] := aSize[5]-02
		nLeft := 2
	EndIf

	Define MsDialog oDlgHCO From aSize[7],nLeft to aSize[6],aSize[5] Title STR0036 Pixel //Historico do Contador

	oDlgHCO:lMaximized := .T.

	oPanel := TPanel():New(01,01,,oDlgHCO,,,,,RGB(67,70,87),10,10,.F.,.F.)
	oPanel:Align := CONTROL_ALIGN_ALLCLIENT
	oPanel:Hide()

	oSplitter := tSplitter():New( 0,0,oPanel,100,100,1 )
	oSplitter:Align := CONTROL_ALIGN_ALLCLIENT

	oPanel1 := TPanel():New(01,01,,oSplitter,,,,,RGB(67,70,87),10,10,.F.,.F.)
	oPanel1:Align := CONTROL_ALIGN_ALLCLIENT

	oPnl1Top := TPanel():New(01,01,,oPanel1,,,,,RGB(67,70,87),14,14,.F.,.F.)
	oPnl1Top:Align := CONTROL_ALIGN_TOP

	oPnl1Left := TPanel():New(01,01,,oPanel1,,,,,RGB(67,70,87),12,12,.F.,.F.)
	oPnl1Left:Align := CONTROL_ALIGN_LEFT

	oBtnVis1 := TBtnBmp():NewBar("ng_ico_visualizar","ng_ico_visualizar",,,,{||M080VIS(oGet1:nAt,1)},,oPnl1Left)
	oBtnVis1:Align  := CONTROL_ALIGN_TOP
	oBtnVis1:cToolTip := STR0005  //"Visualizar"

	oPanel2:=TPanel():New(01,01,,oSplitter,,,,,RGB(67,70,87),10,10,.F.,.F.)
	oPanel2:Align := CONTROL_ALIGN_ALLCLIENT

	oPnl2Top := TPanel():New(01,01,,oPanel2,,,,,RGB(67,70,87),14,14,.F.,.F.)
	oPnl2Top:Align := CONTROL_ALIGN_TOP

	oPnl2Left := TPanel():New(01,01,,oPanel2,,,,,RGB(67,70,87),12,12,.F.,.F.)
	oPnl2Left:Align := CONTROL_ALIGN_LEFT

	oBtnVis2 := TBtnBmp():NewBar("ng_ico_visualizar","ng_ico_visualizar",,,,{||M080VIS(oGet2:nAt,2)},,oPnl2Left)
	oBtnVis2:Align  := CONTROL_ALIGN_TOP
	oBtnVis2:cToolTip := STR0005  //"Visualizar"

	If (nTPCONT == 0 .Or. nTPCONT == 1)

		aChoice1 := {"TP_CODBEM","TP_NOMBEM","TP_DTLEITU","TP_HORA","TP_POSCONT",; //Manter campo TP_CODBEM na ordem 01
					 "TP_ACUMCON","TP_VIRACON","TP_TIPOLAN","T9_TPCONTA"}

		nTam := Len(aChoice1)
		For nX := 1 To nTam

			cX3NVL := Posicione("SX3",2,aChoice1[nX],"X3_NIVEL")
			If cNivel >= cX3NVL  //sem X3USO
				cTitle   := Posicione("SX3",2,aChoice1[nx],"X3Titulo()")
				cCampo   := aChoice1[nx]
				cPict    := X3Picture(aChoice1[nx])
				nTam     := TAMSX3(aChoice1[nX])[1]
				nDec     := TAMSX3(aChoice1[nX])[2]
				cValid   := Posicione("SX3",2,aChoice1[nX],"X3_VALID")
				cUso     := X3USO(aChoice1[nx])
				cType    := Posicione("SX3",2,aChoice1[nX],"X3_TIPO")
				cArq     := Posicione("SX3",2,aChoice1[nX],"X3_ARQUIVO")
				cContext := Posicione("SX3",2,aChoice1[nX],"X3_CONTEXT")

				aAdd(aHead1,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cArq, cContext})
			EndIf
		Next

		//Monta aCols - Contador 1
		NGIFdbSeek("STP",cBEMPES,5)
		nC := 0
		While !EoF() .And. STP->TP_FILIAL == xFilial("STP") .And. STP->TP_CODBEM == cBEMPES
			nC++
			aAdd(aCols1, Array(Len(aHead1)+1))
			For nX := 1 to Len(aHead1)
				If "TP_" $ aHead1[nX][2]
					If aHead1[nX][10] == "V"
						aCols1[nC,nX] := CriaVar(AllTrim(aHead1[nX,2]))
					Else
						aCols1[nC,nX] := FieldGet(FieldPos(aHead1[nX,2]))
					EndIf
					If "TP_TIPOLAN" $ aHead1[nX][2]
						Do Case
							case aCols1[nC,nX] == "C"
							aCols1[nC,nX] := STR0037 //"Contador"
							case aCols1[nC,nX] == "P"
							aCols1[nC,nX] := STR0186 //"Producao"
							case aCols1[nC,nX] == "A"
							aCols1[nC,nX] := STR0187 //"Abastecimento"
							case aCols1[nC,nX] == "Q"
							aCols1[nC,nX] := STR0188 //"Quebra"
							case aCols1[nC,nX] == "I"
							aCols1[nC,nX] := STR0189 //"Inclusão"
							case aCols1[nC,nX] == "V"
							aCols1[nC,nX] := STR0190 //"Virada"
						Endcase
					ElseIf "TP_NOMBEM" $ aHead1[nX][2]
						aCols1[nC,nX] :=  NGSEEK("ST9",aCols1[nC,01],1,"T9_NOME")
					EndIf
				ElseIf "T9_" $ aHead1[nX][2]
					aCols1[nC,nX] := NGSEEK("ST9",aCols1[nC,01],1,aHead1[nX][2])
				EndIf
			Next
			aCols1[nC,Len(aHead1)+1] := .F.

			STP->(dbSkip())
		EndDo

		If Len(aCols1) == 0
			aCols1 := BlankGetD(aHead1)
		EndIf

		oGet1 := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oPanel1,aHead1,aCols1)
		oGet1:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
		oGet1:oBrowse:Refresh()
		@ 004,010 Say STR0153 Pixel Of oPnl1Top FONT oFont12B Color CLR_WHITE //"Contador 1"
	Else
		oPanel1:Hide()
	EndIf

	If (lTEM2CNT .And. nTPCONT == 0) .Or. (nTPCONT == 2)
		aChoice2 := {"TPP_CODBEM","TPP_NOMBEM","TPP_DTLEIT","TPP_HORA","TPP_POSCON",; //Manter campo TPP_CODBEM na ordem 01
					 "TPP_ACUMCO","TPP_VIRACO","TPP_TIPOLA","TPE_TPCONT"}

		nTam := Len(aChoice2)
		For nX := 1 To nTam

			cX3NVL := Posicione("SX3",2,aChoice1[nX],"X3_NIVEL")
			If cNivel >= cX3NVL  //sem X3USO
				cTitle   := Posicione("SX3",2,aChoice2[nx],"X3Titulo()")
				cCampo   := aChoice2[nx]
				cPict    := X3Picture(aChoice2[nx])
				nTam     := TAMSX3(aChoice2[nX])[1]
				nDec     := TAMSX3(aChoice2[nX])[2]
				cValid   := Posicione("SX3",2,aChoice2[nX],"X3_VALID")
				cUso     := X3USO(aChoice2[nx])
				cType    := Posicione("SX3",2,aChoice2[nX],"X3_TIPO")
				cArq     := Posicione("SX3",2,aChoice2[nX],"X3_ARQUIVO")
				cContext := Posicione("SX3",2,aChoice2[nX],"X3_CONTEXT")

				aAdd(aHead2,{cTitle, cCampo, cPict, nTam, nDec, cValid, cUso, cType, cArq, cContext})
			EndIf
		Next

		//Monta aCols - Contador 2
		NGIFdbSeek("TPP",cBEMPES,5)
		nC := 0
		While !EoF() .And. TPP->TPP_FILIAL == xFilial("TPP") .And. TPP->TPP_CODBEM == cBEMPES
			nC++
			aAdd(aCols2, Array(Len(aHead2)+1))
			For nX := 1 to Len(aHead2)
				If "TPP_" $ aHead2[nX][2]
					If aHead2[nX][10] == "V"
						aCols2[nC,nX] := CriaVar(AllTrim(aHead2[nX,2]))
					Else
						aCols2[nC,nX] := FieldGet(FieldPos(aHead2[nX,2]))
					EndIf
					If "TPP_TIPOLA" $ aHead2[nX][2]
						Do Case
							case aCols2[nC,nX] == "C"
							aCols2[nC,nX] := STR0037 //"Contador"
							case aCols2[nC,nX] == "P"
							aCols2[nC,nX] := STR0186 //"Producao"
							case aCols2[nC,nX] == "A"
							aCols2[nC,nX] := STR0187 //"Abastecimento"
							case aCols2[nC,nX] == "Q"
							aCols2[nC,nX] := STR0188 //"Quebra"
							case aCols2[nC,nX] == "I"
							aCols2[nC,nX] := STR0189 //"Inclusão"
							case aCols2[nC,nX] == "V"
							aCols2[nC,nX] := STR0190 //"Virada"
						Endcase
					ElseIf "TPP_NOMBEM" $ aHead2[nX][2]
						aCols2[nC,nX] :=  NGSEEK("ST9",aCols2[nC,01],1,"T9_NOME")
					EndIf
				ElseIf "TPE_" $ aHead2[nX][2]
					aCols2[nC,nX] := NGSEEK("TPE",aCols2[nC,01],1,aHead2[nX][2])
				EndIf
			Next
			aCols2[nC,Len(aHead2)+1] := .F.

			TPP->(dbSkip())
		EndDo

		If Len(aCols2) == 0
			aCols2 := BlankGetD(aHead2)
		EndIf

		oGet2 := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oPanel2,aHead2,aCols2)
		oGet2:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
		oGet2:oBrowse:Refresh()
		@ 004,010 Say STR0156 Pixel Of oPnl2Top FONT oFont12B Color CLR_WHITE //"Contador 2"
	Else
		oPanel2:Hide()
	EndIf

	oPanel:Show()

	Activate Dialog oDlgHCO On Init (ENCHOICEBAR(oDlgHCO,{||oDlgHCO:End()},{||oDlgHCO:End()}))

	aRotina   := Aclone(aRotiold)
	cCADASTRO := ccadold
	NGDBAREAORDE(cALIAH,nINDOH)
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080PER
Mostra a ultima utilizacao de cada peca de reposicao no bem

@author Elisangela Costa
@since 07/07/2004
@return .T.
/*/
//------------------------------------------------------------------------------
Function MNTA080PER(cCODBEM080)
	Local oBrw, n := 1
	Private oDlg080xy,aULTPECASR := {}

	aULTPECASR := If(cCODBEM080 <> Nil,NGPEUTIL(cCODBEM080),NGPEUTIL(M->T9_CODBEM))

	If !Empty(aULTPECASR)

		Define Dialog oDlg080xy From 12.5,16 To 35,91 Title STR0058 //"Ultima utilizacao de Pecas de Reposicao"
		@ 150,250 Button STR0059 Of oDlg080xy Size 40,10 Pixel Action(MNT080IMPR()) //"&Imprimir"

		@ .30,0.5 Listbox oBrw Fields aULTPECASR[n][1],;
		NGSEEK("SB1",aULTPECASR[n][1],1,'SubStr(B1_DESC,1,30)'),;
		aULTPECASR[n][2],;
		aULTPECASR[n][3],;
		Transform(aULTPECASR[n][4],"@E 999,999,999"),;
		Transform(aULTPECASR[n][5],"@E 999,999,999"),;
		Transform(aULTPECASR[n][6],"@E 999,999,999"),;
		Transform(aULTPECASR[n][7],"@E 999,999,999"),;
		aULTPECASR[n][8],;
		aULTPECASR[n][9];
		headers STR0060,STR0061,STR0062,STR0063,STR0064,STR0065,; //"Codigo"#"Descricao"#"Dt.U.Util."#"Hr.U.Util."#"Cont1 U.Util."#"Cont2 U.Util."
		STR0066,STR0067,STR0068,STR0069;                  //"Cont1.Prox.Man."#"Cont2.Prox.Man."#"Dt.Prox.Man.C1"#"Dt.Prox.Man.C2"
		fieldsizes 50,70,40,30,50,50,50,50,40,40;
		Of oDlg080xy Size 285,140

		oBrw:bGotop    := { || n := 1 }
		oBrw:bGoBottom := { || n := eval( oBrw:bLogicLen ) }
		oBrw:bSkip     := { | nwant, nold | nold := n , n += nwant,;
		n := max( 1, min( n, eval( oBrw:bLogicLen ))),n - nOld }
		oBrw:bLogicLen := { || Len(aULTPECASR) }
		oBrw:cAlias    := "Array"

		Activate Dialog oDlg080xy
	Else
		MsgInfo(STR0070 + CHR(13); //"Nao existe informacoes de ultima utilizacao"
		+STR0071,STR0029)  //"de pecas de reposicao do bem." #"ATENCAO"
	EndIf
Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT080IMPR
Impressao das informacoes de ultima utilizacao de pecas de
reposicao do bem

@author Elisangela Costa
@since 07/07/2004
@return .T.
/*/
//------------------------------------------------------------------------------
Function MNT080IMPR()

	Local cString    := "ST9"
	Local cDesc1     := STR0058 //"Ultima utilizacao de Pecas de Reposicao"
	Local cDesc2     := ""
	Local cDesc3     := ""
	Local wnrel      := "MNTA080"

	Private aReturn  := {STR0072, 1,STR0073, 2, 2, 1, "",1 }    //"Zebrado"#"Administracao"
	Private nLastKey := 0
	Private Titulo   := cDesc1
	Private Tamanho  := "G"

	//--------------------------------------------
	// Envia controle para a funcao SETPRINT
	//--------------------------------------------
	wnrel := SetPrint(cString,wnrel,,titulo,cDesc1,cDesc2,cDesc3,.F.,"")
	If nLastKey = 27
		Set Filter To
		Return
	EndIf

	SetDefault(aReturn,cString)
	RptStatus({|lEnd| A080Imp(@lEnd,wnRel,titulo,tamanho)},titulo)

Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} A080Imp
Impressao do Relatorio

@author Elisangela Costa
@since 07/07/2004
@return .T.
/*/
//------------------------------------------------------------------------------
Static Function A080Imp(lEnd,wnRel,titulo,tamanho)
	Local cRodaTxt   := ""
	Local nCntImpr   := 0
	Local xyg        := 0

	Private li       := 80
	Private m_pag    := 1
	Private Cabec1   :=  STR0074 //"Codigo           Descricao                       Dt.U.Util. Hr.U.Util. Cont1 U.Util. Cont2 U.Util. Cont1.Prox.Man. Cont2.Prox.Man. Dt.Prox.Man.C1 Dt.Prox.Man.C2"
	Private Cabec2   := " "
	Private nomeprog := "MNTA080"
	nTipo            := IIF(aReturn[4]==1,15,18)

	/*
	1         2         3         4         5         6         7         8         9       100       110       120       130       140       150       160       170       180       190       200       210       220
	01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
	_____________________________________________________________________________________________________________________________________________________________________________________________________________________________
	Codigo           Descricao                       Dt.U.Util. Hr.U.Util. Cont1 U.Util. Cont2 U.Util. Cont1.Prox.Man. Cont2.Prox.Man. Dt.Prox.Man.C1 Dt.Prox.Man.C2
	_____________________________________________________________________________________________________________________________________________________________________________________________________________________________

	xxxxxxxxxxxxxxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  99/99/9999 99:99        999.999.999   999.999.999     999.999.999     999.999.999 99/99/9999     99/99/9999

	*/

	//-------------------------------------------------------
	// Define o indice de leitura do arquivo de Bens
	//-------------------------------------------------------

	SetRegua(LastRec())
	For xyg := 1 To Len(aULTPECASR)
		IncRegua()
		NGSOMALI(58)
		@LI,000 PSay aULTPECASR[xyg][1] Picture "@!"
		@li,032 PSay NGSEEK("SB1",aULTPECASR[xyg][1],1,'SubStr(B1_DESC,1,30)') Picture "@!"
		@li,064 PSay aULTPECASR[xyg][2] Picture "99/99/9999"
		@li,075 PSay aULTPECASR[xyg][3] Picture "99:99"
		@li,088 PSay aULTPECASR[xyg][4] Picture "@E 999,999,999"
		@li,102 PSay aULTPECASR[xyg][5] Picture "@E 999,999,999"
		@li,118 PSay aULTPECASR[xyg][6] Picture "@E 999,999,999"
		@li,134 PSay aULTPECASR[xyg][7] Picture "@E 999,999,999"
		@li,146 PSay aULTPECASR[xyg][8] Picture "99/99/9999"
		@li,161 PSay aULTPECASR[xyg][9] Picture "99/99/9999"
	Next xyg

	Roda(nCntImpr,cRodaTxt,Tamanho)
	Set Filter To
	Set Device To Screen

	If aReturn[5] = 1
		Set Printer To
		dbCommitAll()
		OurSpool(wnrel)
	EndIf
	MS_FLUSH()

Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} M080VIS
Visualiza um registro do Historico do Contador (1 ou 2)

@param nAtCols - Posicao do registro (linha do aCols)
nTipCont - Tipo de Contador (browse 1 ou 2)

@author Felipe N. Welter
@since 12/03/09
@return .T.
/*/
//------------------------------------------------------------------------------
Function M080VIS(nAtCols,nTipCont)

	Local cArea := GetArea(),aOldMenu := aClone(asMenu)
	Local cOldCad := If(Type("cCADASTRO") <> "U",cCADASTRO,"")
	Local aOldNgBtn := If(Type("aNgButton") <> "U",aClone(aNgButton),{})
	Local OldAChoice := If(Type("aChoice") <> "U", aClone(aChoice),{})

	aNgButton := {}
	cCadastro := STR0218 + AllTrim( Str(nTipCont) ) + " (" + AllTrim( ST9->T9_CODBEM ) + ")" //"Histórico do Contador "
	aChoice   := {}

	If nTipCont == 1
		nPosCODBEM := aScan(aHead1,{|x| Trim(Upper(x[2])) == "TP_CODBEM"})
		nPosDTLEIT := aScan(aHead1,{|x| Trim(Upper(x[2])) == "TP_DTLEITU"})
		nPosHRLEIT := aScan(aHead1,{|x| Trim(Upper(x[2])) == "TP_HORA"})

		If ValType(nAtCols) == 'N'
			If nAtCols <= Len(oGet1:aCols)
				If NGIFdbSeek("STP",oGet1:aCols[nAtCols][nPosCODBEM]+DTOS(oGet1:aCols[nAtCols][nPosDTLEIT])+oGet1:aCols[nAtCols][nPosHRLEIT],5)
					NGCAD01("STP",Recno(),2)
				EndIf
			EndIf
		EndIf
	ElseIf nTipCont == 2
		nPosCODBEM := aScan(aHead2,{|x| Trim(Upper(x[2])) == "TPP_CODBEM"})
		nPosDTLEIT := aScan(aHead2,{|x| Trim(Upper(x[2])) == "TPP_DTLEIT"})
		nPosHRLEIT := aScan(aHead2,{|x| Trim(Upper(x[2])) == "TPP_HORA"})

		If ValType(nAtCols) == 'N'
			If nAtCols <= Len(oGet2:aCols)
				If NGIFdbSeek("TPP",oGet2:aCols[nAtCols][nPosCODBEM]+DTOS(oGet2:aCols[nAtCols][nPosDTLEIT])+oGet2:aCols[nAtCols][nPosHRLEIT],5)
					NGCAD01("TPP",Recno(),2)
				EndIf
			EndIf
		EndIf
	EndIf

	RestArea(cArea)

	asMenu    := aClone(aOldMenu)
	cCadastro := cOldCad
	aNgButton := aClone(aOldNgBtn)
	aChoice   := aClone(OldAChoice)

Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080COM
Mostra o bem pai que o componente se encontra na estrutura

@param String cCodBem: Código do bem
@author NG Informática Ltda.
@since 01/01/2015
@return .T.
/*/
//------------------------------------------------------------------------------
Function MNTA080COM( cCodBem )

	// Controle de validação
	Local lValid := .T.
	Local cError := ""

	// Objeto visual
	Local oDlg

	// Posicionamentos de tabelas em uso
	Local aAreaST9 := ST9->( GetArea() )
	Local aAreaSTZ := STZ->( GetArea() )
	Local aAreaTPS := TPS->( GetArea() )

	//--------------------------------------------------------------------------
	// Validações iniciais
	//--------------------------------------------------------------------------
	If .Not. NGIFdbSeek( 'STZ' , cCodBem + "E" , 1 )
		lValid := .F.
		cError := STR0056 // "Bem nao faz parte de estrutura."
	EndIf

	//--------------------------------------------------------------------------
	// Apresenta dialog
	//--------------------------------------------------------------------------
	If lValid

		NGIFdbSeek('ST9',STZ->TZ_BEMPAI ,1)
		NGIFdbSeek('TPS',STZ->TZ_LOCALIZ,1)

		// "Localizacao do Componente na Estrutura"
		Define MsDialog oDlg From 300,120 To 480,640;
		Title OemToAnsi( STR0050 ) Pixel

		@ 0.5,01 Say OemToAnsi( STR0051 ) //"Bem Pai:"
		@ 0.5,04 Msget STZ->TZ_BEMPAI Picture '@!';
		When .F. Size 070,10
		@ 0.5,13 Msget ST9->T9_NOME	  Picture '@!';
		When .F. Size 150,10

		@ 1.5,01 Say OemToAnsi( STR0052 ) //"Localizacao...........:"
		@ 1.5,08 Msget STZ->TZ_LOCALIZ Picture '@!';
		When .F. Size 038,10
		@ 1.5,13 Msget TPS->TPS_NOME   Picture '@!';
		When .F. Size 150,10

		@ 2.5,01 Say OemToAnsi( STR0053 )//"Data de Entrada.....:"
		@ 2.5,08 Msget STZ->TZ_DATAMOV Picture '99/99/9999';
		When .F. Size 050,10

		@ 3.5,01 Say OemToAnsi( STR0054 )//"Contador 1 Entrada:"
		@ 3.5,08 Msget STZ->TZ_POSCONT Picture '@E 999,999,999';
		When .F. Size 050,10

		@ 4.5,01 Say OemToAnsi( STR0055 )//"Contador 2 Entrada:"
		@ 4.5,08 Msget STZ->TZ_POSCON2 Picture '@E 999,999,999';
		When .F. Size 050,10

		Define sButton From 74,226 Type 1 Enable Of oDlg Action oDlg:End()
		Activate MsDialog oDlg Centered
	Else
		Help( " ",1,STR0109,,cError,3,1 ) // "NAO CONFORMIDADE"
	EndIf

	//--------------------------------------------------------------------------
	// Restaura posicionamento de tabelas
	//--------------------------------------------------------------------------
	RestArea( aAreaST9 )
	RestArea( aAreaSTZ )
	RestArea( aAreaTPS )

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080SUH
Historico do Sulco do Pneu

@param String cCodBem: Código do bem
@author NG Informática Ltda.
@since 01/01/2015
@return .T.
/*/
//------------------------------------------------------------------------------
Function MNTA080SUH( cCodBem )

	Local cDescric := STR0140 // "Histórico do sulco"
	Local cFilter  := '@ TQV_FILIAL = ' + ValToSQL( xFilial( 'TQV' ) ) + ' AND ' +;
						'TQV_CODBEM = ' + ValToSQL( cCodBem )

	If FindFunction( 'MNTA083A' )

		//-----------------------------------
		// Apresenta menu de forma padrão
		//-----------------------------------
		MNTA083A( cCodBem, 'TQV', cFilter, cDescric )

	Else

		MNTA080SU2( cCodBem, 'TQV', cFilter, cDescric )

	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080HST
Historico do Status do Pneu

@param String cCodBem: Código do bem
@author NG Informática Ltda.
@since 01/01/2015
@return .T.
/*/
//------------------------------------------------------------------------------
Function MNTA080HST( cCodBem )

	Local lOk      := .T.
	Local cDescric := STR0104 // 'Historico do Status'
	Local cFilter  := ' TQZ->TQZ_FILIAL == ' + ValtoSql( xFilial('TQZ') ) + ' .And. TQZ->TQZ_CODBEM == ' + ValtoSql( cCodBem )

	If FindFunction( 'MNTA083A' )

		//-----------------------------------
		// Apresenta menu de forma padrão
		//-----------------------------------
		lOk := MNTA083A( cCodBem, 'TQZ', cFilter, cDescric )

	Else

		lOk := MNTA080SU2( cCodBem, 'TQZ', cFilter, cDescric )

	EndIf

Return lOk

//----------------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080SU2
Aciona browser de histótico de sulco ou status de pneu

@author Maria Elisandra de Paula
@since 14/05/2021

@param cTire, string, código do pneu
@param cTable, string, tabela a ser apresentada
@param cFilter, string, filtro do browser
@param cDesc, string, descrição da rotina
@param aMenu, array, menu da rotina

@return boolean
/*/
//----------------------------------------------------------------------------------------
Function MNTA080SU2( cTire, cTable, cFilter, cDesc, aMenu )

	Local aNGBeginPrm := NGBeginPrm()
	Local aArea       := GetArea()
	Local aAreaST9    := ST9->( GetArea() )
	Local aAreaTQV    := TQV->( GetArea() )
	Local aAreaTQZ    := TQZ->( GetArea() )
	Local lOk         := .F.

	Default aMenu := { { STR0005 , 'NGCAD01' , 0 , 2 } } // 'Visualizar'

	Private aRotina := aMenu

	If NGSEEK( 'ST9' , cTire , 1 , 'T9_CATBEM' ) != '3'

		// 'NAO CONFORMIDADE' # 'Categoria do bem não associada à integração com' 'Pneu'
		Help( ' ', 1, STR0109,, STR0117 + Space( 1 ) + STR0102 , 3, 1 )

		lOk := .F.

	Else

		oBrowse := FWMBrowse():New()
		oBrowse:SetAlias( cTable )
		oBrowse:SetDescription( cDesc )
		oBrowse:SetFilterDefault( cFilter )
		oBrowse:Activate()

	EndIf

	NGReturnPrm( aNGBeginPrm )
	RestArea( aArea )
	RestArea( aAreaST9 )
	RestArea( aAreaTQV )
	RestArea( aAreaTQZ )

Return lOk

//------------------------------------------------------------------------------
/*/{Protheus.doc} VldOSBem()
Função que exibe um arquivo de Log, caso o Bem for inativado e estiver
atrelado à uma ordem de serviço.

@author  Elynton Fellipe Bazzo
@since   08/10/2013

@source VldOSBem()

@param  [nTypeOS], Númerico, Tipo de OS (0 - Preventiva e Corretiva, 1 - Preventiva).
@return lReturn  , Lógico  , Informa se o processo foi validado.

@obs Reescrito por Alexandre Santos, 03/09/2018.
/*/
//------------------------------------------------------------------------------
Function VldOSBem(nTypeOS)

	Local aArea     := GetArea()
	Local aAreaSTJ  := STJ->(GetArea())
	Local aAreaST9  := ST9->(GetArea())
	Local cAlsQry   := GetNextAlias()
	Local cTexto    := ""
	Local cCondQry  := ""
	Local lReturn   := .T.
	Local oFont     := Nil
	Local oDlgl     := Nil
	Local oMemo     := Nil

	Private cFILTER	:= "TJ_SITUACA <> 'C' .And. TJ_TERMINO == 'N' " + IIf(ReadVar() == "M->T9_SITMAN", ".And. TJ_PLANO > '000000'", "")
	Private aLog	:= Array(1)

	Default nTypeOS := 0

	cCondQry := IIf(nTypeOS == 1, "% STJ.TJ_PLANO <> '000000'%", "% STJ.TJ_PLANO >= '000000'%")

	BeginSql Alias cAlsQry
		SELECT STJ.TJ_ORDEM, STJ.TJ_PLANO, STJ.TJ_SERVICO
		FROM %Table:STJ% STJ
		WHERE
			STJ.%NotDel% AND
			STJ.TJ_FILIAL = %xFilial:STJ% AND
			STJ.TJ_CODBEM = %exp:M->T9_CODBEM% AND
			STJ.TJ_SITUACA <> %exp:'C'% AND
			STJ.TJ_TERMINO = %exp:'N'% AND
			%exp:cCondQry%
	EndSql

	If !EoF()
		lReturn  := .F.
		If !(ReadVar() == "M->T9_SITMAN")
			cTexto   := STR0273 //Para inativação do bem é necessário que sejam finalizadas as ordens de serviço em aberto.
			aLog[1]  := { cTexto }
			cTexto   += CRLF //Pula linha
			cTexto   += CRLF + STR0275 + Space(TAMSX3("TJ_ORDEM")[1]) + STR0276 + Space(TAMSX3("TJ_PLANO")[1]) + STR0277 + CRLF //"Ordem Serv." - "Plano Manut." - "Serviço"

			//Imprime no LOG uma lista das OS's abertas relacionadas ao bem.
			Do While (cAlsQry)->(!EoF())
				cTexto += (cAlsQry)->TJ_ORDEM + Space(13) + (cAlsQry)->TJ_PLANO + Space(15)	+ (cAlsQry)->TJ_SERVICO + CRLF
				(cAlsQry)->(dbSkip())
			EndDo

			DEFINE FONT oFont NAME "Courier New" SIZE 5,0
			DEFINE MSDIALOG oDlgl TITLE STR0274 From 3,0 TO 340,417 COLOR CLR_BLACK,CLR_WHITE PIXEL // "Verificar Ordem de Serviço"
			@ 5,5 GET oMemo  VAR cTexto MEMO SIZE 200,145 OF oDlgl PIXEL
			oMemo:bRClicked := {||AllwaysTrue()}
			oMemo:oFont 	:= oFont
			oMemo:lReadOnly := .T.

			DEFINE SBUTTON FROM 153,175 TYPE 1  ACTION oDlgl:End() 						  ENABLE OF oDlgl PIXEL // Ok
			DEFINE SBUTTON FROM 153,145 TYPE 9  ACTION MNC600ORD(ST9->T9_CODBEM, cFILTER) ENABLE OF oDlgl PIXEL // Ordem de Serviço
			DEFINE SBUTTON FROM 153,115	TYPE 13 ACTION ( cFile := cGetFile( STR0279, OemToAnsi( STR0278 )),;
			If( cFile = "", .T., MemoWrite( cFile, cTexto )),) 	ENABLE OF oDlgl PIXEL  //"Salvar Como..."

			ACTIVATE MSDIALOG oDlgl CENTERED
		EndIf
	EndIf

	(cAlsQry)->(dbCloseArea())
	RestArea( aAreaSTJ ) //Retorna a área de trabalho da tabela de ordens de serviço.
	RestArea( aAreaST9 ) //Retorna a área de trabalho da tabela de Bens
	RestArea( aArea )    //Retorna a área de trabalho.

Return lReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG080ACUM
Atribuicao do contador acumulado

@author Inacio Luiz Kolling
@since 04/06/2004
@return lRetAC
/*/
//------------------------------------------------------------------------------
Function NG080ACUM()

	Local lRetAC := .F.

	If INCLUI

		lRetAC := .T.

	ElseIf	ALTERA

		If M->T9_TEMCONT == "S"
			If !NGIFdbSeek( 'STP' , M->T9_CODBEM , 1 )
				dbSelectArea( "SX7" )
				lRetAC := .T.
			EndIf
		EndIf

	EndIf

Return lRetAC

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG080SALSB2
Pesquisa o saldo em estoque do produto de reposicao

@author Inacio Luiz Kolling
@since 11/03/2008
@return nSaldo
/*/
//------------------------------------------------------------------------------
Function NG080SALSB2( cProduto )

	Local aAreaAtual := GetArea()
	Local nSaldo := 0

	NGIFDBSEEK( 'SB1' , cProduto , 1 )

	// Verifica se existe histórico SB2
	If !Dbseek( xFilial( 'SB2' ) + cProduto + SB1->B1_LOCPAD )
		CriaSB2( cProduto , SB1->B1_LOCPAD )
	EndIf

	// Integracao por Mensagem Unica
	If GetNewPar( 'MV_NGINTER' , "" ) == 'M'

		// Atualiza tabela
		nSaldo := NGMUStoLvl( cProduto , SB1->B1_LOCPAD, .F. )

	Else
		// Atualiza tabela SB2
		nSaldo := SaldoSB2( .F. , .F. , dDataBase + 3650 , .F. )
	EndIf

	RestArea( aAreaAtual )

Return nSaldo

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT080FRDS
Filtro da consulta padrao SH1DIS.
Verifica recursos disponiveis. (Nao vinculados)

@author Hugo R. Pereira
@since 07/05/2013
@version MP11
@return Boolean Define se o recurso foi validado corretamente.
@return .T. Recurso nao utilizado.
@return .F. Recurso ja utilizado, inconsistente.
/*/
//------------------------------------------------------------------------------
Function MNT080FRDS()

	Local nOrdST9  := NGRETORDEM("ST9","T9_FILIAL+T9_FERRAME+T9_RECFERR")
	Local aAreaST9 := ST9->( GetArea() )
	Local lRet     := .T.

	// Verifica se o recurso está sendo utilizado por outro bem
	If nOrdST9 > 0
		lRet := !NGIFDBSEEK( 'ST9', 'R' + SH1->H1_CODIGO , nOrdST9 )
	EndIf

	RestArea( aAreaST9 )
	dbSelectArea( 'SH1' )

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG080GAR()
Função para substituir CALCGARAN na cópia de um bem.
@author Diego de Oliveira
@since	30/04/2015
@return lRet
/*/
//------------------------------------------------------------------------------
Function NG080GAR()

	//Condição para "gatilhar" após o preenchimento da Data de Compra
	If !Empty(M->T9_DTCOMPR) .AND. !Empty(M->T9_PRGARAN) .AND. !Empty(M->T9_UNGARAN)
		CALCGARAN(M->T9_DTCOMPR,M->T9_UNGARAN,M->T9_PRGARAN)
	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MN080INTMB
Verifica se ha integracao com processo de Mobilidade.

@author Rafael Reinert
@since 30/11/2012
@version MP10
@return lAbreCampo - Indica se campo ficará aberto
/*/
//------------------------------------------------------------------------------
Function MN080INTMB(cCodVrf, nTipo, cParteDi )

	Local cCodFam := ""
	Local lRet    := .F.

	Default cCodVrf := ""
	Default nTipo   := 1
	Default cParteDi := IIf( IsInCallStack("MNTA080") , M->T9_PARTEDI , ST9->T9_PARTEDI )

	cCodFam := IIf( nTipo == 1, cCodVrf, "" ) // Repassado codigo da Familia

	// Se encontra compilado a funcao MNTI080  e o parametro da integracao habilitado
	If FindFunction( "NGINTMOB" ) .And. NGINTMOB( "MNTI080" )

		// Valida familia somente se o algum codigo de pesquisa for repassado como parametro
		If !( lRet := Empty(cCodVrf) )
			If cParteDi == "1"
				// Seleciona conforme o tipo repassado (Familia / Bem)
				cCodFam := If( Empty(cCodFam), NGSEEK("ST9", cCodVrf, 1, "ST9->T9_CODFAMI"), cCodFam )
				lRet    := NGSEEK("ST6", cCodFam, 1, "ST6->T6_SINCRON") == "1"
			EndIf
		Endif
	Endif

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} IntegDef
Funcao de tratamento para o recebimento/envio de mensagem unica de
cadastro de Bens.

@param String cXml: indica conteúdo da mensagem única
@param Integer nTypeTrans: indica tipo de transação
@param String cTypeMessage: indica tipo de mensagem
@param Array aParam: indica parametros passados pela rotina que invocou a integração
aParam[1]: *Integer nRecNo: indica número do registro da ST9 para transferencia
aParam[2]: *Integer nOpc: indica tipo de operação que invocou a integração
aParam[3]: *Boolean lMemory: indica se deve recuperar dados de variaveis de memória ou referenciado pelo Alias
aParam[4]: *Integer nSitStatus: indica status do registro se ativo ou inativo (em caso de exclusão por exemplo)
@author André Felipe Joriatti
@since 11/07/2013
@version P11
@return aArray sendo [1]-.T./.F. e [2] - cError
/*/
//------------------------------------------------------------------------------
Static Function IntegDef( cXML , nTypeTrans , cTypeMessage , cVersionRec )

	Local aRet := {}

	aRet := MNTI080( cXml , nTypeTrans , cTypeMessage )

Return aRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT080DTLH
Valida campo 'Detalhe 1' e 'Detalhe 2' da tabela STB.

@author Pedro Henrique Soares de Souza
@since   07/07/2014
@version 1.0

@param lSTB - Indica se valida a partir da STB ou não

@return  Logico
/*/
//------------------------------------------------------------------------------
Function MNT080DTLH( lSTB , aTrigger )

	Local aArea := GetArea()
	//Local aNGBeginPrm := NGBeginPrm()

	Local oDlg
	Local oPanel
	Local oGetDetail
	Local cDetail
	Local dDetail
	Local oGetInfo02
	Local cInfo02
	Local dInfo02
	Local nCaract
	Local cTipoInf
	Local xContent1
	Local xContent2
	Local xDetail
	Local xInfo02
	Local xCondOp
	Local nCondOp    := 0
	Local lOk        := .F.
	Local lWhnInfo02 := .F.
	Local lMNTC665   := (FunName() == "MNTC665" .Or. IsInCallStack( "MNT045FIL" ))
	Local lMvc       := ( ValType( FWModelActive() ) == 'O' )

	Private  lCheck1 := .F., lCheck2 := .F.
	Private oCheckBox, oCheckBox2
	Private cCadastro := ""

	If lMvc
		If lSTB
			xCondOp := FwFldGet('TB_CONDOP')
		ElseIf lMNTC665
			xCondOp := FwFldGet('TPC_CONDOP')
		Else
			xCondOp := FwFldGet('TPB_CONDOP')
		EndIf
	Else
		If lSTB
			nCaract := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TB_CARACTE" })
			nDetail := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TB_DETALHE" })
			nInfo02 := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TB_INFO02"  })
			nCondOp := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TB_CONDOP"  })
		Else
			nCaract := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TPB_CARACT" })
			nDetail := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TPB_DETALH" })
			nInfo02 := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TPB_INFO02" })
			nCondOp := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TPB_CONDOP" })
		EndIf
		If lMNTC665
			nCondOp := aScan( aHeader, {|x| AllTrim( Upper(x[2]) ) == "TPC_CONDOP" })
		EndIf
		If nCondOp > 0
			xCondOp := aCols[n][nCondOp]
		EndIf
	EndIf

	If ValType( xCondOp ) == 'C'
		If (!lMNTC665 .And. xCondOp == '2') .Or. (lMNTC665 .And. xCondOp == '7')
			lWhnInfo02 := .T.
		EndIf
	EndIf

	If ReadVar() $ "M->TB_DETALHE/M->TPB_DETALH" .Or.;
	(ReadVar() $ "M->TB_INFO02/M->TPB_INFO02" .And. lWhnInfo02)

		If lMvc
			If lSTB
				xCaract := FwFldGet('TB_CARACTE')
				xDetail := FwFldGet('TB_DETALHE')
				xInfo02 := FwFldGet('TB_INFO02')
			Else
				xCaract := FwFldGet('TPB_CARACT')
				xDetail := FwFldGet('TPB_DETALH')
				xInfo02 := FwFldGet('TPB_INFO02')
			EndIf
		Else
			xCaract := aCols[n][nCaract]
			xDetail := aCols[n][nDetail]
			xInfo02 := aCols[n][nInfo02]
		EndIf

		If .Not. Empty(xCaract) .And. NGIFDBSEEK( 'TPR' , xCaract , 1 )

			cTipoInf := TPR->TPR_TPINFO

			If cTipoInf <> '3'
				cDetail := IIf( !Empty(xDetail), xDetail, Space( TamSX3("TB_DETALHE")[1] ))
				cInfo02 := IIf( !Empty(xInfo02), xInfo02, Space( TamSX3("TB_DETALHE")[1] ))
			Else

				If lWhnInfo02
					dDetail := IIf( !Empty(xDetail), CToD( xDetail ), dDataBase - 1 )
					dInfo02 := IIf( !Empty(xInfo02), CToD( xInfo02 ), dDataBase )
				Else
					dDetail := IIf( !Empty(xDetail), CToD( xDetail ), dDataBase )
					dInfo02 := IIf( !Empty(xInfo02), CToD( xInfo02 ), CToD("  /  /  ") )
				EndIf
			EndIf


			If cTipoInf == '4'
				//Preenche o checkbox
				If !Empty(cDetail)
					If Alltrim(cDetail) == ".T."
						lCheck1 := .T.
					Else
						lCheck2 := .T.
					EndIf
				EndIf

				Define MsDialog oDlg TITLE OemToAnsi( STR0311 ) From 08,15 To 160,365 Of oMainWnd Pixel	//"Detalhe da Característica"

				oPanel := TPanel():New( 01, 01,, oDlg,,,,,,,, .F., .F. )
				oPanel:Align := CONTROL_ALIGN_ALLCLIENT

				oCheckBox  := TCheckBox():Create( oPanel,{||lCheck1},10,18,'Verdadeiro',130,250,,{||NG080LOG("T")},,,,,,.T.,,,)
				oCheckBox2 := TCheckBox():Create( oPanel,{||lCheck2},10,108,'Falso',130,250,,{||NG080LOG("F")},,,,,,.T.,,,)

				ACTIVATE MsDialog oDlg;
				ON INIT (EnchoiceBar(oDlg, {|| (lOk := .T., oDlg:End())},{|| lOk := .F., oDlg:End() })) Centered
			Else
				Define MsDialog oDlg TITLE OemToAnsi( STR0311 ) From 08,15 To 160,320 Of oMainWnd Pixel	//"Detalhe da Característica"

				oPanel := TPanel():New( 01, 01,, oDlg,,,,,,,, .F., .F. )
				oPanel:Align := CONTROL_ALIGN_ALLCLIENT

				@ 011,005 Say OemToAnsi( STR0312 + ': ' ) /*Font oFontN*/ Size 47,07 Of oPanel Pixel //"Detalhe 1"
				@ 026,005 Say OemToAnsi( STR0313 + ': ' ) /*Font oFontN*/ Size 47,07 Of oPanel Pixel //"Detalhe 2"

				If cTipoInf == '3'
					@ 010,040 MsGet oGetDetail Var dDetail Size 64,09 Of oPanel Pixel Valid ValTipCam( '1', cTipoInf, dDetail, dInfo02 ) HasButton
					@ 025,040 MsGet oGetInfo02 Var dInfo02 Size 64,09 Of oPanel Pixel Valid ValTipCam( '2', cTipoInf, dInfo02, dDetail ) When lWhnInfo02 HasButton
				Else
					@ 010,040 MsGet oGetDetail Var cDetail Size 64,09 Of oPanel Pixel Picture LoadPict( cTipoInf ) Valid ValTipCam( '1', cTipoInf, cDetail, cInfo02 )
					@ 025,040 MsGet oGetInfo02 Var cInfo02 Size 64,09 Of oPanel Pixel Picture LoadPict( cTipoInf ) Valid ValTipCam( '2', cTipoInf, cInfo02, cDetail ) When lWhnInfo02
				EndIf

				oGetDetail:bHelp := {|| ShowHelpCpo(STR0312, { STR0314 }, 5, {}, 2)}	//"Indica o conteúdo referente a característica informada para este bem."
				oGetInfo02:bHelp := {|| ShowHelpCpo(STR0313, { STR0315 }, 5, {}, 2)}	//"Indica o conteúdo final do intervalo 'entre' referente a característica informada para este bem."

				ACTIVATE MsDialog oDlg;
				ON INIT (EnchoiceBar(oDlg, {|| (lOk := .T., oDlg:End())},{|| lOk := .F., oDlg:End() })) Centered
			EndIf

			If lOk
				If cTipoInf == '3'
					xContent1 := IIf( !Empty(dDetail), DToC( dDetail ), Space( TamSX3("TB_DETALHE")[1] ))
					xContent2 := IIf( !Empty(dInfo02), DToC( dInfo02 ), Space( TamSX3("TB_INFO02")[1] ))
				ElseIf cTipoInf == '4'
					If lCheck1
						xContent1 := ".T."
					ElseIf lCheck2
						xContent1 := ".F."
					Else
						xContent1 := Space( TamSX3("TB_DETALHE")[1] )
					EndIf
					xContent2 := Space( TamSX3("TB_INFO02")[1] )
				Else
					xContent1 := IIf( !Empty(cDetail), cDetail, Space( TamSX3("TB_DETALHE")[1] ))
					xContent2 := IIf( !Empty(cInfo02), cInfo02, Space( TamSX3("TB_INFO02")[1] ))
				EndIf

				If lMvc
					If lSTB
						aAdd( aTrigger , { 'STB' , 'TB_DETALHE' , xContent1 }  )
						aAdd( aTrigger , { 'STB' , 'TB_INFO02'  , xContent2 }  )
					Else
						aAdd( aTrigger , { 'TPB' , 'TPB_DETALH' , xContent1 }  )
						aAdd( aTrigger , { 'TPB' , 'TPB_INFO02' , xContent2 }  )
					EndIf
				Else
					aCols[n][nDetail] := xContent1
					aCols[n][nInfo02] := xContent2
				EndIf

				If Type("oGET01") == "O"
					oGet01:oBrowse:Refresh()
				ElseIf Type("oGET17001") == "O"
					oGET17001:oBrowse:Refresh()
				EndIf
			EndIf
		EndIf
	EndIf

	//NGReturnPrm( aNGBeginPrm )
	RestArea( aArea )

Return If(lMvc, lOk, .F.)
//---------------------------------------------------------------------
/*/{Protheus.doc} LoadPict
Carrega picture dos campos conforme o 'Tipo de Resposta'

@author Pedro Henrique Soares de Souza
@since 30/05/2014
@version P11
@return cPicture
/*/
//---------------------------------------------------------------------
Static Function LoadPict(cType)

	Local cPicture

	Do Case
		Case cType == '1'
		cPicture := '@!'

		Case cType == '2'
		cPicture := '@E'

		Case cType == '4'
		cPicture := '@L'
	EndCase

Return cPicture

//---------------------------------------------------------------------
/*/{Protheus.doc} ValTipCam
Valida tipo do campo

@author Pedro Henrique Soares de Souza
@since 30/05/2014
@version P11
@return lRet
/*/
//---------------------------------------------------------------------
Static Function ValTipCam( cCampo, cTipoInf, cConteudo, cCampoVal )

	Local lRet			:= .F.

	Local cOldCampo, cTipo

	If cTipoInf <> '3'
		cConteudo := AllTrim( cConteudo )
		cCampoVal := AllTrim( cCampoVal )
	EndIf

	If Empty( cConteudo )
		lRet := .T.
	Else
		Do Case
			Case cTipoInf == '1'
			cTipo := 'C'
			Case cTipoInf == '2'
			cTipo := 'N'

			Case cTipoInf == '3'
			cTipo := 'D'

			Case cTipoInf == '4'
			cTipo := 'L'
		EndCase

		lRet := NGTPCONTCAR( cTipo, cConteudo)


		If lRet
			cOldCampo := cConteudo

			cConteudo := IIf( cCampo == '1', cConteudo, cCampoVal)
			cCampoVal := IIf( cCampo == '1', cCampoVal, cOldCampo)

			If !Empty(cConteudo) .And. !Empty(cCampoVal)
				Do Case
					Case cTipoInf == '1'
					lRet := cConteudo < cCampoVal

					Case cTipoInf == '2'
					lRet := Val(cConteudo) < Val(cCampoVal)

					Case cTipoInf == '3'
					lRet := cConteudo < cCampoVal

					Case cTipoInf == '4'
					lRet := &(cConteudo) < &(cCampoVal)
				EndCase

				If !lRet
					//"O campo Detalhe 1 está contendo um valor maior ou igual ao campo Detalhe 2"
					//"Utilize um valor menor no campo detalhe 1 ou um valor maior no campo detalhe 2!"
					Help( " ",1,STR0109,,STR0316 + CRLF + STR0317,3,1 ) //"NAO CONFORMIDADE"
				EndIf
			EndIf
		EndIf
	EndIf

Return lRet

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG080LOG()
Função para validar as opções lógicas no TCheckBox de Características.

@author Diego de Oliveira
@since	30/07/2015

@return cTipo
/*/
//------------------------------------------------------------------------------
Function NG080LOG(cTipo)

	///////////////////////////////////////////////////////////
	// Verifica se o objeto está preenchido com Verdadeiro   //
	// ou Falso e não permite a escolha de mais de uma opção.//
	///////////////////////////////////////////////////////////

	If cTipo == "T"
		//Verifica as opções lógicas do CheckBox.
		If !lCheck1 .And. lCheck2
			lCheck1 := .T.
			lCheck2 := .F.
		ElseIf !lCheck1 .And. !lCheck2
			lCheck1 := .T.
		Else
			lCheck1 := .F.
		EndIf
	Else
		If !lCheck2 .And. lCheck1
			lCheck2 := .T.
			lCheck1 := .F.
		ElseIf !lCheck2 .And. !lCheck1
			lCheck2 := .T.
		Else
			lCheck2 := .F.
		EndIf
	EndIf
	//Atualiza os objetos permitindo apenas uma das opções.
	oCheckBox:Refresh()
	oCheckBox2:Refresh()

Return .T.


//------------------------------------------------------------------------------
/*/{Protheus.doc} NG080FOLD - LEGADO
Funcao para montagem de folder

@author NG Informática Ltda.
@since 21/06/2001
@version MP11
@return
/*/
//------------------------------------------------------------------------------
Function NG080FOLD( cAlias , nRecno , nOperation )
Return MNTA080CAD( cAlias , nRecno , nOperation )

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080AT
Função chamada para alteração do ativo fixo

@author Jackson Machado
@since 14/04/11
@return .T.
@Obs Somente utilizado no fonte ATFA010
/*/
//------------------------------------------------------------------------------
Function MNTA080AT()

	If GetNewPar('MV_NGMNTAT','N') $ "1/3"
		dbSelectArea("ST9")
		dbSetOrder(8)
		If dbSeek(xFilial("ST9")+SN1->N1_CBASE+SN1->N1_ITEM)
			//If ST9->T9_NFCOMPR != SN1->N1_NFISCAL
			RecLock("ST9",.F.)
			ST9->T9_FORNECE := SN1->N1_FORNEC
			ST9->T9_NOME 	:= SN1->N1_DESCRIC
			ST9->T9_CHAPA   := SN1->N1_CHAPA
			ST9->T9_LOJA    := SN1->N1_LOJA
			ST9->T9_LOCAL   := SN1->N1_LOCAL
			If ST9->(FieldPos('T9_NFCOMPR')) > 0
				ST9->T9_NFCOMPR := SN1->N1_NFISCAL
			EndIf
			If NGIFdbSeek("SN3",ST9->T9_CODIMOB,1)
				ST9->T9_CCUSTO := SN3->N3_CUSTBEM
			EndIf
			MsUnLock("ST9")
			//EndIf
		EndIf
		//Atualização do conjunto hidráulico (TKS)
		fAtuCjnHidr(ST9->T9_CODBEM)
	EndIf
Return .T.

//--------------------------------------------------------------------
/*/{Protheus.doc} fAtuCjnHidr
Atualiza conjuntos hidráulicos relacionados ao código do bem

@author Jackson Machado
@since 24/04/11
@return .T.
/*/
//--------------------------------------------------------------------
Static Function fAtuCjnHidr(cCodBem)

	Default cCodBem := ""
	If ALTERA
		dbSelectArea("TKS")
		dbSetOrder(6)
		If dbSeek(xFilial("TKS")+cCodBem)
			While !EoF() .And. AllTrim(TKS->TKS_BEM) == AllTrim(cCodBem)
				RecLock("TKS",.F.)
				If TKS->TKS_FAMCJN <> ST9->T9_CODFAMI
					TKS->TKS_FAMCJN := ST9->T9_CODFAMI
				EndIf
				If TKS->TKS_FORNEC <> ST9->T9_FORNECE
					TKS->TKS_FORNEC := ST9->T9_FORNECE
				EndIf
				If TKS->TKS_LOJA <> ST9->T9_LOJA
					TKS->TKS_LOJA := ST9->T9_LOJA
				EndIf
				If TKS->TKS_CCCJN  <> ST9->T9_CCUSTO
					TKS->TKS_CCCJN  := ST9->T9_CCUSTO
				EndIf
				If TKS->TKS_TURCJN <> ST9->T9_CALENDA
					TKS->TKS_TURCJN := ST9->T9_CALENDA
				EndIf
				If TKS->TKS_DTCOMP <> ST9->T9_DTCOMPR
					TKS->TKS_DTCOMP := ST9->T9_DTCOMPR
				EndIf
				If TKS->TKS_ANOFAB <> ST9->T9_ANOFAB
					TKS->TKS_ANOFAB := ST9->T9_ANOFAB
				EndIf
				If TKS->TKS_FABRIC <> ST9->T9_FABRICA
					TKS->TKS_FABRIC := ST9->T9_FABRICA
				EndIf
				If TKS->TKS_MODELO <> ST9->T9_MODELO
					TKS->TKS_MODELO := ST9->T9_MODELO
				EndIf
				MsUnLock("TKS")
				dbSkip()
			End
		EndIf
	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} fCatBem
Carrega tela para selecao da categoria do bem

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return String
/*/
//------------------------------------------------------------------------------
Static Function fCatBem( cCatBem )

	Local aArea := GetArea()
	Local oDlg1, oCatBem
	Local oFont14  := TFont():New("Arial",8,14,,.t.,,.f.,,.f.,.f.)
	Local aCatBem := {}
	Local aAllCatBem := {}
	Local nOption := 0

	Default cCatBem := ""

	If Len( AllTrim( cCatBem ) ) != 1

		dbSelectArea( "SX3" )
		dbSetOrder( 2 )
		dbSeek( "T9_CATBEM" )
		aAllCatBem := StrTokArr(AllTrim( X3CBox() ) , ";" )

		If .Not. Empty( cCatBem )
			For nOption := 1 To Len( aAllCatBem )
				If SubStr( LTrim( aAllCatBem[nOption] ) , 1 , 1 ) $ cCatBem
					aAdd( aCatBem , aAllCatBem[nOption] )
				EndIf
			Next
		Else
			aCatBem := aAllCatBem
		EndIf

		DEFINE MSDIALOG oDlg1 Title STR0378; //"Categoria do Bem"
		FROM 20,0 TO 120,250 Of oMainWnd Pixel

		@ 06,005 Say STR0379 SIZE 280,08 Of oDlg1 Pixel Font oFont14 //"Categoria ?"
		@ 14,005 MSCOMBOBOX oCatBem VAR cCatBem ITEMS aCatBem SIZE 100,12 OF oDlg1 Pixel On CHANGE ()

		@ 30,060 Button STR0380 Of oDlg1 Size 50,12 Pixel Action oDLG1:End() //"Confirmar"

		Activate MsDialog oDLG1 Centered

		cCatBem := SubStr( LTrim( cCatBem ) , 1 , 1 )

		RestArea( aArea )
	EndIf

Return cCatBem

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080INA
Inativação do bem

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Function MNTA080INA()

	Local oFont, nC
	Local aFields    := {}
	Local cDescAT    := ""
	Local cError     := ""
	Local lEstoque   := ( GetMv("MV_NGMNTES") == "S" )
	Local lIntAtv	 := SuperGetMv("MV_NGMNTAT",.F.,"N") $ "2/3" .And. !Empty(ST9->T9_CODIMOB)
	Local lValid     := .T.
	Local lValidInfo := .F.
	Local lStatWhn   := .T.
	Local aMotivoATF := {}
	Local cATFNF     := SuperGetMv('MV_ATFMBNF',.F.,"")
	Local cStatF3    := ''
	Local cStatVld   := ''

	Local oTmpTbl2
	Local oPnlAll
	Local oPnlTop
	Local oPnlTop1
	Local oPnlTop2
	Local oPnlTop3
	Local oPnlTop3T
	Local oPnlTop3B
	Local oPnlTop3BT
	Local oPnlTop3BB
	Local oPnlBot

	Private lTemFil    := NGIFdbSeek( 'STC' , ST9->T9_CODBEM , 1 )
	Private lUseCont1  := ( ST9->T9_TEMCONT == 'S' .And. lTemFil )
	Private lUseCont2  := ( NGIFDBSEEK( 'TPE' , ST9->T9_CODBEM , 1 ) .And. lTemFil )
	Private nPosCont1  := IIf( lUseCont1 , ST9->T9_POSCONT , 0 )
	Private nPosCont2  := IIf( lUseCont2 , TPE->TPE_POSCON , 0 )
	Private cHourCont1 := "  :  "
	Private cHourCont2 := "  :  "
	Private cDestinEst := ""
	Private cCodST9CC  := ""
	Private cNotaFical := Space(TamSx3("FN6_NUMNF" )[1])
	Private cSerieNota := Space(TamSx3("FN6_SERIE" )[1])
	Private nValorNota := 0
	Private cMotivoATF := ""
	Private cNameAsset := RTrim( ST9->T9_CODBEM ) + " - " + ST9->T9_NOME
	Private cBECausa   := Space( TamSx3('T8_CODOCOR')[1] )
	Private cBEDCausa  := Space( TamSx3('T8_NOME')[1] )
	Private cStaEu     := GetMV('MV_NGSTAEU')
	Private dDateCont2 := CtoD("  /  /  ")
	Private aFieldsTmp := {}
	Private aCores     := {}
	Private lInverte   := .F.
	Private lWhenPr    := .F.
	Private lUsaIntEs  := AllTrim(GetNewPar("MV_NGMNTES","N")) == "S" .And.;
					 	  AllTrim(GetNewPar("MV_NGPNEST","N")) == "S"  //Controle de Estoque

	Private oSize      := FwDefSize():New(.T.)
	Private nLinIniTla := oSize:aWindSize[1] // Linha  inicial da tela
	Private nColIniTla := oSize:aWindSize[2] // Coluna inicial da tela
	Private nLinFimTla := oSize:aWindSize[3] // Linha  final   da tela
	Private nColFimTla := oSize:aWindSize[4] // Coluna final   da tela
	Private cTempTable
	Private cMetDepr   := SuperGetMv("MV_ATFDPBX",.F.,"0")
	Private cAltATF    := SuperGetMv("MV_NGMNTAT",.F.,"N")

	fDeclarPvt("Inativar")

	If SuperGetMv("MV_NG1ANAT",.F.,"-1") == "-1" //Senao achar o parametro carrega com o conteudo atual
		cDestinEst := "3467"
	Else
		cDestinEst := SuperGetMv("MV_NG1ANAT",.F.,"-1")
	EndIf

	If AllTrim(GetMV('MV_NGSTAGR')) $ cStaEu
		cDestinEst += '1'
	EndIf

	If AllTrim(GetMV('MV_NGSTAGC')) $ cStaEu
		cDestinEst += '2'
	EndIf

	If AllTrim(GetMV('MV_NGSTAAT')) $ cStaEu
		cDestinEst += '5'
	EndIf

	aAdd(aCores,{"(cTempTable)->STATUS == '0'","BR_VERDE"	 })
	aAdd(aCores,{"(cTempTable)->STATUS == '1'","BR_AMARELO" })
	aAdd(aCores,{"(cTempTable)->STATUS == '2'","BR_VERMELHO"})

	RegtoMemory("ST9",.F.)
	M->T9_DTBAIXA := dDataBase

	dbSelectArea('TPE')
	dbSetOrder(1)
	dbSeek(xFilial('TPE') + M->T9_CODBEM)
	RegtoMemory('TPE',.F.)

	//--------------------------------------------------------------------------
	// Validações inicias para a inativação do bem
	//--------------------------------------------------------------------------
	If M->T9_SITBEM == "I"
		cError := STR0381 //"Operacao nao aceita. O bem já está inativo."
		lValid := .F.
	ElseIf NGIFDBSEEK( 'STC' , M->T9_CODBEM , 3 )
		cError := STR0075 //"Operacao nao aceita. O bem faz parte de uma estrutura."
		lValid := .F.
	EndIf

	//Valida se existe alguma OS em aberto para o bem que se deseja inativar.
	If !VldOSBem(0)
        Return .F.
	EndIf

	//Validações para inativação de pneu
	If lValid .And. lGFrota .And. M->T9_CATBEM == "3"
		If NGIFdbSeek('TQY',GetNewPar("MV_NGSTAAT",""),1)
			If TQY->TQY_CATBEM == "3" .Or. Empty( TQY->TQY_CATBEM )
				cDescAT := NGSEEK('TQY',GetNewPar("MV_NGSTAAT",""),1,'TQY_DESTAT')
			Else
				//"O parametro MV_NGSTAAT possui categoria diferente de 'Pneu' ou genérica."
				//"Verifique a categoria do parâmetro."
				cError := STR0201 + STR0202
				lValid := .F.
			EndIf
		Else
			//"O parametro MV_NGSTAAT não possui um status correspondente cadastrado."
			//"Verifique o conteúdo do parâmetro e seu registro correspondente."
			cError := STR0203 + STR0204
			lValid := .F.
		EndIf
	EndIf

	If lValid .And. lTemFil

		// Monta os campos da tabela
		aAdd(aFields,{"OK"     ,"C",2,0})
		aAdd(aFields,{"STATUS" ,"C",1,0})
	    aAdd(aFields,{"CODBEM" ,"C",TamSx3("T9_CODBEM" )[1],0})
	    aAdd(aFields,{"NOMBEM" ,"C",TamSx3("T9_NOME"   )[1],0})
	    aAdd(aFields,{"ST_BEM" ,"C",TamSx3("T9_STATUS" )[1],0})
	    aAdd(aFields,{"DESTAT" ,"C",TamSx3("T9_DESTAT" )[1],0})
	    aAdd(aFields,{"CCUSTO" ,"C",TamSx3("T9_CCUSTO" )[1],0})
	    aAdd(aFields,{"DESCUS" ,"C",TamSx3("T9_NOMCUST")[1],0})
	    aAdd(aFields,{"CTRABA" ,"C",TamSx3("T9_CENTRAB")[1],0})
	    aAdd(aFields,{"DESCTR" ,"C",TamSx3("T9_NOMTRAB")[1],0})
	    aAdd(aFields,{"CODESTO","C",TamSx3("T9_CODESTO")[1],0})
	    aAdd(aFields,{"ALMOXA" ,"C",TamSx3("T9_LOCPAD" )[1],0})
	    aAdd(aFields,{"PARECER","C",TamSx3("TR4_PAREC" )[1],0})
	    aAdd(aFields,{"SULCO"  ,"N",TamSx3("TR4_SULCO" )[1],0})
	    aAdd(aFields,{"MOTIVO" ,"C",TamSx3("TR4_MOTIVO")[1],0})
	    aAdd(aFields,{"FORNEC" ,"C",TamSx3("TR4_FORNEC")[1],0})
	    aAdd(aFields,{"LOJA"   ,"C",TamSx3("TR4_LOJA"  )[1],0})
	    aAdd(aFields,{"DTANFN" ,"D",12                     ,0})
	    aAdd(aFields,{"LAUDO"  ,"C",TamSx3("TR4_LAUDO" )[1],0})

	    cTempTable := GetNextAlias()
	    //Intancia classe FWTemporaryTable
		oTmpTbl2  := FWTemporaryTable():New( cTempTable, aFields )
		//Cria indices
		oTmpTbl2:AddIndex( "Ind01" , {"CODBEM"} )
		//Cria a tabela temporaria
		oTmpTbl2:Create()

		//Preenche a tabela temporaria
		aFilhos := NGRETSTCDT( M->T9_CODBEM , dDataBase , Time() )
		nRegST9 := ST9->(RecNo())
		For nC := 1 To Len( aFilhos )
			ST9->( dbSeek( xFilial("ST9") + aFilhos[nC,1] ) )
			RecLock(cTempTable,.T.)
			(cTempTable)->STATUS  := "2"
			(cTempTable)->CODBEM  := aFilhos[nC,1]
			(cTempTable)->NOMBEM  := ST9->T9_NOME
			(cTempTable)->ST_BEM  := If(ST9->T9_CATBEM == "3",GetNewPar("MV_NGSTAAT","")," ")
			(cTempTable)->DESTAT  := If(ST9->T9_CATBEM == "3",cDescAT," ")
			(cTempTable)->CCUSTO  := ST9->T9_CCUSTO
			(cTempTable)->DESCUS  := NGSEEK("CTT",ST9->T9_CCUSTO,1,"CTT_DESC01")
			(cTempTable)->CTRABA  := ST9->T9_CENTRAB
			(cTempTable)->DESCTR  := NGSEEK("SHB",ST9->T9_CENTRAB,1,"HB_NOME")
			If lEstoque
				(cTempTable)->CODESTO := ST9->T9_CODESTO
				(cTempTable)->ALMOXA  := NGSEEK('SB1',ST9->T9_CODESTO,1,'B1_LOCPAD')
			EndIf
			(cTempTable)->PARECER := Space(TamSx3("TR4_PAREC")[1])
			(cTempTable)->SULCO   := 0
			(cTempTable)->MOTIVO  := Space(TamSx3("TR4_MOTIVO")[1])
			(cTempTable)->FORNEC  := Space(TamSx3("TR4_FORNEC")[1])
			(cTempTable)->LOJA    := Space(TamSx3("TR4_LOJA"  )[1])
			(cTempTable)->DTANFN  := CtoD("  /  /    ")
			(cTempTable)->LAUDO   := Space(TamSx3("TR4_LAUDO" )[1])
			MsUnLock(cTempTable)
		Next nC
		ST9->( DBGoTo( nRegST9 ) )

		//Monta os campos do MarkBrowse
		aAdd(aFieldsTmp,{"OK"     ,NIL," ",})
		aAdd(aFieldsTmp,{"CODBEM" ,NIL,STR0149,}) //"Bem"
		aAdd(aFieldsTmp,{"NOMBEM" ,NIL,STR0041,}) //"Nome do Bem"
		aAdd(aFieldsTmp,{"ST_BEM" ,NIL,STR0150,}) //"Status"
		aAdd(aFieldsTmp,{"DESTAT" ,NIL,STR0205,}) //"Descrição Status"
		aAdd(aFieldsTmp,{"CCUSTO" ,NIL,STR0206,}) //"C.Custo"
		aAdd(aFieldsTmp,{"DESCUS" ,NIL,STR0207,}) //"Descrição C.Custo"
		aAdd(aFieldsTmp,{"CTRABA" ,NIL,STR0208,}) //"C.Trabalho"
		aAdd(aFieldsTmp,{"DESCTR" ,NIL,STR0209,}) //"Descrição C.Trabalho"
		If lEstoque
			aAdd(aFieldsTmp,{"CODESTO",NIL,STR0210,}) //"Estoque"
			aAdd(aFieldsTmp,{"ALMOXA" ,NIL,STR0431,}) //"Almoxarifado"
		EndIf
	    aAdd(aFieldsTmp,{"PARECER",NIL,STR0440,}) //"Parecer"
	    aAdd(aFieldsTmp,{"SULCO"  ,NIL,STR0399,}) //"Sulco"
	    aAdd(aFieldsTmp,{"MOTIVO" ,NIL,STR0400,}) //"Motivo"
	    aAdd(aFieldsTmp,{"FORNEC" ,NIL,STR0401,}) //"Fornecedor"
	    aAdd(aFieldsTmp,{"LOJA"   ,NIL,STR0402,}) //"Cod. Loja"
	    aAdd(aFieldsTmp,{"DTANFN" ,NIL,STR0403,}) //"Dt. Fornec."
	    aAdd(aFieldsTmp,{"LAUDO"  ,NIL,STR0404,}) //"Laudo"

		cMARCA := GetMark()
	EndIf

	If lValid

		If FunName() $ 'MNTA540%MNTA545'

			M->T9_STATUS := IIf( Empty( SuperGetMV( 'MV_NGSTARO', .F., '' ) ), Space( 2 ), SuperGetMV( 'MV_NGSTARO', .F., '' ) )

			cStatF3  := 'TQYWHI'
			lStatWhn := .T.
			cStatVld := 'MNT545TQY( M->T9_STATUS )'

		Else

			M->T9_STATUS := IIf( M->T9_CATBEM == '3', SuperGetMv( 'MV_NGSTARS', .F., '' ), Space( 2 ) )

			cStatF3  := 'TQYFIL'
			lStatWhn := M->T9_CATBEM != '3'
			cStatVld := 'MNTA080VL2( "T9_STATUS" )'

		EndIf

		M->T9_DESTAT := IIf( !Empty( M->T9_STATUS ), Posicione( 'TQY', 1, xFilial( 'TQY' ) + M->T9_STATUS,;
			'TQY_DESTAT' ), Space( 10 ) )


		//Inicializa view para a inaticação do bem
		DEFINE FONT oFont NAME "Arial" SIZE 0,-12

		DEFINE MSDIALOG ODlgBE TITLE STR0148 From nLinIniTla,nColIniTla TO nLinFimTla,nColFimTla+1 Of oMainWnd Pixel;
		                STYLE nOR(WS_VISIBLE,WS_POPUP) COLOR CLR_BLACK,CLR_WHITE  // "Baixa de Estrutura"

			// PANEL GERAL
			oPnlAll       := TPanel():New( , , , oDlgBE )
			oPnlAll:Align := CONTROL_ALIGN_ALLCLIENT

				// PANEL SUPERIOR
				oPnlTop       := TPanel():New( , , , oPnlAll, , , , , , , IIf( lIntAtv, 148, 126 ) )
				oPnlTop:Align := CONTROL_ALIGN_TOP

					// PANEL DO 1° GRUPO DE INFORMAÇÕES ( BEM )
					oPnlTop1       := TPanel():New( , , , oPnlTop, , , , , , , 16 )
					oPnlTop1:Align := CONTROL_ALIGN_TOP

						// BEM
						@ 001,001 To 014,oSize:aWorkArea[3] Of oPnlTop1 Pixel

						@ 004,003 Say STR0149 + ': ' Size 020,010 Of oPnlTop1 Pixel // Bem
						@ 004,016 Say cNameAsset     Size 300,010 Of oPnlTop1 Pixel

					// PANEL DO 2° GRUPO DE INFORMAÇÕES ( CONTADOR )
					oPnlTop2       := TPanel():New( , , , oPnlTop )
					oPnlTop2:Align := CONTROL_ALIGN_ALLCLIENT

						// INFORMAÇÕES DE CONTADOR
						@ 001,001 To 035,oSize:aWorkArea[3] Of oPnlTop2 Pixel

						// 1° CONTADOR
						@ 004,003 Say STR0152 Of oPnlTop2 Pixel Color CLR_HBLUE //"Data Baixa"
						@ 004,058 MsGet M->T9_DTBAIXA Picture '99/99/99' Of oPnlTop2 Pixel Valid MNTA080VL2("T9_DTBAIXA");
						 SIZE 44,010 HASBUTTON

						@ 004,108 Say STR0153 Of oPnlTop2 Pixel Color IIf(lUseCont1,CLR_HBLUE,CLR_BLACK) //"Contador 1"
						@ 004,142 MsGet M->T9_POSCONT Picture '999999999' Of oPnlTop2 Pixel Valid MNTA080VL2("T9_POSCONT");
						 When lUseCont1 .And. NGBlCont( ST9->T9_CODBEM ) SIZE 45,010 HASBUTTON

						@ 004,197 Say STR0154 Of oPnlTop2 Pixel Color CLR_HBLUE  //"Hora"
						@ 004,233 MsGet cHourCont1 Picture '99:99' Of oPnlTop2 Pixel Valid MNTA080VL2("cHourCont1") SIZE 10,010 //When lUseCont1

						//2º CONTADOR
						@ 020,003 Say STR0155 Of oPnlTop2 Pixel Color IIf(lUseCont2,CLR_HBLUE,CLR_BLACK) //"Dt Leitura 2 Contador"
						@ 020,058 MsGet dDateCont2 Picture '99/99/99' Of oPnlTop2 Pixel Valid MNTA080VL2("dDateCont2") When;
						 lUseCont2 SIZE 44,010 HASBUTTON

						@ 020,108 Say STR0156 Of oPnlTop2 Pixel Color IIf(lUseCont2,CLR_HBLUE,CLR_BLACK) //"Contador 2"
						@ 020,142 MsGet M->TPE_POSCON Picture '999999999' Of oPnlTop2 Pixel Valid MNTA080VL2("TPE_POSCON");
						 When lUseCont2 SIZE 45,010 HASBUTTON

						@ 020,197 Say STR0154 Of oPnlTop2 Pixel Color IIf(lUseCont2,CLR_HBLUE,CLR_BLACK) //"Hora"
						@ 020,233 MsGet cHourCont2 Picture '99:99' Of oPnlTop2 Pixel Valid MNTA080VL2("cHourCont2") When;
						 lUseCont2 SIZE 10,010

					// PANEL GERAL DO 3° GRUPO DE INFORMAÇÕES
					oPnlTop3       := TPanel():New( , , , oPnlTop, , , , , , , IIf( lIntAtv, 95, 73 ) )
					oPnlTop3:Align := CONTROL_ALIGN_BOTTOM

						// PANEL DO 3° GRUPO DE INFORMAÇÕES ( STATUS )
						oPnlTop3T      := TPanel():New( , , , oPnlTop3, , , , , , , 54 )
						oPnlTop3T:Align := CONTROL_ALIGN_TOP

							// STATUS, MOTIVO E CAUSA
							@ 001,001 To 051,oSize:aWorkArea[3] OF oPnlTop3T Pixel

							@ 004,003 Say STR0150 Of oPnlTop3T Pixel Color If(M->T9_CATBEM = "3",CLR_HBLUE,CLR_BLACK) //"Status"

							@ 004,020 MsGet M->T9_STATUS F3 cStatF3 Picture '@!' SIZE 20, 10 Of oPnlTop3T Pixel Valid;
							&cStatVld. HASBUTTON When lStatWhn

							@ 004,060 MsGet M->T9_DESTAT When .F. SIZE 195,010 Of oPnlTop3T Pixel

							@ 020,003 Say STR0103 Of oPnlTop3T Pixel Color CLR_HBLUE //"Motivo"
							@ 020,020 MsGet M->T9_MTBAIXA F3 "TPJ" Picture "@!" SIZE 40,010 Of oPnlTop3T Pixel Valid;
							 MNTA080VL2("T9_MTBAIXA") HASBUTTON
							@ 020,060 MsGet M->T9_DESMOT When .F. SIZE 195,010 Of oPnlTop3T Pixel

							@ 036,003 Say STR0157 Of oPnlTop3T Pixel Color IIf(lTemFil,CLR_HBLUE,CLR_BLACK) //"Causa"
							@ 036,020 MsGet cBECausa F3 "STN" Picture "@!" SIZE 40,010 Of oPnlTop3T Pixel Valid;
							 MNTA080VL2("TZ_CAUSA") When lTemFil HASBUTTON
							@ 036,060 MsGet cBEDCausa When .F. SIZE 195,010 Of oPnlTop3T Pixel

						oPnlTop3B      := TPanel():New( , , , oPnlTop3 )
						oPnlTop3B:Align := CONTROL_ALIGN_ALLCLIENT

							If lIntAtv

								// PANEL DO 3° GRUPO DE INFORMAÇÕES ( ATIVO FIXO )
								oPnlTop3BT       := TPanel():New( , , , oPnlTop3B, , , , , , , 20 )
								oPnlTop3BT:Align := CONTROL_ALIGN_TOP

									//Função que monta o array com os itens da tabela SX5 tabela 16 - Motivo
									cMotSx5    := AF036ValMot()
									aMotivoATF := StrTokArr( cMotSx5 , ";" )

									//4º Grupo
									@ 001,001 To 018,oSize:aWorkArea[3] OF oPnlTop3BT Pixel

									@ 004,003 Say STR0400 Of oPnlTop3BT Pixel Color CLR_HBLUE // Motivo
									TComboBox():New(004, 22, {|u| If(PCount() > 0, cMotivoATF := u, cMotivoATF) },;
									aMotivoATF, 130, 008, oPnlTop3BT, , , {|| If(SubStr(cMotivoATF,1,2) $ cATFNF,;
									.T.,nValorNota := 0) }, , , .T., , , , {|| .T. } )

									@ 004,160 Say STR0448 Of oPnlTop3BT Pixel Color CLR_BLACK //"Nota Fiscal"
									@ 004,192 MsGet cNotaFical When lIntAtv Picture "@!" SIZE 40,010 Of oPnlTop3BT Pixel

									@ 004,237 Say STR0449 Of oPnlTop3BT Pixel Color CLR_BLACK //"Série"
									@ 004,260 MsGet cSerieNota When lIntAtv F3 "01" Picture "@!" SIZE 40,010 Of oPnlTop3BT;
									 Pixel HASBUTTON

									@ 004,305 Say STR0450 Of oPnlTop3BT Pixel Color CLR_BLACK //"Valor NF/Ven"
									@ 004,345 MsGet nValorNota When SubStr(cMotivoATF,1,2) $ cATFNF Picture "@E 9,999,999,999,999.99";
									 SIZE 80,010 Of oPnlTop3BT Pixel Valid Vazio() .or. Positivo() HASBUTTON

							EndIf

							If lTemFil

								// PANEL DO 3° GRUPO DE INFORMAÇÕES BOTÕES
								oPnlTop3BB       := TPanel():New( , , , oPnlTop3B, , , , ,  )
								oPnlTop3BB:Align := CONTROL_ALIGN_ALLCLIENT

									@ 001,003 BUTTON "&" + STR0079 Of oPnlTop3BB Pixel SIZE 31,nSizeCmp ACTION {||fViewLeg()}   // &Legenda

									@ 001,043 BUTTON "&" + STR0206 Of oPnlTop3BB Pixel SIZE 31,nSizeCmp ACTION {||fChgCCust()}  // &C.Custo

									@ 001,083 BUTTON       STR0163 Of oPnlTop3BB Pixel SIZE 31,nSizeCmp ACTION {||fChgStatus()} // &Status

									oPnlBot       := TPanel():New( , , ,oPnlAll )
									oPnlBot:Align := CONTROL_ALIGN_ALLCLIENT

									//Browser de componentes
									oMark := MsSelect():New( cTempTable, 'OK', '', aFieldsTmp, @lInverte, @cMarca,;
									 {152, 1, 300, 720 }, , , oPnlBot, ,aCores )

										oMark:oBrowse:cToolTip   := OemToAnsi(STR0211)  //"Componentes da estrutura"
										oMark:oBrowse:bLDblClick := { || fMarkReg() }
										oMark:oBrowse:bAllMark   := { || fMarkAll() }
										oMark:oBrowse:Align      := CONTROL_ALIGN_ALLCLIENT

									fMarkAll()

							EndIf

		ACTIVATE MSDIALOG ODlgBE ON INIT EnchoiceBar(ODlgBE,{||If(lValidInfo := fValid2(),ODlgBE:End(),)},{|| ODlgBE:End() }) CENTERED

		If lValidInfo
			CommitInfo(,.T.)
		EndIf

		//----------------------------------------------------------------------
		//Exclui a tabela
		//----------------------------------------------------------------------
		If lTemFil
			oTmpTbl2:Delete()
		EndIf
	Else
		Help(" ", 1, STR0109,, cError, 3, 1) // "NAO CONFORMIDADE"
	EndIf

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} fMarkAll
Grava marca em todos os registros validos

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Static Function fMarkAll()

	NGSETIFARQUI(cTempTable)
	While !(cTempTable)->(EoF())
		RecLock(cTempTable,.F.)
		(cTempTable)->OK := IIf(IsMark('OK',cMarca ),"  ",cMarca)
		If NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") == "3" .And. fVldStAnl((cTempTable)->ST_BEM)
			(cTempTable)->STATUS := IIf(IsMark('OK',cMarca ),"1","0")
		Else
			(cTempTable)->STATUS := IIf(IsMark('OK',cMarca ),"2","0")
		EndIf
		(cTempTable)->(MsUnLock())
		(cTempTable)->(DBSkip())
	End
	NGSETIFARQUI(cTempTable)

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} fMarkReg
Funcao chamada no duplo clique em um elemento no browse

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Static Function fMarkReg()

	Local nBem, cPaiImed, aFilhos
	Local nRecnoTmp := (cTempTable)->( Recno() )
	Local cMarked   := IIf( IsMark( 'OK' , cMarca ) , "  " , cMarca )

	//Marca pai: marca todos os bens filhos (subestrutura)
	If .Not. Empty( cMarked )
		aFilhos := NGRETSTCDT( (cTempTable)->CODBEM , dDataBase , Time() )
		For nBem := 1 To Len( aFilhos )
			If dbSeek( aFilhos[nBem,1] )
				RecLock( cTempTable , .F. )
				(cTempTable)->OK     := cMarked
				If NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") == "3" .And. fVldStAnl((cTempTable)->ST_BEM)
					(cTempTable)->STATUS := IIf(IsMark('OK',cMarca ),"1","0")
				Else
					(cTempTable)->STATUS := IIf(IsMark('OK',cMarca ),"2","0")
				EndIf
				MsUnLock(cTempTable)
			EndIf
		Next nBem
	//Desmarca filho: verifica se pai esta marcado (subestrutura)
	Else
		cPaiImed := NGBEMIME( (cTempTable)->CODBEM )
		If dbSeek( cPaiImed )
			If IsMark( 'OK' , cMarca )
				cMarked := cMarca
				ShowHelpDlg(Upper(STR0097),{STR0214+" ("+AllTrim(cPaiImed)+")"+STR0215,""},2,{STR0216,""},2)
				//"invalido"##"O pai imediato deste bem está marcado para inativação"##", sendo obrigatória a inativação dos filhos."##"Desmarque a inativação do pai imediato."
			EndIf
		EndIf
	EndIf

	DBGoTo( nRecnoTmp )
	RecLock( cTempTable , .F. )
	(cTempTable)->OK     := cMarked
	If NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") == "3" .And. fVldStAnl((cTempTable)->ST_BEM)
		(cTempTable)->STATUS := IIf(IsMark('OK',cMarca ),"1","0")
	Else
		(cTempTable)->STATUS := IIf(IsMark('OK',cMarca ),"2","0")
	EndIf
	MsUnLock(cTempTable)
	oMark:oBrowse:Refresh()

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} fChgStatus
Funcao para alteracao do Status do Bem

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Static Function fChgStatus()

	Local oDlgS
	Local oChk1
	Local cF3_SB1    := "SB1"
	Local cStat      := Space(TamSx3("TQY_STATUS")[1])
	Local lSai       := .F.
	Local lChecked   := .F.
	Local lNNR	     := NGCADICBASE("NNR_CODIGO","A","NNR",.F.) .And. AllTrim(NGSEEKDIC("SX3", "B1_LOCPAD", 2, "SX3->X3_F3")) == "NNR"

	fDeclarPvt("Status")

	lWhenPr := .F.
	dbSelectArea(cTempTable)
	If Empty((cTempTable)->ST_BEM)
		cStaAtual := NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_STATUS")
	Else
		cStaAtual := (cTempTable)->ST_BEM
	EndIf
	cDesStaAt := AllTrim(NgSeek("TQY",cStaAtual,1,"TQY_DESTAT"))

	//Consulta no dicionário se existe a consulta padrão NGSB1
	dbSelectArea("SXB")
	dbSetOrder(01)
	If dbSeek("NGSB1")
		cF3_SB1 := "NGSB1"
	EndIf

	If lPneu

		DEFINE MSDIALOG oDlgS TITLE STR0161 From 000,000 To 028,140 Of oMainWnd //"Alteração de Status"

			oPanelTot       := TPanel():New(,,,oDlgS,,,,,RGB(93,110,158),,,,)
			oPanelTot:Align := CONTROL_ALIGN_ALLCLIENT

			@ 001,001 SCROLLBOX oScr VERTICAL SIZE 208,553 Of oPanelTot BORDER

			@ 010,005 Say STR0162 + ": " + AllTrim( (cTempTable)->CODBEM ) Of oScr Pixel Font oFont //"Alteração de Status do Bem"
			@ 025,005 Say STR0164 + cStaAtual + " - " + cDesStaAt          Of oScr Pixel            //"Status atual do bem é: "
			@ 040,005 Say STR0165                                          Of oScr Pixel            //"Informe o novo status: "

			@ 040,063 MsGet cStat    Size 025,010 Of oScr Pixel Valid VldStatBem(cStat,(cTempTable)->CODBEM) F3 "TQY" PICTURE "@!" HASBUTTON
			@ 040,090 MsGet cDescSts              Of oScr Pixel When .F. PICTURE "@!" HASBUTTON

			@ 055,005 Say STR0405         Of oScr Pixel //"Informe o Parecer: "
			@ 055,063 MsGet cParecer      Of oScr Pixel When lWhenPS PICTURE "@!" HASBUTTON

			@ 070,005 Say STR0406         Of oScr Pixel //"Informe o Sulco: "
			@ 070,063 MsGet nSulco        Of oScr Pixel Valid MNT600SULC((cTempTable)->CODBEM, nSulco, xFilial("ST9"), cStat,M->T9_DTBAIXA, cHourCont1 ) When lWhenPS PICTURE "@E 999.99" HASBUTTON

			@ 085,005 Say STR0407         Of oScr Pixel //"Motivo do Destino: "
			@ 085,063 MsGet cMotivo       Of oScr Pixel Valid fVldGet("MOT",cMotivo) .And. MNTA600PRO(cMotivo) When lWhenPS F3 "ST8" PICTURE "@!" HASBUTTON
			@ 085,100 MsGet cDescDest     Of oScr Pixel When .F. PICTURE "@!" HASBUTTON

			@ 100,005 Say STR0408         Of oScr Pixel //"Fornecedor: "
			@ 100,063 MsGet cFornec600    Of oScr Pixel When lWhenFn F3 "SA23" PICTURE "@!" HASBUTTON

			@ 100,nPosLjF Say STR0409     Of oScr Pixel //"Loja: "
			@ 100,nPosDLj MsGet cLoja600  Of oScr Pixel When lWhenFn  PICTURE "@!" HASBUTTON
			@ 100,nPosDFr MsGet cNomForn  Of oScr Pixel When .F.      PICTURE "@!" HASBUTTON

			@ 115,005 Say STR0411         Of oScr Pixel //"Laudo Fornec.: "
			@ 115,063 MsGet cLaudo600     Of oScr Pixel When lWhenPS PICTURE "@!" HASBUTTON

			@ 130,005 Say STR0428         Of oScr Pixel //"Produto: "
			@ 130,063 MsGet cProdt600     Of oScr Pixel Valid (MNT600PROD(cProdt600,(cTempTable)->CODBEM,.T.) .And. fVldGet("PRO",cProdt600));
			                                            When lWhenPr F3 cF3_SB1 PICTURE "@!" HASBUTTON
			@ 130,nPosPrd MsGet cDescProd Of oScr Pixel When .F.                PICTURE "@!" HASBUTTON

			@ 145,005 Say STR0429         Of oScr Pixel //"Almoxarifado: "
			If lNNR
				@ 145,063 MsGet cAumox600 Of oScr Pixel Valid NaoVazio() .And. ExistCpo("NNR",cAumox600) When lWhenPr F3 "NNR" Picture "@!" HASBUTTON
			Else
				@ 145,063 MsGet cAumox600 Of oScr Pixel Valid NaoVazio()                                 When lWhenPr Picture "@!"
			EndIf

			@ 160,05 CHECKBOX oChk1 VAR lChecked PROMPT STR0412 SIZE 128,10 Of oScr PIXEL //"Aplicar para todos os pneus."

			DEFINE SBUTTON FROM 190,05 TYPE 1 ENABLE Of oScr ACTION EVAL({||lSai := .T.,If(fVldSts(cStat),oDlgS:End(),lSai := .F.)})

			dbSelectArea("TQY")
			Set Filter To TQY->TQY_CATBEM == NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") .Or. TQY->TQY_CATBEM == " "

		ACTIVATE MSDIALOG oDlgS CENTERED

	Else

		DEFINE MSDIALOG oDlgS TITLE STR0161 From 6,0 To 18,40 OF oMainWnd //"Alteração de Status"

			@ 00,00 SCROLLBOX oScr VERTICAL SIZE 91,160 OF oDlgS BORDER
			@ 8,5   Say STR0162 + ": " + AllTrim( (cTempTable)->CODBEM ) Of oScr Pixel Font oFont //"Alteração de Status do Bem"
			@ 25,5  Say STR0164 + cStaAtual + " - " + SubStr(cDesStaAt,1,25) Of oScr Pixel //"Status atual do bem é: "
			@ 38,5  Say STR0165 Of oScr Pixel //"Informe o novo status: "
			@ 38,63 MsGet cStat Size 25,08 Pixel Of oScr Valid VldStatBem(cStat,(cTempTable)->CODBEM) F3 "TQY" HASBUTTON
			@ 56,05 CHECKBOX oChk1 VAR lChecked PROMPT STR0172 SIZE 128,10 Of oScr PIXEL //"Aplicar para todos os bens da mesma categoria"

			DEFINE SBUTTON FROM 71,70 TYPE 1 ENABLE OF oScr ACTION EVAL({||lSai := .T.,If(fVldSts(cStat),oDlgS:End(),lSai := .F.)})

			dbSelectArea("TQY")
			Set Filter To TQY->TQY_CATBEM == NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") .Or. TQY->TQY_CATBEM == " "

		ACTIVATE MSDIALOG oDlgS CENTERED

	EndIf

	dbSelectArea("TQY")
	Set Filter To

	If lSai .And. (cTempTable)->(!EoF())
		dbSelectArea(cTempTable)
		nReg := Recno()
		RecLock(cTempTable,.F.)
		(cTempTable)->ST_BEM := cStat
		(cTempTable)->DESTAT := cDescSts
		If lPneu .And. fVldStAnl((cTempTable)->ST_BEM)
			(cTempTable)->STATUS := IIf(IsMark('OK',cMarca ),"1","0")
			fSetVrPneu("SET")
		Else
			(cTempTable)->STATUS := IIf(IsMark('OK',cMarca ),"2","0")
			fSetVrPneu("CLEAR")
			MsUnLock()
		EndIf
		(cTempTable)->(MsUnLock())

		If lChecked
			cCatBem := NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM")
			NGSETIFARQUI(cTempTable)
			While .Not. (cTempTable)->( Eof() )
				If NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") == cCatBem
					RecLock( cTempTable , .F. )
					(cTempTable)->ST_BEM := cStat
					(cTempTable)->DESTAT := cDescSts
					If lPneu .And. fVldStAnl((cTempTable)->ST_BEM)
						fSetVrPneu("SET")
					Else
						fSetVrPneu("CLEAR")
					EndIf
					MsUnLock()
				EndIf
				dbSkip()
			End
		EndIf
		dbGoTo(nReg)
		oMark:oBrowse:Refresh()
	EndIf

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} fChgCCust
Funcao para alteracao do C.Custo/C.Trabalho do Bem

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Static Function fChgCCust()

	Local oDlgS
	Local lSai := .F.

	Private cCCAtual, cDesCCAt, cCtAtual, cDesCtAt
	Private oFont := TFont():New("Arial",,14,,.T.,,,,.F.,.F.)

	If NgSeek( "ST9" , (cTempTable)->CODBEM , 1 , "T9_MOVIBEM" ) == "N"
		MsgStop( STR0229 , STR0029 ) //"Este Bem não pode ser movimentado para outro Centro de Custo."
	Else
		dbSelectArea(cTempTable)
		cCCAtual := (cTempTable)->CCUSTO
		cDesCCAt := NgSeek( "CTT" , cCCAtual , 1 , "CTT_DESC01" )

		If Empty( (cTempTable)->CTRABA )
			cCtAtual := NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CENTRAB")
		Else
			cCtAtual := (cTempTable)->CTRABA
		EndIf
		cDesCtAt := NgSeek( "SHB" , cCtAtual , 1 , "HB_NOME" )

		DEFINE MSDIALOG oDlgS TITLE STR0213 From 6,0 To 15,55 OF oMainWnd //"Alteração de Centro de Custo"
			oDlgS:lEscClose := .F.

			@ 08,5 Say STR0213 + ": " + AllTrim((cTempTable)->CODBEM) Of oDlgS Pixel Font oFont  //"Alteração de Centro de Custo"

			// Centro de Custo
			@ 25,5 Say STR0206 + ": " Color CLR_HBLUE Of oDlgS Pixel  //"C.Custo"
			@ 23,38 MsGet cCCAtual Size 40,08  Pixel Of oDlgS F3 "CTT" Picture "@!";
			Valid MNTA080VL2("cCCAtual") HASBUTTON
			@ 23,88 MsGet cDesCCAt Size 120,08 Pixel Of oDlgS When .F.

			// Centro de Trabalho
			@ 40,5 Say STR0208 + ": " Of oDlgS Pixel  //"C.Trabalho"
			@ 38,38 MsGet cCtAtual Size 40,08  Pixel Of oDlgS F3 "SHB" Picture "@!";
			Valid MNTA080VL2("cCtAtual") HASBUTTON
			@ 38,88 MsGet cDesCtAt Size 120,08 Pixel Of oDlgS When .F.

			DEFINE SBUTTON FROM 54,93 TYPE 1 ENABLE OF oDlgS ACTION EVAL({|| If(Empty(cCtAtual) .Or. CHKCENTRAB(cCtAtual,cCCAtual),;
			(lSai := .T.,If(!Empty(AllTrim(cCCAtual)),oDlgS:End(),lSai := .F.)),Nil)})
		ACTIVATE MSDIALOG oDlgS CENTERED

		If lSai .And. .Not. (cTempTable)->( EoF() )
			dbSelectArea( cTempTable )
			nReg := Recno()
			RecLock( cTempTable , .F. )
			(cTempTable)->CCUSTO := cCCAtual
			(cTempTable)->DESCUS := cDesCCAt
			(cTempTable)->CTRABA := cCtAtual
			(cTempTable)->DESCTR := cDesCtAt
			MsUnLock( cTempTable )
			DBGoTo(nReg)
			oMark:oBrowse:Refresh()
		EndIf
	EndIf
Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} fValid2
Validação ao confirmar tela

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Static Function fValid2()

	Local aIndexST9 := {}
	Local aAreaTemp := {}
	Local lRet      := .T.
	Local cCodImob  := ""
	Local lTemFil   := NGIFdbSeek("STC",M->T9_CODBEM,1)

	BEGIN TRANSACTION //Garante que só irá continuar e gravará os dados se todas as validações e UPDATEs forem feitos com sucesso.

		If !Empty(M->T9_STATUS) .And. !NGIFdbSeek('TQY',M->T9_STATUS,1)
			MsgStop(STR0184,STR0029) //"Status inválido para a categoria do bem!"
			lRet := .F.
		EndIf

		If Empty(cHourCont1) .Or. Alltrim(cHourCont1) == ":"
			MsgStop("Informe o campo 'Hora' da baixa.")
			lRet := .F.
		EndIf

		//Valida contador
		If lRet .And. ST9->T9_TEMCONT != 'N'
			lRet := fVlCounter( M->T9_CODBEM, T9_DTBAIXA, cHourCont1 )
		EndIf

		//Verifica se a validação anterior ocorreu com sucesso
		If lRet

			//------------------------------------------------------------------------------------------//
			//Verifica se possuem pneus sendo enviado para analise técnica sem preencher o Parecer/Sulco//
			//------------------------------------------------------------------------------------------//
			If lTemFil
				NGSETIFARQUI(cTempTable) //Seta para o inicio da TempTable
				While !(cTempTable)->(Eof())
					aAreaTemp := (cTempTable)->(GetArea())
					cDestino  := " "
					//Verifica se é um pneu passível de analise técnica e Não foi preenchido parecer ou suco
					If IsMark("OK",cMarca) .And. NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") == "3" .And. fVldStAnl((cTempTable)->ST_BEM)
						If !fValidPne((cTempTable)->PARECER,;
									(cTempTable)->SULCO  ,;
									(cTempTable)->MOTIVO ,;
									(cTempTable)->FORNEC ,;
									(cTempTable)->LOJA   ,;
									(cTempTable)->DTANFN ,;
									(cTempTable)->LAUDO  ,;
									(cTempTable)->ST_BEM ,;
									(cTempTable)->CODESTO,;
									(cTempTable)->ALMOXA ,;
									cDestino)
							lRet := .F.
							Exit
						EndIf
					EndIf
					RestArea(aAreaTemp)
					dbSkip()
				End Do
			EndIf
		EndIf

		//Verifica se a validação anterior ocorreu com sucesso
		If lRet

			//-------------------------------------//
			//Faz as validações e baixas no SIGAMNT//
			//-------------------------------------//
			aAdd(aIndexST9,xFilial('ST9') + M->T9_CODBEM)
			If NGIFdbSeek('TPE',M->T9_CODBEM,1)
				aAdd(aIndexST9,xFilial('TPE') + M->T9_CODBEM)
			Else
				aAdd(aIndexST9,"")
			EndIf

			If lTemFil
				//Seta o arquivo para a primeira posição a fim de inativar corretamente os bens filhos.
				NGSETIFARQUI(cTempTable)
			EndIf

			//Inicializa classe
			oST9 := MntBem():New
			oST9:SetOperation(6)
			oST9:Load(aIndexST9)
			oST9:SetValue('T9_SITBEM' ,'I')
			oST9:SetValue('T9_SITMAN' ,'I')
			oST9:SetValue('T9_DTBAIXA',M->T9_DTBAIXA)
			oST9:SetValue('T9_MTBAIXA',M->T9_MTBAIXA)
			oST9:SetValue('T9_STATUS' ,M->T9_STATUS )

			//Se o bem possuir estrutura
			If NGIFdbSeek('STC',M->T9_CODBEM,1)

				oST9:SetValue('T9_POSCONT',M->T9_POSCONT)
				oST9:SetValue('TPE_POSCON',M->TPE_POSCON)

				//Inicializa variaveis especificas para inativacao
				oST9:Inactivate(cBECausa,cHourCont1,dDateCont2,cHourCont2,cTempTable,.T.)
			EndIf

			//Executa validação final
			oST9:Valid()

			//Se houver, apresenta erro
			oST9:ShowHelp()

			If oST9:IsValid()
				//Ponto de entrada executado na validação da opção inativar
				If ExistBlock("MNTA0804")
					lRet := ExecBlock("MNTA0804",.F.,.F.)
				EndIf

				If lRet

					If fAnalisTec()   //Verifica a necessidade de fazer análise técnica de pneus.
						oST9:Upsert() //Inativa o bem e estrutura
					Else
						lRet := .F.
					EndIf

				EndIf

			Else
				lRet := .F.
			EndIf
		EndIf

		//Verifica se a validação anterior ocorreu com sucesso
		If lRet

			//-------------------------------------------------------------------//
			//Faz a inativação dos bens que estão integrados com o ATF-Ativo Fixo//
			//-------------------------------------------------------------------//

			//Verifica integração com o Ativo
			If cAltATF $ "2#3"

				If NGIfDBSeek("SN1",M->T9_CODIMOB,1) //Verifica se o bem está integrado com o Ativo
					lRet := fBaixaATF(M->T9_CODIMOB) //Faz a baixa do ativo do bem pai
				EndIf

				//Faz a baixa do ativo dos bens filhos
				If lRet .And. lTemFil

					//Seta para o inicio da TempTable
					NGSETIFARQUI(cTempTable)
					While !(cTempTable)->(Eof())

						cCodImob := NGSeek("ST9",(cTempTable)->CODBEM,1,"T9_CODIMOB")

						//Verifica se o bem está marcado para desativação e se está integrado com o Ativo
						If IsMark("OK",cMarca)
							If NGIfDBSeek("SN1",cCodImob,1)

								//Faz a baixa do ativo dos bens filhos
								If !fBaixaATF(cCodImob)
									lRet := .F.
									Exit
								EndIf

							EndIf
						EndIf
						dbSelectArea(cTempTable)
						dbSkip()
					End
				EndIf
			EndIf
		EndIf

		If !lRet
			DisarmTransaction()
		EndIf

	END TRANSACTION
Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080VL2
Valida e Carrega a Descricao dos campos

@param cCampo - Campo a ser validado

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Function MNTA080VL2( cCampo )

	Local lValid := .T.
	Local nRecnoTmp

	// T9_DTBAIXA
	If cCampo == 'T9_DTBAIXA'

		Do Case

			Case !NaoVazio()
				lValid := .F.
			Case !NGCPDIAATU( M->T9_DTBAIXA, '<=', .T., .T., .T. )
				lValid := .F.
			Case !( M->T9_DTBAIXA >= M->T9_DTCOMPR )
				lValid := .F.
				Help( '', 1, STR0029,, STR0451, 2, 0,,,,,,; //Atenção ## Data para baixa não poderá ser inferior a data de compra do bem (T9_DTCOMPR).
				{ STR0453 + DtoC( M->T9_DTCOMPR ) + '.' } ) //Favor informar uma data superior ou igual a data XX/XX/XXXX.

		EndCase

	//--------------------------------------------------------------------------
	// cHourCont1
	//--------------------------------------------------------------------------
	ElseIf cCampo == "cHourCont1"

		If .Not. NGVALHORA( cHourCont1 , .T. )
			lValid := .F.
		Endif

	//--------------------------------------------------------------------------
	// cHourCont2
	//--------------------------------------------------------------------------
	ElseIf cCampo == "cHourCont2"

		If .Not. NGVALHORA( cHourCont2 , .T. )
			lValid := .F.
		ElseIf .Not. NGCHKHISTO(M->T9_CODBEM,dDateCont2,M->TPE_POSCON,cHourCont2,2,,.T.)
			lValid := .F.
		ElseIf .Not. NGVALIVARD(M->T9_CODBEM,M->TPE_POSCON,dDateCont2,cHourCont2,2,.T.)
			lValid := .F.
		Endif

		If .Not. lValid
			M->TPE_POSCON := nPosCont2
			dDateCont2	  := dDataBase
			cHourCont2	  := Time()
		EndIf

	//--------------------------------------------------------------------------
	// T9_POSCONT
	//--------------------------------------------------------------------------
	ElseIf cCampo == "T9_POSCONT"

		If .Not. Positivo( M->T9_POSCONT )
			lValid := .F.
		ElseIf .Not. NaoVazio( M->T9_POSCONT )
			lValid := .F.
		ElseIf .Not. CHKPOSLIM( M->T9_CODBEM , M->T9_POSCONT , 1 )
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// TPE_POSCON
	//--------------------------------------------------------------------------
	ElseIf cCampo == "TPE_POSCON"

		If .Not. Positivo( M->TPE_POSCON )
			lValid := .F.
		ElseIf .Not. NaoVazio( M->TPE_POSCON )
			lValid := .F.
		ElseIf .Not. CHKPOSLIM( M->T9_CODBEM , M->TPE_POSCON , 2 )
			lValid := .F.
		EndIf

	//--------------------------------------------------------------------------
	// dDateCont2
	//--------------------------------------------------------------------------
	ElseIf cCampo == "dDateCont2"

		lValid := NaoVazio()

	//--------------------------------------------------------------------------
	// T9_STATUS
	//--------------------------------------------------------------------------
	ElseIf cCampo == "T9_STATUS"

		If Empty( M->T9_STATUS )
			M->T9_DESTAT := Space( TamSx3('T9_DESTAT')[1] )
		Else
			If .Not. ExistCpo( "TQY" , M->T9_STATUS )
				Return .F.
			Else
				M->T9_DESTAT := NgSeek("TQY",M->T9_STATUS,1,"TQY_DESTAT")
			EndIf

			If .Not. VldStatBem( M->T9_STATUS , M->T9_CODBEM )
				Return .F.
			EndIf
		EndIf

		If Type('cTempTable') == 'C'
			dbSelectArea(cTempTable)
			nRecnoTmp := (cTempTable)->( Recno() )
			DBGoTop()
			While .Not. (cTempTable)->( Eof() )
				If IsMark( 'OK' , cMarca ) .And. .Not. Empty( M->T9_STATUS )
					If VldStatBem(M->T9_STATUS,(cTempTable)->CODBEM) .And. ST9->T9_CATBEM != "3"
						RecLock( cTempTable , .F. )
						(cTempTable)->ST_BEM := M->T9_STATUS
						(cTempTable)->DESTAT := NgSeek( "TQY" , M->T9_STATUS , 1 , "TQY_DESTAT" )
						MsUnLock( cTempTable )
					EndIf
				EndIf
				dbSelectArea(cTempTable)
				dbSkip()
			End

			DBGoTo( nRecnoTmp )
			oMark:oBrowse:Refresh()
		EndIf

	//--------------------------------------------------------------------------
	// T9_MTBAIXA
	//--------------------------------------------------------------------------
	ElseIf cCampo == "T9_MTBAIXA"

		If Empty( M->T9_MTBAIXA )
			M->T9_DESMOT := Space(TamSx3( 'T9_DESMOT')[1] )
		Else
			If .Not. ExistCpo( "TPJ" , M->T9_MTBAIXA )
				lValid := .F.
			Else
				M->T9_DESMOT := NgSeek("TPJ",M->T9_MTBAIXA,1,"TPJ_DESMOT")
			EndIf
		EndIf

	//--------------------------------------------------------------------------
	// TZ_CAUSA
	//--------------------------------------------------------------------------
	ElseIf cCampo == "TZ_CAUSA"

		If .Not. Empty(cBECausa)
			If .Not. ExistCpo("ST8",cBECausa)
				lValid := .F.
			Else
				cBEDCausa := NgSeek("ST8",cBECausa,1,"T8_NOME")
			EndIf
		EndIf

	//--------------------------------------------------------------------------
	// cCCAtual
	//--------------------------------------------------------------------------
	ElseIf cCampo == "cCCAtual"

		If .Not. Existcpo( "SI3" , cCCAtual )
			lValid := .F.
		Else
			cDesCCAt := NgSeek( "SI3" , cCCAtual , 1 , "I3_DESC" )
		EndIf

	//--------------------------------------------------------------------------
	// cCtAtual
	//--------------------------------------------------------------------------
	ElseIf cCampo == "cCtAtual"

		If Empty( cCtAtual )
			cDesCtAt := ""
		Else
			If .Not. Existcpo( "SHB" , cCtAtual )
				lValid := .F.
			ElseIf .Not. ChkCentrab( cCtAtual , cCCAtual )
				lValid := .F.
			Else
				cDesCtAt := NgSeek( "SHB" , cCtAtual , 1 , "HB_NOME" )
			EndIf
		EndIf
	EndIf

Return lValid

//------------------------------------------------------------------------------
/*/{Protheus.doc} VldStatBem
Valida status selecionados

@param cStatBem - Status a ser validado
@param cCodBem - Codigo do Bem a ser validado

@author NG Informática Ltda.
@since 01/01/2015
@version P12
@return Bool
/*/
//------------------------------------------------------------------------------
Static Function VldStatBem(cStatBem,cCodBem)

	Local lValid     := .T.
	Local cError     := ""
	Local cCatBem    := NGSEEK( "ST9" , cCodBem , 1 , "T9_CATBEM" )
	Local cAnaliForn := SuperGetMv("MV_NGSTAAT",.F.,"") // "Status de Análise do Fornecedor"

	If cCatBem == '3'
		If (cStatBem == GetNewPar("MV_NGSTAPL","") .Or. (cStatBem == GetNewPar("MV_NGMOVTR","")))
			cError := STR0173 //"Os bens não podem assumir status "
			cError += cStatBem + " - "
			cError += AllTrim(NGSEEK("TQY",cStatBem,1,"TQY_DESTAT")) + "."
			APMSGINFO(cError,STR0029) //"ATENCAO"
			lValid := .F.
		EndIf
	EndIf

	If NGIFdbSeek('TQY',cStatBem,1)
		If !(Empty(TQY->TQY_CATBEM) .Or. TQY->TQY_CATBEM == cCatBem)
			lValid := .F.
		EndIf
	Else
		lValid := .F.
	EndIf

	If Type("cDescSts") == "C"
		cDescSts := NgSeek("TQY",cStatBem,1,"TQY_DESTAT" )
	EndIf

	If Type("cParecer") == "C" .And. !Empty(cStatBem) // Permite alterar Status de Pneus

		cDestino := ""
		lWhenPS  := IIf(lPneu .And. fVldStAnl(cStatBem),.T.,.F.)
		lWhenFn  := IIf(lPneu .And. fVldStAnl(cStatBem) .And. cStatBem == cAnaliForn,.T.,.F.)
		lWhenPr  := IIf(lPneu .And. fVldStAnl(cStatBem) .And. fWhenProdt(cDestino),.T.,.F.)

		If !lWhenPS
			cParecer  := Space(TamSx3("TR4_PAREC")[1])
			nSulco    := 0
			cMotivo   := Space(TamSx3("TR4_MOTIVO")[1])
			dAnl600   := CtoD("  /  /    ")
			cLaudo600 := Space(TamSx3("TR4_LAUDO" )[1])
		EndIf

		If !lWhenFn
			cFornec600 := Space(TamSx3("TR4_FORNEC")[1])
			cLoja600   := Space(TamSx3("TR4_LOJA"  )[1])
		EndIf

		If lPneu
			If cStatBem == GETMV("MV_NGSTATR")
				MsgStop(STR0421,STR0029) // "Status Pneu deverá ser diferente de 'Em Trânsito'"
				lValid := .F.
			EndIf

			If M->T9_DTBAIXA <= GetMV("MV_ULMES")
				MsgInfo(STR0432 + DtoC(GetMV("MV_ULMES")) + " .")//"A data da analise não pode ser menor ou igual a data do ultimo fechamento do estoque "
				Return .F.
			EndIf
		EndIf

	EndIf

Return lValid

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG080CON)
.

@author Rodrigo Luan Backes
@since	10/08/2015

@return cConv
/*/
//------------------------------------------------------------------------------
Function NG080CON(cCodCon)

	Local cCONVEN	:= ""

	Default cCodCon := ""

	If !Empty(cCodCon)
  		cCONVEN := NGRETSX3BOX("TQM_CONVEN",cCodCon)
 	EndIf

Return cCONVEN

//------------------------------------------------------------------------------
/*/{Protheus.doc} fRetVDisp
Define o conteudo a ser apresentado em campos descrição quando seu referente
campo código estiver definido como não cópia.
@type function

@author Alexandre Santos
@since 16/01/2019

@sample fRetVDisp( 'TQY', 'TQY_DESTAT', ST9->T9_STATUS )

@param  cTable , Caracter, Tabela a ser pesquisada.
@param  cField , Caracter, Campo a ser retornado.
@param  cKey   , Caracter, Chave de pesquisa.
@return cReturn, Caracter, Conteudo a ser apresentado no cadastro.
/*/
//------------------------------------------------------------------------------
Function fRetVDisp( cTable, cField, cKey )

	Local cReturn := ''

	If !Type( 'nOptRot' ) == 'N'

		Do Case

			Case cField == 'TQY_DESTAT'
				cReturn := TQY->( vDisp( ST9->T9_STATUS, 'TQY_DESTAT' ) )
			Case cField == 'TPJ_DESMOT'
				cReturn := TPJ->( vDisp( ST9->T9_MTBAIXA, 'TPJ_DESMOT' ) )

		EndCase

	Else

		If nOptRot != 3 .And. nOptRot != 9 //Inclusão ou Cópia

			dbSelectArea( cTable )
			dbSetOrder( 1 )
			If MsSeek( xFilial( cTable ) + cKey )
				cReturn := &( cField )
			EndIf

		EndIf

	EndIf

Return cReturn

//------------------------------------------------------------------------------
/*/{Protheus.doc} fRetEstrut

@author Maicon André Pinheiro
@since 11/07/2016

@return cDesc
/*/
//------------------------------------------------------------------------------
Function fRetEstrut()

	Local cRet := ""

	If !Type("nOptRot") == "N"
		cRet := IIf(Inclui,"N",ST9->T9_ESTRUTU)
	Else
		If nOptRot = 3 .Or. nOptRot = 9
			cRet := "N"
		Else
			cRet := ST9->T9_ESTRUTU
		EndIf
	EndIf

Return cRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT80BANDA

@author Evaldo Cevinscki Jr.
@since 22/11/2006

@return Lógico
/*/
//------------------------------------------------------------------------------
Function MNT80BANDA()

	Local vCamKM := {}, nF1 := 0
	Store .T. To lDESEN,lKMOR,lKMR1,lKMR2,lKMR3,lKMR4

	If M->TQS_BANDAA = "1"

		M->TQS_DESENH := Space(Len(TQS->TQS_DESENH))
		Store .F. To lDESEN,lKMR1,lKMR2,lKMR3,lKMR4
		vCamKM := {1,2,3,4}

	ElseIf M->TQS_BANDAA = "2"

		Store .F. To lKMR2,lKMR3,lKMR4
		vCamKM := {2,3,4}

	ElseIf M->TQS_BANDAA = "3"

		Store .F. To lKMR3,lKMR4
		vCamKM := {3,4}

	ElseIf M->TQS_BANDAA = "4"

		lKMR4  := .F.
		vCamKM := {4}

	EndIf

	If Altera
	   If M->TQS_BANDAA < TQS->TQS_BANDAA
	      MsgInfo(STR0181+" "+STR0182+CRLF+STR0182+"..: "+NGRETSX3BOX("TQS_BANDAA",TQS->TQS_BANDAA),STR0109)
	      Return .F.
	   EndIf
	EndIf

	If !Empty(vCamKM)
		For nF1 := 1 To Len(vCamKM)
			cVarTQS  := 'M->TQS_KMR'+Str(vCamKM[nF1],1)
			&cVarTQS := 0
		Next nF1
	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080TRC
Motivo da alteracao do controle do bem

@author Inácio Luiz Kolling
@since 10/00/2004
@version P12
@return
/*/
//------------------------------------------------------------------------------
Function MNTA080TRC(cTPCONT)

	Local oDlg
	Local cALITRC   := Alias()
	Local nORDTRC   := IndexOrd()
	Local cCONTDE   := Space(1)
	Local cCONTPA   := cCONTDE
	Local vx        := 0
	Local nOptrc    := 0
	Local cTITCAM   := NGRETTITULO("T9_TEMCONT")
	Local cBOXCAM   := NGRETSX3BOX("T9_TEMCONT")
	Local nINSTR    := At(cTPCONT+"=",cBOXCAM)

	Private lTESTRC := .F.
	Private cMOTIVO := Space(TamSx3("TZ_CAUSA")[1])
	Private cNOMCAU := Space(TamSx3("T8_NOME")[1])

	For vx := nINSTR+2 To Len(cBOXCAM)
		If Substr(cBOXCAM,vx,1) = ";"
			Exit
		Else
			cCONTDE += Substr(cBOXCAM,vx,1)
		EndIf
	Next vx

	nINSTR := At(M->T9_TEMCONT+"=",cBOXCAM)
	For vx := nINSTR+2 To Len(cBOXCAM)
		If Substr(cBOXCAM,vx,1) = ";"
			Exit
		Else
			cCONTPA += Substr(cBOXCAM,vx,1)
		EndIf
	Next vx

	cCONTDE += " ("+cTPCONT+")"
	cCONTPA += " ("+M->T9_TEMCONT+")"

	Define MsDialog oDlg From 300,120 To 415,500 Title OemToAnsi(STR0029) Pixel Style DS_MODALFRAME // Cria Dialog sem o botão de Fechar.

		@ .1 ,1   Say OemToAnsi(STR0076+" ( "+cTITCAM+" )")
		@ .6 ,1   Say OemToAnsi(STR0077+"   "+cCONTDE) Color CLR_HBLUE
		@ 1.1,1   Say OemToAnsi(STR0078+" "+cCONTPA)   Color CLR_HRED
		@ 2  ,1   Say OemToAnsi(STR0103)//"Motivo"
		@ 2  ,3.5 MSget cMOTIVO Picture "@!" Valid MNTA080CHM() F3 "STN" SIZE 35.5,10
		@ 2  ,8   MSget cNOMCAU Picture "@!" SIZE 120,10 When .F.

		DEFINE SBUTTON FROM 42,110 TYPE 1 ACTION  {|| If(lTESTRC,oDlg:End(),MNTA080TCO(cMOTIVO))} ENABLE OF oDlg
		DEFINE SBUTTON FROM 42,145 TYPE 2 ACTION MNTA080FCO(oDlg)                                 ENABLE OF oDlg

	ACTIVATE MSDIALOG oDlg CENTERED

	If nOptrc == 1
		lTESTRC := .T.
	EndIf

	If !Empty(cALITRC)
		dbSelectArea(cALITRC)
	EndIf

	If nORDTRC > 0
		dbSetOrder(nORDTRC)
	EndIf

Return cMOTIVO

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080TCO
Validacao/confirmacao do motivo da alteracao do controle bem

@author Inácio Luiz Kolling
@since 10/00/2004
@version P12
@return
/*/
//------------------------------------------------------------------------------
Static Function MNTA080TCO(cVMOT)

	If !lTESTRC

		cNOMCAU := NGSEEK("ST8",cVMOT,1,"T8_NOME")
		If !ExistCpo("ST8",cVMOT)
			Return .F.
		ElseIf !NGMOTIVO(cVMOT)
			Return .F.
		EndIf
		lTESTRC  := .T.

	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080CHM
Validacao do motivo da alteracao do controle do bem

@author Inácio Luiz Kolling
@since 10/00/2004
@version P12
@return
/*/
//------------------------------------------------------------------------------
Static Function MNTA080CHM()

	lTESTRC := .F.
	cNOMCAU := Space(Len(ST8->T8_NOME))

	If !ExistCpo("ST8",cMOTIVO)
		Return .F.
	ElseIf !NGMOTIVO(cMOTIVO)
		Return .F.
	ElseIf AliasInDic("TUS") .And. !MNT125VOC(,.T.)//Valida se esta vinculado a familia
		Return .F.
	Else
		cNOMCAU  := ST8->T8_NOME
	EndIf
	lTESTRC := .T.

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080FCO
Cancelamento do motivo

@author Inácio Luiz Kolling
@since 10/00/2004
@version P12
@return
/*/
//------------------------------------------------------------------------------
Static Function MNTA080FCO(oDlg)

	lTESTRC := .F.
	oDlg:End()

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} fBusSegCnt
Busca dados do segundo contador

@author Maicon André Pinheiro
@since 14/03/2017
@version P12
@Return {
         cTpCont = TPE_TPCONT
         dDtUlta = TPE_DTULTA
         cPosCOn = TPE_POSCON
         cVardia = TPE_VARDIA
         cLimiCo = TPE_LIMICO
         cContAc = TPE_CONTAC
         cContGa = TPE_CONTGA
        }
/*/
//------------------------------------------------------------------------------
Static Function fBusSegCnt(nOptRot)

	Local cTpCont := Space(TamSx3('TPE_TPCONT')[1])
	Local dDtUlta := SToD(Space(8))
    Local nPosCOn := 0
	Local nVardia := 0
	Local nLimiCo := 0
	Local nContAc := 0
	Local nContGa := 0

	If nOptRot != 3

		dbSelectArea("TPE")
		dbSetOrder(1)
		If dbSeek(xFilial("TPE") + ST9->T9_CODBEM)
			cTpCont := TPE_TPCONT
			dDtUlta := TPE_DTULTA
			nPosCOn := TPE_POSCON
			nVardia := TPE_VARDIA
			nLimiCo := TPE_LIMICO
			nContAc := TPE_CONTAC
			nContGa := TPE_CONTGA
		EndIf

	EndIf

Return {cTpCont, dDtUlta, nPosCOn, nVardia, nLimiCo, nContAc, nContGa}

//------------------------------------------------------------------------------
/*/{Protheus.doc} fAnalisTec - Análise Técnica

Manda para análise técnica os pneus de acordo com o seu Status.

@author Maicon André Pinheiro
@since 07/12/2016
@sample MNTA080
@return cDesc
/*/
//------------------------------------------------------------------------------
Static Function fAnalisTec()

	Local aPneu := {}

	Private cDestino   := ""
	Private cStatusBKP := ""

	If lTemFil
		NGSETIFARQUI(cTempTable) //Seta para o inicio da TempTable
		While !(cTempTable)->(Eof())

			// Verifica se é Pneu
			If IsMark("OK",cMarca) .And. NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") == "3"

				cDestino := ""
				If fVldStAnl((cTempTable)->ST_BEM) // Verifica se Status é passível de analise técnica.

					//Altera o status do Pneu para que seja possível utilizar o MNT600GRA de forma generica
					fUpdStatus((cTempTable)->CODBEM,(cTempTable)->ST_BEM,.T.)

					aPneu := {}
					aAdd(aPneu,{"TR4_CODBEM",(cTempTable)->CODBEM ,Nil})
					aAdd(aPneu,{"TR4_DTANAL",M->T9_DTBAIXA        ,Nil})
					aAdd(aPneu,{"TR4_HRANAL",cHourCont1           ,Nil})
					aAdd(aPneu,{"TR4_DESTIN",cDestino             ,Nil})
					aAdd(aPneu,{"TR4_MOTIVO",(cTempTable)->MOTIVO ,Nil})
					aAdd(aPneu,{"TR4_SULCO" ,(cTempTable)->SULCO  ,Nil})
					aAdd(aPneu,{"TR4_PAREC" ,(cTempTable)->PARECER,Nil})
					aAdd(aPneu,{"TR4_FORNEC",(cTempTable)->FORNEC ,Nil})
					aAdd(aPneu,{"TR4_LOJA"  ,(cTempTable)->LOJA   ,Nil})
					aAdd(aPneu,{"TR4_DTANFN",(cTempTable)->DTANFN ,Nil})
					aAdd(aPneu,{"TR4_LAUDO" ,(cTempTable)->LAUDO  ,Nil})
					aAdd(aPneu,{"TR4_OBS"   ,STR0439              ,Nil})
					aAdd(aPneu,{"CODESTO"   ,(cTempTable)->CODESTO,Nil})
					aAdd(aPneu,{"ALMOXA"    ,(cTempTable)->ALMOXA ,Nil})

					lMSHelpAuto := .T. // Não apresenta erro em tela
					lMSErroAuto := .F. // Caso a variável torne-se .T. apos MsExecAuto, apresenta erro em tela
					MSExecAuto({|x,z|MNTA600(x,z)},aPneu)

					If lMsErroAuto
						fUpdStatus((cTempTable)->CODBEM,cStatusBKP,.F.)
						MostraErro()
					Else
						//Desmarca o bem para que não inative o mesmo, visto que ele está sendo mandado para analise técnica.
						RecLock(cTempTable,.F.)
						(cTempTable)->OK := "  "
						MsUnLock(cTempTable)
					EndIf

				EndIf
			EndIf
			dbSelectArea(cTempTable)
			dbSkip()
		End
	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} fVldStAnl - Válida Status Análise

Verifica se Status é passíveis de Analise Técnica conforme tabela de-para a seguir
conforme destino e configuração do MNTA600:
__________________________________________________________________
|   Destino MNTA600     | Parâmetro  | Desc. Simples do Parâmetro |
|1 - Ressolar           | MV_NGSTAGR | Aguardando Reforma         |
|2 - Consertar          | MV_NGSTAGC | Aguardando Conserto        |
|3 - Estoque Usado      | MV_NGSTAEU | Estoque Usado              |
|4 - Estoque Reformado  | MV_NGSTAER | Estoque Reformado          |
|5 - Análise Fornecedor | MV_NGSTAAT | Aguardando Análise técnica |
|6 - Sucata             | MV_NGSTARS | Removido Serviço           |
|7 - Estoque Novo       | MV_NGSTAEN | Estoque Novo               |
------------------------------------------------------------------|

Caso o Status selecionado esteja contido em um dos parâmetro manda o pneu para
análise técnica via ExecAuto.

@author Maicon André Pinheiro
@since 07/12/2016
@sample MNTA080
@return lRet
/*/
//------------------------------------------------------------------------------
Function fVldStAnl(cStatus)

	Local lRet       := .F.
	Local cRessolar  := SuperGetMv("MV_NGSTAGR",.F.,"") // "1"
	Local cConsertar := SuperGetMv("MV_NGSTAGC",.F.,"") // "2"
	Local cEstUsado  := SuperGetMv("MV_NGSTAEU",.F.,"") // "3"
	Local cEstReform := SuperGetMv("MV_NGSTAER",.F.,"") // "4"
	Local cAnaliForn := SuperGetMv("MV_NGSTAAT",.F.,"") // "5"
	Local cSucata    := SuperGetMv("MV_NGSTARS",.F.,"") // "6"
	Local cEstNovo   := SuperGetMv("MV_NGSTAEN",.F.,"") // "7"

	If !Empty(cStatus)
		If cStatus == cRessolar
			cDestino := "1"
			lRet     := .T.
		ElseIf cStatus == cConsertar
			cDestino := "2"
			lRet     := .T.
		ElseIf cStatus == cEstUsado
			cDestino := "3"
			lRet     := .T.
		ElseIf cStatus == cEstReform
			cDestino := "4"
			lRet     := .T.
		ElseIf cStatus == cAnaliForn
			cDestino := "5"
			lRet     := .T.
		ElseIf cStatus == cSucata
			cDestino := "6"
			lRet     := .T.
		ElseIf cStatus == cEstNovo
			cDestino := "7"
			lRet     := .T.
		EndIf
	EndIf

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc}

@author Maicon André Pinheiro
@since 07/12/2016
@sample MNTA080
@return lRet
/*/
//------------------------------------------------------------------------------
Static Function fViewLeg()

	Local aLegenda := {{"Br_Vermelho",STR0418},; //"Bens que serão inativados."
					   {"Br_Verde"   ,STR0419},; //"Bens que não serão inativados"
					   {"Br_Amarelo" ,STR0420}}  //"Pneus que serão enviados para análise técnica."

	BrwLegenda(cCadastro,STR0079,aLegenda) //"Legenda"

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc}

@author Maicon André Pinheiro
@since 07/12/2016
@sample MNTA080
@return lRet
/*/
//------------------------------------------------------------------------------
Static Function fVldGet(cTipo,cCod)

	Do Case
		Case cTipo == "MOT"
			cDescDest := ST8->(vDisp(cCod,"SUBSTR(ST8->T8_NOME,1,20)"))

		Case cTipo == "PRO"
			cDescProd := NGSEEK("SB1",cCod,1,"B1_DESC")
	Endcase

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc}

@author Maicon André Pinheiro
@since 07/12/2016
@sample MNTA080
@return lRet
/*/
//------------------------------------------------------------------------------
Static Function fValidPne(cParcPn,cSulcPn,cMotvPn,cFornPn,cLojaPn,cDtForPn,cLaudoPn,cStatus,cProdPn,cAuxPn,cDestPn)

	Local cAnaliForn := SuperGetMv("MV_NGSTAAT",.F.,"") // "Status de Análise do Fornecedor"

	Do Case
		Case Empty(cParcPn)
			//"Não é possível enviar o Pneu "###" para análise técnica sem informar o "###"Parecer"###"ATENCAO"
			MsgStop(STR0413 + AllTrim((cTempTable)->CODBEM) + STR0414 + STR0440,STR0029)
			Return .F.

		Case Empty(cSulcPn)
			//"Não é possível enviar o Pneu "###" para análise técnica sem informar o "###"Sulco"###"ATENCAO"
			MsgStop(STR0413 + AllTrim((cTempTable)->CODBEM) + STR0414 + STR0399,STR0029)
			Return .F.

		Case Empty(cMotvPn)
			//"Não é possível enviar o Pneu "###" para análise técnica sem informar o "###"Motivo"###"ATENCAO"
			MsgStop(STR0413 + AllTrim((cTempTable)->CODBEM) + STR0414 + STR0400,STR0029)
			Return .F.

		Case cStatus == cAnaliForn .And. Empty(cFornPn)
			//"Não é possível enviar o Pneu "###" para análise técnica sem informar o "###"Fornecedor"###"ATENCAO"
			MsgStop(STR0413 + AllTrim((cTempTable)->CODBEM) + STR0414 + STR0401,STR0029)
			Return .F.

		Case cStatus == cAnaliForn .And. Empty(cLojaPn)
			//"Não é possível enviar o Pneu "###" para análise técnica sem informar o "###"Loja"###"ATENCAO"
			MsgStop(STR0413 + AllTrim((cTempTable)->CODBEM) + STR0414 + STR0415,STR0029)
			Return .F.

		Case lWhenPr .And. fWhenProdt(cDestPn) .And. (Empty(cProdPn) .Or. Empty(cAuxPn))
			//"Será necessário informar o novo código do produto para conforme o Status selecionado para o bem "###"ATENCAO"
			MsgStop(STR0433 + AllTrim((cTempTable)->CODBEM),STR0029)
			Return .F.

	Endcase

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc}

@author Maicon André Pinheiro
@since 07/12/2016
@sample MNTA080
@return lRet
/*/
//------------------------------------------------------------------------------
Static Function fVldSts(cStat)

	Do Case
		Case Empty(AllTrim(cStat))
			MsgStop(STR0427,STR0029)
			Return .F.
	Endcase

	cDestino := " "
	If fVldStAnl(cStat) // Status passível de análise técnica

		If !fValidPne(cParecer,nSulco,cMotivo,cFornec600,cLoja600,dAnl600,cLaudo600,cStat,cProdt600,cAumox600,cDestino)
			Return .F.
		EndIf

		dbSelectArea("ST9")
		dbSetOrder(01)
		If dbSeek(xFilial("ST9") + (cTempTable)->CODBEM)

			If Empty(ST9->T9_CODESTO)
				//"Não será efetuado o lançamento de insumo para custeio do Pneu, pois, o campo de relacionamento"
				If !MsgYesNo(STR0422 + Chr(13) + STR0423 + Chr(13) + ;
				             " (T9_CODESTO - " + AllTrim( FWX3Titulo( 'T9_CODESTO' ) ) + ") "+;
						     STR0424 + " "     + AllTrim(NGSX2NOME("ST9")) + Chr(13)+; //"no cadastro de"
							 STR0425 + Chr(13) + Chr(13) + STR0426) //"não está preenchido."###"Confirmar ?"
					Return .F.
				EndIf
			EndIf

			If GetNewPar("MV_ESTNEG",'N') == 'N' .And. lUsaIntEs
				If !MNT600PROD(ST9->T9_CODESTO,(cTempTable)->CODBEM,.T.)
					Return .F.
				EndIf
			EndIf

		EndIf

		If cDestino <> '3' .And. Empty(cMotivo)
			Help("",1,2,STR0009,STR0013,3,1) //"Atenção"###"Campo Motivo Obrigatório para Destino Diferente de Estoque Usado."
			Return .F.
		EndIf

	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} fWhenProdt

@author Maicon André Pinheiro
@since 07/12/2016
@sample MNTA080
@return lRet
/*/
//------------------------------------------------------------------------------
Static Function fWhenProdt(cTR4DesTin)

	Local lWhen := .F.

	If lUsaIntEs .And. cTR4DesTin $ cDestinEst

		dbSelectArea("ST9")
		dbSetOrder(01)
		If dbSeek(xFilial("ST9") + (cTempTable)->CODBEM)
			If !ExistBlock( "MNTA6004" ) // Se o ponto de entrada não existir, monta e exibe a tela.
				lWhen := .T.
			Else // Executa o PE MNTA6004, se o mesmo existir.
				aMNTA6004 := ExecBlock( "MNTA6004", .F., .F., {(cTempTable)->CODBEM} ) // O retorno é um array de duas posições
				cProdt600 := aMNTA6004[1] // aMNTA6004[1] - Cód. do Produto.
				cAumox600 := aMNTA6004[2] // aMNTA6004[2] - Cód. do Almoxarifado.
				cCodST9CC := ST9->T9_CCUSTO
				lWhen     := .F.
			EndIf
		EndIf
	EndIf

Return lWhen

//---------------------------------------------------------------------
/*/{Protheus.doc} fDeclarPvt

@author Maicon André Pinheiro
@since
@version MP12
@Sample MNTA080
/*/
//---------------------------------------------------------------------
Static Function fDeclarPvt(cMomento)

	//Calcula as posições iniciais dos registros. Multiplica por 6 por que cada caracter corresponde a 6 espaço.
	Local nTaDFor  := TamSx3("TR4_NOMFOR")[1]
	Local nTamFor  := TamSx3("A2_COD"    )[1]
	Local nTamDsF  := TamSx3("A2_NREDUZ" )[1]
	Local nTamPrd  := TamSx3("B1_COD"    )[1]
	Local nLcCdF   := nTamFor * 6 + 63
	Local nLcDFr   := nTamDsF * 6 + nLcCdF
	Local nLcDLj   := nLcDFr  + 15
	Local nLcPrd   := nTamPrd * 6 + 63
	Local nAlt40p  := oSize:aWorkArea[4] * 0.40
	Local nTamLin  := nAlt40p / 8
	Local nEspRet  := nTamLin * 0.3
	Local nTamL1   := nTamLin
	Local nTamL2   := nTamL1 + nEspRet + (nTamLin * 2)
	Local nTamL3   := nTamL2 + nEspRet + (nTamLin * 3)
	Local nTamL4   := nTamL3 + nEspRet + (nTamLin * 1.5)
	Local nTamL5   := nTamL4 + nTamL3 + nEspRet + nTamLin
	Local nTamnCmp := nTamLin * 0.8
	Local nEspcCmp := nTamLin * 0.1

	If cMomento == "Status"

		//Variáveis de tela para pneu
		_SetOwnerPrvt("cParecer"  ,(cTempTable)->PARECER)
		_SetOwnerPrvt("nSulco"    ,(cTempTable)->SULCO  )
		_SetOwnerPrvt("cMotivo"   ,(cTempTable)->MOTIVO )
		_SetOwnerPrvt("cFornec600",(cTempTable)->FORNEC )
		_SetOwnerPrvt("cLoja600"  ,(cTempTable)->LOJA   )
		_SetOwnerPrvt("dAnl600"   ,(cTempTable)->DTANFN )
		_SetOwnerPrvt("cLaudo600" ,(cTempTable)->LAUDO  )
		_SetOwnerPrvt("cProdt600" ,(cTempTable)->CODESTO)
		_SetOwnerPrvt("cAumox600" ,(cTempTable)->ALMOXA )

		//Variáveis de descrições
		_SetOwnerPrvt("cDescSts"  ,Space(TamSx3("T9_DESTAT" )[1]))
		_SetOwnerPrvt("cDescDest" ,Space(TamSx3("TR4_DESMOT")[1]))
		_SetOwnerPrvt("cNomForn"  ,IIf(Empty(cFornec600),Space(TamSx3("TR4_NOMFOR")[1]),SubStr(NGSEEK("SA2",cFornec600+cLoja600,1,"SA2->A2_NOME"),1,nTaDFor)))
		_SetOwnerPrvt("cDescProd" ,IIf(Empty(cProdt600 ),Space(TamSx3("B1_DESC")[1]   ),NGSEEK("SB1",cProdt600,1,"SB1->B1_DESC")))

		//Variáveis lógicas
		_SetOwnerPrvt("lPneu"     ,NgSeek("ST9",(cTempTable)->CODBEM,1,"T9_CATBEM") == "3")
		_SetOwnerPrvt("lWhenPS"   ,.F.)
		_SetOwnerPrvt("lWhenFn"   ,.F.)

		//Variáveis de posição horizontal para campos com Cód+Descrição
		_SetOwnerPrvt("nPosDFr"   ,nLcCdF)
		_SetOwnerPrvt("nPosLjF"   ,nLcDFr)
		_SetOwnerPrvt("nPosDLj"   ,nLcDLj)
		_SetOwnerPrvt("nPosPrd"   ,nLcPrd)

		//Outras variáveis
		_SetOwnerPrvt("cStaAtual" ,"")
		_SetOwnerPrvt("cDesStaAt" ,"")
		_SetOwnerPrvt("oFont"     ,TFont():New("Arial",,14,,.T.,,,,.F.,.F.))

	ElseIf cMomento == "Inativar"

		//Variáveis do tamanho da tela principal de inativação.
		_SetOwnerPrvt("nAltura40p",nAlt40p+20)        //Altura de 40% da tela.
		_SetOwnerPrvt("nPosIniCmp",nLinIniTla + 1) //Posicição inicial dos campos na tela
		_SetOwnerPrvt("nTamLin1"  ,nTamL1)         //Tamanho do retangulo para 1 linha
		_SetOwnerPrvt("nTamLin2"  ,nTamL2)         //Tamanho do retangulo para 2 linha
		_SetOwnerPrvt("nTamLin3"  ,nTamL3)         //Tamanho do retangulo para 3 linha
		_SetOwnerPrvt("nTamLin4"  ,nTamL4)         //Tamanho do retangulo para 4 linha
		_SetOwnerPrvt("nTamLin5"  ,nTamL5)         //Tamanho do retangulo para 4 linha
		_SetOwnerPrvt("nEspRetn"  ,nEspRet)        //Tamanho do espaço entre os retangulos
		_SetOwnerPrvt("nSizeCmp"  ,nTamnCmp)       //Tamanho do Size horizontal dos campos
		_SetOwnerPrvt("nSpceCmp"  ,nEspcCmp)       //Tamanho do Espaço entre os campos

	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fSetVrPneu

@author Evaldo Cevinscki Jr.
@since 02/11/2006
@version MP12
@Sample MNTA080
/*/
//---------------------------------------------------------------------
Static Function fSetVrPneu(cTipo)

	If cTipo == "SET"
		(cTempTable)->PARECER := cParecer
		(cTempTable)->SULCO   := nSulco
		(cTempTable)->MOTIVO  := cMotivo
		(cTempTable)->FORNEC  := cFornec600
		(cTempTable)->LOJA    := cLoja600
		(cTempTable)->DTANFN  := dAnl600
		(cTempTable)->LAUDO   := cLaudo600
    	(cTempTable)->CODESTO := cProdt600
    	(cTempTable)->ALMOXA  := cAumox600
	Else
		(cTempTable)->PARECER := Space(TamSx3("TR4_PAREC")[1])
		(cTempTable)->SULCO   := 0
		(cTempTable)->MOTIVO  := Space(TamSx3("TR4_MOTIVO")[1])
		(cTempTable)->FORNEC  := Space(TamSx3("TR4_FORNEC")[1])
		(cTempTable)->LOJA    := Space(TamSx3("TR4_LOJA"  )[1])
		(cTempTable)->DTANFN  := CtoD("  /  /    ")
		(cTempTable)->LAUDO   := Space(TamSx3("TR4_LAUDO" )[1])
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fUpdStatus
Faz o update no Status para ser utilizado dentro do MNTA600 no momento
da rotina automática.

@author Maicon André Pinheiro
@since 11/05/2017
@version MP12
@Sample MNTA080
/*/
//---------------------------------------------------------------------
Static Function fUpdStatus(cCodBem,cStatus,lFazBKP)

	dbSelectArea("ST9")
	dbSetOrder(1)
	If dbSeek(xFilial("ST9") + cCodBem)
		If lFazBKP
			cStatusBKP := ST9->T9_STATUS
		EndIf
		RecLock("ST9",.F.)
		ST9->T9_STATUS := cStatus
		MsUnLock()
	EndIf

Return .F.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT080FCT
Filtro da consulta NG11
@author douglas.constancio
@since 10/07/2017
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT080FCT()

	LocaL lFilBrw := .F.

	If Type( "M->T9_CCUSTO" ) == "C"
		lFilBrw := SHB->HB_CC == M->T9_CCUSTO
	Else
		lFilBrw := .T.
	EndIf

Return lFilBrw

//------------------------------------------------------------------------------
/*/{Protheus.doc} fBaixaATF
Faz a baixa do ativo

@author Maicon André Pinheiro
@since 19/04/2017
@version P12
@return
/*/
//------------------------------------------------------------------------------
Static Function fBaixaATF(cCodImob)

	Local aCab      := {}
	Local aAtivo    := {}
	Local aArea     := GetArea()
	Local cBase     := ""
	Local cItem     := ""
	Local cTpSaldo  := ""
	Local cTipo     := ""
	Local lRet      := .T.

	Private lMsErroAuto := .F.
	Private lMsHelpAuto := .T.

	cBase     := SubStr(cCodImob,1,TamSX3("N1_CBASE")[1])
	cItem     := SubStr(cCodImob,TamSX3("N1_CBASE")[1] + 1,Len(cCodImob))
	cTipo     := NGSeek("SN3",cCodImob,1,"N3_TIPO")
	cTpSaldo  := NGSeek("SN3",cCodImob,1,"N3_TPSALDO")

	aCab   := {{"FN6_FILIAL",xFilial("FN6"),NIL},;
		       {"FN6_CBASE" ,cBase         ,NIL},;
			   {"FN6_CITEM" ,cItem         ,NIL},;
			   {"FN6_MOTIVO",SubStr(cMotivoATF,1,2),NIL},;
			   {"FN6_BAIXA" ,100           ,NIL},;
			   {"FN6_QTDBX" ,1             ,NIL},;
			   {"FN6_DTBAIX",M->T9_DTBAIXA ,NIL},;
			   {"FN6_DEPREC",cMetDepr      ,NIL},;
			   {"FN6_NUMNF"	,cNotaFical    ,NIL},;
			   {"FN6_SERIE"	,cSerieNota    ,NIL},;
			   {"FN6_PERCBX",100		   ,NIL},;
			   {"FN6_VLVEND",0             ,NIL},;
			   {"FN6_VALNF" ,nValorNota    ,NIL}}

	aAtivo := {{"N3_FILIAL" ,xFilial("SN3"),NIL},;
		       {"N3_CBASE"  ,cBase         ,NIL},;
		       {"N3_ITEM"   ,cItem         ,NIL},;
		       {"N3_TIPO"   ,cTipo         ,NIL},;
		       {"N3_BAIXA"  ,0             ,NIL},;
		       {"N3_TPSALDO",cTpSaldo      ,NIL}}

	MsExecAuto({|a,b,c,d,e,f|ATFA036(a,b,c,d,e,f)},aCab,aAtivo,3,,.T.,{})

	If lMsErroAuto
		lRet := .F.
		MostraErro()
	EndIf

	RestArea(aArea)

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} ValCancel
Função de validação de quando cancelado o processo.
@type static

@author Guilherme Freudenburg
@since 26/03/2018

@param  oModel, Objeto, Objeto principal da rotina, contem os valores informados.
@return lRet  , Lógico, Retorna a verificação do ponto de entrada.
/*/
//------------------------------------------------------------------------------
Static Function ValCancel( oModel )

	Local lRet := .T.

	RollBackSX8()

	If ExistBlock( 'MNTA080' )
		lRet := ExecBlock( 'MNTA080', .F., .F., {oModel, 'FORMCANCEL', 'MNTA080'} )
	EndIf

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080FOR
Função executada para identificar se possui algum fornecedor que não esteja bloqueado para o código informado.

@param cFornec, Caracter, Indica o fornecedor informado.
@param cLoja, Caracter, Indica a loja informada.

@author Jean Pytter da Costa
@since 15/05/2018
@version P12
@return lRet, Lógico, Retorna se possui Fornecedor desbloqueado.
/*/
//------------------------------------------------------------------------------
Static Function MNTA080FOR( cFornec, cLoja )

	Local lRet 		:= .F.
	Local aArea 	:= GetArea()
	Local aAreaSA2	:= SA2->( GetArea() )

	Default cFornec := ""
	Default cLoja 	:= ""

	dbSelectArea( "SA2" )
	dbSetOrder( 1 )
	dbSeek( xFilial( "SA2" ) + cFornec )
	While SA2->( !eof() ) .And. xFilial( "SA2" ) == SA2->A2_FILIAL .And. cFornec == SA2->A2_COD
		If SA2->A2_MSBLQL != '1'
			lRet := .T.
			Exit
		EndIf
		dbSkip()
	EndDo

	RestArea( aAreaSA2 )
	RestArea( aArea )

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080CLI
Função executada para identificar se possui algum Cliente que não esteja bloqueado para o código informado.

@param cCodCli, Caracter, Indica o Cliente informado.
@author Tainã Alberto Cardoso
@since 29/11/2019
@version P12
@return lRet, Lógico, Retorna se possui Cliente desbloqueado.
/*/
//------------------------------------------------------------------------------
Static Function MNTA080CLI( cCodCli )

	Local lRet 		:= .F.
	Local aAreaSA1	:= SA1->( GetArea() )

	Default cCodCli := ""

	dbSelectArea( "SA1" )
	dbSetOrder( 1 )
	dbSeek( xFilial( "SA1" ) + cCodCli )
	While SA1->( !Eof() ) .And. xFilial( "SA1" ) == SA1->A1_FILIAL .And. cCodCli == SA1->A1_COD
		If SA1->A1_MSBLQL != '1'
			lRet := .T.
			Exit
		EndIf
		dbSkip()
	EndDo

	RestArea( aAreaSA1 )

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} fVlCounter
Valida contador com data posterior ao da baixa

@author Maria Elisandra de Paula
@since 11/05/2020
@param cEquipment, string, Código do bem
@param dDtBaixa, data da baixa
@param cHoraBaixa, hora da baixa
@return lRet, lógico, se validação ok
/*/
//------------------------------------------------------------------------------
Static Function fVlCounter( cEquipment, dDtBaixa, cHoraBaixa )

	Local lRet      := .T.
	Local cAliasQry := GetNextAlias()

	BeginSql Alias cAliasQry
		SELECT COUNT(TP_POSCONT) QTD
		FROM %Table:STP% STP
		WHERE STP.TP_FILIAL = %xFilial:STP%
			AND STP.TP_CODBEM = %Exp:cEquipment%
			AND STP.TP_DTLEITU || STP.TP_HORA > %Exp:dtos(dDtBaixa) + cHoraBaixa%
			AND STP.%NotDel%
	EndSql

	lRet := (cAliasQry)->QTD == 0

	(cAliasQry)->(dbCloseArea())

	If lRet
		cAliasQry := GetNextAlias()

		BeginSql Alias cAliasQry
			SELECT COUNT(TPP_POSCON) QTD
			FROM %Table:TPP% TPP
			WHERE TPP.TPP_FILIAL = %xFilial:TPP%
				AND TPP.TPP_CODBEM = %Exp:cEquipment%
				AND TPP.TPP_DTLEIT || TPP.TPP_HORA > %Exp:dtos(dDtBaixa) + cHoraBaixa%
				AND TPP.%NotDel%
		EndSql

		lRet := (cAliasQry)->QTD == 0

		(cAliasQry)->(dbCloseArea())
	EndIf

	If !lRet
		MsgInfo( STR0454, STR0109 ) // "Há lançamentos de contador posteriores a data/hora da baixa. Informe uma data/hora válida."#Não conformidade
	EndIf

	//-----------------------------
	// Valida histórico do contador
	//-----------------------------
	If lRet
		lRet := NGCHKHISTO( cEquipment, dDtBaixa, M->T9_POSCONT, cHoraBaixa,1,,.T. )
	EndIf

	//---------------------------------
	// Valida variação dia do contador
	//---------------------------------
	If lRet
		lRet := NGVALIVARD( cEquipment, M->T9_POSCONT, dDtBaixa, cHoraBaixa,1,.T.)
	EndIf

Return lRet

//----------------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA080ATF
Verifica se permite a alteração do Bem/Ativo integrado.
@type function

@author Alexandre Santos
@since 26/03/2021

@param cCodeN1, string, Código do Ativo, composto por N1_CBASE + N1_ITEM.
@param cCodeT9, string, Código do Bem.

@return boolean, Define se o campo Bem/Ativo integrado deve ser apresentado aberto para edição.
/*/
//----------------------------------------------------------------------------------------
Function MNTA080ATF( cCodeN1, cCodeT9 )

	Local nSizeN1  := TamSX3( 'N1_CBASE' )[1]
	Local cAlsN4   := GetNextAlias()
	Local cAlsTJ   := ''
	Local cCBaseN1 := SubStr( cCodeN1, 1, nSizeN1 )
	Local cItemN1  := SubStr( cCodeN1, nSizeN1 + 1 )
	Local lRet     := .T.

	/*
		Verifica se Bem/Ativo possui Movimentação de C.C. ou Tranferência de Filial após o inicio do vinculo.
		Caso exista impede a alteração do vinculo.
	*/
	BeginSQL Alias cAlsN4

		SELECT
			COUNT( SN4.N4_CBASE ) AS QTDE
		FROM
			%table:SN4% SN4
		LEFT JOIN
			%table:ST9% ST9 ON
				ST9.T9_CODIMOB = SN4.N4_CBASE || SN4.N4_ITEM AND
				ST9.T9_FILIAL  = %xFilial:ST9%               AND
				ST9.%NotDel%
		LEFT JOIN
			%table:TPN% TPN ON
				TPN.TPN_DTINIC = SN4.N4_DATA   AND
				TPN.TPN_HRINIC = SN4.N4_HORA   AND
				TPN.TPN_CODBEM = ST9.T9_CODBEM AND
				TPN.TPN_FILIAL = %xFilial:TPN% AND
				TPN.%NotDel%
		LEFT JOIN
			%table:TQ2% TQ2 ON
				TQ2.TQ2_DATATR = SN4.N4_DATA   AND
				TQ2.TQ2_HORATR = SN4.N4_HORA   AND
				TQ2.TQ2_CODBEM = ST9.T9_CODBEM AND
				TQ2.TQ2_FILIAL = %xFilial:TQ2% AND
				TQ2.%NotDel%
		WHERE
			SN4.N4_CBASE  = %exp:cCBaseN1% AND
			SN4.N4_ITEM   = %exp:cItemN1%  AND
			SN4.N4_FILIAL = %xFilial:SN4%  AND
			SN4.N4_OCORR  = '03'           AND
			SN4.%NotDel%

	EndSQL

	lRet := ( (cAlsN4)->( !EoF() ) .And. (cAlsN4)->QTDE == 0 )

	(cAlsN4)->( dbCloseArea() )

	If lRet

		cAlsTJ := GetNextAlias()

		/*
		 	Verifica se Bem/Ativo possui O.S. de Reforma já finalizada que gerou ampliação patrimonial.
			Caso exista impede a alteração do vinculo.
		*/
		BeginSQL Alias cAlsTJ

			SELECT
				COUNT( STJ.TJ_ORDEM ) AS QTDE
			FROM
				%table:STJ% STJ
			WHERE
				STJ.TJ_CODBEM  = %exp:cCodeT9% AND
				STJ.TJ_FILIAL  = %xFilial:STJ% AND
				STJ.TJ_TERMINO = 'S'           AND
				STJ.TJ_VALATF  = 'S'           AND
				STJ.%NotDel%

		EndSQL

		lRet := ( (cAlsTJ)->( !EoF() ) .And. (cAlsTJ)->QTDE == 0 )

		(cAlsTJ)->( dbCloseArea() )

	EndIf

Return lRet

//-----------------------------------------------
/*/{Protheus.doc} MntBarCode
Validação do campo Código de Barras/QR

@author Maria Elisandra
@since 01/12/2021

@param cCodBem, string, Código do Bem.
@param cBarCode, string, Código de barras
@param lShowHelp, bool, Mostra ou não o Help.

@return boolean, se o conteúdo do campo está correto
/*/
//-----------------------------------------------
Function MntBarCode( cCodBem, cBarCode, lShowHelp )

	Local lRet      := .T.
	Local cAliasQry := ''

	//------------------------------------------------------------
	// Verifica se outro bem possui o mesmo código de barras / QR
	//------------------------------------------------------------
	If !Empty( cBarCode )

		cAliasQry := GetNextAlias()

		BeginSql Alias cAliasQry

		SELECT COUNT( ST9.T9_BARCODE ) QUANT
		FROM %Table:ST9% ST9
		WHERE ST9.T9_FILIAL = %xFilial:ST9%
			AND ST9.T9_BARCODE = %Exp:cBarCode%
			AND  ST9.T9_CODBEM <> %Exp:cCodBem%
			AND ST9.%NotDel%
		
		EndSql

		If (cAliasQry)->QUANT > 0
			lRet := .F.
			If lShowHelp
				Help( '' ,1,'JAGRAVADO',,NGRETTITULO('T9_BARCODE'),5,1)
			EndIf
		EndIf

		(cAliasQry)->(dbCloseArea())

	EndIf

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} OriginNf
Verifica se pneu foi gerado a partir de uma nf

@author Maria Elisandra de Paula
@since 28/01/2021

@param cTire, string, código do pneu

@return boolean, se pneu foi gerado a partir de uma nf
/*/
//------------------------------------------------------------------------------
Static Function OriginNf( cTire )

	Local lRet      := .F.
	Local cAliasQry := GetNextAlias()

	BeginSql Alias cAliasQry

		SELECT COUNT( TQZ.TQZ_CODBEM ) TOTAL
			FROM %Table:TQZ% TQZ
		WHERE   TQZ.TQZ_FILIAL = %xFilial:TQZ%
			AND TQZ.TQZ_CODBEM = %exp:cTire%
			AND TQZ.TQZ_ORIGEM = 'SD1'
			AND TQZ.%NotDel%

	EndSql

	lRet := (cAliasQry)->TOTAL > 0

	(cAliasQry)->( dbCloseArea() )

Return lRet
