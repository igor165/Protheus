#INCLUDE "MNTA608.ch"
#INCLUDE "PROTHEUS.CH"

#DEFINE _nVERSAO 1 //Versao do fonte

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA608
Recebimento Fisico dos Pneus
@author Marcos Wagner Junior
@since 03/05/2007
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTA608()

	//+-------------------------------------------------------------------+
	//| Armazena variaveis p/ devolucao (NGRIGHTCLICK) 				  	  |
	//+-------------------------------------------------------------------+
	Local aNGBEGINPRM := NGBEGINPRM(_nVERSAO)
	Local oTmpTbl1

	Private asMenu

	If NGSX2MODO("ST9") == "C" .OR. NGSX2MODO("TQS") == "C"
		MsgInfo(STR0020,STR0012) //"A rotina não funcionará com a tabela ST9 e/ou TQS compartilhada!"###"ATENÇÃO"
		NGRETURNPRM(aNGBEGINPRM)
		Return
	Endif

	Private aRotina    := MenuDef()
	Private cCadastro  := OemtoAnsi(STR0004) //"Recebimento de Carcaça de Pneus"
	Private aChkDel    := {}
	Private nSelec     := 0
	Private cAnaTec    := GetMv("MV_NGSTAAT")
	Private cBEMTR     := AllTrim(GetMv("MV_NGBEMTR"))
	Private cFilialST9 := FwCodFil()
	Private lNovoBrw   := If(TcSrvType() == "AS/400" .OR. TcSrvType() == "iSeries",.F.,.T.)

	Private cTRBB   := GetNextAlias() //Alias Tab. Temp. 1

	aDBF := {}
		Aadd(aDBF,{"ASSI"  , "C" , 02,0 })
		Aadd(aDBF,{"CODBEM", "C" , 16,0 })
		Aadd(aDBF,{"MEDIDA", "C" , 40,0 })
		Aadd(aDBF,{"TIPMOD", "C" , 40,0 })

	//Instancia classe FWTemporaryTable
	oTmpTbl1:= FWTemporaryTable():New( cTRBB, aDBF )
	//Adiciona os Indices
	oTmpTbl1:AddIndex( "Ind01" , {"CODBEM"} )
	//Cria a tabela temporaria
	oTmpTbl1:Create()

	Dbselectarea("TRF")
	Dbsetorder(1)

	If lNovoBrw
		dDtaReD := CtoD('  /  /  ')
		cFilMbroTRF := "TRF_FILIAL != '"+xFilial('TRF')+"' And TRF_DTREC = '"+DtoS(dDtaReD)+"'"
		MBROWSE(6,1,22,75,"TRF",,,,,,,,,,,,,,cFilMbroTRF)
		Dbselectarea("TRF")
		Set Filter TO
		Dbsetorder(1)
	Else
		nINDTR2    := IndexOrd()
		aIndTR2    := {}
		bFiltraBrw := {|| Nil}
		condTR2    := 'DtoS(TRF->TRF_DTREC) = " " '
		bFiltraBrw := {|| FilBrowse("TRF",@aIndTR2,@condTR2)}
		Eval(bFiltraBrw)
		MBROWSE(6,1,22,75,"TRF")
		aEval(aIndTR2,{|x| Ferase(x[1]+OrdBagExt())})
		Dbselectarea("TRF")
		Set Filter TO
		Dbsetorder(1)
		Dbseek(xFILIAL("TRF"))
	EndIf

	oTmpTbl1:Delete()

	//+-------------------------------------------------------------------+
	//| Devolve variaveis armazenadas (NGRIGHTCLICK)                      |
	//+-------------------------------------------------------------------+
	NGRETURNPRM(aNGBEGINPRM)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNA608MB
Monta o arquivo temporario inicial mostrado no browse
@author Marcos Wagner Junior
@since 03/05/2007
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNA608MB()

	Private lInverte := .F.
	Private cMarca   := GetMark()
	Private aCols    := {}
	Private oMark

	aAdd(aMark,{"ASSI"   ,NIL," "    ,})
	aAdd(aMark,{"CODBEM" ,NIL,STR0006,}) //"Pneu"
	aAdd(aMark,{"MEDIDA" ,NIL,STR0007,}) //"Medida"
	aAdd(aMark,{"TIPMOD" ,NIL,STR0008,}) //"Tipo Modelo"

	/*cAliasQry := GetNextAlias()
	cQuery := " SELECT TRG.TRG_CODBEM,TRG.TRG_MEDIDA,TRG.TRG_TIPMOD, "
	cQuery += "        (SELECT TQR.TQR_DESMOD FROM "+RetSqlName("TQR")+" TQR "+"WHERE TQR.D_E_L_E_T_ <> '*'"
	cQuery += "        AND TQR.TQR_TIPMOD = TRG.TRG_TIPMOD"
	cQuery += "        AND TQR.TQR_FILIAL = '"+xFilial("TQR")+"') AS TIPMOD,"
	cQuery += "        (SELECT TQT.TQT_DESMED FROM "+RetSqlName("TQT")+" TQT "+"WHERE TQT.D_E_L_E_T_ <> '*'"
	cQuery += "        AND TQT.TQT_MEDIDA = TRG.TRG_MEDIDA) AS MEDIDA"
	cQuery += " FROM " + RetSqlName("TRG")+" TRG "
	cQuery += " WHERE TRG.TRG_NUMENV = '"+TRF->TRF_NUMENV+"'"
	cQuery += " AND TRG.TRG_FILIAL = '"+TRF->TRF_FILIAL+"'"
	cQuery += " AND TRG.D_E_L_E_T_ <> '*' "
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)*/

	cAliasQry := GetNextAlias()
	cQuery := " SELECT TRG.TRG_CODBEM, TRG.TRG_MEDIDA, TRG.TRG_TIPMOD, TQR.TQR_DESMOD, TQT.TQT_DESMED "
    cQuery += "  FROM "+ RetSqlName("TRG")+" TRG "
    cQuery += "  INNER JOIN " +RetSqlName("TQR")+" TQR "
    cQuery += "          ON TQR.TQR_TIPMOD = TRG.TRG_TIPMOD"
    cQuery += "            AND TQR.TQR_FILIAL = " + ValToSql(xFilial("TQR"))
    cQuery += "            AND TQR.D_E_L_E_T_ <> '*' "
    cQuery += "  INNER JOIN  " + RetSqlName("TQT")+" TQT "
    cQuery += "          ON TQT.TQT_MEDIDA = TRG.TRG_MEDIDA "
    cQuery += "             AND TQT.D_E_L_E_T_ <> '*'"
    cQuery += "	 WHERE  TRG.TRG_NUMENV = " + ValToSql(TRF->TRF_NUMENV)
    cQuery += "     AND TRG.TRG_FILIAL = " + ValToSql(TRF->TRF_FILIAL)
    cQuery += "     AND TRG.D_E_L_E_T_ <> '*' "
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

	DbSelectArea(cTRBB)
	DbGoTop()
	While !EoF()
		RecLock((cTRBB), .F.)
		DbDelete()
		MsUnLock(cTRBB)
		DbSkip()
	End

	DbSelectArea(cAliasQry)
	While !EoF()
		IncProc(STR0009,STR0010) //"Aguarde..."###"Processando Registros..."
		DbSelectArea(cTRBB)
		DbSetOrder(01)
		If !DbSeek((cAliasQry)->TRG_CODBEM)
			RecLock((cTRBB), .T.)
			(cTRBB)->CODBEM := (cAliasQry)->TRG_CODBEM
			(cTRBB)->MEDIDA := (cAliasQry)->TQT_DESMED
			(cTRBB)->TIPMOD := (cAliasQry)->TQR_DESMOD
			MsUnLock(cTRBB)
		Endif
		DbSelectArea(cAliasQry)
		DbSkip()
	End
	(cAliasQry)->(dbCloseArea())

	DbSelectArea(cTRBB)
	If Reccount() == 0
		MsgInfo(STR0011,STR0012) //"Nao existe dados para montar a tela de recebimento."###"ATENÇÃO"
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNA608VE
Inverte a marcacao
@author Marcos Wagner Junior
@since 03/05/2007
@version undefined
@param cMarca, characters
@type function
/*/
//---------------------------------------------------------------------
Function MNA608VE(cMarca)

	Dbselectarea(cTRBB)
	DbGotop()
	Procregua(LastRec())
	While !Eof()
		IncProc(STR0013+(cTRBB)->CODBEM) //"Marcando e/ou Desmarcando Pneus "
		RecLock((cTRBB),.F.)
		If (cTRBB)->ASSI = "  "
			(cTRBB)->ASSI := cMarca
		Else
			(cTRBB)->ASSI := "  "
		EndIf
		MsUnLock(cTRBB)
		DbSkip()
	End
	oMark:oBrowse:Refresh()
	DbGotop()

	nSelec := 0
	While !Eof()
		If (cTRBB)->ASSI != "  "
			nSelec++
		Endif
		dbSkip()
	End
	dbGoTop()
	M->TRF_QTDREC := nSelec
	oEnchoice:Refresh()

Return NIL

//---------------------------------------------------------------------
/*/{Protheus.doc} MNA608IN
Monta tela Pai e filho
@author Marcos Wagner Junior
@since 03/05/2007
@version undefined
@param cAlias, characters
@param nReg, numeric
@param nOpcX, numeric
@type function
/*/
//---------------------------------------------------------------------
Function MNA608IN(cAlias,nReg,nOpcX)

	Local aArea   := GetArea()
	Local aOldRot := aClone(aRotina)
	Local i
	Local bCampo

	Private oDlg, oGet,nLinNG, oMenu
	Private aVarNao := {}

	//+-------------------------------------------------------------------+
	//| Monta a entrada de dados do arquivo                          	  |
	//+-------------------------------------------------------------------+
	Private aMark 	  := {}
	Private lInverte 	  := .f.
	Private cMarca   	  := GetMark()
	Private aTELA[0][0],aGETS[0],aHeader[0],aCOLS[0],Continua,nUsado:=0
	Private aAC   := {STR0014,STR0015}, aCRA:= {STR0015,STR0016,STR0014} //"Abandona"###"Confirma"###"Confirma"###"Redigita"###"Abandona"
	Private aSize := MsAdvSize(,.f.,430), aObjects := {}

	aRotina := {{STR0001,"AxPesqui",0,1},; //"Pesquisar"
				{STR0002,"NGCAD01" ,0,2},; //"Visualizar"
				{STR0003,"NGCAD01" ,0,3},; //"Receber"
				{STR0003,"MNA608IN",0,4,0}} //"Receber"

	If nOpcx = 3
		nOpcx := 4
	EndIf

	Aadd(aObjects,{070,070,.t.,.t.})
	Aadd(aObjects,{100,100,.t.,.t.})

	aInfo := {aSize[1],aSize[2],aSize[3],aSize[4],0,0}
	aPosObj := MsObjSize(aInfo, aObjects,.t.)

	bCampo  := {|nCPO| Field(nCPO)}

	dbSelectArea(cALIAS)
	dbSetOrder(1)

	FOR i := 1 TO FCount()
		M->&(EVAL(bCampo,i)) := &(EVAL(bCampo,i))
		If nOPCX == 3    //INCLUIR
			IF     ValType(M->&(EVAL(bCampo,i))) == "C"
				M->&(EVAL(bCampo,i)) := SPACE(LEN(M->&(EVAL(bCampo,i))))
			ELSEIF ValType(M->&(EVAL(bCampo,i))) == "N"
				M->&(EVAL(bCampo,i)) := 0
			ELSEIF ValType(M->&(EVAL(bCampo,i))) == "D"
				M->&(EVAL(bCampo,i)) := cTod("  /  /  ")
			ELSEIF ValType(M->&(EVAL(bCampo,i))) == "L"
				M->&(EVAL(bCampo,i)) := .F.
			ELSEIF ValType(M->&(EVAL(bCampo,i))) == "M"
				M->&(EVAL(bCampo,i)) := SPACE(50)
			ENDIF
		Endif
	Next i

	aPos1 := {15,1,78,315}
	nOpca := 0
	MNA608MB()

	DbSelectarea(cTRBB)
	DbGotop()

	DbSelectArea("TRF")
	DEFINE MSDIALOG oDlg TITLE Ccadastro From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd PIXEL

	oEnchoice := Msmget():New("TRF", nReg, 4,,,,,aPosObj[1],,3)
	oEnchoice:oBox:Align := CONTROL_ALIGN_TOP

	oMark := MsSelect():New((cTRBB),"ASSI",,aMark,@lInverte,@cMarca,{aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],})
	oMark:oBrowse:lHasMark = .t.
	oMark:oBrowse:lCanAllMark := .t.
	oMark:bMark := { || MNA608MA(cMarca) }
	oMark:oBrowse:bAllMark := { || Processa({ || MNA608VE(cMarca) }) }

	NGPOPUP(asMenu,@oMenu)
	oDlg:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}
	oEnchoice:oBox:bRClicked := { |o,x,y| oMenu:Activate(x,y,oDlg)}

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{|| IF(MNT608ALL(),(nOpca:=1,oDlg:End()),nOpca := 0)},{||nOpca:= 0,oDlg:End()}) CENTERED

	RestArea(aArea)
	dbGoTop()
	aRotina := aClone(aOldRot)

Return nOPCA

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT608ALL
Grava dados na TR3, ST9,
@author Marcos Wagner Junior
@since 03/05/2007
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT608ALL()

	Local nFor,xy
	Local nEnviado := nRecebido := 0
	Local oTmpTbl2
	Local oTmpTbl3

	Private lGera := .f.
	Private aVetInr := {}

	Private cTRBST9 := GetNextAlias() //Alias Tab. Temp. 2
	Private cTRBTQS := GetNextAlias() //Alias Tab. Temp. 3

	If Empty(M->TRF_DTREC) .OR. Empty(M->TRF_HRREC) .OR. Empty(M->TRF_CCUSTO)
		MsgStop(STR0017,STR0012) //"Um ou mais campos referentes ao recebimento não foram preenchidos."###"ATENÇÃO"
		Return .f.
	Endif

	DbSelectArea(cTRBB)
	DbGotop()
	While !Eof()
		nEnviado++
		If !Empty((cTRBB)->ASSI)
			lGera := .t.
			nRecebido++
		Endif
		DbSkip()
	End
	dbGoTop()
	If !lGera
		MsgStop(STR0018) //"Não existe(m) pneu(s) selecionado(s) para gerar o recebimento!"
		Return .f.
	Endif
	If nEnviado != nRecebido
		MsgStop(STR0021) //"Quantidade de pneus enviados difere da quantidade de pneus recebidos."
		Return .f.
	Endif

	dbSelectArea("TRF")
	dbSetOrder(01)
	If dbSeek(xFilial("TRF")+M->TRF_NUMENV)
		RecLock("TRF",.f.)
		TRF->TRF_DTREC  := M->TRF_DTREC
		TRF->TRF_HRREC  := M->TRF_HRREC
		TRF->TRF_QTDREC := M->TRF_QTDREC
		TRF->TRF_CCUSTO := M->TRF_CCUSTO
		MsUnLock("TRF")
	Endif

	DbSelectArea(cTRBB)
	dbGoTop()
	While !Eof()
		If !Empty((cTRBB)->ASSI)

			DbSelectArea("ST9")
			DbSetOrder(16)
			If DbSeek((cTRBB)->CODBEM+"A")
				cFilOld := ST9->T9_FILIAL
				RecLock("ST9",.F.)
				ST9->T9_SITBEM  := 'T'
				ST9->T9_STATUS	:=	cBEMTR
				MsUnLock("ST9")

				aDBFXTRB := DbStruct()

				//Instancia classe FWTemporaryTable
				oTmpTbl2:= FWTemporaryTable():New( cTRBST9, aDBFXTRB )
				//Adiciona os Indices
				oTmpTbl2:AddIndex( "Ind01" , {"T9_CODBEM"} )
				//Cria a tabela temporaria
				oTmpTbl2:Create()

				Dbselectarea(cTRBST9)
				RecLock((cTRBST9),.T.)
				DbSelectArea("ST9")
				For nFor := 1 To Fcount()
					ny   := "(cTRBST9)->" + Fieldname(nFor)
					nx   := "ST9->" + Fieldname(nFoR)
					&ny. := &nx.
				Next nFor

				cFilT9 := ' '
				If ngsx2modo("ST9") == 'E'
					cFilT9 := cFilialST9
				EndIf

				Dbselectarea("ST9")
				DbSetOrder(01)
				If DbSeek(cFilT9+(cTRBB)->CODBEM)
					RecLock("ST9",.F.)
				Else
					RecLock("ST9",.T.)
				Endif

				DbSelectArea(cTRBST9)
				For xy := 1 To Fcount()
					ny   := "ST9->" + Fieldname(xy)
					nx   := "(cTRBST9)->" + Fieldname(xy)
					If "_FILIAL"$Upper(ny)
						&ny. := cFilT9
					ElseIf "_CCUSTO"$Upper(ny)
						&ny. := M->TRF_CCUSTO
					ElseIf "_SITBEM"$Upper(ny)
						&ny. := "A"
					ElseIf "_STATUS"$Upper(ny)
						&ny. := cAnaTec
					Else
						&ny. := &nx.
					Endif
				Next xy

				ST9->(MsUnlock())
				oTmpTbl2:Delete()

				//cria um registro identico na TQS para a nova filial
				DbSelectArea("TQS")
				DbSetOrder(1)
				If DbSeek(cFILOLD+(cTRBB)->CODBEM)

					aDBFXTRB := DbStruct()

					//Instancia classe FWTemporaryTable
					oTmpTbl3:= FWTemporaryTable():New( cTRBTQS, aDBFXTRB )
					//Adiciona os Indices
					oTmpTbl3:AddIndex( "Ind01" , {"TQS_FILIAL","TQS_CODBEM"} )
					//Cria a tabela temporaria
					oTmpTbl3:Create()

					Dbselectarea(cTRBTQS)
					RecLock((cTRBTQS),.T.)
					DbSelectArea("TQS")
					For nFor := 1 To Fcount()
						ny   := "(cTRBTQS)->" + Fieldname(nFor)
						nx   := "TQS->" + Fieldname(nFoR)
						&ny. := &nx.
					Next nFor

					Dbselectarea("TQS")
					DbSetOrder(01)
					If DbSeek(cFilT9+(cTRBB)->CODBEM)
						RecLock("TQS",.F.)
					Else
						RecLock("TQS",.T.)
					Endif

					DbSelectArea(cTRBTQS)
					For xy := 1 To Fcount()
						ny   := "TQS->" + Fieldname(xy)
						nx   := "(cTRBTQS)->" + Fieldname(xy)
						If "_FILIAL"$Upper(ny)
							&ny. := cFilT9
						Else
							&ny. := &nx.
						Endif
					Next xy

					TQS->(MsUnlock())
					oTmpTbl3:Delete()
				EndIf
			Endif
		Endif
		dbSelectArea(cTRBB)
		dbSkip()
	End

Return .t.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNA608MA
Marca a linha e atualiza os dados da Qtde Recebida
@author Marcos Wagner Junior
@since 03/05/2007
@version undefined
@param cMarca, characters
@type function
/*/
//---------------------------------------------------------------------
Function MNA608MA(cMarca)

	Local cFieldMarca := "ASSI"

	If IsMark(cFieldMarca,cMarca,lInverte)
		nRecno  := Recno()
		nSelec  := 0
		DbSelectArea(cTRBB)
		DbGotop()
		Do While !Eof()
			If !Empty( (cTRBB)->ASSI )
				nSelec ++
			EndIf
			Dbskip()
		EndDo
		If nSelec > 1
			DbSelectArea(cTRBB)
			If DbSeek((cTRBB)->CODBEM)
				RecLock((cTRBB),.f.)
				(cTRBB)->ASSI := Space(02)
				MsUnLock(cTRBB)
			EndIf
		EndIf
		DbGoTo(nRecno)
	Else
		nSelec --
	EndIf

	M->TRF_QTDREC := nSelec
	oEnchoice:Refresh()

Return .t.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT608HR
Valida hora
@author Evaldo Cevinscki Jr.
@since 15/02/2007
@version undefined
@param dDTREC, date
@param cHRREC, characters
@type function
/*/
//---------------------------------------------------------------------
Function MNT608HR(dDTREC,cHRREC)

	If dDTREC == dDATABASE
		If cHRREC > TIME()
			MsgInfo(STR0019,STR0012) //"Hora do Recebimento não pode ser maior que a hora atual!"###"ATENÇÃO"
			Return .f.
		EndIf
	EndIf

Return .t.

Function MNT608DISP(cCp)

	Local dDTREC := CtoD("  /  /  ")
	Local cHRREC := " "

	If Altera
		dDTREC := dDATABASE
		cHRREC := Time()
	EndIf
	If cCp == "DT"
		Return dDTREC
	ElseIf cCp == "HR"
		Return cHRREC
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.
@author Rafael Diogo Richter
@since 02/02/2008
@version undefined
@return Array com opcoes da rotina.
@obs ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.
@type function
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina :=	{{STR0001,"AxPesqui",0,1},; //"Pesquisar"
						 {STR0002,"NGCAD01" ,0,2},; //"Visualizar"
						 {STR0003,"MNA608IN",0,4,0}}//"Receber"

	//+----------------------------------------------------------+
	//	Parametros do array a Rotina:                 	     	 |
	//| 1. Nome a aparecer no cabecalho                          |
	//| 2. Nome da Rotina associada                              |
	//| 3. Reservado                                             |
	//| 4. Tipo de Transação a ser efetuada:                     |
	//|    1 - Pesquisa e Posiciona em um Banco de Dados         |
	//|    2 - Simplesmente Mostra os Campos                     |
	//|    3 - Inclui registros no Bancos de Dados               |
	//|    4 - Altera o registro corrente                        |
	//|    5 - Remove o registro corrente do Banco de Dados      |
	//| 5. Nivel de acesso                                       |
	//| 6. Habilita Menu Funcional                 		     	 |
	//+----------------------------------------------------------+


Return aRotina
