#INCLUDE "PROTHEUS.CH"

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNTV003
Calcula o tempo de reparo das O.S. CORRETIVAS conforme parametros.
em relacao aos parametros

@param De_Data      , Date     , Data início
@param Ate_Data     , Date     , Ate data
@param De_Bem       , Caracter , De bem início
@param [Ate_Bem]    , Caracter , Ate bem fim
@param De_Ccusto    , Caracter , De centro de custo
@param [Ate_Ccusto] , Caracter , Ate centro de custo
@param De_CenTra    , Caracter , De centro de trabalho
@param [Ate_CenTra] , Caracter , Ate centro de trabalho
@param Con_SobOS    , Caracter , Determina se considera sobreposição de OS.
@param Con_Parada   , Caracter , Determina se considera apenas OS com parada.

@author Inacio Luiz Kolling
@since 14/11/2008
@version P12
@return nTotRep, Numérico, Quantidade de horas de reparo
/*/
//------------------------------------------------------------------------------
Function MNTV003(De_Data,Ate_Data,De_Bem,Ate_Bem,De_Ccusto,Ate_Ccusto,;
                 De_CenTra,Ate_CenTra,Con_SobOS,Con_Parada)

	Local aAreaOLD := GetArea() //Salva área posicionada
	Local aTRep	   := {} // Adiciona registros pesquisados
	Local aParams  := {} // Salva parâmetros incluídos
	Local aWhere   := { '%%', '%%' }
	Local aFields  := { '%%', '%%' }
	Local nQtdTR   := 0 // Resultado parcial de hora
	Local nTotRep  := 0 // Resultado Total
	Local nX       := 0 // Contador
	Local cAliasQry:= GetNextAlias() // Alias para utilização em tabela temporária
	Local cCodIndic:= "MNTV003"
	Local cCodBem  := "" // Código do bem utilizado na comparação de sobreposição.
	Local cQueryTJ  := ''
	Local cQueryTS  := ''
	Local cFieldTJ  := ''
	Local cFieldTS  := ''
	Local cHora    := "" // Hora Fim utilizada na sobreposição.
	Local dData    := CToD("") // Data Fim utilizada na sobreposição de OS.

	Default De_Bem     := ""  // De bem início
	Default De_Ccusto  := ""  // De centro de custo
	Default De_CenTra  := ""  // De centro de trabalho
	Default Con_SobOS  := "2" // Determina se considera sobreposição de OS.
	Default Con_Parada := "2" // Determina se considera apenas OS com parada.

	// Armazena os Parâmetros
	If NGI6MVHIST()
		aParams := {}
		aAdd(aParams, {"DE_DATA"   , De_Data})
		aAdd(aParams, {"ATE_DATA"  , Ate_Data})
		aAdd(aParams, {"DE_BEM"    , De_Bem})
		aAdd(aParams, {"ATE_BEM"   , Ate_Bem})
		aAdd(aParams, {"DE_CCUSTO" , De_Ccusto})
		aAdd(aParams, {"ATE_CCUSTO", Ate_Ccusto})
		aAdd(aParams, {"DE_CENTRA" , De_CenTra})
		aAdd(aParams, {"ATE_CENTRA", Ate_CenTra})
		NGI6PREPPA(aParams, cCodIndic)
	EndIf

	If FindFunction( 'KPIDateOS' )

		// Define condição de data para consulta
		aWhere  := KPIDateOS( { De_Data, Ate_Data }, Con_Parada )

		// Define campos de data para consulta
		aFields := KPIDtOSFld( { De_Data, Ate_Data }, Con_Parada )

	Else

		cFieldTJ += '%'
		cFieldTJ += ' CASE '
		cFieldTJ += 	" WHEN STJ.TJ_DTPRINI <> ' ' THEN STJ.TJ_DTPRINI "
		cFieldTJ += 	' ELSE STJ.TJ_DTMRINI '
    	cFieldTJ += ' END AS IS_DATAINI, '
		cFieldTJ += ' CASE '
		cFieldTJ += 	" WHEN ( STJ.TJ_HOPRINI <> ' ' AND LTRIM( RTRIM( STJ.TJ_HOPRINI ) ) <> ':' ) THEN STJ.TJ_HOPRINI "
    	cFieldTJ += 	' ELSE STJ.TJ_HOMRINI '
		cFieldTJ += ' END AS IS_HORAINI, '
		cFieldTJ += ' CASE '
		cFieldTJ += 	" WHEN STJ.TJ_DTPRFIM <> ' ' THEN STJ.TJ_DTPRFIM "
		cFieldTJ += 	' ELSE STJ.TJ_DTMRFIM '
		cFieldTJ += ' END AS IS_DATAFIM, '
    	cFieldTJ += ' CASE '
		cFieldTJ += 	" WHEN ( STJ.TJ_HOPRFIM <> ' ' AND LTRIM( RTRIM( STJ.TJ_HOPRFIM ) ) <> ':' ) THEN STJ.TJ_HOPRFIM "
    	cFieldTJ += 	' ELSE STJ.TJ_HOMRFIM
    	cFieldTJ += ' END AS IS_HORAFIM '
		cFieldTJ += '%'

		cFieldTS += '%'
		cFieldTS += ' CASE '
		cFieldTS += 	" WHEN STS.TS_DTPRINI <> ' ' THEN STS.TS_DTPRINI "
		cFieldTS += 	' ELSE STS.TS_DTMRINI '
    	cFieldTS += ' END AS IS_DATAINI, '
		cFieldTS += ' CASE '
		cFieldTS += 	" WHEN ( STS.TS_HOPRINI <> ' ' AND LTRIM( RTRIM( STS.TS_HOPRINI ) ) <> ':' ) THEN STS.TS_HOPRINI "
    	cFieldTS += 	' ELSE STS.TS_HOMRINI '
		cFieldTS += ' END AS IS_HORAINI, '
		cFieldTS += ' CASE '
		cFieldTS += 	" WHEN STS.TS_DTPRFIM <> ' ' THEN STS.TS_DTPRFIM "
		cFieldTS += 	' ELSE STS.TS_DTMRFIM '
		cFieldTS += ' END AS IS_DATAFIM, '
    	cFieldTS += ' CASE '
		cFieldTS += 	" WHEN ( STS.TS_HOPRFIM <> ' ' AND LTRIM( RTRIM( STS.TS_HOPRFIM ) ) <> ':' ) THEN STS.TS_HOPRFIM "
		cFieldTS += 	' ELSE STS.TS_HOMRFIM '
		cFieldTS += ' END AS IS_HORAFIM '
		cFieldTS += '%'

		aFields := { cFieldTJ, cFieldTS }

		cQueryTJ += '%'
		cQueryTS += '%'

		If Con_Parada == '1' // Considera somente com Parada de OS.

			cQueryTJ += " AND STJ.TJ_DTPRINI <> ' ' AND STJ.TJ_HOPRINI <> ' ' "
			cQueryTJ += " AND STJ.TJ_DTPRFIM <> ' ' AND STJ.TJ_HOPRFIM <> ' ' "

			cQueryTS += " AND STS.TS_DTPRINI <> ' ' AND STS.TS_HOPRINI <> ' ' "
			cQueryTS += " AND STS.TS_DTPRFIM <> ' ' AND STS.TS_HOPRFIM <> ' ' "

		EndIf

		cQueryTJ += ' AND ( STJ.TJ_DTPRINI >= ' + ValToSQL( De_Data )  + ' OR '
		cQueryTJ +=	      ' STJ.TJ_DTMRINI >= ' + ValToSQL( De_Data )  + ' ) AND '
		cQueryTJ +=	     '( STJ.TJ_DTPRFIM <= ' + ValToSQL( Ate_Data ) + ' OR '
		cQueryTJ +=	      ' STJ.TJ_DTMRFIM <= ' + ValToSQL( Ate_Data ) + ' ) AND '

		cQueryTS += ' AND ( STS.TS_DTPRINI >= ' + ValToSQL( De_Data )  + ' OR '
		cQueryTS +=	      ' STS.TS_DTMRINI >= ' + ValToSQL( De_Data )  + ' ) AND '
		cQueryTS +=	     '( STS.TS_DTPRFIM <= ' + ValToSQL( Ate_Data ) + ' OR '
		cQueryTS +=	      ' STS.TS_DTMRFIM <= ' + ValToSQL( Ate_Data ) + ' ) AND '

		cQueryTJ += '%'
		cQueryTS += '%'

		aWhere := { cQueryTJ, cQueryTS }

	EndIf

	BeginSQL Alias cAliasQry

		SELECT
			STJ.TJ_CODBEM ,
			STJ.TJ_ORDEM  ,
			%exp:aFields[1]%
		FROM
			%table:STJ% STJ
		WHERE
			STJ.TJ_FILIAL= %xFilial:STJ% AND
			STJ.TJ_PLANO = '000000'      AND
			STJ.TJ_TIPOOS  = 'B'         AND
			STJ.TJ_TERMINO = 'S'         AND
			STJ.TJ_SITUACA = 'L'         AND
			( STJ.TJ_CODBEM  BETWEEN %exp:De_Bem%     AND %exp:Ate_Bem%    ) AND
			( STJ.TJ_CCUSTO  BETWEEN %exp:De_Ccusto%  AND %exp:Ate_Ccusto% ) AND
			( STJ.TJ_CENTRAB BETWEEN %exp:De_CenTra%  AND %exp:Ate_CenTra% ) AND
			STJ.%NotDel%
			%exp:aWhere[1]%

		UNION

			SELECT
				TS_CODBEM ,
				TS_ORDEM  ,
				%exp:aFields[2]%
			FROM
				%table:STS% STS
			WHERE
				STS.TS_FILIAL= %xFilial:STS% AND
				STS.TS_PLANO = '000000'      AND
				STS.TS_TIPOOS  = 'B'         AND
				STS.TS_TERMINO = 'S'         AND
				STS.TS_SITUACA = 'L'         AND
				( STS.TS_CODBEM  BETWEEN %exp:De_Bem%     AND %exp:Ate_Bem%    ) AND
				( STS.TS_CCUSTO  BETWEEN %exp:De_Ccusto%  AND %exp:Ate_Ccusto% ) AND
				( STS.TS_CENTRAB BETWEEN %exp:De_CenTra%  AND %exp:Ate_CenTra% ) AND
				STS.%NotDel%
				%exp:aWhere[2]%

		ORDER BY
			TJ_CODBEM ,
			IS_DATAINI,
			IS_DATAFIM,
			IS_HORAINI,
			IS_HORAFIM

	EndSQL

	NGI6PREPDA(cAliasQry, cCodIndic)

	dbSelectArea(cAliasQry)
	dbGoTop()
	While (cAliasQry)->(!Eof())
		If Con_SobOS == "1" // Caso considere sobreposição de OS.
			If cCodBem <> (cAliasQry)->TJ_CODBEM // Caso seja um bem diferente.
				nQtdTR  := NGCALCH100(SToD((cAliasQry)->IS_DATAINI),(cAliasQry)->IS_HORAINI,Stod((cAliasQry)->IS_DATAFIM),(cAliasQry)->IS_HORAFIM)
			Else // Caso seja o mesmo bem.
				If (cAliasQry)->IS_DATAINI + (cAliasQry)->IS_HORAINI <= DToS(dData) + cHora .And.;
					(cAliasQry)->IS_DATAFIM + (cAliasQry)->IS_HORAFIM >= DToS(dData) + cHora
					nQtdTR  := NGCALCH100(dData,cHora,SToD((cAliasQry)->IS_DATAFIM),(cAliasQry)->IS_HORAFIM)
				Else
					nQtdTR  := NGCALCH100(SToD((cAliasQry)->IS_DATAINI),(cAliasQry)->IS_HORAINI,Stod((cAliasQry)->IS_DATAFIM),(cAliasQry)->IS_HORAFIM)
				EndIf
			EndIf
			cCodBem := (cAliasQry)->TJ_CODBEM
			cHora   := (cAliasQry)->IS_HORAFIM
			dData   := SToD((cAliasQry)->IS_DATAFIM)
		Else
			nQtdTR := NGCALCH100(SToD((cAliasQry)->IS_DATAINI),(cAliasQry)->IS_HORAINI,;
					SToD((cAliasQry)->IS_DATAFIM),(cAliasQry)->IS_HORAFIM)
		EndIf

		nPos := Ascan(aTRep,{|x| x[1] == (cAliasQry)->TJ_CODBEM})
		If nPos = 0
			aAdd(aTRep,{(cAliasQry)->TJ_CODBEM,1,nQtdTR})
		Else
			aTRep[nPos,2] := aTRep[nPos,2] + 1
			aTRep[nPos,3] += nQtdTR
		EndIf

		(cAliasQry)->(DbSkip())
	End
	(cAliasQry)->(dbCloseArea())

	For nX:= 1 to Len(aTRep)
		If aTRep[nX,2] > 1
			nTotRep += aTRep[nX,3]
		EndIf
	Next nX

	NGI6PREPVA(cCodIndic, nTotRep)
	RestArea(aAreaOLD)

Return nTotRep
