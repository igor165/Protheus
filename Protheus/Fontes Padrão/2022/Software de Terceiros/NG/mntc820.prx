#INCLUDE 'PROTHEUS.CH'
#INCLUDE 'MNTC820.ch'

Static lRel12133 := GetRPORelease() >= '12.1.033'

//------------------------------------------------------------
/*/{Proteus.doc} MNTC820
Consulta do esquema de rodados em estrutura.
@type function

@author Alexandre Santos
@since  15/07/2021

@param  cCodeST9, string, Código do bem principal da estrutura.
@return
/*/
//------------------------------------------------------------
Function MNTC820( cCodeST9 )
   	
	Local _aArea := GetArea()
   	Local cCaption
  	Local nLargSay, oSay, oGet
   	Local oDlge
   	Local nInd1      := 0
   	Local nInd2      := 0
   	Local nInd3      := 0

    Private nMax     := 0
	Private aTFolder := {}
	Private aDsg820  := {}
	Private aStr820  := {}
	Private cFORMA   := Space(LEN(TQ0->TQ0_DESENH))
	Private cVTMod   := ''

	dbSelectArea( 'ST9' )
	dbSetOrder( 1 )
	dbSeek( xFilial( 'ST9' ) + cCodeST9 )
	
	cVTMod := ST9->T9_TIPMOD
	cFORMA := ST9->T9_CODFAMI

	// Carrega a estrutura de rodados do bem pai e seus filhos.
	fGetStruct( ST9->T9_CODBEM )

	For nInd1 := 1 To Len( aStr820 )

    	dbSelectArea( 'ST9' )
    	dbSetOrder( 1 )
    	dbSeek( xFilial( 'ST9' ) + aStr820[nInd1,1] )

      	// Carrega o desenho da estrutura do bem pai e seus filhos.
      	aRet := fGetDesign( ST9->T9_CODFAMI, ST9->T9_TIPMOD )
      
      	// Em caso de erro encerra o loop.
    	If !aRet[3]
    		Exit
		Else

			// Identificação do array
      		aAdd( aDsg820, { ST9->T9_CODBEM, aRet[1], aRet[2], {}, {}, {}, {}, {} } )

      	EndIf

		// Carrega estrutura do bem com os rodados.
		fLoadStr( nInd1 )
		
		// Carrega valores de tamanho e posições da estrutura visual.
		fSetVar( nInd1 )
      
   	Next nInd1

	If aScan( aDsg820, { |x| !Empty( x[8] ) } ) > 0
		
		DEFINE MSDIALOG odlge TITLE STR0041 FROM 130,80 To 580,874 Pixel
	
			oDlgE:lEscClose  := .F.
			oDlgE:lMaximized := .T.

			// Panel principal
			oPnlAll := TPanel():New( 0, 0, , oDlge, , , , , CLR_RED, 0, 0, .F., .F. )
			oPnlAll:Align := CONTROL_ALIGN_ALLCLIENT

				// Panel superior
				oPanelTop := TPanel():New( 0, 0, , oPnlAll, , , , , , 1, 15, .F., .F. )
				oPanelTop:Align := CONTROL_ALIGN_TOP
					
					@ 02,05 BUTTON STR0019 SIZE 65,10 PIXEL OF oPanelTop ACTION MNTA220DES( aStr820[oFolder:nOption,3], fGetModPad( aStr820[oFolder:nOption,3], aStr820[oFolder:nOption,4] )[2] )
					@ 02,75 BUTTON STR0025 SIZE 65,10 PIXEL OF oPanelTop ACTION fStartPrt( aDsg820 )

				// Panel inferior
				oPnlBot := TPanel():New( 0, 0, , oPnlAll, , , , , , 1, 30, .F., .F. )
				oPnlBot:Align := CONTROL_ALIGN_ALLCLIENT

					oFolder := TFolder():New( 0, 0, , , oPnlBot, , , , .T., , , )
					oFolder:Align := CONTROL_ALIGN_ALLCLIENT

						For nInd1 := 1 To Len( aStr820 ) 

							oFolder:AddItem( Trim( aStr820[nInd1,1] ) + ' - ' + Trim( aStr820[nInd1,2] ) +;
								IIf( Empty( aDsg820[nInd1,8] ), ' ( Não possui esquema de rodados )', '' ) )

							cScrBox := 'oScrBox' + cValToChar( nInd1 )
							&( cScrBox ) := TScrollBox():New( oFolder:aDialogs[nInd1], 27, 00, 187, 390, .T., .T., .T. )
							&( cScrBox ):Align := CONTROL_ALIGN_ALLCLIENT

							For nInd2 := 1 To Len( aDsg820[nInd1,8] )
								
								If aDsg820[nInd1,3,nInd2,1] > 1
								
									nINCOL := IIf( aDsg820[nInd1,3,nInd2,1] == 2, 26, 27 )
								
									For nInd3 := 2 To Len( aDsg820[nInd1,8,nInd2] ) - 1
										@ aDsg820[nInd1,8,nInd2,nInd3]+9,@ aDsg820[nInd1,8,nInd2,1]+25 To aDsg820[nInd1,8,nInd2,nInd3+1]+.5,aDsg820[nInd1,8,nInd2,1] + nINCOL Of &( cScrBox ) pixel
									Next nInd3
								
								EndIf
							
							Next nCL

							For nInd2 := 1 to Len( aDsg820[nInd1,7] )

								cSetGet  := "{ || '" + aDsg820[nInd1,7,nInd2,1] + "' }"
								
								oGet := TGet():New( aDsg820[nInd1,7,nInd2,2,1], aDsg820[nInd1,7,nInd2,2,2], &( cSetGet ), &( cScrBox ), aDsg820[nInd1,7,nInd2,8], ,;
									aDsg820[nInd1,7,nInd2,4], , , , , .F., , .T., , .F., { || .F. }, .F., .F., , .F., .F. )
							
							Next nInd2

							For nInd2 := 1 To Len( aDsg820[nInd1,3] )

								cCaption := IIf( aDsg820[nInd1,3,nInd2,12] == STR0023, aDsg820[nInd1,3,nInd2,12],;
									AllTrim( aDsg820[nInd1,3,nInd2,12]) + CHR( 167 ) + ' ' + STR0024 )
								
								cBlKSay1 := "{ || OemToAnsi( '" + cCaption + "' ) }"
								
								oSay := TSay():New( aDsg820[nInd1,8,nInd2,2]-8, aDsg820[nInd1,8,nInd2,1]+2, &( cBlkSay1 ), &( cScrBox ), , , .F., .F., .F., .T.,;
									CLR_HBLUE, , , , .F., .F., .F., .F., .F. )
								nLargSay := GetTextWidth( 0, cCaption ) / 1.8
								cCaption := oSay:cCaption

								For nInd3 := 1 To aDsg820[nInd1,3,nInd2,1]

									nINCOL    := aDsg820[nInd1,8,nInd2,1]
									cCaption  := aDsg820[nInd1,2,nInd2,nInd3+1]
									cBlKSay2  := "{|| OemToAnsi('"+cCaption+"')}"
									oSay2     := TSay():New(aDsg820[nInd1,8,nInd2,nInd3+1]+12.5,nINCOL+2,&cBlkSay2,&( cScrBox ),,, .F., .F., .F., .T.,CLR_HRED,,,, .F., .F., .F., .F., .F. )
									nLargSay2 := GetTextWidth(0,cCaption) / 1.8
									cCaption  := oSay2:cCaption

								Next nInd3

							Next nInd2
						
						Next nInd1

						oFolder:SetOption( 1 )

		ACTIVATE MSDIALOG odlge ON INIT EnchoiceBar(odlge,{||odlge:End()},{||odlge:End()})

	Else
		
		// Atenção ## Nenhum dos bens pertencentes a estrutura possuem esquema de rodados cadastrado.
		Help( , , STR0013, , STR0042, 1, 0 )
		
	EndIf

   	RestArea(_aArea)

Return

//------------------------------------------------------------
/*/{Proteus.doc} fGetStruct
Carrega informações sobre o esquema de rodados de todos os bens
contidos na estrutura.
@type function

@author Alexandre Santos
@since  15/07/2021

@param  cCode  , string, Código do bem pai da estrutura.
@return Nil
/*/
//------------------------------------------------------------
Static Function fGetStruct( cCode )

   	Local aAreaALL := GetArea()
   	Local aAreaST9 := ST9->( GetArea() )
   	Local aStruct1 := {}
   	Local nIndex   := 0
   	Local nPosArr  := 0

   	dbSelectArea( 'ST9' )
  	dbSetOrder( 1 )
   	dbSeek( xFilial( 'ST9' ) + cCode )

   	// Identificação do array
   	aAdd( aStr820, { cCode, ST9->T9_NOME, ST9->T9_CODFAMI, ST9->T9_TIPMOD, {} } )

   	// Posição no array referente ao bem.
   	nPosArr := Len( aStr820 )

   	// Recupera os componentes da estrutura
   	aStruct1 := NGCOMPEST( cCode, 'B', .F., .F. )

   	For nIndex := 1 To Len( aStruct1 )

      	dbSelectArea( 'ST9' )
      	dbSetOrder( 1 )
      	If dbSeek( xFilial( 'ST9' ) + aStruct1[nIndex] )

         	dbSelectArea( 'STC' )
         	dbSetOrder( 3 )
         	If dbSeek( xFilial( 'STC' ) + aStruct1[nIndex]  )

            	While STC->( !EoF() ) .And. xFilial( 'STC' ) == STC->TC_FILIAL .And.;
               		aStruct1[nIndex] == STC->TC_COMPONE

               		If STC->TC_TIPOEST == 'B' .And. STC->TC_CODBEM == cCode
                  
                  		If !Empty( STC->TC_LOCALIZ ) 
                     
                     		aAdd( aStr820[nPosArr,5], { STC->TC_LOCALIZ, aStruct1[nIndex], Space( Len( STZ->TZ_CAUSA ) ), ST9->T9_CODFAMI, STC->TC_CODBEM } )

                  		Else

                     		// Adiciona estrutura dos bens filhos ao array aStr820.
                     		fGetStruct( aStruct1[nIndex] )

                  		EndIf 

               		EndIf
               
               		STC->( dbSkip() )

            	End

         	EndIf

      	EndIf
      
   	Next nIndex

   	RestArea( aAreaST9 )
   	RestArea( aAreaALL )

Return

//------------------------------------------------------------
/*/{Proteus.doc} fGetDesign
Atribui detalhes do esquema de rodados ao array de controle.
@type function

@author Alexandre Santos
@since  15/07/2021

@param  cDesign, string, Código do desenho da estrutura.
@param  cModel , string, Código do modelo.
@return boolean, Indica que as inforamções da estrutura estão 
corretas.
/*/
//------------------------------------------------------------
Static Function fGetDesign( cDesign, cModel )

  	Local aReturn  := { {}, {}, .F. }
   	Local cCodeST9 := Space( TamSX3( 'T9_CODBEM' )[1] )
   	Local cCodeST6 := Space( TamSX3( 'T6_CODFAMI' )[1] )
	Local aModPad  := fGetModPad( cDesign, cModel )
	Private cFamAtual := cDesign
	Private cModAtual := cModel

	If aModPad[1]

      	While TQ1->( !EoF() ) .And. xFilial( 'TQ1') == TQ1->TQ1_FILIAL .And. cDesign == TQ1->TQ1_DESENH .And.;
        	aModPad[2] == TQ1->TQ1_TIPMOD

         	aAdd( aReturn[1], { TQ1->TQ1_QTDPNE, TQ1->TQ1_LOCPN1, TQ1->TQ1_LOCPN2, TQ1->TQ1_LOCPN3, TQ1->TQ1_LOCPN4,;
            	TQ1->TQ1_LOCPN5, TQ1->TQ1_LOCPN6, TQ1->TQ1_LOCPN7, TQ1->TQ1_LOCPN8, TQ1->TQ1_LOCPN9, TQ1->TQ1_LOCPN0,;
            	TQ1->TQ1_EIXO, TQ1->TQ1_FAMIL1, TQ1->TQ1_FAMIL2, TQ1->TQ1_FAMIL3, TQ1->TQ1_FAMIL4, TQ1->TQ1_FAMIL5,;
            	TQ1->TQ1_FAMIL6, TQ1->TQ1_FAMIL7, TQ1->TQ1_FAMIL8, TQ1->TQ1_FAMIL9, TQ1->TQ1_FAMIL0, TQ1->TQ1_TIPEIX,;
            	Val( TQ1->TQ1_SEQREL ) } )

         	aAdd( aReturn[2], { TQ1->TQ1_QTDPNE, cCodeST9, cCodeST9, cCodeST9, cCodeST9, cCodeST9, cCodeST9, cCodeST9, cCodeST9,;
            	cCodeST9, cCodeST9, TQ1->TQ1_EIXO, cCodeST6, cCodeST6, cCodeST6, cCodeST6, cCodeST6, cCodeST6, cCodeST6,;
            	cCodeST6, cCodeST6, cCodeST6, TQ1->TQ1_TIPEIX, Val( TQ1->TQ1_SEQREL ) } )

         	TQ1->( dbSkip() )

      	End

   	EndIf

	// Valida desenho da estrutura do bem pai e seus filhos.
	aReturn[3] := fVldDesign( aReturn )
	
Return aReturn

//------------------------------------------------------------
/*/{Proteus.doc} fVldDesign
Valida as informações referente a estrutura.
@type function

@author Alexandre Santos
@since  15/07/2021

@param  aValid, array , Matriz que armazena o desenho da estrutura.
@return boolean, Indica que as inforamções da estrutura estão 
corretas.
/*/
//------------------------------------------------------------
Static Function fVldDesign( aValid )

   	Local cError := ''
   	Local nIndex := 0
   	Local nEixo  := 0
   	Local lRet   := .T.

   	For nIndex := 1 To Len( aValid[1] )

      	If aValid[2,nIndex,1] == 0 .Or. aValid[2,nIndex,1] > 10

        	// Eixo ## rodados
        	cError += ' - ' + STR0026 + cValToChar( nIndex ) + ' ( ' + cValToChar( aValid[2,nIndex,1] ) + STR0027 + ' )' + CRLF

    	EndIf
      
   	Next nIndex

   	If !Empty( cError )

		// Esquema padrão XXXX Modelo XXXXX possui número de rodados invalido para: ## Atenção	
		Help( , , STR0013, , STR0014 + ' ' + cFamAtual + ' ' + STR0022 + ' ' + cModAtual + CRLF + STR0028 + ': ' +;
			CRLF + CRLF + cError, 1, 0 )

    	lRet := .F.  
	
   	Else

      	For nIndex := 1 To Len( aValid[1] )

         	If aValid[1,nIndex,1] >= 1 .Or. aValid[1,nIndex,1] <= 10

				For nEixo := 1 To aValid[1,nIndex,1]

					If Empty( aValid[1,nIndex,nEixo+1] )
							
						cField := 'TQ1_LOCPN' + IIf( nEixo == 10, SubStr( Str( nEixo, 2 ), 2 ), Str( nEixo, 1 ) )
							cError += ' - ' + NGRETTITULO( cField ) + STR0029 + cValToChar( nIndex ) + CRLF // para Eixo
					
					EndIf

					If Empty( aValid[1,nIndex,nEixo+12] )
					
						cField := 'TQ1_FAMIL' + IIf( nEixo == 10, SubStr( Str( nEixo, 2 ), 2 ), Str( nEixo, 1 ) )
							cError += ' - ' + NGRETTITULO( cField ) + STR0029 + cValToChar( nIndex ) + CRLF // para Eixo
						
					EndIf

				Next nEixo

			EndIf
               
      	Next nIndex

      	If !Empty( cError )

			// Esquema padrão XXX Modelo XXX não possui informado:  ## Atenção			
			Help( , , STR0013, , STR0014 + cFamAtual + ' ' + STR0022 + ' ' + cModAtual + CRLF + STR0028 + ': ' +;
				CRLF + CRLF + cError, 1, 0 )
         
        	lRet := .F.

      	EndIf

   	EndIf

Return lRet

//------------------------------------------------------------
/*/{Proteus.doc} fLoadStr
Carreaga as informações referente a estrutura.
@type function

@author Alexandre Santos
@since  15/07/2021

@param  nPos, numeric, Posição do array em manipulação.
@return Nil
/*/
//------------------------------------------------------------
Static Function fLoadStr( nPos )

	Local nScan    := 0
	Local nInd1    := 0
	Local nInd2    := 0
	Local cCodeST9 := Space( TamSX3( 'T9_CODBEM' )[1] )
	Local cCodeSTC := ''
	Local cCodeDad := ''
	Local cLocal   := ''

	For nInd1 := 1 To Len( aDsg820[nPos,2] )

		For nInd2 := 2 To 11

        	cLocal   := Trim( aDsg820[nPos,2,nInd1,nInd2] )
        	cCodeSTC := cCodeST9
        	cCodeDad := cCodeST9

        	If !Empty( cLocal )

        		If ( nScan := aScan( aStr820[nPos,5], { |x| x[1] + x[4] == aDsg820[nPos,2,nInd1,nInd2] + aDsg820[nPos,2,nInd1,nInd2+11]}) ) > 0

            		cCodeSTC                          := aStr820[nPos,5,nScan,2]
            		cCodeDad                          := aStr820[nPos,5,nScan,5]
            		aDsg820[nPos,3,nInd1,nInd2+11] := aStr820[nPos,5,nScan,4]
            		aDsg820[nPos,3,nInd1,nInd2]    := cCodeSTC

            	EndIf

            	If nInd2 >= 2 .And. nInd2 <= 11
               
               		cLocTRB := cLocal + Space( Len( STC->TC_LOCALIZ ) - Len( cLocal ) )
            
               		aAdd( aDsg820[nPos,4], { cLocTRB, Space( 8 ), cCodeSTC, aDsg820[nPos,2,nInd1,nInd2+11], cCodeDad,;
                  		aDsg820[nPos,2,nInd1,23]})

             	EndIf

         	EndIf

    	Next nInd2

   	Next nInd1

   	fLoadAxle( nPos )
   
Return

//------------------------------------------------------------
/*/{Proteus.doc} fLoadAxle
Carreaga as informações dos eixos referente a estrutura.
@type function

@author Alexandre Santos
@since  15/07/2021

@param  nPos, numeric, Posição do array em manipulação.
@return Nil
/*/
//------------------------------------------------------------
Static Function fLoadAxle( nPos )
	
	Local aTire   := {}
	Local aLocal  := {}
	Local nInd1   := 0
	Local nInd2   := 0
	Local nScan   := 0
	
	For nInd1 := 1 To Len( aDsg820[nPos,2] )
		
		aTire  := {}
		aLocal := {}
		nMax   := Max( nMax, aDsg820[nPos,3,nInd1,1] )
		
		For nInd2 := 1 To aDsg820[nPos,3,nInd1,1]
			
			If ( nScan := aScan( aDsg820[nPos,4], { |x| x[1] == aDsg820[nPos,2,nInd1,nInd2+1] } ) ) > 0
				aDsg820[nPos,4,nScan,2] := aDsg820[nPos,3,nInd1,nInd2+1]
			Endif

			aAdd( aTire , aDsg820[nPos,3,nInd1,nInd2+1] )
			aAdd( aLocal, aDsg820[nPos,4,nScan,1] )
		
		Next nInd2
		
		aAdd( aDsg820[nPos,5], aTire )
		aAdd( aDsg820[nPos,6], aLocal )
	
	Next nInd1

Return

//------------------------------------------------------------
/*/{Proteus.doc} fSetVar
Realiza a atribuição de váriaveis utilizadas para montagem 
da estrutura de rodados.
@type function

@author Alexandre Santos
@since  15/07/2021

@param  nPos, numeric, Posição do array em manipulação.
@return Nil
/*/
//------------------------------------------------------------
Static Function fSetVar( nPos )

   	Local nInd1   := 0
   	Local nColumn := 1

   	aAdd( aTFolder, Trim( aStr820[nPos,1] ) + ' - ' + Trim( aStr820[nPos,2] ) )
   
   	For nInd1 := 1 To Len( aDsg820[nPos,2] )

    	lHasStep := Trim( aDsg820[nPos,3,nInd1,6] ) == STR0023 // RESERVA
    	nColumn  := IIf( lHasStep, nColumn - 1, nColumn )

		Do Case

			Case aDsg820[nPos,3,nInd1,1] == 1
				
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 137, nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 137 } )

			Case aDsg820[nPos,3,nInd1,1] == 2
				
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 114, nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2], { 162, nColumn }, aDsg820[nPos,6,nInd1,2], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 114, 162 } )

			Case aDsg820[nPos,3,nInd1,1] == 3

				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 119, nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2], { 142, nColumn }, aDsg820[nPos,6,nInd1,2], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,3], { 165, nColumn }, aDsg820[nPos,6,nInd1,3], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 119, 142, 165 } )

			Case aDsg820[nPos,3,nInd1,1] == 4
				
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 91 , nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2], { 114, nColumn }, aDsg820[nPos,6,nInd1,2], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,3], { 162, nColumn }, aDsg820[nPos,6,nInd1,3], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,4], { 185, nColumn }, aDsg820[nPos,6,nInd1,4], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 91, 114, 162, 185 } )

			Case aDsg820[nPos,3,nInd1,1] == 5
				
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 96 , nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2], { 119, nColumn }, aDsg820[nPos,6,nInd1,2], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,3], { 142, nColumn }, aDsg820[nPos,6,nInd1,3], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,4], { 165, nColumn }, aDsg820[nPos,6,nInd1,4], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,5], { 188, nColumn }, aDsg820[nPos,6,nInd1,5], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 96, 119, 142, 165, 188 } )

			Case aDsg820[nPos,3,nInd1,1] == 6
				
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 68 , nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2], { 91 , nColumn }, aDsg820[nPos,6,nInd1,2], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,3], { 114, nColumn }, aDsg820[nPos,6,nInd1,3], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,4], { 162, nColumn }, aDsg820[nPos,6,nInd1,4], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,5], { 185, nColumn }, aDsg820[nPos,6,nInd1,5], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,6], { 208, nColumn }, aDsg820[nPos,6,nInd1,6], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 68, 91, 114, 162, 185, 208 } )

			Case aDsg820[nPos,3,nInd1,1] == 7
				
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 73 , nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2], { 96 , nColumn }, aDsg820[nPos,6,nInd1,2], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,3], { 119, nColumn }, aDsg820[nPos,6,nInd1,3], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,4], { 142, nColumn }, aDsg820[nPos,6,nInd1,4], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,5], { 165, nColumn }, aDsg820[nPos,6,nInd1,5], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,6], { 188, nColumn }, aDsg820[nPos,6,nInd1,6], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,7], { 211, nColumn }, aDsg820[nPos,6,nInd1,7], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 73, 96, 119, 142, 165, 188, 211 } )

			Case aDsg820[nPos,3,nInd1,1] == 8
			
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 45 , nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2], { 68 , nColumn }, aDsg820[nPos,6,nInd1,2], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,3], { 91 , nColumn }, aDsg820[nPos,6,nInd1,3], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,4], { 114, nColumn }, aDsg820[nPos,6,nInd1,4], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,5], { 162, nColumn }, aDsg820[nPos,6,nInd1,5], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,6], { 185, nColumn }, aDsg820[nPos,6,nInd1,6], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,7], { 208, nColumn }, aDsg820[nPos,6,nInd1,7], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,8], { 231, nColumn }, aDsg820[nPos,6,nInd1,8], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 45, 68, 91, 114, 162, 185, 208, 231 } )

			Case aDsg820[nPos,3,nInd1,1] == 9
				
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1], { 50 , nColumn }, aDsg820[nPos,6,nInd1,1], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2], { 73 , nColumn }, aDsg820[nPos,6,nInd1,2], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,3], { 96 , nColumn }, aDsg820[nPos,6,nInd1,3], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,4], { 119, nColumn }, aDsg820[nPos,6,nInd1,4], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,5], { 142, nColumn }, aDsg820[nPos,6,nInd1,5], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,6], { 165, nColumn }, aDsg820[nPos,6,nInd1,6], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,7], { 188, nColumn }, aDsg820[nPos,6,nInd1,7], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,8], { 211, nColumn }, aDsg820[nPos,6,nInd1,8], '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,9], { 234, nColumn }, aDsg820[nPos,6,nInd1,9], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 50, 73, 96, 119, 142, 165, 188, 211, 234 } )

			Case aDsg820[nPos,3,nInd1,1] == 10
			
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,1] , { 22 , nColumn }, aDsg820[nPos,6,nInd1,1] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,2] , { 45 , nColumn }, aDsg820[nPos,6,nInd1,2] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,3] , { 68 , nColumn }, aDsg820[nPos,6,nInd1,3] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,4] , { 91 , nColumn }, aDsg820[nPos,6,nInd1,4] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,5] , { 114, nColumn }, aDsg820[nPos,6,nInd1,5] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,6] , { 162, nColumn }, aDsg820[nPos,6,nInd1,6] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,7] , { 185, nColumn }, aDsg820[nPos,6,nInd1,7] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,8] , { 208, nColumn }, aDsg820[nPos,6,nInd1,8] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,9] , { 231, nColumn }, aDsg820[nPos,6,nInd1,9] , '@!', , , , 58 } )
				aAdd( aDsg820[nPos,7], { aDsg820[nPos,5,nInd1,10], { 254, nColumn }, aDsg820[nPos,6,nInd1,10], '@!', , , , 58 } )
				
				aAdd( aDsg820[nPos,8], { nColumn, 22, 45, 68, 91, 114, 162, 185, 208, 231, 254 } )

		End Case

    	nColumn += 65
      
   	Next nInd1

Return 

//------------------------------------------------------------
/*/{Proteus.doc} fStartPrt
Impressão do Relatório de Estrutura de Rodados.
@type function

@author Alexandre Santos
@since  15/07/2021

@param  aDsg820, array , Matriz que armazena detalhes da estrutura.
@return Nil
/*/
//------------------------------------------------------------
Static Function fStartPrt( aDsg820 )
    
	Local aAxle    := {}
	Local aSize    := { 576, 512, 448, 384, 320, 256, 192, 128, 64, 0 }
	Local cAxle    := ''
	Local cHour    := STR0039 + ' ' + DToC( Date() ) + Space( 3 ) + Time() // Emissão: XX/XX/XXXX XX:XX:XX
	Local cBrchST9 := xFilial( 'ST9' )
	Local cBrchTQR := xFilial( 'TQR' )
	Local lHasLeg  := MsgYesNo( STR0040 ) // Deseja que seja impresso a legenda?
	Local nInd1    := 0
	Local nInd2    := 0
	Local nInd3    := 0
	Local nUTLin   := 0
	Local nLISOMA  := 0
	Local nLine    := 0
	Local nPage    := 1
	Local nColumn  := 30
	Local nL01     := 320
	Local nL02     := 470
	Local nL03     := 620
	Local nL04     := 770
	Local nL05     := 920
	Local nL06     := 1070
	Local oFont11  := TFont():New( 'Arial', 11, 11, , .F., , , , .T., .F. )
	Local oFont14  := TFont():New( 'Arial', 14, 14, , .T., , , , .T., .F. )
	Local oFont18  := TFont():New( 'Arial', 18, 18, , .T., , , , .T., .F. )
	Local oPrint

	Private nTotEixo := 0

	oPrint := TMSPrinter():New( STR0032 ) // Impressao do Esquema de Rodado
	oPrint:SetLandScape()

	For nInd1 := 1 to Len( aDsg820 )

		dbSelectArea( 'ST9' )
		dbSetOrder( 1 )
		dbSeek( cBrchST9 + aDsg820[nInd1,1] )
		
		If !Empty( aDsg820[nInd1,8] )

			oPrint:StartPage()

			// Array contendo as informações referentes aos eixos da estrutura.
			aAxle := aClone( aDsg820[nInd1,2] )

			// Obtém o maior número de pneus por eixo na estrutura.
			nMax  := MNT231QE( aAxle )

			// Array contendo as informações referentes aos pneus da estrutura.
			aTire := aClone( aDsg820[nInd1,3] )

			// Esquema Rodados Do..: XXX - XXXXX Modelo..: XXX - XXXXXX Placa..: XXX - XXXX
			oPrint:Say( 020, 040, STR0018 + '..: ' + AllTrim( ST9->T9_CODBEM ) + ' - ' + Trim( ST9->T9_NOME ) + Space( 5 ) + STR0022 + '..: '+ AllTrim( ST9->T9_TIPMOD ) + ' - ' +; 
				Trim( Posicione( 'TQR', 1, cBrchTQR + ST9->T9_TIPMOD, 'TQR_DESMOD' ) ) + Space( 5 ) + IIf( !Empty( ST9->T9_PLACA ), STR0038 + '..: ' + ST9->T9_PLACA, '' ), oFont14 )

			oPrint:Say( 115, 040, STR0020, oFont14 ) // Apresentação
				
			oPrint:Box( 100, 390, 200, 760 )
			oPrint:Say( 125, 402, STR0001, oFont11 ) // Rodados

			oPrint:Box( 209, 392, 280, 690 )
			oPrint:Say( 220, 402, STR0036, oFont11, , CLR_HRED ) // Localização	

			oPrint:Say( 125, 2000, STR0037 + ' ' + Str( nPage, 2 ) + '  ' + cHour, oFont14 ) // Página X

			For nInd2 := 1 to Len( aAxle )

				// Identificação do eixo.
				cAxle := IIf( AllTrim( aAxle[nInd2,12] ) == STR0035, STR0035, AllTrim( aAxle[nInd2,12] ) + ' ' + Chr( 176 ) + ' ' + STR0026 )

				Do Case
					
					Case aAxle[nInd2,1] == 1 // Eixo 1
										
						oPrint:Say( nL06 + 140 - aSize[nMax], nColumn + 7, cAxle, oFont14 )
						
						MNTA220BX( oPrint, @nPage, @nLine, nL01 + 952 - aSize[nMax], 85, 380, 1, nColumn )
						oPrint:Say( nL01 + 972 - aSize[nMax] , nColumn, aTire[nInd2,2], oFont11 )
						
						MNTA220BX( oPrint, @nPage, @nLine, nL01 + 1034 - aSize[nMax], 85, 210, 1, nColumn )
						oPrint:Say( nL01 + 1049 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )
						
						nUTLin := Max(nUTLin,1450 - aSize[nMax] )

					Case aAxle[nInd2,1] == 2 // Eixo 2
						
						oPrint:Say( nL05 + 140 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX( oPrint, @nPage, @nLine, nL01 + 802 - aSize[nMax], 85, 380, 1, nColumn )
						oPrint:Say( nL01 + 822 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+884-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 899 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						// DIVISOR
						MNTA220EI1(oPrint,@nPage,@nLine,nL01+969-aSize[nMax],nL01+1119-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX( oPrint, @nPage, @nLine, nL01 + 1119 - aSize[nMax], 85, 380, 1, nColumn )
						oPrint:Say( nL01 + 1139 - aSize[nMax], nColumn, aTire[nInd2,3], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1201-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1216 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						nUTLin := Max(nUTLin,1650-aSize[nMax])

					Case aAxle[nInd2,1] == 3 // Eixo 3
						
						oPrint:Say( nL05 + 100 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+761-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 781 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+843-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 858 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+927-aSize[nMax],nL01+952-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+952-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 972 - aSize[nMax], nColumn, aTire[nInd2,3],oFont11)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1034-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1049 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1118-aSize[nMax],nL01+1143-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1143-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1163 - aSize[nMax], nColumn, aTire[nInd2,4], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1225-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1240 - aSize[nMax], nColumn, aAxle[nInd2,4], oFont11, , CLR_HRED )

						nUTLin := Max(nUTLin,1650-aSize[nMax])

					Case aAxle[nInd2,1] == 4 // Eixo 4
						
						
						oPrint:Say( nL04 + 100 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+611-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 631 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+693-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 708 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+777-aSize[nMax],nL01+802-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+802-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 822 - aSize[nMax], nColumn, aTire[nInd2,3], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+884-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 899 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						// DIVISOR
						MNTA220EI1(oPrint,@nPage,@nLine,nL01+969-aSize[nMax],nL01+1119-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1119-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1139 - aSize[nMax], nColumn, aTire[nInd2,4], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1201-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1216 - aSize[nMax], nColumn, aAxle[nInd2,4], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1285-aSize[nMax],nL01+1310-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1310-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1330 - aSize[nMax], nColumn, aTire[nInd2,5], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1392-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1407 - aSize[nMax], nColumn, aAxle[nInd2,5], oFont11, , CLR_HRED )

						nUTLin := Max(nUTLin,1855-aSize[nMax])
				
					Case aAxle[nInd2,1] == 5 // Eixo 5
						
						oPrint:Say( nL04 + 60 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+570-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 590 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+652-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 667 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+736-aSize[nMax],nL01+761-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+761-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 781 - aSize[nMax], nColumn, aTire[nInd2,3], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+843-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 858 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+927-aSize[nMax],nL01+952-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+952-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 972 - aSize[nMax], nColumn, aTire[nInd2,4], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1034-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1049 - aSize[nMax], nColumn, aAxle[nInd2,4], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1118-aSize[nMax],nL01+1143-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1143-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1163 - aSize[nMax], nColumn, aTire[nInd2,5], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1225-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1240 - aSize[nMax], nColumn, aAxle[nInd2,5], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1309-aSize[nMax],nL01+1334-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1334-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1354 - aSize[nMax], nColumn, aTire[nInd2,6], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1416-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1431 - aSize[nMax], nColumn, aAxle[nInd2,6], oFont11, , CLR_HRED )
						
						nUTLin := Max(nUTLin,1850)

					Case aAxle[nInd2,1] == 6 // Eixo 6
						
						oPrint:Say( nL03 + 60 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+420-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 440 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+502-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 517 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+586-aSize[nMax],nL01+611-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+611-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 631 - aSize[nMax], nColumn, aTire[nInd2,3], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+693-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 708 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+777-aSize[nMax],nL01+802-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+802-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 822 - aSize[nMax], nColumn, aTire[nInd2,4], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+884-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 899 - aSize[nMax], nColumn, aAxle[nInd2,4], oFont11, , CLR_HRED )

						// DIVISOR
						MNTA220EI1(oPrint,@nPage,@nLine,nL01+969-aSize[nMax],nL01+1119-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1119-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1139 - aSize[nMax], nColumn, aTire[nInd2,5], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1201-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1216 - aSize[nMax], nColumn, aAxle[nInd2,5], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1285-aSize[nMax],nL01+1310-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1310-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1330 - aSize[nMax], nColumn, aTire[nInd2,6], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1392-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1407 - aSize[nMax], nColumn, aAxle[nInd2,6], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1476-aSize[nMax],nL01+1501-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1501-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1521 - aSize[nMax], nColumn, aTire[nInd2,7], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1583-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1598 - aSize[nMax], nColumn, aAxle[nInd2,7], oFont11, , CLR_HRED )
						
						nUTLin := Max(nUTLin,1950-aSize[nMax])
						
					Case aAxle[nInd2,1] == 7 // Eixo 7
						
						oPrint:Say( nL03 + 20 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+380-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 390 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+462-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 477 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+545-aSize[nMax],nL01+570-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+570-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 590 - aSize[nMax], nColumn, aTire[nInd2,3], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+652-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 667 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+736-aSize[nMax],nL01+761-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+761-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 781 - aSize[nMax], nColumn, aTire[nInd2,4], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+843-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 858 - aSize[nMax], nColumn, aAxle[nInd2,4], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+927-aSize[nMax],nL01+952-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+952-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 972 - aSize[nMax], nColumn, aTire[nInd2,5], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1034-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1049 - aSize[nMax], nColumn, aAxle[nInd2,5], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1118-aSize[nMax],nL01+1143-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1143-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1163 - aSize[nMax], nColumn, aTire[nInd2,6], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1225-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1240 - aSize[nMax], nColumn, aAxle[nInd2,6], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1309-aSize[nMax],nL01+1334-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1334-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1354 - aSize[nMax], nColumn, aTire[nInd2,7], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1416-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1431 - aSize[nMax], nColumn, aAxle[nInd2,7], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1500-aSize[nMax],nL01+1525-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1525-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1545 - aSize[nMax], nColumn, aTire[nInd2,8], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1607-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1622 - aSize[nMax], nColumn, aAxle[nInd2,8], oFont11, , CLR_HRED )

						nUTLin := Max(nUTLin,2150-aSize[nMax])

					Case aAxle[nInd2,1] == 8 // Eixo 8
						
						oPrint:Say( nL02 + 20 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+230-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 250 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+312-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 327 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+395-aSize[nMax],nL01+420-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+420-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 440 - aSize[nMax], nColumn, aTire[nInd2,3], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+502-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 517 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+586-aSize[nMax],nL01+611-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+611-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 631 - aSize[nMax], nColumn, aTire[nInd2,4], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+693-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 708 - aSize[nMax], nColumn, aAxle[nInd2,4], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+777-aSize[nMax],nL01+802-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+802-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 822 - aSize[nMax], nColumn, aTire[nInd2,5], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+884-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 899 - aSize[nMax], nColumn, aAxle[nInd2,5], oFont11, , CLR_HRED )

						// DIVISOR
						MNTA220EI1(oPrint,@nPage,@nLine,nL01+969-aSize[nMax],nL01+1119-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1119-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1139 - aSize[nMax], nColumn, aTire[nInd2,6], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1201-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1216 - aSize[nMax], nColumn, aAxle[nInd2,6], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1285-aSize[nMax],nL01+1310-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1310-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1330 - aSize[nMax], nColumn, aTire[nInd2,7], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1392-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1407 - aSize[nMax], nColumn, aAxle[nInd2,7], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1476-aSize[nMax],nL01+1501-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1501-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1521 - aSize[nMax], nColumn, aTire[nInd2,8], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1583-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1598 - aSize[nMax], nColumn, aAxle[nInd2,8], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1667-aSize[nMax],nL01+1692-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1692-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1717 - aSize[nMax], nColumn, aTire[nInd2,9], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1779-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1794 - aSize[nMax], nColumn, aAxle[nInd2,9], oFont11, , CLR_HRED )

						nUTLin := Max(nUTLin,2350-aSize[nMax])

					Case aAxle[nInd2,1] == 9 // Eixo 9
						
						oPrint:Say( nL02 - 20 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+190-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 200 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+270-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 290 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+355-aSize[nMax],nL01+380-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+380-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 390 - aSize[nMax], nColumn, aTire[nInd2,3], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+462-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 477 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+545-aSize[nMax],nL01+570-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+570-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 590 - aSize[nMax], nColumn, aTire[nInd2,4], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+652-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 667 - aSize[nMax], nColumn, aAxle[nInd2,4], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+736-aSize[nMax],nL01+761-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+761-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 781 - aSize[nMax], nColumn, aTire[nInd2,5], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+843-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 858 - aSize[nMax], nColumn, aAxle[nInd2,5], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+927-aSize[nMax],nL01+952-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+952-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 972 - aSize[nMax], nColumn, aTire[nInd2,6], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1034-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1049 - aSize[nMax], nColumn, aAxle[nInd2,6], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1118-aSize[nMax],nL01+1143-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1143-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1163 - aSize[nMax], nColumn, aTire[nInd2,7], oFont11 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1225-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1240 - aSize[nMax], nColumn, aAxle[nInd2,7], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1309-aSize[nMax],nL01+1334-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1334-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1354 - aSize[nMax], nColumn, aTire[nInd2,8], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1416-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1431 - aSize[nMax], nColumn, aAxle[nInd2,8], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1500-aSize[nMax],nL01+1525-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1525-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1545 - aSize[nMax], nColumn, aTire[nInd2,9], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1607-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1622 - aSize[nMax], nColumn, aAxle[nInd2,9], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1691-aSize[nMax],nL01+1716-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1716-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1736 - aSize[nMax], nColumn, aTire[nInd2,10], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1798-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1813 - aSize[nMax], nColumn, aAxle[nInd2,10], oFont11, , CLR_HRED )
						
						nUTLin := Max(nUTLin,2550-aSize[nMax])

					Case aAxle[nInd2,1] == 10 // Eixo 10
						
						oPrint:Say( nL01 - 15 - aSize[nMax], nColumn + 100, cAxle, oFont14 )

						MNTA220BX(oPrint,@nPage,@nLine,nL01+40-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 50 - aSize[nMax], nColumn, aTire[nInd2,2], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+120-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 140 - aSize[nMax], nColumn, aAxle[nInd2,2], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+205-aSize[nMax],nL01+230-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+230-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 250 - aSize[nMax], nColumn, aTire[nInd2,3], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+312-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 327 - aSize[nMax], nColumn, aAxle[nInd2,3], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+395-aSize[nMax],nL01+420-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+420-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 440 - aSize[nMax], nColumn, aTire[nInd2,4], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+502-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 517 - aSize[nMax], nColumn, aAxle[nInd2,4], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+586-aSize[nMax],nL01+611-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+611-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 631 - aSize[nMax], nColumn, aTire[nInd2,5], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+693-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 708 - aSize[nMax], nColumn, aAxle[nInd2,5],oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+777-aSize[nMax],nL01+802-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+802-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 822 - aSize[nMax], nColumn, aTire[nInd2,6], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+884-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 899 - aSize[nMax], nColumn, aAxle[nInd2,6], oFont11, , CLR_HRED )

						// DIVISOR
						MNTA220EI1(oPrint,@nPage,@nLine,nL01+969-aSize[nMax],nL01+1119-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1119-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1139 - aSize[nMax], nColumn, aTire[nInd2,7], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1201-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1216 - aSize[nMax], nColumn, aAxle[nInd2,7], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1285-aSize[nMax],nL01+1310-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1310-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1330 - aSize[nMax], nColumn, aTire[nInd2,8], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1392-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1407 - aSize[nMax], nColumn, aAxle[nInd2,8], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1476-aSize[nMax],nL01+1501-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1501-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1521 - aSize[nMax], nColumn, aTire[nInd2,9], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1583-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1598 - aSize[nMax], nColumn, aAxle[nInd2,9], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1667-aSize[nMax],nL01+1692-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1692-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1717 - aSize[nMax], nColumn, aTire[nInd2,10], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1779-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1794 - aSize[nMax], nColumn, aAxle[nInd2,10], oFont11, , CLR_HRED )

						MNTA220EI1(oPrint,@nPage,@nLine,nL01+1866-aSize[nMax],nL01+1893-aSize[nMax],2,1,170,nLISOMA,nColumn)

						MNTA220BX(oPrint,@nPage,@nLine,nL01+1893-aSize[nMax],85,380,1,nColumn)
						oPrint:Say( nL01 + 1913 - aSize[nMax], nColumn, aTire[nInd2,11], oFont11 )
						
						MNTA220BX(oPrint,@nPage,@nLine,nL01+1975-aSize[nMax],85,210,1,nColumn)
						oPrint:Say( nL01 + 1990 - aSize[nMax], nColumn, aAxle[nInd2,11], oFont11, , CLR_HRED )
						
						nUTLin := Max(nUTLin,2750)

				EndCase

				nColumn += 420

			Next nInd2

			// Impressão da legenda.
			If lHasLeg
				
				nLine := nUTLin+40

				If nLine > 2000

					// Encerra a página de impressão da estrutura.
					oPrint:EndPage()

					// Inicia uma nova página para a legenda.
					oPrint:StartPage()

					nLine := 0

				EndIf

				oPrint:Say(nLine,040,STR0034,oFont18) //"LEGENDA"

				nLine := nLine + 90
				oPrint:Say(nLine,040,STR0033,oFont14) //"RODADOS"
				oPrint:Say(nLine,1540, STR0016,oFont14,,CLR_HRED)

				nLine := nLine + 50

				nLinT := nLine
				nLinA := nLine

				For nInd2 := 1 To Len( aTire )
					
					For nInd3 := 2 To 11
						
						// Imprime os rodados em utilização na estrutura.
						If !Empty( aTire[nInd2,nInd3] )
							
							oPrint:Say( nLinT, 040, Trim( aTire[nInd2,nInd3] ) + ' - ' + Trim( NGSEEK( 'ST9', aTire[nInd2,nInd3], 1,;
								'T9_NOME' ) ), oFont11 )

							nLinT += 40

						EndIf

						// Imprime as localizações da estrutura.
						If !Empty( aAxle[nInd2,nInd3] )
							
							oPrint:Say( nLinA, 1540, Trim( aAxle[nInd2,nInd3] ) + ' - ' + Trim( NGSEEK( 'TPS', aAxle[nInd2,nInd3], 1,;
								'TPS_NOME' ) ), oFont11, , CLR_HRED )

							nLinA += 40

						EndIf

					Next nInd3

				Next nInd2

			EndIf

			oPrint:EndPage()

			nLine   := 0
			nColumn := 30

			nPage++

		EndIf

	Next nInd1

	// Apresenta a pré-visuslização da impressão.
	oPrint:Preview()

Return

//------------------------------------------------------------
/*/{Proteus.doc} fGetModPad
Recupera Tipo Modelo do esquema padrão, podendo retornar * (TODOS)
@type function

@author Cristiano Serafim Kair
@since  15/07/2021

@param  cDesign , string, Código do desenho da estrutura.
@param  cModel  , string, Código do modelo.
@return aArray , array, Array primeiro sendo lógico se tem Padrão e 
segundo com Modelo do esquema padrão encontrado

/*/
//------------------------------------------------------------
Static Function fGetModPad( cDesign, cModel )
	
	Local aArray := {}
	Local lTemPad := .F.

	If lRel12133
		lTemPad := MNTSeekPad( 'TQ1', 1, cDesign, cModel )

	Else
		dbSelectArea( 'TQ1' )
		dbSetOrder( 1 )
		lTemPad := dbSeek( xFilial( 'TQ1' ) + cDesign + cModel )

	EndIf
	
	aAdd( aArray, lTemPad)
	aAdd( aArray, TQ1->TQ1_TIPMOD)

Return aArray
