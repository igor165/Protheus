#INCLUDE "mdta280.ch"
#Include "Protheus.ch"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA280
Exames necessarios para Exame Demissional

@type Function

@return Lógico, Sempre verdadeiro

@author Denis Hyroshi de Souza
@since 28/07/2003
/*/
//---------------------------------------------------------------------
Function MDTA280
//------------------------------------------------------
// Armazena variaveis p/ devolucao (NGRIGHTCLICK)
//------------------------------------------------------
Local aNGBEGINPRM := NGBEGINPRM()

Private nSizeCli := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
Private nSizeLoj := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))
Private cCliMdtPs  := Space(Len(SA1->A1_COD+SA1->A1_LOJA))
PRIVATE nSizeSI3,nSizeSRJ
nSizeSI3 := If((TAMSX3("I3_CUSTO")[1]) < 1,9,(TAMSX3("I3_CUSTO")[1]))
nSizeSRJ := If((TAMSX3("RJ_FUNCAO")[1]) < 1,5,(TAMSX3("RJ_FUNCAO")[1]))

Private lPrestSX6  := .f.
Private lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .t. , .f. )

If SuperGetMv("MV_NGMDTPS",.F.,"N") == "S"
	lPrestSX6  := .t.
Endif

PRIVATE aRotina := MenuDef()

PRIVATE cCadastro := STR0004	//"Exames necessarios para o funcionario demitido"
PRIVATE cAlias    := "SRA"
PRIVATE cNUMFIC   := space(09)
PRIVATE cPrograma := "MDTA280"
PRIVATE cPcmso    := space(06)

cCadastro := OemtoAnsi(cCadastro)

aCHKDEL := { }

If FindFunction("MDTRESTRI") .AND. !MDTRESTRI(cPrograma)
	//------------------------------------------------------
	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	//------------------------------------------------------
	NGRETURNPRM(aNGBEGINPRM)
	Return .F.
Endif

//------------------------------------------------------
// Endereca a funcao de BROWSE
//------------------------------------------------------
If lSigaMdtps
	dbSelectArea("SA1")
	dbSetOrder(1)
	mBrowse( 6, 1,22,75,"SA1")
Else
	dbSelectArea("SRA")
	dbSetOrder(1)
	mBrowse( 006 , 001 , 022 , 075 , "SRA" , NIL , NIL , NIL , NIL , NIL , fCriaCor() )
Endif

//------------------------------------------------------
// Devolve variaveis armazenadas (NGRIGHTCLICK)
//------------------------------------------------------
NGRETURNPRM(aNGBEGINPRM)

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT280SRA
Filtra os funcionarios do cliente

@type Function

@return Nill, Sempre nulo

@author Denis Hyroshi de Souza
@since 29/06/2010
/*/
//---------------------------------------------------------------------
Function MDT280SRA()

Local aArea	:= GetArea()
Local oldROTINA := aCLONE(aROTINA)
Local oldCad := cCadastro
cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA

nSizeSA1 := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
nSizeLo1 := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))

aRotina :=	{{STR0001, "AxPesqui", 0, 1},;   //"Pesquisar"
			 {STR0002, "NGCAD01" , 0, 2},;   //"Visualizar"
			 {STR0003, "MDT280EX", 0, 2},;   //"Exames"
			 {STR0053, "GpLegend" , 0 , 6,,.F. }} //"Legenda"

dbSelectArea("SRA")
Set Filter To SubStr(SRA->RA_CC,1,nSizeSA1+nSizeLo1) == cCliMdtps
dbSetOrder(1)
mBrowse( 006 , 001 , 022 , 075 , "SRA" , NIL , NIL , NIL , NIL , NIL , fCriaCor() )

dbSelectArea("SRA")
Set Filter To

aROTINA := aCLONE(oldROTINA)
RestArea(aArea)
cCadastro := oldCad

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT280EX
Visualiza os exames necessarios

@type Function

@return Lógico, Sempre verdadeiro

@author Denis Hyroshi de Souza
@since 28/07/2003
/*/
//---------------------------------------------------------------------
Function MDT280EX()
Local nSizeTOE := If((TAMSX3("TOE_CNAE")[1]) < 1,7,(TAMSX3("TOE_CNAE")[1]))
Local lErro1 := .f.
Local lErro2 := .f.
Local lErro3 := .f.
Local lErro4 := .f.
Local dDias := StoD(Space(8)), nDias := 0

If lSigaMdtps
	If !MdtTemTOL(/*Cliente*/, /*Loja*/, /*Exame*/, .T.) //Valida se tem contrato
		Return
	Endif
Endif

Private cCodCnae := " "

Dbselectarea("TM0")
Dbsetorder(3)
If !Dbseek(SRA->RA_FILIAL+SRA->RA_MAT)
	MsgStop(STR0005,STR0006)  //"Funcionário não possui Ficha Médica cadastrada."###"ATENCAO"
	Return .t.
Endif

If lPrestSX6 .or. lSigaMdtPS
	Dbselectarea("SA1")
	Dbsetorder(1)
	If Dbseek (xFilial("SA1") + TM0->TM0_CLIENT + TM0->TM0_LOJA)
		cCodCnae := SA1->A1_ATIVIDA
	Endif
	nTam := nSizeCli+nSizeLoj
	If !lSigaMdtPS
		nTam := nSizeCli
	Endif
	Dbselectarea("SA1")
	Dbsetorder(1)
	If Dbseek(xFilial("SA1")+Substr(TM0->TM0_CC,1,nTam))
		cCodCnae := If(Empty(cCodCnae),SA1->A1_ATIVIDA,cCodCnae)
	Endif
Else
	cCodCnae := SM0->M0_CNAE
Endif

Dbselectarea("TOE")
Dbsetorder(1)
If !Dbseek(xFilial("TOE")+cCodCnae)
	lErro1 := .t.
Endif
If lErro1
	dbSelectArea("TOE")
	dbSetOrder(1)
	If dbSeek(xFilial("TOE")+Substr(cCodCnae,1,5)+Space(nSizeTOE-5))
		lErro1 := .f.
	Endif
Endif
If !lErro1
	If TOE->TOE_GRISCO $ "12"
		nDias := 135
		nDias_Ref := SuperGetMv("MV_MDTGR12",.F.,"")
		If Valtype(nDias_Ref) <> "N"
			nDias_Ref := Val(nDias_Ref)
		Endif
		If nDias_Ref > 0
			nDias := nDias_Ref
		Endif
	Elseif TOE->TOE_GRISCO $ "34"
		nDias := 90
		nDias_Ref := SuperGetMv("MV_MDTGR34",.F.,"")
		If Valtype(nDias_Ref) <> "N"
			nDias_Ref := Val(nDias_Ref)
		Endif
		If nDias_Ref > 0
			nDias := nDias_Ref
		Endif
	ElseIf Empty(TOE->TOE_GRISCO)
	    lErro3 := .t.
	ElseIf TOE->TOE_GRISCO == "0"
		lErro2 := .t.
	Else
		lErro4 := .t.
	Endif
Endif

dDias := Date()-nDias

If lErro1
	If lPrestSX6 .or. lSigaMdtPS
		MsgStop(STR0041,STR0006)	//"Não foi possível visualizar os exames pendentes, pois o CNAE não está informado ou está incorreto no cadastro de clientes." ###"ATENCAO"
	Else
		MsgStop(STR0045,STR0006)	//"Não foi possível visualizar os exames pendentes, pois o CNAE não está informado ou está incorreto nos dados cadastrais da empresa." ###"ATENCAO"
	EndIf
	Return .t.
ElseIf lErro3
	If lPrestSX6 .or. lSigaMdtPS
		MsgStop(STR0043,STR0006)	//'Não foi possível visualizar os exames pendentes, pois o grau de risco da atividade econômica exercida pelo cliente não foi informado no programa "Atividades Econômicas".' ###"ATENCAO"
	Else
		MsgStop(STR0046,STR0006)	//'Não foi possível visualizar os exames pendentes, pois o grau de risco da atividade econômica exercida pela empresa não foi informado no programa "Atividades Econômicas".' ###"ATENCAO"
	EndIf
	Return .t.
ElseIf lErro4
	If lPrestSX6 .or. lSigaMdtPS
		MsgStop(STR0044,STR0006)	//"Não foi possível visualizar os exames pendentes, pois o grau de risco da atividade econômica exercida pelo cliente foi preenchido incorretamente. Valores válidos são 0(zero), 1(um), 2(dois), 3(três) ou 4(quatro)." ###"ATENCAO"
	Else
		MsgStop(STR0047,STR0006)	//"Não foi possível visualizar os exames pendentes, pois o grau de risco da atividade econômica exercida pela empresa foi preenchido incorretamente. Valores válidos são 0(zero), 1(um), 2(dois), 3(três) ou 4(quatro)." ###"ATENCAO"
	EndIf
	Return .t.
ElseIf !MDT280CHEX(dDias,nDias,lErro2)
	If lPrestSX6 .or. lSigaMdtPS
		MsgInfo(STR0048,STR0006) 	//"O grau de risco da atividade econômica exercida pelo cliente não exige a obrigatoriedade do agendamento de exames." ###"ATENCAO"
	Else
		MsgInfo(STR0042,STR0006) 	//"O grau de risco da atividade econômica exercida pela empresa não exige a obrigatoriedade do agendamento de exames." ###"ATENCAO"
	EndIf
	Return .t.
EndIf

Dbselectarea("TM0")
Dbsetorder(1)
Return .t.
//---------------------------------------------------------------------
/*/{Protheus.doc} MDT280CHEX
Verifica os exames necessarios para os riscos

@type Function

@param dDiaLimite, Data, [Compatibilidade] Indica a data de limite dos exames
@param _nDias, Numérico, Indica a quantidade de dias para realização
@param _lErro2, Lógico, Indica que o Grau de Risco é 0

@return Lógico, Sempre verdadeiro

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function MDT280CHEX(dDiaLimite,_nDias,_lErro2)
Local i
Local OldRot,nOpca
Local nContador := 0,nCnt := 0,nUsed,nColumn,nOld
Local lGrava := .f.
Local aArea := GetArea()
Local oMenu3
Local oPnlPai
Local oPnlTop
Local oPnlMark, oTempTable

Private aTarefas := {}
Private aRiscos  := {}
private oDlg3, oGet, aExames := {}
Private aRet := {}
Private aExaPerf := {}
Private aSize := MsAdvSize(,.F.,430)


OldRot := aCLONE(aROTINA)
aROTINA := {}

lInverte:= .f.
cMARCA  := GetMark()
lQuery := .t.

If _lErro2
	aRotina := aCLONE(OldRot)
	Return .f.
Endif

dbSelectArea("TM4")

aDBF := {}
AADD (aDBF, {"TM5_OK", "C", 02, 0} )
AADD (aDBF, {"EXAME" , "C", If(TAMSX3("TM4_EXAME")[1] < 1, 6, TAMSX3("TM4_EXAME")[1]), 0} )
AADD (aDBF, {"NOMEXA", "C", 30, 0} )
Aadd(aDBF,{"DTRESU","D",08,0})
Aadd(aDBF,{"DIAS"  ,"C",20,0})

aTRB1 := {}
AADD (aTRB1, {"TM5_OK", NIL, " "     , } )
AADD (aTRB1, {"EXAME" , NIL, STR0025 , } )  //"Exame"
AADD (aTRB1, {"NOMEXA", NIL, STR0026 , } )  //"Descricao do Exame"
AADD(aTRB1,{"DTRESU",NIL,STR0023 ,})  //"Data Ultimo Exame"
AADD(aTRB1,{"DIAS"  ,NIL,STR0027 ,})  //"Observacao"

oTempTable := FWTemporaryTable():New( "TM5X", aDBF )
oTempTable:AddIndex( "1", {"EXAME"} )
oTempTable:Create()

If lSigaMdtPS
	cCliMdtPs := Substr(SRA->RA_CC,1,nSizeCli+nSizeLoj)
Endif

If ExistBlock("MDTA2801")
	aExaPerf := ExecBlock("MDTA2801")
Else
	aTarefas := A280TAREFA(SRA->RA_MAT)
	aRiscos  := MDTRETRIS(,,,,,If( Len( aTarefas ) < 1 , Nil , aTarefas ),,,,.T.,{ SRA->RA_CC, SRA->RA_CODFUNC, SRA->RA_DEPTO } )[1]
	aExaPerf := MDTRETEXA(SRA->RA_CODFUNC,"D",aRiscos,cCliMdtps,If(lSigaMdtPS,.F.,.T.),.T.,.T.,.T.,TM0->TM0_NUMFIC) //Busca todos os exames necessarios para admissao

	Dbselectarea("TM5")
	Dbsetorder(1)
	Dbseek(xFilial("TM5")+TM0->TM0_NUMFIC)
	While !eof() 							   .and.;
		xFilial("TM5") == TM5->TM5_FILIAL   .and.;
		TM0->TM0_NUMFIC == TM5->TM5_NUMFIC
		If Empty(TM5->TM5_DTRESU)
			Dbskip()
			Loop
		Endif
		If aScan(aExames,{|x| x[1] == TM5->TM5_EXAME}) <= 0
			aAdd(aExames,{TM5->TM5_EXAME})
		Endif
		If (Date() - TM5->TM5_DTRESU) <= _nDias
			Dbselectarea("TM5X")
			Dbgotop()
			If Dbseek(TM5->TM5_EXAME)
				RecLock("TM5X",.f.)
				DbDelete()
				Msunlock("TM5X")
			Endif

			Dbselectarea("TM5")
			Dbskip()
			Loop
		Endif
		If ( aScan( aExaPerf , { | x | x[ 1 ] == TM5->TM5_EXAME } ) ) == 0
			Dbselectarea("TM5")
			Dbskip()
			Loop
		EndIf
		Dbselectarea("TM4")
		Dbsetorder(1)
		If Dbseek(xFilial("TM4")+TM5->TM5_EXAME)
			Dbselectarea("TM5X")
			Dbgotop()
			If !Dbseek(TM5->TM5_EXAME)
				RecLock("TM5X",.t.)
				TM5X->TM5_OK := cMarca
				TM5X->EXAME  := TM5->TM5_EXAME
				TM5X->NOMEXA := TM4->TM4_NOMEXA
				TM5X->DTRESU := TM5->TM5_DTRESU
				TM5X->DIAS   := Alltrim(Str(Date() - TM5->TM5_DTRESU,20))+Upper(STR0009) //" dias"
			Else
				RecLock("TM5X",.f.)
				If TM5->TM5_DTRESU > TM5X->DTRESU
					TM5X->DTRESU := TM5->TM5_DTRESU
					TM5X->DIAS   := Alltrim(Str(Date() - TM5->TM5_DTRESU,20))+Upper(STR0009) //" dias"
				Endif
			Endif
			Msunlock("TM5X")
		Endif
		Dbselectarea("TM5")
		Dbskip()
	End
Endif

If Type("aExaPerf") != "A"
	MsgStop("Erro no Ponto de Entrada")
	aExaPerf := {}
Endif
For i := 1 to Len(aExaPerf)//Grava no TRB
	If lSigaMdtPS
		If !MdtTemTOL(/*Cliente*/,/*Loja*/,aExaPerf[i][1],.F.)
			Loop
		Endif
	Endif
	dbSelectArea("TM5X")
	dbGoTop()
	If !dbSeek(aExaPerf[i][1])
		RecLock("TM5X",.t.)
		TM5X->TM5_OK := cMarca
		TM5X->EXAME  := aExaPerf[i][1]
		TM5X->NOMEXA := aExaPerf[i][2]
		TM5X->DTRESU := NGUTILUEX(TM0->TM0_NUMFIC,aExaPerf[i][1],StoD(""),2)
		TM5X->DIAS   := STR0022 	//"EXAME DEMISSIONAL"
		Msunlock("TM5X")
	Endif
Next i

DbselectArea("TMW")
DbsetOrder(1)
Dbgobottom()
Do While !BOF()
	If TMW->TMW_FILIAL != xFilial("TMW")
		DbselectArea("TMW")
      	Dbskip(-1)
      	Loop
	Endif

	If TMW->(FieldPos("TMW_CCDE")) > 0 .and. TMW->(FieldPos("TMW_CCATE")) > 0
		If lPrestSX6
	      	If SubStr(SRA->RA_CC,1,nSizeCli) < SubStr(TMW->TMW_CCDE,1,nSizeCli) .or. SubStr(SRA->RA_CC,1,nSizeCli) > SubStr(TMW->TMW_CCATE,1,nSizeCli)
				DbselectArea("TMW")
		      	Dbskip(-1)
		      	Loop
			Endif
		ElseIf lSigaMdtPS
	      	If SubStr(SRA->RA_CC,1,nSizeCli+nSizeLoj) < SubStr(TMW->TMW_CCDE,1,nSizeCli+nSizeLoj) .or. SubStr(SRA->RA_CC,1,nSizeCli+nSizeLoj) > SubStr(TMW->TMW_CCATE,1,nSizeCli+nSizeLoj)
				DbselectArea("TMW")
		      	Dbskip(-1)
		      	Loop
			Endif
		Endif
	Endif
	If Date() >= TMW->TMW_DTINIC .AND. Date() <= TMW->TMW_DTFIM
		cPcmso := TMW->TMW_PCMSO
		Exit
	Endif
	DbSkip(-1)
End

Dbselectarea("TM5X")
Dbgotop()
nOpca := 2
DEFINE MSDIALOG oDlg3 TITLE OemToAnsi(STR0004) From aSize[7],0 TO aSize[6],aSize[5] OF oMainWnd PIXEL //"Exames necessarios para o funcionario demitido"

	oPnlPai := TPanel():New(0,0,,oDlg3,,,,,CLR_WHITE,0,0,.F.,.F.) //TPANEL PAI
		oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

		oPnlTop := TPanel():New(0,0,,oPnlPai,,,,,CLR_WHITE,0,50,.F.,.F.)//TPANEL FILHO 1
		oPnlTop:Align := CONTROL_ALIGN_TOP

	@ 0.5,01  SAY OemToAnsi(STR0010) OF oPnlTop //"Matricula:"
	@ 0.5,05  MSGET MDTHideCpo( SRA->RA_MAT, "RA_MAT" ) Picture "@!" SIZE 40,10 WHEN .f. OF oPnlTop
	@ 0.5,16.8  SAY OemToAnsi(STR0011) OF oPnlTop //"Nome Funcionario:"
	@ 0.5,24  MSGET MDTHideCpo( SRA->RA_NOME, "RA_NOME" ) Picture "@!" SIZE 130,10 WHEN .f. OF oPnlTop
	@ 1.5,01  SAY OemToAnsi(STR0012) OF oPnlTop //"Qtd. Maxima de Dias do Intervalo entre o Ultimo Exame e a data de hoje:"
	@ 1.5,24  MSGET (Alltrim(Str(_nDias,3))+STR0009) Picture "@!" SIZE 60,10 WHEN .f. OF oPnlTop  //" dias"

	@ 30,8 BUTTON STR0036 SIZE 40,12 ACTION (A280ADDEX(),oMark:oBrowse:Refresh(.t.)) OF oPnlTop PIXEL //"I&ncluir Exame"

	oPnlMark := TPanel():New(0,0,,oPnlPai,,,,,CLR_WHITE,0,0,.F.,.F.) //TPANEL FILHO 2 PARA ARMAZENAR MSSELECT
		oPnlMark:Align := CONTROL_ALIGN_ALLCLIENT

		oMARK := MsSelect():NEW("TM5X","TM5_OK",,aTRB1,@lINVERTE,@cMARCA,{0,0,1000,1000},,,oPnlMark)
			oMark:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
			oMARK:bMARK := {|| MDTA280MAQ(cMarca,lInverte)}
			oMARK:oBROWSE:lHASMARK := .T.
			oMARK:oBROWSE:lCANALLMARK := .T.
			oMARK:oBROWSE:bALLMARK := {|| MDTA280INV(cMarca) }

	NgPopUp(asMenu,@oMenu3)
	oDlg3:bRClicked:= { |o,x,y| oMenu3:Activate(x,y,oDlg3)}
ACTIVATE MSDIALOG oDlg3 ON INIT EnchoiceBar(oDlg3,{|| nOpca := 1,oDlg3:End()},{|| nOpca := 2,oDlg3:End()})

If nOpca == 1
	NG280GERA()
Endif

Dbselectarea("TM5X")
Use
aRotina := aCLONE(OldRot)
RestArea(aArea)
lRefresh := .t.
Return .t.

//---------------------------------------------------------------------
/*/{Protheus.doc} A280TAREFA
Busca as tarefas que o funcionario exerce atualmente

@type Function

@param cMatSRA, Caracter, Indica a Matrícula do Funcionário

@return Array, Vetor comas Tarefas do Funcionário

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function A280TAREFA(cMatSRA)
Local dtIni := Date()
Local dtFim := Date()+1
Local aArea := Getarea()
Local lStart, aRet := {}

dbSelectArea("TN6")
dbSetOrder(2)
dbSeek(xFilial("TN6")+cMatSRA)
While !eof() .and. xFilial("TN6") == TN6->TN6_FILIAL .and. cMatSRA == TN6->TN6_MAT
	lStart  := .f.
	If TN6->TN6_DTINIC >= dtFim .or. (TN6->TN6_DTTERM < dtIni .and. !Empty(TN6->TN6_DTTERM))
		dbSelectArea("TN6")
		dbSkip()
		Loop
	Endif
	If TN6->TN6_DTINIC == dtIni
		lStart  := .t.
	Elseif TN6->TN6_DTINIC < dtIni .and. (TN6->TN6_DTTERM >= dtIni  .or. Empty(TN6->TN6_DTTERM))
		lStart  := .t.
	Endif
	If lStart
		dbSelectArea("TN5")
		dbSetOrder(1)
		If dbSeek(xFilial("TN5")+TN6->TN6_CODTAR)
			If aSCAN(aRet, {|x| Alltrim( X ) == Alltrim(TN6->TN6_CODTAR)}) < 1
				AADD(aRet,TN6->TN6_CODTAR)
			Endif
		Endif
	Endif
	dbSelectArea("TN6")
	dbSkip()
End
Restarea(aArea)
Return aRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA280INV
Inverte a marcacao do browse

@type Function

@param cMarca, Caracter, Indica o valor utilizado para marcação do MarkBrowse

@return Lógico, Sempre verdadeiro

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function MDTA280INV(cMarca)

Local aArea := GetArea()

Dbselectarea("TM5X")
Dbgotop()
While !eof()
	TM5X->TM5_OK := IF(TM5_OK == "  ",cMARCA,"  ")
	Dbskip()
End

RestArea(aArea)
Return .t.
//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA280MAQ
Inverte a marcacao do browse

@type Function

@param cMarca, Caracter, [Compatibilidade] Indica o valor utilizado para marcação do MarkBrowse
@param lInverte, Lógico, [Compatibilidade] Indica se inverte marcações

@return Lógico, Sempre verdadeiro

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function MDTA280MAQ(cMarca,lInverte)
Return .t.
//---------------------------------------------------------------------
/*/{Protheus.doc} NG280GERA
Grava os exames

@type Function

@return Lógico, Sempre verdadeiro

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function NG280GERA()

Local cCodCBO := ""

Dbselectarea("TM5X")
Dbgotop()
While !eof()
	If Empty(TM5X->TM5_OK)
		Dbskip()
		Loop
	Endif
	aFornec := {{"     "," "}}
	aFornec := NGUTILFOR(TM5X->EXAME)
	Dbselectarea("SRJ")
	Dbsetorder(1)
	Dbseek(xFilial("SRJ")+SRA->RA_CODFUNC)
	cCodCBO := SRJ->RJ_CBO
	If !Empty(SRJ->RJ_CODCBO)
		cCodCBO := SRJ->RJ_CODCBO
	Endif
	Dbselectarea("TM5")
	Dbsetorder(1)
	If !Dbseek(xFilial("TM5")+TM0->TM0_NUMFIC+DTOS(Date())+TM5X->EXAME)
		RecLock("TM5",.t.)
		TM5->TM5_FILIAL  := xFilial("TM5")
		TM5->TM5_NUMFIC  := TM0->TM0_NUMFIC
		TM5->TM5_EXAME   := TM5X->EXAME
		TM5->TM5_DTPROG  := Date()
		TM5->TM5_FORNEC  := aFornec[1][1]
		TM5->TM5_LOJA    := aFornec[1][2]
		TM5->TM5_FILFUN  := SRA->RA_FILIAL
		TM5->TM5_MAT     := SRA->RA_MAT
		TM5->TM5_ORIGEX  := If(!Empty(cPcmso),"2","1")
		TM5->TM5_PCMSO   := cPcmso
		TM5->TM5_INDRES  := "1"
		TM5->TM5_NATEXA  := "5"
		TM5->TM5_CC      := SRA->RA_CC
		TM5->TM5_CODFUN  := SRA->RA_CODFUNC
		TM5->TM5_CBO     := cCodCBO
		Msunlock('TM5')
	Endif
	Dbselectarea("TM5X")
	Dbskip()
End
Return .t.
//---------------------------------------------------------------------
/*/{Protheus.doc} A280GUIAEX
Imprimi guia de prestacao de servico

@type Function

@return Lógico, Sempre verdadeiro

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function A280GUIAEX()
Local oDlg,oScr,oCbox,o2Cbox,oCLi,oFOr, oMenu
Local nOpcc := 0
Local aExamesPS := {}
Local cFornec  := Space(If((TAMSX3("A2_COD")[1]) < 1,6,(TAMSX3("A2_COD")[1])))
Local cCliente := Space(If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1])))
Local cObsGuia := Space(40)
Local aOpcCbox := {STR0049,STR0050,STR0051} //"Em Disco"###"Via Spool"###"Via E-mail"
Local aOpc2Cbox := {"AMB","CBHPM"}
Local cCbox := STR0049 //"Em Disco"
Local c2Cbox := "AMB"
Local odtv, dDtval := CTOD("  /  /  ")

Dbselectarea("TM5X")
Dbgotop()
While !eof()
	If Empty(TM5X->TM5_OK)
		Dbskip()
		Loop
	Endif
	aAdd(aExamesPS,{TM5X->EXAME})
	Dbskip()
End
If Len(aExamesPS) == 0
	Dbselectarea("TM5X")
	Dbgotop()
	MsgStop(STR0028+; //"Não será possível imprimir a Guia de Prestação de Serviços, pois "
			STR0029,STR0030) //"não existe nenhum exame selecionado."###"AVISO"
	Return
Endif

DEFINE MSDIALOG oDlg TITLE STR0031 From 0,0 To 18,45 OF oMainWnd //"Parâmetros do Relatório"

@ 0,0   SCROLLBOX oScr VERTICAL SIZE 142,180 OF oDlg BORDER
@ 05,5  SAY STR0032 Of oScr Pixel //"Tipo Impressão"
@ 05,45 Combobox oCbox VAR cCbox ITEMS aOpcCbox SIZE 40,40 Pixel OF oScr
@ 25,5  SAY STR0033 Of oScr Pixel //"Fornecedor"
@ 25,45 MsGet oFor VAR cFornec Size 50,08 Picture "@!" F3 "SA2" Of oScr Pixel Valid Existcpo("SA2",cFornec) When .t.
@ 45,5  SAY STR0034 Of oScr Pixel //"Data Validade"
@ 45,45 MsGet oDtv VAR dDtVal Size 50,08 Picture "99/99/9999" Of oScr Pixel When .t.
@ 65,5  SAY STR0024 Of oScr Pixel //"Observação"
@ 65,45 MsGet cObsGuia Size 120,08 Picture "@!S40" Of oScr Pixel When .t.
@ 85,5  SAY STR0037 Of oScr Pixel //"PCMSO"
@ 85,45 MsGet cPcmso Size 50,08 Picture "@!" F3 "TMW" Of oScr Pixel ;
	Valid (If(Empty(cPcmso),.t.,Existcpo("TMW",cPcmso))) When .t.
@ 105,5  SAY STR0052 Of oScr Pixel //"Cód. Exame"
@ 105,45 Combobox o2Cbox VAR c2Cbox ITEMS aOpc2Cbox SIZE 40,40 Pixel OF oScr

DEFINE SBUTTON FROM 123,105 TYPE 1 ENABLE OF oScr ACTION EVAL({|| nOpcc := 1,oDlg:End()})
DEFINE SBUTTON FROM 123,135 TYPE 2 ENABLE OF oScr ACTION oDlg:End()

NgPopUp(asMenu,@oMenu)
oDlg:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}
ACTIVATE MSDIALOG oDlg CENTERED

If nOpcc == 1
	lPROC := .t.
	If lPrestSX6
		lDbskip := .t.
		If !Empty(TM0->TM0_CLIENT)
			cCliente := TM0->TM0_CLIENT
			lDbskip := .f.
		Endif
		If lDbskip
			If !Empty(Substr(TM0->TM0_CC,1,nSizeCli))
				cCliente := Substr(TM0->TM0_CC,1,nSizeCli)
				lDbskip := .f.
			Endif
		Endif
		If !Empty(Substr(SRA->RA_CC,1,nSizeCli)) .and. lDbskip
			cCliente := Substr(SRA->RA_CC,1,nSizeCli)
			lDbskip := .f.
		Endif
	Endif

	If lPROC
		NG280GERA()
	Endif
Endif

Dbselectarea("TM5X")
Dbgotop()
Return .t.

//---------------------------------------------------------------------
/*/{Protheus.doc} A280ADDEX
Inclui exame na lista de exames p/ GUIA

@type Function

@return Lógico, Sempre verdadeiro

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function A280ADDEX()
Local oDlg,oScr, oMenu
Local nOpcz := 0
Local cCodExa := Space( If(TAMSX3("TM4_EXAME")[1] < 1, 6, TAMSX3("TM4_EXAME")[1]) )

DEFINE MSDIALOG oDlg TITLE STR0038 From 0,0 To 8,30 OF oMainWnd //"Inclusão de Exame"

@ 00,00 SCROLLBOX oScr VERTICAL SIZE 122,180 OF oDlg BORDER
@ 10,05 SAY STR0025 Of oScr Pixel //"Exame"
@ 10,30 MsGet cCodExa Size 50,08 Picture "@!" F3 "TM4" Of oScr Pixel Valid fNG280Val(cCodExa) When .t.

DEFINE SBUTTON FROM 40, 40 TYPE 1 ENABLE OF oScr ACTION EVAL({|| nOpcz := 1,oDlg:End()})
DEFINE SBUTTON FROM 40, 70 TYPE 2 ENABLE OF oScr ACTION oDlg:End()

NgPopUp(asMenu,@oMenu)
oDlg:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}
ACTIVATE MSDIALOG oDlg CENTERED

If nOpcz == 1
	Dbselectarea("TM4")
	Dbsetorder(1)
	If Dbseek(xFilial("TM4")+cCodExa)
		Dbselectarea("TM5X")
		DbGotop()
		If !Dbseek(cCodExa)
			TM5X->(DbAppend())
			TM5X->TM5_OK := cMarca
			TM5X->EXAME  := TM4->TM4_EXAME
			TM5X->NOMEXA := TM4->TM4_NOMEXA
			TM5X->DTRESU := NGUTILUEX(TM0->TM0_NUMFIC,TM4->TM4_EXAME,StoD(""),2)
			TM5X->DIAS   := STR0055 //"INCLUIDO MANUALMENTE"
		Endif
	Endif
Endif

Dbselectarea("TM5X")
Dbgotop()
Return .t.

//---------------------------------------------------------------------
/*/{Protheus.doc} fNG280Val
Valida Código do Exame

@type Function

@param cCodExa, Caracter, Indica o código do exame

@return Lógico, Identifica se o código do exame é válido

@author Denis Hyroshi de Souza
@since 25/07/2003
/*/
//---------------------------------------------------------------------
Function fNG280Val(cCodExa)

If !Existcpo("TM4",cCodExa)
	Return .f.
Endif

If lSigaMdtps
	If !MdtTemTOL(/*Cliente*/,/*Loja*/,cCodExa,.T.)
		Return .f.
	Endif
Endif

Dbselectarea("TM5X")
DbGotop()
If Dbseek(cCodExa)
	MsgStop(STR0039,STR0030) //"Este exame já está incluido na lista de exames."###"AVISO"
	Return .f.
Endif

Return .t.
//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.

@type Function

@return aRotina  - 	Array com as opções de menu.
					Parametros do array a Rotina:
					1. Nome a aparecer no cabecalho
					2. Nome da Rotina associada
					3. Reservado
					4. Tipo de Transao a ser efetuada:
						1 - Pesquisa e Posiciona em um Banco de Dados
						2 - Simplesmente Mostra os Campos
						3 - Inclui registros no Bancos de Dados
						4 - Altera o registro corrente
						5 - Remove o registro corrente do Banco de Dados
					5. Nivel de acesso
					6. Habilita Menu Funcional

@sample MenuDef()

@author Rafael Diogo Richter
@since 29/11/2006
/*/
//---------------------------------------------------------------------
Static Function MenuDef()
Local lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .t. , .f. )
Local aRotina

If lSigaMdtps
	aRotina := { { STR0001,   "AxPesqui"  , 0 , 1},; //"Pesquisar"
	             { STR0002,   "NGCAD01"   , 0 , 2},; //"Visualizar"
	             { STR0054,   "MDT280SRA" , 0 , 4} } //"Funcionários"
Else
	aRotina :=	{{STR0001, "AxPesqui", 0, 1},;   //"Pesquisar"
				 {STR0002, "NGCAD01" , 0, 2},;   //"Visualizar"
				 {STR0003, "MDT280EX", 0, 2},;   //"Exames"
				 {STR0053, "GpLegend" , 0 , 6,,.F. }} //"Legenda"
Endif

Return aRotina
