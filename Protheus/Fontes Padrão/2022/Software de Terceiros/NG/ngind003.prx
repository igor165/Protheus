#INCLUDE "NGIND003.ch"
#Include "Protheus.ch"

//------------------------------------------------------------------------------
/*/{Protheus.doc} NGIND003
Programa de Cadastro de Variaveis Utilizadas nas Formulas

@author Denis Hyroshi de Souza
@since 01/07/2008
@version P11/P12
@return Bool
/*/
//------------------------------------------------------------------------------
Function NGIND003()

	//----------------------------------------------------------------
	//| Define o cabecalho da tela de atualizacoes                   |
	//----------------------------------------------------------------
	Private aRotina := MenuDef()
	Private cPROGRAMA := "NGIND003"
	Private cCadastro := OemtoAnsi(STR0001) //"VariÃ¡veis Utilizadas nas FÃ³rmulas"
	Private aSMENU := {}, aCHKDEL := {}, bNGGRAVA

	aAdd( aCHKDEL , {"TZ2->TZ2_CODVAR+Str(nModulo,2)" , "TZ6", 4 } )

	//----------------------------------------------------------------
	//| Endereca a funcao de BROWSE                                  |
	//----------------------------------------------------------------
	dbSelectArea("TZ2")
	Set Filter To TZ2->TZ2_MODULO == Str(nModulo,2)
	dbSetOrder(1)
	mBrowse( 6, 1,22,75,"TZ2")

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.

@author NG Informatica
@since 01/07/2008
@param	1. Nome a aparecer no cabecalho
		2. Nome da Rotina associada
		3. Reservado
		4. Tipo de Transaâ€¡â€žo a ser efetuada:
			1 - Pesquisa e Posiciona em um Banco de Dados
			2 - Simplesmente Mostra os Campos
			3 - Inclui registros no Bancos de Dados
			4 - Altera o registro corrente
			5 - Remove o registro corrente do Banco de Dados
		5. Nivel de acesso
		6. Habilita Menu Funcional
@version P11/P12
@return Array
/*/
//------------------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina :=	{ 	{ STR0002, "AxPesqui", 0, 1 },; //"Pesquisar"
                    		{ STR0003, "NGIND3IC", 0, 2 },; //"Visualizar"
                    		{ STR0004, "NGIND3IC", 0, 3 },; //"Incluir"
                    		{ STR0005, "NGIND3IC", 0, 4 },; //"Alterar"
                    		{ STR0006, "NGIND3IC", 0, 5, 3 } } //"Excluir"

Return aRotina

//------------------------------------------------------------------------------
/*/{Protheus.doc} NGIND3IC
Tela de manutencao do Indicador

@author Denis Hyroshi de Souza
@since 03/07/2008
@version P11/P12
@return NumÃ©rico
/*/
//------------------------------------------------------------------------------
Function NGIND3IC(cAlias, nRecno, nOpcx)

	Local _OldMemo:= nil
	Local _oldRel := nil
	Local __nOpca := nil
	Local _oldGrv := nil
	Local _Inclui := Inclui
	Local _Altera := Altera

	Private aColsTZ3 := {}

	If Type("aRelac") == "A"
		_oldRel := aClone(aRelac)
	Endif
	If Type("aMemos") == "A"
		_OldMemo := aClone(aMemos)
	Endif
	If Type("nOpca") == "N"
		__nOpca := nOpca
	Endif
	If Type("bNGGRAVA") != "U"
		_oldGrv := bNGGRAVA
	Endif

	aRelac := {}
	aMemos := {}

	aADD( aRelac , { "TZ2_MODULO" , "Str(nModulo,2)" } )
	dbSelectArea("SX3")
	dbSetOrder(2)
	If dbSeek("TZ2_DESCRI")
		aAdd(aMemos,{"TZ2_DESCRI","TZ2_MEMO1"})
	Endif

	//----------------------------------------------------------------
	//| Define filtro para os arquivos TZ2 e TZ3                     |
	//----------------------------------------------------------------
	dbSelectArea("TZ3")
	dbSetOrder(1)
	aCHOICE := {}
	aVARNAO := {}
	aGETNAO := { {"TZ3_CODVAR" , "M->TZ2_CODVAR"} ,{"TZ3_MODULO" , "'" + Str(nModulo,2) + "'"} }

	cGETWHILE := "TZ3_FILIAL == xFilial('TZ3') .AND. TZ3_CODVAR == M->TZ2_CODVAR .AND. TZ3_MODULO == '" + Str(nModulo,2) + "'"
	cGETMAKE  := "'" + Str(nModulo,2) + "' + M->TZ2_CODVAR"
	cGETKEY   := "'" + Str(nModulo,2) + "' + M->TZ2_CODVAR + M->TZ3_ORDEM"
	cGETALIAS := "TZ3"
	cTUDOOK   := "NG003AllOK()"
	cLINOK    := "NG003LinOK()"

	//Abre tela com registro da TZ2 e TZ3
	bNGGRAVA := nil
	If nOpcx == 3
		Inclui := .t.
		Altera := .f.
	ElseIf nOpcx == 4
		//ConsistÃªncia alteraÃ§Ã£o variaveis padrÃµes.
		If 'MNTV' == SubStr( TZ2->TZ2_CODVAR, 1, 4 ) .Or.;
			'MDTV' == SubStr( TZ2->TZ2_CODVAR, 1, 4 ) .Or.;
			'SGAV' == SubStr( TZ2->TZ2_CODVAR, 1, 4 )
			MsgInfo(STR0015,STR0012)//"NÃ£o Ã© permitida a alteraÃ§Ã£o de variÃ¡veis padrÃµes do sistema."##"AtenÃ§Ã£o"
			Return .F.
		EndIf

		aColsTZ3 := {}
		dbSelectArea("TZ3")
		dbSetOrder(1)
		dbSeek( xFilial("TZ3") + Str(nModulo,2) + TZ2->TZ2_CODVAR )
		While !Eof() .and. TZ3->TZ3_FILIAL == xFilial('TZ3') .AND. TZ3->TZ3_CODVAR == TZ2->TZ2_CODVAR .AND. TZ3->TZ3_MODULO == Str(nModulo,2)
			aAdd( aColsTZ3 , TZ3->TZ3_CODPAR )
			dbSkip()
		End
	ElseIf nOpcx == 5
		//ConsistÃªncia exclusÃ£o variaveis padrÃµes.
		If 'MNTV' == SubStr( TZ2->TZ2_CODVAR, 1, 4 ) .Or.;
			'MDTV' == SubStr( TZ2->TZ2_CODVAR, 1, 4 ) .Or.;
			'SGAV' == SubStr( TZ2->TZ2_CODVAR, 1, 4 )
			MsgInfo(STR0016,STR0012)//"NÃ£o Ã© permitida a exlusÃ£o de variÃ¡veis padrÃµes do sistema."##"AtenÃ§Ã£o"
			Return .F.
		EndIf
	Endif
	nRetCad := NGCAD02(cAlias, nRecno, nOpcx)

	aMemos := aClone(_OldMemo)
	aRelac := aClone(_oldRel)
	nOpca  := __nOpca
	Inclui := _Inclui
	Altera := _Altera
	bNGGRAVA := _oldGrv

Return nRetCad

//------------------------------------------------------------------------------
/*/{Protheus.doc} ValOrdTZ3
Valida o campo Ordem do parametro

@author Denis Hyroshi de Souza
@since 02/07/2008
@version P11/P12
@return LÃ³gico
/*/
//------------------------------------------------------------------------------
Function ValOrdTZ3(cTZ3_ORDEM)

	Local nOrdem := aSCAN(aHEADER, {|x| AllTrim(Upper(X[2])) == "TZ3_ORDEM" })
	Local lRet   := .t.
	Local nInd

	If Val(TZ3_ORDEM) == 0
		M->TZ3_ORDEM := Space(3)
		lRet := .f.
	Else
		M->TZ3_ORDEM := StrZero( Val(TZ3_ORDEM) , 3 )

		If !aCols[n,Len(aCols[n])] .and. nOrdem > 0
			For nInd := 1 To Len(aCols)
				If !aCols[nInd,Len(aCols[nInd])] .and. nInd <> n
					If aCols[nInd,nOrdem] == M->TZ3_ORDEM
						Help(" ",1,"JAEXISTINF")
						Return .f.
					Endif
				Endif
			Next nInd
		Endif

	Endif

	If nOrdem > 0
		aCols[n,nOrdem] := M->TZ3_ORDEM
	Endif

Return .t.

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG003LinOK
Valida ao sair de uma linha no GetDados

@author Denis Hyroshi de Souza
@since 02/07/2008
@version P11/P12
@return LÃ³gico
/*/
//------------------------------------------------------------------------------
Function NG003LinOK()

	Local aParFun := {} //array para definir validar quantidade de linhas da Getdados.
	Local xx      := 0
	Local nX
	Local nPosOrd := aSCAN( aHEADER, { |x| Trim(Upper(x[2])) == "TZ3_ORDEM"  })
	Local nPosCod := aSCAN( aHEADER, { |x| Trim(Upper(x[2])) == "TZ3_CODPAR" })
	Local cNomFun := "" //Variavel que recebe nome da FunÃ§Ã£o para validaÃ§Ã£o dos parametros.
	Local lOK 	  := .T.

	If M->TZ2_TIPO == "1"
		cNomFun := M->TZ2_FUNCAO
	ElseIf M->TZ2_TIPO == "2"
		cNomFun := "U_"+M->TZ2_FUNCAO
	Endif
	//Validação para verificar a quantidade de linhas da getdados
	If !Empty(cNomFun)
		//Ao incluir o numero maximo de linhas deverá ser o que vier da Função.
		If Inclui
			aParFun := GetFuncPrm(cNomFun)
			oGet:nMax := Len(aParFun) //Limita a quantidade de linhas da GetDados a quantidade de parÃ¢metros da funÃ§Ã£o

		//Ao alterar o numero maximo de linhas deverá ser o que possuir no acols
		//Por que ao Incluir poderá ser deletado algum parametro(Linha) e ao alterar o registro será possivel
		//incluir uma nova linha no lugar da deletada.
		ElseIf Altera
			aParFun := GetFuncPrm(cNomFun)
			If Len( aCOLS ) > 0
				oGet:nMax := Len(aCOLS) //Limita a quantidade de linhas da GetDados a quantidade de parÃ¢metros da funÃ§Ã£o
			EndIf
		EndIf
	EndIf

	//Verifica se existem parametros na função
	If Len(aParFun) > 0
		//Se o item ñ estiver excluido e se possuir algum campo vazio deverá validar
		If !aCOLS[n][len(aCOLS[n])] .And. ( Empty(aCOLS[n][nPosOrd]) .Or. Empty(aCOLS[n][nPosCod]) )
			MsgInfo(STR0007,STR0008) //"Os campos Cod. Paramet e Ordem são obrigatórios.
			lOK := .F.
		EndIf
	Else
		Help(" ",1,"REGNOIS")
		lOK := .F.
	EndIf

	If lOk
		If nPosOrd > 0 .and. nPosCod > 0
			For nX := 1 to Len(aCOLS)
				If nx <> n .and. !aCOLS[nX][len(aCOLS[nX])]
					If aCOLS[nX][nPosOrd] == aCOLS[n][nPosOrd] .OR. aCOLS[nX][nPosCod] == aCOLS[n][nPosCod]
						xx++
						Exit
					Endif
				EndIf
			Next
		Endif

		If xx > 0
			Help(" ",1,"JAEXISTINF")
			lOK := .F.
		Endif
	EndIf
	PutFileInEof("TZ3")

Return lOK

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG003AllOK
Valida ao sair da GetDados

@author Denis Hyroshi de Souza
@since 02/07/2008
@version P11/P12
@return LÃ³gico
/*/
//------------------------------------------------------------------------------
Function NG003AllOK()

	Local xx := 0
	Local nX,nXX
	Local nPosOrd := aSCAN( aHEADER, { |x| Trim(Upper(x[2])) == "TZ3_ORDEM"  })
	Local nPosCod := aSCAN( aHEADER, { |x| Trim(Upper(x[2])) == "TZ3_CODPAR" })

	If nPosOrd > 0 .and. nPosCod > 0
		For nX := 1 to Len(aCOLS)
			If !aCOLS[nX][len(aCOLS[nX])]
				If Empty(aCOLS[nX][nPosOrd]) .OR. Empty(aCOLS[nX][nPosCod])
					MsgInfo(STR0007,STR0008+Alltrim(Str(nX)) ) //"Os campos Cod. Paramet e Ordem sÃ£o obrigatÃ³rios."###"Problema na linha "
					Return .f.
				Endif
			EndIf
		Next
	Endif

	If Altera .and. Len(aColsTZ3) > 0
		aDelTZ3 := {}
		For nX := 1 to Len(aColsTZ3)
			If aSCAN( aCols, { |x| x[nPosCod] == aColsTZ3[nX] .and. !x[len(x)] }) == 0
				aAdd( aDelTZ3 , aColsTZ3[nX] )
			Endif
		Next nX

		//Se confirmou a alteracao, verifica se existem parametros fixos 'sem referencia'
		aRegVar := {}
		dbSelectArea("TZ6")
		dbSetOrder(4)
		dbSeek(xFilial("TZ6") + TZ2->TZ2_CODVAR + Str(nModulo,2) )
		While !Eof() .and. xFilial("TZ6") + TZ2->TZ2_CODVAR + Str(nModulo,2) == TZ6->( TZ6_FILIAL + TZ6_CODVAR + TZ6_MODULO )
			aAdd( aRegVar , TZ6->TZ6_CODIND )
			dbSkip()
		End

		cMsgPar := ""
		For nX := 1 To Len(aDelTZ3)

			//Se parametro nao pode ser excluido
			lNaoExclui := .f.

			For nXX := 1 To Len(aRegVar)

				//Verifica os parametros fixos ou obrigatorios Por Indicador
				dbSelectArea("TZ7")
				dbSetOrder(1)
				If dbSeek( xFilial("TZ7") + Str(nModulo,2) + aRegVar[nXX] + "2" + aDelTZ3[nX] )
					lNaoExclui := .t.
					Exit
				Endif

				dbSelectArea("TZ7")
				dbSetOrder(1)
				If dbSeek( xFilial("TZ7") + Str(nModulo,2) + aRegVar[nXX] + "1" + aDelTZ3[nX] )
					lTZ3one := .f.

					dbSelectArea("TZ6")
					dbSetOrder(1)
					dbSeek( xFilial("TZ6") + Str(nModulo,2) + aRegVar[nXX] )
					While !Eof() .and. xFilial("TZ6") + Str(nModulo,2) + aRegVar[nXX] == TZ6->( TZ6_FILIAL + TZ6_MODULO + TZ6_CODIND )
						If TZ6->TZ6_CODVAR <> TZ2->TZ2_CODVAR
							dbSelectArea("TZ3")
							dbSetOrder(3)
							If dbSeek( xFilial("TZ3") + TZ6->TZ6_CODVAR + TZ7->TZ7_CODPAR + Str(nModulo,2) )
								lTZ3one := .t.
								Exit
							Endif
						Endif
						dbSelectArea("TZ6")
						dbSkip()
					End
					If !lTZ3one
						lNaoExclui := .t.
						Exit
					Endif
				Endif

			Next nXX

			If lNaoExclui
				If !Empty(cMsgPar)
					cMsgPar += ", " + Alltrim(aDelTZ3[nX])
				Else
					cMsgPar := Alltrim(aDelTZ3[nX])
				Endif
			Endif

		Next nX

		dbSelectArea("TZ3")
		dbSetOrder(1)
		If !Empty(cMsgPar)
			cMsgPar := STR0009+; //"Os seguintes parÃ¢metros nÃ£o poderÃ£o ser excluÃ­dos, "
					   STR0010+Chr(13) + Chr(10)+; //"pois estÃ£o sendo utilizados no arquivo ParÃ¢metros Por Indicador (TZ7)."
					   STR0011 + cMsgPar //"ParÃ¢metros: "
			MsgInfo(cMsgPar,STR0012) //"AtenÃ§Ã£o"
			Return .f.
		Endif
	Endif

Return .t.

//------------------------------------------------------------------------------
/*/{Protheus.doc} ValFunTZ2
Valida o campo Ordem do parametro

@author Denis Hyroshi de Souza
@since 02/07/2008
@version P11/P12
@return LÃ³gico
/*/
//------------------------------------------------------------------------------
Function ValFunTZ2(cTZ2_TIPO,cTZ2_FUNCAO)

	Local cNomFun 	:= Alltrim(cTZ2_FUNCAO)
	Local nPos1   	:= aScan(aHeader, {|x| AllTrim(Upper(X[2])) == "TZ3_ORDEM"  })
	Local nPos4   	:= aScan(aHeader, {|x| AllTrim(Upper(X[2])) == "TZ3_VIRPAR" })
	Local nXX		:= 0
	Local aColsNul	:= BlankGetd(aHeader)
	Local aParFun	:= {}
	Local aArea     := GetArea()
	Local lNGIND00C	:= ExistBlock("NGIND00C")

	If ReadVar() == "M->TZ2_TIPO" .And. Empty(cTZ2_FUNCAO)
		Return .T.
	EndIf

	If At("(",cNomFun) > 0 .or. At(")",cNomFun) > 0
		MsgInfo(STR0013,STR0012) //"Informe apenas o nome da funÃ§Ã£o, sem os parÃªnteses."###"AtenÃ§Ã£o"
		Return .f.
	Endif

	If cTZ2_TIPO == "2"
		cNomFun := "U_" + cNomFun
	Endif

	If !FindFunction(cNomFun) .or. At(" ",cNomFun) > 0
		MsgInfo(STR0014,STR0012) //"FunÃ§Ã£o nÃ£o existe no repositÃ³rio."###"AtenÃ§Ã£o"
		Return .F.
	Endif

	If ReadVar() <> "M->TZ2_TIPO"
		aParFun := GetFuncPrm(cNomFun)

		//Para a função ser utilizada nos indicadores, é obrigatorio que está possua parametros.
		If Len(aParFun) == 0
			Help(NIL, 1, STR0012, NIL, STR0020, 2, 0, NIL, NIL, NIL, NIL, NIL, {""}) //Atenção#"A função não possui parâmetros. Para que esta função seja utilizada como uma variavél é necessario que a mesma tenha parâmetros."
			Return .F.
		EndIf

		If cTZ2_TIPO == "1"
			oGet:nMax := Len(aParFun) //Limita a quantidade de linhas da GetDados a quantidade de parÃ¢metros da funÃ§Ã£o
		EndIf

		For nXX := 1 to Len(aParFun)
			nPosX := aScan(aCols, {|x| Val(x[nPos1]) == nXX .and. !x[len(x)] })
			If nPosX > 0
				aCols[nPosX,nPos4] := Posicione("TZ4",2,xFilial("TZ4")+aParFun[nXX],"TZ4_DESCRI")
			ElseIf Len(aColsNul) > 0
				If lNGIND00C
					lRetorno := ExecBlock("NGIND00C",.F.,.F.,aParFun[nXX])
					If ValType(lRetorno) <> "L"
						lRetorno := .T.
					EndIf
					If lRetorno
						aAdd(aCols, aClone(aColsNul[1]) )
						nPosx := Len(aCols)
						aCols[nPosX,nPos1] := StrZero(nXX,3)
						aCols[nPosX,nPos4] := Posicione("TZ4",2,xFilial("TZ4")+aParFun[nXX],"TZ4_DESCRI")
					EndIf
				Else
					aAdd(aCols, aClone(aColsNul[1]) )
					nPosx := Len(aCols)
					aCols[nPosX,nPos1] := StrZero(nXX,3)
					aCols[nPosX,nPos4] := Posicione("TZ4",2,xFilial("TZ4")+aParFun[nXX],"TZ4_DESCRI")
				EndIf
			EndIf
		Next nXX
		aSize(aCols,Len(aParFun))
		aSort(aCols,,, { |x, y| If(x[len(x)],"2","1")+x[nPos1] < If(y[len(y)],"2","1")+y[nPos1] } )

		oGet:oBrowse:Refresh()
	EndIf

	RestArea(aArea)

Return .t.

//------------------------------------------------------------------------------
/*/{Protheus.doc} NGTZ3INIT
Inicializa o campo TZ3_ORDEM

@author Denis Hyroshi de Souza
@since 02/07/2008
@version P11/P12
@return LÃ³gico
/*/
//------------------------------------------------------------------------------
Function NGTZ3INIT()

	Local nRet := 0
	Local nPos,nInd

	If Type("aCols") == "A" .and. Type("aHeader") == "A"
		nPos := aSCAN( aHEADER, { |x| Trim( Upper(x[2]) ) == "TZ3_ORDEM"})
		If nPos > 0
			For nInd := 1 To Len(aCols)
				If ValType(aCols[nInd,nPos]) == "C"
					If Val( aCols[nInd,nPos] ) > nRet
						nRet := Val( aCols[nInd,nPos] )
					Endif
				Endif
			Next nInd
		Endif
	Endif

	nRet++
Return StrZero(nRet,3)

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG003RELA
Relacao do campo Parametro

@author Denis Hyroshi de Souza
@since 02/07/2008
@version P11/P12
@return Caracter
/*/
//------------------------------------------------------------------------------
Function NG003RELA()

	Local cRet := Space(30)
	Local aParFun
	Local cNomFun := M->TZ2_FUNCAO
	Local aArea   := GetArea()

	If M->TZ2_TIPO == "2"
		cNomFun := "U_" + cNomFun
	Endif

	If FindFunction(cNomFun)
		aParFun := GetFuncPrm(cNomFun)
		nOrdTZ3 := Val(TZ3->TZ3_ORDEM)
		If nOrdTZ3 > 0 .and. Len(aParFun) >= nOrdTZ3
			cRet := Posicione("TZ4",2,xFilial("TZ4")+aParFun[nOrdTZ3],"TZ4_DESCRI")
		Endif
	Endif

	RestArea(aArea)

Return cRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} NG003VALID
ValidaÃ§Ã£o do campo TZ2_CODVAR

@author Bruno Lobo de Souza
@since 24/08/2016
@version P11/P12
@return LÃ³gico
/*/
//------------------------------------------------------------------------------
Function NG003VALID(cField)

	Local lRet := .T.

	If cField == "TZ2_CODVAR"
		lRet := ExistChav("TZ2",Str(nModulo,2)+M->TZ2_CODVAR)
		If Inclui .And. lRet
			If 'MNTV' == SubStr( M->&cField., 1, 4 ) .Or.;
				'MDTV' == SubStr( M->&cField., 1, 4 ) .Or.;
				'SGAV' == SubStr( M->&cField., 1, 4 )
				lRet := .F.
				ShowHelpDlg( STR0017,; //"Prefixo invalido"
					{ STR0018, "" }, 2,; // "Os prefixos 'MNTV', 'MDTV' e 'SGAV', sÃ£o reservados pelo sistema e nÃ£o pode ser utilizados."
					{ STR0019, "" }, 2 ) // "Altere o prefixo do cÃ³digo da variavel."
			EndIf
		EndIf
	EndIf

Return lRet
