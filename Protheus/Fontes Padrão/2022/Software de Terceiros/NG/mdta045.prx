#INCLUDE "MDTA045.ch"
#Include "Protheus.ch"
#INCLUDE "FWMVCDEF.CH"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA045
Programa para cadastrar Exames por Fornecedor e o preco de cada exame.

@return .T.

@author Marcio Costa - Refeito por: Guilherme Freudenburg
@since 03/01/00 - Revisão: 21/08/2015

/*/
//---------------------------------------------------------------------
Function MDTA045()

	// Armazena as variáveis
	Local aNGBEGINPRM := NGBEGINPRM(  )
	Local oBrowse

	Private aRotina := MenuDef()

	DbSelectArea( "SA2" )
	DbSetOrder( 1 )

	DbSelectArea( "TMD" )
	DbSetOrder( 1 )

	oBrowse := FWMBrowse():New()
	oBrowse:SetAlias( "SA2" )			// Alias da tabela utilizada
	oBrowse:SetMenuDef( "MDTA045" )		// Nome do fonte onde esta a função MenuDef
	oBrowse:SetDescription( STR0006 )	// Descrição do browse ###"Fornecedores de Exames"
	oBrowse:Activate()

	// Devolve as variáveis armazenadas
	NGRETURNPRM( aNGBEGINPRM )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Definição do Menu (padrão MVC).

@author Rafael Diogo Richter - Refeito por: Guilherme Freudenburg
@since 29/11/2006  - Revisão: 21/08/2015

@return aRotina array com o Menu MVC
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina := {}

	ADD	OPTION	aRotina	Title	STR0001	Action	"AxPesqui"			OPERATION	1	ACCESS	0 //"Pesquisar"
	ADD	OPTION	aRotina	Title	STR0002	Action	"VIEWDEF.MDTA045"	OPERATION	2	ACCESS	0 //"Visualizar"
	ADD	OPTION	aRotina	Title	STR0003	Action	"VIEWDEF.MDTA045"	OPERATION	3	ACCESS	0 //"Incluir"
	ADD	OPTION	aRotina	TITLE	STR0004	ACTION	"VIEWDEF.MDTA045"	OPERATION	4 	ACCESS	0 //"Alterar"
	ADD	OPTION	aRotina	TITLE	STR0005	ACTION	"VIEWDEF.MDTA045"	OPERATION	5	ACCESS	0 //"Excluir"

Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Definição do Modelo (padrão MVC).

@author Guilherme Freudenburg
@since 21/08/215

@return oModel objeto do Modelo MVC
/*/
//---------------------------------------------------------------------
Static Function ModelDef()

	// Cria a estrutura a ser usada no Modelo de Dados
	Local oStruSA2 := FWFormStruct( 1, 'SA2', /*bAvalCampo*/  , /*lViewUsado*/ )
	Local oStruTMD := FWFormStruct( 1, 'TMD', /*bAvalCampo*/  , /*lViewUsado*/ )
	Local oModelSA2

	//Retira campo obrigatório do Model, já que não será apresentado
	oStruTMD:RemoveField( 'TMD_FORNEC' ) //Retira o campo de fornecedor da Grid
	oStruTMD:RemoveField( 'TMD_LOJA'   ) //Retira o campo de Loja da Grid
	oStruTMD:RemoveField( 'TMD_NREDUZ' ) //Retira o campo Nome Fantasia do fornecedor

	// Cria o objeto do Modelo de Dados
	oModelSA2 := MPFormModel():New('MDTA045', /*bPreValid*/,{|oModelSA2| ValRelac(oModelSA2)} /*bPosValid*/, /*bCommit*/, /*bCancel*/ )

	// Adiciona ao modelo uma estrutura de formulário de edição por campo
	oModelSA2:AddFields( 'MODELMDTA045', /*cOwner*/, oStruSA2, /*bLOkVld*/, /*bTOkVld*/, /*bCarga*/ )

	// Adiciona Grid no modelo
	oModelSA2:AddGrid( 'MDTA045_TMD', 'MODELMDTA045', oStruTMD,/*bLinePre*/, { |oStruTMD| MDT045LIN() } /* bLinePost*/, /*bPre*/, { |oStruTMD| MDT045TUDO() } /*bPost*/,/*bLoad*/)

	// Faz relaciomaneto entre o Model e a Grid
    oModelSA2:SetRelation( 'MDTA045_TMD', { { 'TMD_FILIAL', 'xFilial( "TMD" )' }, { 'TMD_FORNEC', 'M->A2_COD' }, { 'TMD_LOJA' , 'M->A2_LOJA' } }, TMD->(IndexKey( 1 ) ) )

	// Adiciona a descricao do Modelo de Dados
	oModelSA2:SetDescription( STR0006 ) // "Fornecedores de Exames"

	// Adiciona a descricao do Componente do Modelo de Dados
	oModelSA2:GetModel( 'MODELMDTA045' ):SetDescription( STR0006 ) // "Fornecedores de Exames"
	oModelSA2:GetModel( 'MDTA045_TMD' ):SetDescription( STR0022 ) // "Exames"

	// Indica que é opcional ter dados informados na Grid
	oModelSA2:GetModel( 'MDTA045_TMD' ):SetOptional( .T. )

	//Trava campos do Modelo quando for Alterar ou Visualizar
	oModelSA2:GetModel( 'MODELMDTA045' ):SetOnlyView ( .T. )

Return oModelSA2

//---------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Definição da View (padrão MVC).

@author Guilherme Freudenburg
@since 21/08/2015

@return oView objeto da View MVC
/*/
//---------------------------------------------------------------------
Static Function ViewDef()

	// Cria um objeto de Modelo de Dados baseado no ModelDef do fonte informado
	Local oModelSA2   := FWLoadModel( 'MDTA045' )

	// Cria a estrutura a ser usada na View
	Local oStruSA2 := FWFormStruct( 2, 'SA2' )
	Local oStruTMD := FWFormStruct( 2, 'TMD' )
	Local oView

	//Remove o campo repetido da GetDados
	oStruTMD:RemoveField( 'TMD_FORNEC' ) //Retira o campo de fornecedor da Grid
	oStruTMD:RemoveField( 'TMD_LOJA'   ) //Retira o campo de Loja da Grid
	oStruTMD:RemoveField( 'TMD_NREDUZ' ) //Retira o campo Nome Fantasia do fornecedor

	//Retira o campo da tela
	oStruSA2:RemoveField( 'A2_DDI' ) //Remove o campo de DDI do Modelo

	// Cria o objeto de View
	oView := FWFormView():New()

	// Define qual o Modelo de dados será utilizado
	oView:SetModel( oModelSA2 )

	//Adiciona no nosso View um controle do tipo FormFields(antiga enchoice)
	oView:AddField( 'VIEW_MDTA045', oStruSA2, 'MODELMDTA045' )

	//Adiciona um titulo para o formulário
	oView:EnableTitleView( 'VIEW_MDTA045', STR0006 ) // "Fornecedores de Exames"

	//Adiciona Grid na interface
	oView:AddGrid( 'VIEW_GRID', oStruTMD, 'MDTA045_TMD' )

	//Adiciona um titulo para o grid
	oView:EnableTitleView( 'VIEW_GRID', STR0022 ) // "Exames"

	// Criar um "box" horizontal para receber algum elemento da view
	oView:CreateHorizontalBox( 'FORMFIELD'  , 50 )
	oView:CreateHorizontalBox( 'FORMFIELD2' , 50 )

	// Relaciona o ID da View com o "box" para exibicao
	oView:SetOwnerView( 'VIEW_MDTA045', 'FORMFIELD' )
	oView:SetOwnerView( 'VIEW_GRID', 'FORMFIELD2' )

Return oView

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT045VLIN
Valida a alteracao do exame, se este ja esta gravado
Uso MDTA045 - When de Campos

@return Nil

@sample
MDT045VLIN()

@author Jackson Machado
@since 21/08/2012
/*/
//---------------------------------------------------------------------
Function MDT045VLIN()
	//Deixada funcao pois adequacao seria mais simples - P.O.G.
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT045FIM

Validação campo TMD_DTFIM
Uso MDTA045

@return lRet

@sample
MDT045FIM()

@author Bruno Lobo de Souza
@since 27/06/2014
/*/
//---------------------------------------------------------------------
Function MDT045FIM()

	Local lRet := .T. //Variavel de retorno
	Local dDtPeq //Data de Programação
	Local dDtMax := StoD( Space( 8 ) ) //Data Fim - Inicializada vazia para fins de comparação
	Local nPOS, nDtFim
	Local nMaior := 0
	Local nX := 0
	Local nLinha := 1
	Local lMdt045 := .F. //Verifica se é a rotina de Fornecedor de Exames
	Local lExaFunc := .F. //Verifica se é chamado pela rotina de Ficha Médica Mod 2 e pelo Exame do Func.
	Local cExame := "", cFornec := "", cLoja := ""

	//Variaveis do modelo MVC
	Local oModel, oGrid
	Local aSaveLines

	If IsIncallStack( "MDTA045" ) //Caso seja Fornecedor de Exames
		lMdt045 	:= .T. // Rotina de Fornecedor de Exames
		oModel		:= FWModelActivate()	//Seleciona Model
		oGrid		:= oModel:GetModel( "MDTA045_TMD" )//Seleciona  Grid
		dDtFim		:=	oGrid:GetValue( "TMD_DTFIM" )	//Data Fim
		dDtInic		:= 	oGrid:GetValue( "TMD_DTINIC" ) 	//Data Inicio
	//Caso seja chamado pela Ficha Médica Mod.2, Exames do Func. ou Ocorrencias da ficha
	ElseIf IsIncallStack( "MDTA410" ) .Or. IsIncallStack( "MDTA120" ) .Or. IsIncallStack( "MDTA110" )
		lExaFunc	:= .T.
		dDtInic		:= M->TMD_DTINIC	//Data Inicio
		dDtFim		:= M->TMD_DTFIM 	//Data Fim
		cExame		:= M->TMD_EXAME	//Exame
		cFornec	:= M->TMD_FORNEC	//Forencedor
		cLoja		:= M->TMD_LOJA	//Loja
	Else
		dDtInic		:= M->TMD_DTINIC //Data Inicio
		dDtFim		:= M->TMD_DTFIM  //Data Fim
		nPOS		:= GDFieldPos("TMD_EXAME" , aHeader )
		nDtFim		:= GDFieldPos("TMD_DTFIM" , aHeader )
	EndIf

	If Empty( dDtInic ) .And. !Empty( dDtFim )
		Help( " " , 1 , STR0008 ,, STR0014 + CRLF + STR0015 , 4 , 5 )//"Atenção"##"O campo Data início está em branco."##"Informe uma data início."
		lRet := .F.
	ElseIf !Empty( dDtFim )
		If dDtFim < dDtInic //Caso data fim seja menor que a inicial
			Help( " " , 1 , STR0008 ,, STR0011 + CRLF + STR0012 + DtoC( dDtInic ) + STR0013 + Dtoc( dDtFim ) , 4 , 5 )//"Atenção" "A Data 'Fim' não pode ser menor que a data 'Inicio'"
			lRet := .F.																											//"Insira uma Data 'Fim' superior a: "##", ou uma Data 'Inicio' inferior a: "
		Else//Caso a Data fim seja maior, verifica se existe alguma exame já realizado.
			Dbselectarea( "TM5" )//Verifica se o exame esta sendo utilizado
			Dbsetorder( 2 )
			If Dbseek( xFilial( "TM5" ) + If( lExaFunc , cExame , If( lMdt045 , oGrid:GetValue('TMD_EXAME') , aCols[ n , nPOS ] ) ) + If(lExaFunc,cFornec,M->A2_COD) )
				While TM5->( !Eof() ) .And. TM5->TM5_EXAME == If( lExaFunc , cExame , If( lMdt045 , oGrid:GetValue('TMD_EXAME') , aCols[ n , nPOS ] ) ) ;
						.And. TM5->TM5_FORNEC == If(lExaFunc,cFornec,M->A2_COD)
					If If(lExaFunc,cLoja,M->A2_LOJA) == TM5->TM5_LOJA
						dDtPeq := TM5->TM5_DTPROG //Adiciona a data programada
						dDtMax := dDtFim //Recebe a data fim
						If dDtMax < dDtPeq
							dDtMax := dDtPeq
						EndIf
					EndIf
					TM5->( dbSkip() )
				End

				If !lExaFunc //Caso não seja Ficha Médica ou Exames do Func.
					//Verifica se já existe o mesmo exame com uma data maior.
					nLinha := oGrid:GetLine() //linha do registro incluso
					aSaveLines := FWSaveRows()
					For nX:=1 to oGrid:Length()
						oGrid:GoLine( nX )
						If nLinha <> oGrid:GoLine( nX ) .And. If( lExaFunc , cExame , If( lMdt045 , oGrid:GetValue('TMD_EXAME' , nLinha ) , aCols[ n , nPOS ] ) ) == If( lExaFunc , cExame , If( lMdt045 , oGrid:GetValue( "TMD_EXAME" ) , aCols[ nX , nPOS ] ) ) ;
										.And. ( If( lExaFunc , dDtFim , If( lMdt045 , oGrid:GetValue( "TMD_DTFIM" ) , aCols[ nX , nDtFim ]  ) ) >= dDtMax ) ;
										.Or. ( Empty( ( If( lExaFunc , dDtFim , If( lMdt045 , oGrid:GetValue( "TMD_DTFIM" ) , aCols[ nX , nDtFim ]  ) ) ) ) )
							nMaior++
							Exit
						Endif
					Next nX
					FWRestRows( aSaveLines )
				Endif

				If dDtFim < dDtMax .And. nMaior == 0	//Caso Data Fim seja menor que a do exame
					lRet := .F.
					Help( " " , 1 , STR0008 ,, STR0020 + CRLF + STR0021 , 4 , 5 )//"ATENÇÃO"##"A data fim está menor que a data utilizada no exame."##"Favor informar uma data fim maior que a data que está sendo utilizada no exame."
				Endif
			Endif
		EndIf
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT045LIN
Função responsavel pela validação da GetDados.

@return lRet

@sample
MDTA045

@author Guilherme Freudenburg
@since 29/07/2015
/*/
//---------------------------------------------------------------------
Function MDT045LIN()

	Local lRet := .T. //Variavel de retorno

	//Variais utilizadas no Model
	Local oModel 		:= FWModelActive() //Copia o Model utilizado.
	Local oGrid 		:= oModel:GetModel( 'MDTA045_TMD' ) //Posiciona no Model da Grid
	oGrid:GetLine() //Linha posicionada

	If Empty( oGrid:GetValue( "TMD_DTINIC" ) ) .And. !Empty( oGrid:GetValue( "TMD_EXAME" ) )
		Help( " " , 1 , STR0008 ,, STR0014 + CRLF + STR0015 , 4 , 5 )//"Atenção"##"O campo Data início está em branco."##"Informe uma data início."
		lRet := .F.
	Endif

	PutFileInEof( 'TMD' )

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT045TUDO
Função responsavel pela validação da GetDados.

@return lRet

@sample
MDTA045

@author Guilherme Freudenburg
@since 29/07/2015
/*/
//---------------------------------------------------------------------
Function MDT045TUDO()

	Local lRet := .T. //Variavel de retorno
	Local nX := 0
	Local nY := 0
	Local cExamenX, dDataIninX, dDataFimnX
	Local cExamenY, dDataIninY, dDataFimnY
	Local aArea := GetArea() //Salva área posicionada
	Local cError, dDataIErro, dDataFErro

	//Variais utilizadas no Model
	Local oModel 	:= FWModelActive() //Copia o Model utilizado.
	Local oGrid 	:= oModel:GetModel( 'MDTA045_TMD' ) //Posiciona no Model da Grid
	Local aSaveLines := FWSaveRows()

	For nX := 1 To oGrid:Length()

		oGrid:GoLine( nX )	//Posiciona na linha
		cExamenX 	:= oGrid:GetValue( "TMD_EXAME" )	//Exame
		dDataIninX	:= oGrid:GetValue( "TMD_DTINIC" )	//Data Inicial
		dDataFimnX	:= oGrid:GetValue( "TMD_DTFIM" )	// Data Final

		If !oGrid:IsDeleted(  nX  )
			For nY := 1 To oGrid:Length()

				oGrid:GoLine( nY )	//Posiciona na linha
				cExamenY 	:= oGrid:GetValue( "TMD_EXAME" )	//Exame
				dDataIninY	:= oGrid:GetValue( "TMD_DTINIC" )	//Data Inicial
				dDataFimnY	:= oGrid:GetValue( "TMD_DTFIM" )	// Data Final

				If nY <> nX .And. lRet .And. !oGrid:IsDeleted(  nY  )
					If cExamenX == cExamenY //Verifica se é o mesmo exame
						If ( dDataIninX < dDataIninY .And. ( dDataFimnX > dDataIninY .Or. Empty( dDataFimnX ) ) ) .Or. ; // Verifica se existe um exame dentro do mesmo periodo
							( dDataIninX > dDataIninY .And. ( dDataIninX <= dDataFimnY .Or. Empty( dDataFimnY ) ) ) .Or.;
							( dDataIninX == dDataIninY .Or. dDataFimnX == dDataFimnY )

							Help( " " , 1 , STR0008 ,, STR0018 + CRLF + STR0019 , 4 , 5 )//ATENÇÃO##"Existe um exame de código repetido que está dentro do mesmo período que o outro."##"Favor alterar a data para um novo período."
							lRet := .F.
							Exit
						Endif
					EndIf
				EndIf
			Next nY
		Else//Verifica caso registro for excluido.

			Dbselectarea( "TM5" )
			Dbsetorder( 2 )
			If Dbseek( xFilial( "TM5" ) +  oGrid:GetValue( "TMD_EXAME" ) + M->A2_COD )
				While !eof() .and. xFilial( "TM5" ) +  oGrid:GetValue( "TMD_EXAME" ) + M->A2_COD == TM5->( TM5_FILIAL + TM5_EXAME + TM5_FORNEC )
					If M->A2_LOJA == TM5->TM5_LOJA .And. TM5->TM5_DTPROG >=  oGrid:GetValue( "TMD_DTINIC" );
														.And. If( !Empty(  oGrid:GetValue( "TMD_DTFIM" ) ) , TM5->TM5_DTPROG <=  oGrid:GetValue( "TMD_DTFIM" ) , .T. );
														.And. !Empty(  oGrid:GetValue( "TMD_DTINIC" ) ) .And. lRet
						cError := oGrid:GetValue( "TMD_EXAME" ) // Exame
						dDataIErro:= oGrid:GetValue( "TMD_DTINIC" ) // Data Inicial
						dDataFErro:= oGrid:GetValue( "TMD_DTFIM" ) // Data Final
						//"ATENÇÃO" ## "Não é permitido a exclusão do exame " ## cError ## ", com o período de: " ## "Data Inicial: " ## dDataIErro ## "Data Fim: " ## dDataFErro ## "pois está sendo utilizado." ## "Favor verificar a utilização do exame."
						Help( " " , 1 , STR0008 ,, STR0016 + Alltrim( cError ) + STR0023 + CRLF + STR0024 + cValToChar( dDataIErro ) + CRLF + STR0025 + cValToChar( dDataFErro ) + CRLF + STR0026 + CRLF + STR0017 , 4 , 5 )
		  				lRet := .F.
						Exit
					Endif
					TM5->( Dbskip() )
				End
			EndIf

		EndIf
	Next nX

	FWRestRows( aSaveLines )
	RestArea( aArea )

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} D045CHK
Consiste a existencia de outro codigo na GetDados

@return lRet

@sample
MDTA045()

@author Marcio Costa
@since 03/01/00
/*/
//---------------------------------------------------------------------
Function D045CHK()

	Local nX 			:= 0
	Local lRet		 	:= .T.
	Local nExame, nDtIni, n

	//Variais utilizadas no Modelo
	Local oModel, oGrid, nLinha, cExame, dDataInic
	Local aSaveLines

	If IsIncallStack( "MDTA045" )  //Caso seja Fornecedor de Exames
		oModel    	:= FWModelActivate()
		oGrid     	:= oModel:GetModel( "MDTA045_TMD" )
		nLinha		:= oGrid:GetLine() // Linha posicionada
		cExame		:= oGrid:GetValue( "TMD_EXAME" ) //Exame incluso
		dDataInic	:= oGrid:GetValue( "TMD_DTINIC" ) //Data Inicio inclusa
		aSaveLines	:= FWSaveRows()

		If oGrid:Length() > 0
			For nX := 1 to oGrid:Length()
				oGrid:GoLine( nX )
				If nLinha <> nX .And. oGrid:GetValue( "TMD_EXAME" ) == cExame .And. oGrid:GetValue( "TMD_DTINIC" ) == dDataInic .And. !oGrid:IsDeleted()
					Help( " " , 1 , "JAEXISTINF" )
					lRet := .F.
					Exit
				EndIf
			Next nX

		EndIf
		FWRestRows( aSaveLines )
	Else //Caso seja outra rotina

		nExame	:= GDFieldPos( "TMD_EXAME" , aHeader )
		nDtIni	:= GDFieldPos( "TMD_DTINIC" , aHeader )

		n := If( Type("oGet") == "O", oGet:oBrowse:nAt, n )

		If nExame > 0
			For nX := 1 to Len( aCOLS )
				If nx <> n .And. !aCOLS[ nX , Len( aCOLS[ nX ] ) ]
					If aCOLS[ nX , nExame ] == M->TMD_EXAME .and. aCols[ nX , nDtIni ] == aCols[ n , nDtIni ]
						Help(" ",1,"JAEXISTINF")
						lRet := .F.
						Exit
					Endif
				EndIf
			Next
		EndIf

	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT045DTI
Função responsavel pela validação do campo TMD_DTINIC.

@return Verificação EXISTCHAV

@sample
MDTA045()

@author Guilherme Freudenburg
@since 27/08/2015
/*/
//---------------------------------------------------------------------
Function MDT045DTI()

	Local oModel, oGrid
	Local cCheckTMD := ""

	If cPrograma == "MDTA045"
		//Variais utilizadas no Model
		oModel 	:= FWModelActive() //Copia o Model utilizado.
		oGrid 		:= oModel:GetModel( 'MDTA045_TMD' ) //Posiciona no Model da Grid
		oGrid:GetLine() //Linha posicionada

		//Joga valor do model para a memoria do campo
		M->TMD_EXAME	 := oGrid:GetValue( 'TMD_EXAME' )
		M->TMD_DTINIC	 := oGrid:GetValue( 'TMD_DTINIC' )

		cCheckTMD := M->A2_COD+M->A2_LOJA
	Else
		cCheckTMD := M->TMD_FORNEC+M->TMD_LOJA
	EndIf

Return EXISTCHAV( "TMD" , cCheckTMD + M->TMD_EXAME+DTOS(M->TMD_DTINIC) )

//---------------------------------------------------------------------
/*/{Protheus.doc} ValRelac
Validação que verifica o relacionamento do Fornecedor (SA2)

@author Guilherme Freudenburg
@since 02/09/2015
@version P11
@return Verificação de SX9
/*/
//---------------------------------------------------------------------
Static Function ValRelac(oModelSA2)

Return If( oModelSA2:GetOperation() == 5, ( NGVALSX9( "SA2",{ "TMD" },.T. ) ) .Or. ( NGVALSX9( "SA2",{ "TM5" },.T. ) ) .Or. ( NGVALSX9( "SA2",{ "TN3" },.T. ) ) .Or. ( NGVALSX9( "SA2",{ "TNF" },.T. ) ), .T. )
