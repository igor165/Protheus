#Include	"NGIND006.ch"
#Include	"Protheus.ch"
#Include	"TBICONN.CH"
#Include	"Fileio.ch"

//---------------------------------------------------------------------
/*/{Protheus.doc} NGIND006
Configurações dos Indicadores.

ATENÇÃO:
Programa refeito em 13/04/2012.
Autor: Wagner Sobral de Lacerda

@author Denis Hyroshi Souza
@since 10/07/2008

@return Nil
/*/
//---------------------------------------------------------------------
Function NGIND006()

	// Armazena as variáveis
	Local aNGBEGINPRM := NGBEGINPRM()

	Local oDlgInd006
	Local oPnlInd006
	Local nAltura, nLargura

	Local oTmpSay, oTmpBtn
	Local nPosLin := 0, nPosCol := 0
	Local nSpcLin := 0, nSpcCol := 0
	Local nColFilho := 0

	Local aBotoes := aClone( fBotoes() ) // Recebe os Botões
	Local nBtn := 0
	Local nPosIMG := 1
	Local nPosTXT := 2
	Local nPosACT := 3
	Local cAuxImg, cAuxTxt, cAuxAct

	Local lRPORel17 := GetRPORelease() <= '12.1.017' // Verifica se a release é 12.1.7 ou menor.
	Local lRet      := .T.

	If !FindFunction( "NGINDCARGA" ) .And. lRPORel17
		Help( Nil, Nil, STR0185, Nil, STR0337, 1, 0 ) //"Atenção" ## "Por favor, realize a atualização do fonte NGUTIL, através do código do chamado DNG-4283"
		lRet := .F.
	ElseIf !FindFunction( "MNTINDIC" ) .And. lRPORel17
		Help( Nil, Nil, STR0185, Nil, STR0338, 1, 0 ) //"Atenção" ## "Por favor, realize a atualização do fonte MNTUTIL, através do código do chamado DNG-4283"
		lRet := .F.
	EndIf

	If lRet

		// Tela
		nAltura  := ( 46 * Len( aBotoes ) )
		nLargura := 300

		DEFINE MSDIALOG oDlgInd006 TITLE STR0001 FROM 0, 0 TO nAltura, nLargura PIXEL //OF oMainWnd PIXEL // "Configuração - Indicadores"

			// Painel Geral
			oPnlInd006 := TPanel():New(01, 01, , oDlgInd006, , , , CLR_BLACK, CLR_WHITE, 100, 100)
			oPnlInd006:Align := CONTROL_ALIGN_ALLCLIENT

				// Monta os Botões
				nPosLin := 020
				nPosCol := 030
				nSpcLin := 040
				nSpcCol := 005

				For nBtn := 1 To Len(aBotoes)

					cAuxImg := "'" + aBotoes[nBtn][nPosIMG] + "'"
					cAuxTxt := "'" + aBotoes[nBtn][nPosTXT] + "'"
					cAuxAct := GetCbSource(aBotoes[nBtn][nPosACT])

					nColFilho := 0
					If Len(aBotoes[nBtn]) >= 4
						nColFilho := (20 * aBotoes[nBtn][4])
					EndIf

					// Botão
					oTmpBtn := TBtnBmp2():New(nPosLin, nPosCol+(nColFilho*2), 25, 25, &(cAuxImg), , , , &(cAuxAct), oPnlInd006, OemToAnsi(&(cAuxTxt)))
					// Botão do Texto
					oTmpBtn := TButton():New((nPosLin/2)+1, nPosCol+(nColFilho*0.9)+nSpcCol, OemToAnsi(&(cAuxTxt)), oPnlInd006, &(cAuxAct),;
													100, 12, , , .F., .T., .F., , .F., , , .F.)
					oTmpBtn:SetCSS("QPushButton{ background-color: #FFFFFF; color: #000000; border: 0px; font-size: 11px; font-weight: bold; text-align: left; } " +;
									"QPushButton:Hover{ background-color: #FFFFF; color: #4682B4; border: 0px; } " + ;
									"QPushButton:Pressed{ background-color: #FFFFF; color: #BEBEBE; border: 0px; } ")
					oTmpBtn:lCanGotFocus := .F.

					// Se for filho, cria um "link"
					If nColFilho > 0
						oTmpBtn := TBitmap():New((nPosLin/2)-6/*nTop*/, (nPosCol/1.6)/*nLeft*/, 10/*nWidth*/, 10/*nHeight*/, "fwstd_mnu_bullet"/*cResName*/, /*cBmpFile*/, ;
											.T./*lNoBorder*/, oPnlInd006/*oWnd*/, /*bLClicked*/, /*bRClicked*/, .F./*lScroll*/, .F./*lStretch*/, ;
											/*oCursor*/, /*uParam14*/, /*uParam15*/, /*bWhen*/, .T./*lPixel*/, ;
											/*bValid*/, /*uParam19*/, /*uParam20*/, /*uParam21*/)
						oTmpBtn := TBitmap():New((nPosLin/2)+1/*nTop*/, (nPosCol/1.6)/*nLeft*/, 10/*nWidth*/, 10/*nHeight*/, "fwstd_mnu_bullet"/*cResName*/, /*cBmpFile*/, ;
											.T./*lNoBorder*/, oPnlInd006/*oWnd*/, /*bLClicked*/, /*bRClicked*/, .F./*lScroll*/, .F./*lStretch*/, ;
											/*oCursor*/, /*uParam14*/, /*uParam15*/, /*bWhen*/, .T./*lPixel*/, ;
											/*bValid*/, /*uParam19*/, /*uParam20*/, /*uParam21*/)
						oTmpBtn := TBitmap():New((nPosLin/2)+1/*nTop*/, (nPosCol/1.2)/*nLeft*/, 10/*nWidth*/, 10/*nHeight*/, "fwstd_mnu_bullet"/*cResName*/, /*cBmpFile*/, ;
											.T./*lNoBorder*/, oPnlInd006/*oWnd*/, /*bLClicked*/, /*bRClicked*/, .F./*lScroll*/, .F./*lStretch*/, ;
											/*oCursor*/, /*uParam14*/, /*uParam15*/, /*bWhen*/, .T./*lPixel*/, ;
											/*bValid*/, /*uParam19*/, /*uParam20*/, /*uParam21*/)
					EndIf

					// Espaço entre as opções
					nPosLin += nSpcLin

				Next nBtn

		ACTIVATE MSDIALOG oDlgInd006 CENTERED
	EndIf
	//------------------------------
	// Devolve as variáveis armazenadas
	//------------------------------
	NGRETURNPRM(aNGBEGINPRM)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} fBotoes
Monta um array com os Botões para selecionar a configuração.

@author Wagner Sobral de Lacerda
@since 13/04/2012

@return aBotoes
/*/
//---------------------------------------------------------------------
Static Function fBotoes()

	Local aBotoes := {}

	/* Define os Botões:
		[01] - Imagem do RPO
		[02] - Título do Botão
		[03] - Ação no Clique (Bloco de Código)
		[04] - Filho (Nível 1, 2, 3, etc.) * Não obrigatório
	*/
	aAdd(aBotoes, {"RPMGROUP" , STR0002, {|| NGIND002() }}) // "Classificação dos Indicadores"
	aAdd(aBotoes, {"SDUIMPORT", STR0003, {|| NGIND004() }}) // "Tipos de Parâmetros"
	aAdd(aBotoes, {"RPMFUNC"  , STR0004, {|| NGIND003() }}) // "Variáveis (Funções)"
	aAdd(aBotoes, {"FORM"     , STR0005, {|| NGIND005() }}) // "Indicadores (Fórmulas)"
	If AliasInDic("TZ9")
		aAdd(aBotoes, {"GRAF3D"   , STR0244, {|| NGIND007() }}) // "Indicadores Gráficos"
		aAdd(aBotoes, {"PUZZLE"   , STR0245, {|| NGIND008() }}) // "Painéis de Indicadores"
		aAdd(aBotoes, {"CADEADO"  , STR0246, {|| NGIND012() }, 1}) // "Permissões"
	EndIf

Return aBotoes

/*/
############################################################################################
##                                                                                        ##
## FUNÇÕES DE HISTÓRICO DOS INDICADORES                                                   ##
##                                                                                        ##
############################################################################################
/*/

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6MVHIST
Função que avalia o conteúdo do parâmetro que define se os dados
calculados e processodos dos indicadores devem ser armazenados ou não.

@author Wagner Sobral de Lacerda
@since 10/09/2012

@param nOpcao
	Indica a Opção de execução da função: * Opcional
	   0 - Retorno o Conteúdo do Parâmetro
	   1 - Verifica se está utilizando o armazenamento dos resultados/metas/dados
	   2 - Auto-incremento do código do resultado/meta/dado
	   3 - Confirma/Cancela Histórico
	   4 - Verifica se pode gravar Histórico de Dados (TZF)
	Default: 1
@param lConfirma
	Indica se Confirma ou Cancela o Histórico * Opcional
	   .T. - Confirma
	   .F. - Cancela
	Default: .T.

@return uRetorno
/*/
//---------------------------------------------------------------------
Function NGI6MVHIST(nOpcao, lConfirma)

	// Variável do Parâmetro SX6
	Local cMV_HIST := AllTrim( SuperGetMV("MV_NGIND01", .F., "0") ) // 0=Desabilitado ; 1=Histórico Resumido ; 2=Histórico Completo
	Local lMV_HIST := ( cMV_HIST <> "0" )

	// Variável do Retorno
	Local uRetorno := .F.

	// Defaults
	Default nOpcao    := 1
	Default lConfirma := .T.

	//----------
	// Executa
	//----------
	If nOpcao == 0 // Retorna o CONTEÚDO do parâmetro

		uRetorno := cMV_HIST

	ElseIf nOpcao == 1 // Verificação do parâmetro SE GERA HISTÓRICO

		uRetorno := lMV_HIST

	ElseIf nOpcao == 2 // Auto-incremento

		// Se estiver habilitado o parâmetro, então declara a variável private 'cTZECODIGO' com o auto-incremento
		// (Este código é utilizado para armazenar resultados/metas/dados nas tabelas de histórico TZE, TZF, TZG e TZI)
		If lMV_HIST
			If Type("cTZECODIGO") == "U"
				_SetOwnerPrvt("cTZECODIGO", GETSXENUM("TZF", "TZF_CODIGO"))
			Else
				cTZECODIGO := GETSXENUM("TZF", "TZF_CODIGO")
			EndIf
			If Type("cTZEMODULO") == "U"
				_SetOwnerPrvt("cTZEMODULO", Str(nModulo,2))
			Else
				cTZEMODULO := Str(nModulo,2)
			EndIf
			If Type("cTZEDATA") == "U"
				_SetOwnerPrvt("cTZEDATA", If(Type("dDataBase") <> "D", dDataBase, MsDate()))
			Else
				cTZEMODULO := If(Type("dDataBase") <> "D", dDataBase, MsDate())
			EndIf
			If Type("cTZEHORA") == "U"
				_SetOwnerPrvt("cTZEHORA", SubStr(Time(),1,5))
			Else
				cTZEMODULO := SubStr(Time(),1,5)
			EndIf

			uRetorno := .T.
		EndIf

	ElseIf nOpcao == 3 // Confirma/Cancela

		If lMV_HIST .And. Type("cTZECODIGO") <> "U"
			If lConfirma
				ConfirmSX8()
			Else
				RollBackSX8()
			EndIf

			uRetorno := .T.
		EndIf

	ElseIf nOpcao == 4 // Verifica se pode gravar Histórico de Dados (TZF)

		uRetorno := ( cMV_HIST == "2" )

	EndIf

Return uRetorno

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6HISTRE
Função de Indicadores que Grava o Histórico de Resultados processados.

@author Wagner Sobral de Lacerda
@since 17/09/2012

@param cCodIndic
	Código do Indicador (Fórmula) * Obrigatório
@param nResultado
	Resultado (numérico) do indicador (fórmula) * Obrigatório

@return lRetorno
/*/
//---------------------------------------------------------------------
Function NGI6HISTRE(cCodIndic, nResultado)

	// Variável do Retorno
	Local lRetorno := .F.
	Local lSeekGrv := .F.
	Local nMeta    := 0
	Local nMeta2   := 0
	Local nExceed  := 999999999999
	Local nResult  := nResultado

	//------------------------------------------------------------
	// Verifica se a Gravação de Histórico foi Inicializada
	//------------------------------------------------------------
	If Type("cTZECODIGO") <> "U"

		//----------------------------------------
		// Busca o Indicador (Fórmula)
		//----------------------------------------
		dbSelectArea("TZ5")
		dbSetOrder(1)
		If dbSeek(xFilial("TZ5") + cTZEMODULO + cCodIndic)

			nMeta  := AllTrim(TZ5->TZ5_VALOR1)
			nMeta2 := AllTrim(TZ5->TZ5_VALOR2)
			// O campo "TZ5_VALOR1" está em 'VHARCHAR'
			// Converteremos sempre para numérico para trabalhar melhor com os números no histórico
			// Conversão: (1=Numério;2=Hora)
			If TZ5->TZ5_TIPVAL == "1"
				nMeta  := Val(nMeta)
				nMeta2 := Val(nMeta2)
			ElseIf TZ5->TZ5_TIPVAL == "2"
				nMeta  := HTON(nMeta)
				nMeta2 := HTON(nMeta2)
			EndIf

			//----------------------------------------
			// Executa a Gravação
			//----------------------------------------
			dbSelectArea("TZE")
			dbSetOrder(1)
			lSeekGrv := dbSeek(xFilial("TZE") + cTZECODIGO)

			// Inicia a Transação
			BEGIN TRANSACTION
				// GRAVA
				RecLock("TZE", !lSeekGrv)
				TZE->TZE_FILIAL := xFilial("TZE")
				TZE->TZE_CODIGO := cTZECODIGO
				TZE->TZE_MODULO := cTZEMODULO
				TZE->TZE_INDIC  := cCodIndic
				TZE->TZE_FORMUL := TZ5->TZ5_FORMUL
				TZE->TZE_DATA   := cTZEDATA
				TZE->TZE_HORA   := cTZEHORA
				TZE->TZE_META   := nMeta
				TZE->TZE_META2  := nMeta2
				TZE->TZE_TIPMET := TZ5->TZ5_TIPRES
				TZE->TZE_TIPVAL := TZ5->TZ5_TIPVAL
				//Condição para evitar que o campo ultrapasse o tamanho máximo.
				If nResult > Val(Replicate("9",(TAMSX3("TZE_RESULT")[1]-4)))
					ShowHelpDlg( STR0333,{STR0334, ""},5,; //"Inconsistência no Resultado" ## "O Resultado superou o limite do campo e será gravado o valor 999.999.999.999."
						{ STR0335 + Alltrim(cCodIndic), STR0336},5) //"Verifique a parametrização ->" ## "Altere o período da consulta por mais assertividade."
					nResult := nExceed
					TZE->TZE_RESULT := nResult
				Else
					TZE->TZE_RESULT := nResult
				EndIf
				TZE->TZE_FUNPAI := FunName()
				TZE->TZE_CODUSR := RetCodUsr()
				MsUnlock("TZE")
			// Encerra a Transação
			END TRANSACTION

			lRetorno := .T.

		EndIf

	EndIf

Return lRetorno

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6PREPVA
Função de Indicadores que Prepara a Gravação do Histórico de Variáveis processadas.

@author Wagner Sobral de Lacerda
@since 20/09/2012

@param cCodVariav
	Variável (Função) de indicador chamadora * Obrigatório
@param nResult
	Resultado Numérico da Variável * Obrigatório

@return lRetorno
/*/
//---------------------------------------------------------------------
Function NGI6PREPVA(cCodVariav, nResult)

	// Salva a área atual
	Local aAreaOld := GetArea()

	// Variável do Retorno
	Local lRetorno := .F.

	// Grava Histórico de VARIÁVEIS
	lRetorno := NGI6HISTVA(cCodVariav, nResult)

	// Devolve a área
	RestArea(aAreaOld)

Return lRetorno

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6HISTVA
Função de Indicadores que Grava o Histórico de Variáveis processadas.

@author Wagner Sobral de Lacerda
@since 12/09/2012

@param cCodVariav
	Variável (Função) de indicador chamadora * Obrigatório
@param nResult
	Resultado NUMÉRICO da Variável * Obrigatório

@return lRetorno
/*/
//---------------------------------------------------------------------
Function NGI6HISTVA(cCodVariav, nResult)

	Local lRetorno   := .F.
	Local lSeekGrv   := .F.
	Local cVarNom    := ""
	Local nExceed    := 999999999999
	Local nResultado := nResult

	//------------------------------------------------------------
	// Verifica se a Gravação de Histórico foi Inicializada
	//------------------------------------------------------------
	If Type("cTZECODIGO") <> "U"

		// Nome da Variável
		cVarNom := Posicione("TZ2", 1, xFilial("TZ2") + cTZEMODULO + cCodVariav, "TZ2_TITULO")

		//----------------------------------------
		// Executa a Gravação
		//----------------------------------------
		dbSelectArea("TZI")
		dbSetOrder(1)
		lSeekGrv := dbSeek(xFilial("TZI") + cTZECODIGO + cCodVariav)

		// Inicia a Transação
		BEGIN TRANSACTION
			// GRAVA
			RecLock("TZI", !lSeekGrv)
			TZI->TZI_FILIAL := xFilial("TZI")
			TZI->TZI_CODIGO := cTZECODIGO
			TZI->TZI_VARIAV := cCodVariav
			TZI->TZI_VARNOM := cVarNom
			//Condição para evitar que o campo ultrapasse o tamanho máximo.
			If nResult > Val(Replicate("9",(TAMSX3("TZI_RESULT")[1]-4)))
				ShowHelpDlg( STR0333,{STR0334, ""},5,; //"Inconsistência no Resultado" ## "O Resultado superou o limite do campo e será gravado o valor 999.999.999.999."
					{ STR0335 + Alltrim(cVarNom), STR0336},5) //"Verifique a parametrização ->" ## "Altere o período da consulta por mais assertividade."
				nResultado := nExceed
				TZI->TZI_RESULT := nResultado
			Else
				TZI->TZI_RESULT := nResultado
			EndIf
			MsUnlock("TZI")
		// Encerra a Transação
		END TRANSACTION

		lRetorno := .T.

	EndIf

Return lRetorno

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6PREPDA
Função de Indicadores que Prepara a Gravação do Histórico de Dados processados.

@author Wagner Sobral de Lacerda
@since 12/09/2012

@param cAlias
	Arquivo temporário ou Tabela para gravar no histórico * Opcional
@param aMaisCpos
	Array com Campos adicionais * Opcional
@param cCodVariav
	Variável (Função) de indicador chamadora * Opcional

@return lRetorno
/*/
//---------------------------------------------------------------------
Function NGI6PREPDA(cAlias, cCodVariav, aMaisCpos)

	// Salva a área atual
	Local aAreaOld := GetArea()

	// Variável do Retorno
	Local lRetorno := .F.

	// Defaults
	Default aMaisCpos := {}

	// Grava Histórico de DADOS
	If NGI6MVHIST(4)
		lRetorno := NGI6HISTDA(cAlias, cCodVariav, aMaisCpos)
	EndIf

	// Devolve a área
	RestArea(aAreaOld)

Return lRetorno

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6HISTDA
Função de Indicadores que Grava o Histórico de Dados processados.

@author Wagner Sobral de Lacerda
@since 12/09/2012

@param cAlias
	Arquivo temporário ou Tabela para gravar no histórico * Opcional
@param aAuxCpos
	Array com Campos adicionais * Opcional
@param cVariavel
	Variável (Função) de indicador chamadora * Opcional

@return lRetorno
/*/
//---------------------------------------------------------------------
Function NGI6HISTDA(cAlias, cVariavel, aAuxCpos)

	// Variáveis da Gravação
	Local aGrava := {}, nLen := 0
	Local nGrava := 0
	Local cSequencia := "", nSequencia := 0

	Local nPosVARIAV := 1
	Local nPosTABELA := 2
	Local nPosSEQUEN := 3
	Local nPosCAMPO  := 4
	Local nPosORDEM  := 5
	Local nPosTIPDAD := 6
	Local nPosCONTEU := 7
	Local nPosAUXTIT := 8
	Local nPosAUXTAM := 9
	Local nPosAUXDEC := 10
	Local nPosAUXPIC := 11
	Local nPosAUXOPC := 12
	Local nPosicoes  := 12

	// Variáveis para formatação dos valores na gravação
	Local nFmtVARIAV := TAMSX3("TZF_VARIAV")[1]
	Local nFmtTABELA := TAMSX3("TZF_TABELA")[1]
	Local nFmtSEQUEN := TAMSX3("TZF_SEQUEN")[1]
	Local nFmtCAMPO  := TAMSX3("TZF_CAMPO")[1]
	Local nFmtORDEM  := TAMSX3("TZF_ORDEM")[1]
	Local nFmtTIPDAD := TAMSX3("TZF_TIPDAD")[1]
	Local nFmtCONTEU := TAMSX3("TZF_CONTEU")[1]
	Local nFmtAUXTIT := TAMSX3("TZF_AUXTIT")[1]
	Local nFmtAUXTAM := TAMSX3("TZF_AUXTAM")[1]
	Local nFmtAUXDEC := TAMSX3("TZF_AUXDEC")[1]
	Local nFmtAUXPIC := TAMSX3("TZF_AUXPIC")[1]
	Local nFmtAUXOPC := TAMSX3("TZF_AUXOPC")[1]

	Local aFormat := {}

	// Variável do Retorno
	Local lRetorno := .F.

	// Variáveis auxiliares
	Local cFieldName := ""
	Local nFieldCount := 0
	Local nFld := 0

	Local cTabela   := ""
	Local cTipoDado := "", cOrdemCpo := ""
	Local cCpoTitulo := "", nCpoTamanh := 0, nCpoDecima := 0, cCpoPictur := "", cCpoOpcoes := ""
	Local uConteudo := Nil

	Local lSeekGrv := .F.

	// Defaults
	Default cAlias    := ""
	Default aAuxCpos  := {}
	Default cVariavel := ""

	//------------------------------------------------------------
	// Verifica se a Gravação de Histórico foi Inicializada
	//------------------------------------------------------------
	If Type("cTZECODIGO") <> "U"
		//--- Define tamanho da Variável de acordo com o dicionário
		cVariavel := PADR(cVariavel, TAMSX3("TZ2_CODVAR")[1], " ")

		//----------------------------------------
		// Recebe os Dados para serem Gravados
		//----------------------------------------
		//-- Dados da Tabela
		If !Empty(cAlias)
			dbSelectArea(cAlias)
			nFieldCount := FCount()
			dbGoTop()
			While !Eof()
				// Sequência do Registro
				nSequencia++
				cSequencia := PADL(nSequencia, nFmtSEQUEN, "0")

				// Armazena os Campos
				For nFld := 1 To nFieldCount
					dbSelectArea(cAlias)
					cFieldName := FieldName(nFld)

					If !("R_E_C_" $ cFieldName) .And. !("D_E_L_" $ cFieldName)
						cTabela   := FWTabPref(cFieldName)
						uConteudo := &( cAlias+"->"+cFieldName )
						If !Empty( Posicione("SX3", 2, cFieldName, "X3_CAMPO") )
							cTipoDado := Posicione("SX3", 2, cFieldName, "X3_TIPO")
							cOrdemCpo := Posicione("SX3", 2, cFieldName, "X3_ORDEM")
							cCpoTitulo:= Posicione("SX3", 2, cFieldName, "X3Titulo()")
							nCpoTamanh:= Posicione("SX3", 2, cFieldName, "X3_TAMANHO")
							nCpoDecima:= Posicione("SX3", 2, cFieldName, "X3_DECIMAL")
							cCpoPictur:= PesqPict(Posicione("SX3", 2, cFieldName, "X3_ARQUIVO"), cFieldName, )
							cCpoOpcoes:= AllTrim( Posicione("SX3", 2, cFieldName, "X3CBox()") )
						Else
							cTipoDado := ValType(uConteudo)
							cOrdemCpo := Replicate( "Z", TamSX3(cFieldName)[1] )
							cCpoTitulo := Nil
							nCpoTamanh := Nil
							nCpoDecima := Nil
							cCpoPictur := Nil
							cCpoOpcoes := Nil
						EndIf

						aAdd(aGrava, Array(nPosicoes))
						nLen := Len(aGrava)
							aGrava[nLen][nPosVARIAV] := cVariavel
							aGrava[nLen][nPosTABELA] := cTabela
							aGrava[nLen][nPosSEQUEN] := cSequencia
							aGrava[nLen][nPosCAMPO]  := cFieldName
							aGrava[nLen][nPosORDEM]  := cOrdemCpo
							aGrava[nLen][nPosTIPDAD] := cTipoDado
							aGrava[nLen][nPosCONTEU] := uConteudo
							aGrava[nLen][nPosAUXTIT] := cCpoTitulo
							aGrava[nLen][nPosAUXTAM] := nCpoTamanh
							aGrava[nLen][nPosAUXDEC] := nCpoDecima
							aGrava[nLen][nPosAUXPIC] := cCpoPictur
							aGrava[nLen][nPosAUXOPC] := cCpoOpcoes
					EndIf
				Next nFld

				dbSelectArea(cAlias)
				dbSkip()
			End
		EndIf

		//-- Dados de Campos adicionais (fora da estrutura da tabela)
		For nFld := 1 To Len(aAuxCpos)
			// Armazena para Gravação
			aAdd(aGrava, aClone(aAuxCpos[nFld]))
			aGrava[nFld][nPosCONTEU] := NGI6CONVER(aGrava[nFld][nPosCONTEU], "C")
		Next nFld

		//-- Formata os campos para serem de acordo com a tabela da gravação
		aFormat := {}
		aAdd(aFormat, {nPosVARIAV, nFmtVARIAV})
		aAdd(aFormat, {nPosTABELA, nFmtTABELA})
		aAdd(aFormat, {nPosSEQUEN, nFmtSEQUEN})
		aAdd(aFormat, {nPosCAMPO , nFmtCAMPO })
		aAdd(aFormat, {nPosORDEM , nFmtORDEM })
		aAdd(aFormat, {nPosTIPDAD, nFmtTIPDAD})
		aAdd(aFormat, {nPosCONTEU, nFmtCONTEU})
		aAdd(aFormat, {nPosAUXTIT, nFmtAUXTIT})
		aAdd(aFormat, {nPosAUXPIC, nFmtAUXPIC})
		aAdd(aFormat, {nPosAUXOPC, nFmtAUXOPC})
		aGrava := aClone( fFrmtDados(aGrava, aFormat, nPosicoes) )

		//----------------------------------------
		// Executa a Gravação
		//----------------------------------------
		If Len(aGrava) > 0
			lRetorno := .T.
		EndIf

		For nGrava := 1 To Len(aGrava)
			// Verifica se irá CRIAR ou ALTERAR ou registro
			dbSelectArea("TZF")
			dbSetOrder(1)
			lSeekGrv := dbSeek(xFilial("TZF") + cTZECODIGO + aGrava[nGrava][nPosVARIAV] + aGrava[nGrava][nPosSEQUEN] + aGrava[nGrava][nPosTABELA] + aGrava[nGrava][nPosCAMPO])

			// Inicia a Transação
			BEGIN TRANSACTION
				// GRAVA
				RecLock("TZF", !lSeekGrv)
				TZF->TZF_FILIAL := xFilial("TZF")
				TZF->TZF_CODIGO := cTZECODIGO
				TZF->TZF_VARIAV := aGrava[nGrava][nPosVARIAV]
				TZF->TZF_TABELA := aGrava[nGrava][nPosTABELA]
				TZF->TZF_SEQUEN := aGrava[nGrava][nPosSEQUEN]
				TZF->TZF_CAMPO  := aGrava[nGrava][nPosCAMPO]
				TZF->TZF_ORDEM  := aGrava[nGrava][nPosORDEM]
				TZF->TZF_TIPDAD := aGrava[nGrava][nPosTIPDAD]
				TZF->TZF_CONTEU := aGrava[nGrava][nPosCONTEU]
				TZF->TZF_AUXTIT := aGrava[nGrava][nPosAUXTIT]
				TZF->TZF_AUXTAM := aGrava[nGrava][nPosAUXTAM]
				TZF->TZF_AUXDEC := aGrava[nGrava][nPosAUXDEC]
				TZF->TZF_AUXPIC := aGrava[nGrava][nPosAUXPIC]
				TZF->TZF_AUXOPC := aGrava[nGrava][nPosAUXOPC]
				MsUnlock("TZF")
			// Encerra a Transação
			END TRANSACTION
		Next nGrava

	EndIf

Return lRetorno

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6PREPPA
Função de Indicadores que Prepara a Gravação do Histórico de Parâmetros processados.

@author Wagner Sobral de Lacerda
@since 14/09/2012

@param aParams
	Array de Parâmetros utilizados no cálculo * Obrigatório
@param cCodVariav
	Variável (Função) de indicador chamadora * Opcional

@return lRetorno
/*/
//---------------------------------------------------------------------
Function NGI6PREPPA(aParams, cCodVariav)

	// Salva a área atual
	Local aAreaOld := GetArea()

	// Variável do Retorno
	Local lRetorno := .F.

	// Grava Histórico de PARÂMETROS
	lRetorno := NGI6HISTPA(aParams, cCodVariav)

	// Devolve a área
	RestArea(aAreaOld)

Return lRetorno

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6HISTPA
Função de Indicadores que Grava o Histórico de Parâmetros processados.

@author Wagner Sobral de Lacerda
@since 14/09/2012

@param aParams
	Array com os Parâmetros * Opcional
@param cVariavel
	Variável (Função) de indicador chamadora * Opcional

@return lRetorno
/*/
//---------------------------------------------------------------------
Function NGI6HISTPA(aParams, cVariavel)

	// Variáveis da Gravação
	Local aGrava := {}
	Local nGrava := 0

	Local nPosVARIAV := 1
	Local nPosPARAM  := 2
	Local nPosTIPDAD := 3
	Local nPosCONTEU := 4
	Local nPosAUXTIT := 5
	Local nPosAUXTAM := 6
	Local nPosAUXDEC := 7
	Local nPosAUXPIC := 8
	Local nPosORDEM  := 9
	Local nPosAUXOPC := 10
	Local nPosicoes  := 10

	// Variáveis para formatação dos valores na gravação
	Local nFmtVARIAV := TAMSX3("TZG_VARIAV")[1]
	Local nFmtPARAM  := TAMSX3("TZG_PARAM")[1]
	Local nFmtTIPDAD := TAMSX3("TZG_TIPDAD")[1]
	Local nFmtCONTEU := TAMSX3("TZG_CONTEU")[1]
	Local nFmtAUXTIT := TAMSX3("TZG_AUXTIT")[1]
	Local nFmtAUXPIC := TAMSX3("TZG_AUXPIC")[1]
	Local nFmtORDEM  := TAMSX3("TZG_ORDEM")[1]
	Local nFmtAUXOPC := TAMSX3("TZG_AUXOPC")[1]

	// Variável do Retorno
	Local lRetorno := .F.

	// Variáveis auxiliares
	Local cOrdemPar := ""
	Local cTipoDado := ""
	Local nPar := 0

	Local lSeekGrv := .F.

	// Defaults
	Default aParams   := {}
	Default cVariavel := ""

	//------------------------------------------------------------
	// Verifica se a Gravação de Histórico foi Inicializada
	//------------------------------------------------------------
	If Type("cTZECODIGO") <> "U"
		//--- Define tamanho da Variável de acordo com o dicionário
		cVariavel := PADR(cVariavel, TAMSX3("TZ2_CODVAR")[1], " ")

		//----------------------------------------
		// Recebe os Parâmetros para serem Gravados
		//----------------------------------------
		//-- Parâmetros
		For nPar := 1 To Len(aParams)
			// Armazena para Gravação
			aAdd(aGrava, Array(nPosicoes))
			// Dados básicos
			aGrava[nPar][nPosVARIAV] := cVariavel
			aGrava[nPar][nPosPARAM] := aParams[nPar][1]
			cTipoDado := Posicione("TZ4", 1, xFilial("TZG") + cTZEMODULO + aParams[nPar][1], "TZ4_TIPO")
			Do Case
				Case cTipoDado == "1" .Or. cTipoDado == "5" .Or. cTipoDado == "6" .Or. cTipoDado == "C"
					aGrava[nPar][nPosTIPDAD] := "C"
				Case cTipoDado == "2" .Or. cTipoDado == "N"
					aGrava[nPar][nPosTIPDAD] := "N"
				Case cTipoDado == "4" .Or. cTipoDado == "D"
					aGrava[nPar][nPosTIPDAD] := "D"
				Otherwise
					aGrava[nPar][nPosTIPDAD] := "C"
			EndCase
			dbSelectArea("TZ4")
			dbSetOrder(1)
			If !dbSeek(xFilial("TZG") + cTZEMODULO + aParams[nPar][1])
				aGrava[nPar][nPosAUXTIT] := 0
				aGrava[nPar][nPosAUXTAM] := 0
				aGrava[nPar][nPosAUXDEC] := 0
				aGrava[nPar][nPosAUXPIC] := ""
				aGrava[nPar][nPosAUXOPC] := ""
			Else
				aGrava[nPar][nPosAUXTIT] := TZ4->TZ4_DESCRI
				If Empty(TZ4->TZ4_CAMPOS)
					aGrava[nPar][nPosAUXTAM] := TZ4->TZ4_TAMANH
					aGrava[nPar][nPosAUXDEC] := TZ4->TZ4_DECIMA
					aGrava[nPar][nPosAUXPIC] := TZ4->TZ4_PICTUR
					aGrava[nPar][nPosAUXOPC] := TZ4->TZ4_OPCOES
				Else
					aGrava[nPar][nPosAUXTAM] :=  Posicione("SX3", 2, TZ4->TZ4_CAMPOS, "X3_TAMANHO")
					aGrava[nPar][nPosAUXDEC] :=  Posicione("SX3", 2, TZ4->TZ4_CAMPOS, "X3_DECIMAL")
					aGrava[nPar][nPosAUXPIC] := PesqPict( Posicione("SX3", 2, TZ4->TZ4_CAMPOS, "X3_ARQUIVO"),  TZ4->TZ4_CAMPOS, )
					aGrava[nPar][nPosAUXOPC] := AllTrim( Posicione("SX3", 2, TZ4->TZ4_CAMPOS, "X3CBox()") )
				EndIf
			EndIf
			// Converte o tipo de dado sempre para CARACTERE
			aGrava[nPar][nPosCONTEU] := NGI6CONVER(aParams[nPar][2], "C")
		Next nPar

		//-- Formata os campos para serem de acordo com a tabela da gravação
		aFormat := {}
		aAdd(aFormat, {nPosVARIAV, nFmtVARIAV})
		aAdd(aFormat, {nPosPARAM , nFmtPARAM })
		aAdd(aFormat, {nPosTIPDAD, nFmtTIPDAD})
		aAdd(aFormat, {nPosCONTEU, nFmtCONTEU})
		aAdd(aFormat, {nPosAUXTIT, nFmtAUXTIT})
		aAdd(aFormat, {nPosAUXPIC, nFmtAUXPIC})
		aAdd(aFormat, {nPosORDEM , nFmtORDEM })
		aAdd(aFormat, {nPosAUXOPC, nFmtAUXOPC})
		aGrava := aClone( fFrmtDados(aGrava, aFormat, nPosicoes) )

		//-- Define alguns dados restantes
		For nGrava := 1 To Len(aGrava)
			// Ordem do Parâmetro
			cOrdemPar := Posicione("TZ3", 3, xFilial("TZG") + cVariavel + aGrava[nGrava][nPosPARAM] + cTZEMODULO, "TZ3_ORDEM")
			aGrava[nGrava][nPosORDEM] := cOrdemPar
			// Variável (Função)
			aGrava[nGrava][nPosVARIAV] := cVariavel
		Next nGrava

		//----------------------------------------
		// Executa a Gravação
		//----------------------------------------
		If Len(aGrava) > 0
			lRetorno := .T.
		EndIf

		For nGrava := 1 To Len(aGrava)
			// Verifica se irá CRIAR ou ALTERAR ou registro
			dbSelectArea("TZG")
			dbSetOrder(1)
			lSeekGrv := dbSeek(xFilial("TZG") + cTZECODIGO + aGrava[nGrava][nPosVARIAV] + aGrava[nGrava][nPosORDEM] + aGrava[nGrava][nPosPARAM])

			// Inicia a Transação
			BEGIN TRANSACTION
				// GRAVA
				RecLock("TZG", !lSeekGrv)
				TZG->TZG_FILIAL := xFilial("TZG")
				TZG->TZG_CODIGO := cTZECODIGO
				TZG->TZG_VARIAV := aGrava[nGrava][nPosVARIAV]
				TZG->TZG_ORDEM  := aGrava[nGrava][nPosORDEM]
				TZG->TZG_PARAM  := aGrava[nGrava][nPosPARAM]
				TZG->TZG_TIPDAD := aGrava[nGrava][nPosTIPDAD]
				TZG->TZG_CONTEU := aGrava[nGrava][nPosCONTEU]
				TZG->TZG_AUXTIT := aGrava[nGrava][nPosAUXTIT]
				TZG->TZG_AUXTAM := aGrava[nGrava][nPosAUXTAM]
				TZG->TZG_AUXDEC := aGrava[nGrava][nPosAUXDEC]
				TZG->TZG_AUXPIC := aGrava[nGrava][nPosAUXPIC]
				TZG->TZG_AUXOPC := aGrava[nGrava][nPosAUXOPC]
				MsUnlock("TZG")
			// Encerra a Transação
			END TRANSACTION
		Next nGrava

	EndIf

Return lRetorno

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6CONVER
CONVERTE o valor de uma variável de acordo com o tipo do PARÂMETRO.

@author Wagner Sobral de Lacerda
@since 12/09/2012

@param xValue
	Valor atual * Obrigatório
@param cTipoConv
	Tipo de Dado para conversão * Obrigatório
@param nTamanho
	Tamanho desejado para o valor convertido * Obrigatório
@param nDecimal
	Decimal desejado para o valor convertido * Obrigatório
@param lTela
	Indica se a conversão está sendo realizada para apresentar o dado em tela * Opcional
	   .T. - Em Tela
	   .F. - Em Banco
	Default: .F. (formato de Banco de Dados)

@return xConvert
/*/
//---------------------------------------------------------------------
Function NGI6CONVER(xValue, cTipoConv, nTamanho, nDecimal, lTela)

	// Variáveis para a Convertsão
	Local xConvert := xValue
	Local cTipo    := ValType(xConvert)

	//--- Defaults
	If ValType(nTamanho) == "U"
		If cTipo == "C"
			nTamanho := Len(xConvert)
		ElseIf cTipo == "U"
			nTamanho := 1
		EndIf
	EndIf
	If ValType(nDecimal) == "U" .And. cTipo $ "C/U"
		nDecimal := 0
	EndIf
	Default lTela := .F.

	//----------
	// Converte
	//----------
	Do Case

		Case cTipoConv == "1" .Or. cTipoConv == "5" .Or. cTipoConv == "C" // para Caractere OU Campo

			If cTipo == "C"
				xConvert := PADR(xConvert, (nTamanho + nDecimal), " ")
			ElseIf cTipo == "D"
				xConvert := If(lTela, DTOC(xConvert), DTOS(xConvert))
			ElseIf cTipo == "L"
				xConvert := If(xConvert, "1", "0") // Binário ("1"=Verdadeiro; "0"=Falso)
			ElseIf cTipo == "N"
				xConvert := cValToChar(xConvert)
			ElseIf cTipo == "U"
				xConvert := PADR(xConvert, (nTamanho + nDecimal), " ")
			EndIf

		Case cTipoConv == "2" .Or. cTipoConv == "N" // para Numérico

			If cTipo == "C"
				xConvert := Val(xConvert)
			ElseIf cTipo == "U"
				xConvert := 0
			EndIf

		Case cTipoConv == "3" .Or. cTipoConv == "L" // para Lógico

			If cTipo == "C"
				xConvert := If(xConvert == "1", .T., .F.) // Binário (1=Verdadeiro; 0=Falso)
			ElseIf cTipo == "U"
				xConvert := .F.
			EndIf

		Case cTipoConv == "4" .Or. cTipoConv == "D" // para Data

			If cTipo == "C"
				xConvert := STOD(xConvert)
			ElseIf cTipo == "U"
				xConvert := STOD("")
			EndIf

		Case cTipoConv == "6" // para Lista de Opções

			If cTipo == "C"
				xConvert := SubStr(xConvert, 1, 1)
			ElseIf cTipo == "U"
				xConvert := ""
			EndIf

	EndCase

Return xConvert

//---------------------------------------------------------------------
/*/{Protheus.doc} fFrmtDados
Formata os Dados em STRING para ter o tamanho do campo no dicinoário de
dados SX3.

@author Wagner Sobral de Lacerda
@since 14/09/2012

@param aDados
	Array com os dados a serem formatados * Obrigatório
@param aFormat
	Array com as posições das formatações * Obrigatório
@param nMaxPos
	Indica o Máximo de posições no Array de Dados * Obrigatório

@return xConvert
/*/
//---------------------------------------------------------------------
Static Function fFrmtDados(aDados, aFormat, nMaxPos)

	// Variável auxiliares
	Local cFormat := ""
	Local nFormat := 0, nField := 0
	Local nDados  := 0

	//------------------------------
	// Ajusta o Tamanho do Array
	//------------------------------
	For nDados := 1 To Len(aDados)
		While Len(aDados[nDados]) < nMaxPos
			aAdd(aDados[nDados], Nil)
		End
	Next nDados

	//------------------------------
	// Formata os Dados
	//------------------------------
	For nDados := 1 To Len(aDados)
		For nField := 1 To Len(aFormat)
			nFormat := aFormat[nField][2]
			If Len(aDados[nDados]) >= nMaxPos
				cFormat := aDados[nDados][ aFormat[nField][1] ]
				If cFormat == Nil
					cFormat := ""
				EndIf
				aDados[nDados][ aFormat[nField][1] ] := PADR(cFormat, nFormat, " ")
			EndIf
		Next nField
	Next nDados

Return aDados

/*/
############################################################################################
##                                                                                        ##
## FUNÇÕES DE CARGA INICIAL DE INDICADORES                                                ##
##                                                                                        ##
############################################################################################
/*/

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6CARGA
Função de Indicadores que Grava o Histórico de Dados processados.

@author Wagner Sobral de Lacerda
@since 12/09/2012

@param lEntrada
	Indica se foi chamado via Entrada de Sistema * Opcional
		.T. - Sim
	 	.F. - Não
	Default: .F.

@return lRetorno
/*/
//---------------------------------------------------------------------
Function NGI6CARGA(lEntrada)

	// Variáveis auxiliares
	Local cBARRAS    := If(isSRVunix(),"/","\")
	Local cRootPath  := Alltrim(GetSrvProfString("RootPath",cBARRAS))
	Local cStartPath := AllTrim(GetSrvProfString("StartPath",cBARRAS))
	Local cArquivo   := cRootPath+cStartPath+"ngindbase.ngi"
	Local lInd       := .T.
	Local cTXT       := ""
	Local lFacilit   := If(FindFunction("MNTINTFAC"), MNTINTFAC(), .F.)

	Local lComp := fRetComp()

	Local cCodModulo := AllTrim(cModulo) // Variável Público do Módulo ('cModulo')

	// Defaults
	Default lEntrada := .F.

	// Cria Arquivo que indica que já foi efetuada a Carga de Indicadores
	nHdlArq := FOPEN( cArquivo,0 ) //Abre o arquivo "ngindbase.ngi", fornecendo o respectivo número de manipulação do devido arquivo.

	If nHdlArq > 0 //Se o arquivo existir. (Alteração realizada devido a utilização do SmartHtml).
		If File(cArquivo)
			FT_FUSE(cArquivo)
			FT_FGOTOP()
			While (!FT_FEof())
				cTXT += FT_FREADLN()
				FT_FSKIP()
			EndDo
			lInd := If(cEmpAnt+xFilial("TZ1")+cCodModulo $ cTXT,.F.,.T.)
			If lInd
				cTXT += cEmpAnt+xFilial("TZ1")+cCodModulo+"#"
				FWRITE(nHdlArq, cTXT)
			Endif
			If AliasInDic("TZ9")
				If lInd
					If !(cEmpAnt+xFilial("TZ1")+cCodModulo+"TZ9" $ cTXT)
						cTXT += cEmpAnt+xFilial("TZ1")+cCodModulo+"TZ9#"
						FWRITE(nHdlArq, cTXT)
					EndIf
				Else
					lInd := If(cEmpAnt+xFilial("TZ1")+cCodModulo+"TZ9" $ cTXT,.F.,.T.)
					If lInd
						cTXT += cEmpAnt+xFilial("TZ1")+cCodModulo+"TZ9#"
						FWRITE(nHdlArq, cTXT)
					Endif
				EndIf
			EndIf
			If lFacilit
				If lInd
					If !(cEmpAnt+xFilial("TZ1")+cCodModulo+"FAC" $ cTXT)
						cTXT += cEmpAnt+xFilial("TZ1")+cCodModulo+"FAC#"
						FWRITE(nHdlArq, cTXT)
					EndIf
				Else
					lInd := If(cEmpAnt+xFilial("TZ1")+cCodModulo+"FAC" $ cTXT,.F.,.T.)
					If lInd
						cTXT += cEmpAnt+xFilial("TZ1")+cCodModulo+"FAC#"
						FWRITE(nHdlArq, cTXT)
					Endif
				EndIf
			EndIf
			FCLOSE(nHdlArq)
		Else
			If (nHandle := FCREATE("ngindbase.ngi",FC_NORMAL)) != -1
				cTXT += cEmpAnt+xFilial("TZ1")+cCodModulo+"#"
				If AliasInDic("TZ9")
					cTXT += cEmpAnt+xFilial("TZ1")+cCodModulo+"TZ9#"
				EndIf
				If lFacilit
				 	cTXT += cEmpAnt+xFilial("TZ1")+cCodModulo+"FAC#"
				EndIf
				FWRITE(nHandle, cTXT)
				FCLOSE(nHandle)
				lInd := .T.
			EndIf
		EndIf

		// Executa a Carga
		If AliasInDic("TZ5") .And. (lInd .Or. lEntrada) .And. lComp
			If cCodModulo == "MNT"
				MNTINDIC()
			ElseIf cCodModulo == "SGA"
				NGSGAIND()
			EndIf
		EndIf
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} TZ4VALID

Valid do campo TZ4_VALID

@author  Jackson Machado
@since   04/04/2011
@version version
/*/
//-------------------------------------------------------------------
Function TZ4VALID(TZ4_VALID)
Local lRet := .F.
Local nFecha := 0, nAbre := 0
Local i

For i := 1 To Len(TZ4_VALID)
	If SubStr(TZ4_VALID,i,1) == "("
		nAbre ++
	Elseif SubStr(TZ4_VALID,i,1) == ")"
	 	nFecha ++
	Endif
   If nFecha > nAbre
   	msgStop(STR0184) //"Problema de Sintaxe na Validação!"
   	Return .F.
   Endif
Next i

If nAbre == nFecha
	lRet := .T.
Elseif nAbre > nFecha
	msgStop(STR0184) //"Problema de Sintaxe na Validação!"
Elseif nAbre < nFecha
	msgStop(STR0184) //"Problema de Sintaxe na Validação!"
Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} NGI6CODATE

Consistencia do codigo  ( ate  do SX1....)

@author  Jackson Machado
@since   06/04/2011

@param cALIAS, Caracter, Alias do arquivo de pesquisa
@param cPAR01, Caracter, Codigo de pesquisa  ( De .... )
@param cPAR02, Caracter, Codigo de pesquisa  ( Ate ... )

/*/
//-------------------------------------------------------------------
Function NGI6CODATE(cALIAS,cPAR01,cPAR02)
If Empty(cPar02)
   Help(" ",1,"REGNOIS")
   Return .f.
Elseif cPar02 < cPar01
   ShowHelpDlg(STR0185,{STR0186},3,{STR0187},3)//"Atenção"###"Para opções De/Até no arquivo de perguntas esta opção é inválida"###"Informe uma opção válida para este parâmetr"
   Return .f.
Endif

If cPar02 = replicate('Z',Len(cPar02))
   Return .t.
Else
   If cAlias == "SRA"
      If !ExCpoMDT(cAlias,cPar02)
         Return .f.
      Endif
   Else
      If !ExistCpo(cAlias,cPar02)
         Return .f.
      Endif
   Endif
Endif
Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} NGI6VDTIND

Funcao para validacao dos parametros de data dos indicadores

@author  Jackson Machado
@since   06/04/2011

@param cDT01, Caracter, Codigo da data  ( De .... )
@param cDT02, Caracter, Codigo da data  ( Ate ... )
/*/
//-------------------------------------------------------------------
Function NGI6VDTIND(DT01,DT02)
If Empty(DT02)
   Help(" ",1,"REGNOIS")
   Return .f.
Elseif DT02 < DT01
   ShowHelpDlg(STR0185,{STR0186},3,{STR0187},3)//"Atenção"###"Para opções De/Até no arquivo de perguntas esta opção é inválida"###"Informe uma opção válida para este parâmetr"
   Return .f.
Endif
Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} fRetComp

Retorna se o compartilhamento é válido

@author  Jackson Machado
@since   11/04/2012
/*/
//-------------------------------------------------------------------
Static Function fRetComp()

	// Tabelas para verificar o compartilhamento
	Local aTabelas := {"TZ1", "TZ2", "TZ3", "TZ4", "TZ5", "TZ6", "TZ7", "TZ8"}
	Local aChkTbls := {}
	Local nX := 0

	If AliasInDic("TZ9")
		aAdd( aTabelas , "TZ9" )
		aAdd( aTabelas , "TZA" )
		aAdd( aTabelas , "TZB" )
		aAdd( aTabelas , "TZC" )
		aAdd( aTabelas , "TZD" )
		aAdd( aTabelas , "TZE" )
		aAdd( aTabelas , "TZF" )
		aAdd( aTabelas , "TZG" )
		aAdd( aTabelas , "TZH" )
	EndIf

	For nX := 1 To Len(aTabelas)
		aAdd(aChkTbls, aTabelas[nX])
	Next nX

	// Verifica se as tabelas possuem o mesmo compartilhamento
	If Len(aChkTbls) > 0 .And. FindFunction("NGCHKCOMP")
		If !NGCHKCOMP(aChkTbls, .F.)
			Return .F.
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} NGI6VLDUSR
Validacao dos campos de usuario

@author Jackson Machado
@since 06/04/2011

@param nCampo  , Numérico, Determina a origem da chamada da função.
@param cDeSoli , Caracter, Valor do Campo de Solicitante.
@param cAteSoli, Caracter, Valor do Campo até Solicitante.

@return lRet, Lógico, Retorna verdadeiro caso opções De/Até estejam válidas.
/*/
//---------------------------------------------------------------------
Function NGI6VLDUSR( nCampo , cDeSoli, cAteSoli )

	Local lRet := .T.

	If nCampo == 1
		PswOrder(2)
		If !Empty(cDeSoli) .AND. !PswSeek(cDeSoli)
			Help(" ",1,"REGNOIS")
			lRet := .F.
		Endif
	Elseif nCampo == 2
		PswOrder(2)
		If Replicate("Z",Len(cAteSoli)) <> cAteSoli .AND. !PswSeek(cAteSoli)
			Help(" ",1,"REGNOIS")
			lRet := .F.
		Elseif Upper(cAteSoli) < Upper(cDeSoli)
		ShowHelpDlg(STR0185,{STR0186},3,{STR0187},3)//"Atenção"###"Para opções De/Até no arquivo de perguntas esta opção é inválida"###"Informe uma opção válida para este parâmetr"
		lRet := .F.
		Endif
	EndIf

Return lRet


