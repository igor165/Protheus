#include "MDTA650.ch"
#include "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA650
Programa de Cadastro de Plano de acao por risco.
Para cada risco definido o usuario pordera relacionar os
planos de acao previamente definidos e ja registrados no
sistema.

@return

@sample MDTA650()

@author Thiago Machado
@since 27/07/2000
/*/
//-------------------------------------------------------------------
Function MDTA650()

	//----------------------------------------------
	// Guarda conteudo e declara variaveis padroes
	//----------------------------------------------
	Local aNGBEGINPRM := NGBEGINPRM()

	//Variaveis padroes
	Private aRotina   	:= MenuDef()
	Private cCadastro 	:= ""
	Private lSigaMdtPs	:= SuperGetMv("MV_MDTPS",.F.,"N") == "S"
	Private cCliMdtPs	:= ""

	//Monta o Browse
	fBrowse( .T. )

	//----------------------------------------
	// Retorna conteudo de variaveis padroes
	//----------------------------------------
	NGRETURNPRM( aNGBEGINPRM )

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fBrowse
Montagem padrao de Browse

@return Nil

@param lPrimeiro - Indica se deve monta o Broese de prestador

@sample
fBrowse()

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fBrowse( lPrimeiro )

	//Definicoes basicas
	Local cAlias		:= "TAA"
	Local cFiltro		:= ""
	Local bCondBrw 		:= {|| }
	Local cCondBrw 		:= ""

	Default lPrimeiro	:= .F.//Caso nao seja passado parametro, indica ser a primeira montagem

	cCadastro 	:= STR0006 //"Riscos por Plano"

	If lSigaMdtPs//Caso prestador de servico
		If lPrimeiro//Quando eh primeira montagem limpa o filtro e troca o alias
			cAlias		:= "SA1"
			cFiltro		:= ""
			cCadastro 	:= STR0020 //"Clientes"
		Else
			//Quando segunda montagem adiciona o Filtro na Tabela de Planos
			cFiltro	:= "TAA->TAA_CLIENT+TAA->TAA_LOJA = '" + cCliMdtPs + "'"
			cFiltro += "AND TAA->TAA_TIPOPL $ '2/3/5' AND TAA->TAA_STATUS <> '3'"
		EndIf
	Else
		bCondBrw := {|| TAA->TAA_TIPOPL $ "2/3/5" .And. TAA->TAA_STATUS <> "3" }
		cCondBrw := "TAA->TAA_TIPOPL $ '2/3/5' .And. TAA->TAA_STATUS <> '3'"
	EndIf

	//Enderacao a funcao de browse
	dbSelectArea( cAlias )
	dbSetOrder( 1 )
	If !Empty( cFiltro )//Caso tenha o filtro, executa
		Set Filter To &( cFiltro )
	EndIf
	If !Empty(bCondBrw) .And. !Empty(cCondBrw)
		dbSetFilter(bCondBrw,cCondBrw)
	EndIf
	mBrowse( 6 , 1 , 22 , 75 , cAlias )//Monta o Browse

	//Retorna a tabela ao estado original
	dbSelectArea( cAlias )
	Set Filter To

Return
//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.

@return aRotina  - 	Array com as opções de menu.
					Parametros do array a Rotina:
					1. Nome a aparecer no cabecalho
					2. Nome da Rotina associada
					3. Reservado
					4. Tipo de Transa‡„o a ser efetuada:
						1 - Pesquisa e Posiciona em um Banco de Dados
						2 - Simplesmente Mostra os Campos
						3 - Inclui registros no Bancos de Dados
						4 - Altera o registro corrente
						5 - Remove o registro corrente do Banco de Dados
					5. Nivel de acesso
					6. Habilita Menu Funcional

@sample MenuDef()

@author Rafael Diogo Richter
@since 29/11/2006
/*/
//-------------------------------------------------------------------
Static Function MenuDef( lSigaMdtPS )

	Local aRotina

	Default lSigaMdtPS := SuperGetMv("MV_MDTPS",.F.,"N") == "S"

	If lSigaMdtps
		aRotina := { { STR0001,   "AxPesqui"  , 0 , 1},; //"Pesquisar"
					{ STR0002,   "NGCAD01"   , 0 , 2},; //"Visualizar"
					{ STR0019,   "MDT650PL"  , 0 , 4} } //"Planos de Ação"
	Else

		aRotina := {  { STR0001, "AxPesqui"  , 0 , 1},;  //"Pesquisar"
					{ STR0002, "NGCAD01"   , 0 , 2},;  //"Visualizar"
					{ STR0007, "MDT625RI"  , 0 , 4, 3} }  //"Riscos"

	Endif

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT650PL
Faz a montagem do Browse de acordo com o Prestador de Serviço

@return Nil

@sample
MDT650PL()

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Function MDT650PL()

    Local aRotOld	:= aClone( aRotina )//Salva o aRotina atual

    aRotina			:= MenuDef( .F. )//Alimenta aRotina com as novas opcoes

	cCliMdtPs		:= SA1->A1_COD + SA1->A1_LOJA//Salva o cliente atual

	fBrowse()//Monta o Browse de acordo com os Planos do Cliente

	aRotina			:= aClone( aRotOld )//Retorna o aRotina

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT625RI
Mostra os riscos do Plano de Acao

@type    function
@author  Andre Perez Alvarez
@since   03/07/2007
@sample  MDT625RI( 'XXX', 001, 1 )

@param   cAlias, Alias da tabela utilizada
@param   nRecno, Numérico, Recno do Registro
@param   nOpcx, Numérico, Opção selecionada

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function MDT625RI(cAlias,nReg,nOpcx)

	//Variaveis a serem utilizadas para montagem da tela
	Local nReg		:= TO0->( Recno() )
	Local nTabelas	:= 0
	Local lOk		:= .F.
	Local aNao		:= {}
	Local aChoice	:= {}
	Local aColor	:= NGCOLOR()
	Local aRotOld	:= aClone( aRotina )//Salva o aRotina
	Local aArea	    := GetArea()//Salva a area de trabalho atual

	//Variaveis de tamanho de tela
	Local lEnchBar	:= .T. // Indica se a janela de diálogo possuirá enchoicebar
	Local lPadrao	:= .F. // Indica se a janela deve respeitar as medidas padrões do Protheus (.T.) ou usar o máximo disponível (.F.)
	Local nMinY		:= 430 // Altura mínima da janela
	Local aSize 	:= MsAdvSize( lEnchBar , lPadrao , nMinY )
	Local aObjects  := {}
	Local aInfo 	:= {}
	Local aPosObj 	:= {}

	//Define os Objetos
	Local oDialog
	Local oPnlPai
	Local oPnlTop
	Local oPnlBtn
	Local oEnchoice

	//Define variavel pardao que recebera o valor do código do Plano
	Private cPlanoRel	:= TAA->TAA_CODPLA
	Private cTipoPlan   := TAA->TAA_TIPOPL

	Private aCols   := {}
	Private aHeader := {}
	Private oGetDad

	//Define um novo aRotina padrao para nao ocorrer erro
	aRotina 	:=	{ { STR0001 ,   "AxPesqui"	, 0 , 1},; //"Pesquisar"
                      { STR0002 ,   "NGCAD01"		, 0 , 2},; //"Visualizar"
                      { STR0007 ,   "NGCAD01"		, 0 , 3},; //"Incluir"
                      { STR0008 ,   "NGCAD01"		, 0 , 4},; //"Alterar"
                      { STR0009 ,   "NGCAD01"		, 0 , 5, 3} } //"Excluir"

	//Define modo de alteracao para a Tabela
	aRotSetOpc( "TAA" , @nReg , 4 )
	RegToMemory( "TAA" , .F. )
	INCLUI := .F.
	ALTERA := .T.

	aChoice := NGCAMPNSX3( "TAA" , aNao )

	//Definicoes de tamanho de tela
	aAdd( aObjects, { 100, 100, .T., .T. } )
	aAdd( aObjects, { 315,  70, .T., .T. } )
	aInfo   := { aSize[ 1 ] , aSize[ 2 ] , aSize[ 3 ] , aSize[ 4 ] , 3 , 3 }
	aPosObj := MsObjSize( aInfo , aObjects , .F. )

	//Realiza a busca das informacoes dos aCols
	Processa( { | lEnd | fBusca() } , "Carregando Informações" )

	//Monta a Tela
	Define MsDialog oDialog Title OemToAnsi( cCadastro ) From aSize[ 7 ] , 0 To aSize[ 6 ] , aSize[ 5 ] Of oMainWnd Pixel

		//Panel criado para correta disposicao da tela
		oPnlPai := TPanel():New( , , , oDialog , , , , , , , , .F. , .F. )
			oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

			//Painel - Parte Superior ( Cabeçalho )
			oPnlTop := TPanel():New( , , , oPnlPai , , , , , , , aSize[ 6 ] / 6 , .F. , .F. )
		   		oPnlTop:Align := CONTROL_ALIGN_TOP
	            //Monta a Enchoice de Planos
				oEnchoice:= MsMGet():New( "TAA" , TAA->( Recno() ) , 2 , , , , aChoice , { 12 , 0 , aSize[ 6 ] / 2 , aSize[ 5 ] / 2 } , , , , , , oPnlTop )
					oEnchoice:oBox:Align := CONTROL_ALIGN_ALLCLIENT

			//Painel - Parte Intermediária ( Botão de Importação )
			oPnlBtn := TPanel():New( , , , oPnlPai , , , , , , , 15 , .F. , .F. )
		   		oPnlBtn:Align := CONTROL_ALIGN_TOP
			    //Monta o Botão de Riscos
				TButton():New( 2 , 5 , STR0007 , oPnlBtn , { | | fButton() } , 49 , 12 , , /*oFont*/ , , .T. , , , , /* bWhen*/ , , ) //"Riscos"

			//Rodapé indicativo
			oPnlRod := TPanel():New( , , , oPnlPai , , , , , aColor[ 2 ] , , 10 , .F. , .F. )
		   		oPnlRod:Align := CONTROL_ALIGN_BOTTOM
		   		//Monta o Texto indicativo do Rodapé
		   		TSay():New( 2 , 4 , { | | OemtoAnsi( "Informe os Riscos necessário. Caso deseje selecionar multipos, utilize a opção 'Riscos' no painel acima." ) } , oPnlRod , , , .F. , .F. , .F. , .T. , aColor[ 1 ] , , 600 , 008 )

			//Redefine as variaveis para montar as GetDados corretamente
			INCLUI := .F.
			ALTERA := .T.

			//Monta a GetDados
			dbSelectArea( "TNJ" )
			PutFileInEof( "TNJ" )
			oGetDad  := MsNewGetDados():New( 0 , 0 , 1000 , 1000 , IIF( !INCLUI .And. !ALTERA , 0 , GD_INSERT+GD_UPDATE+GD_DELETE ) , ;
															{ | | fLinhaOK() } , { | | .T. } , , , , 9999 , , , , oPnlPai , ;
															aHeader , aCols )
				oGetDad:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
				oGetDad:oBrowse:Refresh()


	//Ativacao do Dialog
	Activate MsDialog oDialog Centered On Init EnchoiceBar( oDialog , { | | lOk := .T. , If( fTudoOk( ) , oDialog:End() , lOk := .F. ) } , { | | lOk := .F. , oDialog:End() } )

	If lOk//Caso confirmacao da tela, realiza gravacao dos dadods
		Processa( { | lEnd | fGrava( ) } , "Gravando Informações" )
	EndIf

	//Retorna o aRotina
	aRotina := aClone( aRotOld )

	//Retorna a Area de Trabalho
	RestArea( aArea )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} fBusca
Monta os arrays de aCols e aHeader

@return Nil

@sample
fBusca( )

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fBusca( )

	//Variaveis basicas
	Local cTab 		:= ""

	//Variaveis para montagem do aCols e aHeader
	Local nInd		:= 0
	Local cKeyGet	:= ""
	Local cWhileGet	:= ""
	Local aNoFields	:= {}


	//Zera o aCols e aHeader ( Genéricos )
	aCols := {}
	aHeader := {}

	cTab := "TNJ"//Salva a Tabela

	// Define os campos que nao apareceram da GetDados
	aAdd( aNoFields , PrefixoCPO( cTab ) + "_CODPLA" )
	aAdd( aNoFields , PrefixoCPO( cTab ) + "_NOMPLA" )
	aAdd( aNoFields , PrefixoCPO( cTab ) + "_FILIAL" )

	//Estrutura padrao de repeticao da tabela
	cWhileGet:= cTab + "->" + PrefixoCPO( cTab ) + "_FILIAL == '" + xFilial( cTab ) + "' .And. " + ;
					cTab + "->" + PrefixoCPO( cTab ) + "_CODPLA == '" + cPlanoRel + "'"

	If lSigaMdtPs//Caso seja prestador
		//Define que os campos de cliente e loja nao iram aparecer na GetDados
		aAdd( aNoFields , PrefixoCPO( cTab ) + "_CLIENT" )
		aAdd( aNoFields , PrefixoCPO( cTab ) + "_LOJA" )

		//Altera Indice, Chave de Pesquisa e Repeticao padrao da Tabela
		If ( nInd := NGRETORDEM( cTab , PrefixoCPO( cTab ) + "_FILIAL+" + PrefixoCPO( cTab ) + "_CLIENT+" + PrefixoCPO( cTab ) + "_LOJA+" + PrefixoCPO( cTab ) + "_CODPLA" , .F. ) ) == 0
			nInd		:= 2
		EndIf
		cKeyGet		:= "cCliMdtPs + cPlanoRel"
		cWhileGet	+= cTab + "->" + PrefixoCPO( cTab ) + "_CLIENT+" + cTab + "->" + PrefixoCPO( cTab ) + "_LOJA = '" + cCliMdtPs + "'"
	Else
		//Define Indice e Chave de Pesquisa
		nInd		:= 2
		cKeyGet		:= "cPlanoRel"
	EndIf

	//Realiza a montagem do aCols e aHeader
	dbSelectArea( cTab )
	dbSetOrder( nInd )
	FillGetDados( 4 , cTab , nInd , cKeyGet , { | | } , { | | .T. } , aNoFields , , , , ;
					{ | | NGMontaaCols( cTab , &cKeyGet , cWhileGet ) } )


Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fGrava
Grava as informacoes no banco de dados

@return Nil
@param lDeletar - Indica se e exclusao

@sample
fGrava( )

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fGrava( lDeletar )

	//Variaveis auxiliares
	Local j
	Local nPos 			:= 0
	Local nGrav 		:= 0
	Local nCodigo		:= 0
	Local nPosDel		:= 0
	Local nIdx			:= 0
	Local cTab			:= ""
	Local cSeek			:= ""
	Local cWhile		:= ""
	Local cSecCmp		:= ""
	Local aColsGrava	:= {}
	Local aHeadGrava	:= {}

	Default lDeletar	:= .F.//Define padrao como nao Exclusao

	If lSigaMdtPs//Caso prestador
		//Altera indice e chave de pesquisa
		If ( nInd := NGRETORDEM( cTab , PrefixoCPO( cTab ) + "_FILIAL+" + PrefixoCPO( cTab ) + "_CLIENT+" + PrefixoCPO( cTab ) + "_LOJA+" + PrefixoCPO( cTab ) + "_LAUDO" , .F. ) ) == 0
			nInd		:= 2
		EndIf
		cSeek	:= cCliMdtPs + cPlanoRel
	Else
		//Define indice e chave de pesquisa padrao
		nIdx	:= 1
		cSeek	:= cPlanoRel
	EndIf

	//Salva tabela e posicao do código do array de relacionamento
	cTab 		:= "TNJ"
	cCodigo		:= "TNJ_NUMRIS"
	cWhile 		:= cTab + "->" + PrefixoCPO( cTab ) + "_FILIAL == '" + xFilial( cTab ) + "' .And. " + ;
					cTab + "->" + PrefixoCPO( cTab ) + "_CODPLA == '" + cPlanoRel + "'"
	If lSigaMdtPs
		cWhile	+= cTab + "->" + PrefixoCPO( cTab ) + "_CLIENT+" + cTab + "->" + PrefixoCPO( cTab ) + "_LOJA = '" + cCliMdtPs + "'"
	EndIf

	//Salva aCols e aHeader correspondente
	aColsGrava	:= aClone( aCols )
	aHeadGrava	:= aClone( aHeader )

	//Procura a posicao do código
	nCodigo		:= aScan( aHeadGrava , { | x | AllTrim( Upper( x[ 2 ] ) ) == cCodigo } )

	//Salva a posicao correspondente a indicacao de deletados
	nPosDel		:= Len( aHeadGrava ) + 1

	If nCodigo > 0//Caso encontre a posicao de codigo
		If !lDeletar//Caso nao seja para deletar
			//Coloca os deletados por primeiro
			aSORT( aColsGrava , , , { | x , y | x[ nPosDel ] .And. !y[ nPosDel ] } )

			//Posiciona na tabela e percorre o aCols
			dbSelectArea( cTab )
			dbSetOrder( nIdx )
			For nGrav := 1 To Len( aColsGrava )
				If !aColsGrava[ nGrav , nPosDel ] .And. !Empty( aColsGrava[ nGrav , nCodigo ] ) //Caso nao esteja deletada a linha e campo codigo esteja preenchido
					If dbSeek( xFilial( cTab ) + aColsGrava[ nGrav , nCodigo ]  + cSeek ) //Verifica se ja existe a informacao na tabela
						RecLock( cTab , .F. )
					Else
						RecLock( cTab , .T. )
					EndIf
					For j := 1 to FCount()//Percorre todos os campos da tabela gravando as informacoes, caso necessaria inclusao específica, feita condicao via If/ElseIf
						If "_FILIAL" $ Upper( FieldName( j ) )
							FieldPut( j , xFilial( cTab ) )
						ElseIf "_CODPLA" $ Upper( FieldName( j ) )
							FieldPut( j , cPlanoRel )
						ElseIf "_CLIENT" $ Upper( FieldName( j ) )
							FieldPut( j , SA1->A1_COD )
						ElseIf "_LOJA" $ Upper( FieldName( j ) )
							FieldPut( j , SA1->A1_LOJA )
						ElseIf ( nPos := aScan( aHeadGrava , { | x | AllTrim( Upper( x[ 2 ] ) ) == AllTrim( Upper( FieldName( j ) ) ) } ) ) > 0//Caso posicao do campo esteja no aHeader
							FieldPut( j , aColsGrava[ nGrav , nPos ] )
						Endif
					Next j
					( cTab )->( MsUnLock() )
				Else
					If dbSeek( xFilial( cTab ) + aColsGrava[ nGrav , nCodigo ]  + cSeek  )//Caso campo esteja deletado e exista na tabela, deleta
						RecLock( cTab , .F. )
						( cTab )->( dbDelete() )
						( cTab )->( MsUnLock() )
					EndIf
				EndIf
			Next nGrav
		EndIf

		//Verifica toda a tabela, para que delete os registros caso este nao estejam no aCols ou seja 'exclusao'
		dbSelectArea( cTab )
		dbSetOrder( nIdx )
		dbSeek( xFilial( cTab ) + cSeek )
		While ( cTab )->( !Eof() ) .And. &( cWhile )
			If lDeletar .Or. aScan( aColsGrava , { | x | x[ nCodigo ] == &( cCodigo ) .And. !x[ Len( x ) ] } ) == 0
				RecLock( cTab , .F. )
				( cTab )->( dbDelete() )
				( cTab )->( MsUnLock() )
			Endif
			dbSelectArea( cTab )
			( cTab )->( dbSkip() )
		End
	EndIf

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fLinhaOk
Validacao de Linha padrao das GetDados

@return - Lógico - Indica se esta tudo correto na linha

@parma [lFim], Lógico, Indica se eh chamado pelo TudoOk

@sample fLinhaOK()

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fLinhaOK( lFim )

	//Variaveis auxiliares
	Local f
	Local aColsOk 	:= {}
	Local aHeadOk   := {}
	Local lRet      := .T.
	Local nPosCod 	:= 1
	Local nAt       := 1
	Local nCols
	Local nHead

	Default lFim 	:= .F.//Define fim como .F.

	//Salva o aCols e aHeader de acordo com a posicao, o nAt da GetDados posicionada e o código de acordo com sua posicao
	aColsOk	:= aClone( oGetDad:aCols )
	aHeadOk	:= aClone( aHeader )
	nAt		:= oGetDad:nAt
	nPosCod	:= aScan( aHeadOk , { | x | AllTrim( Upper( x[ 2 ] ) ) == "TNJ_NUMRIS" } )

	//Percorre aCols
	For f:= 1 to Len( aColsOk )
		If !aColsOk[ f , Len( aColsOk[ f ] ) ]
			If lFim .Or. f == nAt//Caso seja final ou linha atual
				//Verifica se os campos obrigatórios estão preenchidos
				If Empty( aColsOk[ f , nPosCod ] ) .And. If( lFim , Len( aColsOk ) <> 1 , .T. )
					//Mostra mensagem de Help
					Help( 1 , " " , "OBRIGAT2" , , aHeadOk[ nPosCod , 1 ] , 3 , 0 )
					Return .F.
				Endif
				
				dbSelectArea( "TN0" )
				dbSetOrder( 1 ) //TN0_FILIAL+TN0_NUMRIS
				If dbSeek( xFilial( "TN0" ) + aColsOk[ f , nPosCod ] )

					If TN0->TN0_MAPRIS == '3'

						lRet := cTipoPlan $ ( '1/2/3/5' )

					Else

						lRet := ( TN0->TN0_MAPRIS == cTipoPlan )

					EndIf

				EndIf

				If !lRet

					ShowHelpDlg( STR0014 , ; //"ATENÇÃO"
										{ STR0021 } , 2 , ; //"Risco inválido."
										{ STR0022 } , 2 ) //"Favor informar uma risco válido."
					Return lRet
				
				EndIf

			Endif
			//Verifica se é somente LinhaOk
			If f <> nAt .And. !aColsOk[ nAt , Len( aColsOk[ nAt ] ) ]
				If aColsOk[ f , nPosCod ] == aColsOk[ nAt , nPosCod ]
					//Mostra mensagem de Help
					Help( " " , 1 , "JAEXISTINF" , , aHeadOk[ nPosCod , 1 ] )
					Return .F.
				Endif
			Endif
		Endif
	Next f

	//Posiciona tabelas em fim de arquivo
	PutFileInEof( "TNJ" )
	PutFileInEof( "TAA" )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} fTudoOk
Validacao final da tela

@return - Lógico - Indica se está tudo correto na tela
fTudoOk( )

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fTudoOk( )

	//Variaveis auxiliares
	Local nCont
	Local lRet := .T.//Indica o retorno

	aCols := aClone( oGetDad:aCols )
	If !fLinhaOK( .T. )//Valida todos os Folders
		//Caso encontre inconsistência retorna
		lRet := .F.
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} fButton
Adiciona multiplos no relacionamento

@return Nil
@param oFolder 	- Objeto do Folder ( Obrigatório )
fButton( oFolder )

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fButton( oFolder )

	Local nCps		:= 0
	Local cTab		:= "TAA"
	Local cTabRel	:= "TN0"
	Local aTam		:= {}
	Local aCampos	:= { "TN0_NUMRIS" , "TN0_AGENTE" , "TN0_NOMAGE" }
	Local aArea		:= GetArea()//Salva a Area Atual
	Local aAreaAtu	:= {}
	Local nIdx		:= 0
	//Variaveis para montar TRB
	Local cAliasTRB	:= GetNextAlias()
	Local aDBF, aTRB, aIdx, aDescIdx

	//Variaveis da Montagem do MarkBrowse
	Local lOK := .F.
	Local lInverte, lRet

	//Definicoes de Objetos
	Local oDialog
	Local oMark
	Local oPnlTot

	//Variaveis Privadas
	Private cMarca	:= GetMark()
	Private oGetVal	:= oGetDad

	//Variaveis da Pesquisa
	Private cPesquisar := Space( 200 )//Valor a ser pesquisado
	Private cCbxPesq   := ""
	Private aCbxPesq //ComboBox com indices de pesquisa
	Private oBtnPesq, oPesquisar//Botao de Pesquisa e Campo para Pesquisa
	Private oCbxPesq //ComboBox de Pesquisa

	lInverte := .F.

	//Valores e Caracteristicas da TRB
	aDBF		:= {}
	aTRB		:= {}
	aIdx		:= {}
	aDescIdx	:= {}

	aAdd( aDBF , { "OK"      , "C" , 02 , 0 } )
	aAdd( aTRB , { "OK"     , NIL , " "	  	 , })

	//Define os campos
	aAreaAtu := GetArea()
	For nCps := 1 To Len( aCampos )

		aTam := TAMSX3( aCampos[ nCps ] )
		cTipo := GetSx3Cache( aCampos[nCps],"X3_TIPO" )
		cTitulo := AllTrim( Posicione("SX3",2,aCampos[nCps],"X3Titulo()") )

		aAdd( aDBF , { aCampos[ nCps ] , cTipo	, aTam[ 1 ]	, aTam[ 2 ]	} )
		aAdd( aTRB , { aCampos[ nCps ] , NIL 	, cTitulo	,			} )
	Next nCps

	MDTA232IDX( @aIdx , @aDescIdx , aCampos ) //Realiza a Geracao dos Indices

	//Adiciona ultima posicao como Marcados
	aAdd( aIdx , "OK" )
	RestArea( aAreaAtu )

	//Cria TRB
	oTempTRB := FWTemporaryTable():New( cAliasTRB, aDBF )
	For nIdx := 1 To Len( aIdx )
		oTempTRB:AddIndex( RETASC( cValToChar( nIdx ) , 1 , .T. ), StrTokArr( aIdx[nIdx] , "+" ) )
	Next nIdx
	oTempTRB:Create()

	dbSelectArea( cTab )

	Processa( { | lEnd | fBuscaReg( cTabRel , cAliasTRB , aCampos , "TNJ_NUMRIS" ) } , "Buscando Registros" , "Aguarde" )

	dbSelectArea( cAliasTRB )
	dbGoTop()
	If ( cAliasTRB )->(Reccount()) <= 0
		oTempTRB:Delete()
		RestArea( aArea )
		lRefresh := .T.
		Msgstop( "Não existem registros cadastrados" , "ATENÇÃO" )
		Return .T.
	Endif

	DEFINE MSDIALOG oDialog TITLE OemToAnsi( "Riscos" ) From 64,160 To 580,736 OF oMainWnd Pixel

		oPnlTot := TPanel():New( , , , oDialog , , , , , , , , .F. , .F. )
			oPnlTot:Align := CONTROL_ALIGN_ALLCLIENT

		//--- DESCRICAO ( TOPO )
		oPanel := TPanel():New( 0 , 0 , , oPnlTot , , .T. , .F. , , , 0 , 55 , .T. , .F. )
			oPanel:Align := CONTROL_ALIGN_TOP

			@ 8,9.6 TO 45,280 OF oPanel PIXEL

			TSay():New( 19 , 12 , { | | OemtoAnsi( "Estes são os registros cadastrados no sistema." ) } , oPanel , , , .F. , .F. , .F. , .T. , CLR_BLACK , CLR_WHITE , 200 , 010 )
			TSay():New( 29 , 12 , { | | OemtoAnsi( "Selecione aqueles que foram avaliados no laudo." ) } , oPanel , , , .F. , .F. , .F. , .T. , CLR_BLACK , CLR_WHITE , 200 , 010 )

		//--- PESQUISAR
		//Define as opcoes de Pesquisa
		aCbxPesq := aClone( aDescIdx )
		aAdd( aCbxPesq , "Marcados" )
		cCbxPesq := aCbxPesq[ 1 ]

		oPnlPesq 		:= TPanel():New( 01 , 01 , , oPnlTot , , , , CLR_BLACK , CLR_WHITE , 50 , 30 , .T. , .T. )
			oPnlPesq:Align	:= CONTROL_ALIGN_TOP

				oCbxPesq := TComboBox():New( 002 , 002 , { | u | If( PCount() > 0 , cCbxPesq := u , cCbxPesq ) } , ;
														aCbxPesq , 200 , 08 , oPnlPesq , , { | | } ;
														, , , , .T. , , , , , , , , , "cCbxPesq" )
					oCbxPesq:bChange := { | | fSetIndex( cAliasTRB , aCbxPesq , @cPesquisar , oMark ) }

				oPesquisar := TGet():New( 015 , 002 , { | u | If( PCount() > 0 , cPesquisar := u , cPesquisar ) } , oPnlPesq , 200 , 008 , "" , { | | .T. } , CLR_BLACK , CLR_WHITE , ,;
										.F. , , .T. /*lPixel*/ , , .F. , { | | .T. }/*bWhen*/ , .F. , .F. , , .F. /*lReadOnly*/ , .F. , "" , "cPesquisar" , , , , .F. /*lHasButton*/ )

				oBtnPesq := TButton():New( 002 , 220 , "Pesquisar" , oPnlPesq , { | | fPesqTRB( cAliasTRB , oMark ) } , ;
														70 , 10 , , , .F. , .T. , .F. , , .F. , , , .F. )

		oMark := MsSelect():New( cAliasTRB , "OK" , , aTRB , @lInverte , @cMarca , { 45 , 5 , 180 , 281 } )
			oMark:oBrowse:lHasMark		:= .T.
			oMark:oBrowse:lCanAllMark	:= .T.
			oMark:oBrowse:bAllMark		:= { | | fInverte( cMarca , cAliasTRB , oMark , .T. ) }//Funcao inverte marcadores
			oMark:bMark	   				:= { | | fInverte( cMarca , cAliasTRB , oMark ) }//Funcao inverte marcadores
			oMark:oBrowse:Align			:= CONTROL_ALIGN_BOTTOM

	ACTIVATE MSDIALOG oDialog ON INIT EnchoiceBar(oDialog,{|| lOk := .T. ,oDialog:End()},{|| lOk := .F.,oDialog:End()}) CENTERED

	If lOK
		fGravCols( oGetDad , cAliasTRB , aCampos , "TNJ_NUMRIS",  )//Funcao para copiar planos a GetDados
	Endif

	oTempTRB:Delete()

	RestArea(aArea)

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} fSetIndex
Seta o indice para pesquisa

@return

@param cAliasTRB	- Alias do TRB ( Obrigatório )
@param aCbxPesq		- Indices de pesquisa do markbrowse. ( Obrigatório )
@param cPesquisar	- Valor da Pesquisa ( Obrigatório )
@param oMark		- Objeto do MarkBrowse ( Obrigatório )

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fSetIndex( cAliasTRB , aCbxPesq , cPesquisar , oMark )

	Local nIndice := fRetInd( aCbxPesq ) // Retorna numero do indice selecionado

	// Efetua ordenacao do alias do markbrowse, conforme indice selecionado
	dbSelectArea( cAliasTRB )
	dbSetOrder( nIndice )
	dbGoTop()

	// Se o indice selecionado for o ultimo [Marcados]
	If nIndice == Len( aCbxPesq )
		cPesquisar := Space( Len( cPesquisar ) ) // Limpa campo de pesquisa
		oPesquisar:Disable()              // Desabilita campo de pesquisa
		oBtnPesq:Disable()              // Desabilita botao de pesquisa
		oMark:oBrowse:SetFocus()     // Define foco no markbrowse
	Else
		oPesquisar:Enable()               // Habilita campo de pesquisa
		oBtnPesq:Enable()               // Habilita botao de pesquisa
		oBtnPesq:SetFocus()             // Define foco no campo de pesquisa
	Endif

	oMark:oBrowse:Refresh()

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fRetInd
Retorna o indice, em numero, do item selecionado no combobox

@return nIndice - Retorna o valor do Indice

@param aIndMrk - Indices de pesquisa do markbrowse. ( Obrigatório )

@author Hugo R. Pereira
@since 07/01/2013
/*/
//-------------------------------------------------------------------
Static Function fRetInd( aIndMrk )

	Local nIndice := aScan( aIndMrk , { | x | AllTrim( x ) == AllTrim( cCbxPesq ) } )

	// Se o indice nao foi encontrado nos indices pre-definidos, apresenta mensagem
	If nIndice == 0
		ShowHelpDlg( "Atenção" ,	{ "Índice não encontrado." } , 1 , ; //"Atenção"###"Índice não encontrado."
									{ "Contate o administrador do sistema." } , 1 ) //"Contate o administrador do sistema."
		nIndice := 1
	Endif

Return nIndice

//-------------------------------------------------------------------
/*/{Protheus.doc} fBuscaReg
Realiza a busca dos registros para alimentar o TRB

@return Nil

@param cTabela - Tabela a ser pesquisada ( Obrigatório )
@param nFolPos - Posicao do Folder ( Obrigatório )
@param aCampos - Campos a serem considerados ( Obrigatório )
@param cCodigo - Campo de codigo a ser validado ( Obrigatório )

@sample
fButton( "TN0" , 1 , { "TN0_NUMRIS" , "TN0_NOMAGE" } , "TN0_NUMRIS" )

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fBuscaReg( cTabela , cAliasTRB , aCampos , cCodigo )

	Local nCps		:= 0
	Local nPosCod	:= 1
	Local nPosSec	:= 0
	Local cCampo	:= ""
	Local cCpsVal	:= ""
	Local cCodRel	:= ""
	Local oGet		:= oGetDad
	Local aColsOK	:= aClone( oGet:aCols )
	Local aHeadOk	:= aClone( oGet:aHeader )

    nPosCod	:= aScan( aHeadOk , { | x | AllTrim( Upper( x[ 2 ] ) ) == cCodigo } )
	cCodRel := aCampos[ 1 ]

	dbSelectArea( cTabela )
	dbSetOrder( 1 )
	If dbSeek( xFilial( cTabela ) )
		While ( cTabela )->( !Eof() ) .And. ( cTabela )->&( PrefixoCPO( cTabela ) + "_FILIAL" ) == xFilial( cTabela )

			If ( cTabela )->&( PrefixoCPO( cTabela ) + "_MAPRIS" ) == cTipoPlan .Or.; //Só traz os do mesmo tipo (SESMT/CIPA/Ambos)
				(;
					cTabela == 'TN0' .And.; //Se a tabela for diferente de TN0, aborta a validação
						(TN0->TN0_MAPRIS == "1" .And. cTipoPlan $ "13") .Or.;
						(TN0->TN0_MAPRIS == "2" .And. cTipoPlan $ "235") .Or.;
						(TN0->TN0_MAPRIS == "3" .And. cTipoPlan <> "4");
				)

				RegToMemory( cTabela , .F. )
				RecLock( cAliasTRB , .T. )
				(cAliasTRB)->OK     := If( aScan( aColsOk , { | x | x[ nPosCod ] == &( "M->" + cCodRel )  } ) > 0, cMarca , " " )
				For nCps := 1 To Len( aCampos )
					cCampo := aCampos[ nCps ]
					&( cAliasTRB + "->" + cCampo ) := &( "M->" + cCampo )
				Next nCps
				( cAliasTRB )->( MsUnLock() )

			EndIf

			( cTabela )->( dbSkip() )

		EndDo
	EndIf

	dbSelectArea( cTabela )
	dbSetOrder( 1 )
	Set Filter To

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fGravCols
Faz as gravações do TRB para o aCols correspondente

@return Nil

@param oGet		 - Objeto da GetDados ( Obrigatório )
@param cAliasTRB - Alias do TRB ( Obrigatório )
@param aCampos   - Campos a serem considerados ( Obrigatório )
@param cCodigo   - Campo de codigo a ser validado ( Obrigatório )
@param aCampos2  - Campos a serem verificados no aHeader ( Obrigatório )

@sample
fButton( "TN0" , 1 , { "TN0_NUMRIS" , "TN0_NOMAGE" } , "TN0_NUMRIS" )

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fGravCols( oGet , cAliasTRB , aCampos , cCodigo, aCampos2 )

	Local nCols, nCps
	Local nPosCod  := 1
	Local nPosSec  := 0
	Local nPosCps  := 0
	Local cCpsVal  := ""
	Local cCodRel  := ""
	Local aColsOk  := {}
	Local aHeadOk  := {}
	Local aColsTp  := {}
	//{"_RISCO","_NOMAGE"}

	aColsOk := aClone( oGet:aCols )
	aHeadOk := aClone( oGet:aHeader )
	aColsTp := BLANKGETD( aHeadOk )

	nPosCod := aScan( aHeadOk , { | x | Trim( Upper( x[ 2 ] ) ) == cCodigo } )
	cCodRel := aCampos[ 1 ]

	For nCols := Len( aColsOk ) To 1 Step -1 //Deleta do aColsOk os registros - não marcados; não estiver encontrado
		dbSelectArea( cAliasTRB )
		dbSetOrder( 1 )
		If !dbSeek( aColsOK[ nCols , nPosCod ] ) .Or. Empty( ( cAliasTRB )->OK )
			aDel( aColsOk , nCols )
			aSize( aColsOk , Len( aColsOk ) - 1 )
		EndIf
	Next nCols

	dbSelectArea( cAliasTRB )
	dbGoTop()
	While ( cAliasTRB )->( !Eof() )
		If !Empty( ( cAliasTRB )->OK ) .And. aScan( aColsOk , {|x| x[ nPosCod ] == &( cAliasTRB + "->" + cCodRel ) } ) == 0
			aAdd( aColsOk , aClone( aColsTp[ 1 ] ) )
			For nCps := 1 To Len( aCampos )
				nPosCps := aScan( aHeadOk , { | x | SubStr( aCampos[ nCps ], 4 ) $ Upper( x[ 2 ] ) } )
				If nPosCps > 0
					aColsOk[ Len( aColsOk ) , nPosCps ] := &( cAliasTRB + "->" + aCampos[ nCps ] )
				EndIf
			Next nCps
		EndIf
		( cAliasTRB )->(dbSkip())
	EndDo

	If Len( aColsOK ) <= 0
		aColsOK := aClone( aColsTp )
	EndIf

	aSort( aColsOK , , , { | x , y | x[ 1 ] < y[ 1 ] }) //Ordena por plano
	oGet:aCols := aClone( aColsOK )
	oGet:oBrowse:Refresh()

Return .T.
//-------------------------------------------------------------------
/*/{Protheus.doc} fInverte
Inverte as marcacoes ( bAllMark )

@return Nil

@param cMarca 		- Valor da marca do TRB ( Obrigatório )
@param cAliasTRB	- Alias do TRB ( Obrigatório )
@param oMark		- Objeto do MarkBrowse ( Obrigatório )
@param lAll			- Indica se eh AllMark

@sample
fInverte( "E" , "TRB" )

@author Jackson Machado
@since 18/07/2013
/*/
//-------------------------------------------------------------------
Static Function fInverte( cMarca , cAliasTRB , oMark , lAll )

	Local aArea := {}

	Default lAll := .F.

	If lAll
		aArea := GetArea()

		dbSelectArea( cAliasTRB )
		dbGoTop()
		While ( cAliasTRB )->( !Eof() )
			( cAliasTRB )->OK := IF( Empty( ( cAliasTRB )->OK ) , cMarca , Space( Len( cMarca ) ) )
			(cAliasTRB)->( dbskip() )
		End

		RestArea( aArea )
	EndIf

	// Atualiza markbrowse
	oMark:oBrowse:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} fPesqTRB
Funcao de Pesquisar no Browse.

@samples fPesqTRB()

@return Sempre verdadeiro

@param cAliasTRB	- Alias do MarkBrowse ( Obrigatório )
@param oMark 		- Objeto do MarkBrowse ( Obrigatório )

@author Jackson Machado
@since 29/04/2013
/*/
//-------------------------------------------------------------------
Static Function fPesqTRB( cAliasTRB , oMark )

	Local nRecNoAtu := 1//Variavel para salvar o recno
	Local lRet		:= .T.

	//Posiciona no TRB e salva o recno
	dbSelectArea( cAliasTRB )
	nRecNoAtu := RecNo()

	dbSelectArea( cAliasTRB )
	If dbSeek( AllTrim( cPesquisar ) )
		//Caso exista a pesquisa, posiciona
		oMark:oBrowse:SetFocus()
	Else
		//Caso nao exista, retorna ao primeiro recno e exibe mensagem
		dbGoTo( nRecNoAtu )
		ApMsgInfo( "Valor não encontrado." , "Atenção" ) //"Valor não encontrado."###"Atenção"
		oPesquisar:SetFocus()
		lRet := .F.
	EndIf

	// Atualiza markbrowse
	oMark:oBrowse:Refresh(.T.)

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDTA650Val( nCpo )
Função de validação para os campos da rotina MDTA650

nCpo - 1 - TNJ_CODPLA

@param nCpo - Indica qual campo fará a validação.
@author Guilherme Benkendorf
@since 12/05/2014
/*/
//-------------------------------------------------------------------
Function MDTA650Val( nCpo )

	Local lRet     := .T.
	Local lMDTA650 := IsInCallStack("MDTA650")
	Local cCodRisco

	If nCpo == 1 .And. !Empty( M->TNJ_CODPLA )
		cCodRisco := If( lMDTA650, "TNJ_NUMRIS", "TN0_NUMRIS" )
		lRet := EXISTCPO('TAA',M->TNJ_CODPLA) .And. EXISTCHAV('TNJ',M->( &cCodRisco )+M->TNJ_CODPLA)
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MDT650VAL
Função para verificar se informou um código válido.

@type function

@source MDTA650.prx

@param cCodRis, Caracter, Código do risco.

@author Jean Pytter da Costa
@since 12/08/2016

@sample MDT650VAL()
@obs Valid do campo TNJ_NUMRIS

@return Lógico, Indica se todas validações estão corretas.
/*/
//-------------------------------------------------------------------
Function MDT650VAL( cCodRis )

	Local lRet := .T.

	DbSelectArea( "TN0" )
	DbSetOrder( 1 ) //TN0_FILIAL+TN0_NUMRIS
	If DbSeek( xFilial( "TN0" ) + cCodRis )
		
		If TN0->TN0_MAPRIS == '3'

			lRet := cTipoPlan $ ( '1/2/3/5' )

		Else

			lRet := ( TN0->TN0_MAPRIS == cTipoPlan )

		EndIf

	EndIf

	If !lRet

		ShowHelpDlg( STR0014 , ;//"ATENÇÃO"
		{ STR0021 } , 2 , ; //"Risco inválido."
			{ STR0022 } , 2 ) //"Favor informar uma risco válido."

	EndIf

Return lRet
