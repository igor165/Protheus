#INCLUDE "MNTA998.ch"
#INCLUDE "Protheus.ch"
#INCLUDE "FWADAPTEREAI.CH" // Integração via Mensagem Única

Static lRel12133 := GetRPORelease() >= '12.1.033'

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ MNTA998  ³ Autor ³ Rafael Diogo Richter  ³ Data ³21/11/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Importacao de Pneus de arquivo TXT para o SIGAMNT           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaMNT                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNTA998()

	Local lImp1       := .F.
	Local lImp2       := .F.
	Local nOpcax      := 0,nF := 0
	Local lGFrotas    := NGATUSEFR()
	Local aNGBEGINPRM := NGBEGINPRM()
	Local oTempTable

	Private aVETINR   := {}
	Private cTRB1	  := GetNextAlias()
	Private cCodEmp   := If(FindFunction("FWGrpCompany"),FWGrpCompany(),SM0->M0_CODIGO)
	Private cCodFil   := If(FindFunction("FWCodFil")    ,FWCodFil()    ,SM0->M0_CODFIL)
	Private cCalend	  := Space(3)
	Private nBemImp   := 0
	Private nRegLi	  := 0
	Private cArquivo1
	Private oDlgPar
	Private oCalend


	//Verifica se está integrado ao frotas
	If !lGFrotas
		MsgInfo(STR0001,STR0002) //"Você não está em um ambiente que utiliza Frotas"###"Atenção"

		NGRETURNPRM(aNGBEGINPRM)
		Return .T.
	EndIf

	//Verifica se está integrado a Pneus
	If GetNewPar("MV_NGPNEUS","N") != "S"
		MsgInfo(STR0069,STR0002) //"Você não possui integração com Pneus.(MV_NGPNEUS)"###"Atenção"

		NGRETURNPRM(aNGBEGINPRM)
		Return .T.
	EndIf

	cTELA := STR0003+chr(13); //"Este programa tem por objetivo a importação de Pneus através de um arquivo "
			+STR0004+chr(13)+chr(13); //"no formato TXT para o modulo SIGAMNT."
			+STR0005+chr(13); 		  //"Antes de confirmar a execucao do processo, fazer uma copia de seguranca"
			+STR0006+chr(13); 		  //"dos arquivos/tabelas ST9,TQS,TQV,STC,STZ,TQZ e STP em uso. Caso ocorrer algum"
			+STR0007+chr(13); 		  //"problema durante a execucao do processo as copias de seguranca deverao ser restauradas."
			+STR0008+chr(13)+chr(13); //"Este processo podera levar algum tempo para ser executado."
			+STR0009 				  //"Deseja efeturar o processamento (S/N)?"

	If !MsgYesNo(cTELA,STR0002) //"Atenção"

		NGRETURNPRM(aNGBEGINPRM)
		Return .T.
	EndIf

	cType := "Texto     | *.TXT"

	//Seleciona o Arquivo TXT 1
	If MsgYesNo(STR0194) //"Deseja importar o arquivo de Pneus?"
		lImp1 := .T.
		cArquivo1 := cGetFile(cType, OemToAnsi(STR0195),,,.T.,GETF_ONLYSERVER) //"Selecione o Arquivo (Pneus)"
		nPos := Rat("\",cArquivo1)
		If nPos > 0
			cArqLoc := AllTrim(Subst(cArquivo1, nPos+1,25 ))
		Else
			cArqLoc := cArquivo1
		EndIF
		cPath := GETTEMPPATH()
		If Right( AllTrim(cPath), 1 ) != "\"
			cPath += "\"
		Endif

		If File(cPath+cArqLoc)
			FErase(cPath+cArqLoc)
		endif

		If !CpyS2T(cArquivo1, cPath, .T.)
			MsgStop(STR0221+cPath) //"Não foi possível copiar o arquivo para a pasta temporária: "
			Return
		Endif

		cArquivo1 := cPath+cArqLoc

		If !file(cPath+cArqLoc)
			MsgYesNo(STR0012+cArquivo1+STR0013+chr(13)+chr(13); //"Arquivo "##" não encontrado."
			+STR0014) //"O processo sera cancelado."
			Return
		EndIf

		Define MsDialog oDlgPar Title OemToAnsi(STR0015) From 009,000 To 020,049 Of oMainWnd //"Informe o Campo Abaixo"

		@ 041,008 Say OemToAnsi(STR0016) Size 50,7 Of oDlgPar Pixel //"Calendário"
		@ 039,045 MsGet oCalend Var cCalend Valid ExistCpo("SH7",cCalend) Size 055,08 Of oDlgPar Pixel F3 "SH7" Picture "@!" When .T. HasButton

		@ 050,008 Say OemToAnsi(STR0017+" "+STR0018+" "+STR0019) Size 200,30 Of oDlgPar Pixel //"Obs.:"###"Esse calendário será replicado para todos"###"os Pneus importados."

		Activate MsDialog oDlgPar On Init EnchoiceBar(oDlgPar,{|| nOpca := 1,oDlgPar:End()},{||oDlgPar:End()}) Centered

		If Empty(cCalend) .Or. !ExistCpo("SH7",cCalend)
			MsgStop(STR0020,STR0021) //"Calendário não informado ou inexistente!"###"Atenção!"

			NGRETURNPRM(aNGBEGINPRM)
			Return .F.
		EndIf
	EndIf

	//Seleciona o Arquivo TXT 2
	If MsgYesNo(STR0196) //"Deseja importar o arquivo de Reformas/Consertos?"
		lImp2 := .T.
		cArquivo2 := cGetFile(cType, OemToAnsi(STR0197),,,.T.,GETF_ONLYSERVER) //"Selecione o Arquivo (Reformas/Consertos)"
		nPos := Rat("\",cArquivo2)
		If nPos > 0
			cArqLoc := AllTrim(Subst(cArquivo2, nPos+1,25 ))
		Else
			cArqLoc := cArquivo2
		EndIF
		cPath := GETTEMPPATH()
		If Right( AllTrim(cPath), 1 ) != "\"
			cPath += "\"
		Endif

		If File(cPath+cArqLoc)
			FErase(cPath+cArqLoc)
		endif

		If !CpyS2T(cArquivo2, cPath, .T.)
			MsgStop(STR0221+cPath) //"Não foi possível copiar o arquivo para a pasta temporária: "
			Return
		Endif

		cArquivo2 := cPath+cArqLoc

		If !file(cPath+cArqLoc)
			MsgYesNo(STR0012+cArquivo2+STR0013+chr(13)+chr(13); //"Arquivo "##" não encontrado."
			+STR0014) //"O processo sera cancelado."
			Return
		EndIf
	EndIf

	aDBF1 := {}
		aAdd(aDBF1,{"CODBEM"  ,"C", 016, 0})
		aAdd(aDBF1,{"CAMPO"   ,"C", 010, 0})
		aAdd(aDBF1,{"CONTEU"  ,"C", 030, 0})
		aAdd(aDBF1,{"ERRO"    ,"C", 120, 0})

	//Criação Tabela Temporária
	oTempTable := NGFwTmpTbl(cTRB1,aDBF1,{{"CODBEM"}})

	If lImp1
		Processa({ |lEnd| ImpPneu()},STR0198) //"Aguarde...Importanto Pneus"
	EndIf

	If lImp2
		Processa({ 	|lEnd| ImpReforma()},STR0199) //"Aguarde...Importanto Reformas/Consertos"
	EndIf

	DbSelectArea(cTRB1)
	DbGotop()

	If reccount() > 0
		IF !MSGYESNO(STR0024+Str(nRegLi,10)+Chr(13); //"Quantidade de registros lidos........... "
					+STR0025+Str(nBemImp,10)+CRLF+CRLF; //"Quantidade de registros importados.. "
					+STR0023,STR0026) //"Foram encontrados erros na importacao... Deseja Imprimir?"###"Fim da importacao"
			//Deleta os Arquivos temporarios fisicamente
			oTempTable:Delete()
			DbSelectArea("ST9")

			NGRETURNPRM(aNGBEGINPRM)
			RETURN
		ENDIF
		MNT998IMP()
	Else
		MsgInfo(STR0024+Str(nRegLi,10)+Chr(13); //"Quantidade de registros lidos........... "
		+STR0025+Str(nBemImp,10),STR0026) //"Quantidade de registros importados.. "###"Fim da importacao"
	Endif

	//Deleta Tabela Temporária
	oTempTable:Delete()

	DbSelectArea("ST9")

	NGRETURNPRM(aNGBEGINPRM)
Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MNT998Pro ³ Autor ³ Rafael Diogo Richter  ³ Data ³21/11/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Processamento da importação do TXT                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaMNT                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function ImpPneu()

	Local i
	Local nRecno     	:= 0
	Local nPoscont   	:= 0
	Local nTamPlaca  	:= TamSX3("T9_PLACA")[1]
	Local nTamPlaca2 	:= 0
	Local nField	 	:= 0
	Local lGravaSTC  	:= .F.
	Local lGravaTQ1  	:= .T.
	Local lApropri   	:= NGCADICBASE("TP_APROPRI","A","STP",.F.) .And. NGCADICBASE("TPP_APROPR","A","TPP",.F.)
	Local lExistTwi	 	:= NGCADICBASE("TQS_TWI", "A", "TQS", .F.)
	Local lMNTA9981	 	:= ExistBlock('MNTA9981')
	Local lMNTA9982	 	:= ExistBlock('MNTA9982')
	Local lMNTA9983	 	:= ExistBlock('MNTA9983')
	Local lMain			:= Type( "oMainWnd" ) == "O"
	Local cApropri   	:= '2'
	Local cCenB      	:= ""
	Local cFamBem    	:= ""
	Local cTiMBem    	:= ""
	Local cNomeBem   	:= ""
	Local cCodBemInt 	:= ""
	Local cMCONTAB		:= AllTrim(GetMv("MV_MCONTAB"))
	Local cNGSTAPL		:= Upper(GetMv("MV_NGSTAPL"))
	Local cError        := ''
	Local lMNTAGFOGO    := FindFunction( 'MNTAGFOGO' )

	Private cBandas  := " Original"
	Private aData    := {}
	Private aErros   := {}
	Private aValComp := {}
	Private aMedSulc := {}
	Private lData    := .T.
	Private lBanda   := .T.
	Private lTipMod  := .T.
	Private lMedida  := .T.
	Private lMuEquip := .F.

	nHdlArq := FOPEN(cArquivo1,0)
	nTamArq := fseek(nHdlArq,0,2)

	FT_FUSE(cArquivo1)
	FT_FGOTOP()

	ProcRegua(Int(nTamArq/299))

	While (!FT_FEof())

		cLinha := FT_FREADLN()

		If Empty(cLinha)
			Exit
		Endif

		++ nRecno

		IncProc(STR0027+ AllTrim(Str(nRecno))) //"Importando Registro: "

		nRegLi += 1

		TEXLINHA := SubStr(cLinha,1,402)

		nPosIni   := 1
		nPosAtu   := 1
		cTexLinha := TEXLINHA
		aPosicao  := {}
		While At(CHR(9),cTexLinha) > 0
			nPos := At(CHR(9),cTexLinha)
			aAdd(aPosicao,AllTrim(SubStr(cTexLinha,nPosIni,nPos-1)))
			cTexLinha := SubStr(cTexLinha,nPos+Len(Chr(9)),400)
		End
		aAdd(aPosicao,AllTrim(cTexLinha))

		lGrava  := .T.
		lBanda  := .T.
		lTipMod := .T.
		lMedida := .T.

		//+--------------------+
		//|	Tamanho do TXT	   |
		//+--------------------+
		nQtdCol := 40
		If lMNTA9981
			nQtdCol += ExecBlock('MNTA9981',.F.,.F.)
		EndIf

		If Len(aPosicao) < nQtdCol
			MNT998GE(,Upper(STR0021),,STR0071+"  "+STR0072+AllTrim(Str(nQtdCol))+" "+STR0075+" / "+STR0073+cValToChar(Len(aPosicao))+" "+STR0075) //"Alguns campos do arquivo txt foram omitidos!"##"Tamanho esperado - "##"Posições"##"Tamanho encontrado - "##"Posições"
			FT_FSKIP()
			Loop
		EndIf

		//+--------------------+
		//|	Codigo do Bem	   |
		//+--------------------+
		cCodB := Upper(MNT998SX("TQS_NUMFOG",AllTrim(aPosicao[2])))
		If MNT998SE("ST9",cCodB,1)
			MNT998GE(cCodB,"T9_CODBEM",cCodB,STR0168) //"Código do Bem já existente"
			FT_FSKIP()
			Loop
		EndIf
		If Empty(cCodB)
			MNT998GE(cCodB,'T9_CODBEM',cCodB,STR0044) //'Pneu não informado'
			lGrava := .F.
		ElseIf Len(cCodB) > TAMSX3("TQS_NUMFOG")[1]
			MNT998GE(cCodB,'T9_CODBEM',cCodB,STR0084+cValToChar(TAMSX3("TQS_NUMFOG")[1])+STR0119) //"Código do Pneu não pode ser maior que "##" caracteres, devido a replicação do mesmo Código para o Número de Fogo do Pneu."
			lGrava := .F.
		//Verificar se no código do Pneu não possui caracteres especiais
		ElseIf "'" $ cCodB
			MNT998GE(cCodB,'T9_CODBEM',cCodB,STR0228) //"Pneu possui caracteres especiais no código."
			lGrava := .F.
		EndIf

		//Codigo da Filial															³
		If Len(aPosicao[1]) > Len(cCodFil)
			MNT998GE(cCodB,"M0_CODFIL",aPosicao[1],STR0099+cValToChar(Len(cCodFil))+STR0095) // "Código da Filial não pode ser maior que "##" caracter(es)"
			lGrava := .F.
		Else
			cFilMa := xFilial( 'ST9', Upper( aPosicao[1] + Space( Len( cCodFil ) - Len( aPosicao[1] ) ) ) )

			If NGLEASTLAY("ST9") > 0

				If !Empty(cFilMa)
					If !FwFilExist( cCodEmp, cFilMa )
						MNT998GE(cCodB,"M0_CODFIL",cFilMa,STR0070) // "Filial não cadastrada"
						lGrava := .F.
					EndIf
				Else
					MNT998GE(cCodB,"M0_CODFIL",cFilMa,STR0074) // "Tabela ST9-Bens com Modo Exclusivo"
					lGrava := .F.
				EndIf

			Else

				If !Empty(cFilMa)
					MNT998GE(cCodB,"M0_CODFIL",cFilMa,STR0077) // "Tabela ST9-Bens com Modo Compartilhado"
					lGrava := .F.
				EndIf

			EndIf

		EndIf

		//Codigo da Familia
		cFamB := Upper(MNT998SX("T6_CODFAMI",AllTrim(aPosicao[3])))
		If Empty(cFamB)
			MNT998GE(cCodB,'T9_CODFAMI',cFamB,STR0080)//"Familia não informada"
			lGrava := .F.
		ElseIf Len(cFamB) > TAMSX3("T6_CODFAMI")[1]
			MNT998GE(cCodB,'T9_CODFAMI',cFamB,STR0124+cValToChar(TAMSX3("T6_CODFAMI")[1])+STR0095)//"Código da Família não pode ser maior que "##" caracteres"
			lGrava := .F.
		ElseIf !MNT998SE('ST6',cFamb,1)
			MNT998GE(cCodB,'T9_CODFAMI',cFamB,STR0060)//"Familia nao cadastrada"
			lGrava := .f.
		EndIf

		//Nome do Bem
		cNomeBem := Upper(aPosicao[4]	)
		If Empty(cNomeBem)
			MNT998GE(cCodB,'T9_NOME',cNomeBem,STR0081)//"Nome do Bem não informado"
			lGrava := .F.
		ElseIf Len(cNomeBem) > TAMSX3("T9_NOME")[1]
			MNT998GE(cCodB,"T9_NOME",cNomeBem,STR0127+cValToChar(TAMSX3("T9_NOME")[1])+STR0095)//"Nome do Bem não pode ser maior que "##" caracteres"
			lGrava := .F.
		//Verificar se no nome do Pneu não possui caracteres especiais
		ElseIf "'" $ cNomeBem
			MNT998GE(cNomeBem,'T9_NOME',cNomeBem,STR0229) //"Pneu possui caracteres especiais no nome."
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Centro de custo do Bem - Obter o centro de custo do veiculo.³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cCenB := Upper(MNT998SX(If(cMCONTAB == 'CTB','CTT_CUSTO','I3_CUSTO'),AllTrim(aPosicao[5])))

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Tipo do modelo																³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cTiMB := Upper(MNT998SX("TQR_TIPMOD",AllTrim(aPosicao[6])))
		If Empty(cTiMB)
			MNT998GE(cCodB,'T9_TIPMOD',cTiMB,STR0083)//"Tipo do modelo não informado"
			lTipMod := .F.
			lGrava  := .F.
		ElseIf Len(cTiMB) > TAMSX3("TQR_TIPMOD")[1]
			MNT998GE(cCodB,'T9_TIPMOD',cTiMB,STR0125+cValToChar(TAMSX3("TQR_TIPMOD")[1])+STR0095)//"Código do Tipo de Modelo não pode ser maior que "##" caracteres"
			lTipMod := .F.
			lGrava  := .F.
		ElseIf !MNT998SE('TQR',cTiMB,1)
			MNT998GE(cCodB,'T9_TIPMOD',cTiMB,STR0062)//"Tipo do modelo nao cadastrado"
			lTipMod := .F.
			lGrava  := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Serie																			³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(aPosicao[7])
			If Len(aPosicao[7]) > TAMSX3("T9_SERIE")[1]
				MNT998GE(cCodB,"T9_SERIE",aPosicao[7],STR0144+cValToChar(TAMSX3("T9_SERIE")[1])+STR0095)//"Série não pode ser maior que "##" caracteres"
				lGrava := .F.
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Fabricante																	³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cFabB := Upper(MNT998SX("T7_FABRICA",AllTrim(aPosicao[8])))
		If !Empty(cFabB)
			If Len(cFabB) > TAMSX3("T7_FABRICA")[1]
				MNT998GE(cCodB,"T9_FABRICA",cFabB,STR0126+cValToChar(TAMSX3("T7_FABRICA")[1])+STR0095)//"Código do Fabricante não pode ser maior que "##" caracteres"
				lGrava := .F.
			ElseIf !MNT998SE('ST7',cFabB,1)
				MNT998GE(cCodB,'T9_FABRICA',cFabB,STR0063)//"Fabricante nao cadastrado"
				lGrava := .f.
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Data de compra do Bem													³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aData  := NGStrIsDat(AllTrim(aPosicao[9]),"C",.T.) //Variavel, Formato ('C'aracter ou 'S'tring), Retornar Mensagem de Erro? (.T.,.F.)
		lData  := aData[1]
		aErros := aData[2]
		If lData
			dDcoB  := cToD(AllTrim(aPosicao[9]))
		Else
			For i:=1 To Len(aErros)
				MNT998GE(cCodB,'T9_DTCOMPR',AllTrim(aposicao[9]),AllTrim(aErros[i]))
				lGrava := .F.
			Next i
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Estrutura																	³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(aPosicao[10])
			If Len(aPosicao[10]) > TAMSX3('T9_ESTRUTU')[1]
				MNT998GE(cCodB,"T9_ESTRUTU",aPosicao[10],STR0136+cValToChar(TAMSX3('T9_ESTRUTU')[1])+STR0095) //"Indicador de Estrutura não pode ser maior que "##" caracteres"
				lGrava := .F.
			ElseIf Upper(AllTrim(aPosicao[10])) != "N" .and. Upper(AllTrim(aPosicao[10])) != "S"
				MNT998GE(cCodB,"T9_ESTRUTU",aPosicao[10],STR0135) //"Indicador de Estrutura não pode ser diferente de 'S' (Sim) ou 'N' (Não)"
				lGrava := .F.
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Tem Contador																³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(aPosicao[11])
			If Len(aPosicao[11]) > TAMSX3("T9_TEMCONT")[1]
				MNT998GE(cCodB,"T9_TEMCONT",aPosicao[11],STR0142+cValToChar(TAMSX3("T9_TEMCONT")[1])+STR0095) //"Tem Contador não pode ser maior que "##" caracteres"
				lGrava := .F.
			ElseIf !(Upper(AllTrim(aPosicao[11])) $ "SNPI")
				MNT998GE(cCodB,"T9_TEMCONT",aPosicao[11],STR0145) //"Tem Contador não poderá ser diferente de 'S' ou 'N' ou 'P' ou 'I'"
				lGrava := .F.
			EndIf
		Else
			aPosicao[11] := "P"
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Tipo Contador																³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(aPosicao[12])
			If Len(aPosicao[12]) > TAMSX3("T9_TPCONTA")[1]
				MNT998GE(cCodB,"T9_TPCONTA",aPosicao[12],STR0143+cValToChar(TAMSX3("T9_TPCONTA")[1])+STR0095) //"Tipo Contador não pode ser maior que "##" caracteres"
				lGrava := .F.
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Posicao Atual do Contador												³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nPosCont := Val(AllTrim(aPosicao[13]))
		If Len(cValToChar(nPosCont)) > TAMSX3("T9_POSCONT")[1]
			MNT998GE(cCodB,"T9_POSCONT",nPosCont,STR0130+cValToChar(TAMSX3("T9_POSCONT")[1])+STR0095)//"Posição Atual do Contador não pode ser maior que "##" caracteres"
			lGrava := .F.
		ElseIf !NGIsAllNum(AllTrim(aPosicao[13])) .or. nPosCont <= 0
			MNT998GE(cCodB,"T9_POSCONT",nPosCont,STR0164)//"Posição Atual do Contador inválido"
			lGrava := .F.
		ElseIf nPosCont == 0
			nPosCont := 1
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Data do ultimo acompanhamento											³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aData  := NGStrIsDat(AllTrim(aPosicao[14]),"C",.T.) //Variavel, Formato ('C'aracter ou 'S'tring), Retornar Mensagem de Erro? (.T.,.F.)
		lData  := aData[1]
		aErros := aData[2]
		If lData
			dDuaB  := Ctod(AllTrim(aPosicao[14]))
		Else
			For i:=1 To Len(aErros)
				MNT998GE(cCodB,'T9_DTULTAC',AllTrim(aposicao[14]),AllTrim(aErros[i]))
				lGrava := .f.
			Next i
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Variação Dia																³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Empty(AllTrim(aPosicao[15]))
			MNT998GE(cCodB,'T9_VARDIA',aPosicao[15],STR0120) //"Variação Dia não informada"
			lGrava := .F.
		ElseIf Len(aPosicao[15]) > TAMSX3("T9_VARDIA")[1]
			MNT998GE(cCodB,"T9_VARDIA",aPosicao[15],STR0132+cValToChar(TAMSX3("T9_VARDIA")[1])+STR0095)//"Variação Dia não pode ser maior que "##" caracteres"
			lGrava := .F.
		ElseIf !NGIsAllNum(AllTrim(aPosicao[15])) .or. Val(AllTrim(aPosicao[15])) <= 0
			MNT998GE(cCodB,'T9_VARDIA',aPosicao[15],STR0121) //"Variação Dia inválida"
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Limite Contador															³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Empty(AllTrim(aPosicao[16]))
			MNT998GE(cCodB,'T9_LIMICON',aPosicao[16],STR0088) //"Limite do Contador não informado"
			lGrava := .F.
		ElseIf Len(aPosicao[16]) > TAMSX3("T9_LIMICON")[1]
			MNT998GE(cCodB,"T9_LIMICON",aPosicao[16],STR0133+cValToChar(TAMSX3("T9_LIMICON")[1])+STR0095)//"Limite do Contador não pode ser maior que "##" caracteres"
			lGrava := .F.
		ElseIf !NGIsAllNum(AllTrim(aPosicao[16])) .or. Val(AllTrim(aPosicao[16])) <= 0
			MNT998GE(cCodB,'T9_LIMICON',aPosicao[16],STR0089) //"Limite do Contador inválido"
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Contador acumulado														³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nAcuB := AllTrim(aPosicao[17])
		If Empty(nAcuB)
			MNT998GE(cCodB,'T9_CONTACU',nAcuB,STR0091) //"Contador Acumulado não informado."
			lGrava := .F.
		ElseIf Len(nAcuB) > TAMSX3('T9_CONTACU')[1]
			MNT998GE(cCodB,'T9_CONTACU',nAcuB,STR0134+cValToChar(TAMSX3('T9_CONTACU')[1])+STR0095)//"Contador Acumulado não pode ser maior que "##" caracteres"
			lGrava := .F.
		ElseIf !NGIsAllNum(nAcuB) .or. Val(AllTrim(nAcuB)) <= 0
			MNT998GE(cCodB,'T9_CONTACU',nAcuB,STR0092) //"Contador Acumulado inválido."
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Situacao da manutencao													³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Empty(aPosicao[18]) .Or. (Upper(AllTrim(aPosicao[18])) != "A" .And. Upper(AllTrim(aPosicao[18])) != "I")
			MNT998GE(cCodB,'T9_SITMAN',aPosicao[18],STR0093) //"Situação da Manutenção não poderá ser diferente de 'A' (Ativo) ou 'I' (Inativo)"
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Situacao do bem															³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Empty(aPosicao[19]) .Or. (Upper(AllTrim(aPosicao[19])) != "A" .And. Upper(AllTrim(aPosicao[19])) != "I")
			MNT998GE(cCodB,'T9_SITBEM',aPosicao[19],STR0087) //"Situação do Bem não poderá ser diferente de 'A' (Ativo) ou 'I' (Inativo)"
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Vida Util																	³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(aPosicao[20])
			If Len(aPosicao[20]) > TAMSX3("T9_CONTDES")[1]
				MNT998GE(cCodB,"T9_CONTDES",nAcuB,STR0140+cValToChar(TAMSX3("T9_CONTDES")[1])+STR0095)//"Vida Útil não pode ser maior que "##" caracteres"
				lGrava := .F.
			ElseIf aPosicao[20] != "C" .and. aPosicao[20] != "T"
				MNT998GE(cCodB,"T9_CONTDES",aPosicao[20],STR0146) //"Vida Útil não poderá ser diferente de 'C' (Contador) ou 'T' (Tempo)"
				lGrava := .F.
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Valor da Compra															³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aValComp := MNT998SX("T9_VALCPA",AllTrim(aPosicao[21]),.T.)
		If Len(aValComp) != 0
			cIntComp := AllTrim(aValComp[1])
			cDecComp := AllTrim(aValComp[2])
		Else
			cIntComp := AllTrim(aPosicao[21])
			cDecComp := "0"
		EndIf
		If Empty(aPosicao[21])
			aPosicao[21] := "0"
		ElseIf !NGIsAllNum(cIntComp) .or. !NGIsAllNum(cDecComp)
			MNT998GE(cCodB,"T9_VALCPA",aPosicao[21],STR0163) //"Valor da Compra inválido"
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Codigo do Produto no Estoque											³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(aPosicao[22])

			//Mensagem de status aplicado
			cStaB := Upper(MNT998SX("TQY_STATUS",AllTrim(aPosicao[39])))
			If cStaB == cNGSTAPL
				MNT998GE(cCodB,"T9_CODESTO",aPosicao[22],STR0225) //"Para estatus de Pneu aplicado não pode ser informado o código do produto"
				lGrava := .F.
			EndIf

			//Mensagem de Local de estoque vazio
			If Empty(aPosicao[40])
				MNT998GE(cCodB,"TQV_ALMOX",aPosicao[22],STR0227) //"Código do Local do Produto vazio, informar a posição 40 do layout de importação"
				lGrava := .F.
			ElseIf !MNT998SE('NNR',aPosicao[40],1)
				//Verificar se o código do local de estoque existe
				MNT998GE(cCodB,"TQV_ALMOX",aPosicao[40],STR0226) //"Código do Local do Produto é invalido"
				lGrava := .F.
			EndIf

			aPosicao[22] := Upper(MNT998SX("B1_COD",aPosicao[22]))
			If Len(aPosicao[22]) > TAMSX3("B1_COD")[1]
				MNT998GE(cCodB,"T9_CODESTO",aPosicao[22],STR0138+cValToChar(TAMSX3("B1_COD")[1])+STR0095) //"Código do Produto no Estoque não pode ser maior que "##" caracteres"
				lGrava := .F.
			ElseIf !MNT998SE('SB1',aPosicao[22],1)
				MNT998GE(cCodB,'T9_CODESTO',aPosicao[22],STR0097) //"Código do Produto no Estoque inválido"
				lGrava := .F.
			EndIf
		Else

			// Almoxarifado T9_LOCPAD
			
			If !Empty(aPosicao[40])
			
				MNT998GE(cCodB,'T9_LOCPAD',aPosicao[40],STR0237) // "Código do produto não preenchido"
				lGrava := .F.

			EndIf

		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Medida																		³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cMedB := Upper(MNT998SX("TQT_MEDIDA",AllTrim(aPosicao[23])))
		If Empty(cMedB)
			MNT998GE(cCodB,'TQS_MEDIDA',cMedB,STR0096) //"Medida não informada."
			lMedida := .F.
			lGrava  := .F.
		ElseIf Len(cMedB) > TAMSX3("TQT_MEDIDA")[1]
			MNT998GE(cCodB,"TQS_MEDIDA",aPosicao[23],STR0139+cValToChar(TAMSX3("TQT_MEDIDA")[1])+STR0095) //"Medida não pode ser maior que "##" caracteres"
			lMedida := .F.
			lGrava  := .F.
		ElseIf !MNT998SE('TQT',cMedB,1)
			MNT998GE(cCodB,'TQS_MEDIDA',cMedB,STR0028) //'Medida nao cadastrada'
			lMedida := .F.
			lGrava  := .F.
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Medicao do Sulco															³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aMedSulc := MNT998SX("TQS_SULCAT",AllTrim(aPosicao[24]),.T.)
		If Len(aMedSulc) != 0
			cIntSulc := AllTrim(aMedSulc[1])
			cDecSulc := AllTrim(aMedSulc[2])
		Else
			cIntSulc := AllTrim(aPosicao[24])
			cDecSulc := "0"
		EndIf
		If Empty(aPosicao[24])
			MNT998GE(cCodB,"TQS_SULCAT",AllTrim(aPosicao[24]),STR0098) //"Sulco do Pneu não informado"
			lGrava := .F.
		ElseIf !NGIsAllNum(cIntSulc) .or. !NGIsAllNum(cDecSulc)
			MNT998GE(cCodB,'TQS_SULCAT',AllTrim(aPosicao[24]),STR0105) //"Sulco do Pneu inválido"
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Data medicao do sulco													³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aData  := NGStrIsDat(AllTrim(aPosicao[25]),"C",.T.) //Variavel, Formato ('C'aracter ou 'S'tring), Retornar Mensagem de Erro? (.T.,.F.)
		lData  := aData[1]
		aErros := aData[2]
		If lData
			dDsuB := Ctod(AllTrim(aPosicao[25]))
		Else
			For i:=1 To Len(aErros)
				MNT998GE(cCodB,'TQS_DTMEAT',AllTrim(aposicao[25]),AllTrim(aErros[i]))
				lGrava := .f.
			Next i
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Hora da medicao do sulco												³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cHsuB    := AllTrim(aPosicao[26])
		nPosHora := At(":",cHsuB)
		If nposHora != 0
			cHora := SubStr(cHsuB,1,nPosHora-1)
			cMinu := SubStr(cHsuB,nPosHora+1,Len(cHsuB)-nPosHora)
			If Empty(cHsuB)
				MNT998GE(cCodB,'TQS_HRMEAT',cHsuB,STR0102) //"Hora da Medição não informada"
				lGrava := .F.
			ElseIf Len(cHsuB) > TAMSX3('TQS_HRMEAT')[1]
				MNT998GE(cCodB,'TQS_HRMEAT',cHsuB,STR0149+cValToChar(TAMSX3('TQS_HRMEAT')[1])+STR0095) //"Hora da Medição não pode ser maior que "##" caracteres"
				lGrava := .F.
			ElseIf Len(cHora) > 2 .or. Len(cMinu) > 2
				MNT998GE(cCodB,'TQS_HRMEAT',cHsuB,STR0094) //"Hora da medicao do sulco está com o formato errado HH:MM"
				lGrava := .F.
			ElseIf !NGIsAllNum(cHora) .or. !NGIsAllNum(cMinu)
				MNT998GE(cCodB,'TQS_HRMEAT',cHsuB,STR0030) //'Hora da medicao do sulco invalida'
				lGrava := .F.
			ElseIf Val(cHora) < 0 .or. Val(cHora) > 23 .or. Val(cMinu) < 0 .or. Val(cMinu) > 59
				MNT998GE(cCodB,'TQS_HRMEAT',cHsuB,STR0030) //'Hora da medicao do sulco invalida'
				lGrava := .F.
			EndIf
		Else
			MNT998GE(cCodB,'TQS_HRMEAT',cHsuB,STR0094) //"Hora da medicao do sulco está com o formato errado HH:MM"
			lGrava := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Banda																			³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cBanB := AllTrim(aPosicao[27])
		If Empty(cBanB)
			MNT998GE(cCodB,'TQS_BANDAA',cBanB,STR0103) //"Código da Banda não informada"
			lBanda := .F.
			lGrava := .F.
		ElseIf Len(cBanB) > TAMSX3("TQS_BANDAA")[1]
			MNT998GE(cCodB,'TQS_BANDAA',cBanB,STR0076+cValToChar(TAMSX3("TQS_BANDAA")[1])+STR0095) //"Código da Banda não pode ser maior que "##" caracter"
			lBanda := .F.
			lGrava := .F.
		ElseIf !(cBanB $ "12345")
			MNT998GE(cCodB,'TQS_BANDAA',cBanB,STR0031) //'Codigo da banda inválido'
			lBanda := .F.
			lGrava := .F.
		EndIf

		If lBanda
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³	Desenho																		³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cDesB := Upper(MNT998SX("TQU_DESENH",AllTrim(aPosicao[28])))
			If cBanB != "1"
				If Empty(cDesB)
					MNT998GE(cCodB,'TQS_DESENH',cDesB,STR0104) //"Codigo do Desenho não informado"
					lGrava := .F.
				ElseIf Len(cDesB) > TAMSX3("TQU_DESENH")[1]
					MNT998GE(cCodB,"TQS_DESENH",cDesB,STR0150+cValToChar(TAMSX3("TQU_DESENH")[1])+STR0095) //"Código do Desenho não pode ser maior que "##" caracter"
					lGrava := .F.
				ElseIf !MNT998SE('TQU',cDesB,1)
					MNT998GE(cCodB,'TQS_DESENH',cDesB,STR0033) //'Codigo do desenho nao cadastrado'
					lGrava := .f.
				Endif
			ElseIf cBanB == "1" .and. !Empty(cDesB)
				MNT998GE(cCodB,"TQS_DESENH",cDesB,STR0167) //"Código da Banda está igual a '1' (banda Original) e Código do Desenho está diferente de vazio"
				lGrava := .F.
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³	Percorrido Banda Original												³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nPBaO   := 0

			If NGIsAllNum(AllTrim(aPosicao[29]))
				If Val(cBanB) == 1
					If Empty(aPosicao[29]) .or. Val(aPosicao[29]) == 0
						nPBaO := Val(nAcuB)
					ElseIf Len(aPosicao[29]) > TAMSX3('TQS_KMOR')[1]
						MNT998GE(cCodB,'TQS_KMOR',aPosicao[29],STR0116+cValToChar(TAMSX3('TQS_KMOR')[1])+STR0095) //"Quilometragem da Banda Original não pode ser maior que "##" caracter"
						lGrava := .F.
					ElseIf Val(aPosicao[29]) != Val(nAcuB)
						MNT998GE(cCodB,'TQS_KMOR',aPosicao[29],STR0106) //"Quilometragem da Banda Original não pode ser diferente do valor do Contador Acumulado."
						lGrava := .F.
					EndIf
				Else
					If Empty(aPosicao[29])
						MNT998GE(cCodB,'TQS_KMOR',aPosicao[29],STR0034) //'Quilometragem da Banda Original não informada'
						lGrava := .F.
					ElseIf Len(aPosicao[29]) > TAMSX3('TQS_KMOR')[1]
						MNT998GE(cCodB,'TQS_KMOR',aPosicao[29],STR0116+cValToChar(TAMSX3('TQS_KMOR')[1])+STR0095) //"Quilometragem da Banda Original não pode ser maior que "##" caracter"
						lGrava := .F.
					Else
						nPBaO := Val(AllTrim(aPosicao[29]))
					EndIf
				EndIf
			Else
				MNT998GE(cCodB,'TQS_KMOR',aPosicao[29],STR0160) //"Quilometragem da Banda Original inválida"
				lGrava := .F.
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³	Percorrido Banda R1														³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nPBa1   := 0

			If NGIsAllNum(AllTrim(aPosicao[30]))
				If Val(cBanB) > 1 .and. Val(cBanB) <= 5
					If Empty(aPosicao[30])
						MNT998GE(cCodB,'TQS_KMR1',aPosicao[30],STR0035) //'Quilometragem da Banda R1 não informada'
						lGrava := .F.
					ElseIf Len(aPosicao[30]) > TAMSX3('TQS_KMR1')[1]
						MNT998GE(cCodB,'TQS_KMR1',aPosicao[30],STR0151+cValToChar(TAMSX3('TQS_KMR1')[1])+STR0095) //"Quilometragem da Banda R1 não pode ser maior que "##" caracter"
						lGrava := .F.
					Else
						nPBa1 := Val(AllTrim(aPosicao[30]))
					EndIf
				EndIf
			Else
				MNT998GE(cCodB,'TQS_KMR1',aPosicao[30],STR0161) //"Quilometragem da Banda R1 inválida"
				lGrava := .F.
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³	Percorrido Banda R2														³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nPBa2   := 0

			If NGIsAllNum(AllTrim(aPosicao[31]))
				If Val(cBanB) > 2 .and. Val(cBanB) <= 5
					If Empty(aPosicao[31])
						MNT998GE(cCodB,'TQS_KR2',aPosicao[31],STR0036) //'Quilometragem da Banda R2 não informada'
						lGrava := .F.
					ElseIf Len(aPosicao[31]) > TAMSX3('TQS_KMR2')[1]
						MNT998GE(cCodB,'TQS_KMR2',aPosicao[31],STR0152+cValToChar(TAMSX3('TQS_KMR2')[1])+STR0095) //"Quilometragem da Banda R2 não pode ser maior que "##" caracter"
						lGrava := .F.
					Else
						nPBa2 := Val(AllTrim(aPosicao[31]))
					EndIf
				EndIf
			Else
				MNT998GE(cCodB,'TQS_KMR2',aPosicao[31],STR0162) //"Quilometragem da Banda R2 inválida"
				lGrava := .F.
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³	Percorrido Banda R3														³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nPBa3   := 0

			If NGIsAllNum(AllTrim(aPosicao[32]))
				If Val(cBanB) > 3 .and. Val(cBanB) <= 5
					If Empty(aPosicao[32])
						MNT998GE(cCodB,'TQS_KMR3',aPosicao[32],STR0037) //'Quilometragem da Banda R3 não informada'
						lGrava := .F.
					ElseIf Len(aPosicao[32]) > TAMSX3('TQS_KMR3')[1]
						MNT998GE(cCodB,'TQS_KMR3',aPosicao[32],STR0153+cValToChar(TAMSX3('TQS_KMR3')[1])+STR0095) //"Quilometragem da Banda R3 não pode ser maior que "##" caracter"
						lGrava := .F.
					Else
						nPBa3 := Val(AllTrim(aPosicao[32]))
					EndIf
				EndIf
			Else
				MNT998GE(cCodB,'TQS_KMR3',aPosicao[32],STR0156) //"Quilometragem da Banda R3 inválida"
				lGrava := .F.
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³	Percorrido Banda R4														³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nPBa4   := 0

			If NGIsAllNum(AllTrim(aPosicao[33]))
				If Val(cBanB) == 5
					If Empty(aPosicao[33])
						MNT998GE(cCodB,'TQS_KMR4',aPosicao[33],STR0039) //"Quilometragem da Banda R4 não informada"
						lGrava := .F.
					ElseIf Len(aPosicao[33]) > TAMSX3('TQS_KMR4')[1]
						MNT998GE(cCodB,'TQS_KMR4',aPosicao[33],STR0154+cValToChar(TAMSX3('TQS_KMR4')[1])+STR0095) //"Quilometragem da Banda R4 não pode ser maior que "##" caracter"
						lGrava := .F.
					Else
						nPBa4 := Val(AllTrim(aPosicao[33]))
					EndIf
				EndIf
			Else
				MNT998GE(cCodB,'TQS_KMR4',aPosicao[33],STR0155) //"Quilometragem da Banda R4 inválida"
				lGrava := .F.
			EndIf

			If AllTrim(cBanB) == "1" // Banda Original
				nPBa1 := 0
				nPBa2 := 0
				nPBa3 := 0
				nPBa4 := 0
			ElseIf AllTrim(cBanB) == "2" // Banda R1
				cBandas += " e R1"
				nPBa2 := 0
				nPBa3 := 0
				nPBa4 := 0
			ElseIf AllTrim(cBanB) == "3" // Banda R2
				cBandas += ", R1 e R2"
				nPBa3 := 0
				nPBa4 := 0
			ElseIf AllTrim(cBanB) == "4" // Banda R3
				cBandas += ", R1, R2 e R3"
				nPBa4 := 0
			ElseIf AllTrim(cBanB) == "5" // Banda R4
				cBandas += ", R1, R2, R3 e R4"
			EndIf

			If (nPBaO + nPBa1 + nPBa2 + nPBa3 + nPBa4) > Val(nAcuB)
				MNT998GE(cCodB,'TQS_KMOR',nPBaO,STR0107+cBandas+STR0108) //"KM somada das Bandas"##" não pode ser maior que o valor do Contador Acumulado."
				lGrava := .F.
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	DOT																			³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cSemCor := StrZero(NGSEMANANO(dDataBase),2) 							 //semana corrente
		dAnoCor := CToD("01/01/"+Right(cValToChar(YEAR(dDataBase)),2)) //ano corrente
		cSemFab := Left(aPosicao[34],2) 											 //semana de fabricacao
		dAnoFab := CToD("01/01/"+Right(aPosicao[34],2)) 					 //ano de fabricacao

		If Empty(aPosicao[34])
			MNT998GE(cCodB,'TQS_DOT',AllTrim(aPosicao[34]),STR0038) //'DOT não informado'
			lGrava := .f.
		ElseIf Len(aPosicao[34]) != 4
			MNT998GE(cCodB,'TQS_DOT',AllTrim(aPosicao[34]),STR0109) //"DOT deve conter 4 digitos, sendo os dois primeiro relacionados a Semana e os dois últimos relacionados ao Ano."
			lGrava := .F.
		Else
			If Val(cSemFab) <= 52 //total de semanas por ano (365/7)
				If dAnoFab == dAnoCor
					If cSemFab > cSemCor
						MNT998GE(cCodB,'TQS_DOT',AllTrim(aPosicao[34]),STR0112+"("+cSemFab+")"+STR0113+"("+cSemCor+").") //"Semana de fabricação "##" deve ser igual ou menor à semana corrente "
						lGrava := .F.
					EndIf
				ElseIf dAnoFab > dAnoCor
					MNT998GE(cCodB,'TQS_DOT',AllTrim(aPosicao[34]),STR0111) //"Ano de fabricação deve ser igual ou menor ao ano corrente."
					lGrava := .F.
				EndIf
			Else
				MNT998GE(cCodB,'TQS_DOT',AllTrim(aPosicao[34]),STR0110) //"Semana de fabricação ultrapassa o limite de semanas por ano."
				lGrava := .F.
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Placa																			³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cPlaB := Upper(MNT998SX("T9_PLACA",AllTrim(aPosicao[35])))
		If !Empty(cPlaB)
			If Len(cPlaB) > TAMSX3("T9_PLACA")[1]
				MNT998GE(cCodB,'TQS_PLACA',cPlaB,STR0040+cValToChar(TAMSX3("T9_PLACA")[1])+STR0095) //"Placa não pode ser maior que "##" caracter"
				lGrava := .F.
			Else
				dbSelectArea("ST9")
				dbSetOrder(14)
				If !dbSeek(cPlaB)
					MNT998GE(cCodB,'TQS_PLACA',cPlaB,STR0169) //'Veiculo não cadastrado'
					lGrava := .F.

				ElseIf lMNTAGFOGO .And. !Empty( cError := MNTAGFOGO( '', ST9->T9_PLACA, .F. ) )
					//---------------------------------------------------------------------------------
					// verifica se há pneus na estrutura com status aguardando marcação de fogo
					//---------------------------------------------------------------------------------
						MNT998GE(cCodB,'TQS_PLACA',cPlaB, cError )
						lGrava := .F.
				Else

					cCenB    := ST9->T9_CCUSTO
					cFilMa   := ST9->T9_FILIAL
					nPoscont := ST9->T9_POSCONT
					dDuaB    := ST9->T9_DTULTAC
					cBem     := ST9->T9_CODBEM
					cFamBem  := ST9->T9_CODFAMI
					cTiMBem  := ST9->T9_TIPMOD
				EndIf
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Tipo de Eixo																³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		/*
		1 - Livre
		2 - Tracionador
		3 - Direcional
		4 - Direcional/Tracionador
		*/
		cTpEx := Upper(AllTrim(aPosicao[36]))

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Localizacao																	³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cLocB := Upper(AllTrim(aPosicao[37]))

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Tipo do eixo																³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cTiEB := Upper(AllTrim(aPosicao[38]))

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Status do Bem																³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cStaB := Upper(MNT998SX("TQY_STATUS",AllTrim(aPosicao[39])))
		If Empty(cStaB)
			MNT998GE(cCodB,'TQY_STATUS',cStaB,STR0085) //'Status não informado'
			lGrava := .F.
		ElseIf Len(cStaB) > TAMSX3("TQY_STATUS")[1]
			MNT998GE(cCodB,"TQY_STATUS",cStaB,STR0141+cValToChar(TAMSX3("TQY_STATUS")[1])+STR0095) //"Status não pode ser maior que "##" caracter"
			lGrava := .F.
		ElseIf !MNT998SE('TQY',cStaB,1)
			MNT998GE(cCodB,'TQY_STATUS',cStaB,STR0042) //'Status nao cadastrado'
			lGrava := .F.
		Else
			dbSelectArea("TQY")
			dbSetOrder(1)
			If dbSeek(xFilial("TQY")+cStaB)
				If TQY->TQY_CATBEM <> "3"
					MNT998GE(cCodB,'TQY_STATUS',cStaB,STR0043) //'Categoria do Status informado diferente de Pneus.'
					lGrava := .f.
				EndIf
			EndIf
		Endif

		If lMNTA9982
			lGrava := IIF(!ExecBlock('MNTA9982',.F.,.F.),.f.,lGrava)
		EndIf

		If lGrava
			If cStaB == cNGSTAPL
				If !Empty(cPlaB)
					If AllTrim(aPosicao[19]) == "I"
						MNT998GE(cCodB,'T9_SITBEM',AllTrim(aPosicao[19]),STR0045) //'Bem Inativo, não poderá ser aplicado a uma estrutura'
						lGrava := .f.
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³	Eixo																			³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					cTpEx := Upper(MNT998SX("TQS_EIXO",AllTrim(aPosicao[36])))
					If Empty(cTpEx)
						MNT998GE(cCodB,"TQS_EIXO",cTpEx,STR0157) //"Eixo não informado"
						lGravaTQ1 := .F.
					ElseIf Len(AllTrim(cTpEx)) > 2
						MNT998GE(cCodB,"TQS_EIXO",cTpEx,STR0159+"2"+STR0095) //"Eixo não pode ser maior que "##" caracter"
						lGravaTQ1 := .F.
					ElseIf SubStr(cTpEx,1,1) = "0"
						cTpEx := SubStr(cTpEx,2,1)
					ElseIf val(cTpEx) > 10
						MNT998GE(cCodB,"TQS_EIXO",cTpEx,"Não existe esquema padrão com mais de 10 eixos")
						lGravaTQ1 := .F.
					ElseIf !MNT998SE('TPS',cLocB,1)
						MNT998GE(cCodB,"TQS_EIXO",cTpEx,STR0158) //"Eixo não cadastrado"
						lGravaTQ1 := .F.
					EndIf


					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³	Localizacao																	³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cLocB := Upper(MNT998SX("TPS_CODLOC",AllTrim(aPosicao[37])))
					If Empty(cLocB)
						MNT998GE(cCodB,'TQS_POSIC',cLocB,STR0086) //"Localizacao não informada"
						lGravaTQ1 := .F.
					ElseIf Len(cLocB) > TAMSX3("TPS_CODLOC")[1]
						MNT998GE(cCodB,"TQS_POSIC",cLocB,STR0054+cValToChar(TAMSX3("TPS_CODLOC")[1])+STR0095) //"Localização não pode ser maior que "##" caracter"
						lGravaTQ1 := .F.
					ElseIf !MNT998SE('TPS',cLocB,1)
						MNT998GE(cCodB,'TQS_POSIC',cLocB,STR0046) //'Localizacao nao cadastrada'
						lGravaTQ1 := .F.
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³	Tipo do eixo																³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cTiEB := Upper(MNT998SX("TQS_TIPEIX",AllTrim(aPosicao[38])))
					If Empty(cTiEB)
						MNT998GE(cCodB,'TQS_TIPEIX',cTiEB,STR0114) //"Tipo de Eixo não informado"
						lGravaTQ1 := .F.
					ElseIf Len(cTiEB) > TAMSX3("TQS_TIPEIX")[1]
						MNT998GE(cCodB,"TQS_TIPEIX",cTiEB,STR0032+cValToChar(TAMSX3("TQS_TIPEIX")[1])+STR0095) //"Tipo de Eixo não pode ser maior que "##" caracter"
						lGravaTQ1 := .F.
					ElseIf !(cTiEB $ "1234")
						MNT998GE(cCodB,'TQS_TIPEIX',cTiEB,STR0047) //'Tipo de eixo invalido'
						lGravaTQ1 := .F.
					Endif

					nTamPlaca2 := nTamPlaca - Len(cPlaB)
					cPlaB := cPlaB+Space(nTamPlaca2)
					DbSelectArea("ST9")
					DbSetOrder(14)
					If DbSeek(cPlaB+"A") .and. lGravaTQ1

						lGravaSTC := .F.
						dbSelectArea( 'TQ0' )
						dbSetOrder( 1 )
						If !dbSeek( xFilial( 'TQ0', cFilMa ) + cFamBem + cTiMBem )

							MNT998GE(cCodB,'TQ0_DESENH',cFamB,STR0048) //'Esse veículo não possui esquema padrão'
							lGrava := .f.

						Else

							nEixo      := 0
							nQtdEixo   := 0
							nTipoEixo  := 0
							nQtdTpEixo := 0

							dbSelectArea( 'TQ1' )
							dbSetOrder( 1 )
							If dbSeek( xFilial( 'TQ1', cFilMa ) + cFamBem + cTiMBem )

								cFilTQ1 := xFilial( 'TQ1', cFilMa )

								While !Eof()
									If cFilTQ1 == TQ1->TQ1_FILIAL .AND. cFamBem == TQ1->TQ1_DESENH .AND.;
									cTiMBem == TQ1->TQ1_TIPMOD .AND. !Empty(cLocB)
										nQtdTpEixo++
										If cTiEB == TQ1->TQ1_TIPEIX
											nQtdEixo++
											If AllTrim(cTpEx) == AllTrim(TQ1->TQ1_EIXO) .Or. AllTrim(cTpEx) == Left(AllTrim(TQ1->TQ1_EIXO),1)
												If	cLocB == TQ1->TQ1_LOCPN1 .OR. cLocB == TQ1->TQ1_LOCPN2 .OR.;
												cLocB == TQ1->TQ1_LOCPN3 .OR. cLocB == TQ1->TQ1_LOCPN4 .OR.;
												cLocB == TQ1->TQ1_LOCPN5 .OR. cLocB == TQ1->TQ1_LOCPN6 .OR.;
												cLocB == TQ1->TQ1_LOCPN7 .OR. cLocB == TQ1->TQ1_LOCPN8 .OR.;
												cLocB == TQ1->TQ1_LOCPN9 .OR. cLocB == TQ1->TQ1_LOCPN0
													lGravaSTC := .T.
												EndIf
											Else
												nEixo++
											EndIf
										Else
											nTipoEixo++
										EndIf
									Endif
									DbSkip()
								End
								If nTipoEixo == nQtdTpEixo
									MNT998GE(cCodB,'TQS_TIPEIX',cTiEB,STR0078) //"Esse pneu está com o Tipo de Eixo diferente ao da Estrutura."
									lGrava := .F.
								ElseIf nEixo == nQtdEixo
									MNT998GE(cCodB,'TQS_EIXO',cTiEB,STR0079) //"Esse pneu está com o Eixo que não corresponde ao Tipo de Eixo informado."
									lGrava := .F.
								ElseIf !lGravaSTC
									MNT998GE(cCodB,'TQS_POSIC',cLocB,STR0049) //"Esse pneu está com uma Localização inválida com relação a Estrutura."
									lGrava := .f.
								Else
									DbSelectArea("STC")
									DbSetOrder(6)
									If DbSeek(xFilial("STC")+ST9->T9_CODBEM+ST9->T9_TIPMOD+"B"+cLocB)
										If cCodB <> STC->TC_COMPONE
											MNT998GE(cCodB,'TQS_CODBEM',cCodB,STR0050) //"Já existe um outro componente aplicado nessa mesma localização."
											lGrava := .f.
										EndIf
									EndIf

									If lGrava
										nBemImp += 1
										// Cadastra ou Altera o Bem
										DbselectArea("ST9")
										DbsetOrder(1)
										Dbseek(cFilMa+cCodB)
										// 1. Carrega variaveis de memória de todos os campos (padrões e de usuário) da tabela ST9.
										// 2. Caso o seek da linha 1150 tenha encontrado o registro conforme chave,
										// define a operação de Alteração (SetAltera()), caso não tenha encontrado define como Inclusão (SetInclui()).
										IIf( Found(), SetAltera(), SetInclui() )
										RegToMemory("ST9", !Found())
										// Atribui os valores repassados pelo txt às correspondentes variáveis de memória da ST9.
										// PS: Os demais campos da ST9 já foram carregados, com seus respectivos inicializadores padrões (X3_RELACAO), pela funcao RegToMemory
										M->T9_FILIAL  := cFilMa
										M->T9_CODBEM  := cCodB
										M->T9_CODFAMI := cFamB
										M->T9_PADRAO  := "N"
										M->T9_CALENDA := cCalend
										M->T9_NOME    := AllTrim(aPosicao[4])
										M->T9_CCUSTO  := cCenB
										M->T9_TIPMOD  := cTiMB
										M->T9_SERIE   := AllTrim(aPosicao[7])
										M->T9_FABRICA := cFabB
										M->T9_DTCOMPR := dDcoB
										M->T9_ESTRUTU := If(Empty(cPlaB),"N","S") // Cadastra como "S"(Sim), pois a placa nao vai estar em branco
										M->T9_TEMCONT := If(AllTrim(aPosicao[11]) == "P",aPosicao[11],"P") // Cadastra como "P"(Controlado pelo Pai da Estrutura) o Tem Contador
										M->T9_TPCONTA := AllTrim(aPosicao[12])
										M->T9_POSCONT := nPoscont
										M->T9_DTULTAC := dDuaB
										M->T9_VARDIA  := Val(AllTrim(aPosicao[15]))
										M->T9_LIMICON := Val(AllTrim(aPosicao[16]))
										M->T9_SITMAN  := AllTrim(aPosicao[18])
										M->T9_SITBEM  := AllTrim(aPosicao[19])
										M->T9_CONTDES := If(AllTrim(aPosicao[20]) $ "CT",AllTrim(aPosicao[20]),"")
										M->T9_CATBEM  := "3"
										M->T9_STATUS  := cStaB
										M->T9_CONTACU := Val(nAcuB)
										M->T9_MOVIBEM := "S" // Cadastra como "S"(Sim) a movimentação do bem.
										M->T9_VALCPA  := Val(cIntComp+"."+cDecComp)
										// Gravação/Persistencia das variáveis de memória nos campos correspondentes da ST9
										// Fcount(): Função que retorna o total de campos da tabela referenciada (ST9, neste caso)
										// Instrução dentro do For: ST9->T9_XXXXX := M->T9_XXXXX
										Reclock("ST9", !Found())
										For nField := 1 To ST9->( FCount() )
											ST9->&( FieldName(nField) ) := M->&( FieldName(nField) )
										Next nField
										MsUnlock()

										cCodBemInt := ST9->T9_CODBEM

										DbSelectArea("STP")
										DbSetOrder(2)
										If !DbSeek(cFilMa+cCodB)
											NGGRAVAHIS(cCodB,nPoscont,Val(AllTrim(aPosicao[15])),;
											dDuaB,Val(nAcuB),0,TIME(),1,"I")
										Else
											aChkHist := NGCHKHISTO(cCodB,dDuaB,nPoscont,TIME(),1,,.f.,cFilMa)
											If !aChkHist[1]
												If STR0051 $ aChkHist[2] //"Ja existe um lancamento para o contador"
													MNT998GE(cCodB,'T9_POSCONT',nPoscont,STR0052) //'Ja existe um lancamento para o contador.'
													lGrava := .F.
												Else
													NGTRETCON(cCodB,dDuaB,nPoscont,TIME(),1,,,"C",cFilMa)
												EndIf
											Else
												NGTRETCON(cCodB,dDuaB,nPoscont,TIME(),1,,,"C",cFilMa)
											EndIf
										EndIf

										// Cadastra o Pneus
										DbselectArea("TQS")
										DbsetOrder(1)
										If !Dbseek(cFilMa+cCodB)
											RecLock('TQS',.T.)
											TQS->TQS_FILIAL := cFilMa
											TQS->TQS_CODBEM := cCodB
											TQS->TQS_NUMFOG := cCodB
										Else
											RecLock('TQS',.F.)
											TQS->TQS_NUMFOG := ST9->T9_CODBEM
										EndIf
										TQS->TQS_MEDIDA  := cMedB
										TQS->TQS_SULCAT  := Val(cIntSulc+"."+cDecSulc)
										TQS->TQS_DTMEAT  := dDsuB
										TQS->TQS_HRMEAT  := cHsuB
										TQS->TQS_BANDAA  := cBanB
										TQS->TQS_DESENH  := IIf(cBanB != "1",cDesB,"")
										TQS->TQS_KMOR    := nPBaO
										TQS->TQS_KMR1    := nPBa1
										TQS->TQS_KMR2    := nPBa2
										TQS->TQS_KMR3    := nPBa3
										TQS->TQS_KMR4    := Val(AllTrim(aPosicao[33]))
										TQS->TQS_DOT     := AllTrim(aPosicao[34])
										TQS->TQS_PLACA   := cPlaB
										TQS->TQS_EIXO    := cTpEx
										TQS->TQS_POSIC   := cLocB
										TQS->TQS_TIPEIX  := cTiEB
										If lExistTwi .And. cBanB != "1"
											TQS->TQS_TWI :=  MNTMinTwi(cDesB)
										EndIf
										If lMNTA9983
											ExecBlock('MNTA9983',.F.,.F.)
										EndIf
										MSUNLOCK("TQS")

										// Cadastra o bem

										DbselectArea("TQV")
										DbsetOrder(1)
										If !Dbseek(cFilMa+cCodB)
											RecLock('TQV',.T.)
											TQV->TQV_FILIAL := cFilMa
											TQV->TQV_CODBEM := ST9->T9_CODBEM
											TQV->TQV_DTMEDI := TQS->TQS_DTMEAT
											TQV->TQV_HRMEDI := TQS->TQS_HRMEAT
											TQV->TQV_BANDA  := TQS->TQS_BANDAA
											TQV->TQV_SULCO  := TQS->TQS_SULCAT
											TQV->TQV_DESENH := TQS->TQS_DESENH
											MSUNLOCK()
										Endif

										dbSelectArea("TQZ")
										dbSetOrder(1)
										If !dbSeek(cFilMa+ST9->T9_CODBEM+DTOS(TQS->TQS_DTMEAT)+TQS->TQS_HRMEAT+cStaB)
											RecLock("TQZ", .T.)
											TQZ->TQZ_FILIAL := cFilMa
											TQZ->TQZ_CODBEM := ST9->T9_CODBEM
											TQZ->TQZ_DTSTAT := TQS->TQS_DTMEAT
											TQZ->TQZ_HRSTAT := TQS->TQS_HRMEAT
											TQZ->TQZ_STATUS := cStaB
											TQZ->TQZ_PRODUT := AllTrim(aPosicao[22])
											TQZ->TQZ_ALMOX  := AllTrim(aPosicao[40])
											MsUnLock("TQZ")
										Endif

										DbSelectArea("ST9")
										DbSetOrder(14)
										DbSeek(cPlaB+"A")

										DbSelectArea("STC")
										DbSetOrder(01)
										STC->(Dbseek(xFilial("STC")+TQS->TQS_CODBEM,.T.))
										cSeq := Space(Len(STC->TC_SEQRELA))

										dbSelectArea( 'STC' )
										dbSetOrder( 1 )
										If dbSeek( xFilial( 'STC', ST9->T9_FILIAL ) + ST9->T9_CODBEM + TQS->TQS_CODBEM + 'B' + TQS->TQS_POSIC )
											RecLock("STC",.F.)
										Else
											RecLock("STC",.T.)
										Endif
										STC->TC_FILIAL  := xFilial( 'STC', ST9->T9_FILIAL )
										STC->TC_CODBEM  := ST9->T9_CODBEM
										STC->TC_TIPMOD  := ST9->T9_TIPMOD
										STC->TC_COMPONE := TQS->TQS_CODBEM
										STC->TC_TIPOEST := "B"
										STC->TC_LOCALIZ := TQS->TQS_POSIC
										STC->TC_DATAINI := ST9->T9_DTULTAC
										STC->TC_SEQRELA := cSeq
										MsunLock("STC")

										Dbselectarea("STZ")
										DbSetOrder(01)
										If !DbSeek(ST9->T9_FILIAL+TQS->TQS_CODBEM+"E")
											RecLock("STZ",.T.)

											STZ->TZ_FILIAL  := ST9->T9_FILIAL
											STZ->TZ_CODBEM  := TQS->TQS_CODBEM
											STZ->TZ_BEMPAI  := ST9->T9_CODBEM
											STZ->TZ_LOCALIZ := TQS->TQS_POSIC
											STZ->TZ_DATAMOV := ST9->T9_DTULTAC
											STZ->TZ_POSCONT := ST9->T9_POSCONT
											STZ->TZ_TIPOMOV := "E"
											//Verificar se o bem tem 1º contador
											If ST9->T9_TEMCONT <> "N"
												STZ->TZ_HORACO1 := Time()
											EndIf
											STZ->TZ_HORAENT := Time()
											STZ->TZ_TEMCONT := If(AllTrim(aPosicao[11]) == "P",aPosicao[11],"P")
											STZ->TZ_TEMCPAI := ST9->T9_TEMCONT

											MsUnLock("STZ")
										Endif

										DbSelectArea("STP")
										DbSetOrder(2)
										If !DbSeek(ST9->T9_FILIAL+TQS->TQS_CODBEM)
											cOSSTP := GETSXENUM('STP','TP_ORDEM')
											ConfirmSX8()

											If lApropri
												cApropri := If(MNA385APR(TQS->TQS_CODBEM,ST9->T9_DTULTAC,SubStr(Time(),1,5),1,.T.),'1','2')
											EndIf

											RecLock("STP",.T.)

											STP->TP_FILIAL  := ST9->T9_FILIAL
											STP->TP_ORDEM   := cOSSTP
											STP->TP_PLANO   := Replicate('0',Len(stp->tp_ordem))
											STP->TP_CODBEM  := TQS->TQS_CODBEM
											STP->TP_CCUSTO  := ST9->T9_CCUSTO
											STP->TP_CENTRAB := ST9->T9_CENTRAB
											STP->TP_DTORIGI := dDataBase
											STP->TP_DTREAL  := dDataBase
											STP->TP_POSCONT := ST9->T9_POSCONT
											STP->TP_VARDIA  := ST9->T9_VARDIA
											STP->TP_DTULTAC := ST9->T9_DTULTAC
											STP->TP_DTLEITU := ST9->T9_DTULTAC
											STP->TP_SITUACA := "L"
											STP->TP_TERMINO := "S"
											STP->TP_USULEI  := SubStr(cUsuario,07,15)
											STP->TP_TEMCONT := ST9->T9_TEMCONT
											STP->TP_ACUMCON := ST9->T9_CONTACU
											STP->TP_VIRACON := ST9->T9_VIRADAS
											STP->TP_HORA    := TIME()
											IF FieldPos('TP_TIPOLAN') > 0
												STP->TP_TIPOLAN := "I"
											Endif
											If lApropri
												STP->TP_APROPRI := cApropri
											EndIf

											MsUnLock("STP")
										EndIf

										cFilTPN := If(Empty(ST9->T9_FILIAL),Nil,ST9->T9_FILIAL)

										dbSelectArea("TPN")
										dbSetOrder(2)
										If !dbSeek(xFilial("TPN",cFilTPN)+ST9->T9_CODBEM+ST9->T9_CCUSTO+ST9->T9_CENTRAB+DTOS(ST9->T9_DTCOMPR)+Substr(Time(),1,5))
											RecLock("TPN",.T.)
											TPN->TPN_FILIAL := ST9->T9_FILIAL
											TPN->TPN_CODBEM := TQS->TQS_CODBEM
											TPN->TPN_DTINIC := ST9->T9_DTCOMPR
											TPN->TPN_HRINIC := Substr(Time(),1,5)
											TPN->TPN_CCUSTO := ST9->T9_CCUSTO
											TPN->TPN_CTRAB  := ST9->T9_CENTRAB
											TPN->TPN_UTILIZ := "U"
											TPN->TPN_POSCON := ST9->T9_POSCONT
											TPN->TPN_POSCO2 := 0
											MsUnLock("TPN")
										EndIf
										//----------------------------------------------------
										// Integração via mensagem única do cadastro de Bem
										//----------------------------------------------------
										If FindFunction("MN080INTMB") .And. MN080INTMB(ST9->T9_CODFAMI)

											If NGIFDBSEEK( "ST9",cCodBemInt,01 )

												// Define array private que será usado dentro da integração
												aParamMensUn    := Array( 4 )
												aParamMensUn[1] := Recno() // Indica numero do registro
												aParamMensUn[2] := 4       // Indica tipo de operação que esta invocando a mensagem unica
												aParamMensUn[3] := .F.     // Indica que se deve recuperar dados da memória
												aParamMensUn[4] := 1       // Indica se deve inativar o bem (1 ativo,2 - inativo)

												lMuEquip := .F.
												bBlock := { || FWIntegDef( "MNTA080",EAI_MESSAGE_BUSINESS,TRANS_SEND,Nil ) }

												If lMain
													MsgRun( "Aguarde integração com backoffice...","Equipment",bBlock )
												Else
													Eval( bBlock )
												EndIf

											EndIf

										EndIf

									Endif
								Endif
							Endif
						Endif
					ElseIf dbSeek(cPlaB+"I")
						MNT998GE(cCodB,'TQS_PLACA',cPlaB,STR0053) //"Veículo está Inativo."
						lGrava := .F.
					EndIf
				Else
					MNT998GE(cCodB,'T9_STATUS',cStaB,STR0117) //"Campo Placa está vazio e o Status está como Aplicado."
					lGrava := .F.
				EndIf
			Else
				If Empty(cPlaB)
					If Empty(cCenB)
						MNT998GE(cCodB,'T9_CCUSTO',cCenB,STR0082)//"Centro de Custo não informado"
						lGrava := .F.
					ElseIf Len(cCenB) > TAMSX3("T9_CCUSTO")[1]
						MNT998GE(cCodB,"T9_CCUSTO",cCenB,STR0128+cValToChar(TAMSX3("T9_CCUSTO")[1])+STR0095)//"Código do Centro de Custo não pode ser maior que "##" caracteres"
						lGrava := .F.
					ElseIf !MNT998SE(If(cMCONTAB == 'CTB','CTT','SI3'),cCenb,1)
						MNT998GE(cCodB,'T9_CCUSTO',cCenB,STR0061)//"Centro de custo nao cadastrado"
						lGrava := .F.
					ElseIf Val(nAcuB) < nPosCont
						MNT998GE(cCodB,'T9_CONTACU',nAcuB,STR0090) //"Posição Atual do Contador está maior que o Contador Acumulado"
						lGrava := .F.
					Else
						nBemImp += 1

						// Cadastra ou Altera o Bem
						DbselectArea("ST9")
						DbsetOrder(1)
						Dbseek(cFilMa+cCodB)

						// 1. Carrega variaveis de memória de todos os campos (padrões e de usuário) da tabela ST9.
						// 2. Caso o seek da linha 1457 tenha encontrado o registro conforme chave,
						// define a operação de Alteração (SetAltera()), caso não tenha encontrado define como Inclusão (SetInclui()).
						IIf( Found(), SetAltera(), SetInclui() )
						RegToMemory("ST9", !Found())

						// Atribui os valores repassados pelo txt às correspondentes variáveis de memória da ST9.
						// PS: Os demais campos da ST9 já foram carregados, com seus respectivos inicializadores padrões (X3_RELACAO), pela funcao RegToMemory
						M->T9_FILIAL  := cFilMa
						M->T9_CODBEM  := cCodB
						M->T9_CODFAMI := cFamB
						M->T9_PADRAO  := "N"
						M->T9_CALENDA := cCalend
						M->T9_NOME    := AllTrim(aPosicao[4])
						M->T9_CCUSTO  := cCenB
						M->T9_TIPMOD  := cTiMB
						M->T9_SERIE   := AllTrim(aPosicao[7])
						M->T9_FABRICA := cFabB
						M->T9_DTCOMPR := dDcoB
						M->T9_ESTRUTU := If(Empty(cPlaB),"N","S") // Cadastra como "S"(Sim), pois a placa nao vai estar em branco
						M->T9_TEMCONT := If(AllTrim(aPosicao[11]) == "P",aPosicao[11],"P") // Cadastra como "P"(Controlado pelo Pai da Estrutura) o Tem Contador
						M->T9_TPCONTA := AllTrim(aPosicao[12])
						M->T9_POSCONT := nPoscont
						M->T9_DTULTAC := dDuaB
						M->T9_VARDIA  := Val(AllTrim(aPosicao[15]))
						M->T9_LIMICON := Val(AllTrim(aPosicao[16]))
						M->T9_SITMAN  := AllTrim(aPosicao[18])
						M->T9_SITBEM  := AllTrim(aPosicao[19])
						M->T9_CONTDES := If(AllTrim(aPosicao[20]) $ "CT",AllTrim(aPosicao[20]),"")
						M->T9_CATBEM  := "3"
						M->T9_STATUS  := cStaB
						M->T9_CONTACU := Val(nAcuB)
						M->T9_MOVIBEM := "S" // Cadastra como "S"(Sim) a movimentação do bem.
						M->T9_VALCPA  := Val(cIntComp+"."+cDecComp)
						M->T9_CODESTO := AllTrim(aPosicao[22])
						M->T9_LOCPAD  := AllTrim(aPosicao[40])
						// Gravação/Persistencia das variáveis de memória nos campos correspondentes da ST9
						// Fcount(): Função que retorna o total de campos da tabela referenciada (ST9, neste caso)
						// Instrução dentro do For: ST9->T9_XXXXX := M->T9_XXXXX
						Reclock("ST9", !Found())
						For nField := 1 To ST9->( FCount() )
							ST9->&( FieldName(nField) ) := M->&( FieldName(nField) )
						Next nField
						MsUnlock()

						cCodBemInt := ST9->T9_CODBEM

						DbSelectArea("STP")
						DbSetOrder(2)
						If !DbSeek(cFilMa+cCodB)
							NGGRAVAHIS(cCodB,nPoscont,Val(AllTrim(aPosicao[15])),;
							dDuaB,Val(nAcuB),0,TIME(),1,"I")
						Else
							aChkHist := NGCHKHISTO(cCodB,dDuaB,nPoscont,TIME(),1,,.f.,cFilMa)
							If !aChkHist[1]
								If STR0051 $ aChkHist[2] //"Ja existe um lancamento para o contador"
									MNT998GE(cCodB,'T9_POSCONT',nPoscont,STR0052) //'Ja existe um lancamento para o contador.'
									lGrava := .F.
								Else
									NGTRETCON(cCodB,dDuaB,nPoscont,TIME(),1,,,"C",cFilMa)
								EndIf
							Else
								NGTRETCON(cCodB,dDuaB,nPoscont,TIME(),1,,,"C",cFilMa)
							EndIf
						EndIf

						// Cadastra o Pneus
						DbselectArea("TQS")
						DbsetOrder(1)
						If !Dbseek(cFilMa+cCodB)
							RecLock('TQS',.T.)
							TQS->TQS_FILIAL := cFilMa
							TQS->TQS_CODBEM := cCodB
							TQS->TQS_NUMFOG := cCodB
						Else
							RecLock('TQS',.F.)
							TQS->TQS_NUMFOG := ST9->T9_CODBEM
						EndIf
						TQS->TQS_MEDIDA  := cMedB
						TQS->TQS_SULCAT  := Val(cIntSulc+"."+cDecSulc)
						TQS->TQS_DTMEAT  := dDsuB
						TQS->TQS_HRMEAT  := cHsuB
						TQS->TQS_BANDAA  := cBanB
						TQS->TQS_DESENH  := If(cBanB != "1",cDesB,"")
						TQS->TQS_KMOR    := nPBaO
						TQS->TQS_KMR1    := nPBa1
						TQS->TQS_KMR2    := nPBa2
						TQS->TQS_KMR3    := nPBa3
						TQS->TQS_KMR4    := Val(AllTrim(aPosicao[33]))
						TQS->TQS_DOT     := AllTrim(aPosicao[34])
						If lExistTwi .And. cBanB != "1"
							TQS->TQS_TWI :=  MNTMinTwi(cDesB)
						EndIf
						If lMNTA9983
							ExecBlock('MNTA9983',.F.,.F.)
						EndIf
						MSUNLOCK("TQS")

						// Cadastra o bem

						DbselectArea("TQV")
						DbsetOrder(1)
						If !Dbseek(cFilMa+cCodB)
							RecLock('TQV',.T.)
							TQV->TQV_FILIAL := cFilMa
							TQV->TQV_CODBEM := ST9->T9_CODBEM
							TQV->TQV_DTMEDI := TQS->TQS_DTMEAT
							TQV->TQV_HRMEDI := TQS->TQS_HRMEAT
							TQV->TQV_BANDA  := TQS->TQS_BANDAA
							TQV->TQV_SULCO  := TQS->TQS_SULCAT
							TQV->TQV_DESENH := TQS->TQS_DESENH
							MSUNLOCK()
						Endif

						// Historico de Status do Pneu
						dbSelectArea("TQZ")
						dbSetOrder(1)
						If !dbSeek(cFilMa+ST9->T9_CODBEM+DTOS(TQS->TQS_DTMEAT)+TQS->TQS_HRMEAT+cStaB)
							RecLock("TQZ", .T.)
							TQZ->TQZ_FILIAL := cFilMa
							TQZ->TQZ_CODBEM := ST9->T9_CODBEM
							TQZ->TQZ_DTSTAT := TQS->TQS_DTMEAT
							TQZ->TQZ_HRSTAT := TQS->TQS_HRMEAT
							TQZ->TQZ_STATUS := cStaB
							TQZ->TQZ_PRODUT := AllTrim(aPosicao[22])
							TQZ->TQZ_ALMOX  := AllTrim(aPosicao[40])
							MsUnLock("TQZ")
						Endif

						cFilTPN := If(Empty(ST9->T9_FILIAL),Nil,ST9->T9_FILIAL)

						dbSelectArea("TPN")
						dbSetOrder(2)
						If !dbSeek(xFilial("TPN",cFilTPN)+ST9->T9_CODBEM+ST9->T9_CCUSTO+ST9->T9_CENTRAB+DTOS(ST9->T9_DTCOMPR)+Substr(Time(),1,5))
							RecLock("TPN",.T.)
							TPN->TPN_FILIAL := ST9->T9_FILIAL
							TPN->TPN_CODBEM := TQS->TQS_CODBEM
							TPN->TPN_DTINIC := ST9->T9_DTCOMPR
							TPN->TPN_HRINIC := Substr(Time(),1,5)
							TPN->TPN_CCUSTO := ST9->T9_CCUSTO
							TPN->TPN_CTRAB  := ST9->T9_CENTRAB
							TPN->TPN_UTILIZ := "U"
							TPN->TPN_POSCON := ST9->T9_POSCONT
							TPN->TPN_POSCO2 := 0
							MsUnLock("TPN")
						EndIf

						//----------------------------------------------------
						// Integração via mensagem única do cadastro de Bem
						//----------------------------------------------------
						If FindFunction("MN080INTMB") .And. MN080INTMB(ST9->T9_CODFAMI)

							If NGIFDBSEEK( "ST9",cCodBemInt,01 )

								// Define array private que será usado dentro da integração
								aParamMensUn    := Array( 4 )
								aParamMensUn[1] := Recno() // Indica numero do registro
								aParamMensUn[2] := 4       // Indica tipo de operação que esta invocando a mensagem unica
								aParamMensUn[3] := .F.     // Indica que se deve recuperar dados da memória
								aParamMensUn[4] := 1       // Indica se deve inativar o bem (1 ativo,2 - inativo)

								lMuEquip := .F.
								bBlock := { || FWIntegDef( "MNTA080",EAI_MESSAGE_BUSINESS,TRANS_SEND,Nil ) }

								If lMain
									MsgRun( "Aguarde integração com backoffice...","Equipment",bBlock )
								Else
									Eval( bBlock )
								EndIf
							EndIf

						EndIf

					EndIf
				Else
					MNT998GE(cCodB,'T9_STATUS',cStaB,STR0055) //"Status está diferente de aplicado."
					lGrava := .F.
				EndIf
			EndIf

		Endif

		FT_FSKIP()
	End

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNT998SE
Procura o registro

@author  Rafael Diogo Richter
@since   21/11/2008
@version P12
/*/
//-------------------------------------------------------------------
Static Function MNT998SE(cAli,cCha,nIndi)
	Local aAreacS := GetArea()
	DbselectArea(cAli)
	DbsetOrder(nIndi)
	If !Dbseek(xFilial(cAli)+cCha)
		Return .f.
	Endif
	RestArea(aAreacS)
Return .t.

//-------------------------------------------------------------------
/*/{Protheus.doc} MNT998SX
Retorna a variavel com o tamanho total do campo

@author  Andrey Martim Pegorini
@since   28/09/2010
@version P12
/*/
//-------------------------------------------------------------------
Static Function MNT998SX(cCampo,cValor,lDecimal)
	Local aAreacS   := GetArea()
	Local cDecimal  := ""
	Local aValor    := {}
	Local nTamSX3	:= 0
	Local nDecSX3	:= 0

	Default lDecimal := .F.


	nTamSX3 :=  Posicione("SX3",2,cCampo,"X3_TAMANHO")
	If Len(cValor) < nTamSX3
		cValor := cValor + Space(nTamSX3 - Len(cValor))
	EndIf

	If cCampo == "T7_FABRICA"
		If(Empty(AllTrim(cValor)),cValor:="",cValor)
	ElseIf cCampo == "T9_VALCPA" .or. cCampo == "TQS_SULCAT"

		nTamSX3 :=  Posicione("SX3",2,cCampo,"X3_TAMANHO")
		nDecSX3 :=  Posicione("SX3",2,cCampo,"X3_DECIMAL")
		cValor := STRTRAN(cValor,",",".")
		nPos := At(".",cValor)
		If nPos != 0
			If lDecimal
				cDecimal := SubStr(cValor,nPos+1,Len(cValor)-nPos)
				cValor   := SubStr(cValor,1,nPos-1)
				aAdd ( aValor , cValor   )
				aAdd ( aValor , cDecimal )
			Else
				cValor := SubStr(cValor,1,nPos-1)
			EndIf
		EndIf
		If Len(AllTrim(cValor)) > nTamSX3 - (1 + nDecSX3)
			MNT998GE(cCodB,cCampo,cValor+"."+cDecimal,If(cCampo == "T9_VALCPA",STR0137,STR0147)+cValToChar(nTamSX3 - (1 + nDecSX3))+STR0095)//"Valor da Compra não pode ser maior que "##"Sulco do Pneu não pode ser maior que "##" caracteres"
			lGrava := .F.
		EndIf
		If Len(AllTrim(cDecimal)) > nDecSX3 .and. lDecimal
			MNT998GE(cCodB,cCampo,cValor+"."+cDecimal,If(cCampo == "T9_VALCPA",STR0165,STR0166)+cValToChar(nDecSX3)+STR0095)//"Valor Decimal da Compra não pode ser maior que "##"Valor Decimal do Sulco do Pneu não pode ser maior que "##" caracteres"
			lGrava := .F.
		EndIf
	EndIf

	RestArea(aAreacS)

	If lDecimal
		Return aValor
	Else
		Return cValor
	EndIf

//-------------------------------------------------------------------
/*/{Protheus.doc} MNT998GE
Grava o erro

@author  Rafael Diogo Richter
@since   21/11/2008
@version P12
/*/
//-------------------------------------------------------------------
Function MNT998GE(cCodG,cCamG,cConP,cErro)
	Local aAreaco 	:= GetArea()

	DbselectArea(cTRB1)
	RecLock((cTRB1),.T.)
	(cTRB1)->CODBEM := cCodG
	(cTRB1)->CAMPO  := cCamG
	(cTRB1)->CONTEU := If(Valtype(cConp) = 'N',Str(cConP),If(Valtype(cConp) = 'D',Dtoc(cConP),cConp))
	(cTRB1)->ERRO   := cErro
	RestArea(aAreaco)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MNT998IMP ³ Autor ³ Rafael Diogo Richter  ³ Data ³21/11/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Chamada do relatorio                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaMNT                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT998IMP()

	cString  := "ST9"
	cdesc1   := STR0056 //"Inconsistencia na importacao das informacoes referente Pneus"
	cdesc2   := " "
	cdesc3   := " "
	wnrel    := "MNTA998"
	aReturn  := {STR0066,1,STR0067, 1, 2, 1, "",1 }//"Zebrado"##"Administracao"
	nLastKey := 0
	Tamanho  := "G"
	nomeprog := "MNTA998"
	Titulo   := cdesc1

	//+-----------------------------------------+
	//| Envia controle para a funcao SETPRINT   |
	//+-----------------------------------------+
	wnrel:=SetPrint(cString,wnrel,,titulo,cDesc1,cDesc2,cDesc3,.F.,"")
	If nLastKey == 27
		Set Filter To
		Return
	Endif
	SetDefault(aReturn,cString)
	If nLastKey == 27
		Set Filter To
		Return
	Endif

	RptStatus({|lEnd| MNT998IT(@lEnd,wnRel,titulo,tamanho)},titulo)

Return NIL

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ MNT998IT ³ Autor ³ Rafael Diogo Richter  ³ Data ³21/11/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Chamada do relatorio                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaMNT                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT998IT

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define Variaveis                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cRodaTxt := ""
	nCntImpr := 0
	nAtual   := 0
	contador := 0
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Variaveis para controle do cursor de progressao do relatorio ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nTotRegs := 0
	nMult    := 1
	nPosAnt  := 4
	nPosAtu  := 4
	nPosCnt  := 0
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Contadores de linha e pagina                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	li    := 80
	m_pag := 1
	lEnd  := .F.

	CABEC1 := STR0057 //"Codigo do Bem     Campo com Erro  Posicao inicial                 Mensagem de erro"
	CABEC2 := " "
	ntipo  := 0

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se deve comprimir ou nao                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nTipo  := IIF(aReturn[4]==1,15,18)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta os Cabecalhos                                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


	/*/
	1         2         3         4         5         6         7         8         9         0         1         2         3         4
	01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
	***********************************************************************************************************************************
	Codigo do Bem     Campo com Erro  Posicao inicial                 Mensagem de erro
	***********************************************************************************************************************************
	xxxxxxxxxxxxxxxx  xxxxxxxxxxxxxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	*/

	dbSelectArea(cTRB1)
	DbGoTop()
	SetRegua(LastRec())
	While !eof()
		If lEnd
			@ PROW()+1,001 PSAY STR0068//"CANCELADO PELO OPERADOR"
			Exit
		EndIf
		IncRegua()
		Ngsomali(58)
		@li,000 PSAY (cTRB1)->CODBEM
		@li,018 PSAY (cTRB1)->CAMPO
		@li,034 PSAY (cTRB1)->CONTEU
		@li,066 PSAY AllTrim((cTRB1)->ERRO)
		dbSelectArea(cTRB1)
		Dbskip()
	End

	If nBemImp > 0 .Or. nRegLi > 0
		Ngsomali(58)
		Ngsomali(58)
		@li,000 PSAY STR0058 //"Resultado"
		Ngsomali(58)
		@li,000 PSAY STR0059+Str(nRegLi,10) //"Quantidade de registros lidos....... "
		Ngsomali(58)
		@li,000 PSAY STR0025+Str(nBemImp,10) //"Quantidade de registros importados.. "
	Endif

	RetIndex("ST9")
	Set Filter To
	Set device to Screen
	If aReturn[5] == 1
		Set Printer To
		dbCommitAll()
		OurSpool(wnrel)
	Endif

	MS_FLUSH()

Return NIL

//-------------------------------------------------------------------
/*/{Protheus.doc} NGATUSEFR
Verifica se o cliente esta utilizando frotas

@author Elisangela Costa
@since  18/06/08
@return lRetS, .T. Integrado ao frotas
			   .F. Não integrado ao frotas
/*/
//-------------------------------------------------------------------
Static Function NGATUSEFR()

	Local vRetS := {}
	Local lRetS := IIf( lRel12133, MNTFrotas(), SuperGetMv("MV_NGMNTFR",.F.," ") == 'S') // Possui frotas

	If lRetS .And. !lRel12133

		If lRetS
			vRetS := NGCADICBASE("T9_TIPMOD","A","ST9")
			lRetS := If(!vRetS[1],.F.,.T.)
		EndIf

		If lRetS
			vRetS := NGCADICBASE("T9_CATBEM","A","ST9")
			lRetS := If(!vRetS[1],.F.,.T.)
		EndIf

		If lRetS
			vRetS := NGCADICBASE("TC_TIPMOD","A","STC")
			lRetS := If(!vRetS[1],.f.,.t.)
		EndIf

		If lRetS
			vRetS := NGCADICBASE("TPF_TIPMOD","A","TPF")
			lRetS := If(!vRetS[1],.f.,.t.)
		EndIf

		If lRetS
			lRetS := If(NGRETORDEM("STC","TC_FILIAL+TC_CODBEM+TC_TIPMOD+TC_COMPONE+TC_TIPOEST+TC_LOCALIZ+TC_SEQRELA",.T.) = 0,.F.,.T.)
		EndIf

		If lRetS
			lRetS := If(NGRETORDEM("ST9","T9_CODBEM+T9_SITBEM",.T.) = 0,.F.,.T.)
		EndIf

	EndIf

Return lRetS

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ImpReforma³ Autor ³Vitor Emanuel Batista  ³ Data ³16/11/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Faz processamento de importacao das reformas                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaMNT                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function ImpReforma()
	Local nRecno   := 0, i
	Local cServRef := AllTrim(GetMv("MV_NGSEREF"))
	Local cServCon := AllTrim(GetMv("MV_NGSECON"))
	Local aServCon := StrTokArr(cServCon,";")

	nHdlArq := FOPEN(cArquivo2,0)
	nTamArq := fseek(nHdlArq,0,2)

	FT_FUSE(cArquivo2)
	FT_FGOTOP()

	ProcRegua(Int(nTamArq/299))

	While (!FT_FEof())

		cLinha := FT_FREADLN()

		If Empty(cLinha)
			Exit
		Endif

		++ nRecno
		nRegLi++

		IncProc(STR0027+ AllTrim(Str(nRecno))) //"Importando Registro: "

		TEXLINHA := SubStr(cLinha,1,400)

		nPosIni := 1
		nPosAtu := 1
		cTexLinha := TEXLINHA
		aPosicao := {}
		For i := 1 To 15
			nPos:= At(Chr(9),cTexLinha)
			nPosAtu := nPos
			If i <> 15
				aAdd(aPosicao,AllTrim(SubStr(cTexLinha,nPosIni,nPosAtu-1)))
				cTexLinha := SubStr(cTexLinha,nPosAtu+Len(Chr(9)),400)
			Else
				aAdd(aPosicao,AllTrim(cTexLinha))
			EndIf
		Next i

		/*
		01 - Filial (T9_FILIAL / TJ_FILIAL)
		02 - Codigo do Bem (TJ_CODBEM)
		03 - Data Original Ordem Serv. (TJ_DTORIG)
		04 - Codigo do Servico (TJ_SERVICO)
		05 - Data Inicio Manut. Real (TJ_DTMRINI)
		06 - Hora Inicio Manut. Real (TJ_HOMRINI)
		07 - Data Fim de Manut. Real (TJ_DTMRFIM)
		08 - Hora Fim de Manut. Real (TJ_HOMRFIM)
		09 - Codigo do Fornecedor (TL_CODIGO)
		10 - Custo do Recurso (STJ->TJ_CUSTO / STL->TL_CUSTTER)
		11 - Data Inicio do Retorno (TL_DTINICI)
		12 - Hora Inicio do Retorno (TL_HOINICI)
		13 - Data Fim do Retorno (TL_DTFIM)
		14 - Hora Fim do Retorno (TL_HOFIM)
		15 - Irregularidade (TJ_IRREGU)
		*/

		lGrava := .T.

		cFilBem  := Upper(AllTrim(aPosicao[01]) + Space(Len(ST9->T9_FILIAL) - Len(AllTrim(aPosicao[01]))))
		cCodBem  := Upper(AllTrim(aPosicao[02]) + Space(TAMSX3("T9_CODBEM")[1] - Len(AllTrim(aPosicao[02]))))
		cDtOrig  := aPosicao[03]
		cServico := Upper(aPosicao[04] + Space(TAMSX3("T4_SERVICO")[1] - Len(AllTrim(aPosicao[04]))))
		cDtMRIni := aPosicao[05]
		cHrMRIni := aPosicao[06]
		cDtMRFim := aPosicao[07]
		cHrMRFim := aPosicao[08]
		cFornec  := Upper(AllTrim(aPosicao[09]) + Space(TAMSX3("A2_COD")[1] - Len(AllTrim(aPosicao[09]))))
		cCusto   := StrTran(aPosicao[10],',','.')
		cDtInici := aPosicao[11]
		cHoInici := aPosicao[12]
		cDtFim   := aPosicao[13]
		cHoFim   := aPosicao[14]
		cIrregu  := Upper(AllTrim(aPosicao[15]) + Space(TAMSX3('TJ_IRREGU')[1] - Len(AllTrim(aPosicao[15]))))

		//Valida a existencia da filial
		If !Empty(cFilBem)
			If Len(AllTrim(cFilBem)) > TAMSX3('T9_FILIAL')[1]
				MNT998GE(cCodBem,"M0_CODFIL",cFilBem,STR0200+cValToChar(TAMSX3('T9_FILIAL')[1])+STR0095) //"Código da Filial não pode ser maior que "
				lGrava := .f.
			Else
				dbSelectArea("SM0")
				dbSetOrder(1)
				If !dbSeek(cCodEmp+cFilBem)
					MNT998GE(cCodBem,"M0_CODFIL",cFilBem,STR0070) // "Filial não cadastrada"
					lGrava := .f.
				EndIf
			EndIf
		EndIf

		//Valida codigo do Bem
		If Empty(cCodBem)
			MNT998GE(cCodBem,'T9_CODBEM',cCodBem,STR0044) //'Pneu não informado'
			lGrava := .f.
		ElseIf Len(AllTrim(cCodBem)) > TAMSX3("TQS_NUMFOG")[1]
			MNT998GE(cCodBem,'T9_CODBEM',cCodBem,STR0084+cValToChar(TAMSX3("TQS_NUMFOG")[1])+STR0119) //"Código do Pneu não pode ser maior que "##" caracteres, devido a replicação do mesmo Código para o Número de Fogo do Pneu."
			lGrava := .f.
		ElseIf lGrava

			dbSelectArea("ST9")
			dbSetOrder(1)
			If !dbSeek(xFilial("ST9",cFilBem)+cCodBem)
				MNT998GE(cCodBem,'T9_CODBEM',cCodBem,STR0171) //'Pneu não cadastrado.'
				lGrava := .f.
			EndIf
		EndIf

		//Valida data original
		aData  := NGStrIsDat(AllTrim(cDtOrig),"C",.T.) //Variavel, Formato ('C'aracter ou 'S'tring), Retornar Mensagem de Erro? (.T.,.F.)
		lData  := aData[1]
		aErros := aData[2]
		If !lData
			For i:=1 To Len(aErros)
				MNT998GE(cCodBem,'TJ_DTORIGI',cDtOrig,AllTrim(aErros[i]))
				lGrava := .f.
			Next i
		ElseIf CTOD(cDtOrig) > Date()
			MNT998GE(cCodBem,'TJ_DTORIGI',cDtOrig,STR0173) //'Data Original maior que a data atual.'
			lGrava := .f.
		Endif

		//Valida Servico
		If Empty(cServico)
			MNT998GE(cCodBem,'T4_SERVICO',cServico,STR0202) //"Código do Serviço vazio."
			lGrava := .F.
		ElseIf Len(AllTrim(cServico)) > TAMSX3('T4_SERVICO')[1]
			MNT998GE(cCodBem,'T4_SERVICO',cServico,STR0203+cValToChar(TAMSX3('T4_SERVICO')[1])+STR0095) //"Código do Serviço não pode ser maior que "
			lGrava := .f.
		Else
			If !NGIFDBSEEK('ST4',cServico,1,,cFilBem)
				MNT998GE(cCodBem,'T4_SERVICO',cServico,STR0174) //'Serviço não cadastrado.'
				lGrava := .F.
			Else
				NGIFDBSEEK("STE",ST4->T4_TIPOMAN,1,,cFilBem)
				If STE->TE_CARACTE <> 'C'
					MNT998GE(cCodBem,'T4_SERVICO',cServico,STR0222) //"Tipo de Serviço deverá ser Corretivo."
					lGrava := .F.
				EndIf
				If AllTrim(cServico) != cServRef .And. (aScan(aServCon, {|x| x == AllTrim(cServico)}) = 0)
					MNT998GE(cCodBem,'T4_SERVICO',cServico,STR0223) //"Serviço deverá ser de Reforma (MV_NGSEREF) ou de Conserto (MV_NGSECON)."
					lGrava := .F.
				EndIf
			EndIf
		EndIf

		//Valida data inicial da manutencao.
		aData  := NGStrIsDat(AllTrim(cDtMRIni),"C",.T.) //Variavel, Formato ('C'aracter ou 'S'tring), Retornar Mensagem de Erro? (.T.,.F.)
		lData  := aData[1]
		aErros := aData[2]
		lDtHr  := lData
		If !lData
			For i:=1 To Len(aErros)
				MNT998GE(cCodBem,'TJ_DTMRINI',cDtMRIni,AllTrim(aErros[i]))
			Next i
			lDtHr  := .F.
			lGrava := .f.
		ElseIf CTOD(cDtMRIni) > Date()
			MNT998GE(cCodBem,'TJ_DTMRINI',cDtMRIni,STR0176) //'Data Inicio Manut. Real maior que a data atual.'
			lGrava := .f.
			lDtHr  := .F.
		Endif

		//Valida hora inicial da manutencao
		If Empty(cHrMRIni) .Or. cHrMRIni == ":"
			MNT998GE(cCodBem,'TJ_HOMRINI',cHrMRIni,STR0177) //'Hora Inicio Manut. Real Vazia.'
			lGrava := .f.
			lDtHr  := .F.
		ElseIf Len(AllTrim(cHrMRIni)) != 5 .Or. !NGVALHORA(cHrMRIni,.F.)
			MNT998GE(cCodBem,'TJ_HOMRINI',cHrMRIni,STR0205) //'Hora Inicio Manut. Real inválida.'
			lGrava := .f.
			lDtHr  := .F.
		Endif

		//Valida data final da manutencao.
		aData  := NGStrIsDat(AllTrim(cDtMRFim),"C",.T.) //Variavel, Formato ('C'aracter ou 'S'tring), Retornar Mensagem de Erro? (.T.,.F.)
		lData  := aData[1]
		aErros := aData[2]
		If !lData
			For i:=1 To Len(aErros)
				MNT998GE(cCodBem,'TJ_DTMRFIM',cDtMRFim,AllTrim(aErros[i]))
			Next i
			lDtHr  := .F.
			lGrava := .f.
		ElseIf CTOD(cDtMRFim) > Date()
			MNT998GE(cCodBem,'TJ_DTMRFIM',cDtMRFim,STR0179) //'Data Fim de Manut. Real maior que a data atual.'
			lGrava := .f.
			lDtHr  := .F.
		Endif

		//Valida hora final da manutencao
		If Empty(cHrMRFim) .Or. cHrMRFim == ":"
			MNT998GE(cCodBem,'TJ_HOMRFIM',cHrMRFim,STR0180) //'Hora Fim de Manut. Real Vazia.'
			lGrava := .f.
			lDtHr  := .F.
		ElseIf Len(AllTrim(cHrMRFim)) != 5 .Or. !NGVALHORA(cHrMRFim,.F.)
			MNT998GE(cCodBem,'TJ_HOMRFIM',cHrMRFim,STR0207) //'Hora Fim de Manut. Real inválida.'
			lGrava := .f.
			lDtHr  := .F.
		Endif

		If lDtHr
			If CTOD(cDtMRIni) > CTOD(cDtMRFim)
				MNT998GE(cCodBem,'TJ_DTMRFIM',cDtMRFim,STR0215) //'Data Fim de Manut. Real menor que a Data Inicio Manut. Real.'
				lGrava := .f.
			ElseIf cDtMRIni == cDtMRFim .And. cHrMRIni > cHrMRFim
				MNT998GE(cCodBem,'TJ_HOMRFIM',cHrMRFim,STR0216) //'Hora Fim de Manut. Real menor que a Hora Inicio Manut. Real.'
				lGrava := .f.
			EndIf
		EndIf

		//Valida Servico
		If Empty(cFornec)
			MNT998GE(cCodBem,'TL_CODIGO',cFornec,STR0208) //"Código do Fornecedor vazio."
			lGrava := .F.
		ElseIf Len(AllTrim(cFornec)) > TAMSX3('A2_COD')[1]
			MNT998GE(cCodBem,'TL_CODIGO',cFornec,STR0209+cValToChar(TAMSX3('A2_COD')[1])+STR0095) //"Código do Fornecedor não pode ser maior que "
			lGrava := .f.
		ElseIf !NGIFDBSEEK('SA2',cFornec,1,,cFilBem)
			MNT998GE(cCodBem,'TL_CODIGO',cFornec,STR0181) //'Fornecedor não cadastrado.'
			lGrava := .F.
		EndIf

		If Empty(cCusto) .Or. Val(cCusto) == 0
			MNT998GE(cCodBem,'TJ_CUSTTER',StrTran(aPosicao[10],'.',','),STR0224) //"Valor do Custo não informado."
			lGrava := .f.
		ElseIf !NGIsAllNum(cCusto) .Or. Val(cCusto) <= 0
			MNT998GE(cCodBem,'TJ_CUSTTER',StrTran(aPosicao[10],'.',','),STR0182) //'Valor do custo inválido.'
			lGrava := .f.
		Else
			If Len(cValToChar(Val(cCusto) - Int(Val(cCusto)))) > TAMSX3('TJ_CUSTTER')[2]+2
				MNT998GE(cCodBem,'TJ_CUSTTER',StrTran(aPosicao[10],'.',','),STR0217+cValToChar(TAMSX3('TJ_CUSTTER')[2])+STR0095) //"Valor decimal do Custo não poderá ser maior que "
				lGrava := .f.
			EndIf
			If Val(cCusto) > Val(Replicate('9',TAMSX3('TJ_CUSTTER')[1]-TAMSX3('TJ_CUSTTER')[2]-1)+","+Replicate('9',TAMSX3('TJ_CUSTTER')[2]))
				MNT998GE(cCodBem,'TJ_CUSTTER',StrTran(aPosicao[10],'.',','),STR0218+Replicate('9',TAMSX3('TJ_CUSTTER')[1]-TAMSX3('TJ_CUSTTER')[2]-1)+","+Replicate('9',TAMSX3('TJ_CUSTTER')[2])) //'Valor do Custo não poderá ser superior a '
				lGrava := .f.
			EndIf
		EndIf
		//Valida data inicial do insumo.
		aData  := NGStrIsDat(AllTrim(cDtInici),"C",.T.) //Variavel, Formato ('C'aracter ou 'S'tring), Retornar Mensagem de Erro? (.T.,.F.)
		lData  := aData[1]
		aErros := aData[2]
		lDtHr  := lData
		If !lData
			For i:=1 To Len(aErros)
				MNT998GE(cCodBem,'TL_DTINICI',cDtInici,AllTrim(aErros[i]))
				lGrava := .f.
			Next i
		ElseIf CTOD(cDtInici) > Date()
			MNT998GE(cCodBem,'TL_DTINICI',cDtInici,STR0184) //'Data Inicio do Retorno maior que a data atual'
			lGrava := .f.
		Endif

		//Valida a hora inicial do insumo
		If Empty(cHoInici) .Or. cHoInici == ":"
			MNT998GE(cCodBem,'TL_HOINICI',cHoInici,STR0185) //'Hora Inicio do Retorno Vazia'
			lGrava := .f.
		ElseIf Len(AllTrim(cHoInici)) != 5 .Or. !NGVALHORA(cHoInici,.F.)
			MNT998GE(cCodBem,'TL_HOINICI',cHoInici,STR0211) //'Hora Inicio do Retorno inválida.'
			lGrava := .f.
		Endif

		//Valida data inicial do insumo.
		aData  := NGStrIsDat(AllTrim(cDtFim),"C",.T.) //Variavel, Formato ('C'aracter ou 'S'tring), Retornar Mensagem de Erro? (.T.,.F.)
		lData  := aData[1]
		aErros := aData[2]
		lDtHr  := lData
		If !lData
			For i:=1 To Len(aErros)
				MNT998GE(cCodBem,'TL_DTFIM',cDtFim,AllTrim(aErros[i]))
				lGrava := .f.
			Next i
		ElseIf CTOD(cDtFim) > Date()
			MNT998GE(cCodBem,'TL_DTFIM',cDtFim,STR0187) //'Data Fim do Retorno maior que a data atual'
			lGrava := .f.
		Endif

		//Valida a hora inicial do insumo
		If Empty(cHoFim) .Or. cHoFim == ":"
			MNT998GE(cCodBem,'TL_HOFIM',cHoFim,STR0188) //'Hora Fim do Retorno Vazia'
			lGrava := .f.
		ElseIf Len(AllTrim(cHoFim)) != 5 .Or. !NGVALHORA(cHoFim,.F.)
			MNT998GE(cCodBem,'TL_HOFIM',cHoFim,STR0213) //'Hora Fim do Retorno inválida.'
			lGrava := .f.
		Endif

		If lDtHr
			If CTOD(cDtInici) > CTOD(cDtFim)
				MNT998GE(cCodBem,'TL_DTFIM',cDtFim,STR0219) //'Data Fim do Retorno menor que a Data Inicio do Retorno.'
				lGrava := .f.
			ElseIf cDtInici == cDtFim .And. cHoInici > cHoFim
				MNT998GE(cCodBem,'TL_HOFIM',cHrMRFim,STR0220) //'Hora Fim do Retorno menor que a Hora Inicio do Retorno.'
				lGrava := .f.
			EndIf
		EndIf

		If NgSX2Modo("STJ") == 'E' .And. Empty(cFilBem)
			MNT998GE(cCodBem,'TJ_FILIAL',cFilBem,STR0189) //'Tabela STJ esta exclusiva e nao foi informado Filial'
			lGrava := .f.
		EndIf

		If NgSX2Modo("STL") == 'E' .And. Empty(cFilBem)
			MNT998GE(cCodBem,'TL_FILIAL',cFilBem,STR0190) //'Tabela STL esta exclusiva e nao foi informado Filial'
			lGrava := .f.
		EndIf

		If Empty(cIrregu)
			MNT998GE(cCodBem,'TJ_IRREGU',cIrregu,STR0191) //'Código de Irregularidade vazio.'
			lGrava := .f.
		ElseIf Len(AllTrim(cIrregu)) > TAMSX3('TJ_IRREGU')[1]
			MNT998GE(cCodBem,'TJ_IRREGU',cIrregu,STR0214+cValToChar(TAMSX3('TJ_IRREGU')[1])+STR0095) //"Código de Irregularidade não pode ser maior que "
			lGrava := .f.
		ElseIf !NGIFDBSEEK("TP7",cIrregu,1,,cFilBem)
			MNT998GE(cCodBem,'TJ_IRREGU',cIrregu,STR0192) //'Código de Irregularidade não cadastrado.'
			lGrava := .f.
		EndIf


		dbSelectArea("STJ")
		dbSetOrder(15)
		dbSeek(xFilial("STJ")+"B"+cCodBem+DTOS(CTOD(cDtOrig)))
		While !Eof() .And. xFilial("STJ")+"B"+cCodBem+DTOS(CTOD(cDtOrig)) == STJ->TJ_FILIAL+STJ->TJ_TIPOOS+STJ->TJ_CODBEM+DTOS(STJ->TJ_DTORIGI)
			If STJ->TJ_SERVICO == cServico
				MNT998GE(cCodBem,'TJ_ORDEM',STJ->TJ_ORDEM,STR0193) //'Já existe uma Ordem de Servico para esse Bem + Servico + Data'
				lGrava := .f.
				Exit
			EndIf
			dbSkip()
		EndDo

		If lGrava
			cSeqSTJ  := "0  "
			aRetorna :=	NGGeraOS("C",CTOD(cDtOrig),cCodBem,cServico,cSeqSTJ,'S','S','S',If(NgSX2Modo("STJ")=='C',Nil,cFilBem))
			If aRetorna[1][1] <> 'S' .And. !Empty(aRetorna[1][2])
				MNT998GE(cCodBem,'TJ_CODBEM',cCodBem,AllTrim(aRetorna[1][2]))
				lGrava := .F.
			Else
				GeraInsumo(STJ->TJ_FILIAL,STJ->TJ_ORDEM,STJ->TJ_PLANO,cSeqSTJ,cFornec,Val(cCusto),CTOD(cDtInici),cHoInici)
				FinOSRef( STJ->TJ_ORDEM, STJ->TJ_PLANO, STJ->TJ_DTPRINI, STJ->TJ_HOPRINI, STJ->TJ_DTPRFIM, STJ->TJ_HOPRFIM, xFilial( 'STJ', cFilBem ) )
				Reclock("STJ",.F.)
				STJ->TJ_CUSTTER := Val(cCusto)
				STJ->TJ_DTMRINI := CTOD(cDtMRIni)
				STJ->TJ_HOMRINI := cHrMRIni
				STJ->TJ_DTMRFIM := CTOD(cDtMRFim)
				STJ->TJ_HOMRFIM := cHrMRFim
				STJ->TJ_HOMPINI := cHrMRIni
				STJ->TJ_HOMPFIM := cHrMRFim
				STJ->TJ_DTORIGI := CTOD(cDtOrig)
				STJ->TJ_IRREGU  := cIrregu
				MsUnlock("STJ")

				nBemImp++
			EndIf
		EndIf

		FT_FSKIP()
	End

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³GeraInsumo³ Autor ³ Thiago Olis Machado   ³ Data ³13/08/2007³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Gera um Insumo para a OS de Reforma.                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Cliente  ³ Martins S.A.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ S.S  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function GeraInsumo(cFilBem,cOrdem,cPlano,cSeqSTJ,cFornec,nCusto,dDtRef,cHrRef)
	Local aArea := GetArea()

	DbSelectArea("STL")
	DbSetOrder(1)
	If !DbSeek(cFilBem+cOrdem+cPlano)
		RecLock("STL",.t.)

		STL->TL_FILIAL  := cFilBem
		STL->TL_ORDEM   := cOrdem
		STL->TL_PLANO   := cPlano
		STL->TL_TAREFA  := '0'
		STL->TL_SEQRELA := cSeqSTJ
		STL->TL_DTINICI := dDtRef
		STL->TL_HOINICI := cHrRef
		STL->TL_USACALE := "N"
		STL->TL_GARANTI := "N"

		STL->TL_DTFIM   := CTOD(cDtFim)
		STL->TL_HOFIM   := cHoFim

		STL->TL_TIPOREG := "T"
		STL->TL_CODIGO  := cFornec
		STL->TL_QUANREC := 1
		STL->TL_QUANTID := 1
		STL->TL_UNIDADE := "H"
		STL->TL_TIPOHOR := Alltrim(GetMv("MV_NGUNIDT"))

		STL->TL_CUSTO := nCusto

		STL->(MsUnLock())
	EndIf

	RestArea(aArea)

Return .t.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ FinOSRef ³ Autor ³ Thiago Olis Machado   ³ Data ³27/03/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Finaliza a Ordem de Servico de Reforma.                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Cliente  ³ Martins S.A.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ S.S  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function FinOSRef(cOrdem,cPlano,dDtPrIni,cHoPrIni,dDtPrFim,cHoPrFim,cFilBem)
	Local aArea := GetArea()

	NGFinal(cOrdem,cPlano,dDtPrIni,cHoPrIni,dDtPrFim,cHoPrFim,0,0,,,,,,cFilBem)

	RestArea(aArea)

Return .T.
