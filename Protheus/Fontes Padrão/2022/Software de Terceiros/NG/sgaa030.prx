#Include "SGAA030.ch"
#Include "Protheus.ch"
#Include "DbTree.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} SGAA030
Programa para cadastrar Aspectos Ambientais.

@type    function
@author  Thiago Olis Machado
@since   19/08/2003
@sample  SGAA030()

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function SGAA030()

	// Armazena variaveis p/ devolucao (NGRIGHTCLICK)
	Local aNGBEGINPRM := NGBEGINPRM(,,{"TA4",{"TA9","TAG","TAJ"}})

	If Amiin(56) //Verifica se o usuário possui licença para acessar a rotina.

		Private aRotina := MenuDef()

		Private cCadastro := OemtoAnsi(STR0006)  //"Aspectos Ambientais"
		Private aChkDel := {}, bNgGrava

		aCHKDEL := {{"TA4->TA4_CODASP","TAB",4},{"TA4->TA4_CODASP","TAO",1}}

		DbSelectArea("TA4")
		DbSetOrder(1)
		mBrowse( 6, 1, 22, 75,"TA4")

	EndIf

	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030Pro
Programa para cadastrar Aspectos/Local/Avaliacao Padrão

@type    function
@author  Thiago Olis Machado
@since   27/11/2003
@sample  Sg030Pro( 'TA4', 5000, 3, {}, .F. )

@param   cAlias, Caractere, Alias utilizado
@param   nRecno, Numérico, Recno do registro
@param   nOpcx, Numérico, Operação a ser efetuada
@param   aLocAsp, Array, Locais do Aspecto
@param   lLocTemp, Lógico, Indica se utiliza localização temporária

@return  Array, Primeira posição contém um valor lógico, verdadeiro se
o usuário confirmou a tela, segunda posição contém um array com as
informações do registro a ser gravado
/*/
//-------------------------------------------------------------------
Function Sg030Pro( cAlias, nRecno, nOpcx, aLocAsp, lLocTemp )

	Local oDlg, oMenu
	Local oPnlScr, oPnlTop, oPanel2, oPanel3, oPanel4, oPnlBEst, oPnlTAva
	Local cBEst, oBEst, oTAva, cTAva, oPnlTObs, oTObs, cTObs, nIdx
	Local cTitulo   := cCadastro  // Titulo da janela
	Local oFontB    := TFont():New("Arial",,14,,.T.)
	Local lGetd     := .T.
	Local nControl  := 0
	Local lOK       := .F.
	Local aNoFields := {}
	Local aPages    := {}
	Local aTitles   := {}
	Local aTRB      := {}
	Local aColsAI	:= {}
	Local aHeaderAI	:= {}
	Local cTudoOk   := "SG030TUDO()"
	Local cLinhaOk  := "Sg030Lin1()"
	Local aSize     := MsAdvSize()
	Local nLeft     := 0
	Local aGrava030 := {}
	Local aRet030   := {}
	Local aLocRes   := {}
	Local nNivel

	Default aLocAsp     := {}
	Default lLocTemp	:= .F.

	Private cIndVisx1
	Private cIndVis1
	Private oEnc01
	Private oGet01
	Private oGet
	Private nItens
	Private oMark
	Private nTotal        := 0
	Private n             := 1
	Private aLocal        := {}
	Private cAval         := ''
	Private aSvATela      := {}
	Private aSvAGets      := {}
	Private aTela         := {}
	Private aCols1        := {}
	Private aMark         := {}
	Private lInverte      := .F.
	Private lQuery        := .T.
	Private aSvHeader     := { {},{},{},{} }
	Private aSvCols       := { {},{},{},{} }
	Private aVETINR       := {}
	Private cMarca        := GetMark()
	Private cBMP          := "1"
	Private M->TA4_CODASP := ''

	//Variável de TRB
	Private cTRBSGA
	Private cTRBA	:= GetNextAlias()
	Private cTRBX   := GetNextAlias()
	Private oTempTRB
	Private oTempTRBA
	Private oTempTRBX

	If !(Alltrim(GetTheme()) == "FLAT") .And. !SetMdiChild()
		aSize[7] := aSize[7]-50
		aSize[6] := aSize[6]-30
		aSize[5] := aSize[5]-14
		nLeft := 5
	EndIf

	dbSelectArea("TAF")
	TAF->(DbSeek(xFilial('TAF')+'001'))

	If !Sg030Get(nOpcx)
		Return { .F. }
	EndIf

	aTRB     := SGATRBEST(.T.) // Define estrutura do TRB
	cTRBSGA  := aTRB[3]
	oTempTRB := FWTemporaryTable():New( cTRBSGA, aTRB[1] )
	For nIdx := 1 To Len( aTRB[2] )
		oTempTRB:AddIndex( RETASC( cValToChar( nIdx ) , 1 , .T. ), aTRB[2,nIdx] )
	Next nIdx
	oTempTRB:Create()

	aDbf := {}
	aAdd(aDBF,{ "TRB_CODAVA"   , "C" ,03, 0 })
	aAdd(aDBF,{ "TRB_CODIGO"   , "C" ,03, 0 })
	aAdd(aDBF,{ "TRB_PESO"     , "N" ,03, 0 })
	aAdd(aDBF,{ "TRB_RESULT"   , "N" ,03, 0 })

	oTempTRBA := FWTemporaryTable():New( cTRBA, aDBF )
	oTempTRBA:AddIndex( "1", {"TRB_CODAVA","TRB_CODIGO"} )
	oTempTRBA:Create()

	Aadd(aTitles,OemToAnsi(STR0007))  //"Aspecto x Localizacao"
	Aadd(aPages,"Header 2")
	nControl++

	Aadd(aTitles,OemToAnsi(STR0008))  //"Aspecto x Avaliacao"
	Aadd(aPages,"Header 3")
	nControl++

	Aadd(aTitles,OemToAnsi("Aspecto x Requisitos"))
	Aadd(aPages,"Header 4")
	nControl++

	Define MsDialog oDlg From aSize[7],nLeft to aSize[6],aSize[5] Title cTitulo Pixel

	oPnlScr := TPanel():New(0, 0, Nil, oDlg, Nil, .T., .F., Nil, Nil, 0, 0, .T., .F. )
	oPnlScr:Align := CONTROL_ALIGN_ALLCLIENT

	oPnlTop := TPanel():New(0, 0, Nil, oPnlScr, Nil, .T., .F., Nil, Nil, 0, 75, .T., .F. )
	oPnlTop:Align := CONTROL_ALIGN_TOP

	oPanel2 := TPanel():New(0, 0, Nil, oPnlScr, Nil, .T., .F., Nil, Nil, 0, 0, .T., .F. )
	oPanel2:Align := CONTROL_ALIGN_ALLCLIENT

	oFolder := TFolder():New(1,0,aTITLES,aPAGES,oPanel2,,,,.F.,.F.,320,200,)
	oFolder:Align := CONTROL_ALIGN_ALLCLIENT
	oFolder:aDialogs[1]:oFont := oDlg:oFont
	oFolder:aDialogs[2]:oFont := oDlg:oFont
	oFolder:aDialogs[3]:oFont := oDlg:oFont

	aTela := {}
	aGets := {}

	//Esta verificação é feita para o uso do TNGPG
	If Type("Inclui") <> "L" .Or. Type("Altera") <> "L"
		If nOpcx == 3
			SetInclui()
		ElseIf nOpcx == 4
			SetAltera()
		Else
			Inclui := .F.
			Altera := .F.
		EndIf
	EndIf

	Dbselectarea("TA4")
	RegToMemory("TA4",(nOpcx == 3))

	oEnc01:= MsMGet():New("TA4",nRecno,nOpcx,,,,,,,,,,,oPnlTop,,,,"aSvATela")
	oEnc01:oBox:Align := CONTROL_ALIGN_ALLCLIENT
	oEnc01:oBox:bGotFocus := {|| NgEntraEnc("TA4")}

	aSvATela := aClone(aTela)
	aSvAGets := aClone(aGets)

	// Markbrowse
	If nOpcx == 5
		Sg030GraTrb(nOpcx)
	EndIf

	// Folder 01

	//Carrega todos niveis selecionados
	If !Inclui
		dbSelectArea('TAG')
		dbSetOrder(1)
		If dbSeek(xFilial('TAG') + M->TA4_CODASP + "001")
			While !Eof() .And. xFilial("TAG") + M->TA4_CODASP == TAG->TAG_FILIAl + TAG->TAG_CODASP
				If aScan(aLocal,{|x| Trim(Upper(x[1])) == TAG->TAG_CODNIV}) == 0
					aAdd(aLocal, {TAG->TAG_CODNIV, .T.} )
				EndIf
				dbSelectArea("TAG")
				dbSkip()
			End
		EndIf
	EndIf

	For nNivel := 1 To Len(aLocAsp)
		If aScan( aLocal, { |x| Trim( Upper( x[1] ) ) == aLocAsp[nNivel] } ) == 0
			aAdd( aLocal, { aLocAsp[nNivel], .T. } )
		EndIf
	Next nNivel

	aMarcado := aClone(aLocal)

	oTree := DbTree():New(005, 022, 150, 302, oFolder:aDialogs[1],,, .T.)
	oTree:Align    := CONTROL_ALIGN_ALLCLIENT

	SG110CTREE(1, aMarcado)

	If Str(nOpcx,1) $ "2/5" .Or. !Empty( aLocAsp )
		oTree:bChange    := {|| SG110CTREE(2) }
		oTree:blDblClick := {|| }
		lGetd := .F.
	Else
		oTree:bChange	  := {|| SG110CTREE(2) }
		oTree:blDblClick := {|| Sg030ChangeBmp() }
	EndIf

	oPnlBEst := TPanel():New(900,900,,oFolder:aDialogs[1],,,,,RGB(67,70,87),200,200,.F.,.F.)
	oPnlBEst:Align := CONTROL_ALIGN_TOP
	oPnlBEst:nHeight := 25

	cBEst := STR0009 //"Escolha a area clicando duas vezes sobre a pasta"
	@ 002,015 SAY oBEst VAR cBEst SIZE 200, 20 Font oFontB Color RGB(255,255,255) OF oPnlBEst PIXEL

	// Folder 02

	oSplitter2 := tSplitter():New( 0,0,oFolder:aDialogs[2],100,100,1 )
	oSplitter2:Align := CONTROL_ALIGN_ALLCLIENT

	oPanel3 := TPanel():New(01,01,,oSplitter2,,,,,,10,10,.F.,.F.)
	oPanel3:Align := CONTROL_ALIGN_ALLCLIENT

	oPanel4 := TPanel():New(01,01,,oSplitter2,,,,,,10,10,.F.,.F.)
	oPanel4:Align := CONTROL_ALIGN_ALLCLIENT

	oPnlTAva := TPanel():New(900,900,,oPanel3,,,,,RGB(67,70,87),200,200,.F.,.F.)
	oPnlTAva:Align := CONTROL_ALIGN_TOP
	oPnlTAva:nHeight := 25

	cTAva := STR0010 //"Avaliacoes"
	@ 002,015 SAY oTAva VAR cTAva SIZE 200, 20 Font oFontB Color RGB(255,255,255) OF oPnlTAva PIXEL

	oPnlTObs := TPanel():New(900,900,,oPanel4,,,,,RGB(67,70,87),200,200,.F.,.F.)
	oPnlTObs:Align := CONTROL_ALIGN_TOP
	oPnlTObs:nHeight := 25

	cTObs := STR0015 //"Avaliacoes"
	@ 002,015 SAY oTObs VAR cTObs SIZE 200, 20 Font oFontB Color RGB(255,255,255) OF oPnlTObs PIXEL

	@ 25,008 ListBox oGet Fields aCols1[n][1],aCols1[n][2] Headers STR0011,STR0012 Of oPanel3 Size ;
		316,63 Pixel On Change ( Sg030LinOk(n,nOpcx) ) //"Avaliacao"###"Descricao"###"Peso"###"Resultado"

		oGet:bGotop    := { || n := 1 }
		oGet:bGoBottom := { || n := eval( oGet:bLogicLen ) }

		oGet:bSkip     := { | nwant, nold | nold := n , n += nwant,;
		n := max( 1, min( n, eval( oGet:bLogicLen ))),;
		n - nOld }

		oGet:bLogicLen := { || Len(aCols1) }
		oGet:cAlias    := "Array"
		oGet:Align := CONTROL_ALIGN_ALLCLIENT

		Sg030Mark(,,nOpcx,.T.)

	oMark := MsSelect():New(cTRBX,"TRB_OK",,aMark,@lInverte,@cMarca,{110,8,173,324},,,oPanel4)
	oMark:oBrowse:lHasMark    := .T.
	oMark:oBrowse:lCanAllMark := .T.
	oMark:oBrowse:Align       := CONTROL_ALIGN_ALLCLIENT
	oMark:bMark               := { || Sg030ValMark(cMarca,oGet) }
	oMark:oBrowse:bAllMark    := {|| SGA30MARKT(cMarca) }

	If Str(nOpcx,1) $ "2/5"
	oMark:oBrowse:lReadOnly := .T.
	EndIf
	aSvCols := aClone(aCols1)

	// Folder 03
	aAdd(aNoFields, 'TAJ_CODASP')
	cQuery := "SELECT * FROM "+RetSqlName("TAJ")+" TAJ WHERE TAJ.TAJ_FILIAL = '"+xFilial("TAJ")+"' AND TAJ.TAJ_CODASP = '"+M->TA4_CODASP+"' AND TAJ.D_E_L_E_T_ = ' '"
	FillGetDados( nOpcx, "TAJ", 1, xFilial("TAJ")+M->TA4_CODASP, {|| "TAJ->TAJ_FILIAL + TAJ->TAJ_CODASP"}, {|| .T.},aNoFields,,,cQuery,,,aHeaderAI,aColsAI)

	If Empty(aColsAI) .Or. nOpcx == 3
	aColsAI := BlankGetd(aHeaderAI)
	EndIf

	oGet01 := MsNewGetDados():New(005, 022, 150, 302,IIf(!INCLUI.And.!ALTERA,0,GD_INSERT+GD_UPDATE+GD_DELETE),cLinhaOk,cTudoOk,,,,9999,,,,oFolder:aDialogs[3],aHeaderAI,aColsAI )
	oGet01:oBrowse:bGotFocus := {|| x:=n,n := 1,oGet01:oBrowse:Refresh()}
	oGet01:oBrowse:bLostFocus := {|| n:= x}
	oGet01:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	oGet01:oBrowse:Default()
	oGet01:oBrowse:Refresh()

	NGPOPUP(aSMenu,@oMenu,oPanel2)
	oPanel2:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oPanel2)}
	Activate MsDialog oDlg On Init (EnchoiceBar(oDlg,{|| lOk:=.T.,IIf((aGrava030 := Sg030Obrig(nOpcx,lLocTemp))[1],oDlg:End(),lOk := .F.)},{|| lOk:= .F.,oDlg:End()}))

	//Deleta o arquivo temporario fisicamente
	oTempTRB:Delete()
	oTempTRBA:Delete()
	oTempTRBX:Delete()
	If lOk
		aRet030 := aClone(aGrava030[2])
	EndIf

Return { lOk, aClone(aRet030) }

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030ChangeBmp
Programa para cadastrar Aspectos/Local/Avaliacao Padrão

@type    function
@author  Thiago Olis Machado
@since   27/11/2003
@sample  Sg030ChangeBmp()

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg030ChangeBmp()

	Local aAreaTAB := {}
	Local aClrNiv := { "Folder10", "Folder11" }

	If oTree:isEmpty()
		Return .F.
	EndIf

	dbSelectArea(oTree:cArqTree)

	If SubStr( oTree:getCargo(), 7, 1 ) = "2"
		If Type("M->TA4_CODASP") != "U"
			dbSelectArea("TAB")
			dbSetOrder(4)
			dbSeek(xFilial("TAB")+M->TA4_CODASP)
			While !Eof() .And. TAB->TAB_FILIAL == xFilial("TAB") .And. TAB->TAB_CODASP == M->TA4_CODASP
				If TAB->TAB_CODNIV == SubStr(oTree:GetCargo(),1,3)
					MsgStop("Este item não pode ser desmarcado pois está relacionado ao Desempenho: "+AllTrim(TAB->TAB_ORDEM),"Atenção")
					Return .F.
				EndIf

				dbSelectArea("TAB")
				dbSetOrder(4)
				dbSkip()
			EndDo
		EndIf

		If !Sg100NvAtv( Substr( oTree:GetCargo(), 1, 3 ), cCodest )
			aClrNiv := {"cadeado","cadeado"}
		EndIf

		oTree:ChangeBmp(aClrNiv[1],aClrNiv[2])

		(oTree:cArqTree)->T_CARGO := SubStr(oTree:getCargo(),1,6)+"1"
		nPos := aScan(aLocal, {|x| x[1] == SubStr( oTree:GetCargo(), 1, 3 )})
		If nPos > 0
			aLocal[nPos][2] := .F.
		Else
				aAdd( aLocal,{ SubStr( oTree:GetCargo(), 1, 3 ),.F. } )
		EndIf
	Else
		oTree:ChangeBmp('Folder7','Folder8')
			(oTree:cArqTree)->T_CARGO := SubStr(oTree:getCargo(),1,6)+"2"
		nPos := aScan(aLocal, {|x| x[1] == SubStr( oTree:GetCargo(), 1, 3 )})

		If nPos > 0
			aLocal[nPos][2] := .T.
		Else
			aAdd( aLocal,{ SubStr( oTree:GetCargo(), 1, 3 ),.T. } )
		EndIf
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030Get
Monta array acols e aHeader para mostrar no GetDados.

@type    function
@author  Thiago Olis Machado
@since   27/11/2003
@sample  Sg030Get( 3, .T. )

@param   nOpcx, Numérico, Operação a ser efetuada
@param   lImpact, Lógico,

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg030Get( nOpcx, lImpact )

	Local nCnt  := 0
	Local nPeso := 0
	Local nImpacts := 0

	Default lImpact := .F.

	DbSelectArea('TA6')
	DbSetOrder(1)
	DbSeek(xFilial('TA6'))
	While TA6->(!Eof()) .And. xFilial('TA6') == TA6->TA6_FILIAL

		If lImpact .And. TA6->TA6_TIPO == "2"
			nImpacts++
		EndIf

		If TA6->TA6_TIPO <> '1'
			Dbskip()
			Loop
		EndIf

		If nOpcx <> 3
			DbSelectArea('TA9')
			DbSetOrder(1)
			If DbSeek(xFilial('TA9')+M->TA4_CODASP+TA6->TA6_CODAVA)
				nPeso := TA9->TA9_RESULT
			EndIf
		EndIf
		nCnt++

		// Não bloqueia caso o peso for igual a 0
		If TA6->TA6_TIPO == '1'  .And. TA6->TA6_PESO == 0 // Somente Critério de Aspectos para caracterização
			aAdd( aCols1,{TA6->TA6_CODAVA,TA6->TA6_DESCRI} )
		EndIf

		DbSelectArea('TA6')
		DbSkip()
	EndDo

	If nCnt == 0 .Or. (lImpact .And. nImpacts == 0)
		Help(" ",1,"ATENÇÃO",,STR0020,3,1)   //"Não é possível realizar avaliação sem critérios cadastrados."
		Return .F.
	EndIf

	If Len(aCols1) == 0
		aAdd(aCols1,{'',''})
	Else
		cAval := aCols1[1,1]
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030Mark
Monta um MarkBrowse com as respostas das avaliações.

@type    function
@author  Thiago Olis Machado
@since   27/11/2003
@sample  Sg030Mark( {}, '001', 5, .T. )

@param   aCodigo, Array,
@param   cCodAva, Caractere, Código da avaliação
@param   nOpc, Numérico, Operação a ser efetuada
@param   lPrim, Lógico, Verdadeiro se for a primeira vez que chama a
função

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg030Mark( aCodigo, cCodAva, nOpc, lPrim )

	Local oDlgMar
	Local nOpcx := 2
	Local cCheck := ''

	//Exclui os registros caso a TRB já exista
	If Select( cTRBX ) <> 0
		dbSelectArea(cTRBX)
		ZAP
	Else
		aDbf := {}
		aAdd(aDbf,{ "TRB_OK"       , "C" ,02, 0 })
		aAdd(aDBF,{ "TRB_CODAVA"   , "C" ,03, 0 })
		aAdd(aDBF,{ "TRB_CODIGO"   , "C" ,03, 0 })
		aAdd(aDBF,{ "TRB_DESCRI"   , "C" ,40, 0 })
		aAdd(aDBF,{ "TRB_PESO"     , "N" ,03, 0 })

		oTempTRBX := FWTemporaryTable():New( cTRBX, aDBF )
		oTempTRBX:AddIndex( "1", {"TRB_CODIGO","TRB_CODAVA"} )
		oTempTRBX:Create()

		aAdd(aMark,{"TRB_OK"       ,NIL," ",})
		aAdd(aMark,{"TRB_CODIGO"   ,NIL,STR0016 ,})    //"Codigo"
		aAdd(aMark,{"TRB_DESCRI"   ,NIL,STR0017 ,})    //"Respostas"
	EndIf

	DbSelectArea('TA7')
	DbSetOrder(1)
	DbSeek(xFilial('TA7')+cAval)
	Do While !Eof() .And. xFilial('TA7') == TA7->TA7_FILIAL .And. TA7->TA7_CODAVA == cAval

		cCheck := ''

		dbSelectArea(cTRBA)
		dbSetOrder(1)
		If dbSeek( cAval )
			If dbSeek(cAval+TA7->TA7_CODOPC)
				cCheck := cMarca
			Else
				cCheck := ''
			EndIf
			RecLock(cTRBX,.T.)
				(cTRBX)->TRB_OK      := cCheck
				(cTRBX)->TRB_CODAVA  := TA7->TA7_CODAVA
				(cTRBX)->TRB_CODIGO  := TA7->TA7_CODOPC
				(cTRBX)->TRB_DESCRI  := TA7->TA7_OPCAO
			MsUnLock(cTRBX)
			DbSelectArea('TA7')
			DbSkip()
			Loop
		EndIf

		DbSelectArea(cTRBX)
		DbSetOrder(1)
		If !DbSeek( TA7->TA7_CODOPC )
			If aCodigo <> Nil
				nPOS := Ascan(aCodigo,{|x| x[1] == TA7->TA7_CODOPC})
				If nPos > 0 .And. cCodAva == TA7->TA7_CODAVA
					cCheck := cMarca
				Else
					cCheck := ''
				EndIf
			Else
				cCheck := ''
			EndIf
			RecLock(cTRBX,.T.)
			(cTRBX)->TRB_OK      := cCheck
			(cTRBX)->TRB_CODAVA  := TA7->TA7_CODAVA
			(cTRBX)->TRB_CODIGO  := TA7->TA7_CODOPC
			(cTRBX)->TRB_DESCRI  := TA7->TA7_OPCAO
			MsUnLock(cTRBX)
		EndIf

		DbSelectArea('TA7')
		DbSkip()
	EndDo

	If nOpc <> 3 .And. lPrim <> Nil
		DbSelectArea('TA9')
		DbSetOrder(1)
		DbSeek(xFilial('TA9')+M->TA4_CODASP)
		Do While !Eof() .And. TA9->TA9_FILIAL == xFilial('TA9') .And. TA9->TA9_CODASP == M->TA4_CODASP

			DbSelectArea(cTRBX)
			DbSetOrder(1)
			If DbSeek(TA9->TA9_CODOPC+TA9->TA9_CODAVA)
				RecLock(cTRBX,.F.)
				(cTRBX)->TRB_OK := cMarca
				MsUnLock(cTRBX)
			EndIf
			DbSelectArea('TA9')
			DbSkip()

		EndDo
	EndIf

	(cTRBX)->(DbGoTop())
	//EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030LinOk
Monta o MarkBrowse de acordo com a selecao do getdados.

@type    function
@author  Thiago Olis Machado
@since   27/11/2003
@sample  Sg030LinOk( 1 ,5 )

@param   x, Numérico, Linha atual
@param   nOpcx, Numérico, Operação a ser efetuada

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg030LinOk( x ,nOpcx )

	Local aCodigo := {}

	Sg030GraTrb(nOpcx)
	cAval:= aCols1[x][1]
	If nOpcx == 3
		DbSelectArea(cTRBA)
		DbSetOrder(1)
		DbSeek( cAval )
		While !Eof() .And. (cTRBA)->TRB_CODAVA == cAval
			Aadd(aCodigo,{(cTRBA)->TRB_CODIGO})
			dbSkip()
		End
	Else
		DbSelectArea(cTRBA)
		DbSetOrder(1)
		If DbSeek( cAval )
			While !Eof() .And. (cTRBA)->TRB_CODAVA == cAval
				Aadd(aCodigo,{(cTRBA)->TRB_CODIGO})
				dbSkip()
			End
		Else
			DbSelectArea('TA9')
			DbSetOrder(1)
			If DbSeek(xFilial('TA9')+M->TA4_CODASP+cAval)
				While !Eof() .And. TA9->TA9_FILIAL == xFilial("TA9") .And. TA9->TA9_CODASP == M->TA4_CODASP .And.;
					TA9->TA9_CODAVA == cAval

					Aadd(aCodigo,{TA9->TA9_CODOPC})
					dbSkip()
				End
			EndIf
		EndIf
	EndIf

	Sg030Mark(aCodigo,cAval)
	oMark:oBrowse:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030ValMark
Atualiza o total do resultado de acordo com a opção escolhida

@type    function
@author  Thiago Olis Machado
@since   27/11/2003
@sample  Sg030ValMark( 'L5', oGet )

@param   cMarca, Caractere, Código da marcação
@param   oGet, Objeto, Objeto que contém a lista de marcação

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg030ValMark( cMarca, oGet )

	Local cFieldMarca := "TRB_OK"

	IsMark(cFieldMarca,cMarca,lInverte)
	nRecno := Recno()

	Sg030GraTrb()

	dbGoTo(nRecno)
	oGet:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030GraTrb
Grava TRB com as informacoes do MarkBrowse.

@type    function
@author  Thiago Olis Machado
@since   27/11/2003
@sample  Sg030GraTrb ( 3 )
@param   nOpcx, Numérico, Operação a ser efetuada

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg030GraTrb( nOpcx )

	If nOpcx <> 5 .And. nOpcx <> 3
		DbSelectArea(cTRBX)
		DbGotop()
		Do While !Eof()
			If !Empty( (cTRBX)->TRB_OK )
				DbSelectArea(cTRBA)
				DbSetOrder(1)

				If !DbSeek( (cTRBX)->TRB_CODAVA + (cTRBX)->TRB_CODIGO )
					RecLock(cTRBA,.T.)
					(cTRBA)->TRB_CODAVA := (cTRBX)->TRB_CODAVA
					(cTRBA)->TRB_CODIGO := (cTRBX)->TRB_CODIGO
						MsUnLock(cTRBA)
				EndIf
			Else
				DbSelectArea(cTRBA)
				DbSetOrder(1)
				If DbSeek( (cTRBX)->TRB_CODAVA + (cTRBX)->TRB_CODIGO )
					RecLock(cTRBA,.F.)
					dbDelete()
					MsUnLock(cTRBA)
				EndIf
			EndIf
			DbSelectArea(cTRBX)
			DbSkip()
		EndDo
	Else
		DbSelectArea('TA9')
		DbSetOrder(1)
		DbSeek(xFilial('TA9')+M->TA4_CODASP)
		Do While !Eof() .And. TA9->TA9_CODASP == M->TA4_CODASP

			DbSelectArea(cTRBA)
			DbSetOrder(1)
			If !DbSeek( TA9->TA9_CODAVA + TA9->TA9_CODOPC )
				RecLock(cTRBA,.T.)
				(cTRBA)->TRB_CODAVA := TA9->TA9_CODAVA
				(cTRBA)->TRB_CODIGO := TA9->TA9_CODAVA
				MsUnLock(cTRBA)
			EndIf
			DbSelectArea('TA9')
			DbSkip()

		EndDo

	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030Obrig
Faz validação antes de gravar

@type    function
@author  Thiago Olis Machado
@since   01/12/2003
@sample  Sg030Obrig( 3, .T. )

@param   nOpcx, Numérico, Operação selecionada
@param   lLocTemp, Lógico, Indica se utiliza localização temporária

@return  Array, Primeira posição contém um valor lógico, sempre
verdadeiro, segunda posição contém um array com as informações do
registro a ser gravado
/*/
//-------------------------------------------------------------------
Function Sg030Obrig( nOpcx, lLocTemp )

	Local aOldArea := GetArea() // Guarda variaveis de alias e indice
	Local i,x:= 0
	Local aRetGrava := {}

	If !Obrigatorio(aGets,aTela)
		Return {.F., {}}
	EndIf

	If SGA030All() == .F.
		Return {.F., {}}
	EndIf

	If nOpcx == 3 .Or. nOpcx == 4
		If Len( aLocal ) == 0
			Help(" ",1,STR0022,,STR0023,3,1) //"ATENÇÃO"###"A seleção de pelo menos uma localização é obrigatória."
			Return {.F., {}}
		Else
			For i:= 1 To Len( aLocal )
				If aLocal[i][2]
					x++
				EndIf
			Next
		EndIf
		If x == 0
			Help(" ",1,STR0022,,STR0023,3,1) //"ATENÇÃO"###"A seleção de pelo menos uma localização é obrigatória."
			Return {.F., {}}
		EndIf
	ElseIf nOpcx == 5
		If !NGVALSX9("TA4",{"TA9","TAG","TAJ"},.T.)
			Return {.F., {}}
		EndIf
	EndIf

	aRetGrava := aClone(Sg030Grava(nOpcx,lLocTemp))
	RestArea(aOldArea)

Return {.T., aClone(aRetGrava)}

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030Grava
Grava as informações

@type    function
@author  Thiago Olis Machado
@since   01/12/2003
@sample  Sg030Grava( 3, .T.)

@param   nOpcx, Numérico, Operação selecionada
@param   lLocTemp, Lógico, Indica se utiliza localização temporária

@return  Array, Contém os códigos dos locais
/*/
//-------------------------------------------------------------------
Function Sg030Grava( nOpcx, lLocTemp )

	Local i
	Local j
	Local lDelete    := .F.
	Local nQtd       := 0
	Local lSgaSequen := NGCADICBASE("TAG_SEQUEN","A","TAG",.F.)

	//Valida arquivos relacionados na exclusao
	If nOpcx == 5
		aArea := GetArea()
		lDEL := .T.
		For i := 1 to Len(aCHKDEL)
			DbSelectArea(aCHKDEL[i][2])
			OldInd := INDEXORD()
			DbSetOrder(aCHKDEL[i][3])
			cKEY := aCHKDEL[i][1]
			lDEL := !( DbSeek(xFilial() + &cKEY.) )
			DbSetOrder(OldInd)
			If !lDEL
				cError := AllTrim( FwX2Nome(aCHKDEL[i][2]) ) + " (" + aCHKDEL[i][2] + ")"
				HELP(" ",1,"MA10SC",,cError,5,1)
				RestArea(aArea)
				Return
			EndIf
		Next
		RestArea(aArea)
	EndIf

	//Manipula a tabela TA4
	DbSelectArea('TA4')
	DbSetOrder(1)
	If DbSeek(xFilial('TA4')+M->TA4_CODASP)
		RecLock('TA4',.F.)
	Else
		RecLock('TA4',.T.)
	EndIf

	If nOpcx <> 5
		TA4->TA4_FILIAL := xFilial('TA4')
		TA4->TA4_CODASP := M->TA4_CODASP
		TA4->TA4_DESCRI := M->TA4_DESCRI
		TA4->TA4_MEIO   := M->TA4_MEIO
		TA4->TA4_ELEMEN := M->TA4_ELEMEN
		TA4->TA4_OBSERV := M->TA4_OBSERV
	Else
		DbDelete()
	EndIf

	MsUnLock('TA4')

	//Manipula a tabela TAG
	If !lLocTemp
		If nOpcx == 5
			TAG->(DbSetOrder(1))
			If TAG->(DbSeek(xFilial('TAG')+M->TA4_CODASP+'001'))
				While !TAG->(Eof()) .And. xFilial('TAG') == TAG->TAG_FILIAL .And.;
											TAG->TAG_CODASP == M->TA4_CODASP  .And.;
											TAG->TAG_CODEST == '001'
					RecLock('TAG',.F.)
					DbDelete()
					MsUnLock('TAG')
					TAG->(DbSkip())
				End
			EndIf
		Else
			For i := 1 To Len( aLocal )
				DbSelectArea(cTRBSGA)
				DbSetOrder(2)
				If DbSeek('001'+aLocal[i][1] )
					DbSelectArea('TAG')
					DbSetOrder(1)
					If !DbSeek(xFilial('TAG')+M->TA4_CODASP+'001'+aLocal[i][1])
						If aLocal[i][2]
							RecLock('TAG',.T.)
							TAG->TAG_FILIAL := xFilial('TAG')
							TAG->TAG_CODASP := M->TA4_CODASP
							TAG->TAG_CODEST := '001'
							TAG->TAG_CODNIV := aLocal[i][1]
							TAG->TAG_NIVSUP := (cTRBSGA)->NIVSUP
							If lSgaSequen
									TAG->TAG_SEQUEN := "001"
							EndIf
							MsUnLock('TAG')
						EndIf
					Else
						If !aLocal[i][2]
							While !Eof() .And. TAG->TAG_FILIAL+TAG->TAG_CODASP+TAG->TAG_CODEST+TAG->TAG_CODNIV == xFilial('TAG')+M->TA4_CODASP+'001'+aLocal[i][1]
								RecLock('TAG',.F.)
								DbDelete()
								MsUnLock('TAG')
								dbSkip()
							End
						EndIf
					EndIf
				EndIf
			Next
		EndIf
	EndIf

	//Manipula a tabela TA9
	DbSelectArea('TA9')
	DbSetOrder(1)
	DbGoTop()
	While !Eof() .And. TA9->TA9_FILIAL == xFilial('TA9') .And. TA9->TA9_CODASP == M->TA4_CODASP
		RecLock('TA9',.F.)
		DbDelete()
		MsUnLock('TA9')
		TA9->(dbSkip())
	End

	DbSelectArea(cTRBA)
	dbSetOrder(1)
	DbGoTop()
	Do While !Eof()
		DbSelectArea('TA9')
		DbSetOrder(1)
		If !DbSeek( xFilial('TA9') + M->TA4_CODASP + (cTRBA)->TRB_CODAVA + (cTRBA)->TRB_CODIGO)
			RecLock('TA9',.T.)
		Else
			RecLock('TA9',.F.)
		EndIf
		If nOpcx == 5
			DbDelete()
		Else
			TA9->TA9_FILIAL := xFilial('TA9')
			TA9->TA9_CODASP := M->TA4_CODASP
			TA9->TA9_CODAVA := (cTRBA)->TRB_CODAVA
			TA9->TA9_CODOPC := (cTRBA)->TRB_CODIGO
			TA9->TA9_PESO   := (cTRBA)->TRB_PESO
			TA9->TA9_RESULT := (cTRBA)->TRB_RESULT
		EndIf
		MsUnLock('TA9')

		DbSelectArea(cTRBA)
		DbSkip()
	EndDo

	//Manipula a tabela TAJ
	If nOpcx == 5
		TAJ->(DbSetOrder(1))
		If TAJ->(DbSeek(xFilial('TAJ')+M->TA4_CODASP))
			While !TAJ->(Eof()) .And. xFilial('TAJ') == TAJ->TAJ_FILIAL .And.;
										TAJ->TAJ_CODASP == M->TA4_CODASP
				RecLock('TAJ',.F.)
				DbDelete()
				MsUnLock('TAJ')
				TAJ->(DbSkip())
			End
		EndIf
	Else
		For j := 1 To Len( oGet01:aCols )
			If !Empty(oGet01:aCols[j][1])
				DbSelectArea('TAJ')
				DbSetOrder(1)
				If DbSeek( xFilial('TAJ')+M->TA4_CODASP + oGet01:aCols[j][1])
					RecLock('TAJ',.F.)
					lDelete := .T.
				Else
					RecLock('TAJ',.T.)
				EndIf
				If !oGet01:aCols[j][Len(oGet01:aCols[j])]
					TAJ->TAJ_FILIAL := xFilial('TAJ')
					TAJ->TAJ_CODASP := M->TA4_CODASP
					TAJ->TAJ_CODLEG := oGet01:aCols[j][1]
				Else
					If lDelete
						aEval(oGet01:aCols, {|x| IIf(x[1] == oGet01:aCols[j][1],nQtd++,Nil)})
						If nQtd <= 1
							DbDelete()
						EndIf
					EndIf
				EndIf
			EndIf
			MsUnLock('TAJ')
		Next
	EndIf

Return { aLocal }

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030Lin1
Valida a linha digitada no GetDados.

@type    function
@author  Thiago Olis Machado
@since   15/03/2004
@sample  Sg030Lin1()

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg030Lin1()

	Local nx
	Local nQtd := 0
	Local cCodLeg := ''
	Local nPos := 0

	nPos    := aScan( oGet01:aHeader, { |x| Trim( Upper(x[2]) ) == 'TAJ_CODLEG'})

	If Empty(oGet01:aCols[1][1])
		Return .T.
	EndIf

	cCodLeg := oGet01:aCols[n][nPos]

	For nx:=1 To Len(oGet01:aCols)
		If !oGet01:aCols[nx][Len(oGet01:aCols[nx])]
			If Empty(oGet01:aCols[nx][1])
				Help(" ",1,"OBRIGAT")
				Return .T.
			EndIf
		EndIf
	Next

	If nPos > 0
		aEval( oGet01:aCols, { |x| nQtd += IIf( ! x[Len(oGet01:aHeader)+1] .And. x[nPos] == cCodLeg, 1, 0 ) } )
	EndIf

	If nQtd > 1
		Help(" ",1,"ATENÇÃO",,STR0021,3,1) //"Campo Requisito Duplicado"
		Return .F.
	EndIf

	PutFileInEof("TAJ")

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg030Lin2
Valida se toda a GetDados esta OK.

@type    function
@author  Thiago Olis Machado
@since   15/03/2004
@sample  Sg030Lin2()

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg030Lin2()
Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.

@type    function
@author  Rafael Diogo Richter
@since   11/01/2007
@sample  MenuDef()

@Obs Parametros do array a Rotina:
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada
	3. Reservado
	4. Tipo de Transação a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
		2 - Simplesmente Mostra os Campos
		3 - Inclui registros no Bancos de Dados
		4 - Altera o registro corrente
		5 - Remove o registro corrente do Banco de Dados
	5. Nivel de acesso
	6. Habilita Menu Funcional

@return  aRotina, Array, Contém as opcoes da rotina.
/*/
//-------------------------------------------------------------------
Static Function MenuDef()

	Local aRotina := {	{ STR0001  , "AxPesqui"  , 0 , 1    },;  //"Pesquisar"
						{ STR0002  , "Sg030Pro"  , 0 , 2    },;  //"Visualizar"
						{ STR0003  , "Sg030Pro"  , 0 , 3    },;  //"Incluir"
						{ STR0004  , "Sg030Pro"  , 0 , 4    },;  //"Alterar"
						{ STR0005  , "Sg030Pro"  , 0 , 5, 3 } }  //"Excluir"

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} SGA030All
Valida se toda a GetDados esta OK.

@type    function
@author  Thiago Olis Machado
@since   15/03/2004
@sample  SGA030All()

@return  Lógico, Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function SGA030All()

	Local y, nQtd, cLeg

	If Len(oGet01:aCols ) > 1
		For y:=1 To Len(oGet01:aCols)
			If !oGet01:aCOLS[y][Len(oGet01:aCOLS[y])]
				If Empty(oGet01:aCOLS[y][1])
					Help(" ",1,"NGATENCAO",,"Campo obrigatório não informado."+Chr(13)+Chr(10)+" "+ "Informe o Código do Requisito.",3,1)
					Return .F.
				EndIf

				cLeg := oGet01:aCols[y][1]
				nQTD := 0

				aEVAL(oGet01:aCOLS,{|x|IIf(x[1] == cLeg .And. !x[Len(oGet01:aCols[y])],nQTD++,Nil)})
				If nQTD > 1 .And. !Empty(cLeg)
					Help(" ",1,"JAGRAVADO",,"Item"+" "+Alltrim(Str(y,3)),3,1)
					Return .F.
				EndIf
			EndIf
		Next
	EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} SGA030Em
Traz a descrição do Requisito.

@type    function
@author  Rafael Diogo Richter
@since   03/06/2009
@sample  SGA030Em()

@return  Carcatere, Se for inclusão retorna espaços em branco, se não
retorna o valor do campo TA0_EMENTA
/*/
//-------------------------------------------------------------------
Function SGA030Em()
Return IIf(!INCLUI,NGSEEK("TA0",TAJ->TAJ_CODLEG,1,"TA0_EMENTA"),Space(TAMSX3("TA0_EMENTA")[1]))

//-------------------------------------------------------------------------------------------------------
/* Function SGA30MARKT
Função para marcar todos checkbox

@type    function
@author  Juliani Schlickmann Damasceno
@since   13/11/2013
@sample  SGA30MARKT()

@return  Nil, Sempre Nulo
*/
//------------------------------------------------------------------------------------------------------
Function SGA30MARKT()

	Local aArea := GetArea()
	Local aAreaTRBX := (cTRBX)->(GetArea())

	Dbselectarea(cTRBX)
	Dbgotop()
	While !eof()
		Reclock(cTRBX, .F.)
		(cTRBX)->TRB_OK := IIf(Empty((cTRBX)->TRB_OK),cMarca,Space(2))
		MsUnLock(cTRBX)
		Dbskip()
	End

	RestArea(aAreaTRBX)
	RestArea(aArea)

Return Nil

