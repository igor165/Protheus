#INCLUDE "MDTA185.ch"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

#DEFINE _nVersao 3

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA185
Programa de Cadastro de Exames por Risco. Para cada risco definido o
usuario pordera relacionar os exames medicos nescessario para 
acompanhar o agravo a saude dos funcionarios expostos.

@return
@Param lFontPS - Indica se esta sendo aberto pelo fonte correto no PS.

@sample MDTA185()

@author Marcio Costa - Refeito por: Jean Pytter da Costa
@since 19/12/99 - Revisão: 25/08/15
/*/
//---------------------------------------------------------------------
Function MDTA185( lFontPS )
		
	// Armazena as variáveis
	Local aNGBEGINPRM := NGBEGINPRM( _nVersao )
	
	Local oBrowse
	
	Private lSigaMdtPS := If( SuperGetMv("MV_MDTPS",.F.,"N") == "S", .t. , .f. )
	Private aRotina := MenuDef()
	
	Default lFontPS := IsInCallStack( "MDTA185PS" )	
		
	//Caso houver algum inconsistencia será retornado as variaveis.
	If !fValExeRot( lFontPS )
		oBrowse := FWMBrowse():New()
					
			oBrowse:SetAlias( "TN2" )			// Alias da tabela utilizada
			oBrowse:SetMenuDef( "MDTA185" )	// Nome do fonte onde esta a função MenuDef
			oBrowse:SetDescription( STR0006 ) // Descrição do browse ###"Exames por Risco"
			If lSigaMdtPS

				nSizeSA1 := If((TAMSX3("A1_COD")[1]) < 1,6,(TAMSX3("A1_COD")[1]))
				nSizeLo1 := If((TAMSX3("A1_LOJA")[1]) < 1,2,(TAMSX3("A1_LOJA")[1]))

				cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA

				oBrowse:SetFilterDefault( "TN2->(TN2_CLIENT+TN2_LOJA) == cCliMdtPs" )
			EndIf
		oBrowse:Activate()
	EndIf
	// Devolve as variáveis armazenadas
	NGRETURNPRM(aNGBEGINPRM)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Definição do Menu (padrão MVC).

@author Jean Pytter da Costa
@since 25/08/15

@return aRotina array com o Menu MVC
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

Local aRotina := {}

	ADD OPTION aRotina Title STR0001 Action "AxPesqui"			OPERATION 1 ACCESS 0 
	ADD OPTION aRotina Title STR0002 Action "VIEWDEF.MDTA185"	OPERATION 2 ACCESS 0 //"Visualizar"
	ADD OPTION aRotina Title STR0003 Action "VIEWDEF.MDTA185"	OPERATION 3 ACCESS 0 //"Incluir"
	ADD OPTION aRotina Title STR0004 Action "VIEWDEF.MDTA185"	OPERATION 4 ACCESS 0 //"Alterar"
	ADD OPTION aRotina Title STR0005 Action "VIEWDEF.MDTA185"	OPERATION 5 ACCESS 0 //"Excluir"

Return aRotina
//---------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Definição do Modelo (padrão MVC).

@author Jean Pytter da Costa
@since 25/08/15

@return oModel objeto do Modelo MVC
/*/
//---------------------------------------------------------------------
Static Function ModelDef()
    
    // Cria a estrutura a ser usada no Modelo de Dados
	Local oStructTN2 := FWFormStruct( 1 ,"TN2" , /*bAvalCampo*/ , /*lViewUsado*/ )
	
	// Modelo de dados que será construído
	Local oModel
	
	// Cria o objeto do Modelo de Dados
	// cID     Identificador do modelo 
	// bPre    Code-Block de pre-edição do formulário de edição. Indica se a edição esta liberada
	// bPost   Code-Block de validação do formulário de edição
	// bCommit Code-Block de persistência do formulário de edição
	// bCancel Code-Block de cancelamento do formulário de edição
	oModel := MPFormModel():New( "MDTA185" , /*bPre*/ , { | oModel | fMPosValid( oModel ) } /*bPos*/ , /*bCommit*/ , /*bCancel*/ )
		//--------------------------------------------------
		// Componentes do Modelo
		//--------------------------------------------------

		// Adiciona ao modelo um componente de Formulário Principal
		// cId          Identificador do modelo
		// cOwner       Identificador superior do modelo
		// oModelStruct Objeto com  a estrutura de dados
		// bPre         Code-Block de pré-edição do formulário de edição. Indica se a edição esta liberada
		// bPost        Code-Block de validação do formulário de edição
		// bLoad        Code-Block de carga dos dados do formulário de edição
		oModel:AddFields( "TN2MASTER" , Nil , oStructTN2 , /*bPre*/ , /*bPost*/ , /*bLoad*/ )
			// Adiciona a descrição do Modelo de Dados (Geral)
			oModel:SetDescription( STR0006 /*cDescricao*/ ) //"Exames por Risco"
			// Adiciona a descricao do Componente do Modelo de Dados
			oModel:GetModel( "TN2MASTER" ):SetDescription( STR0006 ) //"Exames por Risco"
			
Return oModel

//---------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Definição da View (padrão MVC).

@author Jean Pytter da Costa
@since 25/08/15

@return oView objeto da View MVC
/*/
//---------------------------------------------------------------------
Static Function ViewDef()
	
	// Cria um objeto de Modelo de dados baseado no ModelDef() do fonte informado
	Local oModel := FWLoadModel( "MDTA185" )
	
	// Cria a estrutura a ser usada na View
	Local oStructTN2 := FWFormStruct( 2 , "TN2" , /*bAvalCampo*/ , /*lViewUsado*/ )
	
	// Interface de visualização construída
	Local oView
	
	// Cria o objeto de View
	oView := FWFormView():New()
		// Objeto do model a se associar a view.
		oView:SetModel( oModel )
		// Adiciona no View um controle do tipo formulário (antiga Enchoice)
		// cFormModelID - Representa o ID criado no Model que essa FormField irá representar
		// oStruct - Objeto do model a se associar a view.
		// cLinkID - Representa o ID criado no Model ,Só é necessári o caso estamos mundando o ID no View.
		oView:AddField( "VIEW_TN2" , oStructTN2 , "TN2MASTER" )
			//Adiciona um titulo para o formulário
			oView:EnableTitleView( "VIEW_TN2" , STR0006 )	// Descrição do browse ###"Exames por Risco"
			// Cria os componentes "box" horizontais para receberem elementos da View
			// cID		  	Id do Box a ser utilizado 
			// nPercHeight  Valor da Altura do box( caso o lFixPixel seja .T. é a qtd de pixel exato)
			// cIdOwner 	Id do Box Vertical pai. Podemos fazer diversas criações uma dentro da outra.
			// lFixPixel	Determina que o valor passado no nPercHeight é na verdade a qtd de pixel a ser usada.
			// cIDFolder	Id da folder onde queremos criar o o box se passado esse valor, é necessário informar o cIDSheet
			// cIDSheet     Id da Sheet(Folha de dados) onde queremos criar o o box.
			oView:CreateHorizontalBox( "TELATN2" , 100,/*cIDOwner*/,/*lFixPixel*/,/*cIDFolder*/,/*cIDSheet*/ )
		// Associa um View a um box
		oView:SetOwnerView( "VIEW_TN2" , "TELATN2" )

Return oView

//---------------------------------------------------------------------
/*/{Protheus.doc} fMPosValid
Pós-validação do modelo de dados.

@author Jean Pytter da Costa
@since 25/08/15

@param oModel - Objeto do modelo de dados (Obrigatório)

@return Lígico - Retorna verdadeiro caso validacoes estejam corretas
/*/
//---------------------------------------------------------------------
Static Function fMPosValid( oModel )
    
	Local lRet			:= .T.
	
	Local aAreaTN2	:= TN2->( GetArea() )

	Local nOperation	:= oModel:GetOperation() // Operação de ação sobre o Modelo
	Local oModelTN2	:= oModel:GetModel( "TN2MASTER" )

	Private aCHKSQL 	:= {} // Variável para consistência na exclusão (via SX9)
	Private aCHKDEL 	:= {} // Variável para consistência na exclusão (via Cadastro)
	
	// Recebe SX9 - Formato:
	// 1 - Domínio (tabela)
	// 2 - Campo do Domínio
	// 3 - Contra-Domínio (tabela)
	// 4 - Campo do Contra-Domínio
	// 5 - Condição SQL
	// 6 - Comparação da Filial do Domínio
	// 7 - Comparação da Filial do Contra-Domínio
	aCHKSQL := NGRETSX9( "TN2" )
	
	If nOperation == MODEL_OPERATION_DELETE //Exclusão

		If !NGCHKDEL( "TN2" )
			lRet := .F.
		EndIf

		If lRet .And. !NGVALSX9( "TN2" , {} , .T. , .T. )
			lRet := .F.
		EndIf
			
	EndIf

	RestArea( aAreaTN2 )

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} fValExeRot
Valida execução da rotina MDTA095PS

@return lIncons Boolean Indica se há inconsistencia na execução.
@param lFontPS  Boolean Indica se foi feito a chamada pelo MDTA095PS

@sample fValExeRot(.T.)

@author Jean Pytter da Costa
@since 25/08/2015
/*/
//---------------------------------------------------------------------
Static Function fValExeRot( lFontPS )
	Local lIncons := .F.
	
	//Verifica se usuario de acesso tem permissão para a execução.
	If FindFunction("MDTRESTRI") .And. !MDTRESTRI(cPrograma)
		lIncons := .T.
	EndIf
	
	If !lIncons .And. lSigaMDTPS .And. !lFontPS
		ShowHelpDlg( 	"NOCALLPS" , ;
						{ STR0009 } , 1 , ; //"Função incorreta."
						{ STR0010 + ; //"Faz se necessário a alteração do Menu. A rotina 'Exames por Risco' deverá chamar o programa MDTA185PS."
							STR0011 } , 3 )//"Favor contate administrador de sistemas" 
		lIncons := .T.
	EndIf

Return lIncons

//---------------------------------------------------------------------
/*/{Protheus.doc} CODAGEN()
Busca o código do Agente para o campo Virtual.
 
@author Jean Pytter da Costa
@since 31/08/15

@return .T.
/*/
//--------------------------------------------------------------------- 
Function CODAGEN()

	Local cOLDALI   := ALIAS()
	
	M->TN2_AGENTE := ""
	
	DbselectArea("TN0")
	DbsetOrder(1)
	If Dbseek(xfilial("TN0")+M->TN2_NUMRIS)
		M->TN2_AGENTE := TN0->TN0_AGENTE
	Endif
	DbSelectArea(cOLDALI)

Return M->TN2_AGENTE
//---------------------------------------------------------------------
/*/{Protheus.doc} NOMEAGEN()
Busca o Nome do Agente para o campo Virtual.
 
@author Jean Pytter da Costa
@since 31/08/15

@return .T.
/*/
//--------------------------------------------------------------------- 
Function NOMEAGEN()
	
	Local cSrcVal := If( IsInCallStack( "MDTA180" ) , TN0->TN0_AGENTE , M->TN2_AGENTE )
	
	M->TN2_NOMAGE := ""
	
	DbselectArea("TMA")
	DbsetOrder(1)
	If Dbseek(xfilial("TMA") + cSrcVal )
		M->TN2_NOMAGE := TMA->TMA_NOMAGE
	Endif

Return M->TN2_NOMAGE
//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA185Val( nCpo )
Função de Validação da rotina MDTA185.

nCpo - 1 - TN2_EXAME

@param nCpo - Indica qual campo fará a Validação.
@author Guilherme Benkendorf
@since 12/05/2014
/*/
//---------------------------------------------------------------------
Function MDTA185Val( nCpo )
	Local lRet     := .T.
	Local lMDTA185 := IsInCallStack("MDTA185")
	Local cCodRisco:= ""
	
	If nCpo == 1 .And. !Empty( M->TN2_EXAME )//TN2_EXAME
		cCodRisco := 	If( lMDTA185, "TN2_NUMRIS", "TN0_NUMRIS" )
		lRet := EXISTCHAV( "TN2" ,M->( &cCodRisco ) + M->TN2_EXAME ).AND.EXISTCPO( "TM4" , M->TN2_EXAME )
	EndIf		

Return lRet
