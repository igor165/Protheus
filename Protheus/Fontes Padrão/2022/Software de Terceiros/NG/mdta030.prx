#INCLUDE "MDTA030.ch"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

#DEFINE _nVersao 2 //Versao do fonte

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA030
Programa de Cadastro das Faixas Etarias para Identificacao da Periodicidade dos Exames

@return

@sample MDTA030()

@author Marcio Costa - Refeito por: Jackson Machado
@since 04/01/00 - Revisão: 09/09/13
/*/
//---------------------------------------------------------------------
Function MDTA030()  
	
	// Armazena as variáveis
	Local aNGBEGINPRM := NGBEGINPRM( _nVersao )
	
	Local oBrowse
	
	oBrowse := FWMBrowse():New()
		oBrowse:SetAlias( "TMQ" )			// Alias da tabela utilizada
		oBrowse:SetMenuDef( "MDTA030" )	// Nome do fonte onde esta a função MenuDef
		oBrowse:SetDescription( STR0006 )	// Descrição do browse ###"Faixas Periódicas"
	oBrowse:Activate()
	
	// Devolve as variáveis armazenadas
	NGRETURNPRM(aNGBEGINPRM)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Definição do Menu (padrão MVC).

@author Jackson Machado
@since 05/09/13

@return aRotina array com o Menu MVC
/*/
//---------------------------------------------------------------------
Static Function MenuDef()
//Inicializa MenuDef com todas as opções
Return FWMVCMenu( "MDTA030" )
//---------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Definição do Modelo (padrão MVC).

@author Jackson Machado
@since 05/09/13

@return oModel objeto do Modelo MVC
/*/
//---------------------------------------------------------------------
Static Function ModelDef()
    
    // Cria a estrutura a ser usada no Modelo de Dados
	Local oStructTMQ := FWFormStruct( 1 ,"TMQ" , /*bAvalCampo*/ , /*lViewUsado*/ )
	
	// Modelo de dados que será construído
	Local oModel
	
	// Cria o objeto do Modelo de Dados
	// cID     Identificador do modelo 
	// bPre    Code-Block de pre-edição do formulário de edição. Indica se a edição esta liberada
	// bPost   Code-Block de validação do formulário de edição
	// bCommit Code-Block de persistência do formulário de edição
	// bCancel Code-Block de cancelamento do formulário de edição
	oModel := MPFormModel():New( "MDTA030" , /*bPre*/ , { | oModel | fMPosValid( oModel ) } /*bPost*/ , /*bCommit*/ , /*bCancel*/ )
		//--------------------------------------------------
		// Componentes do Modelo
		//--------------------------------------------------

		// Adiciona ao modelo um componente de Formulário Principal
		// cId          Identificador do modelo
		// cOwner       Identificador superior do modelo
		// oModelStruct Objeto com  a estrutura de dados
		// bPre         Code-Block de pré-edição do formulário de edição. Indica se a edição esta liberada
		// bPost        Code-Block de validação do formulário de edição
		// bLoad        Code-Block de carga dos dados do formulário de edição
		oModel:AddFields( "TMQMASTER" , Nil , oStructTMQ , /*bPre*/ , /*bPost*/ , /*bLoad*/ )
			// Adiciona a descrição do Modelo de Dados (Geral)
			oModel:SetDescription( STR0006 /*cDescricao*/ ) // "Faixas Periódicas"
			// Adiciona a descricao do Componente do Modelo de Dados
			oModel:GetModel( "TMQMASTER" ):SetDescription( STR0006 ) // "Faixas Periódicas"
			
Return oModel

//---------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Definição da View (padrão MVC).

@author Jackson Machado
@since 05/09/13

@return oView objeto da View MVC
/*/
//---------------------------------------------------------------------
Static Function ViewDef()
	
	// Cria um objeto de Modelo de dados baseado no ModelDef() do fonte informado
	Local oModel := FWLoadModel( "MDTA030" )
	
	// Cria a estrutura a ser usada na View
	Local oStructTMQ := FWFormStruct( 2 , "TMQ" , /*bAvalCampo*/ , /*lViewUsado*/ )
	
	// Interface de visualização construída
	Local oView
	
	// Cria o objeto de View
	oView := FWFormView():New()
		// Objeto do model a se associar a view.
		oView:SetModel( oModel )
		// Adiciona no View um controle do tipo formulário (antiga Enchoice)
		// cFormModelID - Representa o ID criado no Model que essa FormField irá representar
		// oStruct - Objeto do model a se associar a view.
		// cLinkID - Representa o ID criado no Model ,Só é necessári o caso estamos mundando o ID no View.
		oView:AddField( "VIEW_TMQ" , oStructTMQ , "TMQMASTER" )
			//Adiciona um titulo para o formulário
			oView:EnableTitleView( "VIEW_TMQ" , STR0006 )	// Descrição do browse ###"Faixas Periódicas"
			// Cria os componentes "box" horizontais para receberem elementos da View
			// cID		  	Id do Box a ser utilizado 
			// nPercHeight  Valor da Altura do box( caso o lFixPixel seja .T. é a qtd de pixel exato)
			// cIdOwner 	Id do Box Vertical pai. Podemos fazer diversas criações uma dentro da outra.
			// lFixPixel	Determina que o valor passado no nPercHeight é na verdade a qtd de pixel a ser usada.
			// cIDFolder	Id da folder onde queremos criar o o box se passado esse valor, é necessário informar o cIDSheet
			// cIDSheet     Id da Sheet(Folha de dados) onde queremos criar o o box.
			oView:CreateHorizontalBox( "TELATMQ" , 100,/*cIDOwner*/,/*lFixPixel*/,/*cIDFolder*/,/*cIDSheet*/ )
		// Associa um View a um box
		oView:SetOwnerView( "VIEW_TMQ" , "TELATMQ" )

Return oView

//---------------------------------------------------------------------
/*/{Protheus.doc} fMPosValid
Pós-validação do modelo de dados.

@author Jackson Machado
@since 05/09/13

@param oModel - Objeto do modelo de dados (Obrigatório)

@return Lígico - Retorna verdadeiro caso validacoes estejam corretas
/*/
//---------------------------------------------------------------------
Static Function fMPosValid( oModel )
    
	Local lRet			:= .T.
	
	Local aAreaTMQ		:= TMQ->( GetArea() )

	Local nOperation	:= oModel:GetOperation() // Operação de ação sobre o Modelo
	Local oModelTMQ	:= oModel:GetModel( "TMQMASTER" )

	Private aCHKSQL 	:= {} // Variável para consistência na exclusão (via SX9)
	Private aCHKDEL 	:= {} // Variável para consistência na exclusão (via Cadastro)

	// Recebe SX9 - Formato:
	// 1 - Domínio (tabela)
	// 2 - Campo do Domínio
	// 3 - Contra-Domínio (tabela)
	// 4 - Campo do Contra-Domínio
	// 5 - Condição SQL
	// 6 - Comparação da Filial do Domínio
	// 7 - Comparação da Filial do Contra-Domínio
	aCHKSQL := NGRETSX9( "TMQ" )

	// Recebe relação do Cadastro - Formato:
	// 1 - Chave
	// 2 - Alias
	// 3 - Ordem (Índice)
	aAdd(aCHKDEL, { "TMQ->TMQ_FAIXA" , "TN2" , 3 } )
	aAdd(aCHKDEL, { "TMQ->TMQ_FAIXA" , "TN8" , 3 } )
	aAdd(aCHKDEL, { "TMQ->TMQ_FAIXA" , "TN9" , 2 } )

	If nOperation == MODEL_OPERATION_DELETE //Exclusão

		If !NGCHKDEL( "TMQ" )
			lRet := .F.
		EndIf

		If lRet .And. !NGVALSX9( "TMQ" , {} , .T. , .T. )
			lRet := .F.
		EndIf

	Else
        
		If !fValFaixa()//Valida as Faixas 
			lRet := .F.
		EndIf
	EndIf

	RestArea( aAreaTMQ )

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} fValFaixa
Realiza das validações dos campos de faixa

@return Lógico - Retorna verdadeiro caso as faixas estejam corretas

@sample fValFaixa()

@author Jackson Machado
@since 09/09/13
/*/
//---------------------------------------------------------------------
Static Function fValFaixa()

	Local nCFaixa
	Local nFaixa 	:= 0
	Local nQtdFaixa	:= 0
	Local cTitulo	:= ""
	Local cTitQtd	:= ""
	Local lZero 	:= .T.
	Local aPeriodos	:= {} 
	Local oModelTMQ	:= FWModelActive()
	
	//Faz validacao do campo "De" na segunda faixa e os demais nao pode ser = 0
	aPeriodos := {}
	aAdd( aPeriodos , { oModelTMQ:GetValue( "TMQMASTER" , "TMQ_1DE" ) , oModelTMQ:GetValue( "TMQMASTER" , "TMQ_1ATE" ) , oModelTMQ:GetValue( "TMQMASTER" , "TMQ_1QTMES" ) } )
	aAdd( aPeriodos , { oModelTMQ:GetValue( "TMQMASTER" , "TMQ_2DE" ) , oModelTMQ:GetValue( "TMQMASTER" , "TMQ_2ATE" ) , oModelTMQ:GetValue( "TMQMASTER" , "TMQ_2QTMES" ) } )
	aAdd( aPeriodos , { oModelTMQ:GetValue( "TMQMASTER" , "TMQ_3DE" ) , oModelTMQ:GetValue( "TMQMASTER" , "TMQ_3ATE" ) , oModelTMQ:GetValue( "TMQMASTER" , "TMQ_3QTMES" ) } )
	aAdd( aPeriodos , { oModelTMQ:GetValue( "TMQMASTER" , "TMQ_4DE" ) , oModelTMQ:GetValue( "TMQMASTER" , "TMQ_4ATE" ) , oModelTMQ:GetValue( "TMQMASTER" , "TMQ_4QTMES" ) } )
	
	// Valida se foi informado ao menos um período
	For nCFaixa := 1 To Len( aPeriodos )
		If !Empty( aPeriodos[ nCFaixa, 1 ] ) .Or. !Empty( aPeriodos[ nCFaixa , 2 ] )
			lZero := .F.
			Exit 
		EndIf 
	Next nCFaixa
	
	If lZero
		Help( , , STR0014 , , STR0007 , 4 , 0 )//"ATENÇÃO"###"Deve ser informado no minimo uma faixa"
		Return .F.
	EndIf
	
	//Faz as validações dos valores informados
	For nCFaixa := 1 To Len( aPeriodos )
		//Busca dos Titulos
		If nCFaixa == 1
			cTitulo := fTitulo( "TMQ_1ATE" )
		ElseIf nCFaixa == 2
			cTitulo := fTitulo( "TMQ_2ATE" )
		ElseIf nCFaixa == 3
			cTitulo := fTitulo( "TMQ_3ATE" )
		Else
			cTitulo := fTitulo( "TMQ_4ATE" )
		EndIf
		
		If nCFaixa == 1
			cTitQtd := fTitulo( "TMQ_1QTMES" )
		ElseIf nCFaixa == 2
			cTitQtd := fTitulo( "TMQ_2QTMES" )
		ElseIf nCFaixa == 3
			cTitQtd := fTitulo( "TMQ_3QTMES" )
		Else
			cTitQtd := fTitulo( "TMQ_4QTMES" )
		EndIf
		
		If aPeriodos[ nCFaixa , 2 ] == 99
			nQtdFaixa += 1
		EndIf
		//Valida se o campo Quantidade de mes esta vazio
		If !Empty( aPeriodos[ nCFaixa , 2 ] )
			If Empty( aPeriodos[ nCFaixa , 3 ] )
				Help( , , STR0014 , , STR0008 + " '" + cTitQtd + "' " + STR0013 , 4 , 0 )//"ATENÇÃO"###"Para o campo:"#' '#+"nao podera ser igual a 0"
				Return .F.
			EndIf
		EndIf
		If nCFaixa = 1
			If aPeriodos[ nCFaixa , 2 ] <= aPeriodos[ nCFaixa , 1 ]
				Help( , , STR0014 , , STR0008 + " '" + cTitulo + "' " + STR0009 , 4 , 0 )//"ATENÇÃO"###"Para o campo: # # nao pode ser menor ou igual ao 'De'"
				Return .F.
			Else
				nFaixa := aPeriodos[ nCFaixa , 2 ]
				Loop
			EndIf
		Else
			If aPeriodos[ nCFaixa , 1 ] - nFaixa <> 1 .And. !Empty( aPeriodos[ nCFaixa , 2 ] )
				Help( , , STR0014 , , STR0008 + " '" + cTitulo + "' " + STR0010 , 4 , 0 )//"ATENÇÃO"###"Para o campo: # # deve ser sequencial a faixa anterior"
				Return .F.
			Else
				If aPeriodos[ nCFaixa , 2 ] <= aPeriodos[ nCFaixa , 1 ] .And. !Empty( aPeriodos[ nCFaixa , 1 ] )
					Help( , , STR0014 , , STR0008 + " '" + cTitulo + "' " + STR0009 , 4 , 0 )//"ATENÇÃO"###"Para o campo: # # nao pode ser menor ou igual ao 'De'"
					Return .F.
				EndIf
				nFaixa := aPeriodos[nCFaixa][2]
				Loop
			EndIf
		EndIf
	Next nCFaixa
	
	//Valida a faixa informada ate 99
	If nQtdFaixa == 0
		Help( , , STR0014 , , STR0011 , 4 , 0 )//"ATENÇÃO"###"A ultima faixa informada deve ser igual a 99"
		Return .F.
	EndIf
	If nQtdFaixa > 1
		Help( , , STR0014 , , STR0012 , 4 , 0 )//"ATENÇÃO"###"Nao pode ser informado mais de uma faixa 'Ate' 99"
		Return .F.     	
	EndIf
	
	/*If Empty( oModelTMQ:GetValue( "TMQMASTER" , "TMQ_POSADM" ) )
		cTitulo := fTitulo( "TMQ_POSADM" )
		Help( , , STR0014 , , STR0008 + " " + cTitulo + " " + STR0013 , 4 , 0 )//"ATENÇÃO"###"Para o campo: # # nao podera ser igual a 0"
		Return .F.
	EndIf*/

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} fTitulo
Retorna o titulo do campo para mensagem em tela

@return cReturn - Título do campo solicitado

@sample fTitulo()

@author Jackson Machado
@since 09/09/13
/*/
//---------------------------------------------------------------------
Static Function fTitulo( cCampo ) 

	Local cReturn 	:= Space( 1 )
	Local aArea		:= GetArea()
	Local aAreaSX3	:= SX3->( GetArea() )
	
	Default cCampo 	:= Space( 1 )
	
	If !Empty( cCampo )
		dbSelectArea( "SX3" )
		dbSetOrder( 2 )
		If DbSeek( cCampo )
		   cReturn := X3Titulo()
		EndIf
	EndIf
	
	RestArea( aAreaSX3 )
	RestArea( aArea )

Return cReturn