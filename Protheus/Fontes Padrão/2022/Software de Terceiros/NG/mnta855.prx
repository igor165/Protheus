#INCLUDE "MNTA855.ch"
#Include "Protheus.ch"

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA855
Programa que cadastra as filiais e suas especificacoes.
@author Thiago Olis Machado
@since 19/04/07
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTA855()

	// Armazena variaveis p/ devolucao (NGRIGHTCLICK)
	Local aNGBEGINPRM := {}
	Local oTmp855D

	If !FindFunction( 'MNTAmIIn' ) .Or. MNTAmIIn( 19, 95 )

		aNGBEGINPRM := NGBEGINPRM()

		Private aRotina := MenuDef()

		// Define o cabecalho da tela de atualizacoes
		Private cCadastro	:= STR0001 //"Cadastro de Filiais"
		Private aCHKDEL		:= {}, bNGGRAVA
		Private lInclui		:= .F.
		Private aMemoWf		:= {}
		Private cFuncOld    := ""
		Private cProcOld    := ""
		Private aTROCAF3	:= {}

		oTmp855D := MNT855TRB()

		aCHOICE := {}
		aVARNAO := {}

		aGETNAO := {{"TSK_FILMS" , "TSL->TSL_FILMS"}}

		cGETWHILE	:= "TSK_FILMS == M->TSL_FILMS .and. TSK_FILIAL = xFilial('TSK')"
		cGETMAKE	:= "TSL->TSL_FILMS"
		cGETKEY	    := "M->TSK_FILMS+M->TSK_TIPUSE+M->TSK_CODFUN+M->TSK_PROCES"
		cGETALIAS	:= "TSK"
		cTUDOOK		:= "MNT855TDOK()"
		cLINOK		:= "MNT855LIOK()"

		aCHKDEL := {}

		DbSelectArea("TSL")
		DbSetOrder(1)
		mBrowse( 6, 1,22,75	,"TSL")


		oTmp855D:delete() //Deleta Tab. Temporária
		NGRETURNPRM(aNGBEGINPRM)

	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.
@author Rafael Diogo Richter
@since 02/02/2008
@version undefined
@return Array com opcoes da rotina.
@obs ATUALIZACOES SOFRIDAS DESDE A CONSTRUÇAO INICIAL.
@type function
/*/
//---------------------------------------------------------------------
Static Function MenuDef()

Local aRotina :=	{{STR0002   ,"AxPesqui"  , 0, 1},; 	//"Pesquisar"
                     {STR0003   ,"MNTA855CAD", 0, 2},;  //"Visualizar"
                     {STR0004   ,"MNTA855CAD", 0, 3},;  //"Incluir"
                     {STR0005   ,"MNTA855CAD", 0, 4,0},;//"Alterar"
                     {STR0006   ,"MNTA855CAD", 0, 5,3}} //"Excluir"

	//+----------------------------------------------------------+
	//	Parametros do array a Rotina:                 	     	 |
	//| 1. Nome a aparecer no cabecalho                          |
	//| 2. Nome da Rotina associada                              |
	//| 3. Reservado                                             |
	//| 4. Tipo de Transação a ser efetuada:                     |
	//|    1 - Pesquisa e Posiciona em um Banco de Dados         |
	//|    2 - Simplesmente Mostra os Campos                     |
	//|    3 - Inclui registros no Bancos de Dados               |
	//|    4 - Altera o registro corrente                        |
	//|    5 - Remove o registro corrente do Banco de Dados      |
	//| 5. Nivel de acesso                                       |
	//| 6. Habilita Menu Funcional                 		     	 |
	//+----------------------------------------------------------+


Return aRotina

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA855SRA
Consulta especifica na STJ,trazendo registros da filial informada.
@author Evaldo Cevinscki Jr.
@since 03/04/07
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTA855SRA()

	Local i,j
	Local nOpca		:= 0
	Local nInd		:= 0
	Local cChave	:= Space(255)
	local oOrdem
	Local oChave
	Local oTmpTbl1

	Private oLbx,oDlg2
	Private cOrdIx
	Private nOrdem 	 := 1
	Private aIndices := {}
	Private cTRB 	 := GetNextAlias()

	aDbf := {{"CODMAT"  , "C", 06, 0},;
			 {"NOME"    , "C", 30, 0}}

	//Instancia classe FWTemporaryTable
	oTmpTbl1 := FWTemporaryTable():New( cTRB, aDbf )
	//Cria indices
	oTmpTbl1:AddIndex( "Ind01" , {"CODMAT"}  )
	oTmpTbl1:AddIndex( "Ind02" , {"NOME"}  )
	//Cria a tabela temporaria
	oTmpTbl1:Create()

	cAliasQry := GetNextAlias()
	cQuery := " SELECT RA_MAT, RA_NOME "
	cQuery += " FROM " + RetSqlName("SRA")
	cQuery += " WHERE RA_DEMISSA = ' ' "
	cQuery += " AND   RA_FILIAL  = '"+xFilial("SRA",M->TSL_FILMS)+"'"
	cQuery += " AND   D_E_L_E_T_<> '*' "
	cQuery += " ORDER BY RA_MAT "
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

	dbSelectArea((cAliasQry))
	dbGoTop()
	While !Eof()
		DbSelectArea(cTRB)
		RecLock((cTRB),.T.)
		(cTRB)->CODMAT := (cAliasQry)->RA_MAT
		(cTRB)->NOME   := (cAliasQry)->RA_NOME
		MsUnlock(cTRB)
		DbSelectArea((cAliasQry))
		DbSkip()
	EndDo
	(cAliasQry)->(DbCloseArea())

	cLine	:= "{ || { "
	i		:= 0
	aAux	:= {}
	aLbx	:= {}

	// Monta os dados do listbox
	dbSelectArea(cTRB)
	aFields := DbStruct()
	aCabec  := {STR0008,STR0009} //"Matrícula"###"Nome"

	dbGotop()
	While !Eof()
		aAux := Array(Len(aFields))
		For j := 1 to Len(aFields)
			aAux[j] := &(aFields[j][1])
		Next j
		Aadd(aLbx,aAux)
		dbSkip()
	End

	nTAMB := Len(aLbx)

	// Define o numero de colunas do listbox
	For i:=1 To Len(aDbf)
		If aDbf[i][2] == "D"
			cLine+= "DtoC(aLbx[oLbx:nAt,"+Alltrim(str(i,2))+"])"
		ElseIf aDbf[i][2] == "N"
			cLine+= "Str(aLbx[oLbx:nAt,"+Alltrim(str(i,2))+"])"
		Else
			cLine+= "aLbx[oLbx:nAt,"+Alltrim(str(i,2))+"]"
		EndIf
		If i#Len(aDbf)
			cLine+=","
		Else
			cLine+="}"
		EndIf
	Next i

	cLine+= "}"
	nGuarda := 1
	nOrdem  := 1

	aAdd(aIndices,STR0008) //"Matrícula"
	aAdd(aIndices,STR0009) //"Nome"

	Define MsDialog oDlg2 Title STR0010 From 000,000 To 421,522 Pixel //"Funcionários"

	@ 005, 005 combobox oOrdem var cOrdIx items aIndices size 210,08 PIXEL OF oDlg2 ON CHANGE nOrdem := oOrdem:nAt
	@ 020, 005 msget oChave var cChave size 210,08 of oDlg2 pixel
	@ 005, 220 Button STR0011 of oDlg2 Size 40,10 Pixel Action MNTA855Rec(cChave) //"&Pesquisar"

	oLbx:= TWBrowse():New(3,0,263,149,,aCabec,, oDlg2,,,,,,,,,,,, .F.,, .F.,, .F.,,, )

	oLbx:SetArray(aLbx)
	bLbxLine := { || { Space(Len(SRA->RA_MAT)), Space( 40 ) } }
	IIF(Len(aLbx)>0,oLbx:bLine:= &(cline),oLbx:bLine:= bLbxLine)
	oLbx:nAt   := nGuarda
	oLbx:bLDblClick := {|| (nOpcA := 1,nGuarda:=oLbx:nAt,oDlg2:End()) }

	Define sButton oBtOk  from 195, 05 type 1 action (nOpcA := 1,nGuarda := oLbx:nAt, oDlg2:End()) enable of oDlg2 pixel
	Define sButton oBtCan from 195, 36 type 2 action (nOpcA := 0, oDlg2:End()) enable of oDlg2 pixel
	Define sButton oBtPar from 195, 67 type 15 action MNTA855VI() enable of oDlg2 pixel

	ACTIVATE MSDIALOG oDlg2 CENTERED

	If nOpca == 1
		DbSelectArea("SRA")
		DbSetOrder(14)
		DbSeek(aLbx[nGuarda][2])
	EndIf

	oTmpTbl1:Delete()//Deleta Arquivo temporario 1

Return .T.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MNTA855RET³ Autor ³ Marcos Wagner Junior  ³ Data ³ 25/04/08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Consulta especifica na SRA	                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNTA855RET()

Return SRA->RA_MAT

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT415PES
Pesquisar
@author Marcos Wagner Junior
@since 25/04/08
@version undefined

@type function
/*/
//---------------------------------------------------------------------
Function MNT415PES()

	Local cCHPesq := Space(6) , nOpcap := 0
	Private oDlg4

	Define MsDialog oDlg4 From 300,120 To 390,330 Title OemToAnsi(STR0001) Pixel  //"Pesquisar"

	@ 0.5,1 say OemtoAnsi(STR0008) //"Matrícula"
	@ 0.5,6 Msget cCHPesq Picture '@!' SIZE 40,10

	Define sButton From 030,046 Type 1 Enable Of oDlg4 Action MNTA855Rec(cCHPesq)
	Define sButton From 030,075 Type 2 Enable Of oDlg4 Action oDlg4:End()

	Activate MsDialog oDlg4 Centered

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA855Rec
Monta a tela de pesquisa especifica.
@author Marcos Wagner Junior
@since 25/04/2008
@version undefined
@param cCHPesq, characters
@obs  ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNTA855Rec(cCHPesq)

	Local cSeek

	dbSelectArea(cTRB)
	dbSetOrder(If(aIndices[1]=cOrdIx,1,2))
	cSeek := If(aIndices[1]=cOrdIx,SubStr(cCHPesq,1,6),Upper(SubStr(cCHPesq,1,30)))
	dbSeek(cSeek,.t.)

	If !Eof()
		nOrdem := Recno()
	ElseIf Eof()
		nOrdem := Len(aLbx)
	Endif

	oLbx:SetFocus(aLbx[nOrdem])

	oLbx:nAt   := nOrdem
	oLbx:bLine := &(cline)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA855VI
Visualizacao do Funcionario
@author Marcos Wagner Junior
@since 25/04/2008
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNTA855VI()

	DbSelectArea("SRA")
	DbSetOrder(14)
	DbSeek(aLbx[oLbx:nAt][2])
	NGCAD01("SRA",Recno(),2)

Return .t.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855LIOK
Valida linha atual da getdados.
@author Marcos Wagner Junior
@since 25/04/2008
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT855LIOK()

	// Posicoes de campos no array aHeader
	Local nPosFunc := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_CODFUN" } )
	Local nPosMail := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_EMAIL"  } )
	Local nPosProc := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_PROCES" } )

	Local nCntRes  := 0

	Local lIntSFC  := FindFunction("NGINTSFC") .And. NGINTSFC() // Verifica se ha integracao com modulo Chao de Fabrica [SIGASFC]
	Local nPosTpUs := 0, nPosNome := 0

	If aCols[n][Len(aCols[n])]
		Return .T.
	Endif

	nPosTpUs := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_TIPUSE" } )
	nPosNome := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_NOME" } )
	If aCols[n][nPosTpUs] == "3"
		If Empty(aCols[n][nPosNome])
			ShowHelpDlg(STR0023,{STR0028},1,{STR0029},1) // "O campo nome deve ser informado" ## "Informe o nome"
			Return .F.
		ElseIf Empty(aCols[n][nPosMail])
			ShowHelpDlg(STR0023,{STR0030},1,{STR0031},1)  //"O campo e-mail deve ser informado" ## "Informe o e-mail"
			Return .F.
		EndIf
	EndIf

	// Valida obrigatoriedade de campos (Getdados)
	If Empty(aCols[n][nPosFunc])  // Funcionario
		ShowHelpDlg(STR0023, 	{STR0016},1,; // "Atenção" ## "O campo Funcionário dever ser informado."
		{STR0017},1)  // "Informe um funcionário."
		Return .F.
	ElseIf Empty(aCols[n][nPosProc]) // Processo
		ShowHelpDlg(STR0023, 	{STR0018},1,; // "Atenção" ## "O campo Processo dever ser informado."
		{STR0019},1)  // "Informe um processo para o funcionário."
		Return .F.
	EndIf

	// Caso integrado ao modulo Chao de Fabrica, um responsavel relacionado a opcao 6=Todos
	// deve possuir um e-mail cadastrado
	If lIntSFC .And. aCols[n][nPosProc] == "6" .And. Empty(aCols[n][nPosMail])
		ShowHelpDlg(STR0023, 	{STR0020},1,;          // "Atenção" ## "Devido a integracao com módulo Chao de Fábrica, o e-mail do responsável por todos os processos, é obrigatório."
		{STR0021 + Space(1) +; // "Informe um funcionário que possua um e-mail cadastrado,"
		STR0022 + Space(1) + AllTrim(aCols[n][nPosFunc]) + "."},1) // "ou cadastre um e-mail para o funcionário"
		Return .F.
	Endif

	// Verifica se funcionario ja foi informado para o processo
	aEval(aCols, {|x| If( (!x[Len(x)] .And. x[nPosFunc] + x[nPosProc] == aCols[n][nPosFunc] + aCols[n][nPosProc] ), nCntRes++, Nil ) })
	If nCntRes > 1
		ShowHelpDlg(STR0023, 	{STR0024},1,; // "Atenção" ## "Funcionário já informado para este processo."
		{STR0025},1)  // "Informe outro funcionário para o processo atual, ou altere o processo."
		Return .F.
	EndIf

	//Utilizado nas validações de alteração para linha
	cFuncOld := aCols[n][nPosFunc]
	cProcOld := aCols[n][nPosProc]
	PutFileInEof("TSK")

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855TDOK
Realiza consistencias finais à getdados.
@author Hugo Rizzo Pereira
@since 15/02/2012
@version undefined
@type function
/*/
//---------------------------------------------------------------------
Function MNT855TDOK()

	Local lRet     := .T.
	Local nCntResp := 0
	Local nInd

	If !Obrigatorio(aGets,aTela)
		lRet := .F.
	Endif

	For nInd := 1 to Len(aCols)
		n := nInd
		If !aCols[n][Len(aCols[n])] .And. lRet
			If !MNT855LIOK()
				lRet := .F.
			Endif
			nCntResp++
		Endif
	Next nInd

	If lRet .And. nCntResp == 0
		ShowHelpDlg("Atenção",	{STR0014},1,; // "Nenhum funcionário foi informado."
		{STR0015},1)  // "Informe um funcionário como responsável de um determinado processo."
		lRet := .F.
	Endif

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855FUNC
Verifica se o funcionario digitado e valido
@author Marcos Wagner Junior
@since 25/04/2008
@version undefined

@type function
/*/
//---------------------------------------------------------------------
Function MNT855FUNC()

	Local aOldArea  := GetArea()
	Local lRet 		:= .t.
	Local nTipUse	:= aSCAN(aHeader,{|x| Trim(Upper(x[2])) == "TSK_TIPUSE"})
	Local cPosTipo	:= If( ReadVar() == 'M->TSK_TIPUSE', M->TSK_TIPUSE, aCols[n][nTipUse] )

	If Empty(M->TSK_CODFUN)
		Return .T.
	Endif

	If cPosTipo == '1'
		cAliasQry2 := GetNextAlias()
		cQuery2 := " SELECT RA_MAT, RA_NOME "
		cQuery2 += " FROM " + RetSqlName("SRA")
		cQuery2 += " WHERE RA_DEMISSA = ' ' "
		cQuery2 += " AND   RA_FILIAL  = '" + xFilial("SRA",M->TSL_FILMS) + "'"
		cQuery2 += " AND   RA_MAT     = '"+M->TSK_CODFUN+"'"
		cQuery2 += " AND   D_E_L_E_T_<> '*' "
		cQuery2 := ChangeQuery(cQuery2)
	ElseIf cPosTipo == '2'
		cAliasQry2 := GetNextAlias()
		cQuery2 := " SELECT T1_CODFUNC, T1_NOME "
		cQuery2 += " FROM " + RetSqlName("ST1")
		cQuery2 += " WHERE T1_DISPONI = 'S' "
		cQuery2 += " AND   T1_FILIAL  = '" + xFilial("ST1",M->TSL_FILMS) + "'"
		cQuery2 += " AND   T1_CODFUNC = '" + M->TSK_CODFUN + "'"
		cQuery2 += " AND   D_E_L_E_T_ <> '*' "
		cQuery2 := ChangeQuery(cQuery2)
	EndIf

	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery2),cAliasQry2, .F., .T.)
	dbSelectArea(cAliasQry2)
	dbGoTop()
	If EoF()
		MsgStop(STR0012,STR0013) //"Funcionário demitido ou não pertencente a Filial informada!"###"ATENÇÃO"
		lRet := .f.
	Endif

	(cAliasQry2)->(DbCloseArea())
	RestArea(aOldArea)

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA855CAD
Validação na confirmação do cadastro
@function

@author Pedro Henrique Soares de Souza
@since 20/02/14

@sample MNTA855CAD("TSK", 1, 4)

@param  cAlias, Caracter, Tabela que será utilizada.
@param  nRecno, Numérico, Recno do registro a ser manipulado.
@param  nOpca , Numérico, Tipo de operação a ser realizada.
@return
/*/
//---------------------------------------------------------------------
Function MNTA855CAD( cAlias, nRecno, nOpca )

	Local nRet      := 0
	Local nX        := 0
	Local aOldWF    := aClone(aMemoWf)
	Local cFilBkp   := cFilAnt

	Private cFilCad := ''

	nRet := NGCAD02( cAlias, nRecno, nOpca )

	cFilAnt := cFilBkp

	If nRet == 1
		MNT855GRVM()
	Else
		aMemoWf := aClone(aOldWF)
	EndIf

	If nOpca == 5
		aMemoWf := {}
	EndIf

	//Limpa valores ao fechar manipulação dos dados.
	cFuncOld := ""
	cProcOld := ""

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA855VWF


@author Pedro Henrique Soares de Souza
@since 20/02/14
/*/
//---------------------------------------------------------------------
Function MNTA855VWF(cOpcao)

	Local oMarkWF855    := Nil
	Local oDlg          := Nil
	Local nX            := 0
	Local nW            := 0
	Local nPosReg       := 0
	Local nPosProc	    := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_PROCES" } )
	Local nPosTipo	    := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_TIPUSE" } )
	Local nPosFunc	    := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_CODFUN" } )
	Local aCpos		    := {}
	Local aLWork	    := {}
	Local aListWf	    := {}
	Local aPesq		    := {}
	Local aOld		    := aClone(aRotina)
	Local lOk		    := .F.
	Local cProc		    := IIf(nPosProc > 0 ,aCols[n][nPosProc],"")
	Local cFilMS	    := TSL_FILMS
	Local cListWF	    := ""

	Private cOpcProces	:= cOpcao
	Private cTipo		:= IIf(nPosTipo > 0 ,aCols[n][nPosTipo],"")
	Private cFunc		:= IIf(nPosFunc > 0 ,aCols[n][nPosFunc],"")

	If Empty(cTipo) .Or. Empty(cFunc)
		
		Help( NIL, 1, STR0023, NIL, STR0051, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0052} ) // "Atenção"###"Os campos Tipo Usuário e Funcionário não foram informados."###
															                            // "Antes de cadastrar o processo informe os campos Tipo Usuário e Funcionário."
		Return .F.
	
	EndIf

	aRotina := {}

	//Carrega workflows referente ao processo selecionado.
	aLWork  := MNTA855WF(cOpcProces)

	For nX := 1 To Len(aLWork)
		NGDBAREAORD(cTRB855, 1)
		If !DbSeek(aLWork[nX][2]+cTipo+cFunc)

			RecLock(cTRB855,.T.)
			(cTRB855)->OK		:= aLWork[nX][1]
			(cTRB855)->PROGRA	:= aLWork[nX][2]
			(cTRB855)->DESPRO	:= aLWork[nX][3]
			(cTRB855)->PROCES	:= aLWork[nX][4]
			(cTRB855)->TIPUSE	:= cTipo
			(cTRB855)->CODFUN	:= cFunc
			(cTRB855)->(MsUnlock())
		EndIf
	Next nX

	//Realiza a marcação dos workflows conforme base de dados
	nPosReg := aScan(aMemoWf, {|x| x[4] + x[5] == cFunc + cProc})

	dbSelectArea("TSK")
	dbSetOrder(1)
	If nPosReg == 0 .And. dbSeek(xFilial("TSK") + cFilMS + aCols[n][nPosTipo] + aCols[n][nPosFunc] + aCols[n][nPosProc])
		cListWF := MSMM(TSK->TSK_LISTWF,,,,3)
	ElseIf nPosReg > 0
		cListWF := aMemoWf[nPosReg][1]
	EndIf

	aListWf := StrTokArr(cListWF, "#")

	If cFunc != cFuncOld .Or. cProc != cProcOld

		For nW := 1 To Len(aListWf)

			dbSelectArea(cTRB855)
			dbSetOrder(1)
			If DbSeek(aListWf[nW]+aCols[n][nPosTipo]+aCols[n][nPosFunc])
				RecLock(cTRB855,.F.)
				(cTRB855)->OK		:= 'X'
				(cTRB855)->(MsUnlock())
			EndIf

		Next nW

	EndIf

	If (cOpcProces != cProc) .And. !Empty(cProc)
		MNT855UMK(cTRB855,cTipo,cFunc)
	EndIf

	//Limpa filtro
	NGDBAREAORD(cTRB855, 1)
	Set Filter To

	If cOpcProces <> '6'
		Set Filter To cOpcProces == (cTRB855)->PROCES .And. cTipo == (cTRB855)->TIPUSE .And.  cFunc == (cTRB855)->CODFUN
	Else
		Set Filter To cTipo == (cTRB855)->TIPUSE  .And. cFunc == (cTRB855)->CODFUN
	EndIf

	//Define campos que aparecerão na tela
	aAdd(aCpos,{"Programa",					"PROGRA","C",07,0})
	aAdd(aCpos,{"Descrição do Programa",	"DESPRO","C",30,0})

	aAdd( aPesq , { "Programa + Descrição " ,{{"","C" , 255 , 0 ,"","@!"} }} )

	DEFINE MSDIALOG oDlg TITLE "Workflows" FROM 0,0 TO 450,550 PIXEL

	oFWLayer := FWLayer():New()
	oFWLayer:Init( oDlg, .F., .T. )
	oFWLayer:AddLine( "ALLLINE" , 95 , .F. )
	oFWLayer:AddCollumn( "ALLCOL", 100, .F., "ALLLINE" )
	oPanel := oFWLayer:getColPanel( "ALLCOL" , "ALLLINE" )

	//Cria MarkBrowse de OS
	oMarkWF855 := FWMarkBrowse():New()
	oMarkWF855:SetOwner(oPanel)
	oMarkWF855:SetAlias(cTRB855)
	oMarkWF855:SetDescription('Workflows')
	oMarkWF855:SetMenuDef('')
	oMarkWF855:SetTemporary(.T.)
	oMarkWF855:SetFieldMark('OK')
	oMarkWF855:SetFields(aCpos)
	oMarkWF855:SetSeek(.T., aPesq)
	oMarkWF855:SetWalkThru(.F.)
	oMarkWF855:SetAmbiente(.F.)
	oMarkWF855:SetAllMark({|| A855MKALL( oMarkWF855, cTipo, cFunc ) })
	oMarkWF855:SetMark("X", cTRB855, 'OK')
	oMarkWF855:DisableReport()
	oMarkWF855:DisableSaveConfig()
	oMarkWF855:DisableConfig()
	oMarkWF855:Activate()

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||(lOk := .T.), ,oDlg:End()},{||oDlg:End()}) CENTERED

	If lOk
		MNT855GRAV(cTRB855, oMarkWF855, cTipo, cFunc, cOpcProces, cProc)
	EndIf

	//Deleta TRB
	aRotina := aClone(aOld) //Retorna o valor antigo da variável aRotina
	dbSelectArea(cTRB855)
	Zap

Return .T.

//-------------------------------------------------------------------------
/*/{Protheus.doc} MNTA855WF
Retorna todos os workflows para o processo selecionado.
@type static

@author Pedro Henrique Soares de Souza
@since 20/02/14

@param  cProc   , Caracter, Informa o tipo de processo que será filtrado.
@return aWorkAux, Array, Contém tods os workflows referentes ao processo.
/*/
//-------------------------------------------------------------------------
Static Function MNTA855WF(cProc)

	Local aWorkf    := {}
	Local aWorkAux  := {}
	Local nIndex    := 0

	aAdd( aWorkf ,{ "", "MNTW005", STR0033, '1' } ) //Alerta de tendência de falhas de bens
	aAdd( aWorkf ,{ "", "MNTW010", STR0034, '1' } ) //Alerta de O.S. atrasada
	aAdd( aWorkf ,{ "", "MNTW020", STR0035, '1' } ) //Alerta de O.S. preventiva a vencer com base no campo de tolerância (STF)"
	aAdd( aWorkf ,{ "", "MNTW025", STR0036, '1' } ) //Aviso de inclusão de S.S. para o responsável pelo serviço
	aAdd( aWorkf ,{ "", "MNTW030", STR0037, '1' } ) //Resumo de S.S. para o executante
	aAdd( aWorkf ,{ "", "MNTW035", STR0038, '1' } ) //Aviso de encerramento da S.S.
	aAdd( aWorkf ,{ "", "MNTW040", STR0039, '1' } ) //Aviso de inclusão de S.S para o executante
	aAdd( aWorkf ,{ "", "MNTW045", STR0040, '1' } ) //Aviso de exclusão de S.S. para o solicitante
	aAdd( aWorkf ,{ "", "MNTW210", STR0041, '1' } ) //Garantias vencidas/a vencer
	aAdd( aWorkf ,{ "", "MNTW215", STR0042, '1' } ) //Alerta de liberação de O.S.
	aAdd( aWorkf ,{ "", "MNTW060", STR0043, '3' } ) //Aviso de inclusão de multa
	aAdd( aWorkf ,{ "", "MNTW061", STR0044, '3' } ) //Aviso de inclusão de notificação
	aAdd( aWorkf ,{ "", "MNTW065", STR0045, '3' } ) //Aviso de geração de advertência de multa
	aAdd( aWorkf ,{ "", "MNTW205", STR0046, '3' } ) //Multas vencidas/a vencer
	aAdd( aWorkf ,{ "", "MNTW055", STR0047, '4' } ) //Aviso de inclusão de sinistro
	aAdd( aWorkf ,{ "", "MNTW070", STR0048, '4' } ) //Apropriação de débito de sinistro
	aAdd( aWorkf ,{ "", "MNTW075", STR0049, '5' } ) //Aviso de vencimento de taxa
	aAdd( aWorkf ,{ "", "MNTW200", STR0050, '5' } ) //Documentos vencidos/a vencer

	For nIndex := 1 to Len(aWorkf)
		If aWorkf[nIndex][4] $ cProc .Or. cProc == '6'
			aAdd( aWorkAux , aWorkf[nIndex] )
		EndIf
	Next nIndex

Return aWorkAux

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855GRAV(cTRB855, oMarkWF855, cTipo, cFunc, cOpcao)
@Function

@author Pedro Henrique Soares de Souza
@since 20/02/14

@sample MNT855GRAV()

@param  cTRB855   , Caracter, Tabela temporaria.
@param  oMarkWF855, Objeto  , Objeto MarkBrowse.
@param  cTipo     , Caracter, Tipo de Funcionario.
@param  cFunc     , Caracter, Funcionario.
@param  cOpcao    , Caracter, Opção.
@param  cProc     , Caracter, Processo selecionado.
@return .T.
/*/
//---------------------------------------------------------------------
Function MNT855GRAV(cTRB855, oMarkWF855, cTipo, cFunc, cOpcao, cProc)

	Local aArea	  := GetArea()
	Local cMarca  := oMarkWF855:Mark()
	Local cMarkWF := ""
	Local nPosReg := aScan(aMemoWf, {|x| x[4] + x[5] == cFunc + cProc})

	NGDBAREAORD(cTRB855, 2)
	(cTRB855)->( dbGoTop() )
	If DbSeek(cTipo+cFunc)
		While (cTRB855)->(!Eof())
			If oMarkWF855:IsMark(cMarca)
				cMarkWF += '#' + PROGRA
			EndIf
			(cTRB855)->( dbSkip() )
		End While

		If nPosReg > 0
			aMemoWf[nPosReg] := {cMarkWF, TSL_FILMS, cTipo, cFunc, cOpcao}
		Else
			aAdd(aMemoWf, {cMarkWF, TSL_FILMS, cTipo, cFunc, cOpcao})
		EndIf

	EndIf

	RestArea( aArea )

Return .T.


//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855TRB()
//Cria TRB para marcação.

@author Pedro Henrique Soares de Souza
@since 20/02/14
/*/
//---------------------------------------------------------------------
Function MNT855TRB()

	Local oTmp855

	_SetOwnerPrvt("cTRB855", GetNextAlias())

	//Cria TRB
	aDBF855 := {	{"OK"	 , "C", 01,0},;
					{"PROGRA", "C", 07,0},;
					{"DESPRO", "C", 80,0},;
					{"PROCES", "C", 01,0},;
					{"TIPUSE", "C", TAMSX3("TSK_TIPUSE")[1],0},;
					{"CODFUN", "C", TAMSX3("TSK_CODFUN")[1],0};
				}

	//Instancia classe FWTemporaryTable
	oTmp855 := FWTemporaryTable():New( cTRB855, aDBF855 )
	//Cria indices
	oTmp855:AddIndex( "Ind01" , {"PROGRA","TIPUSE","CODFUN"} )
	oTmp855:AddIndex( "Ind02" , {"TIPUSE","CODFUN"} )
	//Cria a tabela temporaria
	oTmp855:Create()

Return oTmp855

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855WHEN
Função de verificação(WHEN) dos campos TSK_CODFUN, TSK_NOME e TSK_EMAIL

@param		cCampo - Indica o campo que será verificado
@author	Pedro Henrique Soares de Souza
@since		20/02/14
/*/
//---------------------------------------------------------------------
Function MNT855WHEN(cCampo)

	Local lRet := .F.
	Local nPosTipo := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_TIPUSE" } )

	//1 - CODFUNC; 2 - NOME; 3 - EMAIL
	If nPosTipo > 0
		If cCampo == '1'
			lRet := (aCols[n][nPosTipo] == '1' .Or. aCols[n][nPosTipo] == '2')
		Else
			lRet := (aCols[n][nPosTipo] == '3')
		EndIf
	Else
		lRet := .F.
	EndIf

	// Função para validar se troca o F3 do campo Funcionário (TSK_CODFUN)
	MNT855_F3()

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855VAL
Gatilha o código do funcionário caso tipo de usuário seja "contato"

@author	Pedro Henrique Soares de Souza
@since		20/02/14
/*/
//---------------------------------------------------------------------
Function MNT855VAL()

	Local nPosTipo := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_TIPUSE" } )
	Local nPosFun := aScan(aHeader, {|x| AllTrim(Upper(x[2])) == "TSK_CODFUN" } )
	Local cSequen := STRZERO(1, TAMSX3("TSK_CODFUN")[1])

	If nPosTipo > 0
		If M->TSK_TIPUSE == '3'
			aEVAL(aCOLS,{|x,y| If(x[nPosFun] > cSequen .AND. n != y   ,cSequen := x[nPosFun], Nil)})
			cSequen := Soma1Old(cSequen)
			aCols[n][nPosFun] := cSequen
		EndIf
	EndIf

	// Função para validar se troca o F3 do campo Funcionário (TSK_CODFUN)
	MNT855_F3()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855GRVM
Grava o memo no campo TSK_LISTWF

@author Pedro Henrique Soares de Souza
@since 20/02/14
/*/
//---------------------------------------------------------------------
Function MNT855GRVM()

	Local cFilMS, cTipo, cFunc, cProc
	Local nX

	For nX := 1 To Len(aMemoWf)

		cFilMS	:= aMemoWf[nX][2]
		cTipo	:= aMemoWf[nX][3]
		cFunc	:= aMemoWf[nX][4]
		cProc	:= aMemoWf[nX][5]

		NGDBAREAORD("TSK", 1)
		If DbSeek(xFilial('TSK')+cFilMS+cTipo+cFunc+cProc)
			RecLock("TSK",.F.)
			MSMM(TSK->TSK_LISTWF,,,aMemoWf[nX][1],1,,,"TSK","TSK_LISTWF")
			MsUnlock("TSK")
		EndIf
	Next nX

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855UMK
Realiza a desmarção dos registros ao efetuar troca de opção.

@author Pedro Henrique Soares de Souza
@since 20/02/14
/*/
//---------------------------------------------------------------------
Static Function MNT855UMK(cTRB855, cTipo, cFunc)

	NGDBAREAORD(cTRB855, 2)
	DbGoTop()
	If DbSeek(cTipo+cFunc)
		While !EoF()
			If !Empty(OK)
				RecLock(cTRB855,.F.)
				(cTRB855)->OK		:= " "
				(cTRB855)->(MsUnlock())
			EndIf
			dbSkip()
		End While
	EndIf

Return Nil

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855PROCES
Altera as opções do campo TSK_PROCESS, dependendo do ambiente(Frota ou
Padrão).

@author Pablo Servin
@since 23/04/2014
@version MP11
@return cOpcoes - variável com as opções do campo.
/*/
//---------------------------------------------------------------------
Function MNT855PROC()

	Local cOpcoes
	Local lFrota := NGVERUTFR() // Indica se o ambiente é frota.

	Do Case
		Case lFrota
			cOpcoes := STR0026 //"1=Oficina;2=Pneus;3=Multas;4=Sinistro;5=Documentos;6=Todos"
		Otherwise
			cOpcoes := STR0027 //"1=Oficina"
	End Case

Return cOpcoes

//----------------------------------------------------------------------
/*/{Protheus.doc} A855MKALL
Marca/Desmarca todos os registros da tela do MarkBrowse

@author Pablo Servin
@since 12/05/2014
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Static Function A855MKALL( oMarkWF855, cTipo, cFunc )

	NGDBAREAORD( cTRB855, 2 )
	dbGoTop()
	If DbSeek( cTipo+cFunc )
		While !Eof()
		   RecLock( cTRB855, .F. )
		   ( cTRB855 )->OK := IIf( Empty( OK ), "X", " " )
		   MsUnLock( cTRB855 )
		   dbSkip()
		End While
	EndIf
	NGSETIFARQUI( cTRB855 )

	oMarkWF855:Refresh( .F. )

Return Nil

//----------------------------------------------------------------------
/*/{Protheus.doc} A855MKALL
Valida a filial informada

@author Tainã Alberto Cardoso
@since 19/02/2015
@version MP11
@return Nil
/*/
//---------------------------------------------------------------------
Function A855FIL()

	If !ExistChav('TSL',M->TSL_FILMS) .Or. !ExistCpo('SM0',CEMPANT+M->TSL_FILMS)
		Return .F.
	EndIf

	If !Empty(cFilCad)
		//Verifica se a filial foi alterada
		If cFilCad <> M->TSL_FILMS
			If MsgYesNo(STR0032) //"Os funcionários ja cadastrados serão apagados, deseja alterar a filial?"
				aCols := BlankGetd(aHeader)
				oGet:ForceRefresh()
			Else
				M->TSL_FILMS := cFilCad
			EndIf
		EndIf
	EndIf

	cFilCad := M->TSL_FILMS
	cFilAnt := cFilCad

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855_F3
Altera a Consulta conforme o tipo de funcionário (TSK_TIPUSE)

@type function

@source MNTA855.PRX

@author Rodrigo Luan Backes
@since 01/08/2016

@sample MNT855_F3()

@return Lógico
/*/
//---------------------------------------------------------------------
Function MNT855_F3()

	Local nTipUse	:= aSCAN(aHeader,{|x| Trim(Upper(x[2])) == "TSK_TIPUSE"})

	aTROCAF3		:= {}
	If nTipUse = 0
		If M->TSK_TIPUSE == "1"
			Aadd(aTROCAF3,{"TSK_CODFUN","NG1SRA"})
		Elseif M->TSK_TIPUSE == "2"
			Aadd(aTROCAF3,{"TSK_CODFUN","ST1"})
		Endif
	Else
		If aCols[n][nTipUse] == "1"
			Aadd(aTROCAF3,{"TSK_CODFUN","NG1SRA"})
		Elseif aCols[n][nTipUse] == "2"
			Aadd(aTROCAF3,{"TSK_CODFUN","ST1"})
		Endif
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT855TSK
Retorno do gatilho do código do funcionário (TSK_CODFUN)

@type function

@source MNTA855.PRX

@author Rodrigo Luan Backes
@since 01/08/2016

@sample MNT855TSK()

@return Lógico
/*/
//---------------------------------------------------------------------
Function MNT855TSK(nGat)

	Local nTipUse := aSCAN(aHeader,{|x| Trim(Upper(x[2])) == "TSK_TIPUSE"})
	Local nCodUse := aSCAN(aHeader,{|x| Trim(Upper(x[2])) == "TSK_CODFUN"})
	Local cTSKRet	:= ""
	Default nGat	:= 1

	If nGat == 1
		If aCols[n][nTipUse] == "1"
			cTSKRet		:= SUBSTR(NGSEEK("SRA", AllTrim(aCols[n][nCodUse]), 1, "RA_NOME"),1,20)//SubStr(SRA->RA_NOME,1,20)
		Else
			cTSKRet		:= SUBSTR(NGSEEK("ST1", AllTrim(aCols[n][nCodUse]), 1, "T1_NOME"),1,20)//SubStr(SRA->RA_NOME,1,20)
		EndIf
	Else
		If aCols[n][nTipUse] == "1"
			cTSKRet		:= NGSEEK("SRA", AllTrim(aCols[n][nCodUse]), 1, "RA_EMAIL")//SRA->RA_EMAIL
		Else
			cTSKRet		:= NGSEEK("ST1", AllTrim(aCols[n][nCodUse]), 1, "T1_EMAIL")//SRA->RA_EMAIL
		EndIf
	EndIf

Return cTSKRet
