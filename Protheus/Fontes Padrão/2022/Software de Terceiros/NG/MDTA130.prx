#INCLUDE "PROTHEUS.CH"
#INCLUDE "MDTA130.CH"

//---------------------------------------------------------------------
/*/{Protheus.doc} MDTA130
Epi X Risco

@return .T.
@sample MDTA130()

@author Jean Pytter da Costa
@since 24/09/2014
@version 1.0
/*/
//---------------------------------------------------------------------
Function MDTA130()

	//----------------------------------------------
	// Guarda conteudo e declara variaveis padroes
	//----------------------------------------------
	Local aNGBEGINPRM	:= NGBEGINPRM()
	Local cAlias		:= "TN3"

	Private aRotina	:= MenuDef()
	Private cTipo		:= SuperGetMv("MV_MDTPEPI",.F.,"")
	Private lSigaMdtPS	:= If( SuperGetMv( "MV_MDTPS" , .F. , "N" ) == "S" , .T. , .F. )

	//----------------------------------------------
	// Define o cabecalho da tela de atualizacoes
	//----------------------------------------------
	Private cCadastro := OemtoAnsi(STR0001) //"Epi X Risco"

	If lSigaMdtPs//Caso prestador de servico
		cAlias		:= "SA1"
		cCadastro 	:= STR0002 //"Clientes"
	EndIf

	mBrowse( 6, 1,22,75,cAlias)

	dbSelectArea(cAlias)
	Set Filter To

	//----------------------------------------------
	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	//----------------------------------------------
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilização de Menu Funcional.

Parametros do array a Rotina:
1. Nome a aparecer no cabecalho
2. Nome da Rotina associada
3. Reservado
4. Tipo de Transação a ser efetuada:
	1 - Pesquisa e Posiciona em um Banco de Dados
	2 - Simplesmente Mostra os Campos
	3 - Inclui registros no Bancos de Dados
	4 - Altera o registro corrente
	5 - Remove o registro corrente do Banco de Dados
5. Nivel de acesso
6. Habilita Menu Funcional

@return aRotina
@sample MenuDef()

@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------

Static Function MenuDef( lSigaMdtPS )

	Local aRotina := {}

	//Define os parametros
	Default lSigaMdtPs := SuperGetMv("MV_MDTPS",.F.,"N") == "S"

	If lSigaMdtPs
		aAdd( aRotina , { STR0003 	, "AxPesqui"	, 0 , 1 } ) //"Pesquisar"
		aAdd( aRotina , { STR0004 	, "NGCAD01"	, 0 , 2 } ) //"Visualizar"
		aAdd( aRotina , { STR0005	, "MDT130PRES", 0 , 4 } ) //"Epis"
	Else
		aAdd( aRotina , { STR0003	, "AxPesqui"	, 0 , 1 } ) //"Pesquisar"
		aAdd( aRotina , { STR0004	, "NGCAD01" 	, 0 , 2 } ) //"Visualizar"
		aAdd( aRotina , { STR0006	, "Mdt130Ris"	, 0 , 4 } ) //"Riscos"
	EndIf

Return(aRotina)

//---------------------------------------------------------------------
/*/{Protheus.doc} MDT130PRES
Epi X Risco (Prestador)

@return
@sample MDT130PRES()

@author Jean Pytter da Costa
@since 24/09/2014
@version 1.0
/*/
//---------------------------------------------------------------------

Function MDT130PRES()

	//----------------------------------------------
	// Guarda conteudo e declara variaveis padroes
	//----------------------------------------------
	Local aArea	:= GetArea()
	Local oldROTINA := aCLONE(aROTINA)
	Local oldCad := cCadastro
	Local aNGBEGINPRM	:= NGBEGINPRM()
	Local cAlias		:= "TN3"

	Private cTipo		:= SuperGetMv("MV_MDTPEPI",.F.,"")
	Private lSigaMdtPS	:= SuperGetMv( "MV_MDTPS" , .F. , "N" ) == "S"
	cCliMdtPs := SA1->A1_COD+SA1->A1_LOJA

	aRotina := MenuDef( .F. )

	//----------------------------------------------
	// Define o cabecalho da tela de atualizacoes
	//----------------------------------------------
	Private cCadastro := OemtoAnsi(STR0001) //"Epi X Risco"

	DbSelectArea("TN3")
	DbSetOrder(3)  //TN3_FILIAL+TN3_FORNEC+TN3_LOJA+TN3_CLIENT+TN3_LOJACL+TN3_CODEPI+TN3_NUMCAP
	mBrowse( 6, 1,22,75,"TN3")

	dbSelectArea(cAlias)
	Set Filter To
	aROTINA := aCLONE(oldROTINA)
	RestArea(aArea)
	cCadastro := oldCad
	//----------------------------------------------
	// Devolve variaveis armazenadas (NGRIGHTCLICK)
	//----------------------------------------------
	NGRETURNPRM(aNGBEGINPRM)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} Mdt130Ris
Monta a interface de riscos para o EPI.

@return .T.

@samples Mdt130Ris()

@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------
Function Mdt130Ris(cAlias,nReg,nOpca)

	Local oPnl

	Local nIdx			:= 3
	Local cSeek		:= "TN3->TN3_CODEPI"
	Local cWhile		:= " TNX->TNX_FILIAL == '" + xFilial( "TNX" ) + "' .AND. TNX->TNX_EPI == '" + TN3->TN3_CODEPI + "' "
	Local aNoFields	:= {}
	Local aRotOld		:= aClone( aRotina )//Salva o aRotina
	Local lOk			:= .F.
	Local lRet

	Private aSize := MsAdvSize(,.f.,430)
	Private aObjects := {}
	Private oGet

	If lSigaMdtPs
		aAdd( aNoFields , "TNX_CLIENT" )
		aAdd( aNoFields , "TNX_LOJA" )
		nIdx		:= 5
		cSeek		:= "cCliMdtPs+TN3->TN3_CODEPI"
		cWhile	:= " TNX->TNX_FILIAL == '" + xFilial( "TNX" ) + "' .AND. TNX->TNX_EPI == '" + TN3->TN3_CODEPI + "' .And. "
		cWhile	+= " TNX->TNX_CLIENT+TNX->TNX_LOJA = cCliMdtPs "
	EndIf

	//Define modo de alteracao para a Tabela
	aRotSetOpc( "TN3" , @nReg , 4 )
	RegToMemory( "TN3" , .F. )
	INCLUI := .F.
	ALTERA := .T.

	aAdd( aNoFields , "TNX_FILIAL" )
	aAdd( aNoFields , "TNX_EPI" )
	aAdd( aNoFields , "TNX_NOMEPI" )

	dbSelectArea("TNX")
	dbSetOrder(nIdx)
	FillGetDados( 4 , "TNX" , nIdx , cSeek , { | | } , { | | .T.} , aNoFields , , , ,{ | | NGMontaaCols( "TNX" , &cSeek , cWhile , , nIdx ) } )
	If Empty( aCols )
	   aCols := BlankGetd( aHeader )
	Else
	   M->TNX_NUMRIS := TNX->TNX_NUMRIS
	EndIf
	DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd PIXEL

		//Painel criado para correta disposicao da tela
		oPnlPai := TPanel():New( , , , oDlg , , , , , , , , .F. , .F. )
			oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

			oPnl := TPanel():New( , , , oPnlPai , , , , , , , aSize[ 6 ] / 6 , .F. , .F. )
				oPnl:Align := CONTROL_ALIGN_TOP

				oEnchoice:= MsMGet():New( "TN3" , TN3->( Recno() ) , 2 , , , , , { 12 , 0 , aSize[ 6 ] / 2 , aSize[ 5 ] / 2 } , , , , , , oPnl )
					oEnchoice:oBox:Align := CONTROL_ALIGN_ALLCLIENT

			//Botão de Importação
			oPnlBtn := TPanel():New( , , , oPnlPai , , , , , , , 15 , .F. , .F. )
	   		oPnlBtn:Align := CONTROL_ALIGN_TOP
		    //Monta o Botão de Relacionamentos
			TButton():New( 2 , 5 , STR0006 , oPnlBtn , { | | If( fLinhaOK( lRet ) , fMarkRisc(), lRet := .F. )} , ; //"Riscos"
			 				49 , 12 , , /*oFont*/ , , .T. , , , , /* bWhen*/ , , )
			//Redefine as variaveis para montar as GetDados corretamente
			INCLUI := .F.
			ALTERA := .T.

			oGet := MsNewGetDados():New( 0 , 0 , 1000 , 1000 , IIF( !INCLUI .and. !ALTERA , 0 , GD_INSERT+GD_UPDATE+GD_DELETE ) , ;
																	{ | | fLinhaOK() } , { | | .T. } , , , , 9999 , , , , oPnlPai , ;
																	aHeader , aCols )
			oGet:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar( oDlg , ;
														{ | | lOk := .T. , IIf( .T. /*fEpiS2240( .F. )*/, oDlg:End(), lOk := .F. ) } , ; //bConfirm
														{ | | oDlg:End() } )//bCancel

	If lOk
		Begin Transaction

		Processa( { | lEnd | fGrava() }, STR0010 ) //"Gravando Informações"

		//-----------------------------------------------------------------
		// Realiza a integração das informações do evento S-2240 ao Governo
		//-----------------------------------------------------------------
		If FindFunction( "MDTIntEsoc" )
			fEpiS2240()
		EndIf

		End Transaction
	EndIf

	//Retorna o aRotina
	aRotina := aClone( aRotOld )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fMarkRisc
MarkBrowse dos riscos.

@return .T.

@samples fMarkRisc()

@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------
Static Function fMarkRisc()

	//Variáveis de controle
	Local aArea := GetArea() //Salva a área

	//Objetos
	Local oMark
	Local oPanel
	Local oCbx
	Local oDialog
	Local oPnlFil
	Local oPnlPai
	Local aDescIdx	 := {}
	Local cPesquisar := Space( 200 )
	Local cCbxPesq := ""
	Local aCbxPesq //ComboBox com indices de pesquisa
	Local oCbxPesq //ComboBox de Pesquisa

	//Variaveis de utilizacao (pesquisa e montagem)
	Local cCombo := "1"
	Local lOk	 := .T.
	Local aResul := { STR0011, STR0012 } //"1=Todos"##"2=Ativos"

	//Montagem do TRB
	Local cAliasTRB	:= GetNextAlias()
	Local aDBF		:= {}
	Local aTRB		:= {}
	Local oTempTRB

	//Salva a marca
	Private cMARCA  := GetMark()

	//Variaveis de Sistema
	lInverte := .F.

	aDBF := {}
	aAdd( aDBF, { "TNX_OK", "C", 02, 0 } )
	aAdd( aDBF, { "TNX_NUMRIS", "C", 09, 0 } )
	aAdd( aDBF, { "TNX_AGENTE", "C", TAMSX3( "TNX_AGENTE" )[1], 0 } )
	aAdd( aDBF, { "TNX_NOMAGE", "C", 20, 0 } )

	aTRB := {}
	aAdd( aTRB, { "TNX_OK", NIL, " ", } )
	aAdd( aTRB, { "TNX_NUMRIS", NIL, STR0014, } ) //"Número Risco"
	aAdd( aTRB, { "TNX_AGENTE", NIL, STR0015, } ) //"Código Agente"
	aAdd( aTRB, { "TNX_NOMAGE", NIL, STR0016, } ) //"Nome Agente"

	oTempTRB := FWTemporaryTable():New( cAliasTRB, aDBF )
	oTempTRB:AddIndex( "1", { "TNX_NUMRIS", "TNX_NOMAGE" } )
	oTempTRB:AddIndex( "2", { "TNX_NOMAGE", "TNX_NUMRIS" } )
	oTempTRB:AddIndex( "3", { "TNX_AGENTE" } )
	oTempTRB:AddIndex( "4", { "TNX_OK" } )
	oTempTRB:Create()

	fFiltraMark( cAliasTRB, cCombo ) //Busca os registros a serem apresentados no Mark

	If ( cAliasTRB )->( Reccount() ) <= 0
		ShowHelpDlg( STR0017, { STR0018 }, 1, ;	//"ATENÇÃO" ## "Não existem riscos cadastrados."
								{ STR0019 }, 1 ) //"Incluir algum risco para relacionar ao o EPI."
	Else
		Define MsDialog oDialog Title OemToAnsi( STR0001 ) From 64, 160 To 580, 730 OF oMainWnd Pixel //"Epi x Risco"

			//Painel onde será feita a disposição da tela
			oPnlPai := TPanel():New( , , , oDialog, , , , , , , , .F., .F. )
				oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

				//--- DESCRICAO ( TOPO )
				oPanel := TPanel():New( 0, 0, , oPnlPai, , .T., .F., , , 0, 45, .F., .F. )
					oPanel:Align := CONTROL_ALIGN_TOP

					// Grupo - Area Texto
					TGroup():New( 008, 005, 045, 280, "", oPanel, , , .T.)

					TSay():New( 19, 08, { | | OemtoAnsi( STR0020 ) }, oPanel, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 010 ) //"Estes são os riscos cadastrados no sistema."
					TSay():New( 29, 08, { | | OemtoAnsi( STR0021 ) }, oPanel, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 010 ) //"Selecione aqueles em que o EPI deve ser utilizado."

				//--- PESQUISAR
				//Define as opcoes de Pesquisa
				aCbxPesq := aClone( aDescIdx )
				aAdd( aCbxPesq, STR0023 ) //"Código + Descrição"
				aAdd( aCbxPesq, STR0024 ) //"Descrição + Código"
				aAdd( aCbxPesq, STR0025 ) //"Agente"
				aAdd( aCbxPesq, STR0026 ) //"Marcados"
				cCbxPesq := aCbxPesq[ 1 ]

				oPanel := TPanel():New( 0, 0, , oPnlPai, , .T., .F., , , 0, 35, .F., .F. )
					oPanel:Align := CONTROL_ALIGN_TOP

					oCbxPesq := TComboBox():New( 010, 005, { | u | IIf( PCount() > 0, cCbxPesq := u, cCbxPesq ) }, ;
														aCbxPesq, 200, 08, oPanel, , { | | } ;
														, , , , .T., , , , , , , , , "cCbxPesq" )
					oCbxPesq:bChange := { | | fSetIndex( cAliasTRB, aCbxPesq, @cPesquisar, oMark, cCbxPesq ) }

					oPesquisar := TGet():New( 025 , 005 , { | u | IIf( PCount() > 0 , cPesquisar := u , cPesquisar ) }, oPanel, 200, 008, "", { | | .T. }, CLR_BLACK, CLR_WHITE, , ;
													.F., , .T. /*lPixel*/, , .F., { | | cCbxPesq <> aCbxPesq[ Len( aCbxPesq ) ] } /*bWhen*/, .F., .F., , .F. /*lReadOnly*/, .F., "", "cPesquisar", , , , .F. /*lHasButton*/ )

					oBtnPesq := TButton():New( 010, 220, STR0003, oPanel, { || fPesqTRB( cAliasTRB, oMark, cPesquisar ) }, ; //"Pesquisar"
													60, 10, , , .F., .T., .F., , .F., , , .F. )

					oMark := MsSelect():New( cAliasTRB, "TNX_OK", , aTRB, @lInverte, @cMarca, , , , oPnlPai )
					oMark:oBrowse:lHasMark	  := .T.
					oMark:oBrowse:lCanAllMark := .T.
					oMark:oBrowse:bAllMark	  := { || fInvMark( cAliasTRB ) }
					oMark:oBrowse:Align		  := CONTROL_ALIGN_ALLCLIENT

				//Filtrar Riscos
				oPnlFil := TPanel():New( 01, 01, , oPnlPai, , , , CLR_BLACK, CLR_WHITE, 0, 25, .F., .F. )
					oPnlFil:Align	:= CONTROL_ALIGN_TOP

					TSay():New( 010, 005, { | | OemtoAnsi( STR0022 ) }, oPnlFil, , , .F., .F., .F., .T., CLR_BLACK, CLR_WHITE, 200, 010 ) //"Mostrar Riscos:"
					oCbx := TComboBox():New( 005, 045, { | u | IIf( PCount() > 0, cCombo := u, cCombo ) }, aResul, 075, 60, oPnlFil, , { || }, , , , .T., , , , , , , , , "cCombo" )
					oCbx:bChange := { || fFiltraMark( cAliasTRB, cCombo, oMark ) }

		ACTIVATE MSDIALOG oDialog ON INIT EnchoiceBar( oDialog, { || oDialog:End() }, { || lOk := .F., oDialog:End() } )

		If lOk
			fGravCols( @oGet, cAliasTRB ) //Funcao para copiar planos a GetDados
		EndIf
	EndIf

	//Deleta a tabela temporária
	oTempTRB:Delete()

	//Retorna a área
	RestArea( aArea )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} fSetIndex
Seta o indice para pesquisa

@return

@param cAliasTRB	- Alias do TRB ( Obrigatório )
@param aCbxPesq		- Indices de pesquisa do markbrowse. ( Obrigatório )
@param cPesquisar	- Valor da Pesquisa ( Obrigatório )
@param oMark		- Objeto do MarkBrowse ( Obrigatório )
@Obs Função copiada do fonte MDTA232

@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------
Static Function fSetIndex( cAliasTRB, aCbxPesq, cPesquisar, oMark, cCbxPesq )

	Local nIndice := fRetInd( aCbxPesq, cCbxPesq ) // Retorna numero do indice selecionado

	// Efetua ordenacao do alias do markbrowse, conforme indice selecionado
	dbSelectArea( cAliasTRB )
	dbSetOrder( nIndice )
	dbGoTop()

	// Se o indice selecionado for o ultimo [Marcados]
	If nIndice == Len( aCbxPesq )
		cPesquisar := Space( Len( cPesquisar ) )	// Limpa campo de pesquisa
		oPesquisar:Disable()     // Desabilita campo de pesquisa
		oBtnPesq:Disable()       // Desabilita botao de pesquisa
		oMark:oBrowse:SetFocus() // Define foco no markbrowse
	Else
		oPesquisar:Enable()      // Habilita campo de pesquisa
		oBtnPesq:Enable()        // Habilita botao de pesquisa
		oBtnPesq:SetFocus()		// Define foco no campo de pesquisa
	Endif

	oMark:oBrowse:Refresh()

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fRetInd
Retorna o indice, em numero, do item selecionado no combobox

@return nIndice - Retorna o valor do Indice

@param aIndMrk - Indices de pesquisa do markbrowse. ( Obrigatório )
@obs Função copiada do fonte MDTA232.
@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------
Static Function fRetInd( aIndMrk, cCbxPesq )

	Local nIndice := aScan( aIndMrk, { | x | AllTrim( x ) == AllTrim( cCbxPesq ) } )

	// Se o indice nao foi encontrado nos indices pre-definidos, apresenta mensagem
	If nIndice == 0
		ShowHelpDlg( STR0017, { STR0027 }, 1, ; //"ATENÇÃO" ## "Índice não encontrado."
								{ STR0028 }, 1 ) //"Contate o administrador do sistema."
		nIndice := 1
	Endif

Return nIndice
//---------------------------------------------------------------------
/*/{Protheus.doc} fInvMark
Inverte a marcacao do browse

@return Null

@param cAliasTRB, Caracter, Alias do TRB (Obrigatório)

@samples fInvMark()

@author Jean Pytter da Costa
@since 24/09/14
/*/
//---------------------------------------------------------------------
Static Function fInvMark( cAliasTRB )

	Local aArea := GetArea()

	dbSelectArea( cAliasTRB )
	dbGoTop()
	While ( cAliasTRB )->( !Eof() )
		( cAliasTRB )->TNX_OK := IIf( Empty( ( cAliasTRB )->TNX_OK ), cMarca, Space( Len( ( cAliasTRB )->TNX_OK ) ) )
		( cAliasTRB )->( dbSkip() )
	End
	RestArea( aArea )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fPesqTRB
Funcao de Pesquisar no Browse.

@samples fPesqTRB()

@return Sempre verdadeiro

@param cAliasTRB	- Alias do MarkBrowse ( Obrigatório )
@param oMark 		- Objeto do MarkBrowse ( Obrigatório )
@Obs Função copiada do fonte MDTA232.
@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------
Static Function fPesqTRB( cAliasTRB, oMark, cPesquisar )

	Local nRecNoAtu := 1 //Variavel para salvar o recno
	Local lRet		:= .T.

	//Posiciona no TRB e salva o recno
	dbSelectArea( cAliasTRB )
	nRecNoAtu := RecNo()

	dbSelectArea( cAliasTRB )
	If dbSeek( AllTrim( cPesquisar ) )
		//Caso exista a pesquisa, posiciona
		oMark:oBrowse:SetFocus()
	Else
		//Caso nao exista, retorna ao primeiro recno e exibe mensagem
		dbGoTo( nRecNoAtu )
		ApMsgInfo( STR0029, STR0017 ) //"Valor não encontrado." ## "ATENÇÃO"
		oPesquisar:SetFocus()
		lRet := .F.
	EndIf

	// Atualiza markbrowse
	oMark:oBrowse:Refresh( .T. )

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} fFiltraMark
Filtra os Riscos para o MarkBrowse

@return Null

@param cAliasTRB, Caracter, Alias do TRB
@param cCombo, Caracter, Opção selecionada do Combo
@param [oObj], Objeto, Objeto a ser atualizado
@param aDBF, Array, Indica os campos do TRB

@samples fFiltraMark( 'SGC00001' , '1' , , { } )
@Obs Função copiada do fonte MDTA215.

@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------
Static Function fFiltraMark( cAliasTRB, cCombo, oObj )

	Local nPosRis	:= aSCAN( aHEADER, { |x| Trim( Upper( x[2] ) ) == "TNX_NUMRIS" } )
	Local aColsM	:= aClone( oGet:aCols )
	Local cAliasTNX := GetNextAlias()
	Local cGetDB  	:= TcGetDb() //Traz a base de dados
	Local cValBrc 	:= "ISNULL" //Validação de ISNULL tratada
	Local cRiscos	:= ""
	Local nCols

	//Define o ISNULL de acordo com a base de dados
	If cGetDB == "ORACLE"
		cValBrc := "NVL"
	ElseIf "DB2" $ cGetDB .Or. cGetDB == "POSTGRES"
		cValBrc := "COALESCE"
	Else
		cValBrc := "ISNULL"
	EndIf

	If Select( cAliasTRB ) > 0 //Verifica existencia de tabela para dar ZAP.
		dbSelectArea( cAliasTRB )
		ZAP //Remove todos os registros da tabela corrente.
	EndIf

	For nCols := 1 To Len( aCOlsM )
		If !aTail( aColsM[ nCols ] )
			cRiscos += AllTrim( aColsM[ nCols, nPosRis ] ) + "/"
		EndIf
	Next nCols

	cQuery := "SELECT "
	cQuery += " TN0.TN0_NUMRIS TNX_NUMRIS, TMA.TMA_AGENTE TNX_AGENTE, TMA.TMA_NOMAGE TNX_NOMAGE, " + cValBrc + "(CTT.CTT_DESC01,'TODOS') TN0_NOMECC, "
	cQuery += cValBrc + "(SRJ.RJ_DESC,'TODAS') TN0_DESCFU, " + cValBrc + "(TN5.TN5_NOMTAR, 'TODAS') TN0_NOMTAR, "
	cQuery += cValBrc + "(SQB.QB_DESCRIC, 'TODOS') TN0_DESCDP, TN0.TN0_DTAVAL, TN0.TN0_DTELIM, TN0.TN0_QTAGEN, TN0.TN0_UNIMED "
	cQuery += "FROM " + RetSqlName( "TN0" ) +  " TN0 "
	cQuery += "INNER JOIN " + RetSqlName( "TMA" ) +  " TMA ON TMA.TMA_FILIAL = " + ValToSql( xFilial( "TMA" ) ) + " AND TMA.TMA_AGENTE = TN0.TN0_AGENTE AND TMA.D_E_L_E_T_ <> '*' "
	cQuery += "LEFT JOIN " + RetSqlName( "CTT" ) +  " CTT ON CTT.CTT_FILIAL = " + ValToSql( xFilial( "CTT" ) ) + " AND CTT.CTT_CUSTO = TN0.TN0_CC AND CTT.D_E_L_E_T_ <> '*' "
	cQuery += "LEFT JOIN " + RetSqlName( "SRJ" ) +  " SRJ ON SRJ.RJ_FILIAL = " + ValToSql( xFilial( "SRJ" ) ) + " AND SRJ.RJ_FUNCAO = TN0.TN0_CODFUN AND SRJ.D_E_L_E_T_ <> '*' "
	cQuery += "LEFT JOIN " + RetSqlName( "TN5" ) +  " TN5 ON TN5.TN5_FILIAL = " + ValToSql( xFilial( "TN5" ) ) + " AND TN5.TN5_CODTAR = TN0.TN0_CODTAR AND TN5.D_E_L_E_T_ <> '*' "
	cQuery += "LEFT JOIN " + RetSqlName( "SQB" ) +  " SQB ON SQB.QB_FILIAL = " + ValToSql( xFilial( "SQB" ) ) + " AND SQB.QB_DEPTO = TN0.TN0_DEPTO AND SQB.D_E_L_E_T_ <> '*' "
	cQuery += "WHERE TN0.TN0_FILIAL = " + ValToSql( xFilial( "TN0" ) ) + " AND TN0.D_E_L_E_T_ <> '*' "
	If cCombo == "2" //Riscos Ativos
		cQuery += "AND TN0.TN0_DTELIM = ''"
	EndIf

	//Ajusta a query
	cQuery := ChangeQuery( cQuery )

	//Realiza a busca dos registros
	MPSysOpenQuery( cQuery, cAliasTNX )

	//Grava os registros a tabela do Mark
	dbSelectArea( cAliasTNX )
	( cAliasTNX )->( dbGoTop() )
	While ( cAliasTNX )->( !Eof() )
		RecLock( cAliasTRB, .T. )
		If ( cAliasTNX )->TNX_NUMRIS $ cRiscos
			( cAliasTRB )->TNX_OK	:= cMARCA
		Else
			( cAliasTRB )->TNX_OK	:= ""
		EndIf
		( cAliasTRB )->TNX_NUMRIS	:= ( cAliasTNX )->TNX_NUMRIS
		( cAliasTRB )->TNX_AGENTE	:= ( cAliasTNX )->TNX_AGENTE
		( cAliasTRB )->TNX_NOMAGE	:= ( cAliasTNX )->TNX_NOMAGE
		( cAliasTRB )->( MsUnlock() )
		( cAliasTNX )->( dbSkip() )
	End

	( cAliasTNX )->( dbCloseArea() )

	dbSelectArea( cAliasTRB )
	dbGoTop()

	If ValType( oObj ) == "O"
		oObj:oBrowse:Refresh()
		If ( cAliasTRB )->( Reccount() ) <= 0
			oObj:oBrowse:Disable()
		Else
			oObj:oBrowse:Enable()
		EndIf
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} fGravCols
Copia os planos selecionados no markbrowse para a GetDados.

@Obs Função copiada do fonte MDTA232.

@author Jean Pytter da Costa
@since 24/09/2014
@return .T.
/*/
//---------------------------------------------------------------------
Static Function fGravCols( oGet, cAliasTRB )
	Local nCols
	Local nPosCod := 1
	Local nPosDes := 2
	Local nPosFUC := 3
	Local aColsOk := {}
	Local aHeadOk := {}
	Local aColsTp := {}

	aColsOk := aClone( oGet:aCols )
	aHeadOk := aClone( oGet:aHeader )
	aColsTp := BLANKGETD( aHeadOk )

	nPosCod := aScan( aHeadOk, { |x| Trim( Upper( x[2] ) ) == "TNX_NUMRIS" } )
	nPosDes := aScan( aHeadOk, { |x| Trim( Upper( x[2] ) ) == "TNX_NOMAGE" } )
	nPosFUC := aScan( aHeadOk, { |x| Trim( Upper( x[2] ) ) == "TNX_AGENTE" } )

	For nCols := Len( aColsOk ) To 1 Step -1 //Deleta do aColsOk os registros - não marcados; não estiver encontrado
		dbSelectArea( cAliasTRB )
		dbSetOrder( 1 )
		If !dbSeek( aColsOK[ nCols, nPosCod ] ) .Or. Empty( ( cAliasTRB )->TNX_OK )
			aColsOK[ nCols, Len( aColsOK[ nCols ] ) ] := .T.
		EndIf
	Next nCols

	dbSelectArea( cAliasTRB )
	dbGoTop()
	While ( cAliasTRB )->( !Eof() )
		If !Empty( ( cAliasTRB )->TNX_OK ) .And. aScan( aColsOk, { |x| x[ nPosCod ] == ( cAliasTRB )->TNX_NUMRIS } ) == 0
			aAdd( aColsOk, aClone( aColsTp[ 1 ] ) )
			aColsOk[ Len( aColsOk ), nPosCod ] := ( cAliasTRB )->TNX_NUMRIS
			aColsOk[ Len( aColsOk ), nPosDes ] := ( cAliasTRB )->TNX_NOMAGE
			aColsOk[ Len( aColsOk ), nPosFUC ] := ( cAliasTRB )->TNX_AGENTE
		EndIf
		( cAliasTRB )->( dbSkip() )
	End

	If Len( aColsOK ) <= 0
		aColsOK := aClone( aColsTp )
	EndIf

	aSort( aColsOK, , , { | x, y | x[ 1 ] < y[ 1 ] } ) //Ordena por risco
	oGet:aCols := aClone( aColsOK )
	oGet:oBrowse:Refresh()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fGrava
Adiciona no markbrowse.

@return .T.

@samples fGrava()
@Obs Função copiada do fonte MDTA215.

@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------
Static Function fGrava()

	Local i, j, nX
	Local nPosCod	:= aScan( aHeader , { | x | Trim( Upper( x[ 2 ] ) ) == "TNX_NUMRIS" } )
	Local aColsOk	:= aClone( oGet:aCols )

	If lSigaMdtPs
		nOrd	:= 4
		cKey	:= xFilial( "TNX" ) + cCliMdtPs
		cWhile	:= "xFilial( 'TNX' ) + TNX->TNX_CLIENT + TNX->TNX_LOJA + TNX->TNX_EPI == TNX->TNX_FILIAL + cCliMdtPs + TN3->TN3_CODEPI"
	Else
		nOrd	:= 1
		cKey	:= xFilial( "TNX" )
		cWhile	:= " TNX->TNX_FILIAL == '" + xFilial( "TNX" ) + "' .AND. TNX->TNX_EPI == '" + TN3->TN3_CODEPI + "' "
	EndIf

	If Len( aColsOK ) > 0
		//Coloca os deletados por primeiro
		aSORT( aColsOK , , , { | x , y | x[ Len( aColsOK[ 1 ] ) ] .and. !y[ Len( aColsOK[ 1 ] ) ] } )

		For i := 1 to Len( aColsOK )
			If !aTail( aColsOk[i] ) .and. !Empty( aColsOK[ i , nPosCod ] )
				dbSelectArea( "TNX" )
				dbSetOrder( nOrd )
				If dbSeek( cKey + aColsOK[ i , nPosCod ] + TN3->TN3_CODEPI )
					RecLock( "TNX" , .F. )
				Else
					RecLock( "TNX" , .T. )
				Endif
				For j := 1 to FCount()
					If "_FILIAL" $ Upper( FieldName( j ) )
						FieldPut( j , xFilial( "TNX" ) )
					ElseIf "_EPI" $ Upper( FieldName( j ) )
						FieldPut( j , TN3->TN3_CODEPI )
					ElseIf "_CLIENT" $ Upper( FieldName( j ) )
						FieldPut( j , SA1->A1_COD )
					ElseIf "_LOJA" $ Upper( FieldName( j ) )
						FieldPut( j , SA1->A1_LOJA )
					ElseIf ( nPos := aScan( aHeader , { | x | Trim( Upper( x[ 2 ] ) ) == Trim( Upper( FieldName( j ) ) ) } ) ) > 0
						FieldPut( j , aColsOK[ i , nPos ] )
					Endif
				Next j
				TNX->( MsUnlock() )
			Elseif !Empty( aColsOK[ i , nPosCod ] )
				dbSelectArea( "TNX" )
				dbSetOrder( nOrd )
				If dbSeek( cKey + aColsOK[ i , nPosCod ] + TN3->TN3_CODEPI )
					RecLock( "TNX" , .F. )
					TNX->( DbDelete() )
					TNX->( MsUnlock() )
				Endif
			Endif
		Next i
	Endif
	dbSelectArea("TNX")
	dbSetOrder( nOrd )
	dbSeek( cKey )
	While !Eof() .and. &( cWhile )
		If aScan( aColsOK , { | x | x[ nPosCod ] == TNX->TNX_NUMRIS .AND. !x[ Len( x ) ] } ) == 0
			RecLock( "TNX" , .F. )
			TNX->( DbDelete() )
			TNX->( MsUnlock() )
		Endif
		dbSelectArea( "TNX" )
		dbSkip()
	End

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} fLinhaOk
Validacao de Linha padrao das GetDados

@return - Lógico - Indica se esta tudo correto na linha

@param oFolder	- Objeto do Folder ( Obrigatório )
@param aRelacio - Array contendo os relacionamentos ( Obrigatório )
@param lFim		- Indica se eh chamado pelo TudoOk
@param nPosic   - Posicao de Relacionamento a ser validado

@sample
fLinhaOK( 1 , aRelacio )
@Obs Função copiada do fonte MDTA232.
@author Jean Pytter da Costa
@since 24/09/2014
/*/
//---------------------------------------------------------------------
Static Function fLinhaOK( lFim )

	//Variaveis auxiliares
	Local f
	Local aColsOk 	:= {}, aHeadOk := {}
	Local nPosCod 	:= 1, nAt := 1, nPosSec := 0
	Local nCols, nHead
	Local lRet 	:= .T.
	Local lEntra 	:= .T.

	Default lFim 	:= .F.//Define fim como .F.

	//Salva o aCols e aHeader de acordo com a posicao, o nAt da GetDados posicionada e o código de acordo com sua posicao
	aColsOk	:= aClone( oGet:aCols )
	aHeadOk	:= aClone( aHeader )
	nAt			:= oGet:nAt
	nPosCod	:= aScan( aHeadOk , { | x | AllTrim( Upper( x[ 2 ] ) ) == "TNX_NUMRIS" } )

	//Percorre aCols
	For f:= 1 to Len( aColsOk )
		If Empty( aColsOk [ f , nPosCod ] ) //Verifica se o Acols esta vazio para adicionar pelo botão.
			lEntra := .F.
		EndIf
		If !aColsOk[ f , Len( aColsOk[ f ] ) ] .And. lEntra
			If lFim .or. f == nAt//Caso seja final ou linha atual
				//Verifica se os campos obrigatórios estão preenchidos
				If Empty( aColsOk[ f , nPosCod ] ) .And. If( lFim , Len( aColsOk ) <> 1 , .T. )
					//Mostra mensagem de Help
					Help( 1 , " " , "OBRIGAT2" , , aHeadOk[ nPosCod , 1 ] , 3 , 0 )
					lRet := .F.
					Exit
				Endif
			Endif
			//Verifica se é somente LinhaOk
			If f <> nAt .and. !aColsOk[ nAt , Len( aColsOk[ nAt ] ) ]
				If aColsOk[ f , nPosCod ] == aColsOk[ nAt , nPosCod ]
					//Mostra mensagem de Help
					Help( " " , 1 , "JAEXISTINF" , , aHeadOk[ nPosCod , 1 ] )
					lRet := .F.
					Exit
				Endif
			Endif
		Endif
	Next f

	//Posiciona tabelas em fim de arquivo
	PutFileInEof( "TNX" )
	PutFileInEof( "TN0" )

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} fEpiS2240
Função para validar o envio do evento S-2240 ao TAF, na pós validação
do cadastro valida os dados e após a gravação envia ao TAF

@type Function

@sample fEpiS2240( .T. )

@param lValid, Lógico, indica se fará a validação dos dados ou o envio

@author  Luis Fellipy Bett
@since   05/08/2019
/*/
//-------------------------------------------------------------------
Static Function fEpiS2240( lEnvio )

	Local lRet		:= .T.
	Local nCont		:= 0
	Local nPosRis	:= 0
	Local aColsOk	:= {}
	Local aHeadOk	:= {}
	Local aFuncs	:= {}
	Local aCampos	:= {}
	Local oTempFunc

	//Define por padrão como sendo envio de informações
	Default lEnvio := .T.

	//Pega o aCols e a posição do Risco na Grid
	aColsOk	:= aClone( oGet:aCols )
	aHeadOk	:= aClone( aHeader )
	nPosRis	:= aScan( aHeadOk, { | x | AllTrim( Upper( x[ 2 ] ) ) == "TNX_NUMRIS" } )

	//Monta a tabela temporária
	aCampos := {	{ "TMPA_MATRI", "C", TAMSX3( "RA_MAT" )[ 1 ], 0 }, ;
					{ "TMPA_NOMFU", "C", TAMSX3( "RA_NOME" )[ 1 ], 0 }, ;
					{ "TMPA_DTINI", "D", 8, 0 }, ;
					{ "TMPA_DTFIM", "D", 8, 0 }, ;
					{ "TMPA_TAREF", "C", TAMSX3( "TN5_NOMTAR" )[ 1 ], 0 }, ;
					{ "TMPA_CCUST", "C", TAMSX3( "CTT_DESC01" )[ 1 ], 0 }, ;
					{ "TMPA_FUNCA", "C", TAMSX3( "RJ_DESC" )[ 1 ], 0 }, ;
					{ "TMPA_NVFIL", "C", TAMSX3( "RA_FILIAL" )[ 1 ], 0 }, ;
					{ "TMPA_DEPTO", "C", TAMSX3( "TM0_DEPTO" )[ 1 ], 0 } }

	oTempFunc := FWTemporaryTable():New( "TMPA", aCampos )
	oTempFunc:AddIndex( "1", { "TMPA_NOMFU" }  )
	oTempFunc:Create()

	//Posiciona na tabela de Riscos para buscar as informações
	dbSelectArea( "TN0" )
	dbSetOrder( 1 )

	//Percorre aCols para pegar os Riscos
	For nCont := 1 To Len( aColsOk )
		If !aTail( aColsOk[ nCont ] ) //Caso a linha não esteja deletada
			If dbSeek( xFilial( "TN0" ) + aColsOk[ nCont, nPosRis ] )

				RegToMemory( "TN0" )

				MDT180BFUN()

				dbSelectArea( "TMPA" )
				dbGoTop()
				While TMPA->( !Eof() )
					If aScan( aFuncs, { |x| x[1] == TMPA->TMPA_MATRI } ) == 0
						aAdd( aFuncs, { TMPA->TMPA_MATRI, , TN0->TN0_NUMRIS } )
					EndIf
					TMPA->( dbSkip() )
				End
			EndIf
		EndIf
	Next nCont

	oTempFunc:Delete() //Deleta a tabela temporária

	If Len( aFuncs ) > 0 //Se houverem funcionários expostos
		lRet := MDTIntEsoc( "S-2240", 4, , aFuncs, lEnvio ) //Envia informações ao Governo
	EndIf

Return lRet
