/*
Funcao      : getExcelJsBin64
Parâmetros  :
Retorno     : retorna uma string com a função javascript exceljs.bare.js no formato base 64
Objetivos   : Disponibilizar a função exceljs.bare.js para importação e exportação de dados via planilha eletrônica
Autor       : Maurício Frison
OBS         : Possui esses dois js nesta ordem
              https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.26.0/polyfill.js
              exceljs.js // https://github.com/exceljs/exceljs
Data 	    : Setembro/2022
*/

Function getExcelBin64()
Local cVar
begincontent var cVar
KGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT0iZnVuY3Rpb24iJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrbysiJyIpO3Rocm93IGYuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0
dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT0iZnVuY3Rpb24iJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKInVzZSBzdHJpY3QiOwoKX2RlcmVxXygzMjcpOwoKX2RlcmVxXygzMjgpOwoKX2RlcmVxXygyKTsKCmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHsKICB0aHJvdyBuZXcg
RXJyb3IoIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWQiKTsKfQpnbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlOwoKdmFyIERFRklORV9QUk9QRVJUWSA9ICJkZWZpbmVQcm9wZXJ0eSI7CmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7CiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwgewogICAgd3JpdGFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogdmFsdWUKICB9KTsKfQoKZGVmaW5lKFN0cmluZy5wcm90b3R5
cGUsICJwYWRMZWZ0IiwgIiIucGFkU3RhcnQpOwpkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgInBhZFJpZ2h0IiwgIiIucGFkRW5kKTsKCiJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGwiLnNwbGl0KCIsIikuZm9yRWFjaChmdW5jdGlvbiAo
a2V5KSB7CiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTsKfSk7Cn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQp9LHsiMiI6MiwiMzI3IjozMjcsIjMyOCI6MzI4fV0sMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cl9kZXJlcV8oMTMwKTsKbW9kdWxlLmV4
cG9ydHMgPSBfZGVyZXFfKDIzKS5SZWdFeHAuZXNjYXBlOwoKfSx7IjEzMCI6MTMwLCIyMyI6MjN9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7CiAgcmV0dXJuIGl0Owp9OwoKfSx7fV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBjb2YgPSBfZGVyZXFfKDE4KTsKbW9kdWxlLmV4cG9y
dHMgPSBmdW5jdGlvbiAoaXQsIG1zZykgewogIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7CiAgcmV0dXJuICtpdDsKfTsKCn0seyIxOCI6MTh9XSw1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXQp2YXIgVU5TQ09QQUJMRVMgPSBfZGVyZXFfKDEyOCkoJ3Vuc2NvcGFibGVzJyk7CnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlOwppZiAoQXJy
YXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSBfZGVyZXFfKDQyKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHsKICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTsKfTsKCn0seyIxMjgiOjEyOCwiNDIiOjQyfV0sNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHsKICBpZiAoIShpdCBpbnN0YW5j
ZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHsKICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7CiAgfSByZXR1cm4gaXQ7Cn07Cgp9LHt9XSw3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcg
aXMgbm90IGFuIG9iamVjdCEnKTsKICByZXR1cm4gaXQ7Cn07Cgp9LHsiNTEiOjUxfV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKQondXNlIHN0cmljdCc7CnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTsKdmFyIHRvQWJzb2x1dGVJbmRleCA9IF9kZXJlcV8oMTE0KTsKdmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpOwoKbW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGlu
IHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7CiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTsKICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpOwogIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7CiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7CiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkOwogIHZhciBjb3VudCA9IE1hdGgubWlu
KChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pOwogIHZhciBpbmMgPSAxOwogIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHsKICAgIGluYyA9IC0xOwogICAgZnJvbSArPSBjb3VudCAtIDE7CiAgICB0byArPSBjb3VudCAtIDE7CiAgfQogIHdoaWxlIChjb3VudC0tID4gMCkgewogICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dOwogICAgZWxzZSBkZWxldGUgT1t0b107CiAgICB0byArPSBpbmM7CiAgICBmcm9tICs9
IGluYzsKICB9IHJldHVybiBPOwp9OwoKfSx7IjExNCI6MTE0LCIxMTgiOjExOCwiMTE5IjoxMTl9XSw5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpCid1c2Ugc3RyaWN0JzsKdmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpOwp2YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpOwp2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24g
ZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykgewogIHZhciBPID0gdG9PYmplY3QodGhpcyk7CiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTsKICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpOwogIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBs
ZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpOwogIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlOwogIHJldHVybiBPOwp9OwoKfSx7IjExNCI6MTE0LCIxMTgiOjExOCwiMTE5IjoxMTl9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHsKICB2YXIgcmVzdWx0ID0gW107CiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1
bHQsIElURVJBVE9SKTsKICByZXR1cm4gcmVzdWx0Owp9OwoKfSx7IjM5IjozOX1dLDExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZgovLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlcwp2YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpOwp2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7CnZhciB0b0Fic29sdXRlSW5kZXggPSBfZGVyZXFfKDExNCk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhp
cywgZWwsIGZyb21JbmRleCkgewogICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpOwogICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTsKICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7CiAgICB2YXIgdmFsdWU7CiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxl
IChsZW5ndGggPiBpbmRleCkgewogICAgICB2YWx1ZSA9IE9baW5kZXgrK107CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTsKICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3QKICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHsKICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJu
IElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7CiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7CiAgfTsKfTsKCn0seyIxMTQiOjExNCwiMTE3IjoxMTcsIjExOCI6MTE4fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAwIC0+IEFycmF5I2ZvckVhY2gKLy8gMSAtPiBBcnJheSNtYXAKLy8gMiAtPiBBcnJheSNmaWx0ZXIKLy8gMyAtPiBBcnJheSNzb21lCi8vIDQgLT4gQXJyYXkjZXZlcnkKLy8gNSAtPiBBcnJheSNmaW5kCi8vIDYgLT4gQXJyYXkjZmluZEluZGV4CnZhciBjdHggPSBfZGVy
ZXFfKDI1KTsKdmFyIElPYmplY3QgPSBfZGVyZXFfKDQ3KTsKdmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpOwp2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7CnZhciBhc2MgPSBfZGVyZXFfKDE1KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkgewogIHZhciBJU19NQVAgPSBUWVBFID09IDE7CiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjsKICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMzsKICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7CiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09
IDY7CiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7CiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjOwogIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHsKICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpOwogICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pOwogICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7CiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpOwogICAgdmFyIGluZGV4ID0gMDsKICAgIHZhciByZXN1bHQgPSBJU19N
QVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkOwogICAgdmFyIHZhbCwgcmVzOwogICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7CiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdOwogICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pOwogICAgICBpZiAoVFlQRSkgewogICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwCiAgICAgICAgZWxzZSBpZiAocmVz
KSBzd2l0Y2ggKFRZUEUpIHsKICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWUKICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmQKICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleAogICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyCiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeQogICAgICB9CiAgICB9CiAgICBy
ZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0OwogIH07Cn07Cgp9LHsiMTE4IjoxMTgsIjExOSI6MTE5LCIxNSI6MTUsIjI1IjoyNSwiNDciOjQ3fV0sMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTsKdmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpOwp2YXIgSU9iamVjdCA9IF9kZXJlcV8oNDcpOwp2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0
aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7CiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pOwogIHZhciBPID0gdG9PYmplY3QodGhhdCk7CiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pOwogIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7CiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwOwogIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTsKICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHsKICAgIGlmIChpbmRleCBpbiBzZWxmKSB7CiAgICAgIG1lbW8gPSBzZWxmW2luZGV4
XTsKICAgICAgaW5kZXggKz0gaTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBpbmRleCArPSBpOwogICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHsKICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7CiAgICB9CiAgfQogIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7CiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2lu
ZGV4XSwgaW5kZXgsIE8pOwogIH0KICByZXR1cm4gbWVtbzsKfTsKCn0seyIxMTgiOjExOCwiMTE5IjoxMTksIjMiOjMsIjQ3Ijo0N31dLDE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7CnZhciBpc0FycmF5ID0gX2RlcmVxXyg0OSk7CnZhciBTUEVDSUVTID0gX2RlcmVxXygxMjgpKCdzcGVjaWVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkgewogIHZhciBDOwogIGlmIChpc0FycmF5KG9yaWdpbmFsKSkgewogICAgQyA9IG9yaWdp
bmFsLmNvbnN0cnVjdG9yOwogICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2sKICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7CiAgICBpZiAoaXNPYmplY3QoQykpIHsKICAgICAgQyA9IENbU1BFQ0lFU107CiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkOwogICAgfQogIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQzsKfTsKCn0seyIxMjgiOjEyOCwiNDkiOjQ5LCI1MSI6NTF9XSwxNTpb
ZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkKdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9kZXJlcV8oMTQpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkgewogIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7Cn07Cgp9LHsiMTQiOjE0fV0sMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBh
RnVuY3Rpb24gPSBfZGVyZXFfKDMpOwp2YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTsKdmFyIGludm9rZSA9IF9kZXJlcV8oNDYpOwp2YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlOwp2YXIgZmFjdG9yaWVzID0ge307Cgp2YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykgewogIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7CiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJzsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXct
ZnVuYwogICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpOwogIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHsKICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7CiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3Mu
Li4gKi8pIHsKICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTsKICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7CiAgfTsKICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlOwogIHJldHVybiBib3VuZDsKfTsKCn0seyIzIjozLCI0NiI6NDYsIjUxIjo1MX1dLDE3OltmdW5jdGlvbihfZGVyZXFfLG1v
ZHVsZSxleHBvcnRzKXsKLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKCkKdmFyIGNvZiA9IF9kZXJlcV8oMTgpOwp2YXIgVEFHID0gX2RlcmVxXygxMjgpKCd0b1N0cmluZ1RhZycpOwovLyBFUzMgd3JvbmcgaGVyZQp2YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJzsKCi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yCnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkg
ewogIHRyeSB7CiAgICByZXR1cm4gaXRba2V5XTsKICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgdmFyIE8sIFQsIEI7CiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnCiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2UKICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFQKICAgIC8vIGJ1aWx0aW5UYWcgY2FzZQogICAgOiBBUkcgPyBj
b2YoTykKICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2sKICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCOwp9OwoKfSx7IjEyOCI6MTI4LCIxOCI6MTh9XSwxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpOwp9OwoKfSx7fV0sMTk6
W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBkUCA9IF9kZXJlcV8oNzIpLmY7CnZhciBjcmVhdGUgPSBfZGVyZXFfKDcxKTsKdmFyIHJlZGVmaW5lQWxsID0gX2RlcmVxXyg5Myk7CnZhciBjdHggPSBfZGVyZXFfKDI1KTsKdmFyIGFuSW5zdGFuY2UgPSBfZGVyZXFfKDYpOwp2YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTsKdmFyICRpdGVyRGVmaW5lID0gX2RlcmVxXyg1NSk7CnZhciBzdGVwID0gX2RlcmVxXyg1Nyk7CnZhciBzZXRTcGVjaWVzID0gX2RlcmVxXygxMDApOwp2YXIgREVT
Q1JJUFRPUlMgPSBfZGVyZXFfKDI5KTsKdmFyIGZhc3RLZXkgPSBfZGVyZXFfKDY2KS5mYXN0S2V5Owp2YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7CnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnOwoKdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkgewogIC8vIGZhc3QgY2FzZQogIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTsKICB2YXIgZW50cnk7CiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTsKICAvLyBmcm96ZW4gb2JqZWN0IGNhc2UKICBmb3IgKGVu
dHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikgewogICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7CiAgfQp9OwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7CiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7CiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7CiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlw
ZQogICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleAogICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeQogICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5CiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemUKICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgfSk7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgewogICAgICAvLyAyMy4xLjMu
MSBNYXAucHJvdG90eXBlLmNsZWFyKCkKICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpCiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHsKICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHsKICAgICAgICAgIGVudHJ5LnIgPSB0cnVlOwogICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7CiAgICAgICAgICBkZWxldGUg
ZGF0YVtlbnRyeS5pXTsKICAgICAgICB9CiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhhdFtTSVpFXSA9IDA7CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSkKICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpCiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTsKICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkp
OwogICAgICAgIGlmIChlbnRyeSkgewogICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uOwogICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wOwogICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07CiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTsKICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0OwogICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7CiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7CiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5f
bCA9IHByZXY7CiAgICAgICAgICB0aGF0W1NJWkVdLS07CiAgICAgICAgfSByZXR1cm4gISFlbnRyeTsKICAgICAgfSwKICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpCiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKQogICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7CiAgICAgICAgdmFsaWRh
dGUodGhpcywgTkFNRSk7CiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpOwogICAgICAgIHZhciBlbnRyeTsKICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7CiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpOwogICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5CiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBl
bnRyeS5wOwogICAgICAgIH0KICAgICAgfSwKICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KQogICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSkKICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7CiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7CiAgICAgIH0KICAgIH0pOwogICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7CiAgICAgIGdldDogZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB2
YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gQzsKICB9LAogIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHsKICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7CiAgICB2YXIgcHJldiwgaW5kZXg7CiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnkKICAgIGlmIChlbnRyeSkgewogICAgICBlbnRyeS52ID0gdmFsdWU7CiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5CiAgICB9IGVsc2UgewogICAgICB0aGF0Ll9sID0gZW50cnkgPSB7CiAgICAgICAgaTog
aW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4CiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleQogICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZQogICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeQogICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5CiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwt
IHJlbW92ZWQKICAgICAgfTsKICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7CiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTsKICAgICAgdGhhdFtTSVpFXSsrOwogICAgICAvLyBhZGQgdG8gaW5kZXgKICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7CiAgICB9IHJldHVybiB0aGF0OwogIH0sCiAgZ2V0RW50cnk6IGdldEVudHJ5LAogIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkgewogICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmll
cywgW0BAaXRlcmF0b3JdCiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExCiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHsKICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0CiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmQKICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAg
ICAgLy8gcHJldmlvdXMKICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICB2YXIga2luZCA9IHRoYXQuX2s7CiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7CiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeQogICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wOwogICAgICAvLyBnZXQgbmV4dCBlbnRyeQogICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkg
ewogICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uCiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDsKICAgICAgICByZXR1cm4gc3RlcCgxKTsKICAgICAgfQogICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kCiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7CiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTsKICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTsKICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6
ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTsKCiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMgogICAgc2V0U3BlY2llcyhOQU1FKTsKICB9Cn07Cgp9LHsiMTAwIjoxMDAsIjEyNSI6MTI1LCIyNSI6MjUsIjI5IjoyOSwiMzkiOjM5LCI1NSI6NTUsIjU3Ijo1NywiNiI6NiwiNjYiOjY2LCI3MSI6NzEsIjcyIjo3MiwiOTMiOjkzfV0sMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09O
CnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7CnZhciBmcm9tID0gX2RlcmVxXygxMCk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHsKICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkgewogICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyAiI3RvSlNPTiBpc24ndCBnZW5lcmljIik7CiAgICByZXR1cm4gZnJvbSh0aGlzKTsKICB9Owp9OwoKfSx7IjEwIjoxMCwiMTciOjE3fV0sMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7
CnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpOwp2YXIgZ2V0V2VhayA9IF9kZXJlcV8oNjYpLmdldFdlYWs7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwp2YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7CnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpOwp2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSBfZGVyZXFfKDEyKTsKdmFyICRoYXMgPSBfZGVyZXFfKDQxKTsKdmFyIHZhbGlkYXRlID0gX2RlcmVxXygxMjUpOwp2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2Qo
NSk7CnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpOwp2YXIgaWQgPSAwOwoKLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzCnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHsKICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpOwp9Owp2YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLmEgPSBbXTsKfTsKdmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9y
ZSwga2V5KSB7CiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiBpdFswXSA9PT0ga2V5OwogIH0pOwp9OwpVbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHsKICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHsKICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpOwogICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07CiAgfSwKICBoYXM6IGZ1bmN0aW9uIChrZXkpIHsKICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpOwog
IH0sCiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7CiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7CiAgfSwKICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkgewogICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHsKICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7CiAgICB9KTsKICAgIGlmICh+aW5kZXgpIHRoaXMuYS5z
cGxpY2UoaW5kZXgsIDEpOwogICAgcmV0dXJuICEhfmluZGV4OwogIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gewogIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikgewogICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkgewogICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpOwogICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGUKICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBp
ZAogICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0cwogICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7CiAgICB9KTsKICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7CiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpCiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSkKICAgICAgJ2RlbGV0ZSc6
IGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTsKICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTsKICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpOwogICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07CiAgICAgIH0sCiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhh
cyhrZXkpCiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSkKICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7CiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7CiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTsKICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpOwogICAgICB9CiAg
ICB9KTsKICAgIHJldHVybiBDOwogIH0sCiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkgewogICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpOwogICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpOwogICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7CiAgICByZXR1cm4gdGhhdDsKICB9LAogIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmUKfTsKCn0seyIxMiI6MTIsIjEyNSI6MTI1LCIzOSI6MzksIjQxIjo0MSwi
NTEiOjUxLCI2Ijo2LCI2NiI6NjYsIjciOjcsIjkzIjo5M31dLDIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciByZWRlZmluZSA9IF9kZXJlcV8oOTQpOwp2YXIgcmVkZWZpbmVBbGwgPSBfZGVyZXFfKDkzKTsKdmFyIG1ldGEgPSBfZGVyZXFfKDY2KTsKdmFyIGZvck9mID0gX2RlcmVxXygzOSk7CnZhciBhbkluc3RhbmNlID0gX2RlcmVxXyg2KTsKdmFyIGlzT2JqZWN0ID0gX2RlcmVx
Xyg1MSk7CnZhciBmYWlscyA9IF9kZXJlcV8oMzUpOwp2YXIgJGl0ZXJEZXRlY3QgPSBfZGVyZXFfKDU2KTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX2RlcmVxXygxMDEpOwp2YXIgaW5oZXJpdElmUmVxdWlyZWQgPSBfZGVyZXFfKDQ1KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7CiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07CiAgdmFyIEMgPSBCYXNlOwogIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7CiAgdmFy
IHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTsKICB2YXIgTyA9IHt9OwogIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7CiAgICB2YXIgZm4gPSBwcm90b1tLRVldOwogICAgcmVkZWZpbmUocHJvdG8sIEtFWSwKICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHsKICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsKICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7CiAgICAgICAgcmV0
dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7CiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkgewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsKICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH0KICAgICAgICA6IGZ1
bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH0KICAgICk7CiAgfTsKICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgewogICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpOwogIH0pKSkgewogICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3IKICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7
CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7CiAgICBtZXRhLk5FRUQgPSB0cnVlOwogIH0gZWxzZSB7CiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpOwogICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZwogICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTsKICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hv
dWxkIHJldHVybiBmYWxzZQogICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pOwogICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseQogICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICAvLyBm
b3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWUKICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkgewogICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHMKICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7CiAgICAgIHZhciBpbmRleCA9IDU7CiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7CiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7CiAgICB9
KTsKICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykgewogICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkgewogICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTsKICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7CiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgICAgIHJldHVybiB0aGF0OwogICAgICB9KTsKICAgICAgQy5wcm90
b3R5cGUgPSBwcm90bzsKICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDOwogICAgfQogICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHsKICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTsKICAgICAgZml4TWV0aG9kKCdoYXMnKTsKICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7CiAgICB9CiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTsKICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9k
CiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyOwogIH0KCiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7CgogIE9bTkFNRV0gPSBDOwogICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pOwoKICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTsKCiAgcmV0dXJuIEM7Cn07Cgp9LHsiMTAxIjoxMDEsIjMzIjozMywiMzUiOjM1LCIzOSI6MzksIjQwIjo0MCwiNDUiOjQ1LCI1MSI6NTEsIjU2Ijo1
NiwiNiI6NiwiNjYiOjY2LCI5MyI6OTMsIjk0Ijo5NH1dLDIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS4wJyB9OwppZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZgoKfSx7fV0sMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZGVmaW5lUHJvcGVydHkgPSBfZGVyZXFfKDcyKTsKdmFyIGNyZWF0ZURl
c2MgPSBfZGVyZXFfKDkyKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7CiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpOwogIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlOwp9OwoKfSx7IjcyIjo3MiwiOTIiOjkyfV0sMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmcKdmFyIGFGdW5jdGlvbiA9IF9kZXJl
cV8oMyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHsKICBhRnVuY3Rpb24oZm4pOwogIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjsKICBzd2l0Y2ggKGxlbmd0aCkgewogICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7CiAgICB9OwogICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7CiAgICB9OwogICAgY2FzZSAzOiByZXR1cm4gZnVu
Y3Rpb24gKGEsIGIsIGMpIHsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7CiAgICB9OwogIH0KICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHsKICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpOwogIH07Cn07Cgp9LHsiMyI6M31dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKQp2YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTsKdmFyIGdldFRp
bWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lOwp2YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7Cgp2YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7CiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07Cn07CgovLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnMKbW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkgewogIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQw
NzowNjozOS45OTlaJzsKfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTsKfSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7CiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTsKICB2YXIgZCA9IHRoaXM7CiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7CiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpOwogIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/
ICcrJyA6ICcnOwogIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICsKICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICsKICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgKwogICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7Cn0gOiAkdG9JU09TdHJpbmc7Cgp9LHsiMzUiOjM1fV0s
Mjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTsKdmFyIE5VTUJFUiA9ICdudW1iZXInOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkgewogIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7CiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0
KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7Cn07Cgp9LHsiMTIwIjoxMjAsIjciOjd9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIiArIGl0KTsKICByZXR1cm4gaXQ7Cn07Cgp9LHt9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIFRo
YW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHkKbW9kdWxlLmV4cG9ydHMgPSAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgewogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3Owp9KTsKCn0seyIzNSI6MzV9XSwzMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwp2YXIgZG9jdW1lbnQgPSBfZGVyZXFfKDQwKS5kb2N1bWVudDsKLy8gdHlwZW9mIGRv
Y3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFCnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9Owp9OwoKfSx7IjQwIjo0MCwiNTEiOjUxfV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzCm1vZHVsZS5leHBvcnRzID0gKAog
ICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnCikuc3BsaXQoJywnKTsKCn0se31dLDMyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHMKdmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTsKdmFyIGdPUFMgPSBfZGVyZXFfKDc4KTsKdmFyIHBJRSA9IF9kZXJlcV8oODIpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0
aW9uIChpdCkgewogIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTsKICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjsKICBpZiAoZ2V0U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTsKICAgIHZhciBpc0VudW0gPSBwSUUuZjsKICAgIHZhciBpID0gMDsKICAgIHZhciBrZXk7CiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7CiAgfSByZXR1cm4gcmVzdWx0Owp9OwoKfSx7Ijc4Ijo3OCwiODEi
OjgxLCI4MiI6ODJ9XSwzMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTsKdmFyIGNvcmUgPSBfZGVyZXFfKDIzKTsKdmFyIGhpZGUgPSBfZGVyZXFfKDQyKTsKdmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7CnZhciBjdHggPSBfZGVyZXFfKDI1KTsKdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnOwoKdmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7CiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7CiAgdmFyIElTX0dM
T0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7CiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7CiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDsKICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7CiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTsKICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChj
b3JlW25hbWVdID0ge30pOwogIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pOwogIHZhciBrZXksIG93biwgb3V0LCBleHA7CiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTsKICBmb3IgKGtleSBpbiBzb3VyY2UpIHsKICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQogICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDsKICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCiAgICBvdXQgPSAob3duID8g
dGFyZ2V0IDogc291cmNlKVtrZXldOwogICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHQKICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0OwogICAgLy8gZXh0ZW5kIGdsb2JhbAogICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7CiAgICAvLyBleHBvcnQKICAgIGlm
IChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTsKICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDsKICB9Cn07Cmdsb2JhbC5jb3JlID0gY29yZTsKLy8gdHlwZSBiaXRtYXAKJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQKJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWwKJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWMKJGV4cG9ydC5QID0gODsgICAvLyBwcm90bwokZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmQKJGV4cG9ydC5XID0gMzI7
ICAvLyB3cmFwCiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQokZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAKbW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0OwoKfSx7IjIzIjoyMywiMjUiOjI1LCI0MCI6NDAsIjQyIjo0MiwiOTQiOjk0fV0sMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgTUFUQ0ggPSBfZGVyZXFfKDEyOCkoJ21hdGNoJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkgewogIHZhciByZSA9IC8uLzsKICB0cnkgewogICAgJy8uLydb
S0VZXShyZSk7CiAgfSBjYXRjaCAoZSkgewogICAgdHJ5IHsKICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7CiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7CiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH0KICB9IHJldHVybiB0cnVlOwp9OwoKfSx7IjEyOCI6MTI4fV0sMzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7CiAgdHJ5IHsKICAgIHJldHVybiAhIWV4ZWMoKTsKICB9IGNhdGNoIChlKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn07
Cgp9LHt9XSwzNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGhpZGUgPSBfZGVyZXFfKDQyKTsKdmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7CnZhciBmYWlscyA9IF9kZXJlcV8oMzUpOwp2YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpOwp2YXIgd2tzID0gX2RlcmVxXygxMjgpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHsKICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7CiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tL
RVldKTsKICB2YXIgc3RyZm4gPSBmbnNbMF07CiAgdmFyIHJ4Zm4gPSBmbnNbMV07CiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIHZhciBPID0ge307CiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9OwogICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNzsKICB9KSkgewogICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7CiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDIKICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJl
cGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKQogICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KQogICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfQogICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZykKICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKQogICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJu
IHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9CiAgICApOwogIH0KfTsKCn0seyIxMjgiOjEyOCwiMjgiOjI4LCIzNSI6MzUsIjQyIjo0MiwiOTQiOjk0fV0sMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzCnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgewogIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7CiAgdmFyIHJlc3VsdCA9ICcnOwogIGlmICh0aGF0Lmds
b2JhbCkgcmVzdWx0ICs9ICdnJzsKICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knOwogIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJzsKICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnOwogIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JzsKICByZXR1cm4gcmVzdWx0Owp9OwoKfSx7IjciOjd9XSwzODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxh
dHRlbkludG9BcnJheQp2YXIgaXNBcnJheSA9IF9kZXJlcV8oNDkpOwp2YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTsKdmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpOwp2YXIgY3R4ID0gX2RlcmVxXygyNSk7CnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IF9kZXJlcV8oMTI4KSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7CgpmdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykgewogIHZhciB0YXJnZXRJbmRleCA9
IHN0YXJ0OwogIHZhciBzb3VyY2VJbmRleCA9IDA7CiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTsKICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTsKCiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7CiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7CiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdOwoKICAgICAgc3ByZWFkYWJsZSA9
IGZhbHNlOwogICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHsKICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07CiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7CiAgICAgIH0KCiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkgewogICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50
Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7CiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7CiAgICAgIH0KCiAgICAgIHRhcmdldEluZGV4Kys7CiAgICB9CiAgICBzb3VyY2VJbmRleCsrOwogIH0KICByZXR1cm4gdGFyZ2V0SW5kZXg7Cn0KCm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTsKCn0seyIxMTgiOjExOCwiMTI4IjoxMjgs
IjI1IjoyNSwiNDkiOjQ5LCI1MSI6NTF9XSwzOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBjdHggPSBfZGVyZXFfKDI1KTsKdmFyIGNhbGwgPSBfZGVyZXFfKDUzKTsKdmFyIGlzQXJyYXlJdGVyID0gX2RlcmVxXyg0OCk7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTsKdmFyIGdldEl0ZXJGbiA9IF9kZXJlcV8oMTI5KTsKdmFyIEJSRUFLID0ge307CnZhciBSRVRVUk4gPSB7fTsKdmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9u
IChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7CiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpOwogIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpOwogIHZhciBpbmRleCA9IDA7CiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDsKICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJs
ZSEnKTsKICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3IKICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgewogICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pOwogICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1
bHQ7CiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHsKICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpOwogICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7CiAgfQp9OwpleHBvcnRzLkJSRUFLID0gQlJFQUs7CmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOOwoKfSx7IjExOCI6MTE4LCIxMjkiOjEyOSwiMjUiOjI1LCI0OCI6NDgsIjUz
Ijo1MywiNyI6N31dLDQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjgKdmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoCiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxp
bmUgbm8tbmV3LWZ1bmMKICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7CmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYKCn0se31dLDQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHsKICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTsKfTsKCn0se31dLDQyOltmdW5j
dGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGRQID0gX2RlcmVxXyg3Mik7CnZhciBjcmVhdGVEZXNjID0gX2RlcmVxXyg5Mik7Cm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyOSkgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7CiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsKfSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHsKICBvYmplY3Rba2V5XSA9IHZhbHVlOwogIHJldHVybiBvYmplY3Q7Cn07Cgp9LHsiMjkiOjI5LCI3MiI6NzIsIjkyIjo5
Mn1dLDQzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGRvY3VtZW50ID0gX2RlcmVxXyg0MCkuZG9jdW1lbnQ7Cm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwoKfSx7IjQwIjo0MH1dLDQ0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSAhX2RlcmVxXygyOSkgJiYgIV9kZXJlcV8oMzUpKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9kZXJlcV8oMzApKCdkaXYnKSwgJ2En
LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7Cn0pOwoKfSx7IjI5IjoyOSwiMzAiOjMwLCIzNSI6MzV9XSw0NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwp2YXIgc2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDk5KS5zZXQ7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykgewogIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yOwogIHZhciBQOwogIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdm
dW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7CiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTsKICB9IHJldHVybiB0aGF0Owp9OwoKfSx7IjUxIjo1MSwiOTkiOjk5fV0sNDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzUKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHsKICB2YXIgdW4gPSB0
aGF0ID09PSB1bmRlZmluZWQ7CiAgc3dpdGNoIChhcmdzLmxlbmd0aCkgewogICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7CiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7CiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7CiAg
ICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7CiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7CiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7Cn07Cgp9LHt9XSw0
NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzCnZhciBjb2YgPSBfZGVyZXFfKDE4KTsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucwptb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgn
JykgOiBPYmplY3QoaXQpOwp9OwoKfSx7IjE4IjoxOH1dLDQ4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvcgp2YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7CnZhciBJVEVSQVRPUiA9IF9kZXJlcV8oMTI4KSgnaXRlcmF0b3InKTsKdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8
IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7Cn07Cgp9LHsiMTI4IjoxMjgsIjU4Ijo1OH1dLDQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudCkKdmFyIGNvZiA9IF9kZXJlcV8oMTgpOwptb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHsKICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5JzsKfTsKCn0seyIxOCI6MTh9XSw1MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi4z
IE51bWJlci5pc0ludGVnZXIobnVtYmVyKQp2YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTsKdmFyIGZsb29yID0gTWF0aC5mbG9vcjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHsKICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDsKfTsKCn0seyI1MSI6NTF9XSw1MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcg
PyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJzsKfTsKCn0se31dLDUyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpCnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwp2YXIgY29mID0gX2RlcmVxXygxOCk7CnZhciBNQVRDSCA9IF9kZXJlcV8oMTI4KSgnbWF0Y2gnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICB2YXIgaXNSZWdFeHA7CiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hd
KSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpOwp9OwoKfSx7IjEyOCI6MTI4LCIxOCI6MTgsIjUxIjo1MX1dLDUzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvcgp2YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7CiAgdHJ5IHsKICAgIHJldHVybiBlbnRyaWVz
ID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7CiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbikKICB9IGNhdGNoIChlKSB7CiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddOwogICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpOwogICAgdGhyb3cgZTsKICB9Cn07Cgp9LHsiNyI6N31dLDU0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgY3JlYXRlID0g
X2RlcmVxXyg3MSk7CnZhciBkZXNjcmlwdG9yID0gX2RlcmVxXyg5Mik7CnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTsKdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307CgovLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKQpfZGVyZXFfKDQyKShJdGVyYXRvclByb3RvdHlwZSwgX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7CiAg
Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7CiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7Cn07Cgp9LHsiMTAxIjoxMDEsIjEyOCI6MTI4LCI0MiI6NDIsIjcxIjo3MSwiOTIiOjkyfV0sNTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBMSUJSQVJZID0gX2RlcmVxXyg2MCk7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciByZWRl
ZmluZSA9IF9kZXJlcV8oOTQpOwp2YXIgaGlkZSA9IF9kZXJlcV8oNDIpOwp2YXIgaGFzID0gX2RlcmVxXyg0MSk7CnZhciBJdGVyYXRvcnMgPSBfZGVyZXFfKDU4KTsKdmFyICRpdGVyQ3JlYXRlID0gX2RlcmVxXyg1NCk7CnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTsKdmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7CnZhciBJVEVSQVRPUiA9IF9kZXJlcV8oMTI4KSgnaXRlcmF0b3InKTsKdmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1
Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgCnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJzsKdmFyIEtFWVMgPSAna2V5cyc7CnZhciBWQUxVRVMgPSAndmFsdWVzJzsKCnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkgewogICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTsKICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24g
KGtpbmQpIHsKICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdOwogICAgc3dpdGNoIChraW5kKSB7CiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07CiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1
Y3Rvcih0aGlzLCBraW5kKTsgfTsKICB9OwogIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7CiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUzsKICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlOwogIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlOwogIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdOwogIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpOwogIHZhciAkZW50cmllcyA9
IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7CiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlOwogIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlOwogIC8vIEZpeCBuYXRpdmUKICBpZiAoJGFueU5hdGl2ZSkgewogICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpOwogICAgaWYgKEl0ZXJh
dG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHsKICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9ycwogICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTsKICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzCiAgICAgIGlmICghTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTsK
ICAgIH0KICB9CiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRgogIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHsKICAgIFZBTFVFU19CVUcgPSB0cnVlOwogICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07CiAgfQogIC8vIERlZmluZSBpdGVyYXRvcgogIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFU
T1JdKSkgewogICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTsKICB9CiAgLy8gUGx1ZyBmb3IgbGlicmFyeQogIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0OwogIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpczsKICBpZiAoREVGQVVMVCkgewogICAgbWV0aG9kcyA9IHsKICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSwKICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksCiAgICAgIGVudHJpZXM6ICRlbnRyaWVzCiAgICB9
OwogICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykgewogICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pOwogICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTsKICB9CiAgcmV0dXJuIG1ldGhvZHM7Cn07Cgp9LHsiMTAxIjoxMDEsIjEyOCI6MTI4LCIzMyI6MzMsIjQxIjo0MSwiNDIiOjQyLCI1NCI6NTQsIjU4Ijo1OCwiNjAiOjYwLCI3OSI6NzksIjk0Ijo5NH1d
LDU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIElURVJBVE9SID0gX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpOwp2YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7Cgp0cnkgewogIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTsKICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWwKICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pOwp9IGNh
dGNoIChlKSB7IC8qIGVtcHR5ICovIH0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7CiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7CiAgdmFyIHNhZmUgPSBmYWxzZTsKICB0cnkgewogICAgdmFyIGFyciA9IFs3XTsKICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpOwogICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9OwogICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsg
cmV0dXJuIGl0ZXI7IH07CiAgICBleGVjKGFycik7CiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9CiAgcmV0dXJuIHNhZmU7Cn07Cgp9LHsiMTI4IjoxMjh9XSw1NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7CiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTsKfTsKCn0se31dLDU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7fTsKCn0se31dLDU5OltmdW5j
dGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTsKdmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBlbCkgewogIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7CiAgdmFyIGtleXMgPSBnZXRLZXlzKE8pOwogIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDsKICB2YXIgaW5kZXggPSAwOwogIHZhciBrZXk7CiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBpZiAoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpIHJl
dHVybiBrZXk7Cn07Cgp9LHsiMTE3IjoxMTcsIjgxIjo4MX1dLDYwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTsKCn0se31dLDYxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeCkKdmFyICRleHBtMSA9IE1hdGguZXhwbTE7Cm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTEKICAvLyBPbGQgRkYgYnVnCiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1
Nzk0ODA2NzE2NTE2OAogIC8vIFRvciBCcm93c2VyIGJ1ZwogIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xNwopID8gZnVuY3Rpb24gZXhwbTEoeCkgewogIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7Cn0gOiAkZXhwbTE7Cgp9LHt9XSw2MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KQp2YXIgc2lnbiA9IF9kZXJlcV8oNjUpOwp2YXIgcG93ID0gTWF0aC5w
b3c7CnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7CnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTsKdmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7CnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTsKCnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikgewogIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjsKfTsKCm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHsKICB2YXIgJGFicyA9IE1hdGguYWJzKHgpOwogIHZhciAkc2ln
biA9IHNpZ24oeCk7CiAgdmFyIGEsIHJlc3VsdDsKICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyOwogIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFiczsKICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIElu
ZmluaXR5OwogIHJldHVybiAkc2lnbiAqIHJlc3VsdDsKfTsKCn0seyI2NSI6NjV9XSw2MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpCm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7CiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpOwp9OwoKfSx7fV0sNjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL3J3
YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvCm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHsKICBpZiAoCiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwCiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICAgICAgfHwgeCAhPSB4CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3cK
ICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQogICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoCiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICAgICAgfHwgb3V0TG93ICE9IG91dExvdwogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaAogICkgcmV0dXJuIE5hTjsKICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDsKICBy
ZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93Owp9OwoKfSx7fV0sNjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpCm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7Cn07Cgp9LHt9
XSw2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBNRVRBID0gX2RlcmVxXygxMjQpKCdtZXRhJyk7CnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwp2YXIgaGFzID0gX2RlcmVxXyg0MSk7CnZhciBzZXREZXNjID0gX2RlcmVxXyg3MikuZjsKdmFyIGlkID0gMDsKdmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkgewogIHJldHVybiB0cnVlOwp9Owp2YXIgRlJFRVpFID0gIV9kZXJlcV8oMzUpKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gaXNFeHRlbnNpYmxl
KE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpOwp9KTsKdmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHsKICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7CiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSUQKICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzCiAgfSB9KTsKfTsKdmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkgewogIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXgKICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3lt
Ym9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDsKICBpZiAoIWhhcyhpdCwgTUVUQSkpIHsKICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0CiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7CiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YQogICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7CiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YQogICAgc2V0TWV0YShpdCk7CiAgLy8gcmV0dXJuIG9iamVjdCBJ
RAogIH0gcmV0dXJuIGl0W01FVEFdLmk7Cn07CnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHsKICBpZiAoIWhhcyhpdCwgTUVUQSkpIHsKICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0CiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlOwogICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGEKICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7CiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YQogICAgc2V0TWV0YShpdCk7CiAgLy8g
cmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHMKICB9IHJldHVybiBpdFtNRVRBXS53Owp9OwovLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmcKdmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7CiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7CiAgcmV0dXJuIGl0Owp9Owp2YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0gewogIEtFWTogTUVUQSwKICBORUVEOiBmYWxzZSwKICBmYXN0S2V5
OiBmYXN0S2V5LAogIGdldFdlYWs6IGdldFdlYWssCiAgb25GcmVlemU6IG9uRnJlZXplCn07Cgp9LHsiMTI0IjoxMjQsIjM1IjozNSwiNDEiOjQxLCI1MSI6NTEsIjcyIjo3Mn1dLDY3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIE1hcCA9IF9kZXJlcV8oMTYwKTsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKSgnbWV0YWRhdGEnKTsKdmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKF9kZXJlcV8oMjY2KSkoKSk7Cgp2
YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7CiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7CiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkgewogICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7CiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXAoKSk7CiAgfQogIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpOwogIGlmICgha2V5TWV0YWRhdGEpIHsKICAg
IGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkOwogICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpOwogIH0gcmV0dXJuIGtleU1ldGFkYXRhOwp9Owp2YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkgewogIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpOwogIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0
YWRhdGFLZXkpOwp9Owp2YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkgewogIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpOwogIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTsKfTsKdmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHsKICBnZXRPckNy
ZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7Cn07CnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkgewogIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTsKICB2YXIga2V5cyA9IFtdOwogIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTsKICByZXR1cm4g
a2V5czsKfTsKdmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTsKfTsKdmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7CiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBzdG9yZTogc3RvcmUsCiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLAogIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSwKICBnZXQ6IG9yZGluYXJ5R2V0T3duTWV0
YWRhdGEsCiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLAogIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLAogIGtleTogdG9NZXRhS2V5LAogIGV4cDogZXhwCn07Cgp9LHsiMTAzIjoxMDMsIjE2MCI6MTYwLCIyNjYiOjI2NiwiMzMiOjMzfV0sNjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7CnZhciBtYWNyb3Rhc2sgPSBfZGVyZXFfKDExMykuc2V0Owp2YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2Vi
S2l0TXV0YXRpb25PYnNlcnZlcjsKdmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzczsKdmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTsKdmFyIGlzTm9kZSA9IF9kZXJlcV8oMTgpKHByb2Nlc3MpID09ICdwcm9jZXNzJzsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgewogIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7CgogIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBwYXJlbnQsIGZuOwogICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpOwogICAg
d2hpbGUgKGhlYWQpIHsKICAgICAgZm4gPSBoZWFkLmZuOwogICAgICBoZWFkID0gaGVhZC5uZXh0OwogICAgICB0cnkgewogICAgICAgIGZuKCk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7CiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkOwogICAgICAgIHRocm93IGU7CiAgICAgIH0KICAgIH0gbGFzdCA9IHVuZGVmaW5lZDsKICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpOwogIH07CgogIC8vIE5vZGUuanMKICBpZiAoaXNOb2RlKSB7CiAgICBub3RpZnkgPSBmdW5jdGlv
biAoKSB7CiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpOwogICAgfTsKICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIKICB9IGVsc2UgaWYgKE9ic2VydmVyKSB7CiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTsKICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpOwogICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHsKICAgICAg
bm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTsKICAgIH07CiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2UKICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7CiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpOwogICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkgewogICAgICBwcm9taXNlLnRoZW4oZmx1c2gpOwogICAgfTsKICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9u
OgogIC8vIC0gc2V0SW1tZWRpYXRlCiAgLy8gLSBNZXNzYWdlQ2hhbm5lbAogIC8vIC0gd2luZG93LnBvc3RNZXNzYWcKICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZQogIC8vIC0gc2V0VGltZW91dAogIH0gZWxzZSB7CiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbCkKICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7CiAgICB9OwogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uIChmbikgewogICAgdmFyIHRh
c2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07CiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzazsKICAgIGlmICghaGVhZCkgewogICAgICBoZWFkID0gdGFzazsKICAgICAgbm90aWZ5KCk7CiAgICB9IGxhc3QgPSB0YXNrOwogIH07Cn07Cgp9LHsiMTEzIjoxMTMsIjE4IjoxOCwiNDAiOjQwfV0sNjk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpCnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpOwoKZnVuY3Rp
b24gUHJvbWlzZUNhcGFiaWxpdHkoQykgewogIHZhciByZXNvbHZlLCByZWplY3Q7CiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHsKICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTsKICAgIHJlc29sdmUgPSAkJHJlc29sdmU7CiAgICByZWplY3QgPSAkJHJlamVjdDsKICB9KTsKICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7CiAgdGhp
cy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTsKfQoKbW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTsKfTsKCn0seyIzIjozfV0sNzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLikKdmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTsKdmFyIGdPUFMgPSBfZGVyZXFfKDc4KTsKdmFyIHBJRSA9IF9kZXJlcV8oODIpOwp2YXIgdG9PYmpl
Y3QgPSBfZGVyZXFfKDExOSk7CnZhciBJT2JqZWN0ID0gX2RlcmVxXyg0Nyk7CnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjsKCi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKQptb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IF9kZXJlcV8oMzUpKGZ1bmN0aW9uICgpIHsKICB2YXIgQSA9IHt9OwogIHZhciBCID0ge307CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCiAgdmFyIFMgPSBTeW1ib2woKTsK
ICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7CiAgQVtTXSA9IDc7CiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7CiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7Cn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7CiAgdmFyIGFMZW4gPSBhcmd1bWVu
dHMubGVuZ3RoOwogIHZhciBpbmRleCA9IDE7CiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7CiAgdmFyIGlzRW51bSA9IHBJRS5mOwogIHdoaWxlIChhTGVuID4gaW5kZXgpIHsKICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pOwogICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpOwogICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoOwogICAgdmFyIGogPSAwOwogICAgdmFyIGtleTsKICAgIHdoaWxlIChsZW5ndGggPiBqKSBp
ZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldOwogIH0gcmV0dXJuIFQ7Cn0gOiAkYXNzaWduOwoKfSx7IjExOSI6MTE5LCIzNSI6MzUsIjQ3Ijo0NywiNzgiOjc4LCI4MSI6ODEsIjgyIjo4Mn1dLDcxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciBkUHMgPSBfZGVyZXFfKDczKTsKdmFyIGVudW1CdWdLZXlzID0gX2Rl
cmVxXygzMSk7CnZhciBJRV9QUk9UTyA9IF9kZXJlcV8oMTAyKSgnSUVfUFJPVE8nKTsKdmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9Owp2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7CgovLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlCnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkgewogIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnCiAgdmFyIGlmcmFtZSA9IF9kZXJl
cV8oMzApKCdpZnJhbWUnKTsKICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDsKICB2YXIgbHQgPSAnPCc7CiAgdmFyIGd0ID0gJz4nOwogIHZhciBpZnJhbWVEb2N1bWVudDsKICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICBfZGVyZXFfKDQzKS5hcHBlbmRDaGlsZChpZnJhbWUpOwogIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmwKICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0OwogIC8vIGh0bWwucmVtb3Zl
Q2hpbGQoaWZyYW1lKTsKICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50OwogIGlmcmFtZURvY3VtZW50Lm9wZW4oKTsKICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7CiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTsKICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjsKICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTsKICBy
ZXR1cm4gY3JlYXRlRGljdCgpOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7CiAgdmFyIHJlc3VsdDsKICBpZiAoTyAhPT0gbnVsbCkgewogICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pOwogICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7CiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDsKICAgIC8vIGFkZCAiX19wcm90b19fIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsCiAgICByZXN1bHRbSUVfUFJPVE9dID0gTzsK
ICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpOwogIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTsKfTsKCn0seyIxMDIiOjEwMiwiMzAiOjMwLCIzMSI6MzEsIjQzIjo0MywiNyI6NywiNzMiOjczfV0sNzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpOwp2YXIgSUU4X0RPTV9ERUZJTkUgPSBfZGVyZXFfKDQ0KTsKdmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApOwp2YXIgZFAgPSBP
YmplY3QuZGVmaW5lUHJvcGVydHk7CgpleHBvcnRzLmYgPSBfZGVyZXFfKDI5KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHsKICBhbk9iamVjdChPKTsKICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CiAgYW5PYmplY3QoQXR0cmlidXRlcyk7CiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkgewogICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpOwogIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfQogIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVz
IHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7CiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7CiAgcmV0dXJuIE87Cn07Cgp9LHsiMTIwIjoxMjAsIjI5IjoyOSwiNDQiOjQ0LCI3Ijo3fV0sNzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZFAgPSBfZGVyZXFfKDcyKTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTsKCm1vZHVsZS5l
eHBvcnRzID0gX2RlcmVxXygyOSkgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykgewogIGFuT2JqZWN0KE8pOwogIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTsKICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7CiAgdmFyIGkgPSAwOwogIHZhciBQOwogIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pOwogIHJldHVybiBPOwp9OwoKfSx7IjI5IjoyOSwiNyI6NywiNzIiOjcyLCI4MSI6ODF9
XSw3NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kcwptb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oNjApIHx8ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7CiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpOwogIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzCiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGwKICBfX2RlZmluZVNldHRlcl9f
LmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTsKICBkZWxldGUgX2RlcmVxXyg0MClbS107Cn0pOwoKfSx7IjM1IjozNSwiNDAiOjQwLCI2MCI6NjB9XSw3NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBwSUUgPSBfZGVyZXFfKDgyKTsKdmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTsKdmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTsKdmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApOwp2YXIgaGFzID0gX2RlcmVxXyg0MSk7CnZhciBJRThfRE9NX0RFRklORSA9
IF9kZXJlcV8oNDQpOwp2YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CgpleHBvcnRzLmYgPSBfZGVyZXFfKDI5KSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkgewogIE8gPSB0b0lPYmplY3QoTyk7CiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpOwogIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHsKICAgIHJldHVybiBnT1BEKE8sIFApOwogIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfQogIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFw
SUUuZi5jYWxsKE8sIFApLCBPW1BdKTsKfTsKCn0seyIxMTciOjExNywiMTIwIjoxMjAsIjI5IjoyOSwiNDEiOjQxLCI0NCI6NDQsIjgyIjo4MiwiOTIiOjkyfV0sNzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93CnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7CnZhciBnT1BOID0gX2RlcmVxXyg3NykuZjsKdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7Cgp2YXIgd2lu
ZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcwogID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdOwoKdmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7CiAgdHJ5IHsKICAgIHJldHVybiBnT1BOKGl0KTsKICB9IGNhdGNoIChlKSB7CiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkgewog
IHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7Cn07Cgp9LHsiMTE3IjoxMTcsIjc3Ijo3N31dLDc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQp2YXIgJGtleXMgPSBfZGVyZXFfKDgwKTsKdmFyIGhpZGRlbktleXMgPSBfZGVyZXFfKDMxKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90
b3R5cGUnKTsKCmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykgewogIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTsKfTsKCn0seyIzMSI6MzEsIjgwIjo4MH1dLDc4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsKCn0se31dLDc5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0
UHJvdG90eXBlT2YoTykKdmFyIGhhcyA9IF9kZXJlcV8oNDEpOwp2YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7CnZhciBJRV9QUk9UTyA9IF9kZXJlcV8oMTAyKSgnSUVfUFJPVE8nKTsKdmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTsKCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7CiAgTyA9IHRvT2JqZWN0KE8pOwogIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107CiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5j
dGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHsKICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTsKICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsOwp9OwoKfSx7IjEwMiI6MTAyLCIxMTkiOjExOSwiNDEiOjQxfV0sODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgaGFzID0gX2RlcmVxXyg0MSk7CnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7CnZhciBhcnJheUluZGV4T2YgPSBfZGVyZXFfKDExKShmYWxzZSk7CnZhciBJ
RV9QUk9UTyA9IF9kZXJlcV8oMTAyKSgnSUVfUFJPVE8nKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHsKICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpOwogIHZhciBpID0gMDsKICB2YXIgcmVzdWx0ID0gW107CiAgdmFyIGtleTsKICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpOwogIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXMKICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkg
PSBuYW1lc1tpKytdKSkgewogICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTsKICB9CiAgcmV0dXJuIHJlc3VsdDsKfTsKCn0seyIxMDIiOjEwMiwiMTEiOjExLCIxMTciOjExNywiNDEiOjQxfV0sODE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTykKdmFyICRrZXlzID0gX2RlcmVxXyg4MCk7CnZhciBlbnVtQnVnS2V5cyA9IF9kZXJlcV8oMzEpOwoKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8
fCBmdW5jdGlvbiBrZXlzKE8pIHsKICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpOwp9OwoKfSx7IjMxIjozMSwiODAiOjgwfV0sODI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewpleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsKCn0se31dLDgzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBjb3JlID0gX2RlcmVxXygy
Myk7CnZhciBmYWlscyA9IF9kZXJlcV8oMzUpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHsKICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07CiAgdmFyIGV4cCA9IHt9OwogIGV4cFtLRVldID0gZXhlYyhmbik7CiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7Cn07Cgp9LHsiMjMiOjIzLCIzMyI6MzMsIjM1IjozNX1dLDg0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVs
ZSxleHBvcnRzKXsKdmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTsKdmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTsKdmFyIGlzRW51bSA9IF9kZXJlcV8oODIpLmY7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykgewogIHJldHVybiBmdW5jdGlvbiAoaXQpIHsKICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTsKICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTsKICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDsKICAgIHZhciBpID0gMDsKICAgIHZhciByZXN1bHQgPSBbXTsKICAgIHZhciBrZXk7CiAgICB3
aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHsKICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7CiAgICB9IHJldHVybiByZXN1bHQ7CiAgfTsKfTsKCn0seyIxMTciOjExNywiODEiOjgxLCI4MiI6ODJ9XSw4NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHMKdmFyIGdPUE4gPSBfZGVyZXFfKDc3KTsKdmFyIGdPUFMg
PSBfZGVyZXFfKDc4KTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIFJlZmxlY3QgPSBfZGVyZXFfKDQwKS5SZWZsZWN0Owptb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHsKICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpOwogIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mOwogIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5czsKfTsKCn0seyI0MCI6NDAsIjciOjcsIjc3Ijo3NywiNzgi
Ojc4fV0sODY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgJHBhcnNlRmxvYXQgPSBfZGVyZXFfKDQwKS5wYXJzZUZsb2F0Owp2YXIgJHRyaW0gPSBfZGVyZXFfKDExMSkudHJpbTsKCm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KF9kZXJlcV8oMTEyKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikgewogIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7CiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7CiAgcmV0dXJuIHJl
c3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0Owp9IDogJHBhcnNlRmxvYXQ7Cgp9LHsiMTExIjoxMTEsIjExMiI6MTEyLCI0MCI6NDB9XSw4NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciAkcGFyc2VJbnQgPSBfZGVyZXFfKDQwKS5wYXJzZUludDsKdmFyICR0cmltID0gX2RlcmVxXygxMTEpLnRyaW07CnZhciB3cyA9IF9kZXJlcV8oMTEyKTsKdmFyIGhleCA9IC9eWy0rXT8wW3hYXS87Cgptb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9
PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkgewogIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7CiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7Cn0gOiAkcGFyc2VJbnQ7Cgp9LHsiMTExIjoxMTEsIjExMiI6MTEyLCI0MCI6NDB9XSw4ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHBhdGggPSBfZGVy
ZXFfKDg5KTsKdmFyIGludm9rZSA9IF9kZXJlcV8oNDYpOwp2YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLyogLi4ucGFyZ3MgKi8pIHsKICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7CiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgdmFyIHBhcmdzID0gQXJyYXkobGVuZ3RoKTsKICB2YXIgaSA9IDA7CiAgdmFyIF8gPSBwYXRoLl87CiAgdmFyIGhvbGRlciA9IGZhbHNlOwogIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoKHBhcmdzW2ldID0gYXJndW1lbnRzW2kr
K10pID09PSBfKSBob2xkZXIgPSB0cnVlOwogIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykgewogICAgdmFyIHRoYXQgPSB0aGlzOwogICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgdmFyIGogPSAwOwogICAgdmFyIGsgPSAwOwogICAgdmFyIGFyZ3M7CiAgICBpZiAoIWhvbGRlciAmJiAhYUxlbikgcmV0dXJuIGludm9rZShmbiwgcGFyZ3MsIHRoYXQpOwogICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7CiAgICBpZiAoaG9sZGVyKSBmb3IgKDtsZW5ndGggPiBqOyBqKyspIGlmIChhcmdzW2pdID09PSBf
KSBhcmdzW2pdID0gYXJndW1lbnRzW2srK107CiAgICB3aGlsZSAoYUxlbiA+IGspIGFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7CiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTsKICB9Owp9OwoKfSx7IjMiOjMsIjQ2Ijo0NiwiODkiOjg5fV0sODk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oNDApOwoKfSx7IjQwIjo0MH1dLDkwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykg
ewogIHRyeSB7CiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07CiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9OwogIH0KfTsKCn0se31dLDkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gX2RlcmVxXyg2OSk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7CiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTsKICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBh
YmlsaXR5LnJlc29sdmU7CiAgcmVzb2x2ZSh4KTsKICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTsKfTsKCn0seyI2OSI6Njl9XSw5MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHsKICByZXR1cm4gewogICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSwKICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSwKICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLAogICAgdmFsdWU6IHZhbHVlCiAgfTsKfTsKCn0se31d
LDkzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7CiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTsKICByZXR1cm4gdGFyZ2V0Owp9OwoKfSx7Ijk0Ijo5NH1dLDk0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApOwp2YXIgaGlkZSA9IF9kZXJlcV8oNDIpOwp2
YXIgaGFzID0gX2RlcmVxXyg0MSk7CnZhciBTUkMgPSBfZGVyZXFfKDEyNCkoJ3NyYycpOwp2YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJzsKdmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107CnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7CgpfZGVyZXFfKDIzKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTsKfTsKCihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkgewogIHZhciBpc0Z1
bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nOwogIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7CiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47CiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpOwogIGlmIChPID09PSBnbG9iYWwpIHsKICAgIE9ba2V5XSA9IHZhbDsKICB9IGVsc2UgaWYgKCFzYWZlKSB7CiAgICBkZWxldGUgT1tr
ZXldOwogICAgaGlkZShPLCBrZXksIHZhbCk7CiAgfSBlbHNlIGlmIChPW2tleV0pIHsKICAgIE9ba2V5XSA9IHZhbDsKICB9IGVsc2UgewogICAgaGlkZShPLCBrZXksIHZhbCk7CiAgfQovLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmUKfSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogIHJldHVybiB0eXBlb2YgdGhpcyA9PSAn
ZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTsKfSk7Cgp9LHsiMTI0IjoxMjQsIjIzIjoyMywiNDAiOjQwLCI0MSI6NDEsIjQyIjo0Mn1dLDk1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7CiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHsKICAgIHJldHVybiByZXBsYWNlW3BhcnRdOwogIH0gOiByZXBsYWNlOwogIHJldHVybiBm
dW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7CiAgfTsKfTsKCn0se31dLDk2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9
IHk7Cn07Cgp9LHt9XSw5NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTsKdmFyIGN0eCA9IF9kZXJlcV8oMjUpOwp2YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHsKICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9t
OiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7CiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07CiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7CiAgICBhRnVuY3Rpb24odGhpcyk7CiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDsKICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pOwogICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpOwogICAgQSA9IFtdOwogICAgaWYgKG1hcHBpbmcpIHsKICAgICAgbiA9IDA7CiAgICAgIGNiID0g
Y3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpOwogICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHsKICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7CiAgICB9CiAgICByZXR1cm4gbmV3IHRoaXMoQSk7CiAgfSB9KTsKfTsKCn0seyIyNSI6MjUsIjMiOjMsIjMzIjozMywiMzkiOjM5fV0sOTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmlj
dCc7Ci8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8KdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHsKICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7CiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHZhciBBID0gQXJyYXkobGVuZ3RoKTsKICAgIHdoaWxlIChsZW5ndGgtLSkgQVtsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07CiAgICByZXR1
cm4gbmV3IHRoaXMoQSk7CiAgfSB9KTsKfTsKCn0seyIzMyI6MzN9XSw5OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLgovKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqLwp2YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7CiAgYW5PYmplY3QoTyk7CiAgaWYgKCFpc09iamVj
dChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArICI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhIik7Cn07Cm1vZHVsZS5leHBvcnRzID0gewogIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7CiAgICAgIHRyeSB7CiAgICAgICAgc2V0ID0gX2RlcmVxXygyNSkoRnVuY3Rpb24uY2FsbCwgX2RlcmVxXyg3NSkuZihPYmplY3QucHJvdG90eXBlLCAn
X19wcm90b19fJykuc2V0LCAyKTsKICAgICAgICBzZXQodGVzdCwgW10pOwogICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpOwogICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfQogICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHsKICAgICAgICBjaGVjayhPLCBwcm90byk7CiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvOwogICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTsKICAgICAgICByZXR1cm4gTzsKICAgICAgfTsKICAgIH0oe30s
IGZhbHNlKSA6IHVuZGVmaW5lZCksCiAgY2hlY2s6IGNoZWNrCn07Cgp9LHsiMjUiOjI1LCI1MSI6NTEsIjciOjcsIjc1Ijo3NX1dLDEwMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApOwp2YXIgZFAgPSBfZGVyZXFfKDcyKTsKdmFyIERFU0NSSVBUT1JTID0gX2RlcmVxXygyOSk7CnZhciBTUEVDSUVTID0gX2RlcmVxXygxMjgpKCdzcGVjaWVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHsKICB2YXIgQyA9IGdsb2JhbFtL
RVldOwogIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfQogIH0pOwp9OwoKfSx7IjEyOCI6MTI4LCIyOSI6MjksIjQwIjo0MCwiNzIiOjcyfV0sMTAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGRlZiA9IF9kZXJlcV8oNzIpLmY7CnZhciBoYXMgPSBfZGVyZXFfKDQxKTsKdmFyIFRBRyA9IF9kZXJlcV8oMTI4KSgndG9TdHJpbmdUYWcnKTsK
Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHsKICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pOwp9OwoKfSx7IjEyOCI6MTI4LCI0MSI6NDEsIjcyIjo3Mn1dLDEwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBzaGFyZWQgPSBfZGVyZXFfKDEwMykoJ2tleXMnKTsKdmFyIHVpZCA9IF9kZXJlcV8oMTI0KTsKbW9kdWxlLmV4cG9ydHMgPSBm
dW5jdGlvbiAoa2V5KSB7CiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTsKfTsKCn0seyIxMDMiOjEwMywiMTI0IjoxMjR9XSwxMDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7CnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJzsKdmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHsKICByZXR1cm4gc3RvcmVba2V5
XSB8fCAoc3RvcmVba2V5XSA9IHt9KTsKfTsKCn0seyI0MCI6NDB9XSwxMDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcikKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7CnZhciBTUEVDSUVTID0gX2RlcmVxXygxMjgpKCdzcGVjaWVzJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHsKICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yOwogIHZh
ciBTOwogIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTsKfTsKCn0seyIxMjgiOjEyOCwiMyI6MywiNyI6N31dLDEwNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGZhaWxzID0gX2RlcmVxXygzNSk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykgewogIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7CiAgICAvLyBlc2xpbnQt
ZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsCiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7CiAgfSk7Cn07Cgp9LHsiMzUiOjM1fV0sMTA2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTsKdmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTsKLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0Ci8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdAptb2R1bGUuZXhwb3J0
cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHsKICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykgewogICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7CiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpOwogICAgdmFyIGwgPSBzLmxlbmd0aDsKICAgIHZhciBhLCBiOwogICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkOwogICAgYSA9IHMuY2hhckNvZGVBdChpKTsKICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIg
PSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmCiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhCiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwOwogIH07Cn07Cgp9LHsiMTE2IjoxMTYsIjI4IjoyOH1dLDEwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9CnZhciBpc1Jl
Z0V4cCA9IF9kZXJlcV8oNTIpOwp2YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7CiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgIiBkb2Vzbid0IGFjY2VwdCByZWdleCEiKTsKICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpOwp9OwoKfSx7IjI4IjoyOCwiNTIiOjUyfV0sMTA4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBv
cnQgPSBfZGVyZXFfKDMzKTsKdmFyIGZhaWxzID0gX2RlcmVxXygzNSk7CnZhciBkZWZpbmVkID0gX2RlcmVxXygyOCk7CnZhciBxdW90ID0gLyIvZzsKLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpCnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7CiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTsKICB2YXIgcDEgPSAnPCcgKyB0YWc7CiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJp
YnV0ZSArICc9IicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJyInOwogIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nOwp9Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7CiAgdmFyIE8gPSB7fTsKICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTsKICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJyInKTsKICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRv
TG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnIicpLmxlbmd0aCA+IDM7CiAgfSksICdTdHJpbmcnLCBPKTsKfTsKCn0seyIyOCI6MjgsIjMzIjozMywiMzUiOjM1fV0sMTA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmQKdmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpOwp2YXIgcmVwZWF0ID0gX2RlcmVxXygxMTApOwp2YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlv
biAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7CiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7CiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoOwogIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpOwogIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpOwogIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTOwogIHZhciBmaWxsTGVuID0gaW50TWF4
TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoOwogIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7CiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7CiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjsKfTsKCn0seyIxMTAiOjExMCwiMTE4IjoxMTgsIjI4IjoyOH1dLDExMDpbZnVuY3Rpb24oX2RlcmVxXyxt
b2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTsKdmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7CiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTsKICB2YXIgcmVzID0gJyc7CiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpOwogIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZSIpOwogIGZvciAoO24gPiAwOyAo
biA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyOwogIHJldHVybiByZXM7Cn07Cgp9LHsiMTE2IjoxMTYsIjI4IjoyOH1dLDExMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBkZWZpbmVkID0gX2RlcmVxXygyOCk7CnZhciBmYWlscyA9IF9kZXJlcV8oMzUpOwp2YXIgc3BhY2VzID0gX2RlcmVxXygxMTIpOwp2YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7CnZhciBub24gPSAnXHUyMDBiXHUwMDg1JzsKdmFyIGx0
cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpOwp2YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpOwoKdmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHsKICB2YXIgZXhwID0ge307CiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjsKICB9KTsKICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldOwogIGlmIChBTElB
UykgZXhwW0FMSUFTXSA9IGZuOwogICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApOwp9OwoKLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnQKLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0Ci8vIDMgLT4gU3RyaW5nI3RyaW0KdmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkgewogIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpOwogIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTsKICBpZiAoVFlQ
RSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7CiAgcmV0dXJuIHN0cmluZzsKfTsKCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7Cgp9LHsiMTEyIjoxMTIsIjI4IjoyOCwiMzMiOjMzLCIzNSI6MzV9XSwxMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9ICdceDA5XHgwQVx4MEJceDBDXHgwRFx4MjBceEEwXHUxNjgwXHUxODBFXHUyMDAwXHUyMDAxXHUyMDAyXHUyMDAzJyArCiAgJ1x1MjAwNFx1MjAwNVx1MjAwNlx1MjAwN1x1MjAwOFx1MjAwOVx1MjAw
QVx1MjAyRlx1MjA1Rlx1MzAwMFx1MjAyOFx1MjAyOVx1RkVGRic7Cgp9LHt9XSwxMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgY3R4ID0gX2RlcmVxXygyNSk7CnZhciBpbnZva2UgPSBfZGVyZXFfKDQ2KTsKdmFyIGh0bWwgPSBfZGVyZXFfKDQzKTsKdmFyIGNlbCA9IF9kZXJlcV8oMzApOwp2YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7CnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7CnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTsKdmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVh
ckltbWVkaWF0ZTsKdmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsOwp2YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7CnZhciBjb3VudGVyID0gMDsKdmFyIHF1ZXVlID0ge307CnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJzsKdmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0Owp2YXIgcnVuID0gZnVuY3Rpb24gKCkgewogIHZhciBpZCA9ICt0aGlzOwogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMKICBpZiAocXVldWUu
aGFzT3duUHJvcGVydHkoaWQpKSB7CiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07CiAgICBkZWxldGUgcXVldWVbaWRdOwogICAgZm4oKTsKICB9Cn07CnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkgewogIHJ1bi5jYWxsKGV2ZW50LmRhdGEpOwp9OwovLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6CmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7CiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikgewogICAgdmFyIGFyZ3MgPSBbXTsKICAgIHZhciBpID0g
MTsKICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTsKICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYwogICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7CiAgICB9OwogICAgZGVmZXIoY291bnRlcik7CiAgICByZXR1cm4gY291bnRlcjsKICB9OwogIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRl
KGlkKSB7CiAgICBkZWxldGUgcXVldWVbaWRdOwogIH07CiAgLy8gTm9kZS5qcyAwLjgtCiAgaWYgKF9kZXJlcV8oMTgpKHByb2Nlc3MpID09ICdwcm9jZXNzJykgewogICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHsKICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpOwogICAgfTsKICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUEkKICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykgewogICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHsKICAgICAgRGlzcGF0Y2gubm93
KGN0eChydW4sIGlkLCAxKSk7CiAgICB9OwogIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnMKICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7CiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7CiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjsKICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7CiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTsKICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldv
cmtlcnMKICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0JwogIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7CiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkgewogICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTsKICAgIH07CiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxp
c3RlbmVyLCBmYWxzZSk7CiAgLy8gSUU4LQogIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHsKICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7CiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpOwogICAgICAgIHJ1bi5jYWxsKGlkKTsKICAgICAgfTsKICAgIH07CiAgLy8gUmVzdCBvbGQgYnJvd3NlcnMKICB9IGVsc2UgewogICAgZGVmZXIgPSBmdW5j
dGlvbiAoaWQpIHsKICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApOwogICAgfTsKICB9Cn0KbW9kdWxlLmV4cG9ydHMgPSB7CiAgc2V0OiBzZXRUYXNrLAogIGNsZWFyOiBjbGVhclRhc2sKfTsKCn0seyIxOCI6MTgsIjI1IjoyNSwiMzAiOjMwLCI0MCI6NDAsIjQzIjo0MywiNDYiOjQ2fV0sMTE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTsKdmFyIG1heCA9IE1hdGgubWF4Owp2YXIgbWluID0gTWF0aC5taW47Cm1vZHVsZS5leHBvcnRzID0g
ZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHsKICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7CiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7Cn07Cgp9LHsiMTE2IjoxMTZ9XSwxMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4CnZhciB0b0ludGVnZXIgPSBfZGVyZXFfKDExNik7CnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTsKbW9kdWxlLmV4cG9ydHMg
PSBmdW5jdGlvbiAoaXQpIHsKICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7CiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7CiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7CiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7CiAgcmV0dXJuIGxlbmd0aDsKfTsKCn0seyIxMTYiOjExNiwiMTE4IjoxMTh9XSwxMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyA3LjEuNCBUb0ludGVnZXIKdmFyIGNlaWwgPSBNYXRoLmNlaWw7
CnZhciBmbG9vciA9IE1hdGguZmxvb3I7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7Cn07Cgp9LHt9XSwxMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3MKdmFyIElPYmplY3QgPSBfZGVyZXFfKDQ3KTsKdmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTsKbW9k
dWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7Cn07Cgp9LHsiMjgiOjI4LCI0NyI6NDd9XSwxMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyA3LjEuMTUgVG9MZW5ndGgKdmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTsKdmFyIG1pbiA9IE1hdGgubWluOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMp
IC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxCn07Cgp9LHsiMTE2IjoxMTZ9XSwxMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpCnZhciBkZWZpbmVkID0gX2RlcmVxXygyOCk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7Cn07Cgp9LHsiMjgiOjI4fV0sMTIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlw
ZV0pCnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwovLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZQovLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykgewogIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7CiAgdmFyIGZuLCB2YWw7CiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rp
b24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7CiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7CiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsOwogIHRocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIik7Cn07
Cgp9LHsiNTEiOjUxfV0sMTIxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwppZiAoX2RlcmVxXygyOSkpIHsKICB2YXIgTElCUkFSWSA9IF9kZXJlcV8oNjApOwogIHZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTsKICB2YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTsKICB2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwogIHZhciAkdHlwZWQgPSBfZGVyZXFfKDEyMyk7CiAgdmFyICRidWZmZXIgPSBfZGVyZXFfKDEyMik7CiAgdmFyIGN0eCA9IF9kZXJlcV8oMjUpOwogIHZhciBhbkluc3RhbmNl
ID0gX2RlcmVxXyg2KTsKICB2YXIgcHJvcGVydHlEZXNjID0gX2RlcmVxXyg5Mik7CiAgdmFyIGhpZGUgPSBfZGVyZXFfKDQyKTsKICB2YXIgcmVkZWZpbmVBbGwgPSBfZGVyZXFfKDkzKTsKICB2YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpOwogIHZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTsKICB2YXIgdG9JbmRleCA9IF9kZXJlcV8oMTE1KTsKICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpOwogIHZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTsKICB2YXIgaGFzID0gX2RlcmVxXyg0MSk7CiAg
dmFyIGNsYXNzb2YgPSBfZGVyZXFfKDE3KTsKICB2YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTsKICB2YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7CiAgdmFyIGlzQXJyYXlJdGVyID0gX2RlcmVxXyg0OCk7CiAgdmFyIGNyZWF0ZSA9IF9kZXJlcV8oNzEpOwogIHZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpOwogIHZhciBnT1BOID0gX2RlcmVxXyg3NykuZjsKICB2YXIgZ2V0SXRlckZuID0gX2RlcmVxXygxMjkpOwogIHZhciB1aWQgPSBfZGVyZXFfKDEyNCk7CiAgdmFyIHdrcyA9IF9kZXJlcV8oMTI4KTsKICB2
YXIgY3JlYXRlQXJyYXlNZXRob2QgPSBfZGVyZXFfKDEyKTsKICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IF9kZXJlcV8oMTEpOwogIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfZGVyZXFfKDEwNCk7CiAgdmFyIEFycmF5SXRlcmF0b3JzID0gX2RlcmVxXygxNDEpOwogIHZhciBJdGVyYXRvcnMgPSBfZGVyZXFfKDU4KTsKICB2YXIgJGl0ZXJEZXRlY3QgPSBfZGVyZXFfKDU2KTsKICB2YXIgc2V0U3BlY2llcyA9IF9kZXJlcV8oMTAwKTsKICB2YXIgYXJyYXlGaWxsID0gX2RlcmVxXyg5KTsKICB2YXIgYXJyYXlDb3B5V2l0
aGluID0gX2RlcmVxXyg4KTsKICB2YXIgJERQID0gX2RlcmVxXyg3Mik7CiAgdmFyICRHT1BEID0gX2RlcmVxXyg3NSk7CiAgdmFyIGRQID0gJERQLmY7CiAgdmFyIGdPUEQgPSAkR09QRC5mOwogIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7CiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7CiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTsKICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJzsKICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVG
RkVSOwogIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7CiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnOwogIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTsKICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjsKICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldzsKICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7CiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7CiAgdmFyIGFycmF5U29tZSA9
IGNyZWF0ZUFycmF5TWV0aG9kKDMpOwogIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7CiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpOwogIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpOwogIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTsKICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7CiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzOwogIHZhciBhcnJh
eUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzOwogIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzOwogIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjsKICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTsKICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7CiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjsKICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0OwogIHZhciBhcnJheVNsaWNlID0g
QXJyYXlQcm90by5zbGljZTsKICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7CiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nOwogIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTsKICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpOwogIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTsKICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTsKICB2YXIgQUxMX0NPTlNUUlVD
VE9SUyA9ICR0eXBlZC5DT05TVFI7CiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEOwogIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7CiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJzsKCiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7CiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7CiAgfSk7CgogIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkgewog
ICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTsKICB9KTsKCiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7CiAgfSk7CgogIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHsKICAgIHZhciBvZmZzZXQgPSB0b0ludGVn
ZXIoaXQpOwogICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTsKICAgIHJldHVybiBvZmZzZXQ7CiAgfTsKCiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7CiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7CiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpOwogIH07CgogIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHsKICAgIGlmICgh
KGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7CiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7CiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpOwogIH07CgogIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkgewogICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTsKICB9OwoKICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkgewog
ICAgdmFyIGluZGV4ID0gMDsKICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDsKICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpOwogICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkgewogICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pOwogIH07CgogIHZhciAk
ZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHsKICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTsKICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkOwogICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTsKICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjsKICAgIGlmIChp
dGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7CiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykgewogICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpOwogICAgICB9IE8gPSB2YWx1ZXM7CiAgICB9CiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7CiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0
aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykgewogICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHsKICAgIHZhciBpbmRleCA9IDA7CiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOwogICAgd2hpbGUgKGxlbmd0
aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlCiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTsKCiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkgewogICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHko
VE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICB9OwoKICB2YXIgcHJvdG8gPSB7CiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHsKICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZXZlcnk6IGZ1
bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7CiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwog
ICAgfSwKICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7CiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sCiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTsKICAgIH0sCiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHsKICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJl
ZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykgewogICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHsK
ICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7CiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBpbmNsdWRlczogZnVu
Y3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgewogICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICAg
IH0sCiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogICAgfSwKICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykgewogICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJn
dW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogICAgfSwKICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51
c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoOwogICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTsKICAgICAgdmFyIGluZGV4ID0gMDsKICAgICAgdmFyIHZhbHVlOwogICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHsKICAgICAgICB2
YWx1ZSA9IHRoYXRbaW5kZXhdOwogICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTsKICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTsKICAgICAgfSByZXR1cm4gdGhhdDsKICAgIH0sCiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7CiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBzb3J0OiBmdW5jdGlvbiBz
b3J0KGNvbXBhcmVmbikgewogICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7CiAgICB9LAogICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHsKICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTsKICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoOwogICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpOwogICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoCiAg
ICAgICAgTy5idWZmZXIsCiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCwKICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbikKICAgICAgKTsKICAgIH0KICB9OwoKICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkgewogICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTsK
ICB9OwoKICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHsKICAgIHZhbGlkYXRlKHRoaXMpOwogICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7CiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7CiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTsKICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTsKICAgIHZhciBpbmRleCA9IDA7CiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xF
TkdUSCk7CiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdOwogIH07CgogIHZhciAkaXRlcmF0b3JzID0gewogICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHsKICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTsKICAgIH0sCiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkgewogICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpOwogICAgfSwKICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkgewogICAg
ICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7CiAgICB9CiAgfTsKCiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgewogICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldCkKICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXQogICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnCiAgICAgICYmIGtleSBpbiB0YXJnZXQKICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpOwogIH07CiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlw
dG9yKHRhcmdldCwga2V5KSB7CiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSkKICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pCiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7CiAgfTsKICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykgewogICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpCiAgICAgICYmIGlzT2JqZWN0KGRlc2MpCiAgICAgICYmIGhh
cyhkZXNjLCAndmFsdWUnKQogICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKQogICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKQogICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29ycwogICAgICAmJiAhZGVzYy5jb25maWd1cmFibGUKICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSkKICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpCiAgICApIHsKICAgICAgdGFyZ2V0W2tleV0gPSBkZXNj
LnZhbHVlOwogICAgICByZXR1cm4gdGFyZ2V0OwogICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpOwogIH07CgogIGlmICghQUxMX0NPTlNUUlVDVE9SUykgewogICAgJEdPUEQuZiA9ICRnZXREZXNjOwogICAgJERQLmYgPSAkc2V0RGVzYzsKICB9CgogICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7CiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLAogICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjCiAgfSk7CgogIGlmIChmYWls
cyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7CiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7CiAgICB9OwogIH0KCiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7CiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTsKICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1Is
ICRpdGVyYXRvcnMudmFsdWVzKTsKICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHsKICAgIHNsaWNlOiAkc2xpY2UsCiAgICBzZXQ6ICRzZXQsCiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sCiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZywKICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcKICB9KTsKICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTsKICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0
ZU9mZnNldCcsICdvJyk7CiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpOwogIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpOwogIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7CiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9CiAgfSk7CgogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cwogIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMs
IHdyYXBwZXIsIENMQU1QRUQpIHsKICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7CiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JzsKICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTsKICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTsKICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdOwogICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9OwogICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7CiAgICB2YXIgRk9S
Q0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7CiAgICB2YXIgTyA9IHt9OwogICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTsKICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHsKICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kOwogICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7CiAgICB9OwogICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwg
dmFsdWUpIHsKICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kOwogICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7CiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTsKICAgIH07CiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkgewogICAgICBkUCh0aGF0LCBpbmRleCwgewogICAgICAgIGdldDogZnVuY3Rp
b24gKCkgewogICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7CiAgICAgICAgfSwKICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpOwogICAgICAgIH0sCiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZQogICAgICB9KTsKICAgIH07CiAgICBpZiAoRk9SQ0VEKSB7CiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7CiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBU
eXBlZEFycmF5LCBOQU1FLCAnX2QnKTsKICAgICAgICB2YXIgaW5kZXggPSAwOwogICAgICAgIHZhciBvZmZzZXQgPSAwOwogICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7CiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgewogICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTsKICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUzsKICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7CiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3Rh
bmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7CiAgICAgICAgICBidWZmZXIgPSBkYXRhOwogICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpOwogICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7CiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsK
ICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7CiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7CiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogICAgICAgICAgfQogICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVT
OwogICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgewogICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTsKICAgICAgICB9CiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7CiAgICAgICAgICBiOiBidWZmZXIsCiAgICAgICAgICBvOiBvZmZzZXQsCiAgICAgICAgICBsOiBieXRlTGVuZ3RoLAogICAgICAgICAgZTogbGVuZ3RoLAogICAgICAgICAgdjogbmV3ICREYXRh
VmlldyhidWZmZXIpCiAgICAgICAgfSk7CiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspOwogICAgICB9KTsKICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpOwogICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpOwogICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkgewogICAgICBUeXBlZEFycmF5KDEpOwogICAgfSkg
fHwgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7CiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgICBuZXcg
VHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKICAgIH0sIHRydWUpKSB7CiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7CiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTsKICAgICAgICB2YXIga2xhc3M7CiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXkKICAgICAgICAvLyBodHRwczovL2dpdGh1
Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NQogICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTsKICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikgewogICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZAogICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxl
bmd0aCkKICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWQKICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSkKICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpOwogICAgICAgIH0KICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpOwogICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpOwogICAgICB9KTsKICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24u
cHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pOwogICAgICB9KTsKICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTsKICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTsKICAgIH0KICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBU
eXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTsKICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yCiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpOwogICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzOwogICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7CiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTsKICAgIGhp
ZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7CiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7CgogICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgewogICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH0KICAgICAgfSk7CiAgICB9CgogICAgT1tOQU1FXSA9IFR5cGVkQXJy
YXk7CgogICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHsKICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTCiAgICB9KTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwgewogICAgICBmcm9tOiAkZnJvbSwKICAgICAgb2Y6ICRvZgogICAgfSk7CgogICAgaWYgKCEo
QllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pOwoKICAgIHNldFNwZWNpZXMoTkFNRSk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9y
cyk7CgogICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7CiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7CiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pOwoKICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHsK
ICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTsKICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pOwogICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7CgogICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7CiAgICBpZiAo
IUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpOwogIH07Cn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTsKCn0seyIxMDAiOjEwMCwiMTA0IjoxMDQsIjExIjoxMSwiMTE0IjoxMTQsIjExNSI6MTE1LCIxMTYiOjExNiwiMTE4IjoxMTgsIjExOSI6MTE5LCIxMiI6MTIsIjEyMCI6MTIwLCIxMjIiOjEyMiwiMTIzIjoxMjMsIjEyNCI6MTI0LCIxMjgiOjEyOCwiMTI5IjoxMjksIjE0MSI6MTQxLCIx
NyI6MTcsIjI1IjoyNSwiMjkiOjI5LCIzMyI6MzMsIjM1IjozNSwiNDAiOjQwLCI0MSI6NDEsIjQyIjo0MiwiNDgiOjQ4LCI1MSI6NTEsIjU2Ijo1NiwiNTgiOjU4LCI2Ijo2LCI2MCI6NjAsIjcxIjo3MSwiNzIiOjcyLCI3NSI6NzUsIjc3Ijo3NywiNzkiOjc5LCI4Ijo4LCI5Ijo5LCI5MiI6OTIsIjkzIjo5M31dLDEyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApOwp2YXIgREVTQ1JJUFRPUlMgPSBfZGVyZXFfKDI5KTsKdmFyIExJQlJBUlkg
PSBfZGVyZXFfKDYwKTsKdmFyICR0eXBlZCA9IF9kZXJlcV8oMTIzKTsKdmFyIGhpZGUgPSBfZGVyZXFfKDQyKTsKdmFyIHJlZGVmaW5lQWxsID0gX2RlcmVxXyg5Myk7CnZhciBmYWlscyA9IF9kZXJlcV8oMzUpOwp2YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7CnZhciB0b0ludGVnZXIgPSBfZGVyZXFfKDExNik7CnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTsKdmFyIHRvSW5kZXggPSBfZGVyZXFfKDExNSk7CnZhciBnT1BOID0gX2RlcmVxXyg3NykuZjsKdmFyIGRQID0gX2RlcmVxXyg3MikuZjsKdmFyIGFycmF5Rmls
bCA9IF9kZXJlcV8oOSk7CnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTsKdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7CnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnOwp2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7CnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7CnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnOwp2YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07CnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTsKdmFyIE1hdGggPSBn
bG9iYWwuTWF0aDsKdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzCnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTsKdmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7CnZhciBhYnMgPSBNYXRoLmFiczsKdmFyIHBvdyA9IE1hdGgucG93Owp2YXIgZmxvb3IgPSBNYXRoLmZsb29yOwp2YXIgbG9nID0gTWF0aC5sb2c7CnZhciBMTjIgPSBNYXRoLkxOMjsKdmFyIEJVRkZFUiA9ICdidWZmZXInOwp2YXIgQllU
RV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7CnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JzsKdmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7CnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7CnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7CgovLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NApmdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5
dGVzKSB7CiAgdmFyIGJ1ZmZlciA9IEFycmF5KG5CeXRlcyk7CiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7CiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7CiAgdmFyIGVCaWFzID0gZU1heCA+PiAxOwogIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7CiAgdmFyIGkgPSAwOwogIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDsKICB2YXIgZSwgbSwgYzsKICB2YWx1ZSA9IGFicyh2YWx1ZSk7CiAgLy8g
ZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQogIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwOwogICAgZSA9IGVNYXg7CiAgfSBlbHNlIHsKICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTsKICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7CiAgICAgIGUtLTsKICAgICAgYyAqPSAyOwogICAgfQogICAg
aWYgKGUgKyBlQmlhcyA+PSAxKSB7CiAgICAgIHZhbHVlICs9IHJ0IC8gYzsKICAgIH0gZWxzZSB7CiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7CiAgICB9CiAgICBpZiAodmFsdWUgKiBjID49IDIpIHsKICAgICAgZSsrOwogICAgICBjIC89IDI7CiAgICB9CiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHsKICAgICAgbSA9IDA7CiAgICAgIGUgPSBlTWF4OwogICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkgewogICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pOwogICAgICBl
ID0gZSArIGVCaWFzOwogICAgfSBlbHNlIHsKICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7CiAgICAgIGUgPSAwOwogICAgfQogIH0KICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpOwogIGUgPSBlIDw8IG1MZW4gfCBtOwogIGVMZW4gKz0gbUxlbjsKICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7CiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODsKICByZXR1
cm4gYnVmZmVyOwp9CmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHsKICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTsKICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTsKICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7CiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7CiAgdmFyIGkgPSBuQnl0ZXMgLSAxOwogIHZhciBzID0gYnVmZmVyW2ktLV07CiAgdmFyIGUgPSBzICYgMTI3OwogIHZhciBtOwogIHMgPj49IDc7CiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJb
aV0sIGktLSwgbkJpdHMgLT0gOCk7CiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTsKICBlID4+PSAtbkJpdHM7CiAgbkJpdHMgKz0gbUxlbjsKICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTsKICBpZiAoZSA9PT0gMCkgewogICAgZSA9IDEgLSBlQmlhczsKICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHsKICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5OwogIH0gZWxzZSB7CiAgICBtID0gbSArIHBvdygyLCBtTGVuKTsKICAgIGUg
PSBlIC0gZUJpYXM7CiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7Cn0KCmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykgewogIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdOwp9CmZ1bmN0aW9uIHBhY2tJOChpdCkgewogIHJldHVybiBbaXQgJiAweGZmXTsKfQpmdW5jdGlvbiBwYWNrSTE2KGl0KSB7CiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTsKfQpmdW5jdGlvbiBwYWNrSTMyKGl0KSB7CiAgcmV0
dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07Cn0KZnVuY3Rpb24gcGFja0Y2NChpdCkgewogIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpOwp9CmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHsKICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTsKfQoKZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHsKICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pOwp9
CgpmdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikgewogIHZhciBudW1JbmRleCA9ICtpbmRleDsKICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTsKICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpOwogIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7CiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdOwogIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0
ZXMpOwogIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTsKfQpmdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHsKICB2YXIgbnVtSW5kZXggPSAraW5kZXg7CiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7CiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTsKICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iOwogIHZhciBzdGFy
dCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTsKICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTsKICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdOwp9CgppZiAoISR0eXBlZC5BQlYpIHsKICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHsKICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpOwogICAgdmFyIGJ5dGVMZW5ndGggPSB0
b0luZGV4KGxlbmd0aCk7CiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApOwogICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7CiAgfTsKCiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7CiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTsKICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7CiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5H
VEhdOwogICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTsKICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpOwogICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpOwogICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgIHRoaXNb
JEJVRkZFUl0gPSBidWZmZXI7CiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0OwogICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7CiAgfTsKCiAgaWYgKERFU0NSSVBUT1JTKSB7CiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7CiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpOwogICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpOwogICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpOwogIH0KCiAgcmVkZWZpbmVB
bGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHsKICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkgewogICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0OwogICAgfSwKICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7CiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07CiAgICB9LAogICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHsKICAgICAg
dmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7CiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjsKICAgIH0sCiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7CiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pOwogICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdOwogICAgfSwKICAgIGdldEludDMyOiBm
dW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7CiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpOwogICAgfSwKICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHsKICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7CiAgICB9LAogICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0Rmxv
YXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7CiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7CiAgICB9LAogICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7CiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7CiAgICB9LAogICAgc2V0SW50ODogZnVuY3Rpb24gc2V0
SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkgewogICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7CiAgICB9LAogICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7CiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTsKICAgIH0sCiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHsKICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYs
IHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7CiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0sCiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHsKICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1
bWVudHNbMl0pOwogICAgfSwKICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7CiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0sCiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7CiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJd
KTsKICAgIH0sCiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7CiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0KICB9KTsKfSBlbHNlIHsKICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAgICRBcnJheUJ1ZmZlcigxKTsKICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkgewogICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8t
bmV3CiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkgewogICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjsKICB9KSkgewogICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3Ro
KSB7CiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTsKICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7CiAgICB9OwogICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTsKICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7CiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5
QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7CiAgICB9CiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7CiAgfQogIC8vIGlPUyBTYWZhcmkgNy54IGJ1ZwogIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTsKICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4OwogIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTsKICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7CiAgaWYgKHZpZXcuZ2V0
SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgewogICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkgewogICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTsKICAgIH0sCiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHsKICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7CiAgICB9CiAg
fSwgdHJ1ZSk7Cn0Kc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpOwpzZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7CmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTsKZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyOwpleHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7Cgp9LHsiMTAxIjoxMDEsIjExNSI6MTE1LCIxMTYiOjExNiwiMTE4IjoxMTgsIjEyMyI6MTIzLCIyOSI6MjksIjM1IjozNSwiNDAiOjQwLCI0MiI6NDIsIjYi
OjYsIjYwIjo2MCwiNzIiOjcyLCI3NyI6NzcsIjkiOjksIjkzIjo5M31dLDEyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTsKdmFyIGhpZGUgPSBfZGVyZXFfKDQyKTsKdmFyIHVpZCA9IF9kZXJlcV8oMTI0KTsKdmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpOwp2YXIgVklFVyA9IHVpZCgndmlldycpOwp2YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7CnZhciBDT05TVFIgPSBBQlY7CnZhciBpID0gMDsKdmFyIGwg
PSA5Owp2YXIgVHlwZWQ7Cgp2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9ICgKICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknCikuc3BsaXQoJywnKTsKCndoaWxlIChpIDwgbCkgewogIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7CiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpOwogICAgaGlkZShUeXBl
ZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpOwogIH0gZWxzZSBDT05TVFIgPSBmYWxzZTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgQUJWOiBBQlYsCiAgQ09OU1RSOiBDT05TVFIsCiAgVFlQRUQ6IFRZUEVELAogIFZJRVc6IFZJRVcKfTsKCn0seyIxMjQiOjEyNCwiNDAiOjQwLCI0MiI6NDJ9XSwxMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgaWQgPSAwOwp2YXIgcHggPSBNYXRoLnJhbmRvbSgpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHsKICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNh
dChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpOwp9OwoKfSx7fV0sMTI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7CiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7CiAgcmV0dXJuIGl0Owp9
OwoKfSx7IjUxIjo1MX1dLDEyNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTsKdmFyIGNvcmUgPSBfZGVyZXFfKDIzKTsKdmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTsKdmFyIHdrc0V4dCA9IF9kZXJlcV8oMTI3KTsKdmFyIGRlZmluZVByb3BlcnR5ID0gX2RlcmVxXyg3MikuZjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkgewogIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5
bWJvbCB8fCB7fSk7CiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pOwp9OwoKfSx7IjEyNyI6MTI3LCIyMyI6MjMsIjQwIjo0MCwiNjAiOjYwLCI3MiI6NzJ9XSwxMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewpleHBvcnRzLmYgPSBfZGVyZXFfKDEyOCk7Cgp9LHsiMTI4IjoxMjh9XSwxMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgc3Rv
cmUgPSBfZGVyZXFfKDEwMykoJ3drcycpOwp2YXIgdWlkID0gX2RlcmVxXygxMjQpOwp2YXIgU3ltYm9sID0gX2RlcmVxXyg0MCkuU3ltYm9sOwp2YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJzsKCnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHsKICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0KICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7
Cn07CgokZXhwb3J0cy5zdG9yZSA9IHN0b3JlOwoKfSx7IjEwMyI6MTAzLCIxMjQiOjEyNCwiNDAiOjQwfV0sMTI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNsYXNzb2YgPSBfZGVyZXFfKDE3KTsKdmFyIElURVJBVE9SID0gX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpOwp2YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7Cm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHsKICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRF
UkFUT1JdCiAgICB8fCBpdFsnQEBpdGVyYXRvciddCiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldOwp9OwoKfSx7IjEyOCI6MTI4LCIxNyI6MTcsIjIzIjoyMywiNTgiOjU4fV0sMTMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgJHJlID0gX2RlcmVxXyg5NSkoL1tcXF4kKis/LigpfFtcXXt9XS9nLCAnXFwkJicpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAn
LCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pOwoKfSx7IjMzIjozMywiOTUiOjk1fV0sMTMxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiBfZGVyZXFfKDgpIH0pOwoKX2RlcmVxXyg1KSgnY29weVdpdGhpbicp
OwoKfSx7IjMzIjozMywiNSI6NSwiOCI6OH1dLDEzMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRldmVyeSA9IF9kZXJlcV8oMTIpKDQpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIGV2ZXJ5OiBmdW5jdGlv
biBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykgewogICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pOwogIH0KfSk7Cgp9LHsiMTA1IjoxMDUsIjEyIjoxMiwiMzMiOjMzfV0sMTMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxs
OiBfZGVyZXFfKDkpIH0pOwoKX2RlcmVxXyg1KSgnZmlsbCcpOwoKfSx7IjMzIjozMywiNSI6NSwiOSI6OX1dLDEzNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRmaWx0ZXIgPSBfZGVyZXFfKDEyKSgyKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIV9kZXJlcV8oMTA1KShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihj
YWxsYmFja2ZuIFssIHRoaXNBcmddKQogIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7CiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pOwogIH0KfSk7Cgp9LHsiMTA1IjoxMDUsIjEyIjoxMiwiMzMiOjMzfV0sMTM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKdmFyICRl
eHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRmaW5kID0gX2RlcmVxXygxMikoNik7CnZhciBLRVkgPSAnZmluZEluZGV4JzsKdmFyIGZvcmNlZCA9IHRydWU7Ci8vIFNob3VsZG4ndCBza2lwIGhvbGVzCmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7CiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7CiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHsK
ICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgfQp9KTsKX2RlcmVxXyg1KShLRVkpOwoKfSx7IjEyIjoxMiwiMzMiOjMzLCI1Ijo1fV0sMTM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkZmluZCA9IF9kZXJl
cV8oMTIpKDUpOwp2YXIgS0VZID0gJ2ZpbmQnOwp2YXIgZm9yY2VkID0gdHJ1ZTsKLy8gU2hvdWxkbid0IHNraXAgaG9sZXMKaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTsKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHsKICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7CiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+
IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7Cl9kZXJlcV8oNSkoS0VZKTsKCn0seyIxMiI6MTIsIjMzIjozMywiNSI6NX1dLDEzNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRmb3JFYWNoID0gX2RlcmVxXygxMikoMCk7CnZhciBTVFJJQ1QgPSBfZGVyZXFfKDEwNSkoW10uZm9yRWFjaCwgdHJ1ZSk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHsKICAvLyAy
Mi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSkKICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7CiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwoKfSx7IjEwNSI6MTA1LCIxMiI6MTIsIjMzIjozM31dLDEzODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGN0eCA9IF9kZXJlcV8oMjUpOwp2YXIg
JGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7CnZhciBjYWxsID0gX2RlcmVxXyg1Myk7CnZhciBpc0FycmF5SXRlciA9IF9kZXJlcV8oNDgpOwp2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7CnZhciBjcmVhdGVQcm9wZXJ0eSA9IF9kZXJlcV8oMjQpOwp2YXIgZ2V0SXRlckZuID0gX2RlcmVxXygxMjkpOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXyg1NikoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHsKICAv
LyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpCiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykgewogICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpOwogICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5OwogICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgdmFyIG1hcGZuID0gYUxlbiA+IDEg
PyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7CiAgICB2YXIgaW5kZXggPSAwOwogICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTsKICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7CiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTsKICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRv
ciAtIHVzZSBzaW1wbGUgY2FzZQogICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7CiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7CiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUp
OwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7CiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHsKICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTsKICAgICAgfQogICAgfQogICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4OwogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwoKfSx7IjExOCI6MTE4LCIxMTkiOjExOSwiMTI5
IjoxMjksIjI0IjoyNCwiMjUiOjI1LCIzMyI6MzMsIjQ4Ijo0OCwiNTMiOjUzLCI1NiI6NTZ9XSwxMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkaW5kZXhPZiA9IF9kZXJlcV8oMTEpKGZhbHNlKTsKdmFyICRuYXRpdmUgPSBbXS5pbmRleE9mOwp2YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZF
X1pFUk8gfHwgIV9kZXJlcV8oMTA1KSgkbmF0aXZlKSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKQogIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHsKICAgIHJldHVybiBORUdBVElWRV9aRVJPCiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzAKICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMAogICAgICA6ICRpbmRl
eE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKCn0seyIxMDUiOjEwNSwiMTEiOjExLCIzMyI6MzN9XSwxNDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogX2RlcmVxXyg0OSkgfSk7Cgp9LHsiMzMiOjMzLCI0OSI6NDl9XSwxNDE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9y
dHMpewondXNlIHN0cmljdCc7CnZhciBhZGRUb1Vuc2NvcGFibGVzID0gX2RlcmVxXyg1KTsKdmFyIHN0ZXAgPSBfZGVyZXFfKDU3KTsKdmFyIEl0ZXJhdG9ycyA9IF9kZXJlcV8oNTgpOwp2YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpOwoKLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKQovLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKQovLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpCi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKQptb2R1bGUu
ZXhwb3J0cyA9IF9kZXJlcV8oNTUpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHsKICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0CiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXgKICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZAovLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KCkKfSwgZnVuY3Rpb24gKCkgewogIHZhciBPID0gdGhpcy5fdDsKICB2YXIga2luZCA9IHRoaXMuX2s7
CiAgdmFyIGluZGV4ID0gdGhpcy5faSsrOwogIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkgewogICAgdGhpcy5fdCA9IHVuZGVmaW5lZDsKICAgIHJldHVybiBzdGVwKDEpOwogIH0KICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTsKICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pOwogIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTsKfSwgJ3ZhbHVlcycpOwoKLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192
YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KQpJdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5OwoKYWRkVG9VbnNjb3BhYmxlcygna2V5cycpOwphZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTsKYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpOwoKfSx7IjExNyI6MTE3LCI1Ijo1LCI1NSI6NTUsIjU3Ijo1NywiNTgiOjU4fV0sMTQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKQp2YXIgJGV4
cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpOwp2YXIgYXJyYXlKb2luID0gW10uam9pbjsKCi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKF9kZXJlcV8oNDcpICE9IE9iamVjdCB8fCAhX2RlcmVxXygxMDUpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7CiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsKICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9
PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTsKICB9Cn0pOwoKfSx7IjEwNSI6MTA1LCIxMTciOjExNywiMzMiOjMzLCI0NyI6NDd9XSwxNDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7CnZhciB0b0ludGVnZXIgPSBfZGVyZXFfKDExNik7CnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTsKdmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjsKdmFyIE5FR0FUSVZFX1pFUk8g
PSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhX2RlcmVxXygxMDUpKCRuYXRpdmUpKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKQogIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7CiAg
ICAvLyBjb252ZXJ0IC0wIHRvICswCiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwOwogICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7CiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpOwogICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpOwogICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBp
bmRleDsKICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwOwogICAgcmV0dXJuIC0xOwogIH0KfSk7Cgp9LHsiMTA1IjoxMDUsIjExNiI6MTE2LCIxMTciOjExNywiMTE4IjoxMTgsIjMzIjozM31dLDE0NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRtYXAgPSBfZGVyZXFfKDEyKSgxKTsKCiRleHBvcnQoJGV4
cG9ydC5QICsgJGV4cG9ydC5GICogIV9kZXJlcV8oMTA1KShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSkKICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykgewogICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwoKfSx7IjEwNSI6MTA1LCIxMiI6MTIsIjMzIjozM31dLDE0NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUs
ZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGNyZWF0ZVByb3BlcnR5ID0gX2RlcmVxXygyNCk7CgovLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpYwokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIF9kZXJlcV8oMzUpKGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9CiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpOwp9KSwgJ0FycmF5JywgewogIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcykK
ICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykgewogICAgdmFyIGluZGV4ID0gMDsKICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pOwogICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTsKICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuOwogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwoKfSx7IjI0IjoyNCwi
MzMiOjMzLCIzNSI6MzV9XSwxNDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkcmVkdWNlID0gX2RlcmVxXygxMyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pCiAgcmVkdWNlUmln
aHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsKICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7CiAgfQp9KTsKCn0seyIxMDUiOjEwNSwiMTMiOjEzLCIzMyI6MzN9XSwxNDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkcmVkdWNlID0gX2RlcmVxXygxMyk7CgokZXhwb3J0KCRleHBvcnQu
UCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSkKICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7CiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTsKICB9Cn0pOwoKfSx7IjEwNSI6MTA1LCIx
MyI6MTMsIjMzIjozM31dLDE0ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGh0bWwgPSBfZGVyZXFfKDQzKTsKdmFyIGNvZiA9IF9kZXJlcV8oMTgpOwp2YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpOwp2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7CnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7CgovLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzCiRleHBv
cnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgewogIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7Cn0pLCAnQXJyYXknLCB7CiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHsKICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7CiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7CiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDsKICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMs
IGJlZ2luLCBlbmQpOwogICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pOwogICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pOwogICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpOwogICAgdmFyIGNsb25lZCA9IEFycmF5KHNpemUpOwogICAgdmFyIGkgPSAwOwogICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnCiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKQogICAgICA6IHRoaXNbc3RhcnQgKyBpXTsKICAg
IHJldHVybiBjbG9uZWQ7CiAgfQp9KTsKCn0seyIxMTQiOjExNCwiMTE4IjoxMTgsIjE4IjoxOCwiMzMiOjMzLCIzNSI6MzUsIjQzIjo0M31dLDE0OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRzb21lID0gX2RlcmVxXygxMikoMyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJv
dG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSkKICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7CiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwoKfSx7IjEwNSI6MTA1LCIxMiI6MTIsIjMzIjozM31dLDE1MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7CnZhciB0b09iamVjdCA9
IF9kZXJlcV8oMTE5KTsKdmFyIGZhaWxzID0gX2RlcmVxXygzNSk7CnZhciAkc29ydCA9IFtdLnNvcnQ7CnZhciB0ZXN0ID0gWzEsIDIsIDNdOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkgewogIC8vIElFOC0KICB0ZXN0LnNvcnQodW5kZWZpbmVkKTsKfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAvLyBWOCBidWcKICB0ZXN0LnNvcnQobnVsbCk7CiAgLy8gT2xkIFdlYktpdAp9KSB8fCAhX2RlcmVxXygxMDUpKCRzb3J0KSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMjUg
QXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKQogIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7CiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWQKICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKQogICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTsKICB9Cn0pOwoKfSx7IjEwNSI6MTA1LCIxMTkiOjExOSwiMyI6MywiMzMiOjMzLCIzNSI6MzV9XSwxNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewpfZGVyZXFfKDEw
MCkoJ0FycmF5Jyk7Cgp9LHsiMTAwIjoxMDB9XSwxNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTsKCn0seyIzMyI6MzN9XSwxNTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90
b3R5cGUudG9JU09TdHJpbmcoKQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgdG9JU09TdHJpbmcgPSBfZGVyZXFfKDI2KTsKCi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9ucwokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHsKICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmcKfSk7Cgp9LHsiMjYiOjI2LCIzMyI6MzN9XSwxNTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9k
dWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTsKdmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGwKICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7
Cn0pLCAnRGF0ZScsIHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHsKICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7CiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTsKICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7CiAgfQp9KTsKCn0seyIxMTkiOjExOSwiMTIwIjoxMjAsIjMzIjozMywiMzUiOjM1fV0sMTU1OltmdW5jdGlvbihfZGVyZXFfLG1v
ZHVsZSxleHBvcnRzKXsKdmFyIFRPX1BSSU1JVElWRSA9IF9kZXJlcV8oMTI4KSgndG9QcmltaXRpdmUnKTsKdmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7CgppZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSBfZGVyZXFfKDQyKShwcm90bywgVE9fUFJJTUlUSVZFLCBfZGVyZXFfKDI3KSk7Cgp9LHsiMTI4IjoxMjgsIjI3IjoyNywiNDIiOjQyfV0sMTU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlOwp2YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQg
RGF0ZSc7CnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnOwp2YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107CnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7CmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7CiAgX2RlcmVxXyg5NCkoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpOwogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQogICAgcmV0dXJu
IHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFOwogIH0pOwp9Cgp9LHsiOTQiOjk0fV0sMTU3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogX2RlcmVxXygxNikgfSk7Cgp9LHsiMTYiOjE2LCIzMyI6MzN9XSwxNTg6W2Z1bmN0aW9u
KF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwp2YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTsKdmFyIEhBU19JTlNUQU5DRSA9IF9kZXJlcV8oMTI4KSgnaGFzSW5zdGFuY2UnKTsKdmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7Ci8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKQppZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIF9kZXJlcV8oNzIpLmYoRnVuY3Rpb25Q
cm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykgewogIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlOwogIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7CiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczoKICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90
b3R5cGUgPT09IE8pIHJldHVybiB0cnVlOwogIHJldHVybiBmYWxzZTsKfSB9KTsKCn0seyIxMjgiOjEyOCwiNTEiOjUxLCI3MiI6NzIsIjc5Ijo3OX1dLDE1OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBkUCA9IF9kZXJlcV8oNzIpLmY7CnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7CnZhciBuYW1lUkUgPSAvXlxzKmZ1bmN0aW9uIChbXiAoXSopLzsKdmFyIE5BTUUgPSAnbmFtZSc7CgovLyAxOS4yLjQuMiBuYW1lCk5BTUUgaW4gRlByb3RvIHx8IF9kZXJlcV8oMjkpICYmIGRQKEZQcm90
bywgTkFNRSwgewogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdOwogICAgfSBjYXRjaCAoZSkgewogICAgICByZXR1cm4gJyc7CiAgICB9CiAgfQp9KTsKCn0seyIyOSI6MjksIjcyIjo3Mn1dLDE2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHN0cm9uZyA9IF9kZXJlcV8oMTkpOwp2YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7CnZhciBNQVAgPSAnTWFw
JzsKCi8vIDIzLjEgTWFwIE9iamVjdHMKbW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKDIyKShNQVAsIGZ1bmN0aW9uIChnZXQpIHsKICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTsKfSwgewogIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSkKICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHsKICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpOwog
ICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7CiAgfSwKICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKQogIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHsKICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTsKICB9Cn0sIHN0cm9uZywgdHJ1ZSk7Cgp9LHsiMTI1IjoxMjUsIjE5IjoxOSwiMjIiOjIyfV0sMTYxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4
KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgbG9nMXAgPSBfZGVyZXFfKDYzKTsKdmFyIHNxcnQgPSBNYXRoLnNxcnQ7CnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaAogIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDkKICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwCiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAt
PiBOYU4KICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5CiksICdNYXRoJywgewogIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7CiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2CiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMgogICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7CiAgfQp9KTsKCn0seyIzMyI6MzMsIjYzIjo2M31dLDE2MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi41IE1h
dGguYXNpbmgoeCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRhc2luaCA9IE1hdGguYXNpbmg7CgpmdW5jdGlvbiBhc2luaCh4KSB7CiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpOwp9CgovLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTAKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywg
eyBhc2luaDogYXNpbmggfSk7Cgp9LHsiMzMiOjMzfV0sMTYzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgJGF0YW5oID0gTWF0aC5hdGFuaDsKCi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMAokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywgewogIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7CiAgICBy
ZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyOwogIH0KfSk7Cgp9LHsiMzMiOjMzfV0sMTY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBzaWduID0gX2RlcmVxXyg2NSk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7CiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCks
IDEgLyAzKTsKICB9Cn0pOwoKfSx7IjMzIjozMywiNjUiOjY1fV0sMTY1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkgewogICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyOwogIH0KfSk7Cgp9LHsiMzMiOjMzfV0sMTY2OltmdW5j
dGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgZXhwID0gTWF0aC5leHA7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7CiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyOwogIH0KfSk7Cgp9LHsiMzMiOjMzfV0sMTY3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeCkKdmFyICRleHBvcnQg
PSBfZGVyZXFfKDMzKTsKdmFyICRleHBtMSA9IF9kZXJlcV8oNjEpOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTsKCn0seyIzMyI6MzMsIjYxIjo2MX1dLDE2ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IF9kZXJlcV8oNjIpIH0pOwoKfSx7
IjMzIjozMywiNjIiOjYyfV0sMTY5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBhYnMgPSBNYXRoLmFiczsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgdmFyIHN1bSA9IDA7CiAgICB2YXIgaSA9IDA7CiAg
ICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICB2YXIgbGFyZyA9IDA7CiAgICB2YXIgYXJnLCBkaXY7CiAgICB3aGlsZSAoaSA8IGFMZW4pIHsKICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTsKICAgICAgaWYgKGxhcmcgPCBhcmcpIHsKICAgICAgICBkaXYgPSBsYXJnIC8gYXJnOwogICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7CiAgICAgICAgbGFyZyA9IGFyZzsKICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7CiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZzsKICAgICAgICBzdW0gKz0gZGl2
ICogZGl2OwogICAgICB9IGVsc2Ugc3VtICs9IGFyZzsKICAgIH0KICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pOwogIH0KfSk7Cgp9LHsiMzMiOjMzfV0sMTcwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgJGltdWwgPSBNYXRoLmltdWw7CgovLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhh
cyB3cm9uZyBhcml0eQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIF9kZXJlcV8oMzUpKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7Cn0pLCAnTWF0aCcsIHsKICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHsKICAgIHZhciBVSU5UMTYgPSAweGZmZmY7CiAgICB2YXIgeG4gPSAreDsKICAgIHZhciB5biA9ICt5OwogICAgdmFyIHhsID0gVUlOVDE2ICYgeG47CiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjsKICAgIHJldHVybiAwIHwg
eGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7CiAgfQp9KTsKCn0seyIzMyI6MzMsIjM1IjozNX1dLDE3MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHsKICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFOwog
IH0KfSk7Cgp9LHsiMzMiOjMzfV0sMTcyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IF9kZXJlcV8oNjMpIH0pOwoKfSx7IjMzIjozMywiNjMiOjYzfV0sMTczOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMs
ICdNYXRoJywgewogIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkgewogICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7CiAgfQp9KTsKCn0seyIzMyI6MzN9XSwxNzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IF9kZXJlcV8oNjUpIH0pOwoKfSx7IjMzIjozMywiNjUiOjY1fV0sMTc1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsK
Ly8gMjAuMi4yLjMwIE1hdGguc2luaCh4KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgZXhwbTEgPSBfZGVyZXFfKDYxKTsKdmFyIGV4cCA9IE1hdGguZXhwOwoKLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgewogIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3Owp9KSwgJ01hdGgnLCB7CiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7CiAg
ICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDEKICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMgogICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpOwogIH0KfSk7Cgp9LHsiMzMiOjMzLCIzNSI6MzUsIjYxIjo2MX1dLDE3NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGV4cG0xID0gX2RlcmVxXyg2MSk7CnZhciBleHAgPSBNYXRoLmV4cDsKCiRleHBvcnQo
JGV4cG9ydC5TLCAnTWF0aCcsIHsKICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHsKICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTsKICAgIHZhciBiID0gZXhwbTEoLXgpOwogICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTsKICB9Cn0pOwoKfSx7IjMzIjozMywiNjEiOjYxfV0sMTc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMz
KTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHsKICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpOwogIH0KfSk7Cgp9LHsiMzMiOjMzfV0sMTc4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7CnZhciBoYXMgPSBfZGVyZXFfKDQxKTsKdmFyIGNvZiA9IF9kZXJlcV8oMTgpOwp2YXIgaW5oZXJpdElmUmVxdWlyZWQgPSBfZGVyZXFfKDQ1KTsKdmFy
IHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApOwp2YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTsKdmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mOwp2YXIgZ09QRCA9IF9kZXJlcV8oNzUpLmY7CnZhciBkUCA9IF9kZXJlcV8oNzIpLmY7CnZhciAkdHJpbSA9IF9kZXJlcV8oMTExKS50cmltOwp2YXIgTlVNQkVSID0gJ051bWJlcic7CnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07CnZhciBCYXNlID0gJE51bWJlcjsKdmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7Ci8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0
cmluZwp2YXIgQlJPS0VOX0NPRiA9IGNvZihfZGVyZXFfKDcxKShwcm90bykpID09IE5VTUJFUjsKdmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTsKCi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KQp2YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpOwogIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikgewogICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpOwogICAgdmFy
IGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTsKICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7CiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkgewogICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7CiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeAogICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHsKICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7CiAgICAgICAg
Y2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaQogICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaQogICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7CiAgICAgIH0KICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykgewogICAgICAgIGNvZGUgPSBk
aWdpdHMuY2hhckNvZGVBdChpKTsKICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2wKICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9scwogICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47CiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpOwogICAgfQogIH0gcmV0dXJuICtpdDsKfTsKCmlmICghJE51bWJl
cignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHsKICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7CiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlcgogICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2UKICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0
KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKQogICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7CiAgfTsKICBmb3IgKHZhciBrZXlzID0gX2RlcmVxXygyOSkgPyBnT1BOKEJhc2UpIDogKAogICAgLy8gRVMzOgogICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgKwogICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNz
IHJlcXVpcmVkIGJlZm9yZSk6CiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgKwogICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInCiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykgewogICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHsKICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpOwogICAg
fQogIH0KICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvOwogIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjsKICBfZGVyZXFfKDk0KShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7Cn0KCn0seyIxMTEiOjExMSwiMTIwIjoxMjAsIjE4IjoxOCwiMjkiOjI5LCIzNSI6MzUsIjQwIjo0MCwiNDEiOjQxLCI0NSI6NDUsIjcxIjo3MSwiNzIiOjcyLCI3NSI6NzUsIjc3Ijo3NywiOTQiOjk0fV0sMTc5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT04KdmFyICRleHBvcnQg
PSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pOwoKfSx7IjMzIjozM31dLDE4MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBfaXNGaW5pdGUgPSBfZGVyZXFfKDQwKS5pc0Zpbml0ZTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgewogIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkgewog
ICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpOwogIH0KfSk7Cgp9LHsiMzMiOjMzLCI0MCI6NDB9XSwxODE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IF9kZXJlcV8oNTApIH0pOwoKfSx7IjMzIjozMywiNTAiOjUwfV0sMTgyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRz
KXsKLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcikKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgewogIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyOwogIH0KfSk7Cgp9LHsiMzMiOjMzfV0sMTgzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIo
bnVtYmVyKQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgaXNJbnRlZ2VyID0gX2RlcmVxXyg1MCk7CnZhciBhYnMgPSBNYXRoLmFiczsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgewogIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7CiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjsKICB9Cn0pOwoKfSx7IjMzIjozMywiNTAiOjUwfV0sMTg0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsK
Ly8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pOwoKfSx7IjMzIjozM31dLDE4NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUgp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6
IC0weDFmZmZmZmZmZmZmZmZmIH0pOwoKfSx7IjMzIjozM31dLDE4NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkcGFyc2VGbG9hdCA9IF9kZXJlcV8oODYpOwovLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pOwoKfSx7IjMzIjozMywiODYiOjg2
fV0sMTg3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRwYXJzZUludCA9IF9kZXJlcV8oODcpOwovLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pOwoKfSx7IjMzIjozMywiODciOjg3fV0sMTg4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRz
KXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpOwp2YXIgYU51bWJlclZhbHVlID0gX2RlcmVxXyg0KTsKdmFyIHJlcGVhdCA9IF9kZXJlcV8oMTEwKTsKdmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7CnZhciBmbG9vciA9IE1hdGguZmxvb3I7CnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdOwp2YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7CnZhciBaRVJPID0gJzAnOwoKdmFyIG11bHRpcGx5ID0g
ZnVuY3Rpb24gKG4sIGMpIHsKICB2YXIgaSA9IC0xOwogIHZhciBjMiA9IGM7CiAgd2hpbGUgKCsraSA8IDYpIHsKICAgIGMyICs9IG4gKiBkYXRhW2ldOwogICAgZGF0YVtpXSA9IGMyICUgMWU3OwogICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7CiAgfQp9Owp2YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHsKICB2YXIgaSA9IDY7CiAgdmFyIGMgPSAwOwogIHdoaWxlICgtLWkgPj0gMCkgewogICAgYyArPSBkYXRhW2ldOwogICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTsKICAgIGMgPSAoYyAlIG4pICogMWU3OwogIH0KfTsKdmFy
IG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkgewogIHZhciBpID0gNjsKICB2YXIgcyA9ICcnOwogIHdoaWxlICgtLWkgPj0gMCkgewogICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkgewogICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTsKICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDsKICAgIH0KICB9IHJldHVybiBzOwp9Owp2YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykgewogIHJldHVybiBuID09PSAwID8gYWNj
IDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTsKfTsKdmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7CiAgdmFyIG4gPSAwOwogIHZhciB4MiA9IHg7CiAgd2hpbGUgKHgyID49IDQwOTYpIHsKICAgIG4gKz0gMTI7CiAgICB4MiAvPSA0MDk2OwogIH0KICB3aGlsZSAoeDIgPj0gMikgewogICAgbiArPSAxOwogICAgeDIgLz0gMjsKICB9IHJldHVybiBuOwp9OwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoCiAgMC4wMDAwOC50
b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8CiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fAogIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fAogIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCcKKSB8fCAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgewogIC8vIFY4IH4gQW5kcm9pZCA0LjMtCiAgJHRvRml4ZWQuY2FsbCh7fSk7Cn0pKSwgJ051bWJlcicsIHsKICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7CiAgICB2YXIgeCA9IGFO
dW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7CiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7CiAgICB2YXIgcyA9ICcnOwogICAgdmFyIG0gPSBaRVJPOwogICAgdmFyIGUsIHosIGosIGs7CiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJzsKICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTsKICAg
IGlmICh4IDwgMCkgewogICAgICBzID0gJy0nOwogICAgICB4ID0gLXg7CiAgICB9CiAgICBpZiAoeCA+IDFlLTIxKSB7CiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7CiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTsKICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwOwogICAgICBlID0gNTIgLSBlOwogICAgICBpZiAoZSA+IDApIHsKICAgICAgICBtdWx0aXBseSgwLCB6KTsKICAgICAgICBqID0gZjsKICAgICAgICB3aGlsZSAoaiA+PSA3KSB7CiAgICAg
ICAgICBtdWx0aXBseSgxZTcsIDApOwogICAgICAgICAgaiAtPSA3OwogICAgICAgIH0KICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTsKICAgICAgICBqID0gZSAtIDE7CiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHsKICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTsKICAgICAgICAgIGogLT0gMjM7CiAgICAgICAgfQogICAgICAgIGRpdmlkZSgxIDw8IGopOwogICAgICAgIG11bHRpcGx5KDEsIDEpOwogICAgICAgIGRpdmlkZSgyKTsKICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTsKICAgICAgfSBlbHNlIHsKICAg
ICAgICBtdWx0aXBseSgwLCB6KTsKICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTsKICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpOwogICAgICB9CiAgICB9CiAgICBpZiAoZiA+IDApIHsKICAgICAgayA9IG0ubGVuZ3RoOwogICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpOwogICAgfSBlbHNlIHsKICAgICAgbSA9IHMgKyBtOwogICAgfSByZXR1cm4g
bTsKICB9Cn0pOwoKfSx7IjExMCI6MTEwLCIxMTYiOjExNiwiMzMiOjMzLCIzNSI6MzUsIjQiOjR9XSwxODk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkZmFpbHMgPSBfZGVyZXFfKDM1KTsKdmFyIGFOdW1iZXJWYWx1ZSA9IF9kZXJlcV8oNCk7CnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkgewogIC8vIElFNy0KICBy
ZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnOwp9KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHsKICAvLyBWOCB+IEFuZHJvaWQgNC4zLQogICR0b1ByZWNpc2lvbi5jYWxsKHt9KTsKfSkpLCAnTnVtYmVyJywgewogIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHsKICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpOwogICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZp
bmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pOwogIH0KfSk7Cgp9LHsiMzMiOjMzLCIzNSI6MzUsIjQiOjR9XSwxOTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogX2RlcmVxXyg3MCkgfSk7Cgp9LHsiMzMiOjMzLCI3MCI6NzB9
XSwxOTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwovLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogX2RlcmVxXyg3MSkgfSk7Cgp9LHsiMzMiOjMzLCI3MSI6NzF9XSwxOTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwovLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZp
bmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9kZXJlcV8oMjkpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiBfZGVyZXFfKDczKSB9KTsKCn0seyIyOSI6MjksIjMzIjozMywiNzMiOjczfV0sMTkzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykKJGV4cG9ydCgkZXhwb3J0LlMgKyAk
ZXhwb3J0LkYgKiAhX2RlcmVxXygyOSksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiBfZGVyZXFfKDcyKS5mIH0pOwoKfSx7IjI5IjoyOSwiMzMiOjMzLCI3MiI6NzJ9XSwxOTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pCnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwp2YXIgbWV0YSA9IF9kZXJlcV8oNjYpLm9uRnJlZXplOwoKX2RlcmVxXyg4MykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShp
dCkgewogICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDsKICB9Owp9KTsKCn0seyI1MSI6NTEsIjY2Ijo2NiwiODMiOjgzfV0sMTk1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKQp2YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpOwp2YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9kZXJlcV8oNzUpLmY7CgpfZGVyZXFfKDgzKSgnZ2V0T3duUHJvcGVydHlE
ZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkgewogIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkgewogICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTsKICB9Owp9KTsKCn0seyIxMTciOjExNywiNzUiOjc1LCI4MyI6ODN9XSwxOTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQpfZGVyZXFfKDgzKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0
aW9uICgpIHsKICByZXR1cm4gX2RlcmVxXyg3NikuZjsKfSk7Cgp9LHsiNzYiOjc2LCI4MyI6ODN9XSwxOTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTykKdmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpOwp2YXIgJGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7CgpfZGVyZXFfKDgzKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7CiAgICByZXR1cm4gJGdldFBy
b3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7CiAgfTsKfSk7Cgp9LHsiMTE5IjoxMTksIjc5Ijo3OSwiODMiOjgzfV0sMTk4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTykKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7CgpfZGVyZXFfKDgzKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHsKICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7CiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJs
ZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlOwogIH07Cn0pOwoKfSx7IjUxIjo1MSwiODMiOjgzfV0sMTk5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKQp2YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTsKCl9kZXJlcV8oODMpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHsKICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHsKICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQp
IDogZmFsc2UgOiB0cnVlOwogIH07Cn0pOwoKfSx7IjUxIjo1MSwiODMiOjgzfV0sMjAwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKQp2YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTsKCl9kZXJlcV8oODMpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHsKICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHsKICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlOwogIH07
Cn0pOwoKfSx7IjUxIjo1MSwiODMiOjgzfV0sMjAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMikKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiBfZGVyZXFfKDk2KSB9KTsKCn0seyIzMyI6MzMsIjk2Ijo5Nn1dLDIwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKQp2YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7
CnZhciAka2V5cyA9IF9kZXJlcV8oODEpOwoKX2RlcmVxXyg4MykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHsKICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpOwogIH07Cn0pOwoKfSx7IjExOSI6MTE5LCI4MSI6ODEsIjgzIjo4M31dLDIwMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTykKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7CnZhciBtZXRhID0gX2RlcmVxXyg2Nikub25GcmVl
emU7CgpfZGVyZXFfKDgzKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7CiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDsKICB9Owp9KTsKCn0seyI1MSI6NTEsIjY2Ijo2NiwiODMiOjgzfV0sMjA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8p
CnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwp2YXIgbWV0YSA9IF9kZXJlcV8oNjYpLm9uRnJlZXplOwoKX2RlcmVxXyg4MykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHsKICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkgewogICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0OwogIH07Cn0pOwoKfSx7IjUxIjo1MSwiNjYiOjY2LCI4MyI6ODN9XSwyMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9m
KE8sIHByb3RvKQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IF9kZXJlcV8oOTkpLnNldCB9KTsKCn0seyIzMyI6MzMsIjk5Ijo5OX1dLDIwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpCnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7CnZhciB0ZXN0ID0ge307CnRlc3RbX2RlcmVxXygxMjgpKCd0b1N0cmluZ1RhZycpXSA9ICd6
JzsKaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHsKICBfZGVyZXFfKDk0KShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJzsKICB9LCB0cnVlKTsKfQoKfSx7IjEyOCI6MTI4LCIxNyI6MTcsIjk0Ijo5NH1dLDIwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkcGFyc2VGbG9hdCA9IF9kZXJlcV8oODYpOwovLyAxOC4yLjQg
cGFyc2VGbG9hdChzdHJpbmcpCiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pOwoKfSx7IjMzIjozMywiODYiOjg2fV0sMjA4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRwYXJzZUludCA9IF9kZXJlcV8oODcpOwovLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJ
bnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pOwoKfSx7IjMzIjozMywiODciOjg3fV0sMjA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgTElCUkFSWSA9IF9kZXJlcV8oNjApOwp2YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7CnZhciBjdHggPSBfZGVyZXFfKDI1KTsKdmFyIGNsYXNzb2YgPSBfZGVyZXFfKDE3KTsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7CnZhciBhRnVuY3Rpb24gPSBfZGVyZXFf
KDMpOwp2YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7CnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpOwp2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX2RlcmVxXygxMDQpOwp2YXIgdGFzayA9IF9kZXJlcV8oMTEzKS5zZXQ7CnZhciBtaWNyb3Rhc2sgPSBfZGVyZXFfKDY4KSgpOwp2YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSBfZGVyZXFfKDY5KTsKdmFyIHBlcmZvcm0gPSBfZGVyZXFfKDkwKTsKdmFyIHByb21pc2VSZXNvbHZlID0gX2RlcmVxXyg5MSk7CnZhciBQUk9NSVNFID0gJ1Byb21pc2UnOwp2YXIgVHlwZUVy
cm9yID0gZ2xvYmFsLlR5cGVFcnJvcjsKdmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzczsKdmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdOwp2YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7CnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTsKdmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyOwp2YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkg
PSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mOwoKdmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHsKICB0cnkgewogICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0CiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7CiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtfZGVyZXFfKDEyOCkoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykgewogICAgICBleGVjKGVtcHR5LCBlbXB0eSk7CiAgICB9OwogICAgLy8gdW5o
YW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdAogICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7CiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9Cn0oKTsKCi8vIGhlbHBlcnMKdmFyIHNhbWVDb25zdHJ1Y3RvciA9IExJQlJBUlkgPyBmdW5jdGlvbiAoYSwgYikgewogIC8vIHdp
dGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZQogIHJldHVybiBhID09PSBiIHx8IGEgPT09ICRQcm9taXNlICYmIGIgPT09IFdyYXBwZXI7Cn0gOiBmdW5jdGlvbiAoYSwgYikgewogIHJldHVybiBhID09PSBiOwp9Owp2YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkgewogIHZhciB0aGVuOwogIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTsKfTsKdmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkgewog
IGlmIChwcm9taXNlLl9uKSByZXR1cm47CiAgcHJvbWlzZS5fbiA9IHRydWU7CiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYzsKICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkgewogICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjsKICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTsKICAgIHZhciBpID0gMDsKICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHsKICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDsKICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlOwog
ICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0OwogICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluOwogICAgICB2YXIgcmVzdWx0LCB0aGVuOwogICAgICB0cnkgewogICAgICAgIGlmIChoYW5kbGVyKSB7CiAgICAgICAgICBpZiAoIW9rKSB7CiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpOwogICAgICAgICAgICBwcm9taXNlLl9oID0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTsK
ICAgICAgICAgIGVsc2UgewogICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTsKICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7CiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5leGl0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7CiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHsKICAgICAg
ICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICByZWplY3QoZSk7CiAgICAgIH0KICAgIH07CiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaAogICAgcHJvbWlzZS5fYyA9IFtdOwogICAgcHJvbWlzZS5fbiA9IGZhbHNlOwogICAgaWYgKGlz
UmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTsKICB9KTsKfTsKdmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHsKICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7CiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92OwogICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpOwogICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTsKICAgIGlmICh1bmhhbmRsZWQpIHsKICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYg
KGlzTm9kZSkgewogICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7CiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7CiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTsKICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJl
amVjdGlvbicsIHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZAogICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7CiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7CiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjsKICB9KTsKfTsKdmFyIGlzVW5oYW5kbGVk
ID0gZnVuY3Rpb24gKHByb21pc2UpIHsKICBpZiAocHJvbWlzZS5faCA9PSAxKSByZXR1cm4gZmFsc2U7CiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jOwogIHZhciBpID0gMDsKICB2YXIgcmVhY3Rpb247CiAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHsKICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTsKICAgIGlmIChyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSkgcmV0dXJuIGZhbHNlOwogIH0gcmV0dXJuIHRydWU7Cn07CnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9
IGZ1bmN0aW9uIChwcm9taXNlKSB7CiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkgewogICAgdmFyIGhhbmRsZXI7CiAgICBpZiAoaXNOb2RlKSB7CiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpOwogICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkgewogICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pOwogICAgfQogIH0pOwp9Owp2YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkgewog
IHZhciBwcm9taXNlID0gdGhpczsKICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuOwogIHByb21pc2UuX2QgPSB0cnVlOwogIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcAogIHByb21pc2UuX3YgPSB2YWx1ZTsKICBwcm9taXNlLl9zID0gMjsKICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7CiAgbm90aWZ5KHByb21pc2UsIHRydWUpOwp9Owp2YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHsKICB2YXIgcHJvbWlzZSA9IHRoaXM7CiAgdmFyIHRoZW47
CiAgaWYgKHByb21pc2UuX2QpIHJldHVybjsKICBwcm9taXNlLl9kID0gdHJ1ZTsKICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXAKICB0cnkgewogICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmIik7CiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7CiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8g
d3JhcAogICAgICAgIHRyeSB7CiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBwcm9taXNlLl92ID0gdmFsdWU7CiAgICAgIHByb21pc2UuX3MgPSAxOwogICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpOwogICAgfQogIH0gY2F0Y2ggKGUpIHsKICAgICRyZWpl
Y3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXAKICB9Cn07CgovLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbAppZiAoIVVTRV9OQVRJVkUpIHsKICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKQogICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikgewogICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7CiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpOwogICAgSW50ZXJuYWwuY2FsbCh0aGlzKTsKICAgIHRyeSB7CiAgICAgIGV4ZWN1dG9yKGN0eCgk
cmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7CiAgICB9CiAgfTsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHsKICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zCiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhh
bmRsZWQgcmVhY3Rpb25zCiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlCiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmUKICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWUKICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWQKICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5CiAgfTsKICBJbnRlcm5hbC5wcm90b3R5
cGUgPSBfZGVyZXFfKDkzKSgkUHJvbWlzZS5wcm90b3R5cGUsIHsKICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpCiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7CiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpOwogICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQg
OiB0cnVlOwogICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkOwogICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDsKICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTsKICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7CiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpOwogICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTsKICAgIH0sCiAgICAvLyAyNS40
LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKQogICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHsKICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpOwogICAgfQogIH0pOwogIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTsKICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7CiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpOwogICAgdGhpcy5yZWplY3Qg
PSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7CiAgfTsKICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykgewogICAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQykKICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQykKICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7CiAgfTsKfQoKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJv
bWlzZSB9KTsKX2RlcmVxXygxMDEpKCRQcm9taXNlLCBQUk9NSVNFKTsKX2RlcmVxXygxMDApKFBST01JU0UpOwpXcmFwcGVyID0gX2RlcmVxXygyMylbUFJPTUlTRV07CgovLyBzdGF0aWNzCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHsKICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKQogIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHsKICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7CiAgICB2YXIgJCRyZWplY3QgPSBjYXBh
YmlsaXR5LnJlamVjdDsKICAgICQkcmVqZWN0KHIpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9Cn0pOwokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwgewogIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KQogIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkgewogICAgLy8gaW5zdGFuY2VvZiBpbnN0ZWFkIG9mIGludGVybmFsIHNsb3QgY2hlY2sgYmVjYXVzZSB3ZSBzaG91bGQgZml4IGl0IHdpdGhvdXQgcmVwbGFjZW1lbnQg
bmF0aXZlIFByb21pc2UgY29yZQogICAgaWYgKHggaW5zdGFuY2VvZiAkUHJvbWlzZSAmJiBzYW1lQ29uc3RydWN0b3IoeC5jb25zdHJ1Y3RvciwgdGhpcykpIHJldHVybiB4OwogICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKHRoaXMsIHgpOwogIH0KfSk7CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIF9kZXJlcV8oNTYpKGZ1bmN0aW9uIChpdGVyKSB7CiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTsKfSkpLCBQUk9NSVNFLCB7CiAgLy8gMjUuNC40LjEgUHJvbWlzZS5h
bGwoaXRlcmFibGUpCiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHsKICAgIHZhciBDID0gdGhpczsKICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7CiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTsKICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDsKICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHZhbHVlcyA9IFtdOwogICAgICB2YXIgaW5kZXggPSAwOwogICAgICB2YXIgcmVtYWluaW5nID0gMTsKICAgICAgZm9y
T2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkgewogICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrOwogICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7CiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTsKICAgICAgICByZW1haW5pbmcrKzsKICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47CiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTsKICAgICAgICAgIHZhbHVlc1skaW5k
ZXhdID0gdmFsdWU7CiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7CiAgICAgICAgfSwgcmVqZWN0KTsKICAgICAgfSk7CiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsKICAgIH0pOwogICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9LAogIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSkKICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7CiAgICB2YXIgQyA9IHRoaXM7CiAgICB2YXIg
Y2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpOwogICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0OwogICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkgewogICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7CiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpOwogICAgICB9KTsKICAgIH0pOwogICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpOwogICAgcmV0dXJuIGNhcGFiaWxpdHku
cHJvbWlzZTsKICB9Cn0pOwoKfSx7IjEwMCI6MTAwLCIxMDEiOjEwMSwiMTA0IjoxMDQsIjExMyI6MTEzLCIxMjgiOjEyOCwiMTciOjE3LCIyMyI6MjMsIjI1IjoyNSwiMyI6MywiMzMiOjMzLCIzOSI6MzksIjQwIjo0MCwiNTEiOjUxLCI1NiI6NTYsIjYiOjYsIjYwIjo2MCwiNjgiOjY4LCI2OSI6NjksIjkwIjo5MCwiOTEiOjkxLCI5MyI6OTN9XSwyMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkKdmFy
ICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciByQXBwbHkgPSAoX2RlcmVxXyg0MCkuUmVmbGVjdCB8fCB7fSkuYXBwbHk7CnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTsKLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9kZXJlcV8oMzUpKGZ1bmN0aW9uICgpIHsKICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTsK
fSksICdSZWZsZWN0JywgewogIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkgewogICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTsKICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7CiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpOwogIH0KfSk7Cgp9LHsiMyI6MywiMzMiOjMzLCIzNSI6MzUsIjQwIjo0MCwiNyI6N31dLDIxMTpbZnVuY3Rpb24oX2RlcmVx
Xyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGNyZWF0ZSA9IF9kZXJlcV8oNzEpOwp2YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7CnZhciBmYWlscyA9IF9kZXJlcV8oMzUpOwp2YXIgYmluZCA9IF9kZXJlcV8oMTYpOwp2YXIgckNvbnN0cnVjdCA9IChfZGVyZXFfKDQwKS5S
ZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7CgovLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWwKLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdAp2YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfQogIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBl
bXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTsKfSk7CnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pOwp9KTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7CiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7CiAgICBhRnVuY3Rpb24oVGFyZ2V0KTsKICAgIGFuT2JqZWN0KGFy
Z3MpOwogICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7CiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7CiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkgewogICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50cwogICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7CiAgICAgICAgY2FzZSAw
OiByZXR1cm4gbmV3IFRhcmdldCgpOwogICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7CiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTsKICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pOwogICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7CiAgICAgIH0KICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2Yg
YXJndW1lbnRzIGNhc2UKICAgICAgdmFyICRhcmdzID0gW251bGxdOwogICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTsKICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTsKICAgIH0KICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9ycwogICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTsKICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5
cGUpOwogICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7CiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlOwogIH0KfSk7Cgp9LHsiMTYiOjE2LCIzIjozLCIzMyI6MzMsIjM1IjozNSwiNDAiOjQwLCI1MSI6NTEsIjciOjcsIjcxIjo3MX1dLDIxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpCnZhciBk
UCA9IF9kZXJlcV8oNzIpOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpOwp2YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7CgovLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgogIFJlZmxlY3QuZGVmaW5l
UHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTsKfSksICdSZWZsZWN0JywgewogIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7CiAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7CiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTsKICAgIHRyeSB7CiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7
CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBjYXRjaCAoZSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQp9KTsKCn0seyIxMjAiOjEyMCwiMzMiOjMzLCIzNSI6MzUsIjciOjcsIjcyIjo3Mn1dLDIxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBnT1BEID0gX2RlcmVxXyg3NSkuZjsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKCiRleHBvcnQo
JGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkgewogICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTsKICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07CiAgfQp9KTsKCn0seyIzMyI6MzMsIjciOjcsIjc1Ijo3NX1dLDIxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3Ry
aWN0JzsKLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkgewogIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldAogIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXgKICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzCiAgdmFyIGtleTsKICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5
cy5wdXNoKGtleSk7Cn07Cl9kZXJlcV8oNTQpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHsKICB2YXIgdGhhdCA9IHRoaXM7CiAgdmFyIGtleXMgPSB0aGF0Ll9rOwogIHZhciBrZXk7CiAgZG8gewogICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTsKICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTsKICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9Owp9KTsKCiRleHBvcnQoJGV4
cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHsKICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7CiAgfQp9KTsKCn0seyIzMyI6MzMsIjU0Ijo1NCwiNyI6N31dLDIxNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KQp2YXIgZ09QRCA9IF9kZXJlcV8oNzUpOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgYW5PYmplY3Qg
PSBfZGVyZXFfKDcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHsKICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpOwogIH0KfSk7Cgp9LHsiMzMiOjMzLCI3Ijo3LCI3NSI6NzV9XSwyMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpCnZh
ciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBnZXRQcm90byA9IF9kZXJlcV8oNzkpOwp2YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHsKICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTsKICB9Cn0pOwoKfSx7IjMzIjozMywiNyI6NywiNzkiOjc5fV0sMjE3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS42IFJlZmxlY3QuZ2V0
KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKQp2YXIgZ09QRCA9IF9kZXJlcV8oNzUpOwp2YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTsKdmFyIGhhcyA9IF9kZXJlcV8oNDEpOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKCmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHsKICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6
IGFyZ3VtZW50c1syXTsKICB2YXIgZGVzYywgcHJvdG87CiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTsKICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKQogICAgPyBkZXNjLnZhbHVlCiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWQKICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKQogICAgICA6IHVuZGVmaW5lZDsKICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVP
Zih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTsKfQoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTsKCn0seyIzMyI6MzMsIjQxIjo0MSwiNTEiOjUxLCI3Ijo3LCI3NSI6NzUsIjc5Ijo3OX1dLDIxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGhh
czogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHsKICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7CiAgfQp9KTsKCn0seyIzMyI6MzN9XSwyMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywg
ewogIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkgewogICAgYW5PYmplY3QodGFyZ2V0KTsKICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTsKICB9Cn0pOwoKfSx7IjMzIjozMywiNyI6N31dLDIyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldCkKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czog
X2RlcmVxXyg4NSkgfSk7Cgp9LHsiMzMiOjMzLCI4NSI6ODV9XSwyMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpOwp2YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0
ZW5zaW9ucyh0YXJnZXQpIHsKICAgIGFuT2JqZWN0KHRhcmdldCk7CiAgICB0cnkgewogICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwoKfSx7IjMzIjozMywiNyI6N31dLDIyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKQp2YXIgJGV4cG9ydCA9
IF9kZXJlcV8oMzMpOwp2YXIgc2V0UHJvdG8gPSBfZGVyZXFfKDk5KTsKCmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7CiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTsKICAgIHRyeSB7CiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwoK
fSx7IjMzIjozMywiOTkiOjk5fV0sMjIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSkKdmFyIGRQID0gX2RlcmVxXyg3Mik7CnZhciBnT1BEID0gX2RlcmVxXyg3NSk7CnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpOwp2YXIgaGFzID0gX2RlcmVxXyg0MSk7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBjcmVhdGVEZXNjID0gX2RlcmVxXyg5Mik7CnZhciBhbk9iamVjdCA9IF9kZXJl
cV8oNyk7CnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpOwoKZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykgewogIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdOwogIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTsKICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bzsKICBpZiAoIW93bkRlc2MpIHsKICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9m
KHRhcmdldCkpKSB7CiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7CiAgICB9CiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTsKICB9CiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkgewogICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTsKICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7CiAgICBleGlzdGluZ0Rlc2NyaXB0
b3IudmFsdWUgPSBWOwogICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7Cn0KCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7Cgp9LHsiMzMiOjMzLCI0MSI6NDEsIjUxIjo1MSwiNyI6NywiNzIiOjcyLCI3NSI6NzUsIjc5Ijo3OSwiOTIiOjkyfV0sMjI0OltmdW5jdGlv
bihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApOwp2YXIgaW5oZXJpdElmUmVxdWlyZWQgPSBfZGVyZXFfKDQ1KTsKdmFyIGRQID0gX2RlcmVxXyg3MikuZjsKdmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mOwp2YXIgaXNSZWdFeHAgPSBfZGVyZXFfKDUyKTsKdmFyICRmbGFncyA9IF9kZXJlcV8oMzcpOwp2YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7CnZhciBCYXNlID0gJFJlZ0V4cDsKdmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7CnZhciByZTEgPSAvYS9nOwp2YXIgcmUyID0g
L2EvZzsKLy8gIm5ldyIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZQp2YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7CgppZiAoX2RlcmVxXygyOSkgJiYgKCFDT1JSRUNUX05FVyB8fCBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7CiAgcmUyW19kZXJlcV8oMTI4KSgnbWF0Y2gnKV0gPSBmYWxzZTsKICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaAogIHJldHVybiAkUmVnRXhw
KHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knOwp9KSkpIHsKICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHsKICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7CiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApOwogICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDsKICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcAogICAgICA6IGluaGVyaXRJZlJlcXVpcmVk
KENPUlJFQ1RfTkVXCiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpCiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZikKICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTsKICB9OwogIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHsKICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwgewogICAgICBjb25maWd1cmFibGU6IHRydWUs
CiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LAogICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfQogICAgfSk7CiAgfTsKICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7CiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwOwogICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87CiAgX2RlcmVxXyg5NCkoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7Cn0KCl9kZXJlcV8oMTAwKSgnUmVn
RXhwJyk7Cgp9LHsiMTAwIjoxMDAsIjEyOCI6MTI4LCIyOSI6MjksIjM1IjozNSwiMzciOjM3LCI0MCI6NDAsIjQ1Ijo0NSwiNTIiOjUyLCI3MiI6NzIsIjc3Ijo3NywiOTQiOjk0fV0sMjI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKQppZiAoX2RlcmVxXygyOSkgJiYgLy4vZy5mbGFncyAhPSAnZycpIF9kZXJlcV8oNzIpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywgewogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBnZXQ6IF9kZXJl
cV8oMzcpCn0pOwoKfSx7IjI5IjoyOSwiMzciOjM3LCI3MiI6NzJ9XSwyMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBAQG1hdGNoIGxvZ2ljCl9kZXJlcV8oMzYpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7CiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKQogIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7CiAgICB2YXIgZm4gPSByZWdl
eHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTsKICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpOwogIH0sICRtYXRjaF07Cn0pOwoKfSx7IjM2IjozNn1dLDIyNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIEBAcmVwbGFjZSBsb2dpYwpfZGVyZXFfKDM2KSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkgewogIC8vIDIxLjEu
My4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkKICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpOwogICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07CiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZAogICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VW
YWx1ZSkKICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7CiAgfSwgJHJlcGxhY2VdOwp9KTsKCn0seyIzNiI6MzZ9XSwyMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBAQHNlYXJjaCBsb2dpYwpfZGVyZXFfKDM2KSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCkgewogIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApCiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhw
KSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7CiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07CiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7CiAgfSwgJHNlYXJjaF07Cn0pOwoKfSx7IjM2IjozNn1dLDIyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIEBAc3BsaXQgbG9naWMKX2RlcmVxXygz
NikoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQpIHsKICAndXNlIHN0cmljdCc7CiAgdmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7CiAgdmFyIF9zcGxpdCA9ICRzcGxpdDsKICB2YXIgJHB1c2ggPSBbXS5wdXNoOwogIHZhciAkU1BMSVQgPSAnc3BsaXQnOwogIHZhciBMRU5HVEggPSAnbGVuZ3RoJzsKICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnOwogIGlmICgKICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8CiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0x
KVtMRU5HVEhdICE9IDQgfHwKICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fAogICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8CiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8CiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF0KICApIHsKICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwCiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRh
dGlvbiwgbmVlZCB0byByZXdvcmsgaXQKICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7CiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7CiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdOwogICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdAogICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpOwogICAg
ICB2YXIgb3V0cHV0ID0gW107CiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICsKICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICsKICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7CiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDsKICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8g
NDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwOwogICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weQogICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpOwogICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTsKICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0CiAgICAgIGlmICghTlBDRykgc2VwYXJh
dG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxccyknLCBmbGFncyk7CiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7CiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlcgogICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTsKICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkgewogICAgICAgICAgb3V0cHV0LnB1c2go
c3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7CiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDRwogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuYwogICAgICAgICAgaWYgKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKSBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8
IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKSBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkOwogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7CiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTsKICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7CiAgICAgICAgICBpZiAob3V0cHV0W0xF
TkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wCiAgICAgIH0KICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7CiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTsKICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmlu
Zy5zbGljZShsYXN0TGFzdEluZGV4KSk7CiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7CiAgICB9OwogIC8vIENoYWtyYSwgVjgKICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkgewogICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHsKICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBz
ZXBhcmF0b3IsIGxpbWl0KTsKICAgIH07CiAgfQogIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpCiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7CiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7CiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTsKICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0
cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7CiAgfSwgJHNwbGl0XTsKfSk7Cgp9LHsiMzYiOjM2LCI1MiI6NTJ9XSwyMzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cl9kZXJlcV8oMjI1KTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyICRmbGFncyA9IF9kZXJlcV8oMzcpOwp2YXIgREVTQ1JJUFRPUlMgPSBfZGVyZXFfKDI5KTsKdmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7CnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTsKCnZhciBkZWZpbmUgPSBmdW5jdGlv
biAoZm4pIHsKICBfZGVyZXFfKDk0KShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTsKfTsKCi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKCkKaWYgKF9kZXJlcV8oMzUpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkgewogIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7CiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8n
LAogICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7CiAgfSk7Ci8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lCn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7CiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpOwogIH0pOwp9Cgp9LHsiMjI1IjoyMjUsIjI5IjoyOSwiMzUiOjM1LCIzNyI6Mzcs
IjciOjcsIjk0Ijo5NH1dLDIzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHN0cm9uZyA9IF9kZXJlcV8oMTkpOwp2YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7CnZhciBTRVQgPSAnU2V0JzsKCi8vIDIzLjIgU2V0IE9iamVjdHMKbW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKDIyKShTRVQsIGZ1bmN0aW9uIChnZXQpIHsKICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZp
bmVkKTsgfTsKfSwgewogIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKQogIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7CiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7CiAgfQp9LCBzdHJvbmcpOwoKfSx7IjEyNSI6MTI1LCIxOSI6MTksIjIyIjoyMn1dLDIzMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hv
cihuYW1lKQpfZGVyZXFfKDEwOCkoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7CiAgfTsKfSk7Cgp9LHsiMTA4IjoxMDh9XSwyMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKQpfZGVyZXFfKDEwOCkoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7CiAgcmV0dXJu
IGZ1bmN0aW9uIGJpZygpIHsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpOwogIH07Cn0pOwoKfSx7IjEwOCI6MTA4fV0sMjM0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKQpfZGVyZXFfKDEwOCkoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHsKICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpOwogIH07
Cn0pOwoKfSx7IjEwOCI6MTA4fV0sMjM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpCl9kZXJlcV8oMTA4KSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7CiAgfTsKfSk7Cgp9LHsiMTA4IjoxMDh9XSwyMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7
CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkYXQgPSBfZGVyZXFfKDEwNikoZmFsc2UpOwokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcykKICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7CiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7CiAgfQp9KTsKCn0seyIxMDYiOjEwNiwiMzMiOjMzfV0sMjM3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjYgU3RyaW5nLnBy
b3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKQondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTsKdmFyIGNvbnRleHQgPSBfZGVyZXFfKDEwNyk7CnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnOwp2YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNCkoRU5EU19XSVRIKSwgJ1N0cmluZycsIHsKICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dp
dGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7CiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpOwogICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpOwogICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7CiAg
ICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7CiAgICByZXR1cm4gJGVuZHNXaXRoCiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpCiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7CiAgfQp9KTsKCn0seyIxMDciOjEwNywiMTE4IjoxMTgsIjMzIjozMywiMzQiOjM0fV0sMjM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKQpfZGVy
ZXFfKDEwOCkoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHsKICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpOwogIH07Cn0pOwoKfSx7IjEwOCI6MTA4fV0sMjM5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKQpfZGVyZXFfKDEwOCkoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7CiAgcmV0dXJuIGZ1bmN0
aW9uIGZvbnRjb2xvcihjb2xvcikgewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7CiAgfTsKfSk7Cgp9LHsiMTA4IjoxMDh9XSwyNDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKQpfZGVyZXFfKDEwOCkoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHsKICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkgewogICAgcmV0dXJuIGNyZWF0ZUhU
TUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpOwogIH07Cn0pOwoKfSx7IjEwOCI6MTA4fV0sMjQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIHRvQWJzb2x1dGVJbmRleCA9IF9kZXJlcV8oMTE0KTsKdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7CnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50OwoKLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbQokZXhwb3J0KCRleHBvcnQuUyAr
ICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHsKICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKQogIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICB2YXIgcmVzID0gW107CiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICB2YXIgaSA9IDA7CiAgICB2YXIgY29kZTsKICAgIHdoaWxlIChh
TGVuID4gaSkgewogICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdOwogICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7CiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwCiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSkKICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApCiAgICAgICk7CiAg
ICB9IHJldHVybiByZXMuam9pbignJyk7CiAgfQp9KTsKCn0seyIxMTQiOjExNCwiMzMiOjMzfV0sMjQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMCkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTsKdmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJzsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygz
NCkoSU5DTFVERVMpLCAnU3RyaW5nJywgewogIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHsKICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpCiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7Cgp9LHsiMTA3IjoxMDcsIjMzIjozMywiMzQiOjM0fV0sMjQzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRz
KXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpCl9kZXJlcV8oMTA4KSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7CiAgfTsKfSk7Cgp9LHsiMTA4IjoxMDh9XSwyNDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkYXQgPSBfZGVyZXFfKDEwNikodHJ1ZSk7CgovLyAyMS4xLjMuMjcgU3Ry
aW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCl9kZXJlcV8oNTUpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkgewogIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXQKICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleAovLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpCn0sIGZ1bmN0aW9uICgpIHsKICB2YXIgTyA9IHRoaXMuX3Q7CiAgdmFyIGluZGV4ID0gdGhpcy5faTsKICB2YXIgcG9pbnQ7CiAgaWYgKGluZGV4ID49IE8u
bGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07CiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpOwogIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoOwogIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTsKfSk7Cgp9LHsiMTA2IjoxMDYsIjU1Ijo1NX1dLDI0NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybCkKX2RlcmVxXygxMDgpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhU
TUwpIHsKICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpOwogIH07Cn0pOwoKfSx7IjEwOCI6MTA4fV0sMjQ2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTsKdmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwg
Li4uc3Vic3RpdHV0aW9ucykKICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkgewogICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpOwogICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpOwogICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgdmFyIHJlcyA9IFtdOwogICAgdmFyIGkgPSAwOwogICAgd2hpbGUgKGxlbiA+IGkpIHsKICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7CiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpOwog
ICAgfSByZXR1cm4gcmVzLmpvaW4oJycpOwogIH0KfSk7Cgp9LHsiMTE3IjoxMTcsIjExOCI6MTE4LCIzMyI6MzN9XSwyNDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KQogIHJlcGVhdDogX2RlcmVxXygxMTApCn0pOwoKfSx7IjExMCI6MTEwLCIzMyI6MzN9XSwyNDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMp
ewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKQpfZGVyZXFfKDEwOCkoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHsKICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpOwogIH07Cn0pOwoKfSx7IjEwOCI6MTA4fV0sMjQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRp
b24gXSkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7CnZhciBjb250ZXh0ID0gX2RlcmVxXygxMDcpOwp2YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7CnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNCkoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywgewogIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRp
b24gPSAwICovKSB7CiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7CiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTsKICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTsKICAgIHJldHVybiAkc3RhcnRzV2l0aAogICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleCkKICAgICAgOiB0aGF0LnNsaWNlKGluZGV4
LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7CiAgfQp9KTsKCn0seyIxMDciOjEwNywiMTE4IjoxMTgsIjMzIjozMywiMzQiOjM0fV0sMjUwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpCl9kZXJlcV8oMTA4KSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHsKICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkgewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7
CiAgfTsKfSk7Cgp9LHsiMTA4IjoxMDh9XSwyNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKCkKX2RlcmVxXygxMDgpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkgewogIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTsKICB9Owp9KTsKCn0seyIxMDgiOjEwOH1dLDI1MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3Ry
aWN0JzsKLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKQpfZGVyZXFfKDEwOCkoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpOwogIH07Cn0pOwoKfSx7IjEwOCI6MTA4fV0sMjUzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKCkKX2RlcmVxXygxMTEpKCd0cmltJywgZnVuY3Rpb24g
KCR0cmltKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7CiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7CiAgfTsKfSk7Cgp9LHsiMTExIjoxMTF9XSwyNTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW0KdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApOwp2YXIgaGFzID0gX2RlcmVxXyg0MSk7CnZhciBERVNDUklQVE9SUyA9IF9kZXJlcV8oMjkpOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgcmVkZWZpbmUgPSBfZGVyZXFf
KDk0KTsKdmFyIE1FVEEgPSBfZGVyZXFfKDY2KS5LRVk7CnZhciAkZmFpbHMgPSBfZGVyZXFfKDM1KTsKdmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX2RlcmVxXygxMDEpOwp2YXIgdWlkID0gX2RlcmVxXygxMjQpOwp2YXIgd2tzID0gX2RlcmVxXygxMjgpOwp2YXIgd2tzRXh0ID0gX2RlcmVxXygxMjcpOwp2YXIgd2tzRGVmaW5lID0gX2RlcmVxXygxMjYpOwp2YXIga2V5T2YgPSBfZGVyZXFfKDU5KTsKdmFyIGVudW1LZXlzID0gX2RlcmVxXygzMik7CnZhciBpc0FycmF5ID0gX2RlcmVx
Xyg0OSk7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7CnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTsKdmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTsKdmFyIF9jcmVhdGUgPSBfZGVyZXFfKDcxKTsKdmFyIGdPUE5FeHQgPSBfZGVyZXFfKDc2KTsKdmFyICRHT1BEID0gX2RlcmVxXyg3NSk7CnZhciAkRFAgPSBfZGVyZXFfKDcyKTsKdmFyICRrZXlzID0gX2RlcmVxXyg4MSk7CnZhciBnT1BEID0gJEdPUEQuZjsKdmFyIGRQID0gJERQLmY7CnZhciBnT1BOID0g
Z09QTkV4dC5mOwp2YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7CnZhciAkSlNPTiA9IGdsb2JhbC5KU09OOwp2YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTsKdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnOwp2YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7CnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7CnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsKdmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTsKdmFyIEFsbFN5
bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTsKdmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpOwp2YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTsKdmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nOwp2YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0OwovLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzMKdmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RP
VFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7CgovLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODcKdmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkgewogIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHsKICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH0KICB9KSkuYSAhPSA3Owp9KSA/IGZ1bmN0aW9uIChp
dCwga2V5LCBEKSB7CiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7CiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07CiAgZFAoaXQsIGtleSwgRCk7CiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7Cn0gOiBkUDsKCnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykgewogIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7CiAgc3ltLl9rID0gdGFnOwog
IHJldHVybiBzeW07Cn07Cgp2YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJzsKfSA6IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7Cn07Cgp2YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkgewogIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMs
IGtleSwgRCk7CiAgYW5PYmplY3QoaXQpOwogIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7CiAgYW5PYmplY3QoRCk7CiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7CiAgICBpZiAoIUQuZW51bWVyYWJsZSkgewogICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpOwogICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZh
bHNlOwogICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pOwogICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTsKICB9IHJldHVybiBkUChpdCwga2V5LCBEKTsKfTsKdmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkgewogIGFuT2JqZWN0KGl0KTsKICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpOwogIHZhciBpID0gMDsKICB2YXIgbCA9IGtleXMubGVuZ3RoOwogIHZhciBrZXk7CiAg
d2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTsKICByZXR1cm4gaXQ7Cn07CnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7CiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApOwp9Owp2YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7CiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1p
dGl2ZShrZXksIHRydWUpKTsKICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTsKICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHsKICBp
dCA9IHRvSU9iamVjdChpdCk7CiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTsKICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47CiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpOwogIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7CiAgcmV0dXJuIEQ7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0
aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHsKICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpOwogIHZhciByZXN1bHQgPSBbXTsKICB2YXIgaSA9IDA7CiAgdmFyIGtleTsKICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgewogICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTsKICB9IHJldHVybiByZXN1bHQ7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJv
cGVydHlTeW1ib2xzKGl0KSB7CiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvOwogIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTsKICB2YXIgcmVzdWx0ID0gW107CiAgdmFyIGkgPSAwOwogIHZhciBrZXk7CiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHsKICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7CiAgfSBy
ZXR1cm4gcmVzdWx0Owp9OwoKLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pCmlmICghVVNFX05BVElWRSkgewogICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7CiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpOwogICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7CiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICBpZiAodGhp
cyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTsKICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7CiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7CiAgICB9OwogICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pOwogICAgcmV0dXJu
IHdyYXAodGFnKTsKICB9OwogIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICByZXR1cm4gdGhpcy5fazsKICB9KTsKCiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7CiAgX2RlcmVxXyg3NykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzOwogIF9kZXJlcV8oODIpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7CiAgX2RlcmVxXyg3OCkuZiA9ICRnZXRPd25Qcm9wZXJ0
eVN5bWJvbHM7CgogIGlmIChERVNDUklQVE9SUyAmJiAhX2RlcmVxXyg2MCkpIHsKICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpOwogIH0KCiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkgewogICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTsKICB9Owp9CgokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTsKCmZvciAodmFyIGVzNlN5bWJvbHMg
PSAoCiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTQKICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnCikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisr
XSk7Cgpmb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHsKICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSkKICAnZm9yJzogZnVuY3Rpb24gKGtleSkgewogICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKQogICAgICA/IFN5bWJvbFJlZ2lzdHJ5
W2tleV0KICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpOwogIH0sCiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pCiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KSB7CiAgICBpZiAoaXNTeW1ib2woa2V5KSkgcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpOwogICAgdGhyb3cgVHlwZUVycm9yKGtleSArICcgaXMgbm90IGEgc3ltYm9sIScpOwogIH0sCiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sCiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAo
KSB7IHNldHRlciA9IGZhbHNlOyB9Cn0pOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHsKICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCiAgY3JlYXRlOiAkY3JlYXRlLAogIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKQogIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksCiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykKICBkZWZpbmVQ
cm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcywKICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApCiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLAogIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pCiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsCiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKQogIGdldE93blByb3BlcnR5U3ltYm9sczogJGdl
dE93blByb3BlcnR5U3ltYm9scwp9KTsKCi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKQokSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkgewogIHZhciBTID0gJFN5bWJvbCgpOwogIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9CiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsCiAgLy8gVjggdGhyb3dzIG9uIGJv
eGVkIHN5bWJvbHMKICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7Cn0pKSwgJ0pTT04nLCB7CiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHsKICAgIGlmIChpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkCiAgICB2YXIgYXJncyA9IFtpdF07CiAgICB2YXIgaSA9IDE7CiAgICB2YXIgcmVw
bGFjZXIsICRyZXBsYWNlcjsKICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTsKICAgIHJlcGxhY2VyID0gYXJnc1sxXTsKICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgJHJlcGxhY2VyID0gcmVwbGFjZXI7CiAgICBpZiAoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICBpZiAoJHJlcGxhY2VyKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUp
OwogICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlOwogICAgfTsKICAgIGFyZ3NbMV0gPSByZXBsYWNlcjsKICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTsKICB9Cn0pOwoKLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KQokU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCBfZGVyZXFfKDQyKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpOwovLyAxOS40LjMuNSBT
eW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddCnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTsKLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXQpzZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpOwovLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXQpzZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTsKCn0seyIxMDEiOjEwMSwiMTAzIjoxMDMsIjExNyI6MTE3LCIxMjAiOjEyMCwiMTI0IjoxMjQsIjEyNiI6MTI2LCIxMjciOjEyNywiMTI4IjoxMjgsIjI5IjoyOSwi
MzIiOjMyLCIzMyI6MzMsIjM1IjozNSwiNDAiOjQwLCI0MSI6NDEsIjQyIjo0MiwiNDkiOjQ5LCI1OSI6NTksIjYwIjo2MCwiNjYiOjY2LCI3Ijo3LCI3MSI6NzEsIjcyIjo3MiwiNzUiOjc1LCI3NiI6NzYsIjc3Ijo3NywiNzgiOjc4LCI4MSI6ODEsIjgyIjo4MiwiOTIiOjkyLCI5NCI6OTR9XSwyNTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkdHlwZWQgPSBfZGVyZXFfKDEyMyk7CnZhciBidWZmZXIgPSBfZGVyZXFfKDEyMik7
CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciB0b0Fic29sdXRlSW5kZXggPSBfZGVyZXFfKDExNCk7CnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTsKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7CnZhciBBcnJheUJ1ZmZlciA9IF9kZXJlcV8oNDApLkFycmF5QnVmZmVyOwp2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX2RlcmVxXygxMDQpOwp2YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyOwp2YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3Owp2YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYg
JiYgQXJyYXlCdWZmZXIuaXNWaWV3Owp2YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTsKdmFyIFZJRVcgPSAkdHlwZWQuVklFVzsKdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7CgokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7CiAg
Ly8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZykKICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkgewogICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7CiAgfQp9KTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgewogIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7Cn0pLCBBUlJBWV9CVUZGRVIsIHsKICAvLyAy
NC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZCkKICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkgewogICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4CiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDsKICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTsKICAgIHZhciBmaW5hbCA9IHRvQWJzb2x1
dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTsKICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW5hbCAtIGZpcnN0KSk7CiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpOwogICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpOwogICAgdmFyIGluZGV4ID0gMDsKICAgIHdoaWxlIChmaXJzdCA8IGZpbmFsKSB7CiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4
KGZpcnN0KyspKTsKICAgIH0gcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwoKX2RlcmVxXygxMDApKEFSUkFZX0JVRkZFUik7Cgp9LHsiMTAwIjoxMDAsIjEwNCI6MTA0LCIxMTQiOjExNCwiMTE4IjoxMTgsIjEyMiI6MTIyLCIxMjMiOjEyMywiMzMiOjMzLCIzNSI6MzUsIjQwIjo0MCwiNTEiOjUxLCI3Ijo3fV0sMjU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMjMpLkFC
ViwgewogIERhdGFWaWV3OiBfZGVyZXFfKDEyMikuRGF0YVZpZXcKfSk7Cgp9LHsiMTIyIjoxMjIsIjEyMyI6MTIzLCIzMyI6MzN9XSwyNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewpfZGVyZXFfKDEyMSkoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkgewogIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwoKfSx7IjEyMSI6MTIxfV0sMjU4Oltm
dW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKX2RlcmVxXygxMjEpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHsKICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKCn0seyIxMjEiOjEyMX1dLDI1OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cl9kZXJlcV8oMTIxKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkgewogIHJldHVy
biBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKCn0seyIxMjEiOjEyMX1dLDI2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cl9kZXJlcV8oMTIxKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkgewogIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNl
dCwgbGVuZ3RoKTsKICB9Owp9KTsKCn0seyIxMjEiOjEyMX1dLDI2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cl9kZXJlcV8oMTIxKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cgp9LHsiMTIxIjoxMjF9XSwyNjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewpfZGVyZXFfKDEyMSko
J1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKCn0seyIxMjEiOjEyMX1dLDI2MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cl9kZXJlcV8oMTIxKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHsKICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3Ro
KSB7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwoKfSx7IjEyMSI6MTIxfV0sMjY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKX2RlcmVxXygxMjEpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwoKfSx7IjEyMSI6MTIxfV0sMjY1OltmdW5j
dGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKX2RlcmVxXygxMjEpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9LCB0cnVlKTsKCn0seyIxMjEiOjEyMX1dLDI2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGVhY2ggPSBfZGVyZXFfKDEyKSgwKTsKdmFy
IHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7CnZhciBtZXRhID0gX2RlcmVxXyg2Nik7CnZhciBhc3NpZ24gPSBfZGVyZXFfKDcwKTsKdmFyIHdlYWsgPSBfZGVyZXFfKDIxKTsKdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7CnZhciBmYWlscyA9IF9kZXJlcV8oMzUpOwp2YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7CnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJzsKdmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7CnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlOwp2YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9
IHdlYWsudWZzdG9yZTsKdmFyIHRtcCA9IHt9Owp2YXIgSW50ZXJuYWxNYXA7Cgp2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHsKICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHsKICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOwogIH07Cn07Cgp2YXIgbWV0aG9kcyA9IHsKICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KQogIGdldDogZnVuY3Rpb24gZ2V0KGtleSkgewogICAgaWYgKGlzT2JqZWN0KGtleSkpIHsKICAg
ICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7CiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpOwogICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7CiAgICB9CiAgfSwKICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSkKICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7CiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVAp
LCBrZXksIHZhbHVlKTsKICB9Cn07CgovLyAyMy4zIFdlYWtNYXAgT2JqZWN0cwp2YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjIpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTsKCi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXgKaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDc7IH0pKSB7CiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdl
dENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTsKICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTsKICBtZXRhLk5FRUQgPSB0cnVlOwogIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkgewogICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlOwogICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07CiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikgewogICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5h
bCB3ZWFrbWFwIHNoaW0KICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHsKICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTsKICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpOwogICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0OwogICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXAKICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7CiAgICB9KTsKICB9KTsKfQoK
fSx7IjEyIjoxMiwiMTI1IjoxMjUsIjIxIjoyMSwiMjIiOjIyLCIzNSI6MzUsIjUxIjo1MSwiNjYiOjY2LCI3MCI6NzAsIjk0Ijo5NH1dLDI2NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHdlYWsgPSBfZGVyZXFfKDIxKTsKdmFyIHZhbGlkYXRlID0gX2RlcmVxXygxMjUpOwp2YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7CgovLyAyMy40IFdlYWtTZXQgT2JqZWN0cwpfZGVyZXFfKDIyKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkgewogIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0
KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTsKfSwgewogIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSkKICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkgewogICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpOwogIH0KfSwgd2VhaywgZmFsc2UsIHRydWUpOwoKfSx7IjEyNSI6MTI1LCIyMSI6MjEsIjIyIjoyMn1dLDI2ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUs
ZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXAKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBfZGVyZXFfKDM4KTsKdmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpOwp2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7CnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpOwp2YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gX2RlcmVxXygxNSk7CgokZXhwb3J0KCRleHBvcnQu
UCwgJ0FycmF5JywgewogIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHsKICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7CiAgICB2YXIgc291cmNlTGVuLCBBOwogICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pOwogICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpOwogICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTsKICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pOwogICAgcmV0
dXJuIEE7CiAgfQp9KTsKCl9kZXJlcV8oNSkoJ2ZsYXRNYXAnKTsKCn0seyIxMTgiOjExOCwiMTE5IjoxMTksIjE1IjoxNSwiMyI6MywiMzMiOjMzLCIzOCI6MzgsIjUiOjV9XSwyNjk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBmbGF0dGVuSW50b0FycmF5ID0gX2RlcmVxXygzOCk7CnZhciB0b09iamVj
dCA9IF9kZXJlcV8oMTE5KTsKdmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpOwp2YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpOwp2YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gX2RlcmVxXygxNSk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgewogIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7CiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHNbMF07CiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpOwogICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTsKICAg
IHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApOwogICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7CiAgICByZXR1cm4gQTsKICB9Cn0pOwoKX2RlcmVxXyg1KSgnZmxhdHRlbicpOwoKfSx7IjExNiI6MTE2LCIxMTgiOjExOCwiMTE5IjoxMTksIjE1IjoxNSwiMzMiOjMzLCIzOCI6MzgsIjUiOjV9XSwyNzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0
dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlcwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgJGluY2x1ZGVzID0gX2RlcmVxXygxMSkodHJ1ZSk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgewogIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHsKICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICB9Cn0pOwoKX2RlcmVxXyg1KSgn
aW5jbHVkZXMnKTsKCn0seyIxMSI6MTEsIjMzIjozMywiNSI6NX1dLDI3MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFzawp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgbWljcm90YXNrID0gX2RlcmVxXyg2OCkoKTsKdmFyIHByb2Nlc3MgPSBfZGVyZXFfKDQwKS5wcm9jZXNzOwp2YXIgaXNOb2Rl
ID0gX2RlcmVxXygxOCkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnOwoKJGV4cG9ydCgkZXhwb3J0LkcsIHsKICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7CiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluOwogICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTsKICB9Cn0pOwoKfSx7IjE4IjoxOCwiMzMiOjMzLCI0MCI6NDAsIjY4Ijo2OH1dLDI3MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwt
aXMtZXJyb3IKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGNvZiA9IF9kZXJlcV8oMTgpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHsKICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KSB7CiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJzsKICB9Cn0pOwoKfSx7IjE4IjoxOCwiMzMiOjMzfV0sMjczOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhw
b3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IF9kZXJlcV8oNDApIH0pOwoKfSx7IjMzIjozMywiNDAiOjQwfV0sMjc0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLmZyb20KX2RlcmVxXyg5NykoJ01hcCcpOwoKfSx7Ijk3Ijo5N31dLDI3NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZgpf
ZGVyZXFfKDk4KSgnTWFwJyk7Cgp9LHsiOTgiOjk4fV0sMjc2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTgp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogX2RlcmVxXygyMCkoJ01hcCcpIH0pOwoKfSx7IjIwIjoyMCwiMzMiOjMzfV0sMjc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6
Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zLwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHsKICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTsKICB9Cn0pOwoKfSx7IjMzIjozM31dLDI3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgt
ZXh0ZW5zaW9ucy8KdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgREVHX1BFUl9SQUQ6IE1hdGguUEkgLyAxODAgfSk7Cgp9LHsiMzMiOjMzfV0sMjc5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zLwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewog
IGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykgewogICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRzsKICB9Cn0pOwoKfSx7IjMzIjozM31dLDI4MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy8KdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIHNjYWxlID0gX2RlcmVxXyg2NCk7CnZhciBmcm91bmQgPSBfZGVyZXFfKDYyKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBm
c2NhbGU6IGZ1bmN0aW9uIGZzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHsKICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7CiAgfQp9KTsKCn0seyIzMyI6MzMsIjYyIjo2MiwiNjQiOjY0fV0sMjgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDMKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKCiRleHBvcnQoJGV4cG9y
dC5TLCAnTWF0aCcsIHsKICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHsKICAgIHZhciAkeDAgPSB4MCA+Pj4gMDsKICAgIHZhciAkeDEgPSB4MSA+Pj4gMDsKICAgIHZhciAkeTAgPSB5MCA+Pj4gMDsKICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7CiAgfQp9KTsKCn0seyIzMyI6MzN9XSwyODI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpc3QuZ2l0
aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwMwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7CiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmOwogICAgdmFyICR1ID0gK3U7CiAgICB2YXIgJHYgPSArdjsKICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2OwogICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7CiAgICB2YXIgdTEgPSAkdSA+PiAxNjsKICAgIHZhciB2MSA9ICR2ID4+IDE2OwogICAgdmFyIHQgPSAo
dTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpOwogICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTsKICB9Cn0pOwoKfSx7IjMzIjozM31dLDI4MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaXN1Ymg6IGZ1bmN0
aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7CiAgICB2YXIgJHgwID0geDAgPj4+IDA7CiAgICB2YXIgJHgxID0geDEgPj4+IDA7CiAgICB2YXIgJHkwID0geTAgPj4+IDA7CiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7CiAgfQp9KTsKCn0seyIzMyI6MzN9XSwyODQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVu
c2lvbnMvCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IFJBRF9QRVJfREVHOiAxODAgLyBNYXRoLlBJIH0pOwoKfSx7IjMzIjozM31dLDI4NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy8KdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICByYWRp
YW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHsKICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7CiAgfQp9KTsKCn0seyIzMyI6MzN9XSwyODY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNjYWxlOiBfZGVyZXFfKDY0KSB9KTsKCn0seyIzMyI6MzMsIjY0Ijo2NH1dLDI4NzpbZnVuY3Rpb24o
X2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHA6Ly9qZmJhc3RpZW4uZ2l0aHViLmlvL3BhcGVycy9NYXRoLnNpZ25iaXQuaHRtbAp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDsKfSB9KTsKCn0seyIzMyI6MzN9XSwy
ODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwMwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7CiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmOwogICAgdmFyICR1ID0gK3U7CiAgICB2YXIgJHYgPSArdjsKICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2OwogICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7CiAg
ICB2YXIgdTEgPSAkdSA+Pj4gMTY7CiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7CiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7CiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7CiAgfQp9KTsKCn0seyIzMyI6MzN9XSwyODk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTsK
dmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7CnZhciAkZGVmaW5lUHJvcGVydHkgPSBfZGVyZXFfKDcyKTsKCi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikKX2RlcmVxXygyOSkgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyBfZGVyZXFfKDc0KSwgJ09iamVjdCcsIHsKICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikgewogICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0
dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pOwogIH0KfSk7Cgp9LHsiMTE5IjoxMTksIjI5IjoyOSwiMyI6MywiMzMiOjMzLCI3MiI6NzIsIjc0Ijo3NH1dLDI5MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpOwp2YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTsKdmFyICRkZWZpbmVQcm9wZXJ0eSA9IF9kZXJlcV8oNzIpOwoKLy8gQi4yLjIuMyBPYmplY3Qu
cHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKQpfZGVyZXFfKDI5KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9kZXJlcV8oNzQpLCAnT2JqZWN0JywgewogIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7CiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7CiAgfQp9KTsKCn0seyIxMTkiOjExOSwiMjkiOjI5LCIzIjoz
LCIzMyI6MzMsIjcyIjo3MiwiNzQiOjc0fV0sMjkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkZW50cmllcyA9IF9kZXJlcV8oODQpKHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7CiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkgewogICAgcmV0dXJuICRlbnRyaWVzKGl0KTsKICB9Cn0pOwoKfSx7IjMzIjozMywiODQi
Ojg0fV0sMjkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnMKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIG93bktleXMgPSBfZGVyZXFfKDg1KTsKdmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTsKdmFyIGdPUEQgPSBfZGVyZXFfKDc1KTsKdmFyIGNyZWF0ZVByb3BlcnR5ID0gX2RlcmVxXygyNCk7CgokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsKICBnZXRPd25Qcm9w
ZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkgewogICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTsKICAgIHZhciBnZXREZXNjID0gZ09QRC5mOwogICAgdmFyIGtleXMgPSBvd25LZXlzKE8pOwogICAgdmFyIHJlc3VsdCA9IHt9OwogICAgdmFyIGkgPSAwOwogICAgdmFyIGtleSwgZGVzYzsKICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHsKICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTsKICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5l
ZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwoKfSx7IjExNyI6MTE3LCIyNCI6MjQsIjMzIjozMywiNzUiOjc1LCI4NSI6ODV9XSwyOTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTsKdmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApOwp2YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTsKdmFyIGdl
dE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9kZXJlcV8oNzUpLmY7CgovLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKQpfZGVyZXFfKDI5KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9kZXJlcV8oNzQpLCAnT2JqZWN0JywgewogIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkgewogICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTsKICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CiAgICB2YXIgRDsKICAgIGRvIHsKICAgICAgaWYgKEQgPSBnZXRP
d25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELmdldDsKICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7CiAgfQp9KTsKCn0seyIxMTkiOjExOSwiMTIwIjoxMjAsIjI5IjoyOSwiMzMiOjMzLCI3NCI6NzQsIjc1Ijo3NSwiNzkiOjc5fV0sMjk0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7CnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTsKdmFyIGdl
dFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7CnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfZGVyZXFfKDc1KS5mOwoKLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUCkKX2RlcmVxXygyOSkgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyBfZGVyZXFfKDc0KSwgJ09iamVjdCcsIHsKICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHsKICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7CiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpOwogICAg
dmFyIEQ7CiAgICBkbyB7CiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7CiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpOwogIH0KfSk7Cgp9LHsiMTE5IjoxMTksIjEyMCI6MTIwLCIyOSI6MjksIjMzIjozMywiNzQiOjc0LCI3NSI6NzUsIjc5Ijo3OX1dLDI5NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllcwp2YXIgJGV4cG9ydCA9IF9k
ZXJlcV8oMzMpOwp2YXIgJHZhbHVlcyA9IF9kZXJlcV8oODQpKGZhbHNlKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgewogIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7CiAgICByZXR1cm4gJHZhbHVlcyhpdCk7CiAgfQp9KTsKCn0seyIzMyI6MzMsIjg0Ijo4NH1dLDI5NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZQp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgZ2xvYmFs
ID0gX2RlcmVxXyg0MCk7CnZhciBjb3JlID0gX2RlcmVxXygyMyk7CnZhciBtaWNyb3Rhc2sgPSBfZGVyZXFfKDY4KSgpOwp2YXIgT0JTRVJWQUJMRSA9IF9kZXJlcV8oMTI4KSgnb2JzZXJ2YWJsZScpOwp2YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIGFuSW5zdGFuY2UgPSBfZGVyZXFfKDYpOwp2YXIgcmVkZWZpbmVBbGwgPSBfZGVyZXFfKDkzKTsKdmFyIGhpZGUgPSBfZGVyZXFfKDQyKTsKdmFyIGZvck9mID0gX2RlcmVxXygzOSk7CnZhciBSRVRVUk4gPSBmb3JPZi5S
RVRVUk47Cgp2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7CiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pOwp9OwoKdmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7CiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7CiAgaWYgKGNsZWFudXApIHsKICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDsKICAgIGNsZWFudXAoKTsKICB9Cn07Cgp2YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikg
ewogIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDsKfTsKCnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHsKICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7CiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7CiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7CiAgfQp9OwoKdmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikgewogIGFuT2JqZWN0KG9ic2VydmVyKTsKICB0aGlz
Ll9jID0gdW5kZWZpbmVkOwogIHRoaXMuX28gPSBvYnNlcnZlcjsKICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTsKICB0cnkgewogICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTsKICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwOwogICAgaWYgKGNsZWFudXAgIT0gbnVsbCkgewogICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9Owog
ICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTsKICAgICAgdGhpcy5fYyA9IGNsZWFudXA7CiAgICB9CiAgfSBjYXRjaCAoZSkgewogICAgb2JzZXJ2ZXIuZXJyb3IoZSk7CiAgICByZXR1cm47CiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpOwp9OwoKU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7CiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkgeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfQp9KTsKCnZhciBTdWJz
Y3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHsKICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uOwp9OwoKU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHsKICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7CiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fczsKICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHsKICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vOwogICAgICB0cnkgewogICAgICAgIHZhciBtID0g
Z2V0TWV0aG9kKG9ic2VydmVyLm5leHQpOwogICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSkgewogICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7CiAgICBpZiAoc3Vic2NyaXB0
aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlOwogICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vOwogICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkOwogICAgdHJ5IHsKICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpOwogICAgICBpZiAoIW0pIHRocm93IHZhbHVlOwogICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0cnkgewogICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAg
ICAgfSBmaW5hbGx5IHsKICAgICAgICB0aHJvdyBlOwogICAgICB9CiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAgIHJldHVybiB2YWx1ZTsKICB9LAogIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSkgewogICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7CiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7CiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbzsKICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkOwogICAgICB0
cnkgewogICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTsKICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAgICAgcmV0dXJuIHZhbHVlOwog
ICAgfQogIH0KfSk7Cgp2YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHsKICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpOwp9OwoKcmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7CiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHsKICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTsKICB9LAogIGZvckVhY2g6IGZ1bmN0
aW9uIGZvckVhY2goZm4pIHsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBhRnVuY3Rpb24oZm4pOwogICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoewogICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmVqZWN0
KGUpOwogICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGVycm9yOiByZWplY3QsCiAgICAgICAgY29tcGxldGU6IHJlc29sdmUKICAgICAgfSk7CiAgICB9KTsKICB9Cn0pOwoKcmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHsKICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHsKICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7CiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09C
U0VSVkFCTEVdKTsKICAgIGlmIChtZXRob2QpIHsKICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7CiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikgewogICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7CiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikgewogICAgICB2YXIgZG9uZSA9IGZhbHNlOwogICAgICBtaWNy
b3Rhc2soZnVuY3Rpb24gKCkgewogICAgICAgIGlmICghZG9uZSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbiAoaXQpIHsKICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTsKICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjsKICAgICAgICAgICAgfSkgPT09IFJFVFVSTikgcmV0dXJuOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTsKICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7CiAg
ICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTsKICAgIH0pOwogIH0sCiAgb2Y6IGZ1bmN0aW9uIG9mKCkgewogICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107CiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2Jz
ZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7CiAgICAgIHZhciBkb25lID0gZmFsc2U7CiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCFkb25lKSB7CiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aDsgKytqKSB7CiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pOwogICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOwogICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAo
KSB7IGRvbmUgPSB0cnVlOyB9OwogICAgfSk7CiAgfQp9KTsKCmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTsKCiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pOwoKX2RlcmVxXygxMDApKCdPYnNlcnZhYmxlJyk7Cgp9LHsiMTAwIjoxMDAsIjEyOCI6MTI4LCIyMyI6MjMsIjMiOjMsIjMzIjozMywiMzkiOjM5LCI0MCI6NDAsIjQyIjo0MiwiNiI6NiwiNjgiOjY4LCI3Ijo3LCI5MyI6OTN9XSwyOTc6W2Z1bmN0aW9u
KF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwp2YXIgY29yZSA9IF9kZXJlcV8oMjMpOwp2YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7CnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfZGVyZXFfKDEwNCk7CnZhciBwcm9taXNlUmVzb2x2ZSA9IF9kZXJlcV8oOTEpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1
bmN0aW9uIChvbkZpbmFsbHkpIHsKICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpOwogIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nOwogIHJldHVybiB0aGlzLnRoZW4oCiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHsKICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pOwogICAgfSA6IG9uRmluYWxseSwKICAgIGlzRnVuY3Rp
b24gPyBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTsKICAgIH0gOiBvbkZpbmFsbHkKICApOwp9IH0pOwoKfSx7IjEwNCI6MTA0LCIyMyI6MjMsIjMzIjozMywiNDAiOjQwLCI5MSI6OTF9XSwyOTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7
CnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9kZXJlcV8oNjkpOwp2YXIgcGVyZm9ybSA9IF9kZXJlcV8oOTApOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHsKICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpOwogIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pOwogIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52
KTsKICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTsKfSB9KTsKCn0seyIzMyI6MzMsIjY5Ijo2OSwiOTAiOjkwfV0sMjk5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7CnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0OwoKbWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRh
KG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkgewogIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTsKfSB9KTsKCn0seyI2NyI6NjcsIjciOjd9XSwzMDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTsKdmFy
IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7CnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlOwoKbWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHsKICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTsKICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdl
dCksIHRhcmdldEtleSwgZmFsc2UpOwogIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7CiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlOwogIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpOwogIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpOwogIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7Cn0gfSk7Cgp9LHsiNjci
OjY3LCI3Ijo3fV0sMzAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIFNldCA9IF9kZXJlcV8oMjMxKTsKdmFyIGZyb20gPSBfZGVyZXFfKDEwKTsKdmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpOwp2YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzOwp2YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5OwoKdmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24g
KE8sIFApIHsKICB2YXIgb0tleXMgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTsKICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzOwogIHZhciBwS2V5cyA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7CiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzOwp9OwoKbWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBm
dW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7CiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpOwp9IH0pOwoKfSx7IjEwIjoxMCwiMjMxIjoyMzEsIjY3Ijo2NywiNyI6NywiNzkiOjc5fV0sMzAyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7CnZhciBhbk9iamVjdCA9IF9kZXJl
cV8oNyk7CnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpOwp2YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhczsKdmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7CnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkgewogIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTsKICBpZiAoaGFzT3duKSByZXR1cm4gb3JkaW5h
cnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7CiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pOwogIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkOwp9OwoKbWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHsKICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3Qo
dGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7Cn0gfSk7Cgp9LHsiNjciOjY3LCI3Ijo3LCI3OSI6Nzl9XSwzMDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5czsKdmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTsKCm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFk
YXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykgewogIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTsKfSB9KTsKCn0seyI2NyI6NjcsIjciOjd9XSwzMDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTsKdmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTsKdmFy
IG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7CnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7CgptZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykgewogIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpCiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9IH0p
OwoKfSx7IjY3Ijo2NywiNyI6N31dLDMwNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSA9IF9kZXJlcV8oNjcpOwp2YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpOwp2YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTsKdmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7CnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkgewogIHZhciBoYXNPd24gPSBvcmRp
bmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTsKICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTsKICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTsKfTsKCm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7CiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRh
dGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9IH0pOwoKfSx7IjY3Ijo2NywiNyI6NywiNzkiOjc5fV0sMzA2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzOwp2YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5OwoKbWV0
YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHsKICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KQogICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTsKfSB9KTsKCn0seyI2NyI6NjcsIjciOjd9XSwzMDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgJG1ldGFkYXRh
ID0gX2RlcmVxXyg2Nyk7CnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7CnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpOwp2YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTsKdmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0OwoKJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkgewogIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHsKICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRh
dGEoCiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLAogICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSwKICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSkKICAgICk7CiAgfTsKfSB9KTsKCn0seyIzIjozLCI2NyI6NjcsIjciOjd9XSwzMDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbQpfZGVyZXFfKDk3KSgnU2V0Jyk7Cgp9LHsi
OTciOjk3fV0sMzA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mCl9kZXJlcV8oOTgpKCdTZXQnKTsKCn0seyI5OCI6OTh9XSwzMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwg
J1NldCcsIHsgdG9KU09OOiBfZGVyZXFfKDIwKSgnU2V0JykgfSk7Cgp9LHsiMjAiOjIwLCIzMyI6MzN9XSwzMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXQKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRhdCA9IF9kZXJlcV8oMTA2KSh0cnVlKTsKCiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywgewogIGF0OiBmdW5jdGlvbiBhdChwb3MpIHsKICAgIHJldHVybiAkYXQo
dGhpcywgcG9zKTsKICB9Cn0pOwoKfSx7IjEwNiI6MTA2LCIzMyI6MzN9XSwzMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC8KdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTsKdmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpOwp2YXIgaXNSZWdFeHAgPSBfZGVyZXFfKDUyKTsKdmFyIGdldEZsYWdzID0gX2RlcmVxXygzNyk7CnZhciBSZWdFeHBQ
cm90byA9IFJlZ0V4cC5wcm90b3R5cGU7Cgp2YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHJlZ2V4cCwgc3RyaW5nKSB7CiAgdGhpcy5fciA9IHJlZ2V4cDsKICB0aGlzLl9zID0gc3RyaW5nOwp9OwoKX2RlcmVxXyg1NCkoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7CiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpOwogIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogbWF0Y2ggPT09IG51bGwgfTsKfSk7CgokZXhwb3J0KCRleHBv
cnQuUCwgJ1N0cmluZycsIHsKICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7CiAgICBkZWZpbmVkKHRoaXMpOwogICAgaWYgKCFpc1JlZ0V4cChyZWdleHApKSB0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7CiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTsKICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTsKICAgIHZhciByeCA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJj
ZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpOwogICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7CiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7CiAgfQp9KTsKCn0seyIxMTgiOjExOCwiMjgiOjI4LCIzMyI6MzMsIjM3IjozNywiNTIiOjUyLCI1NCI6NTR9XSwzMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1w
YWQtc3RhcnQtZW5kCnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciAkcGFkID0gX2RlcmVxXygxMDkpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykgewogICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpOwogIH0KfSk7Cgp9LHsiMTA5IjoxMDksIjMzIjozM31dLDMxNDpbZnVuY3Rpb24oX2Rl
cmVxXyxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmQKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICRwYWQgPSBfZGVyZXFfKDEwOSk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykgewogICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/
IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7CiAgfQp9KTsKCn0seyIxMDkiOjEwOSwiMzMiOjMzfV0sMzE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltCl9kZXJlcV8oMTExKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHsKICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7CiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7CiAgfTsKfSwgJ3Ry
aW1TdGFydCcpOwoKfSx7IjExMSI6MTExfV0sMzE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltCl9kZXJlcV8oMTExKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHsKICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTsKICB9Owp9LCAndHJpbUVuZCcpOwoKfSx7IjExMSI6MTExfV0sMzE3OltmdW5jdGlv
bihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKX2RlcmVxXygxMjYpKCdhc3luY0l0ZXJhdG9yJyk7Cgp9LHsiMTI2IjoxMjZ9XSwzMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewpfZGVyZXFfKDEyNikoJ29ic2VydmFibGUnKTsKCn0seyIxMjYiOjEyNn1dLDMxOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbAp2YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGds
b2JhbDogX2RlcmVxXyg0MCkgfSk7Cgp9LHsiMzMiOjMzLCI0MCI6NDB9XSwzMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb20KX2RlcmVxXyg5NykoJ1dlYWtNYXAnKTsKCn0seyI5NyI6OTd9XSwzMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mCl9kZXJlcV8o
OTgpKCdXZWFrTWFwJyk7Cgp9LHsiOTgiOjk4fV0sMzIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tCl9kZXJlcV8oOTcpKCdXZWFrU2V0Jyk7Cgp9LHsiOTciOjk3fV0sMzIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZgpfZGVyZXFfKDk4KSgnV2Vha1NldCcp
OwoKfSx7Ijk4Ijo5OH1dLDMyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciAkaXRlcmF0b3JzID0gX2RlcmVxXygxNDEpOwp2YXIgZ2V0S2V5cyA9IF9kZXJlcV8oODEpOwp2YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTsKdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApOwp2YXIgaGlkZSA9IF9kZXJlcV8oNDIpOwp2YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7CnZhciB3a3MgPSBfZGVyZXFfKDEyOCk7CnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTsKdmFyIFRPX1NUUklOR19UQUcgPSB3a3Mo
J3RvU3RyaW5nVGFnJyk7CnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTsKCnZhciBET01JdGVyYWJsZXMgPSB7CiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLgogIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLAogIENTU1ZhbHVlTGlzdDogZmFsc2UsCiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLAogIERPTVJlY3RMaXN0OiBmYWxzZSwKICBET01TdHJpbmdMaXN0OiBmYWxzZSwKICBET01Ub2tlbkxpc3Q6IHRydWUsCiAgRGF0YVRyYW5zZmVy
SXRlbUxpc3Q6IGZhbHNlLAogIEZpbGVMaXN0OiBmYWxzZSwKICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsCiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLAogIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsCiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLAogIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuCiAgTWltZVR5cGVBcnJheTogZmFsc2UsCiAgTmFtZWROb2RlTWFwOiBmYWxzZSwKICBOb2RlTGlzdDogdHJ1ZSwKICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSwK
ICBQbHVnaW46IGZhbHNlLAogIFBsdWdpbkFycmF5OiBmYWxzZSwKICBTVkdMZW5ndGhMaXN0OiBmYWxzZSwKICBTVkdOdW1iZXJMaXN0OiBmYWxzZSwKICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsCiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSwKICBTVkdTdHJpbmdMaXN0OiBmYWxzZSwKICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSwKICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSwKICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuCiAgVGV4dFRyYWNrQ3VlTGlz
dDogZmFsc2UsCiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsCiAgVG91Y2hMaXN0OiBmYWxzZQp9OwoKZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHsKICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldOwogIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTsKICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTsKICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlOwogIHZhciBrZXk7
CiAgaWYgKHByb3RvKSB7CiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTsKICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpOwogICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7CiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTsKICB9Cn0KCn0seyIxMjgiOjEy
OCwiMTQxIjoxNDEsIjQwIjo0MCwiNDIiOjQyLCI1OCI6NTgsIjgxIjo4MSwiOTQiOjk0fV0sMzI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTsKdmFyICR0YXNrID0gX2RlcmVxXygxMTMpOwokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwgewogIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LAogIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhcgp9KTsKCn0seyIxMTMiOjExMywiMzMiOjMzfV0sMzI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRz
KXsKLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeAp2YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7CnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7CnZhciBpbnZva2UgPSBfZGVyZXFfKDQ2KTsKdmFyIHBhcnRpYWwgPSBfZGVyZXFfKDg4KTsKdmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7CnZhciBNU0lFID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlwuLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrCnZhciB3cmFwID0g
ZnVuY3Rpb24gKHNldCkgewogIHJldHVybiBNU0lFID8gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykgewogICAgcmV0dXJuIHNldChpbnZva2UoCiAgICAgIHBhcnRpYWwsCiAgICAgIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSwKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jCiAgICAgIHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikKICAgICksIHRpbWUpOwogIH0gOiBzZXQ7Cn07CiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsg
JGV4cG9ydC5GICogTVNJRSwgewogIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLAogIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbCkKfSk7Cgp9LHsiMzMiOjMzLCI0MCI6NDAsIjQ2Ijo0NiwiODgiOjg4fV0sMzI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKX2RlcmVxXygyNTQpOwpfZGVyZXFfKDE5MSk7Cl9kZXJlcV8oMTkzKTsKX2RlcmVxXygxOTIpOwpfZGVyZXFfKDE5NSk7Cl9kZXJlcV8oMTk3KTsKX2RlcmVxXygyMDIpOwpfZGVyZXFfKDE5Nik7Cl9kZXJlcV8o
MTk0KTsKX2RlcmVxXygyMDQpOwpfZGVyZXFfKDIwMyk7Cl9kZXJlcV8oMTk5KTsKX2RlcmVxXygyMDApOwpfZGVyZXFfKDE5OCk7Cl9kZXJlcV8oMTkwKTsKX2RlcmVxXygyMDEpOwpfZGVyZXFfKDIwNSk7Cl9kZXJlcV8oMjA2KTsKX2RlcmVxXygxNTcpOwpfZGVyZXFfKDE1OSk7Cl9kZXJlcV8oMTU4KTsKX2RlcmVxXygyMDgpOwpfZGVyZXFfKDIwNyk7Cl9kZXJlcV8oMTc4KTsKX2RlcmVxXygxODgpOwpfZGVyZXFfKDE4OSk7Cl9kZXJlcV8oMTc5KTsKX2RlcmVxXygxODApOwpfZGVyZXFfKDE4MSk7Cl9kZXJlcV8oMTgyKTsK
X2RlcmVxXygxODMpOwpfZGVyZXFfKDE4NCk7Cl9kZXJlcV8oMTg1KTsKX2RlcmVxXygxODYpOwpfZGVyZXFfKDE4Nyk7Cl9kZXJlcV8oMTYxKTsKX2RlcmVxXygxNjIpOwpfZGVyZXFfKDE2Myk7Cl9kZXJlcV8oMTY0KTsKX2RlcmVxXygxNjUpOwpfZGVyZXFfKDE2Nik7Cl9kZXJlcV8oMTY3KTsKX2RlcmVxXygxNjgpOwpfZGVyZXFfKDE2OSk7Cl9kZXJlcV8oMTcwKTsKX2RlcmVxXygxNzEpOwpfZGVyZXFfKDE3Mik7Cl9kZXJlcV8oMTczKTsKX2RlcmVxXygxNzQpOwpfZGVyZXFfKDE3NSk7Cl9kZXJlcV8oMTc2KTsKX2RlcmVx
XygxNzcpOwpfZGVyZXFfKDI0MSk7Cl9kZXJlcV8oMjQ2KTsKX2RlcmVxXygyNTMpOwpfZGVyZXFfKDI0NCk7Cl9kZXJlcV8oMjM2KTsKX2RlcmVxXygyMzcpOwpfZGVyZXFfKDI0Mik7Cl9kZXJlcV8oMjQ3KTsKX2RlcmVxXygyNDkpOwpfZGVyZXFfKDIzMik7Cl9kZXJlcV8oMjMzKTsKX2RlcmVxXygyMzQpOwpfZGVyZXFfKDIzNSk7Cl9kZXJlcV8oMjM4KTsKX2RlcmVxXygyMzkpOwpfZGVyZXFfKDI0MCk7Cl9kZXJlcV8oMjQzKTsKX2RlcmVxXygyNDUpOwpfZGVyZXFfKDI0OCk7Cl9kZXJlcV8oMjUwKTsKX2RlcmVxXygyNTEp
OwpfZGVyZXFfKDI1Mik7Cl9kZXJlcV8oMTUyKTsKX2RlcmVxXygxNTQpOwpfZGVyZXFfKDE1Myk7Cl9kZXJlcV8oMTU2KTsKX2RlcmVxXygxNTUpOwpfZGVyZXFfKDE0MCk7Cl9kZXJlcV8oMTM4KTsKX2RlcmVxXygxNDUpOwpfZGVyZXFfKDE0Mik7Cl9kZXJlcV8oMTQ4KTsKX2RlcmVxXygxNTApOwpfZGVyZXFfKDEzNyk7Cl9kZXJlcV8oMTQ0KTsKX2RlcmVxXygxMzQpOwpfZGVyZXFfKDE0OSk7Cl9kZXJlcV8oMTMyKTsKX2RlcmVxXygxNDcpOwpfZGVyZXFfKDE0Nik7Cl9kZXJlcV8oMTM5KTsKX2RlcmVxXygxNDMpOwpfZGVy
ZXFfKDEzMSk7Cl9kZXJlcV8oMTMzKTsKX2RlcmVxXygxMzYpOwpfZGVyZXFfKDEzNSk7Cl9kZXJlcV8oMTUxKTsKX2RlcmVxXygxNDEpOwpfZGVyZXFfKDIyNCk7Cl9kZXJlcV8oMjMwKTsKX2RlcmVxXygyMjUpOwpfZGVyZXFfKDIyNik7Cl9kZXJlcV8oMjI3KTsKX2RlcmVxXygyMjgpOwpfZGVyZXFfKDIyOSk7Cl9kZXJlcV8oMjA5KTsKX2RlcmVxXygxNjApOwpfZGVyZXFfKDIzMSk7Cl9kZXJlcV8oMjY2KTsKX2RlcmVxXygyNjcpOwpfZGVyZXFfKDI1NSk7Cl9kZXJlcV8oMjU2KTsKX2RlcmVxXygyNjEpOwpfZGVyZXFfKDI2
NCk7Cl9kZXJlcV8oMjY1KTsKX2RlcmVxXygyNTkpOwpfZGVyZXFfKDI2Mik7Cl9kZXJlcV8oMjYwKTsKX2RlcmVxXygyNjMpOwpfZGVyZXFfKDI1Nyk7Cl9kZXJlcV8oMjU4KTsKX2RlcmVxXygyMTApOwpfZGVyZXFfKDIxMSk7Cl9kZXJlcV8oMjEyKTsKX2RlcmVxXygyMTMpOwpfZGVyZXFfKDIxNCk7Cl9kZXJlcV8oMjE3KTsKX2RlcmVxXygyMTUpOwpfZGVyZXFfKDIxNik7Cl9kZXJlcV8oMjE4KTsKX2RlcmVxXygyMTkpOwpfZGVyZXFfKDIyMCk7Cl9kZXJlcV8oMjIxKTsKX2RlcmVxXygyMjMpOwpfZGVyZXFfKDIyMik7Cl9k
ZXJlcV8oMjcwKTsKX2RlcmVxXygyNjgpOwpfZGVyZXFfKDI2OSk7Cl9kZXJlcV8oMzExKTsKX2RlcmVxXygzMTQpOwpfZGVyZXFfKDMxMyk7Cl9kZXJlcV8oMzE1KTsKX2RlcmVxXygzMTYpOwpfZGVyZXFfKDMxMik7Cl9kZXJlcV8oMzE3KTsKX2RlcmVxXygzMTgpOwpfZGVyZXFfKDI5Mik7Cl9kZXJlcV8oMjk1KTsKX2RlcmVxXygyOTEpOwpfZGVyZXFfKDI4OSk7Cl9kZXJlcV8oMjkwKTsKX2RlcmVxXygyOTMpOwpfZGVyZXFfKDI5NCk7Cl9kZXJlcV8oMjc2KTsKX2RlcmVxXygzMTApOwpfZGVyZXFfKDI3NSk7Cl9kZXJlcV8o
MzA5KTsKX2RlcmVxXygzMjEpOwpfZGVyZXFfKDMyMyk7Cl9kZXJlcV8oMjc0KTsKX2RlcmVxXygzMDgpOwpfZGVyZXFfKDMyMCk7Cl9kZXJlcV8oMzIyKTsKX2RlcmVxXygyNzMpOwpfZGVyZXFfKDMxOSk7Cl9kZXJlcV8oMjcyKTsKX2RlcmVxXygyNzcpOwpfZGVyZXFfKDI3OCk7Cl9kZXJlcV8oMjc5KTsKX2RlcmVxXygyODApOwpfZGVyZXFfKDI4MSk7Cl9kZXJlcV8oMjgzKTsKX2RlcmVxXygyODIpOwpfZGVyZXFfKDI4NCk7Cl9kZXJlcV8oMjg1KTsKX2RlcmVxXygyODYpOwpfZGVyZXFfKDI4OCk7Cl9kZXJlcV8oMjg3KTsK
X2RlcmVxXygyOTcpOwpfZGVyZXFfKDI5OCk7Cl9kZXJlcV8oMjk5KTsKX2RlcmVxXygzMDApOwpfZGVyZXFfKDMwMik7Cl9kZXJlcV8oMzAxKTsKX2RlcmVxXygzMDQpOwpfZGVyZXFfKDMwMyk7Cl9kZXJlcV8oMzA1KTsKX2RlcmVxXygzMDYpOwpfZGVyZXFfKDMwNyk7Cl9kZXJlcV8oMjcxKTsKX2RlcmVxXygyOTYpOwpfZGVyZXFfKDMyNik7Cl9kZXJlcV8oMzI1KTsKX2RlcmVxXygzMjQpOwptb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjMpOwoKfSx7IjEzMSI6MTMxLCIxMzIiOjEzMiwiMTMzIjoxMzMsIjEzNCI6MTM0LCIx
MzUiOjEzNSwiMTM2IjoxMzYsIjEzNyI6MTM3LCIxMzgiOjEzOCwiMTM5IjoxMzksIjE0MCI6MTQwLCIxNDEiOjE0MSwiMTQyIjoxNDIsIjE0MyI6MTQzLCIxNDQiOjE0NCwiMTQ1IjoxNDUsIjE0NiI6MTQ2LCIxNDciOjE0NywiMTQ4IjoxNDgsIjE0OSI6MTQ5LCIxNTAiOjE1MCwiMTUxIjoxNTEsIjE1MiI6MTUyLCIxNTMiOjE1MywiMTU0IjoxNTQsIjE1NSI6MTU1LCIxNTYiOjE1NiwiMTU3IjoxNTcsIjE1OCI6MTU4LCIxNTkiOjE1OSwiMTYwIjoxNjAsIjE2MSI6MTYxLCIxNjIiOjE2MiwiMTYzIjoxNjMsIjE2NCI6MTY0LCIx
NjUiOjE2NSwiMTY2IjoxNjYsIjE2NyI6MTY3LCIxNjgiOjE2OCwiMTY5IjoxNjksIjE3MCI6MTcwLCIxNzEiOjE3MSwiMTcyIjoxNzIsIjE3MyI6MTczLCIxNzQiOjE3NCwiMTc1IjoxNzUsIjE3NiI6MTc2LCIxNzciOjE3NywiMTc4IjoxNzgsIjE3OSI6MTc5LCIxODAiOjE4MCwiMTgxIjoxODEsIjE4MiI6MTgyLCIxODMiOjE4MywiMTg0IjoxODQsIjE4NSI6MTg1LCIxODYiOjE4NiwiMTg3IjoxODcsIjE4OCI6MTg4LCIxODkiOjE4OSwiMTkwIjoxOTAsIjE5MSI6MTkxLCIxOTIiOjE5MiwiMTkzIjoxOTMsIjE5NCI6MTk0LCIx
OTUiOjE5NSwiMTk2IjoxOTYsIjE5NyI6MTk3LCIxOTgiOjE5OCwiMTk5IjoxOTksIjIwMCI6MjAwLCIyMDEiOjIwMSwiMjAyIjoyMDIsIjIwMyI6MjAzLCIyMDQiOjIwNCwiMjA1IjoyMDUsIjIwNiI6MjA2LCIyMDciOjIwNywiMjA4IjoyMDgsIjIwOSI6MjA5LCIyMTAiOjIxMCwiMjExIjoyMTEsIjIxMiI6MjEyLCIyMTMiOjIxMywiMjE0IjoyMTQsIjIxNSI6MjE1LCIyMTYiOjIxNiwiMjE3IjoyMTcsIjIxOCI6MjE4LCIyMTkiOjIxOSwiMjIwIjoyMjAsIjIyMSI6MjIxLCIyMjIiOjIyMiwiMjIzIjoyMjMsIjIyNCI6MjI0LCIy
MjUiOjIyNSwiMjI2IjoyMjYsIjIyNyI6MjI3LCIyMjgiOjIyOCwiMjI5IjoyMjksIjIzIjoyMywiMjMwIjoyMzAsIjIzMSI6MjMxLCIyMzIiOjIzMiwiMjMzIjoyMzMsIjIzNCI6MjM0LCIyMzUiOjIzNSwiMjM2IjoyMzYsIjIzNyI6MjM3LCIyMzgiOjIzOCwiMjM5IjoyMzksIjI0MCI6MjQwLCIyNDEiOjI0MSwiMjQyIjoyNDIsIjI0MyI6MjQzLCIyNDQiOjI0NCwiMjQ1IjoyNDUsIjI0NiI6MjQ2LCIyNDciOjI0NywiMjQ4IjoyNDgsIjI0OSI6MjQ5LCIyNTAiOjI1MCwiMjUxIjoyNTEsIjI1MiI6MjUyLCIyNTMiOjI1MywiMjU0
IjoyNTQsIjI1NSI6MjU1LCIyNTYiOjI1NiwiMjU3IjoyNTcsIjI1OCI6MjU4LCIyNTkiOjI1OSwiMjYwIjoyNjAsIjI2MSI6MjYxLCIyNjIiOjI2MiwiMjYzIjoyNjMsIjI2NCI6MjY0LCIyNjUiOjI2NSwiMjY2IjoyNjYsIjI2NyI6MjY3LCIyNjgiOjI2OCwiMjY5IjoyNjksIjI3MCI6MjcwLCIyNzEiOjI3MSwiMjcyIjoyNzIsIjI3MyI6MjczLCIyNzQiOjI3NCwiMjc1IjoyNzUsIjI3NiI6Mjc2LCIyNzciOjI3NywiMjc4IjoyNzgsIjI3OSI6Mjc5LCIyODAiOjI4MCwiMjgxIjoyODEsIjI4MiI6MjgyLCIyODMiOjI4MywiMjg0
IjoyODQsIjI4NSI6Mjg1LCIyODYiOjI4NiwiMjg3IjoyODcsIjI4OCI6Mjg4LCIyODkiOjI4OSwiMjkwIjoyOTAsIjI5MSI6MjkxLCIyOTIiOjI5MiwiMjkzIjoyOTMsIjI5NCI6Mjk0LCIyOTUiOjI5NSwiMjk2IjoyOTYsIjI5NyI6Mjk3LCIyOTgiOjI5OCwiMjk5IjoyOTksIjMwMCI6MzAwLCIzMDEiOjMwMSwiMzAyIjozMDIsIjMwMyI6MzAzLCIzMDQiOjMwNCwiMzA1IjozMDUsIjMwNiI6MzA2LCIzMDciOjMwNywiMzA4IjozMDgsIjMwOSI6MzA5LCIzMTAiOjMxMCwiMzExIjozMTEsIjMxMiI6MzEyLCIzMTMiOjMxMywiMzE0
IjozMTQsIjMxNSI6MzE1LCIzMTYiOjMxNiwiMzE3IjozMTcsIjMxOCI6MzE4LCIzMTkiOjMxOSwiMzIwIjozMjAsIjMyMSI6MzIxLCIzMjIiOjMyMiwiMzIzIjozMjMsIjMyNCI6MzI0LCIzMjUiOjMyNSwiMzI2IjozMjZ9XSwzMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKGdsb2JhbCl7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuCiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJT
RC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuCiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbgogKiB0aGUgc2FtZSBkaXJlY3RvcnkuCiAqLwoKIShmdW5jdGlvbihnbG9iYWwpIHsKICAidXNlIHN0cmljdCI7CgogIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7CiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5
OwogIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLgogIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiA/IFN5bWJvbCA6IHt9OwogIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgIkBAaXRlcmF0b3IiOwogIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8ICJAQGFzeW5jSXRlcmF0b3IiOwogIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgIkBAdG9TdHJp
bmdUYWciOwoKICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSAib2JqZWN0IjsKICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7CiAgaWYgKHJ1bnRpbWUpIHsKICAgIGlmIChpbk1vZHVsZSkgewogICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsCiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuCiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVu
dGltZTsKICAgIH0KICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXMKICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS4KICAgIHJldHVybjsKICB9CgogIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlcgogIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC4KICBydW50aW1lID0gZ2xvYmFsLnJlZ2Vu
ZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTsKCiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkgewogICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuCiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6
IEdlbmVyYXRvcjsKICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7CiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTsKCiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsCiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuCiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7CgogICAg
cmV0dXJuIGdlbmVyYXRvcjsKICB9CiAgcnVudGltZS53cmFwID0gd3JhcDsKCiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uCiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkCiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlCiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFs
bCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZQogIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWQKICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nCiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWUKICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBh
cmd1bWVudHMgb2JqZWN0LiBUaGUKICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoCiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLgogIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIHsgdHlwZTogIm5vcm1hbCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTsKICAgIH0gY2F0Y2ggKGVycikgewogICAgICByZXR1cm4g
eyB0eXBlOiAidGhyb3ciLCBhcmc6IGVyciB9OwogICAgfQogIH0KCiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSAic3VzcGVuZGVkU3RhcnQiOwogIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gInN1c3BlbmRlZFlpZWxkIjsKICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSAiZXhlY3V0aW5nIjsKICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSAiY29tcGxldGVkIjsKCiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhcwogIC8vIGJyZWFraW5nIG91
dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC4KICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9OwoKICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmQKICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3IKICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91cgogIC8vIG1pbmlmaWVyIG5vdCB0
byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuCiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30KICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9CiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fQoKICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0CiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC4KICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTsKICBJdGVyYXRvclByb3RvdHlwZVtp
dGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7CiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpOwogIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJgogICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYKICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9s
KSkgewogICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWQKICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC4KICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7CiAgfQoKICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPQogICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpOwogIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdw
LmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7CiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjsKICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPQogICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSAiR2VuZXJhdG9yRnVuY3Rpb24iOwoKICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZQogIC8vIEl0ZXJhdG9yIGlu
dGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuCiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkgewogICAgWyJuZXh0IiwgInRocm93IiwgInJldHVybiJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7CiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7CiAgICAgIH07CiAgICB9KTsKICB9CgogIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdl
bkZ1bikgewogICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSAiZnVuY3Rpb24iICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjsKICAgIHJldHVybiBjdG9yCiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwKICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuCiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LgogICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09ICJHZW5lcmF0
b3JGdW5jdGlvbiIKICAgICAgOiBmYWxzZTsKICB9OwoKICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHsKICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHsKICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpOwogICAgfSBlbHNlIHsKICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlOwogICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7CiAgICAgICAgZ2VuRnVuW3RvU3RyaW5n
VGFnU3ltYm9sXSA9ICJHZW5lcmF0b3JGdW5jdGlvbiI7CiAgICAgIH0KICAgIH0KICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTsKICAgIHJldHVybiBnZW5GdW47CiAgfTsKCiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvCiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3QKICAvLyBgaGFzT3duLmNhbGwodmFsdWUsICJfX2F3YWl0IilgIHRvIGRl
dGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpcwogIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuCiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykgewogICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07CiAgfTsKCiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHsKICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpOwogICAgICBpZiAocmVjb3JkLnR5
cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7CiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlOwogICAgICAgIGlmICh2YWx1ZSAmJgogICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICJvYmplY3QiICYmCiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCAiX19hd2FpdCIpKSB7CiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFs
dWUpIHsKICAgICAgICAgICAgaW52b2tlKCJuZXh0IiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgaW52b2tlKCJ0aHJvdyIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHsKICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVz
CiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGUKICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlCiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZQogICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3QKICAgICAgICAgIC8vIHRocm93
biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2UKICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW4KICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdAogICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkCiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5k
IGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFjawogICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoCiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlCiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlCiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBl
eHByZXNzaW9uLCBhbmQKICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLgogICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkOwogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0sIHJlamVjdCk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSAib2JqZWN0IiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHsKICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTsKICAg
IH0KCiAgICB2YXIgcHJldmlvdXNQcm9taXNlOwoKICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHsKICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0KICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNh
bGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsCiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsCiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZgogICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvCiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhv
dXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsCiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG8KICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5CiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHMKICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlv
bnMgc3luY2hyb25vdXNseQogICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlCiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHkKICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuCiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oCiAgICAgICAgICBjYWxsSW52
b2tlV2l0aE1ldGhvZEFuZEFyZywKICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyCiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuCiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZwogICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpOwogICAgfQoKICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsCiAgICAvLyAu
dGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS4KICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7CiAgfQoKICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpOwogIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXM7CiAgfTsKICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yOwoKICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUg
aW1wbGVtZW50ZWQgb24gdG9wIG9mCiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mCiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuCiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7CiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKAogICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KQogICAgKTsKCiAg
ICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pCiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuCiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpOwogICAgICAgIH0pOwogIH07CgogIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgewogICAgdmFyIHN0
YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDsKCiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7CiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmciKTsKICAgICAgfQoKICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkgewogICAgICAgIGlmIChtZXRob2QgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgIHRocm93IGFyZzsKICAgICAgICB9CgogICAgICAgIC8vIEJl
IGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6CiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZQogICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7CiAgICAgIH0KCiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kOwogICAgICBjb250ZXh0LmFyZyA9IGFyZzsKCiAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTsKICAgICAgICBpZiAoZGVsZWdh
dGUpIHsKICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpOwogICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7CiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7CiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gIm5leHQiKSB7CiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQu
X3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3MKICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uCiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7CgogICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkgewogICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkOwogICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFy
ZzsKICAgICAgICAgIH0KCiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTsKCiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gInJldHVybiIpIHsKICAgICAgICAgIGNvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LmFyZyk7CiAgICAgICAgfQoKICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nOwoKICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7CiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAibm9y
bWFsIikgewogICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PQogICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLgogICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmUKICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZAogICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7CgogICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHsK
ICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsCiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZQogICAgICAgICAgfTsKCiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDsKICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGUKICAgICAgICAgIC8vIGNvbnRleHQu
ZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuCiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyI7CiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0KCiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlCiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZQogIC8vIGRlbGVnYXRlIGl0
ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLAogIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLgogIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHsKICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07CiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHsKICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVu
IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93CiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuCiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsOwoKICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSAidGhyb3ciKSB7CiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikgewogICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYQogICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVw
LgogICAgICAgICAgY29udGV4dC5tZXRob2QgPSAicmV0dXJuIjsKICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkOwogICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7CgogICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSAidGhyb3ciKSB7CiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tCiAgICAgICAgICAgIC8vICJyZXR1cm4iIHRvICJ0aHJvdyIsIGxldCB0aGF0IG92ZXJyaWRlIHRo
ZSBUeXBlRXJyb3IgYmVsb3cuCiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29udGV4dC5tZXRob2QgPSAidGhyb3ciOwogICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcigKICAgICAgICAgICJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kIik7CiAgICAgIH0KCiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgfQoKICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRl
Lml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7CgogICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgIGNvbnRleHQubWV0aG9kID0gInRocm93IjsKICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnOwogICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDsKICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICB9CgogICAgdmFyIGluZm8gPSByZWNvcmQuYXJnOwoKICAgIGlmICghIGluZm8pIHsKICAgICAgY29udGV4dC5tZXRob2QgPSAidGhyb3ciOwogICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBl
RXJyb3IoIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0Iik7CiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsOwogICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDsKICAgIH0KCiAgICBpZiAoaW5mby5kb25lKSB7CiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5CiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuCiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVz
dWx0TmFtZV0gPSBpbmZvLnZhbHVlOwoKICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLgogICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jOwoKICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzICJ0aHJvdyIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZQogICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmCiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyAibmV4
dCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlbgogICAgICAvLyAiY29uc3VtZWQiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzCiAgICAgIC8vICJyZXR1cm4iLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZQogICAgICAvLyBvdXRlciBnZW5lcmF0b3IuCiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gInJldHVybiIpIHsKICAgICAgICBjb250ZXh0Lm1ldGhvZCA9ICJuZXh0IjsKICAgICAgICBjb250ZXh0LmFyZyA9
IHVuZGVmaW5lZDsKICAgICAgfQoKICAgIH0gZWxzZSB7CiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC4KICAgICAgcmV0dXJuIGluZm87CiAgICB9CgogICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGgKICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuCiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDsKICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogIH0KCiAgLy8gRGVmaW5lIEdl
bmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGUKICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuCiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTsKCiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gIkdlbmVyYXRvciI7CgogIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlCiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxl
bWVudGF0aW9ucyBvZiB0aGUKICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvcgogIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLgogIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLgogIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkgewogICAgcmV0
dXJuIHRoaXM7CiAgfTsKCiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiAiW29iamVjdCBHZW5lcmF0b3JdIjsKICB9OwoKICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykgewogICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTsKCiAgICBpZiAoMSBpbiBsb2NzKSB7CiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTsKICAgIH0KCiAgICBpZiAoMiBpbiBsb2NzKSB7CiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdOwogICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107
CiAgICB9CgogICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpOwogIH0KCiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkgewogICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307CiAgICByZWNvcmQudHlwZSA9ICJub3JtYWwiOwogICAgZGVsZXRlIHJlY29yZC5hcmc7CiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkOwogIH0KCiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkgewogICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQg
d2l0aG91dCBhIGNhdGNoCiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tCiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuCiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6ICJyb290IiB9XTsKICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTsKICAgIHRoaXMucmVzZXQodHJ1ZSk7CiAgfQoKICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHsK
ICAgIHZhciBrZXlzID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7CiAgICAgIGtleXMucHVzaChrZXkpOwogICAgfQogICAga2V5cy5yZXZlcnNlKCk7CgogICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXAKICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuCiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7CiAgICAgICAgdmFyIGtleSA9IGtl
eXMucG9wKCk7CiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHsKICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7CiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTsKICAgICAgICAgIHJldHVybiBuZXh0OwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlCiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzCiAgICAgIC8vIGFsc28gZW5z
dXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLgogICAgICBuZXh0LmRvbmUgPSB0cnVlOwogICAgICByZXR1cm4gbmV4dDsKICAgIH07CiAgfTsKCiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7CiAgICBpZiAoaXRlcmFibGUpIHsKICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdOwogICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHsKICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7CiAgICAgIH0KCiAg
ICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgIHJldHVybiBpdGVyYWJsZTsKICAgICAgfQoKICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7CiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHsKICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07CiAgICAgICAgICAg
ICAgbmV4dC5kb25lID0gZmFsc2U7CiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkOwogICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTsKCiAgICAgICAgICByZXR1cm4gbmV4dDsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDsKICAgICAgfQogICAgfQoKICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy4KICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTsKICB9
CiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7CgogIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7CiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07CiAgfQoKICBDb250ZXh0LnByb3RvdHlwZSA9IHsKICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LAoKICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7CiAgICAgIHRoaXMucHJldiA9IDA7CiAgICAgIHRoaXMubmV4dCA9IDA7CiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzCiAg
ICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uCiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7CiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlOwogICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDsKCiAgICAgIHRoaXMubWV0aG9kID0gIm5leHQiOwogICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDsKCiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpOwoKICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7CiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7CiAg
ICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOgogICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSAidCIgJiYKICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJgogICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHsKICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuZG9uZSA9
IHRydWU7CgogICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdOwogICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uOwogICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLnJ2YWw7CiAgICB9LAoKICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHsKICAgICAgaWYgKHRoaXMuZG9uZSkgewogICAgICAgIHRocm93IGV4Y2VwdGlvbjsK
ICAgICAgfQoKICAgICAgdmFyIGNvbnRleHQgPSB0aGlzOwogICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHsKICAgICAgICByZWNvcmQudHlwZSA9ICJ0aHJvdyI7CiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjsKICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7CgogICAgICAgIGlmIChjYXVnaHQpIHsKICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssCiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRs
ZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LgogICAgICAgICAgY29udGV4dC5tZXRob2QgPSAibmV4dCI7CiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAhISBjYXVnaHQ7CiAgICAgIH0KCiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247CgogICAgICAgIGlmIChlbnRy
eS50cnlMb2MgPT09ICJyb290IikgewogICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGUKICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0bwogICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi4KICAgICAgICAgIHJldHVybiBoYW5kbGUoImVuZCIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHsKICAgICAgICAgIHZhciBo
YXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCAiY2F0Y2hMb2MiKTsKICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIik7CgogICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHsKICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAg
ICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7CiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7CiAgICAgICAgICAgICAg
cmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHkiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5
RW50cmllc1tpXTsKICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJgogICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgImZpbmFsbHlMb2MiKSAmJgogICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7CiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiYKICAgICAgICAgICh0eXBlID09PSAiYnJlYWsiIHx8CiAgICAgICAgICAgdHlwZSA9PT0gImNvbnRp
bnVlIikgJiYKICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmCiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHsKICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhCiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLgogICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7CiAgICAgIH0KCiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxl
dGlvbiA6IHt9OwogICAgICByZWNvcmQudHlwZSA9IHR5cGU7CiAgICAgIHJlY29yZC5hcmcgPSBhcmc7CgogICAgICBpZiAoZmluYWxseUVudHJ5KSB7CiAgICAgICAgdGhpcy5tZXRob2QgPSAibmV4dCI7CiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7CiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7CiAgICB9LAoKICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7CiAgICAgIGlm
IChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgIHRocm93IHJlY29yZC5hcmc7CiAgICAgIH0KCiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gImJyZWFrIiB8fAogICAgICAgICAgcmVjb3JkLnR5cGUgPT09ICJjb250aW51ZSIpIHsKICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnOwogICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSAicmV0dXJuIikgewogICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZzsKICAgICAgICB0aGlzLm1ldGhvZCA9ICJyZXR1cm4iOwogICAgICAg
IHRoaXMubmV4dCA9ICJlbmQiOwogICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSAibm9ybWFsIiAmJiBhZnRlckxvYykgewogICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jOwogICAgICB9CgogICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDsKICAgIH0sCgogICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAg
aWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHsKICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpOwogICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7CiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgImNhdGNoIjogZnVuY3Rpb24odHJ5TG9jKSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50
cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7CiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjsKICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZzsKICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhyb3duOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2gg
bWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uCiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay4KICAgICAgdGhyb3cgbmV3IEVycm9yKCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHQiKTsKICAgIH0sCgogICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHsKICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHsKICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSwKICAgICAgICByZXN1bHROYW1lOiBy
ZXN1bHROYW1lLAogICAgICAgIG5leHRMb2M6IG5leHRMb2MKICAgICAgfTsKCiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gIm5leHQiKSB7CiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3QKICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuCiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgfQogIH07Cn0pKAogIC8vIEFtb25nIHRo
ZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwKICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3QKICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLgogIHR5cGVvZiBnbG9iYWwgPT09ICJvYmplY3QiID8gZ2xvYmFsIDoKICB0eXBlb2Ygd2luZG93ID09PSAib2JqZWN0IiA/IHdpbmRvdyA6CiAgdHlwZW9mIHNlbGYgPT09ICJvYmplY3Qi
ID8gc2VsZiA6IHRoaXMKKTsKCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQp9LHt9XX0se30sWzFdKTsKCihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PSJvYmplY3QiJiZ0eXBlb2YgbW9kdWxlIT09InVuZGVmaW5lZCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT0iZnVuY3Rpb24iJiZk
ZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09InVuZGVmaW5lZCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PSJ1bmRlZmluZWQiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09InVuZGVmaW5lZCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLkV4Y2VsSlMgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFl
W2ldKXt2YXIgYz0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK2krIiciKTt0aHJvdyBhLmNvZGU9Ik1PRFVMRV9OT1RfRk9VTkQiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBv
cnRzfWZvcih2YXIgdT0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5
cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5
LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQ
cm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBf
Y2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFi
bGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAo
c3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIGZzID0gcmVxdWlyZSgnZnMnKTsKCnZhciBmYXN0Q3N2ID0gcmVxdWlyZSgnZmFzdC1jc3YnKTsKCnZhciBjdXN0b21QYXJzZUZvcm1hdCA9IHJlcXVpcmUoJ2RheWpzL3BsdWdpbi9jdXN0b21QYXJzZUZvcm1hdCcpOwoKdmFyIHV0YyA9IHJlcXVpcmUoJ2RheWpzL3BsdWdpbi91dGMnKTsKCnZhciBkYXlqcyA9IHJlcXVpcmUoJ2RheWpzJykuZXh0ZW5kKGN1c3RvbVBhcnNlRm9y
bWF0KS5leHRlbmQodXRjKTsKCnZhciBTdHJlYW1CdWYgPSByZXF1aXJlKCcuLi91dGlscy9zdHJlYW0tYnVmJyk7Cgp2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpLAogICAgZXhpc3RzID0gX3JlcXVpcmUuZnMuZXhpc3RzOwovKiBlc2xpbnQtZGlzYWJsZSBxdW90ZS1wcm9wcyAqLwoKCnZhciBTcGVjaWFsVmFsdWVzID0gewogIHRydWU6IHRydWUsCiAgZmFsc2U6IGZhbHNlLAogICcjTi9BJzogewogICAgZXJyb3I6ICcjTi9BJwogIH0sCiAgJyNSRUYhJzogewogICAgZXJyb3I6ICcjUkVGIScKICB9
LAogICcjTkFNRT8nOiB7CiAgICBlcnJvcjogJyNOQU1FPycKICB9LAogICcjRElWLzAhJzogewogICAgZXJyb3I6ICcjRElWLzAhJwogIH0sCiAgJyNOVUxMISc6IHsKICAgIGVycm9yOiAnI05VTEwhJwogIH0sCiAgJyNWQUxVRSEnOiB7CiAgICBlcnJvcjogJyNWQUxVRSEnCiAgfSwKICAnI05VTSEnOiB7CiAgICBlcnJvcjogJyNOVU0hJwogIH0KfTsKLyogZXNsaW50LWVuc2FibGUgcXVvdGUtcHJvcHMgKi8KCnZhciBDU1YgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIENTVih3b3JrYm9vaykgewog
ICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENTVik7CgogICAgdGhpcy53b3JrYm9vayA9IHdvcmtib29rOwogICAgdGhpcy53b3Jrc2hlZXQgPSBudWxsOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENTViwgW3sKICAgIGtleTogInJlYWRGaWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVhZEZpbGUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZmlsZW5hbWUsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgc3RyZWFtLCB3
b3Jrc2hlZXQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBleGlzdHMoZmlsZW5hbWUpOwoKICAgICAg
ICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBpZiAoX2NvbnRleHQuc2VudCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGaWxlIG5vdCBmb3VuZDogIi5jb25jYXQoZmlsZW5hbWUpKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgc3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlbmFtZSk7CiAgICAgICAgICAgICAgICBf
Y29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWQoc3RyZWFtLCBvcHRpb25zKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgd29ya3NoZWV0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHN0cmVhbS5jbG9zZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgd29ya3NoZWV0KTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJu
IF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiByZWFkRmlsZShfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF9yZWFkRmlsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVhZEZpbGU7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJyZWFkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKHN0cmVhbSwgb3B0aW9ucykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoK
ICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIHdvcmtzaGVldCA9IF90aGlzLndvcmtib29rLmFkZFdvcmtzaGVldChvcHRpb25zLnNoZWV0TmFtZSk7CgogICAgICAgIHZhciBkYXRlRm9ybWF0cyA9IG9wdGlvbnMuZGF0ZUZvcm1hdHMgfHwgWydZWVlZLU1NLUREW1RdSEg6bW06c3NaJywgJ1lZWVktTU0tRERbVF1ISDptbTpzcycsICdNTS1ERC1ZWVlZJywgJ1lZWVktTU0tREQnXTsKCiAgICAgICAgdmFy
IG1hcCA9IG9wdGlvbnMubWFwIHx8IGZ1bmN0aW9uIChkYXR1bSkgewogICAgICAgICAgaWYgKGRhdHVtID09PSAnJykgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgZGF0dW1OdW1iZXIgPSBOdW1iZXIoZGF0dW0pOwoKICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKGRhdHVtTnVtYmVyKSAmJiBkYXR1bU51bWJlciAhPT0gSW5maW5pdHkpIHsKICAgICAgICAgICAgcmV0dXJuIGRhdHVtTnVtYmVyOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBkdCA9IGRhdGVGb3JtYXRz
LnJlZHVjZShmdW5jdGlvbiAobWF0Y2hpbmdEYXRlLCBjdXJyZW50RGF0ZUZvcm1hdCkgewogICAgICAgICAgICBpZiAobWF0Y2hpbmdEYXRlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoaW5nRGF0ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGRheWpzT2JqID0gZGF5anMoZGF0dW0sIGN1cnJlbnREYXRlRm9ybWF0LCB0cnVlKTsKCiAgICAgICAgICAgIGlmIChkYXlqc09iai5pc1ZhbGlkKCkpIHsKICAgICAgICAgICAgICByZXR1cm4gZGF5anNPYmo7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJl
dHVybiBudWxsOwogICAgICAgICAgfSwgbnVsbCk7CgogICAgICAgICAgaWYgKGR0KSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShkdC52YWx1ZU9mKCkpOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBzcGVjaWFsID0gU3BlY2lhbFZhbHVlc1tkYXR1bV07CgogICAgICAgICAgaWYgKHNwZWNpYWwgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICByZXR1cm4gc3BlY2lhbDsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZGF0dW07CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGNzdlN0cmVhbSA9IGZhc3RD
c3YucGFyc2Uob3B0aW9ucy5wYXJzZXJPcHRpb25zKS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICB3b3Jrc2hlZXQuYWRkUm93KGRhdGEubWFwKG1hcCkpOwogICAgICAgIH0pLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjc3ZTdHJlYW0uZW1pdCgnd29ya3NoZWV0Jywgd29ya3NoZWV0KTsKICAgICAgICB9KTsKICAgICAgICBjc3ZTdHJlYW0ub24oJ3dvcmtzaGVldCcsIHJlc29sdmUpLm9uKCdlcnJvcicsIHJlamVjdCk7CiAgICAgICAgc3RyZWFtLnBpcGUoY3N2U3RyZWFtKTsKICAg
ICAgfSk7CiAgICB9CiAgICAvKioNCiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDQuMC4gWW91IHNob3VsZCB1c2UgYENTViNyZWFkYCBpbnN0ZWFkLiBQbGVhc2UgZm9sbG93IHVwZ3JhZGUgaW5zdHJ1Y3Rpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9leGNlbGpzL2V4Y2VsanMvYmxvYi9tYXN0ZXIvVVBHUkFERS00LjAubWQNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY3JlYXRlSW5wdXRTdHJlYW0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUlucHV0U3RyZWFtKCkgewogICAgICB0aHJvdyBuZXcgRXJy
b3IoJ2BDU1YjY3JlYXRlSW5wdXRTdHJlYW1gIGlzIGRlcHJlY2F0ZWQuIFlvdSBzaG91bGQgdXNlIGBDU1YjcmVhZGAgaW5zdGVhZC4gVGhpcyBtZXRob2Qgd2lsbCBiZSByZW1vdmVkIGluIHZlcnNpb24gNS4wLiBQbGVhc2UgZm9sbG93IHVwZ3JhZGUgaW5zdHJ1Y3Rpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9leGNlbGpzL2V4Y2VsanMvYmxvYi9tYXN0ZXIvVVBHUkFERS00LjAubWQnKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ3cml0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGUoc3RyZWFtLCBvcHRpb25zKSB7CiAg
ICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gY29uc3QgZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nIHx8ICd1dGY4JzsKICAgICAgICAvLyBjb25zdCBzZXBhcmF0b3IgPSBvcHRpb25zLnNlcGFyYXRvciB8fCAnLCc7CiAgICAgICAgLy8gY29uc3QgcXVvdGVDaGFyID0gb3B0aW9ucy5xdW90ZUNoYXIgfHwgJ1wnJzsKCiAgICAgICAgdmFyIHdvcmtzaGVldCA9IF90aGlz
Mi53b3JrYm9vay5nZXRXb3Jrc2hlZXQob3B0aW9ucy5zaGVldE5hbWUgfHwgb3B0aW9ucy5zaGVldElkKTsKCiAgICAgICAgdmFyIGNzdlN0cmVhbSA9IGZhc3RDc3YuZm9ybWF0KG9wdGlvbnMuZm9ybWF0dGVyT3B0aW9ucyk7CiAgICAgICAgc3RyZWFtLm9uKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgfSk7CiAgICAgICAgY3N2U3RyZWFtLm9uKCdlcnJvcicsIHJlamVjdCk7CiAgICAgICAgY3N2U3RyZWFtLnBpcGUoc3RyZWFtKTsKICAgICAgICB2YXIgX29wdGlvbnMgPSBv
cHRpb25zLAogICAgICAgICAgICBkYXRlRm9ybWF0ID0gX29wdGlvbnMuZGF0ZUZvcm1hdCwKICAgICAgICAgICAgZGF0ZVVUQyA9IF9vcHRpb25zLmRhdGVVVEM7CgogICAgICAgIHZhciBtYXAgPSBvcHRpb25zLm1hcCB8fCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICBpZiAodmFsdWUudGV4dCB8fCB2YWx1ZS5oeXBlcmxpbmspIHsKICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuaHlwZXJsaW5rIHx8IHZhbHVlLnRleHQgfHwgJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAg
ICAgIGlmICh2YWx1ZS5mb3JtdWxhIHx8IHZhbHVlLnJlc3VsdCkgewogICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5yZXN1bHQgfHwgJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHsKICAgICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVVVEMgPyBkYXlqcy51dGModmFsdWUpLmZvcm1hdChkYXRlRm9ybWF0KSA6IGRheWpzKHZhbHVlKS5mb3JtYXQoZGF0ZUZvcm1hdCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAg
ICAgICByZXR1cm4gZGF0ZVVUQyA/IGRheWpzLnV0Yyh2YWx1ZSkuZm9ybWF0KCkgOiBkYXlqcyh2YWx1ZSkuZm9ybWF0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh2YWx1ZS5lcnJvcikgewogICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5lcnJvcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1
cm4gdmFsdWU7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGluY2x1ZGVFbXB0eVJvd3MgPSBvcHRpb25zLmluY2x1ZGVFbXB0eVJvd3MgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLmluY2x1ZGVFbXB0eVJvd3M7CiAgICAgICAgdmFyIGxhc3RSb3cgPSAxOwoKICAgICAgICBpZiAod29ya3NoZWV0KSB7CiAgICAgICAgICB3b3Jrc2hlZXQuZWFjaFJvdyhmdW5jdGlvbiAocm93LCByb3dOdW1iZXIpIHsKICAgICAgICAgICAgaWYgKGluY2x1ZGVFbXB0eVJvd3MpIHsKICAgICAgICAgICAgICB3aGlsZSAobGFzdFJvdysrIDwgcm93
TnVtYmVyIC0gMSkgewogICAgICAgICAgICAgICAgY3N2U3RyZWFtLndyaXRlKFtdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSByb3cudmFsdWVzOwogICAgICAgICAgICB2YWx1ZXMuc2hpZnQoKTsKICAgICAgICAgICAgY3N2U3RyZWFtLndyaXRlKHZhbHVlcy5tYXAobWFwKSk7CiAgICAgICAgICAgIGxhc3RSb3cgPSByb3dOdW1iZXI7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGNzdlN0cmVhbS5lbmQoKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewog
ICAga2V5OiAid3JpdGVGaWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZUZpbGUoZmlsZW5hbWUsIG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgIHZhciBzdHJlYW1PcHRpb25zID0gewogICAgICAgIGVuY29kaW5nOiBvcHRpb25zLmVuY29kaW5nIHx8ICd1dGY4JwogICAgICB9OwogICAgICB2YXIgc3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZmlsZW5hbWUsIHN0cmVhbU9wdGlvbnMpOwogICAgICByZXR1cm4gdGhpcy53cml0ZShzdHJlYW0sIG9wdGlvbnMpOwogICAgfQog
IH0sIHsKICAgIGtleTogIndyaXRlQnVmZmVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfd3JpdGVCdWZmZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKG9wdGlvbnMpIHsKICAgICAgICB2YXIgc3RyZWFtOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9j
b250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdHJlYW0gPSBuZXcgU3RyZWFtQnVmKCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53cml0ZShzdHJlYW0sIG9wdGlvbnMpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgc3RyZWFtLnJlYWQoKSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAg
ICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHdyaXRlQnVmZmVyKF94MykgewogICAgICAgIHJldHVybiBfd3JpdGVCdWZmZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHdyaXRlQnVmZmVyOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gQ1NWOwp9KCk7Cgptb2R1bGUuZXhwb3J0
cyA9IENTVjsKCn0seyIuLi91dGlscy9zdHJlYW0tYnVmIjoyMywiLi4vdXRpbHMvdXRpbHMiOjI2LCJkYXlqcyI6MjI3LCJkYXlqcy9wbHVnaW4vY3VzdG9tUGFyc2VGb3JtYXQiOjIyOCwiZGF5anMvcGx1Z2luL3V0YyI6MjI5LCJmYXN0LWNzdiI6MjYwLCJmcyI6MjE1fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsg
dGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9y
LndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9Cgp2
YXIgY29sQ2FjaGUgPSByZXF1aXJlKCcuLi91dGlscy9jb2wtY2FjaGUnKTsKCnZhciBBbmNob3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFuY2hvcih3b3Jrc2hlZXQsIGFkZHJlc3MpIHsKICAgIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFuY2hvcik7CgogICAgaWYgKCFhZGRyZXNzKSB7CiAgICAgIHRoaXMubmF0aXZlQ29sID0gMDsKICAg
ICAgdGhpcy5uYXRpdmVDb2xPZmYgPSAwOwogICAgICB0aGlzLm5hdGl2ZVJvdyA9IDA7CiAgICAgIHRoaXMubmF0aXZlUm93T2ZmID0gMDsKICAgIH0gZWxzZSBpZiAodHlwZW9mIGFkZHJlc3MgPT09ICdzdHJpbmcnKSB7CiAgICAgIHZhciBkZWNvZGVkID0gY29sQ2FjaGUuZGVjb2RlQWRkcmVzcyhhZGRyZXNzKTsKICAgICAgdGhpcy5uYXRpdmVDb2wgPSBkZWNvZGVkLmNvbCArIG9mZnNldDsKICAgICAgdGhpcy5uYXRpdmVDb2xPZmYgPSAwOwogICAgICB0aGlzLm5hdGl2ZVJvdyA9IGRlY29kZWQucm93ICsgb2Zmc2V0Owog
ICAgICB0aGlzLm5hdGl2ZVJvd09mZiA9IDA7CiAgICB9IGVsc2UgaWYgKGFkZHJlc3MubmF0aXZlQ29sICE9PSB1bmRlZmluZWQpIHsKICAgICAgdGhpcy5uYXRpdmVDb2wgPSBhZGRyZXNzLm5hdGl2ZUNvbCB8fCAwOwogICAgICB0aGlzLm5hdGl2ZUNvbE9mZiA9IGFkZHJlc3MubmF0aXZlQ29sT2ZmIHx8IDA7CiAgICAgIHRoaXMubmF0aXZlUm93ID0gYWRkcmVzcy5uYXRpdmVSb3cgfHwgMDsKICAgICAgdGhpcy5uYXRpdmVSb3dPZmYgPSBhZGRyZXNzLm5hdGl2ZVJvd09mZiB8fCAwOwogICAgfSBlbHNlIGlmIChhZGRyZXNz
LmNvbCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHRoaXMuY29sID0gYWRkcmVzcy5jb2wgKyBvZmZzZXQ7CiAgICAgIHRoaXMucm93ID0gYWRkcmVzcy5yb3cgKyBvZmZzZXQ7CiAgICB9IGVsc2UgewogICAgICB0aGlzLm5hdGl2ZUNvbCA9IDA7CiAgICAgIHRoaXMubmF0aXZlQ29sT2ZmID0gMDsKICAgICAgdGhpcy5uYXRpdmVSb3cgPSAwOwogICAgICB0aGlzLm5hdGl2ZVJvd09mZiA9IDA7CiAgICB9CgogICAgdGhpcy53b3Jrc2hlZXQgPSB3b3Jrc2hlZXQ7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQW5jaG9yLCBbewogICAga2V5
OiAiY29sIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5uYXRpdmVDb2wgKyBNYXRoLm1pbih0aGlzLmNvbFdpZHRoIC0gMSwgdGhpcy5uYXRpdmVDb2xPZmYpIC8gdGhpcy5jb2xXaWR0aDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2KSB7CiAgICAgIHRoaXMubmF0aXZlQ29sID0gTWF0aC5mbG9vcih2KTsKICAgICAgdGhpcy5uYXRpdmVDb2xPZmYgPSBNYXRoLmZsb29yKCh2IC0gdGhpcy5uYXRpdmVDb2wpICogdGhpcy5jb2xXaWR0aCk7CiAgICB9CiAgfSwgewogICAga2V5OiAi
cm93IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5uYXRpdmVSb3cgKyBNYXRoLm1pbih0aGlzLnJvd0hlaWdodCAtIDEsIHRoaXMubmF0aXZlUm93T2ZmKSAvIHRoaXMucm93SGVpZ2h0OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHYpIHsKICAgICAgdGhpcy5uYXRpdmVSb3cgPSBNYXRoLmZsb29yKHYpOwogICAgICB0aGlzLm5hdGl2ZVJvd09mZiA9IE1hdGguZmxvb3IoKHYgLSB0aGlzLm5hdGl2ZVJvdykgKiB0aGlzLnJvd0hlaWdodCk7CiAgICB9CiAgfSwgewogICAga2V5OiAi
Y29sV2lkdGgiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLndvcmtzaGVldCAmJiB0aGlzLndvcmtzaGVldC5nZXRDb2x1bW4odGhpcy5uYXRpdmVDb2wgKyAxKSAmJiB0aGlzLndvcmtzaGVldC5nZXRDb2x1bW4odGhpcy5uYXRpdmVDb2wgKyAxKS5pc0N1c3RvbVdpZHRoID8gTWF0aC5mbG9vcih0aGlzLndvcmtzaGVldC5nZXRDb2x1bW4odGhpcy5uYXRpdmVDb2wgKyAxKS53aWR0aCAqIDEwMDAwKSA6IDY0MDAwMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyb3dIZWlnaHQiLAogICAgZ2V0
OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLndvcmtzaGVldCAmJiB0aGlzLndvcmtzaGVldC5nZXRSb3codGhpcy5uYXRpdmVSb3cgKyAxKSAmJiB0aGlzLndvcmtzaGVldC5nZXRSb3codGhpcy5uYXRpdmVSb3cgKyAxKS5oZWlnaHQgPyBNYXRoLmZsb29yKHRoaXMud29ya3NoZWV0LmdldFJvdyh0aGlzLm5hdGl2ZVJvdyArIDEpLmhlaWdodCAqIDEwMDAwKSA6IDE4MDAwMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtb2RlbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHsKICAg
ICAgICBuYXRpdmVDb2w6IHRoaXMubmF0aXZlQ29sLAogICAgICAgIG5hdGl2ZUNvbE9mZjogdGhpcy5uYXRpdmVDb2xPZmYsCiAgICAgICAgbmF0aXZlUm93OiB0aGlzLm5hdGl2ZVJvdywKICAgICAgICBuYXRpdmVSb3dPZmY6IHRoaXMubmF0aXZlUm93T2ZmCiAgICAgIH07CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5uYXRpdmVDb2wgPSB2YWx1ZS5uYXRpdmVDb2w7CiAgICAgIHRoaXMubmF0aXZlQ29sT2ZmID0gdmFsdWUubmF0aXZlQ29sT2ZmOwogICAgICB0aGlzLm5hdGl2ZVJv
dyA9IHZhbHVlLm5hdGl2ZVJvdzsKICAgICAgdGhpcy5uYXRpdmVSb3dPZmYgPSB2YWx1ZS5uYXRpdmVSb3dPZmY7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJhc0luc3RhbmNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhc0luc3RhbmNlKG1vZGVsKSB7CiAgICAgIHJldHVybiBtb2RlbCBpbnN0YW5jZW9mIEFuY2hvciB8fCBtb2RlbCA9PSBudWxsID8gbW9kZWwgOiBuZXcgQW5jaG9yKG1vZGVsKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBBbmNob3I7Cn0oKTsKCm1vZHVsZS5leHBvcnRzID0gQW5jaG9yOwoKfSx7Ii4uL3V0
aWxzL2NvbC1jYWNoZSI6MTl9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVu
Z3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQ
cm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovCnZhciBjb2xDYWNoZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbC1jYWNoZScpOwoKdmFyIF8gPSByZXF1aXJlKCcuLi91dGlscy91bmRlci1kYXNoJyk7Cgp2YXIgRW51
bXMgPSByZXF1aXJlKCcuL2VudW1zJyk7Cgp2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlscy9zaGFyZWQtZm9ybXVsYScpLAogICAgc2xpZGVGb3JtdWxhID0gX3JlcXVpcmUuc2xpZGVGb3JtdWxhOwoKdmFyIE5vdGUgPSByZXF1aXJlKCcuL25vdGUnKTsgLy8gQ2VsbCByZXF1aXJlbWVudHMKLy8gIE9wZXJhdGUgaW5zaWRlIGEgd29ya3NoZWV0Ci8vICBTdG9yZSBhbmQgcmV0cmlldmUgYSB2YWx1ZSB3aXRoIGEgcmFuZ2Ugb2YgdHlwZXM6IHRleHQsIG51bWJlciwgZGF0ZSwgaHlwZXJsaW5rLCByZWZlcmVuY2UsIGZv
cm11bGEsIGV0Yy4KLy8gIE1hbmFnZS91c2UgYW5kIG1hbmlwdWxhdGUgY2VsbCBmb3JtYXQgZWl0aGVyIGFzIGxvY2FsIHRvIGNlbGwgb3IgaW5oZXJpdGVkIGZyb20gY29sdW1uIG9yIHJvdy4KCgp2YXIgQ2VsbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQ2VsbChyb3csIGNvbHVtbiwgYWRkcmVzcykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENlbGwpOwoKICAgIGlmICghcm93IHx8ICFjb2x1bW4pIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIENlbGwgbmVlZHMgYSBSb3cnKTsKICAg
IH0KCiAgICB0aGlzLl9yb3cgPSByb3c7CiAgICB0aGlzLl9jb2x1bW4gPSBjb2x1bW47CiAgICBjb2xDYWNoZS52YWxpZGF0ZUFkZHJlc3MoYWRkcmVzcyk7CiAgICB0aGlzLl9hZGRyZXNzID0gYWRkcmVzczsgLy8gVE9ETzogbGF6eSBldmFsdWF0aW9uIG9mIHRoaXMuX3ZhbHVlCgogICAgdGhpcy5fdmFsdWUgPSBWYWx1ZS5jcmVhdGUoQ2VsbC5UeXBlcy5OdWxsLCB0aGlzKTsKICAgIHRoaXMuc3R5bGUgPSB0aGlzLl9tZXJnZVN0eWxlKHJvdy5zdHlsZSwgY29sdW1uLnN0eWxlLCB7fSk7CiAgICB0aGlzLl9tZXJnZUNvdW50
ID0gMDsKICB9CgogIF9jcmVhdGVDbGFzcyhDZWxsLCBbewogICAga2V5OiAiZGVzdHJveSIsCiAgICAvLyBoZWxwIEdDIGJ5IHJlbW92aW5nIGN5Y2xpYyAoYW5kIG90aGVyKSByZWZlcmVuY2VzCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgZGVsZXRlIHRoaXMuc3R5bGU7CiAgICAgIGRlbGV0ZSB0aGlzLl92YWx1ZTsKICAgICAgZGVsZXRlIHRoaXMuX3JvdzsKICAgICAgZGVsZXRlIHRoaXMuX2NvbHVtbjsKICAgICAgZGVsZXRlIHRoaXMuX2FkZHJlc3M7CiAgICB9IC8vID09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIFN0eWxlcyBzdHVmZgoKICB9LCB7CiAgICBrZXk6ICJfbWVyZ2VTdHlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX21lcmdlU3R5bGUocm93U3R5bGUsIGNvbFN0eWxlLCBzdHlsZSkgewogICAgICB2YXIgbnVtRm10ID0gcm93U3R5bGUgJiYgcm93U3R5bGUubnVtRm10IHx8IGNvbFN0eWxlICYmIGNvbFN0eWxlLm51bUZtdDsKICAgICAgaWYgKG51bUZtdCkgc3R5bGUubnVtRm10ID0gbnVtRm10OwogICAgICB2YXIg
Zm9udCA9IHJvd1N0eWxlICYmIHJvd1N0eWxlLmZvbnQgfHwgY29sU3R5bGUgJiYgY29sU3R5bGUuZm9udDsKICAgICAgaWYgKGZvbnQpIHN0eWxlLmZvbnQgPSBmb250OwogICAgICB2YXIgYWxpZ25tZW50ID0gcm93U3R5bGUgJiYgcm93U3R5bGUuYWxpZ25tZW50IHx8IGNvbFN0eWxlICYmIGNvbFN0eWxlLmFsaWdubWVudDsKICAgICAgaWYgKGFsaWdubWVudCkgc3R5bGUuYWxpZ25tZW50ID0gYWxpZ25tZW50OwogICAgICB2YXIgYm9yZGVyID0gcm93U3R5bGUgJiYgcm93U3R5bGUuYm9yZGVyIHx8IGNvbFN0eWxlICYmIGNv
bFN0eWxlLmJvcmRlcjsKICAgICAgaWYgKGJvcmRlcikgc3R5bGUuYm9yZGVyID0gYm9yZGVyOwogICAgICB2YXIgZmlsbCA9IHJvd1N0eWxlICYmIHJvd1N0eWxlLmZpbGwgfHwgY29sU3R5bGUgJiYgY29sU3R5bGUuZmlsbDsKICAgICAgaWYgKGZpbGwpIHN0eWxlLmZpbGwgPSBmaWxsOwogICAgICB2YXIgcHJvdGVjdGlvbiA9IHJvd1N0eWxlICYmIHJvd1N0eWxlLnByb3RlY3Rpb24gfHwgY29sU3R5bGUgJiYgY29sU3R5bGUucHJvdGVjdGlvbjsKICAgICAgaWYgKHByb3RlY3Rpb24pIHN0eWxlLnByb3RlY3Rpb24gPSBwcm90
ZWN0aW9uOwogICAgICByZXR1cm4gc3R5bGU7CiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIHJldHVybiB0aGUgYWRkcmVzcyBmb3IgdGhpcyBjZWxsCgogIH0sIHsKICAgIGtleTogInRvQ3N2U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NzdlN0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLnRvQ3N2U3RyaW5nKCk7CiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIE1lcmdlIHN0dWZmCgogIH0sIHsKICAgIGtleTogImFkZE1lcmdlUmVmIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRNZXJnZVJlZigpIHsKICAgICAgdGhpcy5fbWVyZ2VDb3VudCsrOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbGVhc2VNZXJnZVJlZiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVsZWFzZU1lcmdlUmVmKCkgewogICAgICB0aGlzLl9tZXJnZUNvdW50LS07CiAgICB9CiAgfSwgewogICAga2V5OiAibWVyZ2UiLAogICAgdmFs
dWU6IGZ1bmN0aW9uIG1lcmdlKG1hc3RlciwgaWdub3JlU3R5bGUpIHsKICAgICAgdGhpcy5fdmFsdWUucmVsZWFzZSgpOwoKICAgICAgdGhpcy5fdmFsdWUgPSBWYWx1ZS5jcmVhdGUoQ2VsbC5UeXBlcy5NZXJnZSwgdGhpcywgbWFzdGVyKTsKCiAgICAgIGlmICghaWdub3JlU3R5bGUpIHsKICAgICAgICB0aGlzLnN0eWxlID0gbWFzdGVyLnN0eWxlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidW5tZXJnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5tZXJnZSgpIHsKICAgICAgaWYgKHRoaXMudHlwZSA9PT0gQ2Vs
bC5UeXBlcy5NZXJnZSkgewogICAgICAgIHRoaXMuX3ZhbHVlLnJlbGVhc2UoKTsKCiAgICAgICAgdGhpcy5fdmFsdWUgPSBWYWx1ZS5jcmVhdGUoQ2VsbC5UeXBlcy5OdWxsLCB0aGlzKTsKICAgICAgICB0aGlzLnN0eWxlID0gdGhpcy5fbWVyZ2VTdHlsZSh0aGlzLl9yb3cuc3R5bGUsIHRoaXMuX2NvbHVtbi5zdHlsZSwge30pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNNZXJnZWRUbyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNNZXJnZWRUbyhtYXN0ZXIpIHsKICAgICAgaWYgKHRoaXMuX3ZhbHVlLnR5cGUg
IT09IENlbGwuVHlwZXMuTWVyZ2UpIHJldHVybiBmYWxzZTsKICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmlzTWVyZ2VkVG8obWFzdGVyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgIHJldHVybiB0aGlzLnRleHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3VwZ3JhZGVUb0h5cGVybGluayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZ3JhZGVUb0h5cGVybGluayhoeXBlcmxpbmspIHsKICAgICAgLy8gaWYgdGhpcyBjZWxsIGlzIGEgc3Ry
aW5nLCB0dXJuIGl0IGludG8gYSBIeXBlcmxpbmsKICAgICAgaWYgKHRoaXMudHlwZSA9PT0gQ2VsbC5UeXBlcy5TdHJpbmcpIHsKICAgICAgICB0aGlzLl92YWx1ZSA9IFZhbHVlLmNyZWF0ZShDZWxsLlR5cGVzLkh5cGVybGluaywgdGhpcywgewogICAgICAgICAgdGV4dDogdGhpcy5fdmFsdWUudmFsdWUsCiAgICAgICAgICBoeXBlcmxpbms6IGh5cGVybGluawogICAgICAgIH0pOwogICAgICB9CiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT0KICAgIC8vIEZvcm11bGEgc3R1ZmYKCiAgfSwgewogICAga2V5OiAiYWRkTmFtZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTmFtZShuYW1lKSB7CiAgICAgIHRoaXMud29ya2Jvb2suZGVmaW5lZE5hbWVzLmFkZEV4KHRoaXMuZnVsbEFkZHJlc3MsIG5hbWUpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbW92ZU5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZU5hbWUobmFtZSkgewogICAgICB0aGlzLndvcmtib29rLmRlZmluZWROYW1lcy5yZW1vdmVFeCh0aGlzLmZ1bGxBZGRyZXNzLCBuYW1lKTsK
ICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVBbGxOYW1lcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQWxsTmFtZXMoKSB7CiAgICAgIHRoaXMud29ya2Jvb2suZGVmaW5lZE5hbWVzLnJlbW92ZUFsbE5hbWVzKHRoaXMuZnVsbEFkZHJlc3MpOwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBEYXRhIFZhbGlkYXRpb24gc3R1ZmYKCiAgfSwgewogICAga2V5OiAid29ya3NoZWV0IiwKICAgIGdldDogZnVu
Y3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcm93LndvcmtzaGVldDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ3b3JrYm9vayIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3Jvdy53b3Jrc2hlZXQud29ya2Jvb2s7CiAgICB9CiAgfSwgewogICAga2V5OiAibnVtRm10IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5zdHlsZS5udW1GbXQ7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5zdHlsZS5udW1G
bXQgPSB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb250IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5zdHlsZS5mb250OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuc3R5bGUuZm9udCA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogImFsaWdubWVudCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3R5bGUuYWxpZ25tZW50OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7
CiAgICAgIHRoaXMuc3R5bGUuYWxpZ25tZW50ID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiYm9yZGVyIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5zdHlsZS5ib3JkZXI7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5zdHlsZS5ib3JkZXIgPSB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWxsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5zdHlsZS5maWxsOwogICAgfSwKICAgIHNldDog
ZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuc3R5bGUuZmlsbCA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInByb3RlY3Rpb24iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0eWxlLnByb3RlY3Rpb247CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5zdHlsZS5wcm90ZWN0aW9uID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkcmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRo
aXMuX2FkZHJlc3M7CiAgICB9CiAgfSwgewogICAga2V5OiAicm93IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcm93Lm51bWJlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb2wiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jb2x1bW4ubnVtYmVyOwogICAgfQogIH0sIHsKICAgIGtleTogIiRjb2wkcm93IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gIiQiLmNvbmNhdCh0aGlzLl9jb2x1bW4ubGV0dGVyLCAiJCIpLmNv
bmNhdCh0aGlzLnJvdyk7CiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIFZhbHVlIHN0dWZmCgogIH0sIHsKICAgIGtleTogInR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS50eXBlOwogICAgfQogIH0sIHsKICAgIGtleTogImVmZmVjdGl2ZVR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5lZmZlY3RpdmVU
eXBlOwogICAgfQogIH0sIHsKICAgIGtleTogImlzTWVyZ2VkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fbWVyZ2VDb3VudCA+IDAgfHwgdGhpcy50eXBlID09PSBDZWxsLlR5cGVzLk1lcmdlOwogICAgfQogIH0sIHsKICAgIGtleTogIm1hc3RlciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKHRoaXMudHlwZSA9PT0gQ2VsbC5UeXBlcy5NZXJnZSkgewogICAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5tYXN0ZXI7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOyAv
LyBhbiB1bm1lcmdlZCBjZWxsIGlzIGl0cyBvd24gbWFzdGVyCiAgICB9CiAgfSwgewogICAga2V5OiAiaXNIeXBlcmxpbmsiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS50eXBlID09PSBDZWxsLlR5cGVzLkh5cGVybGluazsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoeXBlcmxpbmsiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5oeXBlcmxpbms7CiAgICB9IC8vIHJldHVybiB0aGUgdmFsdWUKCiAgfSwgewogICAga2V5OiAidmFs
dWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS52YWx1ZTsKICAgIH0gLy8gc2V0IHRoZSB2YWx1ZSAtIGNhbiBiZSBudW1iZXIsIHN0cmluZyBvciByYXcKICAgICwKICAgIHNldDogZnVuY3Rpb24gc2V0KHYpIHsKICAgICAgLy8gc3BlY2lhbCBjYXNlIC0gbWVyZ2UgY2VsbHMgc2V0IHRoZWlyIG1hc3RlcidzIHZhbHVlCiAgICAgIGlmICh0aGlzLnR5cGUgPT09IENlbGwuVHlwZXMuTWVyZ2UpIHsKICAgICAgICB0aGlzLl92YWx1ZS5tYXN0ZXIudmFsdWUgPSB2OwogICAgICAg
IHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5fdmFsdWUucmVsZWFzZSgpOyAvLyBhc3NpZ24gdmFsdWUKCgogICAgICB0aGlzLl92YWx1ZSA9IFZhbHVlLmNyZWF0ZShWYWx1ZS5nZXRUeXBlKHYpLCB0aGlzLCB2KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJub3RlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fY29tbWVudCAmJiB0aGlzLl9jb21tZW50Lm5vdGU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQobm90ZSkgewogICAgICB0aGlzLl9jb21tZW50ID0gbmV3IE5vdGUo
bm90ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGV4dCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLnRvU3RyaW5nKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaHRtbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIF8uZXNjYXBlSHRtbCh0aGlzLnRleHQpOwogICAgfQogIH0sIHsKICAgIGtleTogImZvcm11bGEiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5mb3JtdWxhOwogICAgfQogIH0sIHsK
ICAgIGtleTogInJlc3VsdCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLnJlc3VsdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb3JtdWxhVHlwZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmZvcm11bGFUeXBlOwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBOYW1lIHN0dWZmCgogIH0sIHsKICAgIGtleTogImZ1
bGxBZGRyZXNzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgd29ya3NoZWV0ID0gdGhpcy5fcm93LndvcmtzaGVldDsKICAgICAgcmV0dXJuIHsKICAgICAgICBzaGVldE5hbWU6IHdvcmtzaGVldC5uYW1lLAogICAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcywKICAgICAgICByb3c6IHRoaXMucm93LAogICAgICAgIGNvbDogdGhpcy5jb2wKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJuYW1lIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5uYW1lc1swXTsK
ICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm5hbWVzID0gW3ZhbHVlXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJuYW1lcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMud29ya2Jvb2suZGVmaW5lZE5hbWVzLmdldE5hbWVzRXgodGhpcy5mdWxsQWRkcmVzcyk7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBkZWZpbmVkTmFtZXMgPSB0aGlzLndvcmtib29rLmRlZmlu
ZWROYW1lczsKICAgICAgZGVmaW5lZE5hbWVzLnJlbW92ZUFsbE5hbWVzKHRoaXMuZnVsbEFkZHJlc3MpOwogICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgZGVmaW5lZE5hbWVzLmFkZEV4KF90aGlzLmZ1bGxBZGRyZXNzLCBuYW1lKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2RhdGFWYWxpZGF0aW9ucyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMud29ya3NoZWV0LmRhdGFWYWxpZGF0aW9uczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJk
YXRhVmFsaWRhdGlvbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2RhdGFWYWxpZGF0aW9ucy5maW5kKHRoaXMuYWRkcmVzcyk7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fZGF0YVZhbGlkYXRpb25zLmFkZCh0aGlzLmFkZHJlc3MsIHZhbHVlKTsKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gTW9kZWwgc3R1ZmYKCiAgfSwgewog
ICAga2V5OiAibW9kZWwiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBtb2RlbCA9IHRoaXMuX3ZhbHVlLm1vZGVsOwogICAgICBtb2RlbC5zdHlsZSA9IHRoaXMuc3R5bGU7CgogICAgICBpZiAodGhpcy5fY29tbWVudCkgewogICAgICAgIG1vZGVsLmNvbW1lbnQgPSB0aGlzLl9jb21tZW50Lm1vZGVsOwogICAgICB9CgogICAgICByZXR1cm4gbW9kZWw7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fdmFsdWUucmVsZWFzZSgpOwoKICAgICAgdGhpcy5fdmFsdWUg
PSBWYWx1ZS5jcmVhdGUodmFsdWUudHlwZSwgdGhpcyk7CiAgICAgIHRoaXMuX3ZhbHVlLm1vZGVsID0gdmFsdWU7CgogICAgICBpZiAodmFsdWUuY29tbWVudCkgewogICAgICAgIHN3aXRjaCAodmFsdWUuY29tbWVudC50eXBlKSB7CiAgICAgICAgICBjYXNlICdub3RlJzoKICAgICAgICAgICAgdGhpcy5fY29tbWVudCA9IE5vdGUuZnJvbU1vZGVsKHZhbHVlLmNvbW1lbnQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmICh2YWx1ZS5zdHlsZSkgewogICAgICAgIHRoaXMuc3R5bGUgPSB2
YWx1ZS5zdHlsZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnN0eWxlID0ge307CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBDZWxsOwp9KCk7CgpDZWxsLlR5cGVzID0gRW51bXMuVmFsdWVUeXBlOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBJbnRlcm5hbCBWYWx1ZSBUeXBlcwoKdmFyIE51bGxWYWx1ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTnVsbFZhbHVlKGNlbGwp
IHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdWxsVmFsdWUpOwoKICAgIHRoaXMubW9kZWwgPSB7CiAgICAgIGFkZHJlc3M6IGNlbGwuYWRkcmVzcywKICAgICAgdHlwZTogQ2VsbC5UeXBlcy5OdWxsCiAgICB9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKE51bGxWYWx1ZSwgW3sKICAgIGtleTogInRvQ3N2U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NzdlN0cmluZygpIHsKICAgICAgcmV0dXJuICcnOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbGVhc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbGVhc2UoKSB7
fQogIH0sIHsKICAgIGtleTogInRvU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgcmV0dXJuICcnOwogICAgfQogIH0sIHsKICAgIGtleTogInZhbHVlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgey8vIG5vdGhpbmcgdG8gZG8KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0eXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5OdWxsOwogICAg
fQogIH0sIHsKICAgIGtleTogImVmZmVjdGl2ZVR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLk51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkcmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmFkZHJlc3MgPSB2YWx1ZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBOdWxsVmFsdWU7Cn0oKTsKCnZhciBO
dW1iZXJWYWx1ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTnVtYmVyVmFsdWUoY2VsbCwgdmFsdWUpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdW1iZXJWYWx1ZSk7CgogICAgdGhpcy5tb2RlbCA9IHsKICAgICAgYWRkcmVzczogY2VsbC5hZGRyZXNzLAogICAgICB0eXBlOiBDZWxsLlR5cGVzLk51bWJlciwKICAgICAgdmFsdWU6IHZhbHVlCiAgICB9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKE51bWJlclZhbHVlLCBbewogICAga2V5OiAidG9Dc3ZTdHJpbmciLAogICAgdmFsdWU6IGZ1bmN0
aW9uIHRvQ3N2U3RyaW5nKCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC52YWx1ZS50b1N0cmluZygpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbGVhc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbGVhc2UoKSB7fQogIH0sIHsKICAgIGtleTogInRvU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWUudG9TdHJpbmcoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ2YWx1ZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJu
IHRoaXMubW9kZWwudmFsdWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC52YWx1ZSA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLk51bWJlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJlZmZlY3RpdmVUeXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5OdW1iZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRk
cmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmFkZHJlc3MgPSB2YWx1ZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBOdW1iZXJWYWx1ZTsKfSgpOwoKdmFyIFN0cmluZ1ZhbHVlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTdHJpbmdWYWx1ZShjZWxsLCB2YWx1ZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmluZ1ZhbHVl
KTsKCiAgICB0aGlzLm1vZGVsID0gewogICAgICBhZGRyZXNzOiBjZWxsLmFkZHJlc3MsCiAgICAgIHR5cGU6IENlbGwuVHlwZXMuU3RyaW5nLAogICAgICB2YWx1ZTogdmFsdWUKICAgIH07CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3RyaW5nVmFsdWUsIFt7CiAgICBrZXk6ICJ0b0NzdlN0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9Dc3ZTdHJpbmcoKSB7CiAgICAgIHJldHVybiAiXCIiLmNvbmNhdCh0aGlzLm1vZGVsLnZhbHVlLnJlcGxhY2UoLyIvZywgJyIiJyksICJcIiIpOwogICAgfQogIH0sIHsKICAgIGtleTogInJl
bGVhc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbGVhc2UoKSB7fQogIH0sIHsKICAgIGtleTogInRvU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsdWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnZhbHVlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMubW9kZWwudmFsdWUgPSB2YWx1ZTsKICAgIH0KICB9
LCB7CiAgICBrZXk6ICJ0eXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5TdHJpbmc7CiAgICB9CiAgfSwgewogICAga2V5OiAiZWZmZWN0aXZlVHlwZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIENlbGwuVHlwZXMuU3RyaW5nOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZHJlc3MiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmFkZHJlc3M7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFs
dWUpIHsKICAgICAgdGhpcy5tb2RlbC5hZGRyZXNzID0gdmFsdWU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU3RyaW5nVmFsdWU7Cn0oKTsKCnZhciBSaWNoVGV4dFZhbHVlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSaWNoVGV4dFZhbHVlKGNlbGwsIHZhbHVlKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmljaFRleHRWYWx1ZSk7CgogICAgdGhpcy5tb2RlbCA9IHsKICAgICAgYWRkcmVzczogY2VsbC5hZGRyZXNzLAogICAgICB0eXBlOiBDZWxsLlR5cGVzLlN0cmluZywKICAgICAgdmFs
dWU6IHZhbHVlCiAgICB9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKFJpY2hUZXh0VmFsdWUsIFt7CiAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnZhbHVlLnJpY2hUZXh0Lm1hcChmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiB0LnRleHQ7CiAgICAgIH0pLmpvaW4oJycpOwogICAgfQogIH0sIHsKICAgIGtleTogInRvQ3N2U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NzdlN0cmluZygpIHsKICAgICAgcmV0dXJuICJcIiIu
Y29uY2F0KHRoaXMudGV4dC5yZXBsYWNlKC8iL2csICciIicpLCAiXCIiKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWxlYXNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWxlYXNlKCkge30KICB9LCB7CiAgICBrZXk6ICJ2YWx1ZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC52YWx1ZSA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInR5cGUiLAogICAgZ2V0
OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLlJpY2hUZXh0OwogICAgfQogIH0sIHsKICAgIGtleTogImVmZmVjdGl2ZVR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLlJpY2hUZXh0OwogICAgfQogIH0sIHsKICAgIGtleTogImFkZHJlc3MiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmFkZHJlc3M7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC5h
ZGRyZXNzID0gdmFsdWU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUmljaFRleHRWYWx1ZTsKfSgpOwoKdmFyIERhdGVWYWx1ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRGF0ZVZhbHVlKGNlbGwsIHZhbHVlKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZVZhbHVlKTsKCiAgICB0aGlzLm1vZGVsID0gewogICAgICBhZGRyZXNzOiBjZWxsLmFkZHJlc3MsCiAgICAgIHR5cGU6IENlbGwuVHlwZXMuRGF0ZSwKICAgICAgdmFsdWU6IHZhbHVlCiAgICB9OwogIH0KCiAgX2NyZWF0ZUNsYXNz
KERhdGVWYWx1ZSwgW3sKICAgIGtleTogInRvQ3N2U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NzdlN0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWUudG9JU09TdHJpbmcoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWxlYXNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWxlYXNlKCkge30KICB9LCB7CiAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnZhbHVlLnRvU3RyaW5nKCk7CiAgICB9CiAgfSwg
ewogICAga2V5OiAidmFsdWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnZhbHVlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMubW9kZWwudmFsdWUgPSB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0eXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5EYXRlOwogICAgfQogIH0sIHsKICAgIGtleTogImVmZmVjdGl2ZVR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAg
ICAgIHJldHVybiBDZWxsLlR5cGVzLkRhdGU7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkcmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmFkZHJlc3MgPSB2YWx1ZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBEYXRlVmFsdWU7Cn0oKTsKCnZhciBIeXBlcmxpbmtWYWx1ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSHlwZXJsaW5r
VmFsdWUoY2VsbCwgdmFsdWUpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIeXBlcmxpbmtWYWx1ZSk7CgogICAgdGhpcy5tb2RlbCA9IHsKICAgICAgYWRkcmVzczogY2VsbC5hZGRyZXNzLAogICAgICB0eXBlOiBDZWxsLlR5cGVzLkh5cGVybGluaywKICAgICAgdGV4dDogdmFsdWUgPyB2YWx1ZS50ZXh0IDogdW5kZWZpbmVkLAogICAgICBoeXBlcmxpbms6IHZhbHVlID8gdmFsdWUuaHlwZXJsaW5rIDogdW5kZWZpbmVkCiAgICB9OwoKICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS50b29sdGlwKSB7CiAgICAgIHRoaXMubW9k
ZWwudG9vbHRpcCA9IHZhbHVlLnRvb2x0aXA7CiAgICB9CiAgfQoKICBfY3JlYXRlQ2xhc3MoSHlwZXJsaW5rVmFsdWUsIFt7CiAgICBrZXk6ICJ0b0NzdlN0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9Dc3ZTdHJpbmcoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmh5cGVybGluazsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWxlYXNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWxlYXNlKCkge30KICB9LCB7CiAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAg
IHJldHVybiB0aGlzLm1vZGVsLnRleHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsdWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciB2ID0gewogICAgICAgIHRleHQ6IHRoaXMubW9kZWwudGV4dCwKICAgICAgICBoeXBlcmxpbms6IHRoaXMubW9kZWwuaHlwZXJsaW5rCiAgICAgIH07CgogICAgICBpZiAodGhpcy5tb2RlbC50b29sdGlwKSB7CiAgICAgICAgdi50b29sdGlwID0gdGhpcy5tb2RlbC50b29sdGlwOwogICAgICB9CgogICAgICByZXR1cm4gdjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9u
IHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsID0gewogICAgICAgIHRleHQ6IHZhbHVlLnRleHQsCiAgICAgICAgaHlwZXJsaW5rOiB2YWx1ZS5oeXBlcmxpbmsKICAgICAgfTsKCiAgICAgIGlmICh2YWx1ZS50b29sdGlwKSB7CiAgICAgICAgdGhpcy5tb2RlbC50b29sdGlwID0gdmFsdWUudG9vbHRpcDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRleHQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnRleHQ7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQo
dmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC50ZXh0ID0gdmFsdWU7CiAgICB9CiAgICAvKg0KICAgIGdldCB0b29sdGlwKCkgew0KICAgICAgcmV0dXJuIHRoaXMubW9kZWwudG9vbHRpcDsNCiAgICB9DQogICAgICBzZXQgdG9vbHRpcCh2YWx1ZSkgew0KICAgICAgdGhpcy5tb2RlbC50b29sdGlwID0gdmFsdWU7DQogICAgfSAqLwoKICB9LCB7CiAgICBrZXk6ICJoeXBlcmxpbmsiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmh5cGVybGluazsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0
aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmh5cGVybGluayA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLkh5cGVybGluazsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJlZmZlY3RpdmVUeXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5IeXBlcmxpbms7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkcmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgp
IHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmFkZHJlc3MgPSB2YWx1ZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBIeXBlcmxpbmtWYWx1ZTsKfSgpOwoKdmFyIE1lcmdlVmFsdWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE1lcmdlVmFsdWUoY2VsbCwgbWFzdGVyKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVyZ2VWYWx1ZSk7CgogICAgdGhpcy5tb2RlbCA9IHsKICAgICAg
YWRkcmVzczogY2VsbC5hZGRyZXNzLAogICAgICB0eXBlOiBDZWxsLlR5cGVzLk1lcmdlLAogICAgICBtYXN0ZXI6IG1hc3RlciA/IG1hc3Rlci5hZGRyZXNzIDogdW5kZWZpbmVkCiAgICB9OwogICAgdGhpcy5fbWFzdGVyID0gbWFzdGVyOwoKICAgIGlmIChtYXN0ZXIpIHsKICAgICAgbWFzdGVyLmFkZE1lcmdlUmVmKCk7CiAgICB9CiAgfQoKICBfY3JlYXRlQ2xhc3MoTWVyZ2VWYWx1ZSwgW3sKICAgIGtleTogImlzTWVyZ2VkVG8iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzTWVyZ2VkVG8obWFzdGVyKSB7CiAgICAgIHJldHVy
biBtYXN0ZXIgPT09IHRoaXMuX21hc3RlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b0NzdlN0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9Dc3ZTdHJpbmcoKSB7CiAgICAgIHJldHVybiAnJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWxlYXNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWxlYXNlKCkgewogICAgICB0aGlzLl9tYXN0ZXIucmVsZWFzZU1lcmdlUmVmKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9TdHJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICByZXR1cm4g
dGhpcy52YWx1ZS50b1N0cmluZygpOwogICAgfQogIH0sIHsKICAgIGtleTogInZhbHVlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fbWFzdGVyLnZhbHVlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIENlbGwpIHsKICAgICAgICBpZiAodGhpcy5fbWFzdGVyKSB7CiAgICAgICAgICB0aGlzLl9tYXN0ZXIucmVsZWFzZU1lcmdlUmVmKCk7CiAgICAgICAgfQoKICAgICAgICB2YWx1ZS5hZGRNZXJnZVJlZigpOwogICAg
ICAgIHRoaXMuX21hc3RlciA9IHZhbHVlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX21hc3Rlci52YWx1ZSA9IHZhbHVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAibWFzdGVyIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fbWFzdGVyOwogICAgfQogIH0sIHsKICAgIGtleTogInR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLk1lcmdlOwogICAgfQogIH0sIHsKICAgIGtleTogImVmZmVjdGl2ZVR5cGUiLAogICAg
Z2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9tYXN0ZXIuZWZmZWN0aXZlVHlwZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRyZXNzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC5hZGRyZXNzOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMubW9kZWwuYWRkcmVzcyA9IHZhbHVlOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE1lcmdlVmFsdWU7Cn0oKTsKCnZhciBGb3JtdWxhVmFsdWUgPSAvKiNfX1BVUkVfXyov
ZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEZvcm11bGFWYWx1ZShjZWxsLCB2YWx1ZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm11bGFWYWx1ZSk7CgogICAgdGhpcy5jZWxsID0gY2VsbDsKICAgIHRoaXMubW9kZWwgPSB7CiAgICAgIGFkZHJlc3M6IGNlbGwuYWRkcmVzcywKICAgICAgdHlwZTogQ2VsbC5UeXBlcy5Gb3JtdWxhLAogICAgICBzaGFyZVR5cGU6IHZhbHVlID8gdmFsdWUuc2hhcmVUeXBlIDogdW5kZWZpbmVkLAogICAgICByZWY6IHZhbHVlID8gdmFsdWUucmVmIDogdW5kZWZpbmVkLAogICAgICBm
b3JtdWxhOiB2YWx1ZSA/IHZhbHVlLmZvcm11bGEgOiB1bmRlZmluZWQsCiAgICAgIHNoYXJlZEZvcm11bGE6IHZhbHVlID8gdmFsdWUuc2hhcmVkRm9ybXVsYSA6IHVuZGVmaW5lZCwKICAgICAgcmVzdWx0OiB2YWx1ZSA/IHZhbHVlLnJlc3VsdCA6IHVuZGVmaW5lZAogICAgfTsKICB9CgogIF9jcmVhdGVDbGFzcyhGb3JtdWxhVmFsdWUsIFt7CiAgICBrZXk6ICJfY29weU1vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY29weU1vZGVsKG1vZGVsKSB7CiAgICAgIHZhciBjb3B5ID0ge307CgogICAgICB2YXIgY3AgPSBmdW5j
dGlvbiBjcChuYW1lKSB7CiAgICAgICAgdmFyIHZhbHVlID0gbW9kZWxbbmFtZV07CgogICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgY29weVtuYW1lXSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGNwKCdmb3JtdWxhJyk7CiAgICAgIGNwKCdyZXN1bHQnKTsKICAgICAgY3AoJ3JlZicpOwogICAgICBjcCgnc2hhcmVUeXBlJyk7CiAgICAgIGNwKCdzaGFyZWRGb3JtdWxhJyk7CiAgICAgIHJldHVybiBjb3B5OwogICAgfQogIH0sIHsKICAgIGtleTogInZhbGlkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlv
biB2YWxpZGF0ZSh2YWx1ZSkgewogICAgICBzd2l0Y2ggKFZhbHVlLmdldFR5cGUodmFsdWUpKSB7CiAgICAgICAgY2FzZSBDZWxsLlR5cGVzLk51bGw6CiAgICAgICAgY2FzZSBDZWxsLlR5cGVzLlN0cmluZzoKICAgICAgICBjYXNlIENlbGwuVHlwZXMuTnVtYmVyOgogICAgICAgIGNhc2UgQ2VsbC5UeXBlcy5EYXRlOgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgQ2VsbC5UeXBlcy5IeXBlcmxpbms6CiAgICAgICAgY2FzZSBDZWxsLlR5cGVzLkZvcm11bGE6CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93
IG5ldyBFcnJvcignQ2Fubm90IHByb2Nlc3MgdGhhdCB0eXBlIG9mIHJlc3VsdCB2YWx1ZScpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX2dldFRyYW5zbGF0ZWRGb3JtdWxhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VHJhbnNsYXRlZEZvcm11bGEoKSB7CiAgICAgIGlmICghdGhpcy5fdHJhbnNsYXRlZEZvcm11bGEgJiYgdGhpcy5tb2RlbC5zaGFyZWRGb3JtdWxhKSB7CiAgICAgICAgdmFyIHdvcmtzaGVldCA9IHRoaXMuY2VsbC53b3Jrc2hlZXQ7CiAgICAgICAgdmFyIG1hc3RlciA9IHdvcmtzaGVldC5m
aW5kQ2VsbCh0aGlzLm1vZGVsLnNoYXJlZEZvcm11bGEpOwogICAgICAgIHRoaXMuX3RyYW5zbGF0ZWRGb3JtdWxhID0gbWFzdGVyICYmIHNsaWRlRm9ybXVsYShtYXN0ZXIuZm9ybXVsYSwgbWFzdGVyLmFkZHJlc3MsIHRoaXMubW9kZWwuYWRkcmVzcyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGVkRm9ybXVsYTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b0NzdlN0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9Dc3ZTdHJpbmcoKSB7CiAgICAgIHJldHVybiAiIi5jb25jYXQodGhpcy5tb2RlbC5y
ZXN1bHQgfHwgJycpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbGVhc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbGVhc2UoKSB7fQogIH0sIHsKICAgIGtleTogInRvU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwucmVzdWx0ID8gdGhpcy5tb2RlbC5yZXN1bHQudG9TdHJpbmcoKSA6ICcnOwogICAgfQogIH0sIHsKICAgIGtleTogInZhbHVlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fY29weU1vZGVsKHRoaXMu
bW9kZWwpOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMubW9kZWwgPSB0aGlzLl9jb3B5TW9kZWwodmFsdWUpOwogICAgfQogIH0sIHsKICAgIGtleTogImRlcGVuZGVuY2llcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgLy8gZmluZCBhbGwgdGhlIHJhbmdlcyBhbmQgY2VsbHMgbWVudGlvbmVkIGluIHRoZSBmb3JtdWxhCiAgICAgIHZhciByYW5nZXMgPSB0aGlzLmZvcm11bGEubWF0Y2goLyhbYS16QS1aMC05XSshKT9bQS1aXXsxLDN9XGR7MSw0fTpbQS1aXXsxLDN9
XGR7MSw0fS9nKTsKICAgICAgdmFyIGNlbGxzID0gdGhpcy5mb3JtdWxhLnJlcGxhY2UoLyhbYS16QS1aMC05XSshKT9bQS1aXXsxLDN9XGR7MSw0fTpbQS1aXXsxLDN9XGR7MSw0fS9nLCAnJykubWF0Y2goLyhbYS16QS1aMC05XSshKT9bQS1aXXsxLDN9XGR7MSw0fS9nKTsKICAgICAgcmV0dXJuIHsKICAgICAgICByYW5nZXM6IHJhbmdlcywKICAgICAgICBjZWxsczogY2VsbHMKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb3JtdWxhIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhp
cy5tb2RlbC5mb3JtdWxhIHx8IHRoaXMuX2dldFRyYW5zbGF0ZWRGb3JtdWxhKCk7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC5mb3JtdWxhID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiZm9ybXVsYVR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIGlmICh0aGlzLm1vZGVsLmZvcm11bGEpIHsKICAgICAgICByZXR1cm4gRW51bXMuRm9ybXVsYVR5cGUuTWFzdGVyOwogICAgICB9CgogICAgICBpZiAodGhpcy5tb2RlbC5zaGFyZWRGb3JtdWxh
KSB7CiAgICAgICAgcmV0dXJuIEVudW1zLkZvcm11bGFUeXBlLlNoYXJlZDsKICAgICAgfQoKICAgICAgcmV0dXJuIEVudW1zLkZvcm11bGFUeXBlLk5vbmU7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVzdWx0IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC5yZXN1bHQ7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC5yZXN1bHQgPSB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0eXBlIiwKICAgIGdldDogZnVuY3Rpb24g
Z2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5Gb3JtdWxhOwogICAgfQogIH0sIHsKICAgIGtleTogImVmZmVjdGl2ZVR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciB2ID0gdGhpcy5tb2RlbC5yZXN1bHQ7CgogICAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gRW51bXMuVmFsdWVUeXBlLk51bGw7CiAgICAgIH0KCiAgICAgIGlmICh2IGluc3RhbmNlb2YgU3RyaW5nIHx8IHR5cGVvZiB2ID09PSAnc3RyaW5nJykgewogICAgICAgIHJldHVy
biBFbnVtcy5WYWx1ZVR5cGUuU3RyaW5nOwogICAgICB9CgogICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7CiAgICAgICAgcmV0dXJuIEVudW1zLlZhbHVlVHlwZS5OdW1iZXI7CiAgICAgIH0KCiAgICAgIGlmICh2IGluc3RhbmNlb2YgRGF0ZSkgewogICAgICAgIHJldHVybiBFbnVtcy5WYWx1ZVR5cGUuRGF0ZTsKICAgICAgfQoKICAgICAgaWYgKHYudGV4dCAmJiB2Lmh5cGVybGluaykgewogICAgICAgIHJldHVybiBFbnVtcy5WYWx1ZVR5cGUuSHlwZXJsaW5rOwogICAgICB9CgogICAgICBpZiAodi5mb3JtdWxh
KSB7CiAgICAgICAgcmV0dXJuIEVudW1zLlZhbHVlVHlwZS5Gb3JtdWxhOwogICAgICB9CgogICAgICByZXR1cm4gRW51bXMuVmFsdWVUeXBlLk51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkcmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmFkZHJlc3MgPSB2YWx1ZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBGb3JtdWxhVmFsdWU7Cn0oKTsKCnZhciBT
aGFyZWRTdHJpbmdWYWx1ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gU2hhcmVkU3RyaW5nVmFsdWUoY2VsbCwgdmFsdWUpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGFyZWRTdHJpbmdWYWx1ZSk7CgogICAgdGhpcy5tb2RlbCA9IHsKICAgICAgYWRkcmVzczogY2VsbC5hZGRyZXNzLAogICAgICB0eXBlOiBDZWxsLlR5cGVzLlNoYXJlZFN0cmluZywKICAgICAgdmFsdWU6IHZhbHVlCiAgICB9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNoYXJlZFN0cmluZ1ZhbHVlLCBbewogICAga2V5OiAi
dG9Dc3ZTdHJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvQ3N2U3RyaW5nKCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC52YWx1ZS50b1N0cmluZygpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbGVhc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbGVhc2UoKSB7fQogIH0sIHsKICAgIGtleTogInRvU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWUudG9TdHJpbmcoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ2YWx1ZSIsCiAgICBnZXQ6
IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC52YWx1ZSA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLlNoYXJlZFN0cmluZzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJlZmZlY3RpdmVUeXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBl
cy5TaGFyZWRTdHJpbmc7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkcmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmFkZHJlc3MgPSB2YWx1ZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBTaGFyZWRTdHJpbmdWYWx1ZTsKfSgpOwoKdmFyIEJvb2xlYW5WYWx1ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQm9vbGVhblZhbHVlKGNl
bGwsIHZhbHVlKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQm9vbGVhblZhbHVlKTsKCiAgICB0aGlzLm1vZGVsID0gewogICAgICBhZGRyZXNzOiBjZWxsLmFkZHJlc3MsCiAgICAgIHR5cGU6IENlbGwuVHlwZXMuQm9vbGVhbiwKICAgICAgdmFsdWU6IHZhbHVlCiAgICB9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKEJvb2xlYW5WYWx1ZSwgW3sKICAgIGtleTogInRvQ3N2U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NzdlN0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWUgPyAxIDogMDsKICAg
IH0KICB9LCB7CiAgICBrZXk6ICJyZWxlYXNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWxlYXNlKCkge30KICB9LCB7CiAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnZhbHVlLnRvU3RyaW5nKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsdWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnZhbHVlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRo
aXMubW9kZWwudmFsdWUgPSB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0eXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5Cb29sZWFuOwogICAgfQogIH0sIHsKICAgIGtleTogImVmZmVjdGl2ZVR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLkJvb2xlYW47CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkcmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVz
czsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmFkZHJlc3MgPSB2YWx1ZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBCb29sZWFuVmFsdWU7Cn0oKTsKCnZhciBFcnJvclZhbHVlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBFcnJvclZhbHVlKGNlbGwsIHZhbHVlKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXJyb3JWYWx1ZSk7CgogICAgdGhpcy5tb2RlbCA9IHsKICAgICAgYWRkcmVzczogY2VsbC5hZGRyZXNzLAogICAgICB0eXBlOiBD
ZWxsLlR5cGVzLkVycm9yLAogICAgICB2YWx1ZTogdmFsdWUKICAgIH07CiAgfQoKICBfY3JlYXRlQ2xhc3MoRXJyb3JWYWx1ZSwgW3sKICAgIGtleTogInRvQ3N2U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NzdlN0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWxlYXNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWxlYXNlKCkge30KICB9LCB7CiAgICBrZXk6ICJ0b1N0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAg
IHJldHVybiB0aGlzLm1vZGVsLnZhbHVlLmVycm9yLnRvU3RyaW5nKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsdWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnZhbHVlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMubW9kZWwudmFsdWUgPSB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0eXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5FcnJvcjsKICAgIH0KICB9LCB7
CiAgICBrZXk6ICJlZmZlY3RpdmVUeXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5FcnJvcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRyZXNzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC5hZGRyZXNzOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMubW9kZWwuYWRkcmVzcyA9IHZhbHVlOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEVycm9yVmFsdWU7Cn0oKTsKCnZhciBKU09OVmFs
dWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEpTT05WYWx1ZShjZWxsLCB2YWx1ZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpTT05WYWx1ZSk7CgogICAgdGhpcy5tb2RlbCA9IHsKICAgICAgYWRkcmVzczogY2VsbC5hZGRyZXNzLAogICAgICB0eXBlOiBDZWxsLlR5cGVzLlN0cmluZywKICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KHZhbHVlKSwKICAgICAgcmF3VmFsdWU6IHZhbHVlCiAgICB9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKEpTT05WYWx1ZSwgW3sKICAgIGtleTogInRvQ3N2
U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0NzdlN0cmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVsZWFzZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVsZWFzZSgpIHt9CiAgfSwgewogICAga2V5OiAidG9TdHJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC52YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ2YWx1ZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0
dXJuIHRoaXMubW9kZWwucmF3VmFsdWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC5yYXdWYWx1ZSA9IHZhbHVlOwogICAgICB0aGlzLm1vZGVsLnZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpOwogICAgfQogIH0sIHsKICAgIGtleTogInR5cGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLlN0cmluZzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJlZmZlY3RpdmVUeXBlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewog
ICAgICByZXR1cm4gQ2VsbC5UeXBlcy5TdHJpbmc7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkcmVzcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkcmVzczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmFkZHJlc3MgPSB2YWx1ZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBKU09OVmFsdWU7Cn0oKTsgLy8gVmFsdWUgaXMgYSBwbGFjZSB0byBob2xkIGNvbW1vbiBzdGF0aWMgVmFsdWUgdHlwZSBmdW5jdGlvbnMKCgp2
YXIgVmFsdWUgPSB7CiAgZ2V0VHlwZTogZnVuY3Rpb24gZ2V0VHlwZSh2YWx1ZSkgewogICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuIENlbGwuVHlwZXMuTnVsbDsKICAgIH0KCiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5TdHJpbmc7CiAgICB9CgogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKICAgICAgcmV0dXJuIENlbGwuVHlwZXMu
TnVtYmVyOwogICAgfQoKICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5Cb29sZWFuOwogICAgfQoKICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHsKICAgICAgcmV0dXJuIENlbGwuVHlwZXMuRGF0ZTsKICAgIH0KCiAgICBpZiAodmFsdWUudGV4dCAmJiB2YWx1ZS5oeXBlcmxpbmspIHsKICAgICAgcmV0dXJuIENlbGwuVHlwZXMuSHlwZXJsaW5rOwogICAgfQoKICAgIGlmICh2YWx1ZS5mb3JtdWxhIHx8IHZhbHVlLnNoYXJlZEZvcm11bGEpIHsKICAgICAg
cmV0dXJuIENlbGwuVHlwZXMuRm9ybXVsYTsKICAgIH0KCiAgICBpZiAodmFsdWUucmljaFRleHQpIHsKICAgICAgcmV0dXJuIENlbGwuVHlwZXMuUmljaFRleHQ7CiAgICB9CgogICAgaWYgKHZhbHVlLnNoYXJlZFN0cmluZykgewogICAgICByZXR1cm4gQ2VsbC5UeXBlcy5TaGFyZWRTdHJpbmc7CiAgICB9CgogICAgaWYgKHZhbHVlLmVycm9yKSB7CiAgICAgIHJldHVybiBDZWxsLlR5cGVzLkVycm9yOwogICAgfQoKICAgIHJldHVybiBDZWxsLlR5cGVzLkpTT047CiAgfSwKICAvLyBtYXAgdmFsdWVUeXBlIHRvIGNvbnN0cnVj
dG9yCiAgdHlwZXM6IFt7CiAgICB0OiBDZWxsLlR5cGVzLk51bGwsCiAgICBmOiBOdWxsVmFsdWUKICB9LCB7CiAgICB0OiBDZWxsLlR5cGVzLk51bWJlciwKICAgIGY6IE51bWJlclZhbHVlCiAgfSwgewogICAgdDogQ2VsbC5UeXBlcy5TdHJpbmcsCiAgICBmOiBTdHJpbmdWYWx1ZQogIH0sIHsKICAgIHQ6IENlbGwuVHlwZXMuRGF0ZSwKICAgIGY6IERhdGVWYWx1ZQogIH0sIHsKICAgIHQ6IENlbGwuVHlwZXMuSHlwZXJsaW5rLAogICAgZjogSHlwZXJsaW5rVmFsdWUKICB9LCB7CiAgICB0OiBDZWxsLlR5cGVzLkZvcm11bGEs
CiAgICBmOiBGb3JtdWxhVmFsdWUKICB9LCB7CiAgICB0OiBDZWxsLlR5cGVzLk1lcmdlLAogICAgZjogTWVyZ2VWYWx1ZQogIH0sIHsKICAgIHQ6IENlbGwuVHlwZXMuSlNPTiwKICAgIGY6IEpTT05WYWx1ZQogIH0sIHsKICAgIHQ6IENlbGwuVHlwZXMuU2hhcmVkU3RyaW5nLAogICAgZjogU2hhcmVkU3RyaW5nVmFsdWUKICB9LCB7CiAgICB0OiBDZWxsLlR5cGVzLlJpY2hUZXh0LAogICAgZjogUmljaFRleHRWYWx1ZQogIH0sIHsKICAgIHQ6IENlbGwuVHlwZXMuQm9vbGVhbiwKICAgIGY6IEJvb2xlYW5WYWx1ZQogIH0sIHsK
ICAgIHQ6IENlbGwuVHlwZXMuRXJyb3IsCiAgICBmOiBFcnJvclZhbHVlCiAgfV0ucmVkdWNlKGZ1bmN0aW9uIChwLCB0KSB7CiAgICBwW3QudF0gPSB0LmY7CiAgICByZXR1cm4gcDsKICB9LCBbXSksCiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodHlwZSwgY2VsbCwgdmFsdWUpIHsKICAgIHZhciBUID0gdGhpcy50eXBlc1t0eXBlXTsKCiAgICBpZiAoIVQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJDb3VsZCBub3QgY3JlYXRlIFZhbHVlIG9mIHR5cGUgIi5jb25jYXQodHlwZSkpOwogICAgfQoKICAgIHJldHVybiBuZXcg
VChjZWxsLCB2YWx1ZSk7CiAgfQp9Owptb2R1bGUuZXhwb3J0cyA9IENlbGw7Cgp9LHsiLi4vdXRpbHMvY29sLWNhY2hlIjoxOSwiLi4vdXRpbHMvc2hhcmVkLWZvcm11bGEiOjIyLCIuLi91dGlscy91bmRlci1kYXNoIjoyNSwiLi9lbnVtcyI6NywiLi9ub3RlIjo5fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhy
b3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndy
aXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9Cgp2YXIg
XyA9IHJlcXVpcmUoJy4uL3V0aWxzL3VuZGVyLWRhc2gnKTsKCnZhciBFbnVtcyA9IHJlcXVpcmUoJy4vZW51bXMnKTsKCnZhciBjb2xDYWNoZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbC1jYWNoZScpOwoKdmFyIERFRkFVTFRfQ09MVU1OX1dJRFRIID0gOTsgLy8gQ29sdW1uIGRlZmluZXMgdGhlIGNvbHVtbiBwcm9wZXJ0aWVzIGZvciAxIGNvbHVtbi4KLy8gVGhpcyBpbmNsdWRlcyBoZWFkZXIgcm93cywgd2lkdGhzLCBrZXksIChzdHlsZSksIGV0Yy4KLy8gV29ya3NoZWV0IHdpbGwgY29uZGVuc2UgdGhlIGNvbHVtbnMgYXMg
YXBwcm9wcmlhdGUgZHVyaW5nIHNlcmlhbGl6YXRpb24KCnZhciBDb2x1bW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIENvbHVtbih3b3Jrc2hlZXQsIG51bWJlciwgZGVmbikgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbHVtbik7CgogICAgdGhpcy5fd29ya3NoZWV0ID0gd29ya3NoZWV0OwogICAgdGhpcy5fbnVtYmVyID0gbnVtYmVyOwoKICAgIGlmIChkZWZuICE9PSBmYWxzZSkgewogICAgICAvLyBzb21ldGltZXMgZGVmbiB3aWxsIGZvbGxvdwogICAgICB0aGlzLmRlZm4gPSBkZWZu
OwogICAgfQogIH0KCiAgX2NyZWF0ZUNsYXNzKENvbHVtbiwgW3sKICAgIGtleTogInRvU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBrZXk6IHRoaXMua2V5LAogICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLAogICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycy5sZW5ndGggPyB0aGlzLmhlYWRlcnMgOiB1bmRlZmluZWQKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZXF1aXZhbGVudFRvIiwKICAgIHZhbHVlOiBmdW5j
dGlvbiBlcXVpdmFsZW50VG8ob3RoZXIpIHsKICAgICAgcmV0dXJuIHRoaXMud2lkdGggPT09IG90aGVyLndpZHRoICYmIHRoaXMuaGlkZGVuID09PSBvdGhlci5oaWRkZW4gJiYgdGhpcy5vdXRsaW5lTGV2ZWwgPT09IG90aGVyLm91dGxpbmVMZXZlbCAmJiBfLmlzRXF1YWwodGhpcy5zdHlsZSwgb3RoZXIuc3R5bGUpOwogICAgfQogIH0sIHsKICAgIGtleTogImVhY2hDZWxsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBlYWNoQ2VsbChvcHRpb25zLCBpdGVyYXRlZSkgewogICAgICB2YXIgY29sTnVtYmVyID0gdGhpcy5udW1iZXI7
CgogICAgICBpZiAoIWl0ZXJhdGVlKSB7CiAgICAgICAgaXRlcmF0ZWUgPSBvcHRpb25zOwogICAgICAgIG9wdGlvbnMgPSBudWxsOwogICAgICB9CgogICAgICB0aGlzLl93b3Jrc2hlZXQuZWFjaFJvdyhvcHRpb25zLCBmdW5jdGlvbiAocm93LCByb3dOdW1iZXIpIHsKICAgICAgICBpdGVyYXRlZShyb3cuZ2V0Q2VsbChjb2xOdW1iZXIpLCByb3dOdW1iZXIpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfYXBwbHlTdHlsZSIsCiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBzdHlsZXMKICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwbHlTdHlsZShuYW1lLCB2YWx1ZSkgewogICAgICB0aGlzLnN0eWxlW25hbWVdID0gdmFsdWU7CiAgICAgIHRoaXMuZWFjaENlbGwoZnVuY3Rpb24gKGNlbGwpIHsKICAgICAgICBjZWxsW25hbWVdID0gdmFsdWU7CiAgICAgIH0pOwogICAgICByZXR1cm4gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAibnVtYmVyIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5f
bnVtYmVyOwogICAgfQogIH0sIHsKICAgIGtleTogIndvcmtzaGVldCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsZXR0ZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBjb2xDYWNoZS5uMmwodGhpcy5fbnVtYmVyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0N1c3RvbVdpZHRoIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy53aWR0aCAhPT0gdW5kZWZpbmVk
ICYmIHRoaXMud2lkdGggIT09IERFRkFVTFRfQ09MVU1OX1dJRFRIOwogICAgfQogIH0sIHsKICAgIGtleTogImRlZm4iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgaGVhZGVyOiB0aGlzLl9oZWFkZXIsCiAgICAgICAga2V5OiB0aGlzLmtleSwKICAgICAgICB3aWR0aDogdGhpcy53aWR0aCwKICAgICAgICBzdHlsZTogdGhpcy5zdHlsZSwKICAgICAgICBoaWRkZW46IHRoaXMuaGlkZGVuLAogICAgICAgIG91dGxpbmVMZXZlbDogdGhpcy5vdXRsaW5lTGV2ZWwKICAgICAgfTsKICAg
IH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICBpZiAodmFsdWUpIHsKICAgICAgICB0aGlzLmtleSA9IHZhbHVlLmtleTsKICAgICAgICB0aGlzLndpZHRoID0gdmFsdWUud2lkdGggIT09IHVuZGVmaW5lZCA/IHZhbHVlLndpZHRoIDogREVGQVVMVF9DT0xVTU5fV0lEVEg7CiAgICAgICAgdGhpcy5vdXRsaW5lTGV2ZWwgPSB2YWx1ZS5vdXRsaW5lTGV2ZWw7CgogICAgICAgIGlmICh2YWx1ZS5zdHlsZSkgewogICAgICAgICAgdGhpcy5zdHlsZSA9IHZhbHVlLnN0eWxlOwogICAgICAgIH0gZWxzZSB7CiAg
ICAgICAgICB0aGlzLnN0eWxlID0ge307CiAgICAgICAgfSAvLyBoZWFkZXJzIG11c3QgYmUgc2V0IGFmdGVyIHN0eWxlCgoKICAgICAgICB0aGlzLmhlYWRlciA9IHZhbHVlLmhlYWRlcjsKICAgICAgICB0aGlzLl9oaWRkZW4gPSAhIXZhbHVlLmhpZGRlbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBkZWxldGUgdGhpcy5faGVhZGVyOwogICAgICAgIGRlbGV0ZSB0aGlzLl9rZXk7CiAgICAgICAgZGVsZXRlIHRoaXMud2lkdGg7CiAgICAgICAgdGhpcy5zdHlsZSA9IHt9OwogICAgICAgIHRoaXMub3V0bGluZUxldmVsID0gMDsK
ICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImhlYWRlcnMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9oZWFkZXIgJiYgdGhpcy5faGVhZGVyIGluc3RhbmNlb2YgQXJyYXkgPyB0aGlzLl9oZWFkZXIgOiBbdGhpcy5faGVhZGVyXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoZWFkZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9oZWFkZXI7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdmFyIF90aGlzID0g
dGhpczsKCiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5faGVhZGVyID0gdmFsdWU7CiAgICAgICAgdGhpcy5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKHRleHQsIGluZGV4KSB7CiAgICAgICAgICBfdGhpcy5fd29ya3NoZWV0LmdldENlbGwoaW5kZXggKyAxLCBfdGhpcy5udW1iZXIpLnZhbHVlID0gdGV4dDsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9oZWFkZXIgPSB1bmRlZmluZWQ7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJrZXkiLAogICAg
Z2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9rZXk7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuX2tleSAmJiB0aGlzLl93b3Jrc2hlZXQuZ2V0Q29sdW1uS2V5KHRoaXMuX2tleSk7CgogICAgICBpZiAoY29sdW1uID09PSB0aGlzKSB7CiAgICAgICAgdGhpcy5fd29ya3NoZWV0LmRlbGV0ZUNvbHVtbktleSh0aGlzLl9rZXkpOwogICAgICB9CgogICAgICB0aGlzLl9rZXkgPSB2YWx1ZTsKCiAgICAgIGlmICh2YWx1ZSkgewogICAgICAg
IHRoaXMuX3dvcmtzaGVldC5zZXRDb2x1bW5LZXkodGhpcy5fa2V5LCB0aGlzKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImhpZGRlbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICEhdGhpcy5faGlkZGVuOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX2hpZGRlbiA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogIm91dGxpbmVMZXZlbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX291dGxpbmVM
ZXZlbCB8fCAwOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX291dGxpbmVMZXZlbCA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbGxhcHNlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICEhKHRoaXMuX291dGxpbmVMZXZlbCAmJiB0aGlzLl9vdXRsaW5lTGV2ZWwgPj0gdGhpcy5fd29ya3NoZWV0LnByb3BlcnRpZXMub3V0bGluZUxldmVsQ29sKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0RlZmF1bHQiLAogICAgZ2V0OiBmdW5jdGlv
biBnZXQoKSB7CiAgICAgIGlmICh0aGlzLmlzQ3VzdG9tV2lkdGgpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmhpZGRlbikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMub3V0bGluZUxldmVsKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgcyA9IHRoaXMuc3R5bGU7CgogICAgICBpZiAocyAmJiAocy5mb250IHx8IHMubnVtRm10IHx8IHMuYWxpZ25tZW50IHx8IHMuYm9yZGVyIHx8IHMuZmlsbCB8fCBzLnByb3Rl
Y3Rpb24pKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoZWFkZXJDb3VudCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaGVhZGVycy5sZW5ndGg7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsdWVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgdiA9IFtdOwogICAgICB0aGlzLmVhY2hDZWxsKGZ1bmN0aW9uIChjZWxsLCByb3dOdW1iZXIpIHsKICAgICAgICBpZiAoY2VsbCAm
JiBjZWxsLnR5cGUgIT09IEVudW1zLlZhbHVlVHlwZS5OdWxsKSB7CiAgICAgICAgICB2W3Jvd051bWJlcl0gPSBjZWxsLnZhbHVlOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiB2OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHYpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBpZiAoIXYpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBjb2xOdW1iZXIgPSB0aGlzLm51bWJlcjsKICAgICAgdmFyIG9mZnNldCA9IDA7CgogICAgICBpZiAodi5oYXNPd25Qcm9wZXJ0eSgn
MCcpKSB7CiAgICAgICAgLy8gYXNzdW1lIGNvbnRpZ3VvdXMgYXJyYXksIHN0YXJ0IGF0IHJvdyAxCiAgICAgICAgb2Zmc2V0ID0gMTsKICAgICAgfQoKICAgICAgdi5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsKICAgICAgICBfdGhpczIuX3dvcmtzaGVldC5nZXRDZWxsKGluZGV4ICsgb2Zmc2V0LCBjb2xOdW1iZXIpLnZhbHVlID0gdmFsdWU7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIm51bUZtdCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3R5bGUubnVt
Rm10OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX2FwcGx5U3R5bGUoJ251bUZtdCcsIHZhbHVlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb250IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5zdHlsZS5mb250OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX2FwcGx5U3R5bGUoJ2ZvbnQnLCB2YWx1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWxpZ25tZW50IiwKICAgIGdldDogZnVuY3Rpb24g
Z2V0KCkgewogICAgICByZXR1cm4gdGhpcy5zdHlsZS5hbGlnbm1lbnQ7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fYXBwbHlTdHlsZSgnYWxpZ25tZW50JywgdmFsdWUpOwogICAgfQogIH0sIHsKICAgIGtleTogInByb3RlY3Rpb24iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0eWxlLnByb3RlY3Rpb247CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fYXBwbHlTdHlsZSgncHJvdGVjdGlvbicsIHZh
bHVlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJib3JkZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0eWxlLmJvcmRlcjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLl9hcHBseVN0eWxlKCdib3JkZXInLCB2YWx1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmlsbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3R5bGUuZmlsbDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewog
ICAgICB0aGlzLl9hcHBseVN0eWxlKCdmaWxsJywgdmFsdWUpOwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gc3RhdGljIGZ1bmN0aW9ucwoKICB9XSwgW3sKICAgIGtleTogInRvTW9kZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvTW9kZWwoY29sdW1ucykgewogICAgICAvLyBDb252ZXJ0IGFycmF5IG9mIENvbHVtbiBpbnRvIGNvbXByZXNzZWQgbGlzdCBjb2xzCiAgICAgIHZhciBjb2xzID0gW107CiAg
ICAgIHZhciBjb2wgPSBudWxsOwoKICAgICAgaWYgKGNvbHVtbnMpIHsKICAgICAgICBjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgaW5kZXgpIHsKICAgICAgICAgIGlmIChjb2x1bW4uaXNEZWZhdWx0KSB7CiAgICAgICAgICAgIGlmIChjb2wpIHsKICAgICAgICAgICAgICBjb2wgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKCFjb2wgfHwgIWNvbHVtbi5lcXVpdmFsZW50VG8oY29sKSkgewogICAgICAgICAgICBjb2wgPSB7CiAgICAgICAgICAgICAgbWluOiBpbmRleCArIDEsCiAg
ICAgICAgICAgICAgbWF4OiBpbmRleCArIDEsCiAgICAgICAgICAgICAgd2lkdGg6IGNvbHVtbi53aWR0aCAhPT0gdW5kZWZpbmVkID8gY29sdW1uLndpZHRoIDogREVGQVVMVF9DT0xVTU5fV0lEVEgsCiAgICAgICAgICAgICAgc3R5bGU6IGNvbHVtbi5zdHlsZSwKICAgICAgICAgICAgICBpc0N1c3RvbVdpZHRoOiBjb2x1bW4uaXNDdXN0b21XaWR0aCwKICAgICAgICAgICAgICBoaWRkZW46IGNvbHVtbi5oaWRkZW4sCiAgICAgICAgICAgICAgb3V0bGluZUxldmVsOiBjb2x1bW4ub3V0bGluZUxldmVsLAogICAgICAgICAgICAg
IGNvbGxhcHNlZDogY29sdW1uLmNvbGxhcHNlZAogICAgICAgICAgICB9OwogICAgICAgICAgICBjb2xzLnB1c2goY29sKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbC5tYXggPSBpbmRleCArIDE7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjb2xzLmxlbmd0aCA/IGNvbHMgOiB1bmRlZmluZWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZnJvbU1vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tTW9kZWwod29ya3NoZWV0LCBjb2xzKSB7CiAgICAgIGNvbHMgPSBj
b2xzIHx8IFtdOwogICAgICB2YXIgY29sdW1ucyA9IFtdOwogICAgICB2YXIgY291bnQgPSAxOwogICAgICB2YXIgaW5kZXggPSAwOwoKICAgICAgd2hpbGUgKGluZGV4IDwgY29scy5sZW5ndGgpIHsKICAgICAgICB2YXIgY29sID0gY29sc1tpbmRleCsrXTsKCiAgICAgICAgd2hpbGUgKGNvdW50IDwgY29sLm1pbikgewogICAgICAgICAgY29sdW1ucy5wdXNoKG5ldyBDb2x1bW4od29ya3NoZWV0LCBjb3VudCsrKSk7CiAgICAgICAgfQoKICAgICAgICB3aGlsZSAoY291bnQgPD0gY29sLm1heCkgewogICAgICAgICAgY29sdW1u
cy5wdXNoKG5ldyBDb2x1bW4od29ya3NoZWV0LCBjb3VudCsrLCBjb2wpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBjb2x1bW5zLmxlbmd0aCA/IGNvbHVtbnMgOiBudWxsOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENvbHVtbjsKfSgpOwoKbW9kdWxlLmV4cG9ydHMgPSBDb2x1bW47Cgp9LHsiLi4vdXRpbHMvY29sLWNhY2hlIjoxOSwiLi4vdXRpbHMvdW5kZXItZGFzaCI6MjUsIi4vZW51bXMiOjd9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24g
X2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJh
YmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYg
KHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCnZhciBEYXRhVmFsaWRhdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIERhdGFWYWxpZGF0aW9ucyhtb2RlbCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFWYWxpZGF0aW9ucyk7CgogICAgdGhpcy5tb2RlbCA9IG1vZGVsIHx8IHt9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKERhdGFWYWxpZGF0aW9ucywgW3sKICAgIGtleTogImFkZCIsCiAg
ICB2YWx1ZTogZnVuY3Rpb24gYWRkKGFkZHJlc3MsIHZhbGlkYXRpb24pIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWxbYWRkcmVzc10gPSB2YWxpZGF0aW9uOwogICAgfQogIH0sIHsKICAgIGtleTogImZpbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmQoYWRkcmVzcykgewogICAgICByZXR1cm4gdGhpcy5tb2RlbFthZGRyZXNzXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShhZGRyZXNzKSB7CiAgICAgIHRoaXMubW9kZWxbYWRkcmVzc10gPSB1bmRlZmluZWQ7
CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRGF0YVZhbGlkYXRpb25zOwp9KCk7Cgptb2R1bGUuZXhwb3J0cyA9IERhdGFWYWxpZGF0aW9uczsKCn0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0
aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNj
cmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIF8gPSByZXF1aXJlKCcuLi91dGlscy91bmRlci1kYXNoJyk7Cgp2YXIgY29sQ2FjaGUgPSByZXF1aXJlKCcuLi91
dGlscy9jb2wtY2FjaGUnKTsKCnZhciBDZWxsTWF0cml4ID0gcmVxdWlyZSgnLi4vdXRpbHMvY2VsbC1tYXRyaXgnKTsKCnZhciBSYW5nZSA9IHJlcXVpcmUoJy4vcmFuZ2UnKTsKCnZhciByYW5nZVJlZ2V4cCA9IC9bJF0oXHcrKVskXShcZCspKDpbJF0oXHcrKVskXShcZCspKT8vOwoKdmFyIERlZmluZWROYW1lcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRGVmaW5lZE5hbWVzKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlZmluZWROYW1lcyk7CgogICAgdGhpcy5tYXRyaXhNYXAgPSB7
fTsKICB9CgogIF9jcmVhdGVDbGFzcyhEZWZpbmVkTmFtZXMsIFt7CiAgICBrZXk6ICJnZXRNYXRyaXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1hdHJpeChuYW1lKSB7CiAgICAgIHZhciBtYXRyaXggPSB0aGlzLm1hdHJpeE1hcFtuYW1lXSB8fCAodGhpcy5tYXRyaXhNYXBbbmFtZV0gPSBuZXcgQ2VsbE1hdHJpeCgpKTsKICAgICAgcmV0dXJuIG1hdHJpeDsKICAgIH0gLy8gYWRkIGEgbmFtZSB0byBhIGNlbGwuIGxvY1N0ciBpbiB0aGUgZm9ybSBTaGVldE5hbWUhJGNvbCRyb3cgb3IgU2hlZXROYW1lISRjMSRyMTokYzI6
JHIyCgogIH0sIHsKICAgIGtleTogImFkZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKGxvY1N0ciwgbmFtZSkgewogICAgICB2YXIgbG9jYXRpb24gPSBjb2xDYWNoZS5kZWNvZGVFeChsb2NTdHIpOwogICAgICB0aGlzLmFkZEV4KGxvY2F0aW9uLCBuYW1lKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRFeCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXgobG9jYXRpb24sIG5hbWUpIHsKICAgICAgdmFyIG1hdHJpeCA9IHRoaXMuZ2V0TWF0cml4KG5hbWUpOwoKICAgICAgaWYgKGxvY2F0aW9uLnRvcCkgewogICAgICAg
IGZvciAodmFyIGNvbCA9IGxvY2F0aW9uLmxlZnQ7IGNvbCA8PSBsb2NhdGlvbi5yaWdodDsgY29sKyspIHsKICAgICAgICAgIGZvciAodmFyIHJvdyA9IGxvY2F0aW9uLnRvcDsgcm93IDw9IGxvY2F0aW9uLmJvdHRvbTsgcm93KyspIHsKICAgICAgICAgICAgdmFyIGFkZHJlc3MgPSB7CiAgICAgICAgICAgICAgc2hlZXROYW1lOiBsb2NhdGlvbi5zaGVldE5hbWUsCiAgICAgICAgICAgICAgYWRkcmVzczogY29sQ2FjaGUubjJsKGNvbCkgKyByb3csCiAgICAgICAgICAgICAgcm93OiByb3csCiAgICAgICAgICAgICAgY29sOiBj
b2wKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbWF0cml4LmFkZENlbGxFeChhZGRyZXNzKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWF0cml4LmFkZENlbGxFeChsb2NhdGlvbik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShsb2NTdHIsIG5hbWUpIHsKICAgICAgdmFyIGxvY2F0aW9uID0gY29sQ2FjaGUuZGVjb2RlRXgobG9jU3RyKTsKICAgICAgdGhpcy5yZW1vdmVFeChsb2NhdGlvbiwgbmFtZSk7CiAg
ICB9CiAgfSwgewogICAga2V5OiAicmVtb3ZlRXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUV4KGxvY2F0aW9uLCBuYW1lKSB7CiAgICAgIHZhciBtYXRyaXggPSB0aGlzLmdldE1hdHJpeChuYW1lKTsKICAgICAgbWF0cml4LnJlbW92ZUNlbGxFeChsb2NhdGlvbik7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVtb3ZlQWxsTmFtZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUFsbE5hbWVzKGxvY2F0aW9uKSB7CiAgICAgIF8uZWFjaCh0aGlzLm1hdHJpeE1hcCwgZnVuY3Rpb24gKG1hdHJpeCkgewogICAgICAg
IG1hdHJpeC5yZW1vdmVDZWxsRXgobG9jYXRpb24pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb3JFYWNoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrKSB7CiAgICAgIF8uZWFjaCh0aGlzLm1hdHJpeE1hcCwgZnVuY3Rpb24gKG1hdHJpeCwgbmFtZSkgewogICAgICAgIG1hdHJpeC5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsKSB7CiAgICAgICAgICBjYWxsYmFjayhuYW1lLCBjZWxsKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9IC8vIGdldCBhbGwgdGhlIG5hbWVzIG9mIGEgY2Vs
bAoKICB9LCB7CiAgICBrZXk6ICJnZXROYW1lcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TmFtZXMoYWRkcmVzc1N0cikgewogICAgICByZXR1cm4gdGhpcy5nZXROYW1lc0V4KGNvbENhY2hlLmRlY29kZUV4KGFkZHJlc3NTdHIpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXROYW1lc0V4IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROYW1lc0V4KGFkZHJlc3MpIHsKICAgICAgcmV0dXJuIF8ubWFwKHRoaXMubWF0cml4TWFwLCBmdW5jdGlvbiAobWF0cml4LCBuYW1lKSB7CiAgICAgICAgcmV0dXJuIG1hdHJpeC5maW5k
Q2VsbEV4KGFkZHJlc3MpICYmIG5hbWU7CiAgICAgIH0pLmZpbHRlcihCb29sZWFuKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZXhwbG9yZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2V4cGxvcmUobWF0cml4LCBjZWxsKSB7CiAgICAgIGNlbGwubWFyayA9IGZhbHNlOwogICAgICB2YXIgc2hlZXROYW1lID0gY2VsbC5zaGVldE5hbWU7CiAgICAgIHZhciByYW5nZSA9IG5ldyBSYW5nZShjZWxsLnJvdywgY2VsbC5jb2wsIGNlbGwucm93LCBjZWxsLmNvbCwgc2hlZXROYW1lKTsKICAgICAgdmFyIHg7CiAgICAgIHZhciB5OyAv
LyBncm93IHZlcnRpY2FsIC0gb25seSBvbmUgY29sIHRvIHdvcnJ5IGFib3V0CgogICAgICBmdW5jdGlvbiB2R3Jvdyh5eSwgZWRnZSkgewogICAgICAgIHZhciBjID0gbWF0cml4LmZpbmRDZWxsQXQoc2hlZXROYW1lLCB5eSwgY2VsbC5jb2wpOwoKICAgICAgICBpZiAoIWMgfHwgIWMubWFyaykgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgcmFuZ2VbZWRnZV0gPSB5eTsKICAgICAgICBjLm1hcmsgPSBmYWxzZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgZm9yICh5ID0g
Y2VsbC5yb3cgLSAxOyB2R3Jvdyh5LCAndG9wJyk7IHktLSkgewogICAgICAgIDsKICAgICAgfQoKICAgICAgZm9yICh5ID0gY2VsbC5yb3cgKyAxOyB2R3Jvdyh5LCAnYm90dG9tJyk7IHkrKykgewogICAgICAgIDsKICAgICAgfSAvLyBncm93IGhvcml6b250YWwgLSBlbnN1cmUgYWxsIHJvd3MgY2FuIGdyb3cKCgogICAgICBmdW5jdGlvbiBoR3Jvdyh4eCwgZWRnZSkgewogICAgICAgIHZhciBjZWxscyA9IFtdOwoKICAgICAgICBmb3IgKHkgPSByYW5nZS50b3A7IHkgPD0gcmFuZ2UuYm90dG9tOyB5KyspIHsKICAgICAgICAg
IHZhciBjID0gbWF0cml4LmZpbmRDZWxsQXQoc2hlZXROYW1lLCB5LCB4eCk7CgogICAgICAgICAgaWYgKGMgJiYgYy5tYXJrKSB7CiAgICAgICAgICAgIGNlbGxzLnB1c2goYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByYW5nZVtlZGdlXSA9IHh4OwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjZWxsc1tpXS5tYXJrID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBy
ZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgZm9yICh4ID0gY2VsbC5jb2wgLSAxOyBoR3Jvdyh4LCAnbGVmdCcpOyB4LS0pIHsKICAgICAgICA7CiAgICAgIH0KCiAgICAgIGZvciAoeCA9IGNlbGwuY29sICsgMTsgaEdyb3coeCwgJ3JpZ2h0Jyk7IHgrKykgewogICAgICAgIDsKICAgICAgfQoKICAgICAgcmV0dXJuIHJhbmdlOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFJhbmdlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmFuZ2VzKG5hbWUsIG1hdHJpeCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAg
bWF0cml4ID0gbWF0cml4IHx8IHRoaXMubWF0cml4TWFwW25hbWVdOwoKICAgICAgaWYgKCFtYXRyaXgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgIHJhbmdlczogW10KICAgICAgICB9OwogICAgICB9IC8vIG1hcmsgYW5kIHN3ZWVwIQoKCiAgICAgIG1hdHJpeC5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsKSB7CiAgICAgICAgY2VsbC5tYXJrID0gdHJ1ZTsKICAgICAgfSk7CiAgICAgIHZhciByYW5nZXMgPSBtYXRyaXgubWFwKGZ1bmN0aW9uIChjZWxsKSB7CiAgICAgICAgcmV0dXJu
IGNlbGwubWFyayAmJiBfdGhpcy5fZXhwbG9yZShtYXRyaXgsIGNlbGwpOwogICAgICB9KS5maWx0ZXIoQm9vbGVhbikubWFwKGZ1bmN0aW9uIChyYW5nZSkgewogICAgICAgIHJldHVybiByYW5nZS4kc2hvcnRSYW5nZTsKICAgICAgfSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICByYW5nZXM6IHJhbmdlcwogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogIm5vcm1hbGlzZU1hdHJpeCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXNlTWF0cml4KG1hdHJpeCwgc2hlZXROYW1lKSB7
CiAgICAgIC8vIHNvbWUgb2YgdGhlIGNlbGxzIG1pZ2h0IGhhdmUgc2hpZnRlZCBvbiBzcGVjaWZpZWQgc2hlZXQKICAgICAgLy8gbmVlZCB0byByZWFzc2lnbiByb3dzLCBjb2xzCiAgICAgIG1hdHJpeC5mb3JFYWNoSW5TaGVldChzaGVldE5hbWUsIGZ1bmN0aW9uIChjZWxsLCByb3csIGNvbCkgewogICAgICAgIGlmIChjZWxsKSB7CiAgICAgICAgICBpZiAoY2VsbC5yb3cgIT09IHJvdyB8fCBjZWxsLmNvbCAhPT0gY29sKSB7CiAgICAgICAgICAgIGNlbGwucm93ID0gcm93OwogICAgICAgICAgICBjZWxsLmNvbCA9IGNvbDsK
ICAgICAgICAgICAgY2VsbC5hZGRyZXNzID0gY29sQ2FjaGUubjJsKGNvbCkgKyByb3c7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzcGxpY2VSb3dzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzcGxpY2VSb3dzKHNoZWV0TmFtZSwgc3RhcnQsIG51bURlbGV0ZSwgbnVtSW5zZXJ0KSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgXy5lYWNoKHRoaXMubWF0cml4TWFwLCBmdW5jdGlvbiAobWF0cml4KSB7CiAgICAgICAgbWF0cml4LnNwbGljZVJvd3Moc2hlZXRO
YW1lLCBzdGFydCwgbnVtRGVsZXRlLCBudW1JbnNlcnQpOwoKICAgICAgICBfdGhpczIubm9ybWFsaXNlTWF0cml4KG1hdHJpeCwgc2hlZXROYW1lKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic3BsaWNlQ29sdW1ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaWNlQ29sdW1ucyhzaGVldE5hbWUsIHN0YXJ0LCBudW1EZWxldGUsIG51bUluc2VydCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIF8uZWFjaCh0aGlzLm1hdHJpeE1hcCwgZnVuY3Rpb24gKG1hdHJpeCkgewogICAgICAgIG1hdHJp
eC5zcGxpY2VDb2x1bW5zKHNoZWV0TmFtZSwgc3RhcnQsIG51bURlbGV0ZSwgbnVtSW5zZXJ0KTsKCiAgICAgICAgX3RoaXMzLm5vcm1hbGlzZU1hdHJpeChtYXRyaXgsIHNoZWV0TmFtZSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIm1vZGVsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIC8vIFRvIGdldCBuYW1lcyBwZXIgY2VsbCAtIGp1c3QgaXRlcmF0ZSBvdmVyIGFsbCBuYW1lcyBmaW5kaW5nIGNlbGxzIGlmIHRoZXkgZXhpc3QKICAgICAgcmV0
dXJuIF8ubWFwKHRoaXMubWF0cml4TWFwLCBmdW5jdGlvbiAobWF0cml4LCBuYW1lKSB7CiAgICAgICAgcmV0dXJuIF90aGlzNC5nZXRSYW5nZXMobmFtZSwgbWF0cml4KTsKICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkZWZpbmVkTmFtZSkgewogICAgICAgIHJldHVybiBkZWZpbmVkTmFtZS5yYW5nZXMubGVuZ3RoOwogICAgICB9KTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICAvLyB2YWx1ZSBpcyBbIHsgbmFtZSwgcmFuZ2VzIH0sIC4uLiBdCiAgICAgIHZhciBtYXRyaXhNYXAgPSB0aGlz
Lm1hdHJpeE1hcCA9IHt9OwogICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChkZWZpbmVkTmFtZSkgewogICAgICAgIHZhciBtYXRyaXggPSBtYXRyaXhNYXBbZGVmaW5lZE5hbWUubmFtZV0gPSBuZXcgQ2VsbE1hdHJpeCgpOwogICAgICAgIGRlZmluZWROYW1lLnJhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChyYW5nZVN0cikgewogICAgICAgICAgaWYgKHJhbmdlUmVnZXhwLnRlc3QocmFuZ2VTdHIuc3BsaXQoJyEnKS5wb3AoKSB8fCAnJykpIHsKICAgICAgICAgICAgbWF0cml4LmFkZENlbGwocmFuZ2VTdHIpOwogICAgICAg
ICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBEZWZpbmVkTmFtZXM7Cn0oKTsKCm1vZHVsZS5leHBvcnRzID0gRGVmaW5lZE5hbWVzOwoKfSx7Ii4uL3V0aWxzL2NlbGwtbWF0cml4IjoxOCwiLi4vdXRpbHMvY29sLWNhY2hlIjoxOSwiLi4vdXRpbHMvdW5kZXItZGFzaCI6MjUsIi4vcmFuZ2UiOjEwfV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCm1vZHVsZS5leHBvcnRzID0gewogIFZhbHVlVHlwZTogewogICAgTnVsbDogMCwKICAgIE1l
cmdlOiAxLAogICAgTnVtYmVyOiAyLAogICAgU3RyaW5nOiAzLAogICAgRGF0ZTogNCwKICAgIEh5cGVybGluazogNSwKICAgIEZvcm11bGE6IDYsCiAgICBTaGFyZWRTdHJpbmc6IDcsCiAgICBSaWNoVGV4dDogOCwKICAgIEJvb2xlYW46IDksCiAgICBFcnJvcjogMTAKICB9LAogIEZvcm11bGFUeXBlOiB7CiAgICBOb25lOiAwLAogICAgTWFzdGVyOiAxLAogICAgU2hhcmVkOiAyCiAgfSwKICBSZWxhdGlvbnNoaXBUeXBlOiB7CiAgICBOb25lOiAwLAogICAgT2ZmaWNlRG9jdW1lbnQ6IDEsCiAgICBXb3Jrc2hlZXQ6IDIsCiAg
ICBDYWxjQ2hhaW46IDMsCiAgICBTaGFyZWRTdHJpbmdzOiA0LAogICAgU3R5bGVzOiA1LAogICAgVGhlbWU6IDYsCiAgICBIeXBlcmxpbms6IDcKICB9LAogIERvY3VtZW50VHlwZTogewogICAgWGxzeDogMQogIH0sCiAgUmVhZGluZ09yZGVyOiB7CiAgICBMZWZ0VG9SaWdodDogMSwKICAgIFJpZ2h0VG9MZWZ0OiAyCiAgfSwKICBFcnJvclZhbHVlOiB7CiAgICBOb3RBcHBsaWNhYmxlOiAnI04vQScsCiAgICBSZWY6ICcjUkVGIScsCiAgICBOYW1lOiAnI05BTUU/JywKICAgIERpdlplcm86ICcjRElWLzAhJywKICAgIE51bGw6
ICcjTlVMTCEnLAogICAgVmFsdWU6ICcjVkFMVUUhJywKICAgIE51bTogJyNOVU0hJwogIH0KfTsKCn0se31dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRh
cmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBf
Y3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi4vdXRpbHMvY29sLWNhY2hlJyk7Cgp2YXIgQW5jaG9yID0gcmVxdWlyZSgnLi9hbmNob3InKTsKCnZhciBJbWFnZSA9
IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSW1hZ2Uod29ya3NoZWV0LCBtb2RlbCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEltYWdlKTsKCiAgICB0aGlzLndvcmtzaGVldCA9IHdvcmtzaGVldDsKICAgIHRoaXMubW9kZWwgPSBtb2RlbDsKICB9CgogIF9jcmVhdGVDbGFzcyhJbWFnZSwgW3sKICAgIGtleTogIm1vZGVsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBzd2l0Y2ggKHRoaXMudHlwZSkgewogICAgICAgIGNhc2UgJ2JhY2tncm91bmQnOgogICAgICAgICAgcmV0dXJu
IHsKICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLAogICAgICAgICAgICBpbWFnZUlkOiB0aGlzLmltYWdlSWQKICAgICAgICAgIH07CgogICAgICAgIGNhc2UgJ2ltYWdlJzoKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSwKICAgICAgICAgICAgaW1hZ2VJZDogdGhpcy5pbWFnZUlkLAogICAgICAgICAgICBoeXBlcmxpbmtzOiB0aGlzLnJhbmdlLmh5cGVybGlua3MsCiAgICAgICAgICAgIHJhbmdlOiB7CiAgICAgICAgICAgICAgdGw6IHRoaXMucmFuZ2UudGwubW9kZWwsCiAgICAgICAg
ICAgICAgYnI6IHRoaXMucmFuZ2UuYnIgJiYgdGhpcy5yYW5nZS5ici5tb2RlbCwKICAgICAgICAgICAgICBleHQ6IHRoaXMucmFuZ2UuZXh0LAogICAgICAgICAgICAgIGVkaXRBczogdGhpcy5yYW5nZS5lZGl0QXMKICAgICAgICAgICAgfQogICAgICAgICAgfTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBJbWFnZSBUeXBlJyk7CiAgICAgIH0KICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChfcmVmKSB7CiAgICAgIHZhciB0eXBlID0gX3JlZi50eXBlLAogICAgICAgICAg
aW1hZ2VJZCA9IF9yZWYuaW1hZ2VJZCwKICAgICAgICAgIHJhbmdlID0gX3JlZi5yYW5nZSwKICAgICAgICAgIGh5cGVybGlua3MgPSBfcmVmLmh5cGVybGlua3M7CiAgICAgIHRoaXMudHlwZSA9IHR5cGU7CiAgICAgIHRoaXMuaW1hZ2VJZCA9IGltYWdlSWQ7CgogICAgICBpZiAodHlwZSA9PT0gJ2ltYWdlJykgewogICAgICAgIGlmICh0eXBlb2YgcmFuZ2UgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICB2YXIgZGVjb2RlZCA9IGNvbENhY2hlLmRlY29kZShyYW5nZSk7CiAgICAgICAgICB0aGlzLnJhbmdlID0gewogICAgICAg
ICAgICB0bDogbmV3IEFuY2hvcih0aGlzLndvcmtzaGVldCwgewogICAgICAgICAgICAgIGNvbDogZGVjb2RlZC5sZWZ0LAogICAgICAgICAgICAgIHJvdzogZGVjb2RlZC50b3AKICAgICAgICAgICAgfSwgLTEpLAogICAgICAgICAgICBicjogbmV3IEFuY2hvcih0aGlzLndvcmtzaGVldCwgewogICAgICAgICAgICAgIGNvbDogZGVjb2RlZC5yaWdodCwKICAgICAgICAgICAgICByb3c6IGRlY29kZWQuYm90dG9tCiAgICAgICAgICAgIH0sIDApLAogICAgICAgICAgICBlZGl0QXM6ICdvbmVDZWxsJwogICAgICAgICAgfTsKICAg
ICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5yYW5nZSA9IHsKICAgICAgICAgICAgdGw6IG5ldyBBbmNob3IodGhpcy53b3Jrc2hlZXQsIHJhbmdlLnRsLCAwKSwKICAgICAgICAgICAgYnI6IHJhbmdlLmJyICYmIG5ldyBBbmNob3IodGhpcy53b3Jrc2hlZXQsIHJhbmdlLmJyLCAwKSwKICAgICAgICAgICAgZXh0OiByYW5nZS5leHQsCiAgICAgICAgICAgIGVkaXRBczogcmFuZ2UuZWRpdEFzLAogICAgICAgICAgICBoeXBlcmxpbmtzOiBoeXBlcmxpbmtzIHx8IHJhbmdlLmh5cGVybGlua3MKICAgICAgICAgIH07CiAgICAg
ICAgfQogICAgICB9CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSW1hZ2U7Cn0oKTsKCm1vZHVsZS5leHBvcnRzID0gSW1hZ2U7Cgp9LHsiLi4vdXRpbHMvY29sLWNhY2hlIjoxOSwiLi9hbmNob3IiOjJ9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVv
ZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlm
ICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1
ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9y
LCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIF8gPSByZXF1aXJlKCcuLi91dGlscy91bmRlci1kYXNoJyk7Cgp2YXIgTm90ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTm90ZShub3RlKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm90ZSk7CgogICAgdGhpcy5ub3RlID0gbm90ZTsKICB9CgogIF9jcmVhdGVDbGFzcyhOb3RlLCBbewogICAga2V5OiAibW9kZWwiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciB2YWx1ZSA9IG51bGw7CgogICAg
ICBzd2l0Y2ggKF90eXBlb2YodGhpcy5ub3RlKSkgewogICAgICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgICB2YWx1ZSA9IHsKICAgICAgICAgICAgdHlwZTogJ25vdGUnLAogICAgICAgICAgICBub3RlOiB7CiAgICAgICAgICAgICAgdGV4dHM6IFt7CiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLm5vdGUKICAgICAgICAgICAgICB9XQogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB2YWx1ZSA9IHsKICAgICAgICAgICAgdHlwZTogJ25vdGUn
LAogICAgICAgICAgICBub3RlOiB0aGlzLm5vdGUKICAgICAgICAgIH07CiAgICAgICAgICBicmVhazsKICAgICAgfSAvLyBTdWl0YWJsZSBmb3IgYWxsIGNlbGwgY29tbWVudHMKCgogICAgICByZXR1cm4gXy5kZWVwTWVyZ2Uoe30sIE5vdGUuREVGQVVMVF9DT05GSUdTLCB2YWx1ZSk7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdmFyIG5vdGUgPSB2YWx1ZS5ub3RlOwogICAgICB2YXIgdGV4dHMgPSBub3RlLnRleHRzOwoKICAgICAgaWYgKHRleHRzLmxlbmd0aCA9PT0gMSAmJiBPYmplY3Qu
a2V5cyh0ZXh0c1swXSkubGVuZ3RoID09PSAxKSB7CiAgICAgICAgdGhpcy5ub3RlID0gdGV4dHNbMF0udGV4dDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLm5vdGUgPSBub3RlOwogICAgICB9CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJmcm9tTW9kZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21Nb2RlbChtb2RlbCkgewogICAgICB2YXIgbm90ZSA9IG5ldyBOb3RlKCk7CiAgICAgIG5vdGUubW9kZWwgPSBtb2RlbDsKICAgICAgcmV0dXJuIG5vdGU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTm90ZTsKfSgpOwoK
Tm90ZS5ERUZBVUxUX0NPTkZJR1MgPSB7CiAgbm90ZTogewogICAgbWFyZ2luczogewogICAgICBpbnNldG1vZGU6ICdhdXRvJywKICAgICAgaW5zZXQ6IFswLjEzLCAwLjEzLCAwLjI1LCAwLjI1XQogICAgfSwKICAgIHByb3RlY3Rpb246IHsKICAgICAgbG9ja2VkOiAnVHJ1ZScsCiAgICAgIGxvY2tUZXh0OiAnVHJ1ZScKICAgIH0sCiAgICBlZGl0QXM6ICdhYnNvbHV0ZScKICB9Cn07Cm1vZHVsZS5leHBvcnRzID0gTm90ZTsKCn0seyIuLi91dGlscy91bmRlci1kYXNoIjoyNX1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVs
ZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3Jp
cHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29u
c3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCnZhciBjb2xDYWNoZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbC1jYWNoZScpOyAvLyB1c2VkIGJ5IHdvcmtzaGVldCB0byBjYWxjdWxhdGUgc2hlZXQgZGltZW5zaW9ucwoKCnZhciBSYW5nZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUmFuZ2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhp
cywgUmFuZ2UpOwoKICAgIHRoaXMuZGVjb2RlKGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUmFuZ2UsIFt7CiAgICBrZXk6ICJzZXRUTEJSIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUTEJSKHQsIGwsIGIsIHIsIHMpIHsKICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7CiAgICAgICAgLy8gc2V0VExCUih0bCwgYnIsIHMpCiAgICAgICAgdmFyIHRsID0gY29sQ2FjaGUuZGVjb2RlQWRkcmVzcyh0KTsKICAgICAgICB2YXIgYnIgPSBjb2xDYWNoZS5kZWNvZGVBZGRyZXNzKGwpOwogICAgICAgIHRoaXMu
bW9kZWwgPSB7CiAgICAgICAgICB0b3A6IE1hdGgubWluKHRsLnJvdywgYnIucm93KSwKICAgICAgICAgIGxlZnQ6IE1hdGgubWluKHRsLmNvbCwgYnIuY29sKSwKICAgICAgICAgIGJvdHRvbTogTWF0aC5tYXgodGwucm93LCBici5yb3cpLAogICAgICAgICAgcmlnaHQ6IE1hdGgubWF4KHRsLmNvbCwgYnIuY29sKSwKICAgICAgICAgIHNoZWV0TmFtZTogYgogICAgICAgIH07CiAgICAgICAgdGhpcy5zZXRUTEJSKHRsLnJvdywgdGwuY29sLCBici5yb3csIGJyLmNvbCwgcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gc2V0
VExCUih0LCBsLCBiLCByLCBzKQogICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICB0b3A6IE1hdGgubWluKHQsIGIpLAogICAgICAgICAgbGVmdDogTWF0aC5taW4obCwgciksCiAgICAgICAgICBib3R0b206IE1hdGgubWF4KHQsIGIpLAogICAgICAgICAgcmlnaHQ6IE1hdGgubWF4KGwsIHIpLAogICAgICAgICAgc2hlZXROYW1lOiBzCiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImRlY29kZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVjb2RlKGFyZ3YpIHsKICAgICAgc3dpdGNoIChhcmd2
Lmxlbmd0aCkgewogICAgICAgIGNhc2UgNToKICAgICAgICAgIC8vIFt0LGwsYixyLHNdCiAgICAgICAgICB0aGlzLnNldFRMQlIoYXJndlswXSwgYXJndlsxXSwgYXJndlsyXSwgYXJndlszXSwgYXJndls0XSk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSA0OgogICAgICAgICAgLy8gW3QsbCxiLHJdCiAgICAgICAgICB0aGlzLnNldFRMQlIoYXJndlswXSwgYXJndlsxXSwgYXJndlsyXSwgYXJndlszXSk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAzOgogICAgICAgICAgLy8gW3RsLGJyLHNdCiAgICAg
ICAgICB0aGlzLnNldFRMQlIoYXJndlswXSwgYXJndlsxXSwgYXJndlsyXSk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAyOgogICAgICAgICAgLy8gW3RsLGJyXQogICAgICAgICAgdGhpcy5zZXRUTEJSKGFyZ3ZbMF0sIGFyZ3ZbMV0pOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgMToKICAgICAgICAgIHsKICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndlswXTsKCiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJhbmdlKSB7CiAgICAgICAgICAgICAgLy8gY29weSBjb25zdHJ1Y3Rvcgog
ICAgICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgICAgICB0b3A6IHZhbHVlLm1vZGVsLnRvcCwKICAgICAgICAgICAgICAgIGxlZnQ6IHZhbHVlLm1vZGVsLmxlZnQsCiAgICAgICAgICAgICAgICBib3R0b206IHZhbHVlLm1vZGVsLmJvdHRvbSwKICAgICAgICAgICAgICAgIHJpZ2h0OiB2YWx1ZS5tb2RlbC5yaWdodCwKICAgICAgICAgICAgICAgIHNoZWV0TmFtZTogdmFsdWUuc2hlZXROYW1lCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7
CiAgICAgICAgICAgICAgLy8gYW4gYXJndW1lbnRzIGFycmF5CiAgICAgICAgICAgICAgdGhpcy5kZWNvZGUodmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnRvcCAmJiB2YWx1ZS5sZWZ0ICYmIHZhbHVlLmJvdHRvbSAmJiB2YWx1ZS5yaWdodCkgewogICAgICAgICAgICAgIC8vIGEgbW9kZWwKICAgICAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICAgICAgdG9wOiB2YWx1ZS50b3AsCiAgICAgICAgICAgICAgICBsZWZ0OiB2YWx1ZS5sZWZ0LAogICAgICAgICAgICAgICAgYm90dG9tOiB2YWx1
ZS5ib3R0b20sCiAgICAgICAgICAgICAgICByaWdodDogdmFsdWUucmlnaHQsCiAgICAgICAgICAgICAgICBzaGVldE5hbWU6IHZhbHVlLnNoZWV0TmFtZQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gW3NoZWV0TmFtZSFddGw6YnIKICAgICAgICAgICAgICB2YXIgdGxiciA9IGNvbENhY2hlLmRlY29kZUV4KHZhbHVlKTsKCiAgICAgICAgICAgICAgaWYgKHRsYnIudG9wKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICAgICAgICB0b3A6IHRs
YnIudG9wLAogICAgICAgICAgICAgICAgICBsZWZ0OiB0bGJyLmxlZnQsCiAgICAgICAgICAgICAgICAgIGJvdHRvbTogdGxici5ib3R0b20sCiAgICAgICAgICAgICAgICAgIHJpZ2h0OiB0bGJyLnJpZ2h0LAogICAgICAgICAgICAgICAgICBzaGVldE5hbWU6IHRsYnIuc2hlZXROYW1lCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICAgICAgICB0b3A6IHRsYnIucm93LAogICAgICAgICAgICAgICAgICBsZWZ0OiB0bGJyLmNv
bCwKICAgICAgICAgICAgICAgICAgYm90dG9tOiB0bGJyLnJvdywKICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRsYnIuY29sLAogICAgICAgICAgICAgICAgICBzaGVldE5hbWU6IHRsYnIuc2hlZXROYW1lCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIHRvcDogMCwKICAgICAgICAgICAgbGVmdDogMCwKICAgICAgICAgICAgYm90dG9t
OiAwLAogICAgICAgICAgICByaWdodDogMAogICAgICAgICAgfTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMgdG8gX2dldERpbWVuc2lvbnMoKSAtICIuY29uY2F0KGFyZ3YubGVuZ3RoKSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJleHBhbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGV4cGFuZCh0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQpIHsKICAgICAgaWYgKCF0aGlzLm1vZGVsLnRvcCB8fCB0
b3AgPCB0aGlzLnRvcCkgdGhpcy50b3AgPSB0b3A7CiAgICAgIGlmICghdGhpcy5tb2RlbC5sZWZ0IHx8IGxlZnQgPCB0aGlzLmxlZnQpIHRoaXMubGVmdCA9IGxlZnQ7CiAgICAgIGlmICghdGhpcy5tb2RlbC5ib3R0b20gfHwgYm90dG9tID4gdGhpcy5ib3R0b20pIHRoaXMuYm90dG9tID0gYm90dG9tOwogICAgICBpZiAoIXRoaXMubW9kZWwucmlnaHQgfHwgcmlnaHQgPiB0aGlzLnJpZ2h0KSB0aGlzLnJpZ2h0ID0gcmlnaHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZXhwYW5kUm93IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBl
eHBhbmRSb3cocm93KSB7CiAgICAgIGlmIChyb3cpIHsKICAgICAgICB2YXIgZGltZW5zaW9ucyA9IHJvdy5kaW1lbnNpb25zLAogICAgICAgICAgICBudW1iZXIgPSByb3cubnVtYmVyOwoKICAgICAgICBpZiAoZGltZW5zaW9ucykgewogICAgICAgICAgdGhpcy5leHBhbmQobnVtYmVyLCBkaW1lbnNpb25zLm1pbiwgbnVtYmVyLCBkaW1lbnNpb25zLm1heCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZXhwYW5kVG9BZGRyZXNzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBleHBhbmRUb0FkZHJlc3Mo
YWRkcmVzc1N0cikgewogICAgICB2YXIgYWRkcmVzcyA9IGNvbENhY2hlLmRlY29kZUV4KGFkZHJlc3NTdHIpOwogICAgICB0aGlzLmV4cGFuZChhZGRyZXNzLnJvdywgYWRkcmVzcy5jb2wsIGFkZHJlc3Mucm93LCBhZGRyZXNzLmNvbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9TdHJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICByZXR1cm4gdGhpcy5yYW5nZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbnRlcnNlY3RzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlcnNlY3RzKG90aGVy
KSB7CiAgICAgIGlmIChvdGhlci5zaGVldE5hbWUgJiYgdGhpcy5zaGVldE5hbWUgJiYgb3RoZXIuc2hlZXROYW1lICE9PSB0aGlzLnNoZWV0TmFtZSkgcmV0dXJuIGZhbHNlOwogICAgICBpZiAob3RoZXIuYm90dG9tIDwgdGhpcy50b3ApIHJldHVybiBmYWxzZTsKICAgICAgaWYgKG90aGVyLnRvcCA+IHRoaXMuYm90dG9tKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmIChvdGhlci5yaWdodCA8IHRoaXMubGVmdCkgcmV0dXJuIGZhbHNlOwogICAgICBpZiAob3RoZXIubGVmdCA+IHRoaXMucmlnaHQpIHJldHVybiBmYWxzZTsKICAg
ICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29udGFpbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRhaW5zKGFkZHJlc3NTdHIpIHsKICAgICAgdmFyIGFkZHJlc3MgPSBjb2xDYWNoZS5kZWNvZGVFeChhZGRyZXNzU3RyKTsKICAgICAgcmV0dXJuIHRoaXMuY29udGFpbnNFeChhZGRyZXNzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb250YWluc0V4IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb250YWluc0V4KGFkZHJlc3MpIHsKICAgICAgaWYgKGFkZHJlc3Muc2hlZXROYW1lICYmIHRoaXMuc2hl
ZXROYW1lICYmIGFkZHJlc3Muc2hlZXROYW1lICE9PSB0aGlzLnNoZWV0TmFtZSkgcmV0dXJuIGZhbHNlOwogICAgICByZXR1cm4gYWRkcmVzcy5yb3cgPj0gdGhpcy50b3AgJiYgYWRkcmVzcy5yb3cgPD0gdGhpcy5ib3R0b20gJiYgYWRkcmVzcy5jb2wgPj0gdGhpcy5sZWZ0ICYmIGFkZHJlc3MuY29sIDw9IHRoaXMucmlnaHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZm9yRWFjaEFkZHJlc3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvckVhY2hBZGRyZXNzKGNiKSB7CiAgICAgIGZvciAodmFyIGNvbCA9IHRoaXMubGVmdDsg
Y29sIDw9IHRoaXMucmlnaHQ7IGNvbCsrKSB7CiAgICAgICAgZm9yICh2YXIgcm93ID0gdGhpcy50b3A7IHJvdyA8PSB0aGlzLmJvdHRvbTsgcm93KyspIHsKICAgICAgICAgIGNiKGNvbENhY2hlLmVuY29kZUFkZHJlc3Mocm93LCBjb2wpLCByb3csIGNvbCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidG9wIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC50b3AgfHwgMTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0
aGlzLm1vZGVsLnRvcCA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogImxlZnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmxlZnQgfHwgMTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLm1vZGVsLmxlZnQgPSB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJib3R0b20iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmJvdHRvbSB8fCAxOwogICAgfSwKICAgIHNldDogZnVuY3Rp
b24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMubW9kZWwuYm90dG9tID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicmlnaHQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnJpZ2h0IHx8IDE7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5tb2RlbC5yaWdodCA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInNoZWV0TmFtZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuc2hl
ZXROYW1lOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMubW9kZWwuc2hlZXROYW1lID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3NlcmlhbGlzZWRTaGVldE5hbWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBzaGVldE5hbWUgPSB0aGlzLm1vZGVsLnNoZWV0TmFtZTsKCiAgICAgIGlmIChzaGVldE5hbWUpIHsKICAgICAgICBpZiAoL15bYS16QS1aMC05XSokLy50ZXN0KHNoZWV0TmFtZSkpIHsKICAgICAgICAgIHJldHVybiAiIi5jb25jYXQoc2hl
ZXROYW1lLCAiISIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICInIi5jb25jYXQoc2hlZXROYW1lLCAiJyEiKTsKICAgICAgfQoKICAgICAgcmV0dXJuICcnOwogICAgfQogIH0sIHsKICAgIGtleTogInRsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gY29sQ2FjaGUubjJsKHRoaXMubGVmdCkgKyB0aGlzLnRvcDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICIkdCRsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gIiQiLmNvbmNhdChjb2xDYWNoZS5uMmwodGhpcy5sZWZ0
KSwgIiQiKS5jb25jYXQodGhpcy50b3ApOwogICAgfQogIH0sIHsKICAgIGtleTogImJyIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gY29sQ2FjaGUubjJsKHRoaXMucmlnaHQpICsgdGhpcy5ib3R0b207CiAgICB9CiAgfSwgewogICAga2V5OiAiJGIkciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICIkIi5jb25jYXQoY29sQ2FjaGUubjJsKHRoaXMucmlnaHQpLCAiJCIpLmNvbmNhdCh0aGlzLmJvdHRvbSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmFuZ2UiLAogICAg
Z2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAiIi5jb25jYXQodGhpcy5fc2VyaWFsaXNlZFNoZWV0TmFtZSArIHRoaXMudGwsICI6IikuY29uY2F0KHRoaXMuYnIpOwogICAgfQogIH0sIHsKICAgIGtleTogIiRyYW5nZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICIiLmNvbmNhdCh0aGlzLl9zZXJpYWxpc2VkU2hlZXROYW1lICsgdGhpcy4kdCRsLCAiOiIpLmNvbmNhdCh0aGlzLiRiJHIpOwogICAgfQogIH0sIHsKICAgIGtleTogInNob3J0UmFuZ2UiLAogICAgZ2V0OiBmdW5jdGlv
biBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNvdW50ID4gMSA/IHRoaXMucmFuZ2UgOiB0aGlzLl9zZXJpYWxpc2VkU2hlZXROYW1lICsgdGhpcy50bDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICIkc2hvcnRSYW5nZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuY291bnQgPiAxID8gdGhpcy4kcmFuZ2UgOiB0aGlzLl9zZXJpYWxpc2VkU2hlZXROYW1lICsgdGhpcy4kdCRsOwogICAgfQogIH0sIHsKICAgIGtleTogImNvdW50IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBy
ZXR1cm4gKDEgKyB0aGlzLmJvdHRvbSAtIHRoaXMudG9wKSAqICgxICsgdGhpcy5yaWdodCAtIHRoaXMubGVmdCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUmFuZ2U7Cn0oKTsKCm1vZHVsZS5leHBvcnRzID0gUmFuZ2U7Cgp9LHsiLi4vdXRpbHMvY29sLWNhY2hlIjoxOX1dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkg
eyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0
b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0K
CnZhciBfID0gcmVxdWlyZSgnLi4vdXRpbHMvdW5kZXItZGFzaCcpOwoKdmFyIEVudW1zID0gcmVxdWlyZSgnLi9lbnVtcycpOwoKdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi4vdXRpbHMvY29sLWNhY2hlJyk7Cgp2YXIgQ2VsbCA9IHJlcXVpcmUoJy4vY2VsbCcpOwoKdmFyIFJvdyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUm93KHdvcmtzaGVldCwgbnVtYmVyKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm93KTsKCiAgICB0aGlzLl93b3Jrc2hlZXQgPSB3b3Jrc2hlZXQ7CiAgICB0aGlz
Ll9udW1iZXIgPSBudW1iZXI7CiAgICB0aGlzLl9jZWxscyA9IFtdOwogICAgdGhpcy5zdHlsZSA9IHt9OwogICAgdGhpcy5vdXRsaW5lTGV2ZWwgPSAwOwogIH0gLy8gcmV0dXJuIHRoZSByb3cgbnVtYmVyCgoKICBfY3JlYXRlQ2xhc3MoUm93LCBbewogICAga2V5OiAiY29tbWl0IiwKICAgIC8vIEluZm9ybSBTdHJlYW1pbmcgV3JpdGVyIHRoYXQgdGhpcyByb3cgKGFuZCBhbGwgcm93cyBiZWZvcmUgaXQpIGFyZSBjb21wbGV0ZQogICAgLy8gYW5kIHJlYWR5IHRvIHdyaXRlLiBIYXMgbm8gZWZmZWN0IG9uIFdvcmtzaGVldCBk
b2N1bWVudAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbW1pdCgpIHsKICAgICAgdGhpcy5fd29ya3NoZWV0Ll9jb21taXRSb3codGhpcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUKCiAgICB9IC8vIGhlbHBzIEdDIGJ5IGJyZWFraW5nIGN5Y2xpYyByZWZlcmVuY2VzCgogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIGRlbGV0ZSB0aGlzLl93b3Jrc2hlZXQ7CiAgICAgIGRlbGV0ZSB0aGlzLl9jZWxsczsKICAgICAgZGVsZXRl
IHRoaXMuc3R5bGU7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmluZENlbGwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRDZWxsKGNvbE51bWJlcikgewogICAgICByZXR1cm4gdGhpcy5fY2VsbHNbY29sTnVtYmVyIC0gMV07CiAgICB9IC8vIGdpdmVuIHthZGRyZXNzLCByb3csIGNvbH0sIGZpbmQgb3IgY3JlYXRlIG5ldyBjZWxsCgogIH0sIHsKICAgIGtleTogImdldENlbGxFeCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2VsbEV4KGFkZHJlc3MpIHsKICAgICAgdmFyIGNlbGwgPSB0aGlzLl9jZWxsc1thZGRyZXNzLmNv
bCAtIDFdOwoKICAgICAgaWYgKCFjZWxsKSB7CiAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuX3dvcmtzaGVldC5nZXRDb2x1bW4oYWRkcmVzcy5jb2wpOwoKICAgICAgICBjZWxsID0gbmV3IENlbGwodGhpcywgY29sdW1uLCBhZGRyZXNzLmFkZHJlc3MpOwogICAgICAgIHRoaXMuX2NlbGxzW2FkZHJlc3MuY29sIC0gMV0gPSBjZWxsOwogICAgICB9CgogICAgICByZXR1cm4gY2VsbDsKICAgIH0gLy8gZ2V0IGNlbGwgYnkga2V5LCBsZXR0ZXIgb3IgY29sdW1uIG51bWJlcgoKICB9LCB7CiAgICBrZXk6ICJnZXRDZWxsIiwKICAg
IHZhbHVlOiBmdW5jdGlvbiBnZXRDZWxsKGNvbCkgewogICAgICBpZiAodHlwZW9mIGNvbCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAvLyBpcyBpdCBhIGtleT8KICAgICAgICB2YXIgY29sdW1uID0gdGhpcy5fd29ya3NoZWV0LmdldENvbHVtbktleShjb2wpOwoKICAgICAgICBpZiAoY29sdW1uKSB7CiAgICAgICAgICBjb2wgPSBjb2x1bW4ubnVtYmVyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb2wgPSBjb2xDYWNoZS5sMm4oY29sKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLl9jZWxsc1tj
b2wgLSAxXSB8fCB0aGlzLmdldENlbGxFeCh7CiAgICAgICAgYWRkcmVzczogY29sQ2FjaGUuZW5jb2RlQWRkcmVzcyh0aGlzLl9udW1iZXIsIGNvbCksCiAgICAgICAgcm93OiB0aGlzLl9udW1iZXIsCiAgICAgICAgY29sOiBjb2wKICAgICAgfSk7CiAgICB9IC8vIHJlbW92ZSBjZWxsKHMpIGFuZCBzaGlmdCBhbGwgaGlnaGVyIGNlbGxzIGRvd24gYnkgY291bnQKCiAgfSwgewogICAga2V5OiAic3BsaWNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGNvdW50KSB7CiAgICAgIHZhciBuS2VlcCA9IHN0YXJ0
ICsgY291bnQ7CgogICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW5zZXJ0cyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgICAgaW5zZXJ0c1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07CiAgICAgIH0KCiAgICAgIHZhciBuRXhwYW5kID0gaW5zZXJ0cy5sZW5ndGggLSBjb3VudDsKICAgICAgdmFyIG5FbmQgPSB0aGlzLl9jZWxscy5sZW5ndGg7CiAgICAgIHZhciBpOwogICAgICB2YXIgY1NyYzsKICAgICAg
dmFyIGNEc3Q7CgogICAgICBpZiAobkV4cGFuZCA8IDApIHsKICAgICAgICAvLyByZW1vdmUgY2VsbHMKICAgICAgICBmb3IgKGkgPSBzdGFydCArIGluc2VydHMubGVuZ3RoOyBpIDw9IG5FbmQ7IGkrKykgewogICAgICAgICAgY0RzdCA9IHRoaXMuX2NlbGxzW2kgLSAxXTsKICAgICAgICAgIGNTcmMgPSB0aGlzLl9jZWxsc1tpIC0gbkV4cGFuZCAtIDFdOwoKICAgICAgICAgIGlmIChjU3JjKSB7CiAgICAgICAgICAgIGNEc3QgPSB0aGlzLmdldENlbGwoaSk7CiAgICAgICAgICAgIGNEc3QudmFsdWUgPSBjU3JjLnZhbHVlOwog
ICAgICAgICAgICBjRHN0LnN0eWxlID0gY1NyYy5zdHlsZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlCgogICAgICAgICAgICBjRHN0Ll9jb21tZW50ID0gY1NyYy5fY29tbWVudDsKICAgICAgICAgIH0gZWxzZSBpZiAoY0RzdCkgewogICAgICAgICAgICBjRHN0LnZhbHVlID0gbnVsbDsKICAgICAgICAgICAgY0RzdC5zdHlsZSA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUKCiAgICAgICAgICAgIGNEc3QuX2NvbW1lbnQgPSB1bmRl
ZmluZWQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKG5FeHBhbmQgPiAwKSB7CiAgICAgICAgLy8gaW5zZXJ0IG5ldyBjZWxscwogICAgICAgIGZvciAoaSA9IG5FbmQ7IGkgPj0gbktlZXA7IGktLSkgewogICAgICAgICAgY1NyYyA9IHRoaXMuX2NlbGxzW2kgLSAxXTsKCiAgICAgICAgICBpZiAoY1NyYykgewogICAgICAgICAgICBjRHN0ID0gdGhpcy5nZXRDZWxsKGkgKyBuRXhwYW5kKTsKICAgICAgICAgICAgY0RzdC52YWx1ZSA9IGNTcmMudmFsdWU7CiAgICAgICAgICAgIGNEc3Quc3R5bGUgPSBj
U3JjLnN0eWxlOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUKCiAgICAgICAgICAgIGNEc3QuX2NvbW1lbnQgPSBjU3JjLl9jb21tZW50OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fY2VsbHNbaSArIG5FeHBhbmQgLSAxXSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gLy8gbm93IGFkZCB0aGUgbmV3IHZhbHVlcwoKCiAgICAgIGZvciAoaSA9IDA7IGkgPCBpbnNlcnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgY0RzdCA9IHRoaXMu
Z2V0Q2VsbChzdGFydCArIGkpOwogICAgICAgIGNEc3QudmFsdWUgPSBpbnNlcnRzW2ldOwogICAgICAgIGNEc3Quc3R5bGUgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlCgogICAgICAgIGNEc3QuX2NvbW1lbnQgPSB1bmRlZmluZWQ7CiAgICAgIH0KICAgIH0gLy8gSXRlcmF0ZSBvdmVyIGFsbCBub24tbnVsbCBjZWxscyBpbiB0aGlzIHJvdwoKICB9LCB7CiAgICBrZXk6ICJlYWNoQ2VsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZWFjaENlbGwob3B0aW9ucywgaXRlcmF0ZWUp
IHsKICAgICAgaWYgKCFpdGVyYXRlZSkgewogICAgICAgIGl0ZXJhdGVlID0gb3B0aW9uczsKICAgICAgICBvcHRpb25zID0gbnVsbDsKICAgICAgfQoKICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlRW1wdHkpIHsKICAgICAgICB2YXIgbiA9IHRoaXMuX2NlbGxzLmxlbmd0aDsKCiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbjsgaSsrKSB7CiAgICAgICAgICBpdGVyYXRlZSh0aGlzLmdldENlbGwoaSksIGkpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9jZWxscy5mb3JFYWNo
KGZ1bmN0aW9uIChjZWxsLCBpbmRleCkgewogICAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC50eXBlICE9PSBFbnVtcy5WYWx1ZVR5cGUuTnVsbCkgewogICAgICAgICAgICBpdGVyYXRlZShjZWxsLCBpbmRleCArIDEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gUGFnZSBCcmVha3MKCiAgfSwgewogICAga2V5OiAiYWRkUGFnZUJyZWFrIiwKICAgIHZh
bHVlOiBmdW5jdGlvbiBhZGRQYWdlQnJlYWsobGZ0LCByZ2h0KSB7CiAgICAgIHZhciB3cyA9IHRoaXMuX3dvcmtzaGVldDsKICAgICAgdmFyIGxlZnQgPSBNYXRoLm1heCgwLCBsZnQgLSAxKSB8fCAwOwogICAgICB2YXIgcmlnaHQgPSBNYXRoLm1heCgwLCByZ2h0IC0gMSkgfHwgMTY4Mzg7CiAgICAgIHZhciBwYiA9IHsKICAgICAgICBpZDogdGhpcy5fbnVtYmVyLAogICAgICAgIG1heDogcmlnaHQsCiAgICAgICAgbWFuOiAxCiAgICAgIH07CiAgICAgIGlmIChsZWZ0KSBwYi5taW4gPSBsZWZ0OwogICAgICB3cy5yb3dCcmVh
a3MucHVzaChwYik7CiAgICB9IC8vIHJldHVybiBhIHNwYXJzZSBhcnJheSBvZiBjZWxsIHZhbHVlcwoKICB9LCB7CiAgICBrZXk6ICJfYXBwbHlTdHlsZSIsCiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBzdHlsZXMKICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwbHlTdHlsZShuYW1lLCB2YWx1ZSkgewogICAgICB0aGlzLnN0eWxlW25hbWVdID0gdmFsdWU7CgogICAgICB0aGlzLl9jZWxscy5mb3JFYWNoKGZ1bmN0aW9u
IChjZWxsKSB7CiAgICAgICAgaWYgKGNlbGwpIHsKICAgICAgICAgIGNlbGxbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogIm51bWJlciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX251bWJlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ3b3Jrc2hlZXQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXQ7CiAgICB9CiAgfSwgewogICAga2V5OiAi
dmFsdWVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgdmFsdWVzID0gW107CgogICAgICB0aGlzLl9jZWxscy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsKSB7CiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC50eXBlICE9PSBFbnVtcy5WYWx1ZVR5cGUuTnVsbCkgewogICAgICAgICAgdmFsdWVzW2NlbGwuY29sXSA9IGNlbGwudmFsdWU7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJldHVybiB2YWx1ZXM7CiAgICB9IC8vIHNldCB0aGUgdmFsdWVzIGJ5IGNvbnRpZ3VvdXMgb3Igc3BhcnNlIGFycmF5LCBv
ciBieSBrZXknZCBvYmplY3QgbGl0ZXJhbAogICAgLAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vIHRoaXMgb3BlcmF0aW9uIGlzIG5vdCBhZGRpdGl2ZSAtIGFueSBwcmlvciBjZWxscyBhcmUgcmVtb3ZlZAogICAgICB0aGlzLl9jZWxscyA9IFtdOwoKICAgICAgaWYgKCF2YWx1ZSkgey8vIGVtcHR5IHJvdwogICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICB2YXIgb2Zmc2V0ID0gMDsKCiAgICAgICAgaWYgKHZhbHVl
Lmhhc093blByb3BlcnR5KCcwJykpIHsKICAgICAgICAgIC8vIGNvbnRpZ3VvdXMgYXJyYXkgLSBzdGFydCBhdCBjb2x1bW4gMQogICAgICAgICAgb2Zmc2V0ID0gMTsKICAgICAgICB9CgogICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICBpZiAoaXRlbSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIF90aGlzLmdldENlbGxFeCh7CiAgICAgICAgICAgICAgYWRkcmVzczogY29sQ2FjaGUuZW5jb2RlQWRkcmVzcyhfdGhpcy5fbnVtYmVyLCBpbmRleCArIG9mZnNldCksCiAg
ICAgICAgICAgICAgcm93OiBfdGhpcy5fbnVtYmVyLAogICAgICAgICAgICAgIGNvbDogaW5kZXggKyBvZmZzZXQKICAgICAgICAgICAgfSkudmFsdWUgPSBpdGVtOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIGFzc3VtZSBvYmplY3Qgd2l0aCBjb2x1bW4ga2V5cwogICAgICAgIHRoaXMuX3dvcmtzaGVldC5lYWNoQ29sdW1uS2V5KGZ1bmN0aW9uIChjb2x1bW4sIGtleSkgewogICAgICAgICAgaWYgKHZhbHVlW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBfdGhpcy5n
ZXRDZWxsRXgoewogICAgICAgICAgICAgIGFkZHJlc3M6IGNvbENhY2hlLmVuY29kZUFkZHJlc3MoX3RoaXMuX251bWJlciwgY29sdW1uLm51bWJlciksCiAgICAgICAgICAgICAgcm93OiBfdGhpcy5fbnVtYmVyLAogICAgICAgICAgICAgIGNvbDogY29sdW1uLm51bWJlcgogICAgICAgICAgICB9KS52YWx1ZSA9IHZhbHVlW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0gLy8gcmV0dXJucyB0cnVlIGlmIHRoZSByb3cgaW5jbHVkZXMgYXQgbGVhc3Qgb25lIGNlbGwgd2l0aCBhIHZhbHVlCgogIH0s
IHsKICAgIGtleTogImhhc1ZhbHVlcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIF8uc29tZSh0aGlzLl9jZWxscywgZnVuY3Rpb24gKGNlbGwpIHsKICAgICAgICByZXR1cm4gY2VsbCAmJiBjZWxsLnR5cGUgIT09IEVudW1zLlZhbHVlVHlwZS5OdWxsOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjZWxsQ291bnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jZWxscy5sZW5ndGg7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWN0dWFsQ2VsbENv
dW50IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgY291bnQgPSAwOwogICAgICB0aGlzLmVhY2hDZWxsKGZ1bmN0aW9uICgpIHsKICAgICAgICBjb3VudCsrOwogICAgICB9KTsKICAgICAgcmV0dXJuIGNvdW50OwogICAgfSAvLyBnZXQgdGhlIG1pbiBhbmQgbWF4IGNvbHVtbiBudW1iZXIgZm9yIHRoZSBub24tbnVsbCBjZWxscyBpbiB0aGlzIHJvdyBvciBudWxsCgogIH0sIHsKICAgIGtleTogImRpbWVuc2lvbnMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBtaW4gPSAwOwogICAg
ICB2YXIgbWF4ID0gMDsKCiAgICAgIHRoaXMuX2NlbGxzLmZvckVhY2goZnVuY3Rpb24gKGNlbGwpIHsKICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLnR5cGUgIT09IEVudW1zLlZhbHVlVHlwZS5OdWxsKSB7CiAgICAgICAgICBpZiAoIW1pbiB8fCBtaW4gPiBjZWxsLmNvbCkgewogICAgICAgICAgICBtaW4gPSBjZWxsLmNvbDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAobWF4IDwgY2VsbC5jb2wpIHsKICAgICAgICAgICAgbWF4ID0gY2VsbC5jb2w7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJl
dHVybiBtaW4gPiAwID8gewogICAgICAgIG1pbjogbWluLAogICAgICAgIG1heDogbWF4CiAgICAgIH0gOiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogIm51bUZtdCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3R5bGUubnVtRm10OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX2FwcGx5U3R5bGUoJ251bUZtdCcsIHZhbHVlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb250IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBy
ZXR1cm4gdGhpcy5zdHlsZS5mb250OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX2FwcGx5U3R5bGUoJ2ZvbnQnLCB2YWx1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWxpZ25tZW50IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5zdHlsZS5hbGlnbm1lbnQ7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fYXBwbHlTdHlsZSgnYWxpZ25tZW50JywgdmFsdWUpOwogICAgfQogIH0sIHsKICAgIGtleTog
InByb3RlY3Rpb24iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0eWxlLnByb3RlY3Rpb247CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fYXBwbHlTdHlsZSgncHJvdGVjdGlvbicsIHZhbHVlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJib3JkZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0eWxlLmJvcmRlcjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLl9h
cHBseVN0eWxlKCdib3JkZXInLCB2YWx1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmlsbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3R5bGUuZmlsbDsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLl9hcHBseVN0eWxlKCdmaWxsJywgdmFsdWUpOwogICAgfQogIH0sIHsKICAgIGtleTogImhpZGRlbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICEhdGhpcy5faGlkZGVuOwogICAgfSwKICAgIHNldDogZnVuY3Rp
b24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX2hpZGRlbiA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogIm91dGxpbmVMZXZlbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX291dGxpbmVMZXZlbCB8fCAwOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX291dGxpbmVMZXZlbCA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbGxhcHNlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICEhKHRoaXMu
X291dGxpbmVMZXZlbCAmJiB0aGlzLl9vdXRsaW5lTGV2ZWwgPj0gdGhpcy5fd29ya3NoZWV0LnByb3BlcnRpZXMub3V0bGluZUxldmVsUm93KTsKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICB9LCB7CiAgICBrZXk6ICJtb2RlbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIGNlbGxzID0gW107CiAgICAgIHZhciBtaW4gPSAwOwogICAgICB2YXIgbWF4ID0gMDsKCiAgICAgIHRoaXMuX2NlbGxzLmZv
ckVhY2goZnVuY3Rpb24gKGNlbGwpIHsKICAgICAgICBpZiAoY2VsbCkgewogICAgICAgICAgdmFyIGNlbGxNb2RlbCA9IGNlbGwubW9kZWw7CgogICAgICAgICAgaWYgKGNlbGxNb2RlbCkgewogICAgICAgICAgICBpZiAoIW1pbiB8fCBtaW4gPiBjZWxsLmNvbCkgewogICAgICAgICAgICAgIG1pbiA9IGNlbGwuY29sOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobWF4IDwgY2VsbC5jb2wpIHsKICAgICAgICAgICAgICBtYXggPSBjZWxsLmNvbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2VsbHMucHVzaChj
ZWxsTW9kZWwpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CgogICAgICByZXR1cm4gdGhpcy5oZWlnaHQgfHwgY2VsbHMubGVuZ3RoID8gewogICAgICAgIGNlbGxzOiBjZWxscywKICAgICAgICBudW1iZXI6IHRoaXMubnVtYmVyLAogICAgICAgIG1pbjogbWluLAogICAgICAgIG1heDogbWF4LAogICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsCiAgICAgICAgc3R5bGU6IHRoaXMuc3R5bGUsCiAgICAgICAgaGlkZGVuOiB0aGlzLmhpZGRlbiwKICAgICAgICBvdXRsaW5lTGV2ZWw6IHRoaXMub3V0bGluZUxldmVs
LAogICAgICAgIGNvbGxhcHNlZDogdGhpcy5jb2xsYXBzZWQKICAgICAgfSA6IG51bGw7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBpZiAodmFsdWUubnVtYmVyICE9PSB0aGlzLl9udW1iZXIpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcm93IG51bWJlciBpbiBtb2RlbCcpOwogICAgICB9CgogICAgICB0aGlzLl9jZWxscyA9IFtdOwogICAgICB2YXIgcHJldmlvdXNBZGRyZXNzOwogICAgICB2YWx1ZS5jZWxscy5mb3JFYWNo
KGZ1bmN0aW9uIChjZWxsTW9kZWwpIHsKICAgICAgICBzd2l0Y2ggKGNlbGxNb2RlbC50eXBlKSB7CiAgICAgICAgICBjYXNlIENlbGwuVHlwZXMuTWVyZ2U6CiAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSAtIGRvbid0IGFkZCB0aGlzIHR5cGVzCiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICB2YXIgYWRkcmVzczsKCiAgICAgICAgICAgICAgaWYgKGNlbGxNb2RlbC5hZGRyZXNzKSB7CiAgICAgICAgICAgICAgICBhZGRyZXNzID0gY29sQ2FjaGUuZGVj
b2RlQWRkcmVzcyhjZWxsTW9kZWwuYWRkcmVzcyk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmV2aW91c0FkZHJlc3MpIHsKICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSA8Yz4gZWxlbWVudCB3aXRob3V0IGFuIHIgYXR0cmlidXRlCiAgICAgICAgICAgICAgICAvLyBBc3N1bWUgdGhhdCBpdCdzIHRoZSBjZWxsIGZvciB0aGUgbmV4dCBjb2x1bW4KICAgICAgICAgICAgICAgIHZhciBfcHJldmlvdXNBZGRyZXNzID0gcHJldmlvdXNBZGRyZXNzLAogICAgICAgICAgICAgICAgICAgIHJvdyA9IF9wcmV2aW91c0FkZHJl
c3Mucm93OwogICAgICAgICAgICAgICAgdmFyIGNvbCA9IHByZXZpb3VzQWRkcmVzcy5jb2wgKyAxOwogICAgICAgICAgICAgICAgYWRkcmVzcyA9IHsKICAgICAgICAgICAgICAgICAgcm93OiByb3csCiAgICAgICAgICAgICAgICAgIGNvbDogY29sLAogICAgICAgICAgICAgICAgICBhZGRyZXNzOiBjb2xDYWNoZS5lbmNvZGVBZGRyZXNzKHJvdywgY29sKSwKICAgICAgICAgICAgICAgICAgJGNvbCRyb3c6ICIkIi5jb25jYXQoY29sQ2FjaGUubjJsKGNvbCksICIkIikuY29uY2F0KHJvdykKICAgICAgICAgICAgICAgIH07CiAg
ICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBwcmV2aW91c0FkZHJlc3MgPSBhZGRyZXNzOwoKICAgICAgICAgICAgICB2YXIgY2VsbCA9IF90aGlzMi5nZXRDZWxsRXgoYWRkcmVzcyk7CgogICAgICAgICAgICAgIGNlbGwubW9kZWwgPSBjZWxsTW9kZWw7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKHZhbHVlLmhlaWdodCkgewogICAgICAgIHRoaXMuaGVpZ2h0ID0gdmFsdWUuaGVpZ2h0OwogICAgICB9IGVsc2UgewogICAgICAgIGRlbGV0ZSB0aGlz
LmhlaWdodDsKICAgICAgfQoKICAgICAgdGhpcy5oaWRkZW4gPSB2YWx1ZS5oaWRkZW47CiAgICAgIHRoaXMub3V0bGluZUxldmVsID0gdmFsdWUub3V0bGluZUxldmVsIHx8IDA7CiAgICAgIHRoaXMuc3R5bGUgPSB2YWx1ZS5zdHlsZSAmJiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbHVlLnN0eWxlKSkgfHwge307CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUm93Owp9KCk7Cgptb2R1bGUuZXhwb3J0cyA9IFJvdzsKCn0seyIuLi91dGlscy9jb2wtY2FjaGUiOjE5LCIuLi91dGlscy91bmRlci1kYXNoIjoyNSwiLi9jZWxs
IjozLCIuL2VudW1zIjo3fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5n
dGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1By
b3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKLyogZXNsaW50LWRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi8KdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi4vdXRpbHMvY29sLWNhY2hlJyk7Cgp2YXIgQ29sdW1uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvLyB3cmFw
cGVyIGFyb3VuZCBjb2x1bW4gbW9kZWwsIGFsbG93aW5nIGFjY2VzcyBhbmQgbWFuaXB1bGF0aW9uCiAgZnVuY3Rpb24gQ29sdW1uKHRhYmxlLCBjb2x1bW4sIGluZGV4KSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sdW1uKTsKCiAgICB0aGlzLnRhYmxlID0gdGFibGU7CiAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjsKICAgIHRoaXMuaW5kZXggPSBpbmRleDsKICB9CgogIF9jcmVhdGVDbGFzcyhDb2x1bW4sIFt7CiAgICBrZXk6ICJfc2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0KG5hbWUsIHZhbHVlKSB7CiAg
ICAgIHRoaXMudGFibGUuY2FjaGVTdGF0ZSgpOwogICAgICB0aGlzLmNvbHVtbltuYW1lXSA9IHZhbHVlOwogICAgfQogICAgLyogZXNsaW50LWRpc2FibGUgbGluZXMtYmV0d2Vlbi1jbGFzcy1tZW1iZXJzICovCgogIH0sIHsKICAgIGtleTogIm5hbWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5uYW1lOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX3NldCgnbmFtZScsIHZhbHVlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWx0
ZXJCdXR0b24iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5maWx0ZXJCdXR0b247CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5jb2x1bW4uZmlsdGVyQnV0dG9uID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAic3R5bGUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5zdHlsZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLmNvbHVtbi5z
dHlsZSA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInRvdGFsc1Jvd0xhYmVsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5jb2x1bW4udG90YWxzUm93TGFiZWw7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fc2V0KCd0b3RhbHNSb3dMYWJlbCcsIHZhbHVlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b3RhbHNSb3dGdW5jdGlvbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuY29sdW1uLnRvdGFs
c1Jvd0Z1bmN0aW9uOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX3NldCgndG90YWxzUm93RnVuY3Rpb24nLCB2YWx1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG90YWxzUm93UmVzdWx0IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5jb2x1bW4udG90YWxzUm93UmVzdWx0OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX3NldCgndG90YWxzUm93UmVzdWx0JywgdmFsdWUpOwogICAgfQogIH0sIHsK
ICAgIGtleTogInRvdGFsc1Jvd0Zvcm11bGEiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbHVtbi50b3RhbHNSb3dGb3JtdWxhOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX3NldCgndG90YWxzUm93Rm9ybXVsYScsIHZhbHVlKTsKICAgIH0KICAgIC8qIGVzbGludC1lbmFibGUgbGluZXMtYmV0d2Vlbi1jbGFzcy1tZW1iZXJzICovCgogIH1dKTsKCiAgcmV0dXJuIENvbHVtbjsKfSgpOwoKdmFyIFRhYmxlID0gLyojX19QVVJFX18qL2Z1bmN0
aW9uICgpIHsKICBmdW5jdGlvbiBUYWJsZSh3b3Jrc2hlZXQsIHRhYmxlKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGUpOwoKICAgIHRoaXMud29ya3NoZWV0ID0gd29ya3NoZWV0OwoKICAgIGlmICh0YWJsZSkgewogICAgICB0aGlzLnRhYmxlID0gdGFibGU7IC8vIGNoZWNrIHRoaW5ncyBhcmUgb2sgZmlyc3QKCiAgICAgIHRoaXMudmFsaWRhdGUoKTsKICAgICAgdGhpcy5zdG9yZSgpOwogICAgfQogIH0KCiAgX2NyZWF0ZUNsYXNzKFRhYmxlLCBbewogICAga2V5OiAiZ2V0Rm9ybXVsYSIsCiAgICB2YWx1ZTog
ZnVuY3Rpb24gZ2V0Rm9ybXVsYShjb2x1bW4pIHsKICAgICAgLy8gZ2V0IHRoZSBjb3JyZWN0IGZvcm11bGEgdG8gYXBwbHkgdG8gdGhlIHRvdGFscyByb3cKICAgICAgc3dpdGNoIChjb2x1bW4udG90YWxzUm93RnVuY3Rpb24pIHsKICAgICAgICBjYXNlICdub25lJzoKICAgICAgICAgIHJldHVybiBudWxsOwoKICAgICAgICBjYXNlICdhdmVyYWdlJzoKICAgICAgICAgIHJldHVybiAiU1VCVE9UQUwoMTAxLCIuY29uY2F0KHRoaXMudGFibGUubmFtZSwgIlsiKS5jb25jYXQoY29sdW1uLm5hbWUsICJdKSIpOwoKICAgICAgICBj
YXNlICdjb3VudE51bXMnOgogICAgICAgICAgcmV0dXJuICJTVUJUT1RBTCgxMDIsIi5jb25jYXQodGhpcy50YWJsZS5uYW1lLCAiWyIpLmNvbmNhdChjb2x1bW4ubmFtZSwgIl0pIik7CgogICAgICAgIGNhc2UgJ2NvdW50JzoKICAgICAgICAgIHJldHVybiAiU1VCVE9UQUwoMTAzLCIuY29uY2F0KHRoaXMudGFibGUubmFtZSwgIlsiKS5jb25jYXQoY29sdW1uLm5hbWUsICJdKSIpOwoKICAgICAgICBjYXNlICdtYXgnOgogICAgICAgICAgcmV0dXJuICJTVUJUT1RBTCgxMDQsIi5jb25jYXQodGhpcy50YWJsZS5uYW1lLCAiWyIp
LmNvbmNhdChjb2x1bW4ubmFtZSwgIl0pIik7CgogICAgICAgIGNhc2UgJ21pbic6CiAgICAgICAgICByZXR1cm4gIlNVQlRPVEFMKDEwNSwiLmNvbmNhdCh0aGlzLnRhYmxlLm5hbWUsICJbIikuY29uY2F0KGNvbHVtbi5uYW1lLCAiXSkiKTsKCiAgICAgICAgY2FzZSAnc3RkRGV2JzoKICAgICAgICAgIHJldHVybiAiU1VCVE9UQUwoMTA2LCIuY29uY2F0KHRoaXMudGFibGUubmFtZSwgIlsiKS5jb25jYXQoY29sdW1uLm5hbWUsICJdKSIpOwoKICAgICAgICBjYXNlICd2YXInOgogICAgICAgICAgcmV0dXJuICJTVUJUT1RBTCgx
MDcsIi5jb25jYXQodGhpcy50YWJsZS5uYW1lLCAiWyIpLmNvbmNhdChjb2x1bW4ubmFtZSwgIl0pIik7CgogICAgICAgIGNhc2UgJ3N1bSc6CiAgICAgICAgICByZXR1cm4gIlNVQlRPVEFMKDEwOSwiLmNvbmNhdCh0aGlzLnRhYmxlLm5hbWUsICJbIikuY29uY2F0KGNvbHVtbi5uYW1lLCAiXSkiKTsKCiAgICAgICAgY2FzZSAnY3VzdG9tJzoKICAgICAgICAgIHJldHVybiBjb2x1bW4udG90YWxzUm93Rm9ybXVsYTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiSW52YWxpZCBUb3RhbHMgUm93
IEZ1bmN0aW9uOiAiLmNvbmNhdChjb2x1bW4udG90YWxzUm93RnVuY3Rpb24pKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInZhbGlkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciB0YWJsZSA9IHRoaXMudGFibGU7IC8vIHNldCBkZWZhdWx0cyBhbmQgY2hlY2sgaXMgdmFsaWQKCiAgICAgIHZhciBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ24obywgbmFtZSwgZGZsdCkgewogICAgICAgIGlmIChvW25hbWVdID09PSB1bmRlZmluZWQp
IHsKICAgICAgICAgIG9bbmFtZV0gPSBkZmx0OwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGFzc2lnbih0YWJsZSwgJ2hlYWRlclJvdycsIHRydWUpOwogICAgICBhc3NpZ24odGFibGUsICd0b3RhbHNSb3cnLCBmYWxzZSk7CiAgICAgIGFzc2lnbih0YWJsZSwgJ3N0eWxlJywge30pOwogICAgICBhc3NpZ24odGFibGUuc3R5bGUsICd0aGVtZScsICdUYWJsZVN0eWxlTWVkaXVtMicpOwogICAgICBhc3NpZ24odGFibGUuc3R5bGUsICdzaG93Rmlyc3RDb2x1bW4nLCBmYWxzZSk7CiAgICAgIGFzc2lnbih0YWJsZS5zdHlsZSwg
J3Nob3dMYXN0Q29sdW1uJywgZmFsc2UpOwogICAgICBhc3NpZ24odGFibGUuc3R5bGUsICdzaG93Um93U3RyaXBlcycsIGZhbHNlKTsKICAgICAgYXNzaWduKHRhYmxlLnN0eWxlLCAnc2hvd0NvbHVtblN0cmlwZXMnLCBmYWxzZSk7CgogICAgICB2YXIgYXNzZXJ0ID0gZnVuY3Rpb24gYXNzZXJ0KHRlc3QsIG1lc3NhZ2UpIHsKICAgICAgICBpZiAoIXRlc3QpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBhc3NlcnQodGFibGUucmVmLCAnVGFibGUgbXVzdCBo
YXZlIHJlZicpOwogICAgICBhc3NlcnQodGFibGUuY29sdW1ucywgJ1RhYmxlIG11c3QgaGF2ZSBjb2x1bW4gZGVmaW5pdGlvbnMnKTsKICAgICAgYXNzZXJ0KHRhYmxlLnJvd3MsICdUYWJsZSBtdXN0IGhhdmUgcm93IGRlZmluaXRpb25zJyk7CiAgICAgIHRhYmxlLnRsID0gY29sQ2FjaGUuZGVjb2RlQWRkcmVzcyh0YWJsZS5yZWYpOwogICAgICB2YXIgX3RhYmxlJHRsID0gdGFibGUudGwsCiAgICAgICAgICByb3cgPSBfdGFibGUkdGwucm93LAogICAgICAgICAgY29sID0gX3RhYmxlJHRsLmNvbDsKICAgICAgYXNzZXJ0KHJv
dyA+IDAsICdUYWJsZSBtdXN0IGJlIG9uIHZhbGlkIHJvdycpOwogICAgICBhc3NlcnQoY29sID4gMCwgJ1RhYmxlIG11c3QgYmUgb24gdmFsaWQgY29sJyk7CiAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGgsCiAgICAgICAgICBmaWx0ZXJIZWlnaHQgPSB0aGlzLmZpbHRlckhlaWdodCwKICAgICAgICAgIHRhYmxlSGVpZ2h0ID0gdGhpcy50YWJsZUhlaWdodDsgLy8gYXV0b0ZpbHRlclJlZiBpcyBhIHJhbmdlIHRoYXQgaW5jbHVkZXMgb3B0aW9uYWwgaGVhZGVycyBvbmx5CgogICAgICB0YWJsZS5hdXRvRmlsdGVyUmVmID0g
Y29sQ2FjaGUuZW5jb2RlKHJvdywgY29sLCByb3cgKyBmaWx0ZXJIZWlnaHQgLSAxLCBjb2wgKyB3aWR0aCAtIDEpOyAvLyB0YWJsZVJlZiBpcyBhIHJhbmdlIHRoYXQgaW5jbHVkZXMgb3B0aW9uYWwgaGVhZGVycyBhbmQgdG90YWxzCgogICAgICB0YWJsZS50YWJsZVJlZiA9IGNvbENhY2hlLmVuY29kZShyb3csIGNvbCwgcm93ICsgdGFibGVIZWlnaHQgLSAxLCBjb2wgKyB3aWR0aCAtIDEpOwogICAgICB0YWJsZS5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgaSkgewogICAgICAgIGFzc2VydChjb2x1bW4ubmFt
ZSwgIkNvbHVtbiAiLmNvbmNhdChpLCAiIG11c3QgaGF2ZSBhIG5hbWUiKSk7CgogICAgICAgIGlmIChpID09PSAwKSB7CiAgICAgICAgICBhc3NpZ24oY29sdW1uLCAndG90YWxzUm93TGFiZWwnLCAnVG90YWwnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYXNzaWduKGNvbHVtbiwgJ3RvdGFsc1Jvd0Z1bmN0aW9uJywgJ25vbmUnKTsKICAgICAgICAgIGNvbHVtbi50b3RhbHNSb3dGb3JtdWxhID0gX3RoaXMuZ2V0Rm9ybXVsYShjb2x1bW4pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAi
c3RvcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3JlKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIC8vIHdoZXJlIHRoZSB0YWJsZSBuZWVkcyB0byBzdG9yZSB0YWJsZSBkYXRhLCBoZWFkZXJzLCBmb290ZXJzIGluCiAgICAgIC8vIHRoZSBzaGVldC4uLgogICAgICB2YXIgYXNzaWduU3R5bGUgPSBmdW5jdGlvbiBhc3NpZ25TdHlsZShjZWxsLCBzdHlsZSkgewogICAgICAgIGlmIChzdHlsZSkgewogICAgICAgICAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAg
ICAgICBjZWxsW2tleV0gPSBzdHlsZVtrZXldOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgdmFyIHdvcmtzaGVldCA9IHRoaXMud29ya3NoZWV0LAogICAgICAgICAgdGFibGUgPSB0aGlzLnRhYmxlOwogICAgICB2YXIgX3RhYmxlJHRsMiA9IHRhYmxlLnRsLAogICAgICAgICAgcm93ID0gX3RhYmxlJHRsMi5yb3csCiAgICAgICAgICBjb2wgPSBfdGFibGUkdGwyLmNvbDsKICAgICAgdmFyIGNvdW50ID0gMDsKCiAgICAgIGlmICh0YWJsZS5oZWFkZXJSb3cpIHsKICAgICAgICB2YXIgciA9IHdvcmtz
aGVldC5nZXRSb3cocm93ICsgY291bnQrKyk7CiAgICAgICAgdGFibGUuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4sIGopIHsKICAgICAgICAgIHZhciBzdHlsZSA9IGNvbHVtbi5zdHlsZSwKICAgICAgICAgICAgICBuYW1lID0gY29sdW1uLm5hbWU7CiAgICAgICAgICB2YXIgY2VsbCA9IHIuZ2V0Q2VsbChjb2wgKyBqKTsKICAgICAgICAgIGNlbGwudmFsdWUgPSBuYW1lOwogICAgICAgICAgYXNzaWduU3R5bGUoY2VsbCwgc3R5bGUpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICB0YWJsZS5yb3dzLmZvckVh
Y2goZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICB2YXIgciA9IHdvcmtzaGVldC5nZXRSb3cocm93ICsgY291bnQrKyk7CiAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaikgewogICAgICAgICAgdmFyIGNlbGwgPSByLmdldENlbGwoY29sICsgaik7CiAgICAgICAgICBjZWxsLnZhbHVlID0gdmFsdWU7CiAgICAgICAgICBhc3NpZ25TdHlsZShjZWxsLCB0YWJsZS5jb2x1bW5zW2pdLnN0eWxlKTsKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICBpZiAodGFibGUudG90YWxzUm93KSB7CiAgICAgICAgdmFy
IF9yID0gd29ya3NoZWV0LmdldFJvdyhyb3cgKyBjb3VudCsrKTsKCiAgICAgICAgdGFibGUuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4sIGopIHsKICAgICAgICAgIHZhciBjZWxsID0gX3IuZ2V0Q2VsbChjb2wgKyBqKTsKCiAgICAgICAgICBpZiAoaiA9PT0gMCkgewogICAgICAgICAgICBjZWxsLnZhbHVlID0gY29sdW1uLnRvdGFsc1Jvd0xhYmVsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGZvcm11bGEgPSBfdGhpczIuZ2V0Rm9ybXVsYShjb2x1bW4pOwoKICAgICAgICAgICAgaWYgKGZv
cm11bGEpIHsKICAgICAgICAgICAgICBjZWxsLnZhbHVlID0gewogICAgICAgICAgICAgICAgZm9ybXVsYTogY29sdW1uLnRvdGFsc1Jvd0Zvcm11bGEsCiAgICAgICAgICAgICAgICByZXN1bHQ6IGNvbHVtbi50b3RhbHNSb3dSZXN1bHQKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNlbGwudmFsdWUgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgYXNzaWduU3R5bGUoY2VsbCwgY29sdW1uLnN0eWxlKTsKICAgICAgICB9KTsKICAgICAgfQogICAg
fQogIH0sIHsKICAgIGtleTogImxvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQod29ya3NoZWV0KSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgLy8gd2hlcmUgdGhlIHRhYmxlIHdpbGwgcmVhZCBuZWNlc3NhcnkgZmVhdHVyZXMgZnJvbSBhIGxvYWRlZCBzaGVldAogICAgICB2YXIgdGFibGUgPSB0aGlzLnRhYmxlOwogICAgICB2YXIgX3RhYmxlJHRsMyA9IHRhYmxlLnRsLAogICAgICAgICAgcm93ID0gX3RhYmxlJHRsMy5yb3csCiAgICAgICAgICBjb2wgPSBfdGFibGUkdGwzLmNvbDsKICAgICAgdmFy
IGNvdW50ID0gMDsKCiAgICAgIGlmICh0YWJsZS5oZWFkZXJSb3cpIHsKICAgICAgICB2YXIgciA9IHdvcmtzaGVldC5nZXRSb3cocm93ICsgY291bnQrKyk7CiAgICAgICAgdGFibGUuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4sIGopIHsKICAgICAgICAgIHZhciBjZWxsID0gci5nZXRDZWxsKGNvbCArIGopOwogICAgICAgICAgY2VsbC52YWx1ZSA9IGNvbHVtbi5uYW1lOwogICAgICAgIH0pOwogICAgICB9CgogICAgICB0YWJsZS5yb3dzLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICB2YXIgciA9
IHdvcmtzaGVldC5nZXRSb3cocm93ICsgY291bnQrKyk7CiAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaikgewogICAgICAgICAgdmFyIGNlbGwgPSByLmdldENlbGwoY29sICsgaik7CiAgICAgICAgICBjZWxsLnZhbHVlID0gdmFsdWU7CiAgICAgICAgfSk7CiAgICAgIH0pOwoKICAgICAgaWYgKHRhYmxlLnRvdGFsc1JvdykgewogICAgICAgIHZhciBfcjIgPSB3b3Jrc2hlZXQuZ2V0Um93KHJvdyArIGNvdW50KyspOwoKICAgICAgICB0YWJsZS5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwg
aikgewogICAgICAgICAgdmFyIGNlbGwgPSBfcjIuZ2V0Q2VsbChjb2wgKyBqKTsKCiAgICAgICAgICBpZiAoaiA9PT0gMCkgewogICAgICAgICAgICBjZWxsLnZhbHVlID0gY29sdW1uLnRvdGFsc1Jvd0xhYmVsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGZvcm11bGEgPSBfdGhpczMuZ2V0Rm9ybXVsYShjb2x1bW4pOwoKICAgICAgICAgICAgaWYgKGZvcm11bGEpIHsKICAgICAgICAgICAgICBjZWxsLnZhbHVlID0gewogICAgICAgICAgICAgICAgZm9ybXVsYTogY29sdW1uLnRvdGFsc1Jvd0Zvcm11bGEs
CiAgICAgICAgICAgICAgICByZXN1bHQ6IGNvbHVtbi50b3RhbHNSb3dSZXN1bHQKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjYWNoZVN0YXRlIiwKICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIFRPRE86IE11dGF0aW5nIG1ldGhvZHMKICAgIHZhbHVlOiBmdW5jdGlvbiBjYWNoZVN0YXRlKCkgewogICAgICBpZiAoIXRoaXMu
X2NhY2hlKSB7CiAgICAgICAgdGhpcy5fY2FjaGUgPSB7CiAgICAgICAgICByZWY6IHRoaXMucmVmLAogICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsCiAgICAgICAgICB0YWJsZUhlaWdodDogdGhpcy50YWJsZUhlaWdodAogICAgICAgIH07CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21taXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbW1pdCgpIHsKICAgICAgLy8gY2hhbmdlcyBtYXkgaGF2ZSBiZWVuIG1hZGUgdGhhdCBtaWdodCBoYXZlIG9uLXNoZWV0IGVmZmVjdHMKICAgICAgaWYgKCF0aGlzLl9jYWNo
ZSkgewogICAgICAgIHJldHVybjsKICAgICAgfSAvLyBjaGVjayB0aGluZ3MgYXJlIG9rIGZpcnN0CgoKICAgICAgdGhpcy52YWxpZGF0ZSgpOwogICAgICB2YXIgcmVmID0gY29sQ2FjaGUuZGVjb2RlQWRkcmVzcyh0aGlzLl9jYWNoZS5yZWYpOwoKICAgICAgaWYgKHRoaXMucmVmICE9PSB0aGlzLl9jYWNoZS5yZWYpIHsKICAgICAgICAvLyB3aXBlIG91dCB3aG9sZSB0YWJsZSBmb290cHJpbnQgYXQgcHJldmlvdXMgbG9jYXRpb24KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2NhY2hlLnRhYmxlSGVpZ2h0OyBp
KyspIHsKICAgICAgICAgIHZhciByb3cgPSB0aGlzLndvcmtzaGVldC5nZXRSb3cocmVmLnJvdyArIGkpOwoKICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5fY2FjaGUud2lkdGg7IGorKykgewogICAgICAgICAgICB2YXIgY2VsbCA9IHJvdy5nZXRDZWxsKHJlZi5jb2wgKyBqKTsKICAgICAgICAgICAgY2VsbC52YWx1ZSA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIC8vIGNsZWFyIG91dCBiZWxvdyB0YWJsZSBpZiBpdCBoYXMgc2hydW5rCiAgICAgICAgZm9yICh2
YXIgX2kgPSB0aGlzLnRhYmxlSGVpZ2h0OyBfaSA8IHRoaXMuX2NhY2hlLnRhYmxlSGVpZ2h0OyBfaSsrKSB7CiAgICAgICAgICB2YXIgX3JvdyA9IHRoaXMud29ya3NoZWV0LmdldFJvdyhyZWYucm93ICsgX2kpOwoKICAgICAgICAgIGZvciAodmFyIF9qID0gMDsgX2ogPCB0aGlzLl9jYWNoZS53aWR0aDsgX2orKykgewogICAgICAgICAgICB2YXIgX2NlbGwgPSBfcm93LmdldENlbGwocmVmLmNvbCArIF9qKTsKCiAgICAgICAgICAgIF9jZWxsLnZhbHVlID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9IC8vIGNsZWFyIG91
dCB0byByaWdodCBvZiB0YWJsZSBpZiBpdCBoYXMgbG9zdCBjb2x1bW5zCgoKICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0aGlzLnRhYmxlSGVpZ2h0OyBfaTIrKykgewogICAgICAgICAgdmFyIF9yb3cyID0gdGhpcy53b3Jrc2hlZXQuZ2V0Um93KHJlZi5yb3cgKyBfaTIpOwoKICAgICAgICAgIGZvciAodmFyIF9qMiA9IHRoaXMud2lkdGg7IF9qMiA8IHRoaXMuX2NhY2hlLndpZHRoOyBfajIrKykgewogICAgICAgICAgICB2YXIgX2NlbGwyID0gX3JvdzIuZ2V0Q2VsbChyZWYuY29sICsgX2oyKTsKCiAgICAgICAg
ICAgIF9jZWxsMi52YWx1ZSA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB0aGlzLnN0b3JlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkUm93IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSb3codmFsdWVzLCByb3dOdW1iZXIpIHsKICAgICAgLy8gQWRkIGEgcm93IG9mIGRhdGEsIGVpdGhlciBpbnNlcnQgYXQgcm93TnVtYmVyIG9yIGFwcGVuZAogICAgICB0aGlzLmNhY2hlU3RhdGUoKTsKCiAgICAgIGlmIChyb3dOdW1iZXIgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHRoaXMudGFi
bGUucm93cy5wdXNoKHZhbHVlcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy50YWJsZS5yb3dzLnNwbGljZShyb3dOdW1iZXIsIDAsIHZhbHVlcyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVSb3dzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVSb3dzKHJvd0luZGV4KSB7CiAgICAgIHZhciBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTsKICAgICAgLy8gUmVtb3ZlIGEgcm93cyBvZiBkYXRhCiAg
ICAgIHRoaXMuY2FjaGVTdGF0ZSgpOwogICAgICB0aGlzLnRhYmxlLnJvd3Muc3BsaWNlKHJvd0luZGV4LCBjb3VudCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0Q29sdW1uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb2x1bW4oY29sSW5kZXgpIHsKICAgICAgdmFyIGNvbHVtbiA9IHRoaXMudGFibGUuY29sdW1uc1tjb2xJbmRleF07CiAgICAgIHJldHVybiBuZXcgQ29sdW1uKHRoaXMsIGNvbHVtbiwgY29sSW5kZXgpOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZENvbHVtbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24g
YWRkQ29sdW1uKGNvbHVtbiwgdmFsdWVzLCBjb2xJbmRleCkgewogICAgICAvLyBBZGQgYSBuZXcgY29sdW1uLCBpbmNsdWRpbmcgY29sdW1uIGRlZm4gYW5kIHZhbHVlcwogICAgICAvLyBJbnNlcnRzIGF0IGNvbE51bWJlciBvciBhZGRzIHRvIHRoZSByaWdodAogICAgICB0aGlzLmNhY2hlU3RhdGUoKTsKCiAgICAgIGlmIChjb2xJbmRleCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy50YWJsZS5jb2x1bW5zLnB1c2goY29sdW1uKTsKICAgICAgICB0aGlzLnRhYmxlLnJvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93LCBp
KSB7CiAgICAgICAgICByb3cucHVzaCh2YWx1ZXNbaV0pOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudGFibGUuY29sdW1ucy5zcGxpY2UoY29sSW5kZXgsIDAsIGNvbHVtbik7CiAgICAgICAgdGhpcy50YWJsZS5yb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdywgaSkgewogICAgICAgICAgcm93LnNwbGljZShjb2xJbmRleCwgMCwgdmFsdWVzW2ldKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlbW92ZUNvbHVtbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92
ZUNvbHVtbnMoY29sSW5kZXgpIHsKICAgICAgdmFyIGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxOwogICAgICAvLyBSZW1vdmUgYSBjb2x1bW4gd2l0aCBkYXRhCiAgICAgIHRoaXMuY2FjaGVTdGF0ZSgpOwogICAgICB0aGlzLnRhYmxlLmNvbHVtbnMuc3BsaWNlKGNvbEluZGV4LCBjb3VudCk7CiAgICAgIHRoaXMudGFibGUucm93cy5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHsKICAgICAgICByb3cuc3BsaWNlKGNvbEluZGV4LCBjb3Vu
dCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIl9hc3NpZ24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hc3NpZ24odGFyZ2V0LCBwcm9wLCB2YWx1ZSkgewogICAgICB0aGlzLmNhY2hlU3RhdGUoKTsKICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7CiAgICB9CiAgICAvKiBlc2xpbnQtZGlzYWJsZSBsaW5lcy1iZXR3ZWVuLWNsYXNzLW1lbWJlcnMgKi8KCiAgfSwgewogICAga2V5OiAid2lkdGgiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIC8vIHdpZHRoIG9mIHRoZSB0YWJsZQogICAgICByZXR1
cm4gdGhpcy50YWJsZS5jb2x1bW5zLmxlbmd0aDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoZWlnaHQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIC8vIGhlaWdodCBvZiB0aGUgdGFibGUgZGF0YQogICAgICByZXR1cm4gdGhpcy50YWJsZS5yb3dzLmxlbmd0aDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWx0ZXJIZWlnaHQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIC8vIGhlaWdodCBvZiB0aGUgdGFibGUgZGF0YSBwbHVzIG9wdGlvbmFsIGhlYWRlciByb3cKICAgICAgcmV0dXJuIHRoaXMu
aGVpZ2h0ICsgKHRoaXMudGFibGUuaGVhZGVyUm93ID8gMSA6IDApOwogICAgfQogIH0sIHsKICAgIGtleTogInRhYmxlSGVpZ2h0IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAvLyBmdWxsIGhlaWdodCBvZiB0aGUgdGFibGUgb24gdGhlIHNoZWV0CiAgICAgIHJldHVybiB0aGlzLmZpbHRlckhlaWdodCArICh0aGlzLnRhYmxlLnRvdGFsc1JvdyA/IDEgOiAwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtb2RlbCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMudGFibGU7CiAg
ICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy50YWJsZSA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInJlZiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMudGFibGUucmVmOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX2Fzc2lnbih0aGlzLnRhYmxlLCAncmVmJywgdmFsdWUpOwogICAgfQogIH0sIHsKICAgIGtleTogIm5hbWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0
aGlzLnRhYmxlLm5hbWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy50YWJsZS5uYW1lID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGlzcGxheU5hbWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnRhYmxlLmRpc3BseU5hbWUgfHwgdGhpcy50YWJsZS5uYW1lOwogICAgfQogIH0sIHsKICAgIGtleTogImRpc3BsYXlOYW1lbmFtZSIsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLnRhYmxlLmRpc3BsYXlO
YW1lID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiaGVhZGVyUm93IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy50YWJsZS5oZWFkZXJSb3c7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fYXNzaWduKHRoaXMudGFibGUsICdoZWFkZXJSb3cnLCB2YWx1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG90YWxzUm93IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy50YWJsZS50b3RhbHNSb3c7CiAgICB9
LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fYXNzaWduKHRoaXMudGFibGUsICd0b3RhbHNSb3cnLCB2YWx1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGhlbWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnRhYmxlLnN0eWxlLm5hbWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy50YWJsZS5zdHlsZS5uYW1lID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvd0ZpcnN0Q29sdW1uIiwKICAgIGdl
dDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy50YWJsZS5zdHlsZS5zaG93Rmlyc3RDb2x1bW47CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy50YWJsZS5zdHlsZS5zaG93Rmlyc3RDb2x1bW4gPSB2YWx1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzaG93TGFzdENvbHVtbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMudGFibGUuc3R5bGUuc2hvd0xhc3RDb2x1bW47CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUp
IHsKICAgICAgdGhpcy50YWJsZS5zdHlsZS5zaG93TGFzdENvbHVtbiA9IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogInNob3dSb3dTdHJpcGVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy50YWJsZS5zdHlsZS5zaG93Um93U3RyaXBlczsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLnRhYmxlLnN0eWxlLnNob3dSb3dTdHJpcGVzID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvd0NvbHVtblN0cmlwZXMiLAogICAgZ2V0OiBm
dW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnRhYmxlLnN0eWxlLnNob3dDb2x1bW5TdHJpcGVzOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMudGFibGUuc3R5bGUuc2hvd0NvbHVtblN0cmlwZXMgPSB2YWx1ZTsKICAgIH0KICAgIC8qIGVzbGludC1lbmFibGUgbGluZXMtYmV0d2Vlbi1jbGFzcy1tZW1iZXJzICovCgogIH1dKTsKCiAgcmV0dXJuIFRhYmxlOwp9KCk7Cgptb2R1bGUuZXhwb3J0cyA9IFRhYmxlOwoKfSx7Ii4uL3V0aWxzL2NvbC1jYWNoZSI6MTl9XSwxMzpb
ZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlw
dG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMp
IF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9Cgp2YXIgV29ya3NoZWV0ID0gcmVxdWlyZSgnLi93b3Jrc2hlZXQnKTsKCnZhciBEZWZpbmVkTmFtZXMgPSByZXF1aXJlKCcuL2RlZmluZWQtbmFtZXMnKTsKCnZhciBYTFNYID0gcmVxdWlyZSgnLi4veGxzeC94bHN4Jyk7Cgp2YXIgQ1NWID0gcmVxdWlyZSgnLi4vY3N2L2NzdicpOyAv
LyBXb3JrYm9vayByZXF1aXJlbWVudHMKLy8gIExvYWQgYW5kIFNhdmUgZnJvbSBmaWxlIGFuZCBzdHJlYW0KLy8gIEFjY2Vzcy9BZGQvRGVsZXRlIGluZGl2aWR1YWwgd29ya3NoZWV0cwovLyAgTWFuYWdlIFN0cmluZyB0YWJsZSwgSHlwZXJsaW5rIHRhYmxlLCBldGMuCi8vICBNYW5hZ2Ugc2NhZmZvbGRpbmcgZm9yIGNvbnRhaW5lZCBvYmplY3RzIHRvIHdyaXRlIHRvL3JlYWQgZnJvbQoKCnZhciBXb3JrYm9vayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gV29ya2Jvb2soKSB7CiAgICBfY2xhc3ND
YWxsQ2hlY2sodGhpcywgV29ya2Jvb2spOwoKICAgIHRoaXMuY2F0ZWdvcnkgPSAnJzsKICAgIHRoaXMuY29tcGFueSA9ICcnOwogICAgdGhpcy5jcmVhdGVkID0gbmV3IERhdGUoKTsKICAgIHRoaXMuZGVzY3JpcHRpb24gPSAnJzsKICAgIHRoaXMua2V5d29yZHMgPSAnJzsKICAgIHRoaXMubWFuYWdlciA9ICcnOwogICAgdGhpcy5tb2RpZmllZCA9IHRoaXMuY3JlYXRlZDsKICAgIHRoaXMucHJvcGVydGllcyA9IHt9OwogICAgdGhpcy5jYWxjUHJvcGVydGllcyA9IHt9OwogICAgdGhpcy5fd29ya3NoZWV0cyA9IFtdOwogICAg
dGhpcy5zdWJqZWN0ID0gJyc7CiAgICB0aGlzLnRpdGxlID0gJyc7CiAgICB0aGlzLnZpZXdzID0gW107CiAgICB0aGlzLm1lZGlhID0gW107CiAgICB0aGlzLl9kZWZpbmVkTmFtZXMgPSBuZXcgRGVmaW5lZE5hbWVzKCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoV29ya2Jvb2ssIFt7CiAgICBrZXk6ICJhZGRXb3Jrc2hlZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFdvcmtzaGVldChuYW1lLCBvcHRpb25zKSB7CiAgICAgIHZhciBpZCA9IHRoaXMubmV4dElkOwoKICAgICAgaWYgKG5hbWUgJiYgbmFtZS5sZW5ndGggPiAzMSkg
ewogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgICAgICAgY29uc29sZS53YXJuKCJXb3Jrc2hlZXQgbmFtZSAiLmNvbmNhdChuYW1lLCAiIGV4Y2VlZHMgMzEgY2hhcnMuIFRoaXMgd2lsbCBiZSB0cnVuY2F0ZWQiKSk7CiAgICAgIH0gLy8gSWxsZWdhbCBjaGFyYWN0ZXIgaW4gd29ya3NoZWV0IG5hbWU6IGFzdGVyaXNrICgqKSwgcXVlc3Rpb24gbWFyayAoPyksCiAgICAgIC8vIGNvbG9uICg6KSwgZm9yd2FyZCBzbGFzaCAoLyBcKSwgb3IgYnJhY2tldCAoW10pCgoKICAgICAgaWYgKC9b
Kj86L1xcW1xdXS8udGVzdChuYW1lKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiV29ya3NoZWV0IG5hbWUgIi5jb25jYXQobmFtZSwgIiBjYW5ub3QgaW5jbHVkZSBhbnkgb2YgdGhlIGZvbGxvd2luZyBjaGFyYWN0ZXJzOiAqID8gOiBcXCAvIFsgXSIpKTsKICAgICAgfQoKICAgICAgaWYgKC8oXicpfCgnJCkvLnRlc3QobmFtZSkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlRoZSBmaXJzdCBvciBsYXN0IGNoYXJhY3RlciBvZiB3b3Jrc2hlZXQgbmFtZSBjYW5ub3QgYmUgYSBzaW5nbGUgcXVvdGF0aW9uIG1hcms6
ICIuY29uY2F0KG5hbWUpKTsKICAgICAgfQoKICAgICAgbmFtZSA9IChuYW1lIHx8ICJzaGVldCIuY29uY2F0KGlkKSkuc3Vic3RyaW5nKDAsIDMxKTsKCiAgICAgIGlmICh0aGlzLl93b3Jrc2hlZXRzLmZpbmQoZnVuY3Rpb24gKHdzKSB7CiAgICAgICAgcmV0dXJuIHdzICYmIHdzLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICB9KSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiV29ya3NoZWV0IG5hbWUgYWxyZWFkeSBleGlzdHM6ICIuY29uY2F0KG5hbWUpKTsKICAgICAgfSAvLyBp
ZiBvcHRpb25zIGlzIGEgY29sb3IsIGNhbGwgaXQgdGFiQ29sb3IgKGFuZCBzaWduYWwgZGVwcmVjYXRlZCBtZXNzYWdlKQoKCiAgICAgIGlmIChvcHRpb25zKSB7CiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgIGNvbnNvbGUudHJhY2UoJ3RhYkNvbG9yIGFyZ3VtZW50IGlzIG5vdyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHdvcmtib29rLmFkZFdvcmtzaGVldChuYW1lLCB7cHJvcGVydGllczog
eyB0YWJDb2xvcjogeyBhcmdiOiAicmJnIHZhbHVlIiB9IH0nKTsKICAgICAgICAgIG9wdGlvbnMgPSB7CiAgICAgICAgICAgIHByb3BlcnRpZXM6IHsKICAgICAgICAgICAgICB0YWJDb2xvcjogewogICAgICAgICAgICAgICAgYXJnYjogb3B0aW9ucwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuYXJnYiB8fCBvcHRpb25zLnRoZW1lIHx8IG9wdGlvbnMuaW5kZXhlZCkgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNv
bnNvbGUKICAgICAgICAgIGNvbnNvbGUudHJhY2UoJ3RhYkNvbG9yIGFyZ3VtZW50IGlzIG5vdyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHdvcmtib29rLmFkZFdvcmtzaGVldChuYW1lLCB7cHJvcGVydGllczogeyB0YWJDb2xvcjogeyAuLi4gfSB9Jyk7CiAgICAgICAgICBvcHRpb25zID0gewogICAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgICAgdGFiQ29sb3I6IG9wdGlvbnMKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBsYXN0T3JkZXJObyA9IHRoaXMu
X3dvcmtzaGVldHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHdzKSB7CiAgICAgICAgcmV0dXJuICh3cyAmJiB3cy5vcmRlck5vKSA+IGFjYyA/IHdzLm9yZGVyTm8gOiBhY2M7CiAgICAgIH0sIDApOwoKICAgICAgdmFyIHdvcmtzaGVldE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7CiAgICAgICAgaWQ6IGlkLAogICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgb3JkZXJObzogbGFzdE9yZGVyTm8gKyAxLAogICAgICAgIHdvcmtib29rOiB0aGlzCiAgICAgIH0pOwogICAgICB2YXIgd29ya3NoZWV0ID0gbmV3
IFdvcmtzaGVldCh3b3Jrc2hlZXRPcHRpb25zKTsKICAgICAgdGhpcy5fd29ya3NoZWV0c1tpZF0gPSB3b3Jrc2hlZXQ7CiAgICAgIHJldHVybiB3b3Jrc2hlZXQ7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVtb3ZlV29ya3NoZWV0RXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVdvcmtzaGVldEV4KHdvcmtzaGVldCkgewogICAgICBkZWxldGUgdGhpcy5fd29ya3NoZWV0c1t3b3Jrc2hlZXQuaWRdOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbW92ZVdvcmtzaGVldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3Zl
V29ya3NoZWV0KGlkKSB7CiAgICAgIHZhciB3b3Jrc2hlZXQgPSB0aGlzLmdldFdvcmtzaGVldChpZCk7CgogICAgICBpZiAod29ya3NoZWV0KSB7CiAgICAgICAgd29ya3NoZWV0LmRlc3Ryb3koKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImdldFdvcmtzaGVldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0V29ya3NoZWV0KGlkKSB7CiAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldHMuZmluZChCb29sZWFuKTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVv
ZiBpZCA9PT0gJ251bWJlcicpIHsKICAgICAgICByZXR1cm4gdGhpcy5fd29ya3NoZWV0c1tpZF07CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzaGVldHMuZmluZChmdW5jdGlvbiAod29ya3NoZWV0KSB7CiAgICAgICAgICByZXR1cm4gd29ya3NoZWV0ICYmIHdvcmtzaGVldC5uYW1lID09PSBpZDsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJlYWNoU2hlZXQiLAogICAg
dmFsdWU6IGZ1bmN0aW9uIGVhY2hTaGVldChpdGVyYXRlZSkgewogICAgICB0aGlzLndvcmtzaGVldHMuZm9yRWFjaChmdW5jdGlvbiAoc2hlZXQpIHsKICAgICAgICBpdGVyYXRlZShzaGVldCwgc2hlZXQuaWQpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjbGVhclRoZW1lcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJUaGVtZXMoKSB7CiAgICAgIC8vIE5vdGU6IHRoZW1lcyBhcmUgbm90IGFuIGV4cG9zZWQgZmVhdHVyZSwgbWVkZGxlIGF0IHlvdXIgcGVyaWwhCiAgICAgIHRoaXMuX3RoZW1lcyA9IHVu
ZGVmaW5lZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRJbWFnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSW1hZ2UoaW1hZ2UpIHsKICAgICAgLy8gVE9ETzogIHZhbGlkYXRpb24/CiAgICAgIHZhciBpZCA9IHRoaXMubWVkaWEubGVuZ3RoOwogICAgICB0aGlzLm1lZGlhLnB1c2goT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2UsIHsKICAgICAgICB0eXBlOiAnaW1hZ2UnCiAgICAgIH0pKTsKICAgICAgcmV0dXJuIGlkOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEltYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJ
bWFnZShpZCkgewogICAgICByZXR1cm4gdGhpcy5tZWRpYVtpZF07CiAgICB9CiAgfSwgewogICAga2V5OiAieGxzeCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKCF0aGlzLl94bHN4KSB0aGlzLl94bHN4ID0gbmV3IFhMU1godGhpcyk7CiAgICAgIHJldHVybiB0aGlzLl94bHN4OwogICAgfQogIH0sIHsKICAgIGtleTogImNzdiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKCF0aGlzLl9jc3YpIHRoaXMuX2NzdiA9IG5ldyBDU1YodGhpcyk7CiAgICAgIHJldHVybiB0aGlzLl9jc3Y7
CiAgICB9CiAgfSwgewogICAga2V5OiAibmV4dElkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAvLyBmaW5kIHRoZSBuZXh0IHVuaXF1ZSBzcG90IHRvIGFkZCB3b3Jrc2hlZXQKICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLl93b3Jrc2hlZXRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKCF0aGlzLl93b3Jrc2hlZXRzW2ldKSB7CiAgICAgICAgICByZXR1cm4gaTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRzLmxlbmd0aCB8fCAxOwogICAgfQogIH0sIHsK
ICAgIGtleTogIndvcmtzaGVldHMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIC8vIHJldHVybiBhIGNsb25lIG9mIF93b3Jrc2hlZXRzCiAgICAgIHJldHVybiB0aGlzLl93b3Jrc2hlZXRzLnNsaWNlKDEpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICByZXR1cm4gYS5vcmRlck5vIC0gYi5vcmRlck5vOwogICAgICB9KS5maWx0ZXIoQm9vbGVhbik7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVmaW5lZE5hbWVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fZGVm
aW5lZE5hbWVzOwogICAgfQogIH0sIHsKICAgIGtleTogIm1vZGVsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gewogICAgICAgIGNyZWF0b3I6IHRoaXMuY3JlYXRvciB8fCAnVW5rbm93bicsCiAgICAgICAgbGFzdE1vZGlmaWVkQnk6IHRoaXMubGFzdE1vZGlmaWVkQnkgfHwgJ1Vua25vd24nLAogICAgICAgIGxhc3RQcmludGVkOiB0aGlzLmxhc3RQcmludGVkLAogICAgICAgIGNyZWF0ZWQ6IHRoaXMuY3JlYXRlZCwKICAgICAgICBtb2RpZmllZDogdGhpcy5tb2RpZmllZCwKICAgICAgICBwcm9w
ZXJ0aWVzOiB0aGlzLnByb3BlcnRpZXMsCiAgICAgICAgd29ya3NoZWV0czogdGhpcy53b3Jrc2hlZXRzLm1hcChmdW5jdGlvbiAod29ya3NoZWV0KSB7CiAgICAgICAgICByZXR1cm4gd29ya3NoZWV0Lm1vZGVsOwogICAgICAgIH0pLAogICAgICAgIHNoZWV0czogdGhpcy53b3Jrc2hlZXRzLm1hcChmdW5jdGlvbiAod3MpIHsKICAgICAgICAgIHJldHVybiB3cy5tb2RlbDsKICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbiksCiAgICAgICAgZGVmaW5lZE5hbWVzOiB0aGlzLl9kZWZpbmVkTmFtZXMubW9kZWwsCiAgICAgICAgdmll
d3M6IHRoaXMudmlld3MsCiAgICAgICAgY29tcGFueTogdGhpcy5jb21wYW55LAogICAgICAgIG1hbmFnZXI6IHRoaXMubWFuYWdlciwKICAgICAgICB0aXRsZTogdGhpcy50aXRsZSwKICAgICAgICBzdWJqZWN0OiB0aGlzLnN1YmplY3QsCiAgICAgICAga2V5d29yZHM6IHRoaXMua2V5d29yZHMsCiAgICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksCiAgICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sCiAgICAgICAgbGFuZ3VhZ2U6IHRoaXMubGFuZ3VhZ2UsCiAgICAgICAgcmV2aXNpb246IHRoaXMucmV2
aXNpb24sCiAgICAgICAgY29udGVudFN0YXR1czogdGhpcy5jb250ZW50U3RhdHVzLAogICAgICAgIHRoZW1lczogdGhpcy5fdGhlbWVzLAogICAgICAgIG1lZGlhOiB0aGlzLm1lZGlhLAogICAgICAgIGNhbGNQcm9wZXJ0aWVzOiB0aGlzLmNhbGNQcm9wZXJ0aWVzCiAgICAgIH07CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHRoaXMuY3JlYXRvciA9IHZhbHVlLmNyZWF0b3I7CiAgICAgIHRoaXMubGFzdE1vZGlmaWVkQnkgPSB2YWx1ZS5sYXN0TW9k
aWZpZWRCeTsKICAgICAgdGhpcy5sYXN0UHJpbnRlZCA9IHZhbHVlLmxhc3RQcmludGVkOwogICAgICB0aGlzLmNyZWF0ZWQgPSB2YWx1ZS5jcmVhdGVkOwogICAgICB0aGlzLm1vZGlmaWVkID0gdmFsdWUubW9kaWZpZWQ7CiAgICAgIHRoaXMuY29tcGFueSA9IHZhbHVlLmNvbXBhbnk7CiAgICAgIHRoaXMubWFuYWdlciA9IHZhbHVlLm1hbmFnZXI7CiAgICAgIHRoaXMudGl0bGUgPSB2YWx1ZS50aXRsZTsKICAgICAgdGhpcy5zdWJqZWN0ID0gdmFsdWUuc3ViamVjdDsKICAgICAgdGhpcy5rZXl3b3JkcyA9IHZhbHVlLmtleXdv
cmRzOwogICAgICB0aGlzLmNhdGVnb3J5ID0gdmFsdWUuY2F0ZWdvcnk7CiAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB2YWx1ZS5kZXNjcmlwdGlvbjsKICAgICAgdGhpcy5sYW5ndWFnZSA9IHZhbHVlLmxhbmd1YWdlOwogICAgICB0aGlzLnJldmlzaW9uID0gdmFsdWUucmV2aXNpb247CiAgICAgIHRoaXMuY29udGVudFN0YXR1cyA9IHZhbHVlLmNvbnRlbnRTdGF0dXM7CiAgICAgIHRoaXMucHJvcGVydGllcyA9IHZhbHVlLnByb3BlcnRpZXM7CiAgICAgIHRoaXMuY2FsY1Byb3BlcnRpZXMgPSB2YWx1ZS5jYWxjUHJvcGVydGll
czsKICAgICAgdGhpcy5fd29ya3NoZWV0cyA9IFtdOwogICAgICB2YWx1ZS53b3Jrc2hlZXRzLmZvckVhY2goZnVuY3Rpb24gKHdvcmtzaGVldE1vZGVsKSB7CiAgICAgICAgdmFyIGlkID0gd29ya3NoZWV0TW9kZWwuaWQsCiAgICAgICAgICAgIG5hbWUgPSB3b3Jrc2hlZXRNb2RlbC5uYW1lLAogICAgICAgICAgICBzdGF0ZSA9IHdvcmtzaGVldE1vZGVsLnN0YXRlOwogICAgICAgIHZhciBvcmRlck5vID0gdmFsdWUuc2hlZXRzICYmIHZhbHVlLnNoZWV0cy5maW5kSW5kZXgoZnVuY3Rpb24gKHdzKSB7CiAgICAgICAgICByZXR1
cm4gd3MuaWQgPT09IGlkOwogICAgICAgIH0pOwogICAgICAgIHZhciB3b3Jrc2hlZXQgPSBfdGhpcy5fd29ya3NoZWV0c1tpZF0gPSBuZXcgV29ya3NoZWV0KHsKICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICBvcmRlck5vOiBvcmRlck5vLAogICAgICAgICAgc3RhdGU6IHN0YXRlLAogICAgICAgICAgd29ya2Jvb2s6IF90aGlzCiAgICAgICAgfSk7CiAgICAgICAgd29ya3NoZWV0Lm1vZGVsID0gd29ya3NoZWV0TW9kZWw7CiAgICAgIH0pOwogICAgICB0aGlzLl9kZWZpbmVkTmFtZXMu
bW9kZWwgPSB2YWx1ZS5kZWZpbmVkTmFtZXM7CiAgICAgIHRoaXMudmlld3MgPSB2YWx1ZS52aWV3czsKICAgICAgdGhpcy5fdGhlbWVzID0gdmFsdWUudGhlbWVzOwogICAgICB0aGlzLm1lZGlhID0gdmFsdWUubWVkaWEgfHwgW107CiAgICB9CiAgfV0pOwoKICByZXR1cm4gV29ya2Jvb2s7Cn0oKTsKCm1vZHVsZS5leHBvcnRzID0gV29ya2Jvb2s7Cgp9LHsiLi4vY3N2L2NzdiI6MSwiLi4veGxzeC94bHN4IjoxNDEsIi4vZGVmaW5lZC1uYW1lcyI6NiwiLi93b3Jrc2hlZXQiOjE0fV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9k
dWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3Qs
IHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5
LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFy
Z2V0OyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9B
cnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJy
YXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8
SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXko
YXJyKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBl
RXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRy
dWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIF8gPSByZXF1aXJl
KCcuLi91dGlscy91bmRlci1kYXNoJyk7Cgp2YXIgY29sQ2FjaGUgPSByZXF1aXJlKCcuLi91dGlscy9jb2wtY2FjaGUnKTsKCnZhciBSYW5nZSA9IHJlcXVpcmUoJy4vcmFuZ2UnKTsKCnZhciBSb3cgPSByZXF1aXJlKCcuL3JvdycpOwoKdmFyIENvbHVtbiA9IHJlcXVpcmUoJy4vY29sdW1uJyk7Cgp2YXIgRW51bXMgPSByZXF1aXJlKCcuL2VudW1zJyk7Cgp2YXIgSW1hZ2UgPSByZXF1aXJlKCcuL2ltYWdlJyk7Cgp2YXIgVGFibGUgPSByZXF1aXJlKCcuL3RhYmxlJyk7Cgp2YXIgRGF0YVZhbGlkYXRpb25zID0gcmVxdWlyZSgn
Li9kYXRhLXZhbGlkYXRpb25zJyk7Cgp2YXIgRW5jcnlwdG9yID0gcmVxdWlyZSgnLi4vdXRpbHMvZW5jcnlwdG9yJyk7IC8vIFdvcmtzaGVldCByZXF1aXJlbWVudHMKLy8gIE9wZXJhdGUgYXMgc2hlZXQgaW5zaWRlIHdvcmtib29rIG9yIHN0YW5kYWxvbmUKLy8gIExvYWQgYW5kIFNhdmUgZnJvbSBmaWxlIGFuZCBzdHJlYW0KLy8gIEFjY2Vzcy9BZGQvRGVsZXRlIGluZGl2aWR1YWwgY2VsbHMKLy8gIE1hbmFnZSBjb2x1bW4gd2lkdGhzIGFuZCByb3cgaGVpZ2h0cwoKCnZhciBXb3Jrc2hlZXQgPSAvKiNfX1BVUkVfXyovZnVu
Y3Rpb24gKCkgewogIGZ1bmN0aW9uIFdvcmtzaGVldChvcHRpb25zKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV29ya3NoZWV0KTsKCiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gaW4gYSB3b3JrYm9vaywgZWFjaCBzaGVldCB3aWxsIGhhdmUgYSBudW1iZXIKCiAgICB0aGlzLmlkID0gb3B0aW9ucy5pZDsKICAgIHRoaXMub3JkZXJObyA9IG9wdGlvbnMub3JkZXJObzsgLy8gYW5kIGEgbmFtZQoKICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCAiU2hlZXQiLmNvbmNhdCh0aGlzLmlkKTsgLy8gYWRk
IGEgc3RhdGUKCiAgICB0aGlzLnN0YXRlID0gb3B0aW9ucy5zdGF0ZSB8fCAndmlzaWJsZSc7IC8vIHJvd3MgYWxsb3dzIGFjY2VzcyBvcmdhbmlzZWQgYnkgcm93LiBTcGFyc2UgYXJyYXkgb2YgYXJyYXlzIGluZGV4ZWQgYnkgcm93LTEsIGNvbAogICAgLy8gTm90ZTogX3Jvd3MgaXMgemVybyBiYXNlZC4gTXVzdCBzdWJ0cmFjdCAxIHRvIGdvIGZyb20gY2VsbC5yb3cgdG8gaW5kZXgKCiAgICB0aGlzLl9yb3dzID0gW107IC8vIGNvbHVtbiBkZWZpbml0aW9ucwoKICAgIHRoaXMuX2NvbHVtbnMgPSBudWxsOyAvLyBjb2x1bW4g
a2V5cyAoYWRkUm93IGNvbnZlbmllbmNlKToga2V5ID09PiB0aGlzLl9jb2xsdW1ucyBpbmRleAoKICAgIHRoaXMuX2tleXMgPSB7fTsgLy8ga2VlcCByZWNvcmQgb2YgYWxsIG1lcmdlcwoKICAgIHRoaXMuX21lcmdlcyA9IHt9OyAvLyByZWNvcmQgb2YgYWxsIHJvdyBhbmQgY29sdW1uIHBhZ2VCcmVha3MKCiAgICB0aGlzLnJvd0JyZWFrcyA9IFtdOwogICAgdGhpcy5fd29ya2Jvb2sgPSBvcHRpb25zLndvcmtib29rOyAvLyBmb3IgdGFiQ29sb3IsIGRlZmF1bHQgcm93IGhlaWdodCwgb3V0bGluZSBsZXZlbHMsIGV0YwoKICAg
IHRoaXMucHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24oe30sIHsKICAgICAgZGVmYXVsdFJvd0hlaWdodDogMTUsCiAgICAgIGR5RGVzY2VudDogNTUsCiAgICAgIG91dGxpbmVMZXZlbENvbDogMCwKICAgICAgb3V0bGluZUxldmVsUm93OiAwCiAgICB9LCBvcHRpb25zLnByb3BlcnRpZXMpOyAvLyBmb3IgYWxsIHRoaW5ncyBwcmludGluZwoKICAgIHRoaXMucGFnZVNldHVwID0gT2JqZWN0LmFzc2lnbih7fSwgewogICAgICBtYXJnaW5zOiB7CiAgICAgICAgbGVmdDogMC43LAogICAgICAgIHJpZ2h0OiAwLjcsCiAgICAgICAg
dG9wOiAwLjc1LAogICAgICAgIGJvdHRvbTogMC43NSwKICAgICAgICBoZWFkZXI6IDAuMywKICAgICAgICBmb290ZXI6IDAuMwogICAgICB9LAogICAgICBvcmllbnRhdGlvbjogJ3BvcnRyYWl0JywKICAgICAgaG9yaXpvbnRhbERwaTogNDI5NDk2NzI5NSwKICAgICAgdmVydGljYWxEcGk6IDQyOTQ5NjcyOTUsCiAgICAgIGZpdFRvUGFnZTogISEob3B0aW9ucy5wYWdlU2V0dXAgJiYgKG9wdGlvbnMucGFnZVNldHVwLmZpdFRvV2lkdGggfHwgb3B0aW9ucy5wYWdlU2V0dXAuZml0VG9IZWlnaHQpICYmICFvcHRpb25zLnBhZ2VT
ZXR1cC5zY2FsZSksCiAgICAgIHBhZ2VPcmRlcjogJ2Rvd25UaGVuT3ZlcicsCiAgICAgIGJsYWNrQW5kV2hpdGU6IGZhbHNlLAogICAgICBkcmFmdDogZmFsc2UsCiAgICAgIGNlbGxDb21tZW50czogJ05vbmUnLAogICAgICBlcnJvcnM6ICdkaXNwbGF5ZWQnLAogICAgICBzY2FsZTogMTAwLAogICAgICBmaXRUb1dpZHRoOiAxLAogICAgICBmaXRUb0hlaWdodDogMSwKICAgICAgcGFwZXJTaXplOiB1bmRlZmluZWQsCiAgICAgIHNob3dSb3dDb2xIZWFkZXJzOiBmYWxzZSwKICAgICAgc2hvd0dyaWRMaW5lczogZmFsc2UsCiAg
ICAgIGZpcnN0UGFnZU51bWJlcjogdW5kZWZpbmVkLAogICAgICBob3Jpem9udGFsQ2VudGVyZWQ6IGZhbHNlLAogICAgICB2ZXJ0aWNhbENlbnRlcmVkOiBmYWxzZSwKICAgICAgcm93QnJlYWtzOiBudWxsLAogICAgICBjb2xCcmVha3M6IG51bGwKICAgIH0sIG9wdGlvbnMucGFnZVNldHVwKTsKICAgIHRoaXMuaGVhZGVyRm9vdGVyID0gT2JqZWN0LmFzc2lnbih7fSwgewogICAgICBkaWZmZXJlbnRGaXJzdDogZmFsc2UsCiAgICAgIGRpZmZlcmVudE9kZEV2ZW46IGZhbHNlLAogICAgICBvZGRIZWFkZXI6IG51bGwsCiAgICAg
IG9kZEZvb3RlcjogbnVsbCwKICAgICAgZXZlbkhlYWRlcjogbnVsbCwKICAgICAgZXZlbkZvb3RlcjogbnVsbCwKICAgICAgZmlyc3RIZWFkZXI6IG51bGwsCiAgICAgIGZpcnN0Rm9vdGVyOiBudWxsCiAgICB9LCBvcHRpb25zLmhlYWRlckZvb3Rlcik7CiAgICB0aGlzLmRhdGFWYWxpZGF0aW9ucyA9IG5ldyBEYXRhVmFsaWRhdGlvbnMoKTsgLy8gZm9yIGZyZWV6ZXBhbmVzLCBzcGxpdCwgem9vbSwgZ3JpZGxpbmVzLCBldGMKCiAgICB0aGlzLnZpZXdzID0gb3B0aW9ucy52aWV3cyB8fCBbXTsKICAgIHRoaXMuYXV0b0ZpbHRl
ciA9IG9wdGlvbnMuYXV0b0ZpbHRlciB8fCBudWxsOyAvLyBmb3IgaW1hZ2VzLCBldGMKCiAgICB0aGlzLl9tZWRpYSA9IFtdOyAvLyB3b3Jrc2hlZXQgcHJvdGVjdGlvbgoKICAgIHRoaXMuc2hlZXRQcm90ZWN0aW9uID0gbnVsbDsgLy8gZm9yIHRhYmxlcwoKICAgIHRoaXMudGFibGVzID0ge307CiAgICB0aGlzLmNvbmRpdGlvbmFsRm9ybWF0dGluZ3MgPSBbXTsKICB9CgogIF9jcmVhdGVDbGFzcyhXb3Jrc2hlZXQsIFt7CiAgICBrZXk6ICJkZXN0cm95IiwKICAgIC8vIHdoZW4geW91J3JlIGRvbmUgd2l0aCB0aGlzIHdvcmtz
aGVldCwgY2FsbCB0aGlzIHRvIHJlbW92ZSBmcm9tIHdvcmtib29rCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgdGhpcy5fd29ya2Jvb2sucmVtb3ZlV29ya3NoZWV0RXgodGhpcyk7CiAgICB9IC8vIEdldCB0aGUgYm91bmRpbmcgcmFuZ2Ugb2YgdGhlIGNlbGxzIGluIHRoaXMgd29ya3NoZWV0CgogIH0sIHsKICAgIGtleTogImdldENvbHVtbktleSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29sdW1uS2V5KGtleSkgewogICAgICByZXR1cm4gdGhpcy5fa2V5c1trZXldOwogICAgfQogIH0sIHsKICAg
IGtleTogInNldENvbHVtbktleSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29sdW1uS2V5KGtleSwgdmFsdWUpIHsKICAgICAgdGhpcy5fa2V5c1trZXldID0gdmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVsZXRlQ29sdW1uS2V5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVDb2x1bW5LZXkoa2V5KSB7CiAgICAgIGRlbGV0ZSB0aGlzLl9rZXlzW2tleV07CiAgICB9CiAgfSwgewogICAga2V5OiAiZWFjaENvbHVtbktleSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZWFjaENvbHVtbktleShmKSB7CiAgICAgIF8u
ZWFjaCh0aGlzLl9rZXlzLCBmKTsKICAgIH0gLy8gZ2V0IGEgc2luZ2xlIGNvbHVtbiBieSBjb2wgbnVtYmVyLiBJZiBpdCBkb2Vzbid0IGV4aXN0LCBjcmVhdGUgaXQgYW5kIGFueSBnYXBzIGJlZm9yZSBpdAoKICB9LCB7CiAgICBrZXk6ICJnZXRDb2x1bW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbHVtbihjKSB7CiAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAvLyBpZiBpdCBtYXRjaGVzIGEga2V5J2QgY29sdW1uLCByZXR1cm4gdGhhdAogICAgICAgIHZhciBjb2wgPSB0aGlzLl9rZXlz
W2NdOwogICAgICAgIGlmIChjb2wpIHJldHVybiBjb2w7IC8vIG90aGVyd2lzZSwgYXNzdW1lIGxldHRlcgoKICAgICAgICBjID0gY29sQ2FjaGUubDJuKGMpOwogICAgICB9CgogICAgICBpZiAoIXRoaXMuX2NvbHVtbnMpIHsKICAgICAgICB0aGlzLl9jb2x1bW5zID0gW107CiAgICAgIH0KCiAgICAgIGlmIChjID4gdGhpcy5fY29sdW1ucy5sZW5ndGgpIHsKICAgICAgICB2YXIgbiA9IHRoaXMuX2NvbHVtbnMubGVuZ3RoICsgMTsKCiAgICAgICAgd2hpbGUgKG4gPD0gYykgewogICAgICAgICAgdGhpcy5fY29sdW1ucy5wdXNo
KG5ldyBDb2x1bW4odGhpcywgbisrKSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5fY29sdW1uc1tjIC0gMV07CiAgICB9CiAgfSwgewogICAga2V5OiAic3BsaWNlQ29sdW1ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaWNlQ29sdW1ucyhzdGFydCwgY291bnQpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciByb3dzID0gdGhpcy5fcm93czsKICAgICAgdmFyIG5Sb3dzID0gcm93cy5sZW5ndGg7CgogICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW5zZXJ0
cyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgICAgaW5zZXJ0c1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07CiAgICAgIH0KCiAgICAgIGlmIChpbnNlcnRzLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7CiAgICAgICAgICB2YXIgcm93QXJndW1lbnRzID0gW3N0YXJ0LCBjb3VudF07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmMKCiAgICAgICAgICBpbnNl
cnRzLmZvckVhY2goZnVuY3Rpb24gKGluc2VydCkgewogICAgICAgICAgICByb3dBcmd1bWVudHMucHVzaChpbnNlcnRbaV0gfHwgbnVsbCk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICB2YXIgcm93ID0gX3RoaXMuZ2V0Um93KGkgKyAxKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWQKCgogICAgICAgICAgcm93LnNwbGljZS5hcHBseShyb3csIHJvd0FyZ3VtZW50cyk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gbXVzdCBpdGVyYXRlIG92ZXIgYWxsIHJvd3Mgd2hldGhlciB0aGV5IGV4aXN0IHll
dCBvciBub3QKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5Sb3dzOyBpKyspIHsKICAgICAgICAgIF9sb29wKGkpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBub3RoaW5nIHRvIGluc2VydCwgc28ganVzdCBzcGxpY2UgYWxsIHJvd3MKICAgICAgICB0aGlzLl9yb3dzLmZvckVhY2goZnVuY3Rpb24gKHIpIHsKICAgICAgICAgIGlmIChyKSB7CiAgICAgICAgICAgIHIuc3BsaWNlKHN0YXJ0LCBjb3VudCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gLy8gc3BsaWNlIGNvbHVtbiBkZWZp
bml0aW9ucwoKCiAgICAgIHZhciBuRXhwYW5kID0gaW5zZXJ0cy5sZW5ndGggLSBjb3VudDsKICAgICAgdmFyIG5LZWVwID0gc3RhcnQgKyBjb3VudDsKICAgICAgdmFyIG5FbmQgPSB0aGlzLl9jb2x1bW5zLmxlbmd0aDsKCiAgICAgIGlmIChuRXhwYW5kIDwgMCkgewogICAgICAgIGZvciAodmFyIF9pID0gc3RhcnQgKyBpbnNlcnRzLmxlbmd0aDsgX2kgPD0gbkVuZDsgX2krKykgewogICAgICAgICAgdGhpcy5nZXRDb2x1bW4oX2kpLmRlZm4gPSB0aGlzLmdldENvbHVtbihfaSAtIG5FeHBhbmQpLmRlZm47CiAgICAgICAgfQog
ICAgICB9IGVsc2UgaWYgKG5FeHBhbmQgPiAwKSB7CiAgICAgICAgZm9yICh2YXIgX2kyID0gbkVuZDsgX2kyID49IG5LZWVwOyBfaTItLSkgewogICAgICAgICAgdGhpcy5nZXRDb2x1bW4oX2kyICsgbkV4cGFuZCkuZGVmbiA9IHRoaXMuZ2V0Q29sdW1uKF9pMikuZGVmbjsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZvciAodmFyIF9pMyA9IHN0YXJ0OyBfaTMgPCBzdGFydCArIGluc2VydHMubGVuZ3RoOyBfaTMrKykgewogICAgICAgIHRoaXMuZ2V0Q29sdW1uKF9pMykuZGVmbiA9IG51bGw7CiAgICAgIH0gLy8gYWNjb3Vu
dCBmb3IgZGVmaW5lZCBuYW1lcwoKCiAgICAgIHRoaXMud29ya2Jvb2suZGVmaW5lZE5hbWVzLnNwbGljZUNvbHVtbnModGhpcy5uYW1lLCBzdGFydCwgY291bnQsIGluc2VydHMubGVuZ3RoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfY29tbWl0Um93IiwKICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIFJvd3MKICAgIHZhbHVlOiBmdW5jdGlvbiBfY29tbWl0Um93KCkgey8vIG5vcCAtIGFsbG93cyBzdHJlYW1pbmcg
cmVhZGVyIHRvIGZpbGwgYSBkb2N1bWVudAogICAgfQogIH0sIHsKICAgIGtleTogImZpbmRSb3ciLAogICAgLy8gZmluZCBhIHJvdyAoaWYgZXhpc3RzKSBieSByb3cgbnVtYmVyCiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFJvdyhyKSB7CiAgICAgIHJldHVybiB0aGlzLl9yb3dzW3IgLSAxXTsKICAgIH0gLy8gZmluZCBtdWx0aXBsZSByb3dzIChpZiBleGlzdHMpIGJ5IHJvdyBudW1iZXIKCiAgfSwgewogICAga2V5OiAiZmluZFJvd3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRSb3dzKHN0YXJ0LCBsZW5ndGgpIHsKICAg
ICAgcmV0dXJuIHRoaXMuX3Jvd3Muc2xpY2Uoc3RhcnQgLSAxLCBzdGFydCAtIDEgKyBsZW5ndGgpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFJvdyIsCiAgICAvLyBnZXQgYSByb3cgYnkgcm93IG51bWJlci4KICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSb3cocikgewogICAgICB2YXIgcm93ID0gdGhpcy5fcm93c1tyIC0gMV07CgogICAgICBpZiAoIXJvdykgewogICAgICAgIHJvdyA9IHRoaXMuX3Jvd3NbciAtIDFdID0gbmV3IFJvdyh0aGlzLCByKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJvdzsKICAgIH0gLy8gZ2V0
IG11bHRpcGxlIHJvd3MgYnkgcm93IG51bWJlci4KCiAgfSwgewogICAga2V5OiAiZ2V0Um93cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Um93cyhzdGFydCwgbGVuZ3RoKSB7CiAgICAgIGlmIChsZW5ndGggPCAxKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICB2YXIgcm93cyA9IFtdOwoKICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBsZW5ndGg7IGkrKykgewogICAgICAgIHJvd3MucHVzaCh0aGlzLmdldFJvdyhpKSk7CiAgICAgIH0KCiAgICAgIHJldHVybiByb3dzOwogICAgfQogIH0sIHsKICAgIGtl
eTogImFkZFJvdyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUm93KHZhbHVlKSB7CiAgICAgIHZhciBzdHlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ24nOwogICAgICB2YXIgcm93Tm8gPSB0aGlzLl9uZXh0Um93OwogICAgICB2YXIgcm93ID0gdGhpcy5nZXRSb3cocm93Tm8pOwogICAgICByb3cudmFsdWVzID0gdmFsdWU7CgogICAgICB0aGlzLl9zZXRTdHlsZU9wdGlvbihyb3dObywgc3R5bGVbMF0gPT09ICdpJyA/IHN0eWxlIDogJ24n
KTsKCiAgICAgIHJldHVybiByb3c7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkUm93cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUm93cyh2YWx1ZSkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBzdHlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ24nOwogICAgICB2YXIgcm93cyA9IFtdOwogICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHsKICAgICAgICByb3dzLnB1c2goX3RoaXMyLmFkZFJvdyhy
b3csIHN0eWxlKSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gcm93czsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbnNlcnRSb3ciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydFJvdyhwb3MsIHZhbHVlKSB7CiAgICAgIHZhciBzdHlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ24nOwogICAgICB0aGlzLnNwbGljZVJvd3MocG9zLCAwLCB2YWx1ZSk7CgogICAgICB0aGlzLl9zZXRTdHlsZU9wdGlvbihwb3MsIHN0eWxlKTsKCiAgICAgIHJl
dHVybiB0aGlzLmdldFJvdyhwb3MpOwogICAgfQogIH0sIHsKICAgIGtleTogImluc2VydFJvd3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydFJvd3MocG9zLCB2YWx1ZXMpIHsKICAgICAgdmFyIHN0eWxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnbic7CiAgICAgIHRoaXMuc3BsaWNlUm93cy5hcHBseSh0aGlzLCBbcG9zLCAwXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcykpKTsKCiAgICAgIGlmIChzdHlsZSAhPT0gJ24n
KSB7CiAgICAgICAgLy8gY29weSBvdmVyIHRoZSBzdHlsZXMKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKHN0eWxlWzBdID09PSAnbycgJiYgdGhpcy5maW5kUm93KHZhbHVlcy5sZW5ndGggKyBwb3MgKyBpKSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXMuX2NvcHlTdHlsZSh2YWx1ZXMubGVuZ3RoICsgcG9zICsgaSwgcG9zICsgaSwgc3R5bGVbMV0gPT09ICcrJyk7CiAgICAgICAgICB9IGVsc2UgaWYgKHN0eWxlWzBdID09PSAnaScgJiYgdGhp
cy5maW5kUm93KHBvcyAtIDEpICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhpcy5fY29weVN0eWxlKHBvcyAtIDEsIHBvcyArIGksIHN0eWxlWzFdID09PSAnKycpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuZ2V0Um93cyhwb3MsIHZhbHVlcy5sZW5ndGgpOwogICAgfSAvLyBzZXQgcm93IGF0IHBvc2l0aW9uIHRvIHNhbWUgc3R5bGUgYXMgb2YgZWl0aGVyIHBlcnZpb3VzIHJvdyAob3B0aW9uICdpJykgb3IgbmV4dCByb3cgKG9wdGlvbiAnbycpCgogIH0sIHsKICAgIGtl
eTogIl9zZXRTdHlsZU9wdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFN0eWxlT3B0aW9uKHBvcykgewogICAgICB2YXIgc3R5bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICduJzsKCiAgICAgIGlmIChzdHlsZVswXSA9PT0gJ28nICYmIHRoaXMuZmluZFJvdyhwb3MgKyAxKSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5fY29weVN0eWxlKHBvcyArIDEsIHBvcywgc3R5bGVbMV0gPT09ICcrJyk7CiAgICAgIH0gZWxzZSBpZiAo
c3R5bGVbMF0gPT09ICdpJyAmJiB0aGlzLmZpbmRSb3cocG9zIC0gMSkgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHRoaXMuX2NvcHlTdHlsZShwb3MgLSAxLCBwb3MsIHN0eWxlWzFdID09PSAnKycpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX2NvcHlTdHlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2NvcHlTdHlsZShzcmMsIGRlc3QpIHsKICAgICAgdmFyIHN0eWxlRW1wdHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNl
OwogICAgICB2YXIgclNyYyA9IHRoaXMuZ2V0Um93KHNyYyk7CiAgICAgIHZhciByRHN0ID0gdGhpcy5nZXRSb3coZGVzdCk7CiAgICAgIHJEc3Quc3R5bGUgPSBPYmplY3QuZnJlZXplKF9vYmplY3RTcHJlYWQoe30sIHJTcmMuc3R5bGUpKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuYwoKICAgICAgclNyYy5lYWNoQ2VsbCh7CiAgICAgICAgaW5jbHVkZUVtcHR5OiBzdHlsZUVtcHR5CiAgICAgIH0sIGZ1bmN0aW9uIChjZWxsLCBjb2xOdW1iZXIpIHsKICAgICAgICByRHN0LmdldENlbGwoY29sTnVt
YmVyKS5zdHlsZSA9IE9iamVjdC5mcmVlemUoX29iamVjdFNwcmVhZCh7fSwgY2VsbC5zdHlsZSkpOwogICAgICB9KTsKICAgICAgckRzdC5oZWlnaHQgPSByU3JjLmhlaWdodDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkdXBsaWNhdGVSb3ciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGR1cGxpY2F0ZVJvdyhyb3dOdW0sIGNvdW50KSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIGluc2VydCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJd
IDogZmFsc2U7CiAgICAgIC8vIGNyZWF0ZSBjb3VudCBkdXBsaWNhdGVzIG9mIHJvd051bQogICAgICAvLyBlaXRoZXIgaW5zZXJ0aW5nIG5ldyBvciBvdmVyd3JpdGluZyBleGlzdGluZyByb3dzCiAgICAgIHZhciByU3JjID0gdGhpcy5fcm93c1tyb3dOdW0gLSAxXTsKICAgICAgdmFyIGluc2VydHMgPSBuZXcgQXJyYXkoY291bnQpLmZpbGwoclNyYy52YWx1ZXMpOwogICAgICB0aGlzLnNwbGljZVJvd3MuYXBwbHkodGhpcywgW3Jvd051bSArIDEsIGluc2VydCA/IDAgOiBjb3VudF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJh
eShpbnNlcnRzKSkpOyAvLyBub3cgY29weSBzdHlsZXMuLi4KCiAgICAgIHZhciBfbG9vcDIgPSBmdW5jdGlvbiBfbG9vcDIoaSkgewogICAgICAgIHZhciByRHN0ID0gX3RoaXMzLl9yb3dzW3Jvd051bSArIGldOwogICAgICAgIHJEc3Quc3R5bGUgPSByU3JjLnN0eWxlOwogICAgICAgIHJEc3QuaGVpZ2h0ID0gclNyYy5oZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmMKCiAgICAgICAgclNyYy5lYWNoQ2VsbCh7CiAgICAgICAgICBpbmNsdWRlRW1wdHk6IHRydWUKICAgICAgICB9LCBmdW5j
dGlvbiAoY2VsbCwgY29sTnVtYmVyKSB7CiAgICAgICAgICByRHN0LmdldENlbGwoY29sTnVtYmVyKS5zdHlsZSA9IGNlbGwuc3R5bGU7CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgICBfbG9vcDIoaSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzcGxpY2VSb3dzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzcGxpY2VSb3dzKHN0YXJ0LCBjb3VudCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIC8vIHNhbWUgcHJvYmxlbSBh
cyByb3cuc3BsaWNlLCBleGNlcHQgd29yc2UuCiAgICAgIHZhciBuS2VlcCA9IHN0YXJ0ICsgY291bnQ7CgogICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGluc2VydHMgPSBuZXcgQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykgewogICAgICAgIGluc2VydHNbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07CiAgICAgIH0KCiAgICAgIHZhciBuSW5zZXJ0cyA9IGluc2VydHMubGVuZ3RoOwogICAgICB2YXIgbkV4cGFuZCA9
IG5JbnNlcnRzIC0gY291bnQ7CiAgICAgIHZhciBuRW5kID0gdGhpcy5fcm93cy5sZW5ndGg7CiAgICAgIHZhciBpOwogICAgICB2YXIgclNyYzsKCiAgICAgIGlmIChuRXhwYW5kIDwgMCkgewogICAgICAgIC8vIHJlbW92ZSByb3dzCiAgICAgICAgZm9yIChpID0gbktlZXA7IGkgPD0gbkVuZDsgaSsrKSB7CiAgICAgICAgICByU3JjID0gdGhpcy5fcm93c1tpIC0gMV07CgogICAgICAgICAgaWYgKHJTcmMpIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgckRzdCA9IF90aGlzNC5nZXRSb3co
aSArIG5FeHBhbmQpOwoKICAgICAgICAgICAgICByRHN0LnZhbHVlcyA9IHJTcmMudmFsdWVzOwogICAgICAgICAgICAgIHJEc3Quc3R5bGUgPSByU3JjLnN0eWxlOwogICAgICAgICAgICAgIHJEc3QuaGVpZ2h0ID0gclNyYy5oZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmMKCiAgICAgICAgICAgICAgclNyYy5lYWNoQ2VsbCh7CiAgICAgICAgICAgICAgICBpbmNsdWRlRW1wdHk6IHRydWUKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoY2VsbCwgY29sTnVtYmVyKSB7CiAgICAgICAgICAg
ICAgICByRHN0LmdldENlbGwoY29sTnVtYmVyKS5zdHlsZSA9IGNlbGwuc3R5bGU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgX3RoaXM0Ll9yb3dzW2kgLSAxXSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfSkoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuX3Jvd3NbaSArIG5FeHBhbmQgLSAxXSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAobkV4cGFuZCA+IDApIHsKICAgICAgICAvLyBpbnNlcnQgbmV3IGNlbGxzCiAgICAgICAgZm9yIChp
ID0gbkVuZDsgaSA+PSBuS2VlcDsgaS0tKSB7CiAgICAgICAgICByU3JjID0gdGhpcy5fcm93c1tpIC0gMV07CgogICAgICAgICAgaWYgKHJTcmMpIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgckRzdCA9IF90aGlzNC5nZXRSb3coaSArIG5FeHBhbmQpOwoKICAgICAgICAgICAgICByRHN0LnZhbHVlcyA9IHJTcmMudmFsdWVzOwogICAgICAgICAgICAgIHJEc3Quc3R5bGUgPSByU3JjLnN0eWxlOwogICAgICAgICAgICAgIHJEc3QuaGVpZ2h0ID0gclNyYy5oZWlnaHQ7IC8vIGVzbGludC1k
aXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmMKCiAgICAgICAgICAgICAgclNyYy5lYWNoQ2VsbCh7CiAgICAgICAgICAgICAgICBpbmNsdWRlRW1wdHk6IHRydWUKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoY2VsbCwgY29sTnVtYmVyKSB7CiAgICAgICAgICAgICAgICByRHN0LmdldENlbGwoY29sTnVtYmVyKS5zdHlsZSA9IGNlbGwuc3R5bGU7IC8vIHJlbWVyZ2UgY2VsbHMgYWNjb3VudGluZyBmb3IgaW5zZXJ0IG9mZnNldAoKICAgICAgICAgICAgICAgIGlmIChjZWxsLl92YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lID09
PSAnTWVyZ2VWYWx1ZScpIHsKICAgICAgICAgICAgICAgICAgdmFyIGNlbGxUb0JlTWVyZ2VkID0gX3RoaXM0LmdldFJvdyhjZWxsLl9yb3cuX251bWJlciArIG5JbnNlcnRzKS5nZXRDZWxsKGNvbE51bWJlcik7CgogICAgICAgICAgICAgICAgICB2YXIgcHJldk1hc3RlciA9IGNlbGwuX3ZhbHVlLl9tYXN0ZXI7CgogICAgICAgICAgICAgICAgICB2YXIgbmV3TWFzdGVyID0gX3RoaXM0LmdldFJvdyhwcmV2TWFzdGVyLl9yb3cuX251bWJlciArIG5JbnNlcnRzKS5nZXRDZWxsKHByZXZNYXN0ZXIuX2NvbHVtbi5fbnVtYmVyKTsK
CiAgICAgICAgICAgICAgICAgIGNlbGxUb0JlTWVyZ2VkLm1lcmdlKG5ld01hc3Rlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl9yb3dzW2kgKyBuRXhwYW5kIC0gMV0gPSB1bmRlZmluZWQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IC8vIG5vdyBjb3B5IG92ZXIgdGhlIG5ldyB2YWx1ZXMKCgogICAgICBmb3IgKGkgPSAwOyBpIDwgbkluc2VydHM7IGkrKykgewogICAgICAgIHZhciByRHN0ID0g
dGhpcy5nZXRSb3coc3RhcnQgKyBpKTsKICAgICAgICByRHN0LnN0eWxlID0ge307CiAgICAgICAgckRzdC52YWx1ZXMgPSBpbnNlcnRzW2ldOwogICAgICB9IC8vIGFjY291bnQgZm9yIGRlZmluZWQgbmFtZXMKCgogICAgICB0aGlzLndvcmtib29rLmRlZmluZWROYW1lcy5zcGxpY2VSb3dzKHRoaXMubmFtZSwgc3RhcnQsIGNvdW50LCBuSW5zZXJ0cyk7CiAgICB9IC8vIGl0ZXJhdGUgb3ZlciBldmVyeSByb3cgaW4gdGhlIHdvcmtzaGVldCwgaW5jbHVkaW5nIG1heWJlIGVtcHR5IHJvd3MKCiAgfSwgewogICAga2V5OiAiZWFj
aFJvdyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZWFjaFJvdyhvcHRpb25zLCBpdGVyYXRlZSkgewogICAgICBpZiAoIWl0ZXJhdGVlKSB7CiAgICAgICAgaXRlcmF0ZWUgPSBvcHRpb25zOwogICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7CiAgICAgIH0KCiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZUVtcHR5KSB7CiAgICAgICAgdmFyIG4gPSB0aGlzLl9yb3dzLmxlbmd0aDsKCiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbjsgaSsrKSB7CiAgICAgICAgICBpdGVyYXRlZSh0aGlzLmdldFJvdyhpKSwg
aSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3Jvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7CiAgICAgICAgICBpZiAocm93ICYmIHJvdy5oYXNWYWx1ZXMpIHsKICAgICAgICAgICAgaXRlcmF0ZWUocm93LCByb3cubnVtYmVyKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSAvLyByZXR1cm4gYWxsIHJvd3MgYXMgc3BhcnNlIGFycmF5CgogIH0sIHsKICAgIGtleTogImdldFNoZWV0VmFsdWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTaGVldFZhbHVlcygpIHsKICAg
ICAgdmFyIHJvd3MgPSBbXTsKCiAgICAgIHRoaXMuX3Jvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7CiAgICAgICAgaWYgKHJvdykgewogICAgICAgICAgcm93c1tyb3cubnVtYmVyXSA9IHJvdy52YWx1ZXM7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJldHVybiByb3dzOwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBDZWxscwogICAgLy8gcmV0dXJucyB0aGUgY2VsbCBhdCBbcixjXSBvciBhZGRyZXNz
IGdpdmVuIGJ5IHIuIElmIG5vdCBmb3VuZCwgcmV0dXJuIHVuZGVmaW5lZAoKICB9LCB7CiAgICBrZXk6ICJmaW5kQ2VsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZENlbGwociwgYykgewogICAgICB2YXIgYWRkcmVzcyA9IGNvbENhY2hlLmdldEFkZHJlc3MociwgYyk7CiAgICAgIHZhciByb3cgPSB0aGlzLl9yb3dzW2FkZHJlc3Mucm93IC0gMV07CiAgICAgIHJldHVybiByb3cgPyByb3cuZmluZENlbGwoYWRkcmVzcy5jb2wpIDogdW5kZWZpbmVkOwogICAgfSAvLyByZXR1cm4gdGhlIGNlbGwgYXQgW3IsY10gb3IgYWRk
cmVzcyBnaXZlbiBieSByLiBJZiBub3QgZm91bmQsIGNyZWF0ZSBhIG5ldyBvbmUuCgogIH0sIHsKICAgIGtleTogImdldENlbGwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldENlbGwociwgYykgewogICAgICB2YXIgYWRkcmVzcyA9IGNvbENhY2hlLmdldEFkZHJlc3MociwgYyk7CiAgICAgIHZhciByb3cgPSB0aGlzLmdldFJvdyhhZGRyZXNzLnJvdyk7CiAgICAgIHJldHVybiByb3cuZ2V0Q2VsbEV4KGFkZHJlc3MpOwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBNZXJnZQogICAgLy8gY29udmVydCB0aGUgcmFuZ2UgZGVmaW5lZCBieSBbJ3RsOmJyJ10sIFt0bCxicl0gb3IgW3QsbCxiLHJdIGludG8gYSBzaW5nbGUgJ21lcmdlZCcgY2VsbAoKICB9LCB7CiAgICBrZXk6ICJtZXJnZUNlbGxzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtZXJnZUNlbGxzKCkgewogICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGNlbGxzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7
CiAgICAgICAgY2VsbHNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTsKICAgICAgfQoKICAgICAgdmFyIGRpbWVuc2lvbnMgPSBuZXcgUmFuZ2UoY2VsbHMpOwoKICAgICAgdGhpcy5fbWVyZ2VDZWxsc0ludGVybmFsKGRpbWVuc2lvbnMpOwogICAgfQogIH0sIHsKICAgIGtleTogIm1lcmdlQ2VsbHNXaXRob3V0U3R5bGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1lcmdlQ2VsbHNXaXRob3V0U3R5bGUoKSB7CiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgY2VsbHMgPSBuZXcgQXJyYXkoX2xlbjQpLCBf
a2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHsKICAgICAgICBjZWxsc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdOwogICAgICB9CgogICAgICB2YXIgZGltZW5zaW9ucyA9IG5ldyBSYW5nZShjZWxscyk7CgogICAgICB0aGlzLl9tZXJnZUNlbGxzSW50ZXJuYWwoZGltZW5zaW9ucywgdHJ1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX21lcmdlQ2VsbHNJbnRlcm5hbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX21lcmdlQ2VsbHNJbnRlcm5hbChkaW1lbnNpb25zLCBpZ25vcmVTdHlsZSkgewogICAgICAvLyBj
aGVjayBjZWxscyBhcmVuJ3QgYWxyZWFkeSBtZXJnZWQKICAgICAgXy5lYWNoKHRoaXMuX21lcmdlcywgZnVuY3Rpb24gKG1lcmdlKSB7CiAgICAgICAgaWYgKG1lcmdlLmludGVyc2VjdHMoZGltZW5zaW9ucykpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IG1lcmdlIGFscmVhZHkgbWVyZ2VkIGNlbGxzJyk7CiAgICAgICAgfQogICAgICB9KTsgLy8gYXBwbHkgbWVyZ2UKCgogICAgICB2YXIgbWFzdGVyID0gdGhpcy5nZXRDZWxsKGRpbWVuc2lvbnMudG9wLCBkaW1lbnNpb25zLmxlZnQpOwoKICAgICAgZm9y
ICh2YXIgaSA9IGRpbWVuc2lvbnMudG9wOyBpIDw9IGRpbWVuc2lvbnMuYm90dG9tOyBpKyspIHsKICAgICAgICBmb3IgKHZhciBqID0gZGltZW5zaW9ucy5sZWZ0OyBqIDw9IGRpbWVuc2lvbnMucmlnaHQ7IGorKykgewogICAgICAgICAgLy8gbWVyZ2UgYWxsIGJ1dCB0aGUgbWFzdGVyIGNlbGwKICAgICAgICAgIGlmIChpID4gZGltZW5zaW9ucy50b3AgfHwgaiA+IGRpbWVuc2lvbnMubGVmdCkgewogICAgICAgICAgICB0aGlzLmdldENlbGwoaSwgaikubWVyZ2UobWFzdGVyLCBpZ25vcmVTdHlsZSk7CiAgICAgICAgICB9CiAg
ICAgICAgfQogICAgICB9IC8vIGluZGV4IG1lcmdlCgoKICAgICAgdGhpcy5fbWVyZ2VzW21hc3Rlci5hZGRyZXNzXSA9IGRpbWVuc2lvbnM7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3VuTWVyZ2VNYXN0ZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF91bk1lcmdlTWFzdGVyKG1hc3RlcikgewogICAgICAvLyBtYXN0ZXIgaXMgYWx3YXlzIHRvcCBsZWZ0IG9mIGEgcmVjdGFuZ2xlCiAgICAgIHZhciBtZXJnZSA9IHRoaXMuX21lcmdlc1ttYXN0ZXIuYWRkcmVzc107CgogICAgICBpZiAobWVyZ2UpIHsKICAgICAgICBmb3IgKHZh
ciBpID0gbWVyZ2UudG9wOyBpIDw9IG1lcmdlLmJvdHRvbTsgaSsrKSB7CiAgICAgICAgICBmb3IgKHZhciBqID0gbWVyZ2UubGVmdDsgaiA8PSBtZXJnZS5yaWdodDsgaisrKSB7CiAgICAgICAgICAgIHRoaXMuZ2V0Q2VsbChpLCBqKS51bm1lcmdlKCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBkZWxldGUgdGhpcy5fbWVyZ2VzW21hc3Rlci5hZGRyZXNzXTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInVuTWVyZ2VDZWxscyIsCiAgICAvLyBzY2FuIHRoZSByYW5nZSBkZWZpbmVkIGJ5IFsndGw6YnIn
XSwgW3RsLGJyXSBvciBbdCxsLGIscl0gYW5kIGlmIGFueSBjZWxsIGlzIHBhcnQgb2YgYSBtZXJnZSwKICAgIC8vIHVuLW1lcmdlIHRoZSBncm91cC4gTm90ZSB0aGlzIGZ1bmN0aW9uIGNhbiBhZmZlY3QgbXVsdGlwbGUgbWVyZ2VzIGFuZCBtZXJnZS1ibG9ja3MgYXJlCiAgICAvLyBhdG9taWMgLSBlaXRoZXIgdGhleSdyZSBhbGwgbWVyZ2VkIG9yIGFsbCB1bi1tZXJnZWQuCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5NZXJnZUNlbGxzKCkgewogICAgICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGNlbGxzID0g
bmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7CiAgICAgICAgY2VsbHNbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTsKICAgICAgfQoKICAgICAgdmFyIGRpbWVuc2lvbnMgPSBuZXcgUmFuZ2UoY2VsbHMpOyAvLyBmaW5kIGFueSBjZWxscyBpbiB0aGF0IHJhbmdlIGFuZCB1bm1lcmdlIHRoZW0KCiAgICAgIGZvciAodmFyIGkgPSBkaW1lbnNpb25zLnRvcDsgaSA8PSBkaW1lbnNpb25zLmJvdHRvbTsgaSsrKSB7CiAgICAgICAgZm9yICh2YXIgaiA9IGRpbWVuc2lvbnMubGVmdDsg
aiA8PSBkaW1lbnNpb25zLnJpZ2h0OyBqKyspIHsKICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5maW5kQ2VsbChpLCBqKTsKCiAgICAgICAgICBpZiAoY2VsbCkgewogICAgICAgICAgICBpZiAoY2VsbC50eXBlID09PSBFbnVtcy5WYWx1ZVR5cGUuTWVyZ2UpIHsKICAgICAgICAgICAgICAvLyB0aGlzIGNlbGwgbWVyZ2VzIHRvIGFub3RoZXIgbWFzdGVyCiAgICAgICAgICAgICAgdGhpcy5fdW5NZXJnZU1hc3RlcihjZWxsLm1hc3Rlcik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbWVyZ2VzW2NlbGwuYWRkcmVzc10p
IHsKICAgICAgICAgICAgICAvLyB0aGlzIGNlbGwgaXMgYSBtYXN0ZXIKICAgICAgICAgICAgICB0aGlzLl91bk1lcmdlTWFzdGVyKGNlbGwpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gU2hhcmVkL0FycmF5IEZvcm11bGEKCiAgfSwgewogICAga2V5OiAiZmlsbEZvcm11bGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGxGb3Jt
dWxhKHJhbmdlLCBmb3JtdWxhLCByZXN1bHRzKSB7CiAgICAgIHZhciBzaGFyZVR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICdzaGFyZWQnOwogICAgICAvLyBEZWZpbmUgZm9ybXVsYSBmb3IgdG9wLWxlZnQgY2VsbCBhbmQgc2hhcmUgdG8gcmVzdAogICAgICB2YXIgZGVjb2RlZCA9IGNvbENhY2hlLmRlY29kZShyYW5nZSk7CiAgICAgIHZhciB0b3AgPSBkZWNvZGVkLnRvcCwKICAgICAgICAgIGxlZnQgPSBkZWNvZGVkLmxlZnQsCiAgICAg
ICAgICBib3R0b20gPSBkZWNvZGVkLmJvdHRvbSwKICAgICAgICAgIHJpZ2h0ID0gZGVjb2RlZC5yaWdodDsKICAgICAgdmFyIHdpZHRoID0gcmlnaHQgLSBsZWZ0ICsgMTsKICAgICAgdmFyIG1hc3RlckFkZHJlc3MgPSBjb2xDYWNoZS5lbmNvZGVBZGRyZXNzKHRvcCwgbGVmdCk7CiAgICAgIHZhciBpc1NoYXJlZCA9IHNoYXJlVHlwZSA9PT0gJ3NoYXJlZCc7IC8vIHdvcmsgb3V0IHJlc3VsdCBhY2Nlc3NvcgoKICAgICAgdmFyIGdldFJlc3VsdDsKCiAgICAgIGlmICh0eXBlb2YgcmVzdWx0cyA9PT0gJ2Z1bmN0aW9uJykgewog
ICAgICAgIGdldFJlc3VsdCA9IHJlc3VsdHM7CiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHRzKSkgewogICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdHNbMF0pKSB7CiAgICAgICAgICBnZXRSZXN1bHQgPSBmdW5jdGlvbiBnZXRSZXN1bHQocm93LCBjb2wpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHNbcm93IC0gdG9wXVtjb2wgLSBsZWZ0XTsKICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1taXhlZC1vcGVyYXRv
cnMKICAgICAgICAgIGdldFJlc3VsdCA9IGZ1bmN0aW9uIGdldFJlc3VsdChyb3csIGNvbCkgewogICAgICAgICAgICByZXR1cm4gcmVzdWx0c1socm93IC0gdG9wKSAqIHdpZHRoICsgKGNvbCAtIGxlZnQpXTsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGdldFJlc3VsdCA9IGZ1bmN0aW9uIGdldFJlc3VsdCgpIHsKICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTsKCiAgICAgIGZvciAodmFyIHIgPSB0b3A7IHIg
PD0gYm90dG9tOyByKyspIHsKICAgICAgICBmb3IgKHZhciBjID0gbGVmdDsgYyA8PSByaWdodDsgYysrKSB7CiAgICAgICAgICBpZiAoZmlyc3QpIHsKICAgICAgICAgICAgdGhpcy5nZXRDZWxsKHIsIGMpLnZhbHVlID0gewogICAgICAgICAgICAgIHNoYXJlVHlwZTogc2hhcmVUeXBlLAogICAgICAgICAgICAgIGZvcm11bGE6IGZvcm11bGEsCiAgICAgICAgICAgICAgcmVmOiByYW5nZSwKICAgICAgICAgICAgICByZXN1bHQ6IGdldFJlc3VsdChyLCBjKQogICAgICAgICAgICB9OwogICAgICAgICAgICBmaXJzdCA9IGZhbHNl
OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5nZXRDZWxsKHIsIGMpLnZhbHVlID0gaXNTaGFyZWQgPyB7CiAgICAgICAgICAgICAgc2hhcmVkRm9ybXVsYTogbWFzdGVyQWRkcmVzcywKICAgICAgICAgICAgICByZXN1bHQ6IGdldFJlc3VsdChyLCBjKQogICAgICAgICAgICB9IDogZ2V0UmVzdWx0KHIsIGMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
CiAgICAvLyBJbWFnZXMKCiAgfSwgewogICAga2V5OiAiYWRkSW1hZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEltYWdlKGltYWdlSWQsIHJhbmdlKSB7CiAgICAgIHZhciBtb2RlbCA9IHsKICAgICAgICB0eXBlOiAnaW1hZ2UnLAogICAgICAgIGltYWdlSWQ6IGltYWdlSWQsCiAgICAgICAgcmFuZ2U6IHJhbmdlCiAgICAgIH07CgogICAgICB0aGlzLl9tZWRpYS5wdXNoKG5ldyBJbWFnZSh0aGlzLCBtb2RlbCkpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEltYWdlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW1h
Z2VzKCkgewogICAgICByZXR1cm4gdGhpcy5fbWVkaWEuZmlsdGVyKGZ1bmN0aW9uIChtKSB7CiAgICAgICAgcmV0dXJuIG0udHlwZSA9PT0gJ2ltYWdlJzsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkQmFja2dyb3VuZEltYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRCYWNrZ3JvdW5kSW1hZ2UoaW1hZ2VJZCkgewogICAgICB2YXIgbW9kZWwgPSB7CiAgICAgICAgdHlwZTogJ2JhY2tncm91bmQnLAogICAgICAgIGltYWdlSWQ6IGltYWdlSWQKICAgICAgfTsKCiAgICAgIHRoaXMuX21lZGlhLnB1c2go
bmV3IEltYWdlKHRoaXMsIG1vZGVsKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0QmFja2dyb3VuZEltYWdlSWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJhY2tncm91bmRJbWFnZUlkKCkgewogICAgICB2YXIgaW1hZ2UgPSB0aGlzLl9tZWRpYS5maW5kKGZ1bmN0aW9uIChtKSB7CiAgICAgICAgcmV0dXJuIG0udHlwZSA9PT0gJ2JhY2tncm91bmQnOwogICAgICB9KTsKCiAgICAgIHJldHVybiBpbWFnZSAmJiBpbWFnZS5pbWFnZUlkOwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBXb3Jrc2hlZXQgUHJvdGVjdGlvbgoKICB9LCB7CiAgICBrZXk6ICJwcm90ZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcm90ZWN0KHBhc3N3b3JkLCBvcHRpb25zKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgLy8gVE9ETzogbWFrZSB0aGlzIGZ1bmN0aW9uIHRydWx5IGFzeW5jCiAgICAgIC8vIHBlcmhhcHMgbWFyc2hhbCB0byB3b3JrZXIgdGhyZWFkIG9yIHNvbWV0aGluZwogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rp
b24gKHJlc29sdmUpIHsKICAgICAgICBfdGhpczUuc2hlZXRQcm90ZWN0aW9uID0gewogICAgICAgICAgc2hlZXQ6IHRydWUKICAgICAgICB9OwoKICAgICAgICBpZiAob3B0aW9ucyAmJiAnc3BpbkNvdW50JyBpbiBvcHRpb25zKSB7CiAgICAgICAgICAvLyBmb3JjZSBzcGluQ291bnQgdG8gYmUgaW50ZWdlciA+PSAwCiAgICAgICAgICBvcHRpb25zLnNwaW5Db3VudCA9IE51bWJlci5pc0Zpbml0ZShvcHRpb25zLnNwaW5Db3VudCkgPyBNYXRoLnJvdW5kKE1hdGgubWF4KDAsIG9wdGlvbnMuc3BpbkNvdW50KSkgOiAxMDAwMDA7
CiAgICAgICAgfQoKICAgICAgICBpZiAocGFzc3dvcmQpIHsKICAgICAgICAgIF90aGlzNS5zaGVldFByb3RlY3Rpb24uYWxnb3JpdGhtTmFtZSA9ICdTSEEtNTEyJzsKICAgICAgICAgIF90aGlzNS5zaGVldFByb3RlY3Rpb24uc2FsdFZhbHVlID0gRW5jcnlwdG9yLnJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnYmFzZTY0Jyk7CiAgICAgICAgICBfdGhpczUuc2hlZXRQcm90ZWN0aW9uLnNwaW5Db3VudCA9IG9wdGlvbnMgJiYgJ3NwaW5Db3VudCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3BpbkNvdW50IDogMTAwMDAwOyAvLyBh
bGxvdyB1c2VyIHNwZWNpZmllZCBzcGluQ291bnQKCiAgICAgICAgICBfdGhpczUuc2hlZXRQcm90ZWN0aW9uLmhhc2hWYWx1ZSA9IEVuY3J5cHRvci5jb252ZXJ0UGFzc3dvcmRUb0hhc2gocGFzc3dvcmQsICdTSEE1MTInLCBfdGhpczUuc2hlZXRQcm90ZWN0aW9uLnNhbHRWYWx1ZSwgX3RoaXM1LnNoZWV0UHJvdGVjdGlvbi5zcGluQ291bnQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG9wdGlvbnMpIHsKICAgICAgICAgIF90aGlzNS5zaGVldFByb3RlY3Rpb24gPSBPYmplY3QuYXNzaWduKF90aGlzNS5zaGVldFByb3RlY3Rp
b24sIG9wdGlvbnMpOwoKICAgICAgICAgIGlmICghcGFzc3dvcmQgJiYgJ3NwaW5Db3VudCcgaW4gb3B0aW9ucykgewogICAgICAgICAgICBkZWxldGUgX3RoaXM1LnNoZWV0UHJvdGVjdGlvbi5zcGluQ291bnQ7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXNvbHZlKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInVucHJvdGVjdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5wcm90ZWN0KCkgewogICAgICB0aGlzLnNoZWV0UHJvdGVjdGlvbiA9IG51bGw7CiAgICB9IC8vID09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIFRhYmxlcwoKICB9LCB7CiAgICBrZXk6ICJhZGRUYWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVGFibGUobW9kZWwpIHsKICAgICAgdmFyIHRhYmxlID0gbmV3IFRhYmxlKHRoaXMsIG1vZGVsKTsKICAgICAgdGhpcy50YWJsZXNbbW9kZWwubmFtZV0gPSB0YWJsZTsKICAgICAgcmV0dXJuIHRhYmxlOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFRhYmxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRU
YWJsZShuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzLnRhYmxlc1tuYW1lXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVUYWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlVGFibGUobmFtZSkgewogICAgICBkZWxldGUgdGhpcy50YWJsZXNbbmFtZV07CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VGFibGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUYWJsZXMoKSB7CiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMudGFibGVzKTsKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBDb25kaXRpb25hbCBGb3JtYXR0aW5nCgogIH0sIHsKICAgIGtleTogImFkZENvbmRpdGlvbmFsRm9ybWF0dGluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ29uZGl0aW9uYWxGb3JtYXR0aW5nKGNmKSB7CiAgICAgIHRoaXMuY29uZGl0aW9uYWxGb3JtYXR0aW5ncy5wdXNoKGNmKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVDb25kaXRpb25hbEZvcm1hdHRpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNv
bmRpdGlvbmFsRm9ybWF0dGluZyhmaWx0ZXIpIHsKICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdudW1iZXInKSB7CiAgICAgICAgdGhpcy5jb25kaXRpb25hbEZvcm1hdHRpbmdzLnNwbGljZShmaWx0ZXIsIDEpOwogICAgICB9IGVsc2UgaWYgKGZpbHRlciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgdGhpcy5jb25kaXRpb25hbEZvcm1hdHRpbmdzID0gdGhpcy5jb25kaXRpb25hbEZvcm1hdHRpbmdzLmZpbHRlcihmaWx0ZXIpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY29uZGl0aW9uYWxGb3JtYXR0
aW5ncyA9IFtdOwogICAgICB9CiAgICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gRGVwcmVjYXRlZAoKICB9LCB7CiAgICBrZXk6ICJfcGFyc2VSb3dzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcGFyc2VSb3dzKG1vZGVsKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdGhpcy5fcm93cyA9IFtdOwogICAgICBtb2RlbC5yb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvd01vZGVsKSB7CiAgICAgICAgdmFy
IHJvdyA9IG5ldyBSb3coX3RoaXM2LCByb3dNb2RlbC5udW1iZXIpOwogICAgICAgIF90aGlzNi5fcm93c1tyb3cubnVtYmVyIC0gMV0gPSByb3c7CiAgICAgICAgcm93Lm1vZGVsID0gcm93TW9kZWw7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIl9wYXJzZU1lcmdlQ2VsbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wYXJzZU1lcmdlQ2VsbHMobW9kZWwpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICBfLmVhY2gobW9kZWwubWVyZ2VDZWxscywgZnVuY3Rpb24gKG1lcmdlKSB7CiAgICAgICAgLy8g
RG8gbm90IG1lcmdlIHN0eWxlcyB3aGVuIGltcG9ydGluZyBhbiBFeGNlbCBmaWxlCiAgICAgICAgLy8gc2luY2UgZWFjaCBjZWxsIG1heSBoYXZlIGRpZmZlcmVudCBzdHlsZXMgaW50ZW50aW9uYWxseS4KICAgICAgICBfdGhpczcubWVyZ2VDZWxsc1dpdGhvdXRTdHlsZShtZXJnZSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIndvcmtib29rIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fd29ya2Jvb2s7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGltZW5zaW9ucyIsCiAg
ICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIGRpbWVuc2lvbnMgPSBuZXcgUmFuZ2UoKTsKCiAgICAgIHRoaXMuX3Jvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7CiAgICAgICAgaWYgKHJvdykgewogICAgICAgICAgdmFyIHJvd0RpbXMgPSByb3cuZGltZW5zaW9uczsKCiAgICAgICAgICBpZiAocm93RGltcykgewogICAgICAgICAgICBkaW1lbnNpb25zLmV4cGFuZChyb3cubnVtYmVyLCByb3dEaW1zLm1pbiwgcm93Lm51bWJlciwgcm93RGltcy5tYXgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7
CgogICAgICByZXR1cm4gZGltZW5zaW9uczsKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gQ29sdW1ucwogICAgLy8gZ2V0IHRoZSBjdXJyZW50IGNvbHVtbnMgYXJyYXkuCgogIH0sIHsKICAgIGtleTogImNvbHVtbnMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jb2x1bW5zOwogICAgfSAvLyBzZXQgdGhlIGNvbHVtbnMgZnJvbSBhbiBhcnJheSBvZiBjb2x1bW4gZGVmaW5p
dGlvbnMuCiAgICAvLyBOb3RlOiBhbnkgaGVhZGVycyBkZWZpbmVkIHdpbGwgb3ZlcndyaXRlIGV4aXN0aW5nIHZhbHVlcy4KICAgICwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgLy8gY2FsY3VsYXRlIG1heCBoZWFkZXIgcm93IGNvdW50CiAgICAgIHRoaXMuX2hlYWRlclJvd0NvdW50ID0gdmFsdWUucmVkdWNlKGZ1bmN0aW9uIChwdiwgY3YpIHsKICAgICAgICB2YXIgaGVhZGVyQ291bnQgPSBjdi5oZWFkZXIgJiYgMSB8fCBjdi5oZWFkZXJzICYmIGN2Lmhl
YWRlcnMubGVuZ3RoIHx8IDA7CiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHB2LCBoZWFkZXJDb3VudCk7CiAgICAgIH0sIDApOyAvLyBjb25zdHJ1Y3QgQ29sdW1uIG9iamVjdHMKCiAgICAgIHZhciBjb3VudCA9IDE7CiAgICAgIHZhciBjb2x1bW5zID0gdGhpcy5fY29sdW1ucyA9IFtdOwogICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChkZWZuKSB7CiAgICAgICAgdmFyIGNvbHVtbiA9IG5ldyBDb2x1bW4oX3RoaXM4LCBjb3VudCsrLCBmYWxzZSk7CiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtbik7CiAgICAgICAgY29s
dW1uLmRlZm4gPSBkZWZuOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsYXN0Q29sdW1uIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5nZXRDb2x1bW4odGhpcy5jb2x1bW5Db3VudCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29sdW1uQ291bnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBtYXhDb3VudCA9IDA7CiAgICAgIHRoaXMuZWFjaFJvdyhmdW5jdGlvbiAocm93KSB7CiAgICAgICAgbWF4Q291bnQgPSBNYXRoLm1heChtYXhDb3VudCwgcm93
LmNlbGxDb3VudCk7CiAgICAgIH0pOwogICAgICByZXR1cm4gbWF4Q291bnQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWN0dWFsQ29sdW1uQ291bnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIC8vIHBlcmZvcm1hbmNlIG5pZ2h0bWFyZSAtIGZvciBlYWNoIHJvdywgY291bnRzIGFsbCB0aGUgY29sdW1ucyB1c2VkCiAgICAgIHZhciBjb3VudHMgPSBbXTsKICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgdGhpcy5lYWNoUm93KGZ1bmN0aW9uIChyb3cpIHsKICAgICAgICByb3cuZWFjaENlbGwoZnVuY3Rpb24g
KF9yZWYpIHsKICAgICAgICAgIHZhciBjb2wgPSBfcmVmLmNvbDsKCiAgICAgICAgICBpZiAoIWNvdW50c1tjb2xdKSB7CiAgICAgICAgICAgIGNvdW50c1tjb2xdID0gdHJ1ZTsKICAgICAgICAgICAgY291bnQrKzsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHJldHVybiBjb3VudDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfbGFzdFJvd051bWJlciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgLy8gbmVlZCB0byBjb3BlIHdpdGggcmVzdWx0cyBvZiBzcGxpY2UKICAgICAgdmFyIHJv
d3MgPSB0aGlzLl9yb3dzOwogICAgICB2YXIgbiA9IHJvd3MubGVuZ3RoOwoKICAgICAgd2hpbGUgKG4gPiAwICYmIHJvd3NbbiAtIDFdID09PSB1bmRlZmluZWQpIHsKICAgICAgICBuLS07CiAgICAgIH0KCiAgICAgIHJldHVybiBuOwogICAgfQogIH0sIHsKICAgIGtleTogIl9uZXh0Um93IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fbGFzdFJvd051bWJlciArIDE7CiAgICB9CiAgfSwgewogICAga2V5OiAibGFzdFJvdyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYg
KHRoaXMuX3Jvd3MubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvd3NbdGhpcy5fcm93cy5sZW5ndGggLSAxXTsKICAgICAgfQoKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyb3dDb3VudCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2xhc3RSb3dOdW1iZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWN0dWFsUm93Q291bnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIC8vIGNvdW50cyBhY3R1YWwgcm93cyB0aGF0IGhh
dmUgYWN0dWFsIGRhdGEKICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgdGhpcy5lYWNoUm93KGZ1bmN0aW9uICgpIHsKICAgICAgICBjb3VudCsrOwogICAgICB9KTsKICAgICAgcmV0dXJuIGNvdW50OwogICAgfQogIH0sIHsKICAgIGtleTogImhhc01lcmdlcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgLy8gcmV0dXJuIHRydWUgaWYgdGhpcy5fbWVyZ2VzIGhhcyBhIG1lcmdlIG9iamVjdAogICAgICByZXR1cm4gXy5zb21lKHRoaXMuX21lcmdlcywgQm9vbGVhbik7CiAgICB9CiAgfSwgewogICAga2V5OiAi
dGFiQ29sb3IiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgICAgIGNvbnNvbGUudHJhY2UoJ3dvcmtzaGVldC50YWJDb2xvciBwcm9wZXJ0eSBpcyBub3cgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB3b3Jrc2hlZXQucHJvcGVydGllcy50YWJDb2xvcicpOwogICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLnRhYkNvbG9yOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQt
bGluZSBuby1jb25zb2xlCiAgICAgIGNvbnNvbGUudHJhY2UoJ3dvcmtzaGVldC50YWJDb2xvciBwcm9wZXJ0eSBpcyBub3cgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB3b3Jrc2hlZXQucHJvcGVydGllcy50YWJDb2xvcicpOwogICAgICB0aGlzLnByb3BlcnRpZXMudGFiQ29sb3IgPSB2YWx1ZTsKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBNb2RlbAoKICB9LCB7CiAgICBrZXk6ICJtb2RlbCIsCiAgICBnZXQ6
IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIG1vZGVsID0gewogICAgICAgIGlkOiB0aGlzLmlkLAogICAgICAgIG5hbWU6IHRoaXMubmFtZSwKICAgICAgICBkYXRhVmFsaWRhdGlvbnM6IHRoaXMuZGF0YVZhbGlkYXRpb25zLm1vZGVsLAogICAgICAgIHByb3BlcnRpZXM6IHRoaXMucHJvcGVydGllcywKICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSwKICAgICAgICBwYWdlU2V0dXA6IHRoaXMucGFnZVNldHVwLAogICAgICAgIGhlYWRlckZvb3RlcjogdGhpcy5oZWFkZXJGb290ZXIsCiAgICAgICAgcm93QnJlYWtzOiB0aGlz
LnJvd0JyZWFrcywKICAgICAgICB2aWV3czogdGhpcy52aWV3cywKICAgICAgICBhdXRvRmlsdGVyOiB0aGlzLmF1dG9GaWx0ZXIsCiAgICAgICAgbWVkaWE6IHRoaXMuX21lZGlhLm1hcChmdW5jdGlvbiAobWVkaXVtKSB7CiAgICAgICAgICByZXR1cm4gbWVkaXVtLm1vZGVsOwogICAgICAgIH0pLAogICAgICAgIHNoZWV0UHJvdGVjdGlvbjogdGhpcy5zaGVldFByb3RlY3Rpb24sCiAgICAgICAgdGFibGVzOiBPYmplY3QudmFsdWVzKHRoaXMudGFibGVzKS5tYXAoZnVuY3Rpb24gKHRhYmxlKSB7CiAgICAgICAgICByZXR1cm4g
dGFibGUubW9kZWw7CiAgICAgICAgfSksCiAgICAgICAgY29uZGl0aW9uYWxGb3JtYXR0aW5nczogdGhpcy5jb25kaXRpb25hbEZvcm1hdHRpbmdzCiAgICAgIH07IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgLy8gY29sdW1ucwoKICAgICAgbW9kZWwuY29scyA9IENvbHVtbi50b01vZGVsKHRoaXMuY29sdW1ucyk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgLy8gUm93cwoKICAgICAgdmFy
IHJvd3MgPSBtb2RlbC5yb3dzID0gW107CiAgICAgIHZhciBkaW1lbnNpb25zID0gbW9kZWwuZGltZW5zaW9ucyA9IG5ldyBSYW5nZSgpOwoKICAgICAgdGhpcy5fcm93cy5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHsKICAgICAgICB2YXIgcm93TW9kZWwgPSByb3cgJiYgcm93Lm1vZGVsOwoKICAgICAgICBpZiAocm93TW9kZWwpIHsKICAgICAgICAgIGRpbWVuc2lvbnMuZXhwYW5kKHJvd01vZGVsLm51bWJlciwgcm93TW9kZWwubWluLCByb3dNb2RlbC5udW1iZXIsIHJvd01vZGVsLm1heCk7CiAgICAgICAgICByb3dzLnB1c2go
cm93TW9kZWwpOwogICAgICAgIH0KICAgICAgfSk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAgLy8gTWVyZ2VzCgoKICAgICAgbW9kZWwubWVyZ2VzID0gW107CgogICAgICBfLmVhY2godGhpcy5fbWVyZ2VzLCBmdW5jdGlvbiAobWVyZ2UpIHsKICAgICAgICBtb2RlbC5tZXJnZXMucHVzaChtZXJnZS5yYW5nZSk7CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHZh
ciBfdGhpczkgPSB0aGlzOwoKICAgICAgdGhpcy5uYW1lID0gdmFsdWUubmFtZTsKICAgICAgdGhpcy5fY29sdW1ucyA9IENvbHVtbi5mcm9tTW9kZWwodGhpcywgdmFsdWUuY29scyk7CgogICAgICB0aGlzLl9wYXJzZVJvd3ModmFsdWUpOwoKICAgICAgdGhpcy5fcGFyc2VNZXJnZUNlbGxzKHZhbHVlKTsKCiAgICAgIHRoaXMuZGF0YVZhbGlkYXRpb25zID0gbmV3IERhdGFWYWxpZGF0aW9ucyh2YWx1ZS5kYXRhVmFsaWRhdGlvbnMpOwogICAgICB0aGlzLnByb3BlcnRpZXMgPSB2YWx1ZS5wcm9wZXJ0aWVzOwogICAgICB0aGlz
LnBhZ2VTZXR1cCA9IHZhbHVlLnBhZ2VTZXR1cDsKICAgICAgdGhpcy5oZWFkZXJGb290ZXIgPSB2YWx1ZS5oZWFkZXJGb290ZXI7CiAgICAgIHRoaXMudmlld3MgPSB2YWx1ZS52aWV3czsKICAgICAgdGhpcy5hdXRvRmlsdGVyID0gdmFsdWUuYXV0b0ZpbHRlcjsKICAgICAgdGhpcy5fbWVkaWEgPSB2YWx1ZS5tZWRpYS5tYXAoZnVuY3Rpb24gKG1lZGl1bSkgewogICAgICAgIHJldHVybiBuZXcgSW1hZ2UoX3RoaXM5LCBtZWRpdW0pOwogICAgICB9KTsKICAgICAgdGhpcy5zaGVldFByb3RlY3Rpb24gPSB2YWx1ZS5zaGVldFBy
b3RlY3Rpb247CiAgICAgIHRoaXMudGFibGVzID0gdmFsdWUudGFibGVzLnJlZHVjZShmdW5jdGlvbiAodGFibGVzLCB0YWJsZSkgewogICAgICAgIHZhciB0ID0gbmV3IFRhYmxlKCk7CiAgICAgICAgdC5tb2RlbCA9IHRhYmxlOwogICAgICAgIHRhYmxlc1t0YWJsZS5uYW1lXSA9IHQ7CiAgICAgICAgcmV0dXJuIHRhYmxlczsKICAgICAgfSwge30pOwogICAgICB0aGlzLmNvbmRpdGlvbmFsRm9ybWF0dGluZ3MgPSB2YWx1ZS5jb25kaXRpb25hbEZvcm1hdHRpbmdzOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFdvcmtzaGVldDsK
fSgpOwoKbW9kdWxlLmV4cG9ydHMgPSBXb3Jrc2hlZXQ7Cgp9LHsiLi4vdXRpbHMvY29sLWNhY2hlIjoxOSwiLi4vdXRpbHMvZW5jcnlwdG9yIjoyMCwiLi4vdXRpbHMvdW5kZXItZGFzaCI6MjUsIi4vY29sdW1uIjo0LCIuL2RhdGEtdmFsaWRhdGlvbnMiOjUsIi4vZW51bXMiOjcsIi4vaW1hZ2UiOjgsIi4vcmFuZ2UiOjEwLCIuL3JvdyI6MTEsIi4vdGFibGUiOjEyfV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovLyB0aGlzIGJ1bmRsZSBpcyBidWlsdCB3aXRob3V0IHBvbHlm
aWxsIGxlYXZpbmcgYXBwcyB0aGUgZnJlZWRvbSB0byBhZGQgdGhlaXIgb3duCnZhciBFeGNlbEpTID0gewogIFdvcmtib29rOiByZXF1aXJlKCcuL2RvYy93b3JrYm9vaycpCn07IC8vIE9iamVjdC5hc3NpZ24gbW9uby1maWxsCgp2YXIgRW51bXMgPSByZXF1aXJlKCcuL2RvYy9lbnVtcycpOwoKT2JqZWN0LmtleXMoRW51bXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogIEV4Y2VsSlNba2V5XSA9IEVudW1zW2tleV07Cn0pOwptb2R1bGUuZXhwb3J0cyA9IEV4Y2VsSlM7CgoKCn0seyIuL2RvYy9lbnVtcyI6NywiLi9kb2Mv
d29ya2Jvb2siOjEzfV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCnZhciB0ZXh0RGVjb2RlciA9IHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpOwoKZnVuY3Rpb24gYnVmZmVyVG9TdHJpbmcoY2h1bmspIHsKICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykgewogICAg
cmV0dXJuIGNodW5rOwogIH0KCiAgaWYgKHRleHREZWNvZGVyKSB7CiAgICByZXR1cm4gdGV4dERlY29kZXIuZGVjb2RlKGNodW5rKTsKICB9CgogIHJldHVybiBjaHVuay50b1N0cmluZygpOwp9CgpleHBvcnRzLmJ1ZmZlclRvU3RyaW5nID0gYnVmZmVyVG9TdHJpbmc7Cgp9LHt9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKdmFyIHRleHRFbmNvZGVy
ID0gdHlwZW9mIFRleHRFbmNvZGVyID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiBuZXcgVGV4dEVuY29kZXIoJ3V0Zi04Jyk7Cgp2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdidWZmZXInKSwKICAgIEJ1ZmZlciA9IF9yZXF1aXJlLkJ1ZmZlcjsKCmZ1bmN0aW9uIHN0cmluZ1RvQnVmZmVyKHN0cikgewogIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykgewogICAgcmV0dXJuIHN0cjsKICB9CgogIGlmICh0ZXh0RW5jb2RlcikgewogICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRleHRFbmNvZGVyLmVuY29kZShzdHIpLmJ1ZmZlcik7
CiAgfQoKICByZXR1cm4gQnVmZmVyLmZyb20oc3RyKTsKfQoKZXhwb3J0cy5zdHJpbmdUb0J1ZmZlciA9IHN0cmluZ1RvQnVmZmVyOwoKfSx7ImJ1ZmZlciI6MjE2fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9
IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iu
a2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIF8gPSByZXF1aXJlKCcuL3VuZGVyLWRhc2gnKTsKCnZhciBjb2xDYWNoZSA9IHJlcXVpcmUoJy4v
Y29sLWNhY2hlJyk7Cgp2YXIgQ2VsbE1hdHJpeCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQ2VsbE1hdHJpeCh0ZW1wbGF0ZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENlbGxNYXRyaXgpOwoKICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTsKICAgIHRoaXMuc2hlZXRzID0ge307CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ2VsbE1hdHJpeCwgW3sKICAgIGtleTogImFkZENlbGwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZENlbGwoYWRkcmVzc1N0cikgewogICAgICB0aGlzLmFkZENlbGxF
eChjb2xDYWNoZS5kZWNvZGVFeChhZGRyZXNzU3RyKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0Q2VsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2VsbChhZGRyZXNzU3RyKSB7CiAgICAgIHJldHVybiB0aGlzLmZpbmRDZWxsRXgoY29sQ2FjaGUuZGVjb2RlRXgoYWRkcmVzc1N0ciksIHRydWUpOwogICAgfQogIH0sIHsKICAgIGtleTogImZpbmRDZWxsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kQ2VsbChhZGRyZXNzU3RyKSB7CiAgICAgIHJldHVybiB0aGlzLmZpbmRDZWxsRXgoY29sQ2FjaGUuZGVjb2RlRXgo
YWRkcmVzc1N0ciksIGZhbHNlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaW5kQ2VsbEF0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kQ2VsbEF0KHNoZWV0TmFtZSwgcm93TnVtYmVyLCBjb2xOdW1iZXIpIHsKICAgICAgdmFyIHNoZWV0ID0gdGhpcy5zaGVldHNbc2hlZXROYW1lXTsKICAgICAgdmFyIHJvdyA9IHNoZWV0ICYmIHNoZWV0W3Jvd051bWJlcl07CiAgICAgIHJldHVybiByb3cgJiYgcm93W2NvbE51bWJlcl07CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkQ2VsbEV4IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBh
ZGRDZWxsRXgoYWRkcmVzcykgewogICAgICBpZiAoYWRkcmVzcy50b3ApIHsKICAgICAgICBmb3IgKHZhciByb3cgPSBhZGRyZXNzLnRvcDsgcm93IDw9IGFkZHJlc3MuYm90dG9tOyByb3crKykgewogICAgICAgICAgZm9yICh2YXIgY29sID0gYWRkcmVzcy5sZWZ0OyBjb2wgPD0gYWRkcmVzcy5yaWdodDsgY29sKyspIHsKICAgICAgICAgICAgdGhpcy5nZXRDZWxsQXQoYWRkcmVzcy5zaGVldE5hbWUsIHJvdywgY29sKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5maW5kQ2VsbEV4
KGFkZHJlc3MsIHRydWUpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0Q2VsbEV4IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDZWxsRXgoYWRkcmVzcykgewogICAgICByZXR1cm4gdGhpcy5maW5kQ2VsbEV4KGFkZHJlc3MsIHRydWUpOwogICAgfQogIH0sIHsKICAgIGtleTogImZpbmRDZWxsRXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRDZWxsRXgoYWRkcmVzcywgY3JlYXRlKSB7CiAgICAgIHZhciBzaGVldCA9IHRoaXMuZmluZFNoZWV0KGFkZHJlc3MsIGNyZWF0ZSk7CiAgICAgIHZhciByb3cgPSB0
aGlzLmZpbmRTaGVldFJvdyhzaGVldCwgYWRkcmVzcywgY3JlYXRlKTsKICAgICAgcmV0dXJuIHRoaXMuZmluZFJvd0NlbGwocm93LCBhZGRyZXNzLCBjcmVhdGUpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldENlbGxBdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2VsbEF0KHNoZWV0TmFtZSwgcm93TnVtYmVyLCBjb2xOdW1iZXIpIHsKICAgICAgdmFyIHNoZWV0ID0gdGhpcy5zaGVldHNbc2hlZXROYW1lXSB8fCAodGhpcy5zaGVldHNbc2hlZXROYW1lXSA9IFtdKTsKICAgICAgdmFyIHJvdyA9IHNoZWV0W3Jvd051bWJl
cl0gfHwgKHNoZWV0W3Jvd051bWJlcl0gPSBbXSk7CiAgICAgIHZhciBjZWxsID0gcm93W2NvbE51bWJlcl0gfHwgKHJvd1tjb2xOdW1iZXJdID0gewogICAgICAgIHNoZWV0TmFtZTogc2hlZXROYW1lLAogICAgICAgIGFkZHJlc3M6IGNvbENhY2hlLm4ybChjb2xOdW1iZXIpICsgcm93TnVtYmVyLAogICAgICAgIHJvdzogcm93TnVtYmVyLAogICAgICAgIGNvbDogY29sTnVtYmVyCiAgICAgIH0pOwogICAgICByZXR1cm4gY2VsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW1vdmVDZWxsRXgiLAogICAgdmFsdWU6IGZ1bmN0
aW9uIHJlbW92ZUNlbGxFeChhZGRyZXNzKSB7CiAgICAgIHZhciBzaGVldCA9IHRoaXMuZmluZFNoZWV0KGFkZHJlc3MpOwoKICAgICAgaWYgKCFzaGVldCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHJvdyA9IHRoaXMuZmluZFNoZWV0Um93KHNoZWV0LCBhZGRyZXNzKTsKCiAgICAgIGlmICghcm93KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBkZWxldGUgcm93W2FkZHJlc3MuY29sXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb3JFYWNoSW5TaGVldCIsCiAgICB2YWx1ZTogZnVuY3Rp
b24gZm9yRWFjaEluU2hlZXQoc2hlZXROYW1lLCBjYWxsYmFjaykgewogICAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0c1tzaGVldE5hbWVdOwoKICAgICAgaWYgKHNoZWV0KSB7CiAgICAgICAgc2hlZXQuZm9yRWFjaChmdW5jdGlvbiAocm93LCByb3dOdW1iZXIpIHsKICAgICAgICAgIGlmIChyb3cpIHsKICAgICAgICAgICAgcm93LmZvckVhY2goZnVuY3Rpb24gKGNlbGwsIGNvbE51bWJlcikgewogICAgICAgICAgICAgIGlmIChjZWxsKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjayhjZWxsLCByb3dOdW1iZXIsIGNvbE51
bWJlcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImZvckVhY2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2spIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF8uZWFjaCh0aGlzLnNoZWV0cywgZnVuY3Rpb24gKHNoZWV0LCBzaGVldE5hbWUpIHsKICAgICAgICBfdGhpcy5mb3JFYWNoSW5TaGVldChzaGVldE5hbWUsIGNhbGxiYWNrKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewog
ICAga2V5OiAibWFwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2spIHsKICAgICAgdmFyIHJlc3VsdHMgPSBbXTsKICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsKSB7CiAgICAgICAgcmVzdWx0cy5wdXNoKGNhbGxiYWNrKGNlbGwpKTsKICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHRzOwogICAgfQogIH0sIHsKICAgIGtleTogImZpbmRTaGVldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFNoZWV0KGFkZHJlc3MsIGNyZWF0ZSkgewogICAgICB2YXIgbmFtZSA9IGFkZHJlc3Muc2hlZXROYW1l
OwoKICAgICAgaWYgKHRoaXMuc2hlZXRzW25hbWVdKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2hlZXRzW25hbWVdOwogICAgICB9CgogICAgICBpZiAoY3JlYXRlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2hlZXRzW25hbWVdID0gW107CiAgICAgIH0KCiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmluZFNoZWV0Um93IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kU2hlZXRSb3coc2hlZXQsIGFkZHJlc3MsIGNyZWF0ZSkgewogICAgICB2YXIgcm93ID0gYWRkcmVzcy5yb3c7CgogICAg
ICBpZiAoc2hlZXQgJiYgc2hlZXRbcm93XSkgewogICAgICAgIHJldHVybiBzaGVldFtyb3ddOwogICAgICB9CgogICAgICBpZiAoY3JlYXRlKSB7CiAgICAgICAgcmV0dXJuIHNoZWV0W3Jvd10gPSBbXTsKICAgICAgfQoKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaW5kUm93Q2VsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFJvd0NlbGwocm93LCBhZGRyZXNzLCBjcmVhdGUpIHsKICAgICAgdmFyIGNvbCA9IGFkZHJlc3MuY29sOwoKICAgICAgaWYgKHJvdyAmJiByb3dbY29sXSkg
ewogICAgICAgIHJldHVybiByb3dbY29sXTsKICAgICAgfQoKICAgICAgaWYgKGNyZWF0ZSkgewogICAgICAgIHJldHVybiByb3dbY29sXSA9IHRoaXMudGVtcGxhdGUgPyBPYmplY3QuYXNzaWduKGFkZHJlc3MsIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy50ZW1wbGF0ZSkpKSA6IGFkZHJlc3M7CiAgICAgIH0KCiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAic3BsaWNlUm93cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaWNlUm93cyhzaGVldE5hbWUsIHN0YXJ0LCBudW1EZWxl
dGUsIG51bUluc2VydCkgewogICAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0c1tzaGVldE5hbWVdOwoKICAgICAgaWYgKHNoZWV0KSB7CiAgICAgICAgdmFyIGluc2VydHMgPSBbXTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1JbnNlcnQ7IGkrKykgewogICAgICAgICAgaW5zZXJ0cy5wdXNoKFtdKTsKICAgICAgICB9CgogICAgICAgIHNoZWV0LnNwbGljZS5hcHBseShzaGVldCwgW3N0YXJ0LCBudW1EZWxldGVdLmNvbmNhdChpbnNlcnRzKSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzcGxpY2VD
b2x1bW5zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzcGxpY2VDb2x1bW5zKHNoZWV0TmFtZSwgc3RhcnQsIG51bURlbGV0ZSwgbnVtSW5zZXJ0KSB7CiAgICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXRzW3NoZWV0TmFtZV07CgogICAgICBpZiAoc2hlZXQpIHsKICAgICAgICB2YXIgaW5zZXJ0cyA9IFtdOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUluc2VydDsgaSsrKSB7CiAgICAgICAgICBpbnNlcnRzLnB1c2gobnVsbCk7CiAgICAgICAgfQoKICAgICAgICBfLmVhY2goc2hlZXQsIGZ1bmN0aW9uIChyb3cpIHsK
ICAgICAgICAgIHJvdy5zcGxpY2UuYXBwbHkocm93LCBbc3RhcnQsIG51bURlbGV0ZV0uY29uY2F0KGluc2VydHMpKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIENlbGxNYXRyaXg7Cn0oKTsKCm1vZHVsZS5leHBvcnRzID0gQ2VsbE1hdHJpeDsKCn0seyIuL2NvbC1jYWNoZSI6MTksIi4vdW5kZXItZGFzaCI6MjV9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5
V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9k
LiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXku
ZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVy
biBhcnIyOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAidW5kZWZpbmVkIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2go
X3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVu
dW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0g
cmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNj
cmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAo
a2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBhZGRyZXNzUmVnZXggPSAvXltBLVpdK1xkKyQvOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci8vIENvbHVtbiBMZXR0ZXIgdG8gTnVtYmVy
IGNvbnZlcnNpb24KCnZhciBjb2xDYWNoZSA9IHsKICBfZGljdGlvbmFyeTogWydBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onXSwKICBfbDJuRmlsbDogMCwKICBfbDJuOiB7fSwKICBfbjJsOiBbXSwKICBfbGV2ZWw6IGZ1bmN0aW9uIF9sZXZlbChuKSB7CiAgICBpZiAobiA8PSAyNikgewogICAgICByZXR1cm4gMTsKICAgIH0KCiAgICBpZiAobiA8
PSAyNiAqIDI2KSB7CiAgICAgIHJldHVybiAyOwogICAgfQoKICAgIHJldHVybiAzOwogIH0sCiAgX2ZpbGw6IGZ1bmN0aW9uIF9maWxsKGxldmVsKSB7CiAgICB2YXIgYzsKICAgIHZhciB2OwogICAgdmFyIGwxOwogICAgdmFyIGwyOwogICAgdmFyIGwzOwogICAgdmFyIG4gPSAxOwoKICAgIGlmIChsZXZlbCA+PSA0KSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignT3V0IG9mIGJvdW5kcy4gRXhjZWwgc3VwcG9ydHMgY29sdW1ucyBmcm9tIDEgdG8gMTYzODQnKTsKICAgIH0KCiAgICBpZiAodGhpcy5fbDJuRmlsbCA8IDEgJiYg
bGV2ZWwgPj0gMSkgewogICAgICB3aGlsZSAobiA8PSAyNikgewogICAgICAgIGMgPSB0aGlzLl9kaWN0aW9uYXJ5W24gLSAxXTsKICAgICAgICB0aGlzLl9uMmxbbl0gPSBjOwogICAgICAgIHRoaXMuX2wybltjXSA9IG47CiAgICAgICAgbisrOwogICAgICB9CgogICAgICB0aGlzLl9sMm5GaWxsID0gMTsKICAgIH0KCiAgICBpZiAodGhpcy5fbDJuRmlsbCA8IDIgJiYgbGV2ZWwgPj0gMikgewogICAgICBuID0gMjc7CgogICAgICB3aGlsZSAobiA8PSAyNiArIDI2ICogMjYpIHsKICAgICAgICB2ID0gbiAtICgyNiArIDEpOwog
ICAgICAgIGwxID0gdiAlIDI2OwogICAgICAgIGwyID0gTWF0aC5mbG9vcih2IC8gMjYpOwogICAgICAgIGMgPSB0aGlzLl9kaWN0aW9uYXJ5W2wyXSArIHRoaXMuX2RpY3Rpb25hcnlbbDFdOwogICAgICAgIHRoaXMuX24ybFtuXSA9IGM7CiAgICAgICAgdGhpcy5fbDJuW2NdID0gbjsKICAgICAgICBuKys7CiAgICAgIH0KCiAgICAgIHRoaXMuX2wybkZpbGwgPSAyOwogICAgfQoKICAgIGlmICh0aGlzLl9sMm5GaWxsIDwgMyAmJiBsZXZlbCA+PSAzKSB7CiAgICAgIG4gPSAyNiArIDI2ICogMjYgKyAxOwoKICAgICAgd2hpbGUg
KG4gPD0gMTYzODQpIHsKICAgICAgICB2ID0gbiAtICgyNiAqIDI2ICsgMjYgKyAxKTsKICAgICAgICBsMSA9IHYgJSAyNjsKICAgICAgICBsMiA9IE1hdGguZmxvb3IodiAvIDI2KSAlIDI2OwogICAgICAgIGwzID0gTWF0aC5mbG9vcih2IC8gKDI2ICogMjYpKTsKICAgICAgICBjID0gdGhpcy5fZGljdGlvbmFyeVtsM10gKyB0aGlzLl9kaWN0aW9uYXJ5W2wyXSArIHRoaXMuX2RpY3Rpb25hcnlbbDFdOwogICAgICAgIHRoaXMuX24ybFtuXSA9IGM7CiAgICAgICAgdGhpcy5fbDJuW2NdID0gbjsKICAgICAgICBuKys7CiAgICAg
IH0KCiAgICAgIHRoaXMuX2wybkZpbGwgPSAzOwogICAgfQogIH0sCiAgbDJuOiBmdW5jdGlvbiBsMm4obCkgewogICAgaWYgKCF0aGlzLl9sMm5bbF0pIHsKICAgICAgdGhpcy5fZmlsbChsLmxlbmd0aCk7CiAgICB9CgogICAgaWYgKCF0aGlzLl9sMm5bbF0pIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJPdXQgb2YgYm91bmRzLiBJbnZhbGlkIGNvbHVtbiBsZXR0ZXI6ICIuY29uY2F0KGwpKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5fbDJuW2xdOwogIH0sCiAgbjJsOiBmdW5jdGlvbiBuMmwobikgewogICAgaWYgKG4gPCAx
IHx8IG4gPiAxNjM4NCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIiIuY29uY2F0KG4sICIgaXMgb3V0IG9mIGJvdW5kcy4gRXhjZWwgc3VwcG9ydHMgY29sdW1ucyBmcm9tIDEgdG8gMTYzODQiKSk7CiAgICB9CgogICAgaWYgKCF0aGlzLl9uMmxbbl0pIHsKICAgICAgdGhpcy5fZmlsbCh0aGlzLl9sZXZlbChuKSk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX24ybFtuXTsKICB9LAogIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAv
LyBBZGRyZXNzIHByb2Nlc3NpbmcKICBfaGFzaDoge30sCiAgLy8gY2hlY2sgaWYgdmFsdWUgbG9va3MgbGlrZSBhbiBhZGRyZXNzCiAgdmFsaWRhdGVBZGRyZXNzOiBmdW5jdGlvbiB2YWxpZGF0ZUFkZHJlc3ModmFsdWUpIHsKICAgIGlmICghYWRkcmVzc1JlZ2V4LnRlc3QodmFsdWUpKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiSW52YWxpZCBBZGRyZXNzOiAiLmNvbmNhdCh2YWx1ZSkpOwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0sCiAgLy8gY29udmVydCBhZGRyZXNzIHN0cmluZyBpbnRvIHN0cnVjdHVyZQogIGRl
Y29kZUFkZHJlc3M6IGZ1bmN0aW9uIGRlY29kZUFkZHJlc3ModmFsdWUpIHsKICAgIHZhciBhZGRyID0gdmFsdWUubGVuZ3RoIDwgNSAmJiB0aGlzLl9oYXNoW3ZhbHVlXTsKCiAgICBpZiAoYWRkcikgewogICAgICByZXR1cm4gYWRkcjsKICAgIH0KCiAgICB2YXIgaGFzQ29sID0gZmFsc2U7CiAgICB2YXIgY29sID0gJyc7CiAgICB2YXIgY29sTnVtYmVyID0gMDsKICAgIHZhciBoYXNSb3cgPSBmYWxzZTsKICAgIHZhciByb3cgPSAnJzsKICAgIHZhciByb3dOdW1iZXIgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwLCBjaGFyOyBp
IDwgdmFsdWUubGVuZ3RoOyBpKyspIHsKICAgICAgY2hhciA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7IC8vIGNvbCBzaG91bGQgYmVmb3JlIHJvdwoKICAgICAgaWYgKCFoYXNSb3cgJiYgY2hhciA+PSA2NSAmJiBjaGFyIDw9IDkwKSB7CiAgICAgICAgLy8gNjUgPSAnQScuY2hhckNvZGVBdCgwKQogICAgICAgIC8vIDkwID0gJ1onLmNoYXJDb2RlQXQoMCkKICAgICAgICBoYXNDb2wgPSB0cnVlOwogICAgICAgIGNvbCArPSB2YWx1ZVtpXTsgLy8gY29sTnVtYmVyIHN0YXJ0cyBmcm9tIDEKCiAgICAgICAgY29sTnVtYmVyID0gY29s
TnVtYmVyICogMjYgKyBjaGFyIC0gNjQ7CiAgICAgIH0gZWxzZSBpZiAoY2hhciA+PSA0OCAmJiBjaGFyIDw9IDU3KSB7CiAgICAgICAgLy8gNDggPSAnMCcuY2hhckNvZGVBdCgwKQogICAgICAgIC8vIDU3ID0gJzknLmNoYXJDb2RlQXQoMCkKICAgICAgICBoYXNSb3cgPSB0cnVlOwogICAgICAgIHJvdyArPSB2YWx1ZVtpXTsgLy8gcm93TnVtYmVyIHN0YXJ0cyBmcm9tIDAKCiAgICAgICAgcm93TnVtYmVyID0gcm93TnVtYmVyICogMTAgKyBjaGFyIC0gNDg7CiAgICAgIH0gZWxzZSBpZiAoaGFzUm93ICYmIGhhc0NvbCAmJiBj
aGFyICE9PSAzNikgewogICAgICAgIC8vIDM2ID0gJyQnLmNoYXJDb2RlQXQoMCkKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIGlmICghaGFzQ29sKSB7CiAgICAgIGNvbE51bWJlciA9IHVuZGVmaW5lZDsKICAgIH0gZWxzZSBpZiAoY29sTnVtYmVyID4gMTYzODQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJPdXQgb2YgYm91bmRzLiBJbnZhbGlkIGNvbHVtbiBsZXR0ZXI6ICIuY29uY2F0KGNvbCkpOwogICAgfQoKICAgIGlmICghaGFzUm93KSB7CiAgICAgIHJvd051bWJlciA9IHVuZGVmaW5lZDsKICAgIH0g
Ly8gaW4gY2FzZSAkcm93JGNvbAoKCiAgICB2YWx1ZSA9IGNvbCArIHJvdzsKICAgIHZhciBhZGRyZXNzID0gewogICAgICBhZGRyZXNzOiB2YWx1ZSwKICAgICAgY29sOiBjb2xOdW1iZXIsCiAgICAgIHJvdzogcm93TnVtYmVyLAogICAgICAkY29sJHJvdzogIiQiLmNvbmNhdChjb2wsICIkIikuY29uY2F0KHJvdykKICAgIH07IC8vIG1lbSBmaXggLSBjYWNoZSBvbmx5IHRoZSB0bCAxMDB4MTAwIHNxdWFyZQoKICAgIGlmIChjb2xOdW1iZXIgPD0gMTAwICYmIHJvd051bWJlciA8PSAxMDApIHsKICAgICAgdGhpcy5faGFzaFt2
YWx1ZV0gPSBhZGRyZXNzOwogICAgICB0aGlzLl9oYXNoW2FkZHJlc3MuJGNvbCRyb3ddID0gYWRkcmVzczsKICAgIH0KCiAgICByZXR1cm4gYWRkcmVzczsKICB9LAogIC8vIGNvbnZlcnQgcixjIGludG8gc3RydWN0dXJlIChpZiBvbmx5IDEgYXJnLCBhc3N1bWUgciBpcyBhZGRyZXNzIHN0cmluZykKICBnZXRBZGRyZXNzOiBmdW5jdGlvbiBnZXRBZGRyZXNzKHIsIGMpIHsKICAgIGlmIChjKSB7CiAgICAgIHZhciBhZGRyZXNzID0gdGhpcy5uMmwoYykgKyByOwogICAgICByZXR1cm4gdGhpcy5kZWNvZGVBZGRyZXNzKGFkZHJl
c3MpOwogICAgfQoKICAgIHJldHVybiB0aGlzLmRlY29kZUFkZHJlc3Mocik7CiAgfSwKICAvLyBjb252ZXJ0IFthZGRyZXNzXSwgW3RsOmJyXSBpbnRvIGFkZHJlc3Mgc3RydWN0dXJlcwogIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlKHZhbHVlKSB7CiAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCgnOicpOwoKICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDIpIHsKICAgICAgdmFyIHRsID0gdGhpcy5kZWNvZGVBZGRyZXNzKHBhcnRzWzBdKTsKICAgICAgdmFyIGJyID0gdGhpcy5kZWNvZGVBZGRyZXNzKHBhcnRzWzFdKTsKICAg
ICAgdmFyIHJlc3VsdCA9IHsKICAgICAgICB0b3A6IE1hdGgubWluKHRsLnJvdywgYnIucm93KSwKICAgICAgICBsZWZ0OiBNYXRoLm1pbih0bC5jb2wsIGJyLmNvbCksCiAgICAgICAgYm90dG9tOiBNYXRoLm1heCh0bC5yb3csIGJyLnJvdyksCiAgICAgICAgcmlnaHQ6IE1hdGgubWF4KHRsLmNvbCwgYnIuY29sKQogICAgICB9OyAvLyByZWNvbnN0cnVjdCB0bCwgYnIgYW5kIGRpbWVuc2lvbnMKCiAgICAgIHJlc3VsdC50bCA9IHRoaXMubjJsKHJlc3VsdC5sZWZ0KSArIHJlc3VsdC50b3A7CiAgICAgIHJlc3VsdC5iciA9IHRo
aXMubjJsKHJlc3VsdC5yaWdodCkgKyByZXN1bHQuYm90dG9tOwogICAgICByZXN1bHQuZGltZW5zaW9ucyA9ICIiLmNvbmNhdChyZXN1bHQudGwsICI6IikuY29uY2F0KHJlc3VsdC5icik7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuZGVjb2RlQWRkcmVzcyh2YWx1ZSk7CiAgfSwKICAvLyBjb252ZXJ0IFtzaGVldE5hbWUhXVskXWNvbFskXXJvd1tbJF1jb2xbJF1yb3ddIGludG8gYWRkcmVzcyBvciByYW5nZSBzdHJ1Y3R1cmVzCiAgZGVjb2RlRXg6IGZ1bmN0aW9uIGRlY29kZUV4KHZhbHVl
KSB7CiAgICB2YXIgZ3JvdXBzID0gdmFsdWUubWF0Y2goLyg/Oig/Oig/OicoKD86W14nXXwnJykqKScpfChbXideICFdKikpISk/KC4qKS8pOwogICAgdmFyIHNoZWV0TmFtZSA9IGdyb3Vwc1sxXSB8fCBncm91cHNbMl07IC8vIFFvdXRlZCBhbmQgdW5xb3V0ZWQgZ3JvdXBzCgogICAgdmFyIHJlZmVyZW5jZSA9IGdyb3Vwc1szXTsgLy8gUmVtYWluaW5nIGFkZHJlc3MKCiAgICB2YXIgcGFydHMgPSByZWZlcmVuY2Uuc3BsaXQoJzonKTsKCiAgICBpZiAocGFydHMubGVuZ3RoID4gMSkgewogICAgICB2YXIgdGwgPSB0aGlzLmRl
Y29kZUFkZHJlc3MocGFydHNbMF0pOwogICAgICB2YXIgYnIgPSB0aGlzLmRlY29kZUFkZHJlc3MocGFydHNbMV0pOwogICAgICB2YXIgdG9wID0gTWF0aC5taW4odGwucm93LCBici5yb3cpOwogICAgICB2YXIgbGVmdCA9IE1hdGgubWluKHRsLmNvbCwgYnIuY29sKTsKICAgICAgdmFyIGJvdHRvbSA9IE1hdGgubWF4KHRsLnJvdywgYnIucm93KTsKICAgICAgdmFyIHJpZ2h0ID0gTWF0aC5tYXgodGwuY29sLCBici5jb2wpOwogICAgICB0bCA9IHRoaXMubjJsKGxlZnQpICsgdG9wOwogICAgICBiciA9IHRoaXMubjJsKHJpZ2h0
KSArIGJvdHRvbTsKICAgICAgcmV0dXJuIHsKICAgICAgICB0b3A6IHRvcCwKICAgICAgICBsZWZ0OiBsZWZ0LAogICAgICAgIGJvdHRvbTogYm90dG9tLAogICAgICAgIHJpZ2h0OiByaWdodCwKICAgICAgICBzaGVldE5hbWU6IHNoZWV0TmFtZSwKICAgICAgICB0bDogewogICAgICAgICAgYWRkcmVzczogdGwsCiAgICAgICAgICBjb2w6IGxlZnQsCiAgICAgICAgICByb3c6IHRvcCwKICAgICAgICAgICRjb2wkcm93OiAiJCIuY29uY2F0KHRoaXMubjJsKGxlZnQpLCAiJCIpLmNvbmNhdCh0b3ApLAogICAgICAgICAgc2hlZXRO
YW1lOiBzaGVldE5hbWUKICAgICAgICB9LAogICAgICAgIGJyOiB7CiAgICAgICAgICBhZGRyZXNzOiBiciwKICAgICAgICAgIGNvbDogcmlnaHQsCiAgICAgICAgICByb3c6IGJvdHRvbSwKICAgICAgICAgICRjb2wkcm93OiAiJCIuY29uY2F0KHRoaXMubjJsKHJpZ2h0KSwgIiQiKS5jb25jYXQoYm90dG9tKSwKICAgICAgICAgIHNoZWV0TmFtZTogc2hlZXROYW1lCiAgICAgICAgfSwKICAgICAgICBkaW1lbnNpb25zOiAiIi5jb25jYXQodGwsICI6IikuY29uY2F0KGJyKQogICAgICB9OwogICAgfQoKICAgIGlmIChyZWZlcmVu
Y2Uuc3RhcnRzV2l0aCgnIycpKSB7CiAgICAgIHJldHVybiBzaGVldE5hbWUgPyB7CiAgICAgICAgc2hlZXROYW1lOiBzaGVldE5hbWUsCiAgICAgICAgZXJyb3I6IHJlZmVyZW5jZQogICAgICB9IDogewogICAgICAgIGVycm9yOiByZWZlcmVuY2UKICAgICAgfTsKICAgIH0KCiAgICB2YXIgYWRkcmVzcyA9IHRoaXMuZGVjb2RlQWRkcmVzcyhyZWZlcmVuY2UpOwogICAgcmV0dXJuIHNoZWV0TmFtZSA/IF9vYmplY3RTcHJlYWQoewogICAgICBzaGVldE5hbWU6IHNoZWV0TmFtZQogICAgfSwgYWRkcmVzcykgOiBhZGRyZXNzOwog
IH0sCiAgLy8gY29udmVydCByb3csY29sIGludG8gYWRkcmVzcyBzdHJpbmcKICBlbmNvZGVBZGRyZXNzOiBmdW5jdGlvbiBlbmNvZGVBZGRyZXNzKHJvdywgY29sKSB7CiAgICByZXR1cm4gY29sQ2FjaGUubjJsKGNvbCkgKyByb3c7CiAgfSwKICAvLyBjb252ZXJ0IHJvdyxjb2wgaW50byBzdHJpbmcgYWRkcmVzcyBvciB0LGwsYixyIGludG8gcmFuZ2UKICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZSgpIHsKICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICBjYXNlIDI6CiAgICAgICAgcmV0dXJuIGNvbENhY2hl
LmVuY29kZUFkZHJlc3MoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pOwoKICAgICAgY2FzZSA0OgogICAgICAgIHJldHVybiAiIi5jb25jYXQoY29sQ2FjaGUuZW5jb2RlQWRkcmVzcyhhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSksICI6IikuY29uY2F0KGNvbENhY2hlLmVuY29kZUFkZHJlc3MoYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pKTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBlbmNvZGUgd2l0aCAyIG9yIDQgYXJndW1lbnRzJyk7CiAgICB9CiAgfSwKICAvLyBy
ZXR1cm4gdHJ1ZSBpZiBhZGRyZXNzIGlzIGNvbnRhaW5lZCB3aXRoaW4gcmFuZ2UKICBpblJhbmdlOiBmdW5jdGlvbiBpblJhbmdlKHJhbmdlLCBhZGRyZXNzKSB7CiAgICB2YXIgX3JhbmdlID0gX3NsaWNlZFRvQXJyYXkocmFuZ2UsIDUpLAogICAgICAgIGxlZnQgPSBfcmFuZ2VbMF0sCiAgICAgICAgdG9wID0gX3JhbmdlWzFdLAogICAgICAgIHJpZ2h0ID0gX3JhbmdlWzNdLAogICAgICAgIGJvdHRvbSA9IF9yYW5nZVs0XTsKCiAgICB2YXIgX2FkZHJlc3MgPSBfc2xpY2VkVG9BcnJheShhZGRyZXNzLCAyKSwKICAgICAgICBj
b2wgPSBfYWRkcmVzc1swXSwKICAgICAgICByb3cgPSBfYWRkcmVzc1sxXTsKCiAgICByZXR1cm4gY29sID49IGxlZnQgJiYgY29sIDw9IHJpZ2h0ICYmIHJvdyA+PSB0b3AgJiYgcm93IDw9IGJvdHRvbTsKICB9Cn07Cm1vZHVsZS5leHBvcnRzID0gY29sQ2FjaGU7Cgp9LHt9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoQnVmZmVyKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOwoKdmFyIEVuY3J5cHRvciA9IHsKICAvKioNCiAgICogQ2FsY3Vs
YXRlIGEgaGFzaCBvZiB0aGUgY29uY2F0ZW5hdGVkIGJ1ZmZlcnMgd2l0aCB0aGUgZ2l2ZW4gYWxnb3JpdGhtLg0KICAgKiBAcGFyYW0ge3N0cmluZ30gYWxnb3JpdGhtIC0gVGhlIGhhc2ggYWxnb3JpdGhtLg0KICAgKiBAcmV0dXJucyB7QnVmZmVyfSBUaGUgaGFzaA0KICAgKi8KICBoYXNoOiBmdW5jdGlvbiBoYXNoKGFsZ29yaXRobSkgewogICAgdmFyIGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChhbGdvcml0aG0pOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBidWZmZXJzID0gbmV3IEFycmF5KF9s
ZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYnVmZmVyc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgaGFzaC51cGRhdGUoQnVmZmVyLmNvbmNhdChidWZmZXJzKSk7CiAgICByZXR1cm4gaGFzaC5kaWdlc3QoKTsKICB9LAoKICAvKioNCiAgICogQ29udmVydCBhIHBhc3N3b3JkIGludG8gYW4gZW5jcnlwdGlvbiBrZXkNCiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIC0gVGhlIHBhc3N3b3JkDQogICAqIEBwYXJhbSB7c3RyaW5n
fSBoYXNoQWxnb3JpdGhtIC0gVGhlIGhhc2ggYWxnb3JpdG0NCiAgICogQHBhcmFtIHtzdHJpbmd9IHNhbHRWYWx1ZSAtIFRoZSBzYWx0IHZhbHVlDQogICAqIEBwYXJhbSB7bnVtYmVyfSBzcGluQ291bnQgLSBUaGUgc3BpbiBjb3VudA0KICAgKiBAcGFyYW0ge251bWJlcn0ga2V5Qml0cyAtIFRoZSBsZW5ndGggb2YgdGhlIGtleSBpbiBiaXRzDQogICAqIEBwYXJhbSB7QnVmZmVyfSBibG9ja0tleSAtIFRoZSBibG9jayBrZXkNCiAgICogQHJldHVybnMge0J1ZmZlcn0gVGhlIGVuY3J5cHRpb24ga2V5DQogICAqLwogIGNvbnZl
cnRQYXNzd29yZFRvSGFzaDogZnVuY3Rpb24gY29udmVydFBhc3N3b3JkVG9IYXNoKHBhc3N3b3JkLCBoYXNoQWxnb3JpdGhtLCBzYWx0VmFsdWUsIHNwaW5Db3VudCkgewogICAgaGFzaEFsZ29yaXRobSA9IGhhc2hBbGdvcml0aG0udG9Mb3dlckNhc2UoKTsKICAgIHZhciBoYXNoZXMgPSBjcnlwdG8uZ2V0SGFzaGVzKCk7CgogICAgaWYgKGhhc2hlcy5pbmRleE9mKGhhc2hBbGdvcml0aG0pIDwgMCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIkhhc2ggYWxnb3JpdGhtICciLmNvbmNhdChoYXNoQWxnb3JpdGhtLCAiJyBub3Qg
c3VwcG9ydGVkISIpKTsKICAgIH0gLy8gUGFzc3dvcmQgbXVzdCBiZSBpbiB1bmljb2RlIGJ1ZmZlcgoKCiAgICB2YXIgcGFzc3dvcmRCdWZmZXIgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgJ3V0ZjE2bGUnKTsgLy8gR2VuZXJhdGUgdGhlIGluaXRpYWwgaGFzaAoKICAgIHZhciBrZXkgPSB0aGlzLmhhc2goaGFzaEFsZ29yaXRobSwgQnVmZmVyLmZyb20oc2FsdFZhbHVlLCAnYmFzZTY0JyksIHBhc3N3b3JkQnVmZmVyKTsgLy8gTm93IHJlZ2VuZXJhdGUgdW50aWwgc3BpbiBjb3VudAoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwg
c3BpbkNvdW50OyBpKyspIHsKICAgICAgdmFyIGl0ZXJhdG9yID0gQnVmZmVyLmFsbG9jKDQpOyAvLyB0aGlzIGlzIHRoZSAnc3BlY2lhbCcgZWxlbWVudCBvZiBFeGNlbCBwYXNzd29yZCBoYXNoaW5nCiAgICAgIC8vIHRoYXQgc3RvcHMgdXMgZnJvbSB1c2luZyBjcnlwdG8ucGJrZGYyKCkKCiAgICAgIGl0ZXJhdG9yLndyaXRlVUludDMyTEUoaSwgMCk7CiAgICAgIGtleSA9IHRoaXMuaGFzaChoYXNoQWxnb3JpdGhtLCBrZXksIGl0ZXJhdG9yKTsKICAgIH0KCiAgICByZXR1cm4ga2V5LnRvU3RyaW5nKCdiYXNlNjQnKTsKICB9
LAoKICAvKioNCiAgICogR2VuZXJhdGVzIGNyeXB0b2dyYXBoaWNhbGx5IHN0cm9uZyBwc2V1ZG8tcmFuZG9tIGRhdGEuDQogICAqIEBwYXJhbSBzaXplIFRoZSBzaXplIGFyZ3VtZW50IGlzIGEgbnVtYmVyIGluZGljYXRpbmcgdGhlIG51bWJlciBvZiBieXRlcyB0byBnZW5lcmF0ZS4NCiAgICovCiAgcmFuZG9tQnl0ZXM6IGZ1bmN0aW9uIHJhbmRvbUJ5dGVzKHNpemUpIHsKICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoc2l6ZSk7CiAgfQp9Owptb2R1bGUuZXhwb3J0cyA9IEVuY3J5cHRvcjsKCn0pLmNhbGwodGhpcyxy
ZXF1aXJlKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiYnVmZmVyIjoyMTYsImNyeXB0byI6MjI2fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfYXdhaXRBc3luY0dlbmVyYXRvcih2YWx1ZSkgeyByZXR1cm4gbmV3IF9Bd2FpdFZhbHVlKHZhbHVlKTsgfQoKZnVuY3Rpb24gX3dyYXBBc3luY0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IF9Bc3luY0dlbmVyYXRvcihmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsgfTsgfQoK
ZnVuY3Rpb24gX0FzeW5jR2VuZXJhdG9yKGdlbikgeyB2YXIgZnJvbnQsIGJhY2s7IGZ1bmN0aW9uIHNlbmQoa2V5LCBhcmcpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIHJlcXVlc3QgPSB7IGtleToga2V5LCBhcmc6IGFyZywgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QsIG5leHQ6IG51bGwgfTsgaWYgKGJhY2spIHsgYmFjayA9IGJhY2submV4dCA9IHJlcXVlc3Q7IH0gZWxzZSB7IGZyb250ID0gYmFjayA9IHJlcXVlc3Q7IHJlc3VtZShrZXksIGFyZyk7IH0g
fSk7IH0gZnVuY3Rpb24gcmVzdW1lKGtleSwgYXJnKSB7IHRyeSB7IHZhciByZXN1bHQgPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7IHZhciB3cmFwcGVkQXdhaXQgPSB2YWx1ZSBpbnN0YW5jZW9mIF9Bd2FpdFZhbHVlOyBQcm9taXNlLnJlc29sdmUod3JhcHBlZEF3YWl0ID8gdmFsdWUud3JhcHBlZCA6IHZhbHVlKS50aGVuKGZ1bmN0aW9uIChhcmcpIHsgaWYgKHdyYXBwZWRBd2FpdCkgeyByZXN1bWUoa2V5ID09PSAicmV0dXJuIiA/ICJyZXR1cm4iIDogIm5leHQiLCBhcmcpOyByZXR1cm47IH0g
c2V0dGxlKHJlc3VsdC5kb25lID8gInJldHVybiIgOiAibm9ybWFsIiwgYXJnKTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXN1bWUoInRocm93IiwgZXJyKTsgfSk7IH0gY2F0Y2ggKGVycikgeyBzZXR0bGUoInRocm93IiwgZXJyKTsgfSB9IGZ1bmN0aW9uIHNldHRsZSh0eXBlLCB2YWx1ZSkgeyBzd2l0Y2ggKHR5cGUpIHsgY2FzZSAicmV0dXJuIjogZnJvbnQucmVzb2x2ZSh7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9KTsgYnJlYWs7IGNhc2UgInRocm93IjogZnJvbnQucmVqZWN0KHZhbHVlKTsgYnJlYWs7IGRlZmF1bHQ6
IGZyb250LnJlc29sdmUoeyB2YWx1ZTogdmFsdWUsIGRvbmU6IGZhbHNlIH0pOyBicmVhazsgfSBmcm9udCA9IGZyb250Lm5leHQ7IGlmIChmcm9udCkgeyByZXN1bWUoZnJvbnQua2V5LCBmcm9udC5hcmcpOyB9IGVsc2UgeyBiYWNrID0gbnVsbDsgfSB9IHRoaXMuX2ludm9rZSA9IHNlbmQ7IGlmICh0eXBlb2YgZ2VuLnJldHVybiAhPT0gImZ1bmN0aW9uIikgeyB0aGlzLnJldHVybiA9IHVuZGVmaW5lZDsgfSB9CgppZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvcikgeyBfQXN5
bmNHZW5lcmF0b3IucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07IH0KCl9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIHRoaXMuX2ludm9rZSgibmV4dCIsIGFyZyk7IH07CgpfQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gdGhpcy5faW52b2tlKCJ0aHJvdyIsIGFyZyk7IH07CgpfQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnJldHVybiA9IGZ1bmN0aW9u
IChhcmcpIHsgcmV0dXJuIHRoaXMuX2ludm9rZSgicmV0dXJuIiwgYXJnKTsgfTsKCmZ1bmN0aW9uIF9Bd2FpdFZhbHVlKHZhbHVlKSB7IHRoaXMud3JhcHBlZCA9IHZhbHVlOyB9CgpmdW5jdGlvbiBfYXN5bmNJdGVyYXRvcihpdGVyYWJsZSkgeyB2YXIgbWV0aG9kOyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIpIHsgaWYgKFN5bWJvbC5hc3luY0l0ZXJhdG9yKSB7IG1ldGhvZCA9IGl0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTsgaWYgKG1ldGhvZCAhPSBudWxsKSByZXR1cm4gbWV0aG9kLmNhbGwoaXRl
cmFibGUpOyB9IGlmIChTeW1ib2wuaXRlcmF0b3IpIHsgbWV0aG9kID0gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXTsgaWYgKG1ldGhvZCAhPSBudWxsKSByZXR1cm4gbWV0aG9kLmNhbGwoaXRlcmFibGUpOyB9IH0gdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0IGlzIG5vdCBhc3luYyBpdGVyYWJsZSIpOyB9Cgp2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdzYXhlcycpLAogICAgU2F4ZXNQYXJzZXIgPSBfcmVxdWlyZS5TYXhlc1BhcnNlcjsKCnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKSwKICAg
IFBhc3NUaHJvdWdoID0gX3JlcXVpcmUyLlBhc3NUaHJvdWdoOwoKdmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJy4vYnJvd3Nlci1idWZmZXItZGVjb2RlJyksCiAgICBidWZmZXJUb1N0cmluZyA9IF9yZXF1aXJlMy5idWZmZXJUb1N0cmluZzsKCm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF93cmFwQXN5bmNHZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGl0ZXJhYmxlKSB7CiAgICB2YXIgc2F4ZXNQYXJz
ZXIsIGVycm9yLCBldmVudHMsIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24sIF9kaWRJdGVyYXRvckVycm9yLCBfaXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yLCBfc3RlcCwgX3ZhbHVlLCBjaHVuazsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIC8vIFRPRE86IFJlbW92ZSBvbmNlIG5v
ZGUgdjggaXMgZGVwcmVjYXRlZAogICAgICAgICAgICAvLyBEZXRlY3QgYW5kIHVwZ3JhZGUgb2xkIHN0cmVhbXMKICAgICAgICAgICAgaWYgKGl0ZXJhYmxlLnBpcGUgJiYgIWl0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSkgewogICAgICAgICAgICAgIGl0ZXJhYmxlID0gaXRlcmFibGUucGlwZShuZXcgUGFzc1Rocm91Z2goKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNheGVzUGFyc2VyID0gbmV3IFNheGVzUGFyc2VyKCk7CiAgICAgICAgICAgIHNheGVzUGFyc2VyLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChl
cnIpIHsKICAgICAgICAgICAgICBlcnJvciA9IGVycjsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGV2ZW50cyA9IFtdOwogICAgICAgICAgICBzYXhlc1BhcnNlci5vbignb3BlbnRhZycsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiBldmVudHMucHVzaCh7CiAgICAgICAgICAgICAgICBldmVudFR5cGU6ICdvcGVudGFnJywKICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc2F4ZXNQYXJzZXIub24oJ3RleHQn
LCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICByZXR1cm4gZXZlbnRzLnB1c2goewogICAgICAgICAgICAgICAgZXZlbnRUeXBlOiAndGV4dCcsCiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHNheGVzUGFyc2VyLm9uKCdjbG9zZXRhZycsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiBldmVudHMucHVzaCh7CiAgICAgICAgICAgICAgICBldmVudFR5cGU6ICdjbG9zZXRhZycsCiAgICAgICAgICAgICAg
ICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlOwogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gOTsKICAgICAgICAgICAgX2l0ZXJhdG9yID0gX2FzeW5jSXRlcmF0b3IoaXRlcmFibGUpOwoKICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMzsKICAgICAgICAgICAgcmV0dXJuIF9hd2FpdEFzeW5jR2Vu
ZXJhdG9yKF9pdGVyYXRvci5uZXh0KCkpOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIF9zdGVwID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IF9zdGVwLmRvbmU7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgcmV0dXJuIF9hd2FpdEFzeW5jR2VuZXJhdG9yKF9zdGVwLnZhbHVlKTsKCiAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICBfdmFsdWUgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgaWYgKF9pdGVyYXRv
ck5vcm1hbENvbXBsZXRpb24pIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNodW5rID0gX3ZhbHVlOwogICAgICAgICAgICBzYXhlc1BhcnNlci53cml0ZShidWZmZXJUb1N0cmluZyhjaHVuaykpOyAvLyBzYXhlc1BhcnNlci53cml0ZSBhbmQgc2F4ZXNQYXJzZXIub24oKSBhcmUgc3luY2hyb25vdXMsCiAgICAgICAgICAgIC8vIHNvIHdlIGNhbiBvbmx5IHJlYWNoIHRoZSBiZWxvdyBsaW5lIG9uY2UgYWxsIGV2ZW50cyBo
YXZlIGJlZW4gZW1pdHRlZAoKICAgICAgICAgICAgaWYgKCFlcnJvcikgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMzsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhyb3cgZXJyb3I7CgogICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI1OwogICAgICAgICAgICByZXR1cm4gZXZlbnRzOwoKICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgIGV2ZW50cyA9IFtdOwoKICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgIF9pdGVy
YXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDMxOwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDkpOwogICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7CiAgICAgICAgICAg
IF9pdGVyYXRvckVycm9yID0gX2NvbnRleHQudDA7CgogICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDM1OwogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzY7CgogICAgICAgICAgICBpZiAoISghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQwOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDA7CiAgICAg
ICAgICAgIHJldHVybiBfYXdhaXRBc3luY0dlbmVyYXRvcihfaXRlcmF0b3IucmV0dXJuKCkpOwoKICAgICAgICAgIGNhc2UgNDA6CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0MDsKCiAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOwoKICAgICAgICAgIGNhc2UgNDM6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5m
aW5pc2goNDApOwoKICAgICAgICAgIGNhc2UgNDQ6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMzUpOwoKICAgICAgICAgIGNhc2UgNDU6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSwgbnVsbCwgW1s5LCAzMSwgMzUsIDQ1XSwgWzM2LCwgNDAsIDQ0XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9
Owp9KCk7Cgp9LHsiLi9icm93c2VyLWJ1ZmZlci1kZWNvZGUiOjE2LCJyZWFkYWJsZS1zdHJlYW0iOjM4Miwic2F4ZXMiOjM4Nn1dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi9jb2wtY2FjaGUnKTsgLy8gY29uc3QgY2VsbFJlZlJlZ2V4ID0gLygoW2Etel9cLTAtOV0qKSEpP1skXT8oW2Etel0rKVskXT8oWzEtOV1bMC05XSopL2k7CgoKdmFyIHJlcGxhY2VtZW50Q2FuZGlkYXRlUnggPSAvKChbYS16X1wtMC05XSopISk/KFthLXow
LTlfJF17Mix9KShbKF0pPy9naTsKdmFyIENScnggPSAvXihbJF0pPyhbYS16XSspKFskXSk/KFsxLTldWzAtOV0qKSQvaTsKCmZ1bmN0aW9uIHNsaWRlRm9ybXVsYShmb3JtdWxhLCBmcm9tQ2VsbCwgdG9DZWxsKSB7CiAgdmFyIG9mZnNldCA9IGNvbENhY2hlLmRlY29kZShmcm9tQ2VsbCk7CiAgdmFyIHRvID0gY29sQ2FjaGUuZGVjb2RlKHRvQ2VsbCk7CiAgcmV0dXJuIGZvcm11bGEucmVwbGFjZShyZXBsYWNlbWVudENhbmRpZGF0ZVJ4LCBmdW5jdGlvbiAocmVmTWF0Y2gsIHNoZWV0LCBzaGVldE1heWJlLCBhZGRyUGFydCwg
dHJhaWxpbmdQYXJlbikgewogICAgaWYgKHRyYWlsaW5nUGFyZW4pIHsKICAgICAgcmV0dXJuIHJlZk1hdGNoOwogICAgfQoKICAgIHZhciBtYXRjaCA9IENScnguZXhlYyhhZGRyUGFydCk7CgogICAgaWYgKG1hdGNoKSB7CiAgICAgIHZhciBjb2xEb2xsYXIgPSBtYXRjaFsxXTsKICAgICAgdmFyIGNvbFN0ciA9IG1hdGNoWzJdLnRvVXBwZXJDYXNlKCk7CiAgICAgIHZhciByb3dEb2xsYXIgPSBtYXRjaFszXTsKICAgICAgdmFyIHJvd1N0ciA9IG1hdGNoWzRdOwoKICAgICAgaWYgKGNvbFN0ci5sZW5ndGggPiAzIHx8IGNvbFN0
ci5sZW5ndGggPT09IDMgJiYgY29sU3RyID4gJ1hGRCcpIHsKICAgICAgICAvLyA+IFhGRCBpcyB0aGUgaGlnaGVzdCBjb2wgbnVtYmVyIGluIGV4Y2VsIDIwMDcgYW5kIGJleW9uZCwgc28gdGhpcyBpcyBhIG5hbWVkIHJhbmdlCiAgICAgICAgcmV0dXJuIHJlZk1hdGNoOwogICAgICB9CgogICAgICB2YXIgY29sID0gY29sQ2FjaGUubDJuKGNvbFN0cik7CiAgICAgIHZhciByb3cgPSBwYXJzZUludChyb3dTdHIsIDEwKTsKCiAgICAgIGlmICghY29sRG9sbGFyKSB7CiAgICAgICAgY29sICs9IHRvLmNvbCAtIG9mZnNldC5jb2w7
CiAgICAgIH0KCiAgICAgIGlmICghcm93RG9sbGFyKSB7CiAgICAgICAgcm93ICs9IHRvLnJvdyAtIG9mZnNldC5yb3c7CiAgICAgIH0KCiAgICAgIHZhciByZXMgPSAoc2hlZXQgfHwgJycpICsgKGNvbERvbGxhciB8fCAnJykgKyBjb2xDYWNoZS5uMmwoY29sKSArIChyb3dEb2xsYXIgfHwgJycpICsgcm93OwogICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIHJldHVybiByZWZNYXRjaDsKICB9KTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgc2xpZGVGb3JtdWxhOiBzbGlkZUZvcm11bGEKfTsKCn0seyIuL2NvbC1jYWNoZSI6
MTl9XSwyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2VzcyxCdWZmZXIpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxz
ZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93
LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9Cgpm
dW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwg
ZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovCnZhciBTdHJlYW0gPSByZXF1aXJlKCdy
ZWFkYWJsZS1zdHJlYW0nKTsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTsKCnZhciBTdHJpbmdCdWYgPSByZXF1aXJlKCcuL3N0cmluZy1idWYnKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gZGF0YSBjaHVua3MgLSBlbmNhcHN1bGF0aW5nIGluY29taW5nIGRhdGEKCgp2YXIgU3RyaW5nQ2h1bmsgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFN0cmluZ0NodW5rKGRhdGEsIGVuY29k
aW5nKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RyaW5nQ2h1bmspOwoKICAgIHRoaXMuX2RhdGEgPSBkYXRhOwogICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNvZGluZzsKICB9CgogIF9jcmVhdGVDbGFzcyhTdHJpbmdDaHVuaywgW3sKICAgIGtleTogImNvcHkiLAogICAgLy8gY29weSB0byB0YXJnZXQgYnVmZmVyCiAgICB2YWx1ZTogZnVuY3Rpb24gY29weSh0YXJnZXQsIHRhcmdldE9mZnNldCwgb2Zmc2V0LCBsZW5ndGgpIHsKICAgICAgcmV0dXJuIHRoaXMudG9CdWZmZXIoKS5jb3B5KHRhcmdldCwgdGFyZ2V0T2Zm
c2V0LCBvZmZzZXQsIGxlbmd0aCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9CdWZmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvQnVmZmVyKCkgewogICAgICBpZiAoIXRoaXMuX2J1ZmZlcikgewogICAgICAgIHRoaXMuX2J1ZmZlciA9IEJ1ZmZlci5mcm9tKHRoaXMuX2RhdGEsIHRoaXMuX2VuY29kaW5nKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsZW5ndGgiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnRvQnVmZmVy
KCkubGVuZ3RoOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFN0cmluZ0NodW5rOwp9KCk7Cgp2YXIgU3RyaW5nQnVmQ2h1bmsgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFN0cmluZ0J1ZkNodW5rKGRhdGEpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJpbmdCdWZDaHVuayk7CgogICAgdGhpcy5fZGF0YSA9IGRhdGE7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3RyaW5nQnVmQ2h1bmssIFt7CiAgICBrZXk6ICJjb3B5IiwKICAgIC8vIGNvcHkgdG8gdGFyZ2V0IGJ1ZmZlcgogICAgdmFsdWU6IGZ1
bmN0aW9uIGNvcHkodGFyZ2V0LCB0YXJnZXRPZmZzZXQsIG9mZnNldCwgbGVuZ3RoKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZQogICAgICByZXR1cm4gdGhpcy5fZGF0YS5fYnVmLmNvcHkodGFyZ2V0LCB0YXJnZXRPZmZzZXQsIG9mZnNldCwgbGVuZ3RoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b0J1ZmZlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9CdWZmZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kYXRhLnRvQnVmZmVyKCk7CiAgICB9CiAgfSwgewogICAg
a2V5OiAibGVuZ3RoIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fZGF0YS5sZW5ndGg7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU3RyaW5nQnVmQ2h1bms7Cn0oKTsKCnZhciBCdWZmZXJDaHVuayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQnVmZmVyQ2h1bmsoZGF0YSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckNodW5rKTsKCiAgICB0aGlzLl9kYXRhID0gZGF0YTsKICB9CgogIF9jcmVhdGVDbGFzcyhCdWZmZXJDaHVuaywgW3sKICAgIGtl
eTogImNvcHkiLAogICAgLy8gY29weSB0byB0YXJnZXQgYnVmZmVyCiAgICB2YWx1ZTogZnVuY3Rpb24gY29weSh0YXJnZXQsIHRhcmdldE9mZnNldCwgb2Zmc2V0LCBsZW5ndGgpIHsKICAgICAgdGhpcy5fZGF0YS5jb3B5KHRhcmdldCwgdGFyZ2V0T2Zmc2V0LCBvZmZzZXQsIGxlbmd0aCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9CdWZmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvQnVmZmVyKCkgewogICAgICByZXR1cm4gdGhpcy5fZGF0YTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsZW5ndGgiLAogICAgZ2V0OiBm
dW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kYXRhLmxlbmd0aDsKICAgIH0KICB9XSk7CgogIHJldHVybiBCdWZmZXJDaHVuazsKfSgpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBSZWFkV3JpdGVCdWYgLSBhIHNpbmdsZSBidWZmZXIgc3VwcG9ydGluZyBzaW1wbGUgcmVhZC13cml0ZQoKCnZhciBSZWFkV3JpdGVCdWYgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFJlYWRXcml0
ZUJ1ZihzaXplKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVhZFdyaXRlQnVmKTsKCiAgICB0aGlzLnNpemUgPSBzaXplOyAvLyB0aGUgYnVmZmVyCgogICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2Moc2l6ZSk7IC8vIHJlYWQgaW5kZXgKCiAgICB0aGlzLmlSZWFkID0gMDsgLy8gd3JpdGUgaW5kZXgKCiAgICB0aGlzLmlXcml0ZSA9IDA7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUmVhZFdyaXRlQnVmLCBbewogICAga2V5OiAidG9CdWZmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvQnVmZmVyKCkgewogICAgICBp
ZiAodGhpcy5pUmVhZCA9PT0gMCAmJiB0aGlzLmlXcml0ZSA9PT0gdGhpcy5zaXplKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyOwogICAgICB9CgogICAgICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKHRoaXMuaVdyaXRlIC0gdGhpcy5pUmVhZCk7CiAgICAgIHRoaXMuYnVmZmVyLmNvcHkoYnVmLCAwLCB0aGlzLmlSZWFkLCB0aGlzLmlXcml0ZSk7CiAgICAgIHJldHVybiBidWY7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVhZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZChzaXplKSB7CiAgICAgIHZhciBidWY7IC8v
IHJlYWQgc2l6ZSBieXRlcyBmcm9tIGJ1ZmZlciBhbmQgcmV0dXJuIGJ1ZmZlcgoKICAgICAgaWYgKHNpemUgPT09IDApIHsKICAgICAgICAvLyBzcGVjaWFsIGNhc2UgLSByZXR1cm4gbnVsbCBpZiBubyBkYXRhIHJlcXVlc3RlZAogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICBpZiAoc2l6ZSA9PT0gdW5kZWZpbmVkIHx8IHNpemUgPj0gdGhpcy5sZW5ndGgpIHsKICAgICAgICAvLyBpZiBubyBzaXplIHNwZWNpZmllZCBvciBzaXplIGlzIGF0IGxlYXN0IHdoYXQgd2UgaGF2ZSB0aGVuIHJldHVybiBhbGwgb2Yg
dGhlIGJ5dGVzCiAgICAgICAgYnVmID0gdGhpcy50b0J1ZmZlcigpOwogICAgICAgIHRoaXMuaVJlYWQgPSB0aGlzLmlXcml0ZTsKICAgICAgICByZXR1cm4gYnVmOwogICAgICB9IC8vIG90aGVyd2lzZSByZXR1cm4gYSBjaHVuawoKCiAgICAgIGJ1ZiA9IEJ1ZmZlci5hbGxvYyhzaXplKTsKICAgICAgdGhpcy5idWZmZXIuY29weShidWYsIDAsIHRoaXMuaVJlYWQsIHNpemUpOwogICAgICB0aGlzLmlSZWFkICs9IHNpemU7CiAgICAgIHJldHVybiBidWY7CiAgICB9CiAgfSwgewogICAga2V5OiAid3JpdGUiLAogICAgdmFsdWU6
IGZ1bmN0aW9uIHdyaXRlKGNodW5rLCBvZmZzZXQsIGxlbmd0aCkgewogICAgICAvLyB3cml0ZSBhcyBtYW55IGJ5dGVzIGZyb20gZGF0YSBmcm9tIG9wdGlvbmFsIHNvdXJjZSBvZmZzZXQKICAgICAgLy8gYW5kIHJldHVybiBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbgogICAgICB2YXIgc2l6ZSA9IE1hdGgubWluKGxlbmd0aCwgdGhpcy5zaXplIC0gdGhpcy5pV3JpdGUpOwogICAgICBjaHVuay5jb3B5KHRoaXMuYnVmZmVyLCB0aGlzLmlXcml0ZSwgb2Zmc2V0LCBvZmZzZXQgKyBzaXplKTsKICAgICAgdGhpcy5pV3JpdGUgKz0g
c2l6ZTsKICAgICAgcmV0dXJuIHNpemU7CiAgICB9CiAgfSwgewogICAga2V5OiAibGVuZ3RoIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5pV3JpdGUgLSB0aGlzLmlSZWFkOwogICAgfQogIH0sIHsKICAgIGtleTogImVvZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaVJlYWQgPT09IHRoaXMuaVdyaXRlOwogICAgfQogIH0sIHsKICAgIGtleTogImZ1bGwiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmlXcml0ZSA9
PT0gdGhpcy5zaXplOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFJlYWRXcml0ZUJ1ZjsKfSgpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBTdHJlYW1CdWYgLSBhIG11bHRpLXB1cnBvc2UgcmVhZC13cml0ZSBzdHJlYW0KLy8gIEFzIE1lbUJ1ZiAtIHdyaXRlIGFzIG11Y2ggZGF0YSBhcyB5b3UgbGlrZS4gVGhlbiBjYWxsIHRvQnVmZmVyKCkgdG8gY29uc29saWRhdGUKLy8gIEFzIFN0cmVhbUh1YiAtIHBpcGUgdG8gbXVs
dGlwbGUgd3JpdGFibGVzCi8vICBBcyByZWFkYWJsZSBzdHJlYW0gLSBmZWVkIGRhdGEgaW50byB0aGUgd3JpdGFibGUgcGFydCBhbmQgaGF2ZSBzb21lIG90aGVyIGNvZGUgcmVhZCBmcm9tIGl0LgovLyBOb3RlOiBOb3Qgc3VyZSB3aHkgYnV0IFN0cmVhbUJ1ZiBkb2VzIG5vdCBsaWtlIEpTICJjbGFzcyIgc3VnYXIuIEl0IGZhaWxzIHRoZQovLyBpbnRlZ3JhdGlvbiB0ZXN0cwoKCnZhciBTdHJlYW1CdWYgPSBmdW5jdGlvbiBTdHJlYW1CdWYob3B0aW9ucykgewogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogIHRoaXMuYnVm
U2l6ZSA9IG9wdGlvbnMuYnVmU2l6ZSB8fCAxMDI0ICogMTAyNDsKICB0aGlzLmJ1ZmZlcnMgPSBbXTsgLy8gYmF0Y2ggbW9kZSBmaWxscyBhIGJ1ZmZlciBjb21wbGV0ZWx5IGJlZm9yZSBwYXNzaW5nIHRoZSBkYXRhIG9uCiAgLy8gdG8gcGlwZXMgb3IgJ3JlYWRhYmxlJyBldmVudCBsaXN0ZW5lcnMKCiAgdGhpcy5iYXRjaCA9IG9wdGlvbnMuYmF0Y2ggfHwgZmFsc2U7CiAgdGhpcy5jb3JrZWQgPSBmYWxzZTsgLy8gd2hlcmUgaW4gdGhlIGN1cnJlbnQgd3JpdGFibGUgYnVmZmVyIHdlJ3JlIHVwIHRvCgogIHRoaXMuaW5Qb3Mg
PSAwOyAvLyB3aGVyZSBpbiB0aGUgY3VycmVudCByZWFkYWJsZSBidWZmZXIgd2UndmUgcmVhZCB1cCB0bwoKICB0aGlzLm91dFBvcyA9IDA7IC8vIGNvbnN1bWluZyBwaXBlIHN0cmVhbXMgZ28gaGVyZQoKICB0aGlzLnBpcGVzID0gW107IC8vIGNvbnRyb2xzIGVtaXQoJ2RhdGEnKQoKICB0aGlzLnBhdXNlZCA9IGZhbHNlOwogIHRoaXMuZW5jb2RpbmcgPSBudWxsOwp9OwoKdXRpbHMuaW5oZXJpdHMoU3RyZWFtQnVmLCBTdHJlYW0uRHVwbGV4LCB7CiAgdG9CdWZmZXI6IGZ1bmN0aW9uIHRvQnVmZmVyKCkgewogICAgc3dpdGNo
ICh0aGlzLmJ1ZmZlcnMubGVuZ3RoKSB7CiAgICAgIGNhc2UgMDoKICAgICAgICByZXR1cm4gbnVsbDsKCiAgICAgIGNhc2UgMToKICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJzWzBdLnRvQnVmZmVyKCk7CgogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KHRoaXMuYnVmZmVycy5tYXAoZnVuY3Rpb24gKHJ3QnVmKSB7CiAgICAgICAgICByZXR1cm4gcndCdWYudG9CdWZmZXIoKTsKICAgICAgICB9KSk7CiAgICB9CiAgfSwKICAvLyB3cml0YWJsZQogIC8vIGV2ZW50IGRyYWluIC0gaWYgd3JpdGUg
cmV0dXJucyBmYWxzZSAod2hpY2ggaXQgd29uJ3QpLCBpbmRpY2F0ZXMgd2hlbiBzYWZlIHRvIHdyaXRlIGFnYWluLgogIC8vIGZpbmlzaCAtIGVuZCgpIGhhcyBiZWVuIGNhbGxlZAogIC8vIHBpcGUoc3JjKSAtIHBpcGUoKSBoYXMgYmVlbiBjYWxsZWQgb24gcmVhZGFibGUKICAvLyB1bnBpcGUoc3JjKSAtIHVucGlwZSgpIGhhcyBiZWVuIGNhbGxlZCBvbiByZWFkYWJsZQogIC8vIGVycm9yIC0gZHVoCiAgX2dldFdyaXRhYmxlQnVmZmVyOiBmdW5jdGlvbiBfZ2V0V3JpdGFibGVCdWZmZXIoKSB7CiAgICBpZiAodGhpcy5idWZm
ZXJzLmxlbmd0aCkgewogICAgICB2YXIgbGFzdCA9IHRoaXMuYnVmZmVyc1t0aGlzLmJ1ZmZlcnMubGVuZ3RoIC0gMV07CgogICAgICBpZiAoIWxhc3QuZnVsbCkgewogICAgICAgIHJldHVybiBsYXN0OwogICAgICB9CiAgICB9CgogICAgdmFyIGJ1ZiA9IG5ldyBSZWFkV3JpdGVCdWYodGhpcy5idWZTaXplKTsKICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1Zik7CiAgICByZXR1cm4gYnVmOwogIH0sCiAgX3BpcGU6IGZ1bmN0aW9uIF9waXBlKGNodW5rKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNU
b0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciB3cml0ZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHdyaXRlID0gZnVuY3Rpb24gd3JpdGUocGlwZSkgewogICAgICAgICAg
ICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICAgIHBpcGUud3JpdGUoY2h1bmsudG9CdWZmZXIoKSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoX3RoaXMucGlwZXMubWFwKHdyaXRlKSk7CgogICAgICAgICAg
ICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBfd3JpdGVUb0J1ZmZlcnM6IGZ1bmN0aW9uIF93cml0ZVRvQnVmZmVycyhjaHVuaykgewogICAgdmFyIGluUG9zID0gMDsKICAgIHZhciBpbkxlbiA9IGNodW5rLmxlbmd0aDsKCiAgICB3aGlsZSAoaW5Qb3MgPCBpbkxlbikgewogICAgICAvLyBmaW5kIHdyaXRhYmxlIGJ1ZmZlcgogICAgICB2YXIg
YnVmZmVyID0gdGhpcy5fZ2V0V3JpdGFibGVCdWZmZXIoKTsgLy8gd3JpdGUgc29tZSBkYXRhCgoKICAgICAgaW5Qb3MgKz0gYnVmZmVyLndyaXRlKGNodW5rLCBpblBvcywgaW5MZW4gLSBpblBvcyk7CiAgICB9CiAgfSwKICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7CiAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFy
IGNodW5rOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmIChlbmNvZGluZyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGVuY29kaW5nOwogICAgICAgICAgICAgICAgZW5jb2RpbmcgPSAndXRmOCc7CiAgICAgICAg
ICAgICAgfQoKICAgICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IHV0aWxzLm5vcDsgLy8gZW5jYXBzdWxhdGUgZGF0YSBpbnRvIGEgY2h1bmsKCiAgICAgICAgICAgICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFN0cmluZ0J1ZikpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2h1bmsgPSBuZXcgU3RyaW5nQnVmQ2h1bmsoZGF0YSk7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsK
ICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgQnVmZmVyKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2h1bmsgPSBuZXcgQnVmZmVyQ2h1bmsoZGF0YSk7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAg
ICAgaWYgKCEodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnIHx8IGRhdGEgaW5zdGFuY2VvZiBTdHJpbmcgfHwgZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2h1bmsgPSBuZXcgU3RyaW5nQ2h1bmsoZGF0YSwgZW5jb2RpbmcpOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNl
IDE0OgogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2h1bmsgbXVzdCBiZSBvbmUgb2YgdHlwZSBTdHJpbmcsIEJ1ZmZlciBvciBTdHJpbmdCdWYuJyk7CgogICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgIGlmICghX3RoaXMyLnBpcGVzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKCFfdGhpczIuYmF0Y2gpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0
ID0gMjE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzMi5fd3JpdGVUb0J1ZmZlcnMoY2h1bmspOwoKICAgICAgICAgICAgICB3aGlsZSAoIV90aGlzMi5jb3JrZWQgJiYgX3RoaXMyLmJ1ZmZlcnMubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgX3RoaXMyLl9waXBlKF90aGlzMi5idWZmZXJzLnNoaWZ0KCkpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAg
IGNhc2UgMjE6CiAgICAgICAgICAgICAgaWYgKF90aGlzMi5jb3JrZWQpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjQ7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fcGlwZShjaHVuayk7CgogICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOTsKICAgICAgICAgICAgICBicmVh
azsKCiAgICAgICAgICAgIGNhc2UgMjc6CiAgICAgICAgICAgICAgX3RoaXMyLl93cml0ZVRvQnVmZmVycyhjaHVuayk7CgogICAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spOwoKICAgICAgICAgICAgY2FzZSAyOToKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM0OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICBpZiAoIV90aGlzMi5wYXVzZWQpIHsKICAgICAgICAgICAgICAgIF90aGlzMi5lbWl0KCdkYXRhJywgY2h1bmsudG9CdWZmZXIo
KSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpczIuX3dyaXRlVG9CdWZmZXJzKGNodW5rKTsKCiAgICAgICAgICAgICAgX3RoaXMyLmVtaXQoJ3JlYWRhYmxlJyk7CgogICAgICAgICAgICBjYXNlIDM0OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB0cnVlKTsKCiAgICAgICAgICAgIGNhc2UgMzU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBf
Y2FsbGVlMik7CiAgICB9KSkoKTsKICB9LAogIGNvcms6IGZ1bmN0aW9uIGNvcmsoKSB7CiAgICB0aGlzLmNvcmtlZCA9IHRydWU7CiAgfSwKICBfZmx1c2g6IGZ1bmN0aW9uIF9mbHVzaCgpCiAgLyogZGVzdGluYXRpb24gKi8KICB7CiAgICAvLyBpZiB3ZSBoYXZlIGNvbXN1bWVycy4uLgogICAgaWYgKHRoaXMucGlwZXMubGVuZ3RoKSB7CiAgICAgIC8vIGFuZCB0aGVyZSdzIHN0dWZmIG5vdCB3cml0dGVuCiAgICAgIHdoaWxlICh0aGlzLmJ1ZmZlcnMubGVuZ3RoKSB7CiAgICAgICAgdGhpcy5fcGlwZSh0aGlzLmJ1ZmZlcnMu
c2hpZnQoKSk7CiAgICAgIH0KICAgIH0KICB9LAogIHVuY29yazogZnVuY3Rpb24gdW5jb3JrKCkgewogICAgdGhpcy5jb3JrZWQgPSBmYWxzZTsKCiAgICB0aGlzLl9mbHVzaCgpOwogIH0sCiAgZW5kOiBmdW5jdGlvbiBlbmQoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykgewogICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgdmFyIHdyaXRlQ29tcGxldGUgPSBmdW5jdGlvbiB3cml0ZUNvbXBsZXRlKGVycm9yKSB7CiAgICAgIGlmIChlcnJvcikgewogICAgICAgIGNhbGxiYWNrKGVycm9yKTsKICAgICAgfSBlbHNlIHsKICAg
ICAgICBfdGhpczMuX2ZsdXNoKCk7CgogICAgICAgIF90aGlzMy5waXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChwaXBlKSB7CiAgICAgICAgICBwaXBlLmVuZCgpOwogICAgICAgIH0pOwoKICAgICAgICBfdGhpczMuZW1pdCgnZmluaXNoJyk7CiAgICAgIH0KICAgIH07CgogICAgaWYgKGNodW5rKSB7CiAgICAgIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nLCB3cml0ZUNvbXBsZXRlKTsKICAgIH0gZWxzZSB7CiAgICAgIHdyaXRlQ29tcGxldGUoKTsKICAgIH0KICB9LAogIC8vIHJlYWRhYmxlCiAgLy8gZXZlbnQgcmVhZGFibGUg
LSBzb21lIGRhdGEgaXMgbm93IGF2YWlsYWJsZQogIC8vIGV2ZW50IGRhdGEgLSBzd2l0Y2ggdG8gZmxvd2luZyBtb2RlIC0gZmVlZHMgY2h1bmtzIHRvIGhhbmRsZXIKICAvLyBldmVudCBlbmQgLSBubyBtb3JlIGRhdGEKICAvLyBldmVudCBjbG9zZSAtIG9wdGlvbmFsLCBpbmRpY2F0ZXMgdXBzdHJlYW0gY2xvc2UKICAvLyBldmVudCBlcnJvciAtIGR1aAogIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoc2l6ZSkgewogICAgdmFyIGJ1ZmZlcnM7IC8vIHJlYWQgbWluKGJ1ZmZlciwgc2l6ZSB8fCBpbmZpbml0eSkKCiAgICBpZiAoc2l6
ZSkgewogICAgICBidWZmZXJzID0gW107CgogICAgICB3aGlsZSAoc2l6ZSAmJiB0aGlzLmJ1ZmZlcnMubGVuZ3RoICYmICF0aGlzLmJ1ZmZlcnNbMF0uZW9kKSB7CiAgICAgICAgdmFyIGZpcnN0ID0gdGhpcy5idWZmZXJzWzBdOwogICAgICAgIHZhciBidWZmZXIgPSBmaXJzdC5yZWFkKHNpemUpOwogICAgICAgIHNpemUgLT0gYnVmZmVyLmxlbmd0aDsKICAgICAgICBidWZmZXJzLnB1c2goYnVmZmVyKTsKCiAgICAgICAgaWYgKGZpcnN0LmVvZCAmJiBmaXJzdC5mdWxsKSB7CiAgICAgICAgICB0aGlzLmJ1ZmZlcnMuc2hpZnQo
KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpOwogICAgfQoKICAgIGJ1ZmZlcnMgPSB0aGlzLmJ1ZmZlcnMubWFwKGZ1bmN0aW9uIChidWYpIHsKICAgICAgcmV0dXJuIGJ1Zi50b0J1ZmZlcigpOwogICAgfSkuZmlsdGVyKEJvb2xlYW4pOwogICAgdGhpcy5idWZmZXJzID0gW107CiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChidWZmZXJzKTsKICB9LAogIHNldEVuY29kaW5nOiBmdW5jdGlvbiBzZXRFbmNvZGluZyhlbmNvZGluZykgewogICAgLy8gY2F1c2VzIHN0cmVhbS5y
ZWFkIG9yIHN0cmVhbS5vbignZGF0YSkgdG8gcmV0dXJuIHN0cmluZ3Mgb2YgZW5jb2RpbmcgaW5zdGVhZCBvZiBCdWZmZXIgb2JqZWN0cwogICAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nOwogIH0sCiAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKCkgewogICAgdGhpcy5wYXVzZWQgPSB0cnVlOwogIH0sCiAgcmVzdW1lOiBmdW5jdGlvbiByZXN1bWUoKSB7CiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlOwogIH0sCiAgaXNQYXVzZWQ6IGZ1bmN0aW9uIGlzUGF1c2VkKCkgewogICAgcmV0dXJuICEhdGhpcy5wYXVzZWQ7CiAgfSwKICBw
aXBlOiBmdW5jdGlvbiBwaXBlKGRlc3RpbmF0aW9uKSB7CiAgICAvLyBhZGQgZGVzdGluYXRpb24gdG8gcGlwZSBsaXN0ICYgd3JpdGUgY3VycmVudCBidWZmZXIKICAgIHRoaXMucGlwZXMucHVzaChkZXN0aW5hdGlvbik7CgogICAgaWYgKCF0aGlzLnBhdXNlZCAmJiB0aGlzLmJ1ZmZlcnMubGVuZ3RoKSB7CiAgICAgIHRoaXMuZW5kKCk7CiAgICB9CiAgfSwKICB1bnBpcGU6IGZ1bmN0aW9uIHVucGlwZShkZXN0aW5hdGlvbikgewogICAgLy8gcmVtb3ZlIGRlc3RpbmF0aW9uIGZyb20gcGlwZSBsaXN0CiAgICB0aGlzLnBpcGVz
ID0gdGhpcy5waXBlcy5maWx0ZXIoZnVuY3Rpb24gKHBpcGUpIHsKICAgICAgcmV0dXJuIHBpcGUgIT09IGRlc3RpbmF0aW9uOwogICAgfSk7CiAgfSwKICB1bnNoaWZ0OiBmdW5jdGlvbiB1bnNoaWZ0KCkKICAvKiBjaHVuayAqLwogIHsKICAgIC8vIHNvbWUgbnVtcHR5IGhhcyByZWFkIHNvbWUgZGF0YSB0aGF0J3Mgbm90IGZvciB0aGVtIGFuZCB0aGV5IHdhbnQgdG8gcHV0IGl0IGJhY2shCiAgICAvLyBNaWdodCBpbXBsZW1lbnQgdGhpcyBzb21lIGRheQogICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgSW1wbGVtZW50ZWQnKTsK
ICB9LAogIHdyYXA6IGZ1bmN0aW9uIHdyYXAoKQogIC8qIHN0cmVhbSAqLwogIHsKICAgIC8vIG5vdCBpbXBsZW1lbnRlZAogICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgSW1wbGVtZW50ZWQnKTsKICB9Cn0pOwptb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUJ1ZjsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHJlcXVpcmUoImJ1ZmZlciIpLkJ1ZmZlcikKCn0seyIuL3N0cmluZy1idWYiOjI0LCIuL3V0aWxzIjoyNiwiX3Byb2Nlc3MiOjM1OCwiYnVmZmVyIjoyMTYsInJlYWRhYmxlLXN0cmVhbSI6MzgyfV0sMjQ6W2Z1
bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKEJ1ZmZlcil7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsg
aSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMp
IHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgovLyBTdHJpbmdCdWYgLSBhIHdheSB0byBrZWVwIHN0cmluZyBtZW1vcnkgb3BlcmF0aW9ucyB0byBhIG1pbmltdW0KLy8gd2hpbGUgYnVpbGRpbmcgdGhlIHN0cmluZ3MgZm9yIHRoZSB4bWwgZmlsZXMKdmFyIFN0cmluZ0J1ZiA9IC8qI19fUFVSRV9f
Ki9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gU3RyaW5nQnVmKG9wdGlvbnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJpbmdCdWYpOwoKICAgIHRoaXMuX2J1ZiA9IEJ1ZmZlci5hbGxvYyhvcHRpb25zICYmIG9wdGlvbnMuc2l6ZSB8fCAxNjM4NCk7CiAgICB0aGlzLl9lbmNvZGluZyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGluZyB8fCAndXRmOCc7IC8vIHdoZXJlIGluIHRoZSBidWZmZXIgd2UgYXJlIGF0CgogICAgdGhpcy5faW5Qb3MgPSAwOyAvLyBmb3IgdXNlIGJ5IHRvQnVmZmVyKCkKCiAgICB0aGlz
Ll9idWZmZXIgPSB1bmRlZmluZWQ7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3RyaW5nQnVmLCBbewogICAga2V5OiAidG9CdWZmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvQnVmZmVyKCkgewogICAgICAvLyByZXR1cm4gdGhlIGN1cnJlbnQgZGF0YSBhcyBhIHNpbmdsZSBlbmNsb3NpbmcgYnVmZmVyCiAgICAgIGlmICghdGhpcy5fYnVmZmVyKSB7CiAgICAgICAgdGhpcy5fYnVmZmVyID0gQnVmZmVyLmFsbG9jKHRoaXMubGVuZ3RoKTsKCiAgICAgICAgdGhpcy5fYnVmLmNvcHkodGhpcy5fYnVmZmVyLCAwLCAwLCB0aGlzLmxl
bmd0aCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLl9idWZmZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVzZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KHBvc2l0aW9uKSB7CiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gfHwgMDsKICAgICAgdGhpcy5fYnVmZmVyID0gdW5kZWZpbmVkOwogICAgICB0aGlzLl9pblBvcyA9IHBvc2l0aW9uOwogICAgfQogIH0sIHsKICAgIGtleTogIl9ncm93IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ3JvdyhtaW4pIHsKICAgICAgdmFyIHNpemUgPSB0aGlzLl9idWYubGVu
Z3RoICogMjsKCiAgICAgIHdoaWxlIChzaXplIDwgbWluKSB7CiAgICAgICAgc2l6ZSAqPSAyOwogICAgICB9CgogICAgICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKHNpemUpOwoKICAgICAgdGhpcy5fYnVmLmNvcHkoYnVmLCAwKTsKCiAgICAgIHRoaXMuX2J1ZiA9IGJ1ZjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRUZXh0KHRleHQpIHsKICAgICAgdGhpcy5fYnVmZmVyID0gdW5kZWZpbmVkOwoKICAgICAgdmFyIGluUG9zID0gdGhpcy5faW5Qb3MgKyB0aGlzLl9idWYu
d3JpdGUodGV4dCwgdGhpcy5faW5Qb3MsIHRoaXMuX2VuY29kaW5nKTsgLy8gaWYgd2UndmUgaGl0IChvciBuZWFyaW5nIGNhcGFjaXR5KSwgZ3JvdyB0aGUgYnVmCgoKICAgICAgd2hpbGUgKGluUG9zID49IHRoaXMuX2J1Zi5sZW5ndGggLSA0KSB7CiAgICAgICAgdGhpcy5fZ3Jvdyh0aGlzLl9pblBvcyArIHRleHQubGVuZ3RoKTsgLy8ga2VlcCB0cnlpbmcgdG8gd3JpdGUgdW50aWwgd2UndmUgY29tcGxldGVseSB3cml0dGVuIHRoZSB0ZXh0CgoKICAgICAgICBpblBvcyA9IHRoaXMuX2luUG9zICsgdGhpcy5fYnVmLndyaXRl
KHRleHQsIHRoaXMuX2luUG9zLCB0aGlzLl9lbmNvZGluZyk7CiAgICAgIH0KCiAgICAgIHRoaXMuX2luUG9zID0gaW5Qb3M7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkU3RyaW5nQnVmIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTdHJpbmdCdWYoaW5CdWYpIHsKICAgICAgaWYgKGluQnVmLmxlbmd0aCkgewogICAgICAgIHRoaXMuX2J1ZmZlciA9IHVuZGVmaW5lZDsKCiAgICAgICAgaWYgKHRoaXMubGVuZ3RoICsgaW5CdWYubGVuZ3RoID4gdGhpcy5jYXBhY2l0eSkgewogICAgICAgICAgdGhpcy5fZ3Jvdyh0aGlzLmxl
bmd0aCArIGluQnVmLmxlbmd0aCk7CiAgICAgICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUKCgogICAgICAgIGluQnVmLl9idWYuY29weSh0aGlzLl9idWYsIHRoaXMuX2luUG9zLCAwLCBpbkJ1Zi5sZW5ndGgpOwoKICAgICAgICB0aGlzLl9pblBvcyArPSBpbkJ1Zi5sZW5ndGg7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJsZW5ndGgiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9pblBvczsKICAgIH0KICB9LCB7CiAgICBrZXk6
ICJjYXBhY2l0eSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2J1Zi5sZW5ndGg7CiAgICB9CiAgfSwgewogICAga2V5OiAiYnVmZmVyIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fYnVmOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFN0cmluZ0J1ZjsKfSgpOwoKbW9kdWxlLmV4cG9ydHMgPSBTdHJpbmdCdWY7Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgiYnVmZmVyIikuQnVmZmVyKQoKfSx7ImJ1ZmZlciI6MjE2fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUs
bW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIg
JiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7CnZhciBlc2NhcGVIdG1sUmVnZXggPSAvWyImPD5dLzsKdmFyIF8gPSB7CiAgZWFjaDogZnVuY3Rpb24gZWFjaChvYmosIGNiKSB7CiAgICBpZiAob2JqKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHsKICAgICAgICBvYmouZm9yRWFjaChjYik7
CiAgICAgIH0gZWxzZSB7CiAgICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgIGNiKG9ialtrZXldLCBrZXkpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwKICBzb21lOiBmdW5jdGlvbiBzb21lKG9iaiwgY2IpIHsKICAgIGlmIChvYmopIHsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkgewogICAgICAgIHJldHVybiBvYmouc29tZShjYik7CiAgICAgIH0KCiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnNvbWUoZnVuY3Rpb24gKGtleSkgewogICAg
ICAgIHJldHVybiBjYihvYmpba2V5XSwga2V5KTsKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwogIH0sCiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KG9iaiwgY2IpIHsKICAgIGlmIChvYmopIHsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkgewogICAgICAgIHJldHVybiBvYmouZXZlcnkoY2IpOwogICAgICB9CgogICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgcmV0dXJuIGNiKG9ialtrZXldLCBrZXkpOwogICAgICB9KTsKICAgIH0KCiAgICBy
ZXR1cm4gdHJ1ZTsKICB9LAogIG1hcDogZnVuY3Rpb24gbWFwKG9iaiwgY2IpIHsKICAgIGlmIChvYmopIHsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkgewogICAgICAgIHJldHVybiBvYmoubWFwKGNiKTsKICAgICAgfQoKICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gY2Iob2JqW2tleV0sIGtleSk7CiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBbXTsKICB9LAogIGtleUJ5OiBmdW5jdGlvbiBrZXlCeShhLCBwKSB7CiAgICByZXR1cm4gYS5y
ZWR1Y2UoZnVuY3Rpb24gKG8sIHYpIHsKICAgICAgb1t2W3BdXSA9IHY7CiAgICAgIHJldHVybiBvOwogICAgfSwge30pOwogIH0sCiAgaXNFcXVhbDogZnVuY3Rpb24gaXNFcXVhbChhLCBiKSB7CiAgICB2YXIgYVR5cGUgPSBfdHlwZW9mKGEpOwoKICAgIHZhciBiVHlwZSA9IF90eXBlb2YoYik7CgogICAgdmFyIGFBcnJheSA9IEFycmF5LmlzQXJyYXkoYSk7CiAgICB2YXIgYkFycmF5ID0gQXJyYXkuaXNBcnJheShiKTsKCiAgICBpZiAoYVR5cGUgIT09IGJUeXBlKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBz
d2l0Y2ggKF90eXBlb2YoYSkpIHsKICAgICAgY2FzZSAnb2JqZWN0JzoKICAgICAgICBpZiAoYUFycmF5IHx8IGJBcnJheSkgewogICAgICAgICAgaWYgKGFBcnJheSAmJiBiQXJyYXkpIHsKICAgICAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChhVmFsdWUsIGluZGV4KSB7CiAgICAgICAgICAgICAgdmFyIGJWYWx1ZSA9IGJbaW5kZXhdOwogICAgICAgICAgICAgIHJldHVybiBfLmlzRXF1YWwoYVZhbHVlLCBiVmFsdWUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0K
CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gXy5ldmVyeShhLCBmdW5jdGlvbiAoYVZhbHVlLCBrZXkpIHsKICAgICAgICAgIHZhciBiVmFsdWUgPSBiW2tleV07CiAgICAgICAgICByZXR1cm4gXy5pc0VxdWFsKGFWYWx1ZSwgYlZhbHVlKTsKICAgICAgICB9KTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIGEgPT09IGI7CiAgICB9CiAgfSwKICBlc2NhcGVIdG1sOiBmdW5jdGlvbiBlc2NhcGVIdG1sKGh0bWwpIHsKICAgIHZhciByZWdleFJlc3VsdCA9IGVzY2FwZUh0bWxS
ZWdleC5leGVjKGh0bWwpOwogICAgaWYgKCFyZWdleFJlc3VsdCkgcmV0dXJuIGh0bWw7CiAgICB2YXIgcmVzdWx0ID0gJyc7CiAgICB2YXIgZXNjYXBlID0gJyc7CiAgICB2YXIgbGFzdEluZGV4ID0gMDsKICAgIHZhciBpID0gcmVnZXhSZXN1bHQuaW5kZXg7CgogICAgZm9yICg7IGkgPCBodG1sLmxlbmd0aDsgaSsrKSB7CiAgICAgIHN3aXRjaCAoaHRtbC5jaGFyQXQoaSkpIHsKICAgICAgICBjYXNlICciJzoKICAgICAgICAgIGVzY2FwZSA9ICcmcXVvdDsnOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJyYnOgog
ICAgICAgICAgZXNjYXBlID0gJyZhbXA7JzsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdcJyc6CiAgICAgICAgICBlc2NhcGUgPSAnJmFwb3M7JzsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICc8JzoKICAgICAgICAgIGVzY2FwZSA9ICcmbHQ7JzsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICc+JzoKICAgICAgICAgIGVzY2FwZSA9ICcmZ3Q7JzsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGlmIChsYXN0SW5k
ZXggIT09IGkpIHJlc3VsdCArPSBodG1sLnN1YnN0cmluZyhsYXN0SW5kZXgsIGkpOwogICAgICBsYXN0SW5kZXggPSBpICsgMTsKICAgICAgcmVzdWx0ICs9IGVzY2FwZTsKICAgIH0KCiAgICBpZiAobGFzdEluZGV4ICE9PSBpKSByZXR1cm4gcmVzdWx0ICsgaHRtbC5zdWJzdHJpbmcobGFzdEluZGV4LCBpKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfSwKICBzdHJjbXA6IGZ1bmN0aW9uIHN0cmNtcChhLCBiKSB7CiAgICBpZiAoYSA8IGIpIHJldHVybiAtMTsKICAgIGlmIChhID4gYikgcmV0dXJuIDE7CiAgICByZXR1cm4gMDsK
ICB9LAogIGlzVW5kZWZpbmVkOiBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHsKICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IFVuZGVmaW5lZF0nOwogIH0sCiAgaXNPYmplY3Q6IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkgewogICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7CiAgfSwKICBkZWVwTWVyZ2U6IGZ1bmN0aW9uIGRlZXBNZXJnZSgpIHsKICAgIHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge307CiAgICB2YXIgbGVuZ3RoID0gYXJndW1l
bnRzLmxlbmd0aDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG9uZS12YXIKCiAgICB2YXIgc3JjLCBjbG9uZSwgY29weUlzQXJyYXk7CgogICAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHsKICAgICAgc3JjID0gdGFyZ2V0W2tleV07CiAgICAgIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh2YWwpOwoKICAgICAgaWYgKF8uaXNPYmplY3QodmFsKSB8fCBjb3B5SXNBcnJheSkgewogICAgICAgIGlmIChjb3B5SXNBcnJheSkgewogICAgICAgICAgY29weUlzQXJyYXkgPSBmYWxzZTsKICAgICAgICAgIGNs
b25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBfLmlzT2JqZWN0KHNyYykgPyBzcmMgOiB7fTsKICAgICAgICB9CgogICAgICAgIHRhcmdldFtrZXldID0gXy5kZWVwTWVyZ2UoY2xvbmUsIHZhbCk7CiAgICAgIH0gZWxzZSBpZiAoIV8uaXNVbmRlZmluZWQodmFsKSkgewogICAgICAgIHRhcmdldFtrZXldID0gdmFsOwogICAgICB9CiAgICB9CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICBf
LmVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7CiAgICB9CgogICAgcmV0dXJuIHRhcmdldDsKICB9Cn07Cm1vZHVsZS5leHBvcnRzID0gXzsKCn0se31dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwsc2V0SW1tZWRpYXRlKXsKInVzZSBzdHJpY3QiOwoKdmFyIGZzID0gcmVxdWlyZSgnZnMnKTsgLy8gdXNlZnVsIHN0dWZmCgoKdmFyIGluaGVyaXRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY2xzLCBzdXBlckN0b3IsIHN0YXRpY3MsIHByb3RvdHlwZSkgewogIC8vIGVz
bGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZQogIGNscy5zdXBlcl8gPSBzdXBlckN0b3I7CgogIGlmICghcHJvdG90eXBlKSB7CiAgICBwcm90b3R5cGUgPSBzdGF0aWNzOwogICAgc3RhdGljcyA9IG51bGw7CiAgfQoKICBpZiAoc3RhdGljcykgewogICAgT2JqZWN0LmtleXMoc3RhdGljcykuZm9yRWFjaChmdW5jdGlvbiAoaSkgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xzLCBpLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHN0YXRpY3MsIGkpKTsKICAgIH0pOwogIH0K
CiAgdmFyIHByb3BlcnRpZXMgPSB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogY2xzLAogICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgd3JpdGFibGU6IGZhbHNlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9OwoKICBpZiAocHJvdG90eXBlKSB7CiAgICBPYmplY3Qua2V5cyhwcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgcHJvcGVydGllc1tpXSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG90eXBlLCBpKTsKICAgIH0pOwogIH0KCiAgY2xz
LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwgcHJvcGVydGllcyk7Cn07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4CgoKdmFyIHhtbERlY29kZVJlZ2V4ID0gL1s8PiYnIlx4N0ZceDAwLVx4MDhceDBCLVx4MENceDBFLVx4MUZdLzsKdmFyIHV0aWxzID0gewogIG5vcDogZnVuY3Rpb24gbm9wKCkge30sCiAgcHJvbWlzZUltbWVkaWF0ZTogZnVuY3Rpb24gcHJvbWlzZUltbWVkaWF0ZSh2YWx1ZSkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9u
IChyZXNvbHZlKSB7CiAgICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7CiAgICAgICAgc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHBvb3JtYW4ncyBzZXRJbW1lZGlhdGUgLSBtdXN0IHdhaXQgYXQgbGVhc3QgMW1zCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICB9LCAxKTsKICAgICAgfQogICAgfSk7CiAgfSwKICBpbmhlcml0czog
aW5oZXJpdHMsCiAgZGF0ZVRvRXhjZWw6IGZ1bmN0aW9uIGRhdGVUb0V4Y2VsKGQsIGRhdGUxOTA0KSB7CiAgICByZXR1cm4gMjU1NjkgKyBkLmdldFRpbWUoKSAvICgyNCAqIDM2MDAgKiAxMDAwKSAtIChkYXRlMTkwNCA/IDE0NjIgOiAwKTsKICB9LAogIGV4Y2VsVG9EYXRlOiBmdW5jdGlvbiBleGNlbFRvRGF0ZSh2LCBkYXRlMTkwNCkgewogICAgdmFyIG1pbGxpc2Vjb25kU2luY2VFcG9jaCA9IE1hdGgucm91bmQoKHYgLSAyNTU2OSArIChkYXRlMTkwNCA/IDE0NjIgOiAwKSkgKiAyNCAqIDM2MDAgKiAxMDAwKTsKICAgIHJl
dHVybiBuZXcgRGF0ZShtaWxsaXNlY29uZFNpbmNlRXBvY2gpOwogIH0sCiAgcGFyc2VQYXRoOiBmdW5jdGlvbiBwYXJzZVBhdGgoZmlsZXBhdGgpIHsKICAgIHZhciBsYXN0ID0gZmlsZXBhdGgubGFzdEluZGV4T2YoJy8nKTsKICAgIHJldHVybiB7CiAgICAgIHBhdGg6IGZpbGVwYXRoLnN1YnN0cmluZygwLCBsYXN0KSwKICAgICAgbmFtZTogZmlsZXBhdGguc3Vic3RyaW5nKGxhc3QgKyAxKQogICAgfTsKICB9LAogIGdldFJlbHNQYXRoOiBmdW5jdGlvbiBnZXRSZWxzUGF0aChmaWxlcGF0aCkgewogICAgdmFyIHBhdGggPSB1
dGlscy5wYXJzZVBhdGgoZmlsZXBhdGgpOwogICAgcmV0dXJuICIiLmNvbmNhdChwYXRoLnBhdGgsICIvX3JlbHMvIikuY29uY2F0KHBhdGgubmFtZSwgIi5yZWxzIik7CiAgfSwKICB4bWxFbmNvZGU6IGZ1bmN0aW9uIHhtbEVuY29kZSh0ZXh0KSB7CiAgICB2YXIgcmVnZXhSZXN1bHQgPSB4bWxEZWNvZGVSZWdleC5leGVjKHRleHQpOwogICAgaWYgKCFyZWdleFJlc3VsdCkgcmV0dXJuIHRleHQ7CiAgICB2YXIgcmVzdWx0ID0gJyc7CiAgICB2YXIgZXNjYXBlID0gJyc7CiAgICB2YXIgbGFzdEluZGV4ID0gMDsKICAgIHZhciBp
ID0gcmVnZXhSZXN1bHQuaW5kZXg7CgogICAgZm9yICg7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBjaGFyQ29kZSA9IHRleHQuY2hhckNvZGVBdChpKTsKCiAgICAgIHN3aXRjaCAoY2hhckNvZGUpIHsKICAgICAgICBjYXNlIDM0OgogICAgICAgICAgLy8gIgogICAgICAgICAgZXNjYXBlID0gJyZxdW90Oyc7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAzODoKICAgICAgICAgIC8vICYKICAgICAgICAgIGVzY2FwZSA9ICcmYW1wOyc7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAzOToK
ICAgICAgICAgIC8vICcKICAgICAgICAgIGVzY2FwZSA9ICcmYXBvczsnOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgNjA6CiAgICAgICAgICAvLyA8CiAgICAgICAgICBlc2NhcGUgPSAnJmx0Oyc7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSA2MjoKICAgICAgICAgIC8vID4KICAgICAgICAgIGVzY2FwZSA9ICcmZ3Q7JzsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDEyNzoKICAgICAgICAgIGVzY2FwZSA9ICcnOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAg
ICB7CiAgICAgICAgICAgIGlmIChjaGFyQ29kZSA8PSAzMSAmJiAoY2hhckNvZGUgPD0gOCB8fCBjaGFyQ29kZSA+PSAxMSAmJiBjaGFyQ29kZSAhPT0gMTMpKSB7CiAgICAgICAgICAgICAgZXNjYXBlID0gJyc7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICB9CgogICAgICBpZiAobGFzdEluZGV4ICE9PSBpKSByZXN1bHQgKz0gdGV4dC5zdWJzdHJpbmcobGFzdEluZGV4LCBpKTsKICAgICAgbGFzdEluZGV4ID0gaSArIDE7CiAgICAgIGlm
IChlc2NhcGUpIHJlc3VsdCArPSBlc2NhcGU7CiAgICB9CgogICAgaWYgKGxhc3RJbmRleCAhPT0gaSkgcmV0dXJuIHJlc3VsdCArIHRleHQuc3Vic3RyaW5nKGxhc3RJbmRleCwgaSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0sCiAgeG1sRGVjb2RlOiBmdW5jdGlvbiB4bWxEZWNvZGUodGV4dCkgewogICAgcmV0dXJuIHRleHQucmVwbGFjZSgvJihbYS16XSopOy9nLCBmdW5jdGlvbiAoYykgewogICAgICBzd2l0Y2ggKGMpIHsKICAgICAgICBjYXNlICcmbHQ7JzoKICAgICAgICAgIHJldHVybiAnPCc7CgogICAgICAgIGNhc2Ug
JyZndDsnOgogICAgICAgICAgcmV0dXJuICc+JzsKCiAgICAgICAgY2FzZSAnJmFtcDsnOgogICAgICAgICAgcmV0dXJuICcmJzsKCiAgICAgICAgY2FzZSAnJmFwb3M7JzoKICAgICAgICAgIHJldHVybiAnXCcnOwoKICAgICAgICBjYXNlICcmcXVvdDsnOgogICAgICAgICAgcmV0dXJuICciJzsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBjOwogICAgICB9CiAgICB9KTsKICB9LAogIHZhbGlkSW50OiBmdW5jdGlvbiB2YWxpZEludCh2YWx1ZSkgewogICAgdmFyIGkgPSBwYXJzZUludCh2YWx1ZSwgMTApOwog
ICAgcmV0dXJuICFOdW1iZXIuaXNOYU4oaSkgPyBpIDogMDsKICB9LAogIGlzRGF0ZUZtdDogZnVuY3Rpb24gaXNEYXRlRm10KGZtdCkgewogICAgaWYgKCFmbXQpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSAvLyBtdXN0IHJlbW92ZSBhbGwgY2hhcnMgaW5zaWRlIHF1b3RlcyBhbmQgW10KCgogICAgZm10ID0gZm10LnJlcGxhY2UoL1xbW15cXV0qXS9nLCAnJyk7CiAgICBmbXQgPSBmbXQucmVwbGFjZSgvIlteIl0qIi9nLCAnJyk7IC8vIHRoZW4gY2hlY2sgZm9yIGRhdGUgZm9ybWF0dGluZyBjaGFycwoKICAgIHZhciBy
ZXN1bHQgPSBmbXQubWF0Y2goL1t5bWRoTXNiXSsvKSAhPT0gbnVsbDsKICAgIHJldHVybiByZXN1bHQ7CiAgfSwKICBmczogewogICAgZXhpc3RzOiBmdW5jdGlvbiBleGlzdHMocGF0aCkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICBmcy5hY2Nlc3MocGF0aCwgZnMuY29uc3RhbnRzLkZfT0ssIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIHJlc29sdmUoIWVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sCiAgdG9Jc29EYXRlU3RyaW5nOiBmdW5jdGlv
biB0b0lzb0RhdGVTdHJpbmcoZHQpIHsKICAgIHJldHVybiBkdC50b0lzb1N0cmluZygpLnN1YnNzdHIoMCwgMTApOwogIH0KfTsKbW9kdWxlLmV4cG9ydHMgPSB1dGlsczsKCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoInRpbWVycyIpLnNldEltbWVkaWF0ZSkKCn0seyJmcyI6MjE1LCJ0aW1lcnMiOjQxMX1dLDI3Oltm
dW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0
b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykg
X2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCnZhciBfID0gcmVxdWlyZSgnLi91bmRlci1kYXNoJyk7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7IC8vIGNvbnN0YW50cwoKCnZhciBPUEVOX0FOR0xFID0gJzwnOwp2YXIgQ0xPU0VfQU5HTEUgPSAnPic7CnZhciBPUEVOX0FOR0xFX1NMQVNIID0gJzwvJzsKdmFyIENM
T1NFX1NMQVNIX0FOR0xFID0gJy8+JzsKdmFyIEVRVUFMU19RVU9URSA9ICc9Iic7CnZhciBRVU9URSA9ICciJzsKdmFyIFNQQUNFID0gJyAnOwoKZnVuY3Rpb24gcHVzaEF0dHJpYnV0ZSh4bWwsIG5hbWUsIHZhbHVlKSB7CiAgeG1sLnB1c2goU1BBQ0UpOwogIHhtbC5wdXNoKG5hbWUpOwogIHhtbC5wdXNoKEVRVUFMU19RVU9URSk7CiAgeG1sLnB1c2godXRpbHMueG1sRW5jb2RlKHZhbHVlLnRvU3RyaW5nKCkpKTsKICB4bWwucHVzaChRVU9URSk7Cn0KCmZ1bmN0aW9uIHB1c2hBdHRyaWJ1dGVzKHhtbCwgYXR0cmlidXRlcykg
ewogIGlmIChhdHRyaWJ1dGVzKSB7CiAgICBfLmVhY2goYXR0cmlidXRlcywgZnVuY3Rpb24gKHZhbHVlLCBuYW1lKSB7CiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcHVzaEF0dHJpYnV0ZSh4bWwsIG5hbWUsIHZhbHVlKTsKICAgICAgfQogICAgfSk7CiAgfQp9Cgp2YXIgWG1sU3RyZWFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBYbWxTdHJlYW0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWG1sU3RyZWFtKTsKCiAgICB0aGlzLl94bWwgPSBbXTsKICAgIHRo
aXMuX3N0YWNrID0gW107CiAgICB0aGlzLl9yb2xsYmFja3MgPSBbXTsKICB9CgogIF9jcmVhdGVDbGFzcyhYbWxTdHJlYW0sIFt7CiAgICBrZXk6ICJvcGVuWG1sIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuWG1sKGRvY0F0dHJpYnV0ZXMpIHsKICAgICAgdmFyIHhtbCA9IHRoaXMuX3htbDsgLy8gPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/PgoKICAgICAgeG1sLnB1c2goJzw/eG1sJyk7CiAgICAgIHB1c2hBdHRyaWJ1dGVzKHhtbCwgZG9jQXR0cmlidXRlcyk7CiAgICAg
IHhtbC5wdXNoKCc/PlxuJyk7CiAgICB9CiAgfSwgewogICAga2V5OiAib3Blbk5vZGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW5Ob2RlKG5hbWUsIGF0dHJpYnV0ZXMpIHsKICAgICAgdmFyIHBhcmVudCA9IHRoaXMudG9zOwogICAgICB2YXIgeG1sID0gdGhpcy5feG1sOwoKICAgICAgaWYgKHBhcmVudCAmJiB0aGlzLm9wZW4pIHsKICAgICAgICB4bWwucHVzaChDTE9TRV9BTkdMRSk7CiAgICAgIH0KCiAgICAgIHRoaXMuX3N0YWNrLnB1c2gobmFtZSk7IC8vIHN0YXJ0IHN0cmVhbWluZyBub2RlCgoKICAgICAgeG1sLnB1
c2goT1BFTl9BTkdMRSk7CiAgICAgIHhtbC5wdXNoKG5hbWUpOwogICAgICBwdXNoQXR0cmlidXRlcyh4bWwsIGF0dHJpYnV0ZXMpOwogICAgICB0aGlzLmxlYWYgPSB0cnVlOwogICAgICB0aGlzLm9wZW4gPSB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZEF0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7CiAgICAgIGlmICghdGhpcy5vcGVuKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgd3JpdGUgYXR0cmlidXRlcyB0byBub2RlIGlmIGl0IGlz
IG5vdCBvcGVuJyk7CiAgICAgIH0KCiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcHVzaEF0dHJpYnV0ZSh0aGlzLl94bWwsIG5hbWUsIHZhbHVlKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImFkZEF0dHJpYnV0ZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEF0dHJpYnV0ZXMoYXR0cnMpIHsKICAgICAgaWYgKCF0aGlzLm9wZW4pIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB3cml0ZSBhdHRyaWJ1dGVzIHRvIG5vZGUgaWYgaXQgaXMgbm90IG9wZW4nKTsKICAgICAg
fQoKICAgICAgcHVzaEF0dHJpYnV0ZXModGhpcy5feG1sLCBhdHRycyk7CiAgICB9CiAgfSwgewogICAga2V5OiAid3JpdGVUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZVRleHQodGV4dCkgewogICAgICB2YXIgeG1sID0gdGhpcy5feG1sOwoKICAgICAgaWYgKHRoaXMub3BlbikgewogICAgICAgIHhtbC5wdXNoKENMT1NFX0FOR0xFKTsKICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy5sZWFmID0gZmFsc2U7CiAgICAgIHhtbC5wdXNoKHV0aWxzLnhtbEVuY29kZSh0ZXh0LnRvU3Ry
aW5nKCkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ3cml0ZVhtbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVYbWwoeG1sKSB7CiAgICAgIGlmICh0aGlzLm9wZW4pIHsKICAgICAgICB0aGlzLl94bWwucHVzaChDTE9TRV9BTkdMRSk7CgogICAgICAgIHRoaXMub3BlbiA9IGZhbHNlOwogICAgICB9CgogICAgICB0aGlzLmxlYWYgPSBmYWxzZTsKCiAgICAgIHRoaXMuX3htbC5wdXNoKHhtbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xvc2VOb2RlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZU5vZGUoKSB7CiAg
ICAgIHZhciBub2RlID0gdGhpcy5fc3RhY2sucG9wKCk7CgogICAgICB2YXIgeG1sID0gdGhpcy5feG1sOwoKICAgICAgaWYgKHRoaXMubGVhZikgewogICAgICAgIHhtbC5wdXNoKENMT1NFX1NMQVNIX0FOR0xFKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB4bWwucHVzaChPUEVOX0FOR0xFX1NMQVNIKTsKICAgICAgICB4bWwucHVzaChub2RlKTsKICAgICAgICB4bWwucHVzaChDTE9TRV9BTkdMRSk7CiAgICAgIH0KCiAgICAgIHRoaXMub3BlbiA9IGZhbHNlOwogICAgICB0aGlzLmxlYWYgPSBmYWxzZTsKICAgIH0KICB9LCB7
CiAgICBrZXk6ICJsZWFmTm9kZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbGVhZk5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCkgewogICAgICB0aGlzLm9wZW5Ob2RlKG5hbWUsIGF0dHJpYnV0ZXMpOwoKICAgICAgaWYgKHRleHQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIC8vIHplcm9zIG5lZWQgdG8gYmUgd3JpdHRlbgogICAgICAgIHRoaXMud3JpdGVUZXh0KHRleHQpOwogICAgICB9CgogICAgICB0aGlzLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNsb3NlQWxsIiwKICAgIHZhbHVlOiBmdW5jdGlv
biBjbG9zZUFsbCgpIHsKICAgICAgd2hpbGUgKHRoaXMuX3N0YWNrLmxlbmd0aCkgewogICAgICAgIHRoaXMuY2xvc2VOb2RlKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRSb2xsYmFjayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUm9sbGJhY2soKSB7CiAgICAgIHRoaXMuX3JvbGxiYWNrcy5wdXNoKHsKICAgICAgICB4bWw6IHRoaXMuX3htbC5sZW5ndGgsCiAgICAgICAgc3RhY2s6IHRoaXMuX3N0YWNrLmxlbmd0aCwKICAgICAgICBsZWFmOiB0aGlzLmxlYWYsCiAgICAgICAgb3BlbjogdGhpcy5vcGVu
CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbW1pdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tbWl0KCkgewogICAgICB0aGlzLl9yb2xsYmFja3MucG9wKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicm9sbGJhY2siLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJvbGxiYWNrKCkgewogICAgICB2YXIgciA9IHRoaXMuX3JvbGxiYWNrcy5wb3AoKTsKCiAgICAgIGlmICh0aGlzLl94bWwubGVuZ3RoID4gci54bWwpIHsKICAgICAgICB0aGlzLl94bWwuc3BsaWNlKHIu
eG1sLCB0aGlzLl94bWwubGVuZ3RoIC0gci54bWwpOwogICAgICB9CgogICAgICBpZiAodGhpcy5fc3RhY2subGVuZ3RoID4gci5zdGFjaykgewogICAgICAgIHRoaXMuX3N0YWNrLnNwbGljZShyLnN0YWNrLCB0aGlzLl9zdGFjay5sZW5ndGggLSByLnN0YWNrKTsKICAgICAgfQoKICAgICAgdGhpcy5sZWFmID0gci5sZWFmOwogICAgICB0aGlzLm9wZW4gPSByLm9wZW47CiAgICB9CiAgfSwgewogICAga2V5OiAidG9zIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc3RhY2subGVuZ3RoID8g
dGhpcy5fc3RhY2tbdGhpcy5fc3RhY2subGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3Vyc29yIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAvLyBoYW5keSB3YXkgdG8gdHJhY2sgd2hldGhlciBhbnl0aGluZyBoYXMgYmVlbiBhZGRlZAogICAgICByZXR1cm4gdGhpcy5feG1sLmxlbmd0aDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ4bWwiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHRoaXMuY2xvc2VBbGwoKTsKICAgICAgcmV0dXJuIHRoaXMuX3htbC5q
b2luKCcnKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBYbWxTdHJlYW07Cn0oKTsKClhtbFN0cmVhbS5TdGREb2NBdHRyaWJ1dGVzID0gewogIHZlcnNpb246ICcxLjAnLAogIGVuY29kaW5nOiAnVVRGLTgnLAogIHN0YW5kYWxvbmU6ICd5ZXMnCn07Cm1vZHVsZS5leHBvcnRzID0gWG1sU3RyZWFtOwoKfSx7Ii4vdW5kZXItZGFzaCI6MjUsIi4vdXRpbHMiOjI2fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9i
aikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJv
dG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVl
KS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0
aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVz
KHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlv
biBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNs
YXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVu
Y3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwo
KSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5j
dGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVy
KCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUs
IFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIGV2ZW50cyA9IHJlcXVpcmUoJ2V2
ZW50cycpOwoKdmFyIEpTWmlwID0gcmVxdWlyZSgnanN6aXAnKTsKCnZhciBTdHJlYW1CdWYgPSByZXF1aXJlKCcuL3N0cmVhbS1idWYnKTsKCnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vYnJvd3Nlci1idWZmZXItZW5jb2RlJyksCiAgICBzdHJpbmdUb0J1ZmZlciA9IF9yZXF1aXJlLnN0cmluZ1RvQnVmZmVyOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBUaGUgWmlwV3JpdGVyIGNsYXNzCi8vIFBhY2tzIHN0cmVhbWVk
IGRhdGEgaW50byBhbiBvdXRwdXQgemlwIHN0cmVhbQoKCnZhciBaaXBXcml0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9ldmVudHMkRXZlbnRFbWl0dGVyKSB7CiAgX2luaGVyaXRzKFppcFdyaXRlciwgX2V2ZW50cyRFdmVudEVtaXR0ZXIpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFppcFdyaXRlcik7CgogIGZ1bmN0aW9uIFppcFdyaXRlcihvcHRpb25zKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFppcFdyaXRlcik7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlz
KTsKICAgIF90aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsKICAgICAgdHlwZTogJ25vZGVidWZmZXInLAogICAgICBjb21wcmVzc2lvbjogJ0RFRkxBVEUnCiAgICB9LCBvcHRpb25zKTsKICAgIF90aGlzLnppcCA9IG5ldyBKU1ppcCgpOwogICAgX3RoaXMuc3RyZWFtID0gbmV3IFN0cmVhbUJ1ZigpOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFppcFdyaXRlciwgW3sKICAgIGtleTogImFwcGVuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kKGRhdGEsIG9wdGlvbnMpIHsKICAgICAgaWYg
KG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2Jhc2U2NCcpICYmIG9wdGlvbnMuYmFzZTY0KSB7CiAgICAgICAgdGhpcy56aXAuZmlsZShvcHRpb25zLm5hbWUsIGRhdGEsIHsKICAgICAgICAgIGJhc2U2NDogdHJ1ZQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3Byb2Nlc3MKICAgICAgICBpZiAocHJvY2Vzcy5icm93c2VyICYmIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgewogICAgICAgICAgLy8gdXNlIFRleHRFbmNvZGVyIGluIGJyb3dzZXIKICAg
ICAgICAgIGRhdGEgPSBzdHJpbmdUb0J1ZmZlcihkYXRhKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuemlwLmZpbGUob3B0aW9ucy5uYW1lLCBkYXRhKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImZpbmFsaXplIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZmluYWxpemUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGNvbnRlbnQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJh
dG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy56aXAuZ2VuZXJhdGVBc3luYyh0aGlzLm9wdGlvbnMpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBjb250ZW50ID0gX2NvbnRleHQuc2Vu
dDsKICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtLmVuZChjb250ZW50KTsKICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZmluaXNoJyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmaW5hbGl6ZSgpIHsKICAgICAgICByZXR1cm4gX2ZpbmFsaXplLmFwcGx5KHRoaXMs
IGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmaW5hbGl6ZTsKICAgIH0oKSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gU3RyZWFtLlJlYWRhYmxlIGludGVyZmFjZQoKICB9LCB7CiAgICBrZXk6ICJyZWFkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKHNpemUpIHsKICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnJlYWQoc2l6ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0RW5jb2RpbmciLAogICAg
dmFsdWU6IGZ1bmN0aW9uIHNldEVuY29kaW5nKGVuY29kaW5nKSB7CiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5zZXRFbmNvZGluZyhlbmNvZGluZyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGF1c2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkgewogICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucGF1c2UoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXN1bWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnJlc3VtZSgpOwogICAgfQogIH0sIHsKICAgIGtl
eTogImlzUGF1c2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1BhdXNlZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLmlzUGF1c2VkKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGlwZShkZXN0aW5hdGlvbiwgb3B0aW9ucykgewogICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucGlwZShkZXN0aW5hdGlvbiwgb3B0aW9ucyk7CiAgICB9CiAgfSwgewogICAga2V5OiAidW5waXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnBpcGUoZGVzdGluYXRpb24pIHsKICAgICAgcmV0
dXJuIHRoaXMuc3RyZWFtLnVucGlwZShkZXN0aW5hdGlvbik7CiAgICB9CiAgfSwgewogICAga2V5OiAidW5zaGlmdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zaGlmdChjaHVuaykgewogICAgICByZXR1cm4gdGhpcy5zdHJlYW0udW5zaGlmdChjaHVuayk7CiAgICB9CiAgfSwgewogICAga2V5OiAid3JhcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gd3JhcChzdHJlYW0pIHsKICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyYXAoc3RyZWFtKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBaaXBXcml0ZXI7Cn0oZXZlbnRzLkV2ZW50
RW1pdHRlcik7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgWmlwV3JpdGVyOiBaaXBXcml0ZXIKfTsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKQoKfSx7Ii4vYnJvd3Nlci1idWZmZXItZW5jb2RlIjoxNywiLi9zdHJlYW0tYnVmIjoyMywiX3Byb2Nlc3MiOjM1OCwiZXZlbnRzIjoyNTgsImpzemlwIjoyOTB9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0
cyl7CiJ1c2Ugc3RyaWN0IjsKCm1vZHVsZS5leHBvcnRzID0gewogIDA6IHsKICAgIGY6ICdHZW5lcmFsJwogIH0sCiAgMTogewogICAgZjogJzAnCiAgfSwKICAyOiB7CiAgICBmOiAnMC4wMCcKICB9LAogIDM6IHsKICAgIGY6ICcjLCMjMCcKICB9LAogIDQ6IHsKICAgIGY6ICcjLCMjMC4wMCcKICB9LAogIDk6IHsKICAgIGY6ICcwJScKICB9LAogIDEwOiB7CiAgICBmOiAnMC4wMCUnCiAgfSwKICAxMTogewogICAgZjogJzAuMDBFKzAwJwogIH0sCiAgMTI6IHsKICAgIGY6ICcjID8vPycKICB9LAogIDEzOiB7CiAgICBmOiAn
IyA/Py8/PycKICB9LAogIDE0OiB7CiAgICBmOiAnbW0tZGQteXknCiAgfSwKICAxNTogewogICAgZjogJ2QtbW1tLXl5JwogIH0sCiAgMTY6IHsKICAgIGY6ICdkLW1tbScKICB9LAogIDE3OiB7CiAgICBmOiAnbW1tLXl5JwogIH0sCiAgMTg6IHsKICAgIGY6ICdoOm1tIEFNL1BNJwogIH0sCiAgMTk6IHsKICAgIGY6ICdoOm1tOnNzIEFNL1BNJwogIH0sCiAgMjA6IHsKICAgIGY6ICdoOm1tJwogIH0sCiAgMjE6IHsKICAgIGY6ICdoOm1tOnNzJwogIH0sCiAgMjI6IHsKICAgIGY6ICdtL2QveXkgImgiOm1tJwogIH0sCiAgMjc6
IHsKICAgICd6aC10dyc6ICdbJC00MDRdZS9tL2QnLAogICAgJ3poLWNuJzogJ3l5eXki5bm0Im0i5pyIIicsCiAgICAnamEtanAnOiAnWyQtNDExXWdlLm0uZCcsCiAgICAna28ta3InOiAneXl5eSLlubQiIG1tIuaciCIgZGQi5pelIicKICB9LAogIDI4OiB7CiAgICAnemgtdHcnOiAnWyQtNDA0XWUi5bm0Im0i5pyIImQi5pelIicsCiAgICAnemgtY24nOiAnbSLmnIgiZCLml6UiJywKICAgICdqYS1qcCc6ICdbJC00MTFdZ2dnZSLlubQibSLmnIgiZCLml6UiJywKICAgICdrby1rcic6ICdtbS1kZCcKICB9LAogIDI5OiB7CiAg
ICAnemgtdHcnOiAnWyQtNDA0XWUi5bm0Im0i5pyIImQi5pelIicsCiAgICAnemgtY24nOiAnbSLmnIgiZCLml6UiJywKICAgICdqYS1qcCc6ICdbJC00MTFdZ2dnZSLlubQibSLmnIgiZCLml6UiJywKICAgICdrby1rcic6ICdtbS1kZCcKICB9LAogIDMwOiB7CiAgICAnemgtdHcnOiAnbS9kL3l5ICcsCiAgICAnemgtY24nOiAnbS1kLXl5JywKICAgICdqYS1qcCc6ICdtL2QveXknLAogICAgJ2tvLWtyJzogJ21tLWRkLXl5JwogIH0sCiAgMzE6IHsKICAgICd6aC10dyc6ICd5eXl5IuW5tCJtIuaciCJkIuaXpSInLAogICAgJ3po
LWNuJzogJ3l5eXki5bm0Im0i5pyIImQi5pelIicsCiAgICAnamEtanAnOiAneXl5eSLlubQibSLmnIgiZCLml6UiJywKICAgICdrby1rcic6ICd5eXl5IuuFhCIgbW0i7JuUIiBkZCLsnbwiJwogIH0sCiAgMzI6IHsKICAgICd6aC10dyc6ICdoaCLmmYIibW0i5YiGIicsCiAgICAnemgtY24nOiAnaCLml7YibW0i5YiGIicsCiAgICAnamEtanAnOiAnaCLmmYIibW0i5YiGIicsCiAgICAna28ta3InOiAnaCLsi5wiIG1tIuu2hCInCiAgfSwKICAzMzogewogICAgJ3poLXR3JzogJ2hoIuaZgiJtbSLliIYic3Mi56eSIicsCiAgICAn
emgtY24nOiAnaCLml7YibW0i5YiGInNzIuenkiInLAogICAgJ2phLWpwJzogJ2gi5pmCIm1tIuWIhiJzcyLnp5IiJywKICAgICdrby1rcic6ICdoIuyLnCIgbW0i67aEIiBzcyLstIgiJwogIH0sCiAgMzQ6IHsKICAgICd6aC10dyc6ICfkuIrljYgv5LiL5Y2IIGhoIuaZgiJtbSLliIYiJywKICAgICd6aC1jbic6ICfkuIrljYgv5LiL5Y2IIGgi5pe2Im1tIuWIhiInLAogICAgJ2phLWpwJzogJ3l5eXki5bm0Im0i5pyIIicsCiAgICAna28ta3InOiAneXl5eS1tbS1kZCcKICB9LAogIDM1OiB7CiAgICAnemgtdHcnOiAn5LiK5Y2I
L+S4i+WNiCBoaCLmmYIibW0i5YiGInNzIuenkiInLAogICAgJ3poLWNuJzogJ+S4iuWNiC/kuIvljYggaCLml7YibW0i5YiGInNzIuenkiInLAogICAgJ2phLWpwJzogJ20i5pyIImQi5pelIicsCiAgICAna28ta3InOiAneXl5eS1tbS1kZCcKICB9LAogIDM2OiB7CiAgICAnemgtdHcnOiAnWyQtNDA0XWUvbS9kJywKICAgICd6aC1jbic6ICd5eXl5IuW5tCJtIuaciCInLAogICAgJ2phLWpwJzogJ1skLTQxMV1nZS5tLmQnLAogICAgJ2tvLWtyJzogJ3l5eXki5bm0IiBtbSLmnIgiIGRkIuaXpSInCiAgfSwKICAzNzogewogICAg
ZjogJyMsIyMwIDsoIywjIzApJwogIH0sCiAgMzg6IHsKICAgIGY6ICcjLCMjMCA7W1JlZF0oIywjIzApJwogIH0sCiAgMzk6IHsKICAgIGY6ICcjLCMjMC4wMCA7KCMsIyMwLjAwKScKICB9LAogIDQwOiB7CiAgICBmOiAnIywjIzAuMDAgO1tSZWRdKCMsIyMwLjAwKScKICB9LAogIDQ1OiB7CiAgICBmOiAnbW06c3MnCiAgfSwKICA0NjogewogICAgZjogJ1toXTptbTpzcycKICB9LAogIDQ3OiB7CiAgICBmOiAnbW1zcy4wJwogIH0sCiAgNDg6IHsKICAgIGY6ICcjIzAuMEUrMCcKICB9LAogIDQ5OiB7CiAgICBmOiAnQCcKICB9
LAogIDUwOiB7CiAgICAnemgtdHcnOiAnWyQtNDA0XWUvbS9kJywKICAgICd6aC1jbic6ICd5eXl5IuW5tCJtIuaciCInLAogICAgJ2phLWpwJzogJ1skLTQxMV1nZS5tLmQnLAogICAgJ2tvLWtyJzogJ3l5eXki5bm0IiBtbSLmnIgiIGRkIuaXpSInCiAgfSwKICA1MTogewogICAgJ3poLXR3JzogJ1skLTQwNF1lIuW5tCJtIuaciCJkIuaXpSInLAogICAgJ3poLWNuJzogJ20i5pyIImQi5pelIicsCiAgICAnamEtanAnOiAnWyQtNDExXWdnZ2Ui5bm0Im0i5pyIImQi5pelIicsCiAgICAna28ta3InOiAnbW0tZGQnCiAgfSwKICA1
MjogewogICAgJ3poLXR3JzogJ+S4iuWNiC/kuIvljYggaGgi5pmCIm1tIuWIhiInLAogICAgJ3poLWNuJzogJ3l5eXki5bm0Im0i5pyIIicsCiAgICAnamEtanAnOiAneXl5eSLlubQibSLmnIgiJywKICAgICdrby1rcic6ICd5eXl5LW1tLWRkJwogIH0sCiAgNTM6IHsKICAgICd6aC10dyc6ICfkuIrljYgv5LiL5Y2IIGhoIuaZgiJtbSLliIYic3Mi56eSIicsCiAgICAnemgtY24nOiAnbSLmnIgiZCLml6UiJywKICAgICdqYS1qcCc6ICdtIuaciCJkIuaXpSInLAogICAgJ2tvLWtyJzogJ3l5eXktbW0tZGQnCiAgfSwKICA1NDog
ewogICAgJ3poLXR3JzogJ1skLTQwNF1lIuW5tCJtIuaciCJkIuaXpSInLAogICAgJ3poLWNuJzogJ20i5pyIImQi5pelIicsCiAgICAnamEtanAnOiAnWyQtNDExXWdnZ2Ui5bm0Im0i5pyIImQi5pelIicsCiAgICAna28ta3InOiAnbW0tZGQnCiAgfSwKICA1NTogewogICAgJ3poLXR3JzogJ+S4iuWNiC/kuIvljYggaGgi5pmCIm1tIuWIhiInLAogICAgJ3poLWNuJzogJ+S4iuWNiC/kuIvljYggaCLml7YibW0i5YiGIicsCiAgICAnamEtanAnOiAneXl5eSLlubQibSLmnIgiJywKICAgICdrby1rcic6ICd5eXl5LW1tLWRkJwog
IH0sCiAgNTY6IHsKICAgICd6aC10dyc6ICfkuIrljYgv5LiL5Y2IIGhoIuaZgiJtbSLliIYic3Mi56eSIicsCiAgICAnemgtY24nOiAn5LiK5Y2IL+S4i+WNiCBoIuaXtiJtbSLliIYic3Mi56eSIicsCiAgICAnamEtanAnOiAnbSLmnIgiZCLml6UiJywKICAgICdrby1rcic6ICd5eXl5LW1tLWRkJwogIH0sCiAgNTc6IHsKICAgICd6aC10dyc6ICdbJC00MDRdZS9tL2QnLAogICAgJ3poLWNuJzogJ3l5eXki5bm0Im0i5pyIIicsCiAgICAnamEtanAnOiAnWyQtNDExXWdlLm0uZCcsCiAgICAna28ta3InOiAneXl5eSLlubQiIG1t
IuaciCIgZGQi5pelIicKICB9LAogIDU4OiB7CiAgICAnemgtdHcnOiAnWyQtNDA0XWUi5bm0Im0i5pyIImQi5pelIicsCiAgICAnemgtY24nOiAnbSLmnIgiZCLml6UiJywKICAgICdqYS1qcCc6ICdbJC00MTFdZ2dnZSLlubQibSLmnIgiZCLml6UiJywKICAgICdrby1rcic6ICdtbS1kZCcKICB9LAogIDU5OiB7CiAgICAndGgtdGgnOiAndDAnCiAgfSwKICA2MDogewogICAgJ3RoLXRoJzogJ3QwLjAwJwogIH0sCiAgNjE6IHsKICAgICd0aC10aCc6ICd0IywjIzAnCiAgfSwKICA2MjogewogICAgJ3RoLXRoJzogJ3QjLCMjMC4w
MCcKICB9LAogIDY3OiB7CiAgICAndGgtdGgnOiAndDAlJwogIH0sCiAgNjg6IHsKICAgICd0aC10aCc6ICd0MC4wMCUnCiAgfSwKICA2OTogewogICAgJ3RoLXRoJzogJ3QjID8vPycKICB9LAogIDcwOiB7CiAgICAndGgtdGgnOiAndCMgPz8vPz8nCiAgfSwKICA4MTogewogICAgJ3RoLXRoJzogJ2QvbS9iYicKICB9Cn07Cgp9LHt9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCm1vZHVsZS5leHBvcnRzID0gewogIE9mZmljZURvY3VtZW50OiAnaHR0cDovL3NjaGVtYXMub3Bl
bnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9vZmZpY2VEb2N1bWVudCcsCiAgV29ya3NoZWV0OiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy93b3Jrc2hlZXQnLAogIENhbGNDaGFpbjogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvY2FsY0NoYWluJywKICBTaGFyZWRTdHJpbmdzOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1h
dHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9zaGFyZWRTdHJpbmdzJywKICBTdHlsZXM6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3N0eWxlcycsCiAgVGhlbWU6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3RoZW1lJywKICBIeXBlcmxpbms6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9y
ZWxhdGlvbnNoaXBzL2h5cGVybGluaycsCiAgSW1hZ2U6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2ltYWdlJywKICBDb3JlUHJvcGVydGllczogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwcy9tZXRhZGF0YS9jb3JlLXByb3BlcnRpZXMnLAogIEV4dGVuZGVyUHJvcGVydGllczogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0
aW9uc2hpcHMvZXh0ZW5kZWQtcHJvcGVydGllcycsCiAgQ29tbWVudHM6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2NvbW1lbnRzJywKICBWbWxEcmF3aW5nOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy92bWxEcmF3aW5nJywKICBUYWJsZTogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvdGFi
bGUnCn07Cgp9LHt9XSwzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdDsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJ1bmRlZmluZWQiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5n
dGggPT09ICJudW1iZXIiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNl
LlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9l
MikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9i
amVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9B
cnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNh
dGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBm
dW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29u
c3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRv
cikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25z
dHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2FzeW5jSXRlcmF0b3IoaXRlcmFibGUpIHsgdmFyIG1ldGhvZDsgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiKSB7IGlmIChTeW1ib2wuYXN5bmNJdGVyYXRvcikgeyBtZXRob2QgPSBpdGVyYWJsZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl07IGlmIChtZXRob2QgIT0gbnVsbCkgcmV0dXJuIG1ldGhvZC5jYWxsKGl0ZXJhYmxlKTsgfSBpZiAoU3ltYm9sLml0ZXJhdG9yKSB7IG1ldGhvZCA9IGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl07IGlmIChtZXRob2QgIT0gbnVsbCkgcmV0
dXJuIG1ldGhvZC5jYWxsKGl0ZXJhYmxlKTsgfSB9IHRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdCBpcyBub3QgYXN5bmMgaXRlcmFibGUiKTsgfQoKdmFyIHBhcnNlU2F4ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcGFyc2Utc2F4Jyk7Cgp2YXIgWG1sU3RyZWFtID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMveG1sLXN0cmVhbScpOwovKiAndmlydHVhbCcgbWV0aG9kcyB1c2VkIGFzIGEgZm9ybSBvZiBkb2N1bWVudGF0aW9uICovCgovKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovCi8vIEJhc2UgY2xh
c3MgZm9yIFhmb3JtcwoKCnZhciBCYXNlWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEJhc2VYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlWGZvcm0pOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEJhc2VYZm9ybSwgW3sKICAgIGtleTogInByZXBhcmUiLAogICAgLy8gY29uc3RydWN0b3IoLyogbW9kZWwsIG5hbWUgKi8pIHt9CiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIFZpcnR1YWwg
SW50ZXJmYWNlCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZSgpCiAgICAvKiBtb2RlbCwgb3B0aW9ucyAqLwogICAgey8vIG9wdGlvbmFsIHByZXBhcmF0aW9uIChtdXRhdGlvbikgb2YgbW9kZWwgc28gaXQgaXMgcmVhZHkgZm9yIHdyaXRlCiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKQogICAgLyogeG1sU3RyZWFtLCBtb2RlbCAqLwogICAgey8vIGNvbnZlcnQgbW9kZWwgdG8geG1sCiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVl
OiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgey8vIFhNTCBub2RlIG9wZW5lZAogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsvLyBjaHVuayBvZiB0ZXh0IGVuY291bnRlcmVkIGZvciBjdXJyZW50IG5vZGUKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsvLyBYTUwgbm9kZSBjbG9zZWQKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGUiLAogICAgdmFs
dWU6IGZ1bmN0aW9uIHJlY29uY2lsZShtb2RlbCwgb3B0aW9ucykgey8vIG9wdGlvbmFsIHBvc3QtcGFyc2Ugc3RlcCAob3Bwb3NpdGUgdG8gcHJlcGFyZSkKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgogIH0sIHsKICAgIGtleTogInJlc2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHsKICAgICAgLy8gdG8gbWFrZSBzdXJlIHBhcnNlcyBkb24ndCBibGVlZCB0byBuZXh0IGl0ZXJhdGlvbgogICAgICB0aGlzLm1vZGVsID0gbnVsbDsg
Ly8gaWYgd2UgaGF2ZSBhIG1hcCAtIHJlc2V0IHRoZW0gdG9vCgogICAgICBpZiAodGhpcy5tYXApIHsKICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMubWFwKS5mb3JFYWNoKGZ1bmN0aW9uICh4Zm9ybSkgewogICAgICAgICAgaWYgKHhmb3JtIGluc3RhbmNlb2YgQmFzZVhmb3JtKSB7CiAgICAgICAgICAgIHhmb3JtLnJlc2V0KCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHhmb3JtLnhmb3JtKSB7CiAgICAgICAgICAgIHhmb3JtLnhmb3JtLnJlc2V0KCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9
LCB7CiAgICBrZXk6ICJtZXJnZU1vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtZXJnZU1vZGVsKG9iaikgewogICAgICAvLyBzZXQgb2JqJ3MgcHJvcHMgdG8gdGhpcy5tb2RlbAogICAgICB0aGlzLm1vZGVsID0gT2JqZWN0LmFzc2lnbih0aGlzLm1vZGVsIHx8IHt9LCBvYmopOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcGFyc2UgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9u
IF9jYWxsZWUoc2F4UGFyc2VyKSB7CiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24sIF9kaWRJdGVyYXRvckVycm9yLCBfaXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yLCBfc3RlcCwgX3ZhbHVlLCBldmVudHMsIF9pdGVyYXRvcjIsIF9zdGVwMiwgX3N0ZXAyJHZhbHVlLCBldmVudFR5cGUsIHZhbHVlOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRl
eHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9pdGVyYXRvciA9IF9hc3luY0l0ZXJhdG9yKHNheFBhcnNlcik7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAg
ICAgICAgcmV0dXJuIF9pdGVyYXRvci5uZXh0KCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9zdGVwID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSBfc3RlcC5kb25lOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIF9zdGVwLnZhbHVlOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX3ZhbHVlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAg
ICBpZiAoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbikgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGV2ZW50cyA9IF92YWx1ZTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihldmVudHMpOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE0OwoKICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIucygpOwoKICAgICAgICAgICAgICBj
YXNlIDE2OgogICAgICAgICAgICAgICAgaWYgKChfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9zdGVwMiR2YWx1ZSA9IF9zdGVwMi52YWx1ZSwgZXZlbnRUeXBlID0gX3N0ZXAyJHZhbHVlLmV2ZW50VHlwZSwgdmFsdWUgPSBfc3RlcDIkdmFsdWUudmFsdWU7CgogICAgICAgICAgICAgICAgaWYgKCEoZXZlbnRUeXBlID09PSAnb3BlbnRhZycp
KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5wYXJzZU9wZW4odmFsdWUpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI5OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICBpZiAoIShldmVudFR5cGUgPT09ICd0ZXh0JykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI2OwogICAgICAg
ICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlVGV4dCh2YWx1ZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGlmICghKGV2ZW50VHlwZSA9PT0gJ2Nsb3NldGFnJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAg
ICAgICAgICBpZiAodGhpcy5wYXJzZUNsb3NlKHZhbHVlLm5hbWUpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgdGhpcy5tb2RlbCk7CgogICAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAg
ICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDMzOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDMzOwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxNCk7CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5lKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAzNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAzNjsKCiAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLmYo
KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDM2KTsKCiAgICAgICAgICAgICAgY2FzZSAzOToKICAgICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA0MjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0ODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDQ0OgogICAgICAgICAgICAg
ICAgX2NvbnRleHQucHJldiA9IDQ0OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gX2NvbnRleHQudDE7CgogICAgICAgICAgICAgIGNhc2UgNDg6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNDg7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNDk7CgogICAgICAgICAgICAgICAgaWYgKCEoIV9pdGVyYXRvck5vcm1hbENv
bXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1MzsKICAgICAgICAgICAgICAgIHJldHVybiBfaXRlcmF0b3IucmV0dXJuKCk7CgogICAgICAgICAgICAgIGNhc2UgNTM6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNTM7CgogICAgICAgICAgICAgICAgaWYgKCFfZGlkSXRlcmF0b3JFcnJv
cikgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOwoKICAgICAgICAgICAgICBjYXNlIDU2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCg1Myk7CgogICAgICAgICAgICAgIGNhc2UgNTc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDQ4KTsKCiAgICAgICAgICAgICAgY2FzZSA1ODoKICAgICAgICAgICAgICAg
IHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMubW9kZWwpOwoKICAgICAgICAgICAgICBjYXNlIDU5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1syLCA0NCwgNDgsIDU4XSwgWzE0LCAzMywgMzYsIDM5XSwgWzQ5LCwgNTMsIDU3XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBwYXJzZShfeCkgewogICAgICAgIHJldHVybiBfcGFy
c2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBhcnNlOwogICAgfSgpCiAgfSwgewogICAga2V5OiAicGFyc2VTdHJlYW0iLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9wYXJzZVN0cmVhbSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoc3RyZWFtKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsK
ICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB0aGlzLnBhcnNlKHBhcnNlU2F4KHN0cmVhbSkpKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAg
ICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcGFyc2VTdHJlYW0oX3gyKSB7CiAgICAgICAgcmV0dXJuIF9wYXJzZVN0cmVhbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcGFyc2VTdHJlYW07CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJ0b1htbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9YbWwobW9kZWwpIHsKICAgICAgdmFyIHhtbFN0cmVhbSA9IG5ldyBYbWxTdHJlYW0oKTsKICAgICAgdGhpcy5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCk7
CiAgICAgIHJldHVybiB4bWxTdHJlYW0ueG1sOwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vIFVzZWZ1bCBVdGlsaXRpZXMKCiAgfSwgewogICAga2V5OiAieG1sIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAvLyBjb252ZW5pZW5jZSBmdW5jdGlvbiB0byBnZXQgdGhlIHhtbCBvZiB0aGlzLm1vZGVsCiAgICAgIC8vIHVzZWZ1bCBmb3IgbWFuYWdlciB0eXBlcyB0aGF0IGFyZSBidWlsdCBkdXJpbmcgdGhlIHByZXBhcmUg
cGhhc2UKICAgICAgcmV0dXJuIHRoaXMudG9YbWwodGhpcy5tb2RlbCk7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJ0b0F0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9BdHRyaWJ1dGUodmFsdWUsIGRmbHQpIHsKICAgICAgdmFyIGFsd2F5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7CgogICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChhbHdheXMpIHsKICAgICAgICAgIHJldHVybiBkZmx0
OwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChhbHdheXMgfHwgdmFsdWUgIT09IGRmbHQpIHsKICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b1N0cmluZ0F0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmdBdHRyaWJ1dGUodmFsdWUsIGRmbHQpIHsKICAgICAgdmFyIGFsd2F5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRz
WzJdIDogZmFsc2U7CiAgICAgIHJldHVybiBCYXNlWGZvcm0udG9BdHRyaWJ1dGUodmFsdWUsIGRmbHQsIGFsd2F5cyk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9TdHJpbmdWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmdWYWx1ZShhdHRyLCBkZmx0KSB7CiAgICAgIHJldHVybiBhdHRyID09PSB1bmRlZmluZWQgPyBkZmx0IDogYXR0cjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b0Jvb2xBdHRyaWJ1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvQm9vbEF0dHJpYnV0ZSh2YWx1ZSwgZGZsdCkgewogICAg
ICB2YXIgYWx3YXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGFsd2F5cykgewogICAgICAgICAgcmV0dXJuIGRmbHQ7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGFsd2F5cyB8fCB2YWx1ZSAhPT0gZGZsdCkgewogICAgICAgIHJldHVybiB2YWx1ZSA/ICcxJyA6ICcwJzsKICAgICAgfQoKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9
LCB7CiAgICBrZXk6ICJ0b0Jvb2xWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9Cb29sVmFsdWUoYXR0ciwgZGZsdCkgewogICAgICByZXR1cm4gYXR0ciA9PT0gdW5kZWZpbmVkID8gZGZsdCA6IGF0dHIgPT09ICcxJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b0ludEF0dHJpYnV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9JbnRBdHRyaWJ1dGUodmFsdWUsIGRmbHQpIHsKICAgICAgdmFyIGFsd2F5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRz
WzJdIDogZmFsc2U7CiAgICAgIHJldHVybiBCYXNlWGZvcm0udG9BdHRyaWJ1dGUodmFsdWUsIGRmbHQsIGFsd2F5cyk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9JbnRWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9JbnRWYWx1ZShhdHRyLCBkZmx0KSB7CiAgICAgIHJldHVybiBhdHRyID09PSB1bmRlZmluZWQgPyBkZmx0IDogcGFyc2VJbnQoYXR0ciwgMTApOwogICAgfQogIH0sIHsKICAgIGtleTogInRvRmxvYXRBdHRyaWJ1dGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvRmxvYXRBdHRyaWJ1dGUodmFsdWUsIGRm
bHQpIHsKICAgICAgdmFyIGFsd2F5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7CiAgICAgIHJldHVybiBCYXNlWGZvcm0udG9BdHRyaWJ1dGUodmFsdWUsIGRmbHQsIGFsd2F5cyk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9GbG9hdFZhbHVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0Zsb2F0VmFsdWUoYXR0ciwgZGZsdCkgewogICAgICByZXR1cm4gYXR0ciA9PT0gdW5kZWZpbmVkID8gZGZsdCA6IHBhcnNlRmxvYXQoYXR0cik7
CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQmFzZVhmb3JtOwp9KCk7Cgptb2R1bGUuZXhwb3J0cyA9IEJhc2VYZm9ybTsKCn0seyIuLi8uLi91dGlscy9wYXJzZS1zYXgiOjIxLCIuLi8uLi91dGlscy94bWwtc3RyZWFtIjoyN31dLDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5
bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENv
bnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29u
ZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0
aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJv
dG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBl
T2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0
cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5p
dGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlm
IChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3Rv
dHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBjb2xDYWNoZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL2NvbC1jYWNoZScpOwoKdmFyIERlZmluZWROYW1lc1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKERlZmluZWROYW1l
c1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEZWZpbmVkTmFtZXNYZm9ybSk7CgogIGZ1bmN0aW9uIERlZmluZWROYW1lc1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlZmluZWROYW1lc1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRGVmaW5lZE5hbWVzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7
CiAgICAgIC8vIDxkZWZpbmVkTmFtZXM+CiAgICAgIC8vICAgPGRlZmluZWROYW1lIG5hbWU9Im5hbWUiPm5hbWUucmFuZ2VzLmpvaW4oJywnKTwvZGVmaW5lZE5hbWU+CiAgICAgIC8vICAgPGRlZmluZWROYW1lIG5hbWU9Il94bG5tLlByaW50X0FyZWEiIGxvY2FsU2hlZXRJZD0iMCI+bmFtZS5yYW5nZXMuam9pbignLCcpPC9kZWZpbmVkTmFtZT4KICAgICAgLy8gPC9kZWZpbmVkTmFtZXM+CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnZGVmaW5lZE5hbWUnLCB7CiAgICAgICAgbmFtZTogbW9kZWwubmFtZSwKICAgICAgICBs
b2NhbFNoZWV0SWQ6IG1vZGVsLmxvY2FsU2hlZXRJZAogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLndyaXRlVGV4dChtb2RlbC5yYW5nZXMuam9pbignLCcpKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAgICAgICBjYXNlICdkZWZpbmVkTmFtZSc6CiAgICAgICAgICB0aGlzLl9wYXJzZWROYW1lID0gbm9kZS5hdHRyaWJ1dGVzLm5hbWU7
CiAgICAgICAgICB0aGlzLl9wYXJzZWRMb2NhbFNoZWV0SWQgPSBub2RlLmF0dHJpYnV0ZXMubG9jYWxTaGVldElkOwogICAgICAgICAgdGhpcy5fcGFyc2VkVGV4dCA9IFtdOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIHRoaXMuX3BhcnNlZFRleHQucHVzaCh0ZXh0KTsKICAgIH0KICB9LCB7CiAgICBr
ZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICB0aGlzLm1vZGVsID0gewogICAgICAgIG5hbWU6IHRoaXMuX3BhcnNlZE5hbWUsCiAgICAgICAgcmFuZ2VzOiBleHRyYWN0UmFuZ2VzKHRoaXMuX3BhcnNlZFRleHQuam9pbignJykpCiAgICAgIH07CgogICAgICBpZiAodGhpcy5fcGFyc2VkTG9jYWxTaGVldElkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLm1vZGVsLmxvY2FsU2hlZXRJZCA9IHBhcnNlSW50KHRoaXMuX3BhcnNlZExvY2FsU2hlZXRJZCwgMTApOwog
ICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRGVmaW5lZE5hbWVzWGZvcm07Cn0oQmFzZVhmb3JtKTsKCmZ1bmN0aW9uIGlzVmFsaWRSYW5nZShyYW5nZSkgewogIHRyeSB7CiAgICBjb2xDYWNoZS5kZWNvZGVFeChyYW5nZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9IGNhdGNoIChlcnIpIHsKICAgIHJldHVybiBmYWxzZTsKICB9Cn0KCmZ1bmN0aW9uIGV4dHJhY3RSYW5nZXMocGFyc2VkVGV4dCkgewogIHZhciByYW5nZXMgPSBbXTsKICB2YXIgcXVvdGVzT3BlbmVkID0gZmFsc2U7CiAg
dmFyIGxhc3QgPSAnJzsKICBwYXJzZWRUZXh0LnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgaWYgKCFpdGVtKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgcXVvdGVzID0gKGl0ZW0ubWF0Y2goLycvZykgfHwgW10pLmxlbmd0aDsKCiAgICBpZiAoIXF1b3RlcykgewogICAgICBpZiAocXVvdGVzT3BlbmVkKSB7CiAgICAgICAgbGFzdCArPSAiIi5jb25jYXQoaXRlbSwgIiwiKTsKICAgICAgfSBlbHNlIGlmIChpc1ZhbGlkUmFuZ2UoaXRlbSkpIHsKICAgICAgICByYW5nZXMucHVzaChpdGVt
KTsKICAgICAgfQoKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBxdW90ZXNFdmVuID0gcXVvdGVzICUgMiA9PT0gMDsKCiAgICBpZiAoIXF1b3Rlc09wZW5lZCAmJiBxdW90ZXNFdmVuICYmIGlzVmFsaWRSYW5nZShpdGVtKSkgewogICAgICByYW5nZXMucHVzaChpdGVtKTsKICAgIH0gZWxzZSBpZiAocXVvdGVzT3BlbmVkICYmICFxdW90ZXNFdmVuKSB7CiAgICAgIHF1b3Rlc09wZW5lZCA9IGZhbHNlOwoKICAgICAgaWYgKGlzVmFsaWRSYW5nZShsYXN0ICsgaXRlbSkpIHsKICAgICAgICByYW5nZXMucHVzaChsYXN0ICsg
aXRlbSk7CiAgICAgIH0KCiAgICAgIGxhc3QgPSAnJzsKICAgIH0gZWxzZSB7CiAgICAgIHF1b3Rlc09wZW5lZCA9IHRydWU7CiAgICAgIGxhc3QgKz0gIiIuY29uY2F0KGl0ZW0sICIsIik7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHJhbmdlczsKfQoKbW9kdWxlLmV4cG9ydHMgPSBEZWZpbmVkTmFtZXNYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy9jb2wtY2FjaGUiOjE5LCIuLi9iYXNlLXhmb3JtIjozMX1dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVv
ZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9s
LnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkr
KykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7
IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24g
bXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0
LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAo
aGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxs
ICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9p
c05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1
cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNl
LXhmb3JtJyk7Cgp2YXIgV29ya3NoZWV0WGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoV29ya3NoZWV0WGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFdvcmtzaGVldFhmb3JtKTsKCiAgZnVuY3Rpb24gV29ya3NoZWV0WGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV29ya3NoZWV0WGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhXb3Jrc2hl
ZXRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdzaGVldCcsIHsKICAgICAgICBzaGVldElkOiBtb2RlbC5pZCwKICAgICAgICBuYW1lOiBtb2RlbC5uYW1lLAogICAgICAgIHN0YXRlOiBtb2RlbC5zdGF0ZSwKICAgICAgICAncjppZCc6IG1vZGVsLnJJZAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2Rl
KSB7CiAgICAgIGlmIChub2RlLm5hbWUgPT09ICdzaGVldCcpIHsKICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgbmFtZTogdXRpbHMueG1sRGVjb2RlKG5vZGUuYXR0cmlidXRlcy5uYW1lKSwKICAgICAgICAgIGlkOiBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMuc2hlZXRJZCwgMTApLAogICAgICAgICAgc3RhdGU6IG5vZGUuYXR0cmlidXRlcy5zdGF0ZSwKICAgICAgICAgIHJJZDogbm9kZS5hdHRyaWJ1dGVzWydyOmlkJ10KICAgICAgICB9OwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1
cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBXb3Jrc2hlZXRYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBXb3Jrc2hlZXRYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy91dGlscyI6MjYsIi4uL2Jhc2UteGZvcm0iOjMx
fV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVv
ZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24g
X2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0
b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVu
Y3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1
cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3Jl
YXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJl
c3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGlu
aXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVj
dC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFz
ZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFdvcmtib29rQ2FsY1Byb3BlcnRpZXNYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhXb3JrYm9va0NhbGNQcm9wZXJ0aWVzWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFdvcmtib29rQ2FsY1Byb3BlcnRpZXNYZm9ybSk7CgogIGZ1bmN0aW9uIFdvcmtib29rQ2FsY1Byb3BlcnRpZXNYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXb3JrYm9va0Nh
bGNQcm9wZXJ0aWVzWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhXb3JrYm9va0NhbGNQcm9wZXJ0aWVzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnY2FsY1ByJywgewogICAgICAgIGNhbGNJZDogMTcxMDI3LAogICAgICAgIGZ1bGxDYWxjT25Mb2FkOiBtb2RlbC5mdWxsQ2FsY09uTG9hZCA/IDEgOiB1bmRlZmlu
ZWQKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSAnY2FsY1ByJykgewogICAgICAgIHRoaXMubW9kZWwgPSB7fTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAg
IHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gV29ya2Jvb2tDYWxjUHJvcGVydGllc1hmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFdvcmtib29rQ2FsY1Byb3BlcnRpZXNYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5
cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSBy
ZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9y
LmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1
Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3Vi
Q2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVP
ZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0
ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2Yg
Y2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVm
bGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8p
IHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBXb3Jrc2hlZXRQcm9wZXJ0aWVzWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJp
dHMoV29ya3NoZWV0UHJvcGVydGllc1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihXb3Jrc2hlZXRQcm9wZXJ0aWVzWGZvcm0pOwoKICBmdW5jdGlvbiBXb3Jrc2hlZXRQcm9wZXJ0aWVzWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV29ya3NoZWV0UHJvcGVydGllc1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoV29ya3NoZWV0UHJvcGVydGllc1hmb3JtLCBbewogICAga2V5OiAicmVuZGVy
IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3dvcmtib29rUHInLCB7CiAgICAgICAgZGF0ZTE5MDQ6IG1vZGVsLmRhdGUxOTA0ID8gMSA6IHVuZGVmaW5lZCwKICAgICAgICBkZWZhdWx0VGhlbWVWZXJzaW9uOiAxNjQwMTEsCiAgICAgICAgZmlsdGVyUHJpdmFjeTogMQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmIChub2Rl
Lm5hbWUgPT09ICd3b3JrYm9va1ByJykgewogICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICBkYXRlMTkwNDogbm9kZS5hdHRyaWJ1dGVzLmRhdGUxOTA0ID09PSAnMScKICAgICAgICB9OwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAg
ICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBXb3Jrc2hlZXRQcm9wZXJ0aWVzWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gV29ya3NoZWV0UHJvcGVydGllc1hmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3lt
Ym9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0Nh
bGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBm
YWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQ
cm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xh
c3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsg
cmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJl
c3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSBy
ZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1
Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBl
T2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFdvcmtib29rVmlld1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFdvcmtib29rVmlld1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBl
ciA9IF9jcmVhdGVTdXBlcihXb3JrYm9va1ZpZXdYZm9ybSk7CgogIGZ1bmN0aW9uIFdvcmtib29rVmlld1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdvcmtib29rVmlld1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoV29ya2Jvb2tWaWV3WGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBhdHRyaWJ1dGVzID0gewogICAgICAg
IHhXaW5kb3c6IG1vZGVsLnggfHwgMCwKICAgICAgICB5V2luZG93OiBtb2RlbC55IHx8IDAsCiAgICAgICAgd2luZG93V2lkdGg6IG1vZGVsLndpZHRoIHx8IDEyMDAwLAogICAgICAgIHdpbmRvd0hlaWdodDogbW9kZWwuaGVpZ2h0IHx8IDI0MDAwLAogICAgICAgIGZpcnN0U2hlZXQ6IG1vZGVsLmZpcnN0U2hlZXQsCiAgICAgICAgYWN0aXZlVGFiOiBtb2RlbC5hY3RpdmVUYWIKICAgICAgfTsKCiAgICAgIGlmIChtb2RlbC52aXNpYmlsaXR5ICYmIG1vZGVsLnZpc2liaWxpdHkgIT09ICd2aXNpYmxlJykgewogICAgICAgIGF0
dHJpYnV0ZXMudmlzaWJpbGl0eSA9IG1vZGVsLnZpc2liaWxpdHk7CiAgICAgIH0KCiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnd29ya2Jvb2tWaWV3JywgYXR0cmlidXRlcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSAnd29ya2Jvb2tWaWV3JykgewogICAgICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWwgPSB7fTsKCiAgICAgICAgdmFyIGFkZFMgPSBmdW5jdGlvbiBhZGRTKG5hbWUsIHZhbHVl
LCBkZmx0KSB7CiAgICAgICAgICB2YXIgcyA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyBtb2RlbFtuYW1lXSA9IHZhbHVlIDogZGZsdDsKCiAgICAgICAgICBpZiAocyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG1vZGVsW25hbWVdID0gczsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgYWRkTiA9IGZ1bmN0aW9uIGFkZE4obmFtZSwgdmFsdWUsIGRmbHQpIHsKICAgICAgICAgIHZhciBuID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IG1vZGVsW25hbWVdID0gcGFyc2VJbnQodmFsdWUsIDEwKSA6IGRmbHQ7
CgogICAgICAgICAgaWYgKG4gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBtb2RlbFtuYW1lXSA9IG47CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgYWRkTigneCcsIG5vZGUuYXR0cmlidXRlcy54V2luZG93LCAwKTsKICAgICAgICBhZGROKCd5Jywgbm9kZS5hdHRyaWJ1dGVzLnlXaW5kb3csIDApOwogICAgICAgIGFkZE4oJ3dpZHRoJywgbm9kZS5hdHRyaWJ1dGVzLndpbmRvd1dpZHRoLCAyNTAwMCk7CiAgICAgICAgYWRkTignaGVpZ2h0Jywgbm9kZS5hdHRyaWJ1dGVzLndpbmRvd0hlaWdodCwgMTAwMDAp
OwogICAgICAgIGFkZFMoJ3Zpc2liaWxpdHknLCBub2RlLmF0dHJpYnV0ZXMudmlzaWJpbGl0eSwgJ3Zpc2libGUnKTsKICAgICAgICBhZGROKCdhY3RpdmVUYWInLCBub2RlLmF0dHJpYnV0ZXMuYWN0aXZlVGFiLCB1bmRlZmluZWQpOwogICAgICAgIGFkZE4oJ2ZpcnN0U2hlZXQnLCBub2RlLmF0dHJpYnV0ZXMuZmlyc3RTaGVldCwgdW5kZWZpbmVkKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVu
Y3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gV29ya2Jvb2tWaWV3WGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gV29ya2Jvb2tWaWV3WGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSwzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7
ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5
cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFy
IGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJv
dG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0
aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90
b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2
ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5
cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVS
ZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNl
OyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBfID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvdW5kZXItZGFzaCcpOwoKdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMv
Y29sLWNhY2hlJyk7Cgp2YXIgWG1sU3RyZWFtID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbScpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBTdGF0aWNYZm9ybSA9IHJlcXVpcmUoJy4uL3N0YXRpYy14Zm9ybScpOwoKdmFyIExpc3RYZm9ybSA9IHJlcXVpcmUoJy4uL2xpc3QteGZvcm0nKTsKCnZhciBEZWZpbmVkTmFtZVhmb3JtID0gcmVxdWlyZSgnLi9kZWZpbmVkLW5hbWUteGZvcm0nKTsKCnZhciBTaGVldFhmb3JtID0gcmVxdWlyZSgnLi9zaGVldC14Zm9ybScp
OwoKdmFyIFdvcmtib29rVmlld1hmb3JtID0gcmVxdWlyZSgnLi93b3JrYm9vay12aWV3LXhmb3JtJyk7Cgp2YXIgV29ya2Jvb2tQcm9wZXJ0aWVzWGZvcm0gPSByZXF1aXJlKCcuL3dvcmtib29rLXByb3BlcnRpZXMteGZvcm0nKTsKCnZhciBXb3JrYm9va0NhbGNQcm9wZXJ0aWVzWGZvcm0gPSByZXF1aXJlKCcuL3dvcmtib29rLWNhbGMtcHJvcGVydGllcy14Zm9ybScpOwoKdmFyIFdvcmtib29rWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoV29ya2Jvb2tYZm9ybSwgX0Jh
c2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoV29ya2Jvb2tYZm9ybSk7CgogIGZ1bmN0aW9uIFdvcmtib29rWGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdvcmtib29rWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgIGZpbGVWZXJzaW9uOiBXb3JrYm9va1hmb3JtLlNUQVRJQ19YRk9STVMuZmlsZVZlcnNpb24sCiAgICAgIHdvcmtib29rUHI6IG5ldyBXb3JrYm9va1Byb3BlcnRpZXNYZm9ybSgp
LAogICAgICBib29rVmlld3M6IG5ldyBMaXN0WGZvcm0oewogICAgICAgIHRhZzogJ2Jvb2tWaWV3cycsCiAgICAgICAgY291bnQ6IGZhbHNlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBXb3JrYm9va1ZpZXdYZm9ybSgpCiAgICAgIH0pLAogICAgICBzaGVldHM6IG5ldyBMaXN0WGZvcm0oewogICAgICAgIHRhZzogJ3NoZWV0cycsCiAgICAgICAgY291bnQ6IGZhbHNlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBTaGVldFhmb3JtKCkKICAgICAgfSksCiAgICAgIGRlZmluZWROYW1lczogbmV3IExpc3RYZm9ybSh7CiAgICAg
ICAgdGFnOiAnZGVmaW5lZE5hbWVzJywKICAgICAgICBjb3VudDogZmFsc2UsCiAgICAgICAgY2hpbGRYZm9ybTogbmV3IERlZmluZWROYW1lWGZvcm0oKQogICAgICB9KSwKICAgICAgY2FsY1ByOiBuZXcgV29ya2Jvb2tDYWxjUHJvcGVydGllc1hmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoV29ya2Jvb2tYZm9ybSwgW3sKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmUobW9kZWwpIHsKICAgICAgbW9kZWwuc2hlZXRzID0gbW9kZWwud29ya3No
ZWV0czsgLy8gY29sbGF0ZSBhbGwgdGhlIHByaW50IGFyZWFzIGZyb20gYWxsIG9mIHRoZSBzaGVldHMgYW5kIGFkZCB0aGVtIHRvIHRoZSBkZWZpbmVkIG5hbWVzCgogICAgICB2YXIgcHJpbnRBcmVhcyA9IFtdOwogICAgICB2YXIgaW5kZXggPSAwOyAvLyBzaGVldHMgaXMgc3BhcnNlIGFycmF5IC0gY2FsYyBpbmRleCBtYW51YWxseQoKICAgICAgbW9kZWwuc2hlZXRzLmZvckVhY2goZnVuY3Rpb24gKHNoZWV0KSB7CiAgICAgICAgaWYgKHNoZWV0LnBhZ2VTZXR1cCAmJiBzaGVldC5wYWdlU2V0dXAucHJpbnRBcmVhKSB7CiAg
ICAgICAgICBzaGVldC5wYWdlU2V0dXAucHJpbnRBcmVhLnNwbGl0KCcmJicpLmZvckVhY2goZnVuY3Rpb24gKHByaW50QXJlYSkgewogICAgICAgICAgICB2YXIgcHJpbnRBcmVhQ29tcG9uZW50cyA9IHByaW50QXJlYS5zcGxpdCgnOicpOwogICAgICAgICAgICB2YXIgZGVmaW5lZE5hbWUgPSB7CiAgICAgICAgICAgICAgbmFtZTogJ194bG5tLlByaW50X0FyZWEnLAogICAgICAgICAgICAgIHJhbmdlczogWyInIi5jb25jYXQoc2hlZXQubmFtZSwgIichJCIpLmNvbmNhdChwcmludEFyZWFDb21wb25lbnRzWzBdLCAiOiQiKS5j
b25jYXQocHJpbnRBcmVhQ29tcG9uZW50c1sxXSldLAogICAgICAgICAgICAgIGxvY2FsU2hlZXRJZDogaW5kZXgKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcHJpbnRBcmVhcy5wdXNoKGRlZmluZWROYW1lKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHNoZWV0LnBhZ2VTZXR1cCAmJiAoc2hlZXQucGFnZVNldHVwLnByaW50VGl0bGVzUm93IHx8IHNoZWV0LnBhZ2VTZXR1cC5wcmludFRpdGxlc0NvbHVtbikpIHsKICAgICAgICAgIHZhciByYW5nZXMgPSBbXTsKCiAgICAgICAgICBpZiAoc2hlZXQu
cGFnZVNldHVwLnByaW50VGl0bGVzQ29sdW1uKSB7CiAgICAgICAgICAgIHZhciB0aXRsZXNDb2x1bW5zID0gc2hlZXQucGFnZVNldHVwLnByaW50VGl0bGVzQ29sdW1uLnNwbGl0KCc6Jyk7CiAgICAgICAgICAgIHJhbmdlcy5wdXNoKCInIi5jb25jYXQoc2hlZXQubmFtZSwgIichJCIpLmNvbmNhdCh0aXRsZXNDb2x1bW5zWzBdLCAiOiQiKS5jb25jYXQodGl0bGVzQ29sdW1uc1sxXSkpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChzaGVldC5wYWdlU2V0dXAucHJpbnRUaXRsZXNSb3cpIHsKICAgICAgICAgICAgdmFyIHRp
dGxlc1Jvd3MgPSBzaGVldC5wYWdlU2V0dXAucHJpbnRUaXRsZXNSb3cuc3BsaXQoJzonKTsKICAgICAgICAgICAgcmFuZ2VzLnB1c2goIiciLmNvbmNhdChzaGVldC5uYW1lLCAiJyEkIikuY29uY2F0KHRpdGxlc1Jvd3NbMF0sICI6JCIpLmNvbmNhdCh0aXRsZXNSb3dzWzFdKSk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGRlZmluZWROYW1lID0gewogICAgICAgICAgICBuYW1lOiAnX3hsbm0uUHJpbnRfVGl0bGVzJywKICAgICAgICAgICAgcmFuZ2VzOiByYW5nZXMsCiAgICAgICAgICAgIGxvY2FsU2hlZXRJZDogaW5k
ZXgKICAgICAgICAgIH07CiAgICAgICAgICBwcmludEFyZWFzLnB1c2goZGVmaW5lZE5hbWUpOwogICAgICAgIH0KCiAgICAgICAgaW5kZXgrKzsKICAgICAgfSk7CgogICAgICBpZiAocHJpbnRBcmVhcy5sZW5ndGgpIHsKICAgICAgICBtb2RlbC5kZWZpbmVkTmFtZXMgPSBtb2RlbC5kZWZpbmVkTmFtZXMuY29uY2F0KHByaW50QXJlYXMpOwogICAgICB9CgogICAgICAobW9kZWwubWVkaWEgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKG1lZGl1bSwgaSkgewogICAgICAgIC8vIGFzc2lnbiBuYW1lCiAgICAgICAgbWVkaXVtLm5h
bWUgPSBtZWRpdW0udHlwZSArIChpICsgMSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5YbWwoWG1sU3RyZWFtLlN0ZERvY0F0dHJpYnV0ZXMpOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ3dvcmtib29rJywgV29ya2Jvb2tYZm9ybS5XT1JLQk9PS19BVFRSSUJVVEVTKTsKICAgICAgdGhpcy5tYXAuZmlsZVZlcnNpb24ucmVuZGVyKHhtbFN0cmVhbSk7CiAgICAgIHRoaXMu
bWFwLndvcmtib29rUHIucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwucHJvcGVydGllcyk7CiAgICAgIHRoaXMubWFwLmJvb2tWaWV3cy5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC52aWV3cyk7CiAgICAgIHRoaXMubWFwLnNoZWV0cy5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5zaGVldHMpOwogICAgICB0aGlzLm1hcC5kZWZpbmVkTmFtZXMucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuZGVmaW5lZE5hbWVzKTsKICAgICAgdGhpcy5tYXAuY2FsY1ByLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNhbGNQcm9wZXJ0aWVzKTsKICAgICAg
eG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgJ3dvcmtib29rJzoKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5wYXJz
ZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwoKICAgICAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAg
IGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSkpIHsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgJ3dvcmtib29rJzoKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIHNoZWV0czogdGhp
cy5tYXAuc2hlZXRzLm1vZGVsLAogICAgICAgICAgICBwcm9wZXJ0aWVzOiB0aGlzLm1hcC53b3JrYm9va1ByLm1vZGVsIHx8IHt9LAogICAgICAgICAgICB2aWV3czogdGhpcy5tYXAuYm9va1ZpZXdzLm1vZGVsLAogICAgICAgICAgICBjYWxjUHJvcGVydGllczoge30KICAgICAgICAgIH07CgogICAgICAgICAgaWYgKHRoaXMubWFwLmRlZmluZWROYW1lcy5tb2RlbCkgewogICAgICAgICAgICB0aGlzLm1vZGVsLmRlZmluZWROYW1lcyA9IHRoaXMubWFwLmRlZmluZWROYW1lcy5tb2RlbDsKICAgICAgICAgIH0KCiAgICAgICAg
ICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAvLyBub3QgcXVpdGUgc3VyZSBob3cgd2UgZ2V0IGhlcmUhCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlY29uY2lsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb25jaWxlKG1vZGVsKSB7CiAgICAgIHZhciByZWxzID0gKG1vZGVsLndvcmtib29rUmVscyB8fCBbXSkucmVkdWNlKGZ1bmN0aW9uIChtYXAsIHJlbCkgewogICAgICAgIG1hcFtyZWwuSWRdID0gcmVsOwogICAgICAgIHJldHVybiBt
YXA7CiAgICAgIH0sIHt9KTsgLy8gcmVjb25jaWxlIHNoZWV0IGlkcywgcklkcyBhbmQgbmFtZXMKCiAgICAgIHZhciB3b3Jrc2hlZXRzID0gW107CiAgICAgIHZhciB3b3Jrc2hlZXQ7CiAgICAgIHZhciBpbmRleCA9IDA7CiAgICAgIChtb2RlbC5zaGVldHMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHNoZWV0KSB7CiAgICAgICAgdmFyIHJlbCA9IHJlbHNbc2hlZXQucklkXTsKCiAgICAgICAgaWYgKCFyZWwpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9IC8vIGlmIHJlbC5UYXJnZXQgc3RhcnQgd2l0aCBgW3NwYWNl
XS94bC9gIG9yIGAveGwvYCAsIHRoZW4gaXQgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGAnJ2AgYW5kIHNwbGljZWQgYmVoaW5kIGB4bC9gLAogICAgICAgIC8vIG90aGVyd2lzZSBpdCB3aWxsIGJlIHNwbGljZWQgZGlyZWN0bHkgYmVoaW5kIGB4bC9gLiBpLmcuCgoKICAgICAgICB3b3Jrc2hlZXQgPSBtb2RlbC53b3Jrc2hlZXRIYXNoWyJ4bC8iLmNvbmNhdChyZWwuVGFyZ2V0LnJlcGxhY2UoL14oXHN8XC94bFwvKSsvLCAnJykpXTsgLy8gSWYgdGhlcmUgYXJlICJjaGFydHNoZWV0cyIgaW4gdGhlIGZpbGUsIHJlbC5UYXJnZXQg
d2lsbAogICAgICAgIC8vIGNvbWUgb3V0IGFzIGNoYXJ0c2hlZXRzL3NoZWV0MS54bWwgb3Igc2ltaWxhciBoZXJlLCBhbmQKICAgICAgICAvLyB0aGF0IHdvbid0IGJlIGluIG1vZGVsLndvcmtzaGVldEhhc2guCiAgICAgICAgLy8gQXMgd2UgZG9uJ3QgaGF2ZSB0aGUgaW5mcmFzdHJ1Y3R1cmUgdG8gc3VwcG9ydCBjaGFydHNoZWV0cywKICAgICAgICAvLyB3ZSB3aWxsIGlnbm9yZSB0aGVtIGZvciBub3c6CgogICAgICAgIGlmICh3b3Jrc2hlZXQpIHsKICAgICAgICAgIHdvcmtzaGVldC5uYW1lID0gc2hlZXQubmFtZTsKICAg
ICAgICAgIHdvcmtzaGVldC5pZCA9IHNoZWV0LmlkOwogICAgICAgICAgd29ya3NoZWV0LnN0YXRlID0gc2hlZXQuc3RhdGU7CiAgICAgICAgICB3b3Jrc2hlZXRzW2luZGV4KytdID0gd29ya3NoZWV0OwogICAgICAgIH0KICAgICAgfSk7IC8vIHJlY29uY2lsZSBwcmludCBhcmVhcwoKICAgICAgdmFyIGRlZmluZWROYW1lcyA9IFtdOwoKICAgICAgXy5lYWNoKG1vZGVsLmRlZmluZWROYW1lcywgZnVuY3Rpb24gKGRlZmluZWROYW1lKSB7CiAgICAgICAgaWYgKGRlZmluZWROYW1lLm5hbWUgPT09ICdfeGxubS5QcmludF9BcmVh
JykgewogICAgICAgICAgd29ya3NoZWV0ID0gd29ya3NoZWV0c1tkZWZpbmVkTmFtZS5sb2NhbFNoZWV0SWRdOwoKICAgICAgICAgIGlmICh3b3Jrc2hlZXQpIHsKICAgICAgICAgICAgaWYgKCF3b3Jrc2hlZXQucGFnZVNldHVwKSB7CiAgICAgICAgICAgICAgd29ya3NoZWV0LnBhZ2VTZXR1cCA9IHt9OwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcmFuZ2UgPSBjb2xDYWNoZS5kZWNvZGVFeChkZWZpbmVkTmFtZS5yYW5nZXNbMF0pOwogICAgICAgICAgICB3b3Jrc2hlZXQucGFnZVNldHVwLnByaW50QXJlYSA9IHdv
cmtzaGVldC5wYWdlU2V0dXAucHJpbnRBcmVhID8gIiIuY29uY2F0KHdvcmtzaGVldC5wYWdlU2V0dXAucHJpbnRBcmVhLCAiJiYiKS5jb25jYXQocmFuZ2UuZGltZW5zaW9ucykgOiByYW5nZS5kaW1lbnNpb25zOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZGVmaW5lZE5hbWUubmFtZSA9PT0gJ194bG5tLlByaW50X1RpdGxlcycpIHsKICAgICAgICAgIHdvcmtzaGVldCA9IHdvcmtzaGVldHNbZGVmaW5lZE5hbWUubG9jYWxTaGVldElkXTsKCiAgICAgICAgICBpZiAod29ya3NoZWV0KSB7CiAgICAgICAgICAgIGlm
ICghd29ya3NoZWV0LnBhZ2VTZXR1cCkgewogICAgICAgICAgICAgIHdvcmtzaGVldC5wYWdlU2V0dXAgPSB7fTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHJhbmdlU3RyaW5nID0gZGVmaW5lZE5hbWUucmFuZ2VzLmpvaW4oJywnKTsKICAgICAgICAgICAgdmFyIGRvbGxhclJlZ2V4ID0gL1wkL2c7CiAgICAgICAgICAgIHZhciByb3dSYW5nZVJlZ2V4ID0gL1wkXGQrOlwkXGQrLzsKICAgICAgICAgICAgdmFyIHJvd1JhbmdlTWF0Y2hlcyA9IHJhbmdlU3RyaW5nLm1hdGNoKHJvd1JhbmdlUmVnZXgpOwoKICAgICAg
ICAgICAgaWYgKHJvd1JhbmdlTWF0Y2hlcyAmJiByb3dSYW5nZU1hdGNoZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgdmFyIF9yYW5nZSA9IHJvd1JhbmdlTWF0Y2hlc1swXTsKICAgICAgICAgICAgICB3b3Jrc2hlZXQucGFnZVNldHVwLnByaW50VGl0bGVzUm93ID0gX3JhbmdlLnJlcGxhY2UoZG9sbGFyUmVnZXgsICcnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGNvbHVtblJhbmdlUmVnZXggPSAvXCRbQS1aXSs6XCRbQS1aXSsvOwogICAgICAgICAgICB2YXIgY29sdW1uUmFuZ2VNYXRjaGVzID0gcmFuZ2VT
dHJpbmcubWF0Y2goY29sdW1uUmFuZ2VSZWdleCk7CgogICAgICAgICAgICBpZiAoY29sdW1uUmFuZ2VNYXRjaGVzICYmIGNvbHVtblJhbmdlTWF0Y2hlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICB2YXIgX3JhbmdlMiA9IGNvbHVtblJhbmdlTWF0Y2hlc1swXTsKICAgICAgICAgICAgICB3b3Jrc2hlZXQucGFnZVNldHVwLnByaW50VGl0bGVzQ29sdW1uID0gX3JhbmdlMi5yZXBsYWNlKGRvbGxhclJlZ2V4LCAnJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVmaW5lZE5h
bWVzLnB1c2goZGVmaW5lZE5hbWUpOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICBtb2RlbC5kZWZpbmVkTmFtZXMgPSBkZWZpbmVkTmFtZXM7IC8vIHVzZWQgYnkgc2hlZXRzIHRvIGJ1aWxkIHRoZWlyIGltYWdlIG1vZGVscwoKICAgICAgbW9kZWwubWVkaWEuZm9yRWFjaChmdW5jdGlvbiAobWVkaWEsIGkpIHsKICAgICAgICBtZWRpYS5pbmRleCA9IGk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFdvcmtib29rWGZvcm07Cn0oQmFzZVhmb3JtKTsKCldvcmtib29rWGZvcm0uV09SS0JPT0tfQVRUUklCVVRF
UyA9IHsKICB4bWxuczogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9zcHJlYWRzaGVldG1sLzIwMDYvbWFpbicsCiAgJ3htbG5zOnInOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcycsCiAgJ3htbG5zOm1jJzogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2JywKICAnbWM6SWdub3JhYmxlJzogJ3gxNScsCiAgJ3htbG5zOngxNSc6ICdodHRwOi8vc2NoZW1hcy5taWNyb3Nv
ZnQuY29tL29mZmljZS9zcHJlYWRzaGVldG1sLzIwMTAvMTEvbWFpbicKfTsKV29ya2Jvb2tYZm9ybS5TVEFUSUNfWEZPUk1TID0gewogIGZpbGVWZXJzaW9uOiBuZXcgU3RhdGljWGZvcm0oewogICAgdGFnOiAnZmlsZVZlcnNpb24nLAogICAgJDogewogICAgICBhcHBOYW1lOiAneGwnLAogICAgICBsYXN0RWRpdGVkOiA1LAogICAgICBsb3dlc3RFZGl0ZWQ6IDUsCiAgICAgIHJ1cEJ1aWxkOiA5MzAzCiAgICB9CiAgfSkKfTsKbW9kdWxlLmV4cG9ydHMgPSBXb3JrYm9va1hmb3JtOwoKfSx7Ii4uLy4uLy4uL3V0aWxzL2NvbC1j
YWNoZSI6MTksIi4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2giOjI1LCIuLi8uLi8uLi91dGlscy94bWwtc3RyZWFtIjoyNywiLi4vYmFzZS14Zm9ybSI6MzEsIi4uL2xpc3QteGZvcm0iOjcwLCIuLi9zdGF0aWMteGZvcm0iOjExOSwiLi9kZWZpbmVkLW5hbWUteGZvcm0iOjMyLCIuL3NoZWV0LXhmb3JtIjozMywiLi93b3JrYm9vay1jYWxjLXByb3BlcnRpZXMteGZvcm0iOjM0LCIuL3dvcmtib29rLXByb3BlcnRpZXMteGZvcm0iOjM1LCIuL3dvcmtib29rLXZpZXcteGZvcm0iOjM2fV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9k
dWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3Qs
IHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5
LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFy
Z2V0OyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIFJpY2hUZXh0WGZvcm0gPSByZXF1aXJlKCcuLi9zdHJpbmdzL3JpY2gtdGV4dC14Zm9ybScpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgn
Li4vLi4vLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Ci8qKg0KICA8Y29tbWVudCByZWY9IkIxIiBhdXRob3JJZD0iMCI+DQogICAgPHRleHQ+DQogICAgICA8cj4NCiAgICAgICAgPHJQcj4NCiAgICAgICAgICA8Yi8+DQogICAgICAgICAgPHN6IHZhbD0iOSIvPg0KICAgICAgICAgIDxyRm9udCB2YWw9IuWui+S9kyIvPg0KICAgICAgICAgIDxjaGFyc2V0IHZhbD0iMTM0Ii8+DQogICAgICAgIDwvclByPg0KICAgICAgICA8dD41MTQyMjo8L3Q+DQogICAgICA8L3I+
DQogICAgICA8cj4NCiAgICAgICAgPHJQcj4NCiAgICAgICAgICA8c3ogdmFsPSI5Ii8+DQogICAgICAgICAgPHJGb250IHZhbD0i5a6L5L2TIi8+DQogICAgICAgICAgPGNoYXJzZXQgdmFsPSIxMzQiLz4NCiAgICAgICAgPC9yUHI+DQogICAgICAgIDx0IHhtbDpzcGFjZT0icHJlc2VydmUiPiYjMTA7dGVzdDwvdD4NCiAgICAgIDwvcj4NCiAgICA8L3RleHQ+DQogIDwvY29tbWVudD4NCiAqLwoKCnZhciBDb21tZW50WGZvcm0gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2RlbCkgewogIHRoaXMubW9kZWwgPSBtb2Rl
bDsKfTsKCnV0aWxzLmluaGVyaXRzKENvbW1lbnRYZm9ybSwgQmFzZVhmb3JtLCB7CiAgZ2V0IHRhZygpIHsKICAgIHJldHVybiAncic7CiAgfSwKCiAgZ2V0IHJpY2hUZXh0WGZvcm0oKSB7CiAgICBpZiAoIXRoaXMuX3JpY2hUZXh0WGZvcm0pIHsKICAgICAgdGhpcy5fcmljaFRleHRYZm9ybSA9IG5ldyBSaWNoVGV4dFhmb3JtKCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX3JpY2hUZXh0WGZvcm07CiAgfSwKCiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgdmFyIF90aGlzID0gdGhp
czsKCiAgICBtb2RlbCA9IG1vZGVsIHx8IHRoaXMubW9kZWw7CiAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ2NvbW1lbnQnLCB7CiAgICAgIHJlZjogbW9kZWwucmVmLAogICAgICBhdXRob3JJZDogMAogICAgfSk7CiAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ3RleHQnKTsKCiAgICBpZiAobW9kZWwgJiYgbW9kZWwubm90ZSAmJiBtb2RlbC5ub3RlLnRleHRzKSB7CiAgICAgIG1vZGVsLm5vdGUudGV4dHMuZm9yRWFjaChmdW5jdGlvbiAodGV4dCkgewogICAgICAgIF90aGlzLnJpY2hUZXh0WGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwg
dGV4dCk7CiAgICAgIH0pOwogICAgfQoKICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICB9LAogIHBhcnNlT3BlbjogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgIGNhc2UgJ2NvbW1lbnQnOgogICAgICAgIHRoaXMubW9kZWwgPSBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAg
IHR5cGU6ICdub3RlJywKICAgICAgICAgIG5vdGU6IHsKICAgICAgICAgICAgdGV4dHM6IFtdCiAgICAgICAgICB9CiAgICAgICAgfSwgbm9kZS5hdHRyaWJ1dGVzKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgIGNhc2UgJ3InOgogICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5yaWNoVGV4dFhmb3JtOwogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sCiAgcGFyc2VUZXh0OiBmdW5j
dGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgIH0KICB9LAogIHBhcnNlQ2xvc2U6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgc3dpdGNoIChuYW1lKSB7CiAgICAgIGNhc2UgJ2NvbW1lbnQnOgogICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgIGNhc2UgJ3InOgogICAgICAgIHRoaXMubW9kZWwubm90ZS50ZXh0cy5wdXNoKHRoaXMucGFyc2VyLm1vZGVsKTsKICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5l
ZDsKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICB0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQp9KTsKCn0seyIuLi8uLi8uLi91dGlscy91dGlscyI6MjYsIi4uL2Jhc2UteGZvcm0iOjMxLCIuLi9zdHJpbmdzL3JpY2gtdGV4dC14Zm9ybSI6MTIxfV0sMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgWG1sU3Ry
ZWFtID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbScpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgQ29tbWVudFhmb3JtID0gcmVxdWlyZSgnLi9jb21tZW50LXhmb3JtJyk7Cgp2YXIgQ29tbWVudHNYZm9ybSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgewogIHRoaXMubWFwID0gewogICAgY29tbWVudDogbmV3IENvbW1lbnRYZm9ybSgpCiAgfTsKfTsKCnV0aWxzLmluaGVy
aXRzKENvbW1lbnRzWGZvcm0sIEJhc2VYZm9ybSwgewogIENPTU1FTlRTX0FUVFJJQlVURVM6IHsKICAgIHhtbG5zOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3NwcmVhZHNoZWV0bWwvMjAwNi9tYWluJwogIH0KfSwgewogIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgbW9kZWwgPSBtb2RlbCB8fCB0aGlzLm1vZGVsOwogICAgeG1sU3RyZWFtLm9wZW5YbWwoWG1sU3RyZWFtLlN0ZERvY0F0dHJpYnV0ZXMpOwogICAgeG1sU3Ry
ZWFtLm9wZW5Ob2RlKCdjb21tZW50cycsIENvbW1lbnRzWGZvcm0uQ09NTUVOVFNfQVRUUklCVVRFUyk7IC8vIGF1dGhvcnMKICAgIC8vIFRPRE86IHN1cHBvcnQgYXV0aG9ycyBwcm9wZXJseQoKICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnYXV0aG9ycycpOwogICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdhdXRob3InLCBudWxsLCAnQXV0aG9yJyk7CiAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7IC8vIGNvbW1lbnRzCgogICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdjb21tZW50TGlzdCcpOwogICAgbW9kZWwuY29tbWVudHMuZm9yRWFj
aChmdW5jdGlvbiAoY29tbWVudCkgewogICAgICBfdGhpcy5tYXAuY29tbWVudC5yZW5kZXIoeG1sU3RyZWFtLCBjb21tZW50KTsKICAgIH0pOwogICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogIH0sCiAgcGFyc2VPcGVuOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAgICAgY2Fz
ZSAnY29tbWVudExpc3QnOgogICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICBjb21tZW50czogW10KICAgICAgICB9OwogICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgY2FzZSAnY29tbWVudCc6CiAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcC5jb21tZW50OwogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sCiAgcGFyc2VUZXh0OiBmdW5jdGlvbiBwYXJzZVRleHQodGV4
dCkgewogICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgIH0KICB9LAogIHBhcnNlQ2xvc2U6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgc3dpdGNoIChuYW1lKSB7CiAgICAgIGNhc2UgJ2NvbW1lbnRMaXN0JzoKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICBjYXNlICdjb21tZW50JzoKICAgICAgICB0aGlzLm1vZGVsLmNvbW1lbnRzLnB1c2godGhpcy5wYXJzZXIubW9kZWwpOwogICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAg
IHJldHVybiB0cnVlOwoKICAgICAgZGVmYXVsdDoKICAgICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9Cn0pOwoKfSx7Ii4uLy4uLy4uL3V0aWxzL3V0aWxzIjoyNiwiLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbSI6MjcsIi4uL2Jhc2UteGZvcm0iOjMxLCIuL2NvbW1lbnQteGZvcm0iOjM4fV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgpm
dW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYg
b2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHBy
b3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywg
c3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3Vw
ZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90
eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQp
LCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNh
bGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsg
fQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNh
dGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vLi4vYmFzZS14Zm9ybScpOwoKdmFyIFZtbFBvc2l0aW9uWGZv
cm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoVm1sUG9zaXRpb25YZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVm1sUG9zaXRpb25YZm9ybSk7CgogIGZ1bmN0aW9uIFZtbFBvc2l0aW9uWGZvcm0obW9kZWwpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVm1sUG9zaXRpb25YZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLl9tb2RlbCA9IG1vZGVsOwogICAgcmV0dXJu
IF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZtbFBvc2l0aW9uWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLCB0eXBlKSB7CiAgICAgIGlmIChtb2RlbCA9PT0gdHlwZVsyXSkgewogICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSh0aGlzLnRhZyk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy50YWcgPT09ICd4OlNpemVXaXRoQ2VsbHMnICYmIG1vZGVsID09PSB0eXBlWzFdKSB7CiAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnKTsK
ICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHt9OwogICAgICAgICAgdGhpcy5tb2RlbFt0aGlzLnRhZ10gPSB0cnVlOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRl
eHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX21vZGVsICYmIHRoaXMuX21vZGVsLnRhZzsKICAgIH0KICB9XSk7CgogIHJldHVybiBWbWxQb3NpdGlvblhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFZt
bFBvc2l0aW9uWGZvcm07Cgp9LHsiLi4vLi4vYmFzZS14Zm9ybSI6MzF9XSw0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1
bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2Fs
bCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5l
UHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3Vw
ZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYg
KHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2
ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSBy
ZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJv
dyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsg
dHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7
IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi8uLi9iYXNlLXhmb3JtJyk7Cgp2YXIgVm1sUHJvdGVjdGlvblhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFZtbFByb3RlY3Rpb25YZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVm1sUHJvdGVjdGlvblhmb3JtKTsKCiAgZnVuY3Rpb24gVm1sUHJvdGVjdGlvblhmb3JtKG1vZGVsKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2Ns
YXNzQ2FsbENoZWNrKHRoaXMsIFZtbFByb3RlY3Rpb25YZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLl9tb2RlbCA9IG1vZGVsOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZtbFByb3RlY3Rpb25YZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnLCBudWxsLCBtb2RlbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFy
c2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLnRleHQgPSAnJzsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICB0aGlzLnRleHQgPSB0ZXh0OwogICAgfQog
IH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9tb2RlbCAmJiB0aGlzLl9tb2RlbC50YWc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVm1sUHJvdGVjdGlvblhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFZtbFByb3RlY3Rpb25YZm9ybTsKCn0seyIuLi8uLi9iYXNlLXhmb3Jt
IjozMX1dLDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0
eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0
aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNj
cmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0g
ImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNz
LCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24g
X2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlz
LCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVl
biBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJl
ZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFy
IEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsgLy8gcmVuZGVyIHRoZSB0cmlhbmdsZSBpbiB0aGUgY2VsbCBmb3IgdGhlIGNvbW1lbnQKCgp2YXIgVm1sQW5jaG9yWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoVm1sQW5jaG9yWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFZtbEFuY2hvclhmb3JtKTsKCiAgZnVuY3Rpb24gVm1sQW5jaG9yWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVm1sQW5j
aG9yWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhWbWxBbmNob3JYZm9ybSwgW3sKICAgIGtleTogImdldEFuY2hvclJlY3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFuY2hvclJlY3QoYW5jaG9yKSB7CiAgICAgIHZhciBsID0gTWF0aC5mbG9vcihhbmNob3IubGVmdCk7CiAgICAgIHZhciBsZiA9IE1hdGguZmxvb3IoKGFuY2hvci5sZWZ0IC0gbCkgKiA2OCk7CiAgICAgIHZhciB0ID0gTWF0aC5mbG9vcihhbmNob3IudG9wKTsKICAgICAgdmFy
IHRmID0gTWF0aC5mbG9vcigoYW5jaG9yLnRvcCAtIHQpICogMTgpOwogICAgICB2YXIgciA9IE1hdGguZmxvb3IoYW5jaG9yLnJpZ2h0KTsKICAgICAgdmFyIHJmID0gTWF0aC5mbG9vcigoYW5jaG9yLnJpZ2h0IC0gcikgKiA2OCk7CiAgICAgIHZhciBiID0gTWF0aC5mbG9vcihhbmNob3IuYm90dG9tKTsKICAgICAgdmFyIGJmID0gTWF0aC5mbG9vcigoYW5jaG9yLmJvdHRvbSAtIGIpICogMTgpOwogICAgICByZXR1cm4gW2wsIGxmLCB0LCB0ZiwgciwgcmYsIGIsIGJmXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXREZWZh
dWx0UmVjdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVmYXVsdFJlY3QocmVmKSB7CiAgICAgIHZhciBsID0gcmVmLmNvbDsKICAgICAgdmFyIGxmID0gNjsKICAgICAgdmFyIHQgPSBNYXRoLm1heChyZWYucm93IC0gMiwgMCk7CiAgICAgIHZhciB0ZiA9IDE0OwogICAgICB2YXIgciA9IGwgKyAyOwogICAgICB2YXIgcmYgPSAyOwogICAgICB2YXIgYiA9IHQgKyA0OwogICAgICB2YXIgYmYgPSAxNjsKICAgICAgcmV0dXJuIFtsLCBsZiwgdCwgdGYsIHIsIHJmLCBiLCBiZl07CiAgICB9CiAgfSwgewogICAga2V5OiAicmVu
ZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB2YXIgcmVjdCA9IG1vZGVsLmFuY2hvciA/IHRoaXMuZ2V0QW5jaG9yUmVjdChtb2RlbC5hbmNob3IpIDogdGhpcy5nZXREZWZhdWx0UmVjdChtb2RlbC5yZWZBZGRyZXNzKTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCd4OkFuY2hvcicsIG51bGwsIHJlY3Quam9pbignLCAnKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBz
d2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLnRleHQgPSAnJzsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICB0aGlzLnRleHQgPSB0ZXh0OwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNl
Q2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAneDpBbmNob3InOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFZtbEFuY2hvclhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFZtbEFuY2hvclhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAi
QGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBl
ID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBk
ZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3Rv
UHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhl
ciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90
eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVS
ZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBl
b2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVm
bGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsg
fSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFZtbEFuY2hvclhmb3JtID0gcmVxdWlyZSgnLi92bWwtYW5jaG9yLXhm
b3JtJyk7Cgp2YXIgVm1sUHJvdGVjdGlvblhmb3JtID0gcmVxdWlyZSgnLi9zdHlsZS92bWwtcHJvdGVjdGlvbi14Zm9ybScpOwoKdmFyIFZtbFBvc2l0aW9uWGZvcm0gPSByZXF1aXJlKCcuL3N0eWxlL3ZtbC1wb3NpdGlvbi14Zm9ybScpOwoKdmFyIFBPU0lUSU9OX1RZUEUgPSBbJ3R3b0NlbGxzJywgJ29uZUNlbGxzJywgJ2Fic29sdXRlJ107Cgp2YXIgVm1sQ2xpZW50RGF0YVhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFZtbENsaWVudERhdGFYZm9ybSwgX0Jhc2VYZm9y
bSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVm1sQ2xpZW50RGF0YVhmb3JtKTsKCiAgZnVuY3Rpb24gVm1sQ2xpZW50RGF0YVhmb3JtKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWbWxDbGllbnREYXRhWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgICd4OkFuY2hvcic6IG5ldyBWbWxBbmNob3JYZm9ybSgpLAogICAgICAneDpMb2NrZWQnOiBuZXcgVm1sUHJvdGVjdGlvblhmb3JtKHsKICAgICAgICB0YWc6ICd4
OkxvY2tlZCcKICAgICAgfSksCiAgICAgICd4OkxvY2tUZXh0JzogbmV3IFZtbFByb3RlY3Rpb25YZm9ybSh7CiAgICAgICAgdGFnOiAneDpMb2NrVGV4dCcKICAgICAgfSksCiAgICAgICd4OlNpemVXaXRoQ2VsbHMnOiBuZXcgVm1sUG9zaXRpb25YZm9ybSh7CiAgICAgICAgdGFnOiAneDpTaXplV2l0aENlbGxzJwogICAgICB9KSwKICAgICAgJ3g6TW92ZVdpdGhDZWxscyc6IG5ldyBWbWxQb3NpdGlvblhmb3JtKHsKICAgICAgICB0YWc6ICd4Ok1vdmVXaXRoQ2VsbHMnCiAgICAgIH0pCiAgICB9OwogICAgcmV0dXJuIF90aGlz
OwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZtbENsaWVudERhdGFYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgdmFyIF9tb2RlbCRub3RlID0gbW9kZWwubm90ZSwKICAgICAgICAgIHByb3RlY3Rpb24gPSBfbW9kZWwkbm90ZS5wcm90ZWN0aW9uLAogICAgICAgICAgZWRpdEFzID0gX21vZGVsJG5vdGUuZWRpdEFzOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHsKICAgICAgICBPYmplY3RUeXBlOiAnTm90ZScKICAg
ICAgfSk7CiAgICAgIHRoaXMubWFwWyd4Ok1vdmVXaXRoQ2VsbHMnXS5yZW5kZXIoeG1sU3RyZWFtLCBlZGl0QXMsIFBPU0lUSU9OX1RZUEUpOwogICAgICB0aGlzLm1hcFsneDpTaXplV2l0aENlbGxzJ10ucmVuZGVyKHhtbFN0cmVhbSwgZWRpdEFzLCBQT1NJVElPTl9UWVBFKTsKICAgICAgdGhpcy5tYXBbJ3g6QW5jaG9yJ10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpOwogICAgICB0aGlzLm1hcFsneDpMb2NrZWQnXS5yZW5kZXIoeG1sU3RyZWFtLCBwcm90ZWN0aW9uLmxvY2tlZCk7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9k
ZSgneDpBdXRvRmlsbCcsIG51bGwsICdGYWxzZScpOwogICAgICB0aGlzLm1hcFsneDpMb2NrVGV4dCddLnJlbmRlcih4bWxTdHJlYW0sIHByb3RlY3Rpb24ubG9ja1RleHQpOwogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3g6Um93JywgbnVsbCwgbW9kZWwucmVmQWRkcmVzcy5yb3cgLSAxKTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCd4OkNvbHVtbicsIG51bGwsIG1vZGVsLnJlZkFkZHJlc3MuY29sIC0gMSk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4i
LAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIGFuY2hvcjogW10sCiAgICAgICAgICAgIHByb3RlY3Rpb246IHt9LAogICAgICAgICAgICBlZGl0QXM6ICcnCiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwW25vZGUu
bmFtZV07CgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6
ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5ub3JtYWxpemVNb2RlbCgpOwogICAgICAgICAgcmV0dXJuIGZhbHNl
OwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJub3JtYWxpemVNb2RlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplTW9kZWwoKSB7CiAgICAgIHZhciBwb3NpdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMubWFwWyd4Ok1vdmVXaXRoQ2VsbHMnXS5tb2RlbCwgdGhpcy5tYXBbJ3g6U2l6ZVdpdGhDZWxscyddLm1vZGVsKTsKICAgICAgdmFyIGxlbiA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKS5sZW5ndGg7CiAgICAgIHRoaXMubW9k
ZWwuZWRpdEFzID0gUE9TSVRJT05fVFlQRVtsZW5dOwogICAgICB0aGlzLm1vZGVsLmFuY2hvciA9IHRoaXMubWFwWyd4OkFuY2hvciddLnRleHQ7CiAgICAgIHRoaXMubW9kZWwucHJvdGVjdGlvbi5sb2NrZWQgPSB0aGlzLm1hcFsneDpMb2NrZWQnXS50ZXh0OwogICAgICB0aGlzLm1vZGVsLnByb3RlY3Rpb24ubG9ja1RleHQgPSB0aGlzLm1hcFsneDpMb2NrVGV4dCddLnRleHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3g6Q2xpZW50RGF0YSc7
CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVm1sQ2xpZW50RGF0YVhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFZtbENsaWVudERhdGFYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMSwiLi9zdHlsZS92bWwtcG9zaXRpb24teGZvcm0iOjQwLCIuL3N0eWxlL3ZtbC1wcm90ZWN0aW9uLXhmb3JtIjo0MSwiLi92bWwtYW5jaG9yLXhmb3JtIjo0Mn1dLDQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxw
ZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wi
IDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9
IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVm
aW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBv
ciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1
bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0
cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09
PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1
Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rp
b24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIFhtbFN0cmVhbSA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL3htbC1zdHJlYW0nKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2
YXIgVm1sU2hhcGVYZm9ybSA9IHJlcXVpcmUoJy4vdm1sLXNoYXBlLXhmb3JtJyk7IC8vIFRoaXMgY2xhc3MgaXMgKGN1cnJlbnRseSkgc2luZ2xlIHB1cnBvc2VkIHRvIGluc2VydCB0aGUgdHJpYW5nbGUKLy8gZHJhd2luZyBpY29ucyBvbiBjb21tZW50ZWQgY2VsbHMKCgp2YXIgVm1sTm90ZXNYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhWbWxOb3Rlc1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihWbWxOb3Rlc1hmb3JtKTsKCiAg
ZnVuY3Rpb24gVm1sTm90ZXNYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVm1sTm90ZXNYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ3Y6c2hhcGUnOiBuZXcgVm1sU2hhcGVYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZtbE5vdGVzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7
CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgeG1sU3RyZWFtLm9wZW5YbWwoWG1sU3RyZWFtLlN0ZERvY0F0dHJpYnV0ZXMpOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIFZtbE5vdGVzWGZvcm0uRFJBV0lOR19BVFRSSUJVVEVTKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdvOnNoYXBlbGF5b3V0JywgewogICAgICAgICd2OmV4dCc6ICdlZGl0JwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdvOmlkbWFwJywgewogICAgICAgICd2OmV4dCc6ICdlZGl0JywKICAgICAgICBk
YXRhOiAxCiAgICAgIH0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgndjpzaGFwZXR5cGUnLCB7CiAgICAgICAgaWQ6ICdfeDAwMDBfdDIwMicsCiAgICAgICAgY29vcmRzaXplOiAnMjE2MDAsMjE2MDAnLAogICAgICAgICdvOnNwdCc6IDIwMiwKICAgICAgICBwYXRoOiAnbSxsLDIxNjAwcjIxNjAwLGwyMTYwMCx4ZScKICAgICAgfSk7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndjpzdHJva2UnLCB7CiAgICAgICAgam9pbnN0eWxlOiAnbWl0ZXInCiAgICAgIH0pOwog
ICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3Y6cGF0aCcsIHsKICAgICAgICBncmFkaWVudHNoYXBlb2s6ICd0JywKICAgICAgICAnbzpjb25uZWN0dHlwZSc6ICdyZWN0JwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICBtb2RlbC5jb21tZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgIF90aGlzMi5tYXBbJ3Y6c2hhcGUnXS5yZW5kZXIoeG1sU3RyZWFtLCBpdGVtLCBpbmRleCk7CiAgICAgIH0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAg
fSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIGNvbW1lbnRzOiBbXQogICAgICAgICAgfTsKICAgICAg
ICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwoKICAgICAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7
CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5tb2RlbC5jb21tZW50cy5wdXNoKHRoaXMucGFyc2VyLm1vZGVsKTsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAg
cmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAvLyBjb3VsZCBiZSBzb21lIHVucmVjb2duaXNlZCB0YWdzCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlY29uY2lsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb25jaWxlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAg
bW9kZWwuYW5jaG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChhbmNob3IpIHsKICAgICAgICBpZiAoYW5jaG9yLmJyKSB7CiAgICAgICAgICBfdGhpczMubWFwWyd4ZHI6dHdvQ2VsbEFuY2hvciddLnJlY29uY2lsZShhbmNob3IsIG9wdGlvbnMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczMubWFwWyd4ZHI6b25lQ2VsbEFuY2hvciddLnJlY29uY2lsZShhbmNob3IsIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewog
ICAgICByZXR1cm4gJ3htbCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVm1sTm90ZXNYZm9ybTsKfShCYXNlWGZvcm0pOwoKVm1sTm90ZXNYZm9ybS5EUkFXSU5HX0FUVFJJQlVURVMgPSB7CiAgJ3htbG5zOnYnOiAndXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWwnLAogICd4bWxuczpvJzogJ3VybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZScsCiAgJ3htbG5zOngnOiAndXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6ZXhjZWwnCn07Cm1vZHVsZS5leHBvcnRzID0gVm1sTm90ZXNYZm9ybTsK
Cn0seyIuLi8uLi8uLi91dGlscy94bWwtc3RyZWFtIjoyNywiLi4vYmFzZS14Zm9ybSI6MzEsIi4vdm1sLXNoYXBlLXhmb3JtIjo0NX1dLDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0
eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3Ip
KSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3Jp
cHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3Rvcjsg
fQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6
IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBo
YXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQg
PSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQo
c2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2Yg
UHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19w
cm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBWbWxUZXh0Ym94WGZvcm0gPSByZXF1aXJlKCcuL3ZtbC10ZXh0Ym94LXhmb3JtJyk7Cgp2YXIgVm1sQ2xpZW50RGF0YVhmb3JtID0gcmVxdWlyZSgnLi92bWwtY2xpZW50LWRhdGEteGZvcm0nKTsKCnZhciBWbWxTaGFwZVhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFZt
bFNoYXBlWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFZtbFNoYXBlWGZvcm0pOwoKICBmdW5jdGlvbiBWbWxTaGFwZVhmb3JtKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWbWxTaGFwZVhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMubWFwID0gewogICAgICAndjp0ZXh0Ym94JzogbmV3IFZtbFRleHRib3hYZm9ybSgpLAogICAgICAneDpDbGllbnREYXRhJzogbmV3IFZtbENsaWVudERhdGFYZm9ybSgpCiAg
ICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZtbFNoYXBlWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLCBpbmRleCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ3Y6c2hhcGUnLCBWbWxTaGFwZVhmb3JtLlZfU0hBUEVfQVRUUklCVVRFUyhtb2RlbCwgaW5kZXgpKTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCd2OmZpbGwnLCB7CiAgICAgICAgY29sb3IyOiAnaW5mb0JhY2tncm91bmQgWzgwXScKICAgICAg
fSk7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndjpzaGFkb3cnLCB7CiAgICAgICAgY29sb3I6ICdub25lIFs4MV0nLAogICAgICAgIG9ic2N1cmVkOiAndCcKICAgICAgfSk7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndjpwYXRoJywgewogICAgICAgICdvOmNvbm5lY3R0eXBlJzogJ25vbmUnCiAgICAgIH0pOwogICAgICB0aGlzLm1hcFsndjp0ZXh0Ym94J10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpOwogICAgICB0aGlzLm1hcFsneDpDbGllbnREYXRhJ10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpOwogICAgICB4
bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIG1h
cmdpbnM6IHsKICAgICAgICAgICAgICBpbnNldG1vZGU6IG5vZGUuYXR0cmlidXRlc1snbzppbnNldG1vZGUnXQogICAgICAgICAgICB9LAogICAgICAgICAgICBhbmNob3I6ICcnLAogICAgICAgICAgICBlZGl0QXM6ICcnLAogICAgICAgICAgICBwcm90ZWN0aW9uOiB7fQogICAgICAgICAgfTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwoKICAgICAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgICAgICB0aGlzLnBhcnNl
ci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAg
IGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMubW9kZWwubWFyZ2lucy5pbnNldCA9IHRoaXMubWFwWyd2OnRleHRib3gnXS5tb2RlbCAmJiB0aGlzLm1hcFsndjp0ZXh0Ym94J10ubW9kZWwuaW5zZXQ7CiAgICAgICAgICB0
aGlzLm1vZGVsLnByb3RlY3Rpb24gPSB0aGlzLm1hcFsneDpDbGllbnREYXRhJ10ubW9kZWwgJiYgdGhpcy5tYXBbJ3g6Q2xpZW50RGF0YSddLm1vZGVsLnByb3RlY3Rpb247CiAgICAgICAgICB0aGlzLm1vZGVsLmFuY2hvciA9IHRoaXMubWFwWyd4OkNsaWVudERhdGEnXS5tb2RlbCAmJiB0aGlzLm1hcFsneDpDbGllbnREYXRhJ10ubW9kZWwuYW5jaG9yOwogICAgICAgICAgdGhpcy5tb2RlbC5lZGl0QXMgPSB0aGlzLm1hcFsneDpDbGllbnREYXRhJ10ubW9kZWwgJiYgdGhpcy5tYXBbJ3g6Q2xpZW50RGF0YSddLm1vZGVsLmVk
aXRBczsKICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3Y6c2hhcGUnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFZtbFNoYXBlWGZvcm07Cn0oQmFzZVhmb3JtKTsKClZtbFNoYXBlWGZvcm0uVl9TSEFQRV9BVFRSSUJVVEVTID0gZnVuY3Rpb24gKG1vZGVsLCBpbmRleCkgewogIHJldHVybiB7CiAgICBpZDogIl94MDAwMF9z
Ii5jb25jYXQoMTAyNSArIGluZGV4KSwKICAgIHR5cGU6ICcjX3gwMDAwX3QyMDInLAogICAgc3R5bGU6ICdwb3NpdGlvbjphYnNvbHV0ZTsgbWFyZ2luLWxlZnQ6MTA1LjNwdDttYXJnaW4tdG9wOjEwLjVwdDt3aWR0aDo5Ny44cHQ7aGVpZ2h0OjU5LjFwdDt6LWluZGV4OjE7dmlzaWJpbGl0eTpoaWRkZW4nLAogICAgZmlsbGNvbG9yOiAnaW5mb0JhY2tncm91bmQgWzgwXScsCiAgICBzdHJva2Vjb2xvcjogJ25vbmUgWzgxXScsCiAgICAnbzppbnNldG1vZGUnOiBtb2RlbC5ub3RlLm1hcmdpbnMgJiYgbW9kZWwubm90ZS5tYXJn
aW5zLmluc2V0bW9kZQogIH07Cn07Cgptb2R1bGUuZXhwb3J0cyA9IFZtbFNoYXBlWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzEsIi4vdm1sLWNsaWVudC1kYXRhLXhmb3JtIjo0MywiLi92bWwtdGV4dGJveC14Zm9ybSI6NDZ9XSw0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09
ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNl
LCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9y
LmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJv
cGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNz
LnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3Rv
dHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5j
b25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhp
c0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNl
OyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQ
cm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgVm1sVGV4dGJveFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFZtbFRleHRib3hYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVm1s
VGV4dGJveFhmb3JtKTsKCiAgZnVuY3Rpb24gVm1sVGV4dGJveFhmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZtbFRleHRib3hYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZtbFRleHRib3hYZm9ybSwgW3sKICAgIGtleTogImNvbnZlcnNpb25Vbml0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJzaW9uVW5pdCh2YWx1ZSwgbXVsdGlwbGUsIHVuaXQpIHsKICAgICAgcmV0dXJuICIiLmNvbmNhdChwYXJzZUZsb2F0KHZhbHVl
KSAqIG11bHRpcGxlLnRvRml4ZWQoMikpLmNvbmNhdCh1bml0KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXZlcnNlQ29udmVyc2lvblVuaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVyc2VDb252ZXJzaW9uVW5pdChpbnNldCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIChpbnNldCB8fCAnJykuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKG1hcmdpbikgewogICAgICAgIHJldHVybiBOdW1iZXIocGFyc2VGbG9hdChfdGhpcy5jb252ZXJzaW9uVW5pdChwYXJzZUZsb2F0KG1hcmdpbiksIDAu
MSwgJycpKS50b0ZpeGVkKDIpKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBhdHRyaWJ1dGVzID0gewogICAgICAgIHN0eWxlOiAnbXNvLWRpcmVjdGlvbi1hbHQ6YXV0bycKICAgICAgfTsKCiAgICAgIGlmIChtb2RlbCAmJiBtb2RlbC5ub3RlKSB7CiAgICAgICAgdmFyIF9yZWYgPSBtb2RlbC5ub3RlICYmIG1vZGVsLm5vdGUubWFyZ2lucywKICAg
ICAgICAgICAgaW5zZXQgPSBfcmVmLmluc2V0OwoKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpbnNldCkpIHsKICAgICAgICAgIGluc2V0ID0gaW5zZXQubWFwKGZ1bmN0aW9uIChtYXJnaW4pIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5jb252ZXJzaW9uVW5pdChtYXJnaW4sIDEwLCAnbW0nKTsKICAgICAgICAgIH0pLmpvaW4oJywnKTsKICAgICAgICB9CgogICAgICAgIGlmIChpbnNldCkgewogICAgICAgICAgYXR0cmlidXRlcy5pbnNldCA9IGluc2V0OwogICAgICAgIH0KICAgICAgfQoKICAgICAgeG1sU3RyZWFt
Lm9wZW5Ob2RlKCd2OnRleHRib3gnLCBhdHRyaWJ1dGVzKTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdkaXYnLCB7CiAgICAgICAgc3R5bGU6ICd0ZXh0LWFsaWduOmxlZnQnCiAgICAgIH0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAg
ICBpbnNldDogdGhpcy5yZXZlcnNlQ29udmVyc2lvblVuaXQobm9kZS5hdHRyaWJ1dGVzLmluc2V0KQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHN3aXRjaCAobmFt
ZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd2OnRleHRib3gnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFZtbFRleHRib3hYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBWbWxUZXh0Ym94WGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSw0Nzpb
ZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJv
bCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5l
UHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0g
fQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIg
JiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFz
cyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBl
ckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsg
fTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlz
ZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0
cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0g
PSByZXF1aXJlKCcuL2Jhc2UteGZvcm0nKTsKLyogJ3ZpcnR1YWwnIG1ldGhvZHMgdXNlZCBhcyBhIGZvcm0gb2YgZG9jdW1lbnRhdGlvbiAqLwoKLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqLwovLyBiYXNlIGNsYXNzIGZvciB4Zm9ybXMgdGhhdCBhcmUgY29tcG9zZWQgb2Ygb3RoZXIgeGZvcm1zCi8vIG9mZmVycyBzb21lIGRlZmF1bHQgaW1wbGVtZW50YXRpb25zCgoKdmFyIENvbXBvc2l0ZVhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKENv
bXBvc2l0ZVhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDb21wb3NpdGVYZm9ybSk7CgogIGZ1bmN0aW9uIENvbXBvc2l0ZVhmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvc2l0ZVhmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ29tcG9zaXRlWGZvcm0sIFt7CiAgICBrZXk6ICJjcmVhdGVOZXdNb2RlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTmV3TW9kZWwobm9kZSkgewog
ICAgICByZXR1cm4ge307CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICAvLyBUeXBpY2FsIHBhdHRlcm4gZm9yIGNvbXBvc2l0ZSB4Zm9ybQogICAgICB0aGlzLnBhcnNlciA9IHRoaXMucGFyc2VyIHx8IHRoaXMubWFwW25vZGUubmFtZV07CgogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIGlmIChub2RlLm5h
bWUgPT09IHRoaXMudGFnKSB7CiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMuY3JlYXRlTmV3TW9kZWwobm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIC8vIERlZmF1bHQgaW1wbGVtZW50YXRpb24uIFNlbmQgdGV4dCB0byBjaGlsZCBwYXJzZXIKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VU
ZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAib25QYXJzZXJDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25QYXJzZXJDbG9zZShuYW1lLCBwYXJzZXIpIHsKICAgICAgLy8gcGFyc2VDbG9zZSBoYXMgc2VlbiBhIGNoaWxkIHBhcnNlciBjbG9zZQogICAgICAvLyBub3cgbmVlZCB0byBpbmNvcnBvcmF0ZSBpbnRvIHRoaXMubW9kZWwgc29tZWhvdwogICAgICB0aGlzLm1vZGVsW25hbWVdID0gcGFyc2VyLm1vZGVsOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6
IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICAvLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uCiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5vblBhcnNlckNsb3NlKG5hbWUsIHRoaXMucGFyc2VyKTsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBuYW1lICE9PSB0aGlzLnRhZzsKICAgIH0KICB9XSk7
CgogIHJldHVybiBDb21wb3NpdGVYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBDb21wb3NpdGVYZm9ybTsKCn0seyIuL2Jhc2UteGZvcm0iOjMxfV0sNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5
cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5z
dGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBp
biBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsg
cmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6
IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1
cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1Rhcmdl
dCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fz
c2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVy
biBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBl
T2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIEFwcEhlYWRpbmdQYWlyc1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKEFwcEhlYWRpbmdQYWlyc1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBcHBIZWFkaW5nUGFpcnNYZm9ybSk7CgogIGZ1
bmN0aW9uIEFwcEhlYWRpbmdQYWlyc1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFwcEhlYWRpbmdQYWlyc1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQXBwSGVhZGluZ1BhaXJzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnSGVhZGluZ1BhaXJzJyk7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9k
ZSgndnQ6dmVjdG9yJywgewogICAgICAgIHNpemU6IDIsCiAgICAgICAgYmFzZVR5cGU6ICd2YXJpYW50JwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCd2dDp2YXJpYW50Jyk7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndnQ6bHBzdHInLCB1bmRlZmluZWQsICdXb3Jrc2hlZXRzJyk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCd2dDp2YXJpYW50Jyk7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndnQ6aTQnLCB1bmRlZmluZWQsIG1vZGVsLmxlbmd0
aCk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICAvLyBubyBwYXJzaW5nCiAgICAgIHJldHVybiBub2RlLm5hbWUgPT09ICdIZWFkaW5nUGFpcnMnOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9
LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgcmV0dXJuIG5hbWUgIT09ICdIZWFkaW5nUGFpcnMnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFwcEhlYWRpbmdQYWlyc1hmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IEFwcEhlYWRpbmdQYWlyc1hmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9i
aikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJv
dG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7
IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYg
KHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0
IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0
UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNO
YXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYg
KF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0
aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBm
YWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIEFwcFRpdGxlc09mUGFydHNYZm9ybSA9IC8qI19fUFVSRV9f
Ki9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhBcHBUaXRsZXNPZlBhcnRzWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEFwcFRpdGxlc09mUGFydHNYZm9ybSk7CgogIGZ1bmN0aW9uIEFwcFRpdGxlc09mUGFydHNYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBcHBUaXRsZXNPZlBhcnRzWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhBcHBUaXRsZXNPZlBhcnRzWGZvcm0s
IFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnVGl0bGVzT2ZQYXJ0cycpOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ3Z0OnZlY3RvcicsIHsKICAgICAgICBzaXplOiBtb2RlbC5sZW5ndGgsCiAgICAgICAgYmFzZVR5cGU6ICdscHN0cicKICAgICAgfSk7CiAgICAgIG1vZGVsLmZvckVhY2goZnVuY3Rpb24gKHNoZWV0KSB7CiAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCd2dDpscHN0cicsIHVuZGVm
aW5lZCwgc2hlZXQubmFtZSk7CiAgICAgIH0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIC8vIG5vIHBhcnNpbmcKICAgICAgcmV0dXJuIG5vZGUubmFtZSA9PT0gJ1RpdGxlc09mUGFydHMnOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7
CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgcmV0dXJuIG5hbWUgIT09ICdUaXRsZXNPZlBhcnRzJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBBcHBUaXRsZXNPZlBhcnRzWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQXBwVGl0bGVzT2ZQYXJ0c1hmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9i
aikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJv
dG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7
IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYg
KHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0
IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0
UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNO
YXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYg
KF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0
aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBm
YWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgWG1sU3RyZWFtID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbScpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4u
L2Jhc2UteGZvcm0nKTsKCnZhciBTdHJpbmdYZm9ybSA9IHJlcXVpcmUoJy4uL3NpbXBsZS9zdHJpbmcteGZvcm0nKTsKCnZhciBBcHBIZWFkaW5nUGFpcnNYZm9ybSA9IHJlcXVpcmUoJy4vYXBwLWhlYWRpbmctcGFpcnMteGZvcm0nKTsKCnZhciBBcHBUaXRsZU9mUGFydHNYZm9ybSA9IHJlcXVpcmUoJy4vYXBwLXRpdGxlcy1vZi1wYXJ0cy14Zm9ybScpOwoKdmFyIEFwcFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKEFwcFhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9z
dXBlciA9IF9jcmVhdGVTdXBlcihBcHBYZm9ybSk7CgogIGZ1bmN0aW9uIEFwcFhmb3JtKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBcHBYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgQ29tcGFueTogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdDb21wYW55JwogICAgICB9KSwKICAgICAgTWFuYWdlcjogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdNYW5hZ2VyJwogICAgICB9KSwKICAgICAgSGVh
ZGluZ1BhaXJzOiBuZXcgQXBwSGVhZGluZ1BhaXJzWGZvcm0oKSwKICAgICAgVGl0bGVPZlBhcnRzOiBuZXcgQXBwVGl0bGVPZlBhcnRzWGZvcm0oKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhBcHBYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5YbWwoWG1sU3RyZWFtLlN0ZERvY0F0dHJpYnV0ZXMpOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ1Byb3BlcnRpZXMn
LCBBcHBYZm9ybS5QUk9QRVJUWV9BVFRSSUJVVEVTKTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdBcHBsaWNhdGlvbicsIHVuZGVmaW5lZCwgJ01pY3Jvc29mdCBFeGNlbCcpOwogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ0RvY1NlY3VyaXR5JywgdW5kZWZpbmVkLCAnMCcpOwogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ1NjYWxlQ3JvcCcsIHVuZGVmaW5lZCwgJ2ZhbHNlJyk7CiAgICAgIHRoaXMubWFwLkhlYWRpbmdQYWlycy5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC53b3Jrc2hlZXRzKTsKICAgICAgdGhpcy5tYXAu
VGl0bGVPZlBhcnRzLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLndvcmtzaGVldHMpOwogICAgICB0aGlzLm1hcC5Db21wYW55LnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNvbXBhbnkgfHwgJycpOwogICAgICB0aGlzLm1hcC5NYW5hZ2VyLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLm1hbmFnZXIpOwogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ0xpbmtzVXBUb0RhdGUnLCB1bmRlZmluZWQsICdmYWxzZScpOwogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ1NoYXJlZERvYycsIHVuZGVmaW5lZCwgJ2ZhbHNlJyk7CiAgICAgIHht
bFN0cmVhbS5sZWFmTm9kZSgnSHlwZXJsaW5rc0NoYW5nZWQnLCB1bmRlZmluZWQsICdmYWxzZScpOwogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ0FwcFZlcnNpb24nLCB1bmRlZmluZWQsICcxNi4wMzAwJyk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4g
dHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAgICAgICBjYXNlICdQcm9wZXJ0aWVzJzoKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwoKICAgICAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfSAvLyB0aGVyZSdzIGEgbG90IHdlIGRvbid0IGJvdGhlciB0byBw
YXJzZQoKCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMu
cGFyc2VyLnBhcnNlQ2xvc2UobmFtZSkpIHsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgJ1Byb3BlcnRpZXMnOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgICAgd29ya3NoZWV0czogdGhpcy5tYXAuVGl0bGVPZlBhcnRzLm1vZGVsLAogICAgICAgICAgICBjb21wYW55OiB0aGlzLm1hcC5Db21wYW55Lm1vZGVsLAogICAgICAgICAgICBtYW5hZ2VyOiB0aGlz
Lm1hcC5NYW5hZ2VyLm1vZGVsCiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBBcHBYZm9ybTsKfShCYXNlWGZvcm0pOwoKQXBwWGZvcm0uRGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIChkdCkgewogIHJldHVybiBkdC50b0lTT1N0cmluZygpLnJlcGxhY2UoL1suXVxkezMsNn0vLCAnJyk7Cn07CgpBcHBYZm9ybS5EYXRlQXR0cnMgPSB7CiAgJ3hzaTp0eXBlJzogJ2RjdGVybXM6VzNDRFRG
Jwp9OwpBcHBYZm9ybS5QUk9QRVJUWV9BVFRSSUJVVEVTID0gewogIHhtbG5zOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZXh0ZW5kZWQtcHJvcGVydGllcycsCiAgJ3htbG5zOnZ0JzogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2RvY1Byb3BzVlR5cGVzJwp9Owptb2R1bGUuZXhwb3J0cyA9IEFwcFhmb3JtOwoKfSx7Ii4uLy4uLy4uL3V0aWxzL3htbC1zdHJlYW0iOjI3LCIuLi9iYXNlLXhmb3JtIjozMSwiLi4vc2lt
cGxlL3N0cmluZy14Zm9ybSI6MTE4LCIuL2FwcC1oZWFkaW5nLXBhaXJzLXhmb3JtIjo0OCwiLi9hcHAtdGl0bGVzLW9mLXBhcnRzLXhmb3JtIjo0OX1dLDUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7
IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29u
c3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRv
cikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25z
dHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywg
d3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVk
KSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2Ug
eyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5p
dGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlm
ICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0
dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIFhtbFN0cmVhbSA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL3htbC1zdHJlYW0nKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7IC8vIHVzZWQgZm9yIHJlbmRlcmluZyB0aGUgW0NvbnRlbnRfVHlwZXNdLnhtbCBmaWxlCi8vIG5vdCB1c2VkIGZvciBwYXJzaW5nCgoKdmFyIENvbnRlbnRUeXBlc1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChf
QmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKENvbnRlbnRUeXBlc1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDb250ZW50VHlwZXNYZm9ybSk7CgogIGZ1bmN0aW9uIENvbnRlbnRUeXBlc1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRlbnRUeXBlc1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ29udGVudFR5cGVzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6
IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuWG1sKFhtbFN0cmVhbS5TdGREb2NBdHRyaWJ1dGVzKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdUeXBlcycsIENvbnRlbnRUeXBlc1hmb3JtLlBST1BFUlRZX0FUVFJJQlVURVMpOwogICAgICB2YXIgbWVkaWFIYXNoID0ge307CiAgICAgIChtb2RlbC5tZWRpYSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAobWVkaXVtKSB7CiAgICAgICAgaWYgKG1lZGl1bS50eXBlID09PSAnaW1hZ2UnKSB7CiAgICAgICAgICB2YXIgaW1h
Z2VUeXBlID0gbWVkaXVtLmV4dGVuc2lvbjsKCiAgICAgICAgICBpZiAoIW1lZGlhSGFzaFtpbWFnZVR5cGVdKSB7CiAgICAgICAgICAgIG1lZGlhSGFzaFtpbWFnZVR5cGVdID0gdHJ1ZTsKICAgICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdEZWZhdWx0JywgewogICAgICAgICAgICAgIEV4dGVuc2lvbjogaW1hZ2VUeXBlLAogICAgICAgICAgICAgIENvbnRlbnRUeXBlOiAiaW1hZ2UvIi5jb25jYXQoaW1hZ2VUeXBlKQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICB4bWxT
dHJlYW0ubGVhZk5vZGUoJ0RlZmF1bHQnLCB7CiAgICAgICAgRXh0ZW5zaW9uOiAncmVscycsCiAgICAgICAgQ29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtcGFja2FnZS5yZWxhdGlvbnNoaXBzK3htbCcKICAgICAgfSk7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnRGVmYXVsdCcsIHsKICAgICAgICBFeHRlbnNpb246ICd4bWwnLAogICAgICAgIENvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veG1sJwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdPdmVycmlkZScsIHsKICAg
ICAgICBQYXJ0TmFtZTogJy94bC93b3JrYm9vay54bWwnLAogICAgICAgIENvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQubWFpbit4bWwnCiAgICAgIH0pOwogICAgICBtb2RlbC53b3Jrc2hlZXRzLmZvckVhY2goZnVuY3Rpb24gKHdvcmtzaGVldCkgewogICAgICAgIHZhciBuYW1lID0gIi94bC93b3Jrc2hlZXRzL3NoZWV0Ii5jb25jYXQod29ya3NoZWV0LmlkLCAiLnhtbCIpOwogICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnT3Zl
cnJpZGUnLCB7CiAgICAgICAgICBQYXJ0TmFtZTogbmFtZSwKICAgICAgICAgIENvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwud29ya3NoZWV0K3htbCcKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnT3ZlcnJpZGUnLCB7CiAgICAgICAgUGFydE5hbWU6ICcveGwvdGhlbWUvdGhlbWUxLnhtbCcsCiAgICAgICAgQ29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9j
dW1lbnQudGhlbWUreG1sJwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdPdmVycmlkZScsIHsKICAgICAgICBQYXJ0TmFtZTogJy94bC9zdHlsZXMueG1sJywKICAgICAgICBDb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnN0eWxlcyt4bWwnCiAgICAgIH0pOwogICAgICB2YXIgaGFzU2hhcmVkU3RyaW5ncyA9IG1vZGVsLnNoYXJlZFN0cmluZ3MgJiYgbW9kZWwuc2hhcmVkU3RyaW5ncy5jb3VudDsKCiAgICAgIGlmIChoYXNT
aGFyZWRTdHJpbmdzKSB7CiAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdPdmVycmlkZScsIHsKICAgICAgICAgIFBhcnROYW1lOiAnL3hsL3NoYXJlZFN0cmluZ3MueG1sJywKICAgICAgICAgIENvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hhcmVkU3RyaW5ncyt4bWwnCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC50YWJsZXMpIHsKICAgICAgICBtb2RlbC50YWJsZXMuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHsK
ICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnT3ZlcnJpZGUnLCB7CiAgICAgICAgICAgIFBhcnROYW1lOiAiL3hsL3RhYmxlcy8iLmNvbmNhdCh0YWJsZS50YXJnZXQpLAogICAgICAgICAgICBDb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRhYmxlK3htbCcKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAobW9kZWwuZHJhd2luZ3MpIHsKICAgICAgICBtb2RlbC5kcmF3aW5ncy5mb3JFYWNoKGZ1bmN0aW9u
IChkcmF3aW5nKSB7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ092ZXJyaWRlJywgewogICAgICAgICAgICBQYXJ0TmFtZTogIi94bC9kcmF3aW5ncy8iLmNvbmNhdChkcmF3aW5nLm5hbWUsICIueG1sIiksCiAgICAgICAgICAgIENvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmcreG1sJwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5jb21tZW50UmVmcykgewogICAgICAgIHhtbFN0cmVhbS5sZWFmTm9k
ZSgnRGVmYXVsdCcsIHsKICAgICAgICAgIEV4dGVuc2lvbjogJ3ZtbCcsCiAgICAgICAgICBDb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC52bWxEcmF3aW5nJwogICAgICAgIH0pOwogICAgICAgIG1vZGVsLmNvbW1lbnRSZWZzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICAgIHZhciBjb21tZW50TmFtZSA9IF9yZWYuY29tbWVudE5hbWU7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ092ZXJyaWRlJywgewogICAgICAgICAgICBQYXJ0TmFtZTog
Ii94bC8iLmNvbmNhdChjb21tZW50TmFtZSwgIi54bWwiKSwKICAgICAgICAgICAgQ29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jb21tZW50cyt4bWwnCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdPdmVycmlkZScsIHsKICAgICAgICBQYXJ0TmFtZTogJy9kb2NQcm9wcy9jb3JlLnhtbCcsCiAgICAgICAgQ29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1h
dHMtcGFja2FnZS5jb3JlLXByb3BlcnRpZXMreG1sJwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdPdmVycmlkZScsIHsKICAgICAgICBQYXJ0TmFtZTogJy9kb2NQcm9wcy9hcHAueG1sJywKICAgICAgICBDb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5leHRlbmRlZC1wcm9wZXJ0aWVzK3htbCcKICAgICAgfSk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1
bmN0aW9uIHBhcnNlT3BlbigpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ29udGVudFR5cGVzWGZvcm07Cn0oQmFzZVhmb3JtKTsKCkNvbnRlbnRUeXBlc1hmb3JtLlBST1BFUlRZX0FUVFJJQlVURVMgPSB7CiAgeG1s
bnM6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L2NvbnRlbnQtdHlwZXMnCn07Cm1vZHVsZS5leHBvcnRzID0gQ29udGVudFR5cGVzWGZvcm07Cgp9LHsiLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbSI6MjcsIi4uL2Jhc2UteGZvcm0iOjMxfV0sNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAm
JiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0
aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51
bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7
IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3Jl
YXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyBy
ZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29u
c3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1
cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVm
bGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Qu
c2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgWG1sU3RyZWFtID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbScpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBEYXRlWGZvcm0gPSByZXF1aXJlKCcuLi9zaW1wbGUvZGF0ZS14Zm9ybScpOwoK
dmFyIFN0cmluZ1hmb3JtID0gcmVxdWlyZSgnLi4vc2ltcGxlL3N0cmluZy14Zm9ybScpOwoKdmFyIEludGVnZXJYZm9ybSA9IHJlcXVpcmUoJy4uL3NpbXBsZS9pbnRlZ2VyLXhmb3JtJyk7Cgp2YXIgQ29yZVhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKENvcmVYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ29yZVhmb3JtKTsKCiAgZnVuY3Rpb24gQ29yZVhmb3JtKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVj
ayh0aGlzLCBDb3JlWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgICdkYzpjcmVhdG9yJzogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdkYzpjcmVhdG9yJwogICAgICB9KSwKICAgICAgJ2RjOnRpdGxlJzogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdkYzp0aXRsZScKICAgICAgfSksCiAgICAgICdkYzpzdWJqZWN0JzogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdkYzpzdWJqZWN0JwogICAgICB9KSwKICAgICAgJ2RjOmRl
c2NyaXB0aW9uJzogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdkYzpkZXNjcmlwdGlvbicKICAgICAgfSksCiAgICAgICdkYzppZGVudGlmaWVyJzogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdkYzppZGVudGlmaWVyJwogICAgICB9KSwKICAgICAgJ2RjOmxhbmd1YWdlJzogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdkYzpsYW5ndWFnZScKICAgICAgfSksCiAgICAgICdjcDprZXl3b3Jkcyc6IG5ldyBTdHJpbmdYZm9ybSh7CiAgICAgICAgdGFnOiAnY3A6a2V5d29yZHMnCiAgICAgIH0p
LAogICAgICAnY3A6Y2F0ZWdvcnknOiBuZXcgU3RyaW5nWGZvcm0oewogICAgICAgIHRhZzogJ2NwOmNhdGVnb3J5JwogICAgICB9KSwKICAgICAgJ2NwOmxhc3RNb2RpZmllZEJ5JzogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdjcDpsYXN0TW9kaWZpZWRCeScKICAgICAgfSksCiAgICAgICdjcDpsYXN0UHJpbnRlZCc6IG5ldyBEYXRlWGZvcm0oewogICAgICAgIHRhZzogJ2NwOmxhc3RQcmludGVkJywKICAgICAgICBmb3JtYXQ6IENvcmVYZm9ybS5EYXRlRm9ybWF0CiAgICAgIH0pLAogICAgICAnY3A6cmV2aXNp
b24nOiBuZXcgSW50ZWdlclhmb3JtKHsKICAgICAgICB0YWc6ICdjcDpyZXZpc2lvbicKICAgICAgfSksCiAgICAgICdjcDp2ZXJzaW9uJzogbmV3IFN0cmluZ1hmb3JtKHsKICAgICAgICB0YWc6ICdjcDp2ZXJzaW9uJwogICAgICB9KSwKICAgICAgJ2NwOmNvbnRlbnRTdGF0dXMnOiBuZXcgU3RyaW5nWGZvcm0oewogICAgICAgIHRhZzogJ2NwOmNvbnRlbnRTdGF0dXMnCiAgICAgIH0pLAogICAgICAnY3A6Y29udGVudFR5cGUnOiBuZXcgU3RyaW5nWGZvcm0oewogICAgICAgIHRhZzogJ2NwOmNvbnRlbnRUeXBlJwogICAgICB9
KSwKICAgICAgJ2RjdGVybXM6Y3JlYXRlZCc6IG5ldyBEYXRlWGZvcm0oewogICAgICAgIHRhZzogJ2RjdGVybXM6Y3JlYXRlZCcsCiAgICAgICAgYXR0cnM6IENvcmVYZm9ybS5EYXRlQXR0cnMsCiAgICAgICAgZm9ybWF0OiBDb3JlWGZvcm0uRGF0ZUZvcm1hdAogICAgICB9KSwKICAgICAgJ2RjdGVybXM6bW9kaWZpZWQnOiBuZXcgRGF0ZVhmb3JtKHsKICAgICAgICB0YWc6ICdkY3Rlcm1zOm1vZGlmaWVkJywKICAgICAgICBhdHRyczogQ29yZVhmb3JtLkRhdGVBdHRycywKICAgICAgICBmb3JtYXQ6IENvcmVYZm9ybS5EYXRl
Rm9ybWF0CiAgICAgIH0pCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENvcmVYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5YbWwoWG1sU3RyZWFtLlN0ZERvY0F0dHJpYnV0ZXMpOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ2NwOmNvcmVQcm9wZXJ0aWVzJywgQ29yZVhmb3JtLkNPUkVfUFJPUEVSVFlfQVRUUklCVVRFUyk7CiAgICAgIHRoaXMubWFwWydkYzpjcmVh
dG9yJ10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuY3JlYXRvcik7CiAgICAgIHRoaXMubWFwWydkYzp0aXRsZSddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLnRpdGxlKTsKICAgICAgdGhpcy5tYXBbJ2RjOnN1YmplY3QnXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5zdWJqZWN0KTsKICAgICAgdGhpcy5tYXBbJ2RjOmRlc2NyaXB0aW9uJ10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuZGVzY3JpcHRpb24pOwogICAgICB0aGlzLm1hcFsnZGM6aWRlbnRpZmllciddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmlkZW50aWZpZXIp
OwogICAgICB0aGlzLm1hcFsnZGM6bGFuZ3VhZ2UnXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5sYW5ndWFnZSk7CiAgICAgIHRoaXMubWFwWydjcDprZXl3b3JkcyddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmtleXdvcmRzKTsKICAgICAgdGhpcy5tYXBbJ2NwOmNhdGVnb3J5J10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuY2F0ZWdvcnkpOwogICAgICB0aGlzLm1hcFsnY3A6bGFzdE1vZGlmaWVkQnknXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5sYXN0TW9kaWZpZWRCeSk7CiAgICAgIHRoaXMubWFwWydjcDpsYXN0UHJp
bnRlZCddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmxhc3RQcmludGVkKTsKICAgICAgdGhpcy5tYXBbJ2NwOnJldmlzaW9uJ10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwucmV2aXNpb24pOwogICAgICB0aGlzLm1hcFsnY3A6dmVyc2lvbiddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLnZlcnNpb24pOwogICAgICB0aGlzLm1hcFsnY3A6Y29udGVudFN0YXR1cyddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNvbnRlbnRTdGF0dXMpOwogICAgICB0aGlzLm1hcFsnY3A6Y29udGVudFR5cGUnXS5yZW5kZXIoeG1sU3RyZWFtLCBt
b2RlbC5jb250ZW50VHlwZSk7CiAgICAgIHRoaXMubWFwWydkY3Rlcm1zOmNyZWF0ZWQnXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5jcmVhdGVkKTsKICAgICAgdGhpcy5tYXBbJ2RjdGVybXM6bW9kaWZpZWQnXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5tb2RpZmllZCk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFy
c2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAgICAgICBjYXNlICdjcDpjb3JlUHJvcGVydGllcyc6CiAgICAgICAgY2FzZSAnY29yZVByb3BlcnRpZXMnOgogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwW25vZGUubmFtZV07CgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsK
ICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIHhtbCBub2RlIGluIHBhcnNlT3BlbjogIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkobm9kZSkpKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAg
a2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSAnY3A6Y29yZVByb3BlcnRpZXMnOgogICAgICAgIGNhc2UgJ2NvcmVQcm9wZXJ0aWVzJzoKICAgICAgICAg
IHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIGNyZWF0b3I6IHRoaXMubWFwWydkYzpjcmVhdG9yJ10ubW9kZWwsCiAgICAgICAgICAgIHRpdGxlOiB0aGlzLm1hcFsnZGM6dGl0bGUnXS5tb2RlbCwKICAgICAgICAgICAgc3ViamVjdDogdGhpcy5tYXBbJ2RjOnN1YmplY3QnXS5tb2RlbCwKICAgICAgICAgICAgZGVzY3JpcHRpb246IHRoaXMubWFwWydkYzpkZXNjcmlwdGlvbiddLm1vZGVsLAogICAgICAgICAgICBpZGVudGlmaWVyOiB0aGlzLm1hcFsnZGM6aWRlbnRpZmllciddLm1vZGVsLAogICAgICAgICAgICBsYW5ndWFn
ZTogdGhpcy5tYXBbJ2RjOmxhbmd1YWdlJ10ubW9kZWwsCiAgICAgICAgICAgIGtleXdvcmRzOiB0aGlzLm1hcFsnY3A6a2V5d29yZHMnXS5tb2RlbCwKICAgICAgICAgICAgY2F0ZWdvcnk6IHRoaXMubWFwWydjcDpjYXRlZ29yeSddLm1vZGVsLAogICAgICAgICAgICBsYXN0TW9kaWZpZWRCeTogdGhpcy5tYXBbJ2NwOmxhc3RNb2RpZmllZEJ5J10ubW9kZWwsCiAgICAgICAgICAgIGxhc3RQcmludGVkOiB0aGlzLm1hcFsnY3A6bGFzdFByaW50ZWQnXS5tb2RlbCwKICAgICAgICAgICAgcmV2aXNpb246IHRoaXMubWFwWydjcDpy
ZXZpc2lvbiddLm1vZGVsLAogICAgICAgICAgICBjb250ZW50U3RhdHVzOiB0aGlzLm1hcFsnY3A6Y29udGVudFN0YXR1cyddLm1vZGVsLAogICAgICAgICAgICBjb250ZW50VHlwZTogdGhpcy5tYXBbJ2NwOmNvbnRlbnRUeXBlJ10ubW9kZWwsCiAgICAgICAgICAgIGNyZWF0ZWQ6IHRoaXMubWFwWydkY3Rlcm1zOmNyZWF0ZWQnXS5tb2RlbCwKICAgICAgICAgICAgbW9kaWZpZWQ6IHRoaXMubWFwWydkY3Rlcm1zOm1vZGlmaWVkJ10ubW9kZWwKICAgICAgICAgIH07CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRl
ZmF1bHQ6CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVuZXhwZWN0ZWQgeG1sIG5vZGUgaW4gcGFyc2VDbG9zZTogIi5jb25jYXQobmFtZSkpOwogICAgICB9CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ29yZVhmb3JtOwp9KEJhc2VYZm9ybSk7CgpDb3JlWGZvcm0uRGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIChkdCkgewogIHJldHVybiBkdC50b0lTT1N0cmluZygpLnJlcGxhY2UoL1suXVxkezN9LywgJycpOwp9OwoKQ29yZVhmb3JtLkRhdGVBdHRycyA9IHsKICAneHNpOnR5cGUnOiAnZGN0ZXJtczpXM0NEVEYnCn07CkNvcmVY
Zm9ybS5DT1JFX1BST1BFUlRZX0FUVFJJQlVURVMgPSB7CiAgJ3htbG5zOmNwJzogJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvbWV0YWRhdGEvY29yZS1wcm9wZXJ0aWVzJywKICAneG1sbnM6ZGMnOiAnaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8nLAogICd4bWxuczpkY3Rlcm1zJzogJ2h0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy8nLAogICd4bWxuczpkY21pdHlwZSc6ICdodHRwOi8vcHVybC5vcmcvZGMvZGNtaXR5cGUvJywKICAneG1sbnM6eHNpJzogJ2h0dHA6Ly93d3cu
dzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlJwp9Owptb2R1bGUuZXhwb3J0cyA9IENvcmVYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy94bWwtc3RyZWFtIjoyNywiLi4vYmFzZS14Zm9ybSI6MzEsIi4uL3NpbXBsZS9kYXRlLXhmb3JtIjoxMTYsIi4uL3NpbXBsZS9pbnRlZ2VyLXhmb3JtIjoxMTcsIi4uL3NpbXBsZS9zdHJpbmcteGZvcm0iOjExOH1dLDUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0g
dHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlw
ZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3Bz
W2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJv
cGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1
bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9u
IF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkg
eyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2Jq
ZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7
IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dl
dFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBSZWxhdGlvbnNoaXBYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewog
IF9pbmhlcml0cyhSZWxhdGlvbnNoaXBYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUmVsYXRpb25zaGlwWGZvcm0pOwoKICBmdW5jdGlvbiBSZWxhdGlvbnNoaXBYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWxhdGlvbnNoaXBYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFJlbGF0aW9uc2hpcFhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5k
ZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ1JlbGF0aW9uc2hpcCcsIG1vZGVsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSAnUmVsYXRpb25zaGlwJzoKICAgICAgICAgIHRoaXMubW9kZWwgPSBub2RlLmF0dHJpYnV0ZXM7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBm
YWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUmVsYXRpb25zaGlwWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gUmVsYXRpb25zaGlwWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSw1NDpbZnVuY3Rpb24o
cmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1
bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGll
cyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rp
b24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJD
bGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1
bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFs
KCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVu
Y3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBl
cigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRl
LCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBYbWxTdHJlYW0gPSByZXF1aXJl
KCcuLi8uLi8uLi91dGlscy94bWwtc3RyZWFtJyk7Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFJlbGF0aW9uc2hpcFhmb3JtID0gcmVxdWlyZSgnLi9yZWxhdGlvbnNoaXAteGZvcm0nKTsKCnZhciBSZWxhdGlvbnNoaXBzWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoUmVsYXRpb25zaGlwc1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihSZWxhdGlvbnNoaXBzWGZvcm0pOwoKICBmdW5jdGlv
biBSZWxhdGlvbnNoaXBzWGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbGF0aW9uc2hpcHNYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgUmVsYXRpb25zaGlwOiBuZXcgUmVsYXRpb25zaGlwWGZvcm0oKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhSZWxhdGlvbnNoaXBzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxT
dHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgbW9kZWwgPSBtb2RlbCB8fCB0aGlzLl92YWx1ZXM7CiAgICAgIHhtbFN0cmVhbS5vcGVuWG1sKFhtbFN0cmVhbS5TdGREb2NBdHRyaWJ1dGVzKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdSZWxhdGlvbnNoaXBzJywgUmVsYXRpb25zaGlwc1hmb3JtLlJFTEFUSU9OU0hJUFNfQVRUUklCVVRFUyk7CiAgICAgIG1vZGVsLmZvckVhY2goZnVuY3Rpb24gKHJlbGF0aW9uc2hpcCkgewogICAgICAgIF90aGlzMi5tYXAuUmVsYXRpb25zaGlwLnJl
bmRlcih4bWxTdHJlYW0sIHJlbGF0aW9uc2hpcCk7CiAgICAgIH0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSAnUmVsYXRpb25zaGlwcyc6CiAgICAgICAg
ICB0aGlzLm1vZGVsID0gW107CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5tYXBbbm9kZS5uYW1lXTsKCiAgICAgICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVuZXhwZWN0ZWQgeG1sIG5vZGUgaW4gcGFyc2VPcGVuOiAiLmNvbmNhdChKU09OLnN0cmluZ2lmeShu
b2RlKSkpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUp
KSB7CiAgICAgICAgICB0aGlzLm1vZGVsLnB1c2godGhpcy5wYXJzZXIubW9kZWwpOwogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSAnUmVsYXRpb25zaGlwcyc6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVuZXhwZWN0ZWQgeG1sIG5vZGUgaW4gcGFyc2VDbG9zZTogIi5jb25jYXQobmFtZSkpOwog
ICAgICB9CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUmVsYXRpb25zaGlwc1hmb3JtOwp9KEJhc2VYZm9ybSk7CgpSZWxhdGlvbnNoaXBzWGZvcm0uUkVMQVRJT05TSElQU19BVFRSSUJVVEVTID0gewogIHhtbG5zOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9yZWxhdGlvbnNoaXBzJwp9Owptb2R1bGUuZXhwb3J0cyA9IFJlbGF0aW9uc2hpcHNYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy94bWwtc3RyZWFtIjoyNywiLi4vYmFzZS14Zm9ybSI6MzEsIi4vcmVsYXRpb25zaGlwLXhmb3Jt
Ijo1M31dLDU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0
eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0
aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNj
cmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0g
ImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNz
LCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24g
X2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlz
LCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVl
biBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJl
ZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFy
IEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBCYXNlQ2VsbEFuY2hvclhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKEJhc2VDZWxsQW5jaG9yWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEJhc2VDZWxsQW5jaG9yWGZvcm0pOwoKICBmdW5jdGlvbiBCYXNlQ2VsbEFuY2hvclhmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VDZWxsQW5jaG9yWGZvcm0pOwoKICAgIHJldHVybiBfc3Vw
ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhCYXNlQ2VsbEFuY2hvclhmb3JtLCBbewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAg
ICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIHJhbmdlOiB7CiAgICAgICAgICAgICAgZWRpdEFzOiBub2RlLmF0dHJpYnV0ZXMuZWRpdEFzIHx8ICdvbmVDZWxsJwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwW25vZGUubmFtZV07CgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIH0KCiAgICAgICAg
ICBicmVhazsKICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGVQaWN0dXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWNvbmNpbGVQaWN0dXJlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIGlmIChtb2RlbCAmJiBtb2Rl
bC5ySWQpIHsKICAgICAgICB2YXIgcmVsID0gb3B0aW9ucy5yZWxzW21vZGVsLnJJZF07CiAgICAgICAgdmFyIG1hdGNoID0gcmVsLlRhcmdldC5tYXRjaCgvLipcL21lZGlhXC8oLitbLl1bYS16QS1aXXszLDR9KS8pOwoKICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgIHZhciBuYW1lID0gbWF0Y2hbMV07CiAgICAgICAgICB2YXIgbWVkaWFJZCA9IG9wdGlvbnMubWVkaWFJbmRleFtuYW1lXTsKICAgICAgICAgIHJldHVybiBvcHRpb25zLm1lZGlhW21lZGlhSWRdOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJu
IHVuZGVmaW5lZDsKICAgIH0KICB9XSk7CgogIHJldHVybiBCYXNlQ2VsbEFuY2hvclhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IEJhc2VDZWxsQW5jaG9yWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSw1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09
ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNl
LCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9y
LmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJv
cGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNz
LnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3Rv
dHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5j
b25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhp
c0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNl
OyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQ
cm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgQmxpcFhmb3JtID0gcmVxdWlyZSgnLi9ibGlwLXhmb3JtJyk7Cgp2YXIgQmxpcEZpbGxYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhCbGlwRmlsbFhmb3JtLCBfQmFzZVhm
b3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihCbGlwRmlsbFhmb3JtKTsKCiAgZnVuY3Rpb24gQmxpcEZpbGxYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmxpcEZpbGxYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ2E6YmxpcCc6IG5ldyBCbGlwWGZvcm0oKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhCbGlwRmlsbFhmb3JtLCBbewogICAga2V5OiAicmVuZGVy
IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcpOwogICAgICB0aGlzLm1hcFsnYTpibGlwJ10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpOyAvLyBUT0RPOiBvcHRpb25zIGZvciB0aGlzICsgcGFyc2luZwoKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdhOnN0cmV0Y2gnKTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdhOmZpbGxSZWN0Jyk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgICAgeG1sU3RyZWFtLmNs
b3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLnJlc2V0KCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRoaXMu
cGFyc2VyID0gdGhpcy5tYXBbbm9kZS5uYW1lXTsKCiAgICAgICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAg
ICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm1hcFsnYTpibGlwJ10ubW9kZWw7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gdHJ1
ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4ZHI6YmxpcEZpbGwnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEJsaXBGaWxsWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQmxpcEZpbGxYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMSwiLi9ibGlwLXhmb3JtIjo1N31dLDU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsg
IkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlw
ZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIg
ZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90
b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRo
ZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3Rv
dHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZl
UmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlw
ZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJl
ZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7
IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBCbGlwWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNl
WGZvcm0pIHsKICBfaW5oZXJpdHMoQmxpcFhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihCbGlwWGZvcm0pOwoKICBmdW5jdGlvbiBCbGlwWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmxpcFhmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQmxpcFhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4
bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIHsKICAgICAgICAneG1sbnM6cic6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzJywKICAgICAgICAncjplbWJlZCc6IG1vZGVsLnJJZCwKICAgICAgICBjc3RhdGU6ICdwcmludCcKICAgICAgfSk7IC8vIFRPRE86IGhhbmRsZSBjaGlsZHJlbiAoZS5nLiBhOmV4dExzdD0+YTpleHQ9PmExNDp1c2VMb2NhbERwaQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rp
b24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgICAgcklkOiBub2RlLmF0dHJpYnV0ZXNbJ3I6ZW1iZWQnXQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwg
ewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAvLyB1bnByb2Nlc3NlZCBpbnRlcm5hbCBub2RlcwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnYTpibGlwJzsK
ICAgIH0KICB9XSk7CgogIHJldHVybiBCbGlwWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQmxpcFhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24g
X3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2Ug
aW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVl
IiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3Bz
KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFs
dWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0
ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1Rh
cmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24g
X2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJl
dHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90
eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIENOdlBpY1ByWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoQ052UGljUHJYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ052UGljUHJYZm9ybSk7CgogIGZ1bmN0aW9uIENOdlBpY1ByWGZv
cm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ052UGljUHJYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENOdlBpY1ByWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0pIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnKTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdhOnBpY0xvY2tzJywgewogICAgICAgIG5vQ2hhbmdlQXNwZWN0OiAnMScKICAgICAg
fSk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAg
fSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAvLyB1bnByb2Nlc3NlZCBpbnRlcm5hbCBub2RlcwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAneGRyOmNO
dlBpY1ByJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBDTnZQaWNQclhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IENOdlBpY1ByWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSw1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90
eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikg
eyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9
IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1
Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBj
b25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9
CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIs
IGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNl
bGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5j
b25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1
bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgSGxpY2tDbGlja1hmb3JtID0gcmVxdWlyZSgnLi9obGluay1jbGljay14Zm9ybScpOwoKdmFyIEV4dExzdFhmb3JtID0gcmVxdWlyZSgnLi9leHQtbHN0LXhmb3JtJyk7Cgp2YXIgQ052UHJYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VY
Zm9ybSkgewogIF9pbmhlcml0cyhDTnZQclhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDTnZQclhmb3JtKTsKCiAgZnVuY3Rpb24gQ052UHJYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ052UHJYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ2E6aGxpbmtDbGljayc6IG5ldyBIbGlja0NsaWNrWGZvcm0oKSwKICAgICAgJ2E6ZXh0THN0JzogbmV3IEV4dExzdFhmb3JtKCkK
ICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ052UHJYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCB7CiAgICAgICAgaWQ6IG1vZGVsLmluZGV4LAogICAgICAgIG5hbWU6ICJQaWN0dXJlICIuY29uY2F0KG1vZGVsLmluZGV4KQogICAgICB9KTsKICAgICAgdGhpcy5tYXBbJ2E6aGxpbmtDbGljayddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsK
ICAgICAgdGhpcy5tYXBbJ2E6ZXh0THN0J10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAg
ICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwoKICAgICAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30K
ICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMubWFwWydhOmhsaW5r
Q2xpY2snXS5tb2RlbDsKICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3hkcjpjTnZQcic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ052UHJYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBDTnZQclhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxLCIuL2V4dC1sc3QteGZvcm0iOjYyLCIuL2hsaW5r
LWNsaWNrLXhmb3JtIjo2NH1dLDYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0
dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIp
OyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0
b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3Vw
ZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlw
ZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1
cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3Rv
clJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhp
cyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0
cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVP
ZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBJbnRlZ2VyWGZvcm0gPSByZXF1aXJlKCcuLi9zaW1wbGUvaW50ZWdlci14Zm9ybScpOwoKdmFyIENlbGxQb3NpdGlvblhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKENlbGxQb3NpdGlvblhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDZWxsUG9zaXRpb25YZm9ybSk7CgogIGZ1bmN0aW9uIENlbGxQb3NpdGlvblhmb3JtKG9wdGlvbnMp
IHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2VsbFBvc2l0aW9uWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy50YWcgPSBvcHRpb25zLnRhZzsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ3hkcjpjb2wnOiBuZXcgSW50ZWdlclhmb3JtKHsKICAgICAgICB0YWc6ICd4ZHI6Y29sJywKICAgICAgICB6ZXJvOiB0cnVlCiAgICAgIH0pLAogICAgICAneGRyOmNvbE9mZic6IG5ldyBJbnRlZ2VyWGZvcm0oewogICAgICAgIHRhZzogJ3hkcjpjb2xPZmYnLAog
ICAgICAgIHplcm86IHRydWUKICAgICAgfSksCiAgICAgICd4ZHI6cm93JzogbmV3IEludGVnZXJYZm9ybSh7CiAgICAgICAgdGFnOiAneGRyOnJvdycsCiAgICAgICAgemVybzogdHJ1ZQogICAgICB9KSwKICAgICAgJ3hkcjpyb3dPZmYnOiBuZXcgSW50ZWdlclhmb3JtKHsKICAgICAgICB0YWc6ICd4ZHI6cm93T2ZmJywKICAgICAgICB6ZXJvOiB0cnVlCiAgICAgIH0pCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENlbGxQb3NpdGlvblhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAg
IHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcpOwogICAgICB0aGlzLm1hcFsneGRyOmNvbCddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLm5hdGl2ZUNvbCk7CiAgICAgIHRoaXMubWFwWyd4ZHI6Y29sT2ZmJ10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwubmF0aXZlQ29sT2ZmKTsKICAgICAgdGhpcy5tYXBbJ3hkcjpyb3cnXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5uYXRpdmVSb3cpOwogICAgICB0aGlzLm1hcFsneGRyOnJvd09mZidd
LnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLm5hdGl2ZVJvd09mZik7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5y
ZXNldCgpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwW25vZGUubmFtZV07CgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAo
dGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5hbWUp
IHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgICAgbmF0aXZlQ29sOiB0aGlzLm1hcFsneGRyOmNvbCddLm1vZGVsLAogICAgICAgICAgICBuYXRpdmVDb2xPZmY6IHRoaXMubWFwWyd4ZHI6Y29sT2ZmJ10ubW9kZWwsCiAgICAgICAgICAgIG5hdGl2ZVJvdzogdGhpcy5tYXBbJ3hkcjpyb3cnXS5tb2RlbCwKICAgICAgICAgICAgbmF0aXZlUm93T2ZmOiB0aGlzLm1hcFsneGRyOnJvd09mZiddLm1vZGVsCiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIGZhbHNlOwoK
ICAgICAgICBkZWZhdWx0OgogICAgICAgICAgLy8gbm90IHF1aXRlIHN1cmUgaG93IHdlIGdldCBoZXJlIQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBDZWxsUG9zaXRpb25YZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBDZWxsUG9zaXRpb25YZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMSwiLi4vc2ltcGxlL2ludGVnZXIteGZvcm0iOjExN31dLDYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rp
b24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAh
PT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5s
ZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRp
Y1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4
cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9m
ID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVz
dWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7
IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1
bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAo
ZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvY29sLWNhY2hlJyk7Cgp2YXIgWG1sU3RyZWFtID0g
cmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbScpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBUd29DZWxsQW5jaG9yWGZvcm0gPSByZXF1aXJlKCcuL3R3by1jZWxsLWFuY2hvci14Zm9ybScpOwoKdmFyIE9uZUNlbGxBbmNob3JYZm9ybSA9IHJlcXVpcmUoJy4vb25lLWNlbGwtYW5jaG9yLXhmb3JtJyk7CgpmdW5jdGlvbiBnZXRBbmNob3JUeXBlKG1vZGVsKSB7CiAgdmFyIHJhbmdlID0gdHlwZW9mIG1vZGVsLnJhbmdlID09PSAnc3RyaW5nJyA/IGNvbENhY2hlLmRlY29k
ZShtb2RlbC5yYW5nZSkgOiBtb2RlbC5yYW5nZTsKICByZXR1cm4gcmFuZ2UuYnIgPyAneGRyOnR3b0NlbGxBbmNob3InIDogJ3hkcjpvbmVDZWxsQW5jaG9yJzsKfQoKdmFyIERyYXdpbmdYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhEcmF3aW5nWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERyYXdpbmdYZm9ybSk7CgogIGZ1bmN0aW9uIERyYXdpbmdYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2so
dGhpcywgRHJhd2luZ1hmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMubWFwID0gewogICAgICAneGRyOnR3b0NlbGxBbmNob3InOiBuZXcgVHdvQ2VsbEFuY2hvclhmb3JtKCksCiAgICAgICd4ZHI6b25lQ2VsbEFuY2hvcic6IG5ldyBPbmVDZWxsQW5jaG9yWGZvcm0oKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhEcmF3aW5nWGZvcm0sIFt7CiAgICBrZXk6ICJwcmVwYXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlKG1vZGVsKSB7CiAgICAg
IHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgbW9kZWwuYW5jaG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgIGl0ZW0uYW5jaG9yVHlwZSA9IGdldEFuY2hvclR5cGUoaXRlbSk7CiAgICAgICAgdmFyIGFuY2hvciA9IF90aGlzMi5tYXBbaXRlbS5hbmNob3JUeXBlXTsKICAgICAgICBhbmNob3IucHJlcGFyZShpdGVtLCB7CiAgICAgICAgICBpbmRleDogaW5kZXgKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBy
ZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHhtbFN0cmVhbS5vcGVuWG1sKFhtbFN0cmVhbS5TdGREb2NBdHRyaWJ1dGVzKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCBEcmF3aW5nWGZvcm0uRFJBV0lOR19BVFRSSUJVVEVTKTsKICAgICAgbW9kZWwuYW5jaG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgdmFyIGFuY2hvciA9IF90aGlzMy5tYXBbaXRlbS5hbmNob3JUeXBlXTsKICAgICAgICBhbmNob3IucmVuZGVyKHhtbFN0cmVh
bSwgaXRlbSk7CiAgICAgIH0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICAgIHRo
aXMubW9kZWwgPSB7CiAgICAgICAgICAgIGFuY2hvcnM6IFtdCiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwW25vZGUubmFtZV07CgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZh
bHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLm1vZGVsLmFuY2hvcnMucHVzaCh0aGlzLnBhcnNlci5tb2RlbCk7
CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgLy8gY291bGQgYmUgc29tZSB1bnJlY29nbmlzZWQgdGFncwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29u
Y2lsZShtb2RlbCwgb3B0aW9ucykgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIG1vZGVsLmFuY2hvcnMuZm9yRWFjaChmdW5jdGlvbiAoYW5jaG9yKSB7CiAgICAgICAgaWYgKGFuY2hvci5icikgewogICAgICAgICAgX3RoaXM0Lm1hcFsneGRyOnR3b0NlbGxBbmNob3InXS5yZWNvbmNpbGUoYW5jaG9yLCBvcHRpb25zKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXM0Lm1hcFsneGRyOm9uZUNlbGxBbmNob3InXS5yZWNvbmNpbGUoYW5jaG9yLCBvcHRpb25zKTsKICAgICAgICB9CiAgICAgIH0pOwog
ICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4ZHI6d3NEcic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRHJhd2luZ1hmb3JtOwp9KEJhc2VYZm9ybSk7CgpEcmF3aW5nWGZvcm0uRFJBV0lOR19BVFRSSUJVVEVTID0gewogICd4bWxuczp4ZHInOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3NwcmVhZHNoZWV0RHJhd2luZycsCiAgJ3htbG5zOmEnOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3Jn
L2RyYXdpbmdtbC8yMDA2L21haW4nCn07Cm1vZHVsZS5leHBvcnRzID0gRHJhd2luZ1hmb3JtOwoKfSx7Ii4uLy4uLy4uL3V0aWxzL2NvbC1jYWNoZSI6MTksIi4uLy4uLy4uL3V0aWxzL3htbC1zdHJlYW0iOjI3LCIuLi9iYXNlLXhmb3JtIjozMSwiLi9vbmUtY2VsbC1hbmNob3IteGZvcm0iOjY2LCIuL3R3by1jZWxsLWFuY2hvci14Zm9ybSI6Njl9XSw2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVv
ZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBv
Ymo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsg
ZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRp
ZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlv
biIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0
UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFy
IE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIg
fHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAo
dHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90
b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgRXh0THN0WGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMo
RXh0THN0WGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEV4dExzdFhmb3JtKTsKCiAgZnVuY3Rpb24gRXh0THN0WGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXh0THN0WGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhFeHRMc3RYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUo
dGhpcy50YWcpOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ2E6ZXh0JywgewogICAgICAgIHVyaTogJ3tGRjJCNUVGNC1GRkYyLTQwQjQtQkU0OS1GMjM4RTI3RkMyMzZ9JwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdhMTY6Y3JlYXRpb25JZCcsIHsKICAgICAgICAneG1sbnM6YTE2JzogJ2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNC9tYWluJywKICAgICAgICBpZDogJ3swMDAwMDAwMC0wMDA4LTAwMDAtMDAwMC0wMDAwMDIwMDAwMDB9JwogICAgICB9KTsKICAg
ICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5j
dGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgLy8gdW5wcm9jZXNzZWQgaW50ZXJuYWwgbm9kZXMKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkg
ewogICAgICByZXR1cm4gJ2E6ZXh0THN0JzsKICAgIH0KICB9XSk7CgogIHJldHVybiBFeHRMc3RYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBFeHRMc3RYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0g
InN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2Us
IENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3Iu
Y29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9w
ZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3Mu
cHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90
eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNv
bnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlz
SW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7
IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFBy
b3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKLyoqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL09mZmljZV9PcGVuX1hNTF9maWxlX2Zvcm1hdHMjRHJhd2luZ01MICovCgoKdmFyIEVNVV9QRVJfUElYRUxfQVRfOTZfRFBJID0gOTUyNTsKCnZhciBFeHRYZm9ybSA9IC8qI19f
UFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhFeHRYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRXh0WGZvcm0pOwoKICBmdW5jdGlvbiBFeHRYZm9ybShvcHRpb25zKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4dFhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMudGFnID0gb3B0aW9ucy50YWc7CiAgICBfdGhpcy5tYXAgPSB7fTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9j
cmVhdGVDbGFzcyhFeHRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnKTsKICAgICAgdmFyIHdpZHRoID0gTWF0aC5mbG9vcihtb2RlbC53aWR0aCAqIEVNVV9QRVJfUElYRUxfQVRfOTZfRFBJKTsKICAgICAgdmFyIGhlaWdodCA9IE1hdGguZmxvb3IobW9kZWwuaGVpZ2h0ICogRU1VX1BFUl9QSVhFTF9BVF85Nl9EUEkpOwogICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdjeCcs
IHdpZHRoKTsKICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnY3knLCBoZWlnaHQpOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSB0aGlzLnRhZykgewogICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICB3aWR0aDogcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLmN4IHx8ICcwJywgMTApIC8gRU1VX1BFUl9QSVhFTF9BVF85Nl9EUEksCiAg
ICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5jeSB8fCAnMCcsIDEwKSAvIEVNVV9QRVJfUElYRUxfQVRfOTZfRFBJCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkKICAgIC8qIHRleHQgKi8KICAgIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpCiAgICAv
KiBuYW1lICovCiAgICB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBFeHRYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBFeHRYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9
PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFu
Y2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0
b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQ
cm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xh
c3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJv
dG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0
LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRU
aGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFs
c2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0Lmdl
dFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBITGlua0NsaWNrWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoSExpbmtDbGlja1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihI
TGlua0NsaWNrWGZvcm0pOwoKICBmdW5jdGlvbiBITGlua0NsaWNrWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSExpbmtDbGlja1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoSExpbmtDbGlja1hmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICBpZiAoIShtb2RlbC5oeXBlcmxpbmtzICYmIG1vZGVsLmh5cGVybGlua3MucklkKSkgewog
ICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnLCB7CiAgICAgICAgJ3htbG5zOnInOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcycsCiAgICAgICAgJ3I6aWQnOiBtb2RlbC5oeXBlcmxpbmtzLnJJZCwKICAgICAgICB0b29sdGlwOiBtb2RlbC5oeXBlcmxpbmtzLnRvb2x0aXAKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJz
ZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICBoeXBlcmxpbmtzOiB7CiAgICAgICAgICAgICAgcklkOiBub2RlLmF0dHJpYnV0ZXNbJ3I6aWQnXSwKICAgICAgICAgICAgICB0b29sdGlwOiBub2RlLmF0dHJpYnV0ZXMudG9vbHRpcAogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAg
ICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ2E6aGxpbmtDbGljayc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSExpbmtDbGlja1hmb3JtOwp9KEJhc2VYZm9ybSk7Cgpt
b2R1bGUuZXhwb3J0cyA9IEhMaW5rQ2xpY2tYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDY1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2Ug
eyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJy
b3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7
IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRz
KHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTog
dHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3Ry
dWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBh
cmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0g
dm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIp
IHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQ
cm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBDTnZQclhmb3JtID0gcmVxdWlyZSgnLi9jLW52LXByLXhmb3JtJyk7Cgp2YXIgQ052UGljUHJYZm9ybSA9IHJlcXVpcmUoJy4vYy1udi1waWMtcHIteGZvcm0nKTsKCnZhciBOdlBpY1ByWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoTnZQaWNQclhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9
IF9jcmVhdGVTdXBlcihOdlBpY1ByWGZvcm0pOwoKICBmdW5jdGlvbiBOdlBpY1ByWGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE52UGljUHJYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ3hkcjpjTnZQcic6IG5ldyBDTnZQclhmb3JtKCksCiAgICAgICd4ZHI6Y052UGljUHInOiBuZXcgQ052UGljUHJYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKE52UGljUHJYZm9y
bSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnKTsKICAgICAgdGhpcy5tYXBbJ3hkcjpjTnZQciddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgdGhpcy5tYXBbJ3hkcjpjTnZQaWNQciddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rp
b24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLnJlc2V0KCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5tYXBbbm9kZS5uYW1lXTsKCiAgICAgICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAg
ICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1l
KSkgewogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm1hcFsneGRyOmNOdlByJ10ubW9kZWw7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdl
dCgpIHsKICAgICAgcmV0dXJuICd4ZHI6bnZQaWNQcic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTnZQaWNQclhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IE52UGljUHJYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMSwiLi9jLW52LXBpYy1wci14Zm9ybSI6NTgsIi4vYy1udi1wci14Zm9ybSI6NTl9XSw2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBl
b2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0
dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5l
bnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0
b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNs
YXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2Yo
bywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9
IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNh
bGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxl
Y3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7
IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlQ2VsbEFuY2hvclhmb3JtID0gcmVxdWlyZSgnLi9iYXNlLWNlbGwtYW5jaG9yLXhmb3JtJyk7Cgp2YXIgU3RhdGljWGZvcm0gPSByZXF1aXJlKCcuLi9zdGF0aWMteGZvcm0nKTsKCnZhciBDZWxsUG9z
aXRpb25YZm9ybSA9IHJlcXVpcmUoJy4vY2VsbC1wb3NpdGlvbi14Zm9ybScpOwoKdmFyIEV4dFhmb3JtID0gcmVxdWlyZSgnLi9leHQteGZvcm0nKTsKCnZhciBQaWNYZm9ybSA9IHJlcXVpcmUoJy4vcGljLXhmb3JtJyk7Cgp2YXIgT25lQ2VsbEFuY2hvclhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUNlbGxBbmNob3JYZm9ybSkgewogIF9pbmhlcml0cyhPbmVDZWxsQW5jaG9yWGZvcm0sIF9CYXNlQ2VsbEFuY2hvclhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihPbmVDZWxsQW5jaG9yWGZv
cm0pOwoKICBmdW5jdGlvbiBPbmVDZWxsQW5jaG9yWGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9uZUNlbGxBbmNob3JYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ3hkcjpmcm9tJzogbmV3IENlbGxQb3NpdGlvblhmb3JtKHsKICAgICAgICB0YWc6ICd4ZHI6ZnJvbScKICAgICAgfSksCiAgICAgICd4ZHI6ZXh0JzogbmV3IEV4dFhmb3JtKHsKICAgICAgICB0YWc6ICd4ZHI6ZXh0JwogICAgICB9KSwKICAgICAg
J3hkcjpwaWMnOiBuZXcgUGljWGZvcm0oKSwKICAgICAgJ3hkcjpjbGllbnREYXRhJzogbmV3IFN0YXRpY1hmb3JtKHsKICAgICAgICB0YWc6ICd4ZHI6Y2xpZW50RGF0YScKICAgICAgfSkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoT25lQ2VsbEFuY2hvclhmb3JtLCBbewogICAga2V5OiAicHJlcGFyZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZShtb2RlbCwgb3B0aW9ucykgewogICAgICB0aGlzLm1hcFsneGRyOnBpYyddLnByZXBhcmUobW9kZWwucGljdHVyZSwgb3B0aW9ucyk7
CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHsKICAgICAgICBlZGl0QXM6IG1vZGVsLnJhbmdlLmVkaXRBcyB8fCAnb25lQ2VsbCcKICAgICAgfSk7CiAgICAgIHRoaXMubWFwWyd4ZHI6ZnJvbSddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLnJhbmdlLnRsKTsKICAgICAgdGhpcy5tYXBbJ3hkcjpleHQnXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5yYW5nZS5leHQpOwog
ICAgICB0aGlzLm1hcFsneGRyOnBpYyddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLnBpY3R1cmUpOwogICAgICB0aGlzLm1hcFsneGRyOmNsaWVudERhdGEnXS5yZW5kZXIoeG1sU3RyZWFtLCB7fSk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0
aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS50bCA9IHRoaXMubWFwWyd4ZHI6ZnJvbSddLm1vZGVsOwogICAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5leHQgPSB0aGlzLm1hcFsneGRyOmV4dCddLm1vZGVsOwogICAgICAgICAgdGhpcy5tb2RlbC5waWN0dXJlID0gdGhpcy5tYXBbJ3hkcjpwaWMnXS5tb2RlbDsKICAgICAgICAgIHJl
dHVybiBmYWxzZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIC8vIGNvdWxkIGJlIHNvbWUgdW5yZWNvZ25pc2VkIHRhZ3MKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVjb25jaWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWNvbmNpbGUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgbW9kZWwubWVkaXVtID0gdGhpcy5yZWNvbmNpbGVQaWN0dXJlKG1vZGVsLnBpY3R1cmUsIG9wdGlvbnMpOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0
aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4ZHI6b25lQ2VsbEFuY2hvcic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gT25lQ2VsbEFuY2hvclhmb3JtOwp9KEJhc2VDZWxsQW5jaG9yWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBPbmVDZWxsQW5jaG9yWGZvcm07Cgp9LHsiLi4vc3RhdGljLXhmb3JtIjoxMTksIi4vYmFzZS1jZWxsLWFuY2hvci14Zm9ybSI6NTUsIi4vY2VsbC1wb3NpdGlvbi14Zm9ybSI6NjAsIi4vZXh0LXhmb3JtIjo2MywiLi9waWMteGZvcm0iOjY3fV0sNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4
cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNv
bnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykg
eyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhD
b25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsg
dGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90
eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0g
X2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNv
bnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBj
YWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgp
IHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScp
OwoKdmFyIFN0YXRpY1hmb3JtID0gcmVxdWlyZSgnLi4vc3RhdGljLXhmb3JtJyk7Cgp2YXIgQmxpcEZpbGxYZm9ybSA9IHJlcXVpcmUoJy4vYmxpcC1maWxsLXhmb3JtJyk7Cgp2YXIgTnZQaWNQclhmb3JtID0gcmVxdWlyZSgnLi9udi1waWMtcHIteGZvcm0nKTsKCnZhciBzcFBySlNPTiA9IHJlcXVpcmUoJy4vc3AtcHInKTsKCnZhciBQaWNYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhQaWNYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3Vw
ZXIoUGljWGZvcm0pOwoKICBmdW5jdGlvbiBQaWNYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGljWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgICd4ZHI6bnZQaWNQcic6IG5ldyBOdlBpY1ByWGZvcm0oKSwKICAgICAgJ3hkcjpibGlwRmlsbCc6IG5ldyBCbGlwRmlsbFhmb3JtKCksCiAgICAgICd4ZHI6c3BQcic6IG5ldyBTdGF0aWNYZm9ybShzcFBySlNPTikKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoK
ICBfY3JlYXRlQ2xhc3MoUGljWGZvcm0sIFt7CiAgICBrZXk6ICJwcmVwYXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIG1vZGVsLmluZGV4ID0gb3B0aW9ucy5pbmRleCArIDE7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcpOwogICAgICB0aGlzLm1hcFsneGRyOm52UGljUHInXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2Rl
bCk7CiAgICAgIHRoaXMubWFwWyd4ZHI6YmxpcEZpbGwnXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgIHRoaXMubWFwWyd4ZHI6c3BQciddLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwog
ICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLnJlc2V0KCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5tYXBbbm9kZS5uYW1lXTsKCiAgICAgICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9
LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5tZXJnZU1vZGVsKHRoaXMucGFyc2VyLm1vZGVsKTsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAg
cmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAvLyBub3QgcXVpdGUgc3VyZSBob3cgd2UgZ2V0IGhlcmUhCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4ZHI6cGljJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBQaWNYZm9ybTsKfShC
YXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBQaWNYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMSwiLi4vc3RhdGljLXhmb3JtIjoxMTksIi4vYmxpcC1maWxsLXhmb3JtIjo1NiwiLi9udi1waWMtcHIteGZvcm0iOjY1LCIuL3NwLXByIjo2OH1dLDY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgdGFnOiAneGRyOnNwUHInLAogIGM6IFt7CiAgICB0YWc6ICdhOnhmcm0nLAogICAgYzogW3sKICAgICAgdGFnOiAnYTpvZmYnLAogICAgICAk
OiB7CiAgICAgICAgeDogJzAnLAogICAgICAgIHk6ICcwJwogICAgICB9CiAgICB9LCB7CiAgICAgIHRhZzogJ2E6ZXh0JywKICAgICAgJDogewogICAgICAgIGN4OiAnMCcsCiAgICAgICAgY3k6ICcwJwogICAgICB9CiAgICB9XQogIH0sIHsKICAgIHRhZzogJ2E6cHJzdEdlb20nLAogICAgJDogewogICAgICBwcnN0OiAncmVjdCcKICAgIH0sCiAgICBjOiBbewogICAgICB0YWc6ICdhOmF2THN0JwogICAgfV0KICB9XQp9OwoKfSx7fV0sNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7
CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wg
JiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8
IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9w
cywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigi
U3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJv
dG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2
ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYs
IGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2Vs
ZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9
IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZUNlbGxBbmNob3JYZm9ybSA9IHJlcXVpcmUoJy4vYmFzZS1jZWxsLWFuY2hvci14Zm9ybScp
OwoKdmFyIFN0YXRpY1hmb3JtID0gcmVxdWlyZSgnLi4vc3RhdGljLXhmb3JtJyk7Cgp2YXIgQ2VsbFBvc2l0aW9uWGZvcm0gPSByZXF1aXJlKCcuL2NlbGwtcG9zaXRpb24teGZvcm0nKTsKCnZhciBQaWNYZm9ybSA9IHJlcXVpcmUoJy4vcGljLXhmb3JtJyk7Cgp2YXIgVHdvQ2VsbEFuY2hvclhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUNlbGxBbmNob3JYZm9ybSkgewogIF9pbmhlcml0cyhUd29DZWxsQW5jaG9yWGZvcm0sIF9CYXNlQ2VsbEFuY2hvclhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVT
dXBlcihUd29DZWxsQW5jaG9yWGZvcm0pOwoKICBmdW5jdGlvbiBUd29DZWxsQW5jaG9yWGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR3b0NlbGxBbmNob3JYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ3hkcjpmcm9tJzogbmV3IENlbGxQb3NpdGlvblhmb3JtKHsKICAgICAgICB0YWc6ICd4ZHI6ZnJvbScKICAgICAgfSksCiAgICAgICd4ZHI6dG8nOiBuZXcgQ2VsbFBvc2l0aW9uWGZvcm0oewogICAgICAgIHRh
ZzogJ3hkcjp0bycKICAgICAgfSksCiAgICAgICd4ZHI6cGljJzogbmV3IFBpY1hmb3JtKCksCiAgICAgICd4ZHI6Y2xpZW50RGF0YSc6IG5ldyBTdGF0aWNYZm9ybSh7CiAgICAgICAgdGFnOiAneGRyOmNsaWVudERhdGEnCiAgICAgIH0pCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFR3b0NlbGxBbmNob3JYZm9ybSwgW3sKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgdGhpcy5tYXBbJ3hkcjpwaWMnXS5wcmVw
YXJlKG1vZGVsLnBpY3R1cmUsIG9wdGlvbnMpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCB7CiAgICAgICAgZWRpdEFzOiBtb2RlbC5yYW5nZS5lZGl0QXMgfHwgJ29uZUNlbGwnCiAgICAgIH0pOwogICAgICB0aGlzLm1hcFsneGRyOmZyb20nXS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5yYW5nZS50bCk7CiAgICAgIHRoaXMubWFwWyd4ZHI6dG8nXS5yZW5kZXIoeG1s
U3RyZWFtLCBtb2RlbC5yYW5nZS5icik7CiAgICAgIHRoaXMubWFwWyd4ZHI6cGljJ10ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwucGljdHVyZSk7CiAgICAgIHRoaXMubWFwWyd4ZHI6Y2xpZW50RGF0YSddLnJlbmRlcih4bWxTdHJlYW0sIHt9KTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnBhcnNl
Q2xvc2UobmFtZSkpIHsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnRsID0gdGhpcy5tYXBbJ3hkcjpmcm9tJ10ubW9kZWw7CiAgICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLmJyID0gdGhpcy5tYXBbJ3hkcjp0byddLm1vZGVsOwogICAgICAgICAgdGhpcy5tb2RlbC5waWN0dXJlID0gdGhpcy5tYXBbJ3hkcjpw
aWMnXS5tb2RlbDsKICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIC8vIGNvdWxkIGJlIHNvbWUgdW5yZWNvZ25pc2VkIHRhZ3MKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVjb25jaWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWNvbmNpbGUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgbW9kZWwubWVkaXVtID0gdGhpcy5yZWNvbmNpbGVQaWN0dXJlKG1vZGVsLnBpY3R1cmUsIG9wdGlvbnMpOwogICAgfQogIH0sIHsKICAgIGtl
eTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4ZHI6dHdvQ2VsbEFuY2hvcic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVHdvQ2VsbEFuY2hvclhmb3JtOwp9KEJhc2VDZWxsQW5jaG9yWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBUd29DZWxsQW5jaG9yWGZvcm07Cgp9LHsiLi4vc3RhdGljLXhmb3JtIjoxMTksIi4vYmFzZS1jZWxsLWFuY2hvci14Zm9ybSI6NTUsIi4vY2VsbC1wb3NpdGlvbi14Zm9ybSI6NjAsIi4vcGljLXhmb3JtIjo2N31dLDcwOltmdW5jdGlvbihyZXF1aXJlLG1v
ZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYm
IG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwg
cHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRl
Q2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBu
dWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3Nl
dFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBT
dXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9z
c2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0
IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5j
dGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4vYmFzZS14
Zm9ybScpOwoKdmFyIExpc3RYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhMaXN0WGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKExpc3RYZm9ybSk7CgogIGZ1bmN0aW9uIExpc3RYZm9ybShvcHRpb25zKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpc3RYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLnRhZyA9IG9wdGlvbnMudGFnOwogICAgX3RoaXMuYWx3
YXlzID0gISFvcHRpb25zLmFsd2F5czsKICAgIF90aGlzLmNvdW50ID0gb3B0aW9ucy5jb3VudDsKICAgIF90aGlzLmVtcHR5ID0gb3B0aW9ucy5lbXB0eTsKICAgIF90aGlzLiRjb3VudCA9IG9wdGlvbnMuJGNvdW50IHx8ICdjb3VudCc7CiAgICBfdGhpcy4kID0gb3B0aW9ucy4kOwogICAgX3RoaXMuY2hpbGRYZm9ybSA9IG9wdGlvbnMuY2hpbGRYZm9ybTsKICAgIF90aGlzLm1heEl0ZW1zID0gb3B0aW9ucy5tYXhJdGVtczsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhMaXN0WGZvcm0sIFt7CiAgICBr
ZXk6ICJwcmVwYXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIHZhciBjaGlsZFhmb3JtID0gdGhpcy5jaGlsZFhmb3JtOwoKICAgICAgaWYgKG1vZGVsKSB7CiAgICAgICAgbW9kZWwuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRNb2RlbCwgaW5kZXgpIHsKICAgICAgICAgIG9wdGlvbnMuaW5kZXggPSBpbmRleDsKICAgICAgICAgIGNoaWxkWGZvcm0ucHJlcGFyZShjaGlsZE1vZGVsLCBvcHRpb25zKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTog
InJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgaWYgKHRoaXMuYWx3YXlzIHx8IG1vZGVsICYmIG1vZGVsLmxlbmd0aCkgewogICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZywgdGhpcy4kKTsKCiAgICAgICAgaWYgKHRoaXMuY291bnQpIHsKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUodGhpcy4kY291bnQsIG1vZGVsICYmIG1vZGVsLmxlbmd0aCB8fCAwKTsKICAgICAgICB9CgogICAgICAgIHZhciBjaGlsZFhmb3JtID0gdGhpcy5jaGls
ZFhmb3JtOwogICAgICAgIChtb2RlbCB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRNb2RlbCwgaW5kZXgpIHsKICAgICAgICAgIGNoaWxkWGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgY2hpbGRNb2RlbCwgaW5kZXgpOwogICAgICAgIH0pOwogICAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmVtcHR5KSB7CiAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rp
b24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLm1vZGVsID0gW107CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGlmICh0aGlzLmNoaWxkWGZvcm0ucGFyc2VPcGVuKG5vZGUpKSB7CiAgICAgICAgICAgIHRoaXMucGFy
c2VyID0gdGhpcy5jaGlsZFhmb3JtOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xv
c2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSkpIHsKICAgICAgICAgIHRoaXMubW9kZWwucHVzaCh0aGlzLnBhcnNlci5tb2RlbCk7CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKCiAgICAgICAgICBpZiAodGhpcy5tYXhJdGVtcyAmJiB0aGlzLm1vZGVsLmxlbmd0aCA+IHRoaXMubWF4SXRlbXMpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJNYXggIi5jb25jYXQodGhpcy5jaGlsZFhmb3JtLnRhZywgIiBjb3Vu
dCAoIikuY29uY2F0KHRoaXMubWF4SXRlbXMsICIpIGV4Y2VlZGVkIikpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29uY2lsZShtb2RlbCwgb3B0aW9ucykgewogICAgICBpZiAobW9kZWwpIHsKICAgICAgICB2YXIgY2hpbGRYZm9ybSA9IHRoaXMuY2hpbGRYZm9ybTsKICAgICAgICBtb2RlbC5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZE1v
ZGVsKSB7CiAgICAgICAgICBjaGlsZFhmb3JtLnJlY29uY2lsZShjaGlsZE1vZGVsLCBvcHRpb25zKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIExpc3RYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBMaXN0WGZvcm07Cgp9LHsiLi9iYXNlLXhmb3JtIjozMX1dLDcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1i
b2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5
cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFi
bGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90
b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJv
dG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7
IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFBy
b3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0g
ImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0g
InVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFBy
b3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvY29sLWNhY2hlJyk7Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIEF1dG9GaWx0ZXJYZm9ybSA9IC8qI19fUFVSRV9f
Ki9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhBdXRvRmlsdGVyWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEF1dG9GaWx0ZXJYZm9ybSk7CgogIGZ1bmN0aW9uIEF1dG9GaWx0ZXJYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBdXRvRmlsdGVyWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhBdXRvRmlsdGVyWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFs
dWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCkgewogICAgICAgIGlmICh0eXBlb2YgbW9kZWwgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAvLyBhc3N1bWUgcmFuZ2UKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnYXV0b0ZpbHRlcicsIHsKICAgICAgICAgICAgcmVmOiBtb2RlbAogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBnZXRBZGRyZXNzID0gZnVuY3Rpb24gZ2V0QWRkcmVzcyhhZGRyKSB7CiAgICAgICAgICAgIGlmICh0eXBl
b2YgYWRkciA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICByZXR1cm4gYWRkcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGNvbENhY2hlLmdldEFkZHJlc3MoYWRkci5yb3csIGFkZHIuY29sdW1uKS5hZGRyZXNzOwogICAgICAgICAgfTsKCiAgICAgICAgICB2YXIgZmlyc3RBZGRyZXNzID0gZ2V0QWRkcmVzcyhtb2RlbC5mcm9tKTsKICAgICAgICAgIHZhciBzZWNvbmRBZGRyZXNzID0gZ2V0QWRkcmVzcyhtb2RlbC50byk7CgogICAgICAgICAgaWYgKGZpcnN0QWRkcmVzcyAmJiBzZWNvbmRBZGRyZXNz
KSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnYXV0b0ZpbHRlcicsIHsKICAgICAgICAgICAgICByZWY6ICIiLmNvbmNhdChmaXJzdEFkZHJlc3MsICI6IikuY29uY2F0KHNlY29uZEFkZHJlc3MpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKG5vZGUubmFtZSA9PT0gJ2F1dG9GaWx0ZXInKSB7CiAgICAgICAgdGhpcy5tb2RlbCA9
IG5vZGUuYXR0cmlidXRlcy5yZWY7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnYXV0b0ZpbHRlcic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQXV0b0ZpbHRlclhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IEF1dG9GaWx0ZXJYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy9jb2wtY2FjaGUiOjE5LCIuLi9iYXNlLXhmb3JtIjozMX1dLDcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBz
dHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0g
U3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVu
Y3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2Up
LCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVj
dC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENo
ZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNl
OyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3Bz
KSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAm
JiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1
cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0
ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVy
biBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkg
cmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/
IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFJhbmdlID0gcmVxdWlyZSgnLi4vLi4vLi4vZG9jL3JhbmdlJyk7Cgp2YXIgRW51bXMgPSByZXF1aXJlKCcuLi8uLi8uLi9k
b2MvZW51bXMnKTsKCnZhciBSaWNoVGV4dFhmb3JtID0gcmVxdWlyZSgnLi4vc3RyaW5ncy9yaWNoLXRleHQteGZvcm0nKTsKCmZ1bmN0aW9uIGdldFZhbHVlVHlwZSh2KSB7CiAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm4gRW51bXMuVmFsdWVUeXBlLk51bGw7CiAgfQoKICBpZiAodiBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHsKICAgIHJldHVybiBFbnVtcy5WYWx1ZVR5cGUuU3RyaW5nOwogIH0KCiAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykg
ewogICAgcmV0dXJuIEVudW1zLlZhbHVlVHlwZS5OdW1iZXI7CiAgfQoKICBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykgewogICAgcmV0dXJuIEVudW1zLlZhbHVlVHlwZS5Cb29sZWFuOwogIH0KCiAgaWYgKHYgaW5zdGFuY2VvZiBEYXRlKSB7CiAgICByZXR1cm4gRW51bXMuVmFsdWVUeXBlLkRhdGU7CiAgfQoKICBpZiAodi50ZXh0ICYmIHYuaHlwZXJsaW5rKSB7CiAgICByZXR1cm4gRW51bXMuVmFsdWVUeXBlLkh5cGVybGluazsKICB9CgogIGlmICh2LmZvcm11bGEpIHsKICAgIHJldHVybiBFbnVtcy5WYWx1ZVR5cGUu
Rm9ybXVsYTsKICB9CgogIGlmICh2LmVycm9yKSB7CiAgICByZXR1cm4gRW51bXMuVmFsdWVUeXBlLkVycm9yOwogIH0KCiAgdGhyb3cgbmV3IEVycm9yKCdJIGNvdWxkIG5vdCB1bmRlcnN0YW5kIHR5cGUgb2YgdmFsdWUnKTsKfQoKZnVuY3Rpb24gZ2V0RWZmZWN0aXZlQ2VsbFR5cGUoY2VsbCkgewogIHN3aXRjaCAoY2VsbC50eXBlKSB7CiAgICBjYXNlIEVudW1zLlZhbHVlVHlwZS5Gb3JtdWxhOgogICAgICByZXR1cm4gZ2V0VmFsdWVUeXBlKGNlbGwucmVzdWx0KTsKCiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gY2VsbC50
eXBlOwogIH0KfQoKdmFyIENlbGxYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhDZWxsWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENlbGxYZm9ybSk7CgogIGZ1bmN0aW9uIENlbGxYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2VsbFhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMucmljaFRleHRYRm9ybSA9IG5ldyBSaWNoVGV4dFhmb3JtKCk7
CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ2VsbFhmb3JtLCBbewogICAga2V5OiAicHJlcGFyZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZShtb2RlbCwgb3B0aW9ucykgewogICAgICB2YXIgc3R5bGVJZCA9IG9wdGlvbnMuc3R5bGVzLmFkZFN0eWxlTW9kZWwobW9kZWwuc3R5bGUgfHwge30sIGdldEVmZmVjdGl2ZUNlbGxUeXBlKG1vZGVsKSk7CgogICAgICBpZiAoc3R5bGVJZCkgewogICAgICAgIG1vZGVsLnN0eWxlSWQgPSBzdHlsZUlkOwogICAgICB9CgogICAgICBpZiAobW9kZWwuY29t
bWVudCkgewogICAgICAgIG9wdGlvbnMuY29tbWVudHMucHVzaChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1vZGVsLmNvbW1lbnQpLCB7fSwgewogICAgICAgICAgcmVmOiBtb2RlbC5hZGRyZXNzCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICBzd2l0Y2ggKG1vZGVsLnR5cGUpIHsKICAgICAgICBjYXNlIEVudW1zLlZhbHVlVHlwZS5TdHJpbmc6CiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuUmljaFRleHQ6CiAgICAgICAgICBpZiAob3B0aW9ucy5zaGFyZWRTdHJpbmdzKSB7CiAgICAgICAgICAgIG1v
ZGVsLnNzSWQgPSBvcHRpb25zLnNoYXJlZFN0cmluZ3MuYWRkKG1vZGVsLnZhbHVlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuRGF0ZToKICAgICAgICAgIGlmIChvcHRpb25zLmRhdGUxOTA0KSB7CiAgICAgICAgICAgIG1vZGVsLmRhdGUxOTA0ID0gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuSHlwZXJsaW5rOgogICAgICAgICAgaWYgKG9wdGlvbnMuc2hhcmVkU3RyaW5ncyAmJiBtb2Rl
bC50ZXh0ICE9PSB1bmRlZmluZWQgJiYgbW9kZWwudGV4dCAhPT0gbnVsbCkgewogICAgICAgICAgICBtb2RlbC5zc0lkID0gb3B0aW9ucy5zaGFyZWRTdHJpbmdzLmFkZChtb2RlbC50ZXh0KTsKICAgICAgICAgIH0KCiAgICAgICAgICBvcHRpb25zLmh5cGVybGlua3MucHVzaCh7CiAgICAgICAgICAgIGFkZHJlc3M6IG1vZGVsLmFkZHJlc3MsCiAgICAgICAgICAgIHRhcmdldDogbW9kZWwuaHlwZXJsaW5rLAogICAgICAgICAgICB0b29sdGlwOiBtb2RlbC50b29sdGlwCiAgICAgICAgICB9KTsKICAgICAgICAgIGJyZWFrOwoK
ICAgICAgICBjYXNlIEVudW1zLlZhbHVlVHlwZS5NZXJnZToKICAgICAgICAgIG9wdGlvbnMubWVyZ2VzLmFkZChtb2RlbCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuRm9ybXVsYToKICAgICAgICAgIGlmIChvcHRpb25zLmRhdGUxOTA0KSB7CiAgICAgICAgICAgIC8vIGluIGNhc2UgdmFsdWVUeXBlIGlzIGRhdGUKICAgICAgICAgICAgbW9kZWwuZGF0ZTE5MDQgPSB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChtb2RlbC5zaGFyZVR5cGUgPT09ICdzaGFyZWQnKSB7CiAg
ICAgICAgICAgIG1vZGVsLnNpID0gb3B0aW9ucy5zaUZvcm11bGFlKys7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG1vZGVsLmZvcm11bGEpIHsKICAgICAgICAgICAgb3B0aW9ucy5mb3JtdWxhZVttb2RlbC5hZGRyZXNzXSA9IG1vZGVsOwogICAgICAgICAgfSBlbHNlIGlmIChtb2RlbC5zaGFyZWRGb3JtdWxhKSB7CiAgICAgICAgICAgIHZhciBtYXN0ZXIgPSBvcHRpb25zLmZvcm11bGFlW21vZGVsLnNoYXJlZEZvcm11bGFdOwoKICAgICAgICAgICAgaWYgKCFtYXN0ZXIpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcg
RXJyb3IoIlNoYXJlZCBGb3JtdWxhIG1hc3RlciBtdXN0IGV4aXN0IGFib3ZlIGFuZCBvciBsZWZ0IG9mIGNsb25lIGZvciBjZWxsICIuY29uY2F0KG1vZGVsLmFkZHJlc3MpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG1hc3Rlci5zaSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgbWFzdGVyLnNoYXJlVHlwZSA9ICdzaGFyZWQnOwogICAgICAgICAgICAgIG1hc3Rlci5zaSA9IG9wdGlvbnMuc2lGb3JtdWxhZSsrOwogICAgICAgICAgICAgIG1hc3Rlci5yYW5nZSA9IG5ldyBSYW5nZShtYXN0ZXIuYWRk
cmVzcywgbW9kZWwuYWRkcmVzcyk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAobWFzdGVyLnJhbmdlKSB7CiAgICAgICAgICAgICAgbWFzdGVyLnJhbmdlLmV4cGFuZFRvQWRkcmVzcyhtb2RlbC5hZGRyZXNzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbW9kZWwuc2kgPSBtYXN0ZXIuc2k7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckZvcm11bGEiLAogICAgdmFsdWU6IGZ1bmN0aW9u
IHJlbmRlckZvcm11bGEoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB2YXIgYXR0cnMgPSBudWxsOwoKICAgICAgc3dpdGNoIChtb2RlbC5zaGFyZVR5cGUpIHsKICAgICAgICBjYXNlICdzaGFyZWQnOgogICAgICAgICAgYXR0cnMgPSB7CiAgICAgICAgICAgIHQ6ICdzaGFyZWQnLAogICAgICAgICAgICByZWY6IG1vZGVsLnJlZiB8fCBtb2RlbC5yYW5nZS5yYW5nZSwKICAgICAgICAgICAgc2k6IG1vZGVsLnNpCiAgICAgICAgICB9OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2FycmF5JzoKICAgICAgICAgIGF0
dHJzID0gewogICAgICAgICAgICB0OiAnYXJyYXknLAogICAgICAgICAgICByZWY6IG1vZGVsLnJlZgogICAgICAgICAgfTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgaWYgKG1vZGVsLnNpICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgYXR0cnMgPSB7CiAgICAgICAgICAgICAgdDogJ3NoYXJlZCcsCiAgICAgICAgICAgICAgc2k6IG1vZGVsLnNpCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAoZ2V0VmFsdWVU
eXBlKG1vZGVsLnJlc3VsdCkpIHsKICAgICAgICBjYXNlIEVudW1zLlZhbHVlVHlwZS5OdWxsOgogICAgICAgICAgLy8gPwogICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdmJywgYXR0cnMsIG1vZGVsLmZvcm11bGEpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLlN0cmluZzoKICAgICAgICAgIC8vIG9kZGx5LCBmb3JtdWxhIHJlc3VsdHMgZG9uJ3QgZXZlciB1c2Ugc2hhcmVkIHN0cmluZ3MKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3QnLCAnc3RyJyk7CiAgICAg
ICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ2YnLCBhdHRycywgbW9kZWwuZm9ybXVsYSk7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3YnLCBudWxsLCBtb2RlbC5yZXN1bHQpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLk51bWJlcjoKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnZicsIGF0dHJzLCBtb2RlbC5mb3JtdWxhKTsKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndicsIG51bGwsIG1vZGVsLnJlc3VsdCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAg
Y2FzZSBFbnVtcy5WYWx1ZVR5cGUuQm9vbGVhbjoKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3QnLCAnYicpOwogICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdmJywgYXR0cnMsIG1vZGVsLmZvcm11bGEpOwogICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCd2JywgbnVsbCwgbW9kZWwucmVzdWx0ID8gMSA6IDApOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLkVycm9yOgogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgndCcsICdlJyk7CiAgICAgICAg
ICB4bWxTdHJlYW0ubGVhZk5vZGUoJ2YnLCBhdHRycywgbW9kZWwuZm9ybXVsYSk7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3YnLCBudWxsLCBtb2RlbC5yZXN1bHQuZXJyb3IpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLkRhdGU6CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ2YnLCBhdHRycywgbW9kZWwuZm9ybXVsYSk7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3YnLCBudWxsLCB1dGlscy5kYXRlVG9FeGNlbChtb2RlbC5yZXN1bHQsIG1vZGVsLmRh
dGUxOTA0KSk7CiAgICAgICAgICBicmVhazsKICAgICAgICAvLyBjYXNlIEVudW1zLlZhbHVlVHlwZS5IeXBlcmxpbms6IC8vID8/CiAgICAgICAgLy8gY2FzZSBFbnVtcy5WYWx1ZVR5cGUuRm9ybXVsYToKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSSBjb3VsZCBub3QgdW5kZXJzdGFuZCB0eXBlIG9mIHZhbHVlJyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBf
dGhpczIgPSB0aGlzOwoKICAgICAgaWYgKG1vZGVsLnR5cGUgPT09IEVudW1zLlZhbHVlVHlwZS5OdWxsICYmICFtb2RlbC5zdHlsZUlkKSB7CiAgICAgICAgLy8gaWYgbnVsbCBhbmQgbm8gc3R5bGUsIGV4aXQKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnYycpOwogICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdyJywgbW9kZWwuYWRkcmVzcyk7CgogICAgICBpZiAobW9kZWwuc3R5bGVJZCkgewogICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3MnLCBtb2RlbC5zdHls
ZUlkKTsKICAgICAgfQoKICAgICAgc3dpdGNoIChtb2RlbC50eXBlKSB7CiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuTnVsbDoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIEVudW1zLlZhbHVlVHlwZS5OdW1iZXI6CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3YnLCBudWxsLCBtb2RlbC52YWx1ZSk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuQm9vbGVhbjoKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3QnLCAnYicpOwogICAgICAgICAgeG1s
U3RyZWFtLmxlYWZOb2RlKCd2JywgbnVsbCwgbW9kZWwudmFsdWUgPyAnMScgOiAnMCcpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLkVycm9yOgogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgndCcsICdlJyk7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3YnLCBudWxsLCBtb2RlbC52YWx1ZS5lcnJvcik7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuU3RyaW5nOgogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLlJpY2hU
ZXh0OgogICAgICAgICAgaWYgKG1vZGVsLnNzSWQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCd0JywgJ3MnKTsKICAgICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCd2JywgbnVsbCwgbW9kZWwuc3NJZCk7CiAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLnZhbHVlICYmIG1vZGVsLnZhbHVlLnJpY2hUZXh0KSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3QnLCAnaW5saW5lU3RyJyk7CiAgICAgICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnaXMnKTsK
ICAgICAgICAgICAgbW9kZWwudmFsdWUucmljaFRleHQuZm9yRWFjaChmdW5jdGlvbiAodGV4dCkgewogICAgICAgICAgICAgIF90aGlzMi5yaWNoVGV4dFhGb3JtLnJlbmRlcih4bWxTdHJlYW0sIHRleHQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgnaXMnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3QnLCAnc3RyJyk7CiAgICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndicsIG51bGwsIG1vZGVsLnZhbHVlKTsKICAg
ICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuRGF0ZToKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndicsIG51bGwsIHV0aWxzLmRhdGVUb0V4Y2VsKG1vZGVsLnZhbHVlLCBtb2RlbC5kYXRlMTkwNCkpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLkh5cGVybGluazoKICAgICAgICAgIGlmIChtb2RlbC5zc0lkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgndCcsICdzJyk7CiAg
ICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndicsIG51bGwsIG1vZGVsLnNzSWQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgndCcsICdzdHInKTsKICAgICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCd2JywgbnVsbCwgbW9kZWwudGV4dCk7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLkZvcm11bGE6CiAgICAgICAgICB0aGlzLnJlbmRlckZvcm11bGEoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgICAg
ICBicmVhazsKCiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuTWVyZ2U6CiAgICAgICAgICAvLyBub3RoaW5nIHRvIGFkZAogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOyAvLyA8L2M+CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4o
bm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSAnYyc6CiAgICAgICAgICAvLyBjb25zdCBhZGRyZXNzID0gY29sQ2FjaGUuZGVjb2RlQWRkcmVzcyhub2RlLmF0dHJpYnV0ZXMucik7CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICBhZGRyZXNzOiBub2RlLmF0dHJpYnV0ZXMucgogICAgICAgICAgfTsKICAgICAgICAgIHRoaXMudCA9IG5vZGUuYXR0cmlidXRlcy50OwoKICAgICAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXMu
cykgewogICAgICAgICAgICB0aGlzLm1vZGVsLnN0eWxlSWQgPSBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMucywgMTApOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBjYXNlICdmJzoKICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSAnZic7CiAgICAgICAgICB0aGlzLm1vZGVsLnNpID0gbm9kZS5hdHRyaWJ1dGVzLnNpOwogICAgICAgICAgdGhpcy5tb2RlbC5zaGFyZVR5cGUgPSBub2RlLmF0dHJpYnV0ZXMudDsKICAgICAgICAgIHRoaXMubW9kZWwucmVmID0gbm9kZS5hdHRyaWJ1dGVz
LnJlZjsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBjYXNlICd2JzoKICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSAndic7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgY2FzZSAndCc6CiAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gJ3QnOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGNhc2UgJ3InOgogICAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLnJpY2hUZXh0WEZvcm07CiAgICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgICByZXR1cm4g
dHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgc3dpdGNoICh0aGlzLmN1cnJlbnROb2RlKSB7CiAgICAgICAgY2FzZSAnZic6CiAgICAgICAgICB0aGlzLm1vZGVsLmZvcm11bGEgPSB0
aGlzLm1vZGVsLmZvcm11bGEgPyB0aGlzLm1vZGVsLmZvcm11bGEgKyB0ZXh0IDogdGV4dDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICd2JzoKICAgICAgICBjYXNlICd0JzoKICAgICAgICAgIGlmICh0aGlzLm1vZGVsLnZhbHVlICYmIHRoaXMubW9kZWwudmFsdWUucmljaFRleHQpIHsKICAgICAgICAgICAgdGhpcy5tb2RlbC52YWx1ZS5yaWNoVGV4dC50ZXh0ID0gdGhpcy5tb2RlbC52YWx1ZS5yaWNoVGV4dC50ZXh0ID8gdGhpcy5tb2RlbC52YWx1ZS5yaWNoVGV4dC50ZXh0ICsgdGV4dCA6IHRleHQ7CiAgICAg
ICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLm1vZGVsLnZhbHVlID0gdGhpcy5tb2RlbC52YWx1ZSA/IHRoaXMubW9kZWwudmFsdWUgKyB0ZXh0IDogdGV4dDsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgJ2MnOgogICAgICAgICAgewogICAg
ICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLm1vZGVsOyAvLyBmaXJzdCBndWVzcyBvbiBjZWxsIHR5cGUKCiAgICAgICAgICAgIGlmIChtb2RlbC5mb3JtdWxhIHx8IG1vZGVsLnNoYXJlVHlwZSkgewogICAgICAgICAgICAgIG1vZGVsLnR5cGUgPSBFbnVtcy5WYWx1ZVR5cGUuRm9ybXVsYTsKCiAgICAgICAgICAgICAgaWYgKG1vZGVsLnZhbHVlKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy50ID09PSAnc3RyJykgewogICAgICAgICAgICAgICAgICBtb2RlbC5yZXN1bHQgPSB1dGlscy54bWxEZWNvZGUobW9kZWwudmFsdWUp
OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnQgPT09ICdiJykgewogICAgICAgICAgICAgICAgICBtb2RlbC5yZXN1bHQgPSBwYXJzZUludChtb2RlbC52YWx1ZSwgMTApICE9PSAwOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnQgPT09ICdlJykgewogICAgICAgICAgICAgICAgICBtb2RlbC5yZXN1bHQgPSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG1vZGVsLnZhbHVlCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBtb2Rl
bC5yZXN1bHQgPSBwYXJzZUZsb2F0KG1vZGVsLnZhbHVlKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBtb2RlbC52YWx1ZSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwudmFsdWUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHN3aXRjaCAodGhpcy50KSB7CiAgICAgICAgICAgICAgICBjYXNlICdzJzoKICAgICAgICAgICAgICAgICAgbW9kZWwudHlwZSA9IEVudW1zLlZhbHVlVHlwZS5TdHJpbmc7CiAgICAgICAgICAgICAgICAgIG1vZGVs
LnZhbHVlID0gcGFyc2VJbnQobW9kZWwudmFsdWUsIDEwKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAnc3RyJzoKICAgICAgICAgICAgICAgICAgbW9kZWwudHlwZSA9IEVudW1zLlZhbHVlVHlwZS5TdHJpbmc7CiAgICAgICAgICAgICAgICAgIG1vZGVsLnZhbHVlID0gdXRpbHMueG1sRGVjb2RlKG1vZGVsLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAnaW5saW5lU3RyJzoKICAgICAgICAgICAgICAgICAgbW9kZWwudHlwZSA9IEVu
dW1zLlZhbHVlVHlwZS5TdHJpbmc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgJ2InOgogICAgICAgICAgICAgICAgICBtb2RlbC50eXBlID0gRW51bXMuVmFsdWVUeXBlLkJvb2xlYW47CiAgICAgICAgICAgICAgICAgIG1vZGVsLnZhbHVlID0gcGFyc2VJbnQobW9kZWwudmFsdWUsIDEwKSAhPT0gMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAnZSc6CiAgICAgICAgICAgICAgICAgIG1vZGVsLnR5cGUgPSBFbnVtcy5WYWx1ZVR5cGUuRXJyb3I7
CiAgICAgICAgICAgICAgICAgIG1vZGVsLnZhbHVlID0gewogICAgICAgICAgICAgICAgICAgIGVycm9yOiBtb2RlbC52YWx1ZQogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICBtb2RlbC50eXBlID0gRW51bXMuVmFsdWVUeXBlLk51bWJlcjsKICAgICAgICAgICAgICAgICAgbW9kZWwudmFsdWUgPSBwYXJzZUZsb2F0KG1vZGVsLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQog
ICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLnN0eWxlSWQpIHsKICAgICAgICAgICAgICBtb2RlbC50eXBlID0gRW51bXMuVmFsdWVUeXBlLk51bGw7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbW9kZWwudHlwZSA9IEVudW1zLlZhbHVlVHlwZS5NZXJnZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICBjYXNlICdmJzoKICAgICAgICBjYXNlICd2JzoKICAgICAgICBjYXNlICdpcyc6CiAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gdW5k
ZWZpbmVkOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGNhc2UgJ3QnOgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSB1bmRlZmluZWQ7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgY2FzZSAncic6CiAgICAgICAgICB0aGlzLm1vZGVsLnZhbHVlID0gdGhpcy5tb2RlbC52YWx1ZSB8fCB7fTsKICAgICAg
ICAgIHRoaXMubW9kZWwudmFsdWUucmljaFRleHQgPSB0aGlzLm1vZGVsLnZhbHVlLnJpY2hUZXh0IHx8IFtdOwogICAgICAgICAgdGhpcy5tb2RlbC52YWx1ZS5yaWNoVGV4dC5wdXNoKHRoaXMucGFyc2VyLm1vZGVsKTsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IHVuZGVmaW5lZDsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNl
Q2xvc2UobmFtZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlY29uY2lsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb25jaWxlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIHZhciBzdHlsZSA9IG1vZGVsLnN0eWxlSWQgJiYgb3B0aW9ucy5zdHlsZXMgJiYgb3B0aW9ucy5zdHlsZXMuZ2V0U3R5bGVNb2RlbChtb2RlbC5zdHlsZUlkKTsKCiAgICAgIGlmIChzdHlsZSkgewogICAgICAgIG1vZGVsLnN0
eWxlID0gc3R5bGU7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5zdHlsZUlkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBtb2RlbC5zdHlsZUlkID0gdW5kZWZpbmVkOwogICAgICB9CgogICAgICBzd2l0Y2ggKG1vZGVsLnR5cGUpIHsKICAgICAgICBjYXNlIEVudW1zLlZhbHVlVHlwZS5TdHJpbmc6CiAgICAgICAgICBpZiAodHlwZW9mIG1vZGVsLnZhbHVlID09PSAnbnVtYmVyJykgewogICAgICAgICAgICBpZiAob3B0aW9ucy5zaGFyZWRTdHJpbmdzKSB7CiAgICAgICAgICAgICAgbW9kZWwudmFsdWUgPSBvcHRpb25zLnNo
YXJlZFN0cmluZ3MuZ2V0U3RyaW5nKG1vZGVsLnZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChtb2RlbC52YWx1ZS5yaWNoVGV4dCkgewogICAgICAgICAgICBtb2RlbC50eXBlID0gRW51bXMuVmFsdWVUeXBlLlJpY2hUZXh0OwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIEVudW1zLlZhbHVlVHlwZS5OdW1iZXI6CiAgICAgICAgICBpZiAoc3R5bGUgJiYgdXRpbHMuaXNEYXRlRm10KHN0eWxlLm51bUZtdCkpIHsKICAgICAgICAgICAgbW9kZWwudHlwZSA9
IEVudW1zLlZhbHVlVHlwZS5EYXRlOwogICAgICAgICAgICBtb2RlbC52YWx1ZSA9IHV0aWxzLmV4Y2VsVG9EYXRlKG1vZGVsLnZhbHVlLCBvcHRpb25zLmRhdGUxOTA0KTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBFbnVtcy5WYWx1ZVR5cGUuRm9ybXVsYToKICAgICAgICAgIGlmIChtb2RlbC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBzdHlsZSAmJiB1dGlscy5pc0RhdGVGbXQoc3R5bGUubnVtRm10KSkgewogICAgICAgICAgICBtb2RlbC5yZXN1bHQgPSB1dGlscy5leGNlbFRvRGF0ZSht
b2RlbC5yZXN1bHQsIG9wdGlvbnMuZGF0ZTE5MDQpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChtb2RlbC5zaGFyZVR5cGUgPT09ICdzaGFyZWQnKSB7CiAgICAgICAgICAgIGlmIChtb2RlbC5yZWYpIHsKICAgICAgICAgICAgICAvLyBtYXN0ZXIKICAgICAgICAgICAgICBvcHRpb25zLmZvcm11bGFlW21vZGVsLnNpXSA9IG1vZGVsLmFkZHJlc3M7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gc2xhdmUKICAgICAgICAgICAgICBtb2RlbC5zaGFyZWRGb3JtdWxhID0gb3B0aW9ucy5mb3JtdWxhZVtt
b2RlbC5zaV07CiAgICAgICAgICAgICAgZGVsZXRlIG1vZGVsLnNoYXJlVHlwZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZGVsZXRlIG1vZGVsLnNpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgYnJlYWs7CiAgICAgIH0gLy8gbG9vayBmb3IgaHlwZXJsaW5rCgoKICAgICAgdmFyIGh5cGVybGluayA9IG9wdGlvbnMuaHlwZXJsaW5rTWFwW21vZGVsLmFkZHJlc3NdOwoKICAgICAgaWYgKGh5cGVybGluaykgewogICAgICAgIGlmIChtb2RlbC50eXBlID09PSBF
bnVtcy5WYWx1ZVR5cGUuRm9ybXVsYSkgewogICAgICAgICAgbW9kZWwudGV4dCA9IG1vZGVsLnJlc3VsdDsKICAgICAgICAgIG1vZGVsLnJlc3VsdCA9IHVuZGVmaW5lZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbW9kZWwudGV4dCA9IG1vZGVsLnZhbHVlOwogICAgICAgICAgbW9kZWwudmFsdWUgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICBtb2RlbC50eXBlID0gRW51bXMuVmFsdWVUeXBlLkh5cGVybGluazsKICAgICAgICBtb2RlbC5oeXBlcmxpbmsgPSBoeXBlcmxpbms7CiAgICAgIH0KCiAgICAgIHZh
ciBjb21tZW50ID0gb3B0aW9ucy5jb21tZW50c01hcCAmJiBvcHRpb25zLmNvbW1lbnRzTWFwW21vZGVsLmFkZHJlc3NdOwoKICAgICAgaWYgKGNvbW1lbnQpIHsKICAgICAgICBtb2RlbC5jb21tZW50ID0gY29tbWVudDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdjJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBDZWxsWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQ2VsbFhmb3JtOwoKfSx7Ii4uLy4uLy4uL2Rv
Yy9lbnVtcyI6NywiLi4vLi4vLi4vZG9jL3JhbmdlIjoxMCwiLi4vLi4vLi4vdXRpbHMvdXRpbHMiOjI2LCIuLi9iYXNlLXhmb3JtIjozMSwiLi4vc3RyaW5ncy9yaWNoLXRleHQteGZvcm0iOjEyMX1dLDczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVv
ZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlm
ICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1
ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9y
LCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0
cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1
bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJn
dW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7
IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0
cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rp
b24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UteGZvcm0nKTsKCnZhciBDZkljb25FeHRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhDZkljb25FeHRYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ2ZJY29uRXh0WGZvcm0pOwoKICBm
dW5jdGlvbiBDZkljb25FeHRYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDZkljb25FeHRYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENmSWNvbkV4dFhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIHsKICAgICAgICBpY29uU2V0OiBtb2RlbC5pY29uU2V0LAogICAgICAgIGljb25J
ZDogbW9kZWwuaWNvbklkCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKF9yZWYpIHsKICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXM7CiAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgaWNvblNldDogYXR0cmlidXRlcy5pY29uU2V0LAogICAgICAgIGljb25JZDogQmFzZVhmb3JtLnRvSW50VmFsdWUoYXR0cmlidXRlcy5pY29uSWQpCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAg
ICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHJldHVybiBuYW1lICE9PSB0aGlzLnRhZzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAneDE0OmNmSWNvbic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ2ZJY29uRXh0WGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQ2ZJY29uRXh0WGZvcm07Cgp9LHsiLi4vLi4vYmFzZS14Zm9ybSI6MzF9XSw3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0
cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3Ry
dWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZv
ciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0
cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJv
dyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVP
ZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0
UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3Ry
dWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxl
ZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30p
KTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3V1aWQnKSwKICAgIHV1aWR2NCA9
IF9yZXF1aXJlLnY0OwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UteGZvcm0nKTsKCnZhciBDb21wb3NpdGVYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvc2l0ZS14Zm9ybScpOwoKdmFyIERhdGFiYXJFeHRYZm9ybSA9IHJlcXVpcmUoJy4vZGF0YWJhci1leHQteGZvcm0nKTsKCnZhciBJY29uU2V0RXh0WGZvcm0gPSByZXF1aXJlKCcuL2ljb24tc2V0LWV4dC14Zm9ybScpOwoKdmFyIGV4dEljb25zID0gewogICczVHJpYW5nbGVzJzogdHJ1ZSwKICAnM1N0YXJzJzogdHJ1ZSwKICAnNUJveGVzJzogdHJ1
ZQp9OwoKdmFyIENmUnVsZUV4dFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9zaXRlWGZvcm0pIHsKICBfaW5oZXJpdHMoQ2ZSdWxlRXh0WGZvcm0sIF9Db21wb3NpdGVYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ2ZSdWxlRXh0WGZvcm0pOwoKICBmdW5jdGlvbiBDZlJ1bGVFeHRYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2ZSdWxlRXh0WGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7
CiAgICAgICd4MTQ6ZGF0YUJhcic6IF90aGlzLmRhdGFiYXJYZm9ybSA9IG5ldyBEYXRhYmFyRXh0WGZvcm0oKSwKICAgICAgJ3gxNDppY29uU2V0JzogX3RoaXMuaWNvblNldFhmb3JtID0gbmV3IEljb25TZXRFeHRYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENmUnVsZUV4dFhmb3JtLCBbewogICAga2V5OiAicHJlcGFyZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZShtb2RlbCkgewogICAgICBpZiAoQ2ZSdWxlRXh0WGZvcm0uaXNFeHQobW9kZWwpKSB7CiAgICAgICAg
bW9kZWwueDE0SWQgPSAieyIuY29uY2F0KHV1aWR2NCgpLCAifSIpLnRvVXBwZXJDYXNlKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmICghQ2ZSdWxlRXh0WGZvcm0uaXNFeHQobW9kZWwpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBzd2l0Y2ggKG1vZGVsLnR5cGUpIHsKICAgICAgICBjYXNlICdkYXRhQmFyJzoKICAgICAgICAgIHRoaXMucmVuZGVyRGF0YUJhcih4bWxTdHJlYW0s
IG1vZGVsKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdpY29uU2V0JzoKICAgICAgICAgIHRoaXMucmVuZGVySWNvblNldCh4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyRGF0YUJhciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRGF0YUJhcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZywgewogICAgICAgIHR5cGU6ICdkYXRhQmFyJywKICAgICAgICBpZDogbW9kZWwueDE0
SWQKICAgICAgfSk7CiAgICAgIHRoaXMuZGF0YWJhclhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckljb25TZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckljb25TZXQoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHsKICAgICAgICB0eXBlOiAnaWNvblNldCcsCiAgICAgICAgcHJpb3JpdHk6IG1vZGVsLnByaW9yaXR5LAogICAgICAgIGlkOiBtb2RlbC54
MTRJZCB8fCAieyIuY29uY2F0KHV1aWR2NCgpLCAifSIpCiAgICAgIH0pOwogICAgICB0aGlzLmljb25TZXRYZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVOZXdNb2RlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTmV3TW9kZWwoX3JlZikgewogICAgICB2YXIgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlczsKICAgICAgcmV0dXJuIHsKICAgICAgICB0eXBlOiBhdHRyaWJ1dGVzLnR5cGUsCiAgICAgICAg
eDE0SWQ6IGF0dHJpYnV0ZXMuaWQsCiAgICAgICAgcHJpb3JpdHk6IEJhc2VYZm9ybS50b0ludFZhbHVlKGF0dHJpYnV0ZXMucHJpb3JpdHkpCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAib25QYXJzZXJDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25QYXJzZXJDbG9zZShuYW1lLCBwYXJzZXIpIHsKICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm1vZGVsLCBwYXJzZXIubW9kZWwpOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4MTQ6
Y2ZSdWxlJzsKICAgIH0KICB9XSwgW3sKICAgIGtleTogImlzRXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0V4dChydWxlKSB7CiAgICAgIC8vIGlzIHRoaXMgcnVsZSBwcmltaXRpdmU/CiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdkYXRhQmFyJykgewogICAgICAgIHJldHVybiBEYXRhYmFyRXh0WGZvcm0uaXNFeHQocnVsZSk7CiAgICAgIH0KCiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdpY29uU2V0JykgewogICAgICAgIGlmIChydWxlLmN1c3RvbSB8fCBleHRJY29uc1tydWxlLmljb25TZXRdKSB7CiAgICAgICAgICBy
ZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBDZlJ1bGVFeHRYZm9ybTsKfShDb21wb3NpdGVYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IENmUnVsZUV4dFhmb3JtOwoKfSx7Ii4uLy4uL2Jhc2UteGZvcm0iOjMxLCIuLi8uLi9jb21wb3NpdGUteGZvcm0iOjQ3LCIuL2RhdGFiYXItZXh0LXhmb3JtIjo3OCwiLi9pY29uLXNldC1leHQteGZvcm0iOjgwLCJ1dWlkIjo0MTZ9XSw3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1
c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3Ig
PT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFy
IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9y
LCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcg
VHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBw
KSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90
eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JS
ZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9
IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0
dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBDb21wb3NpdGVYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvc2l0ZS14Zm9y
bScpOwoKdmFyIEZFeHRYZm9ybSA9IHJlcXVpcmUoJy4vZi1leHQteGZvcm0nKTsKCnZhciBDZnZvRXh0WGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb3NpdGVYZm9ybSkgewogIF9pbmhlcml0cyhDZnZvRXh0WGZvcm0sIF9Db21wb3NpdGVYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ2Z2b0V4dFhmb3JtKTsKCiAgZnVuY3Rpb24gQ2Z2b0V4dFhmb3JtKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDZnZvRXh0WGZvcm0pOwoKICAgIF90aGlzID0gX3N1
cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgICd4bTpmJzogX3RoaXMuZkV4dFhmb3JtID0gbmV3IEZFeHRYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENmdm9FeHRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCB7CiAgICAgICAgdHlwZTogbW9kZWwudHlwZQogICAgICB9KTsKCiAgICAgIGlmIChtb2RlbC52
YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5mRXh0WGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwudmFsdWUpOwogICAgICB9CgogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlTmV3TW9kZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU5ld01vZGVsKG5vZGUpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB0eXBlOiBub2RlLmF0dHJpYnV0ZXMudHlwZQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogIm9uUGFyc2VyQ2xvc2UiLAogICAg
dmFsdWU6IGZ1bmN0aW9uIG9uUGFyc2VyQ2xvc2UobmFtZSwgcGFyc2VyKSB7CiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgJ3htOmYnOgogICAgICAgICAgdGhpcy5tb2RlbC52YWx1ZSA9IHBhcnNlci5tb2RlbCA/IHBhcnNlRmxvYXQocGFyc2VyLm1vZGVsKSA6IDA7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4MTQ6Y2Z2byc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ2Z2b0V4dFhm
b3JtOwp9KENvbXBvc2l0ZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQ2Z2b0V4dFhmb3JtOwoKfSx7Ii4uLy4uL2NvbXBvc2l0ZS14Zm9ybSI6NDcsIi4vZi1leHQteGZvcm0iOjc5fV0sNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVu
Y3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5z
dGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAo
InZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRp
Y1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6
IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24g
X2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMs
IE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVu
Y3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNo
YW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0
UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQ29tcG9zaXRlWGZvcm0gPSByZXF1aXJlKCcuLi8uLi9jb21wb3NpdGUteGZvcm0nKTsKCnZhciBTcVJlZkV4dFhmb3JtID0gcmVxdWlyZSgnLi9zcXJlZi1leHQteGZvcm0nKTsKCnZhciBDZlJ1bGVFeHRYZm9ybSA9IHJlcXVpcmUoJy4vY2YtcnVsZS1leHQteGZvcm0nKTsKCnZhciBDb25kaXRpb25hbEZvcm1hdHRpbmdFeHRYZm9ybSA9IC8qI19f
UFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvc2l0ZVhmb3JtKSB7CiAgX2luaGVyaXRzKENvbmRpdGlvbmFsRm9ybWF0dGluZ0V4dFhmb3JtLCBfQ29tcG9zaXRlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENvbmRpdGlvbmFsRm9ybWF0dGluZ0V4dFhmb3JtKTsKCiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxGb3JtYXR0aW5nRXh0WGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbmRpdGlvbmFsRm9ybWF0dGluZ0V4dFhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5j
YWxsKHRoaXMpOwogICAgX3RoaXMubWFwID0gewogICAgICAneG06c3FyZWYnOiBfdGhpcy5zcVJlZiA9IG5ldyBTcVJlZkV4dFhmb3JtKCksCiAgICAgICd4MTQ6Y2ZSdWxlJzogX3RoaXMuY2ZSdWxlID0gbmV3IENmUnVsZUV4dFhmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ29uZGl0aW9uYWxGb3JtYXR0aW5nRXh0WGZvcm0sIFt7CiAgICBrZXk6ICJwcmVwYXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIHZhciBfdGhpczIg
PSB0aGlzOwoKICAgICAgbW9kZWwucnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkgewogICAgICAgIF90aGlzMi5jZlJ1bGUucHJlcGFyZShydWxlLCBvcHRpb25zKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmICghbW9kZWwucnVsZXMuc29tZShDZlJ1bGVFeHRYZm9ybS5pc0V4dCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHht
bFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZywgewogICAgICAgICd4bWxuczp4bSc6ICdodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9leGNlbC8yMDA2L21haW4nCiAgICAgIH0pOwogICAgICBtb2RlbC5ydWxlcy5maWx0ZXIoQ2ZSdWxlRXh0WGZvcm0uaXNFeHQpLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHsKICAgICAgICByZXR1cm4gX3RoaXMzLmNmUnVsZS5yZW5kZXIoeG1sU3RyZWFtLCBydWxlKTsKICAgICAgfSk7IC8vIGZvciBzb21lIG9kZCByZWFzb24sIEV4Y2VsIG5lZWRzIHRoZSA8eG06c3FyZWY+
IG5vZGUgdG8gYmUgYWZ0ZXIgdGhlIHJ1bGVzCgogICAgICB0aGlzLnNxUmVmLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLnJlZik7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVOZXdNb2RlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTmV3TW9kZWwoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgcnVsZXM6IFtdCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAib25QYXJzZXJDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25QYXJzZXJDbG9zZShu
YW1lLCBwYXJzZXIpIHsKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSAneG06c3FyZWYnOgogICAgICAgICAgdGhpcy5tb2RlbC5yZWYgPSBwYXJzZXIubW9kZWw7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAneDE0OmNmUnVsZSc6CiAgICAgICAgICB0aGlzLm1vZGVsLnJ1bGVzLnB1c2gocGFyc2VyLm1vZGVsKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3gxNDpjb25kaXRp
b25hbEZvcm1hdHRpbmcnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENvbmRpdGlvbmFsRm9ybWF0dGluZ0V4dFhmb3JtOwp9KENvbXBvc2l0ZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQ29uZGl0aW9uYWxGb3JtYXR0aW5nRXh0WGZvcm07Cgp9LHsiLi4vLi4vY29tcG9zaXRlLXhmb3JtIjo0NywiLi9jZi1ydWxlLWV4dC14Zm9ybSI6NzQsIi4vc3FyZWYtZXh0LXhmb3JtIjo4MX1dLDc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBi
YWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/
ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVz
Y3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1By
b3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIg
YmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlw
ZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVm
bGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9m
KGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxl
Y3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0g
fQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIENvbXBvc2l0ZVhmb3JtID0gcmVxdWlyZSgnLi4vLi4vY29tcG9zaXRlLXhmb3JtJyk7Cgp2YXIgQ2ZSdWxlRXh0WGZvcm0gPSByZXF1aXJlKCcuL2Nm
LXJ1bGUtZXh0LXhmb3JtJyk7Cgp2YXIgQ29uZGl0aW9uYWxGb3JtYXR0aW5nRXh0WGZvcm0gPSByZXF1aXJlKCcuL2NvbmRpdGlvbmFsLWZvcm1hdHRpbmctZXh0LXhmb3JtJyk7Cgp2YXIgQ29uZGl0aW9uYWxGb3JtYXR0aW5nc0V4dFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9zaXRlWGZvcm0pIHsKICBfaW5oZXJpdHMoQ29uZGl0aW9uYWxGb3JtYXR0aW5nc0V4dFhmb3JtLCBfQ29tcG9zaXRlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENvbmRpdGlvbmFsRm9ybWF0dGluZ3NFeHRY
Zm9ybSk7CgogIGZ1bmN0aW9uIENvbmRpdGlvbmFsRm9ybWF0dGluZ3NFeHRYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uZGl0aW9uYWxGb3JtYXR0aW5nc0V4dFhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMubWFwID0gewogICAgICAneDE0OmNvbmRpdGlvbmFsRm9ybWF0dGluZyc6IF90aGlzLmNmWGZvcm0gPSBuZXcgQ29uZGl0aW9uYWxGb3JtYXR0aW5nRXh0WGZvcm0oKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9j
cmVhdGVDbGFzcyhDb25kaXRpb25hbEZvcm1hdHRpbmdzRXh0WGZvcm0sIFt7CiAgICBrZXk6ICJoYXNDb250ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNDb250ZW50KG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbC5oYXNFeHRDb250ZW50ID09PSB1bmRlZmluZWQpIHsKICAgICAgICBtb2RlbC5oYXNFeHRDb250ZW50ID0gbW9kZWwuc29tZShmdW5jdGlvbiAoY2YpIHsKICAgICAgICAgIHJldHVybiBjZi5ydWxlcy5zb21lKENmUnVsZUV4dFhmb3JtLmlzRXh0KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJu
IG1vZGVsLmhhc0V4dENvbnRlbnQ7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJlcGFyZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZShtb2RlbCwgb3B0aW9ucykgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIG1vZGVsLmZvckVhY2goZnVuY3Rpb24gKGNmKSB7CiAgICAgICAgX3RoaXMyLmNmWGZvcm0ucHJlcGFyZShjZiwgb3B0aW9ucyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAg
ICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICBpZiAodGhpcy5oYXNDb250ZW50KG1vZGVsKSkgewogICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZyk7CiAgICAgICAgbW9kZWwuZm9yRWFjaChmdW5jdGlvbiAoY2YpIHsKICAgICAgICAgIHJldHVybiBfdGhpczMuY2ZYZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBjZik7CiAgICAgICAgfSk7CiAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlTmV3TW9kZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9u
IGNyZWF0ZU5ld01vZGVsKCkgewogICAgICByZXR1cm4gW107CiAgICB9CiAgfSwgewogICAga2V5OiAib25QYXJzZXJDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25QYXJzZXJDbG9zZShuYW1lLCBwYXJzZXIpIHsKICAgICAgLy8gbW9kZWwgaXMgYXJyYXkgb2YgY29uZGl0aW9uYWwgZm9ybWF0dGluZyBvYmplY3RzCiAgICAgIHRoaXMubW9kZWwucHVzaChwYXJzZXIubW9kZWwpOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4MTQ6Y29uZGl0
aW9uYWxGb3JtYXR0aW5ncyc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ29uZGl0aW9uYWxGb3JtYXR0aW5nc0V4dFhmb3JtOwp9KENvbXBvc2l0ZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQ29uZGl0aW9uYWxGb3JtYXR0aW5nc0V4dFhmb3JtOwoKfSx7Ii4uLy4uL2NvbXBvc2l0ZS14Zm9ybSI6NDcsIi4vY2YtcnVsZS1leHQteGZvcm0iOjc0LCIuL2NvbmRpdGlvbmFsLWZvcm1hdHRpbmctZXh0LXhmb3JtIjo3Nn1dLDc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rp
b24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAh
PT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0
IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8p
LnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH0KCmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVs
bCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2
YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBf
ZTsgfSB9IHJldHVybiBfYXJyOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZh
ciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3Rv
ciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3
IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2Yobywg
cCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3Rv
dHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9y
UmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsg
fSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJl
dHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vLi4vYmFzZS14Zm9ybScpOwoKdmFy
IENvbXBvc2l0ZVhmb3JtID0gcmVxdWlyZSgnLi4vLi4vY29tcG9zaXRlLXhmb3JtJyk7Cgp2YXIgQ29sb3JYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL3N0eWxlL2NvbG9yLXhmb3JtJyk7Cgp2YXIgQ2Z2b0V4dFhmb3JtID0gcmVxdWlyZSgnLi9jZnZvLWV4dC14Zm9ybScpOwoKdmFyIERhdGFiYXJFeHRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvc2l0ZVhmb3JtKSB7CiAgX2luaGVyaXRzKERhdGFiYXJFeHRYZm9ybSwgX0NvbXBvc2l0ZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEYXRh
YmFyRXh0WGZvcm0pOwoKICBmdW5jdGlvbiBEYXRhYmFyRXh0WGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFiYXJFeHRYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ3gxNDpjZnZvJzogX3RoaXMuY2Z2b1hmb3JtID0gbmV3IENmdm9FeHRYZm9ybSgpLAogICAgICAneDE0OmJvcmRlckNvbG9yJzogX3RoaXMuYm9yZGVyQ29sb3JYZm9ybSA9IG5ldyBDb2xvclhmb3JtKCd4MTQ6Ym9yZGVyQ29sb3InKSwKICAg
ICAgJ3gxNDpuZWdhdGl2ZUJvcmRlckNvbG9yJzogX3RoaXMubmVnYXRpdmVCb3JkZXJDb2xvclhmb3JtID0gbmV3IENvbG9yWGZvcm0oJ3gxNDpuZWdhdGl2ZUJvcmRlckNvbG9yJyksCiAgICAgICd4MTQ6bmVnYXRpdmVGaWxsQ29sb3InOiBfdGhpcy5uZWdhdGl2ZUZpbGxDb2xvclhmb3JtID0gbmV3IENvbG9yWGZvcm0oJ3gxNDpuZWdhdGl2ZUZpbGxDb2xvcicpLAogICAgICAneDE0OmF4aXNDb2xvcic6IF90aGlzLmF4aXNDb2xvclhmb3JtID0gbmV3IENvbG9yWGZvcm0oJ3gxNDpheGlzQ29sb3InKQogICAgfTsKICAgIHJl
dHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhEYXRhYmFyRXh0WGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCB7CiAgICAgICAgbWluTGVuZ3RoOiBCYXNlWGZvcm0udG9JbnRBdHRyaWJ1dGUobW9kZWwubWluTGVuZ3RoLCAwLCB0cnVlKSwKICAgICAgICBtYXhMZW5ndGg6IEJhc2VYZm9ybS50b0ludEF0dHJpYnV0ZShtb2Rl
bC5tYXhMZW5ndGgsIDEwMCwgdHJ1ZSksCiAgICAgICAgYm9yZGVyOiBCYXNlWGZvcm0udG9Cb29sQXR0cmlidXRlKG1vZGVsLmJvcmRlciwgZmFsc2UpLAogICAgICAgIGdyYWRpZW50OiBCYXNlWGZvcm0udG9Cb29sQXR0cmlidXRlKG1vZGVsLmdyYWRpZW50LCB0cnVlKSwKICAgICAgICBuZWdhdGl2ZUJhckNvbG9yU2FtZUFzUG9zaXRpdmU6IEJhc2VYZm9ybS50b0Jvb2xBdHRyaWJ1dGUobW9kZWwubmVnYXRpdmVCYXJDb2xvclNhbWVBc1Bvc2l0aXZlLCB0cnVlKSwKICAgICAgICBuZWdhdGl2ZUJhckJvcmRlckNvbG9yU2Ft
ZUFzUG9zaXRpdmU6IEJhc2VYZm9ybS50b0Jvb2xBdHRyaWJ1dGUobW9kZWwubmVnYXRpdmVCYXJCb3JkZXJDb2xvclNhbWVBc1Bvc2l0aXZlLCB0cnVlKSwKICAgICAgICBheGlzUG9zaXRpb246IEJhc2VYZm9ybS50b0F0dHJpYnV0ZShtb2RlbC5heGlzUG9zaXRpb24sICdhdXRvJyksCiAgICAgICAgZGlyZWN0aW9uOiBCYXNlWGZvcm0udG9BdHRyaWJ1dGUobW9kZWwuZGlyZWN0aW9uLCAnbGVmdFRvUmlnaHQnKQogICAgICB9KTsKICAgICAgbW9kZWwuY2Z2by5mb3JFYWNoKGZ1bmN0aW9uIChjZnZvKSB7CiAgICAgICAgX3Ro
aXMyLmNmdm9YZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBjZnZvKTsKICAgICAgfSk7CiAgICAgIHRoaXMuYm9yZGVyQ29sb3JYZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5ib3JkZXJDb2xvcik7CiAgICAgIHRoaXMubmVnYXRpdmVCb3JkZXJDb2xvclhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLm5lZ2F0aXZlQm9yZGVyQ29sb3IpOwogICAgICB0aGlzLm5lZ2F0aXZlRmlsbENvbG9yWGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwubmVnYXRpdmVGaWxsQ29sb3IpOwogICAgICB0aGlzLmF4aXNDb2xvclhmb3Jt
LnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmF4aXNDb2xvcik7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVOZXdNb2RlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTmV3TW9kZWwoX3JlZikgewogICAgICB2YXIgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlczsKICAgICAgcmV0dXJuIHsKICAgICAgICBjZnZvOiBbXSwKICAgICAgICBtaW5MZW5ndGg6IEJhc2VYZm9ybS50b0ludFZhbHVlKGF0dHJpYnV0ZXMubWluTGVuZ3RoLCAwKSwKICAgICAgICBtYXhM
ZW5ndGg6IEJhc2VYZm9ybS50b0ludFZhbHVlKGF0dHJpYnV0ZXMubWF4TGVuZ3RoLCAxMDApLAogICAgICAgIGJvcmRlcjogQmFzZVhmb3JtLnRvQm9vbFZhbHVlKGF0dHJpYnV0ZXMuYm9yZGVyLCBmYWxzZSksCiAgICAgICAgZ3JhZGllbnQ6IEJhc2VYZm9ybS50b0Jvb2xWYWx1ZShhdHRyaWJ1dGVzLmdyYWRpZW50LCB0cnVlKSwKICAgICAgICBuZWdhdGl2ZUJhckNvbG9yU2FtZUFzUG9zaXRpdmU6IEJhc2VYZm9ybS50b0Jvb2xWYWx1ZShhdHRyaWJ1dGVzLm5lZ2F0aXZlQmFyQ29sb3JTYW1lQXNQb3NpdGl2ZSwgdHJ1ZSks
CiAgICAgICAgbmVnYXRpdmVCYXJCb3JkZXJDb2xvclNhbWVBc1Bvc2l0aXZlOiBCYXNlWGZvcm0udG9Cb29sVmFsdWUoYXR0cmlidXRlcy5uZWdhdGl2ZUJhckJvcmRlckNvbG9yU2FtZUFzUG9zaXRpdmUsIHRydWUpLAogICAgICAgIGF4aXNQb3NpdGlvbjogQmFzZVhmb3JtLnRvU3RyaW5nVmFsdWUoYXR0cmlidXRlcy5heGlzUG9zaXRpb24sICdhdXRvJyksCiAgICAgICAgZGlyZWN0aW9uOiBCYXNlWGZvcm0udG9TdHJpbmdWYWx1ZShhdHRyaWJ1dGVzLmRpcmVjdGlvbiwgJ2xlZnRUb1JpZ2h0JykKICAgICAgfTsKICAgIH0K
ICB9LCB7CiAgICBrZXk6ICJvblBhcnNlckNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblBhcnNlckNsb3NlKG5hbWUsIHBhcnNlcikgewogICAgICB2YXIgX25hbWUkc3BsaXQgPSBuYW1lLnNwbGl0KCc6JyksCiAgICAgICAgICBfbmFtZSRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfbmFtZSRzcGxpdCwgMiksCiAgICAgICAgICBwcm9wID0gX25hbWUkc3BsaXQyWzFdOwoKICAgICAgc3dpdGNoIChwcm9wKSB7CiAgICAgICAgY2FzZSAnY2Z2byc6CiAgICAgICAgICB0aGlzLm1vZGVsLmNmdm8ucHVzaChwYXJzZXIubW9k
ZWwpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLm1vZGVsW3Byb3BdID0gcGFyc2VyLm1vZGVsOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAneDE0OmRhdGFCYXInOwogICAgfQogIH1dLCBbewogICAga2V5OiAiaXNFeHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzRXh0KHJ1bGUpIHsKICAgICAgLy8gbm90IGFsbCBkYXRhYmFycyBuZWVkIGV4dAogICAgICAv
LyBUT0RPOiByZWZpbmUgdGhpcwogICAgICByZXR1cm4gIXJ1bGUuZ3JhZGllbnQ7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRGF0YWJhckV4dFhmb3JtOwp9KENvbXBvc2l0ZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gRGF0YWJhckV4dFhmb3JtOwoKfSx7Ii4uLy4uL2Jhc2UteGZvcm0iOjMxLCIuLi8uLi9jb21wb3NpdGUteGZvcm0iOjQ3LCIuLi8uLi9zdHlsZS9jb2xvci14Zm9ybSI6MTI3LCIuL2Nmdm8tZXh0LXhmb3JtIjo3NX1dLDc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3Qi
OwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9s
ICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkg
PCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJv
cHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3Io
IlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFBy
b3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJp
dmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxm
LCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNl
bGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsg
fSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UteGZvcm0nKTsKCnZhciBGRXh0WGZvcm0g
PSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoRkV4dFhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihGRXh0WGZvcm0pOwoKICBmdW5jdGlvbiBGRXh0WGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRkV4dFhmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRkV4dFhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5k
ZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIG51bGwsIG1vZGVsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3BlbigpIHsKICAgICAgdGhpcy5tb2RlbCA9ICcnOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgdGhpcy5tb2RlbCArPSB0ZXh0OwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAog
ICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICByZXR1cm4gbmFtZSAhPT0gdGhpcy50YWc7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3htOmYnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEZFeHRYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBGRXh0WGZvcm07Cgp9LHsiLi4vLi4vYmFzZS14Zm9ybSI6MzF9XSw4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0
IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJv
bCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFs
aWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJp
bmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAo
bGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJ1bmRlZmluZWQiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2Qg
PSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChf
ZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMp
IHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3Mo
Q29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7
IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3Rv
dHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9
IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVD
b25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4g
Y2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAo
KSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UteGZv
cm0nKTsKCnZhciBDb21wb3NpdGVYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvc2l0ZS14Zm9ybScpOwoKdmFyIENmdm9FeHRYZm9ybSA9IHJlcXVpcmUoJy4vY2Z2by1leHQteGZvcm0nKTsKCnZhciBDZkljb25FeHRYZm9ybSA9IHJlcXVpcmUoJy4vY2YtaWNvbi1leHQteGZvcm0nKTsKCnZhciBJY29uU2V0RXh0WGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb3NpdGVYZm9ybSkgewogIF9pbmhlcml0cyhJY29uU2V0RXh0WGZvcm0sIF9Db21wb3NpdGVYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRl
U3VwZXIoSWNvblNldEV4dFhmb3JtKTsKCiAgZnVuY3Rpb24gSWNvblNldEV4dFhmb3JtKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJY29uU2V0RXh0WGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgICd4MTQ6Y2Z2byc6IF90aGlzLmNmdm9YZm9ybSA9IG5ldyBDZnZvRXh0WGZvcm0oKSwKICAgICAgJ3gxNDpjZkljb24nOiBfdGhpcy5jZkljb25YZm9ybSA9IG5ldyBDZkljb25FeHRYZm9ybSgpCiAgICB9OwogICAgcmV0dXJu
IF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEljb25TZXRFeHRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHsKICAgICAgICBpY29uU2V0OiBCYXNlWGZvcm0udG9TdHJpbmdBdHRyaWJ1dGUobW9kZWwuaWNvblNldCksCiAgICAgICAgcmV2ZXJzZTogQmFzZVhmb3JtLnRvQm9vbEF0dHJpYnV0ZShtb2RlbC5yZXZlcnNlLCBmYWxz
ZSksCiAgICAgICAgc2hvd1ZhbHVlOiBCYXNlWGZvcm0udG9Cb29sQXR0cmlidXRlKG1vZGVsLnNob3dWYWx1ZSwgdHJ1ZSksCiAgICAgICAgY3VzdG9tOiBCYXNlWGZvcm0udG9Cb29sQXR0cmlidXRlKG1vZGVsLmljb25zLCBmYWxzZSkKICAgICAgfSk7CiAgICAgIG1vZGVsLmNmdm8uZm9yRWFjaChmdW5jdGlvbiAoY2Z2bykgewogICAgICAgIF90aGlzMi5jZnZvWGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgY2Z2byk7CiAgICAgIH0pOwoKICAgICAgaWYgKG1vZGVsLmljb25zKSB7CiAgICAgICAgbW9kZWwuaWNvbnMuZm9yRWFj
aChmdW5jdGlvbiAoaWNvbiwgaSkgewogICAgICAgICAgaWNvbi5pY29uSWQgPSBpOwoKICAgICAgICAgIF90aGlzMi5jZkljb25YZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBpY29uKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZU5ld01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVOZXdNb2RlbChfcmVmKSB7CiAgICAgIHZhciBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzOwogICAgICByZXR1cm4gewogICAgICAg
IGNmdm86IFtdLAogICAgICAgIGljb25TZXQ6IEJhc2VYZm9ybS50b1N0cmluZ1ZhbHVlKGF0dHJpYnV0ZXMuaWNvblNldCwgJzNUcmFmZmljTGlnaHRzJyksCiAgICAgICAgcmV2ZXJzZTogQmFzZVhmb3JtLnRvQm9vbFZhbHVlKGF0dHJpYnV0ZXMucmV2ZXJzZSwgZmFsc2UpLAogICAgICAgIHNob3dWYWx1ZTogQmFzZVhmb3JtLnRvQm9vbFZhbHVlKGF0dHJpYnV0ZXMuc2hvd1ZhbHVlLCB0cnVlKQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogIm9uUGFyc2VyQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGFy
c2VyQ2xvc2UobmFtZSwgcGFyc2VyKSB7CiAgICAgIHZhciBfbmFtZSRzcGxpdCA9IG5hbWUuc3BsaXQoJzonKSwKICAgICAgICAgIF9uYW1lJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9uYW1lJHNwbGl0LCAyKSwKICAgICAgICAgIHByb3AgPSBfbmFtZSRzcGxpdDJbMV07CgogICAgICBzd2l0Y2ggKHByb3ApIHsKICAgICAgICBjYXNlICdjZnZvJzoKICAgICAgICAgIHRoaXMubW9kZWwuY2Z2by5wdXNoKHBhcnNlci5tb2RlbCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnY2ZJY29uJzoKICAgICAgICAgIGlm
ICghdGhpcy5tb2RlbC5pY29ucykgewogICAgICAgICAgICB0aGlzLm1vZGVsLmljb25zID0gW107CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5tb2RlbC5pY29ucy5wdXNoKHBhcnNlci5tb2RlbCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRoaXMubW9kZWxbcHJvcF0gPSBwYXJzZXIubW9kZWw7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4MTQ6aWNvblNl
dCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSWNvblNldEV4dFhmb3JtOwp9KENvbXBvc2l0ZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gSWNvblNldEV4dFhmb3JtOwoKfSx7Ii4uLy4uL2Jhc2UteGZvcm0iOjMxLCIuLi8uLi9jb21wb3NpdGUteGZvcm0iOjQ3LCIuL2NmLWljb24tZXh0LXhmb3JtIjo3MywiLi9jZnZvLWV4dC14Zm9ybSI6NzV9XSw4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVv
ZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBv
Ymo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsg
ZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRp
ZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlv
biIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0
UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFy
IE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIg
fHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAo
dHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90
b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi8uLi9iYXNlLXhmb3JtJyk7Cgp2YXIgU3FyZWZFeHRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhl
cml0cyhTcXJlZkV4dFhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTcXJlZkV4dFhmb3JtKTsKCiAgZnVuY3Rpb24gU3FyZWZFeHRYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcXJlZkV4dFhmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3FyZWZFeHRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAg
ICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnLCBudWxsLCBtb2RlbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4oKSB7CiAgICAgIHRoaXMubW9kZWwgPSAnJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIHRoaXMubW9kZWwgKz0gdGV4dDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNs
b3NlKG5hbWUpIHsKICAgICAgcmV0dXJuIG5hbWUgIT09IHRoaXMudGFnOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4bTpzcXJlZic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU3FyZWZFeHRYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBTcXJlZkV4dFhmb3JtOwoKfSx7Ii4uLy4uL2Jhc2UteGZvcm0iOjMxfV0sODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBf
dHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBT
eW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVy
biBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVu
Y3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVz
Y3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0
cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmln
dXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVz
KENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90
eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2Yo
bywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVj
dChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlh
bGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChS
ZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlw
ZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UteGZvcm0nKTsKCnZhciBDb21wb3NpdGVYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvc2l0ZS14Zm9ybScpOwoKdmFyIFJhbmdlID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vZG9jL3JhbmdlJyk7Cgp2YXIgRGF0YWJhclhmb3JtID0gcmVxdWlyZSgnLi9kYXRh
YmFyLXhmb3JtJyk7Cgp2YXIgRXh0THN0UmVmWGZvcm0gPSByZXF1aXJlKCcuL2V4dC1sc3QtcmVmLXhmb3JtJyk7Cgp2YXIgRm9ybXVsYVhmb3JtID0gcmVxdWlyZSgnLi9mb3JtdWxhLXhmb3JtJyk7Cgp2YXIgQ29sb3JTY2FsZVhmb3JtID0gcmVxdWlyZSgnLi9jb2xvci1zY2FsZS14Zm9ybScpOwoKdmFyIEljb25TZXRYZm9ybSA9IHJlcXVpcmUoJy4vaWNvbi1zZXQteGZvcm0nKTsKCnZhciBleHRJY29ucyA9IHsKICAnM1RyaWFuZ2xlcyc6IHRydWUsCiAgJzNTdGFycyc6IHRydWUsCiAgJzVCb3hlcyc6IHRydWUKfTsKCnZh
ciBnZXRUZXh0Rm9ybXVsYSA9IGZ1bmN0aW9uIGdldFRleHRGb3JtdWxhKG1vZGVsKSB7CiAgaWYgKG1vZGVsLmZvcm11bGFlICYmIG1vZGVsLmZvcm11bGFlWzBdKSB7CiAgICByZXR1cm4gbW9kZWwuZm9ybXVsYWVbMF07CiAgfQoKICB2YXIgcmFuZ2UgPSBuZXcgUmFuZ2UobW9kZWwucmVmKTsKICB2YXIgdGwgPSByYW5nZS50bDsKCiAgc3dpdGNoIChtb2RlbC5vcGVyYXRvcikgewogICAgY2FzZSAnY29udGFpbnNUZXh0JzoKICAgICAgcmV0dXJuICJOT1QoSVNFUlJPUihTRUFSQ0goXCIiLmNvbmNhdChtb2RlbC50ZXh0LCAi
XCIsIikuY29uY2F0KHRsLCAiKSkpIik7CgogICAgY2FzZSAnY29udGFpbnNCbGFua3MnOgogICAgICByZXR1cm4gIkxFTihUUklNKCIuY29uY2F0KHRsLCAiKSk9MCIpOwoKICAgIGNhc2UgJ25vdENvbnRhaW5zQmxhbmtzJzoKICAgICAgcmV0dXJuICJMRU4oVFJJTSgiLmNvbmNhdCh0bCwgIikpPjAiKTsKCiAgICBjYXNlICdjb250YWluc0Vycm9ycyc6CiAgICAgIHJldHVybiAiSVNFUlJPUigiLmNvbmNhdCh0bCwgIikiKTsKCiAgICBjYXNlICdub3RDb250YWluc0Vycm9ycyc6CiAgICAgIHJldHVybiAiTk9UKElTRVJST1Io
Ii5jb25jYXQodGwsICIpKSIpOwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQp9OwoKdmFyIGdldFRpbWVQZXJpb2RGb3JtdWxhID0gZnVuY3Rpb24gZ2V0VGltZVBlcmlvZEZvcm11bGEobW9kZWwpIHsKICBpZiAobW9kZWwuZm9ybXVsYWUgJiYgbW9kZWwuZm9ybXVsYWVbMF0pIHsKICAgIHJldHVybiBtb2RlbC5mb3JtdWxhZVswXTsKICB9CgogIHZhciByYW5nZSA9IG5ldyBSYW5nZShtb2RlbC5yZWYpOwogIHZhciB0bCA9IHJhbmdlLnRsOwoKICBzd2l0Y2ggKG1vZGVsLnRpbWVQZXJpb2QpIHsK
ICAgIGNhc2UgJ3RoaXNXZWVrJzoKICAgICAgcmV0dXJuICJBTkQoVE9EQVkoKS1ST1VORERPV04oIi5jb25jYXQodGwsICIsMCk8PVdFRUtEQVkoVE9EQVkoKSktMSxST1VORERPV04oIikuY29uY2F0KHRsLCAiLDApLVRPREFZKCk8PTctV0VFS0RBWShUT0RBWSgpKSkiKTsKCiAgICBjYXNlICdsYXN0V2Vlayc6CiAgICAgIHJldHVybiAiQU5EKFRPREFZKCktUk9VTkRET1dOKCIuY29uY2F0KHRsLCAiLDApPj0oV0VFS0RBWShUT0RBWSgpKSksVE9EQVkoKS1ST1VORERPV04oIikuY29uY2F0KHRsLCAiLDApPChXRUVLREFZKFRP
REFZKCkpKzcpKSIpOwoKICAgIGNhc2UgJ25leHRXZWVrJzoKICAgICAgcmV0dXJuICJBTkQoUk9VTkRET1dOKCIuY29uY2F0KHRsLCAiLDApLVRPREFZKCk+KDctV0VFS0RBWShUT0RBWSgpKSksUk9VTkRET1dOKCIpLmNvbmNhdCh0bCwgIiwwKS1UT0RBWSgpPCgxNS1XRUVLREFZKFRPREFZKCkpKSkiKTsKCiAgICBjYXNlICd5ZXN0ZXJkYXknOgogICAgICByZXR1cm4gIkZMT09SKCIuY29uY2F0KHRsLCAiLDEpPVRPREFZKCktMSIpOwoKICAgIGNhc2UgJ3RvZGF5JzoKICAgICAgcmV0dXJuICJGTE9PUigiLmNvbmNhdCh0bCwg
IiwxKT1UT0RBWSgpIik7CgogICAgY2FzZSAndG9tb3Jyb3cnOgogICAgICByZXR1cm4gIkZMT09SKCIuY29uY2F0KHRsLCAiLDEpPVRPREFZKCkrMSIpOwoKICAgIGNhc2UgJ2xhc3Q3RGF5cyc6CiAgICAgIHJldHVybiAiQU5EKFRPREFZKCktRkxPT1IoIi5jb25jYXQodGwsICIsMSk8PTYsRkxPT1IoIikuY29uY2F0KHRsLCAiLDEpPD1UT0RBWSgpKSIpOwoKICAgIGNhc2UgJ2xhc3RNb250aCc6CiAgICAgIHJldHVybiAiQU5EKE1PTlRIKCIuY29uY2F0KHRsLCAiKT1NT05USChFREFURShUT0RBWSgpLDAtMSkpLFlFQVIoIiku
Y29uY2F0KHRsLCAiKT1ZRUFSKEVEQVRFKFRPREFZKCksMC0xKSkpIik7CgogICAgY2FzZSAndGhpc01vbnRoJzoKICAgICAgcmV0dXJuICJBTkQoTU9OVEgoIi5jb25jYXQodGwsICIpPU1PTlRIKFRPREFZKCkpLFlFQVIoIikuY29uY2F0KHRsLCAiKT1ZRUFSKFRPREFZKCkpKSIpOwoKICAgIGNhc2UgJ25leHRNb250aCc6CiAgICAgIHJldHVybiAiQU5EKE1PTlRIKCIuY29uY2F0KHRsLCAiKT1NT05USChFREFURShUT0RBWSgpLDArMSkpLFlFQVIoIikuY29uY2F0KHRsLCAiKT1ZRUFSKEVEQVRFKFRPREFZKCksMCsxKSkpIik7
CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICB9Cn07Cgp2YXIgb3BUeXBlID0gZnVuY3Rpb24gb3BUeXBlKGF0dHJpYnV0ZXMpIHsKICB2YXIgdHlwZSA9IGF0dHJpYnV0ZXMudHlwZSwKICAgICAgb3BlcmF0b3IgPSBhdHRyaWJ1dGVzLm9wZXJhdG9yOwoKICBzd2l0Y2ggKHR5cGUpIHsKICAgIGNhc2UgJ2NvbnRhaW5zVGV4dCc6CiAgICBjYXNlICdjb250YWluc0JsYW5rcyc6CiAgICBjYXNlICdub3RDb250YWluc0JsYW5rcyc6CiAgICBjYXNlICdjb250YWluc0Vycm9ycyc6CiAgICBjYXNlICdub3RD
b250YWluc0Vycm9ycyc6CiAgICAgIHJldHVybiB7CiAgICAgICAgdHlwZTogJ2NvbnRhaW5zVGV4dCcsCiAgICAgICAgb3BlcmF0b3I6IHR5cGUKICAgICAgfTsKCiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gewogICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yCiAgICAgIH07CiAgfQp9OwoKdmFyIENmUnVsZVhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9zaXRlWGZvcm0pIHsKICBfaW5oZXJpdHMoQ2ZSdWxlWGZvcm0sIF9Db21wb3NpdGVYZm9ybSk7CgogIHZhciBfc3Vw
ZXIgPSBfY3JlYXRlU3VwZXIoQ2ZSdWxlWGZvcm0pOwoKICBmdW5jdGlvbiBDZlJ1bGVYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2ZSdWxlWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgIGRhdGFCYXI6IF90aGlzLmRhdGFiYXJYZm9ybSA9IG5ldyBEYXRhYmFyWGZvcm0oKSwKICAgICAgZXh0THN0OiBfdGhpcy5leHRMc3RSZWZYZm9ybSA9IG5ldyBFeHRMc3RSZWZYZm9ybSgpLAogICAgICBmb3JtdWxhOiBfdGhp
cy5mb3JtdWxhWGZvcm0gPSBuZXcgRm9ybXVsYVhmb3JtKCksCiAgICAgIGNvbG9yU2NhbGU6IF90aGlzLmNvbG9yU2NhbGVYZm9ybSA9IG5ldyBDb2xvclNjYWxlWGZvcm0oKSwKICAgICAgaWNvblNldDogX3RoaXMuaWNvblNldFhmb3JtID0gbmV3IEljb25TZXRYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENmUnVsZVhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICBzd2l0Y2ggKG1v
ZGVsLnR5cGUpIHsKICAgICAgICBjYXNlICdleHByZXNzaW9uJzoKICAgICAgICAgIHRoaXMucmVuZGVyRXhwcmVzc2lvbih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdjZWxsSXMnOgogICAgICAgICAgdGhpcy5yZW5kZXJDZWxsSXMoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAndG9wMTAnOgogICAgICAgICAgdGhpcy5yZW5kZXJUb3AxMCh4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdhYm92
ZUF2ZXJhZ2UnOgogICAgICAgICAgdGhpcy5yZW5kZXJBYm92ZUF2ZXJhZ2UoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnZGF0YUJhcic6CiAgICAgICAgICB0aGlzLnJlbmRlckRhdGFCYXIoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnY29sb3JTY2FsZSc6CiAgICAgICAgICB0aGlzLnJlbmRlckNvbG9yU2NhbGUoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnaWNvblNldCc6CiAgICAgICAg
ICB0aGlzLnJlbmRlckljb25TZXQoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnY29udGFpbnNUZXh0JzoKICAgICAgICAgIHRoaXMucmVuZGVyVGV4dCh4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICd0aW1lUGVyaW9kJzoKICAgICAgICAgIHRoaXMucmVuZGVyVGltZVBlcmlvZCh4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyRXhwcmVzc2lvbiIsCiAgICB2
YWx1ZTogZnVuY3Rpb24gcmVuZGVyRXhwcmVzc2lvbih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZywgewogICAgICAgIHR5cGU6ICdleHByZXNzaW9uJywKICAgICAgICBkeGZJZDogbW9kZWwuZHhmSWQsCiAgICAgICAgcHJpb3JpdHk6IG1vZGVsLnByaW9yaXR5CiAgICAgIH0pOwogICAgICB0aGlzLmZvcm11bGFYZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5mb3JtdWxhZVswXSk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6
ICJyZW5kZXJDZWxsSXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNlbGxJcyh4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCB7CiAgICAgICAgdHlwZTogJ2NlbGxJcycsCiAgICAgICAgZHhmSWQ6IG1vZGVsLmR4ZklkLAogICAgICAgIHByaW9yaXR5OiBtb2RlbC5wcmlvcml0eSwKICAgICAgICBvcGVyYXRvcjogbW9kZWwub3BlcmF0b3IKICAgICAgfSk7CiAgICAgIG1vZGVsLmZvcm11bGFlLmZvckVhY2goZnVuY3Rpb24g
KGZvcm11bGEpIHsKICAgICAgICBfdGhpczIuZm9ybXVsYVhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIGZvcm11bGEpOwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlclRvcDEwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJUb3AxMCh4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSh0aGlzLnRhZywgewogICAgICAgIHR5cGU6ICd0b3AxMCcsCiAgICAgICAgZHhmSWQ6IG1vZGVsLmR4ZklkLAogICAgICAgIHByaW9yaXR5
OiBtb2RlbC5wcmlvcml0eSwKICAgICAgICBwZXJjZW50OiBCYXNlWGZvcm0udG9Cb29sQXR0cmlidXRlKG1vZGVsLnBlcmNlbnQsIGZhbHNlKSwKICAgICAgICBib3R0b206IEJhc2VYZm9ybS50b0Jvb2xBdHRyaWJ1dGUobW9kZWwuYm90dG9tLCBmYWxzZSksCiAgICAgICAgcmFuazogQmFzZVhmb3JtLnRvSW50VmFsdWUobW9kZWwucmFuaywgMTAsIHRydWUpCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckFib3ZlQXZlcmFnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQWJvdmVBdmVyYWdlKHht
bFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnLCB7CiAgICAgICAgdHlwZTogJ2Fib3ZlQXZlcmFnZScsCiAgICAgICAgZHhmSWQ6IG1vZGVsLmR4ZklkLAogICAgICAgIHByaW9yaXR5OiBtb2RlbC5wcmlvcml0eSwKICAgICAgICBhYm92ZUF2ZXJhZ2U6IEJhc2VYZm9ybS50b0Jvb2xBdHRyaWJ1dGUobW9kZWwuYWJvdmVBdmVyYWdlLCB0cnVlKQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJEYXRhQmFyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJEYXRh
QmFyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCB7CiAgICAgICAgdHlwZTogJ2RhdGFCYXInLAogICAgICAgIHByaW9yaXR5OiBtb2RlbC5wcmlvcml0eQogICAgICB9KTsKICAgICAgdGhpcy5kYXRhYmFyWGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpOwogICAgICB0aGlzLmV4dExzdFJlZlhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckNvbG9yU2NhbGUi
LAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNvbG9yU2NhbGUoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHsKICAgICAgICB0eXBlOiAnY29sb3JTY2FsZScsCiAgICAgICAgcHJpb3JpdHk6IG1vZGVsLnByaW9yaXR5CiAgICAgIH0pOwogICAgICB0aGlzLmNvbG9yU2NhbGVYZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJJY29uU2V0IiwKICAgIHZhbHVlOiBm
dW5jdGlvbiByZW5kZXJJY29uU2V0KHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgLy8gaWNvbnNldCBpcyBhbGwgcHJpbWl0aXZlIG9yIGFsbCBleHRMc3QKICAgICAgaWYgKCFDZlJ1bGVYZm9ybS5pc1ByaW1pdGl2ZShtb2RlbCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZywgewogICAgICAgIHR5cGU6ICdpY29uU2V0JywKICAgICAgICBwcmlvcml0eTogbW9kZWwucHJpb3JpdHkKICAgICAgfSk7CiAgICAgIHRoaXMuaWNvblNldFhmb3JtLnJlbmRlcih4bWxT
dHJlYW0sIG1vZGVsKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlclRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclRleHQoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHsKICAgICAgICB0eXBlOiBtb2RlbC5vcGVyYXRvciwKICAgICAgICBkeGZJZDogbW9kZWwuZHhmSWQsCiAgICAgICAgcHJpb3JpdHk6IG1vZGVsLnByaW9yaXR5LAogICAgICAgIG9wZXJhdG9yOiBCYXNlWGZvcm0udG9TdHJpbmdBdHRy
aWJ1dGUobW9kZWwub3BlcmF0b3IsICdjb250YWluc1RleHQnKQogICAgICB9KTsKICAgICAgdmFyIGZvcm11bGEgPSBnZXRUZXh0Rm9ybXVsYShtb2RlbCk7CgogICAgICBpZiAoZm9ybXVsYSkgewogICAgICAgIHRoaXMuZm9ybXVsYVhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIGZvcm11bGEpOwogICAgICB9CgogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyVGltZVBlcmlvZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyVGltZVBlcmlvZCh4bWxTdHJlYW0sIG1vZGVs
KSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZywgewogICAgICAgIHR5cGU6ICd0aW1lUGVyaW9kJywKICAgICAgICBkeGZJZDogbW9kZWwuZHhmSWQsCiAgICAgICAgcHJpb3JpdHk6IG1vZGVsLnByaW9yaXR5LAogICAgICAgIHRpbWVQZXJpb2Q6IG1vZGVsLnRpbWVQZXJpb2QKICAgICAgfSk7CiAgICAgIHZhciBmb3JtdWxhID0gZ2V0VGltZVBlcmlvZEZvcm11bGEobW9kZWwpOwoKICAgICAgaWYgKGZvcm11bGEpIHsKICAgICAgICB0aGlzLmZvcm11bGFYZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBmb3JtdWxh
KTsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZU5ld01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVOZXdNb2RlbChfcmVmKSB7CiAgICAgIHZhciBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzOwogICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvcFR5cGUoYXR0cmlidXRlcykpLCB7fSwgewogICAgICAgIGR4ZklkOiBCYXNlWGZvcm0udG9JbnRWYWx1ZShhdHRyaWJ1dGVzLmR4ZklkKSwKICAgICAgICBw
cmlvcml0eTogQmFzZVhmb3JtLnRvSW50VmFsdWUoYXR0cmlidXRlcy5wcmlvcml0eSksCiAgICAgICAgdGltZVBlcmlvZDogYXR0cmlidXRlcy50aW1lUGVyaW9kLAogICAgICAgIHBlcmNlbnQ6IEJhc2VYZm9ybS50b0Jvb2xWYWx1ZShhdHRyaWJ1dGVzLnBlcmNlbnQpLAogICAgICAgIGJvdHRvbTogQmFzZVhmb3JtLnRvQm9vbFZhbHVlKGF0dHJpYnV0ZXMuYm90dG9tKSwKICAgICAgICByYW5rOiBCYXNlWGZvcm0udG9JbnRWYWx1ZShhdHRyaWJ1dGVzLnJhbmspLAogICAgICAgIGFib3ZlQXZlcmFnZTogQmFzZVhmb3JtLnRv
Qm9vbFZhbHVlKGF0dHJpYnV0ZXMuYWJvdmVBdmVyYWdlKQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvblBhcnNlckNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblBhcnNlckNsb3NlKG5hbWUsIHBhcnNlcikgewogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlICdkYXRhQmFyJzoKICAgICAgICBjYXNlICdleHRMc3QnOgogICAgICAgIGNhc2UgJ2NvbG9yU2NhbGUnOgogICAgICAgIGNhc2UgJ2ljb25TZXQnOgogICAgICAgICAgLy8gbWVyZ2UgcGFyc2VyIG1vZGVsIHdpdGggb3VycwogICAg
ICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm1vZGVsLCBwYXJzZXIubW9kZWwpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2Zvcm11bGEnOgogICAgICAgICAgLy8gZXhjZXB0IC0gZm9ybXVsYSBpcyBhIHN0cmluZyBhbmQgYXBwZW5kcyB0byBmb3JtdWxhZQogICAgICAgICAgdGhpcy5tb2RlbC5mb3JtdWxhZSA9IHRoaXMubW9kZWwuZm9ybXVsYWUgfHwgW107CiAgICAgICAgICB0aGlzLm1vZGVsLmZvcm11bGFlLnB1c2gocGFyc2VyLm1vZGVsKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwg
ewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ2NmUnVsZSc7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJpc1ByaW1pdGl2ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNQcmltaXRpdmUocnVsZSkgewogICAgICAvLyBpcyB0aGlzIHJ1bGUgcHJpbWl0aXZlPwogICAgICBpZiAocnVsZS50eXBlID09PSAnaWNvblNldCcpIHsKICAgICAgICBpZiAocnVsZS5jdXN0b20gfHwgZXh0SWNvbnNbcnVsZS5pY29uU2V0XSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAg
IH0KICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ2ZSdWxlWGZvcm07Cn0oQ29tcG9zaXRlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBDZlJ1bGVYZm9ybTsKCn0seyIuLi8uLi8uLi8uLi9kb2MvcmFuZ2UiOjEwLCIuLi8uLi9iYXNlLXhmb3JtIjozMSwiLi4vLi4vY29tcG9zaXRlLXhmb3JtIjo0NywiLi9jb2xvci1zY2FsZS14Zm9ybSI6ODQsIi4vZGF0YWJhci14Zm9ybSI6ODcsIi4vZXh0LWxzdC1yZWYteGZvcm0iOjg4LCIuL2Zvcm11bGEteGZvcm0iOjg5LCIuL2ljb24tc2V0
LXhmb3JtIjo5MH1dLDgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9i
aiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0K
CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5
LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFz
cyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1
YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVu
Y3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVy
bih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNu
J3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5j
YWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsg
fQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UteGZvcm0nKTsKCnZhciBDZnZvWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoQ2Z2b1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDZnZvWGZvcm0pOwoKICBmdW5jdGlvbiBDZnZvWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2Z2b1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRl
Q2xhc3MoQ2Z2b1hmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIHsKICAgICAgICB0eXBlOiBtb2RlbC50eXBlLAogICAgICAgIHZhbDogbW9kZWwudmFsdWUKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICB0aGlzLm1vZGVsID0gewogICAgICAgIHR5cGU6IG5vZGUuYXR0
cmlidXRlcy50eXBlLAogICAgICAgIHZhbHVlOiBCYXNlWGZvcm0udG9GbG9hdFZhbHVlKG5vZGUuYXR0cmlidXRlcy52YWwpCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHJldHVybiBuYW1lICE9PSB0aGlzLnRhZzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnY2Z2byc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ2Z2b1hmb3JtOwp9
KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IENmdm9YZm9ybTsKCn0seyIuLi8uLi9iYXNlLXhmb3JtIjozMX1dLDg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2Jq
OyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93
IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0
YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rp
b24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNv
bmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVS
ZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5h
cHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBp
ZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09
ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8
IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIENvbXBvc2l0ZVhmb3JtID0gcmVxdWlyZSgnLi4vLi4vY29tcG9zaXRlLXhmb3JtJyk7Cgp2YXIgQ29sb3JYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL3N0eWxlL2NvbG9yLXhmb3JtJyk7Cgp2YXIgQ2Z2b1hmb3JtID0gcmVxdWlyZSgnLi9jZnZvLXhmb3JtJyk7Cgp2YXIgQ29sb3JTY2FsZVhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9zaXRlWGZvcm0pIHsKICBfaW5oZXJpdHMoQ29sb3JTY2FsZVhm
b3JtLCBfQ29tcG9zaXRlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENvbG9yU2NhbGVYZm9ybSk7CgogIGZ1bmN0aW9uIENvbG9yU2NhbGVYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sb3JTY2FsZVhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMubWFwID0gewogICAgICBjZnZvOiBfdGhpcy5jZnZvWGZvcm0gPSBuZXcgQ2Z2b1hmb3JtKCksCiAgICAgIGNvbG9yOiBfdGhpcy5jb2xvclhmb3JtID0gbmV3IENvbG9y
WGZvcm0oKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhDb2xvclNjYWxlWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnKTsKICAgICAgbW9kZWwuY2Z2by5mb3JFYWNoKGZ1bmN0aW9uIChjZnZvKSB7CiAgICAgICAgX3RoaXMyLmNmdm9YZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBjZnZvKTsKICAgICAg
fSk7CiAgICAgIG1vZGVsLmNvbG9yLmZvckVhY2goZnVuY3Rpb24gKGNvbG9yKSB7CiAgICAgICAgX3RoaXMyLmNvbG9yWGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgY29sb3IpOwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZU5ld01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVOZXdNb2RlbChub2RlKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgY2Z2bzogW10sCiAgICAgICAgY29sb3I6IFtdCiAgICAgIH07CiAgICB9CiAgfSwgewogICAg
a2V5OiAib25QYXJzZXJDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25QYXJzZXJDbG9zZShuYW1lLCBwYXJzZXIpIHsKICAgICAgdGhpcy5tb2RlbFtuYW1lXS5wdXNoKHBhcnNlci5tb2RlbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ2NvbG9yU2NhbGUnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENvbG9yU2NhbGVYZm9ybTsKfShDb21wb3NpdGVYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IENvbG9yU2NhbGVYZm9ybTsKCn0seyIuLi8u
Li9jb21wb3NpdGUteGZvcm0iOjQ3LCIuLi8uLi9zdHlsZS9jb2xvci14Zm9ybSI6MTI3LCIuL2Nmdm8teGZvcm0iOjgzfV0sODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBv
Ymo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhy
b3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndy
aXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5j
dGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwg
Y29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2
ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVy
LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7
IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9
PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18g
fHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQ29tcG9zaXRlWGZvcm0gPSByZXF1aXJlKCcuLi8uLi9jb21wb3NpdGUteGZvcm0nKTsKCnZhciBDZlJ1bGVYZm9ybSA9IHJlcXVpcmUoJy4vY2YtcnVsZS14Zm9ybScpOwoKdmFyIENvbmRpdGlvbmFsRm9ybWF0dGluZ1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9zaXRlWGZvcm0pIHsKICBfaW5oZXJpdHMoQ29uZGl0aW9uYWxGb3JtYXR0aW5nWGZvcm0sIF9Db21wb3NpdGVYZm9ybSk7Cgog
IHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ29uZGl0aW9uYWxGb3JtYXR0aW5nWGZvcm0pOwoKICBmdW5jdGlvbiBDb25kaXRpb25hbEZvcm1hdHRpbmdYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uZGl0aW9uYWxGb3JtYXR0aW5nWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgIGNmUnVsZTogbmV3IENmUnVsZVhmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ29u
ZGl0aW9uYWxGb3JtYXR0aW5nWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgLy8gaWYgdGhlcmUgYXJlIG5vIHByaW1pdGl2ZSBydWxlcywgZXhpdCBub3cKICAgICAgaWYgKCFtb2RlbC5ydWxlcy5zb21lKENmUnVsZVhmb3JtLmlzUHJpbWl0aXZlKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCB7CiAgICAgICAgc3Fy
ZWY6IG1vZGVsLnJlZgogICAgICB9KTsKICAgICAgbW9kZWwucnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkgewogICAgICAgIGlmIChDZlJ1bGVYZm9ybS5pc1ByaW1pdGl2ZShydWxlKSkgewogICAgICAgICAgcnVsZS5yZWYgPSBtb2RlbC5yZWY7CgogICAgICAgICAgX3RoaXMyLm1hcC5jZlJ1bGUucmVuZGVyKHhtbFN0cmVhbSwgcnVsZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZU5ld01vZGVsIiwKICAgIHZhbHVlOiBm
dW5jdGlvbiBjcmVhdGVOZXdNb2RlbChfcmVmKSB7CiAgICAgIHZhciBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzOwogICAgICByZXR1cm4gewogICAgICAgIHJlZjogYXR0cmlidXRlcy5zcXJlZiwKICAgICAgICBydWxlczogW10KICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvblBhcnNlckNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblBhcnNlckNsb3NlKG5hbWUsIHBhcnNlcikgewogICAgICB0aGlzLm1vZGVsLnJ1bGVzLnB1c2gocGFyc2VyLm1vZGVsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0
YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnY29uZGl0aW9uYWxGb3JtYXR0aW5nJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBDb25kaXRpb25hbEZvcm1hdHRpbmdYZm9ybTsKfShDb21wb3NpdGVYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IENvbmRpdGlvbmFsRm9ybWF0dGluZ1hmb3JtOwoKfSx7Ii4uLy4uL2NvbXBvc2l0ZS14Zm9ybSI6NDcsIi4vY2YtcnVsZS14Zm9ybSI6ODJ9XSw4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9u
IF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09
IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBz
cHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwg
LTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZp
bmVkIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBs
ZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRv
ciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBf
ZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVs
bCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8
IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENv
bnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwp
ID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25z
dHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVu
Y3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UteGZvcm0nKTsKCnZhciBDb25kaXRpb25hbEZvcm1hdHRpbmdYZm9ybSA9IHJlcXVpcmUoJy4vY29uZGl0
aW9uYWwtZm9ybWF0dGluZy14Zm9ybScpOwoKdmFyIENvbmRpdGlvbmFsRm9ybWF0dGluZ3NYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhDb25kaXRpb25hbEZvcm1hdHRpbmdzWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENvbmRpdGlvbmFsRm9ybWF0dGluZ3NYZm9ybSk7CgogIGZ1bmN0aW9uIENvbmRpdGlvbmFsRm9ybWF0dGluZ3NYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29u
ZGl0aW9uYWxGb3JtYXR0aW5nc1hmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMuY2ZYZm9ybSA9IG5ldyBDb25kaXRpb25hbEZvcm1hdHRpbmdYZm9ybSgpOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENvbmRpdGlvbmFsRm9ybWF0dGluZ3NYZm9ybSwgW3sKICAgIGtleTogInJlc2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHsKICAgICAgdGhpcy5tb2RlbCA9IFtdOwogICAgfQogIH0sIHsKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1
bmN0aW9uIHByZXBhcmUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgLy8gZW5zdXJlIGVhY2ggcnVsZSBoYXMgYSBwcmlvcml0eSB2YWx1ZQogICAgICB2YXIgbmV4dFByaW9yaXR5ID0gbW9kZWwucmVkdWNlKGZ1bmN0aW9uIChwLCBjZikgewogICAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCBbcF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjZi5ydWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHsKICAgICAgICAgIHJldHVybiBydWxlLnByaW9yaXR5IHx8IDA7CiAgICAgICAgfSkpKSk7CiAgICAgIH0sIDEpOwog
ICAgICBtb2RlbC5mb3JFYWNoKGZ1bmN0aW9uIChjZikgewogICAgICAgIGNmLnJ1bGVzLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHsKICAgICAgICAgIGlmICghcnVsZS5wcmlvcml0eSkgewogICAgICAgICAgICBydWxlLnByaW9yaXR5ID0gbmV4dFByaW9yaXR5Kys7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJ1bGUuc3R5bGUpIHsKICAgICAgICAgICAgcnVsZS5keGZJZCA9IG9wdGlvbnMuc3R5bGVzLmFkZER4ZlN0eWxlKHJ1bGUuc3R5bGUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0K
ICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgbW9kZWwuZm9yRWFjaChmdW5jdGlvbiAoY2YpIHsKICAgICAgICBfdGhpczIuY2ZYZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCBjZik7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhp
cy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgJ2NvbmRpdGlvbmFsRm9ybWF0dGluZyc6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMuY2ZYZm9ybTsKICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VU
ZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLm1vZGVsLnB1c2godGhpcy5wYXJzZXIubW9k
ZWwpOwogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInJlY29uY2lsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb25jaWxlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIG1vZGVsLmZvckVhY2goZnVuY3Rpb24gKGNmKSB7CiAgICAgICAgY2YucnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkgewogICAgICAgICAgaWYg
KHJ1bGUuZHhmSWQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBydWxlLnN0eWxlID0gb3B0aW9ucy5zdHlsZXMuZ2V0RHhmU3R5bGUocnVsZS5keGZJZCk7CiAgICAgICAgICAgIGRlbGV0ZSBydWxlLmR4ZklkOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnY29uZGl0aW9uYWxGb3JtYXR0aW5nJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBDb25kaXRpb25hbEZvcm1hdHRpbmdzWGZv
cm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQ29uZGl0aW9uYWxGb3JtYXR0aW5nc1hmb3JtOwoKfSx7Ii4uLy4uL2Jhc2UteGZvcm0iOjMxLCIuL2NvbmRpdGlvbmFsLWZvcm1hdHRpbmcteGZvcm0iOjg1fV0sODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3lt
Ym9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29u
c3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25m
aWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRp
ZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90
b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVP
ZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3Ry
dWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0
aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYg
KFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90
eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQ29tcG9zaXRlWGZvcm0gPSByZXF1aXJlKCcuLi8uLi9jb21wb3NpdGUteGZvcm0nKTsKCnZhciBDb2xvclhmb3JtID0gcmVxdWlyZSgnLi4vLi4vc3R5bGUvY29sb3IteGZvcm0nKTsKCnZhciBDZnZvWGZvcm0gPSByZXF1aXJlKCcuL2Nmdm8teGZvcm0nKTsKCnZhciBEYXRhYmFyWGZvcm0gPSAvKiNfX1BVUkVf
XyovZnVuY3Rpb24gKF9Db21wb3NpdGVYZm9ybSkgewogIF9pbmhlcml0cyhEYXRhYmFyWGZvcm0sIF9Db21wb3NpdGVYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRGF0YWJhclhmb3JtKTsKCiAgZnVuY3Rpb24gRGF0YWJhclhmb3JtKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRhYmFyWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgIGNmdm86IF90aGlzLmNmdm9YZm9ybSA9IG5ldyBDZnZvWGZvcm0o
KSwKICAgICAgY29sb3I6IF90aGlzLmNvbG9yWGZvcm0gPSBuZXcgQ29sb3JYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKERhdGFiYXJYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcpOwogICAgICBtb2RlbC5jZnZvLmZvckVhY2goZnVuY3Rpb24gKGNmdm8pIHsKICAgICAgICBfdGhpczIu
Y2Z2b1hmb3JtLnJlbmRlcih4bWxTdHJlYW0sIGNmdm8pOwogICAgICB9KTsKICAgICAgdGhpcy5jb2xvclhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNvbG9yKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZU5ld01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVOZXdNb2RlbCgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBjZnZvOiBbXQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogIm9uUGFyc2VyQ2xvc2UiLAogICAgdmFsdWU6IGZ1
bmN0aW9uIG9uUGFyc2VyQ2xvc2UobmFtZSwgcGFyc2VyKSB7CiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgJ2Nmdm8nOgogICAgICAgICAgdGhpcy5tb2RlbC5jZnZvLnB1c2gocGFyc2VyLm1vZGVsKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdjb2xvcic6CiAgICAgICAgICB0aGlzLm1vZGVsLmNvbG9yID0gcGFyc2VyLm1vZGVsOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVy
biAnZGF0YUJhcic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRGF0YWJhclhmb3JtOwp9KENvbXBvc2l0ZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gRGF0YWJhclhmb3JtOwoKfSx7Ii4uLy4uL2NvbXBvc2l0ZS14Zm9ybSI6NDcsIi4uLy4uL3N0eWxlL2NvbG9yLXhmb3JtIjoxMjcsIi4vY2Z2by14Zm9ybSI6ODN9XSw4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3lt
Ym9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90
eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJh
YmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJv
dG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnBy
b3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkg
eyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQ
cm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09
ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09
ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQ
cm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi8uLi9iYXNlLXhmb3JtJyk7Cgp2YXIgQ29tcG9zaXRlWGZvcm0gPSByZXF1aXJlKCcuLi8uLi9jb21w
b3NpdGUteGZvcm0nKTsKCnZhciBYMTRJZFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFgxNElkWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFgxNElkWGZvcm0pOwoKICBmdW5jdGlvbiBYMTRJZFhmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFgxNElkWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhYMTRJZFhmb3JtLCBbewogICAga2V5
OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIG51bGwsIG1vZGVsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3BlbigpIHsKICAgICAgdGhpcy5tb2RlbCA9ICcnOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgdGhpcy5tb2RlbCArPSB0ZXh0Owog
ICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICByZXR1cm4gbmFtZSAhPT0gdGhpcy50YWc7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3gxNDppZCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gWDE0SWRYZm9ybTsKfShCYXNlWGZvcm0pOwoKdmFyIEV4dFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9zaXRlWGZvcm0pIHsKICBfaW5oZXJp
dHMoRXh0WGZvcm0sIF9Db21wb3NpdGVYZm9ybSk7CgogIHZhciBfc3VwZXIyID0gX2NyZWF0ZVN1cGVyKEV4dFhmb3JtKTsKCiAgZnVuY3Rpb24gRXh0WGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4dFhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlcjIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgJ3gxNDppZCc6IF90aGlzLmlkWGZvcm0gPSBuZXcgWDE0SWRYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEV4dFhm
b3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHsKICAgICAgICB1cmk6ICd7QjAyNUY5MzctQzdCMS00N0QzLUI2N0YtQTYyRUZGNjY2RTNFfScsCiAgICAgICAgJ3htbG5zOngxNCc6ICdodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9zcHJlYWRzaGVldG1sLzIwMDkvOS9tYWluJwogICAgICB9KTsKICAgICAgdGhpcy5pZFhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIG1v
ZGVsLngxNElkKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZU5ld01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVOZXdNb2RlbCgpIHsKICAgICAgcmV0dXJuIHt9OwogICAgfQogIH0sIHsKICAgIGtleTogIm9uUGFyc2VyQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGFyc2VyQ2xvc2UobmFtZSwgcGFyc2VyKSB7CiAgICAgIHRoaXMubW9kZWwueDE0SWQgPSBwYXJzZXIubW9kZWw7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdl
dDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ2V4dCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRXh0WGZvcm07Cn0oQ29tcG9zaXRlWGZvcm0pOwoKdmFyIEV4dExzdFJlZlhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9zaXRlWGZvcm0yKSB7CiAgX2luaGVyaXRzKEV4dExzdFJlZlhmb3JtLCBfQ29tcG9zaXRlWGZvcm0yKTsKCiAgdmFyIF9zdXBlcjMgPSBfY3JlYXRlU3VwZXIoRXh0THN0UmVmWGZvcm0pOwoKICBmdW5jdGlvbiBFeHRMc3RSZWZYZm9ybSgpIHsKICAgIHZhciBfdGhpczI7Cgog
ICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4dExzdFJlZlhmb3JtKTsKCiAgICBfdGhpczIgPSBfc3VwZXIzLmNhbGwodGhpcyk7CiAgICBfdGhpczIubWFwID0gewogICAgICBleHQ6IG5ldyBFeHRYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogIF9jcmVhdGVDbGFzcyhFeHRMc3RSZWZYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnKTsKICAgICAgdGhpcy5t
YXAuZXh0LnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZU5ld01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVOZXdNb2RlbCgpIHsKICAgICAgcmV0dXJuIHt9OwogICAgfQogIH0sIHsKICAgIGtleTogIm9uUGFyc2VyQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGFyc2VyQ2xvc2UobmFtZSwgcGFyc2VyKSB7CiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5tb2RlbCwgcGFyc2VyLm1vZGVsKTsKICAgIH0K
ICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnZXh0THN0JzsKICAgIH0KICB9XSk7CgogIHJldHVybiBFeHRMc3RSZWZYZm9ybTsKfShDb21wb3NpdGVYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IEV4dExzdFJlZlhmb3JtOwoKfSx7Ii4uLy4uL2Jhc2UteGZvcm0iOjMxLCIuLi8uLi9jb21wb3NpdGUteGZvcm0iOjQ3fV0sODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJh
YmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8g
InN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNj
cmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJv
cHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBi
ZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBl
T2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZs
ZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2Yo
Y2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVj
dENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9
CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vLi4vYmFzZS14Zm9ybScpOwoKdmFyIEZvcm11bGFYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jh
c2VYZm9ybSkgewogIF9pbmhlcml0cyhGb3JtdWxhWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEZvcm11bGFYZm9ybSk7CgogIGZ1bmN0aW9uIEZvcm11bGFYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtdWxhWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhGb3JtdWxhWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0s
IG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSh0aGlzLnRhZywgbnVsbCwgbW9kZWwpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKCkgewogICAgICB0aGlzLm1vZGVsID0gJyc7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICB0aGlzLm1vZGVsICs9IHRleHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVu
Y3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHJldHVybiBuYW1lICE9PSB0aGlzLnRhZzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnZm9ybXVsYSc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRm9ybXVsYVhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IEZvcm11bGFYZm9ybTsKCn0seyIuLi8uLi9iYXNlLXhmb3JtIjozMX1dLDkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoK
ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYm
IG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBw
cm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMs
IHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1
cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3Rv
dHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVk
KSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBj
YWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7
IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBj
YXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UteGZvcm0nKTsKCnZhciBDb21wb3NpdGVYZm9y
bSA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvc2l0ZS14Zm9ybScpOwoKdmFyIENmdm9YZm9ybSA9IHJlcXVpcmUoJy4vY2Z2by14Zm9ybScpOwoKdmFyIEljb25TZXRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvc2l0ZVhmb3JtKSB7CiAgX2luaGVyaXRzKEljb25TZXRYZm9ybSwgX0NvbXBvc2l0ZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihJY29uU2V0WGZvcm0pOwoKICBmdW5jdGlvbiBJY29uU2V0WGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMs
IEljb25TZXRYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgY2Z2bzogX3RoaXMuY2Z2b1hmb3JtID0gbmV3IENmdm9YZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEljb25TZXRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcs
IHsKICAgICAgICBpY29uU2V0OiBCYXNlWGZvcm0udG9TdHJpbmdBdHRyaWJ1dGUobW9kZWwuaWNvblNldCwgJzNUcmFmZmljTGlnaHRzJyksCiAgICAgICAgcmV2ZXJzZTogQmFzZVhmb3JtLnRvQm9vbEF0dHJpYnV0ZShtb2RlbC5yZXZlcnNlLCBmYWxzZSksCiAgICAgICAgc2hvd1ZhbHVlOiBCYXNlWGZvcm0udG9Cb29sQXR0cmlidXRlKG1vZGVsLnNob3dWYWx1ZSwgdHJ1ZSkKICAgICAgfSk7CiAgICAgIG1vZGVsLmNmdm8uZm9yRWFjaChmdW5jdGlvbiAoY2Z2bykgewogICAgICAgIF90aGlzMi5jZnZvWGZvcm0ucmVuZGVy
KHhtbFN0cmVhbSwgY2Z2byk7CiAgICAgIH0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlTmV3TW9kZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU5ld01vZGVsKF9yZWYpIHsKICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXM7CiAgICAgIHJldHVybiB7CiAgICAgICAgaWNvblNldDogQmFzZVhmb3JtLnRvU3RyaW5nVmFsdWUoYXR0cmlidXRlcy5pY29uU2V0LCAnM1RyYWZmaWNMaWdodHMnKSwKICAgICAgICByZXZlcnNlOiBCYXNlWGZv
cm0udG9Cb29sVmFsdWUoYXR0cmlidXRlcy5yZXZlcnNlKSwKICAgICAgICBzaG93VmFsdWU6IEJhc2VYZm9ybS50b0Jvb2xWYWx1ZShhdHRyaWJ1dGVzLnNob3dWYWx1ZSksCiAgICAgICAgY2Z2bzogW10KICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvblBhcnNlckNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblBhcnNlckNsb3NlKG5hbWUsIHBhcnNlcikgewogICAgICB0aGlzLm1vZGVsW25hbWVdLnB1c2gocGFyc2VyLm1vZGVsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5j
dGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnaWNvblNldCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSWNvblNldFhmb3JtOwp9KENvbXBvc2l0ZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gSWNvblNldFhmb3JtOwoKfSx7Ii4uLy4uL2Jhc2UteGZvcm0iOjMxLCIuLi8uLi9jb21wb3NpdGUteGZvcm0iOjQ3LCIuL2Nmdm8teGZvcm0iOjgzfV0sOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2Yi
OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2Jq
OyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRl
c2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVz
KENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24i
KTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFBy
b3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBO
ZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8
IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5
cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90
eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIENvbFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKENvbFhm
b3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDb2xYZm9ybSk7CgogIGZ1bmN0aW9uIENvbFhmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbFhmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ29sWGZvcm0sIFt7CiAgICBrZXk6ICJwcmVwYXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIHZhciBzdHlsZUlkID0gb3B0aW9ucy5zdHlsZXMuYWRk
U3R5bGVNb2RlbChtb2RlbC5zdHlsZSB8fCB7fSk7CgogICAgICBpZiAoc3R5bGVJZCkgewogICAgICAgIG1vZGVsLnN0eWxlSWQgPSBzdHlsZUlkOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ2NvbCcpOwogICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdtaW4nLCBtb2RlbC5taW4pOwogICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdtYXgnLCBtb2RlbC5tYXgp
OwoKICAgICAgaWYgKG1vZGVsLndpZHRoKSB7CiAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnd2lkdGgnLCBtb2RlbC53aWR0aCk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5zdHlsZUlkKSB7CiAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnc3R5bGUnLCBtb2RlbC5zdHlsZUlkKTsKICAgICAgfQoKICAgICAgaWYgKG1vZGVsLmhpZGRlbikgewogICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ2hpZGRlbicsICcxJyk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5iZXN0Rml0KSB7CiAgICAgICAg
eG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnYmVzdEZpdCcsICcxJyk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5vdXRsaW5lTGV2ZWwpIHsKICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdvdXRsaW5lTGV2ZWwnLCBtb2RlbC5vdXRsaW5lTGV2ZWwpOwogICAgICB9CgogICAgICBpZiAobW9kZWwuY29sbGFwc2VkKSB7CiAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnY29sbGFwc2VkJywgJzEnKTsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnY3VzdG9tV2lkdGgnLCAnMScpOwogICAg
ICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSAnY29sJykgewogICAgICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWwgPSB7CiAgICAgICAgICBtaW46IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5taW4gfHwgJzAnLCAxMCksCiAgICAgICAgICBtYXg6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5tYXggfHwgJzAnLCAxMCksCiAgICAgICAgICB3aWR0aDogbm9k
ZS5hdHRyaWJ1dGVzLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBwYXJzZUZsb2F0KG5vZGUuYXR0cmlidXRlcy53aWR0aCB8fCAnMCcpCiAgICAgICAgfTsKCiAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy5zdHlsZSkgewogICAgICAgICAgbW9kZWwuc3R5bGVJZCA9IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5zdHlsZSwgMTApOwogICAgICAgIH0KCiAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy5oaWRkZW4gPT09IHRydWUgfHwgbm9kZS5hdHRyaWJ1dGVzLmhpZGRlbiA9PT0gJ3RydWUnIHx8IG5vZGUu
YXR0cmlidXRlcy5oaWRkZW4gPT09IDEgfHwgbm9kZS5hdHRyaWJ1dGVzLmhpZGRlbiA9PT0gJzEnKSB7CiAgICAgICAgICBtb2RlbC5oaWRkZW4gPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy5iZXN0Rml0KSB7CiAgICAgICAgICBtb2RlbC5iZXN0Rml0ID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXMub3V0bGluZUxldmVsKSB7CiAgICAgICAgICBtb2RlbC5vdXRsaW5lTGV2ZWwgPSBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMub3V0bGluZUxldmVsLCAx
MCk7CiAgICAgICAgfQoKICAgICAgICBpZiAobm9kZS5hdHRyaWJ1dGVzLmNvbGxhcHNlZCkgewogICAgICAgICAgbW9kZWwuY29sbGFwc2VkID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBm
YWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29uY2lsZShtb2RlbCwgb3B0aW9ucykgewogICAgICAvLyByZWNvbmNpbGUgY29sdW1uIHN0eWxlcwogICAgICBpZiAobW9kZWwuc3R5bGVJZCkgewogICAgICAgIG1vZGVsLnN0eWxlID0gb3B0aW9ucy5zdHlsZXMuZ2V0U3R5bGVNb2RlbChtb2RlbC5zdHlsZUlkKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdjb2wnOwog
ICAgfQogIH1dKTsKCiAgcmV0dXJuIENvbFhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IENvbFhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5
cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5z
dGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBp
biBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsg
cmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6
IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1
cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1Rhcmdl
dCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fz
c2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVy
biBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBl
T2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVu
Y3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2Up
LCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVj
dC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIF8gPSByZXF1aXJlKCcuLi8u
Li8uLi91dGlscy91bmRlci1kYXNoJyk7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy91dGlscycpOwoKdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvY29sLWNhY2hlJyk7Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFJhbmdlID0gcmVxdWlyZSgnLi4vLi4vLi4vZG9jL3JhbmdlJyk7CgpmdW5jdGlvbiBhc3NpZ24oZGVmaW5lZE5hbWUsIGF0dHJpYnV0ZXMsIG5hbWUsIGRlZmF1bHRWYWx1ZSkgewogIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNb
bmFtZV07CgogIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICBkZWZpbmVkTmFtZVtuYW1lXSA9IHZhbHVlOwogIH0gZWxzZSBpZiAoZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHsKICAgIGRlZmluZWROYW1lW25hbWVdID0gZGVmYXVsdFZhbHVlOwogIH0KfQoKZnVuY3Rpb24gcGFyc2VCb29sKHZhbHVlKSB7CiAgc3dpdGNoICh2YWx1ZSkgewogICAgY2FzZSAnMSc6CiAgICBjYXNlICd0cnVlJzoKICAgICAgcmV0dXJuIHRydWU7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlOwogIH0KfQoKZnVuY3Rp
b24gYXNzaWduQm9vbChkZWZpbmVkTmFtZSwgYXR0cmlidXRlcywgbmFtZSwgZGVmYXVsdFZhbHVlKSB7CiAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTsKCiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHsKICAgIGRlZmluZWROYW1lW25hbWVdID0gcGFyc2VCb29sKHZhbHVlKTsKICB9IGVsc2UgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICBkZWZpbmVkTmFtZVtuYW1lXSA9IGRlZmF1bHRWYWx1ZTsKICB9Cn0KCmZ1bmN0aW9uIG9wdGltaXNlRGF0YVZhbGlkYXRpb25zKG1vZGVsKSB7CiAgLy8g
U3F1ZWV6ZSBhbGlrZSBkYXRhIHZhbGlkYXRpb25zIHRvZ2V0aGVyIGludG8gcmVjdGFuZ3VsYXIgcmFuZ2VzCiAgLy8gdG8gcmVkdWNlIGZpbGUgc2l6ZSBhbmQgc3BlZWQgdXAgRXhjZWwgbG9hZCB0aW1lCiAgdmFyIGR2TGlzdCA9IF8ubWFwKG1vZGVsLCBmdW5jdGlvbiAoZGF0YVZhbGlkYXRpb24sIGFkZHJlc3MpIHsKICAgIHJldHVybiB7CiAgICAgIGFkZHJlc3M6IGFkZHJlc3MsCiAgICAgIGRhdGFWYWxpZGF0aW9uOiBkYXRhVmFsaWRhdGlvbiwKICAgICAgbWFya2VkOiBmYWxzZQogICAgfTsKICB9KS5zb3J0KGZ1bmN0
aW9uIChhLCBiKSB7CiAgICByZXR1cm4gXy5zdHJjbXAoYS5hZGRyZXNzLCBiLmFkZHJlc3MpOwogIH0pOwoKICB2YXIgZHZNYXAgPSBfLmtleUJ5KGR2TGlzdCwgJ2FkZHJlc3MnKTsKCiAgdmFyIG1hdGNoQ29sID0gZnVuY3Rpb24gbWF0Y2hDb2woYWRkciwgaGVpZ2h0LCBjb2wpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHsKICAgICAgdmFyIG90aGVyQWRkcmVzcyA9IGNvbENhY2hlLmVuY29kZUFkZHJlc3MoYWRkci5yb3cgKyBpLCBjb2wpOwoKICAgICAgaWYgKCFtb2RlbFtvdGhlckFkZHJlc3Nd
IHx8ICFfLmlzRXF1YWwobW9kZWxbYWRkci5hZGRyZXNzXSwgbW9kZWxbb3RoZXJBZGRyZXNzXSkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICByZXR1cm4gZHZMaXN0Lm1hcChmdW5jdGlvbiAoZHYpIHsKICAgIGlmICghZHYubWFya2VkKSB7CiAgICAgIHZhciBhZGRyID0gY29sQ2FjaGUuZGVjb2RlRXgoZHYuYWRkcmVzcyk7CgogICAgICBpZiAoYWRkci5kaW1lbnNpb25zKSB7CiAgICAgICAgZHZNYXBbYWRkci5kaW1lbnNpb25zXS5tYXJrZWQgPSB0cnVl
OwogICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGR2LmRhdGFWYWxpZGF0aW9uKSwge30sIHsKICAgICAgICAgIHNxcmVmOiBkdi5hZGRyZXNzCiAgICAgICAgfSk7CiAgICAgIH0gLy8gaXRlcmF0ZSBkb3dud2FyZHMgLSBmaW5kaW5nIG1hdGNoaW5nIGNlbGxzCgoKICAgICAgdmFyIGhlaWdodCA9IDE7CiAgICAgIHZhciBvdGhlckFkZHJlc3MgPSBjb2xDYWNoZS5lbmNvZGVBZGRyZXNzKGFkZHIucm93ICsgaGVpZ2h0LCBhZGRyLmNvbCk7CgogICAgICB3aGlsZSAobW9kZWxbb3RoZXJBZGRy
ZXNzXSAmJiBfLmlzRXF1YWwoZHYuZGF0YVZhbGlkYXRpb24sIG1vZGVsW290aGVyQWRkcmVzc10pKSB7CiAgICAgICAgaGVpZ2h0Kys7CiAgICAgICAgb3RoZXJBZGRyZXNzID0gY29sQ2FjaGUuZW5jb2RlQWRkcmVzcyhhZGRyLnJvdyArIGhlaWdodCwgYWRkci5jb2wpOwogICAgICB9IC8vIGl0ZXJhdGUgcmlnaHR3YXJkcy4uLgoKCiAgICAgIHZhciB3aWR0aCA9IDE7CgogICAgICB3aGlsZSAobWF0Y2hDb2woYWRkciwgaGVpZ2h0LCBhZGRyLmNvbCArIHdpZHRoKSkgewogICAgICAgIHdpZHRoKys7CiAgICAgIH0gLy8gbWFy
ayBhbGwgaW5jbHVkZWQgYWRkcmVzc2VzCgoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykgewogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgd2lkdGg7IGorKykgewogICAgICAgICAgb3RoZXJBZGRyZXNzID0gY29sQ2FjaGUuZW5jb2RlQWRkcmVzcyhhZGRyLnJvdyArIGksIGFkZHIuY29sICsgaik7CiAgICAgICAgICBkdk1hcFtvdGhlckFkZHJlc3NdLm1hcmtlZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoaGVpZ2h0ID4gMSB8fCB3aWR0aCA+IDEpIHsKICAgICAgICB2YXIg
Ym90dG9tID0gYWRkci5yb3cgKyAoaGVpZ2h0IC0gMSk7CiAgICAgICAgdmFyIHJpZ2h0ID0gYWRkci5jb2wgKyAod2lkdGggLSAxKTsKICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkdi5kYXRhVmFsaWRhdGlvbiksIHt9LCB7CiAgICAgICAgICBzcXJlZjogIiIuY29uY2F0KGR2LmFkZHJlc3MsICI6IikuY29uY2F0KGNvbENhY2hlLmVuY29kZUFkZHJlc3MoYm90dG9tLCByaWdodCkpCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJl
YWQoe30sIGR2LmRhdGFWYWxpZGF0aW9uKSwge30sIHsKICAgICAgICBzcXJlZjogZHYuYWRkcmVzcwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9KS5maWx0ZXIoQm9vbGVhbik7Cn0KCnZhciBEYXRhVmFsaWRhdGlvbnNYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhEYXRhVmFsaWRhdGlvbnNYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRGF0YVZhbGlkYXRpb25zWGZvcm0pOwoKICBmdW5jdGlvbiBEYXRhVmFs
aWRhdGlvbnNYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRhVmFsaWRhdGlvbnNYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKERhdGFWYWxpZGF0aW9uc1hmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB2YXIgb3B0aW1pemVkTW9kZWwgPSBvcHRpbWlzZURhdGFWYWxpZGF0aW9ucyhtb2RlbCk7CgogICAgICBpZiAob3B0aW1pemVk
TW9kZWwubGVuZ3RoKSB7CiAgICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdkYXRhVmFsaWRhdGlvbnMnLCB7CiAgICAgICAgICBjb3VudDogb3B0aW1pemVkTW9kZWwubGVuZ3RoCiAgICAgICAgfSk7CiAgICAgICAgb3B0aW1pemVkTW9kZWwuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnZGF0YVZhbGlkYXRpb24nKTsKCiAgICAgICAgICBpZiAodmFsdWUudHlwZSAhPT0gJ2FueScpIHsKICAgICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgndHlwZScsIHZhbHVl
LnR5cGUpOwoKICAgICAgICAgICAgaWYgKHZhbHVlLm9wZXJhdG9yICYmIHZhbHVlLnR5cGUgIT09ICdsaXN0JyAmJiB2YWx1ZS5vcGVyYXRvciAhPT0gJ2JldHdlZW4nKSB7CiAgICAgICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnb3BlcmF0b3InLCB2YWx1ZS5vcGVyYXRvcik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh2YWx1ZS5hbGxvd0JsYW5rKSB7CiAgICAgICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnYWxsb3dCbGFuaycsICcxJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0K
CiAgICAgICAgICBpZiAodmFsdWUuc2hvd0lucHV0TWVzc2FnZSkgewogICAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdzaG93SW5wdXRNZXNzYWdlJywgJzEnKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodmFsdWUucHJvbXB0VGl0bGUpIHsKICAgICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgncHJvbXB0VGl0bGUnLCB2YWx1ZS5wcm9tcHRUaXRsZSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHZhbHVlLnByb21wdCkgewogICAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdw
cm9tcHQnLCB2YWx1ZS5wcm9tcHQpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh2YWx1ZS5zaG93RXJyb3JNZXNzYWdlKSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3Nob3dFcnJvck1lc3NhZ2UnLCAnMScpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh2YWx1ZS5lcnJvclN0eWxlKSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ2Vycm9yU3R5bGUnLCB2YWx1ZS5lcnJvclN0eWxlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodmFsdWUuZXJyb3JUaXRsZSkgewog
ICAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdlcnJvclRpdGxlJywgdmFsdWUuZXJyb3JUaXRsZSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHZhbHVlLmVycm9yKSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ2Vycm9yJywgdmFsdWUuZXJyb3IpOwogICAgICAgICAgfQoKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3NxcmVmJywgdmFsdWUuc3FyZWYpOwogICAgICAgICAgKHZhbHVlLmZvcm11bGFlIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtdWxhLCBpbmRl
eCkgewogICAgICAgICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoImZvcm11bGEiLmNvbmNhdChpbmRleCArIDEpKTsKCiAgICAgICAgICAgIGlmICh2YWx1ZS50eXBlID09PSAnZGF0ZScpIHsKICAgICAgICAgICAgICB4bWxTdHJlYW0ud3JpdGVUZXh0KHV0aWxzLmRhdGVUb0V4Y2VsKG5ldyBEYXRlKGZvcm11bGEpKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgeG1sU3RyZWFtLndyaXRlVGV4dChmb3JtdWxhKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAg
ICAgICAgfSk7CiAgICAgICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICAgICAgfSk7CiAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgJ2RhdGFWYWxpZGF0aW9ucyc6CiAgICAgICAgICB0aGlzLm1vZGVsID0ge307CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgY2FzZSAnZGF0YVZhbGlk
YXRpb24nOgogICAgICAgICAgewogICAgICAgICAgICB0aGlzLl9hZGRyZXNzID0gbm9kZS5hdHRyaWJ1dGVzLnNxcmVmOwogICAgICAgICAgICB2YXIgZGF0YVZhbGlkYXRpb24gPSB7CiAgICAgICAgICAgICAgdHlwZTogbm9kZS5hdHRyaWJ1dGVzLnR5cGUgfHwgJ2FueScsCiAgICAgICAgICAgICAgZm9ybXVsYWU6IFtdCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAobm9kZS5hdHRyaWJ1dGVzLnR5cGUpIHsKICAgICAgICAgICAgICBhc3NpZ25Cb29sKGRhdGFWYWxpZGF0aW9uLCBub2RlLmF0dHJpYnV0ZXMsICdh
bGxvd0JsYW5rJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFzc2lnbkJvb2woZGF0YVZhbGlkYXRpb24sIG5vZGUuYXR0cmlidXRlcywgJ3Nob3dJbnB1dE1lc3NhZ2UnKTsKICAgICAgICAgICAgYXNzaWduQm9vbChkYXRhVmFsaWRhdGlvbiwgbm9kZS5hdHRyaWJ1dGVzLCAnc2hvd0Vycm9yTWVzc2FnZScpOwoKICAgICAgICAgICAgc3dpdGNoIChkYXRhVmFsaWRhdGlvbi50eXBlKSB7CiAgICAgICAgICAgICAgY2FzZSAnYW55JzoKICAgICAgICAgICAgICBjYXNlICdsaXN0JzoKICAgICAgICAgICAgICBjYXNlICdj
dXN0b20nOgogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBhc3NpZ24oZGF0YVZhbGlkYXRpb24sIG5vZGUuYXR0cmlidXRlcywgJ29wZXJhdG9yJywgJ2JldHdlZW4nKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBhc3NpZ24oZGF0YVZhbGlkYXRpb24sIG5vZGUuYXR0cmlidXRlcywgJ3Byb21wdFRpdGxlJyk7CiAgICAgICAgICAgIGFzc2lnbihkYXRhVmFsaWRhdGlvbiwgbm9kZS5hdHRyaWJ1dGVzLCAncHJvbXB0
Jyk7CiAgICAgICAgICAgIGFzc2lnbihkYXRhVmFsaWRhdGlvbiwgbm9kZS5hdHRyaWJ1dGVzLCAnZXJyb3JTdHlsZScpOwogICAgICAgICAgICBhc3NpZ24oZGF0YVZhbGlkYXRpb24sIG5vZGUuYXR0cmlidXRlcywgJ2Vycm9yVGl0bGUnKTsKICAgICAgICAgICAgYXNzaWduKGRhdGFWYWxpZGF0aW9uLCBub2RlLmF0dHJpYnV0ZXMsICdlcnJvcicpOwogICAgICAgICAgICB0aGlzLl9kYXRhVmFsaWRhdGlvbiA9IGRhdGFWYWxpZGF0aW9uOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgY2Fz
ZSAnZm9ybXVsYTEnOgogICAgICAgIGNhc2UgJ2Zvcm11bGEyJzoKICAgICAgICAgIHRoaXMuX2Zvcm11bGEgPSBbXTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5fZm9ybXVsYSkgewogICAgICAgIHRoaXMuX2Zvcm11bGEucHVzaCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAg
IGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSAnZGF0YVZhbGlkYXRpb25zJzoKICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgY2FzZSAnZGF0YVZhbGlkYXRpb24nOgogICAgICAgICAgewogICAgICAgICAgICBpZiAoIXRoaXMuX2RhdGFWYWxpZGF0aW9uLmZvcm11bGFlIHx8ICF0aGlzLl9kYXRhVmFsaWRhdGlvbi5mb3JtdWxhZS5sZW5ndGgpIHsKICAg
ICAgICAgICAgICBkZWxldGUgdGhpcy5fZGF0YVZhbGlkYXRpb24uZm9ybXVsYWU7CiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2RhdGFWYWxpZGF0aW9uLm9wZXJhdG9yOwogICAgICAgICAgICB9IC8vIFRoZSBmb3VyIGtub3duIGNhc2VzOiAxLiBFNDpMOSBONDpVOSAgMi5FNCBMOSAgMy4gTjQ6VTkgIDQuIEU0CgoKICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLl9hZGRyZXNzLnNwbGl0KC9ccysvZykgfHwgW107CiAgICAgICAgICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoYWRkcikgewogICAgICAgICAgICAgIGlm
IChhZGRyLmluY2x1ZGVzKCc6JykpIHsKICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IG5ldyBSYW5nZShhZGRyKTsKICAgICAgICAgICAgICAgIHJhbmdlLmZvckVhY2hBZGRyZXNzKGZ1bmN0aW9uIChhZGRyZXNzKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLm1vZGVsW2FkZHJlc3NdID0gX3RoaXMuX2RhdGFWYWxpZGF0aW9uOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIF90aGlzLm1vZGVsW2FkZHJdID0gX3RoaXMuX2RhdGFWYWxpZGF0aW9uOwogICAgICAg
ICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQoKICAgICAgICBjYXNlICdmb3JtdWxhMSc6CiAgICAgICAgY2FzZSAnZm9ybXVsYTInOgogICAgICAgICAgewogICAgICAgICAgICB2YXIgZm9ybXVsYSA9IHRoaXMuX2Zvcm11bGEuam9pbignJyk7CgogICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX2RhdGFWYWxpZGF0aW9uLnR5cGUpIHsKICAgICAgICAgICAgICBjYXNlICd3aG9sZSc6CiAgICAgICAgICAgICAgY2FzZSAndGV4dExlbmd0aCc6CiAgICAgICAgICAgICAg
ICBmb3JtdWxhID0gcGFyc2VJbnQoZm9ybXVsYSwgMTApOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgJ2RlY2ltYWwnOgogICAgICAgICAgICAgICAgZm9ybXVsYSA9IHBhcnNlRmxvYXQoZm9ybXVsYSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAnZGF0ZSc6CiAgICAgICAgICAgICAgICBmb3JtdWxhID0gdXRpbHMuZXhjZWxUb0RhdGUocGFyc2VGbG9hdChmb3JtdWxhKSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgZGVmYXVsdDoK
ICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLl9kYXRhVmFsaWRhdGlvbi5mb3JtdWxhZS5wdXNoKGZvcm11bGEpOwoKICAgICAgICAgICAgdGhpcy5fZm9ybXVsYSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdkYXRhVmFsaWRh
dGlvbnMnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIERhdGFWYWxpZGF0aW9uc1hmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IERhdGFWYWxpZGF0aW9uc1hmb3JtOwoKfSx7Ii4uLy4uLy4uL2RvYy9yYW5nZSI6MTAsIi4uLy4uLy4uL3V0aWxzL2NvbC1jYWNoZSI6MTksIi4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2giOjI1LCIuLi8uLi8uLi91dGlscy91dGlscyI6MjYsIi4uL2Jhc2UteGZvcm0iOjMxfV0sOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5j
dGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2Jq
ICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3Bz
Lmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3Rh
dGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIg
ZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBl
T2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCBy
ZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwp
IHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoK
ZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNo
IChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIERpbWVuc2lvblhmb3JtID0gLyoj
X19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKERpbWVuc2lvblhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEaW1lbnNpb25YZm9ybSk7CgogIGZ1bmN0aW9uIERpbWVuc2lvblhmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpbWVuc2lvblhmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRGltZW5zaW9uWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAg
dmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCkgewogICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnZGltZW5zaW9uJywgewogICAgICAgICAgcmVmOiBtb2RlbAogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSAnZGltZW5zaW9uJykgewogICAgICAgIHRoaXMubW9kZWwgPSBub2RlLmF0dHJpYnV0ZXMucmVmOwog
ICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnZGltZW5zaW9uJzsKICAgIH0KICB9XSk7Cgog
IHJldHVybiBEaW1lbnNpb25YZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBEaW1lbnNpb25YZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBl
b2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3Rh
bmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4g
ZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJl
dHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBz
dWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBl
cihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQp
OyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3Nl
cnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4g
ZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9m
KG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBEcmF3aW5nWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoRHJhd2luZ1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEcmF3aW5nWGZvcm0pOwoKICBmdW5jdGlvbiBEcmF3aW5nWGZvcm0oKSB7CiAg
ICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJhd2luZ1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRHJhd2luZ1hmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICBpZiAobW9kZWwpIHsKICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIHsKICAgICAgICAgICdyOmlkJzogbW9kZWwucklkCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9
LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIHJJZDogbm9kZS5hdHRyaWJ1dGVzWydyOmlkJ10KICAgICAgICAgIH07CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIs
CiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ2RyYXdpbmcnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIERyYXdpbmdYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBEcmF3aW5nWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9y
bSI6MzF9XSw5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYg
dHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5j
dGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVz
Y3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09
ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFz
cywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9u
IF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhp
cywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJl
ZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChS
ZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCi8q
IGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovCnZhciBDb21wb3NpdGVYZm9ybSA9IHJlcXVpcmUoJy4uL2NvbXBvc2l0ZS14Zm9ybScpOwoKdmFyIENvbmRpdGlvbmFsRm9ybWF0dGluZ3NFeHQgPSByZXF1aXJlKCcuL2NmLWV4dC9jb25kaXRpb25hbC1mb3JtYXR0aW5ncy1leHQteGZvcm0nKTsKCnZhciBFeHRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvc2l0ZVhmb3JtKSB7CiAgX2luaGVyaXRzKEV4dFhmb3JtLCBfQ29tcG9zaXRlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0
ZVN1cGVyKEV4dFhmb3JtKTsKCiAgZnVuY3Rpb24gRXh0WGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4dFhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMubWFwID0gewogICAgICAneDE0OmNvbmRpdGlvbmFsRm9ybWF0dGluZ3MnOiBfdGhpcy5jb25kaXRpb25hbEZvcm1hdHRpbmdzID0gbmV3IENvbmRpdGlvbmFsRm9ybWF0dGluZ3NFeHQoKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhFeHRYZm9ybSwg
W3sKICAgIGtleTogImhhc0NvbnRlbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0NvbnRlbnQobW9kZWwpIHsKICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uYWxGb3JtYXR0aW5ncy5oYXNDb250ZW50KG1vZGVsLmNvbmRpdGlvbmFsRm9ybWF0dGluZ3MpOwogICAgfQogIH0sIHsKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgdGhpcy5jb25kaXRpb25hbEZvcm1hdHRpbmdzLnByZXBhcmUobW9kZWwuY29uZGl0aW9uYWxGb3JtYXR0aW5ncywg
b3B0aW9ucyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ2V4dCcsIHsKICAgICAgICB1cmk6ICd7NzhDMEQ5MzEtNjQzNy00MDdkLUE4RUUtRjBBQUQ3NTM5RTY1fScsCiAgICAgICAgJ3htbG5zOngxNCc6ICdodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9zcHJlYWRzaGVldG1sLzIwMDkvOS9tYWluJwogICAgICB9KTsKICAgICAgdGhpcy5jb25kaXRpb25hbEZvcm1h
dHRpbmdzLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNvbmRpdGlvbmFsRm9ybWF0dGluZ3MpOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlTmV3TW9kZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU5ld01vZGVsKCkgewogICAgICByZXR1cm4ge307CiAgICB9CiAgfSwgewogICAga2V5OiAib25QYXJzZXJDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25QYXJzZXJDbG9zZShuYW1lLCBwYXJzZXIpIHsKICAgICAgdGhpcy5tb2RlbFtuYW1lXSA9IHBhcnNl
ci5tb2RlbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnZXh0JzsKICAgIH0KICB9XSk7CgogIHJldHVybiBFeHRYZm9ybTsKfShDb21wb3NpdGVYZm9ybSk7Cgp2YXIgRXh0THN0WGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb3NpdGVYZm9ybTIpIHsKICBfaW5oZXJpdHMoRXh0THN0WGZvcm0sIF9Db21wb3NpdGVYZm9ybTIpOwoKICB2YXIgX3N1cGVyMiA9IF9jcmVhdGVTdXBlcihFeHRMc3RYZm9ybSk7CgogIGZ1bmN0aW9uIEV4
dExzdFhmb3JtKCkgewogICAgdmFyIF90aGlzMjsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXh0THN0WGZvcm0pOwoKICAgIF90aGlzMiA9IF9zdXBlcjIuY2FsbCh0aGlzKTsKICAgIF90aGlzMi5tYXAgPSB7CiAgICAgIGV4dDogX3RoaXMyLmV4dCA9IG5ldyBFeHRYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogIF9jcmVhdGVDbGFzcyhFeHRMc3RYZm9ybSwgW3sKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgdGhp
cy5leHQucHJlcGFyZShtb2RlbCwgb3B0aW9ucyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaGFzQ29udGVudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzQ29udGVudChtb2RlbCkgewogICAgICByZXR1cm4gdGhpcy5leHQuaGFzQ29udGVudChtb2RlbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICBpZiAoIXRoaXMuaGFzQ29udGVudChtb2RlbCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHhtbFN0
cmVhbS5vcGVuTm9kZSgnZXh0THN0Jyk7CiAgICAgIHRoaXMuZXh0LnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZU5ld01vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVOZXdNb2RlbCgpIHsKICAgICAgcmV0dXJuIHt9OwogICAgfQogIH0sIHsKICAgIGtleTogIm9uUGFyc2VyQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGFyc2VyQ2xvc2UobmFtZSwgcGFyc2VyKSB7CiAgICAgIE9iamVjdC5hc3NpZ24o
dGhpcy5tb2RlbCwgcGFyc2VyLm1vZGVsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnZXh0THN0JzsKICAgIH0KICB9XSk7CgogIHJldHVybiBFeHRMc3RYZm9ybTsKfShDb21wb3NpdGVYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IEV4dExzdFhmb3JtOwoKfSx7Ii4uL2NvbXBvc2l0ZS14Zm9ybSI6NDcsIi4vY2YtZXh0L2NvbmRpdGlvbmFsLWZvcm1hdHRpbmdzLWV4dC14Zm9ybSI6Nzd9XSw5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhw
b3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29u
c3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7
IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENv
bnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0
aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5
cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBf
Z2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29u
c3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNh
bGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkg
e30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7
Cgp2YXIgSGVhZGVyRm9vdGVyWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoSGVhZGVyRm9vdGVyWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEhlYWRlckZvb3Rlclhmb3JtKTsKCiAgZnVuY3Rpb24gSGVhZGVyRm9vdGVyWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVhZGVyRm9vdGVyWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhI
ZWFkZXJGb290ZXJYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgaWYgKG1vZGVsKSB7CiAgICAgICAgeG1sU3RyZWFtLmFkZFJvbGxiYWNrKCk7CiAgICAgICAgdmFyIGNyZWF0ZVRhZyA9IGZhbHNlOwogICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnaGVhZGVyRm9vdGVyJyk7CgogICAgICAgIGlmIChtb2RlbC5kaWZmZXJlbnRGaXJzdCkgewogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnZGlmZmVyZW50Rmlyc3Qn
LCAnMScpOwogICAgICAgICAgY3JlYXRlVGFnID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGlmIChtb2RlbC5kaWZmZXJlbnRPZGRFdmVuKSB7CiAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdkaWZmZXJlbnRPZGRFdmVuJywgJzEnKTsKICAgICAgICAgIGNyZWF0ZVRhZyA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAobW9kZWwub2RkSGVhZGVyICYmIHR5cGVvZiBtb2RlbC5vZGRIZWFkZXIgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ29kZEhlYWRlcicsIG51bGws
IG1vZGVsLm9kZEhlYWRlcik7CiAgICAgICAgICBjcmVhdGVUYWcgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKG1vZGVsLm9kZEZvb3RlciAmJiB0eXBlb2YgbW9kZWwub2RkRm9vdGVyID09PSAnc3RyaW5nJykgewogICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdvZGRGb290ZXInLCBudWxsLCBtb2RlbC5vZGRGb290ZXIpOwogICAgICAgICAgY3JlYXRlVGFnID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGlmIChtb2RlbC5ldmVuSGVhZGVyICYmIHR5cGVvZiBtb2RlbC5ldmVuSGVhZGVyID09PSAnc3RyaW5n
JykgewogICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdldmVuSGVhZGVyJywgbnVsbCwgbW9kZWwuZXZlbkhlYWRlcik7CiAgICAgICAgICBjcmVhdGVUYWcgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKG1vZGVsLmV2ZW5Gb290ZXIgJiYgdHlwZW9mIG1vZGVsLmV2ZW5Gb290ZXIgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ2V2ZW5Gb290ZXInLCBudWxsLCBtb2RlbC5ldmVuRm9vdGVyKTsKICAgICAgICAgIGNyZWF0ZVRhZyA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBp
ZiAobW9kZWwuZmlyc3RIZWFkZXIgJiYgdHlwZW9mIG1vZGVsLmZpcnN0SGVhZGVyID09PSAnc3RyaW5nJykgewogICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdmaXJzdEhlYWRlcicsIG51bGwsIG1vZGVsLmZpcnN0SGVhZGVyKTsKICAgICAgICAgIGNyZWF0ZVRhZyA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAobW9kZWwuZmlyc3RGb290ZXIgJiYgdHlwZW9mIG1vZGVsLmZpcnN0Rm9vdGVyID09PSAnc3RyaW5nJykgewogICAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdmaXJzdEZvb3RlcicsIG51bGwsIG1v
ZGVsLmZpcnN0Rm9vdGVyKTsKICAgICAgICAgIGNyZWF0ZVRhZyA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoY3JlYXRlVGFnKSB7CiAgICAgICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICAgICAgICB4bWxTdHJlYW0uY29tbWl0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHhtbFN0cmVhbS5yb2xsYmFjaygpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgc3dpdGNoIChu
b2RlLm5hbWUpIHsKICAgICAgICBjYXNlICdoZWFkZXJGb290ZXInOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHt9OwoKICAgICAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXMuZGlmZmVyZW50Rmlyc3QpIHsKICAgICAgICAgICAgdGhpcy5tb2RlbC5kaWZmZXJlbnRGaXJzdCA9IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5kaWZmZXJlbnRGaXJzdCwgMCkgPT09IDE7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy5kaWZmZXJlbnRPZGRFdmVuKSB7CiAgICAgICAgICAgIHRoaXMubW9kZWwuZGlmZmVy
ZW50T2RkRXZlbiA9IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5kaWZmZXJlbnRPZGRFdmVuLCAwKSA9PT0gMTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgY2FzZSAnb2RkSGVhZGVyJzoKICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSAnb2RkSGVhZGVyJzsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBjYXNlICdvZGRGb290ZXInOgogICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9ICdvZGRGb290ZXInOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGNhc2Ug
J2V2ZW5IZWFkZXInOgogICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9ICdldmVuSGVhZGVyJzsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBjYXNlICdldmVuRm9vdGVyJzoKICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSAnZXZlbkZvb3Rlcic7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgY2FzZSAnZmlyc3RIZWFkZXInOgogICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9ICdmaXJzdEhlYWRlcic7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgY2FzZSAnZmlyc3RGb290ZXInOgog
ICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9ICdmaXJzdEZvb3Rlcic7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgc3dpdGNoICh0aGlzLmN1cnJlbnROb2RlKSB7CiAgICAgICAgY2FzZSAnb2RkSGVhZGVyJzoKICAgICAgICAgIHRoaXMubW9kZWwub2RkSGVhZGVyID0gdGV4dDsKICAgICAgICAgIGJy
ZWFrOwoKICAgICAgICBjYXNlICdvZGRGb290ZXInOgogICAgICAgICAgdGhpcy5tb2RlbC5vZGRGb290ZXIgPSB0ZXh0OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2V2ZW5IZWFkZXInOgogICAgICAgICAgdGhpcy5tb2RlbC5ldmVuSGVhZGVyID0gdGV4dDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdldmVuRm9vdGVyJzoKICAgICAgICAgIHRoaXMubW9kZWwuZXZlbkZvb3RlciA9IHRleHQ7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnZmlyc3RIZWFkZXInOgogICAgICAgICAgdGhp
cy5tb2RlbC5maXJzdEhlYWRlciA9IHRleHQ7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnZmlyc3RGb290ZXInOgogICAgICAgICAgdGhpcy5tb2RlbC5maXJzdEZvb3RlciA9IHRleHQ7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgc3dpdGNoICh0aGlzLmN1cnJlbnROb2RlKSB7CiAgICAgICAgY2FzZSAnb2RkSGVh
ZGVyJzoKICAgICAgICBjYXNlICdvZGRGb290ZXInOgogICAgICAgIGNhc2UgJ2V2ZW5IZWFkZXInOgogICAgICAgIGNhc2UgJ2V2ZW5Gb290ZXInOgogICAgICAgIGNhc2UgJ2ZpcnN0SGVhZGVyJzoKICAgICAgICBjYXNlICdmaXJzdEZvb3Rlcic6CiAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gdW5kZWZpbmVkOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlv
biBnZXQoKSB7CiAgICAgIHJldHVybiAnaGVhZGVyRm9vdGVyJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBIZWFkZXJGb290ZXJYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBIZWFkZXJGb290ZXJYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlw
ZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBf
Y2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFi
bGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAo
c3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShz
dXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJu
IG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVj
dG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNh
bGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3Qu
Y29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFBy
b3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBIeXBlcmxpbmtYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhIeXBlcmxpbmtYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3Vw
ZXIgPSBfY3JlYXRlU3VwZXIoSHlwZXJsaW5rWGZvcm0pOwoKICBmdW5jdGlvbiBIeXBlcmxpbmtYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIeXBlcmxpbmtYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEh5cGVybGlua1hmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ2h5cGVybGluaycsIHsKICAg
ICAgICByZWY6IG1vZGVsLmFkZHJlc3MsCiAgICAgICAgJ3I6aWQnOiBtb2RlbC5ySWQsCiAgICAgICAgdG9vbHRpcDogbW9kZWwudG9vbHRpcAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmIChub2RlLm5hbWUgPT09ICdoeXBlcmxpbmsnKSB7CiAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgIGFkZHJlc3M6IG5vZGUuYXR0cmlidXRlcy5yZWYsCiAgICAgICAgICBySWQ6IG5vZGUuYXR0cmlidXRlc1sn
cjppZCddLAogICAgICAgICAgdG9vbHRpcDogbm9kZS5hdHRyaWJ1dGVzLnRvb2x0aXAKICAgICAgICB9OwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAg
Z2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnaHlwZXJsaW5rJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBIeXBlcmxpbmtYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBIeXBlcmxpbmtYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYg
dHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlv
biBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1l
cmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBp
ZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0
ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0
dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0
cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJu
IGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxl
Y3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNl
dFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBNZXJnZUNlbGxYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhNZXJnZUNlbGxYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBf
c3VwZXIgPSBfY3JlYXRlU3VwZXIoTWVyZ2VDZWxsWGZvcm0pOwoKICBmdW5jdGlvbiBNZXJnZUNlbGxYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZXJnZUNlbGxYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKE1lcmdlQ2VsbFhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ21lcmdlQ2VsbCcsIHsK
ICAgICAgICByZWY6IG1vZGVsCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKG5vZGUubmFtZSA9PT0gJ21lcmdlQ2VsbCcpIHsKICAgICAgICB0aGlzLm1vZGVsID0gbm9kZS5hdHRyaWJ1dGVzLnJlZjsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkg
e30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ21lcmdlQ2VsbCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTWVyZ2VDZWxsWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gTWVyZ2VDZWxsWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSw5OTpbZnVuY3Rpb24ocmVxdWly
ZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07
IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0
aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9Cgp2YXIgXyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2gnKTsKCnZhciBSYW5nZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2RvYy9yYW5nZScpOwoKdmFyIGNvbENhY2hlID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvY29sLWNhY2hlJyk7Cgp2YXIgRW51bXMgPSByZXF1aXJlKCcuLi8uLi8uLi9k
b2MvZW51bXMnKTsKCnZhciBNZXJnZXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE1lcmdlcygpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZXJnZXMpOwoKICAgIC8vIG9wdGlvbmFsIG1lcmdlQ2VsbHMgaXMgYXJyYXkgb2YgcmFuZ2VzIChsaWtlIHRoZSB4bWwpCiAgICB0aGlzLm1lcmdlcyA9IHt9OwogIH0KCiAgX2NyZWF0ZUNsYXNzKE1lcmdlcywgW3sKICAgIGtleTogImFkZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKG1lcmdlKSB7CiAgICAgIC8vIG1lcmdlIGlzIHthZGRyZXNz
LCBtYXN0ZXJ9CiAgICAgIGlmICh0aGlzLm1lcmdlc1ttZXJnZS5tYXN0ZXJdKSB7CiAgICAgICAgdGhpcy5tZXJnZXNbbWVyZ2UubWFzdGVyXS5leHBhbmRUb0FkZHJlc3MobWVyZ2UuYWRkcmVzcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHJhbmdlID0gIiIuY29uY2F0KG1lcmdlLm1hc3RlciwgIjoiKS5jb25jYXQobWVyZ2UuYWRkcmVzcyk7CiAgICAgICAgdGhpcy5tZXJnZXNbbWVyZ2UubWFzdGVyXSA9IG5ldyBSYW5nZShyYW5nZSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGUiLAog
ICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29uY2lsZShtZXJnZUNlbGxzLCByb3dzKSB7CiAgICAgIC8vIHJlY29uY2lsZSBtZXJnZSBsaXN0IHdpdGggbWVyZ2UgY2VsbHMKICAgICAgXy5lYWNoKG1lcmdlQ2VsbHMsIGZ1bmN0aW9uIChtZXJnZSkgewogICAgICAgIHZhciBkaW1lbnNpb25zID0gY29sQ2FjaGUuZGVjb2RlKG1lcmdlKTsKCiAgICAgICAgZm9yICh2YXIgaSA9IGRpbWVuc2lvbnMudG9wOyBpIDw9IGRpbWVuc2lvbnMuYm90dG9tOyBpKyspIHsKICAgICAgICAgIHZhciByb3cgPSByb3dzW2kgLSAxXTsKCiAgICAgICAg
ICBmb3IgKHZhciBqID0gZGltZW5zaW9ucy5sZWZ0OyBqIDw9IGRpbWVuc2lvbnMucmlnaHQ7IGorKykgewogICAgICAgICAgICB2YXIgY2VsbCA9IHJvdy5jZWxsc1tqIC0gMV07CgogICAgICAgICAgICBpZiAoIWNlbGwpIHsKICAgICAgICAgICAgICAvLyBudWxscyBhcmUgbm90IGluY2x1ZGVkIGluIGRvY3VtZW50IC0gc28gaWYgbWFzdGVyIGNlbGwgaGFzIG5vIHZhbHVlIC0gYWRkIGEgbnVsbCBvbmUgaGVyZQogICAgICAgICAgICAgIHJvdy5jZWxsc1tqXSA9IHsKICAgICAgICAgICAgICAgIHR5cGU6IEVudW1zLlZhbHVl
VHlwZS5OdWxsLAogICAgICAgICAgICAgICAgYWRkcmVzczogY29sQ2FjaGUuZW5jb2RlQWRkcmVzcyhpLCBqKQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2VsbC50eXBlID09PSBFbnVtcy5WYWx1ZVR5cGUuTWVyZ2UpIHsKICAgICAgICAgICAgICBjZWxsLm1hc3RlciA9IGRpbWVuc2lvbnMudGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldE1hc3RlckFkZHJlc3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1h
c3RlckFkZHJlc3MoYWRkcmVzcykgewogICAgICAvLyBpZiBhZGRyZXNzIGhhcyBiZWVuIG1lcmdlZCwgcmV0dXJuIGl0cyBtYXN0ZXIncyBhZGRyZXNzLiBBc3N1bWVzIHJlY29uY2lsZSBoYXMgYmVlbiBjYWxsZWQKICAgICAgdmFyIHJhbmdlID0gdGhpcy5oYXNoW2FkZHJlc3NdOwogICAgICByZXR1cm4gcmFuZ2UgJiYgcmFuZ2UudGw7CiAgICB9CiAgfSwgewogICAga2V5OiAibWVyZ2VDZWxscyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIF8ubWFwKHRoaXMubWVyZ2VzLCBmdW5jdGlvbiAobWVy
Z2UpIHsKICAgICAgICByZXR1cm4gbWVyZ2UucmFuZ2U7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE1lcmdlczsKfSgpOwoKbW9kdWxlLmV4cG9ydHMgPSBNZXJnZXM7Cgp9LHsiLi4vLi4vLi4vZG9jL2VudW1zIjo3LCIuLi8uLi8uLi9kb2MvcmFuZ2UiOjEwLCIuLi8uLi8uLi91dGlscy9jb2wtY2FjaGUiOjE5LCIuLi8uLi8uLi91dGlscy91bmRlci1kYXNoIjoyNX1dLDEwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJA
YmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUg
PyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRl
c2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Q
cm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVy
IGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5
cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJl
ZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVv
ZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZs
ZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9
IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgaXNEZWZpbmVkID0gZnVuY3Rpb24gaXNEZWZpbmVkKGF0dHIpIHsKICBy
ZXR1cm4gdHlwZW9mIGF0dHIgIT09ICd1bmRlZmluZWQnOwp9OwoKdmFyIE91dGxpbmVQcm9wZXJ0aWVzWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoT3V0bGluZVByb3BlcnRpZXNYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoT3V0bGluZVByb3BlcnRpZXNYZm9ybSk7CgogIGZ1bmN0aW9uIE91dGxpbmVQcm9wZXJ0aWVzWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3V0bGluZVByb3BlcnRpZXNYZm9ybSk7Cgog
ICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKE91dGxpbmVQcm9wZXJ0aWVzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCAmJiAoaXNEZWZpbmVkKG1vZGVsLnN1bW1hcnlCZWxvdykgfHwgaXNEZWZpbmVkKG1vZGVsLnN1bW1hcnlSaWdodCkpKSB7CiAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnLCB7CiAgICAgICAgICBzdW1tYXJ5QmVs
b3c6IGlzRGVmaW5lZChtb2RlbC5zdW1tYXJ5QmVsb3cpID8gTnVtYmVyKG1vZGVsLnN1bW1hcnlCZWxvdykgOiB1bmRlZmluZWQsCiAgICAgICAgICBzdW1tYXJ5UmlnaHQ6IGlzRGVmaW5lZChtb2RlbC5zdW1tYXJ5UmlnaHQpID8gTnVtYmVyKG1vZGVsLnN1bW1hcnlSaWdodCkgOiB1bmRlZmluZWQKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5v
ZGUpIHsKICAgICAgaWYgKG5vZGUubmFtZSA9PT0gdGhpcy50YWcpIHsKICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgc3VtbWFyeUJlbG93OiBpc0RlZmluZWQobm9kZS5hdHRyaWJ1dGVzLnN1bW1hcnlCZWxvdykgPyBCb29sZWFuKE51bWJlcihub2RlLmF0dHJpYnV0ZXMuc3VtbWFyeUJlbG93KSkgOiB1bmRlZmluZWQsCiAgICAgICAgICBzdW1tYXJ5UmlnaHQ6IGlzRGVmaW5lZChub2RlLmF0dHJpYnV0ZXMuc3VtbWFyeVJpZ2h0KSA/IEJvb2xlYW4oTnVtYmVyKG5vZGUuYXR0cmlidXRlcy5zdW1tYXJ5UmlnaHQp
KSA6IHVuZGVmaW5lZAogICAgICAgIH07CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdv
dXRsaW5lUHInOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE91dGxpbmVQcm9wZXJ0aWVzWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gT3V0bGluZVByb3BlcnRpZXNYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDEwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0
b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGlu
c3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNj
cmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVm
aW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBl
ckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3Nl
dFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVm
bGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNz
ZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJu
IGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVj
dC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgUGFnZUJyZWFrc1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFBhZ2VCcmVha3NYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3Vw
ZXIoUGFnZUJyZWFrc1hmb3JtKTsKCiAgZnVuY3Rpb24gUGFnZUJyZWFrc1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VCcmVha3NYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBhZ2VCcmVha3NYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdicmsnLCBtb2RlbCk7CiAgICB9CiAgfSwgewog
ICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSAnYnJrJykgewogICAgICAgIHRoaXMubW9kZWwgPSBub2RlLmF0dHJpYnV0ZXMucmVmOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0
aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnYnJrJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBQYWdlQnJlYWtzWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gUGFnZUJyZWFrc1hmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sMTAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihv
YmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnBy
b3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykg
eyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlm
IChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVz
dCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNl
dFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFz
TmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYm
IChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05h
dGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4g
ZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIF8gPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy91bmRlci1kYXNoJyk7Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14
Zm9ybScpOwoKdmFyIFBhZ2VNYXJnaW5zWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoUGFnZU1hcmdpbnNYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUGFnZU1hcmdpbnNYZm9ybSk7CgogIGZ1bmN0aW9uIFBhZ2VNYXJnaW5zWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnZU1hcmdpbnNYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNz
KFBhZ2VNYXJnaW5zWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCkgewogICAgICAgIHZhciBhdHRyaWJ1dGVzID0gewogICAgICAgICAgbGVmdDogbW9kZWwubGVmdCwKICAgICAgICAgIHJpZ2h0OiBtb2RlbC5yaWdodCwKICAgICAgICAgIHRvcDogbW9kZWwudG9wLAogICAgICAgICAgYm90dG9tOiBtb2RlbC5ib3R0b20sCiAgICAgICAgICBoZWFkZXI6IG1vZGVsLmhlYWRlciwKICAgICAgICAgIGZvb3Rlcjog
bW9kZWwuZm9vdGVyCiAgICAgICAgfTsKCiAgICAgICAgaWYgKF8uc29tZShhdHRyaWJ1dGVzLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkOwogICAgICAgIH0pKSB7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIGF0dHJpYnV0ZXMpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAg
ICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgICAgbGVmdDogcGFyc2VGbG9hdChub2RlLmF0dHJpYnV0ZXMubGVmdCB8fCAwLjcpLAogICAgICAgICAgICByaWdodDogcGFyc2VGbG9hdChub2RlLmF0dHJpYnV0ZXMucmlnaHQgfHwgMC43KSwKICAgICAgICAgICAgdG9wOiBwYXJzZUZsb2F0KG5vZGUuYXR0cmlidXRlcy50b3AgfHwgMC43NSksCiAgICAgICAgICAgIGJvdHRvbTogcGFyc2VGbG9hdChub2RlLmF0dHJpYnV0ZXMuYm90dG9tIHx8IDAuNzUpLAogICAgICAgICAgICBo
ZWFkZXI6IHBhcnNlRmxvYXQobm9kZS5hdHRyaWJ1dGVzLmhlYWRlciB8fCAwLjMpLAogICAgICAgICAgICBmb290ZXI6IHBhcnNlRmxvYXQobm9kZS5hdHRyaWJ1dGVzLmZvb3RlciB8fCAwLjMpCiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAg
ICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdwYWdlTWFyZ2lucyc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUGFnZU1hcmdpbnNYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBQYWdlTWFyZ2luc1hmb3JtOwoKfSx7Ii4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2giOjI1LCIuLi9iYXNlLXhmb3JtIjozMX1dLDEwMzpbZnVuY3Rpb24ocmVx
dWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0
aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0
YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24g
X2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFz
cyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0
aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkg
eyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rp
b24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigp
IGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBb
XSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcu
Li9iYXNlLXhmb3JtJyk7Cgp2YXIgUGFnZVNldHVwUHJvcGVydGllc1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFBhZ2VTZXR1cFByb3BlcnRpZXNYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUGFnZVNldHVwUHJvcGVydGllc1hmb3JtKTsKCiAgZnVuY3Rpb24gUGFnZVNldHVwUHJvcGVydGllc1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VTZXR1cFByb3BlcnRpZXNYZm9ybSk7CgogICAgcmV0dXJuIF9z
dXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBhZ2VTZXR1cFByb3BlcnRpZXNYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgaWYgKG1vZGVsICYmIG1vZGVsLmZpdFRvUGFnZSkgewogICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSh0aGlzLnRhZywgewogICAgICAgICAgZml0VG9QYWdlOiBtb2RlbC5maXRUb1BhZ2UgPyAnMScgOiB1bmRlZmluZWQKICAgICAgICB9KTsKICAgICAgICByZXR1
cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKG5vZGUubmFtZSA9PT0gdGhpcy50YWcpIHsKICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgZml0VG9QYWdlOiBub2RlLmF0dHJpYnV0ZXMuZml0VG9QYWdlID09PSAnMScKICAgICAgICB9OwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewog
ICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAncGFnZVNldFVwUHInOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBhZ2VTZXR1cFByb3BlcnRpZXNYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9y
dHMgPSBQYWdlU2V0dXBQcm9wZXJ0aWVzWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSwxMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7
IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJv
cigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsg
T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMo
c3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0
cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1
Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFy
Z3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2
b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikg
cmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFBy
b3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgXyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2gnKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7CgpmdW5jdGlvbiBib29sZWFuVG9YbWwobW9kZWwpIHsKICByZXR1cm4gbW9kZWwgPyAnMScgOiB1bmRlZmluZWQ7Cn0KCmZ1bmN0aW9uIHBhZ2VPcmRlclRvWG1sKG1vZGVsKSB7CiAgc3dpdGNoIChtb2RlbCkgewogICAgY2FzZSAnb3ZlclRoZW5Eb3duJzoKICAgICAgcmV0dXJuIG1vZGVs
OwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQp9CgpmdW5jdGlvbiBjZWxsQ29tbWVudHNUb1htbChtb2RlbCkgewogIHN3aXRjaCAobW9kZWwpIHsKICAgIGNhc2UgJ2F0RW5kJzoKICAgIGNhc2UgJ2FzRGlzcGx5ZWQnOgogICAgICByZXR1cm4gbW9kZWw7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICB9Cn0KCmZ1bmN0aW9uIGVycm9yc1RvWG1sKG1vZGVsKSB7CiAgc3dpdGNoIChtb2RlbCkgewogICAgY2FzZSAnZGFzaCc6CiAgICBjYXNlICdibGFuayc6CiAgICBjYXNl
ICdOQSc6CiAgICAgIHJldHVybiBtb2RlbDsKCiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KfQoKZnVuY3Rpb24gcGFnZVNpemVUb01vZGVsKHZhbHVlKSB7CiAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyBwYXJzZUludCh2YWx1ZSwgMTApIDogdW5kZWZpbmVkOwp9Cgp2YXIgUGFnZVNldHVwWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoUGFnZVNldHVwWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVy
KFBhZ2VTZXR1cFhmb3JtKTsKCiAgZnVuY3Rpb24gUGFnZVNldHVwWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnZVNldHVwWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQYWdlU2V0dXBYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgaWYgKG1vZGVsKSB7CiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB7CiAgICAgICAgICBwYXBl
clNpemU6IG1vZGVsLnBhcGVyU2l6ZSwKICAgICAgICAgIG9yaWVudGF0aW9uOiBtb2RlbC5vcmllbnRhdGlvbiwKICAgICAgICAgIGhvcml6b250YWxEcGk6IG1vZGVsLmhvcml6b250YWxEcGksCiAgICAgICAgICB2ZXJ0aWNhbERwaTogbW9kZWwudmVydGljYWxEcGksCiAgICAgICAgICBwYWdlT3JkZXI6IHBhZ2VPcmRlclRvWG1sKG1vZGVsLnBhZ2VPcmRlciksCiAgICAgICAgICBibGFja0FuZFdoaXRlOiBib29sZWFuVG9YbWwobW9kZWwuYmxhY2tBbmRXaGl0ZSksCiAgICAgICAgICBkcmFmdDogYm9vbGVhblRvWG1sKG1v
ZGVsLmRyYWZ0KSwKICAgICAgICAgIGNlbGxDb21tZW50czogY2VsbENvbW1lbnRzVG9YbWwobW9kZWwuY2VsbENvbW1lbnRzKSwKICAgICAgICAgIGVycm9yczogZXJyb3JzVG9YbWwobW9kZWwuZXJyb3JzKSwKICAgICAgICAgIHNjYWxlOiBtb2RlbC5zY2FsZSwKICAgICAgICAgIGZpdFRvV2lkdGg6IG1vZGVsLmZpdFRvV2lkdGgsCiAgICAgICAgICBmaXRUb0hlaWdodDogbW9kZWwuZml0VG9IZWlnaHQsCiAgICAgICAgICBmaXJzdFBhZ2VOdW1iZXI6IG1vZGVsLmZpcnN0UGFnZU51bWJlciwKICAgICAgICAgIHVzZUZpcnN0
UGFnZU51bWJlcjogYm9vbGVhblRvWG1sKG1vZGVsLmZpcnN0UGFnZU51bWJlciksCiAgICAgICAgICB1c2VQcmludGVyRGVmYXVsdHM6IGJvb2xlYW5Ub1htbChtb2RlbC51c2VQcmludGVyRGVmYXVsdHMpLAogICAgICAgICAgY29waWVzOiBtb2RlbC5jb3BpZXMKICAgICAgICB9OwoKICAgICAgICBpZiAoXy5zb21lKGF0dHJpYnV0ZXMsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7CiAgICAgICAgfSkpIHsKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSh0aGlzLnRh
ZywgYXR0cmlidXRlcyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICBwYXBlclNpemU6IHBhZ2VTaXplVG9Nb2RlbChub2RlLmF0dHJpYnV0ZXMucGFwZXJTaXplKSwKICAgICAgICAgICAgb3JpZW50YXRpb246IG5vZGUuYXR0cmlidXRlcy5vcmllbnRhdGlv
biB8fCAncG9ydHJhaXQnLAogICAgICAgICAgICBob3Jpem9udGFsRHBpOiBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMuaG9yaXpvbnRhbERwaSB8fCAnNDI5NDk2NzI5NScsIDEwKSwKICAgICAgICAgICAgdmVydGljYWxEcGk6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy52ZXJ0aWNhbERwaSB8fCAnNDI5NDk2NzI5NScsIDEwKSwKICAgICAgICAgICAgcGFnZU9yZGVyOiBub2RlLmF0dHJpYnV0ZXMucGFnZU9yZGVyIHx8ICdkb3duVGhlbk92ZXInLAogICAgICAgICAgICBibGFja0FuZFdoaXRlOiBub2RlLmF0dHJpYnV0ZXMu
YmxhY2tBbmRXaGl0ZSA9PT0gJzEnLAogICAgICAgICAgICBkcmFmdDogbm9kZS5hdHRyaWJ1dGVzLmRyYWZ0ID09PSAnMScsCiAgICAgICAgICAgIGNlbGxDb21tZW50czogbm9kZS5hdHRyaWJ1dGVzLmNlbGxDb21tZW50cyB8fCAnTm9uZScsCiAgICAgICAgICAgIGVycm9yczogbm9kZS5hdHRyaWJ1dGVzLmVycm9ycyB8fCAnZGlzcGxheWVkJywKICAgICAgICAgICAgc2NhbGU6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5zY2FsZSB8fCAnMTAwJywgMTApLAogICAgICAgICAgICBmaXRUb1dpZHRoOiBwYXJzZUludChub2Rl
LmF0dHJpYnV0ZXMuZml0VG9XaWR0aCB8fCAnMScsIDEwKSwKICAgICAgICAgICAgZml0VG9IZWlnaHQ6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5maXRUb0hlaWdodCB8fCAnMScsIDEwKSwKICAgICAgICAgICAgZmlyc3RQYWdlTnVtYmVyOiBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMuZmlyc3RQYWdlTnVtYmVyIHx8ICcxJywgMTApLAogICAgICAgICAgICB1c2VGaXJzdFBhZ2VOdW1iZXI6IG5vZGUuYXR0cmlidXRlcy51c2VGaXJzdFBhZ2VOdW1iZXIgPT09ICcxJywKICAgICAgICAgICAgdXNlUHJpbnRlckRlZmF1bHRz
OiBub2RlLmF0dHJpYnV0ZXMudXNlUHJpbnRlckRlZmF1bHRzID09PSAnMScsCiAgICAgICAgICAgIGNvcGllczogcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLmNvcGllcyB8fCAnMScsIDEwKQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAg
dmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAncGFnZVNldHVwJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBQYWdlU2V0dXBYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBQYWdlU2V0dXBYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy91bmRlci1kYXNoIjoyNSwiLi4vYmFzZS14Zm9ybSI6MzF9XSwxMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9k
dWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYg
b2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBw
cm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVD
bGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51
bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0
UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1
cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3Nz
aWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3Qg
YmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0
aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14
Zm9ybScpOwoKdmFyIFBpY3R1cmVYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhQaWN0dXJlWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFBpY3R1cmVYZm9ybSk7CgogIGZ1bmN0aW9uIFBpY3R1cmVYZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQaWN0dXJlWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQaWN0dXJlWGZvcm0sIFt7CiAg
ICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCkgewogICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSh0aGlzLnRhZywgewogICAgICAgICAgJ3I6aWQnOiBtb2RlbC5ySWQKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgc3dpdGNoIChub2RlLm5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAg
ICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgICAgcklkOiBub2RlLmF0dHJpYnV0ZXNbJ3I6aWQnXQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsK
ICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAncGljdHVyZSc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUGljdHVyZVhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFBpY3R1cmVYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDEwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBl
b2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0
dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5l
bnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0
b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNs
YXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2Yo
bywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9
IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNh
bGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxl
Y3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7
IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBfID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvdW5kZXItZGFzaCcpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCmZ1bmN0aW9uIGJvb2xlYW5Ub1htbChtb2RlbCkgewog
IHJldHVybiBtb2RlbCA/ICcxJyA6IHVuZGVmaW5lZDsKfQoKdmFyIFByaW50T3B0aW9uc1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFByaW50T3B0aW9uc1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihQcmludE9wdGlvbnNYZm9ybSk7CgogIGZ1bmN0aW9uIFByaW50T3B0aW9uc1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByaW50T3B0aW9uc1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMs
IGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUHJpbnRPcHRpb25zWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCkgewogICAgICAgIHZhciBhdHRyaWJ1dGVzID0gewogICAgICAgICAgaGVhZGluZ3M6IGJvb2xlYW5Ub1htbChtb2RlbC5zaG93Um93Q29sSGVhZGVycyksCiAgICAgICAgICBncmlkTGluZXM6IGJvb2xlYW5Ub1htbChtb2RlbC5zaG93R3JpZExpbmVzKSwKICAgICAgICAgIGhvcml6b250
YWxDZW50ZXJlZDogYm9vbGVhblRvWG1sKG1vZGVsLmhvcml6b250YWxDZW50ZXJlZCksCiAgICAgICAgICB2ZXJ0aWNhbENlbnRlcmVkOiBib29sZWFuVG9YbWwobW9kZWwudmVydGljYWxDZW50ZXJlZCkKICAgICAgICB9OwoKICAgICAgICBpZiAoXy5zb21lKGF0dHJpYnV0ZXMsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7CiAgICAgICAgfSkpIHsKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSh0aGlzLnRhZywgYXR0cmlidXRlcyk7CiAgICAgICAgfQogICAgICB9
CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICBzaG93Um93Q29sSGVhZGVyczogbm9kZS5hdHRyaWJ1dGVzLmhlYWRpbmdzID09PSAnMScsCiAgICAgICAgICAgIHNob3dHcmlkTGluZXM6IG5vZGUuYXR0cmlidXRlcy5ncmlkTGluZXMgPT09ICcxJywKICAgICAgICAgICAgaG9yaXpvbnRhbENl
bnRlcmVkOiBub2RlLmF0dHJpYnV0ZXMuaG9yaXpvbnRhbENlbnRlcmVkID09PSAnMScsCiAgICAgICAgICAgIHZlcnRpY2FsQ2VudGVyZWQ6IG5vZGUuYXR0cmlidXRlcy52ZXJ0aWNhbENlbnRlcmVkID09PSAnMScKICAgICAgICAgIH07CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJz
ZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3ByaW50T3B0aW9ucyc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUHJpbnRPcHRpb25zWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gUHJpbnRPcHRpb25zWGZvcm07Cgp9LHsiLi4vLi4vLi4vdXRpbHMvdW5kZXItZGFzaCI6MjUsIi4uL2Jhc2UteGZvcm0iOjMxfV0sMTA3
OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3lt
Ym9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZp
bmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsg
fSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9u
IiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNs
YXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1
cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQp
OyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFs
aXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29u
c3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIFBhZ2VCcmVh
a3NYZm9ybSA9IHJlcXVpcmUoJy4vcGFnZS1icmVha3MteGZvcm0nKTsKCnZhciBMaXN0WGZvcm0gPSByZXF1aXJlKCcuLi9saXN0LXhmb3JtJyk7Cgp2YXIgUm93QnJlYWtzWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MaXN0WGZvcm0pIHsKICBfaW5oZXJpdHMoUm93QnJlYWtzWGZvcm0sIF9MaXN0WGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFJvd0JyZWFrc1hmb3JtKTsKCiAgZnVuY3Rpb24gUm93QnJlYWtzWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm93QnJlYWtzWGZv
cm0pOwoKICAgIHZhciBvcHRpb25zID0gewogICAgICB0YWc6ICdyb3dCcmVha3MnLAogICAgICBjb3VudDogdHJ1ZSwKICAgICAgY2hpbGRYZm9ybTogbmV3IFBhZ2VCcmVha3NYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMpOwogIH0gLy8gZ2V0IHRhZygpIHsgcmV0dXJuICdyb3dCcmVha3MnOyB9CgoKICBfY3JlYXRlQ2xhc3MoUm93QnJlYWtzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAg
ICAgIGlmIChtb2RlbCAmJiBtb2RlbC5sZW5ndGgpIHsKICAgICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHRoaXMuJCk7CgogICAgICAgIGlmICh0aGlzLmNvdW50KSB7CiAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKHRoaXMuJGNvdW50LCBtb2RlbC5sZW5ndGgpOwogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnbWFudWFsQnJlYWtDb3VudCcsIG1vZGVsLmxlbmd0aCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hpbGRYZm9ybSA9IHRoaXMuY2hpbGRYZm9ybTsKICAgICAgICBtb2Rl
bC5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZE1vZGVsKSB7CiAgICAgICAgICBjaGlsZFhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIGNoaWxkTW9kZWwpOwogICAgICAgIH0pOwogICAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmVtcHR5KSB7CiAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnKTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIFJvd0JyZWFrc1hmb3JtOwp9KExpc3RYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFJvd0JyZWFrc1hmb3JtOwoKfSx7Ii4u
L2xpc3QteGZvcm0iOjcwLCIuL3BhZ2UtYnJlYWtzLXhmb3JtIjoxMDF9XSwxMDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBm
dW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNh
bGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmlu
ZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1
cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlm
IChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRp
dmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0g
cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhy
b3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7
IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8p
OyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIENlbGxYZm9ybSA9IHJlcXVpcmUoJy4vY2VsbC14Zm9ybScpOwoKdmFyIFJvd1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFJvd1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihSb3dYZm9ybSk7CgogIGZ1bmN0aW9uIFJvd1hmb3JtKG9wdGlvbnMpIHsKICAgIHZhciBfdGhpczsKCiAgICBf
Y2xhc3NDYWxsQ2hlY2sodGhpcywgUm93WGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXhJdGVtcyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5tYXhJdGVtczsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgYzogbmV3IENlbGxYZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFJvd1hmb3JtLCBbewogICAga2V5OiAicHJlcGFyZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZShtb2RlbCwgb3B0aW9ucykgewogICAgICB2YXIgc3R5bGVJZCA9
IG9wdGlvbnMuc3R5bGVzLmFkZFN0eWxlTW9kZWwobW9kZWwuc3R5bGUpOwoKICAgICAgaWYgKHN0eWxlSWQpIHsKICAgICAgICBtb2RlbC5zdHlsZUlkID0gc3R5bGVJZDsKICAgICAgfQoKICAgICAgdmFyIGNlbGxYZm9ybSA9IHRoaXMubWFwLmM7CiAgICAgIG1vZGVsLmNlbGxzLmZvckVhY2goZnVuY3Rpb24gKGNlbGxNb2RlbCkgewogICAgICAgIGNlbGxYZm9ybS5wcmVwYXJlKGNlbGxNb2RlbCwgb3B0aW9ucyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24g
cmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwsIG9wdGlvbnMpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdyb3cnKTsKICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgncicsIG1vZGVsLm51bWJlcik7CgogICAgICBpZiAobW9kZWwuaGVpZ2h0KSB7CiAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnaHQnLCBtb2RlbC5oZWlnaHQpOwogICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ2N1c3RvbUhlaWdodCcsICcxJyk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5oaWRkZW4pIHsKICAgICAgICB4bWxTdHJl
YW0uYWRkQXR0cmlidXRlKCdoaWRkZW4nLCAnMScpOwogICAgICB9CgogICAgICBpZiAobW9kZWwubWluID4gMCAmJiBtb2RlbC5tYXggPiAwICYmIG1vZGVsLm1pbiA8PSBtb2RlbC5tYXgpIHsKICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdzcGFucycsICIiLmNvbmNhdChtb2RlbC5taW4sICI6IikuY29uY2F0KG1vZGVsLm1heCkpOwogICAgICB9CgogICAgICBpZiAobW9kZWwuc3R5bGVJZCkgewogICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3MnLCBtb2RlbC5zdHlsZUlkKTsKICAgICAgICB4bWxTdHJl
YW0uYWRkQXR0cmlidXRlKCdjdXN0b21Gb3JtYXQnLCAnMScpOwogICAgICB9CgogICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCd4MTRhYzpkeURlc2NlbnQnLCAnMC4yNScpOwoKICAgICAgaWYgKG1vZGVsLm91dGxpbmVMZXZlbCkgewogICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ291dGxpbmVMZXZlbCcsIG1vZGVsLm91dGxpbmVMZXZlbCk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5jb2xsYXBzZWQpIHsKICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdjb2xsYXBzZWQnLCAnMScpOwogICAgICB9
CgogICAgICB2YXIgY2VsbFhmb3JtID0gdGhpcy5tYXAuYzsKICAgICAgbW9kZWwuY2VsbHMuZm9yRWFjaChmdW5jdGlvbiAoY2VsbE1vZGVsKSB7CiAgICAgICAgY2VsbFhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIGNlbGxNb2RlbCwgb3B0aW9ucyk7CiAgICAgIH0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5w
YXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIGlmIChub2RlLm5hbWUgPT09ICdyb3cnKSB7CiAgICAgICAgdGhpcy5udW1Sb3dzU2VlbiArPSAxOwogICAgICAgIHZhciBzcGFucyA9IG5vZGUuYXR0cmlidXRlcy5zcGFucyA/IG5vZGUuYXR0cmlidXRlcy5zcGFucy5zcGxpdCgnOicpLm1hcChmdW5jdGlvbiAoc3BhbikgewogICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHNwYW4sIDEwKTsKICAgICAgICB9KSA6IFt1bmRlZmluZWQsIHVuZGVmaW5lZF07CiAgICAgICAgdmFyIG1vZGVs
ID0gdGhpcy5tb2RlbCA9IHsKICAgICAgICAgIG51bWJlcjogcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLnIsIDEwKSwKICAgICAgICAgIG1pbjogc3BhbnNbMF0sCiAgICAgICAgICBtYXg6IHNwYW5zWzFdLAogICAgICAgICAgY2VsbHM6IFtdCiAgICAgICAgfTsKCiAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy5zKSB7CiAgICAgICAgICBtb2RlbC5zdHlsZUlkID0gcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLnMsIDEwKTsKICAgICAgICB9CgogICAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXMuaGlkZGVuID09PSB0cnVlIHx8
IG5vZGUuYXR0cmlidXRlcy5oaWRkZW4gPT09ICd0cnVlJyB8fCBub2RlLmF0dHJpYnV0ZXMuaGlkZGVuID09PSAxIHx8IG5vZGUuYXR0cmlidXRlcy5oaWRkZW4gPT09ICcxJykgewogICAgICAgICAgbW9kZWwuaGlkZGVuID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXMuYmVzdEZpdCkgewogICAgICAgICAgbW9kZWwuYmVzdEZpdCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAobm9kZS5hdHRyaWJ1dGVzLmh0KSB7CiAgICAgICAgICBtb2RlbC5oZWlnaHQgPSBwYXJzZUZsb2F0KG5v
ZGUuYXR0cmlidXRlcy5odCk7CiAgICAgICAgfQoKICAgICAgICBpZiAobm9kZS5hdHRyaWJ1dGVzLm91dGxpbmVMZXZlbCkgewogICAgICAgICAgbW9kZWwub3V0bGluZUxldmVsID0gcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLm91dGxpbmVMZXZlbCwgMTApOwogICAgICAgIH0KCiAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy5jb2xsYXBzZWQpIHsKICAgICAgICAgIG1vZGVsLmNvbGxhcHNlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgdGhpcy5wYXJzZXIgPSB0aGlz
Lm1hcFtub2RlLm5hbWVdOwoKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJz
ZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLm1vZGVsLmNlbGxzLnB1c2godGhpcy5wYXJzZXIubW9kZWwpOwoKICAgICAgICAgIGlmICh0aGlzLm1heEl0ZW1zICYmIHRoaXMubW9kZWwuY2VsbHMubGVuZ3RoID4gdGhpcy5tYXhJdGVtcykgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk1heCBjb2x1bW4gY291bnQgKCIuY29uY2F0
KHRoaXMubWF4SXRlbXMsICIpIGV4Y2VlZGVkIikpOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29uY2lsZShtb2RlbCwgb3B0aW9ucykgewogICAgICBtb2RlbC5zdHlsZSA9IG1vZGVsLnN0eWxlSWQgPyBvcHRpb25zLnN0eWxlcy5nZXRTdHlsZU1vZGVsKG1vZGVsLnN0eWxl
SWQpIDoge307CgogICAgICBpZiAobW9kZWwuc3R5bGVJZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbW9kZWwuc3R5bGVJZCA9IHVuZGVmaW5lZDsKICAgICAgfQoKICAgICAgdmFyIGNlbGxYZm9ybSA9IHRoaXMubWFwLmM7CiAgICAgIG1vZGVsLmNlbGxzLmZvckVhY2goZnVuY3Rpb24gKGNlbGxNb2RlbCkgewogICAgICAgIGNlbGxYZm9ybS5yZWNvbmNpbGUoY2VsbE1vZGVsLCBvcHRpb25zKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBy
ZXR1cm4gJ3Jvdyc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUm93WGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gUm93WGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzEsIi4vY2VsbC14Zm9ybSI6NzJ9XSwxMDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAi
c3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwg
Q29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5j
b25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3Bl
cnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5w
cm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5
cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29u
c3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJ
bml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsg
aWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJv
dG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgXyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2gnKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgU2hlZXRGb3JtYXRQcm9wZXJ0aWVzWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoU2hlZXRG
b3JtYXRQcm9wZXJ0aWVzWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFNoZWV0Rm9ybWF0UHJvcGVydGllc1hmb3JtKTsKCiAgZnVuY3Rpb24gU2hlZXRGb3JtYXRQcm9wZXJ0aWVzWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2hlZXRGb3JtYXRQcm9wZXJ0aWVzWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhTaGVldEZvcm1hdFByb3BlcnRpZXNYZm9ybSwgW3sKICAgIGtleTogInJlbmRl
ciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgaWYgKG1vZGVsKSB7CiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB7CiAgICAgICAgICBkZWZhdWx0Um93SGVpZ2h0OiBtb2RlbC5kZWZhdWx0Um93SGVpZ2h0LAogICAgICAgICAgb3V0bGluZUxldmVsUm93OiBtb2RlbC5vdXRsaW5lTGV2ZWxSb3csCiAgICAgICAgICBvdXRsaW5lTGV2ZWxDb2w6IG1vZGVsLm91dGxpbmVMZXZlbENvbCwKICAgICAgICAgICd4MTRhYzpkeURlc2NlbnQnOiBtb2RlbC5keURlc2NlbnQKICAgICAg
ICB9OwoKICAgICAgICBpZiAobW9kZWwuZGVmYXVsdENvbFdpZHRoKSB7CiAgICAgICAgICBhdHRyaWJ1dGVzLmRlZmF1bHRDb2xXaWR0aCA9IG1vZGVsLmRlZmF1bHRDb2xXaWR0aDsKICAgICAgICB9IC8vIGRlZmF1bHQgdmFsdWUgZm9yICdkZWZhdWx0Um93SGVpZ2h0JyBpcyAxNSwgdGhpcyBzaG91bGQgbm90IGJlICdjdXN0b20nCgoKICAgICAgICBpZiAoIW1vZGVsLmRlZmF1bHRSb3dIZWlnaHQgfHwgbW9kZWwuZGVmYXVsdFJvd0hlaWdodCAhPT0gMTUpIHsKICAgICAgICAgIGF0dHJpYnV0ZXMuY3VzdG9tSGVpZ2h0ID0g
JzEnOwogICAgICAgIH0KCiAgICAgICAgaWYgKF8uc29tZShhdHRyaWJ1dGVzLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkOwogICAgICAgIH0pKSB7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3NoZWV0Rm9ybWF0UHInLCBhdHRyaWJ1dGVzKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmIChub2RlLm5hbWUgPT09ICdzaGVldEZv
cm1hdFByJykgewogICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICBkZWZhdWx0Um93SGVpZ2h0OiBwYXJzZUZsb2F0KG5vZGUuYXR0cmlidXRlcy5kZWZhdWx0Um93SGVpZ2h0IHx8ICcwJyksCiAgICAgICAgICBkeURlc2NlbnQ6IHBhcnNlRmxvYXQobm9kZS5hdHRyaWJ1dGVzWyd4MTRhYzpkeURlc2NlbnQnXSB8fCAnMCcpLAogICAgICAgICAgb3V0bGluZUxldmVsUm93OiBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMub3V0bGluZUxldmVsUm93IHx8ICcwJywgMTApLAogICAgICAgICAgb3V0bGluZUxldmVsQ29sOiBw
YXJzZUludChub2RlLmF0dHJpYnV0ZXMub3V0bGluZUxldmVsQ29sIHx8ICcwJywgMTApCiAgICAgICAgfTsKCiAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy5kZWZhdWx0Q29sV2lkdGgpIHsKICAgICAgICAgIHRoaXMubW9kZWwuZGVmYXVsdENvbFdpZHRoID0gcGFyc2VGbG9hdChub2RlLmF0dHJpYnV0ZXMuZGVmYXVsdENvbFdpZHRoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVl
OiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnc2hlZXRGb3JtYXRQcic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2hlZXRGb3JtYXRQcm9wZXJ0aWVzWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gU2hlZXRGb3JtYXRQcm9wZXJ0aWVz
WGZvcm07Cgp9LHsiLi4vLi4vLi4vdXRpbHMvdW5kZXItZGFzaCI6MjUsIi4uL2Jhc2UteGZvcm0iOjMxfV0sMTEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9
IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBU
eXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9
IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2lu
aGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3Vy
YWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0
Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0
aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2Vs
ZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5j
dGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVj
dC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBDb2xvclhmb3JtID0gcmVxdWlyZSgnLi4vc3R5bGUvY29sb3IteGZvcm0nKTsKCnZhciBQYWdlU2V0dXBQcm9wZXJ0aWVzWGZvcm0gPSByZXF1aXJlKCcuL3BhZ2Utc2V0dXAtcHJvcGVydGllcy14Zm9ybScpOwoKdmFyIE91dGxpbmVQcm9wZXJ0aWVzWGZvcm0gPSByZXF1aXJlKCcuL291dGxpbmUtcHJvcGVydGllcy14Zm9ybScpOwoKdmFyIFNoZWV0
UHJvcGVydGllc1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFNoZWV0UHJvcGVydGllc1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTaGVldFByb3BlcnRpZXNYZm9ybSk7CgogIGZ1bmN0aW9uIFNoZWV0UHJvcGVydGllc1hmb3JtKCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGVldFByb3BlcnRpZXNYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1h
cCA9IHsKICAgICAgdGFiQ29sb3I6IG5ldyBDb2xvclhmb3JtKCd0YWJDb2xvcicpLAogICAgICBwYWdlU2V0VXBQcjogbmV3IFBhZ2VTZXR1cFByb3BlcnRpZXNYZm9ybSgpLAogICAgICBvdXRsaW5lUHI6IG5ldyBPdXRsaW5lUHJvcGVydGllc1hmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU2hlZXRQcm9wZXJ0aWVzWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCkg
ewogICAgICAgIHhtbFN0cmVhbS5hZGRSb2xsYmFjaygpOwogICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnc2hlZXRQcicpOwogICAgICAgIHZhciBpbm5lciA9IGZhbHNlOwogICAgICAgIGlubmVyID0gdGhpcy5tYXAudGFiQ29sb3IucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwudGFiQ29sb3IpIHx8IGlubmVyOwogICAgICAgIGlubmVyID0gdGhpcy5tYXAucGFnZVNldFVwUHIucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwucGFnZVNldHVwKSB8fCBpbm5lcjsKICAgICAgICBpbm5lciA9IHRoaXMubWFwLm91dGxpbmVQci5yZW5k
ZXIoeG1sU3RyZWFtLCBtb2RlbC5vdXRsaW5lUHJvcGVydGllcykgfHwgaW5uZXI7CgogICAgICAgIGlmIChpbm5lcikgewogICAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICAgICAgeG1sU3RyZWFtLmNvbW1pdCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB4bWxTdHJlYW0ucm9sbGJhY2soKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewog
ICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKG5vZGUubmFtZSA9PT0gdGhpcy50YWcpIHsKICAgICAgICB0aGlzLnJlc2V0KCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLm1hcFtub2RlLm5hbWVdKSB7CiAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAg
ICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikg
ewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMubWFwLnRhYkNvbG9yLm1vZGVsIHx8IHRoaXMubWFwLnBhZ2VTZXRVcFByLm1vZGVsIHx8IHRoaXMubWFwLm91dGxpbmVQci5tb2RlbCkgewogICAgICAgIHRoaXMubW9kZWwgPSB7fTsKCiAgICAgICAgaWYgKHRoaXMubWFwLnRhYkNvbG9yLm1vZGVsKSB7CiAgICAgICAgICB0aGlzLm1v
ZGVsLnRhYkNvbG9yID0gdGhpcy5tYXAudGFiQ29sb3IubW9kZWw7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5tYXAucGFnZVNldFVwUHIubW9kZWwpIHsKICAgICAgICAgIHRoaXMubW9kZWwucGFnZVNldHVwID0gdGhpcy5tYXAucGFnZVNldFVwUHIubW9kZWw7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5tYXAub3V0bGluZVByLm1vZGVsKSB7CiAgICAgICAgICB0aGlzLm1vZGVsLm91dGxpbmVQcm9wZXJ0aWVzID0gdGhpcy5tYXAub3V0bGluZVByLm1vZGVsOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAg
ICAgICB0aGlzLm1vZGVsID0gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdzaGVldFByJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBTaGVldFByb3BlcnRpZXNYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBTaGVldFByb3BlcnRpZXNYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMSwiLi4vc3R5bGUvY29sb3IteGZvcm0iOjEyNywiLi9vdXRsaW5lLXByb3BlcnRp
ZXMteGZvcm0iOjEwMCwiLi9wYWdlLXNldHVwLXByb3BlcnRpZXMteGZvcm0iOjEwM31dLDExMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5
cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJD
YW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmpl
Y3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJD
bGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUg
fSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9
IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1l
bnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQg
MCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1
cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90
eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBfID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvdW5kZXItZGFzaCcpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCmZ1bmN0aW9uIGJvb2xlYW5Ub1htbChtb2RlbCwgdmFsdWUpIHsKICByZXR1cm4gbW9kZWwgPyB2YWx1ZSA6IHVuZGVmaW5lZDsKfQoKZnVuY3Rpb24geG1sVG9Cb29sZWFuKHZhbHVlLCBlcXVhbHMpIHsKICByZXR1cm4gdmFsdWUgPT09IGVxdWFscyA/IHRydWUgOiB1bmRlZmluZWQ7Cn0KCnZh
ciBTaGVldFByb3RlY3Rpb25YZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhTaGVldFByb3RlY3Rpb25YZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2hlZXRQcm90ZWN0aW9uWGZvcm0pOwoKICBmdW5jdGlvbiBTaGVldFByb3RlY3Rpb25YZm9ybSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGVldFByb3RlY3Rpb25YZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2Ny
ZWF0ZUNsYXNzKFNoZWV0UHJvdGVjdGlvblhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICBpZiAobW9kZWwpIHsKICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHsKICAgICAgICAgIHNoZWV0OiBib29sZWFuVG9YbWwobW9kZWwuc2hlZXQsICcxJyksCiAgICAgICAgICBzZWxlY3RMb2NrZWRDZWxsczogbW9kZWwuc2VsZWN0TG9ja2VkQ2VsbHMgPT09IGZhbHNlID8gJzEnIDogdW5kZWZpbmVkLAogICAgICAgICAgc2VsZWN0VW5sb2Nr
ZWRDZWxsczogbW9kZWwuc2VsZWN0VW5sb2NrZWRDZWxscyA9PT0gZmFsc2UgPyAnMScgOiB1bmRlZmluZWQsCiAgICAgICAgICBmb3JtYXRDZWxsczogYm9vbGVhblRvWG1sKG1vZGVsLmZvcm1hdENlbGxzLCAnMCcpLAogICAgICAgICAgZm9ybWF0Q29sdW1uczogYm9vbGVhblRvWG1sKG1vZGVsLmZvcm1hdENvbHVtbnMsICcwJyksCiAgICAgICAgICBmb3JtYXRSb3dzOiBib29sZWFuVG9YbWwobW9kZWwuZm9ybWF0Um93cywgJzAnKSwKICAgICAgICAgIGluc2VydENvbHVtbnM6IGJvb2xlYW5Ub1htbChtb2RlbC5pbnNlcnRD
b2x1bW5zLCAnMCcpLAogICAgICAgICAgaW5zZXJ0Um93czogYm9vbGVhblRvWG1sKG1vZGVsLmluc2VydFJvd3MsICcwJyksCiAgICAgICAgICBpbnNlcnRIeXBlcmxpbmtzOiBib29sZWFuVG9YbWwobW9kZWwuaW5zZXJ0SHlwZXJsaW5rcywgJzAnKSwKICAgICAgICAgIGRlbGV0ZUNvbHVtbnM6IGJvb2xlYW5Ub1htbChtb2RlbC5kZWxldGVDb2x1bW5zLCAnMCcpLAogICAgICAgICAgZGVsZXRlUm93czogYm9vbGVhblRvWG1sKG1vZGVsLmRlbGV0ZVJvd3MsICcwJyksCiAgICAgICAgICBzb3J0OiBib29sZWFuVG9YbWwobW9k
ZWwuc29ydCwgJzAnKSwKICAgICAgICAgIGF1dG9GaWx0ZXI6IGJvb2xlYW5Ub1htbChtb2RlbC5hdXRvRmlsdGVyLCAnMCcpLAogICAgICAgICAgcGl2b3RUYWJsZXM6IGJvb2xlYW5Ub1htbChtb2RlbC5waXZvdFRhYmxlcywgJzAnKQogICAgICAgIH07CgogICAgICAgIGlmIChtb2RlbC5zaGVldCkgewogICAgICAgICAgYXR0cmlidXRlcy5hbGdvcml0aG1OYW1lID0gbW9kZWwuYWxnb3JpdGhtTmFtZTsKICAgICAgICAgIGF0dHJpYnV0ZXMuaGFzaFZhbHVlID0gbW9kZWwuaGFzaFZhbHVlOwogICAgICAgICAgYXR0cmlidXRl
cy5zYWx0VmFsdWUgPSBtb2RlbC5zYWx0VmFsdWU7CiAgICAgICAgICBhdHRyaWJ1dGVzLnNwaW5Db3VudCA9IG1vZGVsLnNwaW5Db3VudDsKICAgICAgICAgIGF0dHJpYnV0ZXMub2JqZWN0cyA9IGJvb2xlYW5Ub1htbChtb2RlbC5vYmplY3RzID09PSBmYWxzZSwgJzEnKTsKICAgICAgICAgIGF0dHJpYnV0ZXMuc2NlbmFyaW9zID0gYm9vbGVhblRvWG1sKG1vZGVsLnNjZW5hcmlvcyA9PT0gZmFsc2UsICcxJyk7CiAgICAgICAgfQoKICAgICAgICBpZiAoXy5zb21lKGF0dHJpYnV0ZXMsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAg
ICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7CiAgICAgICAgfSkpIHsKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSh0aGlzLnRhZywgYXR0cmlidXRlcyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICBzaGVldDogeG1sVG9Cb29sZWFuKG5v
ZGUuYXR0cmlidXRlcy5zaGVldCwgJzEnKSwKICAgICAgICAgICAgb2JqZWN0czogbm9kZS5hdHRyaWJ1dGVzLm9iamVjdHMgPT09ICcxJyA/IGZhbHNlIDogdW5kZWZpbmVkLAogICAgICAgICAgICBzY2VuYXJpb3M6IG5vZGUuYXR0cmlidXRlcy5zY2VuYXJpb3MgPT09ICcxJyA/IGZhbHNlIDogdW5kZWZpbmVkLAogICAgICAgICAgICBzZWxlY3RMb2NrZWRDZWxsczogbm9kZS5hdHRyaWJ1dGVzLnNlbGVjdExvY2tlZENlbGxzID09PSAnMScgPyBmYWxzZSA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgc2VsZWN0VW5sb2NrZWRD
ZWxsczogbm9kZS5hdHRyaWJ1dGVzLnNlbGVjdFVubG9ja2VkQ2VsbHMgPT09ICcxJyA/IGZhbHNlIDogdW5kZWZpbmVkLAogICAgICAgICAgICBmb3JtYXRDZWxsczogeG1sVG9Cb29sZWFuKG5vZGUuYXR0cmlidXRlcy5mb3JtYXRDZWxscywgJzAnKSwKICAgICAgICAgICAgZm9ybWF0Q29sdW1uczogeG1sVG9Cb29sZWFuKG5vZGUuYXR0cmlidXRlcy5mb3JtYXRDb2x1bW5zLCAnMCcpLAogICAgICAgICAgICBmb3JtYXRSb3dzOiB4bWxUb0Jvb2xlYW4obm9kZS5hdHRyaWJ1dGVzLmZvcm1hdFJvd3MsICcwJyksCiAgICAgICAg
ICAgIGluc2VydENvbHVtbnM6IHhtbFRvQm9vbGVhbihub2RlLmF0dHJpYnV0ZXMuaW5zZXJ0Q29sdW1ucywgJzAnKSwKICAgICAgICAgICAgaW5zZXJ0Um93czogeG1sVG9Cb29sZWFuKG5vZGUuYXR0cmlidXRlcy5pbnNlcnRSb3dzLCAnMCcpLAogICAgICAgICAgICBpbnNlcnRIeXBlcmxpbmtzOiB4bWxUb0Jvb2xlYW4obm9kZS5hdHRyaWJ1dGVzLmluc2VydEh5cGVybGlua3MsICcwJyksCiAgICAgICAgICAgIGRlbGV0ZUNvbHVtbnM6IHhtbFRvQm9vbGVhbihub2RlLmF0dHJpYnV0ZXMuZGVsZXRlQ29sdW1ucywgJzAnKSwK
ICAgICAgICAgICAgZGVsZXRlUm93czogeG1sVG9Cb29sZWFuKG5vZGUuYXR0cmlidXRlcy5kZWxldGVSb3dzLCAnMCcpLAogICAgICAgICAgICBzb3J0OiB4bWxUb0Jvb2xlYW4obm9kZS5hdHRyaWJ1dGVzLnNvcnQsICcwJyksCiAgICAgICAgICAgIGF1dG9GaWx0ZXI6IHhtbFRvQm9vbGVhbihub2RlLmF0dHJpYnV0ZXMuYXV0b0ZpbHRlciwgJzAnKSwKICAgICAgICAgICAgcGl2b3RUYWJsZXM6IHhtbFRvQm9vbGVhbihub2RlLmF0dHJpYnV0ZXMucGl2b3RUYWJsZXMsICcwJykKICAgICAgICAgIH07CgogICAgICAgICAgaWYg
KG5vZGUuYXR0cmlidXRlcy5hbGdvcml0aG1OYW1lKSB7CiAgICAgICAgICAgIHRoaXMubW9kZWwuYWxnb3JpdGhtTmFtZSA9IG5vZGUuYXR0cmlidXRlcy5hbGdvcml0aG1OYW1lOwogICAgICAgICAgICB0aGlzLm1vZGVsLmhhc2hWYWx1ZSA9IG5vZGUuYXR0cmlidXRlcy5oYXNoVmFsdWU7CiAgICAgICAgICAgIHRoaXMubW9kZWwuc2FsdFZhbHVlID0gbm9kZS5hdHRyaWJ1dGVzLnNhbHRWYWx1ZTsKICAgICAgICAgICAgdGhpcy5tb2RlbC5zcGluQ291bnQgPSBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMuc3BpbkNvdW50LCAx
MCk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsK
ICAgICAgcmV0dXJuICdzaGVldFByb3RlY3Rpb24nOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNoZWV0UHJvdGVjdGlvblhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFNoZWV0UHJvdGVjdGlvblhmb3JtOwoKfSx7Ii4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2giOjI1LCIuLi9iYXNlLXhmb3JtIjozMX1dLDExMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBl
b2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0
dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5l
bnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0
b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNs
YXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2Yo
bywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9
IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNh
bGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxl
Y3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7
IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBjb2xDYWNoZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL2NvbC1jYWNoZScpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBWSUVXX1NUQVRFUyA9IHsKICBmcm96
ZW46ICdmcm96ZW4nLAogIGZyb3plblNwbGl0OiAnZnJvemVuJywKICBzcGxpdDogJ3NwbGl0Jwp9OwoKdmFyIFNoZWV0Vmlld1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFNoZWV0Vmlld1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTaGVldFZpZXdYZm9ybSk7CgogIGZ1bmN0aW9uIFNoZWV0Vmlld1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNoZWV0Vmlld1hmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVyLmFw
cGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU2hlZXRWaWV3WGZvcm0sIFt7CiAgICBrZXk6ICJwcmVwYXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlKG1vZGVsKSB7CiAgICAgIHN3aXRjaCAobW9kZWwuc3RhdGUpIHsKICAgICAgICBjYXNlICdmcm96ZW4nOgogICAgICAgIGNhc2UgJ3NwbGl0JzoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgbW9kZWwuc3RhdGUgPSAnbm9ybWFsJzsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwgewog
ICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ3NoZWV0VmlldycsIHsKICAgICAgICB3b3JrYm9va1ZpZXdJZDogbW9kZWwud29ya2Jvb2tWaWV3SWQgfHwgMAogICAgICB9KTsKCiAgICAgIHZhciBhZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgdmFsdWUsIGluY2x1ZGVkKSB7CiAgICAgICAgaWYgKGluY2x1ZGVkKSB7CiAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKTsKICAgICAgICB9
CiAgICAgIH07CgogICAgICBhZGQoJ3JpZ2h0VG9MZWZ0JywgJzEnLCBtb2RlbC5yaWdodFRvTGVmdCA9PT0gdHJ1ZSk7CiAgICAgIGFkZCgndGFiU2VsZWN0ZWQnLCAnMScsIG1vZGVsLnRhYlNlbGVjdGVkKTsKICAgICAgYWRkKCdzaG93UnVsZXInLCAnMCcsIG1vZGVsLnNob3dSdWxlciA9PT0gZmFsc2UpOwogICAgICBhZGQoJ3Nob3dSb3dDb2xIZWFkZXJzJywgJzAnLCBtb2RlbC5zaG93Um93Q29sSGVhZGVycyA9PT0gZmFsc2UpOwogICAgICBhZGQoJ3Nob3dHcmlkTGluZXMnLCAnMCcsIG1vZGVsLnNob3dHcmlkTGluZXMg
PT09IGZhbHNlKTsKICAgICAgYWRkKCd6b29tU2NhbGUnLCBtb2RlbC56b29tU2NhbGUsIG1vZGVsLnpvb21TY2FsZSk7CiAgICAgIGFkZCgnem9vbVNjYWxlTm9ybWFsJywgbW9kZWwuem9vbVNjYWxlTm9ybWFsLCBtb2RlbC56b29tU2NhbGVOb3JtYWwpOwogICAgICBhZGQoJ3ZpZXcnLCBtb2RlbC5zdHlsZSwgbW9kZWwuc3R5bGUpOwogICAgICB2YXIgdG9wTGVmdENlbGw7CiAgICAgIHZhciB4U3BsaXQ7CiAgICAgIHZhciB5U3BsaXQ7CiAgICAgIHZhciBhY3RpdmVQYW5lOwoKICAgICAgc3dpdGNoIChtb2RlbC5zdGF0ZSkg
ewogICAgICAgIGNhc2UgJ2Zyb3plbic6CiAgICAgICAgICB4U3BsaXQgPSBtb2RlbC54U3BsaXQgfHwgMDsKICAgICAgICAgIHlTcGxpdCA9IG1vZGVsLnlTcGxpdCB8fCAwOwogICAgICAgICAgdG9wTGVmdENlbGwgPSBtb2RlbC50b3BMZWZ0Q2VsbCB8fCBjb2xDYWNoZS5nZXRBZGRyZXNzKHlTcGxpdCArIDEsIHhTcGxpdCArIDEpLmFkZHJlc3M7CiAgICAgICAgICBhY3RpdmVQYW5lID0gbW9kZWwueFNwbGl0ICYmIG1vZGVsLnlTcGxpdCAmJiAnYm90dG9tUmlnaHQnIHx8IG1vZGVsLnhTcGxpdCAmJiAndG9wUmlnaHQnIHx8
ICdib3R0b21MZWZ0JzsKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgncGFuZScsIHsKICAgICAgICAgICAgeFNwbGl0OiBtb2RlbC54U3BsaXQgfHwgdW5kZWZpbmVkLAogICAgICAgICAgICB5U3BsaXQ6IG1vZGVsLnlTcGxpdCB8fCB1bmRlZmluZWQsCiAgICAgICAgICAgIHRvcExlZnRDZWxsOiB0b3BMZWZ0Q2VsbCwKICAgICAgICAgICAgYWN0aXZlUGFuZTogYWN0aXZlUGFuZSwKICAgICAgICAgICAgc3RhdGU6ICdmcm96ZW4nCiAgICAgICAgICB9KTsKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnc2VsZWN0
aW9uJywgewogICAgICAgICAgICBwYW5lOiBhY3RpdmVQYW5lLAogICAgICAgICAgICBhY3RpdmVDZWxsOiBtb2RlbC5hY3RpdmVDZWxsLAogICAgICAgICAgICBzcXJlZjogbW9kZWwuYWN0aXZlQ2VsbAogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnc3BsaXQnOgogICAgICAgICAgaWYgKG1vZGVsLmFjdGl2ZVBhbmUgPT09ICd0b3BMZWZ0JykgewogICAgICAgICAgICBtb2RlbC5hY3RpdmVQYW5lID0gdW5kZWZpbmVkOwogICAgICAgICAgfQoKICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9k
ZSgncGFuZScsIHsKICAgICAgICAgICAgeFNwbGl0OiBtb2RlbC54U3BsaXQgfHwgdW5kZWZpbmVkLAogICAgICAgICAgICB5U3BsaXQ6IG1vZGVsLnlTcGxpdCB8fCB1bmRlZmluZWQsCiAgICAgICAgICAgIHRvcExlZnRDZWxsOiBtb2RlbC50b3BMZWZ0Q2VsbCwKICAgICAgICAgICAgYWN0aXZlUGFuZTogbW9kZWwuYWN0aXZlUGFuZQogICAgICAgICAgfSk7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3NlbGVjdGlvbicsIHsKICAgICAgICAgICAgcGFuZTogbW9kZWwuYWN0aXZlUGFuZSwKICAgICAgICAgICAgYWN0
aXZlQ2VsbDogbW9kZWwuYWN0aXZlQ2VsbCwKICAgICAgICAgICAgc3FyZWY6IG1vZGVsLmFjdGl2ZUNlbGwKICAgICAgICAgIH0pOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ25vcm1hbCc6CiAgICAgICAgICBpZiAobW9kZWwuYWN0aXZlQ2VsbCkgewogICAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3NlbGVjdGlvbicsIHsKICAgICAgICAgICAgICBhY3RpdmVDZWxsOiBtb2RlbC5hY3RpdmVDZWxsLAogICAgICAgICAgICAgIHNxcmVmOiBtb2RlbC5hY3RpdmVDZWxsCiAgICAgICAgICAgIH0pOwogICAg
ICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSAnc2hlZXRWaWV3JzoKICAgICAgICAgIHRoaXMuc2hlZXRWaWV3ID0gewogICAgICAgICAgICB3b3JrYm9va1ZpZXdJZDogcGFyc2VJbnQobm9kZS5hdHRy
aWJ1dGVzLndvcmtib29rVmlld0lkLCAxMCksCiAgICAgICAgICAgIHJpZ2h0VG9MZWZ0OiBub2RlLmF0dHJpYnV0ZXMucmlnaHRUb0xlZnQgPT09ICcxJywKICAgICAgICAgICAgdGFiU2VsZWN0ZWQ6IG5vZGUuYXR0cmlidXRlcy50YWJTZWxlY3RlZCA9PT0gJzEnLAogICAgICAgICAgICBzaG93UnVsZXI6ICEobm9kZS5hdHRyaWJ1dGVzLnNob3dSdWxlciA9PT0gJzAnKSwKICAgICAgICAgICAgc2hvd1Jvd0NvbEhlYWRlcnM6ICEobm9kZS5hdHRyaWJ1dGVzLnNob3dSb3dDb2xIZWFkZXJzID09PSAnMCcpLAogICAgICAgICAg
ICBzaG93R3JpZExpbmVzOiAhKG5vZGUuYXR0cmlidXRlcy5zaG93R3JpZExpbmVzID09PSAnMCcpLAogICAgICAgICAgICB6b29tU2NhbGU6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy56b29tU2NhbGUgfHwgJzEwMCcsIDEwKSwKICAgICAgICAgICAgem9vbVNjYWxlTm9ybWFsOiBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMuem9vbVNjYWxlTm9ybWFsIHx8ICcxMDAnLCAxMCksCiAgICAgICAgICAgIHN0eWxlOiBub2RlLmF0dHJpYnV0ZXMudmlldwogICAgICAgICAgfTsKICAgICAgICAgIHRoaXMucGFuZSA9IHVuZGVmaW5l
ZDsKICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IHt9OwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGNhc2UgJ3BhbmUnOgogICAgICAgICAgdGhpcy5wYW5lID0gewogICAgICAgICAgICB4U3BsaXQ6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy54U3BsaXQgfHwgJzAnLCAxMCksCiAgICAgICAgICAgIHlTcGxpdDogcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLnlTcGxpdCB8fCAnMCcsIDEwKSwKICAgICAgICAgICAgdG9wTGVmdENlbGw6IG5vZGUuYXR0cmlidXRlcy50b3BMZWZ0Q2VsbCwKICAgICAgICAgICAg
YWN0aXZlUGFuZTogbm9kZS5hdHRyaWJ1dGVzLmFjdGl2ZVBhbmUgfHwgJ3RvcExlZnQnLAogICAgICAgICAgICBzdGF0ZTogbm9kZS5hdHRyaWJ1dGVzLnN0YXRlCiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGNhc2UgJ3NlbGVjdGlvbic6CiAgICAgICAgICB7CiAgICAgICAgICAgIHZhciBuYW1lID0gbm9kZS5hdHRyaWJ1dGVzLnBhbmUgfHwgJ3RvcExlZnQnOwogICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnNbbmFtZV0gPSB7CiAgICAgICAgICAgICAgcGFuZTogbmFtZSwKICAgICAgICAg
ICAgICBhY3RpdmVDZWxsOiBub2RlLmF0dHJpYnV0ZXMuYWN0aXZlQ2VsbAogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgdmFyIG1vZGVs
OwogICAgICB2YXIgc2VsZWN0aW9uOwoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSAnc2hlZXRWaWV3JzoKICAgICAgICAgIGlmICh0aGlzLnNoZWV0VmlldyAmJiB0aGlzLnBhbmUpIHsKICAgICAgICAgICAgbW9kZWwgPSB0aGlzLm1vZGVsID0gewogICAgICAgICAgICAgIHdvcmtib29rVmlld0lkOiB0aGlzLnNoZWV0Vmlldy53b3JrYm9va1ZpZXdJZCwKICAgICAgICAgICAgICByaWdodFRvTGVmdDogdGhpcy5zaGVldFZpZXcucmlnaHRUb0xlZnQsCiAgICAgICAgICAgICAgc3RhdGU6IFZJRVdfU1RBVEVT
W3RoaXMucGFuZS5zdGF0ZV0gfHwgJ3NwbGl0JywKICAgICAgICAgICAgICAvLyBzcGxpdCBpcyBkZWZhdWx0CiAgICAgICAgICAgICAgeFNwbGl0OiB0aGlzLnBhbmUueFNwbGl0LAogICAgICAgICAgICAgIHlTcGxpdDogdGhpcy5wYW5lLnlTcGxpdCwKICAgICAgICAgICAgICB0b3BMZWZ0Q2VsbDogdGhpcy5wYW5lLnRvcExlZnRDZWxsLAogICAgICAgICAgICAgIHNob3dSdWxlcjogdGhpcy5zaGVldFZpZXcuc2hvd1J1bGVyLAogICAgICAgICAgICAgIHNob3dSb3dDb2xIZWFkZXJzOiB0aGlzLnNoZWV0Vmlldy5zaG93Um93
Q29sSGVhZGVycywKICAgICAgICAgICAgICBzaG93R3JpZExpbmVzOiB0aGlzLnNoZWV0Vmlldy5zaG93R3JpZExpbmVzLAogICAgICAgICAgICAgIHpvb21TY2FsZTogdGhpcy5zaGVldFZpZXcuem9vbVNjYWxlLAogICAgICAgICAgICAgIHpvb21TY2FsZU5vcm1hbDogdGhpcy5zaGVldFZpZXcuem9vbVNjYWxlTm9ybWFsCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5zdGF0ZSA9PT0gJ3NwbGl0JykgewogICAgICAgICAgICAgIG1vZGVsLmFjdGl2ZVBhbmUgPSB0aGlzLnBhbmUuYWN0aXZlUGFu
ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb25zW3RoaXMucGFuZS5hY3RpdmVQYW5lXTsKCiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLmFjdGl2ZUNlbGwpIHsKICAgICAgICAgICAgICBtb2RlbC5hY3RpdmVDZWxsID0gc2VsZWN0aW9uLmFjdGl2ZUNlbGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLnNoZWV0Vmlldy5zdHlsZSkgewogICAgICAgICAgICAgIG1vZGVsLnN0eWxlID0gdGhpcy5zaGVldFZpZXcuc3R5bGU7CiAgICAg
ICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1vZGVsID0gdGhpcy5tb2RlbCA9IHsKICAgICAgICAgICAgICB3b3JrYm9va1ZpZXdJZDogdGhpcy5zaGVldFZpZXcud29ya2Jvb2tWaWV3SWQsCiAgICAgICAgICAgICAgcmlnaHRUb0xlZnQ6IHRoaXMuc2hlZXRWaWV3LnJpZ2h0VG9MZWZ0LAogICAgICAgICAgICAgIHN0YXRlOiAnbm9ybWFsJywKICAgICAgICAgICAgICBzaG93UnVsZXI6IHRoaXMuc2hlZXRWaWV3LnNob3dSdWxlciwKICAgICAgICAgICAgICBzaG93Um93Q29sSGVhZGVyczogdGhpcy5z
aGVldFZpZXcuc2hvd1Jvd0NvbEhlYWRlcnMsCiAgICAgICAgICAgICAgc2hvd0dyaWRMaW5lczogdGhpcy5zaGVldFZpZXcuc2hvd0dyaWRMaW5lcywKICAgICAgICAgICAgICB6b29tU2NhbGU6IHRoaXMuc2hlZXRWaWV3Lnpvb21TY2FsZSwKICAgICAgICAgICAgICB6b29tU2NhbGVOb3JtYWw6IHRoaXMuc2hlZXRWaWV3Lnpvb21TY2FsZU5vcm1hbAogICAgICAgICAgICB9OwogICAgICAgICAgICBzZWxlY3Rpb24gPSB0aGlzLnNlbGVjdGlvbnMudG9wTGVmdDsKCiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2VsZWN0
aW9uLmFjdGl2ZUNlbGwpIHsKICAgICAgICAgICAgICBtb2RlbC5hY3RpdmVDZWxsID0gc2VsZWN0aW9uLmFjdGl2ZUNlbGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0aGlzLnNoZWV0Vmlldy5zdHlsZSkgewogICAgICAgICAgICAgIG1vZGVsLnN0eWxlID0gdGhpcy5zaGVldFZpZXcuc3R5bGU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTog
InJlY29uY2lsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjb25jaWxlKCkge30KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnc2hlZXRWaWV3JzsKICAgIH0KICB9XSk7CgogIHJldHVybiBTaGVldFZpZXdYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBTaGVldFZpZXdYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy9jb2wtY2FjaGUiOjE5LCIuLi9iYXNlLXhmb3JtIjozMX1dLDExMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0
cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3Ry
dWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZv
ciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0
cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJv
dyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVP
ZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0
UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3Ry
dWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxl
ZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30p
KTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2
YXIgVGFibGVQYXJ0WGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoVGFibGVQYXJ0WGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFRhYmxlUGFydFhmb3JtKTsKCiAgZnVuY3Rpb24gVGFibGVQYXJ0WGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGVQYXJ0WGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhUYWJsZVBhcnRYZm9ybSwgW3sK
ICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgaWYgKG1vZGVsKSB7CiAgICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKHRoaXMudGFnLCB7CiAgICAgICAgICAncjppZCc6IG1vZGVsLnJJZAogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAg
ICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICBySWQ6IG5vZGUuYXR0cmlidXRlc1sncjppZCddCiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgcmV0dXJuIGZhbHNl
OwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd0YWJsZVBhcnQnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFRhYmxlUGFydFhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFRhYmxlUGFydFhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sMTE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsg
aWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsg
fTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNj
cmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhD
b25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7
IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90
b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3
VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0
eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBl
b2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlw
ZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIF8gPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy91bmRlci1kYXNoJyk7Cgp2YXIgY29sQ2FjaGUgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy9jb2wtY2FjaGUnKTsKCnZhciBYbWxTdHJlYW0g
PSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy94bWwtc3RyZWFtJyk7Cgp2YXIgUmVsVHlwZSA9IHJlcXVpcmUoJy4uLy4uL3JlbC10eXBlJyk7Cgp2YXIgTWVyZ2VzID0gcmVxdWlyZSgnLi9tZXJnZXMnKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgTGlzdFhmb3JtID0gcmVxdWlyZSgnLi4vbGlzdC14Zm9ybScpOwoKdmFyIFJvd1hmb3JtID0gcmVxdWlyZSgnLi9yb3cteGZvcm0nKTsKCnZhciBDb2xYZm9ybSA9IHJlcXVpcmUoJy4vY29sLXhmb3JtJyk7Cgp2YXIgRGltZW5zaW9uWGZv
cm0gPSByZXF1aXJlKCcuL2RpbWVuc2lvbi14Zm9ybScpOwoKdmFyIEh5cGVybGlua1hmb3JtID0gcmVxdWlyZSgnLi9oeXBlcmxpbmsteGZvcm0nKTsKCnZhciBNZXJnZUNlbGxYZm9ybSA9IHJlcXVpcmUoJy4vbWVyZ2UtY2VsbC14Zm9ybScpOwoKdmFyIERhdGFWYWxpZGF0aW9uc1hmb3JtID0gcmVxdWlyZSgnLi9kYXRhLXZhbGlkYXRpb25zLXhmb3JtJyk7Cgp2YXIgU2hlZXRQcm9wZXJ0aWVzWGZvcm0gPSByZXF1aXJlKCcuL3NoZWV0LXByb3BlcnRpZXMteGZvcm0nKTsKCnZhciBTaGVldEZvcm1hdFByb3BlcnRpZXNYZm9y
bSA9IHJlcXVpcmUoJy4vc2hlZXQtZm9ybWF0LXByb3BlcnRpZXMteGZvcm0nKTsKCnZhciBTaGVldFZpZXdYZm9ybSA9IHJlcXVpcmUoJy4vc2hlZXQtdmlldy14Zm9ybScpOwoKdmFyIFNoZWV0UHJvdGVjdGlvblhmb3JtID0gcmVxdWlyZSgnLi9zaGVldC1wcm90ZWN0aW9uLXhmb3JtJyk7Cgp2YXIgUGFnZU1hcmdpbnNYZm9ybSA9IHJlcXVpcmUoJy4vcGFnZS1tYXJnaW5zLXhmb3JtJyk7Cgp2YXIgUGFnZVNldHVwWGZvcm0gPSByZXF1aXJlKCcuL3BhZ2Utc2V0dXAteGZvcm0nKTsKCnZhciBQcmludE9wdGlvbnNYZm9ybSA9
IHJlcXVpcmUoJy4vcHJpbnQtb3B0aW9ucy14Zm9ybScpOwoKdmFyIEF1dG9GaWx0ZXJYZm9ybSA9IHJlcXVpcmUoJy4vYXV0by1maWx0ZXIteGZvcm0nKTsKCnZhciBQaWN0dXJlWGZvcm0gPSByZXF1aXJlKCcuL3BpY3R1cmUteGZvcm0nKTsKCnZhciBEcmF3aW5nWGZvcm0gPSByZXF1aXJlKCcuL2RyYXdpbmcteGZvcm0nKTsKCnZhciBUYWJsZVBhcnRYZm9ybSA9IHJlcXVpcmUoJy4vdGFibGUtcGFydC14Zm9ybScpOwoKdmFyIFJvd0JyZWFrc1hmb3JtID0gcmVxdWlyZSgnLi9yb3ctYnJlYWtzLXhmb3JtJyk7Cgp2YXIgSGVh
ZGVyRm9vdGVyWGZvcm0gPSByZXF1aXJlKCcuL2hlYWRlci1mb290ZXIteGZvcm0nKTsKCnZhciBDb25kaXRpb25hbEZvcm1hdHRpbmdzWGZvcm0gPSByZXF1aXJlKCcuL2NmL2NvbmRpdGlvbmFsLWZvcm1hdHRpbmdzLXhmb3JtJyk7Cgp2YXIgRXh0TGlzdFhmb3JtID0gcmVxdWlyZSgnLi9leHQtbHN0LXhmb3JtJyk7Cgp2YXIgbWVyZ2VSdWxlID0gZnVuY3Rpb24gbWVyZ2VSdWxlKHJ1bGUsIGV4dFJ1bGUpIHsKICBPYmplY3Qua2V5cyhleHRSdWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgIHZhciB2YWx1ZSA9IHJ1
bGVba2V5XTsKICAgIHZhciBleHRWYWx1ZSA9IGV4dFJ1bGVba2V5XTsKCiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBleHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHJ1bGVba2V5XSA9IGV4dFZhbHVlOwogICAgfQogIH0pOwp9OwoKdmFyIG1lcmdlQ29uZGl0aW9uYWxGb3JtYXR0aW5ncyA9IGZ1bmN0aW9uIG1lcmdlQ29uZGl0aW9uYWxGb3JtYXR0aW5ncyhtb2RlbCwgZXh0TW9kZWwpIHsKICAvLyBjb25kaXRpb25hbCBmb3JtYXR0aW5ncyBhcmUgcmVuZGVyZWQgaW4gd29ya3NoZWV0LmNvbmRpdGlvbmFs
Rm9ybWF0dGluZyBhbmQgYWxzbyBpbgogIC8vIHdvcmtzaGVldC5leHRMc3QuZXh0LngxNDpjb25kaXRpb25hbEZvcm1hdHRpbmdzCiAgLy8gc29tZSAoZS5nLiBkYXRhQmFyKSBhcmUgZXZlbiBzcHJlYWQgYWNyb3NzIGJvdGghCiAgaWYgKCFleHRNb2RlbCB8fCAhZXh0TW9kZWwubGVuZ3RoKSB7CiAgICByZXR1cm4gbW9kZWw7CiAgfQoKICBpZiAoIW1vZGVsIHx8ICFtb2RlbC5sZW5ndGgpIHsKICAgIHJldHVybiBleHRNb2RlbDsKICB9IC8vIGluZGV4IG1vZGVsIHJ1bGVzIGJ5IHgxNElkCgoKICB2YXIgY2ZNYXAgPSB7fTsK
ICB2YXIgcnVsZU1hcCA9IHt9OwogIG1vZGVsLmZvckVhY2goZnVuY3Rpb24gKGNmKSB7CiAgICBjZk1hcFtjZi5yZWZdID0gY2Y7CiAgICBjZi5ydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7CiAgICAgIHZhciB4MTRJZCA9IHJ1bGUueDE0SWQ7CgogICAgICBpZiAoeDE0SWQpIHsKICAgICAgICBydWxlTWFwW3gxNElkXSA9IHJ1bGU7CiAgICAgIH0KICAgIH0pOwogIH0pOwogIGV4dE1vZGVsLmZvckVhY2goZnVuY3Rpb24gKGV4dENmKSB7CiAgICBleHRDZi5ydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChleHRSdWxlKSB7
CiAgICAgIHZhciBydWxlID0gcnVsZU1hcFtleHRSdWxlLngxNElkXTsKCiAgICAgIGlmIChydWxlKSB7CiAgICAgICAgLy8gbWVyZ2Ugd2l0aCBtYXRjaGluZyBydWxlCiAgICAgICAgbWVyZ2VSdWxlKHJ1bGUsIGV4dFJ1bGUpOwogICAgICB9IGVsc2UgaWYgKGNmTWFwW2V4dENmLnJlZl0pIHsKICAgICAgICAvLyByZXVzZSBleGlzdGluZyBjZiByZWYKICAgICAgICBjZk1hcFtleHRDZi5yZWZdLnJ1bGVzLnB1c2goZXh0UnVsZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gY3JlYXRlIG5ldyBjZgogICAgICAgIG1vZGVs
LnB1c2goewogICAgICAgICAgcmVmOiBleHRDZi5yZWYsCiAgICAgICAgICBydWxlczogW2V4dFJ1bGVdCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0pOyAvLyBuZWVkIHRvIGNvcGUgd2l0aCBydWxlcyBpbiBleHRNb2RlbCB0aGF0IGRvbid0IGV4aXN0IGluIG1vZGVsCgogIHJldHVybiBtb2RlbDsKfTsKCnZhciBXb3JrU2hlZXRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhXb3JrU2hlZXRYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3Jl
YXRlU3VwZXIoV29ya1NoZWV0WGZvcm0pOwoKICBmdW5jdGlvbiBXb3JrU2hlZXRYZm9ybShvcHRpb25zKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdvcmtTaGVldFhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwoKICAgIHZhciBfcmVmID0gb3B0aW9ucyB8fCB7fSwKICAgICAgICBtYXhSb3dzID0gX3JlZi5tYXhSb3dzLAogICAgICAgIG1heENvbHMgPSBfcmVmLm1heENvbHM7CgogICAgX3RoaXMubWFwID0gewogICAgICBzaGVldFByOiBuZXcgU2hlZXRQcm9wZXJ0
aWVzWGZvcm0oKSwKICAgICAgZGltZW5zaW9uOiBuZXcgRGltZW5zaW9uWGZvcm0oKSwKICAgICAgc2hlZXRWaWV3czogbmV3IExpc3RYZm9ybSh7CiAgICAgICAgdGFnOiAnc2hlZXRWaWV3cycsCiAgICAgICAgY291bnQ6IGZhbHNlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBTaGVldFZpZXdYZm9ybSgpCiAgICAgIH0pLAogICAgICBzaGVldEZvcm1hdFByOiBuZXcgU2hlZXRGb3JtYXRQcm9wZXJ0aWVzWGZvcm0oKSwKICAgICAgY29sczogbmV3IExpc3RYZm9ybSh7CiAgICAgICAgdGFnOiAnY29scycsCiAgICAgICAgY291
bnQ6IGZhbHNlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBDb2xYZm9ybSgpCiAgICAgIH0pLAogICAgICBzaGVldERhdGE6IG5ldyBMaXN0WGZvcm0oewogICAgICAgIHRhZzogJ3NoZWV0RGF0YScsCiAgICAgICAgY291bnQ6IGZhbHNlLAogICAgICAgIGVtcHR5OiB0cnVlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBSb3dYZm9ybSh7CiAgICAgICAgICBtYXhJdGVtczogbWF4Q29scwogICAgICAgIH0pLAogICAgICAgIG1heEl0ZW1zOiBtYXhSb3dzCiAgICAgIH0pLAogICAgICBhdXRvRmlsdGVyOiBuZXcgQXV0b0ZpbHRl
clhmb3JtKCksCiAgICAgIG1lcmdlQ2VsbHM6IG5ldyBMaXN0WGZvcm0oewogICAgICAgIHRhZzogJ21lcmdlQ2VsbHMnLAogICAgICAgIGNvdW50OiB0cnVlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBNZXJnZUNlbGxYZm9ybSgpCiAgICAgIH0pLAogICAgICByb3dCcmVha3M6IG5ldyBSb3dCcmVha3NYZm9ybSgpLAogICAgICBoeXBlcmxpbmtzOiBuZXcgTGlzdFhmb3JtKHsKICAgICAgICB0YWc6ICdoeXBlcmxpbmtzJywKICAgICAgICBjb3VudDogZmFsc2UsCiAgICAgICAgY2hpbGRYZm9ybTogbmV3IEh5cGVybGlua1hm
b3JtKCkKICAgICAgfSksCiAgICAgIHBhZ2VNYXJnaW5zOiBuZXcgUGFnZU1hcmdpbnNYZm9ybSgpLAogICAgICBkYXRhVmFsaWRhdGlvbnM6IG5ldyBEYXRhVmFsaWRhdGlvbnNYZm9ybSgpLAogICAgICBwYWdlU2V0dXA6IG5ldyBQYWdlU2V0dXBYZm9ybSgpLAogICAgICBoZWFkZXJGb290ZXI6IG5ldyBIZWFkZXJGb290ZXJYZm9ybSgpLAogICAgICBwcmludE9wdGlvbnM6IG5ldyBQcmludE9wdGlvbnNYZm9ybSgpLAogICAgICBwaWN0dXJlOiBuZXcgUGljdHVyZVhmb3JtKCksCiAgICAgIGRyYXdpbmc6IG5ldyBEcmF3aW5n
WGZvcm0oKSwKICAgICAgc2hlZXRQcm90ZWN0aW9uOiBuZXcgU2hlZXRQcm90ZWN0aW9uWGZvcm0oKSwKICAgICAgdGFibGVQYXJ0czogbmV3IExpc3RYZm9ybSh7CiAgICAgICAgdGFnOiAndGFibGVQYXJ0cycsCiAgICAgICAgY291bnQ6IHRydWUsCiAgICAgICAgY2hpbGRYZm9ybTogbmV3IFRhYmxlUGFydFhmb3JtKCkKICAgICAgfSksCiAgICAgIGNvbmRpdGlvbmFsRm9ybWF0dGluZzogbmV3IENvbmRpdGlvbmFsRm9ybWF0dGluZ3NYZm9ybSgpLAogICAgICBleHRMc3Q6IG5ldyBFeHRMaXN0WGZvcm0oKQogICAgfTsKICAg
IHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhXb3JrU2hlZXRYZm9ybSwgW3sKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBvcHRpb25zLm1lcmdlcyA9IG5ldyBNZXJnZXMoKTsKICAgICAgbW9kZWwuaHlwZXJsaW5rcyA9IG9wdGlvbnMuaHlwZXJsaW5rcyA9IFtdOwogICAgICBtb2RlbC5jb21tZW50cyA9IG9wdGlvbnMuY29tbWVudHMgPSBbXTsKICAgICAgb3B0aW9ucy5mb3JtdWxh
ZSA9IHt9OwogICAgICBvcHRpb25zLnNpRm9ybXVsYWUgPSAwOwogICAgICB0aGlzLm1hcC5jb2xzLnByZXBhcmUobW9kZWwuY29scywgb3B0aW9ucyk7CiAgICAgIHRoaXMubWFwLnNoZWV0RGF0YS5wcmVwYXJlKG1vZGVsLnJvd3MsIG9wdGlvbnMpOwogICAgICB0aGlzLm1hcC5jb25kaXRpb25hbEZvcm1hdHRpbmcucHJlcGFyZShtb2RlbC5jb25kaXRpb25hbEZvcm1hdHRpbmdzLCBvcHRpb25zKTsKICAgICAgbW9kZWwubWVyZ2VDZWxscyA9IG9wdGlvbnMubWVyZ2VzLm1lcmdlQ2VsbHM7IC8vIHByZXBhcmUgcmVsYXRpb25z
aGlwcwoKICAgICAgdmFyIHJlbHMgPSBtb2RlbC5yZWxzID0gW107CgogICAgICBmdW5jdGlvbiBuZXh0UmlkKHIpIHsKICAgICAgICByZXR1cm4gInJJZCIuY29uY2F0KHIubGVuZ3RoICsgMSk7CiAgICAgIH0KCiAgICAgIG1vZGVsLmh5cGVybGlua3MuZm9yRWFjaChmdW5jdGlvbiAoaHlwZXJsaW5rKSB7CiAgICAgICAgdmFyIHJJZCA9IG5leHRSaWQocmVscyk7CiAgICAgICAgaHlwZXJsaW5rLnJJZCA9IHJJZDsKICAgICAgICByZWxzLnB1c2goewogICAgICAgICAgSWQ6IHJJZCwKICAgICAgICAgIFR5cGU6IFJlbFR5cGUu
SHlwZXJsaW5rLAogICAgICAgICAgVGFyZ2V0OiBoeXBlcmxpbmsudGFyZ2V0LAogICAgICAgICAgVGFyZ2V0TW9kZTogJ0V4dGVybmFsJwogICAgICAgIH0pOwogICAgICB9KTsgLy8gcHJlcGFyZSBjb21tZW50IHJlbGF0aW9uc2hpcHMKCiAgICAgIGlmIChtb2RlbC5jb21tZW50cy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIGNvbW1lbnQgPSB7CiAgICAgICAgICBJZDogbmV4dFJpZChyZWxzKSwKICAgICAgICAgIFR5cGU6IFJlbFR5cGUuQ29tbWVudHMsCiAgICAgICAgICBUYXJnZXQ6ICIuLi9jb21tZW50cyIuY29uY2F0
KG1vZGVsLmlkLCAiLnhtbCIpCiAgICAgICAgfTsKICAgICAgICByZWxzLnB1c2goY29tbWVudCk7CiAgICAgICAgdmFyIHZtbERyYXdpbmcgPSB7CiAgICAgICAgICBJZDogbmV4dFJpZChyZWxzKSwKICAgICAgICAgIFR5cGU6IFJlbFR5cGUuVm1sRHJhd2luZywKICAgICAgICAgIFRhcmdldDogIi4uL2RyYXdpbmdzL3ZtbERyYXdpbmciLmNvbmNhdChtb2RlbC5pZCwgIi52bWwiKQogICAgICAgIH07CiAgICAgICAgcmVscy5wdXNoKHZtbERyYXdpbmcpOwogICAgICAgIG1vZGVsLmNvbW1lbnRzLmZvckVhY2goZnVuY3Rpb24g
KGl0ZW0pIHsKICAgICAgICAgIGl0ZW0ucmVmQWRkcmVzcyA9IGNvbENhY2hlLmRlY29kZUFkZHJlc3MoaXRlbS5yZWYpOwogICAgICAgIH0pOwogICAgICAgIG9wdGlvbnMuY29tbWVudFJlZnMucHVzaCh7CiAgICAgICAgICBjb21tZW50TmFtZTogImNvbW1lbnRzIi5jb25jYXQobW9kZWwuaWQpLAogICAgICAgICAgdm1sRHJhd2luZzogInZtbERyYXdpbmciLmNvbmNhdChtb2RlbC5pZCkKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdmFyIGRyYXdpbmdSZWxzSGFzaCA9IFtdOwogICAgICB2YXIgYm9va0ltYWdlOwogICAg
ICBtb2RlbC5tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChtZWRpdW0pIHsKICAgICAgICBpZiAobWVkaXVtLnR5cGUgPT09ICdiYWNrZ3JvdW5kJykgewogICAgICAgICAgdmFyIHJJZCA9IG5leHRSaWQocmVscyk7CiAgICAgICAgICBib29rSW1hZ2UgPSBvcHRpb25zLm1lZGlhW21lZGl1bS5pbWFnZUlkXTsKICAgICAgICAgIHJlbHMucHVzaCh7CiAgICAgICAgICAgIElkOiBySWQsCiAgICAgICAgICAgIFR5cGU6IFJlbFR5cGUuSW1hZ2UsCiAgICAgICAgICAgIFRhcmdldDogIi4uL21lZGlhLyIuY29uY2F0KGJvb2tJbWFnZS5u
YW1lLCAiLiIpLmNvbmNhdChib29rSW1hZ2UuZXh0ZW5zaW9uKQogICAgICAgICAgfSk7CiAgICAgICAgICBtb2RlbC5iYWNrZ3JvdW5kID0gewogICAgICAgICAgICBySWQ6IHJJZAogICAgICAgICAgfTsKICAgICAgICAgIG1vZGVsLmltYWdlID0gb3B0aW9ucy5tZWRpYVttZWRpdW0uaW1hZ2VJZF07CiAgICAgICAgfSBlbHNlIGlmIChtZWRpdW0udHlwZSA9PT0gJ2ltYWdlJykgewogICAgICAgICAgdmFyIGRyYXdpbmcgPSBtb2RlbC5kcmF3aW5nOwogICAgICAgICAgYm9va0ltYWdlID0gb3B0aW9ucy5tZWRpYVttZWRpdW0u
aW1hZ2VJZF07CgogICAgICAgICAgaWYgKCFkcmF3aW5nKSB7CiAgICAgICAgICAgIGRyYXdpbmcgPSBtb2RlbC5kcmF3aW5nID0gewogICAgICAgICAgICAgIHJJZDogbmV4dFJpZChyZWxzKSwKICAgICAgICAgICAgICBuYW1lOiAiZHJhd2luZyIuY29uY2F0KCsrb3B0aW9ucy5kcmF3aW5nc0NvdW50KSwKICAgICAgICAgICAgICBhbmNob3JzOiBbXSwKICAgICAgICAgICAgICByZWxzOiBbXQogICAgICAgICAgICB9OwogICAgICAgICAgICBvcHRpb25zLmRyYXdpbmdzLnB1c2goZHJhd2luZyk7CiAgICAgICAgICAgIHJlbHMu
cHVzaCh7CiAgICAgICAgICAgICAgSWQ6IGRyYXdpbmcucklkLAogICAgICAgICAgICAgIFR5cGU6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2RyYXdpbmcnLAogICAgICAgICAgICAgIFRhcmdldDogIi4uL2RyYXdpbmdzLyIuY29uY2F0KGRyYXdpbmcubmFtZSwgIi54bWwiKQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgcklkSW1hZ2UgPSBfdGhpczIucHJlSW1hZ2VJZCA9PT0gbWVkaXVtLmltYWdlSWQgPyBkcmF3
aW5nUmVsc0hhc2hbbWVkaXVtLmltYWdlSWRdIDogZHJhd2luZ1JlbHNIYXNoW2RyYXdpbmcucmVscy5sZW5ndGhdOwoKICAgICAgICAgIGlmICghcklkSW1hZ2UpIHsKICAgICAgICAgICAgcklkSW1hZ2UgPSBuZXh0UmlkKGRyYXdpbmcucmVscyk7CiAgICAgICAgICAgIGRyYXdpbmdSZWxzSGFzaFtkcmF3aW5nLnJlbHMubGVuZ3RoXSA9IHJJZEltYWdlOwogICAgICAgICAgICBkcmF3aW5nLnJlbHMucHVzaCh7CiAgICAgICAgICAgICAgSWQ6IHJJZEltYWdlLAogICAgICAgICAgICAgIFR5cGU6ICdodHRwOi8vc2NoZW1hcy5v
cGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2ltYWdlJywKICAgICAgICAgICAgICBUYXJnZXQ6ICIuLi9tZWRpYS8iLmNvbmNhdChib29rSW1hZ2UubmFtZSwgIi4iKS5jb25jYXQoYm9va0ltYWdlLmV4dGVuc2lvbikKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGFuY2hvciA9IHsKICAgICAgICAgICAgcGljdHVyZTogewogICAgICAgICAgICAgIHJJZDogcklkSW1hZ2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmFuZ2U6IG1lZGl1bS5yYW5n
ZQogICAgICAgICAgfTsKCiAgICAgICAgICBpZiAobWVkaXVtLmh5cGVybGlua3MgJiYgbWVkaXVtLmh5cGVybGlua3MuaHlwZXJsaW5rKSB7CiAgICAgICAgICAgIHZhciBySWRIeXBlckxpbmsgPSBuZXh0UmlkKGRyYXdpbmcucmVscyk7CiAgICAgICAgICAgIGRyYXdpbmdSZWxzSGFzaFtkcmF3aW5nLnJlbHMubGVuZ3RoXSA9IHJJZEh5cGVyTGluazsKICAgICAgICAgICAgYW5jaG9yLnBpY3R1cmUuaHlwZXJsaW5rcyA9IHsKICAgICAgICAgICAgICB0b29sdGlwOiBtZWRpdW0uaHlwZXJsaW5rcy50b29sdGlwLAogICAgICAg
ICAgICAgIHJJZDogcklkSHlwZXJMaW5rCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGRyYXdpbmcucmVscy5wdXNoKHsKICAgICAgICAgICAgICBJZDogcklkSHlwZXJMaW5rLAogICAgICAgICAgICAgIFR5cGU6IFJlbFR5cGUuSHlwZXJsaW5rLAogICAgICAgICAgICAgIFRhcmdldDogbWVkaXVtLmh5cGVybGlua3MuaHlwZXJsaW5rLAogICAgICAgICAgICAgIFRhcmdldE1vZGU6ICdFeHRlcm5hbCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXMyLnByZUltYWdlSWQgPSBtZWRpdW0uaW1h
Z2VJZDsKICAgICAgICAgIGRyYXdpbmcuYW5jaG9ycy5wdXNoKGFuY2hvcik7CiAgICAgICAgfQogICAgICB9KTsgLy8gcHJlcGFyZSB0YWJsZXMKCiAgICAgIG1vZGVsLnRhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkgewogICAgICAgIC8vIHJlbGF0aW9uc2hpcHMKICAgICAgICB2YXIgcklkID0gbmV4dFJpZChyZWxzKTsKICAgICAgICB0YWJsZS5ySWQgPSBySWQ7CiAgICAgICAgcmVscy5wdXNoKHsKICAgICAgICAgIElkOiBySWQsCiAgICAgICAgICBUeXBlOiBSZWxUeXBlLlRhYmxlLAogICAgICAgICAgVGFyZ2V0
OiAiLi4vdGFibGVzLyIuY29uY2F0KHRhYmxlLnRhcmdldCkKICAgICAgICB9KTsgLy8gZHluYW1pYyBzdHlsZXMKCiAgICAgICAgdGFibGUuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHsKICAgICAgICAgIHZhciBzdHlsZSA9IGNvbHVtbi5zdHlsZTsKCiAgICAgICAgICBpZiAoc3R5bGUpIHsKICAgICAgICAgICAgY29sdW1uLmR4ZklkID0gb3B0aW9ucy5zdHlsZXMuYWRkRHhmU3R5bGUoc3R5bGUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsgLy8gcHJlcGFyZSBleHQgaXRlbXMKCiAgICAg
IHRoaXMubWFwLmV4dExzdC5wcmVwYXJlKG1vZGVsLCBvcHRpb25zKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuWG1sKFhtbFN0cmVhbS5TdGREb2NBdHRyaWJ1dGVzKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCd3b3Jrc2hlZXQnLCBXb3JrU2hlZXRYZm9ybS5XT1JLU0hFRVRfQVRUUklCVVRFUyk7CiAgICAgIHZhciBzaGVldEZvcm1hdFByb3BlcnRpZXNNb2RlbCA9IG1vZGVsLnByb3Bl
cnRpZXMgPyB7CiAgICAgICAgZGVmYXVsdFJvd0hlaWdodDogbW9kZWwucHJvcGVydGllcy5kZWZhdWx0Um93SGVpZ2h0LAogICAgICAgIGR5RGVzY2VudDogbW9kZWwucHJvcGVydGllcy5keURlc2NlbnQsCiAgICAgICAgb3V0bGluZUxldmVsQ29sOiBtb2RlbC5wcm9wZXJ0aWVzLm91dGxpbmVMZXZlbENvbCwKICAgICAgICBvdXRsaW5lTGV2ZWxSb3c6IG1vZGVsLnByb3BlcnRpZXMub3V0bGluZUxldmVsUm93CiAgICAgIH0gOiB1bmRlZmluZWQ7CgogICAgICBpZiAobW9kZWwucHJvcGVydGllcyAmJiBtb2RlbC5wcm9wZXJ0
aWVzLmRlZmF1bHRDb2xXaWR0aCkgewogICAgICAgIHNoZWV0Rm9ybWF0UHJvcGVydGllc01vZGVsLmRlZmF1bHRDb2xXaWR0aCA9IG1vZGVsLnByb3BlcnRpZXMuZGVmYXVsdENvbFdpZHRoOwogICAgICB9CgogICAgICB2YXIgc2hlZXRQcm9wZXJ0aWVzTW9kZWwgPSB7CiAgICAgICAgb3V0bGluZVByb3BlcnRpZXM6IG1vZGVsLnByb3BlcnRpZXMgJiYgbW9kZWwucHJvcGVydGllcy5vdXRsaW5lUHJvcGVydGllcywKICAgICAgICB0YWJDb2xvcjogbW9kZWwucHJvcGVydGllcyAmJiBtb2RlbC5wcm9wZXJ0aWVzLnRhYkNvbG9y
LAogICAgICAgIHBhZ2VTZXR1cDogbW9kZWwucGFnZVNldHVwICYmIG1vZGVsLnBhZ2VTZXR1cC5maXRUb1BhZ2UgPyB7CiAgICAgICAgICBmaXRUb1BhZ2U6IG1vZGVsLnBhZ2VTZXR1cC5maXRUb1BhZ2UKICAgICAgICB9IDogdW5kZWZpbmVkCiAgICAgIH07CiAgICAgIHZhciBwYWdlTWFyZ2luc01vZGVsID0gbW9kZWwucGFnZVNldHVwICYmIG1vZGVsLnBhZ2VTZXR1cC5tYXJnaW5zOwogICAgICB2YXIgcHJpbnRPcHRpb25zTW9kZWwgPSB7CiAgICAgICAgc2hvd1Jvd0NvbEhlYWRlcnM6IG1vZGVsLnBhZ2VTZXR1cCAmJiBt
b2RlbC5wYWdlU2V0dXAuc2hvd1Jvd0NvbEhlYWRlcnMsCiAgICAgICAgc2hvd0dyaWRMaW5lczogbW9kZWwucGFnZVNldHVwICYmIG1vZGVsLnBhZ2VTZXR1cC5zaG93R3JpZExpbmVzLAogICAgICAgIGhvcml6b250YWxDZW50ZXJlZDogbW9kZWwucGFnZVNldHVwICYmIG1vZGVsLnBhZ2VTZXR1cC5ob3Jpem9udGFsQ2VudGVyZWQsCiAgICAgICAgdmVydGljYWxDZW50ZXJlZDogbW9kZWwucGFnZVNldHVwICYmIG1vZGVsLnBhZ2VTZXR1cC52ZXJ0aWNhbENlbnRlcmVkCiAgICAgIH07CiAgICAgIHZhciBzaGVldFByb3RlY3Rp
b25Nb2RlbCA9IG1vZGVsLnNoZWV0UHJvdGVjdGlvbjsKICAgICAgdGhpcy5tYXAuc2hlZXRQci5yZW5kZXIoeG1sU3RyZWFtLCBzaGVldFByb3BlcnRpZXNNb2RlbCk7CiAgICAgIHRoaXMubWFwLmRpbWVuc2lvbi5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5kaW1lbnNpb25zKTsKICAgICAgdGhpcy5tYXAuc2hlZXRWaWV3cy5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC52aWV3cyk7CiAgICAgIHRoaXMubWFwLnNoZWV0Rm9ybWF0UHIucmVuZGVyKHhtbFN0cmVhbSwgc2hlZXRGb3JtYXRQcm9wZXJ0aWVzTW9kZWwpOwogICAgICB0
aGlzLm1hcC5jb2xzLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNvbHMpOwogICAgICB0aGlzLm1hcC5zaGVldERhdGEucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwucm93cyk7CiAgICAgIHRoaXMubWFwLnNoZWV0UHJvdGVjdGlvbi5yZW5kZXIoeG1sU3RyZWFtLCBzaGVldFByb3RlY3Rpb25Nb2RlbCk7IC8vIE5vdGU6IG11c3QgYmUgYWZ0ZXIgc2hlZXREYXRhIGFuZCBiZWZvcmUgYXV0b0ZpbHRlcgoKICAgICAgdGhpcy5tYXAuYXV0b0ZpbHRlci5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5hdXRvRmlsdGVyKTsKICAgICAgdGhp
cy5tYXAubWVyZ2VDZWxscy5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5tZXJnZUNlbGxzKTsKICAgICAgdGhpcy5tYXAuY29uZGl0aW9uYWxGb3JtYXR0aW5nLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNvbmRpdGlvbmFsRm9ybWF0dGluZ3MpOyAvLyBOb3RlOiBtdXN0IGJlIGJlZm9yZSBkYXRhVmFsaWRhdGlvbnMKCiAgICAgIHRoaXMubWFwLmRhdGFWYWxpZGF0aW9ucy5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5kYXRhVmFsaWRhdGlvbnMpOyAvLyBGb3Igc29tZSByZWFzb24gaHlwZXJsaW5rcyBoYXZlIHRvIGJlIGFmdGVy
IHRoZSBkYXRhIHZhbGlkYXRpb25zCgogICAgICB0aGlzLm1hcC5oeXBlcmxpbmtzLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmh5cGVybGlua3MpOwogICAgICB0aGlzLm1hcC5wcmludE9wdGlvbnMucmVuZGVyKHhtbFN0cmVhbSwgcHJpbnRPcHRpb25zTW9kZWwpOyAvLyBOb3RlOiBtdXN0IGJlIGJlZm9yZSBwYWdlTWFyZ2lucwoKICAgICAgdGhpcy5tYXAucGFnZU1hcmdpbnMucmVuZGVyKHhtbFN0cmVhbSwgcGFnZU1hcmdpbnNNb2RlbCk7CiAgICAgIHRoaXMubWFwLnBhZ2VTZXR1cC5yZW5kZXIoeG1sU3RyZWFtLCBtb2Rl
bC5wYWdlU2V0dXApOwogICAgICB0aGlzLm1hcC5oZWFkZXJGb290ZXIucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuaGVhZGVyRm9vdGVyKTsKICAgICAgdGhpcy5tYXAucm93QnJlYWtzLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLnJvd0JyZWFrcyk7CiAgICAgIHRoaXMubWFwLmRyYXdpbmcucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuZHJhd2luZyk7IC8vIE5vdGU6IG11c3QgYmUgYWZ0ZXIgcm93QnJlYWtzCgogICAgICB0aGlzLm1hcC5waWN0dXJlLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmJhY2tncm91bmQpOyAvLyBOb3Rl
OiBtdXN0IGJlIGFmdGVyIGRyYXdpbmcKCiAgICAgIHRoaXMubWFwLnRhYmxlUGFydHMucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwudGFibGVzKTsKICAgICAgdGhpcy5tYXAuZXh0THN0LnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKCiAgICAgIGlmIChtb2RlbC5yZWxzKSB7CiAgICAgICAgLy8gYWRkIGEgPGxlZ2FjeURyYXdpbmcgLz4gbm9kZSBmb3IgZWFjaCBjb21tZW50CiAgICAgICAgbW9kZWwucmVscy5mb3JFYWNoKGZ1bmN0aW9uIChyZWwpIHsKICAgICAgICAgIGlmIChyZWwuVHlwZSA9PT0gUmVsVHlwZS5WbWxEcmF3
aW5nKSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgnbGVnYWN5RHJhd2luZycsIHsKICAgICAgICAgICAgICAncjppZCc6IHJlbC5JZAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwog
ICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBpZiAobm9kZS5uYW1lID09PSAnd29ya3NoZWV0JykgewogICAgICAgIF8uZWFjaCh0aGlzLm1hcCwgZnVuY3Rpb24gKHhmb3JtKSB7CiAgICAgICAgICB4Zm9ybS5yZXNldCgpOwogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwoKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICB9CgogICAgICBy
ZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSkpIHsK
ICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgJ3dvcmtzaGVldCc6CiAgICAgICAgICB7CiAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gdGhpcy5tYXAuc2hlZXRGb3JtYXRQci5tb2RlbCB8fCB7fTsKCiAgICAgICAgICAgIGlmICh0aGlzLm1hcC5zaGVldFByLm1vZGVsICYmIHRoaXMubWFwLnNoZWV0UHIubW9kZWwudGFiQ29sb3IpIHsKICAgICAgICAgICAgICBwcm9wZXJ0
aWVzLnRhYkNvbG9yID0gdGhpcy5tYXAuc2hlZXRQci5tb2RlbC50YWJDb2xvcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXMubWFwLnNoZWV0UHIubW9kZWwgJiYgdGhpcy5tYXAuc2hlZXRQci5tb2RlbC5vdXRsaW5lUHJvcGVydGllcykgewogICAgICAgICAgICAgIHByb3BlcnRpZXMub3V0bGluZVByb3BlcnRpZXMgPSB0aGlzLm1hcC5zaGVldFByLm1vZGVsLm91dGxpbmVQcm9wZXJ0aWVzOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgc2hlZXRQcm9wZXJ0aWVzID0gewogICAgICAgICAgICAg
IGZpdFRvUGFnZTogdGhpcy5tYXAuc2hlZXRQci5tb2RlbCAmJiB0aGlzLm1hcC5zaGVldFByLm1vZGVsLnBhZ2VTZXR1cCAmJiB0aGlzLm1hcC5zaGVldFByLm1vZGVsLnBhZ2VTZXR1cC5maXRUb1BhZ2UgfHwgZmFsc2UsCiAgICAgICAgICAgICAgbWFyZ2luczogdGhpcy5tYXAucGFnZU1hcmdpbnMubW9kZWwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIHBhZ2VTZXR1cCA9IE9iamVjdC5hc3NpZ24oc2hlZXRQcm9wZXJ0aWVzLCB0aGlzLm1hcC5wYWdlU2V0dXAubW9kZWwsIHRoaXMubWFwLnByaW50T3B0aW9ucy5t
b2RlbCk7CiAgICAgICAgICAgIHZhciBjb25kaXRpb25hbEZvcm1hdHRpbmdzID0gbWVyZ2VDb25kaXRpb25hbEZvcm1hdHRpbmdzKHRoaXMubWFwLmNvbmRpdGlvbmFsRm9ybWF0dGluZy5tb2RlbCwgdGhpcy5tYXAuZXh0THN0Lm1vZGVsICYmIHRoaXMubWFwLmV4dExzdC5tb2RlbFsneDE0OmNvbmRpdGlvbmFsRm9ybWF0dGluZ3MnXSk7CiAgICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgICAgZGltZW5zaW9uczogdGhpcy5tYXAuZGltZW5zaW9uLm1vZGVsLAogICAgICAgICAgICAgIGNvbHM6IHRoaXMubWFw
LmNvbHMubW9kZWwsCiAgICAgICAgICAgICAgcm93czogdGhpcy5tYXAuc2hlZXREYXRhLm1vZGVsLAogICAgICAgICAgICAgIG1lcmdlQ2VsbHM6IHRoaXMubWFwLm1lcmdlQ2VsbHMubW9kZWwsCiAgICAgICAgICAgICAgaHlwZXJsaW5rczogdGhpcy5tYXAuaHlwZXJsaW5rcy5tb2RlbCwKICAgICAgICAgICAgICBkYXRhVmFsaWRhdGlvbnM6IHRoaXMubWFwLmRhdGFWYWxpZGF0aW9ucy5tb2RlbCwKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLAogICAgICAgICAgICAgIHZpZXdzOiB0aGlzLm1hcC5zaGVl
dFZpZXdzLm1vZGVsLAogICAgICAgICAgICAgIHBhZ2VTZXR1cDogcGFnZVNldHVwLAogICAgICAgICAgICAgIGhlYWRlckZvb3RlcjogdGhpcy5tYXAuaGVhZGVyRm9vdGVyLm1vZGVsLAogICAgICAgICAgICAgIGJhY2tncm91bmQ6IHRoaXMubWFwLnBpY3R1cmUubW9kZWwsCiAgICAgICAgICAgICAgZHJhd2luZzogdGhpcy5tYXAuZHJhd2luZy5tb2RlbCwKICAgICAgICAgICAgICB0YWJsZXM6IHRoaXMubWFwLnRhYmxlUGFydHMubW9kZWwsCiAgICAgICAgICAgICAgY29uZGl0aW9uYWxGb3JtYXR0aW5nczogY29uZGl0aW9u
YWxGb3JtYXR0aW5ncwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgaWYgKHRoaXMubWFwLmF1dG9GaWx0ZXIubW9kZWwpIHsKICAgICAgICAgICAgICB0aGlzLm1vZGVsLmF1dG9GaWx0ZXIgPSB0aGlzLm1hcC5hdXRvRmlsdGVyLm1vZGVsOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodGhpcy5tYXAuc2hlZXRQcm90ZWN0aW9uLm1vZGVsKSB7CiAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zaGVldFByb3RlY3Rpb24gPSB0aGlzLm1hcC5zaGVldFByb3RlY3Rpb24ubW9kZWw7CiAgICAgICAgICAgIH0KCiAgICAg
ICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIC8vIG5vdCBxdWl0ZSBzdXJlIGhvdyB3ZSBnZXQgaGVyZSEKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVjb25jaWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWNvbmNpbGUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgLy8gb3B0aW9ucy5tZXJnZXMgPSBuZXcgTWVyZ2VzKCk7CiAgICAgIC8vIG9wdGlvbnMubWVyZ2VzLnJlY29uY2lsZShtb2RlbC5tZXJnZUNlbGxz
LCBtb2RlbC5yb3dzKTsKICAgICAgdmFyIHJlbHMgPSAobW9kZWwucmVsYXRpb25zaGlwcyB8fCBbXSkucmVkdWNlKGZ1bmN0aW9uIChoLCByZWwpIHsKICAgICAgICBoW3JlbC5JZF0gPSByZWw7CgogICAgICAgIGlmIChyZWwuVHlwZSA9PT0gUmVsVHlwZS5Db21tZW50cykgewogICAgICAgICAgbW9kZWwuY29tbWVudHMgPSBvcHRpb25zLmNvbW1lbnRzW3JlbC5UYXJnZXRdLmNvbW1lbnRzOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlbC5UeXBlID09PSBSZWxUeXBlLlZtbERyYXdpbmcgJiYgbW9kZWwuY29tbWVudHMgJiYg
bW9kZWwuY29tbWVudHMubGVuZ3RoKSB7CiAgICAgICAgICB2YXIgdm1sQ29tbWVudCA9IG9wdGlvbnMudm1sRHJhd2luZ3NbcmVsLlRhcmdldF0uY29tbWVudHM7CiAgICAgICAgICBtb2RlbC5jb21tZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjb21tZW50LCBpbmRleCkgewogICAgICAgICAgICBjb21tZW50Lm5vdGUgPSBPYmplY3QuYXNzaWduKHt9LCBjb21tZW50Lm5vdGUsIHZtbENvbW1lbnRbaW5kZXhdKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGg7CiAgICAgIH0sIHt9KTsKICAgICAgb3B0
aW9ucy5jb21tZW50c01hcCA9IChtb2RlbC5jb21tZW50cyB8fCBbXSkucmVkdWNlKGZ1bmN0aW9uIChoLCBjb21tZW50KSB7CiAgICAgICAgaWYgKGNvbW1lbnQucmVmKSB7CiAgICAgICAgICBoW2NvbW1lbnQucmVmXSA9IGNvbW1lbnQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gaDsKICAgICAgfSwge30pOwogICAgICBvcHRpb25zLmh5cGVybGlua01hcCA9IChtb2RlbC5oeXBlcmxpbmtzIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKGgsIGh5cGVybGluaykgewogICAgICAgIGlmIChoeXBlcmxpbmsucklkKSB7CiAgICAg
ICAgICBoW2h5cGVybGluay5hZGRyZXNzXSA9IHJlbHNbaHlwZXJsaW5rLnJJZF0uVGFyZ2V0OwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGg7CiAgICAgIH0sIHt9KTsKICAgICAgb3B0aW9ucy5mb3JtdWxhZSA9IHt9OyAvLyBjb21wYWN0IHRoZSByb3dzIGFuZCBjZWxscwoKICAgICAgbW9kZWwucm93cyA9IG1vZGVsLnJvd3MgJiYgbW9kZWwucm93cy5maWx0ZXIoQm9vbGVhbikgfHwgW107CiAgICAgIG1vZGVsLnJvd3MuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7CiAgICAgICAgcm93LmNlbGxzID0gcm93LmNlbGxzICYm
IHJvdy5jZWxscy5maWx0ZXIoQm9vbGVhbikgfHwgW107CiAgICAgIH0pOwogICAgICB0aGlzLm1hcC5jb2xzLnJlY29uY2lsZShtb2RlbC5jb2xzLCBvcHRpb25zKTsKICAgICAgdGhpcy5tYXAuc2hlZXREYXRhLnJlY29uY2lsZShtb2RlbC5yb3dzLCBvcHRpb25zKTsKICAgICAgdGhpcy5tYXAuY29uZGl0aW9uYWxGb3JtYXR0aW5nLnJlY29uY2lsZShtb2RlbC5jb25kaXRpb25hbEZvcm1hdHRpbmdzLCBvcHRpb25zKTsKICAgICAgbW9kZWwubWVkaWEgPSBbXTsKCiAgICAgIGlmIChtb2RlbC5kcmF3aW5nKSB7CiAgICAgICAg
dmFyIGRyYXdpbmdSZWwgPSByZWxzW21vZGVsLmRyYXdpbmcucklkXTsKICAgICAgICB2YXIgbWF0Y2ggPSBkcmF3aW5nUmVsLlRhcmdldC5tYXRjaCgvXC9kcmF3aW5nc1wvKFthLXpBLVowLTldKylbLl1bYS16QS1aXXszLDR9JC8pOwoKICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgIHZhciBkcmF3aW5nTmFtZSA9IG1hdGNoWzFdOwogICAgICAgICAgdmFyIGRyYXdpbmcgPSBvcHRpb25zLmRyYXdpbmdzW2RyYXdpbmdOYW1lXTsKICAgICAgICAgIGRyYXdpbmcuYW5jaG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChhbmNob3Ip
IHsKICAgICAgICAgICAgaWYgKGFuY2hvci5tZWRpdW0pIHsKICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSB7CiAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLAogICAgICAgICAgICAgICAgaW1hZ2VJZDogYW5jaG9yLm1lZGl1bS5pbmRleCwKICAgICAgICAgICAgICAgIHJhbmdlOiBhbmNob3IucmFuZ2UsCiAgICAgICAgICAgICAgICBoeXBlcmxpbmtzOiBhbmNob3IucGljdHVyZS5oeXBlcmxpbmtzCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBtb2RlbC5tZWRpYS5wdXNoKGltYWdlKTsKICAgICAgICAgICAg
fQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgYmFja2dyb3VuZFJlbCA9IG1vZGVsLmJhY2tncm91bmQgJiYgcmVsc1ttb2RlbC5iYWNrZ3JvdW5kLnJJZF07CgogICAgICBpZiAoYmFja2dyb3VuZFJlbCkgewogICAgICAgIHZhciB0YXJnZXQgPSBiYWNrZ3JvdW5kUmVsLlRhcmdldC5zcGxpdCgnL21lZGlhLycpWzFdOwogICAgICAgIHZhciBpbWFnZUlkID0gb3B0aW9ucy5tZWRpYUluZGV4ICYmIG9wdGlvbnMubWVkaWFJbmRleFt0YXJnZXRdOwoKICAgICAgICBpZiAoaW1hZ2VJZCAhPT0gdW5k
ZWZpbmVkKSB7CiAgICAgICAgICBtb2RlbC5tZWRpYS5wdXNoKHsKICAgICAgICAgICAgdHlwZTogJ2JhY2tncm91bmQnLAogICAgICAgICAgICBpbWFnZUlkOiBpbWFnZUlkCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIG1vZGVsLnRhYmxlcyA9IChtb2RlbC50YWJsZXMgfHwgW10pLm1hcChmdW5jdGlvbiAodGFibGVQYXJ0KSB7CiAgICAgICAgdmFyIHJlbCA9IHJlbHNbdGFibGVQYXJ0LnJJZF07CiAgICAgICAgcmV0dXJuIG9wdGlvbnMudGFibGVzW3JlbC5UYXJnZXRdOwogICAgICB9KTsKICAgICAg
ZGVsZXRlIG1vZGVsLnJlbGF0aW9uc2hpcHM7CiAgICAgIGRlbGV0ZSBtb2RlbC5oeXBlcmxpbmtzOwogICAgICBkZWxldGUgbW9kZWwuY29tbWVudHM7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gV29ya1NoZWV0WGZvcm07Cn0oQmFzZVhmb3JtKTsKCldvcmtTaGVldFhmb3JtLldPUktTSEVFVF9BVFRSSUJVVEVTID0gewogIHhtbG5zOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3NwcmVhZHNoZWV0bWwvMjAwNi9tYWluJywKICAneG1sbnM6cic6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcv
b2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzJywKICAneG1sbnM6bWMnOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDYnLAogICdtYzpJZ25vcmFibGUnOiAneDE0YWMnLAogICd4bWxuczp4MTRhYyc6ICdodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9zcHJlYWRzaGVldG1sLzIwMDkvOS9hYycKfTsKbW9kdWxlLmV4cG9ydHMgPSBXb3JrU2hlZXRYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy9jb2wtY2FjaGUiOjE5LCIuLi8uLi8uLi91
dGlscy91bmRlci1kYXNoIjoyNSwiLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbSI6MjcsIi4uLy4uL3JlbC10eXBlIjozMCwiLi4vYmFzZS14Zm9ybSI6MzEsIi4uL2xpc3QteGZvcm0iOjcwLCIuL2F1dG8tZmlsdGVyLXhmb3JtIjo3MSwiLi9jZi9jb25kaXRpb25hbC1mb3JtYXR0aW5ncy14Zm9ybSI6ODYsIi4vY29sLXhmb3JtIjo5MSwiLi9kYXRhLXZhbGlkYXRpb25zLXhmb3JtIjo5MiwiLi9kaW1lbnNpb24teGZvcm0iOjkzLCIuL2RyYXdpbmcteGZvcm0iOjk0LCIuL2V4dC1sc3QteGZvcm0iOjk1LCIuL2hlYWRlci1mb290
ZXIteGZvcm0iOjk2LCIuL2h5cGVybGluay14Zm9ybSI6OTcsIi4vbWVyZ2UtY2VsbC14Zm9ybSI6OTgsIi4vbWVyZ2VzIjo5OSwiLi9wYWdlLW1hcmdpbnMteGZvcm0iOjEwMiwiLi9wYWdlLXNldHVwLXhmb3JtIjoxMDQsIi4vcGljdHVyZS14Zm9ybSI6MTA1LCIuL3ByaW50LW9wdGlvbnMteGZvcm0iOjEwNiwiLi9yb3ctYnJlYWtzLXhmb3JtIjoxMDcsIi4vcm93LXhmb3JtIjoxMDgsIi4vc2hlZXQtZm9ybWF0LXByb3BlcnRpZXMteGZvcm0iOjEwOSwiLi9zaGVldC1wcm9wZXJ0aWVzLXhmb3JtIjoxMTAsIi4vc2hlZXQtcHJv
dGVjdGlvbi14Zm9ybSI6MTExLCIuL3NoZWV0LXZpZXcteGZvcm0iOjExMiwiLi90YWJsZS1wYXJ0LXhmb3JtIjoxMTN9XSwxMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBv
Ymo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhy
b3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndy
aXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5j
dGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwg
Y29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2
ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVy
LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7
IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9
PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18g
fHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIEJvb2xlYW5YZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhCb29sZWFuWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEJvb2xlYW5YZm9ybSk7CgogIGZ1bmN0aW9uIEJvb2xlYW5YZm9ybShvcHRpb25zKSB7CiAgICB2YXIgX3RoaXM7CgogICAg
X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJvb2xlYW5YZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLnRhZyA9IG9wdGlvbnMudGFnOwogICAgX3RoaXMuYXR0ciA9IG9wdGlvbnMuYXR0cjsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhCb29sZWFuWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCkgewogICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlz
LnRhZyk7CiAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSB0aGlzLnRhZykgewogICAgICAgIHRoaXMubW9kZWwgPSB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6
IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBCb29sZWFuWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQm9vbGVhblhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sMTE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9m
IFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xh
c3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUg
fHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3Rh
dGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBl
ckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87
IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9y
OyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7
IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29u
c3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3Rv
dHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBEYXRlWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoRGF0ZVhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVT
dXBlcihEYXRlWGZvcm0pOwoKICBmdW5jdGlvbiBEYXRlWGZvcm0ob3B0aW9ucykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRlWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy50YWcgPSBvcHRpb25zLnRhZzsKICAgIF90aGlzLmF0dHIgPSBvcHRpb25zLmF0dHI7CiAgICBfdGhpcy5hdHRycyA9IG9wdGlvbnMuYXR0cnM7CgogICAgX3RoaXMuX2Zvcm1hdCA9IG9wdGlvbnMuZm9ybWF0IHx8IGZ1bmN0aW9uIChkdCkgewogICAgICB0cnkgewogICAg
ICAgIGlmIChOdW1iZXIuaXNOYU4oZHQuZ2V0VGltZSgpKSkgcmV0dXJuICcnOwogICAgICAgIHJldHVybiBkdC50b0lTT1N0cmluZygpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CiAgICB9OwoKICAgIF90aGlzLl9wYXJzZSA9IG9wdGlvbnMucGFyc2UgfHwgZnVuY3Rpb24gKHN0cikgewogICAgICByZXR1cm4gbmV3IERhdGUoc3RyKTsKICAgIH07CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKERhdGVYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2
YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgaWYgKG1vZGVsKSB7CiAgICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnKTsKCiAgICAgICAgaWYgKHRoaXMuYXR0cnMpIHsKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGVzKHRoaXMuYXR0cnMpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuYXR0cikgewogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSh0aGlzLmF0dHIsIHRoaXMuX2Zvcm1hdChtb2RlbCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAg
ICB4bWxTdHJlYW0ud3JpdGVUZXh0KHRoaXMuX2Zvcm1hdChtb2RlbCkpOwogICAgICAgIH0KCiAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSB0aGlzLnRhZykgewogICAgICAgIGlmICh0aGlzLmF0dHIpIHsKICAgICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLl9wYXJzZShub2RlLmF0dHJpYnV0ZXNbdGhpcy5hdHRyXSk7CiAgICAgICAg
fSBlbHNlIHsKICAgICAgICAgIHRoaXMudGV4dCA9IFtdOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKCF0aGlzLmF0dHIpIHsKICAgICAgICB0aGlzLnRleHQucHVzaCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIGlmICghdGhpcy5hdHRyKSB7CiAgICAgICAgdGhpcy5tb2Rl
bCA9IHRoaXMuX3BhcnNlKHRoaXMudGV4dC5qb2luKCcnKSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBEYXRlWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gRGF0ZVhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sMTE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5j
dGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9
CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlw
dG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3Rv
UHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2Jq
ZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19f
ID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRo
aXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikp
IHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIg
fHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0g
T2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBJbnRlZ2VyWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoSW50ZWdlclhmb3JtLCBfQmFzZVhmb3JtKTsKCiAg
dmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihJbnRlZ2VyWGZvcm0pOwoKICBmdW5jdGlvbiBJbnRlZ2VyWGZvcm0ob3B0aW9ucykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnRlZ2VyWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy50YWcgPSBvcHRpb25zLnRhZzsKICAgIF90aGlzLmF0dHIgPSBvcHRpb25zLmF0dHI7CiAgICBfdGhpcy5hdHRycyA9IG9wdGlvbnMuYXR0cnM7IC8vIG9wdGlvbiB0byByZW5kZXIgemVybwoKICAgIF90aGlzLnplcm8g
PSBvcHRpb25zLnplcm87CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoSW50ZWdlclhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICAvLyBpbnQgaXMgZGlmZmVyZW50IHRvIGZsb2F0IGluIHRoYXQgemVybyBpcyBub3QgcmVuZGVyZWQKICAgICAgaWYgKG1vZGVsIHx8IHRoaXMuemVybykgewogICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZyk7CgogICAgICAgIGlmICh0aGlzLmF0dHJzKSB7CiAg
ICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlcyh0aGlzLmF0dHJzKTsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLmF0dHIpIHsKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUodGhpcy5hdHRyLCBtb2RlbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHhtbFN0cmVhbS53cml0ZVRleHQobW9kZWwpOwogICAgICAgIH0KCiAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9w
ZW4obm9kZSkgewogICAgICBpZiAobm9kZS5uYW1lID09PSB0aGlzLnRhZykgewogICAgICAgIGlmICh0aGlzLmF0dHIpIHsKICAgICAgICAgIHRoaXMubW9kZWwgPSBwYXJzZUludChub2RlLmF0dHJpYnV0ZXNbdGhpcy5hdHRyXSwgMTApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnRleHQgPSBbXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJz
ZVRleHQodGV4dCkgewogICAgICBpZiAoIXRoaXMuYXR0cikgewogICAgICAgIHRoaXMudGV4dC5wdXNoKHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgaWYgKCF0aGlzLmF0dHIpIHsKICAgICAgICB0aGlzLm1vZGVsID0gcGFyc2VJbnQodGhpcy50ZXh0LmpvaW4oJycpIHx8IDAsIDEwKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEludGVnZXJYZm9ybTsKfShC
YXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBJbnRlZ2VyWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSwxMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7
IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cg
bmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRh
YmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlv
biBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29u
ZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJl
ZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFw
cGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlm
IChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0g
ImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwg
T2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFN0cmluZ1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFN0cmluZ1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTdHJpbmdYZm9ybSk7CgogIGZ1bmN0aW9uIFN0cmluZ1hmb3JtKG9wdGlvbnMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3ND
YWxsQ2hlY2sodGhpcywgU3RyaW5nWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy50YWcgPSBvcHRpb25zLnRhZzsKICAgIF90aGlzLmF0dHIgPSBvcHRpb25zLmF0dHI7CiAgICBfdGhpcy5hdHRycyA9IG9wdGlvbnMuYXR0cnM7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3RyaW5nWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCAhPT0gdW5kZWZp
bmVkKSB7CiAgICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnKTsKCiAgICAgICAgaWYgKHRoaXMuYXR0cnMpIHsKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGVzKHRoaXMuYXR0cnMpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuYXR0cikgewogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSh0aGlzLmF0dHIsIG1vZGVsKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgeG1sU3RyZWFtLndyaXRlVGV4dChtb2RlbCk7CiAgICAgICAgfQoKICAgICAgICB4bWxTdHJlYW0uY2xvc2VOb2Rl
KCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmIChub2RlLm5hbWUgPT09IHRoaXMudGFnKSB7CiAgICAgICAgaWYgKHRoaXMuYXR0cikgewogICAgICAgICAgdGhpcy5tb2RlbCA9IG5vZGUuYXR0cmlidXRlc1t0aGlzLmF0dHJdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnRleHQgPSBbXTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFs
dWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICghdGhpcy5hdHRyKSB7CiAgICAgICAgdGhpcy50ZXh0LnB1c2godGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICBpZiAoIXRoaXMuYXR0cikgewogICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLnRleHQuam9pbignJyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBTdHJpbmdYZm9ybTsKfShCYXNl
WGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBTdHJpbmdYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDExOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsg
fSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcg
VHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUg
PSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9p
bmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1
cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVj
dENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHko
dGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNl
bGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVu
Y3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmpl
Y3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuL2Jhc2UteGZvcm0nKTsKCnZhciBYbWxTdHJlYW0gPSByZXF1aXJlKCcuLi8uLi91dGlscy94bWwtc3RyZWFtJyk7IC8vIGNvbnN0IG1vZGVsID0gewovLyAgIHRhZzogJ25hbWUnLAovLyAgICQ6IHthdHRyOiAndmFsdWUnfSwKLy8gICBjOiBbCi8vICAgICB7IHRhZzogJ2NoaWxkJyB9Ci8vICAgXSwKLy8gICB0OiAnc29tZSB0ZXh0JwovLyB9OwoKCmZ1bmN0aW9uIGJ1aWxkKHhtbFN0
cmVhbSwgbW9kZWwpIHsKICB4bWxTdHJlYW0ub3Blbk5vZGUobW9kZWwudGFnLCBtb2RlbC4kKTsKCiAgaWYgKG1vZGVsLmMpIHsKICAgIG1vZGVsLmMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgYnVpbGQoeG1sU3RyZWFtLCBjaGlsZCk7CiAgICB9KTsKICB9CgogIGlmIChtb2RlbC50KSB7CiAgICB4bWxTdHJlYW0ud3JpdGVUZXh0KG1vZGVsLnQpOwogIH0KCiAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwp9Cgp2YXIgU3RhdGljWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBf
aW5oZXJpdHMoU3RhdGljWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFN0YXRpY1hmb3JtKTsKCiAgZnVuY3Rpb24gU3RhdGljWGZvcm0obW9kZWwpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7IC8vIFRoaXMgY2xhc3MgaXMgYW4gb3B0aW1pc2F0aW9uIGZvciBzdGF0aWMgKHVuaW1wb3J0YW50IGFuZCB1bmNoYW5naW5nKSB4bWwKICAgIC8vIEl0IGlzIHN0YXRlbGVzcyAt
IGFwYXJ0IGZyb20gaXRzIHN0YXRpYyBtb2RlbCBhbmQgc28gY2FuIGJlIHVzZWQgYXMgYSBzaW5nbGV0b24KICAgIC8vIEJlaW5nIHN0YXRlbGVzcyAtIGl0IHdpbGwgb25seSB0cmFjayBlbnRyeSB0byBhbmQgZXhpdCBmcm9tIGl0J3Mgcm9vdCB4bWwgdGFnIGR1cmluZyBwYXJzaW5nIGFuZCBub3RoaW5nIGVsc2UKICAgIC8vIEtub3duIGlzc3VlczoKICAgIC8vICAgIHNpbmNlIHN0YXRlbGVzcyAtIHBhcnNlT3BlbiBhbHdheXMgcmV0dXJucyB0cnVlLiBQYXJlbnQgeGZvcm0gbXVzdCBrbm93IHdoZW4gdG8gc3RhcnQgdXNp
bmcgdGhpcyB4Zm9ybQogICAgLy8gICAgaWYgdGhlIHJvb3QgdGFnIGlzIHJlY3Vyc2l2ZSwgdGhlIHBhcnNpbmcgd2lsbCBiZWhhdmUgdW5wcmVkaWN0YWJseQoKICAgIF90aGlzLl9tb2RlbCA9IG1vZGVsOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFN0YXRpY1hmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtKSB7CiAgICAgIGlmICghdGhpcy5feG1sKSB7CiAgICAgICAgdmFyIHN0cmVhbSA9IG5ldyBYbWxTdHJlYW0oKTsKICAgICAg
ICBidWlsZChzdHJlYW0sIHRoaXMuX21vZGVsKTsKICAgICAgICB0aGlzLl94bWwgPSBzdHJlYW0ueG1sOwogICAgICB9CgogICAgICB4bWxTdHJlYW0ud3JpdGVYbWwodGhpcy5feG1sKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3BlbigpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAg
dmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMuX21vZGVsLnRhZzoKICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU3RhdGljWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gU3RhdGljWGZvcm07Cgp9LHsiLi4vLi4vdXRpbHMveG1sLXN0cmVhbSI6MjcsIi4vYmFzZS14Zm9ybSI6MzF9XSwxMjA6W2Z1
bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wg
PT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVBy
b3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0K
CmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYm
IHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3Mp
OyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJ
bnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07
IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2Vk
IC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1
Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgVGV4dFhmb3JtID0g
cmVxdWlyZSgnLi90ZXh0LXhmb3JtJyk7Cgp2YXIgUmljaFRleHRYZm9ybSA9IHJlcXVpcmUoJy4vcmljaC10ZXh0LXhmb3JtJyk7Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOyAvLyA8clBoIHNiPSIwIiBlYj0iMSI+Ci8vICAgPHQ+KGl0cyBwcm9ub3VuY2lhdGlvbiBpbiBLQVRBS0FOQSk8L3Q+Ci8vIDwvclBoPgoKCnZhciBQaG9uZXRpY1RleHRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhQaG9uZXRpY1RleHRYZm9ybSwgX0Jhc2VYZm9y
bSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUGhvbmV0aWNUZXh0WGZvcm0pOwoKICBmdW5jdGlvbiBQaG9uZXRpY1RleHRYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGhvbmV0aWNUZXh0WGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgIHI6IG5ldyBSaWNoVGV4dFhmb3JtKCksCiAgICAgIHQ6IG5ldyBUZXh0WGZvcm0oKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhQ
aG9uZXRpY1RleHRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnLCB7CiAgICAgICAgc2I6IG1vZGVsLnNiIHx8IDAsCiAgICAgICAgZWI6IG1vZGVsLmViIHx8IDAKICAgICAgfSk7CgogICAgICBpZiAobW9kZWwgJiYgbW9kZWwuaGFzT3duUHJvcGVydHkoJ3JpY2hUZXh0JykgJiYgbW9kZWwucmljaFRleHQpIHsKICAgICAgICB2YXIgciA9IHRoaXMubWFwLnI7CiAgICAgICAgbW9k
ZWwucmljaFRleHQuZm9yRWFjaChmdW5jdGlvbiAodGV4dCkgewogICAgICAgICAgci5yZW5kZXIoeG1sU3RyZWFtLCB0ZXh0KTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmIChtb2RlbCkgewogICAgICAgIHRoaXMubWFwLnQucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwudGV4dCk7CiAgICAgIH0KCiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIHZhciBuYW1lID0gbm9kZS5uYW1l
OwoKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBpZiAobmFtZSA9PT0gdGhpcy50YWcpIHsKICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgc2I6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5zYiwgMTApLAogICAgICAgICAgZWI6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5lYiwgMTApCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgdGhpcy5wYXJz
ZXIgPSB0aGlzLm1hcFtuYW1lXTsKCiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAi
cGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgICAgIGNhc2UgJ3InOgogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBydCA9IHRoaXMubW9kZWwucmljaFRleHQ7CgogICAgICAgICAgICAgICAgaWYgKCFydCkgewogICAgICAgICAgICAgICAgICBydCA9IHRoaXMubW9kZWwucmljaFRl
eHQgPSBbXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBydC5wdXNoKHRoaXMucGFyc2VyLm1vZGVsKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgJ3QnOgogICAgICAgICAgICAgIHRoaXMubW9kZWwudGV4dCA9IHRoaXMucGFyc2VyLm1vZGVsOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAg
ICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnclBoJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBQaG9uZXRpY1RleHRYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9y
dHMgPSBQaG9uZXRpY1RleHRYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMSwiLi9yaWNoLXRleHQteGZvcm0iOjEyMSwiLi90ZXh0LXhmb3JtIjoxMjR9XSwxMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihv
YmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2Vv
ZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNj
cmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJu
IENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNs
YXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERl
cml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0g
ZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRo
aXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxz
ZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykg
eyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgVGV4dFhmb3JtID0gcmVxdWlyZSgnLi90ZXh0LXhmb3JtJyk7Cgp2YXIgRm9udFhmb3JtID0gcmVxdWlyZSgnLi4vc3R5bGUvZm9udC14Zm9ybScpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsgLy8gPHI+Ci8vICAgPHJQcj4KLy8gICAgIDxzeiB2YWw9IjExIi8+Ci8vICAgICA8Y29sb3IgdGhlbWU9IjEiIHRpbnQ9IjUiLz4KLy8gICAgIDxy
Rm9udCB2YWw9IkNhbGlicmkiLz4KLy8gICAgIDxmYW1pbHkgdmFsPSIyIi8+Ci8vICAgICA8c2NoZW1lIHZhbD0ibWlub3IiLz4KLy8gICA8L3JQcj4KLy8gICA8dCB4bWw6c3BhY2U9InByZXNlcnZlIj4gaXMgPC90PgovLyA8L3I+CgoKdmFyIFJpY2hUZXh0WGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoUmljaFRleHRYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUmljaFRleHRYZm9ybSk7CgogIGZ1bmN0aW9uIFJpY2hUZXh0WGZv
cm0obW9kZWwpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmljaFRleHRYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1vZGVsID0gbW9kZWw7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUmljaFRleHRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgbW9kZWwgPSBtb2RlbCB8fCB0aGlzLm1vZGVsOwogICAgICB4bWxTdHJlYW0u
b3Blbk5vZGUoJ3InKTsKCiAgICAgIGlmIChtb2RlbC5mb250KSB7CiAgICAgICAgdGhpcy5mb250WGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuZm9udCk7CiAgICAgIH0KCiAgICAgIHRoaXMudGV4dFhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLnRleHQpOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNl
ci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSAncic6CiAgICAgICAgICB0aGlzLm1vZGVsID0ge307CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgY2FzZSAndCc6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMudGV4dFhmb3JtOwogICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGNhc2UgJ3JQcic6CiAgICAgICAgICB0aGlz
LnBhcnNlciA9IHRoaXMuZm9udFhmb3JtOwogICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtl
eTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlICdyJzoKICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgY2FzZSAndCc6CiAgICAgICAgICB0aGlzLm1vZGVsLnRleHQgPSB0aGlzLnBhcnNlci5tb2RlbDsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGNhc2UgJ3JQcic6CiAgICAgICAgICB0aGlzLm1vZGVsLmZvbnQgPSB0aGlzLnBh
cnNlci5tb2RlbDsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdyJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0
ZXh0WGZvcm0iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl90ZXh0WGZvcm0gfHwgKHRoaXMuX3RleHRYZm9ybSA9IG5ldyBUZXh0WGZvcm0oKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZm9udFhmb3JtIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fZm9udFhmb3JtIHx8ICh0aGlzLl9mb250WGZvcm0gPSBuZXcgRm9udFhmb3JtKFJpY2hUZXh0WGZvcm0uRk9OVF9PUFRJT05TKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUmljaFRleHRYZm9ybTsK
fShCYXNlWGZvcm0pOwoKUmljaFRleHRYZm9ybS5GT05UX09QVElPTlMgPSB7CiAgdGFnTmFtZTogJ3JQcicsCiAgZm9udE5hbWVUYWc6ICdyRm9udCcKfTsKbW9kdWxlLmV4cG9ydHMgPSBSaWNoVGV4dFhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxLCIuLi9zdHlsZS9mb250LXhmb3JtIjoxMzAsIi4vdGV4dC14Zm9ybSI6MTI0fV0sMTIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYg
KHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsg
fSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlw
dG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25z
dHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0g
c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5
cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFy
Z2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBl
b2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2Yg
UmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9m
KG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIFRleHRYZm9ybSA9IHJlcXVpcmUoJy4vdGV4dC14Zm9ybScpOwoKdmFyIFJpY2hUZXh0WGZvcm0gPSByZXF1aXJlKCcuL3JpY2gtdGV4dC14Zm9ybScpOwoKdmFyIFBob25ldGljVGV4dFhmb3JtID0g
cmVxdWlyZSgnLi9waG9uZXRpYy10ZXh0LXhmb3JtJyk7Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOyAvLyA8c2k+Ci8vICAgPHI+PC9yPjxyPjwvcj4uLi4KLy8gPC9zaT4KLy8gPHNpPgovLyAgIDx0PjwvdD4KLy8gPC9zaT4KCgp2YXIgU2hhcmVkU3RyaW5nWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoU2hhcmVkU3RyaW5nWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFNoYXJlZFN0cmluZ1hmb3Jt
KTsKCiAgZnVuY3Rpb24gU2hhcmVkU3RyaW5nWGZvcm0obW9kZWwpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2hhcmVkU3RyaW5nWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tb2RlbCA9IG1vZGVsOwogICAgX3RoaXMubWFwID0gewogICAgICByOiBuZXcgUmljaFRleHRYZm9ybSgpLAogICAgICB0OiBuZXcgVGV4dFhmb3JtKCksCiAgICAgIHJQaDogbmV3IFBob25ldGljVGV4dFhmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoK
ICBfY3JlYXRlQ2xhc3MoU2hhcmVkU3RyaW5nWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMudGFnKTsKCiAgICAgIGlmIChtb2RlbCAmJiBtb2RlbC5oYXNPd25Qcm9wZXJ0eSgncmljaFRleHQnKSAmJiBtb2RlbC5yaWNoVGV4dCkgewogICAgICAgIGlmIChtb2RlbC5yaWNoVGV4dC5sZW5ndGgpIHsKICAgICAgICAgIG1vZGVsLnJpY2hUZXh0
LmZvckVhY2goZnVuY3Rpb24gKHRleHQpIHsKICAgICAgICAgICAgX3RoaXMyLm1hcC5yLnJlbmRlcih4bWxTdHJlYW0sIHRleHQpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMubWFwLnQucmVuZGVyKHhtbFN0cmVhbSwgJycpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChtb2RlbCAhPT0gdW5kZWZpbmVkICYmIG1vZGVsICE9PSBudWxsKSB7CiAgICAgICAgdGhpcy5tYXAudC5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCk7CiAgICAgIH0KCiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUo
KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIHZhciBuYW1lID0gbm9kZS5uYW1lOwoKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBpZiAobmFtZSA9PT0gdGhpcy50YWcpIHsKICAgICAgICB0aGlzLm1vZGVsID0ge307CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHRoaXMucGFyc2Vy
ID0gdGhpcy5tYXBbbmFtZV07CgogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBh
cnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSkpIHsKICAgICAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgICAgICBjYXNlICdyJzoKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgcnQgPSB0aGlzLm1vZGVsLnJpY2hUZXh0OwoKICAgICAgICAgICAgICAgIGlmICghcnQpIHsKICAgICAgICAgICAgICAgICAgcnQgPSB0aGlzLm1vZGVsLnJpY2hUZXh0
ID0gW107CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcnQucHVzaCh0aGlzLnBhcnNlci5tb2RlbCk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlICd0JzoKICAgICAgICAgICAgICB0aGlzLm1vZGVsID0gdGhpcy5wYXJzZXIubW9kZWw7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0K
CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgdGhpcy50YWc6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdzaSc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2hhcmVkU3RyaW5nWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gU2hh
cmVkU3RyaW5nWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzEsIi4vcGhvbmV0aWMtdGV4dC14Zm9ybSI6MTIwLCIuL3JpY2gtdGV4dC14Zm9ybSI6MTIxLCIuL3RleHQteGZvcm0iOjEyNH1dLDEyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2Yg
PSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAo
IShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7
IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwg
c3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1
Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5j
dGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3Vt
ZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9
CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1
Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9u
IF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBYbWxTdHJlYW0gPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy94bWwtc3RyZWFtJyk7Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFNoYXJlZFN0cmluZ1hmb3JtID0gcmVxdWlyZSgnLi9zaGFyZWQtc3RyaW5nLXhmb3JtJyk7Cgp2YXIgU2hhcmVkU3RyaW5nc1hmb3JtID0gLyojX19QVVJFX18qL2Z1
bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFNoYXJlZFN0cmluZ3NYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2hhcmVkU3RyaW5nc1hmb3JtKTsKCiAgZnVuY3Rpb24gU2hhcmVkU3RyaW5nc1hmb3JtKG1vZGVsKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNoYXJlZFN0cmluZ3NYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1vZGVsID0gbW9kZWwgfHwgewogICAgICB2YWx1ZXM6IFtdLAog
ICAgICBjb3VudDogMAogICAgfTsKICAgIF90aGlzLmhhc2ggPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgX3RoaXMucmljaCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU2hhcmVkU3RyaW5nc1hmb3JtLCBbewogICAga2V5OiAiZ2V0U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHJpbmcoaW5kZXgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwudmFsdWVzW2luZGV4XTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGQiLAogICAgdmFsdWU6IGZ1
bmN0aW9uIGFkZCh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUucmljaFRleHQgPyB0aGlzLmFkZFJpY2hUZXh0KHZhbHVlKSA6IHRoaXMuYWRkVGV4dCh2YWx1ZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVGV4dCh2YWx1ZSkgewogICAgICB2YXIgaW5kZXggPSB0aGlzLmhhc2hbdmFsdWVdOwoKICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHsKICAgICAgICBpbmRleCA9IHRoaXMuaGFzaFt2YWx1ZV0gPSB0aGlzLm1vZGVsLnZhbHVlcy5sZW5ndGg7CiAg
ICAgICAgdGhpcy5tb2RlbC52YWx1ZXMucHVzaCh2YWx1ZSk7CiAgICAgIH0KCiAgICAgIHRoaXMubW9kZWwuY291bnQrKzsKICAgICAgcmV0dXJuIGluZGV4OwogICAgfQogIH0sIHsKICAgIGtleTogImFkZFJpY2hUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSaWNoVGV4dCh2YWx1ZSkgewogICAgICAvLyBUT0RPOiBhZGQgV2Vha01hcCBoZXJlCiAgICAgIHZhciB4bWwgPSB0aGlzLnNoYXJlZFN0cmluZ1hmb3JtLnRvWG1sKHZhbHVlKTsKICAgICAgdmFyIGluZGV4ID0gdGhpcy5yaWNoW3htbF07CgogICAgICBpZiAo
aW5kZXggPT09IHVuZGVmaW5lZCkgewogICAgICAgIGluZGV4ID0gdGhpcy5yaWNoW3htbF0gPSB0aGlzLm1vZGVsLnZhbHVlcy5sZW5ndGg7CiAgICAgICAgdGhpcy5tb2RlbC52YWx1ZXMucHVzaCh2YWx1ZSk7CiAgICAgIH0KCiAgICAgIHRoaXMubW9kZWwuY291bnQrKzsKICAgICAgcmV0dXJuIGluZGV4OwogICAgfSAvLyA8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCIgc3RhbmRhbG9uZT0ieWVzIj8+CiAgICAvLyA8c3N0IHhtbG5zPSJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvc3ByZWFk
c2hlZXRtbC8yMDA2L21haW4iIGNvdW50PSI8JT10b3RhbFJlZnMlPiIgdW5pcXVlQ291bnQ9IjwlPWNvdW50JT4iPgogICAgLy8gICA8c2k+PHQ+PCU9dGV4dCU+PC90Pjwvc2k+CiAgICAvLyAgIDxzaT48cj48clByPjwvclByPjx0PjwvdD48L3I+PC9zaT4KICAgIC8vIDwvc3N0PgoKICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIG1vZGVsID0gbW9kZWwgfHwgdGhpcy5fdmFsdWVzOwogICAgICB4bWxTdHJlYW0ub3BlblhtbChYbWxT
dHJlYW0uU3RkRG9jQXR0cmlidXRlcyk7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnc3N0JywgewogICAgICAgIHhtbG5zOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3NwcmVhZHNoZWV0bWwvMjAwNi9tYWluJywKICAgICAgICBjb3VudDogbW9kZWwuY291bnQsCiAgICAgICAgdW5pcXVlQ291bnQ6IG1vZGVsLnZhbHVlcy5sZW5ndGgKICAgICAgfSk7CiAgICAgIHZhciBzeCA9IHRoaXMuc2hhcmVkU3RyaW5nWGZvcm07CiAgICAgIG1vZGVsLnZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaGFyZWRTdHJp
bmcpIHsKICAgICAgICBzeC5yZW5kZXIoeG1sU3RyZWFtLCBzaGFyZWRTdHJpbmcpOwogICAgICB9KTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgJ3NzdCc6
CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgY2FzZSAnc2knOgogICAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLnNoYXJlZFN0cmluZ1hmb3JtOwogICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVuZXhwZWN0ZWQgeG1sIG5vZGUgaW4gcGFyc2VPcGVuOiAiLmNvbmNhdChKU09OLnN0cmluZ2lmeShub2RlKSkpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFy
c2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLm1vZGVsLnZhbHVlcy5wdXNoKHRoaXMu
cGFyc2VyLm1vZGVsKTsKICAgICAgICAgIHRoaXMubW9kZWwuY291bnQrKzsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgJ3NzdCc6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVuZXhwZWN0ZWQgeG1sIG5vZGUgaW4gcGFyc2VDbG9zZTogIi5jb25jYXQobmFtZSkpOwogICAgICB9CiAgICB9CiAg
fSwgewogICAga2V5OiAic2hhcmVkU3RyaW5nWGZvcm0iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zaGFyZWRTdHJpbmdYZm9ybSB8fCAodGhpcy5fc2hhcmVkU3RyaW5nWGZvcm0gPSBuZXcgU2hhcmVkU3RyaW5nWGZvcm0oKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsdWVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC52YWx1ZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAidW5pcXVlQ291bnQiLAogICAgZ2V0OiBmdW5jdGlvbiBn
ZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnZhbHVlcy5sZW5ndGg7CiAgICB9CiAgfSwgewogICAga2V5OiAiY291bnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmNvdW50OwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNoYXJlZFN0cmluZ3NYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBTaGFyZWRTdHJpbmdzWGZvcm07Cgp9LHsiLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbSI6MjcsIi4uL2Jhc2UteGZvcm0iOjMxLCIuL3NoYXJlZC1zdHJpbmct
eGZvcm0iOjEyMn1dLDEyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBv
YmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9
CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtl
eSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xh
c3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihz
dWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1
bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1
cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFz
bid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcu
Y2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7
IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7IC8vICAgPHQgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+IGlzIDwvdD4KCgp2YXIgVGV4dFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFRleHRYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVGV4dFhmb3JtKTsKCiAgZnVuY3Rpb24gVGV4dFhmb3JtKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRleHRYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5h
cHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFRleHRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCd0Jyk7CgogICAgICBpZiAoL15cc3xcbnxccyQvLnRlc3QobW9kZWwpKSB7CiAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgneG1sOnNwYWNlJywgJ3ByZXNlcnZlJyk7CiAgICAgIH0KCiAgICAgIHhtbFN0cmVhbS53cml0ZVRleHQobW9kZWwpOwogICAgICB4
bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgJ3QnOgogICAgICAgICAgdGhpcy5fdGV4dCA9IFtdOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNl
VGV4dCh0ZXh0KSB7CiAgICAgIHRoaXMuX3RleHQucHVzaCh0ZXh0KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3QnOwogICAgfQogIH0sIHsKICAgIGtleTogIm1vZGVsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fdGV4dC5qb2luKCcnKS5yZXBs
YWNlKC9feChbMC05QS1GXXs0fSlfL2csIGZ1bmN0aW9uICgkMCwgJDEpIHsKICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCgkMSwgMTYpKTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVGV4dFhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFRleHRYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDEyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVs
cGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9s
IiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3Ig
PSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2Rl
ZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwg
b3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBm
dW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25z
dHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9
PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3Ry
dWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0
aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBFbnVtcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2RvYy9lbnVtcycpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBCYXNl
WGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgdmFsaWRhdGlvbiA9IHsKICBob3Jpem9udGFsVmFsdWVzOiBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2ZpbGwnLCAnY2VudGVyQ29udGludW91cycsICdkaXN0cmlidXRlZCcsICdqdXN0aWZ5J10ucmVkdWNlKGZ1bmN0aW9uIChwLCB2KSB7CiAgICBwW3ZdID0gdHJ1ZTsKICAgIHJldHVybiBwOwogIH0sIHt9KSwKICBob3Jpem9udGFsOiBmdW5jdGlvbiBob3Jpem9udGFsKHZhbHVlKSB7CiAgICByZXR1cm4gdGhpcy5ob3Jpem9udGFsVmFsdWVzW3Zh
bHVlXSA/IHZhbHVlIDogdW5kZWZpbmVkOwogIH0sCiAgdmVydGljYWxWYWx1ZXM6IFsndG9wJywgJ21pZGRsZScsICdib3R0b20nLCAnZGlzdHJpYnV0ZWQnLCAnanVzdGlmeSddLnJlZHVjZShmdW5jdGlvbiAocCwgdikgewogICAgcFt2XSA9IHRydWU7CiAgICByZXR1cm4gcDsKICB9LCB7fSksCiAgdmVydGljYWw6IGZ1bmN0aW9uIHZlcnRpY2FsKHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT09ICdtaWRkbGUnKSByZXR1cm4gJ2NlbnRlcic7CiAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbFZhbHVlc1t2YWx1ZV0gPyB2YWx1ZSA6
IHVuZGVmaW5lZDsKICB9LAogIHdyYXBUZXh0OiBmdW5jdGlvbiB3cmFwVGV4dCh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlID8gdHJ1ZSA6IHVuZGVmaW5lZDsKICB9LAogIHNocmlua1RvRml0OiBmdW5jdGlvbiBzaHJpbmtUb0ZpdCh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlID8gdHJ1ZSA6IHVuZGVmaW5lZDsKICB9LAogIHRleHRSb3RhdGlvbjogZnVuY3Rpb24gdGV4dFJvdGF0aW9uKHZhbHVlKSB7CiAgICBzd2l0Y2ggKHZhbHVlKSB7CiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzoKICAgICAgICByZXR1cm4gdmFsdWU7Cgog
ICAgICBkZWZhdWx0OgogICAgICAgIHZhbHVlID0gdXRpbHMudmFsaWRJbnQodmFsdWUpOwogICAgICAgIHJldHVybiB2YWx1ZSA+PSAtOTAgJiYgdmFsdWUgPD0gOTAgPyB2YWx1ZSA6IHVuZGVmaW5lZDsKICAgIH0KICB9LAogIGluZGVudDogZnVuY3Rpb24gaW5kZW50KHZhbHVlKSB7CiAgICB2YWx1ZSA9IHV0aWxzLnZhbGlkSW50KHZhbHVlKTsKICAgIHJldHVybiBNYXRoLm1heCgwLCB2YWx1ZSk7CiAgfSwKICByZWFkaW5nT3JkZXI6IGZ1bmN0aW9uIHJlYWRpbmdPcmRlcih2YWx1ZSkgewogICAgc3dpdGNoICh2YWx1ZSkg
ewogICAgICBjYXNlICdsdHInOgogICAgICAgIHJldHVybiBFbnVtcy5SZWFkaW5nT3JkZXIuTGVmdFRvUmlnaHQ7CgogICAgICBjYXNlICdydGwnOgogICAgICAgIHJldHVybiBFbnVtcy5SZWFkaW5nT3JkZXIuUmlnaHRUb0xlZnQ7CgogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgfQp9Owp2YXIgdGV4dFJvdGF0aW9uWGZvcm0gPSB7CiAgdG9YbWw6IGZ1bmN0aW9uIHRvWG1sKHRleHRSb3RhdGlvbikgewogICAgdGV4dFJvdGF0aW9uID0gdmFsaWRhdGlvbi50ZXh0Um90YXRpb24odGV4
dFJvdGF0aW9uKTsKCiAgICBpZiAodGV4dFJvdGF0aW9uKSB7CiAgICAgIGlmICh0ZXh0Um90YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHsKICAgICAgICByZXR1cm4gMjU1OwogICAgICB9CgogICAgICB2YXIgdHIgPSBNYXRoLnJvdW5kKHRleHRSb3RhdGlvbik7CgogICAgICBpZiAodHIgPj0gMCAmJiB0ciA8PSA5MCkgewogICAgICAgIHJldHVybiB0cjsKICAgICAgfQoKICAgICAgaWYgKHRyIDwgMCAmJiB0ciA+PSAtOTApIHsKICAgICAgICByZXR1cm4gOTAgLSB0cjsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB1bmRlZmlu
ZWQ7CiAgfSwKICB0b01vZGVsOiBmdW5jdGlvbiB0b01vZGVsKHRleHRSb3RhdGlvbikgewogICAgdmFyIHRyID0gdXRpbHMudmFsaWRJbnQodGV4dFJvdGF0aW9uKTsKCiAgICBpZiAodHIgIT09IHVuZGVmaW5lZCkgewogICAgICBpZiAodHIgPT09IDI1NSkgewogICAgICAgIHJldHVybiAndmVydGljYWwnOwogICAgICB9CgogICAgICBpZiAodHIgPj0gMCAmJiB0ciA8PSA5MCkgewogICAgICAgIHJldHVybiB0cjsKICAgICAgfQoKICAgICAgaWYgKHRyID4gOTAgJiYgdHIgPD0gMTgwKSB7CiAgICAgICAgcmV0dXJuIDkwIC0g
dHI7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KfTsgLy8gQWxpZ25tZW50IGVuY2Fwc3VsYXRlcyB0cmFuc2xhdGlvbiBmcm9tIHN0eWxlLmFsaWdubWVudCBtb2RlbCB0by9mcm9tIHhsc3gKCnZhciBBbGlnbm1lbnRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhBbGlnbm1lbnRYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQWxpZ25tZW50WGZvcm0pOwoKICBmdW5jdGlvbiBBbGlnbm1lbnRYZm9ybSgp
IHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbGlnbm1lbnRYZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEFsaWdubWVudFhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0uYWRkUm9sbGJhY2soKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdhbGlnbm1lbnQnKTsKICAgICAgdmFyIGlzVmFsaWQgPSBmYWxzZTsKCiAgICAgIGZ1
bmN0aW9uIGFkZChuYW1lLCB2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7CiAgICAgICAgICBpc1ZhbGlkID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGFkZCgnaG9yaXpvbnRhbCcsIHZhbGlkYXRpb24uaG9yaXpvbnRhbChtb2RlbC5ob3Jpem9udGFsKSk7CiAgICAgIGFkZCgndmVydGljYWwnLCB2YWxpZGF0aW9uLnZlcnRpY2FsKG1vZGVsLnZlcnRpY2FsKSk7CiAgICAgIGFkZCgnd3JhcFRleHQnLCB2YWxpZGF0aW9uLndy
YXBUZXh0KG1vZGVsLndyYXBUZXh0KSA/ICcxJyA6IGZhbHNlKTsKICAgICAgYWRkKCdzaHJpbmtUb0ZpdCcsIHZhbGlkYXRpb24uc2hyaW5rVG9GaXQobW9kZWwuc2hyaW5rVG9GaXQpID8gJzEnIDogZmFsc2UpOwogICAgICBhZGQoJ2luZGVudCcsIHZhbGlkYXRpb24uaW5kZW50KG1vZGVsLmluZGVudCkpOwogICAgICBhZGQoJ3RleHRSb3RhdGlvbicsIHRleHRSb3RhdGlvblhmb3JtLnRvWG1sKG1vZGVsLnRleHRSb3RhdGlvbikpOwogICAgICBhZGQoJ3JlYWRpbmdPcmRlcicsIHZhbGlkYXRpb24ucmVhZGluZ09yZGVyKG1v
ZGVsLnJlYWRpbmdPcmRlcikpOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CgogICAgICBpZiAoaXNWYWxpZCkgewogICAgICAgIHhtbFN0cmVhbS5jb21taXQoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB4bWxTdHJlYW0ucm9sbGJhY2soKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgdmFyIG1vZGVsID0ge307CiAgICAgIHZhciB2YWxpZCA9IGZhbHNlOwoKICAgICAgZnVuY3Rpb24gYWRkKHRydXRoeSwg
bmFtZSwgdmFsdWUpIHsKICAgICAgICBpZiAodHJ1dGh5KSB7CiAgICAgICAgICBtb2RlbFtuYW1lXSA9IHZhbHVlOwogICAgICAgICAgdmFsaWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgYWRkKG5vZGUuYXR0cmlidXRlcy5ob3Jpem9udGFsLCAnaG9yaXpvbnRhbCcsIG5vZGUuYXR0cmlidXRlcy5ob3Jpem9udGFsKTsKICAgICAgYWRkKG5vZGUuYXR0cmlidXRlcy52ZXJ0aWNhbCwgJ3ZlcnRpY2FsJywgbm9kZS5hdHRyaWJ1dGVzLnZlcnRpY2FsID09PSAnY2VudGVyJyA/ICdtaWRkbGUnIDogbm9kZS5hdHRy
aWJ1dGVzLnZlcnRpY2FsKTsKICAgICAgYWRkKG5vZGUuYXR0cmlidXRlcy53cmFwVGV4dCwgJ3dyYXBUZXh0JywgISFub2RlLmF0dHJpYnV0ZXMud3JhcFRleHQpOwogICAgICBhZGQobm9kZS5hdHRyaWJ1dGVzLnNocmlua1RvRml0LCAnc2hyaW5rVG9GaXQnLCAhIW5vZGUuYXR0cmlidXRlcy5zaHJpbmtUb0ZpdCk7CiAgICAgIGFkZChub2RlLmF0dHJpYnV0ZXMuaW5kZW50LCAnaW5kZW50JywgcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLmluZGVudCwgMTApKTsKICAgICAgYWRkKG5vZGUuYXR0cmlidXRlcy50ZXh0Um90YXRp
b24sICd0ZXh0Um90YXRpb24nLCB0ZXh0Um90YXRpb25YZm9ybS50b01vZGVsKG5vZGUuYXR0cmlidXRlcy50ZXh0Um90YXRpb24pKTsKICAgICAgYWRkKG5vZGUuYXR0cmlidXRlcy5yZWFkaW5nT3JkZXIsICdyZWFkaW5nT3JkZXInLCBub2RlLmF0dHJpYnV0ZXMucmVhZGluZ09yZGVyID09PSAnMicgPyAncnRsJyA6ICdsdHInKTsKICAgICAgdGhpcy5tb2RlbCA9IHZhbGlkID8gbW9kZWwgOiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30K
ICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ2FsaWdubWVudCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQWxpZ25tZW50WGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQWxpZ25tZW50WGZvcm07Cgp9LHsiLi4vLi4vLi4vZG9jL2VudW1zIjo3LCIuLi8uLi8uLi91dGlscy91dGls
cyI6MjYsIi4uL2Jhc2UteGZvcm0iOjMxfV0sMTI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChz
eW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSku
Zm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3du
UHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFi
ZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAi
c3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2Ny
aXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9w
cykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJl
IG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVP
ZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxl
Y3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihj
YWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0
Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0K
CmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgQ29s
b3JYZm9ybSA9IHJlcXVpcmUoJy4vY29sb3IteGZvcm0nKTsKCnZhciBFZGdlWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoRWRnZVhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihFZGdlWGZvcm0pOwoKICBmdW5jdGlvbiBFZGdlWGZvcm0obmFtZSkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGdlWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5uYW1lID0g
bmFtZTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgY29sb3I6IG5ldyBDb2xvclhmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRWRnZVhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCwgZGVmYXVsdENvbG9yKSB7CiAgICAgIHZhciBjb2xvciA9IG1vZGVsICYmIG1vZGVsLmNvbG9yIHx8IGRlZmF1bHRDb2xvciB8fCB0aGlzLmRlZmF1bHRDb2xvcjsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKHRoaXMu
bmFtZSk7CgogICAgICBpZiAobW9kZWwgJiYgbW9kZWwuc3R5bGUpIHsKICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdzdHlsZScsIG1vZGVsLnN0eWxlKTsKCiAgICAgICAgaWYgKGNvbG9yKSB7CiAgICAgICAgICB0aGlzLm1hcC5jb2xvci5yZW5kZXIoeG1sU3RyZWFtLCBjb2xvcik7CiAgICAgICAgfQogICAgICB9CgogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAo
dGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLm5hbWU6CiAgICAgICAgICB7CiAgICAgICAgICAgIHZhciBzdHlsZSA9IG5vZGUuYXR0cmlidXRlcy5zdHlsZTsKCiAgICAgICAgICAgIGlmIChzdHlsZSkgewogICAgICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGUKICAgICAgICAgICAgICB9OwogICAgICAg
ICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoaXMubW9kZWwgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQoKICAgICAgICBjYXNlICdjb2xvcic6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwLmNvbG9yOwogICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6
ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSkpIHsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVk
OwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIGlmIChuYW1lID09PSB0aGlzLm5hbWUpIHsKICAgICAgICBpZiAodGhpcy5tYXAuY29sb3IubW9kZWwpIHsKICAgICAgICAgIGlmICghdGhpcy5tb2RlbCkgewogICAgICAgICAgICB0aGlzLm1vZGVsID0ge307CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5tb2RlbC5jb2xvciA9IHRoaXMubWFwLmNvbG9yLm1vZGVsOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInZhbGlk
U3R5bGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkU3R5bGUodmFsdWUpIHsKICAgICAgcmV0dXJuIEVkZ2VYZm9ybS52YWxpZFN0eWxlVmFsdWVzW3ZhbHVlXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLm5hbWU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRWRnZVhmb3JtOwp9KEJhc2VYZm9ybSk7CgpFZGdlWGZvcm0udmFsaWRTdHlsZVZhbHVlcyA9IFsndGhpbicsICdkb3R0ZWQnLCAnZGFzaERvdCcsICdoYWlyJywgJ2Rhc2hEb3RE
b3QnLCAnc2xhbnREYXNoRG90JywgJ21lZGl1bURhc2hlZCcsICdtZWRpdW1EYXNoRG90RG90JywgJ21lZGl1bURhc2hEb3QnLCAnbWVkaXVtJywgJ2RvdWJsZScsICd0aGljayddLnJlZHVjZShmdW5jdGlvbiAocCwgdikgewogIHBbdl0gPSB0cnVlOwogIHJldHVybiBwOwp9LCB7fSk7IC8vIEJvcmRlciBlbmNhcHN1bGF0ZXMgdHJhbnNsYXRpb24gZnJvbSBib3JkZXIgbW9kZWwgdG8vZnJvbSB4bHN4Cgp2YXIgQm9yZGVyWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0yKSB7CiAgX2luaGVyaXRzKEJv
cmRlclhmb3JtLCBfQmFzZVhmb3JtMik7CgogIHZhciBfc3VwZXIyID0gX2NyZWF0ZVN1cGVyKEJvcmRlclhmb3JtKTsKCiAgZnVuY3Rpb24gQm9yZGVyWGZvcm0oKSB7CiAgICB2YXIgX3RoaXMyOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCb3JkZXJYZm9ybSk7CgogICAgX3RoaXMyID0gX3N1cGVyMi5jYWxsKHRoaXMpOwogICAgX3RoaXMyLm1hcCA9IHsKICAgICAgdG9wOiBuZXcgRWRnZVhmb3JtKCd0b3AnKSwKICAgICAgbGVmdDogbmV3IEVkZ2VYZm9ybSgnbGVmdCcpLAogICAgICBib3R0b206IG5ldyBFZGdlWGZv
cm0oJ2JvdHRvbScpLAogICAgICByaWdodDogbmV3IEVkZ2VYZm9ybSgncmlnaHQnKSwKICAgICAgZGlhZ29uYWw6IG5ldyBFZGdlWGZvcm0oJ2RpYWdvbmFsJykKICAgIH07CiAgICByZXR1cm4gX3RoaXMyOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEJvcmRlclhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB2YXIgY29sb3IgPSBtb2RlbC5jb2xvcjsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdib3JkZXInKTsKCiAgICAgIGlmICht
b2RlbC5kaWFnb25hbCAmJiBtb2RlbC5kaWFnb25hbC5zdHlsZSkgewogICAgICAgIGlmIChtb2RlbC5kaWFnb25hbC51cCkgewogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnZGlhZ29uYWxVcCcsICcxJyk7CiAgICAgICAgfQoKICAgICAgICBpZiAobW9kZWwuZGlhZ29uYWwuZG93bikgewogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnZGlhZ29uYWxEb3duJywgJzEnKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGFkZChlZGdlTW9kZWwsIGVkZ2VYZm9ybSkgewogICAgICAgIGlm
IChlZGdlTW9kZWwgJiYgIWVkZ2VNb2RlbC5jb2xvciAmJiBtb2RlbC5jb2xvcikgewogICAgICAgICAgLy8gZG9uJ3QgbWVzcyB3aXRoIGluY29taW5nIG1vZGVscwogICAgICAgICAgZWRnZU1vZGVsID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBlZGdlTW9kZWwpLCB7fSwgewogICAgICAgICAgICBjb2xvcjogbW9kZWwuY29sb3IKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZWRnZVhmb3JtLnJlbmRlcih4bWxTdHJlYW0sIGVkZ2VNb2RlbCwgY29sb3IpOwogICAgICB9CgogICAgICBhZGQobW9k
ZWwubGVmdCwgdGhpcy5tYXAubGVmdCk7CiAgICAgIGFkZChtb2RlbC5yaWdodCwgdGhpcy5tYXAucmlnaHQpOwogICAgICBhZGQobW9kZWwudG9wLCB0aGlzLm1hcC50b3ApOwogICAgICBhZGQobW9kZWwuYm90dG9tLCB0aGlzLm1hcC5ib3R0b20pOwogICAgICBhZGQobW9kZWwuZGlhZ29uYWwsIHRoaXMubWFwLmRpYWdvbmFsKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYg
KHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgJ2JvcmRlcic6CiAgICAgICAgICB0aGlzLnJlc2V0KCk7CiAgICAgICAgICB0aGlzLmRpYWdvbmFsVXAgPSAhIW5vZGUuYXR0cmlidXRlcy5kaWFnb25hbFVwOwogICAgICAgICAgdGhpcy5kaWFnb25hbERvd24gPSAhIW5vZGUuYXR0cmlidXRlcy5kaWFnb25hbERvd247CiAgICAgICAgICByZXR1cm4gdHJ1ZTsK
CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5tYXBbbm9kZS5uYW1lXTsKCiAgICAgICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikg
ewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSkpIHsKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIGlmIChuYW1lID09PSAnYm9yZGVyJykgewog
ICAgICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWwgPSB7fTsKCiAgICAgICAgdmFyIGFkZCA9IGZ1bmN0aW9uIGFkZChrZXksIGVkZ2VNb2RlbCwgZXh0ZW5zaW9ucykgewogICAgICAgICAgaWYgKGVkZ2VNb2RlbCkgewogICAgICAgICAgICBpZiAoZXh0ZW5zaW9ucykgewogICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZWRnZU1vZGVsLCBleHRlbnNpb25zKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbW9kZWxba2V5XSA9IGVkZ2VNb2RlbDsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBhZGQoJ2xlZnQn
LCB0aGlzLm1hcC5sZWZ0Lm1vZGVsKTsKICAgICAgICBhZGQoJ3JpZ2h0JywgdGhpcy5tYXAucmlnaHQubW9kZWwpOwogICAgICAgIGFkZCgndG9wJywgdGhpcy5tYXAudG9wLm1vZGVsKTsKICAgICAgICBhZGQoJ2JvdHRvbScsIHRoaXMubWFwLmJvdHRvbS5tb2RlbCk7CiAgICAgICAgYWRkKCdkaWFnb25hbCcsIHRoaXMubWFwLmRpYWdvbmFsLm1vZGVsLCB7CiAgICAgICAgICB1cDogdGhpcy5kaWFnb25hbFVwLAogICAgICAgICAgZG93bjogdGhpcy5kaWFnb25hbERvd24KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0
dXJuIGZhbHNlOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEJvcmRlclhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IEJvcmRlclhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxLCIuL2NvbG9yLXhmb3JtIjoxMjd9XSwxMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9y
ID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0
YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3Jp
cHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmlu
ZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJD
bGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQ
cm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxl
Y3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2Vy
dFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBm
YWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Qu
Z2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOyAvLyBDb2xvciBlbmNhcHN1bGF0ZXMgdHJhbnNsYXRpb24gZnJvbSBjb2xvciBtb2RlbCB0by9mcm9tIHhsc3gKCgp2YXIgQ29sb3JYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0
cyhDb2xvclhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDb2xvclhmb3JtKTsKCiAgZnVuY3Rpb24gQ29sb3JYZm9ybShuYW1lKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbG9yWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7IC8vIHRoaXMubmFtZSBjb250cm9scyB0aGUgeG0gbm9kZSBuYW1lCgogICAgX3RoaXMubmFtZSA9IG5hbWUgfHwgJ2NvbG9yJzsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhD
b2xvclhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICBpZiAobW9kZWwpIHsKICAgICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy5uYW1lKTsKCiAgICAgICAgaWYgKG1vZGVsLmFyZ2IpIHsKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3JnYicsIG1vZGVsLmFyZ2IpOwogICAgICAgIH0gZWxzZSBpZiAobW9kZWwudGhlbWUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgn
dGhlbWUnLCBtb2RlbC50aGVtZSk7CgogICAgICAgICAgaWYgKG1vZGVsLnRpbnQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCd0aW50JywgbW9kZWwudGludCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChtb2RlbC5pbmRleGVkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ2luZGV4ZWQnLCBtb2RlbC5pbmRleGVkKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnYXV0bycs
ICcxJyk7CiAgICAgICAgfQoKICAgICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmIChub2RlLm5hbWUgPT09IHRoaXMubmFtZSkgewogICAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXMucmdiKSB7CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICBhcmdiOiBub2RlLmF0dHJpYnV0
ZXMucmdiCiAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSBpZiAobm9kZS5hdHRyaWJ1dGVzLnRoZW1lKSB7CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICB0aGVtZTogcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLnRoZW1lLCAxMCkKICAgICAgICAgIH07CgogICAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy50aW50KSB7CiAgICAgICAgICAgIHRoaXMubW9kZWwudGludCA9IHBhcnNlRmxvYXQobm9kZS5hdHRyaWJ1dGVzLnRpbnQpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAobm9kZS5hdHRy
aWJ1dGVzLmluZGV4ZWQpIHsKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIGluZGV4ZWQ6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5pbmRleGVkLCAxMCkKICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMubW9kZWwgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9
LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5uYW1lOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENvbG9yWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQ29sb3JYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDEyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0
cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3Ry
dWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZv
ciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0
cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJv
dyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVP
ZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0
UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3Ry
dWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxl
ZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30p
KTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2
YXIgQWxpZ25tZW50WGZvcm0gPSByZXF1aXJlKCcuL2FsaWdubWVudC14Zm9ybScpOwoKdmFyIEJvcmRlclhmb3JtID0gcmVxdWlyZSgnLi9ib3JkZXIteGZvcm0nKTsKCnZhciBGaWxsWGZvcm0gPSByZXF1aXJlKCcuL2ZpbGwteGZvcm0nKTsKCnZhciBGb250WGZvcm0gPSByZXF1aXJlKCcuL2ZvbnQteGZvcm0nKTsKCnZhciBOdW1GbXRYZm9ybSA9IHJlcXVpcmUoJy4vbnVtZm10LXhmb3JtJyk7Cgp2YXIgUHJvdGVjdGlvblhmb3JtID0gcmVxdWlyZSgnLi9wcm90ZWN0aW9uLXhmb3JtJyk7IC8vIDx4ZiBudW1GbXRJZD0iW251
bUZtdElkXSIgZm9udElkPSJbZm9udElkXSIgZmlsbElkPSJbZmlsbElkXSIgYm9yZGVySWQ9Ilt4Zi5ib3JkZXJJZF0iIHhmSWQ9Ilt4ZklkXSI+Ci8vICAgT3B0aW9uYWwgPGFsaWdubWVudD4KLy8gICBPcHRpb25hbCA8cHJvdGVjdGlvbj4KLy8gPC94Zj4KLy8gU3R5bGUgYXNzaXN0cyB0cmFuc2xhdGlvbiBmcm9tIHN0eWxlIG1vZGVsIHRvL2Zyb20geGxzeAoKCnZhciBEeGZYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhEeGZYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZh
ciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRHhmWGZvcm0pOwoKICBmdW5jdGlvbiBEeGZYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHhmWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgIGFsaWdubWVudDogbmV3IEFsaWdubWVudFhmb3JtKCksCiAgICAgIGJvcmRlcjogbmV3IEJvcmRlclhmb3JtKCksCiAgICAgIGZpbGw6IG5ldyBGaWxsWGZvcm0oKSwKICAgICAgZm9udDogbmV3IEZvbnRYZm9ybSgpLAogICAgICBu
dW1GbXQ6IG5ldyBOdW1GbXRYZm9ybSgpLAogICAgICBwcm90ZWN0aW9uOiBuZXcgUHJvdGVjdGlvblhmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRHhmWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgLy8gaG93IGRvIHdlIGdlbmVyYXRlIGR4ZmlkPwogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZyk7CgogICAgICBpZiAobW9kZWwuZm9udCkgewogICAgICAgIHRoaXMubWFw
LmZvbnQucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuZm9udCk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5udW1GbXQpIHsKICAgICAgICB0aGlzLm1hcC5udW1GbXQucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwubnVtRm10KTsKICAgICAgfQoKICAgICAgaWYgKG1vZGVsLmZpbGwpIHsKICAgICAgICB0aGlzLm1hcC5maWxsLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmZpbGwpOwogICAgICB9CgogICAgICBpZiAobW9kZWwuYWxpZ25tZW50KSB7CiAgICAgICAgdGhpcy5tYXAuYWxpZ25tZW50LnJlbmRlcih4bWxTdHJlYW0sIG1v
ZGVsLmFsaWdubWVudCk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5ib3JkZXIpIHsKICAgICAgICB0aGlzLm1hcC5ib3JkZXIucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuYm9yZGVyKTsKICAgICAgfQoKICAgICAgaWYgKG1vZGVsLnByb3RlY3Rpb24pIHsKICAgICAgICB0aGlzLm1hcC5wcm90ZWN0aW9uLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLnByb3RlY3Rpb24pOwogICAgICB9CgogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5j
dGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIC8vIHRoaXMgbm9kZSBpcyBvZnRlbiByZXBlYXRlZC4gTmVlZCB0byByZXNldCBjaGlsZHJlbgogICAgICAgICAgdGhpcy5yZXNldCgpOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAg
ICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwW25vZGUubmFtZV07CgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAg
ICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKG5hbWUgPT09IHRoaXMudGFnKSB7CiAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgIGFsaWdubWVudDogdGhpcy5t
YXAuYWxpZ25tZW50Lm1vZGVsLAogICAgICAgICAgYm9yZGVyOiB0aGlzLm1hcC5ib3JkZXIubW9kZWwsCiAgICAgICAgICBmaWxsOiB0aGlzLm1hcC5maWxsLm1vZGVsLAogICAgICAgICAgZm9udDogdGhpcy5tYXAuZm9udC5tb2RlbCwKICAgICAgICAgIG51bUZtdDogdGhpcy5tYXAubnVtRm10Lm1vZGVsLAogICAgICAgICAgcHJvdGVjdGlvbjogdGhpcy5tYXAucHJvdGVjdGlvbi5tb2RlbAogICAgICAgIH07CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAg
ICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnZHhmJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBEeGZYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBEeGZYZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMSwiLi9hbGlnbm1lbnQteGZvcm0iOjEyNSwiLi9ib3JkZXIteGZvcm0iOjEyNiwiLi9maWxsLXhmb3JtIjoxMjksIi4vZm9udC14Zm9ybSI6MTMwLCIuL251bWZtdC14Zm9ybSI6MTMxLCIuL3Byb3RlY3Rpb24teGZvcm0iOjEzMn1dLDEyOTpbZnVuY3Rp
b24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0g
ImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVy
dGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVu
Y3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3Vw
ZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0K
CmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVy
bmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoK
ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBz
dXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChE
YXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCi8qIGVzbGludC1kaXNhYmxlIG1h
eC1jbGFzc2VzLXBlci1maWxlICovCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgQ29sb3JYZm9ybSA9IHJlcXVpcmUoJy4vY29sb3IteGZvcm0nKTsKCnZhciBTdG9wWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoU3RvcFhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTdG9wWGZvcm0pOwoKICBmdW5jdGlvbiBTdG9wWGZvcm0oKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNr
KHRoaXMsIFN0b3BYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgY29sb3I6IG5ldyBDb2xvclhmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3RvcFhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ3N0b3AnKTsKICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBt
b2RlbC5wb3NpdGlvbik7CiAgICAgIHRoaXMubWFwLmNvbG9yLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNvbG9yKTsKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNh
c2UgJ3N0b3AnOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgICAgcG9zaXRpb246IHBhcnNlRmxvYXQobm9kZS5hdHRyaWJ1dGVzLnBvc2l0aW9uKQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBjYXNlICdjb2xvcic6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwLmNvbG9yOwogICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAg
ICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgdGhpcy5tb2RlbC5jb2xvciA9IHRoaXMucGFyc2VyLm1vZGVsOwogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAg
ICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdzdG9wJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBTdG9wWGZvcm07Cn0oQmFzZVhmb3JtKTsKCnZhciBQYXR0ZXJuRmlsbFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtMikgewogIF9pbmhlcml0cyhQYXR0ZXJuRmlsbFhmb3JtLCBfQmFzZVhmb3JtMik7CgogIHZhciBfc3Vw
ZXIyID0gX2NyZWF0ZVN1cGVyKFBhdHRlcm5GaWxsWGZvcm0pOwoKICBmdW5jdGlvbiBQYXR0ZXJuRmlsbFhmb3JtKCkgewogICAgdmFyIF90aGlzMjsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGF0dGVybkZpbGxYZm9ybSk7CgogICAgX3RoaXMyID0gX3N1cGVyMi5jYWxsKHRoaXMpOwogICAgX3RoaXMyLm1hcCA9IHsKICAgICAgZmdDb2xvcjogbmV3IENvbG9yWGZvcm0oJ2ZnQ29sb3InKSwKICAgICAgYmdDb2xvcjogbmV3IENvbG9yWGZvcm0oJ2JnQ29sb3InKQogICAgfTsKICAgIHJldHVybiBfdGhpczI7CiAgfQoK
ICBfY3JlYXRlQ2xhc3MoUGF0dGVybkZpbGxYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdwYXR0ZXJuRmlsbCcpOwogICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdwYXR0ZXJuVHlwZScsIG1vZGVsLnBhdHRlcm4pOwoKICAgICAgaWYgKG1vZGVsLmZnQ29sb3IpIHsKICAgICAgICB0aGlzLm1hcC5mZ0NvbG9yLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmZnQ29sb3IpOwogICAgICB9Cgog
ICAgICBpZiAobW9kZWwuYmdDb2xvcikgewogICAgICAgIHRoaXMubWFwLmJnQ29sb3IucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuYmdDb2xvcik7CiAgICAgIH0KCiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNo
IChub2RlLm5hbWUpIHsKICAgICAgICBjYXNlICdwYXR0ZXJuRmlsbCc6CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICB0eXBlOiAncGF0dGVybicsCiAgICAgICAgICAgIHBhdHRlcm46IG5vZGUuYXR0cmlidXRlcy5wYXR0ZXJuVHlwZQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwoKICAgICAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgICAgICB0aGlzLnBhcnNlci5w
YXJzZU9wZW4obm9kZSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1l
KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIGlmICghdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgICAgaWYgKHRoaXMucGFyc2VyLm1vZGVsKSB7CiAgICAgICAgICAgIHRoaXMubW9kZWxbbmFtZV0gPSB0aGlzLnBhcnNlci5tb2RlbDsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAibmFtZSIsCiAg
ICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdwYXR0ZXJuJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAncGF0dGVybkZpbGwnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBhdHRlcm5GaWxsWGZvcm07Cn0oQmFzZVhmb3JtKTsKCnZhciBHcmFkaWVudEZpbGxYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybTMpIHsKICBfaW5oZXJpdHMoR3JhZGllbnRGaWxsWGZvcm0sIF9CYXNlWGZvcm0zKTsKCiAgdmFy
IF9zdXBlcjMgPSBfY3JlYXRlU3VwZXIoR3JhZGllbnRGaWxsWGZvcm0pOwoKICBmdW5jdGlvbiBHcmFkaWVudEZpbGxYZm9ybSgpIHsKICAgIHZhciBfdGhpczM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyYWRpZW50RmlsbFhmb3JtKTsKCiAgICBfdGhpczMgPSBfc3VwZXIzLmNhbGwodGhpcyk7CiAgICBfdGhpczMubWFwID0gewogICAgICBzdG9wOiBuZXcgU3RvcFhmb3JtKCkKICAgIH07IC8vIGlmIChtb2RlbCkgewogICAgLy8gICB0aGlzLmdyYWRpZW50ID0gbW9kZWwuZ3JhZGllbnQ7CiAgICAvLyAgIGlmICht
b2RlbC5jZW50ZXIpIHsKICAgIC8vICAgICB0aGlzLmNlbnRlciA9IG1vZGVsLmNlbnRlcjsKICAgIC8vICAgfQogICAgLy8gICBpZiAobW9kZWwuZGVncmVlICE9PSB1bmRlZmluZWQpIHsKICAgIC8vICAgICB0aGlzLmRlZ3JlZSA9IG1vZGVsLmRlZ3JlZTsKICAgIC8vICAgfQogICAgLy8gICB0aGlzLnN0b3BzID0gbW9kZWwuc3RvcHMubWFwKGZ1bmN0aW9uKHN0b3ApIHsgcmV0dXJuIG5ldyBTdG9wWGZvcm0oc3RvcCk7IH0pOwogICAgLy8gfSBlbHNlIHsKICAgIC8vICAgdGhpcy5zdG9wcyA9IFtdOwogICAgLy8gfQoKICAg
IHJldHVybiBfdGhpczM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoR3JhZGllbnRGaWxsWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnZ3JhZGllbnRGaWxsJyk7CgogICAgICBzd2l0Y2ggKG1vZGVsLmdyYWRpZW50KSB7CiAgICAgICAgY2FzZSAnYW5nbGUnOgogICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnZGVncmVlJywgbW9kZWwuZGVncmVlKTsKICAgICAgICAgIGJyZWFrOwoKICAg
ICAgICBjYXNlICdwYXRoJzoKICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3R5cGUnLCAncGF0aCcpOwoKICAgICAgICAgIGlmIChtb2RlbC5jZW50ZXIubGVmdCkgewogICAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdsZWZ0JywgbW9kZWwuY2VudGVyLmxlZnQpOwoKICAgICAgICAgICAgaWYgKG1vZGVsLmNlbnRlci5yaWdodCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgncmlnaHQnLCBtb2RlbC5jZW50ZXIubGVmdCk7CiAgICAgICAgICAgIH0K
ICAgICAgICAgIH0KCiAgICAgICAgICBpZiAobW9kZWwuY2VudGVyLnJpZ2h0KSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ3JpZ2h0JywgbW9kZWwuY2VudGVyLnJpZ2h0KTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAobW9kZWwuY2VudGVyLnRvcCkgewogICAgICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCd0b3AnLCBtb2RlbC5jZW50ZXIudG9wKTsKCiAgICAgICAgICAgIGlmIChtb2RlbC5jZW50ZXIuYm90dG9tID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICB4bWxTdHJlYW0u
YWRkQXR0cmlidXRlKCdib3R0b20nLCBtb2RlbC5jZW50ZXIudG9wKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChtb2RlbC5jZW50ZXIuYm90dG9tKSB7CiAgICAgICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ2JvdHRvbScsIG1vZGVsLmNlbnRlci5ib3R0b20pOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIHZhciBzdG9wWGZvcm0gPSB0aGlzLm1hcC5zdG9wOwogICAgICBtb2RlbC5zdG9w
cy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9wTW9kZWwpIHsKICAgICAgICBzdG9wWGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgc3RvcE1vZGVsKTsKICAgICAgfSk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChu
b2RlLm5hbWUpIHsKICAgICAgICBjYXNlICdncmFkaWVudEZpbGwnOgogICAgICAgICAgewogICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLm1vZGVsID0gewogICAgICAgICAgICAgIHN0b3BzOiBbXQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy5kZWdyZWUpIHsKICAgICAgICAgICAgICBtb2RlbC5ncmFkaWVudCA9ICdhbmdsZSc7CiAgICAgICAgICAgICAgbW9kZWwuZGVncmVlID0gcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLmRlZ3JlZSwgMTApOwogICAgICAgICAgICB9IGVsc2Ug
aWYgKG5vZGUuYXR0cmlidXRlcy50eXBlID09PSAncGF0aCcpIHsKICAgICAgICAgICAgICBtb2RlbC5ncmFkaWVudCA9ICdwYXRoJzsKICAgICAgICAgICAgICBtb2RlbC5jZW50ZXIgPSB7CiAgICAgICAgICAgICAgICBsZWZ0OiBub2RlLmF0dHJpYnV0ZXMubGVmdCA/IHBhcnNlRmxvYXQobm9kZS5hdHRyaWJ1dGVzLmxlZnQpIDogMCwKICAgICAgICAgICAgICAgIHRvcDogbm9kZS5hdHRyaWJ1dGVzLnRvcCA/IHBhcnNlRmxvYXQobm9kZS5hdHRyaWJ1dGVzLnRvcCkgOiAwCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAg
ICAgaWYgKG5vZGUuYXR0cmlidXRlcy5yaWdodCAhPT0gbm9kZS5hdHRyaWJ1dGVzLmxlZnQpIHsKICAgICAgICAgICAgICAgIG1vZGVsLmNlbnRlci5yaWdodCA9IG5vZGUuYXR0cmlidXRlcy5yaWdodCA/IHBhcnNlRmxvYXQobm9kZS5hdHRyaWJ1dGVzLnJpZ2h0KSA6IDA7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAobm9kZS5hdHRyaWJ1dGVzLmJvdHRvbSAhPT0gbm9kZS5hdHRyaWJ1dGVzLnRvcCkgewogICAgICAgICAgICAgICAgbW9kZWwuY2VudGVyLmJvdHRvbSA9IG5vZGUuYXR0cmlidXRlcy5ib3R0
b20gPyBwYXJzZUZsb2F0KG5vZGUuYXR0cmlidXRlcy5ib3R0b20pIDogMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQoKICAgICAgICBjYXNlICdzdG9wJzoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5tYXAuc3RvcDsKICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwgewog
ICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLm1vZGVsLnN0b3Bz
LnB1c2godGhpcy5wYXJzZXIubW9kZWwpOwogICAgICAgICAgdGhpcy5wYXJzZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogIm5hbWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnZ3JhZGllbnQnOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICdncmFkaWVudEZpbGwnOwogICAgfQogIH1dKTsK
CiAgcmV0dXJuIEdyYWRpZW50RmlsbFhmb3JtOwp9KEJhc2VYZm9ybSk7IC8vIEZpbGwgZW5jYXBzdWxhdGVzIHRyYW5zbGF0aW9uIGZyb20gZmlsbCBtb2RlbCB0by9mcm9tIHhsc3gKCgp2YXIgRmlsbFhmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtNCkgewogIF9pbmhlcml0cyhGaWxsWGZvcm0sIF9CYXNlWGZvcm00KTsKCiAgdmFyIF9zdXBlcjQgPSBfY3JlYXRlU3VwZXIoRmlsbFhmb3JtKTsKCiAgZnVuY3Rpb24gRmlsbFhmb3JtKCkgewogICAgdmFyIF90aGlzNDsKCiAgICBfY2xhc3NDYWxsQ2hl
Y2sodGhpcywgRmlsbFhmb3JtKTsKCiAgICBfdGhpczQgPSBfc3VwZXI0LmNhbGwodGhpcyk7CiAgICBfdGhpczQubWFwID0gewogICAgICBwYXR0ZXJuRmlsbDogbmV3IFBhdHRlcm5GaWxsWGZvcm0oKSwKICAgICAgZ3JhZGllbnRGaWxsOiBuZXcgR3JhZGllbnRGaWxsWGZvcm0oKQogICAgfTsKICAgIHJldHVybiBfdGhpczQ7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRmlsbFhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJl
YW0uYWRkUm9sbGJhY2soKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdmaWxsJyk7CgogICAgICBzd2l0Y2ggKG1vZGVsLnR5cGUpIHsKICAgICAgICBjYXNlICdwYXR0ZXJuJzoKICAgICAgICAgIHRoaXMubWFwLnBhdHRlcm5GaWxsLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdncmFkaWVudCc6CiAgICAgICAgICB0aGlzLm1hcC5ncmFkaWVudEZpbGwucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAg
ICAgICAgICB4bWxTdHJlYW0ucm9sbGJhY2soKTsKICAgICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICB4bWxTdHJlYW0uY29tbWl0KCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1l
KSB7CiAgICAgICAgY2FzZSAnZmlsbCc6CiAgICAgICAgICB0aGlzLm1vZGVsID0ge307CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5tYXBbbm9kZS5uYW1lXTsKCiAgICAgICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6
ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0KSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlVGV4dCh0ZXh0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UobmFtZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucGFyc2VyLnBhcnNlQ2xvc2UobmFtZSkpIHsKICAgICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLnBhcnNl
ci5tb2RlbDsKICAgICAgICAgIHRoaXMubW9kZWwudHlwZSA9IHRoaXMucGFyc2VyLm5hbWU7CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsaWRTdHlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRTdHlsZSh2YWx1ZSkgewogICAgICByZXR1cm4gRmlsbFhmb3JtLnZhbGlkUGF0dGVyblZhbHVlc1t2YWx1ZV07CiAgICB9CiAgfSwgewogICAga2V5OiAi
dGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ2ZpbGwnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEZpbGxYZm9ybTsKfShCYXNlWGZvcm0pOwoKRmlsbFhmb3JtLnZhbGlkUGF0dGVyblZhbHVlcyA9IFsnbm9uZScsICdzb2xpZCcsICdkYXJrVmVydGljYWwnLCAnZGFya0dyYXknLCAnbWVkaXVtR3JheScsICdsaWdodEdyYXknLCAnZ3JheTEyNScsICdncmF5MDYyNScsICdkYXJrSG9yaXpvbnRhbCcsICdkYXJrVmVydGljYWwnLCAnZGFya0Rvd24nLCAnZGFya1VwJywgJ2RhcmtHcmlkJywgJ2Rh
cmtUcmVsbGlzJywgJ2xpZ2h0SG9yaXpvbnRhbCcsICdsaWdodFZlcnRpY2FsJywgJ2xpZ2h0RG93bicsICdsaWdodFVwJywgJ2xpZ2h0R3JpZCcsICdsaWdodFRyZWxsaXMnLCAnbGlnaHRHcmlkJ10ucmVkdWNlKGZ1bmN0aW9uIChwLCB2KSB7CiAgcFt2XSA9IHRydWU7CiAgcmV0dXJuIHA7Cn0sIHt9KTsKRmlsbFhmb3JtLlN0b3BYZm9ybSA9IFN0b3BYZm9ybTsKRmlsbFhmb3JtLlBhdHRlcm5GaWxsWGZvcm0gPSBQYXR0ZXJuRmlsbFhmb3JtOwpGaWxsWGZvcm0uR3JhZGllbnRGaWxsWGZvcm0gPSBHcmFkaWVudEZpbGxYZm9y
bTsKbW9kdWxlLmV4cG9ydHMgPSBGaWxsWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzEsIi4vY29sb3IteGZvcm0iOjEyN31dLDEzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlw
ZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkg
eyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0
b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0K
CmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0
cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFz
TmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0g
U3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNl
bGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFBy
b3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJv
dG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBDb2xvclhmb3JtID0gcmVxdWlyZSgnLi9jb2xvci14Zm9ybScpOwoKdmFyIEJvb2xlYW5YZm9ybSA9IHJlcXVpcmUoJy4uL3NpbXBsZS9ib29sZWFuLXhmb3JtJyk7Cgp2YXIgSW50ZWdlclhmb3JtID0gcmVxdWlyZSgnLi4vc2ltcGxlL2ludGVnZXIteGZvcm0nKTsKCnZhciBTdHJpbmdYZm9ybSA9IHJlcXVpcmUoJy4uL3NpbXBsZS9zdHJpbmcteGZvcm0nKTsKCnZhciBVbmRlcmxpbmVYZm9ybSA9IHJl
cXVpcmUoJy4vdW5kZXJsaW5lLXhmb3JtJyk7Cgp2YXIgXyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2gnKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7IC8vIEZvbnQgZW5jYXBzdWxhdGVzIHRyYW5zbGF0aW9uIGZyb20gZm9udCBtb2RlbCB0byB4bHN4CgoKdmFyIEZvbnRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhGb250WGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEZvbnRY
Zm9ybSk7CgogIGZ1bmN0aW9uIEZvbnRYZm9ybShvcHRpb25zKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvbnRYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IEZvbnRYZm9ybS5PUFRJT05TOwogICAgX3RoaXMubWFwID0gewogICAgICBiOiB7CiAgICAgICAgcHJvcDogJ2JvbGQnLAogICAgICAgIHhmb3JtOiBuZXcgQm9vbGVhblhmb3JtKHsKICAgICAgICAgIHRhZzogJ2InLAogICAgICAgICAgYXR0cjogJ3Zh
bCcKICAgICAgICB9KQogICAgICB9LAogICAgICBpOiB7CiAgICAgICAgcHJvcDogJ2l0YWxpYycsCiAgICAgICAgeGZvcm06IG5ldyBCb29sZWFuWGZvcm0oewogICAgICAgICAgdGFnOiAnaScsCiAgICAgICAgICBhdHRyOiAndmFsJwogICAgICAgIH0pCiAgICAgIH0sCiAgICAgIHU6IHsKICAgICAgICBwcm9wOiAndW5kZXJsaW5lJywKICAgICAgICB4Zm9ybTogbmV3IFVuZGVybGluZVhmb3JtKCkKICAgICAgfSwKICAgICAgY2hhcnNldDogewogICAgICAgIHByb3A6ICdjaGFyc2V0JywKICAgICAgICB4Zm9ybTogbmV3IElu
dGVnZXJYZm9ybSh7CiAgICAgICAgICB0YWc6ICdjaGFyc2V0JywKICAgICAgICAgIGF0dHI6ICd2YWwnCiAgICAgICAgfSkKICAgICAgfSwKICAgICAgY29sb3I6IHsKICAgICAgICBwcm9wOiAnY29sb3InLAogICAgICAgIHhmb3JtOiBuZXcgQ29sb3JYZm9ybSgpCiAgICAgIH0sCiAgICAgIGNvbmRlbnNlOiB7CiAgICAgICAgcHJvcDogJ2NvbmRlbnNlJywKICAgICAgICB4Zm9ybTogbmV3IEJvb2xlYW5YZm9ybSh7CiAgICAgICAgICB0YWc6ICdjb25kZW5zZScsCiAgICAgICAgICBhdHRyOiAndmFsJwogICAgICAgIH0pCiAg
ICAgIH0sCiAgICAgIGV4dGVuZDogewogICAgICAgIHByb3A6ICdleHRlbmQnLAogICAgICAgIHhmb3JtOiBuZXcgQm9vbGVhblhmb3JtKHsKICAgICAgICAgIHRhZzogJ2V4dGVuZCcsCiAgICAgICAgICBhdHRyOiAndmFsJwogICAgICAgIH0pCiAgICAgIH0sCiAgICAgIGZhbWlseTogewogICAgICAgIHByb3A6ICdmYW1pbHknLAogICAgICAgIHhmb3JtOiBuZXcgSW50ZWdlclhmb3JtKHsKICAgICAgICAgIHRhZzogJ2ZhbWlseScsCiAgICAgICAgICBhdHRyOiAndmFsJwogICAgICAgIH0pCiAgICAgIH0sCiAgICAgIG91dGxp
bmU6IHsKICAgICAgICBwcm9wOiAnb3V0bGluZScsCiAgICAgICAgeGZvcm06IG5ldyBCb29sZWFuWGZvcm0oewogICAgICAgICAgdGFnOiAnb3V0bGluZScsCiAgICAgICAgICBhdHRyOiAndmFsJwogICAgICAgIH0pCiAgICAgIH0sCiAgICAgIHZlcnRBbGlnbjogewogICAgICAgIHByb3A6ICd2ZXJ0QWxpZ24nLAogICAgICAgIHhmb3JtOiBuZXcgU3RyaW5nWGZvcm0oewogICAgICAgICAgdGFnOiAndmVydEFsaWduJywKICAgICAgICAgIGF0dHI6ICd2YWwnCiAgICAgICAgfSkKICAgICAgfSwKICAgICAgc2NoZW1lOiB7CiAg
ICAgICAgcHJvcDogJ3NjaGVtZScsCiAgICAgICAgeGZvcm06IG5ldyBTdHJpbmdYZm9ybSh7CiAgICAgICAgICB0YWc6ICdzY2hlbWUnLAogICAgICAgICAgYXR0cjogJ3ZhbCcKICAgICAgICB9KQogICAgICB9LAogICAgICBzaGFkb3c6IHsKICAgICAgICBwcm9wOiAnc2hhZG93JywKICAgICAgICB4Zm9ybTogbmV3IEJvb2xlYW5YZm9ybSh7CiAgICAgICAgICB0YWc6ICdzaGFkb3cnLAogICAgICAgICAgYXR0cjogJ3ZhbCcKICAgICAgICB9KQogICAgICB9LAogICAgICBzdHJpa2U6IHsKICAgICAgICBwcm9wOiAnc3RyaWtl
JywKICAgICAgICB4Zm9ybTogbmV3IEJvb2xlYW5YZm9ybSh7CiAgICAgICAgICB0YWc6ICdzdHJpa2UnLAogICAgICAgICAgYXR0cjogJ3ZhbCcKICAgICAgICB9KQogICAgICB9LAogICAgICBzejogewogICAgICAgIHByb3A6ICdzaXplJywKICAgICAgICB4Zm9ybTogbmV3IEludGVnZXJYZm9ybSh7CiAgICAgICAgICB0YWc6ICdzeicsCiAgICAgICAgICBhdHRyOiAndmFsJwogICAgICAgIH0pCiAgICAgIH0KICAgIH07CiAgICBfdGhpcy5tYXBbX3RoaXMub3B0aW9ucy5mb250TmFtZVRhZ10gPSB7CiAgICAgIHByb3A6ICdu
YW1lJywKICAgICAgeGZvcm06IG5ldyBTdHJpbmdYZm9ybSh7CiAgICAgICAgdGFnOiBfdGhpcy5vcHRpb25zLmZvbnROYW1lVGFnLAogICAgICAgIGF0dHI6ICd2YWwnCiAgICAgIH0pCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEZvbnRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgdmFyIG1hcCA9IHRoaXMubWFwOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUodGhpcy5vcHRpb25zLnRhZ05h
bWUpOwoKICAgICAgXy5lYWNoKHRoaXMubWFwLCBmdW5jdGlvbiAoZGVmbiwgdGFnKSB7CiAgICAgICAgbWFwW3RhZ10ueGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWxbZGVmbi5wcm9wXSk7CiAgICAgIH0pOwoKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVy
biB0cnVlOwogICAgICB9CgogICAgICBpZiAodGhpcy5tYXBbbm9kZS5uYW1lXSkgewogICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5tYXBbbm9kZS5uYW1lXS54Zm9ybTsKICAgICAgICByZXR1cm4gdGhpcy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgdGhpcy5vcHRpb25zLnRhZ05hbWU6CiAgICAgICAgICB0aGlzLm1vZGVsID0ge307CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBm
YWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlciAmJiAhdGhpcy5wYXJzZXIucGFyc2VDbG9zZShuYW1lKSkgewogICAgICAgIHZh
ciBpdGVtID0gdGhpcy5tYXBbbmFtZV07CgogICAgICAgIGlmICh0aGlzLnBhcnNlci5tb2RlbCkgewogICAgICAgICAgdGhpcy5tb2RlbFtpdGVtLnByb3BdID0gdGhpcy5wYXJzZXIubW9kZWw7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLm9wdGlvbnMudGFnTmFtZToKICAgICAgICAgIHJldHVybiBmYWxzZTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVy
biB0cnVlOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnRhZ05hbWU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRm9udFhmb3JtOwp9KEJhc2VYZm9ybSk7CgpGb250WGZvcm0uT1BUSU9OUyA9IHsKICB0YWdOYW1lOiAnZm9udCcsCiAgZm9udE5hbWVUYWc6ICduYW1lJwp9Owptb2R1bGUuZXhwb3J0cyA9IEZvbnRYZm9ybTsKCn0seyIuLi8uLi8uLi91dGlscy91bmRlci1kYXNoIjoyNSwiLi4vYmFzZS14Zm9ybSI6
MzEsIi4uL3NpbXBsZS9ib29sZWFuLXhmb3JtIjoxMTUsIi4uL3NpbXBsZS9pbnRlZ2VyLXhmb3JtIjoxMTcsIi4uL3NpbXBsZS9zdHJpbmcteGZvcm0iOjExOCwiLi9jb2xvci14Zm9ybSI6MTI3LCIuL3VuZGVybGluZS14Zm9ybSI6MTM1fV0sMTMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRv
ciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5z
dGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2Ny
aXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZp
bmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVy
Q2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0
UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZs
ZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3Nl
cnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4g
ZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0
LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIF8gPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy91bmRlci1kYXNoJyk7Cgp2YXIgZGVmYXVsdE51bUZvcm1hdHMgPSByZXF1aXJlKCcuLi8uLi9kZWZhdWx0bnVtZm9ybWF0cycpOwoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCmZ1bmN0aW9uIGhhc2hEZWZhdWx0
Rm9ybWF0cygpIHsKICB2YXIgaGFzaCA9IHt9OwoKICBfLmVhY2goZGVmYXVsdE51bUZvcm1hdHMsIGZ1bmN0aW9uIChkbmYsIGlkKSB7CiAgICBpZiAoZG5mLmYpIHsKICAgICAgaGFzaFtkbmYuZl0gPSBwYXJzZUludChpZCwgMTApOwogICAgfSAvLyBhdCBzb21lIHBvaW50LCBhZGQgdGhlIG90aGVyIGN1bHR1cmVzIGhlcmUuLi4KCiAgfSk7CgogIHJldHVybiBoYXNoOwp9Cgp2YXIgZGVmYXVsdEZtdEhhc2ggPSBoYXNoRGVmYXVsdEZvcm1hdHMoKTsgLy8gTnVtRm10IGVuY2Fwc3VsYXRlcyB0cmFuc2xhdGlvbiBiZXR3ZWVu
IG51bWJlciBmb3JtYXQgYW5kIHhsc3gKCnZhciBOdW1GbXRYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhOdW1GbXRYZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTnVtRm10WGZvcm0pOwoKICBmdW5jdGlvbiBOdW1GbXRYZm9ybShpZCwgZm9ybWF0Q29kZSkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdW1GbXRYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlz
LmlkID0gaWQ7CiAgICBfdGhpcy5mb3JtYXRDb2RlID0gZm9ybWF0Q29kZTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhOdW1GbXRYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLmxlYWZOb2RlKCdudW1GbXQnLCB7CiAgICAgICAgbnVtRm10SWQ6IG1vZGVsLmlkLAogICAgICAgIGZvcm1hdENvZGU6IG1vZGVsLmZvcm1hdENvZGUKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAi
cGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBzd2l0Y2ggKG5vZGUubmFtZSkgewogICAgICAgIGNhc2UgJ251bUZtdCc6CiAgICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgICBpZDogcGFyc2VJbnQobm9kZS5hdHRyaWJ1dGVzLm51bUZtdElkLCAxMCksCiAgICAgICAgICAgIGZvcm1hdENvZGU6IG5vZGUuYXR0cmlidXRlcy5mb3JtYXRDb2RlLnJlcGxhY2UoL1tcXF0oLikvZywgJyQxJykKICAgICAgICAgIH07CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAg
ICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ251bUZtdCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4g
TnVtRm10WGZvcm07Cn0oQmFzZVhmb3JtKTsKCk51bUZtdFhmb3JtLmdldERlZmF1bHRGbXRJZCA9IGZ1bmN0aW9uIGdldERlZmF1bHRGbXRJZChmb3JtYXRDb2RlKSB7CiAgcmV0dXJuIGRlZmF1bHRGbXRIYXNoW2Zvcm1hdENvZGVdOwp9OwoKTnVtRm10WGZvcm0uZ2V0RGVmYXVsdEZtdENvZGUgPSBmdW5jdGlvbiBnZXREZWZhdWx0Rm10Q29kZShudW1GbXRJZCkgewogIHJldHVybiBkZWZhdWx0TnVtRm9ybWF0c1tudW1GbXRJZF0gJiYgZGVmYXVsdE51bUZvcm1hdHNbbnVtRm10SWRdLmY7Cn07Cgptb2R1bGUuZXhwb3J0cyA9
IE51bUZtdFhmb3JtOwoKfSx7Ii4uLy4uLy4uL3V0aWxzL3VuZGVyLWRhc2giOjI1LCIuLi8uLi9kZWZhdWx0bnVtZm9ybWF0cyI6MjksIi4uL2Jhc2UteGZvcm0iOjMxfV0sMTMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90
eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGlu
c3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIg
aW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7
IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVl
OiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVT
dXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJn
ZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9h
c3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1
cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlw
ZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciB2YWxpZGF0aW9uID0gewogIGJvb2xlYW46IGZ1bmN0aW9uIGJvb2xlYW4odmFsdWUsIGRmbHQpIHsKICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiBkZmx0OwogICAgfQoKICAgIHJldHVybiB2YWx1ZTsKICB9Cn07IC8vIFByb3RlY3Rpb24gZW5jYXBzdWxh
dGVzIHRyYW5zbGF0aW9uIGZyb20gc3R5bGUucHJvdGVjdGlvbiBtb2RlbCB0by9mcm9tIHhsc3gKCnZhciBQcm90ZWN0aW9uWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoUHJvdGVjdGlvblhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihQcm90ZWN0aW9uWGZvcm0pOwoKICBmdW5jdGlvbiBQcm90ZWN0aW9uWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdGVjdGlvblhmb3JtKTsKCiAgICByZXR1cm4gX3N1cGVy
LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUHJvdGVjdGlvblhmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0uYWRkUm9sbGJhY2soKTsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdwcm90ZWN0aW9uJyk7CiAgICAgIHZhciBpc1ZhbGlkID0gZmFsc2U7CgogICAgICBmdW5jdGlvbiBhZGQobmFtZSwgdmFsdWUpIHsKICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgewog
ICAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7CiAgICAgICAgICBpc1ZhbGlkID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGFkZCgnbG9ja2VkJywgdmFsaWRhdGlvbi5ib29sZWFuKG1vZGVsLmxvY2tlZCwgdHJ1ZSkgPyB1bmRlZmluZWQgOiAnMCcpOwogICAgICBhZGQoJ2hpZGRlbicsIHZhbGlkYXRpb24uYm9vbGVhbihtb2RlbC5oaWRkZW4sIGZhbHNlKSA/ICcxJyA6IHVuZGVmaW5lZCk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKCiAgICAgIGlmIChpc1ZhbGlkKSB7
CiAgICAgICAgeG1sU3RyZWFtLmNvbW1pdCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHhtbFN0cmVhbS5yb2xsYmFjaygpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICB2YXIgbW9kZWwgPSB7CiAgICAgICAgbG9ja2VkOiAhKG5vZGUuYXR0cmlidXRlcy5sb2NrZWQgPT09ICcwJyksCiAgICAgICAgaGlkZGVuOiBub2RlLmF0dHJpYnV0ZXMuaGlkZGVuID09PSAnMScKICAgICAgfTsgLy8gb25seSB3YW50IHRvIHJl
Y29yZCBtb2RlbHMgdGhhdCBkaWZmZXIgZnJvbSBkZWZhdWx0cwoKICAgICAgdmFyIGlzU2lnbmlmaWNhbnQgPSAhbW9kZWwubG9ja2VkIHx8IG1vZGVsLmhpZGRlbjsKICAgICAgdGhpcy5tb2RlbCA9IGlzU2lnbmlmaWNhbnQgPyBtb2RlbCA6IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQoKSB7fQogIH0sIHsKICAgIGtleTogInBhcnNlQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlQ2xvc2UoKSB7CiAgICAgIHJldHVybiBmYWxzZTsK
ICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0YWciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAncHJvdGVjdGlvbic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUHJvdGVjdGlvblhmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFByb3RlY3Rpb25YZm9ybTsKCn0seyIuLi9iYXNlLXhmb3JtIjozMX1dLDEzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7
IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7
IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVz
Y3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMo
Q29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIp
OyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJv
dG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5l
d1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwg
dHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlw
ZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5
cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgQWxpZ25tZW50WGZvcm0gPSByZXF1aXJlKCcuL2FsaWdubWVudC14Zm9ybScpOwoKdmFyIFByb3RlY3Rpb25YZm9y
bSA9IHJlcXVpcmUoJy4vcHJvdGVjdGlvbi14Zm9ybScpOyAvLyA8eGYgbnVtRm10SWQ9IltudW1GbXRJZF0iIGZvbnRJZD0iW2ZvbnRJZF0iIGZpbGxJZD0iW2ZpbGxJZF0iIGJvcmRlcklkPSJbeGYuYm9yZGVySWRdIiB4ZklkPSJbeGZJZF0iPgovLyAgIE9wdGlvbmFsIDxhbGlnbm1lbnQ+Ci8vICAgT3B0aW9uYWwgPHByb3RlY3Rpb24+Ci8vIDwveGY+Ci8vIFN0eWxlIGFzc2lzdHMgdHJhbnNsYXRpb24gZnJvbSBzdHlsZSBtb2RlbCB0by9mcm9tIHhsc3gKCgp2YXIgU3R5bGVYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlv
biAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhTdHlsZVhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTdHlsZVhmb3JtKTsKCiAgZnVuY3Rpb24gU3R5bGVYZm9ybShvcHRpb25zKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy54ZklkID0gISEob3B0aW9ucyAmJiBvcHRpb25zLnhmSWQpOwogICAgX3RoaXMubWFwID0gewogICAgICBhbGlnbm1lbnQ6IG5l
dyBBbGlnbm1lbnRYZm9ybSgpLAogICAgICBwcm90ZWN0aW9uOiBuZXcgUHJvdGVjdGlvblhmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3R5bGVYZm9ybSwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCd4ZicsIHsKICAgICAgICBudW1GbXRJZDogbW9kZWwubnVtRm10SWQgfHwgMCwKICAgICAgICBmb250SWQ6IG1vZGVsLmZvbnRJZCB8fCAwLAogICAgICAg
IGZpbGxJZDogbW9kZWwuZmlsbElkIHx8IDAsCiAgICAgICAgYm9yZGVySWQ6IG1vZGVsLmJvcmRlcklkIHx8IDAKICAgICAgfSk7CgogICAgICBpZiAodGhpcy54ZklkKSB7CiAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgneGZJZCcsIG1vZGVsLnhmSWQgfHwgMCk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5udW1GbXRJZCkgewogICAgICAgIHhtbFN0cmVhbS5hZGRBdHRyaWJ1dGUoJ2FwcGx5TnVtYmVyRm9ybWF0JywgJzEnKTsKICAgICAgfQoKICAgICAgaWYgKG1vZGVsLmZvbnRJZCkgewogICAgICAgIHhtbFN0
cmVhbS5hZGRBdHRyaWJ1dGUoJ2FwcGx5Rm9udCcsICcxJyk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5maWxsSWQpIHsKICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdhcHBseUZpbGwnLCAnMScpOwogICAgICB9CgogICAgICBpZiAobW9kZWwuYm9yZGVySWQpIHsKICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdhcHBseUJvcmRlcicsICcxJyk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5hbGlnbm1lbnQpIHsKICAgICAgICB4bWxTdHJlYW0uYWRkQXR0cmlidXRlKCdhcHBseUFsaWdubWVudCcsICcx
Jyk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5wcm90ZWN0aW9uKSB7CiAgICAgICAgeG1sU3RyZWFtLmFkZEF0dHJpYnV0ZSgnYXBwbHlQcm90ZWN0aW9uJywgJzEnKTsKICAgICAgfQogICAgICAvKioNCiAgICAgICAqIFJlbmRlcmluZyB0YWdzIGNhdXNlcyBjbG9zZSBvZiBYTUwgc3RyZWFtLg0KICAgICAgICogVGhlcmVmb3JlIGFkZGluZyBhdHRyaWJ1dGVzIG11c3QgYmUgZG9uZSBiZWZvcmUgcmVuZGVyaW5nIHRhZ3MuDQogICAgICAgKi8KCgogICAgICBpZiAobW9kZWwuYWxpZ25tZW50KSB7CiAgICAgICAgdGhpcy5t
YXAuYWxpZ25tZW50LnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmFsaWdubWVudCk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5wcm90ZWN0aW9uKSB7CiAgICAgICAgdGhpcy5tYXAucHJvdGVjdGlvbi5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5wcm90ZWN0aW9uKTsKICAgICAgfQoKICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhp
cy5wYXJzZXIucGFyc2VPcGVuKG5vZGUpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IC8vIHVzZWQgZHVyaW5nIHNheCBwYXJzaW5nIG9mIHhtbCB0byBidWlsZCBmb250IG9iamVjdAoKCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSAneGYnOgogICAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgICAgbnVtRm10SWQ6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5udW1GbXRJZCwgMTApLAogICAgICAgICAgICBmb250SWQ6IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy5mb250SWQsIDEw
KSwKICAgICAgICAgICAgZmlsbElkOiBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMuZmlsbElkLCAxMCksCiAgICAgICAgICAgIGJvcmRlcklkOiBwYXJzZUludChub2RlLmF0dHJpYnV0ZXMuYm9yZGVySWQsIDEwKQogICAgICAgICAgfTsKCiAgICAgICAgICBpZiAodGhpcy54ZklkKSB7CiAgICAgICAgICAgIHRoaXMubW9kZWwueGZJZCA9IHBhcnNlSW50KG5vZGUuYXR0cmlidXRlcy54ZklkLCAxMCk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGNhc2UgJ2FsaWdubWVudCc6CiAgICAgICAg
ICB0aGlzLnBhcnNlciA9IHRoaXMubWFwLmFsaWdubWVudDsKICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBjYXNlICdwcm90ZWN0aW9uJzoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdGhpcy5tYXAucHJvdGVjdGlvbjsKICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwgewogICAg
a2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICBpZiAodGhpcy5tYXAucHJvdGVj
dGlvbiA9PT0gdGhpcy5wYXJzZXIpIHsKICAgICAgICAgICAgdGhpcy5tb2RlbC5wcm90ZWN0aW9uID0gdGhpcy5wYXJzZXIubW9kZWw7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLm1vZGVsLmFsaWdubWVudCA9IHRoaXMucGFyc2VyLm1vZGVsOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMucGFyc2VyID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBuYW1lICE9PSAneGYnOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAg
ICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd4Zic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU3R5bGVYZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxlLmV4cG9ydHMgPSBTdHlsZVhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxLCIuL2FsaWdubWVudC14Zm9ybSI6MTI1LCIuL3Byb3RlY3Rpb24teGZvcm0iOjEzMn1dLDEzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7
IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7
IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVz
Y3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMo
Q29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIp
OyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJv
dG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5l
d1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwg
dHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlw
ZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5
cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovCnZhciBFbnVtcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2RvYy9lbnVtcycpOwoKdmFyIFhtbFN0cmVhbSA9IHJlcXVpcmUoJy4u
Ly4uLy4uL3V0aWxzL3htbC1zdHJlYW0nKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgU3RhdGljWGZvcm0gPSByZXF1aXJlKCcuLi9zdGF0aWMteGZvcm0nKTsKCnZhciBMaXN0WGZvcm0gPSByZXF1aXJlKCcuLi9saXN0LXhmb3JtJyk7Cgp2YXIgRm9udFhmb3JtID0gcmVxdWlyZSgnLi9mb250LXhmb3JtJyk7Cgp2YXIgRmlsbFhmb3JtID0gcmVxdWlyZSgnLi9maWxsLXhmb3JtJyk7Cgp2YXIgQm9yZGVyWGZvcm0gPSByZXF1aXJlKCcuL2JvcmRlci14Zm9ybScpOwoKdmFyIE51bUZt
dFhmb3JtID0gcmVxdWlyZSgnLi9udW1mbXQteGZvcm0nKTsKCnZhciBTdHlsZVhmb3JtID0gcmVxdWlyZSgnLi9zdHlsZS14Zm9ybScpOwoKdmFyIER4Zlhmb3JtID0gcmVxdWlyZSgnLi9keGYteGZvcm0nKTsgLy8gY3VzdG9tIG51bWZtdCBpZHMgc3RhcnQgaGVyZQoKCnZhciBOVU1GTVRfQkFTRSA9IDE2NDsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gU3R5bGVzWGZvcm0gaXMgdXNlZCB0byBnZW5lcmF0ZSBhbmQgcGFy
c2UgdGhlIHN0eWxlcy54bWwgZmlsZQovLyBpdCBtYW5hZ2VzIHRoZSBjb2xsZWN0aW9ucyBvZiBmb250cywgbnVtYmVyIGZvcm1hdHMsIGFsaWdubWVudHMsIGV0YwoKdmFyIFN0eWxlc1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFN0eWxlc1hmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTdHlsZXNYZm9ybSk7CgogIGZ1bmN0aW9uIFN0eWxlc1hmb3JtKGluaXRpYWxpc2UpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxs
Q2hlY2sodGhpcywgU3R5bGVzWGZvcm0pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpcy5tYXAgPSB7CiAgICAgIG51bUZtdHM6IG5ldyBMaXN0WGZvcm0oewogICAgICAgIHRhZzogJ251bUZtdHMnLAogICAgICAgIGNvdW50OiB0cnVlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBOdW1GbXRYZm9ybSgpCiAgICAgIH0pLAogICAgICBmb250czogbmV3IExpc3RYZm9ybSh7CiAgICAgICAgdGFnOiAnZm9udHMnLAogICAgICAgIGNvdW50OiB0cnVlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBGb250
WGZvcm0oKSwKICAgICAgICAkOiB7CiAgICAgICAgICAneDE0YWM6a25vd25Gb250cyc6IDEKICAgICAgICB9CiAgICAgIH0pLAogICAgICBmaWxsczogbmV3IExpc3RYZm9ybSh7CiAgICAgICAgdGFnOiAnZmlsbHMnLAogICAgICAgIGNvdW50OiB0cnVlLAogICAgICAgIGNoaWxkWGZvcm06IG5ldyBGaWxsWGZvcm0oKQogICAgICB9KSwKICAgICAgYm9yZGVyczogbmV3IExpc3RYZm9ybSh7CiAgICAgICAgdGFnOiAnYm9yZGVycycsCiAgICAgICAgY291bnQ6IHRydWUsCiAgICAgICAgY2hpbGRYZm9ybTogbmV3IEJvcmRlclhm
b3JtKCkKICAgICAgfSksCiAgICAgIGNlbGxTdHlsZVhmczogbmV3IExpc3RYZm9ybSh7CiAgICAgICAgdGFnOiAnY2VsbFN0eWxlWGZzJywKICAgICAgICBjb3VudDogdHJ1ZSwKICAgICAgICBjaGlsZFhmb3JtOiBuZXcgU3R5bGVYZm9ybSgpCiAgICAgIH0pLAogICAgICBjZWxsWGZzOiBuZXcgTGlzdFhmb3JtKHsKICAgICAgICB0YWc6ICdjZWxsWGZzJywKICAgICAgICBjb3VudDogdHJ1ZSwKICAgICAgICBjaGlsZFhmb3JtOiBuZXcgU3R5bGVYZm9ybSh7CiAgICAgICAgICB4ZklkOiB0cnVlCiAgICAgICAgfSkKICAgICAg
fSksCiAgICAgIGR4ZnM6IG5ldyBMaXN0WGZvcm0oewogICAgICAgIHRhZzogJ2R4ZnMnLAogICAgICAgIGFsd2F5czogdHJ1ZSwKICAgICAgICBjb3VudDogdHJ1ZSwKICAgICAgICBjaGlsZFhmb3JtOiBuZXcgRHhmWGZvcm0oKQogICAgICB9KSwKICAgICAgLy8gZm9yIHN0eWxlIG1hbmFnZXIKICAgICAgbnVtRm10OiBuZXcgTnVtRm10WGZvcm0oKSwKICAgICAgZm9udDogbmV3IEZvbnRYZm9ybSgpLAogICAgICBmaWxsOiBuZXcgRmlsbFhmb3JtKCksCiAgICAgIGJvcmRlcjogbmV3IEJvcmRlclhmb3JtKCksCiAgICAgIHN0
eWxlOiBuZXcgU3R5bGVYZm9ybSh7CiAgICAgICAgeGZJZDogdHJ1ZQogICAgICB9KSwKICAgICAgY2VsbFN0eWxlczogU3R5bGVzWGZvcm0uU1RBVElDX1hGT1JNUy5jZWxsU3R5bGVzLAogICAgICB0YWJsZVN0eWxlczogU3R5bGVzWGZvcm0uU1RBVElDX1hGT1JNUy50YWJsZVN0eWxlcywKICAgICAgZXh0THN0OiBTdHlsZXNYZm9ybS5TVEFUSUNfWEZPUk1TLmV4dExzdAogICAgfTsKCiAgICBpZiAoaW5pdGlhbGlzZSkgewogICAgICAvLyBTdHlsZXNYZm9ybSBhbHNvIGFjdHMgYXMgc3R5bGUgbWFuYWdlciBhbmQgaXMgdXNl
ZCB0byBidWlsZCB1cCBzdHlsZXMtbW9kZWwgZHVyaW5nIHdvcmtzaGVldCBwcm9jZXNzaW5nCiAgICAgIF90aGlzLmluaXQoKTsKICAgIH0KCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3R5bGVzWGZvcm0sIFt7CiAgICBrZXk6ICJpbml0SW5kZXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRJbmRleCgpIHsKICAgICAgdGhpcy5pbmRleCA9IHsKICAgICAgICBzdHlsZToge30sCiAgICAgICAgbnVtRm10OiB7fSwKICAgICAgICBudW1GbXROZXh0SWQ6IDE2NCwKICAgICAgICAvLyBzdGFydCBjdXN0
b20gZm9ybWF0IGlkcyBoZXJlCiAgICAgICAgZm9udDoge30sCiAgICAgICAgYm9yZGVyOiB7fSwKICAgICAgICBmaWxsOiB7fQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImluaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgIC8vIFByZXBhcmUgZm9yIFN0eWxlIE1hbmFnZXIgcm9sZQogICAgICB0aGlzLm1vZGVsID0gewogICAgICAgIHN0eWxlczogW10sCiAgICAgICAgbnVtRm10czogW10sCiAgICAgICAgZm9udHM6IFtdLAogICAgICAgIGJvcmRlcnM6IFtdLAogICAgICAgIGZpbGxzOiBb
XSwKICAgICAgICBkeGZzOiBbXQogICAgICB9OwogICAgICB0aGlzLmluaXRJbmRleCgpOyAvLyBkZWZhdWx0ICh6ZXJvKSBib3JkZXIKCiAgICAgIHRoaXMuX2FkZEJvcmRlcih7fSk7IC8vIGFkZCBkZWZhdWx0IChhbGwgemVybykgc3R5bGUKCgogICAgICB0aGlzLl9hZGRTdHlsZSh7CiAgICAgICAgbnVtRm10SWQ6IDAsCiAgICAgICAgZm9udElkOiAwLAogICAgICAgIGZpbGxJZDogMCwKICAgICAgICBib3JkZXJJZDogMCwKICAgICAgICB4ZklkOiAwCiAgICAgIH0pOyAvLyBhZGQgZGVmYXVsdCBmaWxscwoKCiAgICAgIHRo
aXMuX2FkZEZpbGwoewogICAgICAgIHR5cGU6ICdwYXR0ZXJuJywKICAgICAgICBwYXR0ZXJuOiAnbm9uZScKICAgICAgfSk7CgogICAgICB0aGlzLl9hZGRGaWxsKHsKICAgICAgICB0eXBlOiAncGF0dGVybicsCiAgICAgICAgcGF0dGVybjogJ2dyYXkxMjUnCiAgICAgIH0pOwoKICAgICAgdGhpcy53ZWFrTWFwID0gbmV3IFdlYWtNYXAoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIG1vZGVsID0gbW9kZWwgfHwgdGhp
cy5tb2RlbDsgLy8KICAgICAgLy8gICA8Zm9udHMgY291bnQ9IjIiIHgxNGFjOmtub3duRm9udHM9IjEiPgoKICAgICAgeG1sU3RyZWFtLm9wZW5YbWwoWG1sU3RyZWFtLlN0ZERvY0F0dHJpYnV0ZXMpOwogICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ3N0eWxlU2hlZXQnLCBTdHlsZXNYZm9ybS5TVFlMRVNIRUVUX0FUVFJJQlVURVMpOwoKICAgICAgaWYgKHRoaXMuaW5kZXgpIHsKICAgICAgICAvLyBtb2RlbCBoYXMgYmVlbiBidWlsdCBieSBzdHlsZSBtYW5hZ2VyIHJvbGUgKGNvbnRhaW5zIHhtbCkKICAgICAgICBpZiAobW9k
ZWwubnVtRm10cyAmJiBtb2RlbC5udW1GbXRzLmxlbmd0aCkgewogICAgICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdudW1GbXRzJywgewogICAgICAgICAgICBjb3VudDogbW9kZWwubnVtRm10cy5sZW5ndGgKICAgICAgICAgIH0pOwogICAgICAgICAgbW9kZWwubnVtRm10cy5mb3JFYWNoKGZ1bmN0aW9uIChudW1GbXRYbWwpIHsKICAgICAgICAgICAgeG1sU3RyZWFtLndyaXRlWG1sKG51bUZtdFhtbCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgICAgICB9CgogICAgICAgIGlm
ICghbW9kZWwuZm9udHMubGVuZ3RoKSB7CiAgICAgICAgICAvLyBkZWZhdWx0ICh6ZXJvKSBmb250CiAgICAgICAgICB0aGlzLl9hZGRGb250KHsKICAgICAgICAgICAgc2l6ZTogMTEsCiAgICAgICAgICAgIGNvbG9yOiB7CiAgICAgICAgICAgICAgdGhlbWU6IDEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbmFtZTogJ0NhbGlicmknLAogICAgICAgICAgICBmYW1pbHk6IDIsCiAgICAgICAgICAgIHNjaGVtZTogJ21pbm9yJwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ2Zv
bnRzJywgewogICAgICAgICAgY291bnQ6IG1vZGVsLmZvbnRzLmxlbmd0aCwKICAgICAgICAgICd4MTRhYzprbm93bkZvbnRzJzogMQogICAgICAgIH0pOwogICAgICAgIG1vZGVsLmZvbnRzLmZvckVhY2goZnVuY3Rpb24gKGZvbnRYbWwpIHsKICAgICAgICAgIHhtbFN0cmVhbS53cml0ZVhtbChmb250WG1sKTsKICAgICAgICB9KTsKICAgICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICAgICAgeG1sU3RyZWFtLm9wZW5Ob2RlKCdmaWxscycsIHsKICAgICAgICAgIGNvdW50OiBtb2RlbC5maWxscy5sZW5ndGgKICAgICAg
ICB9KTsKICAgICAgICBtb2RlbC5maWxscy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxsWG1sKSB7CiAgICAgICAgICB4bWxTdHJlYW0ud3JpdGVYbWwoZmlsbFhtbCk7CiAgICAgICAgfSk7CiAgICAgICAgeG1sU3RyZWFtLmNsb3NlTm9kZSgpOwogICAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSgnYm9yZGVycycsIHsKICAgICAgICAgIGNvdW50OiBtb2RlbC5ib3JkZXJzLmxlbmd0aAogICAgICAgIH0pOwogICAgICAgIG1vZGVsLmJvcmRlcnMuZm9yRWFjaChmdW5jdGlvbiAoYm9yZGVyWG1sKSB7CiAgICAgICAgICB4bWxTdHJlYW0u
d3JpdGVYbWwoYm9yZGVyWG1sKTsKICAgICAgICB9KTsKICAgICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICAgICAgdGhpcy5tYXAuY2VsbFN0eWxlWGZzLnJlbmRlcih4bWxTdHJlYW0sIFt7CiAgICAgICAgICBudW1GbXRJZDogMCwKICAgICAgICAgIGZvbnRJZDogMCwKICAgICAgICAgIGZpbGxJZDogMCwKICAgICAgICAgIGJvcmRlcklkOiAwLAogICAgICAgICAgeGZJZDogMAogICAgICAgIH1dKTsKICAgICAgICB4bWxTdHJlYW0ub3Blbk5vZGUoJ2NlbGxYZnMnLCB7CiAgICAgICAgICBjb3VudDogbW9kZWwuc3R5
bGVzLmxlbmd0aAogICAgICAgIH0pOwogICAgICAgIG1vZGVsLnN0eWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZVhtbCkgewogICAgICAgICAgeG1sU3RyZWFtLndyaXRlWG1sKHN0eWxlWG1sKTsKICAgICAgICB9KTsKICAgICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gbW9kZWwgaXMgcGxhaW4gSlNPTiBhbmQgbmVlZHMgdG8gYmUgeGZvcm1lZAogICAgICAgIHRoaXMubWFwLm51bUZtdHMucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwubnVtRm10cyk7CiAgICAgICAgdGhpcy5t
YXAuZm9udHMucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuZm9udHMpOwogICAgICAgIHRoaXMubWFwLmZpbGxzLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmZpbGxzKTsKICAgICAgICB0aGlzLm1hcC5ib3JkZXJzLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmJvcmRlcnMpOwogICAgICAgIHRoaXMubWFwLmNlbGxTdHlsZVhmcy5yZW5kZXIoeG1sU3RyZWFtLCBbewogICAgICAgICAgbnVtRm10SWQ6IDAsCiAgICAgICAgICBmb250SWQ6IDAsCiAgICAgICAgICBmaWxsSWQ6IDAsCiAgICAgICAgICBib3JkZXJJZDogMCwKICAgICAg
ICAgIHhmSWQ6IDAKICAgICAgICB9XSk7CiAgICAgICAgdGhpcy5tYXAuY2VsbFhmcy5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5zdHlsZXMpOwogICAgICB9CgogICAgICBTdHlsZXNYZm9ybS5TVEFUSUNfWEZPUk1TLmNlbGxTdHlsZXMucmVuZGVyKHhtbFN0cmVhbSk7CiAgICAgIHRoaXMubWFwLmR4ZnMucmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwuZHhmcyk7CiAgICAgIFN0eWxlc1hmb3JtLlNUQVRJQ19YRk9STVMudGFibGVTdHlsZXMucmVuZGVyKHhtbFN0cmVhbSk7CiAgICAgIFN0eWxlc1hmb3JtLlNUQVRJQ19YRk9STVMu
ZXh0THN0LnJlbmRlcih4bWxTdHJlYW0pOwogICAgICB4bWxTdHJlYW0uY2xvc2VOb2RlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9wZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSAnc3R5bGVTaGVldCc6CiAgICAgICAgICB0aGlzLmluaXRJbmRleCgp
OwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwW25vZGUubmFtZV07CgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7
CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBz
d2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlICdzdHlsZVNoZWV0JzoKICAgICAgICAgIHsKICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHt9OwoKICAgICAgICAgICAgdmFyIGFkZCA9IGZ1bmN0aW9uIGFkZChwcm9wTmFtZSwgeGZvcm0pIHsKICAgICAgICAgICAgICBpZiAoeGZvcm0ubW9kZWwgJiYgeGZvcm0ubW9kZWwubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBfdGhpczIubW9kZWxbcHJvcE5hbWVdID0geGZvcm0ubW9kZWw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgYWRkKCdudW1G
bXRzJywgdGhpcy5tYXAubnVtRm10cyk7CiAgICAgICAgICAgIGFkZCgnZm9udHMnLCB0aGlzLm1hcC5mb250cyk7CiAgICAgICAgICAgIGFkZCgnZmlsbHMnLCB0aGlzLm1hcC5maWxscyk7CiAgICAgICAgICAgIGFkZCgnYm9yZGVycycsIHRoaXMubWFwLmJvcmRlcnMpOwogICAgICAgICAgICBhZGQoJ3N0eWxlcycsIHRoaXMubWFwLmNlbGxYZnMpOwogICAgICAgICAgICBhZGQoJ2R4ZnMnLCB0aGlzLm1hcC5keGZzKTsgLy8gaW5kZXggbnVtRm10cwoKICAgICAgICAgICAgdGhpcy5pbmRleCA9IHsKICAgICAgICAgICAgICBt
b2RlbDogW10sCiAgICAgICAgICAgICAgbnVtRm10OiBbXQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwubnVtRm10cykgewogICAgICAgICAgICAgIHZhciBudW1GbXRJbmRleCA9IHRoaXMuaW5kZXgubnVtRm10OwogICAgICAgICAgICAgIHRoaXMubW9kZWwubnVtRm10cy5mb3JFYWNoKGZ1bmN0aW9uIChudW1GbXQpIHsKICAgICAgICAgICAgICAgIG51bUZtdEluZGV4W251bUZtdC5pZF0gPSBudW1GbXQuZm9ybWF0Q29kZTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAg
ICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgLy8gbm90IHF1aXRlIHN1cmUgaG93IHdlIGdldCBoZXJlIQogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0gLy8gYWRkIGEgY2VsbCdzIHN0eWxlIG1vZGVsIHRvIHRoZSBjb2xsZWN0aW9uCiAgICAvLyBlYWNoIHN0eWxlIHByb3BlcnR5IGlzIHByb2Nlc3NlZCBhbmQgY3Jvc3MtcmVmZXJlbmNlZCwgZXRjLgogICAgLy8gdGhlIHN0eWxlSWQgaXMgcmV0dXJuZWQuIE5vdGU6IGNlbGxUeXBlIGlzIHVzZWQg
d2hlbiBudW1GbXQgbm90IGRlZmluZWQKCiAgfSwgewogICAga2V5OiAiYWRkU3R5bGVNb2RlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3R5bGVNb2RlbChtb2RlbCwgY2VsbFR5cGUpIHsKICAgICAgaWYgKCFtb2RlbCkgewogICAgICAgIHJldHVybiAwOwogICAgICB9IC8vIGlmIHdlIGhhdmUgbm8gZGVmYXVsdCBmb250LCBhZGQgaXQgaGVyZSBub3cKCgogICAgICBpZiAoIXRoaXMubW9kZWwuZm9udHMubGVuZ3RoKSB7CiAgICAgICAgLy8gZGVmYXVsdCAoemVybykgZm9udAogICAgICAgIHRoaXMuX2FkZEZvbnQoewog
ICAgICAgICAgc2l6ZTogMTEsCiAgICAgICAgICBjb2xvcjogewogICAgICAgICAgICB0aGVtZTogMQogICAgICAgICAgfSwKICAgICAgICAgIG5hbWU6ICdDYWxpYnJpJywKICAgICAgICAgIGZhbWlseTogMiwKICAgICAgICAgIHNjaGVtZTogJ21pbm9yJwogICAgICAgIH0pOwogICAgICB9IC8vIGlmIHdlIGhhdmUgc2VlbiB0aGlzIHN0eWxlIG9iamVjdCBiZWZvcmUsIGFzc3VtZSBpdCBoYXMgdGhlIHNhbWUgc3R5bGVJZAoKCiAgICAgIGlmICh0aGlzLndlYWtNYXAgJiYgdGhpcy53ZWFrTWFwLmhhcyhtb2RlbCkpIHsKICAg
ICAgICByZXR1cm4gdGhpcy53ZWFrTWFwLmdldChtb2RlbCk7CiAgICAgIH0KCiAgICAgIHZhciBzdHlsZSA9IHt9OwogICAgICBjZWxsVHlwZSA9IGNlbGxUeXBlIHx8IEVudW1zLlZhbHVlVHlwZS5OdW1iZXI7CgogICAgICBpZiAobW9kZWwubnVtRm10KSB7CiAgICAgICAgc3R5bGUubnVtRm10SWQgPSB0aGlzLl9hZGROdW1GbXRTdHIobW9kZWwubnVtRm10KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzd2l0Y2ggKGNlbGxUeXBlKSB7CiAgICAgICAgICBjYXNlIEVudW1zLlZhbHVlVHlwZS5OdW1iZXI6CiAgICAgICAgICAg
IHN0eWxlLm51bUZtdElkID0gdGhpcy5fYWRkTnVtRm10U3RyKCdHZW5lcmFsJyk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLkRhdGU6CiAgICAgICAgICAgIHN0eWxlLm51bUZtdElkID0gdGhpcy5fYWRkTnVtRm10U3RyKCdtbS1kZC15eScpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5mb250KSB7CiAgICAgICAgc3R5bGUuZm9udElkID0gdGhpcy5fYWRk
Rm9udChtb2RlbC5mb250KTsKICAgICAgfQoKICAgICAgaWYgKG1vZGVsLmJvcmRlcikgewogICAgICAgIHN0eWxlLmJvcmRlcklkID0gdGhpcy5fYWRkQm9yZGVyKG1vZGVsLmJvcmRlcik7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5maWxsKSB7CiAgICAgICAgc3R5bGUuZmlsbElkID0gdGhpcy5fYWRkRmlsbChtb2RlbC5maWxsKTsKICAgICAgfQoKICAgICAgaWYgKG1vZGVsLmFsaWdubWVudCkgewogICAgICAgIHN0eWxlLmFsaWdubWVudCA9IG1vZGVsLmFsaWdubWVudDsKICAgICAgfQoKICAgICAgaWYgKG1vZGVsLnBy
b3RlY3Rpb24pIHsKICAgICAgICBzdHlsZS5wcm90ZWN0aW9uID0gbW9kZWwucHJvdGVjdGlvbjsKICAgICAgfQoKICAgICAgdmFyIHN0eWxlSWQgPSB0aGlzLl9hZGRTdHlsZShzdHlsZSk7CgogICAgICBpZiAodGhpcy53ZWFrTWFwKSB7CiAgICAgICAgdGhpcy53ZWFrTWFwLnNldChtb2RlbCwgc3R5bGVJZCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzdHlsZUlkOwogICAgfSAvLyBnaXZlbiBhIHN0eWxlSWQgKGkuZS4gcz0ibiIpLCBnZXQgdGhlIGNlbGwncyBzdHlsZSBtb2RlbAogICAgLy8gb2JqZWN0cyBhcmUgc2hhcmVk
IHdoZXJlIHBvc3NpYmxlLgoKICB9LCB7CiAgICBrZXk6ICJnZXRTdHlsZU1vZGVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZU1vZGVsKGlkKSB7CiAgICAgIC8vIGlmIHRoZSBzdHlsZSBkb2Vzbid0IGV4aXN0IHJldHVybiBudWxsCiAgICAgIHZhciBzdHlsZSA9IHRoaXMubW9kZWwuc3R5bGVzW2lkXTsKICAgICAgaWYgKCFzdHlsZSkgcmV0dXJuIG51bGw7IC8vIGhhdmUgd2UgYnVpbHQgdGhpcyBtb2RlbCBiZWZvcmU/CgogICAgICB2YXIgbW9kZWwgPSB0aGlzLmluZGV4Lm1vZGVsW2lkXTsKICAgICAgaWYgKG1v
ZGVsKSByZXR1cm4gbW9kZWw7IC8vIGJ1aWxkIGEgbmV3IG1vZGVsCgogICAgICBtb2RlbCA9IHRoaXMuaW5kZXgubW9kZWxbaWRdID0ge307IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgLy8gbnVtYmVyIGZvcm1hdAoKICAgICAgaWYgKHN0eWxlLm51bUZtdElkKSB7CiAgICAgICAgdmFyIG51bUZtdCA9IHRoaXMuaW5kZXgubnVtRm10W3N0eWxlLm51bUZtdElkXSB8fCBOdW1GbXRYZm9ybS5nZXREZWZhdWx0Rm10Q29kZShzdHlsZS5udW1GbXRJZCk7Cgog
ICAgICAgIGlmIChudW1GbXQpIHsKICAgICAgICAgIG1vZGVsLm51bUZtdCA9IG51bUZtdDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGFkZFN0eWxlKG5hbWUsIGdyb3VwLCBzdHlsZUlkKSB7CiAgICAgICAgaWYgKHN0eWxlSWQgfHwgc3R5bGVJZCA9PT0gMCkgewogICAgICAgICAgdmFyIHBhcnQgPSBncm91cFtzdHlsZUlkXTsKCiAgICAgICAgICBpZiAocGFydCkgewogICAgICAgICAgICBtb2RlbFtuYW1lXSA9IHBhcnQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBhZGRTdHlsZSgn
Zm9udCcsIHRoaXMubW9kZWwuZm9udHMsIHN0eWxlLmZvbnRJZCk7CiAgICAgIGFkZFN0eWxlKCdib3JkZXInLCB0aGlzLm1vZGVsLmJvcmRlcnMsIHN0eWxlLmJvcmRlcklkKTsKICAgICAgYWRkU3R5bGUoJ2ZpbGwnLCB0aGlzLm1vZGVsLmZpbGxzLCBzdHlsZS5maWxsSWQpOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgIC8vIGFsaWdubWVudAoKICAgICAgaWYgKHN0eWxlLmFsaWdubWVudCkgewogICAgICAgIG1vZGVsLmFsaWdubWVudCA9IHN0eWxlLmFs
aWdubWVudDsKICAgICAgfSAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgIC8vIHByb3RlY3Rpb24KCgogICAgICBpZiAoc3R5bGUucHJvdGVjdGlvbikgewogICAgICAgIG1vZGVsLnByb3RlY3Rpb24gPSBzdHlsZS5wcm90ZWN0aW9uOwogICAgICB9CgogICAgICByZXR1cm4gbW9kZWw7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkRHhmU3R5bGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZER4ZlN0eWxlKHN0eWxlKSB7CiAgICAgIHRoaXMubW9kZWwuZHhm
cy5wdXNoKHN0eWxlKTsKICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZHhmcy5sZW5ndGggLSAxOwogICAgfQogIH0sIHsKICAgIGtleTogImdldER4ZlN0eWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREeGZTdHlsZShpZCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbC5keGZzW2lkXTsKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gUHJpdmF0ZSBJbnRlcmZhY2UKCiAgfSwgewogICAga2V5OiAiX2FkZFN0eWxl
IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkU3R5bGUoc3R5bGUpIHsKICAgICAgdmFyIHhtbCA9IHRoaXMubWFwLnN0eWxlLnRvWG1sKHN0eWxlKTsKICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleC5zdHlsZVt4bWxdOwoKICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHsKICAgICAgICBpbmRleCA9IHRoaXMuaW5kZXguc3R5bGVbeG1sXSA9IHRoaXMubW9kZWwuc3R5bGVzLmxlbmd0aDsKICAgICAgICB0aGlzLm1vZGVsLnN0eWxlcy5wdXNoKHhtbCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbmRleDsKICAgIH0g
Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gTnVtYmVyIEZvcm1hdHMKCiAgfSwgewogICAga2V5OiAiX2FkZE51bUZtdFN0ciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZE51bUZtdFN0cihmb3JtYXRDb2RlKSB7CiAgICAgIC8vIGNoZWNrIGlmIGRlZmF1bHQgZm9ybWF0CiAgICAgIHZhciBpbmRleCA9IE51bUZtdFhmb3JtLmdldERlZmF1bHRGbXRJZChmb3JtYXRDb2RlKTsKICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmlu
ZWQpIHJldHVybiBpbmRleDsgLy8gY2hlY2sgaWYgYWxyZWFkeSBpbgoKICAgICAgaW5kZXggPSB0aGlzLmluZGV4Lm51bUZtdFtmb3JtYXRDb2RlXTsKICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHJldHVybiBpbmRleDsKICAgICAgaW5kZXggPSB0aGlzLmluZGV4Lm51bUZtdFtmb3JtYXRDb2RlXSA9IE5VTUZNVF9CQVNFICsgdGhpcy5tb2RlbC5udW1GbXRzLmxlbmd0aDsKICAgICAgdmFyIHhtbCA9IHRoaXMubWFwLm51bUZtdC50b1htbCh7CiAgICAgICAgaWQ6IGluZGV4LAogICAgICAgIGZvcm1hdENvZGU6IGZv
cm1hdENvZGUKICAgICAgfSk7CiAgICAgIHRoaXMubW9kZWwubnVtRm10cy5wdXNoKHhtbCk7CiAgICAgIHJldHVybiBpbmRleDsKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gRm9udHMKCiAgfSwgewogICAga2V5OiAiX2FkZEZvbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRGb250KGZvbnQpIHsKICAgICAgdmFyIHhtbCA9IHRoaXMubWFwLmZvbnQudG9YbWwoZm9udCk7CiAgICAgIHZhciBpbmRleCA9IHRo
aXMuaW5kZXguZm9udFt4bWxdOwoKICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHsKICAgICAgICBpbmRleCA9IHRoaXMuaW5kZXguZm9udFt4bWxdID0gdGhpcy5tb2RlbC5mb250cy5sZW5ndGg7CiAgICAgICAgdGhpcy5tb2RlbC5mb250cy5wdXNoKHhtbCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbmRleDsKICAgIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gQm9yZGVycwoKICB9LCB7CiAgICBrZXk6ICJf
YWRkQm9yZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkQm9yZGVyKGJvcmRlcikgewogICAgICB2YXIgeG1sID0gdGhpcy5tYXAuYm9yZGVyLnRvWG1sKGJvcmRlcik7CiAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXguYm9yZGVyW3htbF07CgogICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkgewogICAgICAgIGluZGV4ID0gdGhpcy5pbmRleC5ib3JkZXJbeG1sXSA9IHRoaXMubW9kZWwuYm9yZGVycy5sZW5ndGg7CiAgICAgICAgdGhpcy5tb2RlbC5ib3JkZXJzLnB1c2goeG1sKTsKICAgICAgfQoKICAgICAgcmV0
dXJuIGluZGV4OwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAvLyBGaWxscwoKICB9LCB7CiAgICBrZXk6ICJfYWRkRmlsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZEZpbGwoZmlsbCkgewogICAgICB2YXIgeG1sID0gdGhpcy5tYXAuZmlsbC50b1htbChmaWxsKTsKICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleC5maWxsW3htbF07CgogICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkgewogICAgICAgIGlu
ZGV4ID0gdGhpcy5pbmRleC5maWxsW3htbF0gPSB0aGlzLm1vZGVsLmZpbGxzLmxlbmd0aDsKICAgICAgICB0aGlzLm1vZGVsLmZpbGxzLnB1c2goeG1sKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGluZGV4OwogICAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgogIH1dKTsKCiAgcmV0dXJuIFN0eWxlc1hmb3JtOwp9KEJhc2VYZm9ybSk7CgpTdHlsZXNYZm9ybS5TVFlMRVNIRUVUX0FUVFJJQlVURVMgPSB7CiAgeG1sbnM6ICdodHRw
Oi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvc3ByZWFkc2hlZXRtbC8yMDA2L21haW4nLAogICd4bWxuczptYyc6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvbWFya3VwLWNvbXBhdGliaWxpdHkvMjAwNicsCiAgJ21jOklnbm9yYWJsZSc6ICd4MTRhYyB4MTZyMicsCiAgJ3htbG5zOngxNGFjJzogJ2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3NwcmVhZHNoZWV0bWwvMjAwOS85L2FjJywKICAneG1sbnM6eDE2cjInOiAnaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uv
c3ByZWFkc2hlZXRtbC8yMDE1LzAyL21haW4nCn07ClN0eWxlc1hmb3JtLlNUQVRJQ19YRk9STVMgPSB7CiAgY2VsbFN0eWxlczogbmV3IFN0YXRpY1hmb3JtKHsKICAgIHRhZzogJ2NlbGxTdHlsZXMnLAogICAgJDogewogICAgICBjb3VudDogMQogICAgfSwKICAgIGM6IFt7CiAgICAgIHRhZzogJ2NlbGxTdHlsZScsCiAgICAgICQ6IHsKICAgICAgICBuYW1lOiAnTm9ybWFsJywKICAgICAgICB4ZklkOiAwLAogICAgICAgIGJ1aWx0aW5JZDogMAogICAgICB9CiAgICB9XQogIH0pLAogIGR4ZnM6IG5ldyBTdGF0aWNYZm9ybSh7
CiAgICB0YWc6ICdkeGZzJywKICAgICQ6IHsKICAgICAgY291bnQ6IDAKICAgIH0KICB9KSwKICB0YWJsZVN0eWxlczogbmV3IFN0YXRpY1hmb3JtKHsKICAgIHRhZzogJ3RhYmxlU3R5bGVzJywKICAgICQ6IHsKICAgICAgY291bnQ6IDAsCiAgICAgIGRlZmF1bHRUYWJsZVN0eWxlOiAnVGFibGVTdHlsZU1lZGl1bTInLAogICAgICBkZWZhdWx0UGl2b3RTdHlsZTogJ1Bpdm90U3R5bGVMaWdodDE2JwogICAgfQogIH0pLAogIGV4dExzdDogbmV3IFN0YXRpY1hmb3JtKHsKICAgIHRhZzogJ2V4dExzdCcsCiAgICBjOiBbewogICAg
ICB0YWc6ICdleHQnLAogICAgICAkOiB7CiAgICAgICAgdXJpOiAne0VCNzlERUYyLTgwQjgtNDNlNS05NUJELTU0Q0JEREY5MDIwQ30nLAogICAgICAgICd4bWxuczp4MTQnOiAnaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvc3ByZWFkc2hlZXRtbC8yMDA5LzkvbWFpbicKICAgICAgfSwKICAgICAgYzogW3sKICAgICAgICB0YWc6ICd4MTQ6c2xpY2VyU3R5bGVzJywKICAgICAgICAkOiB7CiAgICAgICAgICBkZWZhdWx0U2xpY2VyU3R5bGU6ICdTbGljZXJTdHlsZUxpZ2h0MScKICAgICAgICB9CiAgICAgIH1d
CiAgICB9LCB7CiAgICAgIHRhZzogJ2V4dCcsCiAgICAgICQ6IHsKICAgICAgICB1cmk6ICd7OTI2MEE1MTAtRjMwMS00NmE4LTg2MzUtRjUxMkQ2NEJFNUY1fScsCiAgICAgICAgJ3htbG5zOngxNSc6ICdodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9zcHJlYWRzaGVldG1sLzIwMTAvMTEvbWFpbicKICAgICAgfSwKICAgICAgYzogW3sKICAgICAgICB0YWc6ICd4MTU6dGltZWxpbmVTdHlsZXMnLAogICAgICAgICQ6IHsKICAgICAgICAgIGRlZmF1bHRUaW1lbGluZVN0eWxlOiAnVGltZVNsaWNlclN0eWxlTGln
aHQxJwogICAgICAgIH0KICAgICAgfV0KICAgIH1dCiAgfSkKfTsgLy8gdGhlIHN0eWxlbWFuYWdlciBtb2NrIGFjdHMgbGlrZSBTdHlsZU1hbmFnZXIgZXhjZXB0IHRoYXQgaXQgYWx3YXlzIHJldHVybnMgMCBvciB7fQoKdmFyIFN0eWxlc1hmb3JtTW9jayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1N0eWxlc1hmb3JtKSB7CiAgX2luaGVyaXRzKFN0eWxlc1hmb3JtTW9jaywgX1N0eWxlc1hmb3JtKTsKCiAgdmFyIF9zdXBlcjIgPSBfY3JlYXRlU3VwZXIoU3R5bGVzWGZvcm1Nb2NrKTsKCiAgZnVuY3Rpb24gU3R5bGVzWGZv
cm1Nb2NrKCkgewogICAgdmFyIF90aGlzMzsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVzWGZvcm1Nb2NrKTsKCiAgICBfdGhpczMgPSBfc3VwZXIyLmNhbGwodGhpcyk7CiAgICBfdGhpczMubW9kZWwgPSB7CiAgICAgIHN0eWxlczogW3sKICAgICAgICBudW1GbXRJZDogMCwKICAgICAgICBmb250SWQ6IDAsCiAgICAgICAgZmlsbElkOiAwLAogICAgICAgIGJvcmRlcklkOiAwLAogICAgICAgIHhmSWQ6IDAKICAgICAgfV0sCiAgICAgIG51bUZtdHM6IFtdLAogICAgICBmb250czogW3sKICAgICAgICBzaXplOiAx
MSwKICAgICAgICBjb2xvcjogewogICAgICAgICAgdGhlbWU6IDEKICAgICAgICB9LAogICAgICAgIG5hbWU6ICdDYWxpYnJpJywKICAgICAgICBmYW1pbHk6IDIsCiAgICAgICAgc2NoZW1lOiAnbWlub3InCiAgICAgIH1dLAogICAgICBib3JkZXJzOiBbe31dLAogICAgICBmaWxsczogW3sKICAgICAgICB0eXBlOiAncGF0dGVybicsCiAgICAgICAgcGF0dGVybjogJ25vbmUnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAncGF0dGVybicsCiAgICAgICAgcGF0dGVybjogJ2dyYXkxMjUnCiAgICAgIH1dCiAgICB9OwogICAgcmV0
dXJuIF90aGlzMzsKICB9IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAvLyBTdHlsZSBNYW5hZ2VyIEludGVyZmFjZQogIC8vIG92ZXJyaWRlIG5vcm1hbCBiZWhhdmlvdXIgLSBjb25zdW1lIGFuZCBkaXNwb3NlCgoKICBfY3JlYXRlQ2xhc3MoU3R5bGVzWGZvcm1Nb2NrLCBbewogICAga2V5OiAicGFyc2VTdHJlYW0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlU3RyZWFtKHN0cmVhbSkgewogICAgICBzdHJlYW0uYXV0b2RyYWlu
KCk7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgIH0gLy8gYWRkIGEgY2VsbCdzIHN0eWxlIG1vZGVsIHRvIHRoZSBjb2xsZWN0aW9uCiAgICAvLyBlYWNoIHN0eWxlIHByb3BlcnR5IGlzIHByb2Nlc3NlZCBhbmQgY3Jvc3MtcmVmZXJlbmNlZCwgZXRjLgogICAgLy8gdGhlIHN0eWxlSWQgaXMgcmV0dXJuZWQuIE5vdGU6IGNlbGxUeXBlIGlzIHVzZWQgd2hlbiBudW1GbXQgbm90IGRlZmluZWQKCiAgfSwgewogICAga2V5OiAiYWRkU3R5bGVNb2RlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3R5bGVNb2Rl
bChtb2RlbCwgY2VsbFR5cGUpIHsKICAgICAgc3dpdGNoIChjZWxsVHlwZSkgewogICAgICAgIGNhc2UgRW51bXMuVmFsdWVUeXBlLkRhdGU6CiAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlU3R5bGVJZDsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiAwOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0U3R5bGVNb2RlbCIsCiAgICAvLyBnaXZlbiBhIHN0eWxlSWQgKGkuZS4gcz0ibiIpLCBnZXQgdGhlIGNlbGwncyBzdHlsZSBtb2RlbAogICAgLy8gb2JqZWN0cyBhcmUgc2hhcmVkIHdoZXJlIHBv
c3NpYmxlLgogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0eWxlTW9kZWwoKQogICAgLyogaWQgKi8KICAgIHsKICAgICAgcmV0dXJuIHt9OwogICAgfQogIH0sIHsKICAgIGtleTogImRhdGVTdHlsZUlkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICBpZiAoIXRoaXMuX2RhdGVTdHlsZUlkKSB7CiAgICAgICAgdmFyIGRhdGVTdHlsZSA9IHsKICAgICAgICAgIG51bUZtdElkOiBOdW1GbXRYZm9ybS5nZXREZWZhdWx0Rm10SWQoJ21tLWRkLXl5JykKICAgICAgICB9OwogICAgICAgIHRoaXMuX2RhdGVTdHlsZUlkID0g
dGhpcy5tb2RlbC5zdHlsZXMubGVuZ3RoOwogICAgICAgIHRoaXMubW9kZWwuc3R5bGVzLnB1c2goZGF0ZVN0eWxlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuX2RhdGVTdHlsZUlkOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFN0eWxlc1hmb3JtTW9jazsKfShTdHlsZXNYZm9ybSk7CgpTdHlsZXNYZm9ybS5Nb2NrID0gU3R5bGVzWGZvcm1Nb2NrOwptb2R1bGUuZXhwb3J0cyA9IFN0eWxlc1hmb3JtOwoKfSx7Ii4uLy4uLy4uL2RvYy9lbnVtcyI6NywiLi4vLi4vLi4vdXRpbHMveG1sLXN0cmVhbSI6MjcsIi4uL2Jhc2Ut
eGZvcm0iOjMxLCIuLi9saXN0LXhmb3JtIjo3MCwiLi4vc3RhdGljLXhmb3JtIjoxMTksIi4vYm9yZGVyLXhmb3JtIjoxMjYsIi4vZHhmLXhmb3JtIjoxMjgsIi4vZmlsbC14Zm9ybSI6MTI5LCIuL2ZvbnQteGZvcm0iOjEzMCwiLi9udW1mbXQteGZvcm0iOjEzMSwiLi9zdHlsZS14Zm9ybSI6MTMzfV0sMTM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJm
dW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmop
OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNj
cmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHBy
b3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0g
T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90
b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9m
KHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9u
IikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5l
ZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9m
ID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBVbmRlcmxpbmVYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhVbmRlcmxpbmVYZm9ybSwgX0Jhc2VYZm9y
bSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVW5kZXJsaW5lWGZvcm0pOwoKICBmdW5jdGlvbiBVbmRlcmxpbmVYZm9ybShtb2RlbCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVbmRlcmxpbmVYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1vZGVsID0gbW9kZWw7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVW5kZXJsaW5lWGZvcm0sIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJl
bmRlcih4bWxTdHJlYW0sIG1vZGVsKSB7CiAgICAgIG1vZGVsID0gbW9kZWwgfHwgdGhpcy5tb2RlbDsKCiAgICAgIGlmIChtb2RlbCA9PT0gdHJ1ZSkgewogICAgICAgIHhtbFN0cmVhbS5sZWFmTm9kZSgndScpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBhdHRyID0gVW5kZXJsaW5lWGZvcm0uQXR0cmlidXRlc1ttb2RlbF07CgogICAgICAgIGlmIChhdHRyKSB7CiAgICAgICAgICB4bWxTdHJlYW0ubGVhZk5vZGUoJ3UnLCBhdHRyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9w
ZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmIChub2RlLm5hbWUgPT09ICd1JykgewogICAgICAgIHRoaXMubW9kZWwgPSBub2RlLmF0dHJpYnV0ZXMudmFsIHx8IHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsK
ICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd1JzsKICAgIH0KICB9XSk7CgogIHJldHVybiBVbmRlcmxpbmVYZm9ybTsKfShCYXNlWGZvcm0pOwoKVW5kZXJsaW5lWGZvcm0uQXR0cmlidXRlcyA9IHsKICBzaW5nbGU6IHt9LAogIGRvdWJsZTogewogICAgdmFsOiAnZG91YmxlJwogIH0sCiAgc2luZ2xlQWNjb3VudGluZzogewogICAgdmFsOiAnc2luZ2xlQWNjb3VudGluZycKICB9LAogIGRvdWJsZUFjY291bnRpbmc6IHsKICAgIHZhbDogJ2RvdWJsZUFjY291bnRpbmcnCiAg
fQp9Owptb2R1bGUuZXhwb3J0cyA9IFVuZGVybGluZVhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sMTM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9
IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBU
eXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9
IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2lu
aGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3Vy
YWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0
Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0
aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2Vs
ZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5j
dGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVj
dC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBGaWx0ZXJDb2x1bW5YZm9ybSA9IHJlcXVpcmUoJy4vZmlsdGVyLWNvbHVtbi14Zm9ybScpOwoKdmFyIEF1dG9GaWx0ZXJYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhBdXRvRmlsdGVyWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEF1dG9GaWx0ZXJYZm9y
bSk7CgogIGZ1bmN0aW9uIEF1dG9GaWx0ZXJYZm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXV0b0ZpbHRlclhmb3JtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOwogICAgX3RoaXMubWFwID0gewogICAgICBmaWx0ZXJDb2x1bW46IG5ldyBGaWx0ZXJDb2x1bW5YZm9ybSgpCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEF1dG9GaWx0ZXJYZm9ybSwgW3sKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBh
cmUobW9kZWwpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBtb2RlbC5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgaW5kZXgpIHsKICAgICAgICBfdGhpczIubWFwLmZpbHRlckNvbHVtbi5wcmVwYXJlKGNvbHVtbiwgewogICAgICAgICAgaW5kZXg6IGluZGV4CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHhtbFN0cmVhbSwgbW9kZWwpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB4
bWxTdHJlYW0ub3Blbk5vZGUodGhpcy50YWcsIHsKICAgICAgICByZWY6IG1vZGVsLmF1dG9GaWx0ZXJSZWYKICAgICAgfSk7CiAgICAgIG1vZGVsLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uKSB7CiAgICAgICAgX3RoaXMzLm1hcC5maWx0ZXJDb2x1bW4ucmVuZGVyKHhtbFN0cmVhbSwgY29sdW1uKTsKICAgICAgfSk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VPcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZU9w
ZW4obm9kZSkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAobm9kZS5uYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIGF1dG9GaWx0ZXJSZWY6IG5vZGUuYXR0cmlidXRlcy5yZWYsCiAgICAgICAgICAgIGNvbHVtbnM6IFtdCiAgICAgICAgICB9OwogICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgIGRlZmF1
bHQ6CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHRoaXMubWFwW25vZGUubmFtZV07CgogICAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgICAgIHRoaXMucGFyc2VPcGVuKG5vZGUpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVuZXhwZWN0ZWQgeG1sIG5vZGUgaW4gcGFyc2VPcGVuOiAiLmNvbmNhdChKU09OLnN0cmluZ2lmeShub2RlKSkpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VUZXh0IiwKICAgIHZhbHVlOiBm
dW5jdGlvbiBwYXJzZVRleHQodGV4dCkgewogICAgICBpZiAodGhpcy5wYXJzZXIpIHsKICAgICAgICB0aGlzLnBhcnNlci5wYXJzZVRleHQodGV4dCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKG5hbWUpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLm1vZGVsLmNvbHVtbnMucHVzaCh0aGlzLnBhcnNlci5tb2RlbCk7CiAgICAg
ICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIHhtbCBub2RlIGluIHBhcnNlQ2xvc2U6ICIuY29uY2F0KG5hbWUpKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsK
ICAgICAgcmV0dXJuICdhdXRvRmlsdGVyJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBBdXRvRmlsdGVyWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gQXV0b0ZpbHRlclhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxLCIuL2ZpbHRlci1jb2x1bW4teGZvcm0iOjEzN31dLDEzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVu
Y3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsg
fQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3Jp
cHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90
b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9i
amVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9f
XyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0
aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIp
KSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQi
IHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9
IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgRmlsdGVyQ29sdW1uWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoRmlsdGVyQ29sdW1uWGZvcm0sIF9CYXNl
WGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEZpbHRlckNvbHVtblhmb3JtKTsKCiAgZnVuY3Rpb24gRmlsdGVyQ29sdW1uWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsdGVyQ29sdW1uWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhGaWx0ZXJDb2x1bW5YZm9ybSwgW3sKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgbW9kZWwu
Y29sSWQgPSBvcHRpb25zLmluZGV4LnRvU3RyaW5nKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIHsKICAgICAgICBjb2xJZDogbW9kZWwuY29sSWQsCiAgICAgICAgaGlkZGVuQnV0dG9uOiBtb2RlbC5maWx0ZXJCdXR0b24gPyAnMCcgOiAnMScKICAgICAgfSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlT3BlbiIsCiAgICB2
YWx1ZTogZnVuY3Rpb24gcGFyc2VPcGVuKG5vZGUpIHsKICAgICAgaWYgKG5vZGUubmFtZSA9PT0gdGhpcy50YWcpIHsKICAgICAgICB2YXIgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlczsKICAgICAgICB0aGlzLm1vZGVsID0gewogICAgICAgICAgZmlsdGVyQnV0dG9uOiBhdHRyaWJ1dGVzLmhpZGRlbkJ1dHRvbiA9PT0gJzAnCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVu
Y3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ2ZpbHRlckNvbHVtbic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRmlsdGVyQ29sdW1uWGZvcm07Cn0oQmFzZVhmb3JtKTsKCm1vZHVsZS5leHBvcnRzID0gRmlsdGVyQ29sdW1uWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9y
bSI6MzF9XSwxMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYm
IHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVu
Y3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRl
c2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9
PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xh
c3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlv
biBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRo
aXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBi
ZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwo
UmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9Cgp2
YXIgQmFzZVhmb3JtID0gcmVxdWlyZSgnLi4vYmFzZS14Zm9ybScpOwoKdmFyIFRhYmxlQ29sdW1uWGZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlWGZvcm0pIHsKICBfaW5oZXJpdHMoVGFibGVDb2x1bW5YZm9ybSwgX0Jhc2VYZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVGFibGVDb2x1bW5YZm9ybSk7CgogIGZ1bmN0aW9uIFRhYmxlQ29sdW1uWGZvcm0oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGVDb2x1bW5YZm9ybSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlz
LCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFRhYmxlQ29sdW1uWGZvcm0sIFt7CiAgICBrZXk6ICJwcmVwYXJlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwYXJlKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIG1vZGVsLmlkID0gb3B0aW9ucy5pbmRleCArIDE7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIHsKICAgICAgICBpZDogbW9kZWwuaWQudG9TdHJp
bmcoKSwKICAgICAgICBuYW1lOiBtb2RlbC5uYW1lLAogICAgICAgIHRvdGFsc1Jvd0xhYmVsOiBtb2RlbC50b3RhbHNSb3dMYWJlbCwKICAgICAgICB0b3RhbHNSb3dGdW5jdGlvbjogbW9kZWwudG90YWxzUm93RnVuY3Rpb24sCiAgICAgICAgZHhmSWQ6IG1vZGVsLmR4ZklkCiAgICAgIH0pOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmIChub2RlLm5hbWUgPT09IHRoaXMudGFnKSB7CiAgICAg
ICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7CiAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgIG5hbWU6IGF0dHJpYnV0ZXMubmFtZSwKICAgICAgICAgIHRvdGFsc1Jvd0xhYmVsOiBhdHRyaWJ1dGVzLnRvdGFsc1Jvd0xhYmVsLAogICAgICAgICAgdG90YWxzUm93RnVuY3Rpb246IGF0dHJpYnV0ZXMudG90YWxzUm93RnVuY3Rpb24sCiAgICAgICAgICBkeGZJZDogYXR0cmlidXRlcy5keGZJZAogICAgICAgIH07CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsK
ICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVGV4dCgpIHt9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZSgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd0YWJsZUNvbHVtbic7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVGFibGVDb2x1bW5YZm9ybTsKfShCYXNlWGZvcm0pOwoKbW9kdWxl
LmV4cG9ydHMgPSBUYWJsZUNvbHVtblhmb3JtOwoKfSx7Ii4uL2Jhc2UteGZvcm0iOjMxfV0sMTM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBf
dHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3Io
IkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9i
amVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1
YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1
ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0
ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1
bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9p
ZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJl
dHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90
b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIEJhc2VYZm9ybSA9IHJlcXVpcmUoJy4uL2Jhc2UteGZvcm0nKTsKCnZhciBUYWJsZVN0eWxlSW5mb1hmb3JtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVhmb3JtKSB7CiAgX2luaGVyaXRzKFRhYmxlU3R5bGVJbmZvWGZvcm0sIF9CYXNlWGZvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFRhYmxlU3R5bGVJbmZvWGZvcm0pOwoKICBmdW5jdGlvbiBUYWJsZVN0eWxlSW5mb1hmb3JtKCkgewogICAgX2NsYXNzQ2FsbENo
ZWNrKHRoaXMsIFRhYmxlU3R5bGVJbmZvWGZvcm0pOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhUYWJsZVN0eWxlSW5mb1hmb3JtLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ubGVhZk5vZGUodGhpcy50YWcsIHsKICAgICAgICBuYW1lOiBtb2RlbC50aGVtZSA/IG1vZGVsLnRoZW1lIDogdW5kZWZpbmVkLAogICAgICAgIHNob3dGaXJzdENvbHVtbjog
bW9kZWwuc2hvd0ZpcnN0Q29sdW1uID8gJzEnIDogJzAnLAogICAgICAgIHNob3dMYXN0Q29sdW1uOiBtb2RlbC5zaG93TGFzdENvbHVtbiA/ICcxJyA6ICcwJywKICAgICAgICBzaG93Um93U3RyaXBlczogbW9kZWwuc2hvd1Jvd1N0cmlwZXMgPyAnMScgOiAnMCcsCiAgICAgICAgc2hvd0NvbHVtblN0cmlwZXM6IG1vZGVsLnNob3dDb2x1bW5TdHJpcGVzID8gJzEnIDogJzAnCiAgICAgIH0pOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBh
cnNlT3Blbihub2RlKSB7CiAgICAgIGlmIChub2RlLm5hbWUgPT09IHRoaXMudGFnKSB7CiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7CiAgICAgICAgdGhpcy5tb2RlbCA9IHsKICAgICAgICAgIHRoZW1lOiBhdHRyaWJ1dGVzLm5hbWUgPyBhdHRyaWJ1dGVzLm5hbWUgOiBudWxsLAogICAgICAgICAgc2hvd0ZpcnN0Q29sdW1uOiBhdHRyaWJ1dGVzLnNob3dGaXJzdENvbHVtbiA9PT0gJzEnLAogICAgICAgICAgc2hvd0xhc3RDb2x1bW46IGF0dHJpYnV0ZXMuc2hvd0xhc3RDb2x1bW4gPT09ICcxJywK
ICAgICAgICAgIHNob3dSb3dTdHJpcGVzOiBhdHRyaWJ1dGVzLnNob3dSb3dTdHJpcGVzID09PSAnMScsCiAgICAgICAgICBzaG93Q29sdW1uU3RyaXBlczogYXR0cmlidXRlcy5zaG93Q29sdW1uU3RyaXBlcyA9PT0gJzEnCiAgICAgICAgfTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KCkge30KICB9LCB7CiAgICBrZXk6ICJwYXJzZUNsb3NlIiwKICAgIHZhbHVlOiBm
dW5jdGlvbiBwYXJzZUNsb3NlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAidGFnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gJ3RhYmxlU3R5bGVJbmZvJzsKICAgIH0KICB9XSk7CgogIHJldHVybiBUYWJsZVN0eWxlSW5mb1hmb3JtOwp9KEJhc2VYZm9ybSk7Cgptb2R1bGUuZXhwb3J0cyA9IFRhYmxlU3R5bGVJbmZvWGZvcm07Cgp9LHsiLi4vYmFzZS14Zm9ybSI6MzF9XSwxNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmlj
dCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1i
b2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlv
biAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRy
dWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0Lmdl
dE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2so
aW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRl
c2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9k
ZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1
cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBf
c2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBS
ZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9h
c3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1
cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2Jq
ZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKdmFyIFhtbFN0cmVhbSA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL3htbC1zdHJlYW0nKTsKCnZhciBCYXNlWGZvcm0gPSByZXF1aXJlKCcuLi9iYXNlLXhmb3JtJyk7Cgp2YXIgTGlzdFhmb3JtID0gcmVxdWlyZSgnLi4vbGlzdC14Zm9ybScpOwoKdmFyIEF1dG9GaWx0ZXJYZm9ybSA9IHJlcXVp
cmUoJy4vYXV0by1maWx0ZXIteGZvcm0nKTsKCnZhciBUYWJsZUNvbHVtblhmb3JtID0gcmVxdWlyZSgnLi90YWJsZS1jb2x1bW4teGZvcm0nKTsKCnZhciBUYWJsZVN0eWxlSW5mb1hmb3JtID0gcmVxdWlyZSgnLi90YWJsZS1zdHlsZS1pbmZvLXhmb3JtJyk7Cgp2YXIgVGFibGVYZm9ybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VYZm9ybSkgewogIF9pbmhlcml0cyhUYWJsZVhmb3JtLCBfQmFzZVhmb3JtKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUYWJsZVhmb3JtKTsKCiAgZnVuY3Rpb24gVGFibGVY
Zm9ybSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGVYZm9ybSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLm1hcCA9IHsKICAgICAgYXV0b0ZpbHRlcjogbmV3IEF1dG9GaWx0ZXJYZm9ybSgpLAogICAgICB0YWJsZUNvbHVtbnM6IG5ldyBMaXN0WGZvcm0oewogICAgICAgIHRhZzogJ3RhYmxlQ29sdW1ucycsCiAgICAgICAgY291bnQ6IHRydWUsCiAgICAgICAgZW1wdHk6IHRydWUsCiAgICAgICAgY2hpbGRYZm9ybTogbmV3IFRhYmxlQ29sdW1uWGZv
cm0oKQogICAgICB9KSwKICAgICAgdGFibGVTdHlsZUluZm86IG5ldyBUYWJsZVN0eWxlSW5mb1hmb3JtKCkKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVGFibGVYZm9ybSwgW3sKICAgIGtleTogInByZXBhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmUobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgdGhpcy5tYXAuYXV0b0ZpbHRlci5wcmVwYXJlKG1vZGVsKTsKICAgICAgdGhpcy5tYXAudGFibGVDb2x1bW5zLnByZXBhcmUobW9kZWwuY29sdW1ucywgb3B0aW9ucyk7CiAgICB9CiAg
fSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoeG1sU3RyZWFtLCBtb2RlbCkgewogICAgICB4bWxTdHJlYW0ub3BlblhtbChYbWxTdHJlYW0uU3RkRG9jQXR0cmlidXRlcyk7CiAgICAgIHhtbFN0cmVhbS5vcGVuTm9kZSh0aGlzLnRhZywgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBUYWJsZVhmb3JtLlRBQkxFX0FUVFJJQlVURVMpLCB7fSwgewogICAgICAgIGlkOiBtb2RlbC5pZCwKICAgICAgICBuYW1lOiBtb2RlbC5uYW1lLAogICAgICAgIGRpc3BsYXlOYW1lOiBtb2Rl
bC5kaXNwbGF5TmFtZSB8fCBtb2RlbC5uYW1lLAogICAgICAgIHJlZjogbW9kZWwudGFibGVSZWYsCiAgICAgICAgdG90YWxzUm93Q291bnQ6IG1vZGVsLnRvdGFsc1JvdyA/ICcxJyA6IHVuZGVmaW5lZCwKICAgICAgICB0b3RhbHNSb3dTaG93bjogbW9kZWwudG90YWxzUm93ID8gdW5kZWZpbmVkIDogJzEnLAogICAgICAgIGhlYWRlclJvd0NvdW50OiBtb2RlbC5oZWFkZXJSb3cgPyAnMScgOiAnMCcKICAgICAgfSkpOwogICAgICB0aGlzLm1hcC5hdXRvRmlsdGVyLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsKTsKICAgICAgdGhp
cy5tYXAudGFibGVDb2x1bW5zLnJlbmRlcih4bWxTdHJlYW0sIG1vZGVsLmNvbHVtbnMpOwogICAgICB0aGlzLm1hcC50YWJsZVN0eWxlSW5mby5yZW5kZXIoeG1sU3RyZWFtLCBtb2RlbC5zdHlsZSk7CiAgICAgIHhtbFN0cmVhbS5jbG9zZU5vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZU9wZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlT3Blbihub2RlKSB7CiAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgIHRoaXMucGFyc2VyLnBhcnNlT3Blbihub2RlKTsKICAgICAgICByZXR1cm4gdHJ1ZTsK
ICAgICAgfQoKICAgICAgdmFyIG5hbWUgPSBub2RlLm5hbWUsCiAgICAgICAgICBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzOwoKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSB0aGlzLnRhZzoKICAgICAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgICAgIHRoaXMubW9kZWwgPSB7CiAgICAgICAgICAgIG5hbWU6IGF0dHJpYnV0ZXMubmFtZSwKICAgICAgICAgICAgZGlzcGxheU5hbWU6IGF0dHJpYnV0ZXMuZGlzcGxheU5hbWUgfHwgYXR0cmlidXRlcy5uYW1lLAogICAgICAgICAgICB0YWJsZVJlZjogYXR0
cmlidXRlcy5yZWYsCiAgICAgICAgICAgIHRvdGFsc1JvdzogYXR0cmlidXRlcy50b3RhbHNSb3dDb3VudCA9PT0gJzEnLAogICAgICAgICAgICBoZWFkZXJSb3c6IGF0dHJpYnV0ZXMuaGVhZGVyUm93Q291bnQgPT09ICcxJwogICAgICAgICAgfTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5wYXJzZXIgPSB0aGlzLm1hcFtub2RlLm5hbWVdOwoKICAgICAgICAgIGlmICh0aGlzLnBhcnNlcikgewogICAgICAgICAgICB0aGlzLnBhcnNlci5wYXJzZU9wZW4obm9kZSk7CiAgICAgICAg
ICB9CgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQpIHsKICAgICAgaWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgdGhpcy5wYXJzZXIucGFyc2VUZXh0KHRleHQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VDbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VDbG9zZShuYW1lKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAg
aWYgKHRoaXMucGFyc2VyKSB7CiAgICAgICAgaWYgKCF0aGlzLnBhcnNlci5wYXJzZUNsb3NlKG5hbWUpKSB7CiAgICAgICAgICB0aGlzLnBhcnNlciA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICBjYXNlIHRoaXMudGFnOgogICAgICAgICAgdGhpcy5tb2RlbC5jb2x1bW5zID0gdGhpcy5tYXAudGFibGVDb2x1bW5zLm1vZGVsOwoKICAgICAgICAgIGlmICh0aGlzLm1hcC5hdXRvRmlsdGVyLm1vZGVsKSB7CiAgICAgICAgICAg
IHRoaXMubW9kZWwuYXV0b0ZpbHRlclJlZiA9IHRoaXMubWFwLmF1dG9GaWx0ZXIubW9kZWwuYXV0b0ZpbHRlclJlZjsKICAgICAgICAgICAgdGhpcy5tYXAuYXV0b0ZpbHRlci5tb2RlbC5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgaW5kZXgpIHsKICAgICAgICAgICAgICBfdGhpczIubW9kZWwuY29sdW1uc1tpbmRleF0uZmlsdGVyQnV0dG9uID0gY29sdW1uLmZpbHRlckJ1dHRvbjsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5tb2RlbC5zdHlsZSA9IHRoaXMubWFwLnRhYmxl
U3R5bGVJbmZvLm1vZGVsOwogICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgLy8gY291bGQgYmUgc29tZSB1bnJlY29nbmlzZWQgdGFncwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29uY2lsZShtb2RlbCwgb3B0aW9ucykgewogICAgICAvLyBmZXRjaCB0aGUgZGZ4cyBmcm9tIHN0eWxlcwogICAgICBtb2RlbC5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbikg
ewogICAgICAgIGlmIChjb2x1bW4uZHhmSWQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgY29sdW1uLnN0eWxlID0gb3B0aW9ucy5zdHlsZXMuZ2V0RHhmU3R5bGUoY29sdW1uLmR4ZklkKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInRhZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuICd0YWJsZSc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVGFibGVYZm9ybTsKfShCYXNlWGZvcm0pOwoKVGFibGVYZm9ybS5UQUJMRV9BVFRSSUJVVEVTID0gewogIHhtbG5zOiAn
aHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3NwcmVhZHNoZWV0bWwvMjAwNi9tYWluJywKICAneG1sbnM6bWMnOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDYnLAogICdtYzpJZ25vcmFibGUnOiAneHIgeHIzJywKICAneG1sbnM6eHInOiAnaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvc3ByZWFkc2hlZXRtbC8yMDE0L3JldmlzaW9uJywKICAneG1sbnM6eHIzJzogJ2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3Nw
cmVhZHNoZWV0bWwvMjAxNi9yZXZpc2lvbjMnIC8vICd4cjp1aWQnOiAnezAwMDAwMDAwLTAwMEMtMDAwMC1GRkZGLUZGRkYwMDAwMDAwMH0nLAoKfTsKbW9kdWxlLmV4cG9ydHMgPSBUYWJsZVhmb3JtOwoKfSx7Ii4uLy4uLy4uL3V0aWxzL3htbC1zdHJlYW0iOjI3LCIuLi9iYXNlLXhmb3JtIjozMSwiLi4vbGlzdC14Zm9ybSI6NzAsIi4vYXV0by1maWx0ZXIteGZvcm0iOjEzNiwiLi90YWJsZS1jb2x1bW4teGZvcm0iOjEzOCwiLi90YWJsZS1zdHlsZS1pbmZvLXhmb3JtIjoxMzl9XSwxNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9k
dWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MsQnVmZmVyKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRo
ZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24g
X3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFy
Z2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9j
cmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfYXN5bmNJdGVyYXRvcihpdGVyYWJsZSkgeyB2YXIgbWV0aG9kOyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIpIHsgaWYgKFN5bWJv
bC5hc3luY0l0ZXJhdG9yKSB7IG1ldGhvZCA9IGl0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTsgaWYgKG1ldGhvZCAhPSBudWxsKSByZXR1cm4gbWV0aG9kLmNhbGwoaXRlcmFibGUpOyB9IGlmIChTeW1ib2wuaXRlcmF0b3IpIHsgbWV0aG9kID0gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXTsgaWYgKG1ldGhvZCAhPSBudWxsKSByZXR1cm4gbWV0aG9kLmNhbGwoaXRlcmFibGUpOyB9IH0gdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0IGlzIG5vdCBhc3luYyBpdGVyYWJsZSIpOyB9Cgp2YXIgZnMgPSByZXF1aXJlKCdm
cycpOwoKdmFyIEpTWmlwID0gcmVxdWlyZSgnanN6aXAnKTsKCnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpLAogICAgUGFzc1Rocm91Z2ggPSBfcmVxdWlyZS5QYXNzVGhyb3VnaDsKCnZhciBaaXBTdHJlYW0gPSByZXF1aXJlKCcuLi91dGlscy96aXAtc3RyZWFtJyk7Cgp2YXIgU3RyZWFtQnVmID0gcmVxdWlyZSgnLi4vdXRpbHMvc3RyZWFtLWJ1ZicpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBYbWxTdHJlYW0gPSByZXF1aXJlKCcuLi91dGlscy94bWwtc3Ry
ZWFtJyk7Cgp2YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vdXRpbHMvYnJvd3Nlci1idWZmZXItZGVjb2RlJyksCiAgICBidWZmZXJUb1N0cmluZyA9IF9yZXF1aXJlMi5idWZmZXJUb1N0cmluZzsKCnZhciBTdHlsZXNYZm9ybSA9IHJlcXVpcmUoJy4veGZvcm0vc3R5bGUvc3R5bGVzLXhmb3JtJyk7Cgp2YXIgQ29yZVhmb3JtID0gcmVxdWlyZSgnLi94Zm9ybS9jb3JlL2NvcmUteGZvcm0nKTsKCnZhciBTaGFyZWRTdHJpbmdzWGZvcm0gPSByZXF1aXJlKCcuL3hmb3JtL3N0cmluZ3Mvc2hhcmVkLXN0cmluZ3MteGZvcm0nKTsK
CnZhciBSZWxhdGlvbnNoaXBzWGZvcm0gPSByZXF1aXJlKCcuL3hmb3JtL2NvcmUvcmVsYXRpb25zaGlwcy14Zm9ybScpOwoKdmFyIENvbnRlbnRUeXBlc1hmb3JtID0gcmVxdWlyZSgnLi94Zm9ybS9jb3JlL2NvbnRlbnQtdHlwZXMteGZvcm0nKTsKCnZhciBBcHBYZm9ybSA9IHJlcXVpcmUoJy4veGZvcm0vY29yZS9hcHAteGZvcm0nKTsKCnZhciBXb3JrYm9va1hmb3JtID0gcmVxdWlyZSgnLi94Zm9ybS9ib29rL3dvcmtib29rLXhmb3JtJyk7Cgp2YXIgV29ya3NoZWV0WGZvcm0gPSByZXF1aXJlKCcuL3hmb3JtL3NoZWV0L3dv
cmtzaGVldC14Zm9ybScpOwoKdmFyIERyYXdpbmdYZm9ybSA9IHJlcXVpcmUoJy4veGZvcm0vZHJhd2luZy9kcmF3aW5nLXhmb3JtJyk7Cgp2YXIgVGFibGVYZm9ybSA9IHJlcXVpcmUoJy4veGZvcm0vdGFibGUvdGFibGUteGZvcm0nKTsKCnZhciBDb21tZW50c1hmb3JtID0gcmVxdWlyZSgnLi94Zm9ybS9jb21tZW50L2NvbW1lbnRzLXhmb3JtJyk7Cgp2YXIgVm1sTm90ZXNYZm9ybSA9IHJlcXVpcmUoJy4veGZvcm0vY29tbWVudC92bWwtbm90ZXMteGZvcm0nKTsKCnZhciB0aGVtZTFYbWwgPSByZXF1aXJlKCcuL3htbC90aGVt
ZTEuanMnKTsKCmZ1bmN0aW9uIGZzUmVhZEZpbGVBc3luYyhmaWxlbmFtZSwgb3B0aW9ucykgewogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBmcy5yZWFkRmlsZShmaWxlbmFtZSwgb3B0aW9ucywgZnVuY3Rpb24gKGVycm9yLCBkYXRhKSB7CiAgICAgIGlmIChlcnJvcikgewogICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzb2x2ZShkYXRhKTsKICAgICAgfQogICAgfSk7CiAgfSk7Cn0KCnZhciBYTFNYID0gLyojX19QVVJFX18qL2Z1bmN0
aW9uICgpIHsKICBmdW5jdGlvbiBYTFNYKHdvcmtib29rKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWExTWCk7CgogICAgdGhpcy53b3JrYm9vayA9IHdvcmtib29rOwogIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogIC8vIFdvcmtib29rCiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogIC8vIFJlYWQKCgogIF9jcmVh
dGVDbGFzcyhYTFNYLCBbewogICAga2V5OiAicmVhZEZpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWFkRmlsZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShmaWxlbmFtZSwgb3B0aW9ucykgewogICAgICAgIHZhciBzdHJlYW0sIHdvcmtib29rOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsK
ICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLmZzLmV4aXN0cyhmaWxlbmFtZSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGlmIChfY29udGV4dC5zZW50KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0K
CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkZpbGUgbm90IGZvdW5kOiAiLmNvbmNhdChmaWxlbmFtZSkpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBzdHJlYW0gPSBmcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGVuYW1lKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA1OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkKHN0cmVhbSwgb3B0aW9ucyk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAg
ICAgICAgICAgIHdvcmtib29rID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHN0cmVhbS5jbG9zZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgd29ya2Jvb2spOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEzOwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSg1KTsKICAgICAgICAgICAgICAgIHN0cmVhbS5jbG9zZSgpOwogICAgICAgICAgICAgICAgdGhyb3cgX2NvbnRl
eHQudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzUsIDEzXV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiByZWFkRmlsZShfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF9yZWFkRmlsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVhZEZpbGU7CiAgICB9KCkKICB9
LCB7CiAgICBrZXk6ICJwYXJzZVJlbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlUmVscyhzdHJlYW0pIHsKICAgICAgdmFyIHhmb3JtID0gbmV3IFJlbGF0aW9uc2hpcHNYZm9ybSgpOwogICAgICByZXR1cm4geGZvcm0ucGFyc2VTdHJlYW0oc3RyZWFtKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVdvcmtib29rIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVdvcmtib29rKHN0cmVhbSkgewogICAgICB2YXIgeGZvcm0gPSBuZXcgV29ya2Jvb2tYZm9ybSgpOwogICAgICByZXR1cm4geGZvcm0ucGFyc2VTdHJl
YW0oc3RyZWFtKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZVNoYXJlZFN0cmluZ3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlU2hhcmVkU3RyaW5ncyhzdHJlYW0pIHsKICAgICAgdmFyIHhmb3JtID0gbmV3IFNoYXJlZFN0cmluZ3NYZm9ybSgpOwogICAgICByZXR1cm4geGZvcm0ucGFyc2VTdHJlYW0oc3RyZWFtKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWNvbmNpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlY29uY2lsZShtb2RlbCwgb3B0aW9ucykgewogICAgICB2YXIgd29ya2Jvb2tYZm9ybSA9IG5l
dyBXb3JrYm9va1hmb3JtKCk7CiAgICAgIHZhciB3b3Jrc2hlZXRYZm9ybSA9IG5ldyBXb3Jrc2hlZXRYZm9ybShvcHRpb25zKTsKICAgICAgdmFyIGRyYXdpbmdYZm9ybSA9IG5ldyBEcmF3aW5nWGZvcm0oKTsKICAgICAgdmFyIHRhYmxlWGZvcm0gPSBuZXcgVGFibGVYZm9ybSgpOwogICAgICB3b3JrYm9va1hmb3JtLnJlY29uY2lsZShtb2RlbCk7IC8vIHJlY29uY2lsZSBkcmF3aW5ncyB3aXRoIHRoZWlyIHJlbHMKCiAgICAgIHZhciBkcmF3aW5nT3B0aW9ucyA9IHsKICAgICAgICBtZWRpYTogbW9kZWwubWVkaWEsCiAgICAg
ICAgbWVkaWFJbmRleDogbW9kZWwubWVkaWFJbmRleAogICAgICB9OwogICAgICBPYmplY3Qua2V5cyhtb2RlbC5kcmF3aW5ncykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgIHZhciBkcmF3aW5nID0gbW9kZWwuZHJhd2luZ3NbbmFtZV07CiAgICAgICAgdmFyIGRyYXdpbmdSZWwgPSBtb2RlbC5kcmF3aW5nUmVsc1tuYW1lXTsKCiAgICAgICAgaWYgKGRyYXdpbmdSZWwpIHsKICAgICAgICAgIGRyYXdpbmdPcHRpb25zLnJlbHMgPSBkcmF3aW5nUmVsLnJlZHVjZShmdW5jdGlvbiAobywgcmVsKSB7CiAgICAgICAg
ICAgIG9bcmVsLklkXSA9IHJlbDsKICAgICAgICAgICAgcmV0dXJuIG87CiAgICAgICAgICB9LCB7fSk7CiAgICAgICAgICAoZHJhd2luZy5hbmNob3JzIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChhbmNob3IpIHsKICAgICAgICAgICAgdmFyIGh5cGVybGlua3MgPSBhbmNob3IucGljdHVyZSAmJiBhbmNob3IucGljdHVyZS5oeXBlcmxpbmtzOwoKICAgICAgICAgICAgaWYgKGh5cGVybGlua3MgJiYgZHJhd2luZ09wdGlvbnMucmVsc1toeXBlcmxpbmtzLnJJZF0pIHsKICAgICAgICAgICAgICBoeXBlcmxpbmtzLmh5cGVybGlu
ayA9IGRyYXdpbmdPcHRpb25zLnJlbHNbaHlwZXJsaW5rcy5ySWRdLlRhcmdldDsKICAgICAgICAgICAgICBkZWxldGUgaHlwZXJsaW5rcy5ySWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgZHJhd2luZ1hmb3JtLnJlY29uY2lsZShkcmF3aW5nLCBkcmF3aW5nT3B0aW9ucyk7CiAgICAgICAgfQogICAgICB9KTsgLy8gcmVjb25jaWxlIHRhYmxlcyB3aXRoIHRoZSBkZWZhdWx0IHN0eWxlcwoKICAgICAgdmFyIHRhYmxlT3B0aW9ucyA9IHsKICAgICAgICBzdHlsZXM6IG1vZGVsLnN0eWxlcwogICAgICB9
OwogICAgICBPYmplY3QudmFsdWVzKG1vZGVsLnRhYmxlcykuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHsKICAgICAgICB0YWJsZVhmb3JtLnJlY29uY2lsZSh0YWJsZSwgdGFibGVPcHRpb25zKTsKICAgICAgfSk7CiAgICAgIHZhciBzaGVldE9wdGlvbnMgPSB7CiAgICAgICAgc3R5bGVzOiBtb2RlbC5zdHlsZXMsCiAgICAgICAgc2hhcmVkU3RyaW5nczogbW9kZWwuc2hhcmVkU3RyaW5ncywKICAgICAgICBtZWRpYTogbW9kZWwubWVkaWEsCiAgICAgICAgbWVkaWFJbmRleDogbW9kZWwubWVkaWFJbmRleCwKICAgICAgICBk
YXRlMTkwNDogbW9kZWwucHJvcGVydGllcyAmJiBtb2RlbC5wcm9wZXJ0aWVzLmRhdGUxOTA0LAogICAgICAgIGRyYXdpbmdzOiBtb2RlbC5kcmF3aW5ncywKICAgICAgICBjb21tZW50czogbW9kZWwuY29tbWVudHMsCiAgICAgICAgdGFibGVzOiBtb2RlbC50YWJsZXMsCiAgICAgICAgdm1sRHJhd2luZ3M6IG1vZGVsLnZtbERyYXdpbmdzCiAgICAgIH07CiAgICAgIG1vZGVsLndvcmtzaGVldHMuZm9yRWFjaChmdW5jdGlvbiAod29ya3NoZWV0KSB7CiAgICAgICAgd29ya3NoZWV0LnJlbGF0aW9uc2hpcHMgPSBtb2RlbC53b3Jr
c2hlZXRSZWxzW3dvcmtzaGVldC5zaGVldE5vXTsKICAgICAgICB3b3Jrc2hlZXRYZm9ybS5yZWNvbmNpbGUod29ya3NoZWV0LCBzaGVldE9wdGlvbnMpOwogICAgICB9KTsgLy8gZGVsZXRlIHVubmVjZXNzYXJ5IHBhcnRzCgogICAgICBkZWxldGUgbW9kZWwud29ya3NoZWV0SGFzaDsKICAgICAgZGVsZXRlIG1vZGVsLndvcmtzaGVldFJlbHM7CiAgICAgIGRlbGV0ZSBtb2RlbC5nbG9iYWxSZWxzOwogICAgICBkZWxldGUgbW9kZWwuc2hhcmVkU3RyaW5nczsKICAgICAgZGVsZXRlIG1vZGVsLndvcmtib29rUmVsczsKICAgICAg
ZGVsZXRlIG1vZGVsLnNoZWV0RGVmczsKICAgICAgZGVsZXRlIG1vZGVsLnN0eWxlczsKICAgICAgZGVsZXRlIG1vZGVsLm1lZGlhSW5kZXg7CiAgICAgIGRlbGV0ZSBtb2RlbC5kcmF3aW5nczsKICAgICAgZGVsZXRlIG1vZGVsLmRyYXdpbmdSZWxzOwogICAgICBkZWxldGUgbW9kZWwudm1sRHJhd2luZ3M7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3Byb2Nlc3NXb3Jrc2hlZXRFbnRyeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3Byb2Nlc3NXb3Jrc2hlZXRFbnRyeTIgPSBfYXN5bmNUb0dlbmVyYXRv
ciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHN0cmVhbSwgbW9kZWwsIHNoZWV0Tm8sIG9wdGlvbnMsIHBhdGgpIHsKICAgICAgICB2YXIgeGZvcm0sIHdvcmtzaGVldDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgog
ICAgICAgICAgICAgICAgeGZvcm0gPSBuZXcgV29ya3NoZWV0WGZvcm0ob3B0aW9ucyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4geGZvcm0ucGFyc2VTdHJlYW0oc3RyZWFtKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgd29ya3NoZWV0ID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICB3b3Jrc2hlZXQuc2hlZXRObyA9IHNoZWV0Tm87CiAgICAgICAgICAgICAgICBtb2RlbC53b3Jrc2hlZXRIYXNoW3BhdGhdID0gd29ya3No
ZWV0OwogICAgICAgICAgICAgICAgbW9kZWwud29ya3NoZWV0cy5wdXNoKHdvcmtzaGVldCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9wcm9jZXNzV29ya3NoZWV0RW50cnkoX3gzLCBfeDQsIF94NSwgX3g2LCBfeDcpIHsKICAgICAgICByZXR1cm4gX3Byb2Nlc3NXb3Jrc2hl
ZXRFbnRyeTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9wcm9jZXNzV29ya3NoZWV0RW50cnk7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfcHJvY2Vzc0NvbW1lbnRFbnRyeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3Byb2Nlc3NDb21tZW50RW50cnkyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhzdHJlYW0sIG1vZGVsLCBuYW1lKSB7CiAgICAgICAgdmFyIHhmb3Jt
LCBjb21tZW50czsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgeGZvcm0gPSBuZXcgQ29tbWVudHNYZm9ybSgpOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHhmb3JtLnBhcnNlU3Ry
ZWFtKHN0cmVhbSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGNvbW1lbnRzID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICBtb2RlbC5jb21tZW50c1siLi4vIi5jb25jYXQobmFtZSwgIi54bWwiKV0gPSBjb21tZW50czsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpOwoK
ICAgICAgZnVuY3Rpb24gX3Byb2Nlc3NDb21tZW50RW50cnkoX3g4LCBfeDksIF94MTApIHsKICAgICAgICByZXR1cm4gX3Byb2Nlc3NDb21tZW50RW50cnkyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcHJvY2Vzc0NvbW1lbnRFbnRyeTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9wcm9jZXNzVGFibGVFbnRyeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3Byb2Nlc3NUYWJsZUVudHJ5MiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5l
cmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoc3RyZWFtLCBtb2RlbCwgbmFtZSkgewogICAgICAgIHZhciB4Zm9ybSwgdGFibGU7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHhmb3JtID0gbmV3IFRhYmxlWGZvcm0oKTsKICAg
ICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB4Zm9ybS5wYXJzZVN0cmVhbShzdHJlYW0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICB0YWJsZSA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgbW9kZWwudGFibGVzWyIuLi90YWJsZXMvIi5jb25jYXQobmFtZSwgIi54bWwiKV0gPSB0YWJsZTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0
LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX3Byb2Nlc3NUYWJsZUVudHJ5KF94MTEsIF94MTIsIF94MTMpIHsKICAgICAgICByZXR1cm4gX3Byb2Nlc3NUYWJsZUVudHJ5Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX3Byb2Nlc3NUYWJsZUVudHJ5OwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX3Byb2Nlc3NXb3Jrc2hlZXRSZWxzRW50cnkiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgp
IHsKICAgICAgdmFyIF9wcm9jZXNzV29ya3NoZWV0UmVsc0VudHJ5MiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoc3RyZWFtLCBtb2RlbCwgc2hlZXRObykgewogICAgICAgIHZhciB4Zm9ybSwgcmVsYXRpb25zaGlwczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUu
cHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgeGZvcm0gPSBuZXcgUmVsYXRpb25zaGlwc1hmb3JtKCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4geGZvcm0ucGFyc2VTdHJlYW0oc3RyZWFtKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVsYXRpb25zaGlwcyA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgICAgbW9kZWwud29ya3NoZWV0UmVsc1tzaGVldE5vXSA9
IHJlbGF0aW9uc2hpcHM7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9wcm9jZXNzV29ya3NoZWV0UmVsc0VudHJ5KF94MTQsIF94MTUsIF94MTYpIHsKICAgICAgICByZXR1cm4gX3Byb2Nlc3NXb3Jrc2hlZXRSZWxzRW50cnkyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAg
IH0KCiAgICAgIHJldHVybiBfcHJvY2Vzc1dvcmtzaGVldFJlbHNFbnRyeTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9wcm9jZXNzTWVkaWFFbnRyeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3Byb2Nlc3NNZWRpYUVudHJ5MiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoZW50cnksIG1vZGVsLCBmaWxlbmFtZSkgewogICAgICAgIHZhciBsYXN0RG90LCBleHRlbnNpb24sIG5hbWU7CiAgICAgICAgcmV0dXJu
IHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGxhc3REb3QgPSBmaWxlbmFtZS5sYXN0SW5kZXhPZignLicpOyAvLyBpZiB3ZSBjYW4ndCBkZXRlcm1pbmUgZXh0ZW5zaW9uLCBpZ25vcmUgaXQKCiAgICAgICAgICAgICAgICBpZiAoIShsYXN0RG90ID49IDEpKSB7CiAgICAg
ICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZXh0ZW5zaW9uID0gZmlsZW5hbWUuc3Vic3RyKGxhc3REb3QgKyAxKTsKICAgICAgICAgICAgICAgIG5hbWUgPSBmaWxlbmFtZS5zdWJzdHIoMCwgbGFzdERvdCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAg
ICAgICB2YXIgc3RyZWFtQnVmID0gbmV3IFN0cmVhbUJ1ZigpOwogICAgICAgICAgICAgICAgICBzdHJlYW1CdWYub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBtb2RlbC5tZWRpYUluZGV4W2ZpbGVuYW1lXSA9IG1vZGVsLm1lZGlhLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBtb2RlbC5tZWRpYUluZGV4W25hbWVdID0gbW9kZWwubWVkaWEubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIHZhciBtZWRpdW0gPSB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLAog
ICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbjogZXh0ZW5zaW9uLAogICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBzdHJlYW1CdWYudG9CdWZmZXIoKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgbW9kZWwubWVkaWEucHVzaChtZWRpdW0pOwogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIGVudHJ5Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJv
cikgewogICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBlbnRyeS5waXBlKHN0cmVhbUJ1Zik7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX3Byb2Nlc3NNZWRp
YUVudHJ5KF94MTcsIF94MTgsIF94MTkpIHsKICAgICAgICByZXR1cm4gX3Byb2Nlc3NNZWRpYUVudHJ5Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX3Byb2Nlc3NNZWRpYUVudHJ5OwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX3Byb2Nlc3NEcmF3aW5nRW50cnkiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9wcm9jZXNzRHJhd2luZ0VudHJ5MiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24g
X2NhbGxlZTcoZW50cnksIG1vZGVsLCBuYW1lKSB7CiAgICAgICAgdmFyIHhmb3JtLCBkcmF3aW5nOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB4Zm9ybSA9IG5ldyBEcmF3aW5nWGZvcm0oKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5u
ZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB4Zm9ybS5wYXJzZVN0cmVhbShlbnRyeSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGRyYXdpbmcgPSBfY29udGV4dDcuc2VudDsKICAgICAgICAgICAgICAgIG1vZGVsLmRyYXdpbmdzW25hbWVdID0gZHJhd2luZzsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9j
YWxsZWU3KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX3Byb2Nlc3NEcmF3aW5nRW50cnkoX3gyMCwgX3gyMSwgX3gyMikgewogICAgICAgIHJldHVybiBfcHJvY2Vzc0RyYXdpbmdFbnRyeTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9wcm9jZXNzRHJhd2luZ0VudHJ5OwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX3Byb2Nlc3NEcmF3aW5nUmVsc0VudHJ5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcHJvY2Vzc0RyYXdpbmdSZWxzRW50cnkyID0gX2Fz
eW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOChlbnRyeSwgbW9kZWwsIG5hbWUpIHsKICAgICAgICB2YXIgeGZvcm0sIHJlbGF0aW9uc2hpcHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAg
ICAgICAgICAgICAgIHhmb3JtID0gbmV3IFJlbGF0aW9uc2hpcHNYZm9ybSgpOwogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHhmb3JtLnBhcnNlU3RyZWFtKGVudHJ5KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVsYXRpb25zaGlwcyA9IF9jb250ZXh0OC5zZW50OwogICAgICAgICAgICAgICAgbW9kZWwuZHJhd2luZ1JlbHNbbmFtZV0gPSByZWxhdGlvbnNoaXBzOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2Fz
ZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTgpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfcHJvY2Vzc0RyYXdpbmdSZWxzRW50cnkoX3gyMywgX3gyNCwgX3gyNSkgewogICAgICAgIHJldHVybiBfcHJvY2Vzc0RyYXdpbmdSZWxzRW50cnkyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcHJvY2Vzc0RyYXdpbmdSZWxzRW50cnk7CiAgICB9KCkKICB9LCB7CiAg
ICBrZXk6ICJfcHJvY2Vzc1ZtbERyYXdpbmdFbnRyeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3Byb2Nlc3NWbWxEcmF3aW5nRW50cnkyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOShlbnRyeSwgbW9kZWwsIG5hbWUpIHsKICAgICAgICB2YXIgeGZvcm0sIHZtbERyYXdpbmc7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU5JChfY29udGV4dDkpIHsKICAgICAg
ICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHhmb3JtID0gbmV3IFZtbE5vdGVzWGZvcm0oKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB4Zm9ybS5wYXJzZVN0cmVhbShlbnRyeSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHZtbERyYXdpbmcgPSBfY29udGV4dDkuc2VudDsKICAgICAgICAg
ICAgICAgIG1vZGVsLnZtbERyYXdpbmdzWyIuLi9kcmF3aW5ncy8iLmNvbmNhdChuYW1lLCAiLnZtbCIpXSA9IHZtbERyYXdpbmc7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9wcm9jZXNzVm1sRHJhd2luZ0VudHJ5KF94MjYsIF94MjcsIF94MjgpIHsKICAgICAgICByZXR1cm4g
X3Byb2Nlc3NWbWxEcmF3aW5nRW50cnkyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcHJvY2Vzc1ZtbERyYXdpbmdFbnRyeTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9wcm9jZXNzVGhlbWVFbnRyeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3Byb2Nlc3NUaGVtZUVudHJ5MiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEwKGVudHJ5LCBtb2RlbCwgbmFtZSkgewogICAg
ICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTAkKF9jb250ZXh0MTApIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHN0
cmVhbSBlbnRyeSBpbnRvIGJ1ZmZlciBhbmQgc3RvcmUgdGhlIHhtbCBpbiB0aGUgbW9kZWwudGhlbWVzW10KICAgICAgICAgICAgICAgICAgdmFyIHN0cmVhbSA9IG5ldyBTdHJlYW1CdWYoKTsKICAgICAgICAgICAgICAgICAgZW50cnkub24oJ2Vycm9yJywgcmVqZWN0KTsKICAgICAgICAgICAgICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIHJlamVjdCk7CiAgICAgICAgICAgICAgICAgIHN0cmVhbS5vbignZmluaXNoJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIG1vZGVsLnRoZW1lc1tuYW1lXSA9IHN0cmVh
bS5yZWFkKCkudG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBlbnRyeS5waXBlKHN0cmVhbSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTApOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBf
cHJvY2Vzc1RoZW1lRW50cnkoX3gyOSwgX3gzMCwgX3gzMSkgewogICAgICAgIHJldHVybiBfcHJvY2Vzc1RoZW1lRW50cnkyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcHJvY2Vzc1RoZW1lRW50cnk7CiAgICB9KCkKICAgIC8qKg0KICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gNC4wLiBZb3Ugc2hvdWxkIHVzZSBgI3JlYWRgIGluc3RlYWQuIFBsZWFzZSBmb2xsb3cgdXBncmFkZSBpbnN0cnVjdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2V4Y2VsanMvZXhjZWxqcy9ibG9i
L21hc3Rlci9VUEdSQURFLTQuMC5tZA0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjcmVhdGVJbnB1dFN0cmVhbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSW5wdXRTdHJlYW0oKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignYFhMU1gjY3JlYXRlSW5wdXRTdHJlYW1gIGlzIGRlcHJlY2F0ZWQuIFlvdSBzaG91bGQgdXNlIGBYTFNYI3JlYWRgIGluc3RlYWQuIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDUuMC4gUGxlYXNlIGZvbGxvdyB1cGdyYWRlIGluc3RydWN0aW9uOiBodHRwczovL2dp
dGh1Yi5jb20vZXhjZWxqcy9leGNlbGpzL2Jsb2IvbWFzdGVyL1VQR1JBREUtNC4wLm1kJyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVhZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlYWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMShzdHJlYW0sIG9wdGlvbnMpIHsKICAgICAgICB2YXIgY2h1bmtzLCBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uLCBfZGlkSXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yRXJy
b3IsIF9pdGVyYXRvciwgX3N0ZXAsIF92YWx1ZSwgY2h1bms7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTEkKF9jb250ZXh0MTEpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgLy8gVE9ETzogUmVtb3ZlIG9uY2Ugbm9kZSB2OCBpcyBkZXByZWNhdGVkCiAgICAgICAgICAgICAgICAvLyBEZXRlY3QgYW5k
IHVwZ3JhZGUgb2xkIHN0cmVhbXMKICAgICAgICAgICAgICAgIGlmICghc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSAmJiBzdHJlYW0ucGlwZSkgewogICAgICAgICAgICAgICAgICBzdHJlYW0gPSBzdHJlYW0ucGlwZShuZXcgUGFzc1Rocm91Z2goKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY2h1bmtzID0gW107CiAgICAgICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7CiAgICAgICAgICAg
ICAgICBfY29udGV4dDExLnByZXYgPSA0OwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yID0gX2FzeW5jSXRlcmF0b3Ioc3RyZWFtKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfaXRlcmF0b3IubmV4dCgpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfc3RlcCA9IF9jb250ZXh0MTEuc2VudDsKICAgICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSBfc3RlcC5kb25lOwog
ICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX3N0ZXAudmFsdWU7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfdmFsdWUgPSBfY29udGV4dDExLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24pIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNodW5rID0gX3Zh
bHVlOwogICAgICAgICAgICAgICAgY2h1bmtzLnB1c2goY2h1bmspOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSA2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAyNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAg
X2NvbnRleHQxMS5wcmV2ID0gMjE7CiAgICAgICAgICAgICAgICBfY29udGV4dDExLnQwID0gX2NvbnRleHQxMVsiY2F0Y2giXSg0KTsKICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gX2NvbnRleHQxMS50MDsKCiAgICAgICAgICAgICAgY2FzZSAyNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTEucHJldiA9IDI1OwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gMjY7CgogICAgICAgICAgICAgICAgaWYgKCEoIV9pdGVyYXRv
ck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAzMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMzA7CiAgICAgICAgICAgICAgICByZXR1cm4gX2l0ZXJhdG9yLnJldHVybigpOwoKICAgICAgICAgICAgICBjYXNlIDMwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gMzA7CgogICAgICAgICAgICAgICAgaWYgKCFf
ZGlkSXRlcmF0b3JFcnJvcikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAzMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7CgogICAgICAgICAgICAgIGNhc2UgMzM6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5maW5pc2goMzApOwoKICAgICAgICAgICAgICBjYXNlIDM0OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuZmluaXNoKDI1KTsKCiAgICAgICAgICAgICAgY2Fz
ZSAzNToKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdCgicmV0dXJuIiwgdGhpcy5sb2FkKEJ1ZmZlci5jb25jYXQoY2h1bmtzKSwgb3B0aW9ucykpOwoKICAgICAgICAgICAgICBjYXNlIDM2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTEsIHRoaXMsIFtbNCwgMjEsIDI1LCAzNV0sIFsyNiwsIDMwLCAzNF1dKTsKICAgICAgfSkpOwoKICAgICAg
ZnVuY3Rpb24gcmVhZChfeDMyLCBfeDMzKSB7CiAgICAgICAgcmV0dXJuIF9yZWFkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZWFkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAibG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2xvYWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMihkYXRhLCBvcHRpb25zKSB7CiAgICAgICAgdmFyIGJ1ZmZlciwgbW9kZWwsIHppcCwg
X2ksIF9PYmplY3QkdmFsdWVzLCBlbnRyeSwgZW50cnlOYW1lLCBzdHJlYW0sIGNvbnRlbnQsIGNodW5rU2l6ZSwgaSwgd29ya2Jvb2ssIGFwcFhmb3JtLCBhcHBQcm9wZXJ0aWVzLCBjb3JlWGZvcm0sIGNvcmVQcm9wZXJ0aWVzLCBtYXRjaDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMiQoX2NvbnRleHQxMikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEyLnByZXYgPSBfY29udGV4dDEyLm5leHQpIHsKICAgICAgICAg
ICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmJhc2U2NCkgewogICAgICAgICAgICAgICAgICBidWZmZXIgPSBCdWZmZXIuZnJvbShkYXRhLnRvU3RyaW5nKCksICdiYXNlNjQnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbW9kZWwgPSB7CiAgICAgICAgICAgICAgICAgIHdvcmtzaGVldHM6IFtdLAogICAgICAgICAgICAgICAgICB3b3Jrc2hlZXRIYXNoOiB7
fSwKICAgICAgICAgICAgICAgICAgd29ya3NoZWV0UmVsczogW10sCiAgICAgICAgICAgICAgICAgIHRoZW1lczoge30sCiAgICAgICAgICAgICAgICAgIG1lZGlhOiBbXSwKICAgICAgICAgICAgICAgICAgbWVkaWFJbmRleDoge30sCiAgICAgICAgICAgICAgICAgIGRyYXdpbmdzOiB7fSwKICAgICAgICAgICAgICAgICAgZHJhd2luZ1JlbHM6IHt9LAogICAgICAgICAgICAgICAgICBjb21tZW50czoge30sCiAgICAgICAgICAgICAgICAgIHRhYmxlczoge30sCiAgICAgICAgICAgICAgICAgIHZtbERyYXdpbmdzOiB7fQogICAg
ICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gSlNaaXAubG9hZEFzeW5jKGJ1ZmZlcik7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHppcCA9IF9jb250ZXh0MTIuc2VudDsKICAgICAgICAgICAgICAgIF9pID0gMCwgX09iamVjdCR2YWx1ZXMgPSBPYmplY3QudmFsdWVzKHppcC5maWxlcyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIGlmICghKF9pIDwgX09iamVjdCR2YWx1ZXMubGVuZ3Ro
KSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAxMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGVudHJ5ID0gX09iamVjdCR2YWx1ZXNbX2ldOwoKICAgICAgICAgICAgICAgIGlmIChlbnRyeS5kaXIpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMTIzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlbnRyeU5hbWUgPSBlbnRyeS5uYW1lOwoKICAgICAg
ICAgICAgICAgIGlmIChlbnRyeU5hbWVbMF0gPT09ICcvJykgewogICAgICAgICAgICAgICAgICBlbnRyeU5hbWUgPSBlbnRyeU5hbWUuc3Vic3RyKDEpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN0cmVhbSA9IHZvaWQgMDsKCiAgICAgICAgICAgICAgICBpZiAoIShlbnRyeU5hbWUubWF0Y2goL3hsXC9tZWRpYVwvLykgfHwgLy8gdGhlbWVzIGFyZSBub3QgcGFyc2VkIGFzIHN0cmVhbQogICAgICAgICAgICAgICAgZW50cnlOYW1lLm1hdGNoKC94bFwvdGhlbWVcLyhbYS16QS1aMC05XSspWy5deG1sLykp
KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBzdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2goKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIudDAgPSBzdHJlYW07CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS5hc3luYygnbm9kZWJ1ZmZlcicpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAg
X2NvbnRleHQxMi50MSA9IF9jb250ZXh0MTIuc2VudDsKCiAgICAgICAgICAgICAgICBfY29udGV4dDEyLnQwLndyaXRlLmNhbGwoX2NvbnRleHQxMi50MCwgX2NvbnRleHQxMi50MSk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMzY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIC8vIHVzZSBvYmplY3QgbW9kZSB0byBhdm9pZCBidWZmZXItc3RyaW5nIGNvbnZlbnRpb24KICAgICAgICAgICAgICAgIHN0cmVhbSA9IG5ldyBQYXNzVGhyb3Vn
aCh7CiAgICAgICAgICAgICAgICAgIHdyaXRhYmxlT2JqZWN0TW9kZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgcmVhZGFibGVPYmplY3RNb2RlOiB0cnVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB2b2lkIDA7IC8vIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3Byb2Nlc3MKCiAgICAgICAgICAgICAgICBpZiAoIXByb2Nlc3MuYnJvd3NlcikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAzMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAg
ICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi50MiA9IGJ1ZmZlclRvU3RyaW5nOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkuYXN5bmMoJ25vZGVidWZmZXInKTsKCiAgICAgICAgICAgICAgY2FzZSAyNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIudDMgPSBfY29udGV4dDEyLnNlbnQ7CiAgICAgICAgICAgICAgICBjb250ZW50ID0gKDAsIF9jb250ZXh0MTIudDIpKF9jb250ZXh0MTIudDMpOwogICAgICAgICAgICAgICAgX2Nv
bnRleHQxMi5uZXh0ID0gMzQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDMzOwogICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5LmFzeW5jKCdzdHJpbmcnKTsKCiAgICAgICAgICAgICAgY2FzZSAzMzoKICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBfY29udGV4dDEyLnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgMzQ6CiAgICAgICAgICAgICAgICBjaHVua1NpemUgPSAxNiAqIDEwMjQ7CgogICAgICAgICAgICAgICAgZm9y
IChpID0gMDsgaSA8IGNvbnRlbnQubGVuZ3RoOyBpICs9IGNodW5rU2l6ZSkgewogICAgICAgICAgICAgICAgICBzdHJlYW0ud3JpdGUoY29udGVudC5zdWJzdHJpbmcoaSwgaSArIGNodW5rU2l6ZSkpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDM2OgogICAgICAgICAgICAgICAgc3RyZWFtLmVuZCgpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMi50NCA9IGVudHJ5TmFtZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IF9jb250ZXh0MTIudDQgPT09ICdfcmVscy8ucmVscycgPyA0
MCA6IF9jb250ZXh0MTIudDQgPT09ICd4bC93b3JrYm9vay54bWwnID8gNDQgOiBfY29udGV4dDEyLnQ0ID09PSAneGwvX3JlbHMvd29ya2Jvb2sueG1sLnJlbHMnID8gNTMgOiBfY29udGV4dDEyLnQ0ID09PSAneGwvc2hhcmVkU3RyaW5ncy54bWwnID8gNTcgOiBfY29udGV4dDEyLnQ0ID09PSAneGwvc3R5bGVzLnhtbCcgPyA2MSA6IF9jb250ZXh0MTIudDQgPT09ICdkb2NQcm9wcy9hcHAueG1sJyA/IDY1IDogX2NvbnRleHQxMi50NCA9PT0gJ2RvY1Byb3BzL2NvcmUueG1sJyA/IDcyIDogNzg7CiAgICAgICAgICAgICAgICBi
cmVhazsKCiAgICAgICAgICAgICAgY2FzZSA0MDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDQyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VSZWxzKHN0cmVhbSk7CgogICAgICAgICAgICAgIGNhc2UgNDI6CiAgICAgICAgICAgICAgICBtb2RlbC5nbG9iYWxSZWxzID0gX2NvbnRleHQxMi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuYWJydXB0KCJicmVhayIsIDEyMyk7CgogICAgICAgICAgICAgIGNhc2UgNDQ6CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5l
eHQgPSA0NjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlV29ya2Jvb2soc3RyZWFtKTsKCiAgICAgICAgICAgICAgY2FzZSA0NjoKICAgICAgICAgICAgICAgIHdvcmtib29rID0gX2NvbnRleHQxMi5zZW50OwogICAgICAgICAgICAgICAgbW9kZWwuc2hlZXRzID0gd29ya2Jvb2suc2hlZXRzOwogICAgICAgICAgICAgICAgbW9kZWwuZGVmaW5lZE5hbWVzID0gd29ya2Jvb2suZGVmaW5lZE5hbWVzOwogICAgICAgICAgICAgICAgbW9kZWwudmlld3MgPSB3b3JrYm9vay52aWV3czsKICAgICAgICAgICAgICAgIG1v
ZGVsLnByb3BlcnRpZXMgPSB3b3JrYm9vay5wcm9wZXJ0aWVzOwogICAgICAgICAgICAgICAgbW9kZWwuY2FsY1Byb3BlcnRpZXMgPSB3b3JrYm9vay5jYWxjUHJvcGVydGllczsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFicnVwdCgiYnJlYWsiLCAxMjMpOwoKICAgICAgICAgICAgICBjYXNlIDUzOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gNTU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVJlbHMoc3RyZWFtKTsKCiAgICAgICAgICAgICAgY2FzZSA1NToKICAgICAgICAg
ICAgICAgIG1vZGVsLndvcmtib29rUmVscyA9IF9jb250ZXh0MTIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFicnVwdCgiYnJlYWsiLCAxMjMpOwoKICAgICAgICAgICAgICBjYXNlIDU3OgogICAgICAgICAgICAgICAgbW9kZWwuc2hhcmVkU3RyaW5ncyA9IG5ldyBTaGFyZWRTdHJpbmdzWGZvcm0oKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDYwOwogICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsLnNoYXJlZFN0cmluZ3MucGFyc2VTdHJlYW0oc3RyZWFtKTsKCiAgICAgICAg
ICAgICAgY2FzZSA2MDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFicnVwdCgiYnJlYWsiLCAxMjMpOwoKICAgICAgICAgICAgICBjYXNlIDYxOgogICAgICAgICAgICAgICAgbW9kZWwuc3R5bGVzID0gbmV3IFN0eWxlc1hmb3JtKCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA2NDsKICAgICAgICAgICAgICAgIHJldHVybiBtb2RlbC5zdHlsZXMucGFyc2VTdHJlYW0oc3RyZWFtKTsKCiAgICAgICAgICAgICAgY2FzZSA2NDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFi
cnVwdCgiYnJlYWsiLCAxMjMpOwoKICAgICAgICAgICAgICBjYXNlIDY1OgogICAgICAgICAgICAgICAgYXBwWGZvcm0gPSBuZXcgQXBwWGZvcm0oKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDY4OwogICAgICAgICAgICAgICAgcmV0dXJuIGFwcFhmb3JtLnBhcnNlU3RyZWFtKHN0cmVhbSk7CgogICAgICAgICAgICAgIGNhc2UgNjg6CiAgICAgICAgICAgICAgICBhcHBQcm9wZXJ0aWVzID0gX2NvbnRleHQxMi5zZW50OwogICAgICAgICAgICAgICAgbW9kZWwuY29tcGFueSA9IGFwcFByb3BlcnRpZXMuY29t
cGFueTsKICAgICAgICAgICAgICAgIG1vZGVsLm1hbmFnZXIgPSBhcHBQcm9wZXJ0aWVzLm1hbmFnZXI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoImJyZWFrIiwgMTIzKTsKCiAgICAgICAgICAgICAgY2FzZSA3MjoKICAgICAgICAgICAgICAgIGNvcmVYZm9ybSA9IG5ldyBDb3JlWGZvcm0oKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDc1OwogICAgICAgICAgICAgICAgcmV0dXJuIGNvcmVYZm9ybS5wYXJzZVN0cmVhbShzdHJlYW0pOwoKICAgICAgICAgICAgICBjYXNlIDc1
OgogICAgICAgICAgICAgICAgY29yZVByb3BlcnRpZXMgPSBfY29udGV4dDEyLnNlbnQ7CiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG1vZGVsLCBjb3JlUHJvcGVydGllcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoImJyZWFrIiwgMTIzKTsKCiAgICAgICAgICAgICAgY2FzZSA3ODoKICAgICAgICAgICAgICAgIG1hdGNoID0gZW50cnlOYW1lLm1hdGNoKC94bFwvd29ya3NoZWV0c1wvc2hlZXQoXGQrKVsuXXhtbC8pOwoKICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAg
ICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gODM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDgyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NXb3Jrc2hlZXRFbnRyeShzdHJlYW0sIG1vZGVsLCBtYXRjaFsxXSwgb3B0aW9ucywgZW50cnlOYW1lKTsKCiAgICAgICAgICAgICAgY2FzZSA4MjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFicnVwdCgiYnJlYWsiLCAxMjMpOwoKICAgICAg
ICAgICAgICBjYXNlIDgzOgogICAgICAgICAgICAgICAgbWF0Y2ggPSBlbnRyeU5hbWUubWF0Y2goL3hsXC93b3Jrc2hlZXRzXC9fcmVsc1wvc2hlZXQoXGQrKVsuXXhtbC5yZWxzLyk7CgogICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA4ODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gODc7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc1dvcmtz
aGVldFJlbHNFbnRyeShzdHJlYW0sIG1vZGVsLCBtYXRjaFsxXSk7CgogICAgICAgICAgICAgIGNhc2UgODc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoImJyZWFrIiwgMTIzKTsKCiAgICAgICAgICAgICAgY2FzZSA4ODoKICAgICAgICAgICAgICAgIG1hdGNoID0gZW50cnlOYW1lLm1hdGNoKC94bFwvdGhlbWVcLyhbYS16QS1aMC05XSspWy5deG1sLyk7CgogICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA5MzsKICAgICAgICAg
ICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gOTI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc1RoZW1lRW50cnkoc3RyZWFtLCBtb2RlbCwgbWF0Y2hbMV0pOwoKICAgICAgICAgICAgICBjYXNlIDkyOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuYWJydXB0KCJicmVhayIsIDEyMyk7CgogICAgICAgICAgICAgIGNhc2UgOTM6CiAgICAgICAgICAgICAgICBtYXRjaCA9IGVudHJ5TmFtZS5tYXRjaCgveGxcL21lZGlh
XC8oW2EtekEtWjAtOV0rWy5dW2EtekEtWjAtOV17Myw0fSkkLyk7CgogICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA5ODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gOTc7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc01lZGlhRW50cnkoc3RyZWFtLCBtb2RlbCwgbWF0Y2hbMV0pOwoKICAgICAgICAgICAgICBjYXNlIDk3OgogICAgICAgICAg
ICAgICAgcmV0dXJuIF9jb250ZXh0MTIuYWJydXB0KCJicmVhayIsIDEyMyk7CgogICAgICAgICAgICAgIGNhc2UgOTg6CiAgICAgICAgICAgICAgICBtYXRjaCA9IGVudHJ5TmFtZS5tYXRjaCgveGxcL2RyYXdpbmdzXC8oW2EtekEtWjAtOV0rKVsuXXhtbC8pOwoKICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMTAzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAx
MDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc0RyYXdpbmdFbnRyeShzdHJlYW0sIG1vZGVsLCBtYXRjaFsxXSk7CgogICAgICAgICAgICAgIGNhc2UgMTAyOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuYWJydXB0KCJicmVhayIsIDEyMyk7CgogICAgICAgICAgICAgIGNhc2UgMTAzOgogICAgICAgICAgICAgICAgbWF0Y2ggPSBlbnRyeU5hbWUubWF0Y2goL3hsXC8oY29tbWVudHNcZCspWy5deG1sLyk7CgogICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAg
ICBfY29udGV4dDEyLm5leHQgPSAxMDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDEwNzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzQ29tbWVudEVudHJ5KHN0cmVhbSwgbW9kZWwsIG1hdGNoWzFdKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoImJyZWFrIiwgMTIzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDg6CiAgICAgICAgICAg
ICAgICBtYXRjaCA9IGVudHJ5TmFtZS5tYXRjaCgveGxcL3RhYmxlc1wvKHRhYmxlXGQrKVsuXXhtbC8pOwoKICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMTEzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAxMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc1RhYmxlRW50cnkoc3RyZWFtLCBtb2RlbCwgbWF0Y2hbMV0pOwoKICAgICAgICAg
ICAgICBjYXNlIDExMjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFicnVwdCgiYnJlYWsiLCAxMjMpOwoKICAgICAgICAgICAgICBjYXNlIDExMzoKICAgICAgICAgICAgICAgIG1hdGNoID0gZW50cnlOYW1lLm1hdGNoKC94bFwvZHJhd2luZ3NcL19yZWxzXC8oW2EtekEtWjAtOV0rKVsuXXhtbFsuXXJlbHMvKTsKCiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDExODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAg
ICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMTE3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NEcmF3aW5nUmVsc0VudHJ5KHN0cmVhbSwgbW9kZWwsIG1hdGNoWzFdKTsKCiAgICAgICAgICAgICAgY2FzZSAxMTc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoImJyZWFrIiwgMTIzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMTg6CiAgICAgICAgICAgICAgICBtYXRjaCA9IGVudHJ5TmFtZS5tYXRjaCgveGxcL2RyYXdpbmdzXC8odm1sRHJhd2luZ1xkKylb
Ll12bWwvKTsKCiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDEyMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMTIyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NWbWxEcmF3aW5nRW50cnkoc3RyZWFtLCBtb2RlbCwgbWF0Y2hbMV0pOwoKICAgICAgICAgICAgICBjYXNlIDEyMjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEy
LmFicnVwdCgiYnJlYWsiLCAxMjMpOwoKICAgICAgICAgICAgICBjYXNlIDEyMzoKICAgICAgICAgICAgICAgIF9pKys7CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTI2OgogICAgICAgICAgICAgICAgdGhpcy5yZWNvbmNpbGUobW9kZWwsIG9wdGlvbnMpOyAvLyBhcHBseSBtb2RlbAoKICAgICAgICAgICAgICAgIHRoaXMud29ya2Jvb2subW9kZWwgPSBtb2RlbDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFi
cnVwdCgicmV0dXJuIiwgdGhpcy53b3JrYm9vayk7CgogICAgICAgICAgICAgIGNhc2UgMTI5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBsb2FkKF94MzQsIF94MzUpIHsKICAgICAgICByZXR1cm4gX2xvYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGxvYWQ7CiAg
ICB9KCkgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gV3JpdGUKCiAgfSwgewogICAga2V5OiAiYWRkTWVkaWEiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9hZGRNZWRpYSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE0KHppcCwgbW9kZWwpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAo
ZnVuY3Rpb24gX2NhbGxlZTE0JChfY29udGV4dDE0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTQucHJldiA9IF9jb250ZXh0MTQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobW9kZWwubWVkaWEubWFwKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAv
KiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEzKG1lZGl1bSkgewogICAgICAgICAgICAgICAgICAgIHZhciBmaWxlbmFtZSwgZGF0YSwgZGF0YWltZzY0LCBjb250ZW50OwogICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTMkKF9jb250ZXh0MTMpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMy5wcmV2ID0gX2NvbnRl
eHQxMy5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobWVkaXVtLnR5cGUgPT09ICdpbWFnZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9ICJ4bC9tZWRpYS8iLmNvbmNhdChtZWRpdW0ubmFtZSwg
Ii4iKS5jb25jYXQobWVkaXVtLmV4dGVuc2lvbik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZWRpdW0uZmlsZW5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmc1JlYWRGaWxlQXN5
bmMobWVkaXVtLmZpbGVuYW1lKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0MTMuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLmFicnVwdCgicmV0dXJuIiwgemlwLmFwcGVuZChkYXRhLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGZpbGVuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ug
NzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWVkaXVtLmJ1ZmZlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSA5OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5hYnJ1cHQoInJldHVybiIsIHppcC5hcHBlbmQobWVkaXVtLmJ1ZmZlciwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBm
aWxlbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1lZGl1bS5iYXNlNjQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFpbWc2NCA9IG1lZGl1bS5iYXNlNjQ7
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gZGF0YWltZzY0LnN1YnN0cmluZyhkYXRhaW1nNjQuaW5kZXhPZignLCcpICsgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5hYnJ1cHQoInJldHVybiIsIHppcC5hcHBlbmQoY29udGVudCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBmaWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTY0OiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAg
ICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIG1lZGlhJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIF9j
YWxsZWUxMyk7CiAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gzOCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KCkpKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAg
ICB9LCBfY2FsbGVlMTQpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBhZGRNZWRpYShfeDM2LCBfeDM3KSB7CiAgICAgICAgcmV0dXJuIF9hZGRNZWRpYS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYWRkTWVkaWE7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJhZGREcmF3aW5ncyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRHJhd2luZ3MoemlwLCBtb2RlbCkgewogICAgICB2YXIgZHJhd2luZ1hmb3JtID0gbmV3IERyYXdpbmdYZm9ybSgpOwogICAgICB2YXIgcmVsc1hmb3JtID0g
bmV3IFJlbGF0aW9uc2hpcHNYZm9ybSgpOwogICAgICBtb2RlbC53b3Jrc2hlZXRzLmZvckVhY2goZnVuY3Rpb24gKHdvcmtzaGVldCkgewogICAgICAgIHZhciBkcmF3aW5nID0gd29ya3NoZWV0LmRyYXdpbmc7CgogICAgICAgIGlmIChkcmF3aW5nKSB7CiAgICAgICAgICBkcmF3aW5nWGZvcm0ucHJlcGFyZShkcmF3aW5nLCB7fSk7CiAgICAgICAgICB2YXIgeG1sID0gZHJhd2luZ1hmb3JtLnRvWG1sKGRyYXdpbmcpOwogICAgICAgICAgemlwLmFwcGVuZCh4bWwsIHsKICAgICAgICAgICAgbmFtZTogInhsL2RyYXdpbmdzLyIu
Y29uY2F0KGRyYXdpbmcubmFtZSwgIi54bWwiKQogICAgICAgICAgfSk7CiAgICAgICAgICB4bWwgPSByZWxzWGZvcm0udG9YbWwoZHJhd2luZy5yZWxzKTsKICAgICAgICAgIHppcC5hcHBlbmQoeG1sLCB7CiAgICAgICAgICAgIG5hbWU6ICJ4bC9kcmF3aW5ncy9fcmVscy8iLmNvbmNhdChkcmF3aW5nLm5hbWUsICIueG1sLnJlbHMiKQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRUYWJsZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFRhYmxlcyh6aXAsIG1vZGVs
KSB7CiAgICAgIHZhciB0YWJsZVhmb3JtID0gbmV3IFRhYmxlWGZvcm0oKTsKICAgICAgbW9kZWwud29ya3NoZWV0cy5mb3JFYWNoKGZ1bmN0aW9uICh3b3Jrc2hlZXQpIHsKICAgICAgICB2YXIgdGFibGVzID0gd29ya3NoZWV0LnRhYmxlczsKICAgICAgICB0YWJsZXMuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHsKICAgICAgICAgIHRhYmxlWGZvcm0ucHJlcGFyZSh0YWJsZSwge30pOwogICAgICAgICAgdmFyIHRhYmxlWG1sID0gdGFibGVYZm9ybS50b1htbCh0YWJsZSk7CiAgICAgICAgICB6aXAuYXBwZW5kKHRhYmxlWG1s
LCB7CiAgICAgICAgICAgIG5hbWU6ICJ4bC90YWJsZXMvIi5jb25jYXQodGFibGUudGFyZ2V0KQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZENvbnRlbnRUeXBlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2FkZENvbnRlbnRUeXBlcyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE1KHppcCwgbW9kZWwpIHsKICAgICAgICB2YXIgeGZvcm0sIHhtbDsK
ICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE1JChfY29udGV4dDE1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTUucHJldiA9IF9jb250ZXh0MTUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHhmb3JtID0gbmV3IENvbnRlbnRUeXBlc1hmb3JtKCk7CiAgICAgICAgICAgICAgICB4bWwgPSB4Zm9ybS50b1htbChtb2RlbCk7CiAgICAgICAgICAgICAgICB6aXAuYXBwZW5kKHhtbCwgewog
ICAgICAgICAgICAgICAgICBuYW1lOiAnW0NvbnRlbnRfVHlwZXNdLnhtbCcKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGFkZENvbnRlbnRUeXBlcyhfeDM5LCBfeDQwKSB7CiAgICAgICAgcmV0dXJuIF9hZGRDb250ZW50VHlwZXMuYXBwbHko
dGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFkZENvbnRlbnRUeXBlczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImFkZEFwcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2FkZEFwcCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE2KHppcCwgbW9kZWwpIHsKICAgICAgICB2YXIgeGZvcm0sIHhtbDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2Nh
bGxlZTE2JChfY29udGV4dDE2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTYucHJldiA9IF9jb250ZXh0MTYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHhmb3JtID0gbmV3IEFwcFhmb3JtKCk7CiAgICAgICAgICAgICAgICB4bWwgPSB4Zm9ybS50b1htbChtb2RlbCk7CiAgICAgICAgICAgICAgICB6aXAuYXBwZW5kKHhtbCwgewogICAgICAgICAgICAgICAgICBuYW1lOiAnZG9jUHJvcHMvYXBwLnhtbCcKICAgICAgICAgICAgICAgIH0p
OwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNik7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGFkZEFwcChfeDQxLCBfeDQyKSB7CiAgICAgICAgcmV0dXJuIF9hZGRBcHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFkZEFwcDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImFkZENvcmUi
LAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9hZGRDb3JlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTcoemlwLCBtb2RlbCkgewogICAgICAgIHZhciBjb3JlWGZvcm07CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNyQoX2NvbnRleHQxNykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE3LnByZXYgPSBfY29udGV4
dDE3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb3JlWGZvcm0gPSBuZXcgQ29yZVhmb3JtKCk7CiAgICAgICAgICAgICAgICB6aXAuYXBwZW5kKGNvcmVYZm9ybS50b1htbChtb2RlbCksIHsKICAgICAgICAgICAgICAgICAgbmFtZTogJ2RvY1Byb3BzL2NvcmUueG1sJwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuc3RvcCgpOwogICAgICAgICAgICB9
CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTE3KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYWRkQ29yZShfeDQzLCBfeDQ0KSB7CiAgICAgICAgcmV0dXJuIF9hZGRDb3JlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBhZGRDb3JlOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiYWRkVGhlbWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYWRkVGhlbWVzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUu
bWFyayhmdW5jdGlvbiBfY2FsbGVlMTgoemlwLCBtb2RlbCkgewogICAgICAgIHZhciB0aGVtZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxOCQoX2NvbnRleHQxOCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE4LnByZXYgPSBfY29udGV4dDE4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGVtZXMgPSBtb2RlbC50aGVtZXMgfHwgewogICAgICAgICAgICAgICAgICB0aGVtZTE6
IHRoZW1lMVhtbAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoZW1lcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICAgICAgICB2YXIgeG1sID0gdGhlbWVzW25hbWVdOwogICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9ICJ4bC90aGVtZS8iLmNvbmNhdChuYW1lLCAiLnhtbCIpOwogICAgICAgICAgICAgICAgICB6aXAuYXBwZW5kKHhtbCwgewogICAgICAgICAgICAgICAgICAgIG5hbWU6IHBhdGgKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAg
ICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTgpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBhZGRUaGVtZXMoX3g0NSwgX3g0NikgewogICAgICAgIHJldHVybiBfYWRkVGhlbWVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBhZGRUaGVtZXM7CiAgICB9KCkKICB9LCB7CiAgICBr
ZXk6ICJhZGRPZmZpY2VSZWxzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYWRkT2ZmaWNlUmVscyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE5KHppcCkgewogICAgICAgIHZhciB4Zm9ybSwgeG1sOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTkkKF9jb250ZXh0MTkpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRl
eHQxOS5wcmV2ID0gX2NvbnRleHQxOS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgeGZvcm0gPSBuZXcgUmVsYXRpb25zaGlwc1hmb3JtKCk7CiAgICAgICAgICAgICAgICB4bWwgPSB4Zm9ybS50b1htbChbewogICAgICAgICAgICAgICAgICBJZDogJ3JJZDEnLAogICAgICAgICAgICAgICAgICBUeXBlOiBYTFNYLlJlbFR5cGUuT2ZmaWNlRG9jdW1lbnQsCiAgICAgICAgICAgICAgICAgIFRhcmdldDogJ3hsL3dvcmtib29rLnhtbCcKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAg
ICAgICAgSWQ6ICdySWQyJywKICAgICAgICAgICAgICAgICAgVHlwZTogWExTWC5SZWxUeXBlLkNvcmVQcm9wZXJ0aWVzLAogICAgICAgICAgICAgICAgICBUYXJnZXQ6ICdkb2NQcm9wcy9jb3JlLnhtbCcKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgSWQ6ICdySWQzJywKICAgICAgICAgICAgICAgICAgVHlwZTogWExTWC5SZWxUeXBlLkV4dGVuZGVyUHJvcGVydGllcywKICAgICAgICAgICAgICAgICAgVGFyZ2V0OiAnZG9jUHJvcHMvYXBwLnhtbCcKICAgICAgICAgICAgICAgIH1dKTsKICAgICAgICAg
ICAgICAgIHppcC5hcHBlbmQoeG1sLCB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICdfcmVscy8ucmVscycKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxOSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGFkZE9mZmljZVJlbHMoX3g0NykgewogICAgICAgIHJldHVybiBfYWRkT2ZmaWNlUmVs
cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYWRkT2ZmaWNlUmVsczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImFkZFdvcmtib29rUmVscyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2FkZFdvcmtib29rUmVscyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIwKHppcCwgbW9kZWwpIHsKICAgICAgICB2YXIgY291bnQsIHJlbGF0aW9uc2hpcHMsIHhmb3JtLCB4bWw7CiAgICAg
ICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyMCQoX2NvbnRleHQyMCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIwLnByZXYgPSBfY29udGV4dDIwLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb3VudCA9IDE7CiAgICAgICAgICAgICAgICByZWxhdGlvbnNoaXBzID0gW3sKICAgICAgICAgICAgICAgICAgSWQ6ICJySWQiLmNvbmNhdChjb3VudCsrKSwKICAgICAgICAgICAgICAgICAgVHlwZTog
WExTWC5SZWxUeXBlLlN0eWxlcywKICAgICAgICAgICAgICAgICAgVGFyZ2V0OiAnc3R5bGVzLnhtbCcKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgSWQ6ICJySWQiLmNvbmNhdChjb3VudCsrKSwKICAgICAgICAgICAgICAgICAgVHlwZTogWExTWC5SZWxUeXBlLlRoZW1lLAogICAgICAgICAgICAgICAgICBUYXJnZXQ6ICd0aGVtZS90aGVtZTEueG1sJwogICAgICAgICAgICAgICAgfV07CgogICAgICAgICAgICAgICAgaWYgKG1vZGVsLnNoYXJlZFN0cmluZ3MuY291bnQpIHsKICAgICAgICAgICAgICAg
ICAgcmVsYXRpb25zaGlwcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBJZDogInJJZCIuY29uY2F0KGNvdW50KyspLAogICAgICAgICAgICAgICAgICAgIFR5cGU6IFhMU1guUmVsVHlwZS5TaGFyZWRTdHJpbmdzLAogICAgICAgICAgICAgICAgICAgIFRhcmdldDogJ3NoYXJlZFN0cmluZ3MueG1sJwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBtb2RlbC53b3Jrc2hlZXRzLmZvckVhY2goZnVuY3Rpb24gKHdvcmtzaGVldCkgewogICAgICAgICAgICAgICAgICB3b3Jr
c2hlZXQucklkID0gInJJZCIuY29uY2F0KGNvdW50KyspOwogICAgICAgICAgICAgICAgICByZWxhdGlvbnNoaXBzLnB1c2goewogICAgICAgICAgICAgICAgICAgIElkOiB3b3Jrc2hlZXQucklkLAogICAgICAgICAgICAgICAgICAgIFR5cGU6IFhMU1guUmVsVHlwZS5Xb3Jrc2hlZXQsCiAgICAgICAgICAgICAgICAgICAgVGFyZ2V0OiAid29ya3NoZWV0cy9zaGVldCIuY29uY2F0KHdvcmtzaGVldC5pZCwgIi54bWwiKQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgeGZv
cm0gPSBuZXcgUmVsYXRpb25zaGlwc1hmb3JtKCk7CiAgICAgICAgICAgICAgICB4bWwgPSB4Zm9ybS50b1htbChyZWxhdGlvbnNoaXBzKTsKICAgICAgICAgICAgICAgIHppcC5hcHBlbmQoeG1sLCB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICd4bC9fcmVscy93b3JrYm9vay54bWwucmVscycKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAg
ICAgfQogICAgICAgIH0sIF9jYWxsZWUyMCk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGFkZFdvcmtib29rUmVscyhfeDQ4LCBfeDQ5KSB7CiAgICAgICAgcmV0dXJuIF9hZGRXb3JrYm9va1JlbHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFkZFdvcmtib29rUmVsczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImFkZFNoYXJlZFN0cmluZ3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9hZGRTaGFyZWRTdHJpbmdzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8q
I19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjEoemlwLCBtb2RlbCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjEkKF9jb250ZXh0MjEpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMS5wcmV2ID0gX2NvbnRleHQyMS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKG1vZGVsLnNoYXJlZFN0cmluZ3MgJiYgbW9kZWwuc2hhcmVkU3Ry
aW5ncy5jb3VudCkgewogICAgICAgICAgICAgICAgICB6aXAuYXBwZW5kKG1vZGVsLnNoYXJlZFN0cmluZ3MueG1sLCB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3hsL3NoYXJlZFN0cmluZ3MueG1sJwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjEpOwog
ICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBhZGRTaGFyZWRTdHJpbmdzKF94NTAsIF94NTEpIHsKICAgICAgICByZXR1cm4gX2FkZFNoYXJlZFN0cmluZ3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFkZFNoYXJlZFN0cmluZ3M7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJhZGRTdHlsZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9hZGRTdHlsZXMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0
aW9uIF9jYWxsZWUyMih6aXAsIG1vZGVsKSB7CiAgICAgICAgdmFyIHhtbDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIyJChfY29udGV4dDIyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjIucHJldiA9IF9jb250ZXh0MjIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHhtbCA9IG1vZGVsLnN0eWxlcy54bWw7CgogICAgICAgICAgICAgICAgaWYgKHhtbCkgewogICAgICAgICAgICAg
ICAgICB6aXAuYXBwZW5kKHhtbCwgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICd4bC9zdHlsZXMueG1sJwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjIpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBhZGRTdHlsZXMoX3g1MiwgX3g1MykgewogICAg
ICAgIHJldHVybiBfYWRkU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBhZGRTdHlsZXM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJhZGRXb3JrYm9vayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2FkZFdvcmtib29rID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjMoemlwLCBtb2RlbCkgewogICAgICAgIHZhciB4Zm9ybTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0
b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIzJChfY29udGV4dDIzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjMucHJldiA9IF9jb250ZXh0MjMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHhmb3JtID0gbmV3IFdvcmtib29rWGZvcm0oKTsKICAgICAgICAgICAgICAgIHppcC5hcHBlbmQoeGZvcm0udG9YbWwobW9kZWwpLCB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICd4bC93b3JrYm9vay54bWwnCiAgICAgICAgICAgICAg
ICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMy5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBhZGRXb3JrYm9vayhfeDU0LCBfeDU1KSB7CiAgICAgICAgcmV0dXJuIF9hZGRXb3JrYm9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYWRkV29ya2Jvb2s7CiAgICB9KCkKICB9LCB7
CiAgICBrZXk6ICJhZGRXb3Jrc2hlZXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYWRkV29ya3NoZWV0cyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI0KHppcCwgbW9kZWwpIHsKICAgICAgICB2YXIgd29ya3NoZWV0WGZvcm0sIHJlbGF0aW9uc2hpcHNYZm9ybSwgY29tbWVudHNYZm9ybSwgdm1sTm90ZXNYZm9ybTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxl
ZTI0JChfY29udGV4dDI0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjQucHJldiA9IF9jb250ZXh0MjQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIC8vIHByZXBhcmF0aW9uIHBoYXNlCiAgICAgICAgICAgICAgICB3b3Jrc2hlZXRYZm9ybSA9IG5ldyBXb3Jrc2hlZXRYZm9ybSgpOwogICAgICAgICAgICAgICAgcmVsYXRpb25zaGlwc1hmb3JtID0gbmV3IFJlbGF0aW9uc2hpcHNYZm9ybSgpOwogICAgICAgICAgICAgICAgY29tbWVudHNY
Zm9ybSA9IG5ldyBDb21tZW50c1hmb3JtKCk7CiAgICAgICAgICAgICAgICB2bWxOb3Rlc1hmb3JtID0gbmV3IFZtbE5vdGVzWGZvcm0oKTsgLy8gd3JpdGUgc2hlZXRzCgogICAgICAgICAgICAgICAgbW9kZWwud29ya3NoZWV0cy5mb3JFYWNoKGZ1bmN0aW9uICh3b3Jrc2hlZXQpIHsKICAgICAgICAgICAgICAgICAgdmFyIHhtbFN0cmVhbSA9IG5ldyBYbWxTdHJlYW0oKTsKICAgICAgICAgICAgICAgICAgd29ya3NoZWV0WGZvcm0ucmVuZGVyKHhtbFN0cmVhbSwgd29ya3NoZWV0KTsKICAgICAgICAgICAgICAgICAgemlwLmFw
cGVuZCh4bWxTdHJlYW0ueG1sLCB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInhsL3dvcmtzaGVldHMvc2hlZXQiLmNvbmNhdCh3b3Jrc2hlZXQuaWQsICIueG1sIikKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBpZiAod29ya3NoZWV0LnJlbHMgJiYgd29ya3NoZWV0LnJlbHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sU3RyZWFtID0gbmV3IFhtbFN0cmVhbSgpOwogICAgICAgICAgICAgICAgICAgIHJlbGF0aW9uc2hpcHNYZm9ybS5yZW5kZXIoeG1sU3RyZWFtLCB3b3Jrc2hl
ZXQucmVscyk7CiAgICAgICAgICAgICAgICAgICAgemlwLmFwcGVuZCh4bWxTdHJlYW0ueG1sLCB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAieGwvd29ya3NoZWV0cy9fcmVscy9zaGVldCIuY29uY2F0KHdvcmtzaGVldC5pZCwgIi54bWwucmVscyIpCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGlmICh3b3Jrc2hlZXQuY29tbWVudHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIHhtbFN0cmVhbSA9IG5ldyBYbWxTdHJlYW0oKTsKICAg
ICAgICAgICAgICAgICAgICBjb21tZW50c1hmb3JtLnJlbmRlcih4bWxTdHJlYW0sIHdvcmtzaGVldCk7CiAgICAgICAgICAgICAgICAgICAgemlwLmFwcGVuZCh4bWxTdHJlYW0ueG1sLCB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAieGwvY29tbWVudHMiLmNvbmNhdCh3b3Jrc2hlZXQuaWQsICIueG1sIikKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB4bWxTdHJlYW0gPSBuZXcgWG1sU3RyZWFtKCk7CiAgICAgICAgICAgICAgICAgICAgdm1sTm90ZXNYZm9ybS5yZW5kZXIoeG1sU3Ry
ZWFtLCB3b3Jrc2hlZXQpOwogICAgICAgICAgICAgICAgICAgIHppcC5hcHBlbmQoeG1sU3RyZWFtLnhtbCwgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInhsL2RyYXdpbmdzL3ZtbERyYXdpbmciLmNvbmNhdCh3b3Jrc2hlZXQuaWQsICIudm1sIikKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjQuc3RvcCgp
OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTI0KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYWRkV29ya3NoZWV0cyhfeDU2LCBfeDU3KSB7CiAgICAgICAgcmV0dXJuIF9hZGRXb3Jrc2hlZXRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBhZGRXb3Jrc2hlZXRzOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX2ZpbmFsaXplIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluYWxpemUoemlwKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAg
ICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHppcC5vbignZmluaXNoJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgcmVzb2x2ZShfdGhpcyk7CiAgICAgICAgfSk7CiAgICAgICAgemlwLm9uKCdlcnJvcicsIHJlamVjdCk7CiAgICAgICAgemlwLmZpbmFsaXplKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInByZXBhcmVNb2RlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZU1vZGVsKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgIC8vIGVuc3VyZSBm
b2xsb3dpbmcgcHJvcGVydGllcyBoYXZlIHNhbmUgdmFsdWVzCiAgICAgIG1vZGVsLmNyZWF0b3IgPSBtb2RlbC5jcmVhdG9yIHx8ICdFeGNlbEpTJzsKICAgICAgbW9kZWwubGFzdE1vZGlmaWVkQnkgPSBtb2RlbC5sYXN0TW9kaWZpZWRCeSB8fCAnRXhjZWxKUyc7CiAgICAgIG1vZGVsLmNyZWF0ZWQgPSBtb2RlbC5jcmVhdGVkIHx8IG5ldyBEYXRlKCk7CiAgICAgIG1vZGVsLm1vZGlmaWVkID0gbW9kZWwubW9kaWZpZWQgfHwgbmV3IERhdGUoKTsKICAgICAgbW9kZWwudXNlU2hhcmVkU3RyaW5ncyA9IG9wdGlvbnMudXNlU2hh
cmVkU3RyaW5ncyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy51c2VTaGFyZWRTdHJpbmdzIDogdHJ1ZTsKICAgICAgbW9kZWwudXNlU3R5bGVzID0gb3B0aW9ucy51c2VTdHlsZXMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudXNlU3R5bGVzIDogdHJ1ZTsgLy8gTWFuYWdlIHRoZSBzaGFyZWQgc3RyaW5ncwoKICAgICAgbW9kZWwuc2hhcmVkU3RyaW5ncyA9IG5ldyBTaGFyZWRTdHJpbmdzWGZvcm0oKTsgLy8gYWRkIGEgc3R5bGUgbWFuYWdlciB0byBoYW5kbGUgY2VsbCBmb3JtYXRzLCBmb250cywgZXRjLgoKICAgICAgbW9kZWwu
c3R5bGVzID0gbW9kZWwudXNlU3R5bGVzID8gbmV3IFN0eWxlc1hmb3JtKHRydWUpIDogbmV3IFN0eWxlc1hmb3JtLk1vY2soKTsgLy8gcHJlcGFyZSBhbGwgb2YgdGhlIHRoaW5ncyBiZWZvcmUgdGhlIHJlbmRlcgoKICAgICAgdmFyIHdvcmtib29rWGZvcm0gPSBuZXcgV29ya2Jvb2tYZm9ybSgpOwogICAgICB2YXIgd29ya3NoZWV0WGZvcm0gPSBuZXcgV29ya3NoZWV0WGZvcm0oKTsKICAgICAgd29ya2Jvb2tYZm9ybS5wcmVwYXJlKG1vZGVsKTsKICAgICAgdmFyIHdvcmtzaGVldE9wdGlvbnMgPSB7CiAgICAgICAgc2hhcmVk
U3RyaW5nczogbW9kZWwuc2hhcmVkU3RyaW5ncywKICAgICAgICBzdHlsZXM6IG1vZGVsLnN0eWxlcywKICAgICAgICBkYXRlMTkwNDogbW9kZWwucHJvcGVydGllcy5kYXRlMTkwNCwKICAgICAgICBkcmF3aW5nc0NvdW50OiAwLAogICAgICAgIG1lZGlhOiBtb2RlbC5tZWRpYQogICAgICB9OwogICAgICB3b3Jrc2hlZXRPcHRpb25zLmRyYXdpbmdzID0gbW9kZWwuZHJhd2luZ3MgPSBbXTsKICAgICAgd29ya3NoZWV0T3B0aW9ucy5jb21tZW50UmVmcyA9IG1vZGVsLmNvbW1lbnRSZWZzID0gW107CiAgICAgIHZhciB0YWJsZUNv
dW50ID0gMDsKICAgICAgbW9kZWwudGFibGVzID0gW107CiAgICAgIG1vZGVsLndvcmtzaGVldHMuZm9yRWFjaChmdW5jdGlvbiAod29ya3NoZWV0KSB7CiAgICAgICAgLy8gYXNzaWduIHVuaXF1ZSBmaWxlbmFtZXMgdG8gdGFibGVzCiAgICAgICAgd29ya3NoZWV0LnRhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkgewogICAgICAgICAgdGFibGVDb3VudCsrOwogICAgICAgICAgdGFibGUudGFyZ2V0ID0gInRhYmxlIi5jb25jYXQodGFibGVDb3VudCwgIi54bWwiKTsKICAgICAgICAgIHRhYmxlLmlkID0gdGFibGVDb3Vu
dDsKICAgICAgICAgIG1vZGVsLnRhYmxlcy5wdXNoKHRhYmxlKTsKICAgICAgICB9KTsKICAgICAgICB3b3Jrc2hlZXRYZm9ybS5wcmVwYXJlKHdvcmtzaGVldCwgd29ya3NoZWV0T3B0aW9ucyk7CiAgICAgIH0pOyAvLyBUT0RPOiB3b3JrYm9vayBkcmF3aW5nIGxpc3QKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ3cml0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3dyaXRlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVl
MjUoc3RyZWFtLCBvcHRpb25zKSB7CiAgICAgICAgdmFyIG1vZGVsLCB6aXA7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyNSQoX2NvbnRleHQyNSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDI1LnByZXYgPSBfY29udGV4dDI1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgICAgICAgIG1vZGVsID0gdGhpcy53b3JrYm9vay5t
b2RlbDsKICAgICAgICAgICAgICAgIHppcCA9IG5ldyBaaXBTdHJlYW0uWmlwV3JpdGVyKG9wdGlvbnMuemlwKTsKICAgICAgICAgICAgICAgIHppcC5waXBlKHN0cmVhbSk7CiAgICAgICAgICAgICAgICB0aGlzLnByZXBhcmVNb2RlbChtb2RlbCwgb3B0aW9ucyk7IC8vIHJlbmRlcgoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRDb250ZW50VHlwZXMoemlwLCBtb2RlbCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250
ZXh0MjUubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRPZmZpY2VSZWxzKHppcCwgbW9kZWwpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfY29udGV4dDI1Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZFdvcmtib29rUmVscyh6aXAsIG1vZGVsKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkV29ya3NoZWV0cyh6aXAsIG1v
ZGVsKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkU2hhcmVkU3RyaW5ncyh6aXAsIG1vZGVsKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkRHJhd2luZ3MoemlwLCBtb2RlbCk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBfY29udGV4dDI1Lm5leHQgPSAx
OTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZFRhYmxlcyh6aXAsIG1vZGVsKTsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmFkZFRoZW1lcyh6aXAsIG1vZGVsKSwgdGhpcy5hZGRTdHlsZXMoemlwLCBtb2RlbCldKTsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDIzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMu
YWRkTWVkaWEoemlwLCBtb2RlbCk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgICBfY29udGV4dDI1Lm5leHQgPSAyNTsKICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5hZGRBcHAoemlwLCBtb2RlbCksIHRoaXMuYWRkQ29yZSh6aXAsIG1vZGVsKV0pOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgICAgX2NvbnRleHQyNS5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRXb3JrYm9vayh6aXAsIG1vZGVsKTsKCiAgICAgICAgICAg
ICAgY2FzZSAyNzoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI1LmFicnVwdCgicmV0dXJuIiwgdGhpcy5fZmluYWxpemUoemlwKSk7CgogICAgICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyNSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHdyaXRlKF94NTgsIF94NTkpIHsKICAgICAgICByZXR1cm4gX3dyaXRl
LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB3cml0ZTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIndyaXRlRmlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gd3JpdGVGaWxlKGZpbGVuYW1lLCBvcHRpb25zKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIHN0cmVhbSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKGZpbGVuYW1lKTsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBzdHJlYW0ub24oJ2ZpbmlzaCcs
IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICB9KTsKICAgICAgICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwoKICAgICAgICBfdGhpczIud3JpdGUoc3RyZWFtLCBvcHRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHN0cmVhbS5lbmQoKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAid3JpdGVCdWZmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAg
ICAgdmFyIF93cml0ZUJ1ZmZlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI2KG9wdGlvbnMpIHsKICAgICAgICB2YXIgc3RyZWFtOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjYkKF9jb250ZXh0MjYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyNi5wcmV2ID0gX2NvbnRleHQyNi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAw
OgogICAgICAgICAgICAgICAgc3RyZWFtID0gbmV3IFN0cmVhbUJ1ZigpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndyaXRlKHN0cmVhbSwgb3B0aW9ucyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI2LmFicnVwdCgicmV0dXJuIiwgc3RyZWFtLnJlYWQoKSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250
ZXh0MjYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTI2LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoX3g2MCkgewogICAgICAgIHJldHVybiBfd3JpdGVCdWZmZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHdyaXRlQnVmZmVyOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gWExTWDsKfSgpOwoKWExTWC5SZWxUeXBlID0gcmVxdWlyZSgnLi9yZWwtdHlwZScpOwptb2R1bGUuZXhwb3J0cyA9IFhMU1g7
Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSxyZXF1aXJlKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiLi4vdXRpbHMvYnJvd3Nlci1idWZmZXItZGVjb2RlIjoxNiwiLi4vdXRpbHMvc3RyZWFtLWJ1ZiI6MjMsIi4uL3V0aWxzL3V0aWxzIjoyNiwiLi4vdXRpbHMveG1sLXN0cmVhbSI6MjcsIi4uL3V0aWxzL3ppcC1zdHJlYW0iOjI4LCIuL3JlbC10eXBlIjozMCwiLi94Zm9ybS9ib29rL3dvcmtib29rLXhmb3JtIjozNywiLi94Zm9ybS9jb21tZW50L2NvbW1lbnRzLXhmb3JtIjozOSwiLi94Zm9ybS9jb21tZW50L3Zt
bC1ub3Rlcy14Zm9ybSI6NDQsIi4veGZvcm0vY29yZS9hcHAteGZvcm0iOjUwLCIuL3hmb3JtL2NvcmUvY29udGVudC10eXBlcy14Zm9ybSI6NTEsIi4veGZvcm0vY29yZS9jb3JlLXhmb3JtIjo1MiwiLi94Zm9ybS9jb3JlL3JlbGF0aW9uc2hpcHMteGZvcm0iOjU0LCIuL3hmb3JtL2RyYXdpbmcvZHJhd2luZy14Zm9ybSI6NjEsIi4veGZvcm0vc2hlZXQvd29ya3NoZWV0LXhmb3JtIjoxMTQsIi4veGZvcm0vc3RyaW5ncy9zaGFyZWQtc3RyaW5ncy14Zm9ybSI6MTIzLCIuL3hmb3JtL3N0eWxlL3N0eWxlcy14Zm9ybSI6MTM0LCIu
L3hmb3JtL3RhYmxlL3RhYmxlLXhmb3JtIjoxNDAsIi4veG1sL3RoZW1lMS5qcyI6MTQyLCJfcHJvY2VzcyI6MzU4LCJidWZmZXIiOjIxNiwiZnMiOjIxNSwianN6aXAiOjI5MCwicmVhZGFibGUtc3RyZWFtIjozODJ9XSwxNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovKiBlc2xpbnQtZGlzYWJsZSAqLwptb2R1bGUuZXhwb3J0cyA9ICc8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCIgc3RhbmRhbG9uZT0ieWVzIj8+XG48YTp0aGVtZSB4bWxuczphPSJodHRwOi8v
c2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvbWFpbiIgbmFtZT0iT2ZmaWNlIFRoZW1lIj4gPGE6dGhlbWVFbGVtZW50cz4gPGE6Y2xyU2NoZW1lIG5hbWU9Ik9mZmljZSI+IDxhOmRrMT4gPGE6c3lzQ2xyIHZhbD0id2luZG93VGV4dCIgbGFzdENscj0iMDAwMDAwIi8+IDwvYTpkazE+IDxhOmx0MT4gPGE6c3lzQ2xyIHZhbD0id2luZG93IiBsYXN0Q2xyPSJGRkZGRkYiLz4gPC9hOmx0MT4gPGE6ZGsyPiA8YTpzcmdiQ2xyIHZhbD0iMUY0OTdEIi8+IDwvYTpkazI+IDxhOmx0Mj4gPGE6c3JnYkNsciB2
YWw9IkVFRUNFMSIvPiA8L2E6bHQyPiA8YTphY2NlbnQxPiA8YTpzcmdiQ2xyIHZhbD0iNEY4MUJEIi8+IDwvYTphY2NlbnQxPiA8YTphY2NlbnQyPiA8YTpzcmdiQ2xyIHZhbD0iQzA1MDREIi8+IDwvYTphY2NlbnQyPiA8YTphY2NlbnQzPiA8YTpzcmdiQ2xyIHZhbD0iOUJCQjU5Ii8+IDwvYTphY2NlbnQzPiA8YTphY2NlbnQ0PiA8YTpzcmdiQ2xyIHZhbD0iODA2NEEyIi8+IDwvYTphY2NlbnQ0PiA8YTphY2NlbnQ1PiA8YTpzcmdiQ2xyIHZhbD0iNEJBQ0M2Ii8+IDwvYTphY2NlbnQ1PiA8YTphY2NlbnQ2PiA8YTpzcmdiQ2xy
IHZhbD0iRjc5NjQ2Ii8+IDwvYTphY2NlbnQ2PiA8YTpobGluaz4gPGE6c3JnYkNsciB2YWw9IjAwMDBGRiIvPiA8L2E6aGxpbms+IDxhOmZvbEhsaW5rPiA8YTpzcmdiQ2xyIHZhbD0iODAwMDgwIi8+IDwvYTpmb2xIbGluaz4gPC9hOmNsclNjaGVtZT4gPGE6Zm9udFNjaGVtZSBuYW1lPSJPZmZpY2UiPiA8YTptYWpvckZvbnQ+IDxhOmxhdGluIHR5cGVmYWNlPSJDYW1icmlhIi8+IDxhOmVhIHR5cGVmYWNlPSIiLz4gPGE6Y3MgdHlwZWZhY2U9IiIvPiA8YTpmb250IHNjcmlwdD0iSnBhbiIgdHlwZWZhY2U9Iu+8re+8syDvvLDj
grTjgrfjg4Pjgq8iLz4gPGE6Zm9udCBzY3JpcHQ9IkhhbmciIHR5cGVmYWNlPSLrp5HsnYAg6rOg65SVIi8+IDxhOmZvbnQgc2NyaXB0PSJIYW5zIiB0eXBlZmFjZT0i5a6L5L2TIi8+IDxhOmZvbnQgc2NyaXB0PSJIYW50IiB0eXBlZmFjZT0i5paw57Sw5piO6auUIi8+IDxhOmZvbnQgc2NyaXB0PSJBcmFiIiB0eXBlZmFjZT0iVGltZXMgTmV3IFJvbWFuIi8+IDxhOmZvbnQgc2NyaXB0PSJIZWJyIiB0eXBlZmFjZT0iVGltZXMgTmV3IFJvbWFuIi8+IDxhOmZvbnQgc2NyaXB0PSJUaGFpIiB0eXBlZmFjZT0iVGFob21hIi8+IDxh
OmZvbnQgc2NyaXB0PSJFdGhpIiB0eXBlZmFjZT0iTnlhbGEiLz4gPGE6Zm9udCBzY3JpcHQ9IkJlbmciIHR5cGVmYWNlPSJWcmluZGEiLz4gPGE6Zm9udCBzY3JpcHQ9Ikd1anIiIHR5cGVmYWNlPSJTaHJ1dGkiLz4gPGE6Zm9udCBzY3JpcHQ9IktobXIiIHR5cGVmYWNlPSJNb29sQm9yYW4iLz4gPGE6Zm9udCBzY3JpcHQ9IktuZGEiIHR5cGVmYWNlPSJUdW5nYSIvPiA8YTpmb250IHNjcmlwdD0iR3VydSIgdHlwZWZhY2U9IlJhYXZpIi8+IDxhOmZvbnQgc2NyaXB0PSJDYW5zIiB0eXBlZmFjZT0iRXVwaGVtaWEiLz4gPGE6Zm9u
dCBzY3JpcHQ9IkNoZXIiIHR5cGVmYWNlPSJQbGFudGFnZW5ldCBDaGVyb2tlZSIvPiA8YTpmb250IHNjcmlwdD0iWWlpaSIgdHlwZWZhY2U9Ik1pY3Jvc29mdCBZaSBCYWl0aSIvPiA8YTpmb250IHNjcmlwdD0iVGlidCIgdHlwZWZhY2U9Ik1pY3Jvc29mdCBIaW1hbGF5YSIvPiA8YTpmb250IHNjcmlwdD0iVGhhYSIgdHlwZWZhY2U9Ik1WIEJvbGkiLz4gPGE6Zm9udCBzY3JpcHQ9IkRldmEiIHR5cGVmYWNlPSJNYW5nYWwiLz4gPGE6Zm9udCBzY3JpcHQ9IlRlbHUiIHR5cGVmYWNlPSJHYXV0YW1pIi8+IDxhOmZvbnQgc2NyaXB0
PSJUYW1sIiB0eXBlZmFjZT0iTGF0aGEiLz4gPGE6Zm9udCBzY3JpcHQ9IlN5cmMiIHR5cGVmYWNlPSJFc3RyYW5nZWxvIEVkZXNzYSIvPiA8YTpmb250IHNjcmlwdD0iT3J5YSIgdHlwZWZhY2U9IkthbGluZ2EiLz4gPGE6Zm9udCBzY3JpcHQ9Ik1seW0iIHR5cGVmYWNlPSJLYXJ0aWthIi8+IDxhOmZvbnQgc2NyaXB0PSJMYW9vIiB0eXBlZmFjZT0iRG9rQ2hhbXBhIi8+IDxhOmZvbnQgc2NyaXB0PSJTaW5oIiB0eXBlZmFjZT0iSXNrb29sYSBQb3RhIi8+IDxhOmZvbnQgc2NyaXB0PSJNb25nIiB0eXBlZmFjZT0iTW9uZ29saWFu
IEJhaXRpIi8+IDxhOmZvbnQgc2NyaXB0PSJWaWV0IiB0eXBlZmFjZT0iVGltZXMgTmV3IFJvbWFuIi8+IDxhOmZvbnQgc2NyaXB0PSJVaWdoIiB0eXBlZmFjZT0iTWljcm9zb2Z0IFVpZ2h1ciIvPiA8YTpmb250IHNjcmlwdD0iR2VvciIgdHlwZWZhY2U9IlN5bGZhZW4iLz4gPC9hOm1ham9yRm9udD4gPGE6bWlub3JGb250PiA8YTpsYXRpbiB0eXBlZmFjZT0iQ2FsaWJyaSIvPiA8YTplYSB0eXBlZmFjZT0iIi8+IDxhOmNzIHR5cGVmYWNlPSIiLz4gPGE6Zm9udCBzY3JpcHQ9IkpwYW4iIHR5cGVmYWNlPSLvvK3vvLMg77yw44K0
44K344OD44KvIi8+IDxhOmZvbnQgc2NyaXB0PSJIYW5nIiB0eXBlZmFjZT0i66eR7J2AIOqzoOuUlSIvPiA8YTpmb250IHNjcmlwdD0iSGFucyIgdHlwZWZhY2U9IuWui+S9kyIvPiA8YTpmb250IHNjcmlwdD0iSGFudCIgdHlwZWZhY2U9IuaWsOe0sOaYjumrlCIvPiA8YTpmb250IHNjcmlwdD0iQXJhYiIgdHlwZWZhY2U9IkFyaWFsIi8+IDxhOmZvbnQgc2NyaXB0PSJIZWJyIiB0eXBlZmFjZT0iQXJpYWwiLz4gPGE6Zm9udCBzY3JpcHQ9IlRoYWkiIHR5cGVmYWNlPSJUYWhvbWEiLz4gPGE6Zm9udCBzY3JpcHQ9IkV0aGkiIHR5
cGVmYWNlPSJOeWFsYSIvPiA8YTpmb250IHNjcmlwdD0iQmVuZyIgdHlwZWZhY2U9IlZyaW5kYSIvPiA8YTpmb250IHNjcmlwdD0iR3VqciIgdHlwZWZhY2U9IlNocnV0aSIvPiA8YTpmb250IHNjcmlwdD0iS2htciIgdHlwZWZhY2U9IkRhdW5QZW5oIi8+IDxhOmZvbnQgc2NyaXB0PSJLbmRhIiB0eXBlZmFjZT0iVHVuZ2EiLz4gPGE6Zm9udCBzY3JpcHQ9Ikd1cnUiIHR5cGVmYWNlPSJSYWF2aSIvPiA8YTpmb250IHNjcmlwdD0iQ2FucyIgdHlwZWZhY2U9IkV1cGhlbWlhIi8+IDxhOmZvbnQgc2NyaXB0PSJDaGVyIiB0eXBlZmFj
ZT0iUGxhbnRhZ2VuZXQgQ2hlcm9rZWUiLz4gPGE6Zm9udCBzY3JpcHQ9IllpaWkiIHR5cGVmYWNlPSJNaWNyb3NvZnQgWWkgQmFpdGkiLz4gPGE6Zm9udCBzY3JpcHQ9IlRpYnQiIHR5cGVmYWNlPSJNaWNyb3NvZnQgSGltYWxheWEiLz4gPGE6Zm9udCBzY3JpcHQ9IlRoYWEiIHR5cGVmYWNlPSJNViBCb2xpIi8+IDxhOmZvbnQgc2NyaXB0PSJEZXZhIiB0eXBlZmFjZT0iTWFuZ2FsIi8+IDxhOmZvbnQgc2NyaXB0PSJUZWx1IiB0eXBlZmFjZT0iR2F1dGFtaSIvPiA8YTpmb250IHNjcmlwdD0iVGFtbCIgdHlwZWZhY2U9IkxhdGhh
Ii8+IDxhOmZvbnQgc2NyaXB0PSJTeXJjIiB0eXBlZmFjZT0iRXN0cmFuZ2VsbyBFZGVzc2EiLz4gPGE6Zm9udCBzY3JpcHQ9Ik9yeWEiIHR5cGVmYWNlPSJLYWxpbmdhIi8+IDxhOmZvbnQgc2NyaXB0PSJNbHltIiB0eXBlZmFjZT0iS2FydGlrYSIvPiA8YTpmb250IHNjcmlwdD0iTGFvbyIgdHlwZWZhY2U9IkRva0NoYW1wYSIvPiA8YTpmb250IHNjcmlwdD0iU2luaCIgdHlwZWZhY2U9Iklza29vbGEgUG90YSIvPiA8YTpmb250IHNjcmlwdD0iTW9uZyIgdHlwZWZhY2U9Ik1vbmdvbGlhbiBCYWl0aSIvPiA8YTpmb250IHNjcmlw
dD0iVmlldCIgdHlwZWZhY2U9IkFyaWFsIi8+IDxhOmZvbnQgc2NyaXB0PSJVaWdoIiB0eXBlZmFjZT0iTWljcm9zb2Z0IFVpZ2h1ciIvPiA8YTpmb250IHNjcmlwdD0iR2VvciIgdHlwZWZhY2U9IlN5bGZhZW4iLz4gPC9hOm1pbm9yRm9udD4gPC9hOmZvbnRTY2hlbWU+IDxhOmZtdFNjaGVtZSBuYW1lPSJPZmZpY2UiPiA8YTpmaWxsU3R5bGVMc3Q+IDxhOnNvbGlkRmlsbD4gPGE6c2NoZW1lQ2xyIHZhbD0icGhDbHIiLz4gPC9hOnNvbGlkRmlsbD4gPGE6Z3JhZEZpbGwgcm90V2l0aFNoYXBlPSIxIj4gPGE6Z3NMc3Q+IDxhOmdz
IHBvcz0iMCI+IDxhOnNjaGVtZUNsciB2YWw9InBoQ2xyIj4gPGE6dGludCB2YWw9IjUwMDAwIi8+IDxhOnNhdE1vZCB2YWw9IjMwMDAwMCIvPiA8L2E6c2NoZW1lQ2xyPiA8L2E6Z3M+IDxhOmdzIHBvcz0iMzUwMDAiPiA8YTpzY2hlbWVDbHIgdmFsPSJwaENsciI+IDxhOnRpbnQgdmFsPSIzNzAwMCIvPiA8YTpzYXRNb2QgdmFsPSIzMDAwMDAiLz4gPC9hOnNjaGVtZUNscj4gPC9hOmdzPiA8YTpncyBwb3M9IjEwMDAwMCI+IDxhOnNjaGVtZUNsciB2YWw9InBoQ2xyIj4gPGE6dGludCB2YWw9IjE1MDAwIi8+IDxhOnNhdE1vZCB2
YWw9IjM1MDAwMCIvPiA8L2E6c2NoZW1lQ2xyPiA8L2E6Z3M+IDwvYTpnc0xzdD4gPGE6bGluIGFuZz0iMTYyMDAwMDAiIHNjYWxlZD0iMSIvPiA8L2E6Z3JhZEZpbGw+IDxhOmdyYWRGaWxsIHJvdFdpdGhTaGFwZT0iMSI+IDxhOmdzTHN0PiA8YTpncyBwb3M9IjAiPiA8YTpzY2hlbWVDbHIgdmFsPSJwaENsciI+IDxhOnRpbnQgdmFsPSIxMDAwMDAiLz4gPGE6c2hhZGUgdmFsPSIxMDAwMDAiLz4gPGE6c2F0TW9kIHZhbD0iMTMwMDAwIi8+IDwvYTpzY2hlbWVDbHI+IDwvYTpncz4gPGE6Z3MgcG9zPSIxMDAwMDAiPiA8YTpzY2hl
bWVDbHIgdmFsPSJwaENsciI+IDxhOnRpbnQgdmFsPSI1MDAwMCIvPiA8YTpzaGFkZSB2YWw9IjEwMDAwMCIvPiA8YTpzYXRNb2QgdmFsPSIzNTAwMDAiLz4gPC9hOnNjaGVtZUNscj4gPC9hOmdzPiA8L2E6Z3NMc3Q+IDxhOmxpbiBhbmc9IjE2MjAwMDAwIiBzY2FsZWQ9IjAiLz4gPC9hOmdyYWRGaWxsPiA8L2E6ZmlsbFN0eWxlTHN0PiA8YTpsblN0eWxlTHN0PiA8YTpsbiB3PSI5NTI1IiBjYXA9ImZsYXQiIGNtcGQ9InNuZyIgYWxnbj0iY3RyIj4gPGE6c29saWRGaWxsPiA8YTpzY2hlbWVDbHIgdmFsPSJwaENsciI+IDxhOnNo
YWRlIHZhbD0iOTUwMDAiLz4gPGE6c2F0TW9kIHZhbD0iMTA1MDAwIi8+IDwvYTpzY2hlbWVDbHI+IDwvYTpzb2xpZEZpbGw+IDxhOnByc3REYXNoIHZhbD0ic29saWQiLz4gPC9hOmxuPiA8YTpsbiB3PSIyNTQwMCIgY2FwPSJmbGF0IiBjbXBkPSJzbmciIGFsZ249ImN0ciI+IDxhOnNvbGlkRmlsbD4gPGE6c2NoZW1lQ2xyIHZhbD0icGhDbHIiLz4gPC9hOnNvbGlkRmlsbD4gPGE6cHJzdERhc2ggdmFsPSJzb2xpZCIvPiA8L2E6bG4+IDxhOmxuIHc9IjM4MTAwIiBjYXA9ImZsYXQiIGNtcGQ9InNuZyIgYWxnbj0iY3RyIj4gPGE6
c29saWRGaWxsPiA8YTpzY2hlbWVDbHIgdmFsPSJwaENsciIvPiA8L2E6c29saWRGaWxsPiA8YTpwcnN0RGFzaCB2YWw9InNvbGlkIi8+IDwvYTpsbj4gPC9hOmxuU3R5bGVMc3Q+IDxhOmVmZmVjdFN0eWxlTHN0PiA8YTplZmZlY3RTdHlsZT4gPGE6ZWZmZWN0THN0PiA8YTpvdXRlclNoZHcgYmx1clJhZD0iNDAwMDAiIGRpc3Q9IjIwMDAwIiBkaXI9IjU0MDAwMDAiIHJvdFdpdGhTaGFwZT0iMCI+IDxhOnNyZ2JDbHIgdmFsPSIwMDAwMDAiPiA8YTphbHBoYSB2YWw9IjM4MDAwIi8+IDwvYTpzcmdiQ2xyPiA8L2E6b3V0ZXJTaGR3
PiA8L2E6ZWZmZWN0THN0PiA8L2E6ZWZmZWN0U3R5bGU+IDxhOmVmZmVjdFN0eWxlPiA8YTplZmZlY3RMc3Q+IDxhOm91dGVyU2hkdyBibHVyUmFkPSI0MDAwMCIgZGlzdD0iMjMwMDAiIGRpcj0iNTQwMDAwMCIgcm90V2l0aFNoYXBlPSIwIj4gPGE6c3JnYkNsciB2YWw9IjAwMDAwMCI+IDxhOmFscGhhIHZhbD0iMzUwMDAiLz4gPC9hOnNyZ2JDbHI+IDwvYTpvdXRlclNoZHc+IDwvYTplZmZlY3RMc3Q+IDwvYTplZmZlY3RTdHlsZT4gPGE6ZWZmZWN0U3R5bGU+IDxhOmVmZmVjdExzdD4gPGE6b3V0ZXJTaGR3IGJsdXJSYWQ9IjQw
MDAwIiBkaXN0PSIyMzAwMCIgZGlyPSI1NDAwMDAwIiByb3RXaXRoU2hhcGU9IjAiPiA8YTpzcmdiQ2xyIHZhbD0iMDAwMDAwIj4gPGE6YWxwaGEgdmFsPSIzNTAwMCIvPiA8L2E6c3JnYkNscj4gPC9hOm91dGVyU2hkdz4gPC9hOmVmZmVjdExzdD4gPGE6c2NlbmUzZD4gPGE6Y2FtZXJhIHByc3Q9Im9ydGhvZ3JhcGhpY0Zyb250Ij4gPGE6cm90IGxhdD0iMCIgbG9uPSIwIiByZXY9IjAiLz4gPC9hOmNhbWVyYT4gPGE6bGlnaHRSaWcgcmlnPSJ0aHJlZVB0IiBkaXI9InQiPiA8YTpyb3QgbGF0PSIwIiBsb249IjAiIHJldj0iMTIw
MDAwMCIvPiA8L2E6bGlnaHRSaWc+IDwvYTpzY2VuZTNkPiA8YTpzcDNkPiA8YTpiZXZlbFQgdz0iNjM1MDAiIGg9IjI1NDAwIi8+IDwvYTpzcDNkPiA8L2E6ZWZmZWN0U3R5bGU+IDwvYTplZmZlY3RTdHlsZUxzdD4gPGE6YmdGaWxsU3R5bGVMc3Q+IDxhOnNvbGlkRmlsbD4gPGE6c2NoZW1lQ2xyIHZhbD0icGhDbHIiLz4gPC9hOnNvbGlkRmlsbD4gPGE6Z3JhZEZpbGwgcm90V2l0aFNoYXBlPSIxIj4gPGE6Z3NMc3Q+IDxhOmdzIHBvcz0iMCI+IDxhOnNjaGVtZUNsciB2YWw9InBoQ2xyIj4gPGE6dGludCB2YWw9IjQwMDAwIi8+
IDxhOnNhdE1vZCB2YWw9IjM1MDAwMCIvPiA8L2E6c2NoZW1lQ2xyPiA8L2E6Z3M+IDxhOmdzIHBvcz0iNDAwMDAiPiA8YTpzY2hlbWVDbHIgdmFsPSJwaENsciI+IDxhOnRpbnQgdmFsPSI0NTAwMCIvPiA8YTpzaGFkZSB2YWw9Ijk5MDAwIi8+IDxhOnNhdE1vZCB2YWw9IjM1MDAwMCIvPiA8L2E6c2NoZW1lQ2xyPiA8L2E6Z3M+IDxhOmdzIHBvcz0iMTAwMDAwIj4gPGE6c2NoZW1lQ2xyIHZhbD0icGhDbHIiPiA8YTpzaGFkZSB2YWw9IjIwMDAwIi8+IDxhOnNhdE1vZCB2YWw9IjI1NTAwMCIvPiA8L2E6c2NoZW1lQ2xyPiA8L2E6
Z3M+IDwvYTpnc0xzdD4gPGE6cGF0aCBwYXRoPSJjaXJjbGUiPiA8YTpmaWxsVG9SZWN0IGw9IjUwMDAwIiB0PSItODAwMDAiIHI9IjUwMDAwIiBiPSIxODAwMDAiLz4gPC9hOnBhdGg+IDwvYTpncmFkRmlsbD4gPGE6Z3JhZEZpbGwgcm90V2l0aFNoYXBlPSIxIj4gPGE6Z3NMc3Q+IDxhOmdzIHBvcz0iMCI+IDxhOnNjaGVtZUNsciB2YWw9InBoQ2xyIj4gPGE6dGludCB2YWw9IjgwMDAwIi8+IDxhOnNhdE1vZCB2YWw9IjMwMDAwMCIvPiA8L2E6c2NoZW1lQ2xyPiA8L2E6Z3M+IDxhOmdzIHBvcz0iMTAwMDAwIj4gPGE6c2NoZW1l
Q2xyIHZhbD0icGhDbHIiPiA8YTpzaGFkZSB2YWw9IjMwMDAwIi8+IDxhOnNhdE1vZCB2YWw9IjIwMDAwMCIvPiA8L2E6c2NoZW1lQ2xyPiA8L2E6Z3M+IDwvYTpnc0xzdD4gPGE6cGF0aCBwYXRoPSJjaXJjbGUiPiA8YTpmaWxsVG9SZWN0IGw9IjUwMDAwIiB0PSI1MDAwMCIgcj0iNTAwMDAiIGI9IjUwMDAwIi8+IDwvYTpwYXRoPiA8L2E6Z3JhZEZpbGw+IDwvYTpiZ0ZpbGxTdHlsZUxzdD4gPC9hOmZtdFNjaGVtZT4gPC9hOnRoZW1lRWxlbWVudHM+IDxhOm9iamVjdERlZmF1bHRzPiA8YTpzcERlZj4gPGE6c3BQci8+IDxhOmJv
ZHlQci8+IDxhOmxzdFN0eWxlLz4gPGE6c3R5bGU+IDxhOmxuUmVmIGlkeD0iMSI+IDxhOnNjaGVtZUNsciB2YWw9ImFjY2VudDEiLz4gPC9hOmxuUmVmPiA8YTpmaWxsUmVmIGlkeD0iMyI+IDxhOnNjaGVtZUNsciB2YWw9ImFjY2VudDEiLz4gPC9hOmZpbGxSZWY+IDxhOmVmZmVjdFJlZiBpZHg9IjIiPiA8YTpzY2hlbWVDbHIgdmFsPSJhY2NlbnQxIi8+IDwvYTplZmZlY3RSZWY+IDxhOmZvbnRSZWYgaWR4PSJtaW5vciI+IDxhOnNjaGVtZUNsciB2YWw9Imx0MSIvPiA8L2E6Zm9udFJlZj4gPC9hOnN0eWxlPiA8L2E6c3BEZWY+
IDxhOmxuRGVmPiA8YTpzcFByLz4gPGE6Ym9keVByLz4gPGE6bHN0U3R5bGUvPiA8YTpzdHlsZT4gPGE6bG5SZWYgaWR4PSIyIj4gPGE6c2NoZW1lQ2xyIHZhbD0iYWNjZW50MSIvPiA8L2E6bG5SZWY+IDxhOmZpbGxSZWYgaWR4PSIwIj4gPGE6c2NoZW1lQ2xyIHZhbD0iYWNjZW50MSIvPiA8L2E6ZmlsbFJlZj4gPGE6ZWZmZWN0UmVmIGlkeD0iMSI+IDxhOnNjaGVtZUNsciB2YWw9ImFjY2VudDEiLz4gPC9hOmVmZmVjdFJlZj4gPGE6Zm9udFJlZiBpZHg9Im1pbm9yIj4gPGE6c2NoZW1lQ2xyIHZhbD0idHgxIi8+IDwvYTpmb250
UmVmPiA8L2E6c3R5bGU+IDwvYTpsbkRlZj4gPC9hOm9iamVjdERlZmF1bHRzPiA8YTpleHRyYUNsclNjaGVtZUxzdC8+IDwvYTp0aGVtZT4nOwoKfSx7fV0sMTQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChCdWZmZXIpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0g
ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEo
aW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBp
ZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0
YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0
b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rp
b24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVu
dHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoK
ZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0
LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBf
Z2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuQ3N2Rm9ybWF0dGVyU3RyZWFtID0gdm9pZCAwOwoKdmFyIHN0cmVhbV8xID0gcmVxdWlyZSgic3RyZWFtIik7Cgp2YXIgZm9ybWF0dGVyXzEgPSByZXF1aXJlKCIuL2Zvcm1hdHRlciIpOwoKdmFyIENzdkZvcm1hdHRlclN0
cmVhbSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX3N0cmVhbV8xJFRyYW5zZm9ybSkgewogIF9pbmhlcml0cyhDc3ZGb3JtYXR0ZXJTdHJlYW0sIF9zdHJlYW1fMSRUcmFuc2Zvcm0pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENzdkZvcm1hdHRlclN0cmVhbSk7CgogIGZ1bmN0aW9uIENzdkZvcm1hdHRlclN0cmVhbShmb3JtYXR0ZXJPcHRpb25zKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENzdkZvcm1hdHRlclN0cmVhbSk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlz
LCB7CiAgICAgIHdyaXRhYmxlT2JqZWN0TW9kZTogZm9ybWF0dGVyT3B0aW9ucy5vYmplY3RNb2RlCiAgICB9KTsKICAgIF90aGlzLmhhc1dyaXR0ZW5CT00gPSBmYWxzZTsKICAgIF90aGlzLmZvcm1hdHRlck9wdGlvbnMgPSBmb3JtYXR0ZXJPcHRpb25zOwogICAgX3RoaXMucm93Rm9ybWF0dGVyID0gbmV3IGZvcm1hdHRlcl8xLlJvd0Zvcm1hdHRlcihmb3JtYXR0ZXJPcHRpb25zKTsgLy8gaWYgd3JpdGVCT00gaXMgZmFsc2UgdGhlbiBzZXQgdG8gdHJ1ZQogICAgLy8gaWYgd3JpdGVCT00gaXMgdHJ1ZSB0aGVuIHNldCB0byBm
YWxzZSBieSBkZWZhdWx0IHNvIGl0IGlzIHdyaXR0ZW4gb3V0CgogICAgX3RoaXMuaGFzV3JpdHRlbkJPTSA9ICFmb3JtYXR0ZXJPcHRpb25zLndyaXRlQk9NOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENzdkZvcm1hdHRlclN0cmVhbSwgW3sKICAgIGtleTogInRyYW5zZm9ybSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybUZ1bmN0aW9uKSB7CiAgICAgIHRoaXMucm93Rm9ybWF0dGVyLnJvd1RyYW5zZm9ybSA9IHRyYW5zZm9ybUZ1bmN0aW9uOwogICAgICByZXR1cm4gdGhp
czsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfdHJhbnNmb3JtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfdHJhbnNmb3JtKHJvdywgZW5jb2RpbmcsIGNiKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGNiQ2FsbGVkID0gZmFsc2U7CgogICAgICB0cnkgewogICAgICAgIGlmICghdGhpcy5oYXNXcml0dGVuQk9NKSB7CiAgICAgICAgICB0aGlzLnB1c2godGhpcy5mb3JtYXR0ZXJPcHRpb25zLkJPTSk7CiAgICAgICAgICB0aGlzLmhhc1dyaXR0ZW5CT00gPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgdGhp
cy5yb3dGb3JtYXR0ZXIuZm9ybWF0KHJvdywgZnVuY3Rpb24gKGVyciwgcm93cykgewogICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICBjYkNhbGxlZCA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChyb3dzKSB7CiAgICAgICAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbiAocikgewogICAgICAgICAgICAgIF90aGlzMi5wdXNoKEJ1ZmZlci5mcm9tKHIsICd1dGY4JykpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICBjYkNhbGxl
ZCA9IHRydWU7CiAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICB9KTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGlmIChjYkNhbGxlZCkgewogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CgogICAgICAgIGNiKGUpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX2ZsdXNoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZmx1c2goY2IpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLnJvd0Zvcm1hdHRlci5maW5pc2goZnVuY3Rpb24gKGVyciwgcm93cykgewogICAgICAgIGlmIChl
cnIpIHsKICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJvd3MpIHsKICAgICAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbiAocikgewogICAgICAgICAgICBfdGhpczMucHVzaChCdWZmZXIuZnJvbShyLCAndXRmOCcpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENzdkZvcm1hdHRlclN0cmVhbTsKfShzdHJlYW1fMS5UcmFuc2Zvcm0pOwoKZXhwb3J0cy5Dc3ZGb3JtYXR0ZXJTdHJlYW0g
PSBDc3ZGb3JtYXR0ZXJTdHJlYW07Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgiYnVmZmVyIikuQnVmZmVyKQoKfSx7Ii4vZm9ybWF0dGVyIjoxNDcsImJ1ZmZlciI6MjE2LCJzdHJlYW0iOjM5Nn1dLDE0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBh
cyBhIGZ1bmN0aW9uIik7IH0gfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkZvcm1hdHRlck9wdGlvbnMgPSB2b2lkIDA7Cgp2YXIgRm9ybWF0dGVyT3B0aW9ucyA9IGZ1bmN0aW9uIEZvcm1hdHRlck9wdGlvbnMoKSB7CiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybWF0dGVyT3B0aW9u
cyk7CgogIHZhciBfYTsKCiAgdGhpcy5vYmplY3RNb2RlID0gdHJ1ZTsKICB0aGlzLmRlbGltaXRlciA9ICcsJzsKICB0aGlzLnJvd0RlbGltaXRlciA9ICdcbic7CiAgdGhpcy5xdW90ZSA9ICciJzsKICB0aGlzLmVzY2FwZSA9IHRoaXMucXVvdGU7CiAgdGhpcy5xdW90ZUNvbHVtbnMgPSBmYWxzZTsKICB0aGlzLnF1b3RlSGVhZGVycyA9IHRoaXMucXVvdGVDb2x1bW5zOwogIHRoaXMuaGVhZGVycyA9IG51bGw7CiAgdGhpcy5pbmNsdWRlRW5kUm93RGVsaW1pdGVyID0gZmFsc2U7CiAgdGhpcy53cml0ZUJPTSA9IGZhbHNlOwog
IHRoaXMuQk9NID0gIlx1RkVGRiI7CiAgdGhpcy5hbHdheXNXcml0ZUhlYWRlcnMgPSBmYWxzZTsKICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdHMgfHwge30pOwoKICBpZiAodHlwZW9mIChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMucXVvdGVIZWFkZXJzKSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIHRoaXMucXVvdGVIZWFkZXJzID0gdGhpcy5xdW90ZUNvbHVtbnM7CiAgfQoKICBpZiAoKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5xdW90ZSkg
PT09IHRydWUpIHsKICAgIHRoaXMucXVvdGUgPSAnIic7CiAgfSBlbHNlIGlmICgob3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLnF1b3RlKSA9PT0gZmFsc2UpIHsKICAgIHRoaXMucXVvdGUgPSAnJzsKICB9CgogIGlmICh0eXBlb2YgKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5lc2NhcGUpICE9PSAnc3RyaW5nJykgewogICAgdGhpcy5lc2NhcGUgPSB0aGlzLnF1b3RlOwogIH0KCiAgdGhpcy5zaG91bGRXcml0ZUhlYWRlcnMgPSAhIXRoaXMu
aGVhZGVycyAmJiAoKF9hID0gb3B0cy53cml0ZUhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWUpOwogIHRoaXMuaGVhZGVycyA9IEFycmF5LmlzQXJyYXkodGhpcy5oZWFkZXJzKSA/IHRoaXMuaGVhZGVycyA6IG51bGw7CiAgdGhpcy5lc2NhcGVkUXVvdGUgPSAiIi5jb25jYXQodGhpcy5lc2NhcGUpLmNvbmNhdCh0aGlzLnF1b3RlKTsKfTsKCmV4cG9ydHMuRm9ybWF0dGVyT3B0aW9ucyA9IEZvcm1hdHRlck9wdGlvbnM7Cgp9LHt9XSwxNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9y
dHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVu
dW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rv
ci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIF9faW1wb3J0RGVmYXVsdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX2ltcG9ydERlZmF1bHQgfHwgZnVuY3Rpb24gKG1vZCkgewogIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7CiAgICAiZGVmYXVsdCI6IG1vZAogIH07Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUi
LCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuRmllbGRGb3JtYXR0ZXIgPSB2b2lkIDA7Cgp2YXIgbG9kYXNoX2lzYm9vbGVhbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoImxvZGFzaC5pc2Jvb2xlYW4iKSk7Cgp2YXIgbG9kYXNoX2lzbmlsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZSgibG9kYXNoLmlzbmlsIikpOwoKdmFyIGxvZGFzaF9lc2NhcGVyZWdleHBfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJsb2Rhc2guZXNjYXBlcmVnZXhwIikpOwoKdmFyIEZpZWxkRm9ybWF0dGVyID0gLyojX19QVVJF
X18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBGaWVsZEZvcm1hdHRlcihmb3JtYXR0ZXJPcHRpb25zKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmllbGRGb3JtYXR0ZXIpOwoKICAgIHRoaXMuX2hlYWRlcnMgPSBudWxsOwogICAgdGhpcy5mb3JtYXR0ZXJPcHRpb25zID0gZm9ybWF0dGVyT3B0aW9uczsKCiAgICBpZiAoZm9ybWF0dGVyT3B0aW9ucy5oZWFkZXJzICE9PSBudWxsKSB7CiAgICAgIHRoaXMuaGVhZGVycyA9IGZvcm1hdHRlck9wdGlvbnMuaGVhZGVyczsKICAgIH0KCiAgICB0aGlzLlJFUExBQ0VfUkVH
RVhQID0gbmV3IFJlZ0V4cChmb3JtYXR0ZXJPcHRpb25zLnF1b3RlLCAnZycpOwogICAgdmFyIGVzY2FwZVBhdHRlcm4gPSAiWyIuY29uY2F0KGZvcm1hdHRlck9wdGlvbnMuZGVsaW1pdGVyKS5jb25jYXQobG9kYXNoX2VzY2FwZXJlZ2V4cF8xLmRlZmF1bHQoZm9ybWF0dGVyT3B0aW9ucy5yb3dEZWxpbWl0ZXIpLCAifFxyfFxuJ10iKTsKICAgIHRoaXMuRVNDQVBFX1JFR0VYUCA9IG5ldyBSZWdFeHAoZXNjYXBlUGF0dGVybik7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRmllbGRGb3JtYXR0ZXIsIFt7CiAgICBrZXk6ICJzaG91bGRR
dW90ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkUXVvdGUoZmllbGRJbmRleCwgaXNIZWFkZXIpIHsKICAgICAgdmFyIHF1b3RlQ29uZmlnID0gaXNIZWFkZXIgPyB0aGlzLmZvcm1hdHRlck9wdGlvbnMucXVvdGVIZWFkZXJzIDogdGhpcy5mb3JtYXR0ZXJPcHRpb25zLnF1b3RlQ29sdW1uczsKCiAgICAgIGlmIChsb2Rhc2hfaXNib29sZWFuXzEuZGVmYXVsdChxdW90ZUNvbmZpZykpIHsKICAgICAgICByZXR1cm4gcXVvdGVDb25maWc7CiAgICAgIH0KCiAgICAgIGlmIChBcnJheS5pc0FycmF5KHF1b3RlQ29uZmlnKSkg
ewogICAgICAgIHJldHVybiBxdW90ZUNvbmZpZ1tmaWVsZEluZGV4XTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuX2hlYWRlcnMgIT09IG51bGwpIHsKICAgICAgICByZXR1cm4gcXVvdGVDb25maWdbdGhpcy5faGVhZGVyc1tmaWVsZEluZGV4XV07CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmb3JtYXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChmaWVsZCwgZmllbGRJbmRleCwgaXNIZWFkZXIpIHsKICAgICAgdmFyIHByZXBhcmVkRmllbGQgPSAiIi5jb25jYXQobG9k
YXNoX2lzbmlsXzEuZGVmYXVsdChmaWVsZCkgPyAnJyA6IGZpZWxkKS5yZXBsYWNlKC9cMC9nLCAnJyk7CiAgICAgIHZhciBmb3JtYXR0ZXJPcHRpb25zID0gdGhpcy5mb3JtYXR0ZXJPcHRpb25zOwoKICAgICAgaWYgKGZvcm1hdHRlck9wdGlvbnMucXVvdGUgIT09ICcnKSB7CiAgICAgICAgdmFyIHNob3VsZEVzY2FwZSA9IHByZXBhcmVkRmllbGQuaW5kZXhPZihmb3JtYXR0ZXJPcHRpb25zLnF1b3RlKSAhPT0gLTE7CgogICAgICAgIGlmIChzaG91bGRFc2NhcGUpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnF1b3RlRmllbGQo
cHJlcGFyZWRGaWVsZC5yZXBsYWNlKHRoaXMuUkVQTEFDRV9SRUdFWFAsIGZvcm1hdHRlck9wdGlvbnMuZXNjYXBlZFF1b3RlKSk7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgaGFzRXNjYXBlQ2hhcmFjdGVycyA9IHByZXBhcmVkRmllbGQuc2VhcmNoKHRoaXMuRVNDQVBFX1JFR0VYUCkgIT09IC0xOwoKICAgICAgaWYgKGhhc0VzY2FwZUNoYXJhY3RlcnMgfHwgdGhpcy5zaG91bGRRdW90ZShmaWVsZEluZGV4LCBpc0hlYWRlcikpIHsKICAgICAgICByZXR1cm4gdGhpcy5xdW90ZUZpZWxkKHByZXBhcmVkRmllbGQpOwog
ICAgICB9CgogICAgICByZXR1cm4gcHJlcGFyZWRGaWVsZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJxdW90ZUZpZWxkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBxdW90ZUZpZWxkKGZpZWxkKSB7CiAgICAgIHZhciBxdW90ZSA9IHRoaXMuZm9ybWF0dGVyT3B0aW9ucy5xdW90ZTsKICAgICAgcmV0dXJuICIiLmNvbmNhdChxdW90ZSkuY29uY2F0KGZpZWxkKS5jb25jYXQocXVvdGUpOwogICAgfQogIH0sIHsKICAgIGtleTogImhlYWRlcnMiLAogICAgc2V0OiBmdW5jdGlvbiBzZXQoaGVhZGVycykgewogICAgICB0aGlzLl9oZWFk
ZXJzID0gaGVhZGVyczsKICAgIH0KICB9XSk7CgogIHJldHVybiBGaWVsZEZvcm1hdHRlcjsKfSgpOwoKZXhwb3J0cy5GaWVsZEZvcm1hdHRlciA9IEZpZWxkRm9ybWF0dGVyOwoKfSx7ImxvZGFzaC5lc2NhcGVyZWdleHAiOjMxNywibG9kYXNoLmlzYm9vbGVhbiI6MzE5LCJsb2Rhc2guaXNuaWwiOjMyMn1dLDE0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFu
Y2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBk
ZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0
dXJuIENvbnN0cnVjdG9yOyB9Cgp2YXIgX19pbXBvcnREZWZhdWx0ID0gdm9pZCAwICYmICh2b2lkIDApLl9faW1wb3J0RGVmYXVsdCB8fCBmdW5jdGlvbiAobW9kKSB7CiAgcmV0dXJuIG1vZCAmJiBtb2QuX19lc01vZHVsZSA/IG1vZCA6IHsKICAgICJkZWZhdWx0IjogbW9kCiAgfTsKfTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5Sb3dGb3JtYXR0ZXIgPSB2b2lkIDA7Cgp2YXIgbG9kYXNoX2lzZnVuY3Rpb25fMSA9IF9faW1wb3J0RGVm
YXVsdChyZXF1aXJlKCJsb2Rhc2guaXNmdW5jdGlvbiIpKTsKCnZhciBsb2Rhc2hfaXNlcXVhbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoImxvZGFzaC5pc2VxdWFsIikpOwoKdmFyIEZpZWxkRm9ybWF0dGVyXzEgPSByZXF1aXJlKCIuL0ZpZWxkRm9ybWF0dGVyIik7Cgp2YXIgdHlwZXNfMSA9IHJlcXVpcmUoIi4uL3R5cGVzIik7Cgp2YXIgUm93Rm9ybWF0dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSb3dGb3JtYXR0ZXIoZm9ybWF0dGVyT3B0aW9ucykgewogICAgX2NsYXNzQ2FsbENo
ZWNrKHRoaXMsIFJvd0Zvcm1hdHRlcik7CgogICAgdGhpcy5yb3dDb3VudCA9IDA7CiAgICB0aGlzLmZvcm1hdHRlck9wdGlvbnMgPSBmb3JtYXR0ZXJPcHRpb25zOwogICAgdGhpcy5maWVsZEZvcm1hdHRlciA9IG5ldyBGaWVsZEZvcm1hdHRlcl8xLkZpZWxkRm9ybWF0dGVyKGZvcm1hdHRlck9wdGlvbnMpOwogICAgdGhpcy5oZWFkZXJzID0gZm9ybWF0dGVyT3B0aW9ucy5oZWFkZXJzOwogICAgdGhpcy5zaG91bGRXcml0ZUhlYWRlcnMgPSBmb3JtYXR0ZXJPcHRpb25zLnNob3VsZFdyaXRlSGVhZGVyczsKICAgIHRoaXMuaGFz
V3JpdHRlbkhlYWRlcnMgPSBmYWxzZTsKCiAgICBpZiAodGhpcy5oZWFkZXJzICE9PSBudWxsKSB7CiAgICAgIHRoaXMuZmllbGRGb3JtYXR0ZXIuaGVhZGVycyA9IHRoaXMuaGVhZGVyczsKICAgIH0KCiAgICBpZiAoZm9ybWF0dGVyT3B0aW9ucy50cmFuc2Zvcm0pIHsKICAgICAgdGhpcy5yb3dUcmFuc2Zvcm0gPSBmb3JtYXR0ZXJPcHRpb25zLnRyYW5zZm9ybTsKICAgIH0KICB9CgogIF9jcmVhdGVDbGFzcyhSb3dGb3JtYXR0ZXIsIFt7CiAgICBrZXk6ICJmb3JtYXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChyb3cs
IGNiKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLmNhbGxUcmFuc2Zvcm1lcihyb3csIGZ1bmN0aW9uIChlcnIsIHRyYW5zZm9ybWVkUm93KSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXJvdykgewogICAgICAgICAgcmV0dXJuIGNiKG51bGwpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHJvd3MgPSBbXTsKCiAgICAgICAgaWYgKHRyYW5zZm9ybWVkUm93KSB7CiAgICAgICAgICB2YXIgX3RoaXMkY2hlY2tIZWFkZXJzID0g
X3RoaXMuY2hlY2tIZWFkZXJzKHRyYW5zZm9ybWVkUm93KSwKICAgICAgICAgICAgICBzaG91bGRGb3JtYXRDb2x1bW5zID0gX3RoaXMkY2hlY2tIZWFkZXJzLnNob3VsZEZvcm1hdENvbHVtbnMsCiAgICAgICAgICAgICAgaGVhZGVycyA9IF90aGlzJGNoZWNrSGVhZGVycy5oZWFkZXJzOwoKICAgICAgICAgIGlmIChfdGhpcy5zaG91bGRXcml0ZUhlYWRlcnMgJiYgaGVhZGVycyAmJiAhX3RoaXMuaGFzV3JpdHRlbkhlYWRlcnMpIHsKICAgICAgICAgICAgcm93cy5wdXNoKF90aGlzLmZvcm1hdENvbHVtbnMoaGVhZGVycywgdHJ1
ZSkpOwogICAgICAgICAgICBfdGhpcy5oYXNXcml0dGVuSGVhZGVycyA9IHRydWU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHNob3VsZEZvcm1hdENvbHVtbnMpIHsKICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSBfdGhpcy5nYXRoZXJDb2x1bW5zKHRyYW5zZm9ybWVkUm93KTsKCiAgICAgICAgICAgIHJvd3MucHVzaChfdGhpcy5mb3JtYXRDb2x1bW5zKGNvbHVtbnMsIGZhbHNlKSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gY2IobnVsbCwgcm93cyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsK
ICAgIGtleTogImZpbmlzaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmluaXNoKGNiKSB7CiAgICAgIHZhciByb3dzID0gW107IC8vIGNoZWNrIGlmIHdlIHNob3VsZCB3cml0ZSBoZWFkZXJzIGFuZCB3ZSBkaWRudCBnZXQgYW55IHJvd3MKCiAgICAgIGlmICh0aGlzLmZvcm1hdHRlck9wdGlvbnMuYWx3YXlzV3JpdGVIZWFkZXJzICYmIHRoaXMucm93Q291bnQgPT09IDApIHsKICAgICAgICBpZiAoIXRoaXMuaGVhZGVycykgewogICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcignYGFsd2F5c1dyaXRlSGVhZGVyc2Agb3B0aW9u
IGlzIHNldCB0byB0cnVlIGJ1dCBgaGVhZGVyc2Agb3B0aW9uIG5vdCBwcm92aWRlZC4nKSk7CiAgICAgICAgfQoKICAgICAgICByb3dzLnB1c2godGhpcy5mb3JtYXRDb2x1bW5zKHRoaXMuaGVhZGVycywgdHJ1ZSkpOwogICAgICB9CgogICAgICBpZiAodGhpcy5mb3JtYXR0ZXJPcHRpb25zLmluY2x1ZGVFbmRSb3dEZWxpbWl0ZXIpIHsKICAgICAgICByb3dzLnB1c2godGhpcy5mb3JtYXR0ZXJPcHRpb25zLnJvd0RlbGltaXRlcik7CiAgICAgIH0KCiAgICAgIHJldHVybiBjYihudWxsLCByb3dzKTsKICAgIH0gLy8gY2hlY2sg
aWYgd2UgbmVlZCB0byB3cml0ZSBoZWFkZXIgcmV0dXJuIHRydWUgaWYgd2Ugc2hvdWxkIGFsc28gd3JpdGUgYSByb3cKICAgIC8vIGNvdWxkIGJlIGZhbHNlIGlmIGhlYWRlcnMgaXMgdHJ1ZSBhbmQgdGhlIGhlYWRlciByb3coZmlyc3QgaXRlbSkgaXMgcGFzc2VkIGluCgogIH0sIHsKICAgIGtleTogImNoZWNrSGVhZGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tIZWFkZXJzKHJvdykgewogICAgICBpZiAodGhpcy5oZWFkZXJzKSB7CiAgICAgICAgLy8gZWl0aGVyIHRoZSBoZWFkZXJzIHdlcmUgcHJvdmlkZWQgYnkg
dGhlIHVzZXIgb3Igd2UgaGF2ZSBhbHJlYWR5IGdhdGhlcmVkIHRoZW0uCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHNob3VsZEZvcm1hdENvbHVtbnM6IHRydWUsCiAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMKICAgICAgICB9OwogICAgICB9CgogICAgICB2YXIgaGVhZGVycyA9IFJvd0Zvcm1hdHRlci5nYXRoZXJIZWFkZXJzKHJvdyk7CiAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7CiAgICAgIHRoaXMuZmllbGRGb3JtYXR0ZXIuaGVhZGVycyA9IGhlYWRlcnM7CgogICAgICBpZiAoIXRoaXMuc2hvdWxk
V3JpdGVIZWFkZXJzKSB7CiAgICAgICAgLy8gaWYgd2UgYXJlIG5vdCBzdXBwb3NlZCB0byB3cml0ZSB0aGUgaGVhZGVycyB0aGVuCiAgICAgICAgLy8gYWx3YXlzIGZvcm1hdCB0aGUgY29sdW1ucwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBzaG91bGRGb3JtYXRDb2x1bW5zOiB0cnVlLAogICAgICAgICAgaGVhZGVyczogbnVsbAogICAgICAgIH07CiAgICAgIH0gLy8gaWYgdGhlIHJvdyBpcyBlcXVhbCB0byBoZWFkZXJzIGRvbnQgZm9ybWF0CgoKICAgICAgcmV0dXJuIHsKICAgICAgICBzaG91bGRGb3JtYXRDb2x1bW5z
OiAhbG9kYXNoX2lzZXF1YWxfMS5kZWZhdWx0KGhlYWRlcnMsIHJvdyksCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9OwogICAgfSAvLyB0b2RvIGNoYW5nZSB0aGlzIG1ldGhvZCB0byB1bmtub3duW10KCiAgfSwgewogICAga2V5OiAiZ2F0aGVyQ29sdW1ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2F0aGVyQ29sdW1ucyhyb3cpIHsKICAgICAgaWYgKHRoaXMuaGVhZGVycyA9PT0gbnVsbCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignSGVhZGVycyBpcyBjdXJyZW50bHkgbnVsbCcpOwogICAgICB9CgogICAg
ICBpZiAoIUFycmF5LmlzQXJyYXkocm93KSkgewogICAgICAgIHJldHVybiB0aGlzLmhlYWRlcnMubWFwKGZ1bmN0aW9uIChoZWFkZXIpIHsKICAgICAgICAgIHJldHVybiByb3dbaGVhZGVyXTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKFJvd0Zvcm1hdHRlci5pc0hhc2hBcnJheShyb3cpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVycy5tYXAoZnVuY3Rpb24gKGhlYWRlciwgaSkgewogICAgICAgICAgdmFyIGNvbCA9IHJvd1tpXTsKCiAgICAgICAgICBpZiAoY29sKSB7CiAgICAgICAgICAgIHJldHVybiBj
b2xbMV07CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5oZWFkZXJzLm1hcChmdW5jdGlvbiAoaGVhZGVyLCBpKSB7CiAgICAgICAgcmV0dXJuIHJvd1tpXTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2FsbFRyYW5zZm9ybWVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxsVHJhbnNmb3JtZXIocm93LCBjYikgewogICAgICBpZiAoIXRoaXMuX3Jvd1RyYW5zZm9ybSkgewogICAgICAgIHJldHVybiBjYihudWxsLCByb3cpOwog
ICAgICB9CgogICAgICByZXR1cm4gdGhpcy5fcm93VHJhbnNmb3JtKHJvdywgY2IpOwogICAgfQogIH0sIHsKICAgIGtleTogImZvcm1hdENvbHVtbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdENvbHVtbnMoY29sdW1ucywgaXNIZWFkZXJzUm93KSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGZvcm1hdHRlZENvbHMgPSBjb2x1bW5zLm1hcChmdW5jdGlvbiAoZmllbGQsIGkpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLmZpZWxkRm9ybWF0dGVyLmZvcm1hdChmaWVsZCwgaSwgaXNIZWFkZXJzUm93
KTsKICAgICAgfSkuam9pbih0aGlzLmZvcm1hdHRlck9wdGlvbnMuZGVsaW1pdGVyKTsKICAgICAgdmFyIHJvd0NvdW50ID0gdGhpcy5yb3dDb3VudDsKICAgICAgdGhpcy5yb3dDb3VudCArPSAxOwoKICAgICAgaWYgKHJvd0NvdW50KSB7CiAgICAgICAgcmV0dXJuIFt0aGlzLmZvcm1hdHRlck9wdGlvbnMucm93RGVsaW1pdGVyLCBmb3JtYXR0ZWRDb2xzXS5qb2luKCcnKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZvcm1hdHRlZENvbHM7CiAgICB9CiAgfSwgewogICAga2V5OiAicm93VHJhbnNmb3JtIiwKICAgIHNldDogZnVu
Y3Rpb24gc2V0KHRyYW5zZm9ybUZ1bmN0aW9uKSB7CiAgICAgIGlmICghbG9kYXNoX2lzZnVuY3Rpb25fMS5kZWZhdWx0KHRyYW5zZm9ybUZ1bmN0aW9uKSkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB0cmFuc2Zvcm0gc2hvdWxkIGJlIGEgZnVuY3Rpb24nKTsKICAgICAgfQoKICAgICAgdGhpcy5fcm93VHJhbnNmb3JtID0gUm93Rm9ybWF0dGVyLmNyZWF0ZVRyYW5zZm9ybSh0cmFuc2Zvcm1GdW5jdGlvbik7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJpc0hhc2hBcnJheSIsCiAgICB2YWx1ZTogZnVuY3Rp
b24gaXNIYXNoQXJyYXkocm93KSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJvdykpIHsKICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyb3dbMF0pICYmIHJvd1swXS5sZW5ndGggPT09IDI7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0gLy8gZ2V0IGhlYWRlcnMgZnJvbSBhIHJvdyBpdGVtCgogIH0sIHsKICAgIGtleTogImdhdGhlckhlYWRlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdhdGhlckhlYWRlcnMocm93KSB7CiAgICAgIGlmIChSb3dGb3JtYXR0ZXIuaXNIYXNoQXJyYXkocm93KSkgewog
ICAgICAgIC8vIGxldHMgYXNzdW1lIGEgbXVsdGktZGltZXNpb25hbCBhcnJheSB3aXRoIGl0ZW0gMCBiZWluZyB0aGUgaGVhZGVyCiAgICAgICAgcmV0dXJuIHJvdy5tYXAoZnVuY3Rpb24gKGl0KSB7CiAgICAgICAgICByZXR1cm4gaXRbMF07CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJvdykpIHsKICAgICAgICByZXR1cm4gcm93OwogICAgICB9CgogICAgICByZXR1cm4gT2JqZWN0LmtleXMocm93KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVUcmFuc2Zvcm0iLAogICAgdmFs
dWU6IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zZm9ybSh0cmFuc2Zvcm1GdW5jdGlvbikgewogICAgICBpZiAodHlwZXNfMS5pc1N5bmNUcmFuc2Zvcm0odHJhbnNmb3JtRnVuY3Rpb24pKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyb3csIGNiKSB7CiAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRSb3cgPSBudWxsOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRyYW5zZm9ybWVkUm93ID0gdHJhbnNmb3JtRnVuY3Rpb24ocm93KTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGNiKGUpOwog
ICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjYihudWxsLCB0cmFuc2Zvcm1lZFJvdyk7CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyb3csIGNiKSB7CiAgICAgICAgdHJhbnNmb3JtRnVuY3Rpb24ocm93LCBjYik7CiAgICAgIH07CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUm93Rm9ybWF0dGVyOwp9KCk7CgpleHBvcnRzLlJvd0Zvcm1hdHRlciA9IFJvd0Zvcm1hdHRlcjsKCn0seyIuLi90eXBlcyI6MTQ5LCIuL0ZpZWxkRm9ybWF0dGVyIjoxNDUsImxvZGFzaC5pc2VxdWFsIjozMjAsImxv
ZGFzaC5pc2Z1bmN0aW9uIjozMjF9XSwxNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgUm93Rm9ybWF0dGVyXzEgPSByZXF1aXJlKCIuL1Jvd0Zvcm1hdHRlciIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJSb3dGb3JtYXR0ZXIiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBSb3dG
b3JtYXR0ZXJfMS5Sb3dGb3JtYXR0ZXI7CiAgfQp9KTsKCnZhciBGaWVsZEZvcm1hdHRlcl8xID0gcmVxdWlyZSgiLi9GaWVsZEZvcm1hdHRlciIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJGaWVsZEZvcm1hdHRlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIEZpZWxkRm9ybWF0dGVyXzEuRmllbGRGb3JtYXR0ZXI7CiAgfQp9KTsKCn0seyIuL0ZpZWxkRm9ybWF0dGVyIjoxNDUsIi4vUm93Rm9ybWF0dGVyIjoxNDZ9XSwxNDg6W2Z1bmN0aW9uKHJl
cXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKEJ1ZmZlcil7CiJ1c2Ugc3RyaWN0IjsKCnZhciBfX2NyZWF0ZUJpbmRpbmcgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19jcmVhdGVCaW5kaW5nIHx8IChPYmplY3QuY3JlYXRlID8gZnVuY3Rpb24gKG8sIG0sIGssIGsyKSB7CiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gazsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIG1ba107CiAgICB9CiAg
fSk7Cn0gOiBmdW5jdGlvbiAobywgbSwgaywgazIpIHsKICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrOwogIG9bazJdID0gbVtrXTsKfSk7Cgp2YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fc2V0TW9kdWxlRGVmYXVsdCB8fCAoT2JqZWN0LmNyZWF0ZSA/IGZ1bmN0aW9uIChvLCB2KSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sICJkZWZhdWx0IiwgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB2CiAgfSk7Cn0gOiBmdW5jdGlvbiAobywgdikgewogIG9bImRlZmF1
bHQiXSA9IHY7Cn0pOwoKdmFyIF9faW1wb3J0U3RhciA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX2ltcG9ydFN0YXIgfHwgZnVuY3Rpb24gKG1vZCkgewogIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7CiAgdmFyIHJlc3VsdCA9IHt9OwogIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIHsKICAgIGlmIChrICE9PSAiZGVmYXVsdCIgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTsKICB9CgogIF9fc2V0TW9kdWxl
RGVmYXVsdChyZXN1bHQsIG1vZCk7CgogIHJldHVybiByZXN1bHQ7Cn07Cgp2YXIgX19leHBvcnRTdGFyID0gdm9pZCAwICYmICh2b2lkIDApLl9fZXhwb3J0U3RhciB8fCBmdW5jdGlvbiAobSwgZXhwb3J0cykgewogIGZvciAodmFyIHAgaW4gbSkgewogICAgaWYgKHAgIT09ICJkZWZhdWx0IiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApOwogIH0KfTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9
KTsKZXhwb3J0cy53cml0ZVRvUGF0aCA9IGV4cG9ydHMud3JpdGVUb1N0cmluZyA9IGV4cG9ydHMud3JpdGVUb0J1ZmZlciA9IGV4cG9ydHMud3JpdGVUb1N0cmVhbSA9IGV4cG9ydHMud3JpdGUgPSBleHBvcnRzLmZvcm1hdCA9IHZvaWQgMDsKCnZhciB1dGlsXzEgPSByZXF1aXJlKCJ1dGlsIik7Cgp2YXIgc3RyZWFtXzEgPSByZXF1aXJlKCJzdHJlYW0iKTsKCnZhciBmcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKCJmcyIpKTsKCnZhciBGb3JtYXR0ZXJPcHRpb25zXzEgPSByZXF1aXJlKCIuL0Zvcm1hdHRlck9wdGlvbnMiKTsK
CnZhciBDc3ZGb3JtYXR0ZXJTdHJlYW1fMSA9IHJlcXVpcmUoIi4vQ3N2Rm9ybWF0dGVyU3RyZWFtIik7CgpfX2V4cG9ydFN0YXIocmVxdWlyZSgiLi90eXBlcyIpLCBleHBvcnRzKTsKCnZhciBDc3ZGb3JtYXR0ZXJTdHJlYW1fMiA9IHJlcXVpcmUoIi4vQ3N2Rm9ybWF0dGVyU3RyZWFtIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIkNzdkZvcm1hdHRlclN0cmVhbSIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIENzdkZvcm1hdHRlclN0cmVhbV8yLkNz
dkZvcm1hdHRlclN0cmVhbTsKICB9Cn0pOwoKdmFyIEZvcm1hdHRlck9wdGlvbnNfMiA9IHJlcXVpcmUoIi4vRm9ybWF0dGVyT3B0aW9ucyIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJGb3JtYXR0ZXJPcHRpb25zIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gRm9ybWF0dGVyT3B0aW9uc18yLkZvcm1hdHRlck9wdGlvbnM7CiAgfQp9KTsKCmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICByZXR1cm4gbmV3IENzdkZvcm1hdHRl
clN0cmVhbV8xLkNzdkZvcm1hdHRlclN0cmVhbShuZXcgRm9ybWF0dGVyT3B0aW9uc18xLkZvcm1hdHRlck9wdGlvbnMob3B0aW9ucykpOwp9OwoKZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChyb3dzLCBvcHRpb25zKSB7CiAgdmFyIGNzdlN0cmVhbSA9IGV4cG9ydHMuZm9ybWF0KG9wdGlvbnMpOwogIHZhciBwcm9taXNlV3JpdGUgPSB1dGlsXzEucHJvbWlzaWZ5KGZ1bmN0aW9uIChyb3csIGNiKSB7CiAgICBjc3ZTdHJlYW0ud3JpdGUocm93LCB1bmRlZmluZWQsIGNiKTsKICB9KTsKICByb3dzLnJlZHVjZShmdW5jdGlvbiAo
cHJldiwgcm93KSB7CiAgICByZXR1cm4gcHJldi50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHByb21pc2VXcml0ZShyb3cpOwogICAgfSk7CiAgfSwgUHJvbWlzZS5yZXNvbHZlKCkpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNzdlN0cmVhbS5lbmQoKTsKICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICBjc3ZTdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpOwogIH0pOwogIHJldHVybiBjc3ZTdHJlYW07Cn07CgpleHBvcnRzLndyaXRlVG9TdHJlYW0gPSBmdW5jdGlvbiAod3MsIHJvd3MsIG9wdGlv
bnMpIHsKICByZXR1cm4gZXhwb3J0cy53cml0ZShyb3dzLCBvcHRpb25zKS5waXBlKHdzKTsKfTsKCmV4cG9ydHMud3JpdGVUb0J1ZmZlciA9IGZ1bmN0aW9uIChyb3dzKSB7CiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogIHZhciBidWZmZXJzID0gW107CiAgdmFyIHdzID0gbmV3IHN0cmVhbV8xLldyaXRhYmxlKHsKICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShkYXRhLCBlbmMsIHdyaXRlQ2IpIHsKICAgICAgYnVmZmVy
cy5wdXNoKGRhdGEpOwogICAgICB3cml0ZUNiKCk7CiAgICB9CiAgfSk7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikgewogICAgd3Mub24oJ2Vycm9yJywgcmVqKS5vbignZmluaXNoJywgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gcmVzKEJ1ZmZlci5jb25jYXQoYnVmZmVycykpOwogICAgfSk7CiAgICBleHBvcnRzLndyaXRlKHJvd3MsIG9wdHMpLnBpcGUod3MpOwogIH0pOwp9OwoKZXhwb3J0cy53cml0ZVRvU3RyaW5nID0gZnVuY3Rpb24gKHJvd3MsIG9wdGlvbnMpIHsKICByZXR1cm4gZXhw
b3J0cy53cml0ZVRvQnVmZmVyKHJvd3MsIG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGJ1ZmZlcikgewogICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygpOwogIH0pOwp9OwoKZXhwb3J0cy53cml0ZVRvUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCByb3dzLCBvcHRpb25zKSB7CiAgdmFyIHN0cmVhbSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHBhdGgsIHsKICAgIGVuY29kaW5nOiAndXRmOCcKICB9KTsKICByZXR1cm4gZXhwb3J0cy53cml0ZShyb3dzLCBvcHRpb25zKS5waXBlKHN0cmVhbSk7Cn07Cgp9KS5jYWxsKHRoaXMscmVxdWly
ZSgiYnVmZmVyIikuQnVmZmVyKQoKfSx7Ii4vQ3N2Rm9ybWF0dGVyU3RyZWFtIjoxNDMsIi4vRm9ybWF0dGVyT3B0aW9ucyI6MTQ0LCIuL3R5cGVzIjoxNDksImJ1ZmZlciI6MjE2LCJmcyI6MjE1LCJzdHJlYW0iOjM5NiwidXRpbCI6NDE1fV0sMTQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwovKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFs
dWU6IHRydWUKfSk7CmV4cG9ydHMuaXNTeW5jVHJhbnNmb3JtID0gdm9pZCAwOwoKZXhwb3J0cy5pc1N5bmNUcmFuc2Zvcm0gPSBmdW5jdGlvbiAodHJhbnNmb3JtKSB7CiAgcmV0dXJuIHRyYW5zZm9ybS5sZW5ndGggPT09IDE7Cn07Cgp9LHt9XSwxNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHNldEltbWVkaWF0ZSl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rp
b24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoK
ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRv
ci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1By
b3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSAidW5kZWZpbmVkIiAmJiBSZWZsZWN0LmdldCkgeyBfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0
LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7IH0KCmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3Bl
cnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHsgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNs
YXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2Yo
bywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9
IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNh
bGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxl
Y3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7
IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5Dc3ZQYXJzZXJTdHJlYW0gPSB2b2lkIDA7Cgp2YXIgc3RyaW5nX2RlY29kZXJfMSA9
IHJlcXVpcmUoInN0cmluZ19kZWNvZGVyIik7Cgp2YXIgc3RyZWFtXzEgPSByZXF1aXJlKCJzdHJlYW0iKTsKCnZhciB0cmFuc2Zvcm1zXzEgPSByZXF1aXJlKCIuL3RyYW5zZm9ybXMiKTsKCnZhciBwYXJzZXJfMSA9IHJlcXVpcmUoIi4vcGFyc2VyIik7Cgp2YXIgQ3N2UGFyc2VyU3RyZWFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfc3RyZWFtXzEkVHJhbnNmb3JtKSB7CiAgX2luaGVyaXRzKENzdlBhcnNlclN0cmVhbSwgX3N0cmVhbV8xJFRyYW5zZm9ybSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ3N2UGFy
c2VyU3RyZWFtKTsKCiAgZnVuY3Rpb24gQ3N2UGFyc2VyU3RyZWFtKHBhcnNlck9wdGlvbnMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3N2UGFyc2VyU3RyZWFtKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHsKICAgICAgb2JqZWN0TW9kZTogcGFyc2VyT3B0aW9ucy5vYmplY3RNb2RlCiAgICB9KTsKICAgIF90aGlzLmxpbmVzID0gJyc7CiAgICBfdGhpcy5yb3dDb3VudCA9IDA7CiAgICBfdGhpcy5wYXJzZWRSb3dDb3VudCA9IDA7CiAgICBfdGhpcy5wYXJzZWRMaW5lQ291
bnQgPSAwOwogICAgX3RoaXMuZW5kRW1pdHRlZCA9IGZhbHNlOwogICAgX3RoaXMuaGVhZGVyc0VtaXR0ZWQgPSBmYWxzZTsKICAgIF90aGlzLnBhcnNlck9wdGlvbnMgPSBwYXJzZXJPcHRpb25zOwogICAgX3RoaXMucGFyc2VyID0gbmV3IHBhcnNlcl8xLlBhcnNlcihwYXJzZXJPcHRpb25zKTsKICAgIF90aGlzLmhlYWRlclRyYW5zZm9ybWVyID0gbmV3IHRyYW5zZm9ybXNfMS5IZWFkZXJUcmFuc2Zvcm1lcihwYXJzZXJPcHRpb25zKTsKICAgIF90aGlzLmRlY29kZXIgPSBuZXcgc3RyaW5nX2RlY29kZXJfMS5TdHJpbmdEZWNv
ZGVyKHBhcnNlck9wdGlvbnMuZW5jb2RpbmcpOwogICAgX3RoaXMucm93VHJhbnNmb3JtZXJWYWxpZGF0b3IgPSBuZXcgdHJhbnNmb3Jtc18xLlJvd1RyYW5zZm9ybWVyVmFsaWRhdG9yKCk7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ3N2UGFyc2VyU3RyZWFtLCBbewogICAga2V5OiAidHJhbnNmb3JtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtRnVuY3Rpb24pIHsKICAgICAgdGhpcy5yb3dUcmFuc2Zvcm1lclZhbGlkYXRvci5yb3dUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1G
dW5jdGlvbjsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgfSwgewogICAga2V5OiAidmFsaWRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKHZhbGlkYXRlRnVuY3Rpb24pIHsKICAgICAgdGhpcy5yb3dUcmFuc2Zvcm1lclZhbGlkYXRvci5yb3dWYWxpZGF0b3IgPSB2YWxpZGF0ZUZ1bmN0aW9uOwogICAgICByZXR1cm4gdGhpczsKICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkKCiAgfSwgewogICAga2V5OiAiZW1pdCIsCiAgICB2YWx1
ZTogZnVuY3Rpb24gZW1pdChldmVudCkgewogICAgICB2YXIgX2dldDI7CgogICAgICBpZiAoZXZlbnQgPT09ICdlbmQnKSB7CiAgICAgICAgaWYgKCF0aGlzLmVuZEVtaXR0ZWQpIHsKICAgICAgICAgIHRoaXMuZW5kRW1pdHRlZCA9IHRydWU7CgogICAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoQ3N2UGFyc2VyU3RyZWFtLnByb3RvdHlwZSksICJlbWl0IiwgdGhpcykuY2FsbCh0aGlzLCAnZW5kJywgdGhpcy5yb3dDb3VudCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGZvciAo
dmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICByZXN0W19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgfQoKICAgICAgcmV0dXJuIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKENzdlBhcnNlclN0cmVhbS5wcm90b3R5cGUpLCAiZW1pdCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpcywgZXZlbnRdLmNvbmNhdChyZXN0KSk7CiAgICB9CiAgfSwg
ewogICAga2V5OiAiX3RyYW5zZm9ybSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3RyYW5zZm9ybShkYXRhLCBlbmNvZGluZywgZG9uZSkgewogICAgICAvLyBpZiB3ZSBoYXZlIGhpdCBvdXIgbWF4Um93cyBwYXJzaW5nIGxpbWl0IHRoZW4gc2tpcCBwYXJzaW5nCiAgICAgIGlmICh0aGlzLmhhc0hpdFJvd0xpbWl0KSB7CiAgICAgICAgcmV0dXJuIGRvbmUoKTsKICAgICAgfQoKICAgICAgdHJ5IHsKICAgICAgICB2YXIgbGluZXMgPSB0aGlzLmxpbmVzOwogICAgICAgIHZhciBuZXdMaW5lID0gbGluZXMgKyB0aGlzLmRlY29kZXIu
d3JpdGUoZGF0YSk7CiAgICAgICAgdmFyIHJvd3MgPSB0aGlzLnBhcnNlKG5ld0xpbmUsIHRydWUpOwogICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NSb3dzKHJvd3MsIGRvbmUpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcmV0dXJuIGRvbmUoZSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZmx1c2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9mbHVzaChkb25lKSB7CiAgICAgIC8vIGlmIHdlIGhhdmUgaGl0IG91ciBtYXhSb3dzIHBhcnNpbmcgbGltaXQgdGhlbiBza2lwIHBhcnNpbmcKICAgICAgaWYg
KHRoaXMuaGFzSGl0Um93TGltaXQpIHsKICAgICAgICByZXR1cm4gZG9uZSgpOwogICAgICB9CgogICAgICB0cnkgewogICAgICAgIHZhciBuZXdMaW5lID0gdGhpcy5saW5lcyArIHRoaXMuZGVjb2Rlci5lbmQoKTsKICAgICAgICB2YXIgcm93cyA9IHRoaXMucGFyc2UobmV3TGluZSwgZmFsc2UpOwogICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NSb3dzKHJvd3MsIGRvbmUpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcmV0dXJuIGRvbmUoZSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwYXJzZSIsCiAg
ICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0YSwgaGFzTW9yZURhdGEpIHsKICAgICAgaWYgKCFkYXRhKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CgogICAgICB2YXIgX3RoaXMkcGFyc2VyJHBhcnNlID0gdGhpcy5wYXJzZXIucGFyc2UoZGF0YSwgaGFzTW9yZURhdGEpLAogICAgICAgICAgbGluZSA9IF90aGlzJHBhcnNlciRwYXJzZS5saW5lLAogICAgICAgICAgcm93cyA9IF90aGlzJHBhcnNlciRwYXJzZS5yb3dzOwoKICAgICAgdGhpcy5saW5lcyA9IGxpbmU7CiAgICAgIHJldHVybiByb3dzOwogICAgfQogIH0s
IHsKICAgIGtleTogInByb2Nlc3NSb3dzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzUm93cyhyb3dzLCBjYikgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciByb3dzTGVuZ3RoID0gcm93cy5sZW5ndGg7CgogICAgICB2YXIgaXRlcmF0ZSA9IGZ1bmN0aW9uIGl0ZXJhdGUoaSkgewogICAgICAgIHZhciBjYWxsTmV4dCA9IGZ1bmN0aW9uIGNhbGxOZXh0KGVycikgewogICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAo
aSAlIDEwMCA9PT0gMCkgewogICAgICAgICAgICAvLyBpbmNhc2UgdGhlIHRyYW5zZm9ybSBhcmUgc3luYyBpbnNlcnQgYSBuZXh0IHRpY2sgdG8gcHJldmVudCBzdGFjayBvdmVyZmxvdwogICAgICAgICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiBpdGVyYXRlKGkgKyAxKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGl0ZXJhdGUoaSArIDEpOwogICAgICAgIH07CgogICAgICAgIF90aGlz
Mi5jaGVja0FuZEVtaXRIZWFkZXJzKCk7IC8vIGlmIHdlIGhhdmUgZW1pdHRlZCBhbGwgcm93cyBvciB3ZSBoYXZlIGhpdCB0aGUgbWF4Um93cyBsaW1pdCBvcHRpb24KICAgICAgICAvLyB0aGVuIGVuZAoKCiAgICAgICAgaWYgKGkgPj0gcm93c0xlbmd0aCB8fCBfdGhpczIuaGFzSGl0Um93TGltaXQpIHsKICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMyLnBhcnNlZExpbmVDb3VudCArPSAxOwoKICAgICAgICBpZiAoX3RoaXMyLnNob3VsZFNraXBMaW5lKSB7CiAgICAgICAgICByZXR1cm4g
Y2FsbE5leHQoKTsKICAgICAgICB9CgogICAgICAgIHZhciByb3cgPSByb3dzW2ldOwogICAgICAgIF90aGlzMi5yb3dDb3VudCArPSAxOwogICAgICAgIF90aGlzMi5wYXJzZWRSb3dDb3VudCArPSAxOwogICAgICAgIHZhciBuZXh0Um93Q291bnQgPSBfdGhpczIucm93Q291bnQ7CiAgICAgICAgcmV0dXJuIF90aGlzMi50cmFuc2Zvcm1Sb3cocm93LCBmdW5jdGlvbiAoZXJyLCB0cmFuc2Zvcm1SZXN1bHQpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgX3RoaXMyLnJvd0NvdW50IC09IDE7CiAgICAgICAgICAg
IHJldHVybiBjYWxsTmV4dChlcnIpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICghdHJhbnNmb3JtUmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsTmV4dChuZXcgRXJyb3IoJ2V4cGVjdGVkIHRyYW5zZm9ybSByZXN1bHQnKSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKCF0cmFuc2Zvcm1SZXN1bHQuaXNWYWxpZCkgewogICAgICAgICAgICBfdGhpczIuZW1pdCgnZGF0YS1pbnZhbGlkJywgdHJhbnNmb3JtUmVzdWx0LnJvdywgbmV4dFJvd0NvdW50LCB0cmFuc2Zvcm1SZXN1bHQucmVhc29uKTsKICAgICAg
ICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtUmVzdWx0LnJvdykgewogICAgICAgICAgICByZXR1cm4gX3RoaXMyLnB1c2hSb3codHJhbnNmb3JtUmVzdWx0LnJvdywgY2FsbE5leHQpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjYWxsTmV4dCgpOwogICAgICAgIH0pOwogICAgICB9OwoKICAgICAgaXRlcmF0ZSgwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0cmFuc2Zvcm1Sb3ciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybVJvdyhwYXJzZWRSb3csIGNiKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoK
ICAgICAgdHJ5IHsKICAgICAgICB0aGlzLmhlYWRlclRyYW5zZm9ybWVyLnRyYW5zZm9ybShwYXJzZWRSb3csIGZ1bmN0aW9uIChlcnIsIHdpdGhIZWFkZXJzKSB7CiAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICghd2l0aEhlYWRlcnMpIHsKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcignRXhwZWN0ZWQgcmVzdWx0IGZyb20gaGVhZGVyIHRyYW5zZm9ybScpKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoIXdpdGhIZWFkZXJz
LmlzVmFsaWQpIHsKICAgICAgICAgICAgaWYgKF90aGlzMy5zaG91bGRFbWl0Um93cykgewogICAgICAgICAgICAgIHJldHVybiBjYihudWxsLCB7CiAgICAgICAgICAgICAgICBpc1ZhbGlkOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJvdzogcGFyc2VkUm93CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gLy8gc2tpcHBlZCBiZWNhdXNlIG9mIHNraXBSb3dzIG9wdGlvbiByZW1vdmUgZnJvbSB0b3RhbCByb3cgY291bnQKCgogICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNraXBSb3coY2IpOwogICAgICAgICAgfQoK
ICAgICAgICAgIGlmICh3aXRoSGVhZGVycy5yb3cpIHsKICAgICAgICAgICAgaWYgKF90aGlzMy5zaG91bGRFbWl0Um93cykgewogICAgICAgICAgICAgIHJldHVybiBfdGhpczMucm93VHJhbnNmb3JtZXJWYWxpZGF0b3IudHJhbnNmb3JtQW5kVmFsaWRhdGUod2l0aEhlYWRlcnMucm93LCBjYik7CiAgICAgICAgICAgIH0gLy8gc2tpcHBlZCBiZWNhdXNlIG9mIHNraXBSb3dzIG9wdGlvbiByZW1vdmUgZnJvbSB0b3RhbCByb3cgY291bnQKCgogICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNraXBSb3coY2IpOwogICAgICAgICAg
fSAvLyB0aGlzIGlzIGEgaGVhZGVyIHJvdyBkb250IGluY2x1ZGUgaW4gdGhlIHJvd0NvdW50IG9yIHBhcnNlZFJvd0NvdW50CgoKICAgICAgICAgIF90aGlzMy5yb3dDb3VudCAtPSAxOwogICAgICAgICAgX3RoaXMzLnBhcnNlZFJvd0NvdW50IC09IDE7CiAgICAgICAgICByZXR1cm4gY2IobnVsbCwgewogICAgICAgICAgICByb3c6IG51bGwsCiAgICAgICAgICAgIGlzVmFsaWQ6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY2IoZSk7CiAgICAgIH0KICAgIH0KICB9
LCB7CiAgICBrZXk6ICJjaGVja0FuZEVtaXRIZWFkZXJzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0FuZEVtaXRIZWFkZXJzKCkgewogICAgICBpZiAoIXRoaXMuaGVhZGVyc0VtaXR0ZWQgJiYgdGhpcy5oZWFkZXJUcmFuc2Zvcm1lci5oZWFkZXJzKSB7CiAgICAgICAgdGhpcy5oZWFkZXJzRW1pdHRlZCA9IHRydWU7CiAgICAgICAgdGhpcy5lbWl0KCdoZWFkZXJzJywgdGhpcy5oZWFkZXJUcmFuc2Zvcm1lci5oZWFkZXJzKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNraXBSb3ciLAogICAgdmFsdWU6IGZ1
bmN0aW9uIHNraXBSb3coY2IpIHsKICAgICAgLy8gc2tpcHBlZCBiZWNhdXNlIG9mIHNraXBSb3dzIG9wdGlvbiByZW1vdmUgZnJvbSB0b3RhbCByb3cgY291bnQKICAgICAgdGhpcy5yb3dDb3VudCAtPSAxOwogICAgICByZXR1cm4gY2IobnVsbCwgewogICAgICAgIHJvdzogbnVsbCwKICAgICAgICBpc1ZhbGlkOiB0cnVlCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInB1c2hSb3ciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2hSb3cocm93LCBjYikgewogICAgICB0cnkgewogICAgICAgIGlmICghdGhpcy5wYXJz
ZXJPcHRpb25zLm9iamVjdE1vZGUpIHsKICAgICAgICAgIHRoaXMucHVzaChKU09OLnN0cmluZ2lmeShyb3cpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5wdXNoKHJvdyk7CiAgICAgICAgfQoKICAgICAgICBjYigpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY2IoZSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJoYXNIaXRSb3dMaW1pdCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMucGFyc2VyT3B0aW9ucy5saW1pdFJvd3MgJiYgdGhpcy5yb3dDb3Vu
dCA+PSB0aGlzLnBhcnNlck9wdGlvbnMubWF4Um93czsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzaG91bGRFbWl0Um93cyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUm93Q291bnQgPiB0aGlzLnBhcnNlck9wdGlvbnMuc2tpcFJvd3M7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvdWxkU2tpcExpbmUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnBhcnNlZExpbmVDb3VudCA8PSB0aGlzLnBhcnNlck9wdGlvbnMuc2tpcExpbmVzOwogICAg
fQogIH1dKTsKCiAgcmV0dXJuIENzdlBhcnNlclN0cmVhbTsKfShzdHJlYW1fMS5UcmFuc2Zvcm0pOwoKZXhwb3J0cy5Dc3ZQYXJzZXJTdHJlYW0gPSBDc3ZQYXJzZXJTdHJlYW07Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgidGltZXJzIikuc2V0SW1tZWRpYXRlKQoKfSx7Ii4vcGFyc2VyIjoxNjIsIi4vdHJhbnNmb3JtcyI6MTY1LCJzdHJlYW0iOjM5Niwic3RyaW5nX2RlY29kZXIiOjQxMCwidGltZXJzIjo0MTF9XSwxNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBf
Y2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCnZhciBfX2ltcG9ydERlZmF1bHQgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19pbXBvcnREZWZhdWx0IHx8IGZ1bmN0aW9uIChtb2QpIHsKICByZXR1cm4gbW9kICYmIG1vZC5fX2VzTW9kdWxlID8gbW9kIDogewogICAgImRlZmF1bHQiOiBtb2QKICB9Owp9OwoKT2JqZWN0LmRl
ZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBhcnNlck9wdGlvbnMgPSB2b2lkIDA7Cgp2YXIgbG9kYXNoX2VzY2FwZXJlZ2V4cF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoImxvZGFzaC5lc2NhcGVyZWdleHAiKSk7Cgp2YXIgbG9kYXNoX2lzbmlsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZSgibG9kYXNoLmlzbmlsIikpOwoKdmFyIFBhcnNlck9wdGlvbnMgPSBmdW5jdGlvbiBQYXJzZXJPcHRpb25zKG9wdHMpIHsKICBfY2xhc3NDYWxsQ2hlY2so
dGhpcywgUGFyc2VyT3B0aW9ucyk7CgogIHZhciBfYTsKCiAgdGhpcy5vYmplY3RNb2RlID0gdHJ1ZTsKICB0aGlzLmRlbGltaXRlciA9ICcsJzsKICB0aGlzLmlnbm9yZUVtcHR5ID0gZmFsc2U7CiAgdGhpcy5xdW90ZSA9ICciJzsKICB0aGlzLmVzY2FwZSA9IG51bGw7CiAgdGhpcy5lc2NhcGVDaGFyID0gdGhpcy5xdW90ZTsKICB0aGlzLmNvbW1lbnQgPSBudWxsOwogIHRoaXMuc3VwcG9ydHNDb21tZW50cyA9IGZhbHNlOwogIHRoaXMubHRyaW0gPSBmYWxzZTsKICB0aGlzLnJ0cmltID0gZmFsc2U7CiAgdGhpcy50cmltID0g
ZmFsc2U7CiAgdGhpcy5oZWFkZXJzID0gbnVsbDsKICB0aGlzLnJlbmFtZUhlYWRlcnMgPSBmYWxzZTsKICB0aGlzLnN0cmljdENvbHVtbkhhbmRsaW5nID0gZmFsc2U7CiAgdGhpcy5kaXNjYXJkVW5tYXBwZWRDb2x1bW5zID0gZmFsc2U7CiAgdGhpcy5jYXJyaWFnZVJldHVybiA9ICdccic7CiAgdGhpcy5lbmNvZGluZyA9ICd1dGY4JzsKICB0aGlzLmxpbWl0Um93cyA9IGZhbHNlOwogIHRoaXMubWF4Um93cyA9IDA7CiAgdGhpcy5za2lwTGluZXMgPSAwOwogIHRoaXMuc2tpcFJvd3MgPSAwOwogIE9iamVjdC5hc3NpZ24odGhp
cywgb3B0cyB8fCB7fSk7CgogIGlmICh0aGlzLmRlbGltaXRlci5sZW5ndGggPiAxKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlbGltaXRlciBvcHRpb24gbXVzdCBiZSBvbmUgY2hhcmFjdGVyIGxvbmcnKTsKICB9CgogIHRoaXMuZXNjYXBlZERlbGltaXRlciA9IGxvZGFzaF9lc2NhcGVyZWdleHBfMS5kZWZhdWx0KHRoaXMuZGVsaW1pdGVyKTsKICB0aGlzLmVzY2FwZUNoYXIgPSAoX2EgPSB0aGlzLmVzY2FwZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5xdW90ZTsKICB0aGlzLnN1cHBvcnRzQ29t
bWVudHMgPSAhbG9kYXNoX2lzbmlsXzEuZGVmYXVsdCh0aGlzLmNvbW1lbnQpOwogIHRoaXMuTkVYVF9UT0tFTl9SRUdFWFAgPSBuZXcgUmVnRXhwKCIoW15cXHNdfFxcclxcbnxcXG58XFxyfCIuY29uY2F0KHRoaXMuZXNjYXBlZERlbGltaXRlciwgIikiKSk7CgogIGlmICh0aGlzLm1heFJvd3MgPiAwKSB7CiAgICB0aGlzLmxpbWl0Um93cyA9IHRydWU7CiAgfQp9OwoKZXhwb3J0cy5QYXJzZXJPcHRpb25zID0gUGFyc2VyT3B0aW9uczsKCn0seyJsb2Rhc2guZXNjYXBlcmVnZXhwIjozMTcsImxvZGFzaC5pc25pbCI6MzIyfV0s
MTUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKdmFyIF9fY3JlYXRlQmluZGluZyA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX2NyZWF0ZUJpbmRpbmcgfHwgKE9iamVjdC5jcmVhdGUgPyBmdW5jdGlvbiAobywgbSwgaywgazIpIHsKICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gbVtrXTsKICAgIH0KICB9KTsK
fSA6IGZ1bmN0aW9uIChvLCBtLCBrLCBrMikgewogIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7CiAgb1trMl0gPSBtW2tdOwp9KTsKCnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19zZXRNb2R1bGVEZWZhdWx0IHx8IChPYmplY3QuY3JlYXRlID8gZnVuY3Rpb24gKG8sIHYpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgImRlZmF1bHQiLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHYKICB9KTsKfSA6IGZ1bmN0aW9uIChvLCB2KSB7CiAgb1siZGVmYXVsdCJd
ID0gdjsKfSk7Cgp2YXIgX19pbXBvcnRTdGFyID0gdm9pZCAwICYmICh2b2lkIDApLl9faW1wb3J0U3RhciB8fCBmdW5jdGlvbiAobW9kKSB7CiAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDsKICB2YXIgcmVzdWx0ID0ge307CiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgewogICAgaWYgKGsgIT09ICJkZWZhdWx0IiAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspOwogIH0KCiAgX19zZXRNb2R1bGVEZWZh
dWx0KHJlc3VsdCwgbW9kKTsKCiAgcmV0dXJuIHJlc3VsdDsKfTsKCnZhciBfX2V4cG9ydFN0YXIgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19leHBvcnRTdGFyIHx8IGZ1bmN0aW9uIChtLCBleHBvcnRzKSB7CiAgZm9yICh2YXIgcCBpbiBtKSB7CiAgICBpZiAocCAhPT0gImRlZmF1bHQiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7CiAgfQp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpl
eHBvcnRzLnBhcnNlU3RyaW5nID0gZXhwb3J0cy5wYXJzZUZpbGUgPSBleHBvcnRzLnBhcnNlU3RyZWFtID0gZXhwb3J0cy5wYXJzZSA9IHZvaWQgMDsKCnZhciBmcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKCJmcyIpKTsKCnZhciBzdHJlYW1fMSA9IHJlcXVpcmUoInN0cmVhbSIpOwoKdmFyIFBhcnNlck9wdGlvbnNfMSA9IHJlcXVpcmUoIi4vUGFyc2VyT3B0aW9ucyIpOwoKdmFyIENzdlBhcnNlclN0cmVhbV8xID0gcmVxdWlyZSgiLi9Dc3ZQYXJzZXJTdHJlYW0iKTsKCl9fZXhwb3J0U3RhcihyZXF1aXJlKCIuL3R5cGVzIiks
IGV4cG9ydHMpOwoKdmFyIENzdlBhcnNlclN0cmVhbV8yID0gcmVxdWlyZSgiLi9Dc3ZQYXJzZXJTdHJlYW0iKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiQ3N2UGFyc2VyU3RyZWFtIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gQ3N2UGFyc2VyU3RyZWFtXzIuQ3N2UGFyc2VyU3RyZWFtOwogIH0KfSk7Cgp2YXIgUGFyc2VyT3B0aW9uc18yID0gcmVxdWlyZSgiLi9QYXJzZXJPcHRpb25zIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywg
IlBhcnNlck9wdGlvbnMiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBQYXJzZXJPcHRpb25zXzIuUGFyc2VyT3B0aW9uczsKICB9Cn0pOwoKZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uIChhcmdzKSB7CiAgcmV0dXJuIG5ldyBDc3ZQYXJzZXJTdHJlYW1fMS5Dc3ZQYXJzZXJTdHJlYW0obmV3IFBhcnNlck9wdGlvbnNfMS5QYXJzZXJPcHRpb25zKGFyZ3MpKTsKfTsKCmV4cG9ydHMucGFyc2VTdHJlYW0gPSBmdW5jdGlvbiAoc3RyZWFtLCBvcHRpb25zKSB7CiAgcmV0dXJu
IHN0cmVhbS5waXBlKG5ldyBDc3ZQYXJzZXJTdHJlYW1fMS5Dc3ZQYXJzZXJTdHJlYW0obmV3IFBhcnNlck9wdGlvbnNfMS5QYXJzZXJPcHRpb25zKG9wdGlvbnMpKSk7Cn07CgpleHBvcnRzLnBhcnNlRmlsZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikgewogIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICByZXR1cm4gZnMuY3JlYXRlUmVhZFN0cmVhbShsb2NhdGlvbikucGlwZShuZXcgQ3N2UGFyc2VyU3RyZWFtXzEuQ3N2
UGFyc2VyU3RyZWFtKG5ldyBQYXJzZXJPcHRpb25zXzEuUGFyc2VyT3B0aW9ucyhvcHRpb25zKSkpOwp9OwoKZXhwb3J0cy5wYXJzZVN0cmluZyA9IGZ1bmN0aW9uIChzdHJpbmcsIG9wdGlvbnMpIHsKICB2YXIgcnMgPSBuZXcgc3RyZWFtXzEuUmVhZGFibGUoKTsKICBycy5wdXNoKHN0cmluZyk7CiAgcnMucHVzaChudWxsKTsKICByZXR1cm4gcnMucGlwZShuZXcgQ3N2UGFyc2VyU3RyZWFtXzEuQ3N2UGFyc2VyU3RyZWFtKG5ldyBQYXJzZXJPcHRpb25zXzEuUGFyc2VyT3B0aW9ucyhvcHRpb25zKSkpOwp9OwoKfSx7Ii4vQ3N2
UGFyc2VyU3RyZWFtIjoxNTAsIi4vUGFyc2VyT3B0aW9ucyI6MTUxLCIuL3R5cGVzIjoxNjYsImZzIjoyMTUsInN0cmVhbSI6Mzk2fV0sMTUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVm
aW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7
IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5QYXJz
ZXIgPSB2b2lkIDA7Cgp2YXIgU2Nhbm5lcl8xID0gcmVxdWlyZSgiLi9TY2FubmVyIik7Cgp2YXIgUm93UGFyc2VyXzEgPSByZXF1aXJlKCIuL1Jvd1BhcnNlciIpOwoKdmFyIFRva2VuXzEgPSByZXF1aXJlKCIuL1Rva2VuIik7Cgp2YXIgRU1QVFlfUk9XX1JFR0VYUCA9IC9eXHMqKD86Jyd8IiIpP1xzKig/OixccyooPzonJ3wiIik/XHMqKSokLzsKCnZhciBQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBhcnNlcihwYXJzZXJPcHRpb25zKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywg
UGFyc2VyKTsKCiAgICB0aGlzLnBhcnNlck9wdGlvbnMgPSBwYXJzZXJPcHRpb25zOwogICAgdGhpcy5yb3dQYXJzZXIgPSBuZXcgUm93UGFyc2VyXzEuUm93UGFyc2VyKHRoaXMucGFyc2VyT3B0aW9ucyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUGFyc2VyLCBbewogICAga2V5OiAicGFyc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGxpbmUsIGhhc01vcmVEYXRhKSB7CiAgICAgIHZhciBzY2FubmVyID0gbmV3IFNjYW5uZXJfMS5TY2FubmVyKHsKICAgICAgICBsaW5lOiBQYXJzZXIucmVtb3ZlQk9NKGxpbmUpLAogICAg
ICAgIHBhcnNlck9wdGlvbnM6IHRoaXMucGFyc2VyT3B0aW9ucywKICAgICAgICBoYXNNb3JlRGF0YTogaGFzTW9yZURhdGEKICAgICAgfSk7CgogICAgICBpZiAodGhpcy5wYXJzZXJPcHRpb25zLnN1cHBvcnRzQ29tbWVudHMpIHsKICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVdpdGhDb21tZW50cyhzY2FubmVyKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucGFyc2VXaXRob3V0Q29tbWVudHMoc2Nhbm5lcik7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VXaXRob3V0Q29tbWVudHMiLAogICAgdmFsdWU6IGZ1bmN0
aW9uIHBhcnNlV2l0aG91dENvbW1lbnRzKHNjYW5uZXIpIHsKICAgICAgdmFyIHJvd3MgPSBbXTsKICAgICAgdmFyIHNob3VsZENvbnRpbnVlID0gdHJ1ZTsKCiAgICAgIHdoaWxlIChzaG91bGRDb250aW51ZSkgewogICAgICAgIHNob3VsZENvbnRpbnVlID0gdGhpcy5wYXJzZVJvdyhzY2FubmVyLCByb3dzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICBsaW5lOiBzY2FubmVyLmxpbmUsCiAgICAgICAgcm93czogcm93cwogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlV2l0aENvbW1lbnRzIiwK
ICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZVdpdGhDb21tZW50cyhzY2FubmVyKSB7CiAgICAgIHZhciBwYXJzZXJPcHRpb25zID0gdGhpcy5wYXJzZXJPcHRpb25zOwogICAgICB2YXIgcm93cyA9IFtdOwoKICAgICAgZm9yICh2YXIgbmV4dFRva2VuID0gc2Nhbm5lci5uZXh0Q2hhcmFjdGVyVG9rZW47IG5leHRUb2tlbiAhPT0gbnVsbDsgbmV4dFRva2VuID0gc2Nhbm5lci5uZXh0Q2hhcmFjdGVyVG9rZW4pIHsKICAgICAgICBpZiAoVG9rZW5fMS5Ub2tlbi5pc1Rva2VuQ29tbWVudChuZXh0VG9rZW4sIHBhcnNlck9wdGlvbnMp
KSB7CiAgICAgICAgICB2YXIgY3Vyc29yID0gc2Nhbm5lci5hZHZhbmNlUGFzdExpbmUoKTsKCiAgICAgICAgICBpZiAoY3Vyc29yID09PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgbGluZTogc2Nhbm5lci5saW5lRnJvbUN1cnNvciwKICAgICAgICAgICAgICByb3dzOiByb3dzCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKCFzY2FubmVyLmhhc01vcmVDaGFyYWN0ZXJzKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgbGluZTogc2Nhbm5lci5s
aW5lRnJvbUN1cnNvciwKICAgICAgICAgICAgICByb3dzOiByb3dzCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgc2Nhbm5lci50cnVuY2F0ZVRvQ3Vyc29yKCk7CiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5wYXJzZVJvdyhzY2FubmVyLCByb3dzKSkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGxpbmU6IHNjYW5uZXIubGluZSwKICAgICAgICByb3dzOiByb3dzCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VSb3ciLAog
ICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlUm93KHNjYW5uZXIsIHJvd3MpIHsKICAgICAgdmFyIG5leHRUb2tlbiA9IHNjYW5uZXIubmV4dE5vblNwYWNlVG9rZW47CgogICAgICBpZiAoIW5leHRUb2tlbikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdmFyIHJvdyA9IHRoaXMucm93UGFyc2VyLnBhcnNlKHNjYW5uZXIpOwoKICAgICAgaWYgKHJvdyA9PT0gbnVsbCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMucGFyc2VyT3B0aW9ucy5pZ25vcmVFbXB0eSAmJiBF
TVBUWV9ST1dfUkVHRVhQLnRlc3Qocm93LmpvaW4oJycpKSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByb3dzLnB1c2gocm93KTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJyZW1vdmVCT00iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUJPTShsaW5lKSB7CiAgICAgIC8vIENhdGNoZXMgRUZCQkJGIChVVEYtOCBCT00pIGJlY2F1c2UgdGhlIGJ1ZmZlci10by1zdHJpbmcKICAgICAgLy8gY29udmVyc2lvbiB0cmFuc2xhdGVzIGl0IHRvIEZFRkYgKFVURi0xNiBC
T00pCiAgICAgIGlmIChsaW5lICYmIGxpbmUuY2hhckNvZGVBdCgwKSA9PT0gMHhmZWZmKSB7CiAgICAgICAgcmV0dXJuIGxpbmUuc2xpY2UoMSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBsaW5lOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBhcnNlcjsKfSgpOwoKZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7Cgp9LHsiLi9Sb3dQYXJzZXIiOjE1NCwiLi9TY2FubmVyIjoxNTUsIi4vVG9rZW4iOjE1Nn1dLDE1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jbGFzc0Nh
bGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBm
YWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQ
cm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuUm93UGFyc2VyID0gdm9pZCAwOwoKdmFyIGNvbHVtbl8xID0gcmVxdWlyZSgiLi9jb2x1bW4iKTsKCnZhciBUb2tlbl8xID0gcmVxdWlyZSgiLi9Ub2tlbiIpOwoKdmFyIF9Ub2tlbl8xJFRva2VuID0gVG9rZW5fMS5Ub2tlbiwKICAgIGlzVG9rZW5Sb3dEZWxpbWl0ZXIg
PSBfVG9rZW5fMSRUb2tlbi5pc1Rva2VuUm93RGVsaW1pdGVyLAogICAgaXNUb2tlbkNhcnJpYWdlUmV0dXJuID0gX1Rva2VuXzEkVG9rZW4uaXNUb2tlbkNhcnJpYWdlUmV0dXJuLAogICAgaXNUb2tlbkRlbGltaXRlciA9IF9Ub2tlbl8xJFRva2VuLmlzVG9rZW5EZWxpbWl0ZXI7Cgp2YXIgUm93UGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSb3dQYXJzZXIocGFyc2VyT3B0aW9ucykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvd1BhcnNlcik7CgogICAgdGhpcy5wYXJzZXJPcHRp
b25zID0gcGFyc2VyT3B0aW9uczsKICAgIHRoaXMuY29sdW1uUGFyc2VyID0gbmV3IGNvbHVtbl8xLkNvbHVtblBhcnNlcihwYXJzZXJPcHRpb25zKTsKICB9CgogIF9jcmVhdGVDbGFzcyhSb3dQYXJzZXIsIFt7CiAgICBrZXk6ICJwYXJzZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2Uoc2Nhbm5lcikgewogICAgICB2YXIgcGFyc2VyT3B0aW9ucyA9IHRoaXMucGFyc2VyT3B0aW9uczsKICAgICAgdmFyIGhhc01vcmVEYXRhID0gc2Nhbm5lci5oYXNNb3JlRGF0YTsKICAgICAgdmFyIGN1cnJlbnRTY2FubmVyID0gc2Nhbm5l
cjsKICAgICAgdmFyIGNvbHVtbnMgPSBbXTsKICAgICAgdmFyIGN1cnJlbnRUb2tlbiA9IHRoaXMuZ2V0U3RhcnRUb2tlbihjdXJyZW50U2Nhbm5lciwgY29sdW1ucyk7CgogICAgICB3aGlsZSAoY3VycmVudFRva2VuKSB7CiAgICAgICAgaWYgKGlzVG9rZW5Sb3dEZWxpbWl0ZXIoY3VycmVudFRva2VuKSkgewogICAgICAgICAgY3VycmVudFNjYW5uZXIuYWR2YW5jZVBhc3RUb2tlbihjdXJyZW50VG9rZW4pOyAvLyBpZiBlbmRzIHdpdGggQ1IgYW5kIHRoZXJlIGlzIG1vcmUgZGF0YSwga2VlcCB1bnBhcnNlZCBkdWUgdG8gcG9z
c2libGUKICAgICAgICAgIC8vIGNvbWluZyBMRiBpbiBDUkxGCgogICAgICAgICAgaWYgKCFjdXJyZW50U2Nhbm5lci5oYXNNb3JlQ2hhcmFjdGVycyAmJiBpc1Rva2VuQ2FycmlhZ2VSZXR1cm4oY3VycmVudFRva2VuLCBwYXJzZXJPcHRpb25zKSAmJiBoYXNNb3JlRGF0YSkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICBjdXJyZW50U2Nhbm5lci50cnVuY2F0ZVRvQ3Vyc29yKCk7CiAgICAgICAgICByZXR1cm4gY29sdW1uczsKICAgICAgICB9CgogICAgICAgIGlmICghdGhpcy5zaG91
bGRTa2lwQ29sdW1uUGFyc2UoY3VycmVudFNjYW5uZXIsIGN1cnJlbnRUb2tlbiwgY29sdW1ucykpIHsKICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5jb2x1bW5QYXJzZXIucGFyc2UoY3VycmVudFNjYW5uZXIpOwoKICAgICAgICAgIGlmIChpdGVtID09PSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbHVtbnMucHVzaChpdGVtKTsKICAgICAgICB9CgogICAgICAgIGN1cnJlbnRUb2tlbiA9IGN1cnJlbnRTY2FubmVyLm5leHROb25TcGFjZVRva2VuOwogICAgICB9Cgog
ICAgICBpZiAoIWhhc01vcmVEYXRhKSB7CiAgICAgICAgY3VycmVudFNjYW5uZXIudHJ1bmNhdGVUb0N1cnNvcigpOwogICAgICAgIHJldHVybiBjb2x1bW5zOwogICAgICB9CgogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRTdGFydFRva2VuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdGFydFRva2VuKHNjYW5uZXIsIGNvbHVtbnMpIHsKICAgICAgdmFyIGN1cnJlbnRUb2tlbiA9IHNjYW5uZXIubmV4dE5vblNwYWNlVG9rZW47CgogICAgICBpZiAoY3VycmVudFRva2VuICE9PSBudWxsICYm
IGlzVG9rZW5EZWxpbWl0ZXIoY3VycmVudFRva2VuLCB0aGlzLnBhcnNlck9wdGlvbnMpKSB7CiAgICAgICAgY29sdW1ucy5wdXNoKCcnKTsKICAgICAgICByZXR1cm4gc2Nhbm5lci5uZXh0Tm9uU3BhY2VUb2tlbjsKICAgICAgfQoKICAgICAgcmV0dXJuIGN1cnJlbnRUb2tlbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzaG91bGRTa2lwQ29sdW1uUGFyc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFNraXBDb2x1bW5QYXJzZShzY2FubmVyLCBjdXJyZW50VG9rZW4sIGNvbHVtbnMpIHsKICAgICAgdmFyIHBhcnNlck9w
dGlvbnMgPSB0aGlzLnBhcnNlck9wdGlvbnM7CgogICAgICBpZiAoaXNUb2tlbkRlbGltaXRlcihjdXJyZW50VG9rZW4sIHBhcnNlck9wdGlvbnMpKSB7CiAgICAgICAgc2Nhbm5lci5hZHZhbmNlUGFzdFRva2VuKGN1cnJlbnRUb2tlbik7IC8vIGlmIHRoZSBkZWxpbWl0ZXIgaXMgYXQgdGhlIGVuZCBvZiBhIGxpbmUKCiAgICAgICAgdmFyIG5leHRUb2tlbiA9IHNjYW5uZXIubmV4dENoYXJhY3RlclRva2VuOwoKICAgICAgICBpZiAoIXNjYW5uZXIuaGFzTW9yZUNoYXJhY3RlcnMgfHwgbmV4dFRva2VuICE9PSBudWxsICYmIGlz
VG9rZW5Sb3dEZWxpbWl0ZXIobmV4dFRva2VuKSkgewogICAgICAgICAgY29sdW1ucy5wdXNoKCcnKTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKG5leHRUb2tlbiAhPT0gbnVsbCAmJiBpc1Rva2VuRGVsaW1pdGVyKG5leHRUb2tlbiwgcGFyc2VyT3B0aW9ucykpIHsKICAgICAgICAgIGNvbHVtbnMucHVzaCgnJyk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBSb3dQYXJzZXI7Cn0o
KTsKCmV4cG9ydHMuUm93UGFyc2VyID0gUm93UGFyc2VyOwoKfSx7Ii4vVG9rZW4iOjE1NiwiLi9jb2x1bW4iOjE2MX1dLDE1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3Bl
cnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1
bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuU2Nhbm5lciA9IHZv
aWQgMDsKCnZhciBUb2tlbl8xID0gcmVxdWlyZSgiLi9Ub2tlbiIpOwoKdmFyIFJPV19ERUxJTUlURVIgPSAvKCg/OlxyXG4pfFxufFxyKS87Cgp2YXIgU2Nhbm5lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gU2Nhbm5lcihhcmdzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2Nhbm5lcik7CgogICAgdGhpcy5jdXJzb3IgPSAwOwogICAgdGhpcy5saW5lID0gYXJncy5saW5lOwogICAgdGhpcy5saW5lTGVuZ3RoID0gdGhpcy5saW5lLmxlbmd0aDsKICAgIHRoaXMucGFyc2VyT3B0aW9ucyA9
IGFyZ3MucGFyc2VyT3B0aW9uczsKICAgIHRoaXMuaGFzTW9yZURhdGEgPSBhcmdzLmhhc01vcmVEYXRhOwogICAgdGhpcy5jdXJzb3IgPSBhcmdzLmN1cnNvciB8fCAwOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNjYW5uZXIsIFt7CiAgICBrZXk6ICJhZHZhbmNlUGFzdExpbmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkdmFuY2VQYXN0TGluZSgpIHsKICAgICAgdmFyIG1hdGNoID0gUk9XX0RFTElNSVRFUi5leGVjKHRoaXMubGluZUZyb21DdXJzb3IpOwoKICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgIGlmICh0aGlzLmhhc01v
cmVEYXRhKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy5saW5lTGVuZ3RoOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CgogICAgICB0aGlzLmN1cnNvciArPSAobWF0Y2guaW5kZXggfHwgMCkgKyBtYXRjaFswXS5sZW5ndGg7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH0sIHsKICAgIGtleTogImFkdmFuY2VUbyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWR2YW5jZVRvKGN1cnNvcikgewogICAgICB0aGlzLmN1cnNvciA9IGN1cnNvcjsKICAgICAg
cmV0dXJuIHRoaXM7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWR2YW5jZVRvVG9rZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkdmFuY2VUb1Rva2VuKHRva2VuKSB7CiAgICAgIHRoaXMuY3Vyc29yID0gdG9rZW4uc3RhcnRDdXJzb3I7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH0sIHsKICAgIGtleTogImFkdmFuY2VQYXN0VG9rZW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkdmFuY2VQYXN0VG9rZW4odG9rZW4pIHsKICAgICAgdGhpcy5jdXJzb3IgPSB0b2tlbi5lbmRDdXJzb3IgKyAxOwogICAgICByZXR1cm4gdGhp
czsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0cnVuY2F0ZVRvQ3Vyc29yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0cnVuY2F0ZVRvQ3Vyc29yKCkgewogICAgICB0aGlzLmxpbmUgPSB0aGlzLmxpbmVGcm9tQ3Vyc29yOwogICAgICB0aGlzLmxpbmVMZW5ndGggPSB0aGlzLmxpbmUubGVuZ3RoOwogICAgICB0aGlzLmN1cnNvciA9IDA7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH0sIHsKICAgIGtleTogImhhc01vcmVDaGFyYWN0ZXJzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5saW5l
TGVuZ3RoID4gdGhpcy5jdXJzb3I7CiAgICB9CiAgfSwgewogICAga2V5OiAibmV4dE5vblNwYWNlVG9rZW4iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBsaW5lRnJvbUN1cnNvciA9IHRoaXMubGluZUZyb21DdXJzb3I7CiAgICAgIHZhciByZWdleCA9IHRoaXMucGFyc2VyT3B0aW9ucy5ORVhUX1RPS0VOX1JFR0VYUDsKCiAgICAgIGlmIChsaW5lRnJvbUN1cnNvci5zZWFyY2gocmVnZXgpID09PSAtMSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgbWF0Y2ggPSByZWdleC5l
eGVjKGxpbmVGcm9tQ3Vyc29yKTsKCiAgICAgIGlmIChtYXRjaCA9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciB0b2tlbiA9IG1hdGNoWzFdOwogICAgICB2YXIgc3RhcnRDdXJzb3IgPSB0aGlzLmN1cnNvciArIChtYXRjaC5pbmRleCB8fCAwKTsKICAgICAgcmV0dXJuIG5ldyBUb2tlbl8xLlRva2VuKHsKICAgICAgICB0b2tlbjogdG9rZW4sCiAgICAgICAgc3RhcnRDdXJzb3I6IHN0YXJ0Q3Vyc29yLAogICAgICAgIGVuZEN1cnNvcjogc3RhcnRDdXJzb3IgKyB0b2tlbi5sZW5ndGgg
LSAxCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIm5leHRDaGFyYWN0ZXJUb2tlbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIGN1cnNvciA9IHRoaXMuY3Vyc29yLAogICAgICAgICAgbGluZUxlbmd0aCA9IHRoaXMubGluZUxlbmd0aDsKCiAgICAgIGlmIChsaW5lTGVuZ3RoIDw9IGN1cnNvcikgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICByZXR1cm4gbmV3IFRva2VuXzEuVG9rZW4oewogICAgICAgIHRva2VuOiB0aGlzLmxpbmVbY3Vyc29yXSwKICAgICAgICBzdGFy
dEN1cnNvcjogY3Vyc29yLAogICAgICAgIGVuZEN1cnNvcjogY3Vyc29yCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImxpbmVGcm9tQ3Vyc29yIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5saW5lLnN1YnN0cih0aGlzLmN1cnNvcik7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2Nhbm5lcjsKfSgpOwoKZXhwb3J0cy5TY2FubmVyID0gU2Nhbm5lcjsKCn0seyIuL1Rva2VuIjoxNTZ9XSwxNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7
CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlw
dG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3Rv
UHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRva2VuID0gdm9pZCAwOwoKdmFyIFRva2VuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBUb2tlbih0b2tlbkFyZ3MpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb2tlbik7CgogICAgdGhpcy50b2tl
biA9IHRva2VuQXJncy50b2tlbjsKICAgIHRoaXMuc3RhcnRDdXJzb3IgPSB0b2tlbkFyZ3Muc3RhcnRDdXJzb3I7CiAgICB0aGlzLmVuZEN1cnNvciA9IHRva2VuQXJncy5lbmRDdXJzb3I7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVG9rZW4sIG51bGwsIFt7CiAgICBrZXk6ICJpc1Rva2VuUm93RGVsaW1pdGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1Rva2VuUm93RGVsaW1pdGVyKHRva2VuKSB7CiAgICAgIHZhciBjb250ZW50ID0gdG9rZW4udG9rZW47CiAgICAgIHJldHVybiBjb250ZW50ID09PSAnXHInIHx8IGNvbnRlbnQg
PT09ICdcbicgfHwgY29udGVudCA9PT0gJ1xyXG4nOwogICAgfQogIH0sIHsKICAgIGtleTogImlzVG9rZW5DYXJyaWFnZVJldHVybiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNUb2tlbkNhcnJpYWdlUmV0dXJuKHRva2VuLCBwYXJzZXJPcHRpb25zKSB7CiAgICAgIHJldHVybiB0b2tlbi50b2tlbiA9PT0gcGFyc2VyT3B0aW9ucy5jYXJyaWFnZVJldHVybjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1Rva2VuQ29tbWVudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNUb2tlbkNvbW1lbnQodG9rZW4sIHBhcnNlck9wdGlvbnMp
IHsKICAgICAgcmV0dXJuIHBhcnNlck9wdGlvbnMuc3VwcG9ydHNDb21tZW50cyAmJiAhIXRva2VuICYmIHRva2VuLnRva2VuID09PSBwYXJzZXJPcHRpb25zLmNvbW1lbnQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNUb2tlbkVzY2FwZUNoYXJhY3RlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNUb2tlbkVzY2FwZUNoYXJhY3Rlcih0b2tlbiwgcGFyc2VyT3B0aW9ucykgewogICAgICByZXR1cm4gdG9rZW4udG9rZW4gPT09IHBhcnNlck9wdGlvbnMuZXNjYXBlQ2hhcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1Rva2Vu
UXVvdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzVG9rZW5RdW90ZSh0b2tlbiwgcGFyc2VyT3B0aW9ucykgewogICAgICByZXR1cm4gdG9rZW4udG9rZW4gPT09IHBhcnNlck9wdGlvbnMucXVvdGU7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNUb2tlbkRlbGltaXRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNUb2tlbkRlbGltaXRlcih0b2tlbiwgcGFyc2VyT3B0aW9ucykgewogICAgICByZXR1cm4gdG9rZW4udG9rZW4gPT09IHBhcnNlck9wdGlvbnMuZGVsaW1pdGVyOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFRva2Vu
Owp9KCk7CgpleHBvcnRzLlRva2VuID0gVG9rZW47Cgp9LHt9XSwxNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1
ZTogdHJ1ZQp9KTsKZXhwb3J0cy5Db2x1bW5Gb3JtYXR0ZXIgPSB2b2lkIDA7Cgp2YXIgQ29sdW1uRm9ybWF0dGVyID0gZnVuY3Rpb24gQ29sdW1uRm9ybWF0dGVyKHBhcnNlck9wdGlvbnMpIHsKICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sdW1uRm9ybWF0dGVyKTsKCiAgaWYgKHBhcnNlck9wdGlvbnMudHJpbSkgewogICAgdGhpcy5mb3JtYXQgPSBmdW5jdGlvbiAoY29sKSB7CiAgICAgIHJldHVybiBjb2wudHJpbSgpOwogICAgfTsKICB9IGVsc2UgaWYgKHBhcnNlck9wdGlvbnMubHRyaW0pIHsKICAgIHRoaXMuZm9ybWF0
ID0gZnVuY3Rpb24gKGNvbCkgewogICAgICByZXR1cm4gY29sLnRyaW1MZWZ0KCk7CiAgICB9OwogIH0gZWxzZSBpZiAocGFyc2VyT3B0aW9ucy5ydHJpbSkgewogICAgdGhpcy5mb3JtYXQgPSBmdW5jdGlvbiAoY29sKSB7CiAgICAgIHJldHVybiBjb2wudHJpbVJpZ2h0KCk7CiAgICB9OwogIH0gZWxzZSB7CiAgICB0aGlzLmZvcm1hdCA9IGZ1bmN0aW9uIChjb2wpIHsKICAgICAgcmV0dXJuIGNvbDsKICAgIH07CiAgfQp9OwoKZXhwb3J0cy5Db2x1bW5Gb3JtYXR0ZXIgPSBDb2x1bW5Gb3JtYXR0ZXI7Cgp9LHt9XSwxNTg6W2Z1
bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRv
ciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBf
ZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkNvbHVtblBhcnNlciA9IHZvaWQgMDsKCnZhciBOb25RdW90ZWRDb2x1bW5QYXJzZXJfMSA9IHJlcXVpcmUoIi4vTm9uUXVvdGVkQ29sdW1uUGFyc2VyIik7
Cgp2YXIgUXVvdGVkQ29sdW1uUGFyc2VyXzEgPSByZXF1aXJlKCIuL1F1b3RlZENvbHVtblBhcnNlciIpOwoKdmFyIFRva2VuXzEgPSByZXF1aXJlKCIuLi9Ub2tlbiIpOwoKdmFyIENvbHVtblBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQ29sdW1uUGFyc2VyKHBhcnNlck9wdGlvbnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2x1bW5QYXJzZXIpOwoKICAgIHRoaXMucGFyc2VyT3B0aW9ucyA9IHBhcnNlck9wdGlvbnM7CiAgICB0aGlzLnF1b3RlZENvbHVtblBhcnNlciA9IG5l
dyBRdW90ZWRDb2x1bW5QYXJzZXJfMS5RdW90ZWRDb2x1bW5QYXJzZXIocGFyc2VyT3B0aW9ucyk7CiAgICB0aGlzLm5vblF1b3RlZENvbHVtblBhcnNlciA9IG5ldyBOb25RdW90ZWRDb2x1bW5QYXJzZXJfMS5Ob25RdW90ZWRDb2x1bW5QYXJzZXIocGFyc2VyT3B0aW9ucyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ29sdW1uUGFyc2VyLCBbewogICAga2V5OiAicGFyc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKHNjYW5uZXIpIHsKICAgICAgdmFyIG5leHROb25TcGFjZVRva2VuID0gc2Nhbm5lci5uZXh0Tm9uU3BhY2VU
b2tlbjsKCiAgICAgIGlmIChuZXh0Tm9uU3BhY2VUb2tlbiAhPT0gbnVsbCAmJiBUb2tlbl8xLlRva2VuLmlzVG9rZW5RdW90ZShuZXh0Tm9uU3BhY2VUb2tlbiwgdGhpcy5wYXJzZXJPcHRpb25zKSkgewogICAgICAgIHNjYW5uZXIuYWR2YW5jZVRvVG9rZW4obmV4dE5vblNwYWNlVG9rZW4pOwogICAgICAgIHJldHVybiB0aGlzLnF1b3RlZENvbHVtblBhcnNlci5wYXJzZShzY2FubmVyKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMubm9uUXVvdGVkQ29sdW1uUGFyc2VyLnBhcnNlKHNjYW5uZXIpOwogICAgfQogIH1dKTsK
CiAgcmV0dXJuIENvbHVtblBhcnNlcjsKfSgpOwoKZXhwb3J0cy5Db2x1bW5QYXJzZXIgPSBDb2x1bW5QYXJzZXI7Cgp9LHsiLi4vVG9rZW4iOjE1NiwiLi9Ob25RdW90ZWRDb2x1bW5QYXJzZXIiOjE1OSwiLi9RdW90ZWRDb2x1bW5QYXJzZXIiOjE2MH1dLDE1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3
IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxl
ID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpPYmplY3QuZGVm
aW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuTm9uUXVvdGVkQ29sdW1uUGFyc2VyID0gdm9pZCAwOwoKdmFyIENvbHVtbkZvcm1hdHRlcl8xID0gcmVxdWlyZSgiLi9Db2x1bW5Gb3JtYXR0ZXIiKTsKCnZhciBUb2tlbl8xID0gcmVxdWlyZSgiLi4vVG9rZW4iKTsKCnZhciBfVG9rZW5fMSRUb2tlbiA9IFRva2VuXzEuVG9rZW4sCiAgICBpc1Rva2VuRGVsaW1pdGVyID0gX1Rva2VuXzEkVG9rZW4uaXNUb2tlbkRlbGltaXRlciwKICAgIGlzVG9rZW5Sb3dEZWxpbWl0
ZXIgPSBfVG9rZW5fMSRUb2tlbi5pc1Rva2VuUm93RGVsaW1pdGVyOwoKdmFyIE5vblF1b3RlZENvbHVtblBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTm9uUXVvdGVkQ29sdW1uUGFyc2VyKHBhcnNlck9wdGlvbnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb25RdW90ZWRDb2x1bW5QYXJzZXIpOwoKICAgIHRoaXMucGFyc2VyT3B0aW9ucyA9IHBhcnNlck9wdGlvbnM7CiAgICB0aGlzLmNvbHVtbkZvcm1hdHRlciA9IG5ldyBDb2x1bW5Gb3JtYXR0ZXJfMS5Db2x1bW5Gb3JtYXR0
ZXIocGFyc2VyT3B0aW9ucyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoTm9uUXVvdGVkQ29sdW1uUGFyc2VyLCBbewogICAga2V5OiAicGFyc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKHNjYW5uZXIpIHsKICAgICAgaWYgKCFzY2FubmVyLmhhc01vcmVDaGFyYWN0ZXJzKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBwYXJzZXJPcHRpb25zID0gdGhpcy5wYXJzZXJPcHRpb25zOwogICAgICB2YXIgY2hhcmFjdGVycyA9IFtdOwogICAgICB2YXIgbmV4dFRva2VuID0gc2Nhbm5lci5uZXh0Q2hh
cmFjdGVyVG9rZW47CgogICAgICBmb3IgKDsgbmV4dFRva2VuOyBuZXh0VG9rZW4gPSBzY2FubmVyLm5leHRDaGFyYWN0ZXJUb2tlbikgewogICAgICAgIGlmIChpc1Rva2VuRGVsaW1pdGVyKG5leHRUb2tlbiwgcGFyc2VyT3B0aW9ucykgfHwgaXNUb2tlblJvd0RlbGltaXRlcihuZXh0VG9rZW4pKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGNoYXJhY3RlcnMucHVzaChuZXh0VG9rZW4udG9rZW4pOwogICAgICAgIHNjYW5uZXIuYWR2YW5jZVBhc3RUb2tlbihuZXh0VG9rZW4pOwogICAgICB9CgogICAg
ICByZXR1cm4gdGhpcy5jb2x1bW5Gb3JtYXR0ZXIuZm9ybWF0KGNoYXJhY3RlcnMuam9pbignJykpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE5vblF1b3RlZENvbHVtblBhcnNlcjsKfSgpOwoKZXhwb3J0cy5Ob25RdW90ZWRDb2x1bW5QYXJzZXIgPSBOb25RdW90ZWRDb2x1bW5QYXJzZXI7Cgp9LHsiLi4vVG9rZW4iOjE1NiwiLi9Db2x1bW5Gb3JtYXR0ZXIiOjE1N31dLDE2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwg
Q29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5j
b25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3Bl
cnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuUXVvdGVkQ29sdW1uUGFyc2VyID0gdm9pZCAwOwoKdmFyIENvbHVtbkZvcm1hdHRlcl8xID0gcmVxdWlyZSgiLi9Db2x1bW5Gb3JtYXR0ZXIiKTsKCnZhciBUb2tlbl8xID0gcmVxdWlyZSgiLi4vVG9rZW4iKTsKCnZhciBfVG9rZW5fMSRUb2tlbiA9IFRva2VuXzEuVG9rZW4sCiAgICBpc1Rva2VuRGVs
aW1pdGVyID0gX1Rva2VuXzEkVG9rZW4uaXNUb2tlbkRlbGltaXRlciwKICAgIGlzVG9rZW5Sb3dEZWxpbWl0ZXIgPSBfVG9rZW5fMSRUb2tlbi5pc1Rva2VuUm93RGVsaW1pdGVyLAogICAgaXNUb2tlbkVzY2FwZUNoYXJhY3RlciA9IF9Ub2tlbl8xJFRva2VuLmlzVG9rZW5Fc2NhcGVDaGFyYWN0ZXIsCiAgICBpc1Rva2VuUXVvdGUgPSBfVG9rZW5fMSRUb2tlbi5pc1Rva2VuUXVvdGU7Cgp2YXIgUXVvdGVkQ29sdW1uUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBRdW90ZWRDb2x1bW5QYXJz
ZXIocGFyc2VyT3B0aW9ucykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFF1b3RlZENvbHVtblBhcnNlcik7CgogICAgdGhpcy5wYXJzZXJPcHRpb25zID0gcGFyc2VyT3B0aW9uczsKICAgIHRoaXMuY29sdW1uRm9ybWF0dGVyID0gbmV3IENvbHVtbkZvcm1hdHRlcl8xLkNvbHVtbkZvcm1hdHRlcihwYXJzZXJPcHRpb25zKTsKICB9CgogIF9jcmVhdGVDbGFzcyhRdW90ZWRDb2x1bW5QYXJzZXIsIFt7CiAgICBrZXk6ICJwYXJzZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2Uoc2Nhbm5lcikgewogICAgICBpZiAoIXNj
YW5uZXIuaGFzTW9yZUNoYXJhY3RlcnMpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgdmFyIG9yaWdpbmFsQ3Vyc29yID0gc2Nhbm5lci5jdXJzb3I7CgogICAgICB2YXIgX3RoaXMkZ2F0aGVyRGF0YUJldHdlID0gdGhpcy5nYXRoZXJEYXRhQmV0d2VlblF1b3RlcyhzY2FubmVyKSwKICAgICAgICAgIGZvdW5kQ2xvc2luZ1F1b3RlID0gX3RoaXMkZ2F0aGVyRGF0YUJldHdlLmZvdW5kQ2xvc2luZ1F1b3RlLAogICAgICAgICAgY29sID0gX3RoaXMkZ2F0aGVyRGF0YUJldHdlLmNvbDsKCiAgICAgIGlmICgh
Zm91bmRDbG9zaW5nUXVvdGUpIHsKICAgICAgICAvLyByZXNldCB0aGUgY3Vyc29yIHRvIHRoZSBvcmlnaW5hbAogICAgICAgIHNjYW5uZXIuYWR2YW5jZVRvKG9yaWdpbmFsQ3Vyc29yKTsgLy8gaWYgd2UgZGlkbnQgZmluZCBhIGNsb3NpbmcgcXVvdGUgYnV0IHdlIHBvdGVudGlhbGx5IGhhdmUgbW9yZSBkYXRhIHRoZW4gc2tpcCB0aGUgcGFyc2luZwogICAgICAgIC8vIGFuZCByZXR1cm4gdGhlIG9yaWdpbmFsIHNjYW5uZXIuCgogICAgICAgIGlmICghc2Nhbm5lci5oYXNNb3JlRGF0YSkgewogICAgICAgICAgdGhyb3cgbmV3
IEVycm9yKCJQYXJzZSBFcnJvcjogbWlzc2luZyBjbG9zaW5nOiAnIi5jb25jYXQodGhpcy5wYXJzZXJPcHRpb25zLnF1b3RlIHx8ICcnLCAiJyBpbiBsaW5lOiBhdCAnIikuY29uY2F0KHNjYW5uZXIubGluZUZyb21DdXJzb3IucmVwbGFjZSgvW1xyXG5dL2csICJcXG4nIiksICInIikpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHRoaXMuY2hlY2tGb3JNYWxmb3JtZWRDb2x1bW4oc2Nhbm5lcik7CiAgICAgIHJldHVybiBjb2w7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2F0aGVyRGF0
YUJldHdlZW5RdW90ZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdhdGhlckRhdGFCZXR3ZWVuUXVvdGVzKHNjYW5uZXIpIHsKICAgICAgdmFyIHBhcnNlck9wdGlvbnMgPSB0aGlzLnBhcnNlck9wdGlvbnM7CiAgICAgIHZhciBmb3VuZFN0YXJ0aW5nUXVvdGUgPSBmYWxzZTsKICAgICAgdmFyIGZvdW5kQ2xvc2luZ1F1b3RlID0gZmFsc2U7CiAgICAgIHZhciBjaGFyYWN0ZXJzID0gW107CiAgICAgIHZhciBuZXh0VG9rZW4gPSBzY2FubmVyLm5leHRDaGFyYWN0ZXJUb2tlbjsKCiAgICAgIGZvciAoOyAhZm91bmRDbG9zaW5nUXVv
dGUgJiYgbmV4dFRva2VuICE9PSBudWxsOyBuZXh0VG9rZW4gPSBzY2FubmVyLm5leHRDaGFyYWN0ZXJUb2tlbikgewogICAgICAgIHZhciBpc1F1b3RlID0gaXNUb2tlblF1b3RlKG5leHRUb2tlbiwgcGFyc2VyT3B0aW9ucyk7IC8vIGlnbm9yZSBmaXJzdCBxdW90ZQoKICAgICAgICBpZiAoIWZvdW5kU3RhcnRpbmdRdW90ZSAmJiBpc1F1b3RlKSB7CiAgICAgICAgICBmb3VuZFN0YXJ0aW5nUXVvdGUgPSB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoZm91bmRTdGFydGluZ1F1b3RlKSB7CiAgICAgICAgICBpZiAoaXNUb2tlbkVz
Y2FwZUNoYXJhY3RlcihuZXh0VG9rZW4sIHBhcnNlck9wdGlvbnMpKSB7CiAgICAgICAgICAgIC8vIGFkdmFuY2UgcGFzdCB0aGUgZXNjYXBlIGNoYXJhY3RlciBzbyB3ZSBjYW4gZ2V0IHRoZSBuZXh0IG9uZSBpbiBsaW5lCiAgICAgICAgICAgIHNjYW5uZXIuYWR2YW5jZVBhc3RUb2tlbihuZXh0VG9rZW4pOwogICAgICAgICAgICB2YXIgdG9rZW5Gb2xsb3dpbmdFc2NhcGUgPSBzY2FubmVyLm5leHRDaGFyYWN0ZXJUb2tlbjsgLy8gaWYgdGhlIGNoYXJhY3RlciBmb2xsb3dpbmcgdGhlIGVzY2FwZSBpcyBhIHF1b3RlIGNoYXJh
Y3RlciB0aGVuIGp1c3QgYWRkCiAgICAgICAgICAgIC8vIHRoZSBxdW90ZSBhbmQgYWR2YW5jZSB0byB0aGF0IGNoYXJhY3RlcgoKICAgICAgICAgICAgaWYgKHRva2VuRm9sbG93aW5nRXNjYXBlICE9PSBudWxsICYmIChpc1Rva2VuUXVvdGUodG9rZW5Gb2xsb3dpbmdFc2NhcGUsIHBhcnNlck9wdGlvbnMpIHx8IGlzVG9rZW5Fc2NhcGVDaGFyYWN0ZXIodG9rZW5Gb2xsb3dpbmdFc2NhcGUsIHBhcnNlck9wdGlvbnMpKSkgewogICAgICAgICAgICAgIGNoYXJhY3RlcnMucHVzaCh0b2tlbkZvbGxvd2luZ0VzY2FwZS50b2tlbik7
CiAgICAgICAgICAgICAgbmV4dFRva2VuID0gdG9rZW5Gb2xsb3dpbmdFc2NhcGU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZSkgewogICAgICAgICAgICAgIC8vIGlmIHRoZSBlc2NhcGUgaXMgYWxzbyBhIHF1b3RlIHRoZW4gd2UgZm91bmQgb3VyIGNsb3NpbmcgcXVvdGUgYW5kIGZpbmlzaCBlYXJseQogICAgICAgICAgICAgIGZvdW5kQ2xvc2luZ1F1b3RlID0gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBvdGhlciB3aXNlIGFkZCB0aGUgZXNjYXBlIHRva2VuIHRvIHRoZSBjaGFy
YWN0ZXJzIHNpbmNlIGl0IHdhc3QgZXNjYXBpbmcgYW55dGhpbmcKICAgICAgICAgICAgICBjaGFyYWN0ZXJzLnB1c2gobmV4dFRva2VuLnRva2VuKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlKSB7CiAgICAgICAgICAgIC8vIHdlIGZvdW5kIG91ciBjbG9zaW5nIHF1b3RlIQogICAgICAgICAgICBmb3VuZENsb3NpbmdRdW90ZSA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBhZGQgdGhlIHRva2VuIHRvIHRoZSBjaGFyYWN0ZXJzCiAgICAgICAgICAgIGNoYXJhY3Rl
cnMucHVzaChuZXh0VG9rZW4udG9rZW4pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgc2Nhbm5lci5hZHZhbmNlUGFzdFRva2VuKG5leHRUb2tlbik7CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgY29sOiB0aGlzLmNvbHVtbkZvcm1hdHRlci5mb3JtYXQoY2hhcmFjdGVycy5qb2luKCcnKSksCiAgICAgICAgZm91bmRDbG9zaW5nUXVvdGU6IGZvdW5kQ2xvc2luZ1F1b3RlCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiY2hlY2tGb3JNYWxmb3JtZWRDb2x1bW4iLAogICAgdmFsdWU6IGZ1bmN0
aW9uIGNoZWNrRm9yTWFsZm9ybWVkQ29sdW1uKHNjYW5uZXIpIHsKICAgICAgdmFyIHBhcnNlck9wdGlvbnMgPSB0aGlzLnBhcnNlck9wdGlvbnM7CiAgICAgIHZhciBuZXh0Tm9uU3BhY2VUb2tlbiA9IHNjYW5uZXIubmV4dE5vblNwYWNlVG9rZW47CgogICAgICBpZiAobmV4dE5vblNwYWNlVG9rZW4pIHsKICAgICAgICB2YXIgaXNOZXh0VG9rZW5BRGVsaW1pdGVyID0gaXNUb2tlbkRlbGltaXRlcihuZXh0Tm9uU3BhY2VUb2tlbiwgcGFyc2VyT3B0aW9ucyk7CiAgICAgICAgdmFyIGlzTmV4dFRva2VuQVJvd0RlbGltaXRlciA9
IGlzVG9rZW5Sb3dEZWxpbWl0ZXIobmV4dE5vblNwYWNlVG9rZW4pOwoKICAgICAgICBpZiAoIShpc05leHRUb2tlbkFEZWxpbWl0ZXIgfHwgaXNOZXh0VG9rZW5BUm93RGVsaW1pdGVyKSkgewogICAgICAgICAgLy8gaWYgdGhlIGZpbmFsIHF1b3RlIHdhcyBOT1QgZm9sbG93ZWQgYnkgYSBjb2x1bW4gKCwpIG9yIHJvdyhcbikgZGVsaW1pdGVyIHRoZW4gaXRzIGEgYmFkIGNvbHVtbgogICAgICAgICAgLy8gdGxkcjogb25seSBwYXJ0IG9mIHRoZSBjb2x1bW4gd2FzIHF1b3RlZAogICAgICAgICAgdmFyIGxpbmVQcmV2aWV3ID0g
c2Nhbm5lci5saW5lRnJvbUN1cnNvci5zdWJzdHIoMCwgMTApLnJlcGxhY2UoL1tcclxuXS9nLCAiXFxuJyIpOwogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJQYXJzZSBFcnJvcjogZXhwZWN0ZWQ6ICciLmNvbmNhdChwYXJzZXJPcHRpb25zLmVzY2FwZWREZWxpbWl0ZXIsICInIE9SIG5ldyBsaW5lIGdvdDogJyIpLmNvbmNhdChuZXh0Tm9uU3BhY2VUb2tlbi50b2tlbiwgIicuIGF0ICciKS5jb25jYXQobGluZVByZXZpZXcpKTsKICAgICAgICB9CgogICAgICAgIHNjYW5uZXIuYWR2YW5jZVRvVG9rZW4obmV4dE5vblNwYWNl
VG9rZW4pOwogICAgICB9IGVsc2UgaWYgKCFzY2FubmVyLmhhc01vcmVEYXRhKSB7CiAgICAgICAgc2Nhbm5lci5hZHZhbmNlUGFzdExpbmUoKTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIFF1b3RlZENvbHVtblBhcnNlcjsKfSgpOwoKZXhwb3J0cy5RdW90ZWRDb2x1bW5QYXJzZXIgPSBRdW90ZWRDb2x1bW5QYXJzZXI7Cgp9LHsiLi4vVG9rZW4iOjE1NiwiLi9Db2x1bW5Gb3JtYXR0ZXIiOjE1N31dLDE2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZp
bmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBDb2x1bW5QYXJzZXJfMSA9IHJlcXVpcmUoIi4vQ29sdW1uUGFyc2VyIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIkNvbHVtblBhcnNlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIENvbHVtblBhcnNlcl8xLkNvbHVtblBhcnNlcjsKICB9Cn0pOwoKdmFyIE5vblF1b3RlZENvbHVtblBhcnNlcl8xID0gcmVxdWlyZSgiLi9Ob25RdW90ZWRDb2x1
bW5QYXJzZXIiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiTm9uUXVvdGVkQ29sdW1uUGFyc2VyIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gTm9uUXVvdGVkQ29sdW1uUGFyc2VyXzEuTm9uUXVvdGVkQ29sdW1uUGFyc2VyOwogIH0KfSk7Cgp2YXIgUXVvdGVkQ29sdW1uUGFyc2VyXzEgPSByZXF1aXJlKCIuL1F1b3RlZENvbHVtblBhcnNlciIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJRdW90ZWRDb2x1bW5QYXJzZXIiLCB7CiAg
ZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBRdW90ZWRDb2x1bW5QYXJzZXJfMS5RdW90ZWRDb2x1bW5QYXJzZXI7CiAgfQp9KTsKCnZhciBDb2x1bW5Gb3JtYXR0ZXJfMSA9IHJlcXVpcmUoIi4vQ29sdW1uRm9ybWF0dGVyIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIkNvbHVtbkZvcm1hdHRlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIENvbHVtbkZvcm1hdHRlcl8xLkNvbHVtbkZvcm1hdHRlcjsK
ICB9Cn0pOwoKfSx7Ii4vQ29sdW1uRm9ybWF0dGVyIjoxNTcsIi4vQ29sdW1uUGFyc2VyIjoxNTgsIi4vTm9uUXVvdGVkQ29sdW1uUGFyc2VyIjoxNTksIi4vUXVvdGVkQ29sdW1uUGFyc2VyIjoxNjB9XSwxNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgUGFyc2VyXzEgPSByZXF1aXJlKCIuL1BhcnNlciIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9y
dHMsICJQYXJzZXIiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBQYXJzZXJfMS5QYXJzZXI7CiAgfQp9KTsKCnZhciBSb3dQYXJzZXJfMSA9IHJlcXVpcmUoIi4vUm93UGFyc2VyIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlJvd1BhcnNlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIFJvd1BhcnNlcl8xLlJvd1BhcnNlcjsKICB9Cn0pOwoKdmFyIFNjYW5uZXJfMSA9IHJlcXVpcmUoIi4v
U2Nhbm5lciIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJTY2FubmVyIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gU2Nhbm5lcl8xLlNjYW5uZXI7CiAgfQp9KTsKCnZhciBUb2tlbl8xID0gcmVxdWlyZSgiLi9Ub2tlbiIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJUb2tlbiIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIFRva2VuXzEuVG9rZW47CiAgfQp9KTsKCnZhciBj
b2x1bW5fMSA9IHJlcXVpcmUoIi4vY29sdW1uIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIkNvbHVtblBhcnNlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIGNvbHVtbl8xLkNvbHVtblBhcnNlcjsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIk5vblF1b3RlZENvbHVtblBhcnNlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIGNvbHVtbl8xLk5vblF1b3RlZENv
bHVtblBhcnNlcjsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlF1b3RlZENvbHVtblBhcnNlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIGNvbHVtbl8xLlF1b3RlZENvbHVtblBhcnNlcjsKICB9Cn0pOwoKfSx7Ii4vUGFyc2VyIjoxNTMsIi4vUm93UGFyc2VyIjoxNTQsIi4vU2Nhbm5lciI6MTU1LCIuL1Rva2VuIjoxNTYsIi4vY29sdW1uIjoxNjF9XSwxNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmlj
dCI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNj
cmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHBy
b3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIF9faW1wb3J0RGVmYXVsdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX2ltcG9ydERlZmF1bHQgfHwgZnVuY3Rpb24gKG1vZCkgewogIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7CiAgICAiZGVmYXVsdCI6IG1vZAogIH07Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRy
dWUKfSk7CmV4cG9ydHMuSGVhZGVyVHJhbnNmb3JtZXIgPSB2b2lkIDA7Cgp2YXIgbG9kYXNoX2lzdW5kZWZpbmVkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZSgibG9kYXNoLmlzdW5kZWZpbmVkIikpOwoKdmFyIGxvZGFzaF9pc2Z1bmN0aW9uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZSgibG9kYXNoLmlzZnVuY3Rpb24iKSk7Cgp2YXIgbG9kYXNoX3VuaXFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJsb2Rhc2gudW5pcSIpKTsKCnZhciBsb2Rhc2hfZ3JvdXBieV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVp
cmUoImxvZGFzaC5ncm91cGJ5IikpOwoKdmFyIEhlYWRlclRyYW5zZm9ybWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBIZWFkZXJUcmFuc2Zvcm1lcihwYXJzZXJPcHRpb25zKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVhZGVyVHJhbnNmb3JtZXIpOwoKICAgIHRoaXMuaGVhZGVycyA9IG51bGw7CiAgICB0aGlzLnJlY2VpdmVkSGVhZGVycyA9IGZhbHNlOwogICAgdGhpcy5zaG91bGRVc2VGaXJzdFJvdyA9IGZhbHNlOwogICAgdGhpcy5wcm9jZXNzZWRGaXJzdFJvdyA9IGZhbHNlOwog
ICAgdGhpcy5oZWFkZXJzTGVuZ3RoID0gMDsKICAgIHRoaXMucGFyc2VyT3B0aW9ucyA9IHBhcnNlck9wdGlvbnM7CgogICAgaWYgKHBhcnNlck9wdGlvbnMuaGVhZGVycyA9PT0gdHJ1ZSkgewogICAgICB0aGlzLnNob3VsZFVzZUZpcnN0Um93ID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwYXJzZXJPcHRpb25zLmhlYWRlcnMpKSB7CiAgICAgIHRoaXMuc2V0SGVhZGVycyhwYXJzZXJPcHRpb25zLmhlYWRlcnMpOwogICAgfSBlbHNlIGlmIChsb2Rhc2hfaXNmdW5jdGlvbl8xLmRlZmF1bHQocGFyc2VyT3B0
aW9ucy5oZWFkZXJzKSkgewogICAgICB0aGlzLmhlYWRlcnNUcmFuc2Zvcm0gPSBwYXJzZXJPcHRpb25zLmhlYWRlcnM7CiAgICB9CiAgfQoKICBfY3JlYXRlQ2xhc3MoSGVhZGVyVHJhbnNmb3JtZXIsIFt7CiAgICBrZXk6ICJ0cmFuc2Zvcm0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybShyb3csIGNiKSB7CiAgICAgIGlmICghdGhpcy5zaG91bGRNYXBSb3cocm93KSkgewogICAgICAgIHJldHVybiBjYihudWxsLCB7CiAgICAgICAgICByb3c6IG51bGwsCiAgICAgICAgICBpc1ZhbGlkOiB0cnVlCiAgICAgICAgfSk7
CiAgICAgIH0KCiAgICAgIHJldHVybiBjYihudWxsLCB0aGlzLnByb2Nlc3NSb3cocm93KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvdWxkTWFwUm93IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRNYXBSb3cocm93KSB7CiAgICAgIHZhciBwYXJzZXJPcHRpb25zID0gdGhpcy5wYXJzZXJPcHRpb25zOwoKICAgICAgaWYgKCF0aGlzLmhlYWRlcnNUcmFuc2Zvcm0gJiYgcGFyc2VyT3B0aW9ucy5yZW5hbWVIZWFkZXJzICYmICF0aGlzLnByb2Nlc3NlZEZpcnN0Um93KSB7CiAgICAgICAgaWYgKCF0aGlzLnJlY2VpdmVk
SGVhZGVycykgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciByZW5hbWluZyBoZWFkZXJzOiBuZXcgaGVhZGVycyBtdXN0IGJlIHByb3ZpZGVkIGluIGFuIGFycmF5Jyk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnByb2Nlc3NlZEZpcnN0Um93ID0gdHJ1ZTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5yZWNlaXZlZEhlYWRlcnMgJiYgQXJyYXkuaXNBcnJheShyb3cpKSB7CiAgICAgICAgaWYgKHRoaXMuaGVhZGVyc1RyYW5zZm9ybSkgewogICAgICAgICAgdGhpcy5zZXRI
ZWFkZXJzKHRoaXMuaGVhZGVyc1RyYW5zZm9ybShyb3cpKTsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2hvdWxkVXNlRmlyc3RSb3cpIHsKICAgICAgICAgIHRoaXMuc2V0SGVhZGVycyhyb3cpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBkb250IGRvIGFueXRoaW5nIHdpdGggdGhlIGhlYWRlcnMgaWYgd2UgZGlkbnQgcmVjZWl2ZSBhIHRyYW5zZm9ybSBvciBzaG91bGRudCB1c2UgdGhlIGZpcnN0IHJvdy4KICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAg
ICB9CgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcm9jZXNzUm93IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzUm93KHJvdykgewogICAgICBpZiAoIXRoaXMuaGVhZGVycykgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICByb3c6IHJvdywKICAgICAgICAgIGlzVmFsaWQ6IHRydWUKICAgICAgICB9OwogICAgICB9CgogICAgICB2YXIgcGFyc2VyT3B0aW9ucyA9IHRoaXMucGFyc2VyT3B0aW9uczsKCiAgICAgIGlmICghcGFyc2VyT3B0aW9ucy5kaXNjYXJkVW5tYXBwZWRDb2x1bW5z
ICYmIHJvdy5sZW5ndGggPiB0aGlzLmhlYWRlcnNMZW5ndGgpIHsKICAgICAgICBpZiAoIXBhcnNlck9wdGlvbnMuc3RyaWN0Q29sdW1uSGFuZGxpbmcpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5leHBlY3RlZCBFcnJvcjogY29sdW1uIGhlYWRlciBtaXNtYXRjaCBleHBlY3RlZDogIi5jb25jYXQodGhpcy5oZWFkZXJzTGVuZ3RoLCAiIGNvbHVtbnMgZ290OiAiKS5jb25jYXQocm93Lmxlbmd0aCkpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHJvdzogcm93LAogICAgICAgICAgaXNWYWxp
ZDogZmFsc2UsCiAgICAgICAgICByZWFzb246ICJDb2x1bW4gaGVhZGVyIG1pc21hdGNoIGV4cGVjdGVkOiAiLmNvbmNhdCh0aGlzLmhlYWRlcnNMZW5ndGgsICIgY29sdW1ucyBnb3Q6ICIpLmNvbmNhdChyb3cubGVuZ3RoKQogICAgICAgIH07CiAgICAgIH0KCiAgICAgIGlmIChwYXJzZXJPcHRpb25zLnN0cmljdENvbHVtbkhhbmRsaW5nICYmIHJvdy5sZW5ndGggPCB0aGlzLmhlYWRlcnNMZW5ndGgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgcm93OiByb3csCiAgICAgICAgICBpc1ZhbGlkOiBmYWxzZSwKICAgICAg
ICAgIHJlYXNvbjogIkNvbHVtbiBoZWFkZXIgbWlzbWF0Y2ggZXhwZWN0ZWQ6ICIuY29uY2F0KHRoaXMuaGVhZGVyc0xlbmd0aCwgIiBjb2x1bW5zIGdvdDogIikuY29uY2F0KHJvdy5sZW5ndGgpCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICByb3c6IHRoaXMubWFwSGVhZGVycyhyb3cpLAogICAgICAgIGlzVmFsaWQ6IHRydWUKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtYXBIZWFkZXJzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtYXBIZWFkZXJzKHJvdykgewogICAgICB2YXIgcm93
TWFwID0ge307CiAgICAgIHZhciBoZWFkZXJzID0gdGhpcy5oZWFkZXJzLAogICAgICAgICAgaGVhZGVyc0xlbmd0aCA9IHRoaXMuaGVhZGVyc0xlbmd0aDsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVyc0xlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgdmFyIGhlYWRlciA9IGhlYWRlcnNbaV07CgogICAgICAgIGlmICghbG9kYXNoX2lzdW5kZWZpbmVkXzEuZGVmYXVsdChoZWFkZXIpKSB7CiAgICAgICAgICB2YXIgdmFsID0gcm93W2ldOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3Np
Z24KCiAgICAgICAgICBpZiAobG9kYXNoX2lzdW5kZWZpbmVkXzEuZGVmYXVsdCh2YWwpKSB7CiAgICAgICAgICAgIHJvd01hcFtoZWFkZXJdID0gJyc7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByb3dNYXBbaGVhZGVyXSA9IHZhbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiByb3dNYXA7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0SGVhZGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SGVhZGVycyhoZWFkZXJzKSB7CiAgICAgIHZhciBfYTsKCiAgICAgIHZhciBmaWx0
ZXJlZEhlYWRlcnMgPSBoZWFkZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkgewogICAgICAgIHJldHVybiAhIWg7CiAgICAgIH0pOwoKICAgICAgaWYgKGxvZGFzaF91bmlxXzEuZGVmYXVsdChmaWx0ZXJlZEhlYWRlcnMpLmxlbmd0aCAhPT0gZmlsdGVyZWRIZWFkZXJzLmxlbmd0aCkgewogICAgICAgIHZhciBncm91cGVkID0gbG9kYXNoX2dyb3VwYnlfMS5kZWZhdWx0KGZpbHRlcmVkSGVhZGVycyk7CiAgICAgICAgdmFyIGR1cGxpY2F0ZXMgPSBPYmplY3Qua2V5cyhncm91cGVkKS5maWx0ZXIoZnVuY3Rpb24gKGR1cCkgewogICAg
ICAgICAgcmV0dXJuIGdyb3VwZWRbZHVwXS5sZW5ndGggPiAxOwogICAgICAgIH0pOwogICAgICAgIHRocm93IG5ldyBFcnJvcigiRHVwbGljYXRlIGhlYWRlcnMgZm91bmQgIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZHVwbGljYXRlcykpKTsKICAgICAgfQoKICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVyczsKICAgICAgdGhpcy5yZWNlaXZlZEhlYWRlcnMgPSB0cnVlOwogICAgICB0aGlzLmhlYWRlcnNMZW5ndGggPSAoKF9hID0gdGhpcy5oZWFkZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eu
bGVuZ3RoKSB8fCAwOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEhlYWRlclRyYW5zZm9ybWVyOwp9KCk7CgpleHBvcnRzLkhlYWRlclRyYW5zZm9ybWVyID0gSGVhZGVyVHJhbnNmb3JtZXI7Cgp9LHsibG9kYXNoLmdyb3VwYnkiOjMxOCwibG9kYXNoLmlzZnVuY3Rpb24iOjMyMSwibG9kYXNoLmlzdW5kZWZpbmVkIjozMjMsImxvZGFzaC51bmlxIjozMjR9XSwxNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVj
dG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJh
YmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENv
bnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIF9faW1wb3J0RGVmYXVsdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX2ltcG9ydERlZmF1bHQgfHwgZnVuY3Rpb24gKG1vZCkgewogIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7CiAgICAiZGVmYXVsdCI6IG1vZAogIH07Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuUm93VHJhbnNmb3JtZXJWYWxpZGF0b3IgPSB2b2lkIDA7
Cgp2YXIgbG9kYXNoX2lzZnVuY3Rpb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJsb2Rhc2guaXNmdW5jdGlvbiIpKTsKCnZhciB0eXBlc18xID0gcmVxdWlyZSgiLi4vdHlwZXMiKTsKCnZhciBSb3dUcmFuc2Zvcm1lclZhbGlkYXRvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUm93VHJhbnNmb3JtZXJWYWxpZGF0b3IoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm93VHJhbnNmb3JtZXJWYWxpZGF0b3IpOwoKICAgIHRoaXMuX3Jvd1RyYW5zZm9ybSA9IG51bGw7CiAgICB0aGlz
Ll9yb3dWYWxpZGF0b3IgPSBudWxsOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFJvd1RyYW5zZm9ybWVyVmFsaWRhdG9yLCBbewogICAga2V5OiAidHJhbnNmb3JtQW5kVmFsaWRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybUFuZFZhbGlkYXRlKHJvdywgY2IpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiB0aGlzLmNhbGxUcmFuc2Zvcm1lcihyb3csIGZ1bmN0aW9uICh0cmFuc2Zvcm1FcnIsIHRyYW5zZm9ybWVkUm93KSB7CiAgICAgICAgaWYgKHRyYW5zZm9ybUVycikgewogICAgICAgICAg
cmV0dXJuIGNiKHRyYW5zZm9ybUVycik7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXRyYW5zZm9ybWVkUm93KSB7CiAgICAgICAgICByZXR1cm4gY2IobnVsbCwgewogICAgICAgICAgICByb3c6IG51bGwsCiAgICAgICAgICAgIGlzVmFsaWQ6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF90aGlzLmNhbGxWYWxpZGF0b3IodHJhbnNmb3JtZWRSb3csIGZ1bmN0aW9uICh2YWxpZGF0ZUVyciwgdmFsaWRhdGlvblJlc3VsdCkgewogICAgICAgICAgaWYgKHZhbGlkYXRlRXJyKSB7CiAgICAgICAg
ICAgIHJldHVybiBjYih2YWxpZGF0ZUVycik7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHZhbGlkYXRpb25SZXN1bHQgJiYgIXZhbGlkYXRpb25SZXN1bHQuaXNWYWxpZCkgewogICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgewogICAgICAgICAgICAgIHJvdzogdHJhbnNmb3JtZWRSb3csCiAgICAgICAgICAgICAgaXNWYWxpZDogZmFsc2UsCiAgICAgICAgICAgICAgcmVhc29uOiB2YWxpZGF0aW9uUmVzdWx0LnJlYXNvbgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2IobnVsbCwg
ewogICAgICAgICAgICByb3c6IHRyYW5zZm9ybWVkUm93LAogICAgICAgICAgICBpc1ZhbGlkOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2FsbFRyYW5zZm9ybWVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxsVHJhbnNmb3JtZXIocm93LCBjYikgewogICAgICBpZiAoIXRoaXMuX3Jvd1RyYW5zZm9ybSkgewogICAgICAgIHJldHVybiBjYihudWxsLCByb3cpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5fcm93VHJhbnNmb3JtKHJvdywgY2IpOwog
ICAgfQogIH0sIHsKICAgIGtleTogImNhbGxWYWxpZGF0b3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGxWYWxpZGF0b3Iocm93LCBjYikgewogICAgICBpZiAoIXRoaXMuX3Jvd1ZhbGlkYXRvcikgewogICAgICAgIHJldHVybiBjYihudWxsLCB7CiAgICAgICAgICByb3c6IHJvdywKICAgICAgICAgIGlzVmFsaWQ6IHRydWUKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuX3Jvd1ZhbGlkYXRvcihyb3csIGNiKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyb3dUcmFuc2Zvcm0iLAogICAgc2V0OiBmdW5j
dGlvbiBzZXQodHJhbnNmb3JtRnVuY3Rpb24pIHsKICAgICAgaWYgKCFsb2Rhc2hfaXNmdW5jdGlvbl8xLmRlZmF1bHQodHJhbnNmb3JtRnVuY3Rpb24pKSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHRyYW5zZm9ybSBzaG91bGQgYmUgYSBmdW5jdGlvbicpOwogICAgICB9CgogICAgICB0aGlzLl9yb3dUcmFuc2Zvcm0gPSBSb3dUcmFuc2Zvcm1lclZhbGlkYXRvci5jcmVhdGVUcmFuc2Zvcm0odHJhbnNmb3JtRnVuY3Rpb24pOwogICAgfQogIH0sIHsKICAgIGtleTogInJvd1ZhbGlkYXRvciIsCiAgICBzZXQ6
IGZ1bmN0aW9uIHNldCh2YWxpZGF0ZUZ1bmN0aW9uKSB7CiAgICAgIGlmICghbG9kYXNoX2lzZnVuY3Rpb25fMS5kZWZhdWx0KHZhbGlkYXRlRnVuY3Rpb24pKSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbGlkYXRlIHNob3VsZCBiZSBhIGZ1bmN0aW9uJyk7CiAgICAgIH0KCiAgICAgIHRoaXMuX3Jvd1ZhbGlkYXRvciA9IFJvd1RyYW5zZm9ybWVyVmFsaWRhdG9yLmNyZWF0ZVZhbGlkYXRvcih2YWxpZGF0ZUZ1bmN0aW9uKTsKICAgIH0KICB9XSwgW3sKICAgIGtleTogImNyZWF0ZVRyYW5zZm9ybSIsCiAg
ICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtKHRyYW5zZm9ybUZ1bmN0aW9uKSB7CiAgICAgIGlmICh0eXBlc18xLmlzU3luY1RyYW5zZm9ybSh0cmFuc2Zvcm1GdW5jdGlvbikpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHJvdywgY2IpIHsKICAgICAgICAgIHZhciB0cmFuc2Zvcm1lZCA9IG51bGw7CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1GdW5jdGlvbihyb3cpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gY2IoZSk7CiAg
ICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHRyYW5zZm9ybWVkKTsKICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4gdHJhbnNmb3JtRnVuY3Rpb247CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlVmFsaWRhdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVWYWxpZGF0b3IodmFsaWRhdGVGdW5jdGlvbikgewogICAgICBpZiAodHlwZXNfMS5pc1N5bmNWYWxpZGF0ZSh2YWxpZGF0ZUZ1bmN0aW9uKSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAocm93LCBjYikgewogICAgICAgICAg
Y2IobnVsbCwgewogICAgICAgICAgICByb3c6IHJvdywKICAgICAgICAgICAgaXNWYWxpZDogdmFsaWRhdGVGdW5jdGlvbihyb3cpCiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4gZnVuY3Rpb24gKHJvdywgY2IpIHsKICAgICAgICB2YWxpZGF0ZUZ1bmN0aW9uKHJvdywgZnVuY3Rpb24gKGVyciwgaXNWYWxpZCwgcmVhc29uKSB7CiAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChpc1ZhbGlkKSB7CiAgICAg
ICAgICAgIHJldHVybiBjYihudWxsLCB7CiAgICAgICAgICAgICAgcm93OiByb3csCiAgICAgICAgICAgICAgaXNWYWxpZDogaXNWYWxpZCwKICAgICAgICAgICAgICByZWFzb246IHJlYXNvbgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2IobnVsbCwgewogICAgICAgICAgICByb3c6IHJvdywKICAgICAgICAgICAgaXNWYWxpZDogZmFsc2UsCiAgICAgICAgICAgIHJlYXNvbjogcmVhc29uCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9XSk7CgogIHJldHVy
biBSb3dUcmFuc2Zvcm1lclZhbGlkYXRvcjsKfSgpOwoKZXhwb3J0cy5Sb3dUcmFuc2Zvcm1lclZhbGlkYXRvciA9IFJvd1RyYW5zZm9ybWVyVmFsaWRhdG9yOwoKfSx7Ii4uL3R5cGVzIjoxNjYsImxvZGFzaC5pc2Z1bmN0aW9uIjozMjF9XSwxNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgUm93VHJhbnNmb3JtZXJWYWxpZGF0b3JfMSA9IHJlcXVpcmUoIi4v
Um93VHJhbnNmb3JtZXJWYWxpZGF0b3IiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiUm93VHJhbnNmb3JtZXJWYWxpZGF0b3IiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBSb3dUcmFuc2Zvcm1lclZhbGlkYXRvcl8xLlJvd1RyYW5zZm9ybWVyVmFsaWRhdG9yOwogIH0KfSk7Cgp2YXIgSGVhZGVyVHJhbnNmb3JtZXJfMSA9IHJlcXVpcmUoIi4vSGVhZGVyVHJhbnNmb3JtZXIiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiSGVhZGVy
VHJhbnNmb3JtZXIiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBIZWFkZXJUcmFuc2Zvcm1lcl8xLkhlYWRlclRyYW5zZm9ybWVyOwogIH0KfSk7Cgp9LHsiLi9IZWFkZXJUcmFuc2Zvcm1lciI6MTYzLCIuL1Jvd1RyYW5zZm9ybWVyVmFsaWRhdG9yIjoxNjR9XSwxNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7
CmV4cG9ydHMuaXNTeW5jVmFsaWRhdGUgPSBleHBvcnRzLmlzU3luY1RyYW5zZm9ybSA9IHZvaWQgMDsKCmV4cG9ydHMuaXNTeW5jVHJhbnNmb3JtID0gZnVuY3Rpb24gKHRyYW5zZm9ybSkgewogIHJldHVybiB0cmFuc2Zvcm0ubGVuZ3RoID09PSAxOwp9OwoKZXhwb3J0cy5pc1N5bmNWYWxpZGF0ZSA9IGZ1bmN0aW9uICh2YWxpZGF0ZSkgewogIHJldHVybiB2YWxpZGF0ZS5sZW5ndGggPT09IDE7Cn07Cgp9LHt9XSwxNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgYXNuMSA9
IGV4cG9ydHM7CmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTsKYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lOwphc24xLmJhc2UgPSByZXF1aXJlKCcuL2FzbjEvYmFzZScpOwphc24xLmNvbnN0YW50cyA9IHJlcXVpcmUoJy4vYXNuMS9jb25zdGFudHMnKTsKYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpOwphc24xLmVuY29kZXJzID0gcmVxdWlyZSgnLi9hc24xL2VuY29kZXJzJyk7Cgp9LHsiLi9hc24xL2FwaSI6MTY4LCIuL2FzbjEvYmFzZSI6MTcwLCIuL2Fz
bjEvY29uc3RhbnRzIjoxNzQsIi4vYXNuMS9kZWNvZGVycyI6MTc2LCIuL2FzbjEvZW5jb2RlcnMiOjE3OSwiYm4uanMiOjE4MX1dLDE2ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBlbmNvZGVycyA9IHJlcXVpcmUoJy4vZW5jb2RlcnMnKTsKCnZhciBkZWNvZGVycyA9IHJlcXVpcmUoJy4vZGVjb2RlcnMnKTsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgYXBpID0gZXhwb3J0czsKCmFwaS5kZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUobmFtZSwg
Ym9keSkgewogIHJldHVybiBuZXcgRW50aXR5KG5hbWUsIGJvZHkpOwp9OwoKZnVuY3Rpb24gRW50aXR5KG5hbWUsIGJvZHkpIHsKICB0aGlzLm5hbWUgPSBuYW1lOwogIHRoaXMuYm9keSA9IGJvZHk7CiAgdGhpcy5kZWNvZGVycyA9IHt9OwogIHRoaXMuZW5jb2RlcnMgPSB7fTsKfQoKRW50aXR5LnByb3RvdHlwZS5fY3JlYXRlTmFtZWQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZChCYXNlKSB7CiAgdmFyIG5hbWUgPSB0aGlzLm5hbWU7CgogIGZ1bmN0aW9uIEdlbmVyYXRlZChlbnRpdHkpIHsKICAgIHRoaXMuX2luaXROYW1lZChl
bnRpdHksIG5hbWUpOwogIH0KCiAgaW5oZXJpdHMoR2VuZXJhdGVkLCBCYXNlKTsKCiAgR2VuZXJhdGVkLnByb3RvdHlwZS5faW5pdE5hbWVkID0gZnVuY3Rpb24gX2luaXROYW1lZChlbnRpdHksIG5hbWUpIHsKICAgIEJhc2UuY2FsbCh0aGlzLCBlbnRpdHksIG5hbWUpOwogIH07CgogIHJldHVybiBuZXcgR2VuZXJhdGVkKHRoaXMpOwp9OwoKRW50aXR5LnByb3RvdHlwZS5fZ2V0RGVjb2RlciA9IGZ1bmN0aW9uIF9nZXREZWNvZGVyKGVuYykgewogIGVuYyA9IGVuYyB8fCAnZGVyJzsgLy8gTGF6aWx5IGNyZWF0ZSBkZWNvZGVy
CgogIGlmICghdGhpcy5kZWNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKSB0aGlzLmRlY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChkZWNvZGVyc1tlbmNdKTsKICByZXR1cm4gdGhpcy5kZWNvZGVyc1tlbmNdOwp9OwoKRW50aXR5LnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgZW5jLCBvcHRpb25zKSB7CiAgcmV0dXJuIHRoaXMuX2dldERlY29kZXIoZW5jKS5kZWNvZGUoZGF0YSwgb3B0aW9ucyk7Cn07CgpFbnRpdHkucHJvdG90eXBlLl9nZXRFbmNvZGVyID0gZnVuY3Rpb24gX2dldEVu
Y29kZXIoZW5jKSB7CiAgZW5jID0gZW5jIHx8ICdkZXInOyAvLyBMYXppbHkgY3JlYXRlIGVuY29kZXIKCiAgaWYgKCF0aGlzLmVuY29kZXJzLmhhc093blByb3BlcnR5KGVuYykpIHRoaXMuZW5jb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGVuY29kZXJzW2VuY10pOwogIHJldHVybiB0aGlzLmVuY29kZXJzW2VuY107Cn07CgpFbnRpdHkucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBlbmMsCi8qIGludGVybmFsICovCnJlcG9ydGVyKSB7CiAgcmV0dXJuIHRoaXMuX2dldEVuY29kZXIoZW5j
KS5lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpOwp9OwoKfSx7Ii4vZGVjb2RlcnMiOjE3NiwiLi9lbmNvZGVycyI6MTc5LCJpbmhlcml0cyI6Mjc4fV0sMTY5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJl
dHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZS9yZXBvcnRlcicpLlJl
cG9ydGVyOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjsKCmZ1bmN0aW9uIERlY29kZXJCdWZmZXIoYmFzZSwgb3B0aW9ucykgewogIFJlcG9ydGVyLmNhbGwodGhpcywgb3B0aW9ucyk7CgogIGlmICghQnVmZmVyLmlzQnVmZmVyKGJhc2UpKSB7CiAgICB0aGlzLmVycm9yKCdJbnB1dCBub3QgQnVmZmVyJyk7CiAgICByZXR1cm47CiAgfQoKICB0aGlzLmJhc2UgPSBiYXNlOwogIHRoaXMub2Zmc2V0ID0gMDsKICB0aGlzLmxlbmd0aCA9IGJhc2UubGVuZ3RoOwp9Cgppbmhlcml0cyhEZWNvZGVy
QnVmZmVyLCBSZXBvcnRlcik7CmV4cG9ydHMuRGVjb2RlckJ1ZmZlciA9IERlY29kZXJCdWZmZXI7CgpEZWNvZGVyQnVmZmVyLmlzRGVjb2RlckJ1ZmZlciA9IGZ1bmN0aW9uIGlzRGVjb2RlckJ1ZmZlcihkYXRhKSB7CiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEZWNvZGVyQnVmZmVyKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9IC8vIE9yIGFjY2VwdCBjb21wYXRpYmxlIEFQSQoKCiAgdmFyIGlzQ29tcGF0aWJsZSA9IF90eXBlb2YoZGF0YSkgPT09ICdvYmplY3QnICYmIEJ1ZmZlci5pc0J1ZmZlcihkYXRhLmJhc2UpICYmIGRhdGEu
Y29uc3RydWN0b3IubmFtZSA9PT0gJ0RlY29kZXJCdWZmZXInICYmIHR5cGVvZiBkYXRhLm9mZnNldCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGRhdGEubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgZGF0YS5zYXZlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkYXRhLnJlc3RvcmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRhdGEuaXNFbXB0eSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGF0YS5yZWFkVUludDggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRhdGEuc2tpcCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBl
b2YgZGF0YS5yYXcgPT09ICdmdW5jdGlvbic7CiAgcmV0dXJuIGlzQ29tcGF0aWJsZTsKfTsKCkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkgewogIHJldHVybiB7CiAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LAogICAgcmVwb3J0ZXI6IFJlcG9ydGVyLnByb3RvdHlwZS5zYXZlLmNhbGwodGhpcykKICB9Owp9OwoKRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoc2F2ZSkgewogIC8vIFJldHVybiBza2lwcGVkIGRhdGEKICB2YXIgcmVzID0gbmV3IERl
Y29kZXJCdWZmZXIodGhpcy5iYXNlKTsKICByZXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7CiAgcmVzLmxlbmd0aCA9IHRoaXMub2Zmc2V0OwogIHRoaXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7CiAgUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUuY2FsbCh0aGlzLCBzYXZlLnJlcG9ydGVyKTsKICByZXR1cm4gcmVzOwp9OwoKRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7CiAgcmV0dXJuIHRoaXMub2Zmc2V0ID09PSB0aGlzLmxlbmd0aDsKfTsKCkRlY29kZXJCdWZmZXIucHJvdG90
eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OChmYWlsKSB7CiAgaWYgKHRoaXMub2Zmc2V0ICsgMSA8PSB0aGlzLmxlbmd0aCkgcmV0dXJuIHRoaXMuYmFzZS5yZWFkVUludDgodGhpcy5vZmZzZXQrKywgdHJ1ZSk7ZWxzZSByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTsKfTsKCkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGJ5dGVzLCBmYWlsKSB7CiAgaWYgKCEodGhpcy5vZmZzZXQgKyBieXRlcyA8PSB0aGlzLmxlbmd0aCkpIHJldHVy
biB0aGlzLmVycm9yKGZhaWwgfHwgJ0RlY29kZXJCdWZmZXIgb3ZlcnJ1bicpOwogIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpOyAvLyBTaGFyZSByZXBvcnRlciBzdGF0ZQoKICByZXMuX3JlcG9ydGVyU3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlOwogIHJlcy5vZmZzZXQgPSB0aGlzLm9mZnNldDsKICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQgKyBieXRlczsKICB0aGlzLm9mZnNldCArPSBieXRlczsKICByZXR1cm4gcmVzOwp9OwoKRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmF3ID0gZnVuY3Rp
b24gcmF3KHNhdmUpIHsKICByZXR1cm4gdGhpcy5iYXNlLnNsaWNlKHNhdmUgPyBzYXZlLm9mZnNldCA6IHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCk7Cn07CgpmdW5jdGlvbiBFbmNvZGVyQnVmZmVyKHZhbHVlLCByZXBvcnRlcikgewogIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgdGhpcy5sZW5ndGggPSAwOwogICAgdGhpcy52YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICBpZiAoIUVuY29kZXJCdWZmZXIuaXNFbmNvZGVyQnVmZmVyKGl0ZW0pKSBpdGVtID0gbmV3IEVuY29kZXJCdWZm
ZXIoaXRlbSwgcmVwb3J0ZXIpOwogICAgICB0aGlzLmxlbmd0aCArPSBpdGVtLmxlbmd0aDsKICAgICAgcmV0dXJuIGl0ZW07CiAgICB9LCB0aGlzKTsKICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKICAgIGlmICghKDAgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMHhmZikpIHJldHVybiByZXBvcnRlci5lcnJvcignbm9uLWJ5dGUgRW5jb2RlckJ1ZmZlciB2YWx1ZScpOwogICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgdGhpcy5sZW5ndGggPSAxOwogIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAn
c3RyaW5nJykgewogICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgdGhpcy5sZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aCh2YWx1ZSk7CiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7CiAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICB0aGlzLmxlbmd0aCA9IHZhbHVlLmxlbmd0aDsKICB9IGVsc2UgewogICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbnN1cHBvcnRlZCB0eXBlOiAnICsgX3R5cGVvZih2YWx1ZSkpOwogIH0KfQoKZXhwb3J0cy5FbmNvZGVyQnVmZmVyID0gRW5jb2RlckJ1ZmZlcjsKCkVu
Y29kZXJCdWZmZXIuaXNFbmNvZGVyQnVmZmVyID0gZnVuY3Rpb24gaXNFbmNvZGVyQnVmZmVyKGRhdGEpIHsKICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVuY29kZXJCdWZmZXIpIHsKICAgIHJldHVybiB0cnVlOwogIH0gLy8gT3IgYWNjZXB0IGNvbXBhdGlibGUgQVBJCgoKICB2YXIgaXNDb21wYXRpYmxlID0gX3R5cGVvZihkYXRhKSA9PT0gJ29iamVjdCcgJiYgZGF0YS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnRW5jb2RlckJ1ZmZlcicgJiYgdHlwZW9mIGRhdGEubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgZGF0YS5qb2lu
ID09PSAnZnVuY3Rpb24nOwogIHJldHVybiBpc0NvbXBhdGlibGU7Cn07CgpFbmNvZGVyQnVmZmVyLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihvdXQsIG9mZnNldCkgewogIGlmICghb3V0KSBvdXQgPSBCdWZmZXIuYWxsb2ModGhpcy5sZW5ndGgpOwogIGlmICghb2Zmc2V0KSBvZmZzZXQgPSAwOwogIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG91dDsKCiAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHsKICAgIHRoaXMudmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICBpdGVt
LmpvaW4ob3V0LCBvZmZzZXQpOwogICAgICBvZmZzZXQgKz0gaXRlbS5sZW5ndGg7CiAgICB9KTsKICB9IGVsc2UgewogICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnbnVtYmVyJykgb3V0W29mZnNldF0gPSB0aGlzLnZhbHVlO2Vsc2UgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnc3RyaW5nJykgb3V0LndyaXRlKHRoaXMudmFsdWUsIG9mZnNldCk7ZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHRoaXMudmFsdWUpKSB0aGlzLnZhbHVlLmNvcHkob3V0LCBvZmZzZXQpOwogICAgb2Zmc2V0ICs9IHRoaXMubGVuZ3RoOwog
IH0KCiAgcmV0dXJuIG91dDsKfTsKCn0seyIuLi9iYXNlL3JlcG9ydGVyIjoxNzIsImluaGVyaXRzIjoyNzgsInNhZmVyLWJ1ZmZlciI6Mzg1fV0sMTcwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIGJhc2UgPSBleHBvcnRzOwpiYXNlLlJlcG9ydGVyID0gcmVxdWlyZSgnLi9yZXBvcnRlcicpLlJlcG9ydGVyOwpiYXNlLkRlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkRlY29kZXJCdWZmZXI7CmJhc2UuRW5jb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4vYnVmZmVy
JykuRW5jb2RlckJ1ZmZlcjsKYmFzZS5Ob2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7Cgp9LHsiLi9idWZmZXIiOjE2OSwiLi9ub2RlIjoxNzEsIi4vcmVwb3J0ZXIiOjE3Mn1dLDE3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBf
dHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKdmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZS9yZXBvcnRlcicpLlJlcG9ydGVyOwoKdmFyIEVuY29kZXJC
dWZmZXIgPSByZXF1aXJlKCcuLi9iYXNlL2J1ZmZlcicpLkVuY29kZXJCdWZmZXI7Cgp2YXIgRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UvYnVmZmVyJykuRGVjb2RlckJ1ZmZlcjsKCnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7IC8vIFN1cHBvcnRlZCB0YWdzCgoKdmFyIHRhZ3MgPSBbJ3NlcScsICdzZXFvZicsICdzZXQnLCAnc2V0b2YnLCAnb2JqaWQnLCAnYm9vbCcsICdnZW50aW1lJywgJ3V0Y3RpbWUnLCAnbnVsbF8nLCAnZW51bScsICdpbnQnLCAnb2JqRGVzYycsICdiaXRz
dHInLCAnYm1wc3RyJywgJ2NoYXJzdHInLCAnZ2Vuc3RyJywgJ2dyYXBoc3RyJywgJ2lhNXN0cicsICdpc282NDZzdHInLCAnbnVtc3RyJywgJ29jdHN0cicsICdwcmludHN0cicsICd0NjFzdHInLCAndW5pc3RyJywgJ3V0ZjhzdHInLCAndmlkZW9zdHInXTsgLy8gUHVibGljIG1ldGhvZHMgbGlzdAoKdmFyIG1ldGhvZHMgPSBbJ2tleScsICdvYmonLCAndXNlJywgJ29wdGlvbmFsJywgJ2V4cGxpY2l0JywgJ2ltcGxpY2l0JywgJ2RlZicsICdjaG9pY2UnLCAnYW55JywgJ2NvbnRhaW5zJ10uY29uY2F0KHRhZ3MpOyAvLyBPdmVy
cmlkZWQgbWV0aG9kcyBsaXN0Cgp2YXIgb3ZlcnJpZGVkID0gWydfcGVla1RhZycsICdfZGVjb2RlVGFnJywgJ191c2UnLCAnX2RlY29kZVN0cicsICdfZGVjb2RlT2JqaWQnLCAnX2RlY29kZVRpbWUnLCAnX2RlY29kZU51bGwnLCAnX2RlY29kZUludCcsICdfZGVjb2RlQm9vbCcsICdfZGVjb2RlTGlzdCcsICdfZW5jb2RlQ29tcG9zaXRlJywgJ19lbmNvZGVTdHInLCAnX2VuY29kZU9iamlkJywgJ19lbmNvZGVUaW1lJywgJ19lbmNvZGVOdWxsJywgJ19lbmNvZGVJbnQnLCAnX2VuY29kZUJvb2wnXTsKCmZ1bmN0aW9uIE5vZGUo
ZW5jLCBwYXJlbnQsIG5hbWUpIHsKICB2YXIgc3RhdGUgPSB7fTsKICB0aGlzLl9iYXNlU3RhdGUgPSBzdGF0ZTsKICBzdGF0ZS5uYW1lID0gbmFtZTsKICBzdGF0ZS5lbmMgPSBlbmM7CiAgc3RhdGUucGFyZW50ID0gcGFyZW50IHx8IG51bGw7CiAgc3RhdGUuY2hpbGRyZW4gPSBudWxsOyAvLyBTdGF0ZQoKICBzdGF0ZS50YWcgPSBudWxsOwogIHN0YXRlLmFyZ3MgPSBudWxsOwogIHN0YXRlLnJldmVyc2VBcmdzID0gbnVsbDsKICBzdGF0ZS5jaG9pY2UgPSBudWxsOwogIHN0YXRlLm9wdGlvbmFsID0gZmFsc2U7CiAgc3RhdGUu
YW55ID0gZmFsc2U7CiAgc3RhdGUub2JqID0gZmFsc2U7CiAgc3RhdGUudXNlID0gbnVsbDsKICBzdGF0ZS51c2VEZWNvZGVyID0gbnVsbDsKICBzdGF0ZS5rZXkgPSBudWxsOwogIHN0YXRlWydkZWZhdWx0J10gPSBudWxsOwogIHN0YXRlLmV4cGxpY2l0ID0gbnVsbDsKICBzdGF0ZS5pbXBsaWNpdCA9IG51bGw7CiAgc3RhdGUuY29udGFpbnMgPSBudWxsOyAvLyBTaG91bGQgY3JlYXRlIG5ldyBpbnN0YW5jZSBvbiBlYWNoIG1ldGhvZAoKICBpZiAoIXN0YXRlLnBhcmVudCkgewogICAgc3RhdGUuY2hpbGRyZW4gPSBbXTsKCiAg
ICB0aGlzLl93cmFwKCk7CiAgfQp9Cgptb2R1bGUuZXhwb3J0cyA9IE5vZGU7CnZhciBzdGF0ZVByb3BzID0gWydlbmMnLCAncGFyZW50JywgJ2NoaWxkcmVuJywgJ3RhZycsICdhcmdzJywgJ3JldmVyc2VBcmdzJywgJ2Nob2ljZScsICdvcHRpb25hbCcsICdhbnknLCAnb2JqJywgJ3VzZScsICdhbHRlcmVkVXNlJywgJ2tleScsICdkZWZhdWx0JywgJ2V4cGxpY2l0JywgJ2ltcGxpY2l0JywgJ2NvbnRhaW5zJ107CgpOb2RlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkgewogIHZhciBzdGF0ZSA9IHRoaXMuX2Jh
c2VTdGF0ZTsKICB2YXIgY3N0YXRlID0ge307CiAgc3RhdGVQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7CiAgICBjc3RhdGVbcHJvcF0gPSBzdGF0ZVtwcm9wXTsKICB9KTsKICB2YXIgcmVzID0gbmV3IHRoaXMuY29uc3RydWN0b3IoY3N0YXRlLnBhcmVudCk7CiAgcmVzLl9iYXNlU3RhdGUgPSBjc3RhdGU7CiAgcmV0dXJuIHJlczsKfTsKCk5vZGUucHJvdG90eXBlLl93cmFwID0gZnVuY3Rpb24gd3JhcCgpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7CiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uICht
ZXRob2QpIHsKICAgIHRoaXNbbWV0aG9kXSA9IGZ1bmN0aW9uIF93cmFwcGVkTWV0aG9kKCkgewogICAgICB2YXIgY2xvbmUgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTsKICAgICAgc3RhdGUuY2hpbGRyZW4ucHVzaChjbG9uZSk7CiAgICAgIHJldHVybiBjbG9uZVttZXRob2RdLmFwcGx5KGNsb25lLCBhcmd1bWVudHMpOwogICAgfTsKICB9LCB0aGlzKTsKfTsKCk5vZGUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChib2R5KSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOwogIGFzc2VydChzdGF0
ZS5wYXJlbnQgPT09IG51bGwpOwogIGJvZHkuY2FsbCh0aGlzKTsgLy8gRmlsdGVyIGNoaWxkcmVuCgogIHN0YXRlLmNoaWxkcmVuID0gc3RhdGUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkgewogICAgcmV0dXJuIGNoaWxkLl9iYXNlU3RhdGUucGFyZW50ID09PSB0aGlzOwogIH0sIHRoaXMpOwogIGFzc2VydC5lcXVhbChzdGF0ZS5jaGlsZHJlbi5sZW5ndGgsIDEsICdSb290IG5vZGUgY2FuIGhhdmUgb25seSBvbmUgY2hpbGQnKTsKfTsKCk5vZGUucHJvdG90eXBlLl91c2VBcmdzID0gZnVuY3Rpb24gdXNlQXJn
cyhhcmdzKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOyAvLyBGaWx0ZXIgY2hpbGRyZW4gYW5kIGFyZ3MKCiAgdmFyIGNoaWxkcmVuID0gYXJncy5maWx0ZXIoZnVuY3Rpb24gKGFyZykgewogICAgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3I7CiAgfSwgdGhpcyk7CiAgYXJncyA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChhcmcpIHsKICAgIHJldHVybiAhKGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpOwogIH0sIHRoaXMpOwoKICBpZiAoY2hpbGRyZW4ubGVuZ3RoICE9PSAwKSB7
CiAgICBhc3NlcnQoc3RhdGUuY2hpbGRyZW4gPT09IG51bGwpOwogICAgc3RhdGUuY2hpbGRyZW4gPSBjaGlsZHJlbjsgLy8gUmVwbGFjZSBwYXJlbnQgdG8gbWFpbnRhaW4gYmFja3dhcmQgbGluawoKICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgIGNoaWxkLl9iYXNlU3RhdGUucGFyZW50ID0gdGhpczsKICAgIH0sIHRoaXMpOwogIH0KCiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7CiAgICBhc3NlcnQoc3RhdGUuYXJncyA9PT0gbnVsbCk7CiAgICBzdGF0ZS5hcmdzID0gYXJnczsKICAgIHN0
YXRlLnJldmVyc2VBcmdzID0gYXJncy5tYXAoZnVuY3Rpb24gKGFyZykgewogICAgICBpZiAoX3R5cGVvZihhcmcpICE9PSAnb2JqZWN0JyB8fCBhcmcuY29uc3RydWN0b3IgIT09IE9iamVjdCkgcmV0dXJuIGFyZzsKICAgICAgdmFyIHJlcyA9IHt9OwogICAgICBPYmplY3Qua2V5cyhhcmcpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIGlmIChrZXkgPT0gKGtleSB8IDApKSBrZXkgfD0gMDsKICAgICAgICB2YXIgdmFsdWUgPSBhcmdba2V5XTsKICAgICAgICByZXNbdmFsdWVdID0ga2V5OwogICAgICB9KTsKICAg
ICAgcmV0dXJuIHJlczsKICAgIH0pOwogIH0KfTsgLy8KLy8gT3ZlcnJpZGVkIG1ldGhvZHMKLy8KCgpvdmVycmlkZWQuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7CiAgTm9kZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIF9vdmVycmlkZWQoKSB7CiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7CiAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgJyBub3QgaW1wbGVtZW50ZWQgZm9yIGVuY29kaW5nOiAnICsgc3RhdGUuZW5jKTsKICB9Owp9KTsgLy8KLy8gUHVibGljIG1ldGhvZHMKLy8KCnRhZ3MuZm9y
RWFjaChmdW5jdGlvbiAodGFnKSB7CiAgTm9kZS5wcm90b3R5cGVbdGFnXSA9IGZ1bmN0aW9uIF90YWdNZXRob2QoKSB7CiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7CiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICBhc3NlcnQoc3RhdGUudGFnID09PSBudWxsKTsKICAgIHN0YXRlLnRhZyA9IHRhZzsKCiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpOwoKICAgIHJldHVybiB0aGlzOwogIH07Cn0pOwoKTm9kZS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGl0
ZW0pIHsKICBhc3NlcnQoaXRlbSk7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOwogIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpOwogIHN0YXRlLnVzZSA9IGl0ZW07CiAgcmV0dXJuIHRoaXM7Cn07CgpOb2RlLnByb3RvdHlwZS5vcHRpb25hbCA9IGZ1bmN0aW9uIG9wdGlvbmFsKCkgewogIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTsKICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7CiAgcmV0dXJuIHRoaXM7Cn07CgpOb2RlLnByb3RvdHlwZS5kZWYgPSBmdW5jdGlvbiBkZWYodmFsKSB7CiAgdmFyIHN0YXRlID0g
dGhpcy5fYmFzZVN0YXRlOwogIGFzc2VydChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKTsKICBzdGF0ZVsnZGVmYXVsdCddID0gdmFsOwogIHN0YXRlLm9wdGlvbmFsID0gdHJ1ZTsKICByZXR1cm4gdGhpczsKfTsKCk5vZGUucHJvdG90eXBlLmV4cGxpY2l0ID0gZnVuY3Rpb24gZXhwbGljaXQobnVtKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOwogIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7CiAgc3RhdGUuZXhwbGljaXQgPSBudW07CiAgcmV0dXJu
IHRoaXM7Cn07CgpOb2RlLnByb3RvdHlwZS5pbXBsaWNpdCA9IGZ1bmN0aW9uIGltcGxpY2l0KG51bSkgewogIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTsKICBhc3NlcnQoc3RhdGUuZXhwbGljaXQgPT09IG51bGwgJiYgc3RhdGUuaW1wbGljaXQgPT09IG51bGwpOwogIHN0YXRlLmltcGxpY2l0ID0gbnVtOwogIHJldHVybiB0aGlzOwp9OwoKTm9kZS5wcm90b3R5cGUub2JqID0gZnVuY3Rpb24gb2JqKCkgewogIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTsKICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGlj
ZS5jYWxsKGFyZ3VtZW50cyk7CiAgc3RhdGUub2JqID0gdHJ1ZTsKICBpZiAoYXJncy5sZW5ndGggIT09IDApIHRoaXMuX3VzZUFyZ3MoYXJncyk7CiAgcmV0dXJuIHRoaXM7Cn07CgpOb2RlLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiBrZXkobmV3S2V5KSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOwogIGFzc2VydChzdGF0ZS5rZXkgPT09IG51bGwpOwogIHN0YXRlLmtleSA9IG5ld0tleTsKICByZXR1cm4gdGhpczsKfTsKCk5vZGUucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uIGFueSgpIHsKICB2YXIgc3RhdGUg
PSB0aGlzLl9iYXNlU3RhdGU7CiAgc3RhdGUuYW55ID0gdHJ1ZTsKICByZXR1cm4gdGhpczsKfTsKCk5vZGUucHJvdG90eXBlLmNob2ljZSA9IGZ1bmN0aW9uIGNob2ljZShvYmopIHsKICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7CiAgYXNzZXJ0KHN0YXRlLmNob2ljZSA9PT0gbnVsbCk7CiAgc3RhdGUuY2hvaWNlID0gb2JqOwoKICB0aGlzLl91c2VBcmdzKE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHsKICAgIHJldHVybiBvYmpba2V5XTsKICB9KSk7CgogIHJldHVybiB0aGlzOwp9OwoKTm9kZS5w
cm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhpdGVtKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOwogIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpOwogIHN0YXRlLmNvbnRhaW5zID0gaXRlbTsKICByZXR1cm4gdGhpczsKfTsgLy8KLy8gRGVjb2RpbmcKLy8KCgpOb2RlLnByb3RvdHlwZS5fZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBvcHRpb25zKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOyAvLyBEZWNvZGUgcm9vdCBub2RlCgogIGlmIChzdGF0ZS5wYXJlbnQg
PT09IG51bGwpIHJldHVybiBpbnB1dC53cmFwUmVzdWx0KHN0YXRlLmNoaWxkcmVuWzBdLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpKTsKICB2YXIgcmVzdWx0ID0gc3RhdGVbJ2RlZmF1bHQnXTsKICB2YXIgcHJlc2VudCA9IHRydWU7CiAgdmFyIHByZXZLZXkgPSBudWxsOwogIGlmIChzdGF0ZS5rZXkgIT09IG51bGwpIHByZXZLZXkgPSBpbnB1dC5lbnRlcktleShzdGF0ZS5rZXkpOyAvLyBDaGVjayBpZiB0YWcgaXMgdGhlcmUKCiAgaWYgKHN0YXRlLm9wdGlvbmFsKSB7CiAgICB2YXIgdGFnID0gbnVsbDsKICAgIGlmIChzdGF0
ZS5leHBsaWNpdCAhPT0gbnVsbCkgdGFnID0gc3RhdGUuZXhwbGljaXQ7ZWxzZSBpZiAoc3RhdGUuaW1wbGljaXQgIT09IG51bGwpIHRhZyA9IHN0YXRlLmltcGxpY2l0O2Vsc2UgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCkgdGFnID0gc3RhdGUudGFnOwoKICAgIGlmICh0YWcgPT09IG51bGwgJiYgIXN0YXRlLmFueSkgewogICAgICAvLyBUcmlhbCBhbmQgRXJyb3IKICAgICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7CgogICAgICB0cnkgewogICAgICAgIGlmIChzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHRoaXMuX2RlY29kZUdl
bmVyaWMoc3RhdGUudGFnLCBpbnB1dCwgb3B0aW9ucyk7ZWxzZSB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpOwogICAgICAgIHByZXNlbnQgPSB0cnVlOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcHJlc2VudCA9IGZhbHNlOwogICAgICB9CgogICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpOwogICAgfSBlbHNlIHsKICAgICAgcHJlc2VudCA9IHRoaXMuX3BlZWtUYWcoaW5wdXQsIHRhZywgc3RhdGUuYW55KTsKICAgICAgaWYgKGlucHV0LmlzRXJyb3IocHJlc2VudCkpIHJldHVybiBwcmVzZW50OwogICAg
fQogIH0gLy8gUHVzaCBvYmplY3Qgb24gc3RhY2sKCgogIHZhciBwcmV2T2JqOwogIGlmIChzdGF0ZS5vYmogJiYgcHJlc2VudCkgcHJldk9iaiA9IGlucHV0LmVudGVyT2JqZWN0KCk7CgogIGlmIChwcmVzZW50KSB7CiAgICAvLyBVbndyYXAgZXhwbGljaXQgdmFsdWVzCiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpIHsKICAgICAgdmFyIGV4cGxpY2l0ID0gdGhpcy5fZGVjb2RlVGFnKGlucHV0LCBzdGF0ZS5leHBsaWNpdCk7CgogICAgICBpZiAoaW5wdXQuaXNFcnJvcihleHBsaWNpdCkpIHJldHVybiBleHBsaWNp
dDsKICAgICAgaW5wdXQgPSBleHBsaWNpdDsKICAgIH0KCiAgICB2YXIgc3RhcnQgPSBpbnB1dC5vZmZzZXQ7IC8vIFVud3JhcCBpbXBsaWNpdCBhbmQgbm9ybWFsIHZhbHVlcwoKICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7CiAgICAgIHZhciBfc2F2ZTsKCiAgICAgIGlmIChzdGF0ZS5hbnkpIF9zYXZlID0gaW5wdXQuc2F2ZSgpOwoKICAgICAgdmFyIGJvZHkgPSB0aGlzLl9kZWNvZGVUYWcoaW5wdXQsIHN0YXRlLmltcGxpY2l0ICE9PSBudWxsID8gc3RhdGUuaW1wbGljaXQg
OiBzdGF0ZS50YWcsIHN0YXRlLmFueSk7CgogICAgICBpZiAoaW5wdXQuaXNFcnJvcihib2R5KSkgcmV0dXJuIGJvZHk7CiAgICAgIGlmIChzdGF0ZS5hbnkpIHJlc3VsdCA9IGlucHV0LnJhdyhfc2F2ZSk7ZWxzZSBpbnB1dCA9IGJvZHk7CiAgICB9CgogICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50cmFjayAmJiBzdGF0ZS50YWcgIT09IG51bGwpIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBzdGFydCwgaW5wdXQubGVuZ3RoLCAndGFnZ2VkJyk7CiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRl
LnRhZyAhPT0gbnVsbCkgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIGlucHV0Lm9mZnNldCwgaW5wdXQubGVuZ3RoLCAnY29udGVudCcpOyAvLyBTZWxlY3QgcHJvcGVyIG1ldGhvZCBmb3IgdGFnCgogICAgaWYgKHN0YXRlLmFueSkgey8vIG5vLW9wCiAgICB9IGVsc2UgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbCkgewogICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQsIG9wdGlvbnMpOwogICAgfSBlbHNlIHsKICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0
LCBvcHRpb25zKTsKICAgIH0KCiAgICBpZiAoaW5wdXQuaXNFcnJvcihyZXN1bHQpKSByZXR1cm4gcmVzdWx0OyAvLyBEZWNvZGUgY2hpbGRyZW4KCiAgICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwgJiYgc3RhdGUuY2hpbGRyZW4gIT09IG51bGwpIHsKICAgICAgc3RhdGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiBkZWNvZGVDaGlsZHJlbihjaGlsZCkgewogICAgICAgIC8vIE5PVEU6IFdlIGFyZSBpZ25vcmluZyBlcnJvcnMgaGVyZSwgdG8gbGV0IHBhcnNlciBjb250aW51ZSB3aXRoIG90aGVy
CiAgICAgICAgLy8gcGFydHMgb2YgZW5jb2RlZCBkYXRhCiAgICAgICAgY2hpbGQuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7CiAgICAgIH0pOwogICAgfSAvLyBEZWNvZGUgY29udGFpbmVkL2VuY29kZWQgYnkgc2NoZW1hLCBvbmx5IGluIGJpdCBvciBvY3RldCBzdHJpbmdzCgoKICAgIGlmIChzdGF0ZS5jb250YWlucyAmJiAoc3RhdGUudGFnID09PSAnb2N0c3RyJyB8fCBzdGF0ZS50YWcgPT09ICdiaXRzdHInKSkgewogICAgICB2YXIgZGF0YSA9IG5ldyBEZWNvZGVyQnVmZmVyKHJlc3VsdCk7CiAgICAgIHJlc3VsdCA9IHRo
aXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKS5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpOwogICAgfQogIH0gLy8gUG9wIG9iamVjdAoKCiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KSByZXN1bHQgPSBpbnB1dC5sZWF2ZU9iamVjdChwcmV2T2JqKTsgLy8gU2V0IGtleQoKICBpZiAoc3RhdGUua2V5ICE9PSBudWxsICYmIChyZXN1bHQgIT09IG51bGwgfHwgcHJlc2VudCA9PT0gdHJ1ZSkpIGlucHV0LmxlYXZlS2V5KHByZXZLZXksIHN0YXRlLmtleSwgcmVzdWx0KTtlbHNlIGlmIChw
cmV2S2V5ICE9PSBudWxsKSBpbnB1dC5leGl0S2V5KHByZXZLZXkpOwogIHJldHVybiByZXN1bHQ7Cn07CgpOb2RlLnByb3RvdHlwZS5fZGVjb2RlR2VuZXJpYyA9IGZ1bmN0aW9uIGRlY29kZUdlbmVyaWModGFnLCBpbnB1dCwgb3B0aW9ucykgewogIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTsKICBpZiAodGFnID09PSAnc2VxJyB8fCB0YWcgPT09ICdzZXQnKSByZXR1cm4gbnVsbDsKICBpZiAodGFnID09PSAnc2Vxb2YnIHx8IHRhZyA9PT0gJ3NldG9mJykgcmV0dXJuIHRoaXMuX2RlY29kZUxpc3QoaW5wdXQsIHRhZywg
c3RhdGUuYXJnc1swXSwgb3B0aW9ucyk7ZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncykgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBzdGF0ZS5hcmdzWzBdLCBzdGF0ZS5hcmdzWzFdLCBvcHRpb25zKTtlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpIHJldHVybiB0aGlzLl9kZWNvZGVPYmppZChpbnB1dCwgbnVsbCwgbnVsbCwgb3B0aW9ucyk7ZWxzZSBpZiAodGFnID09
PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpIHJldHVybiB0aGlzLl9kZWNvZGVUaW1lKGlucHV0LCB0YWcsIG9wdGlvbnMpO2Vsc2UgaWYgKHRhZyA9PT0gJ251bGxfJykgcmV0dXJuIHRoaXMuX2RlY29kZU51bGwoaW5wdXQsIG9wdGlvbnMpO2Vsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKSByZXR1cm4gdGhpcy5fZGVjb2RlQm9vbChpbnB1dCwgb3B0aW9ucyk7ZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpIHJldHVybiB0aGlzLl9kZWNvZGVTdHIoaW5wdXQsIHRhZywgb3B0aW9ucyk7ZWxzZSBpZiAodGFnID09PSAn
aW50JyB8fCB0YWcgPT09ICdlbnVtJykgcmV0dXJuIHRoaXMuX2RlY29kZUludChpbnB1dCwgc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTsKCiAgaWYgKHN0YXRlLnVzZSAhPT0gbnVsbCkgewogICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIGlucHV0Ll9yZXBvcnRlclN0YXRlLm9iaikuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBpbnB1dC5lcnJvcigndW5rbm93biB0YWc6ICcgKyB0YWcpOwogIH0KfTsKCk5vZGUucHJvdG90eXBlLl9nZXRVc2UgPSBm
dW5jdGlvbiBfZ2V0VXNlKGVudGl0eSwgb2JqKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOyAvLyBDcmVhdGUgYWx0ZXJlZCB1c2UgZGVjb2RlciBpZiBpbXBsaWNpdCBpcyBzZXQKCiAgc3RhdGUudXNlRGVjb2RlciA9IHRoaXMuX3VzZShlbnRpdHksIG9iaik7CiAgYXNzZXJ0KHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5wYXJlbnQgPT09IG51bGwpOwogIHN0YXRlLnVzZURlY29kZXIgPSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuY2hpbGRyZW5bMF07CgogIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0g
c3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmltcGxpY2l0KSB7CiAgICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5jbG9uZSgpOwogICAgc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmltcGxpY2l0ID0gc3RhdGUuaW1wbGljaXQ7CiAgfQoKICByZXR1cm4gc3RhdGUudXNlRGVjb2RlcjsKfTsKCk5vZGUucHJvdG90eXBlLl9kZWNvZGVDaG9pY2UgPSBmdW5jdGlvbiBkZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7CiAgdmFyIHJlc3VsdCA9
IG51bGw7CiAgdmFyIG1hdGNoID0gZmFsc2U7CiAgT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsKICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpOwogICAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2Vba2V5XTsKCiAgICB0cnkgewogICAgICB2YXIgdmFsdWUgPSBub2RlLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpOwoKICAgICAgaWYgKGlucHV0LmlzRXJyb3IodmFsdWUpKSByZXR1cm4gZmFsc2U7CiAgICAgIHJlc3VsdCA9IHsKICAgICAgICB0eXBlOiBrZXksCiAgICAgICAgdmFsdWU6IHZh
bHVlCiAgICAgIH07CiAgICAgIG1hdGNoID0gdHJ1ZTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgaW5wdXQucmVzdG9yZShzYXZlKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0sIHRoaXMpOwogIGlmICghbWF0Y2gpIHJldHVybiBpbnB1dC5lcnJvcignQ2hvaWNlIG5vdCBtYXRjaGVkJyk7CiAgcmV0dXJuIHJlc3VsdDsKfTsgLy8KLy8gRW5jb2RpbmcKLy8KCgpOb2RlLnByb3RvdHlwZS5fY3JlYXRlRW5jb2RlckJ1ZmZlciA9IGZ1bmN0aW9uIGNyZWF0ZUVuY29kZXJCdWZmZXIoZGF0
YSkgewogIHJldHVybiBuZXcgRW5jb2RlckJ1ZmZlcihkYXRhLCB0aGlzLnJlcG9ydGVyKTsKfTsKCk5vZGUucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkgewogIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTsKICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbCAmJiBzdGF0ZVsnZGVmYXVsdCddID09PSBkYXRhKSByZXR1cm47CgogIHZhciByZXN1bHQgPSB0aGlzLl9lbmNvZGVWYWx1ZShkYXRhLCByZXBvcnRlciwgcGFyZW50KTsKCiAgaWYgKHJlc3VsdCA9
PT0gdW5kZWZpbmVkKSByZXR1cm47CiAgaWYgKHRoaXMuX3NraXBEZWZhdWx0KHJlc3VsdCwgcmVwb3J0ZXIsIHBhcmVudCkpIHJldHVybjsKICByZXR1cm4gcmVzdWx0Owp9OwoKTm9kZS5wcm90b3R5cGUuX2VuY29kZVZhbHVlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7IC8vIERlY29kZSByb290IG5vZGUKCiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIHN0YXRlLmNoaWxkcmVuWzBdLl9lbmNvZGUoZGF0YSwgcmVwb3J0
ZXIgfHwgbmV3IFJlcG9ydGVyKCkpOwogIHZhciByZXN1bHQgPSBudWxsOyAvLyBTZXQgcmVwb3J0ZXIgdG8gc2hhcmUgaXQgd2l0aCBhIGNoaWxkIGNsYXNzCgogIHRoaXMucmVwb3J0ZXIgPSByZXBvcnRlcjsgLy8gQ2hlY2sgaWYgZGF0YSBpcyB0aGVyZQoKICBpZiAoc3RhdGUub3B0aW9uYWwgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7CiAgICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbCkgZGF0YSA9IHN0YXRlWydkZWZhdWx0J107ZWxzZSByZXR1cm47CiAgfSAvLyBFbmNvZGUgY2hpbGRyZW4gZmlyc3QKCgogIHZh
ciBjb250ZW50ID0gbnVsbDsKICB2YXIgcHJpbWl0aXZlID0gZmFsc2U7CgogIGlmIChzdGF0ZS5hbnkpIHsKICAgIC8vIEFueXRoaW5nIHRoYXQgd2FzIGdpdmVuIGlzIHRyYW5zbGF0ZWQgdG8gYnVmZmVyCiAgICByZXN1bHQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpOwogIH0gZWxzZSBpZiAoc3RhdGUuY2hvaWNlKSB7CiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpOwogIH0gZWxzZSBpZiAoc3RhdGUuY29udGFpbnMpIHsKICAgIGNvbnRlbnQgPSB0aGlzLl9nZXRVc2Uo
c3RhdGUuY29udGFpbnMsIHBhcmVudCkuX2VuY29kZShkYXRhLCByZXBvcnRlcik7CiAgICBwcmltaXRpdmUgPSB0cnVlOwogIH0gZWxzZSBpZiAoc3RhdGUuY2hpbGRyZW4pIHsKICAgIGNvbnRlbnQgPSBzdGF0ZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgIGlmIChjaGlsZC5fYmFzZVN0YXRlLnRhZyA9PT0gJ251bGxfJykgcmV0dXJuIGNoaWxkLl9lbmNvZGUobnVsbCwgcmVwb3J0ZXIsIGRhdGEpOwogICAgICBpZiAoY2hpbGQuX2Jhc2VTdGF0ZS5rZXkgPT09IG51bGwpIHJldHVybiByZXBvcnRlci5l
cnJvcignQ2hpbGQgc2hvdWxkIGhhdmUgYSBrZXknKTsKICAgICAgdmFyIHByZXZLZXkgPSByZXBvcnRlci5lbnRlcktleShjaGlsZC5fYmFzZVN0YXRlLmtleSk7CiAgICAgIGlmIChfdHlwZW9mKGRhdGEpICE9PSAnb2JqZWN0JykgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBleHBlY3RlZCwgYnV0IGlucHV0IGlzIG5vdCBvYmplY3QnKTsKCiAgICAgIHZhciByZXMgPSBjaGlsZC5fZW5jb2RlKGRhdGFbY2hpbGQuX2Jhc2VTdGF0ZS5rZXldLCByZXBvcnRlciwgZGF0YSk7CgogICAgICByZXBvcnRlci5sZWF2ZUtleShw
cmV2S2V5KTsKICAgICAgcmV0dXJuIHJlczsKICAgIH0sIHRoaXMpLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgcmV0dXJuIGNoaWxkOwogICAgfSk7CiAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihjb250ZW50KTsKICB9IGVsc2UgewogICAgaWYgKHN0YXRlLnRhZyA9PT0gJ3NlcW9mJyB8fCBzdGF0ZS50YWcgPT09ICdzZXRvZicpIHsKICAgICAgLy8gVE9ETyhpbmR1dG55KTogdGhpcyBzaG91bGQgYmUgdGhyb3duIG9uIERTTCBsZXZlbAogICAgICBpZiAoIShzdGF0ZS5hcmdzICYmIHN0
YXRlLmFyZ3MubGVuZ3RoID09PSAxKSkgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdUb28gbWFueSBhcmdzIGZvciA6ICcgKyBzdGF0ZS50YWcpOwogICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHJldHVybiByZXBvcnRlci5lcnJvcignc2Vxb2Yvc2V0b2YsIGJ1dCBkYXRhIGlzIG5vdCBBcnJheScpOwogICAgICB2YXIgY2hpbGQgPSB0aGlzLmNsb25lKCk7CiAgICAgIGNoaWxkLl9iYXNlU3RhdGUuaW1wbGljaXQgPSBudWxsOwogICAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhLm1hcChm
dW5jdGlvbiAoaXRlbSkgewogICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTsKICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLmFyZ3NbMF0sIGRhdGEpLl9lbmNvZGUoaXRlbSwgcmVwb3J0ZXIpOwogICAgICB9LCBjaGlsZCkpOwogICAgfSBlbHNlIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHsKICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnRlbnQgPSB0aGlzLl9lbmNvZGVQcmlt
aXRpdmUoc3RhdGUudGFnLCBkYXRhKTsKICAgICAgcHJpbWl0aXZlID0gdHJ1ZTsKICAgIH0KICB9IC8vIEVuY29kZSBkYXRhIGl0c2VsZgoKCiAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7CiAgICB2YXIgdGFnID0gc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZzsKICAgIHZhciBjbHMgPSBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCA/ICd1bml2ZXJzYWwnIDogJ2NvbnRleHQnOwoKICAgIGlmICh0YWcgPT09IG51bGwpIHsKICAgICAgaWYgKHN0YXRl
LnVzZSA9PT0gbnVsbCkgcmVwb3J0ZXIuZXJyb3IoJ1RhZyBjb3VsZCBiZSBvbWl0dGVkIG9ubHkgZm9yIC51c2UoKScpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbCkgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHRhZywgcHJpbWl0aXZlLCBjbHMsIGNvbnRlbnQpOwogICAgfQogIH0gLy8gV3JhcCBpbiBleHBsaWNpdAoKCiAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKSByZXN1bHQgPSB0aGlzLl9lbmNvZGVDb21wb3NpdGUoc3RhdGUuZXhwbGljaXQsIGZhbHNlLCAnY29udGV4
dCcsIHJlc3VsdCk7CiAgcmV0dXJuIHJlc3VsdDsKfTsKCk5vZGUucHJvdG90eXBlLl9lbmNvZGVDaG9pY2UgPSBmdW5jdGlvbiBlbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7CiAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2VbZGF0YS50eXBlXTsKCiAgaWYgKCFub2RlKSB7CiAgICBhc3NlcnQoZmFsc2UsIGRhdGEudHlwZSArICcgbm90IGZvdW5kIGluICcgKyBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpKSk7CiAgfQoKICByZXR1cm4gbm9k
ZS5fZW5jb2RlKGRhdGEudmFsdWUsIHJlcG9ydGVyKTsKfTsKCk5vZGUucHJvdG90eXBlLl9lbmNvZGVQcmltaXRpdmUgPSBmdW5jdGlvbiBlbmNvZGVQcmltaXRpdmUodGFnLCBkYXRhKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlOwogIGlmICgvc3RyJC8udGVzdCh0YWcpKSByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKGRhdGEsIHRhZyk7ZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpIHJldHVybiB0aGlzLl9lbmNvZGVPYmppZChkYXRhLCBzdGF0ZS5yZXZlcnNlQXJnc1swXSwgc3RhdGUuYXJn
c1sxXSk7ZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKSByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgbnVsbCwgbnVsbCk7ZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpIHJldHVybiB0aGlzLl9lbmNvZGVUaW1lKGRhdGEsIHRhZyk7ZWxzZSBpZiAodGFnID09PSAnbnVsbF8nKSByZXR1cm4gdGhpcy5fZW5jb2RlTnVsbCgpO2Vsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpIHJldHVybiB0aGlzLl9lbmNvZGVJbnQoZGF0YSwgc3RhdGUuYXJncyAmJiBzdGF0
ZS5yZXZlcnNlQXJnc1swXSk7ZWxzZSBpZiAodGFnID09PSAnYm9vbCcpIHJldHVybiB0aGlzLl9lbmNvZGVCb29sKGRhdGEpO2Vsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKGRhdGEsIHRhZyk7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHRhZzogJyArIHRhZyk7Cn07CgpOb2RlLnByb3RvdHlwZS5faXNOdW1zdHIgPSBmdW5jdGlvbiBpc051bXN0cihzdHIpIHsKICByZXR1cm4gL15bMC05IF0qJC8udGVzdChzdHIpOwp9OwoKTm9kZS5wcm90b3R5cGUuX2lzUHJpbnRz
dHIgPSBmdW5jdGlvbiBpc1ByaW50c3RyKHN0cikgewogIHJldHVybiAvXltBLVphLXowLTkgJygpKywtLi86PT9dKiQvLnRlc3Qoc3RyKTsKfTsKCn0seyIuLi9iYXNlL2J1ZmZlciI6MTY5LCIuLi9iYXNlL3JlcG9ydGVyIjoxNzIsIm1pbmltYWxpc3RpYy1hc3NlcnQiOjMyOH1dLDE3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7CgpmdW5jdGlvbiBSZXBvcnRlcihvcHRpb25zKSB7CiAgdGhpcy5fcmVwb3J0ZXJTdGF0
ZSA9IHsKICAgIG9iajogbnVsbCwKICAgIHBhdGg6IFtdLAogICAgb3B0aW9uczogb3B0aW9ucyB8fCB7fSwKICAgIGVycm9yczogW10KICB9Owp9CgpleHBvcnRzLlJlcG9ydGVyID0gUmVwb3J0ZXI7CgpSZXBvcnRlci5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7CiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIFJlcG9ydGVyRXJyb3I7Cn07CgpSZXBvcnRlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIHNhdmUoKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTsKICByZXR1cm4g
ewogICAgb2JqOiBzdGF0ZS5vYmosCiAgICBwYXRoTGVuOiBzdGF0ZS5wYXRoLmxlbmd0aAogIH07Cn07CgpSZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoZGF0YSkgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7CiAgc3RhdGUub2JqID0gZGF0YS5vYmo7CiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgZGF0YS5wYXRoTGVuKTsKfTsKClJlcG9ydGVyLnByb3RvdHlwZS5lbnRlcktleSA9IGZ1bmN0aW9uIGVudGVyS2V5KGtleSkgewogIHJldHVybiB0aGlzLl9y
ZXBvcnRlclN0YXRlLnBhdGgucHVzaChrZXkpOwp9OwoKUmVwb3J0ZXIucHJvdG90eXBlLmV4aXRLZXkgPSBmdW5jdGlvbiBleGl0S2V5KGluZGV4KSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTsKICBzdGF0ZS5wYXRoID0gc3RhdGUucGF0aC5zbGljZSgwLCBpbmRleCAtIDEpOwp9OwoKUmVwb3J0ZXIucHJvdG90eXBlLmxlYXZlS2V5ID0gZnVuY3Rpb24gbGVhdmVLZXkoaW5kZXgsIGtleSwgdmFsdWUpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlOwogIHRoaXMuZXhpdEtleShpbmRleCk7
CiAgaWYgKHN0YXRlLm9iaiAhPT0gbnVsbCkgc3RhdGUub2JqW2tleV0gPSB2YWx1ZTsKfTsKClJlcG9ydGVyLnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gcGF0aCgpIHsKICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLmpvaW4oJy8nKTsKfTsKClJlcG9ydGVyLnByb3RvdHlwZS5lbnRlck9iamVjdCA9IGZ1bmN0aW9uIGVudGVyT2JqZWN0KCkgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7CiAgdmFyIHByZXYgPSBzdGF0ZS5vYmo7CiAgc3RhdGUub2JqID0ge307CiAgcmV0dXJuIHByZXY7Cn07
CgpSZXBvcnRlci5wcm90b3R5cGUubGVhdmVPYmplY3QgPSBmdW5jdGlvbiBsZWF2ZU9iamVjdChwcmV2KSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTsKICB2YXIgbm93ID0gc3RhdGUub2JqOwogIHN0YXRlLm9iaiA9IHByZXY7CiAgcmV0dXJuIG5vdzsKfTsKClJlcG9ydGVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1zZykgewogIHZhciBlcnI7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTsKICB2YXIgaW5oZXJpdGVkID0gbXNnIGluc3RhbmNlb2YgUmVwb3J0ZXJFcnJv
cjsKCiAgaWYgKGluaGVyaXRlZCkgewogICAgZXJyID0gbXNnOwogIH0gZWxzZSB7CiAgICBlcnIgPSBuZXcgUmVwb3J0ZXJFcnJvcihzdGF0ZS5wYXRoLm1hcChmdW5jdGlvbiAoZWxlbSkgewogICAgICByZXR1cm4gJ1snICsgSlNPTi5zdHJpbmdpZnkoZWxlbSkgKyAnXSc7CiAgICB9KS5qb2luKCcnKSwgbXNnLm1lc3NhZ2UgfHwgbXNnLCBtc2cuc3RhY2spOwogIH0KCiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpIHRocm93IGVycjsKICBpZiAoIWluaGVyaXRlZCkgc3RhdGUuZXJyb3JzLnB1c2goZXJyKTsKICByZXR1
cm4gZXJyOwp9OwoKUmVwb3J0ZXIucHJvdG90eXBlLndyYXBSZXN1bHQgPSBmdW5jdGlvbiB3cmFwUmVzdWx0KHJlc3VsdCkgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7CiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpIHJldHVybiByZXN1bHQ7CiAgcmV0dXJuIHsKICAgIHJlc3VsdDogdGhpcy5pc0Vycm9yKHJlc3VsdCkgPyBudWxsIDogcmVzdWx0LAogICAgZXJyb3JzOiBzdGF0ZS5lcnJvcnMKICB9Owp9OwoKZnVuY3Rpb24gUmVwb3J0ZXJFcnJvcihwYXRoLCBtc2cpIHsKICB0aGlzLnBhdGggPSBw
YXRoOwogIHRoaXMucmV0aHJvdyhtc2cpOwp9Cgppbmhlcml0cyhSZXBvcnRlckVycm9yLCBFcnJvcik7CgpSZXBvcnRlckVycm9yLnByb3RvdHlwZS5yZXRocm93ID0gZnVuY3Rpb24gcmV0aHJvdyhtc2cpIHsKICB0aGlzLm1lc3NhZ2UgPSBtc2cgKyAnIGF0OiAnICsgKHRoaXMucGF0aCB8fCAnKHNoYWxsb3cpJyk7CiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBSZXBvcnRlckVycm9yKTsKCiAgaWYgKCF0aGlzLnN0YWNrKSB7CiAgICB0cnkgewogICAgICAvLyBJ
RSBvbmx5IGFkZHMgc3RhY2sgd2hlbiB0aHJvd24KICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMubWVzc2FnZSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRoaXMuc3RhY2sgPSBlLnN0YWNrOwogICAgfQogIH0KCiAgcmV0dXJuIHRoaXM7Cn07Cgp9LHsiaW5oZXJpdHMiOjI3OH1dLDE3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsgLy8gSGVscGVyCgpmdW5jdGlvbiByZXZlcnNlKG1hcCkgewogIHZhciByZXMgPSB7fTsKICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rp
b24gKGtleSkgewogICAgLy8gQ29udmVydCBrZXkgdG8gaW50ZWdlciBpZiBpdCBpcyBzdHJpbmdpZmllZAogICAgaWYgKChrZXkgfCAwKSA9PSBrZXkpIGtleSA9IGtleSB8IDA7CiAgICB2YXIgdmFsdWUgPSBtYXBba2V5XTsKICAgIHJlc1t2YWx1ZV0gPSBrZXk7CiAgfSk7CiAgcmV0dXJuIHJlczsKfQoKZXhwb3J0cy50YWdDbGFzcyA9IHsKICAwOiAndW5pdmVyc2FsJywKICAxOiAnYXBwbGljYXRpb24nLAogIDI6ICdjb250ZXh0JywKICAzOiAncHJpdmF0ZScKfTsKZXhwb3J0cy50YWdDbGFzc0J5TmFtZSA9IHJldmVyc2Uo
ZXhwb3J0cy50YWdDbGFzcyk7CmV4cG9ydHMudGFnID0gewogIDB4MDA6ICdlbmQnLAogIDB4MDE6ICdib29sJywKICAweDAyOiAnaW50JywKICAweDAzOiAnYml0c3RyJywKICAweDA0OiAnb2N0c3RyJywKICAweDA1OiAnbnVsbF8nLAogIDB4MDY6ICdvYmppZCcsCiAgMHgwNzogJ29iakRlc2MnLAogIDB4MDg6ICdleHRlcm5hbCcsCiAgMHgwOTogJ3JlYWwnLAogIDB4MGE6ICdlbnVtJywKICAweDBiOiAnZW1iZWQnLAogIDB4MGM6ICd1dGY4c3RyJywKICAweDBkOiAncmVsYXRpdmVPaWQnLAogIDB4MTA6ICdzZXEnLAogIDB4
MTE6ICdzZXQnLAogIDB4MTI6ICdudW1zdHInLAogIDB4MTM6ICdwcmludHN0cicsCiAgMHgxNDogJ3Q2MXN0cicsCiAgMHgxNTogJ3ZpZGVvc3RyJywKICAweDE2OiAnaWE1c3RyJywKICAweDE3OiAndXRjdGltZScsCiAgMHgxODogJ2dlbnRpbWUnLAogIDB4MTk6ICdncmFwaHN0cicsCiAgMHgxYTogJ2lzbzY0NnN0cicsCiAgMHgxYjogJ2dlbnN0cicsCiAgMHgxYzogJ3VuaXN0cicsCiAgMHgxZDogJ2NoYXJzdHInLAogIDB4MWU6ICdibXBzdHInCn07CmV4cG9ydHMudGFnQnlOYW1lID0gcmV2ZXJzZShleHBvcnRzLnRhZyk7
Cgp9LHt9XSwxNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgY29uc3RhbnRzID0gZXhwb3J0czsgLy8gSGVscGVyCgpjb25zdGFudHMuX3JldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKG1hcCkgewogIHZhciByZXMgPSB7fTsKICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgLy8gQ29udmVydCBrZXkgdG8gaW50ZWdlciBpZiBpdCBpcyBzdHJpbmdpZmllZAogICAgaWYgKChrZXkgfCAwKSA9PSBrZXkpIGtleSA9IGtleSB8IDA7CiAgICB2
YXIgdmFsdWUgPSBtYXBba2V5XTsKICAgIHJlc1t2YWx1ZV0gPSBrZXk7CiAgfSk7CiAgcmV0dXJuIHJlczsKfTsKCmNvbnN0YW50cy5kZXIgPSByZXF1aXJlKCcuL2RlcicpOwoKfSx7Ii4vZGVyIjoxNzN9XSwxNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFyIGJpZ251bSA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UvYnVmZmVyJykuRGVjb2RlckJ1ZmZl
cjsKCnZhciBOb2RlID0gcmVxdWlyZSgnLi4vYmFzZS9ub2RlJyk7IC8vIEltcG9ydCBERVIgY29uc3RhbnRzCgoKdmFyIGRlciA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9kZXInKTsKCmZ1bmN0aW9uIERFUkRlY29kZXIoZW50aXR5KSB7CiAgdGhpcy5lbmMgPSAnZGVyJzsKICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTsKICB0aGlzLmVudGl0eSA9IGVudGl0eTsgLy8gQ29uc3RydWN0IGJhc2UgdHJlZQoKICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpOwoKICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpOwp9Cgptb2R1
bGUuZXhwb3J0cyA9IERFUkRlY29kZXI7CgpERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykgewogIGlmICghRGVjb2RlckJ1ZmZlci5pc0RlY29kZXJCdWZmZXIoZGF0YSkpIHsKICAgIGRhdGEgPSBuZXcgRGVjb2RlckJ1ZmZlcihkYXRhLCBvcHRpb25zKTsKICB9CgogIHJldHVybiB0aGlzLnRyZWUuX2RlY29kZShkYXRhLCBvcHRpb25zKTsKfTsgLy8gVHJlZSBtZXRob2RzCgoKZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHsKICBOb2RlLmNhbGwodGhpcywgJ2Rlcics
IHBhcmVudCk7Cn0KCmluaGVyaXRzKERFUk5vZGUsIE5vZGUpOwoKREVSTm9kZS5wcm90b3R5cGUuX3BlZWtUYWcgPSBmdW5jdGlvbiBwZWVrVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHsKICBpZiAoYnVmZmVyLmlzRW1wdHkoKSkgcmV0dXJuIGZhbHNlOwogIHZhciBzdGF0ZSA9IGJ1ZmZlci5zYXZlKCk7CiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCAnRmFpbGVkIHRvIHBlZWsgdGFnOiAiJyArIHRhZyArICciJyk7CiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKSByZXR1cm4gZGVjb2RlZFRh
ZzsKICBidWZmZXIucmVzdG9yZShzdGF0ZSk7CiAgcmV0dXJuIGRlY29kZWRUYWcudGFnID09PSB0YWcgfHwgZGVjb2RlZFRhZy50YWdTdHIgPT09IHRhZyB8fCBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgPT09IHRhZyB8fCBhbnk7Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGFnID0gZnVuY3Rpb24gZGVjb2RlVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHsKICB2YXIgZGVjb2RlZFRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsICdGYWlsZWQgdG8gZGVjb2RlIHRhZyBvZiAiJyArIHRhZyArICciJyk7CiAgaWYgKGJ1ZmZl
ci5pc0Vycm9yKGRlY29kZWRUYWcpKSByZXR1cm4gZGVjb2RlZFRhZzsKICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlciwgZGVjb2RlZFRhZy5wcmltaXRpdmUsICdGYWlsZWQgdG8gZ2V0IGxlbmd0aCBvZiAiJyArIHRhZyArICciJyk7IC8vIEZhaWx1cmUKCiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGxlbikpIHJldHVybiBsZW47CgogIGlmICghYW55ICYmIGRlY29kZWRUYWcudGFnICE9PSB0YWcgJiYgZGVjb2RlZFRhZy50YWdTdHIgIT09IHRhZyAmJiBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgIT09IHRhZykgewogICAg
cmV0dXJuIGJ1ZmZlci5lcnJvcignRmFpbGVkIHRvIG1hdGNoIHRhZzogIicgKyB0YWcgKyAnIicpOwogIH0KCiAgaWYgKGRlY29kZWRUYWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbCkgcmV0dXJuIGJ1ZmZlci5za2lwKGxlbiwgJ0ZhaWxlZCB0byBtYXRjaCBib2R5IG9mOiAiJyArIHRhZyArICciJyk7IC8vIEluZGVmaW5pdGUgbGVuZ3RoLi4uIGZpbmQgRU5EIHRhZwoKICB2YXIgc3RhdGUgPSBidWZmZXIuc2F2ZSgpOwoKICB2YXIgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKGJ1ZmZlciwgJ0ZhaWxlZCB0byBza2lwIGlu
ZGVmaW5pdGUgbGVuZ3RoIGJvZHk6ICInICsgdGhpcy50YWcgKyAnIicpOwoKICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSkgcmV0dXJuIHJlczsKICBsZW4gPSBidWZmZXIub2Zmc2V0IC0gc3RhdGUub2Zmc2V0OwogIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTsKICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6ICInICsgdGFnICsgJyInKTsKfTsKCkRFUk5vZGUucHJvdG90eXBlLl9za2lwVW50aWxFbmQgPSBmdW5jdGlvbiBza2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKSB7CiAgZm9yICg7
OykgewogICAgdmFyIHRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsIGZhaWwpOwogICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHRhZykpIHJldHVybiB0YWc7CiAgICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlciwgdGFnLnByaW1pdGl2ZSwgZmFpbCk7CiAgICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSkgcmV0dXJuIGxlbjsKICAgIHZhciByZXMgPSB2b2lkIDA7CiAgICBpZiAodGFnLnByaW1pdGl2ZSB8fCBsZW4gIT09IG51bGwpIHJlcyA9IGJ1ZmZlci5za2lwKGxlbik7ZWxzZSByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQo
YnVmZmVyLCBmYWlsKTsgLy8gRmFpbHVyZQoKICAgIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKSByZXR1cm4gcmVzOwogICAgaWYgKHRhZy50YWdTdHIgPT09ICdlbmQnKSBicmVhazsKICB9Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlTGlzdCA9IGZ1bmN0aW9uIGRlY29kZUxpc3QoYnVmZmVyLCB0YWcsIGRlY29kZXIsIG9wdGlvbnMpIHsKICB2YXIgcmVzdWx0ID0gW107CgogIHdoaWxlICghYnVmZmVyLmlzRW1wdHkoKSkgewogICAgdmFyIHBvc3NpYmxlRW5kID0gdGhpcy5fcGVla1RhZyhidWZmZXIsICdlbmQnKTsK
CiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocG9zc2libGVFbmQpKSByZXR1cm4gcG9zc2libGVFbmQ7CiAgICB2YXIgcmVzID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLCAnZGVyJywgb3B0aW9ucyk7CiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSAmJiBwb3NzaWJsZUVuZCkgYnJlYWs7CiAgICByZXN1bHQucHVzaChyZXMpOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfTsKCkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVTdHIgPSBmdW5jdGlvbiBkZWNvZGVTdHIoYnVmZmVyLCB0YWcpIHsKICBpZiAodGFnID09PSAnYml0c3RyJykg
ewogICAgdmFyIHVudXNlZCA9IGJ1ZmZlci5yZWFkVUludDgoKTsKICAgIGlmIChidWZmZXIuaXNFcnJvcih1bnVzZWQpKSByZXR1cm4gdW51c2VkOwogICAgcmV0dXJuIHsKICAgICAgdW51c2VkOiB1bnVzZWQsCiAgICAgIGRhdGE6IGJ1ZmZlci5yYXcoKQogICAgfTsKICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHsKICAgIHZhciByYXcgPSBidWZmZXIucmF3KCk7CiAgICBpZiAocmF3Lmxlbmd0aCAlIDIgPT09IDEpIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiBibXBzdHIgbGVu
Z3RoIG1pc21hdGNoJyk7CiAgICB2YXIgc3RyID0gJyc7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXcubGVuZ3RoIC8gMjsgaSsrKSB7CiAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJhdy5yZWFkVUludDE2QkUoaSAqIDIpKTsKICAgIH0KCiAgICByZXR1cm4gc3RyOwogIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykgewogICAgdmFyIG51bXN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygnYXNjaWknKTsKCiAgICBpZiAoIXRoaXMuX2lzTnVtc3RyKG51bXN0cikpIHsKICAgICAgcmV0dXJuIGJ1ZmZl
ci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyAnbnVtc3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMnKTsKICAgIH0KCiAgICByZXR1cm4gbnVtc3RyOwogIH0gZWxzZSBpZiAodGFnID09PSAnb2N0c3RyJykgewogICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTsKICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7CiAgICByZXR1cm4gYnVmZmVyLnJhdygpOwogIH0gZWxzZSBpZiAodGFnID09PSAncHJpbnRzdHInKSB7CiAgICB2YXIgcHJpbnRzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7
CgogICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHByaW50c3RyKSkgewogICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArICdwcmludHN0ciB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzJyk7CiAgICB9CgogICAgcmV0dXJuIHByaW50c3RyOwogIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkgewogICAgcmV0dXJuIGJ1ZmZlci5yYXcoKS50b1N0cmluZygpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyAr
ICcgdW5zdXBwb3J0ZWQnKTsKICB9Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlT2JqaWQgPSBmdW5jdGlvbiBkZWNvZGVPYmppZChidWZmZXIsIHZhbHVlcywgcmVsYXRpdmUpIHsKICB2YXIgcmVzdWx0OwogIHZhciBpZGVudGlmaWVycyA9IFtdOwogIHZhciBpZGVudCA9IDA7CiAgdmFyIHN1YmlkZW50ID0gMDsKCiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7CiAgICBzdWJpZGVudCA9IGJ1ZmZlci5yZWFkVUludDgoKTsKICAgIGlkZW50IDw8PSA3OwogICAgaWRlbnQgfD0gc3ViaWRlbnQgJiAweDdmOwoKICAg
IGlmICgoc3ViaWRlbnQgJiAweDgwKSA9PT0gMCkgewogICAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50KTsKICAgICAgaWRlbnQgPSAwOwogICAgfQogIH0KCiAgaWYgKHN1YmlkZW50ICYgMHg4MCkgaWRlbnRpZmllcnMucHVzaChpZGVudCk7CiAgdmFyIGZpcnN0ID0gaWRlbnRpZmllcnNbMF0gLyA0MCB8IDA7CiAgdmFyIHNlY29uZCA9IGlkZW50aWZpZXJzWzBdICUgNDA7CiAgaWYgKHJlbGF0aXZlKSByZXN1bHQgPSBpZGVudGlmaWVycztlbHNlIHJlc3VsdCA9IFtmaXJzdCwgc2Vjb25kXS5jb25jYXQoaWRlbnRpZmllcnMu
c2xpY2UoMSkpOwoKICBpZiAodmFsdWVzKSB7CiAgICB2YXIgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcgJyldOwogICAgaWYgKHRtcCA9PT0gdW5kZWZpbmVkKSB0bXAgPSB2YWx1ZXNbcmVzdWx0LmpvaW4oJy4nKV07CiAgICBpZiAodG1wICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHRtcDsKICB9CgogIHJldHVybiByZXN1bHQ7Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGltZSA9IGZ1bmN0aW9uIGRlY29kZVRpbWUoYnVmZmVyLCB0YWcpIHsKICB2YXIgc3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCk7CiAg
dmFyIHllYXI7CiAgdmFyIG1vbjsKICB2YXIgZGF5OwogIHZhciBob3VyOwogIHZhciBtaW47CiAgdmFyIHNlYzsKCiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7CiAgICB5ZWFyID0gc3RyLnNsaWNlKDAsIDQpIHwgMDsKICAgIG1vbiA9IHN0ci5zbGljZSg0LCA2KSB8IDA7CiAgICBkYXkgPSBzdHIuc2xpY2UoNiwgOCkgfCAwOwogICAgaG91ciA9IHN0ci5zbGljZSg4LCAxMCkgfCAwOwogICAgbWluID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwOwogICAgc2VjID0gc3RyLnNsaWNlKDEyLCAxNCkgfCAwOwogIH0gZWxzZSBpZiAo
dGFnID09PSAndXRjdGltZScpIHsKICAgIHllYXIgPSBzdHIuc2xpY2UoMCwgMikgfCAwOwogICAgbW9uID0gc3RyLnNsaWNlKDIsIDQpIHwgMDsKICAgIGRheSA9IHN0ci5zbGljZSg0LCA2KSB8IDA7CiAgICBob3VyID0gc3RyLnNsaWNlKDYsIDgpIHwgMDsKICAgIG1pbiA9IHN0ci5zbGljZSg4LCAxMCkgfCAwOwogICAgc2VjID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwOwogICAgaWYgKHllYXIgPCA3MCkgeWVhciA9IDIwMDAgKyB5ZWFyO2Vsc2UgeWVhciA9IDE5MDAgKyB5ZWFyOwogIH0gZWxzZSB7CiAgICByZXR1cm4gYnVm
ZmVyLmVycm9yKCdEZWNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7CiAgfQoKICByZXR1cm4gRGF0ZS5VVEMoeWVhciwgbW9uIC0gMSwgZGF5LCBob3VyLCBtaW4sIHNlYywgMCk7Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlTnVsbCA9IGZ1bmN0aW9uIGRlY29kZU51bGwoKSB7CiAgcmV0dXJuIG51bGw7Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlQm9vbCA9IGZ1bmN0aW9uIGRlY29kZUJvb2woYnVmZmVyKSB7CiAgdmFyIHJlcyA9IGJ1ZmZlci5yZWFkVUludDgoKTsKICBp
ZiAoYnVmZmVyLmlzRXJyb3IocmVzKSkgcmV0dXJuIHJlcztlbHNlIHJldHVybiByZXMgIT09IDA7Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlSW50ID0gZnVuY3Rpb24gZGVjb2RlSW50KGJ1ZmZlciwgdmFsdWVzKSB7CiAgLy8gQmlnaW50LCByZXR1cm4gYXMgaXQgaXMgKGFzc3VtZSBiaWcgZW5kaWFuKQogIHZhciByYXcgPSBidWZmZXIucmF3KCk7CiAgdmFyIHJlcyA9IG5ldyBiaWdudW0ocmF3KTsKICBpZiAodmFsdWVzKSByZXMgPSB2YWx1ZXNbcmVzLnRvU3RyaW5nKDEwKV0gfHwgcmVzOwogIHJldHVybiByZXM7
Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7CiAgaWYgKHR5cGVvZiBlbnRpdHkgPT09ICdmdW5jdGlvbicpIGVudGl0eSA9IGVudGl0eShvYmopOwogIHJldHVybiBlbnRpdHkuX2dldERlY29kZXIoJ2RlcicpLnRyZWU7Cn07IC8vIFV0aWxpdHkgbWV0aG9kcwoKCmZ1bmN0aW9uIGRlckRlY29kZVRhZyhidWYsIGZhaWwpIHsKICB2YXIgdGFnID0gYnVmLnJlYWRVSW50OChmYWlsKTsKICBpZiAoYnVmLmlzRXJyb3IodGFnKSkgcmV0dXJuIHRhZzsKICB2YXIgY2xzID0gZGVy
LnRhZ0NsYXNzW3RhZyA+PiA2XTsKICB2YXIgcHJpbWl0aXZlID0gKHRhZyAmIDB4MjApID09PSAwOyAvLyBNdWx0aS1vY3RldCB0YWcgLSBsb2FkCgogIGlmICgodGFnICYgMHgxZikgPT09IDB4MWYpIHsKICAgIHZhciBvY3QgPSB0YWc7CiAgICB0YWcgPSAwOwoKICAgIHdoaWxlICgob2N0ICYgMHg4MCkgPT09IDB4ODApIHsKICAgICAgb2N0ID0gYnVmLnJlYWRVSW50OChmYWlsKTsKICAgICAgaWYgKGJ1Zi5pc0Vycm9yKG9jdCkpIHJldHVybiBvY3Q7CiAgICAgIHRhZyA8PD0gNzsKICAgICAgdGFnIHw9IG9jdCAmIDB4N2Y7
CiAgICB9CiAgfSBlbHNlIHsKICAgIHRhZyAmPSAweDFmOwogIH0KCiAgdmFyIHRhZ1N0ciA9IGRlci50YWdbdGFnXTsKICByZXR1cm4gewogICAgY2xzOiBjbHMsCiAgICBwcmltaXRpdmU6IHByaW1pdGl2ZSwKICAgIHRhZzogdGFnLAogICAgdGFnU3RyOiB0YWdTdHIKICB9Owp9CgpmdW5jdGlvbiBkZXJEZWNvZGVMZW4oYnVmLCBwcmltaXRpdmUsIGZhaWwpIHsKICB2YXIgbGVuID0gYnVmLnJlYWRVSW50OChmYWlsKTsKICBpZiAoYnVmLmlzRXJyb3IobGVuKSkgcmV0dXJuIGxlbjsgLy8gSW5kZWZpbml0ZSBmb3JtCgogIGlm
ICghcHJpbWl0aXZlICYmIGxlbiA9PT0gMHg4MCkgcmV0dXJuIG51bGw7IC8vIERlZmluaXRlIGZvcm0KCiAgaWYgKChsZW4gJiAweDgwKSA9PT0gMCkgewogICAgLy8gU2hvcnQgZm9ybQogICAgcmV0dXJuIGxlbjsKICB9IC8vIExvbmcgZm9ybQoKCiAgdmFyIG51bSA9IGxlbiAmIDB4N2Y7CiAgaWYgKG51bSA+IDQpIHJldHVybiBidWYuZXJyb3IoJ2xlbmd0aCBvY3RlY3QgaXMgdG9vIGxvbmcnKTsKICBsZW4gPSAwOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IG51bTsgaSsrKSB7CiAgICBsZW4gPDw9IDg7CiAgICB2YXIgaiA9
IGJ1Zi5yZWFkVUludDgoZmFpbCk7CiAgICBpZiAoYnVmLmlzRXJyb3IoaikpIHJldHVybiBqOwogICAgbGVuIHw9IGo7CiAgfQoKICByZXR1cm4gbGVuOwp9Cgp9LHsiLi4vYmFzZS9idWZmZXIiOjE2OSwiLi4vYmFzZS9ub2RlIjoxNzEsIi4uL2NvbnN0YW50cy9kZXIiOjE3MywiYm4uanMiOjE4MSwiaW5oZXJpdHMiOjI3OH1dLDE3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBkZWNvZGVycyA9IGV4cG9ydHM7CmRlY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7CmRl
Y29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7Cgp9LHsiLi9kZXIiOjE3NSwiLi9wZW0iOjE3N31dLDE3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyOwoKdmFyIERFUkRlY29kZXIgPSByZXF1aXJlKCcuL2RlcicpOwoKZnVuY3Rpb24gUEVNRGVjb2RlcihlbnRpdHkpIHsKICBERVJEZWNvZGVyLmNhbGwodGhpcywgZW50aXR5KTsKICB0
aGlzLmVuYyA9ICdwZW0nOwp9Cgppbmhlcml0cyhQRU1EZWNvZGVyLCBERVJEZWNvZGVyKTsKbW9kdWxlLmV4cG9ydHMgPSBQRU1EZWNvZGVyOwoKUEVNRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHsKICB2YXIgbGluZXMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoL1tcclxuXSsvZyk7CiAgdmFyIGxhYmVsID0gb3B0aW9ucy5sYWJlbC50b1VwcGVyQ2FzZSgpOwogIHZhciByZSA9IC9eLS0tLS0oQkVHSU58RU5EKSAoW14tXSspLS0tLS0kLzsKICB2YXIgc3RhcnQgPSAt
MTsKICB2YXIgZW5kID0gLTE7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBtYXRjaCA9IGxpbmVzW2ldLm1hdGNoKHJlKTsKICAgIGlmIChtYXRjaCA9PT0gbnVsbCkgY29udGludWU7CiAgICBpZiAobWF0Y2hbMl0gIT09IGxhYmVsKSBjb250aW51ZTsKCiAgICBpZiAoc3RhcnQgPT09IC0xKSB7CiAgICAgIGlmIChtYXRjaFsxXSAhPT0gJ0JFR0lOJykgYnJlYWs7CiAgICAgIHN0YXJ0ID0gaTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChtYXRjaFsxXSAhPT0gJ0VORCcpIGJyZWFr
OwogICAgICBlbmQgPSBpOwogICAgICBicmVhazsKICAgIH0KICB9CgogIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSkgdGhyb3cgbmV3IEVycm9yKCdQRU0gc2VjdGlvbiBub3QgZm91bmQgZm9yOiAnICsgbGFiZWwpOwogIHZhciBiYXNlNjQgPSBsaW5lcy5zbGljZShzdGFydCArIDEsIGVuZCkuam9pbignJyk7IC8vIFJlbW92ZSBleGNlc3NpdmUgc3ltYm9scwoKICBiYXNlNjQucmVwbGFjZSgvW15hLXowLTkrLz1dKy9naSwgJycpOwogIHZhciBpbnB1dCA9IEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpOwog
IHJldHVybiBERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUuY2FsbCh0aGlzLCBpbnB1dCwgb3B0aW9ucyk7Cn07Cgp9LHsiLi9kZXIiOjE3NSwiaW5oZXJpdHMiOjI3OCwic2FmZXItYnVmZmVyIjozODV9XSwxNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBOb2RlID0gcmVxdWlyZSgnLi4vYmFzZS9ub2RlJyk7IC8vIEltcG9y
dCBERVIgY29uc3RhbnRzCgoKdmFyIGRlciA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9kZXInKTsKCmZ1bmN0aW9uIERFUkVuY29kZXIoZW50aXR5KSB7CiAgdGhpcy5lbmMgPSAnZGVyJzsKICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTsKICB0aGlzLmVudGl0eSA9IGVudGl0eTsgLy8gQ29uc3RydWN0IGJhc2UgdHJlZQoKICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpOwoKICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IERFUkVuY29kZXI7CgpERVJFbmNvZGVyLnByb3RvdHlwZS5l
bmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIpIHsKICByZXR1cm4gdGhpcy50cmVlLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpLmpvaW4oKTsKfTsgLy8gVHJlZSBtZXRob2RzCgoKZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHsKICBOb2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7Cn0KCmluaGVyaXRzKERFUk5vZGUsIE5vZGUpOwoKREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUNvbXBvc2l0ZSA9IGZ1bmN0aW9uIGVuY29kZUNvbXBvc2l0ZSh0YWcsIHByaW1pdGl2ZSwgY2xzLCBjb250ZW50KSB7CiAg
dmFyIGVuY29kZWRUYWcgPSBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgdGhpcy5yZXBvcnRlcik7IC8vIFNob3J0IGZvcm0KCiAgaWYgKGNvbnRlbnQubGVuZ3RoIDwgMHg4MCkgewogICAgdmFyIF9oZWFkZXIgPSBCdWZmZXIuYWxsb2MoMik7CgogICAgX2hlYWRlclswXSA9IGVuY29kZWRUYWc7CiAgICBfaGVhZGVyWzFdID0gY29udGVudC5sZW5ndGg7CiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbX2hlYWRlciwgY29udGVudF0pOwogIH0gLy8gTG9uZyBmb3JtCiAgLy8gQ291bnQgb2N0ZXRz
IHJlcXVpcmVkIHRvIHN0b3JlIGxlbmd0aAoKCiAgdmFyIGxlbk9jdGV0cyA9IDE7CgogIGZvciAodmFyIGkgPSBjb250ZW50Lmxlbmd0aDsgaSA+PSAweDEwMDsgaSA+Pj0gOCkgewogICAgbGVuT2N0ZXRzKys7CiAgfQoKICB2YXIgaGVhZGVyID0gQnVmZmVyLmFsbG9jKDEgKyAxICsgbGVuT2N0ZXRzKTsKICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnOwogIGhlYWRlclsxXSA9IDB4ODAgfCBsZW5PY3RldHM7CgogIGZvciAodmFyIF9pID0gMSArIGxlbk9jdGV0cywgaiA9IGNvbnRlbnQubGVuZ3RoOyBqID4gMDsgX2ktLSwgaiA+
Pj0gOCkgewogICAgaGVhZGVyW19pXSA9IGogJiAweGZmOwogIH0KCiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoW2hlYWRlciwgY29udGVudF0pOwp9OwoKREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVN0ciA9IGZ1bmN0aW9uIGVuY29kZVN0cihzdHIsIHRhZykgewogIGlmICh0YWcgPT09ICdiaXRzdHInKSB7CiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbc3RyLnVudXNlZCB8IDAsIHN0ci5kYXRhXSk7CiAgfSBlbHNlIGlmICh0YWcgPT09ICdibXBzdHInKSB7CiAgICB2YXIgYnVmID0g
QnVmZmVyLmFsbG9jKHN0ci5sZW5ndGggKiAyKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykgewogICAgICBidWYud3JpdGVVSW50MTZCRShzdHIuY2hhckNvZGVBdChpKSwgaSAqIDIpOwogICAgfQoKICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGJ1Zik7CiAgfSBlbHNlIGlmICh0YWcgPT09ICdudW1zdHInKSB7CiAgICBpZiAoIXRoaXMuX2lzTnVtc3RyKHN0cikpIHsKICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBu
dW1zdHIgc3VwcG9ydHMgJyArICdvbmx5IGRpZ2l0cyBhbmQgc3BhY2UnKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpOwogIH0gZWxzZSBpZiAodGFnID09PSAncHJpbnRzdHInKSB7CiAgICBpZiAoIXRoaXMuX2lzUHJpbnRzdHIoc3RyKSkgewogICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IHByaW50c3RyIHN1cHBvcnRzICcgKyAnb25seSBsYXRpbiB1cHBlciBhbmQgbG93ZXIgY2FzZSBsZXR0ZXJzLCAnICsgJ2RpZ2l0cywg
c3BhY2UsIGFwb3N0cm9waGUsIGxlZnQgYW5kIHJpZ3RoICcgKyAncGFyZW50aGVzaXMsIHBsdXMgc2lnbiwgY29tbWEsIGh5cGhlbiwgJyArICdkb3QsIHNsYXNoLCBjb2xvbiwgZXF1YWwgc2lnbiwgJyArICdxdWVzdGlvbiBtYXJrJyk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTsKICB9IGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpIHsKICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7CiAgfSBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJykgewogICAg
cmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTsKICB9IGVsc2UgewogICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICsgdGFnICsgJyB1bnN1cHBvcnRlZCcpOwogIH0KfTsKCkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVPYmppZCA9IGZ1bmN0aW9uIGVuY29kZU9iamlkKGlkLCB2YWx1ZXMsIHJlbGF0aXZlKSB7CiAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHsKICAgIGlmICghdmFsdWVzKSByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignc3Ry
aW5nIG9iamlkIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCBmb3VuZCcpOwogICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkoaWQpKSByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQgbm90IGZvdW5kIGluIHZhbHVlcyBtYXAnKTsKICAgIGlkID0gdmFsdWVzW2lkXS5zcGxpdCgvW1xzLl0rL2cpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspIHsKICAgICAgaWRbaV0gfD0gMDsKICAgIH0KICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaWQpKSB7CiAgICBpZCA9IGlkLnNsaWNlKCk7
CgogICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgaWQubGVuZ3RoOyBfaTIrKykgewogICAgICBpZFtfaTJdIHw9IDA7CiAgICB9CiAgfQoKICBpZiAoIUFycmF5LmlzQXJyYXkoaWQpKSB7CiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQoKSBzaG91bGQgYmUgZWl0aGVyIGFycmF5IG9yIHN0cmluZywgJyArICdnb3Q6ICcgKyBKU09OLnN0cmluZ2lmeShpZCkpOwogIH0KCiAgaWYgKCFyZWxhdGl2ZSkgewogICAgaWYgKGlkWzFdID49IDQwKSByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU2Vjb25kIG9i
amlkIGlkZW50aWZpZXIgT09CJyk7CiAgICBpZC5zcGxpY2UoMCwgMiwgaWRbMF0gKiA0MCArIGlkWzFdKTsKICB9IC8vIENvdW50IG51bWJlciBvZiBvY3RldHMKCgogIHZhciBzaXplID0gMDsKCiAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgaWQubGVuZ3RoOyBfaTMrKykgewogICAgdmFyIGlkZW50ID0gaWRbX2kzXTsKCiAgICBmb3IgKHNpemUrKzsgaWRlbnQgPj0gMHg4MDsgaWRlbnQgPj49IDcpIHsKICAgICAgc2l6ZSsrOwogICAgfQogIH0KCiAgdmFyIG9iamlkID0gQnVmZmVyLmFsbG9jKHNpemUpOwogIHZhciBvZmZz
ZXQgPSBvYmppZC5sZW5ndGggLSAxOwoKICBmb3IgKHZhciBfaTQgPSBpZC5sZW5ndGggLSAxOyBfaTQgPj0gMDsgX2k0LS0pIHsKICAgIHZhciBfaWRlbnQgPSBpZFtfaTRdOwogICAgb2JqaWRbb2Zmc2V0LS1dID0gX2lkZW50ICYgMHg3ZjsKCiAgICB3aGlsZSAoKF9pZGVudCA+Pj0gNykgPiAwKSB7CiAgICAgIG9iamlkW29mZnNldC0tXSA9IDB4ODAgfCBfaWRlbnQgJiAweDdmOwogICAgfQogIH0KCiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob2JqaWQpOwp9OwoKZnVuY3Rpb24gdHdvKG51bSkgewogIGlm
IChudW0gPCAxMCkgcmV0dXJuICcwJyArIG51bTtlbHNlIHJldHVybiBudW07Cn0KCkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVUaW1lID0gZnVuY3Rpb24gZW5jb2RlVGltZSh0aW1lLCB0YWcpIHsKICB2YXIgc3RyOwogIHZhciBkYXRlID0gbmV3IERhdGUodGltZSk7CgogIGlmICh0YWcgPT09ICdnZW50aW1lJykgewogICAgc3RyID0gW3R3byhkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpLCB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLCB0
d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLCB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLCAnWiddLmpvaW4oJycpOwogIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHsKICAgIHN0ciA9IFt0d28oZGF0ZS5nZXRVVENGdWxsWWVhcigpICUgMTAwKSwgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLCB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLCB0d28oZGF0ZS5nZXRVVENIb3VycygpKSwgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSwgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSwgJ1onXS5qb2luKCcnKTsKICB9IGVs
c2UgewogICAgdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2RpbmcgJyArIHRhZyArICcgdGltZSBpcyBub3Qgc3VwcG9ydGVkIHlldCcpOwogIH0KCiAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihzdHIsICdvY3RzdHInKTsKfTsKCkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVOdWxsID0gZnVuY3Rpb24gZW5jb2RlTnVsbCgpIHsKICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcignJyk7Cn07CgpERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSwgdmFsdWVzKSB7CiAgaWYg
KHR5cGVvZiBudW0gPT09ICdzdHJpbmcnKSB7CiAgICBpZiAoIXZhbHVlcykgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1N0cmluZyBpbnQgb3IgZW51bSBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAnKTsKCiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShudW0pKSB7CiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdWYWx1ZXMgbWFwIGRvZXNuXCd0IGNvbnRhaW46ICcgKyBKU09OLnN0cmluZ2lmeShudW0pKTsKICAgIH0KCiAgICBudW0gPSB2YWx1ZXNbbnVtXTsKICB9IC8vIEJpZ251bSwgYXNzdW1l
IGJpZyBlbmRpYW4KCgogIGlmICh0eXBlb2YgbnVtICE9PSAnbnVtYmVyJyAmJiAhQnVmZmVyLmlzQnVmZmVyKG51bSkpIHsKICAgIHZhciBudW1BcnJheSA9IG51bS50b0FycmF5KCk7CgogICAgaWYgKCFudW0uc2lnbiAmJiBudW1BcnJheVswXSAmIDB4ODApIHsKICAgICAgbnVtQXJyYXkudW5zaGlmdCgwKTsKICAgIH0KCiAgICBudW0gPSBCdWZmZXIuZnJvbShudW1BcnJheSk7CiAgfQoKICBpZiAoQnVmZmVyLmlzQnVmZmVyKG51bSkpIHsKICAgIHZhciBfc2l6ZSA9IG51bS5sZW5ndGg7CiAgICBpZiAobnVtLmxlbmd0aCA9
PT0gMCkgX3NpemUrKzsKCiAgICB2YXIgX291dCA9IEJ1ZmZlci5hbGxvYyhfc2l6ZSk7CgogICAgbnVtLmNvcHkoX291dCk7CiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMCkgX291dFswXSA9IDA7CiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihfb3V0KTsKICB9CgogIGlmIChudW0gPCAweDgwKSByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihudW0pOwogIGlmIChudW0gPCAweDEwMCkgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWzAsIG51bV0pOwogIHZhciBzaXplID0gMTsKCiAg
Zm9yICh2YXIgaSA9IG51bTsgaSA+PSAweDEwMDsgaSA+Pj0gOCkgewogICAgc2l6ZSsrOwogIH0KCiAgdmFyIG91dCA9IG5ldyBBcnJheShzaXplKTsKCiAgZm9yICh2YXIgX2k1ID0gb3V0Lmxlbmd0aCAtIDE7IF9pNSA+PSAwOyBfaTUtLSkgewogICAgb3V0W19pNV0gPSBudW0gJiAweGZmOwogICAgbnVtID4+PSA4OwogIH0KCiAgaWYgKG91dFswXSAmIDB4ODApIHsKICAgIG91dC51bnNoaWZ0KDApOwogIH0KCiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoQnVmZmVyLmZyb20ob3V0KSk7Cn07CgpERVJOb2Rl
LnByb3RvdHlwZS5fZW5jb2RlQm9vbCA9IGZ1bmN0aW9uIGVuY29kZUJvb2wodmFsdWUpIHsKICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcih2YWx1ZSA/IDB4ZmYgOiAwKTsKfTsKCkRFUk5vZGUucHJvdG90eXBlLl91c2UgPSBmdW5jdGlvbiB1c2UoZW50aXR5LCBvYmopIHsKICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJykgZW50aXR5ID0gZW50aXR5KG9iaik7CiAgcmV0dXJuIGVudGl0eS5fZ2V0RW5jb2RlcignZGVyJykudHJlZTsKfTsKCkRFUk5vZGUucHJvdG90eXBlLl9za2lwRGVmYXVsdCA9
IGZ1bmN0aW9uIHNraXBEZWZhdWx0KGRhdGFCdWZmZXIsIHJlcG9ydGVyLCBwYXJlbnQpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7CiAgdmFyIGk7CiAgaWYgKHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpIHJldHVybiBmYWxzZTsKICB2YXIgZGF0YSA9IGRhdGFCdWZmZXIuam9pbigpOwogIGlmIChzdGF0ZS5kZWZhdWx0QnVmZmVyID09PSB1bmRlZmluZWQpIHN0YXRlLmRlZmF1bHRCdWZmZXIgPSB0aGlzLl9lbmNvZGVWYWx1ZShzdGF0ZVsnZGVmYXVsdCddLCByZXBvcnRlciwgcGFyZW50KS5qb2luKCk7CiAg
aWYgKGRhdGEubGVuZ3RoICE9PSBzdGF0ZS5kZWZhdWx0QnVmZmVyLmxlbmd0aCkgcmV0dXJuIGZhbHNlOwoKICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgaWYgKGRhdGFbaV0gIT09IHN0YXRlLmRlZmF1bHRCdWZmZXJbaV0pIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiB0cnVlOwp9OyAvLyBVdGlsaXR5IG1ldGhvZHMKCgpmdW5jdGlvbiBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgcmVwb3J0ZXIpIHsKICB2YXIgcmVzOwogIGlmICh0YWcgPT09ICdzZXFvZicpIHRhZyA9ICdzZXEn
O2Vsc2UgaWYgKHRhZyA9PT0gJ3NldG9mJykgdGFnID0gJ3NldCc7CiAgaWYgKGRlci50YWdCeU5hbWUuaGFzT3duUHJvcGVydHkodGFnKSkgcmVzID0gZGVyLnRhZ0J5TmFtZVt0YWddO2Vsc2UgaWYgKHR5cGVvZiB0YWcgPT09ICdudW1iZXInICYmICh0YWcgfCAwKSA9PT0gdGFnKSByZXMgPSB0YWc7ZWxzZSByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1Vua25vd24gdGFnOiAnICsgdGFnKTsKICBpZiAocmVzID49IDB4MWYpIHJldHVybiByZXBvcnRlci5lcnJvcignTXVsdGktb2N0ZXQgdGFnIGVuY29kaW5nIHVuc3VwcG9ydGVk
Jyk7CiAgaWYgKCFwcmltaXRpdmUpIHJlcyB8PSAweDIwOwogIHJlcyB8PSBkZXIudGFnQ2xhc3NCeU5hbWVbY2xzIHx8ICd1bml2ZXJzYWwnXSA8PCA2OwogIHJldHVybiByZXM7Cn0KCn0seyIuLi9iYXNlL25vZGUiOjE3MSwiLi4vY29uc3RhbnRzL2RlciI6MTczLCJpbmhlcml0cyI6Mjc4LCJzYWZlci1idWZmZXIiOjM4NX1dLDE3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBlbmNvZGVycyA9IGV4cG9ydHM7CmVuY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7CmVu
Y29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7Cgp9LHsiLi9kZXIiOjE3OCwiLi9wZW0iOjE4MH1dLDE4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgREVSRW5jb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7CgpmdW5jdGlvbiBQRU1FbmNvZGVyKGVudGl0eSkgewogIERFUkVuY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpOwogIHRoaXMuZW5jID0gJ3BlbSc7Cn0KCmluaGVyaXRzKFBFTUVuY29kZXIsIERFUkVu
Y29kZXIpOwptb2R1bGUuZXhwb3J0cyA9IFBFTUVuY29kZXI7CgpQRU1FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgb3B0aW9ucykgewogIHZhciBidWYgPSBERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUuY2FsbCh0aGlzLCBkYXRhKTsKICB2YXIgcCA9IGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7CiAgdmFyIG91dCA9IFsnLS0tLS1CRUdJTiAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLSddOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpICs9IDY0KSB7CiAgICBvdXQu
cHVzaChwLnNsaWNlKGksIGkgKyA2NCkpOwogIH0KCiAgb3V0LnB1c2goJy0tLS0tRU5EICcgKyBvcHRpb25zLmxhYmVsICsgJy0tLS0tJyk7CiAgcmV0dXJuIG91dC5qb2luKCdcbicpOwp9OwoKfSx7Ii4vZGVyIjoxNzgsImluaGVyaXRzIjoyNzh9XSwxODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0
ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCihmdW5jdGlvbiAobW9kdWxlLCBleHBv
cnRzKSB7CiAgJ3VzZSBzdHJpY3QnOyAvLyBVdGlscwoKICBmdW5jdGlvbiBhc3NlcnQodmFsLCBtc2cpIHsKICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7CiAgfSAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZQogIC8vIGFyY2hpdGVjdHVyZSB5ZXQuCgoKICBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yOwoKICAgIHZhciBU
ZW1wQ3RvciA9IGZ1bmN0aW9uIFRlbXBDdG9yKCkge307CgogICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTsKICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7CiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7CiAgfSAvLyBCTgoKCiAgZnVuY3Rpb24gQk4obnVtYmVyLCBiYXNlLCBlbmRpYW4pIHsKICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHsKICAgICAgcmV0dXJuIG51bWJlcjsKICAgIH0KCiAgICB0aGlzLm5lZ2F0aXZlID0gMDsKICAgIHRoaXMud29yZHMg
PSBudWxsOwogICAgdGhpcy5sZW5ndGggPSAwOyAvLyBSZWR1Y3Rpb24gY29udGV4dAoKICAgIHRoaXMucmVkID0gbnVsbDsKCiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7CiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHsKICAgICAgICBlbmRpYW4gPSBiYXNlOwogICAgICAgIGJhc2UgPSAxMDsKICAgICAgfQoKICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpOwogICAgfQogIH0KCiAgaWYgKF90eXBlb2YobW9kdWxlKSA9PT0gJ29iamVjdCcp
IHsKICAgIG1vZHVsZS5leHBvcnRzID0gQk47CiAgfSBlbHNlIHsKICAgIGV4cG9ydHMuQk4gPSBCTjsKICB9CgogIEJOLkJOID0gQk47CiAgQk4ud29yZFNpemUgPSAyNjsKICB2YXIgQnVmZmVyOwoKICB0cnkgewogICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyOwogIH0gY2F0Y2ggKGUpIHt9CgogIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOKG51bSkgewogICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgX3R5cGVv
ZihudW0pID09PSAnb2JqZWN0JyAmJiBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTsKICB9OwoKICBCTi5tYXggPSBmdW5jdGlvbiBtYXgobGVmdCwgcmlnaHQpIHsKICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDsKICAgIHJldHVybiByaWdodDsKICB9OwoKICBCTi5taW4gPSBmdW5jdGlvbiBtaW4obGVmdCwgcmlnaHQpIHsKICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDsKICAgIHJldHVybiByaWdo
dDsKICB9OwoKICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KG51bWJlciwgYmFzZSwgZW5kaWFuKSB7CiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHsKICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pOwogICAgfQoKICAgIGlmIChfdHlwZW9mKG51bWJlcikgPT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pOwogICAgfQoKICAgIGlmIChiYXNlID09PSAnaGV4JykgewogICAgICBi
YXNlID0gMTY7CiAgICB9CgogICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpOwogICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXHMrL2csICcnKTsKICAgIHZhciBzdGFydCA9IDA7CgogICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7CiAgICAgIHN0YXJ0Kys7CiAgICB9CgogICAgaWYgKGJhc2UgPT09IDE2KSB7CiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJl
ciwgYmFzZSwgc3RhcnQpOwogICAgfQoKICAgIGlmIChudW1iZXJbMF0gPT09ICctJykgewogICAgICB0aGlzLm5lZ2F0aXZlID0gMTsKICAgIH0KCiAgICB0aGlzLnN0cmlwKCk7CiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47CgogICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pOwogIH07CgogIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7CiAgICBpZiAobnVtYmVyIDwgMCkgewogICAgICB0aGlz
Lm5lZ2F0aXZlID0gMTsKICAgICAgbnVtYmVyID0gLW51bWJlcjsKICAgIH0KCiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7CiAgICAgIHRoaXMud29yZHMgPSBbbnVtYmVyICYgMHgzZmZmZmZmXTsKICAgICAgdGhpcy5sZW5ndGggPSAxOwogICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7CiAgICAgIHRoaXMud29yZHMgPSBbbnVtYmVyICYgMHgzZmZmZmZmLCBudW1iZXIgLyAweDQwMDAwMDAgJiAweDNmZmZmZmZdOwogICAgICB0aGlzLmxlbmd0aCA9IDI7CiAgICB9IGVsc2UgewogICAgICBh
c3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKQoKICAgICAgdGhpcy53b3JkcyA9IFtudW1iZXIgJiAweDNmZmZmZmYsIG51bWJlciAvIDB4NDAwMDAwMCAmIDB4M2ZmZmZmZiwgMV07CiAgICAgIHRoaXMubGVuZ3RoID0gMzsKICAgIH0KCiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47IC8vIFJldmVyc2UgdGhlIGJ5dGVzCgogICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pOwogIH07CgogIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0g
ZnVuY3Rpb24gX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbikgewogICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXkKICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpOwoKICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHsKICAgICAgdGhpcy53b3JkcyA9IFswXTsKICAgICAgdGhpcy5sZW5ndGggPSAxOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7CiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRo
aXMubGVuZ3RoKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7CiAgICB9CgogICAgdmFyIGosIHc7CiAgICB2YXIgb2ZmID0gMDsKCiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7CiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHsKICAgICAgICB3ID0gbnVtYmVyW2ldIHwgbnVtYmVyW2kgLSAxXSA8PCA4IHwgbnVtYmVyW2kgLSAyXSA8PCAxNjsKICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcg
PDwgb2ZmICYgMHgzZmZmZmZmOwogICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gdyA+Pj4gMjYgLSBvZmYgJiAweDNmZmZmZmY7CiAgICAgICAgb2ZmICs9IDI0OwoKICAgICAgICBpZiAob2ZmID49IDI2KSB7CiAgICAgICAgICBvZmYgLT0gMjY7CiAgICAgICAgICBqKys7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykgewogICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykgewogICAgICAgIHcgPSBudW1iZXJbaV0gfCBudW1iZXJbaSArIDFd
IDw8IDggfCBudW1iZXJbaSArIDJdIDw8IDE2OwogICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA8PCBvZmYgJiAweDNmZmZmZmY7CiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSB3ID4+PiAyNiAtIG9mZiAmIDB4M2ZmZmZmZjsKICAgICAgICBvZmYgKz0gMjQ7CgogICAgICAgIGlmIChvZmYgPj0gMjYpIHsKICAgICAgICAgIG9mZiAtPSAyNjsKICAgICAgICAgIGorKzsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdGhpcy5zdHJpcCgpOwogIH07CgogIGZ1bmN0aW9uIHBhcnNlSGV4KHN0ciwgc3RhcnQs
IGVuZCkgewogICAgdmFyIHIgPSAwOwogICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7CgogICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHsKICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4OwogICAgICByIDw8PSA0OyAvLyAnYScgLSAnZicKCiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHsKICAgICAgICByIHw9IGMgLSA0OSArIDB4YTsgLy8gJ0EnIC0gJ0YnCiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKSB7CiAgICAgICAgciB8PSBjIC0g
MTcgKyAweGE7IC8vICcwJyAtICc5JwogICAgICB9IGVsc2UgewogICAgICAgIHIgfD0gYyAmIDB4ZjsKICAgICAgfQogICAgfQoKICAgIHJldHVybiByOwogIH0KCiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleChudW1iZXIsIHN0YXJ0KSB7CiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlcgogICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTsKICAgIHRoaXMud29yZHMg
PSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICB0aGlzLndvcmRzW2ldID0gMDsKICAgIH0KCiAgICB2YXIgaiwgdzsgLy8gU2NhbiAyNC1iaXQgY2h1bmtzIGFuZCBhZGQgdGhlbSB0byB0aGUgbnVtYmVyCgogICAgdmFyIG9mZiA9IDA7CgogICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDYsIGogPSAwOyBpID49IHN0YXJ0OyBpIC09IDYpIHsKICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpOwogICAgICB0aGlzLndvcmRz
W2pdIHw9IHcgPDwgb2ZmICYgMHgzZmZmZmZmOyAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYgoKICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gMjYgLSBvZmYgJiAweDNmZmZmZjsKICAgICAgb2ZmICs9IDI0OwoKICAgICAgaWYgKG9mZiA+PSAyNikgewogICAgICAgIG9mZiAtPSAyNjsKICAgICAgICBqKys7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoaSArIDYgIT09IHN0YXJ0KSB7CiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIs
IHN0YXJ0LCBpICsgNik7CiAgICAgIHRoaXMud29yZHNbal0gfD0gdyA8PCBvZmYgJiAweDNmZmZmZmY7CiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+IDI2IC0gb2ZmICYgMHgzZmZmZmY7CiAgICB9CgogICAgdGhpcy5zdHJpcCgpOwogIH07CgogIGZ1bmN0aW9uIHBhcnNlQmFzZShzdHIsIHN0YXJ0LCBlbmQsIG11bCkgewogICAgdmFyIHIgPSAwOwogICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7CgogICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHsKICAgICAgdmFyIGMg
PSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4OwogICAgICByICo9IG11bDsgLy8gJ2EnCgogICAgICBpZiAoYyA+PSA0OSkgewogICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhOyAvLyAnQScKICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7CiAgICAgICAgciArPSBjIC0gMTcgKyAweGE7IC8vICcwJyAtICc5JwogICAgICB9IGVsc2UgewogICAgICAgIHIgKz0gYzsKICAgICAgfQogICAgfQoKICAgIHJldHVybiByOwogIH0KCiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlKG51bWJlciwgYmFzZSwg
c3RhcnQpIHsKICAgIC8vIEluaXRpYWxpemUgYXMgemVybwogICAgdGhpcy53b3JkcyA9IFswXTsKICAgIHRoaXMubGVuZ3RoID0gMTsgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlCgogICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7CiAgICAgIGxpbWJMZW4rKzsKICAgIH0KCiAgICBsaW1iTGVuLS07CiAgICBsaW1iUG93ID0gbGltYlBvdyAvIGJhc2UgfCAwOwogICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0
OwogICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjsKICAgIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7CiAgICB2YXIgd29yZCA9IDA7CgogICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHsKICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTsKICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTsKCiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkgewogICAgICAgIHRoaXMud29yZHNb
MF0gKz0gd29yZDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTsKICAgICAgfQogICAgfQoKICAgIGlmIChtb2QgIT09IDApIHsKICAgICAgdmFyIHBvdyA9IDE7CiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykgewogICAgICAgIHBvdyAqPSBiYXNlOwogICAgICB9CgogICAgICB0aGlzLmltdWxuKHBvdyk7CgogICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHsK
ICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7CiAgICAgIH0KICAgIH0KICB9OwoKICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkoZGVzdCkgewogICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldOwogICAgfQoKICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7CiAg
ICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTsKICAgIGRlc3QucmVkID0gdGhpcy5yZWQ7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7CiAgICB2YXIgciA9IG5ldyBCTihudWxsKTsKICAgIHRoaXMuY29weShyKTsKICAgIHJldHVybiByOwogIH07CgogIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZChzaXplKSB7CiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBzaXplKSB7CiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwOwogICAgfQoKICAg
IHJldHVybiB0aGlzOwogIH07IC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYAoKCiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAoKSB7CiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkgewogICAgICB0aGlzLmxlbmd0aC0tOwogICAgfQoKICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpOwogIH07CgogIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24oKSB7CiAgICAvLyAtMCA9IDAKICAgIGlmICh0
aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAwOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH07CgogIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHsKICAgIHJldHVybiAodGhpcy5yZWQgPyAnPEJOLVI6ICcgOiAnPEJOOiAnKSArIHRoaXMudG9TdHJpbmcoMTYpICsgJz4nOwogIH07CiAgLyoKICAgdmFyIHplcm9zID0gW107CiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTsKICB2YXIgZ3JvdXBCYXNlcyA9IFtdOwogICB2YXIgcyA9
ICcnOwogIHZhciBpID0gLTE7CiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7CiAgICB6ZXJvc1tpXSA9IHM7CiAgICBzICs9ICcwJzsKICB9CiAgZ3JvdXBTaXplc1swXSA9IDA7CiAgZ3JvdXBTaXplc1sxXSA9IDA7CiAgZ3JvdXBCYXNlc1swXSA9IDA7CiAgZ3JvdXBCYXNlc1sxXSA9IDA7CiAgdmFyIGJhc2UgPSAyIC0gMTsKICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7CiAgICB2YXIgZ3JvdXBTaXplID0gMDsKICAgIHZhciBncm91cEJhc2UgPSAxOwogICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRT
aXplKSAvIGJhc2UpIHsKICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7CiAgICAgIGdyb3VwU2l6ZSArPSAxOwogICAgfQogICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTsKICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7CiAgfQogICAqLwoKCiAgdmFyIHplcm9zID0gWycnLCAnMCcsICcwMCcsICcwMDAnLCAnMDAwMCcsICcwMDAwMCcsICcwMDAwMDAnLCAnMDAwMDAwMCcsICcwMDAwMDAwMCcsICcwMDAwMDAwMDAnLCAnMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAnLCAnMDAwMDAw
MDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAnLCAnMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMDAnLCAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLCAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLCAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCddOwogIHZhciBn
cm91cFNpemVzID0gWzAsIDAsIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCwgOCwgNywgNywgNywgNywgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNV07CiAgdmFyIGdyb3VwQmFzZXMgPSBbMCwgMCwgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsIDE2Nzc3
MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMiwgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XTsKCiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoYmFzZSwgcGFkZGluZykgewogICAgYmFzZSA9IGJhc2UgfHwgMTA7CiAgICBwYWRkaW5nID0g
cGFkZGluZyB8IDAgfHwgMTsKICAgIHZhciBvdXQ7CgogICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7CiAgICAgIG91dCA9ICcnOwogICAgICB2YXIgb2ZmID0gMDsKICAgICAgdmFyIGNhcnJ5ID0gMDsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTsKICAgICAgICB2YXIgd29yZCA9ICgodyA8PCBvZmYgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpOwogICAgICAgIGNhcnJ5ID0gdyA+Pj4gMjQgLSBv
ZmYgJiAweGZmZmZmZjsKCiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSkgewogICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7CiAgICAgICAgfQoKICAgICAgICBvZmYgKz0gMjsKCiAgICAgICAgaWYgKG9mZiA+PSAyNikgewogICAgICAgICAgb2ZmIC09IDI2OwogICAgICAgICAgaS0tOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7
CiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0OwogICAgICB9CgogICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHsKICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgICAgb3V0ID0gJy0nICsgb3V0OwogICAgICB9CgogICAgICByZXR1cm4gb3V0OwogICAgfQoKICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7CiAgICAgIC8vIHZhciBncm91cFNpemUg
PSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7CiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdOyAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTsKCiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdOwogICAgICBvdXQgPSAnJzsKICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7CiAgICAgIGMubmVnYXRpdmUgPSAwOwoKICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7CiAgICAgICAgdmFyIHIgPSBjLm1vZG4o
Z3JvdXBCYXNlKS50b1N0cmluZyhiYXNlKTsKICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpOwoKICAgICAgICBpZiAoIWMuaXNaZXJvKCkpIHsKICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG91dCA9IHIgKyBvdXQ7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAodGhpcy5pc1plcm8oKSkgewogICAgICAgIG91dCA9ICcwJyArIG91dDsKICAgICAgfQoKICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9
PSAwKSB7CiAgICAgICAgb3V0ID0gJzAnICsgb3V0OwogICAgICB9CgogICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgewogICAgICAgIG91dCA9ICctJyArIG91dDsKICAgICAgfQoKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIoKSB7CiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTsKCiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHsK
ICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7CiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAzICYmIHRoaXMud29yZHNbMl0gPT09IDB4MDEpIHsKICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldAogICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArIHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7CiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikgewogICAgICBhc3NlcnQoZmFsc2UsICdOdW1iZXIgY2FuIG9ubHkgc2Fm
ZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHMnKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMCA/IC1yZXQgOiByZXQ7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHsKICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTsKICB9OwoKICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlcihlbmRpYW4sIGxlbmd0aCkgewogICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTsKICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1
ZmZlciwgZW5kaWFuLCBsZW5ndGgpOwogIH07CgogIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheShlbmRpYW4sIGxlbmd0aCkgewogICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTsKICB9OwoKICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZShBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7CiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpOwogICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRo
Lm1heCgxLCBieXRlTGVuZ3RoKTsKICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTsKICAgIGFzc2VydChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7CiAgICB0aGlzLnN0cmlwKCk7CiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnOwogICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTsKICAgIHZhciBiLCBpOwogICAgdmFyIHEgPSB0aGlzLmNsb25lKCk7CgogICAg
aWYgKCFsaXR0bGVFbmRpYW4pIHsKICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW4KICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykgewogICAgICAgIHJlc1tpXSA9IDA7CiAgICAgIH0KCiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHsKICAgICAgICBiID0gcS5hbmRsbigweGZmKTsKICAgICAgICBxLml1c2hybig4KTsKICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJv
KCk7IGkrKykgewogICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpOwogICAgICAgIHEuaXVzaHJuKDgpOwogICAgICAgIHJlc1tpXSA9IGI7CiAgICAgIH0KCiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHsKICAgICAgICByZXNbaV0gPSAwOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHJlczsKICB9OwoKICBpZiAoTWF0aC5jbHozMikgewogICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzKHcpIHsKICAgICAgcmV0dXJuIDMyIC0gTWF0aC5jbHozMih3KTsKICAgIH07CiAgfSBl
bHNlIHsKICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyh3KSB7CiAgICAgIHZhciB0ID0gdzsKICAgICAgdmFyIHIgPSAwOwoKICAgICAgaWYgKHQgPj0gMHgxMDAwKSB7CiAgICAgICAgciArPSAxMzsKICAgICAgICB0ID4+Pj0gMTM7CiAgICAgIH0KCiAgICAgIGlmICh0ID49IDB4NDApIHsKICAgICAgICByICs9IDc7CiAgICAgICAgdCA+Pj49IDc7CiAgICAgIH0KCiAgICAgIGlmICh0ID49IDB4OCkgewogICAgICAgIHIgKz0gNDsKICAgICAgICB0ID4+Pj0gNDsKICAgICAgfQoKICAg
ICAgaWYgKHQgPj0gMHgwMikgewogICAgICAgIHIgKz0gMjsKICAgICAgICB0ID4+Pj0gMjsKICAgICAgfQoKICAgICAgcmV0dXJuIHIgKyB0OwogICAgfTsKICB9CgogIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHModykgewogICAgLy8gU2hvcnQtY3V0CiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2OwogICAgdmFyIHQgPSB3OwogICAgdmFyIHIgPSAwOwoKICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHsKICAgICAgciArPSAxMzsKICAgICAgdCA+Pj49IDEzOwogICAgfQoKICAgIGlmICgo
dCAmIDB4N2YpID09PSAwKSB7CiAgICAgIHIgKz0gNzsKICAgICAgdCA+Pj49IDc7CiAgICB9CgogICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkgewogICAgICByICs9IDQ7CiAgICAgIHQgPj4+PSA0OwogICAgfQoKICAgIGlmICgodCAmIDB4MykgPT09IDApIHsKICAgICAgciArPSAyOwogICAgICB0ID4+Pj0gMjsKICAgIH0KCiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7CiAgICAgIHIrKzsKICAgIH0KCiAgICByZXR1cm4gcjsKICB9OyAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOCgoKICBCTi5wcm90b3R5
cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gYml0TGVuZ3RoKCkgewogICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07CgogICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpOwoKICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7CiAgfTsKCiAgZnVuY3Rpb24gdG9CaXRBcnJheShudW0pIHsKICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7CgogICAgZm9yICh2YXIgYml0ID0gMDsgYml0IDwgdy5sZW5ndGg7IGJpdCsrKSB7CiAgICAgIHZhciBvZmYgPSBiaXQgLyAy
NiB8IDA7CiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7CiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmIDEgPDwgd2JpdCkgPj4+IHdiaXQ7CiAgICB9CgogICAgcmV0dXJuIHc7CiAgfSAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzCgoKICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cygpIHsKICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDsKICAgIHZhciByID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGIg
PSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTsKCiAgICAgIHIgKz0gYjsKICAgICAgaWYgKGIgIT09IDI2KSBicmVhazsKICAgIH0KCiAgICByZXR1cm4gcjsKICB9OwoKICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGgoKSB7CiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTsKICB9OwoKICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zKHdpZHRoKSB7CiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgewogICAgICByZXR1cm4gdGhp
cy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuY2xvbmUoKTsKICB9OwoKICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyh3aWR0aCkgewogICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkgewogICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuY2xvbmUoKTsKICB9OwoKICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZygpIHsKICAgIHJldHVybiB0aGlzLm5l
Z2F0aXZlICE9PSAwOwogIH07IC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AKCgogIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTsKICB9OwoKICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcoKSB7CiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHsKICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH07IC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlCgoKICBCTi5wcm90b3R5
cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IobnVtKSB7CiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7CiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwOwogICAgfQoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7CiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldOwogICAgfQoKICAgIHJldHVybiB0aGlzLnN0cmlwKCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvcihudW0pIHsKICAgIGFzc2VydCgo
dGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApOwogICAgcmV0dXJuIHRoaXMuaXVvcihudW0pOwogIH07IC8vIE9yIGBudW1gIHdpdGggYHRoaXNgCgoKICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvcihudW0pIHsKICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaW9yKG51bSk7CiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpOwogIH07CgogIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IobnVtKSB7CiAgICBpZiAodGhpcy5sZW5ndGgg
PiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTsKICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpOwogIH07IC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZQoKCiAgQk4ucHJvdG90eXBlLml1YW5kID0gZnVuY3Rpb24gaXVhbmQobnVtKSB7CiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpCiAgICB2YXIgYjsKCiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7CiAgICAgIGIgPSBudW07CiAgICB9IGVsc2UgewogICAgICBiID0gdGhpczsKICAgIH0KCiAg
ICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHsKICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07CiAgICB9CgogICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDsKICAgIHJldHVybiB0aGlzLnN0cmlwKCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kKG51bSkgewogICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7CiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pOwogIH07IC8vIEFuZCBgbnVtYCB3aXRo
IGB0aGlzYAoKCiAgQk4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZChudW0pIHsKICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pOwogICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnVhbmQgPSBmdW5jdGlvbiB1YW5kKG51bSkgewogICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pOwogICAgcmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMp
OwogIH07IC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZQoKCiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IobnVtKSB7CiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoCiAgICB2YXIgYTsKICAgIHZhciBiOwoKICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHsKICAgICAgYSA9IHRoaXM7CiAgICAgIGIgPSBudW07CiAgICB9IGVsc2UgewogICAgICBhID0gbnVtOwogICAgICBiID0gdGhpczsKICAgIH0KCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHsKICAg
ICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldOwogICAgfQoKICAgIGlmICh0aGlzICE9PSBhKSB7CiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldOwogICAgICB9CiAgICB9CgogICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDsKICAgIHJldHVybiB0aGlzLnN0cmlwKCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yKG51bSkgewogICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZl
KSA9PT0gMCk7CiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pOwogIH07IC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYAoKCiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvcihudW0pIHsKICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pOwogICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yKG51bSkgewogICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJu
IHRoaXMuY2xvbmUoKS5pdXhvcihudW0pOwogICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpOwogIH07IC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aAoKCiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4od2lkdGgpIHsKICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApOwogICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDsKICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7IC8vIEV4dGVuZCB0
aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXMKCiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpOwoKICAgIGlmIChiaXRzTGVmdCA+IDApIHsKICAgICAgYnl0ZXNOZWVkZWQtLTsKICAgIH0gLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzCgoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykgewogICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7CiAgICB9IC8vIEhhbmRsZSB0aGUgcmVzaWR1ZQoKCiAgICBpZiAoYml0c0xlZnQgPiAwKSB7CiAgICAgIHRoaXMu
d29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZiA+PiAyNiAtIGJpdHNMZWZ0OwogICAgfSAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzCgoKICAgIHJldHVybiB0aGlzLnN0cmlwKCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuKHdpZHRoKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTsKICB9OyAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgCgoKICBCTi5wcm90b3R5cGUuc2V0biA9IGZ1bmN0aW9uIHNldG4oYml0LCB2YWwpIHsKICAgIGFzc2VydCh0eXBl
b2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7CiAgICB2YXIgb2ZmID0gYml0IC8gMjYgfCAwOwogICAgdmFyIHdiaXQgPSBiaXQgJSAyNjsKCiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7CgogICAgaWYgKHZhbCkgewogICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAxIDw8IHdiaXQ7CiAgICB9IGVsc2UgewogICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuc3RyaXAoKTsKICB9OyAvLyBBZGQgYG51
bWAgdG8gYHRoaXNgIGluLXBsYWNlCgoKICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQobnVtKSB7CiAgICB2YXIgcjsgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZQoKICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgewogICAgICB0aGlzLm5lZ2F0aXZlID0gMDsKICAgICAgciA9IHRoaXMuaXN1YihudW0pOwogICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7CiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpOyAvLyBwb3NpdGl2ZSArIG5lZ2F0aXZlCiAgICB9IGVsc2UgaWYg
KHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7CiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTsKICAgICAgbnVtLm5lZ2F0aXZlID0gMTsKICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7CiAgICB9IC8vIGEubGVuZ3RoID4gYi5sZW5ndGgKCgogICAgdmFyIGEsIGI7CgogICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgewogICAgICBhID0gdGhpczsKICAgICAgYiA9IG51bTsKICAgIH0gZWxzZSB7CiAgICAgIGEgPSBudW07CiAgICAgIGIgPSB0
aGlzOwogICAgfQoKICAgIHZhciBjYXJyeSA9IDA7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7CiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5OwogICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjsKICAgICAgY2FycnkgPSByID4+PiAyNjsKICAgIH0KCiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHsKICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTsKICAgICAgdGhpcy53b3Jkc1tpXSA9
IHIgJiAweDNmZmZmZmY7CiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7CiAgICB9CgogICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDsKCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTsKICAgICAgdGhpcy5sZW5ndGgrKzsgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHMKICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykgewogICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTsKICAgICAgfQogICAg
fQoKICAgIHJldHVybiB0aGlzOwogIH07IC8vIEFkZCBgbnVtYCB0byBgdGhpc2AKCgogIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQobnVtKSB7CiAgICB2YXIgcmVzOwoKICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDAgJiYgdGhpcy5uZWdhdGl2ZSA9PT0gMCkgewogICAgICBudW0ubmVnYXRpdmUgPSAwOwogICAgICByZXMgPSB0aGlzLnN1YihudW0pOwogICAgICBudW0ubmVnYXRpdmUgXj0gMTsKICAgICAgcmV0dXJuIHJlczsKICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRp
dmUgIT09IDApIHsKICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7CiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAxOwogICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pOwogICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhZGQodGhpcyk7CiAgfTsgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2UKCgogIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YihudW0p
IHsKICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtCiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7CiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7CiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7CiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpOyAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSkKICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgewogICAgICB0aGlzLm5lZ2F0aXZlID0gMDsKICAgICAgdGhpcy5pYWRkKG51bSk7CiAgICAgIHRoaXMu
bmVnYXRpdmUgPSAxOwogICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTsKICAgIH0gLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlCgoKICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pOyAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5CgogICAgaWYgKGNtcCA9PT0gMCkgewogICAgICB0aGlzLm5lZ2F0aXZlID0gMDsKICAgICAgdGhpcy5sZW5ndGggPSAxOwogICAgICB0aGlzLndvcmRzWzBdID0gMDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IC8vIGEgPiBiCgoKICAgIHZhciBhLCBiOwoKICAg
IGlmIChjbXAgPiAwKSB7CiAgICAgIGEgPSB0aGlzOwogICAgICBiID0gbnVtOwogICAgfSBlbHNlIHsKICAgICAgYSA9IG51bTsKICAgICAgYiA9IHRoaXM7CiAgICB9CgogICAgdmFyIGNhcnJ5ID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHsKICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7CiAgICAgIGNhcnJ5ID0gciA+PiAyNjsKICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7CiAgICB9CgogICAgZm9yICg7IGNhcnJ5ICE9
PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7CiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7CiAgICAgIGNhcnJ5ID0gciA+PiAyNjsKICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7CiAgICB9IC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHMKCgogICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7CiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldOwogICAgICB9CiAgICB9CgogICAg
dGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7CgogICAgaWYgKGEgIT09IHRoaXMpIHsKICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuc3RyaXAoKTsKICB9OyAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYAoKCiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YihudW0pIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pOwogIH07CgogIGZ1bmN0aW9uIHNtYWxsTXVsVG8oc2VsZiwgbnVtLCBvdXQpIHsKICAgIG91dC5uZWdhdGl2ZSA9IG51
bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7CiAgICB2YXIgbGVuID0gc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoIHwgMDsKICAgIG91dC5sZW5ndGggPSBsZW47CiAgICBsZW4gPSBsZW4gLSAxIHwgMDsgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpCgogICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDsKICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDsKICAgIHZhciByID0gYSAqIGI7CiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmOwog
ICAgdmFyIGNhcnJ5ID0gciAvIDB4NDAwMDAwMCB8IDA7CiAgICBvdXQud29yZHNbMF0gPSBsbzsKCiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7CiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCwKICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmYKICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjsKICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7CiAgICAgIHZhciBtYXhK
ID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpOwoKICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykgewogICAgICAgIHZhciBpID0gayAtIGogfCAwOwogICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDsKICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDsKICAgICAgICByID0gYSAqIGIgKyByd29yZDsKICAgICAgICBuY2FycnkgKz0gciAvIDB4NDAwMDAwMCB8IDA7CiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmOwogICAgICB9CgogICAg
ICBvdXQud29yZHNba10gPSByd29yZCB8IDA7CiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDsKICAgIH0KCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwOwogICAgfSBlbHNlIHsKICAgICAgb3V0Lmxlbmd0aC0tOwogICAgfQoKICAgIHJldHVybiBvdXQuc3RyaXAoKTsKICB9IC8vIFRPRE8oaW5kdXRueSk6IGl0IG1heSBiZSByZWFzb25hYmxlIHRvIG9taXQgaXQgZm9yIHVzZXJzIHdobyBkb24ndCBuZWVkCiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3
aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdAogIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuCgoKICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyhzZWxmLCBudW0sIG91dCkgewogICAgdmFyIGEgPSBzZWxmLndvcmRzOwogICAgdmFyIGIgPSBudW0ud29yZHM7CiAgICB2YXIgbyA9IG91dC53b3JkczsKICAgIHZhciBjID0gMDsKICAgIHZhciBsbzsKICAgIHZhciBtaWQ7CiAgICB2YXIgaGk7CiAgICB2YXIgYTAgPSBhWzBdIHwgMDsKICAgIHZh
ciBhbDAgPSBhMCAmIDB4MWZmZjsKICAgIHZhciBhaDAgPSBhMCA+Pj4gMTM7CiAgICB2YXIgYTEgPSBhWzFdIHwgMDsKICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjsKICAgIHZhciBhaDEgPSBhMSA+Pj4gMTM7CiAgICB2YXIgYTIgPSBhWzJdIHwgMDsKICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjsKICAgIHZhciBhaDIgPSBhMiA+Pj4gMTM7CiAgICB2YXIgYTMgPSBhWzNdIHwgMDsKICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjsKICAgIHZhciBhaDMgPSBhMyA+Pj4gMTM7CiAgICB2YXIgYTQgPSBhWzRdIHwgMDsKICAgIHZh
ciBhbDQgPSBhNCAmIDB4MWZmZjsKICAgIHZhciBhaDQgPSBhNCA+Pj4gMTM7CiAgICB2YXIgYTUgPSBhWzVdIHwgMDsKICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjsKICAgIHZhciBhaDUgPSBhNSA+Pj4gMTM7CiAgICB2YXIgYTYgPSBhWzZdIHwgMDsKICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjsKICAgIHZhciBhaDYgPSBhNiA+Pj4gMTM7CiAgICB2YXIgYTcgPSBhWzddIHwgMDsKICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjsKICAgIHZhciBhaDcgPSBhNyA+Pj4gMTM7CiAgICB2YXIgYTggPSBhWzhdIHwgMDsKICAgIHZh
ciBhbDggPSBhOCAmIDB4MWZmZjsKICAgIHZhciBhaDggPSBhOCA+Pj4gMTM7CiAgICB2YXIgYTkgPSBhWzldIHwgMDsKICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjsKICAgIHZhciBhaDkgPSBhOSA+Pj4gMTM7CiAgICB2YXIgYjAgPSBiWzBdIHwgMDsKICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjsKICAgIHZhciBiaDAgPSBiMCA+Pj4gMTM7CiAgICB2YXIgYjEgPSBiWzFdIHwgMDsKICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjsKICAgIHZhciBiaDEgPSBiMSA+Pj4gMTM7CiAgICB2YXIgYjIgPSBiWzJdIHwgMDsKICAgIHZh
ciBibDIgPSBiMiAmIDB4MWZmZjsKICAgIHZhciBiaDIgPSBiMiA+Pj4gMTM7CiAgICB2YXIgYjMgPSBiWzNdIHwgMDsKICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjsKICAgIHZhciBiaDMgPSBiMyA+Pj4gMTM7CiAgICB2YXIgYjQgPSBiWzRdIHwgMDsKICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjsKICAgIHZhciBiaDQgPSBiNCA+Pj4gMTM7CiAgICB2YXIgYjUgPSBiWzVdIHwgMDsKICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjsKICAgIHZhciBiaDUgPSBiNSA+Pj4gMTM7CiAgICB2YXIgYjYgPSBiWzZdIHwgMDsKICAgIHZh
ciBibDYgPSBiNiAmIDB4MWZmZjsKICAgIHZhciBiaDYgPSBiNiA+Pj4gMTM7CiAgICB2YXIgYjcgPSBiWzddIHwgMDsKICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjsKICAgIHZhciBiaDcgPSBiNyA+Pj4gMTM7CiAgICB2YXIgYjggPSBiWzhdIHwgMDsKICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjsKICAgIHZhciBiaDggPSBiOCA+Pj4gMTM7CiAgICB2YXIgYjkgPSBiWzldIHwgMDsKICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjsKICAgIHZhciBiaDkgPSBiOSA+Pj4gMTM7CiAgICBvdXQubmVnYXRpdmUgPSBzZWxmLm5lZ2F0
aXZlIF4gbnVtLm5lZ2F0aXZlOwogICAgb3V0Lmxlbmd0aCA9IDE5OwogICAgLyogayA9IDAgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWwwLCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7CiAgICB2YXIgdzAgPSAoYyArIGxvIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpIHwgMDsKICAgIGMgPSAoaGkgKyAobWlkID4+PiAxMykgfCAwKSArICh3MCA+Pj4gMjYpIHwgMDsKICAg
IHcwICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSAxICovCgogICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApOwogICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkgfCAwOwogICAgaGkgPSBNYXRoLmltdWwoYWgxLCBiaDApOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsMSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpIHwgMDsKICAgIGhpID0gaGkg
KyBNYXRoLmltdWwoYWgwLCBiaDEpIHwgMDsKICAgIHZhciB3MSA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxID4+PiAyNikgfCAwOwogICAgdzEgJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDIgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDIsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJo
MCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBN
YXRoLmltdWwoYWgwLCBiaDIpIHwgMDsKICAgIHZhciB3MiA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcyID4+PiAyNikgfCAwOwogICAgdzIgJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDMgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWwzLCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7
CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMiwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDIsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDIsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDEsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMSwgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgxLCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRo
LmltdWwoYWgxLCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwwLCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDAsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMCwgYmwzKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMCwgYmgzKSB8IDA7CiAgICB2YXIgdzMgPSAoYyArIGxvIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpIHwgMDsKICAgIGMgPSAoaGkgKyAobWlkID4+PiAxMykgfCAwKSArICh3MyA+Pj4gMjYpIHwgMDsKICAgIHczICY9IDB4
M2ZmZmZmZjsKICAgIC8qIGsgPSA0ICovCgogICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApOwogICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkgfCAwOwogICAgaGkgPSBNYXRoLmltdWwoYWg0LCBiaDApOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsMSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmlt
dWwoYWgzLCBiaDEpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDIpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsMykgfCAwOwog
ICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoMykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsNCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpIHwgMDsKICAgIHZhciB3NCA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHc0ID4+PiAyNikg
fCAwOwogICAgdzQgJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDUgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDUsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkgfCAwOwogICAg
aGkgPSBoaSArIE1hdGguaW11bChhaDQsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVs
KGFoMiwgYmwzKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSB8IDA7CiAgICBt
aWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpIHwgMDsKICAgIHZhciB3NSA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHc1ID4+PiAyNikgfCAwOwogICAgdzUgJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDYgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw2LCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0
aC5pbXVsKGFoNiwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDQsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNCwgYmgyKSB8IDA7CiAgICBtaWQg
PSBtaWQgKyBNYXRoLmltdWwoYWg0LCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg0LCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwzLCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDMsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmwzKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMywgYmgzKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMiwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwy
LCBiaDQpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDIsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDIsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDEsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMSwgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgxLCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgxLCBiaDUpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwwLCBibDYpIHwgMDsKICAgIG1pZCA9
IG1pZCArIE1hdGguaW11bChhbDAsIGJoNikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMCwgYmw2KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMCwgYmg2KSB8IDA7CiAgICB2YXIgdzYgPSAoYyArIGxvIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpIHwgMDsKICAgIGMgPSAoaGkgKyAobWlkID4+PiAxMykgfCAwKSArICh3NiA+Pj4gMjYpIHwgMDsKICAgIHc2ICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSA3ICovCgogICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApOwogICAgbWlkID0gTWF0
aC5pbXVsKGFsNywgYmgwKTsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkgfCAwOwogICAgaGkgPSBNYXRoLmltdWwoYWg3LCBiaDApOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDYsIGJsMSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw1LCBibDIpIHwgMDsKICAgIG1pZCA9IG1p
ZCArIE1hdGguaW11bChhbDUsIGJoMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsMykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDQsIGJoMykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJs
NCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDUpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSB8IDA7CiAgICBsbyA9IGxv
ICsgTWF0aC5pbXVsKGFsMSwgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBi
aDcpIHwgMDsKICAgIHZhciB3NyA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHc3ID4+PiAyNikgfCAwOwogICAgdzcgJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDggKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDgsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOCwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7CiAgICBsbyA9IGxvICsg
TWF0aC5pbXVsKGFsNywgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDcsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDYsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIp
IHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw1LCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDUsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkgfCAwOwogICAgaGkgPSBoaSAr
IE1hdGguaW11bChhaDQsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoNikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2
KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsNykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoNykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSB8IDA7CiAgICBtaWQgPSBtaWQg
KyBNYXRoLmltdWwoYWgwLCBibDgpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpIHwgMDsKICAgIHZhciB3OCA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHc4ID4+PiAyNikgfCAwOwogICAgdzggJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDkgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFo
OSwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBN
YXRoLmltdWwoYWg3LCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmwzKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmgzKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDQpIHwg
MDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDQsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNCwgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg0LCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg0LCBiaDUpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwzLCBibDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1h
dGguaW11bChhbDMsIGJoNikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmw2KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMywgYmg2KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMiwgYmw3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDcpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDIsIGJsNykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDIsIGJoNykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDEsIGJsOCkgfCAw
OwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMSwgYmg4KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgxLCBibDgpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgxLCBiaDgpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwwLCBibDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDAsIGJoOSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMCwgYmw5KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMCwgYmg5KSB8IDA7CiAgICB2YXIgdzkgPSAoYyAr
IGxvIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpIHwgMDsKICAgIGMgPSAoaGkgKyAobWlkID4+PiAxMykgfCAwKSArICh3OSA+Pj4gMjYpIHwgMDsKICAgIHc5ICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSAxMCAqLwoKICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTsKICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpIHwgMDsKICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgxKTsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw4LCBibDIpIHwgMDsK
ICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDgsIGJoMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsMykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDcsIGJoMykgfCAwOwogICAgbG8gPSBsbyArIE1hdGgu
aW11bChhbDYsIGJsNCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw1LCBibDUpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSB8IDA7
CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDQsIGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRo
LmltdWwoYWgzLCBiaDcpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkgfCAw
OwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoOSkgfCAwOwogICAgdmFyIHcxMCA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxMCA+Pj4gMjYpIHwgMDsKICAgIHcxMCAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTEgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMik7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmwyKSB8IDA7CiAgICBoaSA9
IE1hdGguaW11bChhaDksIGJoMik7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsMykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoMykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsNCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpIHwg
MDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDUpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1h
dGguaW11bChhaDUsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDQsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwzLCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkgfCAw
OwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDIsIGJoOSkgfCAwOwogICAgdmFyIHcxMSA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwog
ICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxMSA+Pj4gMjYpIHwgMDsKICAgIHcxMSAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTIgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDMpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDQpIHwg
MDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDUpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1h
dGguaW11bChhbDYsIGJoNikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmw2KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmg2KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmw3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDcpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJsNykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoNykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDQsIGJsOCkgfCAw
OwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNCwgYmg4KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg0LCBibDgpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg0LCBiaDgpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwzLCBibDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDMsIGJoOSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmw5KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMywgYmg5KSB8IDA7CiAgICB2YXIgdzEyID0gKGMg
KyBsbyB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSB8IDA7CiAgICBjID0gKGhpICsgKG1pZCA+Pj4gMTMpIHwgMCkgKyAodzEyID4+PiAyNikgfCAwOwogICAgdzEyICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSAxMyAqLwoKICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTsKICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpIHwgMDsKICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg0KTsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw4LCBibDUpIHwg
MDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDcsIGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1h
dGguaW11bChhbDYsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw1LCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSB8
IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDQsIGJoOSkgfCAwOwogICAgdmFyIHcxMyA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxMyA+Pj4gMjYpIHwgMDsKICAgIHcxMyAmPSAweDNmZmZmZmY7CiAgICAv
KiBrID0gMTQgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNSk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmw1KSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoNikg
fCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSB8IDA7CiAgICBoaSA9IGhpICsg
TWF0aC5pbXVsKGFoNiwgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoOSkgfCAwOwogICAgdmFyIHcxNCA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxNCA+Pj4gMjYpIHwgMDsKICAgIHcx
NCAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTUgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDYpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmw3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDcpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsNykgfCAwOwogICAgaGkgPSBoaSAr
IE1hdGguaW11bChhaDgsIGJoNykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmg4KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBibDgpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDgpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoOSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmw5
KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmg5KSB8IDA7CiAgICB2YXIgdzE1ID0gKGMgKyBsbyB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSB8IDA7CiAgICBjID0gKGhpICsgKG1pZCA+Pj4gMTMpIHwgMCkgKyAodzE1ID4+PiAyNikgfCAwOwogICAgdzE1ICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSAxNiAqLwoKICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTsKICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpIHwgMDsKICAg
IGhpID0gTWF0aC5pbXVsKGFoOSwgYmg3KTsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw4LCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJs
OSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDcsIGJoOSkgfCAwOwogICAgdmFyIHcxNiA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxNiA+Pj4gMjYpIHwgMDsKICAgIHcxNiAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTcgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmw4KSB8IDA7CiAg
ICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoOSkgfCAwOwogICAgdmFyIHcxNyA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxNyA+Pj4gMjYpIHwgMDsKICAg
IHcxNyAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTggKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDkpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7CiAgICB2YXIgdzE4ID0gKGMgKyBsbyB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSB8IDA7CiAgICBjID0gKGhpICsgKG1pZCA+Pj4gMTMpIHwgMCkgKyAodzE4ID4+PiAyNikgfCAwOwogICAgdzE4ICY9IDB4M2ZmZmZmZjsK
ICAgIG9bMF0gPSB3MDsKICAgIG9bMV0gPSB3MTsKICAgIG9bMl0gPSB3MjsKICAgIG9bM10gPSB3MzsKICAgIG9bNF0gPSB3NDsKICAgIG9bNV0gPSB3NTsKICAgIG9bNl0gPSB3NjsKICAgIG9bN10gPSB3NzsKICAgIG9bOF0gPSB3ODsKICAgIG9bOV0gPSB3OTsKICAgIG9bMTBdID0gdzEwOwogICAgb1sxMV0gPSB3MTE7CiAgICBvWzEyXSA9IHcxMjsKICAgIG9bMTNdID0gdzEzOwogICAgb1sxNF0gPSB3MTQ7CiAgICBvWzE1XSA9IHcxNTsKICAgIG9bMTZdID0gdzE2OwogICAgb1sxN10gPSB3MTc7CiAgICBvWzE4XSA9IHcx
ODsKCiAgICBpZiAoYyAhPT0gMCkgewogICAgICBvWzE5XSA9IGM7CiAgICAgIG91dC5sZW5ndGgrKzsKICAgIH0KCiAgICByZXR1cm4gb3V0OwogIH07IC8vIFBvbHlmaWxsIGNvbWIKCgogIGlmICghTWF0aC5pbXVsKSB7CiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87CiAgfQoKICBmdW5jdGlvbiBiaWdNdWxUbyhzZWxmLCBudW0sIG91dCkgewogICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTsKICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7CiAgICB2YXIg
Y2FycnkgPSAwOwogICAgdmFyIGhuY2FycnkgPSAwOwoKICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykgewogICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsCiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmCiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5OwogICAgICBobmNhcnJ5ID0gMDsKICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7CiAgICAgIHZhciBtYXhK
ID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpOwoKICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykgewogICAgICAgIHZhciBpID0gayAtIGo7CiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDsKICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7CiAgICAgICAgdmFyIHIgPSBhICogYjsKICAgICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmOwogICAgICAgIG5jYXJyeSA9IG5jYXJyeSArIChyIC8gMHg0MDAwMDAwIHwgMCkgfCAw
OwogICAgICAgIGxvID0gbG8gKyByd29yZCB8IDA7CiAgICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjsKICAgICAgICBuY2FycnkgPSBuY2FycnkgKyAobG8gPj4+IDI2KSB8IDA7CiAgICAgICAgaG5jYXJyeSArPSBuY2FycnkgPj4+IDI2OwogICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7CiAgICAgIH0KCiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkOwogICAgICBjYXJyeSA9IG5jYXJyeTsKICAgICAgbmNhcnJ5ID0gaG5jYXJyeTsKICAgIH0KCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgb3V0LndvcmRzW2td
ID0gY2Fycnk7CiAgICB9IGVsc2UgewogICAgICBvdXQubGVuZ3RoLS07CiAgICB9CgogICAgcmV0dXJuIG91dC5zdHJpcCgpOwogIH0KCiAgZnVuY3Rpb24ganVtYm9NdWxUbyhzZWxmLCBudW0sIG91dCkgewogICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpOwogICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7CiAgfQoKICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyhudW0sIG91dCkgewogICAgdmFyIHJlczsKICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7CgogICAgaWYg
KHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkgewogICAgICByZXMgPSBjb21iMTBNdWxUbyh0aGlzLCBudW0sIG91dCk7CiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7CiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpOwogICAgfSBlbHNlIGlmIChsZW4gPCAxMDI0KSB7CiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTsKICAgIH0gZWxzZSB7CiAgICAgIHJlcyA9IGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpOwogICAgfQoKICAgIHJldHVybiByZXM7CiAgfTsg
Ly8gQ29vbGV5LVR1a2V5IGFsZ29yaXRobSBmb3IgRkZUCiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvbgoKCiAgZnVuY3Rpb24gRkZUTSh4LCB5KSB7CiAgICB0aGlzLnggPSB4OwogICAgdGhpcy55ID0geTsKICB9CgogIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUKE4pIHsKICAgIHZhciB0ID0gbmV3IEFycmF5KE4pOwogICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7CgogICAgZm9yICh2YXIgaSA9IDA7
IGkgPCBOOyBpKyspIHsKICAgICAgdFtpXSA9IHRoaXMucmV2QmluKGksIGwsIE4pOwogICAgfQoKICAgIHJldHVybiB0OwogIH07IC8vIFJldHVybnMgYmluYXJ5LXJldmVyc2VkIHJlcHJlc2VudGF0aW9uIG9mIGB4YAoKCiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluKHgsIGwsIE4pIHsKICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDsKICAgIHZhciByYiA9IDA7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHsKICAgICAgcmIgfD0gKHggJiAxKSA8PCBsIC0g
aSAtIDE7CiAgICAgIHggPj49IDE7CiAgICB9CgogICAgcmV0dXJuIHJiOwogIH07IC8vIFBlcmZvcm1zICJ0d2VlZGxpbmciIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZycKICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG0KCgogIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7CiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTsKICAgICAgaXR3c1tpXSA9
IGl3c1tyYnRbaV1dOwogICAgfQogIH07CgogIEZGVE0ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybShyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7CiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7CgogICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7CiAgICAgIHZhciBsID0gcyA8PCAxOwogICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpOwogICAgICB2YXIgaXR3ZGYgPSBNYXRoLnNpbigyICogTWF0aC5QSSAv
IGwpOwoKICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHsKICAgICAgICB2YXIgcnR3ZGZfID0gcnR3ZGY7CiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmOwoKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHM7IGorKykgewogICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07CiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTsKICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTsKICAgICAgICAgIHZhciBpbyA9IGl0d3NbcCArIGogKyBzXTsKICAgICAgICAgIHZhciByeCA9IHJ0d2Rm
XyAqIHJvIC0gaXR3ZGZfICogaW87CiAgICAgICAgICBpbyA9IHJ0d2RmXyAqIGlvICsgaXR3ZGZfICogcm87CiAgICAgICAgICBybyA9IHJ4OwogICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvOwogICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvOwogICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybzsKICAgICAgICAgIGl0d3NbcCArIGogKyBzXSA9IGllIC0gaW87CiAgICAgICAgICAvKiBqc2hpbnQgbWF4ZGVwdGggOiBmYWxzZSAqLwoKICAgICAgICAgIGlmIChqICE9PSBsKSB7CiAgICAgICAgICAg
IHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXzsKICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXzsKICAgICAgICAgICAgcnR3ZGZfID0gcng7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgRkZUTS5wcm90b3R5cGUuZ3Vlc3NMZW4xM2IgPSBmdW5jdGlvbiBndWVzc0xlbjEzYihuLCBtKSB7CiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTsKICAgIHZhciBvZGQgPSBOICYgMTsKICAgIHZhciBpID0gMDsKCiAgICBmb3IgKE4g
PSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7CiAgICAgIGkrKzsKICAgIH0KCiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDsKICB9OwoKICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUocndzLCBpd3MsIE4pIHsKICAgIGlmIChOIDw9IDEpIHJldHVybjsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHsKICAgICAgdmFyIHQgPSByd3NbaV07CiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdOwogICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7CiAgICAgIHQgPSBp
d3NbaV07CiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTsKICAgICAgaXdzW04gLSBpIC0gMV0gPSAtdDsKICAgIH0KICB9OwoKICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2Iod3MsIE4pIHsKICAgIHZhciBjYXJyeSA9IDA7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7CiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgKyBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICsgY2Fycnk7CiAgICAgIHdzW2ld
ID0gdyAmIDB4M2ZmZmZmZjsKCiAgICAgIGlmICh3IDwgMHg0MDAwMDAwKSB7CiAgICAgICAgY2FycnkgPSAwOwogICAgICB9IGVsc2UgewogICAgICAgIGNhcnJ5ID0gdyAvIDB4NDAwMDAwMCB8IDA7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gd3M7CiAgfTsKCiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2Iod3MsIGxlbiwgcndzLCBOKSB7CiAgICB2YXIgY2FycnkgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgY2FycnkgPSBjYXJyeSArICh3
c1tpXSB8IDApOwogICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7CiAgICAgIGNhcnJ5ID0gY2FycnkgPj4+IDEzOwogICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOwogICAgICBjYXJyeSA9IGNhcnJ5ID4+PiAxMzsKICAgIH0gLy8gUGFkIHdpdGggemVyb2VzCgoKICAgIGZvciAoaSA9IDIgKiBsZW47IGkgPCBOOyArK2kpIHsKICAgICAgcndzW2ldID0gMDsKICAgIH0KCiAgICBhc3NlcnQoY2FycnkgPT09IDApOwogICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTsKICB9OwoKICBG
RlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YihOKSB7CiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHsKICAgICAgcGhbaV0gPSAwOwogICAgfQoKICAgIHJldHVybiBwaDsKICB9OwoKICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCh4LCB5LCBvdXQpIHsKICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTsKICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7CgogICAgdmFyIF8gPSB0aGlz
LnN0dWIoTik7CgogICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTsKICAgIHZhciByd3N0ID0gbmV3IEFycmF5KE4pOwogICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7CiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTsKICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTsKICAgIHZhciBuaXdzdCA9IG5ldyBBcnJheShOKTsKICAgIHZhciBybXdzID0gb3V0LndvcmRzOwogICAgcm13cy5sZW5ndGggPSBOOwogICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pOwogICAgdGhpcy5jb252ZXJ0MTNi
KHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTsKICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTsKICAgIHRoaXMudHJhbnNmb3JtKG5yd3MsIF8sIG5yd3N0LCBuaXdzdCwgTiwgcmJ0KTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykgewogICAgICB2YXIgcnggPSByd3N0W2ldICogbnJ3c3RbaV0gLSBpd3N0W2ldICogbml3c3RbaV07CiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07CiAgICAgIHJ3c3RbaV0gPSByeDsKICAg
IH0KCiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTsKICAgIHRoaXMudHJhbnNmb3JtKHJ3c3QsIGl3c3QsIHJtd3MsIF8sIE4sIHJidCk7CiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTsKICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pOwogICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7CiAgICBvdXQubGVuZ3RoID0geC5sZW5ndGggKyB5Lmxlbmd0aDsKICAgIHJldHVybiBvdXQuc3RyaXAoKTsKICB9OyAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWAKCgogIEJOLnBy
b3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwobnVtKSB7CiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpOwogICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7CiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7CiAgfTsgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVAoKCiAgQk4ucHJvdG90eXBlLm11bGYgPSBmdW5jdGlvbiBtdWxmKG51bSkgewogICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTsKICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5n
dGgpOwogICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpOwogIH07IC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uCgoKICBCTi5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwobnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4obnVtKSB7CiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpOwogICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7IC8vIENhcnJ5CgogICAgdmFyIGNh
cnJ5ID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtOwogICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpOwogICAgICBjYXJyeSA+Pj0gMjY7CiAgICAgIGNhcnJ5ICs9IHcgLyAweDQwMDAwMDAgfCAwOyAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtCgogICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7CiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjsKICAg
IH0KCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5OwogICAgICB0aGlzLmxlbmd0aCsrOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH07CgogIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbihudW0pIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTsKICB9OyAvLyBgdGhpc2AgKiBgdGhpc2AKCgogIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIoKSB7CiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7CiAgfTsgLy8gYHRoaXNgICogYHRoaXNg
IGluLXBsYWNlCgoKICBCTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIoKSB7CiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7CiAgfTsgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYCkKCgogIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cobnVtKSB7CiAgICB2YXIgdyA9IHRvQml0QXJyYXkobnVtKTsKICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTsgLy8gU2tpcCBsZWFkaW5nIHplcm9lcwoKICAgIHZhciByZXMgPSB0aGlzOwoKICAgIGZvciAodmFyIGkgPSAwOyBp
IDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7CiAgICAgIGlmICh3W2ldICE9PSAwKSBicmVhazsKICAgIH0KCiAgICBpZiAoKytpIDwgdy5sZW5ndGgpIHsKICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7CiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlOwogICAgICAgIHJlcyA9IHJlcy5tdWwocSk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gcmVzOwogIH07IC8vIFNoaWZ0LWxlZnQgaW4tcGxhY2UKCgogIEJOLnByb3RvdHlwZS5p
dXNobG4gPSBmdW5jdGlvbiBpdXNobG4oYml0cykgewogICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApOwogICAgdmFyIHIgPSBiaXRzICUgMjY7CiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjsKICAgIHZhciBjYXJyeU1hc2sgPSAweDNmZmZmZmYgPj4+IDI2IC0gciA8PCAyNiAtIHI7CiAgICB2YXIgaTsKCiAgICBpZiAociAhPT0gMCkgewogICAgICB2YXIgY2FycnkgPSAwOwoKICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgbmV3Q2Fy
cnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrOwogICAgICAgIHZhciBjID0gKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5IDw8IHI7CiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGMgfCBjYXJyeTsKICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAyNiAtIHI7CiAgICAgIH0KCiAgICAgIGlmIChjYXJyeSkgewogICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTsKICAgICAgICB0aGlzLmxlbmd0aCsrOwogICAgICB9CiAgICB9CgogICAgaWYgKHMgIT09IDApIHsKICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGgg
LSAxOyBpID49IDA7IGktLSkgewogICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTsKICAgICAgfQoKICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykgewogICAgICAgIHRoaXMud29yZHNbaV0gPSAwOwogICAgICB9CgogICAgICB0aGlzLmxlbmd0aCArPSBzOwogICAgfQoKICAgIHJldHVybiB0aGlzLnN0cmlwKCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4oYml0cykgewogICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lCiAgICBhc3NlcnQodGhpcy5u
ZWdhdGl2ZSA9PT0gMCk7CiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7CiAgfTsgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2UKICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXMKICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzCgoKICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7CiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09
ICdudW1iZXInICYmIGJpdHMgPj0gMCk7CiAgICB2YXIgaDsKCiAgICBpZiAoaGludCkgewogICAgICBoID0gKGhpbnQgLSBoaW50ICUgMjYpIC8gMjY7CiAgICB9IGVsc2UgewogICAgICBoID0gMDsKICAgIH0KCiAgICB2YXIgciA9IGJpdHMgJSAyNjsKICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7CiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeIDB4M2ZmZmZmZiA+Pj4gciA8PCByOwogICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7CiAgICBoIC09IHM7CiAgICBoID0gTWF0
aC5tYXgoMCwgaCk7IC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnQKCiAgICBpZiAobWFza2VkV29yZHMpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHsKICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07CiAgICAgIH0KCiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7CiAgICB9CgogICAgaWYgKHMgPT09IDApIHsvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbAogICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHsKICAg
ICAgdGhpcy5sZW5ndGggLT0gczsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLndvcmRzWzBdID0gMDsKICAgICAgdGhpcy5sZW5ndGggPSAxOwogICAgfQoKICAgIHZhciBjYXJyeSA9IDA7CgogICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkgewogICAgICB2YXIgd29yZCA9IHRoaXMud29y
ZHNbaV0gfCAwOwogICAgICB0aGlzLndvcmRzW2ldID0gY2FycnkgPDwgMjYgLSByIHwgd29yZCA+Pj4gcjsKICAgICAgY2FycnkgPSB3b3JkICYgbWFzazsKICAgIH0gLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrCgoKICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkgewogICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTsKICAgIH0KCiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHsKICAgICAgdGhpcy53b3Jkc1swXSA9IDA7CiAgICAgIHRoaXMubGVuZ3Ro
ID0gMTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5zdHJpcCgpOwogIH07CgogIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7CiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWUKICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTsKICAgIHJldHVybiB0aGlzLml1c2hybihiaXRzLCBoaW50LCBleHRlbmRlZCk7CiAgfTsgLy8gU2hpZnQtbGVmdAoKCiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuKGJpdHMpIHsKICAgIHJldHVybiB0aGlz
LmNsb25lKCkuaXNobG4oYml0cyk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4oYml0cykgewogICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyk7CiAgfTsgLy8gU2hpZnQtcmlnaHQKCgogIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybihiaXRzKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpOwogIH07CgogIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuKGJpdHMpIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJp
dHMpOwogIH07IC8vIFRlc3QgaWYgbiBiaXQgaXMgc2V0CgoKICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0bihiaXQpIHsKICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7CiAgICB2YXIgciA9IGJpdCAlIDI2OwogICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjsKICAgIHZhciBxID0gMSA8PCByOyAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3JkcwoKICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7IC8v
IENoZWNrIGJpdCBhbmQgcmV0dXJuCgogICAgdmFyIHcgPSB0aGlzLndvcmRzW3NdOwogICAgcmV0dXJuICEhKHcgJiBxKTsKICB9OyAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIgKGluLXBsYWNlKQoKCiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbihiaXRzKSB7CiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7CiAgICB2YXIgciA9IGJpdHMgJSAyNjsKICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2OwogICAgYXNzZXJ0KHRoaXMubmVnYXRp
dmUgPT09IDAsICdpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnMnKTsKCiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgewogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBpZiAociAhPT0gMCkgewogICAgICBzKys7CiAgICB9CgogICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7CgogICAgaWYgKHIgIT09IDApIHsKICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAweDNmZmZmZmYgPj4+IHIgPDwgcjsKICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1h
c2s7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuc3RyaXAoKTsKICB9OyAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIKCgogIEJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuKGJpdHMpIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpOwogIH07IC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgCgoKICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbihudW0pIHsKICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7CiAgICBhc3NlcnQo
bnVtIDwgMHg0MDAwMDAwKTsKICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTsgLy8gUG9zc2libGUgc2lnbiBjaGFuZ2UKCiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgewogICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkgewogICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApOwogICAgICAgIHRoaXMubmVnYXRpdmUgPSAwOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CgogICAgICB0aGlzLm5lZ2F0
aXZlID0gMDsKICAgICAgdGhpcy5pc3VibihudW0pOwogICAgICB0aGlzLm5lZ2F0aXZlID0gMTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IC8vIEFkZCB3aXRob3V0IGNoZWNrcwoKCiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTsKICB9OwoKICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuKG51bSkgewogICAgdGhpcy53b3Jkc1swXSArPSBudW07IC8vIENhcnJ5CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7CiAg
ICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwOwoKICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkgewogICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrOwogICAgICB9CiAgICB9CgogICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpOwogICAgcmV0dXJuIHRoaXM7CiAgfTsgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgCgoKICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5j
dGlvbiBpc3VibihudW0pIHsKICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7CiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTsKICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTsKCiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgewogICAgICB0aGlzLm5lZ2F0aXZlID0gMDsKICAgICAgdGhpcy5pYWRkbihudW0pOwogICAgICB0aGlzLm5lZ2F0aXZlID0gMTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgdGhpcy53b3Jkc1swXSAtPSBudW07CgogICAgaWYgKHRoaXMubGVu
Z3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7CiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTsKICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7CiAgICB9IGVsc2UgewogICAgICAvLyBDYXJyeQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHsKICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDsKICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRoaXMuc3RyaXAoKTsK
ICB9OwoKICBCTi5wcm90b3R5cGUuYWRkbiA9IGZ1bmN0aW9uIGFkZG4obnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuKG51bSkgewogICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicygpIHsKICAgIHRoaXMubmVnYXRpdmUgPSAwOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicygpIHsK
ICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpOwogIH07CgogIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwobnVtLCBtdWwsIHNoaWZ0KSB7CiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0OwogICAgdmFyIGk7CgogICAgdGhpcy5fZXhwYW5kKGxlbik7CgogICAgdmFyIHc7CiAgICB2YXIgY2FycnkgPSAwOwoKICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHsKICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5OwogICAg
ICB2YXIgcmlnaHQgPSAobnVtLndvcmRzW2ldIHwgMCkgKiBtdWw7CiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7CiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKHJpZ2h0IC8gMHg0MDAwMDAwIHwgMCk7CiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7CiAgICB9CgogICAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aCAtIHNoaWZ0OyBpKyspIHsKICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5OwogICAgICBjYXJyeSA9IHcgPj4gMjY7CiAgICAgIHRoaXMud29y
ZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7CiAgICB9CgogICAgaWYgKGNhcnJ5ID09PSAwKSByZXR1cm4gdGhpcy5zdHJpcCgpOyAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvdwoKICAgIGFzc2VydChjYXJyeSA9PT0gLTEpOwogICAgY2FycnkgPSAwOwoKICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHcgPSAtKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5OwogICAgICBjYXJyeSA9IHcgPj4gMjY7CiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmOwogICAgfQoKICAgIHRo
aXMubmVnYXRpdmUgPSAxOwogICAgcmV0dXJuIHRoaXMuc3RyaXAoKTsKICB9OwoKICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdihudW0sIG1vZGUpIHsKICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDsKICAgIHZhciBhID0gdGhpcy5jbG9uZSgpOwogICAgdmFyIGIgPSBudW07IC8vIE5vcm1hbGl6ZQoKICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwOwoKICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7CgogICAgc2hpZnQgPSAy
NiAtIGJoaUJpdHM7CgogICAgaWYgKHNoaWZ0ICE9PSAwKSB7CiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTsKICAgICAgYS5pdXNobG4oc2hpZnQpOwogICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwOwogICAgfSAvLyBJbml0aWFsaXplIHF1b3RpZW50CgoKICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDsKICAgIHZhciBxOwoKICAgIGlmIChtb2RlICE9PSAnbW9kJykgewogICAgICBxID0gbmV3IEJOKG51bGwpOwogICAgICBxLmxlbmd0aCA9IG0gKyAxOwogICAgICBxLndvcmRzID0gbmV3IEFycmF5
KHEubGVuZ3RoKTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykgewogICAgICAgIHEud29yZHNbaV0gPSAwOwogICAgICB9CiAgICB9CgogICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pOwoKICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7CiAgICAgIGEgPSBkaWZmOwoKICAgICAgaWYgKHEpIHsKICAgICAgICBxLndvcmRzW21dID0gMTsKICAgICAgfQogICAgfQoKICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHsKICAgICAgdmFyIHFqID0g
KGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICsgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTsgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXgKICAgICAgLy8gKDB4N2ZmZmZmZikKCiAgICAgIHFqID0gTWF0aC5taW4ocWogLyBiaGkgfCAwLCAweDNmZmZmZmYpOwoKICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopOwoKICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHsKICAgICAgICBxai0tOwog
ICAgICAgIGEubmVnYXRpdmUgPSAwOwoKICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTsKCiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7CiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAocSkgewogICAgICAgIHEud29yZHNbal0gPSBxajsKICAgICAgfQogICAgfQoKICAgIGlmIChxKSB7CiAgICAgIHEuc3RyaXAoKTsKICAgIH0KCiAgICBhLnN0cmlwKCk7IC8vIERlbm9ybWFsaXplCgogICAgaWYgKG1vZGUgIT09ICdkaXYnICYmIHNoaWZ0ICE9PSAwKSB7CiAgICAg
IGEuaXVzaHJuKHNoaWZ0KTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBkaXY6IHEgfHwgbnVsbCwKICAgICAgbW9kOiBhCiAgICB9OwogIH07IC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksCiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvCiAgLy8gICAgICAgcmVxdWVzdCBib3RoIGRpdiAmIG1vZAogIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkCgoK
ICBCTi5wcm90b3R5cGUuZGl2bW9kID0gZnVuY3Rpb24gZGl2bW9kKG51bSwgbW9kZSwgcG9zaXRpdmUpIHsKICAgIGFzc2VydCghbnVtLmlzWmVybygpKTsKCiAgICBpZiAodGhpcy5pc1plcm8oKSkgewogICAgICByZXR1cm4gewogICAgICAgIGRpdjogbmV3IEJOKDApLAogICAgICAgIG1vZDogbmV3IEJOKDApCiAgICAgIH07CiAgICB9CgogICAgdmFyIGRpdiwgbW9kLCByZXM7CgogICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7CiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9k
KG51bSwgbW9kZSk7CgogICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHsKICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpOwogICAgICB9CgogICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHsKICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpOwoKICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgICAgICBtb2QuaWFkZChudW0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICBkaXY6IGRpdiwKICAgICAgICBtb2Q6IG1vZAogICAgICB9OwogICAgfQoKICAgIGlm
ICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgewogICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpOwoKICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7CiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICBkaXY6IGRpdiwKICAgICAgICBtb2Q6IHJlcy5tb2QKICAgICAgfTsKICAgIH0KCiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7CiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2
bW9kKG51bS5uZWcoKSwgbW9kZSk7CgogICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHsKICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpOwoKICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgICAgICBtb2QuaXN1YihudW0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICBkaXY6IHJlcy5kaXYsCiAgICAgICAgbW9kOiBtb2QKICAgICAgfTsKICAgIH0gLy8gQm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZSBhdCB0aGlzIHBvaW50CiAgICAvLyBTdHJpcCBib3Ro
IG51bWJlcnMgdG8gYXBwcm94aW1hdGUgc2hpZnQgdmFsdWUKCgogICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkgewogICAgICByZXR1cm4gewogICAgICAgIGRpdjogbmV3IEJOKDApLAogICAgICAgIG1vZDogdGhpcwogICAgICB9OwogICAgfSAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvbgoKCiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkgewogICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRz
WzBdKSwKICAgICAgICAgIG1vZDogbnVsbAogICAgICAgIH07CiAgICAgIH0KCiAgICAgIGlmIChtb2RlID09PSAnbW9kJykgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBkaXY6IG51bGwsCiAgICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSkKICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksCiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpCiAgICAgIH07CiAgICB9CgogICAgcmV0
dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTsKICB9OyAvLyBGaW5kIGB0aGlzYCAvIGBudW1gCgoKICBCTi5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2KG51bSkgewogICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7CiAgfTsgLy8gRmluZCBgdGhpc2AgJSBgbnVtYAoKCiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZChudW0pIHsKICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCBmYWxzZSkubW9kOwogIH07CgogIEJOLnByb3RvdHlwZS51bW9kID0gZnVuY3Rp
b24gdW1vZChudW0pIHsKICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7CiAgfTsgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYCkKCgogIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kKG51bSkgewogICAgdmFyIGRtID0gdGhpcy5kaXZtb2QobnVtKTsgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb24KCiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2OwogICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3Vi
KG51bSkgOiBkbS5tb2Q7CiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTsKICAgIHZhciByMiA9IG51bS5hbmRsbigxKTsKICAgIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpOyAvLyBSb3VuZCBkb3duCgogICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2OyAvLyBSb3VuZCB1cAoKICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuKG51
bSkgewogICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpOwogICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07CiAgICB2YXIgYWNjID0gMDsKCiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICBhY2MgPSAocCAqIGFjYyArICh0aGlzLndvcmRzW2ldIHwgMCkpICUgbnVtOwogICAgfQoKICAgIHJldHVybiBhY2M7CiAgfTsgLy8gSW4tcGxhY2UgZGl2aXNpb24gYnkgbnVtYmVyCgoKICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2bihudW0pIHsKICAgIGFzc2VydChu
dW0gPD0gMHgzZmZmZmZmKTsKICAgIHZhciBjYXJyeSA9IDA7CgogICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7CiAgICAgIHRoaXMud29yZHNbaV0gPSB3IC8gbnVtIHwgMDsKICAgICAgY2FycnkgPSB3ICUgbnVtOwogICAgfQoKICAgIHJldHVybiB0aGlzLnN0cmlwKCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuKG51bSkgewogICAgcmV0dXJuIHRoaXMuY2xv
bmUoKS5pZGl2bihudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZChwKSB7CiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7CiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpOwogICAgdmFyIHggPSB0aGlzOwogICAgdmFyIHkgPSBwLmNsb25lKCk7CgogICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHsKICAgICAgeCA9IHgudW1vZChwKTsKICAgIH0gZWxzZSB7CiAgICAgIHggPSB4LmNsb25lKCk7CiAgICB9IC8vIEEgKiB4ICsgQiAqIHkgPSB4CgoKICAgIHZhciBBID0gbmV3IEJOKDEpOwogICAg
dmFyIEIgPSBuZXcgQk4oMCk7IC8vIEMgKiB4ICsgRCAqIHkgPSB5CgogICAgdmFyIEMgPSBuZXcgQk4oMCk7CiAgICB2YXIgRCA9IG5ldyBCTigxKTsKICAgIHZhciBnID0gMDsKCiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7CiAgICAgIHguaXVzaHJuKDEpOwogICAgICB5Lml1c2hybigxKTsKICAgICAgKytnOwogICAgfQoKICAgIHZhciB5cCA9IHkuY2xvbmUoKTsKICAgIHZhciB4cCA9IHguY2xvbmUoKTsKCiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHsKICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0g
MTsgKHgud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKSB7CiAgICAgICAgOwogICAgICB9CgogICAgICBpZiAoaSA+IDApIHsKICAgICAgICB4Lml1c2hybihpKTsKCiAgICAgICAgd2hpbGUgKGktLSA+IDApIHsKICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7CiAgICAgICAgICAgIEEuaWFkZCh5cCk7CiAgICAgICAgICAgIEIuaXN1Yih4cCk7CiAgICAgICAgICB9CgogICAgICAgICAgQS5pdXNocm4oMSk7CiAgICAgICAgICBCLml1c2hybigxKTsKICAgICAgICB9CiAg
ICAgIH0KCiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSkgewogICAgICAgIDsKICAgICAgfQoKICAgICAgaWYgKGogPiAwKSB7CiAgICAgICAgeS5pdXNocm4oaik7CgogICAgICAgIHdoaWxlIChqLS0gPiAwKSB7CiAgICAgICAgICBpZiAoQy5pc09kZCgpIHx8IEQuaXNPZGQoKSkgewogICAgICAgICAgICBDLmlhZGQoeXApOwogICAgICAgICAgICBELmlzdWIoeHApOwogICAgICAgICAgfQoKICAgICAgICAgIEMuaXVzaHJuKDEpOwog
ICAgICAgICAgRC5pdXNocm4oMSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoeC5jbXAoeSkgPj0gMCkgewogICAgICAgIHguaXN1Yih5KTsKICAgICAgICBBLmlzdWIoQyk7CiAgICAgICAgQi5pc3ViKEQpOwogICAgICB9IGVsc2UgewogICAgICAgIHkuaXN1Yih4KTsKICAgICAgICBDLmlzdWIoQSk7CiAgICAgICAgRC5pc3ViKEIpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgYTogQywKICAgICAgYjogRCwKICAgICAgZ2NkOiB5Lml1c2hsbihnKQogICAgfTsKICB9OyAvLyBUaGlzIGlzIHJlZHVj
ZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUEKICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGUKICAvLyBfcHJpbWVfIGZpZWxkcyBGKHApIGF0IGEgbWF4aW1hbCBzcGVlZAoKCiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcChwKSB7CiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7CiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpOwogICAgdmFyIGEgPSB0aGlzOwogICAgdmFyIGIgPSBwLmNsb25lKCk7CgogICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHsKICAg
ICAgYSA9IGEudW1vZChwKTsKICAgIH0gZWxzZSB7CiAgICAgIGEgPSBhLmNsb25lKCk7CiAgICB9CgogICAgdmFyIHgxID0gbmV3IEJOKDEpOwogICAgdmFyIHgyID0gbmV3IEJOKDApOwogICAgdmFyIGRlbHRhID0gYi5jbG9uZSgpOwoKICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHsKICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKGEud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKSB7CiAgICAgICAgOwogICAgICB9CgogICAgICBpZiAoaSA+IDApIHsK
ICAgICAgICBhLml1c2hybihpKTsKCiAgICAgICAgd2hpbGUgKGktLSA+IDApIHsKICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7CiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIHgxLml1c2hybigxKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7IChiLndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSkgewogICAgICAgIDsKICAgICAgfQoKICAgICAgaWYgKGogPiAwKSB7CiAgICAgICAgYi5pdXNocm4oaik7
CgogICAgICAgIHdoaWxlIChqLS0gPiAwKSB7CiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkgewogICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTsKICAgICAgICAgIH0KCiAgICAgICAgICB4Mi5pdXNocm4oMSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoYS5jbXAoYikgPj0gMCkgewogICAgICAgIGEuaXN1YihiKTsKICAgICAgICB4MS5pc3ViKHgyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBiLmlzdWIoYSk7CiAgICAgICAgeDIuaXN1Yih4MSk7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgcmVzOwoKICAgIGlmIChh
LmNtcG4oMSkgPT09IDApIHsKICAgICAgcmVzID0geDE7CiAgICB9IGVsc2UgewogICAgICByZXMgPSB4MjsKICAgIH0KCiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7CiAgICAgIHJlcy5pYWRkKHApOwogICAgfQoKICAgIHJldHVybiByZXM7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZChudW0pIHsKICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gbnVtLmFicygpOwogICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7CiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTsKICAgIHZh
ciBiID0gbnVtLmNsb25lKCk7CiAgICBhLm5lZ2F0aXZlID0gMDsKICAgIGIubmVnYXRpdmUgPSAwOyAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d28KCiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykgewogICAgICBhLml1c2hybigxKTsKICAgICAgYi5pdXNocm4oMSk7CiAgICB9CgogICAgZG8gewogICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkgewogICAgICAgIGEuaXVzaHJuKDEpOwogICAgICB9CgogICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkgewogICAgICAgIGIu
aXVzaHJuKDEpOwogICAgICB9CgogICAgICB2YXIgciA9IGEuY21wKGIpOwoKICAgICAgaWYgKHIgPCAwKSB7CiAgICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgCiAgICAgICAgdmFyIHQgPSBhOwogICAgICAgIGEgPSBiOwogICAgICAgIGIgPSB0OwogICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGEuaXN1YihiKTsKICAgIH0gd2hpbGUgKHRydWUpOwoKICAgIHJldHVybiBiLml1
c2hsbihzaGlmdCk7CiAgfTsgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pCgoKICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0obnVtKSB7CiAgICByZXR1cm4gdGhpcy5lZ2NkKG51bSkuYS51bW9kKG51bSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbigpIHsKICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwOwogIH07CgogIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkKCkgewogICAgcmV0dXJuICh0aGlzLndvcmRzWzBd
ICYgMSkgPT09IDE7CiAgfTsgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bQoKCiAgQk4ucHJvdG90eXBlLmFuZGxuID0gZnVuY3Rpb24gYW5kbG4obnVtKSB7CiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTsKICB9OyAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lCgoKICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbihiaXQpIHsKICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyk7CiAgICB2YXIgciA9IGJpdCAlIDI2OwogICAgdmFyIHMgPSAoYml0IC0gcikgLyAy
NjsKICAgIHZhciBxID0gMSA8PCByOyAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3JkcwoKICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7CiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7CgogICAgICB0aGlzLndvcmRzW3NdIHw9IHE7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZAoKCiAgICB2YXIgY2FycnkgPSBxOwoKICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkr
KykgewogICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwOwogICAgICB3ICs9IGNhcnJ5OwogICAgICBjYXJyeSA9IHcgPj4+IDI2OwogICAgICB3ICY9IDB4M2ZmZmZmZjsKICAgICAgdGhpcy53b3Jkc1tpXSA9IHc7CiAgICB9CgogICAgaWYgKGNhcnJ5ICE9PSAwKSB7CiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTsKICAgICAgdGhpcy5sZW5ndGgrKzsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9OwoKICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvKCkgewogICAgcmV0dXJuIHRoaXMubGVu
Z3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDA7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuKG51bSkgewogICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDsKICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xOwogICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbmVnYXRpdmUpIHJldHVybiAxOwogICAgdGhpcy5zdHJpcCgpOwogICAgdmFyIHJlczsKCiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7CiAgICAgIHJlcyA9IDE7CiAgICB9IGVsc2Ug
ewogICAgICBpZiAobmVnYXRpdmUpIHsKICAgICAgICBudW0gPSAtbnVtOwogICAgICB9CgogICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7CiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7CiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxOwogICAgfQoKICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7CiAgICByZXR1cm4gcmVzOwogIH07IC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjoKICAvLyAx
IC0gaWYgYHRoaXNgID4gYG51bWAKICAvLyAwIC0gaWYgYHRoaXNgID09IGBudW1gCiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYAoKCiAgQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcChudW0pIHsKICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xOwogICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gMTsKICAgIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTsKICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAw
KSByZXR1cm4gLXJlcyB8IDA7CiAgICByZXR1cm4gcmVzOwogIH07IC8vIFVuc2lnbmVkIGNvbXBhcmlzb24KCgogIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcChudW0pIHsKICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnbgogICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7CiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7CiAgICB2YXIgcmVzID0gMDsKCiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAx
OyBpID49IDA7IGktLSkgewogICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwOwogICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7CiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTsKCiAgICAgIGlmIChhIDwgYikgewogICAgICAgIHJlcyA9IC0xOwogICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7CiAgICAgICAgcmVzID0gMTsKICAgICAgfQoKICAgICAgYnJlYWs7CiAgICB9CgogICAgcmV0dXJuIHJlczsKICB9OwoKICBCTi5wcm90b3R5cGUuZ3RuID0gZnVuY3Rpb24gZ3RuKG51bSkgewogICAgcmV0dXJuIHRoaXMu
Y21wbihudW0pID09PSAxOwogIH07CgogIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0KG51bSkgewogICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuKG51bSkgewogICAgcmV0dXJuIHRoaXMuY21wbihudW0pID49IDA7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmd0ZSA9IGZ1bmN0aW9uIGd0ZShudW0pIHsKICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0bihudW0pIHsK
ICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQobnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gLTE7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmx0ZW4gPSBmdW5jdGlvbiBsdGVuKG51bSkgewogICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZShudW0pIHsKICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1
bmN0aW9uIGVxbihudW0pIHsKICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMDsKICB9OwoKICBCTi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShudW0pIHsKICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwOwogIH07IC8vCiAgLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmcKICAvLyBvbiB0aGUgYG1gIGl0c2VsZi4KICAvLwoKCiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkKG51bSkgewogICAgcmV0dXJuIG5ldyBSZWQobnVt
KTsKICB9OwoKICBCTi5wcm90b3R5cGUudG9SZWQgPSBmdW5jdGlvbiB0b1JlZChjdHgpIHsKICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7CiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7CiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTsKICB9OwoKICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQoKSB7CiAgICBhc3NlcnQodGhpcy5y
ZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7CiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZChjdHgpIHsKICAgIHRoaXMucmVkID0gY3R4OwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQoY3R4KSB7CiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1
Y3Rpb24gY29udGV4dCcpOwogICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZChudW0pIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTsKICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTsKICB9OwoKICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQobnVtKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCBy
ZWQgbnVtYmVycycpOwogICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTsKICB9OwoKICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViKG51bSkgewogICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwogICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YihudW0pIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRo
IHJlZCBudW1iZXJzJyk7CiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwobnVtKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7CiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bChudW0pIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGgg
cmVkIG51bWJlcnMnKTsKCiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pOwoKICAgIHJldHVybiB0aGlzLnJlZC5tdWwodGhpcywgbnVtKTsKICB9OwoKICBCTi5wcm90b3R5cGUucmVkSU11bCA9IGZ1bmN0aW9uIHJlZElNdWwobnVtKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7CgogICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTsKCiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRT
cXIgPSBmdW5jdGlvbiByZWRTcXIoKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7CgogICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7CgogICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTsKICB9OwoKICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIoKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwoKICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpOwoKICAgIHJldHVy
biB0aGlzLnJlZC5pc3FyKHRoaXMpOwogIH07IC8vIFNxdWFyZSByb290IG92ZXIgcAoKCiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0KCkgewogICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTsKCiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTsKCiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTsKICB9OwoKICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0oKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJ
bnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwoKICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpOwoKICAgIHJldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpOwogIH07IC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AgJSBgcmVkIG1vZHVsb2AKCgogIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcoKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7CgogICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7CgogICAgcmV0dXJu
IHRoaXMucmVkLm5lZyh0aGlzKTsKICB9OwoKICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93KG51bSkgewogICAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTsKCiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTsKCiAgICByZXR1cm4gdGhpcy5yZWQucG93KHRoaXMsIG51bSk7CiAgfTsgLy8gUHJpbWUgbnVtYmVycyB3aXRoIGVmZmljaWVudCByZWR1Y3Rpb24KCgogIHZhciBwcmltZXMgPSB7CiAgICBrMjU2OiBudWxsLAogICAgcDIyNDogbnVsbCwKICAgIHAx
OTI6IG51bGwsCiAgICBwMjU1MTk6IG51bGwKICB9OyAvLyBQc2V1ZG8tTWVyc2VubmUgcHJpbWUKCiAgZnVuY3Rpb24gTVByaW1lKG5hbWUsIHApIHsKICAgIC8vIFAgPSAyIF4gTiAtIEsKICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpOwogICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpOwogICAgdGhpcy5rID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTsKICAgIHRoaXMudG1wID0gdGhpcy5fdG1wKCk7CiAgfQoKICBNUHJpbWUucHJvdG90eXBlLl90bXAg
PSBmdW5jdGlvbiBfdG1wKCkgewogICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTsKICAgIHRtcC53b3JkcyA9IG5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uIC8gMTMpKTsKICAgIHJldHVybiB0bXA7CiAgfTsKCiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZShudW0pIHsKICAgIC8vIEFzc3VtZXMgdGhhdCBgbnVtYCBpcyBsZXNzIHRoYW4gYFBeMmAKICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUCkKICAgIHZhciByID0gbnVt
OwogICAgdmFyIHJsZW47CgogICAgZG8gewogICAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTsKICAgICAgciA9IHRoaXMuaW11bEsocik7CiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApOwogICAgICBybGVuID0gci5iaXRMZW5ndGgoKTsKICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pOwoKICAgIHZhciBjbXAgPSBybGVuIDwgdGhpcy5uID8gLTEgOiByLnVjbXAodGhpcy5wKTsKCiAgICBpZiAoY21wID09PSAwKSB7CiAgICAgIHIud29yZHNbMF0gPSAwOwogICAgICByLmxlbmd0aCA9IDE7CiAgICB9IGVsc2UgaWYgKGNt
cCA+IDApIHsKICAgICAgci5pc3ViKHRoaXMucCk7CiAgICB9IGVsc2UgewogICAgICBpZiAoci5zdHJpcCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgLy8gciBpcyBCTiB2NCBpbnN0YW5jZQogICAgICAgIHIuc3RyaXAoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyByIGlzIEJOIHY1IGluc3RhbmNlCiAgICAgICAgci5fc3RyaXAoKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiByOwogIH07CgogIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChpbnB1dCwgb3V0KSB7CiAgICBpbnB1dC5pdXNo
cm4odGhpcy5uLCAwLCBvdXQpOwogIH07CgogIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyhudW0pIHsKICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspOwogIH07CgogIGZ1bmN0aW9uIEsyNTYoKSB7CiAgICBNUHJpbWUuY2FsbCh0aGlzLCAnazI1NicsICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpOwogIH0KCiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTsKCiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlv
biBzcGxpdChpbnB1dCwgb3V0cHV0KSB7CiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMgogICAgdmFyIG1hc2sgPSAweDNmZmZmZjsKICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHsKICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07CiAgICB9CgogICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjsKCiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHsKICAgICAgaW5wdXQud29yZHNbMF0gPSAwOwogICAgICBpbnB1
dC5sZW5ndGggPSAxOwogICAgICByZXR1cm47CiAgICB9IC8vIFNoaWZ0IGJ5IDkgbGltYnMKCgogICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTsKICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7CgogICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykgewogICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDsKICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IChuZXh0ICYgbWFzaykgPDwgNCB8IHByZXYgPj4+IDIyOwogICAgICBwcmV2ID0gbmV4dDsKICAg
IH0KCiAgICBwcmV2ID4+Pj0gMjI7CiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjsKCiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkgewogICAgICBpbnB1dC5sZW5ndGggLT0gMTA7CiAgICB9IGVsc2UgewogICAgICBpbnB1dC5sZW5ndGggLT0gOTsKICAgIH0KICB9OwoKICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLKG51bSkgewogICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdCiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwOwogICAgbnVt
LndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7CiAgICBudW0ubGVuZ3RoICs9IDI7IC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwCgogICAgdmFyIGxvID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykgewogICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7CiAgICAgIGxvICs9IHcgKiAweDNkMTsKICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7CiAgICAgIGxvID0gdyAqIDB4NDAgKyAobG8gLyAweDQwMDAwMDAgfCAwKTsK
ICAgIH0gLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uCgoKICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7CiAgICAgIG51bS5sZW5ndGgtLTsKCiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7CiAgICAgICAgbnVtLmxlbmd0aC0tOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG51bTsKICB9OwoKICBmdW5jdGlvbiBQMjI0KCkgewogICAgTVByaW1lLmNhbGwodGhpcywgJ3AyMjQnLCAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAw
MDAwMDAgMDAwMDAwMDEnKTsKICB9CgogIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7CgogIGZ1bmN0aW9uIFAxOTIoKSB7CiAgICBNUHJpbWUuY2FsbCh0aGlzLCAncDE5MicsICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpOwogIH0KCiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTsKCiAgZnVuY3Rpb24gUDI1NTE5KCkgewogICAgLy8gMiBeIDI1NSAtIDE5CiAgICBNUHJpbWUuY2FsbCh0aGlzLCAnMjU1MTknLCAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZm
ZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpOwogIH0KCiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpOwoKICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsobnVtKSB7CiAgICAvLyBLID0gMHgxMwogICAgdmFyIGNhcnJ5ID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykgewogICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7CiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmOwogICAgICBoaSA+Pj49IDI2OwogICAg
ICBudW0ud29yZHNbaV0gPSBsbzsKICAgICAgY2FycnkgPSBoaTsKICAgIH0KCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTsKICAgIH0KCiAgICByZXR1cm4gbnVtOwogIH07IC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZAoKCiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUobmFtZSkgewogICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWUKICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBw
cmltZXNbbmFtZV07CiAgICB2YXIgcHJpbWU7CgogICAgaWYgKG5hbWUgPT09ICdrMjU2JykgewogICAgICBwcmltZSA9IG5ldyBLMjU2KCk7CiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0JykgewogICAgICBwcmltZSA9IG5ldyBQMjI0KCk7CiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykgewogICAgICBwcmltZSA9IG5ldyBQMTkyKCk7CiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7CiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IEVycm9y
KCdVbmtub3duIHByaW1lICcgKyBuYW1lKTsKICAgIH0KCiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTsKICAgIHJldHVybiBwcmltZTsKICB9OyAvLwogIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZQogIC8vCgoKICBmdW5jdGlvbiBSZWQobSkgewogICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykgewogICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7CgogICAgICB0aGlzLm0gPSBwcmltZS5wOwogICAgICB0aGlzLnByaW1lID0gcHJpbWU7CiAgICB9IGVsc2UgewogICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVz
IG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTsKICAgICAgdGhpcy5tID0gbTsKICAgICAgdGhpcy5wcmltZSA9IG51bGw7CiAgICB9CiAgfQoKICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEoYSkgewogICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpOwogICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwogIH07CgogIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5Mihh
LCBiKSB7CiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7CiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwogIH07CgogIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QoYSkgewogICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpOwogICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9m
b3JjZVJlZCh0aGlzKTsKICB9OwoKICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyhhKSB7CiAgICBpZiAoYS5pc1plcm8oKSkgewogICAgICByZXR1cm4gYS5jbG9uZSgpOwogICAgfQoKICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTsKICB9OwoKICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChhLCBiKSB7CiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpOwoKICAgIHZhciByZXMgPSBhLmFkZChiKTsKCiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHsKICAgICAgcmVzLmlz
dWIodGhpcy5tKTsKICAgIH0KCiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTsKICB9OwoKICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkKGEsIGIpIHsKICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7CgogICAgdmFyIHJlcyA9IGEuaWFkZChiKTsKCiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHsKICAgICAgcmVzLmlzdWIodGhpcy5tKTsKICAgIH0KCiAgICByZXR1cm4gcmVzOwogIH07CgogIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViKGEsIGIpIHsKICAgIHRoaXMuX3ZlcmlmeTIo
YSwgYik7CgogICAgdmFyIHJlcyA9IGEuc3ViKGIpOwoKICAgIGlmIChyZXMuY21wbigwKSA8IDApIHsKICAgICAgcmVzLmlhZGQodGhpcy5tKTsKICAgIH0KCiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTsKICB9OwoKICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViKGEsIGIpIHsKICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7CgogICAgdmFyIHJlcyA9IGEuaXN1YihiKTsKCiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7CiAgICAgIHJlcy5pYWRkKHRoaXMubSk7CiAgICB9CgogICAgcmV0dXJuIHJlczsK
ICB9OwoKICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobChhLCBudW0pIHsKICAgIHRoaXMuX3ZlcmlmeTEoYSk7CgogICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpOwogIH07CgogIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwoYSwgYikgewogICAgdGhpcy5fdmVyaWZ5MihhLCBiKTsKCiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoYSwgYikgewogICAgdGhpcy5fdmVyaWZ5MihhLCBiKTsKCiAgICBy
ZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTsKICB9OwoKICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyKGEpIHsKICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTsKICB9OwoKICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxcihhKSB7CiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydChhKSB7CiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTsKICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMp
OwogICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTsgLy8gRmFzdCBjYXNlCgogICAgaWYgKG1vZDMgPT09IDMpIHsKICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7CiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpOwogICAgfSAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpCiAgICAvLwogICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSkKCgogICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTsKICAgIHZh
ciBzID0gMDsKCiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkgewogICAgICBzKys7CiAgICAgIHEuaXVzaHJuKDEpOwogICAgfQoKICAgIGFzc2VydCghcS5pc1plcm8oKSk7CiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpOwogICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7IC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlCiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy4KCiAgICB2YXIgbHBvdyA9IHRo
aXMubS5zdWJuKDEpLml1c2hybigxKTsKICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpOwogICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpOwoKICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHsKICAgICAgei5yZWRJQWRkKG5PbmUpOwogICAgfQoKICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7CiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpOwogICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTsKICAgIHZhciBtID0gczsKCiAgICB3aGls
ZSAodC5jbXAob25lKSAhPT0gMCkgewogICAgICB2YXIgdG1wID0gdDsKCiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykgewogICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTsKICAgICAgfQoKICAgICAgYXNzZXJ0KGkgPCBtKTsKICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpOwogICAgICByID0gci5yZWRNdWwoYik7CiAgICAgIGMgPSBiLnJlZFNxcigpOwogICAgICB0ID0gdC5yZWRNdWwoYyk7CiAgICAgIG0gPSBpOwogICAgfQoKICAgIHJl
dHVybiByOwogIH07CgogIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0oYSkgewogICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7CgogICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkgewogICAgICBpbnYubmVnYXRpdmUgPSAwOwogICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7CiAgICB9CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3coYSwgbnVtKSB7CiAgICBpZiAobnVtLmlzWmVybygp
KSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpOwogICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpOwogICAgdmFyIHdpbmRvd1NpemUgPSA0OwogICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpOwogICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpOwogICAgd25kWzFdID0gYTsKCiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykgewogICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTsKICAgIH0KCiAgICB2YXIgcmVzID0g
d25kWzBdOwogICAgdmFyIGN1cnJlbnQgPSAwOwogICAgdmFyIGN1cnJlbnRMZW4gPSAwOwogICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7CgogICAgaWYgKHN0YXJ0ID09PSAwKSB7CiAgICAgIHN0YXJ0ID0gMjY7CiAgICB9CgogICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldOwoKICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHsKICAgICAgICB2YXIgYml0ID0gd29yZCA+PiBqICYgMTsKCiAgICAg
ICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7CiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7CiAgICAgICAgICBjdXJyZW50TGVuID0gMDsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgY3VycmVudCA8PD0gMTsKICAgICAgICBjdXJyZW50IHw9IGJpdDsKICAgICAgICBjdXJyZW50TGVuKys7CiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNv
bnRpbnVlOwogICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTsKICAgICAgICBjdXJyZW50TGVuID0gMDsKICAgICAgICBjdXJyZW50ID0gMDsKICAgICAgfQoKICAgICAgc3RhcnQgPSAyNjsKICAgIH0KCiAgICByZXR1cm4gcmVzOwogIH07CgogIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvKG51bSkgewogICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pOwogICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5jb252
ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tKG51bSkgewogICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpOwogICAgcmVzLnJlZCA9IG51bGw7CiAgICByZXR1cm4gcmVzOwogIH07IC8vCiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lCiAgLy8KCgogIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250KG51bSkgewogICAgcmV0dXJuIG5ldyBNb250KG51bSk7CiAgfTsKCiAgZnVuY3Rpb24gTW9udChtKSB7CiAgICBSZWQuY2FsbCh0aGlzLCBtKTsKICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7CgogICAgaWYg
KHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkgewogICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gdGhpcy5zaGlmdCAlIDI2OwogICAgfQoKICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7CiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7CiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7CiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7CiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpOwogICAg
dGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpOwogIH0KCiAgaW5oZXJpdHMoTW9udCwgUmVkKTsKCiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvKG51bSkgewogICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpOwogIH07CgogIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20obnVtKSB7CiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpOwogICAgci5yZWQgPSBudWxsOwogICAgcmV0dXJu
IHI7CiAgfTsKCiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwoYSwgYikgewogICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgewogICAgICBhLndvcmRzWzBdID0gMDsKICAgICAgYS5sZW5ndGggPSAxOwogICAgICByZXR1cm4gYTsKICAgIH0KCiAgICB2YXIgdCA9IGEuaW11bChiKTsKICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7CiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7
CiAgICB2YXIgcmVzID0gdTsKCiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7CiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pOwogICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7CiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pOwogICAgfQoKICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpOwogIH07CgogIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChhLCBiKSB7CiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTsKICAgIHZh
ciB0ID0gYS5tdWwoYik7CiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pOwogICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpOwogICAgdmFyIHJlcyA9IHU7CgogICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkgewogICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTsKICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkgewogICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTsKICAgIH0KCiAgICByZXR1cm4gcmVzLl9mb3Jj
ZVJlZCh0aGlzKTsKICB9OwoKICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bShhKSB7CiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSCiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTsKICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpOwogIH07Cn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdm9pZCAwKTsKCn0seyJidWZmZXIiOjE4NX1dLDE4MjpbZnVuY3Rpb24ocmVxdWly
ZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7CmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheTsKZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheTsKdmFyIGxvb2t1cCA9IFtdOwp2YXIgcmV2TG9va3VwID0gW107CnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXk7CnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFy
c3R1dnd4eXowMTIzNDU2Nzg5Ky8nOwoKZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICBsb29rdXBbaV0gPSBjb2RlW2ldOwogIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaTsKfSAvLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuCi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnMKCgpyZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjI7CnJl
dkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2MzsKCmZ1bmN0aW9uIGdldExlbnMoYjY0KSB7CiAgdmFyIGxlbiA9IGI2NC5sZW5ndGg7CgogIGlmIChsZW4gJSA0ID4gMCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jyk7CiAgfSAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmQKICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDIKCgog
IHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9Jyk7CiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW47CiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW4gPyAwIDogNCAtIHZhbGlkTGVuICUgNDsKICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dOwp9IC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YQoKCmZ1bmN0aW9uIGJ5dGVMZW5ndGgoYjY0KSB7CiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NCk7CiAgdmFy
IHZhbGlkTGVuID0gbGVuc1swXTsKICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXTsKICByZXR1cm4gKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzTGVuOwp9CgpmdW5jdGlvbiBfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHsKICByZXR1cm4gKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzTGVuOwp9CgpmdW5jdGlvbiB0b0J5dGVBcnJheShiNjQpIHsKICB2YXIgdG1wOwogIHZhciBsZW5zID0gZ2V0
TGVucyhiNjQpOwogIHZhciB2YWxpZExlbiA9IGxlbnNbMF07CiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV07CiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSk7CiAgdmFyIGN1ckJ5dGUgPSAwOyAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzCgogIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwID8gdmFsaWRMZW4gLSA0IDogdmFsaWRMZW47CiAgdmFyIGk7CgogIGZv
ciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkgewogICAgdG1wID0gcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNiB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldOwogICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgPj4gMTYgJiAweEZGOwogICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgPj4gOCAmIDB4RkY7CiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkY7
CiAgfQoKICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7CiAgICB0bXAgPSByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0OwogICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGOwogIH0KCiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkgewogICAgdG1wID0gcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQgfCByZXZMb29rdXBbYjY0LmNoYXJDb2Rl
QXQoaSArIDIpXSA+PiAyOwogICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgPj4gOCAmIDB4RkY7CiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkY7CiAgfQoKICByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQobnVtKSB7CiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdOwp9CgpmdW5jdGlvbiBlbmNvZGVDaHVuayh1aW50OCwgc3RhcnQsIGVuZCkgewogIHZh
ciB0bXA7CiAgdmFyIG91dHB1dCA9IFtdOwoKICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykgewogICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2ICYgMHhGRjAwMDApICsgKHVpbnQ4W2kgKyAxXSA8PCA4ICYgMHhGRjAwKSArICh1aW50OFtpICsgMl0gJiAweEZGKTsKICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKTsKICB9CgogIHJldHVybiBvdXRwdXQuam9pbignJyk7Cn0KCmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkodWludDgpIHsKICB2YXIgdG1wOwogIHZhciBsZW4gPSB1aW50OC5sZW5n
dGg7CiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzOyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlcwoKICB2YXIgcGFydHMgPSBbXTsKICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MzsgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzCiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlcgoKICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3Ro
KSB7CiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCBpICsgbWF4Q2h1bmtMZW5ndGggPiBsZW4yID8gbGVuMiA6IGkgKyBtYXhDaHVua0xlbmd0aCkpOwogIH0gLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlcwoKCiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHsKICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdOwogICAgcGFydHMucHVzaChsb29rdXBbdG1wID4+IDJdICsgbG9va3VwW3RtcCA8PCA0ICYgMHgzRl0gKyAnPT0nKTsKICB9IGVs
c2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHsKICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdOwogICAgcGFydHMucHVzaChsb29rdXBbdG1wID4+IDEwXSArIGxvb2t1cFt0bXAgPj4gNCAmIDB4M0ZdICsgbG9va3VwW3RtcCA8PCAyICYgMHgzRl0gKyAnPScpOwogIH0KCiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpOwp9Cgp9LHt9XSwxODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBl
cnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIg
OiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgJ3VzZSBzdHJpY3QnOyAvLyBVdGlscwoKICBmdW5jdGlvbiBhc3NlcnQodmFsLCBtc2cpIHsKICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7CiAgfSAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZQogIC8vIGFyY2hpdGVjdHVyZSB5ZXQuCgoKICBmdW5jdGlvbiBp
bmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yOwoKICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uIFRlbXBDdG9yKCkge307CgogICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTsKICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7CiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7CiAgfSAvLyBCTgoKCiAgZnVuY3Rpb24gQk4obnVtYmVyLCBiYXNlLCBlbmRpYW4pIHsKICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHsK
ICAgICAgcmV0dXJuIG51bWJlcjsKICAgIH0KCiAgICB0aGlzLm5lZ2F0aXZlID0gMDsKICAgIHRoaXMud29yZHMgPSBudWxsOwogICAgdGhpcy5sZW5ndGggPSAwOyAvLyBSZWR1Y3Rpb24gY29udGV4dAoKICAgIHRoaXMucmVkID0gbnVsbDsKCiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7CiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHsKICAgICAgICBlbmRpYW4gPSBiYXNlOwogICAgICAgIGJhc2UgPSAxMDsKICAgICAgfQoKICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAx
MCwgZW5kaWFuIHx8ICdiZScpOwogICAgfQogIH0KCiAgaWYgKF90eXBlb2YobW9kdWxlKSA9PT0gJ29iamVjdCcpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gQk47CiAgfSBlbHNlIHsKICAgIGV4cG9ydHMuQk4gPSBCTjsKICB9CgogIEJOLkJOID0gQk47CiAgQk4ud29yZFNpemUgPSAyNjsKICB2YXIgQnVmZmVyOwoKICB0cnkgewogICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyOwogIH0gY2F0Y2ggKGUpIHt9CgogIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOKG51bSkgewogICAgaWYgKG51bSBpbnN0YW5jZW9m
IEJOKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgX3R5cGVvZihudW0pID09PSAnb2JqZWN0JyAmJiBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTsKICB9OwoKICBCTi5tYXggPSBmdW5jdGlvbiBtYXgobGVmdCwgcmlnaHQpIHsKICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDsKICAgIHJldHVybiByaWdodDsKICB9OwoKICBCTi5taW4gPSBmdW5jdGlvbiBtaW4obGVmdCwg
cmlnaHQpIHsKICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDsKICAgIHJldHVybiByaWdodDsKICB9OwoKICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KG51bWJlciwgYmFzZSwgZW5kaWFuKSB7CiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHsKICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pOwogICAgfQoKICAgIGlmIChfdHlwZW9mKG51bWJlcikgPT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJy
YXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pOwogICAgfQoKICAgIGlmIChiYXNlID09PSAnaGV4JykgewogICAgICBiYXNlID0gMTY7CiAgICB9CgogICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpOwogICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXHMrL2csICcnKTsKICAgIHZhciBzdGFydCA9IDA7CgogICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7CiAgICAgIHN0YXJ0Kys7CiAgICB9CgogICAgaWYgKGJhc2UgPT09IDE2KSB7CiAgICAgIHRoaXMu
X3BhcnNlSGV4KG51bWJlciwgc3RhcnQpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpOwogICAgfQoKICAgIGlmIChudW1iZXJbMF0gPT09ICctJykgewogICAgICB0aGlzLm5lZ2F0aXZlID0gMTsKICAgIH0KCiAgICB0aGlzLl9zdHJpcCgpOwoKICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjsKCiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7CiAgfTsKCiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24g
X2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHsKICAgIGlmIChudW1iZXIgPCAwKSB7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAxOwogICAgICBudW1iZXIgPSAtbnVtYmVyOwogICAgfQoKICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHsKICAgICAgdGhpcy53b3JkcyA9IFtudW1iZXIgJiAweDNmZmZmZmZdOwogICAgICB0aGlzLmxlbmd0aCA9IDE7CiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHsKICAgICAgdGhpcy53b3JkcyA9IFtudW1iZXIgJiAweDNmZmZmZmYsIG51bWJlciAv
IDB4NDAwMDAwMCAmIDB4M2ZmZmZmZl07CiAgICAgIHRoaXMubGVuZ3RoID0gMjsKICAgIH0gZWxzZSB7CiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpCgogICAgICB0aGlzLndvcmRzID0gW251bWJlciAmIDB4M2ZmZmZmZiwgbnVtYmVyIC8gMHg0MDAwMDAwICYgMHgzZmZmZmZmLCAxXTsKICAgICAgdGhpcy5sZW5ndGggPSAzOwogICAgfQoKICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjsgLy8gUmV2ZXJzZSB0aGUgYnl0ZXMKCiAgICB0aGlzLl9pbml0QXJy
YXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7CiAgfTsKCiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKSB7CiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheQogICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7CgogICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkgewogICAgICB0aGlzLndvcmRzID0gWzBdOwogICAgICB0aGlzLmxlbmd0aCA9IDE7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIHRoaXMu
bGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTsKICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICB0aGlzLndvcmRzW2ldID0gMDsKICAgIH0KCiAgICB2YXIgaiwgdzsKICAgIHZhciBvZmYgPSAwOwoKICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHsKICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykgewogICAgICAgIHcgPSBudW1iZXJbaV0gfCBu
dW1iZXJbaSAtIDFdIDw8IDggfCBudW1iZXJbaSAtIDJdIDw8IDE2OwogICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA8PCBvZmYgJiAweDNmZmZmZmY7CiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSB3ID4+PiAyNiAtIG9mZiAmIDB4M2ZmZmZmZjsKICAgICAgICBvZmYgKz0gMjQ7CgogICAgICAgIGlmIChvZmYgPj0gMjYpIHsKICAgICAgICAgIG9mZiAtPSAyNjsKICAgICAgICAgIGorKzsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7CiAgICAgIGZvciAoaSA9IDAsIGogPSAw
OyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7CiAgICAgICAgdyA9IG51bWJlcltpXSB8IG51bWJlcltpICsgMV0gPDwgOCB8IG51bWJlcltpICsgMl0gPDwgMTY7CiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3IDw8IG9mZiAmIDB4M2ZmZmZmZjsKICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9IHcgPj4+IDI2IC0gb2ZmICYgMHgzZmZmZmZmOwogICAgICAgIG9mZiArPSAyNDsKCiAgICAgICAgaWYgKG9mZiA+PSAyNikgewogICAgICAgICAgb2ZmIC09IDI2OwogICAgICAgICAgaisrOwogICAgICAgIH0KICAgICAgfQog
ICAgfQoKICAgIHJldHVybiB0aGlzLl9zdHJpcCgpOwogIH07CgogIGZ1bmN0aW9uIHBhcnNlSGV4KHN0ciwgc3RhcnQsIGVuZCkgewogICAgdmFyIHIgPSAwOwogICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7CiAgICB2YXIgeiA9IDA7CgogICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHsKICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4OwogICAgICByIDw8PSA0OwogICAgICB2YXIgYjsgLy8gJ2EnIC0gJ2YnCgogICAgICBpZiAoYyA+PSA0OSAmJiBjIDw9IDU0KSB7
CiAgICAgICAgYiA9IGMgLSA0OSArIDB4YTsgLy8gJ0EnIC0gJ0YnCiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKSB7CiAgICAgICAgYiA9IGMgLSAxNyArIDB4YTsgLy8gJzAnIC0gJzknCiAgICAgIH0gZWxzZSB7CiAgICAgICAgYiA9IGM7CiAgICAgIH0KCiAgICAgIHIgfD0gYjsKICAgICAgeiB8PSBiOwogICAgfQoKICAgIGFzc2VydCghKHogJiAweGYwKSwgJ0ludmFsaWQgY2hhcmFjdGVyIGluICcgKyBzdHIpOwogICAgcmV0dXJuIHI7CiAgfQoKICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rp
b24gX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpIHsKICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyCiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpOwogICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHRoaXMud29yZHNbaV0gPSAwOwogICAgfQoKICAgIHZhciBqLCB3OyAvLyBTY2FuIDI0
LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXIKCiAgICB2YXIgb2ZmID0gMDsKCiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikgewogICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7CiAgICAgIHRoaXMud29yZHNbal0gfD0gdyA8PCBvZmYgJiAweDNmZmZmZmY7IC8vIE5PVEU6IGAweDNmZmZmZmAgaXMgaW50ZW50aW9uYWwgaGVyZSwgMjZiaXRzIG1heCBzaGlmdCArIDI0Yml0IGhleCBsaW1iCgogICAgICB0aGlzLndvcmRzW2ogKyAx
XSB8PSB3ID4+PiAyNiAtIG9mZiAmIDB4M2ZmZmZmOwogICAgICBvZmYgKz0gMjQ7CgogICAgICBpZiAob2ZmID49IDI2KSB7CiAgICAgICAgb2ZmIC09IDI2OwogICAgICAgIGorKzsKICAgICAgfQogICAgfQoKICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHsKICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTsKICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3IDw8IG9mZiAmIDB4M2ZmZmZmZjsKICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gMjYgLSBvZmYgJiAweDNmZmZmZjsKICAgIH0KCiAgICB0
aGlzLl9zdHJpcCgpOwogIH07CgogIGZ1bmN0aW9uIHBhcnNlQmFzZShzdHIsIHN0YXJ0LCBlbmQsIG11bCkgewogICAgdmFyIHIgPSAwOwogICAgdmFyIGIgPSAwOwogICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7CgogICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHsKICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4OwogICAgICByICo9IG11bDsgLy8gJ2EnCgogICAgICBpZiAoYyA+PSA0OSkgewogICAgICAgIGIgPSBjIC0gNDkgKyAweGE7IC8vICdBJwogICAgICB9
IGVsc2UgaWYgKGMgPj0gMTcpIHsKICAgICAgICBiID0gYyAtIDE3ICsgMHhhOyAvLyAnMCcgLSAnOScKICAgICAgfSBlbHNlIHsKICAgICAgICBiID0gYzsKICAgICAgfQoKICAgICAgYXNzZXJ0KGMgPj0gMCAmJiBiIDwgbXVsLCAnSW52YWxpZCBjaGFyYWN0ZXInKTsKICAgICAgciArPSBiOwogICAgfQoKICAgIHJldHVybiByOwogIH0KCiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpIHsKICAgIC8vIEluaXRpYWxpemUgYXMgemVybwogICAgdGhpcy53
b3JkcyA9IFswXTsKICAgIHRoaXMubGVuZ3RoID0gMTsgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlCgogICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7CiAgICAgIGxpbWJMZW4rKzsKICAgIH0KCiAgICBsaW1iTGVuLS07CiAgICBsaW1iUG93ID0gbGltYlBvdyAvIGJhc2UgfCAwOwogICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0OwogICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjsKICAgIHZhciBlbmQg
PSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7CiAgICB2YXIgd29yZCA9IDA7CgogICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHsKICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTsKICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTsKCiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkgewogICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9pYWRk
bih3b3JkKTsKICAgICAgfQogICAgfQoKICAgIGlmIChtb2QgIT09IDApIHsKICAgICAgdmFyIHBvdyA9IDE7CiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykgewogICAgICAgIHBvdyAqPSBiYXNlOwogICAgICB9CgogICAgICB0aGlzLmltdWxuKHBvdyk7CgogICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHsKICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7CiAgICAgIH0gZWxzZSB7
CiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7CiAgICAgIH0KICAgIH0KICB9OwoKICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkoZGVzdCkgewogICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldOwogICAgfQoKICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7CiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTsKICAgIGRlc3QucmVk
ID0gdGhpcy5yZWQ7CiAgfTsKCiAgZnVuY3Rpb24gbW92ZShkZXN0LCBzcmMpIHsKICAgIGRlc3Qud29yZHMgPSBzcmMud29yZHM7CiAgICBkZXN0Lmxlbmd0aCA9IHNyYy5sZW5ndGg7CiAgICBkZXN0Lm5lZ2F0aXZlID0gc3JjLm5lZ2F0aXZlOwogICAgZGVzdC5yZWQgPSBzcmMucmVkOwogIH0KCiAgQk4ucHJvdG90eXBlLl9tb3ZlID0gZnVuY3Rpb24gX21vdmUoZGVzdCkgewogICAgbW92ZShkZXN0LCB0aGlzKTsKICB9OwoKICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHsKICAgIHZhciByID0gbmV3
IEJOKG51bGwpOwogICAgdGhpcy5jb3B5KHIpOwogICAgcmV0dXJuIHI7CiAgfTsKCiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kKHNpemUpIHsKICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHsKICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfTsgLy8gUmVtb3ZlIGxlYWRpbmcgYDBgIGZyb20gYHRoaXNgCgoKICBCTi5wcm90b3R5cGUuX3N0cmlwID0gZnVuY3Rpb24gc3RyaXAoKSB7CiAgICB3aGlsZSAodGhpcy5sZW5ndGgg
PiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkgewogICAgICB0aGlzLmxlbmd0aC0tOwogICAgfQoKICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpOwogIH07CgogIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24oKSB7CiAgICAvLyAtMCA9IDAKICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAwOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH07IC8vIENoZWNrIFN5bWJvbC5mb3IgYmVj
YXVzZSBub3QgZXZlcnl3aGVyZSB3aGVyZSBTeW1ib2wgZGVmaW5lZAogIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TeW1ib2wjQnJvd3Nlcl9jb21wYXRpYmlsaXR5CgoKICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFN5bWJvbC5mb3IgPT09ICdmdW5jdGlvbicpIHsKICAgIHRyeSB7CiAgICAgIEJOLnByb3RvdHlwZVtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1
c3RvbScpXSA9IGluc3BlY3Q7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gaW5zcGVjdDsKICAgIH0KICB9IGVsc2UgewogICAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBpbnNwZWN0OwogIH0KCiAgZnVuY3Rpb24gaW5zcGVjdCgpIHsKICAgIHJldHVybiAodGhpcy5yZWQgPyAnPEJOLVI6ICcgOiAnPEJOOiAnKSArIHRoaXMudG9TdHJpbmcoMTYpICsgJz4nOwogIH0KICAvKgogICB2YXIgemVyb3MgPSBbXTsKICB2YXIgZ3JvdXBTaXplcyA9IFtdOwogIHZhciBncm91cEJhc2VzID0gW107
CiAgIHZhciBzID0gJyc7CiAgdmFyIGkgPSAtMTsKICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHsKICAgIHplcm9zW2ldID0gczsKICAgIHMgKz0gJzAnOwogIH0KICBncm91cFNpemVzWzBdID0gMDsKICBncm91cFNpemVzWzFdID0gMDsKICBncm91cEJhc2VzWzBdID0gMDsKICBncm91cEJhc2VzWzFdID0gMDsKICB2YXIgYmFzZSA9IDIgLSAxOwogIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHsKICAgIHZhciBncm91cFNpemUgPSAwOwogICAgdmFyIGdyb3VwQmFzZSA9IDE7CiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEg
PDwgQk4ud29yZFNpemUpIC8gYmFzZSkgewogICAgICBncm91cEJhc2UgKj0gYmFzZTsKICAgICAgZ3JvdXBTaXplICs9IDE7CiAgICB9CiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplOwogICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTsKICB9CiAgICovCgoKICB2YXIgemVyb3MgPSBbJycsICcwJywgJzAwJywgJzAwMCcsICcwMDAwJywgJzAwMDAwJywgJzAwMDAwMCcsICcwMDAwMDAwJywgJzAwMDAwMDAwJywgJzAwMDAwMDAwMCcsICcwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAw
MCcsICcwMDAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJywgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
J107CiAgdmFyIGdyb3VwU2l6ZXMgPSBbMCwgMCwgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LCA4LCA3LCA3LCA3LCA3LCA2LCA2LCA2LCA2LCA2LCA2LCA2LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1LCA1XTsKICB2YXIgZ3JvdXBCYXNlcyA9IFswLCAwLCAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNiwgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5
MDYyNSwgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLCA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSwgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZdOwoKICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhiYXNlLCBwYWRkaW5nKSB7CiAgICBiYXNlID0gYmFzZSB8fCAxMDsKICAg
IHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxOwogICAgdmFyIG91dDsKCiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHsKICAgICAgb3V0ID0gJyc7CiAgICAgIHZhciBvZmYgPSAwOwogICAgICB2YXIgY2FycnkgPSAwOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldOwogICAgICAgIHZhciB3b3JkID0gKCh3IDw8IG9mZiB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7CiAgICAgICAgY2FycnkgPSB3
ID4+PiAyNCAtIG9mZiAmIDB4ZmZmZmZmOwoKICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7CiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgb3V0ID0gd29yZCArIG91dDsKICAgICAgICB9CgogICAgICAgIG9mZiArPSAyOwoKICAgICAgICBpZiAob2ZmID49IDI2KSB7CiAgICAgICAgICBvZmYgLT0gMjY7CiAgICAgICAgICBpLS07CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoY2Fy
cnkgIT09IDApIHsKICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7CiAgICAgIH0KCiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkgewogICAgICAgIG91dCA9ICcwJyArIG91dDsKICAgICAgfQoKICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHsKICAgICAgICBvdXQgPSAnLScgKyBvdXQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBvdXQ7CiAgICB9CgogICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHsKICAgICAgLy8gdmFy
IGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTsKICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07IC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpOwoKICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07CiAgICAgIG91dCA9ICcnOwogICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTsKICAgICAgYy5uZWdhdGl2ZSA9IDA7CgogICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHsKICAgICAgICB2YXIg
ciA9IGMubW9kcm4oZ3JvdXBCYXNlKS50b1N0cmluZyhiYXNlKTsKICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpOwoKICAgICAgICBpZiAoIWMuaXNaZXJvKCkpIHsKICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG91dCA9IHIgKyBvdXQ7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAodGhpcy5pc1plcm8oKSkgewogICAgICAgIG91dCA9ICcwJyArIG91dDsKICAgICAgfQoKICAgICAgd2hpbGUgKG91dC5sZW5ndGgg
JSBwYWRkaW5nICE9PSAwKSB7CiAgICAgICAgb3V0ID0gJzAnICsgb3V0OwogICAgICB9CgogICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgewogICAgICAgIG91dCA9ICctJyArIG91dDsKICAgICAgfQoKICAgICAgcmV0dXJuIG91dDsKICAgIH0KCiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIoKSB7CiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTsKCiAgICBpZiAodGhpcy5sZW5n
dGggPT09IDIpIHsKICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7CiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAzICYmIHRoaXMud29yZHNbMl0gPT09IDB4MDEpIHsKICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldAogICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArIHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7CiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikgewogICAgICBhc3NlcnQoZmFsc2UsICdOdW1iZXIg
Y2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHMnKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMCA/IC1yZXQgOiByZXQ7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHsKICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2LCAyKTsKICB9OwoKICBpZiAoQnVmZmVyKSB7CiAgICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlcihlbmRpYW4sIGxlbmd0aCkgewogICAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVu
ZGlhbiwgbGVuZ3RoKTsKICAgIH07CiAgfQoKICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkoZW5kaWFuLCBsZW5ndGgpIHsKICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7CiAgfTsKCiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gYWxsb2NhdGUoQXJyYXlUeXBlLCBzaXplKSB7CiAgICBpZiAoQXJyYXlUeXBlLmFsbG9jVW5zYWZlKSB7CiAgICAgIHJldHVybiBBcnJheVR5cGUuYWxsb2NVbnNhZmUoc2l6ZSk7CiAgICB9CgogICAgcmV0dXJuIG5ldyBBcnJh
eVR5cGUoc2l6ZSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnRvQXJyYXlMaWtlID0gZnVuY3Rpb24gdG9BcnJheUxpa2UoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkgewogICAgdGhpcy5fc3RyaXAoKTsKCiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpOwogICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTsKICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTsKICAgIGFzc2Vy
dChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7CiAgICB2YXIgcmVzID0gYWxsb2NhdGUoQXJyYXlUeXBlLCByZXFMZW5ndGgpOwogICAgdmFyIHBvc3RmaXggPSBlbmRpYW4gPT09ICdsZScgPyAnTEUnIDogJ0JFJzsKICAgIHRoaXNbJ190b0FycmF5TGlrZScgKyBwb3N0Zml4XShyZXMsIGJ5dGVMZW5ndGgpOwogICAgcmV0dXJuIHJlczsKICB9OwoKICBCTi5wcm90b3R5cGUuX3RvQXJyYXlMaWtlTEUgPSBmdW5jdGlvbiBfdG9BcnJheUxpa2VMRShyZXMsIGJ5dGVMZW5ndGgpIHsKICAgIHZh
ciBwb3NpdGlvbiA9IDA7CiAgICB2YXIgY2FycnkgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwLCBzaGlmdCA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSA8PCBzaGlmdCB8IGNhcnJ5OwogICAgICByZXNbcG9zaXRpb24rK10gPSB3b3JkICYgMHhmZjsKCiAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHsKICAgICAgICByZXNbcG9zaXRpb24rK10gPSB3b3JkID4+IDggJiAweGZmOwogICAgICB9CgogICAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7
CiAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gd29yZCA+PiAxNiAmIDB4ZmY7CiAgICAgIH0KCiAgICAgIGlmIChzaGlmdCA9PT0gNikgewogICAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHsKICAgICAgICAgIHJlc1twb3NpdGlvbisrXSA9IHdvcmQgPj4gMjQgJiAweGZmOwogICAgICAgIH0KCiAgICAgICAgY2FycnkgPSAwOwogICAgICAgIHNoaWZ0ID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYXJyeSA9IHdvcmQgPj4+IDI0OwogICAgICAgIHNoaWZ0ICs9IDI7CiAgICAgIH0KICAgIH0KCiAgICBpZiAo
cG9zaXRpb24gPCByZXMubGVuZ3RoKSB7CiAgICAgIHJlc1twb3NpdGlvbisrXSA9IGNhcnJ5OwoKICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkgewogICAgICAgIHJlc1twb3NpdGlvbisrXSA9IDA7CiAgICAgIH0KICAgIH0KICB9OwoKICBCTi5wcm90b3R5cGUuX3RvQXJyYXlMaWtlQkUgPSBmdW5jdGlvbiBfdG9BcnJheUxpa2VCRShyZXMsIGJ5dGVMZW5ndGgpIHsKICAgIHZhciBwb3NpdGlvbiA9IHJlcy5sZW5ndGggLSAxOwogICAgdmFyIGNhcnJ5ID0gMDsKCiAgICBmb3IgKHZhciBpID0gMCwgc2hpZnQg
PSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gPDwgc2hpZnQgfCBjYXJyeTsKICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gd29yZCAmIDB4ZmY7CgogICAgICBpZiAocG9zaXRpb24gPj0gMCkgewogICAgICAgIHJlc1twb3NpdGlvbi0tXSA9IHdvcmQgPj4gOCAmIDB4ZmY7CiAgICAgIH0KCiAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7CiAgICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gd29yZCA+PiAxNiAmIDB4ZmY7CiAgICAgIH0KCiAgICAgIGlmIChzaGlmdCA9PT0gNikg
ewogICAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7CiAgICAgICAgICByZXNbcG9zaXRpb24tLV0gPSB3b3JkID4+IDI0ICYgMHhmZjsKICAgICAgICB9CgogICAgICAgIGNhcnJ5ID0gMDsKICAgICAgICBzaGlmdCA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2FycnkgPSB3b3JkID4+PiAyNDsKICAgICAgICBzaGlmdCArPSAyOwogICAgICB9CiAgICB9CgogICAgaWYgKHBvc2l0aW9uID49IDApIHsKICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gY2Fycnk7CgogICAgICB3aGlsZSAocG9zaXRpb24gPj0gMCkgewogICAgICAg
IHJlc1twb3NpdGlvbi0tXSA9IDA7CiAgICAgIH0KICAgIH0KICB9OwoKICBpZiAoTWF0aC5jbHozMikgewogICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzKHcpIHsKICAgICAgcmV0dXJuIDMyIC0gTWF0aC5jbHozMih3KTsKICAgIH07CiAgfSBlbHNlIHsKICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyh3KSB7CiAgICAgIHZhciB0ID0gdzsKICAgICAgdmFyIHIgPSAwOwoKICAgICAgaWYgKHQgPj0gMHgxMDAwKSB7CiAgICAgICAgciArPSAxMzsK
ICAgICAgICB0ID4+Pj0gMTM7CiAgICAgIH0KCiAgICAgIGlmICh0ID49IDB4NDApIHsKICAgICAgICByICs9IDc7CiAgICAgICAgdCA+Pj49IDc7CiAgICAgIH0KCiAgICAgIGlmICh0ID49IDB4OCkgewogICAgICAgIHIgKz0gNDsKICAgICAgICB0ID4+Pj0gNDsKICAgICAgfQoKICAgICAgaWYgKHQgPj0gMHgwMikgewogICAgICAgIHIgKz0gMjsKICAgICAgICB0ID4+Pj0gMjsKICAgICAgfQoKICAgICAgcmV0dXJuIHIgKyB0OwogICAgfTsKICB9CgogIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0Jp
dHModykgewogICAgLy8gU2hvcnQtY3V0CiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2OwogICAgdmFyIHQgPSB3OwogICAgdmFyIHIgPSAwOwoKICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHsKICAgICAgciArPSAxMzsKICAgICAgdCA+Pj49IDEzOwogICAgfQoKICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7CiAgICAgIHIgKz0gNzsKICAgICAgdCA+Pj49IDc7CiAgICB9CgogICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkgewogICAgICByICs9IDQ7CiAgICAgIHQgPj4+PSA0OwogICAgfQoKICAgIGlmICgodCAmIDB4Mykg
PT09IDApIHsKICAgICAgciArPSAyOwogICAgICB0ID4+Pj0gMjsKICAgIH0KCiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7CiAgICAgIHIrKzsKICAgIH0KCiAgICByZXR1cm4gcjsKICB9OyAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOCgoKICBCTi5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gYml0TGVuZ3RoKCkgewogICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07CgogICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpOwoKICAgIHJldHVybiAodGhpcy5sZW5ndGgg
LSAxKSAqIDI2ICsgaGk7CiAgfTsKCiAgZnVuY3Rpb24gdG9CaXRBcnJheShudW0pIHsKICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7CgogICAgZm9yICh2YXIgYml0ID0gMDsgYml0IDwgdy5sZW5ndGg7IGJpdCsrKSB7CiAgICAgIHZhciBvZmYgPSBiaXQgLyAyNiB8IDA7CiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7CiAgICAgIHdbYml0XSA9IG51bS53b3Jkc1tvZmZdID4+PiB3Yml0ICYgMHgwMTsKICAgIH0KCiAgICByZXR1cm4gdzsKICB9IC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHMK
CgogIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzKCkgewogICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwOwogICAgdmFyIHIgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pOwoKICAgICAgciArPSBiOwogICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrOwogICAgfQoKICAgIHJldHVybiByOwogIH07CgogIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxl
bmd0aCgpIHsKICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpOwogIH07CgogIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3Mod2lkdGgpIHsKICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5jbG9uZSgpOwogIH07CgogIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zKHdpZHRoKSB7CiAgICBpZiAodGhpcy50ZXN0bih3aWR0
aCAtIDEpKSB7CiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5jbG9uZSgpOwogIH07CgogIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnKCkgewogICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7CiAgfTsgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYAoKCiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpOwogIH07CgogIEJOLnByb3RvdHlw
ZS5pbmVnID0gZnVuY3Rpb24gaW5lZygpIHsKICAgIGlmICghdGhpcy5pc1plcm8oKSkgewogICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfTsgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2UKCgogIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvcihudW0pIHsKICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHsKICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7CiAgICB9CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVu
Z3RoOyBpKyspIHsKICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvcihudW0pIHsKICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApOwogICAgcmV0dXJuIHRoaXMuaXVvcihudW0pOwogIH07IC8vIE9yIGBudW1gIHdpdGggYHRoaXNgCgoKICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvcihudW0pIHsKICAgIGlmICh0
aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaW9yKG51bSk7CiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpOwogIH07CgogIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IobnVtKSB7CiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTsKICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpOwogIH07IC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZQoKCiAgQk4ucHJvdG90eXBlLml1YW5kID0g
ZnVuY3Rpb24gaXVhbmQobnVtKSB7CiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpCiAgICB2YXIgYjsKCiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7CiAgICAgIGIgPSBudW07CiAgICB9IGVsc2UgewogICAgICBiID0gdGhpczsKICAgIH0KCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHsKICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07CiAgICB9CgogICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDsKICAgIHJldHVybiB0aGlzLl9z
dHJpcCgpOwogIH07CgogIEJOLnByb3RvdHlwZS5pYW5kID0gZnVuY3Rpb24gaWFuZChudW0pIHsKICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApOwogICAgcmV0dXJuIHRoaXMuaXVhbmQobnVtKTsKICB9OyAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2AKCgogIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQobnVtKSB7CiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTsKICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5k
KHRoaXMpOwogIH07CgogIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZChudW0pIHsKICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTsKICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTsKICB9OyAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2UKCgogIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yKG51bSkgewogICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aAogICAgdmFyIGE7CiAgICB2YXIgYjsKCiAgICBp
ZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7CiAgICAgIGEgPSB0aGlzOwogICAgICBiID0gbnVtOwogICAgfSBlbHNlIHsKICAgICAgYSA9IG51bTsKICAgICAgYiA9IHRoaXM7CiAgICB9CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7CiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTsKICAgIH0KCiAgICBpZiAodGhpcyAhPT0gYSkgewogICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTsK
ICAgICAgfQogICAgfQoKICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7CiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTsKICB9OwoKICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IobnVtKSB7CiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTsKICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7CiAgfTsgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgCgoKICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yKG51bSkgewogICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0
aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7CiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTsKICB9OwoKICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IobnVtKSB7CiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7CiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7CiAgfTsgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoCgoKICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBp
bm90bih3aWR0aCkgewogICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7CiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwOwogICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjsgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lcwoKICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7CgogICAgaWYgKGJpdHNMZWZ0ID4gMCkgewogICAgICBieXRlc05lZWRlZC0tOwogICAgfSAvLyBIYW5kbGUgY29tcGxldGUgd29yZHMKCgog
ICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7CiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjsKICAgIH0gLy8gSGFuZGxlIHRoZSByZXNpZHVlCgoKICAgIGlmIChiaXRzTGVmdCA+IDApIHsKICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmID4+IDI2IC0gYml0c0xlZnQ7CiAgICB9IC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXMKCgogICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLm5v
dG4gPSBmdW5jdGlvbiBub3RuKHdpZHRoKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTsKICB9OyAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgCgoKICBCTi5wcm90b3R5cGUuc2V0biA9IGZ1bmN0aW9uIHNldG4oYml0LCB2YWwpIHsKICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7CiAgICB2YXIgb2ZmID0gYml0IC8gMjYgfCAwOwogICAgdmFyIHdiaXQgPSBiaXQgJSAyNjsKCiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7CgogICAgaWYgKHZhbCkgewogICAgICB0aGlz
LndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAxIDw8IHdiaXQ7CiAgICB9IGVsc2UgewogICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7CiAgfTsgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZQoKCiAgQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkKG51bSkgewogICAgdmFyIHI7IC8vIG5lZ2F0aXZlICsgcG9zaXRpdmUKCiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVn
YXRpdmUgPT09IDApIHsKICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7CiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTsKICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxOwogICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTsgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZQogICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgewogICAgICBudW0ubmVnYXRpdmUgPSAwOwogICAgICByID0gdGhpcy5pc3ViKG51bSk7CiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7CiAgICAgIHJldHVybiByLl9ub3Jt
U2lnbigpOwogICAgfSAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoCgoKICAgIHZhciBhLCBiOwoKICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHsKICAgICAgYSA9IHRoaXM7CiAgICAgIGIgPSBudW07CiAgICB9IGVsc2UgewogICAgICBhID0gbnVtOwogICAgICBiID0gdGhpczsKICAgIH0KCiAgICB2YXIgY2FycnkgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykgewogICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTsKICAgICAgdGhpcy53
b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7CiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7CiAgICB9CgogICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7CiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7CiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmOwogICAgICBjYXJyeSA9IHIgPj4+IDI2OwogICAgfQoKICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7CgogICAgaWYgKGNhcnJ5ICE9PSAwKSB7CiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7CiAg
ICAgIHRoaXMubGVuZ3RoKys7IC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHdvcmRzCiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHsKICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9OyAvLyBBZGQgYG51bWAgdG8gYHRoaXNgCgoKICBCTi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKG51bSkgewogICAgdmFyIHJlczsKCiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMu
bmVnYXRpdmUgPT09IDApIHsKICAgICAgbnVtLm5lZ2F0aXZlID0gMDsKICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTsKICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7CiAgICAgIHJldHVybiByZXM7CiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAwOwogICAgICByZXMgPSBudW0uc3ViKHRoaXMpOwogICAgICB0aGlzLm5lZ2F0aXZlID0gMTsKICAgICAgcmV0dXJuIHJlczsKICAgIH0KCiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0u
bGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTsKICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpOwogIH07IC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlCgoKICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIobnVtKSB7CiAgICAvLyB0aGlzIC0gKC1udW0pID0gdGhpcyArIG51bQogICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkgewogICAgICBudW0ubmVnYXRpdmUgPSAwOwogICAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pOwogICAgICBudW0ubmVnYXRpdmUg
PSAxOwogICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTsgLy8gLXRoaXMgLSBudW0gPSAtKHRoaXMgKyBudW0pCiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHsKICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7CiAgICAgIHRoaXMuaWFkZChudW0pOwogICAgICB0aGlzLm5lZ2F0aXZlID0gMTsKICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7CiAgICB9IC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZQoKCiAgICB2YXIgY21wID0gdGhpcy5jbXAobnVtKTsgLy8gT3B0aW1pemF0aW9u
IC0gemVyb2lmeQoKICAgIGlmIChjbXAgPT09IDApIHsKICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7CiAgICAgIHRoaXMubGVuZ3RoID0gMTsKICAgICAgdGhpcy53b3Jkc1swXSA9IDA7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSAvLyBhID4gYgoKCiAgICB2YXIgYSwgYjsKCiAgICBpZiAoY21wID4gMCkgewogICAgICBhID0gdGhpczsKICAgICAgYiA9IG51bTsKICAgIH0gZWxzZSB7CiAgICAgIGEgPSBudW07CiAgICAgIGIgPSB0aGlzOwogICAgfQoKICAgIHZhciBjYXJyeSA9IDA7CgogICAgZm9yICh2YXIgaSA9IDA7IGkg
PCBiLmxlbmd0aDsgaSsrKSB7CiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApIC0gKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5OwogICAgICBjYXJyeSA9IHIgPj4gMjY7CiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmOwogICAgfQoKICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykgewogICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5OwogICAgICBjYXJyeSA9IHIgPj4gMjY7CiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmOwogICAgfSAvLyBDb3B5IHJl
c3Qgb2YgdGhlIHdvcmRzCgoKICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykgewogICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTsKICAgICAgfQogICAgfQoKICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpOwoKICAgIGlmIChhICE9PSB0aGlzKSB7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAxOwogICAgfQoKICAgIHJldHVybiB0aGlzLl9zdHJpcCgpOwogIH07IC8vIFN1YnRyYWN0IGBu
dW1gIGZyb20gYHRoaXNgCgoKICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViKG51bSkgewogICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7CiAgfTsKCiAgZnVuY3Rpb24gc21hbGxNdWxUbyhzZWxmLCBudW0sIG91dCkgewogICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTsKICAgIHZhciBsZW4gPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGggfCAwOwogICAgb3V0Lmxlbmd0aCA9IGxlbjsKICAgIGxlbiA9IGxlbiAtIDEgfCAwOyAvLyBQZWVsIG9uZSBpdGVyYXRpb24g
KGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSkKCiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwOwogICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwOwogICAgdmFyIHIgPSBhICogYjsKICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7CiAgICB2YXIgY2FycnkgPSByIC8gMHg0MDAwMDAwIHwgMDsKICAgIG91dC53b3Jkc1swXSA9IGxvOwoKICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHsKICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9
IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLAogICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZgogICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2OwogICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjsKICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7CgogICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7CiAgICAgICAgdmFyIGkgPSBrIC0gaiB8IDA7CiAgICAgICAg
YSA9IHNlbGYud29yZHNbaV0gfCAwOwogICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwOwogICAgICAgIHIgPSBhICogYiArIHJ3b3JkOwogICAgICAgIG5jYXJyeSArPSByIC8gMHg0MDAwMDAwIHwgMDsKICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7CiAgICAgIH0KCiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDsKICAgICAgY2FycnkgPSBuY2FycnkgfCAwOwogICAgfQoKICAgIGlmIChjYXJyeSAhPT0gMCkgewogICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7CiAgICB9IGVsc2UgewogICAgICBvdXQu
bGVuZ3RoLS07CiAgICB9CgogICAgcmV0dXJuIG91dC5fc3RyaXAoKTsKICB9IC8vIFRPRE8oaW5kdXRueSk6IGl0IG1heSBiZSByZWFzb25hYmxlIHRvIG9taXQgaXQgZm9yIHVzZXJzIHdobyBkb24ndCBuZWVkCiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdAogIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuCgoKICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyhzZWxmLCBu
dW0sIG91dCkgewogICAgdmFyIGEgPSBzZWxmLndvcmRzOwogICAgdmFyIGIgPSBudW0ud29yZHM7CiAgICB2YXIgbyA9IG91dC53b3JkczsKICAgIHZhciBjID0gMDsKICAgIHZhciBsbzsKICAgIHZhciBtaWQ7CiAgICB2YXIgaGk7CiAgICB2YXIgYTAgPSBhWzBdIHwgMDsKICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjsKICAgIHZhciBhaDAgPSBhMCA+Pj4gMTM7CiAgICB2YXIgYTEgPSBhWzFdIHwgMDsKICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjsKICAgIHZhciBhaDEgPSBhMSA+Pj4gMTM7CiAgICB2YXIgYTIgPSBhWzJd
IHwgMDsKICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjsKICAgIHZhciBhaDIgPSBhMiA+Pj4gMTM7CiAgICB2YXIgYTMgPSBhWzNdIHwgMDsKICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjsKICAgIHZhciBhaDMgPSBhMyA+Pj4gMTM7CiAgICB2YXIgYTQgPSBhWzRdIHwgMDsKICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjsKICAgIHZhciBhaDQgPSBhNCA+Pj4gMTM7CiAgICB2YXIgYTUgPSBhWzVdIHwgMDsKICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjsKICAgIHZhciBhaDUgPSBhNSA+Pj4gMTM7CiAgICB2YXIgYTYgPSBhWzZd
IHwgMDsKICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjsKICAgIHZhciBhaDYgPSBhNiA+Pj4gMTM7CiAgICB2YXIgYTcgPSBhWzddIHwgMDsKICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjsKICAgIHZhciBhaDcgPSBhNyA+Pj4gMTM7CiAgICB2YXIgYTggPSBhWzhdIHwgMDsKICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjsKICAgIHZhciBhaDggPSBhOCA+Pj4gMTM7CiAgICB2YXIgYTkgPSBhWzldIHwgMDsKICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjsKICAgIHZhciBhaDkgPSBhOSA+Pj4gMTM7CiAgICB2YXIgYjAgPSBiWzBd
IHwgMDsKICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjsKICAgIHZhciBiaDAgPSBiMCA+Pj4gMTM7CiAgICB2YXIgYjEgPSBiWzFdIHwgMDsKICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjsKICAgIHZhciBiaDEgPSBiMSA+Pj4gMTM7CiAgICB2YXIgYjIgPSBiWzJdIHwgMDsKICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjsKICAgIHZhciBiaDIgPSBiMiA+Pj4gMTM7CiAgICB2YXIgYjMgPSBiWzNdIHwgMDsKICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjsKICAgIHZhciBiaDMgPSBiMyA+Pj4gMTM7CiAgICB2YXIgYjQgPSBiWzRd
IHwgMDsKICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjsKICAgIHZhciBiaDQgPSBiNCA+Pj4gMTM7CiAgICB2YXIgYjUgPSBiWzVdIHwgMDsKICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjsKICAgIHZhciBiaDUgPSBiNSA+Pj4gMTM7CiAgICB2YXIgYjYgPSBiWzZdIHwgMDsKICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjsKICAgIHZhciBiaDYgPSBiNiA+Pj4gMTM7CiAgICB2YXIgYjcgPSBiWzddIHwgMDsKICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjsKICAgIHZhciBiaDcgPSBiNyA+Pj4gMTM7CiAgICB2YXIgYjggPSBiWzhd
IHwgMDsKICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjsKICAgIHZhciBiaDggPSBiOCA+Pj4gMTM7CiAgICB2YXIgYjkgPSBiWzldIHwgMDsKICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjsKICAgIHZhciBiaDkgPSBiOSA+Pj4gMTM7CiAgICBvdXQubmVnYXRpdmUgPSBzZWxmLm5lZ2F0aXZlIF4gbnVtLm5lZ2F0aXZlOwogICAgb3V0Lmxlbmd0aCA9IDE5OwogICAgLyogayA9IDAgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWwwLCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0
aC5pbXVsKGFoMCwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7CiAgICB2YXIgdzAgPSAoYyArIGxvIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpIHwgMDsKICAgIGMgPSAoaGkgKyAobWlkID4+PiAxMykgfCAwKSArICh3MCA+Pj4gMjYpIHwgMDsKICAgIHcwICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSAxICovCgogICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApOwogICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkgfCAwOwog
ICAgaGkgPSBNYXRoLmltdWwoYWgxLCBiaDApOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsMSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpIHwgMDsKICAgIHZhciB3MSA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxID4+PiAyNikgfCAwOwogICAg
dzEgJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDIgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDIsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkgfCAwOwogICAgaGkgPSBoaSAr
IE1hdGguaW11bChhaDEsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpIHwgMDsKICAgIHZhciB3MiA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcyID4+PiAyNikgfCAwOwogICAgdzIg
Jj0gMHgzZmZmZmZmOwogICAgLyogayA9IDMgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWwzLCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMiwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDIsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1h
dGguaW11bChhaDIsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDEsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMSwgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgxLCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgxLCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwwLCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDAsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMCwgYmwzKSB8
IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMCwgYmgzKSB8IDA7CiAgICB2YXIgdzMgPSAoYyArIGxvIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpIHwgMDsKICAgIGMgPSAoaGkgKyAobWlkID4+PiAxMykgfCAwKSArICh3MyA+Pj4gMjYpIHwgMDsKICAgIHczICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSA0ICovCgogICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApOwogICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkgfCAwOwogICAgaGkgPSBN
YXRoLmltdWwoYWg0LCBiaDApOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsMSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDIpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSB8IDA7
CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsMykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoMykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsNCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRo
LmltdWwoYWgwLCBibDQpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpIHwgMDsKICAgIHZhciB3NCA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHc0ID4+PiAyNikgfCAwOwogICAgdzQgJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDUgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDUsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmww
KSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDQsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmlt
dWwoYWgzLCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpIHwgMDsKICAg
IG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpIHwgMDsKICAgIHZhciB3NSA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9
IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHc1ID4+PiAyNikgfCAwOwogICAgdzUgJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDYgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw2LCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDEpIHwgMDsKICAgIG1p
ZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDQsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNCwgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg0LCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg0LCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwzLCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChh
bDMsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmwzKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMywgYmgzKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMiwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDQpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDIsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDIsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDEsIGJsNSkgfCAwOwogICAgbWlk
ID0gbWlkICsgTWF0aC5pbXVsKGFsMSwgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgxLCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgxLCBiaDUpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwwLCBibDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDAsIGJoNikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMCwgYmw2KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMCwgYmg2KSB8IDA7CiAgICB2YXIgdzYgPSAoYyArIGxvIHwgMCkg
KyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpIHwgMDsKICAgIGMgPSAoaGkgKyAobWlkID4+PiAxMykgfCAwKSArICh3NiA+Pj4gMjYpIHwgMDsKICAgIHc2ICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSA3ICovCgogICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApOwogICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkgfCAwOwogICAgaGkgPSBNYXRoLmltdWwoYWg3LCBiaDApOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDYsIGJsMSkgfCAwOwogICAgbWlkID0g
bWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw1LCBibDIpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDUsIGJoMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwg
YmwzKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsMykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDQsIGJoMykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsNCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpIHwgMDsKICAgIGxvID0g
bG8gKyBNYXRoLmltdWwoYWwyLCBibDUpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEs
IGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpIHwgMDsKICAgIHZhciB3NyA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHc3ID4+PiAyNikgfCAwOwogICAgdzcgJj0gMHgzZmZmZmZmOwog
ICAgLyogayA9IDggKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDgsIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOCwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDcsIGJo
MSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDYsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw1LCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDUsIGJoMykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSB8IDA7CiAgICBoaSA9IGhp
ICsgTWF0aC5pbXVsKGFoNSwgYmgzKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDQsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBi
bDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoNikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpIHwgMDsKICAgIG1pZCA9IG1p
ZCArIE1hdGguaW11bChhaDEsIGJsNykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoNykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDAsIGJsOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpIHwgMDsKICAgIHZhciB3OCA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArICht
aWQgPj4+IDEzKSB8IDApICsgKHc4ID4+PiAyNikgfCAwOwogICAgdzggJj0gMHgzZmZmZmZmOwogICAgLyogayA9IDkgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDApOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmwxKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDEpIHwgMDsKICAgIG1pZCA9IG1pZCAr
IE1hdGguaW11bChhaDgsIGJsMSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoMSkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmgyKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBibDIpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDIpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoMykg
fCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmwzKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmgzKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDQpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDQsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsg
TWF0aC5pbXVsKGFsNCwgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg0LCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg0LCBiaDUpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwzLCBibDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDMsIGJoNikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmw2KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMywgYmg2KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMiwgYmw3KSB8
IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDcpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDIsIGJsNykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDIsIGJoNykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDEsIGJsOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMSwgYmg4KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgxLCBibDgpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgxLCBiaDgpIHwgMDsKICAgIGxvID0gbG8gKyBN
YXRoLmltdWwoYWwwLCBibDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDAsIGJoOSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMCwgYmw5KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMCwgYmg5KSB8IDA7CiAgICB2YXIgdzkgPSAoYyArIGxvIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpIHwgMDsKICAgIGMgPSAoaGkgKyAobWlkID4+PiAxMykgfCAwKSArICh3OSA+Pj4gMjYpIHwgMDsKICAgIHc5ICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSAxMCAqLwoKICAgIGxvID0g
TWF0aC5pbXVsKGFsOSwgYmwxKTsKICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpIHwgMDsKICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgxKTsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw4LCBibDIpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDgsIGJoMikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSB8IDA7CiAgICBsbyA9IGxvICsgTWF0
aC5pbXVsKGFsNywgYmwzKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsMykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDcsIGJoMykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDYsIGJsNCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpIHwg
MDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw1LCBibDUpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1h
dGguaW11bChhaDQsIGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDMsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwyLCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSB8
IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDEsIGJoOSkgfCAwOwogICAgdmFyIHcxMCA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxMCA+
Pj4gMjYpIHwgMDsKICAgIHcxMCAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTEgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMik7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmwyKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsMykg
fCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoMykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsNCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDUpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkgfCAwOwogICAgbWlkID0gbWlkICsg
TWF0aC5pbXVsKGFoNiwgYmw1KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDQsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSB8
IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWwzLCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBN
YXRoLmltdWwoYWwyLCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDIsIGJoOSkgfCAwOwogICAgdmFyIHcxMSA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxMSA+Pj4gMjYpIHwgMDsKICAgIHcxMSAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTIgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7CiAgICBtaWQgPSBNYXRoLmlt
dWwoYWw5LCBiaDMpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmw0KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDQpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsNCkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoNCkgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsNSkgfCAwOwogICAgbWlkID0gbWlkICsg
TWF0aC5pbXVsKGFsNywgYmg1KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBibDUpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDUpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoNikgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmw2KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmg2KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmw3KSB8
IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDcpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJsNykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoNykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDQsIGJsOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNCwgYmg4KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg0LCBibDgpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg0LCBiaDgpIHwgMDsKICAgIGxvID0gbG8gKyBN
YXRoLmltdWwoYWwzLCBibDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDMsIGJoOSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoMywgYmw5KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoMywgYmg5KSB8IDA7CiAgICB2YXIgdzEyID0gKGMgKyBsbyB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSB8IDA7CiAgICBjID0gKGhpICsgKG1pZCA+Pj4gMTMpIHwgMCkgKyAodzEyID4+PiAyNikgfCAwOwogICAgdzEyICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSAxMyAqLwoKICAgIGxv
ID0gTWF0aC5pbXVsKGFsOSwgYmw0KTsKICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpIHwgMDsKICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg0KTsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw4LCBibDUpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSB8IDA7CiAgICBsbyA9IGxvICsg
TWF0aC5pbXVsKGFsNywgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDcsIGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDYsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcp
IHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw1LCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkgfCAwOwogICAgaGkgPSBoaSAr
IE1hdGguaW11bChhaDQsIGJoOSkgfCAwOwogICAgdmFyIHcxMyA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxMyA+Pj4gMjYpIHwgMDsKICAgIHcxMyAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTQgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNSk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmw1KSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDks
IGJoNSk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsNikgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoNikgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsNykgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpIHwgMDsKICAgIGhpID0gaGkg
KyBNYXRoLmltdWwoYWg3LCBiaDcpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDUsIGJs
OSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDUsIGJoOSkgfCAwOwogICAgdmFyIHcxNCA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxNCA+Pj4gMjYpIHwgMDsKICAgIHcxNCAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTUgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDYpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSB8IDA7CiAg
ICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmw3KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDcpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgsIGJsNykgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoNykgfCAwOwogICAgbG8gPSBsbyArIE1hdGguaW11bChhbDcsIGJsOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFsNywgYmg4KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg3LCBi
bDgpIHwgMDsKICAgIGhpID0gaGkgKyBNYXRoLmltdWwoYWg3LCBiaDgpIHwgMDsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw2LCBibDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDYsIGJoOSkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoNiwgYmw5KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoNiwgYmg5KSB8IDA7CiAgICB2YXIgdzE1ID0gKGMgKyBsbyB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSB8IDA7CiAgICBjID0gKGhpICsgKG1pZCA+Pj4gMTMpIHwgMCkgKyAo
dzE1ID4+PiAyNikgfCAwOwogICAgdzE1ICY9IDB4M2ZmZmZmZjsKICAgIC8qIGsgPSAxNiAqLwoKICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTsKICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpIHwgMDsKICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg3KTsKICAgIGxvID0gbG8gKyBNYXRoLmltdWwoYWw4LCBibDgpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkgfCAwOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOCwg
Ymw4KSB8IDA7CiAgICBoaSA9IGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSB8IDA7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDcsIGJoOSkgfCAwOwogICAgdmFyIHcxNiA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsg
KHcxNiA+Pj4gMjYpIHwgMDsKICAgIHcxNiAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTcgKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOCk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmw4KSB8IDA7CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7CiAgICBsbyA9IGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSB8IDA7CiAgICBtaWQgPSBtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpIHwgMDsKICAgIG1pZCA9IG1pZCArIE1hdGguaW11bChhaDgs
IGJsOSkgfCAwOwogICAgaGkgPSBoaSArIE1hdGguaW11bChhaDgsIGJoOSkgfCAwOwogICAgdmFyIHcxNyA9IChjICsgbG8gfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykgfCAwOwogICAgYyA9IChoaSArIChtaWQgPj4+IDEzKSB8IDApICsgKHcxNyA+Pj4gMjYpIHwgMDsKICAgIHcxNyAmPSAweDNmZmZmZmY7CiAgICAvKiBrID0gMTggKi8KCiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7CiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDkpOwogICAgbWlkID0gbWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSB8IDA7
CiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7CiAgICB2YXIgdzE4ID0gKGMgKyBsbyB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSB8IDA7CiAgICBjID0gKGhpICsgKG1pZCA+Pj4gMTMpIHwgMCkgKyAodzE4ID4+PiAyNikgfCAwOwogICAgdzE4ICY9IDB4M2ZmZmZmZjsKICAgIG9bMF0gPSB3MDsKICAgIG9bMV0gPSB3MTsKICAgIG9bMl0gPSB3MjsKICAgIG9bM10gPSB3MzsKICAgIG9bNF0gPSB3NDsKICAgIG9bNV0gPSB3NTsKICAgIG9bNl0gPSB3NjsKICAgIG9bN10gPSB3NzsKICAgIG9bOF0gPSB3ODsKICAg
IG9bOV0gPSB3OTsKICAgIG9bMTBdID0gdzEwOwogICAgb1sxMV0gPSB3MTE7CiAgICBvWzEyXSA9IHcxMjsKICAgIG9bMTNdID0gdzEzOwogICAgb1sxNF0gPSB3MTQ7CiAgICBvWzE1XSA9IHcxNTsKICAgIG9bMTZdID0gdzE2OwogICAgb1sxN10gPSB3MTc7CiAgICBvWzE4XSA9IHcxODsKCiAgICBpZiAoYyAhPT0gMCkgewogICAgICBvWzE5XSA9IGM7CiAgICAgIG91dC5sZW5ndGgrKzsKICAgIH0KCiAgICByZXR1cm4gb3V0OwogIH07IC8vIFBvbHlmaWxsIGNvbWIKCgogIGlmICghTWF0aC5pbXVsKSB7CiAgICBjb21iMTBN
dWxUbyA9IHNtYWxsTXVsVG87CiAgfQoKICBmdW5jdGlvbiBiaWdNdWxUbyhzZWxmLCBudW0sIG91dCkgewogICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTsKICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7CiAgICB2YXIgY2FycnkgPSAwOwogICAgdmFyIGhuY2FycnkgPSAwOwoKICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykgewogICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3Vt
dWxhdGUgYG5jYXJyeWAsCiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmCiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5OwogICAgICBobmNhcnJ5ID0gMDsKICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7CiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpOwoKICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykgewogICAgICAgIHZhciBpID0gayAtIGo7CiAgICAgICAgdmFy
IGEgPSBzZWxmLndvcmRzW2ldIHwgMDsKICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7CiAgICAgICAgdmFyIHIgPSBhICogYjsKICAgICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmOwogICAgICAgIG5jYXJyeSA9IG5jYXJyeSArIChyIC8gMHg0MDAwMDAwIHwgMCkgfCAwOwogICAgICAgIGxvID0gbG8gKyByd29yZCB8IDA7CiAgICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjsKICAgICAgICBuY2FycnkgPSBuY2FycnkgKyAobG8gPj4+IDI2KSB8IDA7CiAgICAgICAgaG5jYXJyeSArPSBuY2FycnkgPj4+IDI2
OwogICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7CiAgICAgIH0KCiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkOwogICAgICBjYXJyeSA9IG5jYXJyeTsKICAgICAgbmNhcnJ5ID0gaG5jYXJyeTsKICAgIH0KCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgb3V0LndvcmRzW2tdID0gY2Fycnk7CiAgICB9IGVsc2UgewogICAgICBvdXQubGVuZ3RoLS07CiAgICB9CgogICAgcmV0dXJuIG91dC5fc3RyaXAoKTsKICB9CgogIGZ1bmN0aW9uIGp1bWJvTXVsVG8oc2VsZiwgbnVtLCBvdXQpIHsKICAgIC8vIFRlbXBvcmFyeSBk
aXNhYmxlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvaXNzdWVzLzIxMQogICAgLy8gdmFyIGZmdG0gPSBuZXcgRkZUTSgpOwogICAgLy8gcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7CiAgICByZXR1cm4gYmlnTXVsVG8oc2VsZiwgbnVtLCBvdXQpOwogIH0KCiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8obnVtLCBvdXQpIHsKICAgIHZhciByZXM7CiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoOwoKICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAg
JiYgbnVtLmxlbmd0aCA9PT0gMTApIHsKICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpOwogICAgfSBlbHNlIGlmIChsZW4gPCA2MykgewogICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTsKICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkgewogICAgICByZXMgPSBiaWdNdWxUbyh0aGlzLCBudW0sIG91dCk7CiAgICB9IGVsc2UgewogICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTsKICAgIH0KCiAgICByZXR1cm4gcmVzOwogIH07IC8vIENvb2xleS1UdWtleSBhbGdv
cml0aG0gZm9yIEZGVAogIC8vIHNsaWdodGx5IHJldmlzaXRlZCB0byByZWx5IG9uIGxvb3BpbmcgaW5zdGVhZCBvZiByZWN1cnNpb24KCgogIGZ1bmN0aW9uIEZGVE0oeCwgeSkgewogICAgdGhpcy54ID0geDsKICAgIHRoaXMueSA9IHk7CiAgfQoKICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVChOKSB7CiAgICB2YXIgdCA9IG5ldyBBcnJheShOKTsKICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7CiAgICAg
IHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTsKICAgIH0KCiAgICByZXR1cm4gdDsKICB9OyAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGAKCgogIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbih4LCBsLCBOKSB7CiAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBOIC0gMSkgcmV0dXJuIHg7CiAgICB2YXIgcmIgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7CiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgbCAtIGkgLSAxOwogICAgICB4ID4+PSAx
OwogICAgfQoKICAgIHJldHVybiByYjsKICB9OyAvLyBQZXJmb3JtcyAidHdlZWRsaW5nIiBwaGFzZSwgdGhlcmVmb3JlICdlbXVsYXRpbmcnCiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtCgoKICBGRlRNLnByb3RvdHlwZS5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZShyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykgewogICAgICBydHdzW2ldID0gcndzW3JidFtpXV07CiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTsKICAgIH0K
ICB9OwoKICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0ocndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4sIHJidCkgewogICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pOwoKICAgIGZvciAodmFyIHMgPSAxOyBzIDwgTjsgcyA8PD0gMSkgewogICAgICB2YXIgbCA9IHMgPDwgMTsKICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTsKICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTsKCiAgICAgIGZvciAodmFy
IHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7CiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmOwogICAgICAgIHZhciBpdHdkZl8gPSBpdHdkZjsKCiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHsKICAgICAgICAgIHZhciByZSA9IHJ0d3NbcCArIGpdOwogICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07CiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107CiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107CiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlv
OwogICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvOwogICAgICAgICAgcm8gPSByeDsKICAgICAgICAgIHJ0d3NbcCArIGpdID0gcmUgKyBybzsKICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbzsKICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87CiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvOwogICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi8KCiAgICAgICAgICBpZiAoaiAhPT0gbCkgewogICAgICAgICAgICByeCA9IHJ0d2RmICogcnR3ZGZf
IC0gaXR3ZGYgKiBpdHdkZl87CiAgICAgICAgICAgIGl0d2RmXyA9IHJ0d2RmICogaXR3ZGZfICsgaXR3ZGYgKiBydHdkZl87CiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH07CgogIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IobiwgbSkgewogICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7CiAgICB2YXIgb2RkID0gTiAmIDE7CiAgICB2YXIgaSA9IDA7CgogICAgZm9yIChOID0gTiAvIDIgfCAwOyBOOyBOID0g
TiA+Pj4gMSkgewogICAgICBpKys7CiAgICB9CgogICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7CiAgfTsKCiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlKHJ3cywgaXdzLCBOKSB7CiAgICBpZiAoTiA8PSAxKSByZXR1cm47CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7CiAgICAgIHZhciB0ID0gcndzW2ldOwogICAgICByd3NbaV0gPSByd3NbTiAtIGkgLSAxXTsKICAgICAgcndzW04gLSBpIC0gMV0gPSB0OwogICAgICB0ID0gaXdzW2ldOwogICAgICBpd3NbaV0g
PSAtaXdzW04gLSBpIC0gMV07CiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7CiAgICB9CiAgfTsKCiAgRkZUTS5wcm90b3R5cGUubm9ybWFsaXplMTNiID0gZnVuY3Rpb24gbm9ybWFsaXplMTNiKHdzLCBOKSB7CiAgICB2YXIgY2FycnkgPSAwOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykgewogICAgICB2YXIgdyA9IE1hdGgucm91bmQod3NbMiAqIGkgKyAxXSAvIE4pICogMHgyMDAwICsgTWF0aC5yb3VuZCh3c1syICogaV0gLyBOKSArIGNhcnJ5OwogICAgICB3c1tpXSA9IHcgJiAweDNmZmZmZmY7Cgog
ICAgICBpZiAodyA8IDB4NDAwMDAwMCkgewogICAgICAgIGNhcnJ5ID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHdzOwogIH07CgogIEZGVE0ucHJvdG90eXBlLmNvbnZlcnQxM2IgPSBmdW5jdGlvbiBjb252ZXJ0MTNiKHdzLCBsZW4sIHJ3cywgTikgewogICAgdmFyIGNhcnJ5ID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgIGNhcnJ5ID0gY2FycnkgKyAod3NbaV0gfCAwKTsKICAgICAgcndz
WzIgKiBpXSA9IGNhcnJ5ICYgMHgxZmZmOwogICAgICBjYXJyeSA9IGNhcnJ5ID4+PiAxMzsKICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsKICAgICAgY2FycnkgPSBjYXJyeSA+Pj4gMTM7CiAgICB9IC8vIFBhZCB3aXRoIHplcm9lcwoKCiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7CiAgICAgIHJ3c1tpXSA9IDA7CiAgICB9CgogICAgYXNzZXJ0KGNhcnJ5ID09PSAwKTsKICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7CiAgfTsKCiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9
IGZ1bmN0aW9uIHN0dWIoTikgewogICAgdmFyIHBoID0gbmV3IEFycmF5KE4pOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7CiAgICAgIHBoW2ldID0gMDsKICAgIH0KCiAgICByZXR1cm4gcGg7CiAgfTsKCiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAoeCwgeSwgb3V0KSB7CiAgICB2YXIgTiA9IDIgKiB0aGlzLmd1ZXNzTGVuMTNiKHgubGVuZ3RoLCB5Lmxlbmd0aCk7CiAgICB2YXIgcmJ0ID0gdGhpcy5tYWtlUkJUKE4pOwoKICAgIHZhciBfID0gdGhpcy5zdHViKE4pOwoKICAgIHZhciBy
d3MgPSBuZXcgQXJyYXkoTik7CiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTsKICAgIHZhciBpd3N0ID0gbmV3IEFycmF5KE4pOwogICAgdmFyIG5yd3MgPSBuZXcgQXJyYXkoTik7CiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7CiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7CiAgICB2YXIgcm13cyA9IG91dC53b3JkczsKICAgIHJtd3MubGVuZ3RoID0gTjsKICAgIHRoaXMuY29udmVydDEzYih4LndvcmRzLCB4Lmxlbmd0aCwgcndzLCBOKTsKICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwg
bnJ3cywgTik7CiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7CiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHsKICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldOwogICAgICBpd3N0W2ldID0gcndzdFtpXSAqIG5pd3N0W2ldICsgaXdzdFtpXSAqIG5yd3N0W2ldOwogICAgICByd3N0W2ldID0gcng7CiAgICB9CgogICAgdGhpcy5jb25qdWdh
dGUocndzdCwgaXdzdCwgTik7CiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpOwogICAgdGhpcy5jb25qdWdhdGUocm13cywgXywgTik7CiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTsKICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlOwogICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7CiAgICByZXR1cm4gb3V0Ll9zdHJpcCgpOwogIH07IC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYAoKCiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0
aW9uIG11bChudW0pIHsKICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7CiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTsKICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTsKICB9OyAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUCgoKICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYobnVtKSB7CiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpOwogICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7CiAgICByZXR1cm4ganVt
Ym9NdWxUbyh0aGlzLCBudW0sIG91dCk7CiAgfTsgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb24KCgogIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bChudW0pIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkubXVsVG8obnVtLCB0aGlzKTsKICB9OwoKICBCTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbihudW0pIHsKICAgIHZhciBpc05lZ051bSA9IG51bSA8IDA7CiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07CiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpOwogICAgYXNzZXJ0
KG51bSA8IDB4NDAwMDAwMCk7IC8vIENhcnJ5CgogICAgdmFyIGNhcnJ5ID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtOwogICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpOwogICAgICBjYXJyeSA+Pj0gMjY7CiAgICAgIGNhcnJ5ICs9IHcgLyAweDQwMDAwMDAgfCAwOyAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtCgogICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7CiAg
ICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjsKICAgIH0KCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5OwogICAgICB0aGlzLmxlbmd0aCsrOwogICAgfQoKICAgIHJldHVybiBpc05lZ051bSA/IHRoaXMuaW5lZygpIDogdGhpczsKICB9OwoKICBCTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4obnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7CiAgfTsgLy8gYHRoaXNgICogYHRoaXNgCgoKICBCTi5wcm90b3R5cGUuc3FyID0gZnVu
Y3Rpb24gc3FyKCkgewogICAgcmV0dXJuIHRoaXMubXVsKHRoaXMpOwogIH07IC8vIGB0aGlzYCAqIGB0aGlzYCBpbi1wbGFjZQoKCiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyKCkgewogICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpOwogIH07IC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApCgoKICBCTi5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93KG51bSkgewogICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7CiAgICBpZiAody5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQk4oMSk7IC8v
IFNraXAgbGVhZGluZyB6ZXJvZXMKCiAgICB2YXIgcmVzID0gdGhpczsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkgewogICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7CiAgICB9CgogICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7CiAgICAgIGZvciAodmFyIHEgPSByZXMuc3FyKCk7IGkgPCB3Lmxlbmd0aDsgaSsrLCBxID0gcS5zcXIoKSkgewogICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTsKICAgICAgICByZXMgPSByZXMubXVsKHEpOwogICAgICB9CiAgICB9
CgogICAgcmV0dXJuIHJlczsKICB9OyAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlCgoKICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuKGJpdHMpIHsKICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTsKICAgIHZhciByID0gYml0cyAlIDI2OwogICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7CiAgICB2YXIgY2FycnlNYXNrID0gMHgzZmZmZmZmID4+PiAyNiAtIHIgPDwgMjYgLSByOwogICAgdmFyIGk7CgogICAgaWYgKHIgIT09IDApIHsKICAgICAgdmFyIGNhcnJ5ID0g
MDsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzazsKICAgICAgICB2YXIgYyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgLSBuZXdDYXJyeSA8PCByOwogICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7CiAgICAgICAgY2FycnkgPSBuZXdDYXJyeSA+Pj4gMjYgLSByOwogICAgICB9CgogICAgICBpZiAoY2FycnkpIHsKICAgICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7CiAgICAgICAgdGhpcy5sZW5ndGgr
KzsKICAgICAgfQogICAgfQoKICAgIGlmIChzICE9PSAwKSB7CiAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07CiAgICAgIH0KCiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHsKICAgICAgICB0aGlzLndvcmRzW2ldID0gMDsKICAgICAgfQoKICAgICAgdGhpcy5sZW5ndGggKz0gczsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTsKICB9OwoKICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBp
c2hsbihiaXRzKSB7CiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWUKICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTsKICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTsKICB9OyAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZQogIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lcwogIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHMKCgogIEJOLnByb3RvdHlwZS5pdXNocm4gPSBm
dW5jdGlvbiBpdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpIHsKICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTsKICAgIHZhciBoOwoKICAgIGlmIChoaW50KSB7CiAgICAgIGggPSAoaGludCAtIGhpbnQgJSAyNikgLyAyNjsKICAgIH0gZWxzZSB7CiAgICAgIGggPSAwOwogICAgfQoKICAgIHZhciByID0gYml0cyAlIDI2OwogICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTsKICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gMHgzZmZmZmZmID4+
PiByIDw8IHI7CiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDsKICAgIGggLT0gczsKICAgIGggPSBNYXRoLm1heCgwLCBoKTsgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydAoKICAgIGlmIChtYXNrZWRXb3JkcykgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykgewogICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTsKICAgICAgfQoKICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gczsKICAgIH0KCiAgICBpZiAocyA9PT0gMCkgey8vIE5vLW9wLCB3ZSBzaG91
bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsCiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykgewogICAgICB0aGlzLmxlbmd0aCAtPSBzOwoKICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMud29yZHNbMF0gPSAwOwogICAgICB0aGlzLmxlbmd0aCA9IDE7CiAgICB9CgogICAgdmFyIGNhcnJ5ID0gMDsKCiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkg
Pj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7CiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7CiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeSA8PCAyNiAtIHIgfCB3b3JkID4+PiByOwogICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrOwogICAgfSAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2sKCgogICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7CiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5OwogICAgfQoKICAgIGlm
ICh0aGlzLmxlbmd0aCA9PT0gMCkgewogICAgICB0aGlzLndvcmRzWzBdID0gMDsKICAgICAgdGhpcy5sZW5ndGggPSAxOwogICAgfQoKICAgIHJldHVybiB0aGlzLl9zdHJpcCgpOwogIH07CgogIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7CiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWUKICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTsKICAgIHJldHVybiB0aGlzLml1c2hybihiaXRzLCBoaW50LCBleHRlbmRlZCk7CiAgfTsgLy8gU2hpZnQt
bGVmdAoKCiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuKGJpdHMpIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4oYml0cykgewogICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyk7CiAgfTsgLy8gU2hpZnQtcmlnaHQKCgogIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybihiaXRzKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpOwogIH07CgogIEJOLnByb3RvdHlw
ZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuKGJpdHMpIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJpdHMpOwogIH07IC8vIFRlc3QgaWYgbiBiaXQgaXMgc2V0CgoKICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0bihiaXQpIHsKICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7CiAgICB2YXIgciA9IGJpdCAlIDI2OwogICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjsKICAgIHZhciBxID0gMSA8PCByOyAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0
aGFuIGFsbCBleGlzdGluZyB3b3JkcwoKICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7IC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuCgogICAgdmFyIHcgPSB0aGlzLndvcmRzW3NdOwogICAgcmV0dXJuICEhKHcgJiBxKTsKICB9OyAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIgKGluLXBsYWNlKQoKCiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbihiaXRzKSB7CiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7CiAgICB2YXIg
ciA9IGJpdHMgJSAyNjsKICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2OwogICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnMnKTsKCiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgewogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBpZiAociAhPT0gMCkgewogICAgICBzKys7CiAgICB9CgogICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7CgogICAgaWYgKHIgIT09IDApIHsKICAgICAgdmFyIG1hc2sgPSAweDNmZmZm
ZmYgXiAweDNmZmZmZmYgPj4+IHIgPDwgcjsKICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7CiAgfTsgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyCgoKICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbihiaXRzKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTsKICB9OyAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYAoKCiAgQk4ucHJvdG90eXBlLmlhZGRuID0gZnVu
Y3Rpb24gaWFkZG4obnVtKSB7CiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpOwogICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7CiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7IC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlCgogICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHsKICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmICh0aGlzLndvcmRzWzBdIHwgMCkgPD0gbnVtKSB7CiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7CiAgICAg
ICAgdGhpcy5uZWdhdGl2ZSA9IDA7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0KCiAgICAgIHRoaXMubmVnYXRpdmUgPSAwOwogICAgICB0aGlzLmlzdWJuKG51bSk7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAxOwogICAgICByZXR1cm4gdGhpczsKICAgIH0gLy8gQWRkIHdpdGhvdXQgY2hlY2tzCgoKICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4obnVtKSB7CiAgICB0aGlzLndvcmRzWzBdICs9IG51bTsgLy8gQ2FycnkKCiAgICBmb3Ig
KHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHsKICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7CgogICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7CiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7CiAgICAgIH0KICAgIH0KCiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7CiAgICByZXR1cm4gdGhpczsKICB9OyAvLyBT
dWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2AKCgogIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuKG51bSkgewogICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTsKICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApOwogICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pOwoKICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAwOwogICAgICB0aGlzLmlhZGRuKG51bSk7CiAgICAgIHRoaXMubmVnYXRpdmUgPSAxOwog
ICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICB0aGlzLndvcmRzWzBdIC09IG51bTsKCiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHsKICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdOwogICAgICB0aGlzLm5lZ2F0aXZlID0gMTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIENhcnJ5CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykgewogICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwOwogICAg
ICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTsKICB9OwoKICBCTi5wcm90b3R5cGUuYWRkbiA9IGZ1bmN0aW9uIGFkZG4obnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuKG51bSkgewogICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicygpIHsKICAgIHRoaXMubmVnYXRp
dmUgPSAwOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicygpIHsKICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpOwogIH07CgogIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwobnVtLCBtdWwsIHNoaWZ0KSB7CiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0OwogICAgdmFyIGk7CgogICAgdGhpcy5fZXhwYW5kKGxlbik7CgogICAgdmFyIHc7CiAgICB2YXIgY2FycnkgPSAwOwoKICAgIGZvciAoaSA9IDA7IGkgPCBu
dW0ubGVuZ3RoOyBpKyspIHsKICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5OwogICAgICB2YXIgcmlnaHQgPSAobnVtLndvcmRzW2ldIHwgMCkgKiBtdWw7CiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7CiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKHJpZ2h0IC8gMHg0MDAwMDAwIHwgMCk7CiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7CiAgICB9CgogICAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aCAtIHNoaWZ0OyBpKyspIHsKICAgICAgdyA9ICh0aGlz
LndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5OwogICAgICBjYXJyeSA9IHcgPj4gMjY7CiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7CiAgICB9CgogICAgaWYgKGNhcnJ5ID09PSAwKSByZXR1cm4gdGhpcy5fc3RyaXAoKTsgLy8gU3VidHJhY3Rpb24gb3ZlcmZsb3cKCiAgICBhc3NlcnQoY2FycnkgPT09IC0xKTsKICAgIGNhcnJ5ID0gMDsKCiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTsKICAg
ICAgY2FycnkgPSB3ID4+IDI2OwogICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjsKICAgIH0KCiAgICB0aGlzLm5lZ2F0aXZlID0gMTsKICAgIHJldHVybiB0aGlzLl9zdHJpcCgpOwogIH07CgogIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2KG51bSwgbW9kZSkgewogICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoOwogICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7CiAgICB2YXIgYiA9IG51bTsgLy8gTm9ybWFsaXplCgogICAgdmFyIGJoaSA9IGIud29yZHNbYi5s
ZW5ndGggLSAxXSB8IDA7CgogICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTsKCiAgICBzaGlmdCA9IDI2IC0gYmhpQml0czsKCiAgICBpZiAoc2hpZnQgIT09IDApIHsKICAgICAgYiA9IGIudXNobG4oc2hpZnQpOwogICAgICBhLml1c2hsbihzaGlmdCk7CiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7CiAgICB9IC8vIEluaXRpYWxpemUgcXVvdGllbnQKCgogICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoOwogICAgdmFyIHE7CgogICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7CiAg
ICAgIHEgPSBuZXcgQk4obnVsbCk7CiAgICAgIHEubGVuZ3RoID0gbSArIDE7CiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgcS53b3Jkc1tpXSA9IDA7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7CgogICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHsKICAgICAgYSA9IGRpZmY7CgogICAgICBpZiAocSkgewogICAgICAgIHEud29yZHNbbV0gPSAx
OwogICAgICB9CiAgICB9CgogICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkgewogICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgKyAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApOyAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heAogICAgICAvLyAoMHg3ZmZmZmZmKQoKICAgICAgcWogPSBNYXRoLm1pbihxaiAvIGJoaSB8IDAsIDB4M2ZmZmZmZik7CgogICAgICBhLl9p
c2hsbnN1Ym11bChiLCBxaiwgaik7CgogICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkgewogICAgICAgIHFqLS07CiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7CgogICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopOwoKICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHsKICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChxKSB7CiAgICAgICAgcS53b3Jkc1tqXSA9IHFqOwogICAgICB9CiAgICB9CgogICAgaWYgKHEpIHsKICAgICAgcS5fc3RyaXAoKTsKICAgIH0KCiAgICBh
Ll9zdHJpcCgpOyAvLyBEZW5vcm1hbGl6ZQoKCiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHsKICAgICAgYS5pdXNocm4oc2hpZnQpOwogICAgfQoKICAgIHJldHVybiB7CiAgICAgIGRpdjogcSB8fCBudWxsLAogICAgICBtb2Q6IGEKICAgIH07CiAgfTsgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSwKICAvLyAgICAgICB0byBgZGl2YCB0byByZXF1ZXN0IGRpdiBvbmx5LCBvciBiZSBhYnNlbnQgdG8KICAvLyAgICAgICByZXF1ZXN0IGJvdGgg
ZGl2ICYgbW9kCiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWQKCgogIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QobnVtLCBtb2RlLCBwb3NpdGl2ZSkgewogICAgYXNzZXJ0KCFudW0uaXNaZXJvKCkpOwoKICAgIGlmICh0aGlzLmlzWmVybygpKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZGl2OiBuZXcgQk4oMCksCiAgICAgICAgbW9kOiBuZXcgQk4oMCkKICAgICAgfTsKICAgIH0KCiAgICB2YXIgZGl2LCBtb2QsIHJlczsKCiAgICBpZiAo
dGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHsKICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTsKCiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykgewogICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlICE9PSAnZGl2JykgewogICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7CgogICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHsKICAgICAgICAgIG1vZC5pYWRkKG51bSk7CiAgICAgICAgfQogICAgICB9
CgogICAgICByZXR1cm4gewogICAgICAgIGRpdjogZGl2LAogICAgICAgIG1vZDogbW9kCiAgICAgIH07CiAgICB9CgogICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7CiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7CgogICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHsKICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpOwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGRpdjogZGl2LAogICAgICAgIG1vZDogcmVzLm1vZAogICAgICB9OwogICAgfQoK
ICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHsKICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTsKCiAgICAgIGlmIChtb2RlICE9PSAnZGl2JykgewogICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7CgogICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHsKICAgICAgICAgIG1vZC5pc3ViKG51bSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGRpdjogcmVzLmRpdiwKICAgICAgICBtb2Q6IG1vZAog
ICAgICB9OwogICAgfSAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnQKICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZQoKCiAgICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZGl2OiBuZXcgQk4oMCksCiAgICAgICAgbW9kOiB0aGlzCiAgICAgIH07CiAgICB9IC8vIFZlcnkgc2hvcnQgcmVkdWN0aW9uCgoKICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7CiAgICAg
IGlmIChtb2RlID09PSAnZGl2JykgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLAogICAgICAgICAgbW9kOiBudWxsCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGRpdjogbnVsbCwKICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kcm4obnVtLndvcmRzWzBdKSkKICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jk
c1swXSksCiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RybihudW0ud29yZHNbMF0pKQogICAgICB9OwogICAgfQoKICAgIHJldHVybiB0aGlzLl93b3JkRGl2KG51bSwgbW9kZSk7CiAgfTsgLy8gRmluZCBgdGhpc2AgLyBgbnVtYAoKCiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdihudW0pIHsKICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2OwogIH07IC8vIEZpbmQgYHRoaXNgICUgYG51bWAKCgogIEJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QobnVtKSB7CiAgICBy
ZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDsKICB9OwoKICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QobnVtKSB7CiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kOwogIH07IC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApCgoKICBCTi5wcm90b3R5cGUuZGl2Um91bmQgPSBmdW5jdGlvbiBkaXZSb3VuZChudW0pIHsKICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7IC8vIEZhc3QgY2FzZSAtIGV4YWN0IGRpdmlzaW9uCgogICAgaWYgKGRtLm1v
ZC5pc1plcm8oKSkgcmV0dXJuIGRtLmRpdjsKICAgIHZhciBtb2QgPSBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5tb2QuaXN1YihudW0pIDogZG0ubW9kOwogICAgdmFyIGhhbGYgPSBudW0udXNocm4oMSk7CiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7CiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTsgLy8gUm91bmQgZG93bgoKICAgIGlmIChjbXAgPCAwIHx8IHIyID09PSAxICYmIGNtcCA9PT0gMCkgcmV0dXJuIGRtLmRpdjsgLy8gUm91bmQgdXAKCiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0u
ZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpOwogIH07CgogIEJOLnByb3RvdHlwZS5tb2RybiA9IGZ1bmN0aW9uIG1vZHJuKG51bSkgewogICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDsKICAgIGlmIChpc05lZ051bSkgbnVtID0gLW51bTsKICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTsKICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtOwogICAgdmFyIGFjYyA9IDA7CgogICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jk
c1tpXSB8IDApKSAlIG51bTsKICAgIH0KCiAgICByZXR1cm4gaXNOZWdOdW0gPyAtYWNjIDogYWNjOwogIH07IC8vIFdBUk5JTkc6IERFUFJFQ0FURUQKCgogIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbihudW0pIHsKICAgIHJldHVybiB0aGlzLm1vZHJuKG51bSk7CiAgfTsgLy8gSW4tcGxhY2UgZGl2aXNpb24gYnkgbnVtYmVyCgoKICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2bihudW0pIHsKICAgIHZhciBpc05lZ051bSA9IG51bSA8IDA7CiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07
CiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7CiAgICB2YXIgY2FycnkgPSAwOwoKICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwOwogICAgICB0aGlzLndvcmRzW2ldID0gdyAvIG51bSB8IDA7CiAgICAgIGNhcnJ5ID0gdyAlIG51bTsKICAgIH0KCiAgICB0aGlzLl9zdHJpcCgpOwoKICAgIHJldHVybiBpc05lZ051bSA/IHRoaXMuaW5lZygpIDogdGhpczsKICB9OwoKICBCTi5wcm90b3R5
cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4obnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmVnY2QgPSBmdW5jdGlvbiBlZ2NkKHApIHsKICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTsKICAgIGFzc2VydCghcC5pc1plcm8oKSk7CiAgICB2YXIgeCA9IHRoaXM7CiAgICB2YXIgeSA9IHAuY2xvbmUoKTsKCiAgICBpZiAoeC5uZWdhdGl2ZSAhPT0gMCkgewogICAgICB4ID0geC51bW9kKHApOwogICAgfSBlbHNlIHsKICAgICAgeCA9IHguY2xvbmUoKTsKICAgIH0g
Ly8gQSAqIHggKyBCICogeSA9IHgKCgogICAgdmFyIEEgPSBuZXcgQk4oMSk7CiAgICB2YXIgQiA9IG5ldyBCTigwKTsgLy8gQyAqIHggKyBEICogeSA9IHkKCiAgICB2YXIgQyA9IG5ldyBCTigwKTsKICAgIHZhciBEID0gbmV3IEJOKDEpOwogICAgdmFyIGcgPSAwOwoKICAgIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHsKICAgICAgeC5pdXNocm4oMSk7CiAgICAgIHkuaXVzaHJuKDEpOwogICAgICArK2c7CiAgICB9CgogICAgdmFyIHlwID0geS5jbG9uZSgpOwogICAgdmFyIHhwID0geC5jbG9uZSgpOwoKICAg
IHdoaWxlICgheC5pc1plcm8oKSkgewogICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpIHsKICAgICAgICA7CiAgICAgIH0KCiAgICAgIGlmIChpID4gMCkgewogICAgICAgIHguaXVzaHJuKGkpOwoKICAgICAgICB3aGlsZSAoaS0tID4gMCkgewogICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHsKICAgICAgICAgICAgQS5pYWRkKHlwKTsKICAgICAgICAgICAgQi5pc3ViKHhwKTsKICAgICAgICAgIH0KCiAgICAgICAg
ICBBLml1c2hybigxKTsKICAgICAgICAgIEIuaXVzaHJuKDEpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKHkud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKSB7CiAgICAgICAgOwogICAgICB9CgogICAgICBpZiAoaiA+IDApIHsKICAgICAgICB5Lml1c2hybihqKTsKCiAgICAgICAgd2hpbGUgKGotLSA+IDApIHsKICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7CiAgICAgICAgICAgIEMuaWFkZCh5cCk7CiAgICAgICAgICAg
IEQuaXN1Yih4cCk7CiAgICAgICAgICB9CgogICAgICAgICAgQy5pdXNocm4oMSk7CiAgICAgICAgICBELml1c2hybigxKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7CiAgICAgICAgeC5pc3ViKHkpOwogICAgICAgIEEuaXN1YihDKTsKICAgICAgICBCLmlzdWIoRCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgeS5pc3ViKHgpOwogICAgICAgIEMuaXN1YihBKTsKICAgICAgICBELmlzdWIoQik7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gewogICAgICBhOiBDLAogICAgICBiOiBELAog
ICAgICBnY2Q6IHkuaXVzaGxuKGcpCiAgICB9OwogIH07IC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQQogIC8vIGFib3ZlLCBkZXNpZ25hdGVkIHRvIGludmVydCBtZW1iZXJzIG9mIHRoZQogIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkCgoKICBCTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wKHApIHsKICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTsKICAgIGFzc2VydCghcC5pc1plcm8oKSk7CiAgICB2YXIgYSA9IHRoaXM7CiAgICB2
YXIgYiA9IHAuY2xvbmUoKTsKCiAgICBpZiAoYS5uZWdhdGl2ZSAhPT0gMCkgewogICAgICBhID0gYS51bW9kKHApOwogICAgfSBlbHNlIHsKICAgICAgYSA9IGEuY2xvbmUoKTsKICAgIH0KCiAgICB2YXIgeDEgPSBuZXcgQk4oMSk7CiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7CiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7CgogICAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkgewogICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwg
aW0gPDw9IDEpIHsKICAgICAgICA7CiAgICAgIH0KCiAgICAgIGlmIChpID4gMCkgewogICAgICAgIGEuaXVzaHJuKGkpOwoKICAgICAgICB3aGlsZSAoaS0tID4gMCkgewogICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHsKICAgICAgICAgICAgeDEuaWFkZChkZWx0YSk7CiAgICAgICAgICB9CgogICAgICAgICAgeDEuaXVzaHJuKDEpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKSB7CiAgICAgICAg
OwogICAgICB9CgogICAgICBpZiAoaiA+IDApIHsKICAgICAgICBiLml1c2hybihqKTsKCiAgICAgICAgd2hpbGUgKGotLSA+IDApIHsKICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7CiAgICAgICAgICAgIHgyLmlhZGQoZGVsdGEpOwogICAgICAgICAgfQoKICAgICAgICAgIHgyLml1c2hybigxKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7CiAgICAgICAgYS5pc3ViKGIpOwogICAgICAgIHgxLmlzdWIoeDIpOwogICAgICB9IGVsc2UgewogICAgICAgIGIuaXN1YihhKTsKICAgICAgICB4
Mi5pc3ViKHgxKTsKICAgICAgfQogICAgfQoKICAgIHZhciByZXM7CgogICAgaWYgKGEuY21wbigxKSA9PT0gMCkgewogICAgICByZXMgPSB4MTsKICAgIH0gZWxzZSB7CiAgICAgIHJlcyA9IHgyOwogICAgfQoKICAgIGlmIChyZXMuY21wbigwKSA8IDApIHsKICAgICAgcmVzLmlhZGQocCk7CiAgICB9CgogICAgcmV0dXJuIHJlczsKICB9OwoKICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkKG51bSkgewogICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7CiAgICBpZiAobnVtLmlzWmVybygpKSBy
ZXR1cm4gdGhpcy5hYnMoKTsKICAgIHZhciBhID0gdGhpcy5jbG9uZSgpOwogICAgdmFyIGIgPSBudW0uY2xvbmUoKTsKICAgIGEubmVnYXRpdmUgPSAwOwogICAgYi5uZWdhdGl2ZSA9IDA7IC8vIFJlbW92ZSBjb21tb24gZmFjdG9yIG9mIHR3bwoKICAgIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7CiAgICAgIGEuaXVzaHJuKDEpOwogICAgICBiLml1c2hybigxKTsKICAgIH0KCiAgICBkbyB7CiAgICAgIHdoaWxlIChhLmlzRXZlbigpKSB7CiAgICAgICAgYS5pdXNocm4o
MSk7CiAgICAgIH0KCiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7CiAgICAgICAgYi5pdXNocm4oMSk7CiAgICAgIH0KCiAgICAgIHZhciByID0gYS5jbXAoYik7CgogICAgICBpZiAociA8IDApIHsKICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmAKICAgICAgICB2YXIgdCA9IGE7CiAgICAgICAgYSA9IGI7CiAgICAgICAgYiA9IHQ7CiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHsKICAgICAgICBicmVhazsKICAgICAgfQoKICAg
ICAgYS5pc3ViKGIpOwogICAgfSB3aGlsZSAodHJ1ZSk7CgogICAgcmV0dXJuIGIuaXVzaGxuKHNoaWZ0KTsKICB9OyAvLyBJbnZlcnQgbnVtYmVyIGluIHRoZSBmaWVsZCBGKG51bSkKCgogIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bShudW0pIHsKICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTsKICB9OwoKICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuKCkgewogICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmlz
T2RkID0gZnVuY3Rpb24gaXNPZGQoKSB7CiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTsKICB9OyAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtCgoKICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbihudW0pIHsKICAgIHJldHVybiB0aGlzLndvcmRzWzBdICYgbnVtOwogIH07IC8vIEluY3JlbWVudCBhdCB0aGUgYml0IHBvc2l0aW9uIGluLWxpbmUKCgogIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuKGJpdCkgewogICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXIn
KTsKICAgIHZhciByID0gYml0ICUgMjY7CiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2OwogICAgdmFyIHEgPSAxIDw8IHI7IC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzCgogICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHsKICAgICAgdGhpcy5fZXhwYW5kKHMgKyAxKTsKCiAgICAgIHRoaXMud29yZHNbc10gfD0gcTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IC8vIEFkZCBiaXQgYW5kIHByb3BhZ2F0ZSwgaWYgbmVlZGVkCgoKICAgIHZhciBjYXJyeSA9IHE7CgogICAg
Zm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXSB8IDA7CiAgICAgIHcgKz0gY2Fycnk7CiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7CiAgICAgIHcgJj0gMHgzZmZmZmZmOwogICAgICB0aGlzLndvcmRzW2ldID0gdzsKICAgIH0KCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5OwogICAgICB0aGlzLmxlbmd0aCsrOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH07CgogIEJOLnByb3RvdHlw
ZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8oKSB7CiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDsKICB9OwoKICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4obnVtKSB7CiAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwOwogICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgIW5lZ2F0aXZlKSByZXR1cm4gLTE7CiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7CgogICAgdGhpcy5fc3RyaXAoKTsKCiAgICB2YXIgcmVzOwoK
ICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHsKICAgICAgcmVzID0gMTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChuZWdhdGl2ZSkgewogICAgICAgIG51bSA9IC1udW07CiAgICAgIH0KCiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTsKICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDsKICAgICAgcmVzID0gdyA9PT0gbnVtID8gMCA6IHcgPCBudW0gPyAtMSA6IDE7CiAgICB9CgogICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDsKICAgIHJldHVy
biByZXM7CiAgfTsgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOgogIC8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYAogIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWAKICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gCgoKICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wKG51bSkgewogICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSByZXR1cm4gLTE7CiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxOwogICAg
dmFyIHJlcyA9IHRoaXMudWNtcChudW0pOwogICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDsKICAgIHJldHVybiByZXM7CiAgfTsgLy8gVW5zaWduZWQgY29tcGFyaXNvbgoKCiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wKG51bSkgewogICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduCiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTsKICAgIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHJldHVybiAt
MTsKICAgIHZhciByZXMgPSAwOwoKICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7CiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDsKICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlOwoKICAgICAgaWYgKGEgPCBiKSB7CiAgICAgICAgcmVzID0gLTE7CiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHsKICAgICAgICByZXMgPSAxOwogICAgICB9CgogICAgICBicmVhazsKICAgIH0KCiAgICByZXR1cm4gcmVzOwogIH07CgogIEJO
LnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4obnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDE7CiAgfTsKCiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gZ3QobnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTsKICB9OwoKICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4obnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDsKICB9OwoKICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlKG51bSkgewogICAgcmV0dXJuIHRoaXMuY21wKG51bSkg
Pj0gMDsKICB9OwoKICBCTi5wcm90b3R5cGUubHRuID0gZnVuY3Rpb24gbHRuKG51bSkgewogICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTsKICB9OwoKICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdChudW0pIHsKICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTsKICB9OwoKICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4obnVtKSB7CiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPD0gMDsKICB9OwoKICBCTi5wcm90b3R5cGUubHRlID0gZnVuY3Rpb24gbHRlKG51bSkgewogICAgcmV0
dXJuIHRoaXMuY21wKG51bSkgPD0gMDsKICB9OwoKICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuKG51bSkgewogICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwOwogIH07CgogIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKG51bSkgewogICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDA7CiAgfTsgLy8KICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZwogIC8vIG9uIHRoZSBgbWAgaXRzZWxmLgogIC8vCgoK
ICBCTi5yZWQgPSBmdW5jdGlvbiByZWQobnVtKSB7CiAgICByZXR1cm4gbmV3IFJlZChudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkKGN0eCkgewogICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTsKICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTsKICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpOwogIH07CgogIEJOLnByb3Rv
dHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCgpIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTsKICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTsKICB9OwoKICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkKGN0eCkgewogICAgdGhpcy5yZWQgPSBjdHg7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZChj
dHgpIHsKICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7CiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTsKICB9OwoKICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkKG51bSkgewogICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwogICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZChu
dW0pIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7CiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIobnVtKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7CiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3Vi
KG51bSkgewogICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTsKICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobChudW0pIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTsKICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTsKICB9OwoKICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVs
KG51bSkgewogICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwoKICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7CgogICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bChudW0pIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTsKCiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pOwoKICAgIHJldHVy
biB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7CiAgfTsKCiAgQk4ucHJvdG90eXBlLnJlZFNxciA9IGZ1bmN0aW9uIHJlZFNxcigpIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTsKCiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTsKCiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxcigpIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJl
ZCBudW1iZXJzJyk7CgogICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7CgogICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7CiAgfTsgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwCgoKICBCTi5wcm90b3R5cGUucmVkU3FydCA9IGZ1bmN0aW9uIHJlZFNxcnQoKSB7CiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwoKICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpOwoKICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRJ
bnZtID0gZnVuY3Rpb24gcmVkSW52bSgpIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7CgogICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7CgogICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7CiAgfTsgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYAoKCiAgQk4ucHJvdG90eXBlLnJlZE5lZyA9IGZ1bmN0aW9uIHJlZE5lZygpIHsKICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVk
IG51bWJlcnMnKTsKCiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTsKCiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpOwogIH07CgogIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cobnVtKSB7CiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpOwoKICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpOwoKICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTsKICB9OyAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvbgoKCiAg
dmFyIHByaW1lcyA9IHsKICAgIGsyNTY6IG51bGwsCiAgICBwMjI0OiBudWxsLAogICAgcDE5MjogbnVsbCwKICAgIHAyNTUxOTogbnVsbAogIH07IC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZQoKICBmdW5jdGlvbiBNUHJpbWUobmFtZSwgcCkgewogICAgLy8gUCA9IDIgXiBOIC0gSwogICAgdGhpcy5uYW1lID0gbmFtZTsKICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7CiAgICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7CiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApOwogICAg
dGhpcy50bXAgPSB0aGlzLl90bXAoKTsKICB9CgogIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAoKSB7CiAgICB2YXIgdG1wID0gbmV3IEJOKG51bGwpOwogICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpOwogICAgcmV0dXJuIHRtcDsKICB9OwoKICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlKG51bSkgewogICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYAogICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBL
KSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKQogICAgdmFyIHIgPSBudW07CiAgICB2YXIgcmxlbjsKCiAgICBkbyB7CiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApOwogICAgICByID0gdGhpcy5pbXVsSyhyKTsKICAgICAgciA9IHIuaWFkZCh0aGlzLnRtcCk7CiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpOwogICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7CgogICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApOwoKICAgIGlmIChjbXAgPT09IDApIHsKICAgICAg
ci53b3Jkc1swXSA9IDA7CiAgICAgIHIubGVuZ3RoID0gMTsKICAgIH0gZWxzZSBpZiAoY21wID4gMCkgewogICAgICByLmlzdWIodGhpcy5wKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAvLyByIGlzIGEgQk4gdjQgaW5zdGFuY2UKICAgICAgICByLnN0cmlwKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gciBpcyBhIEJOIHY1IGluc3RhbmNlCiAgICAgICAgci5fc3RyaXAoKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiByOwogIH07CgogIE1QcmltZS5wcm90
b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChpbnB1dCwgb3V0KSB7CiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpOwogIH07CgogIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyhudW0pIHsKICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspOwogIH07CgogIGZ1bmN0aW9uIEsyNTYoKSB7CiAgICBNUHJpbWUuY2FsbCh0aGlzLCAnazI1NicsICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpOwogIH0KCiAg
aW5oZXJpdHMoSzI1NiwgTVByaW1lKTsKCiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChpbnB1dCwgb3V0cHV0KSB7CiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMgogICAgdmFyIG1hc2sgPSAweDNmZmZmZjsKICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHsKICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07CiAgICB9CgogICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjsKCiAgICBpZiAo
aW5wdXQubGVuZ3RoIDw9IDkpIHsKICAgICAgaW5wdXQud29yZHNbMF0gPSAwOwogICAgICBpbnB1dC5sZW5ndGggPSAxOwogICAgICByZXR1cm47CiAgICB9IC8vIFNoaWZ0IGJ5IDkgbGltYnMKCgogICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTsKICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7CgogICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykgewogICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDsKICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9
IChuZXh0ICYgbWFzaykgPDwgNCB8IHByZXYgPj4+IDIyOwogICAgICBwcmV2ID0gbmV4dDsKICAgIH0KCiAgICBwcmV2ID4+Pj0gMjI7CiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjsKCiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkgewogICAgICBpbnB1dC5sZW5ndGggLT0gMTA7CiAgICB9IGVsc2UgewogICAgICBpbnB1dC5sZW5ndGggLT0gOTsKICAgIH0KICB9OwoKICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLKG51bSkgewogICAgLy8gSyA9IDB4MTAwMDAwM2Qx
ID0gWyAweDQwLCAweDNkMSBdCiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwOwogICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7CiAgICBudW0ubGVuZ3RoICs9IDI7IC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwCgogICAgdmFyIGxvID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykgewogICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7CiAgICAgIGxvICs9IHcgKiAweDNkMTsKICAgICAgbnVtLndvcmRzW2ldID0gbG8g
JiAweDNmZmZmZmY7CiAgICAgIGxvID0gdyAqIDB4NDAgKyAobG8gLyAweDQwMDAwMDAgfCAwKTsKICAgIH0gLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uCgoKICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7CiAgICAgIG51bS5sZW5ndGgtLTsKCiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7CiAgICAgICAgbnVtLmxlbmd0aC0tOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG51bTsKICB9OwoKICBmdW5jdGlvbiBQMjI0KCkgewogICAgTVByaW1lLmNhbGwodGhpcywg
J3AyMjQnLCAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTsKICB9CgogIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7CgogIGZ1bmN0aW9uIFAxOTIoKSB7CiAgICBNUHJpbWUuY2FsbCh0aGlzLCAncDE5MicsICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpOwogIH0KCiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTsKCiAgZnVuY3Rpb24gUDI1NTE5KCkgewogICAgLy8gMiBeIDI1NSAtIDE5CiAgICBNUHJpbWUu
Y2FsbCh0aGlzLCAnMjU1MTknLCAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpOwogIH0KCiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpOwoKICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsobnVtKSB7CiAgICAvLyBLID0gMHgxMwogICAgdmFyIGNhcnJ5ID0gMDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykgewogICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fy
cnk7CiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmOwogICAgICBoaSA+Pj49IDI2OwogICAgICBudW0ud29yZHNbaV0gPSBsbzsKICAgICAgY2FycnkgPSBoaTsKICAgIH0KCiAgICBpZiAoY2FycnkgIT09IDApIHsKICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTsKICAgIH0KCiAgICByZXR1cm4gbnVtOwogIH07IC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZAoKCiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUobmFtZSkgewogICAg
Ly8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWUKICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07CiAgICB2YXIgcHJpbWU7CgogICAgaWYgKG5hbWUgPT09ICdrMjU2JykgewogICAgICBwcmltZSA9IG5ldyBLMjU2KCk7CiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0JykgewogICAgICBwcmltZSA9IG5ldyBQMjI0KCk7CiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykgewogICAgICBwcmltZSA9IG5ldyBQMTkyKCk7CiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7CiAgICAg
IHByaW1lID0gbmV3IFAyNTUxOSgpOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTsKICAgIH0KCiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTsKICAgIHJldHVybiBwcmltZTsKICB9OyAvLwogIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZQogIC8vCgoKICBmdW5jdGlvbiBSZWQobSkgewogICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykgewogICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7CgogICAgICB0aGlzLm0gPSBwcmltZS5wOwogICAgICB0aGlzLnBy
aW1lID0gcHJpbWU7CiAgICB9IGVsc2UgewogICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTsKICAgICAgdGhpcy5tID0gbTsKICAgICAgdGhpcy5wcmltZSA9IG51bGw7CiAgICB9CiAgfQoKICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEoYSkgewogICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpOwogICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVy
cycpOwogIH07CgogIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MihhLCBiKSB7CiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7CiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpOwogIH07CgogIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QoYSkgewogICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1l
LmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpOwogICAgbW92ZShhLCBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcykpOwogICAgcmV0dXJuIGE7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoYSkgewogICAgaWYgKGEuaXNaZXJvKCkpIHsKICAgICAgcmV0dXJuIGEuY2xvbmUoKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoYSwgYikgewogICAgdGhpcy5fdmVyaWZ5MihhLCBi
KTsKCiAgICB2YXIgcmVzID0gYS5hZGQoYik7CgogICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7CiAgICAgIHJlcy5pc3ViKHRoaXMubSk7CiAgICB9CgogICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZChhLCBiKSB7CiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpOwoKICAgIHZhciByZXMgPSBhLmlhZGQoYik7CgogICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7CiAgICAgIHJlcy5pc3ViKHRoaXMubSk7CiAgICB9CgogICAgcmV0dXJu
IHJlczsKICB9OwoKICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YihhLCBiKSB7CiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpOwoKICAgIHZhciByZXMgPSBhLnN1YihiKTsKCiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7CiAgICAgIHJlcy5pYWRkKHRoaXMubSk7CiAgICB9CgogICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YihhLCBiKSB7CiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpOwoKICAgIHZhciByZXMgPSBhLmlzdWIoYik7Cgog
ICAgaWYgKHJlcy5jbXBuKDApIDwgMCkgewogICAgICByZXMuaWFkZCh0aGlzLm0pOwogICAgfQoKICAgIHJldHVybiByZXM7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwoYSwgbnVtKSB7CiAgICB0aGlzLl92ZXJpZnkxKGEpOwoKICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTsKICB9OwoKICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsKGEsIGIpIHsKICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7CgogICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpOwogIH07Cgog
IFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGEsIGIpIHsKICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7CgogICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxcihhKSB7CiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7CiAgfTsKCiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIoYSkgewogICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpOwogIH07CgogIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQo
YSkgewogICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7CiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTsKICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7IC8vIEZhc3QgY2FzZQoKICAgIGlmIChtb2QzID09PSAzKSB7CiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpOwogICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTsKICAgIH0gLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KQogICAgLy8KICAgIC8vIEZp
bmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpCgoKICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7CiAgICB2YXIgcyA9IDA7CgogICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHsKICAgICAgcysrOwogICAgICBxLml1c2hybigxKTsKICAgIH0KCiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpOwogICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTsKICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpOyAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZQogICAgLy8gTk9URTog
TWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuCgogICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7CiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTsKICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTsKCiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7CiAgICAgIHoucmVkSUFkZChuT25lKTsKICAgIH0KCiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpOwogICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBx
LmFkZG4oMSkuaXVzaHJuKDEpKTsKICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7CiAgICB2YXIgbSA9IHM7CgogICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHsKICAgICAgdmFyIHRtcCA9IHQ7CgogICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHsKICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7CiAgICAgIH0KCiAgICAgIGFzc2VydChpIDwgbSk7CiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTsKICAgICAgciA9IHIucmVkTXVsKGIp
OwogICAgICBjID0gYi5yZWRTcXIoKTsKICAgICAgdCA9IHQucmVkTXVsKGMpOwogICAgICBtID0gaTsKICAgIH0KCiAgICByZXR1cm4gcjsKICB9OwoKICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtKGEpIHsKICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pOwoKICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHsKICAgICAgaW52Lm5lZ2F0aXZlID0gMDsKICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpOwogICAg
fQogIH07CgogIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93KGEsIG51bSkgewogICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTsKICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTsKICAgIHZhciB3aW5kb3dTaXplID0gNDsKICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTsKICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTsKICAgIHduZFsxXSA9IGE7CgogICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVu
Z3RoOyBpKyspIHsKICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7CiAgICB9CgogICAgdmFyIHJlcyA9IHduZFswXTsKICAgIHZhciBjdXJyZW50ID0gMDsKICAgIHZhciBjdXJyZW50TGVuID0gMDsKICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2OwoKICAgIGlmIChzdGFydCA9PT0gMCkgewogICAgICBzdGFydCA9IDI2OwogICAgfQoKICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTsKCiAgICAgIGZvciAo
dmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7CiAgICAgICAgdmFyIGJpdCA9IHdvcmQgPj4gaiAmIDE7CgogICAgICAgIGlmIChyZXMgIT09IHduZFswXSkgewogICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTsKICAgICAgICB9CgogICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkgewogICAgICAgICAgY3VycmVudExlbiA9IDA7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIGN1cnJlbnQgPDw9IDE7CiAgICAgICAgY3VycmVudCB8PSBiaXQ7CiAgICAgICAgY3VycmVu
dExlbisrOwogICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTsKICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7CiAgICAgICAgY3VycmVudExlbiA9IDA7CiAgICAgICAgY3VycmVudCA9IDA7CiAgICAgIH0KCiAgICAgIHN0YXJ0ID0gMjY7CiAgICB9CgogICAgcmV0dXJuIHJlczsKICB9OwoKICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyhudW0pIHsKICAgIHZhciByID0gbnVtLnVtb2Qo
dGhpcy5tKTsKICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByOwogIH07CgogIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbShudW0pIHsKICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTsKICAgIHJlcy5yZWQgPSBudWxsOwogICAgcmV0dXJuIHJlczsKICB9OyAvLwogIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZQogIC8vCgoKICBCTi5tb250ID0gZnVuY3Rpb24gbW9udChudW0pIHsKICAgIHJldHVybiBuZXcgTW9udChudW0pOwogIH07CgogIGZ1bmN0aW9uIE1vbnQo
bSkgewogICAgUmVkLmNhbGwodGhpcywgbSk7CiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpOwoKICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHsKICAgICAgdGhpcy5zaGlmdCArPSAyNiAtIHRoaXMuc2hpZnQgJSAyNjsKICAgIH0KCiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpOwogICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpOwogICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pOwogICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0
aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pOwogICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTsKICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTsKICB9CgogIGluaGVyaXRzKE1vbnQsIFJlZCk7CgogIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyhudW0pIHsKICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTsKICB9OwoKICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tKG51bSkg
ewogICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTsKICAgIHIucmVkID0gbnVsbDsKICAgIHJldHVybiByOwogIH07CgogIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsKGEsIGIpIHsKICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHsKICAgICAgYS53b3Jkc1swXSA9IDA7CiAgICAgIGEubGVuZ3RoID0gMTsKICAgICAgcmV0dXJuIGE7CiAgICB9CgogICAgdmFyIHQgPSBhLmltdWwoYik7CiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludiku
aW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pOwogICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpOwogICAgdmFyIHJlcyA9IHU7CgogICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkgewogICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTsKICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkgewogICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTsKICAgIH0KCiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTsKICB9OwoKICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoYSwgYikgewog
ICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7CiAgICB2YXIgdCA9IGEubXVsKGIpOwogICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTsKICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTsKICAgIHZhciByZXMgPSB1OwoKICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHsKICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7CiAgICB9IGVsc2UgaWYg
KHUuY21wbigwKSA8IDApIHsKICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7CiAgICB9CgogICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7CiAgfTsKCiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0oYSkgewogICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUgogICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7CiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTsKICB9Owp9KSh0eXBlb2YgbW9kdWxlID09
PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHZvaWQgMCk7Cgp9LHsiYnVmZmVyIjoxODV9XSwxODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90
eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCnZhciByOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByYW5kKGxlbikgewogIGlmICghcikgciA9IG5ldyBSYW5kKG51bGwpOwogIHJldHVybiByLmdlbmVyYXRlKGxlbik7Cn07CgpmdW5jdGlv
biBSYW5kKHJhbmQpIHsKICB0aGlzLnJhbmQgPSByYW5kOwp9Cgptb2R1bGUuZXhwb3J0cy5SYW5kID0gUmFuZDsKClJhbmQucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuKSB7CiAgcmV0dXJuIHRoaXMuX3JhbmQobGVuKTsKfTsgLy8gRW11bGF0ZSBjcnlwdG8gQVBJIHVzaW5nIHJhbmR5CgoKUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7CiAgaWYgKHRoaXMucmFuZC5nZXRCeXRlcykgcmV0dXJuIHRoaXMucmFuZC5nZXRCeXRlcyhuKTsKICB2YXIgcmVzID0gbmV3IFVp
bnQ4QXJyYXkobik7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKSB7CiAgICByZXNbaV0gPSB0aGlzLnJhbmQuZ2V0Qnl0ZSgpOwogIH0KCiAgcmV0dXJuIHJlczsKfTsKCmlmICgodHlwZW9mIHNlbGYgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKHNlbGYpKSA9PT0gJ29iamVjdCcpIHsKICBpZiAoc2VsZi5jcnlwdG8gJiYgc2VsZi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7CiAgICAvLyBNb2Rlcm4gYnJvd3NlcnMKICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rp
b24gX3JhbmQobikgewogICAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkobik7CiAgICAgIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpOwogICAgICByZXR1cm4gYXJyOwogICAgfTsKICB9IGVsc2UgaWYgKHNlbGYubXNDcnlwdG8gJiYgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHsKICAgIC8vIElFCiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHsKICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pOwogICAgICBzZWxmLm1zQ3J5cHRvLmdldFJhbmRvbVZh
bHVlcyhhcnIpOwogICAgICByZXR1cm4gYXJyOwogICAgfTsgLy8gU2FmYXJpJ3MgV2ViV29ya2VycyBkbyBub3QgaGF2ZSBgY3J5cHRvYAoKICB9IGVsc2UgaWYgKCh0eXBlb2Ygd2luZG93ID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gJ29iamVjdCcpIHsKICAgIC8vIE9sZCBqdW5rCiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0Jyk7CiAgICB9OwogIH0KfSBlbHNlIHsKICAv
LyBOb2RlLmpzIG9yIFdlYiB3b3JrZXIgd2l0aCBubyBjcnlwdG8gc3VwcG9ydAogIHRyeSB7CiAgICB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7CgogICAgaWYgKHR5cGVvZiBjcnlwdG8ucmFuZG9tQnl0ZXMgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCcpOwoKICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikgewogICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pOwogICAgfTsKICB9IGNhdGNoIChlKSB7fQp9Cgp9LHsiY3J5cHRvIjox
ODV9XSwxODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp9LHt9XSwxODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovLyBiYXNlZCBvbiB0aGUgYWVzIGltcGxpbWVudGF0aW9uIGluIHRyaXBsZSBzZWMKLy8gaHR0cHM6Ly9naXRodWIuY29tL2tleWJhc2UvdHJpcGxlc2VjCi8vIHdoaWNoIGlzIGluIHR1cm4gYmFzZWQgb24gdGhlIG9uZSBmcm9tIGNyeXB0by1qcwovLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy8K
dmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKZnVuY3Rpb24gYXNVSW50MzJBcnJheShidWYpIHsKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBCdWZmZXIuZnJvbShidWYpOwogIHZhciBsZW4gPSBidWYubGVuZ3RoIC8gNCB8IDA7CiAgdmFyIG91dCA9IG5ldyBBcnJheShsZW4pOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBvdXRbaV0gPSBidWYucmVhZFVJbnQzMkJFKGkgKiA0KTsKICB9CgogIHJldHVybiBvdXQ7Cn0KCmZ1bmN0aW9uIHNjcnViVmVj
KHYpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyB2KyspIHsKICAgIHZbaV0gPSAwOwogIH0KfQoKZnVuY3Rpb24gY3J5cHRCbG9jayhNLCBrZXlTY2hlZHVsZSwgU1VCX01JWCwgU0JPWCwgblJvdW5kcykgewogIHZhciBTVUJfTUlYMCA9IFNVQl9NSVhbMF07CiAgdmFyIFNVQl9NSVgxID0gU1VCX01JWFsxXTsKICB2YXIgU1VCX01JWDIgPSBTVUJfTUlYWzJdOwogIHZhciBTVUJfTUlYMyA9IFNVQl9NSVhbM107CiAgdmFyIHMwID0gTVswXSBeIGtleVNjaGVkdWxlWzBdOwogIHZhciBzMSA9IE1bMV0gXiBrZXlT
Y2hlZHVsZVsxXTsKICB2YXIgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl07CiAgdmFyIHMzID0gTVszXSBeIGtleVNjaGVkdWxlWzNdOwogIHZhciB0MCwgdDEsIHQyLCB0MzsKICB2YXIga3NSb3cgPSA0OwoKICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykgewogICAgdDAgPSBTVUJfTUlYMFtzMCA+Pj4gMjRdIF4gU1VCX01JWDFbczEgPj4+IDE2ICYgMHhmZl0gXiBTVUJfTUlYMltzMiA+Pj4gOCAmIDB4ZmZdIF4gU1VCX01JWDNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93Kytd
OwogICAgdDEgPSBTVUJfTUlYMFtzMSA+Pj4gMjRdIF4gU1VCX01JWDFbczIgPj4+IDE2ICYgMHhmZl0gXiBTVUJfTUlYMltzMyA+Pj4gOCAmIDB4ZmZdIF4gU1VCX01JWDNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwogICAgdDIgPSBTVUJfTUlYMFtzMiA+Pj4gMjRdIF4gU1VCX01JWDFbczMgPj4+IDE2ICYgMHhmZl0gXiBTVUJfTUlYMltzMCA+Pj4gOCAmIDB4ZmZdIF4gU1VCX01JWDNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwogICAgdDMgPSBTVUJfTUlYMFtzMyA+Pj4gMjRdIF4gU1VC
X01JWDFbczAgPj4+IDE2ICYgMHhmZl0gXiBTVUJfTUlYMltzMSA+Pj4gOCAmIDB4ZmZdIF4gU1VCX01JWDNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwogICAgczAgPSB0MDsKICAgIHMxID0gdDE7CiAgICBzMiA9IHQyOwogICAgczMgPSB0MzsKICB9CgogIHQwID0gKFNCT1hbczAgPj4+IDI0XSA8PCAyNCB8IFNCT1hbczEgPj4+IDE2ICYgMHhmZl0gPDwgMTYgfCBTQk9YW3MyID4+PiA4ICYgMHhmZl0gPDwgOCB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKICB0MSA9IChTQk9Y
W3MxID4+PiAyNF0gPDwgMjQgfCBTQk9YW3MyID4+PiAxNiAmIDB4ZmZdIDw8IDE2IHwgU0JPWFtzMyA+Pj4gOCAmIDB4ZmZdIDw8IDggfCBTQk9YW3MwICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107CiAgdDIgPSAoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0IHwgU0JPWFtzMyA+Pj4gMTYgJiAweGZmXSA8PCAxNiB8IFNCT1hbczAgPj4+IDggJiAweGZmXSA8PCA4IHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwogIHQzID0gKFNCT1hbczMgPj4+IDI0XSA8PCAyNCB8IFNCT1hbczAgPj4+IDE2
ICYgMHhmZl0gPDwgMTYgfCBTQk9YW3MxID4+PiA4ICYgMHhmZl0gPDwgOCB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKICB0MCA9IHQwID4+PiAwOwogIHQxID0gdDEgPj4+IDA7CiAgdDIgPSB0MiA+Pj4gMDsKICB0MyA9IHQzID4+PiAwOwogIHJldHVybiBbdDAsIHQxLCB0MiwgdDNdOwp9IC8vIEFFUyBjb25zdGFudHMKCgp2YXIgUkNPTiA9IFsweDAwLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2XTsKCnZhciBHID0gZnVuY3Rpb24g
KCkgewogIC8vIENvbXB1dGUgZG91YmxlIHRhYmxlCiAgdmFyIGQgPSBuZXcgQXJyYXkoMjU2KTsKCiAgZm9yICh2YXIgaiA9IDA7IGogPCAyNTY7IGorKykgewogICAgaWYgKGogPCAxMjgpIHsKICAgICAgZFtqXSA9IGogPDwgMTsKICAgIH0gZWxzZSB7CiAgICAgIGRbal0gPSBqIDw8IDEgXiAweDExYjsKICAgIH0KICB9CgogIHZhciBTQk9YID0gW107CiAgdmFyIElOVl9TQk9YID0gW107CiAgdmFyIFNVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dOwogIHZhciBJTlZfU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV07IC8vIFdh
bGsgR0YoMl44KQoKICB2YXIgeCA9IDA7CiAgdmFyIHhpID0gMDsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkgewogICAgLy8gQ29tcHV0ZSBzYm94CiAgICB2YXIgc3ggPSB4aSBeIHhpIDw8IDEgXiB4aSA8PCAyIF4geGkgPDwgMyBeIHhpIDw8IDQ7CiAgICBzeCA9IHN4ID4+PiA4IF4gc3ggJiAweGZmIF4gMHg2MzsKICAgIFNCT1hbeF0gPSBzeDsKICAgIElOVl9TQk9YW3N4XSA9IHg7IC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb24KCiAgICB2YXIgeDIgPSBkW3hdOwogICAgdmFyIHg0ID0gZFt4Ml07CiAgICB2
YXIgeDggPSBkW3g0XTsgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlcwoKICAgIHZhciB0ID0gZFtzeF0gKiAweDEwMSBeIHN4ICogMHgxMDEwMTAwOwogICAgU1VCX01JWFswXVt4XSA9IHQgPDwgMjQgfCB0ID4+PiA4OwogICAgU1VCX01JWFsxXVt4XSA9IHQgPDwgMTYgfCB0ID4+PiAxNjsKICAgIFNVQl9NSVhbMl1beF0gPSB0IDw8IDggfCB0ID4+PiAyNDsKICAgIFNVQl9NSVhbM11beF0gPSB0OyAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXMKCiAgICB0ID0g
eDggKiAweDEwMTAxMDEgXiB4NCAqIDB4MTAwMDEgXiB4MiAqIDB4MTAxIF4geCAqIDB4MTAxMDEwMDsKICAgIElOVl9TVUJfTUlYWzBdW3N4XSA9IHQgPDwgMjQgfCB0ID4+PiA4OwogICAgSU5WX1NVQl9NSVhbMV1bc3hdID0gdCA8PCAxNiB8IHQgPj4+IDE2OwogICAgSU5WX1NVQl9NSVhbMl1bc3hdID0gdCA8PCA4IHwgdCA+Pj4gMjQ7CiAgICBJTlZfU1VCX01JWFszXVtzeF0gPSB0OwoKICAgIGlmICh4ID09PSAwKSB7CiAgICAgIHggPSB4aSA9IDE7CiAgICB9IGVsc2UgewogICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgy
XV1dOwogICAgICB4aSBePSBkW2RbeGldXTsKICAgIH0KICB9CgogIHJldHVybiB7CiAgICBTQk9YOiBTQk9YLAogICAgSU5WX1NCT1g6IElOVl9TQk9YLAogICAgU1VCX01JWDogU1VCX01JWCwKICAgIElOVl9TVUJfTUlYOiBJTlZfU1VCX01JWAogIH07Cn0oKTsKCmZ1bmN0aW9uIEFFUyhrZXkpIHsKICB0aGlzLl9rZXkgPSBhc1VJbnQzMkFycmF5KGtleSk7CgogIHRoaXMuX3Jlc2V0KCk7Cn0KCkFFUy5ibG9ja1NpemUgPSA0ICogNDsKQUVTLmtleVNpemUgPSAyNTYgLyA4OwpBRVMucHJvdG90eXBlLmJsb2NrU2l6ZSA9IEFF
Uy5ibG9ja1NpemU7CkFFUy5wcm90b3R5cGUua2V5U2l6ZSA9IEFFUy5rZXlTaXplOwoKQUVTLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGtleVdvcmRzID0gdGhpcy5fa2V5OwogIHZhciBrZXlTaXplID0ga2V5V29yZHMubGVuZ3RoOwogIHZhciBuUm91bmRzID0ga2V5U2l6ZSArIDY7CiAgdmFyIGtzUm93cyA9IChuUm91bmRzICsgMSkgKiA0OwogIHZhciBrZXlTY2hlZHVsZSA9IFtdOwoKICBmb3IgKHZhciBrID0gMDsgayA8IGtleVNpemU7IGsrKykgewogICAga2V5U2NoZWR1bGVba10gPSBrZXlX
b3Jkc1trXTsKICB9CgogIGZvciAoayA9IGtleVNpemU7IGsgPCBrc1Jvd3M7IGsrKykgewogICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrIC0gMV07CgogICAgaWYgKGsgJSBrZXlTaXplID09PSAwKSB7CiAgICAgIHQgPSB0IDw8IDggfCB0ID4+PiAyNDsKICAgICAgdCA9IEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQgfCBHLlNCT1hbdCA+Pj4gMTYgJiAweGZmXSA8PCAxNiB8IEcuU0JPWFt0ID4+PiA4ICYgMHhmZl0gPDwgOCB8IEcuU0JPWFt0ICYgMHhmZl07CiAgICAgIHQgXj0gUkNPTltrIC8ga2V5U2l6ZSB8IDBdIDw8IDI0Owog
ICAgfSBlbHNlIGlmIChrZXlTaXplID4gNiAmJiBrICUga2V5U2l6ZSA9PT0gNCkgewogICAgICB0ID0gRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCB8IEcuU0JPWFt0ID4+PiAxNiAmIDB4ZmZdIDw8IDE2IHwgRy5TQk9YW3QgPj4+IDggJiAweGZmXSA8PCA4IHwgRy5TQk9YW3QgJiAweGZmXTsKICAgIH0KCiAgICBrZXlTY2hlZHVsZVtrXSA9IGtleVNjaGVkdWxlW2sgLSBrZXlTaXplXSBeIHQ7CiAgfQoKICB2YXIgaW52S2V5U2NoZWR1bGUgPSBbXTsKCiAgZm9yICh2YXIgaWsgPSAwOyBpayA8IGtzUm93czsgaWsrKykgewogICAg
dmFyIGtzUiA9IGtzUm93cyAtIGlrOwogICAgdmFyIHR0ID0ga2V5U2NoZWR1bGVba3NSIC0gKGlrICUgNCA/IDAgOiA0KV07CgogICAgaWYgKGlrIDwgNCB8fCBrc1IgPD0gNCkgewogICAgICBpbnZLZXlTY2hlZHVsZVtpa10gPSB0dDsKICAgIH0gZWxzZSB7CiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9IEcuSU5WX1NVQl9NSVhbMF1bRy5TQk9YW3R0ID4+PiAyNF1dIF4gRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbdHQgPj4+IDE2ICYgMHhmZl1dIF4gRy5JTlZfU1VCX01JWFsyXVtHLlNCT1hbdHQgPj4+IDggJiAweGZmXV0g
XiBHLklOVl9TVUJfTUlYWzNdW0cuU0JPWFt0dCAmIDB4ZmZdXTsKICAgIH0KICB9CgogIHRoaXMuX25Sb3VuZHMgPSBuUm91bmRzOwogIHRoaXMuX2tleVNjaGVkdWxlID0ga2V5U2NoZWR1bGU7CiAgdGhpcy5faW52S2V5U2NoZWR1bGUgPSBpbnZLZXlTY2hlZHVsZTsKfTsKCkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrUmF3ID0gZnVuY3Rpb24gKE0pIHsKICBNID0gYXNVSW50MzJBcnJheShNKTsKICByZXR1cm4gY3J5cHRCbG9jayhNLCB0aGlzLl9rZXlTY2hlZHVsZSwgRy5TVUJfTUlYLCBHLlNCT1gsIHRoaXMuX25Sb3Vu
ZHMpOwp9OwoKQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkgewogIHZhciBvdXQgPSB0aGlzLmVuY3J5cHRCbG9ja1JhdyhNKTsKICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KTsKICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApOwogIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSwgNCk7CiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KTsKICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDEyKTsKICByZXR1cm4gYnVmOwp9OwoKQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sg
PSBmdW5jdGlvbiAoTSkgewogIE0gPSBhc1VJbnQzMkFycmF5KE0pOyAvLyBzd2FwCgogIHZhciBtMSA9IE1bMV07CiAgTVsxXSA9IE1bM107CiAgTVszXSA9IG0xOwogIHZhciBvdXQgPSBjcnlwdEJsb2NrKE0sIHRoaXMuX2ludktleVNjaGVkdWxlLCBHLklOVl9TVUJfTUlYLCBHLklOVl9TQk9YLCB0aGlzLl9uUm91bmRzKTsKICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KTsKICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApOwogIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgNCk7CiAgYnVmLndyaXRlVUlu
dDMyQkUob3V0WzJdLCA4KTsKICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDEyKTsKICByZXR1cm4gYnVmOwp9OwoKQUVTLnByb3RvdHlwZS5zY3J1YiA9IGZ1bmN0aW9uICgpIHsKICBzY3J1YlZlYyh0aGlzLl9rZXlTY2hlZHVsZSk7CiAgc2NydWJWZWModGhpcy5faW52S2V5U2NoZWR1bGUpOwogIHNjcnViVmVjKHRoaXMuX2tleSk7Cn07Cgptb2R1bGUuZXhwb3J0cy5BRVMgPSBBRVM7Cgp9LHsic2FmZS1idWZmZXIiOjM4NH1dLDE4NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsK
CnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKdmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJyk7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpOwoKdmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKTsKCnZhciBpbmNyMzIgPSByZXF1aXJlKCcuL2luY3IzMicpOwoKZnVuY3Rpb24geG9yVGVzdChhLCBiKSB7CiAgdmFyIG91dCA9IDA7CiAgaWYg
KGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgb3V0Kys7CiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgIG91dCArPSBhW2ldIF4gYltpXTsKICB9CgogIHJldHVybiBvdXQ7Cn0KCmZ1bmN0aW9uIGNhbGNJdihzZWxmLCBpdiwgY2spIHsKICBpZiAoaXYubGVuZ3RoID09PSAxMikgewogICAgc2VsZi5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDFdKV0pOwogICAgcmV0dXJuIEJ1ZmZlci5jb25j
YXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMl0pXSk7CiAgfQoKICB2YXIgZ2hhc2ggPSBuZXcgR0hBU0goY2spOwogIHZhciBsZW4gPSBpdi5sZW5ndGg7CiAgdmFyIHRvUGFkID0gbGVuICUgMTY7CiAgZ2hhc2gudXBkYXRlKGl2KTsKCiAgaWYgKHRvUGFkKSB7CiAgICB0b1BhZCA9IDE2IC0gdG9QYWQ7CiAgICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKHRvUGFkLCAwKSk7CiAgfQoKICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKDgsIDApKTsKICB2YXIgaXZCaXRzID0gbGVuICogODsKICB2YXIgdGFpbCA9IEJ1
ZmZlci5hbGxvYyg4KTsKICB0YWlsLndyaXRlVUludEJFKGl2Qml0cywgMCwgOCk7CiAgZ2hhc2gudXBkYXRlKHRhaWwpOwogIHNlbGYuX2ZpbklEID0gZ2hhc2guc3RhdGU7CiAgdmFyIG91dCA9IEJ1ZmZlci5mcm9tKHNlbGYuX2ZpbklEKTsKICBpbmNyMzIob3V0KTsKICByZXR1cm4gb3V0Owp9CgpmdW5jdGlvbiBTdHJlYW1DaXBoZXIobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkgewogIFRyYW5zZm9ybS5jYWxsKHRoaXMpOwogIHZhciBoID0gQnVmZmVyLmFsbG9jKDQsIDApOwogIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVT
KGtleSk7CgogIHZhciBjayA9IHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaCk7CgogIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKGNrKTsKICBpdiA9IGNhbGNJdih0aGlzLCBpdiwgY2spOwogIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdik7CiAgdGhpcy5fY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7CiAgdGhpcy5fc2VjQ2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7CiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHQ7CiAgdGhpcy5fYWxlbiA9IDA7CiAgdGhpcy5fbGVuID0gMDsKICB0aGlzLl9tb2RlID0g
bW9kZTsKICB0aGlzLl9hdXRoVGFnID0gbnVsbDsKICB0aGlzLl9jYWxsZWQgPSBmYWxzZTsKfQoKaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pOwoKU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7CiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikgewogICAgdmFyIHJ1bXAgPSAxNiAtIHRoaXMuX2FsZW4gJSAxNjsKCiAgICBpZiAocnVtcCA8IDE2KSB7CiAgICAgIHJ1bXAgPSBCdWZmZXIuYWxsb2MocnVtcCwgMCk7CgogICAgICB0aGlzLl9naGFzaC51cGRh
dGUocnVtcCk7CiAgICB9CiAgfQoKICB0aGlzLl9jYWxsZWQgPSB0cnVlOwoKICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKTsKCiAgaWYgKHRoaXMuX2RlY3J5cHQpIHsKICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuayk7CiAgfSBlbHNlIHsKICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpOwogIH0KCiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aDsKICByZXR1cm4gb3V0Owp9OwoKU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKHRoaXMuX2RlY3J5
cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJyk7CiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKTsKICBpZiAodGhpcy5fZGVjcnlwdCAmJiB4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1
dGhlbnRpY2F0ZSBkYXRhJyk7CiAgdGhpcy5fYXV0aFRhZyA9IHRhZzsKCiAgdGhpcy5fY2lwaGVyLnNjcnViKCk7Cn07CgpTdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnKCkgewogIGlmICh0aGlzLl9kZWNyeXB0IHx8ICFCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKTsKICByZXR1cm4gdGhpcy5fYXV0aFRhZzsKfTsKClN0cmVhbUNpcGhlci5wcm90
b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcodGFnKSB7CiAgaWYgKCF0aGlzLl9kZWNyeXB0KSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJyk7CiAgdGhpcy5fYXV0aFRhZyA9IHRhZzsKfTsKClN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEKGJ1ZikgewogIGlmICh0aGlzLl9jYWxsZWQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJyk7
CgogIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpOwoKICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGg7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlcjsKCn0seyIuL2FlcyI6MTg2LCIuL2doYXNoIjoxOTEsIi4vaW5jcjMyIjoxOTIsImJ1ZmZlci14b3IiOjIxNywiY2lwaGVyLWJhc2UiOjIxOCwiaW5oZXJpdHMiOjI3OCwic2FmZS1idWZmZXIiOjM4NH1dLDE4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBjaXBoZXJzID0gcmVxdWlyZSgnLi9lbmNyeXB0ZXInKTsK
CnZhciBkZWNpcGhlcnMgPSByZXF1aXJlKCcuL2RlY3J5cHRlcicpOwoKdmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2Rlcy9saXN0Lmpzb24nKTsKCmZ1bmN0aW9uIGdldENpcGhlcnMoKSB7CiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVzKTsKfQoKZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBleHBvcnRzLkNpcGhlciA9IGNpcGhlcnMuY3JlYXRlQ2lwaGVyOwpleHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gZXhwb3J0cy5DaXBoZXJpdiA9IGNpcGhlcnMuY3JlYXRlQ2lwaGVyaXY7CmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBv
cnRzLkRlY2lwaGVyID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyOwpleHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdjsKZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnM7Cgp9LHsiLi9kZWNyeXB0ZXIiOjE4OSwiLi9lbmNyeXB0ZXIiOjE5MCwiLi9tb2Rlcy9saXN0Lmpzb24iOjIwMH1dLDE4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBBdXRo
Q2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJyk7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgp2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJyk7Cgp2YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKTsKCnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpOwoKdmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJyk7Cgp2YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5Jyk7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0
cycpOwoKZnVuY3Rpb24gRGVjaXBoZXIobW9kZSwga2V5LCBpdikgewogIFRyYW5zZm9ybS5jYWxsKHRoaXMpOwogIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKCk7CiAgdGhpcy5fbGFzdCA9IHZvaWQgMDsKICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpOwogIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdik7CiAgdGhpcy5fbW9kZSA9IG1vZGU7CiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlOwp9Cgppbmhlcml0cyhEZWNpcGhlciwgVHJhbnNmb3JtKTsKCkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0g
ZnVuY3Rpb24gKGRhdGEpIHsKICB0aGlzLl9jYWNoZS5hZGQoZGF0YSk7CgogIHZhciBjaHVuazsKICB2YXIgdGhpbmc7CiAgdmFyIG91dCA9IFtdOwoKICB3aGlsZSAoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSB7CiAgICB0aGluZyA9IHRoaXMuX21vZGUuZGVjcnlwdCh0aGlzLCBjaHVuayk7CiAgICBvdXQucHVzaCh0aGluZyk7CiAgfQoKICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpOwp9OwoKRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgY2h1bmsg
PSB0aGlzLl9jYWNoZS5mbHVzaCgpOwoKICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHsKICAgIHJldHVybiB1bnBhZCh0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspKTsKICB9IGVsc2UgaWYgKGNodW5rKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpOwogIH0KfTsKCkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykgewogIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUbzsKICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0
aW9uIFNwbGl0dGVyKCkgewogIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7Cn0KClNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkgewogIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSk7Cn07CgpTcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7CiAgdmFyIG91dDsKCiAgaWYgKGF1dG9QYWRkaW5nKSB7CiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNikgewogICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNl
KDAsIDE2KTsKICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpOwogICAgICByZXR1cm4gb3V0OwogICAgfQogIH0gZWxzZSB7CiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHsKICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNik7CiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KTsKICAgICAgcmV0dXJuIG91dDsKICAgIH0KICB9CgogIHJldHVybiBudWxsOwp9OwoKU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkgewogIGlmICh0aGlzLmNh
Y2hlLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2FjaGU7Cn07CgpmdW5jdGlvbiB1bnBhZChsYXN0KSB7CiAgdmFyIHBhZGRlZCA9IGxhc3RbMTVdOwoKICBpZiAocGFkZGVkIDwgMSB8fCBwYWRkZWQgPiAxNikgewogICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJyk7CiAgfQoKICB2YXIgaSA9IC0xOwoKICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7CiAgICBpZiAobGFzdFtpICsgKDE2IC0gcGFkZGVkKV0gIT09IHBhZGRlZCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRh
dGEnKTsKICAgIH0KICB9CgogIGlmIChwYWRkZWQgPT09IDE2KSByZXR1cm47CiAgcmV0dXJuIGxhc3Quc2xpY2UoMCwgMTYgLSBwYWRkZWQpOwp9CgpmdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBwYXNzd29yZCwgaXYpIHsKICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV07CiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpOwogIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KTsKICBpZiAoY29uZmln
Lm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKTsKICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCk7CiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKTsKCiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3Ry
ZWFtJykgewogICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2LCB0cnVlKTsKICB9IGVsc2UgaWYgKGNvbmZpZy50eXBlID09PSAnYXV0aCcpIHsKICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpOwogIH0KCiAgcmV0dXJuIG5ldyBEZWNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpOwp9CgpmdW5jdGlvbiBjcmVhdGVEZWNpcGhlcihzdWl0ZSwgcGFzc3dvcmQpIHsKICB2YXIgY29uZmlnID0gTU9ERVNbc3Vp
dGUudG9Mb3dlckNhc2UoKV07CiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpOwogIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGNvbmZpZy5rZXksIGNvbmZpZy5pdik7CiAgcmV0dXJuIGNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KTsKfQoKZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyOwpleHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2OwoKfSx7Ii4vYWVzIjoxODYsIi4vYXV0
aENpcGhlciI6MTg3LCIuL21vZGVzIjoxOTksIi4vc3RyZWFtQ2lwaGVyIjoyMDIsImNpcGhlci1iYXNlIjoyMTgsImV2cF9ieXRlc3Rva2V5IjoyNTksImluaGVyaXRzIjoyNzgsInNhZmUtYnVmZmVyIjozODR9XSwxOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJyk7Cgp2YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKdmFy
IFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJyk7Cgp2YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKTsKCnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpOwoKdmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpOwoKdmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKCmZ1bmN0aW9uIENpcGhlcihtb2RlLCBrZXksIGl2KSB7CiAgVHJhbnNmb3JtLmNhbGwodGhpcyk7CiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKTsKICB0aGlzLl9jaXBoZXIgPSBuZXcg
YWVzLkFFUyhrZXkpOwogIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdik7CiAgdGhpcy5fbW9kZSA9IG1vZGU7CiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlOwp9Cgppbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSk7CgpDaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkgewogIHRoaXMuX2NhY2hlLmFkZChkYXRhKTsKCiAgdmFyIGNodW5rOwogIHZhciB0aGluZzsKICB2YXIgb3V0ID0gW107CgogIHdoaWxlIChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCgpKSB7CiAgICB0aGluZyA9IHRoaXMuX21v
ZGUuZW5jcnlwdCh0aGlzLCBjaHVuayk7CiAgICBvdXQucHVzaCh0aGluZyk7CiAgfQoKICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpOwp9OwoKdmFyIFBBRERJTkcgPSBCdWZmZXIuYWxsb2MoMTYsIDB4MTApOwoKQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKTsKCiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7CiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuayk7CgogICAgdGhpcy5fY2lwaGVyLnNjcnViKCk7Cgog
ICAgcmV0dXJuIGNodW5rOwogIH0KCiAgaWYgKCFjaHVuay5lcXVhbHMoUEFERElORykpIHsKICAgIHRoaXMuX2NpcGhlci5zY3J1YigpOwoKICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJyk7CiAgfQp9OwoKQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykgewogIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUbzsKICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0aW9uIFNwbGl0dGVyKCkgewogIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NV
bnNhZmUoMCk7Cn0KClNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkgewogIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSk7Cn07CgpTcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkgewogIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7CiAgICB2YXIgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNik7CiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNik7CiAgICByZXR1cm4gb3V0OwogIH0KCiAgcmV0dXJuIG51bGw7Cn07CgpT
cGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGxlbiA9IDE2IC0gdGhpcy5jYWNoZS5sZW5ndGg7CiAgdmFyIHBhZEJ1ZmYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKTsKICB2YXIgaSA9IC0xOwoKICB3aGlsZSAoKytpIDwgbGVuKSB7CiAgICBwYWRCdWZmLndyaXRlVUludDgobGVuLCBpKTsKICB9CgogIHJldHVybiBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBwYWRCdWZmXSk7Cn07CgpmdW5jdGlvbiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7CiAgdmFyIGNvbmZp
ZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldOwogIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKTsKICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCk7CiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKTsKICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBC
dWZmZXIuZnJvbShpdik7CiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aCk7CgogIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHsKICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdik7CiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7CiAgICByZXR1cm4gbmV3IEF1dGhDaXBoZXIoY29uZmlnLm1vZHVsZSwg
cGFzc3dvcmQsIGl2KTsKICB9CgogIHJldHVybiBuZXcgQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdik7Cn0KCmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcihzdWl0ZSwgcGFzc3dvcmQpIHsKICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV07CiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpOwogIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGNvbmZpZy5rZXksIGNvbmZpZy5pdik7CiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1
aXRlLCBrZXlzLmtleSwga2V5cy5pdik7Cn0KCmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdjsKZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXI7Cgp9LHsiLi9hZXMiOjE4NiwiLi9hdXRoQ2lwaGVyIjoxODcsIi4vbW9kZXMiOjE5OSwiLi9zdHJlYW1DaXBoZXIiOjIwMiwiY2lwaGVyLWJhc2UiOjIxOCwiZXZwX2J5dGVzdG9rZXkiOjI1OSwiaW5oZXJpdHMiOjI3OCwic2FmZS1idWZmZXIiOjM4NH1dLDE5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0
IjsKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBaRVJPRVMgPSBCdWZmZXIuYWxsb2MoMTYsIDApOwoKZnVuY3Rpb24gdG9BcnJheShidWYpIHsKICByZXR1cm4gW2J1Zi5yZWFkVUludDMyQkUoMCksIGJ1Zi5yZWFkVUludDMyQkUoNCksIGJ1Zi5yZWFkVUludDMyQkUoOCksIGJ1Zi5yZWFkVUludDMyQkUoMTIpXTsKfQoKZnVuY3Rpb24gZnJvbUFycmF5KG91dCkgewogIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpOwogIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSA+Pj4g
MCwgMCk7CiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdID4+PiAwLCA0KTsKICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0gPj4+IDAsIDgpOwogIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSA+Pj4gMCwgMTIpOwogIHJldHVybiBidWY7Cn0KCmZ1bmN0aW9uIEdIQVNIKGtleSkgewogIHRoaXMuaCA9IGtleTsKICB0aGlzLnN0YXRlID0gQnVmZmVyLmFsbG9jKDE2LCAwKTsKICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApOwp9IC8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wv
ZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWwKLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YQoKCkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykgewogIHZhciBpID0gLTE7CgogIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHsKICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV07CiAgfQoKICB0aGlzLl9tdWx0aXBseSgpOwp9OwoKR0hBU0gucHJvdG90eXBlLl9tdWx0aXBseSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaCk7CiAgdmFyIFppID0gWzAsIDAsIDAs
IDBdOwogIHZhciBqLCB4aSwgbHNiVmk7CiAgdmFyIGkgPSAtMTsKCiAgd2hpbGUgKCsraSA8IDEyOCkgewogICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgMSA8PCA3IC0gaSAlIDgpICE9PSAwOwoKICAgIGlmICh4aSkgewogICAgICAvLyBaX2krMSA9IFpfaSBeIFZfaQogICAgICBaaVswXSBePSBWaVswXTsKICAgICAgWmlbMV0gXj0gVmlbMV07CiAgICAgIFppWzJdIF49IFZpWzJdOwogICAgICBaaVszXSBePSBWaVszXTsKICAgIH0gLy8gU3RvcmUgdGhlIHZhbHVlIG9mIExTQihWX2kpCgoKICAgIGxzYlZpID0g
KFZpWzNdICYgMSkgIT09IDA7IC8vIFZfaSsxID0gVl9pID4+IDEKCiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7CiAgICAgIFZpW2pdID0gVmlbal0gPj4+IDEgfCAoVmlbaiAtIDFdICYgMSkgPDwgMzE7CiAgICB9CgogICAgVmlbMF0gPSBWaVswXSA+Pj4gMTsgLy8gSWYgTFNCKFZfaSkgaXMgMSwgVl9pKzEgPSAoVl9pID4+IDEpIF4gUgoKICAgIGlmIChsc2JWaSkgewogICAgICBWaVswXSA9IFZpWzBdIF4gMHhlMSA8PCAyNDsKICAgIH0KICB9CgogIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpOwp9OwoKR0hBU0gu
cHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChidWYpIHsKICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSk7CiAgdmFyIGNodW5rOwoKICB3aGlsZSAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHsKICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNik7CiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNik7CiAgICB0aGlzLmdoYXNoKGNodW5rKTsKICB9Cn07CgpHSEFTSC5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiAoYWJsLCBibCkgewogIGlmICh0aGlzLmNh
Y2hlLmxlbmd0aCkgewogICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBaRVJPRVNdLCAxNikpOwogIH0KCiAgdGhpcy5naGFzaChmcm9tQXJyYXkoWzAsIGFibCwgMCwgYmxdKSk7CiAgcmV0dXJuIHRoaXMuc3RhdGU7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IEdIQVNIOwoKfSx7InNhZmUtYnVmZmVyIjozODR9XSwxOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBpbmNyMzIoaXYpIHsKICB2YXIgbGVuID0gaXYubGVuZ3RoOwogIHZhciBpdGVt
OwoKICB3aGlsZSAobGVuLS0pIHsKICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKTsKCiAgICBpZiAoaXRlbSA9PT0gMjU1KSB7CiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKTsKICAgIH0gZWxzZSB7CiAgICAgIGl0ZW0rKzsKICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pOwogICAgICBicmVhazsKICAgIH0KICB9Cn0KCm1vZHVsZS5leHBvcnRzID0gaW5jcjMyOwoKfSx7fV0sMTkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKdmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZl
ci14b3InKTsKCmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykgewogIHZhciBkYXRhID0geG9yKGJsb2NrLCBzZWxmLl9wcmV2KTsKICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhkYXRhKTsKICByZXR1cm4gc2VsZi5fcHJldjsKfTsKCmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykgewogIHZhciBwYWQgPSBzZWxmLl9wcmV2OwogIHNlbGYuX3ByZXYgPSBibG9jazsKCiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spOwoK
ICByZXR1cm4geG9yKG91dCwgcGFkKTsKfTsKCn0seyJidWZmZXIteG9yIjoyMTd9XSwxOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgp2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpOwoKZnVuY3Rpb24gZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEsIGRlY3J5cHQpIHsKICB2YXIgbGVuID0gZGF0YS5sZW5ndGg7CiAgdmFyIG91dCA9IHhvcihkYXRhLCBzZWxmLl9jYWNoZSk7CiAgc2VsZi5fY2Fj
aGUgPSBzZWxmLl9jYWNoZS5zbGljZShsZW4pOwogIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LCBkZWNyeXB0ID8gZGF0YSA6IG91dF0pOwogIHJldHVybiBvdXQ7Cn0KCmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7CiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTsKICB2YXIgbGVuOwoKICB3aGlsZSAoZGF0YS5sZW5ndGgpIHsKICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHsKICAgICAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jaXBo
ZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpOwogICAgICBzZWxmLl9wcmV2ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApOwogICAgfQoKICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPD0gZGF0YS5sZW5ndGgpIHsKICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoOwogICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSk7CiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbik7CiAgICB9IGVsc2UgewogICAgICBvdXQgPSBCdWZmZXIu
Y29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLCBkZWNyeXB0KV0pOwogICAgICBicmVhazsKICAgIH0KICB9CgogIHJldHVybiBvdXQ7Cn07Cgp9LHsiYnVmZmVyLXhvciI6MjE3LCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMTk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKZnVuY3Rpb24gZW5jcnlwdEJ5dGUoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7CiAgdmFyIHBhZDsKICB2YXIgaSA9
IC0xOwogIHZhciBsZW4gPSA4OwogIHZhciBvdXQgPSAwOwogIHZhciBiaXQsIHZhbHVlOwoKICB3aGlsZSAoKytpIDwgbGVuKSB7CiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpOwogICAgYml0ID0gYnl0ZVBhcmFtICYgMSA8PCA3IC0gaSA/IDB4ODAgOiAwOwogICAgdmFsdWUgPSBwYWRbMF0gXiBiaXQ7CiAgICBvdXQgKz0gKHZhbHVlICYgMHg4MCkgPj4gaSAlIDg7CiAgICBzZWxmLl9wcmV2ID0gc2hpZnRJbihzZWxmLl9wcmV2LCBkZWNyeXB0ID8gYml0IDogdmFsdWUpOwogIH0KCiAg
cmV0dXJuIG91dDsKfQoKZnVuY3Rpb24gc2hpZnRJbihidWZmZXIsIHZhbHVlKSB7CiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGg7CiAgdmFyIGkgPSAtMTsKICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJ1ZmZlci5sZW5ndGgpOwogIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgQnVmZmVyLmZyb20oW3ZhbHVlXSldKTsKCiAgd2hpbGUgKCsraSA8IGxlbikgewogICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+IDc7CiAgfQoKICByZXR1cm4gb3V0Owp9CgpleHBvcnRzLmVu
Y3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHsKICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoOwogIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKTsKICB2YXIgaSA9IC0xOwoKICB3aGlsZSAoKytpIDwgbGVuKSB7CiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdCk7CiAgfQoKICByZXR1cm4gb3V0Owp9OwoKfSx7InNhZmUtYnVmZmVyIjozODR9XSwxOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgQnVm
ZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7CgpmdW5jdGlvbiBlbmNyeXB0Qnl0ZShzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHsKICB2YXIgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KTsKCiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbTsKICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldi5zbGljZSgxKSwgQnVmZmVyLmZyb20oW2RlY3J5cHQgPyBieXRlUGFyYW0gOiBvdXRdKV0pOwogIHJldHVybiBvdXQ7Cn0KCmV4cG9ydHMuZW5jcnlwdCA9
IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkgewogIHZhciBsZW4gPSBjaHVuay5sZW5ndGg7CiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pOwogIHZhciBpID0gLTE7CgogIHdoaWxlICgrK2kgPCBsZW4pIHsKICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KTsKICB9CgogIHJldHVybiBvdXQ7Cn07Cgp9LHsic2FmZS1idWZmZXIiOjM4NH1dLDE5NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciB4b3IgPSByZXF1
aXJlKCdidWZmZXIteG9yJyk7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgp2YXIgaW5jcjMyID0gcmVxdWlyZSgnLi4vaW5jcjMyJyk7CgpmdW5jdGlvbiBnZXRCbG9jayhzZWxmKSB7CiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2tSYXcoc2VsZi5fcHJldik7CgogIGluY3IzMihzZWxmLl9wcmV2KTsKICByZXR1cm4gb3V0Owp9Cgp2YXIgYmxvY2tTaXplID0gMTY7CgpleHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHsKICB2YXIgY2h1bmtOdW0g
PSBNYXRoLmNlaWwoY2h1bmsubGVuZ3RoIC8gYmxvY2tTaXplKTsKICB2YXIgc3RhcnQgPSBzZWxmLl9jYWNoZS5sZW5ndGg7CiAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9jYWNoZSwgQnVmZmVyLmFsbG9jVW5zYWZlKGNodW5rTnVtICogYmxvY2tTaXplKV0pOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGNodW5rTnVtOyBpKyspIHsKICAgIHZhciBvdXQgPSBnZXRCbG9jayhzZWxmKTsKICAgIHZhciBvZmZzZXQgPSBzdGFydCArIGkgKiBibG9ja1NpemU7CgogICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJC
RShvdXRbMF0sIG9mZnNldCArIDApOwoKICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzFdLCBvZmZzZXQgKyA0KTsKCiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsyXSwgb2Zmc2V0ICsgOCk7CgogICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbM10sIG9mZnNldCArIDEyKTsKICB9CgogIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpOwoKICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aCk7CiAgcmV0dXJuIHhvcihjaHVu
aywgcGFkKTsKfTsKCn0seyIuLi9pbmNyMzIiOjE5MiwiYnVmZmVyLXhvciI6MjE3LCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMTk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7CiAgcmV0dXJuIHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soYmxvY2spOwp9OwoKZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7CiAgcmV0dXJuIHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spOwp9
OwoKfSx7fV0sMTk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKdmFyIG1vZGVNb2R1bGVzID0gewogIEVDQjogcmVxdWlyZSgnLi9lY2InKSwKICBDQkM6IHJlcXVpcmUoJy4vY2JjJyksCiAgQ0ZCOiByZXF1aXJlKCcuL2NmYicpLAogIENGQjg6IHJlcXVpcmUoJy4vY2ZiOCcpLAogIENGQjE6IHJlcXVpcmUoJy4vY2ZiMScpLAogIE9GQjogcmVxdWlyZSgnLi9vZmInKSwKICBDVFI6IHJlcXVpcmUoJy4vY3RyJyksCiAgR0NNOiByZXF1aXJlKCcuL2N0cicpCn07Cgp2YXIgbW9kZXMg
PSByZXF1aXJlKCcuL2xpc3QuanNvbicpOwoKZm9yICh2YXIga2V5IGluIG1vZGVzKSB7CiAgbW9kZXNba2V5XS5tb2R1bGUgPSBtb2RlTW9kdWxlc1ttb2Rlc1trZXldLm1vZGVdOwp9Cgptb2R1bGUuZXhwb3J0cyA9IG1vZGVzOwoKfSx7Ii4vY2JjIjoxOTMsIi4vY2ZiIjoxOTQsIi4vY2ZiMSI6MTk1LCIuL2NmYjgiOjE5NiwiLi9jdHIiOjE5NywiLi9lY2IiOjE5OCwiLi9saXN0Lmpzb24iOjIwMCwiLi9vZmIiOjIwMX1dLDIwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzPXsKICAi
YWVzLTEyOC1lY2IiOiB7CiAgICAiY2lwaGVyIjogIkFFUyIsCiAgICAia2V5IjogMTI4LAogICAgIml2IjogMCwKICAgICJtb2RlIjogIkVDQiIsCiAgICAidHlwZSI6ICJibG9jayIKICB9LAogICJhZXMtMTkyLWVjYiI6IHsKICAgICJjaXBoZXIiOiAiQUVTIiwKICAgICJrZXkiOiAxOTIsCiAgICAiaXYiOiAwLAogICAgIm1vZGUiOiAiRUNCIiwKICAgICJ0eXBlIjogImJsb2NrIgogIH0sCiAgImFlcy0yNTYtZWNiIjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDI1NiwKICAgICJpdiI6IDAsCiAgICAibW9k
ZSI6ICJFQ0IiLAogICAgInR5cGUiOiAiYmxvY2siCiAgfSwKICAiYWVzLTEyOC1jYmMiOiB7CiAgICAiY2lwaGVyIjogIkFFUyIsCiAgICAia2V5IjogMTI4LAogICAgIml2IjogMTYsCiAgICAibW9kZSI6ICJDQkMiLAogICAgInR5cGUiOiAiYmxvY2siCiAgfSwKICAiYWVzLTE5Mi1jYmMiOiB7CiAgICAiY2lwaGVyIjogIkFFUyIsCiAgICAia2V5IjogMTkyLAogICAgIml2IjogMTYsCiAgICAibW9kZSI6ICJDQkMiLAogICAgInR5cGUiOiAiYmxvY2siCiAgfSwKICAiYWVzLTI1Ni1jYmMiOiB7CiAgICAiY2lwaGVyIjogIkFF
UyIsCiAgICAia2V5IjogMjU2LAogICAgIml2IjogMTYsCiAgICAibW9kZSI6ICJDQkMiLAogICAgInR5cGUiOiAiYmxvY2siCiAgfSwKICAiYWVzMTI4IjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDEyOCwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiQ0JDIiwKICAgICJ0eXBlIjogImJsb2NrIgogIH0sCiAgImFlczE5MiI6IHsKICAgICJjaXBoZXIiOiAiQUVTIiwKICAgICJrZXkiOiAxOTIsCiAgICAiaXYiOiAxNiwKICAgICJtb2RlIjogIkNCQyIsCiAgICAidHlwZSI6ICJibG9jayIKICB9LAogICJh
ZXMyNTYiOiB7CiAgICAiY2lwaGVyIjogIkFFUyIsCiAgICAia2V5IjogMjU2LAogICAgIml2IjogMTYsCiAgICAibW9kZSI6ICJDQkMiLAogICAgInR5cGUiOiAiYmxvY2siCiAgfSwKICAiYWVzLTEyOC1jZmIiOiB7CiAgICAiY2lwaGVyIjogIkFFUyIsCiAgICAia2V5IjogMTI4LAogICAgIml2IjogMTYsCiAgICAibW9kZSI6ICJDRkIiLAogICAgInR5cGUiOiAic3RyZWFtIgogIH0sCiAgImFlcy0xOTItY2ZiIjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDE5MiwKICAgICJpdiI6IDE2LAogICAgIm1vZGUi
OiAiQ0ZCIiwKICAgICJ0eXBlIjogInN0cmVhbSIKICB9LAogICJhZXMtMjU2LWNmYiI6IHsKICAgICJjaXBoZXIiOiAiQUVTIiwKICAgICJrZXkiOiAyNTYsCiAgICAiaXYiOiAxNiwKICAgICJtb2RlIjogIkNGQiIsCiAgICAidHlwZSI6ICJzdHJlYW0iCiAgfSwKICAiYWVzLTEyOC1jZmI4IjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDEyOCwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiQ0ZCOCIsCiAgICAidHlwZSI6ICJzdHJlYW0iCiAgfSwKICAiYWVzLTE5Mi1jZmI4IjogewogICAgImNpcGhlciI6
ICJBRVMiLAogICAgImtleSI6IDE5MiwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiQ0ZCOCIsCiAgICAidHlwZSI6ICJzdHJlYW0iCiAgfSwKICAiYWVzLTI1Ni1jZmI4IjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDI1NiwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiQ0ZCOCIsCiAgICAidHlwZSI6ICJzdHJlYW0iCiAgfSwKICAiYWVzLTEyOC1jZmIxIjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDEyOCwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiQ0ZCMSIsCiAgICAidHlw
ZSI6ICJzdHJlYW0iCiAgfSwKICAiYWVzLTE5Mi1jZmIxIjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDE5MiwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiQ0ZCMSIsCiAgICAidHlwZSI6ICJzdHJlYW0iCiAgfSwKICAiYWVzLTI1Ni1jZmIxIjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDI1NiwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiQ0ZCMSIsCiAgICAidHlwZSI6ICJzdHJlYW0iCiAgfSwKICAiYWVzLTEyOC1vZmIiOiB7CiAgICAiY2lwaGVyIjogIkFFUyIsCiAgICAia2V5
IjogMTI4LAogICAgIml2IjogMTYsCiAgICAibW9kZSI6ICJPRkIiLAogICAgInR5cGUiOiAic3RyZWFtIgogIH0sCiAgImFlcy0xOTItb2ZiIjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDE5MiwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiT0ZCIiwKICAgICJ0eXBlIjogInN0cmVhbSIKICB9LAogICJhZXMtMjU2LW9mYiI6IHsKICAgICJjaXBoZXIiOiAiQUVTIiwKICAgICJrZXkiOiAyNTYsCiAgICAiaXYiOiAxNiwKICAgICJtb2RlIjogIk9GQiIsCiAgICAidHlwZSI6ICJzdHJlYW0iCiAgfSwKICAi
YWVzLTEyOC1jdHIiOiB7CiAgICAiY2lwaGVyIjogIkFFUyIsCiAgICAia2V5IjogMTI4LAogICAgIml2IjogMTYsCiAgICAibW9kZSI6ICJDVFIiLAogICAgInR5cGUiOiAic3RyZWFtIgogIH0sCiAgImFlcy0xOTItY3RyIjogewogICAgImNpcGhlciI6ICJBRVMiLAogICAgImtleSI6IDE5MiwKICAgICJpdiI6IDE2LAogICAgIm1vZGUiOiAiQ1RSIiwKICAgICJ0eXBlIjogInN0cmVhbSIKICB9LAogICJhZXMtMjU2LWN0ciI6IHsKICAgICJjaXBoZXIiOiAiQUVTIiwKICAgICJrZXkiOiAyNTYsCiAgICAiaXYiOiAxNiwKICAg
ICJtb2RlIjogIkNUUiIsCiAgICAidHlwZSI6ICJzdHJlYW0iCiAgfSwKICAiYWVzLTEyOC1nY20iOiB7CiAgICAiY2lwaGVyIjogIkFFUyIsCiAgICAia2V5IjogMTI4LAogICAgIml2IjogMTIsCiAgICAibW9kZSI6ICJHQ00iLAogICAgInR5cGUiOiAiYXV0aCIKICB9LAogICJhZXMtMTkyLWdjbSI6IHsKICAgICJjaXBoZXIiOiAiQUVTIiwKICAgICJrZXkiOiAxOTIsCiAgICAiaXYiOiAxMiwKICAgICJtb2RlIjogIkdDTSIsCiAgICAidHlwZSI6ICJhdXRoIgogIH0sCiAgImFlcy0yNTYtZ2NtIjogewogICAgImNpcGhlciI6
ICJBRVMiLAogICAgImtleSI6IDI1NiwKICAgICJpdiI6IDEyLAogICAgIm1vZGUiOiAiR0NNIiwKICAgICJ0eXBlIjogImF1dGgiCiAgfQp9Cgp9LHt9XSwyMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKEJ1ZmZlcil7CiJ1c2Ugc3RyaWN0IjsKCnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJyk7CgpmdW5jdGlvbiBnZXRCbG9jayhzZWxmKSB7CiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldik7CiAgcmV0dXJuIHNlbGYuX3ByZXY7Cn0K
CmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykgewogIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHsKICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSk7CiAgfQoKICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKTsKCiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpOwogIHJldHVybiB4b3IoY2h1bmssIHBhZCk7Cn07Cgp9KS5jYWxsKHRoaXMs
cmVxdWlyZSgiYnVmZmVyIikuQnVmZmVyKQoKfSx7ImJ1ZmZlciI6MjE2LCJidWZmZXIteG9yIjoyMTd9XSwyMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKTsKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpOwoKdmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKCmZ1bmN0aW9uIFN0cmVhbUNpcGhlcihtb2RlLCBrZXks
IGl2LCBkZWNyeXB0KSB7CiAgVHJhbnNmb3JtLmNhbGwodGhpcyk7CiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KTsKICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpOwogIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApOwogIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApOwogIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0OwogIHRoaXMuX21vZGUgPSBtb2RlOwp9Cgppbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSk7CgpTdHJlYW1DaXBoZXIucHJvdG90eXBlLl91
cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHsKICByZXR1cm4gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rLCB0aGlzLl9kZWNyeXB0KTsKfTsKClN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkgewogIHRoaXMuX2NpcGhlci5zY3J1YigpOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXI7Cgp9LHsiLi9hZXMiOjE4NiwiY2lwaGVyLWJhc2UiOjIxOCwiaW5oZXJpdHMiOjI3OCwic2FmZS1idWZmZXIiOjM4NH1dLDIwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7
CiJ1c2Ugc3RyaWN0IjsKCnZhciBERVMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcycpOwoKdmFyIGFlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXInKTsKCnZhciBhZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL21vZGVzJyk7Cgp2YXIgZGVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcy9tb2RlcycpOwoKdmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpOwoKZnVuY3Rpb24gY3JlYXRlQ2lwaGVyKHN1aXRlLCBwYXNzd29yZCkgewogIHN1aXRlID0gc3VpdGUudG9Mb3dl
ckNhc2UoKTsKICB2YXIga2V5TGVuLCBpdkxlbjsKCiAgaWYgKGFlc01vZGVzW3N1aXRlXSkgewogICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleTsKICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2OwogIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7CiAgICBrZXlMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0ua2V5ICogODsKICAgIGl2TGVuID0gZGVzTW9kZXNbc3VpdGVdLml2OwogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKTsKICB9CgogIHZhciBrZXlzID0g
ZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGtleUxlbiwgaXZMZW4pOwogIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpOwp9CgpmdW5jdGlvbiBjcmVhdGVEZWNpcGhlcihzdWl0ZSwgcGFzc3dvcmQpIHsKICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKCk7CiAgdmFyIGtleUxlbiwgaXZMZW47CgogIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHsKICAgIGtleUxlbiA9IGFlc01vZGVzW3N1aXRlXS5rZXk7CiAgICBpdkxlbiA9IGFlc01vZGVzW3N1aXRlXS5pdjsKICB9IGVsc2UgaWYgKGRlc01vZGVz
W3N1aXRlXSkgewogICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDg7CiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdjsKICB9IGVsc2UgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJyk7CiAgfQoKICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKTsKICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpOwp9CgpmdW5jdGlvbiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5LCBpdikgewogIHN1aXRl
ID0gc3VpdGUudG9Mb3dlckNhc2UoKTsKICBpZiAoYWVzTW9kZXNbc3VpdGVdKSByZXR1cm4gYWVzLmNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXksIGl2KTsKICBpZiAoZGVzTW9kZXNbc3VpdGVdKSByZXR1cm4gbmV3IERFUyh7CiAgICBrZXk6IGtleSwKICAgIGl2OiBpdiwKICAgIG1vZGU6IHN1aXRlCiAgfSk7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJyk7Cn0KCmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpIHsKICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKCk7
CiAgaWYgKGFlc01vZGVzW3N1aXRlXSkgcmV0dXJuIGFlcy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXksIGl2KTsKICBpZiAoZGVzTW9kZXNbc3VpdGVdKSByZXR1cm4gbmV3IERFUyh7CiAgICBrZXk6IGtleSwKICAgIGl2OiBpdiwKICAgIG1vZGU6IHN1aXRlLAogICAgZGVjcnlwdDogdHJ1ZQogIH0pOwogIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpOwp9CgpmdW5jdGlvbiBnZXRDaXBoZXJzKCkgewogIHJldHVybiBPYmplY3Qua2V5cyhkZXNNb2RlcykuY29uY2F0KGFlcy5nZXRDaXBoZXJz
KCkpOwp9CgpleHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY3JlYXRlQ2lwaGVyOwpleHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gZXhwb3J0cy5DaXBoZXJpdiA9IGNyZWF0ZUNpcGhlcml2OwpleHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyOwpleHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2OwpleHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVy
czsKCn0seyJicm93c2VyaWZ5LWFlcy9icm93c2VyIjoxODgsImJyb3dzZXJpZnktYWVzL21vZGVzIjoxOTksImJyb3dzZXJpZnktZGVzIjoyMDQsImJyb3dzZXJpZnktZGVzL21vZGVzIjoyMDUsImV2cF9ieXRlc3Rva2V5IjoyNTl9XSwyMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgQ2lwaGVyQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJyk7Cgp2YXIgZGVzID0gcmVxdWlyZSgnZGVzLmpzJyk7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFy
IEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKdmFyIG1vZGVzID0gewogICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLAogICdkZXMtZWRlMyc6IGRlcy5FREUsCiAgJ2Rlcy1lZGUtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSwKICAnZGVzLWVkZSc6IGRlcy5FREUsCiAgJ2Rlcy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5ERVMpLAogICdkZXMtZWNiJzogZGVzLkRFUwp9Owptb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddOwptb2Rlcy5k
ZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddOwptb2R1bGUuZXhwb3J0cyA9IERFUzsKaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKTsKCmZ1bmN0aW9uIERFUyhvcHRzKSB7CiAgQ2lwaGVyQmFzZS5jYWxsKHRoaXMpOwogIHZhciBtb2RlTmFtZSA9IG9wdHMubW9kZS50b0xvd2VyQ2FzZSgpOwogIHZhciBtb2RlID0gbW9kZXNbbW9kZU5hbWVdOwogIHZhciB0eXBlOwoKICBpZiAob3B0cy5kZWNyeXB0KSB7CiAgICB0eXBlID0gJ2RlY3J5cHQnOwogIH0gZWxzZSB7CiAgICB0eXBlID0gJ2VuY3J5cHQnOwogIH0KCiAgdmFyIGtl
eSA9IG9wdHMua2V5OwoKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihrZXkpKSB7CiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpOwogIH0KCiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHsKICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwga2V5LnNsaWNlKDAsIDgpXSk7CiAgfQoKICB2YXIgaXYgPSBvcHRzLml2OwoKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihpdikpIHsKICAgIGl2ID0gQnVmZmVyLmZyb20oaXYpOwogIH0KCiAgdGhpcy5fZGVzID0gbW9kZS5jcmVh
dGUoewogICAga2V5OiBrZXksCiAgICBpdjogaXYsCiAgICB0eXBlOiB0eXBlCiAgfSk7Cn0KCkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpOwp9OwoKREVTLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy5maW5hbCgpKTsKfTsKCn0seyJjaXBoZXItYmFzZSI6MjE4LCJkZXMuanMiOjIzMCwiaW5oZXJpdHMiOjI3OCwic2FmZS1idWZmZXIiOjM4NH1dLDIw
NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmV4cG9ydHNbJ2Rlcy1lY2InXSA9IHsKICBrZXk6IDgsCiAgaXY6IDAKfTsKZXhwb3J0c1snZGVzLWNiYyddID0gZXhwb3J0cy5kZXMgPSB7CiAga2V5OiA4LAogIGl2OiA4Cn07CmV4cG9ydHNbJ2Rlcy1lZGUzLWNiYyddID0gZXhwb3J0cy5kZXMzID0gewogIGtleTogMjQsCiAgaXY6IDgKfTsKZXhwb3J0c1snZGVzLWVkZTMnXSA9IHsKICBrZXk6IDI0LAogIGl2OiAwCn07CmV4cG9ydHNbJ2Rlcy1lZGUtY2JjJ10gPSB7CiAga2V5OiAx
NiwKICBpdjogOAp9OwpleHBvcnRzWydkZXMtZWRlJ10gPSB7CiAga2V5OiAxNiwKICBpdjogMAp9OwoKfSx7fV0sMjA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChCdWZmZXIpewoidXNlIHN0cmljdCI7Cgp2YXIgYm4gPSByZXF1aXJlKCdibi5qcycpOwoKdmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTsKCm1vZHVsZS5leHBvcnRzID0gY3J0OwoKZnVuY3Rpb24gYmxpbmQocHJpdikgewogIHZhciByID0gZ2V0cihwcml2KTsKICB2YXIgYmxpbmRlciA9IHIudG9S
ZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKS5yZWRQb3cobmV3IGJuKHByaXYucHVibGljRXhwb25lbnQpKS5mcm9tUmVkKCk7CiAgcmV0dXJuIHsKICAgIGJsaW5kZXI6IGJsaW5kZXIsCiAgICB1bmJsaW5kZXI6IHIuaW52bShwcml2Lm1vZHVsdXMpCiAgfTsKfQoKZnVuY3Rpb24gY3J0KG1zZywgcHJpdikgewogIHZhciBibGluZHMgPSBibGluZChwcml2KTsKICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTsKICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpOwogIHZhciBibGluZGVkID0gbmV3IGJu
KG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cyk7CiAgdmFyIGMxID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUxKSk7CiAgdmFyIGMyID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUyKSk7CiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50OwogIHZhciBwID0gcHJpdi5wcmltZTE7CiAgdmFyIHEgPSBwcml2LnByaW1lMjsKICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpOwogIHZhciBtMiA9IGMyLnJlZFBvdyhwcml2LmV4cG9uZW50Mik7CiAgbTEg
PSBtMS5mcm9tUmVkKCk7CiAgbTIgPSBtMi5mcm9tUmVkKCk7CiAgdmFyIGggPSBtMS5pc3ViKG0yKS5pbXVsKHFpbnYpLnVtb2QocCk7CiAgaC5pbXVsKHEpOwogIG0yLmlhZGQoaCk7CiAgcmV0dXJuIG5ldyBCdWZmZXIobTIuaW11bChibGluZHMudW5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cykudG9BcnJheShmYWxzZSwgbGVuKSk7Cn0KCmNydC5nZXRyID0gZ2V0cjsKCmZ1bmN0aW9uIGdldHIocHJpdikgewogIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpOwogIHZhciByID0gbmV3IGJuKHJhbmRvbUJ5
dGVzKGxlbikpOwoKICB3aGlsZSAoci5jbXAocHJpdi5tb2R1bHVzKSA+PSAwIHx8ICFyLnVtb2QocHJpdi5wcmltZTEpIHx8ICFyLnVtb2QocHJpdi5wcmltZTIpKSB7CiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpOwogIH0KCiAgcmV0dXJuIHI7Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiYm4uanMiOjIwNywiYnVmZmVyIjoyMTYsInJhbmRvbWJ5dGVzIjozNjZ9XSwyMDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTgxXVswXS5h
cHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImJ1ZmZlciI6MTg1LCJkdXAiOjE4MX1dLDIwODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyL2FsZ29yaXRobXMuanNvbicpOwoKfSx7Ii4vYnJvd3Nlci9hbGdvcml0aG1zLmpzb24iOjIwOX1dLDIwOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzPXsKICAic2hhMjI0V2l0aFJTQUVuY3J5cHRpb24iOiB7CiAgICAic2lnbiI6ICJy
c2EiLAogICAgImhhc2giOiAic2hhMjI0IiwKICAgICJpZCI6ICIzMDJkMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDQwNTAwMDQxYyIKICB9LAogICJSU0EtU0hBMjI0IjogewogICAgInNpZ24iOiAiZWNkc2EvcnNhIiwKICAgICJoYXNoIjogInNoYTIyNCIsCiAgICAiaWQiOiAiMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWMiCiAgfSwKICAic2hhMjU2V2l0aFJTQUVuY3J5cHRpb24iOiB7CiAgICAic2lnbiI6ICJyc2EiLAogICAgImhhc2giOiAic2hhMjU2IiwKICAgICJpZCI6ICIzMDMxMzAwZDA2MDk2
MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMCIKICB9LAogICJSU0EtU0hBMjU2IjogewogICAgInNpZ24iOiAiZWNkc2EvcnNhIiwKICAgICJoYXNoIjogInNoYTI1NiIsCiAgICAiaWQiOiAiMzAzMTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAxMDUwMDA0MjAiCiAgfSwKICAic2hhMzg0V2l0aFJTQUVuY3J5cHRpb24iOiB7CiAgICAic2lnbiI6ICJyc2EiLAogICAgImhhc2giOiAic2hhMzg0IiwKICAgICJpZCI6ICIzMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMCIKICB9LAogICJSU0EtU0hBMzg0Ijogewog
ICAgInNpZ24iOiAiZWNkc2EvcnNhIiwKICAgICJoYXNoIjogInNoYTM4NCIsCiAgICAiaWQiOiAiMzA0MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAyMDUwMDA0MzAiCiAgfSwKICAic2hhNTEyV2l0aFJTQUVuY3J5cHRpb24iOiB7CiAgICAic2lnbiI6ICJyc2EiLAogICAgImhhc2giOiAic2hhNTEyIiwKICAgICJpZCI6ICIzMDUxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDMwNTAwMDQ0MCIKICB9LAogICJSU0EtU0hBNTEyIjogewogICAgInNpZ24iOiAiZWNkc2EvcnNhIiwKICAgICJoYXNoIjogInNoYTUxMiIsCiAgICAi
aWQiOiAiMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDAiCiAgfSwKICAiUlNBLVNIQTEiOiB7CiAgICAic2lnbiI6ICJyc2EiLAogICAgImhhc2giOiAic2hhMSIsCiAgICAiaWQiOiAiMzAyMTMwMDkwNjA1MmIwZTAzMDIxYTA1MDAwNDE0IgogIH0sCiAgImVjZHNhLXdpdGgtU0hBMSI6IHsKICAgICJzaWduIjogImVjZHNhIiwKICAgICJoYXNoIjogInNoYTEiLAogICAgImlkIjogIiIKICB9LAogICJzaGEyNTYiOiB7CiAgICAic2lnbiI6ICJlY2RzYSIsCiAgICAiaGFzaCI6ICJzaGEyNTYiLAogICAgImlk
IjogIiIKICB9LAogICJzaGEyMjQiOiB7CiAgICAic2lnbiI6ICJlY2RzYSIsCiAgICAiaGFzaCI6ICJzaGEyMjQiLAogICAgImlkIjogIiIKICB9LAogICJzaGEzODQiOiB7CiAgICAic2lnbiI6ICJlY2RzYSIsCiAgICAiaGFzaCI6ICJzaGEzODQiLAogICAgImlkIjogIiIKICB9LAogICJzaGE1MTIiOiB7CiAgICAic2lnbiI6ICJlY2RzYSIsCiAgICAiaGFzaCI6ICJzaGE1MTIiLAogICAgImlkIjogIiIKICB9LAogICJEU0EtU0hBIjogewogICAgInNpZ24iOiAiZHNhIiwKICAgICJoYXNoIjogInNoYTEiLAogICAgImlkIjog
IiIKICB9LAogICJEU0EtU0hBMSI6IHsKICAgICJzaWduIjogImRzYSIsCiAgICAiaGFzaCI6ICJzaGExIiwKICAgICJpZCI6ICIiCiAgfSwKICAiRFNBIjogewogICAgInNpZ24iOiAiZHNhIiwKICAgICJoYXNoIjogInNoYTEiLAogICAgImlkIjogIiIKICB9LAogICJEU0EtV0lUSC1TSEEyMjQiOiB7CiAgICAic2lnbiI6ICJkc2EiLAogICAgImhhc2giOiAic2hhMjI0IiwKICAgICJpZCI6ICIiCiAgfSwKICAiRFNBLVNIQTIyNCI6IHsKICAgICJzaWduIjogImRzYSIsCiAgICAiaGFzaCI6ICJzaGEyMjQiLAogICAgImlkIjog
IiIKICB9LAogICJEU0EtV0lUSC1TSEEyNTYiOiB7CiAgICAic2lnbiI6ICJkc2EiLAogICAgImhhc2giOiAic2hhMjU2IiwKICAgICJpZCI6ICIiCiAgfSwKICAiRFNBLVNIQTI1NiI6IHsKICAgICJzaWduIjogImRzYSIsCiAgICAiaGFzaCI6ICJzaGEyNTYiLAogICAgImlkIjogIiIKICB9LAogICJEU0EtV0lUSC1TSEEzODQiOiB7CiAgICAic2lnbiI6ICJkc2EiLAogICAgImhhc2giOiAic2hhMzg0IiwKICAgICJpZCI6ICIiCiAgfSwKICAiRFNBLVNIQTM4NCI6IHsKICAgICJzaWduIjogImRzYSIsCiAgICAiaGFzaCI6ICJz
aGEzODQiLAogICAgImlkIjogIiIKICB9LAogICJEU0EtV0lUSC1TSEE1MTIiOiB7CiAgICAic2lnbiI6ICJkc2EiLAogICAgImhhc2giOiAic2hhNTEyIiwKICAgICJpZCI6ICIiCiAgfSwKICAiRFNBLVNIQTUxMiI6IHsKICAgICJzaWduIjogImRzYSIsCiAgICAiaGFzaCI6ICJzaGE1MTIiLAogICAgImlkIjogIiIKICB9LAogICJEU0EtUklQRU1EMTYwIjogewogICAgInNpZ24iOiAiZHNhIiwKICAgICJoYXNoIjogInJtZDE2MCIsCiAgICAiaWQiOiAiIgogIH0sCiAgInJpcGVtZDE2MFdpdGhSU0EiOiB7CiAgICAic2lnbiI6
ICJyc2EiLAogICAgImhhc2giOiAicm1kMTYwIiwKICAgICJpZCI6ICIzMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTQiCiAgfSwKICAiUlNBLVJJUEVNRDE2MCI6IHsKICAgICJzaWduIjogInJzYSIsCiAgICAiaGFzaCI6ICJybWQxNjAiLAogICAgImlkIjogIjMwMjEzMDA5MDYwNTJiMjQwMzAyMDEwNTAwMDQxNCIKICB9LAogICJtZDVXaXRoUlNBRW5jcnlwdGlvbiI6IHsKICAgICJzaWduIjogInJzYSIsCiAgICAiaGFzaCI6ICJtZDUiLAogICAgImlkIjogIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQx
MCIKICB9LAogICJSU0EtTUQ1IjogewogICAgInNpZ24iOiAicnNhIiwKICAgICJoYXNoIjogIm1kNSIsCiAgICAiaWQiOiAiMzAyMDMwMGMwNjA4MmE4NjQ4ODZmNzBkMDIwNTA1MDAwNDEwIgogIH0KfQoKfSx7fV0sMjEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHM9ewogICIxLjMuMTMyLjAuMTAiOiAic2VjcDI1NmsxIiwKICAiMS4zLjEzMi4wLjMzIjogInAyMjQiLAogICIxLjIuODQwLjEwMDQ1LjMuMS4xIjogInAxOTIiLAogICIxLjIuODQwLjEwMDQ1LjMuMS43IjogInAyNTYi
LAogICIxLjMuMTMyLjAuMzQiOiAicDM4NCIsCiAgIjEuMy4xMzIuMC4zNSI6ICJwNTIxIgp9Cgp9LHt9XSwyMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgp2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7Cgp2YXIgc3RyZWFtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJyk7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFyIHNpZ24gPSByZXF1aXJl
KCcuL3NpZ24nKTsKCnZhciB2ZXJpZnkgPSByZXF1aXJlKCcuL3ZlcmlmeScpOwoKdmFyIGFsZ29yaXRobXMgPSByZXF1aXJlKCcuL2FsZ29yaXRobXMuanNvbicpOwoKT2JqZWN0LmtleXMoYWxnb3JpdGhtcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgYWxnb3JpdGhtc1trZXldLmlkID0gQnVmZmVyLmZyb20oYWxnb3JpdGhtc1trZXldLmlkLCAnaGV4Jyk7CiAgYWxnb3JpdGhtc1trZXkudG9Mb3dlckNhc2UoKV0gPSBhbGdvcml0aG1zW2tleV07Cn0pOwoKZnVuY3Rpb24gU2lnbihhbGdvcml0aG0pIHsKICBzdHJlYW0u
V3JpdGFibGUuY2FsbCh0aGlzKTsKICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXTsKICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpOwogIHRoaXMuX2hhc2hUeXBlID0gZGF0YS5oYXNoOwogIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaCk7CiAgdGhpcy5fdGFnID0gZGF0YS5pZDsKICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnbjsKfQoKaW5oZXJpdHMoU2lnbiwgc3RyZWFtLldyaXRhYmxlKTsKClNpZ24ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0
aW9uIF93cml0ZShkYXRhLCBfLCBkb25lKSB7CiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSk7CgogIGRvbmUoKTsKfTsKClNpZ24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShkYXRhLCBlbmMpIHsKICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKTsKCiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSk7CgogIHJldHVybiB0aGlzOwp9OwoKU2lnbi5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ25NZXRob2Qoa2V5LCBlbmMpIHsKICB0aGlzLmVuZCgp
OwoKICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KCk7CgogIHZhciBzaWcgPSBzaWduKGhhc2gsIGtleSwgdGhpcy5faGFzaFR5cGUsIHRoaXMuX3NpZ25UeXBlLCB0aGlzLl90YWcpOwogIHJldHVybiBlbmMgPyBzaWcudG9TdHJpbmcoZW5jKSA6IHNpZzsKfTsKCmZ1bmN0aW9uIFZlcmlmeShhbGdvcml0aG0pIHsKICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKTsKICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXTsKICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2Vz
dCcpOwogIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaCk7CiAgdGhpcy5fdGFnID0gZGF0YS5pZDsKICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnbjsKfQoKaW5oZXJpdHMoVmVyaWZ5LCBzdHJlYW0uV3JpdGFibGUpOwoKVmVyaWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUoZGF0YSwgXywgZG9uZSkgewogIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpOwoKICBkb25lKCk7Cn07CgpWZXJpZnkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShkYXRhLCBlbmMpIHsKICBpZiAodHlw
ZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKTsKCiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSk7CgogIHJldHVybiB0aGlzOwp9OwoKVmVyaWZ5LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnlNZXRob2Qoa2V5LCBzaWcsIGVuYykgewogIGlmICh0eXBlb2Ygc2lnID09PSAnc3RyaW5nJykgc2lnID0gQnVmZmVyLmZyb20oc2lnLCBlbmMpOwogIHRoaXMuZW5kKCk7CgogIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKTsKCiAgcmV0dXJuIHZlcmlmeShzaWcsIGhh
c2gsIGtleSwgdGhpcy5fc2lnblR5cGUsIHRoaXMuX3RhZyk7Cn07CgpmdW5jdGlvbiBjcmVhdGVTaWduKGFsZ29yaXRobSkgewogIHJldHVybiBuZXcgU2lnbihhbGdvcml0aG0pOwp9CgpmdW5jdGlvbiBjcmVhdGVWZXJpZnkoYWxnb3JpdGhtKSB7CiAgcmV0dXJuIG5ldyBWZXJpZnkoYWxnb3JpdGhtKTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgU2lnbjogY3JlYXRlU2lnbiwKICBWZXJpZnk6IGNyZWF0ZVZlcmlmeSwKICBjcmVhdGVTaWduOiBjcmVhdGVTaWduLAogIGNyZWF0ZVZlcmlmeTogY3JlYXRlVmVyaWZ5Cn07Cgp9
LHsiLi9hbGdvcml0aG1zLmpzb24iOjIwOSwiLi9zaWduIjoyMTIsIi4vdmVyaWZ5IjoyMTMsImNyZWF0ZS1oYXNoIjoyMjIsImluaGVyaXRzIjoyNzgsInJlYWRhYmxlLXN0cmVhbSI6MzgyLCJzYWZlLWJ1ZmZlciI6MjE0fV0sMjEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qcwp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1i
dWZmZXInKS5CdWZmZXI7Cgp2YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJyk7Cgp2YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKTsKCnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWM7Cgp2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpOwoKdmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTsKCnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcy5qc29uJyk7CgpmdW5jdGlvbiBzaWduKGhhc2gsIGtleSwgaGFzaFR5cGUsIHNpZ25UeXBlLCB0YWcpIHsKICB2YXIgcHJp
diA9IHBhcnNlS2V5cyhrZXkpOwoKICBpZiAocHJpdi5jdXJ2ZSkgewogICAgLy8gcnNhIGtleXMgY2FuIGJlIGludGVycHJldGVkIGFzIGVjZHNhIG9uZXMgaW4gb3BlbnNzbAogICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJyk7CiAgICByZXR1cm4gZWNTaWduKGhhc2gsIHByaXYpOwogIH0gZWxzZSBpZiAocHJpdi50eXBlID09PSAnZHNhJykgewogICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhy
b3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJyk7CiAgICByZXR1cm4gZHNhU2lnbihoYXNoLCBwcml2LCBoYXNoVHlwZSk7CiAgfSBlbHNlIHsKICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKTsKICB9CgogIGhhc2ggPSBCdWZmZXIuY29uY2F0KFt0YWcsIGhhc2hdKTsKICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTsKICB2YXIgcGFkID0gWzAsIDFdOwoKICB3aGls
ZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMSA8IGxlbikgewogICAgcGFkLnB1c2goMHhmZik7CiAgfQoKICBwYWQucHVzaCgweDAwKTsKICB2YXIgaSA9IC0xOwoKICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHsKICAgIHBhZC5wdXNoKGhhc2hbaV0pOwogIH0KCiAgdmFyIG91dCA9IGNydChwYWQsIHByaXYpOwogIHJldHVybiBvdXQ7Cn0KCmZ1bmN0aW9uIGVjU2lnbihoYXNoLCBwcml2KSB7CiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHJpdi5jdXJ2ZS5qb2luKCcuJyldOwogIGlmICghY3VydmVJZCkgdGhyb3cg
bmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwcml2LmN1cnZlLmpvaW4oJy4nKSk7CiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpOwogIHZhciBrZXkgPSBjdXJ2ZS5rZXlGcm9tUHJpdmF0ZShwcml2LnByaXZhdGVLZXkpOwogIHZhciBvdXQgPSBrZXkuc2lnbihoYXNoKTsKICByZXR1cm4gQnVmZmVyLmZyb20ob3V0LnRvREVSKCkpOwp9CgpmdW5jdGlvbiBkc2FTaWduKGhhc2gsIHByaXYsIGFsZ28pIHsKICB2YXIgeCA9IHByaXYucGFyYW1zLnByaXZfa2V5OwogIHZhciBwID0gcHJpdi5wYXJhbXMucDsKICB2YXIg
cSA9IHByaXYucGFyYW1zLnE7CiAgdmFyIGcgPSBwcml2LnBhcmFtcy5nOwogIHZhciByID0gbmV3IEJOKDApOwogIHZhciBrOwogIHZhciBIID0gYml0czJpbnQoaGFzaCwgcSkubW9kKHEpOwogIHZhciBzID0gZmFsc2U7CiAgdmFyIGt2ID0gZ2V0S2V5KHgsIHEsIGhhc2gsIGFsZ28pOwoKICB3aGlsZSAocyA9PT0gZmFsc2UpIHsKICAgIGsgPSBtYWtlS2V5KHEsIGt2LCBhbGdvKTsKICAgIHIgPSBtYWtlUihnLCBrLCBwLCBxKTsKICAgIHMgPSBrLmludm0ocSkuaW11bChILmFkZCh4Lm11bChyKSkpLm1vZChxKTsKCiAgICBp
ZiAocy5jbXBuKDApID09PSAwKSB7CiAgICAgIHMgPSBmYWxzZTsKICAgICAgciA9IG5ldyBCTigwKTsKICAgIH0KICB9CgogIHJldHVybiB0b0RFUihyLCBzKTsKfQoKZnVuY3Rpb24gdG9ERVIociwgcykgewogIHIgPSByLnRvQXJyYXkoKTsKICBzID0gcy50b0FycmF5KCk7IC8vIFBhZCB2YWx1ZXMKCiAgaWYgKHJbMF0gJiAweDgwKSByID0gWzBdLmNvbmNhdChyKTsKICBpZiAoc1swXSAmIDB4ODApIHMgPSBbMF0uY29uY2F0KHMpOwogIHZhciB0b3RhbCA9IHIubGVuZ3RoICsgcy5sZW5ndGggKyA0OwogIHZhciByZXMgPSBb
MHgzMCwgdG90YWwsIDB4MDIsIHIubGVuZ3RoXTsKICByZXMgPSByZXMuY29uY2F0KHIsIFsweDAyLCBzLmxlbmd0aF0sIHMpOwogIHJldHVybiBCdWZmZXIuZnJvbShyZXMpOwp9CgpmdW5jdGlvbiBnZXRLZXkoeCwgcSwgaGFzaCwgYWxnbykgewogIHggPSBCdWZmZXIuZnJvbSh4LnRvQXJyYXkoKSk7CgogIGlmICh4Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7CiAgICB2YXIgemVyb3MgPSBCdWZmZXIuYWxsb2MocS5ieXRlTGVuZ3RoKCkgLSB4Lmxlbmd0aCk7CiAgICB4ID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIHhdKTsK
ICB9CgogIHZhciBobGVuID0gaGFzaC5sZW5ndGg7CiAgdmFyIGhiaXRzID0gYml0czJvY3RldHMoaGFzaCwgcSk7CiAgdmFyIHYgPSBCdWZmZXIuYWxsb2MoaGxlbik7CiAgdi5maWxsKDEpOwogIHZhciBrID0gQnVmZmVyLmFsbG9jKGhsZW4pOwogIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUoQnVmZmVyLmZyb20oWzBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KCk7CiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpOwogIGsgPSBjcmVhdGVIbWFjKGFs
Z28sIGspLnVwZGF0ZSh2KS51cGRhdGUoQnVmZmVyLmZyb20oWzFdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KCk7CiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpOwogIHJldHVybiB7CiAgICBrOiBrLAogICAgdjogdgogIH07Cn0KCmZ1bmN0aW9uIGJpdHMyaW50KG9iaXRzLCBxKSB7CiAgdmFyIGJpdHMgPSBuZXcgQk4ob2JpdHMpOwogIHZhciBzaGlmdCA9IChvYml0cy5sZW5ndGggPDwgMykgLSBxLmJpdExlbmd0aCgpOwogIGlmIChzaGlmdCA+IDApIGJpdHMuaXNocm4oc2hp
ZnQpOwogIHJldHVybiBiaXRzOwp9CgpmdW5jdGlvbiBiaXRzMm9jdGV0cyhiaXRzLCBxKSB7CiAgYml0cyA9IGJpdHMyaW50KGJpdHMsIHEpOwogIGJpdHMgPSBiaXRzLm1vZChxKTsKICB2YXIgb3V0ID0gQnVmZmVyLmZyb20oYml0cy50b0FycmF5KCkpOwoKICBpZiAob3V0Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7CiAgICB2YXIgemVyb3MgPSBCdWZmZXIuYWxsb2MocS5ieXRlTGVuZ3RoKCkgLSBvdXQubGVuZ3RoKTsKICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW3plcm9zLCBvdXRdKTsKICB9CgogIHJldHVybiBvdXQ7
Cn0KCmZ1bmN0aW9uIG1ha2VLZXkocSwga3YsIGFsZ28pIHsKICB2YXIgdDsKICB2YXIgazsKCiAgZG8gewogICAgdCA9IEJ1ZmZlci5hbGxvYygwKTsKCiAgICB3aGlsZSAodC5sZW5ndGggKiA4IDwgcS5iaXRMZW5ndGgoKSkgewogICAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikuZGlnZXN0KCk7CiAgICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBrdi52XSk7CiAgICB9CgogICAgayA9IGJpdHMyaW50KHQsIHEpOwogICAga3YuayA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2
LnYpLnVwZGF0ZShCdWZmZXIuZnJvbShbMF0pKS5kaWdlc3QoKTsKICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS5kaWdlc3QoKTsKICB9IHdoaWxlIChrLmNtcChxKSAhPT0gLTEpOwoKICByZXR1cm4gazsKfQoKZnVuY3Rpb24gbWFrZVIoZywgaywgcCwgcSkgewogIHJldHVybiBnLnRvUmVkKEJOLm1vbnQocCkpLnJlZFBvdyhrKS5mcm9tUmVkKCkubW9kKHEpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHNpZ247Cm1vZHVsZS5leHBvcnRzLmdldEtleSA9IGdldEtleTsKbW9kdWxlLmV4cG9ydHMu
bWFrZUtleSA9IG1ha2VLZXk7Cgp9LHsiLi9jdXJ2ZXMuanNvbiI6MjEwLCJibi5qcyI6MTgzLCJicm93c2VyaWZ5LXJzYSI6MjA2LCJjcmVhdGUtaG1hYyI6MjI0LCJlbGxpcHRpYyI6MjQxLCJwYXJzZS1hc24xIjozNTAsInNhZmUtYnVmZmVyIjoyMTR9XSwyMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzCnZhciBCdWZmZXIg
PSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjOwoKdmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTsKCnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcy5qc29uJyk7CgpmdW5jdGlvbiB2ZXJpZnkoc2lnLCBoYXNoLCBrZXksIHNpZ25UeXBlLCB0YWcpIHsKICB2YXIgcHViID0gcGFyc2VLZXlzKGtleSk7CgogIGlmIChwdWIudHlwZSA9PT0gJ2VjJykgewogICAgLy8gcnNhIGtleXMgY2Fu
IGJlIGludGVycHJldGVkIGFzIGVjZHNhIG9uZXMgaW4gb3BlbnNzbAogICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKTsKICAgIHJldHVybiBlY1ZlcmlmeShzaWcsIGhhc2gsIHB1Yik7CiAgfSBlbHNlIGlmIChwdWIudHlwZSA9PT0gJ2RzYScpIHsKICAgIGlmIChzaWduVHlwZSAhPT0gJ2RzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJyk7CiAgICByZXR1cm4gZHNhVmVy
aWZ5KHNpZywgaGFzaCwgcHViKTsKICB9IGVsc2UgewogICAgaWYgKHNpZ25UeXBlICE9PSAncnNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJyk7CiAgfQoKICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSk7CiAgdmFyIGxlbiA9IHB1Yi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTsKICB2YXIgcGFkID0gWzFdOwogIHZhciBwYWROdW0gPSAwOwoKICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMiA8IGxlbikgewogICAgcGFk
LnB1c2goMHhmZik7CiAgICBwYWROdW0rKzsKICB9CgogIHBhZC5wdXNoKDB4MDApOwogIHZhciBpID0gLTE7CgogIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkgewogICAgcGFkLnB1c2goaGFzaFtpXSk7CiAgfQoKICBwYWQgPSBCdWZmZXIuZnJvbShwYWQpOwogIHZhciByZWQgPSBCTi5tb250KHB1Yi5tb2R1bHVzKTsKICBzaWcgPSBuZXcgQk4oc2lnKS50b1JlZChyZWQpOwogIHNpZyA9IHNpZy5yZWRQb3cobmV3IEJOKHB1Yi5wdWJsaWNFeHBvbmVudCkpOwogIHNpZyA9IEJ1ZmZlci5mcm9tKHNpZy5mcm9tUmVkKCkudG9B
cnJheSgpKTsKICB2YXIgb3V0ID0gcGFkTnVtIDwgOCA/IDEgOiAwOwogIGxlbiA9IE1hdGgubWluKHNpZy5sZW5ndGgsIHBhZC5sZW5ndGgpOwogIGlmIChzaWcubGVuZ3RoICE9PSBwYWQubGVuZ3RoKSBvdXQgPSAxOwogIGkgPSAtMTsKCiAgd2hpbGUgKCsraSA8IGxlbikgewogICAgb3V0IHw9IHNpZ1tpXSBeIHBhZFtpXTsKICB9CgogIHJldHVybiBvdXQgPT09IDA7Cn0KCmZ1bmN0aW9uIGVjVmVyaWZ5KHNpZywgaGFzaCwgcHViKSB7CiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHViLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpv
aW4oJy4nKV07CiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHB1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJykpOwogIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKTsKICB2YXIgcHVia2V5ID0gcHViLmRhdGEuc3ViamVjdFByaXZhdGVLZXkuZGF0YTsKICByZXR1cm4gY3VydmUudmVyaWZ5KGhhc2gsIHNpZywgcHVia2V5KTsKfQoKZnVuY3Rpb24gZHNhVmVyaWZ5KHNpZywgaGFzaCwgcHViKSB7CiAgdmFyIHAgPSBwdWIuZGF0YS5wOwogIHZhciBxID0gcHViLmRhdGEu
cTsKICB2YXIgZyA9IHB1Yi5kYXRhLmc7CiAgdmFyIHkgPSBwdWIuZGF0YS5wdWJfa2V5OwogIHZhciB1bnBhY2tlZCA9IHBhcnNlS2V5cy5zaWduYXR1cmUuZGVjb2RlKHNpZywgJ2RlcicpOwogIHZhciBzID0gdW5wYWNrZWQuczsKICB2YXIgciA9IHVucGFja2VkLnI7CiAgY2hlY2tWYWx1ZShzLCBxKTsKICBjaGVja1ZhbHVlKHIsIHEpOwogIHZhciBtb250cCA9IEJOLm1vbnQocCk7CiAgdmFyIHcgPSBzLmludm0ocSk7CiAgdmFyIHYgPSBnLnRvUmVkKG1vbnRwKS5yZWRQb3cobmV3IEJOKGhhc2gpLm11bCh3KS5tb2QocSkp
LmZyb21SZWQoKS5tdWwoeS50b1JlZChtb250cCkucmVkUG93KHIubXVsKHcpLm1vZChxKSkuZnJvbVJlZCgpKS5tb2QocCkubW9kKHEpOwogIHJldHVybiB2LmNtcChyKSA9PT0gMDsKfQoKZnVuY3Rpb24gY2hlY2tWYWx1ZShiLCBxKSB7CiAgaWYgKGIuY21wbigwKSA8PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJyk7CiAgaWYgKGIuY21wKHEpID49IHEpIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnk7Cgp9LHsiLi9jdXJ2ZXMuanNvbiI6MjEwLCJibi5q
cyI6MTgzLCJlbGxpcHRpYyI6MjQxLCJwYXJzZS1hc24xIjozNTAsInNhZmUtYnVmZmVyIjoyMTR9XSwyMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovKiEgc2FmZS1idWZmZXIuIE1JVCBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi8KCi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi8KdmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpOwoKdmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZm
ZXI7IC8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnMKCmZ1bmN0aW9uIGNvcHlQcm9wcyhzcmMsIGRzdCkgewogIGZvciAodmFyIGtleSBpbiBzcmMpIHsKICAgIGRzdFtrZXldID0gc3JjW2tleV07CiAgfQp9CgppZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7CiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXI7Cn0gZWxzZSB7CiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgn
YnVmZmVyJykKICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKTsKICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXI7Cn0KCmZ1bmN0aW9uIFNhZmVCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTsKfQoKU2FmZUJ1ZmZlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlci5wcm90b3R5cGUpOyAvLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyCgpjb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKTsK
ClNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkgewogIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKTsKICB9CgogIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpOwp9OwoKU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykgewogIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHsKICAg
IHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKTsKICB9CgogIHZhciBidWYgPSBCdWZmZXIoc2l6ZSk7CgogIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHsKICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7CiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKTsKICAgIH0gZWxzZSB7CiAgICAgIGJ1Zi5maWxsKGZpbGwpOwogICAgfQogIH0gZWxzZSB7CiAgICBidWYuZmlsbCgwKTsKICB9CgogIHJldHVybiBidWY7Cn07CgpTYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0g
ZnVuY3Rpb24gKHNpemUpIHsKICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJyk7CiAgfQoKICByZXR1cm4gQnVmZmVyKHNpemUpOwp9OwoKU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkgewogIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKTsKICB9CgogIHJldHVybiBidWZmZXIuU2xvd0J1
ZmZlcihzaXplKTsKfTsKCn0seyJidWZmZXIiOjIxNn1dLDIxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxODVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjoxODV9XSwyMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKEJ1ZmZlcil7Ci8qIQogKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci4KICoKICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3Nz
Lm9yZz4KICogQGxpY2Vuc2UgIE1JVAogKi8KCi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCid1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJl
dHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKdmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpOwoKdmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0Jyk7CgpleHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlcjsKZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlcjsKZXhwb3J0cy5JTlNQRUNUX01B
WF9CWVRFUyA9IDUwOwp2YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZjsKZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIOwovKioKICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDoKICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdCkKICogICA9PT0gZmFsc2UgICBQcmludCB3YXJuaW5nIGFuZCByZWNvbW1lbmQgdXNpbmcgYGJ1ZmZlcmAgdjQueCB3aGljaCBoYXMgYW4gT2JqZWN0CiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3Qg
Y29tcGF0aWJsZSwgZXZlbiBJRTYpCiAqCiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKywKICogT3BlcmEgMTEuNissIGlPUyA0LjIrLgogKgogKiBXZSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBpZiB0aGUgYXJlIG5vdCBzdWJjbGFzc2FibGUKICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVz
IHRvIGBVaW50OEFycmF5YAogKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0CiAqIGZvciBfX3Byb3RvX18gYW5kIGhhcyBhIGJ1Z2d5IHR5cGVkIGFycmF5IGltcGxlbWVudGF0aW9uLgogKi8KCkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKTsKCmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xl
LmVycm9yID09PSAnZnVuY3Rpb24nKSB7CiAgY29uc29sZS5lcnJvcignVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgKyAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nKTsKfQoKZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQoKSB7CiAgLy8gQ2FuIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkPwogIHRyeSB7CiAgICB2YXIgYXJyID0gbmV3
IFVpbnQ4QXJyYXkoMSk7CiAgICBhcnIuX19wcm90b19fID0gewogICAgICBfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLAogICAgICBmb286IGZ1bmN0aW9uIGZvbygpIHsKICAgICAgICByZXR1cm4gNDI7CiAgICAgIH0KICAgIH07CiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MjsKICB9IGNhdGNoIChlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0
KCkgewogICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWQ7CiAgICByZXR1cm4gdGhpcy5idWZmZXI7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkOwogICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldDsKICB9Cn0pOwoKZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGxlbmd0aCkg
ewogIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgIicgKyBsZW5ndGggKyAnIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gInNpemUiJyk7CiAgfSAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZQoKCiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7CiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGU7CiAgcmV0dXJuIGJ1ZjsKfQovKioKICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3Rh
bmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyCiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2YKICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kcwogKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdAogKiByZXR1cm5zIGEgc2lu
Z2xlIG9jdGV0LgogKgogKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuCiAqLwoKCmZ1bmN0aW9uIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkgewogIC8vIENvbW1vbiBjYXNlLgogIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykgewogICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgInN0cmluZyIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQg
dHlwZSBudW1iZXInKTsKICAgIH0KCiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKTsKICB9CgogIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTsKfSAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85NwoKCmlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAhPSBudWxsICYmIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikgewogIE9iamVjdC5kZWZpbmVQcm9w
ZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7CiAgICB2YWx1ZTogbnVsbCwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIGVudW1lcmFibGU6IGZhbHNlLAogICAgd3JpdGFibGU6IGZhbHNlCiAgfSk7Cn0KCkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTI7IC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb24KCmZ1bmN0aW9uIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkgewogIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5j
b2RpbmdPck9mZnNldCk7CiAgfQoKICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkgewogICAgcmV0dXJuIGZyb21BcnJheUxpa2UodmFsdWUpOwogIH0KCiAgaWYgKHZhbHVlID09IG51bGwpIHsKICAgIHRocm93IFR5cGVFcnJvcignVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgX3R5cGVvZih2YWx1ZSkpOwogIH0KCiAgaWYgKGlzSW5zdGFuY2UodmFs
dWUsIEFycmF5QnVmZmVyKSB8fCB2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSB7CiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpOwogIH0KCiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSAidmFsdWUiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcicpOwogIH0KCiAgdmFyIHZhbHVlT2YgPSB2YWx1ZS52YWx1
ZU9mICYmIHZhbHVlLnZhbHVlT2YoKTsKCiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkgewogICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlT2YsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7CiAgfQoKICB2YXIgYiA9IGZyb21PYmplY3QodmFsdWUpOwogIGlmIChiKSByZXR1cm4gYjsKCiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1ByaW1pdGl2ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24n
KSB7CiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7CiAgfQoKICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICsgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyBfdHlwZW9mKHZhbHVlKSk7Cn0KLyoqCiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihh
cmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yCiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLgogKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pCiAqIEJ1ZmZlci5mcm9tKGFycmF5KQogKiBCdWZmZXIuZnJvbShidWZmZXIpCiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKQogKiovCgoKQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkgewogIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5n
dGgpOwp9OyAvLyBOb3RlOiBDaGFuZ2UgcHJvdG90eXBlICphZnRlciogQnVmZmVyLmZyb20gaXMgZGVmaW5lZCB0byB3b3JrYXJvdW5kIENocm9tZSBidWc6Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4CgoKQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZTsKQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXk7CgpmdW5jdGlvbiBhc3NlcnRTaXplKHNpemUpIHsKICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7CiAgICB0aHJvdyBuZXcgVHlw
ZUVycm9yKCcic2l6ZSIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpOwogIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgIicgKyBzaXplICsgJyIgaXMgaW52YWxpZCBmb3Igb3B0aW9uICJzaXplIicpOwogIH0KfQoKZnVuY3Rpb24gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKICBhc3NlcnRTaXplKHNpemUpOwoKICBpZiAoc2l6ZSA8PSAwKSB7CiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpOwogIH0KCiAgaWYgKGZpbGwgIT09IHVuZGVm
aW5lZCkgewogICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXMKICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGQKICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC4KICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCk7CiAgfQoKICByZXR1cm4g
Y3JlYXRlQnVmZmVyKHNpemUpOwp9Ci8qKgogKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuCiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSkKICoqLwoKCkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykgewogIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZyk7Cn07CgpmdW5jdGlvbiBhbGxvY1Vuc2FmZShzaXplKSB7CiAgYXNzZXJ0U2l6ZShzaXplKTsKICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkg
fCAwKTsKfQovKioKICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS4KICogKi8KCgpCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkgewogIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKTsKfTsKLyoqCiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLgogKi8KCgpCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVu
Y3Rpb24gKHNpemUpIHsKICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSk7Cn07CgpmdW5jdGlvbiBmcm9tU3RyaW5nKHN0cmluZywgZW5jb2RpbmcpIHsKICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHsKICAgIGVuY29kaW5nID0gJ3V0ZjgnOwogIH0KCiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7CiAgfQoKICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChz
dHJpbmcsIGVuY29kaW5nKSB8IDA7CiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpOwogIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZyk7CgogIGlmIChhY3R1YWwgIT09IGxlbmd0aCkgewogICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsCiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLgogICAgLy8gJ2FieHhj
ZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpCiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKTsKICB9CgogIHJldHVybiBidWY7Cn0KCmZ1bmN0aW9uIGZyb21BcnJheUxpa2UoYXJyYXkpIHsKICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwOwogIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkgewogICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTU7CiAgfQoKICByZXR1cm4gYnVm
Owp9CgpmdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJyJvZmZzZXQiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpOwogIH0KCiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJyJsZW5ndGgiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJv
dW5kcycpOwogIH0KCiAgdmFyIGJ1ZjsKCiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkgewogICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpOwogIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHsKICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KTsKICB9IGVsc2UgewogICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfSAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5
YCBpbnN0YW5jZQoKCiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGU7CiAgcmV0dXJuIGJ1ZjsKfQoKZnVuY3Rpb24gZnJvbU9iamVjdChvYmopIHsKICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHsKICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMDsKICAgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuKTsKCiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gYnVmOwogICAgfQoKICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKTsKICAgIHJldHVybiBidWY7CiAgfQoK
ICBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7CiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7CiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMCk7CiAgICB9CgogICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKTsKICB9CgogIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHsKICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKTsKICB9Cn0KCmZ1bmN0aW9uIGNoZWNrZWQobGVuZ3Ro
KSB7CiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuCiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pCiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgKyAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKTsKICB9
CgogIHJldHVybiBsZW5ndGggfCAwOwp9CgpmdW5jdGlvbiBTbG93QnVmZmVyKGxlbmd0aCkgewogIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgewogICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEKICAgIGxlbmd0aCA9IDA7CiAgfQoKICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpOwp9CgpCdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlcihiKSB7CiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJiBiICE9PSBCdWZmZXIucHJvdG90eXBlOyAvLyBzbyBCdWZmZXIuaXNC
dWZmZXIoQnVmZmVyLnByb3RvdHlwZSkgd2lsbCBiZSBmYWxzZQp9OwoKQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHsKICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpOwogIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aCk7CgogIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHsKICAgIHRocm93
IG5ldyBUeXBlRXJyb3IoJ1RoZSAiYnVmMSIsICJidWYyIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheScpOwogIH0KCiAgaWYgKGEgPT09IGIpIHJldHVybiAwOwogIHZhciB4ID0gYS5sZW5ndGg7CiAgdmFyIHkgPSBiLmxlbmd0aDsKCiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHsKICAgIGlmIChhW2ldICE9PSBiW2ldKSB7CiAgICAgIHggPSBhW2ldOwogICAgICB5ID0gYltpXTsKICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICBp
ZiAoeCA8IHkpIHJldHVybiAtMTsKICBpZiAoeSA8IHgpIHJldHVybiAxOwogIHJldHVybiAwOwp9OwoKQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nKGVuY29kaW5nKSB7CiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHsKICAgIGNhc2UgJ2hleCc6CiAgICBjYXNlICd1dGY4JzoKICAgIGNhc2UgJ3V0Zi04JzoKICAgIGNhc2UgJ2FzY2lpJzoKICAgIGNhc2UgJ2xhdGluMSc6CiAgICBjYXNlICdiaW5hcnknOgogICAgY2FzZSAnYmFzZTY0JzoKICAgIGNhc2UgJ3VjczInOgog
ICAgY2FzZSAndWNzLTInOgogICAgY2FzZSAndXRmMTZsZSc6CiAgICBjYXNlICd1dGYtMTZsZSc6CiAgICAgIHJldHVybiB0cnVlOwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBmYWxzZTsKICB9Cn07CgpCdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KGxpc3QsIGxlbmd0aCkgewogIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3QiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpOwogIH0KCiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7
CiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApOwogIH0KCiAgdmFyIGk7CgogIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkgewogICAgbGVuZ3RoID0gMDsKCiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkgewogICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGg7CiAgICB9CiAgfQoKICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCk7CiAgdmFyIHBvcyA9IDA7CgogIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7CiAgICB2YXIgYnVmID0gbGlzdFtpXTsKCiAgICBp
ZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7CiAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1Zik7CiAgICB9CgogICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7CiAgICB9CgogICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpOwogICAgcG9zICs9IGJ1Zi5sZW5ndGg7CiAgfQoKICByZXR1cm4gYnVmZmVyOwp9OwoKZnVuY3Rpb24gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB7
CiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7CiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aDsKICB9CgogIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7CiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGg7CiAgfQoKICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSAic3RyaW5nIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1
ZmZlci4gJyArICdSZWNlaXZlZCB0eXBlICcgKyBfdHlwZW9mKHN0cmluZykpOwogIH0KCiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGg7CiAgdmFyIG11c3RNYXRjaCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZTsKICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwOyAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb24KCiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2U7CgogIGZvciAoOzspIHsKICAgIHN3aXRjaCAoZW5jb2RpbmcpIHsKICAgICAgY2FzZSAn
YXNjaWknOgogICAgICBjYXNlICdsYXRpbjEnOgogICAgICBjYXNlICdiaW5hcnknOgogICAgICAgIHJldHVybiBsZW47CgogICAgICBjYXNlICd1dGY4JzoKICAgICAgY2FzZSAndXRmLTgnOgogICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aDsKCiAgICAgIGNhc2UgJ3VjczInOgogICAgICBjYXNlICd1Y3MtMic6CiAgICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICBjYXNlICd1dGYtMTZsZSc6CiAgICAgICAgcmV0dXJuIGxlbiAqIDI7CgogICAgICBjYXNlICdoZXgnOgogICAgICAgIHJldHVybiBsZW4g
Pj4+IDE7CgogICAgICBjYXNlICdiYXNlNjQnOgogICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoOwoKICAgICAgZGVmYXVsdDoKICAgICAgICBpZiAobG93ZXJlZENhc2UpIHsKICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoOyAvLyBhc3N1bWUgdXRmOAogICAgICAgIH0KCiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKTsKICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWU7CiAgICB9CiAgfQp9CgpCdWZm
ZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7CgpmdW5jdGlvbiBzbG93VG9TdHJpbmcoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHsKICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZTsgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCAidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMiIgc2luY2UgaXQncyBhIHJlYWQtb25seQogIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuCiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kCiAgLy8gdG8gdGhl
aXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLgogIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sCiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uCgogIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkgewogICAgc3RhcnQgPSAwOwogIH0gLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUg
aGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzIKICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LgoKCiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHsKICAgIHJldHVybiAnJzsKICB9CgogIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkgewogICAgZW5kID0gdGhpcy5sZW5ndGg7CiAgfQoKICBpZiAoZW5kIDw9IDApIHsKICAgIHJldHVybiAnJzsKICB9IC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuCgoK
ICBlbmQgPj4+PSAwOwogIHN0YXJ0ID4+Pj0gMDsKCiAgaWYgKGVuZCA8PSBzdGFydCkgewogICAgcmV0dXJuICcnOwogIH0KCiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCc7CgogIHdoaWxlICh0cnVlKSB7CiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7CiAgICAgIGNhc2UgJ2hleCc6CiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpOwoKICAgICAgY2FzZSAndXRmOCc6CiAgICAgIGNhc2UgJ3V0Zi04JzoKICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpOwoKICAg
ICAgY2FzZSAnYXNjaWknOgogICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpOwoKICAgICAgY2FzZSAnbGF0aW4xJzoKICAgICAgY2FzZSAnYmluYXJ5JzoKICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZCk7CgogICAgICBjYXNlICdiYXNlNjQnOgogICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKTsKCiAgICAgIGNhc2UgJ3VjczInOgogICAgICBjYXNlICd1Y3MtMic6CiAgICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICBjYXNlICd1dGYtMTZs
ZSc6CiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpOwogICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlOwogICAgfQogIH0KfSAvLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZl
cmAgbnBtIHBhY2thZ2UpCi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmAKLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnQKLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyCi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0
aGUgYGJ1ZmZlcmAgcGFja2FnZS4KLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0CgoKQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlOwoKZnVuY3Rpb24gc3dhcChiLCBuLCBtKSB7CiAgdmFyIGkgPSBiW25dOwogIGJbbl0gPSBiW21dOwogIGJbbV0gPSBpOwp9CgpCdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNigpIHsKICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7CgogIGlmIChsZW4gJSAyICE9PSAwKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJv
cignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKTsKICB9CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHsKICAgIHN3YXAodGhpcywgaSwgaSArIDEpOwogIH0KCiAgcmV0dXJuIHRoaXM7Cn07CgpCdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMigpIHsKICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7CgogIGlmIChsZW4gJSA0ICE9PSAwKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJp
dHMnKTsKICB9CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHsKICAgIHN3YXAodGhpcywgaSwgaSArIDMpOwogICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpOwogIH0KCiAgcmV0dXJuIHRoaXM7Cn07CgpCdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCgpIHsKICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7CgogIGlmIChsZW4gJSA4ICE9PSAwKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKTsKICB9Cgog
IGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHsKICAgIHN3YXAodGhpcywgaSwgaSArIDcpOwogICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpOwogICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpOwogICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpOwogIH0KCiAgcmV0dXJuIHRoaXM7Cn07CgpCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoOwogIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJzsKICBpZiAoYXJndW1lbnRz
Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpOwogIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfTsKCkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nOwoKQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMoYikgewogIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJyk7CiAgaWYgKHRoaXMgPT09
IGIpIHJldHVybiB0cnVlOwogIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMDsKfTsKCkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7CiAgdmFyIHN0ciA9ICcnOwogIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTOwogIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKCk7CiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJzsKICByZXR1cm4gJzxCdWZmZXIgJyArIHN0
ciArICc+JzsKfTsKCkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHsKICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7CiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKTsKICB9CgogIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSAidGFyZ2V0IiBhcmd1bWVudCBtdXN0IGJl
IG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICsgJ1JlY2VpdmVkIHR5cGUgJyArIF90eXBlb2YodGFyZ2V0KSk7CiAgfQoKICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkgewogICAgc3RhcnQgPSAwOwogIH0KCiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7CiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMDsKICB9CgogIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkgewogICAgdGhpc1N0YXJ0ID0gMDsKICB9CgogIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHsKICAgIHRoaXNFbmQg
PSB0aGlzLmxlbmd0aDsKICB9CgogIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpOwogIH0KCiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkgewogICAgcmV0dXJuIDA7CiAgfQoKICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHsKICAgIHJldHVybiAtMTsKICB9CgogIGlmIChzdGFydCA+PSBlbmQpIHsKICAgIHJl
dHVybiAxOwogIH0KCiAgc3RhcnQgPj4+PSAwOwogIGVuZCA+Pj49IDA7CiAgdGhpc1N0YXJ0ID4+Pj0gMDsKICB0aGlzRW5kID4+Pj0gMDsKICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMDsKICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnQ7CiAgdmFyIHkgPSBlbmQgLSBzdGFydDsKICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSk7CiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpOwogIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpOwoKICBmb3IgKHZh
ciBpID0gMDsgaSA8IGxlbjsgKytpKSB7CiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHsKICAgICAgeCA9IHRoaXNDb3B5W2ldOwogICAgICB5ID0gdGFyZ2V0Q29weVtpXTsKICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICBpZiAoeCA8IHkpIHJldHVybiAtMTsKICBpZiAoeSA8IHgpIHJldHVybiAxOwogIHJldHVybiAwOwp9OyAvLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsCi8vIE9SIHRoZSBsYXN0IGluZGV4
IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuCi8vCi8vIEFyZ3VtZW50czoKLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2gKLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXIKLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyCi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nCi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhP
ZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mCgoKZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHsKICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2gKICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xOyAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldAoKICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7CiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXQ7CiAgICBieXRlT2Zmc2V0ID0gMDsKICB9IGVsc2UgaWYgKGJ5dGVP
ZmZzZXQgPiAweDdmZmZmZmZmKSB7CiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZjsKICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkgewogICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwOwogIH0KCiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0OyAvLyBDb2VyY2UgdG8gTnVtYmVyLgoKICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHsKICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sICJmb28iLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXIKICAgIGJ5dGVP
ZmZzZXQgPSBkaXIgPyAwIDogYnVmZmVyLmxlbmd0aCAtIDE7CiAgfSAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlcgoKCiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXQ7CgogIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHsKICAgIGlmIChkaXIpIHJldHVybiAtMTtlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMTsKICB9IGVsc2UgaWYgKGJ5dGVPZmZz
ZXQgPCAwKSB7CiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMDtlbHNlIHJldHVybiAtMTsKICB9IC8vIE5vcm1hbGl6ZSB2YWwKCgogIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgewogICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZyk7CiAgfSAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZgoKCiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7CiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZm
ZXIgYWx3YXlzIGZhaWxzCiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gLTE7CiAgICB9CgogICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcik7CiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykgewogICAgdmFsID0gdmFsICYgMHhGRjsgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XQoKICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBp
ZiAoZGlyKSB7CiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFt2YWxdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKTsKICB9CgogIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJl
IHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpOwp9CgpmdW5jdGlvbiBhcnJheUluZGV4T2YoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHsKICB2YXIgaW5kZXhTaXplID0gMTsKICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDsKICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aDsKCiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHsKICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpOwoKICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAn
dWNzLTInIHx8IGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHsKICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7CiAgICAgICAgcmV0dXJuIC0xOwogICAgICB9CgogICAgICBpbmRleFNpemUgPSAyOwogICAgICBhcnJMZW5ndGggLz0gMjsKICAgICAgdmFsTGVuZ3RoIC89IDI7CiAgICAgIGJ5dGVPZmZzZXQgLz0gMjsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlYWQoYnVmLCBpKSB7CiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7CiAgICAgIHJldHVy
biBidWZbaV07CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKTsKICAgIH0KICB9CgogIHZhciBpOwoKICBpZiAoZGlyKSB7CiAgICB2YXIgZm91bmRJbmRleCA9IC0xOwoKICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykgewogICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7CiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0g
aTsKICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleDsKICAgICAgICBmb3VuZEluZGV4ID0gLTE7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGg7CgogICAgZm9yIChpID0gYnl0ZU9mZnNl
dDsgaSA+PSAwOyBpLS0pIHsKICAgICAgdmFyIGZvdW5kID0gdHJ1ZTsKCiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHsKICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7CiAgICAgICAgICBmb3VuZCA9IGZhbHNlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoZm91bmQpIHJldHVybiBpOwogICAgfQogIH0KCiAgcmV0dXJuIC0xOwp9CgpCdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXModmFs
LCBieXRlT2Zmc2V0LCBlbmNvZGluZykgewogIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7CiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHZhbCwgYnl0ZU9mZnNl
dCwgZW5jb2RpbmcpIHsKICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpOwp9OwoKZnVuY3Rpb24gaGV4V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMDsKICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldDsKCiAgaWYgKCFsZW5ndGgpIHsKICAgIGxlbmd0aCA9IHJlbWFpbmluZzsKICB9IGVsc2UgewogICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aCk7CgogICAgaWYg
KGxlbmd0aCA+IHJlbWFpbmluZykgewogICAgICBsZW5ndGggPSByZW1haW5pbmc7CiAgICB9CiAgfQoKICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aDsKCiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHsKICAgIGxlbmd0aCA9IHN0ckxlbiAvIDI7CiAgfQoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KTsKICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaTsKICAgIGJ1ZltvZmZzZXQgKyBp
XSA9IHBhcnNlZDsKICB9CgogIHJldHVybiBpOwp9CgpmdW5jdGlvbiB1dGY4V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCk7Cn0KCmZ1bmN0aW9uIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpOwp9CgpmdW5jdGlvbiBsYXRp
bjFXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpOwp9CgpmdW5jdGlvbiBiYXNlNjRXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpOwp9CgpmdW5jdGlvbiB1Y3MyV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3Ry
aW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCk7Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZShzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykgewogIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpCiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7CiAgICBlbmNvZGluZyA9ICd1dGY4JzsKICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoOwogICAgb2Zmc2V0ID0gMDsgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpCiAgfSBlbHNlIGlmIChsZW5n
dGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykgewogICAgZW5jb2RpbmcgPSBvZmZzZXQ7CiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDsKICAgIG9mZnNldCA9IDA7IC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pCiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7CiAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CgogICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHsKICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwOwogICAgICBpZiAoZW5j
b2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCc7CiAgICB9IGVsc2UgewogICAgICBlbmNvZGluZyA9IGxlbmd0aDsKICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkOwogICAgfQogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJyk7CiAgfQoKICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXQ7CiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+
IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nOwoKICBpZiAoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpOwogIH0KCiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCc7CiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2U7CgogIGZvciAoOzspIHsKICAgIHN3aXRjaCAoZW5jb2RpbmcpIHsKICAgICAgY2FzZSAn
aGV4JzoKICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7CgogICAgICBjYXNlICd1dGY4JzoKICAgICAgY2FzZSAndXRmLTgnOgogICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7CgogICAgICBjYXNlICdhc2NpaSc6CiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7CgogICAgICBjYXNlICdsYXRpbjEnOgogICAgICBjYXNlICdiaW5hcnknOgogICAgICAgIHJldHVybiBsYXRpbjFX
cml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKTsKCiAgICAgIGNhc2UgJ2Jhc2U2NCc6CiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGUKICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7CgogICAgICBjYXNlICd1Y3MyJzoKICAgICAgY2FzZSAndWNzLTInOgogICAgICBjYXNlICd1dGYxNmxlJzoKICAgICAgY2FzZSAndXRmLTE2bGUnOgogICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywg
c3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7CgogICAgICBkZWZhdWx0OgogICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTsKICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpOwogICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZTsKICAgIH0KICB9Cn07CgpCdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHsKICByZXR1cm4gewogICAgdHlwZTogJ0J1ZmZlcicsCiAgICBkYXRhOiBB
cnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMCkKICB9Owp9OwoKZnVuY3Rpb24gYmFzZTY0U2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7CiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkgewogICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zik7CiAgfSBlbHNlIHsKICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpOwogIH0KfQoKZnVuY3Rpb24gdXRmOFNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkgewogIGVuZCA9IE1h
dGgubWluKGJ1Zi5sZW5ndGgsIGVuZCk7CiAgdmFyIHJlcyA9IFtdOwogIHZhciBpID0gc3RhcnQ7CgogIHdoaWxlIChpIDwgZW5kKSB7CiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldOwogICAgdmFyIGNvZGVQb2ludCA9IG51bGw7CiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IGZpcnN0Qnl0ZSA+IDB4RUYgPyA0IDogZmlyc3RCeXRlID4gMHhERiA/IDMgOiBmaXJzdEJ5dGUgPiAweEJGID8gMiA6IDE7CgogICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkgewogICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRC
eXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50OwoKICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHsKICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTsKCiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkgewogICAgICAgICAgICB0ZW1wQ29k
ZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IHNlY29uZEJ5dGUgJiAweDNGOwoKICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7CiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDM6CiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTsKICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl07CgogICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhD
MCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7CiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IHRoaXJkQnl0ZSAmIDB4M0Y7CgogICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7CiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludDsKICAgICAgICAgICAgfQog
ICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTsKICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl07CiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXTsKCiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkgewogICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAm
IDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IGZvdXJ0aEJ5dGUgJiAweDNGOwoKICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7CiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgfQogICAgfQoKICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHsKICAgICAgLy8gd2UgZGlkIG5vdCBnZW5l
cmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYQogICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlCiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRDsKICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDE7CiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikgewogICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKQogICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDsKICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZG
IHwgMHhEODAwKTsKICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkY7CiAgICB9CgogICAgcmVzLnB1c2goY29kZVBvaW50KTsKICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZTsKICB9CgogIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKTsKfSAvLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGgKLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLgovLyBXZSBnbyAxIG1hZ25p
dHVkZSBsZXNzLCBmb3Igc2FmZXR5CgoKdmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwOwoKZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5KGNvZGVQb2ludHMpIHsKICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGg7CgogIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHsKICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cyk7IC8vIGF2b2lkIGV4dHJhIHNsaWNlKCkKICB9IC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgImNhbGwgc3RhY2sg
c2l6ZSBleGNlZWRlZCIuCgoKICB2YXIgcmVzID0gJyc7CiAgdmFyIGkgPSAwOwoKICB3aGlsZSAoaSA8IGxlbikgewogICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpKTsKICB9CgogIHJldHVybiByZXM7Cn0KCmZ1bmN0aW9uIGFzY2lpU2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7CiAgdmFyIHJldCA9ICcnOwogIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCk7CgogIGZvciAodmFyIGkgPSBzdGFydDsgaSA8
IGVuZDsgKytpKSB7CiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCmZ1bmN0aW9uIGxhdGluMVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkgewogIHZhciByZXQgPSAnJzsKICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpOwoKICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewogICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCmZ1bmN0aW9uIGhleFNsaWNlKGJ1Ziwgc3Rh
cnQsIGVuZCkgewogIHZhciBsZW4gPSBidWYubGVuZ3RoOwogIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDA7CiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlbjsKICB2YXIgb3V0ID0gJyc7CgogIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7CiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKTsKICB9CgogIHJldHVybiBvdXQ7Cn0KCmZ1bmN0aW9uIHV0ZjE2bGVTbGljZShidWYsIHN0YXJ0LCBlbmQpIHsKICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZCk7
CiAgdmFyIHJlcyA9ICcnOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7CiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1Nik7CiAgfQoKICByZXR1cm4gcmVzOwp9CgpCdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkgewogIHZhciBsZW4gPSB0aGlzLmxlbmd0aDsKICBzdGFydCA9IH5+c3RhcnQ7CiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZDsKCiAgaWYgKHN0YXJ0
IDwgMCkgewogICAgc3RhcnQgKz0gbGVuOwogICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwOwogIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHsKICAgIHN0YXJ0ID0gbGVuOwogIH0KCiAgaWYgKGVuZCA8IDApIHsKICAgIGVuZCArPSBsZW47CiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMDsKICB9IGVsc2UgaWYgKGVuZCA+IGxlbikgewogICAgZW5kID0gbGVuOwogIH0KCiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydDsKICB2YXIgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKTsgLy8gUmV0dXJuIGFuIGF1
Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UKCiAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGU7CiAgcmV0dXJuIG5ld0J1ZjsKfTsKLyoKICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuCiAqLwoKCmZ1bmN0aW9uIGNoZWNrT2Zmc2V0KG9mZnNldCwgZXh0LCBsZW5ndGgpIHsKICBpZiAob2Zmc2V0ICUgMSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50Jyk7CiAgaWYg
KG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKTsKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRShvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpOwogIHZhciB2
YWwgPSB0aGlzW29mZnNldF07CiAgdmFyIG11bCA9IDE7CiAgdmFyIGkgPSAwOwoKICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWw7CiAgfQoKICByZXR1cm4gdmFsOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRShvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwOwoKICBpZiAo
IW5vQXNzZXJ0KSB7CiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKTsKICB9CgogIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF07CiAgdmFyIG11bCA9IDE7CgogIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bDsKICB9CgogIHJldHVybiB2YWw7Cn07CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OChvZmZzZXQsIG5vQXNz
ZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpOwogIHJldHVybiB0aGlzW29mZnNldF07Cn07CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRShvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpOwogIHJldHVybiB0aGlzW29mZnNldF0gfCB0aGlzW29mZnNl
dCArIDFdIDw8IDg7Cn07CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRShvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpOwogIHJldHVybiB0aGlzW29mZnNldF0gPDwgOCB8IHRoaXNbb2Zmc2V0ICsgMV07Cn07CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRShvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgb2Zm
c2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpOwogIHJldHVybiAodGhpc1tvZmZzZXRdIHwgdGhpc1tvZmZzZXQgKyAxXSA8PCA4IHwgdGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgKyB0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUob2Zmc2V0LCBub0Fzc2VydCkgewogIG9mZnNldCA9IG9mZnNldCA+Pj4gMDsKICBpZiAoIW5vQXNzZXJ0KSBj
aGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTsKICByZXR1cm4gdGhpc1tvZmZzZXRdICogMHgxMDAwMDAwICsgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYgfCB0aGlzW29mZnNldCArIDJdIDw8IDggfCB0aGlzW29mZnNldCArIDNdKTsKfTsKCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkg
Y2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCk7CiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XTsKICB2YXIgbXVsID0gMTsKICB2YXIgaSA9IDA7CgogIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bDsKICB9CgogIG11bCAqPSAweDgwOwogIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpOwogIHJldHVybiB2YWw7Cn07CgpCdWZmZXIucHJvdG90eXBlLnJlYWRJbnRC
RSA9IGZ1bmN0aW9uIHJlYWRJbnRCRShvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpOwogIHZhciBpID0gYnl0ZUxlbmd0aDsKICB2YXIgbXVsID0gMTsKICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldOwoKICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIHZhbCArPSB0aGlzW29m
ZnNldCArIC0taV0gKiBtdWw7CiAgfQoKICBtdWwgKj0gMHg4MDsKICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKTsKICByZXR1cm4gdmFsOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4KG9mZnNldCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aCk7CiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiB0aGlzW29m
ZnNldF07CiAgcmV0dXJuICgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMTsKfTsKCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRShvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpOwogIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCB0aGlzW29mZnNldCArIDFdIDw8IDg7CiAgcmV0dXJuIHZhbCAmIDB4ODAwMCA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWw7
Cn07CgpCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUob2Zmc2V0LCBub0Fzc2VydCkgewogIG9mZnNldCA9IG9mZnNldCA+Pj4gMDsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTsKICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8IHRoaXNbb2Zmc2V0XSA8PCA4OwogIHJldHVybiB2YWwgJiAweDgwMDAgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJl
YWRJbnQzMkxFKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7CiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8IHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCB8IHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYgfCB0aGlzW29mZnNldCArIDNdIDw8IDI0Owp9OwoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQg
Pj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7CiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSA8PCAyNCB8IHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYgfCB0aGlzW29mZnNldCArIDJdIDw8IDggfCB0aGlzW29mZnNldCArIDNdOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0
aGlzLmxlbmd0aCk7CiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KTsKfTsKCkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRShvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpOwogIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91Ymxl
TEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUob2Zmc2V0LCBub0Fzc2VydCkgewogIG9mZnNldCA9IG9mZnNldCA+Pj4gMDsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKTsKICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpOwp9OwoKQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUob2Zmc2V0LCBub0Fzc2VydCkgewogIG9mZnNldCA9IG9mZnNldCA+Pj4gMDsKICBpZiAoIW5vQXNzZXJ0KSBjaGVj
a09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKTsKICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KTsKfTsKCmZ1bmN0aW9uIGNoZWNrSW50KGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikgewogIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJyJidWZmZXIiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTsKICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCcidmFs
dWUiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKTsKICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpOwp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZTsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDA7CgogIGlmICghbm9Bc3NlcnQpIHsK
ICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDE7CiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMCk7CiAgfQoKICB2YXIgbXVsID0gMTsKICB2YXIgaSA9IDA7CiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGOwoKICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlIC8gbXVsICYgMHhGRjsKICB9CgogIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3Ro
Owp9OwoKQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWU7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwOwoKICBpZiAoIW5vQXNzZXJ0KSB7CiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxOwogICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMs
IDApOwogIH0KCiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMTsKICB2YXIgbXVsID0gMTsKICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGOwoKICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAvIG11bCAmIDB4RkY7CiAgfQoKICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aDsKfTsKCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDgodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1
ZTsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMCk7CiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweGZmOwogIHJldHVybiBvZmZzZXQgKyAxOwp9OwoKQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlOwogIG9mZnNldCA9IG9mZnNldCA+Pj4gMDsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlz
LCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApOwogIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhmZjsKICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgPj4+IDg7CiAgcmV0dXJuIG9mZnNldCArIDI7Cn07CgpCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWU7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4
ZmZmZiwgMCk7CiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgPj4+IDg7CiAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlICYgMHhmZjsKICByZXR1cm4gb2Zmc2V0ICsgMjsKfTsKCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZTsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMCk7CiAgdGhpc1tv
ZmZzZXQgKyAzXSA9IHZhbHVlID4+PiAyNDsKICB0aGlzW29mZnNldCArIDJdID0gdmFsdWUgPj4+IDE2OwogIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+Pj4gODsKICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4ZmY7CiAgcmV0dXJuIG9mZnNldCArIDQ7Cn07CgpCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWU7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNoZWNr
SW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApOwogIHRoaXNbb2Zmc2V0XSA9IHZhbHVlID4+PiAyNDsKICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgPj4+IDE2OwogIHRoaXNbb2Zmc2V0ICsgMl0gPSB2YWx1ZSA+Pj4gODsKICB0aGlzW29mZnNldCArIDNdID0gdmFsdWUgJiAweGZmOwogIHJldHVybiBvZmZzZXQgKyA0Owp9OwoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogIHZhbHVl
ID0gK3ZhbHVlOwogIG9mZnNldCA9IG9mZnNldCA+Pj4gMDsKCiAgaWYgKCFub0Fzc2VydCkgewogICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKTsKICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KTsKICB9CgogIHZhciBpID0gMDsKICB2YXIgbXVsID0gMTsKICB2YXIgc3ViID0gMDsKICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkY7CgogIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CiAg
ICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkgewogICAgICBzdWIgPSAxOwogICAgfQoKICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwgPj4gMCkgLSBzdWIgJiAweEZGOwogIH0KCiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGg7Cn07CgpCdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWU7CiAgb2Zmc2V0ID0gb2Zm
c2V0ID4+PiAwOwoKICBpZiAoIW5vQXNzZXJ0KSB7CiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpOwogICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpOwogIH0KCiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMTsKICB2YXIgbXVsID0gMTsKICB2YXIgc3ViID0gMDsKICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGOwoKICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIGlmICh2YWx1ZSA8IDAg
JiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7CiAgICAgIHN1YiA9IDE7CiAgICB9CgogICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCA+PiAwKSAtIHN1YiAmIDB4RkY7CiAgfQoKICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aDsKfTsKCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4KHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWU7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwogIGlmICghbm9Bc3NlcnQpIGNo
ZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKTsKICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDE7CiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweGZmOwogIHJldHVybiBvZmZzZXQgKyAxOwp9OwoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZTsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywg
dmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKTsKICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4ZmY7CiAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4OwogIHJldHVybiBvZmZzZXQgKyAyOwp9OwoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZTsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwg
MHg3ZmZmLCAtMHg4MDAwKTsKICB0aGlzW29mZnNldF0gPSB2YWx1ZSA+Pj4gODsKICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgJiAweGZmOwogIHJldHVybiBvZmZzZXQgKyAyOwp9OwoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZTsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAw
MDAwMDApOwogIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhmZjsKICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgPj4+IDg7CiAgdGhpc1tvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiAxNjsKICB0aGlzW29mZnNldCArIDNdID0gdmFsdWUgPj4+IDI0OwogIHJldHVybiBvZmZzZXQgKyA0Owp9OwoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZTsKICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7CiAgaWYgKCFu
b0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApOwogIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMTsKICB0aGlzW29mZnNldF0gPSB2YWx1ZSA+Pj4gMjQ7CiAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiAxNjsKICB0aGlzW29mZnNldCArIDJdID0gdmFsdWUgPj4+IDg7CiAgdGhpc1tvZmZzZXQgKyAzXSA9IHZhbHVlICYgMHhmZjsKICByZXR1cm4gb2Zmc2V0ICsgNDsKfTsKCmZ1bmN0aW9uIGNoZWNrSUVFRTc1NChi
dWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHsKICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpOwogIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJyk7Cn0KCmZ1bmN0aW9uIHdyaXRlRmxvYXQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWU7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwoKICBpZiAoIW5vQXNz
ZXJ0KSB7CiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOCk7CiAgfQoKICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNCk7CiAgcmV0dXJuIG9mZnNldCArIDQ7Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9m
ZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpOwp9OwoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpOwp9OwoKZnVuY3Rpb24gd3JpdGVEb3VibGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWU7CiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwOwoKICBpZiAoIW5vQXNzZXJ0KSB7
CiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KTsKICB9CgogIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KTsKICByZXR1cm4gb2Zmc2V0ICsgODsKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zm
c2V0LCB0cnVlLCBub0Fzc2VydCk7Cn07CgpCdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7Cn07IC8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aCkKCgpCdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5KHRhcmdldCwgdGFy
Z2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHsKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKTsKICBpZiAoIXN0YXJ0KSBzdGFydCA9IDA7CiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aDsKICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoOwogIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMDsKICBpZiAoZW5kID4gMCAmJiBlbmQg
PCBzdGFydCkgZW5kID0gc3RhcnQ7IC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZQoKICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDA7CiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwOyAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zCgogIGlmICh0YXJnZXRTdGFydCA8IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJyk7CiAgfQoKICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBu
ZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJyk7CiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpOyAvLyBBcmUgd2Ugb29iPwoKICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoOwoKICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHsKICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0OwogIH0KCiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0OwoKICBpZiAodGhp
cyA9PT0gdGFyZ2V0ICYmIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluID09PSAnZnVuY3Rpb24nKSB7CiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExCiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpOwogIH0gZWxzZSBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHsKICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZAogICAgZm9yICh2YXIgaSA9IGxl
biAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdOwogICAgfQogIH0gZWxzZSB7CiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbCh0YXJnZXQsIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksIHRhcmdldFN0YXJ0KTsKICB9CgogIHJldHVybiBsZW47Cn07IC8vIFVzYWdlOgovLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSkKLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pCi8vICAgIGJ1ZmZl
ci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKQoKCkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykgewogIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6CiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7CiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykgewogICAgICBlbmNvZGluZyA9IHN0YXJ0OwogICAgICBzdGFydCA9IDA7CiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoOwogICAgfSBlbHNlIGlmICh0eXBlb2YgZW5k
ID09PSAnc3RyaW5nJykgewogICAgICBlbmNvZGluZyA9IGVuZDsKICAgICAgZW5kID0gdGhpcy5sZW5ndGg7CiAgICB9CgogICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJyk7CiAgICB9CgogICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdV
bmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpOwogICAgfQoKICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7CiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMCk7CgogICAgICBpZiAoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4IHx8IGVuY29kaW5nID09PSAnbGF0aW4xJykgewogICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuCiAgICAgICAgdmFsID0gY29kZTsKICAgICAgfQogICAgfQogIH0gZWxzZSBp
ZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHsKICAgIHZhbCA9IHZhbCAmIDI1NTsKICB9IC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LgoKCiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4Jyk7CiAgfQoKICBpZiAoZW5kIDw9IHN0YXJ0KSB7CiAgICByZXR1cm4gdGhpczsKICB9CgogIHN0YXJ0ID0gc3Rh
cnQgPj4+IDA7CiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMDsKICBpZiAoIXZhbCkgdmFsID0gMDsKICB2YXIgaTsKCiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7CiAgICAgIHRoaXNbaV0gPSB2YWw7CiAgICB9CiAgfSBlbHNlIHsKICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpID8gdmFsIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZyk7CiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3Ro
OwoKICAgIGlmIChsZW4gPT09IDApIHsKICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlICInICsgdmFsICsgJyIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgInZhbHVlIicpOwogICAgfQoKICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7CiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dOwogICAgfQogIH0KCiAgcmV0dXJuIHRoaXM7Cn07IC8vIEhFTFBFUiBGVU5DVElPTlMKLy8gPT09PT09PT09PT09PT09PQoKCnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05
QS1aYS16LV9dL2c7CgpmdW5jdGlvbiBiYXNlNjRjbGVhbihzdHIpIHsKICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nCiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF07IC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcbiBhbmQgXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3QKCiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJyk7IC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxl
bmd0aCA8IDIgdG8gJycKCiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJyc7IC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdAoKICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHsKICAgIHN0ciA9IHN0ciArICc9JzsKICB9CgogIHJldHVybiBzdHI7Cn0KCmZ1bmN0aW9uIHRvSGV4KG4pIHsKICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNik7CiAgcmV0dXJuIG4udG9TdHJpbmcoMTYp
Owp9CgpmdW5jdGlvbiB1dGY4VG9CeXRlcyhzdHJpbmcsIHVuaXRzKSB7CiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eTsKICB2YXIgY29kZVBvaW50OwogIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoOwogIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbDsKICB2YXIgYnl0ZXMgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7IC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnQKCiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNv
ZGVQb2ludCA8IDB4RTAwMCkgewogICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZAogICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHsKICAgICAgICAvLyBubyBsZWFkIHlldAogICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHsKICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWwKICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkgewogICAgICAgICAgLy8g
dW5wYWlyZWQgbGVhZAogICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfSAvLyB2YWxpZCBsZWFkCgoKICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50OwogICAgICAgIGNvbnRpbnVlOwogICAgICB9IC8vIDIgbGVhZHMgaW4gYSByb3cKCgogICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7CiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpOwog
ICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQ7CiAgICAgICAgY29udGludWU7CiAgICAgIH0gLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXIKCgogICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwOwogICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7CiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWQKICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYs
IDB4QkQpOwogICAgfQoKICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsOyAvLyBlbmNvZGUgdXRmOAoKICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7CiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVhazsKICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpOwogICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkgewogICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWs7CiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwKTsKICAgIH0gZWxzZSBp
ZiAoY29kZVBvaW50IDwgMHgxMDAwMCkgewogICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWs7CiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCwgY29kZVBvaW50ICYgMHgzRiB8IDB4ODApOwogICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkgewogICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWs7CiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLCBjb2RlUG9pbnQgPj4gMHhDICYgMHgz
RiB8IDB4ODAsIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCwgY29kZVBvaW50ICYgMHgzRiB8IDB4ODApOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKTsKICAgIH0KICB9CgogIHJldHVybiBieXRlczsKfQoKZnVuY3Rpb24gYXNjaWlUb0J5dGVzKHN0cikgewogIHZhciBieXRlQXJyYXkgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAm
IDB4N0YuLgogICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKTsKICB9CgogIHJldHVybiBieXRlQXJyYXk7Cn0KCmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzKHN0ciwgdW5pdHMpIHsKICB2YXIgYywgaGksIGxvOwogIHZhciBieXRlQXJyYXkgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVhazsKICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTsKICAgIGhpID0gYyA+PiA4OwogICAgbG8gPSBjICUgMjU2OwogICAg
Ynl0ZUFycmF5LnB1c2gobG8pOwogICAgYnl0ZUFycmF5LnB1c2goaGkpOwogIH0KCiAgcmV0dXJuIGJ5dGVBcnJheTsKfQoKZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyhzdHIpIHsKICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpOwp9CgpmdW5jdGlvbiBibGl0QnVmZmVyKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkgewogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgIGlmIChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGggfHwgaSA+PSBzcmMubGVuZ3RoKSBicmVhazsKICAg
IGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXTsKICB9CgogIHJldHVybiBpOwp9IC8vIEFycmF5QnVmZmVyIG9yIFVpbnQ4QXJyYXkgb2JqZWN0cyBmcm9tIG90aGVyIGNvbnRleHRzIChpLmUuIGlmcmFtZXMpIGRvIG5vdCBwYXNzCi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLgovLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjYKCgpmdW5jdGlvbiBpc0luc3RhbmNlKG9iaiwgdHlwZSkgewogIHJldHVybiBvYmog
aW5zdGFuY2VvZiB0eXBlIHx8IG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZTsKfQoKZnVuY3Rpb24gbnVtYmVySXNOYU4ob2JqKSB7CiAgLy8gRm9yIElFMTEgc3VwcG9ydAogIHJldHVybiBvYmogIT09IG9iajsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmUKfQoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoImJ1ZmZlciIpLkJ1ZmZlcikKCn0seyJiYXNlNjQtanMi
OjE4MiwiYnVmZmVyIjoyMTYsImllZWU3NTQiOjI3Nn1dLDIxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoQnVmZmVyKXsKInVzZSBzdHJpY3QiOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IoYSwgYikgewogIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpOwogIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aCk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldOwogIH0KCiAg
cmV0dXJuIGJ1ZmZlcjsKfTsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiYnVmZmVyIjoyMTZ9XSwyMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgp2YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtOwoKdmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXI7Cgp2YXIgaW5oZXJpdHMgPSBy
ZXF1aXJlKCdpbmhlcml0cycpOwoKZnVuY3Rpb24gQ2lwaGVyQmFzZShoYXNoTW9kZSkgewogIFRyYW5zZm9ybS5jYWxsKHRoaXMpOwogIHRoaXMuaGFzaE1vZGUgPSB0eXBlb2YgaGFzaE1vZGUgPT09ICdzdHJpbmcnOwoKICBpZiAodGhpcy5oYXNoTW9kZSkgewogICAgdGhpc1toYXNoTW9kZV0gPSB0aGlzLl9maW5hbE9yRGlnZXN0OwogIH0gZWxzZSB7CiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdDsKICB9CgogIGlmICh0aGlzLl9maW5hbCkgewogICAgdGhpcy5fX2ZpbmFsID0gdGhpcy5fZmluYWw7CiAg
ICB0aGlzLl9maW5hbCA9IG51bGw7CiAgfQoKICB0aGlzLl9kZWNvZGVyID0gbnVsbDsKICB0aGlzLl9lbmNvZGluZyA9IG51bGw7Cn0KCmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSk7CgpDaXBoZXJCYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgaW5wdXRFbmMsIG91dHB1dEVuYykgewogIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHsKICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBpbnB1dEVuYyk7CiAgfQoKICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKTsKCiAg
aWYgKHRoaXMuaGFzaE1vZGUpIHJldHVybiB0aGlzOwoKICBpZiAob3V0cHV0RW5jKSB7CiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKTsKICB9CgogIHJldHVybiBvdXREYXRhOwp9OwoKQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fTsKCkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7CiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJyk7Cn07
CgpDaXBoZXJCYXNlLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gKCkgewogIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpOwp9OwoKQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkgewogIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhYWQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKTsKfTsKCkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkgewogIHZhciBlcnI7
CgogIHRyeSB7CiAgICBpZiAodGhpcy5oYXNoTW9kZSkgewogICAgICB0aGlzLl91cGRhdGUoZGF0YSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKTsKICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICBlcnIgPSBlOwogIH0gZmluYWxseSB7CiAgICBuZXh0KGVycik7CiAgfQp9OwoKQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHsKICB2YXIgZXJyOwoKICB0cnkgewogICAgdGhpcy5wdXNoKHRoaXMuX19maW5hbCgpKTsKICB9IGNhdGNoIChlKSB7CiAg
ICBlcnIgPSBlOwogIH0KCiAgZG9uZShlcnIpOwp9OwoKQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7CiAgdmFyIG91dERhdGEgPSB0aGlzLl9fZmluYWwoKSB8fCBCdWZmZXIuYWxsb2MoMCk7CgogIGlmIChvdXRwdXRFbmMpIHsKICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpOwogIH0KCiAgcmV0dXJuIG91dERhdGE7Cn07CgpDaXBoZXJCYXNlLnByb3RvdHlwZS5fdG9TdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUsIGVu
YywgZmluKSB7CiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7CiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTsKICAgIHRoaXMuX2VuY29kaW5nID0gZW5jOwogIH0KCiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHRocm93IG5ldyBFcnJvcignY2FuXCd0IHN3aXRjaCBlbmNvZGluZ3MnKTsKCiAgdmFyIG91dCA9IHRoaXMuX2RlY29kZXIud3JpdGUodmFsdWUpOwoKICBpZiAoZmluKSB7CiAgICBvdXQgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKTsKICB9CgogIHJldHVybiBvdXQ7Cn07Cgptb2R1bGUu
ZXhwb3J0cyA9IENpcGhlckJhc2U7Cgp9LHsiaW5oZXJpdHMiOjI3OCwic2FmZS1idWZmZXIiOjM4NCwic3RyZWFtIjozOTYsInN0cmluZ19kZWNvZGVyIjo0MTB9XSwyMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKEJ1ZmZlcil7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBl
b2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRv
cnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1
dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8K
Ly8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VT
IE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgovLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmAKLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5
IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuCmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkpIHsKICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7CiAgfQoKICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJzsKfQoKZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTsKCmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nOwp9CgpleHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjsKCmZ1bmN0aW9u
IGlzTnVsbChhcmcpIHsKICByZXR1cm4gYXJnID09PSBudWxsOwp9CgpleHBvcnRzLmlzTnVsbCA9IGlzTnVsbDsKCmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykgewogIHJldHVybiBhcmcgPT0gbnVsbDsKfQoKZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkOwoKZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInOwp9CgpleHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7CgpmdW5jdGlvbiBpc1N0cmluZyhhcmcpIHsKICByZXR1cm4g
dHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7Cn0KCmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZzsKCmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykgewogIHJldHVybiBfdHlwZW9mKGFyZykgPT09ICdzeW1ib2wnOwp9CgpleHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7CgpmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHsKICByZXR1cm4gYXJnID09PSB2b2lkIDA7Cn0KCmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDsKCmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7CiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0g
J1tvYmplY3QgUmVnRXhwXSc7Cn0KCmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDsKCmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykgewogIHJldHVybiBfdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDsKfQoKZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0OwoKZnVuY3Rpb24gaXNEYXRlKGQpIHsKICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJzsKfQoKZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7CgpmdW5jdGlvbiBpc0Vycm9yKGUpIHsKICByZXR1cm4gb2JqZWN0VG9T
dHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yOwp9CgpleHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yOwoKZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJzsKfQoKZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjsKCmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykgewogIHJldHVybiBhcmcgPT09IG51bGwgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBh
cmcgPT09ICdzdHJpbmcnIHx8IF90eXBlb2YoYXJnKSA9PT0gJ3N5bWJvbCcgfHwgLy8gRVM2IHN5bWJvbAogIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnOwp9CgpleHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7CmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7CgpmdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTsKfQoKfSkuY2FsbCh0aGlzLHsiaXNCdWZmZXIiOnJlcXVpcmUoIi4uLy4uL2lzLWJ1ZmZlci9pbmRleC5q
cyIpfSkKCn0seyIuLi8uLi9pcy1idWZmZXIvaW5kZXguanMiOjI3OX1dLDIyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoQnVmZmVyKXsKInVzZSBzdHJpY3QiOwoKdmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKTsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVDREgoY3VydmUpIHsKICByZXR1cm4gbmV3IEVDREgoY3VydmUpOwp9OwoKdmFyIGFsaWFzZXMgPSB7CiAgc2VjcDI1NmsxOiB7CiAgICBuYW1lOiAn
c2VjcDI1NmsxJywKICAgIGJ5dGVMZW5ndGg6IDMyCiAgfSwKICBzZWNwMjI0cjE6IHsKICAgIG5hbWU6ICdwMjI0JywKICAgIGJ5dGVMZW5ndGg6IDI4CiAgfSwKICBwcmltZTI1NnYxOiB7CiAgICBuYW1lOiAncDI1NicsCiAgICBieXRlTGVuZ3RoOiAzMgogIH0sCiAgcHJpbWUxOTJ2MTogewogICAgbmFtZTogJ3AxOTInLAogICAgYnl0ZUxlbmd0aDogMjQKICB9LAogIGVkMjU1MTk6IHsKICAgIG5hbWU6ICdlZDI1NTE5JywKICAgIGJ5dGVMZW5ndGg6IDMyCiAgfSwKICBzZWNwMzg0cjE6IHsKICAgIG5hbWU6ICdwMzg0JywK
ICAgIGJ5dGVMZW5ndGg6IDQ4CiAgfSwKICBzZWNwNTIxcjE6IHsKICAgIG5hbWU6ICdwNTIxJywKICAgIGJ5dGVMZW5ndGg6IDY2CiAgfQp9OwphbGlhc2VzLnAyMjQgPSBhbGlhc2VzLnNlY3AyMjRyMTsKYWxpYXNlcy5wMjU2ID0gYWxpYXNlcy5zZWNwMjU2cjEgPSBhbGlhc2VzLnByaW1lMjU2djE7CmFsaWFzZXMucDE5MiA9IGFsaWFzZXMuc2VjcDE5MnIxID0gYWxpYXNlcy5wcmltZTE5MnYxOwphbGlhc2VzLnAzODQgPSBhbGlhc2VzLnNlY3AzODRyMTsKYWxpYXNlcy5wNTIxID0gYWxpYXNlcy5zZWNwNTIxcjE7CgpmdW5j
dGlvbiBFQ0RIKGN1cnZlKSB7CiAgdGhpcy5jdXJ2ZVR5cGUgPSBhbGlhc2VzW2N1cnZlXTsKCiAgaWYgKCF0aGlzLmN1cnZlVHlwZSkgewogICAgdGhpcy5jdXJ2ZVR5cGUgPSB7CiAgICAgIG5hbWU6IGN1cnZlCiAgICB9OwogIH0KCiAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5lYyh0aGlzLmN1cnZlVHlwZS5uYW1lKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwCgogIHRoaXMua2V5cyA9IHZvaWQgMDsKfQoKRUNESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7CiAg
dGhpcy5rZXlzID0gdGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKCk7CiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KGVuYywgZm9ybWF0KTsKfTsKCkVDREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIsIGluZW5jLCBlbmMpIHsKICBpbmVuYyA9IGluZW5jIHx8ICd1dGY4JzsKCiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIob3RoZXIpKSB7CiAgICBvdGhlciA9IG5ldyBCdWZmZXIob3RoZXIsIGluZW5jKTsKICB9CgogIHZhciBvdGhlclB1YiA9IHRoaXMuY3VydmUua2V5RnJvbVB1YmxpYyhvdGhlcikuZ2V0
UHVibGljKCk7CiAgdmFyIG91dCA9IG90aGVyUHViLm11bCh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpKS5nZXRYKCk7CiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKG91dCwgZW5jLCB0aGlzLmN1cnZlVHlwZS5ieXRlTGVuZ3RoKTsKfTsKCkVDREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkgewogIHZhciBrZXkgPSB0aGlzLmtleXMuZ2V0UHVibGljKGZvcm1hdCA9PT0gJ2NvbXByZXNzZWQnLCB0cnVlKTsKCiAgaWYgKGZvcm1hdCA9PT0gJ2h5YnJpZCcpIHsKICAgIGlmIChrZXlba2V5
Lmxlbmd0aCAtIDFdICUgMikgewogICAgICBrZXlbMF0gPSA3OwogICAgfSBlbHNlIHsKICAgICAga2V5WzBdID0gNjsKICAgIH0KICB9CgogIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShrZXksIGVuYyk7Cn07CgpFQ0RILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKGVuYykgewogIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpLCBlbmMpOwp9OwoKRUNESC5wcm90b3R5cGUuc2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKHB1YiwgZW5jKSB7CiAgZW5jID0gZW5jIHx8ICd1
dGY4JzsKCiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkgewogICAgcHViID0gbmV3IEJ1ZmZlcihwdWIsIGVuYyk7CiAgfQoKICB0aGlzLmtleXMuX2ltcG9ydFB1YmxpYyhwdWIpOwoKICByZXR1cm4gdGhpczsKfTsKCkVDREgucHJvdG90eXBlLnNldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAocHJpdiwgZW5jKSB7CiAgZW5jID0gZW5jIHx8ICd1dGY4JzsKCiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHsKICAgIHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYyk7CiAgfQoKICB2YXIgX3ByaXYgPSBuZXcgQk4ocHJp
dik7CgogIF9wcml2ID0gX3ByaXYudG9TdHJpbmcoMTYpOwogIHRoaXMua2V5cyA9IHRoaXMuY3VydmUuZ2VuS2V5UGFpcigpOwoKICB0aGlzLmtleXMuX2ltcG9ydFByaXZhdGUoX3ByaXYpOwoKICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlKGJuLCBlbmMsIGxlbikgewogIGlmICghQXJyYXkuaXNBcnJheShibikpIHsKICAgIGJuID0gYm4udG9BcnJheSgpOwogIH0KCiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4pOwoKICBpZiAobGVuICYmIGJ1Zi5sZW5ndGggPCBsZW4pIHsKICAgIHZhciB6
ZXJvcyA9IG5ldyBCdWZmZXIobGVuIC0gYnVmLmxlbmd0aCk7CiAgICB6ZXJvcy5maWxsKDApOwogICAgYnVmID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIGJ1Zl0pOwogIH0KCiAgaWYgKCFlbmMpIHsKICAgIHJldHVybiBidWY7CiAgfSBlbHNlIHsKICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKTsKICB9Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiYm4uanMiOjIyMSwiYnVmZmVyIjoyMTYsImVsbGlwdGljIjoyNDF9XSwyMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMp
ewphcmd1bWVudHNbNF1bMTgxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImJ1ZmZlciI6MTg1LCJkdXAiOjE4MX1dLDIyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJyk7Cgp2YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJyk7Cgp2YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJyk7Cgp2YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJyk7
CgpmdW5jdGlvbiBIYXNoKGhhc2gpIHsKICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpOwogIHRoaXMuX2hhc2ggPSBoYXNoOwp9Cgppbmhlcml0cyhIYXNoLCBCYXNlKTsKCkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkgewogIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpOwp9OwoKSGFzaC5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLl9oYXNoLmRpZ2VzdCgpOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIYXNoKGFsZykgewogIGFsZyA9IGFs
Zy50b0xvd2VyQ2FzZSgpOwogIGlmIChhbGcgPT09ICdtZDUnKSByZXR1cm4gbmV3IE1ENSgpOwogIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBuZXcgUklQRU1EMTYwKCk7CiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKTsKfTsKCn0seyJjaXBoZXItYmFzZSI6MjE4LCJpbmhlcml0cyI6Mjc4LCJtZDUuanMiOjMyNSwicmlwZW1kMTYwIjozODMsInNoYS5qcyI6Mzg5fV0sMjIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKdmFyIE1E
NSA9IHJlcXVpcmUoJ21kNS5qcycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmZmVyKSB7CiAgcmV0dXJuIG5ldyBNRDUoKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKTsKfTsKCn0seyJtZDUuanMiOjMyNX1dLDIyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgTGVnYWN5ID0gcmVxdWlyZSgnLi9sZWdhY3knKTsKCnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKTsKCnZhciBCdWZmZXIg
PSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKTsKCnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKTsKCnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKTsKCnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpOwoKZnVuY3Rpb24gSG1hYyhhbGcsIGtleSkgewogIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0Jyk7CgogIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykgewogICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KTsKICB9CgogIHZh
ciBibG9ja3NpemUgPSBhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcgPyAxMjggOiA2NDsKICB0aGlzLl9hbGcgPSBhbGc7CiAgdGhpcy5fa2V5ID0ga2V5OwoKICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkgewogICAgdmFyIGhhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZyk7CiAgICBrZXkgPSBoYXNoLnVwZGF0ZShrZXkpLmRpZ2VzdCgpOwogIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkgewogICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5
LCBaRVJPU10sIGJsb2Nrc2l6ZSk7CiAgfQoKICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKTsKICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykgewogICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzY7CiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1QzsKICB9CgogIHRoaXMuX2hhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hh
KGFsZyk7CgogIHRoaXMuX2hhc2gudXBkYXRlKGlwYWQpOwp9Cgppbmhlcml0cyhIbWFjLCBCYXNlKTsKCkhtYWMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkgewogIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpOwp9OwoKSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkgewogIHZhciBoID0gdGhpcy5faGFzaC5kaWdlc3QoKTsKCiAgdmFyIGhhc2ggPSB0aGlzLl9hbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKHRoaXMuX2FsZyk7CiAgcmV0dXJuIGhhc2gudXBkYXRlKHRo
aXMuX29wYWQpLnVwZGF0ZShoKS5kaWdlc3QoKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSG1hYyhhbGcsIGtleSkgewogIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpOwoKICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSB7CiAgICByZXR1cm4gbmV3IEhtYWMoJ3JtZDE2MCcsIGtleSk7CiAgfQoKICBpZiAoYWxnID09PSAnbWQ1JykgewogICAgcmV0dXJuIG5ldyBMZWdhY3kobWQ1LCBrZXkpOwogIH0KCiAgcmV0dXJuIG5ldyBIbWFjKGFsZywga2V5KTsKfTsKCn0seyIu
L2xlZ2FjeSI6MjI1LCJjaXBoZXItYmFzZSI6MjE4LCJjcmVhdGUtaGFzaC9tZDUiOjIyMywiaW5oZXJpdHMiOjI3OCwicmlwZW1kMTYwIjozODMsInNhZmUtYnVmZmVyIjozODQsInNoYS5qcyI6Mzg5fV0sMjI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKTsKCnZhciBaRVJPUyA9
IEJ1ZmZlci5hbGxvYygxMjgpOwp2YXIgYmxvY2tzaXplID0gNjQ7CgpmdW5jdGlvbiBIbWFjKGFsZywga2V5KSB7CiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKTsKCiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7CiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpOwogIH0KCiAgdGhpcy5fYWxnID0gYWxnOwogIHRoaXMuX2tleSA9IGtleTsKCiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHsKICAgIGtleSA9IGFsZyhrZXkpOwogIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkgewogICAga2V5
ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSk7CiAgfQoKICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKTsKICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykgewogICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzY7CiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1QzsKICB9CgogIHRoaXMuX2hhc2ggPSBbaXBhZF07Cn0KCmluaGVyaXRz
KEhtYWMsIEJhc2UpOwoKSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgdGhpcy5faGFzaC5wdXNoKGRhdGEpOwp9OwoKSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkgewogIHZhciBoID0gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQodGhpcy5faGFzaCkpOwoKICByZXR1cm4gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQoW3RoaXMuX29wYWQsIGhdKSk7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IEhtYWM7Cgp9LHsiY2lwaGVyLWJhc2UiOjIxOCwiaW5oZXJpdHMiOjI3OCwic2FmZS1idWZm
ZXIiOjM4NH1dLDIyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmV4cG9ydHMucmFuZG9tQnl0ZXMgPSBleHBvcnRzLnJuZyA9IGV4cG9ydHMucHNldWRvUmFuZG9tQnl0ZXMgPSBleHBvcnRzLnBybmcgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpOwpleHBvcnRzLmNyZWF0ZUhhc2ggPSBleHBvcnRzLkhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpOwpleHBvcnRzLmNyZWF0ZUhtYWMgPSBleHBvcnRzLkhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpOwoKdmFyIGFsZ29zID0g
cmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduL2FsZ29zJyk7Cgp2YXIgYWxnb0tleXMgPSBPYmplY3Qua2V5cyhhbGdvcyk7CnZhciBoYXNoZXMgPSBbJ3NoYTEnLCAnc2hhMjI0JywgJ3NoYTI1NicsICdzaGEzODQnLCAnc2hhNTEyJywgJ21kNScsICdybWQxNjAnXS5jb25jYXQoYWxnb0tleXMpOwoKZXhwb3J0cy5nZXRIYXNoZXMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGhhc2hlczsKfTsKCnZhciBwID0gcmVxdWlyZSgncGJrZGYyJyk7CgpleHBvcnRzLnBia2RmMiA9IHAucGJrZGYyOwpleHBvcnRzLnBia2RmMlN5bmMgPSBw
LnBia2RmMlN5bmM7Cgp2YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1jaXBoZXInKTsKCmV4cG9ydHMuQ2lwaGVyID0gYWVzLkNpcGhlcjsKZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBhZXMuY3JlYXRlQ2lwaGVyOwpleHBvcnRzLkNpcGhlcml2ID0gYWVzLkNpcGhlcml2OwpleHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gYWVzLmNyZWF0ZUNpcGhlcml2OwpleHBvcnRzLkRlY2lwaGVyID0gYWVzLkRlY2lwaGVyOwpleHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gYWVzLmNyZWF0ZURlY2lwaGVyOwpleHBvcnRzLkRlY2lwaGVyaXYg
PSBhZXMuRGVjaXBoZXJpdjsKZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gYWVzLmNyZWF0ZURlY2lwaGVyaXY7CmV4cG9ydHMuZ2V0Q2lwaGVycyA9IGFlcy5nZXRDaXBoZXJzOwpleHBvcnRzLmxpc3RDaXBoZXJzID0gYWVzLmxpc3RDaXBoZXJzOwoKdmFyIGRoID0gcmVxdWlyZSgnZGlmZmllLWhlbGxtYW4nKTsKCmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZGguRGlmZmllSGVsbG1hbkdyb3VwOwpleHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGRoLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cDsKZXhw
b3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZGguZ2V0RGlmZmllSGVsbG1hbjsKZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZGguY3JlYXRlRGlmZmllSGVsbG1hbjsKZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gZGguRGlmZmllSGVsbG1hbjsKCnZhciBzaWduID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduJyk7CgpleHBvcnRzLmNyZWF0ZVNpZ24gPSBzaWduLmNyZWF0ZVNpZ247CmV4cG9ydHMuU2lnbiA9IHNpZ24uU2lnbjsKZXhwb3J0cy5jcmVhdGVWZXJpZnkgPSBzaWduLmNyZWF0ZVZlcmlmeTsKZXhwb3J0cy5WZXJp
ZnkgPSBzaWduLlZlcmlmeTsKZXhwb3J0cy5jcmVhdGVFQ0RIID0gcmVxdWlyZSgnY3JlYXRlLWVjZGgnKTsKCnZhciBwdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgncHVibGljLWVuY3J5cHQnKTsKCmV4cG9ydHMucHVibGljRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRW5jcnlwdDsKZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZUVuY3J5cHQ7CmV4cG9ydHMucHVibGljRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRGVjcnlwdDsKZXhwb3J0cy5wcml2YXRlRGVjcnlwdCA9IHB1
YmxpY0VuY3J5cHQucHJpdmF0ZURlY3J5cHQ7IC8vIHRoZSBsZWFzdCBJIGNhbiBkbyBpcyBtYWtlIGVycm9yIG1lc3NhZ2VzIGZvciB0aGUgcmVzdCBvZiB0aGUgbm9kZS5qcy9jcnlwdG8gYXBpLgovLyA7WwovLyAgICdjcmVhdGVDcmVkZW50aWFscycKLy8gXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7Ci8vICAgZXhwb3J0c1tuYW1lXSA9IGZ1bmN0aW9uICgpIHsKLy8gICAgIHRocm93IG5ldyBFcnJvcihbCi8vICAgICAgICdzb3JyeSwgJyArIG5hbWUgKyAnIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnLAovLyAgICAgICAn
d2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLAovLyAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0by1icm93c2VyaWZ5L2NyeXB0by1icm93c2VyaWZ5JwovLyAgICAgXS5qb2luKCdcbicpKQovLyAgIH0KLy8gfSkKCnZhciByZiA9IHJlcXVpcmUoJ3JhbmRvbWZpbGwnKTsKCmV4cG9ydHMucmFuZG9tRmlsbCA9IHJmLnJhbmRvbUZpbGw7CmV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSByZi5yYW5kb21GaWxsU3luYzsKCmV4cG9ydHMuY3JlYXRlQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAoKSB7CiAgdGhyb3cgbmV3IEVycm9y
KFsnc29ycnksIGNyZWF0ZUNyZWRlbnRpYWxzIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnLCAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLCAnaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0by1icm93c2VyaWZ5L2NyeXB0by1icm93c2VyaWZ5J10uam9pbignXG4nKSk7Cn07CgpleHBvcnRzLmNvbnN0YW50cyA9IHsKICAnREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSc6IDIsCiAgJ0RIX0NIRUNLX1BfTk9UX1BSSU1FJzogMSwKICAnREhfVU5BQkxFX1RPX0NIRUNLX0dFTkVSQVRPUic6IDQsCiAgJ0RIX05PVF9TVUlUQUJMRV9HRU5F
UkFUT1InOiA4LAogICdOUE5fRU5BQkxFRCc6IDEsCiAgJ0FMUE5fRU5BQkxFRCc6IDEsCiAgJ1JTQV9QS0NTMV9QQURESU5HJzogMSwKICAnUlNBX1NTTFYyM19QQURESU5HJzogMiwKICAnUlNBX05PX1BBRERJTkcnOiAzLAogICdSU0FfUEtDUzFfT0FFUF9QQURESU5HJzogNCwKICAnUlNBX1g5MzFfUEFERElORyc6IDUsCiAgJ1JTQV9QS0NTMV9QU1NfUEFERElORyc6IDYsCiAgJ1BPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCc6IDIsCiAgJ1BPSU5UX0NPTlZFUlNJT05fVU5DT01QUkVTU0VEJzogNCwKICAnUE9JTlRfQ09O
VkVSU0lPTl9IWUJSSUQnOiA2Cn07Cgp9LHsiYnJvd3NlcmlmeS1jaXBoZXIiOjIwMywiYnJvd3NlcmlmeS1zaWduIjoyMTEsImJyb3dzZXJpZnktc2lnbi9hbGdvcyI6MjA4LCJjcmVhdGUtZWNkaCI6MjIwLCJjcmVhdGUtaGFzaCI6MjIyLCJjcmVhdGUtaG1hYyI6MjI0LCJkaWZmaWUtaGVsbG1hbiI6MjM2LCJwYmtkZjIiOjM1MSwicHVibGljLWVuY3J5cHQiOjM1OSwicmFuZG9tYnl0ZXMiOjM2NiwicmFuZG9tZmlsbCI6MzY3fV0sMjI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoK
ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYm
IG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgohZnVuY3Rpb24gKHQsIGUpIHsKICAib2JqZWN0IiA9PSAodHlwZW9mIGV4cG9ydHMgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKGV4cG9ydHMpKSAmJiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgbW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgPSBlKCkgOiAiZnVuY3Rpb24iID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShlKSA6IHQuZGF5anMg
PSBlKCk7Cn0odm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwoKICB2YXIgdCA9ICJtaWxsaXNlY29uZCIsCiAgICAgIGUgPSAic2Vjb25kIiwKICAgICAgbiA9ICJtaW51dGUiLAogICAgICByID0gImhvdXIiLAogICAgICBpID0gImRheSIsCiAgICAgIHMgPSAid2VlayIsCiAgICAgIHUgPSAibW9udGgiLAogICAgICBhID0gInF1YXJ0ZXIiLAogICAgICBvID0gInllYXIiLAogICAgICBmID0gImRhdGUiLAogICAgICBoID0gL14oXGR7NH0pWy0vXT8oXGR7MSwyfSk/Wy0vXT8oXGR7MCwyfSlbXjAtOV0qKFxk
ezEsMn0pPzo/KFxkezEsMn0pPzo/KFxkezEsMn0pPy4/KFxkKyk/JC8sCiAgICAgIGMgPSAvXFsoW15cXV0rKV18WXsyLDR9fE17MSw0fXxEezEsMn18ZHsxLDR9fEh7MSwyfXxoezEsMn18YXxBfG17MSwyfXxzezEsMn18WnsxLDJ9fFNTUy9nLAogICAgICBkID0gZnVuY3Rpb24gZCh0LCBlLCBuKSB7CiAgICB2YXIgciA9IFN0cmluZyh0KTsKICAgIHJldHVybiAhciB8fCByLmxlbmd0aCA+PSBlID8gdCA6ICIiICsgQXJyYXkoZSArIDEgLSByLmxlbmd0aCkuam9pbihuKSArIHQ7CiAgfSwKICAgICAgJCA9IHsKICAgIHM6IGQs
CiAgICB6OiBmdW5jdGlvbiB6KHQpIHsKICAgICAgdmFyIGUgPSAtdC51dGNPZmZzZXQoKSwKICAgICAgICAgIG4gPSBNYXRoLmFicyhlKSwKICAgICAgICAgIHIgPSBNYXRoLmZsb29yKG4gLyA2MCksCiAgICAgICAgICBpID0gbiAlIDYwOwogICAgICByZXR1cm4gKGUgPD0gMCA/ICIrIiA6ICItIikgKyBkKHIsIDIsICIwIikgKyAiOiIgKyBkKGksIDIsICIwIik7CiAgICB9LAogICAgbTogZnVuY3Rpb24gdChlLCBuKSB7CiAgICAgIGlmIChlLmRhdGUoKSA8IG4uZGF0ZSgpKSByZXR1cm4gLXQobiwgZSk7CiAgICAgIHZhciBy
ID0gMTIgKiAobi55ZWFyKCkgLSBlLnllYXIoKSkgKyAobi5tb250aCgpIC0gZS5tb250aCgpKSwKICAgICAgICAgIGkgPSBlLmFkZChyLCB1KSwKICAgICAgICAgIHMgPSBuIC0gaSA8IDAsCiAgICAgICAgICBhID0gZS5hZGQociArIChzID8gLTEgOiAxKSwgdSk7CiAgICAgIHJldHVybiArKC0ociArIChuIC0gaSkgLyAocyA/IGkgLSBhIDogYSAtIGkpKSB8fCAwKTsKICAgIH0sCiAgICBhOiBmdW5jdGlvbiBhKHQpIHsKICAgICAgcmV0dXJuIHQgPCAwID8gTWF0aC5jZWlsKHQpIHx8IDAgOiBNYXRoLmZsb29yKHQpOwogICAg
fSwKICAgIHA6IGZ1bmN0aW9uIHAoaCkgewogICAgICByZXR1cm4gewogICAgICAgIE06IHUsCiAgICAgICAgeTogbywKICAgICAgICB3OiBzLAogICAgICAgIGQ6IGksCiAgICAgICAgRDogZiwKICAgICAgICBoOiByLAogICAgICAgIG06IG4sCiAgICAgICAgczogZSwKICAgICAgICBtczogdCwKICAgICAgICBROiBhCiAgICAgIH1baF0gfHwgU3RyaW5nKGggfHwgIiIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvcyQvLCAiIik7CiAgICB9LAogICAgdTogZnVuY3Rpb24gdSh0KSB7CiAgICAgIHJldHVybiB2b2lkIDAgPT09IHQ7
CiAgICB9CiAgfSwKICAgICAgbCA9IHsKICAgIG5hbWU6ICJlbiIsCiAgICB3ZWVrZGF5czogIlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Ii5zcGxpdCgiXyIpLAogICAgbW9udGhzOiAiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlciIuc3BsaXQoIl8iKQogIH0sCiAgICAgIHkgPSAiZW4iLAogICAgICBNID0ge307CgogIE1beV0gPSBsOwoKICB2YXIgbSA9IGZ1bmN0
aW9uIG0odCkgewogICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBTOwogIH0sCiAgICAgIEQgPSBmdW5jdGlvbiBEKHQsIGUsIG4pIHsKICAgIHZhciByOwogICAgaWYgKCF0KSByZXR1cm4geTsKICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgdCkgTVt0XSAmJiAociA9IHQpLCBlICYmIChNW3RdID0gZSwgciA9IHQpO2Vsc2UgewogICAgICB2YXIgaSA9IHQubmFtZTsKICAgICAgTVtpXSA9IHQsIHIgPSBpOwogICAgfQogICAgcmV0dXJuICFuICYmIHIgJiYgKHkgPSByKSwgciB8fCAhbiAmJiB5OwogIH0sCiAgICAgIHYgPSBmdW5j
dGlvbiB2KHQsIGUpIHsKICAgIGlmIChtKHQpKSByZXR1cm4gdC5jbG9uZSgpOwogICAgdmFyIG4gPSAib2JqZWN0IiA9PSBfdHlwZW9mKGUpID8gZSA6IHt9OwogICAgcmV0dXJuIG4uZGF0ZSA9IHQsIG4uYXJncyA9IGFyZ3VtZW50cywgbmV3IFMobik7CiAgfSwKICAgICAgZyA9ICQ7CgogIGcubCA9IEQsIGcuaSA9IG0sIGcudyA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICByZXR1cm4gdih0LCB7CiAgICAgIGxvY2FsZTogZS4kTCwKICAgICAgdXRjOiBlLiR1LAogICAgICAkb2Zmc2V0OiBlLiRvZmZzZXQKICAgIH0pOwogIH07
CgogIHZhciBTID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gZCh0KSB7CiAgICAgIHRoaXMuJEwgPSB0aGlzLiRMIHx8IEQodC5sb2NhbGUsIG51bGwsICEwKSwgdGhpcy5wYXJzZSh0KTsKICAgIH0KCiAgICB2YXIgJCA9IGQucHJvdG90eXBlOwogICAgcmV0dXJuICQucGFyc2UgPSBmdW5jdGlvbiAodCkgewogICAgICB0aGlzLiRkID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZSA9IHQuZGF0ZSwKICAgICAgICAgICAgbiA9IHQudXRjOwogICAgICAgIGlmIChudWxsID09PSBlKSByZXR1cm4gbmV3IERhdGUoTmFO
KTsKICAgICAgICBpZiAoZy51KGUpKSByZXR1cm4gbmV3IERhdGUoKTsKICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIERhdGUpIHJldHVybiBuZXcgRGF0ZShlKTsKCiAgICAgICAgaWYgKCJzdHJpbmciID09IHR5cGVvZiBlICYmICEvWiQvaS50ZXN0KGUpKSB7CiAgICAgICAgICB2YXIgciA9IGUubWF0Y2goaCk7CgogICAgICAgICAgaWYgKHIpIHsKICAgICAgICAgICAgdmFyIGkgPSByWzJdIC0gMSB8fCAwLAogICAgICAgICAgICAgICAgcyA9IChyWzddIHx8ICIwIikuc3Vic3RyaW5nKDAsIDMpOwogICAgICAgICAgICByZXR1
cm4gbiA/IG5ldyBEYXRlKERhdGUuVVRDKHJbMV0sIGksIHJbM10gfHwgMSwgcls0XSB8fCAwLCByWzVdIHx8IDAsIHJbNl0gfHwgMCwgcykpIDogbmV3IERhdGUoclsxXSwgaSwgclszXSB8fCAxLCByWzRdIHx8IDAsIHJbNV0gfHwgMCwgcls2XSB8fCAwLCBzKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBuZXcgRGF0ZShlKTsKICAgICAgfSh0KSwgdGhpcy5pbml0KCk7CiAgICB9LCAkLmluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciB0ID0gdGhpcy4kZDsKICAgICAgdGhpcy4keSA9IHQuZ2V0
RnVsbFllYXIoKSwgdGhpcy4kTSA9IHQuZ2V0TW9udGgoKSwgdGhpcy4kRCA9IHQuZ2V0RGF0ZSgpLCB0aGlzLiRXID0gdC5nZXREYXkoKSwgdGhpcy4kSCA9IHQuZ2V0SG91cnMoKSwgdGhpcy4kbSA9IHQuZ2V0TWludXRlcygpLCB0aGlzLiRzID0gdC5nZXRTZWNvbmRzKCksIHRoaXMuJG1zID0gdC5nZXRNaWxsaXNlY29uZHMoKTsKICAgIH0sICQuJHV0aWxzID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZzsKICAgIH0sICQuaXNWYWxpZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICEoIkludmFsaWQgRGF0ZSIg
PT09IHRoaXMuJGQudG9TdHJpbmcoKSk7CiAgICB9LCAkLmlzU2FtZSA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgIHZhciBuID0gdih0KTsKICAgICAgcmV0dXJuIHRoaXMuc3RhcnRPZihlKSA8PSBuICYmIG4gPD0gdGhpcy5lbmRPZihlKTsKICAgIH0sICQuaXNBZnRlciA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgIHJldHVybiB2KHQpIDwgdGhpcy5zdGFydE9mKGUpOwogICAgfSwgJC5pc0JlZm9yZSA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgIHJldHVybiB0aGlzLmVuZE9mKGUpIDwgdih0KTsKICAgIH0sICQuJGcgPSBm
dW5jdGlvbiAodCwgZSwgbikgewogICAgICByZXR1cm4gZy51KHQpID8gdGhpc1tlXSA6IHRoaXMuc2V0KG4sIHQpOwogICAgfSwgJC51bml4ID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDFlMyk7CiAgICB9LCAkLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLiRkLmdldFRpbWUoKTsKICAgIH0sICQuc3RhcnRPZiA9IGZ1bmN0aW9uICh0LCBhKSB7CiAgICAgIHZhciBoID0gdGhpcywKICAgICAgICAgIGMgPSAhIWcudShhKSB8fCBhLAogICAg
ICAgICAgZCA9IGcucCh0KSwKICAgICAgICAgICQgPSBmdW5jdGlvbiAkKHQsIGUpIHsKICAgICAgICB2YXIgbiA9IGcudyhoLiR1ID8gRGF0ZS5VVEMoaC4keSwgZSwgdCkgOiBuZXcgRGF0ZShoLiR5LCBlLCB0KSwgaCk7CiAgICAgICAgcmV0dXJuIGMgPyBuIDogbi5lbmRPZihpKTsKICAgICAgfSwKICAgICAgICAgIGwgPSBmdW5jdGlvbiBsKHQsIGUpIHsKICAgICAgICByZXR1cm4gZy53KGgudG9EYXRlKClbdF0uYXBwbHkoaC50b0RhdGUoInMiKSwgKGMgPyBbMCwgMCwgMCwgMF0gOiBbMjMsIDU5LCA1OSwgOTk5XSkuc2xp
Y2UoZSkpLCBoKTsKICAgICAgfSwKICAgICAgICAgIHkgPSB0aGlzLiRXLAogICAgICAgICAgTSA9IHRoaXMuJE0sCiAgICAgICAgICBtID0gdGhpcy4kRCwKICAgICAgICAgIEQgPSAic2V0IiArICh0aGlzLiR1ID8gIlVUQyIgOiAiIik7CgogICAgICBzd2l0Y2ggKGQpIHsKICAgICAgICBjYXNlIG86CiAgICAgICAgICByZXR1cm4gYyA/ICQoMSwgMCkgOiAkKDMxLCAxMSk7CgogICAgICAgIGNhc2UgdToKICAgICAgICAgIHJldHVybiBjID8gJCgxLCBNKSA6ICQoMCwgTSArIDEpOwoKICAgICAgICBjYXNlIHM6CiAgICAgICAg
ICB2YXIgdiA9IHRoaXMuJGxvY2FsZSgpLndlZWtTdGFydCB8fCAwLAogICAgICAgICAgICAgIFMgPSAoeSA8IHYgPyB5ICsgNyA6IHkpIC0gdjsKICAgICAgICAgIHJldHVybiAkKGMgPyBtIC0gUyA6IG0gKyAoNiAtIFMpLCBNKTsKCiAgICAgICAgY2FzZSBpOgogICAgICAgIGNhc2UgZjoKICAgICAgICAgIHJldHVybiBsKEQgKyAiSG91cnMiLCAwKTsKCiAgICAgICAgY2FzZSByOgogICAgICAgICAgcmV0dXJuIGwoRCArICJNaW51dGVzIiwgMSk7CgogICAgICAgIGNhc2UgbjoKICAgICAgICAgIHJldHVybiBsKEQgKyAiU2Vj
b25kcyIsIDIpOwoKICAgICAgICBjYXNlIGU6CiAgICAgICAgICByZXR1cm4gbChEICsgIk1pbGxpc2Vjb25kcyIsIDMpOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKTsKICAgICAgfQogICAgfSwgJC5lbmRPZiA9IGZ1bmN0aW9uICh0KSB7CiAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2YodCwgITEpOwogICAgfSwgJC4kc2V0ID0gZnVuY3Rpb24gKHMsIGEpIHsKICAgICAgdmFyIGgsCiAgICAgICAgICBjID0gZy5wKHMpLAogICAgICAgICAgZCA9ICJzZXQiICsgKHRoaXMuJHUgPyAiVVRD
IiA6ICIiKSwKICAgICAgICAgICQgPSAoaCA9IHt9LCBoW2ldID0gZCArICJEYXRlIiwgaFtmXSA9IGQgKyAiRGF0ZSIsIGhbdV0gPSBkICsgIk1vbnRoIiwgaFtvXSA9IGQgKyAiRnVsbFllYXIiLCBoW3JdID0gZCArICJIb3VycyIsIGhbbl0gPSBkICsgIk1pbnV0ZXMiLCBoW2VdID0gZCArICJTZWNvbmRzIiwgaFt0XSA9IGQgKyAiTWlsbGlzZWNvbmRzIiwgaClbY10sCiAgICAgICAgICBsID0gYyA9PT0gaSA/IHRoaXMuJEQgKyAoYSAtIHRoaXMuJFcpIDogYTsKCiAgICAgIGlmIChjID09PSB1IHx8IGMgPT09IG8pIHsKICAg
ICAgICB2YXIgeSA9IHRoaXMuY2xvbmUoKS5zZXQoZiwgMSk7CiAgICAgICAgeS4kZFskXShsKSwgeS5pbml0KCksIHRoaXMuJGQgPSB5LnNldChmLCBNYXRoLm1pbih0aGlzLiRELCB5LmRheXNJbk1vbnRoKCkpKS4kZDsKICAgICAgfSBlbHNlICQgJiYgdGhpcy4kZFskXShsKTsKCiAgICAgIHJldHVybiB0aGlzLmluaXQoKSwgdGhpczsKICAgIH0sICQuc2V0ID0gZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS4kc2V0KHQsIGUpOwogICAgfSwgJC5nZXQgPSBmdW5jdGlvbiAodCkgewogICAgICBy
ZXR1cm4gdGhpc1tnLnAodCldKCk7CiAgICB9LCAkLmFkZCA9IGZ1bmN0aW9uICh0LCBhKSB7CiAgICAgIHZhciBmLAogICAgICAgICAgaCA9IHRoaXM7CiAgICAgIHQgPSBOdW1iZXIodCk7CgogICAgICB2YXIgYyA9IGcucChhKSwKICAgICAgICAgIGQgPSBmdW5jdGlvbiBkKGUpIHsKICAgICAgICB2YXIgbiA9IHYoaCk7CiAgICAgICAgcmV0dXJuIGcudyhuLmRhdGUobi5kYXRlKCkgKyBNYXRoLnJvdW5kKGUgKiB0KSksIGgpOwogICAgICB9OwoKICAgICAgaWYgKGMgPT09IHUpIHJldHVybiB0aGlzLnNldCh1LCB0aGlzLiRN
ICsgdCk7CiAgICAgIGlmIChjID09PSBvKSByZXR1cm4gdGhpcy5zZXQobywgdGhpcy4keSArIHQpOwogICAgICBpZiAoYyA9PT0gaSkgcmV0dXJuIGQoMSk7CiAgICAgIGlmIChjID09PSBzKSByZXR1cm4gZCg3KTsKICAgICAgdmFyICQgPSAoZiA9IHt9LCBmW25dID0gNmU0LCBmW3JdID0gMzZlNSwgZltlXSA9IDFlMywgZilbY10gfHwgMSwKICAgICAgICAgIGwgPSB0aGlzLiRkLmdldFRpbWUoKSArIHQgKiAkOwogICAgICByZXR1cm4gZy53KGwsIHRoaXMpOwogICAgfSwgJC5zdWJ0cmFjdCA9IGZ1bmN0aW9uICh0LCBlKSB7
CiAgICAgIHJldHVybiB0aGlzLmFkZCgtMSAqIHQsIGUpOwogICAgfSwgJC5mb3JtYXQgPSBmdW5jdGlvbiAodCkgewogICAgICB2YXIgZSA9IHRoaXM7CiAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHJldHVybiAiSW52YWxpZCBEYXRlIjsKCiAgICAgIHZhciBuID0gdCB8fCAiWVlZWS1NTS1ERFRISDptbTpzc1oiLAogICAgICAgICAgciA9IGcueih0aGlzKSwKICAgICAgICAgIGkgPSB0aGlzLiRsb2NhbGUoKSwKICAgICAgICAgIHMgPSB0aGlzLiRILAogICAgICAgICAgdSA9IHRoaXMuJG0sCiAgICAgICAgICBhID0gdGhp
cy4kTSwKICAgICAgICAgIG8gPSBpLndlZWtkYXlzLAogICAgICAgICAgZiA9IGkubW9udGhzLAogICAgICAgICAgaCA9IGZ1bmN0aW9uIGgodCwgciwgaSwgcykgewogICAgICAgIHJldHVybiB0ICYmICh0W3JdIHx8IHQoZSwgbikpIHx8IGlbcl0uc3Vic3RyKDAsIHMpOwogICAgICB9LAogICAgICAgICAgZCA9IGZ1bmN0aW9uIGQodCkgewogICAgICAgIHJldHVybiBnLnMocyAlIDEyIHx8IDEyLCB0LCAiMCIpOwogICAgICB9LAogICAgICAgICAgJCA9IGkubWVyaWRpZW0gfHwgZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAg
ICB2YXIgciA9IHQgPCAxMiA/ICJBTSIgOiAiUE0iOwogICAgICAgIHJldHVybiBuID8gci50b0xvd2VyQ2FzZSgpIDogcjsKICAgICAgfSwKICAgICAgICAgIGwgPSB7CiAgICAgICAgWVk6IFN0cmluZyh0aGlzLiR5KS5zbGljZSgtMiksCiAgICAgICAgWVlZWTogdGhpcy4keSwKICAgICAgICBNOiBhICsgMSwKICAgICAgICBNTTogZy5zKGEgKyAxLCAyLCAiMCIpLAogICAgICAgIE1NTTogaChpLm1vbnRoc1Nob3J0LCBhLCBmLCAzKSwKICAgICAgICBNTU1NOiBoKGYsIGEpLAogICAgICAgIEQ6IHRoaXMuJEQsCiAgICAgICAg
REQ6IGcucyh0aGlzLiRELCAyLCAiMCIpLAogICAgICAgIGQ6IFN0cmluZyh0aGlzLiRXKSwKICAgICAgICBkZDogaChpLndlZWtkYXlzTWluLCB0aGlzLiRXLCBvLCAyKSwKICAgICAgICBkZGQ6IGgoaS53ZWVrZGF5c1Nob3J0LCB0aGlzLiRXLCBvLCAzKSwKICAgICAgICBkZGRkOiBvW3RoaXMuJFddLAogICAgICAgIEg6IFN0cmluZyhzKSwKICAgICAgICBISDogZy5zKHMsIDIsICIwIiksCiAgICAgICAgaDogZCgxKSwKICAgICAgICBoaDogZCgyKSwKICAgICAgICBhOiAkKHMsIHUsICEwKSwKICAgICAgICBBOiAkKHMsIHUs
ICExKSwKICAgICAgICBtOiBTdHJpbmcodSksCiAgICAgICAgbW06IGcucyh1LCAyLCAiMCIpLAogICAgICAgIHM6IFN0cmluZyh0aGlzLiRzKSwKICAgICAgICBzczogZy5zKHRoaXMuJHMsIDIsICIwIiksCiAgICAgICAgU1NTOiBnLnModGhpcy4kbXMsIDMsICIwIiksCiAgICAgICAgWjogcgogICAgICB9OwoKICAgICAgcmV0dXJuIG4ucmVwbGFjZShjLCBmdW5jdGlvbiAodCwgZSkgewogICAgICAgIHJldHVybiBlIHx8IGxbdF0gfHwgci5yZXBsYWNlKCI6IiwgIiIpOwogICAgICB9KTsKICAgIH0sICQudXRjT2Zmc2V0ID0g
ZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gMTUgKiAtTWF0aC5yb3VuZCh0aGlzLiRkLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSk7CiAgICB9LCAkLmRpZmYgPSBmdW5jdGlvbiAodCwgZiwgaCkgewogICAgICB2YXIgYywKICAgICAgICAgIGQgPSBnLnAoZiksCiAgICAgICAgICAkID0gdih0KSwKICAgICAgICAgIGwgPSA2ZTQgKiAoJC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpLAogICAgICAgICAgeSA9IHRoaXMgLSAkLAogICAgICAgICAgTSA9IGcubSh0aGlzLCAkKTsKICAgICAgcmV0dXJuIE0gPSAoYyA9
IHt9LCBjW29dID0gTSAvIDEyLCBjW3VdID0gTSwgY1thXSA9IE0gLyAzLCBjW3NdID0gKHkgLSBsKSAvIDYwNDhlNSwgY1tpXSA9ICh5IC0gbCkgLyA4NjRlNSwgY1tyXSA9IHkgLyAzNmU1LCBjW25dID0geSAvIDZlNCwgY1tlXSA9IHkgLyAxZTMsIGMpW2RdIHx8IHksIGggPyBNIDogZy5hKE0pOwogICAgfSwgJC5kYXlzSW5Nb250aCA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHRoaXMuZW5kT2YodSkuJEQ7CiAgICB9LCAkLiRsb2NhbGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBNW3RoaXMuJExdOwogICAg
fSwgJC5sb2NhbGUgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICBpZiAoIXQpIHJldHVybiB0aGlzLiRMOwogICAgICB2YXIgbiA9IHRoaXMuY2xvbmUoKSwKICAgICAgICAgIHIgPSBEKHQsIGUsICEwKTsKICAgICAgcmV0dXJuIHIgJiYgKG4uJEwgPSByKSwgbjsKICAgIH0sICQuY2xvbmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBnLncodGhpcy4kZCwgdGhpcyk7CiAgICB9LCAkLnRvRGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTsKICAgIH0sICQudG9KU09O
ID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsOwogICAgfSwgJC50b0lTT1N0cmluZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHRoaXMuJGQudG9JU09TdHJpbmcoKTsKICAgIH0sICQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLiRkLnRvVVRDU3RyaW5nKCk7CiAgICB9LCBkOwogIH0oKSwKICAgICAgcCA9IFMucHJvdG90eXBlOwoKICByZXR1cm4gdi5wcm90b3R5cGUgPSBwLCBbWyIkbXMiLCB0XSwgWyIk
cyIsIGVdLCBbIiRtIiwgbl0sIFsiJEgiLCByXSwgWyIkVyIsIGldLCBbIiRNIiwgdV0sIFsiJHkiLCBvXSwgWyIkRCIsIGZdXS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7CiAgICBwW3RbMV1dID0gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHRoaXMuJGcoZSwgdFswXSwgdFsxXSk7CiAgICB9OwogIH0pLCB2LmV4dGVuZCA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICByZXR1cm4gdChlLCBTLCB2KSwgdjsKICB9LCB2LmxvY2FsZSA9IEQsIHYuaXNEYXlqcyA9IG0sIHYudW5peCA9IGZ1bmN0aW9uICh0KSB7CiAgICByZXR1cm4g
digxZTMgKiB0KTsKICB9LCB2LmVuID0gTVt5XSwgdi5McyA9IE0sIHY7Cn0pOwoKfSx7fV0sMjI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBf
dHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgohZnVuY3Rpb24gKHQsIGUpIHsKICAib2JqZWN0IiA9PSAodHlwZW9mIGV4cG9ydHMgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKGV4cG9ydHMpKSAmJiAidW5kZWZpbmVk
IiAhPSB0eXBlb2YgbW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgPSBlKCkgOiAiZnVuY3Rpb24iID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShlKSA6IHQuZGF5anNfcGx1Z2luX2N1c3RvbVBhcnNlRm9ybWF0ID0gZSgpOwp9KHZvaWQgMCwgZnVuY3Rpb24gKCkgewogICJ1c2Ugc3RyaWN0IjsKCiAgdmFyIHQsCiAgICAgIGUgPSAvKFxbW15bXSpcXSl8KFstOi8uKClcc10rKXwoQXxhfFlZWVl8WVk/fE1NP00/TT98RG98REQ/fGhoP3xISD98bW0/fHNzP3xTezEsM318enxaWj8pL2csCiAgICAgIG4gPSAv
XGRcZC8sCiAgICAgIHIgPSAvXGRcZD8vLAogICAgICBvID0gL1xkKlteXHNcZC06LygpXSsvOwoKICB2YXIgaSA9IGZ1bmN0aW9uIGkodCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHRoaXNbdF0gPSArZTsKICAgIH07CiAgfSwKICAgICAgcyA9IFsvWystXVxkXGQ6P1xkXGQvLCBmdW5jdGlvbiAodCkgewogICAgdmFyIGUsIG47CiAgICAodGhpcy56b25lIHx8ICh0aGlzLnpvbmUgPSB7fSkpLm9mZnNldCA9IChlID0gdC5tYXRjaCgvKFsrLV18XGRcZCkvZyksIDAgPT09IChuID0gNjAgKiBlWzFdICsgK2Vb
Ml0pID8gMCA6ICIrIiA9PT0gZVswXSA/IC1uIDogbik7CiAgfV0sCiAgICAgIGEgPSBmdW5jdGlvbiBhKGUpIHsKICAgIHZhciBuID0gdFtlXTsKICAgIHJldHVybiBuICYmIChuLmluZGV4T2YgPyBuIDogbi5zLmNvbmNhdChuLmYpKTsKICB9LAogICAgICBoID0gewogICAgQTogWy9bQVBdTS8sIGZ1bmN0aW9uICh0KSB7CiAgICAgIHRoaXMuYWZ0ZXJub29uID0gIlBNIiA9PT0gdDsKICAgIH1dLAogICAgYTogWy9bYXBdbS8sIGZ1bmN0aW9uICh0KSB7CiAgICAgIHRoaXMuYWZ0ZXJub29uID0gInBtIiA9PT0gdDsKICAgIH1d
LAogICAgUzogWy9cZC8sIGZ1bmN0aW9uICh0KSB7CiAgICAgIHRoaXMubWlsbGlzZWNvbmRzID0gMTAwICogK3Q7CiAgICB9XSwKICAgIFNTOiBbbiwgZnVuY3Rpb24gKHQpIHsKICAgICAgdGhpcy5taWxsaXNlY29uZHMgPSAxMCAqICt0OwogICAgfV0sCiAgICBTU1M6IFsvXGR7M30vLCBmdW5jdGlvbiAodCkgewogICAgICB0aGlzLm1pbGxpc2Vjb25kcyA9ICt0OwogICAgfV0sCiAgICBzOiBbciwgaSgic2Vjb25kcyIpXSwKICAgIHNzOiBbciwgaSgic2Vjb25kcyIpXSwKICAgIG06IFtyLCBpKCJtaW51dGVzIildLAogICAg
bW06IFtyLCBpKCJtaW51dGVzIildLAogICAgSDogW3IsIGkoImhvdXJzIildLAogICAgaDogW3IsIGkoImhvdXJzIildLAogICAgSEg6IFtyLCBpKCJob3VycyIpXSwKICAgIGhoOiBbciwgaSgiaG91cnMiKV0sCiAgICBEOiBbciwgaSgiZGF5IildLAogICAgREQ6IFtuLCBpKCJkYXkiKV0sCiAgICBEbzogW28sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciBuID0gdC5vcmRpbmFsLAogICAgICAgICAgciA9IGUubWF0Y2goL1xkKy8pOwogICAgICBpZiAodGhpcy5kYXkgPSByWzBdLCBuKSBmb3IgKHZhciBvID0gMTsgbyA8PSAz
MTsgbyArPSAxKSB7CiAgICAgICAgbihvKS5yZXBsYWNlKC9cW3xcXS9nLCAiIikgPT09IGUgJiYgKHRoaXMuZGF5ID0gbyk7CiAgICAgIH0KICAgIH1dLAogICAgTTogW3IsIGkoIm1vbnRoIildLAogICAgTU06IFtuLCBpKCJtb250aCIpXSwKICAgIE1NTTogW28sIGZ1bmN0aW9uICh0KSB7CiAgICAgIHZhciBlID0gYSgibW9udGhzIiksCiAgICAgICAgICBuID0gKGEoIm1vbnRoc1Nob3J0IikgfHwgZS5tYXAoZnVuY3Rpb24gKHQpIHsKICAgICAgICByZXR1cm4gdC5zdWJzdHIoMCwgMyk7CiAgICAgIH0pKS5pbmRleE9mKHQp
ICsgMTsKICAgICAgaWYgKG4gPCAxKSB0aHJvdyBuZXcgRXJyb3IoKTsKICAgICAgdGhpcy5tb250aCA9IG4gJSAxMiB8fCBuOwogICAgfV0sCiAgICBNTU1NOiBbbywgZnVuY3Rpb24gKHQpIHsKICAgICAgdmFyIGUgPSBhKCJtb250aHMiKS5pbmRleE9mKHQpICsgMTsKICAgICAgaWYgKGUgPCAxKSB0aHJvdyBuZXcgRXJyb3IoKTsKICAgICAgdGhpcy5tb250aCA9IGUgJSAxMiB8fCBlOwogICAgfV0sCiAgICBZOiBbL1srLV0/XGQrLywgaSgieWVhciIpXSwKICAgIFlZOiBbbiwgZnVuY3Rpb24gKHQpIHsKICAgICAgdCA9ICt0
LCB0aGlzLnllYXIgPSB0ICsgKHQgPiA2OCA/IDE5MDAgOiAyZTMpOwogICAgfV0sCiAgICBZWVlZOiBbL1xkezR9LywgaSgieWVhciIpXSwKICAgIFo6IHMsCiAgICBaWjogcwogIH07CgogIHZhciBmID0gZnVuY3Rpb24gZih0LCBuLCByKSB7CiAgICB0cnkgewogICAgICB2YXIgbyA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgZm9yICh2YXIgbiA9IHQubWF0Y2goZSksIHIgPSBuLmxlbmd0aCwgbyA9IDA7IG8gPCByOyBvICs9IDEpIHsKICAgICAgICAgIHZhciBpID0gbltvXSwKICAgICAgICAgICAgICBzID0gaFtpXSwKICAg
ICAgICAgICAgICBhID0gcyAmJiBzWzBdLAogICAgICAgICAgICAgIGYgPSBzICYmIHNbMV07CiAgICAgICAgICBuW29dID0gZiA/IHsKICAgICAgICAgICAgcmVnZXg6IGEsCiAgICAgICAgICAgIHBhcnNlcjogZgogICAgICAgICAgfSA6IGkucmVwbGFjZSgvXlxbfFxdJC9nLCAiIik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIGZvciAodmFyIGUgPSB7fSwgbyA9IDAsIGkgPSAwOyBvIDwgcjsgbyArPSAxKSB7CiAgICAgICAgICAgIHZhciBzID0gbltvXTsKICAgICAgICAgICAg
aWYgKCJzdHJpbmciID09IHR5cGVvZiBzKSBpICs9IHMubGVuZ3RoO2Vsc2UgewogICAgICAgICAgICAgIHZhciBhID0gcy5yZWdleCwKICAgICAgICAgICAgICAgICAgaCA9IHMucGFyc2VyLAogICAgICAgICAgICAgICAgICBmID0gdC5zdWJzdHIoaSksCiAgICAgICAgICAgICAgICAgIHUgPSBhLmV4ZWMoZilbMF07CiAgICAgICAgICAgICAgaC5jYWxsKGUsIHUpLCB0ID0gdC5yZXBsYWNlKHUsICIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodCkgewogICAgICAgICAg
ICB2YXIgZSA9IHQuYWZ0ZXJub29uOwoKICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZSkgewogICAgICAgICAgICAgIHZhciBuID0gdC5ob3VyczsKICAgICAgICAgICAgICBlID8gbiA8IDEyICYmICh0LmhvdXJzICs9IDEyKSA6IDEyID09PSBuICYmICh0LmhvdXJzID0gMCksIGRlbGV0ZSB0LmFmdGVybm9vbjsKICAgICAgICAgICAgfQogICAgICAgICAgfShlKSwgZTsKICAgICAgICB9OwogICAgICB9KG4pKHQpLAogICAgICAgICAgaSA9IG8ueWVhciwKICAgICAgICAgIHMgPSBvLm1vbnRoLAogICAgICAgICAgYSA9IG8u
ZGF5LAogICAgICAgICAgZiA9IG8uaG91cnMsCiAgICAgICAgICB1ID0gby5taW51dGVzLAogICAgICAgICAgZCA9IG8uc2Vjb25kcywKICAgICAgICAgIGMgPSBvLm1pbGxpc2Vjb25kcywKICAgICAgICAgIGwgPSBvLnpvbmUsCiAgICAgICAgICBtID0gbmV3IERhdGUoKSwKICAgICAgICAgIHYgPSBhIHx8IChpIHx8IHMgPyAxIDogbS5nZXREYXRlKCkpLAogICAgICAgICAgcCA9IGkgfHwgbS5nZXRGdWxsWWVhcigpLAogICAgICAgICAgeSA9IDA7CgogICAgICBpICYmICFzIHx8ICh5ID0gcyA+IDAgPyBzIC0gMSA6IG0uZ2V0
TW9udGgoKSk7CiAgICAgIHZhciBEID0gZiB8fCAwLAogICAgICAgICAgTSA9IHUgfHwgMCwKICAgICAgICAgIGcgPSBkIHx8IDAsCiAgICAgICAgICBZID0gYyB8fCAwOwogICAgICByZXR1cm4gbCA/IG5ldyBEYXRlKERhdGUuVVRDKHAsIHksIHYsIEQsIE0sIGcsIFkgKyA2MCAqIGwub2Zmc2V0ICogMWUzKSkgOiByID8gbmV3IERhdGUoRGF0ZS5VVEMocCwgeSwgdiwgRCwgTSwgZywgWSkpIDogbmV3IERhdGUocCwgeSwgdiwgRCwgTSwgZywgWSk7CiAgICB9IGNhdGNoICh0KSB7CiAgICAgIHJldHVybiBuZXcgRGF0ZSgiIik7
CiAgICB9CiAgfTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChlLCBuLCByKSB7CiAgICB2YXIgbyA9IG4ucHJvdG90eXBlLAogICAgICAgIGkgPSBvLnBhcnNlOwoKICAgIG8ucGFyc2UgPSBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgbiA9IGUuZGF0ZSwKICAgICAgICAgIG8gPSBlLnV0YywKICAgICAgICAgIHMgPSBlLmFyZ3M7CiAgICAgIHRoaXMuJHUgPSBvOwogICAgICB2YXIgYSA9IHNbMV07CgogICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIGEpIHsKICAgICAgICB2YXIgaCA9ICEwID09PSBzWzJdLAogICAgICAgICAgICB1
ID0gITAgPT09IHNbM10sCiAgICAgICAgICAgIGQgPSBoIHx8IHUsCiAgICAgICAgICAgIGMgPSBzWzJdOwogICAgICAgIHUgJiYgKGMgPSBzWzJdKSwgaCB8fCAodCA9IGMgPyByLkxzW2NdIDogdGhpcy4kbG9jYWxlKCkpLCB0aGlzLiRkID0gZihuLCBhLCBvKSwgdGhpcy5pbml0KCksIGMgJiYgITAgIT09IGMgJiYgKHRoaXMuJEwgPSB0aGlzLmxvY2FsZShjKS4kTCksIGQgJiYgbiAhPT0gdGhpcy5mb3JtYXQoYSkgJiYgKHRoaXMuJGQgPSBuZXcgRGF0ZSgiIikpOwogICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBBcnJh
eSkgZm9yICh2YXIgbCA9IGEubGVuZ3RoLCBtID0gMTsgbSA8PSBsOyBtICs9IDEpIHsKICAgICAgICBzWzFdID0gYVttIC0gMV07CiAgICAgICAgdmFyIHYgPSByLmFwcGx5KHRoaXMsIHMpOwoKICAgICAgICBpZiAodi5pc1ZhbGlkKCkpIHsKICAgICAgICAgIHRoaXMuJGQgPSB2LiRkLCB0aGlzLiRMID0gdi4kTCwgdGhpcy5pbml0KCk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIG0gPT09IGwgJiYgKHRoaXMuJGQgPSBuZXcgRGF0ZSgiIikpOwogICAgICB9IGVsc2UgaS5jYWxsKHRoaXMsIGUpOwogICAg
fTsKICB9Owp9KTsKCn0se31dLDIyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJl
dHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKIWZ1bmN0aW9uICh0LCBpKSB7CiAgIm9iamVjdCIgPT0gKHR5cGVvZiBleHBvcnRzID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihleHBvcnRzKSkgJiYgInVuZGVmaW5lZCIgIT0gdHlwZW9mIG1vZHVsZSA/IG1vZHVsZS5leHBvcnRz
ID0gaSgpIDogImZ1bmN0aW9uIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoaSkgOiB0LmRheWpzX3BsdWdpbl91dGMgPSBpKCk7Cn0odm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwoKICByZXR1cm4gZnVuY3Rpb24gKHQsIGksIGUpIHsKICAgIHZhciBzID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpLAogICAgICAgIG4gPSBpLnByb3RvdHlwZTsKICAgIGUudXRjID0gZnVuY3Rpb24gKHQpIHsKICAgICAgcmV0dXJuIG5ldyBpKHsKICAgICAgICBkYXRlOiB0LAogICAg
ICAgIHV0YzogITAsCiAgICAgICAgYXJnczogYXJndW1lbnRzCiAgICAgIH0pOwogICAgfSwgbi51dGMgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBlKHRoaXMudG9EYXRlKCksIHsKICAgICAgICBsb2NhbGU6IHRoaXMuJEwsCiAgICAgICAgdXRjOiAhMAogICAgICB9KTsKICAgIH0sIG4ubG9jYWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBlKHRoaXMudG9EYXRlKCksIHsKICAgICAgICBsb2NhbGU6IHRoaXMuJEwsCiAgICAgICAgdXRjOiAhMQogICAgICB9KTsKICAgIH07CiAgICB2YXIgdSA9IG4ucGFyc2U7
CgogICAgbi5wYXJzZSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgIHQudXRjICYmICh0aGlzLiR1ID0gITApLCB0aGlzLiR1dGlscygpLnUodC4kb2Zmc2V0KSB8fCAodGhpcy4kb2Zmc2V0ID0gdC4kb2Zmc2V0KSwgdS5jYWxsKHRoaXMsIHQpOwogICAgfTsKCiAgICB2YXIgbyA9IG4uaW5pdDsKCiAgICBuLmluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICh0aGlzLiR1KSB7CiAgICAgICAgdmFyIHQgPSB0aGlzLiRkOwogICAgICAgIHRoaXMuJHkgPSB0LmdldFVUQ0Z1bGxZZWFyKCksIHRoaXMuJE0gPSB0LmdldFVUQ01vbnRo
KCksIHRoaXMuJEQgPSB0LmdldFVUQ0RhdGUoKSwgdGhpcy4kVyA9IHQuZ2V0VVRDRGF5KCksIHRoaXMuJEggPSB0LmdldFVUQ0hvdXJzKCksIHRoaXMuJG0gPSB0LmdldFVUQ01pbnV0ZXMoKSwgdGhpcy4kcyA9IHQuZ2V0VVRDU2Vjb25kcygpLCB0aGlzLiRtcyA9IHQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7CiAgICAgIH0gZWxzZSBvLmNhbGwodGhpcyk7CiAgICB9OwoKICAgIHZhciBmID0gbi51dGNPZmZzZXQ7CgogICAgbi51dGNPZmZzZXQgPSBmdW5jdGlvbiAodCwgaSkgewogICAgICB2YXIgZSA9IHRoaXMuJHV0aWxzKCku
dTsKICAgICAgaWYgKGUodCkpIHJldHVybiB0aGlzLiR1ID8gMCA6IGUodGhpcy4kb2Zmc2V0KSA/IGYuY2FsbCh0aGlzKSA6IHRoaXMuJG9mZnNldDsKICAgICAgdmFyIG4gPSBNYXRoLmFicyh0KSA8PSAxNiA/IDYwICogdCA6IHQsCiAgICAgICAgICB1ID0gdGhpczsKICAgICAgcmV0dXJuIGkgPyAodS4kb2Zmc2V0ID0gbiwgdS4kdSA9IDAgPT09IHQsIHUpIDogKDAgIT09IHQgPyAodSA9IHRoaXMubG9jYWwoKS5hZGQobiArIHMsICJtaW51dGUiKSkuJG9mZnNldCA9IG4gOiB1ID0gdGhpcy51dGMoKSwgdSk7CiAgICB9OwoK
ICAgIHZhciByID0gbi5mb3JtYXQ7CiAgICBuLmZvcm1hdCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgIHZhciBpID0gdCB8fCAodGhpcy4kdSA/ICJZWVlZLU1NLUREVEhIOm1tOnNzW1pdIiA6ICIiKTsKICAgICAgcmV0dXJuIHIuY2FsbCh0aGlzLCBpKTsKICAgIH0sIG4udmFsdWVPZiA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHQgPSB0aGlzLiR1dGlscygpLnUodGhpcy4kb2Zmc2V0KSA/IDAgOiB0aGlzLiRvZmZzZXQgKyBzOwogICAgICByZXR1cm4gdGhpcy4kZC52YWx1ZU9mKCkgLSA2ZTQgKiB0OwogICAgfSwgbi5pc1VU
QyA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICEhdGhpcy4kdTsKICAgIH0sIG4udG9JU09TdHJpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7CiAgICB9LCBuLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b1VUQ1N0cmluZygpOwogICAgfTsKICAgIHZhciBhID0gbi50b0RhdGU7CgogICAgbi50b0RhdGUgPSBmdW5jdGlvbiAodCkgewogICAgICByZXR1cm4gInMiID09PSB0ICYmIHRoaXMuJG9mZnNldCA/IGUo
dGhpcy5mb3JtYXQoIllZWVktTU0tREQgSEg6bW06c3M6U1NTIikpLnRvRGF0ZSgpIDogYS5jYWxsKHRoaXMpOwogICAgfTsKCiAgICB2YXIgYyA9IG4uZGlmZjsKCiAgICBuLmRpZmYgPSBmdW5jdGlvbiAodCwgaSwgcykgewogICAgICB2YXIgbiA9IHRoaXMubG9jYWwoKSwKICAgICAgICAgIHUgPSBlKHQpLmxvY2FsKCk7CiAgICAgIHJldHVybiBjLmNhbGwobiwgdSwgaSwgcyk7CiAgICB9OwogIH07Cn0pOwoKfSx7fV0sMjMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZXhwb3J0
cy51dGlscyA9IHJlcXVpcmUoJy4vZGVzL3V0aWxzJyk7CmV4cG9ydHMuQ2lwaGVyID0gcmVxdWlyZSgnLi9kZXMvY2lwaGVyJyk7CmV4cG9ydHMuREVTID0gcmVxdWlyZSgnLi9kZXMvZGVzJyk7CmV4cG9ydHMuQ0JDID0gcmVxdWlyZSgnLi9kZXMvY2JjJyk7CmV4cG9ydHMuRURFID0gcmVxdWlyZSgnLi9kZXMvZWRlJyk7Cgp9LHsiLi9kZXMvY2JjIjoyMzEsIi4vZGVzL2NpcGhlciI6MjMyLCIuL2Rlcy9kZXMiOjIzMywiLi9kZXMvZWRlIjoyMzQsIi4vZGVzL3V0aWxzIjoyMzV9XSwyMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9k
dWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpOwoKdmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKCnZhciBwcm90byA9IHt9OwoKZnVuY3Rpb24gQ0JDU3RhdGUoaXYpIHsKICBhc3NlcnQuZXF1YWwoaXYubGVuZ3RoLCA4LCAnSW52YWxpZCBJViBsZW5ndGgnKTsKICB0aGlzLml2ID0gbmV3IEFycmF5KDgpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXYubGVuZ3RoOyBpKyspIHsKICAgIHRoaXMuaXZbaV0gPSBpdltpXTsK
ICB9Cn0KCmZ1bmN0aW9uIGluc3RhbnRpYXRlKEJhc2UpIHsKICBmdW5jdGlvbiBDQkMob3B0aW9ucykgewogICAgQmFzZS5jYWxsKHRoaXMsIG9wdGlvbnMpOwoKICAgIHRoaXMuX2NiY0luaXQoKTsKICB9CgogIGluaGVyaXRzKENCQywgQmFzZSk7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm90byk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgdmFyIGtleSA9IGtleXNbaV07CiAgICBDQkMucHJvdG90eXBlW2tleV0gPSBwcm90b1trZXldOwogIH0KCiAgQ0JDLmNyZWF0ZSA9IGZ1
bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7CiAgICByZXR1cm4gbmV3IENCQyhvcHRpb25zKTsKICB9OwoKICByZXR1cm4gQ0JDOwp9CgpleHBvcnRzLmluc3RhbnRpYXRlID0gaW5zdGFudGlhdGU7Cgpwcm90by5fY2JjSW5pdCA9IGZ1bmN0aW9uIF9jYmNJbml0KCkgewogIHZhciBzdGF0ZSA9IG5ldyBDQkNTdGF0ZSh0aGlzLm9wdGlvbnMuaXYpOwogIHRoaXMuX2NiY1N0YXRlID0gc3RhdGU7Cn07Cgpwcm90by5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikgewogIHZhciBzdGF0ZSA9
IHRoaXMuX2NiY1N0YXRlOwogIHZhciBzdXBlclByb3RvID0gdGhpcy5jb25zdHJ1Y3Rvci5zdXBlcl8ucHJvdG90eXBlOwogIHZhciBpdiA9IHN0YXRlLml2OwoKICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKykgewogICAgICBpdltpXSBePSBpbnBbaW5PZmYgKyBpXTsKICAgIH0KCiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpdiwgMCwgb3V0LCBvdXRPZmYpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9j
a1NpemU7IGkrKykgewogICAgICBpdltpXSA9IG91dFtvdXRPZmYgKyBpXTsKICAgIH0KICB9IGVsc2UgewogICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKykgewogICAgICBvdXRbb3V0T2ZmICsgaV0gXj0gaXZbaV07CiAgICB9CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKSB7CiAgICAgIGl2W2ldID0gaW5wW2luT2ZmICsgaV07CiAgICB9CiAgfQp9OwoK
fSx7ImluaGVyaXRzIjoyNzgsIm1pbmltYWxpc3RpYy1hc3NlcnQiOjMyOH1dLDIzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7CgpmdW5jdGlvbiBDaXBoZXIob3B0aW9ucykgewogIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CiAgdGhpcy50eXBlID0gdGhpcy5vcHRpb25zLnR5cGU7CiAgdGhpcy5ibG9ja1NpemUgPSA4OwoKICB0aGlzLl9pbml0KCk7CgogIHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KHRo
aXMuYmxvY2tTaXplKTsKICB0aGlzLmJ1ZmZlck9mZiA9IDA7Cn0KCm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyOwoKQ2lwaGVyLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIF9pbml0KCkgey8vIE1pZ2h0IGJlIG92ZXJyaWRlZAp9OwoKQ2lwaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkgewogIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdOwogIGlmICh0aGlzLnR5cGUgPT09ICdkZWNyeXB0JykgcmV0dXJuIHRoaXMuX3VwZGF0ZURlY3J5cHQoZGF0YSk7ZWxzZSByZXR1cm4gdGhp
cy5fdXBkYXRlRW5jcnlwdChkYXRhKTsKfTsKCkNpcGhlci5wcm90b3R5cGUuX2J1ZmZlciA9IGZ1bmN0aW9uIF9idWZmZXIoZGF0YSwgb2ZmKSB7CiAgLy8gQXBwZW5kIGRhdGEgdG8gYnVmZmVyCiAgdmFyIG1pbiA9IE1hdGgubWluKHRoaXMuYnVmZmVyLmxlbmd0aCAtIHRoaXMuYnVmZmVyT2ZmLCBkYXRhLmxlbmd0aCAtIG9mZik7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbWluOyBpKyspIHsKICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmICsgaV0gPSBkYXRhW29mZiArIGldOwogIH0KCiAgdGhpcy5idWZmZXJPZmYg
Kz0gbWluOyAvLyBTaGlmdCBuZXh0CgogIHJldHVybiBtaW47Cn07CgpDaXBoZXIucHJvdG90eXBlLl9mbHVzaEJ1ZmZlciA9IGZ1bmN0aW9uIF9mbHVzaEJ1ZmZlcihvdXQsIG9mZikgewogIHRoaXMuX3VwZGF0ZSh0aGlzLmJ1ZmZlciwgMCwgb3V0LCBvZmYpOwoKICB0aGlzLmJ1ZmZlck9mZiA9IDA7CiAgcmV0dXJuIHRoaXMuYmxvY2tTaXplOwp9OwoKQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVFbmNyeXB0KGRhdGEpIHsKICB2YXIgaW5wdXRPZmYgPSAwOwogIHZhciBvdXRwdXRP
ZmYgPSAwOwogIHZhciBjb3VudCA9ICh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplIHwgMDsKICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpOwoKICBpZiAodGhpcy5idWZmZXJPZmYgIT09IDApIHsKICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7CiAgICBpZiAodGhpcy5idWZmZXJPZmYgPT09IHRoaXMuYnVmZmVyLmxlbmd0aCkgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTsKICB9IC8v
IFdyaXRlIGJsb2NrcwoKCiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoIC0gKGRhdGEubGVuZ3RoIC0gaW5wdXRPZmYpICUgdGhpcy5ibG9ja1NpemU7CgogIGZvciAoOyBpbnB1dE9mZiA8IG1heDsgaW5wdXRPZmYgKz0gdGhpcy5ibG9ja1NpemUpIHsKICAgIHRoaXMuX3VwZGF0ZShkYXRhLCBpbnB1dE9mZiwgb3V0LCBvdXRwdXRPZmYpOwoKICAgIG91dHB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZTsKICB9IC8vIFF1ZXVlIHJlc3QKCgogIGZvciAoOyBpbnB1dE9mZiA8IGRhdGEubGVuZ3RoOyBpbnB1dE9mZisrLCB0aGlzLmJ1ZmZl
ck9mZisrKSB7CiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZl0gPSBkYXRhW2lucHV0T2ZmXTsKICB9CgogIHJldHVybiBvdXQ7Cn07CgpDaXBoZXIucHJvdG90eXBlLl91cGRhdGVEZWNyeXB0ID0gZnVuY3Rpb24gX3VwZGF0ZURlY3J5cHQoZGF0YSkgewogIHZhciBpbnB1dE9mZiA9IDA7CiAgdmFyIG91dHB1dE9mZiA9IDA7CiAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSAtIDE7CiAgdmFyIG91dCA9IG5ldyBBcnJheShjb3VudCAqIHRo
aXMuYmxvY2tTaXplKTsgLy8gVE9ETyhpbmR1dG55KTogb3B0aW1pemUgaXQsIHRoaXMgaXMgZmFyIGZyb20gb3B0aW1hbAoKICBmb3IgKDsgY291bnQgPiAwOyBjb3VudC0tKSB7CiAgICBpbnB1dE9mZiArPSB0aGlzLl9idWZmZXIoZGF0YSwgaW5wdXRPZmYpOwogICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTsKICB9IC8vIEJ1ZmZlciByZXN0IG9mIHRoZSBpbnB1dAoKCiAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTsKICByZXR1cm4gb3V0Owp9OwoKQ2lw
aGVyLnByb3RvdHlwZS5maW5hbCA9IGZ1bmN0aW9uIGZpbmFsKGJ1ZmZlcikgewogIHZhciBmaXJzdDsKICBpZiAoYnVmZmVyKSBmaXJzdCA9IHRoaXMudXBkYXRlKGJ1ZmZlcik7CiAgdmFyIGxhc3Q7CiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKSBsYXN0ID0gdGhpcy5fZmluYWxFbmNyeXB0KCk7ZWxzZSBsYXN0ID0gdGhpcy5fZmluYWxEZWNyeXB0KCk7CiAgaWYgKGZpcnN0KSByZXR1cm4gZmlyc3QuY29uY2F0KGxhc3QpO2Vsc2UgcmV0dXJuIGxhc3Q7Cn07CgpDaXBoZXIucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlv
biBfcGFkKGJ1ZmZlciwgb2ZmKSB7CiAgaWYgKG9mZiA9PT0gMCkgcmV0dXJuIGZhbHNlOwoKICB3aGlsZSAob2ZmIDwgYnVmZmVyLmxlbmd0aCkgewogICAgYnVmZmVyW29mZisrXSA9IDA7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfTsKCkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRW5jcnlwdCA9IGZ1bmN0aW9uIF9maW5hbEVuY3J5cHQoKSB7CiAgaWYgKCF0aGlzLl9wYWQodGhpcy5idWZmZXIsIHRoaXMuYnVmZmVyT2ZmKSkgcmV0dXJuIFtdOwogIHZhciBvdXQgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpOwoKICB0aGlzLl91
cGRhdGUodGhpcy5idWZmZXIsIDAsIG91dCwgMCk7CgogIHJldHVybiBvdXQ7Cn07CgpDaXBoZXIucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHsKICByZXR1cm4gYnVmZmVyOwp9OwoKQ2lwaGVyLnByb3RvdHlwZS5fZmluYWxEZWNyeXB0ID0gZnVuY3Rpb24gX2ZpbmFsRGVjcnlwdCgpIHsKICBhc3NlcnQuZXF1YWwodGhpcy5idWZmZXJPZmYsIHRoaXMuYmxvY2tTaXplLCAnTm90IGVub3VnaCBkYXRhIHRvIGRlY3J5cHQnKTsKICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTsK
CiAgdGhpcy5fZmx1c2hCdWZmZXIob3V0LCAwKTsKCiAgcmV0dXJuIHRoaXMuX3VucGFkKG91dCk7Cn07Cgp9LHsibWluaW1hbGlzdGljLWFzc2VydCI6MzI4fV0sMjMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7Cgp2YXIgQ2lwaGVyID0gcmVxdWlyZSgnLi9jaXBoZXInKTsKCmZ1
bmN0aW9uIERFU1N0YXRlKCkgewogIHRoaXMudG1wID0gbmV3IEFycmF5KDIpOwogIHRoaXMua2V5cyA9IG51bGw7Cn0KCmZ1bmN0aW9uIERFUyhvcHRpb25zKSB7CiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7CiAgdmFyIHN0YXRlID0gbmV3IERFU1N0YXRlKCk7CiAgdGhpcy5fZGVzU3RhdGUgPSBzdGF0ZTsKICB0aGlzLmRlcml2ZUtleXMoc3RhdGUsIG9wdGlvbnMua2V5KTsKfQoKaW5oZXJpdHMoREVTLCBDaXBoZXIpOwptb2R1bGUuZXhwb3J0cyA9IERFUzsKCkRFUy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0
aW9ucykgewogIHJldHVybiBuZXcgREVTKG9wdGlvbnMpOwp9OwoKdmFyIHNoaWZ0VGFibGUgPSBbMSwgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMV07CgpERVMucHJvdG90eXBlLmRlcml2ZUtleXMgPSBmdW5jdGlvbiBkZXJpdmVLZXlzKHN0YXRlLCBrZXkpIHsKICBzdGF0ZS5rZXlzID0gbmV3IEFycmF5KDE2ICogMik7CiAgYXNzZXJ0LmVxdWFsKGtleS5sZW5ndGgsIHRoaXMuYmxvY2tTaXplLCAnSW52YWxpZCBrZXkgbGVuZ3RoJyk7CiAgdmFyIGtMID0gdXRpbHMucmVhZFVJbnQzMkJFKGtl
eSwgMCk7CiAgdmFyIGtSID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgNCk7CiAgdXRpbHMucGMxKGtMLCBrUiwgc3RhdGUudG1wLCAwKTsKICBrTCA9IHN0YXRlLnRtcFswXTsKICBrUiA9IHN0YXRlLnRtcFsxXTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7CiAgICB2YXIgc2hpZnQgPSBzaGlmdFRhYmxlW2kgPj4+IDFdOwogICAga0wgPSB1dGlscy5yMjhzaGwoa0wsIHNoaWZ0KTsKICAgIGtSID0gdXRpbHMucjI4c2hsKGtSLCBzaGlmdCk7CiAgICB1dGlscy5wYzIoa0wsIGtS
LCBzdGF0ZS5rZXlzLCBpKTsKICB9Cn07CgpERVMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fZGVzU3RhdGU7CiAgdmFyIGwgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZik7CiAgdmFyIHIgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZiArIDQpOyAvLyBJbml0aWFsIFBlcm11dGF0aW9uCgogIHV0aWxzLmlwKGwsIHIsIHN0YXRlLnRtcCwgMCk7CiAgbCA9IHN0YXRlLnRtcFswXTsKICByID0gc3RhdGUu
dG1wWzFdOwogIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0JykgdGhpcy5fZW5jcnlwdChzdGF0ZSwgbCwgciwgc3RhdGUudG1wLCAwKTtlbHNlIHRoaXMuX2RlY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7CiAgbCA9IHN0YXRlLnRtcFswXTsKICByID0gc3RhdGUudG1wWzFdOwogIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCBsLCBvdXRPZmYpOwogIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCByLCBvdXRPZmYgKyA0KTsKfTsKCkRFUy5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYp
IHsKICB2YXIgdmFsdWUgPSBidWZmZXIubGVuZ3RoIC0gb2ZmOwoKICBmb3IgKHZhciBpID0gb2ZmOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKSB7CiAgICBidWZmZXJbaV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiB0cnVlOwp9OwoKREVTLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7CiAgdmFyIHBhZCA9IGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gMV07CgogIGZvciAodmFyIGkgPSBidWZmZXIubGVuZ3RoIC0gcGFkOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKSB7CiAgICBhc3NlcnQuZXF1YWwo
YnVmZmVyW2ldLCBwYWQpOwogIH0KCiAgcmV0dXJuIGJ1ZmZlci5zbGljZSgwLCBidWZmZXIubGVuZ3RoIC0gcGFkKTsKfTsKCkRFUy5wcm90b3R5cGUuX2VuY3J5cHQgPSBmdW5jdGlvbiBfZW5jcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7CiAgdmFyIGwgPSBsU3RhcnQ7CiAgdmFyIHIgPSByU3RhcnQ7IC8vIEFwcGx5IGYoKSB4MTYgdGltZXMKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7CiAgICB2YXIga2V5TCA9IHN0YXRlLmtleXNbaV07CiAgICB2YXIg
a2V5UiA9IHN0YXRlLmtleXNbaSArIDFdOyAvLyBmKHIsIGspCgogICAgdXRpbHMuZXhwYW5kKHIsIHN0YXRlLnRtcCwgMCk7CiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTsKICAgIGtleVIgXj0gc3RhdGUudG1wWzFdOwogICAgdmFyIHMgPSB1dGlscy5zdWJzdGl0dXRlKGtleUwsIGtleVIpOwogICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpOwogICAgdmFyIHQgPSByOwogICAgciA9IChsIF4gZikgPj4+IDA7CiAgICBsID0gdDsKICB9IC8vIFJldmVyc2UgSW5pdGlhbCBQZXJtdXRhdGlvbgoKCiAgdXRpbHMucmlwKHIsIGws
IG91dCwgb2ZmKTsKfTsKCkRFUy5wcm90b3R5cGUuX2RlY3J5cHQgPSBmdW5jdGlvbiBfZGVjcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7CiAgdmFyIGwgPSByU3RhcnQ7CiAgdmFyIHIgPSBsU3RhcnQ7IC8vIEFwcGx5IGYoKSB4MTYgdGltZXMKCiAgZm9yICh2YXIgaSA9IHN0YXRlLmtleXMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpIC09IDIpIHsKICAgIHZhciBrZXlMID0gc3RhdGUua2V5c1tpXTsKICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07IC8vIGYociwgaykKCiAgICB1dGlscy5leHBh
bmQobCwgc3RhdGUudG1wLCAwKTsKICAgIGtleUwgXj0gc3RhdGUudG1wWzBdOwogICAga2V5UiBePSBzdGF0ZS50bXBbMV07CiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7CiAgICB2YXIgZiA9IHV0aWxzLnBlcm11dGUocyk7CiAgICB2YXIgdCA9IGw7CiAgICBsID0gKHIgXiBmKSA+Pj4gMDsKICAgIHIgPSB0OwogIH0gLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uCgoKICB1dGlscy5yaXAobCwgciwgb3V0LCBvZmYpOwp9OwoKfSx7Ii4vY2lwaGVyIjoyMzIsIi4vdXRpbHMiOjIzNSwiaW5o
ZXJpdHMiOjI3OCwibWluaW1hbGlzdGljLWFzc2VydCI6MzI4fV0sMjM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgQ2lwaGVyID0gcmVxdWlyZSgnLi9jaXBoZXInKTsKCnZhciBERVMgPSByZXF1aXJlKCcuL2RlcycpOwoKZnVuY3Rpb24gRURFU3RhdGUodHlwZSwga2V5KSB7CiAgYXNzZXJ0LmVxdWFsKGtleS5sZW5ndGgsIDI0
LCAnSW52YWxpZCBrZXkgbGVuZ3RoJyk7CiAgdmFyIGsxID0ga2V5LnNsaWNlKDAsIDgpOwogIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7CiAgdmFyIGszID0ga2V5LnNsaWNlKDE2LCAyNCk7CgogIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHsKICAgIHRoaXMuY2lwaGVycyA9IFtERVMuY3JlYXRlKHsKICAgICAgdHlwZTogJ2VuY3J5cHQnLAogICAgICBrZXk6IGsxCiAgICB9KSwgREVTLmNyZWF0ZSh7CiAgICAgIHR5cGU6ICdkZWNyeXB0JywKICAgICAga2V5OiBrMgogICAgfSksIERFUy5jcmVhdGUoewogICAgICB0eXBl
OiAnZW5jcnlwdCcsCiAgICAgIGtleTogazMKICAgIH0pXTsKICB9IGVsc2UgewogICAgdGhpcy5jaXBoZXJzID0gW0RFUy5jcmVhdGUoewogICAgICB0eXBlOiAnZGVjcnlwdCcsCiAgICAgIGtleTogazMKICAgIH0pLCBERVMuY3JlYXRlKHsKICAgICAgdHlwZTogJ2VuY3J5cHQnLAogICAgICBrZXk6IGsyCiAgICB9KSwgREVTLmNyZWF0ZSh7CiAgICAgIHR5cGU6ICdkZWNyeXB0JywKICAgICAga2V5OiBrMQogICAgfSldOwogIH0KfQoKZnVuY3Rpb24gRURFKG9wdGlvbnMpIHsKICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25z
KTsKICB2YXIgc3RhdGUgPSBuZXcgRURFU3RhdGUodGhpcy50eXBlLCB0aGlzLm9wdGlvbnMua2V5KTsKICB0aGlzLl9lZGVTdGF0ZSA9IHN0YXRlOwp9Cgppbmhlcml0cyhFREUsIENpcGhlcik7Cm1vZHVsZS5leHBvcnRzID0gRURFOwoKRURFLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7CiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7Cn07CgpFREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fZWRlU3Rh
dGU7CgogIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7CgogIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpOwoKICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTsKfTsKCkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDsKRURFLnByb3RvdHlwZS5fdW5wYWQgPSBERVMucHJvdG90eXBlLl91bnBhZDsKCn0seyIuL2NpcGhlciI6MjMyLCIuL2RlcyI6MjMzLCJpbmhlcml0cyI6
Mjc4LCJtaW5pbWFsaXN0aWMtYXNzZXJ0IjozMjh9XSwyMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpleHBvcnRzLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShieXRlcywgb2ZmKSB7CiAgdmFyIHJlcyA9IGJ5dGVzWzAgKyBvZmZdIDw8IDI0IHwgYnl0ZXNbMSArIG9mZl0gPDwgMTYgfCBieXRlc1syICsgb2ZmXSA8PCA4IHwgYnl0ZXNbMyArIG9mZl07CiAgcmV0dXJuIHJlcyA+Pj4gMDsKfTsKCmV4cG9ydHMud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdy
aXRlVUludDMyQkUoYnl0ZXMsIHZhbHVlLCBvZmYpIHsKICBieXRlc1swICsgb2ZmXSA9IHZhbHVlID4+PiAyNDsKICBieXRlc1sxICsgb2ZmXSA9IHZhbHVlID4+PiAxNiAmIDB4ZmY7CiAgYnl0ZXNbMiArIG9mZl0gPSB2YWx1ZSA+Pj4gOCAmIDB4ZmY7CiAgYnl0ZXNbMyArIG9mZl0gPSB2YWx1ZSAmIDB4ZmY7Cn07CgpleHBvcnRzLmlwID0gZnVuY3Rpb24gaXAoaW5MLCBpblIsIG91dCwgb2ZmKSB7CiAgdmFyIG91dEwgPSAwOwogIHZhciBvdXRSID0gMDsKCiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7CiAg
ICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7CiAgICAgIG91dEwgPDw9IDE7CiAgICAgIG91dEwgfD0gaW5SID4+PiBqICsgaSAmIDE7CiAgICB9CgogICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkgewogICAgICBvdXRMIDw8PSAxOwogICAgICBvdXRMIHw9IGluTCA+Pj4gaiArIGkgJiAxOwogICAgfQogIH0KCiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7CiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7CiAgICAgIG91dFIgPDw9IDE7CiAgICAgIG91dFIg
fD0gaW5SID4+PiBqICsgaSAmIDE7CiAgICB9CgogICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkgewogICAgICBvdXRSIDw8PSAxOwogICAgICBvdXRSIHw9IGluTCA+Pj4gaiArIGkgJiAxOwogICAgfQogIH0KCiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDsKICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwOwp9OwoKZXhwb3J0cy5yaXAgPSBmdW5jdGlvbiByaXAoaW5MLCBpblIsIG91dCwgb2ZmKSB7CiAgdmFyIG91dEwgPSAwOwogIHZhciBvdXRSID0gMDsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBp
KyspIHsKICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHsKICAgICAgb3V0TCA8PD0gMTsKICAgICAgb3V0TCB8PSBpblIgPj4+IGogKyBpICYgMTsKICAgICAgb3V0TCA8PD0gMTsKICAgICAgb3V0TCB8PSBpbkwgPj4+IGogKyBpICYgMTsKICAgIH0KICB9CgogIGZvciAodmFyIGkgPSA0OyBpIDwgODsgaSsrKSB7CiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7CiAgICAgIG91dFIgPDw9IDE7CiAgICAgIG91dFIgfD0gaW5SID4+PiBqICsgaSAmIDE7CiAgICAgIG91dFIgPDw9IDE7CiAg
ICAgIG91dFIgfD0gaW5MID4+PiBqICsgaSAmIDE7CiAgICB9CiAgfQoKICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwOwogIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7Cn07CgpleHBvcnRzLnBjMSA9IGZ1bmN0aW9uIHBjMShpbkwsIGluUiwgb3V0LCBvZmYpIHsKICB2YXIgb3V0TCA9IDA7CiAgdmFyIG91dFIgPSAwOyAvLyA3LCAxNSwgMjMsIDMxLCAzOSwgNDcsIDU1LCA2MwogIC8vIDYsIDE0LCAyMiwgMzAsIDM5LCA0NywgNTUsIDYzCiAgLy8gNSwgMTMsIDIxLCAyOSwgMzksIDQ3LCA1NSwgNjMKICAvLyA0LCAxMiwg
MjAsIDI4CgogIGZvciAodmFyIGkgPSA3OyBpID49IDU7IGktLSkgewogICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkgewogICAgICBvdXRMIDw8PSAxOwogICAgICBvdXRMIHw9IGluUiA+PiBqICsgaSAmIDE7CiAgICB9CgogICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkgewogICAgICBvdXRMIDw8PSAxOwogICAgICBvdXRMIHw9IGluTCA+PiBqICsgaSAmIDE7CiAgICB9CiAgfQoKICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7CiAgICBvdXRMIDw8PSAxOwogICAgb3V0TCB8
PSBpblIgPj4gaiArIGkgJiAxOwogIH0gLy8gMSwgOSwgMTcsIDI1LCAzMywgNDEsIDQ5LCA1NwogIC8vIDIsIDEwLCAxOCwgMjYsIDM0LCA0MiwgNTAsIDU4CiAgLy8gMywgMTEsIDE5LCAyNywgMzUsIDQzLCA1MSwgNTkKICAvLyAzNiwgNDQsIDUyLCA2MAoKCiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMzsgaSsrKSB7CiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7CiAgICAgIG91dFIgPDw9IDE7CiAgICAgIG91dFIgfD0gaW5SID4+IGogKyBpICYgMTsKICAgIH0KCiAgICBmb3IgKHZhciBqID0gMDsgaiA8
PSAyNDsgaiArPSA4KSB7CiAgICAgIG91dFIgPDw9IDE7CiAgICAgIG91dFIgfD0gaW5MID4+IGogKyBpICYgMTsKICAgIH0KICB9CgogIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHsKICAgIG91dFIgPDw9IDE7CiAgICBvdXRSIHw9IGluTCA+PiBqICsgaSAmIDE7CiAgfQoKICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwOwogIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7Cn07CgpleHBvcnRzLnIyOHNobCA9IGZ1bmN0aW9uIHIyOHNobChudW0sIHNoaWZ0KSB7CiAgcmV0dXJuIG51bSA8PCBzaGlmdCAmIDB4
ZmZmZmZmZiB8IG51bSA+Pj4gMjggLSBzaGlmdDsKfTsKCnZhciBwYzJ0YWJsZSA9IFsvLyBpbkwgPT4gb3V0TAoxNCwgMTEsIDE3LCA0LCAyNywgMjMsIDI1LCAwLCAxMywgMjIsIDcsIDE4LCA1LCA5LCAxNiwgMjQsIDIsIDIwLCAxMiwgMjEsIDEsIDgsIDE1LCAyNiwgLy8gaW5SID0+IG91dFIKMTUsIDQsIDI1LCAxOSwgOSwgMSwgMjYsIDE2LCA1LCAxMSwgMjMsIDgsIDEyLCA3LCAxNywgMCwgMjIsIDMsIDEwLCAxNCwgNiwgMjAsIDI3LCAyNF07CgpleHBvcnRzLnBjMiA9IGZ1bmN0aW9uIHBjMihpbkwsIGluUiwgb3V0LCBv
ZmYpIHsKICB2YXIgb3V0TCA9IDA7CiAgdmFyIG91dFIgPSAwOwogIHZhciBsZW4gPSBwYzJ0YWJsZS5sZW5ndGggPj4+IDE7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIG91dEwgPDw9IDE7CiAgICBvdXRMIHw9IGluTCA+Pj4gcGMydGFibGVbaV0gJiAweDE7CiAgfQoKICBmb3IgKHZhciBpID0gbGVuOyBpIDwgcGMydGFibGUubGVuZ3RoOyBpKyspIHsKICAgIG91dFIgPDw9IDE7CiAgICBvdXRSIHw9IGluUiA+Pj4gcGMydGFibGVbaV0gJiAweDE7CiAgfQoKICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+
PiAwOwogIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7Cn07CgpleHBvcnRzLmV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChyLCBvdXQsIG9mZikgewogIHZhciBvdXRMID0gMDsKICB2YXIgb3V0UiA9IDA7CiAgb3V0TCA9IChyICYgMSkgPDwgNSB8IHIgPj4+IDI3OwoKICBmb3IgKHZhciBpID0gMjM7IGkgPj0gMTU7IGkgLT0gNCkgewogICAgb3V0TCA8PD0gNjsKICAgIG91dEwgfD0gciA+Pj4gaSAmIDB4M2Y7CiAgfQoKICBmb3IgKHZhciBpID0gMTE7IGkgPj0gMzsgaSAtPSA0KSB7CiAgICBvdXRSIHw9IHIgPj4+IGkgJiAw
eDNmOwogICAgb3V0UiA8PD0gNjsKICB9CgogIG91dFIgfD0gKHIgJiAweDFmKSA8PCAxIHwgciA+Pj4gMzE7CiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDsKICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwOwp9OwoKdmFyIHNUYWJsZSA9IFsxNCwgMCwgNCwgMTUsIDEzLCA3LCAxLCA0LCAyLCAxNCwgMTUsIDIsIDExLCAxMywgOCwgMSwgMywgMTAsIDEwLCA2LCA2LCAxMiwgMTIsIDExLCA1LCA5LCA5LCA1LCAwLCAzLCA3LCA4LCA0LCAxNSwgMSwgMTIsIDE0LCA4LCA4LCAyLCAxMywgNCwgNiwgOSwgMiwgMSwgMTEsIDcs
IDE1LCA1LCAxMiwgMTEsIDksIDMsIDcsIDE0LCAzLCAxMCwgMTAsIDAsIDUsIDYsIDAsIDEzLCAxNSwgMywgMSwgMTMsIDgsIDQsIDE0LCA3LCA2LCAxNSwgMTEsIDIsIDMsIDgsIDQsIDE0LCA5LCAxMiwgNywgMCwgMiwgMSwgMTMsIDEwLCAxMiwgNiwgMCwgOSwgNSwgMTEsIDEwLCA1LCAwLCAxMywgMTQsIDgsIDcsIDEwLCAxMSwgMSwgMTAsIDMsIDQsIDE1LCAxMywgNCwgMSwgMiwgNSwgMTEsIDgsIDYsIDEyLCA3LCA2LCAxMiwgOSwgMCwgMywgNSwgMiwgMTQsIDE1LCA5LCAxMCwgMTMsIDAsIDcsIDksIDAsIDE0LCA5LCA2
LCAzLCAzLCA0LCAxNSwgNiwgNSwgMTAsIDEsIDIsIDEzLCA4LCAxMiwgNSwgNywgMTQsIDExLCAxMiwgNCwgMTEsIDIsIDE1LCA4LCAxLCAxMywgMSwgNiwgMTAsIDQsIDEzLCA5LCAwLCA4LCA2LCAxNSwgOSwgMywgOCwgMCwgNywgMTEsIDQsIDEsIDE1LCAyLCAxNCwgMTIsIDMsIDUsIDExLCAxMCwgNSwgMTQsIDIsIDcsIDEyLCA3LCAxMywgMTMsIDgsIDE0LCAxMSwgMywgNSwgMCwgNiwgNiwgMTUsIDksIDAsIDEwLCAzLCAxLCA0LCAyLCA3LCA4LCAyLCA1LCAxMiwgMTEsIDEsIDEyLCAxMCwgNCwgMTQsIDE1LCA5LCAxMCwg
MywgNiwgMTUsIDksIDAsIDAsIDYsIDEyLCAxMCwgMTEsIDEsIDcsIDEzLCAxMywgOCwgMTUsIDksIDEsIDQsIDMsIDUsIDE0LCAxMSwgNSwgMTIsIDIsIDcsIDgsIDIsIDQsIDE0LCAyLCAxNCwgMTIsIDExLCA0LCAyLCAxLCAxMiwgNywgNCwgMTAsIDcsIDExLCAxMywgNiwgMSwgOCwgNSwgNSwgMCwgMywgMTUsIDE1LCAxMCwgMTMsIDMsIDAsIDksIDE0LCA4LCA5LCA2LCA0LCAxMSwgMiwgOCwgMSwgMTIsIDExLCA3LCAxMCwgMSwgMTMsIDE0LCA3LCAyLCA4LCAxMywgMTUsIDYsIDksIDE1LCAxMiwgMCwgNSwgOSwgNiwgMTAs
IDMsIDQsIDAsIDUsIDE0LCAzLCAxMiwgMTAsIDEsIDE1LCAxMCwgNCwgMTUsIDIsIDksIDcsIDIsIDEyLCA2LCA5LCA4LCA1LCAwLCA2LCAxMywgMSwgMywgMTMsIDQsIDE0LCAxNCwgMCwgNywgMTEsIDUsIDMsIDExLCA4LCA5LCA0LCAxNCwgMywgMTUsIDIsIDUsIDEyLCAyLCA5LCA4LCA1LCAxMiwgMTUsIDMsIDEwLCA3LCAxMSwgMCwgMTQsIDQsIDEsIDEwLCA3LCAxLCA2LCAxMywgMCwgMTEsIDgsIDYsIDEzLCA0LCAxMywgMTEsIDAsIDIsIDExLCAxNCwgNywgMTUsIDQsIDAsIDksIDgsIDEsIDEzLCAxMCwgMywgMTQsIDEy
LCAzLCA5LCA1LCA3LCAxMiwgNSwgMiwgMTAsIDE1LCA2LCA4LCAxLCA2LCAxLCA2LCA0LCAxMSwgMTEsIDEzLCAxMywgOCwgMTIsIDEsIDMsIDQsIDcsIDEwLCAxNCwgNywgMTAsIDksIDE1LCA1LCA2LCAwLCA4LCAxNSwgMCwgMTQsIDUsIDIsIDksIDMsIDIsIDEyLCAxMywgMSwgMiwgMTUsIDgsIDEzLCA0LCA4LCA2LCAxMCwgMTUsIDMsIDExLCA3LCAxLCA0LCAxMCwgMTIsIDksIDUsIDMsIDYsIDE0LCAxMSwgNSwgMCwgMCwgMTQsIDEyLCA5LCA3LCAyLCA3LCAyLCAxMSwgMSwgNCwgMTQsIDEsIDcsIDksIDQsIDEyLCAxMCwg
MTQsIDgsIDIsIDEzLCAwLCAxNSwgNiwgMTIsIDEwLCA5LCAxMywgMCwgMTUsIDMsIDMsIDUsIDUsIDYsIDgsIDExXTsKCmV4cG9ydHMuc3Vic3RpdHV0ZSA9IGZ1bmN0aW9uIHN1YnN0aXR1dGUoaW5MLCBpblIpIHsKICB2YXIgb3V0ID0gMDsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHsKICAgIHZhciBiID0gaW5MID4+PiAxOCAtIGkgKiA2ICYgMHgzZjsKICAgIHZhciBzYiA9IHNUYWJsZVtpICogMHg0MCArIGJdOwogICAgb3V0IDw8PSA0OwogICAgb3V0IHw9IHNiOwogIH0KCiAgZm9yICh2YXIgaSA9IDA7IGkg
PCA0OyBpKyspIHsKICAgIHZhciBiID0gaW5SID4+PiAxOCAtIGkgKiA2ICYgMHgzZjsKICAgIHZhciBzYiA9IHNUYWJsZVs0ICogMHg0MCArIGkgKiAweDQwICsgYl07CiAgICBvdXQgPDw9IDQ7CiAgICBvdXQgfD0gc2I7CiAgfQoKICByZXR1cm4gb3V0ID4+PiAwOwp9OwoKdmFyIHBlcm11dGVUYWJsZSA9IFsxNiwgMjUsIDEyLCAxMSwgMywgMjAsIDQsIDE1LCAzMSwgMTcsIDksIDYsIDI3LCAxNCwgMSwgMjIsIDMwLCAyNCwgOCwgMTgsIDAsIDUsIDI5LCAyMywgMTMsIDE5LCAyLCAyNiwgMTAsIDIxLCAyOCwgN107CgpleHBv
cnRzLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlKG51bSkgewogIHZhciBvdXQgPSAwOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcm11dGVUYWJsZS5sZW5ndGg7IGkrKykgewogICAgb3V0IDw8PSAxOwogICAgb3V0IHw9IG51bSA+Pj4gcGVybXV0ZVRhYmxlW2ldICYgMHgxOwogIH0KCiAgcmV0dXJuIG91dCA+Pj4gMDsKfTsKCmV4cG9ydHMucGFkU3BsaXQgPSBmdW5jdGlvbiBwYWRTcGxpdChudW0sIHNpemUsIGdyb3VwKSB7CiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygyKTsKCiAgd2hpbGUgKHN0ci5sZW5ndGggPCBz
aXplKSB7CiAgICBzdHIgPSAnMCcgKyBzdHI7CiAgfQoKICB2YXIgb3V0ID0gW107CgogIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArPSBncm91cCkgewogICAgb3V0LnB1c2goc3RyLnNsaWNlKGksIGkgKyBncm91cCkpOwogIH0KCiAgcmV0dXJuIG91dC5qb2luKCcgJyk7Cn07Cgp9LHt9XSwyMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKEJ1ZmZlcil7CiJ1c2Ugc3RyaWN0IjsKCnZhciBnZW5lcmF0ZVByaW1lID0gcmVxdWlyZSgnLi9saWIvZ2VuZXJhdGVQcmltZScpOwoKdmFy
IHByaW1lcyA9IHJlcXVpcmUoJy4vbGliL3ByaW1lcy5qc29uJyk7Cgp2YXIgREggPSByZXF1aXJlKCcuL2xpYi9kaCcpOwoKZnVuY3Rpb24gZ2V0RGlmZmllSGVsbG1hbihtb2QpIHsKICB2YXIgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLnByaW1lLCAnaGV4Jyk7CiAgdmFyIGdlbiA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0uZ2VuLCAnaGV4Jyk7CiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuKTsKfQoKdmFyIEVOQ09ESU5HUyA9IHsKICAnYmluYXJ5JzogdHJ1ZSwKICAnaGV4JzogdHJ1ZSwKICAnYmFzZTY0Jzog
dHJ1ZQp9OwoKZnVuY3Rpb24gY3JlYXRlRGlmZmllSGVsbG1hbihwcmltZSwgZW5jLCBnZW5lcmF0b3IsIGdlbmMpIHsKICBpZiAoQnVmZmVyLmlzQnVmZmVyKGVuYykgfHwgRU5DT0RJTkdTW2VuY10gPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIGNyZWF0ZURpZmZpZUhlbGxtYW4ocHJpbWUsICdiaW5hcnknLCBlbmMsIGdlbmVyYXRvcik7CiAgfQoKICBlbmMgPSBlbmMgfHwgJ2JpbmFyeSc7CiAgZ2VuYyA9IGdlbmMgfHwgJ2JpbmFyeSc7CiAgZ2VuZXJhdG9yID0gZ2VuZXJhdG9yIHx8IG5ldyBCdWZmZXIoWzJdKTsKCiAg
aWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuZXJhdG9yKSkgewogICAgZ2VuZXJhdG9yID0gbmV3IEJ1ZmZlcihnZW5lcmF0b3IsIGdlbmMpOwogIH0KCiAgaWYgKHR5cGVvZiBwcmltZSA9PT0gJ251bWJlcicpIHsKICAgIHJldHVybiBuZXcgREgoZ2VuZXJhdGVQcmltZShwcmltZSwgZ2VuZXJhdG9yKSwgZ2VuZXJhdG9yLCB0cnVlKTsKICB9CgogIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaW1lKSkgewogICAgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lLCBlbmMpOwogIH0KCiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuZXJhdG9y
LCB0cnVlKTsKfQoKZXhwb3J0cy5EaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGV4cG9ydHMuZ2V0RGlmZmllSGVsbG1hbiA9IGdldERpZmZpZUhlbGxtYW47CmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbiA9IGV4cG9ydHMuRGlmZmllSGVsbG1hbiA9IGNyZWF0ZURpZmZpZUhlbGxtYW47Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgiYnVmZmVyIikuQnVmZmVyKQoKfSx7Ii4vbGliL2RoIjoyMzcsIi4vbGliL2dlbmVyYXRlUHJpbWUiOjIzOCwiLi9saWIvcHJpbWVzLmpzb24i
OjIzOSwiYnVmZmVyIjoyMTZ9XSwyMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKEJ1ZmZlcil7CiJ1c2Ugc3RyaWN0IjsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTsKCnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpOwp2YXIgVFdFTlRZRk9VUiA9IG5ldyBCTigyNCk7CnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpOwp2YXIgVEVOID0gbmV3IEJOKDEwKTsKdmFyIFRIUkVFID0gbmV3IEJOKDMp
Owp2YXIgU0VWRU4gPSBuZXcgQk4oNyk7Cgp2YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVByaW1lJyk7Cgp2YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpOwoKbW9kdWxlLmV4cG9ydHMgPSBESDsKCmZ1bmN0aW9uIHNldFB1YmxpY0tleShwdWIsIGVuYykgewogIGVuYyA9IGVuYyB8fCAndXRmOCc7CgogIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHsKICAgIHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpOwogIH0KCiAgdGhpcy5fcHViID0gbmV3IEJOKHB1Yik7CiAgcmV0dXJuIHRoaXM7
Cn0KCmZ1bmN0aW9uIHNldFByaXZhdGVLZXkocHJpdiwgZW5jKSB7CiAgZW5jID0gZW5jIHx8ICd1dGY4JzsKCiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHsKICAgIHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYyk7CiAgfQoKICB0aGlzLl9wcml2ID0gbmV3IEJOKHByaXYpOwogIHJldHVybiB0aGlzOwp9Cgp2YXIgcHJpbWVDYWNoZSA9IHt9OwoKZnVuY3Rpb24gY2hlY2tQcmltZShwcmltZSwgZ2VuZXJhdG9yKSB7CiAgdmFyIGdlbiA9IGdlbmVyYXRvci50b1N0cmluZygnaGV4Jyk7CiAgdmFyIGhleCA9IFtnZW4s
IHByaW1lLnRvU3RyaW5nKDE2KV0uam9pbignXycpOwoKICBpZiAoaGV4IGluIHByaW1lQ2FjaGUpIHsKICAgIHJldHVybiBwcmltZUNhY2hlW2hleF07CiAgfQoKICB2YXIgZXJyb3IgPSAwOwoKICBpZiAocHJpbWUuaXNFdmVuKCkgfHwgIXByaW1lcy5zaW1wbGVTaWV2ZSB8fCAhcHJpbWVzLmZlcm1hdFRlc3QocHJpbWUpIHx8ICFtaWxsZXJSYWJpbi50ZXN0KHByaW1lKSkgewogICAgLy9ub3QgYSBwcmltZSBzbyArMQogICAgZXJyb3IgKz0gMTsKCiAgICBpZiAoZ2VuID09PSAnMDInIHx8IGdlbiA9PT0gJzA1JykgewogICAg
ICAvLyB3ZSdkIGJlIGFibGUgdG8gY2hlY2sgdGhlIGdlbmVyYXRvcgogICAgICAvLyBpdCB3b3VsZCBmYWlsIHNvICs4CiAgICAgIGVycm9yICs9IDg7CiAgICB9IGVsc2UgewogICAgICAvL3dlIHdvdWxkbid0IGJlIGFibGUgdG8gdGVzdCB0aGUgZ2VuZXJhdG9yCiAgICAgIC8vIHNvICs0CiAgICAgIGVycm9yICs9IDQ7CiAgICB9CgogICAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7CiAgICByZXR1cm4gZXJyb3I7CiAgfQoKICBpZiAoIW1pbGxlclJhYmluLnRlc3QocHJpbWUuc2hybigxKSkpIHsKICAgIC8vbm90IGEgc2Fm
ZSBwcmltZQogICAgZXJyb3IgKz0gMjsKICB9CgogIHZhciByZW07CgogIHN3aXRjaCAoZ2VuKSB7CiAgICBjYXNlICcwMic6CiAgICAgIGlmIChwcmltZS5tb2QoVFdFTlRZRk9VUikuY21wKEVMRVZFTikpIHsKICAgICAgICAvLyB1bnN1aWRhYmxlIGdlbmVyYXRvcgogICAgICAgIGVycm9yICs9IDg7CiAgICAgIH0KCiAgICAgIGJyZWFrOwoKICAgIGNhc2UgJzA1JzoKICAgICAgcmVtID0gcHJpbWUubW9kKFRFTik7CgogICAgICBpZiAocmVtLmNtcChUSFJFRSkgJiYgcmVtLmNtcChTRVZFTikpIHsKICAgICAgICAvLyBwcmlt
ZSBtb2QgMTAgbmVlZHMgdG8gZXF1YWwgMyBvciA3CiAgICAgICAgZXJyb3IgKz0gODsKICAgICAgfQoKICAgICAgYnJlYWs7CgogICAgZGVmYXVsdDoKICAgICAgZXJyb3IgKz0gNDsKICB9CgogIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yOwogIHJldHVybiBlcnJvcjsKfQoKZnVuY3Rpb24gREgocHJpbWUsIGdlbmVyYXRvciwgbWFsbGVhYmxlKSB7CiAgdGhpcy5zZXRHZW5lcmF0b3IoZ2VuZXJhdG9yKTsKICB0aGlzLl9fcHJpbWUgPSBuZXcgQk4ocHJpbWUpOwogIHRoaXMuX3ByaW1lID0gQk4ubW9udCh0aGlzLl9fcHJpbWUp
OwogIHRoaXMuX3ByaW1lTGVuID0gcHJpbWUubGVuZ3RoOwogIHRoaXMuX3B1YiA9IHVuZGVmaW5lZDsKICB0aGlzLl9wcml2ID0gdW5kZWZpbmVkOwogIHRoaXMuX3ByaW1lQ29kZSA9IHVuZGVmaW5lZDsKCiAgaWYgKG1hbGxlYWJsZSkgewogICAgdGhpcy5zZXRQdWJsaWNLZXkgPSBzZXRQdWJsaWNLZXk7CiAgICB0aGlzLnNldFByaXZhdGVLZXkgPSBzZXRQcml2YXRlS2V5OwogIH0gZWxzZSB7CiAgICB0aGlzLl9wcmltZUNvZGUgPSA4OwogIH0KfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KERILnByb3RvdHlwZSwgJ3Zlcmlm
eUVycm9yJywgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICBpZiAodHlwZW9mIHRoaXMuX3ByaW1lQ29kZSAhPT0gJ251bWJlcicpIHsKICAgICAgdGhpcy5fcHJpbWVDb2RlID0gY2hlY2tQcmltZSh0aGlzLl9fcHJpbWUsIHRoaXMuX19nZW4pOwogICAgfQoKICAgIHJldHVybiB0aGlzLl9wcmltZUNvZGU7CiAgfQp9KTsKCkRILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKCF0aGlzLl9wcml2KSB7CiAgICB0aGlzLl9wcml2ID0gbmV3IEJOKHJhbmRv
bUJ5dGVzKHRoaXMuX3ByaW1lTGVuKSk7CiAgfQoKICB0aGlzLl9wdWIgPSB0aGlzLl9nZW4udG9SZWQodGhpcy5fcHJpbWUpLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7CiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KCk7Cn07CgpESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlcikgewogIG90aGVyID0gbmV3IEJOKG90aGVyKTsKICBvdGhlciA9IG90aGVyLnRvUmVkKHRoaXMuX3ByaW1lKTsKICB2YXIgc2VjcmV0ID0gb3RoZXIucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTsKICB2
YXIgb3V0ID0gbmV3IEJ1ZmZlcihzZWNyZXQudG9BcnJheSgpKTsKICB2YXIgcHJpbWUgPSB0aGlzLmdldFByaW1lKCk7CgogIGlmIChvdXQubGVuZ3RoIDwgcHJpbWUubGVuZ3RoKSB7CiAgICB2YXIgZnJvbnQgPSBuZXcgQnVmZmVyKHByaW1lLmxlbmd0aCAtIG91dC5sZW5ndGgpOwogICAgZnJvbnQuZmlsbCgwKTsKICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW2Zyb250LCBvdXRdKTsKICB9CgogIHJldHVybiBvdXQ7Cn07CgpESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gZ2V0UHVibGljS2V5KGVuYykgewog
IHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wdWIsIGVuYyk7Cn07CgpESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIGdldFByaXZhdGVLZXkoZW5jKSB7CiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3ByaXYsIGVuYyk7Cn07CgpESC5wcm90b3R5cGUuZ2V0UHJpbWUgPSBmdW5jdGlvbiAoZW5jKSB7CiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX19wcmltZSwgZW5jKTsKfTsKCkRILnByb3RvdHlwZS5nZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZW5jKSB7CiAgcmV0dXJu
IGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX2dlbiwgZW5jKTsKfTsKCkRILnByb3RvdHlwZS5zZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZ2VuLCBlbmMpIHsKICBlbmMgPSBlbmMgfHwgJ3V0ZjgnOwoKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW4pKSB7CiAgICBnZW4gPSBuZXcgQnVmZmVyKGdlbiwgZW5jKTsKICB9CgogIHRoaXMuX19nZW4gPSBnZW47CiAgdGhpcy5fZ2VuID0gbmV3IEJOKGdlbik7CiAgcmV0dXJuIHRoaXM7Cn07CgpmdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZShibiwgZW5jKSB7CiAgdmFyIGJ1ZiA9IG5l
dyBCdWZmZXIoYm4udG9BcnJheSgpKTsKCiAgaWYgKCFlbmMpIHsKICAgIHJldHVybiBidWY7CiAgfSBlbHNlIHsKICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKTsKICB9Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiLi9nZW5lcmF0ZVByaW1lIjoyMzgsImJuLmpzIjoyNDAsImJ1ZmZlciI6MjE2LCJtaWxsZXItcmFiaW4iOjMyNiwicmFuZG9tYnl0ZXMiOjM2Nn1dLDIzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciByYW5kb21CeXRl
cyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZpbmRQcmltZTsKZmluZFByaW1lLnNpbXBsZVNpZXZlID0gc2ltcGxlU2lldmU7CmZpbmRQcmltZS5mZXJtYXRUZXN0ID0gZmVybWF0VGVzdDsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgVFdFTlRZRk9VUiA9IG5ldyBCTigyNCk7Cgp2YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTsKCnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpOwp2YXIgT05FID0gbmV3IEJOKDEpOwp2YXIgVFdPID0g
bmV3IEJOKDIpOwp2YXIgRklWRSA9IG5ldyBCTig1KTsKdmFyIFNJWFRFRU4gPSBuZXcgQk4oMTYpOwp2YXIgRUlHSFQgPSBuZXcgQk4oOCk7CnZhciBURU4gPSBuZXcgQk4oMTApOwp2YXIgVEhSRUUgPSBuZXcgQk4oMyk7CnZhciBTRVZFTiA9IG5ldyBCTig3KTsKdmFyIEVMRVZFTiA9IG5ldyBCTigxMSk7CnZhciBGT1VSID0gbmV3IEJOKDQpOwp2YXIgVFdFTFZFID0gbmV3IEJOKDEyKTsKdmFyIHByaW1lcyA9IG51bGw7CgpmdW5jdGlvbiBfZ2V0UHJpbWVzKCkgewogIGlmIChwcmltZXMgIT09IG51bGwpIHJldHVybiBwcmlt
ZXM7CiAgdmFyIGxpbWl0ID0gMHgxMDAwMDA7CiAgdmFyIHJlcyA9IFtdOwogIHJlc1swXSA9IDI7CgogIGZvciAodmFyIGkgPSAxLCBrID0gMzsgayA8IGxpbWl0OyBrICs9IDIpIHsKICAgIHZhciBzcXJ0ID0gTWF0aC5jZWlsKE1hdGguc3FydChrKSk7CgogICAgZm9yICh2YXIgaiA9IDA7IGogPCBpICYmIHJlc1tqXSA8PSBzcXJ0OyBqKyspIHsKICAgICAgaWYgKGsgJSByZXNbal0gPT09IDApIGJyZWFrOwogICAgfQoKICAgIGlmIChpICE9PSBqICYmIHJlc1tqXSA8PSBzcXJ0KSBjb250aW51ZTsKICAgIHJlc1tpKytdID0g
azsKICB9CgogIHByaW1lcyA9IHJlczsKICByZXR1cm4gcmVzOwp9CgpmdW5jdGlvbiBzaW1wbGVTaWV2ZShwKSB7CiAgdmFyIHByaW1lcyA9IF9nZXRQcmltZXMoKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmltZXMubGVuZ3RoOyBpKyspIHsKICAgIGlmIChwLm1vZG4ocHJpbWVzW2ldKSA9PT0gMCkgewogICAgICBpZiAocC5jbXBuKHByaW1lc1tpXSkgPT09IDApIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiB0
cnVlOwp9CgpmdW5jdGlvbiBmZXJtYXRUZXN0KHApIHsKICB2YXIgcmVkID0gQk4ubW9udChwKTsKICByZXR1cm4gVFdPLnRvUmVkKHJlZCkucmVkUG93KHAuc3VibigxKSkuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDA7Cn0KCmZ1bmN0aW9uIGZpbmRQcmltZShiaXRzLCBnZW4pIHsKICBpZiAoYml0cyA8IDE2KSB7CiAgICAvLyB0aGlzIGlzIHdoYXQgb3BlbnNzbCBkb2VzCiAgICBpZiAoZ2VuID09PSAyIHx8IGdlbiA9PT0gNSkgewogICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDdiXSk7CiAgICB9IGVsc2UgewogICAgICBy
ZXR1cm4gbmV3IEJOKFsweDhjLCAweDI3XSk7CiAgICB9CiAgfQoKICBnZW4gPSBuZXcgQk4oZ2VuKTsKICB2YXIgbnVtLCBuMjsKCiAgd2hpbGUgKHRydWUpIHsKICAgIG51bSA9IG5ldyBCTihyYW5kb21CeXRlcyhNYXRoLmNlaWwoYml0cyAvIDgpKSk7CgogICAgd2hpbGUgKG51bS5iaXRMZW5ndGgoKSA+IGJpdHMpIHsKICAgICAgbnVtLmlzaHJuKDEpOwogICAgfQoKICAgIGlmIChudW0uaXNFdmVuKCkpIHsKICAgICAgbnVtLmlhZGQoT05FKTsKICAgIH0KCiAgICBpZiAoIW51bS50ZXN0bigxKSkgewogICAgICBudW0uaWFk
ZChUV08pOwogICAgfQoKICAgIGlmICghZ2VuLmNtcChUV08pKSB7CiAgICAgIHdoaWxlIChudW0ubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7CiAgICAgICAgbnVtLmlhZGQoRk9VUik7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoIWdlbi5jbXAoRklWRSkpIHsKICAgICAgd2hpbGUgKG51bS5tb2QoVEVOKS5jbXAoVEhSRUUpKSB7CiAgICAgICAgbnVtLmlhZGQoRk9VUik7CiAgICAgIH0KICAgIH0KCiAgICBuMiA9IG51bS5zaHJuKDEpOwoKICAgIGlmIChzaW1wbGVTaWV2ZShuMikgJiYgc2ltcGxlU2lldmUobnVtKSAm
JiBmZXJtYXRUZXN0KG4yKSAmJiBmZXJtYXRUZXN0KG51bSkgJiYgbWlsbGVyUmFiaW4udGVzdChuMikgJiYgbWlsbGVyUmFiaW4udGVzdChudW0pKSB7CiAgICAgIHJldHVybiBudW07CiAgICB9CiAgfQp9Cgp9LHsiYm4uanMiOjI0MCwibWlsbGVyLXJhYmluIjozMjYsInJhbmRvbWJ5dGVzIjozNjZ9XSwyMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cz17CiAgICAibW9kcDEiOiB7CiAgICAgICAgImdlbiI6ICIwMiIsCiAgICAgICAgInByaW1lIjogImZmZmZmZmZmZmZmZmZmZmZj
OTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2M2EzNjIwZmZmZmZmZmZmZmZmZmZmZiIKICAgIH0sCiAgICAibW9kcDIiOiB7CiAgICAgICAgImdlbiI6ICIwMiIsCiAgICAgICAgInByaW1lIjogImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2Nj
NzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U2NTM4MWZmZmZmZmZmZmZmZmZmZmYiCiAgICB9LAogICAgIm1vZHA1IjogewogICAgICAgICJnZW4iOiAiMDIiLAogICAgICAgICJwcmltZSI6ICJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBk
YzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjM3ZWQ2YjBiZmY1Y2I2ZjQwNmI3ZWRlZTM4NmJmYjVhODk5ZmE1YWU5ZjI0MTE3YzRiMWZlNjQ5Mjg2NjUxZWNlNDViM2RjMjAwN2NiOGExNjNiZjA1OThkYTQ4MzYxYzU1ZDM5YTY5MTYzZmE4ZmQyNGNmNWY4MzY1NWQyM2RjYTNhZDk2MWM2MmYzNTYyMDg1NTJiYjllZDUyOTA3NzA5Njk2NmQ2NzBjMzU0
ZTRhYmM5ODA0ZjE3NDZjMDhjYTIzNzMyN2ZmZmZmZmZmZmZmZmZmZmYiCiAgICB9LAogICAgIm1vZHAxNCI6IHsKICAgICAgICAiZ2VuIjogIjAyIiwKICAgICAgICAicHJpbWUiOiAiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUz
ODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2ExODIxN2MzMjkwNWU0NjJlMzZjZTNiZTM5ZTc3MmMxODBlODYwMzliMjc4M2EyZWMwN2EyOGZiNWM1NWRmMDZmNGM1MmM5ZGUyYmNiZjY5NTU4MTcxODM5OTU0OTdjZWE5NTZhZTUxNWQyMjYxODk4ZmEwNTEwMTU3MjhlNWE4YWFjYWE2
OGZmZmZmZmZmZmZmZmZmZmYiCiAgICB9LAogICAgIm1vZHAxNSI6IHsKICAgICAgICAiZ2VuIjogIjAyIiwKICAgICAgICAicHJpbWUiOiAiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0
YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2ExODIxN2MzMjkwNWU0NjJlMzZjZTNiZTM5ZTc3MmMxODBlODYwMzliMjc4M2EyZWMwN2EyOGZiNWM1NWRmMDZmNGM1MmM5ZGUyYmNiZjY5NTU4MTcxODM5OTU0OTdjZWE5NTZhZTUxNWQyMjYxODk4ZmEwNTEwMTU3MjhlNWE4YWFhYzQyZGFkMzMxNzBkMDQ1MDdhMzNhODU1MjFh
YmRmMWNiYTY0ZWNmYjg1MDQ1OGRiZWYwYThhZWE3MTU3NWQwNjBjN2RiMzk3MGY4NWE2ZTFlNGM3YWJmNWFlOGNkYjA5MzNkNzFlOGM5NGUwNGEyNTYxOWRjZWUzZDIyNjFhZDJlZTZiZjEyZmZhMDZkOThhMDg2NGQ4NzYwMjczM2VjODZhNjQ1MjFmMmIxODE3N2IyMDBjYmJlMTE3NTc3YTYxNWQ2Yzc3MDk4OGMwYmFkOTQ2ZTIwOGUyNGZhMDc0ZTVhYjMxNDNkYjViZmNlMGZkMTA4ZTRiODJkMTIwYTkzYWQyY2FmZmZmZmZmZmZmZmZmZmZmIgogICAgfSwKICAgICJtb2RwMTYiOiB7CiAgICAgICAgImdlbiI6ICIwMiIsCiAgICAg
ICAgInByaW1lIjogImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1
ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhYWM0MmRhZDMzMTcwZDA0NTA3YTMzYTg1NTIxYWJkZjFjYmE2NGVjZmI4NTA0NThkYmVmMGE4YWVhNzE1NzVkMDYwYzdkYjM5NzBmODVhNmUxZTRjN2FiZjVhZThjZGIw
OTMzZDcxZThjOTRlMDRhMjU2MTlkY2VlM2QyMjYxYWQyZWU2YmYxMmZmYTA2ZDk4YTA4NjRkODc2MDI3MzNlYzg2YTY0NTIxZjJiMTgxNzdiMjAwY2JiZTExNzU3N2E2MTVkNmM3NzA5ODhjMGJhZDk0NmUyMDhlMjRmYTA3NGU1YWIzMTQzZGI1YmZjZTBmZDEwOGU0YjgyZDEyMGE5MjEwODAxMWE3MjNjMTJhNzg3ZTZkNzg4NzE5YTEwYmRiYTViMjY5OWMzMjcxODZhZjRlMjNjMWE5NDY4MzRiNjE1MGJkYTI1ODNlOWNhMmFkNDRjZThkYmJiYzJkYjA0ZGU4ZWY5MmU4ZWZjMTQxZmJlY2FhNjI4N2M1OTQ3NGU2YmMwNWQ5OWIyOTY0
ZmEwOTBjM2EyMjMzYmExODY1MTViZTdlZDFmNjEyOTcwY2VlMmQ3YWZiODFiZGQ3NjIxNzA0ODFjZDAwNjkxMjdkNWIwNWFhOTkzYjRlYTk4OGQ4ZmRkYzE4NmZmYjdkYzkwYTZjMDhmNGRmNDM1YzkzNDA2MzE5OWZmZmZmZmZmZmZmZmZmZmYiCiAgICB9LAogICAgIm1vZHAxNyI6IHsKICAgICAgICAiZ2VuIjogIjAyIiwKICAgICAgICAicHJpbWUiOiAiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5
NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2ExODIxN2MzMjkwNWU0NjJlMzZjZTNiZTM5ZTc3MmMxODBlODYw
MzliMjc4M2EyZWMwN2EyOGZiNWM1NWRmMDZmNGM1MmM5ZGUyYmNiZjY5NTU4MTcxODM5OTU0OTdjZWE5NTZhZTUxNWQyMjYxODk4ZmEwNTEwMTU3MjhlNWE4YWFhYzQyZGFkMzMxNzBkMDQ1MDdhMzNhODU1MjFhYmRmMWNiYTY0ZWNmYjg1MDQ1OGRiZWYwYThhZWE3MTU3NWQwNjBjN2RiMzk3MGY4NWE2ZTFlNGM3YWJmNWFlOGNkYjA5MzNkNzFlOGM5NGUwNGEyNTYxOWRjZWUzZDIyNjFhZDJlZTZiZjEyZmZhMDZkOThhMDg2NGQ4NzYwMjczM2VjODZhNjQ1MjFmMmIxODE3N2IyMDBjYmJlMTE3NTc3YTYxNWQ2Yzc3MDk4OGMwYmFk
OTQ2ZTIwOGUyNGZhMDc0ZTVhYjMxNDNkYjViZmNlMGZkMTA4ZTRiODJkMTIwYTkyMTA4MDExYTcyM2MxMmE3ODdlNmQ3ODg3MTlhMTBiZGJhNWIyNjk5YzMyNzE4NmFmNGUyM2MxYTk0NjgzNGI2MTUwYmRhMjU4M2U5Y2EyYWQ0NGNlOGRiYmJjMmRiMDRkZThlZjkyZThlZmMxNDFmYmVjYWE2Mjg3YzU5NDc0ZTZiYzA1ZDk5YjI5NjRmYTA5MGMzYTIyMzNiYTE4NjUxNWJlN2VkMWY2MTI5NzBjZWUyZDdhZmI4MWJkZDc2MjE3MDQ4MWNkMDA2OTEyN2Q1YjA1YWE5OTNiNGVhOTg4ZDhmZGRjMTg2ZmZiN2RjOTBhNmMwOGY0ZGY0MzVj
OTM0MDI4NDkyMzZjM2ZhYjRkMjdjNzAyNmMxZDRkY2IyNjAyNjQ2ZGVjOTc1MWU3NjNkYmEzN2JkZjhmZjk0MDZhZDllNTMwZWU1ZGIzODJmNDEzMDAxYWViMDZhNTNlZDkwMjdkODMxMTc5NzI3YjA4NjVhODkxOGRhM2VkYmViY2Y5YjE0ZWQ0NGNlNmNiYWNlZDRiYjFiZGI3ZjE0NDdlNmNjMjU0YjMzMjA1MTUxMmJkN2FmNDI2ZmI4ZjQwMTM3OGNkMmJmNTk4M2NhMDFjNjRiOTJlY2YwMzJlYTE1ZDE3MjFkMDNmNDgyZDdjZTZlNzRmZWY2ZDU1ZTcwMmY0Njk4MGM4MmI1YTg0MDMxOTAwYjFjOWU1OWU3Yzk3ZmJlYzdlOGYzMjNh
OTdhN2UzNmNjODhiZTBmMWQ0NWI3ZmY1ODVhYzU0YmQ0MDdiMjJiNDE1NGFhY2M4ZjZkN2ViZjQ4ZTFkODE0Y2M1ZWQyMGY4MDM3ZTBhNzk3MTVlZWYyOWJlMzI4MDZhMWQ1OGJiN2M1ZGE3NmY1NTBhYTNkOGExZmJmZjBlYjE5Y2NiMWEzMTNkNTVjZGE1NmM5ZWMyZWYyOTYzMjM4N2ZlOGQ3NmUzYzA0NjgwNDNlOGY2NjNmNDg2MGVlMTJiZjJkNWIwYjc0NzRkNmU2OTRmOTFlNmRjYzQwMjRmZmZmZmZmZmZmZmZmZmZmIgogICAgfSwKICAgICJtb2RwMTgiOiB7CiAgICAgICAgImdlbiI6ICIwMiIsCiAgICAgICAgInByaW1lIjog
ImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNh
M2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhYWM0MmRhZDMzMTcwZDA0NTA3YTMzYTg1NTIxYWJkZjFjYmE2NGVjZmI4NTA0NThkYmVmMGE4YWVhNzE1NzVkMDYwYzdkYjM5NzBmODVhNmUxZTRjN2FiZjVhZThjZGIwOTMzZDcxZThjOTRl
MDRhMjU2MTlkY2VlM2QyMjYxYWQyZWU2YmYxMmZmYTA2ZDk4YTA4NjRkODc2MDI3MzNlYzg2YTY0NTIxZjJiMTgxNzdiMjAwY2JiZTExNzU3N2E2MTVkNmM3NzA5ODhjMGJhZDk0NmUyMDhlMjRmYTA3NGU1YWIzMTQzZGI1YmZjZTBmZDEwOGU0YjgyZDEyMGE5MjEwODAxMWE3MjNjMTJhNzg3ZTZkNzg4NzE5YTEwYmRiYTViMjY5OWMzMjcxODZhZjRlMjNjMWE5NDY4MzRiNjE1MGJkYTI1ODNlOWNhMmFkNDRjZThkYmJiYzJkYjA0ZGU4ZWY5MmU4ZWZjMTQxZmJlY2FhNjI4N2M1OTQ3NGU2YmMwNWQ5OWIyOTY0ZmEwOTBjM2EyMjMz
YmExODY1MTViZTdlZDFmNjEyOTcwY2VlMmQ3YWZiODFiZGQ3NjIxNzA0ODFjZDAwNjkxMjdkNWIwNWFhOTkzYjRlYTk4OGQ4ZmRkYzE4NmZmYjdkYzkwYTZjMDhmNGRmNDM1YzkzNDAyODQ5MjM2YzNmYWI0ZDI3YzcwMjZjMWQ0ZGNiMjYwMjY0NmRlYzk3NTFlNzYzZGJhMzdiZGY4ZmY5NDA2YWQ5ZTUzMGVlNWRiMzgyZjQxMzAwMWFlYjA2YTUzZWQ5MDI3ZDgzMTE3OTcyN2IwODY1YTg5MThkYTNlZGJlYmNmOWIxNGVkNDRjZTZjYmFjZWQ0YmIxYmRiN2YxNDQ3ZTZjYzI1NGIzMzIwNTE1MTJiZDdhZjQyNmZiOGY0MDEzNzhjZDJi
ZjU5ODNjYTAxYzY0YjkyZWNmMDMyZWExNWQxNzIxZDAzZjQ4MmQ3Y2U2ZTc0ZmVmNmQ1NWU3MDJmNDY5ODBjODJiNWE4NDAzMTkwMGIxYzllNTllN2M5N2ZiZWM3ZThmMzIzYTk3YTdlMzZjYzg4YmUwZjFkNDViN2ZmNTg1YWM1NGJkNDA3YjIyYjQxNTRhYWNjOGY2ZDdlYmY0OGUxZDgxNGNjNWVkMjBmODAzN2UwYTc5NzE1ZWVmMjliZTMyODA2YTFkNThiYjdjNWRhNzZmNTUwYWEzZDhhMWZiZmYwZWIxOWNjYjFhMzEzZDU1Y2RhNTZjOWVjMmVmMjk2MzIzODdmZThkNzZlM2MwNDY4MDQzZThmNjYzZjQ4NjBlZTEyYmYyZDViMGI3
NDc0ZDZlNjk0ZjkxZTZkYmUxMTU5NzRhMzkyNmYxMmZlZTVlNDM4Nzc3Y2I2YTkzMmRmOGNkOGJlYzRkMDczYjkzMWJhM2JjODMyYjY4ZDlkZDMwMDc0MWZhN2JmOGFmYzQ3ZWQyNTc2ZjY5MzZiYTQyNDY2M2FhYjYzOWM1YWU0ZjU2ODM0MjNiNDc0MmJmMWM5NzgyMzhmMTZjYmUzOWQ2NTJkZTNmZGI4YmVmYzg0OGFkOTIyMjIyZTA0YTQwMzdjMDcxM2ViNTdhODFhMjNmMGM3MzQ3M2ZjNjQ2Y2VhMzA2YjRiY2JjODg2MmY4Mzg1ZGRmYTlkNGI3ZmEyYzA4N2U4Nzk2ODMzMDNlZDViZGQzYTA2MmIzY2Y1YjNhMjc4YTY2ZDJhMTNm
ODNmNDRmODJkZGYzMTBlZTA3NGFiNmEzNjQ1OTdlODk5YTAyNTVkYzE2NGYzMWNjNTA4NDY4NTFkZjlhYjQ4MTk1ZGVkN2VhMWIxZDUxMGJkN2VlNzRkNzNmYWYzNmJjMzFlY2ZhMjY4MzU5MDQ2ZjRlYjg3OWY5MjQwMDk0MzhiNDgxYzZjZDc4ODlhMDAyZWQ1ZWUzODJiYzkxOTBkYTZmYzAyNmU0Nzk1NThlNDQ3NTY3N2U5YWE5ZTMwNTBlMjc2NTY5NGRmYzgxZjU2ZTg4MGI5NmU3MTYwYzk4MGRkOThlZGQzZGZmZmZmZmZmZmZmZmZmZmZmIgogICAgfQp9Cn0se31dLDI0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0
cyl7CmFyZ3VtZW50c1s0XVsxODFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiYnVmZmVyIjoxODUsImR1cCI6MTgxfV0sMjQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIGVsbGlwdGljID0gZXhwb3J0czsKZWxsaXB0aWMudmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247CmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpOwplbGxpcHRpYy5yYW5kID0gcmVxdWlyZSgnYnJvcmFuZCcpOwplbGxpcHRp
Yy5jdXJ2ZSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmUnKTsKZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTsgLy8gUHJvdG9jb2xzCgplbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTsKZWxsaXB0aWMuZWRkc2EgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VkZHNhJyk7Cgp9LHsiLi4vcGFja2FnZS5qc29uIjoyNTcsIi4vZWxsaXB0aWMvY3VydmUiOjI0NCwiLi9lbGxpcHRpYy9jdXJ2ZXMiOjI0NywiLi9lbGxpcHRpYy9lYyI6MjQ4LCIuL2VsbGlwdGljL2VkZHNhIjoy
NTEsIi4vZWxsaXB0aWMvdXRpbHMiOjI1NSwiYnJvcmFuZCI6MTg0fV0sMjQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7Cgp2YXIgZ2V0TkFGID0gdXRpbHMuZ2V0TkFGOwp2YXIgZ2V0SlNGID0gdXRpbHMuZ2V0SlNGOwp2YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0OwoKZnVuY3Rpb24gQmFzZUN1cnZlKHR5cGUsIGNvbmYpIHsKICB0aGlzLnR5cGUgPSB0eXBlOwogIHRoaXMu
cCA9IG5ldyBCTihjb25mLnAsIDE2KTsgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZQoKICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBCTi5yZWQoY29uZi5wcmltZSkgOiBCTi5tb250KHRoaXMucCk7IC8vIFVzZWZ1bCBmb3IgbWFueSBjdXJ2ZXMKCiAgdGhpcy56ZXJvID0gbmV3IEJOKDApLnRvUmVkKHRoaXMucmVkKTsKICB0aGlzLm9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzLnJlZCk7CiAgdGhpcy50d28gPSBuZXcgQk4oMikudG9SZWQodGhpcy5yZWQp
OyAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbAoKICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IEJOKGNvbmYubiwgMTYpOwogIHRoaXMuZyA9IGNvbmYuZyAmJiB0aGlzLnBvaW50RnJvbUpTT04oY29uZi5nLCBjb25mLmdSZWQpOyAvLyBUZW1wb3JhcnkgYXJyYXlzCgogIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTsKICB0aGlzLl93bmFmVDIgPSBuZXcgQXJyYXkoNCk7CiAgdGhpcy5fd25hZlQzID0gbmV3IEFycmF5KDQpOwogIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTsKICB0aGlzLl9iaXRMZW5ndGgg
PSB0aGlzLm4gPyB0aGlzLm4uYml0TGVuZ3RoKCkgOiAwOyAvLyBHZW5lcmFsaXplZCBHcmVnIE1heHdlbGwncyB0cmljawoKICB2YXIgYWRqdXN0Q291bnQgPSB0aGlzLm4gJiYgdGhpcy5wLmRpdih0aGlzLm4pOwoKICBpZiAoIWFkanVzdENvdW50IHx8IGFkanVzdENvdW50LmNtcG4oMTAwKSA+IDApIHsKICAgIHRoaXMucmVkTiA9IG51bGw7CiAgfSBlbHNlIHsKICAgIHRoaXMuX21heHdlbGxUcmljayA9IHRydWU7CiAgICB0aGlzLnJlZE4gPSB0aGlzLm4udG9SZWQodGhpcy5yZWQpOwogIH0KfQoKbW9kdWxlLmV4cG9ydHMg
PSBCYXNlQ3VydmU7CgpCYXNlQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoKSB7CiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTsKfTsKCkJhc2VDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpOwp9OwoKQmFzZUN1cnZlLnByb3RvdHlwZS5fZml4ZWROYWZNdWwgPSBmdW5jdGlvbiBfZml4ZWROYWZNdWwocCwgaykgewogIGFzc2VydChwLnByZWNvbXB1dGVkKTsKCiAgdmFyIGRvdWJs
ZXMgPSBwLl9nZXREb3VibGVzKCk7CgogIHZhciBuYWYgPSBnZXROQUYoaywgMSwgdGhpcy5fYml0TGVuZ3RoKTsKICB2YXIgSSA9ICgxIDw8IGRvdWJsZXMuc3RlcCArIDEpIC0gKGRvdWJsZXMuc3RlcCAlIDIgPT09IDAgPyAyIDogMSk7CiAgSSAvPSAzOyAvLyBUcmFuc2xhdGUgaW50byBtb3JlIHdpbmRvd2VkIGZvcm0KCiAgdmFyIHJlcHIgPSBbXTsKCiAgZm9yICh2YXIgaiA9IDA7IGogPCBuYWYubGVuZ3RoOyBqICs9IGRvdWJsZXMuc3RlcCkgewogICAgdmFyIG5hZlcgPSAwOwoKICAgIGZvciAodmFyIGsgPSBqICsgZG91
Ymxlcy5zdGVwIC0gMTsgayA+PSBqOyBrLS0pIHsKICAgICAgbmFmVyA9IChuYWZXIDw8IDEpICsgbmFmW2tdOwogICAgfQoKICAgIHJlcHIucHVzaChuYWZXKTsKICB9CgogIHZhciBhID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7CiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTsKCiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHsKICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVwci5sZW5ndGg7IGorKykgewogICAgICB2YXIgbmFmVyA9IHJlcHJbal07CiAgICAgIGlmIChuYWZXID09
PSBpKSBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7ZWxzZSBpZiAobmFmVyA9PT0gLWkpIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKTsKICAgIH0KCiAgICBhID0gYS5hZGQoYik7CiAgfQoKICByZXR1cm4gYS50b1AoKTsKfTsKCkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWwgPSBmdW5jdGlvbiBfd25hZk11bChwLCBrKSB7CiAgdmFyIHcgPSA0OyAvLyBQcmVjb21wdXRlIHdpbmRvdwoKICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKHcpOwoKICB3ID0gbmFmUG9pbnRz
LnduZDsKICB2YXIgd25kID0gbmFmUG9pbnRzLnBvaW50czsgLy8gR2V0IE5BRiBmb3JtCgogIHZhciBuYWYgPSBnZXROQUYoaywgdywgdGhpcy5fYml0TGVuZ3RoKTsgLy8gQWRkIGB0aGlzYCooTisxKSBmb3IgZXZlcnkgdy1OQUYgaW5kZXgKCiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpOwoKICBmb3IgKHZhciBpID0gbmFmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAvLyBDb3VudCB6ZXJvZXMKICAgIGZvciAodmFyIGsgPSAwOyBpID49IDAgJiYgbmFmW2ldID09PSAwOyBpLS0pIHsK
ICAgICAgaysrOwogICAgfQoKICAgIGlmIChpID49IDApIGsrKzsKICAgIGFjYyA9IGFjYy5kYmxwKGspOwogICAgaWYgKGkgPCAwKSBicmVhazsKICAgIHZhciB6ID0gbmFmW2ldOwogICAgYXNzZXJ0KHogIT09IDApOwoKICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKSB7CiAgICAgIC8vIEogKy0gUAogICAgICBpZiAoeiA+IDApIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbeiAtIDEgPj4gMV0pO2Vsc2UgYWNjID0gYWNjLm1peGVkQWRkKHduZFsteiAtIDEgPj4gMV0ubmVnKCkpOwogICAgfSBlbHNlIHsKICAgICAgLy8gSiAr
LSBKCiAgICAgIGlmICh6ID4gMCkgYWNjID0gYWNjLmFkZCh3bmRbeiAtIDEgPj4gMV0pO2Vsc2UgYWNjID0gYWNjLmFkZCh3bmRbLXogLSAxID4+IDFdLm5lZygpKTsKICAgIH0KICB9CgogIHJldHVybiBwLnR5cGUgPT09ICdhZmZpbmUnID8gYWNjLnRvUCgpIDogYWNjOwp9OwoKQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bEFkZCA9IGZ1bmN0aW9uIF93bmFmTXVsQWRkKGRlZlcsIHBvaW50cywgY29lZmZzLCBsZW4sIGphY29iaWFuUmVzdWx0KSB7CiAgdmFyIHduZFdpZHRoID0gdGhpcy5fd25hZlQxOwogIHZhciB3bmQg
PSB0aGlzLl93bmFmVDI7CiAgdmFyIG5hZiA9IHRoaXMuX3duYWZUMzsgLy8gRmlsbCBhbGwgYXJyYXlzCgogIHZhciBtYXggPSAwOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICB2YXIgcCA9IHBvaW50c1tpXTsKCiAgICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKGRlZlcpOwoKICAgIHduZFdpZHRoW2ldID0gbmFmUG9pbnRzLnduZDsKICAgIHduZFtpXSA9IG5hZlBvaW50cy5wb2ludHM7CiAgfSAvLyBDb21iIHNtYWxsIHdpbmRvdyBOQUZzCgoKICBmb3IgKHZhciBpID0gbGVuIC0gMTsg
aSA+PSAxOyBpIC09IDIpIHsKICAgIHZhciBhID0gaSAtIDE7CiAgICB2YXIgYiA9IGk7CgogICAgaWYgKHduZFdpZHRoW2FdICE9PSAxIHx8IHduZFdpZHRoW2JdICE9PSAxKSB7CiAgICAgIG5hZlthXSA9IGdldE5BRihjb2VmZnNbYV0sIHduZFdpZHRoW2FdLCB0aGlzLl9iaXRMZW5ndGgpOwogICAgICBuYWZbYl0gPSBnZXROQUYoY29lZmZzW2JdLCB3bmRXaWR0aFtiXSwgdGhpcy5fYml0TGVuZ3RoKTsKICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2FdLmxlbmd0aCwgbWF4KTsKICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2Jd
Lmxlbmd0aCwgbWF4KTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgdmFyIGNvbWIgPSBbcG9pbnRzW2FdLAogICAgLyogMSAqLwogICAgbnVsbCwKICAgIC8qIDMgKi8KICAgIG51bGwsCiAgICAvKiA1ICovCiAgICBwb2ludHNbYl0KICAgIC8qIDcgKi8KICAgIF07IC8vIFRyeSB0byBhdm9pZCBQcm9qZWN0aXZlIHBvaW50cywgaWYgcG9zc2libGUKCiAgICBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55KSA9PT0gMCkgewogICAgICBjb21iWzFdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0pOwogICAgICBjb21i
WzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7CiAgICB9IGVsc2UgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueS5yZWROZWcoKSkgPT09IDApIHsKICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pOwogICAgICBjb21iWzJdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpOwogICAgfSBlbHNlIHsKICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pOwogICAgICBjb21iWzJdID0gcG9pbnRz
W2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7CiAgICB9CgogICAgdmFyIGluZGV4ID0gWy0zLAogICAgLyogLTEgLTEgKi8KICAgIC0xLAogICAgLyogLTEgMCAqLwogICAgLTUsCiAgICAvKiAtMSAxICovCiAgICAtNywKICAgIC8qIDAgLTEgKi8KICAgIDAsCiAgICAvKiAwIDAgKi8KICAgIDcsCiAgICAvKiAwIDEgKi8KICAgIDUsCiAgICAvKiAxIC0xICovCiAgICAxLAogICAgLyogMSAwICovCiAgICAzCiAgICAvKiAxIDEgKi8KICAgIF07CiAgICB2YXIganNmID0gZ2V0SlNGKGNvZWZmc1thXSwgY29lZmZz
W2JdKTsKICAgIG1heCA9IE1hdGgubWF4KGpzZlswXS5sZW5ndGgsIG1heCk7CiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTsKICAgIG5hZltiXSA9IG5ldyBBcnJheShtYXgpOwoKICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWF4OyBqKyspIHsKICAgICAgdmFyIGphID0ganNmWzBdW2pdIHwgMDsKICAgICAgdmFyIGpiID0ganNmWzFdW2pdIHwgMDsKICAgICAgbmFmW2FdW2pdID0gaW5kZXhbKGphICsgMSkgKiAzICsgKGpiICsgMSldOwogICAgICBuYWZbYl1bal0gPSAwOwogICAgICB3bmRbYV0gPSBjb21iOwogICAgfQog
IH0KCiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpOwogIHZhciB0bXAgPSB0aGlzLl93bmFmVDQ7CgogIGZvciAodmFyIGkgPSBtYXg7IGkgPj0gMDsgaS0tKSB7CiAgICB2YXIgayA9IDA7CgogICAgd2hpbGUgKGkgPj0gMCkgewogICAgICB2YXIgemVybyA9IHRydWU7CgogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7CiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDsKICAgICAgICBpZiAodG1wW2pdICE9PSAwKSB6ZXJvID0gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICgh
emVybykgYnJlYWs7CiAgICAgIGsrKzsKICAgICAgaS0tOwogICAgfQoKICAgIGlmIChpID49IDApIGsrKzsKICAgIGFjYyA9IGFjYy5kYmxwKGspOwogICAgaWYgKGkgPCAwKSBicmVhazsKCiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7CiAgICAgIHZhciB6ID0gdG1wW2pdOwogICAgICB2YXIgcDsKICAgICAgaWYgKHogPT09IDApIGNvbnRpbnVlO2Vsc2UgaWYgKHogPiAwKSBwID0gd25kW2pdW3ogLSAxID4+IDFdO2Vsc2UgaWYgKHogPCAwKSBwID0gd25kW2pdWy16IC0gMSA+PiAxXS5uZWcoKTsKICAgICAg
aWYgKHAudHlwZSA9PT0gJ2FmZmluZScpIGFjYyA9IGFjYy5taXhlZEFkZChwKTtlbHNlIGFjYyA9IGFjYy5hZGQocCk7CiAgICB9CiAgfSAvLyBaZXJvaWZ5IHJlZmVyZW5jZXMKCgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIHduZFtpXSA9IG51bGw7CiAgfQoKICBpZiAoamFjb2JpYW5SZXN1bHQpIHJldHVybiBhY2M7ZWxzZSByZXR1cm4gYWNjLnRvUCgpOwp9OwoKZnVuY3Rpb24gQmFzZVBvaW50KGN1cnZlLCB0eXBlKSB7CiAgdGhpcy5jdXJ2ZSA9IGN1cnZlOwogIHRoaXMudHlwZSA9IHR5cGU7CiAg
dGhpcy5wcmVjb21wdXRlZCA9IG51bGw7Cn0KCkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7CgpCYXNlUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEoKQovKm90aGVyKi8KewogIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7Cn07CgpCYXNlUG9pbnQucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7CiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7Cn07CgpCYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9p
bnQoYnl0ZXMsIGVuYykgewogIGJ5dGVzID0gdXRpbHMudG9BcnJheShieXRlcywgZW5jKTsKICB2YXIgbGVuID0gdGhpcy5wLmJ5dGVMZW5ndGgoKTsgLy8gdW5jb21wcmVzc2VkLCBoeWJyaWQtb2RkLCBoeWJyaWQtZXZlbgoKICBpZiAoKGJ5dGVzWzBdID09PSAweDA0IHx8IGJ5dGVzWzBdID09PSAweDA2IHx8IGJ5dGVzWzBdID09PSAweDA3KSAmJiBieXRlcy5sZW5ndGggLSAxID09PSAyICogbGVuKSB7CiAgICBpZiAoYnl0ZXNbMF0gPT09IDB4MDYpIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDAp
O2Vsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KSBhc3NlcnQoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAxKTsKICAgIHZhciByZXMgPSB0aGlzLnBvaW50KGJ5dGVzLnNsaWNlKDEsIDEgKyBsZW4pLCBieXRlcy5zbGljZSgxICsgbGVuLCAxICsgMiAqIGxlbikpOwogICAgcmV0dXJuIHJlczsKICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiYgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7CiAgICByZXR1cm4gdGhpcy5wb2ludEZyb21YKGJ5dGVzLnNsaWNlKDEs
IDEgKyBsZW4pLCBieXRlc1swXSA9PT0gMHgwMyk7CiAgfQoKICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcG9pbnQgZm9ybWF0Jyk7Cn07CgpCYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZUNvbXByZXNzZWQgPSBmdW5jdGlvbiBlbmNvZGVDb21wcmVzc2VkKGVuYykgewogIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpOwp9OwoKQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7CiAgdmFyIGxlbiA9IHRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCk7CiAgdmFyIHggPSB0
aGlzLmdldFgoKS50b0FycmF5KCdiZScsIGxlbik7CiAgaWYgKGNvbXBhY3QpIHJldHVybiBbdGhpcy5nZXRZKCkuaXNFdmVuKCkgPyAweDAyIDogMHgwM10uY29uY2F0KHgpOwogIHJldHVybiBbMHgwNF0uY29uY2F0KHgsIHRoaXMuZ2V0WSgpLnRvQXJyYXkoJ2JlJywgbGVuKSk7Cn07CgpCYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShlbmMsIGNvbXBhY3QpIHsKICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMuX2VuY29kZShjb21wYWN0KSwgZW5jKTsKfTsKCkJhc2VQb2ludC5wcm90b3R5cGUu
cHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUocG93ZXIpIHsKICBpZiAodGhpcy5wcmVjb21wdXRlZCkgcmV0dXJuIHRoaXM7CiAgdmFyIHByZWNvbXB1dGVkID0gewogICAgZG91YmxlczogbnVsbCwKICAgIG5hZjogbnVsbCwKICAgIGJldGE6IG51bGwKICB9OwogIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTsKICBwcmVjb21wdXRlZC5kb3VibGVzID0gdGhpcy5fZ2V0RG91Ymxlcyg0LCBwb3dlcik7CiAgcHJlY29tcHV0ZWQuYmV0YSA9IHRoaXMuX2dldEJldGEoKTsKICB0aGlzLnByZWNv
bXB1dGVkID0gcHJlY29tcHV0ZWQ7CiAgcmV0dXJuIHRoaXM7Cn07CgpCYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykgewogIGlmICghdGhpcy5wcmVjb21wdXRlZCkgcmV0dXJuIGZhbHNlOwogIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzOwogIGlmICghZG91YmxlcykgcmV0dXJuIGZhbHNlOwogIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApOwp9OwoKQmFz
ZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7CiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzKSByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzOwogIHZhciBkb3VibGVzID0gW3RoaXNdOwogIHZhciBhY2MgPSB0aGlzOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHsKICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3RlcDsgaisrKSB7CiAgICAgIGFjYyA9IGFjYy5kYmwoKTsKICAg
IH0KCiAgICBkb3VibGVzLnB1c2goYWNjKTsKICB9CgogIHJldHVybiB7CiAgICBzdGVwOiBzdGVwLAogICAgcG9pbnRzOiBkb3VibGVzCiAgfTsKfTsKCkJhc2VQb2ludC5wcm90b3R5cGUuX2dldE5BRlBvaW50cyA9IGZ1bmN0aW9uIF9nZXROQUZQb2ludHMod25kKSB7CiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5uYWYpIHJldHVybiB0aGlzLnByZWNvbXB1dGVkLm5hZjsKICB2YXIgcmVzID0gW3RoaXNdOwogIHZhciBtYXggPSAoMSA8PCB3bmQpIC0gMTsKICB2YXIgZGJsID0gbWF4ID09PSAx
ID8gbnVsbCA6IHRoaXMuZGJsKCk7CgogIGZvciAodmFyIGkgPSAxOyBpIDwgbWF4OyBpKyspIHsKICAgIHJlc1tpXSA9IHJlc1tpIC0gMV0uYWRkKGRibCk7CiAgfQoKICByZXR1cm4gewogICAgd25kOiB3bmQsCiAgICBwb2ludHM6IHJlcwogIH07Cn07CgpCYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7CiAgcmV0dXJuIG51bGw7Cn07CgpCYXNlUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKGspIHsKICB2YXIgciA9IHRoaXM7CgogIGZvciAodmFyIGkgPSAwOyBp
IDwgazsgaSsrKSB7CiAgICByID0gci5kYmwoKTsKICB9CgogIHJldHVybiByOwp9OwoKfSx7Ii4uL3V0aWxzIjoyNTUsImJuLmpzIjoyNTZ9XSwyNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpOwoKdmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDsKCmZ1bmN0
aW9uIEVkd2FyZHNDdXJ2ZShjb25mKSB7CiAgLy8gTk9URTogSW1wb3J0YW50IGFzIHdlIGFyZSBjcmVhdGluZyBwb2ludCBpbiBCYXNlLmNhbGwoKQogIHRoaXMudHdpc3RlZCA9IChjb25mLmEgfCAwKSAhPT0gMTsKICB0aGlzLm1PbmVBID0gdGhpcy50d2lzdGVkICYmIChjb25mLmEgfCAwKSA9PT0gLTE7CiAgdGhpcy5leHRlbmRlZCA9IHRoaXMubU9uZUE7CiAgQmFzZS5jYWxsKHRoaXMsICdlZHdhcmRzJywgY29uZik7CiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnVtb2QodGhpcy5yZWQubSk7CiAgdGhpcy5hID0g
dGhpcy5hLnRvUmVkKHRoaXMucmVkKTsKICB0aGlzLmMgPSBuZXcgQk4oY29uZi5jLCAxNikudG9SZWQodGhpcy5yZWQpOwogIHRoaXMuYzIgPSB0aGlzLmMucmVkU3FyKCk7CiAgdGhpcy5kID0gbmV3IEJOKGNvbmYuZCwgMTYpLnRvUmVkKHRoaXMucmVkKTsKICB0aGlzLmRkID0gdGhpcy5kLnJlZEFkZCh0aGlzLmQpOwogIGFzc2VydCghdGhpcy50d2lzdGVkIHx8IHRoaXMuYy5mcm9tUmVkKCkuY21wbigxKSA9PT0gMCk7CiAgdGhpcy5vbmVDID0gKGNvbmYuYyB8IDApID09PSAxOwp9Cgppbmhlcml0cyhFZHdhcmRzQ3VydmUs
IEJhc2UpOwptb2R1bGUuZXhwb3J0cyA9IEVkd2FyZHNDdXJ2ZTsKCkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEEgPSBmdW5jdGlvbiBfbXVsQShudW0pIHsKICBpZiAodGhpcy5tT25lQSkgcmV0dXJuIG51bS5yZWROZWcoKTtlbHNlIHJldHVybiB0aGlzLmEucmVkTXVsKG51bSk7Cn07CgpFZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxDID0gZnVuY3Rpb24gX211bEMobnVtKSB7CiAgaWYgKHRoaXMub25lQykgcmV0dXJuIG51bTtlbHNlIHJldHVybiB0aGlzLmMucmVkTXVsKG51bSk7Cn07IC8vIEp1c3QgZm9yIGNvbXBh
dGliaWxpdHkgd2l0aCBTaG9ydCBjdXJ2ZQoKCkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHosIHQpIHsKICByZXR1cm4gdGhpcy5wb2ludCh4LCB5LCB6LCB0KTsKfTsKCkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIHBvaW50RnJvbVgoeCwgb2RkKSB7CiAgeCA9IG5ldyBCTih4LCAxNik7CiAgaWYgKCF4LnJlZCkgeCA9IHgudG9SZWQodGhpcy5yZWQpOwogIHZhciB4MiA9IHgucmVkU3FyKCk7CiAgdmFyIHJocyA9IHRoaXMuYzIucmVkU3Vi
KHRoaXMuYS5yZWRNdWwoeDIpKTsKICB2YXIgbGhzID0gdGhpcy5vbmUucmVkU3ViKHRoaXMuYzIucmVkTXVsKHRoaXMuZCkucmVkTXVsKHgyKSk7CiAgdmFyIHkyID0gcmhzLnJlZE11bChsaHMucmVkSW52bSgpKTsKICB2YXIgeSA9IHkyLnJlZFNxcnQoKTsKICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTsKICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpOwogIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNP
ZGQpIHkgPSB5LnJlZE5lZygpOwogIHJldHVybiB0aGlzLnBvaW50KHgsIHkpOwp9OwoKRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21ZID0gZnVuY3Rpb24gcG9pbnRGcm9tWSh5LCBvZGQpIHsKICB5ID0gbmV3IEJOKHksIDE2KTsKICBpZiAoIXkucmVkKSB5ID0geS50b1JlZCh0aGlzLnJlZCk7IC8vIHheMiA9ICh5XjIgLSBjXjIpIC8gKGNeMiBkIHleMiAtIGEpCgogIHZhciB5MiA9IHkucmVkU3FyKCk7CiAgdmFyIGxocyA9IHkyLnJlZFN1Yih0aGlzLmMyKTsKICB2YXIgcmhzID0geTIucmVkTXVsKHRoaXMuZCku
cmVkTXVsKHRoaXMuYzIpLnJlZFN1Yih0aGlzLmEpOwogIHZhciB4MiA9IGxocy5yZWRNdWwocmhzLnJlZEludm0oKSk7CgogIGlmICh4Mi5jbXAodGhpcy56ZXJvKSA9PT0gMCkgewogICAgaWYgKG9kZCkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7ZWxzZSByZXR1cm4gdGhpcy5wb2ludCh0aGlzLnplcm8sIHkpOwogIH0KCiAgdmFyIHggPSB4Mi5yZWRTcXJ0KCk7CiAgaWYgKHgucmVkU3FyKCkucmVkU3ViKHgyKS5jbXAodGhpcy56ZXJvKSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7
CiAgaWYgKHguZnJvbVJlZCgpLmlzT2RkKCkgIT09IG9kZCkgeCA9IHgucmVkTmVnKCk7CiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7Cn07CgpFZHdhcmRzQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHsKICBpZiAocG9pbnQuaXNJbmZpbml0eSgpKSByZXR1cm4gdHJ1ZTsgLy8gQ3VydmU6IEEgKiBYXjIgKyBZXjIgPSBDXjIgKiAoMSArIEQgKiBYXjIgKiBZXjIpCgogIHBvaW50Lm5vcm1hbGl6ZSgpOwogIHZhciB4MiA9IHBvaW50LngucmVkU3FyKCk7CiAgdmFyIHkyID0gcG9p
bnQueS5yZWRTcXIoKTsKICB2YXIgbGhzID0geDIucmVkTXVsKHRoaXMuYSkucmVkQWRkKHkyKTsKICB2YXIgcmhzID0gdGhpcy5jMi5yZWRNdWwodGhpcy5vbmUucmVkQWRkKHRoaXMuZC5yZWRNdWwoeDIpLnJlZE11bCh5MikpKTsKICByZXR1cm4gbGhzLmNtcChyaHMpID09PSAwOwp9OwoKZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIHosIHQpIHsKICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpOwoKICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHsK
ICAgIHRoaXMueCA9IHRoaXMuY3VydmUuemVybzsKICAgIHRoaXMueSA9IHRoaXMuY3VydmUub25lOwogICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7CiAgICB0aGlzLnQgPSB0aGlzLmN1cnZlLnplcm87CiAgICB0aGlzLnpPbmUgPSB0cnVlOwogIH0gZWxzZSB7CiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpOwogICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTsKICAgIHRoaXMueiA9IHogPyBuZXcgQk4oeiwgMTYpIDogdGhpcy5jdXJ2ZS5vbmU7CiAgICB0aGlzLnQgPSB0ICYmIG5ldyBCTih0LCAxNik7CiAgICBpZiAoIXRo
aXMueC5yZWQpIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7CiAgICBpZiAoIXRoaXMueS5yZWQpIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7CiAgICBpZiAoIXRoaXMuei5yZWQpIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7CiAgICBpZiAodGhpcy50ICYmICF0aGlzLnQucmVkKSB0aGlzLnQgPSB0aGlzLnQudG9SZWQodGhpcy5jdXJ2ZS5yZWQpOwogICAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTsgLy8gVXNlIGV4dGVuZGVkIGNv
b3JkaW5hdGVzCgogICAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQgJiYgIXRoaXMudCkgewogICAgICB0aGlzLnQgPSB0aGlzLngucmVkTXVsKHRoaXMueSk7CiAgICAgIGlmICghdGhpcy56T25lKSB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpOwogICAgfQogIH0KfQoKaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTsKCkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7CiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMs
IG9iaik7Cn07CgpFZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgeiwgdCkgewogIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeSwgeiwgdCk7Cn07CgpQb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmopIHsKICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSwgb2JqWzJdKTsKfTsKClBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHsKICBpZiAodGhpcy5pc0luZmluaXR5KCkpIHJldHVybiAnPEVD
IFBvaW50IEluZmluaXR5Pic7CiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+JzsKfTsKClBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHsKICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZAogIHJldHVybiB0
aGlzLnguY21wbigwKSA9PT0gMCAmJiAodGhpcy55LmNtcCh0aGlzLnopID09PSAwIHx8IHRoaXMuek9uZSAmJiB0aGlzLnkuY21wKHRoaXMuY3VydmUuYykgPT09IDApOwp9OwoKUG9pbnQucHJvdG90eXBlLl9leHREYmwgPSBmdW5jdGlvbiBfZXh0RGJsKCkgewogIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbAogIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDgtaHdjZAogIC8vIDRNICsgNFMKICAvLyBBID0gWDFeMgogIHZhciBhID0gdGhpcy54LnJlZFNxcigpOyAvLyBC
ID0gWTFeMgoKICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTsgLy8gQyA9IDIgKiBaMV4yCgogIHZhciBjID0gdGhpcy56LnJlZFNxcigpOwogIGMgPSBjLnJlZElBZGQoYyk7IC8vIEQgPSBhICogQQoKICB2YXIgZCA9IHRoaXMuY3VydmUuX211bEEoYSk7IC8vIEUgPSAoWDEgKyBZMSleMiAtIEEgLSBCCgoKICB2YXIgZSA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYik7IC8vIEcgPSBEICsgQgoKICB2YXIgZyA9IGQucmVkQWRkKGIpOyAvLyBGID0gRyAtIEMKCiAgdmFyIGYgPSBn
LnJlZFN1YihjKTsgLy8gSCA9IEQgLSBCCgogIHZhciBoID0gZC5yZWRTdWIoYik7IC8vIFgzID0gRSAqIEYKCiAgdmFyIG54ID0gZS5yZWRNdWwoZik7IC8vIFkzID0gRyAqIEgKCiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7IC8vIFQzID0gRSAqIEgKCiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7IC8vIFozID0gRiAqIEcKCiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7CiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpOwp9OwoKUG9pbnQucHJvdG90eXBlLl9wcm9qRGJsID0gZnVuY3Rpb24gX3Byb2pEYmwoKSB7
CiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sCiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1iYmpscAogIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDctYmwKICAvLyBhbmQgb3RoZXJzCiAgLy8gR2VuZXJhbGx5IDNNICsgNFMgb3IgMk0gKyA0UwogIC8vIEIgPSAoWDEgKyBZMSleMgogIHZhciBiID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpOyAvLyBDID0gWDFeMgoKICB2YXIgYyA9IHRoaXMueC5yZWRTcXIoKTsgLy8gRCA9IFkxXjIKCiAgdmFyIGQg
PSB0aGlzLnkucmVkU3FyKCk7CiAgdmFyIG54OwogIHZhciBueTsKICB2YXIgbno7CgogIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHsKICAgIC8vIEUgPSBhICogQwogICAgdmFyIGUgPSB0aGlzLmN1cnZlLl9tdWxBKGMpOyAvLyBGID0gRSArIEQKCgogICAgdmFyIGYgPSBlLnJlZEFkZChkKTsKCiAgICBpZiAodGhpcy56T25lKSB7CiAgICAgIC8vIFgzID0gKEIgLSBDIC0gRCkgKiAoRiAtIDIpCiAgICAgIG54ID0gYi5yZWRTdWIoYykucmVkU3ViKGQpLnJlZE11bChmLnJlZFN1Yih0aGlzLmN1cnZlLnR3bykpOyAvLyBZMyA9
IEYgKiAoRSAtIEQpCgogICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTsgLy8gWjMgPSBGXjIgLSAyICogRgoKICAgICAgbnogPSBmLnJlZFNxcigpLnJlZFN1YihmKS5yZWRTdWIoZik7CiAgICB9IGVsc2UgewogICAgICAvLyBIID0gWjFeMgogICAgICB2YXIgaCA9IHRoaXMuei5yZWRTcXIoKTsgLy8gSiA9IEYgLSAyICogSAoKICAgICAgdmFyIGogPSBmLnJlZFN1YihoKS5yZWRJU3ViKGgpOyAvLyBYMyA9IChCLUMtRCkqSgoKICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRJU3ViKGQpLnJlZE11bChqKTsgLy8gWTMg
PSBGICogKEUgLSBEKQoKICAgICAgbnkgPSBmLnJlZE11bChlLnJlZFN1YihkKSk7IC8vIFozID0gRiAqIEoKCiAgICAgIG56ID0gZi5yZWRNdWwoaik7CiAgICB9CiAgfSBlbHNlIHsKICAgIC8vIEUgPSBDICsgRAogICAgdmFyIGUgPSBjLnJlZEFkZChkKTsgLy8gSCA9IChjICogWjEpXjIKCiAgICB2YXIgaCA9IHRoaXMuY3VydmUuX211bEModGhpcy56KS5yZWRTcXIoKTsgLy8gSiA9IEUgLSAyICogSAoKCiAgICB2YXIgaiA9IGUucmVkU3ViKGgpLnJlZFN1YihoKTsgLy8gWDMgPSBjICogKEIgLSBFKSAqIEoKCiAgICBueCA9
IHRoaXMuY3VydmUuX211bEMoYi5yZWRJU3ViKGUpKS5yZWRNdWwoaik7IC8vIFkzID0gYyAqIEUgKiAoQyAtIEQpCgogICAgbnkgPSB0aGlzLmN1cnZlLl9tdWxDKGUpLnJlZE11bChjLnJlZElTdWIoZCkpOyAvLyBaMyA9IEUgKiBKCgogICAgbnogPSBlLnJlZE11bChqKTsKICB9CgogIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnopOwp9OwoKUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHsKICBpZiAodGhpcy5pc0luZmluaXR5KCkpIHJldHVybiB0aGlzOyAvLyBEb3VibGUgaW4gZXh0ZW5k
ZWQgY29vcmRpbmF0ZXMKCiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpIHJldHVybiB0aGlzLl9leHREYmwoKTtlbHNlIHJldHVybiB0aGlzLl9wcm9qRGJsKCk7Cn07CgpQb2ludC5wcm90b3R5cGUuX2V4dEFkZCA9IGZ1bmN0aW9uIF9leHRBZGQocCkgewogIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbAogIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtaHdjZC0zCiAgLy8gOE0KICAvLyBBID0gKFkxIC0gWDEpICogKFkyIC0gWDIpCiAgdmFyIGEgPSB0aGlzLnkucmVk
U3ViKHRoaXMueCkucmVkTXVsKHAueS5yZWRTdWIocC54KSk7IC8vIEIgPSAoWTEgKyBYMSkgKiAoWTIgKyBYMikKCiAgdmFyIGIgPSB0aGlzLnkucmVkQWRkKHRoaXMueCkucmVkTXVsKHAueS5yZWRBZGQocC54KSk7IC8vIEMgPSBUMSAqIGsgKiBUMgoKICB2YXIgYyA9IHRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKHAudCk7IC8vIEQgPSBaMSAqIDIgKiBaMgoKICB2YXIgZCA9IHRoaXMuei5yZWRNdWwocC56LnJlZEFkZChwLnopKTsgLy8gRSA9IEIgLSBBCgogIHZhciBlID0gYi5yZWRTdWIoYSk7IC8vIEYg
PSBEIC0gQwoKICB2YXIgZiA9IGQucmVkU3ViKGMpOyAvLyBHID0gRCArIEMKCiAgdmFyIGcgPSBkLnJlZEFkZChjKTsgLy8gSCA9IEIgKyBBCgogIHZhciBoID0gYi5yZWRBZGQoYSk7IC8vIFgzID0gRSAqIEYKCiAgdmFyIG54ID0gZS5yZWRNdWwoZik7IC8vIFkzID0gRyAqIEgKCiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7IC8vIFQzID0gRSAqIEgKCiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7IC8vIFozID0gRiAqIEcKCiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7CiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwg
bnQpOwp9OwoKUG9pbnQucHJvdG90eXBlLl9wcm9qQWRkID0gZnVuY3Rpb24gX3Byb2pBZGQocCkgewogIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLXByb2plY3RpdmUuaHRtbAogIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtYmJqbHAKICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA3LWJsCiAgLy8gMTBNICsgMVMKICAvLyBBID0gWjEgKiBaMgogIHZhciBhID0gdGhpcy56LnJlZE11bChwLnopOyAvLyBCID0gQV4yCgogIHZhciBiID0gYS5yZWRTcXIoKTsgLy8gQyA9IFgxICogWDIKCiAgdmFy
IGMgPSB0aGlzLngucmVkTXVsKHAueCk7IC8vIEQgPSBZMSAqIFkyCgogIHZhciBkID0gdGhpcy55LnJlZE11bChwLnkpOyAvLyBFID0gZCAqIEMgKiBECgogIHZhciBlID0gdGhpcy5jdXJ2ZS5kLnJlZE11bChjKS5yZWRNdWwoZCk7IC8vIEYgPSBCIC0gRQoKICB2YXIgZiA9IGIucmVkU3ViKGUpOyAvLyBHID0gQiArIEUKCiAgdmFyIGcgPSBiLnJlZEFkZChlKTsgLy8gWDMgPSBBICogRiAqICgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBDIC0gRCkKCiAgdmFyIHRtcCA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwocC54
LnJlZEFkZChwLnkpKS5yZWRJU3ViKGMpLnJlZElTdWIoZCk7CiAgdmFyIG54ID0gYS5yZWRNdWwoZikucmVkTXVsKHRtcCk7CiAgdmFyIG55OwogIHZhciBuejsKCiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkgewogICAgLy8gWTMgPSBBICogRyAqIChEIC0gYSAqIEMpCiAgICBueSA9IGEucmVkTXVsKGcpLnJlZE11bChkLnJlZFN1Yih0aGlzLmN1cnZlLl9tdWxBKGMpKSk7IC8vIFozID0gRiAqIEcKCiAgICBueiA9IGYucmVkTXVsKGcpOwogIH0gZWxzZSB7CiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBDKQogICAgbnkgPSBh
LnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIoYykpOyAvLyBaMyA9IGMgKiBGICogRwoKICAgIG56ID0gdGhpcy5jdXJ2ZS5fbXVsQyhmKS5yZWRNdWwoZyk7CiAgfQoKICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTsKfTsKClBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkgewogIGlmICh0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuIHA7CiAgaWYgKHAuaXNJbmZpbml0eSgpKSByZXR1cm4gdGhpczsKICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZCkgcmV0dXJuIHRoaXMuX2V4dEFkZChwKTtl
bHNlIHJldHVybiB0aGlzLl9wcm9qQWRkKHApOwp9OwoKUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7CiAgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtlbHNlIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspOwp9OwoKUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcCwgazIpIHsKICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbdGhpcywgcF0sIFtrMSwgazJdLCAyLCBm
YWxzZSk7Cn07CgpQb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAsIGsyKSB7CiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgW3RoaXMsIHBdLCBbazEsIGsyXSwgMiwgdHJ1ZSk7Cn07CgpQb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkgewogIGlmICh0aGlzLnpPbmUpIHJldHVybiB0aGlzOyAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXMKCiAgdmFyIHppID0gdGhpcy56LnJlZEludm0oKTsKICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHpp
KTsKICB0aGlzLnkgPSB0aGlzLnkucmVkTXVsKHppKTsKICBpZiAodGhpcy50KSB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHppKTsKICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTsKICB0aGlzLnpPbmUgPSB0cnVlOwogIHJldHVybiB0aGlzOwp9OwoKUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHsKICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTmVnKCksIHRoaXMueSwgdGhpcy56LCB0aGlzLnQgJiYgdGhpcy50LnJlZE5lZygpKTsKfTsKClBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rp
b24gZ2V0WCgpIHsKICB0aGlzLm5vcm1hbGl6ZSgpOwogIHJldHVybiB0aGlzLnguZnJvbVJlZCgpOwp9OwoKUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkgewogIHRoaXMubm9ybWFsaXplKCk7CiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7Cn07CgpQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikgewogIHJldHVybiB0aGlzID09PSBvdGhlciB8fCB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMCAmJiB0aGlzLmdldFkoKS5jbXAob3RoZXIuZ2V0WSgpKSA9PT0gMDsK
fTsKClBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkgewogIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh0aGlzLnopOwogIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMCkgcmV0dXJuIHRydWU7CiAgdmFyIHhjID0geC5jbG9uZSgpOwogIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh0aGlzLnopOwoKICBmb3IgKDs7KSB7CiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7CiAgICBpZiAoeGMuY21wKHRoaXMuY3VydmUucCkgPj0gMCkgcmV0dXJuIGZhbHNlOwogICAg
cngucmVkSUFkZCh0KTsKICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMCkgcmV0dXJuIHRydWU7CiAgfQp9OyAvLyBDb21wYXRpYmlsaXR5IHdpdGggQmFzZUN1cnZlCgoKUG9pbnQucHJvdG90eXBlLnRvUCA9IFBvaW50LnByb3RvdHlwZS5ub3JtYWxpemU7ClBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IFBvaW50LnByb3RvdHlwZS5hZGQ7Cgp9LHsiLi4vdXRpbHMiOjI1NSwiLi9iYXNlIjoyNDIsImJuLmpzIjoyNTYsImluaGVyaXRzIjoyNzh9XSwyNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNl
IHN0cmljdCc7Cgp2YXIgY3VydmUgPSBleHBvcnRzOwpjdXJ2ZS5iYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7CmN1cnZlLnNob3J0ID0gcmVxdWlyZSgnLi9zaG9ydCcpOwpjdXJ2ZS5tb250ID0gcmVxdWlyZSgnLi9tb250Jyk7CmN1cnZlLmVkd2FyZHMgPSByZXF1aXJlKCcuL2Vkd2FyZHMnKTsKCn0seyIuL2Jhc2UiOjI0MiwiLi9lZHdhcmRzIjoyNDMsIi4vbW9udCI6MjQ1LCIuL3Nob3J0IjoyNDZ9XSwyNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgQk4gPSByZXF1aXJl
KCdibi5qcycpOwoKdmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKCnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKZnVuY3Rpb24gTW9udEN1cnZlKGNvbmYpIHsKICBCYXNlLmNhbGwodGhpcywgJ21vbnQnLCBjb25mKTsKICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpOwogIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7CiAgdGhpcy5pNCA9IG5ldyBCTig0KS50b1JlZCh0aGlz
LnJlZCkucmVkSW52bSgpOwogIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTsKICB0aGlzLmEyNCA9IHRoaXMuaTQucmVkTXVsKHRoaXMuYS5yZWRBZGQodGhpcy50d28pKTsKfQoKaW5oZXJpdHMoTW9udEN1cnZlLCBCYXNlKTsKbW9kdWxlLmV4cG9ydHMgPSBNb250Q3VydmU7CgpNb250Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHsKICB2YXIgeCA9IHBvaW50Lm5vcm1hbGl6ZSgpLng7CiAgdmFyIHgyID0geC5yZWRTcXIoKTsKICB2YXIgcmhzID0geDIucmVk
TXVsKHgpLnJlZEFkZCh4Mi5yZWRNdWwodGhpcy5hKSkucmVkQWRkKHgpOwogIHZhciB5ID0gcmhzLnJlZFNxcnQoKTsKICByZXR1cm4geS5yZWRTcXIoKS5jbXAocmhzKSA9PT0gMDsKfTsKCmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB6KSB7CiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ3Byb2plY3RpdmUnKTsKCiAgaWYgKHggPT09IG51bGwgJiYgeiA9PT0gbnVsbCkgewogICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7CiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLnplcm87CiAgfSBlbHNlIHsKICAgIHRo
aXMueCA9IG5ldyBCTih4LCAxNik7CiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpOwogICAgaWYgKCF0aGlzLngucmVkKSB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpOwogICAgaWYgKCF0aGlzLnoucmVkKSB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpOwogIH0KfQoKaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTsKCk1vbnRDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcywgZW5jKSB7CiAgcmV0dXJuIHRoaXMucG9pbnQo
dXRpbHMudG9BcnJheShieXRlcywgZW5jKSwgMSk7Cn07CgpNb250Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeikgewogIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeik7Cn07CgpNb250Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaikgewogIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopOwp9OwoKUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKCkgey8vIE5vLW9wCn07CgpQb2ludC5w
cm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoKSB7CiAgcmV0dXJuIHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKSk7Cn07CgpQb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmopIHsKICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSB8fCBjdXJ2ZS5vbmUpOwp9OwoKUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkgewogIGlmICh0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuICc8RUMg
UG9pbnQgSW5maW5pdHk+JzsKICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+JzsKfTsKClBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHsKICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZAogIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDsKfTsKClBvaW50LnByb3RvdHlwZS5kYmwg
PSBmdW5jdGlvbiBkYmwoKSB7CiAgLy8gaHR0cDovL2h5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1tb250Z29tLXh6Lmh0bWwjZG91YmxpbmctZGJsLTE5ODctbS0zCiAgLy8gMk0gKyAyUyArIDRBCiAgLy8gQSA9IFgxICsgWjEKICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTsgLy8gQUEgPSBBXjIKCiAgdmFyIGFhID0gYS5yZWRTcXIoKTsgLy8gQiA9IFgxIC0gWjEKCiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7IC8vIEJCID0gQl4yCgogIHZhciBiYiA9IGIucmVkU3FyKCk7IC8vIEMgPSBBQSAt
IEJCCgogIHZhciBjID0gYWEucmVkU3ViKGJiKTsgLy8gWDMgPSBBQSAqIEJCCgogIHZhciBueCA9IGFhLnJlZE11bChiYik7IC8vIFozID0gQyAqIChCQiArIEEyNCAqIEMpCgogIHZhciBueiA9IGMucmVkTXVsKGJiLnJlZEFkZCh0aGlzLmN1cnZlLmEyNC5yZWRNdWwoYykpKTsKICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnopOwp9OwoKUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCgpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpOwp9OwoKUG9p
bnQucHJvdG90eXBlLmRpZmZBZGQgPSBmdW5jdGlvbiBkaWZmQWRkKHAsIGRpZmYpIHsKICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkaWZmYWRkLWRhZGQtMTk4Ny1tLTMKICAvLyA0TSArIDJTICsgNkEKICAvLyBBID0gWDIgKyBaMgogIHZhciBhID0gdGhpcy54LnJlZEFkZCh0aGlzLnopOyAvLyBCID0gWDIgLSBaMgoKICB2YXIgYiA9IHRoaXMueC5yZWRTdWIodGhpcy56KTsgLy8gQyA9IFgzICsgWjMKCiAgdmFyIGMgPSBwLngucmVkQWRkKHAueik7IC8vIEQgPSBY
MyAtIFozCgogIHZhciBkID0gcC54LnJlZFN1YihwLnopOyAvLyBEQSA9IEQgKiBBCgogIHZhciBkYSA9IGQucmVkTXVsKGEpOyAvLyBDQiA9IEMgKiBCCgogIHZhciBjYiA9IGMucmVkTXVsKGIpOyAvLyBYNSA9IFoxICogKERBICsgQ0IpXjIKCiAgdmFyIG54ID0gZGlmZi56LnJlZE11bChkYS5yZWRBZGQoY2IpLnJlZFNxcigpKTsgLy8gWjUgPSBYMSAqIChEQSAtIENCKV4yCgogIHZhciBueiA9IGRpZmYueC5yZWRNdWwoZGEucmVkSVN1YihjYikucmVkU3FyKCkpOwogIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7
Cn07CgpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHsKICB2YXIgdCA9IGsuY2xvbmUoKTsKICB2YXIgYSA9IHRoaXM7IC8vIChOIC8gMikgKiBRICsgUQoKICB2YXIgYiA9IHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7IC8vIChOIC8gMikgKiBRCgogIHZhciBjID0gdGhpczsgLy8gUQoKICBmb3IgKHZhciBiaXRzID0gW107IHQuY21wbigwKSAhPT0gMDsgdC5pdXNocm4oMSkpIHsKICAgIGJpdHMucHVzaCh0LmFuZGxuKDEpKTsKICB9CgogIGZvciAodmFyIGkgPSBiaXRzLmxlbmd0aCAtIDE7IGkg
Pj0gMDsgaS0tKSB7CiAgICBpZiAoYml0c1tpXSA9PT0gMCkgewogICAgICAvLyBOICogUSArIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSkgKyAoTiAvIDIpICogUQogICAgICBhID0gYS5kaWZmQWRkKGIsIGMpOyAvLyBOICogUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKSkKCiAgICAgIGIgPSBiLmRibCgpOwogICAgfSBlbHNlIHsKICAgICAgLy8gTiAqIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSArICgoTiAvIDIpICogUSkKICAgICAgYiA9IGEuZGlmZkFkZChiLCBjKTsgLy8gTiAqIFEgKyBRID0gMiAqICgoTiAvIDIpICogUSArIFEp
CgogICAgICBhID0gYS5kYmwoKTsKICAgIH0KICB9CgogIHJldHVybiBiOwp9OwoKUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZCgpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpOwp9OwoKUG9pbnQucHJvdG90eXBlLmp1bWxBZGQgPSBmdW5jdGlvbiBqdW1sQWRkKCkgewogIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7Cn07CgpQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikg
ewogIHJldHVybiB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMDsKfTsKClBvaW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7CiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTsKICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTsKICByZXR1cm4gdGhpczsKfTsKClBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHsKICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXMKICB0aGlzLm5vcm1hbGl6ZSgpOwogIHJldHVybiB0aGlzLnguZnJv
bVJlZCgpOwp9OwoKfSx7Ii4uL3V0aWxzIjoyNTUsIi4vYmFzZSI6MjQyLCJibi5qcyI6MjU2LCJpbmhlcml0cyI6Mjc4fV0sMjQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTsKCnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7CgpmdW5jdGlvbiBTaG9ydEN1
cnZlKGNvbmYpIHsKICBCYXNlLmNhbGwodGhpcywgJ3Nob3J0JywgY29uZik7CiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTsKICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpOwogIHRoaXMudGludiA9IHRoaXMudHdvLnJlZEludm0oKTsKICB0aGlzLnplcm9BID0gdGhpcy5hLmZyb21SZWQoKS5jbXBuKDApID09PSAwOwogIHRoaXMudGhyZWVBID0gdGhpcy5hLmZyb21SZWQoKS5zdWIodGhpcy5wKS5jbXBuKC0zKSA9PT0gMDsgLy8gSWYgdGhlIGN1cnZlIGlz
IGVuZG9tb3JwaGljLCBwcmVjYWxjdWxhdGUgYmV0YSBhbmQgbGFtYmRhCgogIHRoaXMuZW5kbyA9IHRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTsKICB0aGlzLl9lbmRvV25hZlQxID0gbmV3IEFycmF5KDQpOwogIHRoaXMuX2VuZG9XbmFmVDIgPSBuZXcgQXJyYXkoNCk7Cn0KCmluaGVyaXRzKFNob3J0Q3VydmUsIEJhc2UpOwptb2R1bGUuZXhwb3J0cyA9IFNob3J0Q3VydmU7CgpTaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb21vcnBoaXNtID0gZnVuY3Rpb24gX2dldEVuZG9tb3JwaGlzbShjb25mKSB7CiAgLy8gTm8g
ZWZmaWNpZW50IGVuZG9tb3JwaGlzbQogIGlmICghdGhpcy56ZXJvQSB8fCAhdGhpcy5nIHx8ICF0aGlzLm4gfHwgdGhpcy5wLm1vZG4oMykgIT09IDEpIHJldHVybjsgLy8gQ29tcHV0ZSBiZXRhIGFuZCBsYW1iZGEsIHRoYXQgbGFtYmRhICogUCA9IChiZXRhICogUHg7IFB5KQoKICB2YXIgYmV0YTsKICB2YXIgbGFtYmRhOwoKICBpZiAoY29uZi5iZXRhKSB7CiAgICBiZXRhID0gbmV3IEJOKGNvbmYuYmV0YSwgMTYpLnRvUmVkKHRoaXMucmVkKTsKICB9IGVsc2UgewogICAgdmFyIGJldGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3Rz
KHRoaXMucCk7IC8vIENob29zZSB0aGUgc21hbGxlc3QgYmV0YQoKCiAgICBiZXRhID0gYmV0YXNbMF0uY21wKGJldGFzWzFdKSA8IDAgPyBiZXRhc1swXSA6IGJldGFzWzFdOwogICAgYmV0YSA9IGJldGEudG9SZWQodGhpcy5yZWQpOwogIH0KCiAgaWYgKGNvbmYubGFtYmRhKSB7CiAgICBsYW1iZGEgPSBuZXcgQk4oY29uZi5sYW1iZGEsIDE2KTsKICB9IGVsc2UgewogICAgLy8gQ2hvb3NlIHRoZSBsYW1iZGEgdGhhdCBpcyBtYXRjaGluZyBzZWxlY3RlZCBiZXRhCiAgICB2YXIgbGFtYmRhcyA9IHRoaXMuX2dldEVuZG9Sb290
cyh0aGlzLm4pOwoKICAgIGlmICh0aGlzLmcubXVsKGxhbWJkYXNbMF0pLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApIHsKICAgICAgbGFtYmRhID0gbGFtYmRhc1swXTsKICAgIH0gZWxzZSB7CiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMV07CiAgICAgIGFzc2VydCh0aGlzLmcubXVsKGxhbWJkYSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCk7CiAgICB9CiAgfSAvLyBHZXQgYmFzaXMgdmVjdG9ycywgdXNlZCBmb3IgYmFsYW5jZWQgbGVuZ3RoLXR3byByZXByZXNlbnRhdGlvbgoKCiAgdmFy
IGJhc2lzOwoKICBpZiAoY29uZi5iYXNpcykgewogICAgYmFzaXMgPSBjb25mLmJhc2lzLm1hcChmdW5jdGlvbiAodmVjKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYTogbmV3IEJOKHZlYy5hLCAxNiksCiAgICAgICAgYjogbmV3IEJOKHZlYy5iLCAxNikKICAgICAgfTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICBiYXNpcyA9IHRoaXMuX2dldEVuZG9CYXNpcyhsYW1iZGEpOwogIH0KCiAgcmV0dXJuIHsKICAgIGJldGE6IGJldGEsCiAgICBsYW1iZGE6IGxhbWJkYSwKICAgIGJhc2lzOiBiYXNpcwogIH07Cn07CgpTaG9ydEN1
cnZlLnByb3RvdHlwZS5fZ2V0RW5kb1Jvb3RzID0gZnVuY3Rpb24gX2dldEVuZG9Sb290cyhudW0pIHsKICAvLyBGaW5kIHJvb3RzIG9mIGZvciB4XjIgKyB4ICsgMSBpbiBGCiAgLy8gUm9vdCA9ICgtMSArLSBTcXJ0KC0zKSkgLyAyCiAgLy8KICB2YXIgcmVkID0gbnVtID09PSB0aGlzLnAgPyB0aGlzLnJlZCA6IEJOLm1vbnQobnVtKTsKICB2YXIgdGludiA9IG5ldyBCTigyKS50b1JlZChyZWQpLnJlZEludm0oKTsKICB2YXIgbnRpbnYgPSB0aW52LnJlZE5lZygpOwogIHZhciBzID0gbmV3IEJOKDMpLnRvUmVkKHJlZCkucmVk
TmVnKCkucmVkU3FydCgpLnJlZE11bCh0aW52KTsKICB2YXIgbDEgPSBudGludi5yZWRBZGQocykuZnJvbVJlZCgpOwogIHZhciBsMiA9IG50aW52LnJlZFN1YihzKS5mcm9tUmVkKCk7CiAgcmV0dXJuIFtsMSwgbDJdOwp9OwoKU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9CYXNpcyA9IGZ1bmN0aW9uIF9nZXRFbmRvQmFzaXMobGFtYmRhKSB7CiAgLy8gYXByeFNxcnQgPj0gc3FydCh0aGlzLm4pCiAgdmFyIGFwcnhTcXJ0ID0gdGhpcy5uLnVzaHJuKE1hdGguZmxvb3IodGhpcy5uLmJpdExlbmd0aCgpIC8gMikpOyAvLyAz
Ljc0CiAgLy8gUnVuIEVHQ0QsIHVudGlsIHIoTCArIDEpIDwgYXByeFNxcnQKCiAgdmFyIHUgPSBsYW1iZGE7CiAgdmFyIHYgPSB0aGlzLm4uY2xvbmUoKTsKICB2YXIgeDEgPSBuZXcgQk4oMSk7CiAgdmFyIHkxID0gbmV3IEJOKDApOwogIHZhciB4MiA9IG5ldyBCTigwKTsKICB2YXIgeTIgPSBuZXcgQk4oMSk7IC8vIE5PVEU6IGFsbCB2ZWN0b3JzIGFyZSByb290cyBvZjogYSArIGIgKiBsYW1iZGEgPSAwIChtb2QgbikKCiAgdmFyIGEwOwogIHZhciBiMDsgLy8gRmlyc3QgdmVjdG9yCgogIHZhciBhMTsKICB2YXIgYjE7IC8v
IFNlY29uZCB2ZWN0b3IKCiAgdmFyIGEyOwogIHZhciBiMjsKICB2YXIgcHJldlI7CiAgdmFyIGkgPSAwOwogIHZhciByOwogIHZhciB4OwoKICB3aGlsZSAodS5jbXBuKDApICE9PSAwKSB7CiAgICB2YXIgcSA9IHYuZGl2KHUpOwogICAgciA9IHYuc3ViKHEubXVsKHUpKTsKICAgIHggPSB4Mi5zdWIocS5tdWwoeDEpKTsKICAgIHZhciB5ID0geTIuc3ViKHEubXVsKHkxKSk7CgogICAgaWYgKCFhMSAmJiByLmNtcChhcHJ4U3FydCkgPCAwKSB7CiAgICAgIGEwID0gcHJldlIubmVnKCk7CiAgICAgIGIwID0geDE7CiAgICAgIGEx
ID0gci5uZWcoKTsKICAgICAgYjEgPSB4OwogICAgfSBlbHNlIGlmIChhMSAmJiArK2kgPT09IDIpIHsKICAgICAgYnJlYWs7CiAgICB9CgogICAgcHJldlIgPSByOwogICAgdiA9IHU7CiAgICB1ID0gcjsKICAgIHgyID0geDE7CiAgICB4MSA9IHg7CiAgICB5MiA9IHkxOwogICAgeTEgPSB5OwogIH0KCiAgYTIgPSByLm5lZygpOwogIGIyID0geDsKICB2YXIgbGVuMSA9IGExLnNxcigpLmFkZChiMS5zcXIoKSk7CiAgdmFyIGxlbjIgPSBhMi5zcXIoKS5hZGQoYjIuc3FyKCkpOwoKICBpZiAobGVuMi5jbXAobGVuMSkgPj0gMCkg
ewogICAgYTIgPSBhMDsKICAgIGIyID0gYjA7CiAgfSAvLyBOb3JtYWxpemUgc2lnbnMKCgogIGlmIChhMS5uZWdhdGl2ZSkgewogICAgYTEgPSBhMS5uZWcoKTsKICAgIGIxID0gYjEubmVnKCk7CiAgfQoKICBpZiAoYTIubmVnYXRpdmUpIHsKICAgIGEyID0gYTIubmVnKCk7CiAgICBiMiA9IGIyLm5lZygpOwogIH0KCiAgcmV0dXJuIFt7CiAgICBhOiBhMSwKICAgIGI6IGIxCiAgfSwgewogICAgYTogYTIsCiAgICBiOiBiMgogIH1dOwp9OwoKU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9TcGxpdCA9IGZ1bmN0aW9uIF9lbmRv
U3BsaXQoaykgewogIHZhciBiYXNpcyA9IHRoaXMuZW5kby5iYXNpczsKICB2YXIgdjEgPSBiYXNpc1swXTsKICB2YXIgdjIgPSBiYXNpc1sxXTsKICB2YXIgYzEgPSB2Mi5iLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pOwogIHZhciBjMiA9IHYxLmIubmVnKCkubXVsKGspLmRpdlJvdW5kKHRoaXMubik7CiAgdmFyIHAxID0gYzEubXVsKHYxLmEpOwogIHZhciBwMiA9IGMyLm11bCh2Mi5hKTsKICB2YXIgcTEgPSBjMS5tdWwodjEuYik7CiAgdmFyIHEyID0gYzIubXVsKHYyLmIpOyAvLyBDYWxjdWxhdGUgYW5zd2VyCgogIHZhciBr
MSA9IGsuc3ViKHAxKS5zdWIocDIpOwogIHZhciBrMiA9IHExLmFkZChxMikubmVnKCk7CiAgcmV0dXJuIHsKICAgIGsxOiBrMSwKICAgIGsyOiBrMgogIH07Cn07CgpTaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHsKICB4ID0gbmV3IEJOKHgsIDE2KTsKICBpZiAoIXgucmVkKSB4ID0geC50b1JlZCh0aGlzLnJlZCk7CiAgdmFyIHkyID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZCh4LnJlZE11bCh0aGlzLmEpKS5yZWRJQWRkKHRoaXMuYik7CiAgdmFyIHkg
PSB5Mi5yZWRTcXJ0KCk7CiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7IC8vIFhYWCBJcyB0aGVyZSBhbnkgd2F5IHRvIHRlbGwgaWYgdGhlIG51bWJlciBpcyBvZGQgd2l0aG91dCBjb252ZXJ0aW5nIGl0CiAgLy8gdG8gbm9uLXJlZCBmb3JtPwoKICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpOwogIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpIHkgPSB5LnJlZE5lZygpOwogIHJldHVybiB0aGlz
LnBvaW50KHgsIHkpOwp9OwoKU2hvcnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkgewogIGlmIChwb2ludC5pbmYpIHJldHVybiB0cnVlOwogIHZhciB4ID0gcG9pbnQueDsKICB2YXIgeSA9IHBvaW50Lnk7CiAgdmFyIGF4ID0gdGhpcy5hLnJlZE11bCh4KTsKICB2YXIgcmhzID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZChheCkucmVkSUFkZCh0aGlzLmIpOwogIHJldHVybiB5LnJlZFNxcigpLnJlZElTdWIocmhzKS5jbXBuKDApID09PSAwOwp9OwoKU2hvcnRDdXJ2ZS5w
cm90b3R5cGUuX2VuZG9XbmFmTXVsQWRkID0gZnVuY3Rpb24gX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCBqYWNvYmlhblJlc3VsdCkgewogIHZhciBucG9pbnRzID0gdGhpcy5fZW5kb1duYWZUMTsKICB2YXIgbmNvZWZmcyA9IHRoaXMuX2VuZG9XbmFmVDI7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc3BsaXQgPSB0aGlzLl9lbmRvU3BsaXQoY29lZmZzW2ldKTsKCiAgICB2YXIgcCA9IHBvaW50c1tpXTsKCiAgICB2YXIgYmV0YSA9IHAuX2dldEJldGEoKTsKCiAg
ICBpZiAoc3BsaXQuazEubmVnYXRpdmUpIHsKICAgICAgc3BsaXQuazEuaW5lZygpOwogICAgICBwID0gcC5uZWcodHJ1ZSk7CiAgICB9CgogICAgaWYgKHNwbGl0LmsyLm5lZ2F0aXZlKSB7CiAgICAgIHNwbGl0LmsyLmluZWcoKTsKICAgICAgYmV0YSA9IGJldGEubmVnKHRydWUpOwogICAgfQoKICAgIG5wb2ludHNbaSAqIDJdID0gcDsKICAgIG5wb2ludHNbaSAqIDIgKyAxXSA9IGJldGE7CiAgICBuY29lZmZzW2kgKiAyXSA9IHNwbGl0LmsxOwogICAgbmNvZWZmc1tpICogMiArIDFdID0gc3BsaXQuazI7CiAgfQoKICB2YXIg
cmVzID0gdGhpcy5fd25hZk11bEFkZCgxLCBucG9pbnRzLCBuY29lZmZzLCBpICogMiwgamFjb2JpYW5SZXN1bHQpOyAvLyBDbGVhbi11cCByZWZlcmVuY2VzIHRvIHBvaW50cyBhbmQgY29lZmZpY2llbnRzCgoKICBmb3IgKHZhciBqID0gMDsgaiA8IGkgKiAyOyBqKyspIHsKICAgIG5wb2ludHNbal0gPSBudWxsOwogICAgbmNvZWZmc1tqXSA9IG51bGw7CiAgfQoKICByZXR1cm4gcmVzOwp9OwoKZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIGlzUmVkKSB7CiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2Fm
ZmluZScpOwoKICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsKSB7CiAgICB0aGlzLnggPSBudWxsOwogICAgdGhpcy55ID0gbnVsbDsKICAgIHRoaXMuaW5mID0gdHJ1ZTsKICB9IGVsc2UgewogICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTsKICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7IC8vIEZvcmNlIHJlZGdvbWVyeSByZXByZXNlbnRhdGlvbiB3aGVuIGxvYWRpbmcgZnJvbSBKU09OCgogICAgaWYgKGlzUmVkKSB7CiAgICAgIHRoaXMueC5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7CiAgICAgIHRoaXMueS5mb3Jj
ZVJlZCh0aGlzLmN1cnZlLnJlZCk7CiAgICB9CgogICAgaWYgKCF0aGlzLngucmVkKSB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpOwogICAgaWYgKCF0aGlzLnkucmVkKSB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpOwogICAgdGhpcy5pbmYgPSBmYWxzZTsKICB9Cn0KCmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7CgpTaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIGlzUmVkKSB7CiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5
LCBpc1JlZCk7Cn07CgpTaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmosIHJlZCkgewogIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmosIHJlZCk7Cn07CgpQb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHsKICBpZiAoIXRoaXMuY3VydmUuZW5kbykgcmV0dXJuOwogIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkOwogIGlmIChwcmUgJiYgcHJlLmJldGEpIHJldHVybiBwcmUuYmV0YTsKICB2YXIgYmV0YSA9IHRoaXMu
Y3VydmUucG9pbnQodGhpcy54LnJlZE11bCh0aGlzLmN1cnZlLmVuZG8uYmV0YSksIHRoaXMueSk7CgogIGlmIChwcmUpIHsKICAgIHZhciBjdXJ2ZSA9IHRoaXMuY3VydmU7CgogICAgdmFyIGVuZG9NdWwgPSBmdW5jdGlvbiBlbmRvTXVsKHApIHsKICAgICAgcmV0dXJuIGN1cnZlLnBvaW50KHAueC5yZWRNdWwoY3VydmUuZW5kby5iZXRhKSwgcC55KTsKICAgIH07CgogICAgcHJlLmJldGEgPSBiZXRhOwogICAgYmV0YS5wcmVjb21wdXRlZCA9IHsKICAgICAgYmV0YTogbnVsbCwKICAgICAgbmFmOiBwcmUubmFmICYmIHsKICAg
ICAgICB3bmQ6IHByZS5uYWYud25kLAogICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKGVuZG9NdWwpCiAgICAgIH0sCiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHsKICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLAogICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChlbmRvTXVsKQogICAgICB9CiAgICB9OwogIH0KCiAgcmV0dXJuIGJldGE7Cn07CgpQb2ludC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkgewogIGlmICghdGhpcy5wcmVjb21wdXRlZCkgcmV0
dXJuIFt0aGlzLngsIHRoaXMueV07CiAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy5wcmVjb21wdXRlZCAmJiB7CiAgICBkb3VibGVzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMgJiYgewogICAgICBzdGVwOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMuc3RlcCwKICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMucG9pbnRzLnNsaWNlKDEpCiAgICB9LAogICAgbmFmOiB0aGlzLnByZWNvbXB1dGVkLm5hZiAmJiB7CiAgICAgIHduZDogdGhpcy5wcmVjb21wdXRlZC5uYWYud25kLAogICAgICBwb2lu
dHM6IHRoaXMucHJlY29tcHV0ZWQubmFmLnBvaW50cy5zbGljZSgxKQogICAgfQogIH1dOwp9OwoKUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqLCByZWQpIHsKICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIG9iaiA9IEpTT04ucGFyc2Uob2JqKTsKICB2YXIgcmVzID0gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7CiAgaWYgKCFvYmpbMl0pIHJldHVybiByZXM7CgogIGZ1bmN0aW9uIG9iajJwb2ludChvYmopIHsKICAgIHJldHVybiBjdXJ2ZS5wb2ludChvYmpbMF0sIG9i
alsxXSwgcmVkKTsKICB9CgogIHZhciBwcmUgPSBvYmpbMl07CiAgcmVzLnByZWNvbXB1dGVkID0gewogICAgYmV0YTogbnVsbCwKICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHsKICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCwKICAgICAgcG9pbnRzOiBbcmVzXS5jb25jYXQocHJlLmRvdWJsZXMucG9pbnRzLm1hcChvYmoycG9pbnQpKQogICAgfSwKICAgIG5hZjogcHJlLm5hZiAmJiB7CiAgICAgIHduZDogcHJlLm5hZi53bmQsCiAgICAgIHBvaW50czogW3Jlc10uY29uY2F0KHByZS5uYWYucG9pbnRzLm1hcChvYmoy
cG9pbnQpKQogICAgfQogIH07CiAgcmV0dXJuIHJlczsKfTsKClBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHsKICBpZiAodGhpcy5pc0luZmluaXR5KCkpIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7CiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7Cn07CgpQb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5p
dHkoKSB7CiAgcmV0dXJuIHRoaXMuaW5mOwp9OwoKUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7CiAgLy8gTyArIFAgPSBQCiAgaWYgKHRoaXMuaW5mKSByZXR1cm4gcDsgLy8gUCArIE8gPSBQCgogIGlmIChwLmluZikgcmV0dXJuIHRoaXM7IC8vIFAgKyBQID0gMlAKCiAgaWYgKHRoaXMuZXEocCkpIHJldHVybiB0aGlzLmRibCgpOyAvLyBQICsgKC1QKSA9IE8KCiAgaWYgKHRoaXMubmVnKCkuZXEocCkpIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpOyAvLyBQICsgUSA9IE8KCiAgaWYg
KHRoaXMueC5jbXAocC54KSA9PT0gMCkgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7CiAgdmFyIGMgPSB0aGlzLnkucmVkU3ViKHAueSk7CiAgaWYgKGMuY21wbigwKSAhPT0gMCkgYyA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIocC54KS5yZWRJbnZtKCkpOwogIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngpLnJlZElTdWIocC54KTsKICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpOwogIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7
Cn07CgpQb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkgewogIGlmICh0aGlzLmluZikgcmV0dXJuIHRoaXM7IC8vIDJQID0gTwoKICB2YXIgeXMxID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpOwogIGlmICh5czEuY21wbigwKSA9PT0gMCkgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7CiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7CiAgdmFyIHgyID0gdGhpcy54LnJlZFNxcigpOwogIHZhciBkeWludiA9IHlzMS5yZWRJbnZtKCk7CiAgdmFyIGMgPSB4Mi5yZWRBZGQoeDIpLnJlZElBZGQoeDIpLnJl
ZElBZGQoYSkucmVkTXVsKGR5aW52KTsKICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54LnJlZEFkZCh0aGlzLngpKTsKICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpOwogIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7Cn07CgpQb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7CiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7Cn07CgpQb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7CiAgcmV0dXJuIHRoaXMu
eS5mcm9tUmVkKCk7Cn07CgpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHsKICBrID0gbmV3IEJOKGssIDE2KTsKICBpZiAodGhpcy5pc0luZmluaXR5KCkpIHJldHVybiB0aGlzO2Vsc2UgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtlbHNlIGlmICh0aGlzLmN1cnZlLmVuZG8pIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChbdGhpc10sIFtrXSk7ZWxzZSByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTsK
fTsKClBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoazEsIHAyLCBrMikgewogIHZhciBwb2ludHMgPSBbdGhpcywgcDJdOwogIHZhciBjb2VmZnMgPSBbazEsIGsyXTsKICBpZiAodGhpcy5jdXJ2ZS5lbmRvKSByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMpO2Vsc2UgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIpOwp9OwoKUG9pbnQucHJvdG90eXBlLmptdWxBZGQgPSBmdW5jdGlvbiBqbXVsQWRkKGsxLCBwMiwgazIp
IHsKICB2YXIgcG9pbnRzID0gW3RoaXMsIHAyXTsKICB2YXIgY29lZmZzID0gW2sxLCBrMl07CiAgaWYgKHRoaXMuY3VydmUuZW5kbykgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCB0cnVlKTtlbHNlIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIHBvaW50cywgY29lZmZzLCAyLCB0cnVlKTsKfTsKClBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHsKICByZXR1cm4gdGhpcyA9PT0gcCB8fCB0aGlzLmluZiA9PT0gcC5pbmYgJiYgKHRoaXMuaW5mIHx8IHRo
aXMueC5jbXAocC54KSA9PT0gMCAmJiB0aGlzLnkuY21wKHAueSkgPT09IDApOwp9OwoKUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyhfcHJlY29tcHV0ZSkgewogIGlmICh0aGlzLmluZikgcmV0dXJuIHRoaXM7CiAgdmFyIHJlcyA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCkpOwoKICBpZiAoX3ByZWNvbXB1dGUgJiYgdGhpcy5wcmVjb21wdXRlZCkgewogICAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7CgogICAgdmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZShwKSB7CiAg
ICAgIHJldHVybiBwLm5lZygpOwogICAgfTsKCiAgICByZXMucHJlY29tcHV0ZWQgPSB7CiAgICAgIG5hZjogcHJlLm5hZiAmJiB7CiAgICAgICAgd25kOiBwcmUubmFmLnduZCwKICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChuZWdhdGUpCiAgICAgIH0sCiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHsKICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLAogICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChuZWdhdGUpCiAgICAgIH0KICAgIH07CiAgfQoKICByZXR1cm4gcmVzOwp9
OwoKUG9pbnQucHJvdG90eXBlLnRvSiA9IGZ1bmN0aW9uIHRvSigpIHsKICBpZiAodGhpcy5pbmYpIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTsKICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnksIHRoaXMuY3VydmUub25lKTsKICByZXR1cm4gcmVzOwp9OwoKZnVuY3Rpb24gSlBvaW50KGN1cnZlLCB4LCB5LCB6KSB7CiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2phY29iaWFuJyk7CgogIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwgJiYg
eiA9PT0gbnVsbCkgewogICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7CiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTsKICAgIHRoaXMueiA9IG5ldyBCTigwKTsKICB9IGVsc2UgewogICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTsKICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7CiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpOwogIH0KCiAgaWYgKCF0aGlzLngucmVkKSB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpOwogIGlmICghdGhpcy55LnJlZCkgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMu
Y3VydmUucmVkKTsKICBpZiAoIXRoaXMuei5yZWQpIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7CiAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTsKfQoKaW5oZXJpdHMoSlBvaW50LCBCYXNlLkJhc2VQb2ludCk7CgpTaG9ydEN1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeikgewogIHJldHVybiBuZXcgSlBvaW50KHRoaXMsIHgsIHksIHopOwp9OwoKSlBvaW50LnByb3RvdHlwZS50b1AgPSBmdW5jdGlvbiB0b1AoKSB7CiAgaWYgKHRoaXMuaXNJ
bmZpbml0eSgpKSByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTsKICB2YXIgemludiA9IHRoaXMuei5yZWRJbnZtKCk7CiAgdmFyIHppbnYyID0gemludi5yZWRTcXIoKTsKICB2YXIgYXggPSB0aGlzLngucmVkTXVsKHppbnYyKTsKICB2YXIgYXkgPSB0aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7CiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsIGF5KTsKfTsKCkpQb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkgewogIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngs
IHRoaXMueS5yZWROZWcoKSwgdGhpcy56KTsKfTsKCkpQb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHsKICAvLyBPICsgUCA9IFAKICBpZiAodGhpcy5pc0luZmluaXR5KCkpIHJldHVybiBwOyAvLyBQICsgTyA9IFAKCiAgaWYgKHAuaXNJbmZpbml0eSgpKSByZXR1cm4gdGhpczsgLy8gMTJNICsgNFMgKyA3QQoKICB2YXIgcHoyID0gcC56LnJlZFNxcigpOwogIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTsKICB2YXIgdTEgPSB0aGlzLngucmVkTXVsKHB6Mik7CiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7
CiAgdmFyIHMxID0gdGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpOwogIHZhciBzMiA9IHAueS5yZWRNdWwoejIucmVkTXVsKHRoaXMueikpOwogIHZhciBoID0gdTEucmVkU3ViKHUyKTsKICB2YXIgciA9IHMxLnJlZFN1YihzMik7CgogIGlmIChoLmNtcG4oMCkgPT09IDApIHsKICAgIGlmIChyLmNtcG4oMCkgIT09IDApIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtlbHNlIHJldHVybiB0aGlzLmRibCgpOwogIH0KCiAgdmFyIGgyID0gaC5yZWRTcXIoKTsKICB2YXIgaDMgPSBoMi5yZWRN
dWwoaCk7CiAgdmFyIHYgPSB1MS5yZWRNdWwoaDIpOwogIHZhciBueCA9IHIucmVkU3FyKCkucmVkSUFkZChoMykucmVkSVN1Yih2KS5yZWRJU3ViKHYpOwogIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7CiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTsKICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7Cn07CgpKUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gZnVuY3Rpb24gbWl4ZWRBZGQocCkgewogIC8vIE8gKyBQID0gUAog
IGlmICh0aGlzLmlzSW5maW5pdHkoKSkgcmV0dXJuIHAudG9KKCk7IC8vIFAgKyBPID0gUAoKICBpZiAocC5pc0luZmluaXR5KCkpIHJldHVybiB0aGlzOyAvLyA4TSArIDNTICsgN0EKCiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpOwogIHZhciB1MSA9IHRoaXMueDsKICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTsKICB2YXIgczEgPSB0aGlzLnk7CiAgdmFyIHMyID0gcC55LnJlZE11bCh6MikucmVkTXVsKHRoaXMueik7CiAgdmFyIGggPSB1MS5yZWRTdWIodTIpOwogIHZhciByID0gczEucmVkU3ViKHMyKTsKCiAgaWYgKGgu
Y21wbigwKSA9PT0gMCkgewogICAgaWYgKHIuY21wbigwKSAhPT0gMCkgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO2Vsc2UgcmV0dXJuIHRoaXMuZGJsKCk7CiAgfQoKICB2YXIgaDIgPSBoLnJlZFNxcigpOwogIHZhciBoMyA9IGgyLnJlZE11bChoKTsKICB2YXIgdiA9IHUxLnJlZE11bChoMik7CiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7CiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMp
KTsKICB2YXIgbnogPSB0aGlzLnoucmVkTXVsKGgpOwogIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTsKfTsKCkpQb2ludC5wcm90b3R5cGUuZGJscCA9IGZ1bmN0aW9uIGRibHAocG93KSB7CiAgaWYgKHBvdyA9PT0gMCkgcmV0dXJuIHRoaXM7CiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKSByZXR1cm4gdGhpczsKICBpZiAoIXBvdykgcmV0dXJuIHRoaXMuZGJsKCk7CgogIGlmICh0aGlzLmN1cnZlLnplcm9BIHx8IHRoaXMuY3VydmUudGhyZWVBKSB7CiAgICB2YXIgciA9IHRoaXM7CgogICAgZm9yICh2YXIg
aSA9IDA7IGkgPCBwb3c7IGkrKykgewogICAgICByID0gci5kYmwoKTsKICAgIH0KCiAgICByZXR1cm4gcjsKICB9IC8vIDFNICsgMlMgKyAxQSArIE4gKiAoNFMgKyA1TSArIDhBKQogIC8vIE4gPSAxID0+IDZNICsgNlMgKyA5QQoKCiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7CiAgdmFyIHRpbnYgPSB0aGlzLmN1cnZlLnRpbnY7CiAgdmFyIGp4ID0gdGhpcy54OwogIHZhciBqeSA9IHRoaXMueTsKICB2YXIganogPSB0aGlzLno7CiAgdmFyIGp6NCA9IGp6LnJlZFNxcigpLnJlZFNxcigpOyAvLyBSZXVzZSByZXN1bHRzCgogIHZh
ciBqeWQgPSBqeS5yZWRBZGQoankpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKSB7CiAgICB2YXIgangyID0gangucmVkU3FyKCk7CiAgICB2YXIganlkMiA9IGp5ZC5yZWRTcXIoKTsKICAgIHZhciBqeWQ0ID0ganlkMi5yZWRTcXIoKTsKICAgIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpOwogICAgdmFyIHQxID0gangucmVkTXVsKGp5ZDIpOwogICAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpOwogICAgdmFyIHQyID0g
dDEucmVkSVN1YihueCk7CiAgICB2YXIgZG55ID0gYy5yZWRNdWwodDIpOwogICAgZG55ID0gZG55LnJlZElBZGQoZG55KS5yZWRJU3ViKGp5ZDQpOwogICAgdmFyIG56ID0ganlkLnJlZE11bChqeik7CiAgICBpZiAoaSArIDEgPCBwb3cpIGp6NCA9IGp6NC5yZWRNdWwoanlkNCk7CiAgICBqeCA9IG54OwogICAganogPSBuejsKICAgIGp5ZCA9IGRueTsKICB9CgogIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChqeCwganlkLnJlZE11bCh0aW52KSwganopOwp9OwoKSlBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwo
KSB7CiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKSByZXR1cm4gdGhpczsKICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSkgcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtlbHNlIGlmICh0aGlzLmN1cnZlLnRocmVlQSkgcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7ZWxzZSByZXR1cm4gdGhpcy5fZGJsKCk7Cn07CgpKUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsID0gZnVuY3Rpb24gX3plcm9EYmwoKSB7CiAgdmFyIG54OwogIHZhciBueTsKICB2YXIgbno7IC8vIFogPSAxCgogIGlmICh0aGlzLnpPbmUpIHsKICAgIC8vIGh5cGVyZWxsaXB0aWMu
b3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sCiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibAogICAgLy8gMU0gKyA1UyArIDE0QQogICAgLy8gWFggPSBYMV4yCiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7IC8vIFlZID0gWTFeMgoKICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTsgLy8gWVlZWSA9IFlZXjIKCiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpOyAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSkKCiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJl
ZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7CiAgICBzID0gcy5yZWRJQWRkKHMpOyAvLyBNID0gMyAqIFhYICsgYTsgYSA9IDAKCiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7IC8vIFQgPSBNIF4gMiAtIDIqUwoKICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7IC8vIDggKiBZWVlZCgogICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpOwogICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTsKICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5
OCk7IC8vIFgzID0gVAoKICAgIG54ID0gdDsgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZCgogICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpOyAvLyBaMyA9IDIqWTEKCiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTsKICB9IGVsc2UgewogICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWwKICAgIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDktbAogICAgLy8gMk0gKyA1UyArIDEzQQogICAgLy8gQSA9IFgxXjIKICAgIHZh
ciBhID0gdGhpcy54LnJlZFNxcigpOyAvLyBCID0gWTFeMgoKICAgIHZhciBiID0gdGhpcy55LnJlZFNxcigpOyAvLyBDID0gQl4yCgogICAgdmFyIGMgPSBiLnJlZFNxcigpOyAvLyBEID0gMiAqICgoWDEgKyBCKV4yIC0gQSAtIEMpCgogICAgdmFyIGQgPSB0aGlzLngucmVkQWRkKGIpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihjKTsKICAgIGQgPSBkLnJlZElBZGQoZCk7IC8vIEUgPSAzICogQQoKICAgIHZhciBlID0gYS5yZWRBZGQoYSkucmVkSUFkZChhKTsgLy8gRiA9IEVeMgoKICAgIHZhciBmID0gZS5yZWRTcXIo
KTsgLy8gOCAqIEMKCiAgICB2YXIgYzggPSBjLnJlZElBZGQoYyk7CiAgICBjOCA9IGM4LnJlZElBZGQoYzgpOwogICAgYzggPSBjOC5yZWRJQWRkKGM4KTsgLy8gWDMgPSBGIC0gMiAqIEQKCiAgICBueCA9IGYucmVkSVN1YihkKS5yZWRJU3ViKGQpOyAvLyBZMyA9IEUgKiAoRCAtIFgzKSAtIDggKiBDCgogICAgbnkgPSBlLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTsgLy8gWjMgPSAyICogWTEgKiBaMQoKICAgIG56ID0gdGhpcy55LnJlZE11bCh0aGlzLnopOwogICAgbnogPSBuei5yZWRJQWRkKG56KTsKICB9
CgogIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTsKfTsKCkpQb2ludC5wcm90b3R5cGUuX3RocmVlRGJsID0gZnVuY3Rpb24gX3RocmVlRGJsKCkgewogIHZhciBueDsKICB2YXIgbnk7CiAgdmFyIG56OyAvLyBaID0gMQoKICBpZiAodGhpcy56T25lKSB7CiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbAogICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmwKICAgIC8vIDFNICsgNVMgKyAxNUEKICAgIC8vIFhYID0gWDFeMgogICAgdmFyIHh4
ID0gdGhpcy54LnJlZFNxcigpOyAvLyBZWSA9IFkxXjIKCiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7IC8vIFlZWVkgPSBZWV4yCgogICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTsgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpCgogICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpOwogICAgcyA9IHMucmVkSUFkZChzKTsgLy8gTSA9IDMgKiBYWCArIGEKCiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCkucmVkSUFkZCh0
aGlzLmN1cnZlLmEpOyAvLyBUID0gTV4yIC0gMiAqIFMKCiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpOyAvLyBYMyA9IFQKCiAgICBueCA9IHQ7IC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWQoKICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTsKICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7CiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpOwogICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpOyAvLyBaMyA9IDIgKiBZ
MQoKICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpOwogIH0gZWxzZSB7CiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbCNkb3VibGluZy1kYmwtMjAwMS1iCiAgICAvLyAzTSArIDVTCiAgICAvLyBkZWx0YSA9IFoxXjIKICAgIHZhciBkZWx0YSA9IHRoaXMuei5yZWRTcXIoKTsgLy8gZ2FtbWEgPSBZMV4yCgogICAgdmFyIGdhbW1hID0gdGhpcy55LnJlZFNxcigpOyAvLyBiZXRhID0gWDEgKiBnYW1tYQoKICAgIHZhciBiZXRhID0gdGhpcy54LnJlZE11bChnYW1t
YSk7IC8vIGFscGhhID0gMyAqIChYMSAtIGRlbHRhKSAqIChYMSArIGRlbHRhKQoKICAgIHZhciBhbHBoYSA9IHRoaXMueC5yZWRTdWIoZGVsdGEpLnJlZE11bCh0aGlzLngucmVkQWRkKGRlbHRhKSk7CiAgICBhbHBoYSA9IGFscGhhLnJlZEFkZChhbHBoYSkucmVkSUFkZChhbHBoYSk7IC8vIFgzID0gYWxwaGFeMiAtIDggKiBiZXRhCgogICAgdmFyIGJldGE0ID0gYmV0YS5yZWRJQWRkKGJldGEpOwogICAgYmV0YTQgPSBiZXRhNC5yZWRJQWRkKGJldGE0KTsKICAgIHZhciBiZXRhOCA9IGJldGE0LnJlZEFkZChiZXRhNCk7CiAg
ICBueCA9IGFscGhhLnJlZFNxcigpLnJlZElTdWIoYmV0YTgpOyAvLyBaMyA9IChZMSArIFoxKV4yIC0gZ2FtbWEgLSBkZWx0YQoKICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpOyAvLyBZMyA9IGFscGhhICogKDQgKiBiZXRhIC0gWDMpIC0gOCAqIGdhbW1hXjIKCiAgICB2YXIgZ2dhbW1hOCA9IGdhbW1hLnJlZFNxcigpOwogICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTsKICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dh
bW1hOCk7CiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpOwogICAgbnkgPSBhbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCk7CiAgfQoKICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7Cn07CgpKUG9pbnQucHJvdG90eXBlLl9kYmwgPSBmdW5jdGlvbiBfZGJsKCkgewogIHZhciBhID0gdGhpcy5jdXJ2ZS5hOyAvLyA0TSArIDZTICsgMTBBCgogIHZhciBqeCA9IHRoaXMueDsKICB2YXIgankgPSB0aGlzLnk7CiAgdmFyIGp6ID0gdGhpcy56OwogIHZh
ciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTsKICB2YXIgangyID0gangucmVkU3FyKCk7CiAgdmFyIGp5MiA9IGp5LnJlZFNxcigpOwogIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpOwogIHZhciBqeGQ0ID0gangucmVkQWRkKGp4KTsKICBqeGQ0ID0ganhkNC5yZWRJQWRkKGp4ZDQpOwogIHZhciB0MSA9IGp4ZDQucmVkTXVsKGp5Mik7CiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpOwogIHZhciB0MiA9IHQxLnJlZElTdWIobngp
OwogIHZhciBqeWQ4ID0gankyLnJlZFNxcigpOwogIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7CiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTsKICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpOwogIHZhciBueSA9IGMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpOwogIHZhciBueiA9IGp5LnJlZEFkZChqeSkucmVkTXVsKGp6KTsKICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7Cn07CgpKUG9pbnQucHJvdG90eXBlLnRycGwgPSBmdW5jdGlvbiB0cnBsKCkgewogIGlmICghdGhpcy5jdXJ2ZS56ZXJv
QSkgcmV0dXJuIHRoaXMuZGJsKCkuYWRkKHRoaXMpOyAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbCN0cmlwbGluZy10cGwtMjAwNy1ibAogIC8vIDVNICsgMTBTICsgLi4uCiAgLy8gWFggPSBYMV4yCgogIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTsgLy8gWVkgPSBZMV4yCgogIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTsgLy8gWlogPSBaMV4yCgogIHZhciB6eiA9IHRoaXMuei5yZWRTcXIoKTsgLy8gWVlZWSA9IFlZXjIKCiAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTsg
Ly8gTSA9IDMgKiBYWCArIGEgKiBaWjI7IGEgPSAwCgogIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTsgLy8gTU0gPSBNXjIKCiAgdmFyIG1tID0gbS5yZWRTcXIoKTsgLy8gRSA9IDYgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpIC0gTU0KCiAgdmFyIGUgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpOwogIGUgPSBlLnJlZElBZGQoZSk7CiAgZSA9IGUucmVkQWRkKGUpLnJlZElBZGQoZSk7CiAgZSA9IGUucmVkSVN1YihtbSk7IC8vIEVFID0gRV4yCgogIHZh
ciBlZSA9IGUucmVkU3FyKCk7IC8vIFQgPSAxNipZWVlZCgogIHZhciB0ID0geXl5eS5yZWRJQWRkKHl5eXkpOwogIHQgPSB0LnJlZElBZGQodCk7CiAgdCA9IHQucmVkSUFkZCh0KTsKICB0ID0gdC5yZWRJQWRkKHQpOyAvLyBVID0gKE0gKyBFKV4yIC0gTU0gLSBFRSAtIFQKCiAgdmFyIHUgPSBtLnJlZElBZGQoZSkucmVkU3FyKCkucmVkSVN1YihtbSkucmVkSVN1YihlZSkucmVkSVN1Yih0KTsgLy8gWDMgPSA0ICogKFgxICogRUUgLSA0ICogWVkgKiBVKQoKICB2YXIgeXl1NCA9IHl5LnJlZE11bCh1KTsKICB5eXU0ID0geXl1
NC5yZWRJQWRkKHl5dTQpOwogIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7CiAgdmFyIG54ID0gdGhpcy54LnJlZE11bChlZSkucmVkSVN1Yih5eXU0KTsKICBueCA9IG54LnJlZElBZGQobngpOwogIG54ID0gbngucmVkSUFkZChueCk7IC8vIFkzID0gOCAqIFkxICogKFUgKiAoVCAtIFUpIC0gRSAqIEVFKQoKICB2YXIgbnkgPSB0aGlzLnkucmVkTXVsKHUucmVkTXVsKHQucmVkSVN1Yih1KSkucmVkSVN1YihlLnJlZE11bChlZSkpKTsKICBueSA9IG55LnJlZElBZGQobnkpOwogIG55ID0gbnkucmVkSUFkZChueSk7CiAgbnkg
PSBueS5yZWRJQWRkKG55KTsgLy8gWjMgPSAoWjEgKyBFKV4yIC0gWlogLSBFRQoKICB2YXIgbnogPSB0aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpOwogIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTsKfTsKCkpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGssIGtiYXNlKSB7CiAgayA9IG5ldyBCTihrLCBrYmFzZSk7CiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7Cn07CgpKUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24g
ZXEocCkgewogIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKSByZXR1cm4gdGhpcy5lcShwLnRvSigpKTsKICBpZiAodGhpcyA9PT0gcCkgcmV0dXJuIHRydWU7IC8vIHgxICogejJeMiA9PSB4MiAqIHoxXjIKCiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpOwogIHZhciBwejIgPSBwLnoucmVkU3FyKCk7CiAgaWYgKHRoaXMueC5yZWRNdWwocHoyKS5yZWRJU3ViKHAueC5yZWRNdWwoejIpKS5jbXBuKDApICE9PSAwKSByZXR1cm4gZmFsc2U7IC8vIHkxICogejJeMyA9PSB5MiAqIHoxXjMKCiAgdmFyIHozID0gejIucmVkTXVsKHRo
aXMueik7CiAgdmFyIHB6MyA9IHB6Mi5yZWRNdWwocC56KTsKICByZXR1cm4gdGhpcy55LnJlZE11bChwejMpLnJlZElTdWIocC55LnJlZE11bCh6MykpLmNtcG4oMCkgPT09IDA7Cn07CgpKUG9pbnQucHJvdG90eXBlLmVxWFRvUCA9IGZ1bmN0aW9uIGVxWFRvUCh4KSB7CiAgdmFyIHpzID0gdGhpcy56LnJlZFNxcigpOwogIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh6cyk7CiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKSByZXR1cm4gdHJ1ZTsKICB2YXIgeGMgPSB4LmNsb25lKCk7CiAgdmFyIHQg
PSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHpzKTsKCiAgZm9yICg7OykgewogICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pOwogICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApIHJldHVybiBmYWxzZTsKICAgIHJ4LnJlZElBZGQodCk7CiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApIHJldHVybiB0cnVlOwogIH0KfTsKCkpQb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7CiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKSByZXR1cm4gJzxFQyBKUG9pbnQgSW5maW5pdHk+JzsKICByZXR1
cm4gJzxFQyBKUG9pbnQgeDogJyArIHRoaXMueC50b1N0cmluZygxNiwgMikgKyAnIHk6ICcgKyB0aGlzLnkudG9TdHJpbmcoMTYsIDIpICsgJyB6OiAnICsgdGhpcy56LnRvU3RyaW5nKDE2LCAyKSArICc+JzsKfTsKCkpQb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7CiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWQKICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7Cn07Cgp9LHsiLi4vdXRpbHMiOjI1NSwiLi9iYXNlIjoy
NDIsImJuLmpzIjoyNTYsImluaGVyaXRzIjoyNzh9XSwyNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgY3VydmVzID0gZXhwb3J0czsKCnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpOwoKdmFyIGN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpOwoKdmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDsKCmZ1bmN0aW9uIFByZXNldEN1cnZlKG9wdGlvbnMpIHsKICBpZiAob3B0aW9ucy50eXBlID09PSAnc2hvcnQnKSB0
aGlzLmN1cnZlID0gbmV3IGN1cnZlLnNob3J0KG9wdGlvbnMpO2Vsc2UgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ2Vkd2FyZHMnKSB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLmVkd2FyZHMob3B0aW9ucyk7ZWxzZSB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLm1vbnQob3B0aW9ucyk7CiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nOwogIHRoaXMubiA9IHRoaXMuY3VydmUubjsKICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7CiAgYXNzZXJ0KHRoaXMuZy52YWxpZGF0ZSgpLCAnSW52YWxpZCBjdXJ2ZScpOwogIGFzc2VydCh0aGlzLmcubXVs
KHRoaXMubikuaXNJbmZpbml0eSgpLCAnSW52YWxpZCBjdXJ2ZSwgRypOICE9IE8nKTsKfQoKY3VydmVzLlByZXNldEN1cnZlID0gUHJlc2V0Q3VydmU7CgpmdW5jdGlvbiBkZWZpbmVDdXJ2ZShuYW1lLCBvcHRpb25zKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwgewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgY3VydmUgPSBuZXcgUHJlc2V0Q3VydmUob3B0aW9ucyk7CiAgICAgIE9iamVjdC5kZWZp
bmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHsKICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgICB2YWx1ZTogY3VydmUKICAgICAgfSk7CiAgICAgIHJldHVybiBjdXJ2ZTsKICAgIH0KICB9KTsKfQoKZGVmaW5lQ3VydmUoJ3AxOTInLCB7CiAgdHlwZTogJ3Nob3J0JywKICBwcmltZTogJ3AxOTInLAogIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicsCiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZm
ZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZjJywKICBiOiAnNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjEnLAogIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiA5OWRlZjgzNiAxNDZiYzliMSBiNGQyMjgzMScsCiAgaGFzaDogaGFzaC5zaGEyNTYsCiAgZ1JlZDogZmFsc2UsCiAgZzogWycxODhkYTgwZSBiMDMwOTBmNiA3Y2JmMjBlYiA0M2ExODgwMCBmNGZmMGFmZCA4MmZmMTAxMicsICcwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5
NDgxMSddCn0pOwpkZWZpbmVDdXJ2ZSgncDIyNCcsIHsKICB0eXBlOiAnc2hvcnQnLAogIHByaW1lOiAncDIyNCcsCiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJywKICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUnLAogIGI6ICdiNDA1MGE4NSAwYzA0YjNhYiBmNTQxMzI1NiA1MDQ0YjBiNyBkN2JmZDhiYSAyNzBiMzk0MyAyMzU1ZmZiNCcsCiAgbjogJ2ZmZmZmZmZmIGZmZmZm
ZmZmIGZmZmZmZmZmIGZmZmYxNmEyIGUwYjhmMDNlIDEzZGQyOTQ1IDVjNWMyYTNkJywKICBoYXNoOiBoYXNoLnNoYTI1NiwKICBnUmVkOiBmYWxzZSwKICBnOiBbJ2I3MGUwY2JkIDZiYjRiZjdmIDMyMTM5MGI5IDRhMDNjMWQzIDU2YzIxMTIyIDM0MzI4MGQ2IDExNWMxZDIxJywgJ2JkMzc2Mzg4IGI1ZjcyM2ZiIDRjMjJkZmU2IGNkNDM3NWEwIDVhMDc0NzY0IDQ0ZDU4MTk5IDg1MDA3ZTM0J10KfSk7CmRlZmluZUN1cnZlKCdwMjU2JywgewogIHR5cGU6ICdzaG9ydCcsCiAgcHJpbWU6IG51bGwsCiAgcDogJ2ZmZmZmZmZmIDAw
MDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJywKICBhOiAnZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLAogIGI6ICc1YWM2MzVkOCBhYTNhOTNlNyBiM2ViYmQ1NSA3Njk4ODZiYyA2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YicsCiAgbjogJ2ZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGJjZTZmYWFkIGE3MTc5ZTg0IGYzYjljYWMyIGZjNjMyNTUx
JywKICBoYXNoOiBoYXNoLnNoYTI1NiwKICBnUmVkOiBmYWxzZSwKICBnOiBbJzZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyIDc3MDM3ZDgxIDJkZWIzM2EwIGY0YTEzOTQ1IGQ4OThjMjk2JywgJzRmZTM0MmUyIGZlMWE3ZjliIDhlZTdlYjRhIDdjMGY5ZTE2IDJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1J10KfSk7CmRlZmluZUN1cnZlKCdwMzg0JywgewogIHR5cGU6ICdzaG9ydCcsCiAgcHJpbWU6IG51bGwsCiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZm
ZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgKyAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYnLAogIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICsgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZjJywKICBiOiAnYjMzMTJmYTcgZTIzZWU3ZTQgOTg4ZTA1NmIgZTNmODJkMTkgMTgxZDljNmUgZmU4MTQxMTIgMDMxNDA4OGYgJyArICc1MDEzODc1YSBjNjU2Mzk4ZCA4YTJlZDE5ZCAyYTg1
YzhlZCBkM2VjMmFlZicsCiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGM3NjM0ZDgxICcgKyAnZjQzNzJkZGYgNTgxYTBkYjIgNDhiMGE3N2EgZWNlYzE5NmEgY2NjNTI5NzMnLAogIGhhc2g6IGhhc2guc2hhMzg0LAogIGdSZWQ6IGZhbHNlLAogIGc6IFsnYWE4N2NhMjIgYmU4YjA1MzcgOGViMWM3MWUgZjMyMGFkNzQgNmUxZDNiNjIgOGJhNzliOTggNTlmNzQxZTAgODI1NDJhMzggJyArICc1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiNycsICczNjE3
ZGU0YSA5NjI2MmM2ZiA1ZDllOThiZiA5MjkyZGMyOSBmOGY0MWRiZCAyODlhMTQ3YyBlOWRhMzExMyBiNWYwYjhjMCAnICsgJzBhNjBiMWNlIDFkN2U4MTlkIDdhNDMxZDdjIDkwZWEwZTVmJ10KfSk7CmRlZmluZUN1cnZlKCdwNTIxJywgewogIHR5cGU6ICdzaG9ydCcsCiAgcHJpbWU6IG51bGwsCiAgcDogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgKyAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArICdmZmZmZmZm
ZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsCiAgYTogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgKyAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsCiAgYjogJzAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViICcgKyAnOTliMzE1ZjMgYjhiNDg5OTEgOGVmMTA5
ZTEgNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgJyArICczYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMCcsCiAgbjogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgKyAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmEgNTE4Njg3ODMgYmYyZjk2NmIgN2ZjYzAxNDggJyArICdmNzA5YTVkMCAzYmI1YzliOCA4OTljNDdhZSBiYjZmYjcxZSA5MTM4NjQwOScsCiAgaGFzaDogaGFzaC5zaGE1MTIsCiAgZ1JlZDogZmFsc2UsCiAgZzogWycwMDAw
MDBjNiA4NThlMDZiNyAwNDA0ZTljZCA5ZTNlY2I2NiAyMzk1YjQ0MiA5YzY0ODEzOSAnICsgJzA1M2ZiNTIxIGY4MjhhZjYwIDZiNGQzZGJhIGExNGI1ZTc3IGVmZTc1OTI4IGZlMWRjMTI3ICcgKyAnYTJmZmE4ZGUgMzM0OGIzYzEgODU2YTQyOWIgZjk3ZTdlMzEgYzJlNWJkNjYnLCAnMDAwMDAxMTggMzkyOTZhNzggOWEzYmMwMDQgNWM4YTVmYjQgMmM3ZDFiZDkgOThmNTQ0NDkgJyArICc1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYyA5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSAnICsgJzNmYWQwNzYxIDM1M2M3MDg2IGEy
NzJjMjQwIDg4YmU5NDc2IDlmZDE2NjUwJ10KfSk7CmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5JywgewogIHR5cGU6ICdtb250JywKICBwcmltZTogJ3AyNTUxOScsCiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLAogIGE6ICc3NmQwNicsCiAgYjogJzEnLAogIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJywKICBoYXNoOiBoYXNoLnNoYTI1NiwKICBnUmVkOiBm
YWxzZSwKICBnOiBbJzknXQp9KTsKZGVmaW5lQ3VydmUoJ2VkMjU1MTknLCB7CiAgdHlwZTogJ2Vkd2FyZHMnLAogIHByaW1lOiAncDI1NTE5JywKICBwOiAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcsCiAgYTogJy0xJywKICBjOiAnMScsCiAgLy8gLTEyMTY2NSAqICgxMjE2NjZeKC0xKSkgKG1vZCBQKQogIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJywKICBuOiAn
MTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsCiAgaGFzaDogaGFzaC5zaGEyNTYsCiAgZ1JlZDogZmFsc2UsCiAgZzogWycyMTY5MzZkM2NkNmU1M2ZlYzBhNGUyMzFmZGQ2ZGM1YzY5MmNjNzYwOTUyNWE3YjJjOTU2MmQ2MDhmMjVkNTFhJywgLy8gNC81CiAgJzY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NTgnXQp9KTsKdmFyIHByZTsKCnRyeSB7CiAgcHJlID0gcmVxdWlyZSgnLi9wcmVj
b21wdXRlZC9zZWNwMjU2azEnKTsKfSBjYXRjaCAoZSkgewogIHByZSA9IHVuZGVmaW5lZDsKfQoKZGVmaW5lQ3VydmUoJ3NlY3AyNTZrMScsIHsKICB0eXBlOiAnc2hvcnQnLAogIHByaW1lOiAnazI1NicsCiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJywKICBhOiAnMCcsCiAgYjogJzcnLAogIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBiYWFlZGNlNiBhZjQ4YTAzYiBiZmQyNWU4YyBkMDM2NDE0MScsCiAg
aDogJzEnLAogIGhhc2g6IGhhc2guc2hhMjU2LAogIC8vIFByZWNvbXB1dGVkIGVuZG9tb3JwaGlzbQogIGJldGE6ICc3YWU5NmEyYjY1N2MwNzEwNmU2NDQ3OWVhYzM0MzRlOTljZjA0OTc1MTJmNTg5OTVjMTM5NmMyODcxOTUwMWVlJywKICBsYW1iZGE6ICc1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyJywKICBiYXNpczogW3sKICAgIGE6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsCiAgICBiOiAnLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2Zh
OTBhYmZlNGMzJwogIH0sIHsKICAgIGE6ICcxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDgnLAogICAgYjogJzMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1JwogIH1dLAogIGdSZWQ6IGZhbHNlLAogIGc6IFsnNzliZTY2N2VmOWRjYmJhYzU1YTA2Mjk1Y2U4NzBiMDcwMjliZmNkYjJkY2UyOGQ5NTlmMjgxNWIxNmY4MTc5OCcsICc0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4JywgcHJlXQp9KTsKCn0seyIuL2N1cnZlIjoyNDQsIi4vcHJl
Y29tcHV0ZWQvc2VjcDI1NmsxIjoyNTQsIi4vdXRpbHMiOjI1NSwiaGFzaC5qcyI6MjYzfV0sMjQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBf
dHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpOwoKdmFyIEhtYWNEUkJHID0gcmVxdWlyZSgnaG1hYy1kcmJnJyk7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFyIGN1cnZlcyA9
IHJlcXVpcmUoJy4uL2N1cnZlcycpOwoKdmFyIHJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7Cgp2YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0OwoKdmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpOwoKdmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7CgpmdW5jdGlvbiBFQyhvcHRpb25zKSB7CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEVDKSkgcmV0dXJuIG5ldyBFQyhvcHRpb25zKTsgLy8gU2hvcnRjdXQgYGVsbGlwdGljLmVjKGN1cnZlLW5hbWUpYAoKICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdz
dHJpbmcnKSB7CiAgICBhc3NlcnQoY3VydmVzLmhhc093blByb3BlcnR5KG9wdGlvbnMpLCAnVW5rbm93biBjdXJ2ZSAnICsgb3B0aW9ucyk7CiAgICBvcHRpb25zID0gY3VydmVzW29wdGlvbnNdOwogIH0gLy8gU2hvcnRjdXQgZm9yIGBlbGxpcHRpYy5lYyhlbGxpcHRpYy5jdXJ2ZXMuY3VydmVOYW1lKWAKCgogIGlmIChvcHRpb25zIGluc3RhbmNlb2YgY3VydmVzLlByZXNldEN1cnZlKSBvcHRpb25zID0gewogICAgY3VydmU6IG9wdGlvbnMKICB9OwogIHRoaXMuY3VydmUgPSBvcHRpb25zLmN1cnZlLmN1cnZlOwogIHRoaXMu
biA9IHRoaXMuY3VydmUubjsKICB0aGlzLm5oID0gdGhpcy5uLnVzaHJuKDEpOwogIHRoaXMuZyA9IHRoaXMuY3VydmUuZzsgLy8gUG9pbnQgb24gY3VydmUKCiAgdGhpcy5nID0gb3B0aW9ucy5jdXJ2ZS5nOwogIHRoaXMuZy5wcmVjb21wdXRlKG9wdGlvbnMuY3VydmUubi5iaXRMZW5ndGgoKSArIDEpOyAvLyBIYXNoIGZvciBmdW5jdGlvbiBmb3IgRFJCRwoKICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2ggfHwgb3B0aW9ucy5jdXJ2ZS5oYXNoOwp9Cgptb2R1bGUuZXhwb3J0cyA9IEVDOwoKRUMucHJvdG90eXBlLmtleVBhaXIg
PSBmdW5jdGlvbiBrZXlQYWlyKG9wdGlvbnMpIHsKICByZXR1cm4gbmV3IEtleVBhaXIodGhpcywgb3B0aW9ucyk7Cn07CgpFQy5wcm90b3R5cGUua2V5RnJvbVByaXZhdGUgPSBmdW5jdGlvbiBrZXlGcm9tUHJpdmF0ZShwcml2LCBlbmMpIHsKICByZXR1cm4gS2V5UGFpci5mcm9tUHJpdmF0ZSh0aGlzLCBwcml2LCBlbmMpOwp9OwoKRUMucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YiwgZW5jKSB7CiAgcmV0dXJuIEtleVBhaXIuZnJvbVB1YmxpYyh0aGlzLCBwdWIsIGVuYyk7Cn07
CgpFQy5wcm90b3R5cGUuZ2VuS2V5UGFpciA9IGZ1bmN0aW9uIGdlbktleVBhaXIob3B0aW9ucykgewogIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9OyAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkcKCiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoewogICAgaGFzaDogdGhpcy5oYXNoLAogICAgcGVyczogb3B0aW9ucy5wZXJzLAogICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JywKICAgIGVudHJvcHk6IG9wdGlvbnMuZW50cm9weSB8fCByYW5kKHRoaXMuaGFzaC5obWFjU3RyZW5ndGgpLAogICAgZW50cm9w
eUVuYzogb3B0aW9ucy5lbnRyb3B5ICYmIG9wdGlvbnMuZW50cm9weUVuYyB8fCAndXRmOCcsCiAgICBub25jZTogdGhpcy5uLnRvQXJyYXkoKQogIH0pOwogIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7CiAgdmFyIG5zMiA9IHRoaXMubi5zdWIobmV3IEJOKDIpKTsKCiAgZG8gewogICAgdmFyIHByaXYgPSBuZXcgQk4oZHJiZy5nZW5lcmF0ZShieXRlcykpOwogICAgaWYgKHByaXYuY21wKG5zMikgPiAwKSBjb250aW51ZTsKICAgIHByaXYuaWFkZG4oMSk7CiAgICByZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShw
cml2KTsKICB9IHdoaWxlICh0cnVlKTsKfTsKCkVDLnByb3RvdHlwZS5fdHJ1bmNhdGVUb04gPSBmdW5jdGlvbiB0cnVuY2F0ZVRvTihtc2csIHRydW5jT25seSkgewogIHZhciBkZWx0YSA9IG1zZy5ieXRlTGVuZ3RoKCkgKiA4IC0gdGhpcy5uLmJpdExlbmd0aCgpOwogIGlmIChkZWx0YSA+IDApIG1zZyA9IG1zZy51c2hybihkZWx0YSk7CiAgaWYgKCF0cnVuY09ubHkgJiYgbXNnLmNtcCh0aGlzLm4pID49IDApIHJldHVybiBtc2cuc3ViKHRoaXMubik7ZWxzZSByZXR1cm4gbXNnOwp9OwoKRUMucHJvdG90eXBlLnNpZ24gPSBm
dW5jdGlvbiBzaWduKG1zZywga2V5LCBlbmMsIG9wdGlvbnMpIHsKICBpZiAoX3R5cGVvZihlbmMpID09PSAnb2JqZWN0JykgewogICAgb3B0aW9ucyA9IGVuYzsKICAgIGVuYyA9IG51bGw7CiAgfQoKICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTsKICBrZXkgPSB0aGlzLmtleUZyb21Qcml2YXRlKGtleSwgZW5jKTsKICBtc2cgPSB0aGlzLl90cnVuY2F0ZVRvTihuZXcgQk4obXNnLCAxNikpOyAvLyBaZXJvLWV4dGVuZCBrZXkgdG8gcHJvdmlkZSBlbm91Z2ggZW50cm9weQoKICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxl
bmd0aCgpOwogIHZhciBia2V5ID0ga2V5LmdldFByaXZhdGUoKS50b0FycmF5KCdiZScsIGJ5dGVzKTsgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTgoKICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgnYmUnLCBieXRlcyk7IC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCRwoKICB2YXIgZHJiZyA9IG5ldyBIbWFjRFJCRyh7CiAgICBoYXNoOiB0aGlzLmhhc2gsCiAgICBlbnRyb3B5OiBia2V5LAogICAgbm9uY2U6IG5vbmNlLAogICAgcGVyczogb3B0aW9ucy5wZXJzLAogICAgcGVyc0Vu
Yzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JwogIH0pOyAvLyBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2VuZXJhdGUKCiAgdmFyIG5zMSA9IHRoaXMubi5zdWIobmV3IEJOKDEpKTsKCiAgZm9yICh2YXIgaXRlciA9IDA7IHRydWU7IGl0ZXIrKykgewogICAgdmFyIGsgPSBvcHRpb25zLmsgPyBvcHRpb25zLmsoaXRlcikgOiBuZXcgQk4oZHJiZy5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7CiAgICBrID0gdGhpcy5fdHJ1bmNhdGVUb04oaywgdHJ1ZSk7CiAgICBpZiAoay5jbXBuKDEpIDw9IDAgfHwgay5jbXAobnMxKSA+
PSAwKSBjb250aW51ZTsKICAgIHZhciBrcCA9IHRoaXMuZy5tdWwoayk7CiAgICBpZiAoa3AuaXNJbmZpbml0eSgpKSBjb250aW51ZTsKICAgIHZhciBrcFggPSBrcC5nZXRYKCk7CiAgICB2YXIgciA9IGtwWC51bW9kKHRoaXMubik7CiAgICBpZiAoci5jbXBuKDApID09PSAwKSBjb250aW51ZTsKICAgIHZhciBzID0gay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7CiAgICBzID0gcy51bW9kKHRoaXMubik7CiAgICBpZiAocy5jbXBuKDApID09PSAwKSBjb250aW51ZTsKICAgIHZh
ciByZWNvdmVyeVBhcmFtID0gKGtwLmdldFkoKS5pc09kZCgpID8gMSA6IDApIHwgKGtwWC5jbXAocikgIT09IDAgPyAyIDogMCk7IC8vIFVzZSBjb21wbGVtZW50IG9mIGBzYCwgaWYgaXQgaXMgPiBgbiAvIDJgCgogICAgaWYgKG9wdGlvbnMuY2Fub25pY2FsICYmIHMuY21wKHRoaXMubmgpID4gMCkgewogICAgICBzID0gdGhpcy5uLnN1YihzKTsKICAgICAgcmVjb3ZlcnlQYXJhbSBePSAxOwogICAgfQoKICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHsKICAgICAgcjogciwKICAgICAgczogcywKICAgICAgcmVjb3ZlcnlQYXJh
bTogcmVjb3ZlcnlQYXJhbQogICAgfSk7CiAgfQp9OwoKRUMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSwga2V5LCBlbmMpIHsKICBtc2cgPSB0aGlzLl90cnVuY2F0ZVRvTihuZXcgQk4obXNnLCAxNikpOwogIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhrZXksIGVuYyk7CiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsICdoZXgnKTsgLy8gUGVyZm9ybSBwcmltaXRpdmUgdmFsdWVzIHZhbGlkYXRpb24KCiAgdmFyIHIgPSBzaWduYXR1cmUucjsKICB2YXIgcyA9
IHNpZ25hdHVyZS5zOwogIGlmIChyLmNtcG4oMSkgPCAwIHx8IHIuY21wKHRoaXMubikgPj0gMCkgcmV0dXJuIGZhbHNlOwogIGlmIChzLmNtcG4oMSkgPCAwIHx8IHMuY21wKHRoaXMubikgPj0gMCkgcmV0dXJuIGZhbHNlOyAvLyBWYWxpZGF0ZSBzaWduYXR1cmUKCiAgdmFyIHNpbnYgPSBzLmludm0odGhpcy5uKTsKICB2YXIgdTEgPSBzaW52Lm11bChtc2cpLnVtb2QodGhpcy5uKTsKICB2YXIgdTIgPSBzaW52Lm11bChyKS51bW9kKHRoaXMubik7CgogIGlmICghdGhpcy5jdXJ2ZS5fbWF4d2VsbFRyaWNrKSB7CiAgICB2YXIg
cCA9IHRoaXMuZy5tdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpOwogICAgaWYgKHAuaXNJbmZpbml0eSgpKSByZXR1cm4gZmFsc2U7CiAgICByZXR1cm4gcC5nZXRYKCkudW1vZCh0aGlzLm4pLmNtcChyKSA9PT0gMDsKICB9IC8vIE5PVEU6IEdyZWcgTWF4d2VsbCdzIHRyaWNrLCBpbnNwaXJlZCBieToKICAvLyBodHRwczovL2dpdC5pby92YWQzSwoKCiAgdmFyIHAgPSB0aGlzLmcuam11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7CiAgaWYgKHAuaXNJbmZpbml0eSgpKSByZXR1cm4gZmFsc2U7IC8vIENvbXBh
cmUgYHAueGAgb2YgSmFjb2JpYW4gcG9pbnQgd2l0aCBgcmAsCiAgLy8gdGhpcyB3aWxsIGRvIGBwLnggPT0gciAqIHAuel4yYCBpbnN0ZWFkIG9mIG11bHRpcGx5aW5nIGBwLnhgIGJ5IHRoZQogIC8vIGludmVyc2Ugb2YgYHAuel4yYAoKICByZXR1cm4gcC5lcVhUb1Aocik7Cn07CgpFQy5wcm90b3R5cGUucmVjb3ZlclB1YktleSA9IGZ1bmN0aW9uIChtc2csIHNpZ25hdHVyZSwgaiwgZW5jKSB7CiAgYXNzZXJ0KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7CiAgc2ln
bmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7CiAgdmFyIG4gPSB0aGlzLm47CiAgdmFyIGUgPSBuZXcgQk4obXNnKTsKICB2YXIgciA9IHNpZ25hdHVyZS5yOwogIHZhciBzID0gc2lnbmF0dXJlLnM7IC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZAoKICB2YXIgaXNZT2RkID0gaiAmIDE7CiAgdmFyIGlzU2Vjb25kS2V5ID0gaiA+PiAxOwogIGlmIChyLmNtcCh0aGlzLmN1cnZlLnAudW1vZCh0aGlzLmN1cnZlLm4pKSA+PSAwICYmIGlzU2Vjb25kS2V5KSB0aHJv
dyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHNlbmNvbmQga2V5IGNhbmRpbmF0ZScpOyAvLyAxLjEuIExldCB4ID0gciArIGpuLgoKICBpZiAoaXNTZWNvbmRLZXkpIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoci5hZGQodGhpcy5jdXJ2ZS5uKSwgaXNZT2RkKTtlbHNlIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgociwgaXNZT2RkKTsKICB2YXIgckludiA9IHNpZ25hdHVyZS5yLmludm0obik7CiAgdmFyIHMxID0gbi5zdWIoZSkubXVsKHJJbnYpLnVtb2Qobik7CiAgdmFyIHMyID0gcy5tdWwockludikudW1vZChuKTsg
Ly8gMS42LjEgQ29tcHV0ZSBRID0gcl4tMSAoc1IgLSAgZUcpCiAgLy8gICAgICAgICAgICAgICBRID0gcl4tMSAoc1IgKyAtZUcpCgogIHJldHVybiB0aGlzLmcubXVsQWRkKHMxLCByLCBzMik7Cn07CgpFQy5wcm90b3R5cGUuZ2V0S2V5UmVjb3ZlcnlQYXJhbSA9IGZ1bmN0aW9uIChlLCBzaWduYXR1cmUsIFEsIGVuYykgewogIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpOwogIGlmIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSAhPT0gbnVsbCkgcmV0dXJuIHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFt
OwoKICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgdmFyIFFwcmltZTsKCiAgICB0cnkgewogICAgICBRcHJpbWUgPSB0aGlzLnJlY292ZXJQdWJLZXkoZSwgc2lnbmF0dXJlLCBpKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgaWYgKFFwcmltZS5lcShRKSkgcmV0dXJuIGk7CiAgfQoKICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHZhbGlkIHJlY292ZXJ5IGZhY3RvcicpOwp9OwoKfSx7Ii4uL2N1cnZlcyI6MjQ3LCIuLi91dGlscyI6MjU1LCIuL2tleSI6MjQ5
LCIuL3NpZ25hdHVyZSI6MjUwLCJibi5qcyI6MjU2LCJicm9yYW5kIjoxODQsImhtYWMtZHJiZyI6Mjc1fV0sMjQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7Cgp2YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0OwoKZnVuY3Rpb24gS2V5UGFpcihlYywgb3B0aW9ucykgewogIHRoaXMuZWMgPSBlYzsKICB0aGlzLnByaXYgPSBudWxsOwogIHRoaXMucHViID0gbnVsbDsgLy8gS2V5
UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pCgogIGlmIChvcHRpb25zLnByaXYpIHRoaXMuX2ltcG9ydFByaXZhdGUob3B0aW9ucy5wcml2LCBvcHRpb25zLnByaXZFbmMpOwogIGlmIChvcHRpb25zLnB1YikgdGhpcy5faW1wb3J0UHVibGljKG9wdGlvbnMucHViLCBvcHRpb25zLnB1YkVuYyk7Cn0KCm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjsKCktleVBhaXIuZnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGZyb21QdWJsaWMoZWMsIHB1YiwgZW5jKSB7CiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpIHJldHVybiBw
dWI7CiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7CiAgICBwdWI6IHB1YiwKICAgIHB1YkVuYzogZW5jCiAgfSk7Cn07CgpLZXlQYWlyLmZyb21Qcml2YXRlID0gZnVuY3Rpb24gZnJvbVByaXZhdGUoZWMsIHByaXYsIGVuYykgewogIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcikgcmV0dXJuIHByaXY7CiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7CiAgICBwcml2OiBwcml2LAogICAgcHJpdkVuYzogZW5jCiAgfSk7Cn07CgpLZXlQYWlyLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkgewogIHZh
ciBwdWIgPSB0aGlzLmdldFB1YmxpYygpOwogIGlmIChwdWIuaXNJbmZpbml0eSgpKSByZXR1cm4gewogICAgcmVzdWx0OiBmYWxzZSwKICAgIHJlYXNvbjogJ0ludmFsaWQgcHVibGljIGtleScKICB9OwogIGlmICghcHViLnZhbGlkYXRlKCkpIHJldHVybiB7CiAgICByZXN1bHQ6IGZhbHNlLAogICAgcmVhc29uOiAnUHVibGljIGtleSBpcyBub3QgYSBwb2ludCcKICB9OwogIGlmICghcHViLm11bCh0aGlzLmVjLmN1cnZlLm4pLmlzSW5maW5pdHkoKSkgcmV0dXJuIHsKICAgIHJlc3VsdDogZmFsc2UsCiAgICByZWFzb246ICdQ
dWJsaWMga2V5ICogTiAhPSBPJwogIH07CiAgcmV0dXJuIHsKICAgIHJlc3VsdDogdHJ1ZSwKICAgIHJlYXNvbjogbnVsbAogIH07Cn07CgpLZXlQYWlyLnByb3RvdHlwZS5nZXRQdWJsaWMgPSBmdW5jdGlvbiBnZXRQdWJsaWMoY29tcGFjdCwgZW5jKSB7CiAgLy8gY29tcGFjdCBpcyBvcHRpb25hbCBhcmd1bWVudAogIGlmICh0eXBlb2YgY29tcGFjdCA9PT0gJ3N0cmluZycpIHsKICAgIGVuYyA9IGNvbXBhY3Q7CiAgICBjb21wYWN0ID0gbnVsbDsKICB9CgogIGlmICghdGhpcy5wdWIpIHRoaXMucHViID0gdGhpcy5lYy5nLm11
bCh0aGlzLnByaXYpOwogIGlmICghZW5jKSByZXR1cm4gdGhpcy5wdWI7CiAgcmV0dXJuIHRoaXMucHViLmVuY29kZShlbmMsIGNvbXBhY3QpOwp9OwoKS2V5UGFpci5wcm90b3R5cGUuZ2V0UHJpdmF0ZSA9IGZ1bmN0aW9uIGdldFByaXZhdGUoZW5jKSB7CiAgaWYgKGVuYyA9PT0gJ2hleCcpIHJldHVybiB0aGlzLnByaXYudG9TdHJpbmcoMTYsIDIpO2Vsc2UgcmV0dXJuIHRoaXMucHJpdjsKfTsKCktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQcml2YXRlID0gZnVuY3Rpb24gX2ltcG9ydFByaXZhdGUoa2V5LCBlbmMpIHsKICB0
aGlzLnByaXYgPSBuZXcgQk4oa2V5LCBlbmMgfHwgMTYpOyAvLyBFbnN1cmUgdGhhdCB0aGUgcHJpdiB3b24ndCBiZSBiaWdnZXIgdGhhbiBuLCBvdGhlcndpc2Ugd2UgbWF5IGZhaWwKICAvLyBpbiBmaXhlZCBtdWx0aXBsaWNhdGlvbiBtZXRob2QKCiAgdGhpcy5wcml2ID0gdGhpcy5wcml2LnVtb2QodGhpcy5lYy5jdXJ2ZS5uKTsKfTsKCktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQdWJsaWMgPSBmdW5jdGlvbiBfaW1wb3J0UHVibGljKGtleSwgZW5jKSB7CiAgaWYgKGtleS54IHx8IGtleS55KSB7CiAgICAvLyBNb250Z29t
ZXJ5IHBvaW50cyBvbmx5IGhhdmUgYW4gYHhgIGNvb3JkaW5hdGUuCiAgICAvLyBXZWllcnN0cmFzcy9FZHdhcmRzIHBvaW50cyBvbiB0aGUgb3RoZXIgaGFuZCBoYXZlIGJvdGggYHhgIGFuZAogICAgLy8gYHlgIGNvb3JkaW5hdGVzLgogICAgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ21vbnQnKSB7CiAgICAgIGFzc2VydChrZXkueCwgJ05lZWQgeCBjb29yZGluYXRlJyk7CiAgICB9IGVsc2UgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ3Nob3J0JyB8fCB0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdlZHdhcmRzJykg
ewogICAgICBhc3NlcnQoa2V5LnggJiYga2V5LnksICdOZWVkIGJvdGggeCBhbmQgeSBjb29yZGluYXRlJyk7CiAgICB9CgogICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LCBrZXkueSk7CiAgICByZXR1cm47CiAgfQoKICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUuZGVjb2RlUG9pbnQoa2V5LCBlbmMpOwp9OyAvLyBFQ0RICgoKS2V5UGFpci5wcm90b3R5cGUuZGVyaXZlID0gZnVuY3Rpb24gZGVyaXZlKHB1YikgewogIHJldHVybiBwdWIubXVsKHRoaXMucHJpdikuZ2V0WCgpOwp9OyAvLyBFQ0RTQQoK
CktleVBhaXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywgZW5jLCBvcHRpb25zKSB7CiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMsIGVuYywgb3B0aW9ucyk7Cn07CgpLZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUpIHsKICByZXR1cm4gdGhpcy5lYy52ZXJpZnkobXNnLCBzaWduYXR1cmUsIHRoaXMpOwp9OwoKS2V5UGFpci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7CiAgcmV0dXJuICc8S2V5IHByaXY6ICcgKyAo
dGhpcy5wcml2ICYmIHRoaXMucHJpdi50b1N0cmluZygxNiwgMikpICsgJyBwdWI6ICcgKyAodGhpcy5wdWIgJiYgdGhpcy5wdWIuaW5zcGVjdCgpKSArICcgPic7Cn07Cgp9LHsiLi4vdXRpbHMiOjI1NSwiYm4uanMiOjI1Nn1dLDI1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDsKCmZ1bmN0aW9uIFNpZ25hdHVyZShvcHRpb25z
LCBlbmMpIHsKICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFNpZ25hdHVyZSkgcmV0dXJuIG9wdGlvbnM7CiAgaWYgKHRoaXMuX2ltcG9ydERFUihvcHRpb25zLCBlbmMpKSByZXR1cm47CiAgYXNzZXJ0KG9wdGlvbnMuciAmJiBvcHRpb25zLnMsICdTaWduYXR1cmUgd2l0aG91dCByIG9yIHMnKTsKICB0aGlzLnIgPSBuZXcgQk4ob3B0aW9ucy5yLCAxNik7CiAgdGhpcy5zID0gbmV3IEJOKG9wdGlvbnMucywgMTYpOwogIGlmIChvcHRpb25zLnJlY292ZXJ5UGFyYW0gPT09IHVuZGVmaW5lZCkgdGhpcy5yZWNvdmVyeVBhcmFtID0g
bnVsbDtlbHNlIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG9wdGlvbnMucmVjb3ZlcnlQYXJhbTsKfQoKbW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7CgpmdW5jdGlvbiBQb3NpdGlvbigpIHsKICB0aGlzLnBsYWNlID0gMDsKfQoKZnVuY3Rpb24gZ2V0TGVuZ3RoKGJ1ZiwgcCkgewogIHZhciBpbml0aWFsID0gYnVmW3AucGxhY2UrK107CgogIGlmICghKGluaXRpYWwgJiAweDgwKSkgewogICAgcmV0dXJuIGluaXRpYWw7CiAgfQoKICB2YXIgb2N0ZXRMZW4gPSBpbml0aWFsICYgMHhmOyAvLyBJbmRlZmluaXRlIGxlbmd0aCBvciBv
dmVyZmxvdwoKICBpZiAob2N0ZXRMZW4gPT09IDAgfHwgb2N0ZXRMZW4gPiA0KSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgdmFsID0gMDsKCiAgZm9yICh2YXIgaSA9IDAsIG9mZiA9IHAucGxhY2U7IGkgPCBvY3RldExlbjsgaSsrLCBvZmYrKykgewogICAgdmFsIDw8PSA4OwogICAgdmFsIHw9IGJ1ZltvZmZdOwogICAgdmFsID4+Pj0gMDsKICB9IC8vIExlYWRpbmcgemVyb2VzCgoKICBpZiAodmFsIDw9IDB4N2YpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHAucGxhY2UgPSBvZmY7CiAgcmV0dXJuIHZhbDsK
fQoKZnVuY3Rpb24gcm1QYWRkaW5nKGJ1ZikgewogIHZhciBpID0gMDsKICB2YXIgbGVuID0gYnVmLmxlbmd0aCAtIDE7CgogIHdoaWxlICghYnVmW2ldICYmICEoYnVmW2kgKyAxXSAmIDB4ODApICYmIGkgPCBsZW4pIHsKICAgIGkrKzsKICB9CgogIGlmIChpID09PSAwKSB7CiAgICByZXR1cm4gYnVmOwogIH0KCiAgcmV0dXJuIGJ1Zi5zbGljZShpKTsKfQoKU2lnbmF0dXJlLnByb3RvdHlwZS5faW1wb3J0REVSID0gZnVuY3Rpb24gX2ltcG9ydERFUihkYXRhLCBlbmMpIHsKICBkYXRhID0gdXRpbHMudG9BcnJheShkYXRhLCBl
bmMpOwogIHZhciBwID0gbmV3IFBvc2l0aW9uKCk7CgogIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MzApIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciBsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7CgogIGlmIChsZW4gPT09IGZhbHNlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAobGVuICsgcC5wbGFjZSAhPT0gZGF0YS5sZW5ndGgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciBybGVuID0g
Z2V0TGVuZ3RoKGRhdGEsIHApOwoKICBpZiAocmxlbiA9PT0gZmFsc2UpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciByID0gZGF0YS5zbGljZShwLnBsYWNlLCBybGVuICsgcC5wbGFjZSk7CiAgcC5wbGFjZSArPSBybGVuOwoKICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgc2xlbiA9IGdldExlbmd0aChkYXRhLCBwKTsKCiAgaWYgKHNsZW4gPT09IGZhbHNlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoZGF0YS5sZW5ndGggIT09IHNsZW4g
KyBwLnBsYWNlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgcyA9IGRhdGEuc2xpY2UocC5wbGFjZSwgc2xlbiArIHAucGxhY2UpOwoKICBpZiAoclswXSA9PT0gMCkgewogICAgaWYgKHJbMV0gJiAweDgwKSB7CiAgICAgIHIgPSByLnNsaWNlKDEpOwogICAgfSBlbHNlIHsKICAgICAgLy8gTGVhZGluZyB6ZXJvZXMKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgaWYgKHNbMF0gPT09IDApIHsKICAgIGlmIChzWzFdICYgMHg4MCkgewogICAgICBzID0gcy5zbGljZSgxKTsKICAgIH0gZWxzZSB7CiAgICAg
IC8vIExlYWRpbmcgemVyb2VzCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIHRoaXMuciA9IG5ldyBCTihyKTsKICB0aGlzLnMgPSBuZXcgQk4ocyk7CiAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDsKICByZXR1cm4gdHJ1ZTsKfTsKCmZ1bmN0aW9uIGNvbnN0cnVjdExlbmd0aChhcnIsIGxlbikgewogIGlmIChsZW4gPCAweDgwKSB7CiAgICBhcnIucHVzaChsZW4pOwogICAgcmV0dXJuOwogIH0KCiAgdmFyIG9jdGV0cyA9IDEgKyAoTWF0aC5sb2cobGVuKSAvIE1hdGguTE4yID4+PiAzKTsKICBhcnIucHVzaChv
Y3RldHMgfCAweDgwKTsKCiAgd2hpbGUgKC0tb2N0ZXRzKSB7CiAgICBhcnIucHVzaChsZW4gPj4+IChvY3RldHMgPDwgMykgJiAweGZmKTsKICB9CgogIGFyci5wdXNoKGxlbik7Cn0KClNpZ25hdHVyZS5wcm90b3R5cGUudG9ERVIgPSBmdW5jdGlvbiB0b0RFUihlbmMpIHsKICB2YXIgciA9IHRoaXMuci50b0FycmF5KCk7CiAgdmFyIHMgPSB0aGlzLnMudG9BcnJheSgpOyAvLyBQYWQgdmFsdWVzCgogIGlmIChyWzBdICYgMHg4MCkgciA9IFswXS5jb25jYXQocik7IC8vIFBhZCB2YWx1ZXMKCiAgaWYgKHNbMF0gJiAweDgwKSBz
ID0gWzBdLmNvbmNhdChzKTsKICByID0gcm1QYWRkaW5nKHIpOwogIHMgPSBybVBhZGRpbmcocyk7CgogIHdoaWxlICghc1swXSAmJiAhKHNbMV0gJiAweDgwKSkgewogICAgcyA9IHMuc2xpY2UoMSk7CiAgfQoKICB2YXIgYXJyID0gWzB4MDJdOwogIGNvbnN0cnVjdExlbmd0aChhcnIsIHIubGVuZ3RoKTsKICBhcnIgPSBhcnIuY29uY2F0KHIpOwogIGFyci5wdXNoKDB4MDIpOwogIGNvbnN0cnVjdExlbmd0aChhcnIsIHMubGVuZ3RoKTsKICB2YXIgYmFja0hhbGYgPSBhcnIuY29uY2F0KHMpOwogIHZhciByZXMgPSBbMHgzMF07
CiAgY29uc3RydWN0TGVuZ3RoKHJlcywgYmFja0hhbGYubGVuZ3RoKTsKICByZXMgPSByZXMuY29uY2F0KGJhY2tIYWxmKTsKICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTsKfTsKCn0seyIuLi91dGlscyI6MjU1LCJibi5qcyI6MjU2fV0sMjUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7Cgp2YXIgY3VydmVzID0gcmVxdWlyZSgnLi4vY3VydmVzJyk7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFy
IGFzc2VydCA9IHV0aWxzLmFzc2VydDsKdmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzOwoKdmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpOwoKdmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7CgpmdW5jdGlvbiBFRERTQShjdXJ2ZSkgewogIGFzc2VydChjdXJ2ZSA9PT0gJ2VkMjU1MTknLCAnb25seSB0ZXN0ZWQgd2l0aCBlZDI1NTE5IHNvIGZhcicpOwogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFRERTQSkpIHJldHVybiBuZXcgRUREU0EoY3VydmUpOwogIHZhciBjdXJ2ZSA9IGN1cnZl
c1tjdXJ2ZV0uY3VydmU7CiAgdGhpcy5jdXJ2ZSA9IGN1cnZlOwogIHRoaXMuZyA9IGN1cnZlLmc7CiAgdGhpcy5nLnByZWNvbXB1dGUoY3VydmUubi5iaXRMZW5ndGgoKSArIDEpOwogIHRoaXMucG9pbnRDbGFzcyA9IGN1cnZlLnBvaW50KCkuY29uc3RydWN0b3I7CiAgdGhpcy5lbmNvZGluZ0xlbmd0aCA9IE1hdGguY2VpbChjdXJ2ZS5uLmJpdExlbmd0aCgpIC8gOCk7CiAgdGhpcy5oYXNoID0gaGFzaC5zaGE1MTI7Cn0KCm1vZHVsZS5leHBvcnRzID0gRUREU0E7Ci8qKgoqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBtZXNzYWdl
IC0gbWVzc2FnZSBieXRlcwoqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfEtleVBhaXJ9IHNlY3JldCAtIHNlY3JldCBieXRlcyBvciBhIGtleXBhaXIKKiBAcmV0dXJucyB7U2lnbmF0dXJlfSAtIHNpZ25hdHVyZQoqLwoKRUREU0EucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1lc3NhZ2UsIHNlY3JldCkgewogIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpOwogIHZhciBrZXkgPSB0aGlzLmtleUZyb21TZWNyZXQoc2VjcmV0KTsKICB2YXIgciA9IHRoaXMuaGFzaEludChrZXkubWVzc2FnZVByZWZpeCgpLCBtZXNz
YWdlKTsKICB2YXIgUiA9IHRoaXMuZy5tdWwocik7CiAgdmFyIFJlbmNvZGVkID0gdGhpcy5lbmNvZGVQb2ludChSKTsKICB2YXIgc18gPSB0aGlzLmhhc2hJbnQoUmVuY29kZWQsIGtleS5wdWJCeXRlcygpLCBtZXNzYWdlKS5tdWwoa2V5LnByaXYoKSk7CiAgdmFyIFMgPSByLmFkZChzXykudW1vZCh0aGlzLmN1cnZlLm4pOwogIHJldHVybiB0aGlzLm1ha2VTaWduYXR1cmUoewogICAgUjogUiwKICAgIFM6IFMsCiAgICBSZW5jb2RlZDogUmVuY29kZWQKICB9KTsKfTsKLyoqCiogQHBhcmFtIHtBcnJheX0gbWVzc2FnZSAtIG1l
c3NhZ2UgYnl0ZXMKKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xTaWduYXR1cmV9IHNpZyAtIHNpZyBieXRlcwoqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfFBvaW50fEtleVBhaXJ9IHB1YiAtIHB1YmxpYyBrZXkKKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHB1YmxpYyBrZXkgbWF0Y2hlcyBzaWcgb2YgbWVzc2FnZQoqLwoKCkVERFNBLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnLCBwdWIpIHsKICBtZXNzYWdlID0gcGFyc2VCeXRlcyhtZXNzYWdlKTsKICBzaWcgPSB0aGlzLm1ha2VT
aWduYXR1cmUoc2lnKTsKICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKHB1Yik7CiAgdmFyIGggPSB0aGlzLmhhc2hJbnQoc2lnLlJlbmNvZGVkKCksIGtleS5wdWJCeXRlcygpLCBtZXNzYWdlKTsKICB2YXIgU0cgPSB0aGlzLmcubXVsKHNpZy5TKCkpOwogIHZhciBScGx1c0FoID0gc2lnLlIoKS5hZGQoa2V5LnB1YigpLm11bChoKSk7CiAgcmV0dXJuIFJwbHVzQWguZXEoU0cpOwp9OwoKRUREU0EucHJvdG90eXBlLmhhc2hJbnQgPSBmdW5jdGlvbiBoYXNoSW50KCkgewogIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7Cgog
IGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICBoYXNoLnVwZGF0ZShhcmd1bWVudHNbaV0pOwogIH0KCiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShoYXNoLmRpZ2VzdCgpKS51bW9kKHRoaXMuY3VydmUubik7Cn07CgpFRERTQS5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViKSB7CiAgcmV0dXJuIEtleVBhaXIuZnJvbVB1YmxpYyh0aGlzLCBwdWIpOwp9OwoKRUREU0EucHJvdG90eXBlLmtleUZyb21TZWNyZXQgPSBmdW5jdGlvbiBrZXlGcm9t
U2VjcmV0KHNlY3JldCkgewogIHJldHVybiBLZXlQYWlyLmZyb21TZWNyZXQodGhpcywgc2VjcmV0KTsKfTsKCkVERFNBLnByb3RvdHlwZS5tYWtlU2lnbmF0dXJlID0gZnVuY3Rpb24gbWFrZVNpZ25hdHVyZShzaWcpIHsKICBpZiAoc2lnIGluc3RhbmNlb2YgU2lnbmF0dXJlKSByZXR1cm4gc2lnOwogIHJldHVybiBuZXcgU2lnbmF0dXJlKHRoaXMsIHNpZyk7Cn07Ci8qKgoqICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWpvc2Vmc3Nvbi1lZGRzYS1lZDI1NTE5LTAzI3NlY3Rpb24tNS4yCioKKiBFRERTQSBk
ZWZpbmVzIG1ldGhvZHMgZm9yIGVuY29kaW5nIGFuZCBkZWNvZGluZyBwb2ludHMgYW5kIGludGVnZXJzLiBUaGVzZSBhcmUKKiBoZWxwZXIgY29udmVuaWVuY2UgbWV0aG9kcywgdGhhdCBwYXNzIGFsb25nIHRvIHV0aWxpdHkgZnVuY3Rpb25zIGltcGxpZWQKKiBwYXJhbWV0ZXJzLgoqCiovCgoKRUREU0EucHJvdG90eXBlLmVuY29kZVBvaW50ID0gZnVuY3Rpb24gZW5jb2RlUG9pbnQocG9pbnQpIHsKICB2YXIgZW5jID0gcG9pbnQuZ2V0WSgpLnRvQXJyYXkoJ2xlJywgdGhpcy5lbmNvZGluZ0xlbmd0aCk7CiAgZW5jW3RoaXMu
ZW5jb2RpbmdMZW5ndGggLSAxXSB8PSBwb2ludC5nZXRYKCkuaXNPZGQoKSA/IDB4ODAgOiAwOwogIHJldHVybiBlbmM7Cn07CgpFRERTQS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcykgewogIGJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcyhieXRlcyk7CiAgdmFyIGxhc3RJeCA9IGJ5dGVzLmxlbmd0aCAtIDE7CiAgdmFyIG5vcm1lZCA9IGJ5dGVzLnNsaWNlKDAsIGxhc3RJeCkuY29uY2F0KGJ5dGVzW2xhc3RJeF0gJiB+MHg4MCk7CiAgdmFyIHhJc09kZCA9IChieXRlc1tsYXN0SXhd
ICYgMHg4MCkgIT09IDA7CiAgdmFyIHkgPSB1dGlscy5pbnRGcm9tTEUobm9ybWVkKTsKICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludEZyb21ZKHksIHhJc09kZCk7Cn07CgpFRERTQS5wcm90b3R5cGUuZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSkgewogIHJldHVybiBudW0udG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTsKfTsKCkVERFNBLnByb3RvdHlwZS5kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnl0ZXMpIHsKICByZXR1cm4gdXRpbHMuaW50RnJvbUxFKGJ5dGVzKTsKfTsKCkVE
RFNBLnByb3RvdHlwZS5pc1BvaW50ID0gZnVuY3Rpb24gaXNQb2ludCh2YWwpIHsKICByZXR1cm4gdmFsIGluc3RhbmNlb2YgdGhpcy5wb2ludENsYXNzOwp9OwoKfSx7Ii4uL2N1cnZlcyI6MjQ3LCIuLi91dGlscyI6MjU1LCIuL2tleSI6MjUyLCIuL3NpZ25hdHVyZSI6MjUzLCJoYXNoLmpzIjoyNjN9XSwyNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDsKdmFyIHBhcnNlQnl0
ZXMgPSB1dGlscy5wYXJzZUJ5dGVzOwp2YXIgY2FjaGVkUHJvcGVydHkgPSB1dGlscy5jYWNoZWRQcm9wZXJ0eTsKLyoqCiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBpbnN0YW5jZQoqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFyYW1ldGVycwoqCiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5zZWNyZXRdIC0gc2VjcmV0IHNlZWQgYnl0ZXMKKiBAcGFyYW0ge1BvaW50fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IChha2EgYEFgIGluIGVkZHNhIHRlcm1zKQoqIEBw
YXJhbSB7QXJyYXk8Qnl0ZT59IFtwYXJhbXMucHViXSAtIHB1YmxpYyBrZXkgcG9pbnQgZW5jb2RlZCBhcyBieXRlcwoqCiovCgpmdW5jdGlvbiBLZXlQYWlyKGVkZHNhLCBwYXJhbXMpIHsKICB0aGlzLmVkZHNhID0gZWRkc2E7CiAgdGhpcy5fc2VjcmV0ID0gcGFyc2VCeXRlcyhwYXJhbXMuc2VjcmV0KTsKICBpZiAoZWRkc2EuaXNQb2ludChwYXJhbXMucHViKSkgdGhpcy5fcHViID0gcGFyYW1zLnB1YjtlbHNlIHRoaXMuX3B1YkJ5dGVzID0gcGFyc2VCeXRlcyhwYXJhbXMucHViKTsKfQoKS2V5UGFpci5mcm9tUHVibGljID0g
ZnVuY3Rpb24gZnJvbVB1YmxpYyhlZGRzYSwgcHViKSB7CiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpIHJldHVybiBwdWI7CiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7CiAgICBwdWI6IHB1YgogIH0pOwp9OwoKS2V5UGFpci5mcm9tU2VjcmV0ID0gZnVuY3Rpb24gZnJvbVNlY3JldChlZGRzYSwgc2VjcmV0KSB7CiAgaWYgKHNlY3JldCBpbnN0YW5jZW9mIEtleVBhaXIpIHJldHVybiBzZWNyZXQ7CiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7CiAgICBzZWNyZXQ6IHNlY3JldAogIH0pOwp9OwoKS2V5UGFp
ci5wcm90b3R5cGUuc2VjcmV0ID0gZnVuY3Rpb24gc2VjcmV0KCkgewogIHJldHVybiB0aGlzLl9zZWNyZXQ7Cn07CgpjYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViQnl0ZXMnLCBmdW5jdGlvbiBwdWJCeXRlcygpIHsKICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLnB1YigpKTsKfSk7CmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWInLCBmdW5jdGlvbiBwdWIoKSB7CiAgaWYgKHRoaXMuX3B1YkJ5dGVzKSByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLl9wdWJCeXRlcyk7CiAgcmV0dXJu
IHRoaXMuZWRkc2EuZy5tdWwodGhpcy5wcml2KCkpOwp9KTsKY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXZCeXRlcycsIGZ1bmN0aW9uIHByaXZCeXRlcygpIHsKICB2YXIgZWRkc2EgPSB0aGlzLmVkZHNhOwogIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7CiAgdmFyIGxhc3RJeCA9IGVkZHNhLmVuY29kaW5nTGVuZ3RoIC0gMTsKICB2YXIgYSA9IGhhc2guc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpOwogIGFbMF0gJj0gMjQ4OwogIGFbbGFzdEl4XSAmPSAxMjc7CiAgYVtsYXN0SXhdIHw9IDY0OwogIHJldHVybiBh
Owp9KTsKY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXYnLCBmdW5jdGlvbiBwcml2KCkgewogIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLnByaXZCeXRlcygpKTsKfSk7CmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdoYXNoJywgZnVuY3Rpb24gaGFzaCgpIHsKICByZXR1cm4gdGhpcy5lZGRzYS5oYXNoKCkudXBkYXRlKHRoaXMuc2VjcmV0KCkpLmRpZ2VzdCgpOwp9KTsKY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ21lc3NhZ2VQcmVmaXgnLCBmdW5jdGlvbiBtZXNzYWdlUHJlZml4KCkgewogIHJldHVybiB0
aGlzLmhhc2goKS5zbGljZSh0aGlzLmVkZHNhLmVuY29kaW5nTGVuZ3RoKTsKfSk7CgpLZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlKSB7CiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgY2FuIG9ubHkgdmVyaWZ5Jyk7CiAgcmV0dXJuIHRoaXMuZWRkc2Euc2lnbihtZXNzYWdlLCB0aGlzKTsKfTsKCktleVBhaXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWcpIHsKICByZXR1cm4gdGhpcy5lZGRzYS52ZXJpZnkobWVzc2FnZSwgc2lnLCB0aGlz
KTsKfTsKCktleVBhaXIucHJvdG90eXBlLmdldFNlY3JldCA9IGZ1bmN0aW9uIGdldFNlY3JldChlbmMpIHsKICBhc3NlcnQodGhpcy5fc2VjcmV0LCAnS2V5UGFpciBpcyBwdWJsaWMgb25seScpOwogIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5zZWNyZXQoKSwgZW5jKTsKfTsKCktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhlbmMpIHsKICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMucHViQnl0ZXMoKSwgZW5jKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjsKCn0seyIuLi91
dGlscyI6MjU1fV0sMjUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9i
aiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTsKCnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7CnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5Owp2YXIgcGFyc2VCeXRlcyA9IHV0aWxz
LnBhcnNlQnl0ZXM7Ci8qKgoqIEBwYXJhbSB7RUREU0F9IGVkZHNhIC0gZWRkc2EgaW5zdGFuY2UKKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxPYmplY3R9IHNpZyAtCiogQHBhcmFtIHtBcnJheTxCeXRlcz58UG9pbnR9IFtzaWcuUl0gLSBSIHBvaW50IGFzIFBvaW50IG9yIGJ5dGVzCiogQHBhcmFtIHtBcnJheTxCeXRlcz58Ym59IFtzaWcuU10gLSBTIHNjYWxhciBhcyBibiBvciBieXRlcwoqIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlJlbmNvZGVkXSAtIFIgcG9pbnQgZW5jb2RlZAoqIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+
fSBbc2lnLlNlbmNvZGVkXSAtIFMgc2NhbGFyIGVuY29kZWQKKi8KCmZ1bmN0aW9uIFNpZ25hdHVyZShlZGRzYSwgc2lnKSB7CiAgdGhpcy5lZGRzYSA9IGVkZHNhOwogIGlmIChfdHlwZW9mKHNpZykgIT09ICdvYmplY3QnKSBzaWcgPSBwYXJzZUJ5dGVzKHNpZyk7CgogIGlmIChBcnJheS5pc0FycmF5KHNpZykpIHsKICAgIHNpZyA9IHsKICAgICAgUjogc2lnLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKSwKICAgICAgUzogc2lnLnNsaWNlKGVkZHNhLmVuY29kaW5nTGVuZ3RoKQogICAgfTsKICB9CgogIGFzc2VydChz
aWcuUiAmJiBzaWcuUywgJ1NpZ25hdHVyZSB3aXRob3V0IFIgb3IgUycpOwogIGlmIChlZGRzYS5pc1BvaW50KHNpZy5SKSkgdGhpcy5fUiA9IHNpZy5SOwogIGlmIChzaWcuUyBpbnN0YW5jZW9mIEJOKSB0aGlzLl9TID0gc2lnLlM7CiAgdGhpcy5fUmVuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5SKSA/IHNpZy5SIDogc2lnLlJlbmNvZGVkOwogIHRoaXMuX1NlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUykgPyBzaWcuUyA6IHNpZy5TZW5jb2RlZDsKfQoKY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUycsIGZ1bmN0
aW9uIFMoKSB7CiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMuU2VuY29kZWQoKSk7Cn0pOwpjYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSJywgZnVuY3Rpb24gUigpIHsKICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLlJlbmNvZGVkKCkpOwp9KTsKY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUmVuY29kZWQnLCBmdW5jdGlvbiBSZW5jb2RlZCgpIHsKICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLlIoKSk7Cn0pOwpjYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTZW5j
b2RlZCcsIGZ1bmN0aW9uIFNlbmNvZGVkKCkgewogIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZUludCh0aGlzLlMoKSk7Cn0pOwoKU2lnbmF0dXJlLnByb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcygpIHsKICByZXR1cm4gdGhpcy5SZW5jb2RlZCgpLmNvbmNhdCh0aGlzLlNlbmNvZGVkKCkpOwp9OwoKU2lnbmF0dXJlLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIHRvSGV4KCkgewogIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy50b0J5dGVzKCksICdoZXgnKS50b1VwcGVyQ2FzZSgpOwp9OwoKbW9kdWxlLmV4
cG9ydHMgPSBTaWduYXR1cmU7Cgp9LHsiLi4vdXRpbHMiOjI1NSwiYm4uanMiOjI1Nn1dLDI1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCm1vZHVsZS5leHBvcnRzID0gewogIGRvdWJsZXM6IHsKICAgIHN0ZXA6IDQsCiAgICBwb2ludHM6IFtbJ2U2MGZjZTkzYjU5ZTllYzUzMDExYWFiYzIxYzIzZTk3YjJhMzEzNjliODdhNWFlOWM0NGVlODllMmE2ZGVjMGEnLCAnZjdlMzUwNzM5OWU1OTU5MjlkYjk5ZjM0ZjU3OTM3MTAxMjk2ODkxZTQ0ZDIzZjBiZTFmMzJjY2U2OTYxNjgyMSdd
LCBbJzgyODIyNjMyMTJjNjA5ZDllYTJhNmUzZTE3MmRlMjM4ZDhjMzljYWJkNWFjMWNhMTA2NDZlMjNmZDVmNTE1MDgnLCAnMTFmOGE4MDk4NTU3ZGZlNDVlODI1NmU4MzBiNjBhY2U2MmQ2MTNhYzJmN2IxN2JlZDMxYjZlYWZmNmUyNmNhZiddLCBbJzE3NWUxNTlmNzI4Yjg2NWE3MmY5OWNjNmM2ZmM4NDZkZTBiOTM4MzNmZDIyMjJlZDczZmNlNWI1NTFlNWI3MzknLCAnZDM1MDZlMGQ5ZTNjNzllYmE0ZWY5N2E1MWZmNzFmNWVhY2I1OTU1YWRkMjQzNDVjNmVmYTZmZmVlOWZlZDY5NSddLCBbJzM2M2Q5MGQ0NDdiMDBjOWM5OWNl
YWMwNWI2MjYyZWUwNTM0NDFjN2U1NTU1MmZmZTUyNmJhZDhmODNmZjQ2NDAnLCAnNGUyNzNhZGZjNzMyMjIxOTUzYjQ0NTM5N2YzMzYzMTQ1YjlhODkwMDgxOTllY2I2MjAwM2M3ZjNiZWU5ZGU5J10sIFsnOGI0YjVmMTY1ZGYzYzJiZThjNjI0NGI1Yjc0NTYzODg0M2U0YTc4MWExNWJjZDFiNjlmNzlhNTVkZmZkZjgwYycsICc0YWFkMGE2ZjY4ZDMwOGI0YjNmYmQ3ODEzYWIwZGEwNGY5ZTMzNjU0NjE2MmVlNTZiM2VmZjBjNjVmZDRmZDM2J10sIFsnNzIzY2JhYTZlNWRiOTk2ZDZiZjc3MWMwMGJkNTQ4YzdiNzAwZGJmZmE2YzBl
NzdiY2I2MTE1OTI1MjMyZmNkYScsICc5NmU4NjdiNTU5NWNjNDk4YTkyMTEzNzQ4ODgyNGQ2ZTI2NjBhMDY1Mzc3OTQ5NDgwMWRjMDY5ZDllYjM5ZjVmJ10sIFsnZWViZmE0ZDQ5M2JlYmY5OGJhNWZlZWM4MTJjMmQzYjUwOTQ3OTYxMjM3YTkxOTgzOWE1MzNlY2EwZTdkZDdmYScsICc1ZDlhOGNhMzk3MGVmMGYyNjllZTdlZGFmMTc4MDg5ZDlhZTRjZGMzYTcxMWY3MTJkZGZkNGZkYWUxZGU4OTk5J10sIFsnMTAwZjQ0ZGE2OTZlNzE2NzI3OTFkMGEwOWI3YmRlNDU5ZjEyMTVhMjliM2MwM2JmZWZkNzgzNWIzOWE0OGRiMCcsICdj
ZGQ5ZTEzMTkyYTAwYjc3MmVjOGYzMzAwYzA5MDY2NmI3ZmY0YTE4ZmY1MTk1YWMwZmJkNWNkNjJiYzY1YTA5J10sIFsnZTEwMzFiZTI2MmM3ZWQxYjFkYzkyMjdhNGEwNGMwMTdhNzdmOGQ0NDY0ZjNiMzg1MmM4YWNkZTZlNTM0ZmQyZCcsICc5ZDcwNjE5Mjg5NDA0MDVlNmJiNmE0MTc2NTk3NTM1YWYyOTJkZDQxOWUxY2VkNzlhNDRmMThmMjk0NTZhMDBkJ10sIFsnZmVlYTZjYWU0NmQ1NWI1MzBhYzI4MzlmMTQzYmQ3ZWM1Y2Y4YjI2NmE0MWQ2YWY1MmQ1ZTY4OGQ5MDk0Njk2ZCcsICdlNTdjNmI2Yzk3ZGNlMWJhYjA2ZTRlMTJi
ZjNlY2Q1Yzk4MWM4OTU3Y2M0MTQ0MmQzMTU1ZGViZjE4MDkwMDg4J10sIFsnZGE2N2E5MWQ5MTA0OWNkY2IzNjdiZTRiZTZmZmNhM2NmZWVkNjU3ZDgwODU4M2RlMzNmYTk3OGJjMWVjNmNiMScsICc5YmFjYWEzNTQ4MTY0MmJjNDFmNDYzZjdlYzk3ODBlNWRlYzdhZGM1MDhmNzQwYTE3ZTllYThlMjdhNjhiZTFkJ10sIFsnNTM5MDRmYWEwYjMzNGNkZGE2ZTAwMDkzNWVmMjIxNTFlYzA4ZDBmN2JiMTEwNjlmNTc1NDVjY2MxYTM3YjdjMCcsICc1YmMwODdkMGJjODAxMDZkODhjOWVjY2FjMjBkM2MxYzEzOTk5OTgxZTE0NDM0Njk5
ZGNiMDk2YjAyMjc3MWM4J10sIFsnOGU3YmNkMGJkMzU5ODNhNzcxOWNjYTc3NjRjYTkwNjc3OWI1M2EwNDNhOWI4YmNhZWZmOTU5ZjQzYWQ4NjA0NycsICcxMGI3NzcwYjJhM2RhNGIzOTQwMzEwNDIwY2E5NTE0NTc5ZTg4ZTJlNDdmZDY4YjNlYTEwMDQ3ZTg0NjAzNzJhJ10sIFsnMzg1ZWVkMzRjMWNkZmYyMWU2ZDA4MTg2ODliODFiZGU3MWE3ZjRmMTgzOTdlNjY5MGE4NDFlMTU5OWM0Mzg2MicsICcyODNiZWJjM2U4ZWEyM2Y1NjcwMWRlMTllOWViZjQ1NzZiMzA0ZWVjMjA4NmRjOGNjMDQ1OGZlNTU0MmU1NDUzJ10sIFsnNmY5
ZDliODAzZWNmMTkxNjM3YzczYTQ0MTNkZmExODBmZGRmODRhNTk0N2ZiYzljNjA2ZWQ4NmMzZmFjM2E3JywgJzdjODBjNjhlNjAzMDU5YmE2OWI4ZTJhMzBlNDVjNGQ0N2VhNGRkMmY1YzI4MTAwMmQ4Njg5MDYwM2E4NDIxNjAnXSwgWyczMzIyZDQwMTI0M2M0ZTI1ODJhMjE0N2MxMDRkNmVjYmY3NzRkMTYzZGIwZjVlNTMxM2I3ZTBlNzQyZDBlNmJkJywgJzU2ZTcwNzk3ZTk2NjRlZjViZmIwMTliYzRkZGFmOWI3MjgwNWY2M2VhMjg3M2FmNjI0ZjNhMmU5NmMyOGIyYTAnXSwgWyc4NTY3MmM3ZDJkZTBiN2RhMmJkMTc3MGQ4OTY2
NTg2ODc0MWIzZjlhZjc2NDMzOTc3MjFkNzRkMjgxMzRhYjgzJywgJzdjNDgxYjliNWI0M2IyZWI2Mzc0MDQ5YmZhNjJjMmU1ZTc3ZjE3ZmNjNTI5OGY0NGM4ZTMwOTRmNzkwMzEzYTYnXSwgWyc5NDhiZjgwOWIxOTg4YTQ2YjA2YzlmMTkxOTQxM2IxMGY5MjI2YzYwZjY2ODgzMmZmZDk1OWFmNjBjODJhMGEnLCAnNTNhNTYyODU2ZGNiNjY0NmRjNmI3NGM1ZDFjMzQxOGM2ZDRkZmYwOGM5N2NkMmJlZDRjYjdmODhkOGM4ZTU4OSddLCBbJzYyNjBjZTdmNDYxODAxYzM0ZjA2N2NlMGYwMjg3M2E4ZjFiMGU0NGRmYzY5NzUyYWNjZWNk
ODE5ZjM4ZmQ4ZTgnLCAnYmMyZGE4MmI2ZmE1YjU3MWE3ZjA5MDQ5Nzc2YTFlZjdlY2QyOTIyMzgwNTFjMTk4YzFhODRlOTViMmI0YWUxNyddLCBbJ2U1MDM3ZGUwYWZjMWQ4ZDQzZDgzNDg0MTRiYmY0MTAzMDQzZWM4ZjU3NWJmZGM0MzI5NTNjYzhkMjAzN2ZhMmQnLCAnNDU3MTUzNGJhYTk0ZDNiNWY5Zjk4ZDA5ZmI5OTBiZGRiZDVmNWIwM2VjNDgxZjEwZTBlNWRjODQxZDc1NWJkYSddLCBbJ2UwNjM3MmIwZjRhMjA3YWRmNWVhOTA1ZThmMTc3MWI0ZTdlOGRiZDFjNmE2YzViNzI1ODY2YTBhZTRmY2U3MjUnLCAnN2E5MDg5NzRi
Y2UxOGNmZTEyYTI3YmIyYWQ1YTQ4OGNkNzQ4NGE3Nzg3MTA0ODcwYjI3MDM0Zjk0ZWVlMzFkZCddLCBbJzIxM2M3YTcxNWNkNWQ0NTM1OGQwYmJmOWRjMGNlMDIyMDRiMTBiZGRlMmEzZjU4NTQwYWQ2OTA4ZDA1NTk3NTQnLCAnNGI2ZGFkMGI1YWU0NjI1MDcwMTNhZDA2MjQ1YmExOTBiYjQ4NTBmNWYzNmE3ZWVkZGZmMmMyNzUzNGI0NThmMiddLCBbJzRlN2MyNzJhN2FmNGIzNGU4ZGJiOTM1MmE1NDE5YTg3ZTI4MzhjNzBhZGM2MmNkZGYwY2MzYTNiMDhmYmQ1M2MnLCAnMTc3NDljNzY2YzlkMGIxOGUxNmZkMDlmNmRlZjY4MWI1
MzBiOTYxNGJmZjdkZDMzZTBiMzk0MTgxN2RjYWFlNiddLCBbJ2ZlYTc0ZTNkYmU3NzhiMWIxMGYyMzhhZDYxNjg2YWE1Yzc2ZTNkYjJiZTQzMDU3NjMyNDI3ZTI4NDBmYjI3YjYnLCAnNmUwNTY4ZGI5YjBiMTMyOTdjZjY3NGRlY2NiNmFmOTMxMjZiNTk2Yjk3M2Y3Yjc3NzAxZDNkYjdmMjNjYjk2ZiddLCBbJzc2ZTY0MTEzZjY3N2NmMGUxMGEyNTcwZDU5OTk2OGQzMTU0NGUxNzliNzYwNDMyOTUyYzAyYTQ0MTdiZGRlMzknLCAnYzkwZGRmOGRlZTRlOTVjZjU3NzA2NmQ3MDY4MWYwZDM1ZTJhMzNkMmI1NmQyMDMyYjRiMTc1MmQx
OTAxYWMwMSddLCBbJ2M3MzhjNTZiMDNiMmFiZTFlODI4MWJhYTc0M2Y4ZjlhOGY3Y2M2NDNkZjI2Y2JlZTNhYjE1MDI0MmJjYmI4OTEnLCAnODkzZmI1Nzg5NTFhZDI1MzdmNzE4ZjJlYWNiZmJiYmI4MjMxNGVlZjc4ODBjZmU5MTdlNzM1ZDk2OTlhODRjMyddLCBbJ2Q4OTU2MjY1NDhiNjViODFlMjY0Yzc2MzdjOTcyODc3ZDFkNzJlNWYzYTkyNTAxNDM3MmU5ZjY1ODhmNmMxNGInLCAnZmViZmFhMzhmMmJjN2VhZTcyOGVjNjA4MThjMzQwZWIwMzQyOGQ2MzJiYjA2N2UxNzkzNjNlZDc1ZDdkOTkxZiddLCBbJ2I4ZGE5NDAzMmE5
NTc1MThlYjBmNjQzMzU3MWU4NzYxY2VmZmM3MzY5M2U4NGVkZDQ5MTUwYTU2NGY2NzZlMDMnLCAnMjgwNGRmYTQ0ODA1YTFlNGQ3Yzk5Y2M5NzYyODA4YjA5MmNjNTg0ZDk1ZmYzYjUxMTQ4OGU0ZTc0ZWZkZjZlNyddLCBbJ2U4MGZlYTE0NDQxZmIzM2E3ZDhhZGFiOTQ3NWQ3ZmFiMjAxOWVmZmI1MTU2YTc5MmYxYTExNzc4ZTNjMGRmNWQnLCAnZWVkMWRlN2Y2MzhlMDA3NzFlODk3NjhjYTNjYTk0NDcyZDE1NWU4MGFmMzIyZWE5ZmNiNDI5MWI2YWM5ZWM3OCddLCBbJ2EzMDE2OTdiZGZjZDcwNDMxM2JhNDhlNTFkNTY3NTQzZjJh
MTgyMDMxZWZkNjkxNWRkYzA3YmJjYzRlMTYwNzAnLCAnNzM3MGY5MWNmYjY3ZTRmNTA4MTgwOWZhMjVkNDBmOWIxNzM1ZGJmN2MwYTExYTEzMGMwZDFhMDQxZTE3N2VhMSddLCBbJzkwYWQ4NWIzODlkNmI5MzY0NjNmOWQwNTEyNjc4ZGUyMDhjYzMzMGIxMTMwN2ZmZmFiN2FjNjNlM2ZiMDRlZDQnLCAnZTUwN2EzNjIwYTM4MjYxYWZmZGNiZDk0MjcyMjJiODM5YWVmYWJlMTU4Mjg5NGQ5OTFkNGQ0OGNiNmVmMTUwJ10sIFsnOGY2OGI5ZDJmNjNiNWYzMzkyMzljMWFkOTgxZjE2MmVlODhjNTY3ODcyM2VhMzM1MWI3YjQ0NGM5ZWM0
YzBkYScsICc2NjJhOWYyZGJhMDYzOTg2ZGUxZDkwYzJiNmJlMjE1ZGJiZWEyY2ZlOTU1MTBiZmRmMjNjYmY3OTUwMWZmZjgyJ10sIFsnZTRmM2ZiMDE3NmFmODVkNjVmZjk5ZmY5MTk4YzM2MDkxZjQ4ZTg2NTAzNjgxZTNlNjY4NmZkNTA1MzIzMWUxMScsICcxZTYzNjMzYWQwZWY0ZjFjMTY2MWE2ZDBlYTAyYjcyODZjYzdlNzRlYzk1MWQxYzk4MjJjMzg1NzZmZWI3M2JjJ10sIFsnOGMwMGZhOWIxOGViZjMzMWViOTYxNTM3YTQ1YTQyNjZjNzAzNGYyZjBkNGUxZDA3MTZmYjZlYWUyMGVhZTI5ZScsICdlZmE0NzI2N2ZlYTUyMWEx
YTlkYzM0M2EzNzM2Yzk3NGMyZmFkYWZhODFlMzZjNTRlN2QyYTRjNjY3MDI0MTRiJ10sIFsnZTdhMjZjZTY5ZGQ0ODI5ZjNlMTBjZWMwYTllOThlZDMxNDNkMDg0ZjMwOGI5MmMwOTk3ZmRkZmM2MGNiM2U0MScsICcyYTc1OGUzMDBmYTc5ODRiNDcxYjAwNmExYWFmYmIxOGQwYTZiMmMwNDIwZTgzZTIwZThhOTQyMWNmMmNmZDUxJ10sIFsnYjY0NTllMGVlMzY2MmVjOGQyMzU0MGMyMjNiY2JkYzU3MWNiY2I5NjdkNzk0MjRmM2NmMjllYjNkZTZiODBlZicsICc2N2M4NzZkMDZmM2UwNmRlMWRhZGYxNmU1NjYxZGIzYzRiM2FlNmQ0
OGUzNWIyZmYzMGJmMGI2MWE3MWJhNDUnXSwgWydkNjhhODBjODI4MGJiODQwNzkzMjM0YWExMThmMDYyMzFkNmYxZmM2N2U3M2M1YTVkZWRhMGY1YjQ5Njk0M2U4JywgJ2RiOGJhOWZmZjRiNTg2ZDAwYzRiMWY5MTc3YjBlMjhiNWIwZTdiOGY3ODQ1Mjk1YTI5NGM4NDI2NmIxMzMxMjAnXSwgWyczMjRhZWQ3ZGY2NWM4MDQyNTJkYzAyNzA5MDdhMzBiMDk2MTJhZWI5NzM0NDljZWE0MDk1OTgwZmMyOGQzZDVkJywgJzY0OGEzNjU3NzRiNjFmMmZmMTMwYzBjMzVhZWMxZjRmMTkyMTNiMGM3ZTMzMjg0Mzk2NzIyNGFmOTZhYjdjODQn
XSwgWyc0ZGY5YzE0OTE5Y2RlNjFmNmQ1MWRmZGJlNWZlZTVkY2VlYzQxNDNiYThkMWNhODg4ZThiZDM3M2ZkMDU0Yzk2JywgJzM1ZWM1MTA5MmQ4NzI4MDUwOTc0YzIzYTFkODVkNGI1ZDUwNmNkYzI4ODQ5MDE5MmViYWMwNmNhZDEwZDVkJ10sIFsnOWMzOTE5YTg0YTQ3NDg3MGZhZWQ4YTljMWNjNjYwMjE1MjM0ODkwNTRkN2YwMzA4Y2JmYzk5YzhhYzFmOThjZCcsICdkZGI4NGYwZjRhNGRkZDU3NTg0ZjA0NGJmMjYwZTY0MTkwNTMyNmY3NmM2NGM4ZTZiZTdlNWUwM2Q0ZmM1OTlkJ10sIFsnNjA1NzE3MGIxZGQxMmZkZjhkZTA1
ZjI4MWQ4ZTA2YmI5MWUxNDkzYThiOTFkNGNjNWEyMTM4MjEyMGE5NTllNScsICc5YTFhZjBiMjZhNmE0ODA3YWRkOWEyZGFmNzFkZjI2MjQ2NTE1MmJjM2VlMjRjNjVlODk5YmU5MzIzODVhMmE4J10sIFsnYTU3NmRmOGUyM2EwODQxMTQyMTQzOWE0NTE4ZGEzMTg4MGNlZjBmYmE3ZDRkZjEyYjFhNjk3M2VlY2I5NDI2NicsICc0MGE2YmYyMGU3NjY0MGIyYzkyYjk3YWZlNThjZDgyYzQzMmUxMGE3ZjUxNGQ5ZjNlZThiZTExYWUxYjI4ZWM4J10sIFsnNzc3OGE3OGMyOGRlYzNlMzBhMDVmZTk2MjlkZThjMzhiYjMwZDFmNWNmOWEz
YTIwOGY3NjM4ODliZTU4YWQ3MScsICczNDYyNmQ5YWI1YTViMjJmZjcwOThlMTJmMmZmNTgwMDg3YjM4NDExZmYyNGFjNTYzYjUxM2ZjMWZkOWY0M2FjJ10sIFsnOTI4OTU1ZWU2MzdhODQ0NjM3MjlmZDMwZTdhZmQyZWQ1Zjk2Mjc0ZTVhZDdlNWNiMDllZGE5YzA2ZDkwM2FjJywgJ2MyNTYyMTAwM2QzZjQyYTgyN2I3OGExMzA5M2E5NWVlYWMzZDI2ZWZhOGE4ZDgzZmM1MTgwZTkzNWJjZDA5MWYnXSwgWyc4NWQwZmVmM2VjNmRiMTA5Mzk5MDY0ZjNhMGUzYjI4NTU2NDViNGE5MDdhZDM1NDUyN2FhZTc1MTYzZDgyNzUxJywgJzFm
MDM2NDg0MTNhMzhjMGJlMjlkNDk2ZTU4MmNmNTY2M2U4NzUxZTk2ODc3MzMxNTgyYzIzN2EyNGViMWY5NjInXSwgWydmZjJiMGRjZTk3ZWVjZTk3YzFjOWI2MDQxNzk4Yjg1ZGZkZmI2ZDg4ODJkYTIwMzA4ZjU0MDQ4MjQ1MjYwODdlJywgJzQ5M2QxM2ZlZjUyNGJhMTg4YWY0YzRkYzU0ZDA3OTM2YzdiN2VkNmZiOTBlMmNlYjJjOTUxZTAxZjBjMjk5MDcnXSwgWyc4MjdmYmJlNGIxZTg4MGVhOWVkMmIyZTYzMDFiMjEyYjU3ZjFlZTE0OGNkNmRkMjg3ODBlNWUyY2Y4NTZlMjQxJywgJ2M2MGY5YzkyM2M3MjdiMGI3MWJlZjJjNjdk
MWQxMjY4N2ZmN2E2MzE4NjkwMzE2NmQ2MDViNjhiYWVjMjkzZWMnXSwgWydlYWE2NDlmMjFmNTFiZGJhZTdiZTRhZTM0Y2U2ZTUyMTdhNThmZGNlN2Y0N2Y5YWE3ZjNiNThmYTIxMjBlMmIzJywgJ2JlMzI3OWVkNWJiYmIwM2FjNjlhODBmODk4NzlhYTVhMDFhNmI5NjVmMTNmN2U1OWQ0N2E1MzA1YmE1YWQ5M2QnXSwgWydlNGE0MmQ0M2M1Y2YxNjlkOTM5MWRmNmRlY2Y0MmVlNTQxYjZkOGYwYzlhMTM3NDAxZTIzNjMyZGRhMzRkMjRmJywgJzRkOWY5MmU3MTZkMWM3MzUyNmZjOTljY2ZiOGFkMzRjZTg4NmVlZGZhOGQ4ZTRmMTNh
N2Y3MTMxZGViYTk0MTQnXSwgWycxZWM4MGZlZjM2MGNiZGQ5NTQxNjBmYWRhYjM1MmI2YjkyYjUzNTc2YTg4ZmVhNDk0NzE3M2I5ZDQzMDBiZjE5JywgJ2FlZWZlOTM3NTZiNTM0MGQyZjNhNDk1OGE3YWJiZjVlMDE0NmU3N2Y2Mjk1YTA3YjY3MWNkYzFjYzEwN2NlZmQnXSwgWycxNDZhNzc4YzA0NjcwYzJmOTFiMDBhZjQ2ODBkZmE4YmNlMzQ5MDcxN2Q1OGJhODg5ZGRiNTkyODM2NjY0MmJlJywgJ2IzMThlMGVjMzM1NDAyOGFkZDY2OTgyN2Y5ZDRiMjg3MGFhYTk3MWQyZjdlNWVkMWQwYjI5NzQ4M2Q4M2VmZDAnXSwgWydmYTUw
YzBmNjFkMjJlNWYwN2UzYWNlYmIxYWEwN2IxMjhkMDAxMjIwOWEyOGI5Nzc2ZDc2YTg3OTMxODBlZWY5JywgJzZiODRjNjkyMjM5N2ViYTliNzJjZDI4NzIyODFhNjhhNWU2ODMyOTNhNTdhMjEzYjM4Y2Q4ZDdkM2Y0ZjI4MTEnXSwgWydkYTFkNjFkMGNhNzIxYTExYjFhNWJmNmI3ZDg4ZTg0MjFhMjg4YWI1ZDViYmE1MjIwZTUzZDMyYjVmMDY3ZWMyJywgJzgxNTdmNTVhN2M5OTMwNmM3OWMwNzY2MTYxYzkxZTI5NjZhNzM4OTlkMjc5YjQ4YTY1NWZiYTBmMWFkODM2ZjEnXSwgWydhOGUyODJmZjBjOTcwNjkwNzIxNWZmOThlOGZk
NDE2NjE1MzExZGUwNDQ2ZjFlMDYyYTczYjA2MTBkMDY0ZTEzJywgJzdmOTczNTViOGRiODFjMDlhYmZiN2YzYzViMjUxNTg4OGI2NzlhM2U1MGRkNmJkNmNlZjdjNzMxMTFmNGNjMGMnXSwgWycxNzRhNTNiOWM5YTI4NTg3MmQzOWU1NmU2OTEzY2FiMTVkNTliMWZhNTEyNTA4YzAyMmYzODJkZTgzMTk0OTdjJywgJ2NjYzlkYzM3YWJmYzljMTY1N2I0MTU1ZjJjNDdmOWU2NjQ2YjNhMWQ4Y2I5ODU0MzgzZGExM2FjMDc5YWZhNzMnXSwgWyc5NTkzOTY5ODE5NDM3ODVjM2QzZTU3ZWRmNTAxOGNkYmUwMzllNzMwZTQ5MThiM2Q4ODRm
ZGZmMDk0NzViN2JhJywgJzJlN2U1NTI4ODhjMzMxZGQ4YmEwMzg2YTRiOWNkNjg0OWM2NTNmNjRjODcwOTM4NWU5YjhhYmY4NzUyNGYyZmQnXSwgWydkMmE2M2E1MGFlNDAxZTU2ZDY0NWExMTUzYjEwOWE4ZmNjYTBhNDNkNTYxZmJhMmRiYjUxMzQwYzlkODJiMTUxJywgJ2U4MmQ4NmZiNjQ0M2ZjYjc1NjVhZWU1OGIyOTQ4MjIwYTcwZjc1MGFmNDg0Y2E1MmQ0MTQyMTc0ZGNmODk0MDUnXSwgWyc2NDU4N2UyMzM1NDcxZWI4OTBlZTc4OTZkN2NmZGM4NjZiYWNiZGJkMzgzOTMxN2IzNDM2ZjliNDU2MTdlMDczJywgJ2Q5OWZjZGQ1
YmY2OTAyZTJhZTk2ZGQ2NDQ3YzI5OWExODViOTBhMzkxMzNhZWFiMzU4Mjk5ZTVlOWZhZjY1ODknXSwgWyc4NDgxYmRlMGU0ZTRkODg1YjNhNTQ2ZDNlNTQ5ZGUwNDJmMGFhNmNlYTI1MGU3ZmQzNThkNmM4NmRkNDVlNDU4JywgJzM4ZWU3YjhjYmE1NDA0ZGQ4NGEyNWJmMzljZWNiMmNhOTAwYTc5YzQyYjI2MmU1NTZkNjRiMWI1OTc3OTA1N2UnXSwgWycxMzQ2NGE1N2E3ODEwMmFhNjJiNjk3OWFlODE3ZjQ2MzdmZmNmZWQzYzRiMWNlMzBiY2Q2MzAzZjZjYWY2NjZiJywgJzY5YmUxNTkwMDQ2MTQ1ODBlZjdlNDMzNDUzY2NiMGNh
NDhmMzAwYTgxZDA5NDJlMTNmNDk1YTkwN2Y2ZWNjMjcnXSwgWydiYzRhOWRmNWI3MTNmZTJlOWFlZjQzMGJjYzFkYzk3YTBjZDljY2VkZTJmMjg1ODhjYWRhM2EwZDJkODNmMzY2JywgJ2QzYTgxY2E2ZTc4NWMwNjM4MzkzN2FkZjRiNzk4Y2FhNmU4YTlmYmZhNTQ3YjE2ZDc1OGQ2NjY1ODFmMzNjMSddLCBbJzhjMjhhOTdiZjgyOThiYzBkMjNkOGM3NDk0NTJhMzJlNjk0YjY1ZTMwYTk0NzJhMzk1NGFiMzBmZTUzMjRjYWEnLCAnNDBhMzA0NjNhMzMwNTE5MzM3OGZlZGYzMWY3Y2MwZWI3YWU3ODRmMDQ1MWNiOTQ1OWU3MWRjNzNj
YmVmOTQ4MiddLCBbJzhlYTk2NjYxMzk1MjdhOGMxZGQ5NGNlNGYwNzFmZDIzYzhiMzUwYzVhNGJiMzM3NDhjNGJhMTExZmFjY2FlMCcsICc2MjBlZmFiYmM4ZWUyNzgyZTI0ZTdjMGNmYjk1YzVkNzM1Yjc4M2JlOWNmMGY4ZTk1NWFmMzRhMzBlNjJiOTQ1J10sIFsnZGQzNjI1ZmFlZjViYTA2MDc0NjY5NzE2YmJkMzc4OGQ4OWJkZGU4MTU5NTk5NjgwOTJmNzZjYzRlYjlhOTc4NycsICc3YTE4OGZhMzUyMGUzMGQ0NjFkYTI1MDEwNDU3MzFjYTk0MTQ2MTk4Mjg4MzM5NTkzN2Y2OGQwMGM2NDRhNTczJ10sIFsnZjcxMGQ3OWQ5ZWI5
NjIyOTdlNGY2MjMyYjQwZThmN2ZlYjJiYzYzODE0NjE0ZDY5MmMxMmRlNzUyNDA4MjIxZScsICdlYTk4ZTY3MjMyZDNiMzI5NWQzYjUzNTUzMjExNWNjYWM4NjEyYzcyMTg1MTYxNzUyNmFlNDdhOWM3N2JmYzgyJ11dCiAgfSwKICBuYWY6IHsKICAgIHduZDogNywKICAgIHBvaW50czogW1snZjkzMDhhMDE5MjU4YzMxMDQ5MzQ0Zjg1Zjg5ZDUyMjliNTMxYzg0NTgzNmY5OWIwODYwMWYxMTNiY2UwMzZmOScsICczODhmN2IwZjYzMmRlODE0MGZlMzM3ZTYyYTM3ZjM1NjY1MDBhOTk5MzRjMjIzMWI2Y2I5ZmQ3NTg0YjhlNjcyJ10s
IFsnMmY4YmRlNGQxYTA3MjA5MzU1YjRhNzI1MGE1YzUxMjhlODhiODRiZGRjNjE5YWI3Y2JhOGQ1NjliMjQwZWZlNCcsICdkOGFjMjIyNjM2ZTVlM2Q2ZDRkYmE5ZGRhNmM5YzQyNmY3ODgyNzFiYWIwZDY4NDBkY2E4N2QzYWE2YWM2MmQ2J10sIFsnNWNiZGYwNjQ2ZTVkYjRlYWEzOThmMzY1ZjJlYTdhMGUzZDQxOWI3ZTAzMzBlMzljZTkyYmRkZWRjYWM0ZjliYycsICc2YWViY2E0MGJhMjU1OTYwYTMxNzhkNmQ4NjFhNTRkYmE4MTNkMGI4MTNmZGU3YjVhNTA4MjYyODA4NzI2NGRhJ10sIFsnYWNkNDg0ZTJmMGM3ZjY1MzA5YWQx
NzhhOWY1NTlhYmRlMDk3OTY5NzRjNTdlNzE0YzM1ZjExMGRmYzI3Y2NiZScsICdjYzMzODkyMWIwYTdkOWZkNjQzODA5NzE3NjNiNjFlOWFkZDg4OGE0Mzc1ZjhlMGYwNWNjMjYyYWM2NGY5YzM3J10sIFsnNzc0YWU3Zjg1OGE5NDExZTVlZjQyNDZiNzBjNjVhYWM1NjQ5OTgwYmU1YzE3ODkxYmJlYzE3ODk1ZGEwMDhjYicsICdkOTg0YTAzMmViNmI1ZTE5MDI0M2RkNTZkN2I3YjM2NTM3MmRiMWUyZGZmOWQ2YTgzMDFkNzRjOWM5NTNjNjFiJ10sIFsnZjI4NzczYzJkOTc1Mjg4YmM3ZDFkMjA1YzM3NDg2NTFiMDc1ZmJjNjYxMGU1
OGNkZGVlZGRmOGYxOTQwNWFhOCcsICdhYjA5MDJlOGQ4ODBhODk3NTgyMTJlYjY1Y2RhZjQ3M2ExYTA2ZGE1MjFmYTkxZjI5YjVjYjUyZGIwM2VkODEnXSwgWydkNzkyNGQ0ZjdkNDNlYTk2NWE0NjVhZTMwOTVmZjQxMTMxZTU5NDZmM2M4NWY3OWU0NGFkYmNmOGUyN2UwODBlJywgJzU4MWUyODcyYTg2YzcyYTY4Mzg0MmVjMjI4Y2M2ZGVmZWE0MGFmMmJkODk2ZDNhNWM1MDRkYzlmZjZhMjZiNTgnXSwgWydkZWZkZWE0Y2RiNjc3NzUwYTQyMGZlZTgwN2VhY2YyMWViOTg5OGFlNzliOTc2ODc2NmU0ZmFhMDRhMmQ0YTM0JywgJzQy
MTFhYjA2OTQ2MzUxNjhlOTk3YjBlYWQyYTkzZGFlY2VkMWY0YTA0YTk1YzBmNmNmYjE5OWY2OWU1NmViNzcnXSwgWycyYjRlYTBhNzk3YTQ0M2QyOTNlZjVjZmY0NDRmNDk3OWYwNmFjZmViZDdlODZkMjc3NDc1NjU2MTM4Mzg1YjZjJywgJzg1ZTg5YmMwMzc5NDVkOTNiMzQzMDgzYjVhMWM4NjEzMWEwMWY2MGM1MDI2OTc2M2I1NzBjODU0ZTVjMDliN2EnXSwgWyczNTJiYmY0YTRjZGQxMjU2NGY5M2ZhMzMyY2UzMzMzMDFkOWFkNDAyNzFmODEwNzE4MTM0MGFlZjI1YmU1OWQ1JywgJzMyMWViNDA3NTM0OGY1MzRkNTljMTgyNTlk
ZGEzZTFmNGExYjNiMmU3MWIxMDM5YzY3YmQzZDhiY2Y4MTk5OGMnXSwgWycyZmEyMTA0ZDZiMzhkMTFiMDIzMDAxMDU1OTg3OTEyNGU0MmFiOGRmZWZmNWZmMjlkYzljZGFkZDRlY2FjYzNmJywgJzJkZTEwNjgyOTVkZDg2NWI2NDU2OTMzNWJkNWRkODAxODFkNzBlY2ZjODgyNjQ4NDIzYmE3NmI1MzJiN2Q2NyddLCBbJzkyNDgyNzliMDliNGQ2OGRhYjIxYTliMDY2ZWRkYTgzMjYzYzNkODRlMDk1NzJlMjY5Y2EwY2Q3ZjU0NTM3MTQnLCAnNzMwMTZmN2JmMjM0YWFkZTVkMWFhNzFiZGVhMmIxZmYzZmMwZGUyYTg4NzkxMmZmZTU0
YTMyY2U5N2NiMzQwMiddLCBbJ2RhZWQ0ZjJiZTNhOGJmMjc4ZTcwMTMyZmIwYmViNzUyMmY1NzBlMTQ0YmY2MTVjMDdlOTk2ZDQ0M2RlZTg3MjknLCAnYTY5ZGNlNGE3ZDZjOThlOGQ0YTFhY2E4N2VmOGQ3MDAzZjgzYzIzMGYzYWZhNzI2YWI0MGU1MjI5MGJlMWM1NSddLCBbJ2M0NGQxMmM3MDY1ZDgxMmU4YWNmMjhkN2NiYjE5ZjkwMTFlY2Q5ZTlmZGYyODFiMGU2YTNiNWU4N2QyMmU3ZGInLCAnMjExOWE0NjBjZTMyNmNkYzc2YzQ1OTI2Yzk4MmZkYWMwZTEwNmU4NjFlZGY2MWM1YTAzOTA2M2YwZTBlNjQ4MiddLCBbJzZhMjQ1
YmY2ZGM2OTg1MDRjODlhMjBjZmRlZDYwODUzMTUyYjY5NTMzNmMyODA2M2I2MWM2NWNiZDI2OWU2YjQnLCAnZTAyMmNmNDJjMmJkNGE3MDhiM2Y1MTI2ZjE2YTI0YWQ4YjMzYmE0OGQwNDIzYjZlZmQ1ZTYzNDgxMDBkOGE4MiddLCBbJzE2OTdmZmE2ZmQ5ZGU2MjdjMDc3ZTNkMmZlNTQxMDg0Y2UxMzMwMGIwYmVjMTE0NmY5NWFlNTdmMGQwYmQ2YTUnLCAnYjljMzk4ZjE4NjgwNmY1ZDI3NTYxNTA2ZTQ1NTc0MzNhMmNmMTUwMDllNDk4YWU3YWRlZTlkNjNkMDFiMjM5NiddLCBbJzYwNWJkYjAxOTk4MTcxOGI5ODZkMGYwN2U4MzRj
YjBkOWRlYjgzNjBmZmI3ZjYxZGY5ODIzNDVlZjI3YTc0NzknLCAnMjk3MmQyZGU0ZjhkMjA2ODFhNzhkOTNlYzk2ZmUyM2MyNmJmYWU4NGZiMTRkYjQzYjAxZTFlOTA1NmI4YzQ5J10sIFsnNjJkMTRkYWI0MTUwYmY0OTc0MDJmZGM0NWEyMTVlMTBkY2IwMWMzNTQ5NTliMTBjZmUzMWM3ZTlkODdmZjMzZCcsICc4MGZjMDZiZDhjYzViMDEwOTgwODhhMTk1MGVlZDBkYjAxYWExMzI5NjdhYjQ3MjIzNWY1NjQyNDgzYjI1ZWFmJ10sIFsnODBjNjBhZDAwNDBmMjdkYWRlNWI0YjA2YzQwOGU1NmIyYzUwZTlmNTZiOWI4YjQyNWU1NTVj
MmY4NjMwOGI2ZicsICcxYzM4MzAzZjFjYzVjMzBmMjZlNjZiYWQ3ZmU3MmY3MGE2NWVlZDRjYmU3MDI0ZWIxYWEwMWY1NjQzMGJkNTdhJ10sIFsnN2E5Mzc1YWQ2MTY3YWQ1NGFhNzRjNjM0OGNjNTRkMzQ0Y2M1ZGM5NDg3ZDg0NzA0OWQ1ZWFiYjBmYTAzYzhmYicsICdkMGUzZmE5ZWNhODcyNjkwOTU1OWUwZDc5MjY5MDQ2YmRjNTllYTEwYzcwY2UyYjAyZDQ5OWVjMjI0ZGM3ZjcnXSwgWydkNTI4ZWNkOWI2OTZiNTRjOTA3YTllZDA0NTQ0N2E3OWJiNDA4ZWMzOWI2OGRmNTA0YmI1MWY0NTliYzNmZmM5JywgJ2VlY2Y0MTI1MzEz
NmU1Zjk5OTY2ZjIxODgxZmQ2NTZlYmM0MzQ1NDA1YzUyMGRiYzA2MzQ2NWI1MjE0MDk5MzMnXSwgWyc0OTM3MGE0YjVmNDM0MTJlYTI1ZjUxNGU4ZWNkYWQwNTI2NjExNWU0YTdlY2IxMzg3MjMxODA4ZjhiNDU5NjMnLCAnNzU4ZjNmNDFhZmQ2ZWQ0MjhiMzA4MWIwNTEyZmQ2MmE1NGMzZjNhZmJiNWI2NzY0YjY1MzA1MmExMjk0OWM5YSddLCBbJzc3ZjIzMDkzNmVlODhjYmJkNzNkZjkzMGQ2NDcwMmVmODgxZDgxMWUwZTE0OThlMmYxYzEzZWIxZmMzNDVkNzQnLCAnOTU4ZWY0MmE3ODg2YjY0MDBhMDgyNjZlOWJhMWIzNzg5NmM5
NTMzMGQ5NzA3N2NiYmU4ZWIzYzc2NzFjNjBkNiddLCBbJ2YyZGFjOTkxY2M0Y2U0YjllYTQ0ODg3ZTVjN2MwYmNlNThjODAwNzRhYjlkNGRiYWViMjg1MzFiNzczOWY1MzAnLCAnZTBkZWRjOWIzYjJmOGRhZDRkYTFmMzJkZWMyNTMxZGY5ZWI1ZmJlYjA1OThlNGZkMWExMTdkYmE3MDNhM2MzNyddLCBbJzQ2M2IzZDlmNjYyNjIxZmIxYjRiZThmYmJlMjUyMDEyNWEyMTZjZGZjOWRhZTNkZWJjYmE0ODUwYzY5MGQ0NWInLCAnNWVkNDMwZDc4YzI5NmMzNTQzMTE0MzA2ZGQ4NjIyZDdjNjIyZTI3Yzk3MGExZGUzMWNiMzc3YjAxYWY3
MzA3ZSddLCBbJ2YxNmY4MDQyNDRlNDZlMmEwOTIzMmQ0YWZmM2I1OTk3NmI5OGZhYzE0MzI4YTJkMWEzMjQ5NmI0OTk5OGYyNDcnLCAnY2VkYWJkOWI4MjIwM2Y3ZTEzZDIwNmZjZGY0ZTMzZDkyYTZjNTNjMjZlNWNjZTI2ZDY1Nzk5NjJjNGUzMWRmNiddLCBbJ2NhZjc1NDI3MmRjODQ1NjNiMDM1MmI3YTE0MzExYWY1NWQyNDUzMTVhY2UyN2M2NTM2OWUxNWY3MTUxZDQxZDEnLCAnY2I0NzQ2NjBlZjM1ZjVmMmE0MWI2NDNmYTVlNDYwNTc1ZjRmYTliNzk2MjIzMmE1YzMyZjkwODMxOGEwNDQ3NiddLCBbJzI2MDBjYTRiMjgyY2I5
ODZmODVkMGYxNzA5OTc5ZDhiNDRhMDljMDdjYjg2ZDdjMTI0NDk3YmM4NmYwODIxMjAnLCAnNDExOWI4ODc1M2MxNWJkNmE2OTNiMDNmY2RkYmI0NWQ1YWM2YmU3NGFiNWYwZWY0NGIwYmU5NDc1YTdlNGI0MCddLCBbJzc2MzVjYTcyZDdlODQzMmMzMzhlYzUzY2QxMjIyMGJjMDFjNDg2ODVlMjRmN2RjOGM2MDJhNzc0Njk5OGU0MzUnLCAnOTFiNjQ5NjA5NDg5ZDYxM2QxZDVlNTkwZjc4ZTZkNzRlY2ZjMDYxZDU3MDQ4YmFkOWU3NmYzMDJjNWI5YzYxJ10sIFsnNzU0ZTMyMzlmMzI1NTcwY2RiYmY0YTg3ZGVlZThhNjZiN2YyYjMz
NDc5ZDQ2OGZiYzFhNTA3NDNiZjU2Y2MxOCcsICc2NzNmYjg2ZTViZGEzMGZiM2NkMGVkMzA0ZWE0OWEwMjNlZTMzZDAxOTdhNjk1ZDBjNWQ5ODA5M2M1MzY2ODMnXSwgWydlM2U2YmQxMDcxYTFlOTZhZmY1Nzg1OWM4MmQ1NzBmMDMzMDgwMDY2MWQxYzk1MmY5ZmUyNjk0NjkxZDliOWU4JywgJzU5YzllMGJiYTM5NGU3NmY0MGMwYWE1ODM3OWEzY2I2YTVhMjI4Mzk5M2U5MGM0MTY3MDAyYWY0OTIwZTM3ZjUnXSwgWycxODZiNDgzZDA1NmEwMzM4MjZhZTczZDg4ZjczMjk4NWM0Y2NiMWYzMmJhMzVmNGI0Y2M0N2ZkY2YwNGFhNmVi
JywgJzNiOTUyZDMyYzY3Y2Y3N2UyZTE3NDQ2ZTIwNDE4MGFiMjFmYjgwOTA4OTUxMzhiNGE0YTc5N2Y4NmU4MDg4OGInXSwgWydkZjlkNzBhNmI5ODc2Y2U1NDRjOTg1NjFmNGJlNGY3MjU0NDJlNmQyYjczN2Q5YzkxYTgzMjE3MjRjZTA5NjNmJywgJzU1ZWIyZGFmZDg0ZDZjY2Q1Zjg2MmI3ODVkYzM5ZDRhYjE1NzIyMjcyMGVmOWRhMjE3YjhjNDVjZjJiYTI0MTcnXSwgWyc1ZWRkNWNjMjNjNTFlODdhNDk3Y2E4MTVkNWRjZTBmOGFiNTI1NTRmODQ5ZWQ4OTk1ZGU2NGM1ZjM0Y2U3MTQzJywgJ2VmYWU5YzhkYmMxNDEzMDY2MWU4
Y2VjMDMwYzg5YWQwYzEzYzY2YzBkMTdhMjkwNWNkYzcwNmFiNzM5OWE4NjgnXSwgWycyOTA3OThjMmI2NDc2ODMwZGExMmZlMDIyODdlOWU3NzdhYTNmYmExYzM1NWIxN2E3MjJkMzYyZjg0NjE0ZmJhJywgJ2UzOGRhNzZkY2Q0NDA2MjE5ODhkMDBiY2Y3OWFmMjVkNWIyOWMwOTRkYjJhMjMxNDZkMDAzYWZkNDE5NDNlN2EnXSwgWydhZjNjNDIzYTk1ZDlmNWIzMDU0NzU0ZWZhMTUwYWMzOWNkMjk1NTJmZTM2MDI1NzM2MmRmZGVjZWY0MDUzYjQ1JywgJ2Y5OGEzZmQ4MzFlYjJiNzQ5YTkzYjBlNmYzNWNmYjQwYzhjZDVhYTY2N2Ex
NTU4MWJjMmZlZGVkNDk4ZmQ5YzYnXSwgWyc3NjZkYmIyNGQxMzRlNzQ1Y2NjYWEyOGM5OWJmMjc0OTA2YmI2NmIyNmRjZjk4ZGY4ZDJmZWQ1MGQ4ODQyNDlhJywgJzc0NGIxMTUyZWFjYmU1ZTM4ZGNjODg3OTgwZGEzOGI4OTc1ODRhNjVmYTA2Y2VkZDJjOTI0Zjk3Y2JhYzU5OTYnXSwgWyc1OWRiZjQ2ZjhjOTQ3NTliYTIxMjc3YzMzNzg0ZjQxNjQ1ZjdiNDRmNmM1OTZhNThjZTkyZTY2NjE5MWFiZTNlJywgJ2M1MzRhZDQ0MTc1ZmJjMzAwZjRlYTZjZTY0ODMwOWEwNDJjZTczOWE3OTE5Nzk4Y2Q4NWUyMTZjNGEzMDdmNmUnXSwg
WydmMTNhZGE5NTEwM2M0NTM3MzA1ZTY5MWU3NGU5YTRhOGRkNjQ3ZTcxMWE5NWU3M2NiNjJkYzYwMThjZmQ4N2I4JywgJ2UxMzgxN2I0NGVlMTRkZTY2M2JmNGJjODA4MzQxZjMyNjk0OWUyMWE2YTc1YzI1NzA3Nzg0MTliZGFmNTczM2QnXSwgWyc3NzU0YjRmYTBlOGFjZWQwNmQ0MTY3YTJjNTljY2E0Y2RhMTg2OWMwNmViYWRmYjY0ODg1NTAwMTVhODg1MjJjJywgJzMwZTkzZTg2NGU2NjlkODIyMjRiOTY3YzMwMjBiOGZhOGQxZTRlMzUwYjZjYmNjNTM3YTQ4YjU3ODQxMTYzYTInXSwgWyc5NDhkY2FkZjU5OTBlMDQ4YWEzODc0
ZDQ2YWJlZjlkNzAxODU4Zjk1ZGU4MDQxZDJhNjgyOGM5OWUyMjYyNTE5JywgJ2U0OTFhNDI1MzdmNmU1OTdkNWQyOGEzMjI0YjFiYzI1ZGY5MTU0ZWZiZDJlZjFkMmNiYmEyY2FlNTM0N2Q1N2UnXSwgWyc3OTYyNDE0NDUwYzc2YzE2ODljN2I0OGY4MjAyZWMzN2ZiMjI0Y2Y1YWMwYmZhMTU3MDMyOGE4YTNkN2M3N2FiJywgJzEwMGI2MTBlYzRmZmI0NzYwZDVjMWZjMTMzZWY2ZjZiMTI1MDdhMDUxZjA0YWM1NzYwYWZhNWIyOWRiODM0MzcnXSwgWyczNTE0MDg3ODM0OTY0YjU0YjE1YjE2MDY0NGQ5MTU0ODVhMTY5NzcyMjViODg0
N2JiMGRkMDg1MTM3ZWM0N2NhJywgJ2VmMGFmYmIyMDU2MjA1NDQ4ZTE2NTJjNDhlODEyN2ZjNjAzOWU3N2MxNWMyMzc4YjdlN2QxNWEwZGUyOTMzMTEnXSwgWydkM2NjMzBhZDZiNDgzZTRiYzc5Y2UyYzlkZDhiYzU0OTkzZTk0N2ViOGRmNzg3YjQ0Mjk0M2QzZjdiNTI3ZWFmJywgJzhiMzc4YTIyZDgyNzI3OGQ4OWM1ZTliZThmOTUwOGFlM2MyYWQ0NjI5MDM1ODYzMGFmYjM0ZGIwNGVlZGUwYTQnXSwgWycxNjI0ZDg0NzgwNzMyODYwY2UxYzc4ZmNiZmVmZTA4YjJiMjk4MjNkYjkxM2Y2NDkzOTc1YmEwZmY0ODQ3NjEwJywgJzY4
NjUxY2Y5YjZkYTkwM2UwOTE0NDQ4YzZjZDlkNGNhODk2ODc4ZjUyODJiZTRjOGNjMDZlMmE0MDQwNzg1NzUnXSwgWyc3MzNjZTgwZGE5NTVhOGEyNjkwMmM5NTYzM2U2MmE5ODUxOTI0NzRiNWFmMjA3ZGE2ZGY3YjRmZDVmYzYxY2Q0JywgJ2Y1NDM1YTJiZDJiYWRmN2Q0ODVhNGQ4YjhkYjlmY2NlM2UxZWY4ZTAyMDFlNDU3OGM1NDY3M2JjMWRjNWVhMWQnXSwgWycxNWQ5NDQxMjU0OTQ1MDY0Y2YxYTFjMzNiYmQzYjQ5Zjg5NjZjNTA5MjE3MWU2OTllZjI1OGRmYWI4MWMwNDVjJywgJ2Q1NmViMzBiNjk0NjNlNzIzNGY1MTM3Yjcz
Yjg0MTc3NDM0ODAwYmFjZWJmYzY4NWZjMzdiYmU5ZWZlNDA3MGQnXSwgWydhMWQwZmNmMmVjOWRlNjc1YjYxMjEzNmU1Y2U3MGQyNzFjMjE0MTdjOWQyYjhhYWFhYzEzODU5OWQwNzE3OTQwJywgJ2VkZDc3ZjUwYmNiNWEzY2FiMmU5MDczNzMwOTY2N2YyNjQxNDYyYTU0MDcwZjNkNTE5MjEyZDM5YzE5N2E2MjknXSwgWydlMjJmYmUxNWMwYWY4Y2NjNTc4MGMwNzM1Zjg0ZGJlOWE3OTBiYWRlZTgyNDVjMDZjN2NhMzczMzFjYjM2OTgwJywgJ2E4NTViYWJhZDVjZDYwYzg4YjQzMGE2OWY1M2ExYTdhMzgyODkxNTQ5NjQ3OTliZTQz
ZDA2ZDc3ZDMxZGEwNiddLCBbJzMxMTA5MWRkOTg2MGU4ZTIwZWUxMzQ3M2MxMTU1ZjVmNjk2MzVlMzk0NzA0ZWFhNzQwMDk0NTIyNDZjZmE5YjMnLCAnNjZkYjY1NmY4N2QxZjA0ZmZmZDFmMDQ3ODhjMDY4MzA4NzFlYzVhNjRmZWVlNjg1YmQ4MGYwYjEyODZkODM3NCddLCBbJzM0YzFmZDA0ZDMwMWJlODliMzFjMDQ0MmQzZTZhYzI0ODgzOTI4YjQ1YTkzNDA3ODE4NjdkNDIzMmVjMmRiZGYnLCAnOTQxNDY4NWU5N2IxYjU5NTRiZDQ2ZjczMDE3NDEzNmQ1N2YxY2VlYjQ4NzQ0M2RjNTMyMTg1N2JhNzNhYmVlJ10sIFsnZjIxOWVh
NWQ2YjU0NzAxYzFjMTRkZTViNTU3ZWI0MmE4ZDEzZjNhYmJjZDA4YWZmY2MyYTVlNmIwNDliOGQ2MycsICc0Y2I5NTk1N2U4M2Q0MGIwZjczYWY0NTQ0Y2NjZjZiMWY0YjA4ZDNjMDdiMjdmYjhkOGMyOTYyYTQwMDc2NmQxJ10sIFsnZDdiODc0MGY3NGE4ZmJhYWIxZjY4M2RiOGY0NWRlMjY1NDNhNTQ5MGJjYTYyNzA4NzIzNjkxMjQ2OWEwYjQ0OCcsICdmYTc3OTY4MTI4ZDljOTJlZTEwMTBmMzM3YWQ0NzE3ZWZmMTVkYjVlZDNjMDQ5YjM0MTFlMDMxNWVhYTQ1OTNiJ10sIFsnMzJkMzFjMjIyZjhmNmYwZWY4NmY3Yzk4ZDNhMzMz
NWVhZDViY2QzMmFiZGQ5NDI4OWZlNGQzMDkxYWE4MjRiZicsICc1ZjMwMzJmNTg5MjE1NmUzOWNjZDNkNzkxNWI5ZTFkYTJlNmRhYzllNmYyNmU5NjExMThkMTRiODQ2MmUxNjYxJ10sIFsnNzQ2MWYzNzE5MTRhYjMyNjcxMDQ1YTE1NWQ5ODMxZWE4NzkzZDc3Y2Q1OTU5MmM0MzQwZjg2Y2JjMTgzNDdiNScsICc4ZWMwYmEyMzhiOTZiZWMwY2JkZGRjYWUwYWE0NDI1NDJlZWUxZmY1MGM5ODZlYTZiMzk4NDdiM2NjMDkyZmY2J10sIFsnZWUwNzlhZGIxZGYxODYwMDc0MzU2YTI1YWEzODIwNmE2ZDcxNmIyYzNlNjc0NTNkMjg3Njk4
YmFkN2IyYjJkNicsICc4ZGMyNDEyYWFmZTNiZTVjNGM1ZjM3ZTBlY2M1ZjlmNmE0NDY5ODlhZjA0YzRlMjVlYmFhYzQ3OWVjMWM4YzFlJ10sIFsnMTZlYzkzZTQ0N2VjODNmMDQ2N2IxODMwMmVlNjIwZjdlNjVkZTMzMTg3NGM5ZGM3MmJmZDg2MTZiYTlkYTZiNScsICc1ZTQ2MzExNTBlNjJmYjQwZDBlOGMyYTdjYTU4MDRhMzlkNTgxODZhNTBlNDk3MTM5NjI2Nzc4ZTI1YjA2NzRkJ10sIFsnZWFhNWY5ODBjMjQ1ZjZmMDM4OTc4MjkwYWZhNzBiNmJkODg1NTg5N2Y5OGI2YWE0ODViOTYwNjVkNTM3YmQ5OScsICdmNjVmNWQzZTI5
MmMyZTA4MTlhNTI4MzkxYzk5NDYyNGQ3ODQ4NjlkN2U2ZWE2N2ZiMTgwNDEwMjRlZGMwN2RjJ10sIFsnNzhjOTQwNzU0NGFjMTMyNjkyZWUxOTEwYTAyNDM5OTU4YWUwNDg3NzE1MTM0MmVhOTZjNGI2YjM1YTQ5ZjUxJywgJ2YzZTAzMTkxNjllYjliODVkNTQwNDc5NTUzOWE1ZTY4ZmExZmJkNTgzYzA2NGQyNDYyYjY3NWYxOTRhM2RkYjQnXSwgWyc0OTRmNGJlMjE5YTFhNzcwMTZkY2Q4Mzg0MzFhZWEwMDAxY2RjOGFlN2E2ZmM2ODg3MjY1NzhkOTcwMjg1N2E1JywgJzQyMjQyYTk2OTI4M2E1ZjMzOWJhN2YwNzVlMzZiYTJhZjky
NWNlMzBkNzY3ZWQ2ZTU1ZjRiMDMxODgwZDU2MmMnXSwgWydhNTk4YTgwMzBkYTZkODZjNmJjN2YyZjUxNDRlYTU0OWQyODIxMWVhNThmYWE3MGViZjRjMWU2NjVjMWZlOWI1JywgJzIwNGI1ZDZmODQ4MjJjMzA3ZTRiNGE3MTQwNzM3YWVjMjNmYzYzYjY1YjM1Zjg2YTEwMDI2ZGJkMmQ4NjRlNmInXSwgWydjNDE5MTYzNjVhYmIyYjVkMDkxOTJmNWYyZGJlYWZlYzIwOGYwMjBmMTI1NzBhMTg0ZGJhZGMzZTU4NTk1OTk3JywgJzRmMTQzNTFkMDA4N2VmYTQ5ZDI0NWIzMjg5ODQ5ODlkNWNhZjk0NTBmMzRiZmMwZWQxNmU5NmI1OGZh
OTkxMyddLCBbJzg0MWQ2MDYzYTU4NmZhNDc1YTcyNDYwNGRhMDNiYzViOTJhMmUwZDJlMGEzNmFjZmU0YzczYTU1MTQ3NDI4ODEnLCAnNzM4NjdmNTljMDY1OWU4MTkwNGY5YTFjNzU0MzY5OGU2MjU2MmQ2NzQ0YzE2OWNlN2EzNmRlMDFhOGQ2MTU0J10sIFsnNWU5NWJiMzk5YTY5NzFkMzc2MDI2OTQ3Zjg5YmRlMmYyODJiMzM4MTA5MjhiZTRkZWQxMTJhYzRkNzBlMjBkNScsICczOWYyM2YzNjY4MDkwODViZWViZmM3MTE4MTMxMzc3NWE5OWM5YWVkN2Q4YmEzOGIxNjEzODRjNzQ2MDEyODY1J10sIFsnMzZlNDY0MWE1Mzk0OGZk
NDc2YzM5ZjhhOTlmZDk3NGU1ZWMwNzU2NGI1MzE1ZDhiZjk5NDcxYmNhMGVmMmY2NicsICdkMjQyNGIxYjFhYmU0ZWI4MTY0MjI3YjA4NWM5YWE5NDU2ZWExMzQ5M2ZkNTYzZTA2ZmQ1MWNmNTY5NGM3OGZjJ10sIFsnMzM2NTgxZWE3YmZiYmIyOTBjMTkxYTJmNTA3YTQxY2Y1NjQzODQyMTcwZTkxNGZhZWFiMjdjMmM1NzlmNzI2JywgJ2VhZDEyMTY4NTk1ZmUxYmU5OTI1MjEyOWI2ZTU2YjMzOTFmN2FiMTQxMGNkMWUwZWYzZGNkY2FiZDJmZGEyMjQnXSwgWyc4YWI4OTgxNmRhZGZkNmI2YTFmMjYzNGZjZjAwZWM4NDAzNzgxMDI1
ZWQ2ODkwYzQ4NDk3NDI3MDZiZDQzZWRlJywgJzZmZGNlZjA5ZjJmNmQwYTA0NGU2NTRhZWY2MjQxMzZmNTAzZDQ1OWMzZTg5ODQ1ODU4YTQ3YTkxMjljZGQyNGUnXSwgWycxZTMzZjFhNzQ2YzljNTc3ODEzMzM0NGQ5Mjk5ZmNhYTIwYjA5MzhlOGFjZmYyNTQ0YmI0MDI4NGI4YzVmYjk0JywgJzYwNjYwMjU3ZGQxMWIzYWE5YzhlZDYxOGQyNGVkZmYyMzA2ZDMyMGYxZDAzMDEwZTMzYTdkMjA1N2YzYjNiNiddLCBbJzg1YjdjMWRjYjNjZWMxYjdlZTdmMzBkZWQ3OWRkMjBhMGVkMWY0Y2MxOGNiY2ZjZmE0MTAzNjFmZDhmMDhmMzEn
LCAnM2Q5OGE5Y2RkMDI2ZGQ0M2YzOTA0OGYyNWE4ODQ3ZjRmY2FmYWQxODk1ZDdhNjMzYzZmZWQzYzM1ZTk5OTUxMSddLCBbJzI5ZGY5ZmJkOGQ5ZTQ2NTA5Mjc1ZjRiMTI1ZDZkNDVkN2ZiZTlhM2I4NzhhN2FmODcyYTI4MDA2NjFhYzVmNTEnLCAnYjRjNGZlOTljNzc1YTYwNmUyZDg4NjIxNzkxMzlmZmRhNjFkYzg2MWMwMTllNTVjZDI4NzZlYjJhMjdkODRiJ10sIFsnYTBiMWNhZTA2YjBhODQ3YTNmZWE2ZTY3MWFhZjhhZGZkZmU1OGNhMmY3NjgxMDVjODA4MmIyZTQ0OWZjZTI1MicsICdhZTQzNDEwMmVkZGUwOTU4ZWM0YjE5
ZDkxN2E2YTI4ZTZiNzJkYTE4MzRhZmYwZTY1MGYwNDk1MDNhMjk2Y2YyJ10sIFsnNGU4Y2VhZmI5YjNlOWExMzZkYzdmZjY3ZTg0MDI5NWI0OTlkZmIzYjIxMzNlNGJhMTEzZjJlNGMwZTEyMWU1JywgJ2NmMjE3NDExOGM4YjZkN2E0YjQ4ZjZkNTM0Y2U1Yzc5NDIyYzA4NmE2MzQ2MDUwMmI4MjdjZTYyYTMyNjY4M2MnXSwgWydkMjRhNDRlMDQ3ZTE5YjZmNWFmYjgxYzdjYTJmNjkwODBhNTA3NjY4OWEwMTA5MTlmNDI3MjVjMmI3ODlhMzNiJywgJzZmYjhkNTU5MWI0NjZmOGZjNjNkYjUwZjFjMGYxYzY5MDEzZjk5Njg4N2I4MjQ0
ZDJjZGVjNDE3YWZlYThmYTMnXSwgWydlYTAxNjA2YTdhNmM5Y2RkMjQ5ZmRmY2ZhY2I5OTU4NDAwMWVkZDI4YWJiYWI3N2I1MTA0ZTk4ZThlM2IzNWQ0JywgJzMyMmFmNDkwOGM3MzEyYjBjZmJmZTM2OWY3YTdiM2NkYjdkNDQ5NGJjMjgyMzcwMGNmZDY1MjE4OGEzZWE5OGQnXSwgWydhZjhhZGRiZjJiNjYxYzhhNmM2MzI4NjU1ZWI5NjY1MTI1MjAwN2Q4YzVlYTMxYmU0YWQxOTZkZThjZTIxMzFmJywgJzY3NDllNjdjMDI5Yjg1ZjUyYTAzNGVhZmQwOTY4MzZiMjUyMDgxODY4MGUyNmFjOGYzZGZiY2RiNzE3NDk3MDAnXSwgWydl
M2FlMTk3NDU2NmNhMDZjYzUxNmQ0N2UwZmIxNjVhNjc0YTNkYWJjZmNhMTVlNzIyZjBlMzQ1MGY0NTg4OScsICcyYWVhYmU3ZTQ1MzE1MTAxMTYyMTdmMDdiZjRkMDczMDBkZTk3ZTQ4NzRmODFmNTMzNDIwYTcyZWViMGJkNmE0J10sIFsnNTkxZWUzNTUzMTNkOTk3MjFjZjY5OTNmZmVkMWUzZTMwMTk5M2ZmM2VkMjU4ODAyMDc1ZWE4Y2VkMzk3ZTI0NicsICdiMGVhNTU4YTExM2MzMGJlYTYwZmM0Nzc1NDYwYzc5MDFmZjBiMDUzZDI1Y2EyYmRlZWU5OGYxYTRiZTVkMTk2J10sIFsnMTEzOTZkNTVmZGE1NGM0OWYxOWFhOTczMThk
OGRhNjFmYTg1ODRlNDdiMDg0OTQ1MDc3Y2YwMzI1NWI1Mjk4NCcsICc5OThjNzRhOGNkNDVhYzAxMjg5ZDU4MzNhN2JlYjQ3NDRmZjUzNmIwMWIyNTdiZTRjNTc2N2JlYTkzZWE1N2E0J10sIFsnM2M1ZDJhMWJhMzljNWExNzkwMDAwNzM4YzllMGM0MGI4ZGNkZmQ1NDY4NzU0YjY0MDU1NDAxNTdlMDE3YWE3YScsICdiMjI4NDI3OTk5NWEzNGUyZjlkNGRlNzM5NmZjMThiODBmOWI4YjlmZGQyNzBmNjY2MWY3OWNhNGM4MWJkMjU3J10sIFsnY2M4NzA0YjhhNjBhMGRlZmEzYTk5YTcyOTlmMmU5YzNmYmMzOTVhZmIwNGFjMDc4NDI1
ZWY4YTE3OTNjYzAzMCcsICdiZGQ0NjAzOWZlZWQxNzg4MWQxZTA4NjJkYjM0N2Y4Y2YzOTViNzRmYzRiY2RjNGU5NDBiNzRlM2FjMWYxYjEzJ10sIFsnYzUzM2U0ZjdlYTg1NTVhYWNkOTc3N2FjNWNhZDI5Yjk3ZGQ0ZGVmY2NjNTNlZTdlYTIwNDExOWIyODg5YjE5NycsICc2ZjBhMjU2YmM1ZWZkZjQyOWEyZmI2MjQyZjFhNDNhMmQ5YjkyNWJiNGE0YjNhMjZiYjhlMGY0NWViNTk2MDk2J10sIFsnYzE0ZjhmMmNjYjI3ZDZmMTA5ZjZkMDhkMDNjYzk2YTY5YmE4YzM0ZWVjMDdiYmNmNTY2ZDQ4ZTMzZGE2NTkzJywgJ2MzNTlkNjky
M2JiMzk4ZjdmZDQ0NzNlMTZmZTFjMjg0NzViNzQwZGQwOTgwNzVlNmMwZTg2NDkxMTNkYzNhMzgnXSwgWydhNmNiYzMwNDZiYzZhNDUwYmFjMjQ3ODlmYTE3MTE1YTRjOTczOWVkNzVmOGYyMWNlNDQxZjcyZTBiOTBlNmVmJywgJzIxYWU3ZjQ2ODBlODg5YmIxMzA2MTllMmMwZjk1YTM2MGNlYjU3M2M3MDYwMzEzOTg2MmFmZDYxN2ZhOWI5ZiddLCBbJzM0N2Q2ZDlhMDJjNDg5MjdlYmZiODZjMTM1OWIxY2FmMTMwYTNjMDI2N2QxMWNlNjM0NGIzOWY5OWQ0M2NjMzgnLCAnNjBlYTdmNjFhMzUzNTI0ZDFjOTg3ZjZlY2VjOTJmMDg2
ZDU2NWFiNjg3ODcwY2IxMjY4OWZmMWUzMWM3NDQ0OCddLCBbJ2RhNjU0NWQyMTgxZGI4ZDk4M2Y3ZGNiMzc1ZWY1ODY2ZDQ3YzY3YjFiZjMxYzhjZjg1NWVmNzQzN2I3MjY1NmEnLCAnNDliOTY3MTVhYjY4NzhhNzllNzhmMDdjZTU2ODBjNWQ2NjczMDUxYjQ5MzViZDg5N2ZlYTgyNGI3N2RjMjA4YSddLCBbJ2M0MDc0N2NjOWQwMTJjYjFhMTNiODE0ODMwOWM2ZGU3ZWMyNWQ2OTQ1ZDY1NzE0NmI5ZDU5OTRiOGZlYjExMTEnLCAnNWNhNTYwNzUzYmUyYTEyZmM2ZGU2Y2FmMmNiNDg5NTY1ZGI5MzYxNTZiOTUxNGUxYmI1ZTgzMDM3
ZTBmYTJkNCddLCBbJzRlNDJjOGVjODJjOTk3OThjY2YzYTYxMGJlODcwZTc4MzM4YzdmNzEzMzQ4YmQzNGM4MjAzZWY0MDM3ZjM1MDInLCAnNzU3MWQ3NGVlNWUwZmI5MmE3YThiMzNhMDc3ODMzNDFhNTQ5MjE0NGNjNTRiY2M0MGE5NDQ3MzY5MzYwNjQzNyddLCBbJzM3NzVhYjcwODliYzZhZjgyM2FiYTJlMWFmNzBiMjM2ZDI1MWNhZGIwYzg2NzQzMjg3NTIyYTFiM2IwZGVkZWEnLCAnYmU1MmQxMDdiY2ZhMDlkOGJjYjk3MzZhODI4Y2ZhN2ZhYzhkYjE3YmY3YTc2YTJjNDJhZDk2MTQwOTAxOGNmNyddLCBbJ2NlZTMxY2JmN2Uz
NGVjMzc5ZDk0ZmI4MTRkM2Q3NzVhZDk1NDU5NWQxMzE0YmE4ODQ2OTU5ZTNlODJmNzRlMjYnLCAnOGZkNjRhMTRjMDZiNTg5YzI2Yjk0N2FlMmJjZjZiZmEwMTQ5ZWYwYmUxNGVkNGQ4MGY0NDhhMDFjNDNiMWM2ZCddLCBbJ2I0ZjllYWVhMDliNjkxNzYxOWY2ZWE2YTRlYjU0NjRlZmRkYjU4ZmQ0NWIxZWJlZmNkYzFhMDFkMDhiNDc5ODYnLCAnMzllNWM5OTI1YjVhNTRiMDc0MzNhNGYxOGM2MTcyNmY4YmIxMzFjMDEyY2E1NDJlYjI0YThhYzA3MjAwNjgyYSddLCBbJ2Q0MjYzZGZjM2QyZGY5MjNhMDE3OWE0ODk2NmQzMGNlODRl
MjUxNWFmYzNkY2NjMWI3NzkwNzc5MmViY2M2MGUnLCAnNjJkZmFmMDdhMGY3OGZlYjMwZTMwZDYyOTU4NTNjZTE4OWUxMjc3NjBhZDZjZjdmYWUxNjRlMTIyYTIwOGQ1NCddLCBbJzQ4NDU3NTI0ODIwZmE2NWE0ZjhkMzVlYjY5MzA4NTdjMDAzMmFjYzBhNGEyZGU0MjIyMzNlZWRhODk3NjEyYzQnLCAnMjVhNzQ4YWIzNjc5NzlkOTg3MzNjMzhhMWZhMWMyZTdkYzZjYzA3ZGIyZDYwYTlhZTdhNzZhYWE0OWJkMGY3NyddLCBbJ2RmZWVlZjE4ODExMDFmMmNiMTE2NDRmM2EyYWZkZmMyMDQ1ZTE5OTE5MTUyOTIzZjM2N2ExNzY3YzEx
Y2NlZGEnLCAnZWNmYjcwNTZjZjFkZTA0MmY5NDIwYmFiMzk2NzkzYzBjMzkwYmRlNzRiNGJiZGZmMTZhODNhZTA5YTlhNzUxNyddLCBbJzZkN2VmNmIxNzU0M2Y4MzczYzU3M2Y0NGUxZjM4OTgzNWQ4OWJjYmM2MDYyY2VkMzZjODJkZjgzYjhmYWU4NTknLCAnY2Q0NTBlYzMzNTQzODk4NmRmZWZhMTBjNTdmZWE5YmNjNTIxYTA5NTliMmQ4MGJiZjc0YjE5MGRjYTcxMmQxMCddLCBbJ2U3NTYwNWQ1OTEwMmE1YTI2ODQ1MDBkM2I5OTFmMmUzZjNjODhiOTMyMjU1NDcwMzVhZjI1YWY2NmUwNDU0MWYnLCAnZjVjNTQ3NTRhOGY3MWVl
NTQwYjliNDg3Mjg0NzNlMzE0ZjcyOWFjNTMwOGIwNjkzODM2MDk5MGUyYmZhZDEyNSddLCBbJ2ViOTg2NjBmNGM0ZGZhYTA2YTJiZTQ1M2Q1MDIwYmM5OWEwYzJlNjBhYmUzODg0NTdkZDQzZmVmYjFlZDYyMGMnLCAnNmNiOWE4ODc2ZDljYjg1MjA2MDlhZjNhZGQyNmNkMjBhMGE3Y2Q4YTk0MTExMzFjZTg1ZjQ0MTAwMDk5MjIzZSddLCBbJzEzZTg3YjAyN2Q4NTE0ZDM1OTM5ZjJlNjg5MmIxOTkyMjE1NDU5Njk0MTg4ODMzNmRjMzU2M2UzYjhkYmE5NDInLCAnZmVmNWEzYzY4MDU5YTZkZWM1ZDYyNDExNGJmMWU5MWFhYzJiOWRh
NTY4ZDZhYmViMjU3MGQ1NTY0NmI4YWRmMSddLCBbJ2VlMTYzMDI2ZTlmZDZmZTAxN2MzOGYwNmE1YmU2ZmMxMjU0MjRiMzcxY2UyNzA4ZTdiZjQ0OTE2OTFlNTc2NGEnLCAnMWFjYjI1MGYyNTVkZDYxYzQzZDk0Y2NjNjcwZDBmNThmNDlhZTNmYTE1Yjk2NjIzZTU0MzBkYTBhZDZjNjJiMiddLCBbJ2IyNjhmNWVmOWFkNTFlNGQ3OGRlM2E3NTBjMmRjODliMWU2MjZkNDM1MDU4Njc5OTk5MzJlNWRiMzNhZjNkODAnLCAnNWYzMTBkNGIzYzk5YjllYmIxOWY3N2Q0MWMxZGVlMDE4Y2YwZDM0ZmQ0MTkxNjE0MDAzZTk0NWExMjE2ZTQy
MyddLCBbJ2ZmMDdmMzExOGE5ZGYwMzVlOWZhZDg1ZWI2YzdiZmU0MmIwMmYwMWNhOTljZWVhM2JmN2ZmZGJhOTNjNDc1MGQnLCAnNDM4MTM2ZDYwM2U4NThhM2E1YzQ0MGMzOGVjY2JhZGRjMWQyOTQyMTE0ZTJlZGRkNDc0MGQwOThjZWQxZjBkOCddLCBbJzhkOGI5ODU1YzdjMDUyYTM0MTQ2ZmQyMGZmYjY1OGJlYTRiOWY2OWUwZDgyNWViZWMxNmU4YzNjZTJiNTI2YTEnLCAnY2RiNTU5ZWVkYzJkNzlmOTI2YmFmNDRmYjg0ZWE0ZDQ0YmNmNTBmZWU1MWQ3Y2ViMzBlMmU3ZjQ2MzAzNjc1OCddLCBbJzUyZGIwYjUzODRkZmJmMDVi
ZmE5ZDQ3MmQ3YWUyNmRmZTRiODUxY2VjYTkxYjFlYmE1NDI2MzE4MGRhMzJiNjMnLCAnYzNiOTk3ZDA1MGVlNWQ0MjNlYmFmNjZhNmRiOWY1N2IzMTgwYzkwMjg3NTY3OWRlOTI0YjY5ZDg0YTdiMzc1J10sIFsnZTYyZjk0OTBkM2Q1MWRhNjM5NWVmZDI0ZTgwOTE5Y2M3ZDBmMjljM2YzZmE0OGM2ZmZmNTQzYmVjYmQ0MzM1MicsICc2ZDg5YWQ3YmE0ODc2YjBiMjJjMmNhMjgwYzY4Mjg2MmYzNDJjODU5MWYxZGFmNTE3MGUwN2JmZDljY2FmYTdkJ10sIFsnN2YzMGVhMjQ3NmIzOTliNDk1NzUwOWM4OGY3N2QwMTkxYWZhMmZmNWNi
N2IxNGZkNmQ4ZTdkNjVhYWFiMTE5MycsICdjYTVlZjdkNGIyMzFjOTRjM2IxNTM4OWE1ZjYzMTFlOWRhZmY3YmI2N2IxMDNlOTg4MGVmNGJmZjYzN2FjYWVjJ10sIFsnNTA5OGZmMWUxZDlmMTRmYjQ2YTIxMGZhZGE2YzkwM2ZlZjBmYjdiNGExZGQxZDlhYzYwYTAzNjE4MDBiN2EwMCcsICc5NzMxMTQxZDgxZmM4ZjgwODRkMzdjNmU3NTQyMDA2YjNlZTFiNDBkNjBkZmU1MzYyYTViMTMyZmQxN2RkYzAnXSwgWyczMmI3OGM3ZGU5ZWU1MTJhNzI4OTViZTZiOWNiZWZhNmUyZjNjNGNjY2U0NDVjOTZiOWYyYzgxZTI3NzhhZDU4Jywg
J2VlMTg0OWY1MTNkZjcxZTMyZWZjMzg5NmVlMjgyNjBjNzNiYjgwNTQ3YWUyMjc1YmE0OTcyMzc3OTRjODc1M2MnXSwgWydlMmNiNzRmZGRjOGU5ZmJjZDA3NmVlZjJhN2M3MmIwY2UzN2Q1MGYwODI2OWRmYzA3NGI1ODE1NTA1NDdhNGY3JywgJ2QzYWEyZWQ3MWM5ZGQyMjQ3YTYyZGYwNjI3MzZlYjBiYWRkZWE5ZTM2MTIyZDJiZTg2NDFhYmNiMDA1Y2M0YTQnXSwgWyc4NDM4NDQ3NTY2ZDRkN2JlZGFkYzI5OTQ5NmFiMzU3NDI2MDA5YTM1ZjIzNWNiMTQxYmUwZDk5Y2QxMGFlM2E4JywgJ2M0ZTEwMjA5MTY5ODBhNGRhNWQwMWFj
NWU2YWQzMzA3MzRlZjBkNzkwNjYzMWM0ZjIzOTA0MjZiMmVkZDc5MWYnXSwgWyc0MTYyZDQ4OGI4OTQwMjAzOWI1ODRjNmZjNmMzMDg4NzA1ODdkOWM0NmY2NjBiODc4YWI2NWM4MmM3MTFkNjdlJywgJzY3MTYzZTkwMzIzNjI4OWY3NzZmMjJjMjVmYjhhM2FmYzE3MzJmMmI4NGI0ZTk1ZGJkYTQ3YWU1YTA4NTI2NDknXSwgWyczZmFkM2ZhODRjYWYwZjM0ZjBmODliZmQyZGNmNTRmYzE3NWQ3NjdhZWMzZTUwNjg0ZjNiYTRhNGJmNWY2ODNkJywgJ2NkMWJjN2NiNmNjNDA3YmIyZjBjYTY0N2M3MThhNzMwY2Y3MTg3MmU3ZDBkMmE1
M2ZhMjBlZmNkZmU2MTgyNiddLCBbJzY3NGYyNjAwYTMwMDdhMDA1NjhjMWE3Y2UwNWQwODE2YzFmYjg0YmYxMzcwNzk4ZjFjNjk1MzJmYWViMWE4NmInLCAnMjk5ZDIxZjk0MTNmMzNiM2VkZjQzYjI1NzAwNDU4MGI3MGRiNTdkYTBiMTgyMjU5ZTA5ZWVjYzY5ZTBkMzhhNSddLCBbJ2QzMmY0ZGE1NGFkZTc0YWJiODFiODE1YWQxZmIzYjI2M2Q4MmQ2YzY5MjcxNGJjZmY4N2QyOWJkNWVlOWYwOGYnLCAnZjk0MjllNzM4YjhlNTNiOTY4ZTk5MDE2YzA1OTcwNzc4MmUxNGY0NTM1MzU5ZDU4MmZjNDE2OTEwYjNlZWE4NyddLCBbJzMw
ZTRlNjcwNDM1Mzg1NTU2ZTU5MzY1NzEzNTg0NWQzNmZiYjY5MzFmNzJiMDhjYjFlZDk1NGYxZTNjZTNmZjYnLCAnNDYyZjliY2U2MTk4OTg2Mzg0OTkzNTAxMTNiYmM5YjEwYTg3OGQzNWRhNzA3NDBkYzY5NWE1NTllYjg4ZGI3YiddLCBbJ2JlMjA2MjAwM2M1MWNjMzAwNDY4MjkwNDMzMGU0ZGVlN2YzZGNkMTBiMDFlNTgwYmYxOTcxYjA0ZDRjYWQyOTcnLCAnNjIxODhiYzQ5ZDYxZTU0Mjg1NzNkNDhhNzRlMWM2NTViMWM2MTA5MDkwNTY4MmEwZDU1NThlZDcyZGNjYjliYyddLCBbJzkzMTQ0NDIzYWNlMzQ1MWVkMjllMGZiOWFj
MmFmMjExY2I2ZTg0YTYwMWRmNTk5M2M0MTk4NTlmZmY1ZGYwNGEnLCAnN2MxMGRmYjE2NGMzNDI1ZjVjNzFhM2Y5ZDc5OTIwMzhmMTA2NTIyNGY3MmJiOWQxZDkwMmE2ZDEzMDM3YjQ3YyddLCBbJ2IwMTVmODA0NGY1ZmNiZGNmMjFjYTI2ZDZjMzRmYjgxOTc4MjkyMDVjN2I3ZDJhN2NiNjY0MThjMTU3YjExMmMnLCAnYWI4YzFlMDg2ZDA0ZTgxMzc0NGE2NTViMmRmOGQ1ZjgzYjNjZGM2ZmFhMzA4OGMxZDNhZWExNDU0ZTNhMWQ1ZiddLCBbJ2Q1ZTllMWRhNjQ5ZDk3ZDg5ZTQ4NjgxMTdhNDY1YTNhNGY4YTE4ZGU1N2ExNDBkMzZi
M2YyYWYzNDFhMjFiNTInLCAnNGNiMDQ0MzdmMzkxZWQ3MzExMWExM2NjMWQ0ZGQwZGIxNjkzNDY1YzIyNDA0ODBkODk1NWU4NTkyZjI3NDQ3YSddLCBbJ2QzYWU0MTA0N2RkN2NhMDY1ZGJmOGVkNzdiOTkyNDM5OTgzMDA1Y2Q3MmUxNmQ2Zjk5NmE1MzE2ZDM2OTY2YmInLCAnYmQxYWViMjFhZDIyZWJiMjJhMTBmMDMwMzQxN2M2ZDk2NGY4Y2RkN2RmMGFjYTYxNGIxMGRjMTRkMTI1YWM0NiddLCBbJzQ2M2UyNzYzZDg4NWY5NThmYzY2Y2RkMjI4MDBmMGE0ODcxOTdkMGE4MmUzNzdiNDlmODBhZjg3Yzg5N2IwNjUnLCAnYmZlZmFj
ZGIwZTVkMGZkN2RmM2EzMTFhOTRkZTA2MmIyNmI4MGM2MWZiYzk3NTA4Yjc5OTkyNjcxZWY3Y2E3ZiddLCBbJzc5ODVmZGZkMTI3YzA1NjdjNmY1M2VjMWJiNjNlYzMxNThlNTk3YzQwYmZlNzQ3YzgzY2RkZmM5MTA2NDE5MTcnLCAnNjAzYzEyZGFmM2Q5ODYyZWYyYjI1ZmUxZGUyODlhZWQyNGVkMjkxZTBlYzY3MDg3MDNhNWJkNTY3ZjMyZWQwMyddLCBbJzc0YTFhZDZiNWY3NmUzOWRiMmRkMjQ5NDEwZWFjN2Y5OWU3NGM1OWNiODNkMmQwZWQ1ZmYxNTQzZGE3NzAzZTknLCAnY2M2MTU3ZWYxOGM5YzYzY2Q2MTkzZDgzNjMxYmJl
YTAwOTNlMDk2ODk0MmU4YzMzZDU3MzdmZDc5MGUwZGIwOCddLCBbJzMwNjgyYTUwNzAzMzc1ZjYwMmQ0MTY2NjRiYTE5YjdmYzliYWI0MmM3Mjc0NzQ2M2E3MWQwODk2YjIyZjZkYTMnLCAnNTUzZTA0ZjZiMDE4YjRmYTZjOGYzOWU3ZjMxMWQzMTc2MjkwZDBlMGYxOWNhNzNmMTc3MTRkOTk3N2EyMmZmOCddLCBbJzllMjE1OGYwZDdjMGQ1ZjI2YzM3OTFlZmVmYTc5NTk3NjU0ZTdhMmIyNDY0ZjUyYjFlZTZjMTM0Nzc2OWVmNTcnLCAnNzEyZmNkZDFiOTA1M2YwOTAwM2EzNDgxZmE3NzYyZTlmZmQ3YzhlZjM1YTM4NTA5ZTJmYmYy
NjI5MDA4MzczJ10sIFsnMTc2ZTI2OTg5YTQzYzljZmViYTQwMjljMjAyNTM4YzI4MTcyZTU2NmUzYzRmY2U3MzIyODU3ZjNiZTMyN2Q2NicsICdlZDhjYzlkMDRiMjllYjg3N2QyNzBiNDg3OGRjNDNjMTlhZWZkMzFmNGVlZTA5ZWU3YjQ3ODM0YzFmYTRiMWMzJ10sIFsnNzVkNDZlZmVhMzc3MWU2ZTY4YWJiODlhMTNhZDc0N2VjZjE4OTIzOTNkZmM0ZjFiNzAwNDc4OGM1MDM3NGRhOCcsICc5ODUyMzkwYTk5NTA3Njc5ZmQwYjg2ZmQyYjM5YTg2OGQ3ZWZjMjIxNTEzNDZlMWEzY2E0NzI2NTg2YTZiZWQ4J10sIFsnODA5YTIwYzY3
ZDY0OTAwZmZiNjk4YzRjODI1ZjZkNWYyMzEwZmIwNDUxYzg2OTM0NWI3MzE5ZjY0NTYwNTcyMScsICc5ZTk5NDk4MGQ5OTE3ZTIyYjc2YjA2MTkyN2ZhMDQxNDNkMDk2Y2NjNTQ5NjNlNmE1ZWJmYTVmM2Y4ZTI4NmMxJ10sIFsnMWIzODkwM2E0M2Y3ZjExNGVkNDUwMGI0ZWFjNzA4M2ZkZWZlY2UxY2YyOWM2MzUyOGQ1NjM0NDZmOTcyYzE4MCcsICc0MDM2ZWRjOTMxYTYwYWU4ODkzNTNmNzdmZDUzZGU0YTI3MDhiMjZiNmY1ZGE3MmFkMzM5NDExOWRhZjQwOGY5J11dCiAgfQp9OwoKfSx7fV0sMjU1OltmdW5jdGlvbihyZXF1aXJl
LG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIHV0aWxzID0gZXhwb3J0czsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgbWluQXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpOwoKdmFyIG1pblV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpOwoKdXRpbHMuYXNzZXJ0ID0gbWluQXNzZXJ0Owp1dGlscy50b0FycmF5ID0gbWluVXRpbHMudG9BcnJheTsKdXRpbHMuemVybzIgPSBtaW5VdGlscy56ZXJvMjsKdXRpbHMudG9IZXggPSBtaW5VdGlscy50
b0hleDsKdXRpbHMuZW5jb2RlID0gbWluVXRpbHMuZW5jb2RlOyAvLyBSZXByZXNlbnQgbnVtIGluIGEgdy1OQUYgZm9ybQoKZnVuY3Rpb24gZ2V0TkFGKG51bSwgdywgYml0cykgewogIHZhciBuYWYgPSBuZXcgQXJyYXkoTWF0aC5tYXgobnVtLmJpdExlbmd0aCgpLCBiaXRzKSArIDEpOwogIG5hZi5maWxsKDApOwogIHZhciB3cyA9IDEgPDwgdyArIDE7CiAgdmFyIGsgPSBudW0uY2xvbmUoKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYWYubGVuZ3RoOyBpKyspIHsKICAgIHZhciB6OwogICAgdmFyIG1vZCA9IGsuYW5kbG4o
d3MgLSAxKTsKCiAgICBpZiAoay5pc09kZCgpKSB7CiAgICAgIGlmIChtb2QgPiAod3MgPj4gMSkgLSAxKSB6ID0gKHdzID4+IDEpIC0gbW9kO2Vsc2UgeiA9IG1vZDsKICAgICAgay5pc3Vibih6KTsKICAgIH0gZWxzZSB7CiAgICAgIHogPSAwOwogICAgfQoKICAgIG5hZltpXSA9IHo7CiAgICBrLml1c2hybigxKTsKICB9CgogIHJldHVybiBuYWY7Cn0KCnV0aWxzLmdldE5BRiA9IGdldE5BRjsgLy8gUmVwcmVzZW50IGsxLCBrMiBpbiBhIEpvaW50IFNwYXJzZSBGb3JtCgpmdW5jdGlvbiBnZXRKU0YoazEsIGsyKSB7CiAgdmFy
IGpzZiA9IFtbXSwgW11dOwogIGsxID0gazEuY2xvbmUoKTsKICBrMiA9IGsyLmNsb25lKCk7CiAgdmFyIGQxID0gMDsKICB2YXIgZDIgPSAwOwoKICB3aGlsZSAoazEuY21wbigtZDEpID4gMCB8fCBrMi5jbXBuKC1kMikgPiAwKSB7CiAgICAvLyBGaXJzdCBwaGFzZQogICAgdmFyIG0xNCA9IGsxLmFuZGxuKDMpICsgZDEgJiAzOwogICAgdmFyIG0yNCA9IGsyLmFuZGxuKDMpICsgZDIgJiAzOwogICAgaWYgKG0xNCA9PT0gMykgbTE0ID0gLTE7CiAgICBpZiAobTI0ID09PSAzKSBtMjQgPSAtMTsKICAgIHZhciB1MTsKCiAgICBp
ZiAoKG0xNCAmIDEpID09PSAwKSB7CiAgICAgIHUxID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBtOCA9IGsxLmFuZGxuKDcpICsgZDEgJiA3OwogICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMjQgPT09IDIpIHUxID0gLW0xNDtlbHNlIHUxID0gbTE0OwogICAgfQoKICAgIGpzZlswXS5wdXNoKHUxKTsKICAgIHZhciB1MjsKCiAgICBpZiAoKG0yNCAmIDEpID09PSAwKSB7CiAgICAgIHUyID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBtOCA9IGsyLmFuZGxuKDcpICsgZDIgJiA3OwogICAgICBpZiAo
KG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMTQgPT09IDIpIHUyID0gLW0yNDtlbHNlIHUyID0gbTI0OwogICAgfQoKICAgIGpzZlsxXS5wdXNoKHUyKTsgLy8gU2Vjb25kIHBoYXNlCgogICAgaWYgKDIgKiBkMSA9PT0gdTEgKyAxKSBkMSA9IDEgLSBkMTsKICAgIGlmICgyICogZDIgPT09IHUyICsgMSkgZDIgPSAxIC0gZDI7CiAgICBrMS5pdXNocm4oMSk7CiAgICBrMi5pdXNocm4oMSk7CiAgfQoKICByZXR1cm4ganNmOwp9Cgp1dGlscy5nZXRKU0YgPSBnZXRKU0Y7CgpmdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosIG5h
bWUsIGNvbXB1dGVyKSB7CiAgdmFyIGtleSA9ICdfJyArIG5hbWU7CgogIG9iai5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eSgpIHsKICAgIHJldHVybiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCA/IHRoaXNba2V5XSA6IHRoaXNba2V5XSA9IGNvbXB1dGVyLmNhbGwodGhpcyk7CiAgfTsKfQoKdXRpbHMuY2FjaGVkUHJvcGVydHkgPSBjYWNoZWRQcm9wZXJ0eTsKCmZ1bmN0aW9uIHBhcnNlQnl0ZXMoYnl0ZXMpIHsKICByZXR1cm4gdHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJyA/IHV0aWxzLnRvQXJy
YXkoYnl0ZXMsICdoZXgnKSA6IGJ5dGVzOwp9Cgp1dGlscy5wYXJzZUJ5dGVzID0gcGFyc2VCeXRlczsKCmZ1bmN0aW9uIGludEZyb21MRShieXRlcykgewogIHJldHVybiBuZXcgQk4oYnl0ZXMsICdoZXgnLCAnbGUnKTsKfQoKdXRpbHMuaW50RnJvbUxFID0gaW50RnJvbUxFOwoKfSx7ImJuLmpzIjoyNTYsIm1pbmltYWxpc3RpYy1hc3NlcnQiOjMyOCwibWluaW1hbGlzdGljLWNyeXB0by11dGlscyI6MzI5fV0sMjU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzE4MV1bMF0uYXBwbHko
ZXhwb3J0cyxhcmd1bWVudHMpCn0seyJidWZmZXIiOjE4NSwiZHVwIjoxODF9XSwyNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cz17CiAgIl9mcm9tIjogImVsbGlwdGljQF42LjUuMyIsCiAgIl9pZCI6ICJlbGxpcHRpY0A2LjUuMyIsCiAgIl9pbkJ1bmRsZSI6IGZhbHNlLAogICJfaW50ZWdyaXR5IjogInNoYTUxMi1JTXF6djV3TlFmK0U2YUhlSXFBVHMwdE9MZU9Ud2oxUUtiUmNTM2pCYllrbDVvTEFzZXJBOHlKVFQ3L1Z5SFVZRzkxUFJtUHllUURPYktMUHBlUzRkdz09IiwKICAi
X2xvY2F0aW9uIjogIi9lbGxpcHRpYyIsCiAgIl9waGFudG9tQ2hpbGRyZW4iOiB7fSwKICAiX3JlcXVlc3RlZCI6IHsKICAgICJ0eXBlIjogInJhbmdlIiwKICAgICJyZWdpc3RyeSI6IHRydWUsCiAgICAicmF3IjogImVsbGlwdGljQF42LjUuMyIsCiAgICAibmFtZSI6ICJlbGxpcHRpYyIsCiAgICAiZXNjYXBlZE5hbWUiOiAiZWxsaXB0aWMiLAogICAgInJhd1NwZWMiOiAiXjYuNS4zIiwKICAgICJzYXZlU3BlYyI6IG51bGwsCiAgICAiZmV0Y2hTcGVjIjogIl42LjUuMyIKICB9LAogICJfcmVxdWlyZWRCeSI6IFsKICAgICIv
YnJvd3NlcmlmeS1zaWduIiwKICAgICIvY3JlYXRlLWVjZGgiCiAgXSwKICAiX3Jlc29sdmVkIjogImh0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnL2VsbGlwdGljLy0vZWxsaXB0aWMtNi41LjMudGd6IiwKICAiX3NoYXN1bSI6ICJjYjU5ZWIyZWZkYWY3M2EwYmQ3OGNjZDcwMTVhNjJhZDZlMGY5M2Q2IiwKICAiX3NwZWMiOiAiZWxsaXB0aWNAXjYuNS4zIiwKICAiX3doZXJlIjogIi9tbnQvZC9kZXYvZ2l0L2V4Y2VsanMvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbiIsCiAgImF1dGhvciI6IHsKICAgICJuYW1lIjogIkZl
ZG9yIEluZHV0bnkiLAogICAgImVtYWlsIjogImZlZG9yQGluZHV0bnkuY29tIgogIH0sCiAgImJ1Z3MiOiB7CiAgICAidXJsIjogImh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2VsbGlwdGljL2lzc3VlcyIKICB9LAogICJidW5kbGVEZXBlbmRlbmNpZXMiOiBmYWxzZSwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImJuLmpzIjogIl40LjQuMCIsCiAgICAiYnJvcmFuZCI6ICJeMS4wLjEiLAogICAgImhhc2guanMiOiAiXjEuMC4wIiwKICAgICJobWFjLWRyYmciOiAiXjEuMC4wIiwKICAgICJpbmhlcml0cyI6ICJeMi4wLjEi
LAogICAgIm1pbmltYWxpc3RpYy1hc3NlcnQiOiAiXjEuMC4wIiwKICAgICJtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzIjogIl4xLjAuMCIKICB9LAogICJkZXByZWNhdGVkIjogZmFsc2UsCiAgImRlc2NyaXB0aW9uIjogIkVDIGNyeXB0b2dyYXBoeSIsCiAgImRldkRlcGVuZGVuY2llcyI6IHsKICAgICJicmZzIjogIl4xLjQuMyIsCiAgICAiY292ZXJhbGxzIjogIl4zLjAuOCIsCiAgICAiZ3J1bnQiOiAiXjEuMC40IiwKICAgICJncnVudC1icm93c2VyaWZ5IjogIl41LjAuMCIsCiAgICAiZ3J1bnQtY2xpIjogIl4xLjIuMCIs
CiAgICAiZ3J1bnQtY29udHJpYi1jb25uZWN0IjogIl4xLjAuMCIsCiAgICAiZ3J1bnQtY29udHJpYi1jb3B5IjogIl4xLjAuMCIsCiAgICAiZ3J1bnQtY29udHJpYi11Z2xpZnkiOiAiXjEuMC4xIiwKICAgICJncnVudC1tb2NoYS1pc3RhbmJ1bCI6ICJeMy4wLjEiLAogICAgImdydW50LXNhdWNlbGFicyI6ICJeOS4wLjEiLAogICAgImlzdGFuYnVsIjogIl4wLjQuMiIsCiAgICAianNjcyI6ICJeMy4wLjciLAogICAgImpzaGludCI6ICJeMi4xMC4zIiwKICAgICJtb2NoYSI6ICJeNi4yLjIiCiAgfSwKICAiZmlsZXMiOiBbCiAg
ICAibGliIgogIF0sCiAgImhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2VsbGlwdGljIiwKICAia2V5d29yZHMiOiBbCiAgICAiRUMiLAogICAgIkVsbGlwdGljIiwKICAgICJjdXJ2ZSIsCiAgICAiQ3J5cHRvZ3JhcGh5IgogIF0sCiAgImxpY2Vuc2UiOiAiTUlUIiwKICAibWFpbiI6ICJsaWIvZWxsaXB0aWMuanMiLAogICJuYW1lIjogImVsbGlwdGljIiwKICAicmVwb3NpdG9yeSI6IHsKICAgICJ0eXBlIjogImdpdCIsCiAgICAidXJsIjogImdpdCtzc2g6Ly9naXRAZ2l0aHViLmNvbS9pbmR1dG55L2Vs
bGlwdGljLmdpdCIKICB9LAogICJzY3JpcHRzIjogewogICAgImpzY3MiOiAianNjcyBiZW5jaG1hcmtzLyouanMgbGliLyouanMgbGliLyoqLyouanMgbGliLyoqLyoqLyouanMgdGVzdC9pbmRleC5qcyIsCiAgICAianNoaW50IjogImpzY3MgYmVuY2htYXJrcy8qLmpzIGxpYi8qLmpzIGxpYi8qKi8qLmpzIGxpYi8qKi8qKi8qLmpzIHRlc3QvaW5kZXguanMiLAogICAgImxpbnQiOiAibnBtIHJ1biBqc2NzICYmIG5wbSBydW4ganNoaW50IiwKICAgICJ0ZXN0IjogIm5wbSBydW4gbGludCAmJiBucG0gcnVuIHVuaXQiLAogICAg
InVuaXQiOiAiaXN0YW5idWwgdGVzdCBfbW9jaGEgLS1yZXBvcnRlcj1zcGVjIHRlc3QvaW5kZXguanMiLAogICAgInZlcnNpb24iOiAiZ3J1bnQgZGlzdCAmJiBnaXQgYWRkIGRpc3QvIgogIH0sCiAgInZlcnNpb24iOiAiNi41LjMiCn0KCn0se31dLDI1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRl
cmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5j
LiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwg
bWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBv
cnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJM
RSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgp2YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBvYmplY3RDcmVhdGVQb2x5ZmlsbDsKdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBv
YmplY3RLZXlzUG9seWZpbGw7CnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgZnVuY3Rpb25CaW5kUG9seWZpbGw7CgpmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7CiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCAnX2V2ZW50cycpKSB7CiAgICB0aGlzLl9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7CiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7CiAgfQoKICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMg
fHwgdW5kZWZpbmVkOwp9Cgptb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjsgLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54CgpFdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyOwpFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7CkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDsgLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJl
Ci8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuCgp2YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwOwp2YXIgaGFzRGVmaW5lUHJvcGVydHk7Cgp0cnkgewogIHZhciBvID0ge307CiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sICd4JywgewogICAgdmFsdWU6IDAKICB9KTsKICBoYXNEZWZpbmVQcm9wZXJ0eSA9IG8ueCA9PT0gMDsKfSBjYXRjaCAoZXJyKSB7CiAgaGFzRGVmaW5lUHJvcGVydHkg
PSBmYWxzZTsKfQoKaWYgKGhhc0RlZmluZVByb3BlcnR5KSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGFyZykgewogICAgICAvLyBjaGVjayB3aGV0aGVyIHRoZSBpbnB1dCBpcyBhIHBvc2l0aXZlIG51bWJlciAod2hvc2UgdmFsdWUgaXMgemVybyBvcgogICAg
ICAvLyBncmVhdGVyIGFuZCBub3QgYSBOYU4pLgogICAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBhcmcgIT09IGFyZykgdGhyb3cgbmV3IFR5cGVFcnJvcignImRlZmF1bHRNYXhMaXN0ZW5lcnMiIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTsKICAgICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZzsKICAgIH0KICB9KTsKfSBlbHNlIHsKICBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IGRlZmF1bHRNYXhMaXN0ZW5lcnM7Cn0gLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1p
dHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzCi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLgoKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHsKICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IGlzTmFOKG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKCcibiIgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpOwogIHRoaXMuX21h
eExpc3RlbmVycyA9IG47CiAgcmV0dXJuIHRoaXM7Cn07CgpmdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHsKICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVyczsKICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzOwp9CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHsKICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTsKfTsgLy8gVGhlc2Ugc3Rh
bmRhbG9uZSBlbWl0KiBmdW5jdGlvbnMgYXJlIHVzZWQgdG8gb3B0aW1pemUgY2FsbGluZyBvZiBldmVudAovLyBoYW5kbGVycyBmb3IgZmFzdCBjYXNlcyBiZWNhdXNlIGVtaXQoKSBpdHNlbGYgb2Z0ZW4gaGFzIGEgdmFyaWFibGUgbnVtYmVyIG9mCi8vIGFyZ3VtZW50cyBhbmQgY2FuIGJlIGRlb3B0aW1pemVkIGJlY2F1c2Ugb2YgdGhhdC4gVGhlc2UgZnVuY3Rpb25zIGFsd2F5cyBoYXZlCi8vIHRoZSBzYW1lIG51bWJlciBvZiBhcmd1bWVudHMgYW5kIHRodXMgZG8gbm90IGdldCBkZW9wdGltaXplZCwgc28gdGhlIGNvZGUK
Ly8gaW5zaWRlIHRoZW0gY2FuIGV4ZWN1dGUgZmFzdGVyLgoKCmZ1bmN0aW9uIGVtaXROb25lKGhhbmRsZXIsIGlzRm4sIHNlbGYpIHsKICBpZiAoaXNGbikgaGFuZGxlci5jYWxsKHNlbGYpO2Vsc2UgewogICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoOwogICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7CiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gZW1pdE9uZShoYW5kbGVyLCBp
c0ZuLCBzZWxmLCBhcmcxKSB7CiAgaWYgKGlzRm4pIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxKTtlbHNlIHsKICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDsKICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkgewogICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmLCBhcmcxKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSwgYXJnMikgewogIGlmIChpc0ZuKSBoYW5kbGVyLmNh
bGwoc2VsZiwgYXJnMSwgYXJnMik7ZWxzZSB7CiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7CiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBlbWl0VGhyZWUoaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSwgYXJnMiwgYXJnMykgewogIGlmIChpc0ZuKSBoYW5kbGVyLmNhbGwoc2VsZiwgYXJnMSwgYXJnMiwg
YXJnMyk7ZWxzZSB7CiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7CiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMiwgYXJnMyk7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBlbWl0TWFueShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmdzKSB7CiAgaWYgKGlzRm4pIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7ZWxzZSB7CiAgICB2YXIgbGVuID0gaGFuZGxl
ci5sZW5ndGg7CiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgfQogIH0KfQoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7CiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGV2ZW50czsKICB2YXIgZG9FcnJvciA9IHR5cGUgPT09ICdlcnJvcic7CiAgZXZlbnRzID0gdGhpcy5fZXZlbnRzOwogIGlm
IChldmVudHMpIGRvRXJyb3IgPSBkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PSBudWxsO2Vsc2UgaWYgKCFkb0Vycm9yKSByZXR1cm4gZmFsc2U7IC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy4KCiAgaWYgKGRvRXJyb3IpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgZXIgPSBhcmd1bWVudHNbMV07CgogICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHsKICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50CiAgICB9IGVsc2UgewogICAgICAv
LyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyCiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCAiZXJyb3IiIGV2ZW50LiAoJyArIGVyICsgJyknKTsKICAgICAgZXJyLmNvbnRleHQgPSBlcjsKICAgICAgdGhyb3cgZXJyOwogICAgfQoKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGhhbmRsZXIgPSBldmVudHNbdHlwZV07CiAgaWYgKCFoYW5kbGVyKSByZXR1cm4gZmFsc2U7CiAgdmFyIGlzRm4gPSB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJzsKICBsZW4gPSBhcmd1
bWVudHMubGVuZ3RoOwoKICBzd2l0Y2ggKGxlbikgewogICAgLy8gZmFzdCBjYXNlcwogICAgY2FzZSAxOgogICAgICBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCB0aGlzKTsKICAgICAgYnJlYWs7CgogICAgY2FzZSAyOgogICAgICBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSk7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgMzoKICAgICAgZW1pdFR3byhoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgNDoKICAgICAgZW1p
dFRocmVlKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pOwogICAgICBicmVhazsKICAgIC8vIHNsb3dlcgoKICAgIGRlZmF1bHQ6CiAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7CgogICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTsKICAgICAgfQoKICAgICAgZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJncyk7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfTsKCmZ1bmN0aW9u
IF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7CiAgdmFyIG07CiAgdmFyIGV2ZW50czsKICB2YXIgZXhpc3Rpbmc7CiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3RlbmVyIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICBldmVudHMgPSB0YXJnZXQuX2V2ZW50czsKCiAgaWYgKCFldmVudHMpIHsKICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpOwogICAgdGFyZ2V0Ll9ldmVu
dHNDb3VudCA9IDA7CiAgfSBlbHNlIHsKICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09ICJuZXdMaXN0ZW5lciIhIEJlZm9yZQogICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgIm5ld0xpc3RlbmVyIi4KICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIpIHsKICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTsgLy8gUmUtYXNzaWduIGBldmVudHNg
IGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZQogICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0CgogICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50czsKICAgIH0KCiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTsKICB9CgogIGlmICghZXhpc3RpbmcpIHsKICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LgogICAgZXhpc3RpbmcgPSBldmVudHNbdHlw
ZV0gPSBsaXN0ZW5lcjsKICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDsKICB9IGVsc2UgewogICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS4KICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0
IGFwcGVuZC4KICAgICAgaWYgKHByZXBlbmQpIHsKICAgICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTsKICAgICAgfQogICAgfSAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVhawoKCiAgICBpZiAoIWV4aXN0aW5nLndhcm5lZCkgewogICAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpOwoKICAgICAgaWYgKG0gJiYgbSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSkgewogICAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7
CiAgICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArIGV4aXN0aW5nLmxlbmd0aCArICcgIicgKyBTdHJpbmcodHlwZSkgKyAnIiBsaXN0ZW5lcnMgJyArICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArICdpbmNyZWFzZSBsaW1pdC4nKTsKICAgICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJzsKICAgICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7CiAgICAgICAgdy50eXBlID0gdHlwZTsKICAg
ICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoOwoKICAgICAgICBpZiAoKHR5cGVvZiBjb25zb2xlID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihjb25zb2xlKSkgPT09ICdvYmplY3QnICYmIGNvbnNvbGUud2FybikgewogICAgICAgICAgY29uc29sZS53YXJuKCclczogJXMnLCB3Lm5hbWUsIHcubWVzc2FnZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVu
ZXIodHlwZSwgbGlzdGVuZXIpIHsKICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7Cn07CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7CiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7Cn07CgpmdW5jdGlvbiBvbmNlV3JhcHBl
cigpIHsKICBpZiAoIXRoaXMuZmlyZWQpIHsKICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pOwogICAgdGhpcy5maXJlZCA9IHRydWU7CgogICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgIGNhc2UgMDoKICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTsKCiAgICAgIGNhc2UgMToKICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0LCBhcmd1bWVudHNbMF0pOwoKICAgICAgY2FzZSAyOgogICAgICAg
IHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQsIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKTsKCiAgICAgIGNhc2UgMzoKICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0LCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkgewogICAgICAgICAgYXJn
c1tpXSA9IGFyZ3VtZW50c1tpXTsKICAgICAgICB9CgogICAgICAgIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3MpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHsKICB2YXIgc3RhdGUgPSB7CiAgICBmaXJlZDogZmFsc2UsCiAgICB3cmFwRm46IHVuZGVmaW5lZCwKICAgIHRhcmdldDogdGFyZ2V0LAogICAgdHlwZTogdHlwZSwKICAgIGxpc3RlbmVyOiBsaXN0ZW5lcgogIH07CiAgdmFyIHdyYXBwZWQgPSBiaW5kLmNhbGwob25jZVdyYXBwZXIsIHN0
YXRlKTsKICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7CiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDsKICByZXR1cm4gd3JhcHBlZDsKfQoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikgewogIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0ZW5lciIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTsKICBy
ZXR1cm4gdGhpczsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9IGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdGVuZXIiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpOwogIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpOwogIHJldHVybiB0aGlzOwp9OyAvLyBFbWl0cyBh
ICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLgoKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikgewogIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyOwogIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0ZW5lciIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7
CiAgZXZlbnRzID0gdGhpcy5fZXZlbnRzOwogIGlmICghZXZlbnRzKSByZXR1cm4gdGhpczsKICBsaXN0ID0gZXZlbnRzW3R5cGVdOwogIGlmICghbGlzdCkgcmV0dXJuIHRoaXM7CgogIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikgewogICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHRoaXMuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtlbHNlIHsKICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTsKICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcikgdGhp
cy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpOwogICAgfQogIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHsKICAgIHBvc2l0aW9uID0gLTE7CgogICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHsKICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjsKICAgICAgICBwb3NpdGlv
biA9IGk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICBpZiAocG9zaXRpb24gPCAwKSByZXR1cm4gdGhpczsKICAgIGlmIChwb3NpdGlvbiA9PT0gMCkgbGlzdC5zaGlmdCgpO2Vsc2Ugc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTsKICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgZXZlbnRzW3R5cGVdID0gbGlzdFswXTsKICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTsKICB9CgogIHJldHVy
biB0aGlzOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkgewogIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTsKICBldmVudHMgPSB0aGlzLl9ldmVudHM7CiAgaWYgKCFldmVudHMpIHJldHVybiB0aGlzOyAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0CgogIGlmICghZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgewogICAgICB0
aGlzLl9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7CiAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDsKICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdKSB7CiAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSB0aGlzLl9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7ZWxzZSBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0gLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzCgoKICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9
PT0gMCkgewogICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKGV2ZW50cyk7CiAgICB2YXIga2V5OwoKICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7CiAgICAgIGtleSA9IGtleXNbaV07CiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlOwogICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpOwogICAgfQoKICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpOwogICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpOwogICAgdGhp
cy5fZXZlbnRzQ291bnQgPSAwOwogICAgcmV0dXJuIHRoaXM7CiAgfQoKICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07CgogIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7CiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7CiAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHsKICAgIC8vIExJRk8gb3JkZXIKICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7CiAgICB9
CiAgfQoKICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHsKICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7CiAgaWYgKCFldmVudHMpIHJldHVybiBbXTsKICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTsKICBpZiAoIWV2bGlzdGVuZXIpIHJldHVybiBbXTsKICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTsKICBy
ZXR1cm4gdW53cmFwID8gdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7Cn0KCkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHsKICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHsKICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxz
ZSk7Cn07CgpFdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7CiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHsKICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7CiAgfQp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDsKCmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQo
dHlwZSkgewogIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7CgogIGlmIChldmVudHMpIHsKICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdOwoKICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgewogICAgICByZXR1cm4gMTsKICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lcikgewogICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7CiAgICB9CiAgfQoKICByZXR1cm4gMDsKfQoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHsKICBy
ZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdC5vd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTsKfTsgLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpLgoKCmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkgewogIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkgewogICAgbGlzdFtpXSA9IGxpc3Rba107CiAgfQoKICBsaXN0LnBvcCgpOwp9CgpmdW5jdGlvbiBh
cnJheUNsb25lKGFyciwgbikgewogIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgewogICAgY29weVtpXSA9IGFycltpXTsKICB9CgogIHJldHVybiBjb3B5Owp9CgpmdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7CiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHsKICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07CiAgfQoKICByZXR1cm4gcmV0Owp9CgpmdW5j
dGlvbiBvYmplY3RDcmVhdGVQb2x5ZmlsbChwcm90bykgewogIHZhciBGID0gZnVuY3Rpb24gRigpIHt9OwoKICBGLnByb3RvdHlwZSA9IHByb3RvOwogIHJldHVybiBuZXcgRigpOwp9CgpmdW5jdGlvbiBvYmplY3RLZXlzUG9seWZpbGwob2JqKSB7CiAgdmFyIGtleXMgPSBbXTsKCiAgZm9yICh2YXIgayBpbiBvYmopIHsKICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrKSkgewogICAgICBrZXlzLnB1c2goayk7CiAgICB9CiAgfQoKICByZXR1cm4gazsKfQoKZnVuY3Rpb24gZnVuY3Rp
b25CaW5kUG9seWZpbGwoY29udGV4dCkgewogIHZhciBmbiA9IHRoaXM7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpOwogIH07Cn0KCn0se31dLDI1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKTsKLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovCgoKZnVuY3Rpb24gRVZQX0J5dGVz
VG9LZXkocGFzc3dvcmQsIHNhbHQsIGtleUJpdHMsIGl2TGVuKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCAnYmluYXJ5Jyk7CgogIGlmIChzYWx0KSB7CiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsICdiaW5hcnknKTsKICAgIGlmIChzYWx0Lmxlbmd0aCAhPT0gOCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NhbHQgc2hvdWxkIGJlIEJ1ZmZlciB3aXRoIDggYnl0ZSBsZW5ndGgnKTsKICB9Cgog
IHZhciBrZXlMZW4gPSBrZXlCaXRzIC8gODsKICB2YXIga2V5ID0gQnVmZmVyLmFsbG9jKGtleUxlbik7CiAgdmFyIGl2ID0gQnVmZmVyLmFsbG9jKGl2TGVuIHx8IDApOwogIHZhciB0bXAgPSBCdWZmZXIuYWxsb2MoMCk7CgogIHdoaWxlIChrZXlMZW4gPiAwIHx8IGl2TGVuID4gMCkgewogICAgdmFyIGhhc2ggPSBuZXcgTUQ1KCk7CiAgICBoYXNoLnVwZGF0ZSh0bXApOwogICAgaGFzaC51cGRhdGUocGFzc3dvcmQpOwogICAgaWYgKHNhbHQpIGhhc2gudXBkYXRlKHNhbHQpOwogICAgdG1wID0gaGFzaC5kaWdlc3QoKTsKICAg
IHZhciB1c2VkID0gMDsKCiAgICBpZiAoa2V5TGVuID4gMCkgewogICAgICB2YXIga2V5U3RhcnQgPSBrZXkubGVuZ3RoIC0ga2V5TGVuOwogICAgICB1c2VkID0gTWF0aC5taW4oa2V5TGVuLCB0bXAubGVuZ3RoKTsKICAgICAgdG1wLmNvcHkoa2V5LCBrZXlTdGFydCwgMCwgdXNlZCk7CiAgICAgIGtleUxlbiAtPSB1c2VkOwogICAgfQoKICAgIGlmICh1c2VkIDwgdG1wLmxlbmd0aCAmJiBpdkxlbiA+IDApIHsKICAgICAgdmFyIGl2U3RhcnQgPSBpdi5sZW5ndGggLSBpdkxlbjsKICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWlu
KGl2TGVuLCB0bXAubGVuZ3RoIC0gdXNlZCk7CiAgICAgIHRtcC5jb3B5KGl2LCBpdlN0YXJ0LCB1c2VkLCB1c2VkICsgbGVuZ3RoKTsKICAgICAgaXZMZW4gLT0gbGVuZ3RoOwogICAgfQogIH0KCiAgdG1wLmZpbGwoMCk7CiAgcmV0dXJuIHsKICAgIGtleToga2V5LAogICAgaXY6IGl2CiAgfTsKfQoKbW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleTsKCn0seyJtZDUuanMiOjMyNSwic2FmZS1idWZmZXIiOjM4NH1dLDI2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVj
dC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBmb3JtYXRfMSA9IHJlcXVpcmUoIkBmYXN0LWNzdi9mb3JtYXQiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiZm9ybWF0IiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gZm9ybWF0XzEuZm9ybWF0OwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAid3JpdGUiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1
bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBmb3JtYXRfMS53cml0ZTsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIndyaXRlVG9TdHJlYW0iLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBmb3JtYXRfMS53cml0ZVRvU3RyZWFtOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAid3JpdGVUb0J1ZmZlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIGZvcm1hdF8x
LndyaXRlVG9CdWZmZXI7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJ3cml0ZVRvU3RyaW5nIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gZm9ybWF0XzEud3JpdGVUb1N0cmluZzsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIndyaXRlVG9QYXRoIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gZm9ybWF0XzEud3JpdGVUb1BhdGg7CiAgfQp9KTsKT2JqZWN0
LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJDc3ZGb3JtYXR0ZXJTdHJlYW0iLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBmb3JtYXRfMS5Dc3ZGb3JtYXR0ZXJTdHJlYW07CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJGb3JtYXR0ZXJPcHRpb25zIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gZm9ybWF0XzEuRm9ybWF0dGVyT3B0aW9uczsKICB9Cn0pOwoKdmFyIHBhcnNlXzEgPSBy
ZXF1aXJlKCJAZmFzdC1jc3YvcGFyc2UiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAicGFyc2UiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBwYXJzZV8xLnBhcnNlOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAicGFyc2VTdHJpbmciLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBwYXJzZV8xLnBhcnNlU3RyaW5nOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0
eShleHBvcnRzLCAicGFyc2VTdHJlYW0iLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBwYXJzZV8xLnBhcnNlU3RyZWFtOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAicGFyc2VGaWxlIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gcGFyc2VfMS5wYXJzZUZpbGU7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJQYXJzZXJPcHRpb25zIiwgewogIGVudW1lcmFi
bGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gcGFyc2VfMS5QYXJzZXJPcHRpb25zOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiQ3N2UGFyc2VyU3RyZWFtIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gcGFyc2VfMS5Dc3ZQYXJzZXJTdHJlYW07CiAgfQp9KTsKCn0seyJAZmFzdC1jc3YvZm9ybWF0IjoxNDgsIkBmYXN0LWNzdi9wYXJzZSI6MTUyfV0sMjYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBv
cnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKdmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpLlRyYW5zZm9ybTsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7CgpmdW5jdGlvbiB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIodmFsLCBwcmVmaXgpIHsKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWwpICYmIHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHByZWZpeCArICcg
bXVzdCBiZSBhIHN0cmluZyBvciBhIGJ1ZmZlcicpOwogIH0KfQoKZnVuY3Rpb24gSGFzaEJhc2UoYmxvY2tTaXplKSB7CiAgVHJhbnNmb3JtLmNhbGwodGhpcyk7CiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tTaXplKTsKICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemU7CiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwOwogIHRoaXMuX2xlbmd0aCA9IFswLCAwLCAwLCAwXTsKICB0aGlzLl9maW5hbGl6ZWQgPSBmYWxzZTsKfQoKaW5oZXJpdHMoSGFzaEJhc2UsIFRyYW5zZm9ybSk7CgpIYXNoQmFzZS5w
cm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7CiAgdmFyIGVycm9yID0gbnVsbDsKCiAgdHJ5IHsKICAgIHRoaXMudXBkYXRlKGNodW5rLCBlbmNvZGluZyk7CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBlcnJvciA9IGVycjsKICB9CgogIGNhbGxiYWNrKGVycm9yKTsKfTsKCkhhc2hCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICB2YXIgZXJyb3IgPSBudWxsOwoKICB0cnkgewogICAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpOwogIH0g
Y2F0Y2ggKGVycikgewogICAgZXJyb3IgPSBlcnI7CiAgfQoKICBjYWxsYmFjayhlcnJvcik7Cn07CgpIYXNoQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nKSB7CiAgdGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyKGRhdGEsICdEYXRhJyk7CiAgaWYgKHRoaXMuX2ZpbmFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCdEaWdlc3QgYWxyZWFkeSBjYWxsZWQnKTsKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKTsgLy8gY29uc3VtZSBk
YXRhCgogIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrOwogIHZhciBvZmZzZXQgPSAwOwoKICB3aGlsZSAodGhpcy5fYmxvY2tPZmZzZXQgKyBkYXRhLmxlbmd0aCAtIG9mZnNldCA+PSB0aGlzLl9ibG9ja1NpemUpIHsKICAgIGZvciAodmFyIGkgPSB0aGlzLl9ibG9ja09mZnNldDsgaSA8IHRoaXMuX2Jsb2NrU2l6ZTspIHsKICAgICAgYmxvY2tbaSsrXSA9IGRhdGFbb2Zmc2V0KytdOwogICAgfQoKICAgIHRoaXMuX3VwZGF0ZSgpOwoKICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMDsKICB9CgogIHdoaWxlIChvZmZzZXQgPCBkYXRh
Lmxlbmd0aCkgewogICAgYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSBkYXRhW29mZnNldCsrXTsKICB9IC8vIHVwZGF0ZSBsZW5ndGgKCgogIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IGRhdGEubGVuZ3RoICogODsgY2FycnkgPiAwOyArK2opIHsKICAgIHRoaXMuX2xlbmd0aFtqXSArPSBjYXJyeTsKICAgIGNhcnJ5ID0gdGhpcy5fbGVuZ3RoW2pdIC8gMHgwMTAwMDAwMDAwIHwgMDsKICAgIGlmIChjYXJyeSA+IDApIHRoaXMuX2xlbmd0aFtqXSAtPSAweDAxMDAwMDAwMDAgKiBjYXJyeTsKICB9CgogIHJldHVybiB0aGlz
Owp9OwoKSGFzaEJhc2UucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7CiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIGlzIG5vdCBpbXBsZW1lbnRlZCcpOwp9OwoKSGFzaEJhc2UucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmNvZGluZykgewogIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJyk7CiAgdGhpcy5fZmluYWxpemVkID0gdHJ1ZTsKCiAgdmFyIGRpZ2VzdCA9IHRoaXMuX2RpZ2VzdCgpOwoKICBpZiAoZW5jb2RpbmcgIT09IHVuZGVm
aW5lZCkgZGlnZXN0ID0gZGlnZXN0LnRvU3RyaW5nKGVuY29kaW5nKTsgLy8gcmVzZXQgc3RhdGUKCiAgdGhpcy5fYmxvY2suZmlsbCgwKTsKCiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkgewogICAgdGhpcy5fbGVuZ3RoW2ldID0gMDsKICB9CgogIHJldHVybiBkaWdlc3Q7Cn07CgpIYXNoQmFzZS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ19kaWdlc3QgaXMgbm90IGltcGxlbWVudGVkJyk7Cn07Cgptb2R1bGUuZXhwb3J0
cyA9IEhhc2hCYXNlOwoKfSx7ImluaGVyaXRzIjoyNzgsInJlYWRhYmxlLXN0cmVhbSI6MzgyLCJzYWZlLWJ1ZmZlciI6MjYyfV0sMjYyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzIxNF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJidWZmZXIiOjIxNiwiZHVwIjoyMTR9XSwyNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgaGFzaCA9IGV4cG9ydHM7Cmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTsK
aGFzaC5jb21tb24gPSByZXF1aXJlKCcuL2hhc2gvY29tbW9uJyk7Cmhhc2guc2hhID0gcmVxdWlyZSgnLi9oYXNoL3NoYScpOwpoYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTsKaGFzaC5obWFjID0gcmVxdWlyZSgnLi9oYXNoL2htYWMnKTsgLy8gUHJveHkgaGFzaCBmdW5jdGlvbnMgdG8gdGhlIG1haW4gb2JqZWN0CgpoYXNoLnNoYTEgPSBoYXNoLnNoYS5zaGExOwpoYXNoLnNoYTI1NiA9IGhhc2guc2hhLnNoYTI1NjsKaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7Cmhhc2guc2hhMzg0ID0gaGFz
aC5zaGEuc2hhMzg0OwpoYXNoLnNoYTUxMiA9IGhhc2guc2hhLnNoYTUxMjsKaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7Cgp9LHsiLi9oYXNoL2NvbW1vbiI6MjY0LCIuL2hhc2gvaG1hYyI6MjY1LCIuL2hhc2gvcmlwZW1kIjoyNjYsIi4vaGFzaC9zaGEiOjI2NywiLi9oYXNoL3V0aWxzIjoyNzR9XSwyNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7Cgp2YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1h
bGlzdGljLWFzc2VydCcpOwoKZnVuY3Rpb24gQmxvY2tIYXNoKCkgewogIHRoaXMucGVuZGluZyA9IG51bGw7CiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwOwogIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7CiAgdGhpcy5vdXRTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5vdXRTaXplOwogIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7CiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7CiAgdGhpcy5lbmRpYW4gPSAn
YmlnJzsKICB0aGlzLl9kZWx0YTggPSB0aGlzLmJsb2NrU2l6ZSAvIDg7CiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7Cn0KCmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoOwoKQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHsKICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3MKICBtc2cgPSB1dGlscy50b0FycmF5KG1zZywgZW5jKTsKICBpZiAoIXRoaXMucGVuZGluZykgdGhpcy5w
ZW5kaW5nID0gbXNnO2Vsc2UgdGhpcy5wZW5kaW5nID0gdGhpcy5wZW5kaW5nLmNvbmNhdChtc2cpOwogIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7IC8vIEVub3VnaCBkYXRhLCB0cnkgdXBkYXRpbmcKCiAgaWYgKHRoaXMucGVuZGluZy5sZW5ndGggPj0gdGhpcy5fZGVsdGE4KSB7CiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7IC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2NrcwoKICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODsKICAgIHRoaXMucGVuZGluZyA9IG1zZy5zbGljZShtc2cu
bGVuZ3RoIC0gciwgbXNnLmxlbmd0aCk7CiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMCkgdGhpcy5wZW5kaW5nID0gbnVsbDsKICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpIHsKICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpOwogICAgfQogIH0KCiAgcmV0dXJuIHRoaXM7Cn07CgpCbG9ja0hhc2gucHJvdG90eXBlLmRp
Z2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHsKICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7CiAgYXNzZXJ0KHRoaXMucGVuZGluZyA9PT0gbnVsbCk7CiAgcmV0dXJuIHRoaXMuX2RpZ2VzdChlbmMpOwp9OwoKQmxvY2tIYXNoLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gcGFkKCkgewogIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDsKICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7CiAgdmFyIGsgPSBieXRlcyAtIChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlczsKICB2YXIgcmVzID0gbmV3IEFycmF5KGsg
KyB0aGlzLnBhZExlbmd0aCk7CiAgcmVzWzBdID0gMHg4MDsKCiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspIHsKICAgIHJlc1tpXSA9IDA7CiAgfSAvLyBBcHBlbmQgbGVuZ3RoCgoKICBsZW4gPDw9IDM7CgogIGlmICh0aGlzLmVuZGlhbiA9PT0gJ2JpZycpIHsKICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKykgewogICAgICByZXNbaSsrXSA9IDA7CiAgICB9CgogICAgcmVzW2krK10gPSAwOwogICAgcmVzW2krK10gPSAwOwogICAgcmVzW2krK10gPSAwOwogICAgcmVzW2krK10gPSAwOwog
ICAgcmVzW2krK10gPSBsZW4gPj4+IDI0ICYgMHhmZjsKICAgIHJlc1tpKytdID0gbGVuID4+PiAxNiAmIDB4ZmY7CiAgICByZXNbaSsrXSA9IGxlbiA+Pj4gOCAmIDB4ZmY7CiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7CiAgfSBlbHNlIHsKICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjsKICAgIHJlc1tpKytdID0gbGVuID4+PiA4ICYgMHhmZjsKICAgIHJlc1tpKytdID0gbGVuID4+PiAxNiAmIDB4ZmY7CiAgICByZXNbaSsrXSA9IGxlbiA+Pj4gMjQgJiAweGZmOwogICAgcmVzW2krK10gPSAwOwogICAgcmVzW2krK10gPSAw
OwogICAgcmVzW2krK10gPSAwOwogICAgcmVzW2krK10gPSAwOwoKICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKSB7CiAgICAgIHJlc1tpKytdID0gMDsKICAgIH0KICB9CgogIHJldHVybiByZXM7Cn07Cgp9LHsiLi91dGlscyI6Mjc0LCJtaW5pbWFsaXN0aWMtYXNzZXJ0IjozMjh9XSwyNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7Cgp2YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFz
c2VydCcpOwoKZnVuY3Rpb24gSG1hYyhoYXNoLCBrZXksIGVuYykgewogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSkgcmV0dXJuIG5ldyBIbWFjKGhhc2gsIGtleSwgZW5jKTsKICB0aGlzLkhhc2ggPSBoYXNoOwogIHRoaXMuYmxvY2tTaXplID0gaGFzaC5ibG9ja1NpemUgLyA4OwogIHRoaXMub3V0U2l6ZSA9IGhhc2gub3V0U2l6ZSAvIDg7CiAgdGhpcy5pbm5lciA9IG51bGw7CiAgdGhpcy5vdXRlciA9IG51bGw7CgogIHRoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksIGVuYykpOwp9Cgptb2R1bGUuZXhwb3J0cyA9
IEhtYWM7CgpIbWFjLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoa2V5KSB7CiAgLy8gU2hvcnRlbiBrZXksIGlmIG5lZWRlZAogIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpIGtleSA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KS5kaWdlc3QoKTsKICBhc3NlcnQoa2V5Lmxlbmd0aCA8PSB0aGlzLmJsb2NrU2l6ZSk7IC8vIEFkZCBwYWRkaW5nIHRvIGtleQoKICBmb3IgKHZhciBpID0ga2V5Lmxlbmd0aDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspIHsKICAgIGtleS5wdXNoKDApOwogIH0KCiAg
Zm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykgewogICAga2V5W2ldIF49IDB4MzY7CiAgfQoKICB0aGlzLmlubmVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpOyAvLyAweDM2IF4gMHg1YyA9IDB4NmEKCiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykgewogICAga2V5W2ldIF49IDB4NmE7CiAgfQoKICB0aGlzLm91dGVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpOwp9OwoKSG1hYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgZW5jKSB7CiAgdGhpcy5pbm5l
ci51cGRhdGUobXNnLCBlbmMpOwogIHJldHVybiB0aGlzOwp9OwoKSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykgewogIHRoaXMub3V0ZXIudXBkYXRlKHRoaXMuaW5uZXIuZGlnZXN0KCkpOwogIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpOwp9OwoKfSx7Ii4vdXRpbHMiOjI3NCwibWluaW1hbGlzdGljLWFzc2VydCI6MzI4fV0sMjY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpOwoKdmFy
IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7Cgp2YXIgcm90bDMyID0gdXRpbHMucm90bDMyOwp2YXIgc3VtMzIgPSB1dGlscy5zdW0zMjsKdmFyIHN1bTMyXzMgPSB1dGlscy5zdW0zMl8zOwp2YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7CnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoOwoKZnVuY3Rpb24gUklQRU1EMTYwKCkgewogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSSVBFTUQxNjApKSByZXR1cm4gbmV3IFJJUEVNRDE2MCgpOwogIEJsb2NrSGFzaC5jYWxsKHRoaXMpOwogIHRoaXMuaCA9IFsweDY3
NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTsKICB0aGlzLmVuZGlhbiA9ICdsaXR0bGUnOwp9Cgp1dGlscy5pbmhlcml0cyhSSVBFTUQxNjAsIEJsb2NrSGFzaCk7CmV4cG9ydHMucmlwZW1kMTYwID0gUklQRU1EMTYwOwpSSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyOwpSSVBFTUQxNjAub3V0U2l6ZSA9IDE2MDsKUklQRU1EMTYwLmhtYWNTdHJlbmd0aCA9IDE5MjsKUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0OwoKUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rp
b24gdXBkYXRlKG1zZywgc3RhcnQpIHsKICB2YXIgQSA9IHRoaXMuaFswXTsKICB2YXIgQiA9IHRoaXMuaFsxXTsKICB2YXIgQyA9IHRoaXMuaFsyXTsKICB2YXIgRCA9IHRoaXMuaFszXTsKICB2YXIgRSA9IHRoaXMuaFs0XTsKICB2YXIgQWggPSBBOwogIHZhciBCaCA9IEI7CiAgdmFyIENoID0gQzsKICB2YXIgRGggPSBEOwogIHZhciBFaCA9IEU7CgogIGZvciAodmFyIGogPSAwOyBqIDwgODA7IGorKykgewogICAgdmFyIFQgPSBzdW0zMihyb3RsMzIoc3VtMzJfNChBLCBmKGosIEIsIEMsIEQpLCBtc2dbcltqXSArIHN0YXJ0
XSwgSyhqKSksIHNbal0pLCBFKTsKICAgIEEgPSBFOwogICAgRSA9IEQ7CiAgICBEID0gcm90bDMyKEMsIDEwKTsKICAgIEMgPSBCOwogICAgQiA9IFQ7CiAgICBUID0gc3VtMzIocm90bDMyKHN1bTMyXzQoQWgsIGYoNzkgLSBqLCBCaCwgQ2gsIERoKSwgbXNnW3JoW2pdICsgc3RhcnRdLCBLaChqKSksIHNoW2pdKSwgRWgpOwogICAgQWggPSBFaDsKICAgIEVoID0gRGg7CiAgICBEaCA9IHJvdGwzMihDaCwgMTApOwogICAgQ2ggPSBCaDsKICAgIEJoID0gVDsKICB9CgogIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpOwog
IHRoaXMuaFsxXSA9IHN1bTMyXzModGhpcy5oWzJdLCBELCBFaCk7CiAgdGhpcy5oWzJdID0gc3VtMzJfMyh0aGlzLmhbM10sIEUsIEFoKTsKICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpOwogIHRoaXMuaFs0XSA9IHN1bTMyXzModGhpcy5oWzBdLCBCLCBDaCk7CiAgdGhpcy5oWzBdID0gVDsKfTsKClJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHsKICBpZiAoZW5jID09PSAnaGV4JykgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnbGl0dGxlJyk7ZWxz
ZSByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdsaXR0bGUnKTsKfTsKCmZ1bmN0aW9uIGYoaiwgeCwgeSwgeikgewogIGlmIChqIDw9IDE1KSByZXR1cm4geCBeIHkgXiB6O2Vsc2UgaWYgKGogPD0gMzEpIHJldHVybiB4ICYgeSB8IH54ICYgejtlbHNlIGlmIChqIDw9IDQ3KSByZXR1cm4gKHggfCB+eSkgXiB6O2Vsc2UgaWYgKGogPD0gNjMpIHJldHVybiB4ICYgeiB8IHkgJiB+ejtlbHNlIHJldHVybiB4IF4gKHkgfCB+eik7Cn0KCmZ1bmN0aW9uIEsoaikgewogIGlmIChqIDw9IDE1KSByZXR1cm4gMHgwMDAwMDAwMDtl
bHNlIGlmIChqIDw9IDMxKSByZXR1cm4gMHg1YTgyNzk5OTtlbHNlIGlmIChqIDw9IDQ3KSByZXR1cm4gMHg2ZWQ5ZWJhMTtlbHNlIGlmIChqIDw9IDYzKSByZXR1cm4gMHg4ZjFiYmNkYztlbHNlIHJldHVybiAweGE5NTNmZDRlOwp9CgpmdW5jdGlvbiBLaChqKSB7CiAgaWYgKGogPD0gMTUpIHJldHVybiAweDUwYTI4YmU2O2Vsc2UgaWYgKGogPD0gMzEpIHJldHVybiAweDVjNGRkMTI0O2Vsc2UgaWYgKGogPD0gNDcpIHJldHVybiAweDZkNzAzZWYzO2Vsc2UgaWYgKGogPD0gNjMpIHJldHVybiAweDdhNmQ3NmU5O2Vsc2UgcmV0
dXJuIDB4MDAwMDAwMDA7Cn0KCnZhciByID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNdOwp2
YXIgcmggPSBbNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMiwgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMiwgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMywgOCwgNiwgNCwgMSwgMywgMTEsIDE1LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCwgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMV07CnZhciBzID0gWzExLCAxNCwgMTUs
IDEyLCA1LCA4LCA3LCA5LCAxMSwgMTMsIDE0LCAxNSwgNiwgNywgOSwgOCwgNywgNiwgOCwgMTMsIDExLCA5LCA3LCAxNSwgNywgMTIsIDE1LCA5LCAxMSwgNywgMTMsIDEyLCAxMSwgMTMsIDYsIDcsIDE0LCA5LCAxMywgMTUsIDE0LCA4LCAxMywgNiwgNSwgMTIsIDcsIDUsIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsIDksIDgsIDksIDE0LCA1LCA2LCA4LCA2LCA1LCAxMiwgOSwgMTUsIDUsIDExLCA2LCA4LCAxMywgMTIsIDUsIDEyLCAxMywgMTQsIDExLCA4LCA1LCA2XTsKdmFyIHNoID0gWzgsIDksIDksIDExLCAxMywgMTUs
IDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNiwgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLCA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCwgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXTsKCn0seyIuL2NvbW1vbiI6MjY0LCIuL3V0aWxzIjoyNzR9XSwyNjc6
W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpleHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYS8xJyk7CmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEvMjI0Jyk7CmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEvMjU2Jyk7CmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEvMzg0Jyk7CmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGEvNTEyJyk7Cgp9LHsiLi9zaGEvMSI6MjY4LCIuL3NoYS8yMjQiOjI2OSwiLi9zaGEvMjU2IjoyNzAsIi4vc2hhLzM4
NCI6MjcxLCIuL3NoYS81MTIiOjI3Mn1dLDI2ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7Cgp2YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7Cgp2YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTsKCnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7CnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyOwp2YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7CnZhciBmdF8xID0gc2hhQ29tbW9uLmZ0XzE7CnZhciBC
bG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoOwp2YXIgc2hhMV9LID0gWzB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZdOwoKZnVuY3Rpb24gU0hBMSgpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMSkpIHJldHVybiBuZXcgU0hBMSgpOwogIEJsb2NrSGFzaC5jYWxsKHRoaXMpOwogIHRoaXMuaCA9IFsweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTsKICB0aGlzLlcgPSBuZXcgQXJyYXkoODApOwp9Cgp1dGlscy5pbmhlcml0
cyhTSEExLCBCbG9ja0hhc2gpOwptb2R1bGUuZXhwb3J0cyA9IFNIQTE7ClNIQTEuYmxvY2tTaXplID0gNTEyOwpTSEExLm91dFNpemUgPSAxNjA7ClNIQTEuaG1hY1N0cmVuZ3RoID0gODA7ClNIQTEucGFkTGVuZ3RoID0gNjQ7CgpTSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7CiAgdmFyIFcgPSB0aGlzLlc7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgV1tpXSA9IG1zZ1tzdGFydCArIGldOwogIH0KCiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSsrKSB7
CiAgICBXW2ldID0gcm90bDMyKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0sIDEpOwogIH0KCiAgdmFyIGEgPSB0aGlzLmhbMF07CiAgdmFyIGIgPSB0aGlzLmhbMV07CiAgdmFyIGMgPSB0aGlzLmhbMl07CiAgdmFyIGQgPSB0aGlzLmhbM107CiAgdmFyIGUgPSB0aGlzLmhbNF07CgogIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7CiAgICB2YXIgdCA9IHN1bTMyXzUocm90bDMyKGEsIDUpLCBmdF8xKHMsIGIsIGMsIGQpLCBlLCBXW2ldLCBz
aGExX0tbc10pOwogICAgZSA9IGQ7CiAgICBkID0gYzsKICAgIGMgPSByb3RsMzIoYiwgMzApOwogICAgYiA9IGE7CiAgICBhID0gdDsKICB9CgogIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7CiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTsKICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpOwogIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7CiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTsKfTsKClNIQTEucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdl
c3QoZW5jKSB7CiAgaWYgKGVuYyA9PT0gJ2hleCcpIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO2Vsc2UgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7Cn07Cgp9LHsiLi4vY29tbW9uIjoyNjQsIi4uL3V0aWxzIjoyNzQsIi4vY29tbW9uIjoyNzN9XSwyNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFyIFNIQTI1NiA9IHJlcXVpcmUoJy4vMjU2Jyk7CgpmdW5jdGlvbiBTSEEyMjQo
KSB7CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTIyNCkpIHJldHVybiBuZXcgU0hBMjI0KCk7CiAgU0hBMjU2LmNhbGwodGhpcyk7CiAgdGhpcy5oID0gWzB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTRdOwp9Cgp1dGlscy5pbmhlcml0cyhTSEEyMjQsIFNIQTI1Nik7Cm1vZHVsZS5leHBvcnRzID0gU0hBMjI0OwpTSEEyMjQuYmxvY2tTaXplID0gNTEyOwpTSEEyMjQub3V0U2l6ZSA9IDIyNDsKU0hBMjI0
LmhtYWNTdHJlbmd0aCA9IDE5MjsKU0hBMjI0LnBhZExlbmd0aCA9IDY0OwoKU0hBMjI0LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykgewogIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0CiAgaWYgKGVuYyA9PT0gJ2hleCcpIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO2Vsc2UgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7Cn07Cgp9LHsiLi4vdXRpbHMiOjI3NCwiLi8yNTYiOjI3MH1dLDI3MDpbZnVuY3Rpb24ocmVxdWly
ZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7Cgp2YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7Cgp2YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTsKCnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7Cgp2YXIgc3VtMzIgPSB1dGlscy5zdW0zMjsKdmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80Owp2YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7CnZhciBjaDMyID0gc2hhQ29tbW9uLmNoMzI7CnZh
ciBtYWozMiA9IHNoYUNvbW1vbi5tYWozMjsKdmFyIHMwXzI1NiA9IHNoYUNvbW1vbi5zMF8yNTY7CnZhciBzMV8yNTYgPSBzaGFDb21tb24uczFfMjU2Owp2YXIgZzBfMjU2ID0gc2hhQ29tbW9uLmcwXzI1NjsKdmFyIGcxXzI1NiA9IHNoYUNvbW1vbi5nMV8yNTY7CnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoOwp2YXIgc2hhMjU2X0sgPSBbMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSwgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSwgMHhk
ODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMywgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCwgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYywgMHgyZGU5MmM2ZiwgMHg0YTc0ODRhYSwgMHg1Y2IwYTlkYywgMHg3NmY5ODhkYSwgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNywgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NywgMHgyN2I3MGE4NSwgMHgy
ZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMywgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSwgMHhhMmJmZThhMSwgMHhhODFhNjY0YiwgMHhjMjRiOGI3MCwgMHhjNzZjNTFhMywgMHhkMTkyZTgxOSwgMHhkNjk5MDYyNCwgMHhmNDBlMzU4NSwgMHgxMDZhYTA3MCwgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSwgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMywgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4
NGM4NzgxNCwgMHg4Y2M3MDIwOCwgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMl07CgpmdW5jdGlvbiBTSEEyNTYoKSB7CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NikpIHJldHVybiBuZXcgU0hBMjU2KCk7CiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7CiAgdGhpcy5oID0gWzB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTldOwogIHRoaXMuayA9IHNoYTI1Nl9LOwog
IHRoaXMuVyA9IG5ldyBBcnJheSg2NCk7Cn0KCnV0aWxzLmluaGVyaXRzKFNIQTI1NiwgQmxvY2tIYXNoKTsKbW9kdWxlLmV4cG9ydHMgPSBTSEEyNTY7ClNIQTI1Ni5ibG9ja1NpemUgPSA1MTI7ClNIQTI1Ni5vdXRTaXplID0gMjU2OwpTSEEyNTYuaG1hY1N0cmVuZ3RoID0gMTkyOwpTSEEyNTYucGFkTGVuZ3RoID0gNjQ7CgpTSEEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHsKICB2YXIgVyA9IHRoaXMuVzsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7CiAgICBX
W2ldID0gbXNnW3N0YXJ0ICsgaV07CiAgfQoKICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpKyspIHsKICAgIFdbaV0gPSBzdW0zMl80KGcxXzI1NihXW2kgLSAyXSksIFdbaSAtIDddLCBnMF8yNTYoV1tpIC0gMTVdKSwgV1tpIC0gMTZdKTsKICB9CgogIHZhciBhID0gdGhpcy5oWzBdOwogIHZhciBiID0gdGhpcy5oWzFdOwogIHZhciBjID0gdGhpcy5oWzJdOwogIHZhciBkID0gdGhpcy5oWzNdOwogIHZhciBlID0gdGhpcy5oWzRdOwogIHZhciBmID0gdGhpcy5oWzVdOwogIHZhciBnID0gdGhpcy5oWzZdOwogIHZhciBoID0gdGhp
cy5oWzddOwogIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7CgogIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgVDEgPSBzdW0zMl81KGgsIHMxXzI1NihlKSwgY2gzMihlLCBmLCBnKSwgdGhpcy5rW2ldLCBXW2ldKTsKICAgIHZhciBUMiA9IHN1bTMyKHMwXzI1NihhKSwgbWFqMzIoYSwgYiwgYykpOwogICAgaCA9IGc7CiAgICBnID0gZjsKICAgIGYgPSBlOwogICAgZSA9IHN1bTMyKGQsIFQxKTsKICAgIGQgPSBjOwogICAgYyA9IGI7CiAgICBiID0gYTsKICAgIGEgPSBzdW0zMihU
MSwgVDIpOwogIH0KCiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTsKICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpOwogIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7CiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTsKICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpOwogIHRoaXMuaFs1XSA9IHN1bTMyKHRoaXMuaFs1XSwgZik7CiAgdGhpcy5oWzZdID0gc3VtMzIodGhpcy5oWzZdLCBnKTsKICB0aGlzLmhbN10gPSBzdW0zMih0aGlzLmhbN10sIGgpOwp9OwoKU0hB
MjU2LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykgewogIGlmIChlbmMgPT09ICdoZXgnKSByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpOwp9OwoKfSx7Ii4uL2NvbW1vbiI6MjY0LCIuLi91dGlscyI6Mjc0LCIuL2NvbW1vbiI6MjczLCJtaW5pbWFsaXN0aWMtYXNzZXJ0IjozMjh9XSwyNzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJl
KCcuLi91dGlscycpOwoKdmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vNTEyJyk7CgpmdW5jdGlvbiBTSEEzODQoKSB7CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTM4NCkpIHJldHVybiBuZXcgU0hBMzg0KCk7CiAgU0hBNTEyLmNhbGwodGhpcyk7CiAgdGhpcy5oID0gWzB4Y2JiYjlkNWQsIDB4YzEwNTllZDgsIDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcsIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsIDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzksIDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEsIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsIDB4
ZGIwYzJlMGQsIDB4NjRmOThmYTcsIDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTRdOwp9Cgp1dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7Cm1vZHVsZS5leHBvcnRzID0gU0hBMzg0OwpTSEEzODQuYmxvY2tTaXplID0gMTAyNDsKU0hBMzg0Lm91dFNpemUgPSAzODQ7ClNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7ClNIQTM4NC5wYWRMZW5ndGggPSAxMjg7CgpTSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7CiAgaWYgKGVuYyA9PT0gJ2hleCcpIHJldHVybiB1dGlscy50b0hleDMyKHRo
aXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTsKfTsKCn0seyIuLi91dGlscyI6Mjc0LCIuLzUxMiI6MjcyfV0sMjcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTsKCnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTsKCnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7Cgp2YXIgcm90cjY0X2hp
ID0gdXRpbHMucm90cjY0X2hpOwp2YXIgcm90cjY0X2xvID0gdXRpbHMucm90cjY0X2xvOwp2YXIgc2hyNjRfaGkgPSB1dGlscy5zaHI2NF9oaTsKdmFyIHNocjY0X2xvID0gdXRpbHMuc2hyNjRfbG87CnZhciBzdW02NCA9IHV0aWxzLnN1bTY0Owp2YXIgc3VtNjRfaGkgPSB1dGlscy5zdW02NF9oaTsKdmFyIHN1bTY0X2xvID0gdXRpbHMuc3VtNjRfbG87CnZhciBzdW02NF80X2hpID0gdXRpbHMuc3VtNjRfNF9oaTsKdmFyIHN1bTY0XzRfbG8gPSB1dGlscy5zdW02NF80X2xvOwp2YXIgc3VtNjRfNV9oaSA9IHV0aWxzLnN1bTY0
XzVfaGk7CnZhciBzdW02NF81X2xvID0gdXRpbHMuc3VtNjRfNV9sbzsKdmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7CnZhciBzaGE1MTJfSyA9IFsweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLCAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLCAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LCAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LCAweGQ4MDdhYTk4LCAweGEz
MDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLCAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLCAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLCAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LCAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLCAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LCAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRh
NzQ4NGFhLCAweDZlYTZlNDgzLCAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LCAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLCAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LCAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LCAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLCAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVj
MjZjOTI2LCAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLCAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LCAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLCAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLCAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLCAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLCAweGY0
MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LCAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLCAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LCAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLCAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLCAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLCAweDg0Yzg3ODE0LCAweGEx
ZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLCAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LCAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLCAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LCAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LCAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LCAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFi
NzEwYjM1LCAweDEzMWM0NzFiLCAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLCAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLCAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLCAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XTsKCmZ1bmN0aW9uIFNIQTUxMigpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBNTEyKSkgcmV0dXJuIG5ldyBTSEE1MTIoKTsKICBCbG9ja0hhc2gu
Y2FsbCh0aGlzKTsKICB0aGlzLmggPSBbMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCwgMHhiYjY3YWU4NSwgMHg4NGNhYTczYiwgMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYiwgMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSwgMHg1MTBlNTI3ZiwgMHhhZGU2ODJkMSwgMHg5YjA1Njg4YywgMHgyYjNlNmMxZiwgMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YiwgMHg1YmUwY2QxOSwgMHgxMzdlMjE3OV07CiAgdGhpcy5rID0gc2hhNTEyX0s7CiAgdGhpcy5XID0gbmV3IEFycmF5KDE2MCk7Cn0KCnV0aWxzLmluaGVyaXRzKFNIQTUxMiwgQmxvY2tIYXNo
KTsKbW9kdWxlLmV4cG9ydHMgPSBTSEE1MTI7ClNIQTUxMi5ibG9ja1NpemUgPSAxMDI0OwpTSEE1MTIub3V0U2l6ZSA9IDUxMjsKU0hBNTEyLmhtYWNTdHJlbmd0aCA9IDE5MjsKU0hBNTEyLnBhZExlbmd0aCA9IDEyODsKClNIQTUxMi5wcm90b3R5cGUuX3ByZXBhcmVCbG9jayA9IGZ1bmN0aW9uIF9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCkgewogIHZhciBXID0gdGhpcy5XOyAvLyAzMiB4IDMyYml0IHdvcmRzCgogIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykgewogICAgV1tpXSA9IG1zZ1tzdGFydCArIGldOwogIH0K
CiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7CiAgICB2YXIgYzBfaGkgPSBnMV81MTJfaGkoV1tpIC0gNF0sIFdbaSAtIDNdKTsgLy8gaSAtIDIKCiAgICB2YXIgYzBfbG8gPSBnMV81MTJfbG8oV1tpIC0gNF0sIFdbaSAtIDNdKTsKICAgIHZhciBjMV9oaSA9IFdbaSAtIDE0XTsgLy8gaSAtIDcKCiAgICB2YXIgYzFfbG8gPSBXW2kgLSAxM107CiAgICB2YXIgYzJfaGkgPSBnMF81MTJfaGkoV1tpIC0gMzBdLCBXW2kgLSAyOV0pOyAvLyBpIC0gMTUKCiAgICB2YXIgYzJfbG8gPSBnMF81MTJfbG8oV1tpIC0gMzBdLCBX
W2kgLSAyOV0pOwogICAgdmFyIGMzX2hpID0gV1tpIC0gMzJdOyAvLyBpIC0gMTYKCiAgICB2YXIgYzNfbG8gPSBXW2kgLSAzMV07CiAgICBXW2ldID0gc3VtNjRfNF9oaShjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbywgYzJfaGksIGMyX2xvLCBjM19oaSwgYzNfbG8pOwogICAgV1tpICsgMV0gPSBzdW02NF80X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvLCBjMl9oaSwgYzJfbG8sIGMzX2hpLCBjM19sbyk7CiAgfQp9OwoKU0hBNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0
KSB7CiAgdGhpcy5fcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpOwoKICB2YXIgVyA9IHRoaXMuVzsKICB2YXIgYWggPSB0aGlzLmhbMF07CiAgdmFyIGFsID0gdGhpcy5oWzFdOwogIHZhciBiaCA9IHRoaXMuaFsyXTsKICB2YXIgYmwgPSB0aGlzLmhbM107CiAgdmFyIGNoID0gdGhpcy5oWzRdOwogIHZhciBjbCA9IHRoaXMuaFs1XTsKICB2YXIgZGggPSB0aGlzLmhbNl07CiAgdmFyIGRsID0gdGhpcy5oWzddOwogIHZhciBlaCA9IHRoaXMuaFs4XTsKICB2YXIgZWwgPSB0aGlzLmhbOV07CiAgdmFyIGZoID0gdGhpcy5oWzEwXTsK
ICB2YXIgZmwgPSB0aGlzLmhbMTFdOwogIHZhciBnaCA9IHRoaXMuaFsxMl07CiAgdmFyIGdsID0gdGhpcy5oWzEzXTsKICB2YXIgaGggPSB0aGlzLmhbMTRdOwogIHZhciBobCA9IHRoaXMuaFsxNV07CiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7CiAgICB2YXIgYzBfaGkgPSBoaDsKICAgIHZhciBjMF9sbyA9IGhsOwogICAgdmFyIGMxX2hpID0gczFfNTEyX2hpKGVoLCBlbCk7CiAgICB2YXIgYzFfbG8gPSBzMV81MTJfbG8oZWgs
IGVsKTsKICAgIHZhciBjMl9oaSA9IGNoNjRfaGkoZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7CiAgICB2YXIgYzJfbG8gPSBjaDY0X2xvKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpOwogICAgdmFyIGMzX2hpID0gdGhpcy5rW2ldOwogICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTsKICAgIHZhciBjNF9oaSA9IFdbaV07CiAgICB2YXIgYzRfbG8gPSBXW2kgKyAxXTsKICAgIHZhciBUMV9oaSA9IHN1bTY0XzVfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8sIGMyX2hpLCBjMl9sbywgYzNfaGksIGMzX2xvLCBjNF9oaSwg
YzRfbG8pOwogICAgdmFyIFQxX2xvID0gc3VtNjRfNV9sbyhjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbywgYzJfaGksIGMyX2xvLCBjM19oaSwgYzNfbG8sIGM0X2hpLCBjNF9sbyk7CiAgICBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpOwogICAgYzBfbG8gPSBzMF81MTJfbG8oYWgsIGFsKTsKICAgIGMxX2hpID0gbWFqNjRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7CiAgICBjMV9sbyA9IG1hajY0X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpOwogICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBj
MV9oaSwgYzFfbG8pOwogICAgdmFyIFQyX2xvID0gc3VtNjRfbG8oYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pOwogICAgaGggPSBnaDsKICAgIGhsID0gZ2w7CiAgICBnaCA9IGZoOwogICAgZ2wgPSBmbDsKICAgIGZoID0gZWg7CiAgICBmbCA9IGVsOwogICAgZWggPSBzdW02NF9oaShkaCwgZGwsIFQxX2hpLCBUMV9sbyk7CiAgICBlbCA9IHN1bTY0X2xvKGRsLCBkbCwgVDFfaGksIFQxX2xvKTsKICAgIGRoID0gY2g7CiAgICBkbCA9IGNsOwogICAgY2ggPSBiaDsKICAgIGNsID0gYmw7CiAgICBiaCA9IGFoOwogICAgYmwg
PSBhbDsKICAgIGFoID0gc3VtNjRfaGkoVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pOwogICAgYWwgPSBzdW02NF9sbyhUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7CiAgfQoKICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7CiAgc3VtNjQodGhpcy5oLCAyLCBiaCwgYmwpOwogIHN1bTY0KHRoaXMuaCwgNCwgY2gsIGNsKTsKICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7CiAgc3VtNjQodGhpcy5oLCA4LCBlaCwgZWwpOwogIHN1bTY0KHRoaXMuaCwgMTAsIGZoLCBmbCk7CiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGds
KTsKICBzdW02NCh0aGlzLmgsIDE0LCBoaCwgaGwpOwp9OwoKU0hBNTEyLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykgewogIGlmIChlbmMgPT09ICdoZXgnKSByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpOwp9OwoKZnVuY3Rpb24gY2g2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHsKICB2YXIgciA9IHhoICYgeWggXiB+eGggJiB6aDsKICBpZiAociA8IDApIHIgKz0gMHgxMDAwMDAwMDA7CiAgcmV0dXJuIHI7
Cn0KCmZ1bmN0aW9uIGNoNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkgewogIHZhciByID0geGwgJiB5bCBeIH54bCAmIHpsOwogIGlmIChyIDwgMCkgciArPSAweDEwMDAwMDAwMDsKICByZXR1cm4gcjsKfQoKZnVuY3Rpb24gbWFqNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7CiAgdmFyIHIgPSB4aCAmIHloIF4geGggJiB6aCBeIHloICYgemg7CiAgaWYgKHIgPCAwKSByICs9IDB4MTAwMDAwMDAwOwogIHJldHVybiByOwp9CgpmdW5jdGlvbiBtYWo2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7CiAgdmFyIHIg
PSB4bCAmIHlsIF4geGwgJiB6bCBeIHlsICYgemw7CiAgaWYgKHIgPCAwKSByICs9IDB4MTAwMDAwMDAwOwogIHJldHVybiByOwp9CgpmdW5jdGlvbiBzMF81MTJfaGkoeGgsIHhsKSB7CiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMjgpOwogIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDIpOyAvLyAzNAoKICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA3KTsgLy8gMzkKCiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7CiAgaWYgKHIgPCAwKSByICs9IDB4MTAwMDAwMDAwOwogIHJldHVy
biByOwp9CgpmdW5jdGlvbiBzMF81MTJfbG8oeGgsIHhsKSB7CiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMjgpOwogIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDIpOyAvLyAzNAoKICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA3KTsgLy8gMzkKCiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87CiAgaWYgKHIgPCAwKSByICs9IDB4MTAwMDAwMDAwOwogIHJldHVybiByOwp9CgpmdW5jdGlvbiBzMV81MTJfaGkoeGgsIHhsKSB7CiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwg
MTQpOwogIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE4KTsKICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA5KTsgLy8gNDEKCiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7CiAgaWYgKHIgPCAwKSByICs9IDB4MTAwMDAwMDAwOwogIHJldHVybiByOwp9CgpmdW5jdGlvbiBzMV81MTJfbG8oeGgsIHhsKSB7CiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTQpOwogIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE4KTsKICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA5
KTsgLy8gNDEKCiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87CiAgaWYgKHIgPCAwKSByICs9IDB4MTAwMDAwMDAwOwogIHJldHVybiByOwp9CgpmdW5jdGlvbiBnMF81MTJfaGkoeGgsIHhsKSB7CiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMSk7CiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgOCk7CiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA3KTsKICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTsKICBpZiAociA8IDApIHIgKz0gMHgxMDAwMDAwMDA7CiAgcmV0dXJuIHI7
Cn0KCmZ1bmN0aW9uIGcwXzUxMl9sbyh4aCwgeGwpIHsKICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxKTsKICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCA4KTsKICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDcpOwogIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvOwogIGlmIChyIDwgMCkgciArPSAweDEwMDAwMDAwMDsKICByZXR1cm4gcjsKfQoKZnVuY3Rpb24gZzFfNTEyX2hpKHhoLCB4bCkgewogIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE5KTsKICB2YXIgYzFfaGkgPSBy
b3RyNjRfaGkoeGwsIHhoLCAyOSk7IC8vIDYxCgogIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNik7CiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7CiAgaWYgKHIgPCAwKSByICs9IDB4MTAwMDAwMDAwOwogIHJldHVybiByOwp9CgpmdW5jdGlvbiBnMV81MTJfbG8oeGgsIHhsKSB7CiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTkpOwogIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDI5KTsgLy8gNjEKCiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA2KTsKICB2YXIgciA9IGMw
X2xvIF4gYzFfbG8gXiBjMl9sbzsKICBpZiAociA8IDApIHIgKz0gMHgxMDAwMDAwMDA7CiAgcmV0dXJuIHI7Cn0KCn0seyIuLi9jb21tb24iOjI2NCwiLi4vdXRpbHMiOjI3NCwibWluaW1hbGlzdGljLWFzc2VydCI6MzI4fV0sMjczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTsKCnZhciByb3RyMzIgPSB1dGlscy5yb3RyMzI7CgpmdW5jdGlvbiBmdF8xKHMsIHgsIHksIHopIHsKICBpZiAocyA9PT0gMCkgcmV0dXJuIGNoMzIo
eCwgeSwgeik7CiAgaWYgKHMgPT09IDEgfHwgcyA9PT0gMykgcmV0dXJuIHAzMih4LCB5LCB6KTsKICBpZiAocyA9PT0gMikgcmV0dXJuIG1hajMyKHgsIHksIHopOwp9CgpleHBvcnRzLmZ0XzEgPSBmdF8xOwoKZnVuY3Rpb24gY2gzMih4LCB5LCB6KSB7CiAgcmV0dXJuIHggJiB5IF4gfnggJiB6Owp9CgpleHBvcnRzLmNoMzIgPSBjaDMyOwoKZnVuY3Rpb24gbWFqMzIoeCwgeSwgeikgewogIHJldHVybiB4ICYgeSBeIHggJiB6IF4geSAmIHo7Cn0KCmV4cG9ydHMubWFqMzIgPSBtYWozMjsKCmZ1bmN0aW9uIHAzMih4LCB5LCB6
KSB7CiAgcmV0dXJuIHggXiB5IF4gejsKfQoKZXhwb3J0cy5wMzIgPSBwMzI7CgpmdW5jdGlvbiBzMF8yNTYoeCkgewogIHJldHVybiByb3RyMzIoeCwgMikgXiByb3RyMzIoeCwgMTMpIF4gcm90cjMyKHgsIDIyKTsKfQoKZXhwb3J0cy5zMF8yNTYgPSBzMF8yNTY7CgpmdW5jdGlvbiBzMV8yNTYoeCkgewogIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTsKfQoKZXhwb3J0cy5zMV8yNTYgPSBzMV8yNTY7CgpmdW5jdGlvbiBnMF8yNTYoeCkgewogIHJldHVybiByb3RyMzIoeCwgNykg
XiByb3RyMzIoeCwgMTgpIF4geCA+Pj4gMzsKfQoKZXhwb3J0cy5nMF8yNTYgPSBnMF8yNTY7CgpmdW5jdGlvbiBnMV8yNTYoeCkgewogIHJldHVybiByb3RyMzIoeCwgMTcpIF4gcm90cjMyKHgsIDE5KSBeIHggPj4+IDEwOwp9CgpleHBvcnRzLmcxXzI1NiA9IGcxXzI1NjsKCn0seyIuLi91dGlscyI6Mjc0fV0sMjc0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUo
J2luaGVyaXRzJyk7CgpleHBvcnRzLmluaGVyaXRzID0gaW5oZXJpdHM7CgpmdW5jdGlvbiBpc1N1cnJvZ2F0ZVBhaXIobXNnLCBpKSB7CiAgaWYgKChtc2cuY2hhckNvZGVBdChpKSAmIDB4RkMwMCkgIT09IDB4RDgwMCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgaWYgKGkgPCAwIHx8IGkgKyAxID49IG1zZy5sZW5ndGgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiAobXNnLmNoYXJDb2RlQXQoaSArIDEpICYgMHhGQzAwKSA9PT0gMHhEQzAwOwp9CgpmdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7CiAg
aWYgKEFycmF5LmlzQXJyYXkobXNnKSkgcmV0dXJuIG1zZy5zbGljZSgpOwogIGlmICghbXNnKSByZXR1cm4gW107CiAgdmFyIHJlcyA9IFtdOwoKICBpZiAodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycpIHsKICAgIGlmICghZW5jKSB7CiAgICAgIC8vIEluc3BpcmVkIGJ5IHN0cmluZ1RvVXRmOEJ5dGVBcnJheSgpIGluIGNsb3N1cmUtbGlicmFyeSBieSBHb29nbGUKICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi84NTk4ZDg3MjQyYWY1OWFhYzIzMzI3MDc0MmM4OTg0ZTJiMmJk
YmUwL2Nsb3N1cmUvZ29vZy9jcnlwdC9jcnlwdC5qcyNMMTE3LUwxNDMKICAgICAgLy8gQXBhY2hlIExpY2Vuc2UgMi4wCiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL0xJQ0VOU0UKICAgICAgdmFyIHAgPSAwOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpOwoKICAgICAgICBpZiAoYyA8IDEyOCkgewogICAgICAgICAgcmVzW3ArK10gPSBjOwogICAgICAgIH0gZWxz
ZSBpZiAoYyA8IDIwNDgpIHsKICAgICAgICAgIHJlc1twKytdID0gYyA+PiA2IHwgMTkyOwogICAgICAgICAgcmVzW3ArK10gPSBjICYgNjMgfCAxMjg7CiAgICAgICAgfSBlbHNlIGlmIChpc1N1cnJvZ2F0ZVBhaXIobXNnLCBpKSkgewogICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzRkYpIDw8IDEwKSArIChtc2cuY2hhckNvZGVBdCgrK2kpICYgMHgwM0ZGKTsKICAgICAgICAgIHJlc1twKytdID0gYyA+PiAxOCB8IDI0MDsKICAgICAgICAgIHJlc1twKytdID0gYyA+PiAxMiAmIDYzIHwgMTI4OwogICAgICAgICAg
cmVzW3ArK10gPSBjID4+IDYgJiA2MyB8IDEyODsKICAgICAgICAgIHJlc1twKytdID0gYyAmIDYzIHwgMTI4OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNbcCsrXSA9IGMgPj4gMTIgfCAyMjQ7CiAgICAgICAgICByZXNbcCsrXSA9IGMgPj4gNiAmIDYzIHwgMTI4OwogICAgICAgICAgcmVzW3ArK10gPSBjICYgNjMgfCAxMjg7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHsKICAgICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsICcnKTsKICAgICAgaWYgKG1z
Zy5sZW5ndGggJSAyICE9PSAwKSBtc2cgPSAnMCcgKyBtc2c7CgogICAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKSB7CiAgICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTsKICAgICAgfQogICAgfQogIH0gZWxzZSB7CiAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7CiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7CiAgICB9CiAgfQoKICByZXR1cm4gcmVzOwp9CgpleHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5OwoKZnVuY3Rpb24gdG9IZXgobXNn
KSB7CiAgdmFyIHJlcyA9ICcnOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykgewogICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpOwogIH0KCiAgcmV0dXJuIHJlczsKfQoKZXhwb3J0cy50b0hleCA9IHRvSGV4OwoKZnVuY3Rpb24gaHRvbmwodykgewogIHZhciByZXMgPSB3ID4+PiAyNCB8IHcgPj4+IDggJiAweGZmMDAgfCB3IDw8IDggJiAweGZmMDAwMCB8ICh3ICYgMHhmZikgPDwgMjQ7CiAgcmV0dXJuIHJlcyA+Pj4gMDsKfQoKZXhwb3J0cy5odG9ubCA9IGh0b25sOwoKZnVuY3Rp
b24gdG9IZXgzMihtc2csIGVuZGlhbikgewogIHZhciByZXMgPSAnJzsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHsKICAgIHZhciB3ID0gbXNnW2ldOwogICAgaWYgKGVuZGlhbiA9PT0gJ2xpdHRsZScpIHcgPSBodG9ubCh3KTsKICAgIHJlcyArPSB6ZXJvOCh3LnRvU3RyaW5nKDE2KSk7CiAgfQoKICByZXR1cm4gcmVzOwp9CgpleHBvcnRzLnRvSGV4MzIgPSB0b0hleDMyOwoKZnVuY3Rpb24gemVybzIod29yZCkgewogIGlmICh3b3JkLmxlbmd0aCA9PT0gMSkgcmV0dXJuICcwJyArIHdvcmQ7ZWxz
ZSByZXR1cm4gd29yZDsKfQoKZXhwb3J0cy56ZXJvMiA9IHplcm8yOwoKZnVuY3Rpb24gemVybzgod29yZCkgewogIGlmICh3b3JkLmxlbmd0aCA9PT0gNykgcmV0dXJuICcwJyArIHdvcmQ7ZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDYpIHJldHVybiAnMDAnICsgd29yZDtlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNSkgcmV0dXJuICcwMDAnICsgd29yZDtlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNCkgcmV0dXJuICcwMDAwJyArIHdvcmQ7ZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDMpIHJldHVybiAnMDAwMDAnICsgd29y
ZDtlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMikgcmV0dXJuICcwMDAwMDAnICsgd29yZDtlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMSkgcmV0dXJuICcwMDAwMDAwJyArIHdvcmQ7ZWxzZSByZXR1cm4gd29yZDsKfQoKZXhwb3J0cy56ZXJvOCA9IHplcm84OwoKZnVuY3Rpb24gam9pbjMyKG1zZywgc3RhcnQsIGVuZCwgZW5kaWFuKSB7CiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0OwogIGFzc2VydChsZW4gJSA0ID09PSAwKTsKICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbiAvIDQpOwoKICBmb3IgKHZhciBpID0gMCwgayA9IHN0
YXJ0OyBpIDwgcmVzLmxlbmd0aDsgaSsrLCBrICs9IDQpIHsKICAgIHZhciB3OwogICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpIHcgPSBtc2dba10gPDwgMjQgfCBtc2dbayArIDFdIDw8IDE2IHwgbXNnW2sgKyAyXSA8PCA4IHwgbXNnW2sgKyAzXTtlbHNlIHcgPSBtc2dbayArIDNdIDw8IDI0IHwgbXNnW2sgKyAyXSA8PCAxNiB8IG1zZ1trICsgMV0gPDwgOCB8IG1zZ1trXTsKICAgIHJlc1tpXSA9IHcgPj4+IDA7CiAgfQoKICByZXR1cm4gcmVzOwp9CgpleHBvcnRzLmpvaW4zMiA9IGpvaW4zMjsKCmZ1bmN0aW9uIHNwbGl0MzIo
bXNnLCBlbmRpYW4pIHsKICB2YXIgcmVzID0gbmV3IEFycmF5KG1zZy5sZW5ndGggKiA0KTsKCiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrLCBrICs9IDQpIHsKICAgIHZhciBtID0gbXNnW2ldOwoKICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKSB7CiAgICAgIHJlc1trXSA9IG0gPj4+IDI0OwogICAgICByZXNbayArIDFdID0gbSA+Pj4gMTYgJiAweGZmOwogICAgICByZXNbayArIDJdID0gbSA+Pj4gOCAmIDB4ZmY7CiAgICAgIHJlc1trICsgM10gPSBtICYgMHhmZjsKICAgIH0gZWxzZSB7CiAg
ICAgIHJlc1trICsgM10gPSBtID4+PiAyNDsKICAgICAgcmVzW2sgKyAyXSA9IG0gPj4+IDE2ICYgMHhmZjsKICAgICAgcmVzW2sgKyAxXSA9IG0gPj4+IDggJiAweGZmOwogICAgICByZXNba10gPSBtICYgMHhmZjsKICAgIH0KICB9CgogIHJldHVybiByZXM7Cn0KCmV4cG9ydHMuc3BsaXQzMiA9IHNwbGl0MzI7CgpmdW5jdGlvbiByb3RyMzIodywgYikgewogIHJldHVybiB3ID4+PiBiIHwgdyA8PCAzMiAtIGI7Cn0KCmV4cG9ydHMucm90cjMyID0gcm90cjMyOwoKZnVuY3Rpb24gcm90bDMyKHcsIGIpIHsKICByZXR1cm4gdyA8
PCBiIHwgdyA+Pj4gMzIgLSBiOwp9CgpleHBvcnRzLnJvdGwzMiA9IHJvdGwzMjsKCmZ1bmN0aW9uIHN1bTMyKGEsIGIpIHsKICByZXR1cm4gYSArIGIgPj4+IDA7Cn0KCmV4cG9ydHMuc3VtMzIgPSBzdW0zMjsKCmZ1bmN0aW9uIHN1bTMyXzMoYSwgYiwgYykgewogIHJldHVybiBhICsgYiArIGMgPj4+IDA7Cn0KCmV4cG9ydHMuc3VtMzJfMyA9IHN1bTMyXzM7CgpmdW5jdGlvbiBzdW0zMl80KGEsIGIsIGMsIGQpIHsKICByZXR1cm4gYSArIGIgKyBjICsgZCA+Pj4gMDsKfQoKZXhwb3J0cy5zdW0zMl80ID0gc3VtMzJfNDsKCmZ1
bmN0aW9uIHN1bTMyXzUoYSwgYiwgYywgZCwgZSkgewogIHJldHVybiBhICsgYiArIGMgKyBkICsgZSA+Pj4gMDsKfQoKZXhwb3J0cy5zdW0zMl81ID0gc3VtMzJfNTsKCmZ1bmN0aW9uIHN1bTY0KGJ1ZiwgcG9zLCBhaCwgYWwpIHsKICB2YXIgYmggPSBidWZbcG9zXTsKICB2YXIgYmwgPSBidWZbcG9zICsgMV07CiAgdmFyIGxvID0gYWwgKyBibCA+Pj4gMDsKICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7CiAgYnVmW3Bvc10gPSBoaSA+Pj4gMDsKICBidWZbcG9zICsgMV0gPSBsbzsKfQoKZXhwb3J0cy5z
dW02NCA9IHN1bTY0OwoKZnVuY3Rpb24gc3VtNjRfaGkoYWgsIGFsLCBiaCwgYmwpIHsKICB2YXIgbG8gPSBhbCArIGJsID4+PiAwOwogIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDsKICByZXR1cm4gaGkgPj4+IDA7Cn0KCmV4cG9ydHMuc3VtNjRfaGkgPSBzdW02NF9oaTsKCmZ1bmN0aW9uIHN1bTY0X2xvKGFoLCBhbCwgYmgsIGJsKSB7CiAgdmFyIGxvID0gYWwgKyBibDsKICByZXR1cm4gbG8gPj4+IDA7Cn0KCmV4cG9ydHMuc3VtNjRfbG8gPSBzdW02NF9sbzsKCmZ1bmN0aW9uIHN1bTY0XzRfaGkoYWgs
IGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7CiAgdmFyIGNhcnJ5ID0gMDsKICB2YXIgbG8gPSBhbDsKICBsbyA9IGxvICsgYmwgPj4+IDA7CiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwOwogIGxvID0gbG8gKyBjbCA+Pj4gMDsKICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7CiAgbG8gPSBsbyArIGRsID4+PiAwOwogIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDsKICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGNhcnJ5OwogIHJldHVybiBoaSA+Pj4gMDsKfQoKZXhwb3J0cy5zdW02NF80X2hpID0gc3VtNjRf
NF9oaTsKCmZ1bmN0aW9uIHN1bTY0XzRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7CiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGw7CiAgcmV0dXJuIGxvID4+PiAwOwp9CgpleHBvcnRzLnN1bTY0XzRfbG8gPSBzdW02NF80X2xvOwoKZnVuY3Rpb24gc3VtNjRfNV9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkgewogIHZhciBjYXJyeSA9IDA7CiAgdmFyIGxvID0gYWw7CiAgbG8gPSBsbyArIGJsID4+PiAwOwogIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDsKICBsbyA9IGxv
ICsgY2wgPj4+IDA7CiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwOwogIGxvID0gbG8gKyBkbCA+Pj4gMDsKICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7CiAgbG8gPSBsbyArIGVsID4+PiAwOwogIGNhcnJ5ICs9IGxvIDwgZWwgPyAxIDogMDsKICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGVoICsgY2Fycnk7CiAgcmV0dXJuIGhpID4+PiAwOwp9CgpleHBvcnRzLnN1bTY0XzVfaGkgPSBzdW02NF81X2hpOwoKZnVuY3Rpb24gc3VtNjRfNV9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkg
ewogIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsICsgZWw7CiAgcmV0dXJuIGxvID4+PiAwOwp9CgpleHBvcnRzLnN1bTY0XzVfbG8gPSBzdW02NF81X2xvOwoKZnVuY3Rpb24gcm90cjY0X2hpKGFoLCBhbCwgbnVtKSB7CiAgdmFyIHIgPSBhbCA8PCAzMiAtIG51bSB8IGFoID4+PiBudW07CiAgcmV0dXJuIHIgPj4+IDA7Cn0KCmV4cG9ydHMucm90cjY0X2hpID0gcm90cjY0X2hpOwoKZnVuY3Rpb24gcm90cjY0X2xvKGFoLCBhbCwgbnVtKSB7CiAgdmFyIHIgPSBhaCA8PCAzMiAtIG51bSB8IGFsID4+PiBudW07CiAgcmV0dXJu
IHIgPj4+IDA7Cn0KCmV4cG9ydHMucm90cjY0X2xvID0gcm90cjY0X2xvOwoKZnVuY3Rpb24gc2hyNjRfaGkoYWgsIGFsLCBudW0pIHsKICByZXR1cm4gYWggPj4+IG51bTsKfQoKZXhwb3J0cy5zaHI2NF9oaSA9IHNocjY0X2hpOwoKZnVuY3Rpb24gc2hyNjRfbG8oYWgsIGFsLCBudW0pIHsKICB2YXIgciA9IGFoIDw8IDMyIC0gbnVtIHwgYWwgPj4+IG51bTsKICByZXR1cm4gciA+Pj4gMDsKfQoKZXhwb3J0cy5zaHI2NF9sbyA9IHNocjY0X2xvOwoKfSx7ImluaGVyaXRzIjoyNzgsIm1pbmltYWxpc3RpYy1hc3NlcnQiOjMyOH1d
LDI3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpOwoKdmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTsKCmZ1bmN0aW9uIEhtYWNEUkJHKG9wdGlvbnMpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hY0RSQkcpKSByZXR1cm4gbmV3IEhtYWNEUkJHKG9wdGlvbnMpOwogIHRoaXMuaGFzaCA9IG9wdGlvbnMu
aGFzaDsKICB0aGlzLnByZWRSZXNpc3QgPSAhIW9wdGlvbnMucHJlZFJlc2lzdDsKICB0aGlzLm91dExlbiA9IHRoaXMuaGFzaC5vdXRTaXplOwogIHRoaXMubWluRW50cm9weSA9IG9wdGlvbnMubWluRW50cm9weSB8fCB0aGlzLmhhc2guaG1hY1N0cmVuZ3RoOwogIHRoaXMuX3Jlc2VlZCA9IG51bGw7CiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IG51bGw7CiAgdGhpcy5LID0gbnVsbDsKICB0aGlzLlYgPSBudWxsOwogIHZhciBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShvcHRpb25zLmVudHJvcHksIG9wdGlvbnMuZW50cm9weUVu
YyB8fCAnaGV4Jyk7CiAgdmFyIG5vbmNlID0gdXRpbHMudG9BcnJheShvcHRpb25zLm5vbmNlLCBvcHRpb25zLm5vbmNlRW5jIHx8ICdoZXgnKTsKICB2YXIgcGVycyA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5wZXJzLCBvcHRpb25zLnBlcnNFbmMgfHwgJ2hleCcpOwogIGFzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSB0aGlzLm1pbkVudHJvcHkgLyA4LCAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7CgogIHRoaXMuX2luaXQoZW50cm9weSwgbm9uY2UsIHBlcnMp
Owp9Cgptb2R1bGUuZXhwb3J0cyA9IEhtYWNEUkJHOwoKSG1hY0RSQkcucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChlbnRyb3B5LCBub25jZSwgcGVycykgewogIHZhciBzZWVkID0gZW50cm9weS5jb25jYXQobm9uY2UpLmNvbmNhdChwZXJzKTsKICB0aGlzLksgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTsKICB0aGlzLlYgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLlYubGVuZ3RoOyBpKyspIHsKICAgIHRoaXMuS1tpXSA9IDB4MDA7CiAgICB0aGlz
LlZbaV0gPSAweDAxOwogIH0KCiAgdGhpcy5fdXBkYXRlKHNlZWQpOwoKICB0aGlzLl9yZXNlZWQgPSAxOwogIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSAweDEwMDAwMDAwMDAwMDA7IC8vIDJeNDgKfTsKCkhtYWNEUkJHLnByb3RvdHlwZS5faG1hYyA9IGZ1bmN0aW9uIGhtYWMoKSB7CiAgcmV0dXJuIG5ldyBoYXNoLmhtYWModGhpcy5oYXNoLCB0aGlzLkspOwp9OwoKSG1hY0RSQkcucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc2VlZCkgewogIHZhciBrbWFjID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYp
LnVwZGF0ZShbMHgwMF0pOwoKICBpZiAoc2VlZCkga21hYyA9IGttYWMudXBkYXRlKHNlZWQpOwogIHRoaXMuSyA9IGttYWMuZGlnZXN0KCk7CiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpOwogIGlmICghc2VlZCkgcmV0dXJuOwogIHRoaXMuSyA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS51cGRhdGUoWzB4MDFdKS51cGRhdGUoc2VlZCkuZGlnZXN0KCk7CiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpOwp9OwoKSG1hY0RSQkcucHJvdG90eXBl
LnJlc2VlZCA9IGZ1bmN0aW9uIHJlc2VlZChlbnRyb3B5LCBlbnRyb3B5RW5jLCBhZGQsIGFkZEVuYykgewogIC8vIE9wdGlvbmFsIGVudHJvcHkgZW5jCiAgaWYgKHR5cGVvZiBlbnRyb3B5RW5jICE9PSAnc3RyaW5nJykgewogICAgYWRkRW5jID0gYWRkOwogICAgYWRkID0gZW50cm9weUVuYzsKICAgIGVudHJvcHlFbmMgPSBudWxsOwogIH0KCiAgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkoZW50cm9weSwgZW50cm9weUVuYyk7CiAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyk7CiAgYXNzZXJ0KGVudHJvcHkubGVu
Z3RoID49IHRoaXMubWluRW50cm9weSAvIDgsICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTsKCiAgdGhpcy5fdXBkYXRlKGVudHJvcHkuY29uY2F0KGFkZCB8fCBbXSkpOwoKICB0aGlzLl9yZXNlZWQgPSAxOwp9OwoKSG1hY0RSQkcucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuLCBlbmMsIGFkZCwgYWRkRW5jKSB7CiAgaWYgKHRoaXMuX3Jlc2VlZCA+IHRoaXMucmVzZWVkSW50ZXJ2YWwpIHRocm93IG5ldyBFcnJvcignUmVzZWVk
IGlzIHJlcXVpcmVkJyk7IC8vIE9wdGlvbmFsIGVuY29kaW5nCgogIGlmICh0eXBlb2YgZW5jICE9PSAnc3RyaW5nJykgewogICAgYWRkRW5jID0gYWRkOwogICAgYWRkID0gZW5jOwogICAgZW5jID0gbnVsbDsKICB9IC8vIE9wdGlvbmFsIGFkZGl0aW9uYWwgZGF0YQoKCiAgaWYgKGFkZCkgewogICAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyB8fCAnaGV4Jyk7CgogICAgdGhpcy5fdXBkYXRlKGFkZCk7CiAgfQoKICB2YXIgdGVtcCA9IFtdOwoKICB3aGlsZSAodGVtcC5sZW5ndGggPCBsZW4pIHsKICAgIHRoaXMu
ViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTsKICAgIHRlbXAgPSB0ZW1wLmNvbmNhdCh0aGlzLlYpOwogIH0KCiAgdmFyIHJlcyA9IHRlbXAuc2xpY2UoMCwgbGVuKTsKCiAgdGhpcy5fdXBkYXRlKGFkZCk7CgogIHRoaXMuX3Jlc2VlZCsrOwogIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpOwp9OwoKfSx7Imhhc2guanMiOjI2MywibWluaW1hbGlzdGljLWFzc2VydCI6MzI4LCJtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzIjozMjl9XSwyNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9y
dHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykgewogIHZhciBlLCBtOwogIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxOwogIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxOwogIHZhciBlQmlhcyA9IGVNYXggPj4gMTsKICB2YXIgbkJpdHMgPSAtNzsKICB2YXIgaSA9IGlzTEUgPyBuQnl0ZXMgLSAxIDogMDsKICB2YXIgZCA9IGlzTEUgPyAtMSA6IDE7CiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV07CiAgaSArPSBk
OwogIGUgPSBzICYgKDEgPDwgLW5CaXRzKSAtIDE7CiAgcyA+Pj0gLW5CaXRzOwogIG5CaXRzICs9IGVMZW47CgogIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9CgogIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7CiAgZSA+Pj0gLW5CaXRzOwogIG5CaXRzICs9IG1MZW47CgogIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9CgogIGlmIChlID09PSAwKSB7
CiAgICBlID0gMSAtIGVCaWFzOwogIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkgewogICAgcmV0dXJuIG0gPyBOYU4gOiAocyA/IC0xIDogMSkgKiBJbmZpbml0eTsKICB9IGVsc2UgewogICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKTsKICAgIGUgPSBlIC0gZUJpYXM7CiAgfQoKICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKTsKfTsKCmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHsKICB2YXIgZSwgbSwgYzsK
ICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTsKICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTsKICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7CiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDA7CiAgdmFyIGkgPSBpc0xFID8gMCA6IG5CeXRlcyAtIDE7CiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xOwogIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDsKICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVl
KTsKCiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHsKICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMDsKICAgIGUgPSBlTWF4OwogIH0gZWxzZSB7CiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMik7CgogICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkgewogICAgICBlLS07CiAgICAgIGMgKj0gMjsKICAgIH0KCiAgICBpZiAoZSArIGVCaWFzID49IDEpIHsKICAgICAgdmFsdWUgKz0gcnQgLyBjOwogICAgfSBlbHNlIHsKICAgICAgdmFs
dWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpOwogICAgfQoKICAgIGlmICh2YWx1ZSAqIGMgPj0gMikgewogICAgICBlKys7CiAgICAgIGMgLz0gMjsKICAgIH0KCiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHsKICAgICAgbSA9IDA7CiAgICAgIGUgPSBlTWF4OwogICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkgewogICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7CiAgICAgIGUgPSBlICsgZUJpYXM7CiAgICB9IGVsc2UgewogICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygy
LCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7CiAgICAgIGUgPSAwOwogICAgfQogIH0KCiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge30KCiAgZSA9IGUgPDwgbUxlbiB8IG07CiAgZUxlbiArPSBtTGVuOwoKICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9CgogIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODsK
fTsKCn0se31dLDI3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIE11dGF0aW9uID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7CnZhciBzY2hlZHVsZURyYWluOwp7CiAgaWYgKE11dGF0aW9uKSB7CiAgICB2YXIgY2FsbGVkID0gMDsKICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbihuZXh0VGljayk7CiAgICB2YXIgZWxlbWVudCA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVU
ZXh0Tm9kZSgnJyk7CiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHsKICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZQogICAgfSk7CgogICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uIHNjaGVkdWxlRHJhaW4oKSB7CiAgICAgIGVsZW1lbnQuZGF0YSA9IGNhbGxlZCA9ICsrY2FsbGVkICUgMjsKICAgIH07CiAgfSBlbHNlIGlmICghZ2xvYmFsLnNldEltbWVkaWF0ZSAmJiB0eXBlb2YgZ2xvYmFsLk1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJykgewogICAgdmFyIGNoYW5uZWwgPSBuZXcgZ2xvYmFsLk1lc3NhZ2VD
aGFubmVsKCk7CiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IG5leHRUaWNrOwoKICAgIHNjaGVkdWxlRHJhaW4gPSBmdW5jdGlvbiBzY2hlZHVsZURyYWluKCkgewogICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApOwogICAgfTsKICB9IGVsc2UgaWYgKCdkb2N1bWVudCcgaW4gZ2xvYmFsICYmICdvbnJlYWR5c3RhdGVjaGFuZ2UnIGluIGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkgewogICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uIHNjaGVkdWxlRHJhaW4oKSB7CiAgICAgIC8v
IENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZAogICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLgogICAgICB2YXIgc2NyaXB0RWwgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CgogICAgICBzY3JpcHRFbC5vbnJlYWR5c3RhdGVj
aGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgbmV4dFRpY2soKTsKICAgICAgICBzY3JpcHRFbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsOwogICAgICAgIHNjcmlwdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0RWwpOwogICAgICAgIHNjcmlwdEVsID0gbnVsbDsKICAgICAgfTsKCiAgICAgIGdsb2JhbC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoc2NyaXB0RWwpOwogICAgfTsKICB9IGVsc2UgewogICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uIHNjaGVkdWxlRHJhaW4oKSB7CiAg
ICAgIHNldFRpbWVvdXQobmV4dFRpY2ssIDApOwogICAgfTsKICB9Cn0KdmFyIGRyYWluaW5nOwp2YXIgcXVldWUgPSBbXTsgLy9uYW1lZCBuZXh0VGljayBmb3IgbGVzcyBjb25mdXNpbmcgc3RhY2sgdHJhY2VzCgpmdW5jdGlvbiBuZXh0VGljaygpIHsKICBkcmFpbmluZyA9IHRydWU7CiAgdmFyIGksIG9sZFF1ZXVlOwogIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7CgogIHdoaWxlIChsZW4pIHsKICAgIG9sZFF1ZXVlID0gcXVldWU7CiAgICBxdWV1ZSA9IFtdOwogICAgaSA9IC0xOwoKICAgIHdoaWxlICgrK2kgPCBsZW4pIHsK
ICAgICAgb2xkUXVldWVbaV0oKTsKICAgIH0KCiAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgfQoKICBkcmFpbmluZyA9IGZhbHNlOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGltbWVkaWF0ZTsKCmZ1bmN0aW9uIGltbWVkaWF0ZSh0YXNrKSB7CiAgaWYgKHF1ZXVlLnB1c2godGFzaykgPT09IDEgJiYgIWRyYWluaW5nKSB7CiAgICBzY2hlZHVsZURyYWluKCk7CiAgfQp9Cgp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDog
dHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0se31dLDI3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykgewogIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlCiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICAgIGlmIChzdXBlckN0b3IpIHsKICAgICAgY3Rvci5zdXBlcl8g
PSBzdXBlckN0b3I7CiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7CiAgICAgICAgY29uc3RydWN0b3I6IHsKICAgICAgICAgIHZhbHVlOiBjdG9yLAogICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsCiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfTsKfSBlbHNlIHsKICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2VycwogIG1vZHVsZS5leHBvcnRzID0g
ZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7CiAgICBpZiAoc3VwZXJDdG9yKSB7CiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yOwoKICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gVGVtcEN0b3IoKSB7fTsKCiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7CiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7CiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjsKICAgIH0KICB9Owp9Cgp9LHt9XSwyNzk6W2Z1bmN0aW9uKHJl
cXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovKiEKICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlcgogKgogKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPgogKiBAbGljZW5zZSAgTUlUCiAqLwovLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nCi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkKbW9kdWxlLmV4cG9ydHMg
PSBmdW5jdGlvbiAob2JqKSB7CiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcik7Cn07CgpmdW5jdGlvbiBpc0J1ZmZlcihvYmopIHsKICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKTsKfSAvLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LgoKCmZ1bmN0
aW9uIGlzU2xvd0J1ZmZlcihvYmopIHsKICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSk7Cn0KCn0se31dLDI4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nOwoKbW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHsKICByZXR1cm4gdG9TdHJpbmcuY2Fs
bChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7Cn07Cgp9LHt9XSwyODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7Cgp2YXIgc3VwcG9ydCA9IHJlcXVpcmUoJy4vc3VwcG9ydCcpOyAvLyBwcml2YXRlIHByb3BlcnR5CgoKdmFyIF9rZXlTdHIgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0iOyAvLyBwdWJsaWMgbWV0aG9kIGZvciBlbmNvZGluZwoKZXhw
b3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQpIHsKICB2YXIgb3V0cHV0ID0gW107CiAgdmFyIGNocjEsIGNocjIsIGNocjMsIGVuYzEsIGVuYzIsIGVuYzMsIGVuYzQ7CiAgdmFyIGkgPSAwLAogICAgICBsZW4gPSBpbnB1dC5sZW5ndGgsCiAgICAgIHJlbWFpbmluZ0J5dGVzID0gbGVuOwogIHZhciBpc0FycmF5ID0gdXRpbHMuZ2V0VHlwZU9mKGlucHV0KSAhPT0gInN0cmluZyI7CgogIHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKSB7CiAgICByZW1haW5pbmdCeXRlcyA9IGxlbiAtIGk7CgogICAgaWYgKCFpc0FycmF5KSB7
CiAgICAgIGNocjEgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7CiAgICAgIGNocjIgPSBpIDwgbGVuID8gaW5wdXQuY2hhckNvZGVBdChpKyspIDogMDsKICAgICAgY2hyMyA9IGkgPCBsZW4gPyBpbnB1dC5jaGFyQ29kZUF0KGkrKykgOiAwOwogICAgfSBlbHNlIHsKICAgICAgY2hyMSA9IGlucHV0W2krK107CiAgICAgIGNocjIgPSBpIDwgbGVuID8gaW5wdXRbaSsrXSA6IDA7CiAgICAgIGNocjMgPSBpIDwgbGVuID8gaW5wdXRbaSsrXSA6IDA7CiAgICB9CgogICAgZW5jMSA9IGNocjEgPj4gMjsKICAgIGVuYzIgPSAoY2hyMSAm
IDMpIDw8IDQgfCBjaHIyID4+IDQ7CiAgICBlbmMzID0gcmVtYWluaW5nQnl0ZXMgPiAxID8gKGNocjIgJiAxNSkgPDwgMiB8IGNocjMgPj4gNiA6IDY0OwogICAgZW5jNCA9IHJlbWFpbmluZ0J5dGVzID4gMiA/IGNocjMgJiA2MyA6IDY0OwogICAgb3V0cHV0LnB1c2goX2tleVN0ci5jaGFyQXQoZW5jMSkgKyBfa2V5U3RyLmNoYXJBdChlbmMyKSArIF9rZXlTdHIuY2hhckF0KGVuYzMpICsgX2tleVN0ci5jaGFyQXQoZW5jNCkpOwogIH0KCiAgcmV0dXJuIG91dHB1dC5qb2luKCIiKTsKfTsgLy8gcHVibGljIG1ldGhvZCBmb3Ig
ZGVjb2RpbmcKCgpleHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkgewogIHZhciBjaHIxLCBjaHIyLCBjaHIzOwogIHZhciBlbmMxLCBlbmMyLCBlbmMzLCBlbmM0OwogIHZhciBpID0gMCwKICAgICAgcmVzdWx0SW5kZXggPSAwOwogIHZhciBkYXRhVXJsUHJlZml4ID0gImRhdGE6IjsKCiAgaWYgKGlucHV0LnN1YnN0cigwLCBkYXRhVXJsUHJlZml4Lmxlbmd0aCkgPT09IGRhdGFVcmxQcmVmaXgpIHsKICAgIC8vIFRoaXMgaXMgYSBjb21tb24gZXJyb3I6IHBlb3BsZSBnaXZlIGEgZGF0YSB1cmwKICAgIC8vIChkYXRh
OmltYWdlL3BuZztiYXNlNjQsaVZCT1IuLi4pIHdpdGggYSB7YmFzZTY0OiB0cnVlfSBhbmQKICAgIC8vIHdvbmRlcnMgd2h5IHRoaW5ncyBkb24ndCB3b3JrLgogICAgLy8gV2UgY2FuIGRldGVjdCB0aGF0IHRoZSBzdHJpbmcgaW5wdXQgbG9va3MgbGlrZSBhIGRhdGEgdXJsIGJ1dCB3ZQogICAgLy8gKmNhbid0KiBiZSBzdXJlIGl0IGlzIG9uZTogcmVtb3ZpbmcgZXZlcnl0aGluZyB1cCB0byB0aGUgY29tbWEgd291bGQKICAgIC8vIGJlIHRvbyBkYW5nZXJvdXMuCiAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgYmFzZTY0
IGlucHV0LCBpdCBsb29rcyBsaWtlIGEgZGF0YSB1cmwuIik7CiAgfQoKICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XCtcL1w9XS9nLCAiIik7CiAgdmFyIHRvdGFsTGVuZ3RoID0gaW5wdXQubGVuZ3RoICogMyAvIDQ7CgogIGlmIChpbnB1dC5jaGFyQXQoaW5wdXQubGVuZ3RoIC0gMSkgPT09IF9rZXlTdHIuY2hhckF0KDY0KSkgewogICAgdG90YWxMZW5ndGgtLTsKICB9CgogIGlmIChpbnB1dC5jaGFyQXQoaW5wdXQubGVuZ3RoIC0gMikgPT09IF9rZXlTdHIuY2hhckF0KDY0KSkgewogICAgdG90YWxMZW5n
dGgtLTsKICB9CgogIGlmICh0b3RhbExlbmd0aCAlIDEgIT09IDApIHsKICAgIC8vIHRvdGFsTGVuZ3RoIGlzIG5vdCBhbiBpbnRlZ2VyLCB0aGUgbGVuZ3RoIGRvZXMgbm90IG1hdGNoIGEgdmFsaWQKICAgIC8vIGJhc2U2NCBjb250ZW50LiBUaGF0IGNhbiBoYXBwZW4gaWY6CiAgICAvLyAtIHRoZSBpbnB1dCBpcyBub3QgYSBiYXNlNjQgY29udGVudAogICAgLy8gLSB0aGUgaW5wdXQgaXMgKmFsbW9zdCogYSBiYXNlNjQgY29udGVudCwgd2l0aCBhIGV4dHJhIGNoYXJzIGF0IHRoZQogICAgLy8gICBiZWdpbm5pbmcgb3IgYXQg
dGhlIGVuZAogICAgLy8gLSB0aGUgaW5wdXQgdXNlcyBhIGJhc2U2NCB2YXJpYW50IChiYXNlNjR1cmwgZm9yIGV4YW1wbGUpCiAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgYmFzZTY0IGlucHV0LCBiYWQgY29udGVudCBsZW5ndGguIik7CiAgfQoKICB2YXIgb3V0cHV0OwoKICBpZiAoc3VwcG9ydC51aW50OGFycmF5KSB7CiAgICBvdXRwdXQgPSBuZXcgVWludDhBcnJheSh0b3RhbExlbmd0aCB8IDApOwogIH0gZWxzZSB7CiAgICBvdXRwdXQgPSBuZXcgQXJyYXkodG90YWxMZW5ndGggfCAwKTsKICB9CgogIHdoaWxlIChp
IDwgaW5wdXQubGVuZ3RoKSB7CiAgICBlbmMxID0gX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTsKICAgIGVuYzIgPSBfa2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpOwogICAgZW5jMyA9IF9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7CiAgICBlbmM0ID0gX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTsKICAgIGNocjEgPSBlbmMxIDw8IDIgfCBlbmMyID4+IDQ7CiAgICBjaHIyID0gKGVuYzIgJiAxNSkgPDwgNCB8IGVuYzMgPj4gMjsKICAgIGNocjMgPSAoZW5jMyAm
IDMpIDw8IDYgfCBlbmM0OwogICAgb3V0cHV0W3Jlc3VsdEluZGV4KytdID0gY2hyMTsKCiAgICBpZiAoZW5jMyAhPT0gNjQpIHsKICAgICAgb3V0cHV0W3Jlc3VsdEluZGV4KytdID0gY2hyMjsKICAgIH0KCiAgICBpZiAoZW5jNCAhPT0gNjQpIHsKICAgICAgb3V0cHV0W3Jlc3VsdEluZGV4KytdID0gY2hyMzsKICAgIH0KICB9CgogIHJldHVybiBvdXRwdXQ7Cn07Cgp9LHsiLi9zdXBwb3J0IjozMTAsIi4vdXRpbHMiOjMxMn1dLDI4MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZh
ciBleHRlcm5hbCA9IHJlcXVpcmUoIi4vZXh0ZXJuYWwiKTsKCnZhciBEYXRhV29ya2VyID0gcmVxdWlyZSgnLi9zdHJlYW0vRGF0YVdvcmtlcicpOwoKdmFyIERhdGFMZW5ndGhQcm9iZSA9IHJlcXVpcmUoJy4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZScpOwoKdmFyIENyYzMyUHJvYmUgPSByZXF1aXJlKCcuL3N0cmVhbS9DcmMzMlByb2JlJyk7Cgp2YXIgRGF0YUxlbmd0aFByb2JlID0gcmVxdWlyZSgnLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlJyk7Ci8qKgogKiBSZXByZXNlbnQgYSBjb21wcmVzc2VkIG9iamVjdCwgd2l0aCBl
dmVyeXRoaW5nIG5lZWRlZCB0byBkZWNvbXByZXNzIGl0LgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtudW1iZXJ9IGNvbXByZXNzZWRTaXplIHRoZSBzaXplIG9mIHRoZSBkYXRhIGNvbXByZXNzZWQuCiAqIEBwYXJhbSB7bnVtYmVyfSB1bmNvbXByZXNzZWRTaXplIHRoZSBzaXplIG9mIHRoZSBkYXRhIGFmdGVyIGRlY29tcHJlc3Npb24uCiAqIEBwYXJhbSB7bnVtYmVyfSBjcmMzMiB0aGUgY3JjMzIgb2YgdGhlIGRlY29tcHJlc3NlZCBmaWxlLgogKiBAcGFyYW0ge29iamVjdH0gY29tcHJlc3Npb24gdGhlIHR5cGUgb2Yg
Y29tcHJlc3Npb24sIHNlZSBsaWIvY29tcHJlc3Npb25zLmpzLgogKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gZGF0YSB0aGUgY29tcHJlc3NlZCBkYXRhLgogKi8KCgpmdW5jdGlvbiBDb21wcmVzc2VkT2JqZWN0KGNvbXByZXNzZWRTaXplLCB1bmNvbXByZXNzZWRTaXplLCBjcmMzMiwgY29tcHJlc3Npb24sIGRhdGEpIHsKICB0aGlzLmNvbXByZXNzZWRTaXplID0gY29tcHJlc3NlZFNpemU7CiAgdGhpcy51bmNvbXByZXNzZWRTaXplID0gdW5jb21wcmVzc2VkU2l6ZTsKICB0aGlzLmNy
YzMyID0gY3JjMzI7CiAgdGhpcy5jb21wcmVzc2lvbiA9IGNvbXByZXNzaW9uOwogIHRoaXMuY29tcHJlc3NlZENvbnRlbnQgPSBkYXRhOwp9CgpDb21wcmVzc2VkT2JqZWN0LnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBDcmVhdGUgYSB3b3JrZXIgdG8gZ2V0IHRoZSB1bmNvbXByZXNzZWQgY29udGVudC4KICAgKiBAcmV0dXJuIHtHZW5lcmljV29ya2VyfSB0aGUgd29ya2VyLgogICAqLwogIGdldENvbnRlbnRXb3JrZXI6IGZ1bmN0aW9uIGdldENvbnRlbnRXb3JrZXIoKSB7CiAgICB2YXIgd29ya2VyID0gbmV3IERhdGFXb3Jr
ZXIoZXh0ZXJuYWwuUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS5waXBlKHRoaXMuY29tcHJlc3Npb24udW5jb21wcmVzc1dvcmtlcigpKS5waXBlKG5ldyBEYXRhTGVuZ3RoUHJvYmUoImRhdGFfbGVuZ3RoIikpOwogICAgdmFyIHRoYXQgPSB0aGlzOwogICAgd29ya2VyLm9uKCJlbmQiLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICh0aGlzLnN0cmVhbUluZm9bJ2RhdGFfbGVuZ3RoJ10gIT09IHRoYXQudW5jb21wcmVzc2VkU2l6ZSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQnVnIDogdW5jb21w
cmVzc2VkIGRhdGEgc2l6ZSBtaXNtYXRjaCIpOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiB3b3JrZXI7CiAgfSwKCiAgLyoqCiAgICogQ3JlYXRlIGEgd29ya2VyIHRvIGdldCB0aGUgY29tcHJlc3NlZCBjb250ZW50LgogICAqIEByZXR1cm4ge0dlbmVyaWNXb3JrZXJ9IHRoZSB3b3JrZXIuCiAgICovCiAgZ2V0Q29tcHJlc3NlZFdvcmtlcjogZnVuY3Rpb24gZ2V0Q29tcHJlc3NlZFdvcmtlcigpIHsKICAgIHJldHVybiBuZXcgRGF0YVdvcmtlcihleHRlcm5hbC5Qcm9taXNlLnJlc29sdmUodGhpcy5jb21wcmVzc2VkQ29u
dGVudCkpLndpdGhTdHJlYW1JbmZvKCJjb21wcmVzc2VkU2l6ZSIsIHRoaXMuY29tcHJlc3NlZFNpemUpLndpdGhTdHJlYW1JbmZvKCJ1bmNvbXByZXNzZWRTaXplIiwgdGhpcy51bmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbygiY3JjMzIiLCB0aGlzLmNyYzMyKS53aXRoU3RyZWFtSW5mbygiY29tcHJlc3Npb24iLCB0aGlzLmNvbXByZXNzaW9uKTsKICB9Cn07Ci8qKgogKiBDaGFpbiB0aGUgZ2l2ZW4gd29ya2VyIHdpdGggb3RoZXIgd29ya2VycyB0byBjb21wcmVzcyB0aGUgY29udGVudCB3aXRoIHRoZQogKiBnaXZl
biBjb21wcmVzc2lvbi4KICogQHBhcmFtIHtHZW5lcmljV29ya2VyfSB1bmNvbXByZXNzZWRXb3JrZXIgdGhlIHdvcmtlciB0byBwaXBlLgogKiBAcGFyYW0ge09iamVjdH0gY29tcHJlc3Npb24gdGhlIGNvbXByZXNzaW9uIG9iamVjdC4KICogQHBhcmFtIHtPYmplY3R9IGNvbXByZXNzaW9uT3B0aW9ucyB0aGUgb3B0aW9ucyB0byB1c2Ugd2hlbiBjb21wcmVzc2luZy4KICogQHJldHVybiB7R2VuZXJpY1dvcmtlcn0gdGhlIG5ldyB3b3JrZXIgY29tcHJlc3NpbmcgdGhlIGNvbnRlbnQuCiAqLwoKQ29tcHJlc3NlZE9iamVjdC5j
cmVhdGVXb3JrZXJGcm9tID0gZnVuY3Rpb24gKHVuY29tcHJlc3NlZFdvcmtlciwgY29tcHJlc3Npb24sIGNvbXByZXNzaW9uT3B0aW9ucykgewogIHJldHVybiB1bmNvbXByZXNzZWRXb3JrZXIucGlwZShuZXcgQ3JjMzJQcm9iZSgpKS5waXBlKG5ldyBEYXRhTGVuZ3RoUHJvYmUoInVuY29tcHJlc3NlZFNpemUiKSkucGlwZShjb21wcmVzc2lvbi5jb21wcmVzc1dvcmtlcihjb21wcmVzc2lvbk9wdGlvbnMpKS5waXBlKG5ldyBEYXRhTGVuZ3RoUHJvYmUoImNvbXByZXNzZWRTaXplIikpLndpdGhTdHJlYW1JbmZvKCJjb21wcmVz
c2lvbiIsIGNvbXByZXNzaW9uKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gQ29tcHJlc3NlZE9iamVjdDsKCn0seyIuL2V4dGVybmFsIjoyODYsIi4vc3RyZWFtL0NyYzMyUHJvYmUiOjMwNSwiLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlIjozMDYsIi4vc3RyZWFtL0RhdGFXb3JrZXIiOjMwN31dLDI4MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBHZW5lcmljV29ya2VyID0gcmVxdWlyZSgiLi9zdHJlYW0vR2VuZXJpY1dvcmtlciIpOwoKZXhwb3J0cy5TVE9SRSA9IHsKICBtYWdp
YzogIlx4MDBceDAwIiwKICBjb21wcmVzc1dvcmtlcjogZnVuY3Rpb24gY29tcHJlc3NXb3JrZXIoY29tcHJlc3Npb25PcHRpb25zKSB7CiAgICByZXR1cm4gbmV3IEdlbmVyaWNXb3JrZXIoIlNUT1JFIGNvbXByZXNzaW9uIik7CiAgfSwKICB1bmNvbXByZXNzV29ya2VyOiBmdW5jdGlvbiB1bmNvbXByZXNzV29ya2VyKCkgewogICAgcmV0dXJuIG5ldyBHZW5lcmljV29ya2VyKCJTVE9SRSBkZWNvbXByZXNzaW9uIik7CiAgfQp9OwpleHBvcnRzLkRFRkxBVEUgPSByZXF1aXJlKCcuL2ZsYXRlJyk7Cgp9LHsiLi9mbGF0ZSI6Mjg3
LCIuL3N0cmVhbS9HZW5lcmljV29ya2VyIjozMDh9XSwyODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7Ci8qKgogKiBUaGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBjb21lIGZyb20gcGFrbywgZnJvbSBwYWtvL2xpYi96bGliL2NyYzMyLmpzCiAqIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSwgc2VlIHBha28gaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvLwogKi8KLy8gVXNlIG9yZGluYXJ5IGFycmF5LCBzaW5j
ZSB1bnR5cGVkIG1ha2VzIG5vIGJvb3N0IGhlcmUKCgpmdW5jdGlvbiBtYWtlVGFibGUoKSB7CiAgdmFyIGMsCiAgICAgIHRhYmxlID0gW107CgogIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHsKICAgIGMgPSBuOwoKICAgIGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7CiAgICAgIGMgPSBjICYgMSA/IDB4RURCODgzMjAgXiBjID4+PiAxIDogYyA+Pj4gMTsKICAgIH0KCiAgICB0YWJsZVtuXSA9IGM7CiAgfQoKICByZXR1cm4gdGFibGU7Cn0gLy8gQ3JlYXRlIHRhYmxlIG9uIGxvYWQuIEp1c3QgMjU1IHNpZ25l
ZCBsb25ncy4gTm90IGEgcHJvYmxlbS4KCgp2YXIgY3JjVGFibGUgPSBtYWtlVGFibGUoKTsKCmZ1bmN0aW9uIGNyYzMyKGNyYywgYnVmLCBsZW4sIHBvcykgewogIHZhciB0ID0gY3JjVGFibGUsCiAgICAgIGVuZCA9IHBvcyArIGxlbjsKICBjcmMgPSBjcmMgXiAtMTsKCiAgZm9yICh2YXIgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7CiAgICBjcmMgPSBjcmMgPj4+IDggXiB0WyhjcmMgXiBidWZbaV0pICYgMHhGRl07CiAgfQoKICByZXR1cm4gY3JjIF4gLTE7IC8vID4+PiAwOwp9IC8vIFRoYXQncyBhbGwgZm9yIHRoZSBwYWtv
IGZ1bmN0aW9ucy4KCi8qKgogKiBDb21wdXRlIHRoZSBjcmMzMiBvZiBhIHN0cmluZy4KICogVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgdGhlIGZ1bmN0aW9uIGNyYzMyLCBidXQgZm9yIHN0cmluZ3MuIFVzaW5nIHRoZQogKiBzYW1lIGZ1bmN0aW9uIGZvciB0aGUgdHdvIHVzZSBjYXNlcyBsZWFkcyB0byBob3JyaWJsZSBwZXJmb3JtYW5jZXMuCiAqIEBwYXJhbSB7TnVtYmVyfSBjcmMgdGhlIHN0YXJ0aW5nIHZhbHVlIG9mIHRoZSBjcmMuCiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgdGhlIHN0cmluZyB0byB1c2UuCiAqIEBw
YXJhbSB7TnVtYmVyfSBsZW4gdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nLgogKiBAcGFyYW0ge051bWJlcn0gcG9zIHRoZSBzdGFydGluZyBwb3NpdGlvbiBmb3IgdGhlIGNyYzMyIGNvbXB1dGF0aW9uLgogKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBjb21wdXRlZCBjcmMzMi4KICovCgoKZnVuY3Rpb24gY3JjMzJzdHIoY3JjLCBzdHIsIGxlbiwgcG9zKSB7CiAgdmFyIHQgPSBjcmNUYWJsZSwKICAgICAgZW5kID0gcG9zICsgbGVuOwogIGNyYyA9IGNyYyBeIC0xOwoKICBmb3IgKHZhciBpID0gcG9zOyBpIDwgZW5kOyBpKyspIHsK
ICAgIGNyYyA9IGNyYyA+Pj4gOCBeIHRbKGNyYyBeIHN0ci5jaGFyQ29kZUF0KGkpKSAmIDB4RkZdOwogIH0KCiAgcmV0dXJuIGNyYyBeIC0xOyAvLyA+Pj4gMDsKfQoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmMzMndyYXBwZXIoaW5wdXQsIGNyYykgewogIGlmICh0eXBlb2YgaW5wdXQgPT09ICJ1bmRlZmluZWQiIHx8ICFpbnB1dC5sZW5ndGgpIHsKICAgIHJldHVybiAwOwogIH0KCiAgdmFyIGlzQXJyYXkgPSB1dGlscy5nZXRUeXBlT2YoaW5wdXQpICE9PSAic3RyaW5nIjsKCiAgaWYgKGlzQXJyYXkpIHsKICAgIHJl
dHVybiBjcmMzMihjcmMgfCAwLCBpbnB1dCwgaW5wdXQubGVuZ3RoLCAwKTsKICB9IGVsc2UgewogICAgcmV0dXJuIGNyYzMyc3RyKGNyYyB8IDAsIGlucHV0LCBpbnB1dC5sZW5ndGgsIDApOwogIH0KfTsKCn0seyIuL3V0aWxzIjozMTJ9XSwyODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpleHBvcnRzLmJhc2U2NCA9IGZhbHNlOwpleHBvcnRzLmJpbmFyeSA9IGZhbHNlOwpleHBvcnRzLmRpciA9IGZhbHNlOwpleHBvcnRzLmNyZWF0ZUZvbGRlcnMgPSB0cnVlOwpleHBvcnRzLmRh
dGUgPSBudWxsOwpleHBvcnRzLmNvbXByZXNzaW9uID0gbnVsbDsKZXhwb3J0cy5jb21wcmVzc2lvbk9wdGlvbnMgPSBudWxsOwpleHBvcnRzLmNvbW1lbnQgPSBudWxsOwpleHBvcnRzLnVuaXhQZXJtaXNzaW9ucyA9IG51bGw7CmV4cG9ydHMuZG9zUGVybWlzc2lvbnMgPSBudWxsOwoKfSx7fV0sMjg2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyogZ2xvYmFsIFByb21pc2UgKi8KJ3VzZSBzdHJpY3QnOyAvLyBsb2FkIHRoZSBnbG9iYWwgb2JqZWN0IGZpcnN0OgovLyAtIGl0IHNob3VsZCBiZSBiZXR0ZXIg
aW50ZWdyYXRlZCBpbiB0aGUgc3lzdGVtICh1bmhhbmRsZWRSZWplY3Rpb24gaW4gbm9kZSkKLy8gLSB0aGUgZW52aXJvbm1lbnQgbWF5IGhhdmUgYSBjdXN0b20gUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiAoc2VlIHpvbmUuanMpCgp2YXIgRVM2UHJvbWlzZSA9IG51bGw7CgppZiAodHlwZW9mIFByb21pc2UgIT09ICJ1bmRlZmluZWQiKSB7CiAgRVM2UHJvbWlzZSA9IFByb21pc2U7Cn0gZWxzZSB7CiAgRVM2UHJvbWlzZSA9IHJlcXVpcmUoImxpZSIpOwp9Ci8qKgogKiBMZXQgdGhlIHVzZXIgdXNlL2NoYW5nZSBzb21lIGltcGxl
bWVudGF0aW9ucy4KICovCgoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgUHJvbWlzZTogRVM2UHJvbWlzZQp9OwoKfSx7ImxpZSI6MzE2fV0sMjg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIFVTRV9UWVBFREFSUkFZID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBVaW50MTZBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFVpbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJzsKCnZhciBwYWtvID0gcmVxdWlyZSgicGFrbyIpOwoKdmFyIHV0
aWxzID0gcmVxdWlyZSgiLi91dGlscyIpOwoKdmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKCIuL3N0cmVhbS9HZW5lcmljV29ya2VyIik7Cgp2YXIgQVJSQVlfVFlQRSA9IFVTRV9UWVBFREFSUkFZID8gInVpbnQ4YXJyYXkiIDogImFycmF5IjsKZXhwb3J0cy5tYWdpYyA9ICJceDA4XHgwMCI7Ci8qKgogKiBDcmVhdGUgYSB3b3JrZXIgdGhhdCB1c2VzIHBha28gdG8gaW5mbGF0ZS9kZWZsYXRlLgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvbiB0aGUgbmFtZSBvZiB0aGUgcGFrbyBmdW5jdGlvbiB0
byBjYWxsIDogZWl0aGVyICJEZWZsYXRlIiBvciAiSW5mbGF0ZSIuCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHRoZSBvcHRpb25zIHRvIHVzZSB3aGVuIChkZSljb21wcmVzc2luZy4KICovCgpmdW5jdGlvbiBGbGF0ZVdvcmtlcihhY3Rpb24sIG9wdGlvbnMpIHsKICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgIkZsYXRlV29ya2VyLyIgKyBhY3Rpb24pOwogIHRoaXMuX3Bha28gPSBudWxsOwogIHRoaXMuX3Bha29BY3Rpb24gPSBhY3Rpb247CiAgdGhpcy5fcGFrb09wdGlvbnMgPSBvcHRpb25zOyAvLyB0aGUgYG1ldGFg
IG9iamVjdCBmcm9tIHRoZSBsYXN0IGNodW5rIHJlY2VpdmVkCiAgLy8gdGhpcyBhbGxvdyB0aGlzIHdvcmtlciB0byBwYXNzIGFyb3VuZCBtZXRhZGF0YQoKICB0aGlzLm1ldGEgPSB7fTsKfQoKdXRpbHMuaW5oZXJpdHMoRmxhdGVXb3JrZXIsIEdlbmVyaWNXb3JrZXIpOwovKioKICogQHNlZSBHZW5lcmljV29ya2VyLnByb2Nlc3NDaHVuawogKi8KCkZsYXRlV29ya2VyLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmspIHsKICB0aGlzLm1ldGEgPSBjaHVuay5tZXRhOwoKICBpZiAodGhpcy5fcGFrbyA9
PT0gbnVsbCkgewogICAgdGhpcy5fY3JlYXRlUGFrbygpOwogIH0KCiAgdGhpcy5fcGFrby5wdXNoKHV0aWxzLnRyYW5zZm9ybVRvKEFSUkFZX1RZUEUsIGNodW5rLmRhdGEpLCBmYWxzZSk7Cn07Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIuZmx1c2gKICovCgoKRmxhdGVXb3JrZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkgewogIEdlbmVyaWNXb3JrZXIucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcyk7CgogIGlmICh0aGlzLl9wYWtvID09PSBudWxsKSB7CiAgICB0aGlzLl9jcmVhdGVQYWtvKCk7CiAgfQoKICB0
aGlzLl9wYWtvLnB1c2goW10sIHRydWUpOwp9OwovKioKICogQHNlZSBHZW5lcmljV29ya2VyLmNsZWFuVXAKICovCgoKRmxhdGVXb3JrZXIucHJvdG90eXBlLmNsZWFuVXAgPSBmdW5jdGlvbiAoKSB7CiAgR2VuZXJpY1dvcmtlci5wcm90b3R5cGUuY2xlYW5VcC5jYWxsKHRoaXMpOwogIHRoaXMuX3Bha28gPSBudWxsOwp9OwovKioKICogQ3JlYXRlIHRoZSBfcGFrbyBvYmplY3QuCiAqIFRPRE86IGxhenktbG9hZGluZyB0aGlzIG9iamVjdCBpc24ndCB0aGUgYmVzdCBzb2x1dGlvbiBidXQgaXQncyB0aGUKICogcXVpY2tlc3Qu
IFRoZSBiZXN0IHNvbHV0aW9uIGlzIHRvIGxhenktbG9hZCB0aGUgd29ya2VyIGxpc3QuIFNlZSBhbHNvIHRoZQogKiBpc3N1ZSAjNDQ2LgogKi8KCgpGbGF0ZVdvcmtlci5wcm90b3R5cGUuX2NyZWF0ZVBha28gPSBmdW5jdGlvbiAoKSB7CiAgdGhpcy5fcGFrbyA9IG5ldyBwYWtvW3RoaXMuX3Bha29BY3Rpb25dKHsKICAgIHJhdzogdHJ1ZSwKICAgIGxldmVsOiB0aGlzLl9wYWtvT3B0aW9ucy5sZXZlbCB8fCAtMSAvLyBkZWZhdWx0IGNvbXByZXNzaW9uCgogIH0pOwogIHZhciBzZWxmID0gdGhpczsKCiAgdGhpcy5fcGFrby5v
bkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgc2VsZi5wdXNoKHsKICAgICAgZGF0YTogZGF0YSwKICAgICAgbWV0YTogc2VsZi5tZXRhCiAgICB9KTsKICB9Owp9OwoKZXhwb3J0cy5jb21wcmVzc1dvcmtlciA9IGZ1bmN0aW9uIChjb21wcmVzc2lvbk9wdGlvbnMpIHsKICByZXR1cm4gbmV3IEZsYXRlV29ya2VyKCJEZWZsYXRlIiwgY29tcHJlc3Npb25PcHRpb25zKTsKfTsKCmV4cG9ydHMudW5jb21wcmVzc1dvcmtlciA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gbmV3IEZsYXRlV29ya2VyKCJJbmZsYXRlIiwge30pOwp9
OwoKfSx7Ii4vc3RyZWFtL0dlbmVyaWNXb3JrZXIiOjMwOCwiLi91dGlscyI6MzEyLCJwYWtvIjozMzB9XSwyODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKCcuLi9zdHJlYW0vR2VuZXJpY1dvcmtlcicpOwoKdmFyIHV0ZjggPSByZXF1aXJlKCcuLi91dGY4Jyk7Cgp2YXIgY3JjMzIgPSByZXF1aXJlKCcuLi9jcmMzMicpOwoKdmFyIHNpZ25hdHVyZSA9IHJlcXVpcmUoJy4u
L3NpZ25hdHVyZScpOwovKioKICogVHJhbnNmb3JtIGFuIGludGVnZXIgaW50byBhIHN0cmluZyBpbiBoZXhhZGVjaW1hbC4KICogQHByaXZhdGUKICogQHBhcmFtIHtudW1iZXJ9IGRlYyB0aGUgbnVtYmVyIHRvIGNvbnZlcnQuCiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlLgogKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgcmVzdWx0LgogKi8KCgp2YXIgZGVjVG9IZXggPSBmdW5jdGlvbiBkZWNUb0hleChkZWMsIGJ5dGVzKSB7CiAgdmFyIGhleCA9ICIiLAogICAgICBpOwoK
ICBmb3IgKGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgewogICAgaGV4ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGVjICYgMHhmZik7CiAgICBkZWMgPSBkZWMgPj4+IDg7CiAgfQoKICByZXR1cm4gaGV4Owp9OwovKioKICogR2VuZXJhdGUgdGhlIFVOSVggcGFydCBvZiB0aGUgZXh0ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzLgogKiBAcGFyYW0ge09iamVjdH0gdW5peFBlcm1pc3Npb25zIHRoZSB1bml4IHBlcm1pc3Npb25zIG9yIG51bGwuCiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNEaXIgdHJ1ZSBpZiB0aGUgZW50cnkgaXMgYSBkaXJl
Y3RvcnksIGZhbHNlIG90aGVyd2lzZS4KICogQHJldHVybiB7TnVtYmVyfSBhIDMyIGJpdCBpbnRlZ2VyLgogKgogKiBhZGFwdGVkIGZyb20gaHR0cDovL3VuaXguc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzE0NzA1L3RoZS16aXAtZm9ybWF0cy1leHRlcm5hbC1maWxlLWF0dHJpYnV0ZSA6CiAqCiAqIFRUVFRzc3Ryd3hyd3hyd3gwMDAwMDAwMDAwQURWU0hSCiAqIF5eXl5fX19fX19fX19fX19fX19fX19fX19fX19fX19fIGZpbGUgdHlwZSwgc2VlIHppcGluZm8uYyAoVU5YXyopCiAqICAgICBeXl5fX19fX19fX19fX19f
X19fX19fX19fX19fIHNldHVpZCwgc2V0Z2lkLCBzdGlja3kKICogICAgICAgIF5eXl5eXl5eXl9fX19fX19fX19fX19fX18gcGVybWlzc2lvbnMKICogICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5fX19fX18gbm90IHVzZWQgPwogKiAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXiBET1MgYXR0cmlidXRlIGJpdHMgOiBBcmNoaXZlLCBEaXJlY3RvcnksIFZvbHVtZSBsYWJlbCwgU3lzdGVtIGZpbGUsIEhpZGRlbiwgUmVhZCBvbmx5CiAqLwoKCnZhciBnZW5lcmF0ZVVuaXhFeHRlcm5hbEZpbGVBdHRyID0gZnVuY3Rp
b24gZ2VuZXJhdGVVbml4RXh0ZXJuYWxGaWxlQXR0cih1bml4UGVybWlzc2lvbnMsIGlzRGlyKSB7CiAgdmFyIHJlc3VsdCA9IHVuaXhQZXJtaXNzaW9uczsKCiAgaWYgKCF1bml4UGVybWlzc2lvbnMpIHsKICAgIC8vIEkgY2FuJ3QgdXNlIG9jdGFsIHZhbHVlcyBpbiBzdHJpY3QgbW9kZSwgaGVuY2UgdGhlIGhleGEuCiAgICAvLyAgMDQwNzc1ID0+IDB4NDFmZAogICAgLy8gMDEwMDY2NCA9PiAweDgxYjQKICAgIHJlc3VsdCA9IGlzRGlyID8gMHg0MWZkIDogMHg4MWI0OwogIH0KCiAgcmV0dXJuIChyZXN1bHQgJiAweEZGRkYp
IDw8IDE2Owp9OwovKioKICogR2VuZXJhdGUgdGhlIERPUyBwYXJ0IG9mIHRoZSBleHRlcm5hbCBmaWxlIGF0dHJpYnV0ZXMuCiAqIEBwYXJhbSB7T2JqZWN0fSBkb3NQZXJtaXNzaW9ucyB0aGUgZG9zIHBlcm1pc3Npb25zIG9yIG51bGwuCiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNEaXIgdHJ1ZSBpZiB0aGUgZW50cnkgaXMgYSBkaXJlY3RvcnksIGZhbHNlIG90aGVyd2lzZS4KICogQHJldHVybiB7TnVtYmVyfSBhIDMyIGJpdCBpbnRlZ2VyLgogKgogKiBCaXQgMCAgICAgUmVhZC1Pbmx5CiAqIEJpdCAxICAgICBIaWRkZW4KICog
Qml0IDIgICAgIFN5c3RlbQogKiBCaXQgMyAgICAgVm9sdW1lIExhYmVsCiAqIEJpdCA0ICAgICBEaXJlY3RvcnkKICogQml0IDUgICAgIEFyY2hpdmUKICovCgoKdmFyIGdlbmVyYXRlRG9zRXh0ZXJuYWxGaWxlQXR0ciA9IGZ1bmN0aW9uIGdlbmVyYXRlRG9zRXh0ZXJuYWxGaWxlQXR0cihkb3NQZXJtaXNzaW9ucywgaXNEaXIpIHsKICAvLyB0aGUgZGlyIGZsYWcgaXMgYWxyZWFkeSBzZXQgZm9yIGNvbXBhdGliaWxpdHkKICByZXR1cm4gKGRvc1Blcm1pc3Npb25zIHx8IDApICYgMHgzRjsKfTsKLyoqCiAqIEdlbmVyYXRlIHRo
ZSB2YXJpb3VzIHBhcnRzIHVzZWQgaW4gdGhlIGNvbnN0cnVjdGlvbiBvZiB0aGUgZmluYWwgemlwIGZpbGUuCiAqIEBwYXJhbSB7T2JqZWN0fSBzdHJlYW1JbmZvIHRoZSBoYXNoIHdpdGggaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbXByZXNzZWQgZmlsZS4KICogQHBhcmFtIHtCb29sZWFufSBzdHJlYW1lZENvbnRlbnQgaXMgdGhlIGNvbnRlbnQgc3RyZWFtZWQgPwogKiBAcGFyYW0ge0Jvb2xlYW59IHN0cmVhbWluZ0VuZGVkIGlzIHRoZSBzdHJlYW0gZmluaXNoZWQgPwogKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IHRoZSBj
dXJyZW50IG9mZnNldCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgemlwIGZpbGUuCiAqIEBwYXJhbSB7U3RyaW5nfSBwbGF0Zm9ybSBsZXQncyBwcmV0ZW5kIHdlIGFyZSB0aGlzIHBsYXRmb3JtIChjaGFuZ2UgcGxhdGZvcm0gZGVwZW5kZW50cyBmaWVsZHMpCiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZUZpbGVOYW1lIHRoZSBmdW5jdGlvbiB0byBlbmNvZGUgdGhlIGZpbGUgbmFtZSAvIGNvbW1lbnQuCiAqIEByZXR1cm4ge09iamVjdH0gdGhlIHppcCBwYXJ0cy4KICovCgoKdmFyIGdlbmVyYXRlWmlwUGFydHMgPSBmdW5jdGlv
biBnZW5lcmF0ZVppcFBhcnRzKHN0cmVhbUluZm8sIHN0cmVhbWVkQ29udGVudCwgc3RyZWFtaW5nRW5kZWQsIG9mZnNldCwgcGxhdGZvcm0sIGVuY29kZUZpbGVOYW1lKSB7CiAgdmFyIGZpbGUgPSBzdHJlYW1JbmZvWydmaWxlJ10sCiAgICAgIGNvbXByZXNzaW9uID0gc3RyZWFtSW5mb1snY29tcHJlc3Npb24nXSwKICAgICAgdXNlQ3VzdG9tRW5jb2RpbmcgPSBlbmNvZGVGaWxlTmFtZSAhPT0gdXRmOC51dGY4ZW5jb2RlLAogICAgICBlbmNvZGVkRmlsZU5hbWUgPSB1dGlscy50cmFuc2Zvcm1Ubygic3RyaW5nIiwgZW5jb2Rl
RmlsZU5hbWUoZmlsZS5uYW1lKSksCiAgICAgIHV0ZkVuY29kZWRGaWxlTmFtZSA9IHV0aWxzLnRyYW5zZm9ybVRvKCJzdHJpbmciLCB1dGY4LnV0ZjhlbmNvZGUoZmlsZS5uYW1lKSksCiAgICAgIGNvbW1lbnQgPSBmaWxlLmNvbW1lbnQsCiAgICAgIGVuY29kZWRDb21tZW50ID0gdXRpbHMudHJhbnNmb3JtVG8oInN0cmluZyIsIGVuY29kZUZpbGVOYW1lKGNvbW1lbnQpKSwKICAgICAgdXRmRW5jb2RlZENvbW1lbnQgPSB1dGlscy50cmFuc2Zvcm1Ubygic3RyaW5nIiwgdXRmOC51dGY4ZW5jb2RlKGNvbW1lbnQpKSwKICAgICAg
dXNlVVRGOEZvckZpbGVOYW1lID0gdXRmRW5jb2RlZEZpbGVOYW1lLmxlbmd0aCAhPT0gZmlsZS5uYW1lLmxlbmd0aCwKICAgICAgdXNlVVRGOEZvckNvbW1lbnQgPSB1dGZFbmNvZGVkQ29tbWVudC5sZW5ndGggIT09IGNvbW1lbnQubGVuZ3RoLAogICAgICBkb3NUaW1lLAogICAgICBkb3NEYXRlLAogICAgICBleHRyYUZpZWxkcyA9ICIiLAogICAgICB1bmljb2RlUGF0aEV4dHJhRmllbGQgPSAiIiwKICAgICAgdW5pY29kZUNvbW1lbnRFeHRyYUZpZWxkID0gIiIsCiAgICAgIGRpciA9IGZpbGUuZGlyLAogICAgICBkYXRlID0g
ZmlsZS5kYXRlOwogIHZhciBkYXRhSW5mbyA9IHsKICAgIGNyYzMyOiAwLAogICAgY29tcHJlc3NlZFNpemU6IDAsCiAgICB1bmNvbXByZXNzZWRTaXplOiAwCiAgfTsgLy8gaWYgdGhlIGNvbnRlbnQgaXMgc3RyZWFtZWQsIHRoZSBzaXplcy9jcmMzMiBhcmUgb25seSBhdmFpbGFibGUgQUZURVIKICAvLyB0aGUgZW5kIG9mIHRoZSBzdHJlYW0uCgogIGlmICghc3RyZWFtZWRDb250ZW50IHx8IHN0cmVhbWluZ0VuZGVkKSB7CiAgICBkYXRhSW5mby5jcmMzMiA9IHN0cmVhbUluZm9bJ2NyYzMyJ107CiAgICBkYXRhSW5mby5jb21w
cmVzc2VkU2l6ZSA9IHN0cmVhbUluZm9bJ2NvbXByZXNzZWRTaXplJ107CiAgICBkYXRhSW5mby51bmNvbXByZXNzZWRTaXplID0gc3RyZWFtSW5mb1sndW5jb21wcmVzc2VkU2l6ZSddOwogIH0KCiAgdmFyIGJpdGZsYWcgPSAwOwoKICBpZiAoc3RyZWFtZWRDb250ZW50KSB7CiAgICAvLyBCaXQgMzogdGhlIHNpemVzL2NyYzMyIGFyZSBzZXQgdG8gemVybyBpbiB0aGUgbG9jYWwgaGVhZGVyLgogICAgLy8gVGhlIGNvcnJlY3QgdmFsdWVzIGFyZSBwdXQgaW4gdGhlIGRhdGEgZGVzY3JpcHRvciBpbW1lZGlhdGVseQogICAgLy8g
Zm9sbG93aW5nIHRoZSBjb21wcmVzc2VkIGRhdGEuCiAgICBiaXRmbGFnIHw9IDB4MDAwODsKICB9CgogIGlmICghdXNlQ3VzdG9tRW5jb2RpbmcgJiYgKHVzZVVURjhGb3JGaWxlTmFtZSB8fCB1c2VVVEY4Rm9yQ29tbWVudCkpIHsKICAgIC8vIEJpdCAxMTogTGFuZ3VhZ2UgZW5jb2RpbmcgZmxhZyAoRUZTKS4KICAgIGJpdGZsYWcgfD0gMHgwODAwOwogIH0KCiAgdmFyIGV4dEZpbGVBdHRyID0gMDsKICB2YXIgdmVyc2lvbk1hZGVCeSA9IDA7CgogIGlmIChkaXIpIHsKICAgIC8vIGRvcyBvciB1bml4LCB3ZSBzZXQgdGhlIGRv
cyBkaXIgZmxhZwogICAgZXh0RmlsZUF0dHIgfD0gMHgwMDAxMDsKICB9CgogIGlmIChwbGF0Zm9ybSA9PT0gIlVOSVgiKSB7CiAgICB2ZXJzaW9uTWFkZUJ5ID0gMHgwMzFFOyAvLyBVTklYLCB2ZXJzaW9uIDMuMAoKICAgIGV4dEZpbGVBdHRyIHw9IGdlbmVyYXRlVW5peEV4dGVybmFsRmlsZUF0dHIoZmlsZS51bml4UGVybWlzc2lvbnMsIGRpcik7CiAgfSBlbHNlIHsKICAgIC8vIERPUyBvciBvdGhlciwgZmFsbGJhY2sgdG8gRE9TCiAgICB2ZXJzaW9uTWFkZUJ5ID0gMHgwMDE0OyAvLyBET1MsIHZlcnNpb24gMi4wCgogICAg
ZXh0RmlsZUF0dHIgfD0gZ2VuZXJhdGVEb3NFeHRlcm5hbEZpbGVBdHRyKGZpbGUuZG9zUGVybWlzc2lvbnMsIGRpcik7CiAgfSAvLyBkYXRlCiAgLy8gQHNlZSBodHRwOi8vd3d3LmRlbG9yaWUuY29tL2RqZ3BwL2RvYy9yYmludGVyL2l0LzUyLzEzLmh0bWwKICAvLyBAc2VlIGh0dHA6Ly93d3cuZGVsb3JpZS5jb20vZGpncHAvZG9jL3JiaW50ZXIvaXQvNjUvMTYuaHRtbAogIC8vIEBzZWUgaHR0cDovL3d3dy5kZWxvcmllLmNvbS9kamdwcC9kb2MvcmJpbnRlci9pdC82Ni8xNi5odG1sCgoKICBkb3NUaW1lID0gZGF0ZS5nZXRV
VENIb3VycygpOwogIGRvc1RpbWUgPSBkb3NUaW1lIDw8IDY7CiAgZG9zVGltZSA9IGRvc1RpbWUgfCBkYXRlLmdldFVUQ01pbnV0ZXMoKTsKICBkb3NUaW1lID0gZG9zVGltZSA8PCA1OwogIGRvc1RpbWUgPSBkb3NUaW1lIHwgZGF0ZS5nZXRVVENTZWNvbmRzKCkgLyAyOwogIGRvc0RhdGUgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTgwOwogIGRvc0RhdGUgPSBkb3NEYXRlIDw8IDQ7CiAgZG9zRGF0ZSA9IGRvc0RhdGUgfCBkYXRlLmdldFVUQ01vbnRoKCkgKyAxOwogIGRvc0RhdGUgPSBkb3NEYXRlIDw8IDU7CiAgZG9z
RGF0ZSA9IGRvc0RhdGUgfCBkYXRlLmdldFVUQ0RhdGUoKTsKCiAgaWYgKHVzZVVURjhGb3JGaWxlTmFtZSkgewogICAgLy8gc2V0IHRoZSB1bmljb2RlIHBhdGggZXh0cmEgZmllbGQuIHVuemlwIG5lZWRzIGF0IGxlYXN0IG9uZSBleHRyYQogICAgLy8gZmllbGQgdG8gY29ycmVjdGx5IGhhbmRsZSB1bmljb2RlIHBhdGgsIHNvIHVzaW5nIHRoZSBwYXRoIGlzIGFzIGdvb2QKICAgIC8vIGFzIGFueSBvdGhlciBpbmZvcm1hdGlvbi4gVGhpcyBjb3VsZCBpbXByb3ZlIHRoZSBzaXR1YXRpb24gd2l0aAogICAgLy8gb3RoZXIgYXJj
aGl2ZSBtYW5hZ2VycyB0b28uCiAgICAvLyBUaGlzIGZpZWxkIGlzIHVzdWFsbHkgdXNlZCB3aXRob3V0IHRoZSB1dGY4IGZsYWcsIHdpdGggYSBub24KICAgIC8vIHVuaWNvZGUgcGF0aCBpbiB0aGUgaGVhZGVyICh3aW5yYXIsIHdpbnppcCkuIFRoaXMgaGVscHMgKGEgYml0KQogICAgLy8gd2l0aCB0aGUgbWVzc3kgV2luZG93cycgZGVmYXVsdCBjb21wcmVzc2VkIGZvbGRlcnMgZmVhdHVyZSBidXQKICAgIC8vIGJyZWFrcyBvbiBwN3ppcCB3aGljaCBkb2Vzbid0IHNlZWsgdGhlIHVuaWNvZGUgcGF0aCBleHRyYSBmaWVsZC4K
ICAgIC8vIFNvIGZvciBub3csIFVURi04IGV2ZXJ5d2hlcmUgIQogICAgdW5pY29kZVBhdGhFeHRyYUZpZWxkID0gLy8gVmVyc2lvbgogICAgZGVjVG9IZXgoMSwgMSkgKyAvLyBOYW1lQ1JDMzIKICAgIGRlY1RvSGV4KGNyYzMyKGVuY29kZWRGaWxlTmFtZSksIDQpICsgLy8gVW5pY29kZU5hbWUKICAgIHV0ZkVuY29kZWRGaWxlTmFtZTsKICAgIGV4dHJhRmllbGRzICs9IC8vIEluZm8tWklQIFVuaWNvZGUgUGF0aCBFeHRyYSBGaWVsZAogICAgIlx4NzVceDcwIiArIC8vIHNpemUKICAgIGRlY1RvSGV4KHVuaWNvZGVQYXRoRXh0
cmFGaWVsZC5sZW5ndGgsIDIpICsgLy8gY29udGVudAogICAgdW5pY29kZVBhdGhFeHRyYUZpZWxkOwogIH0KCiAgaWYgKHVzZVVURjhGb3JDb21tZW50KSB7CiAgICB1bmljb2RlQ29tbWVudEV4dHJhRmllbGQgPSAvLyBWZXJzaW9uCiAgICBkZWNUb0hleCgxLCAxKSArIC8vIENvbW1lbnRDUkMzMgogICAgZGVjVG9IZXgoY3JjMzIoZW5jb2RlZENvbW1lbnQpLCA0KSArIC8vIFVuaWNvZGVOYW1lCiAgICB1dGZFbmNvZGVkQ29tbWVudDsKICAgIGV4dHJhRmllbGRzICs9IC8vIEluZm8tWklQIFVuaWNvZGUgUGF0aCBFeHRyYSBG
aWVsZAogICAgIlx4NzVceDYzIiArIC8vIHNpemUKICAgIGRlY1RvSGV4KHVuaWNvZGVDb21tZW50RXh0cmFGaWVsZC5sZW5ndGgsIDIpICsgLy8gY29udGVudAogICAgdW5pY29kZUNvbW1lbnRFeHRyYUZpZWxkOwogIH0KCiAgdmFyIGhlYWRlciA9ICIiOyAvLyB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0CgogIGhlYWRlciArPSAiXHgwQVx4MDAiOyAvLyBnZW5lcmFsIHB1cnBvc2UgYml0IGZsYWcKCiAgaGVhZGVyICs9IGRlY1RvSGV4KGJpdGZsYWcsIDIpOyAvLyBjb21wcmVzc2lvbiBtZXRob2QKCiAgaGVhZGVyICs9IGNv
bXByZXNzaW9uLm1hZ2ljOyAvLyBsYXN0IG1vZCBmaWxlIHRpbWUKCiAgaGVhZGVyICs9IGRlY1RvSGV4KGRvc1RpbWUsIDIpOyAvLyBsYXN0IG1vZCBmaWxlIGRhdGUKCiAgaGVhZGVyICs9IGRlY1RvSGV4KGRvc0RhdGUsIDIpOyAvLyBjcmMtMzIKCiAgaGVhZGVyICs9IGRlY1RvSGV4KGRhdGFJbmZvLmNyYzMyLCA0KTsgLy8gY29tcHJlc3NlZCBzaXplCgogIGhlYWRlciArPSBkZWNUb0hleChkYXRhSW5mby5jb21wcmVzc2VkU2l6ZSwgNCk7IC8vIHVuY29tcHJlc3NlZCBzaXplCgogIGhlYWRlciArPSBkZWNUb0hleChkYXRh
SW5mby51bmNvbXByZXNzZWRTaXplLCA0KTsgLy8gZmlsZSBuYW1lIGxlbmd0aAoKICBoZWFkZXIgKz0gZGVjVG9IZXgoZW5jb2RlZEZpbGVOYW1lLmxlbmd0aCwgMik7IC8vIGV4dHJhIGZpZWxkIGxlbmd0aAoKICBoZWFkZXIgKz0gZGVjVG9IZXgoZXh0cmFGaWVsZHMubGVuZ3RoLCAyKTsKICB2YXIgZmlsZVJlY29yZCA9IHNpZ25hdHVyZS5MT0NBTF9GSUxFX0hFQURFUiArIGhlYWRlciArIGVuY29kZWRGaWxlTmFtZSArIGV4dHJhRmllbGRzOwogIHZhciBkaXJSZWNvcmQgPSBzaWduYXR1cmUuQ0VOVFJBTF9GSUxFX0hFQURF
UiArIC8vIHZlcnNpb24gbWFkZSBieSAoMDA6IERPUykKICBkZWNUb0hleCh2ZXJzaW9uTWFkZUJ5LCAyKSArIC8vIGZpbGUgaGVhZGVyIChjb21tb24gdG8gZmlsZSBhbmQgY2VudHJhbCBkaXJlY3RvcnkpCiAgaGVhZGVyICsgLy8gZmlsZSBjb21tZW50IGxlbmd0aAogIGRlY1RvSGV4KGVuY29kZWRDb21tZW50Lmxlbmd0aCwgMikgKyAvLyBkaXNrIG51bWJlciBzdGFydAogICJceDAwXHgwMCIgKyAvLyBpbnRlcm5hbCBmaWxlIGF0dHJpYnV0ZXMgVE9ETwogICJceDAwXHgwMCIgKyAvLyBleHRlcm5hbCBmaWxlIGF0dHJpYnV0
ZXMKICBkZWNUb0hleChleHRGaWxlQXR0ciwgNCkgKyAvLyByZWxhdGl2ZSBvZmZzZXQgb2YgbG9jYWwgaGVhZGVyCiAgZGVjVG9IZXgob2Zmc2V0LCA0KSArIC8vIGZpbGUgbmFtZQogIGVuY29kZWRGaWxlTmFtZSArIC8vIGV4dHJhIGZpZWxkCiAgZXh0cmFGaWVsZHMgKyAvLyBmaWxlIGNvbW1lbnQKICBlbmNvZGVkQ29tbWVudDsKICByZXR1cm4gewogICAgZmlsZVJlY29yZDogZmlsZVJlY29yZCwKICAgIGRpclJlY29yZDogZGlyUmVjb3JkCiAgfTsKfTsKLyoqCiAqIEdlbmVyYXRlIHRoZSBFT0NEIHJlY29yZC4KICogQHBh
cmFtIHtOdW1iZXJ9IGVudHJpZXNDb3VudCB0aGUgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIHppcCBmaWxlLgogKiBAcGFyYW0ge051bWJlcn0gY2VudHJhbERpckxlbmd0aCB0aGUgbGVuZ3RoIChpbiBieXRlcykgb2YgdGhlIGNlbnRyYWwgZGlyLgogKiBAcGFyYW0ge051bWJlcn0gbG9jYWxEaXJMZW5ndGggdGhlIGxlbmd0aCAoaW4gYnl0ZXMpIG9mIHRoZSBsb2NhbCBkaXIuCiAqIEBwYXJhbSB7U3RyaW5nfSBjb21tZW50IHRoZSB6aXAgZmlsZSBjb21tZW50IGFzIGEgYmluYXJ5IHN0cmluZy4KICogQHBhcmFtIHtGdW5j
dGlvbn0gZW5jb2RlRmlsZU5hbWUgdGhlIGZ1bmN0aW9uIHRvIGVuY29kZSB0aGUgY29tbWVudC4KICogQHJldHVybiB7U3RyaW5nfSB0aGUgRU9DRCByZWNvcmQuCiAqLwoKCnZhciBnZW5lcmF0ZUNlbnRyYWxEaXJlY3RvcnlFbmQgPSBmdW5jdGlvbiBnZW5lcmF0ZUNlbnRyYWxEaXJlY3RvcnlFbmQoZW50cmllc0NvdW50LCBjZW50cmFsRGlyTGVuZ3RoLCBsb2NhbERpckxlbmd0aCwgY29tbWVudCwgZW5jb2RlRmlsZU5hbWUpIHsKICB2YXIgZGlyRW5kID0gIiI7CiAgdmFyIGVuY29kZWRDb21tZW50ID0gdXRpbHMudHJhbnNm
b3JtVG8oInN0cmluZyIsIGVuY29kZUZpbGVOYW1lKGNvbW1lbnQpKTsgLy8gZW5kIG9mIGNlbnRyYWwgZGlyIHNpZ25hdHVyZQoKICBkaXJFbmQgPSBzaWduYXR1cmUuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EICsgLy8gbnVtYmVyIG9mIHRoaXMgZGlzawogICJceDAwXHgwMCIgKyAvLyBudW1iZXIgb2YgdGhlIGRpc2sgd2l0aCB0aGUgc3RhcnQgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5CiAgIlx4MDBceDAwIiArIC8vIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzIGluIHRoZSBjZW50cmFsIGRpcmVjdG9yeSBvbiB0aGlzIGRpc2sK
ICBkZWNUb0hleChlbnRyaWVzQ291bnQsIDIpICsgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIGNlbnRyYWwgZGlyZWN0b3J5CiAgZGVjVG9IZXgoZW50cmllc0NvdW50LCAyKSArIC8vIHNpemUgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5ICAgNCBieXRlcwogIGRlY1RvSGV4KGNlbnRyYWxEaXJMZW5ndGgsIDQpICsgLy8gb2Zmc2V0IG9mIHN0YXJ0IG9mIGNlbnRyYWwgZGlyZWN0b3J5IHdpdGggcmVzcGVjdCB0byB0aGUgc3RhcnRpbmcgZGlzayBudW1iZXIKICBkZWNUb0hleChsb2NhbERpckxlbmd0aCwgNCkg
KyAvLyAuWklQIGZpbGUgY29tbWVudCBsZW5ndGgKICBkZWNUb0hleChlbmNvZGVkQ29tbWVudC5sZW5ndGgsIDIpICsgLy8gLlpJUCBmaWxlIGNvbW1lbnQKICBlbmNvZGVkQ29tbWVudDsKICByZXR1cm4gZGlyRW5kOwp9OwovKioKICogR2VuZXJhdGUgZGF0YSBkZXNjcmlwdG9ycyBmb3IgYSBmaWxlIGVudHJ5LgogKiBAcGFyYW0ge09iamVjdH0gc3RyZWFtSW5mbyB0aGUgaGFzaCBnZW5lcmF0ZWQgYnkgYSB3b3JrZXIsIGNvbnRhaW5pbmcgaW5mb3JtYXRpb24KICogb24gdGhlIGZpbGUgZW50cnkuCiAqIEByZXR1cm4ge1N0
cmluZ30gdGhlIGRhdGEgZGVzY3JpcHRvcnMuCiAqLwoKCnZhciBnZW5lcmF0ZURhdGFEZXNjcmlwdG9ycyA9IGZ1bmN0aW9uIGdlbmVyYXRlRGF0YURlc2NyaXB0b3JzKHN0cmVhbUluZm8pIHsKICB2YXIgZGVzY3JpcHRvciA9ICIiOwogIGRlc2NyaXB0b3IgPSBzaWduYXR1cmUuREFUQV9ERVNDUklQVE9SICsgLy8gY3JjLTMyICAgICAgICAgICAgICAgICAgICAgICAgICA0IGJ5dGVzCiAgZGVjVG9IZXgoc3RyZWFtSW5mb1snY3JjMzInXSwgNCkgKyAvLyBjb21wcmVzc2VkIHNpemUgICAgICAgICAgICAgICAgIDQgYnl0ZXMK
ICBkZWNUb0hleChzdHJlYW1JbmZvWydjb21wcmVzc2VkU2l6ZSddLCA0KSArIC8vIHVuY29tcHJlc3NlZCBzaXplICAgICAgICAgICAgICAgNCBieXRlcwogIGRlY1RvSGV4KHN0cmVhbUluZm9bJ3VuY29tcHJlc3NlZFNpemUnXSwgNCk7CiAgcmV0dXJuIGRlc2NyaXB0b3I7Cn07Ci8qKgogKiBBIHdvcmtlciB0byBjb25jYXRlbmF0ZSBvdGhlciB3b3JrZXJzIHRvIGNyZWF0ZSBhIHppcCBmaWxlLgogKiBAcGFyYW0ge0Jvb2xlYW59IHN0cmVhbUZpbGVzIGB0cnVlYCB0byBzdHJlYW0gdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGVz
LAogKiBgZmFsc2VgIHRvIGFjY3VtdWxhdGUgaXQuCiAqIEBwYXJhbSB7U3RyaW5nfSBjb21tZW50IHRoZSBjb21tZW50IHRvIHVzZS4KICogQHBhcmFtIHtTdHJpbmd9IHBsYXRmb3JtIHRoZSBwbGF0Zm9ybSB0byB1c2UsICJVTklYIiBvciAiRE9TIi4KICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlRmlsZU5hbWUgdGhlIGZ1bmN0aW9uIHRvIGVuY29kZSBmaWxlIG5hbWVzIGFuZCBjb21tZW50cy4KICovCgoKZnVuY3Rpb24gWmlwRmlsZVdvcmtlcihzdHJlYW1GaWxlcywgY29tbWVudCwgcGxhdGZvcm0sIGVuY29kZUZpbGVO
YW1lKSB7CiAgR2VuZXJpY1dvcmtlci5jYWxsKHRoaXMsICJaaXBGaWxlV29ya2VyIik7IC8vIFRoZSBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbiBzbyBmYXIuIFRoaXMgZG9lc24ndCBjb3VudCBhY2N1bXVsYXRlZCBjaHVua3MuCgogIHRoaXMuYnl0ZXNXcml0dGVuID0gMDsgLy8gVGhlIGNvbW1lbnQgb2YgdGhlIHppcCBmaWxlCgogIHRoaXMuemlwQ29tbWVudCA9IGNvbW1lbnQ7IC8vIFRoZSBwbGF0Zm9ybSAiZ2VuZXJhdGluZyIgdGhlIHppcCBmaWxlLgoKICB0aGlzLnppcFBsYXRmb3JtID0gcGxhdGZvcm07IC8vIHRoZSBm
dW5jdGlvbiB0byBlbmNvZGUgZmlsZSBuYW1lcyBhbmQgY29tbWVudHMuCgogIHRoaXMuZW5jb2RlRmlsZU5hbWUgPSBlbmNvZGVGaWxlTmFtZTsgLy8gU2hvdWxkIHdlIHN0cmVhbSB0aGUgY29udGVudCBvZiB0aGUgZmlsZXMgPwoKICB0aGlzLnN0cmVhbUZpbGVzID0gc3RyZWFtRmlsZXM7IC8vIElmIGBzdHJlYW1GaWxlc2AgaXMgZmFsc2UsIHdlIHdpbGwgbmVlZCB0byBhY2N1bXVsYXRlIHRoZSBjb250ZW50IG9mIHRoZQogIC8vIGZpbGVzIHRvIGNhbGN1bGF0ZSBzaXplcyAvIGNyYzMyIChhbmQgd3JpdGUgdGhlbSAqYmVm
b3JlKiB0aGUgY29udGVudCkuCiAgLy8gVGhpcyBib29sZWFuIGluZGljYXRlcyBpZiB3ZSBhcmUgYWNjdW11bGF0aW5nIGNodW5rcyAoaXQgd2lsbCBjaGFuZ2UgYSBsb3QKICAvLyBkdXJpbmcgdGhlIGxpZmV0aW1lIG9mIHRoaXMgd29ya2VyKS4KCiAgdGhpcy5hY2N1bXVsYXRlID0gZmFsc2U7IC8vIFRoZSBidWZmZXIgcmVjZWl2aW5nIGNodW5rcyB3aGVuIGFjY3VtdWxhdGluZyBjb250ZW50LgoKICB0aGlzLmNvbnRlbnRCdWZmZXIgPSBbXTsgLy8gVGhlIGxpc3Qgb2YgZ2VuZXJhdGVkIGRpcmVjdG9yeSByZWNvcmRzLgoK
ICB0aGlzLmRpclJlY29yZHMgPSBbXTsgLy8gVGhlIG9mZnNldCAoaW4gYnl0ZXMpIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgemlwIGZpbGUgZm9yIHRoZSBjdXJyZW50IHNvdXJjZS4KCiAgdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0ID0gMDsgLy8gVGhlIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzIGluIHRoaXMgemlwIGZpbGUuCgogIHRoaXMuZW50cmllc0NvdW50ID0gMDsgLy8gdGhlIG5hbWUgb2YgdGhlIGZpbGUgY3VycmVudGx5IGJlaW5nIGFkZGVkLCBudWxsIHdoZW4gaGFuZGxpbmcgdGhlIGVuZCBvZiB0aGUgemlw
IGZpbGUuCiAgLy8gVXNlZCBmb3IgdGhlIGVtaXR0ZWQgbWV0YWRhdGEuCgogIHRoaXMuY3VycmVudEZpbGUgPSBudWxsOwogIHRoaXMuX3NvdXJjZXMgPSBbXTsKfQoKdXRpbHMuaW5oZXJpdHMoWmlwRmlsZVdvcmtlciwgR2VuZXJpY1dvcmtlcik7Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIucHVzaAogKi8KClppcEZpbGVXb3JrZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmspIHsKICB2YXIgY3VycmVudEZpbGVQZXJjZW50ID0gY2h1bmsubWV0YS5wZXJjZW50IHx8IDA7CiAgdmFyIGVudHJpZXNDb3VudCA9
IHRoaXMuZW50cmllc0NvdW50OwogIHZhciByZW1haW5pbmdGaWxlcyA9IHRoaXMuX3NvdXJjZXMubGVuZ3RoOwoKICBpZiAodGhpcy5hY2N1bXVsYXRlKSB7CiAgICB0aGlzLmNvbnRlbnRCdWZmZXIucHVzaChjaHVuayk7CiAgfSBlbHNlIHsKICAgIHRoaXMuYnl0ZXNXcml0dGVuICs9IGNodW5rLmRhdGEubGVuZ3RoOwogICAgR2VuZXJpY1dvcmtlci5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIHsKICAgICAgZGF0YTogY2h1bmsuZGF0YSwKICAgICAgbWV0YTogewogICAgICAgIGN1cnJlbnRGaWxlOiB0aGlzLmN1cnJlbnRG
aWxlLAogICAgICAgIHBlcmNlbnQ6IGVudHJpZXNDb3VudCA/IChjdXJyZW50RmlsZVBlcmNlbnQgKyAxMDAgKiAoZW50cmllc0NvdW50IC0gcmVtYWluaW5nRmlsZXMgLSAxKSkgLyBlbnRyaWVzQ291bnQgOiAxMDAKICAgICAgfQogICAgfSk7CiAgfQp9OwovKioKICogVGhlIHdvcmtlciBzdGFydGVkIGEgbmV3IHNvdXJjZSAoYW4gb3RoZXIgd29ya2VyKS4KICogQHBhcmFtIHtPYmplY3R9IHN0cmVhbUluZm8gdGhlIHN0cmVhbUluZm8gb2JqZWN0IGZyb20gdGhlIG5ldyBzb3VyY2UuCiAqLwoKClppcEZpbGVXb3JrZXIucHJv
dG90eXBlLm9wZW5lZFNvdXJjZSA9IGZ1bmN0aW9uIChzdHJlYW1JbmZvKSB7CiAgdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0ID0gdGhpcy5ieXRlc1dyaXR0ZW47CiAgdGhpcy5jdXJyZW50RmlsZSA9IHN0cmVhbUluZm9bJ2ZpbGUnXS5uYW1lOwogIHZhciBzdHJlYW1lZENvbnRlbnQgPSB0aGlzLnN0cmVhbUZpbGVzICYmICFzdHJlYW1JbmZvWydmaWxlJ10uZGlyOyAvLyBkb24ndCBzdHJlYW0gZm9sZGVycyAoYmVjYXVzZSB0aGV5IGRvbid0IGhhdmUgYW55IGNvbnRlbnQpCgogIGlmIChzdHJlYW1lZENvbnRlbnQpIHsKICAg
IHZhciByZWNvcmQgPSBnZW5lcmF0ZVppcFBhcnRzKHN0cmVhbUluZm8sIHN0cmVhbWVkQ29udGVudCwgZmFsc2UsIHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCwgdGhpcy56aXBQbGF0Zm9ybSwgdGhpcy5lbmNvZGVGaWxlTmFtZSk7CiAgICB0aGlzLnB1c2goewogICAgICBkYXRhOiByZWNvcmQuZmlsZVJlY29yZCwKICAgICAgbWV0YTogewogICAgICAgIHBlcmNlbnQ6IDAKICAgICAgfQogICAgfSk7CiAgfSBlbHNlIHsKICAgIC8vIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIHdob2xlIGZpbGUgYmVmb3JlIHB1c2hpbmcgYW55
dGhpbmcKICAgIHRoaXMuYWNjdW11bGF0ZSA9IHRydWU7CiAgfQp9OwovKioKICogVGhlIHdvcmtlciBmaW5pc2hlZCBhIHNvdXJjZSAoYW4gb3RoZXIgd29ya2VyKS4KICogQHBhcmFtIHtPYmplY3R9IHN0cmVhbUluZm8gdGhlIHN0cmVhbUluZm8gb2JqZWN0IGZyb20gdGhlIGZpbmlzaGVkIHNvdXJjZS4KICovCgoKWmlwRmlsZVdvcmtlci5wcm90b3R5cGUuY2xvc2VkU291cmNlID0gZnVuY3Rpb24gKHN0cmVhbUluZm8pIHsKICB0aGlzLmFjY3VtdWxhdGUgPSBmYWxzZTsKICB2YXIgc3RyZWFtZWRDb250ZW50ID0gdGhpcy5z
dHJlYW1GaWxlcyAmJiAhc3RyZWFtSW5mb1snZmlsZSddLmRpcjsKICB2YXIgcmVjb3JkID0gZ2VuZXJhdGVaaXBQYXJ0cyhzdHJlYW1JbmZvLCBzdHJlYW1lZENvbnRlbnQsIHRydWUsIHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCwgdGhpcy56aXBQbGF0Zm9ybSwgdGhpcy5lbmNvZGVGaWxlTmFtZSk7CiAgdGhpcy5kaXJSZWNvcmRzLnB1c2gocmVjb3JkLmRpclJlY29yZCk7CgogIGlmIChzdHJlYW1lZENvbnRlbnQpIHsKICAgIC8vIGFmdGVyIHRoZSBzdHJlYW1lZCBmaWxlLCB3ZSBwdXQgZGF0YSBkZXNjcmlwdG9ycwogICAg
dGhpcy5wdXNoKHsKICAgICAgZGF0YTogZ2VuZXJhdGVEYXRhRGVzY3JpcHRvcnMoc3RyZWFtSW5mbyksCiAgICAgIG1ldGE6IHsKICAgICAgICBwZXJjZW50OiAxMDAKICAgICAgfQogICAgfSk7CiAgfSBlbHNlIHsKICAgIC8vIHRoZSBjb250ZW50IHdhc24ndCBzdHJlYW1lZCwgd2UgbmVlZCB0byBwdXNoIGV2ZXJ5dGhpbmcgbm93CiAgICAvLyBmaXJzdCB0aGUgZmlsZSByZWNvcmQsIHRoZW4gdGhlIGNvbnRlbnQKICAgIHRoaXMucHVzaCh7CiAgICAgIGRhdGE6IHJlY29yZC5maWxlUmVjb3JkLAogICAgICBtZXRhOiB7CiAg
ICAgICAgcGVyY2VudDogMAogICAgICB9CiAgICB9KTsKCiAgICB3aGlsZSAodGhpcy5jb250ZW50QnVmZmVyLmxlbmd0aCkgewogICAgICB0aGlzLnB1c2godGhpcy5jb250ZW50QnVmZmVyLnNoaWZ0KCkpOwogICAgfQogIH0KCiAgdGhpcy5jdXJyZW50RmlsZSA9IG51bGw7Cn07Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIuZmx1c2gKICovCgoKWmlwRmlsZVdvcmtlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGxvY2FsRGlyTGVuZ3RoID0gdGhpcy5ieXRlc1dyaXR0ZW47CgogIGZvciAodmFyIGkg
PSAwOyBpIDwgdGhpcy5kaXJSZWNvcmRzLmxlbmd0aDsgaSsrKSB7CiAgICB0aGlzLnB1c2goewogICAgICBkYXRhOiB0aGlzLmRpclJlY29yZHNbaV0sCiAgICAgIG1ldGE6IHsKICAgICAgICBwZXJjZW50OiAxMDAKICAgICAgfQogICAgfSk7CiAgfQoKICB2YXIgY2VudHJhbERpckxlbmd0aCA9IHRoaXMuYnl0ZXNXcml0dGVuIC0gbG9jYWxEaXJMZW5ndGg7CiAgdmFyIGRpckVuZCA9IGdlbmVyYXRlQ2VudHJhbERpcmVjdG9yeUVuZCh0aGlzLmRpclJlY29yZHMubGVuZ3RoLCBjZW50cmFsRGlyTGVuZ3RoLCBsb2NhbERpckxl
bmd0aCwgdGhpcy56aXBDb21tZW50LCB0aGlzLmVuY29kZUZpbGVOYW1lKTsKICB0aGlzLnB1c2goewogICAgZGF0YTogZGlyRW5kLAogICAgbWV0YTogewogICAgICBwZXJjZW50OiAxMDAKICAgIH0KICB9KTsKfTsKLyoqCiAqIFByZXBhcmUgdGhlIG5leHQgc291cmNlIHRvIGJlIHJlYWQuCiAqLwoKClppcEZpbGVXb3JrZXIucHJvdG90eXBlLnByZXBhcmVOZXh0U291cmNlID0gZnVuY3Rpb24gKCkgewogIHRoaXMucHJldmlvdXMgPSB0aGlzLl9zb3VyY2VzLnNoaWZ0KCk7CiAgdGhpcy5vcGVuZWRTb3VyY2UodGhpcy5wcmV2
aW91cy5zdHJlYW1JbmZvKTsKCiAgaWYgKHRoaXMuaXNQYXVzZWQpIHsKICAgIHRoaXMucHJldmlvdXMucGF1c2UoKTsKICB9IGVsc2UgewogICAgdGhpcy5wcmV2aW91cy5yZXN1bWUoKTsKICB9Cn07Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIucmVnaXN0ZXJQcmV2aW91cwogKi8KCgpaaXBGaWxlV29ya2VyLnByb3RvdHlwZS5yZWdpc3RlclByZXZpb3VzID0gZnVuY3Rpb24gKHByZXZpb3VzKSB7CiAgdGhpcy5fc291cmNlcy5wdXNoKHByZXZpb3VzKTsKCiAgdmFyIHNlbGYgPSB0aGlzOwogIHByZXZpb3VzLm9uKCdkYXRh
JywgZnVuY3Rpb24gKGNodW5rKSB7CiAgICBzZWxmLnByb2Nlc3NDaHVuayhjaHVuayk7CiAgfSk7CiAgcHJldmlvdXMub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHsKICAgIHNlbGYuY2xvc2VkU291cmNlKHNlbGYucHJldmlvdXMuc3RyZWFtSW5mbyk7CgogICAgaWYgKHNlbGYuX3NvdXJjZXMubGVuZ3RoKSB7CiAgICAgIHNlbGYucHJlcGFyZU5leHRTb3VyY2UoKTsKICAgIH0gZWxzZSB7CiAgICAgIHNlbGYuZW5kKCk7CiAgICB9CiAgfSk7CiAgcHJldmlvdXMub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHsKICAgIHNlbGYuZXJy
b3IoZSk7CiAgfSk7CiAgcmV0dXJuIHRoaXM7Cn07Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIucmVzdW1lCiAqLwoKClppcEZpbGVXb3JrZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHsKICBpZiAoIUdlbmVyaWNXb3JrZXIucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoIXRoaXMucHJldmlvdXMgJiYgdGhpcy5fc291cmNlcy5sZW5ndGgpIHsKICAgIHRoaXMucHJlcGFyZU5leHRTb3VyY2UoKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgaWYgKCF0
aGlzLnByZXZpb3VzICYmICF0aGlzLl9zb3VyY2VzLmxlbmd0aCAmJiAhdGhpcy5nZW5lcmF0ZWRFcnJvcikgewogICAgdGhpcy5lbmQoKTsKICAgIHJldHVybiB0cnVlOwogIH0KfTsKLyoqCiAqIEBzZWUgR2VuZXJpY1dvcmtlci5lcnJvcgogKi8KCgpaaXBGaWxlV29ya2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlKSB7CiAgdmFyIHNvdXJjZXMgPSB0aGlzLl9zb3VyY2VzOwoKICBpZiAoIUdlbmVyaWNXb3JrZXIucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZSkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9Cgog
IGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykgewogICAgdHJ5IHsKICAgICAgc291cmNlc1tpXS5lcnJvcihlKTsKICAgIH0gY2F0Y2ggKGUpIHsvLyB0aGUgYGVycm9yYCBleHBsb2RlZCwgbm90aGluZyB0byBkbwogICAgfQogIH0KCiAgcmV0dXJuIHRydWU7Cn07Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIubG9jawogKi8KCgpaaXBGaWxlV29ya2VyLnByb3RvdHlwZS5sb2NrID0gZnVuY3Rpb24gKCkgewogIEdlbmVyaWNXb3JrZXIucHJvdG90eXBlLmxvY2suY2FsbCh0aGlzKTsKICB2YXIgc291
cmNlcyA9IHRoaXMuX3NvdXJjZXM7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykgewogICAgc291cmNlc1tpXS5sb2NrKCk7CiAgfQp9OwoKbW9kdWxlLmV4cG9ydHMgPSBaaXBGaWxlV29ya2VyOwoKfSx7Ii4uL2NyYzMyIjoyODQsIi4uL3NpZ25hdHVyZSI6MzAzLCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlciI6MzA4LCIuLi91dGY4IjozMTEsIi4uL3V0aWxzIjozMTJ9XSwyODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgY29tcHJlc3Npb25z
ID0gcmVxdWlyZSgnLi4vY29tcHJlc3Npb25zJyk7Cgp2YXIgWmlwRmlsZVdvcmtlciA9IHJlcXVpcmUoJy4vWmlwRmlsZVdvcmtlcicpOwovKioKICogRmluZCB0aGUgY29tcHJlc3Npb24gdG8gdXNlLgogKiBAcGFyYW0ge1N0cmluZ30gZmlsZUNvbXByZXNzaW9uIHRoZSBjb21wcmVzc2lvbiBkZWZpbmVkIGF0IHRoZSBmaWxlIGxldmVsLCBpZiBhbnkuCiAqIEBwYXJhbSB7U3RyaW5nfSB6aXBDb21wcmVzc2lvbiB0aGUgY29tcHJlc3Npb24gZGVmaW5lZCBhdCB0aGUgbG9hZCgpIGxldmVsLgogKiBAcmV0dXJuIHtPYmplY3R9
IHRoZSBjb21wcmVzc2lvbiBvYmplY3QgdG8gdXNlLgogKi8KCgp2YXIgZ2V0Q29tcHJlc3Npb24gPSBmdW5jdGlvbiBnZXRDb21wcmVzc2lvbihmaWxlQ29tcHJlc3Npb24sIHppcENvbXByZXNzaW9uKSB7CiAgdmFyIGNvbXByZXNzaW9uTmFtZSA9IGZpbGVDb21wcmVzc2lvbiB8fCB6aXBDb21wcmVzc2lvbjsKICB2YXIgY29tcHJlc3Npb24gPSBjb21wcmVzc2lvbnNbY29tcHJlc3Npb25OYW1lXTsKCiAgaWYgKCFjb21wcmVzc2lvbikgewogICAgdGhyb3cgbmV3IEVycm9yKGNvbXByZXNzaW9uTmFtZSArICIgaXMgbm90IGEg
dmFsaWQgY29tcHJlc3Npb24gbWV0aG9kICEiKTsKICB9CgogIHJldHVybiBjb21wcmVzc2lvbjsKfTsKLyoqCiAqIENyZWF0ZSBhIHdvcmtlciB0byBnZW5lcmF0ZSBhIHppcCBmaWxlLgogKiBAcGFyYW0ge0pTWmlwfSB6aXAgdGhlIEpTWmlwIGluc3RhbmNlIGF0IHRoZSByaWdodCByb290IGxldmVsLgogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0byBnZW5lcmF0ZSB0aGUgemlwIGZpbGUuCiAqIEBwYXJhbSB7U3RyaW5nfSBjb21tZW50IHRoZSBjb21tZW50IHRvIHVzZS4KICovCgoKZXhwb3J0cy5nZW5lcmF0ZVdvcmtl
ciA9IGZ1bmN0aW9uICh6aXAsIG9wdGlvbnMsIGNvbW1lbnQpIHsKICB2YXIgemlwRmlsZVdvcmtlciA9IG5ldyBaaXBGaWxlV29ya2VyKG9wdGlvbnMuc3RyZWFtRmlsZXMsIGNvbW1lbnQsIG9wdGlvbnMucGxhdGZvcm0sIG9wdGlvbnMuZW5jb2RlRmlsZU5hbWUpOwogIHZhciBlbnRyaWVzQ291bnQgPSAwOwoKICB0cnkgewogICAgemlwLmZvckVhY2goZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCwgZmlsZSkgewogICAgICBlbnRyaWVzQ291bnQrKzsKICAgICAgdmFyIGNvbXByZXNzaW9uID0gZ2V0Q29tcHJlc3Npb24oZmlsZS5v
cHRpb25zLmNvbXByZXNzaW9uLCBvcHRpb25zLmNvbXByZXNzaW9uKTsKICAgICAgdmFyIGNvbXByZXNzaW9uT3B0aW9ucyA9IGZpbGUub3B0aW9ucy5jb21wcmVzc2lvbk9wdGlvbnMgfHwgb3B0aW9ucy5jb21wcmVzc2lvbk9wdGlvbnMgfHwge307CiAgICAgIHZhciBkaXIgPSBmaWxlLmRpciwKICAgICAgICAgIGRhdGUgPSBmaWxlLmRhdGU7CgogICAgICBmaWxlLl9jb21wcmVzc1dvcmtlcihjb21wcmVzc2lvbiwgY29tcHJlc3Npb25PcHRpb25zKS53aXRoU3RyZWFtSW5mbygiZmlsZSIsIHsKICAgICAgICBuYW1lOiByZWxh
dGl2ZVBhdGgsCiAgICAgICAgZGlyOiBkaXIsCiAgICAgICAgZGF0ZTogZGF0ZSwKICAgICAgICBjb21tZW50OiBmaWxlLmNvbW1lbnQgfHwgIiIsCiAgICAgICAgdW5peFBlcm1pc3Npb25zOiBmaWxlLnVuaXhQZXJtaXNzaW9ucywKICAgICAgICBkb3NQZXJtaXNzaW9uczogZmlsZS5kb3NQZXJtaXNzaW9ucwogICAgICB9KS5waXBlKHppcEZpbGVXb3JrZXIpOwogICAgfSk7CiAgICB6aXBGaWxlV29ya2VyLmVudHJpZXNDb3VudCA9IGVudHJpZXNDb3VudDsKICB9IGNhdGNoIChlKSB7CiAgICB6aXBGaWxlV29ya2VyLmVycm9y
KGUpOwogIH0KCiAgcmV0dXJuIHppcEZpbGVXb3JrZXI7Cn07Cgp9LHsiLi4vY29tcHJlc3Npb25zIjoyODMsIi4vWmlwRmlsZVdvcmtlciI6Mjg4fV0sMjkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovKioKICogUmVwcmVzZW50YXRpb24gYSBvZiB6aXAgZmlsZSBpbiBqcwogKiBAY29uc3RydWN0b3IKICovCgpmdW5jdGlvbiBKU1ppcCgpIHsKICAvLyBpZiB0aGlzIGNvbnN0cnVjdG9yIGlzwqB1c2VkIHdpdGhvdXTCoGBuZXdgLCBpdMKgYWRkcyBgbmV3YCBiZWZvcmXCoGl0c2Vs
ZjoKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSlNaaXApKSB7CiAgICByZXR1cm4gbmV3IEpTWmlwKCk7CiAgfQoKICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgdGhyb3cgbmV3IEVycm9yKCJUaGUgY29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuIik7CiAgfSAvLyBvYmplY3QgY29udGFpbmluZyB0aGUgZmlsZXMgOgogIC8vIHsKICAvLyAgICJmb2xkZXIvIiA6IHsuLi59LAogIC8vICAgImZvbGRlci9kYXRh
LnR4dCIgOiB7Li4ufQogIC8vIH0KCgogIHRoaXMuZmlsZXMgPSB7fTsKICB0aGlzLmNvbW1lbnQgPSBudWxsOyAvLyBXaGVyZSB3ZSBhcmUgaW4gdGhlIGhpZXJhcmNoeQoKICB0aGlzLnJvb3QgPSAiIjsKCiAgdGhpcy5jbG9uZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBuZXdPYmogPSBuZXcgSlNaaXAoKTsKCiAgICBmb3IgKHZhciBpIGluIHRoaXMpIHsKICAgICAgaWYgKHR5cGVvZiB0aGlzW2ldICE9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgbmV3T2JqW2ldID0gdGhpc1tpXTsKICAgICAgfQogICAgfQoKICAgIHJldHVy
biBuZXdPYmo7CiAgfTsKfQoKSlNaaXAucHJvdG90eXBlID0gcmVxdWlyZSgnLi9vYmplY3QnKTsKSlNaaXAucHJvdG90eXBlLmxvYWRBc3luYyA9IHJlcXVpcmUoJy4vbG9hZCcpOwpKU1ppcC5zdXBwb3J0ID0gcmVxdWlyZSgnLi9zdXBwb3J0Jyk7CkpTWmlwLmRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpOyAvLyBUT0RPIGZpbmQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzIHZlcnNpb24sCi8vIGEgcmVxdWlyZSgncGFja2FnZS5qc29uJykudmVyc2lvbiBkb2Vzbid0IHdvcmsgd2l0aCB3ZWJwYWNrLCBzZWUg
IzMyNwoKSlNaaXAudmVyc2lvbiA9ICIzLjUuMCI7CgpKU1ppcC5sb2FkQXN5bmMgPSBmdW5jdGlvbiAoY29udGVudCwgb3B0aW9ucykgewogIHJldHVybiBuZXcgSlNaaXAoKS5sb2FkQXN5bmMoY29udGVudCwgb3B0aW9ucyk7Cn07CgpKU1ppcC5leHRlcm5hbCA9IHJlcXVpcmUoIi4vZXh0ZXJuYWwiKTsKbW9kdWxlLmV4cG9ydHMgPSBKU1ppcDsKCn0seyIuL2RlZmF1bHRzIjoyODUsIi4vZXh0ZXJuYWwiOjI4NiwiLi9sb2FkIjoyOTEsIi4vb2JqZWN0IjoyOTUsIi4vc3VwcG9ydCI6MzEwfV0sMjkxOltmdW5jdGlvbihyZXF1
aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpOwoKdmFyIGV4dGVybmFsID0gcmVxdWlyZSgiLi9leHRlcm5hbCIpOwoKdmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTsKCnZhciBaaXBFbnRyaWVzID0gcmVxdWlyZSgnLi96aXBFbnRyaWVzJyk7Cgp2YXIgQ3JjMzJQcm9iZSA9IHJlcXVpcmUoJy4vc3RyZWFtL0NyYzMyUHJvYmUnKTsKCnZhciBub2RlanNVdGlscyA9IHJlcXVpcmUoIi4vbm9kZWpz
VXRpbHMiKTsKLyoqCiAqIENoZWNrIHRoZSBDUkMzMiBvZiBhbiBlbnRyeS4KICogQHBhcmFtIHtaaXBFbnRyeX0gemlwRW50cnkgdGhlIHppcCBlbnRyeSB0byBjaGVjay4KICogQHJldHVybiB7UHJvbWlzZX0gdGhlIHJlc3VsdC4KICovCgoKZnVuY3Rpb24gY2hlY2tFbnRyeUNSQzMyKHppcEVudHJ5KSB7CiAgcmV0dXJuIG5ldyBleHRlcm5hbC5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHZhciB3b3JrZXIgPSB6aXBFbnRyeS5kZWNvbXByZXNzZWQuZ2V0Q29udGVudFdvcmtlcigpLnBpcGUobmV3
IENyYzMyUHJvYmUoKSk7CiAgICB3b3JrZXIub24oImVycm9yIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmVqZWN0KGUpOwogICAgfSkub24oImVuZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHdvcmtlci5zdHJlYW1JbmZvLmNyYzMyICE9PSB6aXBFbnRyeS5kZWNvbXByZXNzZWQuY3JjMzIpIHsKICAgICAgICByZWplY3QobmV3IEVycm9yKCJDb3JydXB0ZWQgemlwIDogQ1JDMzIgbWlzbWF0Y2giKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzb2x2ZSgpOwogICAgICB9CiAgICB9KS5yZXN1bWUoKTsKICB9KTsKfQoK
bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGF0YSwgb3B0aW9ucykgewogIHZhciB6aXAgPSB0aGlzOwogIG9wdGlvbnMgPSB1dGlscy5leHRlbmQob3B0aW9ucyB8fCB7fSwgewogICAgYmFzZTY0OiBmYWxzZSwKICAgIGNoZWNrQ1JDMzI6IGZhbHNlLAogICAgb3B0aW1pemVkQmluYXJ5U3RyaW5nOiBmYWxzZSwKICAgIGNyZWF0ZUZvbGRlcnM6IGZhbHNlLAogICAgZGVjb2RlRmlsZU5hbWU6IHV0ZjgudXRmOGRlY29kZQogIH0pOwoKICBpZiAobm9kZWpzVXRpbHMuaXNOb2RlICYmIG5vZGVqc1V0aWxzLmlzU3RyZWFtKGRh
dGEpKSB7CiAgICByZXR1cm4gZXh0ZXJuYWwuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCJKU1ppcCBjYW4ndCBhY2NlcHQgYSBzdHJlYW0gd2hlbiBsb2FkaW5nIGEgemlwIGZpbGUuIikpOwogIH0KCiAgcmV0dXJuIHV0aWxzLnByZXBhcmVDb250ZW50KCJ0aGUgbG9hZGVkIHppcCBmaWxlIiwgZGF0YSwgdHJ1ZSwgb3B0aW9ucy5vcHRpbWl6ZWRCaW5hcnlTdHJpbmcsIG9wdGlvbnMuYmFzZTY0KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIgemlwRW50cmllcyA9IG5ldyBaaXBFbnRyaWVzKG9wdGlvbnMpOwogICAg
emlwRW50cmllcy5sb2FkKGRhdGEpOwogICAgcmV0dXJuIHppcEVudHJpZXM7CiAgfSkudGhlbihmdW5jdGlvbiBjaGVja0NSQzMyKHppcEVudHJpZXMpIHsKICAgIHZhciBwcm9taXNlcyA9IFtleHRlcm5hbC5Qcm9taXNlLnJlc29sdmUoemlwRW50cmllcyldOwogICAgdmFyIGZpbGVzID0gemlwRW50cmllcy5maWxlczsKCiAgICBpZiAob3B0aW9ucy5jaGVja0NSQzMyKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBwcm9taXNlcy5wdXNoKGNoZWNrRW50cnlDUkMzMihm
aWxlc1tpXSkpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGV4dGVybmFsLlByb21pc2UuYWxsKHByb21pc2VzKTsKICB9KS50aGVuKGZ1bmN0aW9uIGFkZEZpbGVzKHJlc3VsdHMpIHsKICAgIHZhciB6aXBFbnRyaWVzID0gcmVzdWx0cy5zaGlmdCgpOwogICAgdmFyIGZpbGVzID0gemlwRW50cmllcy5maWxlczsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBpbnB1dCA9IGZpbGVzW2ldOwogICAgICB6aXAuZmlsZShpbnB1dC5maWxlTmFtZVN0ciwgaW5wdXQuZGVjb21w
cmVzc2VkLCB7CiAgICAgICAgYmluYXJ5OiB0cnVlLAogICAgICAgIG9wdGltaXplZEJpbmFyeVN0cmluZzogdHJ1ZSwKICAgICAgICBkYXRlOiBpbnB1dC5kYXRlLAogICAgICAgIGRpcjogaW5wdXQuZGlyLAogICAgICAgIGNvbW1lbnQ6IGlucHV0LmZpbGVDb21tZW50U3RyLmxlbmd0aCA/IGlucHV0LmZpbGVDb21tZW50U3RyIDogbnVsbCwKICAgICAgICB1bml4UGVybWlzc2lvbnM6IGlucHV0LnVuaXhQZXJtaXNzaW9ucywKICAgICAgICBkb3NQZXJtaXNzaW9uczogaW5wdXQuZG9zUGVybWlzc2lvbnMsCiAgICAgICAgY3Jl
YXRlRm9sZGVyczogb3B0aW9ucy5jcmVhdGVGb2xkZXJzCiAgICAgIH0pOwogICAgfQoKICAgIGlmICh6aXBFbnRyaWVzLnppcENvbW1lbnQubGVuZ3RoKSB7CiAgICAgIHppcC5jb21tZW50ID0gemlwRW50cmllcy56aXBDb21tZW50OwogICAgfQoKICAgIHJldHVybiB6aXA7CiAgfSk7Cn07Cgp9LHsiLi9leHRlcm5hbCI6Mjg2LCIuL25vZGVqc1V0aWxzIjoyOTQsIi4vc3RyZWFtL0NyYzMyUHJvYmUiOjMwNSwiLi91dGY4IjozMTEsIi4vdXRpbHMiOjMxMiwiLi96aXBFbnRyaWVzIjozMTN9XSwyOTI6W2Z1bmN0aW9uKHJlcXVp
cmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKCcuLi9zdHJlYW0vR2VuZXJpY1dvcmtlcicpOwovKioKICogQSB3b3JrZXIgdGhhdCB1c2UgYSBub2RlanMgc3RyZWFtIGFzIHNvdXJjZS4KICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlbmFtZSB0aGUgbmFtZSBvZiB0aGUgZmlsZSBlbnRyeSBmb3IgdGhpcyBzdHJlYW0uCiAqIEBwYXJhbSB7UmVhZGFibGV9IHN0cmVhbSB0aGUgbm9k
ZWpzIHN0cmVhbS4KICovCgoKZnVuY3Rpb24gTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyKGZpbGVuYW1lLCBzdHJlYW0pIHsKICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgIk5vZGVqcyBzdHJlYW0gaW5wdXQgYWRhcHRlciBmb3IgIiArIGZpbGVuYW1lKTsKICB0aGlzLl91cHN0cmVhbUVuZGVkID0gZmFsc2U7CgogIHRoaXMuX2JpbmRTdHJlYW0oc3RyZWFtKTsKfQoKdXRpbHMuaW5oZXJpdHMoTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyLCBHZW5lcmljV29ya2VyKTsKLyoqCiAqIFByZXBhcmUgdGhlIHN0cmVhbSBhbmQgYmlu
ZCB0aGUgY2FsbGJhY2tzIG9uIGl0LgogKiBEbyB0aGlzIEFTQVAgb24gbm9kZSAwLjEwICEgQSBsYXp5IGJpbmRpbmcgZG9lc24ndCBhbHdheXMgd29yay4KICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbSB0aGUgbm9kZWpzIHN0cmVhbSB0byB1c2UuCiAqLwoKTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyLnByb3RvdHlwZS5fYmluZFN0cmVhbSA9IGZ1bmN0aW9uIChzdHJlYW0pIHsKICB2YXIgc2VsZiA9IHRoaXM7CiAgdGhpcy5fc3RyZWFtID0gc3RyZWFtOwogIHN0cmVhbS5wYXVzZSgpOwogIHN0cmVhbS5vbigiZGF0YSIsIGZ1
bmN0aW9uIChjaHVuaykgewogICAgc2VsZi5wdXNoKHsKICAgICAgZGF0YTogY2h1bmssCiAgICAgIG1ldGE6IHsKICAgICAgICBwZXJjZW50OiAwCiAgICAgIH0KICAgIH0pOwogIH0pLm9uKCJlcnJvciIsIGZ1bmN0aW9uIChlKSB7CiAgICBpZiAoc2VsZi5pc1BhdXNlZCkgewogICAgICB0aGlzLmdlbmVyYXRlZEVycm9yID0gZTsKICAgIH0gZWxzZSB7CiAgICAgIHNlbGYuZXJyb3IoZSk7CiAgICB9CiAgfSkub24oImVuZCIsIGZ1bmN0aW9uICgpIHsKICAgIGlmIChzZWxmLmlzUGF1c2VkKSB7CiAgICAgIHNlbGYuX3Vwc3Ry
ZWFtRW5kZWQgPSB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgc2VsZi5lbmQoKTsKICAgIH0KICB9KTsKfTsKCk5vZGVqc1N0cmVhbUlucHV0QWRhcHRlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKCFHZW5lcmljV29ya2VyLnByb3RvdHlwZS5wYXVzZS5jYWxsKHRoaXMpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB0aGlzLl9zdHJlYW0ucGF1c2UoKTsKCiAgcmV0dXJuIHRydWU7Cn07CgpOb2RlanNTdHJlYW1JbnB1dEFkYXB0ZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHsKICBp
ZiAoIUdlbmVyaWNXb3JrZXIucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAodGhpcy5fdXBzdHJlYW1FbmRlZCkgewogICAgdGhpcy5lbmQoKTsKICB9IGVsc2UgewogICAgdGhpcy5fc3RyZWFtLnJlc3VtZSgpOwogIH0KCiAgcmV0dXJuIHRydWU7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IE5vZGVqc1N0cmVhbUlucHV0QWRhcHRlcjsKCn0seyIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlciI6MzA4LCIuLi91dGlscyI6MzEyfV0sMjkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVs
ZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIFJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJykuUmVhZGFibGU7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdXRpbHMuaW5oZXJpdHMoTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlciwgUmVhZGFibGUpOwovKioKKiBBIG5vZGVqcyBzdHJlYW0gdXNpbmcgYSB3b3JrZXIgYXMgc291cmNlLgoqIEBzZWUgdGhlIFNvdXJjZVdyYXBwZXIgaW4gaHR0cDovL25vZGVqcy5vcmcvYXBpL3N0cmVhbS5odG1sCiogQGNvbnN0cnVjdG9yCiogQHBhcmFt
IHtTdHJlYW1IZWxwZXJ9IGhlbHBlciB0aGUgaGVscGVyIHdyYXBwaW5nIHRoZSB3b3JrZXIKKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgbm9kZWpzIHN0cmVhbSBvcHRpb25zCiogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlQ2IgdGhlIHVwZGF0ZSBjYWxsYmFjay4KKi8KCmZ1bmN0aW9uIE5vZGVqc1N0cmVhbU91dHB1dEFkYXB0ZXIoaGVscGVyLCBvcHRpb25zLCB1cGRhdGVDYikgewogIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7CiAgdGhpcy5faGVscGVyID0gaGVscGVyOwogIHZhciBzZWxmID0gdGhpczsK
ICBoZWxwZXIub24oImRhdGEiLCBmdW5jdGlvbiAoZGF0YSwgbWV0YSkgewogICAgaWYgKCFzZWxmLnB1c2goZGF0YSkpIHsKICAgICAgc2VsZi5faGVscGVyLnBhdXNlKCk7CiAgICB9CgogICAgaWYgKHVwZGF0ZUNiKSB7CiAgICAgIHVwZGF0ZUNiKG1ldGEpOwogICAgfQogIH0pLm9uKCJlcnJvciIsIGZ1bmN0aW9uIChlKSB7CiAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZSk7CiAgfSkub24oImVuZCIsIGZ1bmN0aW9uICgpIHsKICAgIHNlbGYucHVzaChudWxsKTsKICB9KTsKfQoKTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlci5w
cm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAoKSB7CiAgdGhpcy5faGVscGVyLnJlc3VtZSgpOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBOb2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyOwoKfSx7Ii4uL3V0aWxzIjozMTIsInJlYWRhYmxlLXN0cmVhbSI6Mjk2fV0sMjk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChCdWZmZXIpewondXNlIHN0cmljdCc7Cgptb2R1bGUuZXhwb3J0cyA9IHsKICAvKioKICAgKiBUcnVlIGlmIHRoaXMgaXMgcnVubmluZyBpbiBOb2RlanMsIHdpbGwgYmUgdW5kZWZp
bmVkIGluIGEgYnJvd3Nlci4KICAgKiBJbiBhIGJyb3dzZXIsIGJyb3dzZXJpZnkgd29uJ3QgaW5jbHVkZSB0aGlzIGZpbGUgYW5kIHRoZSB3aG9sZSBtb2R1bGUKICAgKiB3aWxsIGJlIHJlc29sdmVkIGFuIGVtcHR5IG9iamVjdC4KICAgKi8KICBpc05vZGU6IHR5cGVvZiBCdWZmZXIgIT09ICJ1bmRlZmluZWQiLAoKICAvKioKICAgKiBDcmVhdGUgYSBuZXcgbm9kZWpzIEJ1ZmZlciBmcm9tIGFuIGV4aXN0aW5nIGNvbnRlbnQuCiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgdGhlIGRhdGEgdG8gcGFzcyB0byB0aGUgY29uc3Ry
dWN0b3IuCiAgICogQHBhcmFtIHtTdHJpbmd9IGVuY29kaW5nIHRoZSBlbmNvZGluZyB0byB1c2UuCiAgICogQHJldHVybiB7QnVmZmVyfSBhIG5ldyBCdWZmZXIuCiAgICovCiAgbmV3QnVmZmVyRnJvbTogZnVuY3Rpb24gbmV3QnVmZmVyRnJvbShkYXRhLCBlbmNvZGluZykgewogICAgaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20pIHsKICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gIm51
bWJlciIpIHsKICAgICAgICAvLyBTYWZlZ3VhcmQgZm9yIG9sZCBOb2RlLmpzIHZlcnNpb25zLiBPbiBuZXdlciB2ZXJzaW9ucywKICAgICAgICAvLyBCdWZmZXIuZnJvbShudW1iZXIpIC8gQnVmZmVyKG51bWJlciwgZW5jb2RpbmcpIGFscmVhZHkgdGhyb3cuCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJUaGUgXCJkYXRhXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXIiKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG5ldyBCdWZmZXIoZGF0YSwgZW5jb2RpbmcpOwogICAgfQogIH0sCgogIC8qKgogICAqIENyZWF0ZSBh
IG5ldyBub2RlanMgQnVmZmVyIHdpdGggdGhlIHNwZWNpZmllZCBzaXplLgogICAqIEBwYXJhbSB7SW50ZWdlcn0gc2l6ZSB0aGUgc2l6ZSBvZiB0aGUgYnVmZmVyLgogICAqIEByZXR1cm4ge0J1ZmZlcn0gYSBuZXcgQnVmZmVyLgogICAqLwogIGFsbG9jQnVmZmVyOiBmdW5jdGlvbiBhbGxvY0J1ZmZlcihzaXplKSB7CiAgICBpZiAoQnVmZmVyLmFsbG9jKSB7CiAgICAgIHJldHVybiBCdWZmZXIuYWxsb2Moc2l6ZSk7CiAgICB9IGVsc2UgewogICAgICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKTsKICAgICAgYnVmLmZpbGwo
MCk7CiAgICAgIHJldHVybiBidWY7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogRmluZCBvdXQgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyLgogICAqIEBwYXJhbSB7T2JqZWN0fSBiIHRoZSBvYmplY3QgdG8gdGVzdC4KICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYSBCdWZmZXIsIGZhbHNlIG90aGVyd2lzZS4KICAgKi8KICBpc0J1ZmZlcjogZnVuY3Rpb24gaXNCdWZmZXIoYikgewogICAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihiKTsKICB9LAogIGlzU3RyZWFtOiBmdW5jdGlvbiBpc1N0cmVh
bShvYmopIHsKICAgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iai5vbiA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2Ygb2JqLnBhdXNlID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBvYmoucmVzdW1lID09PSAiZnVuY3Rpb24iOwogIH0KfTsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiYnVmZmVyIjoyMTZ9XSwyOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRmOCA9IHJlcXVpcmUoJy4vdXRmOCcpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgn
Li91dGlscycpOwoKdmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKCcuL3N0cmVhbS9HZW5lcmljV29ya2VyJyk7Cgp2YXIgU3RyZWFtSGVscGVyID0gcmVxdWlyZSgnLi9zdHJlYW0vU3RyZWFtSGVscGVyJyk7Cgp2YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7Cgp2YXIgQ29tcHJlc3NlZE9iamVjdCA9IHJlcXVpcmUoJy4vY29tcHJlc3NlZE9iamVjdCcpOwoKdmFyIFppcE9iamVjdCA9IHJlcXVpcmUoJy4vemlwT2JqZWN0Jyk7Cgp2YXIgZ2VuZXJhdGUgPSByZXF1aXJlKCIuL2dlbmVyYXRlIik7Cgp2YXIg
bm9kZWpzVXRpbHMgPSByZXF1aXJlKCIuL25vZGVqc1V0aWxzIik7Cgp2YXIgTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyID0gcmVxdWlyZSgiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyIik7Ci8qKgogKiBBZGQgYSBmaWxlIGluIHRoZSBjdXJyZW50IGZvbGRlci4KICogQHByaXZhdGUKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIGZpbGUKICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGRhdGEgdGhlIGRhdGEgb2YgdGhlIGZpbGUKICogQHBhcmFt
IHtPYmplY3R9IG9yaWdpbmFsT3B0aW9ucyB0aGUgb3B0aW9ucyBvZiB0aGUgZmlsZQogKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBuZXcgZmlsZS4KICovCgoKdmFyIGZpbGVBZGQgPSBmdW5jdGlvbiBmaWxlQWRkKG5hbWUsIGRhdGEsIG9yaWdpbmFsT3B0aW9ucykgewogIC8vIGJlIHN1cmUgc3ViIGZvbGRlcnMgZXhpc3QKICB2YXIgZGF0YVR5cGUgPSB1dGlscy5nZXRUeXBlT2YoZGF0YSksCiAgICAgIHBhcmVudDsKICAvKgogICAqIENvcnJlY3Qgb3B0aW9ucy4KICAgKi8KCiAgdmFyIG8gPSB1dGlscy5leHRlbmQob3JpZ2lu
YWxPcHRpb25zIHx8IHt9LCBkZWZhdWx0cyk7CiAgby5kYXRlID0gby5kYXRlIHx8IG5ldyBEYXRlKCk7CgogIGlmIChvLmNvbXByZXNzaW9uICE9PSBudWxsKSB7CiAgICBvLmNvbXByZXNzaW9uID0gby5jb21wcmVzc2lvbi50b1VwcGVyQ2FzZSgpOwogIH0KCiAgaWYgKHR5cGVvZiBvLnVuaXhQZXJtaXNzaW9ucyA9PT0gInN0cmluZyIpIHsKICAgIG8udW5peFBlcm1pc3Npb25zID0gcGFyc2VJbnQoby51bml4UGVybWlzc2lvbnMsIDgpOwogIH0gLy8gVU5YX0lGRElSICAwMDQwMDAwIHNlZSB6aXBpbmZvLmMKCgogIGlmIChv
LnVuaXhQZXJtaXNzaW9ucyAmJiBvLnVuaXhQZXJtaXNzaW9ucyAmIDB4NDAwMCkgewogICAgby5kaXIgPSB0cnVlOwogIH0gLy8gQml0IDQgICAgRGlyZWN0b3J5CgoKICBpZiAoby5kb3NQZXJtaXNzaW9ucyAmJiBvLmRvc1Blcm1pc3Npb25zICYgMHgwMDEwKSB7CiAgICBvLmRpciA9IHRydWU7CiAgfQoKICBpZiAoby5kaXIpIHsKICAgIG5hbWUgPSBmb3JjZVRyYWlsaW5nU2xhc2gobmFtZSk7CiAgfQoKICBpZiAoby5jcmVhdGVGb2xkZXJzICYmIChwYXJlbnQgPSBwYXJlbnRGb2xkZXIobmFtZSkpKSB7CiAgICBmb2xkZXJB
ZGQuY2FsbCh0aGlzLCBwYXJlbnQsIHRydWUpOwogIH0KCiAgdmFyIGlzVW5pY29kZVN0cmluZyA9IGRhdGFUeXBlID09PSAic3RyaW5nIiAmJiBvLmJpbmFyeSA9PT0gZmFsc2UgJiYgby5iYXNlNjQgPT09IGZhbHNlOwoKICBpZiAoIW9yaWdpbmFsT3B0aW9ucyB8fCB0eXBlb2Ygb3JpZ2luYWxPcHRpb25zLmJpbmFyeSA9PT0gInVuZGVmaW5lZCIpIHsKICAgIG8uYmluYXJ5ID0gIWlzVW5pY29kZVN0cmluZzsKICB9CgogIHZhciBpc0NvbXByZXNzZWRFbXB0eSA9IGRhdGEgaW5zdGFuY2VvZiBDb21wcmVzc2VkT2JqZWN0ICYm
IGRhdGEudW5jb21wcmVzc2VkU2l6ZSA9PT0gMDsKCiAgaWYgKGlzQ29tcHJlc3NlZEVtcHR5IHx8IG8uZGlyIHx8ICFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSB7CiAgICBvLmJhc2U2NCA9IGZhbHNlOwogICAgby5iaW5hcnkgPSB0cnVlOwogICAgZGF0YSA9ICIiOwogICAgby5jb21wcmVzc2lvbiA9ICJTVE9SRSI7CiAgICBkYXRhVHlwZSA9ICJzdHJpbmciOwogIH0KICAvKgogICAqIENvbnZlcnQgY29udGVudCB0byBmaXQuCiAgICovCgoKICB2YXIgemlwT2JqZWN0Q29udGVudCA9IG51bGw7CgogIGlmIChkYXRhIGlu
c3RhbmNlb2YgQ29tcHJlc3NlZE9iamVjdCB8fCBkYXRhIGluc3RhbmNlb2YgR2VuZXJpY1dvcmtlcikgewogICAgemlwT2JqZWN0Q29udGVudCA9IGRhdGE7CiAgfSBlbHNlIGlmIChub2RlanNVdGlscy5pc05vZGUgJiYgbm9kZWpzVXRpbHMuaXNTdHJlYW0oZGF0YSkpIHsKICAgIHppcE9iamVjdENvbnRlbnQgPSBuZXcgTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyKG5hbWUsIGRhdGEpOwogIH0gZWxzZSB7CiAgICB6aXBPYmplY3RDb250ZW50ID0gdXRpbHMucHJlcGFyZUNvbnRlbnQobmFtZSwgZGF0YSwgby5iaW5hcnksIG8u
b3B0aW1pemVkQmluYXJ5U3RyaW5nLCBvLmJhc2U2NCk7CiAgfQoKICB2YXIgb2JqZWN0ID0gbmV3IFppcE9iamVjdChuYW1lLCB6aXBPYmplY3RDb250ZW50LCBvKTsKICB0aGlzLmZpbGVzW25hbWVdID0gb2JqZWN0OwogIC8qCiAgVE9ETzogd2UgY2FuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uIGJlY2F1c2Ugd2UgaGF2ZSBhc3luYyBwcm9taXNlcwogICh3ZSBjYW4gaGF2ZSBhIHByb21pc2Ugb2YgYSBEYXRlKCkgZm9yIGV4YW1wbGUpIGJ1dCByZXR1cm5pbmcgYQogIHByb21pc2UgaXMgdXNlbGVzcyBiZWNhdXNlIGZpbGUobmFt
ZSwgZGF0YSkgcmV0dXJucyB0aGUgSlNaaXAKICBvYmplY3QgZm9yIGNoYWluaW5nLiBTaG91bGQgd2UgYnJlYWsgdGhhdCB0byBhbGxvdyB0aGUgdXNlcgogIHRvIGNhdGNoIHRoZSBlcnJvciA/CiAgIHJldHVybiBleHRlcm5hbC5Qcm9taXNlLnJlc29sdmUoemlwT2JqZWN0Q29udGVudCkKICAudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBvYmplY3Q7CiAgfSk7CiAgKi8KfTsKLyoqCiAqIEZpbmQgdGhlIHBhcmVudCBmb2xkZXIgb2YgdGhlIHBhdGguCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRo
IHRoZSBwYXRoIHRvIHVzZQogKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBwYXJlbnQgZm9sZGVyLCBvciAiIgogKi8KCgp2YXIgcGFyZW50Rm9sZGVyID0gZnVuY3Rpb24gcGFyZW50Rm9sZGVyKHBhdGgpIHsKICBpZiAocGF0aC5zbGljZSgtMSkgPT09ICcvJykgewogICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGVuZ3RoIC0gMSk7CiAgfQoKICB2YXIgbGFzdFNsYXNoID0gcGF0aC5sYXN0SW5kZXhPZignLycpOwogIHJldHVybiBsYXN0U2xhc2ggPiAwID8gcGF0aC5zdWJzdHJpbmcoMCwgbGFzdFNsYXNoKSA6ICIi
Owp9OwovKioKICogUmV0dXJucyB0aGUgcGF0aCB3aXRoIGEgc2xhc2ggYXQgdGhlIGVuZC4KICogQHByaXZhdGUKICogQHBhcmFtIHtTdHJpbmd9IHBhdGggdGhlIHBhdGggdG8gY2hlY2suCiAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHBhdGggd2l0aCBhIHRyYWlsaW5nIHNsYXNoLgogKi8KCgp2YXIgZm9yY2VUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gZm9yY2VUcmFpbGluZ1NsYXNoKHBhdGgpIHsKICAvLyBDaGVjayB0aGUgbmFtZSBlbmRzIHdpdGggYSAvCiAgaWYgKHBhdGguc2xpY2UoLTEpICE9PSAiLyIpIHsKICAgIHBh
dGggKz0gIi8iOyAvLyBJRSBkb2Vzbid0IGxpa2Ugc3Vic3RyKC0xKQogIH0KCiAgcmV0dXJuIHBhdGg7Cn07Ci8qKgogKiBBZGQgYSAoc3ViKSBmb2xkZXIgaW4gdGhlIGN1cnJlbnQgZm9sZGVyLgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgZm9sZGVyJ3MgbmFtZQogKiBAcGFyYW0ge2Jvb2xlYW49fSBbY3JlYXRlRm9sZGVyc10gSWYgdHJ1ZSwgYXV0b21hdGljYWxseSBjcmVhdGUgc3ViCiAqICBmb2xkZXJzLiBEZWZhdWx0cyB0byBmYWxzZS4KICogQHJldHVybiB7T2JqZWN0fSB0aGUgbmV3IGZv
bGRlci4KICovCgoKdmFyIGZvbGRlckFkZCA9IGZ1bmN0aW9uIGZvbGRlckFkZChuYW1lLCBjcmVhdGVGb2xkZXJzKSB7CiAgY3JlYXRlRm9sZGVycyA9IHR5cGVvZiBjcmVhdGVGb2xkZXJzICE9PSAndW5kZWZpbmVkJyA/IGNyZWF0ZUZvbGRlcnMgOiBkZWZhdWx0cy5jcmVhdGVGb2xkZXJzOwogIG5hbWUgPSBmb3JjZVRyYWlsaW5nU2xhc2gobmFtZSk7IC8vIERvZXMgdGhpcyBmb2xkZXIgYWxyZWFkeSBleGlzdD8KCiAgaWYgKCF0aGlzLmZpbGVzW25hbWVdKSB7CiAgICBmaWxlQWRkLmNhbGwodGhpcywgbmFtZSwgbnVsbCwg
ewogICAgICBkaXI6IHRydWUsCiAgICAgIGNyZWF0ZUZvbGRlcnM6IGNyZWF0ZUZvbGRlcnMKICAgIH0pOwogIH0KCiAgcmV0dXJuIHRoaXMuZmlsZXNbbmFtZV07Cn07Ci8qKgoqIENyb3NzLXdpbmRvdywgY3Jvc3MtTm9kZS1jb250ZXh0IHJlZ3VsYXIgZXhwcmVzc2lvbiBkZXRlY3Rpb24KKiBAcGFyYW0gIHtPYmplY3R9ICBvYmplY3QgQW55dGhpbmcKKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgcmVndWxhciBleHByZXNzaW9uLAoqIGZhbHNlIG90aGVyd2lzZQoqLwoKCmZ1bmN0
aW9uIGlzUmVnRXhwKG9iamVjdCkgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gIltvYmplY3QgUmVnRXhwXSI7Cn0gLy8gcmV0dXJuIHRoZSBhY3R1YWwgcHJvdG90eXBlIG9mIEpTWmlwCgoKdmFyIG91dCA9IHsKICAvKioKICAgKiBAc2VlIGxvYWRBc3luYwogICAqLwogIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3Vp
ZGUuIik7CiAgfSwKCiAgLyoqCiAgICogQ2FsbCBhIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBlYWNoIGVudHJ5IGF0IHRoaXMgZm9sZGVyIGxldmVsLgogICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIHRoZSBjYWxsYmFjayBmdW5jdGlvbjoKICAgKiBmdW5jdGlvbiAocmVsYXRpdmVQYXRoLCBmaWxlKSB7Li4ufQogICAqIEl0IHRha2VzIDIgYXJndW1lbnRzIDogdGhlIHJlbGF0aXZlIHBhdGggYW5kIHRoZSBmaWxlLgogICAqLwogIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2IpIHsKICAgIHZhciBmaWxlbmFtZSwgcmVsYXRp
dmVQYXRoLCBmaWxlOwoKICAgIGZvciAoZmlsZW5hbWUgaW4gdGhpcy5maWxlcykgewogICAgICBpZiAoIXRoaXMuZmlsZXMuaGFzT3duUHJvcGVydHkoZmlsZW5hbWUpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGZpbGUgPSB0aGlzLmZpbGVzW2ZpbGVuYW1lXTsKICAgICAgcmVsYXRpdmVQYXRoID0gZmlsZW5hbWUuc2xpY2UodGhpcy5yb290Lmxlbmd0aCwgZmlsZW5hbWUubGVuZ3RoKTsKCiAgICAgIGlmIChyZWxhdGl2ZVBhdGggJiYgZmlsZW5hbWUuc2xpY2UoMCwgdGhpcy5yb290Lmxlbmd0aCkgPT09
IHRoaXMucm9vdCkgewogICAgICAgIC8vIHRoZSBmaWxlIGlzIGluIHRoZSBjdXJyZW50IHJvb3QKICAgICAgICBjYihyZWxhdGl2ZVBhdGgsIGZpbGUpOyAvLyBUT0RPIHJldmVyc2UgdGhlIHBhcmFtZXRlcnMgPyBuZWVkIHRvIGJlIGNsZWFuIEFORCBjb25zaXN0ZW50IHdpdGggdGhlIGZpbHRlciBzZWFyY2ggZm4uLi4KICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIEZpbHRlciBuZXN0ZWQgZmlsZXMvZm9sZGVycyB3aXRoIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24uCiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2VhcmNo
IHRoZSBwcmVkaWNhdGUgdG8gdXNlIDoKICAgKiBmdW5jdGlvbiAocmVsYXRpdmVQYXRoLCBmaWxlKSB7Li4ufQogICAqIEl0IHRha2VzIDIgYXJndW1lbnRzIDogdGhlIHJlbGF0aXZlIHBhdGggYW5kIHRoZSBmaWxlLgogICAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiBtYXRjaGluZyBlbGVtZW50cy4KICAgKi8KICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihzZWFyY2gpIHsKICAgIHZhciByZXN1bHQgPSBbXTsKICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAocmVsYXRpdmVQYXRoLCBlbnRyeSkgewogICAgICBpZiAo
c2VhcmNoKHJlbGF0aXZlUGF0aCwgZW50cnkpKSB7CiAgICAgICAgLy8gdGhlIGZpbGUgbWF0Y2hlcyB0aGUgZnVuY3Rpb24KICAgICAgICByZXN1bHQucHVzaChlbnRyeSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9LAoKICAvKioKICAgKiBBZGQgYSBmaWxlIHRvIHRoZSB6aXAgZmlsZSwgb3Igc2VhcmNoIGEgZmlsZS4KICAgKiBAcGFyYW0gICB7c3RyaW5nfFJlZ0V4cH0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZmlsZSB0byBhZGQgKGlmIGRhdGEgaXMgZGVmaW5lZCksCiAgICogdGhlIG5hbWUgb2Yg
dGhlIGZpbGUgdG8gZmluZCAoaWYgbm8gZGF0YSkgb3IgYSByZWdleCB0byBtYXRjaCBmaWxlcy4KICAgKiBAcGFyYW0gICB7U3RyaW5nfEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBkYXRhICBUaGUgZmlsZSBkYXRhLCBlaXRoZXIgcmF3IG9yIGJhc2U2NCBlbmNvZGVkCiAgICogQHBhcmFtICAge09iamVjdH0gbyAgICAgRmlsZSBvcHRpb25zCiAgICogQHJldHVybiAge0pTWmlwfE9iamVjdHxBcnJheX0gdGhpcyBKU1ppcCBvYmplY3QgKHdoZW4gYWRkaW5nIGEgZmlsZSksCiAgICogYSBmaWxlICh3aGVuIHNlYXJj
aGluZyBieSBzdHJpbmcpIG9yIGFuIGFycmF5IG9mIGZpbGVzICh3aGVuIHNlYXJjaGluZyBieSByZWdleCkuCiAgICovCiAgZmlsZTogZnVuY3Rpb24gZmlsZShuYW1lLCBkYXRhLCBvKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICBpZiAoaXNSZWdFeHAobmFtZSkpIHsKICAgICAgICB2YXIgcmVnZXhwID0gbmFtZTsKICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCwgZmlsZSkgewogICAgICAgICAgcmV0dXJuICFmaWxlLmRpciAmJiByZWdleHAudGVzdChy
ZWxhdGl2ZVBhdGgpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHRleHQKICAgICAgICB2YXIgb2JqID0gdGhpcy5maWxlc1t0aGlzLnJvb3QgKyBuYW1lXTsKCiAgICAgICAgaWYgKG9iaiAmJiAhb2JqLmRpcikgewogICAgICAgICAgcmV0dXJuIG9iajsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IDogd2UgaGF2ZSBkYXRhICEKICAgICAgbmFtZSA9IHRoaXMucm9v
dCArIG5hbWU7CiAgICAgIGZpbGVBZGQuY2FsbCh0aGlzLCBuYW1lLCBkYXRhLCBvKTsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBBZGQgYSBkaXJlY3RvcnkgdG8gdGhlIHppcCBmaWxlLCBvciBzZWFyY2guCiAgICogQHBhcmFtICAge1N0cmluZ3xSZWdFeHB9IGFyZyBUaGUgbmFtZSBvZiB0aGUgZGlyZWN0b3J5IHRvIGFkZCwgb3IgYSByZWdleCB0byBzZWFyY2ggZm9sZGVycy4KICAgKiBAcmV0dXJuICB7SlNaaXB9IGFuIG9iamVjdCB3aXRoIHRoZSBuZXcgZGlyZWN0b3J5IGFzIHRoZSByb290
LCBvciBhbiBhcnJheSBjb250YWluaW5nIG1hdGNoaW5nIGZvbGRlcnMuCiAgICovCiAgZm9sZGVyOiBmdW5jdGlvbiBmb2xkZXIoYXJnKSB7CiAgICBpZiAoIWFyZykgewogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBpZiAoaXNSZWdFeHAoYXJnKSkgewogICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCwgZmlsZSkgewogICAgICAgIHJldHVybiBmaWxlLmRpciAmJiBhcmcudGVzdChyZWxhdGl2ZVBhdGgpOwogICAgICB9KTsKICAgIH0gLy8gZWxzZSwgbmFtZSBpcyBhIG5ldyBmb2xk
ZXIKCgogICAgdmFyIG5hbWUgPSB0aGlzLnJvb3QgKyBhcmc7CiAgICB2YXIgbmV3Rm9sZGVyID0gZm9sZGVyQWRkLmNhbGwodGhpcywgbmFtZSk7IC8vIEFsbG93IGNoYWluaW5nIGJ5IHJldHVybmluZyBhIG5ldyBvYmplY3Qgd2l0aCB0aGlzIGZvbGRlciBhcyB0aGUgcm9vdAoKICAgIHZhciByZXQgPSB0aGlzLmNsb25lKCk7CiAgICByZXQucm9vdCA9IG5ld0ZvbGRlci5uYW1lOwogICAgcmV0dXJuIHJldDsKICB9LAoKICAvKioKICAgKiBEZWxldGUgYSBmaWxlLCBvciBhIGRpcmVjdG9yeSBhbmQgYWxsIHN1Yi1maWxlcywg
ZnJvbSB0aGUgemlwCiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gZGVsZXRlCiAgICogQHJldHVybiB7SlNaaXB9IHRoaXMgSlNaaXAgb2JqZWN0CiAgICovCiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkgewogICAgbmFtZSA9IHRoaXMucm9vdCArIG5hbWU7CiAgICB2YXIgZmlsZSA9IHRoaXMuZmlsZXNbbmFtZV07CgogICAgaWYgKCFmaWxlKSB7CiAgICAgIC8vIExvb2sgZm9yIGFueSBmb2xkZXJzCiAgICAgIGlmIChuYW1lLnNsaWNlKC0xKSAhPT0gIi8iKSB7CiAgICAg
ICAgbmFtZSArPSAiLyI7CiAgICAgIH0KCiAgICAgIGZpbGUgPSB0aGlzLmZpbGVzW25hbWVdOwogICAgfQoKICAgIGlmIChmaWxlICYmICFmaWxlLmRpcikgewogICAgICAvLyBmaWxlCiAgICAgIGRlbGV0ZSB0aGlzLmZpbGVzW25hbWVdOwogICAgfSBlbHNlIHsKICAgICAgLy8gbWF5YmUgYSBmb2xkZXIsIGRlbGV0ZSByZWN1cnNpdmVseQogICAgICB2YXIga2lkcyA9IHRoaXMuZmlsdGVyKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGZpbGUpIHsKICAgICAgICByZXR1cm4gZmlsZS5uYW1lLnNsaWNlKDAsIG5hbWUubGVuZ3Ro
KSA9PT0gbmFtZTsKICAgICAgfSk7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtpZHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBkZWxldGUgdGhpcy5maWxlc1traWRzW2ldLm5hbWVdOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogR2VuZXJhdGUgdGhlIGNvbXBsZXRlIHppcCBmaWxlCiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIG9wdGlvbnMgdG8gZ2VuZXJhdGUgdGhlIHppcCBmaWxlIDoKICAgKiAtIGNvbXByZXNzaW9uLCAiU1RPUkUiIGJ5IGRlZmF1bHQuCiAg
ICogLSB0eXBlLCAiYmFzZTY0IiBieSBkZWZhdWx0LiBWYWx1ZXMgYXJlIDogc3RyaW5nLCBiYXNlNjQsIHVpbnQ4YXJyYXksIGFycmF5YnVmZmVyLCBibG9iLgogICAqIEByZXR1cm4ge1N0cmluZ3xVaW50OEFycmF5fEFycmF5QnVmZmVyfEJ1ZmZlcnxCbG9ifSB0aGUgemlwIGZpbGUKICAgKi8KICBnZW5lcmF0ZTogZnVuY3Rpb24gZ2VuZXJhdGUob3B0aW9ucykgewogICAgdGhyb3cgbmV3IEVycm9yKCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1
aWRlLiIpOwogIH0sCgogIC8qKgogICAqIEdlbmVyYXRlIHRoZSBjb21wbGV0ZSB6aXAgZmlsZSBhcyBhbiBpbnRlcm5hbCBzdHJlYW0uCiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIG9wdGlvbnMgdG8gZ2VuZXJhdGUgdGhlIHppcCBmaWxlIDoKICAgKiAtIGNvbXByZXNzaW9uLCAiU1RPUkUiIGJ5IGRlZmF1bHQuCiAgICogLSB0eXBlLCAiYmFzZTY0IiBieSBkZWZhdWx0LiBWYWx1ZXMgYXJlIDogc3RyaW5nLCBiYXNlNjQsIHVpbnQ4YXJyYXksIGFycmF5YnVmZmVyLCBibG9iLgogICAqIEByZXR1cm4ge1N0cmVh
bUhlbHBlcn0gdGhlIHN0cmVhbWVkIHppcCBmaWxlLgogICAqLwogIGdlbmVyYXRlSW50ZXJuYWxTdHJlYW06IGZ1bmN0aW9uIGdlbmVyYXRlSW50ZXJuYWxTdHJlYW0ob3B0aW9ucykgewogICAgdmFyIHdvcmtlciwKICAgICAgICBvcHRzID0ge307CgogICAgdHJ5IHsKICAgICAgb3B0cyA9IHV0aWxzLmV4dGVuZChvcHRpb25zIHx8IHt9LCB7CiAgICAgICAgc3RyZWFtRmlsZXM6IGZhbHNlLAogICAgICAgIGNvbXByZXNzaW9uOiAiU1RPUkUiLAogICAgICAgIGNvbXByZXNzaW9uT3B0aW9uczogbnVsbCwKICAgICAgICB0eXBl
OiAiIiwKICAgICAgICBwbGF0Zm9ybTogIkRPUyIsCiAgICAgICAgY29tbWVudDogbnVsbCwKICAgICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL3ppcCcsCiAgICAgICAgZW5jb2RlRmlsZU5hbWU6IHV0ZjgudXRmOGVuY29kZQogICAgICB9KTsKICAgICAgb3B0cy50eXBlID0gb3B0cy50eXBlLnRvTG93ZXJDYXNlKCk7CiAgICAgIG9wdHMuY29tcHJlc3Npb24gPSBvcHRzLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCk7IC8vICJiaW5hcnlzdHJpbmciIGlzIHByZWZlcnJlZCBidXQgdGhlIGludGVybmFscyB1c2UgInN0cmlu
ZyIuCgogICAgICBpZiAob3B0cy50eXBlID09PSAiYmluYXJ5c3RyaW5nIikgewogICAgICAgIG9wdHMudHlwZSA9ICJzdHJpbmciOwogICAgICB9CgogICAgICBpZiAoIW9wdHMudHlwZSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiTm8gb3V0cHV0IHR5cGUgc3BlY2lmaWVkLiIpOwogICAgICB9CgogICAgICB1dGlscy5jaGVja1N1cHBvcnQob3B0cy50eXBlKTsgLy8gYWNjZXB0IG5vZGVqcyBgcHJvY2Vzcy5wbGF0Zm9ybWAKCiAgICAgIGlmIChvcHRzLnBsYXRmb3JtID09PSAnZGFyd2luJyB8fCBvcHRzLnBsYXRmb3Jt
ID09PSAnZnJlZWJzZCcgfHwgb3B0cy5wbGF0Zm9ybSA9PT0gJ2xpbnV4JyB8fCBvcHRzLnBsYXRmb3JtID09PSAnc3Vub3MnKSB7CiAgICAgICAgb3B0cy5wbGF0Zm9ybSA9ICJVTklYIjsKICAgICAgfQoKICAgICAgaWYgKG9wdHMucGxhdGZvcm0gPT09ICd3aW4zMicpIHsKICAgICAgICBvcHRzLnBsYXRmb3JtID0gIkRPUyI7CiAgICAgIH0KCiAgICAgIHZhciBjb21tZW50ID0gb3B0cy5jb21tZW50IHx8IHRoaXMuY29tbWVudCB8fCAiIjsKICAgICAgd29ya2VyID0gZ2VuZXJhdGUuZ2VuZXJhdGVXb3JrZXIodGhpcywgb3B0
cywgY29tbWVudCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHdvcmtlciA9IG5ldyBHZW5lcmljV29ya2VyKCJlcnJvciIpOwogICAgICB3b3JrZXIuZXJyb3IoZSk7CiAgICB9CgogICAgcmV0dXJuIG5ldyBTdHJlYW1IZWxwZXIod29ya2VyLCBvcHRzLnR5cGUgfHwgInN0cmluZyIsIG9wdHMubWltZVR5cGUpOwogIH0sCgogIC8qKgogICAqIEdlbmVyYXRlIHRoZSBjb21wbGV0ZSB6aXAgZmlsZSBhc3luY2hyb25vdXNseS4KICAgKiBAc2VlIGdlbmVyYXRlSW50ZXJuYWxTdHJlYW0KICAgKi8KICBnZW5lcmF0ZUFzeW5jOiBm
dW5jdGlvbiBnZW5lcmF0ZUFzeW5jKG9wdGlvbnMsIG9uVXBkYXRlKSB7CiAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKG9wdGlvbnMpLmFjY3VtdWxhdGUob25VcGRhdGUpOwogIH0sCgogIC8qKgogICAqIEdlbmVyYXRlIHRoZSBjb21wbGV0ZSB6aXAgZmlsZSBhc3luY2hyb25vdXNseS4KICAgKiBAc2VlIGdlbmVyYXRlSW50ZXJuYWxTdHJlYW0KICAgKi8KICBnZW5lcmF0ZU5vZGVTdHJlYW06IGZ1bmN0aW9uIGdlbmVyYXRlTm9kZVN0cmVhbShvcHRpb25zLCBvblVwZGF0ZSkgewogICAgb3B0aW9ucyA9
IG9wdGlvbnMgfHwge307CgogICAgaWYgKCFvcHRpb25zLnR5cGUpIHsKICAgICAgb3B0aW9ucy50eXBlID0gIm5vZGVidWZmZXIiOwogICAgfQoKICAgIHJldHVybiB0aGlzLmdlbmVyYXRlSW50ZXJuYWxTdHJlYW0ob3B0aW9ucykudG9Ob2RlanNTdHJlYW0ob25VcGRhdGUpOwogIH0KfTsKbW9kdWxlLmV4cG9ydHMgPSBvdXQ7Cgp9LHsiLi9jb21wcmVzc2VkT2JqZWN0IjoyODIsIi4vZGVmYXVsdHMiOjI4NSwiLi9nZW5lcmF0ZSI6Mjg5LCIuL25vZGVqcy9Ob2RlanNTdHJlYW1JbnB1dEFkYXB0ZXIiOjI5MiwiLi9ub2RlanNV
dGlscyI6Mjk0LCIuL3N0cmVhbS9HZW5lcmljV29ya2VyIjozMDgsIi4vc3RyZWFtL1N0cmVhbUhlbHBlciI6MzA5LCIuL3V0ZjgiOjMxMSwiLi91dGlscyI6MzEyLCIuL3ppcE9iamVjdCI6MzE1fV0sMjk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKLyoKICogVGhpcyBmaWxlIGlzIHVzZWQgYnkgbW9kdWxlIGJ1bmRsZXJzIChicm93c2VyaWZ5L3dlYnBhY2svZXRjKSB3aGVuCiAqIGluY2x1ZGluZyBhIHN0cmVhbSBpbXBsZW1lbnRhdGlvbi4gV2UgdXNlICJyZWFkYWJsZS1zdHJl
YW0iIHRvIGdldCBhCiAqIGNvbnNpc3RlbnQgYmVoYXZpb3IgYmV0d2VlbiBub2RlanMgdmVyc2lvbnMgYnV0IGJ1bmRsZXJzIG9mdGVuIGhhdmUgYSBzaGltCiAqIGZvciAic3RyZWFtIi4gVXNpbmcgdGhpcyBzaGltIGdyZWF0bHkgaW1wcm92ZSB0aGUgY29tcGF0aWJpbGl0eSBhbmQgZ3JlYXRseQogKiByZWR1Y2UgdGhlIGZpbmFsIHNpemUgb2YgdGhlIGJ1bmRsZSAob25seSBvbmUgc3RyZWFtIGltcGxlbWVudGF0aW9uLCBub3QKICogdHdvKS4KICovCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgic3RyZWFtIik7Cgp9LHsi
c3RyZWFtIjozOTZ9XSwyOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgRGF0YVJlYWRlciA9IHJlcXVpcmUoJy4vRGF0YVJlYWRlcicpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTsKCmZ1bmN0aW9uIEFycmF5UmVhZGVyKGRhdGEpIHsKICBEYXRhUmVhZGVyLmNhbGwodGhpcywgZGF0YSk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7CiAgICBkYXRhW2ldID0gZGF0YVtpXSAmIDB4RkY7CiAgfQp9Cgp1dGlscy5pbmhl
cml0cyhBcnJheVJlYWRlciwgRGF0YVJlYWRlcik7Ci8qKgogKiBAc2VlIERhdGFSZWFkZXIuYnl0ZUF0CiAqLwoKQXJyYXlSZWFkZXIucHJvdG90eXBlLmJ5dGVBdCA9IGZ1bmN0aW9uIChpKSB7CiAgcmV0dXJuIHRoaXMuZGF0YVt0aGlzLnplcm8gKyBpXTsKfTsKLyoqCiAqIEBzZWUgRGF0YVJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZQogKi8KCgpBcnJheVJlYWRlci5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmUgPSBmdW5jdGlvbiAoc2lnKSB7CiAgdmFyIHNpZzAgPSBzaWcuY2hhckNvZGVBdCgwKSwKICAgICAg
c2lnMSA9IHNpZy5jaGFyQ29kZUF0KDEpLAogICAgICBzaWcyID0gc2lnLmNoYXJDb2RlQXQoMiksCiAgICAgIHNpZzMgPSBzaWcuY2hhckNvZGVBdCgzKTsKCiAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gNDsgaSA+PSAwOyAtLWkpIHsKICAgIGlmICh0aGlzLmRhdGFbaV0gPT09IHNpZzAgJiYgdGhpcy5kYXRhW2kgKyAxXSA9PT0gc2lnMSAmJiB0aGlzLmRhdGFbaSArIDJdID09PSBzaWcyICYmIHRoaXMuZGF0YVtpICsgM10gPT09IHNpZzMpIHsKICAgICAgcmV0dXJuIGkgLSB0aGlzLnplcm87CiAgICB9CiAgfQoKICBy
ZXR1cm4gLTE7Cn07Ci8qKgogKiBAc2VlIERhdGFSZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlCiAqLwoKCkFycmF5UmVhZGVyLnByb3RvdHlwZS5yZWFkQW5kQ2hlY2tTaWduYXR1cmUgPSBmdW5jdGlvbiAoc2lnKSB7CiAgdmFyIHNpZzAgPSBzaWcuY2hhckNvZGVBdCgwKSwKICAgICAgc2lnMSA9IHNpZy5jaGFyQ29kZUF0KDEpLAogICAgICBzaWcyID0gc2lnLmNoYXJDb2RlQXQoMiksCiAgICAgIHNpZzMgPSBzaWcuY2hhckNvZGVBdCgzKSwKICAgICAgZGF0YSA9IHRoaXMucmVhZERhdGEoNCk7CiAgcmV0dXJuIHNpZzAg
PT09IGRhdGFbMF0gJiYgc2lnMSA9PT0gZGF0YVsxXSAmJiBzaWcyID09PSBkYXRhWzJdICYmIHNpZzMgPT09IGRhdGFbM107Cn07Ci8qKgogKiBAc2VlIERhdGFSZWFkZXIucmVhZERhdGEKICovCgoKQXJyYXlSZWFkZXIucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24gKHNpemUpIHsKICB0aGlzLmNoZWNrT2Zmc2V0KHNpemUpOwoKICBpZiAoc2l6ZSA9PT0gMCkgewogICAgcmV0dXJuIFtdOwogIH0KCiAgdmFyIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8gKyB0aGlzLmluZGV4LCB0aGlzLnplcm8gKyB0
aGlzLmluZGV4ICsgc2l6ZSk7CiAgdGhpcy5pbmRleCArPSBzaXplOwogIHJldHVybiByZXN1bHQ7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IEFycmF5UmVhZGVyOwoKfSx7Ii4uL3V0aWxzIjozMTIsIi4vRGF0YVJlYWRlciI6Mjk4fV0sMjk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTsKCmZ1bmN0aW9uIERhdGFSZWFkZXIoZGF0YSkgewogIHRoaXMuZGF0YSA9IGRhdGE7IC8vIHR5cGUgOiBzZWUgaW1wbGVtZW50YXRpb24KCiAg
dGhpcy5sZW5ndGggPSBkYXRhLmxlbmd0aDsKICB0aGlzLmluZGV4ID0gMDsKICB0aGlzLnplcm8gPSAwOwp9CgpEYXRhUmVhZGVyLnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBDaGVjayB0aGF0IHRoZSBvZmZzZXQgd2lsbCBub3QgZ28gdG9vIGZhci4KICAgKiBAcGFyYW0ge3N0cmluZ30gb2Zmc2V0IHRoZSBhZGRpdGlvbmFsIG9mZnNldCB0byBjaGVjay4KICAgKiBAdGhyb3dzIHtFcnJvcn0gYW4gRXJyb3IgaWYgdGhlIG9mZnNldCBpcyBvdXQgb2YgYm91bmRzLgogICAqLwogIGNoZWNrT2Zmc2V0OiBmdW5jdGlvbiBjaGVj
a09mZnNldChvZmZzZXQpIHsKICAgIHRoaXMuY2hlY2tJbmRleCh0aGlzLmluZGV4ICsgb2Zmc2V0KTsKICB9LAoKICAvKioKICAgKiBDaGVjayB0aGF0IHRoZSBzcGVjaWZpZWQgaW5kZXggd2lsbCBub3QgYmUgdG9vIGZhci4KICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3SW5kZXggdGhlIGluZGV4IHRvIGNoZWNrLgogICAqIEB0aHJvd3Mge0Vycm9yfSBhbiBFcnJvciBpZiB0aGUgaW5kZXggaXMgb3V0IG9mIGJvdW5kcy4KICAgKi8KICBjaGVja0luZGV4OiBmdW5jdGlvbiBjaGVja0luZGV4KG5ld0luZGV4KSB7CiAgICBpZiAo
dGhpcy5sZW5ndGggPCB0aGlzLnplcm8gKyBuZXdJbmRleCB8fCBuZXdJbmRleCA8IDApIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJFbmQgb2YgZGF0YSByZWFjaGVkIChkYXRhIGxlbmd0aCA9ICIgKyB0aGlzLmxlbmd0aCArICIsIGFza2VkIGluZGV4ID0gIiArIG5ld0luZGV4ICsgIikuIENvcnJ1cHRlZCB6aXAgPyIpOwogICAgfQogIH0sCgogIC8qKgogICAqIENoYW5nZSB0aGUgaW5kZXguCiAgICogQHBhcmFtIHtudW1iZXJ9IG5ld0luZGV4IFRoZSBuZXcgaW5kZXguCiAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBu
ZXcgaW5kZXggaXMgb3V0IG9mIHRoZSBkYXRhLgogICAqLwogIHNldEluZGV4OiBmdW5jdGlvbiBzZXRJbmRleChuZXdJbmRleCkgewogICAgdGhpcy5jaGVja0luZGV4KG5ld0luZGV4KTsKICAgIHRoaXMuaW5kZXggPSBuZXdJbmRleDsKICB9LAoKICAvKioKICAgKiBTa2lwIHRoZSBuZXh0IG4gYnl0ZXMuCiAgICogQHBhcmFtIHtudW1iZXJ9IG4gdGhlIG51bWJlciBvZiBieXRlcyB0byBza2lwLgogICAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgbmV3IGluZGV4IGlzIG91dCBvZiB0aGUgZGF0YS4KICAgKi8KICBza2lwOiBm
dW5jdGlvbiBza2lwKG4pIHsKICAgIHRoaXMuc2V0SW5kZXgodGhpcy5pbmRleCArIG4pOwogIH0sCgogIC8qKgogICAqIEdldCB0aGUgYnl0ZSBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LgogICAqIEBwYXJhbSB7bnVtYmVyfSBpIHRoZSBpbmRleCB0byB1c2UuCiAgICogQHJldHVybiB7bnVtYmVyfSBhIGJ5dGUuCiAgICovCiAgYnl0ZUF0OiBmdW5jdGlvbiBieXRlQXQoaSkgey8vIHNlZSBpbXBsZW1lbnRhdGlvbnMKICB9LAoKICAvKioKICAgKiBHZXQgdGhlIG5leHQgbnVtYmVyIHdpdGggYSBnaXZlbiBieXRlIHNpemUuCiAg
ICogQHBhcmFtIHtudW1iZXJ9IHNpemUgdGhlIG51bWJlciBvZiBieXRlcyB0byByZWFkLgogICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGNvcnJlc3BvbmRpbmcgbnVtYmVyLgogICAqLwogIHJlYWRJbnQ6IGZ1bmN0aW9uIHJlYWRJbnQoc2l6ZSkgewogICAgdmFyIHJlc3VsdCA9IDAsCiAgICAgICAgaTsKICAgIHRoaXMuY2hlY2tPZmZzZXQoc2l6ZSk7CgogICAgZm9yIChpID0gdGhpcy5pbmRleCArIHNpemUgLSAxOyBpID49IHRoaXMuaW5kZXg7IGktLSkgewogICAgICByZXN1bHQgPSAocmVzdWx0IDw8IDgpICsgdGhpcy5i
eXRlQXQoaSk7CiAgICB9CgogICAgdGhpcy5pbmRleCArPSBzaXplOwogICAgcmV0dXJuIHJlc3VsdDsKICB9LAoKICAvKioKICAgKiBHZXQgdGhlIG5leHQgc3RyaW5nIHdpdGggYSBnaXZlbiBieXRlIHNpemUuCiAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgdGhlIG51bWJlciBvZiBieXRlcyB0byByZWFkLgogICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGNvcnJlc3BvbmRpbmcgc3RyaW5nLgogICAqLwogIHJlYWRTdHJpbmc6IGZ1bmN0aW9uIHJlYWRTdHJpbmcoc2l6ZSkgewogICAgcmV0dXJuIHV0aWxzLnRyYW5zZm9ybVRv
KCJzdHJpbmciLCB0aGlzLnJlYWREYXRhKHNpemUpKTsKICB9LAoKICAvKioKICAgKiBHZXQgcmF3IGRhdGEgd2l0aG91dCBjb252ZXJzaW9uLCA8c2l6ZT4gYnl0ZXMuCiAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgdGhlIG51bWJlciBvZiBieXRlcyB0byByZWFkLgogICAqIEByZXR1cm4ge09iamVjdH0gdGhlIHJhdyBkYXRhLCBpbXBsZW1lbnRhdGlvbiBzcGVjaWZpYy4KICAgKi8KICByZWFkRGF0YTogZnVuY3Rpb24gcmVhZERhdGEoc2l6ZSkgey8vIHNlZSBpbXBsZW1lbnRhdGlvbnMKICB9LAoKICAvKioKICAgKiBGaW5k
IHRoZSBsYXN0IG9jY3VycmVuY2Ugb2YgYSB6aXAgc2lnbmF0dXJlICg0IGJ5dGVzKS4KICAgKiBAcGFyYW0ge3N0cmluZ30gc2lnIHRoZSBzaWduYXR1cmUgdG8gZmluZC4KICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBvY2N1cnJlbmNlLCAtMSBpZiBub3QgZm91bmQuCiAgICovCiAgbGFzdEluZGV4T2ZTaWduYXR1cmU6IGZ1bmN0aW9uIGxhc3RJbmRleE9mU2lnbmF0dXJlKHNpZykgey8vIHNlZSBpbXBsZW1lbnRhdGlvbnMKICB9LAoKICAvKioKICAgKiBSZWFkIHRoZSBzaWduYXR1cmUgKDQg
Ynl0ZXMpIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uIGFuZCBjb21wYXJlIGl0IHdpdGggc2lnLgogICAqIEBwYXJhbSB7c3RyaW5nfSBzaWcgdGhlIGV4cGVjdGVkIHNpZ25hdHVyZQogICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHNpZ25hdHVyZSBtYXRjaGVzLCBmYWxzZSBvdGhlcndpc2UuCiAgICovCiAgcmVhZEFuZENoZWNrU2lnbmF0dXJlOiBmdW5jdGlvbiByZWFkQW5kQ2hlY2tTaWduYXR1cmUoc2lnKSB7Ly8gc2VlIGltcGxlbWVudGF0aW9ucwogIH0sCgogIC8qKgogICAqIEdldCB0aGUgbmV4dCBkYXRl
LgogICAqIEByZXR1cm4ge0RhdGV9IHRoZSBkYXRlLgogICAqLwogIHJlYWREYXRlOiBmdW5jdGlvbiByZWFkRGF0ZSgpIHsKICAgIHZhciBkb3N0aW1lID0gdGhpcy5yZWFkSW50KDQpOwogICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKChkb3N0aW1lID4+IDI1ICYgMHg3ZikgKyAxOTgwLCAvLyB5ZWFyCiAgICAoZG9zdGltZSA+PiAyMSAmIDB4MGYpIC0gMSwgLy8gbW9udGgKICAgIGRvc3RpbWUgPj4gMTYgJiAweDFmLCAvLyBkYXkKICAgIGRvc3RpbWUgPj4gMTEgJiAweDFmLCAvLyBob3VyCiAgICBkb3N0aW1lID4+IDUg
JiAweDNmLCAvLyBtaW51dGUKICAgIChkb3N0aW1lICYgMHgxZikgPDwgMSkpOyAvLyBzZWNvbmQKICB9Cn07Cm1vZHVsZS5leHBvcnRzID0gRGF0YVJlYWRlcjsKCn0seyIuLi91dGlscyI6MzEyfV0sMjk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIFVpbnQ4QXJyYXlSZWFkZXIgPSByZXF1aXJlKCcuL1VpbnQ4QXJyYXlSZWFkZXInKTsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7CgpmdW5jdGlvbiBOb2RlQnVmZmVyUmVhZGVyKGRhdGEpIHsKICBVaW50OEFy
cmF5UmVhZGVyLmNhbGwodGhpcywgZGF0YSk7Cn0KCnV0aWxzLmluaGVyaXRzKE5vZGVCdWZmZXJSZWFkZXIsIFVpbnQ4QXJyYXlSZWFkZXIpOwovKioKICogQHNlZSBEYXRhUmVhZGVyLnJlYWREYXRhCiAqLwoKTm9kZUJ1ZmZlclJlYWRlci5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbiAoc2l6ZSkgewogIHRoaXMuY2hlY2tPZmZzZXQoc2l6ZSk7CiAgdmFyIHJlc3VsdCA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8gKyB0aGlzLmluZGV4LCB0aGlzLnplcm8gKyB0aGlzLmluZGV4ICsgc2l6ZSk7CiAgdGhpcy5pbmRl
eCArPSBzaXplOwogIHJldHVybiByZXN1bHQ7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IE5vZGVCdWZmZXJSZWFkZXI7Cgp9LHsiLi4vdXRpbHMiOjMxMiwiLi9VaW50OEFycmF5UmVhZGVyIjozMDF9XSwzMDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgRGF0YVJlYWRlciA9IHJlcXVpcmUoJy4vRGF0YVJlYWRlcicpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTsKCmZ1bmN0aW9uIFN0cmluZ1JlYWRlcihkYXRhKSB7CiAgRGF0YVJlYWRlci5jYWxsKHRoaXMsIGRh
dGEpOwp9Cgp1dGlscy5pbmhlcml0cyhTdHJpbmdSZWFkZXIsIERhdGFSZWFkZXIpOwovKioKICogQHNlZSBEYXRhUmVhZGVyLmJ5dGVBdAogKi8KClN0cmluZ1JlYWRlci5wcm90b3R5cGUuYnl0ZUF0ID0gZnVuY3Rpb24gKGkpIHsKICByZXR1cm4gdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy56ZXJvICsgaSk7Cn07Ci8qKgogKiBAc2VlIERhdGFSZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUKICovCgoKU3RyaW5nUmVhZGVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZlNpZ25hdHVyZSA9IGZ1bmN0aW9uIChzaWcpIHsKICByZXR1
cm4gdGhpcy5kYXRhLmxhc3RJbmRleE9mKHNpZykgLSB0aGlzLnplcm87Cn07Ci8qKgogKiBAc2VlIERhdGFSZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlCiAqLwoKClN0cmluZ1JlYWRlci5wcm90b3R5cGUucmVhZEFuZENoZWNrU2lnbmF0dXJlID0gZnVuY3Rpb24gKHNpZykgewogIHZhciBkYXRhID0gdGhpcy5yZWFkRGF0YSg0KTsKICByZXR1cm4gc2lnID09PSBkYXRhOwp9OwovKioKICogQHNlZSBEYXRhUmVhZGVyLnJlYWREYXRhCiAqLwoKClN0cmluZ1JlYWRlci5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbiAo
c2l6ZSkgewogIHRoaXMuY2hlY2tPZmZzZXQoc2l6ZSk7IC8vIHRoaXMgd2lsbCB3b3JrIGJlY2F1c2UgdGhlIGNvbnN0cnVjdG9yIGFwcGxpZWQgdGhlICImIDB4ZmYiIG1hc2suCgogIHZhciByZXN1bHQgPSB0aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvICsgdGhpcy5pbmRleCwgdGhpcy56ZXJvICsgdGhpcy5pbmRleCArIHNpemUpOwogIHRoaXMuaW5kZXggKz0gc2l6ZTsKICByZXR1cm4gcmVzdWx0Owp9OwoKbW9kdWxlLmV4cG9ydHMgPSBTdHJpbmdSZWFkZXI7Cgp9LHsiLi4vdXRpbHMiOjMxMiwiLi9EYXRhUmVhZGVyIjoy
OTh9XSwzMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgQXJyYXlSZWFkZXIgPSByZXF1aXJlKCcuL0FycmF5UmVhZGVyJyk7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKZnVuY3Rpb24gVWludDhBcnJheVJlYWRlcihkYXRhKSB7CiAgQXJyYXlSZWFkZXIuY2FsbCh0aGlzLCBkYXRhKTsKfQoKdXRpbHMuaW5oZXJpdHMoVWludDhBcnJheVJlYWRlciwgQXJyYXlSZWFkZXIpOwovKioKICogQHNlZSBEYXRhUmVhZGVyLnJlYWREYXRhCiAqLwoKVWludDhBcnJh
eVJlYWRlci5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbiAoc2l6ZSkgewogIHRoaXMuY2hlY2tPZmZzZXQoc2l6ZSk7CgogIGlmIChzaXplID09PSAwKSB7CiAgICAvLyBpbiBJRTEwLCB3aGVuIHVzaW5nIHN1YmFycmF5KGlkeCwgaWR4KSwgd2UgZ2V0IHRoZSBhcnJheSBbMHgwMF0gaW5zdGVhZCBvZiBbXS4KICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTsKICB9CgogIHZhciByZXN1bHQgPSB0aGlzLmRhdGEuc3ViYXJyYXkodGhpcy56ZXJvICsgdGhpcy5pbmRleCwgdGhpcy56ZXJvICsgdGhpcy5pbmRleCArIHNp
emUpOwogIHRoaXMuaW5kZXggKz0gc2l6ZTsKICByZXR1cm4gcmVzdWx0Owp9OwoKbW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5UmVhZGVyOwoKfSx7Ii4uL3V0aWxzIjozMTIsIi4vQXJyYXlSZWFkZXIiOjI5N31dLDMwMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7Cgp2YXIgc3VwcG9ydCA9IHJlcXVpcmUoJy4uL3N1cHBvcnQnKTsKCnZhciBBcnJheVJlYWRlciA9IHJlcXVpcmUoJy4vQXJyYXlSZWFkZXInKTsKCnZhciBT
dHJpbmdSZWFkZXIgPSByZXF1aXJlKCcuL1N0cmluZ1JlYWRlcicpOwoKdmFyIE5vZGVCdWZmZXJSZWFkZXIgPSByZXF1aXJlKCcuL05vZGVCdWZmZXJSZWFkZXInKTsKCnZhciBVaW50OEFycmF5UmVhZGVyID0gcmVxdWlyZSgnLi9VaW50OEFycmF5UmVhZGVyJyk7Ci8qKgogKiBDcmVhdGUgYSByZWFkZXIgYWRhcHRlZCB0byB0aGUgZGF0YS4KICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGRhdGEgdGhlIGRhdGEgdG8gcmVhZC4KICogQHJldHVybiB7RGF0YVJlYWRlcn0gdGhlIGRhdGEg
cmVhZGVyLgogKi8KCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgdmFyIHR5cGUgPSB1dGlscy5nZXRUeXBlT2YoZGF0YSk7CiAgdXRpbHMuY2hlY2tTdXBwb3J0KHR5cGUpOwoKICBpZiAodHlwZSA9PT0gInN0cmluZyIgJiYgIXN1cHBvcnQudWludDhhcnJheSkgewogICAgcmV0dXJuIG5ldyBTdHJpbmdSZWFkZXIoZGF0YSk7CiAgfQoKICBpZiAodHlwZSA9PT0gIm5vZGVidWZmZXIiKSB7CiAgICByZXR1cm4gbmV3IE5vZGVCdWZmZXJSZWFkZXIoZGF0YSk7CiAgfQoKICBpZiAoc3VwcG9ydC51aW50OGFy
cmF5KSB7CiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXlSZWFkZXIodXRpbHMudHJhbnNmb3JtVG8oInVpbnQ4YXJyYXkiLCBkYXRhKSk7CiAgfQoKICByZXR1cm4gbmV3IEFycmF5UmVhZGVyKHV0aWxzLnRyYW5zZm9ybVRvKCJhcnJheSIsIGRhdGEpKTsKfTsKCn0seyIuLi9zdXBwb3J0IjozMTAsIi4uL3V0aWxzIjozMTIsIi4vQXJyYXlSZWFkZXIiOjI5NywiLi9Ob2RlQnVmZmVyUmVhZGVyIjoyOTksIi4vU3RyaW5nUmVhZGVyIjozMDAsIi4vVWludDhBcnJheVJlYWRlciI6MzAxfV0sMzAzOltmdW5jdGlvbihyZXF1aXJlLG1v
ZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZXhwb3J0cy5MT0NBTF9GSUxFX0hFQURFUiA9ICJQS1x4MDNceDA0IjsKZXhwb3J0cy5DRU5UUkFMX0ZJTEVfSEVBREVSID0gIlBLXHgwMVx4MDIiOwpleHBvcnRzLkNFTlRSQUxfRElSRUNUT1JZX0VORCA9ICJQS1x4MDVceDA2IjsKZXhwb3J0cy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SID0gIlBLXHgwNlx4MDciOwpleHBvcnRzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCA9ICJQS1x4MDZceDA2IjsKZXhwb3J0cy5EQVRBX0RFU0NSSVBUT1IgPSAiUEtc
eDA3XHgwOCI7Cgp9LHt9XSwzMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4vR2VuZXJpY1dvcmtlcicpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTsKLyoqCiAqIEEgd29ya2VyIHdoaWNoIGNvbnZlcnQgY2h1bmtzIHRvIGEgc3BlY2lmaWVkIHR5cGUuCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge1N0cmluZ30gZGVzdFR5cGUgdGhlIGRlc3RpbmF0aW9uIHR5cGUuCiAqLwoKCmZ1bmN0aW9uIENvbnZlcnRX
b3JrZXIoZGVzdFR5cGUpIHsKICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgIkNvbnZlcnRXb3JrZXIgdG8gIiArIGRlc3RUeXBlKTsKICB0aGlzLmRlc3RUeXBlID0gZGVzdFR5cGU7Cn0KCnV0aWxzLmluaGVyaXRzKENvbnZlcnRXb3JrZXIsIEdlbmVyaWNXb3JrZXIpOwovKioKICogQHNlZSBHZW5lcmljV29ya2VyLnByb2Nlc3NDaHVuawogKi8KCkNvbnZlcnRXb3JrZXIucHJvdG90eXBlLnByb2Nlc3NDaHVuayA9IGZ1bmN0aW9uIChjaHVuaykgewogIHRoaXMucHVzaCh7CiAgICBkYXRhOiB1dGlscy50cmFuc2Zvcm1Ubyh0
aGlzLmRlc3RUeXBlLCBjaHVuay5kYXRhKSwKICAgIG1ldGE6IGNodW5rLm1ldGEKICB9KTsKfTsKCm1vZHVsZS5leHBvcnRzID0gQ29udmVydFdvcmtlcjsKCn0seyIuLi91dGlscyI6MzEyLCIuL0dlbmVyaWNXb3JrZXIiOjMwOH1dLDMwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBHZW5lcmljV29ya2VyID0gcmVxdWlyZSgnLi9HZW5lcmljV29ya2VyJyk7Cgp2YXIgY3JjMzIgPSByZXF1aXJlKCcuLi9jcmMzMicpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMn
KTsKLyoqCiAqIEEgd29ya2VyIHdoaWNoIGNhbGN1bGF0ZSB0aGUgY3JjMzIgb2YgdGhlIGRhdGEgZmxvd2luZyB0aHJvdWdoLgogKiBAY29uc3RydWN0b3IKICovCgoKZnVuY3Rpb24gQ3JjMzJQcm9iZSgpIHsKICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgIkNyYzMyUHJvYmUiKTsKICB0aGlzLndpdGhTdHJlYW1JbmZvKCJjcmMzMiIsIDApOwp9Cgp1dGlscy5pbmhlcml0cyhDcmMzMlByb2JlLCBHZW5lcmljV29ya2VyKTsKLyoqCiAqIEBzZWUgR2VuZXJpY1dvcmtlci5wcm9jZXNzQ2h1bmsKICovCgpDcmMzMlByb2JlLnBy
b3RvdHlwZS5wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmspIHsKICB0aGlzLnN0cmVhbUluZm8uY3JjMzIgPSBjcmMzMihjaHVuay5kYXRhLCB0aGlzLnN0cmVhbUluZm8uY3JjMzIgfHwgMCk7CiAgdGhpcy5wdXNoKGNodW5rKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gQ3JjMzJQcm9iZTsKCn0seyIuLi9jcmMzMiI6Mjg0LCIuLi91dGlscyI6MzEyLCIuL0dlbmVyaWNXb3JrZXIiOjMwOH1dLDMwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciB1dGlscyA9IHJlcXVpcmUo
Jy4uL3V0aWxzJyk7Cgp2YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4vR2VuZXJpY1dvcmtlcicpOwovKioKICogQSB3b3JrZXIgd2hpY2ggY2FsY3VsYXRlIHRoZSB0b3RhbCBsZW5ndGggb2YgdGhlIGRhdGEgZmxvd2luZyB0aHJvdWdoLgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtTdHJpbmd9IHByb3BOYW1lIHRoZSBuYW1lIHVzZWQgdG8gZXhwb3NlIHRoZSBsZW5ndGgKICovCgoKZnVuY3Rpb24gRGF0YUxlbmd0aFByb2JlKHByb3BOYW1lKSB7CiAgR2VuZXJpY1dvcmtlci5jYWxsKHRoaXMsICJEYXRhTGVuZ3Ro
UHJvYmUgZm9yICIgKyBwcm9wTmFtZSk7CiAgdGhpcy5wcm9wTmFtZSA9IHByb3BOYW1lOwogIHRoaXMud2l0aFN0cmVhbUluZm8ocHJvcE5hbWUsIDApOwp9Cgp1dGlscy5pbmhlcml0cyhEYXRhTGVuZ3RoUHJvYmUsIEdlbmVyaWNXb3JrZXIpOwovKioKICogQHNlZSBHZW5lcmljV29ya2VyLnByb2Nlc3NDaHVuawogKi8KCkRhdGFMZW5ndGhQcm9iZS5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24gKGNodW5rKSB7CiAgaWYgKGNodW5rKSB7CiAgICB2YXIgbGVuZ3RoID0gdGhpcy5zdHJlYW1JbmZvW3RoaXMucHJv
cE5hbWVdIHx8IDA7CiAgICB0aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV0gPSBsZW5ndGggKyBjaHVuay5kYXRhLmxlbmd0aDsKICB9CgogIEdlbmVyaWNXb3JrZXIucHJvdG90eXBlLnByb2Nlc3NDaHVuay5jYWxsKHRoaXMsIGNodW5rKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gRGF0YUxlbmd0aFByb2JlOwoKfSx7Ii4uL3V0aWxzIjozMTIsIi4vR2VuZXJpY1dvcmtlciI6MzA4fV0sMzA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi4v
dXRpbHMnKTsKCnZhciBHZW5lcmljV29ya2VyID0gcmVxdWlyZSgnLi9HZW5lcmljV29ya2VyJyk7IC8vIHRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgY2h1bmtzCi8vIFRPRE8gZXhwb3NlIHRoaXMgYXMgYSBwdWJsaWMgdmFyaWFibGUKCgp2YXIgREVGQVVMVF9CTE9DS19TSVpFID0gMTYgKiAxMDI0OwovKioKICogQSB3b3JrZXIgdGhhdCByZWFkcyBhIGNvbnRlbnQgYW5kIGVtaXRzIGNodW5rcy4KICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7UHJvbWlzZX0gZGF0YVAgdGhlIHByb21pc2Ugb2YgdGhlIGRhdGEgdG8gc3Bs
aXQKICovCgpmdW5jdGlvbiBEYXRhV29ya2VyKGRhdGFQKSB7CiAgR2VuZXJpY1dvcmtlci5jYWxsKHRoaXMsICJEYXRhV29ya2VyIik7CiAgdmFyIHNlbGYgPSB0aGlzOwogIHRoaXMuZGF0YUlzUmVhZHkgPSBmYWxzZTsKICB0aGlzLmluZGV4ID0gMDsKICB0aGlzLm1heCA9IDA7CiAgdGhpcy5kYXRhID0gbnVsbDsKICB0aGlzLnR5cGUgPSAiIjsKICB0aGlzLl90aWNrU2NoZWR1bGVkID0gZmFsc2U7CiAgZGF0YVAudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgc2VsZi5kYXRhSXNSZWFkeSA9IHRydWU7CiAgICBzZWxmLmRh
dGEgPSBkYXRhOwogICAgc2VsZi5tYXggPSBkYXRhICYmIGRhdGEubGVuZ3RoIHx8IDA7CiAgICBzZWxmLnR5cGUgPSB1dGlscy5nZXRUeXBlT2YoZGF0YSk7CgogICAgaWYgKCFzZWxmLmlzUGF1c2VkKSB7CiAgICAgIHNlbGYuX3RpY2tBbmRSZXBlYXQoKTsKICAgIH0KICB9LCBmdW5jdGlvbiAoZSkgewogICAgc2VsZi5lcnJvcihlKTsKICB9KTsKfQoKdXRpbHMuaW5oZXJpdHMoRGF0YVdvcmtlciwgR2VuZXJpY1dvcmtlcik7Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIuY2xlYW5VcAogKi8KCkRhdGFXb3JrZXIucHJvdG90
eXBlLmNsZWFuVXAgPSBmdW5jdGlvbiAoKSB7CiAgR2VuZXJpY1dvcmtlci5wcm90b3R5cGUuY2xlYW5VcC5jYWxsKHRoaXMpOwogIHRoaXMuZGF0YSA9IG51bGw7Cn07Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIucmVzdW1lCiAqLwoKCkRhdGFXb3JrZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHsKICBpZiAoIUdlbmVyaWNXb3JrZXIucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoIXRoaXMuX3RpY2tTY2hlZHVsZWQgJiYgdGhpcy5kYXRhSXNSZWFk
eSkgewogICAgdGhpcy5fdGlja1NjaGVkdWxlZCA9IHRydWU7CiAgICB1dGlscy5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LCBbXSwgdGhpcyk7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfTsKLyoqCiAqIFRyaWdnZXIgYSB0aWNrIGEgc2NoZWR1bGUgYW4gb3RoZXIgY2FsbCB0byB0aGlzIGZ1bmN0aW9uLgogKi8KCgpEYXRhV29ya2VyLnByb3RvdHlwZS5fdGlja0FuZFJlcGVhdCA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLl90aWNrU2NoZWR1bGVkID0gZmFsc2U7CgogIGlmICh0aGlzLmlzUGF1c2VkIHx8IHRoaXMuaXNGaW5pc2hl
ZCkgewogICAgcmV0dXJuOwogIH0KCiAgdGhpcy5fdGljaygpOwoKICBpZiAoIXRoaXMuaXNGaW5pc2hlZCkgewogICAgdXRpbHMuZGVsYXkodGhpcy5fdGlja0FuZFJlcGVhdCwgW10sIHRoaXMpOwogICAgdGhpcy5fdGlja1NjaGVkdWxlZCA9IHRydWU7CiAgfQp9OwovKioKICogUmVhZCBhbmQgcHVzaCBhIGNodW5rLgogKi8KCgpEYXRhV29ya2VyLnByb3RvdHlwZS5fdGljayA9IGZ1bmN0aW9uICgpIHsKICBpZiAodGhpcy5pc1BhdXNlZCB8fCB0aGlzLmlzRmluaXNoZWQpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZh
ciBzaXplID0gREVGQVVMVF9CTE9DS19TSVpFOwogIHZhciBkYXRhID0gbnVsbCwKICAgICAgbmV4dEluZGV4ID0gTWF0aC5taW4odGhpcy5tYXgsIHRoaXMuaW5kZXggKyBzaXplKTsKCiAgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy5tYXgpIHsKICAgIC8vIEVPRgogICAgcmV0dXJuIHRoaXMuZW5kKCk7CiAgfSBlbHNlIHsKICAgIHN3aXRjaCAodGhpcy50eXBlKSB7CiAgICAgIGNhc2UgInN0cmluZyI6CiAgICAgICAgZGF0YSA9IHRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5pbmRleCwgbmV4dEluZGV4KTsKICAgICAgICBicmVh
azsKCiAgICAgIGNhc2UgInVpbnQ4YXJyYXkiOgogICAgICAgIGRhdGEgPSB0aGlzLmRhdGEuc3ViYXJyYXkodGhpcy5pbmRleCwgbmV4dEluZGV4KTsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgImFycmF5IjoKICAgICAgY2FzZSAibm9kZWJ1ZmZlciI6CiAgICAgICAgZGF0YSA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLmluZGV4LCBuZXh0SW5kZXgpOwogICAgICAgIGJyZWFrOwogICAgfQoKICAgIHRoaXMuaW5kZXggPSBuZXh0SW5kZXg7CiAgICByZXR1cm4gdGhpcy5wdXNoKHsKICAgICAgZGF0YTogZGF0YSwKICAgICAg
bWV0YTogewogICAgICAgIHBlcmNlbnQ6IHRoaXMubWF4ID8gdGhpcy5pbmRleCAvIHRoaXMubWF4ICogMTAwIDogMAogICAgICB9CiAgICB9KTsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cyA9IERhdGFXb3JrZXI7Cgp9LHsiLi4vdXRpbHMiOjMxMiwiLi9HZW5lcmljV29ya2VyIjozMDh9XSwzMDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8qKgogKiBBIHdvcmtlciB0aGF0IGRvZXMgbm90aGluZyBidXQgcGFzc2luZyBjaHVua3MgdG8gdGhlIG5leHQgb25lLiBUaGlzIGlzIGxpa2UK
ICogYSBub2RlanMgc3RyZWFtIGJ1dCB3aXRoIHNvbWUgZGlmZmVyZW5jZXMuIE9uIHRoZSBnb29kIHNpZGUgOgogKiAtIGl0IHdvcmtzIG9uIElFIDYtOSB3aXRob3V0IGFueSBpc3N1ZSAvIHBvbHlmaWxsCiAqIC0gaXQgd2VpZ2h0cyBsZXNzIHRoYW4gdGhlIGZ1bGwgZGVwZW5kZW5jaWVzIGJ1bmRsZWQgd2l0aCBicm93c2VyaWZ5CiAqIC0gaXQgZm9yd2FyZHMgZXJyb3JzIChubyBuZWVkIHRvIGRlY2xhcmUgYW4gZXJyb3IgaGFuZGxlciBFVkVSWVdIRVJFKQogKgogKiBBIGNodW5rIGlzIGFuIG9iamVjdCB3aXRoIDIgYXR0
cmlidXRlcyA6IGBtZXRhYCBhbmQgYGRhdGFgLiBUaGUgZm9ybWVyIGlzIGFuCiAqIG9iamVjdCBjb250YWluaW5nIGFueXRoaW5nIChgcGVyY2VudGAgZm9yIGV4YW1wbGUpLCBzZWUgZWFjaCB3b3JrZXIgZm9yIG1vcmUKICogZGV0YWlscy4gVGhlIGxhdHRlciBpcyB0aGUgcmVhbCBkYXRhIChTdHJpbmcsIFVpbnQ4QXJyYXksIGV0YykuCiAqCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge1N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgc3RyZWFtIChtYWlubHkgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzKQogKi8K
CmZ1bmN0aW9uIEdlbmVyaWNXb3JrZXIobmFtZSkgewogIC8vIHRoZSBuYW1lIG9mIHRoZSB3b3JrZXIKICB0aGlzLm5hbWUgPSBuYW1lIHx8ICJkZWZhdWx0IjsgLy8gYW4gb2JqZWN0IGNvbnRhaW5pbmcgbWV0YWRhdGEgYWJvdXQgdGhlIHdvcmtlcnMgY2hhaW4KCiAgdGhpcy5zdHJlYW1JbmZvID0ge307IC8vIGFuIGVycm9yIHdoaWNoIGhhcHBlbmVkIHdoZW4gdGhlIHdvcmtlciB3YXMgcGF1c2VkCgogIHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSBudWxsOyAvLyBhbiBvYmplY3QgY29udGFpbmluZyBtZXRhZGF0YSB0byBiZSBt
ZXJnZWQgYnkgdGhpcyB3b3JrZXIgaW50byB0aGUgZ2VuZXJhbCBtZXRhZGF0YQoKICB0aGlzLmV4dHJhU3RyZWFtSW5mbyA9IHt9OyAvLyB0cnVlIGlmIHRoZSBzdHJlYW0gaXMgcGF1c2VkIChhbmQgc2hvdWxkIG5vdCBkbyBhbnl0aGluZyksIGZhbHNlIG90aGVyd2lzZQoKICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTsgLy8gdHJ1ZSBpZiB0aGUgc3RyZWFtIGlzIGZpbmlzaGVkIChhbmQgc2hvdWxkIG5vdCBkbyBhbnl0aGluZyksIGZhbHNlIG90aGVyd2lzZQoKICB0aGlzLmlzRmluaXNoZWQgPSBmYWxzZTsgLy8gdHJ1ZSBpZiB0
aGUgc3RyZWFtIGlzIGxvY2tlZCB0byBwcmV2ZW50IGZ1cnRoZXIgc3RydWN0dXJlIHVwZGF0ZXMgKHBpcGUpLCBmYWxzZSBvdGhlcndpc2UKCiAgdGhpcy5pc0xvY2tlZCA9IGZhbHNlOyAvLyB0aGUgZXZlbnQgbGlzdGVuZXJzCgogIHRoaXMuX2xpc3RlbmVycyA9IHsKICAgICdkYXRhJzogW10sCiAgICAnZW5kJzogW10sCiAgICAnZXJyb3InOiBbXQogIH07IC8vIHRoZSBwcmV2aW91cyB3b3JrZXIsIGlmIGFueQoKICB0aGlzLnByZXZpb3VzID0gbnVsbDsKfQoKR2VuZXJpY1dvcmtlci5wcm90b3R5cGUgPSB7CiAgLyoqCiAg
ICogUHVzaCBhIGNodW5rIHRvIHRoZSBuZXh0IHdvcmtlcnMuCiAgICogQHBhcmFtIHtPYmplY3R9IGNodW5rIHRoZSBjaHVuayB0byBwdXNoCiAgICovCiAgcHVzaDogZnVuY3Rpb24gcHVzaChjaHVuaykgewogICAgdGhpcy5lbWl0KCJkYXRhIiwgY2h1bmspOwogIH0sCgogIC8qKgogICAqIEVuZCB0aGUgc3RyZWFtLgogICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhpcyBjYWxsIGVuZGVkIHRoZSB3b3JrZXIsIGZhbHNlIG90aGVyd2lzZS4KICAgKi8KICBlbmQ6IGZ1bmN0aW9uIGVuZCgpIHsKICAgIGlmICh0aGlz
LmlzRmluaXNoZWQpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHRoaXMuZmx1c2goKTsKCiAgICB0cnkgewogICAgICB0aGlzLmVtaXQoImVuZCIpOwogICAgICB0aGlzLmNsZWFuVXAoKTsKICAgICAgdGhpcy5pc0ZpbmlzaGVkID0gdHJ1ZTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhpcy5lbWl0KCJlcnJvciIsIGUpOwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0sCgogIC8qKgogICAqIEVuZCB0aGUgc3RyZWFtIHdpdGggYW4gZXJyb3IuCiAgICogQHBhcmFtIHtFcnJvcn0gZSB0aGUgZXJyb3Igd2hp
Y2ggY2F1c2VkIHRoZSBwcmVtYXR1cmUgZW5kLgogICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhpcyBjYWxsIGVuZGVkIHRoZSB3b3JrZXIgd2l0aCBhbiBlcnJvciwgZmFsc2Ugb3RoZXJ3aXNlLgogICAqLwogIGVycm9yOiBmdW5jdGlvbiBlcnJvcihlKSB7CiAgICBpZiAodGhpcy5pc0ZpbmlzaGVkKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBpZiAodGhpcy5pc1BhdXNlZCkgewogICAgICB0aGlzLmdlbmVyYXRlZEVycm9yID0gZTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuaXNGaW5pc2hlZCA9
IHRydWU7CiAgICAgIHRoaXMuZW1pdCgiZXJyb3IiLCBlKTsgLy8gaW4gdGhlIHdvcmtlcnMgY2hhaW4gZXhwbG9kZWQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgY2hhaW4sCiAgICAgIC8vIHRoZSBlcnJvciBldmVudCB3aWxsIGdvIGRvd253YXJkIGJ1dCB3ZSBhbHNvIG5lZWQgdG8gbm90aWZ5CiAgICAgIC8vIHdvcmtlcnMgdXB3YXJkIHRoYXQgdGhlcmUgaGFzIGJlZW4gYW4gZXJyb3IuCgogICAgICBpZiAodGhpcy5wcmV2aW91cykgewogICAgICAgIHRoaXMucHJldmlvdXMuZXJyb3IoZSk7CiAgICAgIH0KCiAgICAgIHRoaXMu
Y2xlYW5VcCgpOwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0sCgogIC8qKgogICAqIEFkZCBhIGNhbGxiYWNrIG9uIGFuIGV2ZW50LgogICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBldmVudCAoZGF0YSwgZW5kLCBlcnJvcikKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciB0aGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQKICAgKiBAcmV0dXJuIHtHZW5lcmljV29ya2VyfSB0aGUgY3VycmVudCBvYmplY3QgZm9yIGNoYWluYWJpbGl0eQogICAqLwog
IG9uOiBmdW5jdGlvbiBvbihuYW1lLCBsaXN0ZW5lcikgewogICAgdGhpcy5fbGlzdGVuZXJzW25hbWVdLnB1c2gobGlzdGVuZXIpOwoKICAgIHJldHVybiB0aGlzOwogIH0sCgogIC8qKgogICAqIENsZWFuIGFueSByZWZlcmVuY2VzIHdoZW4gYSB3b3JrZXIgaXMgZW5kaW5nLgogICAqLwogIGNsZWFuVXA6IGZ1bmN0aW9uIGNsZWFuVXAoKSB7CiAgICB0aGlzLnN0cmVhbUluZm8gPSB0aGlzLmdlbmVyYXRlZEVycm9yID0gdGhpcy5leHRyYVN0cmVhbUluZm8gPSBudWxsOwogICAgdGhpcy5fbGlzdGVuZXJzID0gW107CiAgfSwK
CiAgLyoqCiAgICogVHJpZ2dlciBhbiBldmVudC4gVGhpcyB3aWxsIGNhbGwgcmVnaXN0ZXJlZCBjYWxsYmFjayB3aXRoIHRoZSBwcm92aWRlZCBhcmcuCiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIGV2ZW50IChkYXRhLCBlbmQsIGVycm9yKQogICAqIEBwYXJhbSB7T2JqZWN0fSBhcmcgdGhlIGFyZ3VtZW50IHRvIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGguCiAgICovCiAgZW1pdDogZnVuY3Rpb24gZW1pdChuYW1lLCBhcmcpIHsKICAgIGlmICh0aGlzLl9saXN0ZW5lcnNbbmFtZV0pIHsKICAgICAg
Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9saXN0ZW5lcnNbbmFtZV0ubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLl9saXN0ZW5lcnNbbmFtZV1baV0uY2FsbCh0aGlzLCBhcmcpOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQ2hhaW4gYSB3b3JrZXIgd2l0aCBhbiBvdGhlci4KICAgKiBAcGFyYW0ge1dvcmtlcn0gbmV4dCB0aGUgd29ya2VyIHJlY2VpdmluZyBldmVudHMgZnJvbSB0aGUgY3VycmVudCBvbmUuCiAgICogQHJldHVybiB7d29ya2VyfSB0aGUgbmV4dCB3b3JrZXIgZm9yIGNoYWluYWJpbGl0eQog
ICAqLwogIHBpcGU6IGZ1bmN0aW9uIHBpcGUobmV4dCkgewogICAgcmV0dXJuIG5leHQucmVnaXN0ZXJQcmV2aW91cyh0aGlzKTsKICB9LAoKICAvKioKICAgKiBTYW1lIGFzIGBwaXBlYCBpbiB0aGUgb3RoZXIgZGlyZWN0aW9uLgogICAqIFVzaW5nIGFuIEFQSSB3aXRoIGBwaXBlKG5leHQpYCBpcyB2ZXJ5IGVhc3kuCiAgICogSW1wbGVtZW50aW5nIHRoZSBBUEkgd2l0aCB0aGUgcG9pbnQgb2YgdmlldyBvZiB0aGUgbmV4dCBvbmUgcmVnaXN0ZXJpbmcKICAgKiBhIHNvdXJjZSBpcyBlYXNpZXIsIHNlZSB0aGUgWmlwRmlsZVdv
cmtlci4KICAgKiBAcGFyYW0ge1dvcmtlcn0gcHJldmlvdXMgdGhlIHByZXZpb3VzIHdvcmtlciwgc2VuZGluZyBldmVudHMgdG8gdGhpcyBvbmUKICAgKiBAcmV0dXJuIHtXb3JrZXJ9IHRoZSBjdXJyZW50IHdvcmtlciBmb3IgY2hhaW5hYmlsaXR5CiAgICovCiAgcmVnaXN0ZXJQcmV2aW91czogZnVuY3Rpb24gcmVnaXN0ZXJQcmV2aW91cyhwcmV2aW91cykgewogICAgaWYgKHRoaXMuaXNMb2NrZWQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJUaGUgc3RyZWFtICciICsgdGhpcyArICInIGhhcyBhbHJlYWR5IGJlZW4gdXNl
ZC4iKTsKICAgIH0gLy8gc2hhcmluZyB0aGUgc3RyZWFtSW5mby4uLgoKCiAgICB0aGlzLnN0cmVhbUluZm8gPSBwcmV2aW91cy5zdHJlYW1JbmZvOyAvLyAuLi4gYW5kIGFkZGluZyBvdXIgb3duIGJpdHMKCiAgICB0aGlzLm1lcmdlU3RyZWFtSW5mbygpOwogICAgdGhpcy5wcmV2aW91cyA9IHByZXZpb3VzOwogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgcHJldmlvdXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHsKICAgICAgc2VsZi5wcm9jZXNzQ2h1bmsoY2h1bmspOwogICAgfSk7CiAgICBwcmV2aW91cy5vbignZW5k
JywgZnVuY3Rpb24gKCkgewogICAgICBzZWxmLmVuZCgpOwogICAgfSk7CiAgICBwcmV2aW91cy5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkgewogICAgICBzZWxmLmVycm9yKGUpOwogICAgfSk7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBQYXVzZSB0aGUgc3RyZWFtIHNvIGl0IGRvZXNuJ3Qgc2VuZCBldmVudHMgYW55bW9yZS4KICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoaXMgY2FsbCBwYXVzZWQgdGhlIHdvcmtlciwgZmFsc2Ugb3RoZXJ3aXNlLgogICAqLwogIHBhdXNlOiBmdW5jdGlvbiBw
YXVzZSgpIHsKICAgIGlmICh0aGlzLmlzUGF1c2VkIHx8IHRoaXMuaXNGaW5pc2hlZCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7CgogICAgaWYgKHRoaXMucHJldmlvdXMpIHsKICAgICAgdGhpcy5wcmV2aW91cy5wYXVzZSgpOwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0sCgogIC8qKgogICAqIFJlc3VtZSBhIHBhdXNlZCBzdHJlYW0uCiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGlzIGNhbGwgcmVzdW1lZCB0aGUgd29ya2VyLCBmYWxzZSBvdGhlcndp
c2UuCiAgICovCiAgcmVzdW1lOiBmdW5jdGlvbiByZXN1bWUoKSB7CiAgICBpZiAoIXRoaXMuaXNQYXVzZWQgfHwgdGhpcy5pc0ZpbmlzaGVkKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7IC8vIGlmIHRydWUsIHRoZSB3b3JrZXIgdHJpZWQgdG8gcmVzdW1lIGJ1dCBmYWlsZWQKCiAgICB2YXIgd2l0aEVycm9yID0gZmFsc2U7CgogICAgaWYgKHRoaXMuZ2VuZXJhdGVkRXJyb3IpIHsKICAgICAgdGhpcy5lcnJvcih0aGlzLmdlbmVyYXRlZEVycm9yKTsKICAgICAgd2l0aEVy
cm9yID0gdHJ1ZTsKICAgIH0KCiAgICBpZiAodGhpcy5wcmV2aW91cykgewogICAgICB0aGlzLnByZXZpb3VzLnJlc3VtZSgpOwogICAgfQoKICAgIHJldHVybiAhd2l0aEVycm9yOwogIH0sCgogIC8qKgogICAqIEZsdXNoIGFueSByZW1haW5pbmcgYnl0ZXMgYXMgdGhlIHN0cmVhbSBpcyBlbmRpbmcuCiAgICovCiAgZmx1c2g6IGZ1bmN0aW9uIGZsdXNoKCkge30sCgogIC8qKgogICAqIFByb2Nlc3MgYSBjaHVuay4gVGhpcyBpcyB1c3VhbGx5IHRoZSBtZXRob2Qgb3ZlcnJpZGRlbi4KICAgKiBAcGFyYW0ge09iamVjdH0gY2h1
bmsgdGhlIGNodW5rIHRvIHByb2Nlc3MuCiAgICovCiAgcHJvY2Vzc0NodW5rOiBmdW5jdGlvbiBwcm9jZXNzQ2h1bmsoY2h1bmspIHsKICAgIHRoaXMucHVzaChjaHVuayk7CiAgfSwKCiAgLyoqCiAgICogQWRkIGEga2V5L3ZhbHVlIHRvIGJlIGFkZGVkIGluIHRoZSB3b3JrZXJzIGNoYWluIHN0cmVhbUluZm8gb25jZSBhY3RpdmF0ZWQuCiAgICogQHBhcmFtIHtTdHJpbmd9IGtleSB0aGUga2V5IHRvIHVzZQogICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSB0aGUgYXNzb2NpYXRlZCB2YWx1ZQogICAqIEByZXR1cm4ge1dvcmtl
cn0gdGhlIGN1cnJlbnQgd29ya2VyIGZvciBjaGFpbmFiaWxpdHkKICAgKi8KICB3aXRoU3RyZWFtSW5mbzogZnVuY3Rpb24gd2l0aFN0cmVhbUluZm8oa2V5LCB2YWx1ZSkgewogICAgdGhpcy5leHRyYVN0cmVhbUluZm9ba2V5XSA9IHZhbHVlOwogICAgdGhpcy5tZXJnZVN0cmVhbUluZm8oKTsKICAgIHJldHVybiB0aGlzOwogIH0sCgogIC8qKgogICAqIE1lcmdlIHRoaXMgd29ya2VyJ3Mgc3RyZWFtSW5mbyBpbnRvIHRoZSBjaGFpbidzIHN0cmVhbUluZm8uCiAgICovCiAgbWVyZ2VTdHJlYW1JbmZvOiBmdW5jdGlvbiBtZXJn
ZVN0cmVhbUluZm8oKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5leHRyYVN0cmVhbUluZm8pIHsKICAgICAgaWYgKCF0aGlzLmV4dHJhU3RyZWFtSW5mby5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIHRoaXMuc3RyZWFtSW5mb1trZXldID0gdGhpcy5leHRyYVN0cmVhbUluZm9ba2V5XTsKICAgIH0KICB9LAoKICAvKioKICAgKiBMb2NrIHRoZSBzdHJlYW0gdG8gcHJldmVudCBmdXJ0aGVyIHVwZGF0ZXMgb24gdGhlIHdvcmtlcnMgY2hhaW4uCiAgICogQWZ0ZXIgY2Fs
bGluZyB0aGlzIG1ldGhvZCwgYWxsIGNhbGxzIHRvIHBpcGUgd2lsbCBmYWlsLgogICAqLwogIGxvY2s6IGZ1bmN0aW9uIGxvY2soKSB7CiAgICBpZiAodGhpcy5pc0xvY2tlZCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIlRoZSBzdHJlYW0gJyIgKyB0aGlzICsgIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLiIpOwogICAgfQoKICAgIHRoaXMuaXNMb2NrZWQgPSB0cnVlOwoKICAgIGlmICh0aGlzLnByZXZpb3VzKSB7CiAgICAgIHRoaXMucHJldmlvdXMubG9jaygpOwogICAgfQogIH0sCgogIC8qKgogICAqCiAgICogUHJldHR5
IHByaW50IHRoZSB3b3JrZXJzIGNoYWluLgogICAqLwogIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgIHZhciBtZSA9ICJXb3JrZXIgIiArIHRoaXMubmFtZTsKCiAgICBpZiAodGhpcy5wcmV2aW91cykgewogICAgICByZXR1cm4gdGhpcy5wcmV2aW91cyArICIgLT4gIiArIG1lOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG1lOwogICAgfQogIH0KfTsKbW9kdWxlLmV4cG9ydHMgPSBHZW5lcmljV29ya2VyOwoKfSx7fV0sMzA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9u
IChCdWZmZXIpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpOwoKdmFyIENvbnZlcnRXb3JrZXIgPSByZXF1aXJlKCcuL0NvbnZlcnRXb3JrZXInKTsKCnZhciBHZW5lcmljV29ya2VyID0gcmVxdWlyZSgnLi9HZW5lcmljV29ya2VyJyk7Cgp2YXIgYmFzZTY0ID0gcmVxdWlyZSgnLi4vYmFzZTY0Jyk7Cgp2YXIgc3VwcG9ydCA9IHJlcXVpcmUoIi4uL3N1cHBvcnQiKTsKCnZhciBleHRlcm5hbCA9IHJlcXVpcmUoIi4uL2V4dGVybmFsIik7Cgp2YXIgTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRl
ciA9IG51bGw7CgppZiAoc3VwcG9ydC5ub2Rlc3RyZWFtKSB7CiAgdHJ5IHsKICAgIE5vZGVqc1N0cmVhbU91dHB1dEFkYXB0ZXIgPSByZXF1aXJlKCcuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlcicpOwogIH0gY2F0Y2ggKGUpIHt9Cn0KLyoqCiAqIEFwcGx5IHRoZSBmaW5hbCB0cmFuc2Zvcm1hdGlvbiBvZiB0aGUgZGF0YS4gSWYgdGhlIHVzZXIgd2FudHMgYSBCbG9iIGZvcgogKiBleGFtcGxlLCBpdCdzIGVhc2llciB0byB3b3JrIHdpdGggYW4gVThpbnRBcnJheSBhbmQgZmluYWxseSBkbyB0aGUKICogQXJy
YXlCdWZmZXIvQmxvYiBjb252ZXJzaW9uLgogKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgbmFtZSBvZiB0aGUgZmluYWwgdHlwZQogKiBAcGFyYW0ge1N0cmluZ3xVaW50OEFycmF5fEJ1ZmZlcn0gY29udGVudCB0aGUgY29udGVudCB0byB0cmFuc2Zvcm0KICogQHBhcmFtIHtTdHJpbmd9IG1pbWVUeXBlIHRoZSBtaW1lIHR5cGUgb2YgdGhlIGNvbnRlbnQsIGlmIGFwcGxpY2FibGUuCiAqIEByZXR1cm4ge1N0cmluZ3xVaW50OEFycmF5fEFycmF5QnVmZmVyfEJ1ZmZlcnxCbG9ifSB0aGUgY29udGVudCBpbiB0aGUgcmlnaHQg
Zm9ybWF0LgogKi8KCgpmdW5jdGlvbiB0cmFuc2Zvcm1aaXBPdXRwdXQodHlwZSwgY29udGVudCwgbWltZVR5cGUpIHsKICBzd2l0Y2ggKHR5cGUpIHsKICAgIGNhc2UgImJsb2IiOgogICAgICByZXR1cm4gdXRpbHMubmV3QmxvYih1dGlscy50cmFuc2Zvcm1UbygiYXJyYXlidWZmZXIiLCBjb250ZW50KSwgbWltZVR5cGUpOwoKICAgIGNhc2UgImJhc2U2NCI6CiAgICAgIHJldHVybiBiYXNlNjQuZW5jb2RlKGNvbnRlbnQpOwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiB1dGlscy50cmFuc2Zvcm1Ubyh0eXBlLCBjb250ZW50
KTsKICB9Cn0KLyoqCiAqIENvbmNhdGVuYXRlIGFuIGFycmF5IG9mIGRhdGEgb2YgdGhlIGdpdmVuIHR5cGUuCiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSB0eXBlIG9mIHRoZSBkYXRhIGluIHRoZSBnaXZlbiBhcnJheS4KICogQHBhcmFtIHtBcnJheX0gZGF0YUFycmF5IHRoZSBhcnJheSBjb250YWluaW5nIHRoZSBkYXRhIGNodW5rcyB0byBjb25jYXRlbmF0ZQogKiBAcmV0dXJuIHtTdHJpbmd8VWludDhBcnJheXxCdWZmZXJ9IHRoZSBjb25jYXRlbmF0ZWQgZGF0YQogKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBhc2tlZCB0
eXBlIGlzIHVuc3VwcG9ydGVkCiAqLwoKCmZ1bmN0aW9uIGNvbmNhdCh0eXBlLCBkYXRhQXJyYXkpIHsKICB2YXIgaSwKICAgICAgaW5kZXggPSAwLAogICAgICByZXMgPSBudWxsLAogICAgICB0b3RhbExlbmd0aCA9IDA7CgogIGZvciAoaSA9IDA7IGkgPCBkYXRhQXJyYXkubGVuZ3RoOyBpKyspIHsKICAgIHRvdGFsTGVuZ3RoICs9IGRhdGFBcnJheVtpXS5sZW5ndGg7CiAgfQoKICBzd2l0Y2ggKHR5cGUpIHsKICAgIGNhc2UgInN0cmluZyI6CiAgICAgIHJldHVybiBkYXRhQXJyYXkuam9pbigiIik7CgogICAgY2FzZSAiYXJy
YXkiOgogICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgZGF0YUFycmF5KTsKCiAgICBjYXNlICJ1aW50OGFycmF5IjoKICAgICAgcmVzID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpOwoKICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGFBcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgIHJlcy5zZXQoZGF0YUFycmF5W2ldLCBpbmRleCk7CiAgICAgICAgaW5kZXggKz0gZGF0YUFycmF5W2ldLmxlbmd0aDsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlczsKCiAgICBjYXNlICJub2RlYnVmZmVy
IjoKICAgICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoZGF0YUFycmF5KTsKCiAgICBkZWZhdWx0OgogICAgICB0aHJvdyBuZXcgRXJyb3IoImNvbmNhdCA6IHVuc3VwcG9ydGVkIHR5cGUgJyIgKyB0eXBlICsgIiciKTsKICB9Cn0KLyoqCiAqIExpc3RlbiBhIFN0cmVhbUhlbHBlciwgYWNjdW11bGF0ZSBpdHMgY29udGVudCBhbmQgY29uY2F0ZW5hdGUgaXQgaW50byBhCiAqIGNvbXBsZXRlIGJsb2NrLgogKiBAcGFyYW0ge1N0cmVhbUhlbHBlcn0gaGVscGVyIHRoZSBoZWxwZXIgdG8gdXNlLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSB1
cGRhdGVDYWxsYmFjayBhIGNhbGxiYWNrIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZS4gQ2FsbGVkCiAqIHdpdGggb25lIGFyZyA6CiAqIC0gdGhlIG1ldGFkYXRhIGxpbmtlZCB0byB0aGUgdXBkYXRlIHJlY2VpdmVkLgogKiBAcmV0dXJuIFByb21pc2UgdGhlIHByb21pc2UgZm9yIHRoZSBhY2N1bXVsYXRpb24uCiAqLwoKCmZ1bmN0aW9uIF9hY2N1bXVsYXRlKGhlbHBlciwgdXBkYXRlQ2FsbGJhY2spIHsKICByZXR1cm4gbmV3IGV4dGVybmFsLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgdmFyIGRhdGFB
cnJheSA9IFtdOwogICAgdmFyIGNodW5rVHlwZSA9IGhlbHBlci5faW50ZXJuYWxUeXBlLAogICAgICAgIHJlc3VsdFR5cGUgPSBoZWxwZXIuX291dHB1dFR5cGUsCiAgICAgICAgbWltZVR5cGUgPSBoZWxwZXIuX21pbWVUeXBlOwogICAgaGVscGVyLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEsIG1ldGEpIHsKICAgICAgZGF0YUFycmF5LnB1c2goZGF0YSk7CgogICAgICBpZiAodXBkYXRlQ2FsbGJhY2spIHsKICAgICAgICB1cGRhdGVDYWxsYmFjayhtZXRhKTsKICAgICAgfQogICAgfSkub24oJ2Vycm9yJywgZnVuY3Rpb24g
KGVycikgewogICAgICBkYXRhQXJyYXkgPSBbXTsKICAgICAgcmVqZWN0KGVycik7CiAgICB9KS5vbignZW5kJywgZnVuY3Rpb24gKCkgewogICAgICB0cnkgewogICAgICAgIHZhciByZXN1bHQgPSB0cmFuc2Zvcm1aaXBPdXRwdXQocmVzdWx0VHlwZSwgY29uY2F0KGNodW5rVHlwZSwgZGF0YUFycmF5KSwgbWltZVR5cGUpOwogICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHJlamVjdChlKTsKICAgICAgfQoKICAgICAgZGF0YUFycmF5ID0gW107CiAgICB9KS5yZXN1bWUoKTsKICB9
KTsKfQovKioKICogQW4gaGVscGVyIHRvIGVhc2lseSB1c2Ugd29ya2VycyBvdXRzaWRlIG9mIEpTWmlwLgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtXb3JrZXJ9IHdvcmtlciB0aGUgd29ya2VyIHRvIHdyYXAKICogQHBhcmFtIHtTdHJpbmd9IG91dHB1dFR5cGUgdGhlIHR5cGUgb2YgZGF0YSBleHBlY3RlZCBieSB0aGUgdXNlCiAqIEBwYXJhbSB7U3RyaW5nfSBtaW1lVHlwZSB0aGUgbWltZSB0eXBlIG9mIHRoZSBjb250ZW50LCBpZiBhcHBsaWNhYmxlLgogKi8KCgpmdW5jdGlvbiBTdHJlYW1IZWxwZXIod29ya2VyLCBv
dXRwdXRUeXBlLCBtaW1lVHlwZSkgewogIHZhciBpbnRlcm5hbFR5cGUgPSBvdXRwdXRUeXBlOwoKICBzd2l0Y2ggKG91dHB1dFR5cGUpIHsKICAgIGNhc2UgImJsb2IiOgogICAgY2FzZSAiYXJyYXlidWZmZXIiOgogICAgICBpbnRlcm5hbFR5cGUgPSAidWludDhhcnJheSI7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgImJhc2U2NCI6CiAgICAgIGludGVybmFsVHlwZSA9ICJzdHJpbmciOwogICAgICBicmVhazsKICB9CgogIHRyeSB7CiAgICAvLyB0aGUgdHlwZSB1c2VkIGludGVybmFsbHkKICAgIHRoaXMuX2ludGVybmFsVHlw
ZSA9IGludGVybmFsVHlwZTsgLy8gdGhlIHR5cGUgdXNlZCB0byBvdXRwdXQgcmVzdWx0cwoKICAgIHRoaXMuX291dHB1dFR5cGUgPSBvdXRwdXRUeXBlOyAvLyB0aGUgbWltZSB0eXBlCgogICAgdGhpcy5fbWltZVR5cGUgPSBtaW1lVHlwZTsKICAgIHV0aWxzLmNoZWNrU3VwcG9ydChpbnRlcm5hbFR5cGUpOwogICAgdGhpcy5fd29ya2VyID0gd29ya2VyLnBpcGUobmV3IENvbnZlcnRXb3JrZXIoaW50ZXJuYWxUeXBlKSk7IC8vIHRoZSBsYXN0IHdvcmtlcnMgY2FuIGJlIHJld2lyZWQgd2l0aG91dCBpc3N1ZXMgYnV0IHdlIG5l
ZWQgdG8KICAgIC8vIHByZXZlbnQgYW55IHVwZGF0ZXMgb24gcHJldmlvdXMgd29ya2Vycy4KCiAgICB3b3JrZXIubG9jaygpOwogIH0gY2F0Y2ggKGUpIHsKICAgIHRoaXMuX3dvcmtlciA9IG5ldyBHZW5lcmljV29ya2VyKCJlcnJvciIpOwoKICAgIHRoaXMuX3dvcmtlci5lcnJvcihlKTsKICB9Cn0KClN0cmVhbUhlbHBlci5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogTGlzdGVuIGEgU3RyZWFtSGVscGVyLCBhY2N1bXVsYXRlIGl0cyBjb250ZW50IGFuZCBjb25jYXRlbmF0ZSBpdCBpbnRvIGEKICAgKiBjb21wbGV0ZSBibG9j
ay4KICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVDYiB0aGUgdXBkYXRlIGNhbGxiYWNrLgogICAqIEByZXR1cm4gUHJvbWlzZSB0aGUgcHJvbWlzZSBmb3IgdGhlIGFjY3VtdWxhdGlvbi4KICAgKi8KICBhY2N1bXVsYXRlOiBmdW5jdGlvbiBhY2N1bXVsYXRlKHVwZGF0ZUNiKSB7CiAgICByZXR1cm4gX2FjY3VtdWxhdGUodGhpcywgdXBkYXRlQ2IpOwogIH0sCgogIC8qKgogICAqIEFkZCBhIGxpc3RlbmVyIG9uIGFuIGV2ZW50IHRyaWdnZXJlZCBvbiBhIHN0cmVhbS4KICAgKiBAcGFyYW0ge1N0cmluZ30gZXZ0IHRoZSBu
YW1lIG9mIHRoZSBldmVudAogICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIHRoZSBsaXN0ZW5lcgogICAqIEByZXR1cm4ge1N0cmVhbUhlbHBlcn0gdGhlIGN1cnJlbnQgaGVscGVyLgogICAqLwogIG9uOiBmdW5jdGlvbiBvbihldnQsIGZuKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgaWYgKGV2dCA9PT0gImRhdGEiKSB7CiAgICAgIHRoaXMuX3dvcmtlci5vbihldnQsIGZ1bmN0aW9uIChjaHVuaykgewogICAgICAgIGZuLmNhbGwoc2VsZiwgY2h1bmsuZGF0YSwgY2h1bmsubWV0YSk7CiAgICAgIH0pOwogICAgfSBlbHNl
IHsKICAgICAgdGhpcy5fd29ya2VyLm9uKGV2dCwgZnVuY3Rpb24gKCkgewogICAgICAgIHV0aWxzLmRlbGF5KGZuLCBhcmd1bWVudHMsIHNlbGYpOwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBSZXN1bWUgdGhlIGZsb3cgb2YgY2h1bmtzLgogICAqIEByZXR1cm4ge1N0cmVhbUhlbHBlcn0gdGhlIGN1cnJlbnQgaGVscGVyLgogICAqLwogIHJlc3VtZTogZnVuY3Rpb24gcmVzdW1lKCkgewogICAgdXRpbHMuZGVsYXkodGhpcy5fd29ya2VyLnJlc3VtZSwgW10sIHRoaXMuX3dvcmtl
cik7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBQYXVzZSB0aGUgZmxvdyBvZiBjaHVua3MuCiAgICogQHJldHVybiB7U3RyZWFtSGVscGVyfSB0aGUgY3VycmVudCBoZWxwZXIuCiAgICovCiAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKCkgewogICAgdGhpcy5fd29ya2VyLnBhdXNlKCk7CgogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogUmV0dXJuIGEgbm9kZWpzIHN0cmVhbSBmb3IgdGhpcyBoZWxwZXIuCiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlQ2IgdGhlIHVwZGF0ZSBjYWxsYmFjay4K
ICAgKiBAcmV0dXJuIHtOb2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyfSB0aGUgbm9kZWpzIHN0cmVhbS4KICAgKi8KICB0b05vZGVqc1N0cmVhbTogZnVuY3Rpb24gdG9Ob2RlanNTdHJlYW0odXBkYXRlQ2IpIHsKICAgIHV0aWxzLmNoZWNrU3VwcG9ydCgibm9kZXN0cmVhbSIpOwoKICAgIGlmICh0aGlzLl9vdXRwdXRUeXBlICE9PSAibm9kZWJ1ZmZlciIpIHsKICAgICAgLy8gYW4gb2JqZWN0IHN0cmVhbSBjb250YWluaW5nIGJsb2IvYXJyYXlidWZmZXIvdWludDhhcnJheS9zdHJpbmcKICAgICAgLy8gaXMgc3RyYW5nZSBhbmQg
SSBkb24ndCBrbm93IGlmIGl0IHdvdWxkIGJlIHVzZWZ1bC4KICAgICAgLy8gSSB5b3UgZmluZCB0aGlzIGNvbW1lbnQgYW5kIGhhdmUgYSBnb29kIHVzZWNhc2UsIHBsZWFzZSBvcGVuIGEKICAgICAgLy8gYnVnIHJlcG9ydCAhCiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9vdXRwdXRUeXBlICsgIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgbWV0aG9kIik7CiAgICB9CgogICAgcmV0dXJuIG5ldyBOb2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyKHRoaXMsIHsKICAgICAgb2JqZWN0TW9kZTogdGhpcy5fb3V0cHV0VHlwZSAh
PT0gIm5vZGVidWZmZXIiCiAgICB9LCB1cGRhdGVDYik7CiAgfQp9Owptb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUhlbHBlcjsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCJidWZmZXIiKS5CdWZmZXIpCgp9LHsiLi4vYmFzZTY0IjoyODEsIi4uL2V4dGVybmFsIjoyODYsIi4uL25vZGVqcy9Ob2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyIjoyOTMsIi4uL3N1cHBvcnQiOjMxMCwiLi4vdXRpbHMiOjMxMiwiLi9Db252ZXJ0V29ya2VyIjozMDQsIi4vR2VuZXJpY1dvcmtlciI6MzA4LCJidWZmZXIiOjIxNn1dLDMxMDpbZnVuY3Rpb24ocmVx
dWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoQnVmZmVyKXsKJ3VzZSBzdHJpY3QnOwoKZXhwb3J0cy5iYXNlNjQgPSB0cnVlOwpleHBvcnRzLmFycmF5ID0gdHJ1ZTsKZXhwb3J0cy5zdHJpbmcgPSB0cnVlOwpleHBvcnRzLmFycmF5YnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyICE9PSAidW5kZWZpbmVkIiAmJiB0eXBlb2YgVWludDhBcnJheSAhPT0gInVuZGVmaW5lZCI7CmV4cG9ydHMubm9kZWJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgIT09ICJ1bmRlZmluZWQiOyAvLyBjb250YWlucyB0cnVlIGlmIEpTWmlwIGNh
biByZWFkL2dlbmVyYXRlIFVpbnQ4QXJyYXksIGZhbHNlIG90aGVyd2lzZS4KCmV4cG9ydHMudWludDhhcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAidW5kZWZpbmVkIjsKCmlmICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICJ1bmRlZmluZWQiKSB7CiAgZXhwb3J0cy5ibG9iID0gZmFsc2U7Cn0gZWxzZSB7CiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigwKTsKCiAgdHJ5IHsKICAgIGV4cG9ydHMuYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7CiAgICAgIHR5cGU6ICJhcHBsaWNhdGlvbi96aXAiCiAgICB9KS5z
aXplID09PSAwOwogIH0gY2F0Y2ggKGUpIHsKICAgIHRyeSB7CiAgICAgIHZhciBCdWlsZGVyID0gc2VsZi5CbG9iQnVpbGRlciB8fCBzZWxmLldlYktpdEJsb2JCdWlsZGVyIHx8IHNlbGYuTW96QmxvYkJ1aWxkZXIgfHwgc2VsZi5NU0Jsb2JCdWlsZGVyOwogICAgICB2YXIgYnVpbGRlciA9IG5ldyBCdWlsZGVyKCk7CiAgICAgIGJ1aWxkZXIuYXBwZW5kKGJ1ZmZlcik7CiAgICAgIGV4cG9ydHMuYmxvYiA9IGJ1aWxkZXIuZ2V0QmxvYignYXBwbGljYXRpb24vemlwJykuc2l6ZSA9PT0gMDsKICAgIH0gY2F0Y2ggKGUpIHsKICAg
ICAgZXhwb3J0cy5ibG9iID0gZmFsc2U7CiAgICB9CiAgfQp9Cgp0cnkgewogIGV4cG9ydHMubm9kZXN0cmVhbSA9ICEhcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJykuUmVhZGFibGU7Cn0gY2F0Y2ggKGUpIHsKICBleHBvcnRzLm5vZGVzdHJlYW0gPSBmYWxzZTsKfQoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoImJ1ZmZlciIpLkJ1ZmZlcikKCn0seyJidWZmZXIiOjIxNiwicmVhZGFibGUtc3RyZWFtIjoyOTZ9XSwzMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSBy
ZXF1aXJlKCcuL3V0aWxzJyk7Cgp2YXIgc3VwcG9ydCA9IHJlcXVpcmUoJy4vc3VwcG9ydCcpOwoKdmFyIG5vZGVqc1V0aWxzID0gcmVxdWlyZSgnLi9ub2RlanNVdGlscycpOwoKdmFyIEdlbmVyaWNXb3JrZXIgPSByZXF1aXJlKCcuL3N0cmVhbS9HZW5lcmljV29ya2VyJyk7Ci8qKgogKiBUaGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBjb21lIGZyb20gcGFrbywgZnJvbSBwYWtvL2xpYi91dGlscy9zdHJpbmdzCiAqIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSwgc2VlIHBha28gaHR0cHM6Ly9naXRodWIuY29tL25vZGVj
YS9wYWtvLwogKi8KLy8gVGFibGUgd2l0aCB1dGY4IGxlbmd0aHMgKGNhbGN1bGF0ZWQgYnkgZmlyc3QgYnl0ZSBvZiBzZXF1ZW5jZSkKLy8gTm90ZSwgdGhhdCA1ICYgNi1ieXRlIHZhbHVlcyBhbmQgc29tZSA0LWJ5dGUgdmFsdWVzIGNhbiBub3QgYmUgcmVwcmVzZW50ZWQgaW4gSlMsCi8vIGJlY2F1c2UgbWF4IHBvc3NpYmxlIGNvZGVwb2ludCBpcyAweDEwZmZmZgoKCnZhciBfdXRmOGxlbiA9IG5ldyBBcnJheSgyNTYpOwoKZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykgewogIF91dGY4bGVuW2ldID0gaSA+PSAyNTIg
PyA2IDogaSA+PSAyNDggPyA1IDogaSA+PSAyNDAgPyA0IDogaSA+PSAyMjQgPyAzIDogaSA+PSAxOTIgPyAyIDogMTsKfQoKX3V0ZjhsZW5bMjU0XSA9IF91dGY4bGVuWzI1NF0gPSAxOyAvLyBJbnZhbGlkIHNlcXVlbmNlIHN0YXJ0Ci8vIGNvbnZlcnQgc3RyaW5nIHRvIGFycmF5ICh0eXBlZCwgd2hlbiBwb3NzaWJsZSkKCnZhciBzdHJpbmcyYnVmID0gZnVuY3Rpb24gc3RyaW5nMmJ1ZihzdHIpIHsKICB2YXIgYnVmLAogICAgICBjLAogICAgICBjMiwKICAgICAgbV9wb3MsCiAgICAgIGksCiAgICAgIHN0cl9sZW4gPSBzdHIu
bGVuZ3RoLAogICAgICBidWZfbGVuID0gMDsgLy8gY291bnQgYmluYXJ5IHNpemUKCiAgZm9yIChtX3BvcyA9IDA7IG1fcG9zIDwgc3RyX2xlbjsgbV9wb3MrKykgewogICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTsKCiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgbV9wb3MgKyAxIDwgc3RyX2xlbikgewogICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7CgogICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7CiAgICAgICAgYyA9IDB4MTAwMDAgKyAoYyAtIDB4ZDgwMCA8PCAx
MCkgKyAoYzIgLSAweGRjMDApOwogICAgICAgIG1fcG9zKys7CiAgICAgIH0KICAgIH0KCiAgICBidWZfbGVuICs9IGMgPCAweDgwID8gMSA6IGMgPCAweDgwMCA/IDIgOiBjIDwgMHgxMDAwMCA/IDMgOiA0OwogIH0gLy8gYWxsb2NhdGUgYnVmZmVyCgoKICBpZiAoc3VwcG9ydC51aW50OGFycmF5KSB7CiAgICBidWYgPSBuZXcgVWludDhBcnJheShidWZfbGVuKTsKICB9IGVsc2UgewogICAgYnVmID0gbmV3IEFycmF5KGJ1Zl9sZW4pOwogIH0gLy8gY29udmVydAoKCiAgZm9yIChpID0gMCwgbV9wb3MgPSAwOyBpIDwgYnVmX2xl
bjsgbV9wb3MrKykgewogICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTsKCiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgbV9wb3MgKyAxIDwgc3RyX2xlbikgewogICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7CgogICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7CiAgICAgICAgYyA9IDB4MTAwMDAgKyAoYyAtIDB4ZDgwMCA8PCAxMCkgKyAoYzIgLSAweGRjMDApOwogICAgICAgIG1fcG9zKys7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoYyA8IDB4ODApIHsKICAgICAgLyog
b25lIGJ5dGUgKi8KICAgICAgYnVmW2krK10gPSBjOwogICAgfSBlbHNlIGlmIChjIDwgMHg4MDApIHsKICAgICAgLyogdHdvIGJ5dGVzICovCiAgICAgIGJ1ZltpKytdID0gMHhDMCB8IGMgPj4+IDY7CiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IGMgJiAweDNmOwogICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkgewogICAgICAvKiB0aHJlZSBieXRlcyAqLwogICAgICBidWZbaSsrXSA9IDB4RTAgfCBjID4+PiAxMjsKICAgICAgYnVmW2krK10gPSAweDgwIHwgYyA+Pj4gNiAmIDB4M2Y7CiAgICAgIGJ1ZltpKytdID0gMHg4MCB8
IGMgJiAweDNmOwogICAgfSBlbHNlIHsKICAgICAgLyogZm91ciBieXRlcyAqLwogICAgICBidWZbaSsrXSA9IDB4ZjAgfCBjID4+PiAxODsKICAgICAgYnVmW2krK10gPSAweDgwIHwgYyA+Pj4gMTIgJiAweDNmOwogICAgICBidWZbaSsrXSA9IDB4ODAgfCBjID4+PiA2ICYgMHgzZjsKICAgICAgYnVmW2krK10gPSAweDgwIHwgYyAmIDB4M2Y7CiAgICB9CiAgfQoKICByZXR1cm4gYnVmOwp9OyAvLyBDYWxjdWxhdGUgbWF4IHBvc3NpYmxlIHBvc2l0aW9uIGluIHV0ZjggYnVmZmVyLAovLyB0aGF0IHdpbGwgbm90IGJyZWFrIHNl
cXVlbmNlLiBJZiB0aGF0J3Mgbm90IHBvc3NpYmxlCi8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuCi8vCi8vIGJ1ZltdIC0gdXRmOCBieXRlcyBhcnJheQovLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTsKCgp2YXIgdXRmOGJvcmRlciA9IGZ1bmN0aW9uIHV0Zjhib3JkZXIoYnVmLCBtYXgpIHsKICB2YXIgcG9zOwogIG1heCA9IG1heCB8fCBidWYubGVuZ3RoOwoKICBpZiAobWF4ID4gYnVmLmxlbmd0aCkgewogICAgbWF4ID0gYnVmLmxlbmd0aDsKICB9IC8vIGdvIGJhY2sg
ZnJvbSBsYXN0IHBvc2l0aW9uLCB1bnRpbCBzdGFydCBvZiBzZXF1ZW5jZSBmb3VuZAoKCiAgcG9zID0gbWF4IC0gMTsKCiAgd2hpbGUgKHBvcyA+PSAwICYmIChidWZbcG9zXSAmIDB4QzApID09PSAweDgwKSB7CiAgICBwb3MtLTsKICB9IC8vIEZ1Y2t1cCAtIHZlcnkgc21hbGwgYW5kIGJyb2tlbiBzZXF1ZW5jZSwKICAvLyByZXR1cm4gbWF4LCBiZWNhdXNlIHdlIHNob3VsZCByZXR1cm4gc29tZXRoaW5nIGFueXdheS4KCgogIGlmIChwb3MgPCAwKSB7CiAgICByZXR1cm4gbWF4OwogIH0gLy8gSWYgd2UgY2FtZSB0byBzdGFy
dCBvZiBidWZmZXIgLSB0aGF0IG1lYW5zIHZ1ZmZlciBpcyB0b28gc21hbGwsCiAgLy8gcmV0dXJuIG1heCB0b28uCgoKICBpZiAocG9zID09PSAwKSB7CiAgICByZXR1cm4gbWF4OwogIH0KCiAgcmV0dXJuIHBvcyArIF91dGY4bGVuW2J1Zltwb3NdXSA+IG1heCA/IHBvcyA6IG1heDsKfTsgLy8gY29udmVydCBhcnJheSB0byBzdHJpbmcKCgp2YXIgYnVmMnN0cmluZyA9IGZ1bmN0aW9uIGJ1ZjJzdHJpbmcoYnVmKSB7CiAgdmFyIHN0ciwgaSwgb3V0LCBjLCBjX2xlbjsKICB2YXIgbGVuID0gYnVmLmxlbmd0aDsgLy8gUmVzZXJ2
ZSBtYXggcG9zc2libGUgbGVuZ3RoICgyIHdvcmRzIHBlciBjaGFyKQogIC8vIE5COiBieSB1bmtub3duIHJlYXNvbnMsIEFycmF5IGlzIHNpZ25pZmljYW50bHkgZmFzdGVyIGZvcgogIC8vICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5IHRoYW4gVWludDE2QXJyYXkuCgogIHZhciB1dGYxNmJ1ZiA9IG5ldyBBcnJheShsZW4gKiAyKTsKCiAgZm9yIChvdXQgPSAwLCBpID0gMDsgaSA8IGxlbjspIHsKICAgIGMgPSBidWZbaSsrXTsgLy8gcXVpY2sgcHJvY2VzcyBhc2NpaQoKICAgIGlmIChjIDwgMHg4MCkgewogICAgICB1
dGYxNmJ1ZltvdXQrK10gPSBjOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICBjX2xlbiA9IF91dGY4bGVuW2NdOyAvLyBza2lwIDUgJiA2IGJ5dGUgY29kZXMKCiAgICBpZiAoY19sZW4gPiA0KSB7CiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZmZmZDsKICAgICAgaSArPSBjX2xlbiAtIDE7CiAgICAgIGNvbnRpbnVlOwogICAgfSAvLyBhcHBseSBtYXNrIG9uIGZpcnN0IGJ5dGUKCgogICAgYyAmPSBjX2xlbiA9PT0gMiA/IDB4MWYgOiBjX2xlbiA9PT0gMyA/IDB4MGYgOiAweDA3OyAvLyBqb2luIHRoZSByZXN0CgogICAg
d2hpbGUgKGNfbGVuID4gMSAmJiBpIDwgbGVuKSB7CiAgICAgIGMgPSBjIDw8IDYgfCBidWZbaSsrXSAmIDB4M2Y7CiAgICAgIGNfbGVuLS07CiAgICB9IC8vIHRlcm1pbmF0ZWQgYnkgZW5kIG9mIHN0cmluZz8KCgogICAgaWYgKGNfbGVuID4gMSkgewogICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIGlmIChjIDwgMHgxMDAwMCkgewogICAgICB1dGYxNmJ1ZltvdXQrK10gPSBjOwogICAgfSBlbHNlIHsKICAgICAgYyAtPSAweDEwMDAwOwogICAgICB1dGYxNmJ1ZltvdXQr
K10gPSAweGQ4MDAgfCBjID4+IDEwICYgMHgzZmY7CiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZGMwMCB8IGMgJiAweDNmZjsKICAgIH0KICB9IC8vIHNocmlua0J1Zih1dGYxNmJ1Ziwgb3V0KQoKCiAgaWYgKHV0ZjE2YnVmLmxlbmd0aCAhPT0gb3V0KSB7CiAgICBpZiAodXRmMTZidWYuc3ViYXJyYXkpIHsKICAgICAgdXRmMTZidWYgPSB1dGYxNmJ1Zi5zdWJhcnJheSgwLCBvdXQpOwogICAgfSBlbHNlIHsKICAgICAgdXRmMTZidWYubGVuZ3RoID0gb3V0OwogICAgfQogIH0gLy8gcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNv
ZGUuYXBwbHkobnVsbCwgdXRmMTZidWYpOwoKCiAgcmV0dXJuIHV0aWxzLmFwcGx5RnJvbUNoYXJDb2RlKHV0ZjE2YnVmKTsKfTsgLy8gVGhhdCdzIGFsbCBmb3IgdGhlIHBha28gZnVuY3Rpb25zLgoKLyoqCiAqIFRyYW5zZm9ybSBhIGphdmFzY3JpcHQgc3RyaW5nIGludG8gYW4gYXJyYXkgKHR5cGVkIGlmIHBvc3NpYmxlKSBvZiBieXRlcywKICogVVRGLTggZW5jb2RlZC4KICogQHBhcmFtIHtTdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIGVuY29kZQogKiBAcmV0dXJuIHtBcnJheXxVaW50OEFycmF5fEJ1ZmZlcn0gdGhlIFVU
Ri04IGVuY29kZWQgc3RyaW5nLgogKi8KCgpleHBvcnRzLnV0ZjhlbmNvZGUgPSBmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cikgewogIGlmIChzdXBwb3J0Lm5vZGVidWZmZXIpIHsKICAgIHJldHVybiBub2RlanNVdGlscy5uZXdCdWZmZXJGcm9tKHN0ciwgInV0Zi04Iik7CiAgfQoKICByZXR1cm4gc3RyaW5nMmJ1ZihzdHIpOwp9OwovKioKICogVHJhbnNmb3JtIGEgYnl0ZXMgYXJyYXkgKG9yIGEgcmVwcmVzZW50YXRpb24pIHJlcHJlc2VudGluZyBhbiBVVEYtOCBlbmNvZGVkCiAqIHN0cmluZyBpbnRvIGEgamF2YXNjcmlwdCBz
dHJpbmcuCiAqIEBwYXJhbSB7QXJyYXl8VWludDhBcnJheXxCdWZmZXJ9IGJ1ZiB0aGUgZGF0YSBkZSBkZWNvZGUKICogQHJldHVybiB7U3RyaW5nfSB0aGUgZGVjb2RlZCBzdHJpbmcuCiAqLwoKCmV4cG9ydHMudXRmOGRlY29kZSA9IGZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnVmKSB7CiAgaWYgKHN1cHBvcnQubm9kZWJ1ZmZlcikgewogICAgcmV0dXJuIHV0aWxzLnRyYW5zZm9ybVRvKCJub2RlYnVmZmVyIiwgYnVmKS50b1N0cmluZygidXRmLTgiKTsKICB9CgogIGJ1ZiA9IHV0aWxzLnRyYW5zZm9ybVRvKHN1cHBvcnQudWludDhh
cnJheSA/ICJ1aW50OGFycmF5IiA6ICJhcnJheSIsIGJ1Zik7CiAgcmV0dXJuIGJ1ZjJzdHJpbmcoYnVmKTsKfTsKLyoqCiAqIEEgd29ya2VyIHRvIGRlY29kZSB1dGY4IGVuY29kZWQgYmluYXJ5IGNodW5rcyBpbnRvIHN0cmluZyBjaHVua3MuCiAqIEBjb25zdHJ1Y3RvcgogKi8KCgpmdW5jdGlvbiBVdGY4RGVjb2RlV29ya2VyKCkgewogIEdlbmVyaWNXb3JrZXIuY2FsbCh0aGlzLCAidXRmLTggZGVjb2RlIik7IC8vIHRoZSBsYXN0IGJ5dGVzIGlmIGEgY2h1bmsgZGlkbid0IGVuZCB3aXRoIGEgY29tcGxldGUgY29kZXBvaW50
LgoKICB0aGlzLmxlZnRPdmVyID0gbnVsbDsKfQoKdXRpbHMuaW5oZXJpdHMoVXRmOERlY29kZVdvcmtlciwgR2VuZXJpY1dvcmtlcik7Ci8qKgogKiBAc2VlIEdlbmVyaWNXb3JrZXIucHJvY2Vzc0NodW5rCiAqLwoKVXRmOERlY29kZVdvcmtlci5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24gKGNodW5rKSB7CiAgdmFyIGRhdGEgPSB1dGlscy50cmFuc2Zvcm1UbyhzdXBwb3J0LnVpbnQ4YXJyYXkgPyAidWludDhhcnJheSIgOiAiYXJyYXkiLCBjaHVuay5kYXRhKTsgLy8gMXN0IHN0ZXAsIHJlLXVzZSB3aGF0J3Mg
bGVmdCBvZiB0aGUgcHJldmlvdXMgY2h1bmsKCiAgaWYgKHRoaXMubGVmdE92ZXIgJiYgdGhpcy5sZWZ0T3Zlci5sZW5ndGgpIHsKICAgIGlmIChzdXBwb3J0LnVpbnQ4YXJyYXkpIHsKICAgICAgdmFyIHByZXZpb3VzRGF0YSA9IGRhdGE7CiAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShwcmV2aW91c0RhdGEubGVuZ3RoICsgdGhpcy5sZWZ0T3Zlci5sZW5ndGgpOwogICAgICBkYXRhLnNldCh0aGlzLmxlZnRPdmVyLCAwKTsKICAgICAgZGF0YS5zZXQocHJldmlvdXNEYXRhLCB0aGlzLmxlZnRPdmVyLmxlbmd0aCk7CiAgICB9
IGVsc2UgewogICAgICBkYXRhID0gdGhpcy5sZWZ0T3Zlci5jb25jYXQoZGF0YSk7CiAgICB9CgogICAgdGhpcy5sZWZ0T3ZlciA9IG51bGw7CiAgfQoKICB2YXIgbmV4dEJvdW5kYXJ5ID0gdXRmOGJvcmRlcihkYXRhKTsKICB2YXIgdXNhYmxlRGF0YSA9IGRhdGE7CgogIGlmIChuZXh0Qm91bmRhcnkgIT09IGRhdGEubGVuZ3RoKSB7CiAgICBpZiAoc3VwcG9ydC51aW50OGFycmF5KSB7CiAgICAgIHVzYWJsZURhdGEgPSBkYXRhLnN1YmFycmF5KDAsIG5leHRCb3VuZGFyeSk7CiAgICAgIHRoaXMubGVmdE92ZXIgPSBkYXRhLnN1
YmFycmF5KG5leHRCb3VuZGFyeSwgZGF0YS5sZW5ndGgpOwogICAgfSBlbHNlIHsKICAgICAgdXNhYmxlRGF0YSA9IGRhdGEuc2xpY2UoMCwgbmV4dEJvdW5kYXJ5KTsKICAgICAgdGhpcy5sZWZ0T3ZlciA9IGRhdGEuc2xpY2UobmV4dEJvdW5kYXJ5LCBkYXRhLmxlbmd0aCk7CiAgICB9CiAgfQoKICB0aGlzLnB1c2goewogICAgZGF0YTogZXhwb3J0cy51dGY4ZGVjb2RlKHVzYWJsZURhdGEpLAogICAgbWV0YTogY2h1bmsubWV0YQogIH0pOwp9OwovKioKICogQHNlZSBHZW5lcmljV29ya2VyLmZsdXNoCiAqLwoKClV0ZjhEZWNv
ZGVXb3JrZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkgewogIGlmICh0aGlzLmxlZnRPdmVyICYmIHRoaXMubGVmdE92ZXIubGVuZ3RoKSB7CiAgICB0aGlzLnB1c2goewogICAgICBkYXRhOiBleHBvcnRzLnV0ZjhkZWNvZGUodGhpcy5sZWZ0T3ZlciksCiAgICAgIG1ldGE6IHt9CiAgICB9KTsKICAgIHRoaXMubGVmdE92ZXIgPSBudWxsOwogIH0KfTsKCmV4cG9ydHMuVXRmOERlY29kZVdvcmtlciA9IFV0ZjhEZWNvZGVXb3JrZXI7Ci8qKgogKiBBIHdvcmtlciB0byBlbmRjb2RlIHN0cmluZyBjaHVua3MgaW50byB1
dGY4IGVuY29kZWQgYmluYXJ5IGNodW5rcy4KICogQGNvbnN0cnVjdG9yCiAqLwoKZnVuY3Rpb24gVXRmOEVuY29kZVdvcmtlcigpIHsKICBHZW5lcmljV29ya2VyLmNhbGwodGhpcywgInV0Zi04IGVuY29kZSIpOwp9Cgp1dGlscy5pbmhlcml0cyhVdGY4RW5jb2RlV29ya2VyLCBHZW5lcmljV29ya2VyKTsKLyoqCiAqIEBzZWUgR2VuZXJpY1dvcmtlci5wcm9jZXNzQ2h1bmsKICovCgpVdGY4RW5jb2RlV29ya2VyLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmspIHsKICB0aGlzLnB1c2goewogICAgZGF0
YTogZXhwb3J0cy51dGY4ZW5jb2RlKGNodW5rLmRhdGEpLAogICAgbWV0YTogY2h1bmsubWV0YQogIH0pOwp9OwoKZXhwb3J0cy5VdGY4RW5jb2RlV29ya2VyID0gVXRmOEVuY29kZVdvcmtlcjsKCn0seyIuL25vZGVqc1V0aWxzIjoyOTQsIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXIiOjMwOCwiLi9zdXBwb3J0IjozMTAsIi4vdXRpbHMiOjMxMn1dLDMxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBzdXBwb3J0ID0gcmVxdWlyZSgnLi9zdXBwb3J0Jyk7Cgp2YXIgYmFzZTY0ID0g
cmVxdWlyZSgnLi9iYXNlNjQnKTsKCnZhciBub2RlanNVdGlscyA9IHJlcXVpcmUoJy4vbm9kZWpzVXRpbHMnKTsKCnZhciBzZXRJbW1lZGlhdGUgPSByZXF1aXJlKCdzZXQtaW1tZWRpYXRlLXNoaW0nKTsKCnZhciBleHRlcm5hbCA9IHJlcXVpcmUoIi4vZXh0ZXJuYWwiKTsKLyoqCiAqIENvbnZlcnQgYSBzdHJpbmcgdGhhdCBwYXNzIGFzIGEgImJpbmFyeSBzdHJpbmciOiBpdCBzaG91bGQgcmVwcmVzZW50IGEgYnl0ZQogKiBhcnJheSBidXQgbWF5IGhhdmUgPiAyNTUgY2hhciBjb2Rlcy4gQmUgc3VyZSB0byB0YWtlIG9ubHkg
dGhlIGZpcnN0IGJ5dGUKICogYW5kIHJldHVybnMgdGhlIGJ5dGUgYXJyYXkuCiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgdGhlIHN0cmluZyB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4ge0FycmF5fFVpbnQ4QXJyYXl9IHRoZSBzdHJpbmcgaW4gYSBiaW5hcnkgZm9ybWF0LgogKi8KCgpmdW5jdGlvbiBzdHJpbmcyYmluYXJ5KHN0cikgewogIHZhciByZXN1bHQgPSBudWxsOwoKICBpZiAoc3VwcG9ydC51aW50OGFycmF5KSB7CiAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTsKICB9IGVsc2UgewogICAgcmVz
dWx0ID0gbmV3IEFycmF5KHN0ci5sZW5ndGgpOwogIH0KCiAgcmV0dXJuIHN0cmluZ1RvQXJyYXlMaWtlKHN0ciwgcmVzdWx0KTsKfQovKioKICogQ3JlYXRlIGEgbmV3IGJsb2Igd2l0aCB0aGUgZ2l2ZW4gY29udGVudCBhbmQgdGhlIGdpdmVuIHR5cGUuCiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5QnVmZmVyfSBwYXJ0IHRoZSBjb250ZW50IHRvIHB1dCBpbiB0aGUgYmxvYi4gRE8gTk9UIHVzZQogKiBhbiBVaW50OEFycmF5IGJlY2F1c2UgdGhlIHN0b2NrIGJyb3dzZXIgb2YgYW5kcm9pZCA0IHdvbid0IGFjY2VwdCBpdCAoaXQK
ICogd2lsbCBiZSBzaWxlbnRseSBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcsICJbb2JqZWN0IFVpbnQ4QXJyYXldIikuCiAqCiAqIFVzZSBvbmx5IE9ORSBwYXJ0IHRvIGJ1aWxkIHRoZSBibG9iIHRvIGF2b2lkIGEgbWVtb3J5IGxlYWsgaW4gSUUxMSAvIEVkZ2U6CiAqIHdoZW4gYSBsYXJnZSBhbW91bnQgb2YgQXJyYXkgaXMgdXNlZCB0byBjcmVhdGUgdGhlIEJsb2IsIHRoZSBhbW91bnQgb2YKICogbWVtb3J5IGNvbnN1bWVkIGlzIG5lYXJseSAxMDAgdGltZXMgdGhlIG9yaWdpbmFsIGRhdGEgYW1vdW50LgogKgogKiBAcGFyYW0g
e1N0cmluZ30gdHlwZSB0aGUgbWltZSB0eXBlIG9mIHRoZSBibG9iLgogKiBAcmV0dXJuIHtCbG9ifSB0aGUgY3JlYXRlZCBibG9iLgogKi8KCgpleHBvcnRzLm5ld0Jsb2IgPSBmdW5jdGlvbiAocGFydCwgdHlwZSkgewogIGV4cG9ydHMuY2hlY2tTdXBwb3J0KCJibG9iIik7CgogIHRyeSB7CiAgICAvLyBCbG9iIGNvbnN0cnVjdG9yCiAgICByZXR1cm4gbmV3IEJsb2IoW3BhcnRdLCB7CiAgICAgIHR5cGU6IHR5cGUKICAgIH0pOwogIH0gY2F0Y2ggKGUpIHsKICAgIHRyeSB7CiAgICAgIC8vIGRlcHJlY2F0ZWQsIGJyb3dzZXIg
b25seSwgb2xkIHdheQogICAgICB2YXIgQnVpbGRlciA9IHNlbGYuQmxvYkJ1aWxkZXIgfHwgc2VsZi5XZWJLaXRCbG9iQnVpbGRlciB8fCBzZWxmLk1vekJsb2JCdWlsZGVyIHx8IHNlbGYuTVNCbG9iQnVpbGRlcjsKICAgICAgdmFyIGJ1aWxkZXIgPSBuZXcgQnVpbGRlcigpOwogICAgICBidWlsZGVyLmFwcGVuZChwYXJ0KTsKICAgICAgcmV0dXJuIGJ1aWxkZXIuZ2V0QmxvYih0eXBlKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgLy8gd2VsbCwgZnVjayA/IQogICAgICB0aHJvdyBuZXcgRXJyb3IoIkJ1ZyA6IGNhbid0IGNv
bnN0cnVjdCB0aGUgQmxvYi4iKTsKICAgIH0KICB9Cn07Ci8qKgogKiBUaGUgaWRlbnRpdHkgZnVuY3Rpb24uCiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dCB0aGUgaW5wdXQuCiAqIEByZXR1cm4ge09iamVjdH0gdGhlIHNhbWUgaW5wdXQuCiAqLwoKCmZ1bmN0aW9uIGlkZW50aXR5KGlucHV0KSB7CiAgcmV0dXJuIGlucHV0Owp9Ci8qKgogKiBGaWxsIGluIGFuIGFycmF5IHdpdGggYSBzdHJpbmcuCiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgdGhlIHN0cmluZyB0byB1c2UuCiAqIEBwYXJhbSB7QXJyYXl8QXJyYXlCdWZmZXJ8VWlu
dDhBcnJheXxCdWZmZXJ9IGFycmF5IHRoZSBhcnJheSB0byBmaWxsIGluICh3aWxsIGJlIG11dGF0ZWQpLgogKiBAcmV0dXJuIHtBcnJheXxBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gdGhlIHVwZGF0ZWQgYXJyYXkuCiAqLwoKCmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXlMaWtlKHN0ciwgYXJyYXkpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgewogICAgYXJyYXlbaV0gPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4RkY7CiAgfQoKICByZXR1cm4gYXJyYXk7Cn0KLyoqCiAqIEFuIGhlbHBlciBm
b3IgdGhlIGZ1bmN0aW9uIGFycmF5TGlrZVRvU3RyaW5nLgogKiBUaGlzIGNvbnRhaW5zIHN0YXRpYyBpbmZvcm1hdGlvbiBhbmQgZnVuY3Rpb25zIHRoYXQKICogY2FuIGJlIG9wdGltaXplZCBieSB0aGUgYnJvd3NlciBKSVQgY29tcGlsZXIuCiAqLwoKCnZhciBhcnJheVRvU3RyaW5nSGVscGVyID0gewogIC8qKgogICAqIFRyYW5zZm9ybSBhbiBhcnJheSBvZiBpbnQgaW50byBhIHN0cmluZywgY2h1bmsgYnkgY2h1bmsuCiAgICogU2VlIHRoZSBwZXJmb3JtYW5jZXMgbm90ZXMgb24gYXJyYXlMaWtlVG9TdHJpbmcuCiAgICog
QHBhcmFtIHtBcnJheXxBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gYXJyYXkgdGhlIGFycmF5IHRvIHRyYW5zZm9ybS4KICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgdHlwZSBvZiB0aGUgYXJyYXkuCiAgICogQHBhcmFtIHtJbnRlZ2VyfSBjaHVuayB0aGUgY2h1bmsgc2l6ZS4KICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSByZXN1bHRpbmcgc3RyaW5nLgogICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIGNodW5rIGlzIHRvbyBiaWcgZm9yIHRoZSBzdGFjay4KICAgKi8KICBzdHJpbmdpZnlCeUNodW5rOiBmdW5j
dGlvbiBzdHJpbmdpZnlCeUNodW5rKGFycmF5LCB0eXBlLCBjaHVuaykgewogICAgdmFyIHJlc3VsdCA9IFtdLAogICAgICAgIGsgPSAwLAogICAgICAgIGxlbiA9IGFycmF5Lmxlbmd0aDsgLy8gc2hvcnRjdXQKCiAgICBpZiAobGVuIDw9IGNodW5rKSB7CiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycmF5KTsKICAgIH0KCiAgICB3aGlsZSAoayA8IGxlbikgewogICAgICBpZiAodHlwZSA9PT0gImFycmF5IiB8fCB0eXBlID09PSAibm9kZWJ1ZmZlciIpIHsKICAgICAgICByZXN1bHQucHVz
aChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycmF5LnNsaWNlKGssIE1hdGgubWluKGsgKyBjaHVuaywgbGVuKSkpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycmF5LnN1YmFycmF5KGssIE1hdGgubWluKGsgKyBjaHVuaywgbGVuKSkpKTsKICAgICAgfQoKICAgICAgayArPSBjaHVuazsKICAgIH0KCiAgICByZXR1cm4gcmVzdWx0LmpvaW4oIiIpOwogIH0sCgogIC8qKgogICAqIENhbGwgU3RyaW5nLmZyb21DaGFyQ29kZSBvbiBl
dmVyeSBpdGVtIGluIHRoZSBhcnJheS4KICAgKiBUaGlzIGlzIHRoZSBuYWl2ZSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggZ2VuZXJhdGUgQSBMT1Qgb2YgaW50ZXJtZWRpYXRlIHN0cmluZy4KICAgKiBUaGlzIHNob3VsZCBiZSB1c2VkIHdoZW4gZXZlcnl0aGluZyBlbHNlIGZhaWwuCiAgICogQHBhcmFtIHtBcnJheXxBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gYXJyYXkgdGhlIGFycmF5IHRvIHRyYW5zZm9ybS4KICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSByZXN1bHQuCiAgICovCiAgc3RyaW5naWZ5QnlDaGFyOiBm
dW5jdGlvbiBzdHJpbmdpZnlCeUNoYXIoYXJyYXkpIHsKICAgIHZhciByZXN1bHRTdHIgPSAiIjsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgIHJlc3VsdFN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFycmF5W2ldKTsKICAgIH0KCiAgICByZXR1cm4gcmVzdWx0U3RyOwogIH0sCiAgYXBwbHlDYW5CZVVzZWQ6IHsKICAgIC8qKgogICAgICogdHJ1ZSBpZiB0aGUgYnJvd3NlciBhY2NlcHRzIHRvIHVzZSBTdHJpbmcuZnJvbUNoYXJDb2RlIG9uIFVpbnQ4QXJyYXkKICAgICAqLwog
ICAgdWludDhhcnJheTogZnVuY3Rpb24gKCkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiBzdXBwb3J0LnVpbnQ4YXJyYXkgJiYgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSkubGVuZ3RoID09PSAxOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9KCksCgogICAgLyoqCiAgICAgKiB0cnVlIGlmIHRoZSBicm93c2VyIGFjY2VwdHMgdG8gdXNlIFN0cmluZy5mcm9tQ2hhckNvZGUgb24gbm9kZWpzIEJ1ZmZlci4KICAgICAqLwog
ICAgbm9kZWJ1ZmZlcjogZnVuY3Rpb24gKCkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiBzdXBwb3J0Lm5vZGVidWZmZXIgJiYgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBub2RlanNVdGlscy5hbGxvY0J1ZmZlcigxKSkubGVuZ3RoID09PSAxOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9KCkKICB9Cn07Ci8qKgogKiBUcmFuc2Zvcm0gYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYSBzdHJpbmcuCiAqIEBwYXJhbSB7QXJyYXl8QXJyYXlCdWZmZXJ8VWlu
dDhBcnJheXxCdWZmZXJ9IGFycmF5IHRoZSBhcnJheSB0byB0cmFuc2Zvcm0uCiAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHJlc3VsdC4KICovCgpmdW5jdGlvbiBhcnJheUxpa2VUb1N0cmluZyhhcnJheSkgewogIC8vIFBlcmZvcm1hbmNlcyBub3RlcyA6CiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAvLyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycmF5KSBpcyB0aGUgZmFzdGVzdCwgc2VlCiAgLy8gc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NvbnZlcnRpbmctYS11aW50OGFycmF5LXRvLWEtc3RyaW5nLzIK
ICAvLyBidXQgdGhlIHN0YWNrIGlzIGxpbWl0ZWQgKGFuZCB3ZSBjYW4gZ2V0IGh1Z2UgYXJyYXlzICEpLgogIC8vCiAgLy8gcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYXJyYXlbaV0pOyBnZW5lcmF0ZSB0b28gbWFueSBzdHJpbmdzICEKICAvLwogIC8vIFRoaXMgY29kZSBpcyBpbnNwaXJlZCBieSBodHRwOi8vanNwZXJmLmNvbS9hcnJheWJ1ZmZlci10by1zdHJpbmctYXBwbHktcGVyZm9ybWFuY2UvMgogIC8vIFRPRE8gOiB3ZSBub3cgaGF2ZSB3b3JrZXJzIHRoYXQgc3BsaXQgdGhlIHdvcmsuIERvIHdlIHN0aWxs
IG5lZWQgdGhhdCA/CiAgdmFyIGNodW5rID0gNjU1MzYsCiAgICAgIHR5cGUgPSBleHBvcnRzLmdldFR5cGVPZihhcnJheSksCiAgICAgIGNhblVzZUFwcGx5ID0gdHJ1ZTsKCiAgaWYgKHR5cGUgPT09ICJ1aW50OGFycmF5IikgewogICAgY2FuVXNlQXBwbHkgPSBhcnJheVRvU3RyaW5nSGVscGVyLmFwcGx5Q2FuQmVVc2VkLnVpbnQ4YXJyYXk7CiAgfSBlbHNlIGlmICh0eXBlID09PSAibm9kZWJ1ZmZlciIpIHsKICAgIGNhblVzZUFwcGx5ID0gYXJyYXlUb1N0cmluZ0hlbHBlci5hcHBseUNhbkJlVXNlZC5ub2RlYnVmZmVyOwog
IH0KCiAgaWYgKGNhblVzZUFwcGx5KSB7CiAgICB3aGlsZSAoY2h1bmsgPiAxKSB7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIGFycmF5VG9TdHJpbmdIZWxwZXIuc3RyaW5naWZ5QnlDaHVuayhhcnJheSwgdHlwZSwgY2h1bmspOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY2h1bmsgPSBNYXRoLmZsb29yKGNodW5rIC8gMik7CiAgICAgIH0KICAgIH0KICB9IC8vIG5vIGFwcGx5IG9yIGNodW5rIGVycm9yIDogc2xvdyBhbmQgcGFpbmZ1bCBhbGdvcml0aG0KICAvLyBkZWZhdWx0IGJyb3dzZXIgb24gYW5kcm9pZCA0
LioKCgogIHJldHVybiBhcnJheVRvU3RyaW5nSGVscGVyLnN0cmluZ2lmeUJ5Q2hhcihhcnJheSk7Cn0KCmV4cG9ydHMuYXBwbHlGcm9tQ2hhckNvZGUgPSBhcnJheUxpa2VUb1N0cmluZzsKLyoqCiAqIENvcHkgdGhlIGRhdGEgZnJvbSBhbiBhcnJheS1saWtlIHRvIGFuIG90aGVyIGFycmF5LWxpa2UuCiAqIEBwYXJhbSB7QXJyYXl8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGFycmF5RnJvbSB0aGUgb3JpZ2luIGFycmF5LgogKiBAcGFyYW0ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBhcnJh
eVRvIHRoZSBkZXN0aW5hdGlvbiBhcnJheSB3aGljaCB3aWxsIGJlIG11dGF0ZWQuCiAqIEByZXR1cm4ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSB0aGUgdXBkYXRlZCBkZXN0aW5hdGlvbiBhcnJheS4KICovCgpmdW5jdGlvbiBhcnJheUxpa2VUb0FycmF5TGlrZShhcnJheUZyb20sIGFycmF5VG8pIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5RnJvbS5sZW5ndGg7IGkrKykgewogICAgYXJyYXlUb1tpXSA9IGFycmF5RnJvbVtpXTsKICB9CgogIHJldHVybiBhcnJheVRvOwp9IC8vIGEgbWF0cml4
IGNvbnRhaW5pbmcgZnVuY3Rpb25zIHRvIHRyYW5zZm9ybSBldmVyeXRoaW5nIGludG8gZXZlcnl0aGluZy4KCgp2YXIgdHJhbnNmb3JtID0ge307IC8vIHN0cmluZyB0byA/Cgp0cmFuc2Zvcm1bInN0cmluZyJdID0gewogICJzdHJpbmciOiBpZGVudGl0eSwKICAiYXJyYXkiOiBmdW5jdGlvbiBhcnJheShpbnB1dCkgewogICAgcmV0dXJuIHN0cmluZ1RvQXJyYXlMaWtlKGlucHV0LCBuZXcgQXJyYXkoaW5wdXQubGVuZ3RoKSk7CiAgfSwKICAiYXJyYXlidWZmZXIiOiBmdW5jdGlvbiBhcnJheWJ1ZmZlcihpbnB1dCkgewogICAg
cmV0dXJuIHRyYW5zZm9ybVsic3RyaW5nIl1bInVpbnQ4YXJyYXkiXShpbnB1dCkuYnVmZmVyOwogIH0sCiAgInVpbnQ4YXJyYXkiOiBmdW5jdGlvbiB1aW50OGFycmF5KGlucHV0KSB7CiAgICByZXR1cm4gc3RyaW5nVG9BcnJheUxpa2UoaW5wdXQsIG5ldyBVaW50OEFycmF5KGlucHV0Lmxlbmd0aCkpOwogIH0sCiAgIm5vZGVidWZmZXIiOiBmdW5jdGlvbiBub2RlYnVmZmVyKGlucHV0KSB7CiAgICByZXR1cm4gc3RyaW5nVG9BcnJheUxpa2UoaW5wdXQsIG5vZGVqc1V0aWxzLmFsbG9jQnVmZmVyKGlucHV0Lmxlbmd0aCkpOwog
IH0KfTsgLy8gYXJyYXkgdG8gPwoKdHJhbnNmb3JtWyJhcnJheSJdID0gewogICJzdHJpbmciOiBhcnJheUxpa2VUb1N0cmluZywKICAiYXJyYXkiOiBpZGVudGl0eSwKICAiYXJyYXlidWZmZXIiOiBmdW5jdGlvbiBhcnJheWJ1ZmZlcihpbnB1dCkgewogICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGlucHV0KS5idWZmZXI7CiAgfSwKICAidWludDhhcnJheSI6IGZ1bmN0aW9uIHVpbnQ4YXJyYXkoaW5wdXQpIHsKICAgIHJldHVybiBuZXcgVWludDhBcnJheShpbnB1dCk7CiAgfSwKICAibm9kZWJ1ZmZlciI6IGZ1bmN0aW9uIG5v
ZGVidWZmZXIoaW5wdXQpIHsKICAgIHJldHVybiBub2RlanNVdGlscy5uZXdCdWZmZXJGcm9tKGlucHV0KTsKICB9Cn07IC8vIGFycmF5YnVmZmVyIHRvID8KCnRyYW5zZm9ybVsiYXJyYXlidWZmZXIiXSA9IHsKICAic3RyaW5nIjogZnVuY3Rpb24gc3RyaW5nKGlucHV0KSB7CiAgICByZXR1cm4gYXJyYXlMaWtlVG9TdHJpbmcobmV3IFVpbnQ4QXJyYXkoaW5wdXQpKTsKICB9LAogICJhcnJheSI6IGZ1bmN0aW9uIGFycmF5KGlucHV0KSB7CiAgICByZXR1cm4gYXJyYXlMaWtlVG9BcnJheUxpa2UobmV3IFVpbnQ4QXJyYXkoaW5w
dXQpLCBuZXcgQXJyYXkoaW5wdXQuYnl0ZUxlbmd0aCkpOwogIH0sCiAgImFycmF5YnVmZmVyIjogaWRlbnRpdHksCiAgInVpbnQ4YXJyYXkiOiBmdW5jdGlvbiB1aW50OGFycmF5KGlucHV0KSB7CiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaW5wdXQpOwogIH0sCiAgIm5vZGVidWZmZXIiOiBmdW5jdGlvbiBub2RlYnVmZmVyKGlucHV0KSB7CiAgICByZXR1cm4gbm9kZWpzVXRpbHMubmV3QnVmZmVyRnJvbShuZXcgVWludDhBcnJheShpbnB1dCkpOwogIH0KfTsgLy8gdWludDhhcnJheSB0byA/Cgp0cmFuc2Zvcm1bInVpbnQ4
YXJyYXkiXSA9IHsKICAic3RyaW5nIjogYXJyYXlMaWtlVG9TdHJpbmcsCiAgImFycmF5IjogZnVuY3Rpb24gYXJyYXkoaW5wdXQpIHsKICAgIHJldHVybiBhcnJheUxpa2VUb0FycmF5TGlrZShpbnB1dCwgbmV3IEFycmF5KGlucHV0Lmxlbmd0aCkpOwogIH0sCiAgImFycmF5YnVmZmVyIjogZnVuY3Rpb24gYXJyYXlidWZmZXIoaW5wdXQpIHsKICAgIHJldHVybiBpbnB1dC5idWZmZXI7CiAgfSwKICAidWludDhhcnJheSI6IGlkZW50aXR5LAogICJub2RlYnVmZmVyIjogZnVuY3Rpb24gbm9kZWJ1ZmZlcihpbnB1dCkgewogICAg
cmV0dXJuIG5vZGVqc1V0aWxzLm5ld0J1ZmZlckZyb20oaW5wdXQpOwogIH0KfTsgLy8gbm9kZWJ1ZmZlciB0byA/Cgp0cmFuc2Zvcm1bIm5vZGVidWZmZXIiXSA9IHsKICAic3RyaW5nIjogYXJyYXlMaWtlVG9TdHJpbmcsCiAgImFycmF5IjogZnVuY3Rpb24gYXJyYXkoaW5wdXQpIHsKICAgIHJldHVybiBhcnJheUxpa2VUb0FycmF5TGlrZShpbnB1dCwgbmV3IEFycmF5KGlucHV0Lmxlbmd0aCkpOwogIH0sCiAgImFycmF5YnVmZmVyIjogZnVuY3Rpb24gYXJyYXlidWZmZXIoaW5wdXQpIHsKICAgIHJldHVybiB0cmFuc2Zvcm1b
Im5vZGVidWZmZXIiXVsidWludDhhcnJheSJdKGlucHV0KS5idWZmZXI7CiAgfSwKICAidWludDhhcnJheSI6IGZ1bmN0aW9uIHVpbnQ4YXJyYXkoaW5wdXQpIHsKICAgIHJldHVybiBhcnJheUxpa2VUb0FycmF5TGlrZShpbnB1dCwgbmV3IFVpbnQ4QXJyYXkoaW5wdXQubGVuZ3RoKSk7CiAgfSwKICAibm9kZWJ1ZmZlciI6IGlkZW50aXR5Cn07Ci8qKgogKiBUcmFuc2Zvcm0gYW4gaW5wdXQgaW50byBhbnkgdHlwZS4KICogVGhlIHN1cHBvcnRlZCBvdXRwdXQgdHlwZSBhcmUgOiBzdHJpbmcsIGFycmF5LCB1aW50OGFycmF5LCBh
cnJheWJ1ZmZlciwgbm9kZWJ1ZmZlci4KICogSWYgbm8gb3V0cHV0IHR5cGUgaXMgc3BlY2lmaWVkLCB0aGUgdW5tb2RpZmllZCBpbnB1dCB3aWxsIGJlIHJldHVybmVkLgogKiBAcGFyYW0ge1N0cmluZ30gb3V0cHV0VHlwZSB0aGUgb3V0cHV0IHR5cGUuCiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBpbnB1dCB0aGUgaW5wdXQgdG8gY29udmVydC4KICogQHRocm93cyB7RXJyb3J9IGFuIEVycm9yIGlmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgcmVxdWVzdGVk
IG91dHB1dCB0eXBlLgogKi8KCmV4cG9ydHMudHJhbnNmb3JtVG8gPSBmdW5jdGlvbiAob3V0cHV0VHlwZSwgaW5wdXQpIHsKICBpZiAoIWlucHV0KSB7CiAgICAvLyB1bmRlZmluZWQsIG51bGwsIGV0YwogICAgLy8gYW4gZW1wdHkgc3RyaW5nIHdvbid0IGhhcm0uCiAgICBpbnB1dCA9ICIiOwogIH0KCiAgaWYgKCFvdXRwdXRUeXBlKSB7CiAgICByZXR1cm4gaW5wdXQ7CiAgfQoKICBleHBvcnRzLmNoZWNrU3VwcG9ydChvdXRwdXRUeXBlKTsKICB2YXIgaW5wdXRUeXBlID0gZXhwb3J0cy5nZXRUeXBlT2YoaW5wdXQpOwogIHZh
ciByZXN1bHQgPSB0cmFuc2Zvcm1baW5wdXRUeXBlXVtvdXRwdXRUeXBlXShpbnB1dCk7CiAgcmV0dXJuIHJlc3VsdDsKfTsKLyoqCiAqIFJldHVybiB0aGUgdHlwZSBvZiB0aGUgaW5wdXQuCiAqIFRoZSB0eXBlIHdpbGwgYmUgaW4gYSBmb3JtYXQgdmFsaWQgZm9yIEpTWmlwLnV0aWxzLnRyYW5zZm9ybVRvIDogc3RyaW5nLCBhcnJheSwgdWludDhhcnJheSwgYXJyYXlidWZmZXIuCiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dCB0aGUgaW5wdXQgdG8gaWRlbnRpZnkuCiAqIEByZXR1cm4ge1N0cmluZ30gdGhlIChsb3dlcmNhc2Up
IHR5cGUgb2YgdGhlIGlucHV0LgogKi8KCgpleHBvcnRzLmdldFR5cGVPZiA9IGZ1bmN0aW9uIChpbnB1dCkgewogIGlmICh0eXBlb2YgaW5wdXQgPT09ICJzdHJpbmciKSB7CiAgICByZXR1cm4gInN0cmluZyI7CiAgfQoKICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gIltvYmplY3QgQXJyYXldIikgewogICAgcmV0dXJuICJhcnJheSI7CiAgfQoKICBpZiAoc3VwcG9ydC5ub2RlYnVmZmVyICYmIG5vZGVqc1V0aWxzLmlzQnVmZmVyKGlucHV0KSkgewogICAgcmV0dXJuICJub2RlYnVmZmVy
IjsKICB9CgogIGlmIChzdXBwb3J0LnVpbnQ4YXJyYXkgJiYgaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7CiAgICByZXR1cm4gInVpbnQ4YXJyYXkiOwogIH0KCiAgaWYgKHN1cHBvcnQuYXJyYXlidWZmZXIgJiYgaW5wdXQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewogICAgcmV0dXJuICJhcnJheWJ1ZmZlciI7CiAgfQp9OwovKioKICogVGhyb3cgYW4gZXhjZXB0aW9uIGlmIHRoZSB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQuCiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSB0eXBlIHRvIGNoZWNrLgogKiBAdGhyb3dz
IHtFcnJvcn0gYW4gRXJyb3IgaWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSByZXF1ZXN0ZWQgdHlwZS4KICovCgoKZXhwb3J0cy5jaGVja1N1cHBvcnQgPSBmdW5jdGlvbiAodHlwZSkgewogIHZhciBzdXBwb3J0ZWQgPSBzdXBwb3J0W3R5cGUudG9Mb3dlckNhc2UoKV07CgogIGlmICghc3VwcG9ydGVkKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IodHlwZSArICIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIHBsYXRmb3JtIik7CiAgfQp9OwoKZXhwb3J0cy5NQVhfVkFMVUVfMTZCSVRTID0gNjU1MzU7CmV4cG9ydHMu
TUFYX1ZBTFVFXzMyQklUUyA9IC0xOyAvLyB3ZWxsLCAiXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkYiIGlzIHBhcnNlZCBhcyAtMQoKLyoqCiAqIFByZXR0aWZ5IGEgc3RyaW5nIHJlYWQgYXMgYmluYXJ5LgogKiBAcGFyYW0ge3N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gcHJldHRpZnkuCiAqIEByZXR1cm4ge3N0cmluZ30gYSBwcmV0dHkgc3RyaW5nLgogKi8KCmV4cG9ydHMucHJldHR5ID0gZnVuY3Rpb24gKHN0cikgewogIHZhciByZXMgPSAnJywKICAgICAgY29kZSwKICAgICAgaTsKCiAgZm9yIChpID0gMDsg
aSA8IChzdHIgfHwgIiIpLmxlbmd0aDsgaSsrKSB7CiAgICBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICByZXMgKz0gJ1xceCcgKyAoY29kZSA8IDE2ID8gIjAiIDogIiIpICsgY29kZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsKICB9CgogIHJldHVybiByZXM7Cn07Ci8qKgogKiBEZWZlciB0aGUgY2FsbCBvZiBhIGZ1bmN0aW9uLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgZnVuY3Rpb24gdG8gY2FsbCBhc3luY2hyb25vdXNseS4KICogQHBhcmFtIHtBcnJheX0gYXJncyB0aGUgYXJndW1lbnRz
IHRvIGdpdmUgdG8gdGhlIGNhbGxiYWNrLgogKi8KCgpleHBvcnRzLmRlbGF5ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBhcmdzLCBzZWxmKSB7CiAgc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHsKICAgIGNhbGxiYWNrLmFwcGx5KHNlbGYgfHwgbnVsbCwgYXJncyB8fCBbXSk7CiAgfSk7Cn07Ci8qKgogKiBFeHRlbmRzIGEgcHJvdG90eXBlIHdpdGggYW4gb3RoZXIsIHdpdGhvdXQgY2FsbGluZyBhIGNvbnN0cnVjdG9yIHdpdGgKICogc2lkZSBlZmZlY3RzLiBJbnNwaXJlZCBieSBub2RlanMnIGB1dGlscy5pbmhlcml0c2AKICog
QHBhcmFtIHtGdW5jdGlvbn0gY3RvciB0aGUgY29uc3RydWN0b3IgdG8gYXVnbWVudAogKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdXBlckN0b3IgdGhlIHBhcmVudCBjb25zdHJ1Y3RvciB0byB1c2UKICovCgoKZXhwb3J0cy5pbmhlcml0cyA9IGZ1bmN0aW9uIChjdG9yLCBzdXBlckN0b3IpIHsKICB2YXIgT2JqID0gZnVuY3Rpb24gT2JqKCkge307CgogIE9iai5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlOwogIGN0b3IucHJvdG90eXBlID0gbmV3IE9iaigpOwp9OwovKioKICogTWVyZ2UgdGhlIG9iamVjdHMgcGFzc2Vk
IGFzIHBhcmFtZXRlcnMgaW50byBhIG5ldyBvbmUuCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Li4uT2JqZWN0fSB2YXJfYXJncyBBbGwgb2JqZWN0cyB0byBtZXJnZS4KICogQHJldHVybiB7T2JqZWN0fSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgZGF0YSBvZiB0aGUgb3RoZXJzLgogKi8KCgpleHBvcnRzLmV4dGVuZCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgcmVzdWx0ID0ge30sCiAgICAgIGksCiAgICAgIGF0dHI7CgogIGZvciAoaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIC8vIGFyZ3VtZW50cyBpcyBu
b3QgZW51bWVyYWJsZSBpbiBzb21lIGJyb3dzZXJzCiAgICBmb3IgKGF0dHIgaW4gYXJndW1lbnRzW2ldKSB7CiAgICAgIGlmIChhcmd1bWVudHNbaV0uaGFzT3duUHJvcGVydHkoYXR0cikgJiYgdHlwZW9mIHJlc3VsdFthdHRyXSA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICByZXN1bHRbYXR0cl0gPSBhcmd1bWVudHNbaV1bYXR0cl07CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiByZXN1bHQ7Cn07Ci8qKgogKiBUcmFuc2Zvcm0gYXJiaXRyYXJ5IGNvbnRlbnQgaW50byBhIFByb21pc2UuCiAqIEBwYXJhbSB7U3RyaW5n
fSBuYW1lIGEgbmFtZSBmb3IgdGhlIGNvbnRlbnQgYmVpbmcgcHJvY2Vzc2VkLgogKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhIHRoZSBjb250ZW50IHRvIHByb2Nlc3MuCiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNCaW5hcnkgdHJ1ZSBpZiB0aGUgY29udGVudCBpcyBub3QgYW4gdW5pY29kZSBzdHJpbmcKICogQHBhcmFtIHtCb29sZWFufSBpc09wdGltaXplZEJpbmFyeVN0cmluZyB0cnVlIGlmIHRoZSBzdHJpbmcgY29udGVudCBvbmx5IGhhcyBvbmUgYnl0ZSBwZXIgY2hhcmFjdGVyLgogKiBAcGFyYW0ge0Jvb2xlYW59IGlz
QmFzZTY0IHRydWUgaWYgdGhlIHN0cmluZyBjb250ZW50IGlzIGVuY29kZWQgd2l0aCBiYXNlNjQuCiAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSBpbiBhIGZvcm1hdCB1c2FibGUgYnkgSlNaaXAuCiAqLwoKCmV4cG9ydHMucHJlcGFyZUNvbnRlbnQgPSBmdW5jdGlvbiAobmFtZSwgaW5wdXREYXRhLCBpc0JpbmFyeSwgaXNPcHRpbWl6ZWRCaW5hcnlTdHJpbmcsIGlzQmFzZTY0KSB7CiAgLy8gaWYgaW5wdXREYXRhIGlzIGFscmVhZHkgYSBwcm9taXNlLCB0aGlzIGZsYXR0ZW4gaXQuCiAgdmFyIHByb21pc2UgPSBleHRl
cm5hbC5Qcm9taXNlLnJlc29sdmUoaW5wdXREYXRhKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICB2YXIgaXNCbG9iID0gc3VwcG9ydC5ibG9iICYmIChkYXRhIGluc3RhbmNlb2YgQmxvYiB8fCBbJ1tvYmplY3QgRmlsZV0nLCAnW29iamVjdCBCbG9iXSddLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGEpKSAhPT0gLTEpOwoKICAgIGlmIChpc0Jsb2IgJiYgdHlwZW9mIEZpbGVSZWFkZXIgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgIHJldHVybiBuZXcgZXh0ZXJuYWwuUHJvbWlzZShmdW5jdGlv
biAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICAgIH07CgogICAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJlamVjdChlLnRhcmdldC5lcnJvcik7CiAgICAgICAgfTsKCiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGRhdGEpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAg
ICAgIHJldHVybiBkYXRhOwogICAgfQogIH0pOwogIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgIHZhciBkYXRhVHlwZSA9IGV4cG9ydHMuZ2V0VHlwZU9mKGRhdGEpOwoKICAgIGlmICghZGF0YVR5cGUpIHsKICAgICAgcmV0dXJuIGV4dGVybmFsLlByb21pc2UucmVqZWN0KG5ldyBFcnJvcigiQ2FuJ3QgcmVhZCB0aGUgZGF0YSBvZiAnIiArIG5hbWUgKyAiJy4gSXMgaXQgIiArICJpbiBhIHN1cHBvcnRlZCBKYXZhU2NyaXB0IHR5cGUgKFN0cmluZywgQmxvYiwgQXJyYXlCdWZmZXIsIGV0YykgPyIp
KTsKICAgIH0gLy8gc3BlY2lhbCBjYXNlIDogaXQncyB3YXkgZWFzaWVyIHRvIHdvcmsgd2l0aCBVaW50OEFycmF5IHRoYW4gd2l0aCBBcnJheUJ1ZmZlcgoKCiAgICBpZiAoZGF0YVR5cGUgPT09ICJhcnJheWJ1ZmZlciIpIHsKICAgICAgZGF0YSA9IGV4cG9ydHMudHJhbnNmb3JtVG8oInVpbnQ4YXJyYXkiLCBkYXRhKTsKICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPT09ICJzdHJpbmciKSB7CiAgICAgIGlmIChpc0Jhc2U2NCkgewogICAgICAgIGRhdGEgPSBiYXNlNjQuZGVjb2RlKGRhdGEpOwogICAgICB9IGVsc2UgaWYgKGlz
QmluYXJ5KSB7CiAgICAgICAgLy8gb3B0aW1pemVkQmluYXJ5U3RyaW5nID09PSB0cnVlIG1lYW5zIHRoYXQgdGhlIGZpbGUgaGFzIGFscmVhZHkgYmVlbiBmaWx0ZXJlZCB3aXRoIGEgMHhGRiBtYXNrCiAgICAgICAgaWYgKGlzT3B0aW1pemVkQmluYXJ5U3RyaW5nICE9PSB0cnVlKSB7CiAgICAgICAgICAvLyB0aGlzIGlzIGEgc3RyaW5nLCBub3QgaW4gYSBiYXNlNjQgZm9ybWF0LgogICAgICAgICAgLy8gQmUgc3VyZSB0aGF0IHRoaXMgaXMgYSBjb3JyZWN0ICJiaW5hcnkgc3RyaW5nIgogICAgICAgICAgZGF0YSA9IHN0cmlu
ZzJiaW5hcnkoZGF0YSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGRhdGE7CiAgfSk7Cn07Cgp9LHsiLi9iYXNlNjQiOjI4MSwiLi9leHRlcm5hbCI6Mjg2LCIuL25vZGVqc1V0aWxzIjoyOTQsIi4vc3VwcG9ydCI6MzEwLCJzZXQtaW1tZWRpYXRlLXNoaW0iOjM4N31dLDMxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciByZWFkZXJGb3IgPSByZXF1aXJlKCcuL3JlYWRlci9yZWFkZXJGb3InKTsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTsK
CnZhciBzaWcgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpOwoKdmFyIFppcEVudHJ5ID0gcmVxdWlyZSgnLi96aXBFbnRyeScpOwoKdmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTsKCnZhciBzdXBwb3J0ID0gcmVxdWlyZSgnLi9zdXBwb3J0Jyk7IC8vICBjbGFzcyBaaXBFbnRyaWVzIHt7ewoKLyoqCiAqIEFsbCB0aGUgZW50cmllcyBpbiB0aGUgemlwIGZpbGUuCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge09iamVjdH0gbG9hZE9wdGlvbnMgT3B0aW9ucyBmb3IgbG9hZGluZyB0aGUgc3RyZWFtLgogKi8KCgpmdW5jdGlv
biBaaXBFbnRyaWVzKGxvYWRPcHRpb25zKSB7CiAgdGhpcy5maWxlcyA9IFtdOwogIHRoaXMubG9hZE9wdGlvbnMgPSBsb2FkT3B0aW9uczsKfQoKWmlwRW50cmllcy5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogQ2hlY2sgdGhhdCB0aGUgcmVhZGVyIGlzIG9uIHRoZSBzcGVjaWZpZWQgc2lnbmF0dXJlLgogICAqIEBwYXJhbSB7c3RyaW5nfSBleHBlY3RlZFNpZ25hdHVyZSB0aGUgZXhwZWN0ZWQgc2lnbmF0dXJlLgogICAqIEB0aHJvd3Mge0Vycm9yfSBpZiBpdCBpcyBhbiBvdGhlciBzaWduYXR1cmUuCiAgICovCiAgY2hlY2tT
aWduYXR1cmU6IGZ1bmN0aW9uIGNoZWNrU2lnbmF0dXJlKGV4cGVjdGVkU2lnbmF0dXJlKSB7CiAgICBpZiAoIXRoaXMucmVhZGVyLnJlYWRBbmRDaGVja1NpZ25hdHVyZShleHBlY3RlZFNpZ25hdHVyZSkpIHsKICAgICAgdGhpcy5yZWFkZXIuaW5kZXggLT0gNDsKICAgICAgdmFyIHNpZ25hdHVyZSA9IHRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCk7CiAgICAgIHRocm93IG5ldyBFcnJvcigiQ29ycnVwdGVkIHppcCBvciBidWc6IHVuZXhwZWN0ZWQgc2lnbmF0dXJlICIgKyAiKCIgKyB1dGlscy5wcmV0dHkoc2lnbmF0dXJlKSAr
ICIsIGV4cGVjdGVkICIgKyB1dGlscy5wcmV0dHkoZXhwZWN0ZWRTaWduYXR1cmUpICsgIikiKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gc2lnbmF0dXJlIGlzIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgKiBAcGFyYW0ge251bWJlcn0gYXNrZWRJbmRleCB0aGUgaW5kZXggdG8gY2hlY2suCiAgICogQHBhcmFtIHtzdHJpbmd9IGV4cGVjdGVkU2lnbmF0dXJlIHRoZSBzaWduYXR1cmUgdG8gZXhwZWN0LgogICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHNpZ25hdHVyZSBpcyBoZXJl
LCBmYWxzZSBvdGhlcndpc2UuCiAgICovCiAgaXNTaWduYXR1cmU6IGZ1bmN0aW9uIGlzU2lnbmF0dXJlKGFza2VkSW5kZXgsIGV4cGVjdGVkU2lnbmF0dXJlKSB7CiAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5yZWFkZXIuaW5kZXg7CiAgICB0aGlzLnJlYWRlci5zZXRJbmRleChhc2tlZEluZGV4KTsKICAgIHZhciBzaWduYXR1cmUgPSB0aGlzLnJlYWRlci5yZWFkU3RyaW5nKDQpOwogICAgdmFyIHJlc3VsdCA9IHNpZ25hdHVyZSA9PT0gZXhwZWN0ZWRTaWduYXR1cmU7CiAgICB0aGlzLnJlYWRlci5zZXRJbmRleChjdXJy
ZW50SW5kZXgpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9LAoKICAvKioKICAgKiBSZWFkIHRoZSBlbmQgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5LgogICAqLwogIHJlYWRCbG9ja0VuZE9mQ2VudHJhbDogZnVuY3Rpb24gcmVhZEJsb2NrRW5kT2ZDZW50cmFsKCkgewogICAgdGhpcy5kaXNrTnVtYmVyID0gdGhpcy5yZWFkZXIucmVhZEludCgyKTsKICAgIHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpOwogICAgdGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2sgPSB0aGlz
LnJlYWRlci5yZWFkSW50KDIpOwogICAgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7CiAgICB0aGlzLmNlbnRyYWxEaXJTaXplID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTsKICAgIHRoaXMuY2VudHJhbERpck9mZnNldCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCk7CiAgICB0aGlzLnppcENvbW1lbnRMZW5ndGggPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpOyAvLyB3YXJuaW5nIDogdGhlIGVuY29kaW5nIGRlcGVuZHMgb2YgdGhlIHN5c3RlbSBsb2NhbGUKICAgIC8vIE9uIGEgbGludXgg
bWFjaGluZSB3aXRoIExBTkc9ZW5fVVMudXRmOCwgdGhpcyBmaWVsZCBpcyB1dGY4IGVuY29kZWQuCiAgICAvLyBPbiBhIHdpbmRvd3MgbWFjaGluZSwgdGhpcyBmaWVsZCBpcyBlbmNvZGVkIHdpdGggdGhlIGxvY2FsaXplZCB3aW5kb3dzIGNvZGUgcGFnZS4KCiAgICB2YXIgemlwQ29tbWVudCA9IHRoaXMucmVhZGVyLnJlYWREYXRhKHRoaXMuemlwQ29tbWVudExlbmd0aCk7CiAgICB2YXIgZGVjb2RlUGFyYW1UeXBlID0gc3VwcG9ydC51aW50OGFycmF5ID8gInVpbnQ4YXJyYXkiIDogImFycmF5IjsgLy8gVG8gZ2V0IGNvbnNp
c3RlbnQgYmVoYXZpb3Igd2l0aCB0aGUgZ2VuZXJhdGlvbiBwYXJ0LCB3ZSB3aWxsIGFzc3VtZSB0aGF0CiAgICAvLyB0aGlzIGlzIHV0ZjggZW5jb2RlZCB1bmxlc3Mgc3BlY2lmaWVkIG90aGVyd2lzZS4KCiAgICB2YXIgZGVjb2RlQ29udGVudCA9IHV0aWxzLnRyYW5zZm9ybVRvKGRlY29kZVBhcmFtVHlwZSwgemlwQ29tbWVudCk7CiAgICB0aGlzLnppcENvbW1lbnQgPSB0aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKGRlY29kZUNvbnRlbnQpOwogIH0sCgogIC8qKgogICAqIFJlYWQgdGhlIGVuZCBvZiB0aGUgWmlw
IDY0IGNlbnRyYWwgZGlyZWN0b3J5LgogICAqIE5vdCBtZXJnZWQgd2l0aCB0aGUgbWV0aG9kIHJlYWRFbmRPZkNlbnRyYWwgOgogICAqIFRoZSBlbmQgb2YgY2VudHJhbCBjYW4gY29leGlzdCB3aXRoIGl0cyBaaXA2NCBicm90aGVyLAogICAqIEkgZG9uJ3Qgd2FudCB0byByZWFkIHRoZSB3cm9uZyBudW1iZXIgb2YgYnl0ZXMgIQogICAqLwogIHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsOiBmdW5jdGlvbiByZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCgpIHsKICAgIHRoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplID0gdGhp
cy5yZWFkZXIucmVhZEludCg4KTsKICAgIHRoaXMucmVhZGVyLnNraXAoNCk7IC8vIHRoaXMudmVyc2lvbk1hZGVCeSA9IHRoaXMucmVhZGVyLnJlYWRTdHJpbmcoMik7CiAgICAvLyB0aGlzLnZlcnNpb25OZWVkZWQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpOwoKICAgIHRoaXMuZGlza051bWJlciA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCk7CiAgICB0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0ID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTsKICAgIHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrID0gdGhpcy5y
ZWFkZXIucmVhZEludCg4KTsKICAgIHRoaXMuY2VudHJhbERpclJlY29yZHMgPSB0aGlzLnJlYWRlci5yZWFkSW50KDgpOwogICAgdGhpcy5jZW50cmFsRGlyU2l6ZSA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCk7CiAgICB0aGlzLmNlbnRyYWxEaXJPZmZzZXQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDgpOwogICAgdGhpcy56aXA2NEV4dGVuc2libGVEYXRhID0ge307CiAgICB2YXIgZXh0cmFEYXRhU2l6ZSA9IHRoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplIC0gNDQsCiAgICAgICAgaW5kZXggPSAwLAogICAgICAgIGV4dHJhRmll
bGRJZCwKICAgICAgICBleHRyYUZpZWxkTGVuZ3RoLAogICAgICAgIGV4dHJhRmllbGRWYWx1ZTsKCiAgICB3aGlsZSAoaW5kZXggPCBleHRyYURhdGFTaXplKSB7CiAgICAgIGV4dHJhRmllbGRJZCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7CiAgICAgIGV4dHJhRmllbGRMZW5ndGggPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpOwogICAgICBleHRyYUZpZWxkVmFsdWUgPSB0aGlzLnJlYWRlci5yZWFkRGF0YShleHRyYUZpZWxkTGVuZ3RoKTsKICAgICAgdGhpcy56aXA2NEV4dGVuc2libGVEYXRhW2V4dHJhRmllbGRJZF0gPSB7
CiAgICAgICAgaWQ6IGV4dHJhRmllbGRJZCwKICAgICAgICBsZW5ndGg6IGV4dHJhRmllbGRMZW5ndGgsCiAgICAgICAgdmFsdWU6IGV4dHJhRmllbGRWYWx1ZQogICAgICB9OwogICAgfQogIH0sCgogIC8qKgogICAqIFJlYWQgdGhlIGVuZCBvZiB0aGUgWmlwIDY0IGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3IuCiAgICovCiAgcmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yOiBmdW5jdGlvbiByZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IoKSB7CiAgICB0aGlzLmRpc2tXaXRoWmlwNjRDZW50cmFsRGly
U3RhcnQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpOwogICAgdGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyID0gdGhpcy5yZWFkZXIucmVhZEludCg4KTsKICAgIHRoaXMuZGlza3NDb3VudCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCk7CgogICAgaWYgKHRoaXMuZGlza3NDb3VudCA+IDEpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJNdWx0aS12b2x1bWVzIHppcCBhcmUgbm90IHN1cHBvcnRlZCIpOwogICAgfQogIH0sCgogIC8qKgogICAqIFJlYWQgdGhlIGxvY2FsIGZpbGVzLCBiYXNlZCBvbiB0aGUg
b2Zmc2V0IHJlYWQgaW4gdGhlIGNlbnRyYWwgcGFydC4KICAgKi8KICByZWFkTG9jYWxGaWxlczogZnVuY3Rpb24gcmVhZExvY2FsRmlsZXMoKSB7CiAgICB2YXIgaSwgZmlsZTsKCiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKykgewogICAgICBmaWxlID0gdGhpcy5maWxlc1tpXTsKICAgICAgdGhpcy5yZWFkZXIuc2V0SW5kZXgoZmlsZS5sb2NhbEhlYWRlck9mZnNldCk7CiAgICAgIHRoaXMuY2hlY2tTaWduYXR1cmUoc2lnLkxPQ0FMX0ZJTEVfSEVBREVSKTsKICAgICAgZmlsZS5yZWFkTG9jYWxQ
YXJ0KHRoaXMucmVhZGVyKTsKICAgICAgZmlsZS5oYW5kbGVVVEY4KCk7CiAgICAgIGZpbGUucHJvY2Vzc0F0dHJpYnV0ZXMoKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBSZWFkIHRoZSBjZW50cmFsIGRpcmVjdG9yeS4KICAgKi8KICByZWFkQ2VudHJhbERpcjogZnVuY3Rpb24gcmVhZENlbnRyYWxEaXIoKSB7CiAgICB2YXIgZmlsZTsKICAgIHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMuY2VudHJhbERpck9mZnNldCk7CgogICAgd2hpbGUgKHRoaXMucmVhZGVyLnJlYWRBbmRDaGVja1NpZ25hdHVyZShzaWcuQ0VOVFJBTF9G
SUxFX0hFQURFUikpIHsKICAgICAgZmlsZSA9IG5ldyBaaXBFbnRyeSh7CiAgICAgICAgemlwNjQ6IHRoaXMuemlwNjQKICAgICAgfSwgdGhpcy5sb2FkT3B0aW9ucyk7CiAgICAgIGZpbGUucmVhZENlbnRyYWxQYXJ0KHRoaXMucmVhZGVyKTsKICAgICAgdGhpcy5maWxlcy5wdXNoKGZpbGUpOwogICAgfQoKICAgIGlmICh0aGlzLmNlbnRyYWxEaXJSZWNvcmRzICE9PSB0aGlzLmZpbGVzLmxlbmd0aCkgewogICAgICBpZiAodGhpcy5jZW50cmFsRGlyUmVjb3JkcyAhPT0gMCAmJiB0aGlzLmZpbGVzLmxlbmd0aCA9PT0gMCkgewog
ICAgICAgIC8vIFdlIGV4cGVjdGVkIHNvbWUgcmVjb3JkcyBidXQgY291bGRuJ3QgZmluZCBBTlkuCiAgICAgICAgLy8gVGhpcyBpcyByZWFsbHkgc3VzcGljaW91cywgYXMgaWYgc29tZXRoaW5nIHdlbnQgd3JvbmcuCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDb3JydXB0ZWQgemlwIG9yIGJ1ZzogZXhwZWN0ZWQgIiArIHRoaXMuY2VudHJhbERpclJlY29yZHMgKyAiIHJlY29yZHMgaW4gY2VudHJhbCBkaXIsIGdvdCAiICsgdGhpcy5maWxlcy5sZW5ndGgpOwogICAgICB9IGVsc2Ugey8vIFdlIGZvdW5kIHNvbWUgcmVjb3Jk
cyBidXQgbm90IGFsbC4KICAgICAgICAvLyBTb21ldGhpbmcgaXMgd3JvbmcgYnV0IHdlIGdvdCBzb21ldGhpbmcgZm9yIHRoZSB1c2VyOiBubyBlcnJvciBoZXJlLgogICAgICAgIC8vIGNvbnNvbGUud2FybigiZXhwZWN0ZWQiLCB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzLCAicmVjb3JkcyBpbiBjZW50cmFsIGRpciwgZ290IiwgdGhpcy5maWxlcy5sZW5ndGgpOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmVhZCB0aGUgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5LgogICAqLwogIHJlYWRFbmRPZkNlbnRyYWw6IGZ1
bmN0aW9uIHJlYWRFbmRPZkNlbnRyYWwoKSB7CiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5yZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUoc2lnLkNFTlRSQUxfRElSRUNUT1JZX0VORCk7CgogICAgaWYgKG9mZnNldCA8IDApIHsKICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnRlbnQgaXMgYSB0cnVuY2F0ZWQgemlwIG9yIGNvbXBsZXRlIGdhcmJhZ2UuCiAgICAgIC8vIEEgIkxPQ0FMX0ZJTEVfSEVBREVSIiBpcyBub3QgcmVxdWlyZWQgYXQgdGhlIGJlZ2lubmluZyAoYXV0bwogICAgICAvLyBleHRyYWN0aWJsZSB6aXAgZm9yIGV4
YW1wbGUpIGJ1dCBpdCBjYW4gZ2l2ZSBhIGdvb2QgaGludC4KICAgICAgLy8gSWYgYW4gYWpheCByZXF1ZXN0IHdhcyB1c2VkIHdpdGhvdXQgcmVzcG9uc2VUeXBlLCB3ZSB3aWxsIGFsc28KICAgICAgLy8gZ2V0IHVucmVhZGFibGUgZGF0YS4KICAgICAgdmFyIGlzR2FyYmFnZSA9ICF0aGlzLmlzU2lnbmF0dXJlKDAsIHNpZy5MT0NBTF9GSUxFX0hFQURFUik7CgogICAgICBpZiAoaXNHYXJiYWdlKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSA6IGlzIHRoaXMg
YSB6aXAgZmlsZSA/ICIgKyAiSWYgaXQgaXMsIHNlZSBodHRwczovL3N0dWsuZ2l0aHViLmlvL2pzemlwL2RvY3VtZW50YXRpb24vaG93dG8vcmVhZF96aXAuaHRtbCIpOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkiKTsKICAgICAgfQogICAgfQoKICAgIHRoaXMucmVhZGVyLnNldEluZGV4KG9mZnNldCk7CiAgICB2YXIgZW5kT2ZDZW50cmFsRGlyT2Zmc2V0ID0gb2Zmc2V0OwogICAgdGhpcy5jaGVja1NpZ25h
dHVyZShzaWcuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKTsKICAgIHRoaXMucmVhZEJsb2NrRW5kT2ZDZW50cmFsKCk7CiAgICAvKiBleHRyYWN0IGZyb20gdGhlIHppcCBzcGVjIDoKICAgICAgICA0KSAgSWYgb25lIG9mIHRoZSBmaWVsZHMgaW4gdGhlIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeQogICAgICAgICAgICByZWNvcmQgaXMgdG9vIHNtYWxsIHRvIGhvbGQgcmVxdWlyZWQgZGF0YSwgdGhlIGZpZWxkCiAgICAgICAgICAgIHNob3VsZCBiZSBzZXQgdG8gLTEgKDB4RkZGRiBvciAweEZGRkZGRkZGKSBhbmQgdGhlCiAgICAg
ICAgICAgIFpJUDY0IGZvcm1hdCByZWNvcmQgc2hvdWxkIGJlIGNyZWF0ZWQuCiAgICAgICAgNSkgIFRoZSBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgcmVjb3JkIGFuZCB0aGUKICAgICAgICAgICAgWmlwNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3IgcmVjb3JkIG11c3QKICAgICAgICAgICAgcmVzaWRlIG9uIHRoZSBzYW1lIGRpc2sgd2hlbiBzcGxpdHRpbmcgb3Igc3Bhbm5pbmcKICAgICAgICAgICAgYW4gYXJjaGl2ZS4KICAgICAqLwoKICAgIGlmICh0aGlzLmRpc2tOdW1iZXIgPT09IHV0aWxzLk1BWF9W
QUxVRV8xNkJJVFMgfHwgdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydCA9PT0gdXRpbHMuTUFYX1ZBTFVFXzE2QklUUyB8fCB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayA9PT0gdXRpbHMuTUFYX1ZBTFVFXzE2QklUUyB8fCB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzID09PSB1dGlscy5NQVhfVkFMVUVfMTZCSVRTIHx8IHRoaXMuY2VudHJhbERpclNpemUgPT09IHV0aWxzLk1BWF9WQUxVRV8zMkJJVFMgfHwgdGhpcy5jZW50cmFsRGlyT2Zmc2V0ID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7CiAgICAgIHRo
aXMuemlwNjQgPSB0cnVlOwogICAgICAvKgogICAgICBXYXJuaW5nIDogdGhlIHppcDY0IGV4dGVuc2lvbiBpcyBzdXBwb3J0ZWQsIGJ1dCBPTkxZIGlmIHRoZSA2NGJpdHMgaW50ZWdlciByZWFkIGZyb20KICAgICAgdGhlIHppcCBmaWxlIGNhbiBmaXQgaW50byBhIDMyYml0cyBpbnRlZ2VyLiBUaGlzIGNhbm5vdCBiZSBzb2x2ZWQgOiBKYXZhU2NyaXB0IHJlcHJlc2VudHMKICAgICAgYWxsIG51bWJlcnMgYXMgNjQtYml0IGRvdWJsZSBwcmVjaXNpb24gSUVFRSA3NTQgZmxvYXRpbmcgcG9pbnQgbnVtYmVycy4KICAgICAgU28s
IHdlIGhhdmUgNTNiaXRzIGZvciBpbnRlZ2VycyBhbmQgYml0d2lzZSBvcGVyYXRpb25zIHRyZWF0IGV2ZXJ5dGhpbmcgYXMgMzJiaXRzLgogICAgICBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQml0d2lzZV9PcGVyYXRvcnMKICAgICAgYW5kIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9wdWJsaWNhdGlvbnMvZmlsZXMvRUNNQS1TVC9FQ01BLTI2Mi5wZGYgc2VjdGlvbiA4LjUKICAgICAgKi8KICAgICAgLy8gc2hvdWxk
IGxvb2sgZm9yIGEgemlwNjQgRU9DRCBsb2NhdG9yCgogICAgICBvZmZzZXQgPSB0aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzaWcuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUik7CgogICAgICBpZiAob2Zmc2V0IDwgMCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3IiKTsKICAgICAgfQoKICAgICAgdGhpcy5yZWFkZXIuc2V0SW5kZXgob2Zmc2V0KTsKICAgICAgdGhpcy5jaGVj
a1NpZ25hdHVyZShzaWcuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUik7CiAgICAgIHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yKCk7IC8vIG5vdyB0aGUgemlwNjQgRU9DRCByZWNvcmQKCiAgICAgIGlmICghdGhpcy5pc1NpZ25hdHVyZSh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIsIHNpZy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpKSB7CiAgICAgICAgLy8gY29uc29sZS53YXJuKCJaSVA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3Rvcnkgbm90IHdoZXJlIGV4
cGVjdGVkLiIpOwogICAgICAgIHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciA9IHRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHNpZy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpOwoKICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyIDwgMCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIHRoZSBaSVA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkiKTsKICAgICAgICB9CiAgICAgIH0KCiAg
ICAgIHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcik7CiAgICAgIHRoaXMuY2hlY2tTaWduYXR1cmUoc2lnLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCk7CiAgICAgIHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWwoKTsKICAgIH0KCiAgICB2YXIgZXhwZWN0ZWRFbmRPZkNlbnRyYWxEaXJPZmZzZXQgPSB0aGlzLmNlbnRyYWxEaXJPZmZzZXQgKyB0aGlzLmNlbnRyYWxEaXJTaXplOwoKICAgIGlmICh0aGlzLnppcDY0KSB7CiAgICAgIGV4cGVjdGVkRW5k
T2ZDZW50cmFsRGlyT2Zmc2V0ICs9IDIwOyAvLyBlbmQgb2YgY2VudHJhbCBkaXIgNjQgbG9jYXRvcgoKICAgICAgZXhwZWN0ZWRFbmRPZkNlbnRyYWxEaXJPZmZzZXQgKz0gMTIKICAgICAgLyogc2hvdWxkIG5vdCBpbmNsdWRlIHRoZSBsZWFkaW5nIDEyIGJ5dGVzICovCiAgICAgICsgdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemU7CiAgICB9CgogICAgdmFyIGV4dHJhQnl0ZXMgPSBlbmRPZkNlbnRyYWxEaXJPZmZzZXQgLSBleHBlY3RlZEVuZE9mQ2VudHJhbERpck9mZnNldDsKCiAgICBpZiAoZXh0cmFCeXRlcyA+IDApIHsK
ICAgICAgLy8gY29uc29sZS53YXJuKGV4dHJhQnl0ZXMsICJleHRyYSBieXRlcyBhdCBiZWdpbm5pbmcgb3Igd2l0aGluIHppcGZpbGUiKTsKICAgICAgaWYgKHRoaXMuaXNTaWduYXR1cmUoZW5kT2ZDZW50cmFsRGlyT2Zmc2V0LCBzaWcuQ0VOVFJBTF9GSUxFX0hFQURFUikpIHsvLyBUaGUgb2Zmc2V0cyBzZWVtIHdyb25nLCBidXQgd2UgaGF2ZSBzb21ldGhpbmcgYXQgdGhlIHNwZWNpZmllZCBvZmZzZXQuCiAgICAgICAgLy8gU2/igKYgd2Uga2VlcCBpdC4KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyB0aGUgb2Zmc2V0IGlz
IHdyb25nLCB1cGRhdGUgdGhlICJ6ZXJvIiBvZiB0aGUgcmVhZGVyCiAgICAgICAgLy8gdGhpcyBoYXBwZW5zIGlmIGRhdGEgaGFzIGJlZW4gcHJlcGVuZGVkIChjcnggZmlsZXMgZm9yIGV4YW1wbGUpCiAgICAgICAgdGhpcy5yZWFkZXIuemVybyA9IGV4dHJhQnl0ZXM7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA8IDApIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJDb3JydXB0ZWQgemlwOiBtaXNzaW5nICIgKyBNYXRoLmFicyhleHRyYUJ5dGVzKSArICIgYnl0ZXMuIik7CiAgICB9CiAgfSwKICBwcmVwYXJl
UmVhZGVyOiBmdW5jdGlvbiBwcmVwYXJlUmVhZGVyKGRhdGEpIHsKICAgIHRoaXMucmVhZGVyID0gcmVhZGVyRm9yKGRhdGEpOwogIH0sCgogIC8qKgogICAqIFJlYWQgYSB6aXAgZmlsZSBhbmQgY3JlYXRlIFppcEVudHJpZXMuCiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGRhdGEgdGhlIGJpbmFyeSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgemlwIGZpbGUuCiAgICovCiAgbG9hZDogZnVuY3Rpb24gbG9hZChkYXRhKSB7CiAgICB0aGlzLnByZXBhcmVSZWFkZXIoZGF0YSk7CiAgICB0
aGlzLnJlYWRFbmRPZkNlbnRyYWwoKTsKICAgIHRoaXMucmVhZENlbnRyYWxEaXIoKTsKICAgIHRoaXMucmVhZExvY2FsRmlsZXMoKTsKICB9Cn07IC8vIH19fSBlbmQgb2YgWmlwRW50cmllcwoKbW9kdWxlLmV4cG9ydHMgPSBaaXBFbnRyaWVzOwoKfSx7Ii4vcmVhZGVyL3JlYWRlckZvciI6MzAyLCIuL3NpZ25hdHVyZSI6MzAzLCIuL3N1cHBvcnQiOjMxMCwiLi91dGY4IjozMTEsIi4vdXRpbHMiOjMxMiwiLi96aXBFbnRyeSI6MzE0fV0sMzE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3Qn
OwoKdmFyIHJlYWRlckZvciA9IHJlcXVpcmUoJy4vcmVhZGVyL3JlYWRlckZvcicpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpOwoKdmFyIENvbXByZXNzZWRPYmplY3QgPSByZXF1aXJlKCcuL2NvbXByZXNzZWRPYmplY3QnKTsKCnZhciBjcmMzMmZuID0gcmVxdWlyZSgnLi9jcmMzMicpOwoKdmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTsKCnZhciBjb21wcmVzc2lvbnMgPSByZXF1aXJlKCcuL2NvbXByZXNzaW9ucycpOwoKdmFyIHN1cHBvcnQgPSByZXF1aXJlKCcuL3N1cHBvcnQnKTsKCnZhciBNQURFX0JZ
X0RPUyA9IDB4MDA7CnZhciBNQURFX0JZX1VOSVggPSAweDAzOwovKioKICogRmluZCBhIGNvbXByZXNzaW9uIHJlZ2lzdGVyZWQgaW4gSlNaaXAuCiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wcmVzc2lvbk1ldGhvZCB0aGUgbWV0aG9kIG1hZ2ljIHRvIGZpbmQuCiAqIEByZXR1cm4ge09iamVjdHxudWxsfSB0aGUgSlNaaXAgY29tcHJlc3Npb24gb2JqZWN0LCBudWxsIGlmIG5vbmUgZm91bmQuCiAqLwoKdmFyIGZpbmRDb21wcmVzc2lvbiA9IGZ1bmN0aW9uIGZpbmRDb21wcmVzc2lvbihjb21wcmVzc2lvbk1ldGhvZCkgewogIGZv
ciAodmFyIG1ldGhvZCBpbiBjb21wcmVzc2lvbnMpIHsKICAgIGlmICghY29tcHJlc3Npb25zLmhhc093blByb3BlcnR5KG1ldGhvZCkpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgaWYgKGNvbXByZXNzaW9uc1ttZXRob2RdLm1hZ2ljID09PSBjb21wcmVzc2lvbk1ldGhvZCkgewogICAgICByZXR1cm4gY29tcHJlc3Npb25zW21ldGhvZF07CiAgICB9CiAgfQoKICByZXR1cm4gbnVsbDsKfTsgLy8gY2xhc3MgWmlwRW50cnkge3t7CgovKioKICogQW4gZW50cnkgaW4gdGhlIHppcCBmaWxlLgogKiBAY29uc3RydWN0b3IK
ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvZiB0aGUgY3VycmVudCBmaWxlLgogKiBAcGFyYW0ge09iamVjdH0gbG9hZE9wdGlvbnMgT3B0aW9ucyBmb3IgbG9hZGluZyB0aGUgc3RyZWFtLgogKi8KCgpmdW5jdGlvbiBaaXBFbnRyeShvcHRpb25zLCBsb2FkT3B0aW9ucykgewogIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CiAgdGhpcy5sb2FkT3B0aW9ucyA9IGxvYWRPcHRpb25zOwp9CgpaaXBFbnRyeS5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogc2F5IGlmIHRoZSBmaWxlIGlzIGVuY3J5cHRlZC4KICAgKiBA
cmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBmaWxlIGlzIGVuY3J5cHRlZCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAqLwogIGlzRW5jcnlwdGVkOiBmdW5jdGlvbiBpc0VuY3J5cHRlZCgpIHsKICAgIC8vIGJpdCAxIGlzIHNldAogICAgcmV0dXJuICh0aGlzLmJpdEZsYWcgJiAweDAwMDEpID09PSAweDAwMDE7CiAgfSwKCiAgLyoqCiAgICogc2F5IGlmIHRoZSBmaWxlIGhhcyB1dGYtOCBmaWxlbmFtZS9jb21tZW50LgogICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGZpbGVuYW1lL2NvbW1lbnQgaXMgaW4gdXRm
LTgsIGZhbHNlIG90aGVyd2lzZS4KICAgKi8KICB1c2VVVEY4OiBmdW5jdGlvbiB1c2VVVEY4KCkgewogICAgLy8gYml0IDExIGlzIHNldAogICAgcmV0dXJuICh0aGlzLmJpdEZsYWcgJiAweDA4MDApID09PSAweDA4MDA7CiAgfSwKCiAgLyoqCiAgICogUmVhZCB0aGUgbG9jYWwgcGFydCBvZiBhIHppcCBmaWxlIGFuZCBhZGQgdGhlIGluZm8gaW4gdGhpcyBvYmplY3QuCiAgICogQHBhcmFtIHtEYXRhUmVhZGVyfSByZWFkZXIgdGhlIHJlYWRlciB0byB1c2UuCiAgICovCiAgcmVhZExvY2FsUGFydDogZnVuY3Rpb24gcmVhZExv
Y2FsUGFydChyZWFkZXIpIHsKICAgIHZhciBjb21wcmVzc2lvbiwgbG9jYWxFeHRyYUZpZWxkc0xlbmd0aDsgLy8gd2UgYWxyZWFkeSBrbm93IGV2ZXJ5dGhpbmcgZnJvbSB0aGUgY2VudHJhbCBkaXIgIQogICAgLy8gSWYgdGhlIGNlbnRyYWwgZGlyIGRhdGEgYXJlIGZhbHNlLCB3ZSBhcmUgZG9vbWVkLgogICAgLy8gT24gdGhlIGJyaWdodCBzaWRlLCB0aGUgbG9jYWwgcGFydCBpcyBzY2FyeSAgOiB6aXA2NCwgZGF0YSBkZXNjcmlwdG9ycywgYm90aCwgZXRjLgogICAgLy8gVGhlIGxlc3MgZGF0YSB3ZSBnZXQgaGVyZSwgdGhl
IG1vcmUgcmVsaWFibGUgdGhpcyBzaG91bGQgYmUuCiAgICAvLyBMZXQncyBza2lwIHRoZSB3aG9sZSBoZWFkZXIgYW5kIGRhc2ggdG8gdGhlIGRhdGEgIQoKICAgIHJlYWRlci5za2lwKDIyKTsgLy8gaW4gc29tZSB6aXAgY3JlYXRlZCBvbiB3aW5kb3dzLCB0aGUgZmlsZW5hbWUgc3RvcmVkIGluIHRoZSBjZW50cmFsIGRpciBjb250YWlucyBcIGluc3RlYWQgb2YgLy4KICAgIC8vIFN0cmFuZ2VseSwgdGhlIGZpbGVuYW1lIGhlcmUgaXMgT0suCiAgICAvLyBJIHdvdWxkIGxvdmUgdG8gdHJlYXQgdGhlc2UgemlwIGZpbGVzIGFz
IGNvcnJ1cHRlZCAoc2VlIGh0dHA6Ly93d3cuaW5mby16aXAub3JnL0ZBUS5odG1sI2JhY2tzbGFzaGVzCiAgICAvLyBvciBBUFBOT1RFIzQuNC4xNy4xLCAiQWxsIHNsYXNoZXMgTVVTVCBiZSBmb3J3YXJkIHNsYXNoZXMgJy8nIikgYnV0IHRoZXJlIGFyZSBhIGxvdCBvZiBiYWQgemlwIGdlbmVyYXRvcnMuLi4KICAgIC8vIFNlYXJjaCAidW56aXAgbWlzbWF0Y2hpbmcgImxvY2FsIiBmaWxlbmFtZSBjb250aW51aW5nIHdpdGggImNlbnRyYWwiIGZpbGVuYW1lIHZlcnNpb24iIG9uCiAgICAvLyB0aGUgaW50ZXJuZXQuCiAgICAv
LwogICAgLy8gSSB0aGluayBJIHNlZSB0aGUgbG9naWMgaGVyZSA6IHRoZSBjZW50cmFsIGRpcmVjdG9yeSBpcyB1c2VkIHRvIGRpc3BsYXkKICAgIC8vIGNvbnRlbnQgYW5kIHRoZSBsb2NhbCBkaXJlY3RvcnkgaXMgdXNlZCB0byBleHRyYWN0IHRoZSBmaWxlcy4gTWl4aW5nIC8gYW5kIFwKICAgIC8vIG1heSBiZSB1c2VkIHRvIGRpc3BsYXkgXCB0byB3aW5kb3dzIHVzZXJzIGFuZCB1c2UgLyB3aGVuIGV4dHJhY3RpbmcgdGhlIGZpbGVzLgogICAgLy8gVW5mb3J0dW5hdGVseSwgdGhpcyBsZWFkIGFsc28gdG8gc29tZSBpc3N1
ZXMgOiBodHRwOi8vc2VjbGlzdHMub3JnL2Z1bGxkaXNjbG9zdXJlLzIwMDkvU2VwLzM5NAoKICAgIHRoaXMuZmlsZU5hbWVMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTsKICAgIGxvY2FsRXh0cmFGaWVsZHNMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTsgLy8gY2FuJ3QgYmUgc3VyZSB0aGlzIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIGNlbnRyYWwgZGlyCiAgICAvLyB0aGUgZmlsZU5hbWUgaXMgc3RvcmVkIGFzIGJpbmFyeSBkYXRhLCB0aGUgaGFuZGxlVVRGOCBtZXRob2Qgd2lsbCB0YWtlIGNhcmUgb2YgdGhlIGVuY29k
aW5nLgoKICAgIHRoaXMuZmlsZU5hbWUgPSByZWFkZXIucmVhZERhdGEodGhpcy5maWxlTmFtZUxlbmd0aCk7CiAgICByZWFkZXIuc2tpcChsb2NhbEV4dHJhRmllbGRzTGVuZ3RoKTsKCiAgICBpZiAodGhpcy5jb21wcmVzc2VkU2l6ZSA9PT0gLTEgfHwgdGhpcy51bmNvbXByZXNzZWRTaXplID09PSAtMSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIkJ1ZyBvciBjb3JydXB0ZWQgemlwIDogZGlkbid0IGdldCBlbm91Z2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgY2VudHJhbCBkaXJlY3RvcnkgIiArICIoY29tcHJlc3NlZFNpemUg
PT09IC0xIHx8IHVuY29tcHJlc3NlZFNpemUgPT09IC0xKSIpOwogICAgfQoKICAgIGNvbXByZXNzaW9uID0gZmluZENvbXByZXNzaW9uKHRoaXMuY29tcHJlc3Npb25NZXRob2QpOwoKICAgIGlmIChjb21wcmVzc2lvbiA9PT0gbnVsbCkgewogICAgICAvLyBubyBjb21wcmVzc2lvbiBmb3VuZAogICAgICB0aHJvdyBuZXcgRXJyb3IoIkNvcnJ1cHRlZCB6aXAgOiBjb21wcmVzc2lvbiAiICsgdXRpbHMucHJldHR5KHRoaXMuY29tcHJlc3Npb25NZXRob2QpICsgIiB1bmtub3duIChpbm5lciBmaWxlIDogIiArIHV0aWxzLnRyYW5z
Zm9ybVRvKCJzdHJpbmciLCB0aGlzLmZpbGVOYW1lKSArICIpIik7CiAgICB9CgogICAgdGhpcy5kZWNvbXByZXNzZWQgPSBuZXcgQ29tcHJlc3NlZE9iamVjdCh0aGlzLmNvbXByZXNzZWRTaXplLCB0aGlzLnVuY29tcHJlc3NlZFNpemUsIHRoaXMuY3JjMzIsIGNvbXByZXNzaW9uLCByZWFkZXIucmVhZERhdGEodGhpcy5jb21wcmVzc2VkU2l6ZSkpOwogIH0sCgogIC8qKgogICAqIFJlYWQgdGhlIGNlbnRyYWwgcGFydCBvZiBhIHppcCBmaWxlIGFuZCBhZGQgdGhlIGluZm8gaW4gdGhpcyBvYmplY3QuCiAgICogQHBhcmFtIHtE
YXRhUmVhZGVyfSByZWFkZXIgdGhlIHJlYWRlciB0byB1c2UuCiAgICovCiAgcmVhZENlbnRyYWxQYXJ0OiBmdW5jdGlvbiByZWFkQ2VudHJhbFBhcnQocmVhZGVyKSB7CiAgICB0aGlzLnZlcnNpb25NYWRlQnkgPSByZWFkZXIucmVhZEludCgyKTsKICAgIHJlYWRlci5za2lwKDIpOyAvLyB0aGlzLnZlcnNpb25OZWVkZWQgPSByZWFkZXIucmVhZEludCgyKTsKCiAgICB0aGlzLmJpdEZsYWcgPSByZWFkZXIucmVhZEludCgyKTsKICAgIHRoaXMuY29tcHJlc3Npb25NZXRob2QgPSByZWFkZXIucmVhZFN0cmluZygyKTsKICAgIHRo
aXMuZGF0ZSA9IHJlYWRlci5yZWFkRGF0ZSgpOwogICAgdGhpcy5jcmMzMiA9IHJlYWRlci5yZWFkSW50KDQpOwogICAgdGhpcy5jb21wcmVzc2VkU2l6ZSA9IHJlYWRlci5yZWFkSW50KDQpOwogICAgdGhpcy51bmNvbXByZXNzZWRTaXplID0gcmVhZGVyLnJlYWRJbnQoNCk7CiAgICB2YXIgZmlsZU5hbWVMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTsKICAgIHRoaXMuZXh0cmFGaWVsZHNMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTsKICAgIHRoaXMuZmlsZUNvbW1lbnRMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTsKICAg
IHRoaXMuZGlza051bWJlclN0YXJ0ID0gcmVhZGVyLnJlYWRJbnQoMik7CiAgICB0aGlzLmludGVybmFsRmlsZUF0dHJpYnV0ZXMgPSByZWFkZXIucmVhZEludCgyKTsKICAgIHRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyA9IHJlYWRlci5yZWFkSW50KDQpOwogICAgdGhpcy5sb2NhbEhlYWRlck9mZnNldCA9IHJlYWRlci5yZWFkSW50KDQpOwoKICAgIGlmICh0aGlzLmlzRW5jcnlwdGVkKCkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJFbmNyeXB0ZWQgemlwIGFyZSBub3Qgc3VwcG9ydGVkIik7CiAgICB9IC8vIHdpbGwg
YmUgcmVhZCBpbiB0aGUgbG9jYWwgcGFydCwgc2VlIHRoZSBjb21tZW50cyB0aGVyZQoKCiAgICByZWFkZXIuc2tpcChmaWxlTmFtZUxlbmd0aCk7CiAgICB0aGlzLnJlYWRFeHRyYUZpZWxkcyhyZWFkZXIpOwogICAgdGhpcy5wYXJzZVpJUDY0RXh0cmFGaWVsZChyZWFkZXIpOwogICAgdGhpcy5maWxlQ29tbWVudCA9IHJlYWRlci5yZWFkRGF0YSh0aGlzLmZpbGVDb21tZW50TGVuZ3RoKTsKICB9LAoKICAvKioKICAgKiBQYXJzZSB0aGUgZXh0ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzIGFuZCBnZXQgdGhlIHVuaXgvZG9zIHBlcm1p
c3Npb25zLgogICAqLwogIHByb2Nlc3NBdHRyaWJ1dGVzOiBmdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlcygpIHsKICAgIHRoaXMudW5peFBlcm1pc3Npb25zID0gbnVsbDsKICAgIHRoaXMuZG9zUGVybWlzc2lvbnMgPSBudWxsOwogICAgdmFyIG1hZGVCeSA9IHRoaXMudmVyc2lvbk1hZGVCeSA+PiA4OyAvLyBDaGVjayBpZiB3ZSBoYXZlIHRoZSBET1MgZGlyZWN0b3J5IGZsYWcgc2V0LgogICAgLy8gV2UgbG9vayBmb3IgaXQgaW4gdGhlIERPUyBhbmQgVU5JWCBwZXJtaXNzaW9ucwogICAgLy8gYnV0IHNvbWUgdW5rbm93biBw
bGF0Zm9ybSBjb3VsZCBzZXQgaXQgYXMgYSBjb21wYXRpYmlsaXR5IGZsYWcuCgogICAgdGhpcy5kaXIgPSB0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMgJiAweDAwMTAgPyB0cnVlIDogZmFsc2U7CgogICAgaWYgKG1hZGVCeSA9PT0gTUFERV9CWV9ET1MpIHsKICAgICAgLy8gZmlyc3QgNiBiaXRzICgwIHRvIDUpCiAgICAgIHRoaXMuZG9zUGVybWlzc2lvbnMgPSB0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMgJiAweDNGOwogICAgfQoKICAgIGlmIChtYWRlQnkgPT09IE1BREVfQllfVU5JWCkgewogICAgICB0aGlzLnVu
aXhQZXJtaXNzaW9ucyA9IHRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyA+PiAxNiAmIDB4RkZGRjsgLy8gdGhlIG9jdGFsIHBlcm1pc3Npb25zIGFyZSBpbiAodGhpcy51bml4UGVybWlzc2lvbnMgJiAweDAxRkYpLnRvU3RyaW5nKDgpOwogICAgfSAvLyBmYWlsIHNhZmUgOiBpZiB0aGUgbmFtZSBlbmRzIHdpdGggYSAvIGl0IHByb2JhYmx5IG1lYW5zIGEgZm9sZGVyCgoKICAgIGlmICghdGhpcy5kaXIgJiYgdGhpcy5maWxlTmFtZVN0ci5zbGljZSgtMSkgPT09ICcvJykgewogICAgICB0aGlzLmRpciA9IHRydWU7CiAgICB9
CiAgfSwKCiAgLyoqCiAgICogUGFyc2UgdGhlIFpJUDY0IGV4dHJhIGZpZWxkIGFuZCBtZXJnZSB0aGUgaW5mbyBpbiB0aGUgY3VycmVudCBaaXBFbnRyeS4KICAgKiBAcGFyYW0ge0RhdGFSZWFkZXJ9IHJlYWRlciB0aGUgcmVhZGVyIHRvIHVzZS4KICAgKi8KICBwYXJzZVpJUDY0RXh0cmFGaWVsZDogZnVuY3Rpb24gcGFyc2VaSVA2NEV4dHJhRmllbGQocmVhZGVyKSB7CiAgICBpZiAoIXRoaXMuZXh0cmFGaWVsZHNbMHgwMDAxXSkgewogICAgICByZXR1cm47CiAgICB9IC8vIHNob3VsZCBiZSBzb21ldGhpbmcsIHByZXBhcmlu
ZyB0aGUgZXh0cmEgcmVhZGVyCgoKICAgIHZhciBleHRyYVJlYWRlciA9IHJlYWRlckZvcih0aGlzLmV4dHJhRmllbGRzWzB4MDAwMV0udmFsdWUpOyAvLyBJIHJlYWxseSBob3BlIHRoYXQgdGhlc2UgNjRiaXRzIGludGVnZXIgY2FuIGZpdCBpbiAzMiBiaXRzIGludGVnZXIsIGJlY2F1c2UganMKICAgIC8vIHdvbid0IGxldCB1cyBoYXZlIG1vcmUuCgogICAgaWYgKHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9PT0gdXRpbHMuTUFYX1ZBTFVFXzMyQklUUykgewogICAgICB0aGlzLnVuY29tcHJlc3NlZFNpemUgPSBleHRyYVJlYWRl
ci5yZWFkSW50KDgpOwogICAgfQoKICAgIGlmICh0aGlzLmNvbXByZXNzZWRTaXplID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7CiAgICAgIHRoaXMuY29tcHJlc3NlZFNpemUgPSBleHRyYVJlYWRlci5yZWFkSW50KDgpOwogICAgfQoKICAgIGlmICh0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0ID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7CiAgICAgIHRoaXMubG9jYWxIZWFkZXJPZmZzZXQgPSBleHRyYVJlYWRlci5yZWFkSW50KDgpOwogICAgfQoKICAgIGlmICh0aGlzLmRpc2tOdW1iZXJTdGFydCA9PT0gdXRpbHMu
TUFYX1ZBTFVFXzMyQklUUykgewogICAgICB0aGlzLmRpc2tOdW1iZXJTdGFydCA9IGV4dHJhUmVhZGVyLnJlYWRJbnQoNCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmVhZCB0aGUgY2VudHJhbCBwYXJ0IG9mIGEgemlwIGZpbGUgYW5kIGFkZCB0aGUgaW5mbyBpbiB0aGlzIG9iamVjdC4KICAgKiBAcGFyYW0ge0RhdGFSZWFkZXJ9IHJlYWRlciB0aGUgcmVhZGVyIHRvIHVzZS4KICAgKi8KICByZWFkRXh0cmFGaWVsZHM6IGZ1bmN0aW9uIHJlYWRFeHRyYUZpZWxkcyhyZWFkZXIpIHsKICAgIHZhciBlbmQgPSByZWFkZXIuaW5k
ZXggKyB0aGlzLmV4dHJhRmllbGRzTGVuZ3RoLAogICAgICAgIGV4dHJhRmllbGRJZCwKICAgICAgICBleHRyYUZpZWxkTGVuZ3RoLAogICAgICAgIGV4dHJhRmllbGRWYWx1ZTsKCiAgICBpZiAoIXRoaXMuZXh0cmFGaWVsZHMpIHsKICAgICAgdGhpcy5leHRyYUZpZWxkcyA9IHt9OwogICAgfQoKICAgIHdoaWxlIChyZWFkZXIuaW5kZXggKyA0IDwgZW5kKSB7CiAgICAgIGV4dHJhRmllbGRJZCA9IHJlYWRlci5yZWFkSW50KDIpOwogICAgICBleHRyYUZpZWxkTGVuZ3RoID0gcmVhZGVyLnJlYWRJbnQoMik7CiAgICAgIGV4dHJh
RmllbGRWYWx1ZSA9IHJlYWRlci5yZWFkRGF0YShleHRyYUZpZWxkTGVuZ3RoKTsKICAgICAgdGhpcy5leHRyYUZpZWxkc1tleHRyYUZpZWxkSWRdID0gewogICAgICAgIGlkOiBleHRyYUZpZWxkSWQsCiAgICAgICAgbGVuZ3RoOiBleHRyYUZpZWxkTGVuZ3RoLAogICAgICAgIHZhbHVlOiBleHRyYUZpZWxkVmFsdWUKICAgICAgfTsKICAgIH0KCiAgICByZWFkZXIuc2V0SW5kZXgoZW5kKTsKICB9LAoKICAvKioKICAgKiBBcHBseSBhbiBVVEY4IHRyYW5zZm9ybWF0aW9uIGlmIG5lZWRlZC4KICAgKi8KICBoYW5kbGVVVEY4OiBm
dW5jdGlvbiBoYW5kbGVVVEY4KCkgewogICAgdmFyIGRlY29kZVBhcmFtVHlwZSA9IHN1cHBvcnQudWludDhhcnJheSA/ICJ1aW50OGFycmF5IiA6ICJhcnJheSI7CgogICAgaWYgKHRoaXMudXNlVVRGOCgpKSB7CiAgICAgIHRoaXMuZmlsZU5hbWVTdHIgPSB1dGY4LnV0ZjhkZWNvZGUodGhpcy5maWxlTmFtZSk7CiAgICAgIHRoaXMuZmlsZUNvbW1lbnRTdHIgPSB1dGY4LnV0ZjhkZWNvZGUodGhpcy5maWxlQ29tbWVudCk7CiAgICB9IGVsc2UgewogICAgICB2YXIgdXBhdGggPSB0aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZVBh
dGgoKTsKCiAgICAgIGlmICh1cGF0aCAhPT0gbnVsbCkgewogICAgICAgIHRoaXMuZmlsZU5hbWVTdHIgPSB1cGF0aDsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBBU0NJSSB0ZXh0IG9yIHVuc3VwcG9ydGVkIGNvZGUgcGFnZQogICAgICAgIHZhciBmaWxlTmFtZUJ5dGVBcnJheSA9IHV0aWxzLnRyYW5zZm9ybVRvKGRlY29kZVBhcmFtVHlwZSwgdGhpcy5maWxlTmFtZSk7CiAgICAgICAgdGhpcy5maWxlTmFtZVN0ciA9IHRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUoZmlsZU5hbWVCeXRlQXJyYXkpOwogICAgICB9
CgogICAgICB2YXIgdWNvbW1lbnQgPSB0aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQoKTsKCiAgICAgIGlmICh1Y29tbWVudCAhPT0gbnVsbCkgewogICAgICAgIHRoaXMuZmlsZUNvbW1lbnRTdHIgPSB1Y29tbWVudDsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBBU0NJSSB0ZXh0IG9yIHVuc3VwcG9ydGVkIGNvZGUgcGFnZQogICAgICAgIHZhciBjb21tZW50Qnl0ZUFycmF5ID0gdXRpbHMudHJhbnNmb3JtVG8oZGVjb2RlUGFyYW1UeXBlLCB0aGlzLmZpbGVDb21tZW50KTsKICAgICAgICB0aGlzLmZpbGVDb21t
ZW50U3RyID0gdGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShjb21tZW50Qnl0ZUFycmF5KTsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIEZpbmQgdGhlIHVuaWNvZGUgcGF0aCBkZWNsYXJlZCBpbiB0aGUgZXh0cmEgZmllbGQsIGlmIGFueS4KICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSB1bmljb2RlIHBhdGgsIG51bGwgb3RoZXJ3aXNlLgogICAqLwogIGZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGg6IGZ1bmN0aW9uIGZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGgoKSB7CiAgICB2YXIgdXBhdGhGaWVsZCA9
IHRoaXMuZXh0cmFGaWVsZHNbMHg3MDc1XTsKCiAgICBpZiAodXBhdGhGaWVsZCkgewogICAgICB2YXIgZXh0cmFSZWFkZXIgPSByZWFkZXJGb3IodXBhdGhGaWVsZC52YWx1ZSk7IC8vIHdyb25nIHZlcnNpb24KCiAgICAgIGlmIChleHRyYVJlYWRlci5yZWFkSW50KDEpICE9PSAxKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0gLy8gdGhlIGNyYyBvZiB0aGUgZmlsZW5hbWUgY2hhbmdlZCwgdGhpcyBmaWVsZCBpcyBvdXQgb2YgZGF0ZS4KCgogICAgICBpZiAoY3JjMzJmbih0aGlzLmZpbGVOYW1lKSAhPT0gZXh0cmFS
ZWFkZXIucmVhZEludCg0KSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICByZXR1cm4gdXRmOC51dGY4ZGVjb2RlKGV4dHJhUmVhZGVyLnJlYWREYXRhKHVwYXRoRmllbGQubGVuZ3RoIC0gNSkpOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0sCgogIC8qKgogICAqIEZpbmQgdGhlIHVuaWNvZGUgY29tbWVudCBkZWNsYXJlZCBpbiB0aGUgZXh0cmEgZmllbGQsIGlmIGFueS4KICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSB1bmljb2RlIGNvbW1lbnQsIG51bGwgb3RoZXJ3aXNlLgogICAqLwogIGZpbmRF
eHRyYUZpZWxkVW5pY29kZUNvbW1lbnQ6IGZ1bmN0aW9uIGZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQoKSB7CiAgICB2YXIgdWNvbW1lbnRGaWVsZCA9IHRoaXMuZXh0cmFGaWVsZHNbMHg2Mzc1XTsKCiAgICBpZiAodWNvbW1lbnRGaWVsZCkgewogICAgICB2YXIgZXh0cmFSZWFkZXIgPSByZWFkZXJGb3IodWNvbW1lbnRGaWVsZC52YWx1ZSk7IC8vIHdyb25nIHZlcnNpb24KCiAgICAgIGlmIChleHRyYVJlYWRlci5yZWFkSW50KDEpICE9PSAxKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0gLy8gdGhlIGNyYyBv
ZiB0aGUgY29tbWVudCBjaGFuZ2VkLCB0aGlzIGZpZWxkIGlzIG91dCBvZiBkYXRlLgoKCiAgICAgIGlmIChjcmMzMmZuKHRoaXMuZmlsZUNvbW1lbnQpICE9PSBleHRyYVJlYWRlci5yZWFkSW50KDQpKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiB1dGY4LnV0ZjhkZWNvZGUoZXh0cmFSZWFkZXIucmVhZERhdGEodWNvbW1lbnRGaWVsZC5sZW5ndGggLSA1KSk7CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfQp9Owptb2R1bGUuZXhwb3J0cyA9IFppcEVudHJ5OwoKfSx7Ii4vY29tcHJlc3Nl
ZE9iamVjdCI6MjgyLCIuL2NvbXByZXNzaW9ucyI6MjgzLCIuL2NyYzMyIjoyODQsIi4vcmVhZGVyL3JlYWRlckZvciI6MzAyLCIuL3N1cHBvcnQiOjMxMCwiLi91dGY4IjozMTEsIi4vdXRpbHMiOjMxMn1dLDMxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBTdHJlYW1IZWxwZXIgPSByZXF1aXJlKCcuL3N0cmVhbS9TdHJlYW1IZWxwZXInKTsKCnZhciBEYXRhV29ya2VyID0gcmVxdWlyZSgnLi9zdHJlYW0vRGF0YVdvcmtlcicpOwoKdmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0
ZjgnKTsKCnZhciBDb21wcmVzc2VkT2JqZWN0ID0gcmVxdWlyZSgnLi9jb21wcmVzc2VkT2JqZWN0Jyk7Cgp2YXIgR2VuZXJpY1dvcmtlciA9IHJlcXVpcmUoJy4vc3RyZWFtL0dlbmVyaWNXb3JrZXInKTsKLyoqCiAqIEEgc2ltcGxlIG9iamVjdCByZXByZXNlbnRpbmcgYSBmaWxlIGluIHRoZSB6aXAgZmlsZS4KICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBmaWxlCiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBkYXRhIHRoZSBkYXRh
CiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHRoZSBvcHRpb25zIG9mIHRoZSBmaWxlCiAqLwoKCnZhciBaaXBPYmplY3QgPSBmdW5jdGlvbiBaaXBPYmplY3QobmFtZSwgZGF0YSwgb3B0aW9ucykgewogIHRoaXMubmFtZSA9IG5hbWU7CiAgdGhpcy5kaXIgPSBvcHRpb25zLmRpcjsKICB0aGlzLmRhdGUgPSBvcHRpb25zLmRhdGU7CiAgdGhpcy5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50OwogIHRoaXMudW5peFBlcm1pc3Npb25zID0gb3B0aW9ucy51bml4UGVybWlzc2lvbnM7CiAgdGhpcy5kb3NQZXJtaXNzaW9ucyA9IG9w
dGlvbnMuZG9zUGVybWlzc2lvbnM7CiAgdGhpcy5fZGF0YSA9IGRhdGE7CiAgdGhpcy5fZGF0YUJpbmFyeSA9IG9wdGlvbnMuYmluYXJ5OyAvLyBrZWVwIG9ubHkgdGhlIGNvbXByZXNzaW9uCgogIHRoaXMub3B0aW9ucyA9IHsKICAgIGNvbXByZXNzaW9uOiBvcHRpb25zLmNvbXByZXNzaW9uLAogICAgY29tcHJlc3Npb25PcHRpb25zOiBvcHRpb25zLmNvbXByZXNzaW9uT3B0aW9ucwogIH07Cn07CgpaaXBPYmplY3QucHJvdG90eXBlID0gewogIC8qKgogICAqIENyZWF0ZSBhbiBpbnRlcm5hbCBzdHJlYW0gZm9yIHRoZSBjb250
ZW50IG9mIHRoaXMgb2JqZWN0LgogICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSB0eXBlIG9mIGVhY2ggY2h1bmsuCiAgICogQHJldHVybiBTdHJlYW1IZWxwZXIgdGhlIHN0cmVhbS4KICAgKi8KICBpbnRlcm5hbFN0cmVhbTogZnVuY3Rpb24gaW50ZXJuYWxTdHJlYW0odHlwZSkgewogICAgdmFyIHJlc3VsdCA9IG51bGwsCiAgICAgICAgb3V0cHV0VHlwZSA9ICJzdHJpbmciOwoKICAgIHRyeSB7CiAgICAgIGlmICghdHlwZSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiTm8gb3V0cHV0IHR5cGUgc3BlY2lmaWVkLiIp
OwogICAgICB9CgogICAgICBvdXRwdXRUeXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpOwogICAgICB2YXIgYXNrVW5pY29kZVN0cmluZyA9IG91dHB1dFR5cGUgPT09ICJzdHJpbmciIHx8IG91dHB1dFR5cGUgPT09ICJ0ZXh0IjsKCiAgICAgIGlmIChvdXRwdXRUeXBlID09PSAiYmluYXJ5c3RyaW5nIiB8fCBvdXRwdXRUeXBlID09PSAidGV4dCIpIHsKICAgICAgICBvdXRwdXRUeXBlID0gInN0cmluZyI7CiAgICAgIH0KCiAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29tcHJlc3NXb3JrZXIoKTsKICAgICAgdmFyIGlzVW5pY29kZVN0
cmluZyA9ICF0aGlzLl9kYXRhQmluYXJ5OwoKICAgICAgaWYgKGlzVW5pY29kZVN0cmluZyAmJiAhYXNrVW5pY29kZVN0cmluZykgewogICAgICAgIHJlc3VsdCA9IHJlc3VsdC5waXBlKG5ldyB1dGY4LlV0ZjhFbmNvZGVXb3JrZXIoKSk7CiAgICAgIH0KCiAgICAgIGlmICghaXNVbmljb2RlU3RyaW5nICYmIGFza1VuaWNvZGVTdHJpbmcpIHsKICAgICAgICByZXN1bHQgPSByZXN1bHQucGlwZShuZXcgdXRmOC5VdGY4RGVjb2RlV29ya2VyKCkpOwogICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJlc3VsdCA9IG5ldyBH
ZW5lcmljV29ya2VyKCJlcnJvciIpOwogICAgICByZXN1bHQuZXJyb3IoZSk7CiAgICB9CgogICAgcmV0dXJuIG5ldyBTdHJlYW1IZWxwZXIocmVzdWx0LCBvdXRwdXRUeXBlLCAiIik7CiAgfSwKCiAgLyoqCiAgICogUHJlcGFyZSB0aGUgY29udGVudCBpbiB0aGUgYXNrZWQgdHlwZS4KICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgdHlwZSBvZiB0aGUgcmVzdWx0LgogICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVXBkYXRlIGEgZnVuY3Rpb24gdG8gY2FsbCBvbiBlYWNoIGludGVybmFsIHVwZGF0ZS4KICAgKiBAcmV0dXJu
IFByb21pc2UgdGhlIHByb21pc2Ugb2YgdGhlIHJlc3VsdC4KICAgKi8KICBhc3luYzogZnVuY3Rpb24gYXN5bmModHlwZSwgb25VcGRhdGUpIHsKICAgIHJldHVybiB0aGlzLmludGVybmFsU3RyZWFtKHR5cGUpLmFjY3VtdWxhdGUob25VcGRhdGUpOwogIH0sCgogIC8qKgogICAqIFByZXBhcmUgdGhlIGNvbnRlbnQgYXMgYSBub2RlanMgc3RyZWFtLgogICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSB0eXBlIG9mIGVhY2ggY2h1bmsuCiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25VcGRhdGUgYSBmdW5jdGlvbiB0byBjYWxs
IG9uIGVhY2ggaW50ZXJuYWwgdXBkYXRlLgogICAqIEByZXR1cm4gU3RyZWFtIHRoZSBzdHJlYW0uCiAgICovCiAgbm9kZVN0cmVhbTogZnVuY3Rpb24gbm9kZVN0cmVhbSh0eXBlLCBvblVwZGF0ZSkgewogICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxTdHJlYW0odHlwZSB8fCAibm9kZWJ1ZmZlciIpLnRvTm9kZWpzU3RyZWFtKG9uVXBkYXRlKTsKICB9LAoKICAvKioKICAgKiBSZXR1cm4gYSB3b3JrZXIgZm9yIHRoZSBjb21wcmVzc2VkIGNvbnRlbnQuCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge09iamVjdH0gY29tcHJlc3Np
b24gdGhlIGNvbXByZXNzaW9uIG9iamVjdCB0byB1c2UuCiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXByZXNzaW9uT3B0aW9ucyB0aGUgb3B0aW9ucyB0byB1c2Ugd2hlbiBjb21wcmVzc2luZy4KICAgKiBAcmV0dXJuIFdvcmtlciB0aGUgd29ya2VyLgogICAqLwogIF9jb21wcmVzc1dvcmtlcjogZnVuY3Rpb24gX2NvbXByZXNzV29ya2VyKGNvbXByZXNzaW9uLCBjb21wcmVzc2lvbk9wdGlvbnMpIHsKICAgIGlmICh0aGlzLl9kYXRhIGluc3RhbmNlb2YgQ29tcHJlc3NlZE9iamVjdCAmJiB0aGlzLl9kYXRhLmNvbXByZXNzaW9u
Lm1hZ2ljID09PSBjb21wcmVzc2lvbi5tYWdpYykgewogICAgICByZXR1cm4gdGhpcy5fZGF0YS5nZXRDb21wcmVzc2VkV29ya2VyKCk7CiAgICB9IGVsc2UgewogICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZGVjb21wcmVzc1dvcmtlcigpOwoKICAgICAgaWYgKCF0aGlzLl9kYXRhQmluYXJ5KSB7CiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnBpcGUobmV3IHV0ZjguVXRmOEVuY29kZVdvcmtlcigpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIENvbXByZXNzZWRPYmplY3QuY3JlYXRlV29ya2VyRnJvbShyZXN1bHQsIGNvbXByZXNz
aW9uLCBjb21wcmVzc2lvbk9wdGlvbnMpOwogICAgfQogIH0sCgogIC8qKgogICAqIFJldHVybiBhIHdvcmtlciBmb3IgdGhlIGRlY29tcHJlc3NlZCBjb250ZW50LgogICAqIEBwcml2YXRlCiAgICogQHJldHVybiBXb3JrZXIgdGhlIHdvcmtlci4KICAgKi8KICBfZGVjb21wcmVzc1dvcmtlcjogZnVuY3Rpb24gX2RlY29tcHJlc3NXb3JrZXIoKSB7CiAgICBpZiAodGhpcy5fZGF0YSBpbnN0YW5jZW9mIENvbXByZXNzZWRPYmplY3QpIHsKICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0Q29udGVudFdvcmtlcigpOwogICAgfSBl
bHNlIGlmICh0aGlzLl9kYXRhIGluc3RhbmNlb2YgR2VuZXJpY1dvcmtlcikgewogICAgICByZXR1cm4gdGhpcy5fZGF0YTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBuZXcgRGF0YVdvcmtlcih0aGlzLl9kYXRhKTsKICAgIH0KICB9Cn07CnZhciByZW1vdmVkTWV0aG9kcyA9IFsiYXNUZXh0IiwgImFzQmluYXJ5IiwgImFzTm9kZUJ1ZmZlciIsICJhc1VpbnQ4QXJyYXkiLCAiYXNBcnJheUJ1ZmZlciJdOwoKdmFyIHJlbW92ZWRGbiA9IGZ1bmN0aW9uIHJlbW92ZWRGbigpIHsKICB0aHJvdyBuZXcgRXJyb3IoIlRoaXMgbWV0
aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuIik7Cn07Cgpmb3IgKHZhciBpID0gMDsgaSA8IHJlbW92ZWRNZXRob2RzLmxlbmd0aDsgaSsrKSB7CiAgWmlwT2JqZWN0LnByb3RvdHlwZVtyZW1vdmVkTWV0aG9kc1tpXV0gPSByZW1vdmVkRm47Cn0KCm1vZHVsZS5leHBvcnRzID0gWmlwT2JqZWN0OwoKfSx7Ii4vY29tcHJlc3NlZE9iamVjdCI6MjgyLCIuL3N0cmVhbS9EYXRhV29ya2VyIjozMDcsIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXIiOjMwOCwiLi9zdHJl
YW0vU3RyZWFtSGVscGVyIjozMDksIi4vdXRmOCI6MzExfV0sMzE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24g
X3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgaW1tZWRpYXRlID0gcmVxdWlyZSgnaW1tZWRpYXRlJyk7Ci8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgoKZnVuY3Rpb24gSU5URVJOQUwoKSB7fQoKdmFyIGhhbmRsZXJzID0ge307CnZhciBSRUpFQ1RFRCA9IFsnUkVK
RUNURUQnXTsKdmFyIEZVTEZJTExFRCA9IFsnRlVMRklMTEVEJ107CnZhciBQRU5ESU5HID0gWydQRU5ESU5HJ107Cm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTsKCmZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHsKICBpZiAodHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICB9CgogIHRoaXMuc3RhdGUgPSBQRU5ESU5HOwogIHRoaXMucXVldWUgPSBbXTsKICB0aGlzLm91dGNvbWUgPSB2b2lkIDA7CgogIGlmIChy
ZXNvbHZlciAhPT0gSU5URVJOQUwpIHsKICAgIHNhZmVseVJlc29sdmVUaGVuYWJsZSh0aGlzLCByZXNvbHZlcik7CiAgfQp9CgpQcm9taXNlLnByb3RvdHlwZVsiZmluYWxseSJdID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIHRoaXM7CiAgfQoKICB2YXIgcCA9IHRoaXMuY29uc3RydWN0b3I7CiAgcmV0dXJuIHRoaXMudGhlbihyZXNvbHZlLCByZWplY3QpOwoKICBmdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7CiAgICBmdW5jdGlvbiB5ZXMo
KSB7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KCiAgICByZXR1cm4gcC5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oeWVzKTsKICB9CgogIGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHsKICAgIGZ1bmN0aW9uIG5vKCkgewogICAgICB0aHJvdyByZWFzb247CiAgICB9CgogICAgcmV0dXJuIHAucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKG5vKTsKICB9Cn07CgpQcm9taXNlLnByb3RvdHlwZVsiY2F0Y2giXSA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7CiAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTsKfTsK
ClByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHsKICBpZiAodHlwZW9mIG9uRnVsZmlsbGVkICE9PSAnZnVuY3Rpb24nICYmIHRoaXMuc3RhdGUgPT09IEZVTEZJTExFRCB8fCB0eXBlb2Ygb25SZWplY3RlZCAhPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLnN0YXRlID09PSBSRUpFQ1RFRCkgewogICAgcmV0dXJuIHRoaXM7CiAgfQoKICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKElOVEVSTkFMKTsKCiAgaWYgKHRoaXMuc3RhdGUgIT09IFBFTkRJTkcpIHsK
ICAgIHZhciByZXNvbHZlciA9IHRoaXMuc3RhdGUgPT09IEZVTEZJTExFRCA/IG9uRnVsZmlsbGVkIDogb25SZWplY3RlZDsKICAgIHVud3JhcChwcm9taXNlLCByZXNvbHZlciwgdGhpcy5vdXRjb21lKTsKICB9IGVsc2UgewogICAgdGhpcy5xdWV1ZS5wdXNoKG5ldyBRdWV1ZUl0ZW0ocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpKTsKICB9CgogIHJldHVybiBwcm9taXNlOwp9OwoKZnVuY3Rpb24gUXVldWVJdGVtKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7CiAgdGhpcy5wcm9taXNlID0gcHJv
bWlzZTsKCiAgaWYgKHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJykgewogICAgdGhpcy5vbkZ1bGZpbGxlZCA9IG9uRnVsZmlsbGVkOwogICAgdGhpcy5jYWxsRnVsZmlsbGVkID0gdGhpcy5vdGhlckNhbGxGdWxmaWxsZWQ7CiAgfQoKICBpZiAodHlwZW9mIG9uUmVqZWN0ZWQgPT09ICdmdW5jdGlvbicpIHsKICAgIHRoaXMub25SZWplY3RlZCA9IG9uUmVqZWN0ZWQ7CiAgICB0aGlzLmNhbGxSZWplY3RlZCA9IHRoaXMub3RoZXJDYWxsUmVqZWN0ZWQ7CiAgfQp9CgpRdWV1ZUl0ZW0ucHJvdG90eXBlLmNhbGxGdWxm
aWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHsKICBoYW5kbGVycy5yZXNvbHZlKHRoaXMucHJvbWlzZSwgdmFsdWUpOwp9OwoKUXVldWVJdGVtLnByb3RvdHlwZS5vdGhlckNhbGxGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHsKICB1bndyYXAodGhpcy5wcm9taXNlLCB0aGlzLm9uRnVsZmlsbGVkLCB2YWx1ZSk7Cn07CgpRdWV1ZUl0ZW0ucHJvdG90eXBlLmNhbGxSZWplY3RlZCA9IGZ1bmN0aW9uICh2YWx1ZSkgewogIGhhbmRsZXJzLnJlamVjdCh0aGlzLnByb21pc2UsIHZhbHVlKTsKfTsKClF1ZXVlSXRlbS5wcm90b3R5
cGUub3RoZXJDYWxsUmVqZWN0ZWQgPSBmdW5jdGlvbiAodmFsdWUpIHsKICB1bndyYXAodGhpcy5wcm9taXNlLCB0aGlzLm9uUmVqZWN0ZWQsIHZhbHVlKTsKfTsKCmZ1bmN0aW9uIHVud3JhcChwcm9taXNlLCBmdW5jLCB2YWx1ZSkgewogIGltbWVkaWF0ZShmdW5jdGlvbiAoKSB7CiAgICB2YXIgcmV0dXJuVmFsdWU7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuVmFsdWUgPSBmdW5jKHZhbHVlKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCBlKTsKICAgIH0KCiAgICBpZiAo
cmV0dXJuVmFsdWUgPT09IHByb21pc2UpIHsKICAgICAgaGFuZGxlcnMucmVqZWN0KHByb21pc2UsIG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCByZXNvbHZlIHByb21pc2Ugd2l0aCBpdHNlbGYnKSk7CiAgICB9IGVsc2UgewogICAgICBoYW5kbGVycy5yZXNvbHZlKHByb21pc2UsIHJldHVyblZhbHVlKTsKICAgIH0KICB9KTsKfQoKaGFuZGxlcnMucmVzb2x2ZSA9IGZ1bmN0aW9uIChzZWxmLCB2YWx1ZSkgewogIHZhciByZXN1bHQgPSB0cnlDYXRjaChnZXRUaGVuLCB2YWx1ZSk7CgogIGlmIChyZXN1bHQuc3RhdHVzID09PSAnZXJy
b3InKSB7CiAgICByZXR1cm4gaGFuZGxlcnMucmVqZWN0KHNlbGYsIHJlc3VsdC52YWx1ZSk7CiAgfQoKICB2YXIgdGhlbmFibGUgPSByZXN1bHQudmFsdWU7CgogIGlmICh0aGVuYWJsZSkgewogICAgc2FmZWx5UmVzb2x2ZVRoZW5hYmxlKHNlbGYsIHRoZW5hYmxlKTsKICB9IGVsc2UgewogICAgc2VsZi5zdGF0ZSA9IEZVTEZJTExFRDsKICAgIHNlbGYub3V0Y29tZSA9IHZhbHVlOwogICAgdmFyIGkgPSAtMTsKICAgIHZhciBsZW4gPSBzZWxmLnF1ZXVlLmxlbmd0aDsKCiAgICB3aGlsZSAoKytpIDwgbGVuKSB7CiAgICAgIHNl
bGYucXVldWVbaV0uY2FsbEZ1bGZpbGxlZCh2YWx1ZSk7CiAgICB9CiAgfQoKICByZXR1cm4gc2VsZjsKfTsKCmhhbmRsZXJzLnJlamVjdCA9IGZ1bmN0aW9uIChzZWxmLCBlcnJvcikgewogIHNlbGYuc3RhdGUgPSBSRUpFQ1RFRDsKICBzZWxmLm91dGNvbWUgPSBlcnJvcjsKICB2YXIgaSA9IC0xOwogIHZhciBsZW4gPSBzZWxmLnF1ZXVlLmxlbmd0aDsKCiAgd2hpbGUgKCsraSA8IGxlbikgewogICAgc2VsZi5xdWV1ZVtpXS5jYWxsUmVqZWN0ZWQoZXJyb3IpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn07CgpmdW5jdGlvbiBnZXRU
aGVuKG9iaikgewogIC8vIE1ha2Ugc3VyZSB3ZSBvbmx5IGFjY2VzcyB0aGUgYWNjZXNzb3Igb25jZSBhcyByZXF1aXJlZCBieSB0aGUgc3BlYwogIHZhciB0aGVuID0gb2JqICYmIG9iai50aGVuOwoKICBpZiAob2JqICYmIChfdHlwZW9mKG9iaikgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gYXBweVRoZW4oKSB7CiAgICAgIHRoZW4uYXBwbHkob2JqLCBhcmd1bWVudHMpOwogICAgfTsKICB9Cn0KCmZ1
bmN0aW9uIHNhZmVseVJlc29sdmVUaGVuYWJsZShzZWxmLCB0aGVuYWJsZSkgewogIC8vIEVpdGhlciBmdWxmaWxsLCByZWplY3Qgb3IgcmVqZWN0IHdpdGggZXJyb3IKICB2YXIgY2FsbGVkID0gZmFsc2U7CgogIGZ1bmN0aW9uIG9uRXJyb3IodmFsdWUpIHsKICAgIGlmIChjYWxsZWQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGNhbGxlZCA9IHRydWU7CiAgICBoYW5kbGVycy5yZWplY3Qoc2VsZiwgdmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gb25TdWNjZXNzKHZhbHVlKSB7CiAgICBpZiAoY2FsbGVkKSB7CiAgICAgIHJl
dHVybjsKICAgIH0KCiAgICBjYWxsZWQgPSB0cnVlOwogICAgaGFuZGxlcnMucmVzb2x2ZShzZWxmLCB2YWx1ZSk7CiAgfQoKICBmdW5jdGlvbiB0cnlUb1Vud3JhcCgpIHsKICAgIHRoZW5hYmxlKG9uU3VjY2Vzcywgb25FcnJvcik7CiAgfQoKICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2godHJ5VG9VbndyYXApOwoKICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gJ2Vycm9yJykgewogICAgb25FcnJvcihyZXN1bHQudmFsdWUpOwogIH0KfQoKZnVuY3Rpb24gdHJ5Q2F0Y2goZnVuYywgdmFsdWUpIHsKICB2YXIgb3V0ID0ge307CgogIHRy
eSB7CiAgICBvdXQudmFsdWUgPSBmdW5jKHZhbHVlKTsKICAgIG91dC5zdGF0dXMgPSAnc3VjY2Vzcyc7CiAgfSBjYXRjaCAoZSkgewogICAgb3V0LnN0YXR1cyA9ICdlcnJvcic7CiAgICBvdXQudmFsdWUgPSBlOwogIH0KCiAgcmV0dXJuIG91dDsKfQoKUHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZTsKCmZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHsKICBpZiAodmFsdWUgaW5zdGFuY2VvZiB0aGlzKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfQoKICByZXR1cm4gaGFuZGxlcnMucmVzb2x2ZShuZXcgdGhpcyhJTlRFUk5BTCksIHZh
bHVlKTsKfQoKUHJvbWlzZS5yZWplY3QgPSByZWplY3Q7CgpmdW5jdGlvbiByZWplY3QocmVhc29uKSB7CiAgdmFyIHByb21pc2UgPSBuZXcgdGhpcyhJTlRFUk5BTCk7CiAgcmV0dXJuIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCByZWFzb24pOwp9CgpQcm9taXNlLmFsbCA9IGFsbDsKCmZ1bmN0aW9uIGFsbChpdGVyYWJsZSkgewogIHZhciBzZWxmID0gdGhpczsKCiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyYWJsZSkgIT09ICdbb2JqZWN0IEFycmF5XScpIHsKICAgIHJldHVybiB0aGlzLnJlamVj
dChuZXcgVHlwZUVycm9yKCdtdXN0IGJlIGFuIGFycmF5JykpOwogIH0KCiAgdmFyIGxlbiA9IGl0ZXJhYmxlLmxlbmd0aDsKICB2YXIgY2FsbGVkID0gZmFsc2U7CgogIGlmICghbGVuKSB7CiAgICByZXR1cm4gdGhpcy5yZXNvbHZlKFtdKTsKICB9CgogIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuKTsKICB2YXIgcmVzb2x2ZWQgPSAwOwogIHZhciBpID0gLTE7CiAgdmFyIHByb21pc2UgPSBuZXcgdGhpcyhJTlRFUk5BTCk7CgogIHdoaWxlICgrK2kgPCBsZW4pIHsKICAgIGFsbFJlc29sdmVyKGl0ZXJhYmxlW2ldLCBpKTsK
ICB9CgogIHJldHVybiBwcm9taXNlOwoKICBmdW5jdGlvbiBhbGxSZXNvbHZlcih2YWx1ZSwgaSkgewogICAgc2VsZi5yZXNvbHZlKHZhbHVlKS50aGVuKHJlc29sdmVGcm9tQWxsLCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgaWYgKCFjYWxsZWQpIHsKICAgICAgICBjYWxsZWQgPSB0cnVlOwogICAgICAgIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCBlcnJvcik7CiAgICAgIH0KICAgIH0pOwoKICAgIGZ1bmN0aW9uIHJlc29sdmVGcm9tQWxsKG91dFZhbHVlKSB7CiAgICAgIHZhbHVlc1tpXSA9IG91dFZhbHVlOwoKICAgICAg
aWYgKCsrcmVzb2x2ZWQgPT09IGxlbiAmJiAhY2FsbGVkKSB7CiAgICAgICAgY2FsbGVkID0gdHJ1ZTsKICAgICAgICBoYW5kbGVycy5yZXNvbHZlKHByb21pc2UsIHZhbHVlcyk7CiAgICAgIH0KICAgIH0KICB9Cn0KClByb21pc2UucmFjZSA9IHJhY2U7CgpmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7CiAgdmFyIHNlbGYgPSB0aGlzOwoKICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXJhYmxlKSAhPT0gJ1tvYmplY3QgQXJyYXldJykgewogICAgcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3Io
J211c3QgYmUgYW4gYXJyYXknKSk7CiAgfQoKICB2YXIgbGVuID0gaXRlcmFibGUubGVuZ3RoOwogIHZhciBjYWxsZWQgPSBmYWxzZTsKCiAgaWYgKCFsZW4pIHsKICAgIHJldHVybiB0aGlzLnJlc29sdmUoW10pOwogIH0KCiAgdmFyIGkgPSAtMTsKICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzKElOVEVSTkFMKTsKCiAgd2hpbGUgKCsraSA8IGxlbikgewogICAgcmVzb2x2ZXIoaXRlcmFibGVbaV0pOwogIH0KCiAgcmV0dXJuIHByb21pc2U7CgogIGZ1bmN0aW9uIHJlc29sdmVyKHZhbHVlKSB7CiAgICBzZWxmLnJlc29sdmUodmFs
dWUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIGlmICghY2FsbGVkKSB7CiAgICAgICAgY2FsbGVkID0gdHJ1ZTsKICAgICAgICBoYW5kbGVycy5yZXNvbHZlKHByb21pc2UsIHJlc3BvbnNlKTsKICAgICAgfQogICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIGlmICghY2FsbGVkKSB7CiAgICAgICAgY2FsbGVkID0gdHJ1ZTsKICAgICAgICBoYW5kbGVycy5yZWplY3QocHJvbWlzZSwgZXJyb3IpOwogICAgICB9CiAgICB9KTsKICB9Cn0KCn0seyJpbW1lZGlhdGUiOjI3N31dLDMxNzpbZnVuY3Rpb24ocmVx
dWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBl
b2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgovKioKICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPgogKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9Im5wbSIgLW8gLi9gCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczov
L2pxdWVyeS5vcmcvPgogKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwogKi8KCi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqLwp2YXIgSU5GSU5JVFkgPSAx
IC8gMDsKLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqLwoKdmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nOwovKioKICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYAogKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXBhdHRlcm5zKS4KICovCgp2YXIgcmVSZWdFeHBDaGFyID0gL1tcXF4kLiorPygpW1xde318XS9nLAogICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpOwovKiog
RGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqLwoKdmFyIGZyZWVHbG9iYWwgPSAodHlwZW9mIGdsb2JhbCA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YoZ2xvYmFsKSkgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7Ci8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovCgp2YXIgZnJlZVNlbGYgPSAodHlwZW9mIHNlbGYgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKHNlbGYp
KSA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjsKLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovCgp2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsKLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqLwoKdmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTsKLyoqCiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUKICogW2B0b1N0cmluZ1RhZ2BdKGh0
dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpCiAqIG9mIHZhbHVlcy4KICovCgp2YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZzsKLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovCgp2YXIgX1N5bWJvbCA9IHJvb3QuU3ltYm9sOwovKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi8KCnZhciBzeW1ib2xQcm90byA9IF9TeW1ib2wgPyBfU3ltYm9sLnByb3RvdHlw
ZSA6IHVuZGVmaW5lZCwKICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDsKLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaAogKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy4KICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLgogKi8KCmZ1bmN0aW9u
IGJhc2VUb1N0cmluZyh2YWx1ZSkgewogIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuCiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykgewogICAgcmV0dXJuIHZhbHVlOwogIH0KCiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkgewogICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJzsKICB9CgogIHZhciByZXN1bHQgPSB2YWx1ZSArICcnOwogIHJldHVybiByZXN1bHQgPT0gJzAnICYm
IDEgLyB2YWx1ZSA9PSAtSU5GSU5JVFkgPyAnLTAnIDogcmVzdWx0Owp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGAKICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiAib2JqZWN0Ii4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5z
IGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNPYmplY3RMaWtlKHt9KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7CiAqIC8vID0+IGZhbHNlCiAqCiAqIF8uaXNPYmplY3RMaWtlKG51bGwpOwogKiAvLyA9PiBmYWxzZQogKi8KCgpmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHsKICByZXR1cm4gISF2YWx1ZSAmJiBfdHlwZW9m
KHZhbHVlKSA9PSAnb2JqZWN0JzsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDQuMC4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzU3lt
Ym9sKFN5bWJvbC5pdGVyYXRvcik7CiAqIC8vID0+IHRydWUKICoKICogXy5pc1N5bWJvbCgnYWJjJyk7CiAqIC8vID0+IGZhbHNlCiAqLwoKCmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7CiAgcmV0dXJuIF90eXBlb2YodmFsdWUpID09ICdzeW1ib2wnIHx8IGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnOwp9Ci8qKgogKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYAogKiBhbmQgYHVu
ZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy4KICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLgogKiBAZXhhbXBsZQogKgogKiBfLnRvU3RyaW5nKG51bGwpOwogKiAvLyA9PiAnJwogKgogKiBfLnRvU3RyaW5nKC0wKTsKICogLy8gPT4gJy0wJwogKgogKiBfLnRvU3RyaW5nKFsxLCAy
LCAzXSk7CiAqIC8vID0+ICcxLDIsMycKICovCgoKZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHsKICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTsKfQovKioKICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzICJeIiwgIiQiLCAiXCIsICIuIiwgIioiLCAiKyIsCiAqICI/IiwgIigiLCAiKSIsICJbIiwgIl0iLCAieyIsICJ9IiwgYW5kICJ8IiBpbiBgc3RyaW5nYC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMy4wLjAKICogQGNhdGVn
b3J5IFN0cmluZwogKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLgogKiBAZXhhbXBsZQogKgogKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTsKICogLy8gPT4gJ1xbbG9kYXNoXF1cKGh0dHBzOi8vbG9kYXNoXC5jb20vXCknCiAqLwoKCmZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHsKICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpOwogIHJldHVy
biBzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcJCYnKSA6IHN0cmluZzsKfQoKbW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVSZWdFeHA7Cgp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0se31dLDMxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhw
b3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAi
ZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgovKioKICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPgogKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9Im5wbSIgLW8gLi9gCiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPgog
KiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwogKi8KCi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqLwp2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDsK
LyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yICJGdW5jdGlvbnMiIG1ldGhvZHMuICovCgp2YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nOwovKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovCgp2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7Ci8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNvbXBhcmlzb24gc3R5bGVzLiAqLwoKdmFyIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcgPSAx
LAogICAgUEFSVElBTF9DT01QQVJFX0ZMQUcgPSAyOwovKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi8KCnZhciBJTkZJTklUWSA9IDEgLyAwLAogICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7Ci8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi8KCnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsCiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsCiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0n
LAogICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJywKICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJywKICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLAogICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJywKICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLAogICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsCiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJywKICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsCiAgICByZWdleHBUYWcgPSAnW29i
amVjdCBSZWdFeHBdJywKICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLAogICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsCiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJywKICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7CnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsCiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsCiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsCiAgICBmbG9hdDY0VGFnID0gJ1tvYmpl
Y3QgRmxvYXQ2NEFycmF5XScsCiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsCiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJywKICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLAogICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsCiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLAogICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJywKICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7
Ci8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi8KCnZhciByZUlzRGVlcFByb3AgPSAvXC58XFsoPzpbXltcXV0qfChbIiddKSg/Oig/IVwxKVteXFxdfFxcLikqP1wxKVxdLywKICAgIHJlSXNQbGFpblByb3AgPSAvXlx3KiQvLAogICAgcmVMZWFkaW5nRG90ID0gL15cLi8sCiAgICByZVByb3BOYW1lID0gL1teLltcXV0rfFxbKD86KC0/XGQrKD86XC5cZCspPyl8KFsiJ10pKCg/Oig/IVwyKVteXFxdfFxcLikqPylcMilcXXwoPz0oPzpcLnxcW1xdKSg/OlwufFxbXF18JCkp
L2c7Ci8qKgogKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgCiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLgogKi8KCnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXiQuKis/KClbXF17fXxdL2c7Ci8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqLwoKdmFyIHJlRXNjYXBlQ2hhciA9IC9cXChcXCk/L2c7Ci8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi8KCnZh
ciByZUlzSG9zdEN0b3IgPSAvXlxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXF0kLzsKLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqLwoKdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXGQqKSQvOwovKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovCgp2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTsKdHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDhUYWdd
ID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTsKdHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9IHR5cGVkQXJy
YXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID0gdHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPSB0eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID0gdHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPSB0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlOwov
KiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqLwoKdmFyIGZyZWVHbG9iYWwgPSAodHlwZW9mIGdsb2JhbCA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YoZ2xvYmFsKSkgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7Ci8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovCgp2YXIgZnJlZVNlbGYgPSAodHlwZW9mIHNlbGYgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKHNl
bGYpKSA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjsKLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovCgp2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsKLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi8KCnZhciBmcmVlRXhwb3J0cyA9ICh0eXBlb2YgZXhwb3J0cyA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YoZXhwb3J0cykpID09
ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0czsKLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqLwoKdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiAodHlwZW9mIG1vZHVsZSA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YobW9kdWxlKSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlOwovKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNg
LiAqLwoKdmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7Ci8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqLwoKdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7Ci8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqLwoKdmFyIG5vZGVVdGlsID0gZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVBy
b2Nlc3MuYmluZGluZygndXRpbCcpOwogIH0gY2F0Y2ggKGUpIHt9Cn0oKTsKLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi8KCgp2YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTsKLyoqCiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci4KICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBm
dW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy4KICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LgogKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC4KICovCgpmdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAg
IGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKCiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTsKICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpOwogIH0KCiAgcmV0dXJuIGFjY3VtdWxhdG9yOwp9Ci8qKgogKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlCiAqIHNob3J0aGFuZHMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJh
bSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci4KICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjaywKICogIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHsKICB2YXIgaW5kZXggPSAtMSwKICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJh
eS5sZW5ndGggOiAwOwoKICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQoKICByZXR1cm4gZmFsc2U7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LgogKiBAcmV0dXJu
cyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi4KICovCgoKZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkgewogIHJldHVybiBmdW5jdGlvbiAob2JqZWN0KSB7CiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTsKICB9Owp9Ci8qKgogKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzCiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLgogKgogKiBAcHJpdmF0
ZQogKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuCiAqLwoKCmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkgewogIHZhciBpbmRleCA9IC0xLAogICAgICByZXN1bHQgPSBBcnJheShuKTsKCiAgd2hpbGUgKCsraW5kZXggPCBuKSB7CiAgICByZXN1bHRb
aW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi4KICovCgoKZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHsKICBy
ZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7CiAgfTsKfQovKioKICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LgogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLgogKi8KCgpmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkg
ewogIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7CiAgLy8gTWFueSBob3N0IG9iamVj
dHMgYXJlIGBPYmplY3RgIG9iamVjdHMgdGhhdCBjYW4gY29lcmNlIHRvIHN0cmluZ3MKICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLgogIHZhciByZXN1bHQgPSBmYWxzZTsKCiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHsKICAgIHRyeSB7CiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpOwogICAgfSBjYXRjaCAoZSkge30KICB9CgogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAqIENvbnZlcnRzIGBtYXBg
IHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy4KICovCgoKZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHsKICB2YXIgaW5kZXggPSAtMSwKICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpOwogIG1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07CiAgfSk7CiAgcmV0
dXJuIHJlc3VsdDsKfQovKioKICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuCiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLgogKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi4KICovCgoKZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zv
cm0pIHsKICByZXR1cm4gZnVuY3Rpb24gKGFyZykgewogICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpOwogIH07Cn0KLyoqCiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy4KICovCgoKZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHsKICB2YXIgaW5kZXggPSAtMSwKICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUp
OwogIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7CiAgfSk7CiAgcmV0dXJuIHJlc3VsdDsKfQovKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovCgoKdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsCiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsCiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7Ci8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi8KCnZhciBjb3Jl
SnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107Ci8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovCgp2YXIgbWFza1NyY0tleSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpOwogIHJldHVybiB1aWQgPyAnU3ltYm9sKHNyYylfMS4nICsgdWlkIDogJyc7Cn0oKTsKLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBz
b3VyY2Ugb2YgZnVuY3Rpb25zLiAqLwoKCnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7Ci8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqLwoKdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7Ci8qKgogKiBVc2VkIHRvIHJlc29sdmUgdGhlCiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKQogKiBvZiB2YWx1ZXMuCiAq
LwoKdmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7Ci8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovCgp2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgKyBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXCQmJykucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXCgpfCBmb3IgLis/KD89XFxcXSkvZywgJyQxLio/JykgKyAnJCcpOwovKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4g
Ki8KCnZhciBfU3ltYm9sID0gcm9vdC5TeW1ib2wsCiAgICBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5LAogICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSwKICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlOwovKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovCgp2YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7Ci8qIEJ1
aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi8KCnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSwKICAgIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksCiAgICBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyksCiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLAogICAgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpLAogICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0
ZScpOwovKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqLwoKdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSwKICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLAogICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSwKICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLAogICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTsKLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5k
IHN0cmluZ3MuICovCgp2YXIgc3ltYm9sUHJvdG8gPSBfU3ltYm9sID8gX1N5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsCiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLAogICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkOwovKioKICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LgogKgogKiBAcHJpdmF0ZQogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRo
ZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuCiAqLwoKZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7CiAgdGhpcy5jbGVhcigpOwoKICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07CiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pOwogIH0KfQovKioKICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC4KICoKICogQHBy
aXZhdGUKICogQG5hbWUgY2xlYXIKICogQG1lbWJlck9mIEhhc2gKICovCgoKZnVuY3Rpb24gaGFzaENsZWFyKCkgewogIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTsKfQovKioKICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGRlbGV0ZQogKiBAbWVtYmVyT2YgSGFzaAogKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtl
eSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7CiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTsKfQovKioKICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGdldAogKiBAbWVtYmVyT2YgSGFzaAogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRo
ZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLgogKi8KCgpmdW5jdGlvbiBoYXNoR2V0KGtleSkgewogIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXzsKCiAgaWYgKG5hdGl2ZUNyZWF0ZSkgewogICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTsKICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0OwogIH0KCiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVm
aW5lZDsKfQovKioKICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBoYXMKICogQG1lbWJlck9mIEhhc2gKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHsKICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187CiAgcmV0
dXJuIG5hdGl2ZUNyZWF0ZSA/IGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpOwp9Ci8qKgogKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIHNldAogKiBAbWVtYmVyT2YgSGFzaAogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC4KICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LgogKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNl
LgogKi8KCgpmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHsKICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187CiAgZGF0YVtrZXldID0gbmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlOwogIHJldHVybiB0aGlzOwp9IC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC4KCgpIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjsKSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTsKSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDsKSGFzaC5wcm90
b3R5cGUuaGFzID0gaGFzaEhhczsKSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDsKLyoqCiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuCiAqCiAqIEBwcml2YXRlCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS4KICovCgpmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykgewogIHZhciBpbmRleCA9IC0xLAogICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwOwogIHRoaXMuY2xlYXIoKTsKCiAgd2hpbGUg
KCsraW5kZXggPCBsZW5ndGgpIHsKICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdOwogICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTsKICB9Cn0KLyoqCiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGNsZWFyCiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGUKICovCgoKZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7CiAgdGhpcy5fX2RhdGFfXyA9IFtdOwp9Ci8qKgogKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJv
bSB0aGUgbGlzdCBjYWNoZS4KICoKICogQHByaXZhdGUKICogQG5hbWUgZGVsZXRlCiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkgewogIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywKICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0
YSwga2V5KTsKCiAgaWYgKGluZGV4IDwgMCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTsKCiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkgewogICAgZGF0YS5wb3AoKTsKICB9IGVsc2UgewogICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpOwogIH0KCiAgcmV0dXJuIHRydWU7Cn0KLyoqCiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBnZXQKICogQG1lbWJlck9mIExpc3RDYWNoZQogKiBAcGFy
YW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLgogKi8KCgpmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7CiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLAogICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpOwogIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTsKfQovKioKICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLgogKgogKiBA
cHJpdmF0ZQogKiBAbmFtZSBoYXMKICogQG1lbWJlck9mIExpc3RDYWNoZQogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7CiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7Cn0KLyoqCiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8g
YHZhbHVlYC4KICoKICogQHByaXZhdGUKICogQG5hbWUgc2V0CiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4KICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS4KICovCgoKZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHsKICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sCiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9m
KGRhdGEsIGtleSk7CgogIGlmIChpbmRleCA8IDApIHsKICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pOwogIH0gZWxzZSB7CiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIHRoaXM7Cn0gLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuCgoKTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyOwpMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTsKTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7Ckxpc3RDYWNoZS5w
cm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzOwpMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDsKLyoqCiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy4KICoKICogQHByaXZhdGUKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLgogKi8KCmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHsKICB2YXIgaW5kZXggPSAtMSwKICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJp
ZXMubGVuZ3RoIDogMDsKICB0aGlzLmNsZWFyKCk7CgogIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTsKICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7CiAgfQp9Ci8qKgogKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGNsZWFyCiAqIEBtZW1iZXJPZiBNYXBDYWNoZQogKi8KCgpmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkgewogIHRoaXMuX19kYXRhX18gPSB7CiAgICAnaGFzaCc6
IG5ldyBIYXNoKCksCiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSgpLAogICAgJ3N0cmluZyc6IG5ldyBIYXNoKCkKICB9Owp9Ci8qKgogKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBkZWxldGUKICogQG1lbWJlck9mIE1hcENhY2hlCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVk
LCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkgewogIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7Cn0KLyoqCiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGdldAogKiBAbWVtYmVyT2YgTWFwQ2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuCiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS4KICovCgoKZnVuY3Rpb24gbWFw
Q2FjaGVHZXQoa2V5KSB7CiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTsKfQovKioKICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGhhcwogKiBAbWVtYmVyT2YgTWFwQ2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVu
Y3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7CiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTsKfQovKioKICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIHNldAogKiBAbWVtYmVyT2YgTWFwQ2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4KICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLgog
Ki8KCgpmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7CiAgZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLnNldChrZXksIHZhbHVlKTsKICByZXR1cm4gdGhpczsKfSAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLgoKCk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7Ck1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTsKTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0OwpNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7Ck1hcENh
Y2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDsKLyoqCiAqCiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuCiAqCiAqIEBwcml2YXRlCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLgogKi8KCmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykgewogIHZhciBpbmRleCA9IC0xLAogICAgICBsZW5ndGggPSB2YWx1ZXMgPyB2YWx1ZXMubGVuZ3RoIDogMDsKICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hl
KCk7CgogIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTsKICB9Cn0KLyoqCiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGFkZAogKiBAbWVtYmVyT2YgU2V0Q2FjaGUKICogQGFsaWFzIHB1c2gKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuCiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLgogKi8KCgpmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkgewog
IHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7CgogIHJldHVybiB0aGlzOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGhhcwogKiBAbWVtYmVyT2YgU2V0Q2FjaGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci4KICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBzZXRDYWNoZUhh
cyh2YWx1ZSkgewogIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7Cn0gLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC4KCgpTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDsKU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzOwovKioKICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuCiAqCiAqIEBwcml2YXRlCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge0FycmF5fSBbZW50cmll
c10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS4KICovCgpmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7CiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7Cn0KLyoqCiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBjbGVhcgogKiBAbWVtYmVyT2YgU3RhY2sKICovCgoKZnVuY3Rpb24gc3RhY2tDbGVhcigpIHsKICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZSgpOwp9Ci8qKgogKiBSZW1vdmVzIGBrZXlgIGFu
ZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGRlbGV0ZQogKiBAbWVtYmVyT2YgU3RhY2sKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7CiAgcmV0dXJuIHRoaXMuX19kYXRhX19bJ2RlbGV0ZSddKGtleSk7Cn0KLyoqCiAqIEdldHMgdGhl
IHN0YWNrIHZhbHVlIGZvciBga2V5YC4KICoKICogQHByaXZhdGUKICogQG5hbWUgZ2V0CiAqIEBtZW1iZXJPZiBTdGFjawogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLgogKi8KCgpmdW5jdGlvbiBzdGFja0dldChrZXkpIHsKICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTsKfQovKioKICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy4KICoKICogQHByaXZhdGUKICogQG5h
bWUgaGFzCiAqIEBtZW1iZXJPZiBTdGFjawogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHsKICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTsKfQovKioKICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC4KICoKICogQHByaXZhdGUKICogQG5hbWUgc2V0CiAqIEBt
ZW1iZXJPZiBTdGFjawogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC4KICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LgogKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS4KICovCgoKZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkgewogIHZhciBjYWNoZSA9IHRoaXMuX19kYXRhX187CgogIGlmIChjYWNoZSBpbnN0YW5jZW9mIExpc3RDYWNoZSkgewogICAgdmFyIHBhaXJzID0gY2FjaGUuX19kYXRhX187CgogICAg
aWYgKCFNYXAgfHwgcGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpIHsKICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBjYWNoZSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpOwogIH0KCiAgY2FjaGUuc2V0KGtleSwgdmFsdWUpOwogIHJldHVybiB0aGlzOwp9IC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuCgoKU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjsKU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0
YWNrRGVsZXRlOwpTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7ClN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhczsKU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0OwovKioKICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS4KICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJp
dGVkIHByb3BlcnR5IG5hbWVzLgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLgogKi8KCmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkgewogIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuCiAgLy8gU2FmYXJpIDkgbWFrZXMgYGFyZ3VtZW50cy5sZW5ndGhgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuCiAgdmFyIHJlc3VsdCA9IGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1l
bnRzKHZhbHVlKSA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXTsKICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCwKICAgICAgc2tpcEluZGV4ZXMgPSAhIWxlbmd0aDsKCiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7CiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJiAhKHNraXBJbmRleGVzICYmIChrZXkgPT0gJ2xlbmd0aCcgfHwgaXNJbmRleChrZXksIGxlbmd0aCkpKSkgewogICAgICByZXN1bHQucHVzaChrZXkpOwogICAgfQogIH0KCiAgcmV0
dXJuIHJlc3VsdDsKfQovKioKICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC4KICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLgogKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLgogKi8KCgpmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJy
YXksIGtleSkgewogIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7CgogIHdoaWxlIChsZW5ndGgtLSkgewogICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHsKICAgICAgcmV0dXJuIGxlbmd0aDsKICAgIH0KICB9CgogIHJldHVybiAtMTsKfQovKioKICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWQKICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtB
cnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy4KICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLgogKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLgogKi8K
CgpmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikgewogIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uICh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7CiAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pOwogIH0pOwogIHJldHVybiBhY2N1bXVsYXRvcjsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9y
dGhhbmRzLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uCiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLgogKi8KCgp2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTsKLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3du
YCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgCiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LgogKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlv
biBpbnZva2VkIHBlciBpdGVyYXRpb24uCiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuCiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuCiAqLwoKdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7Ci8qKgogKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBU
aGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci4KICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi4KICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC4KICovCgpmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHsKICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0
IHZhbHVlcy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LgogKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LgogKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuCiAqLwoKCmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7CiAgcGF0aCA9IGlzS2V5KHBhdGgsIG9iamVjdCkgPyBbcGF0aF0gOiBjYXN0UGF0aChwYXRoKTsKICB2YXIgaW5kZXggPSAwLAogICAgICBsZW5n
dGggPSBwYXRoLmxlbmd0aDsKCiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7CiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldOwogIH0KCiAgcmV0dXJuIGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCA/IG9iamVjdCA6IHVuZGVmaW5lZDsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2AuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRo
ZSBgdG9TdHJpbmdUYWdgLgogKi8KCgpmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7CiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpOwp9Ci8qKgogKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS4KICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0g
UmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkgewogIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnMKICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8g
Y29tcGFyZS4KICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS4KICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2JpdG1hc2tdIFRoZSBiaXRtYXNrIG9mIGNvbXBhcmlzb24gZmxhZ3MuCiAqICBUaGUgYml0bWFzayBtYXkgYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBmbGFnczoKICogICAgIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvbgogKiAgICAgMiAtIFBhcnRpYWwg
Y29tcGFyaXNvbgogKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykgewogIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgaWYgKHZhbHVlID09IG51
bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAhaXNPYmplY3QodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSB7CiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjsKICB9CgogIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiYXNlSXNFcXVhbCwgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spOwp9Ci8qKgogKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zCiAqIGRlZXAgY29tcGFy
aXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXIKICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy4KICogQHBh
cmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuCiAqIEBwYXJhbSB7bnVtYmVyfSBbYml0bWFza10gVGhlIGJpdG1hc2sgb2YgY29tcGFyaXNvbiBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAKICogIGZvciBtb3JlIGRldGFpbHMuCiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBl
cXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7CiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLAogICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLAogICAgICBvYmpUYWcgPSBhcnJheVRhZywKICAgICAgb3RoVGFnID0gYXJyYXlUYWc7CgogIGlmICghb2JqSXNBcnIpIHsKICAgIG9ialRhZyA9IGdldFRhZyhvYmplY3QpOwogICAgb2JqVGFnID0gb2JqVGFnID09
IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7CiAgfQoKICBpZiAoIW90aElzQXJyKSB7CiAgICBvdGhUYWcgPSBnZXRUYWcob3RoZXIpOwogICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7CiAgfQoKICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnICYmICFpc0hvc3RPYmplY3Qob2JqZWN0KSwKICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnICYmICFpc0hvc3RPYmplY3Qob3RoZXIpLAogICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFn
OwoKICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikgewogICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpOwogICAgcmV0dXJuIG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7CiAgfQoKICBpZiAoIShiaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZM
QUcpKSB7CiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLAogICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpOwoKICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7CiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCwKICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElz
V3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjsKICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpOwogICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7CiAgICB9CiAgfQoKICBpZiAoIWlzU2FtZVRhZykgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpOwogIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBi
aXRtYXNrLCBzdGFjayk7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuCiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guCiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBh
cmUgZmxhZ3MgdG8gbWF0Y2guCiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7CiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCwKICAgICAgbGVuZ3RoID0gaW5kZXgsCiAgICAgIG5vQ3Vz
dG9taXplciA9ICFjdXN0b21pemVyOwoKICBpZiAob2JqZWN0ID09IG51bGwpIHsKICAgIHJldHVybiAhbGVuZ3RoOwogIH0KCiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7CgogIHdoaWxlIChpbmRleC0tKSB7CiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07CgogICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dIDogIShkYXRhWzBdIGluIG9iamVjdCkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgp
IHsKICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdOwogICAgdmFyIGtleSA9IGRhdGFbMF0sCiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSwKICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07CgogICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7CiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaygpOwoKICAgICAgaWYgKGN1c3RvbWl6
ZXIpIHsKICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTsKICAgICAgfQoKICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIGN1c3RvbWl6ZXIsIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcgfCBQQVJUSUFMX0NPTVBBUkVfRkxBRywgc3RhY2spIDogcmVzdWx0KSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIHRydWU7Cn0K
LyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLAogKiAgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHsKICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHsKICAg
IHJldHVybiBmYWxzZTsKICB9CgogIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7CiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpOwp9Ci8qKgogKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jv
b2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7CiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW29iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpXTsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlk
ZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS4KICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS4KICovCgoKZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7CiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS4KICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLgogIGlmICh0eXBlb2YgdmFs
dWUgPT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIHZhbHVlOwogIH0KCiAgaWYgKHZhbHVlID09IG51bGwpIHsKICAgIHJldHVybiBpZGVudGl0eTsKICB9CgogIGlmIChfdHlwZW9mKHZhbHVlKSA9PSAnb2JqZWN0JykgewogICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pIDogYmFzZU1hdGNoZXModmFsdWUpOwogIH0KCiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2gg
ZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuCiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuCiAqLwoKCmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkgewogIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkgewogICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTsKICB9CgogIHZhciByZXN1bHQgPSBbXTsKCiAgZm9yICh2YXIga2V5IGluIE9iamVj
dChvYmplY3QpKSB7CiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHsKICAgICAgcmVzdWx0LnB1c2goa2V5KTsKICAgIH0KICB9CgogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guCiAqIEByZXR1
cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkgewogIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTsKCiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHsKICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7CiAgfQoKICByZXR1cm4gZnVuY3Rpb24gKG9iamVjdCkgewogICAgcmV0dXJuIG9iamVjdCA9PT0g
c291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpOwogIH07Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LgogKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC4KICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3Bl
YyBmdW5jdGlvbi4KICovCgoKZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkgewogIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7CiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTsKICB9CgogIHJldHVybiBmdW5jdGlvbiAob2JqZWN0KSB7CiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTsKICAgIHJldHVybiBvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBz
cmNWYWx1ZSA/IGhhc0luKG9iamVjdCwgcGF0aCkgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIHVuZGVmaW5lZCwgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyB8IFBBUlRJQUxfQ09NUEFSRV9GTEFHKTsKICB9Owp9Ci8qKgogKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC4KICogQHJldHVybnMge0Z1bmN0
aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkgewogIHJldHVybiBmdW5jdGlvbiAob2JqZWN0KSB7CiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpOwogIH07Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaAogKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUg
dG8gcHJvY2Vzcy4KICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLgogKi8KCgpmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHsKICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLgogIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHsKICAgIHJldHVybiB2YWx1ZTsKICB9CgogIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHsKICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFs
dWUpIDogJyc7CiAgfQoKICB2YXIgcmVzdWx0ID0gdmFsdWUgKyAnJzsKICByZXR1cm4gcmVzdWx0ID09ICcwJyAmJiAxIC8gdmFsdWUgPT0gLUlORklOSVRZID8gJy0wJyA6IHJlc3VsdDsKfQovKioKICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS4KICovCgoKZnVuY3Rpb24gY2FzdFBh
dGgodmFsdWUpIHsKICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IHN0cmluZ1RvUGF0aCh2YWx1ZSk7Cn0KLyoqCiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuCiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci4KICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRo
ZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi4KICovCgoKZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBpdGVyYXRlZSkgewogICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsCiAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTsKICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgYmFzZUl0ZXJhdGVl
KGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpOwogIH07Cn0KLyoqCiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LgogKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0
aW9uLgogKi8KCgpmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBpdGVyYXRlZSkgewogICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkgewogICAgICByZXR1cm4gY29sbGVjdGlvbjsKICAgIH0KCiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7CiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7CiAgICB9CgogICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLAogICAgICAgIGluZGV4
ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsCiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7CgogICAgd2hpbGUgKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gY29sbGVjdGlvbjsKICB9Owp9Ci8qKgogKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZv
ckluYCBhbmQgYF8uZm9yT3duYC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykgewogICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2Jq
ZWN0KSwKICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksCiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoOwoKICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07CgogICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gb2JqZWN0OwogIH07Cn0KLyoqCiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBg
YmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3IKICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS4KICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy4KICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBU
aGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLgogKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYAogKiAgZm9yIG1vcmUgZGV0YWlscy4KICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5j
dGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spIHsKICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIFBBUlRJQUxfQ09NUEFSRV9GTEFHLAogICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsCiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDsKCiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0gLy8gQXNzdW1lIGN5Y2xpYyB2
YWx1ZXMgYXJlIGVxdWFsLgoKCiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpOwoKICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7CiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjsKICB9CgogIHZhciBpbmRleCA9IC0xLAogICAgICByZXN1bHQgPSB0cnVlLAogICAgICBzZWVuID0gYml0bWFzayAmIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcgPyBuZXcgU2V0Q2FjaGUoKSA6IHVuZGVmaW5lZDsKICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTsKICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTsgLy8gSWdu
b3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLgoKICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkgewogICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLAogICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdOwoKICAgIGlmIChjdXN0b21pemVyKSB7CiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbCA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaykgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2sp
OwogICAgfQoKICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmIChjb21wYXJlZCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICByZXN1bHQgPSBmYWxzZTsKICAgICAgYnJlYWs7CiAgICB9IC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuCgoKICAgIGlmIChzZWVuKSB7CiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbiAob3RoVmFsdWUsIG90aEluZGV4KSB7CiAgICAgICAgaWYgKCFzZWVuLmhhcyhv
dGhJbmRleCkgJiYgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykpKSB7CiAgICAgICAgICByZXR1cm4gc2Vlbi5hZGQob3RoSW5kZXgpOwogICAgICAgIH0KICAgICAgfSkpIHsKICAgICAgICByZXN1bHQgPSBmYWxzZTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfSBlbHNlIGlmICghKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBz
dGFjaykpKSB7CiAgICAgIHJlc3VsdCA9IGZhbHNlOwogICAgICBicmVhazsKICAgIH0KICB9CgogIHN0YWNrWydkZWxldGUnXShhcnJheSk7CiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTsKICByZXR1cm4gcmVzdWx0Owp9Ci8qKgogKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mCiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuCiAqCiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mg
b2YKICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLgogKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLgogKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8g
ZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy4KICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLgogKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYAogKiAgZm9yIG1vcmUgZGV0YWlscy4KICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy4KICogQHJldHVybnMge2Jvb2xlYW59IFJl
dHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7CiAgc3dpdGNoICh0YWcpIHsKICAgIGNhc2UgZGF0YVZpZXdUYWc6CiAgICAgIGlmIChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoIHx8IG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAg
ICAgIH0KCiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7CiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyOwoKICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6CiAgICAgIGlmIChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoIHx8ICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRydWU7CgogICAgY2FzZSBib29sVGFnOgogICAgY2FzZSBkYXRlVGFnOgogICAgY2FzZSBu
dW1iZXJUYWc6CiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuCiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuCiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpOwoKICAgIGNhc2UgZXJyb3JUYWc6CiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7CgogICAgY2FzZSByZWdleHBUYWc6CiAgICBjYXNlIHN0cmluZ1RhZzoKICAgICAgLy8g
Q29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cywKICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZwogICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLgogICAgICByZXR1cm4gb2JqZWN0ID09IG90aGVyICsgJyc7CgogICAgY2FzZSBtYXBUYWc6CiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTsKCiAgICBjYXNlIHNldFRhZzoK
ICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBQQVJUSUFMX0NPTVBBUkVfRkxBRzsKICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpOwoKICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuCgoKICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTsKCiAgICAgIGlmIChzdGFja2VkKSB7CiAgICAgICAgcmV0dXJuIHN0YWNrZWQg
PT0gb3RoZXI7CiAgICAgIH0KCiAgICAgIGJpdG1hc2sgfD0gVU5PUkRFUkVEX0NPTVBBUkVfRkxBRzsgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuCgogICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7CiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTsKICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7CiAgICAg
IHJldHVybiByZXN1bHQ7CgogICAgY2FzZSBzeW1ib2xUYWc6CiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7CiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7CiAgICAgIH0KCiAgfQoKICByZXR1cm4gZmFsc2U7Cn0KLyoqCiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yCiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy4KICoKICogQHByaXZhdGUKICogQHBhcmFt
IHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy4KICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLgogKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZs
YWdzLiBTZWUgYGJhc2VJc0VxdWFsYAogKiAgZm9yIG1vcmUgZGV0YWlscy4KICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7CiAgdmFyIGlzUGFydGlhbCA9
IGJpdG1hc2sgJiBQQVJUSUFMX0NPTVBBUkVfRkxBRywKICAgICAgb2JqUHJvcHMgPSBrZXlzKG9iamVjdCksCiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCwKICAgICAgb3RoUHJvcHMgPSBrZXlzKG90aGVyKSwKICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoOwoKICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7CgogIHdoaWxlIChpbmRleC0tKSB7CiAgICB2YXIga2V5ID0gb2JqUHJv
cHNbaW5kZXhdOwoKICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9IC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC4KCgogIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7CgogIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHsKICAgIHJldHVybiBzdGFja2VkID09IG90aGVyOwogIH0KCiAgdmFyIHJlc3VsdCA9IHRydWU7CiAgc3RhY2suc2V0KG9iamVjdCwg
b3RoZXIpOwogIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTsKICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7CgogIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7CiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07CiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSwKICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07CgogICAgaWYgKGN1c3RvbWl6ZXIpIHsKICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2sp
IDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spOwogICAgfSAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS4KCgogICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZCA/IG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykgOiBjb21wYXJlZCkpIHsKICAgICAgcmVzdWx0ID0gZmFsc2U7CiAgICAgIGJy
ZWFrOwogICAgfQoKICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTsKICB9CgogIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7CiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvciwKICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7IC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLgoKICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvYmpl
Y3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlciAmJiAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiYgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHsKICAgICAgcmVzdWx0ID0gZmFsc2U7CiAgICB9CiAgfQoKICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTsKICBzdGFja1snZGVsZXRlJ10ob3RoZXIpOwogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLgogKgog
KiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuCiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS4KICovCgoKZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkgewogIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fOwogIHJldHVybiBpc0tleWFibGUoa2V5KSA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXSA6IGRhdGEubWFwOwp9Ci8qKgogKiBHZXRzIHRo
ZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuCiAqLwoKCmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHsKICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLAogICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoOwoKICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgIHZh
ciBrZXkgPSByZXN1bHRbbGVuZ3RoXSwKICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldOwogICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07CiAgfQoKICByZXR1cm4gcmVzdWx0Owp9Ci8qKgogKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS4KICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2Qg
dG8gZ2V0LgogKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuCiAqLwoKCmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkgewogIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTsKICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkOwp9Ci8qKgogKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1
ZXJ5LgogKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLgogKi8KCgp2YXIgZ2V0VGFnID0gYmFzZUdldFRhZzsgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEsCi8vIGZvciBkYXRhIHZpZXdzIGluIEVkZ2UgPCAxNCwgYW5kIHByb21pc2VzIGluIE5vZGUuanMuCgppZiAoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZyB8fCBNYXAgJiYgZ2V0VGFnKG5ldyBN
YXAoKSkgIT0gbWFwVGFnIHx8IFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnIHx8IFNldCAmJiBnZXRUYWcobmV3IFNldCgpKSAhPSBzZXRUYWcgfHwgV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXAoKSkgIT0gd2Vha01hcFRhZykgewogIGdldFRhZyA9IGZ1bmN0aW9uIGdldFRhZyh2YWx1ZSkgewogICAgdmFyIHJlc3VsdCA9IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpLAogICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1
bmRlZmluZWQsCiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6IHVuZGVmaW5lZDsKCiAgICBpZiAoY3RvclN0cmluZykgewogICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHsKICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzoKICAgICAgICAgIHJldHVybiBkYXRhVmlld1RhZzsKCiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOgogICAgICAgICAgcmV0dXJuIG1hcFRhZzsKCiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzoKICAgICAgICAgIHJldHVybiBwcm9taXNlVGFnOwoKICAg
ICAgICBjYXNlIHNldEN0b3JTdHJpbmc6CiAgICAgICAgICByZXR1cm4gc2V0VGFnOwoKICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOgogICAgICAgICAgcmV0dXJuIHdlYWtNYXBUYWc7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gcmVzdWx0OwogIH07Cn0KLyoqCiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuCiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRv
IGNoZWNrLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykgewogIHBhdGggPSBpc0tleShwYXRoLCBvYmplY3QpID8gW3BhdGhdIDogY2FzdFBhdGgocGF0aCk7CiAgdmFyIHJlc3VsdCwKICAgICAgaW5kZXggPSAtMSwKICAgICAgbGVuZ3RoID0gcGF0aC5sZW5n
dGg7CgogIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pOwoKICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkgewogICAgICBicmVhazsKICAgIH0KCiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTsKICB9CgogIGlmIChyZXN1bHQpIHsKICAgIHJldHVybiByZXN1bHQ7CiAgfQoKICB2YXIgbGVuZ3RoID0gb2JqZWN0ID8gb2JqZWN0Lmxlbmd0aCA6IDA7CiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0
aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiYgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAg
aWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkgewogIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDsKICByZXR1cm4gISFsZW5ndGggJiYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiYgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aDsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0
eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHsKICBpZiAoaXNBcnJheSh2YWx1ZSkpIHsKICAgIHJldHVybiBm
YWxzZTsKICB9CgogIHZhciB0eXBlID0gX3R5cGVvZih2YWx1ZSk7CgogIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHwgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fCBvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KTsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1
ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkgewogIHZhciB0eXBlID0gX3R5cGVvZih2YWx1ZSk7CgogIHJldHVybiB0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3lt
Ym9sJyB8fCB0eXBlID09ICdib29sZWFuJyA/IHZhbHVlICE9PSAnX19wcm90b19fJyA6IHZhbHVlID09PSBudWxsOwp9Ci8qKgogKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHsKICByZXR1cm4gISFtYXNr
U3JjS2V5ICYmIG1hc2tTcmNLZXkgaW4gZnVuYzsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7CiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciwKICAg
ICAgcHJvdG8gPSB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlIHx8IG9iamVjdFByb3RvOwogIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87Cn0KLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Ig
c3RyaWN0CiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHsKICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7Cn0KLyoqCiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZQogKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge3N0cmluZ30ga2V5
IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC4KICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHsKICByZXR1cm4gZnVuY3Rpb24gKG9iamVjdCkgewogICAgaWYgKG9iamVjdCA9PSBudWxsKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1Zh
bHVlICYmIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IGtleSBpbiBPYmplY3Qob2JqZWN0KSk7CiAgfTsKfQovKioKICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC4KICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LgogKi8KCgp2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZShmdW5jdGlvbiAoc3RyaW5nKSB7CiAgc3RyaW5nID0gdG9T
dHJpbmcoc3RyaW5nKTsKICB2YXIgcmVzdWx0ID0gW107CgogIGlmIChyZUxlYWRpbmdEb3QudGVzdChzdHJpbmcpKSB7CiAgICByZXN1bHQucHVzaCgnJyk7CiAgfQoKICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlciwgcXVvdGUsIHN0cmluZykgewogICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogbnVtYmVyIHx8IG1hdGNoKTsKICB9KTsKICByZXR1cm4gcmVzdWx0Owp9KTsKLyoqCiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8g
YSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC4KICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS4KICovCgpmdW5jdGlvbiB0b0tleSh2YWx1ZSkgewogIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfQoKICB2YXIgcmVzdWx0ID0gdmFsdWUgKyAnJzsKICByZXR1cm4gcmVzdWx0ID09ICcw
JyAmJiAxIC8gdmFsdWUgPT0gLUlORklOSVRZID8gJy0wJyA6IHJlc3VsdDsKfQovKioKICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcHJvY2Vzcy4KICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuCiAqLwoKCmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHsKICBpZiAoZnVuYyAhPSBudWxsKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVu
Yyk7CiAgICB9IGNhdGNoIChlKSB7fQoKICAgIHRyeSB7CiAgICAgIHJldHVybiBmdW5jICsgJyc7CiAgICB9IGNhdGNoIChlKSB7fQogIH0KCiAgcmV0dXJuICcnOwp9Ci8qKgogKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcKICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlcwogKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIGBj
b2xsZWN0aW9uYC4gVGhlIGNvcnJlc3BvbmRpbmcKICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlCiAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDAuMS4wCiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uCiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zl
ci4KICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldCiAqICBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuCiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuCiAqIEBleGFtcGxlCiAqCiAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpOwogKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi4zXSB9CiAqCiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLgogKiBfLmdyb3VwQnko
WydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTsKICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9CiAqLwoKCnZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbiAocmVzdWx0LCB2YWx1ZSwga2V5KSB7CiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7CiAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTsKICB9IGVsc2UgewogICAgcmVzdWx0W2tleV0gPSBbdmFsdWVdOwogIH0KfSk7Ci8qKgogKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhh
dCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpcwogKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlCiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudAogKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYAogKiBpcyBpbnZva2VkIHdp
dGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4KICoKICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZAogKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWAKICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGUKICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9l
Y21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdCkKICogbWV0aG9kIGludGVyZmFjZSBvZiBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDAuMS4wCiAqIEBjYXRlZ29yeSBGdW5jdGlvbgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuCiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJl
c29sdmUgdGhlIGNhY2hlIGtleS4KICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uCiAqIEBleGFtcGxlCiAqCiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07CiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTsKICoKICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7CiAqIHZhbHVlcyhvYmplY3QpOwogKiAvLyA9PiBbMSwgMl0KICoKICogdmFsdWVzKG90aGVyKTsKICogLy8gPT4gWzMsIDRdCiAqCiAqIG9iamVjdC5hID0gMjsKICog
dmFsdWVzKG9iamVjdCk7CiAqIC8vID0+IFsxLCAyXQogKgogKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS4KICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pOwogKiB2YWx1ZXMob2JqZWN0KTsKICogLy8gPT4gWydhJywgJ2InXQogKgogKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLgogKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwOwogKi8KCmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHsKICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCByZXNvbHZlciAmJiB0
eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpOwogIH0KCiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24gbWVtb2l6ZWQoKSB7CiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywKICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSwKICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlOwoKICAgIGlmIChjYWNoZS5oYXMoa2V5KSkgewogICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7CiAgICB9
CgogICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7CiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKSgpOwogIHJldHVybiBtZW1vaXplZDsKfSAvLyBBc3NpZ24gY2FjaGUgdG8gYF8ubWVtb2l6ZWAuCgoKbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlOwovKioKICogUGVyZm9ybXMgYQogKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1p
bnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKQogKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS4KICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVy
bnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07CiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07CiAqCiAqIF8uZXEob2JqZWN0LCBvYmplY3QpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uZXEob2JqZWN0LCBvdGhlcik7CiAqIC8vID0+IGZhbHNlCiAqCiAqIF8uZXEoJ2EnLCAnYScpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7CiAqIC8vID0+IGZhbHNlCiAqCiAqIF8uZXEo
TmFOLCBOYU4pOwogKiAvLyA9PiB0cnVlCiAqLwoKZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7CiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jv
b2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LAogKiAgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTsKICogLy8gPT4gZmFsc2UKICovCgoKZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHsKICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0
cmljdCBtb2RlLgogIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmICghcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpIHx8IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFyZ3NUYWcpOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgTGFu
ZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc0FycmF5KFsxLCAyLCAzXSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pOwogKiAvLyA9PiBmYWxzZQogKgogKiBfLmlzQXJyYXkoJ2FiYycpOwogKiAvLyA9PiBmYWxzZQogKgogKiBfLmlzQXJyYXkoXy5ub29wKTsKICogLy8gPT4g
ZmFsc2UKICovCgoKdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5OwovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQncwogKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yCiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICog
QHNpbmNlIDQuMC4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpOwogKiAvLyA9
PiB0cnVlCiAqCiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTsKICogLy8gPT4gZmFsc2UKICovCgpmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkgewogIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpOwp9Ci8qKgogKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgCiAqIGlzIGFuIG9iamVjdC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4w
LjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LAogKiAgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzQXJyYXlMaWtl
T2JqZWN0KCdhYmMnKTsKICogLy8gPT4gZmFsc2UKICoKICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApOwogKiAvLyA9PiBmYWxzZQogKi8KCgpmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgewogIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgTGFu
ZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzRnVuY3Rpb24oXyk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc0Z1bmN0aW9uKC9hYmMvKTsKICogLy8gPT4gZmFsc2UKICovCgoKZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkgewogIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRo
ZSBgdHlwZW9mYCBvcGVyYXRvcgogIC8vIGluIFNhZmFyaSA4LTkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXkgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy4KICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJzsKICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZzsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC4KICoKICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3Nl
bHkgYmFzZWQgb24KICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNMZW5ndGgo
Myk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTsKICogLy8gPT4gZmFsc2UKICoKICogXy5pc0xlbmd0aChJbmZpbml0eSk7CiAqIC8vID0+IGZhbHNlCiAqCiAqIF8uaXNMZW5ndGgoJzMnKTsKICogLy8gPT4gZmFsc2UKICovCgoKZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHsKICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjsKfQovKioKICogQ2hlY2tzIGlmIGB2
YWx1ZWAgaXMgdGhlCiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcykKICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKQogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1
ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNPYmplY3Qoe30pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0KF8ubm9vcCk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdChudWxsKTsKICogLy8gPT4gZmFsc2UKICovCgoKZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHsKICB2YXIgdHlw
ZSA9IF90eXBlb2YodmFsdWUpOwoKICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGAKICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiAib2JqZWN0Ii4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFs
dWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNPYmplY3RMaWtlKHt9KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7CiAqIC8vID0+IGZhbHNlCiAqCiAqIF8uaXNPYmplY3RMaWtlKG51bGwpOwogKiAvLyA9PiBmYWxzZQogKi8KCgpmdW5jdGlvbiBpc09iamVj
dExpa2UodmFsdWUpIHsKICByZXR1cm4gISF2YWx1ZSAmJiBfdHlwZW9mKHZhbHVlKSA9PSAnb2JqZWN0JzsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDQuMC4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJv
bCwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7CiAqIC8vID0+IHRydWUKICoKICogXy5pc1N5bWJvbCgnYWJjJyk7CiAqIC8vID0+IGZhbHNlCiAqLwoKCmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7CiAgcmV0dXJuIF90eXBlb2YodmFsdWUpID09ICdzeW1ib2wnIHx8IGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEg
dHlwZWQgYXJyYXkuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDMuMC4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzVHlwZWRBcnJheShbXSk7CiAqIC8vID0+IGZhbHNl
CiAqLwoKCnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTsKLyoqCiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgCiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSA0LjAuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0g
eyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLgogKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuCiAqIEBleGFtcGxlCiAqCiAqIF8udG9TdHJpbmcobnVsbCk7CiAqIC8vID0+ICcnCiAqCiAqIF8udG9TdHJpbmcoLTApOwogKiAvLyA9PiAnLTAnCiAqCiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTsKICogLy8gPT4gJzEsMiwzJwogKi8KCmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7CiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7Cn0KLyoqCiAqIEdldHMg
dGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzCiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAzLjcuMAogKiBAY2F0ZWdvcnkgT2JqZWN0CiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS4KICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC4KICogQHBh
cmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLgogKiBAZXhhbXBsZQogKgogKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9OwogKgogKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpOwogKiAvLyA9PiAzCiAqCiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pOwogKiAvLyA9PiAzCiAqCiAqIF8uZ2V0KG9iamVjdCwg
J2EuYi5jJywgJ2RlZmF1bHQnKTsKICogLy8gPT4gJ2RlZmF1bHQnCiAqLwoKCmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkgewogIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTsKICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7Cn0KLyoqCiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLgogKgogKiBAc3RhdGljCiAq
IEBtZW1iZXJPZiBfCiAqIEBzaW5jZSA0LjAuMAogKiBAY2F0ZWdvcnkgT2JqZWN0CiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS4KICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7CiAqCiAqIF8uaGFzSW4o
b2JqZWN0LCAnYScpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7CiAqIC8vID0+IHRydWUKICoKICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpOwogKiAvLyA9PiBmYWxzZQogKi8KCgpmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHsKICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7Cn0KLyoqCiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBl
bnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLgogKgogKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZQogKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpCiAqIGZvciBtb3JlIGRldGFpbHMuCiAqCiAqIEBzdGF0aWMKICogQHNpbmNlIDAuMS4wCiAqIEBtZW1iZXJPZiBfCiAqIEBjYXRlZ29yeSBPYmplY3QKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0
IHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLgogKiBAZXhhbXBsZQogKgogKiBmdW5jdGlvbiBGb28oKSB7CiAqICAgdGhpcy5hID0gMTsKICogICB0aGlzLmIgPSAyOwogKiB9CiAqCiAqIEZvby5wcm90b3R5cGUuYyA9IDM7CiAqCiAqIF8ua2V5cyhuZXcgRm9vKTsKICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKQogKgogKiBfLmtleXMoJ2hpJyk7CiAqIC8vID0+IFsnMCcsICcxJ10KICovCgoKZnVuY3Rp
b24ga2V5cyhvYmplY3QpIHsKICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7Cn0KLyoqCiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLgogKgogKiBAc3RhdGljCiAqIEBzaW5jZSAwLjEuMAogKiBAbWVtYmVyT2YgXwogKiBAY2F0ZWdvcnkgVXRpbAogKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS4KICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC4KICogQGV4YW1wbGUKICoKICogdmFy
IG9iamVjdCA9IHsgJ2EnOiAxIH07CiAqCiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTsKICogLy8gPT4gdHJ1ZQogKi8KCgpmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkgewogIHJldHVybiB2YWx1ZTsKfQovKioKICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAyLjQuMAogKiBAY2F0ZWdvcnkgVXRpbAogKiBAcGFyYW0ge0FycmF5fHN0cmlu
Z30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LgogKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi4KICogQGV4YW1wbGUKICoKICogdmFyIG9iamVjdHMgPSBbCiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSwKICogICB7ICdhJzogeyAnYic6IDEgfSB9CiAqIF07CiAqCiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTsKICogLy8gPT4gWzIsIDFdCiAqCiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkp
LCAnYS5iJyk7CiAqIC8vID0+IFsxLCAyXQogKi8KCgpmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7CiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7Cn0KCm1vZHVsZS5leHBvcnRzID0gZ3JvdXBCeTsKCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQoK
fSx7fV0sMzE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0
eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgovKioKICogbG9kYXNoIDMuMC4zIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPgogKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9Im5wbSIgLW8gLi9gCiAqIENvcHlyaWdodCAyMDEyLTIwMTYgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rv
am9mb3VuZGF0aW9uLm9yZy8+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCAyMDA5LTIwMTYgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnMKICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT4KICovCgovKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovCnZhciBib29sVGFnID0g
J1tvYmplY3QgQm9vbGVhbl0nOwovKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovCgp2YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlOwovKioKICogVXNlZCB0byByZXNvbHZlIHRoZSBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZykKICogb2YgdmFsdWVzLgogKi8KCnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nOwovKioKICogQ2hlY2tzIGlmIGB2
YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc0Jvb2xlYW4oZmFsc2UpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNCb29sZWFuKG51
bGwpOwogKiAvLyA9PiBmYWxzZQogKi8KCmZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkgewogIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHwgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBib29sVGFnOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGAKICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiAib2JqZWN0Ii4KICoKICogQHN0YXRp
YwogKiBAbWVtYmVyT2YgXwogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc09iamVjdExpa2Uoe30pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdExpa2UoXy5ub29wKTsKICogLy8gPT4gZmFsc2UKICoK
ICogXy5pc09iamVjdExpa2UobnVsbCk7CiAqIC8vID0+IGZhbHNlCiAqLwoKCmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkgewogIHJldHVybiAhIXZhbHVlICYmIF90eXBlb2YodmFsdWUpID09ICdvYmplY3QnOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGlzQm9vbGVhbjsKCn0se31dLDMyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBT
eW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4g
X3R5cGVvZihvYmopOyB9CgovKioKICogTG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPgogKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9Im5wbSIgLW8gLi9gCiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+CiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT4KICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2Nv
cmVqcy5vcmcvTElDRU5TRT4KICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzCiAqLwoKLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovCnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwOwovKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovCgp2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7Ci8q
KiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqLwoKdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSwKICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyOwovKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi8KCnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTsKLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqLwoKdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJywKICAg
IGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJywKICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLAogICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJywKICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsCiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsCiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJywKICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsCiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJywKICAgIG51bWJlclRhZyA9ICdbb2JqZWN0
IE51bWJlcl0nLAogICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJywKICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLAogICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJywKICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJywKICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLAogICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsCiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJywKICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLAogICAgdW5kZWZpbmVkVGFnID0g
J1tvYmplY3QgVW5kZWZpbmVkXScsCiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nOwp2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLAogICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLAogICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLAogICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLAogICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLAogICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScs
CiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJywKICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLAogICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJywKICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsCiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nOwovKioKICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYAogKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYy
LzcuMC8jc2VjLXBhdHRlcm5zKS4KICovCgp2YXIgcmVSZWdFeHBDaGFyID0gL1tcXF4kLiorPygpW1xde318XS9nOwovKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovCgp2YXIgcmVJc0hvc3RDdG9yID0gL15cW29iamVjdCAuKz9Db25zdHJ1Y3RvclxdJC87Ci8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi8KCnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxkKikkLzsKLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlw
ZWQgYXJyYXlzLiAqLwoKdmFyIHR5cGVkQXJyYXlUYWdzID0ge307CnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7
CnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID0gdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWdd
ID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID0gdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTsKLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi8KCnZhciBmcmVlR2xvYmFsID0gKHR5cGVvZiBnbG9iYWwgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKGdsb2JhbCkpID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmpl
Y3QgJiYgZ2xvYmFsOwovKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqLwoKdmFyIGZyZWVTZWxmID0gKHR5cGVvZiBzZWxmID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihzZWxmKSkgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7Ci8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqLwoKdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7Ci8qKiBE
ZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovCgp2YXIgZnJlZUV4cG9ydHMgPSAodHlwZW9mIGV4cG9ydHMgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKGV4cG9ydHMpKSA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7Ci8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi8KCnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgKHR5cGVvZiBtb2R1bGUgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9m
KG1vZHVsZSkpID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTsKLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi8KCnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzOwovKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi8KCnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9j
ZXNzOwovKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi8KCnZhciBub2RlVXRpbCA9IGZ1bmN0aW9uICgpIHsKICB0cnkgewogICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpOwogIH0gY2F0Y2ggKGUpIHt9Cn0oKTsKLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi8KCgp2YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTsKLyoqCiAqIEEgc3BlY2lhbGl6
ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvcgogKiBpdGVyYXRlZSBzaG9ydGhhbmRzLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuCiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS4KICovCgpmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwg
cHJlZGljYXRlKSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLAogICAgICByZXNJbmRleCA9IDAsCiAgICAgIHJlc3VsdCA9IFtdOwoKICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdOwoKICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHsKICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7CiAgICB9CiAgfQoKICByZXR1cm4gcmVzdWx0Owp9Ci8qKgogKiBBcHBlbmRz
IHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LgogKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuCiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLgogKi8KCgpmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykgewogIHZhciBpbmRleCA9IC0xLAogICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLAogICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7
CgogIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdOwogIH0KCiAgcmV0dXJuIGFycmF5Owp9Ci8qKgogKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlCiAqIHNob3J0aGFuZHMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci4KICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5j
dGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjaywKICogIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHsKICB2YXIgaW5kZXggPSAtMSwKICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7CgogIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwg
aW5kZXgsIGFycmF5KSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CgogIHJldHVybiBmYWxzZTsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcwogKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC4KICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9u
IGludm9rZWQgcGVyIGl0ZXJhdGlvbi4KICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLgogKi8KCgpmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHsKICB2YXIgaW5kZXggPSAtMSwKICAgICAgcmVzdWx0ID0gQXJyYXkobik7CgogIHdoaWxlICgrK2luZGV4IDwgbikgewogICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTsKICB9CgogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBv
cnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLgogKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgcmV0dXJuIGZ1bmModmFsdWUpOwogIH07Cn0KLyoqCiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy4K
ICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS4KICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkgewogIHJldHVybiBjYWNoZS5oYXMoa2V5KTsKfQovKioKICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVj
dGAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LgogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLgogKi8KCgpmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkgewogIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldOwp9Ci8qKgogKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBh
aXJzLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC4KICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuCiAqLwoKCmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTsKICBtYXAuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkgewogICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdOwogIH0pOwogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAq
IENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS4KICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uCiAqLwoKCmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7CiAgcmV0dXJuIGZ1bmN0
aW9uIChhcmcpIHsKICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTsKICB9Owp9Ci8qKgogKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC4KICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuCiAqLwoKCmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTsKICBzZXQuZm9yRWFjaChmdW5j
dGlvbiAodmFsdWUpIHsKICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlOwogIH0pOwogIHJldHVybiByZXN1bHQ7Cn0KLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqLwoKCnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLAogICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLAogICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlOwovKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovCgp2YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29y
ZS1qc19zaGFyZWRfXyddOwovKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovCgp2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nOwovKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi8KCnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5OwovKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqLwoKdmFyIG1hc2tTcmNLZXkgPSBmdW5jdGlvbiAoKSB7
CiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTsKICByZXR1cm4gdWlkID8gJ1N5bWJvbChzcmMpXzEuJyArIHVpZCA6ICcnOwp9KCk7Ci8qKgogKiBVc2VkIHRvIHJlc29sdmUgdGhlCiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKQogKiBvZiB2YWx1ZXMuCiAqLwoKCnZhciBuYXRpdmVPYmplY3RU
b1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nOwovKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqLwoKdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICsgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFwkJicpLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFwoKXwgZm9yIC4rPyg/PVxcXF0pL2csICckMS4qPycpICsgJyQnKTsKLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovCgp2YXIgQnVmZmVy
ID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLAogICAgX1N5bWJvbCA9IHJvb3QuU3ltYm9sLAogICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSwKICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsCiAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSwKICAgIHN5bVRvU3RyaW5nVGFnID0gX1N5bWJvbCA/IF9TeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7Ci8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9z
ZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi8KCnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scywKICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLAogICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7Ci8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi8KCnZhciBEYXRhVmlldyA9IGdldE5hdGl2
ZShyb290LCAnRGF0YVZpZXcnKSwKICAgIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksCiAgICBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyksCiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLAogICAgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpLAogICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpOwovKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqLwoKdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291
cmNlKERhdGFWaWV3KSwKICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLAogICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSwKICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLAogICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTsKLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovCgp2YXIgc3ltYm9sUHJvdG8gPSBfU3ltYm9sID8gX1N5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsCiAgICBzeW1ib2xW
YWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkOwovKioKICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LgogKgogKiBAcHJpdmF0ZQogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuCiAqLwoKZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDsKICB0aGlzLmNsZWFyKCk7CgogIHdoaWxl
ICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTsKICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7CiAgfQp9Ci8qKgogKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBjbGVhcgogKiBAbWVtYmVyT2YgSGFzaAogKi8KCgpmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7CiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9OwogIHRoaXMuc2l6ZSA9IDA7Cn0K
LyoqCiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBkZWxldGUKICogQG1lbWJlck9mIEhhc2gKICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LgogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBoYXNoRGVsZXRl
KGtleSkgewogIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07CiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwOwogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBnZXQKICogQG1lbWJlck9mIEhhc2gKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuCiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS4KICovCgoK
ZnVuY3Rpb24gaGFzaEdldChrZXkpIHsKICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187CgogIGlmIChuYXRpdmVDcmVhdGUpIHsKICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07CiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDsKICB9CgogIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7Cn0KLyoqCiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy4KICoKICogQHByaXZhdGUKICog
QG5hbWUgaGFzCiAqIEBtZW1iZXJPZiBIYXNoCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7CiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fOwogIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5
KTsKfQovKioKICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBzZXQKICogQG1lbWJlck9mIEhhc2gKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4KICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS4KICovCgoKZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7CiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fOwogIHRoaXMu
c2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7CiAgZGF0YVtrZXldID0gbmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlOwogIHJldHVybiB0aGlzOwp9IC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC4KCgpIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjsKSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTsKSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDsKSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhczsKSGFzaC5wcm90b3R5cGUu
c2V0ID0gaGFzaFNldDsKLyoqCiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuCiAqCiAqIEBwcml2YXRlCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS4KICovCgpmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykgewogIHZhciBpbmRleCA9IC0xLAogICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7CiAgdGhpcy5jbGVhcigpOwoKICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgdmFy
IGVudHJ5ID0gZW50cmllc1tpbmRleF07CiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pOwogIH0KfQovKioKICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS4KICoKICogQHByaXZhdGUKICogQG5hbWUgY2xlYXIKICogQG1lbWJlck9mIExpc3RDYWNoZQogKi8KCgpmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHsKICB0aGlzLl9fZGF0YV9fID0gW107CiAgdGhpcy5zaXplID0gMDsKfQovKioKICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3Qg
Y2FjaGUuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGRlbGV0ZQogKiBAbWVtYmVyT2YgTGlzdENhY2hlCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHsKICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sCiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7Cgog
IGlmIChpbmRleCA8IDApIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7CgogIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHsKICAgIGRhdGEucG9wKCk7CiAgfSBlbHNlIHsKICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTsKICB9CgogIC0tdGhpcy5zaXplOwogIHJldHVybiB0cnVlOwp9Ci8qKgogKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC4KICoKICogQHByaXZhdGUKICogQG5hbWUgZ2V0CiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGUKICog
QHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuCiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS4KICovCgoKZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkgewogIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywKICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTsKICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07Cn0KLyoqCiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy4KICoK
ICogQHByaXZhdGUKICogQG5hbWUgaGFzCiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkgewogIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xOwp9Ci8qKgogKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlg
IHRvIGB2YWx1ZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIHNldAogKiBAbWVtYmVyT2YgTGlzdENhY2hlCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LgogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuCiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuCiAqLwoKCmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7CiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLAogICAgICBpbmRleCA9IGFzc29jSW5k
ZXhPZihkYXRhLCBrZXkpOwoKICBpZiAoaW5kZXggPCAwKSB7CiAgICArK3RoaXMuc2l6ZTsKICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pOwogIH0gZWxzZSB7CiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIHRoaXM7Cn0gLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuCgoKTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyOwpMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTsKTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0
Q2FjaGVHZXQ7Ckxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzOwpMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDsKLyoqCiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy4KICoKICogQHByaXZhdGUKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLgogKi8KCmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHsKICB2YXIgaW5kZXggPSAtMSwKICAgICAgbGVu
Z3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoOwogIHRoaXMuY2xlYXIoKTsKCiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdOwogICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTsKICB9Cn0KLyoqCiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC4KICoKICogQHByaXZhdGUKICogQG5hbWUgY2xlYXIKICogQG1lbWJlck9mIE1hcENhY2hlCiAqLwoKCmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7CiAg
dGhpcy5zaXplID0gMDsKICB0aGlzLl9fZGF0YV9fID0gewogICAgJ2hhc2gnOiBuZXcgSGFzaCgpLAogICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSkoKSwKICAgICdzdHJpbmcnOiBuZXcgSGFzaCgpCiAgfTsKfQovKioKICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC4KICoKICogQHByaXZhdGUKICogQG5hbWUgZGVsZXRlCiAqIEBtZW1iZXJPZiBNYXBDYWNoZQogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS4KICogQHJldHVybnMge2Jv
b2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHsKICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpOwogIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDsKICByZXR1cm4gcmVzdWx0Owp9Ci8qKgogKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBnZXQKICogQG1lbWJlck9mIE1hcENhY2hlCiAqIEBwYXJhbSB7
c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LgogKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuCiAqLwoKCmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkgewogIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7Cn0KLyoqCiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBoYXMKICogQG1lbWJlck9mIE1hcENhY2hlCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkg
dG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkgewogIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7Cn0KLyoqCiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBzZXQKICogQG1lbWJlck9mIE1hcENhY2hlCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUg
dG8gc2V0LgogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuCiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS4KICovCgoKZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkgewogIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLAogICAgICBzaXplID0gZGF0YS5zaXplOwogIGRhdGEuc2V0KGtleSwgdmFsdWUpOwogIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxOwogIHJldHVybiB0aGlzOwp9IC8vIEFkZCBtZXRob2RzIHRv
IGBNYXBDYWNoZWAuCgoKTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjsKTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlOwpNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7Ck1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhczsKTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0OwovKioKICoKICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy4KICoKICogQHByaXZhdGUKICog
QGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuCiAqLwoKZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7CiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZSgpOwoKICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7CiAgfQp9Ci8qKgogKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hl
LgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBhZGQKICogQG1lbWJlck9mIFNldENhY2hlCiAqIEBhbGlhcyBwdXNoCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLgogKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS4KICovCgoKZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHsKICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpOwoKICByZXR1cm4gdGhpczsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hl
LgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBoYXMKICogQG1lbWJlck9mIFNldENhY2hlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHsKICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpOwp9IC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuCgoKU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNl
dENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7ClNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhczsKLyoqCiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLgogKgogKiBAcHJpdmF0ZQogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuCiAqLwoKZnVuY3Rpb24gU3RhY2soZW50cmllcykgewogIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUo
ZW50cmllcyk7CiAgdGhpcy5zaXplID0gZGF0YS5zaXplOwp9Ci8qKgogKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay4KICoKICogQHByaXZhdGUKICogQG5hbWUgY2xlYXIKICogQG1lbWJlck9mIFN0YWNrCiAqLwoKCmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7CiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoKTsKICB0aGlzLnNpemUgPSAwOwp9Ci8qKgogKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGRl
bGV0ZQogKiBAbWVtYmVyT2YgU3RhY2sKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7CiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLAogICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpOwogIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTsKICByZXR1cm4gcmVzdWx0Owp9Ci8q
KgogKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGdldAogKiBAbWVtYmVyT2YgU3RhY2sKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuCiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS4KICovCgoKZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7CiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7Cn0KLyoqCiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuCiAqCiAqIEBw
cml2YXRlCiAqIEBuYW1lIGhhcwogKiBAbWVtYmVyT2YgU3RhY2sKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7CiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7Cn0KLyoqCiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBu
YW1lIHNldAogKiBAbWVtYmVyT2YgU3RhY2sKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4KICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuCiAqLwoKCmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHsKICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187CgogIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7CiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0
YV9fOwoKICAgIGlmICghTWFwIHx8IHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSB7CiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTsKICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTsKICB9CgogIGRhdGEuc2V0KGtleSwgdmFsdWUpOwogIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTsKICByZXR1cm4gdGhpczsKfSAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLgoKClN0
YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7ClN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTsKU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0OwpTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7ClN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDsKLyoqCiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUg
dG8gcXVlcnkuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy4KICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy4KICovCgpmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHsKICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSwKICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLAogICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlz
QnVmZmVyKHZhbHVlKSwKICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksCiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSwKICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sCiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7CgogIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgewogICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHku
Y2FsbCh2YWx1ZSwga2V5KSkgJiYgIShza2lwSW5kZXhlcyAmJiAoIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS4KICAgIGtleSA9PSAnbGVuZ3RoJyB8fCAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy4KICAgIGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykgfHwgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlw
ZWQgYXJyYXlzLgogICAgaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSB8fCAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuCiAgICBpc0luZGV4KGtleSwgbGVuZ3RoKSkpKSB7CiAgICAgIHJlc3VsdC5wdXNoKGtleSk7CiAgICB9CiAgfQoKICByZXR1cm4gcmVzdWx0Owp9Ci8qKgogKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuCiAqCiAqIEBwcml2YXRlCiAq
IEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LgogKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuCiAqLwoKCmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7CiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKCiAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkgewogICAgICByZXR1cm4g
bGVuZ3RoOwogICAgfQogIH0KCiAgcmV0dXJuIC0xOwp9Ci8qKgogKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXMKICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kCiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS4KICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMg
VGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC4KICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC4KICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy4KICovCgoKZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHsKICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTsKICByZXR1cm4gaXNBcnJh
eShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLgogKi8KCgpmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7CiAgaWYgKHZhbHVlID09
IG51bGwpIHsKICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZzsKICB9CgogIHJldHVybiBzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpID8gZ2V0UmF3VGFnKHZhbHVlKSA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xl
YW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LAogKi8KCgpmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHsKICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnOwp9Ci8qKgogKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zCiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7
Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4KICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvbgogKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvbgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy4KICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBg
dmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHsKICBpZiAodmFsdWUgPT09IG90aGVyKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0
TGlrZShvdGhlcikpIHsKICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyOwogIH0KCiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7Cn0KLyoqCiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXMKICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMg
d2l0aCBjaXJjdWxhcgogKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS4KICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS4KICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6
ZSBjb21wYXJpc29ucy4KICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLgogKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0
bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykgewogIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSwKICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSwKICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLAogICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTsKICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZzsKICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRh
ZyA6IG90aFRhZzsKICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLAogICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsCiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7CgogIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkgewogICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIG9iaklzQXJyID0gdHJ1ZTsKICAgIG9iaklzT2JqID0gZmFsc2U7CiAgfQoKICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikgewog
ICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpOwogICAgcmV0dXJuIG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7CiAgfQoKICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7CiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNP
YmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLAogICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpOwoKICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7CiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCwKICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjsKICAg
ICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpOwogICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7CiAgICB9CiAgfQoKICBpZiAoIWlzU2FtZVRhZykgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpOwogIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7Cn0KLyoqCiAqIFRoZSBiYXNlIGlt
cGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLAogKiAgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHsKICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9
CgogIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yOwogIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlw
ZWQgYXJyYXksIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkgewogIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0
IHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLgogKi8KCgpmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHsKICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHsKICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7CiAgfQoKICB2YXIgcmVzdWx0ID0gW107CgogIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkgewogICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7CiAgICAgIHJl
c3VsdC5wdXNoKGtleSk7CiAgICB9CiAgfQoKICByZXR1cm4gcmVzdWx0Owp9Ci8qKgogKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yCiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLgogKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0
bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy4KICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuCiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMg
YHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7CiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRywKICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLAogICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7CgogIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExl
bmd0aCA+IGFyckxlbmd0aCkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9IC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC4KCgogIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTsKCiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkgewogICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7CiAgfQoKICB2YXIgaW5kZXggPSAtMSwKICAgICAgcmVzdWx0ID0gdHJ1ZSwKICAgICAgc2VlbiA9IGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHID8gbmV3IFNldENhY2hlKCkgOiB1bmRlZmluZWQ7
CiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7CiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7IC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy4KCiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHsKICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSwKICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTsKCiAgICBpZiAoY3VzdG9taXplcikgewogICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWwgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2sp
IDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTsKICAgIH0KCiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkgewogICAgICBpZiAoY29tcGFyZWQpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgcmVzdWx0ID0gZmFsc2U7CiAgICAgIGJyZWFrOwogICAgfSAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLgoKCiAgICBpZiAoc2VlbikgewogICAgICBpZiAoIWFycmF5U29tZShv
dGhlciwgZnVuY3Rpb24gKG90aFZhbHVlLCBvdGhJbmRleCkgewogICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkgewogICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7CiAgICAgICAgfQogICAgICB9KSkgewogICAgICAgIHJlc3VsdCA9IGZhbHNlOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9IGVsc2UgaWYgKCEoYXJyVmFsdWUg
PT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHsKICAgICAgcmVzdWx0ID0gZmFsc2U7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTsKICBzdGFja1snZGVsZXRlJ10ob3RoZXIpOwogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2YKICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC4KICoK
ICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZgogKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhl
IG9iamVjdHMgdG8gY29tcGFyZS4KICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy4KICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLgogKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2Jq
ZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHsKICBzd2l0Y2ggKHRhZykgewogICAgY2FzZSBkYXRhVmlld1RhZzoKICAgICAgaWYgKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGggfHwgb2JqZWN0LmJ5dGVPZmZz
ZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjsKICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7CgogICAgY2FzZSBhcnJheUJ1ZmZlclRhZzoKICAgICAgaWYgKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGggfHwgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICByZXR1cm4gdHJ1
ZTsKCiAgICBjYXNlIGJvb2xUYWc6CiAgICBjYXNlIGRhdGVUYWc6CiAgICBjYXNlIG51bWJlclRhZzoKICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy4KICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC4KICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7CgogICAgY2FzZSBlcnJvclRhZzoKICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTsK
CiAgICBjYXNlIHJlZ2V4cFRhZzoKICAgIGNhc2Ugc3RyaW5nVGFnOgogICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLAogICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nCiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuCiAgICAgIHJldHVybiBvYmplY3QgPT0gb3RoZXIgKyAnJzsKCiAgICBjYXNlIG1hcFRhZzoK
ICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5OwoKICAgIGNhc2Ugc2V0VGFnOgogICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHOwogICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7CgogICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC4KCgogICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmpl
Y3QpOwoKICAgICAgaWYgKHN0YWNrZWQpIHsKICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjsKICAgICAgfQoKICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHOyAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS4KCiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTsKICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFs
RnVuYywgc3RhY2spOwogICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKCiAgICBjYXNlIHN5bWJvbFRhZzoKICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHsKICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTsKICAgICAgfQoKICB9CgogIHJldHVybiBmYWxzZTsKfQovKioKICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3IKICog
cGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS4KICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS4KICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy4KICog
QHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLgogKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFs
RnVuYywgc3RhY2spIHsKICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLAogICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSwKICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLAogICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLAogICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7CgogIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciBpbmRleCA9IG9iakxlbmd0
aDsKCiAgd2hpbGUgKGluZGV4LS0pIHsKICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07CgogICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0gLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLgoKCiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTsKCiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkgewogICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7CiAg
fQoKICB2YXIgcmVzdWx0ID0gdHJ1ZTsKICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7CiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpOwogIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDsKCiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHsKICAgIGtleSA9IG9ialByb3BzW2luZGV4XTsKICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLAogICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTsKCiAgICBpZiAoY3VzdG9taXplcikgewogICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWwgPyBjdXN0b21pemVyKG90
aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7CiAgICB9IC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLgoKCiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkID8gb2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSA6
IGNvbXBhcmVkKSkgewogICAgICByZXN1bHQgPSBmYWxzZTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpOwogIH0KCiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHsKICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLAogICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjsgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuCgogICAgaWYg
KG9iakN0b3IgIT0gb3RoQ3RvciAmJiAnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyICYmICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJiB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkgewogICAgICByZXN1bHQgPSBmYWxzZTsKICAgIH0KICB9CgogIHN0YWNrWydkZWxldGUnXShvYmplY3QpOwogIHN0YWNrWydkZWxldGUnXShvdGhlcik7CiAgcmV0dXJuIHJl
c3VsdDsKfQovKioKICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLgogKi8KCgpmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkgewogIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5
bWJvbHMpOwp9Ci8qKgogKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LgogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LgogKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuCiAqLwoKCmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHsKICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXzsKICByZXR1cm4gaXNLZXlhYmxlKGtleSkgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAn
c3RyaW5nJyA6ICdoYXNoJ10gOiBkYXRhLm1hcDsKfQovKioKICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLgogKi8KCgpmdW5jdGlvbiBnZXROYXRpdmUob2Jq
ZWN0LCBrZXkpIHsKICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7CiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDsKfQovKioKICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLgogKi8K
CgpmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHsKICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksCiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTsKCiAgdHJ5IHsKICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDsKICAgIHZhciB1bm1hc2tlZCA9IHRydWU7CiAgfSBjYXRjaCAoZSkge30KCiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpOwoKICBpZiAodW5tYXNrZWQpIHsKICAgIGlmIChpc093bikgewog
ICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7CiAgICB9IGVsc2UgewogICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddOwogICAgfQogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfQovKioKICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuCiAqLwoKCnZh
ciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbiAob2JqZWN0KSB7CiAgaWYgKG9iamVjdCA9PSBudWxsKSB7CiAgICByZXR1cm4gW107CiAgfQoKICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTsKICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbiAoc3ltYm9sKSB7CiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7CiAgfSk7Cn07Ci8qKgogKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9m
IGB2YWx1ZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLgogKi8KCnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnOyAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuCgppZiAoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRh
Vmlld1RhZyB8fCBNYXAgJiYgZ2V0VGFnKG5ldyBNYXAoKSkgIT0gbWFwVGFnIHx8IFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnIHx8IFNldCAmJiBnZXRUYWcobmV3IFNldCgpKSAhPSBzZXRUYWcgfHwgV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXAoKSkgIT0gd2Vha01hcFRhZykgewogIGdldFRhZyA9IGZ1bmN0aW9uIGdldFRhZyh2YWx1ZSkgewogICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLAogICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8g
dmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsCiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnOwoKICAgIGlmIChjdG9yU3RyaW5nKSB7CiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykgewogICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOgogICAgICAgICAgcmV0dXJuIGRhdGFWaWV3VGFnOwoKICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6CiAgICAgICAgICByZXR1cm4gbWFwVGFnOwoKICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOgogICAgICAgICAgcmV0dXJuIHBy
b21pc2VUYWc7CgogICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzoKICAgICAgICAgIHJldHVybiBzZXRUYWc7CgogICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6CiAgICAgICAgICByZXR1cm4gd2Vha01hcFRhZzsKICAgICAgfQogICAgfQoKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHBhcmFtIHtudW1iZXJ9IFtsZW5n
dGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkgewogIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDsKICByZXR1cm4gISFsZW5ndGggJiYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVl
KSkgJiYgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aDsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkgewogIHZhciB0eXBlID0g
X3R5cGVvZih2YWx1ZSk7CgogIHJldHVybiB0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyA/IHZhbHVlICE9PSAnX19wcm90b19fJyA6IHZhbHVlID09PSBudWxsOwp9Ci8qKgogKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBg
ZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHsKICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIG1hc2tTcmNLZXkgaW4gZnVuYzsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuCiAq
LwoKCmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7CiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciwKICAgICAgcHJvdG8gPSB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlIHx8IG9iamVjdFByb3RvOwogIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87Cn0KLyoqCiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252
ZXJ0LgogKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLgogKi8KCgpmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkgewogIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTsKfQovKioKICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC4KICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuCiAqLwoK
CmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHsKICBpZiAoZnVuYyAhPSBudWxsKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7CiAgICB9IGNhdGNoIChlKSB7fQoKICAgIHRyeSB7CiAgICAgIHJldHVybiBmdW5jICsgJyc7CiAgICB9IGNhdGNoIChlKSB7fQogIH0KCiAgcmV0dXJuICcnOwp9Ci8qKgogKiBQZXJmb3JtcyBhCiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pCiAqIGNvbXBh
cmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSA0LjAuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLgogKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLgogKiBA
ZXhhbXBsZQogKgogKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTsKICogdmFyIG90aGVyID0geyAnYSc6IDEgfTsKICoKICogXy5lcShvYmplY3QsIG9iamVjdCk7CiAqIC8vID0+IHRydWUKICoKICogXy5lcShvYmplY3QsIG90aGVyKTsKICogLy8gPT4gZmFsc2UKICoKICogXy5lcSgnYScsICdhJyk7CiAqIC8vID0+IHRydWUKICoKICogXy5lcSgnYScsIE9iamVjdCgnYScpKTsKICogLy8gPT4gZmFsc2UKICoKICogXy5lcShOYU4sIE5hTik7CiAqIC8vID0+IHRydWUKICovCgoKZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7
CiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0
LAogKiAgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTsKICogLy8gPT4gZmFsc2UKICovCgoKdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gYXJndW1lbnRzOwp9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24gKHZhbHVlKSB7CiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYg
aGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7Cn07Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAg
aXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc0FycmF5KFsxLCAyLCAzXSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pOwogKiAvLyA9PiBmYWxzZQogKgogKiBfLmlzQXJyYXkoJ2FiYycpOwogKiAvLyA9PiBmYWxzZQogKgogKiBfLmlzQXJyYXkoXy5ub29wKTsKICogLy8gPT4gZmFsc2UKICovCgp2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlz
IGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzCiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3IKICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgNC4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFu
fSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7CiAqIC8vID0+IHRydWUKICoKICogXy5pc0FycmF5TGlrZSgnYWJjJyk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc0FycmF5TGlrZShfLm5vb3ApOwogKiAvLyA9PiBmYWxzZQogKi8KCmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7CiAgcmV0
dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7Cn0KLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSA0LjMuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoK
ICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTsKICogLy8gPT4gZmFsc2UKICovCgoKdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlOwovKioKICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZQogKiBlcXVpdmFsZW50LgogKgogKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkg
YnVmZmVycywgYm9vbGVhbnMsCiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywKICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWQKICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NCiAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuCiAqCiAq
IEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDAuMS4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9OwogKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9Owog
KgogKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7CiAqIC8vID0+IHRydWUKICoKICogb2JqZWN0ID09PSBvdGhlcjsKICogLy8gPT4gZmFsc2UKICovCgpmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikgewogIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDAuMS4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0g
dmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNGdW5jdGlvbihfKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzRnVuY3Rpb24oL2FiYy8pOwogKiAvLyA9PiBmYWxzZQogKi8KCgpmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7CiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9IC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0
b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvcgogIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLgoKCiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpOwogIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7Cn0KLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGgu
CiAqCiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uCiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDQuMC4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBg
ZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzTGVuZ3RoKDMpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7CiAqIC8vID0+IGZhbHNlCiAqCiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpOwogKiAvLyA9PiBmYWxzZQogKgogKiBfLmlzTGVuZ3RoKCczJyk7CiAqIC8vID0+IGZhbHNlCiAqLwoKCmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1B
WF9TQUZFX0lOVEVHRVI7Cn0KLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZQogKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpCiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYCkKICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMC4xLjAKICogQGNhdGVn
b3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzT2JqZWN0KHt9KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdChfLm5vb3ApOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3QobnVsbCk7CiAqIC8vID0+IGZhbHNlCiAqLwoK
CmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7CiAgdmFyIHR5cGUgPSBfdHlwZW9mKHZhbHVlKTsKCiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgCiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgIm9iamVjdCIuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDQuMC4wCiAq
IEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzT2JqZWN0TGlrZSh7fSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApOwogKiAvLyA9PiBmYWxzZQogKgogKiBfLmlzT2JqZWN0TGlrZShu
dWxsKTsKICogLy8gPT4gZmFsc2UKICovCgoKZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7CiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgX3R5cGVvZih2YWx1ZSkgPT0gJ29iamVjdCc7Cn0KLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMy4wLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1
cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNUeXBlZEFycmF5KFtdKTsKICogLy8gPT4gZmFsc2UKICovCgoKdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5OwovKioKICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJv
cGVydHkgbmFtZXMgb2YgYG9iamVjdGAuCiAqCiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlCiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cykKICogZm9yIG1vcmUgZGV0YWlscy4KICoKICogQHN0YXRpYwogKiBAc2luY2UgMC4xLjAKICogQG1lbWJlck9mIF8KICogQGNhdGVnb3J5IE9iamVjdAogKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuCiAq
IEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuCiAqIEBleGFtcGxlCiAqCiAqIGZ1bmN0aW9uIEZvbygpIHsKICogICB0aGlzLmEgPSAxOwogKiAgIHRoaXMuYiA9IDI7CiAqIH0KICoKICogRm9vLnByb3RvdHlwZS5jID0gMzsKICoKICogXy5rZXlzKG5ldyBGb28pOwogKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpCiAqCiAqIF8ua2V5cygnaGknKTsKICogLy8gPT4gWycwJywgJzEnXQogKi8KCmZ1bmN0aW9uIGtleXMob2JqZWN0
KSB7CiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpOwp9Ci8qKgogKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSA0LjEzLjAKICogQGNhdGVnb3J5IFV0aWwKICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuCiAqIEBleGFtcGxlCiAqCiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTsKICoKICog
Y29uc29sZS5sb2coYXJyYXlzKTsKICogLy8gPT4gW1tdLCBbXV0KICoKICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pOwogKiAvLyA9PiBmYWxzZQogKi8KCgpmdW5jdGlvbiBzdHViQXJyYXkoKSB7CiAgcmV0dXJuIFtdOwp9Ci8qKgogKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDQuMTMuMAogKiBAY2F0ZWdvcnkgVXRpbAogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBf
LnRpbWVzKDIsIF8uc3R1YkZhbHNlKTsKICogLy8gPT4gW2ZhbHNlLCBmYWxzZV0KICovCgoKZnVuY3Rpb24gc3R1YkZhbHNlKCkgewogIHJldHVybiBmYWxzZTsKfQoKbW9kdWxlLmV4cG9ydHMgPSBpc0VxdWFsOwoKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHt9XSwzMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9y
dHMpewooZnVuY3Rpb24gKGdsb2JhbCl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1
bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKLyoqCiAqIExvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz4KICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPSJucG0iIC1vIC4vYAogKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pzLmZvdW5kYXRpb24vPgogKiBS
ZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwogKi8KCi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi8KdmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLAogICAgZnVu
Y1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsCiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLAogICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJywKICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJywKICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nOwovKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqLwoKdmFyIGZyZWVHbG9iYWwgPSAodHlwZW9mIGdsb2JhbCA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2Yo
Z2xvYmFsKSkgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7Ci8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovCgp2YXIgZnJlZVNlbGYgPSAodHlwZW9mIHNlbGYgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKHNlbGYpKSA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjsKLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovCgp2YXIgcm9vdCA9IGZy
ZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsKLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqLwoKdmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTsKLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovCgp2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTsKLyoqCiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUKICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9u
YWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpCiAqIG9mIHZhbHVlcy4KICovCgp2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZzsKLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovCgp2YXIgX1N5bWJvbCA9IHJvb3QuU3ltYm9sLAogICAgc3ltVG9TdHJpbmdUYWcgPSBfU3ltYm9sID8gX1N5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDsKLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFs
bGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLgogKi8KCmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHsKICBpZiAodmFsdWUgPT0gbnVsbCkgewogICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnOwogIH0KCiAgcmV0dXJuIHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9i
amVjdCh2YWx1ZSkgPyBnZXRSYXdUYWcodmFsdWUpIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpOwp9Ci8qKgogKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS4KICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuCiAqLwoKCmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkgewogIHZhciBpc093biA9
IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSwKICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddOwoKICB0cnkgewogICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkOwogICAgdmFyIHVubWFza2VkID0gdHJ1ZTsKICB9IGNhdGNoIChlKSB7fQoKICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7CgogIGlmICh1bm1hc2tlZCkgewogICAgaWYgKGlzT3duKSB7CiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZzsKICAgIH0gZWxz
ZSB7CiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107CiAgICB9CiAgfQoKICByZXR1cm4gcmVzdWx0Owp9Ci8qKgogKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC4KICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy4KICovCgoKZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHsKICByZXR1cm4gbmF0
aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7Cn0KLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMC4xLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc0Z1
bmN0aW9uKF8pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7CiAqIC8vID0+IGZhbHNlCiAqLwoKCmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHsKICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0gLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yCiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3Rv
cnMuCgoKICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7CiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZzsKfQovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlCiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcykKICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCBy
ZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKQogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgTGFuZwogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNPYmplY3Qoe30pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3QoWzEsIDIsIDNd
KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0KF8ubm9vcCk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdChudWxsKTsKICogLy8gPT4gZmFsc2UKICovCgoKZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHsKICB2YXIgdHlwZSA9IF90eXBlb2YodmFsdWUpOwoKICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247Cgp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5l
ZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0se31dLDMyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCi8qKgogKiBsb2Rhc2ggNC4wLjAgKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+CiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz0ibnBtIiAtbyAuL2AKICogQ29weXJpZ2h0IDIwMTItMjAxNiBUaGUgRG9qbyBGb3Vu
ZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz4KICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT4KICogQ29weXJpZ2h0IDIwMDktMjAxNiBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwogKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPgogKi8KCi8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVu
ZGVmaW5lZGAuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc05pbChudWxsKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzTmlsKHZvaWQgMCk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc05pbChOYU4pOwogKiAvLyA9PiBmYWxzZQogKi8KZnVuY3Rp
b24gaXNOaWwodmFsdWUpIHsKICByZXR1cm4gdmFsdWUgPT0gbnVsbDsKfQoKbW9kdWxlLmV4cG9ydHMgPSBpc05pbDsKCn0se31dLDMyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCi8qKgogKiBsb2Rhc2ggMy4wLjEgKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+CiAqIEJ1aWxkOiBgbG9kYXNoIG1vZGVybiBtb2R1bGFyaXplIGV4cG9ydHM9Im5wbSIgLW8gLi9gCiAqIENvcHlyaWdodCAyMDEyLTIwMTUgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9m
b3VuZGF0aW9uLm9yZy8+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCAyMDA5LTIwMTUgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnMKICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT4KICovCgovKioKICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuCiAqCiAqIEBzdGF0aWMKICogQG1l
bWJlck9mIF8KICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzVW5kZWZpbmVkKG51bGwpOwogKiAvLyA9PiBmYWxzZQogKi8KZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHsKICByZXR1cm4gdmFsdWUgPT09IHVuZGVm
aW5lZDsKfQoKbW9kdWxlLmV4cG9ydHMgPSBpc1VuZGVmaW5lZDsKCn0se31dLDMyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9
OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgovKioKICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPgogKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9Im5wbSIgLW8gLi9g
CiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPgogKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+CiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+CiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwogKi8KCi8qKiBVc2VkIGFz
IHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqLwp2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDsKLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqLwoKdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nOwovKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi8KCnZhciBJTkZJTklUWSA9IDEgLyAwOwovKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5j
ZXMuICovCgp2YXIgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsCiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nOwovKioKICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYAogKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS4KICovCgp2YXIgcmVSZWdFeHBDaGFyID0gL1tcXF4kLiorPygpW1xde318XS9nOwovKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovCgp2YXIg
cmVJc0hvc3RDdG9yID0gL15cW29iamVjdCAuKz9Db25zdHJ1Y3RvclxdJC87Ci8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovCgp2YXIgZnJlZUdsb2JhbCA9ICh0eXBlb2YgZ2xvYmFsID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihnbG9iYWwpKSA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDsKLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi8KCnZhciBmcmVlU2VsZiA9ICh0eXBlb2Yg
c2VsZiA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2Yoc2VsZikpID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmOwovKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi8KCnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOwovKioKICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IKICog
c3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC4KICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLgogKi8KCmZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7CiAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDog
MDsKICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xOwp9Ci8qKgogKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LgogKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci4KICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBp
bnZva2VkIHBlciBlbGVtZW50LgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKCiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7CiAgICAgIHJldHVybiB0
cnVlOwogICAgfQogIH0KCiAgcmV0dXJuIGZhbHNlOwp9Ci8qKgogKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0CiAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi4KICogQHBhcmFtIHtudW1iZXJ9IGZyb21J
bmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LgogKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLgogKi8KCgpmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7CiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCwKICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAo
ZnJvbVJpZ2h0ID8gMSA6IC0xKTsKCiAgd2hpbGUgKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSB7CiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkgewogICAgICByZXR1cm4gaW5kZXg7CiAgICB9CiAgfQoKICByZXR1cm4gLTE7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRv
IGluc3BlY3QuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuCiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLgogKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLgogKi8KCgpmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkgewogIGlmICh2YWx1ZSAhPT0gdmFsdWUpIHsKICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNO
YU4sIGZyb21JbmRleCk7CiAgfQoKICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLAogICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7CgogIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkgewogICAgICByZXR1cm4gaW5kZXg7CiAgICB9CiAgfQoKICByZXR1cm4gLTE7Cn0KLyoqCiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IHZh
bHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7CiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTsKfQovKioKICogQ2hlY2tzIGlmIGEgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS4KICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9m
IHRoZSBlbnRyeSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkgewogIHJldHVybiBjYWNoZS5oYXMoa2V5KTsKfQovKioKICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LgogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRo
ZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLgogKi8KCgpmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkgewogIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1
cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7CiAgLy8gTWFueSBob3N0IG9iamVjdHMgYXJlIGBPYmplY3RgIG9iamVjdHMgdGhhdCBjYW4gY29lcmNlIHRvIHN0cmluZ3MKICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLgogIHZhciByZXN1bHQgPSBmYWxzZTsKCiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlv
bicpIHsKICAgIHRyeSB7CiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpOwogICAgfSBjYXRjaCAoZSkge30KICB9CgogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LgogKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy4KICovCgoKZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHsKICB2YXIgaW5kZXggPSAtMSwKICAgICAgcmVzdWx0
ID0gQXJyYXkoc2V0LnNpemUpOwogIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7CiAgfSk7CiAgcmV0dXJuIHJlc3VsdDsKfQovKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovCgoKdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsCiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsCiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7Ci8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBz
aGltcy4gKi8KCnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107Ci8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovCgp2YXIgbWFza1NyY0tleSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpOwogIHJldHVybiB1aWQgPyAnU3ltYm9sKHNyYylfMS4nICsgdWlkIDogJyc7Cn0oKTsKLyoqIFVzZWQgdG8gcmVzb2x2
ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqLwoKCnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7Ci8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqLwoKdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7Ci8qKgogKiBVc2VkIHRvIHJlc29sdmUgdGhlCiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5n
KQogKiBvZiB2YWx1ZXMuCiAqLwoKdmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7Ci8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovCgp2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgKyBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXCQmJykucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXCgpfCBmb3IgLis/KD89XFxcXSkvZywgJyQxLio/JykgKyAnJCcpOwovKiogQnVpbHQtaW4g
dmFsdWUgcmVmZXJlbmNlcy4gKi8KCnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTsKLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqLwoKdmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksCiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLAogICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpOwovKioKICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LgogKgogKiBAcHJpdmF0ZQogKiBAY29uc3RydWN0b3IKICog
QHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuCiAqLwoKZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7CiAgdmFyIGluZGV4ID0gLTEsCiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7CiAgdGhpcy5jbGVhcigpOwoKICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07CiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pOwogIH0KfQovKioKICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJp
ZXMgZnJvbSB0aGUgaGFzaC4KICoKICogQHByaXZhdGUKICogQG5hbWUgY2xlYXIKICogQG1lbWJlck9mIEhhc2gKICovCgoKZnVuY3Rpb24gaGFzaENsZWFyKCkgewogIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTsKfQovKioKICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGRlbGV0ZQogKiBAbWVtYmVyT2YgSGFzaAogKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuCiAq
IEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7CiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTsKfQovKioKICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGdldAogKiBAbWVtYmVyT2YgSGFz
aAogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLgogKi8KCgpmdW5jdGlvbiBoYXNoR2V0KGtleSkgewogIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXzsKCiAgaWYgKG5hdGl2ZUNyZWF0ZSkgewogICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTsKICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0OwogIH0KCiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0
YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDsKfQovKioKICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBoYXMKICogQG1lbWJlck9mIEhhc2gKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHsKICB2YXIg
ZGF0YSA9IHRoaXMuX19kYXRhX187CiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpOwp9Ci8qKgogKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIHNldAogKiBAbWVtYmVyT2YgSGFzaAogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC4KICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LgogKiBAcmV0dXJucyB7T2JqZWN0
fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLgogKi8KCgpmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHsKICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187CiAgZGF0YVtrZXldID0gbmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlOwogIHJldHVybiB0aGlzOwp9IC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC4KCgpIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjsKSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTsKSGFzaC5wcm90b3R5
cGUuZ2V0ID0gaGFzaEdldDsKSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhczsKSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDsKLyoqCiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuCiAqCiAqIEBwcml2YXRlCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS4KICovCgpmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykgewogIHZhciBpbmRleCA9IC0xLAogICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAw
OwogIHRoaXMuY2xlYXIoKTsKCiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdOwogICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTsKICB9Cn0KLyoqCiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGNsZWFyCiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGUKICovCgoKZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7CiAgdGhpcy5fX2RhdGFfXyA9IFtdOwp9Ci8qKgogKiBSZW1v
dmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS4KICoKICogQHByaXZhdGUKICogQG5hbWUgZGVsZXRlCiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkgewogIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywKICAg
ICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTsKCiAgaWYgKGluZGV4IDwgMCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTsKCiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkgewogICAgZGF0YS5wb3AoKTsKICB9IGVsc2UgewogICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpOwogIH0KCiAgcmV0dXJuIHRydWU7Cn0KLyoqCiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBnZXQKICog
QG1lbWJlck9mIExpc3RDYWNoZQogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLgogKi8KCgpmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7CiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLAogICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpOwogIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTsKfQovKioKICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1
ZSBmb3IgYGtleWAgZXhpc3RzLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBoYXMKICogQG1lbWJlck9mIExpc3RDYWNoZQogKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLgogKi8KCgpmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7CiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7Cn0KLyoqCiAqIFNl
dHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC4KICoKICogQHByaXZhdGUKICogQG5hbWUgc2V0CiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4KICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS4KICovCgoKZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHsKICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18s
CiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7CgogIGlmIChpbmRleCA8IDApIHsKICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pOwogIH0gZWxzZSB7CiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIHRoaXM7Cn0gLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuCgoKTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyOwpMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTsKTGlzdENhY2hlLnByb3RvdHlwZS5nZXQg
PSBsaXN0Q2FjaGVHZXQ7Ckxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzOwpMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDsKLyoqCiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy4KICoKICogQHByaXZhdGUKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLgogKi8KCmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHsKICB2YXIgaW5kZXggPSAtMSwKICAg
ICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDsKICB0aGlzLmNsZWFyKCk7CgogIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTsKICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7CiAgfQp9Ci8qKgogKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGNsZWFyCiAqIEBtZW1iZXJPZiBNYXBDYWNoZQogKi8KCgpmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkgewogIHRo
aXMuX19kYXRhX18gPSB7CiAgICAnaGFzaCc6IG5ldyBIYXNoKCksCiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSgpLAogICAgJ3N0cmluZyc6IG5ldyBIYXNoKCkKICB9Owp9Ci8qKgogKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLgogKgogKiBAcHJpdmF0ZQogKiBAbmFtZSBkZWxldGUKICogQG1lbWJlck9mIE1hcENhY2hlCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1
ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkgewogIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7Cn0KLyoqCiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGdldAogKiBAbWVtYmVyT2YgTWFwQ2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuCiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRy
eSB2YWx1ZS4KICovCgoKZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7CiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTsKfQovKioKICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGhhcwogKiBAbWVtYmVyT2YgTWFwQ2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlz
dHMsIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7CiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTsKfQovKioKICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIHNldAogKiBAbWVtYmVyT2YgTWFwQ2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4KICogQHJldHVybnMge09iamVjdH0gUmV0dXJu
cyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLgogKi8KCgpmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7CiAgZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLnNldChrZXksIHZhbHVlKTsKICByZXR1cm4gdGhpczsKfSAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLgoKCk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7Ck1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTsKTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0OwpNYXBDYWNoZS5wcm90b3R5
cGUuaGFzID0gbWFwQ2FjaGVIYXM7Ck1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDsKLyoqCiAqCiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuCiAqCiAqIEBwcml2YXRlCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLgogKi8KCmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykgewogIHZhciBpbmRleCA9IC0xLAogICAgICBsZW5ndGggPSB2YWx1ZXMgPyB2YWx1ZXMubGVuZ3RoIDogMDsKICB0
aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKCk7CgogIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTsKICB9Cn0KLyoqCiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGFkZAogKiBAbWVtYmVyT2YgU2V0Q2FjaGUKICogQGFsaWFzIHB1c2gKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuCiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLgogKi8KCgpmdW5j
dGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkgewogIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7CgogIHJldHVybiB0aGlzOwp9Ci8qKgogKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuCiAqCiAqIEBwcml2YXRlCiAqIEBuYW1lIGhhcwogKiBAbWVtYmVyT2YgU2V0Q2FjaGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci4KICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2Vg
LgogKi8KCgpmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkgewogIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7Cn0gLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC4KCgpTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDsKU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzOwovKioKICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLgogKgogKiBAcHJp
dmF0ZQogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC4KICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLgogKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLgogKi8KCmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7CiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKCiAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkgewogICAgICBy
ZXR1cm4gbGVuZ3RoOwogICAgfQogIH0KCiAgcmV0dXJuIC0xOwp9Ci8qKgogKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbiwKICogIGVsc2UgYGZhbHNlYC4KICovCgoKZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7CiAgaWYgKCFp
c09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yOwogIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTsKfQovKioKICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7
QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC4KICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuCiAqLwoKCmZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikgewogIHZhciBpbmRleCA9IC0x
LAogICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsCiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCwKICAgICAgaXNDb21tb24gPSB0cnVlLAogICAgICByZXN1bHQgPSBbXSwKICAgICAgc2VlbiA9IHJlc3VsdDsKCiAgaWYgKGNvbXBhcmF0b3IpIHsKICAgIGlzQ29tbW9uID0gZmFsc2U7CiAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoOwogIH0gZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHsKICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpOwoKICAg
IGlmIChzZXQpIHsKICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTsKICAgIH0KCiAgICBpc0NvbW1vbiA9IGZhbHNlOwogICAgaW5jbHVkZXMgPSBjYWNoZUhhczsKICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGUoKTsKICB9IGVsc2UgewogICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7CiAgfQoKICBvdXRlcjogd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSwKICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7CiAgICB2
YWx1ZSA9IGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDAgPyB2YWx1ZSA6IDA7CgogICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkgewogICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7CgogICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHsKICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkgewogICAgICAgICAgY29udGludWUgb3V0ZXI7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoaXRlcmF0ZWUpIHsKICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpOwogICAg
ICB9CgogICAgICByZXN1bHQucHVzaCh2YWx1ZSk7CiAgICB9IGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHsKICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkgewogICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7CiAgICAgIH0KCiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgIH0KICB9CgogIHJldHVybiByZXN1bHQ7Cn0KLyoqCiAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVl
cyB0byBhZGQgdG8gdGhlIHNldC4KICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC4KICovCgoKdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmIDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywgLTBdKSlbMV0gPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uICh2YWx1ZXMpIHsKICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpOwp9OwovKioKICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS4KICogQHBhcmFtIHtz
dHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLgogKi8KCmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHsKICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXzsKICByZXR1cm4gaXNLZXlhYmxlKGtleSkgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ10gOiBkYXRhLm1hcDsKfQovKioKICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0g
e09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC4KICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLgogKi8KCgpmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHsKICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7CiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDsKfQovKioKICogQ2hl
Y2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkgewogIHZhciB0eXBlID0gX3R5cGVvZih2YWx1ZSk7CgogIHJldHVybiB0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwg
dHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyA/IHZhbHVlICE9PSAnX19wcm90b19fJyA6IHZhbHVlID09PSBudWxsOwp9Ci8qKgogKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuCiAqLwoKCmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHsKICBy
ZXR1cm4gISFtYXNrU3JjS2V5ICYmIG1hc2tTcmNLZXkgaW4gZnVuYzsKfQovKioKICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcHJvY2Vzcy4KICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuCiAqLwoKCmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHsKICBpZiAoZnVuYyAhPSBudWxsKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7
CiAgICB9IGNhdGNoIChlKSB7fQoKICAgIHRyeSB7CiAgICAgIHJldHVybiBmdW5jICsgJyc7CiAgICB9IGNhdGNoIChlKSB7fQogIH0KCiAgcmV0dXJuICcnOwp9Ci8qKgogKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmcKICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybykKICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNl
IG9mIGVhY2gKICogZWxlbWVudCBpcyBrZXB0LgogKgogKiBAc3RhdGljCiAqIEBtZW1iZXJPZiBfCiAqIEBzaW5jZSAwLjEuMAogKiBAY2F0ZWdvcnkgQXJyYXkKICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuCiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LgogKiBAZXhhbXBsZQogKgogKiBfLnVuaXEoWzIsIDEsIDJdKTsKICogLy8gPT4gWzIsIDFdCiAqLwoKCmZ1bmN0aW9uIHVuaXEoYXJyYXkpIHsKICByZXR1cm4gYXJyYXkgJiYgYXJy
YXkubGVuZ3RoID8gYmFzZVVuaXEoYXJyYXkpIDogW107Cn0KLyoqCiAqIFBlcmZvcm1zIGEKICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybykKICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuCiAqCiAqIEBzdGF0aWMKICogQG1lbWJlck9mIF8KICogQHNpbmNlIDQuMC4wCiAqIEBjYXRlZ29yeSBMYW5nCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVl
IHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuCiAqIEBleGFtcGxlCiAqCiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9OwogKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9OwogKgogKiBfLmVxKG9iamVjdCwgb2JqZWN0KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmVxKG9iamVjdCwgb3RoZXIpOwogKiAvLyA9PiBmYWxzZQogKgog
KiBfLmVxKCdhJywgJ2EnKTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpOwogKiAvLyA9PiBmYWxzZQogKgogKiBfLmVxKE5hTiwgTmFOKTsKICogLy8gPT4gdHJ1ZQogKi8KCgpmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHsKICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8IHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7Cn0KLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVy
T2YgXwogKiBAc2luY2UgMC4xLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC4KICogQGV4YW1wbGUKICoKICogXy5pc0Z1bmN0aW9uKF8pOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7CiAqIC8vID0+IGZhbHNlCiAqLwoKCmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHsKICAvLyBUaGUgdXNlIG9mIGBP
YmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3IKICAvLyBpbiBTYWZhcmkgOC05IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuCiAgdmFyIHRhZyA9IGlzT2JqZWN0KHZhbHVlKSA/IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7CiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7Cn0KLyoqCiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZQogKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0
cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpCiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYCkKICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMC4xLjAKICogQGNhdGVnb3J5IExhbmcKICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBS
ZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLgogKiBAZXhhbXBsZQogKgogKiBfLmlzT2JqZWN0KHt9KTsKICogLy8gPT4gdHJ1ZQogKgogKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7CiAqIC8vID0+IHRydWUKICoKICogXy5pc09iamVjdChfLm5vb3ApOwogKiAvLyA9PiB0cnVlCiAqCiAqIF8uaXNPYmplY3QobnVsbCk7CiAqIC8vID0+IGZhbHNlCiAqLwoKCmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7CiAgdmFyIHR5cGUgPSBfdHlwZW9mKHZhbHVlKTsKCiAgcmV0dXJuICEhdmFs
dWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTsKfQovKioKICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC4KICoKICogQHN0YXRpYwogKiBAbWVtYmVyT2YgXwogKiBAc2luY2UgMi4zLjAKICogQGNhdGVnb3J5IFV0aWwKICogQGV4YW1wbGUKICoKICogXy50aW1lcygyLCBfLm5vb3ApOwogKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdCiAqLwoKCmZ1bmN0aW9uIG5vb3AoKSB7Ly8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC4KfQoKbW9kdWxlLmV4cG9ydHMgPSB1bmlxOwoK
fSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHt9XSwzMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJyk7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1i
dWZmZXInKS5CdWZmZXI7Cgp2YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNik7CgpmdW5jdGlvbiBNRDUoKSB7CiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NCk7IC8vIHN0YXRlCgogIHRoaXMuX2EgPSAweDY3NDUyMzAxOwogIHRoaXMuX2IgPSAweGVmY2RhYjg5OwogIHRoaXMuX2MgPSAweDk4YmFkY2ZlOwogIHRoaXMuX2QgPSAweDEwMzI1NDc2Owp9Cgppbmhlcml0cyhNRDUsIEhhc2hCYXNlKTsKCk1ENS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgTSA9IEFSUkFZMTY7CgogIGZvciAodmFyIGkgPSAw
OyBpIDwgMTY7ICsraSkgewogICAgTVtpXSA9IHRoaXMuX2Jsb2NrLnJlYWRJbnQzMkxFKGkgKiA0KTsKICB9CgogIHZhciBhID0gdGhpcy5fYTsKICB2YXIgYiA9IHRoaXMuX2I7CiAgdmFyIGMgPSB0aGlzLl9jOwogIHZhciBkID0gdGhpcy5fZDsKICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZDc2YWE0NzgsIDcpOwogIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxXSwgMHhlOGM3Yjc1NiwgMTIpOwogIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsyXSwgMHgyNDIwNzBkYiwgMTcpOwogIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsz
XSwgMHhjMWJkY2VlZSwgMjIpOwogIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs0XSwgMHhmNTdjMGZhZiwgNyk7CiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzVdLCAweDQ3ODdjNjJhLCAxMik7CiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzZdLCAweGE4MzA0NjEzLCAxNyk7CiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzddLCAweGZkNDY5NTAxLCAyMik7CiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzhdLCAweDY5ODA5OGQ4LCA3KTsKICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bOV0sIDB4OGI0NGY3YWYsIDEyKTsKICBjID0gZm5GKGMs
IGQsIGEsIGIsIE1bMTBdLCAweGZmZmY1YmIxLCAxNyk7CiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzExXSwgMHg4OTVjZDdiZSwgMjIpOwogIGEgPSBmbkYoYSwgYiwgYywgZCwgTVsxMl0sIDB4NmI5MDExMjIsIDcpOwogIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxM10sIDB4ZmQ5ODcxOTMsIDEyKTsKICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTRdLCAweGE2Nzk0MzhlLCAxNyk7CiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzE1XSwgMHg0OWI0MDgyMSwgMjIpOwogIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxXSwgMHhmNjFlMjU2
MiwgNSk7CiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzZdLCAweGMwNDBiMzQwLCA5KTsKICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTFdLCAweDI2NWU1YTUxLCAxNCk7CiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzBdLCAweGU5YjZjN2FhLCAyMCk7CiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzVdLCAweGQ2MmYxMDVkLCA1KTsKICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTBdLCAweDAyNDQxNDUzLCA5KTsKICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTVdLCAweGQ4YTFlNjgxLCAxNCk7CiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBN
WzRdLCAweGU3ZDNmYmM4LCAyMCk7CiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzldLCAweDIxZTFjZGU2LCA1KTsKICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTRdLCAweGMzMzcwN2Q2LCA5KTsKICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bM10sIDB4ZjRkNTBkODcsIDE0KTsKICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bOF0sIDB4NDU1YTE0ZWQsIDIwKTsKICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMTNdLCAweGE5ZTNlOTA1LCA1KTsKICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMl0sIDB4ZmNlZmEzZjgsIDkpOwogIGMgPSBmbkco
YywgZCwgYSwgYiwgTVs3XSwgMHg2NzZmMDJkOSwgMTQpOwogIGIgPSBmbkcoYiwgYywgZCwgYSwgTVsxMl0sIDB4OGQyYTRjOGEsIDIwKTsKICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZmZmYTM5NDIsIDQpOwogIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs4XSwgMHg4NzcxZjY4MSwgMTEpOwogIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxMV0sIDB4NmQ5ZDYxMjIsIDE2KTsKICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMTRdLCAweGZkZTUzODBjLCAyMyk7CiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzFdLCAweGE0YmVlYTQ0
LCA0KTsKICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bNF0sIDB4NGJkZWNmYTksIDExKTsKICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bN10sIDB4ZjZiYjRiNjAsIDE2KTsKICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMTBdLCAweGJlYmZiYzcwLCAyMyk7CiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzEzXSwgMHgyODliN2VjNiwgNCk7CiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzBdLCAweGVhYTEyN2ZhLCAxMSk7CiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzNdLCAweGQ0ZWYzMDg1LCAxNik7CiAgYiA9IGZuSChiLCBjLCBkLCBhLCBN
WzZdLCAweDA0ODgxZDA1LCAyMyk7CiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzldLCAweGQ5ZDRkMDM5LCA0KTsKICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMTJdLCAweGU2ZGI5OWU1LCAxMSk7CiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzE1XSwgMHgxZmEyN2NmOCwgMTYpOwogIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsyXSwgMHhjNGFjNTY2NSwgMjMpOwogIGEgPSBmbkkoYSwgYiwgYywgZCwgTVswXSwgMHhmNDI5MjI0NCwgNik7CiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzddLCAweDQzMmFmZjk3LCAxMCk7CiAgYyA9IGZu
SShjLCBkLCBhLCBiLCBNWzE0XSwgMHhhYjk0MjNhNywgMTUpOwogIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs1XSwgMHhmYzkzYTAzOSwgMjEpOwogIGEgPSBmbkkoYSwgYiwgYywgZCwgTVsxMl0sIDB4NjU1YjU5YzMsIDYpOwogIGQgPSBmbkkoZCwgYSwgYiwgYywgTVszXSwgMHg4ZjBjY2M5MiwgMTApOwogIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZlZmY0N2QsIDE1KTsKICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMV0sIDB4ODU4NDVkZDEsIDIxKTsKICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bOF0sIDB4NmZhODdl
NGYsIDYpOwogIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxNV0sIDB4ZmUyY2U2ZTAsIDEwKTsKICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTMwMTQzMTQsIDE1KTsKICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMTNdLCAweDRlMDgxMWExLCAyMSk7CiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzRdLCAweGY3NTM3ZTgyLCA2KTsKICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTFdLCAweGJkM2FmMjM1LCAxMCk7CiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzJdLCAweDJhZDdkMmJiLCAxNSk7CiAgYiA9IGZuSShiLCBjLCBkLCBh
LCBNWzldLCAweGViODZkMzkxLCAyMSk7CiAgdGhpcy5fYSA9IHRoaXMuX2EgKyBhIHwgMDsKICB0aGlzLl9iID0gdGhpcy5fYiArIGIgfCAwOwogIHRoaXMuX2MgPSB0aGlzLl9jICsgYyB8IDA7CiAgdGhpcy5fZCA9IHRoaXMuX2QgKyBkIHwgMDsKfTsKCk1ENS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHsKICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2NrcwogIHRoaXMuX2Jsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gMHg4MDsKCiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHsKICAg
IHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDY0KTsKCiAgICB0aGlzLl91cGRhdGUoKTsKCiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDA7CiAgfQoKICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA1Nik7CgogIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1Nik7CgogIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MCk7CgogIHRoaXMuX3VwZGF0ZSgpOyAvLyBwcm9kdWNlIHJlc3VsdAoKCiAgdmFyIGJ1ZmZlciA9
IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNik7CiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKTsKICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpOwogIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOCk7CiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMik7CiAgcmV0dXJuIGJ1ZmZlcjsKfTsKCmZ1bmN0aW9uIHJvdGwoeCwgbikgewogIHJldHVybiB4IDw8IG4gfCB4ID4+PiAzMiAtIG47Cn0KCmZ1bmN0aW9uIGZuRihhLCBiLCBjLCBkLCBtLCBrLCBzKSB7CiAgcmV0dXJuIHJvdGwoYSArIChi
ICYgYyB8IH5iICYgZCkgKyBtICsgayB8IDAsIHMpICsgYiB8IDA7Cn0KCmZ1bmN0aW9uIGZuRyhhLCBiLCBjLCBkLCBtLCBrLCBzKSB7CiAgcmV0dXJuIHJvdGwoYSArIChiICYgZCB8IGMgJiB+ZCkgKyBtICsgayB8IDAsIHMpICsgYiB8IDA7Cn0KCmZ1bmN0aW9uIGZuSChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7CiAgcmV0dXJuIHJvdGwoYSArIChiIF4gYyBeIGQpICsgbSArIGsgfCAwLCBzKSArIGIgfCAwOwp9CgpmdW5jdGlvbiBmbkkoYSwgYiwgYywgZCwgbSwgaywgcykgewogIHJldHVybiByb3RsKGEgKyAoYyBeIChiIHwg
fmQpKSArIG0gKyBrIHwgMCwgcykgKyBiIHwgMDsKfQoKbW9kdWxlLmV4cG9ydHMgPSBNRDU7Cgp9LHsiaGFzaC1iYXNlIjoyNjEsImluaGVyaXRzIjoyNzgsInNhZmUtYnVmZmVyIjozODR9XSwzMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgYm4gPSByZXF1aXJlKCdibi5qcycpOwoKdmFyIGJyb3JhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7CgpmdW5jdGlvbiBNaWxsZXJSYWJpbihyYW5kKSB7CiAgdGhpcy5yYW5kID0gcmFuZCB8fCBuZXcgYnJvcmFuZC5SYW5kKCk7Cn0K
Cm1vZHVsZS5leHBvcnRzID0gTWlsbGVyUmFiaW47CgpNaWxsZXJSYWJpbi5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocmFuZCkgewogIHJldHVybiBuZXcgTWlsbGVyUmFiaW4ocmFuZCk7Cn07CgpNaWxsZXJSYWJpbi5wcm90b3R5cGUuX3JhbmRiZWxvdyA9IGZ1bmN0aW9uIF9yYW5kYmVsb3cobikgewogIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpOwogIHZhciBtaW5fYnl0ZXMgPSBNYXRoLmNlaWwobGVuIC8gOCk7IC8vIEdlbmVyYWdlIHJhbmRvbSBieXRlcyB1bnRpbCBhIG51bWJlciBsZXNzIHRoYW4gbiBpcyBmb3VuZC4K
ICAvLyBUaGlzIGVuc3VyZXMgdGhhdCAwLi5uLTEgaGF2ZSBhbiBlcXVhbCBwcm9iYWJpbGl0eSBvZiBiZWluZyBzZWxlY3RlZC4KCiAgZG8gewogICAgdmFyIGEgPSBuZXcgYm4odGhpcy5yYW5kLmdlbmVyYXRlKG1pbl9ieXRlcykpOwogIH0gd2hpbGUgKGEuY21wKG4pID49IDApOwoKICByZXR1cm4gYTsKfTsKCk1pbGxlclJhYmluLnByb3RvdHlwZS5fcmFuZHJhbmdlID0gZnVuY3Rpb24gX3JhbmRyYW5nZShzdGFydCwgc3RvcCkgewogIC8vIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwg
dG8gc3RhcnQgYW5kIGxlc3MgdGhhbiBzdG9wLgogIHZhciBzaXplID0gc3RvcC5zdWIoc3RhcnQpOwogIHJldHVybiBzdGFydC5hZGQodGhpcy5fcmFuZGJlbG93KHNpemUpKTsKfTsKCk1pbGxlclJhYmluLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gdGVzdChuLCBrLCBjYikgewogIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpOwogIHZhciByZWQgPSBibi5tb250KG4pOwogIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7CiAgaWYgKCFrKSBrID0gTWF0aC5tYXgoMSwgbGVuIC8gNDggfCAwKTsgLy8gRmluZCBkIGFu
ZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7CgogIHZhciBuMSA9IG4uc3VibigxKTsKCiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fQoKICB2YXIgZCA9IG4uc2hybihzKTsKICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTsKICB2YXIgcHJpbWUgPSB0cnVlOwoKICBmb3IgKDsgayA+IDA7IGstLSkgewogICAgdmFyIGEgPSB0aGlzLl9yYW5kcmFuZ2UobmV3IGJuKDIpLCBuMSk7CgogICAgaWYgKGNiKSBjYihhKTsKICAgIHZhciB4ID0gYS50b1JlZChyZWQpLnJlZFBvdyhkKTsKICAgIGlmICh4LmNtcChy
b25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKSBjb250aW51ZTsKCiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykgewogICAgICB4ID0geC5yZWRTcXIoKTsKICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmICh4LmNtcChybjEpID09PSAwKSBicmVhazsKICAgIH0KCiAgICBpZiAoaSA9PT0gcykgcmV0dXJuIGZhbHNlOwogIH0KCiAgcmV0dXJuIHByaW1lOwp9OwoKTWlsbGVyUmFiaW4ucHJvdG90eXBlLmdldERpdmlzb3IgPSBmdW5jdGlvbiBnZXREaXZpc29yKG4sIGsp
IHsKICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTsKICB2YXIgcmVkID0gYm4ubW9udChuKTsKICB2YXIgcm9uZSA9IG5ldyBibigxKS50b1JlZChyZWQpOwogIGlmICghaykgayA9IE1hdGgubWF4KDEsIGxlbiAvIDQ4IHwgMCk7IC8vIEZpbmQgZCBhbmQgcywgKG4gLSAxKSA9ICgyIF4gcykgKiBkOwoKICB2YXIgbjEgPSBuLnN1Ym4oMSk7CgogIGZvciAodmFyIHMgPSAwOyAhbjEudGVzdG4ocyk7IHMrKykge30KCiAgdmFyIGQgPSBuLnNocm4ocyk7CiAgdmFyIHJuMSA9IG4xLnRvUmVkKHJlZCk7CgogIGZvciAoOyBrID4gMDsg
ay0tKSB7CiAgICB2YXIgYSA9IHRoaXMuX3JhbmRyYW5nZShuZXcgYm4oMiksIG4xKTsKCiAgICB2YXIgZyA9IG4uZ2NkKGEpOwogICAgaWYgKGcuY21wbigxKSAhPT0gMCkgcmV0dXJuIGc7CiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7CiAgICBpZiAoeC5jbXAocm9uZSkgPT09IDAgfHwgeC5jbXAocm4xKSA9PT0gMCkgY29udGludWU7CgogICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzOyBpKyspIHsKICAgICAgeCA9IHgucmVkU3FyKCk7CiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCkgcmV0dXJuIHguZnJv
bVJlZCgpLnN1Ym4oMSkuZ2NkKG4pOwogICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMCkgYnJlYWs7CiAgICB9CgogICAgaWYgKGkgPT09IHMpIHsKICAgICAgeCA9IHgucmVkU3FyKCk7CiAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTsKICAgIH0KICB9CgogIHJldHVybiBmYWxzZTsKfTsKCn0seyJibi5qcyI6MzI3LCJicm9yYW5kIjoxODR9XSwzMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTgxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImJ1
ZmZlciI6MTg1LCJkdXAiOjE4MX1dLDMyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCm1vZHVsZS5leHBvcnRzID0gYXNzZXJ0OwoKZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7CiAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTsKfQoKYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7CiAgaWYgKGwgIT0gcikgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZDogJyArIGwg
KyAnICE9ICcgKyByKTsKfTsKCn0se31dLDMyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciB1dGlscyA9IGV4cG9ydHM7CgpmdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSkgcmV0dXJuIG1zZy5zbGljZSgpOwogIGlmICghbXNnKSByZXR1cm4gW107CiAgdmFyIHJlcyA9IFtdOwoKICBpZiAodHlwZW9mIG1zZyAhPT0gJ3N0cmluZycpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7CiAgICAgIHJl
c1tpXSA9IG1zZ1tpXSB8IDA7CiAgICB9CgogICAgcmV0dXJuIHJlczsKICB9CgogIGlmIChlbmMgPT09ICdoZXgnKSB7CiAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpOwogICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKSBtc2cgPSAnMCcgKyBtc2c7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpIHsKICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTsKICAgIH0KICB9IGVsc2UgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBt
c2cubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTsKICAgICAgdmFyIGhpID0gYyA+PiA4OwogICAgICB2YXIgbG8gPSBjICYgMHhmZjsKICAgICAgaWYgKGhpKSByZXMucHVzaChoaSwgbG8pO2Vsc2UgcmVzLnB1c2gobG8pOwogICAgfQogIH0KCiAgcmV0dXJuIHJlczsKfQoKdXRpbHMudG9BcnJheSA9IHRvQXJyYXk7CgpmdW5jdGlvbiB6ZXJvMih3b3JkKSB7CiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKSByZXR1cm4gJzAnICsgd29yZDtlbHNlIHJldHVybiB3b3JkOwp9Cgp1dGlscy56ZXJv
MiA9IHplcm8yOwoKZnVuY3Rpb24gdG9IZXgobXNnKSB7CiAgdmFyIHJlcyA9ICcnOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykgewogICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpOwogIH0KCiAgcmV0dXJuIHJlczsKfQoKdXRpbHMudG9IZXggPSB0b0hleDsKCnV0aWxzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShhcnIsIGVuYykgewogIGlmIChlbmMgPT09ICdoZXgnKSByZXR1cm4gdG9IZXgoYXJyKTtlbHNlIHJldHVybiBhcnI7Cn07Cgp9LHt9XSwzMzA6W2Z1bmN0aW9uKHJl
cXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBUb3AgbGV2ZWwgZmlsZSBpcyBqdXN0IGEgbWl4aW4gb2Ygc3VibW9kdWxlcyAmIGNvbnN0YW50cwondXNlIHN0cmljdCc7Cgp2YXIgYXNzaWduID0gcmVxdWlyZSgnLi9saWIvdXRpbHMvY29tbW9uJykuYXNzaWduOwoKdmFyIGRlZmxhdGUgPSByZXF1aXJlKCcuL2xpYi9kZWZsYXRlJyk7Cgp2YXIgaW5mbGF0ZSA9IHJlcXVpcmUoJy4vbGliL2luZmxhdGUnKTsKCnZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuL2xpYi96bGliL2NvbnN0YW50cycpOwoKdmFyIHBha28gPSB7fTsKYXNz
aWduKHBha28sIGRlZmxhdGUsIGluZmxhdGUsIGNvbnN0YW50cyk7Cm1vZHVsZS5leHBvcnRzID0gcGFrbzsKCn0seyIuL2xpYi9kZWZsYXRlIjozMzEsIi4vbGliL2luZmxhdGUiOjMzMiwiLi9saWIvdXRpbHMvY29tbW9uIjozMzMsIi4vbGliL3psaWIvY29uc3RhbnRzIjozMzZ9XSwzMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Cgp2YXIgemxpYl9kZWZsYXRlID0gcmVxdWlyZSgnLi96bGliL2RlZmxhdGUnKTsKCnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvY29tbW9uJyk7
Cgp2YXIgc3RyaW5ncyA9IHJlcXVpcmUoJy4vdXRpbHMvc3RyaW5ncycpOwoKdmFyIG1zZyA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpOwoKdmFyIFpTdHJlYW0gPSByZXF1aXJlKCcuL3psaWIvenN0cmVhbScpOwoKdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsKLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KCi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCgp2YXIgWl9OT19GTFVTSCA9IDA7CnZhciBaX0ZJTklTSCA9IDQ7CnZhciBaX09LID0gMDsKdmFyIFpfU1RSRUFNX0VORCA9IDE7CnZhciBaX1NZTkNfRkxVU0ggPSAyOwp2YXIgWl9ERUZBVUxUX0NPTVBSRVNTSU9OID0gLTE7CnZhciBaX0RFRkFVTFRfU1RSQVRFR1kgPSAwOwp2YXIgWl9ERUZMQVRFRCA9IDg7Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCgovKioKICogY2xh
c3MgRGVmbGF0ZQogKgogKiBHZW5lcmljIEpTLXN0eWxlIHdyYXBwZXIgZm9yIHpsaWIgY2FsbHMuIElmIHlvdSBkb24ndCBuZWVkCiAqIHN0cmVhbWluZyBiZWhhdmlvdXIgLSB1c2UgbW9yZSBzaW1wbGUgZnVuY3Rpb25zOiBbW2RlZmxhdGVdXSwKICogW1tkZWZsYXRlUmF3XV0gYW5kIFtbZ3ppcF1dLgogKiovCgovKiBpbnRlcm5hbAogKiBEZWZsYXRlLmNodW5rcyAtPiBBcnJheQogKgogKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbRGVmbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi4KICoqLwoKLyoqCiAqIERl
ZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXl8QXJyYXkKICoKICogQ29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbRGVmbGF0ZSNvbkRhdGFdXQogKiBhbmQgW1tEZWZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rCiAqIChjYWxsIFtbRGVmbGF0ZSNwdXNoXV0gd2l0aCBgWl9GSU5JU0hgIC8gYHRydWVgIHBhcmFtKSAgb3IgaWYgeW91CiAqIHB1c2ggYSBjaHVuayB3aXRoIGV4cGxpY2l0IGZsdXNoIChjYWxsIFtbRGVmbGF0ZSNwdXNoXV0gd2l0aAog
KiBgWl9TWU5DX0ZMVVNIYCBwYXJhbSkuCiAqKi8KCi8qKgogKiBEZWZsYXRlLmVyciAtPiBOdW1iZXIKICoKICogRXJyb3IgY29kZSBhZnRlciBkZWZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLgogKiBZb3Ugd2lsbCBub3QgbmVlZCBpdCBpbiByZWFsIGxpZmUsIGJlY2F1c2UgZGVmbGF0ZSBlcnJvcnMKICogYXJlIHBvc3NpYmxlIG9ubHkgb24gd3Jvbmcgb3B0aW9ucyBvciBiYWQgYG9uRGF0YWAgLyBgb25FbmRgCiAqIGN1c3RvbSBoYW5kbGVycy4KICoqLwoKLyoqCiAqIERlZmxhdGUubXNnIC0+IFN0cmlu
ZwogKgogKiBFcnJvciBtZXNzYWdlLCBpZiBbW0RlZmxhdGUuZXJyXV0gIT0gMAogKiovCgovKioKICogbmV3IERlZmxhdGUob3B0aW9ucykKICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy4KICoKICogQ3JlYXRlcyBuZXcgZGVmbGF0b3IgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpZWQgcGFyYW1zLiBUaHJvd3MgZXhjZXB0aW9uCiAqIG9uIGJhZCBwYXJhbXMuIFN1cHBvcnRlZCBvcHRpb25zOgogKgogKiAtIGBsZXZlbGAKICogLSBgd2luZG93Qml0c2AKICogLSBgbWVtTGV2ZWxgCiAqIC0gYHN0cmF0
ZWd5YAogKiAtIGBkaWN0aW9uYXJ5YAogKgogKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpCiAqIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZXNlLgogKgogKiBBZGRpdGlvbmFsIG9wdGlvbnMsIGZvciBpbnRlcm5hbCBuZWVkczoKICoKICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdCkKICogLSBgcmF3YCAoQm9vbGVhbikgLSBkbyByYXcgZGVmbGF0ZQogKiAtIGBn
emlwYCAoQm9vbGVhbikgLSBjcmVhdGUgZ3ppcCB3cmFwcGVyCiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlICJiaW5hcnkgc3RyaW5nIgogKiAgICAoZWFjaCBjaGFyIGNvZGUgWzAuLjI1NV0pCiAqIC0gYGhlYWRlcmAgKE9iamVjdCkgLSBjdXN0b20gaGVhZGVyIGZvciBnemlwCiAqICAgLSBgdGV4dGAgKEJvb2xlYW4pIC0gdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dAogKiAgIC0gYHRpbWVgIChOdW1iZXIpIC0gbW9kaWZpY2F0
aW9uIHRpbWUsIHVuaXggdGltZXN0YW1wCiAqICAgLSBgb3NgIChOdW1iZXIpIC0gb3BlcmF0aW9uIHN5c3RlbSBjb2RlCiAqICAgLSBgZXh0cmFgIChBcnJheSkgLSBhcnJheSBvZiBieXRlcyB3aXRoIGV4dHJhIGRhdGEgKG1heCA2NTUzNikKICogICAtIGBuYW1lYCAoU3RyaW5nKSAtIGZpbGUgbmFtZSAoYmluYXJ5IHN0cmluZykKICogICAtIGBjb21tZW50YCAoU3RyaW5nKSAtIGNvbW1lbnQgKGJpbmFyeSBzdHJpbmcpCiAqICAgLSBgaGNyY2AgKEJvb2xlYW4pIC0gdHJ1ZSBpZiBoZWFkZXIgY3JjIHNob3VsZCBiZSBhZGRl
ZAogKgogKiAjIyMjIyBFeGFtcGxlOgogKgogKiBgYGBqYXZhc2NyaXB0CiAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpCiAqICAgLCBjaHVuazEgPSBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pCiAqICAgLCBjaHVuazIgPSBVaW50OEFycmF5KFsxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOV0pOwogKgogKiB2YXIgZGVmbGF0ZSA9IG5ldyBwYWtvLkRlZmxhdGUoeyBsZXZlbDogM30pOwogKgogKiBkZWZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7CiAqIGRlZmxhdGUucHVzaChjaHVuazIsIHRydWUpOyAg
Ly8gdHJ1ZSAtPiBsYXN0IGNodW5rCiAqCiAqIGlmIChkZWZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoZGVmbGF0ZS5lcnIpOyB9CiAqCiAqIGNvbnNvbGUubG9nKGRlZmxhdGUucmVzdWx0KTsKICogYGBgCiAqKi8KCmZ1bmN0aW9uIERlZmxhdGUob3B0aW9ucykgewogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWZsYXRlKSkgcmV0dXJuIG5ldyBEZWZsYXRlKG9wdGlvbnMpOwogIHRoaXMub3B0aW9ucyA9IHV0aWxzLmFzc2lnbih7CiAgICBsZXZlbDogWl9ERUZBVUxUX0NPTVBSRVNTSU9OLAogICAgbWV0aG9kOiBaX0RF
RkxBVEVELAogICAgY2h1bmtTaXplOiAxNjM4NCwKICAgIHdpbmRvd0JpdHM6IDE1LAogICAgbWVtTGV2ZWw6IDgsCiAgICBzdHJhdGVneTogWl9ERUZBVUxUX1NUUkFURUdZLAogICAgdG86ICcnCiAgfSwgb3B0aW9ucyB8fCB7fSk7CiAgdmFyIG9wdCA9IHRoaXMub3B0aW9uczsKCiAgaWYgKG9wdC5yYXcgJiYgb3B0LndpbmRvd0JpdHMgPiAwKSB7CiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0czsKICB9IGVsc2UgaWYgKG9wdC5nemlwICYmIG9wdC53aW5kb3dCaXRzID4gMCAmJiBvcHQud2luZG93Qml0cyA8
IDE2KSB7CiAgICBvcHQud2luZG93Qml0cyArPSAxNjsKICB9CgogIHRoaXMuZXJyID0gMDsgLy8gZXJyb3IgY29kZSwgaWYgaGFwcGVucyAoMCA9IFpfT0spCgogIHRoaXMubXNnID0gJyc7IC8vIGVycm9yIG1lc3NhZ2UKCiAgdGhpcy5lbmRlZCA9IGZhbHNlOyAvLyB1c2VkIHRvIGF2b2lkIG11bHRpcGxlIG9uRW5kKCkgY2FsbHMKCiAgdGhpcy5jaHVua3MgPSBbXTsgLy8gY2h1bmtzIG9mIGNvbXByZXNzZWQgZGF0YQoKICB0aGlzLnN0cm0gPSBuZXcgWlN0cmVhbSgpOwogIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwOwogIHZh
ciBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUluaXQyKHRoaXMuc3RybSwgb3B0LmxldmVsLCBvcHQubWV0aG9kLCBvcHQud2luZG93Qml0cywgb3B0Lm1lbUxldmVsLCBvcHQuc3RyYXRlZ3kpOwoKICBpZiAoc3RhdHVzICE9PSBaX09LKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pOwogIH0KCiAgaWYgKG9wdC5oZWFkZXIpIHsKICAgIHpsaWJfZGVmbGF0ZS5kZWZsYXRlU2V0SGVhZGVyKHRoaXMuc3RybSwgb3B0LmhlYWRlcik7CiAgfQoKICBpZiAob3B0LmRpY3Rpb25hcnkpIHsKICAgIHZhciBkaWN0
OyAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkCgogICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHsKICAgICAgLy8gSWYgd2UgbmVlZCB0byBjb21wcmVzcyB0ZXh0LCBjaGFuZ2UgZW5jb2RpbmcgdG8gdXRmOC4KICAgICAgZGljdCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihvcHQuZGljdGlvbmFyeSk7CiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7CiAgICAgIGRpY3QgPSBuZXcgVWludDhBcnJheShvcHQuZGljdGlv
bmFyeSk7CiAgICB9IGVsc2UgewogICAgICBkaWN0ID0gb3B0LmRpY3Rpb25hcnk7CiAgICB9CgogICAgc3RhdHVzID0gemxpYl9kZWZsYXRlLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgZGljdCk7CgogICAgaWYgKHN0YXR1cyAhPT0gWl9PSykgewogICAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pOwogICAgfQoKICAgIHRoaXMuX2RpY3Rfc2V0ID0gdHJ1ZTsKICB9Cn0KLyoqCiAqIERlZmxhdGUjcHVzaChkYXRhWywgbW9kZV0pIC0+IEJvb2xlYW4KICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fEFy
cmF5QnVmZmVyfFN0cmluZyk6IGlucHV0IGRhdGEuIFN0cmluZ3Mgd2lsbCBiZQogKiAgIGNvbnZlcnRlZCB0byB1dGY4IGJ5dGUgc2VxdWVuY2UuCiAqIC0gbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy4KICogICBTZWUgY29uc3RhbnRzLiBTa2lwcGVkIG9yIGBmYWxzZWAgbWVhbnMgWl9OT19GTFVTSCwgYHRydWVgIG1lYW5zIFpfRklOSVNILgogKgogKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGRlZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0RlZmxh
dGUjb25EYXRhXV0gY2FsbHMgd2l0aAogKiBuZXcgY29tcHJlc3NlZCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIFRoZSBsYXN0IGRhdGEgYmxvY2sgbXVzdCBoYXZlCiAqIG1vZGUgWl9GSU5JU0ggKG9yIGB0cnVlYCkuIFRoYXQgd2lsbCBmbHVzaCBpbnRlcm5hbCBwZW5kaW5nIGJ1ZmZlcnMgYW5kIGNhbGwKICogW1tEZWZsYXRlI29uRW5kXV0uIEZvciBpbnRlcmltIGV4cGxpY2l0IGZsdXNoZXMgKHdpdGhvdXQgZW5kaW5nIHRoZSBzdHJlYW0pIHlvdQogKiBjYW4gdXNlIG1vZGUgWl9TWU5DX0ZMVVNILCBr
ZWVwaW5nIHRoZSBjb21wcmVzc2lvbiBjb250ZXh0LgogKgogKiBPbiBmYWlsIGNhbGwgW1tEZWZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuCiAqCiAqIFdlIHN0cm9uZ2x5IHJlY29tbWVuZCB0byB1c2UgYFVpbnQ4QXJyYXlgIG9uIGlucHV0IGZvciBiZXN0IHNwZWVkIChvdXRwdXQKICogYXJyYXkgZm9ybWF0IGlzIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkpLiBBbHNvLCBkb24ndCBza2lwIGxhc3QgcGFyYW0gYW5kIGFsd2F5cwogKiB1c2UgdGhlIHNhbWUgdHlwZSBpbiB5b3VyIGNvZGUg
KGJvb2xlYW4gb3IgbnVtYmVyKS4gVGhhdCB3aWxsIGltcHJvdmUgSlMgc3BlZWQuCiAqCiAqIEZvciByZWd1bGFyIGBBcnJheWAtcyBtYWtlIHN1cmUgYWxsIGVsZW1lbnRzIGFyZSBbMC4uMjU1XS4KICoKICogIyMjIyMgRXhhbXBsZQogKgogKiBgYGBqYXZhc2NyaXB0CiAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3MKICogLi4uCiAqIHB1c2goY2h1bmssIHRydWUpOyAgLy8gcHVzaCBsYXN0IGNodW5rCiAqIGBgYAogKiovCgoKRGVmbGF0ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9u
IChkYXRhLCBtb2RlKSB7CiAgdmFyIHN0cm0gPSB0aGlzLnN0cm07CiAgdmFyIGNodW5rU2l6ZSA9IHRoaXMub3B0aW9ucy5jaHVua1NpemU7CgogIHZhciBzdGF0dXMsIF9tb2RlOwoKICBpZiAodGhpcy5lbmRlZCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgX21vZGUgPSBtb2RlID09PSB+fm1vZGUgPyBtb2RlIDogbW9kZSA9PT0gdHJ1ZSA/IFpfRklOSVNIIDogWl9OT19GTFVTSDsgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZAoKICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7CiAgICAvLyBJZiB3ZSBuZWVk
IHRvIGNvbXByZXNzIHRleHQsIGNoYW5nZSBlbmNvZGluZyB0byB1dGY4LgogICAgc3RybS5pbnB1dCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihkYXRhKTsKICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHsKICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTsKICB9IGVsc2UgewogICAgc3RybS5pbnB1dCA9IGRhdGE7CiAgfQoKICBzdHJtLm5leHRfaW4gPSAwOwogIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDsKCiAgZG8gewogICAgaWYg
KHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IHV0aWxzLkJ1ZjgoY2h1bmtTaXplKTsKICAgICAgc3RybS5uZXh0X291dCA9IDA7CiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplOwogICAgfQoKICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlKHN0cm0sIF9tb2RlKTsKICAgIC8qIG5vIGJhZCByZXR1cm4gdmFsdWUgKi8KCiAgICBpZiAoc3RhdHVzICE9PSBaX1NUUkVBTV9FTkQgJiYgc3RhdHVzICE9PSBaX09LKSB7CiAgICAgIHRoaXMub25FbmQoc3RhdHVzKTsKICAg
ICAgdGhpcy5lbmRlZCA9IHRydWU7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDAgfHwgc3RybS5hdmFpbF9pbiA9PT0gMCAmJiAoX21vZGUgPT09IFpfRklOSVNIIHx8IF9tb2RlID09PSBaX1NZTkNfRkxVU0gpKSB7CiAgICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgdGhpcy5vbkRhdGEoc3RyaW5ncy5idWYyYmluc3RyaW5nKHV0aWxzLnNocmlua0J1ZihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCkpKTsKICAgICAgfSBlbHNlIHsK
ICAgICAgICB0aGlzLm9uRGF0YSh1dGlscy5zaHJpbmtCdWYoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpKTsKICAgICAgfQogICAgfQogIH0gd2hpbGUgKChzdHJtLmF2YWlsX2luID4gMCB8fCBzdHJtLmF2YWlsX291dCA9PT0gMCkgJiYgc3RhdHVzICE9PSBaX1NUUkVBTV9FTkQpOyAvLyBGaW5hbGl6ZSBvbiB0aGUgbGFzdCBjaHVuay4KCgogIGlmIChfbW9kZSA9PT0gWl9GSU5JU0gpIHsKICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlRW5kKHRoaXMuc3RybSk7CiAgICB0aGlzLm9uRW5kKHN0YXR1cyk7CiAg
ICB0aGlzLmVuZGVkID0gdHJ1ZTsKICAgIHJldHVybiBzdGF0dXMgPT09IFpfT0s7CiAgfSAvLyBjYWxsYmFjayBpbnRlcmltIHJlc3VsdHMgaWYgWl9TWU5DX0ZMVVNILgoKCiAgaWYgKF9tb2RlID09PSBaX1NZTkNfRkxVU0gpIHsKICAgIHRoaXMub25FbmQoWl9PSyk7CiAgICBzdHJtLmF2YWlsX291dCA9IDA7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHJldHVybiB0cnVlOwp9OwovKioKICogRGVmbGF0ZSNvbkRhdGEoY2h1bmspIC0+IFZvaWQKICogLSBjaHVuayAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBvdXRwdXQg
ZGF0YS4gVHlwZSBvZiBhcnJheSBkZXBlbmRzCiAqICAgb24ganMgZW5naW5lIHN1cHBvcnQuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsIGVhY2ggY2h1bmsKICogICB3aWxsIGJlIHN0cmluZy4KICoKICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWUKICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci4KICoqLwoKCkRlZmxhdGUucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0
aW9uIChjaHVuaykgewogIHRoaXMuY2h1bmtzLnB1c2goY2h1bmspOwp9OwovKioKICogRGVmbGF0ZSNvbkVuZChzdGF0dXMpIC0+IFZvaWQKICogLSBzdGF0dXMgKE51bWJlcik6IGRlZmxhdGUgc3RhdHVzLiAwIChaX09LKSBvbiBzdWNjZXNzLAogKiAgIG90aGVyIGlmIG5vdC4KICoKICogQ2FsbGVkIG9uY2UgYWZ0ZXIgeW91IHRlbGwgZGVmbGF0ZSB0aGF0IHRoZSBpbnB1dCBzdHJlYW0gaXMKICogY29tcGxldGUgKFpfRklOSVNIKSBvciBzaG91bGQgYmUgZmx1c2hlZCAoWl9TWU5DX0ZMVVNIKQogKiBvciBpZiBhbiBlcnJv
ciBoYXBwZW5lZC4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcywKICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy4KICoqLwoKCkRlZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykgewogIC8vIE9uIHN1Y2Nlc3MgLSBqb2luCiAgaWYgKHN0YXR1cyA9PT0gWl9PSykgewogICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHsKICAgICAgdGhpcy5yZXN1bHQgPSB0aGlzLmNodW5rcy5qb2luKCcnKTsKICAgIH0gZWxzZSB7CiAg
ICAgIHRoaXMucmVzdWx0ID0gdXRpbHMuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcyk7CiAgICB9CiAgfQoKICB0aGlzLmNodW5rcyA9IFtdOwogIHRoaXMuZXJyID0gc3RhdHVzOwogIHRoaXMubXNnID0gdGhpcy5zdHJtLm1zZzsKfTsKLyoqCiAqIGRlZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZwogKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy4KICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy4K
ICoKICogQ29tcHJlc3MgYGRhdGFgIHdpdGggZGVmbGF0ZSBhbGdvcml0aG0gYW5kIGBvcHRpb25zYC4KICoKICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOgogKgogKiAtIGxldmVsCiAqIC0gd2luZG93Qml0cwogKiAtIG1lbUxldmVsCiAqIC0gc3RyYXRlZ3kKICogLSBkaWN0aW9uYXJ5CiAqCiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZCkKICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuCiAqCiAqIFN1Z2FyIChvcHRpb25z
KToKICoKICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeQogKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS4KICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgImJpbmFyeSBzdHJpbmciCiAqICAgIChlYWNoIGNoYXIgY29kZSBbMC4uMjU1XSkKICoKICogIyMjIyMgRXhhbXBsZToKICoKICogYGBgamF2YXNjcmlwdAogKiB2YXIgcGFrbyA9IHJlcXVp
cmUoJ3Bha28nKQogKiAgICwgZGF0YSA9IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSk7CiAqCiAqIGNvbnNvbGUubG9nKHBha28uZGVmbGF0ZShkYXRhKSk7CiAqIGBgYAogKiovCgoKZnVuY3Rpb24gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucykgewogIHZhciBkZWZsYXRvciA9IG5ldyBEZWZsYXRlKG9wdGlvbnMpOwogIGRlZmxhdG9yLnB1c2goaW5wdXQsIHRydWUpOyAvLyBUaGF0IHdpbGwgbmV2ZXIgaGFwcGVucywgaWYgeW91IGRvbid0IGNoZWF0IHdpdGggb3B0aW9ucyA6KQoKICBpZiAoZGVmbGF0b3IuZXJyKSB7
CiAgICB0aHJvdyBkZWZsYXRvci5tc2cgfHwgbXNnW2RlZmxhdG9yLmVycl07CiAgfQoKICByZXR1cm4gZGVmbGF0b3IucmVzdWx0Owp9Ci8qKgogKiBkZWZsYXRlUmF3KGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmcKICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuCiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuCiAqCiAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlcyByYXcgZGF0YSwg
d2l0aG91dCB3cmFwcGVyCiAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS4KICoqLwoKCmZ1bmN0aW9uIGRlZmxhdGVSYXcoaW5wdXQsIG9wdGlvbnMpIHsKICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICBvcHRpb25zLnJhdyA9IHRydWU7CiAgcmV0dXJuIGRlZmxhdGUoaW5wdXQsIG9wdGlvbnMpOwp9Ci8qKgogKiBnemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmcKICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuCiAqIC0gb3B0
aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuCiAqCiAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkIG9mCiAqIGRlZmxhdGUgb25lLgogKiovCgoKZnVuY3Rpb24gZ3ppcChpbnB1dCwgb3B0aW9ucykgewogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogIG9wdGlvbnMuZ3ppcCA9IHRydWU7CiAgcmV0dXJuIGRlZmxhdGUoaW5wdXQsIG9wdGlvbnMpOwp9CgpleHBvcnRzLkRlZmxhdGUgPSBEZWZsYXRlOwpleHBvcnRzLmRlZmxhdGUgPSBkZWZsYXRlOwpl
eHBvcnRzLmRlZmxhdGVSYXcgPSBkZWZsYXRlUmF3OwpleHBvcnRzLmd6aXAgPSBnemlwOwoKfSx7Ii4vdXRpbHMvY29tbW9uIjozMzMsIi4vdXRpbHMvc3RyaW5ncyI6MzM0LCIuL3psaWIvZGVmbGF0ZSI6MzM4LCIuL3psaWIvbWVzc2FnZXMiOjM0MywiLi96bGliL3pzdHJlYW0iOjM0NX1dLDMzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciB6bGliX2luZmxhdGUgPSByZXF1aXJlKCcuL3psaWIvaW5mbGF0ZScpOwoKdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9jb21t
b24nKTsKCnZhciBzdHJpbmdzID0gcmVxdWlyZSgnLi91dGlscy9zdHJpbmdzJyk7Cgp2YXIgYyA9IHJlcXVpcmUoJy4vemxpYi9jb25zdGFudHMnKTsKCnZhciBtc2cgPSByZXF1aXJlKCcuL3psaWIvbWVzc2FnZXMnKTsKCnZhciBaU3RyZWFtID0gcmVxdWlyZSgnLi96bGliL3pzdHJlYW0nKTsKCnZhciBHWmhlYWRlciA9IHJlcXVpcmUoJy4vemxpYi9nemhlYWRlcicpOwoKdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsKLyoqCiAqIGNsYXNzIEluZmxhdGUKICoKICogR2VuZXJpYyBKUy1zdHlsZSB3
cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZAogKiBzdHJlYW1pbmcgYmVoYXZpb3VyIC0gdXNlIG1vcmUgc2ltcGxlIGZ1bmN0aW9uczogW1tpbmZsYXRlXV0KICogYW5kIFtbaW5mbGF0ZVJhd11dLgogKiovCgovKiBpbnRlcm5hbAogKiBpbmZsYXRlLmNodW5rcyAtPiBBcnJheQogKgogKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbSW5mbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi4KICoqLwoKLyoqCiAqIEluZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nCiAqCiAq
IFVuY29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbSW5mbGF0ZSNvbkRhdGFdXQogKiBhbmQgW1tJbmZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rCiAqIChjYWxsIFtbSW5mbGF0ZSNwdXNoXV0gd2l0aCBgWl9GSU5JU0hgIC8gYHRydWVgIHBhcmFtKSBvciBpZiB5b3UKICogcHVzaCBhIGNodW5rIHdpdGggZXhwbGljaXQgZmx1c2ggKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoCiAqIGBaX1NZTkNfRkxVU0hgIHBhcmFtKS4KICoqLwoKLyoqCiAq
IEluZmxhdGUuZXJyIC0+IE51bWJlcgogKgogKiBFcnJvciBjb2RlIGFmdGVyIGluZmxhdGUgZmluaXNoZWQuIDAgKFpfT0spIG9uIHN1Y2Nlc3MuCiAqIFNob3VsZCBiZSBjaGVja2VkIGlmIGJyb2tlbiBkYXRhIHBvc3NpYmxlLgogKiovCgovKioKICogSW5mbGF0ZS5tc2cgLT4gU3RyaW5nCiAqCiAqIEVycm9yIG1lc3NhZ2UsIGlmIFtbSW5mbGF0ZS5lcnJdXSAhPSAwCiAqKi8KCi8qKgogKiBuZXcgSW5mbGF0ZShvcHRpb25zKQogKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLgogKgogKiBDcmVh
dGVzIG5ldyBpbmZsYXRvciBpbnN0YW5jZSB3aXRoIHNwZWNpZmllZCBwYXJhbXMuIFRocm93cyBleGNlcHRpb24KICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6CiAqCiAqIC0gYHdpbmRvd0JpdHNgCiAqIC0gYGRpY3Rpb25hcnlgCiAqCiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZCkKICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuCiAqCiAqIEFkZGl0aW9uYWwgb3B0aW9ucywgZm9yIGludGVybmFsIG5l
ZWRzOgogKgogKiAtIGBjaHVua1NpemVgIC0gc2l6ZSBvZiBnZW5lcmF0ZWQgZGF0YSBjaHVua3MgKDE2SyBieSBkZWZhdWx0KQogKiAtIGByYXdgIChCb29sZWFuKSAtIGRvIHJhdyBpbmZsYXRlCiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZAogKiAgIGZyb20gdXRmOCB0byB1dGYxNiAoamF2YXNjcmlwdCkgc3RyaW5nLiBXaGVuIHN0cmluZyBvdXRwdXQgcmVxdWVzdGVkLAogKiAgIGNodW5rIGxlbmd0aCBjYW4gZGlmZmVyIGZyb20gYGNodW5r
U2l6ZWAsIGRlcGVuZGluZyBvbiBjb250ZW50LgogKgogKiBCeSBkZWZhdWx0LCB3aGVuIG5vIG9wdGlvbnMgc2V0LCBhdXRvZGV0ZWN0IGRlZmxhdGUvZ3ppcCBkYXRhIGZvcm1hdCB2aWEKICogd3JhcHBlciBoZWFkZXIuCiAqCiAqICMjIyMjIEV4YW1wbGU6CiAqCiAqIGBgYGphdmFzY3JpcHQKICogdmFyIHBha28gPSByZXF1aXJlKCdwYWtvJykKICogICAsIGNodW5rMSA9IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSkKICogICAsIGNodW5rMiA9IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4
LDE5XSk7CiAqCiAqIHZhciBpbmZsYXRlID0gbmV3IHBha28uSW5mbGF0ZSh7IGxldmVsOiAzfSk7CiAqCiAqIGluZmxhdGUucHVzaChjaHVuazEsIGZhbHNlKTsKICogaW5mbGF0ZS5wdXNoKGNodW5rMiwgdHJ1ZSk7ICAvLyB0cnVlIC0+IGxhc3QgY2h1bmsKICoKICogaWYgKGluZmxhdGUuZXJyKSB7IHRocm93IG5ldyBFcnJvcihpbmZsYXRlLmVycik7IH0KICoKICogY29uc29sZS5sb2coaW5mbGF0ZS5yZXN1bHQpOwogKiBgYGAKICoqLwoKZnVuY3Rpb24gSW5mbGF0ZShvcHRpb25zKSB7CiAgaWYgKCEodGhpcyBpbnN0YW5j
ZW9mIEluZmxhdGUpKSByZXR1cm4gbmV3IEluZmxhdGUob3B0aW9ucyk7CiAgdGhpcy5vcHRpb25zID0gdXRpbHMuYXNzaWduKHsKICAgIGNodW5rU2l6ZTogMTYzODQsCiAgICB3aW5kb3dCaXRzOiAwLAogICAgdG86ICcnCiAgfSwgb3B0aW9ucyB8fCB7fSk7CiAgdmFyIG9wdCA9IHRoaXMub3B0aW9uczsgLy8gRm9yY2Ugd2luZG93IHNpemUgZm9yIGByYXdgIGRhdGEsIGlmIG5vdCBzZXQgZGlyZWN0bHksCiAgLy8gYmVjYXVzZSB3ZSBoYXZlIG5vIGhlYWRlciBmb3IgYXV0b2RldGVjdC4KCiAgaWYgKG9wdC5yYXcgJiYgb3B0
LndpbmRvd0JpdHMgPj0gMCAmJiBvcHQud2luZG93Qml0cyA8IDE2KSB7CiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0czsKCiAgICBpZiAob3B0LndpbmRvd0JpdHMgPT09IDApIHsKICAgICAgb3B0LndpbmRvd0JpdHMgPSAtMTU7CiAgICB9CiAgfSAvLyBJZiBgd2luZG93Qml0c2Agbm90IGRlZmluZWQgKGFuZCBtb2RlIG5vdCByYXcpIC0gc2V0IGF1dG9kZXRlY3QgZmxhZyBmb3IgZ3ppcC9kZWZsYXRlCgoKICBpZiAob3B0LndpbmRvd0JpdHMgPj0gMCAmJiBvcHQud2luZG93Qml0cyA8IDE2ICYmICEob3B0
aW9ucyAmJiBvcHRpb25zLndpbmRvd0JpdHMpKSB7CiAgICBvcHQud2luZG93Qml0cyArPSAzMjsKICB9IC8vIEd6aXAgaGVhZGVyIGhhcyBubyBpbmZvIGFib3V0IHdpbmRvd3Mgc2l6ZSwgd2UgY2FuIGRvIGF1dG9kZXRlY3Qgb25seQogIC8vIGZvciBkZWZsYXRlLiBTbywgaWYgd2luZG93IHNpemUgbm90IHNldCwgZm9yY2UgaXQgdG8gbWF4IHdoZW4gZ3ppcCBwb3NzaWJsZQoKCiAgaWYgKG9wdC53aW5kb3dCaXRzID4gMTUgJiYgb3B0LndpbmRvd0JpdHMgPCA0OCkgewogICAgLy8gYml0IDMgKDE2KSAtPiBnemlwcGVkIGRh
dGEKICAgIC8vIGJpdCA0ICgzMikgLT4gYXV0b2RldGVjdCBnemlwL2RlZmxhdGUKICAgIGlmICgob3B0LndpbmRvd0JpdHMgJiAxNSkgPT09IDApIHsKICAgICAgb3B0LndpbmRvd0JpdHMgfD0gMTU7CiAgICB9CiAgfQoKICB0aGlzLmVyciA9IDA7IC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKQoKICB0aGlzLm1zZyA9ICcnOyAvLyBlcnJvciBtZXNzYWdlCgogIHRoaXMuZW5kZWQgPSBmYWxzZTsgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzCgogIHRoaXMuY2h1bmtzID0gW107IC8v
IGNodW5rcyBvZiBjb21wcmVzc2VkIGRhdGEKCiAgdGhpcy5zdHJtID0gbmV3IFpTdHJlYW0oKTsKICB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDsKICB2YXIgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGVJbml0Mih0aGlzLnN0cm0sIG9wdC53aW5kb3dCaXRzKTsKCiAgaWYgKHN0YXR1cyAhPT0gYy5aX09LKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pOwogIH0KCiAgdGhpcy5oZWFkZXIgPSBuZXcgR1poZWFkZXIoKTsKICB6bGliX2luZmxhdGUuaW5mbGF0ZUdldEhlYWRlcih0aGlzLnN0cm0sIHRoaXMu
aGVhZGVyKTsgLy8gU2V0dXAgZGljdGlvbmFyeQoKICBpZiAob3B0LmRpY3Rpb25hcnkpIHsKICAgIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWQKICAgIGlmICh0eXBlb2Ygb3B0LmRpY3Rpb25hcnkgPT09ICdzdHJpbmcnKSB7CiAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTsKICAgIH0gZWxzZSBpZiAodG9TdHJpbmcuY2FsbChvcHQuZGljdGlvbmFyeSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHsKICAgICAgb3B0LmRpY3Rpb25hcnkgPSBuZXcgVWludDhBcnJh
eShvcHQuZGljdGlvbmFyeSk7CiAgICB9CgogICAgaWYgKG9wdC5yYXcpIHsKICAgICAgLy9JbiByYXcgbW9kZSB3ZSBuZWVkIHRvIHNldCB0aGUgZGljdGlvbmFyeSBlYXJseQogICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBvcHQuZGljdGlvbmFyeSk7CgogICAgICBpZiAoc3RhdHVzICE9PSBjLlpfT0spIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pOwogICAgICB9CiAgICB9CiAgfQp9Ci8qKgogKiBJbmZsYXRlI3B1c2goZGF0YVssIG1vZGVd
KSAtPiBCb29sZWFuCiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxBcnJheUJ1ZmZlcnxTdHJpbmcpOiBpbnB1dCBkYXRhCiAqIC0gbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy4KICogICBTZWUgY29uc3RhbnRzLiBTa2lwcGVkIG9yIGBmYWxzZWAgbWVhbnMgWl9OT19GTFVTSCwgYHRydWVgIG1lYW5zIFpfRklOSVNILgogKgogKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGluZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0luZmxhdGUjb25EYXRhXV0g
Y2FsbHMgd2l0aAogKiBuZXcgb3V0cHV0IGNodW5rcy4gUmV0dXJucyBgdHJ1ZWAgb24gc3VjY2Vzcy4gVGhlIGxhc3QgZGF0YSBibG9jayBtdXN0IGhhdmUKICogbW9kZSBaX0ZJTklTSCAob3IgYHRydWVgKS4gVGhhdCB3aWxsIGZsdXNoIGludGVybmFsIHBlbmRpbmcgYnVmZmVycyBhbmQgY2FsbAogKiBbW0luZmxhdGUjb25FbmRdXS4gRm9yIGludGVyaW0gZXhwbGljaXQgZmx1c2hlcyAod2l0aG91dCBlbmRpbmcgdGhlIHN0cmVhbSkgeW91CiAqIGNhbiB1c2UgbW9kZSBaX1NZTkNfRkxVU0gsIGtlZXBpbmcgdGhlIGRlY29t
cHJlc3Npb24gY29udGV4dC4KICoKICogT24gZmFpbCBjYWxsIFtbSW5mbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLgogKgogKiBXZSBzdHJvbmdseSByZWNvbW1lbmQgdG8gdXNlIGBVaW50OEFycmF5YCBvbiBpbnB1dCBmb3IgYmVzdCBzcGVlZCAob3V0cHV0CiAqIGZvcm1hdCBpcyBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5KS4gQWxzbywgZG9uJ3Qgc2tpcCBsYXN0IHBhcmFtIGFuZCBhbHdheXMKICogdXNlIHRoZSBzYW1lIHR5cGUgaW4geW91ciBjb2RlIChib29sZWFuIG9yIG51bWJlciku
IFRoYXQgd2lsbCBpbXByb3ZlIEpTIHNwZWVkLgogKgogKiBGb3IgcmVndWxhciBgQXJyYXlgLXMgbWFrZSBzdXJlIGFsbCBlbGVtZW50cyBhcmUgWzAuLjI1NV0uCiAqCiAqICMjIyMjIEV4YW1wbGUKICoKICogYGBgamF2YXNjcmlwdAogKiBwdXNoKGNodW5rLCBmYWxzZSk7IC8vIHB1c2ggb25lIG9mIGRhdGEgY2h1bmtzCiAqIC4uLgogKiBwdXNoKGNodW5rLCB0cnVlKTsgIC8vIHB1c2ggbGFzdCBjaHVuawogKiBgYGAKICoqLwoKCkluZmxhdGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSwgbW9kZSkgewogIHZh
ciBzdHJtID0gdGhpcy5zdHJtOwogIHZhciBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplOwogIHZhciBkaWN0aW9uYXJ5ID0gdGhpcy5vcHRpb25zLmRpY3Rpb25hcnk7CgogIHZhciBzdGF0dXMsIF9tb2RlOwoKICB2YXIgbmV4dF9vdXRfdXRmOCwgdGFpbCwgdXRmOHN0cjsgLy8gRmxhZyB0byBwcm9wZXJseSBwcm9jZXNzIFpfQlVGX0VSUk9SIG9uIHRlc3RpbmcgaW5mbGF0ZSBjYWxsCiAgLy8gd2hlbiB3ZSBjaGVjayB0aGF0IGFsbCBvdXRwdXQgZGF0YSB3YXMgZmx1c2hlZC4KCiAgdmFyIGFsbG93QnVmRXJy
b3IgPSBmYWxzZTsKCiAgaWYgKHRoaXMuZW5kZWQpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIF9tb2RlID0gbW9kZSA9PT0gfn5tb2RlID8gbW9kZSA6IG1vZGUgPT09IHRydWUgPyBjLlpfRklOSVNIIDogYy5aX05PX0ZMVVNIOyAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkCgogIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHsKICAgIC8vIE9ubHkgYmluYXJ5IHN0cmluZ3MgY2FuIGJlIGRlY29tcHJlc3NlZCBvbiBwcmFjdGljZQogICAgc3RybS5pbnB1dCA9IHN0cmluZ3MuYmluc3RyaW5nMmJ1ZihkYXRhKTsK
ICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHsKICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTsKICB9IGVsc2UgewogICAgc3RybS5pbnB1dCA9IGRhdGE7CiAgfQoKICBzdHJtLm5leHRfaW4gPSAwOwogIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDsKCiAgZG8gewogICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IHV0aWxzLkJ1ZjgoY2h1bmtTaXplKTsKICAgICAgc3RybS5uZXh0
X291dCA9IDA7CiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplOwogICAgfQoKICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlKHN0cm0sIGMuWl9OT19GTFVTSCk7CiAgICAvKiBubyBiYWQgcmV0dXJuIHZhbHVlICovCgogICAgaWYgKHN0YXR1cyA9PT0gYy5aX05FRURfRElDVCAmJiBkaWN0aW9uYXJ5KSB7CiAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIGRpY3Rpb25hcnkpOwogICAgfQoKICAgIGlmIChzdGF0dXMgPT09IGMuWl9CVUZfRVJST1Ig
JiYgYWxsb3dCdWZFcnJvciA9PT0gdHJ1ZSkgewogICAgICBzdGF0dXMgPSBjLlpfT0s7CiAgICAgIGFsbG93QnVmRXJyb3IgPSBmYWxzZTsKICAgIH0KCiAgICBpZiAoc3RhdHVzICE9PSBjLlpfU1RSRUFNX0VORCAmJiBzdGF0dXMgIT09IGMuWl9PSykgewogICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7CiAgICAgIHRoaXMuZW5kZWQgPSB0cnVlOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgaWYgKHN0cm0ubmV4dF9vdXQpIHsKICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gYy5aX1NU
UkVBTV9FTkQgfHwgc3RybS5hdmFpbF9pbiA9PT0gMCAmJiAoX21vZGUgPT09IGMuWl9GSU5JU0ggfHwgX21vZGUgPT09IGMuWl9TWU5DX0ZMVVNIKSkgewogICAgICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICBuZXh0X291dF91dGY4ID0gc3RyaW5ncy51dGY4Ym9yZGVyKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KTsKICAgICAgICAgIHRhaWwgPSBzdHJtLm5leHRfb3V0IC0gbmV4dF9vdXRfdXRmODsKICAgICAgICAgIHV0ZjhzdHIgPSBzdHJpbmdzLmJ1ZjJzdHJpbmcoc3RybS5v
dXRwdXQsIG5leHRfb3V0X3V0ZjgpOyAvLyBtb3ZlIHRhaWwKCiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gdGFpbDsKICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplIC0gdGFpbDsKCiAgICAgICAgICBpZiAodGFpbCkgewogICAgICAgICAgICB1dGlscy5hcnJheVNldChzdHJtLm91dHB1dCwgc3RybS5vdXRwdXQsIG5leHRfb3V0X3V0ZjgsIHRhaWwsIDApOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMub25EYXRhKHV0ZjhzdHIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLm9uRGF0YSh1
dGlscy5zaHJpbmtCdWYoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gLy8gV2hlbiBubyBtb3JlIGlucHV0IGRhdGEsIHdlIHNob3VsZCBjaGVjayB0aGF0IGludGVybmFsIGluZmxhdGUgYnVmZmVycwogICAgLy8gYXJlIGZsdXNoZWQuIFRoZSBvbmx5IHdheSB0byBkbyBpdCB3aGVuIGF2YWlsX291dCA9IDAgLSBydW4gb25lIG1vcmUKICAgIC8vIGluZmxhdGUgcGFzcy4gQnV0IGlmIG91dHB1dCBkYXRhIG5vdCBleGlzdHMsIGluZmxhdGUgcmV0dXJuIFpfQlVGX0VSUk9SLgog
ICAgLy8gSGVyZSB3ZSBzZXQgZmxhZyB0byBwcm9jZXNzIHRoaXMgZXJyb3IgcHJvcGVybHkuCiAgICAvLwogICAgLy8gTk9URS4gRGVmbGF0ZSBkb2VzIG5vdCByZXR1cm4gZXJyb3IgaW4gdGhpcyBjYXNlIGFuZCBkb2VzIG5vdCBuZWVkcyBzdWNoCiAgICAvLyBsb2dpYy4KCgogICAgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgYWxsb3dCdWZFcnJvciA9IHRydWU7CiAgICB9CiAgfSB3aGlsZSAoKHN0cm0uYXZhaWxfaW4gPiAwIHx8IHN0cm0uYXZhaWxfb3V0ID09PSAw
KSAmJiBzdGF0dXMgIT09IGMuWl9TVFJFQU1fRU5EKTsKCiAgaWYgKHN0YXR1cyA9PT0gYy5aX1NUUkVBTV9FTkQpIHsKICAgIF9tb2RlID0gYy5aX0ZJTklTSDsKICB9IC8vIEZpbmFsaXplIG9uIHRoZSBsYXN0IGNodW5rLgoKCiAgaWYgKF9tb2RlID09PSBjLlpfRklOSVNIKSB7CiAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pOwogICAgdGhpcy5vbkVuZChzdGF0dXMpOwogICAgdGhpcy5lbmRlZCA9IHRydWU7CiAgICByZXR1cm4gc3RhdHVzID09PSBjLlpfT0s7CiAgfSAvLyBjYWxsYmFj
ayBpbnRlcmltIHJlc3VsdHMgaWYgWl9TWU5DX0ZMVVNILgoKCiAgaWYgKF9tb2RlID09PSBjLlpfU1lOQ19GTFVTSCkgewogICAgdGhpcy5vbkVuZChjLlpfT0spOwogICAgc3RybS5hdmFpbF9vdXQgPSAwOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfTsKLyoqCiAqIEluZmxhdGUjb25EYXRhKGNodW5rKSAtPiBWb2lkCiAqIC0gY2h1bmsgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogb3V0cHV0IGRhdGEuIFR5cGUgb2YgYXJyYXkgZGVwZW5kcwogKiAgIG9uIGpzIGVuZ2luZSBzdXBwb3J0LiBXaGVu
IHN0cmluZyBvdXRwdXQgcmVxdWVzdGVkLCBlYWNoIGNodW5rCiAqICAgd2lsbCBiZSBzdHJpbmcuCiAqCiAqIEJ5IGRlZmF1bHQsIHN0b3JlcyBkYXRhIGJsb2NrcyBpbiBgY2h1bmtzW11gIHByb3BlcnR5IGFuZCBnbHVlCiAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuCiAqKi8KCgpJbmZsYXRlLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoY2h1bmspIHsKICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTsKfTsKLyoqCiAqIEluZmxhdGUj
b25FbmQoc3RhdHVzKSAtPiBWb2lkCiAqIC0gc3RhdHVzIChOdW1iZXIpOiBpbmZsYXRlIHN0YXR1cy4gMCAoWl9PSykgb24gc3VjY2VzcywKICogICBvdGhlciBpZiBub3QuCiAqCiAqIENhbGxlZCBlaXRoZXIgYWZ0ZXIgeW91IHRlbGwgaW5mbGF0ZSB0aGF0IHRoZSBpbnB1dCBzdHJlYW0gaXMKICogY29tcGxldGUgKFpfRklOSVNIKSBvciBzaG91bGQgYmUgZmx1c2hlZCAoWl9TWU5DX0ZMVVNIKQogKiBvciBpZiBhbiBlcnJvciBoYXBwZW5lZC4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcywKICogZnJlZSBt
ZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy4KICoqLwoKCkluZmxhdGUucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykgewogIC8vIE9uIHN1Y2Nlc3MgLSBqb2luCiAgaWYgKHN0YXR1cyA9PT0gYy5aX09LKSB7CiAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykgewogICAgICAvLyBHbHVlICYgY29udmVydCBoZXJlLCB1bnRpbCB3ZSB0ZWFjaCBwYWtvIHRvIHNlbmQKICAgICAgLy8gdXRmOCBhbGlnbmVkIHN0cmluZ3MgdG8gb25EYXRhCiAgICAgIHRoaXMucmVz
dWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnJlc3VsdCA9IHV0aWxzLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpOwogICAgfQogIH0KCiAgdGhpcy5jaHVua3MgPSBbXTsKICB0aGlzLmVyciA9IHN0YXR1czsKICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7Cn07Ci8qKgogKiBpbmZsYXRlKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmcKICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy4K
ICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy4KICoKICogRGVjb21wcmVzcyBgZGF0YWAgd2l0aCBpbmZsYXRlL3VuZ3ppcCBhbmQgYG9wdGlvbnNgLiBBdXRvZGV0ZWN0CiAqIGZvcm1hdCB2aWEgd3JhcHBlciBoZWFkZXIgYnkgZGVmYXVsdC4gVGhhdCdzIHdoeSB3ZSBkb24ndCBwcm92aWRlCiAqIHNlcGFyYXRlIGB1bmd6aXBgIG1ldGhvZC4KICoKICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOgogKgogKiAtIHdpbmRvd0JpdHMKICoKICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZh
bmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKQogKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICoKICogU3VnYXIgKG9wdGlvbnMpOgogKgogKiAtIGByYXdgIChCb29sZWFuKSAtIHNheSB0aGF0IHdlIHdvcmsgd2l0aCByYXcgc3RyZWFtLCBpZiB5b3UgZG9uJ3Qgd2lzaCB0byBzcGVjaWZ5CiAqICAgbmVnYXRpdmUgd2luZG93Qml0cyBpbXBsaWNpdGx5LgogKiAtIGB0b2AgKFN0cmluZykgLSBpZiBlcXVhbCB0byAnc3RyaW5nJywgdGhlbiByZXN1bHQgd2lsbCBiZSBjb252ZXJ0ZWQKICogICBmcm9t
IHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCwKICogICBjaHVuayBsZW5ndGggY2FuIGRpZmZlciBmcm9tIGBjaHVua1NpemVgLCBkZXBlbmRpbmcgb24gY29udGVudC4KICoKICoKICogIyMjIyMgRXhhbXBsZToKICoKICogYGBgamF2YXNjcmlwdAogKiB2YXIgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKQogKiAgICwgaW5wdXQgPSBwYWtvLmRlZmxhdGUoWzEsMiwzLDQsNSw2LDcsOCw5XSkKICogICAsIG91dHB1dDsKICoKICogdHJ5IHsKICogICBvdXRwdXQgPSBw
YWtvLmluZmxhdGUoaW5wdXQpOwogKiB9IGNhdGNoIChlcnIpCiAqICAgY29uc29sZS5sb2coZXJyKTsKICogfQogKiBgYGAKICoqLwoKCmZ1bmN0aW9uIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpIHsKICB2YXIgaW5mbGF0b3IgPSBuZXcgSW5mbGF0ZShvcHRpb25zKTsKICBpbmZsYXRvci5wdXNoKGlucHV0LCB0cnVlKTsgLy8gVGhhdCB3aWxsIG5ldmVyIGhhcHBlbnMsIGlmIHlvdSBkb24ndCBjaGVhdCB3aXRoIG9wdGlvbnMgOikKCiAgaWYgKGluZmxhdG9yLmVycikgewogICAgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1zZ1tp
bmZsYXRvci5lcnJdOwogIH0KCiAgcmV0dXJuIGluZmxhdG9yLnJlc3VsdDsKfQovKioKICogaW5mbGF0ZVJhdyhkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nCiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuCiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuCiAqCiAqIFRoZSBzYW1lIGFzIFtbaW5mbGF0ZV1dLCBidXQgY3JlYXRlcyByYXcgZGF0YSwgd2l0aG91dCB3cmFwcGVyCiAqIChoZWFkZXIgYW5k
IGFkbGVyMzIgY3JjKS4KICoqLwoKCmZ1bmN0aW9uIGluZmxhdGVSYXcoaW5wdXQsIG9wdGlvbnMpIHsKICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICBvcHRpb25zLnJhdyA9IHRydWU7CiAgcmV0dXJuIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpOwp9Ci8qKgogKiB1bmd6aXAoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fEFycmF5fFN0cmluZwogKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLgogKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0
ZSBvcHRpb25zLgogKgogKiBKdXN0IHNob3J0Y3V0IHRvIFtbaW5mbGF0ZV1dLCBiZWNhdXNlIGl0IGF1dG9kZXRlY3RzIGZvcm1hdAogKiBieSBoZWFkZXIuY29udGVudC4gRG9uZSBmb3IgY29udmVuaWVuY2UuCiAqKi8KCgpleHBvcnRzLkluZmxhdGUgPSBJbmZsYXRlOwpleHBvcnRzLmluZmxhdGUgPSBpbmZsYXRlOwpleHBvcnRzLmluZmxhdGVSYXcgPSBpbmZsYXRlUmF3OwpleHBvcnRzLnVuZ3ppcCA9IGluZmxhdGU7Cgp9LHsiLi91dGlscy9jb21tb24iOjMzMywiLi91dGlscy9zdHJpbmdzIjozMzQsIi4vemxpYi9jb25z
dGFudHMiOjMzNiwiLi96bGliL2d6aGVhZGVyIjozMzksIi4vemxpYi9pbmZsYXRlIjozNDEsIi4vemxpYi9tZXNzYWdlcyI6MzQzLCIuL3psaWIvenN0cmVhbSI6MzQ1fV0sMzMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90
eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgVFlQRURfT0sgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFVpbnQxNkFy
cmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCc7CgpmdW5jdGlvbiBfaGFzKG9iaiwga2V5KSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7Cn0KCmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24gKG9iagovKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovCikgewogIHZhciBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKCiAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7CiAgICB2
YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpOwoKICAgIGlmICghc291cmNlKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIGlmIChfdHlwZW9mKHNvdXJjZSkgIT09ICdvYmplY3QnKSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgbm9uLW9iamVjdCcpOwogICAgfQoKICAgIGZvciAodmFyIHAgaW4gc291cmNlKSB7CiAgICAgIGlmIChfaGFzKHNvdXJjZSwgcCkpIHsKICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBvYmo7Cn07IC8v
IHJlZHVjZSBidWZmZXIgc2l6ZSwgYXZvaWRpbmcgbWVtIGNvcHkKCgpleHBvcnRzLnNocmlua0J1ZiA9IGZ1bmN0aW9uIChidWYsIHNpemUpIHsKICBpZiAoYnVmLmxlbmd0aCA9PT0gc2l6ZSkgewogICAgcmV0dXJuIGJ1ZjsKICB9CgogIGlmIChidWYuc3ViYXJyYXkpIHsKICAgIHJldHVybiBidWYuc3ViYXJyYXkoMCwgc2l6ZSk7CiAgfQoKICBidWYubGVuZ3RoID0gc2l6ZTsKICByZXR1cm4gYnVmOwp9OwoKdmFyIGZuVHlwZWQgPSB7CiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIGFycmF5U2V0KGRlc3QsIHNyYywgc3JjX29mZnMs
IGxlbiwgZGVzdF9vZmZzKSB7CiAgICBpZiAoc3JjLnN1YmFycmF5ICYmIGRlc3Quc3ViYXJyYXkpIHsKICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY19vZmZzLCBzcmNfb2ZmcyArIGxlbiksIGRlc3Rfb2Zmcyk7CiAgICAgIHJldHVybjsKICAgIH0gLy8gRmFsbGJhY2sgdG8gb3JkaW5hcnkgYXJyYXkKCgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgICBkZXN0W2Rlc3Rfb2ZmcyArIGldID0gc3JjW3NyY19vZmZzICsgaV07CiAgICB9CiAgfSwKICAvLyBKb2luIGFycmF5IG9mIGNodW5rcyB0
byBzaW5nbGUgYXJyYXkuCiAgZmxhdHRlbkNodW5rczogZnVuY3Rpb24gZmxhdHRlbkNodW5rcyhjaHVua3MpIHsKICAgIHZhciBpLCBsLCBsZW4sIHBvcywgY2h1bmssIHJlc3VsdDsgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoCgogICAgbGVuID0gMDsKCiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDsKICAgIH0gLy8gam9pbiBjaHVua3MKCgogICAgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkobGVuKTsKICAgIHBvcyA9IDA7CgogICAg
Zm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgY2h1bmsgPSBjaHVua3NbaV07CiAgICAgIHJlc3VsdC5zZXQoY2h1bmssIHBvcyk7CiAgICAgIHBvcyArPSBjaHVuay5sZW5ndGg7CiAgICB9CgogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn07CnZhciBmblVudHlwZWQgPSB7CiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIGFycmF5U2V0KGRlc3QsIHNyYywgc3JjX29mZnMsIGxlbiwgZGVzdF9vZmZzKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgIGRlc3RbZGVzdF9v
ZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTsKICAgIH0KICB9LAogIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS4KICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiBmbGF0dGVuQ2h1bmtzKGNodW5rcykgewogICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgY2h1bmtzKTsKICB9Cn07IC8vIEVuYWJsZS9EaXNhYmxlIHR5cGVkIGFycmF5cyB1c2UsIGZvciB0ZXN0aW5nCi8vCgpleHBvcnRzLnNldFR5cGVkID0gZnVuY3Rpb24gKG9uKSB7CiAgaWYgKG9uKSB7CiAgICBleHBvcnRzLkJ1ZjggPSBV
aW50OEFycmF5OwogICAgZXhwb3J0cy5CdWYxNiA9IFVpbnQxNkFycmF5OwogICAgZXhwb3J0cy5CdWYzMiA9IEludDMyQXJyYXk7CiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblR5cGVkKTsKICB9IGVsc2UgewogICAgZXhwb3J0cy5CdWY4ID0gQXJyYXk7CiAgICBleHBvcnRzLkJ1ZjE2ID0gQXJyYXk7CiAgICBleHBvcnRzLkJ1ZjMyID0gQXJyYXk7CiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblVudHlwZWQpOwogIH0KfTsKCmV4cG9ydHMuc2V0VHlwZWQoVFlQRURfT0spOwoKfSx7fV0sMzM0OltmdW5jdGlv
bihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gU3RyaW5nIGVuY29kZS9kZWNvZGUgaGVscGVycwondXNlIHN0cmljdCc7Cgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuL2NvbW1vbicpOyAvLyBRdWljayBjaGVjayBpZiB3ZSBjYW4gdXNlIGZhc3QgYXJyYXkgdG8gYmluIHN0cmluZyBjb252ZXJzaW9uCi8vCi8vIC0gYXBwbHkoQXJyYXkpIGNhbiBmYWlsIG9uIEFuZHJvaWQgMi4yCi8vIC0gYXBwbHkoVWludDhBcnJheSkgY2FuIGZhaWwgb24gaU9TIDUuMSBTYWZhcmkKLy8KCgp2YXIgU1RSX0FQUExZX09LID0gdHJ1ZTsKdmFy
IFNUUl9BUFBMWV9VSUFfT0sgPSB0cnVlOwoKdHJ5IHsKICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIFswXSk7Cn0gY2F0Y2ggKF9fKSB7CiAgU1RSX0FQUExZX09LID0gZmFsc2U7Cn0KCnRyeSB7CiAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7Cn0gY2F0Y2ggKF9fKSB7CiAgU1RSX0FQUExZX1VJQV9PSyA9IGZhbHNlOwp9IC8vIFRhYmxlIHdpdGggdXRmOCBsZW5ndGhzIChjYWxjdWxhdGVkIGJ5IGZpcnN0IGJ5dGUgb2Ygc2VxdWVuY2UpCi8vIE5vdGUsIHRoYXQg
NSAmIDYtYnl0ZSB2YWx1ZXMgYW5kIHNvbWUgNC1ieXRlIHZhbHVlcyBjYW4gbm90IGJlIHJlcHJlc2VudGVkIGluIEpTLAovLyBiZWNhdXNlIG1heCBwb3NzaWJsZSBjb2RlcG9pbnQgaXMgMHgxMGZmZmYKCgp2YXIgX3V0ZjhsZW4gPSBuZXcgdXRpbHMuQnVmOCgyNTYpOwoKZm9yICh2YXIgcSA9IDA7IHEgPCAyNTY7IHErKykgewogIF91dGY4bGVuW3FdID0gcSA+PSAyNTIgPyA2IDogcSA+PSAyNDggPyA1IDogcSA+PSAyNDAgPyA0IDogcSA+PSAyMjQgPyAzIDogcSA+PSAxOTIgPyAyIDogMTsKfQoKX3V0ZjhsZW5bMjU0XSA9
IF91dGY4bGVuWzI1NF0gPSAxOyAvLyBJbnZhbGlkIHNlcXVlbmNlIHN0YXJ0Ci8vIGNvbnZlcnQgc3RyaW5nIHRvIGFycmF5ICh0eXBlZCwgd2hlbiBwb3NzaWJsZSkKCmV4cG9ydHMuc3RyaW5nMmJ1ZiA9IGZ1bmN0aW9uIChzdHIpIHsKICB2YXIgYnVmLAogICAgICBjLAogICAgICBjMiwKICAgICAgbV9wb3MsCiAgICAgIGksCiAgICAgIHN0cl9sZW4gPSBzdHIubGVuZ3RoLAogICAgICBidWZfbGVuID0gMDsgLy8gY291bnQgYmluYXJ5IHNpemUKCiAgZm9yIChtX3BvcyA9IDA7IG1fcG9zIDwgc3RyX2xlbjsgbV9wb3MrKykg
ewogICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTsKCiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgbV9wb3MgKyAxIDwgc3RyX2xlbikgewogICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7CgogICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7CiAgICAgICAgYyA9IDB4MTAwMDAgKyAoYyAtIDB4ZDgwMCA8PCAxMCkgKyAoYzIgLSAweGRjMDApOwogICAgICAgIG1fcG9zKys7CiAgICAgIH0KICAgIH0KCiAgICBidWZfbGVuICs9IGMgPCAweDgwID8gMSA6IGMgPCAweDgwMCA/
IDIgOiBjIDwgMHgxMDAwMCA/IDMgOiA0OwogIH0gLy8gYWxsb2NhdGUgYnVmZmVyCgoKICBidWYgPSBuZXcgdXRpbHMuQnVmOChidWZfbGVuKTsgLy8gY29udmVydAoKICBmb3IgKGkgPSAwLCBtX3BvcyA9IDA7IGkgPCBidWZfbGVuOyBtX3BvcysrKSB7CiAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpOwoKICAgIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiBtX3BvcyArIDEgPCBzdHJfbGVuKSB7CiAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MgKyAxKTsKCiAgICAgIGlmICgoYzIgJiAweGZjMDApID09
PSAweGRjMDApIHsKICAgICAgICBjID0gMHgxMDAwMCArIChjIC0gMHhkODAwIDw8IDEwKSArIChjMiAtIDB4ZGMwMCk7CiAgICAgICAgbV9wb3MrKzsKICAgICAgfQogICAgfQoKICAgIGlmIChjIDwgMHg4MCkgewogICAgICAvKiBvbmUgYnl0ZSAqLwogICAgICBidWZbaSsrXSA9IGM7CiAgICB9IGVsc2UgaWYgKGMgPCAweDgwMCkgewogICAgICAvKiB0d28gYnl0ZXMgKi8KICAgICAgYnVmW2krK10gPSAweEMwIHwgYyA+Pj4gNjsKICAgICAgYnVmW2krK10gPSAweDgwIHwgYyAmIDB4M2Y7CiAgICB9IGVsc2UgaWYgKGMgPCAw
eDEwMDAwKSB7CiAgICAgIC8qIHRocmVlIGJ5dGVzICovCiAgICAgIGJ1ZltpKytdID0gMHhFMCB8IGMgPj4+IDEyOwogICAgICBidWZbaSsrXSA9IDB4ODAgfCBjID4+PiA2ICYgMHgzZjsKICAgICAgYnVmW2krK10gPSAweDgwIHwgYyAmIDB4M2Y7CiAgICB9IGVsc2UgewogICAgICAvKiBmb3VyIGJ5dGVzICovCiAgICAgIGJ1ZltpKytdID0gMHhmMCB8IGMgPj4+IDE4OwogICAgICBidWZbaSsrXSA9IDB4ODAgfCBjID4+PiAxMiAmIDB4M2Y7CiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IGMgPj4+IDYgJiAweDNmOwogICAgICBi
dWZbaSsrXSA9IDB4ODAgfCBjICYgMHgzZjsKICAgIH0KICB9CgogIHJldHVybiBidWY7Cn07IC8vIEhlbHBlciAodXNlZCBpbiAyIHBsYWNlcykKCgpmdW5jdGlvbiBidWYyYmluc3RyaW5nKGJ1ZiwgbGVuKSB7CiAgLy8gT24gQ2hyb21lLCB0aGUgYXJndW1lbnRzIGluIGEgZnVuY3Rpb24gY2FsbCB0aGF0IGFyZSBhbGxvd2VkIGlzIGA2NTUzNGAuCiAgLy8gSWYgdGhlIGxlbmd0aCBvZiB0aGUgYnVmZmVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0LCB3ZSBjYW4gdXNlIHRoaXMgb3B0aW1pemF0aW9uLAogIC8vIG90aGVyd2lzZSB3
ZSB3aWxsIHRha2UgYSBzbG93ZXIgcGF0aC4KICBpZiAobGVuIDwgNjU1MzQpIHsKICAgIGlmIChidWYuc3ViYXJyYXkgJiYgU1RSX0FQUExZX1VJQV9PSyB8fCAhYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9PSykgewogICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB1dGlscy5zaHJpbmtCdWYoYnVmLCBsZW4pKTsKICAgIH0KICB9CgogIHZhciByZXN1bHQgPSAnJzsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVm
W2ldKTsKICB9CgogIHJldHVybiByZXN1bHQ7Cn0gLy8gQ29udmVydCBieXRlIGFycmF5IHRvIGJpbmFyeSBzdHJpbmcKCgpleHBvcnRzLmJ1ZjJiaW5zdHJpbmcgPSBmdW5jdGlvbiAoYnVmKSB7CiAgcmV0dXJuIGJ1ZjJiaW5zdHJpbmcoYnVmLCBidWYubGVuZ3RoKTsKfTsgLy8gQ29udmVydCBiaW5hcnkgc3RyaW5nICh0eXBlZCwgd2hlbiBwb3NzaWJsZSkKCgpleHBvcnRzLmJpbnN0cmluZzJidWYgPSBmdW5jdGlvbiAoc3RyKSB7CiAgdmFyIGJ1ZiA9IG5ldyB1dGlscy5CdWY4KHN0ci5sZW5ndGgpOwoKICBmb3IgKHZhciBp
ID0gMCwgbGVuID0gYnVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICBidWZbaV0gPSBzdHIuY2hhckNvZGVBdChpKTsKICB9CgogIHJldHVybiBidWY7Cn07IC8vIGNvbnZlcnQgYXJyYXkgdG8gc3RyaW5nCgoKZXhwb3J0cy5idWYyc3RyaW5nID0gZnVuY3Rpb24gKGJ1ZiwgbWF4KSB7CiAgdmFyIGksIG91dCwgYywgY19sZW47CiAgdmFyIGxlbiA9IG1heCB8fCBidWYubGVuZ3RoOyAvLyBSZXNlcnZlIG1heCBwb3NzaWJsZSBsZW5ndGggKDIgd29yZHMgcGVyIGNoYXIpCiAgLy8gTkI6IGJ5IHVua25vd24gcmVhc29ucywg
QXJyYXkgaXMgc2lnbmlmaWNhbnRseSBmYXN0ZXIgZm9yCiAgLy8gICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgdGhhbiBVaW50MTZBcnJheS4KCiAgdmFyIHV0ZjE2YnVmID0gbmV3IEFycmF5KGxlbiAqIDIpOwoKICBmb3IgKG91dCA9IDAsIGkgPSAwOyBpIDwgbGVuOykgewogICAgYyA9IGJ1ZltpKytdOyAvLyBxdWljayBwcm9jZXNzIGFzY2lpCgogICAgaWYgKGMgPCAweDgwKSB7CiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIGNfbGVuID0gX3V0ZjhsZW5bY107IC8v
IHNraXAgNSAmIDYgYnl0ZSBjb2RlcwoKICAgIGlmIChjX2xlbiA+IDQpIHsKICAgICAgdXRmMTZidWZbb3V0KytdID0gMHhmZmZkOwogICAgICBpICs9IGNfbGVuIC0gMTsKICAgICAgY29udGludWU7CiAgICB9IC8vIGFwcGx5IG1hc2sgb24gZmlyc3QgYnl0ZQoKCiAgICBjICY9IGNfbGVuID09PSAyID8gMHgxZiA6IGNfbGVuID09PSAzID8gMHgwZiA6IDB4MDc7IC8vIGpvaW4gdGhlIHJlc3QKCiAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHsKICAgICAgYyA9IGMgPDwgNiB8IGJ1ZltpKytdICYgMHgzZjsKICAg
ICAgY19sZW4tLTsKICAgIH0gLy8gdGVybWluYXRlZCBieSBlbmQgb2Ygc3RyaW5nPwoKCiAgICBpZiAoY19sZW4gPiAxKSB7CiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZmZmZDsKICAgICAgY29udGludWU7CiAgICB9CgogICAgaWYgKGMgPCAweDEwMDAwKSB7CiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7CiAgICB9IGVsc2UgewogICAgICBjIC09IDB4MTAwMDA7CiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8IGMgPj4gMTAgJiAweDNmZjsKICAgICAgdXRmMTZidWZbb3V0KytdID0gMHhkYzAwIHwgYyAmIDB4
M2ZmOwogICAgfQogIH0KCiAgcmV0dXJuIGJ1ZjJiaW5zdHJpbmcodXRmMTZidWYsIG91dCk7Cn07IC8vIENhbGN1bGF0ZSBtYXggcG9zc2libGUgcG9zaXRpb24gaW4gdXRmOCBidWZmZXIsCi8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGUKLy8gLSAodmVyeSBzbWFsbCBsaW1pdHMpIHJldHVybiBtYXggc2l6ZSBhcyBpcy4KLy8KLy8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5Ci8vIG1heCAgIC0gbGVuZ3RoIGxpbWl0IChtYW5kYXRvcnkpOwoKCmV4cG9ydHMudXRmOGJvcmRl
ciA9IGZ1bmN0aW9uIChidWYsIG1heCkgewogIHZhciBwb3M7CiAgbWF4ID0gbWF4IHx8IGJ1Zi5sZW5ndGg7CgogIGlmIChtYXggPiBidWYubGVuZ3RoKSB7CiAgICBtYXggPSBidWYubGVuZ3RoOwogIH0gLy8gZ28gYmFjayBmcm9tIGxhc3QgcG9zaXRpb24sIHVudGlsIHN0YXJ0IG9mIHNlcXVlbmNlIGZvdW5kCgoKICBwb3MgPSBtYXggLSAxOwoKICB3aGlsZSAocG9zID49IDAgJiYgKGJ1Zltwb3NdICYgMHhDMCkgPT09IDB4ODApIHsKICAgIHBvcy0tOwogIH0gLy8gVmVyeSBzbWFsbCBhbmQgYnJva2VuIHNlcXVlbmNlLAog
IC8vIHJldHVybiBtYXgsIGJlY2F1c2Ugd2Ugc2hvdWxkIHJldHVybiBzb21ldGhpbmcgYW55d2F5LgoKCiAgaWYgKHBvcyA8IDApIHsKICAgIHJldHVybiBtYXg7CiAgfSAvLyBJZiB3ZSBjYW1lIHRvIHN0YXJ0IG9mIGJ1ZmZlciAtIHRoYXQgbWVhbnMgYnVmZmVyIGlzIHRvbyBzbWFsbCwKICAvLyByZXR1cm4gbWF4IHRvby4KCgogIGlmIChwb3MgPT09IDApIHsKICAgIHJldHVybiBtYXg7CiAgfQoKICByZXR1cm4gcG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4ID8gcG9zIDogbWF4Owp9OwoKfSx7Ii4vY29tbW9uIjoz
MzN9XSwzMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7IC8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi4KLy8gSXQgaXNuJ3Qgd29ydGggaXQgdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbnMgYXMgaW4gb3JpZ2luYWwuCi8vIFNtYWxsIHNpemUgaXMgcHJlZmVyYWJsZS4KLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyCi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQg
QW5kcmV5IFR1cGl0c2luCi8vCi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkCi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlcwovLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLgovLwovLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSwKLy8gaW5jbHVkaW5nIGNvbW1lcmNp
YWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdAovLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6Ci8vCi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90Ci8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmUKLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBw
cm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmUKLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLgovLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZQovLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4KLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi4KCmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIs
IGJ1ZiwgbGVuLCBwb3MpIHsKICB2YXIgczEgPSBhZGxlciAmIDB4ZmZmZiB8IDAsCiAgICAgIHMyID0gYWRsZXIgPj4+IDE2ICYgMHhmZmZmIHwgMCwKICAgICAgbiA9IDA7CgogIHdoaWxlIChsZW4gIT09IDApIHsKICAgIC8vIFNldCBsaW1pdCB+IHR3aWNlIGxlc3MgdGhhbiA1NTUyLCB0byBrZWVwCiAgICAvLyBzMiBpbiAzMS1iaXRzLCBiZWNhdXNlIHdlIGZvcmNlIHNpZ25lZCBpbnRzLgogICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuCiAgICBuID0gbGVuID4gMjAwMCA/IDIwMDAgOiBsZW47CiAgICBsZW4g
LT0gbjsKCiAgICBkbyB7CiAgICAgIHMxID0gczEgKyBidWZbcG9zKytdIHwgMDsKICAgICAgczIgPSBzMiArIHMxIHwgMDsKICAgIH0gd2hpbGUgKC0tbik7CgogICAgczEgJT0gNjU1MjE7CiAgICBzMiAlPSA2NTUyMTsKICB9CgogIHJldHVybiBzMSB8IHMyIDw8IDE2IHwgMDsKfQoKbW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyOwoKfSx7fV0sMzM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOyAvLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXIKLy8g
KEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW4KLy8KLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWQKLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzCi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuCi8vCi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFu
eSBwdXJwb3NlLAovLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0Ci8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczoKLy8KLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3QKLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZQovLyAgIGluIGEgcHJv
ZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZQovLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuCi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlCi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLgovLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJp
YnV0aW9uLgoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqLwogIFpfTk9fRkxVU0g6IDAsCiAgWl9QQVJUSUFMX0ZMVVNIOiAxLAogIFpfU1lOQ19GTFVTSDogMiwKICBaX0ZVTExfRkxVU0g6IDMsCiAgWl9GSU5JU0g6IDQsCiAgWl9CTE9DSzogNSwKICBaX1RSRUVTOiA2LAoKICAvKiBSZXR1cm4gY29kZXMgZm9yIHRoZSBjb21wcmVzc2lvbi9kZWNvbXByZXNzaW9uIGZ1bmN0aW9ucy4gTmVnYXRpdmUgdmFs
dWVzCiAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuCiAgKi8KICBaX09LOiAwLAogIFpfU1RSRUFNX0VORDogMSwKICBaX05FRURfRElDVDogMiwKICBaX0VSUk5POiAtMSwKICBaX1NUUkVBTV9FUlJPUjogLTIsCiAgWl9EQVRBX0VSUk9SOiAtMywKICAvL1pfTUVNX0VSUk9SOiAgICAgLTQsCiAgWl9CVUZfRVJST1I6IC01LAogIC8vWl9WRVJTSU9OX0VSUk9SOiAtNiwKCiAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovCiAgWl9OT19DT01QUkVTU0lP
TjogMCwKICBaX0JFU1RfU1BFRUQ6IDEsCiAgWl9CRVNUX0NPTVBSRVNTSU9OOiA5LAogIFpfREVGQVVMVF9DT01QUkVTU0lPTjogLTEsCiAgWl9GSUxURVJFRDogMSwKICBaX0hVRkZNQU5fT05MWTogMiwKICBaX1JMRTogMywKICBaX0ZJWEVEOiA0LAogIFpfREVGQVVMVF9TVFJBVEVHWTogMCwKCiAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqLwogIFpfQklOQVJZOiAwLAogIFpfVEVYVDogMSwKICAvL1pfQVNDSUk6ICAgICAgICAgICAgICAgIDEsIC8v
ID0gWl9URVhUIChkZXByZWNhdGVkKQogIFpfVU5LTk9XTjogMiwKCiAgLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovCiAgWl9ERUZMQVRFRDogOCAvL1pfTlVMTDogICAgICAgICAgICAgICAgIG51bGwgLy8gVXNlIC0xIG9yIG51bGwgaW5saW5lLCBkZXBlbmRpbmcgb24gdmFyIHR5cGUKCn07Cgp9LHt9XSwzMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7IC8vIE5vdGU6IHdlIGNhbid0IGdldCBzaWduaWZpY2FudCBzcGVlZCBib29zdCBoZXJlLgovLyBTbyB3cml0
ZSBjb2RlIHRvIG1pbmltaXplIHNpemUgLSBubyBwcmVnZW5lcmF0ZWQgdGFibGVzCi8vIGFuZCBhcnJheSB0b29scyBkZXBlbmRlbmNpZXMuCi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlcgovLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpbgovLwovLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZAovLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBo
ZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXMKLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS4KLy8KLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsCi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXQKLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOgovLwovLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29m
dHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdAovLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlCi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlCi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC4KLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQg
bXVzdCBub3QgYmUKLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuCi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uCi8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlCgpmdW5jdGlvbiBtYWtlVGFibGUoKSB7CiAgdmFyIGMsCiAgICAgIHRhYmxlID0gW107CgogIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHsKICAgIGMgPSBuOwoKICAg
IGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7CiAgICAgIGMgPSBjICYgMSA/IDB4RURCODgzMjAgXiBjID4+PiAxIDogYyA+Pj4gMTsKICAgIH0KCiAgICB0YWJsZVtuXSA9IGM7CiAgfQoKICByZXR1cm4gdGFibGU7Cn0gLy8gQ3JlYXRlIHRhYmxlIG9uIGxvYWQuIEp1c3QgMjU1IHNpZ25lZCBsb25ncy4gTm90IGEgcHJvYmxlbS4KCgp2YXIgY3JjVGFibGUgPSBtYWtlVGFibGUoKTsKCmZ1bmN0aW9uIGNyYzMyKGNyYywgYnVmLCBsZW4sIHBvcykgewogIHZhciB0ID0gY3JjVGFibGUsCiAgICAgIGVuZCA9IHBvcyArIGxl
bjsKICBjcmMgXj0gLTE7CgogIGZvciAodmFyIGkgPSBwb3M7IGkgPCBlbmQ7IGkrKykgewogICAgY3JjID0gY3JjID4+PiA4IF4gdFsoY3JjIF4gYnVmW2ldKSAmIDB4RkZdOwogIH0KCiAgcmV0dXJuIGNyYyBeIC0xOyAvLyA+Pj4gMDsKfQoKbW9kdWxlLmV4cG9ydHMgPSBjcmMzMjsKCn0se31dLDMzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsgLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyCi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJp
biBhbmQgQW5kcmV5IFR1cGl0c2luCi8vCi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkCi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlcwovLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLgovLwovLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSwKLy8gaW5jbHVkaW5nIGNv
bW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdAovLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6Ci8vCi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90Ci8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmUKLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGlu
IHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmUKLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLgovLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZQovLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4KLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi4KCnZhciB1dGlscyA9IHJlcXVp
cmUoJy4uL3V0aWxzL2NvbW1vbicpOwoKdmFyIHRyZWVzID0gcmVxdWlyZSgnLi90cmVlcycpOwoKdmFyIGFkbGVyMzIgPSByZXF1aXJlKCcuL2FkbGVyMzInKTsKCnZhciBjcmMzMiA9IHJlcXVpcmUoJy4vY3JjMzInKTsKCnZhciBtc2cgPSByZXF1aXJlKCcuL21lc3NhZ2VzJyk7Ci8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCgovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT0qLwoKLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqLwoKCnZhciBaX05PX0ZMVVNIID0gMDsKdmFyIFpfUEFSVElBTF9GTFVTSCA9IDE7IC8vdmFyIFpfU1lOQ19GTFVTSCAgICA9IDI7Cgp2YXIgWl9GVUxMX0ZMVVNIID0gMzsKdmFyIFpfRklOSVNIID0gNDsKdmFyIFpfQkxPQ0sgPSA1OyAvL3ZhciBaX1RSRUVTICAgICAgICAgPSA2OwoKLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21w
cmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlcwogKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuCiAqLwoKdmFyIFpfT0sgPSAwOwp2YXIgWl9TVFJFQU1fRU5EID0gMTsgLy92YXIgWl9ORUVEX0RJQ1QgICAgID0gMjsKLy92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7Cgp2YXIgWl9TVFJFQU1fRVJST1IgPSAtMjsKdmFyIFpfREFUQV9FUlJPUiA9IC0zOyAvL3ZhciBaX01FTV9FUlJPUiAgICAgPSAtNDsKCnZhciBaX0JVRl9FUlJPUiA9IC01
OyAvL3ZhciBaX1ZFUlNJT05fRVJST1IgPSAtNjsKCi8qIGNvbXByZXNzaW9uIGxldmVscyAqLwovL3ZhciBaX05PX0NPTVBSRVNTSU9OICAgICAgPSAwOwovL3ZhciBaX0JFU1RfU1BFRUQgICAgICAgICAgPSAxOwovL3ZhciBaX0JFU1RfQ09NUFJFU1NJT04gICAgPSA5OwoKdmFyIFpfREVGQVVMVF9DT01QUkVTU0lPTiA9IC0xOwp2YXIgWl9GSUxURVJFRCA9IDE7CnZhciBaX0hVRkZNQU5fT05MWSA9IDI7CnZhciBaX1JMRSA9IDM7CnZhciBaX0ZJWEVEID0gNDsKdmFyIFpfREVGQVVMVF9TVFJBVEVHWSA9IDA7Ci8qIFBvc3Np
YmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi8KLy92YXIgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDsKLy92YXIgWl9URVhUICAgICAgICAgICAgICAgID0gMTsKLy92YXIgWl9BU0NJSSAgICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFQKCnZhciBaX1VOS05PV04gPSAyOwovKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi8KCnZhciBaX0RFRkxBVEVEID0gODsKLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KCnZhciBNQVhfTUVNX0xFVkVMID0gOTsKLyogTWF4aW11bSB2YWx1ZSBmb3IgbWVtTGV2ZWwgaW4gZGVmbGF0ZUluaXQyICovCgp2YXIgTUFYX1dCSVRTID0gMTU7Ci8qIDMySyBMWjc3IHdpbmRvdyAqLwoKdmFyIERFRl9NRU1fTEVWRUwgPSA4Owp2YXIgTEVOR1RIX0NPREVTID0gMjk7Ci8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqLwoKdmFyIExJVEVSQUxTID0gMjU2OwovKiBudW1iZXIgb2YgbGl0
ZXJhbCBieXRlcyAwLi4yNTUgKi8KCnZhciBMX0NPREVTID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTOwovKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi8KCnZhciBEX0NPREVTID0gMzA7Ci8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqLwoKdmFyIEJMX0NPREVTID0gMTk7Ci8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqLwoKdmFyIEhFQVBfU0laRSA9IDIgKiBMX0NPREVTICsgMTsKLyogbWF4
aW11bSBoZWFwIHNpemUgKi8KCnZhciBNQVhfQklUUyA9IDE1OwovKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi8KCnZhciBNSU5fTUFUQ0ggPSAzOwp2YXIgTUFYX01BVENIID0gMjU4Owp2YXIgTUlOX0xPT0tBSEVBRCA9IE1BWF9NQVRDSCArIE1JTl9NQVRDSCArIDE7CnZhciBQUkVTRVRfRElDVCA9IDB4MjA7CnZhciBJTklUX1NUQVRFID0gNDI7CnZhciBFWFRSQV9TVEFURSA9IDY5Owp2YXIgTkFNRV9TVEFURSA9IDczOwp2YXIgQ09NTUVOVF9TVEFURSA9IDkxOwp2YXIgSENSQ19TVEFURSA9
IDEwMzsKdmFyIEJVU1lfU1RBVEUgPSAxMTM7CnZhciBGSU5JU0hfU1RBVEUgPSA2NjY7CnZhciBCU19ORUVEX01PUkUgPSAxOwovKiBibG9jayBub3QgY29tcGxldGVkLCBuZWVkIG1vcmUgaW5wdXQgb3IgbW9yZSBvdXRwdXQgKi8KCnZhciBCU19CTE9DS19ET05FID0gMjsKLyogYmxvY2sgZmx1c2ggcGVyZm9ybWVkICovCgp2YXIgQlNfRklOSVNIX1NUQVJURUQgPSAzOwovKiBmaW5pc2ggc3RhcnRlZCwgbmVlZCBvbmx5IG1vcmUgb3V0cHV0IGF0IG5leHQgZGVmbGF0ZSAqLwoKdmFyIEJTX0ZJTklTSF9ET05FID0gNDsKLyog
ZmluaXNoIGRvbmUsIGFjY2VwdCBubyBtb3JlIGlucHV0IG9yIG91dHB1dCAqLwoKdmFyIE9TX0NPREUgPSAweDAzOyAvLyBVbml4IDopIC4gRG9uJ3QgZGV0ZWN0LCB1c2UgdGhpcyBkZWZhdWx0LgoKZnVuY3Rpb24gZXJyKHN0cm0sIGVycm9yQ29kZSkgewogIHN0cm0ubXNnID0gbXNnW2Vycm9yQ29kZV07CiAgcmV0dXJuIGVycm9yQ29kZTsKfQoKZnVuY3Rpb24gcmFuayhmKSB7CiAgcmV0dXJuIChmIDw8IDEpIC0gKGYgPiA0ID8gOSA6IDApOwp9CgpmdW5jdGlvbiB6ZXJvKGJ1ZikgewogIHZhciBsZW4gPSBidWYubGVuZ3Ro
OwoKICB3aGlsZSAoLS1sZW4gPj0gMCkgewogICAgYnVmW2xlbl0gPSAwOwogIH0KfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUuIEFsbCBkZWZsYXRlKCkgb3V0cHV0IGdvZXMKICogdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdAogKiB0byBhdm9pZCBhbGxvY2F0aW5nIGEgbGFyZ2Ugc3Ry
bS0+b3V0cHV0IGJ1ZmZlciBhbmQgY29weWluZyBpbnRvIGl0LgogKiAoU2VlIGFsc28gcmVhZF9idWYoKSkuCiAqLwoKCmZ1bmN0aW9uIGZsdXNoX3BlbmRpbmcoc3RybSkgewogIHZhciBzID0gc3RybS5zdGF0ZTsgLy9fdHJfZmx1c2hfYml0cyhzKTsKCiAgdmFyIGxlbiA9IHMucGVuZGluZzsKCiAgaWYgKGxlbiA+IHN0cm0uYXZhaWxfb3V0KSB7CiAgICBsZW4gPSBzdHJtLmF2YWlsX291dDsKICB9CgogIGlmIChsZW4gPT09IDApIHsKICAgIHJldHVybjsKICB9CgogIHV0aWxzLmFycmF5U2V0KHN0cm0ub3V0cHV0LCBzLnBl
bmRpbmdfYnVmLCBzLnBlbmRpbmdfb3V0LCBsZW4sIHN0cm0ubmV4dF9vdXQpOwogIHN0cm0ubmV4dF9vdXQgKz0gbGVuOwogIHMucGVuZGluZ19vdXQgKz0gbGVuOwogIHN0cm0udG90YWxfb3V0ICs9IGxlbjsKICBzdHJtLmF2YWlsX291dCAtPSBsZW47CiAgcy5wZW5kaW5nIC09IGxlbjsKCiAgaWYgKHMucGVuZGluZyA9PT0gMCkgewogICAgcy5wZW5kaW5nX291dCA9IDA7CiAgfQp9CgpmdW5jdGlvbiBmbHVzaF9ibG9ja19vbmx5KHMsIGxhc3QpIHsKICB0cmVlcy5fdHJfZmx1c2hfYmxvY2socywgcy5ibG9ja19zdGFydCA+
PSAwID8gcy5ibG9ja19zdGFydCA6IC0xLCBzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCwgbGFzdCk7CgogIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0OwogIGZsdXNoX3BlbmRpbmcocy5zdHJtKTsKfQoKZnVuY3Rpb24gcHV0X2J5dGUocywgYikgewogIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjsKfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIFB1dCBhIHNob3J0IGluIHRoZSBwZW5kaW5nIGJ1ZmZlci4gVGhl
IDE2LWJpdCB2YWx1ZSBpcyBwdXQgaW4gTVNCIG9yZGVyLgogKiBJTiBhc3NlcnRpb246IHRoZSBzdHJlYW0gc3RhdGUgaXMgY29ycmVjdCBhbmQgdGhlcmUgaXMgZW5vdWdoIHJvb20gaW4KICogcGVuZGluZ19idWYuCiAqLwoKCmZ1bmN0aW9uIHB1dFNob3J0TVNCKHMsIGIpIHsKICAvLyAgcHV0X2J5dGUocywgKEJ5dGUpKGIgPj4gOCkpOwogIC8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiAmIDB4ZmYpKTsKICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGIgPj4+IDggJiAweGZmOwogIHMucGVuZGluZ19idWZbcy5wZW5k
aW5nKytdID0gYiAmIDB4ZmY7Cn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzIKICogYW5kIHRvdGFsIG51bWJlciBvZiBieXRlcyByZWFkLiAgQWxsIGRlZmxhdGUoKSBpbnB1dCBnb2VzIHRocm91Z2gKICogdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQg
dG8gYXZvaWQKICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LgogKiAoU2VlIGFsc28gZmx1c2hfcGVuZGluZygpKS4KICovCgoKZnVuY3Rpb24gcmVhZF9idWYoc3RybSwgYnVmLCBzdGFydCwgc2l6ZSkgewogIHZhciBsZW4gPSBzdHJtLmF2YWlsX2luOwoKICBpZiAobGVuID4gc2l6ZSkgewogICAgbGVuID0gc2l6ZTsKICB9CgogIGlmIChsZW4gPT09IDApIHsKICAgIHJldHVybiAwOwogIH0KCiAgc3RybS5hdmFpbF9pbiAtPSBsZW47IC8vIHptZW1jcHkoYnVmLCBz
dHJtLT5uZXh0X2luLCBsZW4pOwoKICB1dGlscy5hcnJheVNldChidWYsIHN0cm0uaW5wdXQsIHN0cm0ubmV4dF9pbiwgbGVuLCBzdGFydCk7CgogIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDEpIHsKICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyKHN0cm0uYWRsZXIsIGJ1ZiwgbGVuLCBzdGFydCk7CiAgfSBlbHNlIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDIpIHsKICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpOwogIH0KCiAgc3RybS5uZXh0X2luICs9IGxlbjsKICBzdHJtLnRvdGFs
X2luICs9IGxlbjsKICByZXR1cm4gbGVuOwp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBTZXQgbWF0Y2hfc3RhcnQgdG8gdGhlIGxvbmdlc3QgbWF0Y2ggc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHN0cmluZyBhbmQKICogcmV0dXJuIGl0cyBsZW5ndGguIE1hdGNoZXMgc2hvcnRlciBvciBlcXVhbCB0byBwcmV2X2xlbmd0aCBhcmUgZGlzY2FyZGVkLAogKiBpbiB3aGljaCBjYXNlIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gcHJl
dl9sZW5ndGggYW5kIG1hdGNoX3N0YXJ0IGlzCiAqIGdhcmJhZ2UuCiAqIElOIGFzc2VydGlvbnM6IGN1cl9tYXRjaCBpcyB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiBmb3IgdGhlIGN1cnJlbnQKICogICBzdHJpbmcgKHN0cnN0YXJ0KSBhbmQgaXRzIGRpc3RhbmNlIGlzIDw9IE1BWF9ESVNULCBhbmQgcHJldl9sZW5ndGggPj0gMQogKiBPVVQgYXNzZXJ0aW9uOiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdCBncmVhdGVyIHRoYW4gcy0+bG9va2FoZWFkLgogKi8KCgpmdW5jdGlvbiBsb25nZXN0X21hdGNoKHMsIGN1cl9tYXRj
aCkgewogIHZhciBjaGFpbl9sZW5ndGggPSBzLm1heF9jaGFpbl9sZW5ndGg7CiAgLyogbWF4IGhhc2ggY2hhaW4gbGVuZ3RoICovCgogIHZhciBzY2FuID0gcy5zdHJzdGFydDsKICAvKiBjdXJyZW50IHN0cmluZyAqLwoKICB2YXIgbWF0Y2g7CiAgLyogbWF0Y2hlZCBzdHJpbmcgKi8KCiAgdmFyIGxlbjsKICAvKiBsZW5ndGggb2YgY3VycmVudCBtYXRjaCAqLwoKICB2YXIgYmVzdF9sZW4gPSBzLnByZXZfbGVuZ3RoOwogIC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqLwoKICB2YXIgbmljZV9tYXRjaCA9IHMubmljZV9t
YXRjaDsKICAvKiBzdG9wIGlmIG1hdGNoIGxvbmcgZW5vdWdoICovCgogIHZhciBsaW1pdCA9IHMuc3Ryc3RhcnQgPiBzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQgPyBzLnN0cnN0YXJ0IC0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgOiAwCiAgLypOSUwqLwogIDsKICB2YXIgX3dpbiA9IHMud2luZG93OyAvLyBzaG9ydGN1dAoKICB2YXIgd21hc2sgPSBzLndfbWFzazsKICB2YXIgcHJldiA9IHMucHJldjsKICAvKiBTdG9wIHdoZW4gY3VyX21hdGNoIGJlY29tZXMgPD0gbGltaXQuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLAog
ICAqIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcgb2Ygd2luZG93IGluZGV4IDAuCiAgICovCgogIHZhciBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIOwogIHZhciBzY2FuX2VuZDEgPSBfd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdOwogIHZhciBzY2FuX2VuZCA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTsKICAvKiBUaGUgY29kZSBpcyBvcHRpbWl6ZWQgZm9yIEhBU0hfQklUUyA+PSA4IGFuZCBNQVhfTUFUQ0gtMiBtdWx0aXBsZSBvZiAxNi4KICAgKiBJdCBpcyBlYXN5IHRvIGdldCByaWQgb2YgdGhp
cyBvcHRpbWl6YXRpb24gaWYgbmVjZXNzYXJ5LgogICAqLwogIC8vIEFzc2VydChzLT5oYXNoX2JpdHMgPj0gOCAmJiBNQVhfTUFUQ0ggPT0gMjU4LCAiQ29kZSB0b28gY2xldmVyIik7CgogIC8qIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6ICovCgogIGlmIChzLnByZXZfbGVuZ3RoID49IHMuZ29vZF9tYXRjaCkgewogICAgY2hhaW5fbGVuZ3RoID4+PSAyOwogIH0KICAvKiBEbyBub3QgbG9vayBmb3IgbWF0Y2hlcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgaW5wdXQu
IFRoaXMgaXMgbmVjZXNzYXJ5CiAgICogdG8gbWFrZSBkZWZsYXRlIGRldGVybWluaXN0aWMuCiAgICovCgoKICBpZiAobmljZV9tYXRjaCA+IHMubG9va2FoZWFkKSB7CiAgICBuaWNlX21hdGNoID0gcy5sb29rYWhlYWQ7CiAgfSAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCAibmVlZCBsb29rYWhlYWQiKTsKCgogIGRvIHsKICAgIC8vIEFzc2VydChjdXJfbWF0Y2ggPCBzLT5zdHJzdGFydCwgIm5vIGZ1dHVyZSIpOwogICAgbWF0Y2ggPSBjdXJfbWF0Y2g7CiAgICAv
KiBTa2lwIHRvIG5leHQgbWF0Y2ggaWYgdGhlIG1hdGNoIGxlbmd0aCBjYW5ub3QgaW5jcmVhc2UKICAgICAqIG9yIGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbGVzcyB0aGFuIDIuICBOb3RlIHRoYXQgdGhlIGNoZWNrcyBiZWxvdwogICAgICogZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBvY2N1ciBvY2Nhc2lvbmFsbHkgZm9yIHBlcmZvcm1hbmNlCiAgICAgKiByZWFzb25zLiAgVGhlcmVmb3JlIHVuaW5pdGlhbGl6ZWQgbWVtb3J5IHdpbGwgYmUgYWNjZXNzZWQsIGFuZAogICAgICogY29uZGl0aW9uYWwganVtcHMg
d2lsbCBiZSBtYWRlIHRoYXQgZGVwZW5kIG9uIHRob3NlIHZhbHVlcy4KICAgICAqIEhvd2V2ZXIgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2ggaXMgbGltaXRlZCB0byB0aGUgbG9va2FoZWFkLCBzbwogICAgICogdGhlIG91dHB1dCBvZiBkZWZsYXRlIGlzIG5vdCBhZmZlY3RlZCBieSB0aGUgdW5pbml0aWFsaXplZCB2YWx1ZXMuCiAgICAgKi8KCiAgICBpZiAoX3dpblttYXRjaCArIGJlc3RfbGVuXSAhPT0gc2Nhbl9lbmQgfHwgX3dpblttYXRjaCArIGJlc3RfbGVuIC0gMV0gIT09IHNjYW5fZW5kMSB8fCBfd2luW21hdGNoXSAh
PT0gX3dpbltzY2FuXSB8fCBfd2luWysrbWF0Y2hdICE9PSBfd2luW3NjYW4gKyAxXSkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlCiAgICAgKiBhZ2FpbiBsYXRlci4gKFRoaXMgaGV1cmlzdGljIGlzIG5vdCBhbHdheXMgYSB3aW4uKQogICAgICogSXQgaXMgbm90IG5lY2Vzc2FyeSB0byBjb21wYXJlIHNjYW5bMl0gYW5kIG1hdGNoWzJdIHNpbmNlIHRoZXkKICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hl
biB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXQKICAgICAqIHRoZSBoYXNoIGtleXMgYXJlIGVxdWFsIGFuZCB0aGF0IEhBU0hfQklUUyA+PSA4LgogICAgICovCgoKICAgIHNjYW4gKz0gMjsKICAgIG1hdGNoKys7IC8vIEFzc2VydCgqc2NhbiA9PSAqbWF0Y2gsICJtYXRjaFsyXT8iKTsKCiAgICAvKiBXZSBjaGVjayBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IGV2ZXJ5IDh0aCBjb21wYXJpc29uOwogICAgICogdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguCiAgICAg
Ki8KCiAgICBkbyB7CiAgICAgIC8qanNoaW50IG5vZW1wdHk6ZmFsc2UqLwogICAgfSB3aGlsZSAoX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5b
KytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBzY2FuIDwgc3RyZW5kKTsgLy8gQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1bnNpZ25lZCkocy0+d2luZG93X3NpemUtMSksICJ3aWxkIHNjYW4iKTsKCgogICAgbGVuID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pOwogICAgc2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSDsKCiAgICBpZiAobGVuID4gYmVzdF9sZW4pIHsKICAgICAgcy5tYXRjaF9zdGFydCA9IGN1cl9tYXRjaDsKICAgICAgYmVzdF9sZW4gPSBsZW47CgogICAgICBpZiAobGVuID49IG5pY2VfbWF0Y2gp
IHsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgc2Nhbl9lbmQxID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTsKICAgICAgc2Nhbl9lbmQgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07CiAgICB9CiAgfSB3aGlsZSAoKGN1cl9tYXRjaCA9IHByZXZbY3VyX21hdGNoICYgd21hc2tdKSA+IGxpbWl0ICYmIC0tY2hhaW5fbGVuZ3RoICE9PSAwKTsKCiAgaWYgKGJlc3RfbGVuIDw9IHMubG9va2FoZWFkKSB7CiAgICByZXR1cm4gYmVzdF9sZW47CiAgfQoKICByZXR1cm4gcy5sb29rYWhlYWQ7Cn0KLyogPT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIEZpbGwgdGhlIHdpbmRvdyB3aGVuIHRoZSBsb29rYWhlYWQgYmVjb21lcyBpbnN1ZmZpY2llbnQuCiAqIFVwZGF0ZXMgc3Ryc3RhcnQgYW5kIGxvb2thaGVhZC4KICoKICogSU4gYXNzZXJ0aW9uOiBsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFECiAqIE9VVCBhc3NlcnRpb25zOiBzdHJzdGFydCA8PSB3aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFECiAqICAgIEF0IGxlYXN0IG9uZSBieXRlIGhhcyBiZWVuIHJlYWQs
IG9yIGF2YWlsX2luID09IDA7IHJlYWRzIGFyZQogKiAgICBwZXJmb3JtZWQgZm9yIGF0IGxlYXN0IHR3byBieXRlcyAocmVxdWlyZWQgZm9yIHRoZSB6aXAgdHJhbnNsYXRlX2VvbAogKiAgICBvcHRpb24gLS0gbm90IHN1cHBvcnRlZCBoZXJlKS4KICovCgoKZnVuY3Rpb24gZmlsbF93aW5kb3cocykgewogIHZhciBfd19zaXplID0gcy53X3NpemU7CiAgdmFyIHAsIG4sIG0sIG1vcmUsIHN0cjsgLy9Bc3NlcnQocy0+bG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCwgImFscmVhZHkgZW5vdWdoIGxvb2thaGVhZCIpOwoKICBkbyB7
CiAgICBtb3JlID0gcy53aW5kb3dfc2l6ZSAtIHMubG9va2FoZWFkIC0gcy5zdHJzdGFydDsgLy8gSlMgaW50cyBoYXZlIDMyIGJpdCwgYmxvY2sgYmVsb3cgbm90IG5lZWRlZAoKICAgIC8qIERlYWwgd2l0aCAhQCMkJSA2NEsgbGltaXQ6ICovCiAgICAvL2lmIChzaXplb2YoaW50KSA8PSAyKSB7CiAgICAvLyAgICBpZiAobW9yZSA9PSAwICYmIHMtPnN0cnN0YXJ0ID09IDAgJiYgcy0+bG9va2FoZWFkID09IDApIHsKICAgIC8vICAgICAgICBtb3JlID0gd3NpemU7CiAgICAvLwogICAgLy8gIH0gZWxzZSBpZiAobW9yZSA9PSAo
dW5zaWduZWQpKC0xKSkgewogICAgLy8gICAgICAgIC8qIFZlcnkgdW5saWtlbHksIGJ1dCBwb3NzaWJsZSBvbiAxNiBiaXQgbWFjaGluZSBpZgogICAgLy8gICAgICAgICAqIHN0cnN0YXJ0ID09IDAgJiYgbG9va2FoZWFkID09IDEgKGlucHV0IGRvbmUgYSBieXRlIGF0IHRpbWUpCiAgICAvLyAgICAgICAgICovCiAgICAvLyAgICAgICAgbW9yZS0tOwogICAgLy8gICAgfQogICAgLy99CgogICAgLyogSWYgdGhlIHdpbmRvdyBpcyBhbG1vc3QgZnVsbCBhbmQgdGhlcmUgaXMgaW5zdWZmaWNpZW50IGxvb2thaGVhZCwKICAgICAq
IG1vdmUgdGhlIHVwcGVyIGhhbGYgdG8gdGhlIGxvd2VyIG9uZSB0byBtYWtlIHJvb20gaW4gdGhlIHVwcGVyIGhhbGYuCiAgICAgKi8KCiAgICBpZiAocy5zdHJzdGFydCA+PSBfd19zaXplICsgKF93X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkgewogICAgICB1dGlscy5hcnJheVNldChzLndpbmRvdywgcy53aW5kb3csIF93X3NpemUsIF93X3NpemUsIDApOwogICAgICBzLm1hdGNoX3N0YXJ0IC09IF93X3NpemU7CiAgICAgIHMuc3Ryc3RhcnQgLT0gX3dfc2l6ZTsKICAgICAgLyogd2Ugbm93IGhhdmUgc3Ryc3RhcnQgPj0gTUFY
X0RJU1QgKi8KCiAgICAgIHMuYmxvY2tfc3RhcnQgLT0gX3dfc2l6ZTsKICAgICAgLyogU2xpZGUgdGhlIGhhc2ggdGFibGUgKGNvdWxkIGJlIGF2b2lkZWQgd2l0aCAzMiBiaXQgdmFsdWVzCiAgICAgICBhdCB0aGUgZXhwZW5zZSBvZiBtZW1vcnkgdXNhZ2UpLiBXZSBzbGlkZSBldmVuIHdoZW4gbGV2ZWwgPT0gMAogICAgICAgdG8ga2VlcCB0aGUgaGFzaCB0YWJsZSBjb25zaXN0ZW50IGlmIHdlIHN3aXRjaCBiYWNrIHRvIGxldmVsID4gMAogICAgICAgbGF0ZXIuIChVc2luZyBsZXZlbCAwIHBlcm1hbmVudGx5IGlzIG5vdCBh
biBvcHRpbWFsIHVzYWdlIG9mCiAgICAgICB6bGliLCBzbyB3ZSBkb24ndCBjYXJlIGFib3V0IHRoaXMgcGF0aG9sb2dpY2FsIGNhc2UuKQogICAgICAgKi8KCiAgICAgIG4gPSBzLmhhc2hfc2l6ZTsKICAgICAgcCA9IG47CgogICAgICBkbyB7CiAgICAgICAgbSA9IHMuaGVhZFstLXBdOwogICAgICAgIHMuaGVhZFtwXSA9IG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMDsKICAgICAgfSB3aGlsZSAoLS1uKTsKCiAgICAgIG4gPSBfd19zaXplOwogICAgICBwID0gbjsKCiAgICAgIGRvIHsKICAgICAgICBtID0gcy5wcmV2
Wy0tcF07CiAgICAgICAgcy5wcmV2W3BdID0gbSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwOwogICAgICAgIC8qIElmIG4gaXMgbm90IG9uIGFueSBoYXNoIGNoYWluLCBwcmV2W25dIGlzIGdhcmJhZ2UgYnV0CiAgICAgICAgICogaXRzIHZhbHVlIHdpbGwgbmV2ZXIgYmUgdXNlZC4KICAgICAgICAgKi8KICAgICAgfSB3aGlsZSAoLS1uKTsKCiAgICAgIG1vcmUgKz0gX3dfc2l6ZTsKICAgIH0KCiAgICBpZiAocy5zdHJtLmF2YWlsX2luID09PSAwKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgLyogSWYgdGhlcmUgd2Fz
IG5vIHNsaWRpbmc6CiAgICAgKiAgICBzdHJzdGFydCA8PSBXU0laRStNQVhfRElTVC0xICYmIGxvb2thaGVhZCA8PSBNSU5fTE9PS0FIRUFEIC0gMSAmJgogICAgICogICAgbW9yZSA9PSB3aW5kb3dfc2l6ZSAtIGxvb2thaGVhZCAtIHN0cnN0YXJ0CiAgICAgKiA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gKE1JTl9MT09LQUhFQUQtMSArIFdTSVpFICsgTUFYX0RJU1QtMSkKICAgICAqID0+IG1vcmUgPj0gd2luZG93X3NpemUgLSAyKldTSVpFICsgMgogICAgICogSW4gdGhlIEJJR19NRU0gb3IgTU1BUCBjYXNlIChub3QgeWV0
IHN1cHBvcnRlZCksCiAgICAgKiAgIHdpbmRvd19zaXplID09IGlucHV0X3NpemUgKyBNSU5fTE9PS0FIRUFEICAmJgogICAgICogICBzdHJzdGFydCArIHMtPmxvb2thaGVhZCA8PSBpbnB1dF9zaXplID0+IG1vcmUgPj0gTUlOX0xPT0tBSEVBRC4KICAgICAqIE90aGVyd2lzZSwgd2luZG93X3NpemUgPT0gMipXU0laRSBzbyBtb3JlID49IDIuCiAgICAgKiBJZiB0aGVyZSB3YXMgc2xpZGluZywgbW9yZSA+PSBXU0laRS4gU28gaW4gYWxsIGNhc2VzLCBtb3JlID49IDIuCiAgICAgKi8KICAgIC8vQXNzZXJ0KG1vcmUgPj0gMiwg
Im1vcmUgPCAyIik7CgoKICAgIG4gPSByZWFkX2J1ZihzLnN0cm0sIHMud2luZG93LCBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQsIG1vcmUpOwogICAgcy5sb29rYWhlYWQgKz0gbjsKICAgIC8qIEluaXRpYWxpemUgdGhlIGhhc2ggdmFsdWUgbm93IHRoYXQgd2UgaGF2ZSBzb21lIGlucHV0OiAqLwoKICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0ID49IE1JTl9NQVRDSCkgewogICAgICBzdHIgPSBzLnN0cnN0YXJ0IC0gcy5pbnNlcnQ7CiAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzdHJdOwogICAgICAvKiBVUERBVEVf
SEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIDFdKTsgKi8KCiAgICAgIHMuaW5zX2ggPSAocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQgXiBzLndpbmRvd1tzdHIgKyAxXSkgJiBzLmhhc2hfbWFzazsgLy8jaWYgTUlOX01BVENIICE9IDMKICAgICAgLy8gICAgICAgIENhbGwgdXBkYXRlX2hhc2goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzCiAgICAgIC8vI2VuZGlmCgogICAgICB3aGlsZSAocy5pbnNlcnQpIHsKICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRD
SC0xXSk7ICovCiAgICAgICAgcy5pbnNfaCA9IChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrOwogICAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07CiAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyOwogICAgICAgIHN0cisrOwogICAgICAgIHMuaW5zZXJ0LS07CgogICAgICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0IDwgTUlOX01BVENIKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAg
IH0KICAgIH0KICAgIC8qIElmIHRoZSB3aG9sZSBpbnB1dCBoYXMgbGVzcyB0aGFuIE1JTl9NQVRDSCBieXRlcywgaW5zX2ggaXMgZ2FyYmFnZSwKICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBpbXBvcnRhbnQgc2luY2Ugb25seSBsaXRlcmFsIGJ5dGVzIHdpbGwgYmUgZW1pdHRlZC4KICAgICAqLwoKICB9IHdoaWxlIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgcy5zdHJtLmF2YWlsX2luICE9PSAwKTsKICAvKiBJZiB0aGUgV0lOX0lOSVQgYnl0ZXMgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBkYXRhIGhhdmUg
bmV2ZXIgYmVlbgogICAqIHdyaXR0ZW4sIHRoZW4gemVybyB0aG9zZSBieXRlcyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgcmVwb3J0cyBvZgogICAqIHRoZSB1c2Ugb2YgdW5pbml0aWFsaXplZCAob3IgdW5pbml0aWFsaXNlZCBhcyBKdWxpYW4gd3JpdGVzKSBieXRlcyBieQogICAqIHRoZSBsb25nZXN0IG1hdGNoIHJvdXRpbmVzLiAgVXBkYXRlIHRoZSBoaWdoIHdhdGVyIG1hcmsgZm9yIHRoZSBuZXh0CiAgICogdGltZSB0aHJvdWdoIGhlcmUuICBXSU5fSU5JVCBpcyBzZXQgdG8gTUFYX01BVENIIHNpbmNlIHRo
ZSBsb25nZXN0IG1hdGNoCiAgICogcm91dGluZXMgYWxsb3cgc2Nhbm5pbmcgdG8gc3Ryc3RhcnQgKyBNQVhfTUFUQ0gsIGlnbm9yaW5nIGxvb2thaGVhZC4KICAgKi8KICAvLyAgaWYgKHMuaGlnaF93YXRlciA8IHMud2luZG93X3NpemUpIHsKICAvLyAgICB2YXIgY3VyciA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZDsKICAvLyAgICB2YXIgaW5pdCA9IDA7CiAgLy8KICAvLyAgICBpZiAocy5oaWdoX3dhdGVyIDwgY3VycikgewogIC8vICAgICAgLyogUHJldmlvdXMgaGlnaCB3YXRlciBtYXJrIGJlbG93IGN1cnJlbnQgZGF0
YSAtLSB6ZXJvIFdJTl9JTklUCiAgLy8gICAgICAgKiBieXRlcyBvciB1cCB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy4KICAvLyAgICAgICAqLwogIC8vICAgICAgaW5pdCA9IHMud2luZG93X3NpemUgLSBjdXJyOwogIC8vICAgICAgaWYgKGluaXQgPiBXSU5fSU5JVCkKICAvLyAgICAgICAgaW5pdCA9IFdJTl9JTklUOwogIC8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgY3VyciwgKHVuc2lnbmVkKWluaXQpOwogIC8vICAgICAgcy0+aGlnaF93YXRlciA9IGN1cnIgKyBpbml0OwogIC8vICAgIH0KICAv
LyAgICBlbHNlIGlmIChzLT5oaWdoX3dhdGVyIDwgKHVsZyljdXJyICsgV0lOX0lOSVQpIHsKICAvLyAgICAgIC8qIEhpZ2ggd2F0ZXIgbWFyayBhdCBvciBhYm92ZSBjdXJyZW50IGRhdGEsIGJ1dCBiZWxvdyBjdXJyZW50IGRhdGEKICAvLyAgICAgICAqIHBsdXMgV0lOX0lOSVQgLS0gemVybyBvdXQgdG8gY3VycmVudCBkYXRhIHBsdXMgV0lOX0lOSVQsIG9yIHVwCiAgLy8gICAgICAgKiB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy4KICAvLyAgICAgICAqLwogIC8vICAgICAgaW5pdCA9ICh1bGcpY3VyciAr
IFdJTl9JTklUIC0gcy0+aGlnaF93YXRlcjsKICAvLyAgICAgIGlmIChpbml0ID4gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyKQogIC8vICAgICAgICBpbml0ID0gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyOwogIC8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgcy0+aGlnaF93YXRlciwgKHVuc2lnbmVkKWluaXQpOwogIC8vICAgICAgcy0+aGlnaF93YXRlciArPSBpbml0OwogIC8vICAgIH0KICAvLyAgfQogIC8vCiAgLy8gIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplIC0g
TUlOX0xPT0tBSEVBRCwKICAvLyAgICAibm90IGVub3VnaCByb29tIGZvciBzZWFyY2giKTsKCn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIENvcHkgd2l0aG91dCBjb21wcmVzc2lvbiBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuCiAqIHRoZSBjdXJyZW50IGJsb2NrIHN0YXRlLgogKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlv
bmFyeSBzaW5jZQogKiB1bmNvbXByZXNzaWJsZSBkYXRhIGlzIHByb2JhYmx5IG5vdCB1c2VmdWwuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZAogKiBvbmx5IGZvciB0aGUgbGV2ZWw9MCBjb21wcmVzc2lvbiBvcHRpb24uCiAqIE5PVEU6IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIG9wdGltaXplZCB0byBhdm9pZCBleHRyYSBjb3B5aW5nIGZyb20KICogd2luZG93IHRvIHBlbmRpbmdfYnVmLgogKi8KCgpmdW5jdGlvbiBkZWZsYXRlX3N0b3JlZChzLCBmbHVzaCkgewogIC8qIFN0b3JlZCBibG9ja3MgYXJlIGxpbWl0ZWQgdG8gMHhm
ZmZmIGJ5dGVzLCBwZW5kaW5nX2J1ZiBpcyBsaW1pdGVkCiAgICogdG8gcGVuZGluZ19idWZfc2l6ZSwgYW5kIGVhY2ggc3RvcmVkIGJsb2NrIGhhcyBhIDUgYnl0ZSBoZWFkZXI6CiAgICovCiAgdmFyIG1heF9ibG9ja19zaXplID0gMHhmZmZmOwoKICBpZiAobWF4X2Jsb2NrX3NpemUgPiBzLnBlbmRpbmdfYnVmX3NpemUgLSA1KSB7CiAgICBtYXhfYmxvY2tfc2l6ZSA9IHMucGVuZGluZ19idWZfc2l6ZSAtIDU7CiAgfQogIC8qIENvcHkgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIGlucHV0IHRvIG91dHB1dDogKi8KCgogIGZv
ciAoOzspIHsKICAgIC8qIEZpbGwgdGhlIHdpbmRvdyBhcyBtdWNoIGFzIHBvc3NpYmxlOiAqLwogICAgaWYgKHMubG9va2FoZWFkIDw9IDEpIHsKICAgICAgLy9Bc3NlcnQocy0+c3Ryc3RhcnQgPCBzLT53X3NpemUrTUFYX0RJU1QocykgfHwKICAgICAgLy8gIHMtPmJsb2NrX3N0YXJ0ID49IChsb25nKXMtPndfc2l6ZSwgInNsaWRlIHRvbyBsYXRlIik7CiAgICAgIC8vICAgICAgaWYgKCEocy5zdHJzdGFydCA8IHMud19zaXplICsgKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkgfHwKICAgICAgLy8gICAgICAgIHMuYmxvY2tf
c3RhcnQgPj0gcy53X3NpemUpKSB7CiAgICAgIC8vICAgICAgICB0aHJvdyAgbmV3IEVycm9yKCJzbGlkZSB0b28gbGF0ZSIpOwogICAgICAvLyAgICAgIH0KICAgICAgZmlsbF93aW5kb3cocyk7CgogICAgICBpZiAocy5sb29rYWhlYWQgPT09IDAgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHsKICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICB9CgogICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqLwoKICAg
IH0gLy9Bc3NlcnQocy0+YmxvY2tfc3RhcnQgPj0gMEwsICJibG9jayBnb25lIik7CiAgICAvLyAgICBpZiAocy5ibG9ja19zdGFydCA8IDApIHRocm93IG5ldyBFcnJvcigiYmxvY2sgZ29uZSIpOwoKCiAgICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkOwogICAgcy5sb29rYWhlYWQgPSAwOwogICAgLyogRW1pdCBhIHN0b3JlZCBibG9jayBpZiBwZW5kaW5nX2J1ZiB3aWxsIGJlIGZ1bGw6ICovCgogICAgdmFyIG1heF9zdGFydCA9IHMuYmxvY2tfc3RhcnQgKyBtYXhfYmxvY2tfc2l6ZTsKCiAgICBpZiAocy5zdHJzdGFydCA9
PT0gMCB8fCBzLnN0cnN0YXJ0ID49IG1heF9zdGFydCkgewogICAgICAvKiBzdHJzdGFydCA9PSAwIGlzIHBvc3NpYmxlIHdoZW4gd3JhcGFyb3VuZCBvbiAxNi1iaXQgbWFjaGluZSAqLwogICAgICBzLmxvb2thaGVhZCA9IHMuc3Ryc3RhcnQgLSBtYXhfc3RhcnQ7CiAgICAgIHMuc3Ryc3RhcnQgPSBtYXhfc3RhcnQ7CiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi8KCiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwoKICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICByZXR1
cm4gQlNfTkVFRF9NT1JFOwogICAgICB9CiAgICAgIC8qKiovCgogICAgfQogICAgLyogRmx1c2ggaWYgd2UgbWF5IGhhdmUgdG8gc2xpZGUsIG90aGVyd2lzZSBibG9ja19zdGFydCBtYXkgYmVjb21lCiAgICAgKiBuZWdhdGl2ZSBhbmQgdGhlIGRhdGEgd2lsbCBiZSBnb25lOgogICAgICovCgoKICAgIGlmIChzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCA+PSBzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHsKICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNl
KTsKCiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTsKICAgICAgfQogICAgICAvKioqLwoKICAgIH0KICB9CgogIHMuaW5zZXJ0ID0gMDsKCiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkgewogICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqLwogICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTsKCiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7CiAgICB9CiAgICAvKioqLwoKCiAgICBy
ZXR1cm4gQlNfRklOSVNIX0RPTkU7CiAgfQoKICBpZiAocy5zdHJzdGFydCA+IHMuYmxvY2tfc3RhcnQpIHsKICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi8KICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwoKICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICB9CiAgICAvKioqLwoKICB9CgogIHJldHVybiBCU19ORUVEX01PUkU7Cn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09CiAqIENvbXByZXNzIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm4gdGhlIGN1cnJlbnQKICogYmxvY2sgc3RhdGUuCiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgcGVyZm9ybSBsYXp5IGV2YWx1YXRpb24gb2YgbWF0Y2hlcyBhbmQgaW5zZXJ0cwogKiBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBvbmx5IGZvciB1bm1hdGNoZWQgc3RyaW5ncyBvciBmb3Igc2hvcnQKICogbWF0Y2hlcy4gSXQgaXMgdXNlZCBvbmx5IGZvciB0aGUgZmFzdCBjb21wcmVz
c2lvbiBvcHRpb25zLgogKi8KCgpmdW5jdGlvbiBkZWZsYXRlX2Zhc3QocywgZmx1c2gpIHsKICB2YXIgaGFzaF9oZWFkOwogIC8qIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gKi8KCiAgdmFyIGJmbHVzaDsKICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi8KCiAgZm9yICg7OykgewogICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0CiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlcwog
ICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlCiAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLgogICAgICovCiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7CiAgICAgIGZpbGxfd2luZG93KHMpOwoKICAgICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkgewogICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgIH0KCiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0g
MCkgewogICAgICAgIGJyZWFrOwogICAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovCiAgICAgIH0KICAgIH0KICAgIC8qIEluc2VydCB0aGUgc3RyaW5nIHdpbmRvd1tzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGUKICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOgogICAgICovCgoKICAgIGhhc2hfaGVhZCA9IDAKICAgIC8qTklMKi8KICAgIDsKCiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7CiAgICAgIC8qKiogSU5T
RVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovCiAgICAgIHMuaW5zX2ggPSAocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7CiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdOwogICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0OwogICAgICAvKioqLwogICAgfQogICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGlu
ZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC4KICAgICAqIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBhbHdheXMgbWF0Y2hfbGVuZ3RoIDwgTUlOX01BVENICiAgICAgKi8KCgogICAgaWYgKGhhc2hfaGVhZCAhPT0gMAogICAgLypOSUwqLwogICAgJiYgcy5zdHJzdGFydCAtIGhhc2hfaGVhZCA8PSBzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHsKICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcKICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIg
d2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoCiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS4KICAgICAgICovCiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpOwogICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqLwogICAgfQoKICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHsKICAgICAgLy8gY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5tYXRjaF9zdGFydCwgcy5t
YXRjaF9sZW5ndGgpOyAvLyBmb3IgZGVidWcgb25seQoKICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCwKICAgICAgICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi8KICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7CiAgICAgIHMubG9va2FoZWFkIC09IHMubWF0Y2hfbGVuZ3RoOwogICAgICAvKiBJbnNlcnQgbmV3
IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoCiAgICAgICAqIGlzIG5vdCB0b28gbGFyZ2UuIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uCiAgICAgICAqLwoKICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2gKICAgICAgLyptYXhfaW5zZXJ0X2xlbmd0aCovCiAgICAgICYmIHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkgewogICAgICAgIHMubWF0Y2hfbGVuZ3RoLS07CiAgICAgICAgLyogc3RyaW5nIGF0IHN0cnN0YXJ0IGFs
cmVhZHkgaW4gdGFibGUgKi8KCiAgICAgICAgZG8gewogICAgICAgICAgcy5zdHJzdGFydCsrOwogICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi8KCiAgICAgICAgICBzLmluc19oID0gKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0IF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrOwogICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07CiAgICAgICAgICBz
LmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0OwogICAgICAgICAgLyoqKi8KCiAgICAgICAgICAvKiBzdHJzdGFydCBuZXZlciBleGNlZWRzIFdTSVpFLU1BWF9NQVRDSCwgc28gdGhlcmUgYXJlCiAgICAgICAgICAgKiBhbHdheXMgTUlOX01BVENIIGJ5dGVzIGFoZWFkLgogICAgICAgICAgICovCiAgICAgICAgfSB3aGlsZSAoLS1zLm1hdGNoX2xlbmd0aCAhPT0gMCk7CgogICAgICAgIHMuc3Ryc3RhcnQrKzsKICAgICAgfSBlbHNlIHsKICAgICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoOwogICAgICAgIHMubWF0
Y2hfbGVuZ3RoID0gMDsKICAgICAgICBzLmluc19oID0gcy53aW5kb3dbcy5zdHJzdGFydF07CiAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCsxXSk7ICovCgogICAgICAgIHMuaW5zX2ggPSAocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgMV0pICYgcy5oYXNoX21hc2s7IC8vI2lmIE1JTl9NQVRDSCAhPSAzCiAgICAgICAgLy8gICAgICAgICAgICAgICAgQ2FsbCBVUERBVEVfSEFTSCgpIE1JTl9NQVRDSC0zIG1vcmUgdGltZXMKICAgICAg
ICAvLyNlbmRpZgoKICAgICAgICAvKiBJZiBsb29rYWhlYWQgPCBNSU5fTUFUQ0gsIGluc19oIGlzIGdhcmJhZ2UsIGJ1dCBpdCBkb2VzIG5vdAogICAgICAgICAqIG1hdHRlciBzaW5jZSBpdCB3aWxsIGJlIHJlY29tcHV0ZWQgYXQgbmV4dCBkZWZsYXRlIGNhbGwuCiAgICAgICAgICovCiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi8KICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIiVjIiwgcy53aW5kb3dbcy5zdHJzdGFydF0pKTsKCiAgICAgIC8qKiogX3RyX3Rh
bGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqLwogICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pOwogICAgICBzLmxvb2thaGVhZC0tOwogICAgICBzLnN0cnN0YXJ0Kys7CiAgICB9CgogICAgaWYgKGJmbHVzaCkgewogICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovCiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwoKICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICByZXR1cm4gQlNfTkVF
RF9NT1JFOwogICAgICB9CiAgICAgIC8qKiovCgogICAgfQogIH0KCiAgcy5pbnNlcnQgPSBzLnN0cnN0YXJ0IDwgTUlOX01BVENIIC0gMSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0ggLSAxOwoKICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7CiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovCiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpOwoKICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDsKICAgIH0KICAgIC8qKiovCgoKICAgIHJldHVybiBC
U19GSU5JU0hfRE9ORTsKICB9CgogIGlmIChzLmxhc3RfbGl0KSB7CiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovCiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTsKCiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgfQogICAgLyoqKi8KCiAgfQoKICByZXR1cm4gQlNfQkxPQ0tfRE9ORTsKfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogU2Ft
ZSBhcyBhYm92ZSwgYnV0IGFjaGlldmVzIGJldHRlciBjb21wcmVzc2lvbi4gV2UgdXNlIGEgbGF6eQogKiBldmFsdWF0aW9uIGZvciBtYXRjaGVzOiBhIG1hdGNoIGlzIGZpbmFsbHkgYWRvcHRlZCBvbmx5IGlmIHRoZXJlIGlzCiAqIG5vIGJldHRlciBtYXRjaCBhdCB0aGUgbmV4dCB3aW5kb3cgcG9zaXRpb24uCiAqLwoKCmZ1bmN0aW9uIGRlZmxhdGVfc2xvdyhzLCBmbHVzaCkgewogIHZhciBoYXNoX2hlYWQ7CiAgLyogaGVhZCBvZiBoYXNoIGNoYWluICovCgogIHZhciBiZmx1c2g7CiAgLyogc2V0IGlmIGN1cnJlbnQgYmxv
Y2sgbXVzdCBiZSBmbHVzaGVkICovCgogIHZhciBtYXhfaW5zZXJ0OwogIC8qIFByb2Nlc3MgdGhlIGlucHV0IGJsb2NrLiAqLwoKICBmb3IgKDs7KSB7CiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHQKICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzCiAgICAgKiBmb3IgdGhlIG5leHQgbWF0Y2gsIHBsdXMgTUlOX01BVENIIGJ5dGVzIHRvIGluc2VydCB0aGUKICAgICAqIHN0cmluZyBmb2xsb3dpbmcgdGhl
IG5leHQgbWF0Y2guCiAgICAgKi8KICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQpIHsKICAgICAgZmlsbF93aW5kb3cocyk7CgogICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7CiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTsKICAgICAgfQoKICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi8KCiAgICB9CiAgICAvKiBJbnNlcnQgdGhl
IHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlCiAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjoKICAgICAqLwoKCiAgICBoYXNoX2hlYWQgPSAwCiAgICAvKk5JTCovCiAgICA7CgogICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkgewogICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqLwogICAgICBzLmluc19oID0gKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0IF4gcy53
aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrOwogICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTsKICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDsKICAgICAgLyoqKi8KICAgIH0KICAgIC8qIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguCiAgICAgKi8KCgogICAgcy5wcmV2X2xlbmd0aCA9IHMubWF0Y2hfbGVuZ3RoOwogICAgcy5wcmV2X21hdGNoID0g
cy5tYXRjaF9zdGFydDsKICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTsKCiAgICBpZiAoaGFzaF9oZWFkICE9PSAwCiAgICAvKk5JTCovCiAgICAmJiBzLnByZXZfbGVuZ3RoIDwgcy5tYXhfbGF6eV9tYXRjaCAmJiBzLnN0cnN0YXJ0IC0gaGFzaF9oZWFkIDw9IHMud19zaXplIC0gTUlOX0xPT0tBSEVBRAogICAgLypNQVhfRElTVChzKSovCiAgICApIHsKICAgICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZwogICAgICAgICAqIG9mIHdpbmRvdyBp
bmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaAogICAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS4KICAgICAgICAgKi8KICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2gocywgaGFzaF9oZWFkKTsKICAgICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqLwoKICAgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gNSAmJiAocy5zdHJhdGVneSA9PT0gWl9GSUxURVJFRCB8fCBzLm1h
dGNoX2xlbmd0aCA9PT0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0ID4gNDA5NgogICAgICAgIC8qVE9PX0ZBUiovCiAgICAgICAgKSkgewogICAgICAgICAgLyogSWYgcHJldl9tYXRjaCBpcyBhbHNvIE1JTl9NQVRDSCwgbWF0Y2hfc3RhcnQgaXMgZ2FyYmFnZQogICAgICAgICAgICogYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS4KICAgICAgICAgICAqLwogICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxOwogICAgICAgIH0KICAgICAgfQogICAg
LyogSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50CiAgICAgKiBtYXRjaCBpcyBub3QgYmV0dGVyLCBvdXRwdXQgdGhlIHByZXZpb3VzIG1hdGNoOgogICAgICovCgoKICAgIGlmIChzLnByZXZfbGVuZ3RoID49IE1JTl9NQVRDSCAmJiBzLm1hdGNoX2xlbmd0aCA8PSBzLnByZXZfbGVuZ3RoKSB7CiAgICAgIG1heF9pbnNlcnQgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQgLSBNSU5fTUFUQ0g7CiAgICAgIC8qIERvIG5vdCBpbnNlcnQgc3RyaW5ncyBpbiBoYXNoIHRhYmxl
IGJleW9uZCB0aGlzLiAqLwogICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQtMSwgcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoKTsKCiAgICAgIC8qKipfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCwKICAgICAgICAgICAgICAgICAgICAgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsqKiovCgogICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gpOwog
ICAgICAvKiBJbnNlcnQgaW4gaGFzaCB0YWJsZSBhbGwgc3RyaW5ncyB1cCB0byB0aGUgZW5kIG9mIHRoZSBtYXRjaC4KICAgICAgICogc3Ryc3RhcnQtMSBhbmQgc3Ryc3RhcnQgYXJlIGFscmVhZHkgaW5zZXJ0ZWQuIElmIHRoZXJlIGlzIG5vdAogICAgICAgKiBlbm91Z2ggbG9va2FoZWFkLCB0aGUgbGFzdCB0d28gc3RyaW5ncyBhcmUgbm90IGluc2VydGVkIGluCiAgICAgICAqIHRoZSBoYXNoIHRhYmxlLgogICAgICAgKi8KCiAgICAgIHMubG9va2FoZWFkIC09IHMucHJldl9sZW5ndGggLSAxOwogICAgICBzLnByZXZfbGVu
Z3RoIC09IDI7CgogICAgICBkbyB7CiAgICAgICAgaWYgKCsrcy5zdHJzdGFydCA8PSBtYXhfaW5zZXJ0KSB7CiAgICAgICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqLwogICAgICAgICAgcy5pbnNfaCA9IChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzazsKICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdOwogICAg
ICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDsKICAgICAgICAgIC8qKiovCiAgICAgICAgfQogICAgICB9IHdoaWxlICgtLXMucHJldl9sZW5ndGggIT09IDApOwoKICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwOwogICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7CiAgICAgIHMuc3Ryc3RhcnQrKzsKCiAgICAgIGlmIChiZmx1c2gpIHsKICAgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovCiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7CgogICAgICAgIGlmIChzLnN0
cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICAgIH0KICAgICAgICAvKioqLwoKICAgICAgfQogICAgfSBlbHNlIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkgewogICAgICAvKiBJZiB0aGVyZSB3YXMgbm8gbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHBvc2l0aW9uLCBvdXRwdXQgYQogICAgICAgKiBzaW5nbGUgbGl0ZXJhbC4gSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYnV0IHRoZSBjdXJyZW50IG1hdGNoCiAgICAgICAqIGlzIGxvbmdlciwgdHJ1bmNhdGUgdGhlIHByZXZpb3VzIG1h
dGNoIHRvIGEgc2luZ2xlIGxpdGVyYWwuCiAgICAgICAqLwogICAgICAvL1RyYWNldnYoKHN0ZGVyciwiJWMiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTsKCiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovCiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pOwoKICAgICAgaWYgKGJmbHVzaCkgewogICAgICAgIC8qKiogRkxVU0hfQkxPQ0tfT05MWShzLCAwKSAqKiovCiAgICAgICAgZmx1c2hf
YmxvY2tfb25seShzLCBmYWxzZSk7CiAgICAgICAgLyoqKi8KICAgICAgfQoKICAgICAgcy5zdHJzdGFydCsrOwogICAgICBzLmxvb2thaGVhZC0tOwoKICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvKiBUaGVyZSBpcyBubyBwcmV2aW91cyBtYXRjaCB0byBjb21wYXJlIHdpdGgsIHdhaXQgZm9yCiAgICAgICAqIHRoZSBuZXh0IHN0ZXAgdG8gZGVjaWRlLgogICAgICAgKi8KICAgICAgcy5tYXRjaF9hdmFpbGFi
bGUgPSAxOwogICAgICBzLnN0cnN0YXJ0Kys7CiAgICAgIHMubG9va2FoZWFkLS07CiAgICB9CiAgfSAvL0Fzc2VydCAoZmx1c2ggIT0gWl9OT19GTFVTSCwgIm5vIGZsdXNoPyIpOwoKCiAgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7CiAgICAvL1RyYWNldnYoKHN0ZGVyciwiJWMiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTsKCiAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqLwogICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Mu
c3Ryc3RhcnQgLSAxXSk7CiAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7CiAgfQoKICBzLmluc2VydCA9IHMuc3Ryc3RhcnQgPCBNSU5fTUFUQ0ggLSAxID8gcy5zdHJzdGFydCA6IE1JTl9NQVRDSCAtIDE7CgogIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHsKICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi8KICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7CgogICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEOwogICAgfQogICAgLyoqKi8KCgogICAg
cmV0dXJuIEJTX0ZJTklTSF9ET05FOwogIH0KCiAgaWYgKHMubGFzdF9saXQpIHsKICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi8KICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwoKICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICB9CiAgICAvKioqLwoKICB9CgogIHJldHVybiBCU19CTE9DS19ET05FOwp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PQogKiBGb3IgWl9STEUsIHNpbXBseSBsb29rIGZvciBydW5zIG9mIGJ5dGVzLCBnZW5lcmF0ZSBtYXRjaGVzIG9ubHkgb2YgZGlzdGFuY2UKICogb25lLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS4gIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mCiAqIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIFpfUkxFLikKICovCgoKZnVuY3Rpb24gZGVmbGF0ZV9ybGUocywgZmx1c2gpIHsKICB2YXIgYmZsdXNoOwogIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqLwoKICB2
YXIgcHJldjsKICAvKiBieXRlIGF0IGRpc3RhbmNlIG9uZSB0byBtYXRjaCAqLwoKICB2YXIgc2Nhbiwgc3RyZW5kOwogIC8qIHNjYW4gZ29lcyB1cCB0byBzdHJlbmQgZm9yIGxlbmd0aCBvZiBydW4gKi8KCiAgdmFyIF93aW4gPSBzLndpbmRvdzsKCiAgZm9yICg7OykgewogICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0CiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlcwogICAgICogZm9yIHRoZSBsb25nZXN0
IHJ1biwgcGx1cyBvbmUgZm9yIHRoZSB1bnJvbGxlZCBsb29wLgogICAgICovCiAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIKSB7CiAgICAgIGZpbGxfd2luZG93KHMpOwoKICAgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkgewogICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgIH0KCiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovCgogICAg
fQogICAgLyogU2VlIGhvdyBtYW55IHRpbWVzIHRoZSBwcmV2aW91cyBieXRlIHJlcGVhdHMgKi8KCgogICAgcy5tYXRjaF9sZW5ndGggPSAwOwoKICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCA+IDApIHsKICAgICAgc2NhbiA9IHMuc3Ryc3RhcnQgLSAxOwogICAgICBwcmV2ID0gX3dpbltzY2FuXTsKCiAgICAgIGlmIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSkgewogICAgICAgIHN0cmVuZCA9IHMuc3Ry
c3RhcnQgKyBNQVhfTUFUQ0g7CgogICAgICAgIGRvIHsKICAgICAgICAgIC8qanNoaW50IG5vZW1wdHk6ZmFsc2UqLwogICAgICAgIH0gd2hpbGUgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgc2NhbiA8IHN0cmVuZCk7
CgogICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pOwoKICAgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPiBzLmxvb2thaGVhZCkgewogICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBzLmxvb2thaGVhZDsKICAgICAgICB9CiAgICAgIH0gLy9Bc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVJbnQpKHMtPndpbmRvd19zaXplLTEpLCAid2lsZCBzY2FuIik7CgogICAgfQogICAgLyogRW1pdCBtYXRjaCBpZiBoYXZlIHJ1biBvZiBNSU5fTUFUQ0ggb3IgbG9uZ2VyLCBlbHNlIGVtaXQgbGl0
ZXJhbCAqLwoKCiAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIKSB7CiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5zdHJzdGFydCAtIDEsIHMubWF0Y2hfbGVuZ3RoKTsKCiAgICAgIC8qKiogX3RyX3RhbGx5X2Rpc3QocywgMSwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi8KICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTsKICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7CiAgICAg
IHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7CiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi8KICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIiVjIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpOwoKICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovCiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7CiAgICAg
IHMubG9va2FoZWFkLS07CiAgICAgIHMuc3Ryc3RhcnQrKzsKICAgIH0KCiAgICBpZiAoYmZsdXNoKSB7CiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi8KICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7CgogICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7CiAgICAgIH0KICAgICAgLyoqKi8KCiAgICB9CiAgfQoKICBzLmluc2VydCA9IDA7CgogIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHsKICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7
ICoqKi8KICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7CgogICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEOwogICAgfQogICAgLyoqKi8KCgogICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FOwogIH0KCiAgaWYgKHMubGFzdF9saXQpIHsKICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi8KICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpOwoKICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7
CiAgICB9CiAgICAvKioqLwoKICB9CgogIHJldHVybiBCU19CTE9DS19ET05FOwp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBGb3IgWl9IVUZGTUFOX09OTFksIGRvIG5vdCBsb29rIGZvciBtYXRjaGVzLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS4KICogKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2YgZGVmbGF0ZSBzd2l0Y2hlcyBhd2F5IGZyb20gSHVmZm1hbi4pCiAqLwoKCmZ1bmN0aW9u
IGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgewogIHZhciBiZmx1c2g7CiAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovCgogIGZvciAoOzspIHsKICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgYSBsaXRlcmFsIHRvIHdyaXRlLiAqLwogICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7CiAgICAgIGZpbGxfd2luZG93KHMpOwoKICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7CiAgICAgICAgaWYgKGZsdXNoID09PSBaX05PX0ZMVVNIKSB7CiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JF
OwogICAgICAgIH0KCiAgICAgICAgYnJlYWs7CiAgICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi8KICAgICAgfQogICAgfQogICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovCgoKICAgIHMubWF0Y2hfbGVuZ3RoID0gMDsgLy9UcmFjZXZ2KChzdGRlcnIsIiVjIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpOwoKICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqLwoKICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0
cnN0YXJ0XSk7CiAgICBzLmxvb2thaGVhZC0tOwogICAgcy5zdHJzdGFydCsrOwoKICAgIGlmIChiZmx1c2gpIHsKICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTsKCiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTsKICAgICAgfQogICAgICAvKioqLwoKICAgIH0KICB9CgogIHMuaW5zZXJ0ID0gMDsKCiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkgewogICAgLyoqKiBGTFVTSF9CTE9DSyhz
LCAxKTsgKioqLwogICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTsKCiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7CiAgICB9CiAgICAvKioqLwoKCiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7CiAgfQoKICBpZiAocy5sYXN0X2xpdCkgewogICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqLwogICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7CgogICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgcmV0dXJuIEJTX05FRURf
TU9SRTsKICAgIH0KICAgIC8qKiovCgogIH0KCiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7Cn0KLyogVmFsdWVzIGZvciBtYXhfbGF6eV9tYXRjaCwgZ29vZF9tYXRjaCBhbmQgbWF4X2NoYWluX2xlbmd0aCwgZGVwZW5kaW5nIG9uCiAqIHRoZSBkZXNpcmVkIHBhY2sgbGV2ZWwgKDAuLjkpLiBUaGUgdmFsdWVzIGdpdmVuIGJlbG93IGhhdmUgYmVlbiB0dW5lZCB0bwogKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmUKICogZm91bmQgZm9yIHNw
ZWNpZmljIGZpbGVzLgogKi8KCgpmdW5jdGlvbiBDb25maWcoZ29vZF9sZW5ndGgsIG1heF9sYXp5LCBuaWNlX2xlbmd0aCwgbWF4X2NoYWluLCBmdW5jKSB7CiAgdGhpcy5nb29kX2xlbmd0aCA9IGdvb2RfbGVuZ3RoOwogIHRoaXMubWF4X2xhenkgPSBtYXhfbGF6eTsKICB0aGlzLm5pY2VfbGVuZ3RoID0gbmljZV9sZW5ndGg7CiAgdGhpcy5tYXhfY2hhaW4gPSBtYXhfY2hhaW47CiAgdGhpcy5mdW5jID0gZnVuYzsKfQoKdmFyIGNvbmZpZ3VyYXRpb25fdGFibGU7CmNvbmZpZ3VyYXRpb25fdGFibGUgPSBbCi8qICAgICAgZ29v
ZCBsYXp5IG5pY2UgY2hhaW4gKi8KbmV3IENvbmZpZygwLCAwLCAwLCAwLCBkZWZsYXRlX3N0b3JlZCksCi8qIDAgc3RvcmUgb25seSAqLwpuZXcgQ29uZmlnKDQsIDQsIDgsIDQsIGRlZmxhdGVfZmFzdCksCi8qIDEgbWF4IHNwZWVkLCBubyBsYXp5IG1hdGNoZXMgKi8KbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwKLyogMiAqLwpuZXcgQ29uZmlnKDQsIDYsIDMyLCAzMiwgZGVmbGF0ZV9mYXN0KSwKLyogMyAqLwpuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwKLyogNCBsYXp5IG1h
dGNoZXMgKi8KbmV3IENvbmZpZyg4LCAxNiwgMzIsIDMyLCBkZWZsYXRlX3Nsb3cpLAovKiA1ICovCm5ldyBDb25maWcoOCwgMTYsIDEyOCwgMTI4LCBkZWZsYXRlX3Nsb3cpLAovKiA2ICovCm5ldyBDb25maWcoOCwgMzIsIDEyOCwgMjU2LCBkZWZsYXRlX3Nsb3cpLAovKiA3ICovCm5ldyBDb25maWcoMzIsIDEyOCwgMjU4LCAxMDI0LCBkZWZsYXRlX3Nsb3cpLAovKiA4ICovCm5ldyBDb25maWcoMzIsIDI1OCwgMjU4LCA0MDk2LCBkZWZsYXRlX3Nsb3cpCi8qIDkgbWF4IGNvbXByZXNzaW9uICovCl07Ci8qID09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBJbml0aWFsaXplIHRoZSAibG9uZ2VzdCBtYXRjaCIgcm91dGluZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtCiAqLwoKZnVuY3Rpb24gbG1faW5pdChzKSB7CiAgcy53aW5kb3dfc2l6ZSA9IDIgKiBzLndfc2l6ZTsKICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi8KCiAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApOwoKICAvKiBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0
ZXJzOgogICAqLwoKICBzLm1heF9sYXp5X21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfbGF6eTsKICBzLmdvb2RfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmdvb2RfbGVuZ3RoOwogIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7CiAgcy5tYXhfY2hhaW5fbGVuZ3RoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfY2hhaW47CiAgcy5zdHJzdGFydCA9IDA7CiAgcy5ibG9ja19zdGFydCA9IDA7CiAgcy5sb29r
YWhlYWQgPSAwOwogIHMuaW5zZXJ0ID0gMDsKICBzLm1hdGNoX2xlbmd0aCA9IHMucHJldl9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxOwogIHMubWF0Y2hfYXZhaWxhYmxlID0gMDsKICBzLmluc19oID0gMDsKfQoKZnVuY3Rpb24gRGVmbGF0ZVN0YXRlKCkgewogIHRoaXMuc3RybSA9IG51bGw7CiAgLyogcG9pbnRlciBiYWNrIHRvIHRoaXMgemxpYiBzdHJlYW0gKi8KCiAgdGhpcy5zdGF0dXMgPSAwOwogIC8qIGFzIHRoZSBuYW1lIGltcGxpZXMgKi8KCiAgdGhpcy5wZW5kaW5nX2J1ZiA9IG51bGw7CiAgLyogb3V0cHV0IHN0aWxs
IHBlbmRpbmcgKi8KCiAgdGhpcy5wZW5kaW5nX2J1Zl9zaXplID0gMDsKICAvKiBzaXplIG9mIHBlbmRpbmdfYnVmICovCgogIHRoaXMucGVuZGluZ19vdXQgPSAwOwogIC8qIG5leHQgcGVuZGluZyBieXRlIHRvIG91dHB1dCB0byB0aGUgc3RyZWFtICovCgogIHRoaXMucGVuZGluZyA9IDA7CiAgLyogbmIgb2YgYnl0ZXMgaW4gdGhlIHBlbmRpbmcgYnVmZmVyICovCgogIHRoaXMud3JhcCA9IDA7CiAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqLwoKICB0aGlzLmd6aGVhZCA9IG51bGw7CiAg
LyogZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gdG8gd3JpdGUgKi8KCiAgdGhpcy5nemluZGV4ID0gMDsKICAvKiB3aGVyZSBpbiBleHRyYSwgbmFtZSwgb3IgY29tbWVudCAqLwoKICB0aGlzLm1ldGhvZCA9IFpfREVGTEFURUQ7CiAgLyogY2FuIG9ubHkgYmUgREVGTEFURUQgKi8KCiAgdGhpcy5sYXN0X2ZsdXNoID0gLTE7CiAgLyogdmFsdWUgb2YgZmx1c2ggcGFyYW0gZm9yIHByZXZpb3VzIGRlZmxhdGUgY2FsbCAqLwoKICB0aGlzLndfc2l6ZSA9IDA7CiAgLyogTFo3NyB3aW5kb3cgc2l6ZSAoMzJLIGJ5IGRlZmF1bHQpICov
CgogIHRoaXMud19iaXRzID0gMDsKICAvKiBsb2cyKHdfc2l6ZSkgICg4Li4xNikgKi8KCiAgdGhpcy53X21hc2sgPSAwOwogIC8qIHdfc2l6ZSAtIDEgKi8KCiAgdGhpcy53aW5kb3cgPSBudWxsOwogIC8qIFNsaWRpbmcgd2luZG93LiBJbnB1dCBieXRlcyBhcmUgcmVhZCBpbnRvIHRoZSBzZWNvbmQgaGFsZiBvZiB0aGUgd2luZG93LAogICAqIGFuZCBtb3ZlIHRvIHRoZSBmaXJzdCBoYWxmIGxhdGVyIHRvIGtlZXAgYSBkaWN0aW9uYXJ5IG9mIGF0IGxlYXN0IHdTaXplCiAgICogYnl0ZXMuIFdpdGggdGhpcyBvcmdhbml6YXRp
b24sIG1hdGNoZXMgYXJlIGxpbWl0ZWQgdG8gYSBkaXN0YW5jZSBvZgogICAqIHdTaXplLU1BWF9NQVRDSCBieXRlcywgYnV0IHRoaXMgZW5zdXJlcyB0aGF0IElPIGlzIGFsd2F5cwogICAqIHBlcmZvcm1lZCB3aXRoIGEgbGVuZ3RoIG11bHRpcGxlIG9mIHRoZSBibG9jayBzaXplLgogICAqLwoKICB0aGlzLndpbmRvd19zaXplID0gMDsKICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlcgogICAqIGlzIGRpcmVjdGx5IHVzZWQgYXMgc2xpZGluZyB3aW5k
b3cuCiAgICovCgogIHRoaXMucHJldiA9IG51bGw7CiAgLyogTGluayB0byBvbGRlciBzdHJpbmcgd2l0aCBzYW1lIGhhc2ggaW5kZXguIFRvIGxpbWl0IHRoZSBzaXplIG9mIHRoaXMKICAgKiBhcnJheSB0byA2NEssIHRoaXMgbGluayBpcyBtYWludGFpbmVkIG9ubHkgZm9yIHRoZSBsYXN0IDMySyBzdHJpbmdzLgogICAqIEFuIGluZGV4IGluIHRoaXMgYXJyYXkgaXMgdGh1cyBhIHdpbmRvdyBpbmRleCBtb2R1bG8gMzJLLgogICAqLwoKICB0aGlzLmhlYWQgPSBudWxsOwogIC8qIEhlYWRzIG9mIHRoZSBoYXNoIGNoYWlucyBv
ciBOSUwuICovCgogIHRoaXMuaW5zX2ggPSAwOwogIC8qIGhhc2ggaW5kZXggb2Ygc3RyaW5nIHRvIGJlIGluc2VydGVkICovCgogIHRoaXMuaGFzaF9zaXplID0gMDsKICAvKiBudW1iZXIgb2YgZWxlbWVudHMgaW4gaGFzaCB0YWJsZSAqLwoKICB0aGlzLmhhc2hfYml0cyA9IDA7CiAgLyogbG9nMihoYXNoX3NpemUpICovCgogIHRoaXMuaGFzaF9tYXNrID0gMDsKICAvKiBoYXNoX3NpemUtMSAqLwoKICB0aGlzLmhhc2hfc2hpZnQgPSAwOwogIC8qIE51bWJlciBvZiBiaXRzIGJ5IHdoaWNoIGluc19oIG11c3QgYmUgc2hpZnRl
ZCBhdCBlYWNoIGlucHV0CiAgICogc3RlcC4gSXQgbXVzdCBiZSBzdWNoIHRoYXQgYWZ0ZXIgTUlOX01BVENIIHN0ZXBzLCB0aGUgb2xkZXN0CiAgICogYnl0ZSBubyBsb25nZXIgdGFrZXMgcGFydCBpbiB0aGUgaGFzaCBrZXksIHRoYXQgaXM6CiAgICogICBoYXNoX3NoaWZ0ICogTUlOX01BVENIID49IGhhc2hfYml0cwogICAqLwoKICB0aGlzLmJsb2NrX3N0YXJ0ID0gMDsKICAvKiBXaW5kb3cgcG9zaXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY3VycmVudCBvdXRwdXQgYmxvY2suIEdldHMKICAgKiBuZWdhdGl2ZSB3
aGVuIHRoZSB3aW5kb3cgaXMgbW92ZWQgYmFja3dhcmRzLgogICAqLwoKICB0aGlzLm1hdGNoX2xlbmd0aCA9IDA7CiAgLyogbGVuZ3RoIG9mIGJlc3QgbWF0Y2ggKi8KCiAgdGhpcy5wcmV2X21hdGNoID0gMDsKICAvKiBwcmV2aW91cyBtYXRjaCAqLwoKICB0aGlzLm1hdGNoX2F2YWlsYWJsZSA9IDA7CiAgLyogc2V0IGlmIHByZXZpb3VzIG1hdGNoIGV4aXN0cyAqLwoKICB0aGlzLnN0cnN0YXJ0ID0gMDsKICAvKiBzdGFydCBvZiBzdHJpbmcgdG8gaW5zZXJ0ICovCgogIHRoaXMubWF0Y2hfc3RhcnQgPSAwOwogIC8qIHN0YXJ0
IG9mIG1hdGNoaW5nIHN0cmluZyAqLwoKICB0aGlzLmxvb2thaGVhZCA9IDA7CiAgLyogbnVtYmVyIG9mIHZhbGlkIGJ5dGVzIGFoZWFkIGluIHdpbmRvdyAqLwoKICB0aGlzLnByZXZfbGVuZ3RoID0gMDsKICAvKiBMZW5ndGggb2YgdGhlIGJlc3QgbWF0Y2ggYXQgcHJldmlvdXMgc3RlcC4gTWF0Y2hlcyBub3QgZ3JlYXRlciB0aGFuIHRoaXMKICAgKiBhcmUgZGlzY2FyZGVkLiBUaGlzIGlzIHVzZWQgaW4gdGhlIGxhenkgbWF0Y2ggZXZhbHVhdGlvbi4KICAgKi8KCiAgdGhpcy5tYXhfY2hhaW5fbGVuZ3RoID0gMDsKICAvKiBU
byBzcGVlZCB1cCBkZWZsYXRpb24sIGhhc2ggY2hhaW5zIGFyZSBuZXZlciBzZWFyY2hlZCBiZXlvbmQgdGhpcwogICAqIGxlbmd0aC4gIEEgaGlnaGVyIGxpbWl0IGltcHJvdmVzIGNvbXByZXNzaW9uIHJhdGlvIGJ1dCBkZWdyYWRlcyB0aGUKICAgKiBzcGVlZC4KICAgKi8KCiAgdGhpcy5tYXhfbGF6eV9tYXRjaCA9IDA7CiAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseQogICAqIHNtYWxsZXIgdGhhbiB0aGlzIHZhbHVlLiBUaGlzIG1lY2hh
bmlzbSBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uCiAgICogbGV2ZWxzID49IDQuCiAgICovCiAgLy8gVGhhdCdzIGFsaWFzIHRvIG1heF9sYXp5X21hdGNoLCBkb24ndCB1c2UgZGlyZWN0bHkKICAvL3RoaXMubWF4X2luc2VydF9sZW5ndGggPSAwOwoKICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdAogICAqIGdyZWF0ZXIgdGhhbiB0aGlzIGxlbmd0aC4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi4KICAgKiBt
YXhfaW5zZXJ0X2xlbmd0aCBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uIGxldmVscyA8PSAzLgogICAqLwoKICB0aGlzLmxldmVsID0gMDsKICAvKiBjb21wcmVzc2lvbiBsZXZlbCAoMS4uOSkgKi8KCiAgdGhpcy5zdHJhdGVneSA9IDA7CiAgLyogZmF2b3Igb3IgZm9yY2UgSHVmZm1hbiBjb2RpbmcqLwoKICB0aGlzLmdvb2RfbWF0Y2ggPSAwOwogIC8qIFVzZSBhIGZhc3RlciBzZWFyY2ggd2hlbiB0aGUgcHJldmlvdXMgbWF0Y2ggaXMgbG9uZ2VyIHRoYW4gdGhpcyAqLwoKICB0aGlzLm5pY2VfbWF0Y2ggPSAwOwogIC8q
IFN0b3Agc2VhcmNoaW5nIHdoZW4gY3VycmVudCBtYXRjaCBleGNlZWRzIHRoaXMgKi8KCiAgLyogdXNlZCBieSB0cmVlcy5jOiAqLwoKICAvKiBEaWRuJ3QgdXNlIGN0X2RhdGEgdHlwZWRlZiBiZWxvdyB0byBzdXBwcmVzcyBjb21waWxlciB3YXJuaW5nICovCiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fbHRyZWVbSEVBUF9TSVpFXTsgICAvKiBsaXRlcmFsIGFuZCBsZW5ndGggdHJlZSAqLwogIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2R0cmVlWzIqRF9DT0RFUysxXTsgLyogZGlzdGFuY2UgdHJlZSAqLwogIC8vIHN0cnVj
dCBjdF9kYXRhX3MgYmxfdHJlZVsyKkJMX0NPREVTKzFdOyAgLyogSHVmZm1hbiB0cmVlIGZvciBiaXQgbGVuZ3RocyAqLwogIC8vIFVzZSBmbGF0IGFycmF5IG9mIERPVUJMRSBzaXplLCB3aXRoIGludGVybGVhdmVkIGZhdGEsCiAgLy8gYmVjYXVzZSBKUyBkb2VzIG5vdCBzdXBwb3J0IGVmZmVjdGl2ZQoKICB0aGlzLmR5bl9sdHJlZSA9IG5ldyB1dGlscy5CdWYxNihIRUFQX1NJWkUgKiAyKTsKICB0aGlzLmR5bl9kdHJlZSA9IG5ldyB1dGlscy5CdWYxNigoMiAqIERfQ09ERVMgKyAxKSAqIDIpOwogIHRoaXMuYmxfdHJlZSA9
IG5ldyB1dGlscy5CdWYxNigoMiAqIEJMX0NPREVTICsgMSkgKiAyKTsKICB6ZXJvKHRoaXMuZHluX2x0cmVlKTsKICB6ZXJvKHRoaXMuZHluX2R0cmVlKTsKICB6ZXJvKHRoaXMuYmxfdHJlZSk7CiAgdGhpcy5sX2Rlc2MgPSBudWxsOwogIC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi8KCiAgdGhpcy5kX2Rlc2MgPSBudWxsOwogIC8qIGRlc2MuIGZvciBkaXN0YW5jZSB0cmVlICovCgogIHRoaXMuYmxfZGVzYyA9IG51bGw7CiAgLyogZGVzYy4gZm9yIGJpdCBsZW5ndGggdHJlZSAqLwogIC8vdXNoIGJsX2NvdW50W01BWF9C
SVRTKzFdOwoKICB0aGlzLmJsX2NvdW50ID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWF9CSVRTICsgMSk7CiAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCBmb3IgYW4gb3B0aW1hbCB0cmVlICovCiAgLy9pbnQgaGVhcFsyKkxfQ09ERVMrMV07ICAgICAgLyogaGVhcCB1c2VkIHRvIGJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzICovCgogIHRoaXMuaGVhcCA9IG5ldyB1dGlscy5CdWYxNigyICogTF9DT0RFUyArIDEpOwogIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqLwoKICB6ZXJvKHRo
aXMuaGVhcCk7CiAgdGhpcy5oZWFwX2xlbiA9IDA7CiAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwICovCgogIHRoaXMuaGVhcF9tYXggPSAwOwogIC8qIGVsZW1lbnQgb2YgbGFyZ2VzdCBmcmVxdWVuY3kgKi8KCiAgLyogVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS4gaGVhcFswXSBpcyBub3QgdXNlZC4KICAgKiBUaGUgc2FtZSBoZWFwIGFycmF5IGlzIHVzZWQgdG8gYnVpbGQgYWxsIHRyZWVzLgogICAqLwoKICB0aGlzLmRlcHRoID0gbmV3IHV0aWxzLkJ1ZjE2KDIg
KiBMX0NPREVTICsgMSk7IC8vdWNoIGRlcHRoWzIqTF9DT0RFUysxXTsKCiAgemVybyh0aGlzLmRlcHRoKTsKICAvKiBEZXB0aCBvZiBlYWNoIHN1YnRyZWUgdXNlZCBhcyB0aWUgYnJlYWtlciBmb3IgdHJlZXMgb2YgZXF1YWwgZnJlcXVlbmN5CiAgICovCgogIHRoaXMubF9idWYgPSAwOwogIC8qIGJ1ZmZlciBpbmRleCBmb3IgbGl0ZXJhbHMgb3IgbGVuZ3RocyAqLwoKICB0aGlzLmxpdF9idWZzaXplID0gMDsKICAvKiBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gIFRoZXJlIGFyZSA0IHJlYXNv
bnMgZm9yCiAgICogbGltaXRpbmcgbGl0X2J1ZnNpemUgdG8gNjRLOgogICAqICAgLSBmcmVxdWVuY2llcyBjYW4gYmUga2VwdCBpbiAxNiBiaXQgY291bnRlcnMKICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmaXJzdCBibG9jaywgYWxsIGlucHV0CiAgICogICAgIGRhdGEgaXMgc3RpbGwgaW4gdGhlIHdpbmRvdyBzbyB3ZSBjYW4gc3RpbGwgZW1pdCBhIHN0b3JlZCBibG9jayBldmVuCiAgICogICAgIHdoZW4gaW5wdXQgY29tZXMgZnJvbSBzdGFuZGFyZCBpbnB1dC4gIChUaGlzIGNh
biBhbHNvIGJlIGRvbmUgZm9yCiAgICogICAgIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKQogICAqICAgLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgYSBmaWxlIHNtYWxsZXIgdGhhbiA2NEssIHdlIGNhbgogICAqICAgICBldmVuIGVtaXQgYSBzdG9yZWQgZmlsZSBpbnN0ZWFkIG9mIGEgc3RvcmVkIGJsb2NrIChzYXZpbmcgNSBieXRlcykuCiAgICogICAgIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLgogICAq
ICAgLSBjcmVhdGluZyBuZXcgSHVmZm1hbiB0cmVlcyBsZXNzIGZyZXF1ZW50bHkgbWF5IG5vdCBwcm92aWRlIGZhc3QKICAgKiAgICAgYWRhcHRhdGlvbiB0byBjaGFuZ2VzIGluIHRoZSBpbnB1dCBkYXRhIHN0YXRpc3RpY3MuIChUYWtlIGZvcgogICAqICAgICBleGFtcGxlIGEgYmluYXJ5IGZpbGUgd2l0aCBwb29ybHkgY29tcHJlc3NpYmxlIGNvZGUgZm9sbG93ZWQgYnkKICAgKiAgICAgYSBoaWdobHkgY29tcHJlc3NpYmxlIHN0cmluZyB0YWJsZS4pIFNtYWxsZXIgYnVmZmVyIHNpemVzIGdpdmUKICAgKiAgICAgZmFzdCBh
ZGFwdGF0aW9uIGJ1dCBoYXZlIG9mIGNvdXJzZSB0aGUgb3ZlcmhlYWQgb2YgdHJhbnNtaXR0aW5nCiAgICogICAgIHRyZWVzIG1vcmUgZnJlcXVlbnRseS4KICAgKiAgIC0gSSBjYW4ndCBjb3VudCBhYm92ZSA0CiAgICovCgogIHRoaXMubGFzdF9saXQgPSAwOwogIC8qIHJ1bm5pbmcgaW5kZXggaW4gbF9idWYgKi8KCiAgdGhpcy5kX2J1ZiA9IDA7CiAgLyogQnVmZmVyIGluZGV4IGZvciBkaXN0YW5jZXMuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCBkX2J1ZiBhbmQgbF9idWYgaGF2ZQogICAqIHRoZSBzYW1lIG51bWJlciBvZiBl
bGVtZW50cy4gVG8gdXNlIGRpZmZlcmVudCBsZW5ndGhzLCBhbiBleHRyYSBmbGFnCiAgICogYXJyYXkgd291bGQgYmUgbmVjZXNzYXJ5LgogICAqLwoKICB0aGlzLm9wdF9sZW4gPSAwOwogIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIG9wdGltYWwgdHJlZXMgKi8KCiAgdGhpcy5zdGF0aWNfbGVuID0gMDsKICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBzdGF0aWMgdHJlZXMgKi8KCiAgdGhpcy5tYXRjaGVzID0gMDsKICAvKiBudW1iZXIgb2Ygc3RyaW5nIG1hdGNoZXMgaW4gY3VycmVu
dCBibG9jayAqLwoKICB0aGlzLmluc2VydCA9IDA7CiAgLyogYnl0ZXMgYXQgZW5kIG9mIHdpbmRvdyBsZWZ0IHRvIGluc2VydCAqLwoKICB0aGlzLmJpX2J1ZiA9IDA7CiAgLyogT3V0cHV0IGJ1ZmZlci4gYml0cyBhcmUgaW5zZXJ0ZWQgc3RhcnRpbmcgYXQgdGhlIGJvdHRvbSAobGVhc3QKICAgKiBzaWduaWZpY2FudCBiaXRzKS4KICAgKi8KCiAgdGhpcy5iaV92YWxpZCA9IDA7CiAgLyogTnVtYmVyIG9mIHZhbGlkIGJpdHMgaW4gYmlfYnVmLiAgQWxsIGJpdHMgYWJvdmUgdGhlIGxhc3QgdmFsaWQgYml0CiAgICogYXJlIGFs
d2F5cyB6ZXJvLgogICAqLwogIC8vIFVzZWQgZm9yIHdpbmRvdyBtZW1vcnkgaW5pdC4gV2Ugc2FmZWx5IGlnbm9yZSBpdCBmb3IgSlMuIFRoYXQgbWFrZXMKICAvLyBzZW5zZSBvbmx5IGZvciBwb2ludGVycyBhbmQgbWVtb3J5IGNoZWNrIHRvb2xzLgogIC8vdGhpcy5oaWdoX3dhdGVyID0gMDsKCiAgLyogSGlnaCB3YXRlciBtYXJrIG9mZnNldCBpbiB3aW5kb3cgZm9yIGluaXRpYWxpemVkIGJ5dGVzIC0tIGJ5dGVzIGFib3ZlCiAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNr
IHdhcm5pbmdzIHdoZW4KICAgKiBsb25nZXN0IG1hdGNoIHJvdXRpbmVzIGFjY2VzcyBieXRlcyBwYXN0IHRoZSBpbnB1dC4gIFRoaXMgaXMgdGhlbgogICAqIHVwZGF0ZWQgdG8gdGhlIG5ldyBoaWdoIHdhdGVyIG1hcmsuCiAgICovCn0KCmZ1bmN0aW9uIGRlZmxhdGVSZXNldEtlZXAoc3RybSkgewogIHZhciBzOwoKICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsKICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpOwogIH0KCiAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gMDsKICBzdHJtLmRh
dGFfdHlwZSA9IFpfVU5LTk9XTjsKICBzID0gc3RybS5zdGF0ZTsKICBzLnBlbmRpbmcgPSAwOwogIHMucGVuZGluZ19vdXQgPSAwOwoKICBpZiAocy53cmFwIDwgMCkgewogICAgcy53cmFwID0gLXMud3JhcDsKICAgIC8qIHdhcyBtYWRlIG5lZ2F0aXZlIGJ5IGRlZmxhdGUoLi4uLCBaX0ZJTklTSCk7ICovCiAgfQoKICBzLnN0YXR1cyA9IHMud3JhcCA/IElOSVRfU1RBVEUgOiBCVVNZX1NUQVRFOwogIHN0cm0uYWRsZXIgPSBzLndyYXAgPT09IDIgPyAwIC8vIGNyYzMyKDAsIFpfTlVMTCwgMCkKICA6IDE7IC8vIGFkbGVyMzIo
MCwgWl9OVUxMLCAwKQoKICBzLmxhc3RfZmx1c2ggPSBaX05PX0ZMVVNIOwoKICB0cmVlcy5fdHJfaW5pdChzKTsKCiAgcmV0dXJuIFpfT0s7Cn0KCmZ1bmN0aW9uIGRlZmxhdGVSZXNldChzdHJtKSB7CiAgdmFyIHJldCA9IGRlZmxhdGVSZXNldEtlZXAoc3RybSk7CgogIGlmIChyZXQgPT09IFpfT0spIHsKICAgIGxtX2luaXQoc3RybS5zdGF0ZSk7CiAgfQoKICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBkZWZsYXRlU2V0SGVhZGVyKHN0cm0sIGhlYWQpIHsKICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsKICAgIHJldHVy
biBaX1NUUkVBTV9FUlJPUjsKICB9CgogIGlmIChzdHJtLnN0YXRlLndyYXAgIT09IDIpIHsKICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICB9CgogIHN0cm0uc3RhdGUuZ3poZWFkID0gaGVhZDsKICByZXR1cm4gWl9PSzsKfQoKZnVuY3Rpb24gZGVmbGF0ZUluaXQyKHN0cm0sIGxldmVsLCBtZXRob2QsIHdpbmRvd0JpdHMsIG1lbUxldmVsLCBzdHJhdGVneSkgewogIGlmICghc3RybSkgewogICAgLy8gPT09IFpfTlVMTAogICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogIH0KCiAgdmFyIHdyYXAgPSAxOwoKICBpZiAobGV2
ZWwgPT09IFpfREVGQVVMVF9DT01QUkVTU0lPTikgewogICAgbGV2ZWwgPSA2OwogIH0KCiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7CiAgICAvKiBzdXBwcmVzcyB6bGliIHdyYXBwZXIgKi8KICAgIHdyYXAgPSAwOwogICAgd2luZG93Qml0cyA9IC13aW5kb3dCaXRzOwogIH0gZWxzZSBpZiAod2luZG93Qml0cyA+IDE1KSB7CiAgICB3cmFwID0gMjsKICAgIC8qIHdyaXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkICovCgogICAgd2luZG93Qml0cyAtPSAxNjsKICB9CgogIGlmIChtZW1MZXZlbCA8IDEgfHwgbWVtTGV2ZWwgPiBNQVhf
TUVNX0xFVkVMIHx8IG1ldGhvZCAhPT0gWl9ERUZMQVRFRCB8fCB3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUgfHwgbGV2ZWwgPCAwIHx8IGxldmVsID4gOSB8fCBzdHJhdGVneSA8IDAgfHwgc3RyYXRlZ3kgPiBaX0ZJWEVEKSB7CiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTsKICB9CgogIGlmICh3aW5kb3dCaXRzID09PSA4KSB7CiAgICB3aW5kb3dCaXRzID0gOTsKICB9CiAgLyogdW50aWwgMjU2LWJ5dGUgd2luZG93IGJ1ZyBmaXhlZCAqLwoKCiAgdmFyIHMgPSBuZXcgRGVmbGF0ZVN0YXRl
KCk7CiAgc3RybS5zdGF0ZSA9IHM7CiAgcy5zdHJtID0gc3RybTsKICBzLndyYXAgPSB3cmFwOwogIHMuZ3poZWFkID0gbnVsbDsKICBzLndfYml0cyA9IHdpbmRvd0JpdHM7CiAgcy53X3NpemUgPSAxIDw8IHMud19iaXRzOwogIHMud19tYXNrID0gcy53X3NpemUgLSAxOwogIHMuaGFzaF9iaXRzID0gbWVtTGV2ZWwgKyA3OwogIHMuaGFzaF9zaXplID0gMSA8PCBzLmhhc2hfYml0czsKICBzLmhhc2hfbWFzayA9IHMuaGFzaF9zaXplIC0gMTsKICBzLmhhc2hfc2hpZnQgPSB+figocy5oYXNoX2JpdHMgKyBNSU5fTUFUQ0ggLSAx
KSAvIE1JTl9NQVRDSCk7CiAgcy53aW5kb3cgPSBuZXcgdXRpbHMuQnVmOChzLndfc2l6ZSAqIDIpOwogIHMuaGVhZCA9IG5ldyB1dGlscy5CdWYxNihzLmhhc2hfc2l6ZSk7CiAgcy5wcmV2ID0gbmV3IHV0aWxzLkJ1ZjE2KHMud19zaXplKTsgLy8gRG9uJ3QgbmVlZCBtZW0gaW5pdCBtYWdpYyBmb3IgSlMuCiAgLy9zLmhpZ2hfd2F0ZXIgPSAwOyAgLyogbm90aGluZyB3cml0dGVuIHRvIHMtPndpbmRvdyB5ZXQgKi8KCiAgcy5saXRfYnVmc2l6ZSA9IDEgPDwgbWVtTGV2ZWwgKyA2OwogIC8qIDE2SyBlbGVtZW50cyBieSBkZWZh
dWx0ICovCgogIHMucGVuZGluZ19idWZfc2l6ZSA9IHMubGl0X2J1ZnNpemUgKiA0OyAvL292ZXJsYXkgPSAodXNoZiAqKSBaQUxMT0Moc3RybSwgcy0+bGl0X2J1ZnNpemUsIHNpemVvZih1c2gpKzIpOwogIC8vcy0+cGVuZGluZ19idWYgPSAodWNoZiAqKSBvdmVybGF5OwoKICBzLnBlbmRpbmdfYnVmID0gbmV3IHV0aWxzLkJ1Zjgocy5wZW5kaW5nX2J1Zl9zaXplKTsgLy8gSXQgaXMgb2Zmc2V0IGZyb20gYHMucGVuZGluZ19idWZgIChzaXplIGlzIGBzLmxpdF9idWZzaXplICogMmApCiAgLy9zLT5kX2J1ZiA9IG92ZXJsYXkg
KyBzLT5saXRfYnVmc2l6ZS9zaXplb2YodXNoKTsKCiAgcy5kX2J1ZiA9IDEgKiBzLmxpdF9idWZzaXplOyAvL3MtPmxfYnVmID0gcy0+cGVuZGluZ19idWYgKyAoMStzaXplb2YodXNoKSkqcy0+bGl0X2J1ZnNpemU7CgogIHMubF9idWYgPSAoMSArIDIpICogcy5saXRfYnVmc2l6ZTsKICBzLmxldmVsID0gbGV2ZWw7CiAgcy5zdHJhdGVneSA9IHN0cmF0ZWd5OwogIHMubWV0aG9kID0gbWV0aG9kOwogIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7Cn0KCmZ1bmN0aW9uIGRlZmxhdGVJbml0KHN0cm0sIGxldmVsKSB7CiAgcmV0
dXJuIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgWl9ERUZMQVRFRCwgTUFYX1dCSVRTLCBERUZfTUVNX0xFVkVMLCBaX0RFRkFVTFRfU1RSQVRFR1kpOwp9CgpmdW5jdGlvbiBkZWZsYXRlKHN0cm0sIGZsdXNoKSB7CiAgdmFyIG9sZF9mbHVzaCwgczsKICB2YXIgYmVnLCB2YWw7IC8vIGZvciBnemlwIGhlYWRlciB3cml0ZSBvbmx5CgogIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fCBmbHVzaCA+IFpfQkxPQ0sgfHwgZmx1c2ggPCAwKSB7CiAgICByZXR1cm4gc3RybSA/IGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUikgOiBa
X1NUUkVBTV9FUlJPUjsKICB9CgogIHMgPSBzdHJtLnN0YXRlOwoKICBpZiAoIXN0cm0ub3V0cHV0IHx8ICFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDAgfHwgcy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBmbHVzaCAhPT0gWl9GSU5JU0gpIHsKICAgIHJldHVybiBlcnIoc3RybSwgc3RybS5hdmFpbF9vdXQgPT09IDAgPyBaX0JVRl9FUlJPUiA6IFpfU1RSRUFNX0VSUk9SKTsKICB9CgogIHMuc3RybSA9IHN0cm07CiAgLyoganVzdCBpbiBjYXNlICovCgogIG9sZF9mbHVzaCA9IHMubGFzdF9mbHVzaDsKICBz
Lmxhc3RfZmx1c2ggPSBmbHVzaDsKICAvKiBXcml0ZSB0aGUgaGVhZGVyICovCgogIGlmIChzLnN0YXR1cyA9PT0gSU5JVF9TVEFURSkgewogICAgaWYgKHMud3JhcCA9PT0gMikgewogICAgICAvLyBHWklQIGhlYWRlcgogICAgICBzdHJtLmFkbGVyID0gMDsgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTsKCiAgICAgIHB1dF9ieXRlKHMsIDMxKTsKICAgICAgcHV0X2J5dGUocywgMTM5KTsKICAgICAgcHV0X2J5dGUocywgOCk7CgogICAgICBpZiAoIXMuZ3poZWFkKSB7CiAgICAgICAgLy8gcy0+Z3poZWFkID09IFpfTlVMTAogICAg
ICAgIHB1dF9ieXRlKHMsIDApOwogICAgICAgIHB1dF9ieXRlKHMsIDApOwogICAgICAgIHB1dF9ieXRlKHMsIDApOwogICAgICAgIHB1dF9ieXRlKHMsIDApOwogICAgICAgIHB1dF9ieXRlKHMsIDApOwogICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDogcy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMiA/IDQgOiAwKTsKICAgICAgICBwdXRfYnl0ZShzLCBPU19DT0RFKTsKICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcHV0X2J5
dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgKyAocy5nemhlYWQuaGNyYyA/IDIgOiAwKSArICghcy5nemhlYWQuZXh0cmEgPyAwIDogNCkgKyAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgKyAoIXMuZ3poZWFkLmNvbW1lbnQgPyAwIDogMTYpKTsKICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC50aW1lICYgMHhmZik7CiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQudGltZSA+PiA4ICYgMHhmZik7CiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQudGltZSA+PiAxNiAmIDB4ZmYpOwogICAgICAgIHB1dF9ieXRl
KHMsIHMuZ3poZWFkLnRpbWUgPj4gMjQgJiAweGZmKTsKICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6IHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgPyA0IDogMCk7CiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQub3MgJiAweGZmKTsKCiAgICAgICAgaWYgKHMuZ3poZWFkLmV4dHJhICYmIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkgewogICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZik7CiAgICAgICAgICBwdXRfYnl0ZShzLCBz
Lmd6aGVhZC5leHRyYS5sZW5ndGggPj4gOCAmIDB4ZmYpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMpIHsKICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcsIDApOwogICAgICAgIH0KCiAgICAgICAgcy5nemluZGV4ID0gMDsKICAgICAgICBzLnN0YXR1cyA9IEVYVFJBX1NUQVRFOwogICAgICB9CiAgICB9IGVsc2UgLy8gREVGTEFURSBoZWFkZXIKICAgICAgewogICAgICAgIHZhciBoZWFkZXIgPSBaX0RFRkxBVEVEICsgKHMud19iaXRz
IC0gOCA8PCA0KSA8PCA4OwogICAgICAgIHZhciBsZXZlbF9mbGFncyA9IC0xOwoKICAgICAgICBpZiAocy5zdHJhdGVneSA+PSBaX0hVRkZNQU5fT05MWSB8fCBzLmxldmVsIDwgMikgewogICAgICAgICAgbGV2ZWxfZmxhZ3MgPSAwOwogICAgICAgIH0gZWxzZSBpZiAocy5sZXZlbCA8IDYpIHsKICAgICAgICAgIGxldmVsX2ZsYWdzID0gMTsKICAgICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPT09IDYpIHsKICAgICAgICAgIGxldmVsX2ZsYWdzID0gMjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbGV2ZWxfZmxhZ3MgPSAz
OwogICAgICAgIH0KCiAgICAgICAgaGVhZGVyIHw9IGxldmVsX2ZsYWdzIDw8IDY7CgogICAgICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7CiAgICAgICAgICBoZWFkZXIgfD0gUFJFU0VUX0RJQ1Q7CiAgICAgICAgfQoKICAgICAgICBoZWFkZXIgKz0gMzEgLSBoZWFkZXIgJSAzMTsKICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7CiAgICAgICAgcHV0U2hvcnRNU0IocywgaGVhZGVyKTsKICAgICAgICAvKiBTYXZlIHRoZSBhZGxlcjMyIG9mIHRoZSBwcmVzZXQgZGljdGlvbmFyeTogKi8KCiAgICAgICAgaWYgKHMuc3Ry
c3RhcnQgIT09IDApIHsKICAgICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTsKICAgICAgICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgJiAweGZmZmYpOwogICAgICAgIH0KCiAgICAgICAgc3RybS5hZGxlciA9IDE7IC8vIGFkbGVyMzIoMEwsIFpfTlVMTCwgMCk7CiAgICAgIH0KICB9IC8vI2lmZGVmIEdaSVAKCgogIGlmIChzLnN0YXR1cyA9PT0gRVhUUkFfU1RBVEUpIHsKICAgIGlmIChzLmd6aGVhZC5leHRyYQogICAgLyogIT0gWl9OVUxMKi8KICAgICkgewogICAgICAgIGJlZyA9IHMucGVu
ZGluZzsKICAgICAgICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovCgogICAgICAgIHdoaWxlIChzLmd6aW5kZXggPCAocy5nemhlYWQuZXh0cmEubGVuZ3RoICYgMHhmZmZmKSkgewogICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7CiAgICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykgewogICAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7CiAg
ICAgICAgICAgIH0KCiAgICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7CiAgICAgICAgICAgIGJlZyA9IHMucGVuZGluZzsKCiAgICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQuZXh0cmFbcy5nemluZGV4XSAmIDB4ZmYpOwogICAgICAgICAgcy5nemluZGV4Kys7CiAgICAgICAgfQoKICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBl
bmRpbmcgPiBiZWcpIHsKICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7CiAgICAgICAgfQoKICAgICAgICBpZiAocy5nemluZGV4ID09PSBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHsKICAgICAgICAgIHMuZ3ppbmRleCA9IDA7CiAgICAgICAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7CiAgICB9CiAgfQoKICBpZiAocy5zdGF0dXMgPT09IE5B
TUVfU1RBVEUpIHsKICAgIGlmIChzLmd6aGVhZC5uYW1lCiAgICAvKiAhPSBaX05VTEwqLwogICAgKSB7CiAgICAgICAgYmVnID0gcy5wZW5kaW5nOwogICAgICAgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi8KICAgICAgICAvL2ludCB2YWw7CgogICAgICAgIGRvIHsKICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkgewogICAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHsKICAgICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3Ry
bS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pOwogICAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7CgogICAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHsKICAgICAgICAgICAgICB2YWwgPSAxOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9IC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0
byBlbmQgb2Ygc3RyaW5nCgoKICAgICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5uYW1lLmxlbmd0aCkgewogICAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5uYW1lLmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhbCA9IDA7CiAgICAgICAgICB9CgogICAgICAgICAgcHV0X2J5dGUocywgdmFsKTsKICAgICAgICB9IHdoaWxlICh2YWwgIT09IDApOwoKICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHsKICAgICAgICAg
IHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7CiAgICAgICAgfQoKICAgICAgICBpZiAodmFsID09PSAwKSB7CiAgICAgICAgICBzLmd6aW5kZXggPSAwOwogICAgICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFOwogICAgfQogIH0KCiAgaWYgKHMuc3RhdHVzID09PSBDT01NRU5UX1NUQVRFKSB7CiAgICBpZiAocy5nemhlYWQuY29tbWVudAogICAg
LyogIT0gWl9OVUxMKi8KICAgICkgewogICAgICAgIGJlZyA9IHMucGVuZGluZzsKICAgICAgICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovCiAgICAgICAgLy9pbnQgdmFsOwoKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHsKICAgICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7CiAgICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJl
ZywgYmVnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTsKICAgICAgICAgICAgYmVnID0gcy5wZW5kaW5nOwoKICAgICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7CiAgICAgICAgICAgICAgdmFsID0gMTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfSAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZwoKCiAgICAgICAgICBpZiAocy5nemlu
ZGV4IDwgcy5nemhlYWQuY29tbWVudC5sZW5ndGgpIHsKICAgICAgICAgICAgdmFsID0gcy5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YWwgPSAwOwogICAgICAgICAgfQoKICAgICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7CiAgICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTsKCiAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7CiAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwg
cy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHZhbCA9PT0gMCkgewogICAgICAgICAgcy5zdGF0dXMgPSBIQ1JDX1NUQVRFOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgcy5zdGF0dXMgPSBIQ1JDX1NUQVRFOwogICAgfQogIH0KCiAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7CiAgICBpZiAocy5nemhlYWQuaGNyYykgewogICAgICBpZiAocy5wZW5kaW5nICsgMiA+IHMucGVuZGluZ19idWZfc2l6ZSkgewogICAgICAgIGZsdXNoX3BlbmRpbmco
c3RybSk7CiAgICAgIH0KCiAgICAgIGlmIChzLnBlbmRpbmcgKyAyIDw9IHMucGVuZGluZ19idWZfc2l6ZSkgewogICAgICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTsKICAgICAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyID4+IDggJiAweGZmKTsKICAgICAgICBzdHJtLmFkbGVyID0gMDsgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTsKCiAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7CiAgICB9CiAgfSAvLyNlbmRpZgoK
ICAvKiBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlICovCgoKICBpZiAocy5wZW5kaW5nICE9PSAwKSB7CiAgICBmbHVzaF9wZW5kaW5nKHN0cm0pOwoKICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkgewogICAgICAvKiBTaW5jZSBhdmFpbF9vdXQgaXMgMCwgZGVmbGF0ZSB3aWxsIGJlIGNhbGxlZCBhZ2FpbiB3aXRoCiAgICAgICAqIG1vcmUgb3V0cHV0IHNwYWNlLCBidXQgcG9zc2libHkgd2l0aCBib3RoIHBlbmRpbmcgYW5kCiAgICAgICAqIGF2YWlsX2luIGVxdWFsIHRvIHplcm8uIFRoZXJl
IHdvbid0IGJlIGFueXRoaW5nIHRvIGRvLAogICAgICAgKiBidXQgdGhpcyBpcyBub3QgYW4gZXJyb3Igc2l0dWF0aW9uIHNvIG1ha2Ugc3VyZSB3ZQogICAgICAgKiByZXR1cm4gT0sgaW5zdGVhZCBvZiBCVUZfRVJST1IgYXQgbmV4dCBjYWxsIG9mIGRlZmxhdGU6CiAgICAgICAqLwogICAgICBzLmxhc3RfZmx1c2ggPSAtMTsKICAgICAgcmV0dXJuIFpfT0s7CiAgICB9CiAgICAvKiBNYWtlIHN1cmUgdGhlcmUgaXMgc29tZXRoaW5nIHRvIGRvIGFuZCBhdm9pZCBkdXBsaWNhdGUgY29uc2VjdXRpdmUKICAgICAqIGZsdXNoZXMu
IEZvciByZXBlYXRlZCBhbmQgdXNlbGVzcyBjYWxscyB3aXRoIFpfRklOSVNILCB3ZSBrZWVwCiAgICAgKiByZXR1cm5pbmcgWl9TVFJFQU1fRU5EIGluc3RlYWQgb2YgWl9CVUZfRVJST1IuCiAgICAgKi8KCiAgfSBlbHNlIGlmIChzdHJtLmF2YWlsX2luID09PSAwICYmIHJhbmsoZmx1c2gpIDw9IHJhbmsob2xkX2ZsdXNoKSAmJiBmbHVzaCAhPT0gWl9GSU5JU0gpIHsKICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IpOwogIH0KICAvKiBVc2VyIG11c3Qgbm90IHByb3ZpZGUgbW9yZSBpbnB1dCBhZnRlciB0aGUgZmly
c3QgRklOSVNIOiAqLwoKCiAgaWYgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkgewogICAgcmV0dXJuIGVycihzdHJtLCBaX0JVRl9FUlJPUik7CiAgfQogIC8qIFN0YXJ0IGEgbmV3IGJsb2NrIG9yIGNvbnRpbnVlIHRoZSBjdXJyZW50IG9uZS4KICAgKi8KCgogIGlmIChzdHJtLmF2YWlsX2luICE9PSAwIHx8IHMubG9va2FoZWFkICE9PSAwIHx8IGZsdXNoICE9PSBaX05PX0ZMVVNIICYmIHMuc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUpIHsKICAgIHZhciBic3RhdGUgPSBzLnN0cmF0
ZWd5ID09PSBaX0hVRkZNQU5fT05MWSA/IGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgOiBzLnN0cmF0ZWd5ID09PSBaX1JMRSA/IGRlZmxhdGVfcmxlKHMsIGZsdXNoKSA6IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZnVuYyhzLCBmbHVzaCk7CgogICAgaWYgKGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfRE9ORSkgewogICAgICBzLnN0YXR1cyA9IEZJTklTSF9TVEFURTsKICAgIH0KCiAgICBpZiAoYnN0YXRlID09PSBCU19ORUVEX01PUkUgfHwgYnN0YXRlID09PSBCU19G
SU5JU0hfU1RBUlRFRCkgewogICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHsKICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTsKICAgICAgICAvKiBhdm9pZCBCVUZfRVJST1IgbmV4dCBjYWxsLCBzZWUgYWJvdmUgKi8KICAgICAgfQoKICAgICAgcmV0dXJuIFpfT0s7CiAgICAgIC8qIElmIGZsdXNoICE9IFpfTk9fRkxVU0ggJiYgYXZhaWxfb3V0ID09IDAsIHRoZSBuZXh0IGNhbGwKICAgICAgICogb2YgZGVmbGF0ZSBzaG91bGQgdXNlIHRoZSBzYW1lIGZsdXNoIHBhcmFtZXRlciB0byBtYWtlIHN1cmUKICAgICAgICog
dGhhdCB0aGUgZmx1c2ggaXMgY29tcGxldGUuIFNvIHdlIGRvbid0IGhhdmUgdG8gb3V0cHV0IGFuCiAgICAgICAqIGVtcHR5IGJsb2NrIGhlcmUsIHRoaXMgd2lsbCBiZSBkb25lIGF0IG5leHQgY2FsbC4gVGhpcyBhbHNvCiAgICAgICAqIGVuc3VyZXMgdGhhdCBmb3IgYSB2ZXJ5IHNtYWxsIG91dHB1dCBidWZmZXIsIHdlIGVtaXQgYXQgbW9zdAogICAgICAgKiBvbmUgZW1wdHkgYmxvY2suCiAgICAgICAqLwogICAgfQoKICAgIGlmIChic3RhdGUgPT09IEJTX0JMT0NLX0RPTkUpIHsKICAgICAgaWYgKGZsdXNoID09PSBaX1BB
UlRJQUxfRkxVU0gpIHsKICAgICAgICB0cmVlcy5fdHJfYWxpZ24ocyk7CiAgICAgIH0gZWxzZSBpZiAoZmx1c2ggIT09IFpfQkxPQ0spIHsKICAgICAgICAvKiBGVUxMX0ZMVVNIIG9yIFNZTkNfRkxVU0ggKi8KICAgICAgICB0cmVlcy5fdHJfc3RvcmVkX2Jsb2NrKHMsIDAsIDAsIGZhbHNlKTsKICAgICAgICAvKiBGb3IgYSBmdWxsIGZsdXNoLCB0aGlzIGVtcHR5IGJsb2NrIHdpbGwgYmUgcmVjb2duaXplZAogICAgICAgICAqIGFzIGEgc3BlY2lhbCBtYXJrZXIgYnkgaW5mbGF0ZV9zeW5jKCkuCiAgICAgICAgICovCgoKICAg
ICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCkgewogICAgICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovCgogICAgICAgICAgLyogZm9yZ2V0IGhpc3RvcnkgKi8KICAgICAgICAgIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTsKCiAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsKICAgICAgICAgICAgcy5zdHJzdGFydCA9IDA7CiAgICAgICAgICAgIHMuYmxvY2tfc3RhcnQgPSAwOwogICAgICAgICAgICBzLmluc2VydCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9
CgogICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pOwoKICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7CiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7CiAgICAgICAgLyogYXZvaWQgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCwgc2VlIGFib3ZlICovCgogICAgICAgIHJldHVybiBaX09LOwogICAgICB9CiAgICB9CiAgfSAvL0Fzc2VydChzdHJtLT5hdmFpbF9vdXQgPiAwLCAiYnVnMiIpOwogIC8vaWYgKHN0cm0uYXZhaWxfb3V0IDw9IDApIHsgdGhyb3cgbmV3IEVycm9yKCJidWcyIik7fQoKCiAgaWYgKGZsdXNoICE9PSBa
X0ZJTklTSCkgewogICAgcmV0dXJuIFpfT0s7CiAgfQoKICBpZiAocy53cmFwIDw9IDApIHsKICAgIHJldHVybiBaX1NUUkVBTV9FTkQ7CiAgfQogIC8qIFdyaXRlIHRoZSB0cmFpbGVyICovCgoKICBpZiAocy53cmFwID09PSAyKSB7CiAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyICYgMHhmZik7CiAgICBwdXRfYnl0ZShzLCBzdHJtLmFkbGVyID4+IDggJiAweGZmKTsKICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgPj4gMTYgJiAweGZmKTsKICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgPj4gMjQgJiAweGZmKTsKICAgIHB1
dF9ieXRlKHMsIHN0cm0udG90YWxfaW4gJiAweGZmKTsKICAgIHB1dF9ieXRlKHMsIHN0cm0udG90YWxfaW4gPj4gOCAmIDB4ZmYpOwogICAgcHV0X2J5dGUocywgc3RybS50b3RhbF9pbiA+PiAxNiAmIDB4ZmYpOwogICAgcHV0X2J5dGUocywgc3RybS50b3RhbF9pbiA+PiAyNCAmIDB4ZmYpOwogIH0gZWxzZSB7CiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7CiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTsKICB9CgogIGZsdXNoX3BlbmRpbmcoc3RybSk7CiAgLyogSWYgYXZhaWxf
b3V0IGlzIHplcm8sIHRoZSBhcHBsaWNhdGlvbiB3aWxsIGNhbGwgZGVmbGF0ZSBhZ2FpbgogICAqIHRvIGZsdXNoIHRoZSByZXN0LgogICAqLwoKICBpZiAocy53cmFwID4gMCkgewogICAgcy53cmFwID0gLXMud3JhcDsKICB9CiAgLyogd3JpdGUgdGhlIHRyYWlsZXIgb25seSBvbmNlISAqLwoKCiAgcmV0dXJuIHMucGVuZGluZyAhPT0gMCA/IFpfT0sgOiBaX1NUUkVBTV9FTkQ7Cn0KCmZ1bmN0aW9uIGRlZmxhdGVFbmQoc3RybSkgewogIHZhciBzdGF0dXM7CgogIGlmICghc3RybQogIC8qPT0gWl9OVUxMKi8KICB8fCAhc3Ry
bS5zdGF0ZQogIC8qPT0gWl9OVUxMKi8KICApIHsKICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgfQoKICBzdGF0dXMgPSBzdHJtLnN0YXRlLnN0YXR1czsKCiAgaWYgKHN0YXR1cyAhPT0gSU5JVF9TVEFURSAmJiBzdGF0dXMgIT09IEVYVFJBX1NUQVRFICYmIHN0YXR1cyAhPT0gTkFNRV9TVEFURSAmJiBzdGF0dXMgIT09IENPTU1FTlRfU1RBVEUgJiYgc3RhdHVzICE9PSBIQ1JDX1NUQVRFICYmIHN0YXR1cyAhPT0gQlVTWV9TVEFURSAmJiBzdGF0dXMgIT09IEZJTklTSF9TVEFURSkgewogICAgcmV0dXJuIGVycihz
dHJtLCBaX1NUUkVBTV9FUlJPUik7CiAgfQoKICBzdHJtLnN0YXRlID0gbnVsbDsKICByZXR1cm4gc3RhdHVzID09PSBCVVNZX1NUQVRFID8gZXJyKHN0cm0sIFpfREFUQV9FUlJPUikgOiBaX09LOwp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogSW5pdGlhbGl6ZXMgdGhlIGNvbXByZXNzaW9uIGRpY3Rpb25hcnkgZnJvbSB0aGUgZ2l2ZW4gYnl0ZQogKiBzZXF1ZW5jZSB3aXRob3V0IHByb2R1Y2luZyBhbnkgY29tcHJlc3NlZCBv
dXRwdXQuCiAqLwoKCmZ1bmN0aW9uIGRlZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpIHsKICB2YXIgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoOwogIHZhciBzOwogIHZhciBzdHIsIG47CiAgdmFyIHdyYXA7CiAgdmFyIGF2YWlsOwogIHZhciBuZXh0OwogIHZhciBpbnB1dDsKICB2YXIgdG1wRGljdDsKCiAgaWYgKCFzdHJtCiAgLyo9PSBaX05VTEwqLwogIHx8ICFzdHJtLnN0YXRlCiAgLyo9PSBaX05VTEwqLwogICkgewogICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICB9CgogIHMgPSBz
dHJtLnN0YXRlOwogIHdyYXAgPSBzLndyYXA7CgogIGlmICh3cmFwID09PSAyIHx8IHdyYXAgPT09IDEgJiYgcy5zdGF0dXMgIT09IElOSVRfU1RBVEUgfHwgcy5sb29rYWhlYWQpIHsKICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICB9CiAgLyogd2hlbiB1c2luZyB6bGliIHdyYXBwZXJzLCBjb21wdXRlIEFkbGVyLTMyIGZvciBwcm92aWRlZCBkaWN0aW9uYXJ5ICovCgoKICBpZiAod3JhcCA9PT0gMSkgewogICAgLyogYWRsZXIzMihzdHJtLT5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovCiAgICBzdHJtLmFk
bGVyID0gYWRsZXIzMihzdHJtLmFkbGVyLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTsKICB9CgogIHMud3JhcCA9IDA7CiAgLyogYXZvaWQgY29tcHV0aW5nIEFkbGVyLTMyIGluIHJlYWRfYnVmICovCgogIC8qIGlmIGRpY3Rpb25hcnkgd291bGQgZmlsbCB3aW5kb3csIGp1c3QgcmVwbGFjZSB0aGUgaGlzdG9yeSAqLwoKICBpZiAoZGljdExlbmd0aCA+PSBzLndfc2l6ZSkgewogICAgaWYgKHdyYXAgPT09IDApIHsKICAgICAgLyogYWxyZWFkeSBlbXB0eSBvdGhlcndpc2UgKi8KCiAgICAgIC8qKiogQ0xFQVJfSEFTSChz
KTsgKioqLwogICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7CgogICAgICBzLnN0cnN0YXJ0ID0gMDsKICAgICAgcy5ibG9ja19zdGFydCA9IDA7CiAgICAgIHMuaW5zZXJ0ID0gMDsKICAgIH0KICAgIC8qIHVzZSB0aGUgdGFpbCAqLwogICAgLy8gZGljdGlvbmFyeSA9IGRpY3Rpb25hcnkuc2xpY2UoZGljdExlbmd0aCAtIHMud19zaXplKTsKCgogICAgdG1wRGljdCA9IG5ldyB1dGlscy5CdWY4KHMud19zaXplKTsKICAgIHV0aWxzLmFycmF5U2V0KHRtcERpY3QsIGRpY3Rpb25hcnksIGRpY3RMZW5n
dGggLSBzLndfc2l6ZSwgcy53X3NpemUsIDApOwogICAgZGljdGlvbmFyeSA9IHRtcERpY3Q7CiAgICBkaWN0TGVuZ3RoID0gcy53X3NpemU7CiAgfQogIC8qIGluc2VydCBkaWN0aW9uYXJ5IGludG8gd2luZG93IGFuZCBoYXNoICovCgoKICBhdmFpbCA9IHN0cm0uYXZhaWxfaW47CiAgbmV4dCA9IHN0cm0ubmV4dF9pbjsKICBpbnB1dCA9IHN0cm0uaW5wdXQ7CiAgc3RybS5hdmFpbF9pbiA9IGRpY3RMZW5ndGg7CiAgc3RybS5uZXh0X2luID0gMDsKICBzdHJtLmlucHV0ID0gZGljdGlvbmFyeTsKICBmaWxsX3dpbmRvdyhzKTsK
CiAgd2hpbGUgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkgewogICAgc3RyID0gcy5zdHJzdGFydDsKICAgIG4gPSBzLmxvb2thaGVhZCAtIChNSU5fTUFUQ0ggLSAxKTsKCiAgICBkbyB7CiAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi8KICAgICAgcy5pbnNfaCA9IChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrOwogICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5o
ZWFkW3MuaW5zX2hdOwogICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7CiAgICAgIHN0cisrOwogICAgfSB3aGlsZSAoLS1uKTsKCiAgICBzLnN0cnN0YXJ0ID0gc3RyOwogICAgcy5sb29rYWhlYWQgPSBNSU5fTUFUQ0ggLSAxOwogICAgZmlsbF93aW5kb3cocyk7CiAgfQoKICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkOwogIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0OwogIHMuaW5zZXJ0ID0gcy5sb29rYWhlYWQ7CiAgcy5sb29rYWhlYWQgPSAwOwogIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9N
QVRDSCAtIDE7CiAgcy5tYXRjaF9hdmFpbGFibGUgPSAwOwogIHN0cm0ubmV4dF9pbiA9IG5leHQ7CiAgc3RybS5pbnB1dCA9IGlucHV0OwogIHN0cm0uYXZhaWxfaW4gPSBhdmFpbDsKICBzLndyYXAgPSB3cmFwOwogIHJldHVybiBaX09LOwp9CgpleHBvcnRzLmRlZmxhdGVJbml0ID0gZGVmbGF0ZUluaXQ7CmV4cG9ydHMuZGVmbGF0ZUluaXQyID0gZGVmbGF0ZUluaXQyOwpleHBvcnRzLmRlZmxhdGVSZXNldCA9IGRlZmxhdGVSZXNldDsKZXhwb3J0cy5kZWZsYXRlUmVzZXRLZWVwID0gZGVmbGF0ZVJlc2V0S2VlcDsKZXhwb3J0
cy5kZWZsYXRlU2V0SGVhZGVyID0gZGVmbGF0ZVNldEhlYWRlcjsKZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTsKZXhwb3J0cy5kZWZsYXRlRW5kID0gZGVmbGF0ZUVuZDsKZXhwb3J0cy5kZWZsYXRlU2V0RGljdGlvbmFyeSA9IGRlZmxhdGVTZXREaWN0aW9uYXJ5OwpleHBvcnRzLmRlZmxhdGVJbmZvID0gJ3Bha28gZGVmbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCknOwovKiBOb3QgaW1wbGVtZW50ZWQKZXhwb3J0cy5kZWZsYXRlQm91bmQgPSBkZWZsYXRlQm91bmQ7CmV4cG9ydHMuZGVmbGF0ZUNvcHkgPSBkZWZsYXRlQ29w
eTsKZXhwb3J0cy5kZWZsYXRlUGFyYW1zID0gZGVmbGF0ZVBhcmFtczsKZXhwb3J0cy5kZWZsYXRlUGVuZGluZyA9IGRlZmxhdGVQZW5kaW5nOwpleHBvcnRzLmRlZmxhdGVQcmltZSA9IGRlZmxhdGVQcmltZTsKZXhwb3J0cy5kZWZsYXRlVHVuZSA9IGRlZmxhdGVUdW5lOwoqLwoKfSx7Ii4uL3V0aWxzL2NvbW1vbiI6MzMzLCIuL2FkbGVyMzIiOjMzNSwiLi9jcmMzMiI6MzM3LCIuL21lc3NhZ2VzIjozNDMsIi4vdHJlZXMiOjM0NH1dLDMzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0Jzsg
Ly8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyCi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luCi8vCi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkCi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlcwovLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLgovLwovLyBQZXJtaXNz
aW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSwKLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdAovLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6Ci8vCi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90Ci8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdp
bmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmUKLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmUKLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLgovLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZQovLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4KLy8gMy4gVGhpcyBub3RpY2Ug
bWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi4KCmZ1bmN0aW9uIEdaaGVhZGVyKCkgewogIC8qIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHQgKi8KICB0aGlzLnRleHQgPSAwOwogIC8qIG1vZGlmaWNhdGlvbiB0aW1lICovCgogIHRoaXMudGltZSA9IDA7CiAgLyogZXh0cmEgZmxhZ3MgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi8KCiAgdGhpcy54ZmxhZ3MgPSAwOwogIC8qIG9wZXJhdGluZyBzeXN0ZW0gKi8KCiAg
dGhpcy5vcyA9IDA7CiAgLyogcG9pbnRlciB0byBleHRyYSBmaWVsZCBvciBaX05VTEwgaWYgbm9uZSAqLwoKICB0aGlzLmV4dHJhID0gbnVsbDsKICAvKiBleHRyYSBmaWVsZCBsZW5ndGggKHZhbGlkIGlmIGV4dHJhICE9IFpfTlVMTCkgKi8KCiAgdGhpcy5leHRyYV9sZW4gPSAwOyAvLyBBY3R1YWxseSwgd2UgZG9uJ3QgbmVlZCBpdCBpbiBKUywKICAvLyBidXQgbGVhdmUgZm9yIGZldyBjb2RlIG1vZGlmaWNhdGlvbnMKICAvLwogIC8vIFNldHVwIGxpbWl0cyBpcyBub3QgbmVjZXNzYXJ5IGJlY2F1c2UgaW4ganMgd2Ugc2hv
dWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkKICAvLyBmb3IgaW5mbGF0ZSB1c2UgY29uc3RhbnQgbGltaXQgaW4gNjU1MzYgYnl0ZXMKICAvLwoKICAvKiBzcGFjZSBhdCBleHRyYSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqLwogIC8vIHRoaXMuZXh0cmFfbWF4ICA9IDA7CgogIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGZpbGUgbmFtZSBvciBaX05VTEwgKi8KCiAgdGhpcy5uYW1lID0gJyc7CiAgLyogc3BhY2UgYXQgbmFtZSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqLwogIC8vIHRoaXMubmFtZV9t
YXggICA9IDA7CgogIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGNvbW1lbnQgb3IgWl9OVUxMICovCgogIHRoaXMuY29tbWVudCA9ICcnOwogIC8qIHNwYWNlIGF0IGNvbW1lbnQgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi8KICAvLyB0aGlzLmNvbW1fbWF4ICAgPSAwOwoKICAvKiB0cnVlIGlmIHRoZXJlIHdhcyBvciB3aWxsIGJlIGEgaGVhZGVyIGNyYyAqLwoKICB0aGlzLmhjcmMgPSAwOwogIC8qIHRydWUgd2hlbiBkb25lIHJlYWRpbmcgZ3ppcCBoZWFkZXIgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6
aXAgZmlsZSkgKi8KCiAgdGhpcy5kb25lID0gZmFsc2U7Cn0KCm1vZHVsZS5leHBvcnRzID0gR1poZWFkZXI7Cgp9LHt9XSwzNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7IC8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlcgovLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpbgovLwovLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZAovLyB3
YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXMKLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS4KLy8KLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsCi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXQKLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVz
dHJpY3Rpb25zOgovLwovLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdAovLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlCi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlCi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC4KLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVy
c2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmUKLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuCi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uCi8vIFNlZSBzdGF0ZSBkZWZzIGZyb20gaW5mbGF0ZS5qcwoKdmFyIEJBRCA9IDMwOwovKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovCgp2YXIgVFlQRSA9IDEyOwov
KiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovCgovKgogICBEZWNvZGUgbGl0ZXJhbCwgbGVuZ3RoLCBhbmQgZGlzdGFuY2UgY29kZXMgYW5kIHdyaXRlIG91dCB0aGUgcmVzdWx0aW5nCiAgIGxpdGVyYWwgYW5kIG1hdGNoIGJ5dGVzIHVudGlsIGVpdGhlciBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dCBpcwogICBhdmFpbGFibGUsIGFuIGVuZC1vZi1ibG9jayBpcyBlbmNvdW50ZXJlZCwgb3IgYSBkYXRhIGVycm9yIGlzIGVuY291bnRlcmVkLgogICBXaGVuIGxhcmdlIGVub3Vn
aCBpbnB1dCBhbmQgb3V0cHV0IGJ1ZmZlcnMgYXJlIHN1cHBsaWVkIHRvIGluZmxhdGUoKSwgZm9yCiAgIGV4YW1wbGUsIGEgMTZLIGlucHV0IGJ1ZmZlciBhbmQgYSA2NEsgb3V0cHV0IGJ1ZmZlciwgbW9yZSB0aGFuIDk1JSBvZiB0aGUKICAgaW5mbGF0ZSBleGVjdXRpb24gdGltZSBpcyBzcGVudCBpbiB0aGlzIHJvdXRpbmUuCgogICBFbnRyeSBhc3N1bXB0aW9uczoKCiAgICAgICAgc3RhdGUubW9kZSA9PT0gTEVOCiAgICAgICAgc3RybS5hdmFpbF9pbiA+PSA2CiAgICAgICAgc3RybS5hdmFpbF9vdXQgPj0gMjU4CiAgICAg
ICAgc3RhcnQgPj0gc3RybS5hdmFpbF9vdXQKICAgICAgICBzdGF0ZS5iaXRzIDwgOAoKICAgT24gcmV0dXJuLCBzdGF0ZS5tb2RlIGlzIG9uZSBvZjoKCiAgICAgICAgTEVOIC0tIHJhbiBvdXQgb2YgZW5vdWdoIG91dHB1dCBzcGFjZSBvciBlbm91Z2ggYXZhaWxhYmxlIGlucHV0CiAgICAgICAgVFlQRSAtLSByZWFjaGVkIGVuZCBvZiBibG9jayBjb2RlLCBpbmZsYXRlKCkgdG8gaW50ZXJwcmV0IG5leHQgYmxvY2sKICAgICAgICBCQUQgLS0gZXJyb3IgaW4gYmxvY2sgZGF0YQoKICAgTm90ZXM6CgogICAgLSBUaGUgbWF4aW11
bSBpbnB1dCBiaXRzIHVzZWQgYnkgYSBsZW5ndGgvZGlzdGFuY2UgcGFpciBpcyAxNSBiaXRzIGZvciB0aGUKICAgICAgbGVuZ3RoIGNvZGUsIDUgYml0cyBmb3IgdGhlIGxlbmd0aCBleHRyYSwgMTUgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGNvZGUsCiAgICAgIGFuZCAxMyBiaXRzIGZvciB0aGUgZGlzdGFuY2UgZXh0cmEuICBUaGlzIHRvdGFscyA0OCBiaXRzLCBvciBzaXggYnl0ZXMuCiAgICAgIFRoZXJlZm9yZSBpZiBzdHJtLmF2YWlsX2luID49IDYsIHRoZW4gdGhlcmUgaXMgZW5vdWdoIGlucHV0IHRvIGF2b2lkCiAgICAg
IGNoZWNraW5nIGZvciBhdmFpbGFibGUgaW5wdXQgd2hpbGUgZGVjb2RpbmcuCgogICAgLSBUaGUgbWF4aW11bSBieXRlcyB0aGF0IGEgc2luZ2xlIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGNhbiBvdXRwdXQgaXMgMjU4CiAgICAgIGJ5dGVzLCB3aGljaCBpcyB0aGUgbWF4aW11bSBsZW5ndGggdGhhdCBjYW4gYmUgY29kZWQuICBpbmZsYXRlX2Zhc3QoKQogICAgICByZXF1aXJlcyBzdHJtLmF2YWlsX291dCA+PSAyNTggZm9yIGVhY2ggbG9vcCB0byBhdm9pZCBjaGVja2luZyBmb3IKICAgICAgb3V0cHV0IHNwYWNlLgogKi8KCm1v
ZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7CiAgdmFyIHN0YXRlOwoKICB2YXIgX2luOwogIC8qIGxvY2FsIHN0cm0uaW5wdXQgKi8KCgogIHZhciBsYXN0OwogIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqLwoKICB2YXIgX291dDsKICAvKiBsb2NhbCBzdHJtLm91dHB1dCAqLwoKCiAgdmFyIGJlZzsKICAvKiBpbmZsYXRlKCkncyBpbml0aWFsIHN0cm0ub3V0cHV0ICovCgogIHZhciBlbmQ7CiAgLyogd2hpbGUgb3V0IDwgZW5kLCBlbm91Z2ggc3BhY2UgYXZh
aWxhYmxlICovCiAgLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1QKCiAgdmFyIGRtYXg7CiAgLyogbWF4aW11bSBkaXN0YW5jZSBmcm9tIHpsaWIgaGVhZGVyICovCiAgLy8jZW5kaWYKCiAgdmFyIHdzaXplOwogIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqLwoKICB2YXIgd2hhdmU7CiAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqLwoKICB2YXIgd25leHQ7CiAgLyogd2luZG93IHdyaXRlIGluZGV4ICovCiAgLy8gVXNlIGBzX3dpbmRvd2AgaW5zdGVhZCBgd2luZG93YCwgYXZvaWQgY29u
ZmxpY3Qgd2l0aCBpbnN0cnVtZW50YXRpb24gdG9vbHMKCiAgdmFyIHNfd2luZG93OwogIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgd3NpemUgIT0gMCAqLwoKICB2YXIgaG9sZDsKICAvKiBsb2NhbCBzdHJtLmhvbGQgKi8KCiAgdmFyIGJpdHM7CiAgLyogbG9jYWwgc3RybS5iaXRzICovCgogIHZhciBsY29kZTsKICAvKiBsb2NhbCBzdHJtLmxlbmNvZGUgKi8KCiAgdmFyIGRjb2RlOwogIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi8KCiAgdmFyIGxtYXNrOwogIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGxl
bmd0aCBjb2RlcyAqLwoKICB2YXIgZG1hc2s7CiAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi8KCiAgdmFyIGhlcmU7CiAgLyogcmV0cmlldmVkIHRhYmxlIGVudHJ5ICovCgogIHZhciBvcDsKICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi8KCiAgLyogIHdpbmRvdyBwb3NpdGlvbiwgd2luZG93IGJ5dGVzIHRvIGNvcHkgKi8KCiAgdmFyIGxlbjsKICAvKiBtYXRjaCBsZW5ndGgsIHVudXNlZCBieXRlcyAqLwoKICB2YXIgZGlzdDsKICAvKiBtYXRjaCBkaXN0YW5j
ZSAqLwoKICB2YXIgZnJvbTsKICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGZyb20gKi8KCiAgdmFyIGZyb21fc291cmNlOwogIHZhciBpbnB1dCwgb3V0cHV0OyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzCgogIC8qIGNvcHkgc3RhdGUgdG8gbG9jYWwgdmFyaWFibGVzICovCgogIHN0YXRlID0gc3RybS5zdGF0ZTsgLy9oZXJlID0gc3RhdGUuaGVyZTsKCiAgX2luID0gc3RybS5uZXh0X2luOwogIGlucHV0ID0gc3RybS5pbnB1dDsKICBsYXN0ID0gX2luICsgKHN0cm0uYXZhaWxfaW4gLSA1KTsK
ICBfb3V0ID0gc3RybS5uZXh0X291dDsKICBvdXRwdXQgPSBzdHJtLm91dHB1dDsKICBiZWcgPSBfb3V0IC0gKHN0YXJ0IC0gc3RybS5hdmFpbF9vdXQpOwogIGVuZCA9IF9vdXQgKyAoc3RybS5hdmFpbF9vdXQgLSAyNTcpOyAvLyNpZmRlZiBJTkZMQVRFX1NUUklDVAoKICBkbWF4ID0gc3RhdGUuZG1heDsgLy8jZW5kaWYKCiAgd3NpemUgPSBzdGF0ZS53c2l6ZTsKICB3aGF2ZSA9IHN0YXRlLndoYXZlOwogIHduZXh0ID0gc3RhdGUud25leHQ7CiAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7CiAgaG9sZCA9IHN0YXRlLmhvbGQ7
CiAgYml0cyA9IHN0YXRlLmJpdHM7CiAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlOwogIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7CiAgbG1hc2sgPSAoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDE7CiAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxOwogIC8qIGRlY29kZSBsaXRlcmFscyBhbmQgbGVuZ3RoL2Rpc3RhbmNlcyB1bnRpbCBlbmQtb2YtYmxvY2sgb3Igbm90IGVub3VnaAogICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovCgogIHRvcDogZG8gewogICAgaWYgKGJpdHMgPCAxNSkgewogICAgICBob2xk
ICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICBiaXRzICs9IDg7CiAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7CiAgICAgIGJpdHMgKz0gODsKICAgIH0KCiAgICBoZXJlID0gbGNvZGVbaG9sZCAmIGxtYXNrXTsKCiAgICBkb2xlbjogZm9yICg7OykgewogICAgICAvLyBHb3RvIGVtdWxhdGlvbgogICAgICBvcCA9IGhlcmUgPj4+IDI0CiAgICAgIC8qaGVyZS5iaXRzKi8KICAgICAgOwogICAgICBob2xkID4+Pj0gb3A7CiAgICAgIGJpdHMgLT0gb3A7CiAgICAgIG9wID0gaGVyZSA+Pj4gMTYgJiAweGZm
CiAgICAgIC8qaGVyZS5vcCovCiAgICAgIDsKCiAgICAgIGlmIChvcCA9PT0gMCkgewogICAgICAgIC8qIGxpdGVyYWwgKi8KICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgPwogICAgICAgIC8vICAgICAgICAiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcbiIgOgogICAgICAgIC8vICAgICAgICAiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxuIiwgaGVyZS52YWwpKTsKICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYKICAg
ICAgICAvKmhlcmUudmFsKi8KICAgICAgICA7CiAgICAgIH0gZWxzZSBpZiAob3AgJiAxNikgewogICAgICAgIC8qIGxlbmd0aCBiYXNlICovCiAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZgogICAgICAgIC8qaGVyZS52YWwqLwogICAgICAgIDsKICAgICAgICBvcCAmPSAxNTsKICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyAqLwoKICAgICAgICBpZiAob3ApIHsKICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHsKICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0czsKICAgICAgICAgICAgYml0cyAr
PSA4OwogICAgICAgICAgfQoKICAgICAgICAgIGxlbiArPSBob2xkICYgKDEgPDwgb3ApIC0gMTsKICAgICAgICAgIGhvbGQgPj4+PSBvcDsKICAgICAgICAgIGJpdHMgLT0gb3A7CiAgICAgICAgfSAvL1RyYWNldnYoKHN0ZGVyciwgImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XG4iLCBsZW4pKTsKCgogICAgICAgIGlmIChiaXRzIDwgMTUpIHsKICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7CiAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwog
ICAgICAgICAgYml0cyArPSA4OwogICAgICAgIH0KCiAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107CgogICAgICAgIGRvZGlzdDogZm9yICg7OykgewogICAgICAgICAgLy8gZ290byBlbXVsYXRpb24KICAgICAgICAgIG9wID0gaGVyZSA+Pj4gMjQKICAgICAgICAgIC8qaGVyZS5iaXRzKi8KICAgICAgICAgIDsKICAgICAgICAgIGhvbGQgPj4+PSBvcDsKICAgICAgICAgIGJpdHMgLT0gb3A7CiAgICAgICAgICBvcCA9IGhlcmUgPj4+IDE2ICYgMHhmZgogICAgICAgICAgLypoZXJlLm9wKi8KICAgICAgICAgIDsK
CiAgICAgICAgICBpZiAob3AgJiAxNikgewogICAgICAgICAgICAvKiBkaXN0YW5jZSBiYXNlICovCiAgICAgICAgICAgIGRpc3QgPSBoZXJlICYgMHhmZmZmCiAgICAgICAgICAgIC8qaGVyZS52YWwqLwogICAgICAgICAgICA7CiAgICAgICAgICAgIG9wICY9IDE1OwogICAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyAqLwoKICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkgewogICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgYml0cyArPSA4OwoKICAgICAgICAg
ICAgICBpZiAoYml0cyA8IG9wKSB7CiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZGlzdCArPSBob2xkICYgKDEgPDwgb3ApIC0gMTsgLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1QKCiAgICAgICAgICAgIGlmIChkaXN0ID4gZG1heCkgewogICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJzsKICAgICAgICAgICAgICBzdGF0
ZS5tb2RlID0gQkFEOwogICAgICAgICAgICAgIGJyZWFrIHRvcDsKICAgICAgICAgICAgfSAvLyNlbmRpZgoKCiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDsKICAgICAgICAgICAgYml0cyAtPSBvcDsgLy9UcmFjZXZ2KChzdGRlcnIsICJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XG4iLCBkaXN0KSk7CgogICAgICAgICAgICBvcCA9IF9vdXQgLSBiZWc7CiAgICAgICAgICAgIC8qIG1heCBkaXN0YW5jZSBpbiBvdXRwdXQgKi8KCiAgICAgICAgICAgIGlmIChkaXN0ID4gb3ApIHsKICAgICAgICAgICAgICAvKiBzZWUgaWYg
Y29weSBmcm9tIHdpbmRvdyAqLwogICAgICAgICAgICAgIG9wID0gZGlzdCAtIG9wOwogICAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgaW4gd2luZG93ICovCgogICAgICAgICAgICAgIGlmIChvcCA+IHdoYXZlKSB7CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkgewogICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7CiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrIHRvcDsKICAgICAgICAgICAg
ICAgIH0gLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cywKICAgICAgICAgICAgICAgIC8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHkKICAgICAgICAgICAgICAgIC8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUgogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIC8v
ICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wOwogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAg
ICAgICAgIG91dHB1dFtfb3V0KytdID0gMDsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OwogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsr
XTsKICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pOwogICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7CiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyNlbmRpZgoKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXgKCiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdzsKCiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7CiAg
ICAgICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovCiAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplIC0gb3A7CgogICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7CiAgICAgICAgICAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi8KICAgICAgICAgICAgICAgICAgbGVuIC09IG9wOwoKICAgICAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7CgogICAgICAgICAg
ICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7CiAgICAgICAgICAgICAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi8KCiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSBpZiAod25leHQgPCBvcCkgewogICAgICAgICAgICAgICAgLyogd3JhcCBhcm91bmQgd2luZG93ICovCiAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplICsgd25leHQgLSBvcDsKICAgICAgICAgICAgICAgIG9wIC09IHduZXh0OwoKICAgICAgICAgICAgICAgIGlm
IChvcCA8IGxlbikgewogICAgICAgICAgICAgICAgICAvKiBzb21lIGZyb20gZW5kIG9mIHdpbmRvdyAqLwogICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7CgogICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdOwogICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTsKCiAgICAgICAgICAgICAgICAgIGZyb20gPSAwOwoKICAgICAgICAgICAgICAgICAgaWYgKHduZXh0IDwgbGVuKSB7CiAgICAgICAgICAgICAgICAgICAgLyogc29tZSBm
cm9tIHN0YXJ0IG9mIHdpbmRvdyAqLwogICAgICAgICAgICAgICAgICAgIG9wID0gd25leHQ7CiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wOwoKICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107CiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7CgogICAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsKICAgICAgICAgICAgICAgICAgICAvKiByZXN0IGZyb20gb3V0cHV0ICovCgogICAgICAgICAg
ICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8qIGNvbnRpZ3VvdXMgaW4gd2luZG93ICovCiAgICAgICAgICAgICAgICBmcm9tICs9IHduZXh0IC0gb3A7CgogICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7CiAgICAgICAgICAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi8KICAgICAgICAgICAgICAgICAgbGVuIC09IG9wOwoKICAgICAgICAgICAgICAgICAgZG8gewog
ICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTsKICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7CgogICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7CiAgICAgICAgICAgICAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi8KCiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgd2hpbGUgKGxlbiA+IDIpIHsKICAgICAgICAgICAgICAgIG91dHB1dFtf
b3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgIGxlbiAtPSAzOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKGxlbikgewogICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwoKICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7CiAgICAgICAg
ICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OwogICAgICAgICAgICAgIC8qIGNvcHkgZGlyZWN0IGZyb20gb3V0cHV0ICovCgogICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovCiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdOwogICAg
ICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTsKICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107CiAgICAgICAgICAgICAgICBsZW4gLT0gMzsKICAgICAgICAgICAgICB9IHdoaWxlIChsZW4gPiAyKTsKCiAgICAgICAgICAgICAgaWYgKGxlbikgewogICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTsKCiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkgewogICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1
dFtmcm9tKytdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsKICAgICAgICAgICAgLyogMm5kIGxldmVsIGRpc3RhbmNlIGNvZGUgKi8KICAgICAgICAgICAgaGVyZSA9IGRjb2RlWyhoZXJlICYgMHhmZmZmKSArICgKICAgICAgICAgICAgLypoZXJlLnZhbCovCiAgICAgICAgICAgIGhvbGQgJiAoMSA8PCBvcCkgLSAxKV07CiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAg
ICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7CiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICAgIGJyZWFrIHRvcDsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhICJjb250aW51ZSIKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7CiAgICAgICAgLyogMm5kIGxldmVsIGxlbmd0aCBjb2RlICovCiAgICAgICAgaGVyZSA9IGxjb2RlWyhoZXJlICYgMHhmZmZmKSArICgKICAgICAgICAvKmhl
cmUudmFsKi8KICAgICAgICBob2xkICYgKDEgPDwgb3ApIC0gMSldOwogICAgICAgIGNvbnRpbnVlIGRvbGVuOwogICAgICB9IGVsc2UgaWYgKG9wICYgMzIpIHsKICAgICAgICAvKiBlbmQtb2YtYmxvY2sgKi8KICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXG4iKSk7CiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7CiAgICAgICAgYnJlYWsgdG9wOwogICAgICB9IGVsc2UgewogICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7CiAgICAg
ICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICBicmVhayB0b3A7CiAgICAgIH0KCiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgImNvbnRpbnVlIgogICAgfQogIH0gd2hpbGUgKF9pbiA8IGxhc3QgJiYgX291dCA8IGVuZCk7CiAgLyogcmV0dXJuIHVudXNlZCBieXRlcyAob24gZW50cnksIGJpdHMgPCA4LCBzbyBpbiB3b24ndCBnbyB0b28gZmFyIGJhY2spICovCgoKICBsZW4gPSBiaXRzID4+IDM7CiAgX2luIC09IGxlbjsKICBiaXRzIC09IGxlbiA8PCAzOwogIGhvbGQgJj0gKDEgPDwgYml0cykg
LSAxOwogIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovCgogIHN0cm0ubmV4dF9pbiA9IF9pbjsKICBzdHJtLm5leHRfb3V0ID0gX291dDsKICBzdHJtLmF2YWlsX2luID0gX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpOwogIHN0cm0uYXZhaWxfb3V0ID0gX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKTsKICBzdGF0ZS5ob2xkID0gaG9sZDsKICBzdGF0ZS5iaXRzID0gYml0czsKICByZXR1cm47Cn07Cgp9LHt9XSwzNDE6W2Z1bmN0aW9u
KHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7IC8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlcgovLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpbgovLwovLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZAovLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXMKLy8gYXJpc2luZyBmcm9t
IHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS4KLy8KLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsCi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXQKLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOgovLwovLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0
IG5vdAovLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlCi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlCi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC4KLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmUKLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0
aGUgb3JpZ2luYWwgc29mdHdhcmUuCi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uCgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTsKCnZhciBhZGxlcjMyID0gcmVxdWlyZSgnLi9hZGxlcjMyJyk7Cgp2YXIgY3JjMzIgPSByZXF1aXJlKCcuL2NyYzMyJyk7Cgp2YXIgaW5mbGF0ZV9mYXN0ID0gcmVxdWlyZSgnLi9pbmZmYXN0Jyk7Cgp2YXIgaW5mbGF0ZV90YWJsZSA9IHJlcXVpcmUoJy4vaW5mdHJlZXMnKTsKCnZh
ciBDT0RFUyA9IDA7CnZhciBMRU5TID0gMTsKdmFyIERJU1RTID0gMjsKLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KCi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCgovKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovCi8vdmFyIFpfTk9fRkxVU0ggICAg
ICA9IDA7Ci8vdmFyIFpfUEFSVElBTF9GTFVTSCA9IDE7Ci8vdmFyIFpfU1lOQ19GTFVTSCAgICA9IDI7Ci8vdmFyIFpfRlVMTF9GTFVTSCAgICA9IDM7Cgp2YXIgWl9GSU5JU0ggPSA0Owp2YXIgWl9CTE9DSyA9IDU7CnZhciBaX1RSRUVTID0gNjsKLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlcwogKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuCiAqLwoKdmFyIFpf
T0sgPSAwOwp2YXIgWl9TVFJFQU1fRU5EID0gMTsKdmFyIFpfTkVFRF9ESUNUID0gMjsgLy92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7Cgp2YXIgWl9TVFJFQU1fRVJST1IgPSAtMjsKdmFyIFpfREFUQV9FUlJPUiA9IC0zOwp2YXIgWl9NRU1fRVJST1IgPSAtNDsKdmFyIFpfQlVGX0VSUk9SID0gLTU7IC8vdmFyIFpfVkVSU0lPTl9FUlJPUiA9IC02OwoKLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovCgp2YXIgWl9ERUZMQVRFRCA9IDg7Ci8qIFNUQVRFUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCgovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwoKdmFyIEhFQUQgPSAxOwovKiBpOiB3YWl0aW5nIGZvciBtYWdpYyBoZWFkZXIgKi8KCnZhciBGTEFHUyA9IDI7Ci8qIGk6IHdhaXRpbmcgZm9yIG1ldGhvZCBhbmQgZmxhZ3MgKGd6aXApICovCgp2YXIgVElNRSA9IDM7Ci8qIGk6IHdhaXRpbmcgZm9yIG1vZGlmaWNhdGlvbiB0aW1lIChnemlwKSAqLwoKdmFyIE9T
ID0gNDsKLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovCgp2YXIgRVhMRU4gPSA1OwovKiBpOiB3YWl0aW5nIGZvciBleHRyYSBsZW5ndGggKGd6aXApICovCgp2YXIgRVhUUkEgPSA2OwovKiBpOiB3YWl0aW5nIGZvciBleHRyYSBieXRlcyAoZ3ppcCkgKi8KCnZhciBOQU1FID0gNzsKLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGZpbGUgbmFtZSAoZ3ppcCkgKi8KCnZhciBDT01NRU5UID0gODsKLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGNvbW1lbnQgKGd6aXApICov
Cgp2YXIgSENSQyA9IDk7Ci8qIGk6IHdhaXRpbmcgZm9yIGhlYWRlciBjcmMgKGd6aXApICovCgp2YXIgRElDVElEID0gMTA7Ci8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi8KCnZhciBESUNUID0gMTE7Ci8qIHdhaXRpbmcgZm9yIGluZmxhdGVTZXREaWN0aW9uYXJ5KCkgY2FsbCAqLwoKdmFyIFRZUEUgPSAxMjsKLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqLwoKdmFyIFRZUEVETyA9IDEzOwovKiBpOiBzYW1lLCBidXQgc2tpcCBjaGVjayB0byBl
eGl0IGluZmxhdGUgb24gbmV3IGJsb2NrICovCgp2YXIgU1RPUkVEID0gMTQ7Ci8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovCgp2YXIgQ09QWV8gPSAxNTsKLyogaS9vOiBzYW1lIGFzIENPUFkgYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi8KCnZhciBDT1BZID0gMTY7Ci8qIGkvbzogd2FpdGluZyBmb3IgaW5wdXQgb3Igb3V0cHV0IHRvIGNvcHkgc3RvcmVkIGJsb2NrICovCgp2YXIgVEFCTEUgPSAxNzsKLyogaTogd2FpdGluZyBmb3IgZHluYW1pYyBibG9jayB0
YWJsZSBsZW5ndGhzICovCgp2YXIgTEVOTEVOUyA9IDE4OwovKiBpOiB3YWl0aW5nIGZvciBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi8KCnZhciBDT0RFTEVOUyA9IDE5OwovKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0IGFuZCBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi8KCnZhciBMRU5fID0gMjA7Ci8qIGk6IHNhbWUgYXMgTEVOIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovCgp2YXIgTEVOID0gMjE7Ci8qIGk6IHdhaXRpbmcgZm9yIGxlbmd0aC9saXQvZW9iIGNvZGUgKi8KCnZhciBMRU5FWFQgPSAyMjsK
LyogaTogd2FpdGluZyBmb3IgbGVuZ3RoIGV4dHJhIGJpdHMgKi8KCnZhciBESVNUID0gMjM7Ci8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi8KCnZhciBESVNURVhUID0gMjQ7Ci8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGV4dHJhIGJpdHMgKi8KCnZhciBNQVRDSCA9IDI1OwovKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gY29weSBzdHJpbmcgKi8KCnZhciBMSVQgPSAyNjsKLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi8KCnZhciBDSEVDSyA9IDI3Owov
KiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgY2hlY2sgdmFsdWUgKi8KCnZhciBMRU5HVEggPSAyODsKLyogaTogd2FpdGluZyBmb3IgMzItYml0IGxlbmd0aCAoZ3ppcCkgKi8KCnZhciBET05FID0gMjk7Ci8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovCgp2YXIgQkFEID0gMzA7Ci8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi8KCnZhciBNRU0gPSAzMTsKLyogZ290IGFuIGluZmxhdGUoKSBtZW1vcnkgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50
aWwgcmVzZXQgKi8KCnZhciBTWU5DID0gMzI7Ci8qIGxvb2tpbmcgZm9yIHN5bmNocm9uaXphdGlvbiBieXRlcyB0byByZXN0YXJ0IGluZmxhdGUoKSAqLwoKLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KCnZhciBFTk9VR0hfTEVOUyA9IDg1MjsKdmFyIEVOT1VHSF9ESVNUUyA9IDU5MjsgLy92YXIgRU5PVUdIID0gIChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpOwoKdmFyIE1BWF9XQklUUyA9IDE1OwovKiAzMksgTFo3NyB3aW5k
b3cgKi8KCnZhciBERUZfV0JJVFMgPSBNQVhfV0JJVFM7CgpmdW5jdGlvbiB6c3dhcDMyKHEpIHsKICByZXR1cm4gKHEgPj4+IDI0ICYgMHhmZikgKyAocSA+Pj4gOCAmIDB4ZmYwMCkgKyAoKHEgJiAweGZmMDApIDw8IDgpICsgKChxICYgMHhmZikgPDwgMjQpOwp9CgpmdW5jdGlvbiBJbmZsYXRlU3RhdGUoKSB7CiAgdGhpcy5tb2RlID0gMDsKICAvKiBjdXJyZW50IGluZmxhdGUgbW9kZSAqLwoKICB0aGlzLmxhc3QgPSBmYWxzZTsKICAvKiB0cnVlIGlmIHByb2Nlc3NpbmcgbGFzdCBibG9jayAqLwoKICB0aGlzLndyYXAgPSAw
OwogIC8qIGJpdCAwIHRydWUgZm9yIHpsaWIsIGJpdCAxIHRydWUgZm9yIGd6aXAgKi8KCiAgdGhpcy5oYXZlZGljdCA9IGZhbHNlOwogIC8qIHRydWUgaWYgZGljdGlvbmFyeSBwcm92aWRlZCAqLwoKICB0aGlzLmZsYWdzID0gMDsKICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpICovCgogIHRoaXMuZG1heCA9IDA7CiAgLyogemxpYiBoZWFkZXIgbWF4IGRpc3RhbmNlIChJTkZMQVRFX1NUUklDVCkgKi8KCiAgdGhpcy5jaGVjayA9IDA7CiAgLyogcHJvdGVjdGVkIGNvcHkgb2YgY2hlY2sgdmFs
dWUgKi8KCiAgdGhpcy50b3RhbCA9IDA7CiAgLyogcHJvdGVjdGVkIGNvcHkgb2Ygb3V0cHV0IGNvdW50ICovCiAgLy8gVE9ETzogbWF5IGJlIHt9CgogIHRoaXMuaGVhZCA9IG51bGw7CiAgLyogd2hlcmUgdG8gc2F2ZSBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiAqLwoKICAvKiBzbGlkaW5nIHdpbmRvdyAqLwoKICB0aGlzLndiaXRzID0gMDsKICAvKiBsb2cgYmFzZSAyIG9mIHJlcXVlc3RlZCB3aW5kb3cgc2l6ZSAqLwoKICB0aGlzLndzaXplID0gMDsKICAvKiB3aW5kb3cgc2l6ZSBvciB6ZXJvIGlmIG5vdCB1c2luZyB3aW5k
b3cgKi8KCiAgdGhpcy53aGF2ZSA9IDA7CiAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqLwoKICB0aGlzLnduZXh0ID0gMDsKICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi8KCiAgdGhpcy53aW5kb3cgPSBudWxsOwogIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgbmVlZGVkICovCgogIC8qIGJpdCBhY2N1bXVsYXRvciAqLwoKICB0aGlzLmhvbGQgPSAwOwogIC8qIGlucHV0IGJpdCBhY2N1bXVsYXRvciAqLwoKICB0aGlzLmJpdHMgPSAwOwogIC8qIG51bWJlciBvZiBiaXRzIGluICJpbiIgKi8KCiAgLyog
Zm9yIHN0cmluZyBhbmQgc3RvcmVkIGJsb2NrIGNvcHlpbmcgKi8KCiAgdGhpcy5sZW5ndGggPSAwOwogIC8qIGxpdGVyYWwgb3IgbGVuZ3RoIG9mIGRhdGEgdG8gY29weSAqLwoKICB0aGlzLm9mZnNldCA9IDA7CiAgLyogZGlzdGFuY2UgYmFjayB0byBjb3B5IHN0cmluZyBmcm9tICovCgogIC8qIGZvciB0YWJsZSBhbmQgY29kZSBkZWNvZGluZyAqLwoKICB0aGlzLmV4dHJhID0gMDsKICAvKiBleHRyYSBiaXRzIG5lZWRlZCAqLwoKICAvKiBmaXhlZCBhbmQgZHluYW1pYyBjb2RlIHRhYmxlcyAqLwoKICB0aGlzLmxlbmNvZGUg
PSBudWxsOwogIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAqLwoKICB0aGlzLmRpc3Rjb2RlID0gbnVsbDsKICAvKiBzdGFydGluZyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKi8KCiAgdGhpcy5sZW5iaXRzID0gMDsKICAvKiBpbmRleCBiaXRzIGZvciBsZW5jb2RlICovCgogIHRoaXMuZGlzdGJpdHMgPSAwOwogIC8qIGluZGV4IGJpdHMgZm9yIGRpc3Rjb2RlICovCgogIC8qIGR5bmFtaWMgdGFibGUgYnVpbGRpbmcgKi8KCiAgdGhpcy5uY29kZSA9IDA7CiAgLyogbnVtYmVyIG9mIGNvZGUg
bGVuZ3RoIGNvZGUgbGVuZ3RocyAqLwoKICB0aGlzLm5sZW4gPSAwOwogIC8qIG51bWJlciBvZiBsZW5ndGggY29kZSBsZW5ndGhzICovCgogIHRoaXMubmRpc3QgPSAwOwogIC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi8KCiAgdGhpcy5oYXZlID0gMDsKICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGhzIGluIGxlbnNbXSAqLwoKICB0aGlzLm5leHQgPSBudWxsOwogIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIGNvZGVzW10gKi8KCiAgdGhpcy5sZW5zID0gbmV3IHV0aWxzLkJ1ZjE2KDMyMCk7CiAgLyog
dGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIGNvZGUgbGVuZ3RocyAqLwoKICB0aGlzLndvcmsgPSBuZXcgdXRpbHMuQnVmMTYoMjg4KTsKICAvKiB3b3JrIGFyZWEgZm9yIGNvZGUgdGFibGUgYnVpbGRpbmcgKi8KCiAgLyoKICAgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHBvaW50ZXJzIGluIGpzLCB3ZSB1c2UgbGVuY29kZSBhbmQgZGlzdGNvZGUgZGlyZWN0bHkKICAgYXMgYnVmZmVycyBzbyB3ZSBkb24ndCBuZWVkIGNvZGVzCiAgKi8KICAvL3RoaXMuY29kZXMgPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIKTsgICAgICAgLyogc3BhY2Ug
Zm9yIGNvZGUgdGFibGVzICovCgogIHRoaXMubGVuZHluID0gbnVsbDsKICAvKiBkeW5hbWljIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAoSlMgc3BlY2lmaWMpICovCgogIHRoaXMuZGlzdGR5biA9IG51bGw7CiAgLyogZHluYW1pYyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKEpTIHNwZWNpZmljKSAqLwoKICB0aGlzLnNhbmUgPSAwOwogIC8qIGlmIGZhbHNlLCBhbGxvdyBpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgKi8KCiAgdGhpcy5iYWNrID0gMDsKICAvKiBiaXRzIGJhY2sgb2YgbGFzdCB1bnByb2Nlc3Nl
ZCBsZW5ndGgvbGl0ICovCgogIHRoaXMud2FzID0gMDsKICAvKiBpbml0aWFsIGxlbmd0aCBvZiBtYXRjaCAqLwp9CgpmdW5jdGlvbiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pIHsKICB2YXIgc3RhdGU7CgogIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgewogICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogIH0KCiAgc3RhdGUgPSBzdHJtLnN0YXRlOwogIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IHN0YXRlLnRvdGFsID0gMDsKICBzdHJtLm1zZyA9ICcnOwogIC8qWl9OVUxMKi8KCiAgaWYgKHN0YXRlLndyYXAp
IHsKICAgIC8qIHRvIHN1cHBvcnQgaWxsLWNvbmNlaXZlZCBKYXZhIHRlc3Qgc3VpdGUgKi8KICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTsKICB9CgogIHN0YXRlLm1vZGUgPSBIRUFEOwogIHN0YXRlLmxhc3QgPSAwOwogIHN0YXRlLmhhdmVkaWN0ID0gMDsKICBzdGF0ZS5kbWF4ID0gMzI3Njg7CiAgc3RhdGUuaGVhZCA9IG51bGwKICAvKlpfTlVMTCovCiAgOwogIHN0YXRlLmhvbGQgPSAwOwogIHN0YXRlLmJpdHMgPSAwOyAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQgPSBzdGF0
ZS5jb2RlczsKCiAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5biA9IG5ldyB1dGlscy5CdWYzMihFTk9VR0hfTEVOUyk7CiAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSF9ESVNUUyk7CiAgc3RhdGUuc2FuZSA9IDE7CiAgc3RhdGUuYmFjayA9IC0xOyAvL1RyYWNldigoc3RkZXJyLCAiaW5mbGF0ZTogcmVzZXRcbiIpKTsKCiAgcmV0dXJuIFpfT0s7Cn0KCmZ1bmN0aW9uIGluZmxhdGVSZXNldChzdHJtKSB7CiAgdmFyIHN0YXRlOwoKICBpZiAoIXN0cm0gfHwgIXN0cm0u
c3RhdGUpIHsKICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICB9CgogIHN0YXRlID0gc3RybS5zdGF0ZTsKICBzdGF0ZS53c2l6ZSA9IDA7CiAgc3RhdGUud2hhdmUgPSAwOwogIHN0YXRlLnduZXh0ID0gMDsKICByZXR1cm4gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKTsKfQoKZnVuY3Rpb24gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKSB7CiAgdmFyIHdyYXA7CiAgdmFyIHN0YXRlOwogIC8qIGdldCB0aGUgc3RhdGUgKi8KCiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7CiAgICByZXR1cm4gWl9TVFJFQU1fRVJS
T1I7CiAgfQoKICBzdGF0ZSA9IHN0cm0uc3RhdGU7CiAgLyogZXh0cmFjdCB3cmFwIHJlcXVlc3QgZnJvbSB3aW5kb3dCaXRzIHBhcmFtZXRlciAqLwoKICBpZiAod2luZG93Qml0cyA8IDApIHsKICAgIHdyYXAgPSAwOwogICAgd2luZG93Qml0cyA9IC13aW5kb3dCaXRzOwogIH0gZWxzZSB7CiAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyAxOwoKICAgIGlmICh3aW5kb3dCaXRzIDwgNDgpIHsKICAgICAgd2luZG93Qml0cyAmPSAxNTsKICAgIH0KICB9CiAgLyogc2V0IG51bWJlciBvZiB3aW5kb3cgYml0cywgZnJlZSB3
aW5kb3cgaWYgZGlmZmVyZW50ICovCgoKICBpZiAod2luZG93Qml0cyAmJiAod2luZG93Qml0cyA8IDggfHwgd2luZG93Qml0cyA+IDE1KSkgewogICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogIH0KCiAgaWYgKHN0YXRlLndpbmRvdyAhPT0gbnVsbCAmJiBzdGF0ZS53Yml0cyAhPT0gd2luZG93Qml0cykgewogICAgc3RhdGUud2luZG93ID0gbnVsbDsKICB9CiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXNldCB0aGUgcmVzdCBvZiBpdCAqLwoKCiAgc3RhdGUud3JhcCA9IHdyYXA7CiAgc3RhdGUud2JpdHMgPSB3aW5kb3dCaXRz
OwogIHJldHVybiBpbmZsYXRlUmVzZXQoc3RybSk7Cn0KCmZ1bmN0aW9uIGluZmxhdGVJbml0MihzdHJtLCB3aW5kb3dCaXRzKSB7CiAgdmFyIHJldDsKICB2YXIgc3RhdGU7CgogIGlmICghc3RybSkgewogICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogIH0gLy9zdHJtLm1zZyA9IFpfTlVMTDsgICAgICAgICAgICAgICAgIC8qIGluIGNhc2Ugd2UgcmV0dXJuIGFuIGVycm9yICovCgoKICBzdGF0ZSA9IG5ldyBJbmZsYXRlU3RhdGUoKTsgLy9pZiAoc3RhdGUgPT09IFpfTlVMTCkgcmV0dXJuIFpfTUVNX0VSUk9SOwogIC8vVHJh
Y2V2KChzdGRlcnIsICJpbmZsYXRlOiBhbGxvY2F0ZWRcbiIpKTsKCiAgc3RybS5zdGF0ZSA9IHN0YXRlOwogIHN0YXRlLndpbmRvdyA9IG51bGwKICAvKlpfTlVMTCovCiAgOwogIHJldCA9IGluZmxhdGVSZXNldDIoc3RybSwgd2luZG93Qml0cyk7CgogIGlmIChyZXQgIT09IFpfT0spIHsKICAgIHN0cm0uc3RhdGUgPSBudWxsCiAgICAvKlpfTlVMTCovCiAgICA7CiAgfQoKICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBpbmZsYXRlSW5pdChzdHJtKSB7CiAgcmV0dXJuIGluZmxhdGVJbml0MihzdHJtLCBERUZfV0JJVFMpOwp9
Ci8qCiBSZXR1cm4gc3RhdGUgd2l0aCBsZW5ndGggYW5kIGRpc3RhbmNlIGRlY29kaW5nIHRhYmxlcyBhbmQgaW5kZXggc2l6ZXMgc2V0IHRvCiBmaXhlZCBjb2RlIGRlY29kaW5nLiAgTm9ybWFsbHkgdGhpcyByZXR1cm5zIGZpeGVkIHRhYmxlcyBmcm9tIGluZmZpeGVkLmguCiBJZiBCVUlMREZJWEVEIGlzIGRlZmluZWQsIHRoZW4gaW5zdGVhZCB0aGlzIHJvdXRpbmUgYnVpbGRzIHRoZSB0YWJsZXMgdGhlCiBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgcmV0dXJucyB0aG9zZSB0YWJsZXMgdGhlIGZpcnN0IHRpbWUgYW5k
CiB0aGVyZWFmdGVyLiAgVGhpcyByZWR1Y2VzIHRoZSBzaXplIG9mIHRoZSBjb2RlIGJ5IGFib3V0IDJLIGJ5dGVzLCBpbgogZXhjaGFuZ2UgZm9yIGEgbGl0dGxlIGV4ZWN1dGlvbiB0aW1lLiAgSG93ZXZlciwgQlVJTERGSVhFRCBzaG91bGQgbm90IGJlCiB1c2VkIGZvciB0aHJlYWRlZCBhcHBsaWNhdGlvbnMsIHNpbmNlIHRoZSByZXdyaXRpbmcgb2YgdGhlIHRhYmxlcyBhbmQgdmlyZ2luCiBtYXkgbm90IGJlIHRocmVhZC1zYWZlLgogKi8KCgp2YXIgdmlyZ2luID0gdHJ1ZTsKdmFyIGxlbmZpeCwgZGlzdGZpeDsgLy8gV2Ug
aGF2ZSBubyBwb2ludGVycyBpbiBKUywgc28ga2VlcCB0YWJsZXMgc2VwYXJhdGUKCmZ1bmN0aW9uIGZpeGVkdGFibGVzKHN0YXRlKSB7CiAgLyogYnVpbGQgZml4ZWQgaHVmZm1hbiB0YWJsZXMgaWYgZmlyc3QgY2FsbCAobWF5IG5vdCBiZSB0aHJlYWQgc2FmZSkgKi8KICBpZiAodmlyZ2luKSB7CiAgICB2YXIgc3ltOwogICAgbGVuZml4ID0gbmV3IHV0aWxzLkJ1ZjMyKDUxMik7CiAgICBkaXN0Zml4ID0gbmV3IHV0aWxzLkJ1ZjMyKDMyKTsKICAgIC8qIGxpdGVyYWwvbGVuZ3RoIHRhYmxlICovCgogICAgc3ltID0gMDsKCiAg
ICB3aGlsZSAoc3ltIDwgMTQ0KSB7CiAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gODsKICAgIH0KCiAgICB3aGlsZSAoc3ltIDwgMjU2KSB7CiAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gOTsKICAgIH0KCiAgICB3aGlsZSAoc3ltIDwgMjgwKSB7CiAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gNzsKICAgIH0KCiAgICB3aGlsZSAoc3ltIDwgMjg4KSB7CiAgICAgIHN0YXRlLmxlbnNbc3ltKytdID0gODsKICAgIH0KCiAgICBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAwLCBzdGF0ZS53
b3JrLCB7CiAgICAgIGJpdHM6IDkKICAgIH0pOwogICAgLyogZGlzdGFuY2UgdGFibGUgKi8KCiAgICBzeW0gPSAwOwoKICAgIHdoaWxlIChzeW0gPCAzMikgewogICAgICBzdGF0ZS5sZW5zW3N5bSsrXSA9IDU7CiAgICB9CgogICAgaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgMCwgMzIsIGRpc3RmaXgsIDAsIHN0YXRlLndvcmssIHsKICAgICAgYml0czogNQogICAgfSk7CiAgICAvKiBkbyB0aGlzIGp1c3Qgb25jZSAqLwoKICAgIHZpcmdpbiA9IGZhbHNlOwogIH0KCiAgc3RhdGUubGVuY29kZSA9IGxlbmZpeDsK
ICBzdGF0ZS5sZW5iaXRzID0gOTsKICBzdGF0ZS5kaXN0Y29kZSA9IGRpc3RmaXg7CiAgc3RhdGUuZGlzdGJpdHMgPSA1Owp9Ci8qCiBVcGRhdGUgdGhlIHdpbmRvdyB3aXRoIHRoZSBsYXN0IHdzaXplIChub3JtYWxseSAzMkspIGJ5dGVzIHdyaXR0ZW4gYmVmb3JlCiByZXR1cm5pbmcuICBJZiB3aW5kb3cgZG9lcyBub3QgZXhpc3QgeWV0LCBjcmVhdGUgaXQuICBUaGlzIGlzIG9ubHkgY2FsbGVkCiB3aGVuIGEgd2luZG93IGlzIGFscmVhZHkgaW4gdXNlLCBvciB3aGVuIG91dHB1dCBoYXMgYmVlbiB3cml0dGVuIGR1cmluZyB0
aGlzCiBpbmZsYXRlIGNhbGwsIGJ1dCB0aGUgZW5kIG9mIHRoZSBkZWZsYXRlIHN0cmVhbSBoYXMgbm90IGJlZW4gcmVhY2hlZCB5ZXQuCiBJdCBpcyBhbHNvIGNhbGxlZCB0byBjcmVhdGUgYSB3aW5kb3cgZm9yIGRpY3Rpb25hcnkgZGF0YSB3aGVuIGEgZGljdGlvbmFyeQogaXMgbG9hZGVkLgoKIFByb3ZpZGluZyBvdXRwdXQgYnVmZmVycyBsYXJnZXIgdGhhbiAzMksgdG8gaW5mbGF0ZSgpIHNob3VsZCBwcm92aWRlIGEgc3BlZWQKIGFkdmFudGFnZSwgc2luY2Ugb25seSB0aGUgbGFzdCAzMksgb2Ygb3V0cHV0IGlzIGNvcGll
ZCB0byB0aGUgc2xpZGluZyB3aW5kb3cKIHVwb24gcmV0dXJuIGZyb20gaW5mbGF0ZSgpLCBhbmQgc2luY2UgYWxsIGRpc3RhbmNlcyBhZnRlciB0aGUgZmlyc3QgMzJLIG9mCiBvdXRwdXQgd2lsbCBmYWxsIGluIHRoZSBvdXRwdXQgZGF0YSwgbWFraW5nIG1hdGNoIGNvcGllcyBzaW1wbGVyIGFuZCBmYXN0ZXIuCiBUaGUgYWR2YW50YWdlIG1heSBiZSBkZXBlbmRlbnQgb24gdGhlIHNpemUgb2YgdGhlIHByb2Nlc3NvcidzIGRhdGEgY2FjaGVzLgogKi8KCgpmdW5jdGlvbiB1cGRhdGV3aW5kb3coc3RybSwgc3JjLCBlbmQsIGNv
cHkpIHsKICB2YXIgZGlzdDsKICB2YXIgc3RhdGUgPSBzdHJtLnN0YXRlOwogIC8qIGlmIGl0IGhhc24ndCBiZWVuIGRvbmUgYWxyZWFkeSwgYWxsb2NhdGUgc3BhY2UgZm9yIHRoZSB3aW5kb3cgKi8KCiAgaWYgKHN0YXRlLndpbmRvdyA9PT0gbnVsbCkgewogICAgc3RhdGUud3NpemUgPSAxIDw8IHN0YXRlLndiaXRzOwogICAgc3RhdGUud25leHQgPSAwOwogICAgc3RhdGUud2hhdmUgPSAwOwogICAgc3RhdGUud2luZG93ID0gbmV3IHV0aWxzLkJ1Zjgoc3RhdGUud3NpemUpOwogIH0KICAvKiBjb3B5IHN0YXRlLT53c2l6ZSBv
ciBsZXNzIG91dHB1dCBieXRlcyBpbnRvIHRoZSBjaXJjdWxhciB3aW5kb3cgKi8KCgogIGlmIChjb3B5ID49IHN0YXRlLndzaXplKSB7CiAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gc3RhdGUud3NpemUsIHN0YXRlLndzaXplLCAwKTsKICAgIHN0YXRlLnduZXh0ID0gMDsKICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7CiAgfSBlbHNlIHsKICAgIGRpc3QgPSBzdGF0ZS53c2l6ZSAtIHN0YXRlLnduZXh0OwoKICAgIGlmIChkaXN0ID4gY29weSkgewogICAgICBkaXN0ID0gY29weTsKICAg
IH0gLy96bWVtY3B5KHN0YXRlLT53aW5kb3cgKyBzdGF0ZS0+d25leHQsIGVuZCAtIGNvcHksIGRpc3QpOwoKCiAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgZGlzdCwgc3RhdGUud25leHQpOwogICAgY29weSAtPSBkaXN0OwoKICAgIGlmIChjb3B5KSB7CiAgICAgIC8vem1lbWNweShzdGF0ZS0+d2luZG93LCBlbmQgLSBjb3B5LCBjb3B5KTsKICAgICAgdXRpbHMuYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIGNvcHksIGNvcHksIDApOwogICAgICBzdGF0ZS53bmV4dCA9
IGNvcHk7CiAgICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7CiAgICB9IGVsc2UgewogICAgICBzdGF0ZS53bmV4dCArPSBkaXN0OwoKICAgICAgaWYgKHN0YXRlLnduZXh0ID09PSBzdGF0ZS53c2l6ZSkgewogICAgICAgIHN0YXRlLnduZXh0ID0gMDsKICAgICAgfQoKICAgICAgaWYgKHN0YXRlLndoYXZlIDwgc3RhdGUud3NpemUpIHsKICAgICAgICBzdGF0ZS53aGF2ZSArPSBkaXN0OwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gMDsKfQoKZnVuY3Rpb24gaW5mbGF0ZShzdHJtLCBmbHVzaCkgewogIHZhciBzdGF0
ZTsKICB2YXIgaW5wdXQsIG91dHB1dDsgLy8gaW5wdXQvb3V0cHV0IGJ1ZmZlcnMKCiAgdmFyIG5leHQ7CiAgLyogbmV4dCBpbnB1dCBJTkRFWCAqLwoKICB2YXIgcHV0OwogIC8qIG5leHQgb3V0cHV0IElOREVYICovCgogIHZhciBoYXZlLCBsZWZ0OwogIC8qIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovCgogIHZhciBob2xkOwogIC8qIGJpdCBidWZmZXIgKi8KCiAgdmFyIGJpdHM7CiAgLyogYml0cyBpbiBiaXQgYnVmZmVyICovCgogIHZhciBfaW4sIF9vdXQ7CiAgLyogc2F2ZSBzdGFydGluZyBhdmFpbGFibGUgaW5w
dXQgYW5kIG91dHB1dCAqLwoKCiAgdmFyIGNvcHk7CiAgLyogbnVtYmVyIG9mIHN0b3JlZCBvciBtYXRjaCBieXRlcyB0byBjb3B5ICovCgogIHZhciBmcm9tOwogIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggYnl0ZXMgZnJvbSAqLwoKICB2YXIgZnJvbV9zb3VyY2U7CiAgdmFyIGhlcmUgPSAwOwogIC8qIGN1cnJlbnQgZGVjb2RpbmcgdGFibGUgZW50cnkgKi8KCiAgdmFyIGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7IC8vIHBha2VkICJoZXJlIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKQogIC8vdmFyIGxhc3Q7ICAg
ICAgICAgICAgICAgICAgIC8qIHBhcmVudCB0YWJsZSBlbnRyeSAqLwoKICB2YXIgbGFzdF9iaXRzLCBsYXN0X29wLCBsYXN0X3ZhbDsgLy8gcGFrZWQgImxhc3QiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpCgogIHZhciBsZW47CiAgLyogbGVuZ3RoIHRvIGNvcHkgZm9yIHJlcGVhdHMsIGJpdHMgdG8gZHJvcCAqLwoKICB2YXIgcmV0OwogIC8qIHJldHVybiBjb2RlICovCgogIHZhciBoYnVmID0gbmV3IHV0aWxzLkJ1ZjgoNCk7CiAgLyogYnVmZmVyIGZvciBnemlwIGhlYWRlciBjcmMgY2FsY3VsYXRpb24gKi8KCiAgdmFy
IG9wdHM7CiAgdmFyIG47IC8vIHRlbXBvcmFyeSB2YXIgZm9yIE5FRURfQklUUwoKICB2YXIgb3JkZXIgPQogIC8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqLwogIFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XTsKCiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIHx8ICFzdHJtLm91dHB1dCB8fCAhc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB7CiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgfQoKICBzdGF0ZSA9IHN0cm0u
c3RhdGU7CgogIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7CiAgICBzdGF0ZS5tb2RlID0gVFlQRURPOwogIH0KICAvKiBza2lwIGNoZWNrICovCiAgLy8tLS0gTE9BRCgpIC0tLQoKCiAgcHV0ID0gc3RybS5uZXh0X291dDsKICBvdXRwdXQgPSBzdHJtLm91dHB1dDsKICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7CiAgbmV4dCA9IHN0cm0ubmV4dF9pbjsKICBpbnB1dCA9IHN0cm0uaW5wdXQ7CiAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47CiAgaG9sZCA9IHN0YXRlLmhvbGQ7CiAgYml0cyA9IHN0YXRlLmJpdHM7IC8vLS0tCgogIF9p
biA9IGhhdmU7CiAgX291dCA9IGxlZnQ7CiAgcmV0ID0gWl9PSzsKCiAgaW5mX2xlYXZlOiAvLyBnb3RvIGVtdWxhdGlvbgogIGZvciAoOzspIHsKICAgIHN3aXRjaCAoc3RhdGUubW9kZSkgewogICAgICBjYXNlIEhFQUQ6CiAgICAgICAgaWYgKHN0YXRlLndyYXAgPT09IDApIHsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFRE87CiAgICAgICAgICBicmVhazsKICAgICAgICB9IC8vPT09IE5FRURCSVRTKDE2KTsKCgogICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHsKICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAg
ICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBoYXZlLS07CiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICB9IC8vPT09Ly8KCgogICAgICAgIGlmIChzdGF0ZS53cmFwICYgMiAmJiBob2xkID09PSAweDhiMWYpIHsKICAgICAgICAgIC8qIGd6aXAgaGVhZGVyICovCiAgICAgICAgICBzdGF0ZS5jaGVjayA9IDAKICAgICAgICAgIC8qY3JjMzIoMEwsIFpfTlVMTCwgMCkqLwogICAgICAgICAgOyAvLz09PSBDUkMyKHN0
YXRlLmNoZWNrLCBob2xkKTsKCiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7CiAgICAgICAgICBoYnVmWzFdID0gaG9sZCA+Pj4gOCAmIDB4ZmY7CiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTsgLy89PT0vLwogICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTsKCiAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgIGJpdHMgPSAwOyAvLz09PS8vCgogICAgICAgICAgc3RhdGUubW9kZSA9IEZMQUdTOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBz
dGF0ZS5mbGFncyA9IDA7CiAgICAgICAgLyogZXhwZWN0IHpsaWIgaGVhZGVyICovCgogICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmICghKHN0YXRlLndyYXAgJiAxKSB8fAogICAgICAgIC8qIGNoZWNrIGlmIHpsaWIgaGVhZGVyIGFsbG93ZWQgKi8KICAgICAgICAoKChob2xkICYgMHhmZikgPDwKICAgICAgICAvKkJJVFMoOCkqLwogICAgICAgIDgpICsgKGhvbGQgPj4gOCkpICUgMzEpIHsKICAgICAgICAgIHN0cm0ubXNnID0g
J2luY29ycmVjdCBoZWFkZXIgY2hlY2snOwogICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgaWYgKChob2xkICYgMHgwZikgIT09CiAgICAgICAgLypCSVRTKDQpKi8KICAgICAgICBaX0RFRkxBVEVEKSB7CiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7CiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfSAvLy0tLSBEUk9QQklUUyg0KSAtLS0vLwoKCiAgICAgICAgaG9sZCA+
Pj49IDQ7CiAgICAgICAgYml0cyAtPSA0OyAvLy0tLS8vCgogICAgICAgIGxlbiA9IChob2xkICYgMHgwZikgKwogICAgICAgIC8qQklUUyg0KSovCiAgICAgICAgODsKCiAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7CiAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjsKICAgICAgICB9IGVsc2UgaWYgKGxlbiA+IHN0YXRlLndiaXRzKSB7CiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHdpbmRvdyBzaXplJzsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICBicmVhazsKICAgICAgICB9Cgog
ICAgICAgIHN0YXRlLmRtYXggPSAxIDw8IGxlbjsgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6ICAgemxpYiBoZWFkZXIgb2tcbiIpKTsKCiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMQogICAgICAgIC8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovCiAgICAgICAgOwogICAgICAgIHN0YXRlLm1vZGUgPSBob2xkICYgMHgyMDAgPyBESUNUSUQgOiBUWVBFOyAvLz09PSBJTklUQklUUygpOwoKICAgICAgICBob2xkID0gMDsKICAgICAgICBiaXRzID0gMDsgLy89PT0vLwoKICAgICAgICBicmVhazsKCiAgICAg
IGNhc2UgRkxBR1M6CiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqLwogICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHsKICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBoYXZlLS07CiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICB9IC8vPT09Ly8KCgogICAgICAgIHN0YXRlLmZsYWdzID0gaG9sZDsKCiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4
ZmYpICE9PSBaX0RFRkxBVEVEKSB7CiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7CiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweGUwMDApIHsKICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gaGVhZGVyIGZsYWdzIHNldCc7CiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAg
ICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gaG9sZCA+PiA4ICYgMTsKICAgICAgICB9CgogICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgewogICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7CiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7CiAgICAgICAgICBoYnVmWzFdID0gaG9sZCA+Pj4gOCAmIDB4ZmY7CiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTsgLy89PT0vLwogICAgICAgIH0gLy89PT0gSU5JVEJJVFMoKTsKCgogICAgICAg
IGhvbGQgPSAwOwogICAgICAgIGJpdHMgPSAwOyAvLz09PS8vCgogICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FOwoKICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwoKICAgICAgY2FzZSBUSU1FOgogICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi8KICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7CiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICB9CgogICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAg
ICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgfSAvLz09PS8vCgoKICAgICAgICBpZiAoc3RhdGUuaGVhZCkgewogICAgICAgICAgc3RhdGUuaGVhZC50aW1lID0gaG9sZDsKICAgICAgICB9CgogICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgewogICAgICAgICAgLy89PT0gQ1JDNChzdGF0ZS5jaGVjaywgaG9sZCkKICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjsKICAgICAgICAgIGhidWZbMV0gPSBob2xkID4+PiA4ICYgMHhmZjsKICAgICAgICAgIGhidWZbMl0gPSBob2xkID4+PiAxNiAmIDB4ZmY7CiAg
ICAgICAgICBoYnVmWzNdID0gaG9sZCA+Pj4gMjQgJiAweGZmOwogICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgNCwgMCk7IC8vPT09CiAgICAgICAgfSAvLz09PSBJTklUQklUUygpOwoKCiAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgYml0cyA9IDA7IC8vPT09Ly8KCiAgICAgICAgc3RhdGUubW9kZSA9IE9TOwoKICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwoKICAgICAgY2FzZSBPUzoKICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovCiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikg
ewogICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgYml0cyArPSA4OwogICAgICAgIH0gLy89PT0vLwoKCiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgIHN0YXRlLmhlYWQueGZsYWdzID0gaG9sZCAmIDB4ZmY7CiAgICAgICAgICBzdGF0ZS5oZWFkLm9zID0gaG9sZCA+PiA4OwogICAgICAgIH0KCiAgICAgICAgaWYg
KHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7CiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTsKICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjsKICAgICAgICAgIGhidWZbMV0gPSBob2xkID4+PiA4ICYgMHhmZjsKICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApOyAvLz09PS8vCiAgICAgICAgfSAvLz09PSBJTklUQklUUygpOwoKCiAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgYml0cyA9IDA7IC8vPT09Ly8KCiAgICAgICAgc3RhdGUubW9kZSA9IEVY
TEVOOwoKICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwoKICAgICAgY2FzZSBFWExFTjoKICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHsKICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi8KICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHsKICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAg
IGJpdHMgKz0gODsKICAgICAgICAgIH0gLy89PT0vLwoKCiAgICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkOwoKICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbGVuID0gaG9sZDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHsKICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7CiAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjsKICAgICAgICAgICAgaGJ1ZlsxXSA9IGhvbGQgPj4+IDggJiAw
eGZmOwogICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTsgLy89PT0vLwogICAgICAgICAgfSAvLz09PSBJTklUQklUUygpOwoKCiAgICAgICAgICBob2xkID0gMDsKICAgICAgICAgIGJpdHMgPSAwOyAvLz09PS8vCiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbnVsbAogICAgICAgICAgLypaX05VTEwqLwogICAgICAgICAgOwogICAgICAgIH0KCiAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBOwoKICAgICAgLyog
ZmFsbHMgdGhyb3VnaCAqLwoKICAgICAgY2FzZSBFWFRSQToKICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHsKICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7CgogICAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7CiAgICAgICAgICAgIGNvcHkgPSBoYXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjb3B5KSB7CiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICAgICAgbGVuID0gc3RhdGUuaGVhZC5leHRyYV9sZW4gLSBzdGF0ZS5sZW5ndGg7CgogICAgICAgICAgICAgIGlmICgh
c3RhdGUuaGVhZC5leHRyYSkgewogICAgICAgICAgICAgICAgLy8gVXNlIHVudHlwZWQgYXJyYXkgZm9yIG1vcmUgY29udmVuaWVudCBwcm9jZXNzaW5nIGxhdGVyCiAgICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbmV3IEFycmF5KHN0YXRlLmhlYWQuZXh0cmFfbGVuKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHV0aWxzLmFycmF5U2V0KHN0YXRlLmhlYWQuZXh0cmEsIGlucHV0LCBuZXh0LCAvLyBleHRyYSBmaWVsZCBpcyBsaW1pdGVkIHRvIDY1NTM2IGJ5dGVzCiAgICAgICAgICAgICAgLy8gLSBu
byBuZWVkIGZvciBhZGRpdGlvbmFsIHNpemUgY2hlY2sKICAgICAgICAgICAgICBjb3B5LAogICAgICAgICAgICAgIC8qbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuID8gc3RhdGUuaGVhZC5leHRyYV9tYXggOiBjb3B5LCovCiAgICAgICAgICAgICAgbGVuKTsgLy96bWVtY3B5KHN0YXRlLmhlYWQuZXh0cmEgKyBsZW4sIG5leHQsCiAgICAgICAgICAgICAgLy8gICAgICAgIGxlbiArIGNvcHkgPiBzdGF0ZS5oZWFkLmV4dHJhX21heCA/CiAgICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmhlYWQuZXh0
cmFfbWF4IC0gbGVuIDogY29weSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgewogICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGF2ZSAtPSBjb3B5OwogICAgICAgICAgICBuZXh0ICs9IGNvcHk7CiAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5OwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGgpIHsKICAgICAgICAgICAg
YnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgc3RhdGUubGVuZ3RoID0gMDsKICAgICAgICBzdGF0ZS5tb2RlID0gTkFNRTsKCiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KCiAgICAgIGNhc2UgTkFNRToKICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA4MDApIHsKICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBjb3B5ID0gMDsKCiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIC8vIFRPRE86
IDIgb3IgMSBieXRlcz8KICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107CiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovCgogICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiYgc3RhdGUubGVuZ3RoIDwgNjU1MzYKICAgICAgICAgICAgLypzdGF0ZS5oZWFkLm5hbWVfbWF4Ki8KICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNv
ZGUobGVuKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTsKCiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHsKICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpOwogICAgICAgICAgfQoKICAgICAgICAgIGhhdmUgLT0gY29weTsKICAgICAgICAgIG5leHQgKz0gY29weTsKCiAgICAgICAgICBpZiAobGVuKSB7CiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgIH0KICAgICAgICB9
IGVsc2UgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICBzdGF0ZS5sZW5ndGggPSAwOwogICAgICAgIHN0YXRlLm1vZGUgPSBDT01NRU5UOwoKICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwoKICAgICAgY2FzZSBDT01NRU5UOgogICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MTAwMCkgewogICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGNvcHkgPSAwOwoK
ICAgICAgICAgIGRvIHsKICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107CiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovCgogICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiYgc3RhdGUubGVuZ3RoIDwgNjU1MzYKICAgICAgICAgICAgLypzdGF0ZS5oZWFkLmNvbW1fbWF4Ki8KICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ICs9IFN0cmluZy5mcm9tQ2hh
ckNvZGUobGVuKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTsKCiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHsKICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpOwogICAgICAgICAgfQoKICAgICAgICAgIGhhdmUgLT0gY29weTsKICAgICAgICAgIG5leHQgKz0gY29weTsKCiAgICAgICAgICBpZiAobGVuKSB7CiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgIH0KICAgICAg
ICB9IGVsc2UgaWYgKHN0YXRlLmhlYWQpIHsKICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICBzdGF0ZS5tb2RlID0gSENSQzsKCiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KCiAgICAgIGNhc2UgSENSQzoKICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHsKICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi8KICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHsKICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICBicmVhayBpbmZf
bGVhdmU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgIH0gLy89PT0vLwoKCiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkgewogICAgICAgICAgICBzdHJtLm1zZyA9ICdoZWFkZXIgY3JjIG1pc21hdGNoJzsKICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9IC8vPT09IElOSVRCSVRT
KCk7CgoKICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgYml0cyA9IDA7IC8vPT09Ly8KICAgICAgICB9CgogICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7CiAgICAgICAgICBzdGF0ZS5oZWFkLmhjcmMgPSBzdGF0ZS5mbGFncyA+PiA5ICYgMTsKICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAwOwogICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSBESUNUSUQ6CiAgICAgICAgLy89PT0g
TkVFREJJVFMoMzIpOyAqLwogICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHsKICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBoYXZlLS07CiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICB9IC8vPT09Ly8KCgogICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IHpzd2FwMzIoaG9sZCk7IC8vPT09IElOSVRCSVRTKCk7CgogICAgICAgIGhvbGQgPSAw
OwogICAgICAgIGJpdHMgPSAwOyAvLz09PS8vCgogICAgICAgIHN0YXRlLm1vZGUgPSBESUNUOwoKICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwoKICAgICAgY2FzZSBESUNUOgogICAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkgewogICAgICAgICAgLy8tLS0gUkVTVE9SRSgpIC0tLQogICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDsKICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDsKICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7CiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTsKICAgICAg
ICAgIHN0YXRlLmhvbGQgPSBob2xkOwogICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7IC8vLS0tCgogICAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUOwogICAgICAgIH0KCiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMQogICAgICAgIC8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovCiAgICAgICAgOwogICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFOwoKICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwoKICAgICAgY2FzZSBUWVBFOgogICAgICAgIGlmIChmbHVzaCA9PT0gWl9CTE9DSyB8fCBmbHVzaCA9PT0gWl9U
UkVFUykgewogICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgIH0KCiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KCiAgICAgIGNhc2UgVFlQRURPOgogICAgICAgIGlmIChzdGF0ZS5sYXN0KSB7CiAgICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vCiAgICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7CiAgICAgICAgICBiaXRzIC09IGJpdHMgJiA3OyAvLy0tLS8vCgogICAgICAgICAgc3RhdGUubW9kZSA9IENIRUNLOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfSAvLz09PSBORUVEQklUUygzKTsgKi8KCgog
ICAgICAgIHdoaWxlIChiaXRzIDwgMykgewogICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgYml0cyArPSA4OwogICAgICAgIH0gLy89PT0vLwoKCiAgICAgICAgc3RhdGUubGFzdCA9IGhvbGQgJiAweDAxCiAgICAgICAgLypCSVRTKDEpKi8KICAgICAgICA7IC8vLS0tIERST1BCSVRTKDEpIC0tLS8vCgogICAgICAgIGhvbGQgPj4+
PSAxOwogICAgICAgIGJpdHMgLT0gMTsgLy8tLS0vLwoKICAgICAgICBzd2l0Y2ggKGhvbGQgJiAweDAzKSB7CiAgICAgICAgICAvKkJJVFMoMikqLwogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAvKiBzdG9yZWQgYmxvY2sgKi8KICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6ICAgICBzdG9yZWQgYmxvY2slc1xuIiwKICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmxhc3QgPyAiIChsYXN0KSIgOiAiIikpOwogICAgICAgICAgICBzdGF0ZS5tb2RlID0gU1RPUkVEOwogICAgICAgICAgICBicmVh
azsKCiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIC8qIGZpeGVkIGJsb2NrICovCiAgICAgICAgICAgIGZpeGVkdGFibGVzKHN0YXRlKTsgLy9UcmFjZXYoKHN0ZGVyciwgImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXG4iLAogICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/ICIgKGxhc3QpIiA6ICIiKSk7CgogICAgICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXzsKICAgICAgICAgICAgLyogZGVjb2RlIGNvZGVzICovCgogICAgICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsKICAgICAg
ICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vLwogICAgICAgICAgICAgIGhvbGQgPj4+PSAyOwogICAgICAgICAgICAgIGJpdHMgLT0gMjsgLy8tLS0vLwoKICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgLyogZHluYW1pYyBibG9jayAqLwogICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCAiaW5mbGF0ZTogICAgIGR5bmFtaWMgY29kZXMgYmxvY2slc1xuIiwKICAgICAgICAgICAgLy8gICAgICAg
IHN0YXRlLmxhc3QgPyAiIChsYXN0KSIgOiAiIikpOwogICAgICAgICAgICBzdGF0ZS5tb2RlID0gVEFCTEU7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBibG9jayB0eXBlJzsKICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICB9IC8vLS0tIERST1BCSVRTKDIpIC0tLS8vCgoKICAgICAgICBob2xkID4+Pj0gMjsKICAgICAgICBiaXRzIC09IDI7IC8vLS0tLy8KCiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlIFNUT1JFRDoKICAg
ICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vIC8qIGdvIHRvIGJ5dGUgYm91bmRhcnkgKi8KICAgICAgICBob2xkID4+Pj0gYml0cyAmIDc7CiAgICAgICAgYml0cyAtPSBiaXRzICYgNzsgLy8tLS0vLwogICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi8KCiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikgewogICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBi
aXRzOwogICAgICAgICAgYml0cyArPSA4OwogICAgICAgIH0gLy89PT0vLwoKCiAgICAgICAgaWYgKChob2xkICYgMHhmZmZmKSAhPT0gKGhvbGQgPj4+IDE2IF4gMHhmZmZmKSkgewogICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3Rocyc7CiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkICYgMHhmZmZmOyAvL1RyYWNldigoc3RkZXJyLCAiaW5mbGF0ZTogICAgICAgc3RvcmVkIGxlbmd0aCAl
dVxuIiwKICAgICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7CiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTsKCiAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgYml0cyA9IDA7IC8vPT09Ly8KCiAgICAgICAgc3RhdGUubW9kZSA9IENPUFlfOwoKICAgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsKICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICB9CgogICAgICAvKiBmYWxscyB0aHJvdWdoICovCgogICAgICBjYXNlIENPUFlfOgogICAgICAgIHN0YXRlLm1vZGUgPSBDT1BZOwoKICAgICAgLyogZmFsbHMg
dGhyb3VnaCAqLwoKICAgICAgY2FzZSBDT1BZOgogICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7CgogICAgICAgIGlmIChjb3B5KSB7CiAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsKICAgICAgICAgICAgY29weSA9IGhhdmU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7CiAgICAgICAgICAgIGNvcHkgPSBsZWZ0OwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjb3B5ID09PSAwKSB7CiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgIH0gLy8tLS0gem1lbWNweShwdXQs
IG5leHQsIGNvcHkpOyAtLS0KCgogICAgICAgICAgdXRpbHMuYXJyYXlTZXQob3V0cHV0LCBpbnB1dCwgbmV4dCwgY29weSwgcHV0KTsgLy8tLS0vLwoKICAgICAgICAgIGhhdmUgLT0gY29weTsKICAgICAgICAgIG5leHQgKz0gY29weTsKICAgICAgICAgIGxlZnQgLT0gY29weTsKICAgICAgICAgIHB1dCArPSBjb3B5OwogICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9IC8vVHJhY2V2KChzdGRlcnIsICJpbmZsYXRlOiAgICAgICBzdG9yZWQgZW5kXG4iKSk7CgoKICAgICAg
ICBzdGF0ZS5tb2RlID0gVFlQRTsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgVEFCTEU6CiAgICAgICAgLy89PT0gTkVFREJJVFMoMTQpOyAqLwogICAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHsKICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBoYXZlLS07CiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICB9IC8vPT09Ly8KCgogICAgICAgIHN0YXRlLm5s
ZW4gPSAoaG9sZCAmIDB4MWYpICsKICAgICAgICAvKkJJVFMoNSkqLwogICAgICAgIDI1NzsgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy8KCiAgICAgICAgaG9sZCA+Pj49IDU7CiAgICAgICAgYml0cyAtPSA1OyAvLy0tLS8vCgogICAgICAgIHN0YXRlLm5kaXN0ID0gKGhvbGQgJiAweDFmKSArCiAgICAgICAgLypCSVRTKDUpKi8KICAgICAgICAxOyAvLy0tLSBEUk9QQklUUyg1KSAtLS0vLwoKICAgICAgICBob2xkID4+Pj0gNTsKICAgICAgICBiaXRzIC09IDU7IC8vLS0tLy8KCiAgICAgICAgc3RhdGUubmNvZGUgPSAoaG9sZCAm
IDB4MGYpICsKICAgICAgICAvKkJJVFMoNCkqLwogICAgICAgIDQ7IC8vLS0tIERST1BCSVRTKDQpIC0tLS8vCgogICAgICAgIGhvbGQgPj4+PSA0OwogICAgICAgIGJpdHMgLT0gNDsgLy8tLS0vLwogICAgICAgIC8vI2lmbmRlZiBQS1pJUF9CVUdfV09SS0FST1VORAoKICAgICAgICBpZiAoc3RhdGUubmxlbiA+IDI4NiB8fCBzdGF0ZS5uZGlzdCA+IDMwKSB7CiAgICAgICAgICBzdHJtLm1zZyA9ICd0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9scyc7CiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAg
ICAgYnJlYWs7CiAgICAgICAgfSAvLyNlbmRpZgogICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xuIikpOwoKCiAgICAgICAgc3RhdGUuaGF2ZSA9IDA7CiAgICAgICAgc3RhdGUubW9kZSA9IExFTkxFTlM7CgogICAgICAvKiBmYWxscyB0aHJvdWdoICovCgogICAgICBjYXNlIExFTkxFTlM6CiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5uY29kZSkgewogICAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7CiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMpIHsKICAg
ICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgIGJpdHMgKz0gODsKICAgICAgICAgIH0gLy89PT0vLwoKCiAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gaG9sZCAmIDB4MDc7IC8vQklUUygzKTsKICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vCgogICAgICAgICAgaG9sZCA+
Pj49IDM7CiAgICAgICAgICBiaXRzIC09IDM7IC8vLS0tLy8KICAgICAgICB9CgogICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgMTkpIHsKICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAwOwogICAgICAgIH0gLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC4KICAgICAgICAvL3N0YXRlLm5leHQgPSBzdGF0ZS5jb2RlczsKICAgICAgICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0OwogICAgICAgIC8v
IFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZQoKCiAgICAgICAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5bjsKICAgICAgICBzdGF0ZS5sZW5iaXRzID0gNzsKICAgICAgICBvcHRzID0gewogICAgICAgICAgYml0czogc3RhdGUubGVuYml0cwogICAgICAgIH07CiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShDT0RFUywgc3RhdGUubGVucywgMCwgMTksIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpOwogICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7CgogICAgICAgIGlmIChyZXQpIHsK
ICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSBsZW5ndGhzIHNldCc7CiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfSAvL1RyYWNldigoc3RkZXJyLCAiaW5mbGF0ZTogICAgICAgY29kZSBsZW5ndGhzIG9rXG4iKSk7CgoKICAgICAgICBzdGF0ZS5oYXZlID0gMDsKICAgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7CgogICAgICAvKiBmYWxscyB0aHJvdWdoICovCgogICAgICBjYXNlIENPREVMRU5TOgogICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUu
bmxlbiArIHN0YXRlLm5kaXN0KSB7CiAgICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDFdOwogICAgICAgICAgICAvKkJJVFMoc3RhdGUubGVuYml0cykqLwoKICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7CiAgICAgICAgICAgIGhlcmVfb3AgPSBoZXJlID4+PiAxNiAmIDB4ZmY7CiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjsKCiAgICAgICAgICAgIGlmIChoZXJlX2JpdHMgPD0gYml0cykg
ewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9IC8vLS0tIFBVTExCWVRFKCkgLS0tLy8KCgogICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgYml0cyArPSA4OyAvLy0tLS8vCiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGhlcmVfdmFsIDwgMTYpIHsKICAgICAgICAgICAgLy8tLS0gRFJPUEJJ
VFMoaGVyZS5iaXRzKSAtLS0vLwogICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0czsgLy8tLS0vLwoKICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoaGVyZV92YWwgPT09IDE2KSB7CiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMik7CiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDI7CgogICAgICAgICAgICAgIHdoaWxlIChiaXRz
IDwgbikgewogICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgIH0gLy89PT0vLwogICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy8KCgogICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7
CiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7IC8vLS0tLy8KCiAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgPT09IDApIHsKICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnOwogICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbGVuID0gc3RhdGUubGVuc1tzdGF0ZS5oYXZlIC0gMV07CiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDMpOyAv
L0JJVFMoMik7CiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy8KCiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7CiAgICAgICAgICAgICAgYml0cyAtPSAyOyAvLy0tLS8vCiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVyZV92YWwgPT09IDE3KSB7CiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMyk7CiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDM7CgogICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikgewogICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAg
ICAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICAgICAgYml0cyArPSA4OwogICAgICAgICAgICAgIH0gLy89PT0vLwogICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy8KCgogICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7CiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7IC8vLS0tLy8KCiAg
ICAgICAgICAgICAgbGVuID0gMDsKICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwNyk7IC8vQklUUygzKTsKICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vLwoKICAgICAgICAgICAgICBob2xkID4+Pj0gMzsKICAgICAgICAgICAgICBiaXRzIC09IDM7IC8vLS0tLy8KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyA3KTsKICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNzsKCiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBu
KSB7CiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICAgICAgfSAvLz09PS8vCiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vLwoKCiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0czsKICAg
ICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0czsgLy8tLS0vLwoKICAgICAgICAgICAgICBsZW4gPSAwOwogICAgICAgICAgICAgIGNvcHkgPSAxMSArIChob2xkICYgMHg3Zik7IC8vQklUUyg3KTsKICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyg3KSAtLS0vLwoKICAgICAgICAgICAgICBob2xkID4+Pj0gNzsKICAgICAgICAgICAgICBiaXRzIC09IDc7IC8vLS0tLy8KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgKyBjb3B5ID4gc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7CiAgICAgICAg
ICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7CiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgd2hpbGUgKGNvcHktLSkgewogICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGxlbjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovCgoKICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gQkFE
KSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgLyogY2hlY2sgZm9yIGVuZC1vZi1ibG9jayBjb2RlIChiZXR0ZXIgaGF2ZSBvbmUpICovCgoKICAgICAgICBpZiAoc3RhdGUubGVuc1syNTZdID09PSAwKSB7CiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2snOwogICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICAvKiBidWlsZCBjb2RlIHRhYmxlcyAtLSBub3RlOiBkbyBub3QgY2hhbmdlIHRo
ZSBsZW5iaXRzIG9yIGRpc3RiaXRzCiAgICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaAogICAgICAgICAgIGNvbmNlcm5pbmcgdGhlIEVOT1VHSCBjb25zdGFudHMsIHdoaWNoIGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMgKi8KCgogICAgICAgIHN0YXRlLmxlbmJpdHMgPSA5OwogICAgICAgIG9wdHMgPSB7CiAgICAgICAgICBiaXRzOiBzdGF0ZS5sZW5iaXRzCiAgICAgICAgfTsKICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKExFTlMsIHN0YXRl
LmxlbnMsIDAsIHN0YXRlLm5sZW4sIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpOyAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLgogICAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4OwoKICAgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzOyAvLyBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDsKCiAgICAgICAgaWYgKHJldCkgewogICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxp
ZCBsaXRlcmFsL2xlbmd0aHMgc2V0JzsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIHN0YXRlLmRpc3RiaXRzID0gNjsgLy9zdGF0ZS5kaXN0Y29kZS5jb3B5KHN0YXRlLmNvZGVzKTsKICAgICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGUKCiAgICAgICAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluOwogICAgICAgIG9wdHMgPSB7CiAgICAgICAgICBiaXRzOiBzdGF0ZS5kaXN0Yml0cwogICAgICAgIH07CiAgICAgICAgcmV0ID0gaW5m
bGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgc3RhdGUubmxlbiwgc3RhdGUubmRpc3QsIHN0YXRlLmRpc3Rjb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTsgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC4KICAgICAgICAvLyBzdGF0ZS5uZXh0X2luZGV4ID0gb3B0cy50YWJsZV9pbmRleDsKCiAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSBvcHRzLmJpdHM7IC8vIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUubmV4dDsKCiAgICAgICAgaWYg
KHJldCkgewogICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZXMgc2V0JzsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICBicmVhazsKICAgICAgICB9IC8vVHJhY2V2KChzdGRlcnIsICdpbmZsYXRlOiAgICAgICBjb2RlcyBva1xuJykpOwoKCiAgICAgICAgc3RhdGUubW9kZSA9IExFTl87CgogICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgewogICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgIH0KCiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KCiAgICAgIGNhc2UgTEVO
XzoKICAgICAgICBzdGF0ZS5tb2RlID0gTEVOOwoKICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwoKICAgICAgY2FzZSBMRU46CiAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkgewogICAgICAgICAgLy8tLS0gUkVTVE9SRSgpIC0tLQogICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDsKICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDsKICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7CiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTsKICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkOwog
ICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7IC8vLS0tCgogICAgICAgICAgaW5mbGF0ZV9mYXN0KHN0cm0sIF9vdXQpOyAvLy0tLSBMT0FEKCkgLS0tCgogICAgICAgICAgcHV0ID0gc3RybS5uZXh0X291dDsKICAgICAgICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0OwogICAgICAgICAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0OwogICAgICAgICAgbmV4dCA9IHN0cm0ubmV4dF9pbjsKICAgICAgICAgIGlucHV0ID0gc3RybS5pbnB1dDsKICAgICAgICAgIGhhdmUgPSBzdHJtLmF2YWlsX2luOwogICAgICAgICAgaG9sZCA9IHN0YXRl
LmhvbGQ7CiAgICAgICAgICBiaXRzID0gc3RhdGUuYml0czsgLy8tLS0KCiAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkgewogICAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBzdGF0ZS5iYWNrID0gMDsKCiAgICAgICAgZm9yICg7OykgewogICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMV07CiAgICAgICAgICAvKkJJVFMoc3RhdGUubGVuYml0cykqLwoKICAgICAg
ICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgaGVyZV9vcCA9IGhlcmUgPj4+IDE2ICYgMHhmZjsKICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjsKCiAgICAgICAgICBpZiAoaGVyZV9iaXRzIDw9IGJpdHMpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9IC8vLS0tIFBVTExCWVRFKCkgLS0tLy8KCgogICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgIGhvbGQg
Kz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgYml0cyArPSA4OyAvLy0tLS8vCiAgICAgICAgfQoKICAgICAgICBpZiAoaGVyZV9vcCAmJiAoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7CiAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7CiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDsKICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7CgogICAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtsYXN0X3ZhbCArICgoaG9sZCAmICgxIDw8IGxhc3RfYml0cyAr
IGxhc3Rfb3ApIC0gMSkgPj4KICAgICAgICAgICAgLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8KICAgICAgICAgICAgbGFzdF9iaXRzKV07CiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0OwogICAgICAgICAgICBoZXJlX29wID0gaGVyZSA+Pj4gMTYgJiAweGZmOwogICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7CgogICAgICAgICAgICBpZiAobGFzdF9iaXRzICsgaGVyZV9iaXRzIDw9IGJpdHMpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfSAvLy0tLSBQVUxMQllU
RSgpIC0tLS8vCgoKICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7CiAgICAgICAgICAgIGJpdHMgKz0gODsgLy8tLS0vLwogICAgICAgICAgfSAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vCgoKICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7CiAgICAgICAgICBiaXRzIC09IGxhc3RfYml0czsgLy8tLS0vLwoKICAg
ICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzOwogICAgICAgIH0gLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vLwoKCiAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0czsKICAgICAgICBiaXRzIC09IGhlcmVfYml0czsgLy8tLS0vLwoKICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0czsKICAgICAgICBzdGF0ZS5sZW5ndGggPSBoZXJlX3ZhbDsKCiAgICAgICAgaWYgKGhlcmVfb3AgPT09IDApIHsKICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBoZXJlLnZhbCA+PSAweDIwICYmIGhlcmUudmFsIDwgMHg3
ZiA/CiAgICAgICAgICAvLyAgICAgICAgImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAnJWMnXG4iIDoKICAgICAgICAgIC8vICAgICAgICAiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxuIiwgaGVyZS52YWwpKTsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBMSVQ7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGlmIChoZXJlX29wICYgMzIpIHsKICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCAiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcbiIpKTsKICAgICAgICAgIHN0YXRlLmJhY2sg
PSAtMTsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7CiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnOwogICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgc3RhdGUuZXh0cmEgPSBoZXJlX29wICYgMTU7CiAgICAgICAgc3RhdGUubW9kZSA9IExFTkVYVDsKCiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KCiAgICAgIGNh
c2UgTEVORVhUOgogICAgICAgIGlmIChzdGF0ZS5leHRyYSkgewogICAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpOwogICAgICAgICAgbiA9IHN0YXRlLmV4dHJhOwoKICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikgewogICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgYml0cyArPSA4OwogICAg
ICAgICAgfSAvLz09PS8vCgoKICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBob2xkICYgKDEgPDwgc3RhdGUuZXh0cmEpIC0gMQogICAgICAgICAgLypCSVRTKHN0YXRlLmV4dHJhKSovCiAgICAgICAgICA7IC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vLwoKICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTsKICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7IC8vLS0tLy8KCiAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhOwogICAgICAgIH0gLy9UcmFjZXZ2KChzdGRlcnIsICJpbmZsYXRl
OiAgICAgICAgIGxlbmd0aCAldVxuIiwgc3RhdGUubGVuZ3RoKSk7CgoKICAgICAgICBzdGF0ZS53YXMgPSBzdGF0ZS5sZW5ndGg7CiAgICAgICAgc3RhdGUubW9kZSA9IERJU1Q7CgogICAgICAvKiBmYWxscyB0aHJvdWdoICovCgogICAgICBjYXNlIERJU1Q6CiAgICAgICAgZm9yICg7OykgewogICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxXTsKICAgICAgICAgIC8qQklUUyhzdGF0ZS5kaXN0Yml0cykqLwoKICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+
IDI0OwogICAgICAgICAgaGVyZV9vcCA9IGhlcmUgPj4+IDE2ICYgMHhmZjsKICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjsKCiAgICAgICAgICBpZiAoaGVyZV9iaXRzIDw9IGJpdHMpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9IC8vLS0tIFBVTExCWVRFKCkgLS0tLy8KCgogICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsKICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGhhdmUtLTsKICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRz
OwogICAgICAgICAgYml0cyArPSA4OyAvLy0tLS8vCiAgICAgICAgfQoKICAgICAgICBpZiAoKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkgewogICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzOwogICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7CiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsOwoKICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2xhc3RfdmFsICsgKChob2xkICYgKDEgPDwgbGFzdF9iaXRzICsgbGFzdF9vcCkgLSAxKSA+PgogICAgICAgICAgICAvKkJJ
VFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLwogICAgICAgICAgICBsYXN0X2JpdHMpXTsKICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7CiAgICAgICAgICAgIGhlcmVfb3AgPSBoZXJlID4+PiAxNiAmIDB4ZmY7CiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjsKCiAgICAgICAgICAgIGlmIChsYXN0X2JpdHMgKyBoZXJlX2JpdHMgPD0gYml0cykgewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9IC8vLS0tIFBVTExCWVRFKCkgLS0tLy8KCgogICAgICAgICAgICBpZiAoaGF2ZSA9
PT0gMCkgewogICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGF2ZS0tOwogICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0czsKICAgICAgICAgICAgYml0cyArPSA4OyAvLy0tLS8vCiAgICAgICAgICB9IC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy8KCgogICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0czsKICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzOyAvLy0tLS8vCgogICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7CiAg
ICAgICAgfSAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vCgoKICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzOwogICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzOyAvLy0tLS8vCgogICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzOwoKICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7CiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnOwogICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgc3RhdGUub2Zmc2V0ID0gaGVyZV92
YWw7CiAgICAgICAgc3RhdGUuZXh0cmEgPSBoZXJlX29wICYgMTU7CiAgICAgICAgc3RhdGUubW9kZSA9IERJU1RFWFQ7CgogICAgICAvKiBmYWxscyB0aHJvdWdoICovCgogICAgICBjYXNlIERJU1RFWFQ6CiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7CiAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7CiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7CgogICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7CiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZl
OwogICAgICAgICAgICB9CgogICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICB9IC8vPT09Ly8KCgogICAgICAgICAgc3RhdGUub2Zmc2V0ICs9IGhvbGQgJiAoMSA8PCBzdGF0ZS5leHRyYSkgLSAxCiAgICAgICAgICAvKkJJVFMoc3RhdGUuZXh0cmEpKi8KICAgICAgICAgIDsgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vCgogICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhOwogICAgICAg
ICAgYml0cyAtPSBzdGF0ZS5leHRyYTsgLy8tLS0vLwoKICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7CiAgICAgICAgfSAvLyNpZmRlZiBJTkZMQVRFX1NUUklDVAoKCiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IHN0YXRlLmRtYXgpIHsKICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJzsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7CiAgICAgICAgICBicmVhazsKICAgICAgICB9IC8vI2VuZGlmCiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsICJpbmZsYXRl
OiAgICAgICAgIGRpc3RhbmNlICV1XG4iLCBzdGF0ZS5vZmZzZXQpKTsKCgogICAgICAgIHN0YXRlLm1vZGUgPSBNQVRDSDsKCiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KCiAgICAgIGNhc2UgTUFUQ0g6CiAgICAgICAgaWYgKGxlZnQgPT09IDApIHsKICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICB9CgogICAgICAgIGNvcHkgPSBfb3V0IC0gbGVmdDsKCiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IGNvcHkpIHsKICAgICAgICAgIC8qIGNvcHkgZnJvbSB3aW5kb3cgKi8KICAgICAgICAgIGNvcHkgPSBzdGF0
ZS5vZmZzZXQgLSBjb3B5OwoKICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud2hhdmUpIHsKICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHsKICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7CiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfSAvLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLAogICAgICAgICAgICAvLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBj
b21wYXRpYmlsaXR5CiAgICAgICAgICAgIC8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUgogICAgICAgICAgICAvLyAgICAgICAgICBUcmFjZSgoc3RkZXJyLCAiaW5mbGF0ZS5jIHRvbyBmYXJcbiIpKTsKICAgICAgICAgICAgLy8gICAgICAgICAgY29weSAtPSBzdGF0ZS53aGF2ZTsKICAgICAgICAgICAgLy8gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfQogICAgICAgICAgICAvLyAgICAgICAgICBpZiAoY29weSA+IGxlZnQp
IHsgY29weSA9IGxlZnQ7IH0KICAgICAgICAgICAgLy8gICAgICAgICAgbGVmdCAtPSBjb3B5OwogICAgICAgICAgICAvLyAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTsKICAgICAgICAgICAgLy8gICAgICAgICAgZG8gewogICAgICAgICAgICAvLyAgICAgICAgICAgIG91dHB1dFtwdXQrK10gPSAwOwogICAgICAgICAgICAvLyAgICAgICAgICB9IHdoaWxlICgtLWNvcHkpOwogICAgICAgICAgICAvLyAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH0KICAgICAgICAgICAg
Ly8gICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIC8vI2VuZGlmCgogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud25leHQpIHsKICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDsKICAgICAgICAgICAgZnJvbSA9IHN0YXRlLndzaXplIC0gY29weTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsKICAgICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0
aDsKICAgICAgICAgIH0KCiAgICAgICAgICBmcm9tX3NvdXJjZSA9IHN0YXRlLndpbmRvdzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLyogY29weSBmcm9tIG91dHB1dCAqLwogICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7CiAgICAgICAgICBmcm9tID0gcHV0IC0gc3RhdGUub2Zmc2V0OwogICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDsKICAgICAgICB9CgogICAgICAgIGlmIChjb3B5ID4gbGVmdCkgewogICAgICAgICAgY29weSA9IGxlZnQ7CiAgICAgICAgfQoKICAgICAgICBsZWZ0IC09IGNvcHk7CiAg
ICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7CgogICAgICAgIGRvIHsKICAgICAgICAgIG91dHB1dFtwdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdOwogICAgICAgIH0gd2hpbGUgKC0tY29weSk7CgogICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHN0YXRlLm1vZGUgPSBMRU47CiAgICAgICAgfQoKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgTElUOgogICAgICAgIGlmIChsZWZ0ID09PSAwKSB7CiAgICAgICAgICBicmVhayBpbmZfbGVhdmU7CiAgICAgICAgfQoKICAgICAgICBvdXRwdXRb
cHV0KytdID0gc3RhdGUubGVuZ3RoOwogICAgICAgIGxlZnQtLTsKICAgICAgICBzdGF0ZS5tb2RlID0gTEVOOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSBDSEVDSzoKICAgICAgICBpZiAoc3RhdGUud3JhcCkgewogICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOwogICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikgewogICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgewogICAgICAgICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGF2ZS0tOyAvLyBVc2UgJ3wnIGluc3RlYWQg
b2YgJysnIHRvIG1ha2Ugc3VyZSB0aGF0IHJlc3VsdCBpcyBzaWduZWQKCiAgICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzOwogICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICB9IC8vPT09Ly8KCgogICAgICAgICAgX291dCAtPSBsZWZ0OwogICAgICAgICAgc3RybS50b3RhbF9vdXQgKz0gX291dDsKICAgICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7CgogICAgICAgICAgaWYgKF9vdXQpIHsKICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0KICAgICAgICAgICAgLypVUERB
VEUoc3RhdGUuY2hlY2ssIHB1dCAtIF9vdXQsIF9vdXQpOyovCiAgICAgICAgICAgIHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpOwogICAgICAgICAgfQoKICAgICAgICAgIF9vdXQgPSBsZWZ0OyAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCB6c3dhcDMyIHJldHVybnMgc2lnbmVkIHRvbwoKICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgPyBob2xkIDog
enN3YXAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7CiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBkYXRhIGNoZWNrJzsKICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9IC8vPT09IElOSVRCSVRTKCk7CgoKICAgICAgICAgIGhvbGQgPSAwOwogICAgICAgICAgYml0cyA9IDA7IC8vPT09Ly8KICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICJpbmZsYXRlOiAgIGNoZWNrIG1hdGNoZXMgdHJhaWxlclxuIikpOwogICAgICAgIH0KCiAgICAgICAgc3Rh
dGUubW9kZSA9IExFTkdUSDsKCiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KCiAgICAgIGNhc2UgTEVOR1RIOgogICAgICAgIGlmIChzdGF0ZS53cmFwICYmIHN0YXRlLmZsYWdzKSB7CiAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7CiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7CiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7CiAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBoYXZlLS07CiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBi
aXRzOwogICAgICAgICAgICBiaXRzICs9IDg7CiAgICAgICAgICB9IC8vPT09Ly8KCgogICAgICAgICAgaWYgKGhvbGQgIT09IChzdGF0ZS50b3RhbCAmIDB4ZmZmZmZmZmYpKSB7CiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBsZW5ndGggY2hlY2snOwogICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0gLy89PT0gSU5JVEJJVFMoKTsKCgogICAgICAgICAgaG9sZCA9IDA7CiAgICAgICAgICBiaXRzID0gMDsgLy89PT0vLwogICAgICAgICAgLy9UcmFjZXYo
KHN0ZGVyciwgImluZmxhdGU6ICAgbGVuZ3RoIG1hdGNoZXMgdHJhaWxlclxuIikpOwogICAgICAgIH0KCiAgICAgICAgc3RhdGUubW9kZSA9IERPTkU7CgogICAgICAvKiBmYWxscyB0aHJvdWdoICovCgogICAgICBjYXNlIERPTkU6CiAgICAgICAgcmV0ID0gWl9TVFJFQU1fRU5EOwogICAgICAgIGJyZWFrIGluZl9sZWF2ZTsKCiAgICAgIGNhc2UgQkFEOgogICAgICAgIHJldCA9IFpfREFUQV9FUlJPUjsKICAgICAgICBicmVhayBpbmZfbGVhdmU7CgogICAgICBjYXNlIE1FTToKICAgICAgICByZXR1cm4gWl9NRU1fRVJST1I7
CgogICAgICBjYXNlIFNZTkM6CiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogICAgfQogIH0gLy8gaW5mX2xlYXZlIDwtIGhlcmUgaXMgcmVhbCBwbGFjZSBmb3IgImdvdG8gaW5mX2xlYXZlIiwgZW11bGF0ZWQgdmlhICJicmVhayBpbmZfbGVhdmUiCgogIC8qCiAgICAgUmV0dXJuIGZyb20gaW5mbGF0ZSgpLCB1cGRhdGluZyB0aGUgdG90YWwgY291bnRzIGFuZCB0aGUgY2hlY2sgdmFsdWUuCiAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNz
IGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlcgogICAgIGVycm9yLiAgQ2FsbCB1cGRhdGV3aW5kb3coKSB0byBjcmVhdGUgYW5kL29yIHVwZGF0ZSB0aGUgd2luZG93IHN0YXRlLgogICAgIE5vdGU6IGEgbWVtb3J5IGVycm9yIGZyb20gaW5mbGF0ZSgpIGlzIG5vbi1yZWNvdmVyYWJsZS4KICAgKi8KICAvLy0tLSBSRVNUT1JFKCkgLS0tCgoKICBzdHJtLm5leHRfb3V0ID0gcHV0OwogIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDsKICBzdHJtLm5leHRfaW4gPSBuZXh0OwogIHN0cm0uYXZhaWxfaW4gPSBo
YXZlOwogIHN0YXRlLmhvbGQgPSBob2xkOwogIHN0YXRlLmJpdHMgPSBiaXRzOyAvLy0tLQoKICBpZiAoc3RhdGUud3NpemUgfHwgX291dCAhPT0gc3RybS5hdmFpbF9vdXQgJiYgc3RhdGUubW9kZSA8IEJBRCAmJiAoc3RhdGUubW9kZSA8IENIRUNLIHx8IGZsdXNoICE9PSBaX0ZJTklTSCkpIHsKICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIHsKICAgICAgc3RhdGUubW9kZSA9IE1FTTsKICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SOwog
ICAgfQogIH0KCiAgX2luIC09IHN0cm0uYXZhaWxfaW47CiAgX291dCAtPSBzdHJtLmF2YWlsX291dDsKICBzdHJtLnRvdGFsX2luICs9IF9pbjsKICBzdHJtLnRvdGFsX291dCArPSBfb3V0OwogIHN0YXRlLnRvdGFsICs9IF9vdXQ7CgogIGlmIChzdGF0ZS53cmFwICYmIF9vdXQpIHsKICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9CiAgICAvKlVQREFURShzdGF0ZS5jaGVjaywgc3RybS5uZXh0X291dCAtIF9vdXQsIF9vdXQpOyovCiAgICBzdGF0ZS5mbGFncyA/IGNyYzMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQs
IHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpOwogIH0KCiAgc3RybS5kYXRhX3R5cGUgPSBzdGF0ZS5iaXRzICsgKHN0YXRlLmxhc3QgPyA2NCA6IDApICsgKHN0YXRlLm1vZGUgPT09IFRZUEUgPyAxMjggOiAwKSArIChzdGF0ZS5tb2RlID09PSBMRU5fIHx8IHN0YXRlLm1vZGUgPT09IENPUFlfID8gMjU2IDogMCk7CgogIGlmICgoX2luID09PSAwICYmIF9vdXQgPT09IDAgfHwgZmx1c2ggPT09IFpfRklOSVNIKSAmJiByZXQgPT09
IFpfT0spIHsKICAgIHJldCA9IFpfQlVGX0VSUk9SOwogIH0KCiAgcmV0dXJuIHJldDsKfQoKZnVuY3Rpb24gaW5mbGF0ZUVuZChzdHJtKSB7CiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlCiAgLyp8fCBzdHJtLT56ZnJlZSA9PSAoZnJlZV9mdW5jKTAqLwogICkgewogICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgICB9CgogIHZhciBzdGF0ZSA9IHN0cm0uc3RhdGU7CgogIGlmIChzdGF0ZS53aW5kb3cpIHsKICAgIHN0YXRlLndpbmRvdyA9IG51bGw7CiAgfQoKICBzdHJtLnN0YXRlID0gbnVsbDsKICByZXR1cm4gWl9P
SzsKfQoKZnVuY3Rpb24gaW5mbGF0ZUdldEhlYWRlcihzdHJtLCBoZWFkKSB7CiAgdmFyIHN0YXRlOwogIC8qIGNoZWNrIHN0YXRlICovCgogIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgewogICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogIH0KCiAgc3RhdGUgPSBzdHJtLnN0YXRlOwoKICBpZiAoKHN0YXRlLndyYXAgJiAyKSA9PT0gMCkgewogICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOwogIH0KICAvKiBzYXZlIGhlYWRlciBzdHJ1Y3R1cmUgKi8KCgogIHN0YXRlLmhlYWQgPSBoZWFkOwogIGhlYWQuZG9uZSA9IGZhbHNl
OwogIHJldHVybiBaX09LOwp9CgpmdW5jdGlvbiBpbmZsYXRlU2V0RGljdGlvbmFyeShzdHJtLCBkaWN0aW9uYXJ5KSB7CiAgdmFyIGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDsKICB2YXIgc3RhdGU7CiAgdmFyIGRpY3RpZDsKICB2YXIgcmV0OwogIC8qIGNoZWNrIHN0YXRlICovCgogIGlmICghc3RybQogIC8qID09IFpfTlVMTCAqLwogIHx8ICFzdHJtLnN0YXRlCiAgLyogPT0gWl9OVUxMICovCiAgKSB7CiAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjsKICAgIH0KCiAgc3RhdGUgPSBzdHJtLnN0YXRlOwoKICBp
ZiAoc3RhdGUud3JhcCAhPT0gMCAmJiBzdGF0ZS5tb2RlICE9PSBESUNUKSB7CiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7CiAgfQogIC8qIGNoZWNrIGZvciBjb3JyZWN0IGRpY3Rpb25hcnkgaWRlbnRpZmllciAqLwoKCiAgaWYgKHN0YXRlLm1vZGUgPT09IERJQ1QpIHsKICAgIGRpY3RpZCA9IDE7CiAgICAvKiBhZGxlcjMyKDAsIG51bGwsIDApKi8KCiAgICAvKiBkaWN0aWQgPSBhZGxlcjMyKGRpY3RpZCwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovCgogICAgZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25h
cnksIGRpY3RMZW5ndGgsIDApOwoKICAgIGlmIChkaWN0aWQgIT09IHN0YXRlLmNoZWNrKSB7CiAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7CiAgICB9CiAgfQogIC8qIGNvcHkgZGljdGlvbmFyeSB0byB3aW5kb3cgdXNpbmcgdXBkYXRld2luZG93KCksIHdoaWNoIHdpbGwgYW1lbmQgdGhlCiAgIGV4aXN0aW5nIGRpY3Rpb25hcnkgaWYgYXBwcm9wcmlhdGUgKi8KCgogIHJldCA9IHVwZGF0ZXdpbmRvdyhzdHJtLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCBkaWN0TGVuZ3RoKTsKCiAgaWYgKHJldCkgewogICAgc3RhdGUubW9k
ZSA9IE1FTTsKICAgIHJldHVybiBaX01FTV9FUlJPUjsKICB9CgogIHN0YXRlLmhhdmVkaWN0ID0gMTsgLy8gVHJhY2V2KChzdGRlcnIsICJpbmZsYXRlOiAgIGRpY3Rpb25hcnkgc2V0XG4iKSk7CgogIHJldHVybiBaX09LOwp9CgpleHBvcnRzLmluZmxhdGVSZXNldCA9IGluZmxhdGVSZXNldDsKZXhwb3J0cy5pbmZsYXRlUmVzZXQyID0gaW5mbGF0ZVJlc2V0MjsKZXhwb3J0cy5pbmZsYXRlUmVzZXRLZWVwID0gaW5mbGF0ZVJlc2V0S2VlcDsKZXhwb3J0cy5pbmZsYXRlSW5pdCA9IGluZmxhdGVJbml0OwpleHBvcnRzLmluZmxh
dGVJbml0MiA9IGluZmxhdGVJbml0MjsKZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTsKZXhwb3J0cy5pbmZsYXRlRW5kID0gaW5mbGF0ZUVuZDsKZXhwb3J0cy5pbmZsYXRlR2V0SGVhZGVyID0gaW5mbGF0ZUdldEhlYWRlcjsKZXhwb3J0cy5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGluZmxhdGVTZXREaWN0aW9uYXJ5OwpleHBvcnRzLmluZmxhdGVJbmZvID0gJ3Bha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCknOwovKiBOb3QgaW1wbGVtZW50ZWQKZXhwb3J0cy5pbmZsYXRlQ29weSA9IGluZmxhdGVDb3B5OwpleHBv
cnRzLmluZmxhdGVHZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZUdldERpY3Rpb25hcnk7CmV4cG9ydHMuaW5mbGF0ZU1hcmsgPSBpbmZsYXRlTWFyazsKZXhwb3J0cy5pbmZsYXRlUHJpbWUgPSBpbmZsYXRlUHJpbWU7CmV4cG9ydHMuaW5mbGF0ZVN5bmMgPSBpbmZsYXRlU3luYzsKZXhwb3J0cy5pbmZsYXRlU3luY1BvaW50ID0gaW5mbGF0ZVN5bmNQb2ludDsKZXhwb3J0cy5pbmZsYXRlVW5kZXJtaW5lID0gaW5mbGF0ZVVuZGVybWluZTsKKi8KCn0seyIuLi91dGlscy9jb21tb24iOjMzMywiLi9hZGxlcjMyIjozMzUsIi4vY3JjMzIi
OjMzNywiLi9pbmZmYXN0IjozNDAsIi4vaW5mdHJlZXMiOjM0Mn1dLDM0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsgLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyCi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luCi8vCi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkCi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBh
dXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlcwovLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLgovLwovLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSwKLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdAovLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6Ci8vCi8vIDEuIFRoZSBvcmlnaW4g
b2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90Ci8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmUKLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmUKLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLgovLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFz
IHN1Y2gsIGFuZCBtdXN0IG5vdCBiZQovLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4KLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi4KCnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpOwoKdmFyIE1BWEJJVFMgPSAxNTsKdmFyIEVOT1VHSF9MRU5TID0gODUyOwp2YXIgRU5PVUdIX0RJU1RTID0gNTkyOyAvL3ZhciBFTk9VR0ggPSAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RT
KTsKCnZhciBDT0RFUyA9IDA7CnZhciBMRU5TID0gMTsKdmFyIERJU1RTID0gMjsKdmFyIGxiYXNlID0gWwovKiBMZW5ndGggY29kZXMgMjU3Li4yODUgYmFzZSAqLwozLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLCAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMF07CnZhciBsZXh0ID0gWwovKiBMZW5ndGggY29kZXMgMjU3Li4yODUgZXh0cmEgKi8KMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywg
MTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDE2LCA3MiwgNzhdOwp2YXIgZGJhc2UgPSBbCi8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGJhc2UgKi8KMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLCAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBdOwp2YXIgZGV4dCA9IFsKLyog
RGlzdGFuY2UgY29kZXMgMC4uMjkgZXh0cmEgKi8KMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTgsIDE4LCAxOSwgMTksIDIwLCAyMCwgMjEsIDIxLCAyMiwgMjIsIDIzLCAyMywgMjQsIDI0LCAyNSwgMjUsIDI2LCAyNiwgMjcsIDI3LCAyOCwgMjgsIDI5LCAyOSwgNjQsIDY0XTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV90YWJsZSh0eXBlLCBsZW5zLCBsZW5zX2luZGV4LCBjb2RlcywgdGFibGUsIHRhYmxlX2luZGV4LCB3b3JrLCBvcHRzKSB7CiAgdmFyIGJpdHMgPSBvcHRzLmJpdHM7IC8vaGVyZSA9IG9w
dHMuaGVyZTsgLyogdGFibGUgZW50cnkgZm9yIGR1cGxpY2F0aW9uICovCgogIHZhciBsZW4gPSAwOwogIC8qIGEgY29kZSdzIGxlbmd0aCBpbiBiaXRzICovCgogIHZhciBzeW0gPSAwOwogIC8qIGluZGV4IG9mIGNvZGUgc3ltYm9scyAqLwoKICB2YXIgbWluID0gMCwKICAgICAgbWF4ID0gMDsKICAvKiBtaW5pbXVtIGFuZCBtYXhpbXVtIGNvZGUgbGVuZ3RocyAqLwoKICB2YXIgcm9vdCA9IDA7CiAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHJvb3QgdGFibGUgKi8KCiAgdmFyIGN1cnIgPSAwOwogIC8qIG51bWJlciBv
ZiBpbmRleCBiaXRzIGZvciBjdXJyZW50IHRhYmxlICovCgogIHZhciBkcm9wID0gMDsKICAvKiBjb2RlIGJpdHMgdG8gZHJvcCBmb3Igc3ViLXRhYmxlICovCgogIHZhciBsZWZ0ID0gMDsKICAvKiBudW1iZXIgb2YgcHJlZml4IGNvZGVzIGF2YWlsYWJsZSAqLwoKICB2YXIgdXNlZCA9IDA7CiAgLyogY29kZSBlbnRyaWVzIGluIHRhYmxlIHVzZWQgKi8KCiAgdmFyIGh1ZmYgPSAwOwogIC8qIEh1ZmZtYW4gY29kZSAqLwoKICB2YXIgaW5jcjsKICAvKiBmb3IgaW5jcmVtZW50aW5nIGNvZGUsIGluZGV4ICovCgogIHZhciBmaWxs
OwogIC8qIGluZGV4IGZvciByZXBsaWNhdGluZyBlbnRyaWVzICovCgogIHZhciBsb3c7CiAgLyogbG93IGJpdHMgZm9yIGN1cnJlbnQgcm9vdCBlbnRyeSAqLwoKICB2YXIgbWFzazsKICAvKiBtYXNrIGZvciBsb3cgcm9vdCBiaXRzICovCgogIHZhciBuZXh0OwogIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIHRhYmxlICovCgogIHZhciBiYXNlID0gbnVsbDsKICAvKiBiYXNlIHZhbHVlIHRhYmxlIHRvIHVzZSAqLwoKICB2YXIgYmFzZV9pbmRleCA9IDA7IC8vICB2YXIgc2hvZXh0cmE7ICAgIC8qIGV4dHJhIGJpdHMgdGFi
bGUgdG8gdXNlICovCgogIHZhciBlbmQ7CiAgLyogdXNlIGJhc2UgYW5kIGV4dHJhIGZvciBzeW1ib2wgPiBlbmQgKi8KCiAgdmFyIGNvdW50ID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovCgogIHZhciBvZmZzID0gbmV3IHV0aWxzLkJ1ZjE2KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgIC8qIG9mZnNldHMgaW4gdGFibGUgZm9yIGVhY2ggbGVuZ3RoICovCgogIHZhciBleHRyYSA9IG51bGw7CiAgdmFyIGV4
dHJhX2luZGV4ID0gMDsKICB2YXIgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsKICAvKgogICBQcm9jZXNzIGEgc2V0IG9mIGNvZGUgbGVuZ3RocyB0byBjcmVhdGUgYSBjYW5vbmljYWwgSHVmZm1hbiBjb2RlLiAgVGhlCiAgIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIEVhY2ggbGVuZ3RoIGNvcnJlc3BvbmRzIHRvIHRoZQogICBzeW1ib2xzIDAuLmNvZGVzLTEuICBUaGUgSHVmZm1hbiBjb2RlIGlzIGdlbmVyYXRlZCBieSBmaXJzdCBzb3J0aW5nIHRoZQogICBzeW1ib2xzIGJ5IGxlbmd0aCBmcm9t
IHNob3J0IHRvIGxvbmcsIGFuZCByZXRhaW5pbmcgdGhlIHN5bWJvbCBvcmRlcgogICBmb3IgY29kZXMgd2l0aCBlcXVhbCBsZW5ndGhzLiAgVGhlbiB0aGUgY29kZSBzdGFydHMgd2l0aCBhbGwgemVybyBiaXRzCiAgIGZvciB0aGUgZmlyc3QgY29kZSBvZiB0aGUgc2hvcnRlc3QgbGVuZ3RoLCBhbmQgdGhlIGNvZGVzIGFyZSBpbnRlZ2VyCiAgIGluY3JlbWVudHMgZm9yIHRoZSBzYW1lIGxlbmd0aCwgYW5kIHplcm9zIGFyZSBhcHBlbmRlZCBhcyB0aGUgbGVuZ3RoCiAgIGluY3JlYXNlcy4gIEZvciB0aGUgZGVmbGF0ZSBmb3Jt
YXQsIHRoZXNlIGJpdHMgYXJlIHN0b3JlZCBiYWNrd2FyZHMKICAgZnJvbSB0aGVpciBtb3JlIG5hdHVyYWwgaW50ZWdlciBpbmNyZW1lbnQgb3JkZXJpbmcsIGFuZCBzbyB3aGVuIHRoZQogICBkZWNvZGluZyB0YWJsZXMgYXJlIGJ1aWx0IGluIHRoZSBsYXJnZSBsb29wIGJlbG93LCB0aGUgaW50ZWdlciBjb2RlcwogICBhcmUgaW5jcmVtZW50ZWQgYmFja3dhcmRzLgogICAgVGhpcyByb3V0aW5lIGFzc3VtZXMsIGJ1dCBkb2VzIG5vdCBjaGVjaywgdGhhdCBhbGwgb2YgdGhlIGVudHJpZXMgaW4KICAgbGVuc1tdIGFyZSBpbiB0
aGUgcmFuZ2UgMC4uTUFYQklUUy4gIFRoZSBjYWxsZXIgbXVzdCBhc3N1cmUgdGhpcy4KICAgMS4uTUFYQklUUyBpcyBpbnRlcnByZXRlZCBhcyB0aGF0IGNvZGUgbGVuZ3RoLiAgemVybyBtZWFucyB0aGF0IHRoYXQKICAgc3ltYm9sIGRvZXMgbm90IG9jY3VyIGluIHRoaXMgY29kZS4KICAgIFRoZSBjb2RlcyBhcmUgc29ydGVkIGJ5IGNvbXB1dGluZyBhIGNvdW50IG9mIGNvZGVzIGZvciBlYWNoIGxlbmd0aCwKICAgY3JlYXRpbmcgZnJvbSB0aGF0IGEgdGFibGUgb2Ygc3RhcnRpbmcgaW5kaWNlcyBmb3IgZWFjaCBsZW5ndGgg
aW4gdGhlCiAgIHNvcnRlZCB0YWJsZSwgYW5kIHRoZW4gZW50ZXJpbmcgdGhlIHN5bWJvbHMgaW4gb3JkZXIgaW4gdGhlIHNvcnRlZAogICB0YWJsZS4gIFRoZSBzb3J0ZWQgdGFibGUgaXMgd29ya1tdLCB3aXRoIHRoYXQgc3BhY2UgYmVpbmcgcHJvdmlkZWQgYnkKICAgdGhlIGNhbGxlci4KICAgIFRoZSBsZW5ndGggY291bnRzIGFyZSB1c2VkIGZvciBvdGhlciBwdXJwb3NlcyBhcyB3ZWxsLCBpLmUuIGZpbmRpbmcKICAgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gbGVuZ3RoIGNvZGVzLCBkZXRlcm1pbmluZyBpZiB0aGVyZSBh
cmUgYW55CiAgIGNvZGVzIGF0IGFsbCwgY2hlY2tpbmcgZm9yIGEgdmFsaWQgc2V0IG9mIGxlbmd0aHMsIGFuZCBsb29raW5nIGFoZWFkCiAgIGF0IGxlbmd0aCBjb3VudHMgdG8gZGV0ZXJtaW5lIHN1Yi10YWJsZSBzaXplcyB3aGVuIGJ1aWxkaW5nIHRoZQogICBkZWNvZGluZyB0YWJsZXMuCiAgICovCgogIC8qIGFjY3VtdWxhdGUgbGVuZ3RocyBmb3IgY29kZXMgKGFzc3VtZXMgbGVuc1tdIGFsbCBpbiAwLi5NQVhCSVRTKSAqLwoKICBmb3IgKGxlbiA9IDA7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykgewogICAgY291bnRbbGVu
XSA9IDA7CiAgfQoKICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykgewogICAgY291bnRbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rKzsKICB9CiAgLyogYm91bmQgY29kZSBsZW5ndGhzLCBmb3JjZSByb290IHRvIGJlIHdpdGhpbiBjb2RlIGxlbmd0aHMgKi8KCgogIHJvb3QgPSBiaXRzOwoKICBmb3IgKG1heCA9IE1BWEJJVFM7IG1heCA+PSAxOyBtYXgtLSkgewogICAgaWYgKGNvdW50W21heF0gIT09IDApIHsKICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICBpZiAocm9vdCA+IG1heCkgewogICAgcm9vdCA9IG1h
eDsKICB9CgogIGlmIChtYXggPT09IDApIHsKICAgIC8qIG5vIHN5bWJvbHMgdG8gY29kZSBhdCBhbGwgKi8KICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDsgIC8vaGVyZS5vcCA9ICh2YXIgY2hhcik2NDsgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqLwogICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsgICAvL2hlcmUuYml0cyA9ICh2YXIgY2hhcikxOwogICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7ICAgLy9oZXJlLnZhbCA9ICh2YXIgc2hvcnQpMDsKICAg
IHRhYmxlW3RhYmxlX2luZGV4KytdID0gMSA8PCAyNCB8IDY0IDw8IDE2IHwgMDsgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0OwogICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTsKICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwOwoKICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gMSA8PCAyNCB8IDY0IDw8IDE2IHwgMDsKICAgIG9wdHMuYml0cyA9IDE7CiAgICByZXR1cm4gMDsKICAgIC8qIG5vIHN5bWJvbHMsIGJ1dCB3YWl0IGZvciBkZWNvZGluZyB0byByZXBvcnQg
ZXJyb3IgKi8KICB9CgogIGZvciAobWluID0gMTsgbWluIDwgbWF4OyBtaW4rKykgewogICAgaWYgKGNvdW50W21pbl0gIT09IDApIHsKICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICBpZiAocm9vdCA8IG1pbikgewogICAgcm9vdCA9IG1pbjsKICB9CiAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovCgoKICBsZWZ0ID0gMTsKCiAgZm9yIChsZW4gPSAxOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHsKICAgIGxlZnQgPDw9IDE7CiAgICBsZWZ0IC09IGNvdW50W2xl
bl07CgogICAgaWYgKGxlZnQgPCAwKSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KICAgIC8qIG92ZXItc3Vic2NyaWJlZCAqLwoKICB9CgogIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PT0gQ09ERVMgfHwgbWF4ICE9PSAxKSkgewogICAgcmV0dXJuIC0xOwogICAgLyogaW5jb21wbGV0ZSBzZXQgKi8KICB9CiAgLyogZ2VuZXJhdGUgb2Zmc2V0cyBpbnRvIHN5bWJvbCB0YWJsZSBmb3IgZWFjaCBsZW5ndGggZm9yIHNvcnRpbmcgKi8KCgogIG9mZnNbMV0gPSAwOwoKICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisr
KSB7CiAgICBvZmZzW2xlbiArIDFdID0gb2Zmc1tsZW5dICsgY291bnRbbGVuXTsKICB9CiAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqLwoKCiAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHsKICAgIGlmIChsZW5zW2xlbnNfaW5kZXggKyBzeW1dICE9PSAwKSB7CiAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTsKICAgIH0KICB9CiAgLyoKICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxl
cy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nCiAgIGZpbGxlZCBpcyBhdCBuZXh0IGFuZCBoYXMgY3VyciBpbmRleCBiaXRzLiAgVGhlIGNvZGUgYmVpbmcgdXNlZCBpcyBodWZmCiAgIHdpdGggbGVuZ3RoIGxlbi4gIFRoYXQgY29kZSBpcyBjb252ZXJ0ZWQgdG8gYW4gaW5kZXggYnkgZHJvcHBpbmcgZHJvcAogICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsCiAgIHRob3NlIHRvcCBkcm9wICsgY3VyciAtIGxlbiBiaXRzIGFyZSBpbmNy
ZW1lbnRlZCB0aHJvdWdoIGFsbCB2YWx1ZXMgdG8KICAgZmlsbCB0aGUgdGFibGUgd2l0aCByZXBsaWNhdGVkIGVudHJpZXMuCiAgICByb290IGlzIHRoZSBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgdGhlIHJvb3QgdGFibGUuICBXaGVuIGxlbiBleGNlZWRzCiAgIHJvb3QsIHN1Yi10YWJsZXMgYXJlIGNyZWF0ZWQgcG9pbnRlZCB0byBieSB0aGUgcm9vdCBlbnRyeSB3aXRoIGFuIGluZGV4CiAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhCiAg
IG5ldyBzdWItdGFibGUgc2hvdWxkIGJlIHN0YXJ0ZWQuICBkcm9wIGlzIHplcm8gd2hlbiB0aGUgcm9vdCB0YWJsZSBpcwogICBiZWluZyBmaWxsZWQsIGFuZCBkcm9wIGlzIHJvb3Qgd2hlbiBzdWItdGFibGVzIGFyZSBiZWluZyBmaWxsZWQuCiAgICBXaGVuIGEgbmV3IHN1Yi10YWJsZSBpcyBuZWVkZWQsIGl0IGlzIG5lY2Vzc2FyeSB0byBsb29rIGFoZWFkIGluIHRoZQogICBjb2RlIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHdoYXQgc2l6ZSBzdWItdGFibGUgaXMgbmVlZGVkLiAgVGhlIGxlbmd0aAogICBjb3VudHMgYXJlIHVz
ZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZQogICBlbnRlcmVkIGluIHRoZSB0YWJsZXMuCiAgICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZQogICBwcm92aWRlZCAqdGFibGUgc3BhY2UuICBJdCBpcyBjaGVja2VkIGZvciBMRU5TIGFuZCBESVNUIHRhYmxlcyBhZ2FpbnN0CiAgIHRoZSBjb25zdGFudHMgRU5PVUdIX0xFTlMgYW5kIEVOT1VHSF9ESVNUUyB0byBndWFyZCBhZ2FpbnN0IGNoYW5n
ZXMgaW4KICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaAogICBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW4KICAgYWxsIGNvZGVzIG9mIGxlbmd0aCBtYXgsIGkuZS4gYWxsIGNvZGVzLCBoYXZlIGJlZW4gcHJvY2Vzc2VkLiAgVGhpcwogICByb3V0aW5lIHBlcm1pdHMgaW5jb21wbGV0ZSBjb2Rlcywgc28gYW5vdGhlciBsb29wIGFm
dGVyIHRoaXMgb25lIGZpbGxzCiAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy4KICAgKi8KCiAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi8KICAvLyBwb29yIG1hbiBvcHRpbWl6YXRpb24gLSB1c2UgaWYtZWxzZSBpbnN0ZWFkIG9mIHN3aXRjaCwKICAvLyB0byBhdm9pZCBkZW9wdHMgaW4gb2xkIHY4CgoKICBpZiAodHlwZSA9PT0gQ09ERVMpIHsKICAgIGJhc2UgPSBleHRyYSA9IHdvcms7CiAgICAvKiBkdW1teSB2YWx1ZS0tbm90IHVzZWQgKi8KCiAgICBl
bmQgPSAxOTsKICB9IGVsc2UgaWYgKHR5cGUgPT09IExFTlMpIHsKICAgIGJhc2UgPSBsYmFzZTsKICAgIGJhc2VfaW5kZXggLT0gMjU3OwogICAgZXh0cmEgPSBsZXh0OwogICAgZXh0cmFfaW5kZXggLT0gMjU3OwogICAgZW5kID0gMjU2OwogIH0gZWxzZSB7CiAgICAvKiBESVNUUyAqLwogICAgYmFzZSA9IGRiYXNlOwogICAgZXh0cmEgPSBkZXh0OwogICAgZW5kID0gLTE7CiAgfQogIC8qIGluaXRpYWxpemUgb3B0cyBmb3IgbG9vcCAqLwoKCiAgaHVmZiA9IDA7CiAgLyogc3RhcnRpbmcgY29kZSAqLwoKICBzeW0gPSAwOwog
IC8qIHN0YXJ0aW5nIGNvZGUgc3ltYm9sICovCgogIGxlbiA9IG1pbjsKICAvKiBzdGFydGluZyBjb2RlIGxlbmd0aCAqLwoKICBuZXh0ID0gdGFibGVfaW5kZXg7CiAgLyogY3VycmVudCB0YWJsZSB0byBmaWxsIGluICovCgogIGN1cnIgPSByb290OwogIC8qIGN1cnJlbnQgdGFibGUgaW5kZXggYml0cyAqLwoKICBkcm9wID0gMDsKICAvKiBjdXJyZW50IGJpdHMgdG8gZHJvcCBmcm9tIGNvZGUgZm9yIGluZGV4ICovCgogIGxvdyA9IC0xOwogIC8qIHRyaWdnZXIgbmV3IHN1Yi10YWJsZSB3aGVuIGxlbiA+IHJvb3QgKi8KCiAg
dXNlZCA9IDEgPDwgcm9vdDsKICAvKiB1c2Ugcm9vdCB0YWJsZSBlbnRyaWVzICovCgogIG1hc2sgPSB1c2VkIC0gMTsKICAvKiBtYXNrIGZvciBjb21wYXJpbmcgbG93ICovCgogIC8qIGNoZWNrIGF2YWlsYWJsZSB0YWJsZSBzcGFjZSAqLwoKICBpZiAodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMgfHwgdHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykgewogICAgcmV0dXJuIDE7CiAgfQogIC8qIHByb2Nlc3MgYWxsIGNvZGVzIGFuZCBtYWtlIHRhYmxlIGVudHJpZXMgKi8KCgogIGZvciAo
OzspIHsKICAgIC8qIGNyZWF0ZSB0YWJsZSBlbnRyeSAqLwogICAgaGVyZV9iaXRzID0gbGVuIC0gZHJvcDsKCiAgICBpZiAod29ya1tzeW1dIDwgZW5kKSB7CiAgICAgIGhlcmVfb3AgPSAwOwogICAgICBoZXJlX3ZhbCA9IHdvcmtbc3ltXTsKICAgIH0gZWxzZSBpZiAod29ya1tzeW1dID4gZW5kKSB7CiAgICAgIGhlcmVfb3AgPSBleHRyYVtleHRyYV9pbmRleCArIHdvcmtbc3ltXV07CiAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTsKICAgIH0gZWxzZSB7CiAgICAgIGhlcmVfb3AgPSAzMiAr
IDY0OwogICAgICAvKiBlbmQgb2YgYmxvY2sgKi8KCiAgICAgIGhlcmVfdmFsID0gMDsKICAgIH0KICAgIC8qIHJlcGxpY2F0ZSBmb3IgdGhvc2UgaW5kaWNlcyB3aXRoIGxvdyBsZW4gYml0cyBlcXVhbCB0byBodWZmICovCgoKICAgIGluY3IgPSAxIDw8IGxlbiAtIGRyb3A7CiAgICBmaWxsID0gMSA8PCBjdXJyOwogICAgbWluID0gZmlsbDsKICAgIC8qIHNhdmUgb2Zmc2V0IHRvIG5leHQgdGFibGUgKi8KCiAgICBkbyB7CiAgICAgIGZpbGwgLT0gaW5jcjsKICAgICAgdGFibGVbbmV4dCArIChodWZmID4+IGRyb3ApICsgZmls
bF0gPSBoZXJlX2JpdHMgPDwgMjQgfCBoZXJlX29wIDw8IDE2IHwgaGVyZV92YWwgfCAwOwogICAgfSB3aGlsZSAoZmlsbCAhPT0gMCk7CiAgICAvKiBiYWNrd2FyZHMgaW5jcmVtZW50IHRoZSBsZW4tYml0IGNvZGUgaHVmZiAqLwoKCiAgICBpbmNyID0gMSA8PCBsZW4gLSAxOwoKICAgIHdoaWxlIChodWZmICYgaW5jcikgewogICAgICBpbmNyID4+PSAxOwogICAgfQoKICAgIGlmIChpbmNyICE9PSAwKSB7CiAgICAgIGh1ZmYgJj0gaW5jciAtIDE7CiAgICAgIGh1ZmYgKz0gaW5jcjsKICAgIH0gZWxzZSB7CiAgICAgIGh1ZmYg
PSAwOwogICAgfQogICAgLyogZ28gdG8gbmV4dCBzeW1ib2wsIHVwZGF0ZSBjb3VudCwgbGVuICovCgoKICAgIHN5bSsrOwoKICAgIGlmICgtLWNvdW50W2xlbl0gPT09IDApIHsKICAgICAgaWYgKGxlbiA9PT0gbWF4KSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGxlbiA9IGxlbnNbbGVuc19pbmRleCArIHdvcmtbc3ltXV07CiAgICB9CiAgICAvKiBjcmVhdGUgbmV3IHN1Yi10YWJsZSBpZiBuZWVkZWQgKi8KCgogICAgaWYgKGxlbiA+IHJvb3QgJiYgKGh1ZmYgJiBtYXNrKSAhPT0gbG93KSB7CiAgICAgIC8qIGlm
IGZpcnN0IHRpbWUsIHRyYW5zaXRpb24gdG8gc3ViLXRhYmxlcyAqLwogICAgICBpZiAoZHJvcCA9PT0gMCkgewogICAgICAgIGRyb3AgPSByb290OwogICAgICB9CiAgICAgIC8qIGluY3JlbWVudCBwYXN0IGxhc3QgdGFibGUgKi8KCgogICAgICBuZXh0ICs9IG1pbjsKICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovCgogICAgICAvKiBkZXRlcm1pbmUgbGVuZ3RoIG9mIG5leHQgdGFibGUgKi8KCiAgICAgIGN1cnIgPSBsZW4gLSBkcm9wOwogICAgICBsZWZ0ID0gMSA8PCBjdXJyOwoKICAgICAgd2hpbGUgKGN1cnIg
KyBkcm9wIDwgbWF4KSB7CiAgICAgICAgbGVmdCAtPSBjb3VudFtjdXJyICsgZHJvcF07CgogICAgICAgIGlmIChsZWZ0IDw9IDApIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgY3VycisrOwogICAgICAgIGxlZnQgPDw9IDE7CiAgICAgIH0KICAgICAgLyogY2hlY2sgZm9yIGVub3VnaCBzcGFjZSAqLwoKCiAgICAgIHVzZWQgKz0gMSA8PCBjdXJyOwoKICAgICAgaWYgKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TIHx8IHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMp
IHsKICAgICAgICByZXR1cm4gMTsKICAgICAgfQogICAgICAvKiBwb2ludCBlbnRyeSBpbiByb290IHRhYmxlIHRvIHN1Yi10YWJsZSAqLwoKCiAgICAgIGxvdyA9IGh1ZmYgJiBtYXNrOwogICAgICAvKnRhYmxlLm9wW2xvd10gPSBjdXJyOwogICAgICB0YWJsZS5iaXRzW2xvd10gPSByb290OwogICAgICB0YWJsZS52YWxbbG93XSA9IG5leHQgLSBvcHRzLnRhYmxlX2luZGV4OyovCgogICAgICB0YWJsZVtsb3ddID0gcm9vdCA8PCAyNCB8IGN1cnIgPDwgMTYgfCBuZXh0IC0gdGFibGVfaW5kZXggfCAwOwogICAgfQogIH0KICAv
KiBmaWxsIGluIHJlbWFpbmluZyB0YWJsZSBlbnRyeSBpZiBjb2RlIGlzIGluY29tcGxldGUgKGd1YXJhbnRlZWQgdG8gaGF2ZQogICBhdCBtb3N0IG9uZSByZW1haW5pbmcgZW50cnksIHNpbmNlIGlmIHRoZSBjb2RlIGlzIGluY29tcGxldGUsIHRoZQogICBtYXhpbXVtIGNvZGUgbGVuZ3RoIHRoYXQgd2FzIGFsbG93ZWQgdG8gZ2V0IHRoaXMgZmFyIGlzIG9uZSBiaXQpICovCgoKICBpZiAoaHVmZiAhPT0gMCkgewogICAgLy90YWJsZS5vcFtuZXh0ICsgaHVmZl0gPSA2NDsgICAgICAgICAgICAvKiBpbnZhbGlkIGNvZGUgbWFy
a2VyICovCiAgICAvL3RhYmxlLmJpdHNbbmV4dCArIGh1ZmZdID0gbGVuIC0gZHJvcDsKICAgIC8vdGFibGUudmFsW25leHQgKyBodWZmXSA9IDA7CiAgICB0YWJsZVtuZXh0ICsgaHVmZl0gPSBsZW4gLSBkcm9wIDw8IDI0IHwgNjQgPDwgMTYgfCAwOwogIH0KICAvKiBzZXQgcmV0dXJuIHBhcmFtZXRlcnMgKi8KICAvL29wdHMudGFibGVfaW5kZXggKz0gdXNlZDsKCgogIG9wdHMuYml0cyA9IHJvb3Q7CiAgcmV0dXJuIDA7Cn07Cgp9LHsiLi4vdXRpbHMvY29tbW9uIjozMzN9XSwzNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxl
LGV4cG9ydHMpewondXNlIHN0cmljdCc7IC8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlcgovLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpbgovLwovLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZAovLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXMKLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhp
cyBzb2Z0d2FyZS4KLy8KLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsCi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXQKLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOgovLwovLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdAovLyAgIGNsYWlt
IHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlCi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlCi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC4KLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmUKLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29m
dHdhcmUuCi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uCgptb2R1bGUuZXhwb3J0cyA9IHsKICAyOiAnbmVlZCBkaWN0aW9uYXJ5JywKCiAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi8KICAxOiAnc3RyZWFtIGVuZCcsCgogIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovCiAgMDogJycsCgogIC8qIFpfT0sgICAgICAgICAgICAgIDAgICovCiAgJy0xJzogJ2ZpbGUgZXJyb3InLAoKICAvKiBaX0VSUk5PICAgICAgICAgKC0xKSAqLwog
ICctMic6ICdzdHJlYW0gZXJyb3InLAoKICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqLwogICctMyc6ICdkYXRhIGVycm9yJywKCiAgLyogWl9EQVRBX0VSUk9SICAgICgtMykgKi8KICAnLTQnOiAnaW5zdWZmaWNpZW50IG1lbW9yeScsCgogIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovCiAgJy01JzogJ2J1ZmZlciBlcnJvcicsCgogIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovCiAgJy02JzogJ2luY29tcGF0aWJsZSB2ZXJzaW9uJwogIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovCgp9OwoKfSx7fV0sMzQ0OltmdW5j
dGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOyAvLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXIKLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW4KLy8KLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWQKLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzCi8vIGFyaXNpbmcg
ZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuCi8vCi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLAovLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0Ci8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczoKLy8KLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3Ug
bXVzdCBub3QKLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZQovLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZQovLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuCi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlCi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVp
bmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLgovLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLgoKLyogZXNsaW50LWRpc2FibGUgc3BhY2UtdW5hcnktb3BzICovCgp2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb24nKTsKLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki8KCi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovCi8vdmFyIFpfRklMVEVSRUQgICAgICAgICAgPSAxOwovL3ZhciBaX0hVRkZNQU5fT05MWSAgICAgID0gMjsKLy92YXIgWl9STEUgICAgICAgICAgICAgICA9IDM7CgoKdmFyIFpfRklYRUQgPSA0OyAvL3ZhciBaX0RFRkFVTFRfU1RSQVRFR1kgID0gMDsKCi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi8KCnZhciBaX0JJTkFSWSA9IDA7CnZhciBaX1RFWFQgPSAxOyAvL3ZhciBa
X0FTQ0lJICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFQKCnZhciBaX1VOS05PV04gPSAyOwovKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qLwoKZnVuY3Rpb24gemVybyhidWYpIHsKICB2YXIgbGVuID0gYnVmLmxlbmd0aDsKCiAgd2hpbGUgKC0tbGVuID49IDApIHsKICAgIGJ1ZltsZW5dID0gMDsKICB9Cn0gLy8gRnJvbSB6dXRpbC5oCgoKdmFyIFNUT1JFRF9CTE9DSyA9IDA7CnZhciBTVEFUSUNfVFJFRVMgPSAxOwp2YXIgRFlO
X1RSRUVTID0gMjsKLyogVGhlIHRocmVlIGtpbmRzIG9mIGJsb2NrIHR5cGUgKi8KCnZhciBNSU5fTUFUQ0ggPSAzOwp2YXIgTUFYX01BVENIID0gMjU4OwovKiBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBtYXRjaCBsZW5ndGhzICovCi8vIEZyb20gZGVmbGF0ZS5oCgovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogSW50ZXJuYWwgY29tcHJlc3Npb24gc3RhdGUuCiAqLwoKdmFyIExFTkdUSF9DT0RFUyA9IDI5OwovKiBudW1iZXIg
b2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi8KCnZhciBMSVRFUkFMUyA9IDI1NjsKLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovCgp2YXIgTF9DT0RFUyA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUzsKLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovCgp2YXIgRF9DT0RFUyA9IDMwOwovKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi8KCnZhciBCTF9DT0RFUyA9IDE5
OwovKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi8KCnZhciBIRUFQX1NJWkUgPSAyICogTF9DT0RFUyArIDE7Ci8qIG1heGltdW0gaGVhcCBzaXplICovCgp2YXIgTUFYX0JJVFMgPSAxNTsKLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovCgp2YXIgQnVmX3NpemUgPSAxNjsKLyogc2l6ZSBvZiBiaXQgYnVmZmVyIGluIGJpX2J1ZiAqLwoKLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09CiAqIENvbnN0YW50cwogKi8KCnZhciBNQVhfQkxfQklUUyA9IDc7Ci8qIEJpdCBsZW5ndGggY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CTF9CSVRTIGJpdHMgKi8KCnZhciBFTkRfQkxPQ0sgPSAyNTY7Ci8qIGVuZCBvZiBibG9jayBsaXRlcmFsIGNvZGUgKi8KCnZhciBSRVBfM182ID0gMTY7Ci8qIHJlcGVhdCBwcmV2aW91cyBiaXQgbGVuZ3RoIDMtNiB0aW1lcyAoMiBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi8KCnZhciBSRVBaXzNfMTAgPSAxNzsKLyogcmVwZWF0IGEgemVybyBsZW5ndGggMy0x
MCB0aW1lcyAgKDMgYml0cyBvZiByZXBlYXQgY291bnQpICovCgp2YXIgUkVQWl8xMV8xMzggPSAxODsKLyogcmVwZWF0IGEgemVybyBsZW5ndGggMTEtMTM4IHRpbWVzICAoNyBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi8KCi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovCgp2YXIgZXh0cmFfbGJpdHMgPQovKiBleHRyYSBiaXRzIGZvciBlYWNoIGxlbmd0aCBjb2RlICovClswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAxLCAxLCAxLCAyLCAyLCAyLCAyLCAzLCAzLCAzLCAz
LCA0LCA0LCA0LCA0LCA1LCA1LCA1LCA1LCAwXTsKdmFyIGV4dHJhX2RiaXRzID0KLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovClswLCAwLCAwLCAwLCAxLCAxLCAyLCAyLCAzLCAzLCA0LCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA4LCA4LCA5LCA5LCAxMCwgMTAsIDExLCAxMSwgMTIsIDEyLCAxMywgMTNdOwp2YXIgZXh0cmFfYmxiaXRzID0KLyogZXh0cmEgYml0cyBmb3IgZWFjaCBiaXQgbGVuZ3RoIGNvZGUgKi8KWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDIs
IDMsIDddOwp2YXIgYmxfb3JkZXIgPSBbMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNV07Ci8qIGVzbGludC1lbmFibGUgY29tbWEtc3BhY2luZyxhcnJheS1icmFja2V0LXNwYWNpbmcgKi8KCi8qIFRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzIGFyZSBzZW50IGluIG9yZGVyIG9mIGRlY3JlYXNpbmcKICogcHJvYmFiaWxpdHksIHRvIGF2b2lkIHRyYW5zbWl0dGluZyB0aGUgbGVuZ3RocyBmb3IgdW51c2VkIGJpdCBsZW5ndGggY29kZXMuCiAq
LwoKLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIExvY2FsIGRhdGEuIFRoZXNlIGFyZSBpbml0aWFsaXplZCBvbmx5IG9uY2UuCiAqLwovLyBXZSBwcmUtZmlsbCBhcnJheXMgd2l0aCAwIHRvIGF2b2lkIHVuaW5pdGlhbGl6ZWQgZ2FwcwoKdmFyIERJU1RfQ09ERV9MRU4gPSA1MTI7Ci8qIHNlZSBkZWZpbml0aW9uIG9mIGFycmF5IGRpc3RfY29kZSBiZWxvdyAqLwovLyAhISEhIFVzZSBmbGF0IGFycmF5IGluc3RlYWQgb2Ygc3Ry
dWN0dXJlLCBGcmVxID0gaSoyLCBMZW4gPSBpKjIrMQoKdmFyIHN0YXRpY19sdHJlZSA9IG5ldyBBcnJheSgoTF9DT0RFUyArIDIpICogMik7Cnplcm8oc3RhdGljX2x0cmVlKTsKLyogVGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUuIFNpbmNlIHRoZSBiaXQgbGVuZ3RocyBhcmUgaW1wb3NlZCwgdGhlcmUgaXMgbm8KICogbmVlZCBmb3IgdGhlIExfQ09ERVMgZXh0cmEgY29kZXMgdXNlZCBkdXJpbmcgaGVhcCBjb25zdHJ1Y3Rpb24uIEhvd2V2ZXIKICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBj
YW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0CiAqIGJlbG93KS4KICovCgp2YXIgc3RhdGljX2R0cmVlID0gbmV3IEFycmF5KERfQ09ERVMgKiAyKTsKemVybyhzdGF0aWNfZHRyZWUpOwovKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUuIChBY3R1YWxseSBhIHRyaXZpYWwgdHJlZSBzaW5jZSBhbGwgY29kZXMgdXNlCiAqIDUgYml0cy4pCiAqLwoKdmFyIF9kaXN0X2NvZGUgPSBuZXcgQXJyYXkoRElTVF9DT0RFX0xFTik7Cgp6ZXJvKF9kaXN0X2NvZGUpOwovKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMg
Y29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzCiAqIDMgLi4gMjU4LCB0aGUgbGFzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIHRvcCA4IGJpdHMgb2YKICogdGhlIDE1IGJpdCBkaXN0YW5jZXMuCiAqLwoKdmFyIF9sZW5ndGhfY29kZSA9IG5ldyBBcnJheShNQVhfTUFUQ0ggLSBNSU5fTUFUQ0ggKyAxKTsKCnplcm8oX2xlbmd0aF9jb2RlKTsKLyogbGVuZ3RoIGNvZGUgZm9yIGVhY2ggbm9ybWFsaXplZCBtYXRjaCBsZW5ndGggKDAgPT0gTUlOX01BVENIKSAqLwoKdmFyIGJhc2VfbGVuZ3RoID0gbmV3IEFycmF5KExF
TkdUSF9DT0RFUyk7Cnplcm8oYmFzZV9sZW5ndGgpOwovKiBGaXJzdCBub3JtYWxpemVkIGxlbmd0aCBmb3IgZWFjaCBjb2RlICgwID0gTUlOX01BVENIKSAqLwoKdmFyIGJhc2VfZGlzdCA9IG5ldyBBcnJheShEX0NPREVTKTsKemVybyhiYXNlX2Rpc3QpOwovKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqLwoKZnVuY3Rpb24gU3RhdGljVHJlZURlc2Moc3RhdGljX3RyZWUsIGV4dHJhX2JpdHMsIGV4dHJhX2Jhc2UsIGVsZW1zLCBtYXhfbGVuZ3RoKSB7CiAgdGhp
cy5zdGF0aWNfdHJlZSA9IHN0YXRpY190cmVlOwogIC8qIHN0YXRpYyB0cmVlIG9yIE5VTEwgKi8KCiAgdGhpcy5leHRyYV9iaXRzID0gZXh0cmFfYml0czsKICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqLwoKICB0aGlzLmV4dHJhX2Jhc2UgPSBleHRyYV9iYXNlOwogIC8qIGJhc2UgaW5kZXggZm9yIGV4dHJhX2JpdHMgKi8KCiAgdGhpcy5lbGVtcyA9IGVsZW1zOwogIC8qIG1heCBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIHRyZWUgKi8KCiAgdGhpcy5tYXhfbGVuZ3RoID0gbWF4X2xlbmd0aDsKICAv
KiBtYXggYml0IGxlbmd0aCBmb3IgdGhlIGNvZGVzICovCiAgLy8gc2hvdyBpZiBgc3RhdGljX3RyZWVgIGhhcyBkYXRhIG9yIGR1bW15IC0gbmVlZGVkIGZvciBtb25vbW9ycGhpYyBvYmplY3RzCgogIHRoaXMuaGFzX3N0cmVlID0gc3RhdGljX3RyZWUgJiYgc3RhdGljX3RyZWUubGVuZ3RoOwp9Cgp2YXIgc3RhdGljX2xfZGVzYzsKdmFyIHN0YXRpY19kX2Rlc2M7CnZhciBzdGF0aWNfYmxfZGVzYzsKCmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHsKICB0aGlzLmR5bl90cmVlID0gZHluX3RyZWU7CiAg
LyogdGhlIGR5bmFtaWMgdHJlZSAqLwoKICB0aGlzLm1heF9jb2RlID0gMDsKICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi8KCiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7CiAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi8KfQoKZnVuY3Rpb24gZF9jb2RlKGRpc3QpIHsKICByZXR1cm4gZGlzdCA8IDI1NiA/IF9kaXN0X2NvZGVbZGlzdF0gOiBfZGlzdF9jb2RlWzI1NiArIChkaXN0ID4+PiA3KV07Cn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLgogKiBJTiBhc3NlcnRpb246IHRoZXJlIGlzIGVub3VnaCByb29tIGluIHBlbmRpbmdCdWYuCiAqLwoKCmZ1bmN0aW9uIHB1dF9zaG9ydChzLCB3KSB7CiAgLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpOwogIC8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh1c2gpKHcpID4+IDgpKTsKICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHcgJiAweGZmOwogIHMucGVu
ZGluZ19idWZbcy5wZW5kaW5nKytdID0gdyA+Pj4gOCAmIDB4ZmY7Cn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIFNlbmQgYSB2YWx1ZSBvbiBhIGdpdmVuIG51bWJlciBvZiBiaXRzLgogKiBJTiBhc3NlcnRpb246IGxlbmd0aCA8PSAxNiBhbmQgdmFsdWUgZml0cyBpbiBsZW5ndGggYml0cy4KICovCgoKZnVuY3Rpb24gc2VuZF9iaXRzKHMsIHZhbHVlLCBsZW5ndGgpIHsKICBpZiAocy5iaV92YWxpZCA+IEJ1Zl9zaXplIC0g
bGVuZ3RoKSB7CiAgICBzLmJpX2J1ZiB8PSB2YWx1ZSA8PCBzLmJpX3ZhbGlkICYgMHhmZmZmOwogICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTsKICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gQnVmX3NpemUgLSBzLmJpX3ZhbGlkOwogICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTsKICB9IGVsc2UgewogICAgcy5iaV9idWYgfD0gdmFsdWUgPDwgcy5iaV92YWxpZCAmIDB4ZmZmZjsKICAgIHMuYmlfdmFsaWQgKz0gbGVuZ3RoOwogIH0KfQoKZnVuY3Rpb24gc2VuZF9jb2RlKHMsIGMsIHRyZWUpIHsKICBzZW5kX2Jp
dHMocywgdHJlZVtjICogMl0KICAvKi5Db2RlKi8KICAsIHRyZWVbYyAqIDIgKyAxXQogIC8qLkxlbiovCiAgKTsKfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogUmV2ZXJzZSB0aGUgZmlyc3QgbGVuIGJpdHMgb2YgYSBjb2RlLCB1c2luZyBzdHJhaWdodGZvcndhcmQgY29kZSAoYSBmYXN0ZXIKICogbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKQogKiBJTiBhc3NlcnRpb246IDEgPD0gbGVuIDw9IDE1CiAqLwoKCmZ1bmN0aW9u
IGJpX3JldmVyc2UoY29kZSwgbGVuKSB7CiAgdmFyIHJlcyA9IDA7CgogIGRvIHsKICAgIHJlcyB8PSBjb2RlICYgMTsKICAgIGNvZGUgPj4+PSAxOwogICAgcmVzIDw8PSAxOwogIH0gd2hpbGUgKC0tbGVuID4gMCk7CgogIHJldHVybiByZXMgPj4+IDE7Cn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyLCBrZWVwaW5nIGF0IG1vc3QgNyBiaXRzIGluIGl0LgogKi8KCgpmdW5jdGlvbiBiaV9m
bHVzaChzKSB7CiAgaWYgKHMuYmlfdmFsaWQgPT09IDE2KSB7CiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpOwogICAgcy5iaV9idWYgPSAwOwogICAgcy5iaV92YWxpZCA9IDA7CiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID49IDgpIHsKICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWYgJiAweGZmOwogICAgcy5iaV9idWYgPj49IDg7CiAgICBzLmJpX3ZhbGlkIC09IDg7CiAgfQp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PQogKiBDb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzIGZvciBhIHRyZWUgYW5kIHVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aAogKiBmb3IgdGhlIGN1cnJlbnQgYmxvY2suCiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kCiAqICAgIGFib3ZlIGFyZSB0aGUgdHJlZSBub2RlcyBzb3J0ZWQgYnkgaW5jcmVhc2luZyBmcmVxdWVuY3kuCiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGQgbGVuIGlzIHNldCB0byB0aGUgb3B0aW1h
bCBiaXQgbGVuZ3RoLCB0aGUKICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLgogKiAgICAgVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzCiAqICAgICBub3QgbnVsbC4KICovCgoKZnVuY3Rpb24gZ2VuX2JpdGxlbihzLCBkZXNjKSAvLyAgICBkZWZsYXRlX3N0YXRlICpzOwovLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi8KewogIHZhciB0
cmVlID0gZGVzYy5keW5fdHJlZTsKICB2YXIgbWF4X2NvZGUgPSBkZXNjLm1heF9jb2RlOwogIHZhciBzdHJlZSA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlOwogIHZhciBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7CiAgdmFyIGV4dHJhID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYml0czsKICB2YXIgYmFzZSA9IGRlc2Muc3RhdF9kZXNjLmV4dHJhX2Jhc2U7CiAgdmFyIG1heF9sZW5ndGggPSBkZXNjLnN0YXRfZGVzYy5tYXhfbGVuZ3RoOwogIHZhciBoOwogIC8qIGhlYXAgaW5kZXggKi8KCiAgdmFy
IG4sIG07CiAgLyogaXRlcmF0ZSBvdmVyIHRoZSB0cmVlIGVsZW1lbnRzICovCgogIHZhciBiaXRzOwogIC8qIGJpdCBsZW5ndGggKi8KCiAgdmFyIHhiaXRzOwogIC8qIGV4dHJhIGJpdHMgKi8KCiAgdmFyIGY7CiAgLyogZnJlcXVlbmN5ICovCgogIHZhciBvdmVyZmxvdyA9IDA7CiAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi8KCiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7CiAgICBzLmJsX2NvdW50W2JpdHNdID0gMDsKICB9CiAgLyogSW4gYSBm
aXJzdCBwYXNzLCBjb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzICh3aGljaCBtYXkKICAgKiBvdmVyZmxvdyBpbiB0aGUgY2FzZSBvZiB0aGUgYml0IGxlbmd0aCB0cmVlKS4KICAgKi8KCgogIHRyZWVbcy5oZWFwW3MuaGVhcF9tYXhdICogMiArIDFdCiAgLyouTGVuKi8KICA9IDA7CiAgLyogcm9vdCBvZiB0aGUgaGVhcCAqLwoKICBmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7CiAgICBuID0gcy5oZWFwW2hdOwogICAgYml0cyA9IHRyZWVbdHJlZVtuICogMiArIDFdCiAgICAvKi5E
YWQqLwogICAgKiAyICsgMV0KICAgIC8qLkxlbiovCiAgICArIDE7CgogICAgaWYgKGJpdHMgPiBtYXhfbGVuZ3RoKSB7CiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoOwogICAgICBvdmVyZmxvdysrOwogICAgfQoKICAgIHRyZWVbbiAqIDIgKyAxXQogICAgLyouTGVuKi8KICAgID0gYml0czsKICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovCgogICAgaWYgKG4gPiBtYXhfY29kZSkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIC8qIG5vdCBhIGxlYWYgbm9kZSAqLwoK
CiAgICBzLmJsX2NvdW50W2JpdHNdKys7CiAgICB4Yml0cyA9IDA7CgogICAgaWYgKG4gPj0gYmFzZSkgewogICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTsKICAgIH0KCiAgICBmID0gdHJlZVtuICogMl0KICAgIC8qLkZyZXEqLwogICAgOwogICAgcy5vcHRfbGVuICs9IGYgKiAoYml0cyArIHhiaXRzKTsKCiAgICBpZiAoaGFzX3N0cmVlKSB7CiAgICAgIHMuc3RhdGljX2xlbiArPSBmICogKHN0cmVlW24gKiAyICsgMV0KICAgICAgLyouTGVuKi8KICAgICAgKyB4Yml0cyk7CiAgICB9CiAgfQoKICBpZiAob3ZlcmZsb3cg
PT09IDApIHsKICAgIHJldHVybjsKICB9IC8vIFRyYWNlKChzdGRlcnIsIlxuYml0IGxlbmd0aCBvdmVyZmxvd1xuIikpOwoKICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqLwoKICAvKiBGaW5kIHRoZSBmaXJzdCBiaXQgbGVuZ3RoIHdoaWNoIGNvdWxkIGluY3JlYXNlOiAqLwoKCiAgZG8gewogICAgYml0cyA9IG1heF9sZW5ndGggLSAxOwoKICAgIHdoaWxlIChzLmJsX2NvdW50W2JpdHNdID09PSAwKSB7CiAgICAgIGJpdHMtLTsKICAgIH0KCiAgICBz
LmJsX2NvdW50W2JpdHNdLS07CiAgICAvKiBtb3ZlIG9uZSBsZWFmIGRvd24gdGhlIHRyZWUgKi8KCiAgICBzLmJsX2NvdW50W2JpdHMgKyAxXSArPSAyOwogICAgLyogbW92ZSBvbmUgb3ZlcmZsb3cgaXRlbSBhcyBpdHMgYnJvdGhlciAqLwoKICAgIHMuYmxfY291bnRbbWF4X2xlbmd0aF0tLTsKICAgIC8qIFRoZSBicm90aGVyIG9mIHRoZSBvdmVyZmxvdyBpdGVtIGFsc28gbW92ZXMgb25lIHN0ZXAgdXAsCiAgICAgKiBidXQgdGhpcyBkb2VzIG5vdCBhZmZlY3QgYmxfY291bnRbbWF4X2xlbmd0aF0KICAgICAqLwoKICAgIG92
ZXJmbG93IC09IDI7CiAgfSB3aGlsZSAob3ZlcmZsb3cgPiAwKTsKICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuCiAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbAogICAqIGxlbmd0aHMgaW5zdGVhZCBvZiBmaXhpbmcgb25seSB0aGUgd3Jvbmcgb25lcy4gVGhpcyBpZGVhIGlzIHRha2VuCiAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pCiAgICov
CgoKICBmb3IgKGJpdHMgPSBtYXhfbGVuZ3RoOyBiaXRzICE9PSAwOyBiaXRzLS0pIHsKICAgIG4gPSBzLmJsX2NvdW50W2JpdHNdOwoKICAgIHdoaWxlIChuICE9PSAwKSB7CiAgICAgIG0gPSBzLmhlYXBbLS1oXTsKCiAgICAgIGlmIChtID4gbWF4X2NvZGUpIHsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgaWYgKHRyZWVbbSAqIDIgKyAxXQogICAgICAvKi5MZW4qLwogICAgICAhPT0gYml0cykgewogICAgICAgIC8vIFRyYWNlKChzdGRlcnIsImNvZGUgJWQgYml0cyAlZC0+JWRcbiIsIG0sIHRyZWVbbV0uTGVu
LCBiaXRzKSk7CiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdCiAgICAgICAgLyouTGVuKi8KICAgICAgICApICogdHJlZVttICogMl0KICAgICAgICAvKi5GcmVxKi8KICAgICAgICA7CiAgICAgICAgdHJlZVttICogMiArIDFdCiAgICAgICAgLyouTGVuKi8KICAgICAgICA9IGJpdHM7CiAgICAgIH0KCiAgICAgIG4tLTsKICAgIH0KICB9Cn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIEdlbmVy
YXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZQogKiBvcHRpbWFsKS4KICogSU4gYXNzZXJ0aW9uOiB0aGUgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGJpdCBsZW5ndGggc3RhdGlzdGljcyBmb3IKICogdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy4KICogT1VUIGFzc2VydGlvbjogdGhlIGZpZWxkIGNvZGUgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cyBvZiBub24KICogICAgIHplcm8g
Y29kZSBsZW5ndGguCiAqLwoKCmZ1bmN0aW9uIGdlbl9jb2Rlcyh0cmVlLCBtYXhfY29kZSwgYmxfY291bnQpIC8vICAgIGN0X2RhdGEgKnRyZWU7ICAgICAgICAgICAgIC8qIHRoZSB0cmVlIHRvIGRlY29yYXRlICovCi8vICAgIGludCBtYXhfY29kZTsgICAgICAgICAgICAgIC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqLwovLyAgICB1c2hmICpibF9jb3VudDsgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoICovCnsKICB2YXIgbmV4dF9jb2RlID0gbmV3IEFy
cmF5KE1BWF9CSVRTICsgMSk7CiAgLyogbmV4dCBjb2RlIHZhbHVlIGZvciBlYWNoIGJpdCBsZW5ndGggKi8KCiAgdmFyIGNvZGUgPSAwOwogIC8qIHJ1bm5pbmcgY29kZSB2YWx1ZSAqLwoKICB2YXIgYml0czsKICAvKiBiaXQgaW5kZXggKi8KCiAgdmFyIG47CiAgLyogY29kZSBpbmRleCAqLwoKICAvKiBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXMKICAgKiB3aXRob3V0IGJpdCByZXZlcnNhbC4KICAgKi8KCiAgZm9yIChiaXRzID0gMTsgYml0cyA8PSBN
QVhfQklUUzsgYml0cysrKSB7CiAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gY29kZSArIGJsX2NvdW50W2JpdHMgLSAxXSA8PCAxOwogIH0KICAvKiBDaGVjayB0aGF0IHRoZSBiaXQgY291bnRzIGluIGJsX2NvdW50IGFyZSBjb25zaXN0ZW50LiBUaGUgbGFzdCBjb2RlCiAgICogbXVzdCBiZSBhbGwgb25lcy4KICAgKi8KICAvL0Fzc2VydCAoY29kZSArIGJsX2NvdW50W01BWF9CSVRTXS0xID09ICgxPDxNQVhfQklUUyktMSwKICAvLyAgICAgICAgImluY29uc2lzdGVudCBiaXQgY291bnRzIik7CiAgLy9UcmFjZXYoKHN0
ZGVyciwiXG5nZW5fY29kZXM6IG1heF9jb2RlICVkICIsIG1heF9jb2RlKSk7CgoKICBmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHsKICAgIHZhciBsZW4gPSB0cmVlW24gKiAyICsgMV0KICAgIC8qLkxlbiovCiAgICA7CgogICAgaWYgKGxlbiA9PT0gMCkgewogICAgICBjb250aW51ZTsKICAgIH0KICAgIC8qIE5vdyByZXZlcnNlIHRoZSBiaXRzICovCgoKICAgIHRyZWVbbiAqIDJdCiAgICAvKi5Db2RlKi8KICAgID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pOyAvL1RyYWNlY3YodHJlZSAhPSBz
dGF0aWNfbHRyZWUsIChzdGRlcnIsIlxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSAiLAogICAgLy8gICAgIG4sIChpc2dyYXBoKG4pID8gbiA6ICcgJyksIGxlbiwgdHJlZVtuXS5Db2RlLCBuZXh0X2NvZGVbbGVuXS0xKSk7CiAgfQp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBJbml0aWFsaXplIHRoZSB2YXJpb3VzICdjb25zdGFudCcgdGFibGVzLgogKi8KCgpmdW5jdGlvbiB0cl9zdGF0aWNfaW5pdCgpIHsKICB2YXIg
bjsKICAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi8KCiAgdmFyIGJpdHM7CiAgLyogYml0IGNvdW50ZXIgKi8KCiAgdmFyIGxlbmd0aDsKICAvKiBsZW5ndGggdmFsdWUgKi8KCiAgdmFyIGNvZGU7CiAgLyogY29kZSB2YWx1ZSAqLwoKICB2YXIgZGlzdDsKICAvKiBkaXN0YW5jZSBpbmRleCAqLwoKICB2YXIgYmxfY291bnQgPSBuZXcgQXJyYXkoTUFYX0JJVFMgKyAxKTsKICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi8KICAvLyBkbyBjaGVjayBpbiBf
dHJfaW5pdCgpCiAgLy9pZiAoc3RhdGljX2luaXRfZG9uZSkgcmV0dXJuOwoKICAvKiBGb3Igc29tZSBlbWJlZGRlZCB0YXJnZXRzLCBnbG9iYWwgdmFyaWFibGVzIGFyZSBub3QgaW5pdGlhbGl6ZWQ6ICovCgogIC8qI2lmZGVmIE5PX0lOSVRfR0xPQkFMX1BPSU5URVJTCiAgICBzdGF0aWNfbF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2x0cmVlOwogICAgc3RhdGljX2xfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfbGJpdHM7CiAgICBzdGF0aWNfZF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2R0cmVlOwogICAgc3RhdGlj
X2RfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfZGJpdHM7CiAgICBzdGF0aWNfYmxfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfYmxiaXRzOwogICNlbmRpZiovCgogIC8qIEluaXRpYWxpemUgdGhlIG1hcHBpbmcgbGVuZ3RoICgwLi4yNTUpIC0+IGxlbmd0aCBjb2RlICgwLi4yOCkgKi8KCiAgbGVuZ3RoID0gMDsKCiAgZm9yIChjb2RlID0gMDsgY29kZSA8IExFTkdUSF9DT0RFUyAtIDE7IGNvZGUrKykgewogICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7CgogICAgZm9yIChuID0gMDsgbiA8IDEgPDwgZXh0cmFfbGJpdHNb
Y29kZV07IG4rKykgewogICAgICBfbGVuZ3RoX2NvZGVbbGVuZ3RoKytdID0gY29kZTsKICAgIH0KICB9IC8vQXNzZXJ0IChsZW5ndGggPT0gMjU2LCAidHJfc3RhdGljX2luaXQ6IGxlbmd0aCAhPSAyNTYiKTsKCiAgLyogTm90ZSB0aGF0IHRoZSBsZW5ndGggMjU1IChtYXRjaCBsZW5ndGggMjU4KSBjYW4gYmUgcmVwcmVzZW50ZWQKICAgKiBpbiB0d28gZGlmZmVyZW50IHdheXM6IGNvZGUgMjg0ICsgNSBiaXRzIG9yIGNvZGUgMjg1LCBzbyB3ZQogICAqIG92ZXJ3cml0ZSBsZW5ndGhfY29kZVsyNTVdIHRvIHVzZSB0aGUgYmVz
dCBlbmNvZGluZzoKICAgKi8KCgogIF9sZW5ndGhfY29kZVtsZW5ndGggLSAxXSA9IGNvZGU7CiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovCgogIGRpc3QgPSAwOwoKICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgMTY7IGNvZGUrKykgewogICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdDsKCiAgICBmb3IgKG4gPSAwOyBuIDwgMSA8PCBleHRyYV9kYml0c1tjb2RlXTsgbisrKSB7CiAgICAgIF9kaXN0X2NvZGVbZGlzdCsrXSA9IGNvZGU7CiAgICB9CiAgfSAvL0Fz
c2VydCAoZGlzdCA9PSAyNTYsICJ0cl9zdGF0aWNfaW5pdDogZGlzdCAhPSAyNTYiKTsKCgogIGRpc3QgPj49IDc7CiAgLyogZnJvbSBub3cgb24sIGFsbCBkaXN0YW5jZXMgYXJlIGRpdmlkZWQgYnkgMTI4ICovCgogIGZvciAoOyBjb2RlIDwgRF9DT0RFUzsgY29kZSsrKSB7CiAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0IDw8IDc7CgogICAgZm9yIChuID0gMDsgbiA8IDEgPDwgZXh0cmFfZGJpdHNbY29kZV0gLSA3OyBuKyspIHsKICAgICAgX2Rpc3RfY29kZVsyNTYgKyBkaXN0KytdID0gY29kZTsKICAgIH0KICB9IC8vQXNz
ZXJ0IChkaXN0ID09IDI1NiwgInRyX3N0YXRpY19pbml0OiAyNTYrZGlzdCAhPSA1MTIiKTsKCiAgLyogQ29uc3RydWN0IHRoZSBjb2RlcyBvZiB0aGUgc3RhdGljIGxpdGVyYWwgdHJlZSAqLwoKCiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7CiAgICBibF9jb3VudFtiaXRzXSA9IDA7CiAgfQoKICBuID0gMDsKCiAgd2hpbGUgKG4gPD0gMTQzKSB7CiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXQogICAgLyouTGVuKi8KICAgID0gODsKICAgIG4rKzsKICAgIGJsX2NvdW50WzhdKys7CiAgfQoK
ICB3aGlsZSAobiA8PSAyNTUpIHsKICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdCiAgICAvKi5MZW4qLwogICAgPSA5OwogICAgbisrOwogICAgYmxfY291bnRbOV0rKzsKICB9CgogIHdoaWxlIChuIDw9IDI3OSkgewogICAgc3RhdGljX2x0cmVlW24gKiAyICsgMV0KICAgIC8qLkxlbiovCiAgICA9IDc7CiAgICBuKys7CiAgICBibF9jb3VudFs3XSsrOwogIH0KCiAgd2hpbGUgKG4gPD0gMjg3KSB7CiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXQogICAgLyouTGVuKi8KICAgID0gODsKICAgIG4rKzsKICAgIGJsX2NvdW50
WzhdKys7CiAgfQogIC8qIENvZGVzIDI4NiBhbmQgMjg3IGRvIG5vdCBleGlzdCwgYnV0IHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZQogICAqIHRyZWUgY29uc3RydWN0aW9uIHRvIGdldCBhIGNhbm9uaWNhbCBIdWZmbWFuIHRyZWUgKGxvbmdlc3QgY29kZQogICAqIGFsbCBvbmVzKQogICAqLwoKCiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyArIDEsIGJsX2NvdW50KTsKICAvKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUgaXMgdHJpdmlhbDogKi8KCiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykg
ewogICAgc3RhdGljX2R0cmVlW24gKiAyICsgMV0KICAgIC8qLkxlbiovCiAgICA9IDU7CiAgICBzdGF0aWNfZHRyZWVbbiAqIDJdCiAgICAvKi5Db2RlKi8KICAgID0gYmlfcmV2ZXJzZShuLCA1KTsKICB9IC8vIE5vdyBkYXRhIHJlYWR5IGFuZCB3ZSBjYW4gaW5pdCBzdGF0aWMgdHJlZXMKCgogIHN0YXRpY19sX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2x0cmVlLCBleHRyYV9sYml0cywgTElURVJBTFMgKyAxLCBMX0NPREVTLCBNQVhfQklUUyk7CiAgc3RhdGljX2RfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVz
YyhzdGF0aWNfZHRyZWUsIGV4dHJhX2RiaXRzLCAwLCBEX0NPREVTLCBNQVhfQklUUyk7CiAgc3RhdGljX2JsX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2MobmV3IEFycmF5KDApLCBleHRyYV9ibGJpdHMsIDAsIEJMX0NPREVTLCBNQVhfQkxfQklUUyk7IC8vc3RhdGljX2luaXRfZG9uZSA9IHRydWU7Cn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIEluaXRpYWxpemUgYSBuZXcgYmxvY2suCiAqLwoKCmZ1bmN0aW9uIGluaXRf
YmxvY2socykgewogIHZhciBuOwogIC8qIGl0ZXJhdGVzIG92ZXIgdHJlZSBlbGVtZW50cyAqLwoKICAvKiBJbml0aWFsaXplIHRoZSB0cmVlcy4gKi8KCiAgZm9yIChuID0gMDsgbiA8IExfQ09ERVM7IG4rKykgewogICAgcy5keW5fbHRyZWVbbiAqIDJdCiAgICAvKi5GcmVxKi8KICAgID0gMDsKICB9CgogIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyBuKyspIHsKICAgIHMuZHluX2R0cmVlW24gKiAyXQogICAgLyouRnJlcSovCiAgICA9IDA7CiAgfQoKICBmb3IgKG4gPSAwOyBuIDwgQkxfQ09ERVM7IG4rKykgewogICAgcy5i
bF90cmVlW24gKiAyXQogICAgLyouRnJlcSovCiAgICA9IDA7CiAgfQoKICBzLmR5bl9sdHJlZVtFTkRfQkxPQ0sgKiAyXQogIC8qLkZyZXEqLwogID0gMTsKICBzLm9wdF9sZW4gPSBzLnN0YXRpY19sZW4gPSAwOwogIHMubGFzdF9saXQgPSBzLm1hdGNoZXMgPSAwOwp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciBhbmQgYWxpZ24gdGhlIG91dHB1dCBvbiBhIGJ5dGUgYm91bmRhcnkKICov
CgoKZnVuY3Rpb24gYmlfd2luZHVwKHMpIHsKICBpZiAocy5iaV92YWxpZCA+IDgpIHsKICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7CiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkgewogICAgLy9wdXRfYnl0ZShzLCAoQnl0ZSlzLT5iaV9idWYpOwogICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZjsKICB9CgogIHMuYmlfYnVmID0gMDsKICBzLmJpX3ZhbGlkID0gMDsKfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT0KICogQ29weSBhIHN0b3JlZCBibG9jaywgc3RvcmluZyBmaXJzdCB0aGUgbGVuZ3RoIGFuZCBpdHMKICogb25lJ3MgY29tcGxlbWVudCBpZiByZXF1ZXN0ZWQuCiAqLwoKCmZ1bmN0aW9uIGNvcHlfYmxvY2socywgYnVmLCBsZW4sIGhlYWRlcikgLy9EZWZsYXRlU3RhdGUgKnM7Ci8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi8KLy91bnNpZ25lZCBsZW47ICAgICAvKiBpdHMgbGVuZ3RoICovCi8vaW50ICAgICAgaGVhZGVyOyAgLyogdHJ1ZSBpZiBibG9jayBoZWFkZXIgbXVzdCBiZSB3cml0
dGVuICovCnsKICBiaV93aW5kdXAocyk7CiAgLyogYWxpZ24gb24gYnl0ZSBib3VuZGFyeSAqLwoKICBpZiAoaGVhZGVyKSB7CiAgICBwdXRfc2hvcnQocywgbGVuKTsKICAgIHB1dF9zaG9ydChzLCB+bGVuKTsKICB9IC8vICB3aGlsZSAobGVuLS0pIHsKICAvLyAgICBwdXRfYnl0ZShzLCAqYnVmKyspOwogIC8vICB9CgoKICB1dGlscy5hcnJheVNldChzLnBlbmRpbmdfYnVmLCBzLndpbmRvdywgYnVmLCBsZW4sIHMucGVuZGluZyk7CiAgcy5wZW5kaW5nICs9IGxlbjsKfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogQ29tcGFyZXMgdG8gc3VidHJlZXMsIHVzaW5nIHRoZSB0cmVlIGRlcHRoIGFzIHRpZSBicmVha2VyIHdoZW4KICogdGhlIHN1YnRyZWVzIGhhdmUgZXF1YWwgZnJlcXVlbmN5LiBUaGlzIG1pbmltaXplcyB0aGUgd29yc3QgY2FzZSBsZW5ndGguCiAqLwoKCmZ1bmN0aW9uIHNtYWxsZXIodHJlZSwgbiwgbSwgZGVwdGgpIHsKICB2YXIgX24yID0gbiAqIDI7CgogIHZhciBfbTIgPSBtICogMjsKCiAgcmV0dXJuIHRyZWVbX24yXQogIC8qLkZy
ZXEqLwogIDwgdHJlZVtfbTJdCiAgLyouRnJlcSovCiAgfHwgdHJlZVtfbjJdCiAgLyouRnJlcSovCiAgPT09IHRyZWVbX20yXQogIC8qLkZyZXEqLwogICYmIGRlcHRoW25dIDw9IGRlcHRoW21dOwp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBSZXN0b3JlIHRoZSBoZWFwIHByb3BlcnR5IGJ5IG1vdmluZyBkb3duIHRoZSB0cmVlIHN0YXJ0aW5nIGF0IG5vZGUgaywKICogZXhjaGFuZ2luZyBhIG5vZGUgd2l0aCB0aGUgc21h
bGxlc3Qgb2YgaXRzIHR3byBzb25zIGlmIG5lY2Vzc2FyeSwgc3RvcHBpbmcKICogd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0cwogKiB0d28gc29ucykuCiAqLwoKCmZ1bmN0aW9uIHBxZG93bmhlYXAocywgdHJlZSwgaykgLy8gICAgZGVmbGF0ZV9zdGF0ZSAqczsKLy8gICAgY3RfZGF0YSAqdHJlZTsgIC8qIHRoZSB0cmVlIHRvIHJlc3RvcmUgKi8KLy8gICAgaW50IGs7ICAgICAgICAgICAgICAgLyogbm9kZSB0byBtb3ZlIGRvd24gKi8KewogIHZh
ciB2ID0gcy5oZWFwW2tdOwogIHZhciBqID0gayA8PCAxOwogIC8qIGxlZnQgc29uIG9mIGsgKi8KCiAgd2hpbGUgKGogPD0gcy5oZWFwX2xlbikgewogICAgLyogU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczogKi8KICAgIGlmIChqIDwgcy5oZWFwX2xlbiAmJiBzbWFsbGVyKHRyZWUsIHMuaGVhcFtqICsgMV0sIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHsKICAgICAgaisrOwogICAgfQogICAgLyogRXhpdCBpZiB2IGlzIHNtYWxsZXIgdGhhbiBib3RoIHNvbnMgKi8KCgogICAgaWYgKHNtYWxsZXIodHJlZSwg
diwgcy5oZWFwW2pdLCBzLmRlcHRoKSkgewogICAgICBicmVhazsKICAgIH0KICAgIC8qIEV4Y2hhbmdlIHYgd2l0aCB0aGUgc21hbGxlc3Qgc29uICovCgoKICAgIHMuaGVhcFtrXSA9IHMuaGVhcFtqXTsKICAgIGsgPSBqOwogICAgLyogQW5kIGNvbnRpbnVlIGRvd24gdGhlIHRyZWUsIHNldHRpbmcgaiB0byB0aGUgbGVmdCBzb24gb2YgayAqLwoKICAgIGogPDw9IDE7CiAgfQoKICBzLmhlYXBba10gPSB2Owp9IC8vIGlubGluZWQgbWFudWFsbHkKLy8gdmFyIFNNQUxMRVNUID0gMTsKCi8qID09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXMKICovCgoKZnVuY3Rpb24gY29tcHJlc3NfYmxvY2socywgbHRyZWUsIGR0cmVlKSAvLyAgICBkZWZsYXRlX3N0YXRlICpzOwovLyAgICBjb25zdCBjdF9kYXRhICpsdHJlZTsgLyogbGl0ZXJhbCB0cmVlICovCi8vICAgIGNvbnN0IGN0X2RhdGEgKmR0cmVlOyAvKiBkaXN0YW5jZSB0cmVlICovCnsKICB2YXIgZGlzdDsK
ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqLwoKICB2YXIgbGM7CiAgLyogbWF0Y2ggbGVuZ3RoIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0ID09IDApICovCgogIHZhciBseCA9IDA7CiAgLyogcnVubmluZyBpbmRleCBpbiBsX2J1ZiAqLwoKICB2YXIgY29kZTsKICAvKiB0aGUgY29kZSB0byBzZW5kICovCgogIHZhciBleHRyYTsKICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyB0byBzZW5kICovCgogIGlmIChzLmxhc3RfbGl0ICE9PSAwKSB7CiAgICBkbyB7CiAgICAgIGRpc3QgPSBzLnBlbmRpbmdfYnVmW3Mu
ZF9idWYgKyBseCAqIDJdIDw8IDggfCBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDIgKyAxXTsKICAgICAgbGMgPSBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBseF07CiAgICAgIGx4Kys7CgogICAgICBpZiAoZGlzdCA9PT0gMCkgewogICAgICAgIHNlbmRfY29kZShzLCBsYywgbHRyZWUpOwogICAgICAgIC8qIHNlbmQgYSBsaXRlcmFsIGJ5dGUgKi8KICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsIiAnJWMnICIsIGxjKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLyogSGVyZSwgbGMgaXMgdGhl
IG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqLwogICAgICAgIGNvZGUgPSBfbGVuZ3RoX2NvZGVbbGNdOwogICAgICAgIHNlbmRfY29kZShzLCBjb2RlICsgTElURVJBTFMgKyAxLCBsdHJlZSk7CiAgICAgICAgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi8KCiAgICAgICAgZXh0cmEgPSBleHRyYV9sYml0c1tjb2RlXTsKCiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7CiAgICAgICAgICBsYyAtPSBiYXNlX2xlbmd0aFtjb2RlXTsKICAgICAgICAgIHNlbmRfYml0cyhzLCBsYywgZXh0cmEpOwogICAgICAgICAgLyogc2VuZCB0
aGUgZXh0cmEgbGVuZ3RoIGJpdHMgKi8KICAgICAgICB9CgogICAgICAgIGRpc3QtLTsKICAgICAgICAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovCgogICAgICAgIGNvZGUgPSBkX2NvZGUoZGlzdCk7IC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgImJhZCBkX2NvZGUiKTsKCiAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUsIGR0cmVlKTsKICAgICAgICAvKiBzZW5kIHRoZSBkaXN0YW5jZSBjb2RlICovCgogICAgICAgIGV4dHJhID0gZXh0cmFfZGJpdHNbY29kZV07CgogICAgICAgIGlmIChleHRyYSAh
PT0gMCkgewogICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07CiAgICAgICAgICBzZW5kX2JpdHMocywgZGlzdCwgZXh0cmEpOwogICAgICAgICAgLyogc2VuZCB0aGUgZXh0cmEgZGlzdGFuY2UgYml0cyAqLwogICAgICAgIH0KICAgICAgfQogICAgICAvKiBsaXRlcmFsIG9yIG1hdGNoIHBhaXIgPyAqLwoKICAgICAgLyogQ2hlY2sgdGhhdCB0aGUgb3ZlcmxheSBiZXR3ZWVuIHBlbmRpbmdfYnVmIGFuZCBkX2J1ZitsX2J1ZiBpcyBvazogKi8KICAgICAgLy9Bc3NlcnQoKHVJbnQpKHMtPnBlbmRpbmcpIDwgcy0+bGl0
X2J1ZnNpemUgKyAyKmx4LAogICAgICAvLyAgICAgICAicGVuZGluZ0J1ZiBvdmVyZmxvdyIpOwoKICAgIH0gd2hpbGUgKGx4IDwgcy5sYXN0X2xpdCk7CiAgfQoKICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBsdHJlZSk7Cn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIENvbnN0cnVjdCBvbmUgSHVmZm1hbiB0cmVlIGFuZCBhc3NpZ25zIHRoZSBjb2RlIGJpdCBzdHJpbmdzIGFuZCBsZW5ndGhzLgogKiBVcGRhdGUgdGhlIHRv
dGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLgogKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuCiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGRzIGxlbiBhbmQgY29kZSBhcmUgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGgKICogICAgIGFuZCBjb3JyZXNwb25kaW5nIGNvZGUuIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzCiAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBm
aWVsZCBtYXhfY29kZSBpcyBzZXQuCiAqLwoKCmZ1bmN0aW9uIGJ1aWxkX3RyZWUocywgZGVzYykgLy8gICAgZGVmbGF0ZV9zdGF0ZSAqczsKLy8gICAgdHJlZV9kZXNjICpkZXNjOyAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovCnsKICB2YXIgdHJlZSA9IGRlc2MuZHluX3RyZWU7CiAgdmFyIHN0cmVlID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7CiAgdmFyIGhhc19zdHJlZSA9IGRlc2Muc3RhdF9kZXNjLmhhc19zdHJlZTsKICB2YXIgZWxlbXMgPSBkZXNjLnN0YXRfZGVzYy5lbGVtczsKICB2YXIgbiwgbTsKICAvKiBp
dGVyYXRlIG92ZXIgaGVhcCBlbGVtZW50cyAqLwoKICB2YXIgbWF4X2NvZGUgPSAtMTsKICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi8KCiAgdmFyIG5vZGU7CiAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqLwoKICAvKiBDb25zdHJ1Y3QgdGhlIGluaXRpYWwgaGVhcCwgd2l0aCBsZWFzdCBmcmVxdWVudCBlbGVtZW50IGluCiAgICogaGVhcFtTTUFMTEVTVF0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uCiAgICogaGVhcFswXSBpcyBub3QgdXNl
ZC4KICAgKi8KCiAgcy5oZWFwX2xlbiA9IDA7CiAgcy5oZWFwX21heCA9IEhFQVBfU0laRTsKCiAgZm9yIChuID0gMDsgbiA8IGVsZW1zOyBuKyspIHsKICAgIGlmICh0cmVlW24gKiAyXQogICAgLyouRnJlcSovCiAgICAhPT0gMCkgewogICAgICBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IG1heF9jb2RlID0gbjsKICAgICAgcy5kZXB0aFtuXSA9IDA7CiAgICB9IGVsc2UgewogICAgICB0cmVlW24gKiAyICsgMV0KICAgICAgLyouTGVuKi8KICAgICAgPSAwOwogICAgfQogIH0KICAvKiBUaGUgcGt6aXAgZm9ybWF0IHJlcXVpcmVz
IHRoYXQgYXQgbGVhc3Qgb25lIGRpc3RhbmNlIGNvZGUgZXhpc3RzLAogICAqIGFuZCB0aGF0IGF0IGxlYXN0IG9uZSBiaXQgc2hvdWxkIGJlIHNlbnQgZXZlbiBpZiB0aGVyZSBpcyBvbmx5IG9uZQogICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0CiAgICogdHdvIGNvZGVzIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeS4KICAgKi8KCgogIHdoaWxlIChzLmhlYXBfbGVuIDwgMikgewogICAgbm9kZSA9IHMuaGVhcFsrK3MuaGVhcF9sZW5dID0gbWF4X2Nv
ZGUgPCAyID8gKyttYXhfY29kZSA6IDA7CiAgICB0cmVlW25vZGUgKiAyXQogICAgLyouRnJlcSovCiAgICA9IDE7CiAgICBzLmRlcHRoW25vZGVdID0gMDsKICAgIHMub3B0X2xlbi0tOwoKICAgIGlmIChoYXNfc3RyZWUpIHsKICAgICAgcy5zdGF0aWNfbGVuIC09IHN0cmVlW25vZGUgKiAyICsgMV0KICAgICAgLyouTGVuKi8KICAgICAgOwogICAgfQogICAgLyogbm9kZSBpcyAwIG9yIDEgc28gaXQgZG9lcyBub3QgaGF2ZSBleHRyYSBiaXRzICovCgogIH0KCiAgZGVzYy5tYXhfY29kZSA9IG1heF9jb2RlOwogIC8qIFRoZSBl
bGVtZW50cyBoZWFwW2hlYXBfbGVuLzIrMSAuLiBoZWFwX2xlbl0gYXJlIGxlYXZlcyBvZiB0aGUgdHJlZSwKICAgKiBlc3RhYmxpc2ggc3ViLWhlYXBzIG9mIGluY3JlYXNpbmcgbGVuZ3RoczoKICAgKi8KCiAgZm9yIChuID0gcy5oZWFwX2xlbiA+PiAxCiAgLyppbnQgLzIqLwogIDsgbiA+PSAxOyBuLS0pIHsKICAgIHBxZG93bmhlYXAocywgdHJlZSwgbik7CiAgfQogIC8qIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGJ5IHJlcGVhdGVkbHkgY29tYmluaW5nIHRoZSBsZWFzdCB0d28KICAgKiBmcmVxdWVudCBub2Rlcy4K
ICAgKi8KCgogIG5vZGUgPSBlbGVtczsKICAvKiBuZXh0IGludGVybmFsIG5vZGUgb2YgdGhlIHRyZWUgKi8KCiAgZG8gewogICAgLy9wcXJlbW92ZShzLCB0cmVlLCBuKTsgIC8qIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeSAqLwoKICAgIC8qKiogcHFyZW1vdmUgKioqLwogICAgbiA9IHMuaGVhcFsxCiAgICAvKlNNQUxMRVNUKi8KICAgIF07CiAgICBzLmhlYXBbMQogICAgLypTTUFMTEVTVCovCiAgICBdID0gcy5oZWFwW3MuaGVhcF9sZW4tLV07CiAgICBwcWRvd25oZWFwKHMsIHRyZWUsIDEKICAgIC8qU01BTExFU1Qq
LwogICAgKTsKICAgIC8qKiovCgogICAgbSA9IHMuaGVhcFsxCiAgICAvKlNNQUxMRVNUKi8KICAgIF07CiAgICAvKiBtID0gbm9kZSBvZiBuZXh0IGxlYXN0IGZyZXF1ZW5jeSAqLwoKICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsKICAgIC8qIGtlZXAgdGhlIG5vZGVzIHNvcnRlZCBieSBmcmVxdWVuY3kgKi8KCiAgICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IG07CiAgICAvKiBDcmVhdGUgYSBuZXcgbm9kZSBmYXRoZXIgb2YgbiBhbmQgbSAqLwoKICAgIHRyZWVbbm9kZSAqIDJdCiAgICAvKi5GcmVxKi8KICAgID0gdHJl
ZVtuICogMl0KICAgIC8qLkZyZXEqLwogICAgKyB0cmVlW20gKiAyXQogICAgLyouRnJlcSovCiAgICA7CiAgICBzLmRlcHRoW25vZGVdID0gKHMuZGVwdGhbbl0gPj0gcy5kZXB0aFttXSA/IHMuZGVwdGhbbl0gOiBzLmRlcHRoW21dKSArIDE7CiAgICB0cmVlW24gKiAyICsgMV0KICAgIC8qLkRhZCovCiAgICA9IHRyZWVbbSAqIDIgKyAxXQogICAgLyouRGFkKi8KICAgID0gbm9kZTsKICAgIC8qIGFuZCBpbnNlcnQgdGhlIG5ldyBub2RlIGluIHRoZSBoZWFwICovCgogICAgcy5oZWFwWzEKICAgIC8qU01BTExFU1QqLwogICAg
XSA9IG5vZGUrKzsKICAgIHBxZG93bmhlYXAocywgdHJlZSwgMQogICAgLypTTUFMTEVTVCovCiAgICApOwogIH0gd2hpbGUgKHMuaGVhcF9sZW4gPj0gMik7CgogIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gcy5oZWFwWzEKICAvKlNNQUxMRVNUKi8KICBdOwogIC8qIEF0IHRoaXMgcG9pbnQsIHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQuIFdlIGNhbiBub3cKICAgKiBnZW5lcmF0ZSB0aGUgYml0IGxlbmd0aHMuCiAgICovCgogIGdlbl9iaXRsZW4ocywgZGVzYyk7CiAgLyogVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0
LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2RlcyAqLwoKICBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIHMuYmxfY291bnQpOwp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBTY2FuIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIHRvIGRldGVybWluZSB0aGUgZnJlcXVlbmNpZXMgb2YgdGhlIGNvZGVzCiAqIGluIHRoZSBiaXQgbGVuZ3RoIHRyZWUuCiAqLwoKCmZ1bmN0aW9uIHNjYW5fdHJlZShzLCB0cmVlLCBtYXhf
Y29kZSkgLy8gICAgZGVmbGF0ZV9zdGF0ZSAqczsKLy8gICAgY3RfZGF0YSAqdHJlZTsgICAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovCi8vICAgIGludCBtYXhfY29kZTsgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovCnsKICB2YXIgbjsKICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovCgogIHZhciBwcmV2bGVuID0gLTE7CiAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqLwoKICB2YXIgY3VybGVuOwogIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi8K
CiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0KICAvKi5MZW4qLwogIDsKICAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovCgogIHZhciBjb3VudCA9IDA7CiAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi8KCiAgdmFyIG1heF9jb3VudCA9IDc7CiAgLyogbWF4IHJlcGVhdCBjb3VudCAqLwoKICB2YXIgbWluX2NvdW50ID0gNDsKICAvKiBtaW4gcmVwZWF0IGNvdW50ICovCgogIGlmIChuZXh0bGVuID09PSAwKSB7CiAgICBtYXhfY291bnQgPSAxMzg7CiAgICBtaW5fY291bnQgPSAzOwogIH0KCiAg
dHJlZVsobWF4X2NvZGUgKyAxKSAqIDIgKyAxXQogIC8qLkxlbiovCiAgPSAweGZmZmY7CiAgLyogZ3VhcmQgKi8KCiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7CiAgICBjdXJsZW4gPSBuZXh0bGVuOwogICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXQogICAgLyouTGVuKi8KICAgIDsKCiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHsKICAgICAgY29udGludWU7CiAgICB9IGVsc2UgaWYgKGNvdW50IDwgbWluX2NvdW50KSB7CiAgICAgIHMuYmxfdHJl
ZVtjdXJsZW4gKiAyXQogICAgICAvKi5GcmVxKi8KICAgICAgKz0gY291bnQ7CiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkgewogICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7CiAgICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdIC8qLkZyZXEqLysrOwogICAgICB9CgogICAgICBzLmJsX3RyZWVbUkVQXzNfNiAqIDJdIC8qLkZyZXEqLysrOwogICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkgewogICAgICBzLmJsX3RyZWVbUkVQWl8zXzEwICogMl0gLyouRnJlcSovKys7CiAgICB9IGVsc2UgewogICAgICBzLmJs
X3RyZWVbUkVQWl8xMV8xMzggKiAyXSAvKi5GcmVxKi8rKzsKICAgIH0KCiAgICBjb3VudCA9IDA7CiAgICBwcmV2bGVuID0gY3VybGVuOwoKICAgIGlmIChuZXh0bGVuID09PSAwKSB7CiAgICAgIG1heF9jb3VudCA9IDEzODsKICAgICAgbWluX2NvdW50ID0gMzsKICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7CiAgICAgIG1heF9jb3VudCA9IDY7CiAgICAgIG1pbl9jb3VudCA9IDM7CiAgICB9IGVsc2UgewogICAgICBtYXhfY291bnQgPSA3OwogICAgICBtaW5fY291bnQgPSA0OwogICAgfQogIH0KfQovKiA9
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogU2VuZCBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSBpbiBjb21wcmVzc2VkIGZvcm0sIHVzaW5nIHRoZSBjb2RlcyBpbgogKiBibF90cmVlLgogKi8KCgpmdW5jdGlvbiBzZW5kX3RyZWUocywgdHJlZSwgbWF4X2NvZGUpIC8vICAgIGRlZmxhdGVfc3RhdGUgKnM7Ci8vICAgIGN0X2RhdGEgKnRyZWU7IC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi8KLy8gICAgaW50IG1heF9jb2RlOyAg
ICAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi8KewogIHZhciBuOwogIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi8KCiAgdmFyIHByZXZsZW4gPSAtMTsKICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovCgogIHZhciBjdXJsZW47CiAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqLwoKICB2YXIgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXQogIC8qLkxlbiovCiAgOwogIC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi8KCiAgdmFyIGNvdW50ID0gMDsKICAvKiBy
ZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqLwoKICB2YXIgbWF4X2NvdW50ID0gNzsKICAvKiBtYXggcmVwZWF0IGNvdW50ICovCgogIHZhciBtaW5fY291bnQgPSA0OwogIC8qIG1pbiByZXBlYXQgY291bnQgKi8KCiAgLyogdHJlZVttYXhfY29kZSsxXS5MZW4gPSAtMTsgKi8KCiAgLyogZ3VhcmQgYWxyZWFkeSBzZXQgKi8KCiAgaWYgKG5leHRsZW4gPT09IDApIHsKICAgIG1heF9jb3VudCA9IDEzODsKICAgIG1pbl9jb3VudCA9IDM7CiAgfQoKICBmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHsKICAg
IGN1cmxlbiA9IG5leHRsZW47CiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdCiAgICAvKi5MZW4qLwogICAgOwoKICAgIGlmICgrK2NvdW50IDwgbWF4X2NvdW50ICYmIGN1cmxlbiA9PT0gbmV4dGxlbikgewogICAgICBjb250aW51ZTsKICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHsKICAgICAgZG8gewogICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7CiAgICAgIH0gd2hpbGUgKC0tY291bnQgIT09IDApOwogICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHsKICAgICAg
aWYgKGN1cmxlbiAhPT0gcHJldmxlbikgewogICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7CiAgICAgICAgY291bnQtLTsKICAgICAgfSAvL0Fzc2VydChjb3VudCA+PSAzICYmIGNvdW50IDw9IDYsICIgM182PyIpOwoKCiAgICAgIHNlbmRfY29kZShzLCBSRVBfM182LCBzLmJsX3RyZWUpOwogICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAyKTsKICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHsKICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfM18xMCwgcy5ibF90cmVlKTsKICAgICAgc2VuZF9iaXRz
KHMsIGNvdW50IC0gMywgMyk7CiAgICB9IGVsc2UgewogICAgICBzZW5kX2NvZGUocywgUkVQWl8xMV8xMzgsIHMuYmxfdHJlZSk7CiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTsKICAgIH0KCiAgICBjb3VudCA9IDA7CiAgICBwcmV2bGVuID0gY3VybGVuOwoKICAgIGlmIChuZXh0bGVuID09PSAwKSB7CiAgICAgIG1heF9jb3VudCA9IDEzODsKICAgICAgbWluX2NvdW50ID0gMzsKICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7CiAgICAgIG1heF9jb3VudCA9IDY7CiAgICAgIG1pbl9jb3VudCA9
IDM7CiAgICB9IGVsc2UgewogICAgICBtYXhfY291bnQgPSA3OwogICAgICBtaW5fY291bnQgPSA0OwogICAgfQogIH0KfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgZm9yIHRoZSBiaXQgbGVuZ3RocyBhbmQgcmV0dXJuIHRoZSBpbmRleCBpbgogKiBibF9vcmRlciBvZiB0aGUgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgdG8gc2VuZC4KICovCgoKZnVuY3Rpb24gYnVpbGRfYmxfdHJl
ZShzKSB7CiAgdmFyIG1heF9ibGluZGV4OwogIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi8KCiAgLyogRGV0ZXJtaW5lIHRoZSBiaXQgbGVuZ3RoIGZyZXF1ZW5jaWVzIGZvciBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqLwoKICBzY2FuX3RyZWUocywgcy5keW5fbHRyZWUsIHMubF9kZXNjLm1heF9jb2RlKTsKICBzY2FuX3RyZWUocywgcy5keW5fZHRyZWUsIHMuZF9kZXNjLm1heF9jb2RlKTsKICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlOiAqLwoKICBidWlsZF90
cmVlKHMsIHMuYmxfZGVzYyk7CiAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdAogICAqIHRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RocyBjb2RlcyBhbmQgdGhlIDUrNSs0IGJpdHMgZm9yIHRoZSBjb3VudHMuCiAgICovCgogIC8qIERldGVybWluZSB0aGUgbnVtYmVyIG9mIGJpdCBsZW5ndGggY29kZXMgdG8gc2VuZC4gVGhlIHBremlwIGZvcm1hdAogICAqIHJlcXVpcmVzIHRoYXQgYXQgbGVhc3QgNCBiaXQgbGVuZ3RoIGNvZGVzIGJlIHNl
bnQuIChhcHBub3RlLnR4dCBzYXlzCiAgICogMyBidXQgdGhlIGFjdHVhbCB2YWx1ZSB1c2VkIGlzIDQuKQogICAqLwoKICBmb3IgKG1heF9ibGluZGV4ID0gQkxfQ09ERVMgLSAxOyBtYXhfYmxpbmRleCA+PSAzOyBtYXhfYmxpbmRleC0tKSB7CiAgICBpZiAocy5ibF90cmVlW2JsX29yZGVyW21heF9ibGluZGV4XSAqIDIgKyAxXQogICAgLyouTGVuKi8KICAgICE9PSAwKSB7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAq
LwoKCiAgcy5vcHRfbGVuICs9IDMgKiAobWF4X2JsaW5kZXggKyAxKSArIDUgKyA1ICsgNDsgLy9UcmFjZXYoKHN0ZGVyciwgIlxuZHluIHRyZWVzOiBkeW4gJWxkLCBzdGF0ICVsZCIsCiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTsKCiAgcmV0dXJuIG1heF9ibGluZGV4Owp9Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZm
bWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGUKICogbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcywgdGhlIGxpdGVyYWwgdHJlZSBhbmQgdGhlIGRpc3RhbmNlIHRyZWUuCiAqIElOIGFzc2VydGlvbjogbGNvZGVzID49IDI1NywgZGNvZGVzID49IDEsIGJsY29kZXMgPj0gNC4KICovCgoKZnVuY3Rpb24gc2VuZF9hbGxfdHJlZXMocywgbGNvZGVzLCBkY29kZXMsIGJsY29kZXMpIC8vICAgIGRlZmxhdGVfc3RhdGUgKnM7Ci8vICAgIGludCBsY29kZXMsIGRjb2RlcywgYmxjb2RlczsgLyogbnVtYmVyIG9mIGNvZGVzIGZv
ciBlYWNoIHRyZWUgKi8KewogIHZhciByYW5rOwogIC8qIGluZGV4IGluIGJsX29yZGVyICovCiAgLy9Bc3NlcnQgKGxjb2RlcyA+PSAyNTcgJiYgZGNvZGVzID49IDEgJiYgYmxjb2RlcyA+PSA0LCAibm90IGVub3VnaCBjb2RlcyIpOwogIC8vQXNzZXJ0IChsY29kZXMgPD0gTF9DT0RFUyAmJiBkY29kZXMgPD0gRF9DT0RFUyAmJiBibGNvZGVzIDw9IEJMX0NPREVTLAogIC8vICAgICAgICAidG9vIG1hbnkgY29kZXMiKTsKICAvL1RyYWNldigoc3RkZXJyLCAiXG5ibCBjb3VudHM6ICIpKTsKCiAgc2VuZF9iaXRzKHMsIGxjb2Rl
cyAtIDI1NywgNSk7CiAgLyogbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovCgogIHNlbmRfYml0cyhzLCBkY29kZXMgLSAxLCA1KTsKICBzZW5kX2JpdHMocywgYmxjb2RlcyAtIDQsIDQpOwogIC8qIG5vdCAtMyBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi8KCiAgZm9yIChyYW5rID0gMDsgcmFuayA8IGJsY29kZXM7IHJhbmsrKykgewogICAgLy9UcmFjZXYoKHN0ZGVyciwgIlxuYmwgY29kZSAlMmQgIiwgYmxfb3JkZXJbcmFua10pKTsKICAgIHNlbmRfYml0cyhzLCBzLmJsX3RyZWVbYmxfb3JkZXJbcmFu
a10gKiAyICsgMV0KICAgIC8qLkxlbiovCiAgICAsIDMpOwogIH0gLy9UcmFjZXYoKHN0ZGVyciwgIlxuYmwgdHJlZTogc2VudCAlbGQiLCBzLT5iaXRzX3NlbnQpKTsKCgogIHNlbmRfdHJlZShzLCBzLmR5bl9sdHJlZSwgbGNvZGVzIC0gMSk7CiAgLyogbGl0ZXJhbCB0cmVlICovCiAgLy9UcmFjZXYoKHN0ZGVyciwgIlxubGl0IHRyZWU6IHNlbnQgJWxkIiwgcy0+Yml0c19zZW50KSk7CgogIHNlbmRfdHJlZShzLCBzLmR5bl9kdHJlZSwgZGNvZGVzIC0gMSk7CiAgLyogZGlzdGFuY2UgdHJlZSAqLwogIC8vVHJhY2V2KChzdGRl
cnIsICJcbmRpc3QgdHJlZTogc2VudCAlbGQiLCBzLT5iaXRzX3NlbnQpKTsKfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogQ2hlY2sgaWYgdGhlIGRhdGEgdHlwZSBpcyBURVhUIG9yIEJJTkFSWSwgdXNpbmcgdGhlIGZvbGxvd2luZyBhbGdvcml0aG06CiAqIC0gVEVYVCBpZiB0aGUgdHdvIGNvbmRpdGlvbnMgYmVsb3cgYXJlIHNhdGlzZmllZDoKICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNo
YXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZQogKiAgICAgICAiYmxhY2sgbGlzdCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS4KICogICAgYikgVGhlcmUgaXMgYXQgbGVhc3Qgb25lIHByaW50YWJsZSBjaGFyYWN0ZXIgYmVsb25naW5nIHRvIHRoZQogKiAgICAgICAid2hpdGUgbGlzdCIgKDkge1RBQn0sIDEwIHtMRn0sIDEzIHtDUn0sIDMyLi4yNTUpLgogKiAtIEJJTkFSWSBvdGhlcndpc2UuCiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYQogKiAgICJncmF5IGxp
c3QiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06CiAqICAgKDcge0JFTH0sIDgge0JTfSwgMTEge1ZUfSwgMTIge0ZGfSwgMjYge1NVQn0sIDI3IHtFU0N9KS4KICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIEZyZXEgb2YgZHluX2x0cmVlIGFyZSBzZXQuCiAqLwoKCmZ1bmN0aW9uIGRldGVjdF9kYXRhX3R5cGUocykgewogIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlcwogICAqIHNldCBiaXRzIDAuLjYsIDE0Li4yNSwgYW5kIDI4Li4zMQogICAq
IDB4ZjNmZmMwN2YgPSBiaW5hcnkgMTExMTAwMTExMTExMTExMTExMDAwMDAwMDExMTExMTEKICAgKi8KICB2YXIgYmxhY2tfbWFzayA9IDB4ZjNmZmMwN2Y7CiAgdmFyIG47CiAgLyogQ2hlY2sgZm9yIG5vbi10ZXh0dWFsICgiYmxhY2stbGlzdGVkIikgYnl0ZXMuICovCgogIGZvciAobiA9IDA7IG4gPD0gMzE7IG4rKywgYmxhY2tfbWFzayA+Pj49IDEpIHsKICAgIGlmIChibGFja19tYXNrICYgMSAmJiBzLmR5bl9sdHJlZVtuICogMl0KICAgIC8qLkZyZXEqLwogICAgIT09IDApIHsKICAgICAgcmV0dXJuIFpfQklOQVJZOwog
ICAgfQogIH0KICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoIndoaXRlLWxpc3RlZCIpIGJ5dGVzLiAqLwoKCiAgaWYgKHMuZHluX2x0cmVlWzkgKiAyXQogIC8qLkZyZXEqLwogICE9PSAwIHx8IHMuZHluX2x0cmVlWzEwICogMl0KICAvKi5GcmVxKi8KICAhPT0gMCB8fCBzLmR5bl9sdHJlZVsxMyAqIDJdCiAgLyouRnJlcSovCiAgIT09IDApIHsKICAgIHJldHVybiBaX1RFWFQ7CiAgfQoKICBmb3IgKG4gPSAzMjsgbiA8IExJVEVSQUxTOyBuKyspIHsKICAgIGlmIChzLmR5bl9sdHJlZVtuICogMl0KICAgIC8qLkZyZXEqLwogICAg
IT09IDApIHsKICAgICAgcmV0dXJuIFpfVEVYVDsKICAgIH0KICB9CiAgLyogVGhlcmUgYXJlIG5vICJibGFjay1saXN0ZWQiIG9yICJ3aGl0ZS1saXN0ZWQiIGJ5dGVzOgogICAqIHRoaXMgc3RyZWFtIGVpdGhlciBpcyBlbXB0eSBvciBoYXMgdG9sZXJhdGVkICgiZ3JheS1saXN0ZWQiKSBieXRlcyBvbmx5LgogICAqLwoKCiAgcmV0dXJuIFpfQklOQVJZOwp9Cgp2YXIgc3RhdGljX2luaXRfZG9uZSA9IGZhbHNlOwovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT0KICogSW5pdGlhbGl6ZSB0aGUgdHJlZSBkYXRhIHN0cnVjdHVyZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtLgogKi8KCmZ1bmN0aW9uIF90cl9pbml0KHMpIHsKICBpZiAoIXN0YXRpY19pbml0X2RvbmUpIHsKICAgIHRyX3N0YXRpY19pbml0KCk7CiAgICBzdGF0aWNfaW5pdF9kb25lID0gdHJ1ZTsKICB9CgogIHMubF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuZHluX2x0cmVlLCBzdGF0aWNfbF9kZXNjKTsKICBzLmRfZGVzYyA9IG5ldyBUcmVlRGVzYyhzLmR5bl9kdHJlZSwgc3RhdGljX2RfZGVzYyk7CiAg
cy5ibF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuYmxfdHJlZSwgc3RhdGljX2JsX2Rlc2MpOwogIHMuYmlfYnVmID0gMDsKICBzLmJpX3ZhbGlkID0gMDsKICAvKiBJbml0aWFsaXplIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgZmlyc3QgZmlsZTogKi8KCiAgaW5pdF9ibG9jayhzKTsKfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogU2VuZCBhIHN0b3JlZCBibG9jawogKi8KCgpmdW5jdGlvbiBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1
Ziwgc3RvcmVkX2xlbiwgbGFzdCkgLy9EZWZsYXRlU3RhdGUgKnM7Ci8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi8KLy91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi8KLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovCnsKICBzZW5kX2JpdHMocywgKFNUT1JFRF9CTE9DSyA8PCAxKSArIChsYXN0ID8gMSA6IDApLCAzKTsKICAvKiBzZW5kIGJsb2NrIHR5cGUgKi8KCiAgY29weV9ibG9jayhzLCBidWYsIHN0
b3JlZF9sZW4sIHRydWUpOwogIC8qIHdpdGggaGVhZGVyICovCn0KLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIFNlbmQgb25lIGVtcHR5IHN0YXRpYyBibG9jayB0byBnaXZlIGVub3VnaCBsb29rYWhlYWQgZm9yIGluZmxhdGUuCiAqIFRoaXMgdGFrZXMgMTAgYml0cywgb2Ygd2hpY2ggNyBtYXkgcmVtYWluIGluIHRoZSBiaXQgYnVmZmVyLgogKi8KCgpmdW5jdGlvbiBfdHJfYWxpZ24ocykgewogIHNlbmRfYml0cyhzLCBTVEFU
SUNfVFJFRVMgPDwgMSwgMyk7CiAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgc3RhdGljX2x0cmVlKTsKICBiaV9mbHVzaChzKTsKfQovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nIGZvciB0aGUgY3VycmVudCBibG9jazogZHluYW1pYyB0cmVlcywgc3RhdGljCiAqIHRyZWVzIG9yIHN0b3JlLCBhbmQgb3V0cHV0IHRoZSBlbmNvZGVkIGJsb2NrIHRvIHRoZSB6aXAgZmlsZS4KICov
CgoKZnVuY3Rpb24gX3RyX2ZsdXNoX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCkgLy9EZWZsYXRlU3RhdGUgKnM7Ci8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2ssIG9yIE5VTEwgaWYgdG9vIG9sZCAqLwovL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqLwovL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi8KewogIHZhciBvcHRfbGVuYiwgc3RhdGljX2xlbmI7CiAgLyogb3B0X2xlbiBhbmQgc3RhdGlj
X2xlbiBpbiBieXRlcyAqLwoKICB2YXIgbWF4X2JsaW5kZXggPSAwOwogIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi8KCiAgLyogQnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgdW5sZXNzIGEgc3RvcmVkIGJsb2NrIGlzIGZvcmNlZCAqLwoKICBpZiAocy5sZXZlbCA+IDApIHsKICAgIC8qIENoZWNrIGlmIHRoZSBmaWxlIGlzIGJpbmFyeSBvciB0ZXh0ICovCiAgICBpZiAocy5zdHJtLmRhdGFfdHlwZSA9PT0gWl9VTktOT1dOKSB7CiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRl
Y3RfZGF0YV90eXBlKHMpOwogICAgfQogICAgLyogQ29uc3RydWN0IHRoZSBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqLwoKCiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTsgLy8gVHJhY2V2KChzdGRlcnIsICJcbmxpdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZCIsIHMtPm9wdF9sZW4sCiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpOwoKICAgIGJ1aWxkX3RyZWUocywgcy5kX2Rlc2MpOyAvLyBUcmFjZXYoKHN0ZGVyciwgIlxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZCIsIHMtPm9wdF9sZW4sCiAgICAv
LyAgICAgICAgcy0+c3RhdGljX2xlbikpOwoKICAgIC8qIEF0IHRoaXMgcG9pbnQsIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gYXJlIHRoZSB0b3RhbCBiaXQgbGVuZ3RocyBvZgogICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy4KICAgICAqLwoKICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4CiAgICAgKiBpbiBibF9vcmRlciBvZiB0aGUgbGFzdCBiaXQgbGVuZ3RoIGNv
ZGUgdG8gc2VuZC4KICAgICAqLwoKICAgIG1heF9ibGluZGV4ID0gYnVpbGRfYmxfdHJlZShzKTsKICAgIC8qIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZy4gQ29tcHV0ZSB0aGUgYmxvY2sgbGVuZ3RocyBpbiBieXRlcy4gKi8KCiAgICBvcHRfbGVuYiA9IHMub3B0X2xlbiArIDMgKyA3ID4+PiAzOwogICAgc3RhdGljX2xlbmIgPSBzLnN0YXRpY19sZW4gKyAzICsgNyA+Pj4gMzsgLy8gVHJhY2V2KChzdGRlcnIsICJcbm9wdCAlbHUoJWx1KSBzdGF0ICVsdSglbHUpIHN0b3JlZCAlbHUgbGl0ICV1ICIsCiAgICAvLyAgICAg
ICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLAogICAgLy8gICAgICAgIHMtPmxhc3RfbGl0KSk7CgogICAgaWYgKHN0YXRpY19sZW5iIDw9IG9wdF9sZW5iKSB7CiAgICAgIG9wdF9sZW5iID0gc3RhdGljX2xlbmI7CiAgICB9CiAgfSBlbHNlIHsKICAgIC8vIEFzc2VydChidWYgIT0gKGNoYXIqKTAsICJsb3N0IGJ1ZiIpOwogICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OwogICAgLyogZm9yY2UgYSBzdG9yZWQgYmxvY2sgKi8KICB9
CgogIGlmIChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYiAmJiBidWYgIT09IC0xKSB7CiAgICAvKiA0OiB0d28gd29yZHMgZm9yIHRoZSBsZW5ndGhzICovCgogICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS4KICAgICAqIE90aGVyd2lzZSB3ZSBjYW4ndCBoYXZlIHByb2Nlc3NlZCBtb3JlIHRoYW4gV1NJWkUgaW5wdXQgYnl0ZXMgc2luY2UKICAgICAqIHRoZSBsYXN0IGJsb2NrIGZsdXNoLCBiZWNhdXNlIGNvbXByZXNzaW9uIHdvdWxkIGhhdmUgYmVl
bgogICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvCiAgICAgKiB0cmFuc2Zvcm0gYSBibG9jayBpbnRvIGEgc3RvcmVkIGJsb2NrLgogICAgICovCiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7CiAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEIHx8IHN0YXRpY19sZW5iID09PSBvcHRfbGVuYikgewogICAgc2VuZF9iaXRzKHMsIChTVEFUSUNfVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7CiAg
ICBjb21wcmVzc19ibG9jayhzLCBzdGF0aWNfbHRyZWUsIHN0YXRpY19kdHJlZSk7CiAgfSBlbHNlIHsKICAgIHNlbmRfYml0cyhzLCAoRFlOX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpOwogICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUgKyAxLCBzLmRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7CiAgICBjb21wcmVzc19ibG9jayhzLCBzLmR5bl9sdHJlZSwgcy5keW5fZHRyZWUpOwogIH0gLy8gQXNzZXJ0IChzLT5jb21wcmVzc2VkX2xlbiA9PSBzLT5iaXRzX3NlbnQs
ICJiYWQgY29tcHJlc3NlZCBzaXplIik7CgogIC8qIFRoZSBhYm92ZSBjaGVjayBpcyBtYWRlIG1vZCAyXjMyLCBmb3IgZmlsZXMgbGFyZ2VyIHRoYW4gNTEyIE1CCiAgICogYW5kIHVMb25nIGltcGxlbWVudGVkIG9uIDMyIGJpdHMuCiAgICovCgoKICBpbml0X2Jsb2NrKHMpOwoKICBpZiAobGFzdCkgewogICAgYmlfd2luZHVwKHMpOwogIH0gLy8gVHJhY2V2KChzdGRlcnIsIlxuY29tcHJsZW4gJWx1KCVsdSkgIiwgcy0+Y29tcHJlc3NlZF9sZW4+PjMsCiAgLy8gICAgICAgcy0+Y29tcHJlc3NlZF9sZW4tNypsYXN0KSk7Cgp9
Ci8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogKiBTYXZlIHRoZSBtYXRjaCBpbmZvIGFuZCB0YWxseSB0aGUgZnJlcXVlbmN5IGNvdW50cy4gUmV0dXJuIHRydWUgaWYKICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLgogKi8KCgpmdW5jdGlvbiBfdHJfdGFsbHkocywgZGlzdCwgbGMpIC8vICAgIGRlZmxhdGVfc3RhdGUgKnM7Ci8vICAgIHVuc2lnbmVkIGRpc3Q7ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmlu
ZyAqLwovLyAgICB1bnNpZ25lZCBsYzsgICAgLyogbWF0Y2ggbGVuZ3RoLU1JTl9NQVRDSCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdD09MCkgKi8KewogIC8vdmFyIG91dF9sZW5ndGgsIGluX2xlbmd0aCwgZGNvZGU7CiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDJdID0gZGlzdCA+Pj4gOCAmIDB4ZmY7CiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDIgKyAxXSA9IGRpc3QgJiAweGZmOwogIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZm
OwogIHMubGFzdF9saXQrKzsKCiAgaWYgKGRpc3QgPT09IDApIHsKICAgIC8qIGxjIGlzIHRoZSB1bm1hdGNoZWQgY2hhciAqLwogICAgcy5keW5fbHRyZWVbbGMgKiAyXSAvKi5GcmVxKi8rKzsKICB9IGVsc2UgewogICAgcy5tYXRjaGVzKys7CiAgICAvKiBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIICovCgogICAgZGlzdC0tOwogICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqLwogICAgLy9Bc3NlcnQoKHVzaClkaXN0IDwgKHVzaClNQVhfRElTVChzKSAmJgogICAgLy8gICAgICAgKHVz
aClsYyA8PSAodXNoKShNQVhfTUFUQ0gtTUlOX01BVENIKSAmJgogICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICAiX3RyX3RhbGx5OiBiYWQgbWF0Y2giKTsKCiAgICBzLmR5bl9sdHJlZVsoX2xlbmd0aF9jb2RlW2xjXSArIExJVEVSQUxTICsgMSkgKiAyXSAvKi5GcmVxKi8rKzsKICAgIHMuZHluX2R0cmVlW2RfY29kZShkaXN0KSAqIDJdIC8qLkZyZXEqLysrOwogIH0gLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cywKICAvLyBkb24ndCBlbmFibGUgaXQg
Zm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5CiAgLy8jaWZkZWYgVFJVTkNBVEVfQkxPQ0sKICAvLyAgLyogVHJ5IHRvIGd1ZXNzIGlmIGl0IGlzIHByb2ZpdGFibGUgdG8gc3RvcCB0aGUgY3VycmVudCBibG9jayBoZXJlICovCiAgLy8gIGlmICgocy5sYXN0X2xpdCAmIDB4MWZmZikgPT09IDAgJiYgcy5sZXZlbCA+IDIpIHsKICAvLyAgICAvKiBDb21wdXRlIGFuIHVwcGVyIGJvdW5kIGZvciB0aGUgY29tcHJlc3NlZCBsZW5ndGggKi8KICAvLyAgICBvdXRfbGVuZ3RoID0gcy5sYXN0X2xpdCo4OwogIC8vICAgIGluX2xlbmd0aCA9
IHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0OwogIC8vCiAgLy8gICAgZm9yIChkY29kZSA9IDA7IGRjb2RlIDwgRF9DT0RFUzsgZGNvZGUrKykgewogIC8vICAgICAgb3V0X2xlbmd0aCArPSBzLmR5bl9kdHJlZVtkY29kZSoyXS8qLkZyZXEqLyAqICg1ICsgZXh0cmFfZGJpdHNbZGNvZGVdKTsKICAvLyAgICB9CiAgLy8gICAgb3V0X2xlbmd0aCA+Pj49IDM7CiAgLy8gICAgLy9UcmFjZXYoKHN0ZGVyciwiXG5sYXN0X2xpdCAldSwgaW4gJWxkLCBvdXQgfiVsZCglbGQlJSkgIiwKICAvLyAgICAvLyAgICAgICBzLT5sYXN0X2xp
dCwgaW5fbGVuZ3RoLCBvdXRfbGVuZ3RoLAogIC8vICAgIC8vICAgICAgIDEwMEwgLSBvdXRfbGVuZ3RoKjEwMEwvaW5fbGVuZ3RoKSk7CiAgLy8gICAgaWYgKHMubWF0Y2hlcyA8IChzLmxhc3RfbGl0Pj4xKS8qaW50IC8yKi8gJiYgb3V0X2xlbmd0aCA8IChpbl9sZW5ndGg+PjEpLyppbnQgLzIqLykgewogIC8vICAgICAgcmV0dXJuIHRydWU7CiAgLy8gICAgfQogIC8vICB9CiAgLy8jZW5kaWYKCgogIHJldHVybiBzLmxhc3RfbGl0ID09PSBzLmxpdF9idWZzaXplIC0gMTsKICAvKiBXZSBhdm9pZCBlcXVhbGl0eSB3aXRoIGxp
dF9idWZzaXplIGJlY2F1c2Ugb2Ygd3JhcGFyb3VuZCBhdCA2NEsKICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0bwogICAqIDY0Sy0xIGJ5dGVzLgogICAqLwp9CgpleHBvcnRzLl90cl9pbml0ID0gX3RyX2luaXQ7CmV4cG9ydHMuX3RyX3N0b3JlZF9ibG9jayA9IF90cl9zdG9yZWRfYmxvY2s7CmV4cG9ydHMuX3RyX2ZsdXNoX2Jsb2NrID0gX3RyX2ZsdXNoX2Jsb2NrOwpleHBvcnRzLl90cl90YWxseSA9IF90cl90YWxseTsKZXhwb3J0cy5fdHJfYWxpZ24g
PSBfdHJfYWxpZ247Cgp9LHsiLi4vdXRpbHMvY29tbW9uIjozMzN9XSwzNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7IC8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlcgovLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpbgovLwovLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZAovLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUg
YXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXMKLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS4KLy8KLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsCi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXQKLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOgovLwovLyAxLiBUaGUgb3JpZ2lu
IG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdAovLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlCi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlCi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC4KLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBh
cyBzdWNoLCBhbmQgbXVzdCBub3QgYmUKLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuCi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uCgpmdW5jdGlvbiBaU3RyZWFtKCkgewogIC8qIG5leHQgaW5wdXQgYnl0ZSAqLwogIHRoaXMuaW5wdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzCgogIHRoaXMubmV4dF9pbiA9IDA7CiAgLyogbnVtYmVyIG9m
IGJ5dGVzIGF2YWlsYWJsZSBhdCBpbnB1dCAqLwoKICB0aGlzLmF2YWlsX2luID0gMDsKICAvKiB0b3RhbCBudW1iZXIgb2YgaW5wdXQgYnl0ZXMgcmVhZCBzbyBmYXIgKi8KCiAgdGhpcy50b3RhbF9pbiA9IDA7CiAgLyogbmV4dCBvdXRwdXQgYnl0ZSBzaG91bGQgYmUgcHV0IHRoZXJlICovCgogIHRoaXMub3V0cHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVycwoKICB0aGlzLm5leHRfb3V0ID0gMDsKICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi8KCiAgdGhp
cy5hdmFpbF9vdXQgPSAwOwogIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovCgogIHRoaXMudG90YWxfb3V0ID0gMDsKICAvKiBsYXN0IGVycm9yIG1lc3NhZ2UsIE5VTEwgaWYgbm8gZXJyb3IgKi8KCiAgdGhpcy5tc2cgPSAnJwogIC8qWl9OVUxMKi8KICA7CiAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovCgogIHRoaXMuc3RhdGUgPSBudWxsOwogIC8qIGJlc3QgZ3Vlc3MgYWJvdXQgdGhlIGRhdGEgdHlwZTogYmluYXJ5IG9yIHRleHQgKi8KCiAgdGhpcy5kYXRhX3R5cGUgPSAyCiAg
LypaX1VOS05PV04qLwogIDsKICAvKiBhZGxlcjMyIHZhbHVlIG9mIHRoZSB1bmNvbXByZXNzZWQgZGF0YSAqLwoKICB0aGlzLmFkbGVyID0gMDsKfQoKbW9kdWxlLmV4cG9ydHMgPSBaU3RyZWFtOwoKfSx7fV0sMzQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHM9eyIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4xIjogImFlcy0xMjgtZWNiIiwKIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIiOiAiYWVzLTEyOC1jYmMiLAoiMi4xNi44NDAuMS4xMDEuMy40LjEuMyI6ICJhZXMtMTI4LW9mYiIsCiIy
LjE2Ljg0MC4xLjEwMS4zLjQuMS40IjogImFlcy0xMjgtY2ZiIiwKIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIxIjogImFlcy0xOTItZWNiIiwKIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIyIjogImFlcy0xOTItY2JjIiwKIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIzIjogImFlcy0xOTItb2ZiIiwKIjIuMTYuODQwLjEuMTAxLjMuNC4xLjI0IjogImFlcy0xOTItY2ZiIiwKIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQxIjogImFlcy0yNTYtZWNiIiwKIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQyIjogImFlcy0yNTYtY2JjIiwKIjIuMTYuODQw
LjEuMTAxLjMuNC4xLjQzIjogImFlcy0yNTYtb2ZiIiwKIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQ0IjogImFlcy0yNTYtY2ZiIgp9Cn0se31dLDM0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvYXNuMS5qcwovLyBGZWRvciwgeW91IGFyZSBhbWF6aW5nLgondXNlIHN0cmljdCc7Cgp2YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjEuanMnKTsKCmV4cG9ydHMuY2VydGlmaWNhdGUgPSByZXF1aXJlKCcu
L2NlcnRpZmljYXRlJyk7CnZhciBSU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7CiAgdGhpcy5zZXEoKS5vYmoodGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSwgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSwgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KCksIHRoaXMua2V5KCdwcml2YXRlRXhwb25lbnQnKS5pbnQoKSwgdGhpcy5rZXkoJ3ByaW1lMScpLmludCgpLCB0aGlzLmtleSgncHJpbWUyJykuaW50KCksIHRoaXMua2V5KCdleHBvbmVudDEnKS5pbnQoKSwg
dGhpcy5rZXkoJ2V4cG9uZW50MicpLmludCgpLCB0aGlzLmtleSgnY29lZmZpY2llbnQnKS5pbnQoKSk7Cn0pOwpleHBvcnRzLlJTQVByaXZhdGVLZXkgPSBSU0FQcml2YXRlS2V5Owp2YXIgUlNBUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVB1YmxpY0tleScsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgnbW9kdWx1cycpLmludCgpLCB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKSk7Cn0pOwpleHBvcnRzLlJTQVB1YmxpY0tleSA9IFJTQVB1YmxpY0tleTsKdmFyIFB1YmxpY0tleSA9
IGFzbjEuZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLCB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpKTsKfSk7CmV4cG9ydHMuUHVibGljS2V5ID0gUHVibGljS2V5Owp2YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbjEuZGVmaW5lKCdBbGdvcml0aG1JZGVudGlmaWVyJywgZnVuY3Rpb24gKCkgewogIHRoaXMuc2VxKCkub2JqKHRoaXMua2V5KCdhbGdvcml0
aG0nKS5vYmppZCgpLCB0aGlzLmtleSgnbm9uZScpLm51bGxfKCkub3B0aW9uYWwoKSwgdGhpcy5rZXkoJ2N1cnZlJykub2JqaWQoKS5vcHRpb25hbCgpLCB0aGlzLmtleSgncGFyYW1zJykuc2VxKCkub2JqKHRoaXMua2V5KCdwJykuaW50KCksIHRoaXMua2V5KCdxJykuaW50KCksIHRoaXMua2V5KCdnJykuaW50KCkpLm9wdGlvbmFsKCkpOwp9KTsKdmFyIFByaXZhdGVLZXlJbmZvID0gYXNuMS5kZWZpbmUoJ1ByaXZhdGVLZXlJbmZvJywgZnVuY3Rpb24gKCkgewogIHRoaXMuc2VxKCkub2JqKHRoaXMua2V5KCd2ZXJzaW9uJyku
aW50KCksIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpKTsKfSk7CmV4cG9ydHMuUHJpdmF0ZUtleSA9IFByaXZhdGVLZXlJbmZvOwp2YXIgRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7CiAgdGhpcy5zZXEoKS5vYmoodGhpcy5rZXkoJ2FsZ29yaXRobScpLnNlcSgpLm9iaih0aGlzLmtleSgnaWQnKS5vYmppZCgpLCB0aGlzLmtl
eSgnZGVjcnlwdCcpLnNlcSgpLm9iaih0aGlzLmtleSgna2RlJykuc2VxKCkub2JqKHRoaXMua2V5KCdpZCcpLm9iamlkKCksIHRoaXMua2V5KCdrZGVwYXJhbXMnKS5zZXEoKS5vYmoodGhpcy5rZXkoJ3NhbHQnKS5vY3RzdHIoKSwgdGhpcy5rZXkoJ2l0ZXJzJykuaW50KCkpKSwgdGhpcy5rZXkoJ2NpcGhlcicpLnNlcSgpLm9iaih0aGlzLmtleSgnYWxnbycpLm9iamlkKCksIHRoaXMua2V5KCdpdicpLm9jdHN0cigpKSkpLCB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKSk7Cn0pOwpleHBvcnRzLkVuY3J5
cHRlZFByaXZhdGVLZXkgPSBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbzsKdmFyIERTQVByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnRFNBUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgndmVyc2lvbicpLmludCgpLCB0aGlzLmtleSgncCcpLmludCgpLCB0aGlzLmtleSgncScpLmludCgpLCB0aGlzLmtleSgnZycpLmludCgpLCB0aGlzLmtleSgncHViX2tleScpLmludCgpLCB0aGlzLmtleSgncHJpdl9rZXknKS5pbnQoKSk7Cn0pOwpleHBvcnRzLkRTQVByaXZhdGVLZXkgPSBEU0FQ
cml2YXRlS2V5OwpleHBvcnRzLkRTQXBhcmFtID0gYXNuMS5kZWZpbmUoJ0RTQXBhcmFtJywgZnVuY3Rpb24gKCkgewogIHRoaXMuaW50KCk7Cn0pOwp2YXIgRUNQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0VDUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgndmVyc2lvbicpLmludCgpLCB0aGlzLmtleSgncHJpdmF0ZUtleScpLm9jdHN0cigpLCB0aGlzLmtleSgncGFyYW1ldGVycycpLm9wdGlvbmFsKCkuZXhwbGljaXQoMCkudXNlKEVDUGFyYW1ldGVycyksIHRoaXMua2V5KCdw
dWJsaWNLZXknKS5vcHRpb25hbCgpLmV4cGxpY2l0KDEpLmJpdHN0cigpKTsKfSk7CmV4cG9ydHMuRUNQcml2YXRlS2V5ID0gRUNQcml2YXRlS2V5Owp2YXIgRUNQYXJhbWV0ZXJzID0gYXNuMS5kZWZpbmUoJ0VDUGFyYW1ldGVycycsIGZ1bmN0aW9uICgpIHsKICB0aGlzLmNob2ljZSh7CiAgICBuYW1lZEN1cnZlOiB0aGlzLm9iamlkKCkKICB9KTsKfSk7CmV4cG9ydHMuc2lnbmF0dXJlID0gYXNuMS5kZWZpbmUoJ3NpZ25hdHVyZScsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgncicpLmludCgpLCB0
aGlzLmtleSgncycpLmludCgpKTsKfSk7Cgp9LHsiLi9jZXJ0aWZpY2F0ZSI6MzQ4LCJhc24xLmpzIjoxNjd9XSwzNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9SYW50YW5lbi9ub2RlLWR0bHMvYmxvYi8yNWE3ZGM4NjFiZGEzOGNmZWFjOTNhNzIzNTAwZWVhNGYwYWMyZTg2L0NlcnRpZmljYXRlLmpzCi8vIHRoYW5rcyB0byBAUmFudGFuZW4KJ3VzZSBzdHJpY3QnOwoKdmFyIGFzbiA9IHJlcXVpcmUoJ2FzbjEuanMnKTsKCnZhciBUaW1lID0gYXNuLmRlZmlu
ZSgnVGltZScsIGZ1bmN0aW9uICgpIHsKICB0aGlzLmNob2ljZSh7CiAgICB1dGNUaW1lOiB0aGlzLnV0Y3RpbWUoKSwKICAgIGdlbmVyYWxUaW1lOiB0aGlzLmdlbnRpbWUoKQogIH0pOwp9KTsKdmFyIEF0dHJpYnV0ZVR5cGVWYWx1ZSA9IGFzbi5kZWZpbmUoJ0F0dHJpYnV0ZVR5cGVWYWx1ZScsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgndHlwZScpLm9iamlkKCksIHRoaXMua2V5KCd2YWx1ZScpLmFueSgpKTsKfSk7CnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuLmRlZmluZSgnQWxnb3Jp
dGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgnYWxnb3JpdGhtJykub2JqaWQoKSwgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpLCB0aGlzLmtleSgnY3VydmUnKS5vYmppZCgpLm9wdGlvbmFsKCkpOwp9KTsKdmFyIFN1YmplY3RQdWJsaWNLZXlJbmZvID0gYXNuLmRlZmluZSgnU3ViamVjdFB1YmxpY0tleUluZm8nLCBmdW5jdGlvbiAoKSB7CiAgdGhpcy5zZXEoKS5vYmoodGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSwgdGhp
cy5rZXkoJ3N1YmplY3RQdWJsaWNLZXknKS5iaXRzdHIoKSk7Cn0pOwp2YXIgUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZSA9IGFzbi5kZWZpbmUoJ1JlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUnLCBmdW5jdGlvbiAoKSB7CiAgdGhpcy5zZXRvZihBdHRyaWJ1dGVUeXBlVmFsdWUpOwp9KTsKdmFyIFJETlNlcXVlbmNlID0gYXNuLmRlZmluZSgnUkROU2VxdWVuY2UnLCBmdW5jdGlvbiAoKSB7CiAgdGhpcy5zZXFvZihSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lKTsKfSk7CnZhciBOYW1lID0gYXNuLmRlZmluZSgnTmFtZScsIGZ1
bmN0aW9uICgpIHsKICB0aGlzLmNob2ljZSh7CiAgICByZG5TZXF1ZW5jZTogdGhpcy51c2UoUkROU2VxdWVuY2UpCiAgfSk7Cn0pOwp2YXIgVmFsaWRpdHkgPSBhc24uZGVmaW5lKCdWYWxpZGl0eScsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgnbm90QmVmb3JlJykudXNlKFRpbWUpLCB0aGlzLmtleSgnbm90QWZ0ZXInKS51c2UoVGltZSkpOwp9KTsKdmFyIEV4dGVuc2lvbiA9IGFzbi5kZWZpbmUoJ0V4dGVuc2lvbicsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgnZXh0
bklEJykub2JqaWQoKSwgdGhpcy5rZXkoJ2NyaXRpY2FsJykuYm9vbCgpLmRlZihmYWxzZSksIHRoaXMua2V5KCdleHRuVmFsdWUnKS5vY3RzdHIoKSk7Cn0pOwp2YXIgVEJTQ2VydGlmaWNhdGUgPSBhc24uZGVmaW5lKCdUQlNDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHsKICB0aGlzLnNlcSgpLm9iaih0aGlzLmtleSgndmVyc2lvbicpLmV4cGxpY2l0KDApLmludCgpLm9wdGlvbmFsKCksIHRoaXMua2V5KCdzZXJpYWxOdW1iZXInKS5pbnQoKSwgdGhpcy5rZXkoJ3NpZ25hdHVyZScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVy
KSwgdGhpcy5rZXkoJ2lzc3VlcicpLnVzZShOYW1lKSwgdGhpcy5rZXkoJ3ZhbGlkaXR5JykudXNlKFZhbGlkaXR5KSwgdGhpcy5rZXkoJ3N1YmplY3QnKS51c2UoTmFtZSksIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5SW5mbycpLnVzZShTdWJqZWN0UHVibGljS2V5SW5mbyksIHRoaXMua2V5KCdpc3N1ZXJVbmlxdWVJRCcpLmltcGxpY2l0KDEpLmJpdHN0cigpLm9wdGlvbmFsKCksIHRoaXMua2V5KCdzdWJqZWN0VW5pcXVlSUQnKS5pbXBsaWNpdCgyKS5iaXRzdHIoKS5vcHRpb25hbCgpLCB0aGlzLmtleSgnZXh0ZW5zaW9u
cycpLmV4cGxpY2l0KDMpLnNlcW9mKEV4dGVuc2lvbikub3B0aW9uYWwoKSk7Cn0pOwp2YXIgWDUwOUNlcnRpZmljYXRlID0gYXNuLmRlZmluZSgnWDUwOUNlcnRpZmljYXRlJywgZnVuY3Rpb24gKCkgewogIHRoaXMuc2VxKCkub2JqKHRoaXMua2V5KCd0YnNDZXJ0aWZpY2F0ZScpLnVzZShUQlNDZXJ0aWZpY2F0ZSksIHRoaXMua2V5KCdzaWduYXR1cmVBbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksIHRoaXMua2V5KCdzaWduYXR1cmVWYWx1ZScpLmJpdHN0cigpKTsKfSk7Cm1vZHVsZS5leHBvcnRzID0gWDUw
OUNlcnRpZmljYXRlOwoKfSx7ImFzbjEuanMiOjE2N31dLDM0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYXBhdGlsL3BlbXN0cmlwCnZhciBmaW5kUHJvYyA9IC9Qcm9jLVR5cGU6IDQsRU5DUllQVEVEW1xuXHJdK0RFSy1JbmZvOiBBRVMtKCg/OjEyOCl8KD86MTkyKXwoPzoyNTYpKS1DQkMsKFswLTlBLUhdKylbXG5ccl0rKFswLTlBLXpcblxyKy89XSspW1xuXHJdKy9tOwp2YXIgc3RhcnRSZWdleCA9IC9eLS0tLS1C
RUdJTiAoKD86Lio/IEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0vbTsKdmFyIGZ1bGxSZWdleCA9IC9eLS0tLS1CRUdJTiAoKD86Lio/IEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0oWzAtOUEtelxuXHIrLz1dKyktLS0tLUVORCBcMS0tLS0tJC9tOwoKdmFyIGV2cCA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5Jyk7Cgp2YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJyk7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChva2V5LCBwYXNz
d29yZCkgewogIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKCk7CiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKTsKICB2YXIgZGVjcnlwdGVkOwoKICBpZiAoIW1hdGNoKSB7CiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleCk7CiAgICBkZWNyeXB0ZWQgPSBCdWZmZXIuZnJvbShtYXRjaDJbMl0ucmVwbGFjZSgvW1xyXG5dL2csICcnKSwgJ2Jhc2U2NCcpOwogIH0gZWxzZSB7CiAgICB2YXIgc3VpdGUgPSAnYWVzJyArIG1hdGNoWzFdOwogICAgdmFyIGl2ID0gQnVmZmVyLmZyb20obWF0Y2hbMl0sICdo
ZXgnKTsKICAgIHZhciBjaXBoZXJUZXh0ID0gQnVmZmVyLmZyb20obWF0Y2hbM10ucmVwbGFjZSgvW1xyXG5dL2csICcnKSwgJ2Jhc2U2NCcpOwogICAgdmFyIGNpcGhlcktleSA9IGV2cChwYXNzd29yZCwgaXYuc2xpY2UoMCwgOCksIHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpLmtleTsKICAgIHZhciBvdXQgPSBbXTsKICAgIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGNpcGhlcktleSwgaXYpOwogICAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSk7CiAgICBvdXQucHVzaChj
aXBoZXIuZmluYWwoKSk7CiAgICBkZWNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KG91dCk7CiAgfQoKICB2YXIgdGFnID0ga2V5Lm1hdGNoKHN0YXJ0UmVnZXgpWzFdOwogIHJldHVybiB7CiAgICB0YWc6IHRhZywKICAgIGRhdGE6IGRlY3J5cHRlZAogIH07Cn07Cgp9LHsiYnJvd3NlcmlmeS1hZXMiOjE4OCwiZXZwX2J5dGVzdG9rZXkiOjI1OSwic2FmZS1idWZmZXIiOjM4NH1dLDM1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwv
aGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3lt
Ym9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKdmFyIGFzbjEgPSByZXF1aXJlKCcuL2FzbjEnKTsKCnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpOwoKdmFyIGZpeFByb2MgPSByZXF1aXJlKCcuL2ZpeFByb2MnKTsKCnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKTsKCnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKTsKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCm1vZHVsZS5leHBvcnRzID0gcGFyc2VLZXlz
OwoKZnVuY3Rpb24gcGFyc2VLZXlzKGJ1ZmZlcikgewogIHZhciBwYXNzd29yZDsKCiAgaWYgKF90eXBlb2YoYnVmZmVyKSA9PT0gJ29iamVjdCcgJiYgIUJ1ZmZlci5pc0J1ZmZlcihidWZmZXIpKSB7CiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlOwogICAgYnVmZmVyID0gYnVmZmVyLmtleTsKICB9CgogIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykgewogICAgYnVmZmVyID0gQnVmZmVyLmZyb20oYnVmZmVyKTsKICB9CgogIHZhciBzdHJpcHBlZCA9IGZpeFByb2MoYnVmZmVyLCBwYXNzd29yZCk7CiAg
dmFyIHR5cGUgPSBzdHJpcHBlZC50YWc7CiAgdmFyIGRhdGEgPSBzdHJpcHBlZC5kYXRhOwogIHZhciBzdWJ0eXBlLCBuZGF0YTsKCiAgc3dpdGNoICh0eXBlKSB7CiAgICBjYXNlICdDRVJUSUZJQ0FURSc6CiAgICAgIG5kYXRhID0gYXNuMS5jZXJ0aWZpY2F0ZS5kZWNvZGUoZGF0YSwgJ2RlcicpLnRic0NlcnRpZmljYXRlLnN1YmplY3RQdWJsaWNLZXlJbmZvOwogICAgLy8gZmFsbHMgdGhyb3VnaAoKICAgIGNhc2UgJ1BVQkxJQyBLRVknOgogICAgICBpZiAoIW5kYXRhKSB7CiAgICAgICAgbmRhdGEgPSBhc24xLlB1YmxpY0tl
eS5kZWNvZGUoZGF0YSwgJ2RlcicpOwogICAgICB9CgogICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJyk7CgogICAgICBzd2l0Y2ggKHN1YnR5cGUpIHsKICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6CiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpOwoKICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6CiAgICAgICAgICBuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSA9IG5k
YXRhLnN1YmplY3RQdWJsaWNLZXk7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0eXBlOiAnZWMnLAogICAgICAgICAgICBkYXRhOiBuZGF0YQogICAgICAgICAgfTsKCiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOgogICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wdWJfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJyk7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0eXBlOiAnZHNhJywKICAgICAgICAgICAgZGF0YTog
bmRhdGEuYWxnb3JpdGhtLnBhcmFtcwogICAgICAgICAgfTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpOwogICAgICB9CgogICAgLy8gdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKQoKICAgIGNhc2UgJ0VOQ1JZUFRFRCBQUklWQVRFIEtFWSc6CiAgICAgIGRhdGEgPSBhc24xLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKTsKICAgICAgZGF0YSA9IGRlY3J5cHQoZGF0YSwgcGFzc3dvcmQp
OwogICAgLy8gZmFsbHMgdGhyb3VnaAoKICAgIGNhc2UgJ1BSSVZBVEUgS0VZJzoKICAgICAgbmRhdGEgPSBhc24xLlByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKTsKICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpOwoKICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7CiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOgogICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKTsKCiAgICAgICAg
Y2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOgogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgY3VydmU6IG5kYXRhLmFsZ29yaXRobS5jdXJ2ZSwKICAgICAgICAgICAgcHJpdmF0ZUtleTogYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJykucHJpdmF0ZUtleQogICAgICAgICAgfTsKCiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOgogICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wcml2X2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1
YmplY3RQcml2YXRlS2V5LCAnZGVyJyk7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0eXBlOiAnZHNhJywKICAgICAgICAgICAgcGFyYW1zOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zCiAgICAgICAgICB9OwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSk7CiAgICAgIH0KCiAgICAvLyB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpCgogICAgY2FzZSAnUlNBIFBVQkxJQyBLRVknOgogICAgICByZXR1cm4g
YXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKTsKCiAgICBjYXNlICdSU0EgUFJJVkFURSBLRVknOgogICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJyk7CgogICAgY2FzZSAnRFNBIFBSSVZBVEUgS0VZJzoKICAgICAgcmV0dXJuIHsKICAgICAgICB0eXBlOiAnZHNhJywKICAgICAgICBwYXJhbXM6IGFzbjEuRFNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpCiAgICAgIH07CgogICAgY2FzZSAnRUMgUFJJVkFURSBLRVknOgogICAgICBkYXRhID0gYXNuMS5FQ1By
aXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBjdXJ2ZTogZGF0YS5wYXJhbWV0ZXJzLnZhbHVlLAogICAgICAgIHByaXZhdGVLZXk6IGRhdGEucHJpdmF0ZUtleQogICAgICB9OwoKICAgIGRlZmF1bHQ6CiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSk7CiAgfQp9CgpwYXJzZUtleXMuc2lnbmF0dXJlID0gYXNuMS5zaWduYXR1cmU7CgpmdW5jdGlvbiBkZWNyeXB0KGRhdGEsIHBhc3N3b3JkKSB7CiAgdmFyIHNhbHQgPSBkYXRhLmFsZ29yaXRo
bS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdDsKICB2YXIgaXRlcnMgPSBwYXJzZUludChkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuaXRlcnMudG9TdHJpbmcoKSwgMTApOwogIHZhciBhbGdvID0gYWVzaWRbZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKCcuJyldOwogIHZhciBpdiA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLml2OwogIHZhciBjaXBoZXJUZXh0ID0gZGF0YS5zdWJqZWN0UHJpdmF0ZUtleTsKICB2YXIga2V5bGVuID0gcGFyc2VJbnQoYWxnby5zcGxp
dCgnLScpWzFdLCAxMCkgLyA4OwogIHZhciBrZXkgPSBjb21wYXQucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcnMsIGtleWxlbiwgJ3NoYTEnKTsKICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KGFsZ28sIGtleSwgaXYpOwogIHZhciBvdXQgPSBbXTsKICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKTsKICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSk7CiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KTsKfQoKfSx7Ii4vYWVzaWQuanNvbiI6MzQ2LCIuL2FzbjEiOjM0NywiLi9m
aXhQcm9jIjozNDksImJyb3dzZXJpZnktYWVzIjoxODgsInBia2RmMiI6MzUxLCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMzUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5wYmtkZjIgPSByZXF1aXJlKCcuL2xpYi9hc3luYycpOwpleHBvcnRzLnBia2RmMlN5bmMgPSByZXF1aXJlKCcuL2xpYi9zeW5jJyk7Cgp9LHsiLi9saWIvYXN5bmMiOjM1MiwiLi9saWIvc3luYyI6MzU1fV0sMzUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9j
ZXNzLGdsb2JhbCl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBjaGVja1BhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3ByZWNvbmRpdGlvbicpOwoKdmFyIGRlZmF1bHRFbmNvZGluZyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lbmNvZGluZycpOwoKdmFyIHN5bmMgPSByZXF1aXJlKCcuL3N5bmMnKTsKCnZhciB0b0J1ZmZlciA9IHJlcXVpcmUoJy4vdG8tYnVmZmVyJyk7Cgp2YXIgWkVST19CVUY7CnZhciBzdWJ0bGUgPSBnbG9iYWwuY3J5cHRvICYmIGdsb2JhbC5j
cnlwdG8uc3VidGxlOwp2YXIgdG9Ccm93c2VyID0gewogIHNoYTogJ1NIQS0xJywKICAnc2hhLTEnOiAnU0hBLTEnLAogIHNoYTE6ICdTSEEtMScsCiAgc2hhMjU2OiAnU0hBLTI1NicsCiAgJ3NoYS0yNTYnOiAnU0hBLTI1NicsCiAgc2hhMzg0OiAnU0hBLTM4NCcsCiAgJ3NoYS0zODQnOiAnU0hBLTM4NCcsCiAgJ3NoYS01MTInOiAnU0hBLTUxMicsCiAgc2hhNTEyOiAnU0hBLTUxMicKfTsKdmFyIGNoZWNrcyA9IFtdOwoKZnVuY3Rpb24gY2hlY2tOYXRpdmUoYWxnbykgewogIGlmIChnbG9iYWwucHJvY2VzcyAmJiAhZ2xvYmFs
LnByb2Nlc3MuYnJvd3NlcikgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7CiAgfQoKICBpZiAoIXN1YnRsZSB8fCAhc3VidGxlLmltcG9ydEtleSB8fCAhc3VidGxlLmRlcml2ZUJpdHMpIHsKICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpOwogIH0KCiAgaWYgKGNoZWNrc1thbGdvXSAhPT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm4gY2hlY2tzW2FsZ29dOwogIH0KCiAgWkVST19CVUYgPSBaRVJPX0JVRiB8fCBCdWZmZXIuYWxsb2MoOCk7CiAgdmFyIHByb20gPSBicm93c2VyUGJrZGYyKFpFUk9f
QlVGLCBaRVJPX0JVRiwgMTAsIDEyOCwgYWxnbykudGhlbihmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfSk7CiAgY2hlY2tzW2FsZ29dID0gcHJvbTsKICByZXR1cm4gcHJvbTsKfQoKZnVuY3Rpb24gYnJvd3NlclBia2RmMihwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgbGVuZ3RoLCBhbGdvKSB7CiAgcmV0dXJuIHN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIHBhc3N3b3JkLCB7CiAgICBuYW1lOiAnUEJLREYyJwogIH0sIGZhbHNlLCBb
J2Rlcml2ZUJpdHMnXSkudGhlbihmdW5jdGlvbiAoa2V5KSB7CiAgICByZXR1cm4gc3VidGxlLmRlcml2ZUJpdHMoewogICAgICBuYW1lOiAnUEJLREYyJywKICAgICAgc2FsdDogc2FsdCwKICAgICAgaXRlcmF0aW9uczogaXRlcmF0aW9ucywKICAgICAgaGFzaDogewogICAgICAgIG5hbWU6IGFsZ28KICAgICAgfQogICAgfSwga2V5LCBsZW5ndGggPDwgMyk7CiAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzKTsKICB9KTsKfQoKZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocHJvbWlz
ZSwgY2FsbGJhY2spIHsKICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKG91dCkgewogICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgIGNhbGxiYWNrKG51bGwsIG91dCk7CiAgICB9KTsKICB9LCBmdW5jdGlvbiAoZSkgewogICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgIGNhbGxiYWNrKGUpOwogICAgfSk7CiAgfSk7Cn0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCwgY2FsbGJhY2spIHsKICBpZiAodHlw
ZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykgewogICAgY2FsbGJhY2sgPSBkaWdlc3Q7CiAgICBkaWdlc3QgPSB1bmRlZmluZWQ7CiAgfQoKICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnOwogIHZhciBhbGdvID0gdG9Ccm93c2VyW2RpZ2VzdC50b0xvd2VyQ2FzZSgpXTsKCiAgaWYgKCFhbGdvIHx8IHR5cGVvZiBnbG9iYWwuUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICB2YXIgb3V0OwoKICAgICAgdHJ5IHsKICAgICAgICBvdXQgPSBzeW5j
KHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICByZXR1cm4gY2FsbGJhY2soZSk7CiAgICAgIH0KCiAgICAgIGNhbGxiYWNrKG51bGwsIG91dCk7CiAgICB9KTsKICB9CgogIGNoZWNrUGFyYW1ldGVycyhpdGVyYXRpb25zLCBrZXlsZW4pOwogIHBhc3N3b3JkID0gdG9CdWZmZXIocGFzc3dvcmQsIGRlZmF1bHRFbmNvZGluZywgJ1Bhc3N3b3JkJyk7CiAgc2FsdCA9IHRvQnVmZmVyKHNhbHQsIGRlZmF1bHRFbmNvZGluZywgJ1NhbHQnKTsKICBpZiAo
dHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbGxiYWNrIHByb3ZpZGVkIHRvIHBia2RmMicpOwogIHJlc29sdmVQcm9taXNlKGNoZWNrTmF0aXZlKGFsZ28pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgIGlmIChyZXNwKSByZXR1cm4gYnJvd3NlclBia2RmMihwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBhbGdvKTsKICAgIHJldHVybiBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCk7CiAgfSksIGNhbGxiYWNrKTsKfTsK
Cn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiLi9kZWZhdWx0LWVuY29kaW5nIjozNTMsIi4vcHJlY29uZGl0aW9uIjozNTQsIi4vc3luYyI6MzU1LCIuL3RvLWJ1ZmZlciI6MzU2LCJfcHJvY2VzcyI6MzU4LCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMzUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVs
ZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsKInVzZSBzdHJpY3QiOwoKdmFyIGRlZmF1bHRFbmNvZGluZzsKLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KCmlmIChwcm9jZXNzLmJyb3dzZXIpIHsKICBkZWZhdWx0RW5jb2RpbmcgPSAndXRmLTgnOwp9IGVsc2UgaWYgKHByb2Nlc3MudmVyc2lvbikgewogIHZhciBwVmVyc2lvbk1ham9yID0gcGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9uLnNwbGl0KCcuJylbMF0uc2xpY2UoMSksIDEwKTsKICBkZWZhdWx0RW5jb2RpbmcgPSBwVmVyc2lvbk1ham9yID49IDYgPyAndXRm
LTgnIDogJ2JpbmFyeSc7Cn0gZWxzZSB7CiAgZGVmYXVsdEVuY29kaW5nID0gJ3V0Zi04JzsKfQoKbW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0RW5jb2Rpbmc7Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSkKCn0seyJfcHJvY2VzcyI6MzU4fV0sMzU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKdmFyIE1BWF9BTExPQyA9IE1hdGgucG93KDIsIDMwKSAtIDE7IC8vIGRlZmF1bHQgaW4gaW9qcwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0aW9ucywga2V5
bGVuKSB7CiAgaWYgKHR5cGVvZiBpdGVyYXRpb25zICE9PSAnbnVtYmVyJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSXRlcmF0aW9ucyBub3QgYSBudW1iZXInKTsKICB9CgogIGlmIChpdGVyYXRpb25zIDwgMCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGl0ZXJhdGlvbnMnKTsKICB9CgogIGlmICh0eXBlb2Yga2V5bGVuICE9PSAnbnVtYmVyJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignS2V5IGxlbmd0aCBub3QgYSBudW1iZXInKTsKICB9CgogIGlmIChrZXlsZW4gPCAwIHx8IGtleWxlbiA+IE1B
WF9BTExPQyB8fCBrZXlsZW4gIT09IGtleWxlbikgewogICAgLyogZXNsaW50IG5vLXNlbGYtY29tcGFyZTogMCAqLwogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGtleSBsZW5ndGgnKTsKICB9Cn07Cgp9LHt9XSwzNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1Jyk7Cgp2YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJyk7Cgp2YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJyk7Cgp2YXIgQnVmZmVyID0g
cmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgp2YXIgY2hlY2tQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9wcmVjb25kaXRpb24nKTsKCnZhciBkZWZhdWx0RW5jb2RpbmcgPSByZXF1aXJlKCcuL2RlZmF1bHQtZW5jb2RpbmcnKTsKCnZhciB0b0J1ZmZlciA9IHJlcXVpcmUoJy4vdG8tYnVmZmVyJyk7Cgp2YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KTsKdmFyIHNpemVzID0gewogIG1kNTogMTYsCiAgc2hhMTogMjAsCiAgc2hhMjI0OiAyOCwKICBzaGEyNTY6IDMyLAogIHNoYTM4NDogNDgsCiAgc2hhNTEyOiA2NCwK
ICBybWQxNjA6IDIwLAogIHJpcGVtZDE2MDogMjAKfTsKCmZ1bmN0aW9uIEhtYWMoYWxnLCBrZXksIHNhbHRMZW4pIHsKICB2YXIgaGFzaCA9IGdldERpZ2VzdChhbGcpOwogIHZhciBibG9ja3NpemUgPSBhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcgPyAxMjggOiA2NDsKCiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHsKICAgIGtleSA9IGhhc2goa2V5KTsKICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHsKICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9j
a3NpemUpOwogIH0KCiAgdmFyIGlwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2l6ZXNbYWxnXSk7CiAgdmFyIG9wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2l6ZXNbYWxnXSk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHsKICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2OwogICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUM7CiAgfQoKICB2YXIgaXBhZDEgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2FsdExlbiArIDQpOwogIGlwYWQuY29w
eShpcGFkMSwgMCwgMCwgYmxvY2tzaXplKTsKICB0aGlzLmlwYWQxID0gaXBhZDE7CiAgdGhpcy5pcGFkMiA9IGlwYWQ7CiAgdGhpcy5vcGFkID0gb3BhZDsKICB0aGlzLmFsZyA9IGFsZzsKICB0aGlzLmJsb2Nrc2l6ZSA9IGJsb2Nrc2l6ZTsKICB0aGlzLmhhc2ggPSBoYXNoOwogIHRoaXMuc2l6ZSA9IHNpemVzW2FsZ107Cn0KCkhtYWMucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChkYXRhLCBpcGFkKSB7CiAgZGF0YS5jb3B5KGlwYWQsIHRoaXMuYmxvY2tzaXplKTsKICB2YXIgaCA9IHRoaXMuaGFzaChpcGFkKTsKICBoLmNv
cHkodGhpcy5vcGFkLCB0aGlzLmJsb2Nrc2l6ZSk7CiAgcmV0dXJuIHRoaXMuaGFzaCh0aGlzLm9wYWQpOwp9OwoKZnVuY3Rpb24gZ2V0RGlnZXN0KGFsZykgewogIGZ1bmN0aW9uIHNoYUZ1bmMoZGF0YSkgewogICAgcmV0dXJuIHNoYShhbGcpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKTsKICB9CgogIGZ1bmN0aW9uIHJtZDE2MEZ1bmMoZGF0YSkgewogICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKS51cGRhdGUoZGF0YSkuZGlnZXN0KCk7CiAgfQoKICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSBy
ZXR1cm4gcm1kMTYwRnVuYzsKICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG1kNTsKICByZXR1cm4gc2hhRnVuYzsKfQoKZnVuY3Rpb24gcGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCkgewogIGNoZWNrUGFyYW1ldGVycyhpdGVyYXRpb25zLCBrZXlsZW4pOwogIHBhc3N3b3JkID0gdG9CdWZmZXIocGFzc3dvcmQsIGRlZmF1bHRFbmNvZGluZywgJ1Bhc3N3b3JkJyk7CiAgc2FsdCA9IHRvQnVmZmVyKHNhbHQsIGRlZmF1bHRFbmNvZGluZywgJ1NhbHQnKTsKICBkaWdlc3QgPSBkaWdl
c3QgfHwgJ3NoYTEnOwogIHZhciBobWFjID0gbmV3IEhtYWMoZGlnZXN0LCBwYXNzd29yZCwgc2FsdC5sZW5ndGgpOwogIHZhciBESyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShrZXlsZW4pOwogIHZhciBibG9jazEgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2FsdC5sZW5ndGggKyA0KTsKICBzYWx0LmNvcHkoYmxvY2sxLCAwLCAwLCBzYWx0Lmxlbmd0aCk7CiAgdmFyIGRlc3RQb3MgPSAwOwogIHZhciBoTGVuID0gc2l6ZXNbZGlnZXN0XTsKICB2YXIgbCA9IE1hdGguY2VpbChrZXlsZW4gLyBoTGVuKTsKCiAgZm9yICh2YXIgaSA9IDE7
IGkgPD0gbDsgaSsrKSB7CiAgICBibG9jazEud3JpdGVVSW50MzJCRShpLCBzYWx0Lmxlbmd0aCk7CiAgICB2YXIgVCA9IGhtYWMucnVuKGJsb2NrMSwgaG1hYy5pcGFkMSk7CiAgICB2YXIgVSA9IFQ7CgogICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVyYXRpb25zOyBqKyspIHsKICAgICAgVSA9IGhtYWMucnVuKFUsIGhtYWMuaXBhZDIpOwoKICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBoTGVuOyBrKyspIHsKICAgICAgICBUW2tdIF49IFVba107CiAgICAgIH0KICAgIH0KCiAgICBULmNvcHkoREssIGRlc3RQb3MpOwogICAg
ZGVzdFBvcyArPSBoTGVuOwogIH0KCiAgcmV0dXJuIERLOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHBia2RmMjsKCn0seyIuL2RlZmF1bHQtZW5jb2RpbmciOjM1MywiLi9wcmVjb25kaXRpb24iOjM1NCwiLi90by1idWZmZXIiOjM1NiwiY3JlYXRlLWhhc2gvbWQ1IjoyMjMsInJpcGVtZDE2MCI6MzgzLCJzYWZlLWJ1ZmZlciI6Mzg0LCJzaGEuanMiOjM4OX1dLDM1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsK
Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoaW5nLCBlbmNvZGluZywgbmFtZSkgewogIGlmIChCdWZmZXIuaXNCdWZmZXIodGhpbmcpKSB7CiAgICByZXR1cm4gdGhpbmc7CiAgfSBlbHNlIGlmICh0eXBlb2YgdGhpbmcgPT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpbmcsIGVuY29kaW5nKTsKICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh0aGluZykpIHsKICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGluZy5idWZmZXIpOwogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9y
KG5hbWUgKyAnIG11c3QgYmUgYSBzdHJpbmcsIGEgQnVmZmVyLCBhIHR5cGVkIGFycmF5IG9yIGEgRGF0YVZpZXcnKTsKICB9Cn07Cgp9LHsic2FmZS1idWZmZXIiOjM4NH1dLDM1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7Cid1c2Ugc3RyaWN0JzsKCmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXByb2Nlc3MudmVyc2lvbiB8fCBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjAuJykgPT09IDAgfHwgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3Yx
LicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7CiAgbW9kdWxlLmV4cG9ydHMgPSB7CiAgICBuZXh0VGljazogbmV4dFRpY2sKICB9Owp9IGVsc2UgewogIG1vZHVsZS5leHBvcnRzID0gcHJvY2VzczsKfQoKZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHsKICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCciY2FsbGJhY2siIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpOwogIH0KCiAgdmFyIGxl
biA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgdmFyIGFyZ3MsIGk7CgogIHN3aXRjaCAobGVuKSB7CiAgICBjYXNlIDA6CiAgICBjYXNlIDE6CiAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTsKCiAgICBjYXNlIDI6CiAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHsKICAgICAgICBmbi5jYWxsKG51bGwsIGFyZzEpOwogICAgICB9KTsKCiAgICBjYXNlIDM6CiAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHsKICAgICAgICBm
bi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpOwogICAgICB9KTsKCiAgICBjYXNlIDQ6CiAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkgewogICAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7CiAgICAgIH0pOwoKICAgIGRlZmF1bHQ6CiAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7CiAgICAgIGkgPSAwOwoKICAgICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkgewogICAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTsKICAgICAgfQoKICAgICAg
cmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkgewogICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpOwogICAgICB9KTsKICB9Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKQoKfSx7Il9wcm9jZXNzIjozNTh9XSwzNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXIKdmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9OyAvLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBn
bG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXQKLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzCi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGEKLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy4KCnZhciBjYWNoZWRTZXRUaW1lb3V0Owp2YXIgY2Fj
aGVkQ2xlYXJUaW1lb3V0OwoKZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTsKfQoKZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpOwp9CgooZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7
CiAgICB9IGVsc2UgewogICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDsKICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDsKICB9CgogIHRyeSB7CiAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7CiAgICB9IGVsc2UgewogICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0OwogICAgfQogIH0gY2F0Y2ggKGUp
IHsKICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CiAgfQp9KSgpOwoKZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHsKICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkgewogICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zCiAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApOwogIH0gLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWQKCgogIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVs
dFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkgewogICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApOwogIH0KCiAgdHJ5IHsKICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3MKICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7CiAgfSBjYXRjaCAoZSkgewogICAgdHJ5IHsKICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQg
dGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdp
bGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IKICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApOwogICAgfQogIH0KfQoKZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikgewogIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkgewogICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zCiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgfSAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBk
ZWZpbmVkCgoKICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHsKICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDsKICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTsKICB9CgogIHRyeSB7CiAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzCiAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7
CiAgfSBjYXRjaCAoZSkgewogICAgdHJ5IHsKICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseQogICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwg
b2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuCiAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXQKICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7CiAgICB9CiAgfQp9Cgp2YXIgcXVldWUgPSBbXTsKdmFyIGRyYWluaW5nID0gZmFsc2U7CnZhciBjdXJyZW50UXVldWU7CnZhciBxdWV1
ZUluZGV4ID0gLTE7CgpmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7CiAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7CiAgICByZXR1cm47CiAgfQoKICBkcmFpbmluZyA9IGZhbHNlOwoKICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkgewogICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTsKICB9IGVsc2UgewogICAgcXVldWVJbmRleCA9IC0xOwogIH0KCiAgaWYgKHF1ZXVlLmxlbmd0aCkgewogICAgZHJhaW5RdWV1ZSgpOwogIH0KfQoKZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHsKICBpZiAo
ZHJhaW5pbmcpIHsKICAgIHJldHVybjsKICB9CgogIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spOwogIGRyYWluaW5nID0gdHJ1ZTsKICB2YXIgbGVuID0gcXVldWUubGVuZ3RoOwoKICB3aGlsZSAobGVuKSB7CiAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTsKICAgIHF1ZXVlID0gW107CgogICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikgewogICAgICBpZiAoY3VycmVudFF1ZXVlKSB7CiAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpOwogICAgICB9CiAgICB9CgogICAgcXVl
dWVJbmRleCA9IC0xOwogICAgbGVuID0gcXVldWUubGVuZ3RoOwogIH0KCiAgY3VycmVudFF1ZXVlID0gbnVsbDsKICBkcmFpbmluZyA9IGZhbHNlOwogIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTsKfQoKcHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHsKICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7CgogIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgewogICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgYXJnc1tpIC0gMV0gPSBh
cmd1bWVudHNbaV07CiAgICB9CiAgfQoKICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpOwoKICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykgewogICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTsKICB9Cn07IC8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHMKCgpmdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHsKICB0aGlzLmZ1biA9IGZ1bjsKICB0aGlzLmFycmF5ID0gYXJyYXk7Cn0KCkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLmZ1bi5hcHBseShudWxsLCB0
aGlzLmFycmF5KTsKfTsKCnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7CnByb2Nlc3MuYnJvd3NlciA9IHRydWU7CnByb2Nlc3MuZW52ID0ge307CnByb2Nlc3MuYXJndiA9IFtdOwpwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXMKCnByb2Nlc3MudmVyc2lvbnMgPSB7fTsKCmZ1bmN0aW9uIG5vb3AoKSB7fQoKcHJvY2Vzcy5vbiA9IG5vb3A7CnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wOwpwcm9jZXNzLm9uY2UgPSBub29wOwpwcm9jZXNzLm9mZiA9IG5vb3A7CnBy
b2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wOwpwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7CnByb2Nlc3MuZW1pdCA9IG5vb3A7CnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDsKcHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDsKCnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsKICByZXR1cm4gW107Cn07Cgpwcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkgewogIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTsK
fTsKCnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgewogIHJldHVybiAnLyc7Cn07Cgpwcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikgewogIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7Cn07Cgpwcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24gKCkgewogIHJldHVybiAwOwp9OwoKfSx7fV0sMzU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgnLi9wdWJsaWNFbmNyeXB0Jyk7CmV4
cG9ydHMucHJpdmF0ZURlY3J5cHQgPSByZXF1aXJlKCcuL3ByaXZhdGVEZWNyeXB0Jyk7CgpleHBvcnRzLnByaXZhdGVFbmNyeXB0ID0gZnVuY3Rpb24gcHJpdmF0ZUVuY3J5cHQoa2V5LCBidWYpIHsKICByZXR1cm4gZXhwb3J0cy5wdWJsaWNFbmNyeXB0KGtleSwgYnVmLCB0cnVlKTsKfTsKCmV4cG9ydHMucHVibGljRGVjcnlwdCA9IGZ1bmN0aW9uIHB1YmxpY0RlY3J5cHQoa2V5LCBidWYpIHsKICByZXR1cm4gZXhwb3J0cy5wcml2YXRlRGVjcnlwdChrZXksIGJ1ZiwgdHJ1ZSk7Cn07Cgp9LHsiLi9wcml2YXRlRGVjcnlwdCI6
MzYyLCIuL3B1YmxpY0VuY3J5cHQiOjM2M31dLDM2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTsKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlZWQsIGxlbikgewogIHZhciB0ID0gQnVmZmVyLmFsbG9jKDApOwogIHZhciBpID0gMDsKICB2YXIgYzsKCiAgd2hpbGUgKHQubGVuZ3RoIDwgbGVuKSB7CiAgICBjID0gaTJvcHMo
aSsrKTsKICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKHNlZWQpLnVwZGF0ZShjKS5kaWdlc3QoKV0pOwogIH0KCiAgcmV0dXJuIHQuc2xpY2UoMCwgbGVuKTsKfTsKCmZ1bmN0aW9uIGkyb3BzKGMpIHsKICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQpOwogIG91dC53cml0ZVVJbnQzMkJFKGMsIDApOwogIHJldHVybiBvdXQ7Cn0KCn0seyJjcmVhdGUtaGFzaCI6MjIyLCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMzYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsK
YXJndW1lbnRzWzRdWzE4MV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJidWZmZXIiOjE4NSwiZHVwIjoxODF9XSwzNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpOwoKdmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJyk7Cgp2YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKTsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKTsKCnZhciBjcmVh
dGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTsKCnZhciB3aXRoUHVibGljID0gcmVxdWlyZSgnLi93aXRoUHVibGljJyk7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByaXZhdGVEZWNyeXB0KHByaXZhdGVLZXksIGVuYywgcmV2ZXJzZSkgewogIHZhciBwYWRkaW5nOwoKICBpZiAocHJpdmF0ZUtleS5wYWRkaW5nKSB7CiAgICBwYWRkaW5nID0gcHJpdmF0ZUtleS5wYWRkaW5nOwogIH0gZWxzZSBpZiAocmV2ZXJzZSkgewogICAgcGFk
ZGluZyA9IDE7CiAgfSBlbHNlIHsKICAgIHBhZGRpbmcgPSA0OwogIH0KCiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwcml2YXRlS2V5KTsKICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTsKCiAgaWYgKGVuYy5sZW5ndGggPiBrIHx8IG5ldyBCTihlbmMpLmNtcChrZXkubW9kdWx1cykgPj0gMCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7CiAgfQoKICB2YXIgbXNnOwoKICBpZiAocmV2ZXJzZSkgewogICAgbXNnID0gd2l0aFB1YmxpYyhuZXcgQk4oZW5jKSwga2V5KTsKICB9IGVsc2Ug
ewogICAgbXNnID0gY3J0KGVuYywga2V5KTsKICB9CgogIHZhciB6QnVmZmVyID0gQnVmZmVyLmFsbG9jKGsgLSBtc2cubGVuZ3RoKTsKICBtc2cgPSBCdWZmZXIuY29uY2F0KFt6QnVmZmVyLCBtc2ddLCBrKTsKCiAgaWYgKHBhZGRpbmcgPT09IDQpIHsKICAgIHJldHVybiBvYWVwKGtleSwgbXNnKTsKICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHsKICAgIHJldHVybiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSk7CiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7CiAgICByZXR1cm4gbXNnOwogIH0gZWxzZSB7CiAgICB0
aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpOwogIH0KfTsKCmZ1bmN0aW9uIG9hZXAoa2V5LCBtc2cpIHsKICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTsKICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKEJ1ZmZlci5hbGxvYygwKSkuZGlnZXN0KCk7CiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGg7CgogIGlmIChtc2dbMF0gIT09IDApIHsKICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpOwogIH0KCiAgdmFyIG1hc2tlZFNlZWQgPSBtc2cuc2xpY2UoMSwg
aExlbiArIDEpOwogIHZhciBtYXNrZWREYiA9IG1zZy5zbGljZShoTGVuICsgMSk7CiAgdmFyIHNlZWQgPSB4b3IobWFza2VkU2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSk7CiAgdmFyIGRiID0geG9yKG1hc2tlZERiLCBtZ2Yoc2VlZCwgayAtIGhMZW4gLSAxKSk7CgogIGlmIChjb21wYXJlKGlIYXNoLCBkYi5zbGljZSgwLCBoTGVuKSkpIHsKICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpOwogIH0KCiAgdmFyIGkgPSBoTGVuOwoKICB3aGlsZSAoZGJbaV0gPT09IDApIHsKICAgIGkrKzsKICB9CgogIGlm
IChkYltpKytdICE9PSAxKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTsKICB9CgogIHJldHVybiBkYi5zbGljZShpKTsKfQoKZnVuY3Rpb24gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpIHsKICB2YXIgcDEgPSBtc2cuc2xpY2UoMCwgMik7CiAgdmFyIGkgPSAyOwogIHZhciBzdGF0dXMgPSAwOwoKICB3aGlsZSAobXNnW2krK10gIT09IDApIHsKICAgIGlmIChpID49IG1zZy5sZW5ndGgpIHsKICAgICAgc3RhdHVzKys7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgdmFyIHBzID0gbXNnLnNsaWNl
KDIsIGkgLSAxKTsKCiAgaWYgKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDInICYmICFyZXZlcnNlIHx8IHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDEnICYmIHJldmVyc2UpIHsKICAgIHN0YXR1cysrOwogIH0KCiAgaWYgKHBzLmxlbmd0aCA8IDgpIHsKICAgIHN0YXR1cysrOwogIH0KCiAgaWYgKHN0YXR1cykgewogICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7CiAgfQoKICByZXR1cm4gbXNnLnNsaWNlKGkpOwp9CgpmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHsKICBhID0gQnVmZmVyLmZyb20o
YSk7CiAgYiA9IEJ1ZmZlci5mcm9tKGIpOwogIHZhciBkaWYgPSAwOwogIHZhciBsZW4gPSBhLmxlbmd0aDsKCiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgewogICAgZGlmKys7CiAgICBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpOwogIH0KCiAgdmFyIGkgPSAtMTsKCiAgd2hpbGUgKCsraSA8IGxlbikgewogICAgZGlmICs9IGFbaV0gXiBiW2ldOwogIH0KCiAgcmV0dXJuIGRpZjsKfQoKfSx7Ii4vbWdmIjozNjAsIi4vd2l0aFB1YmxpYyI6MzY0LCIuL3hvciI6MzY1LCJibi5qcyI6MzYxLCJicm93c2Vy
aWZ5LXJzYSI6MjA2LCJjcmVhdGUtaGFzaCI6MjIyLCJwYXJzZS1hc24xIjozNTAsInNhZmUtYnVmZmVyIjozODR9XSwzNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpOwoKdmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTsKCnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKTsKCnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpOwoKdmFyIHhvciA9IHJlcXVpcmUoJy4veG9y
Jyk7Cgp2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpOwoKdmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKTsKCnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwdWJsaWNFbmNyeXB0KHB1YmxpY0tleSwgbXNnLCByZXZlcnNlKSB7CiAgdmFyIHBhZGRpbmc7CgogIGlmIChwdWJsaWNLZXkucGFkZGluZykgewogICAgcGFkZGluZyA9IHB1YmxpY0tleS5wYWRkaW5n
OwogIH0gZWxzZSBpZiAocmV2ZXJzZSkgewogICAgcGFkZGluZyA9IDE7CiAgfSBlbHNlIHsKICAgIHBhZGRpbmcgPSA0OwogIH0KCiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwdWJsaWNLZXkpOwogIHZhciBwYWRkZWRNc2c7CgogIGlmIChwYWRkaW5nID09PSA0KSB7CiAgICBwYWRkZWRNc2cgPSBvYWVwKGtleSwgbXNnKTsKICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHsKICAgIHBhZGRlZE1zZyA9IHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKTsKICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHsKICAgIHBhZGRlZE1zZyA9
IG5ldyBCTihtc2cpOwoKICAgIGlmIChwYWRkZWRNc2cuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSB0b28gbG9uZyBmb3IgbW9kdWx1cycpOwogICAgfQogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpOwogIH0KCiAgaWYgKHJldmVyc2UpIHsKICAgIHJldHVybiBjcnQocGFkZGVkTXNnLCBrZXkpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gd2l0aFB1YmxpYyhwYWRkZWRNc2csIGtleSk7CiAgfQp9OwoKZnVuY3Rpb24gb2FlcChrZXksIG1z
ZykgewogIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpOwogIHZhciBtTGVuID0gbXNnLmxlbmd0aDsKICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKEJ1ZmZlci5hbGxvYygwKSkuZGlnZXN0KCk7CiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGg7CiAgdmFyIGhMZW4yID0gMiAqIGhMZW47CgogIGlmIChtTGVuID4gayAtIGhMZW4yIC0gMikgewogICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJyk7CiAgfQoKICB2YXIgcHMgPSBCdWZmZXIuYWxsb2MoayAtIG1MZW4gLSBoTGVu
MiAtIDIpOwogIHZhciBkYmxlbiA9IGsgLSBoTGVuIC0gMTsKICB2YXIgc2VlZCA9IHJhbmRvbUJ5dGVzKGhMZW4pOwogIHZhciBtYXNrZWREYiA9IHhvcihCdWZmZXIuY29uY2F0KFtpSGFzaCwgcHMsIEJ1ZmZlci5hbGxvYygxLCAxKSwgbXNnXSwgZGJsZW4pLCBtZ2Yoc2VlZCwgZGJsZW4pKTsKICB2YXIgbWFza2VkU2VlZCA9IHhvcihzZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKTsKICByZXR1cm4gbmV3IEJOKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5hbGxvYygxKSwgbWFza2VkU2VlZCwgbWFza2VkRGJdLCBrKSk7Cn0KCmZ1
bmN0aW9uIHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKSB7CiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoOwogIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpOwoKICBpZiAobUxlbiA+IGsgLSAxMSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJyk7CiAgfQoKICB2YXIgcHM7CgogIGlmIChyZXZlcnNlKSB7CiAgICBwcyA9IEJ1ZmZlci5hbGxvYyhrIC0gbUxlbiAtIDMsIDB4ZmYpOwogIH0gZWxzZSB7CiAgICBwcyA9IG5vblplcm8oayAtIG1MZW4gLSAzKTsKICB9CgogIHJldHVybiBuZXcgQk4o
QnVmZmVyLmNvbmNhdChbQnVmZmVyLmZyb20oWzAsIHJldmVyc2UgPyAxIDogMl0pLCBwcywgQnVmZmVyLmFsbG9jKDEpLCBtc2ddLCBrKSk7Cn0KCmZ1bmN0aW9uIG5vblplcm8obGVuKSB7CiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pOwogIHZhciBpID0gMDsKICB2YXIgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4gKiAyKTsKICB2YXIgY3VyID0gMDsKICB2YXIgbnVtOwoKICB3aGlsZSAoaSA8IGxlbikgewogICAgaWYgKGN1ciA9PT0gY2FjaGUubGVuZ3RoKSB7CiAgICAgIGNhY2hlID0gcmFuZG9tQnl0ZXMo
bGVuICogMik7CiAgICAgIGN1ciA9IDA7CiAgICB9CgogICAgbnVtID0gY2FjaGVbY3VyKytdOwoKICAgIGlmIChudW0pIHsKICAgICAgb3V0W2krK10gPSBudW07CiAgICB9CiAgfQoKICByZXR1cm4gb3V0Owp9Cgp9LHsiLi9tZ2YiOjM2MCwiLi93aXRoUHVibGljIjozNjQsIi4veG9yIjozNjUsImJuLmpzIjozNjEsImJyb3dzZXJpZnktcnNhIjoyMDYsImNyZWF0ZS1oYXNoIjoyMjIsInBhcnNlLWFzbjEiOjM1MCwicmFuZG9tYnl0ZXMiOjM2Niwic2FmZS1idWZmZXIiOjM4NH1dLDM2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1
bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7CgpmdW5jdGlvbiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KSB7CiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHBhZGRlZE1zZy50b1JlZChCTi5tb250KGtleS5tb2R1bHVzKSkucmVkUG93KG5ldyBCTihrZXkucHVibGljRXhwb25lbnQpKS5mcm9tUmVkKCkudG9BcnJheSgpKTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB3aXRoUHVibGljOwoKfSx7ImJuLmpzIjoz
NjEsInNhZmUtYnVmZmVyIjozODR9XSwzNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvcihhLCBiKSB7CiAgdmFyIGxlbiA9IGEubGVuZ3RoOwogIHZhciBpID0gLTE7CgogIHdoaWxlICgrK2kgPCBsZW4pIHsKICAgIGFbaV0gXj0gYltpXTsKICB9CgogIHJldHVybiBhOwp9OwoKfSx7fV0sMzY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7Cid1c2Ugc3RyaWN0Jzsg
Ly8gbGltaXQgb2YgQ3J5cHRvLmdldFJhbmRvbVZhbHVlcygpCi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DcnlwdG8vZ2V0UmFuZG9tVmFsdWVzCgp2YXIgTUFYX0JZVEVTID0gNjU1MzY7IC8vIE5vZGUgc3VwcG9ydHMgcmVxdWVzdGluZyB1cCB0byB0aGlzIG51bWJlciBvZiBieXRlcwovLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL2ludGVybmFsL2NyeXB0by9yYW5kb20uanMjTDQ4Cgp2YXIgTUFYX1VJTlQzMiA9IDQyOTQ5NjcyOTU7
CgpmdW5jdGlvbiBvbGRCcm93c2VyKCkgewogIHRocm93IG5ldyBFcnJvcignU2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci5cblVzZSBDaHJvbWUsIEZpcmVmb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKTsKfQoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKdmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvOwoKaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7CiAgbW9k
dWxlLmV4cG9ydHMgPSByYW5kb21CeXRlczsKfSBlbHNlIHsKICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXI7Cn0KCmZ1bmN0aW9uIHJhbmRvbUJ5dGVzKHNpemUsIGNiKSB7CiAgLy8gcGhhbnRvbWpzIG5lZWRzIHRvIHRocm93CiAgaWYgKHNpemUgPiBNQVhfVUlOVDMyKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcigncmVxdWVzdGVkIHRvbyBtYW55IHJhbmRvbSBieXRlcycpOwogIHZhciBieXRlcyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKTsKCiAgaWYgKHNpemUgPiAwKSB7CiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgZmFp
bHMgb24gSUUgaWYgc2l6ZSA9PSAwCiAgICBpZiAoc2l6ZSA+IE1BWF9CWVRFUykgewogICAgICAvLyB0aGlzIGlzIHRoZSBtYXggYnl0ZXMgY3J5cHRvLmdldFJhbmRvbVZhbHVlcwogICAgICAvLyBjYW4gZG8gYXQgb25jZSBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzCiAgICAgIGZvciAodmFyIGdlbmVyYXRlZCA9IDA7IGdlbmVyYXRlZCA8IHNpemU7IGdlbmVyYXRlZCArPSBNQVhfQllURVMpIHsKICAgICAgICAvLyBidWZm
ZXIuc2xpY2UgYXV0b21hdGljYWxseSBjaGVja3MgaWYgdGhlIGVuZCBpcyBwYXN0IHRoZSBlbmQgb2YKICAgICAgICAvLyB0aGUgYnVmZmVyIHNvIHdlIGRvbid0IGhhdmUgdG8gaGVyZQogICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMuc2xpY2UoZ2VuZXJhdGVkLCBnZW5lcmF0ZWQgKyBNQVhfQllURVMpKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7CiAgICB9CiAgfQoKICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7CiAgICByZXR1cm4g
cHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgIGNiKG51bGwsIGJ5dGVzKTsKICAgIH0pOwogIH0KCiAgcmV0dXJuIGJ5dGVzOwp9Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQoKfSx7Il9wcm9jZXNzIjozNTgsInNhZmUtYnVmZmVyIjozODR9XSwzNjc6W2Z1bmN0aW9uKHJlcXVp
cmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gb2xkQnJvd3NlcigpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcbnVzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKTsKfQoKdmFyIHNhZmVCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpOwoKdmFyIHJhbmRvbWJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMn
KTsKCnZhciBCdWZmZXIgPSBzYWZlQnVmZmVyLkJ1ZmZlcjsKdmFyIGtCdWZmZXJNYXhMZW5ndGggPSBzYWZlQnVmZmVyLmtNYXhMZW5ndGg7CnZhciBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bzsKdmFyIGtNYXhVaW50MzIgPSBNYXRoLnBvdygyLCAzMikgLSAxOwoKZnVuY3Rpb24gYXNzZXJ0T2Zmc2V0KG9mZnNldCwgbGVuZ3RoKSB7CiAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAhPT0gb2Zmc2V0KSB7CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYt
Y29tcGFyZQogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb2Zmc2V0IG11c3QgYmUgYSBudW1iZXInKTsKICB9CgogIGlmIChvZmZzZXQgPiBrTWF4VWludDMyIHx8IG9mZnNldCA8IDApIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29mZnNldCBtdXN0IGJlIGEgdWludDMyJyk7CiAgfQoKICBpZiAob2Zmc2V0ID4ga0J1ZmZlck1heExlbmd0aCB8fCBvZmZzZXQgPiBsZW5ndGgpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgb3V0IG9mIHJhbmdlJyk7CiAgfQp9CgpmdW5jdGlvbiBhc3NlcnRTaXplKHNpemUs
IG9mZnNldCwgbGVuZ3RoKSB7CiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJyB8fCBzaXplICE9PSBzaXplKSB7CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZQogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtdXN0IGJlIGEgbnVtYmVyJyk7CiAgfQoKICBpZiAoc2l6ZSA+IGtNYXhVaW50MzIgfHwgc2l6ZSA8IDApIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIHVpbnQzMicpOwogIH0KCiAgaWYgKHNpemUgKyBvZmZzZXQgPiBsZW5ndGggfHwgc2l6ZSA+
IGtCdWZmZXJNYXhMZW5ndGgpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdidWZmZXIgdG9vIHNtYWxsJyk7CiAgfQp9CgppZiAoY3J5cHRvICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgfHwgIXByb2Nlc3MuYnJvd3NlcikgewogIGV4cG9ydHMucmFuZG9tRmlsbCA9IHJhbmRvbUZpbGw7CiAgZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJhbmRvbUZpbGxTeW5jOwp9IGVsc2UgewogIGV4cG9ydHMucmFuZG9tRmlsbCA9IG9sZEJyb3dzZXI7CiAgZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IG9sZEJyb3dzZXI7Cn0KCmZ1
bmN0aW9uIHJhbmRvbUZpbGwoYnVmLCBvZmZzZXQsIHNpemUsIGNiKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSAmJiAhKGJ1ZiBpbnN0YW5jZW9mIGdsb2JhbC5VaW50OEFycmF5KSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignImJ1ZiIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBvciBVaW50OEFycmF5Jyk7CiAgfQoKICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykgewogICAgY2IgPSBvZmZzZXQ7CiAgICBvZmZzZXQgPSAwOwogICAgc2l6ZSA9IGJ1Zi5sZW5ndGg7CiAgfSBlbHNlIGlmICh0
eXBlb2Ygc2l6ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgY2IgPSBzaXplOwogICAgc2l6ZSA9IGJ1Zi5sZW5ndGggLSBvZmZzZXQ7CiAgfSBlbHNlIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJjYiIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgfQoKICBhc3NlcnRPZmZzZXQob2Zmc2V0LCBidWYubGVuZ3RoKTsKICBhc3NlcnRTaXplKHNpemUsIG9mZnNldCwgYnVmLmxlbmd0aCk7CiAgcmV0dXJuIGFjdHVhbEZpbGwoYnVmLCBvZmZzZXQsIHNpemUsIGNi
KTsKfQoKZnVuY3Rpb24gYWN0dWFsRmlsbChidWYsIG9mZnNldCwgc2l6ZSwgY2IpIHsKICBpZiAocHJvY2Vzcy5icm93c2VyKSB7CiAgICB2YXIgb3VyQnVmID0gYnVmLmJ1ZmZlcjsKICAgIHZhciB1aW50ID0gbmV3IFVpbnQ4QXJyYXkob3VyQnVmLCBvZmZzZXQsIHNpemUpOwogICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1aW50KTsKCiAgICBpZiAoY2IpIHsKICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgY2IobnVsbCwgYnVmKTsKICAgICAgfSk7CiAgICAgIHJldHVybjsKICAgIH0KCiAg
ICByZXR1cm4gYnVmOwogIH0KCiAgaWYgKGNiKSB7CiAgICByYW5kb21ieXRlcyhzaXplLCBmdW5jdGlvbiAoZXJyLCBieXRlcykgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgIH0KCiAgICAgIGJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpOwogICAgICBjYihudWxsLCBidWYpOwogICAgfSk7CiAgICByZXR1cm47CiAgfQoKICB2YXIgYnl0ZXMgPSByYW5kb21ieXRlcyhzaXplKTsKICBieXRlcy5jb3B5KGJ1Ziwgb2Zmc2V0KTsKICByZXR1cm4gYnVmOwp9CgpmdW5jdGlvbiByYW5kb21GaWxs
U3luYyhidWYsIG9mZnNldCwgc2l6ZSkgewogIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJykgewogICAgb2Zmc2V0ID0gMDsKICB9CgogIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikgJiYgIShidWYgaW5zdGFuY2VvZiBnbG9iYWwuVWludDhBcnJheSkpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJidWYiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpOwogIH0KCiAgYXNzZXJ0T2Zmc2V0KG9mZnNldCwgYnVmLmxlbmd0aCk7CiAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkgc2l6
ZSA9IGJ1Zi5sZW5ndGggLSBvZmZzZXQ7CiAgYXNzZXJ0U2l6ZShzaXplLCBvZmZzZXQsIGJ1Zi5sZW5ndGgpOwogIHJldHVybiBhY3R1YWxGaWxsKGJ1Ziwgb2Zmc2V0LCBzaXplKTsKfQoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJyksdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0seyJfcHJvY2VzcyI6MzU4LCJyYW5kb21ieXRlcyI6MzY2
LCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMzY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsg
cmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOwogIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1
YkNsYXNzOwogIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7Cn0KCnZhciBjb2RlcyA9IHt9OwoKZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIG1lc3NhZ2UsIEJhc2UpIHsKICBpZiAoIUJhc2UpIHsKICAgIEJhc2UgPSBFcnJvcjsKICB9CgogIGZ1bmN0aW9uIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykgewogICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykgewogICAgICByZXR1cm4gbWVzc2FnZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBtZXNzYWdlKGFyZzEsIGFyZzIsIGFy
ZzMpOwogICAgfQogIH0KCiAgdmFyIE5vZGVFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2UpIHsKICAgIF9pbmhlcml0c0xvb3NlKE5vZGVFcnJvciwgX0Jhc2UpOwoKICAgIGZ1bmN0aW9uIE5vZGVFcnJvcihhcmcxLCBhcmcyLCBhcmczKSB7CiAgICAgIHJldHVybiBfQmFzZS5jYWxsKHRoaXMsIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykpIHx8IHRoaXM7CiAgICB9CgogICAgcmV0dXJuIE5vZGVFcnJvcjsKICB9KEJhc2UpOwoKICBOb2RlRXJyb3IucHJvdG90eXBlLm5hbWUgPSBCYXNlLm5hbWU7CiAg
Tm9kZUVycm9yLnByb3RvdHlwZS5jb2RlID0gY29kZTsKICBjb2Rlc1tjb2RlXSA9IE5vZGVFcnJvcjsKfSAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanMKCgpmdW5jdGlvbiBvbmVPZihleHBlY3RlZCwgdGhpbmcpIHsKICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3RlZCkpIHsKICAgIHZhciBsZW4gPSBleHBlY3RlZC5sZW5ndGg7CiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLm1hcChmdW5jdGlvbiAoaSkgewogICAgICByZXR1cm4gU3RyaW5nKGkpOwog
ICAgfSk7CgogICAgaWYgKGxlbiA+IDIpIHsKICAgICAgcmV0dXJuICJvbmUgb2YgIi5jb25jYXQodGhpbmcsICIgIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksICIsIG9yICIpICsgZXhwZWN0ZWRbbGVuIC0gMV07CiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikgewogICAgICByZXR1cm4gIm9uZSBvZiAiLmNvbmNhdCh0aGluZywgIiAiKS5jb25jYXQoZXhwZWN0ZWRbMF0sICIgb3IgIikuY29uY2F0KGV4cGVjdGVkWzFdKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAib2YgIi5jb25j
YXQodGhpbmcsICIgIikuY29uY2F0KGV4cGVjdGVkWzBdKTsKICAgIH0KICB9IGVsc2UgewogICAgcmV0dXJuICJvZiAiLmNvbmNhdCh0aGluZywgIiAiKS5jb25jYXQoU3RyaW5nKGV4cGVjdGVkKSk7CiAgfQp9IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zdGFydHNXaXRoCgoKZnVuY3Rpb24gc3RhcnRzV2l0aChzdHIsIHNlYXJjaCwgcG9zKSB7CiAgcmV0dXJuIHN0ci5zdWJzdHIoIXBvcyB8fCBwb3MgPCAw
ID8gMCA6ICtwb3MsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7Cn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoCgoKZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7CiAgaWYgKHRoaXNfbGVuID09PSB1bmRlZmluZWQgfHwgdGhpc19sZW4gPiBzdHIubGVuZ3RoKSB7CiAgICB0aGlzX2xlbiA9IHN0ci5sZW5ndGg7CiAgfQoKICByZXR1cm4gc3RyLnN1YnN0cmluZyh0
aGlzX2xlbiAtIHNlYXJjaC5sZW5ndGgsIHRoaXNfbGVuKSA9PT0gc2VhcmNoOwp9IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmNsdWRlcwoKCmZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkgewogIGlmICh0eXBlb2Ygc3RhcnQgIT09ICdudW1iZXInKSB7CiAgICBzdGFydCA9IDA7CiAgfQoKICBpZiAoc3RhcnQgKyBzZWFyY2gubGVuZ3RoID4gc3RyLmxlbmd0aCkgewogICAgcmV0dXJu
IGZhbHNlOwogIH0gZWxzZSB7CiAgICByZXR1cm4gc3RyLmluZGV4T2Yoc2VhcmNoLCBzdGFydCkgIT09IC0xOwogIH0KfQoKY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9PUFRfVkFMVUUnLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHsKICByZXR1cm4gJ1RoZSB2YWx1ZSAiJyArIHZhbHVlICsgJyIgaXMgaW52YWxpZCBmb3Igb3B0aW9uICInICsgbmFtZSArICciJzsKfSwgVHlwZUVycm9yKTsKY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsIGZ1bmN0aW9uIChuYW1lLCBleHBlY3RlZCwgYWN0dWFs
KSB7CiAgLy8gZGV0ZXJtaW5lcjogJ211c3QgYmUnIG9yICdtdXN0IG5vdCBiZScKICB2YXIgZGV0ZXJtaW5lcjsKCiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycgJiYgc3RhcnRzV2l0aChleHBlY3RlZCwgJ25vdCAnKSkgewogICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7CiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLnJlcGxhY2UoL15ub3QgLywgJycpOwogIH0gZWxzZSB7CiAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnOwogIH0KCiAgdmFyIG1zZzsKCiAgaWYgKGVuZHNXaXRoKG5hbWUsICcgYXJndW1l
bnQnKSkgewogICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50JwogICAgbXNnID0gIlRoZSAiLmNvbmNhdChuYW1lLCAiICIpLmNvbmNhdChkZXRlcm1pbmVyLCAiICIpLmNvbmNhdChvbmVPZihleHBlY3RlZCwgJ3R5cGUnKSk7CiAgfSBlbHNlIHsKICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnOwogICAgbXNnID0gIlRoZSBcIiIuY29uY2F0KG5hbWUsICJcIiAiKS5jb25jYXQodHlwZSwgIiAiKS5jb25jYXQoZGV0ZXJtaW5lciwgIiAiKS5jb25jYXQo
b25lT2YoZXhwZWN0ZWQsICd0eXBlJykpOwogIH0KCiAgbXNnICs9ICIuIFJlY2VpdmVkIHR5cGUgIi5jb25jYXQoX3R5cGVvZihhY3R1YWwpKTsKICByZXR1cm4gbXNnOwp9LCBUeXBlRXJyb3IpOwpjcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YnLCAnc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKTsKY3JlYXRlRXJyb3JUeXBlKCdFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCcsIGZ1bmN0aW9uIChuYW1lKSB7CiAgcmV0dXJuICdUaGUgJyArIG5hbWUgKyAnIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50
ZWQnOwp9KTsKY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRScsICdQcmVtYXR1cmUgY2xvc2UnKTsKY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX0RFU1RST1lFRCcsIGZ1bmN0aW9uIChuYW1lKSB7CiAgcmV0dXJuICdDYW5ub3QgY2FsbCAnICsgbmFtZSArICcgYWZ0ZXIgYSBzdHJlYW0gd2FzIGRlc3Ryb3llZCc7Cn0pOwpjcmVhdGVFcnJvclR5cGUoJ0VSUl9NVUxUSVBMRV9DQUxMQkFDSycsICdDYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKTsKY3JlYXRlRXJyb3JUeXBlKCdFUlJf
U1RSRUFNX0NBTk5PVF9QSVBFJywgJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKTsKY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCcsICd3cml0ZSBhZnRlciBlbmQnKTsKY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX05VTExfVkFMVUVTJywgJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJywgVHlwZUVycm9yKTsKY3JlYXRlRXJyb3JUeXBlKCdFUlJfVU5LTk9XTl9FTkNPRElORycsIGZ1bmN0aW9uIChhcmcpIHsKICByZXR1cm4gJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBh
cmc7Cn0sIFR5cGVFcnJvcik7CmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCcsICdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpOwptb2R1bGUuZXhwb3J0cy5jb2RlcyA9IGNvZGVzOwoKfSx7fV0sMzY5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZy
ZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUg
U29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhP
VVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04g
T0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgovLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLgovLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzcwovLyBwcm90b3R5cGFsbHkgaW5o
ZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tCi8vIFdyaXRhYmxlLgondXNlIHN0cmljdCc7Ci8qPHJlcGxhY2VtZW50PiovCgp2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHsKICB2YXIga2V5cyA9IFtdOwoKICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICBrZXlzLnB1c2goa2V5KTsKICB9CgogIHJldHVybiBrZXlzOwp9OwovKjwvcmVwbGFjZW1lbnQ+Ki8KCgptb2R1bGUuZXhwb3J0cyA9IER1cGxleDsKCnZhciBSZWFkYWJsZSA9IHJlcXVpcmUo
Jy4vX3N0cmVhbV9yZWFkYWJsZScpOwoKdmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7CgpyZXF1aXJlKCdpbmhlcml0cycpKER1cGxleCwgUmVhZGFibGUpOwoKewogIC8vIEFsbG93IHRoZSBrZXlzIGFycmF5IHRvIGJlIEdDJ2VkLgogIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpOwoKICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHsKICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdOwogICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0p
IER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdOwogIH0KfQoKZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7CiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTsKICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpOwogIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7CgogIGlmIChvcHRpb25zKSB7CiAgICBpZiAob3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRo
aXMucmVhZGFibGUgPSBmYWxzZTsKICAgIGlmIChvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlOwoKICAgIGlmIChvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB7CiAgICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlOwogICAgICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTsKICAgIH0KICB9Cn0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywgewogIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHBy
b3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlCiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluCiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsCiAgZW51bWVyYWJsZTogZmFsc2UsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVCdWZmZXInLCB7CiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkg
aXMgbm90IGVudW1lcmFibGUKICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW4KICAvLyB1c2VybGFuZCB3aWxsIGZhaWwKICBlbnVtZXJhYmxlOiBmYWxzZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyKCk7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUxlbmd0aCcsIHsKICAvLyBtYWtpbmcgaXQgZXhwbGljaXQg
dGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZQogIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpbgogIC8vIHVzZXJsYW5kIHdpbGwgZmFpbAogIGVudW1lcmFibGU6IGZhbHNlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoOwogIH0KfSk7IC8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXIKCmZ1bmN0aW9uIG9uZW5kKCkgewogIC8vIElmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLCB0aGVuIHdlJ3JlIG9rLgog
IGlmICh0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47IC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi4KICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay4KCiAgcHJvY2Vzcy5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTsKfQoKZnVuY3Rpb24gb25FbmROVChzZWxmKSB7CiAgc2VsZi5lbmQoKTsKfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7CiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMg
bm90IGVudW1lcmFibGUKICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW4KICAvLyB1c2VybGFuZCB3aWxsIGZhaWwKICBlbnVtZXJhYmxlOiBmYWxzZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3Jp
dGFibGVTdGF0ZS5kZXN0cm95ZWQ7CiAgfSwKICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtCiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0CiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm47CiAgICB9IC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHkKICAgIC8vIG1hbmFnaW5n
IGRlc3Ryb3llZAoKCiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlOwogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTsKICB9Cn0pOwoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpCgp9LHsiLi9fc3RyZWFtX3JlYWRhYmxlIjozNzEsIi4vX3N0cmVhbV93cml0YWJsZSI6MzczLCJfcHJvY2VzcyI6MzU4LCJpbmhlcml0cyI6Mjc4fV0sMzcwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3Ro
ZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1
Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9m
IHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5Z
IENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgovLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS4KLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uCi8vIEV2ZXJ5IHdyaXR0
ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuCid1c2Ugc3RyaWN0JzsKCm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7Cgp2YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpOwoKcmVxdWlyZSgnaW5oZXJpdHMnKShQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTsKCmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpOwogIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlv
bnMpOwp9CgpQYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgY2IobnVsbCwgY2h1bmspOwp9OwoKfSx7Ii4vX3N0cmVhbV90cmFuc2Zvcm0iOjM3MiwiaW5oZXJpdHMiOjI3OH1dLDM3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpewovLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRl
ZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQovLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9m
IHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAovLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwg
V0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFD
VElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgovLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCid1c2Ugc3RyaWN0JzsKCm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7Ci8qPHJlcGxhY2VtZW50PiovCgp2YXIgRHVwbGV4OwovKjwvcmVwbGFjZW1lbnQ+Ki8KClJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlOwovKjxyZXBsYWNlbWVudD4qLwoKdmFy
IEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyOwoKdmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIEVFbGlzdGVuZXJDb3VudChlbWl0dGVyLCB0eXBlKSB7CiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDsKfTsKLyo8L3JlcGxhY2VtZW50PiovCgovKjxyZXBsYWNlbWVudD4qLwoKCnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7Ci8qPC9yZXBsYWNlbWVudD4qLwoKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7Cgp2
YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9OwoKZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykgewogIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7Cn0KCmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7CiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7Cn0KLyo8cmVwbGFjZW1lbnQ+Ki8KCgp2YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpOwoKdmFyIGRlYnVnOwoKaWYgKGRlYnVnVXRp
bCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHsKICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7Cn0gZWxzZSB7CiAgZGVidWcgPSBmdW5jdGlvbiBkZWJ1ZygpIHt9Owp9Ci8qPC9yZXBsYWNlbWVudD4qLwoKCnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2J1ZmZlcl9saXN0Jyk7Cgp2YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpOwoKdmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlJyks
CiAgICBnZXRIaWdoV2F0ZXJNYXJrID0gX3JlcXVpcmUuZ2V0SGlnaFdhdGVyTWFyazsKCnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLmNvZGVzLAogICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSwKICAgIEVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GLAogICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05P
VF9JTVBMRU1FTlRFRCwKICAgIEVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UOyAvLyBMYXp5IGxvYWRlZCB0byBpbXByb3ZlIHRoZSBzdGFydHVwIHBlcmZvcm1hbmNlLgoKCnZhciBTdHJpbmdEZWNvZGVyOwp2YXIgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yOwp2YXIgZnJvbTsKCnJlcXVpcmUoJ2luaGVyaXRzJykoUmVhZGFibGUsIFN0cmVhbSk7Cgp2YXIgZXJyb3JPckRlc3Ryb3kgPSBkZXN0cm95SW1w
bC5lcnJvck9yRGVzdHJveTsKdmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTsKCmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHsKICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93bgogIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLgogIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicp
IHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pOyAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55CiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzCiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZQogIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIo
KSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay4KCiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChBcnJheS5pc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07Cn0KCmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0
aW9ucywgc3RyZWFtLCBpc0R1cGxleCkgewogIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlCiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuCiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnQKICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxl
IHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLgogIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLgoKICBpZiAodHlwZW9mIGlzRHVwbGV4ICE9PSAnYm9vbGVhbicpIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4OyAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0bwogIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5
CgogIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlOwogIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7IC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyCiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyAiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlciIKCiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZ2V0SGlnaFdh
dGVyTWFyayh0aGlzLCBvcHRpb25zLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywgaXNEdXBsZXgpOyAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZQogIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuCiAgLy8gYXJyYXkuc2hpZnQoKQoKICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7CiAgdGhpcy5sZW5ndGggPSAwOwogIHRoaXMucGlwZXMgPSBudWxsOwog
IHRoaXMucGlwZXNDb3VudCA9IDA7CiAgdGhpcy5mbG93aW5nID0gbnVsbDsKICB0aGlzLmVuZGVkID0gZmFsc2U7CiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7CiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWQKICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZQogIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhh
cHBlbiB1bnRpbCAibGF0ZXIiIHNob3VsZCBnZW5lcmFsbHkgYWxzbwogIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuCgogIHRoaXMuc3luYyA9IHRydWU7IC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5CiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uCgogIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7CiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTsKICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5n
ID0gZmFsc2U7CiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTsKICB0aGlzLnBhdXNlZCA9IHRydWU7IC8vIFNob3VsZCBjbG9zZSBiZSBlbWl0dGVkIG9uIGRlc3Ryb3kuIERlZmF1bHRzIHRvIHRydWUuCgogIHRoaXMuZW1pdENsb3NlID0gb3B0aW9ucy5lbWl0Q2xvc2UgIT09IGZhbHNlOyAvLyBTaG91bGQgLmRlc3Ryb3koKSBiZSBjYWxsZWQgYWZ0ZXIgJ2VuZCcgKGFuZCBwb3RlbnRpYWxseSAnZmluaXNoJykKCiAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTsgLy8gaGFzIGl0IGJlZW4g
ZGVzdHJveWVkCgogIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7IC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmcKICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuCiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLgoKICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsgLy8gdGhlIG51
bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXMKCiAgdGhpcy5hd2FpdERyYWluID0gMDsgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZAoKICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7CiAgdGhpcy5kZWNvZGVyID0gbnVsbDsKICB0aGlzLmVuY29kaW5nID0gbnVsbDsKCiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHsKICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycp
LlN0cmluZ0RlY29kZXI7CiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTsKICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nOwogIH0KfQoKZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykgewogIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTsgLy8gQ2hlY2tpbmcgZm9yIGEgU3RyZWFtLkR1cGxleCBpbnN0YW5j
ZSBpcyBmYXN0ZXIgaGVyZSBpbnN0ZWFkIG9mIGluc2lkZQogIC8vIHRoZSBSZWFkYWJsZVN0YXRlIGNvbnN0cnVjdG9yLCBhdCBsZWFzdCB3aXRoIFY4IDYuNQoKICB2YXIgaXNEdXBsZXggPSB0aGlzIGluc3RhbmNlb2YgRHVwbGV4OwogIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzLCBpc0R1cGxleCk7IC8vIGxlZ2FjeQoKICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTsKCiAgaWYgKG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0
aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkOwogICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7CiAgfQoKICBTdHJlYW0uY2FsbCh0aGlzKTsKfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHsKICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZQogIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBp
bgogIC8vIHVzZXJsYW5kIHdpbGwgZmFpbAogIGVudW1lcmFibGU6IGZhbHNlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkOwogIH0sCiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbQogICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldAogICAg
aWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7CiAgICAgIHJldHVybjsKICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseQogICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkCgoKICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7CiAgfQp9KTsKUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95OwpSZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTsKClJlYWRhYmxlLnByb3RvdHlw
ZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7CiAgY2IoZXJyKTsKfTsgLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuCi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LAovLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkCi8vIHdyaXRlKCkgc29tZSBtb3JlLgoKClJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGlu
ZykgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CiAgdmFyIHNraXBDaHVua0NoZWNrOwoKICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHsKICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7CiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nOwoKICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykgewogICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTsKICAgICAgICBlbmNvZGluZyA9ICcnOwogICAgICB9Cgog
ICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7CiAgICB9CiAgfSBlbHNlIHsKICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTsKICB9CgogIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTsKfTsgLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKCkKCgpSZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykgewogIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNo
dW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7Cn07CgpmdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykgewogIGRlYnVnKCdyZWFkYWJsZUFkZENodW5rJywgY2h1bmspOwogIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKCiAgaWYgKGNodW5rID09PSBudWxsKSB7CiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7CiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpOwogIH0gZWxzZSB7CiAgICB2YXIgZXI7CiAgICBpZiAoIXNr
aXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspOwoKICAgIGlmIChlcikgewogICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTsKICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7CiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHsKICAgICAgICBjaHVuayA9IF91aW50OEFycmF5
VG9CdWZmZXIoY2h1bmspOwogICAgICB9CgogICAgICBpZiAoYWRkVG9Gcm9udCkgewogICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBlcnJvck9yRGVzdHJveShzdHJlYW0sIG5ldyBFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UKCkpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpOwogICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7CiAgICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBuZXcgRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRigpKTsKICAgICAgfSBlbHNlIGlm
IChzdGF0ZS5kZXN0cm95ZWQpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlOwoKICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHsKICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7CiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3Rh
dGUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkgewogICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7CiAgICAgIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7CiAgICB9CiAgfSAvLyBXZSBjYW4gcHVzaCBtb3JlIGRhdGEgaWYgd2UgYXJlIGJlbG93IHRoZSBoaWdoV2F0ZXJNYXJrLgogIC8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFu
ZCBzb21lIG1vcmUgYnl0ZXMuCiAgLy8gVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCwgc3VjaCBhcyB0aGUgcmVwbC4KCgogIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTsKfQoKZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHsKICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHsKICAgIHN0YXRlLmF3
YWl0RHJhaW4gPSAwOwogICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7CiAgfSBlbHNlIHsKICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uCiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7CiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspOwogICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7CiAgfQoKICBtYXliZVJlYWRNb3JlKHN0cmVh
bSwgc3RhdGUpOwp9CgpmdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7CiAgdmFyIGVyOwoKICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkgewogICAgZXIgPSBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2NodW5rJywgWydzdHJpbmcnLCAnQnVmZmVyJywgJ1VpbnQ4QXJyYXknXSwgY2h1bmspOwogIH0KCiAgcmV0dXJuIGVyOwp9CgpSZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVz
ZWQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7Cn07IC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LgoKClJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHsKICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyOwogIHZhciBkZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTsKICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIg
PSBkZWNvZGVyOyAvLyBJZiBzZXRFbmNvZGluZyhudWxsKSwgZGVjb2Rlci5lbmNvZGluZyBlcXVhbHMgdXRmOAoKICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyLmVuY29kaW5nOyAvLyBJdGVyYXRlIG92ZXIgY3VycmVudCBidWZmZXIgdG8gY29udmVydCBhbHJlYWR5IHN0b3JlZCBCdWZmZXJzOgoKICB2YXIgcCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmhlYWQ7CiAgdmFyIGNvbnRlbnQgPSAnJzsKCiAgd2hpbGUgKHAgIT09IG51bGwpIHsKICAgIGNvbnRl
bnQgKz0gZGVjb2Rlci53cml0ZShwLmRhdGEpOwogICAgcCA9IHAubmV4dDsKICB9CgogIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmNsZWFyKCk7CgogIGlmIChjb250ZW50ICE9PSAnJykgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXIucHVzaChjb250ZW50KTsKICB0aGlzLl9yZWFkYWJsZVN0YXRlLmxlbmd0aCA9IGNvbnRlbnQubGVuZ3RoOwogIHJldHVybiB0aGlzOwp9OyAvLyBEb24ndCByYWlzZSB0aGUgaHdtID4gMUdCCgoKdmFyIE1BWF9IV00gPSAweDQwMDAwMDAwOwoKZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hX
YXRlck1hcmsobikgewogIGlmIChuID49IE1BWF9IV00pIHsKICAgIC8vIFRPRE8ocm9uYWcpOiBUaHJvdyBFUlJfVkFMVUVfT1VUX09GX1JBTkdFLgogICAgbiA9IE1BWF9IV007CiAgfSBlbHNlIHsKICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpbgogICAgLy8gdGlueSBhbW91bnRzCiAgICBuLS07CiAgICBuIHw9IG4gPj4+IDE7CiAgICBuIHw9IG4gPj4+IDI7CiAgICBuIHw9IG4gPj4+IDQ7CiAgICBuIHw9IG4gPj4+IDg7CiAgICBu
IHw9IG4gPj4+IDE2OwogICAgbisrOwogIH0KCiAgcmV0dXJuIG47Cn0gLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmcKLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS4KCgpmdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7CiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwOwogIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTsKCiAgaWYgKG4gIT09IG4p
IHsKICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZQogICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoOwogIH0gLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uCgoKICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTsK
ICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuOyAvLyBEb24ndCBoYXZlIGVub3VnaAoKICBpZiAoIXN0YXRlLmVuZGVkKSB7CiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlOwogICAgcmV0dXJuIDA7CiAgfQoKICByZXR1cm4gc3RhdGUubGVuZ3RoOwp9IC8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuCgoKUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikgewogIGRlYnVnKCdyZWFkJywgbik7CiAgbiA9IHBhcnNlSW50
KG4sIDEwKTsKICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwogIHZhciBuT3JpZyA9IG47CiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOyAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlCiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlcgogIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLgoKICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5u
ZWVkUmVhZGFibGUgJiYgKChzdGF0ZS5oaWdoV2F0ZXJNYXJrICE9PSAwID8gc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgOiBzdGF0ZS5sZW5ndGggPiAwKSB8fCBzdGF0ZS5lbmRlZCkpIHsKICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTsKICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpOwogICAgcmV0dXJuIG51bGw7CiAgfQoKICBuID0gaG93TXVj
aFRvUmVhZChuLCBzdGF0ZSk7IC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC4KCiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHsKICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpOwogICAgcmV0dXJuIG51bGw7CiAgfSAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlCiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluCiAgLy8g
c3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZAogIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2UKICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlbgogIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLgogIC8vCiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6CiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBi
ZSBhZnRlciB3ZSBkbwogIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuCiAgLy8KICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLgogIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpcwogIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhbgogIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUg
aW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmUKICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLgogIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbAogIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXQKICAvLyAncmVhZGFibGUnIGV0Yy4KICAvLwogIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIg
YW5kIHJldHVybi4KICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuCgoKICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlOwogIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTsgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lCgogIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHsKICAgIGRv
UmVhZCA9IHRydWU7CiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpOwogIH0gLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHkKICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuCgoKICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykgewogICAgZG9SZWFkID0gZmFsc2U7CiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7CiAgfSBlbHNlIGlmIChkb1JlYWQpIHsKICAg
IGRlYnVnKCdkbyByZWFkJyk7CiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTsKICAgIHN0YXRlLnN5bmMgPSB0cnVlOyAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LgoKICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2QKCiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspOwoKICAgIHN0YXRlLnN5bmMgPSBmYWxzZTsgLy8gSWYgX3JlYWQgcHVz
aGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSwKICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci4KCiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7CiAgfQoKICB2YXIgcmV0OwogIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDsKCiAgaWYgKHJldCA9PT0gbnVsbCkgewogICAgc3RhdGUubmVlZFJlYWRh
YmxlID0gc3RhdGUubGVuZ3RoIDw9IHN0YXRlLmhpZ2hXYXRlck1hcms7CiAgICBuID0gMDsKICB9IGVsc2UgewogICAgc3RhdGUubGVuZ3RoIC09IG47CiAgICBzdGF0ZS5hd2FpdERyYWluID0gMDsKICB9CgogIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsKICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vdwogICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLgogICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJl
YWRhYmxlID0gdHJ1ZTsgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLgoKICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7CiAgfQoKICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpOwogIHJldHVybiByZXQ7Cn07CgpmdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHsKICBkZWJ1Zygnb25Fb2ZDaHVuaycpOwogIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuOwoKICBp
ZiAoc3RhdGUuZGVjb2RlcikgewogICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTsKCiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7CiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTsKICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoOwogICAgfQogIH0KCiAgc3RhdGUuZW5kZWQgPSB0cnVlOwoKICBpZiAoc3RhdGUuc3luYykgewogICAgLy8gaWYgd2UgYXJlIHN5bmMsIHdhaXQgdW50aWwgbmV4dCB0aWNrIHRvIGVtaXQgdGhlIGRhdGEuCiAg
ICAvLyBPdGhlcndpc2Ugd2UgcmlzayBlbWl0dGluZyBkYXRhIGluIHRoZSBmbG93KCkKICAgIC8vIHRoZSByZWFkYWJsZSBjb2RlIHRyaWdnZXJzIGR1cmluZyBhIHJlYWQoKSBjYWxsCiAgICBlbWl0UmVhZGFibGUoc3RyZWFtKTsKICB9IGVsc2UgewogICAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuCiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTsKCiAgICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkgewogICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0
cnVlOwogICAgICBlbWl0UmVhZGFibGVfKHN0cmVhbSk7CiAgICB9CiAgfQp9IC8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlcgovLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXIKLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLgoKCmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHsKICB2YXIgc3RhdGUgPSBzdHJlYW0u
X3JlYWRhYmxlU3RhdGU7CiAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLm5lZWRSZWFkYWJsZSwgc3RhdGUuZW1pdHRlZFJlYWRhYmxlKTsKICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTsKCiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHsKICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTsKICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7CiAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7CiAgfQp9CgpmdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0
cmVhbSkgewogIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKICBkZWJ1ZygnZW1pdFJlYWRhYmxlXycsIHN0YXRlLmRlc3Ryb3llZCwgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7CgogIGlmICghc3RhdGUuZGVzdHJveWVkICYmIChzdGF0ZS5sZW5ndGggfHwgc3RhdGUuZW5kZWQpKSB7CiAgICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTsKICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOwogIH0gLy8gVGhlIHN0cmVhbSBuZWVkcyBhbm90aGVyIHJlYWRhYmxlIGV2ZW50IGlmCiAgLy8gMS4gSXQg
aXMgbm90IGZsb3dpbmcsIGFzIHRoZSBmbG93IG1lY2hhbmlzbSB3aWxsIHRha2UKICAvLyAgICBjYXJlIG9mIGl0LgogIC8vIDIuIEl0IGlzIG5vdCBlbmRlZC4KICAvLyAzLiBJdCBpcyBiZWxvdyB0aGUgaGlnaFdhdGVyTWFyaywgc28gd2UgY2FuIHNjaGVkdWxlCiAgLy8gICAgYW5vdGhlciByZWFkYWJsZSBsYXRlci4KCgogIHN0YXRlLm5lZWRSZWFkYWJsZSA9ICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPD0gc3RhdGUuaGlnaFdhdGVyTWFyazsKICBmbG93KHN0cmVhbSk7Cn0gLy8g
YXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCwKLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZAovLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZgovLyBpdCdzIGluIHByb2dyZXNzLgovLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLAovLyB0aGVuIGdvIGFo
ZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LgoKCmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkgewogIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHsKICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTsKICAgIHByb2Nlc3MubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpOwogIH0KfQoKZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkgewogIC8vIEF0dGVtcHQgdG8gcmVhZCBtb3JlIGRhdGEgaWYgd2Ugc2hvdWxkLgogIC8vCiAgLy8g
VGhlIGNvbmRpdGlvbnMgZm9yIHJlYWRpbmcgbW9yZSBkYXRhIGFyZSAob25lIG9mKToKICAvLyAtIE5vdCBlbm91Z2ggZGF0YSBidWZmZXJlZCAoc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykuIFRoZSBsb29wCiAgLy8gICBpcyByZXNwb25zaWJsZSBmb3IgZmlsbGluZyB0aGUgYnVmZmVyIHdpdGggZW5vdWdoIGRhdGEgaWYgc3VjaCBkYXRhCiAgLy8gICBpcyBhdmFpbGFibGUuIElmIGhpZ2hXYXRlck1hcmsgaXMgMCBhbmQgd2UgYXJlIG5vdCBpbiB0aGUgZmxvd2luZyBtb2RlCiAgLy8gICB3ZSBzaG91bGQg
X25vdF8gYXR0ZW1wdCB0byBidWZmZXIgYW55IGV4dHJhIGRhdGEuIFdlJ2xsIGdldCBtb3JlIGRhdGEKICAvLyAgIHdoZW4gdGhlIHN0cmVhbSBjb25zdW1lciBjYWxscyByZWFkKCkgaW5zdGVhZC4KICAvLyAtIE5vIGRhdGEgaW4gdGhlIGJ1ZmZlciwgYW5kIHRoZSBzdHJlYW0gaXMgaW4gZmxvd2luZyBtb2RlLiBJbiB0aGlzIG1vZGUKICAvLyAgIHRoZSBsb29wIGJlbG93IGlzIHJlc3BvbnNpYmxlIGZvciBlbnN1cmluZyByZWFkKCkgaXMgY2FsbGVkLiBGYWlsaW5nIHRvCiAgLy8gICBjYWxsIHJlYWQgaGVyZSB3b3VsZCBh
Ym9ydCB0aGUgZmxvdyBhbmQgdGhlcmUncyBubyBvdGhlciBtZWNoYW5pc20gZm9yCiAgLy8gICBjb250aW51aW5nIHRoZSBmbG93IGlmIHRoZSBzdHJlYW0gY29uc3VtZXIgaGFzIGp1c3Qgc3Vic2NyaWJlZCB0byB0aGUKICAvLyAgICdkYXRhJyBldmVudC4KICAvLwogIC8vIEluIGFkZGl0aW9uIHRvIHRoZSBhYm92ZSBjb25kaXRpb25zIHRvIGtlZXAgcmVhZGluZyBkYXRhLCB0aGUgZm9sbG93aW5nCiAgLy8gY29uZGl0aW9ucyBwcmV2ZW50IHRoZSBkYXRhIGZyb20gYmVpbmcgcmVhZDoKICAvLyAtIFRoZSBzdHJlYW0gaGFz
IGVuZGVkIChzdGF0ZS5lbmRlZCkuCiAgLy8gLSBUaGVyZSBpcyBhbHJlYWR5IGEgcGVuZGluZyAncmVhZCcgb3BlcmF0aW9uIChzdGF0ZS5yZWFkaW5nKS4gVGhpcyBpcyBhCiAgLy8gICBjYXNlIHdoZXJlIHRoZSB0aGUgc3RyZWFtIGhhcyBjYWxsZWQgdGhlIGltcGxlbWVudGF0aW9uIGRlZmluZWQgX3JlYWQoKQogIC8vICAgbWV0aG9kLCBidXQgdGhleSBhcmUgcHJvY2Vzc2luZyB0aGUgY2FsbCBhc3luY2hyb25vdXNseSBhbmQgaGF2ZSBfbm90XwogIC8vICAgY2FsbGVkIHB1c2goKSB3aXRoIG5ldyBkYXRhLiBJbiB0aGlz
IGNhc2Ugd2Ugc2tpcCBwZXJmb3JtaW5nIG1vcmUKICAvLyAgIHJlYWQoKXMuIFRoZSBleGVjdXRpb24gZW5kcyBpbiB0aGlzIG1ldGhvZCBhZ2FpbiBhZnRlciB0aGUgX3JlYWQoKSBlbmRzCiAgLy8gICB1cCBjYWxsaW5nIHB1c2goKSB3aXRoIG1vcmUgZGF0YS4KICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwKSkgewogICAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDsK
ICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpOwogICAgc3RyZWFtLnJlYWQoMCk7CiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuCiAgICAgIGJyZWFrOwogIH0KCiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTsKfSAvLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuCi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguCi8v
IGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCAibGVuZ3RoIiBpcyBzb21ld2hhdAovLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuCgoKUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHsKICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ19yZWFkKCknKSk7Cn07CgpSZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykgewogIHZhciBzcmMgPSB0aGlz
OwogIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CgogIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkgewogICAgY2FzZSAwOgogICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgMToKICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdOwogICAgICBicmVhazsKCiAgICBkZWZhdWx0OgogICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpOwogICAgICBicmVhazsKICB9CgogIHN0YXRlLnBpcGVzQ291bnQgKz0gMTsKICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRz
PSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpOwogIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7CiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTsKICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcHJvY2Vzcy5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pOwogIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTsKCiAgZnVuY3Rpb24g
b251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHsKICAgIGRlYnVnKCdvbnVucGlwZScpOwoKICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7CiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHsKICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlOwogICAgICAgIGNsZWFudXAoKTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gb25lbmQoKSB7CiAgICBkZWJ1Zygnb25lbmQnKTsKICAgIGRlc3QuZW5kKCk7CiAgfSAvLyB3aGVuIHRoZSBkZXN0IGRy
YWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyCiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpCiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXMKICAvLyB0b28gc2xvdy4KCgogIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTsKICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pOwogIHZhciBjbGVhbmVkVXAgPSBmYWxzZTsKCiAgZnVuY3Rpb24gY2xlYW51cCgpIHsKICAgIGRl
YnVnKCdjbGVhbnVwJyk7IC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW4KCiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpOwogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpOwogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTsKICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7CiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7CiAgICBzcmMucmVtb3Zl
TGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTsKICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTsKICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7CiAgICBjbGVhbmVkVXAgPSB0cnVlOyAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzCiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnQKICAgIC8vIGZsb3dpbmcgYWdhaW4uCiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRy
YWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuCiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuCgogICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpOwogIH0KCiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTsKCiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7CiAgICBkZWJ1Zygnb25kYXRhJyk7CiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShj
aHVuayk7CiAgICBkZWJ1ZygnZGVzdC53cml0ZScsIHJldCk7CgogICAgaWYgKHJldCA9PT0gZmFsc2UpIHsKICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlCiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlCiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuCiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLgogICAgICBpZiAo
KHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7CiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHN0YXRlLmF3YWl0RHJhaW4pOwogICAgICAgIHN0YXRlLmF3YWl0RHJhaW4rKzsKICAgICAgfQoKICAgICAgc3JjLnBhdXNlKCk7CiAgICB9CiAgfSAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBp
bmcgaW50byBpdC4KICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuCgoKICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7CiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTsKICAgIHVucGlwZSgpOwogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTsKICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGVycm9yT3JEZXN0cm95KGRlc3QsIGVyKTsKICB9IC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hl
ZCBiZWZvcmUgdXNlcmxhbmQgb25lcy4KCgogIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTsgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS4KCiAgZnVuY3Rpb24gb25jbG9zZSgpIHsKICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTsKICAgIHVucGlwZSgpOwogIH0KCiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpOwoKICBmdW5jdGlvbiBvbmZpbmlzaCgpIHsKICAgIGRlYnVnKCdvbmZpbmlzaCcpOwog
ICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTsKICAgIHVucGlwZSgpOwogIH0KCiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7CgogIGZ1bmN0aW9uIHVucGlwZSgpIHsKICAgIGRlYnVnKCd1bnBpcGUnKTsKICAgIHNyYy51bnBpcGUoZGVzdCk7CiAgfSAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0bwoKCiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTsgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LgoKICBpZiAoIXN0YXRl
LmZsb3dpbmcpIHsKICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpOwogICAgc3JjLnJlc3VtZSgpOwogIH0KCiAgcmV0dXJuIGRlc3Q7Cn07CgpmdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHsKICByZXR1cm4gZnVuY3Rpb24gcGlwZU9uRHJhaW5GdW5jdGlvblJlc3VsdCgpIHsKICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTsKICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pOwogICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTsKCiAgICBpZiAoc3RhdGUuYXdh
aXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7CiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlOwogICAgICBmbG93KHNyYyk7CiAgICB9CiAgfTsKfQoKUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKICB2YXIgdW5waXBlSW5mbyA9IHsKICAgIGhhc1VucGlwZWQ6IGZhbHNlCiAgfTsgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLgoKICBpZiAoc3RhdGUu
cGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7IC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS4KCiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHsKICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLgogICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzOwogICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7IC8vIGdvdCBhIG1hdGNoLgoKICAgIHN0YXRlLnBpcGVzID0gbnVsbDsKICAgIHN0YXRlLnBpcGVz
Q291bnQgPSAwOwogICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlOwogICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7CiAgICByZXR1cm4gdGhpczsKICB9IC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuCgoKICBpZiAoIWRlc3QpIHsKICAgIC8vIHJlbW92ZSBhbGwuCiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlczsKICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50OwogICAgc3RhdGUucGlwZXMgPSBudWxsOwogICAgc3RhdGUucGlwZXNDb3VudCA9IDA7
CiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB7CiAgICAgICAgaGFzVW5waXBlZDogZmFsc2UKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfSAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLgoKCiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7CiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7CiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4
LCAxKTsKICBzdGF0ZS5waXBlc0NvdW50IC09IDE7CiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07CiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTsKICByZXR1cm4gdGhpczsKfTsgLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvcgovLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZwoKClJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHsKICB2YXIg
cmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKCiAgaWYgKGV2ID09PSAnZGF0YScpIHsKICAgIC8vIHVwZGF0ZSByZWFkYWJsZUxpc3RlbmluZyBzbyB0aGF0IHJlc3VtZSgpIG1heSBiZSBhIG5vLW9wCiAgICAvLyBhIGZldyBsaW5lcyBkb3duLiBUaGlzIGlzIG5lZWRlZCB0byBzdXBwb3J0IG9uY2UoJ3JlYWRhYmxlJykuCiAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHRoaXMubGlzdGVuZXJDb3VudCgncmVhZGFibGUnKSA+
IDA7IC8vIFRyeSBzdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWQKCiAgICBpZiAoc3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7CiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykgewogICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykgewogICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CiAgICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTsK
ICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7CiAgICAgIGRlYnVnKCdvbiByZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUucmVhZGluZyk7CgogICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7CiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpOwogICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7CiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIHJlczsKfTsKClJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5l
ciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjsKClJlYWRhYmxlLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChldiwgZm4pIHsKICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lci5jYWxsKHRoaXMsIGV2LCBmbik7CgogIGlmIChldiA9PT0gJ3JlYWRhYmxlJykgewogICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiB0aGVyZSBpcyBzb21lb25lIHN0aWxsIGxpc3RlbmluZyB0bwogICAgLy8gcmVhZGFibGUgYW5kIHJlc2V0IHRoZSBzdGF0ZS4gSG93ZXZlciB0aGlzIG5lZWRzIHRvIGhh
cHBlbgogICAgLy8gYWZ0ZXIgcmVhZGFibGUgaGFzIGJlZW4gZW1pdHRlZCBidXQgYmVmb3JlIEkvTyAobmV4dFRpY2spIHRvCiAgICAvLyBzdXBwb3J0IG9uY2UoJ3JlYWRhYmxlJywgZm4pIGN5Y2xlcy4gVGhpcyBtZWFucyB0aGF0IGNhbGxpbmcKICAgIC8vIHJlc3VtZSB3aXRoaW4gdGhlIHNhbWUgdGljayB3aWxsIGhhdmUgbm8KICAgIC8vIGVmZmVjdC4KICAgIHByb2Nlc3MubmV4dFRpY2sodXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcsIHRoaXMpOwogIH0KCiAgcmV0dXJuIHJlczsKfTsKClJlYWRhYmxlLnByb3RvdHlwZS5y
ZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoZXYpIHsKICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCiAgaWYgKGV2ID09PSAncmVhZGFibGUnIHx8IGV2ID09PSB1bmRlZmluZWQpIHsKICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgaXMgc29tZW9uZSBzdGlsbCBsaXN0ZW5pbmcgdG8KICAgIC8vIHJlYWRhYmxlIGFuZCByZXNldCB0aGUgc3RhdGUuIEhvd2V2ZXIgdGhpcyBuZWVkcyB0byBoYXBwZW4KICAgIC8vIGFmdGVyIHJl
YWRhYmxlIGhhcyBiZWVuIGVtaXR0ZWQgYnV0IGJlZm9yZSBJL08gKG5leHRUaWNrKSB0bwogICAgLy8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScsIGZuKSBjeWNsZXMuIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nCiAgICAvLyByZXN1bWUgd2l0aGluIHRoZSBzYW1lIHRpY2sgd2lsbCBoYXZlIG5vCiAgICAvLyBlZmZlY3QuCiAgICBwcm9jZXNzLm5leHRUaWNrKHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nLCB0aGlzKTsKICB9CgogIHJldHVybiByZXM7Cn07CgpmdW5jdGlvbiB1cGRhdGVSZWFkYWJsZUxpc3RlbmluZyhzZWxmKSB7
CiAgdmFyIHN0YXRlID0gc2VsZi5fcmVhZGFibGVTdGF0ZTsKICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHNlbGYubGlzdGVuZXJDb3VudCgncmVhZGFibGUnKSA+IDA7CgogIGlmIChzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgJiYgIXN0YXRlLnBhdXNlZCkgewogICAgLy8gZmxvd2luZyBuZWVkcyB0byBiZSBzZXQgdG8gdHJ1ZSBub3csIG90aGVyd2lzZQogICAgLy8gdGhlIHVwY29taW5nIHJlc3VtZSB3aWxsIG5vdCBmbG93LgogICAgc3RhdGUuZmxvd2luZyA9IHRydWU7IC8vIGNydWRlIHdheSB0byBjaGVjayBpZiB3ZSBz
aG91bGQgcmVzdW1lCiAgfSBlbHNlIGlmIChzZWxmLmxpc3RlbmVyQ291bnQoJ2RhdGEnKSA+IDApIHsKICAgIHNlbGYucmVzdW1lKCk7CiAgfQp9CgpmdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHsKICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7CiAgc2VsZi5yZWFkKDApOwp9IC8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUEkKLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLgoK
ClJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKCiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7CiAgICBkZWJ1ZygncmVzdW1lJyk7IC8vIHdlIGZsb3cgb25seSBpZiB0aGVyZSBpcyBubyBvbmUgbGlzdGVuaW5nCiAgICAvLyBmb3IgcmVhZGFibGUsIGJ1dCB3ZSBzdGlsbCBoYXZlIHRvIGNhbGwKICAgIC8vIHJlc3VtZSgpCgogICAgc3RhdGUuZmxvd2luZyA9ICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZzsKICAgIHJlc3VtZSh0aGlzLCBzdGF0
ZSk7CiAgfQoKICBzdGF0ZS5wYXVzZWQgPSBmYWxzZTsKICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7CiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHsKICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7CiAgICBwcm9jZXNzLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpOwogIH0KfQoKZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7CiAgZGVidWcoJ3Jlc3VtZScsIHN0YXRlLnJlYWRpbmcpOwoKICBpZiAoIXN0YXRlLnJlYWRpbmcpIHsKICAg
IHN0cmVhbS5yZWFkKDApOwogIH0KCiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7CiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpOwogIGZsb3coc3RyZWFtKTsKICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7Cn0KClJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHsKICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTsKCiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFs
c2UpIHsKICAgIGRlYnVnKCdwYXVzZScpOwogICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7CiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7CiAgfQoKICB0aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZCA9IHRydWU7CiAgcmV0dXJuIHRoaXM7Cn07CgpmdW5jdGlvbiBmbG93KHN0cmVhbSkgewogIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpOwoKICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7CiAg
ICA7CiAgfQp9IC8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuCi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS4KLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuCgoKUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7CiAgdmFyIF90aGlzID0gdGhpczsKCiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKICB2YXIgcGF1c2VkID0gZmFsc2U7CiAgc3RyZWFt
Lm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7CiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTsKCiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHsKICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTsKICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7CiAgICB9CgogICAgX3RoaXMucHVzaChudWxsKTsKICB9KTsKICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHsKICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTsKICAgIGlmIChzdGF0ZS5k
ZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspOyAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGUKCiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47CgogICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspOwoKICAgIGlmICghcmV0KSB7CiAgICAgIHBhdXNlZCA9IHRy
dWU7CiAgICAgIHN0cmVhbS5wYXVzZSgpOwogICAgfQogIH0pOyAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuCiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuCgogIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7CiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIG1ldGhvZFdyYXAobWV0aG9kKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1ldGhvZFdyYXBSZXR1
cm5GdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfShpKTsKICAgIH0KICB9IC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy4KCgogIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7CiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTsKICB9IC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBt
b3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGUKICAvLyB1bmRlcmx5aW5nIHN0cmVhbS4KCgogIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikgewogICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTsKCiAgICBpZiAocGF1c2VkKSB7CiAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgICBzdHJlYW0ucmVzdW1lKCk7CiAgICB9CiAgfTsKCiAgcmV0dXJuIHRoaXM7Cn07CgppZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykgewogIFJlYWRhYmxlLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlv
biAoKSB7CiAgICBpZiAoY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID09PSB1bmRlZmluZWQpIHsKICAgICAgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yJyk7CiAgICB9CgogICAgcmV0dXJuIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcih0aGlzKTsKICB9Owp9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywgewogIC8vIG1ha2lu
ZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlCiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluCiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsCiAgZW51bWVyYWJsZTogZmFsc2UsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUJ1ZmZlcicsIHsKICAvLyBtYWtpbmcgaXQg
ZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZQogIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpbgogIC8vIHVzZXJsYW5kIHdpbGwgZmFpbAogIGVudW1lcmFibGU6IGZhbHNlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXI7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlRmxvd2luZycsIHsKICAv
LyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZQogIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpbgogIC8vIHVzZXJsYW5kIHdpbGwgZmFpbAogIGVudW1lcmFibGU6IGZhbHNlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZzsKICB9LAogIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7CiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkgewogICAgICB0aGlzLl9yZWFkYWJs
ZVN0YXRlLmZsb3dpbmcgPSBzdGF0ZTsKICAgIH0KICB9Cn0pOyAvLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuCgpSZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDsKT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlTGVuZ3RoJywgewogIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlCiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluCiAgLy8gdXNlcmxhbmQgd2lsbCBm
YWlsCiAgZW51bWVyYWJsZTogZmFsc2UsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5sZW5ndGg7CiAgfQp9KTsgLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLgovLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LgovLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZwovLyBjaGFuZ2VzIHRv
IHRoZSBmdW5jdGlvbiBib2R5LgoKZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHsKICAvLyBub3RoaW5nIGJ1ZmZlcmVkCiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7CiAgdmFyIHJldDsKICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHsKICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdAogICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtl
bHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuZmlyc3QoKTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTsKICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpOwogIH0gZWxzZSB7CiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdAogICAgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbnN1bWUobiwgc3RhdGUuZGVjb2Rlcik7CiAgfQogIHJldHVybiByZXQ7Cn0KCmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkgewogIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFi
bGVTdGF0ZTsKICBkZWJ1ZygnZW5kUmVhZGFibGUnLCBzdGF0ZS5lbmRFbWl0dGVkKTsKCiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7CiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7CiAgICBwcm9jZXNzLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pOwogIH0KfQoKZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7CiAgZGVidWcoJ2VuZFJlYWRhYmxlTlQnLCBzdGF0ZS5lbmRFbWl0dGVkLCBzdGF0ZS5sZW5ndGgpOyAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5z
aGlmdC4KCiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkgewogICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7CiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTsKICAgIHN0cmVhbS5lbWl0KCdlbmQnKTsKCiAgICBpZiAoc3RhdGUuYXV0b0Rlc3Ryb3kpIHsKICAgICAgLy8gSW4gY2FzZSBvZiBkdXBsZXggc3RyZWFtcyB3ZSBuZWVkIGEgd2F5IHRvIGRldGVjdAogICAgICAvLyBpZiB0aGUgd3JpdGFibGUgc2lkZSBpcyByZWFkeSBmb3IgYXV0b0Rlc3Ryb3kgYXMgd2VsbAogICAgICB2YXIg
d1N0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlOwoKICAgICAgaWYgKCF3U3RhdGUgfHwgd1N0YXRlLmF1dG9EZXN0cm95ICYmIHdTdGF0ZS5maW5pc2hlZCkgewogICAgICAgIHN0cmVhbS5kZXN0cm95KCk7CiAgICAgIH0KICAgIH0KICB9Cn0KCmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7CiAgUmVhZGFibGUuZnJvbSA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgb3B0cykgewogICAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgewogICAgICBmcm9tID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Zyb20n
KTsKICAgIH0KCiAgICByZXR1cm4gZnJvbShSZWFkYWJsZSwgaXRlcmFibGUsIG9wdHMpOwogIH07Cn0KCmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHsKICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTsKICB9CgogIHJldHVybiAtMTsKfQoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJyksdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlw
ZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0seyIuLi9lcnJvcnMiOjM2OCwiLi9fc3RyZWFtX2R1cGxleCI6MzY5LCIuL2ludGVybmFsL3N0cmVhbXMvYXN5bmNfaXRlcmF0b3IiOjM3NCwiLi9pbnRlcm5hbC9zdHJlYW1zL2J1ZmZlcl9saXN0IjozNzUsIi4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95IjozNzYsIi4vaW50ZXJuYWwvc3RyZWFtcy9mcm9tIjozNzgsIi4vaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZSI6MzgwLCIuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtIjozODEsIl9wcm9jZXNzIjoz
NTgsImJ1ZmZlciI6MjE2LCJldmVudHMiOjI1OCwiaW5oZXJpdHMiOjI3OCwic3RyaW5nX2RlY29kZXIvIjo0MTAsInV0aWwiOjE4NX1dLDM3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRh
dGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRv
IHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJ
RVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FS
RSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkbwovLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhICJmaWx0ZXIiLAovLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZQovLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkg
aWdub3JlZC4gIChUaGF0IHdvdWxkCi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLikKLy8KLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYQovLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSwKLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuCi8vIGVtaXQgYSBzaW5nbGUgY29tcHJl
c3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS4KLy8KLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOgovLwovLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGUKLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKQovLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzCi8vIGJ1ZmZlcmVkIHVwLiAgV2hl
biB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWwKLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLgovLwovLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlbgovLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZQovLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1p
bmcgYSBzaW5nbGUKLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3QKLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvCi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS4KLy8KLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLAov
LyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLAovLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nCi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzCi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnkKLy8gYnl0ZXMgb2Yg
b3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpbgovLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGwKLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJbgovLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGwKLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5n
IHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGQKLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS4KLy8KLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVuawovLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsCi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLgon
dXNlIHN0cmljdCc7Cgptb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTsKCnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLmNvZGVzLAogICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCwKICAgIEVSUl9NVUxUSVBMRV9DQUxMQkFDSyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NVUxUSVBMRV9DQUxMQkFDSywKICAgIEVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfVFJBTlNG
T1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HLAogICAgRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wOwoKdmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTsKCnJlcXVpcmUoJ2luaGVyaXRzJykoVHJhbnNmb3JtLCBEdXBsZXgpOwoKZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHsKICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTsKICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTsKICB2YXIgY2IgPSB0cy53
cml0ZWNiOwoKICBpZiAoY2IgPT09IG51bGwpIHsKICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVSUl9NVUxUSVBMRV9DQUxMQkFDSygpKTsKICB9CgogIHRzLndyaXRlY2h1bmsgPSBudWxsOwogIHRzLndyaXRlY2IgPSBudWxsOwogIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYAogICAgdGhpcy5wdXNoKGRhdGEpOwogIGNiKGVyKTsKICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwogIHJzLnJlYWRpbmcgPSBmYWxzZTsK
CiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7CiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspOwogIH0KfQoKZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7CiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7CiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7CiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSwK
ICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLAogICAgdHJhbnNmb3JtaW5nOiBmYWxzZSwKICAgIHdyaXRlY2I6IG51bGwsCiAgICB3cml0ZWNodW5rOiBudWxsLAogICAgd3JpdGVlbmNvZGluZzogbnVsbAogIH07IC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLgoKICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5ncwog
IC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGUKICAvLyBzeW5jIGd1YXJkIGZsYWcuCgogIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlOwoKICBpZiAob3B0aW9ucykgewogICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07CiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVz
aDsKICB9IC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy4KCgogIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7Cn0KCmZ1bmN0aW9uIHByZWZpbmlzaCgpIHsKICB2YXIgX3RoaXMgPSB0aGlzOwoKICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCkgewogICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7CiAgICAgIGRvbmUoX3RoaXMsIGVyLCBk
YXRhKTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpOwogIH0KfQoKVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykgewogIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTsKICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTsKfTsgLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhCi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVt
ZW50YXRpb24gY2xhc3Nlcy4KLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay4KLy8KLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0Ci8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuCi8vCi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzCi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVy
YXRpb24uICBJZiB5b3UKLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay4KCgpUcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogIGNiKG5ldyBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCgnX3RyYW5zZm9ybSgpJykpOwp9OwoKVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlOwogIHRzLndy
aXRlY2IgPSBjYjsKICB0cy53cml0ZWNodW5rID0gY2h1bms7CiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nOwoKICBpZiAoIXRzLnRyYW5zZm9ybWluZykgewogICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspOwogIH0KfTsgLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS4KLy8gX3RyYW5zZm9ybSBk
b2VzIGFsbCB0aGUgd29yay4KLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS4KCgpUcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHsKICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTsKCiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgIXRzLnRyYW5zZm9ybWluZykgewogICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTsKCiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMu
YWZ0ZXJUcmFuc2Zvcm0pOwogIH0gZWxzZSB7CiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluCiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC4KICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlOwogIH0KfTsKClRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikgewogIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIy
KSB7CiAgICBjYihlcnIyKTsKICB9KTsKfTsKCmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkgewogIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTsKICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGAKICAgIHN0cmVhbS5wdXNoKGRhdGEpOyAvLyBUT0RPKEJyaWRnZUFSKTogV3JpdGUgYSB0ZXN0IGZvciB0aGVzZSB0d28gZXJyb3IgY2FzZXMKICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1
ZmZlciwgdGhlbiB0aGF0IG1lYW5zCiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkCgogIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wKCk7CiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORygpOwogIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTsKfQoKfSx7Ii4uL2Vycm9ycyI6MzY4LCIuL19zdHJlYW1fZHVw
bGV4IjozNjksImluaGVyaXRzIjoyNzh9XSwzNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3
YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRp
b25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFks
IEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIg
REVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgovLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy4KLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsCi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLgondXNlIHN0cmljdCc7Cgptb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlOwovKiA8cmVwbGFjZW1lbnQ+ICovCgpmdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgdGhpcy5jaHVuayA9
IGNodW5rOwogIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZzsKICB0aGlzLmNhbGxiYWNrID0gY2I7CiAgdGhpcy5uZXh0ID0gbnVsbDsKfSAvLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3QKLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtCgoKZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkgewogIHZhciBfdGhpcyA9IHRoaXM7CgogIHRoaXMubmV4dCA9IG51bGw7CiAgdGhpcy5lbnRyeSA9IG51bGw7CgogIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkgewogICAg
b25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTsKICB9Owp9Ci8qIDwvcmVwbGFjZW1lbnQ+ICovCgovKjxyZXBsYWNlbWVudD4qLwoKCnZhciBEdXBsZXg7Ci8qPC9yZXBsYWNlbWVudD4qLwoKV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7Ci8qPHJlcGxhY2VtZW50PiovCgp2YXIgaW50ZXJuYWxVdGlsID0gewogIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKQp9OwovKjwvcmVwbGFjZW1lbnQ+Ki8KCi8qPHJlcGxhY2VtZW50PiovCgp2YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRl
cm5hbC9zdHJlYW1zL3N0cmVhbScpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyOwoKdmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTsKCmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHsKICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspOwp9CgpmdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikgewogIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFy
cmF5Owp9Cgp2YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpOwoKdmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlJyksCiAgICBnZXRIaWdoV2F0ZXJNYXJrID0gX3JlcXVpcmUuZ2V0SGlnaFdhdGVyTWFyazsKCnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLmNvZGVzLAogICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSwKICAgIEVSUl9NRVRIT0RfTk9U
X0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsCiAgICBFUlJfTVVMVElQTEVfQ0FMTEJBQ0sgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssCiAgICBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9DQU5OT1RfUElQRSwKICAgIEVSUl9TVFJFQU1fREVTVFJPWUVEID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9ERVNUUk9ZRUQsCiAgICBFUlJfU1RSRUFNX05VTExfVkFMVUVTID0gX3JlcXVpcmUkY29kZXMu
RVJSX1NUUkVBTV9OVUxMX1ZBTFVFUywKICAgIEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQsCiAgICBFUlJfVU5LTk9XTl9FTkNPRElORyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9VTktOT1dOX0VOQ09ESU5HOwoKdmFyIGVycm9yT3JEZXN0cm95ID0gZGVzdHJveUltcGwuZXJyb3JPckRlc3Ryb3k7CgpyZXF1aXJlKCdpbmhlcml0cycpKFdyaXRhYmxlLCBTdHJlYW0pOwoKZnVuY3Rpb24gbm9wKCkge30KCmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0
aW9ucywgc3RyZWFtLCBpc0R1cGxleCkgewogIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlCiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuCiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnQKICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxl
IHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLAogIC8vIGUuZy4gb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGUgdnMuIG9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlLCBldGMuCgogIGlmICh0eXBlb2YgaXNEdXBsZXggIT09ICdib29sZWFuJykgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7IC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbQogIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy4KCiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRp
b25zLm9iamVjdE1vZGU7CiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTsgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZQogIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmCiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKQoKICB0aGlzLmhpZ2hXYXRlck1h
cmsgPSBnZXRIaWdoV2F0ZXJNYXJrKHRoaXMsIG9wdGlvbnMsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCBpc0R1cGxleCk7IC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWQKCiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlOyAvLyBkcmFpbiBldmVudCBmbGFnLgoKICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlOyAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKQoKICB0aGlzLmVuZGluZyA9IGZhbHNlOyAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkCgogIHRoaXMuZW5kZWQgPSBmYWxz
ZTsgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkCgogIHRoaXMuZmluaXNoZWQgPSBmYWxzZTsgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkCgogIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7IC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlPwogIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZwogIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuCgogIHZhciBub0RlY29kZSA9IG9wdGlv
bnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7CiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlOyAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nCiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLgogIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC4KCiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNv
ZGluZyB8fCAndXRmOCc7IC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50CiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZwogIC8vIHNvY2tldCBvciBmaWxlLgoKICB0aGlzLmxlbmd0aCA9IDA7IC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuCgogIHRoaXMud3JpdGluZyA9IGZhbHNlOyAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVk
IHVudGlsIC51bmNvcmsoKSBjYWxsCgogIHRoaXMuY29ya2VkID0gMDsgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksCiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnkKICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCAibGF0ZXIiIHNob3VsZCBnZW5lcmFsbHkgYWxzbwogIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLgoKICB0
aGlzLnN5bmMgPSB0cnVlOyAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoCiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3QKICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi4KCiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7IC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYikKCiAgdGhpcy5v
bndyaXRlID0gZnVuY3Rpb24gKGVyKSB7CiAgICBvbndyaXRlKHN0cmVhbSwgZXIpOwogIH07IC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKQoKCiAgdGhpcy53cml0ZWNiID0gbnVsbDsgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLgoKICB0aGlzLndyaXRlbGVuID0gMDsKICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7CiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsgLy8gbnVt
YmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3MKICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWQKCiAgdGhpcy5wZW5kaW5nY2IgPSAwOyAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzCiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXMKCiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlOyAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxy
ZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpbgoKICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlOyAvLyBTaG91bGQgY2xvc2UgYmUgZW1pdHRlZCBvbiBkZXN0cm95LiBEZWZhdWx0cyB0byB0cnVlLgoKICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMuZW1pdENsb3NlICE9PSBmYWxzZTsgLy8gU2hvdWxkIC5kZXN0cm95KCkgYmUgY2FsbGVkIGFmdGVyICdmaW5pc2gnIChhbmQgcG90ZW50aWFsbHkgJ2VuZCcpCgogIHRoaXMuYXV0b0Rlc3Ryb3kgPSAhIW9wdGlvbnMuYXV0b0Rlc3Ryb3k7IC8vIGNv
dW50IGJ1ZmZlcmVkIHJlcXVlc3RzCgogIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwOyAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzCiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3bwoKICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpOwp9CgpXcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7CiAgdmFyIGN1cnJl
bnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDsKICB2YXIgb3V0ID0gW107CgogIHdoaWxlIChjdXJyZW50KSB7CiAgICBvdXQucHVzaChjdXJyZW50KTsKICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7CiAgfQoKICByZXR1cm4gb3V0Owp9OwoKKGZ1bmN0aW9uICgpIHsKICB0cnkgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywgewogICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gd3JpdGFibGVTdGF0ZUJ1ZmZlckdldHRlcigpIHsKICAg
ICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTsKICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpCiAgICB9KTsKICB9IGNhdGNoIChfKSB7fQp9KSgpOyAvLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcywKLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLgoKCnZhciByZWFsSGFzSW5z
dGFuY2U7CgppZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7CiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHsKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShvYmplY3QpIHsKICAgICAgaWYgKHJlYWxIYXNJ
bnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlOwogICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTsKICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlOwogICAgfQogIH0pOwp9IGVsc2UgewogIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIHJlYWxIYXNJbnN0YW5jZShvYmplY3QpIHsKICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzOwogIH07Cn0KCmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMp
IHsKICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpOyAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby4KICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmAKICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuCiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3
aWxsIGFsc28gYnJlYWsgdGhlCiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yCiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLgogIC8vIENoZWNraW5nIGZvciBhIFN0cmVhbS5EdXBsZXggaW5zdGFuY2UgaXMgZmFzdGVyIGhlcmUgaW5zdGVhZCBvZiBpbnNpZGUKICAvLyB0aGUgV3JpdGFibGVTdGF0ZSBjb25zdHJ1Y3RvciwgYXQgbGVhc3Qgd2l0aCBWOCA2LjUKCiAgdmFyIGlz
RHVwbGV4ID0gdGhpcyBpbnN0YW5jZW9mIER1cGxleDsKICBpZiAoIWlzRHVwbGV4ICYmICFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykpIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7CiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMsIGlzRHVwbGV4KTsgLy8gbGVnYWN5LgoKICB0aGlzLndyaXRhYmxlID0gdHJ1ZTsKCiAgaWYgKG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUg
PSBvcHRpb25zLndyaXRlOwogICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7CiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsOwogIH0KCiAgU3RyZWFtLmNhbGwodGhpcyk7Cn0gLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4g
cGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLgoKCldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkgewogIGVycm9yT3JEZXN0cm95KHRoaXMsIG5ldyBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFKCkpOwp9OwoKZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7CiAgdmFyIGVyID0gbmV3IEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EKCk7IC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiCgogIGVy
cm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpOwogIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTsKfSAvLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyCi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWQKLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLgoKCmZ1bmN0aW9uIHZhbGlkQ2h1bmso
c3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7CiAgdmFyIGVyOwoKICBpZiAoY2h1bmsgPT09IG51bGwpIHsKICAgIGVyID0gbmV3IEVSUl9TVFJFQU1fTlVMTF9WQUxVRVMoKTsKICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHsKICAgIGVyID0gbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdjaHVuaycsIFsnc3RyaW5nJywgJ0J1ZmZlciddLCBjaHVuayk7CiAgfQoKICBpZiAoZXIpIHsKICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpOwogICAgcHJvY2Vzcy5u
ZXh0VGljayhjYiwgZXIpOwogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgcmV0dXJuIHRydWU7Cn0KCldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTsKICB2YXIgcmV0ID0gZmFsc2U7CgogIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspOwoKICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHsKICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1
ZmZlcihjaHVuayk7CiAgfQoKICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7CiAgICBjYiA9IGVuY29kaW5nOwogICAgZW5jb2RpbmcgPSBudWxsOwogIH0KCiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7CiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7CiAgaWYgKHN0YXRlLmVuZGluZykgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRD
aHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkgewogICAgc3RhdGUucGVuZGluZ2NiKys7CiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7CiAgfQogIHJldHVybiByZXQ7Cn07CgpXcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrOwp9OwoKV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoKICBp
ZiAoc3RhdGUuY29ya2VkKSB7CiAgICBzdGF0ZS5jb3JrZWQtLTsKICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpOwogIH0KfTsKCldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHsKICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS4KICBpZiAo
dHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpOwogIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBFUlJfVU5LTk9XTl9FTkNPRElORyhlbmNvZGluZyk7CiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2Rpbmcg
PSBlbmNvZGluZzsKICByZXR1cm4gdGhpczsKfTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUJ1ZmZlcicsIHsKICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZQogIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpbgogIC8vIHVzZXJsYW5kIHdpbGwgZmFpbAogIGVudW1lcmFibGU6IGZhbHNlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3Rh
dGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKTsKICB9Cn0pOwoKZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykgewogIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7CiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7CiAgfQoKICByZXR1cm4gY2h1bms7Cn0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJs
ZUhpZ2hXYXRlck1hcmsnLCB7CiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGUKICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW4KICAvLyB1c2VybGFuZCB3aWxsIGZhaWwKICBlbnVtZXJhYmxlOiBmYWxzZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7CiAgfQp9KTsgLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0
IHB1dCB0aGlzCi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlCi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuCgpmdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgaWYgKCFpc0J1ZikgewogICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7CgogICAgaWYgKGNodW5rICE9PSBu
ZXdDaHVuaykgewogICAgICBpc0J1ZiA9IHRydWU7CiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7CiAgICAgIGNodW5rID0gbmV3Q2h1bms7CiAgICB9CiAgfQoKICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7CiAgc3RhdGUubGVuZ3RoICs9IGxlbjsKICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyazsgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuCgogIGlmICghcmV0KSBzdGF0
ZS5uZWVkRHJhaW4gPSB0cnVlOwoKICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHsKICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDsKICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7CiAgICAgIGNodW5rOiBjaHVuaywKICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLAogICAgICBpc0J1ZjogaXNCdWYsCiAgICAgIGNhbGxiYWNrOiBjYiwKICAgICAgbmV4dDogbnVsbAogICAgfTsKCiAgICBpZiAobGFzdCkgewogICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRS
ZXF1ZXN0OwogICAgfSBlbHNlIHsKICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDsKICAgIH0KCiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxOwogIH0gZWxzZSB7CiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpOwogIH0KCiAgcmV0dXJuIHJldDsKfQoKZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikgewogIHN0YXRlLndyaXRlbGVu
ID0gbGVuOwogIHN0YXRlLndyaXRlY2IgPSBjYjsKICBzdGF0ZS53cml0aW5nID0gdHJ1ZTsKICBzdGF0ZS5zeW5jID0gdHJ1ZTsKICBpZiAoc3RhdGUuZGVzdHJveWVkKSBzdGF0ZS5vbndyaXRlKG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRCgnd3JpdGUnKSk7ZWxzZSBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7CiAgc3RhdGUuc3luYyA9IGZhbHNlOwp9CgpmdW5jdGlvbiBvbndyaXRlRXJyb3Io
c3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7CiAgLS1zdGF0ZS5wZW5kaW5nY2I7CgogIGlmIChzeW5jKSB7CiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5CiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFjawogICAgcHJvY2Vzcy5uZXh0VGljayhjYiwgZXIpOyAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlbgogICAgLy8gYWZ0ZXIgZXJyb3IKCiAgICBwcm9jZXNzLm5leHRUaWNrKGZp
bmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTsKICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlOwogICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7CiAgfSBlbHNlIHsKICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZgogICAgLy8gaXQgaXMgYXN5bmMKICAgIGNiKGVyKTsKICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlOwogICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7IC8vIHRoaXMgY2FuIGVtaXQgZmluaXNo
LCBidXQgZmluaXNoIG11c3QKICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3IKCiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTsKICB9Cn0KCmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkgewogIHN0YXRlLndyaXRpbmcgPSBmYWxzZTsKICBzdGF0ZS53cml0ZWNiID0gbnVsbDsKICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47CiAgc3RhdGUud3JpdGVsZW4gPSAwOwp9CgpmdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7CiAg
dmFyIHN5bmMgPSBzdGF0ZS5zeW5jOwogIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7CiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVSUl9NVUxUSVBMRV9DQUxMQkFDSygpOwogIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7CiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHsKICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0CiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNo
KHN0YXRlKSB8fCBzdHJlYW0uZGVzdHJveWVkOwoKICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHsKICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7CiAgICB9CgogICAgaWYgKHN5bmMpIHsKICAgICAgcHJvY2Vzcy5uZXh0VGljayhhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpOwogICAgfSBlbHNlIHsKICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2Ip
OwogICAgfQogIH0KfQoKZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHsKICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7CiAgc3RhdGUucGVuZGluZ2NiLS07CiAgY2IoKTsKICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTsKfSAvLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndAovLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScg
cmV0dXJuCi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuCgoKZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHsKICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikgewogICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7CiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTsKICB9Cn0gLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXQKCgpmdW5jdGlvbiBjbGVhckJ1ZmZlcihz
dHJlYW0sIHN0YXRlKSB7CiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7CiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0OwoKICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkgewogICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKQogICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDsKICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7CiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlOwog
ICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7CiAgICB2YXIgY291bnQgPSAwOwogICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlOwoKICAgIHdoaWxlIChlbnRyeSkgewogICAgICBidWZmZXJbY291bnRdID0gZW50cnk7CiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTsKICAgICAgZW50cnkgPSBlbnRyeS5uZXh0OwogICAgICBjb3VudCArPSAxOwogICAgfQoKICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVyczsKICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBi
dWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTsgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWUKICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZQoKICAgIHN0YXRlLnBlbmRpbmdjYisrOwogICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7CgogICAgaWYgKGhvbGRlci5uZXh0KSB7CiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0OwogICAgICBob2xkZXIubmV4dCA9IG51bGw7CiAgICB9
IGVsc2UgewogICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7CiAgICB9CgogICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwOwogIH0gZWxzZSB7CiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lCiAgICB3aGlsZSAoZW50cnkpIHsKICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7CiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nOwogICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjazsKICAgICAgdmFyIGxlbiA9IHN0
YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoOwogICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpOwogICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7CiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07IC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuCiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuCiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUg
Y2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHkKICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uCgogICAgICBpZiAoc3RhdGUud3JpdGluZykgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsKICB9CgogIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5OwogIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTsKfQoKV3JpdGFibGUucHJvdG90eXBl
Ll93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgY2IobmV3IEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEKCdfd3JpdGUoKScpKTsKfTsKCldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDsKCldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7CgogIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHsKICAgIGNiID0gY2h1bms7CiAgICBjaHVuayA9IG51bGw7CiAg
ICBlbmNvZGluZyA9IG51bGw7CiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHsKICAgIGNiID0gZW5jb2Rpbmc7CiAgICBlbmNvZGluZyA9IG51bGw7CiAgfQoKICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpOyAvLyAuZW5kKCkgZnVsbHkgdW5jb3JrcwoKICBpZiAoc3RhdGUuY29ya2VkKSB7CiAgICBzdGF0ZS5jb3JrZWQgPSAxOwogICAgdGhpcy51bmNvcmsoKTsKICB9IC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBl
bmQoKSBjYWxscy4KCgogIGlmICghc3RhdGUuZW5kaW5nKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpOwogIHJldHVybiB0aGlzOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlTGVuZ3RoJywgewogIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlCiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluCiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsCiAgZW51bWVyYWJsZTogZmFsc2Us
CiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGg7CiAgfQp9KTsKCmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHsKICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nOwp9CgpmdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkgewogIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikgewogICAgc3RhdGUu
cGVuZGluZ2NiLS07CgogICAgaWYgKGVycikgewogICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVycik7CiAgICB9CgogICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlOwogICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpOwogICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7CiAgfSk7Cn0KCmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7CiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHsKICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9u
JyAmJiAhc3RhdGUuZGVzdHJveWVkKSB7CiAgICAgIHN0YXRlLnBlbmRpbmdjYisrOwogICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7CiAgICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTsKICAgIH0gZWxzZSB7CiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTsKICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkgewogIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7CgogIGlmIChu
ZWVkKSB7CiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7CgogICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkgewogICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7CiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTsKCiAgICAgIGlmIChzdGF0ZS5hdXRvRGVzdHJveSkgewogICAgICAgIC8vIEluIGNhc2Ugb2YgZHVwbGV4IHN0cmVhbXMgd2UgbmVlZCBhIHdheSB0byBkZXRlY3QKICAgICAgICAvLyBpZiB0aGUgcmVhZGFibGUgc2lkZSBpcyByZWFkeSBmb3IgYXV0b0Rlc3Ryb3kgYXMgd2VsbAogICAgICAgIHZhciBy
U3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7CgogICAgICAgIGlmICghclN0YXRlIHx8IHJTdGF0ZS5hdXRvRGVzdHJveSAmJiByU3RhdGUuZW5kRW1pdHRlZCkgewogICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBuZWVkOwp9CgpmdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikgewogIHN0YXRlLmVuZGluZyA9IHRydWU7CiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7CgogIGlmIChjYikgewogICAgaWYgKHN0YXRlLmZpbmlz
aGVkKSBwcm9jZXNzLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7CiAgfQoKICBzdGF0ZS5lbmRlZCA9IHRydWU7CiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7Cn0KCmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHsKICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5OwogIGNvcmtSZXEuZW50cnkgPSBudWxsOwoKICB3aGlsZSAoZW50cnkpIHsKICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrOwogICAgc3RhdGUucGVuZGluZ2NiLS07CiAgICBjYihlcnIpOwog
ICAgZW50cnkgPSBlbnRyeS5uZXh0OwogIH0gLy8gcmV1c2UgdGhlIGZyZWUgY29ya1JlcS4KCgogIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTsKfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHsKICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZQogIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpbgogIC8vIHVzZXJsYW5kIHdpbGwgZmFpbAogIGVudW1l
cmFibGU6IGZhbHNlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkOwogIH0sCiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbQogICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldAogICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7CiAgICAg
IHJldHVybjsKICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseQogICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkCgoKICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7CiAgfQp9KTsKV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95OwpXcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTsKCldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7
CiAgY2IoZXJyKTsKfTsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiLi4vZXJyb3JzIjozNjgsIi4vX3N0cmVhbV9kdXBsZXgiOjM2OSwiLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kiOjM3NiwiLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlIjozODAsIi4vaW50ZXJuYWwvc3RyZWFtcy9z
dHJlYW0iOjM4MSwiX3Byb2Nlc3MiOjM1OCwiYnVmZmVyIjoyMTYsImluaGVyaXRzIjoyNzgsInV0aWwtZGVwcmVjYXRlIjo0MTJ9XSwzNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MpewondXNlIHN0cmljdCc7Cgp2YXIgX09iamVjdCRzZXRQcm90b3R5cGVPOwoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVl
LAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBmaW5pc2hlZCA9IHJlcXVpcmUoJy4vZW5kLW9mLXN0cmVhbScpOwoKdmFyIGtMYXN0UmVzb2x2ZSA9IFN5bWJvbCgnbGFzdFJlc29sdmUnKTsKdmFyIGtMYXN0UmVqZWN0ID0gU3ltYm9sKCdsYXN0UmVqZWN0Jyk7CnZhciBrRXJyb3IgPSBTeW1ib2woJ2Vycm9yJyk7CnZhciBrRW5k
ZWQgPSBTeW1ib2woJ2VuZGVkJyk7CnZhciBrTGFzdFByb21pc2UgPSBTeW1ib2woJ2xhc3RQcm9taXNlJyk7CnZhciBrSGFuZGxlUHJvbWlzZSA9IFN5bWJvbCgnaGFuZGxlUHJvbWlzZScpOwp2YXIga1N0cmVhbSA9IFN5bWJvbCgnc3RyZWFtJyk7CgpmdW5jdGlvbiBjcmVhdGVJdGVyUmVzdWx0KHZhbHVlLCBkb25lKSB7CiAgcmV0dXJuIHsKICAgIHZhbHVlOiB2YWx1ZSwKICAgIGRvbmU6IGRvbmUKICB9Owp9CgpmdW5jdGlvbiByZWFkQW5kUmVzb2x2ZShpdGVyKSB7CiAgdmFyIHJlc29sdmUgPSBpdGVyW2tMYXN0UmVzb2x2
ZV07CgogIGlmIChyZXNvbHZlICE9PSBudWxsKSB7CiAgICB2YXIgZGF0YSA9IGl0ZXJba1N0cmVhbV0ucmVhZCgpOyAvLyB3ZSBkZWZlciBpZiBkYXRhIGlzIG51bGwKICAgIC8vIHdlIGNhbiBiZSBleHBlY3RpbmcgZWl0aGVyICdlbmQnIG9yCiAgICAvLyAnZXJyb3InCgogICAgaWYgKGRhdGEgIT09IG51bGwpIHsKICAgICAgaXRlcltrTGFzdFByb21pc2VdID0gbnVsbDsKICAgICAgaXRlcltrTGFzdFJlc29sdmVdID0gbnVsbDsKICAgICAgaXRlcltrTGFzdFJlamVjdF0gPSBudWxsOwogICAgICByZXNvbHZlKGNyZWF0ZUl0
ZXJSZXN1bHQoZGF0YSwgZmFsc2UpKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIG9uUmVhZGFibGUoaXRlcikgewogIC8vIHdlIHdhaXQgZm9yIHRoZSBuZXh0IHRpY2ssIGJlY2F1c2UgaXQgbWlnaHQKICAvLyBlbWl0IGFuIGVycm9yIHdpdGggcHJvY2Vzcy5uZXh0VGljawogIHByb2Nlc3MubmV4dFRpY2socmVhZEFuZFJlc29sdmUsIGl0ZXIpOwp9CgpmdW5jdGlvbiB3cmFwRm9yTmV4dChsYXN0UHJvbWlzZSwgaXRlcikgewogIHJldHVybiBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBsYXN0UHJvbWlzZS50aGVu
KGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKGl0ZXJba0VuZGVkXSkgewogICAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGl0ZXJba0hhbmRsZVByb21pc2VdKHJlc29sdmUsIHJlamVjdCk7CiAgICB9LCByZWplY3QpOwogIH07Cn0KCnZhciBBc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGZ1bmN0aW9uICgpIHt9KTsKdmFyIFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9i
amVjdC5zZXRQcm90b3R5cGVPZigoX09iamVjdCRzZXRQcm90b3R5cGVPID0gewogIGdldCBzdHJlYW0oKSB7CiAgICByZXR1cm4gdGhpc1trU3RyZWFtXTsKICB9LAoKICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkgewogICAgdmFyIF90aGlzID0gdGhpczsgLy8gaWYgd2UgaGF2ZSBkZXRlY3RlZCBhbiBlcnJvciBpbiB0aGUgbWVhbndoaWxlCiAgICAvLyByZWplY3Qgc3RyYWlnaHQgYXdheQoKCiAgICB2YXIgZXJyb3IgPSB0aGlzW2tFcnJvcl07CgogICAgaWYgKGVycm9yICE9PSBudWxsKSB7CiAgICAgIHJldHVybiBQcm9taXNl
LnJlamVjdChlcnJvcik7CiAgICB9CgogICAgaWYgKHRoaXNba0VuZGVkXSkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7CiAgICB9CgogICAgaWYgKHRoaXNba1N0cmVhbV0uZGVzdHJveWVkKSB7CiAgICAgIC8vIFdlIG5lZWQgdG8gZGVmZXIgdmlhIG5leHRUaWNrIGJlY2F1c2UgaWYgLmRlc3Ryb3koZXJyKSBpcwogICAgICAvLyBjYWxsZWQsIHRoZSBlcnJvciB3aWxsIGJlIGVtaXR0ZWQgdmlhIG5leHRUaWNrLCBhbmQKICAgICAgLy8gd2UgY2Fubm90
IGd1YXJhbnRlZSB0aGF0IHRoZXJlIGlzIG5vIGVycm9yIGxpbmdlcmluZyBhcm91bmQKICAgICAgLy8gd2FpdGluZyB0byBiZSBlbWl0dGVkLgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKF90aGlzW2tFcnJvcl0pIHsKICAgICAgICAgICAgcmVqZWN0KF90aGlzW2tFcnJvcl0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVu
ZGVmaW5lZCwgdHJ1ZSkpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0gLy8gaWYgd2UgaGF2ZSBtdWx0aXBsZSBuZXh0KCkgY2FsbHMKICAgIC8vIHdlIHdpbGwgd2FpdCBmb3IgdGhlIHByZXZpb3VzIFByb21pc2UgdG8gZmluaXNoCiAgICAvLyB0aGlzIGxvZ2ljIGlzIG9wdGltaXplZCB0byBzdXBwb3J0IGZvciBhd2FpdCBsb29wcywKICAgIC8vIHdoZXJlIG5leHQoKSBpcyBvbmx5IGNhbGxlZCBvbmNlIGF0IGEgdGltZQoKCiAgICB2YXIgbGFzdFByb21pc2UgPSB0aGlzW2tMYXN0UHJvbWlzZV07
CiAgICB2YXIgcHJvbWlzZTsKCiAgICBpZiAobGFzdFByb21pc2UpIHsKICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHdyYXBGb3JOZXh0KGxhc3RQcm9taXNlLCB0aGlzKSk7CiAgICB9IGVsc2UgewogICAgICAvLyBmYXN0IHBhdGggbmVlZGVkIHRvIHN1cHBvcnQgbXVsdGlwbGUgdGhpcy5wdXNoKCkKICAgICAgLy8gd2l0aG91dCB0cmlnZ2VyaW5nIHRoZSBuZXh0KCkgcXVldWUKICAgICAgdmFyIGRhdGEgPSB0aGlzW2tTdHJlYW1dLnJlYWQoKTsKCiAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7CiAgICAgICAgcmV0dXJu
IFByb21pc2UucmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7CiAgICAgIH0KCiAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSh0aGlzW2tIYW5kbGVQcm9taXNlXSk7CiAgICB9CgogICAgdGhpc1trTGFzdFByb21pc2VdID0gcHJvbWlzZTsKICAgIHJldHVybiBwcm9taXNlOwogIH0KfSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgU3ltYm9sLmFzeW5jSXRlcmF0b3IsIGZ1bmN0aW9uICgpIHsKICByZXR1cm4gdGhpczsKfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JHNldFBy
b3RvdHlwZU8sICJyZXR1cm4iLCBmdW5jdGlvbiBfcmV0dXJuKCkgewogIHZhciBfdGhpczIgPSB0aGlzOyAvLyBkZXN0cm95KGVyciwgY2IpIGlzIGEgcHJpdmF0ZSBBUEkKICAvLyB3ZSBjYW4gZ3VhcmFudGVlIHdlIGhhdmUgdGhhdCBoZXJlLCBiZWNhdXNlIHdlIGNvbnRyb2wgdGhlCiAgLy8gUmVhZGFibGUgY2xhc3MgdGhpcyBpcyBhdHRhY2hlZCB0bwoKCiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIF90aGlzMltrU3RyZWFtXS5kZXN0cm95KG51bGwsIGZ1bmN0aW9uIChl
cnIpIHsKICAgICAgaWYgKGVycikgewogICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpOwogICAgfSk7CiAgfSk7Cn0pLCBfT2JqZWN0JHNldFByb3RvdHlwZU8pLCBBc3luY0l0ZXJhdG9yUHJvdG90eXBlKTsKCnZhciBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPSBmdW5jdGlvbiBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3Ioc3RyZWFtKSB7CiAgdmFyIF9PYmplY3QkY3JlYXRl
OwoKICB2YXIgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgKF9PYmplY3QkY3JlYXRlID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga1N0cmVhbSwgewogICAgdmFsdWU6IHN0cmVhbSwKICAgIHdyaXRhYmxlOiB0cnVlCiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0xhc3RSZXNvbHZlLCB7CiAgICB2YWx1ZTogbnVsbCwKICAgIHdyaXRhYmxlOiB0cnVlCiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0
ZSwga0xhc3RSZWplY3QsIHsKICAgIHZhbHVlOiBudWxsLAogICAgd3JpdGFibGU6IHRydWUKICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrRXJyb3IsIHsKICAgIHZhbHVlOiBudWxsLAogICAgd3JpdGFibGU6IHRydWUKICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrRW5kZWQsIHsKICAgIHZhbHVlOiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCwKICAgIHdyaXRhYmxlOiB0cnVlCiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0hhbmRsZVByb21p
c2UsIHsKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGRhdGEgPSBpdGVyYXRvcltrU3RyZWFtXS5yZWFkKCk7CgogICAgICBpZiAoZGF0YSkgewogICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsOwogICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsOwogICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7CiAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAg
aXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IHJlc29sdmU7CiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gcmVqZWN0OwogICAgICB9CiAgICB9LAogICAgd3JpdGFibGU6IHRydWUKICB9KSwgX09iamVjdCRjcmVhdGUpKTsKICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDsKICBmaW5pc2hlZChzdHJlYW0sIGZ1bmN0aW9uIChlcnIpIHsKICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09ICdFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRScpIHsKICAgICAgdmFyIHJlamVjdCA9IGl0ZXJhdG9yW2tMYXN0UmVqZWN0
XTsgLy8gcmVqZWN0IGlmIHdlIGFyZSB3YWl0aW5nIGZvciBkYXRhIGluIHRoZSBQcm9taXNlCiAgICAgIC8vIHJldHVybmVkIGJ5IG5leHQoKSBhbmQgc3RvcmUgdGhlIGVycm9yCgogICAgICBpZiAocmVqZWN0ICE9PSBudWxsKSB7CiAgICAgICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7CiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7CiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDsKICAgICAgICByZWplY3QoZXJyKTsKICAgICAgfQoKICAgICAgaXRlcmF0b3Jba0Vycm9y
XSA9IGVycjsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciByZXNvbHZlID0gaXRlcmF0b3Jba0xhc3RSZXNvbHZlXTsKCiAgICBpZiAocmVzb2x2ZSAhPT0gbnVsbCkgewogICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDsKICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7CiAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7CiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTsKICAgIH0KCiAgICBpdGVyYXRvcltrRW5kZWRdID0gdHJ1ZTsKICB9
KTsKICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgb25SZWFkYWJsZS5iaW5kKG51bGwsIGl0ZXJhdG9yKSk7CiAgcmV0dXJuIGl0ZXJhdG9yOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3I7Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSkKCn0seyIuL2VuZC1vZi1zdHJlYW0iOjM3NywiX3Byb2Nlc3MiOjM1OH1dLDM3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJh
YmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFw
cGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNv
dXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291
cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJu
IG9iajsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3Jp
cHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZp
bmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKdmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnYnVmZmVyJyksCiAgICBCdWZmZXIgPSBfcmVxdWlyZS5CdWZmZXI7Cgp2YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgndXRpbCcpLAogICAgaW5zcGVjdCA9IF9yZXF1aXJlMi5pbnNwZWN0OwoKdmFyIGN1c3RvbSA9IGluc3BlY3QgJiYgaW5zcGVj
dC5jdXN0b20gfHwgJ2luc3BlY3QnOwoKZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7CiAgQnVmZmVyLnByb3RvdHlwZS5jb3B5LmNhbGwoc3JjLCB0YXJnZXQsIG9mZnNldCk7Cn0KCm1vZHVsZS5leHBvcnRzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpOwoKICAgIHRoaXMuaGVhZCA9IG51bGw7CiAgICB0aGlzLnRhaWwgPSBudWxsOwogICAgdGhpcy5sZW5ndGggPSAwOwogIH0K
CiAgX2NyZWF0ZUNsYXNzKEJ1ZmZlckxpc3QsIFt7CiAgICBrZXk6ICJwdXNoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwdXNoKHYpIHsKICAgICAgdmFyIGVudHJ5ID0gewogICAgICAgIGRhdGE6IHYsCiAgICAgICAgbmV4dDogbnVsbAogICAgICB9OwogICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7CiAgICAgIHRoaXMudGFpbCA9IGVudHJ5OwogICAgICArK3RoaXMubGVuZ3RoOwogICAgfQogIH0sIHsKICAgIGtleTogInVuc2hpZnQiLAogICAg
dmFsdWU6IGZ1bmN0aW9uIHVuc2hpZnQodikgewogICAgICB2YXIgZW50cnkgPSB7CiAgICAgICAgZGF0YTogdiwKICAgICAgICBuZXh0OiB0aGlzLmhlYWQKICAgICAgfTsKICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTsKICAgICAgdGhpcy5oZWFkID0gZW50cnk7CiAgICAgICsrdGhpcy5sZW5ndGg7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hpZnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0KCkgewogICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjsKICAgICAgdmFy
IHJldCA9IHRoaXMuaGVhZC5kYXRhOwogICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDsKICAgICAgLS10aGlzLmxlbmd0aDsKICAgICAgcmV0dXJuIHJldDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjbGVhciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7CiAgICAgIHRoaXMubGVuZ3RoID0gMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJqb2lu
IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luKHMpIHsKICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7CiAgICAgIHZhciBwID0gdGhpcy5oZWFkOwogICAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7CgogICAgICB3aGlsZSAocCA9IHAubmV4dCkgewogICAgICAgIHJldCArPSBzICsgcC5kYXRhOwogICAgICB9CgogICAgICByZXR1cm4gcmV0OwogICAgfQogIH0sIHsKICAgIGtleTogImNvbmNhdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29uY2F0KG4pIHsKICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAw
KSByZXR1cm4gQnVmZmVyLmFsbG9jKDApOwogICAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApOwogICAgICB2YXIgcCA9IHRoaXMuaGVhZDsKICAgICAgdmFyIGkgPSAwOwoKICAgICAgd2hpbGUgKHApIHsKICAgICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTsKICAgICAgICBpICs9IHAuZGF0YS5sZW5ndGg7CiAgICAgICAgcCA9IHAubmV4dDsKICAgICAgfQoKICAgICAgcmV0dXJuIHJldDsKICAgIH0gLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIG9yIGNoYXJhY3Rl
cnMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS4KCiAgfSwgewogICAga2V5OiAiY29uc3VtZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3VtZShuLCBoYXNTdHJpbmdzKSB7CiAgICAgIHZhciByZXQ7CgogICAgICBpZiAobiA8IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkgewogICAgICAgIC8vIGBzbGljZWAgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3MuCiAgICAgICAgcmV0ID0gdGhpcy5oZWFkLmRhdGEuc2xpY2UoMCwgbik7CiAgICAgICAgdGhpcy5oZWFkLmRhdGEgPSB0aGlzLmhlYWQuZGF0YS5zbGljZShu
KTsKICAgICAgfSBlbHNlIGlmIChuID09PSB0aGlzLmhlYWQuZGF0YS5sZW5ndGgpIHsKICAgICAgICAvLyBGaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2guCiAgICAgICAgcmV0ID0gdGhpcy5zaGlmdCgpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlci4KICAgICAgICByZXQgPSBoYXNTdHJpbmdzID8gdGhpcy5fZ2V0U3RyaW5nKG4pIDogdGhpcy5fZ2V0QnVmZmVyKG4pOwogICAgICB9CgogICAgICByZXR1cm4gcmV0OwogICAgfQogIH0sIHsKICAgIGtleTog
ImZpcnN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaXJzdCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaGVhZC5kYXRhOwogICAgfSAvLyBDb25zdW1lcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBidWZmZXJlZCBkYXRhLgoKICB9LCB7CiAgICBrZXk6ICJfZ2V0U3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3RyaW5nKG4pIHsKICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7CiAgICAgIHZhciBjID0gMTsKICAgICAgdmFyIHJldCA9IHAuZGF0YTsKICAgICAgbiAtPSByZXQubGVuZ3RoOwoK
ICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHsKICAgICAgICB2YXIgc3RyID0gcC5kYXRhOwogICAgICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47CiAgICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTsKICAgICAgICBuIC09IG5iOwoKICAgICAgICBpZiAobiA9PT0gMCkgewogICAgICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7CiAgICAgICAgICAgICsrYzsKICAgICAgICAgICAgaWYgKHAubmV4dCkgdGhpcy5oZWFk
ID0gcC5uZXh0O2Vsc2UgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHA7CiAgICAgICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICArK2M7CiAgICAgIH0KCiAgICAgIHRoaXMubGVuZ3RoIC09IGM7CiAgICAgIHJldHVybiByZXQ7CiAgICB9IC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBidWZmZXJlZCBkYXRh
LgoKICB9LCB7CiAgICBrZXk6ICJfZ2V0QnVmZmVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0QnVmZmVyKG4pIHsKICAgICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTsKICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7CiAgICAgIHZhciBjID0gMTsKICAgICAgcC5kYXRhLmNvcHkocmV0KTsKICAgICAgbiAtPSBwLmRhdGEubGVuZ3RoOwoKICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHsKICAgICAgICB2YXIgYnVmID0gcC5kYXRhOwogICAgICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6
IG47CiAgICAgICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpOwogICAgICAgIG4gLT0gbmI7CgogICAgICAgIGlmIChuID09PSAwKSB7CiAgICAgICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHsKICAgICAgICAgICAgKytjOwogICAgICAgICAgICBpZiAocC5uZXh0KSB0aGlzLmhlYWQgPSBwLm5leHQ7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5oZWFkID0gcDsKICAgICAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5i
KTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgICsrYzsKICAgICAgfQoKICAgICAgdGhpcy5sZW5ndGggLT0gYzsKICAgICAgcmV0dXJuIHJldDsKICAgIH0gLy8gTWFrZSBzdXJlIHRoZSBsaW5rZWQgbGlzdCBvbmx5IHNob3dzIHRoZSBtaW5pbWFsIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbi4KCiAgfSwgewogICAga2V5OiBjdXN0b20sCiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoXywgb3B0aW9ucykgewogICAgICByZXR1cm4gaW5zcGVjdCh0aGlzLCBfb2JqZWN0U3ByZWFkKHt9LCBv
cHRpb25zLCB7CiAgICAgICAgLy8gT25seSBpbnNwZWN0IG9uZSBsZXZlbC4KICAgICAgICBkZXB0aDogMCwKICAgICAgICAvLyBJdCBzaG91bGQgbm90IHJlY3Vyc2UuCiAgICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2UKICAgICAgfSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEJ1ZmZlckxpc3Q7Cn0oKTsKCn0seyJidWZmZXIiOjIxNiwidXRpbCI6MTg1fV0sMzc2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsKJ3VzZSBzdHJpY3QnOyAvLyB1bmRvY3VtZW50ZWQgY2Io
KSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJCgpmdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHsKICB2YXIgX3RoaXMgPSB0aGlzOwoKICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkOwogIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7CgogIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkg
ewogICAgaWYgKGNiKSB7CiAgICAgIGNiKGVycik7CiAgICB9IGVsc2UgaWYgKGVycikgewogICAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHsKICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpOwogICAgICB9IGVsc2UgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkgewogICAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTsKICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpOwogICAgICB9CiAg
ICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfSAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXIKICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3MKCgogIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7CiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7CiAgfSAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0
IGFzIGRlc3Ryb3llZCBhcyB3ZWxsCgoKICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkgewogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlOwogIH0KCiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikgewogICAgaWYgKCFjYiAmJiBlcnIpIHsKICAgICAgaWYgKCFfdGhpcy5fd3JpdGFibGVTdGF0ZSkgewogICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycik7CiAgICAgIH0gZWxzZSBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRl
LmVycm9yRW1pdHRlZCkgewogICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7CiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JBbmRDbG9zZU5ULCBfdGhpcywgZXJyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoY2IpIHsKICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpOwogICAgICBjYihlcnIpOwogICAgfSBlbHNlIHsKICAgICAgcHJvY2Vz
cy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpOwogICAgfQogIH0pOwoKICByZXR1cm4gdGhpczsKfQoKZnVuY3Rpb24gZW1pdEVycm9yQW5kQ2xvc2VOVChzZWxmLCBlcnIpIHsKICBlbWl0RXJyb3JOVChzZWxmLCBlcnIpOwogIGVtaXRDbG9zZU5UKHNlbGYpOwp9CgpmdW5jdGlvbiBlbWl0Q2xvc2VOVChzZWxmKSB7CiAgaWYgKHNlbGYuX3dyaXRhYmxlU3RhdGUgJiYgIXNlbGYuX3dyaXRhYmxlU3RhdGUuZW1pdENsb3NlKSByZXR1cm47CiAgaWYgKHNlbGYuX3JlYWRhYmxlU3RhdGUgJiYgIXNlbGYuX3JlYWRhYmxlU3Rh
dGUuZW1pdENsb3NlKSByZXR1cm47CiAgc2VsZi5lbWl0KCdjbG9zZScpOwp9CgpmdW5jdGlvbiB1bmRlc3Ryb3koKSB7CiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHsKICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7CiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTsKICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTsKICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlOwogIH0KCiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHsK
ICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7CiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7CiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlOwogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5hbENhbGxlZCA9IGZhbHNlOwogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZCA9IGZhbHNlOwogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlOwogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTsK
ICB9Cn0KCmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikgewogIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpOwp9CgpmdW5jdGlvbiBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVycikgewogIC8vIFdlIGhhdmUgdGVzdHMgdGhhdCByZWx5IG9uIGVycm9ycyBiZWluZyBlbWl0dGVkCiAgLy8gaW4gdGhlIHNhbWUgdGljaywgc28gY2hhbmdpbmcgdGhpcyBpcyBzZW12ZXIgbWFqb3IuCiAgLy8gRm9yIG5vdyB3aGVuIHlvdSBvcHQtaW4gdG8gYXV0b0Rlc3Ryb3kgd2UgYWxsb3cKICAvLyB0aGUgZXJyb3IgdG8gYmUgZW1pdHRl
ZCBuZXh0VGljay4gSW4gYSBmdXR1cmUKICAvLyBzZW12ZXIgbWFqb3IgdXBkYXRlIHdlIHNob3VsZCBjaGFuZ2UgdGhlIGRlZmF1bHQgdG8gdGhpcy4KICB2YXIgclN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlOwogIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7CiAgaWYgKHJTdGF0ZSAmJiByU3RhdGUuYXV0b0Rlc3Ryb3kgfHwgd1N0YXRlICYmIHdTdGF0ZS5hdXRvRGVzdHJveSkgc3RyZWFtLmRlc3Ryb3koZXJyKTtlbHNlIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7Cn0KCm1vZHVsZS5leHBvcnRz
ID0gewogIGRlc3Ryb3k6IGRlc3Ryb3ksCiAgdW5kZXN0cm95OiB1bmRlc3Ryb3ksCiAgZXJyb3JPckRlc3Ryb3k6IGVycm9yT3JEZXN0cm95Cn07Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSkKCn0seyJfcHJvY2VzcyI6MzU4fV0sMzc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hZmludG9zaC9lbmQtb2Ytc3RyZWFtIHdpdGgKLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCku
Cid1c2Ugc3RyaWN0JzsKCnZhciBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFOwoKZnVuY3Rpb24gb25jZShjYWxsYmFjaykgewogIHZhciBjYWxsZWQgPSBmYWxzZTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgaWYgKGNhbGxlZCkgcmV0dXJuOwogICAgY2FsbGVkID0gdHJ1ZTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9r
ZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTsKICB9Owp9CgpmdW5jdGlvbiBub29wKCkge30KCmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHsKICByZXR1cm4gc3RyZWFtLnNldEhlYWRlciAmJiB0eXBlb2Ygc3RyZWFtLmFib3J0ID09PSAnZnVuY3Rpb24nOwp9CgpmdW5jdGlvbiBlb3Moc3RyZWFtLCBvcHRzLCBjYWxsYmFjaykgewogIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJu
IGVvcyhzdHJlYW0sIG51bGwsIG9wdHMpOwogIGlmICghb3B0cykgb3B0cyA9IHt9OwogIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayB8fCBub29wKTsKICB2YXIgcmVhZGFibGUgPSBvcHRzLnJlYWRhYmxlIHx8IG9wdHMucmVhZGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS5yZWFkYWJsZTsKICB2YXIgd3JpdGFibGUgPSBvcHRzLndyaXRhYmxlIHx8IG9wdHMud3JpdGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS53cml0YWJsZTsKCiAgdmFyIG9ubGVnYWN5ZmluaXNoID0gZnVuY3Rpb24gb25sZWdhY3lmaW5pc2goKSB7CiAgICBp
ZiAoIXN0cmVhbS53cml0YWJsZSkgb25maW5pc2goKTsKICB9OwoKICB2YXIgd3JpdGFibGVFbmRlZCA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZSAmJiBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQ7CgogIHZhciBvbmZpbmlzaCA9IGZ1bmN0aW9uIG9uZmluaXNoKCkgewogICAgd3JpdGFibGUgPSBmYWxzZTsKICAgIHdyaXRhYmxlRW5kZWQgPSB0cnVlOwogICAgaWYgKCFyZWFkYWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pOwogIH07CgogIHZhciByZWFkYWJsZUVuZGVkID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlICYm
IHN0cmVhbS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkOwoKICB2YXIgb25lbmQgPSBmdW5jdGlvbiBvbmVuZCgpIHsKICAgIHJlYWRhYmxlID0gZmFsc2U7CiAgICByZWFkYWJsZUVuZGVkID0gdHJ1ZTsKICAgIGlmICghd3JpdGFibGUpIGNhbGxiYWNrLmNhbGwoc3RyZWFtKTsKICB9OwoKICB2YXIgb25lcnJvciA9IGZ1bmN0aW9uIG9uZXJyb3IoZXJyKSB7CiAgICBjYWxsYmFjay5jYWxsKHN0cmVhbSwgZXJyKTsKICB9OwoKICB2YXIgb25jbG9zZSA9IGZ1bmN0aW9uIG9uY2xvc2UoKSB7CiAgICB2YXIgZXJyOwoKICAgIGlm
IChyZWFkYWJsZSAmJiAhcmVhZGFibGVFbmRlZCkgewogICAgICBpZiAoIXN0cmVhbS5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZGVkKSBlcnIgPSBuZXcgRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UoKTsKICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpOwogICAgfQoKICAgIGlmICh3cml0YWJsZSAmJiAhd3JpdGFibGVFbmRlZCkgewogICAgICBpZiAoIXN0cmVhbS5fd3JpdGFibGVTdGF0ZSB8fCAhc3RyZWFtLl93cml0YWJsZVN0YXRlLmVuZGVkKSBlcnIgPSBuZXcg
RVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UoKTsKICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpOwogICAgfQogIH07CgogIHZhciBvbnJlcXVlc3QgPSBmdW5jdGlvbiBvbnJlcXVlc3QoKSB7CiAgICBzdHJlYW0ucmVxLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7CiAgfTsKCiAgaWYgKGlzUmVxdWVzdChzdHJlYW0pKSB7CiAgICBzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpOwogICAgc3RyZWFtLm9uKCdhYm9ydCcsIG9uY2xvc2UpOwogICAgaWYgKHN0cmVhbS5yZXEpIG9ucmVxdWVzdCgpO2Vs
c2Ugc3RyZWFtLm9uKCdyZXF1ZXN0Jywgb25yZXF1ZXN0KTsKICB9IGVsc2UgaWYgKHdyaXRhYmxlICYmICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUpIHsKICAgIC8vIGxlZ2FjeSBzdHJlYW1zCiAgICBzdHJlYW0ub24oJ2VuZCcsIG9ubGVnYWN5ZmluaXNoKTsKICAgIHN0cmVhbS5vbignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7CiAgfQoKICBzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTsKICBzdHJlYW0ub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTsKICBpZiAob3B0cy5lcnJvciAhPT0gZmFsc2UpIHN0cmVhbS5vbignZXJyb3InLCBv
bmVycm9yKTsKICBzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY29tcGxldGUnLCBvbmZpbmlzaCk7CiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgb25jbG9zZSk7CiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ3JlcXVlc3QnLCBvbnJlcXVlc3QpOwogICAgaWYgKHN0cmVhbS5yZXEpIHN0cmVhbS5yZXEucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTsKICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcign
ZW5kJywgb25sZWdhY3lmaW5pc2gpOwogICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTsKICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpOwogICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7CiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7CiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7CiAgfTsKfQoKbW9kdWxlLmV4cG9ydHMgPSBlb3M7Cgp9LHsiLi4vLi4vLi4vZXJy
b3JzIjozNjh9XSwzNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWRhYmxlLmZyb20gaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnJvd3NlcicpOwp9OwoKfSx7fV0sMzc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hZmludG9zaC9wdW1wIHdpdGgKLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1h
dGhpYXMgQnV1cyAoQG1hZmludG9zaCkuCid1c2Ugc3RyaWN0JzsKCnZhciBlb3M7CgpmdW5jdGlvbiBvbmNlKGNhbGxiYWNrKSB7CiAgdmFyIGNhbGxlZCA9IGZhbHNlOwogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoY2FsbGVkKSByZXR1cm47CiAgICBjYWxsZWQgPSB0cnVlOwogICAgY2FsbGJhY2suYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpOwogIH07Cn0KCnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLAogICAgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNv
ZGVzLkVSUl9NSVNTSU5HX0FSR1MsCiAgICBFUlJfU1RSRUFNX0RFU1RST1lFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fREVTVFJPWUVEOwoKZnVuY3Rpb24gbm9vcChlcnIpIHsKICAvLyBSZXRocm93IHRoZSBlcnJvciBpZiBpdCBleGlzdHMgdG8gYXZvaWQgc3dhbGxvd2luZyBpdAogIGlmIChlcnIpIHRocm93IGVycjsKfQoKZnVuY3Rpb24gaXNSZXF1ZXN0KHN0cmVhbSkgewogIHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIHR5cGVvZiBzdHJlYW0uYWJvcnQgPT09ICdmdW5jdGlvbic7Cn0KCmZ1bmN0aW9uIGRl
c3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGNhbGxiYWNrKSB7CiAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrKTsKICB2YXIgY2xvc2VkID0gZmFsc2U7CiAgc3RyZWFtLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHsKICAgIGNsb3NlZCA9IHRydWU7CiAgfSk7CiAgaWYgKGVvcyA9PT0gdW5kZWZpbmVkKSBlb3MgPSByZXF1aXJlKCcuL2VuZC1vZi1zdHJlYW0nKTsKICBlb3Moc3RyZWFtLCB7CiAgICByZWFkYWJsZTogcmVhZGluZywKICAgIHdyaXRhYmxlOiB3cml0aW5nCiAgfSwgZnVuY3Rpb24gKGVycikgewog
ICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICBjbG9zZWQgPSB0cnVlOwogICAgY2FsbGJhY2soKTsKICB9KTsKICB2YXIgZGVzdHJveWVkID0gZmFsc2U7CiAgcmV0dXJuIGZ1bmN0aW9uIChlcnIpIHsKICAgIGlmIChjbG9zZWQpIHJldHVybjsKICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjsKICAgIGRlc3Ryb3llZCA9IHRydWU7IC8vIHJlcXVlc3QuZGVzdHJveSBqdXN0IGRvIC5lbmQgLSAuYWJvcnQgaXMgd2hhdCB3ZSB3YW50CgogICAgaWYgKGlzUmVxdWVzdChzdHJlYW0pKSByZXR1cm4gc3RyZWFtLmFi
b3J0KCk7CiAgICBpZiAodHlwZW9mIHN0cmVhbS5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gc3RyZWFtLmRlc3Ryb3koKTsKICAgIGNhbGxiYWNrKGVyciB8fCBuZXcgRVJSX1NUUkVBTV9ERVNUUk9ZRUQoJ3BpcGUnKSk7CiAgfTsKfQoKZnVuY3Rpb24gY2FsbChmbikgewogIGZuKCk7Cn0KCmZ1bmN0aW9uIHBpcGUoZnJvbSwgdG8pIHsKICByZXR1cm4gZnJvbS5waXBlKHRvKTsKfQoKZnVuY3Rpb24gcG9wQ2FsbGJhY2soc3RyZWFtcykgewogIGlmICghc3RyZWFtcy5sZW5ndGgpIHJldHVybiBub29wOwogIGlmICh0
eXBlb2Ygc3RyZWFtc1tzdHJlYW1zLmxlbmd0aCAtIDFdICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbm9vcDsKICByZXR1cm4gc3RyZWFtcy5wb3AoKTsKfQoKZnVuY3Rpb24gcGlwZWxpbmUoKSB7CiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0cmVhbXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICBzdHJlYW1zW19rZXldID0gYXJndW1lbnRzW19rZXldOwogIH0KCiAgdmFyIGNhbGxiYWNrID0gcG9wQ2FsbGJhY2soc3RyZWFtcyk7CiAgaWYgKEFycmF5
LmlzQXJyYXkoc3RyZWFtc1swXSkpIHN0cmVhbXMgPSBzdHJlYW1zWzBdOwoKICBpZiAoc3RyZWFtcy5sZW5ndGggPCAyKSB7CiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnc3RyZWFtcycpOwogIH0KCiAgdmFyIGVycm9yOwogIHZhciBkZXN0cm95cyA9IHN0cmVhbXMubWFwKGZ1bmN0aW9uIChzdHJlYW0sIGkpIHsKICAgIHZhciByZWFkaW5nID0gaSA8IHN0cmVhbXMubGVuZ3RoIC0gMTsKICAgIHZhciB3cml0aW5nID0gaSA+IDA7CiAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywg
ZnVuY3Rpb24gKGVycikgewogICAgICBpZiAoIWVycm9yKSBlcnJvciA9IGVycjsKICAgICAgaWYgKGVycikgZGVzdHJveXMuZm9yRWFjaChjYWxsKTsKICAgICAgaWYgKHJlYWRpbmcpIHJldHVybjsKICAgICAgZGVzdHJveXMuZm9yRWFjaChjYWxsKTsKICAgICAgY2FsbGJhY2soZXJyb3IpOwogICAgfSk7CiAgfSk7CiAgcmV0dXJuIHN0cmVhbXMucmVkdWNlKHBpcGUpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHBpcGVsaW5lOwoKfSx7Ii4uLy4uLy4uL2Vycm9ycyI6MzY4LCIuL2VuZC1vZi1zdHJlYW0iOjM3N31dLDM4MDpbZnVu
Y3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCnZhciBFUlJfSU5WQUxJRF9PUFRfVkFMVUUgPSByZXF1aXJlKCcuLi8uLi8uLi9lcnJvcnMnKS5jb2Rlcy5FUlJfSU5WQUxJRF9PUFRfVkFMVUU7CgpmdW5jdGlvbiBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7CiAgcmV0dXJuIG9wdGlvbnMuaGlnaFdhdGVyTWFyayAhPSBudWxsID8gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrIDogaXNEdXBsZXggPyBvcHRpb25zW2R1cGxleEtleV0gOiBudWxsOwp9CgpmdW5j
dGlvbiBnZXRIaWdoV2F0ZXJNYXJrKHN0YXRlLCBvcHRpb25zLCBkdXBsZXhLZXksIGlzRHVwbGV4KSB7CiAgdmFyIGh3bSA9IGhpZ2hXYXRlck1hcmtGcm9tKG9wdGlvbnMsIGlzRHVwbGV4LCBkdXBsZXhLZXkpOwoKICBpZiAoaHdtICE9IG51bGwpIHsKICAgIGlmICghKGlzRmluaXRlKGh3bSkgJiYgTWF0aC5mbG9vcihod20pID09PSBod20pIHx8IGh3bSA8IDApIHsKICAgICAgdmFyIG5hbWUgPSBpc0R1cGxleCA/IGR1cGxleEtleSA6ICdoaWdoV2F0ZXJNYXJrJzsKICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX09QVF9W
QUxVRShuYW1lLCBod20pOwogICAgfQoKICAgIHJldHVybiBNYXRoLmZsb29yKGh3bSk7CiAgfSAvLyBEZWZhdWx0IHZhbHVlCgoKICByZXR1cm4gc3RhdGUub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0Owp9Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBnZXRIaWdoV2F0ZXJNYXJrOiBnZXRIaWdoV2F0ZXJNYXJrCn07Cgp9LHsiLi4vLi4vLi4vZXJyb3JzIjozNjh9XSwzODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2
ZW50RW1pdHRlcjsKCn0seyJldmVudHMiOjI1OH1dLDM4MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTsKZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzOwpleHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0czsKZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTsKZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFt
X2R1cGxleC5qcycpOwpleHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7CmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7CmV4cG9ydHMuZmluaXNoZWQgPSByZXF1aXJlKCcuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanMnKTsKZXhwb3J0cy5waXBlbGluZSA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanMnKTsKCn0seyIuL2xpYi9fc3RyZWFtX2R1cGxleC5q
cyI6MzY5LCIuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIjozNzAsIi4vbGliL19zdHJlYW1fcmVhZGFibGUuanMiOjM3MSwiLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiOjM3MiwiLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcyI6MzczLCIuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanMiOjM3NywiLi9saWIvaW50ZXJuYWwvc3RyZWFtcy9waXBlbGluZS5qcyI6Mzc5fV0sMzgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKdmFyIEJ1ZmZlciA9IHJlcXVp
cmUoJ2J1ZmZlcicpLkJ1ZmZlcjsKCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgSGFzaEJhc2UgPSByZXF1aXJlKCdoYXNoLWJhc2UnKTsKCnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KTsKdmFyIHpsID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsIDEs
IDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNdOwp2YXIgenIgPSBbNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMiwgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMiwgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMywgOCwgNiwgNCwgMSwgMywgMTEsIDE1
LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCwgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMV07CnZhciBzbCA9IFsxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMiwgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LCAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAx
NCwgNSwgNiwgOCwgNiwgNSwgMTIsIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNl07CnZhciBzciA9IFs4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSwgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LCAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAx
MiwgNSwgMTUsIDgsIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMV07CnZhciBobCA9IFsweDAwMDAwMDAwLCAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGE5NTNmZDRlXTsKdmFyIGhyID0gWzB4NTBhMjhiZTYsIDB4NWM0ZGQxMjQsIDB4NmQ3MDNlZjMsIDB4N2E2ZDc2ZTksIDB4MDAwMDAwMDBdOwoKZnVuY3Rpb24gUklQRU1EMTYwKCkgewogIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpOyAvLyBzdGF0ZQoKICB0aGlzLl9hID0gMHg2NzQ1MjMwMTsKICB0
aGlzLl9iID0gMHhlZmNkYWI4OTsKICB0aGlzLl9jID0gMHg5OGJhZGNmZTsKICB0aGlzLl9kID0gMHgxMDMyNTQ3NjsKICB0aGlzLl9lID0gMHhjM2QyZTFmMDsKfQoKaW5oZXJpdHMoUklQRU1EMTYwLCBIYXNoQmFzZSk7CgpSSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHdvcmRzID0gQVJSQVkxNjsKCiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB7CiAgICB3b3Jkc1tqXSA9IHRoaXMuX2Jsb2NrLnJlYWRJbnQzMkxFKGogKiA0KTsKICB9CgogIHZhciBhbCA9IHRoaXMuX2Eg
fCAwOwogIHZhciBibCA9IHRoaXMuX2IgfCAwOwogIHZhciBjbCA9IHRoaXMuX2MgfCAwOwogIHZhciBkbCA9IHRoaXMuX2QgfCAwOwogIHZhciBlbCA9IHRoaXMuX2UgfCAwOwogIHZhciBhciA9IHRoaXMuX2EgfCAwOwogIHZhciBiciA9IHRoaXMuX2IgfCAwOwogIHZhciBjciA9IHRoaXMuX2MgfCAwOwogIHZhciBkciA9IHRoaXMuX2QgfCAwOwogIHZhciBlciA9IHRoaXMuX2UgfCAwOyAvLyBjb21wdXRhdGlvbgoKICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpICs9IDEpIHsKICAgIHZhciB0bDsKICAgIHZhciB0cjsKCiAg
ICBpZiAoaSA8IDE2KSB7CiAgICAgIHRsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFswXSwgc2xbaV0pOwogICAgICB0ciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMF0sIHNyW2ldKTsKICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7CiAgICAgIHRsID0gZm4yKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsxXSwgc2xbaV0pOwogICAgICB0ciA9IGZuNChhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMV0sIHNyW2ldKTsKICAg
IH0gZWxzZSBpZiAoaSA8IDQ4KSB7CiAgICAgIHRsID0gZm4zKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsyXSwgc2xbaV0pOwogICAgICB0ciA9IGZuMyhhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMl0sIHNyW2ldKTsKICAgIH0gZWxzZSBpZiAoaSA8IDY0KSB7CiAgICAgIHRsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFszXSwgc2xbaV0pOwogICAgICB0ciA9IGZuMihhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbM10sIHNyW2ld
KTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIGlmIChpPDgwKSB7CiAgICAgIHRsID0gZm41KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFs0XSwgc2xbaV0pOwogICAgICB0ciA9IGZuMShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbNF0sIHNyW2ldKTsKICAgIH0KCiAgICBhbCA9IGVsOwogICAgZWwgPSBkbDsKICAgIGRsID0gcm90bChjbCwgMTApOwogICAgY2wgPSBibDsKICAgIGJsID0gdGw7CiAgICBhciA9IGVyOwogICAgZXIgPSBkcjsKICAgIGRyID0gcm90bChjciwgMTApOwogICAg
Y3IgPSBicjsKICAgIGJyID0gdHI7CiAgfSAvLyB1cGRhdGUgc3RhdGUKCgogIHZhciB0ID0gdGhpcy5fYiArIGNsICsgZHIgfCAwOwogIHRoaXMuX2IgPSB0aGlzLl9jICsgZGwgKyBlciB8IDA7CiAgdGhpcy5fYyA9IHRoaXMuX2QgKyBlbCArIGFyIHwgMDsKICB0aGlzLl9kID0gdGhpcy5fZSArIGFsICsgYnIgfCAwOwogIHRoaXMuX2UgPSB0aGlzLl9hICsgYmwgKyBjciB8IDA7CiAgdGhpcy5fYSA9IHQ7Cn07CgpSSVBFTUQxNjAucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7CiAgLy8gY3JlYXRlIHBhZGRpbmcg
YW5kIGhhbmRsZSBibG9ja3MKICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODA7CgogIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7CiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NCk7CgogICAgdGhpcy5fdXBkYXRlKCk7CgogICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwOwogIH0KCiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpOwoKICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpOwoKICB0aGlz
Ll9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFsxXSwgNjApOwoKICB0aGlzLl91cGRhdGUoKTsgLy8gcHJvZHVjZSByZXN1bHQKCgogIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MgPyBCdWZmZXIuYWxsb2MoMjApIDogbmV3IEJ1ZmZlcigyMCk7CiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKTsKICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpOwogIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOCk7CiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMik7CiAgYnVmZmVyLndy
aXRlSW50MzJMRSh0aGlzLl9lLCAxNik7CiAgcmV0dXJuIGJ1ZmZlcjsKfTsKCmZ1bmN0aW9uIHJvdGwoeCwgbikgewogIHJldHVybiB4IDw8IG4gfCB4ID4+PiAzMiAtIG47Cn0KCmZ1bmN0aW9uIGZuMShhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7CiAgcmV0dXJuIHJvdGwoYSArIChiIF4gYyBeIGQpICsgbSArIGsgfCAwLCBzKSArIGUgfCAwOwp9CgpmdW5jdGlvbiBmbjIoYSwgYiwgYywgZCwgZSwgbSwgaywgcykgewogIHJldHVybiByb3RsKGEgKyAoYiAmIGMgfCB+YiAmIGQpICsgbSArIGsgfCAwLCBzKSArIGUgfCAwOwp9
CgpmdW5jdGlvbiBmbjMoYSwgYiwgYywgZCwgZSwgbSwgaywgcykgewogIHJldHVybiByb3RsKGEgKyAoKGIgfCB+YykgXiBkKSArIG0gKyBrIHwgMCwgcykgKyBlIHwgMDsKfQoKZnVuY3Rpb24gZm40KGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHsKICByZXR1cm4gcm90bChhICsgKGIgJiBkIHwgYyAmIH5kKSArIG0gKyBrIHwgMCwgcykgKyBlIHwgMDsKfQoKZnVuY3Rpb24gZm41KGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHsKICByZXR1cm4gcm90bChhICsgKGIgXiAoYyB8IH5kKSkgKyBtICsgayB8IDAsIHMpICsgZSB8IDA7
Cn0KCm1vZHVsZS5leHBvcnRzID0gUklQRU1EMTYwOwoKfSx7ImJ1ZmZlciI6MjE2LCJoYXNoLWJhc2UiOjI2MSwiaW5oZXJpdHMiOjI3OH1dLDM4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi8KdmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpOwoKdmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXI7IC8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnMKCmZ1bmN0
aW9uIGNvcHlQcm9wcyhzcmMsIGRzdCkgewogIGZvciAodmFyIGtleSBpbiBzcmMpIHsKICAgIGRzdFtrZXldID0gc3JjW2tleV07CiAgfQp9CgppZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7CiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXI7Cn0gZWxzZSB7CiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJykKICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKTsKICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVC
dWZmZXI7Cn0KCmZ1bmN0aW9uIFNhZmVCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTsKfSAvLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyCgoKY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcik7CgpTYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3Io
J0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7CiAgfQoKICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTsKfTsKClNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJyk7CiAgfQoKICB2YXIgYnVmID0gQnVmZmVyKHNpemUpOwoKICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7CiAgICBpZiAo
dHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgewogICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZyk7CiAgICB9IGVsc2UgewogICAgICBidWYuZmlsbChmaWxsKTsKICAgIH0KICB9IGVsc2UgewogICAgYnVmLmZpbGwoMCk7CiAgfQoKICByZXR1cm4gYnVmOwp9OwoKU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7CiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpOwogIH0KCiAgcmV0dXJu
IEJ1ZmZlcihzaXplKTsKfTsKClNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHsKICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJyk7CiAgfQoKICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSk7Cn07Cgp9LHsiYnVmZmVyIjoyMTZ9XSwzODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MpewovKiBlc2xpbnQtZGlzYWJsZSBub2RlL25v
LWRlcHJlY2F0ZWQtYXBpICovCid1c2Ugc3RyaWN0JzsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9u
IiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKdmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpOwoKdmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXI7CnZhciBzYWZlciA9IHt9Owp2YXIga2V5OwoKZm9yIChrZXkgaW4gYnVmZmVyKSB7CiAgaWYgKCFidWZmZXIuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWU7CiAgaWYgKGtleSA9PT0gJ1Nsb3dCdWZmZXInIHx8IGtl
eSA9PT0gJ0J1ZmZlcicpIGNvbnRpbnVlOwogIHNhZmVyW2tleV0gPSBidWZmZXJba2V5XTsKfQoKdmFyIFNhZmVyID0gc2FmZXIuQnVmZmVyID0ge307Cgpmb3IgKGtleSBpbiBCdWZmZXIpIHsKICBpZiAoIUJ1ZmZlci5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTsKICBpZiAoa2V5ID09PSAnYWxsb2NVbnNhZmUnIHx8IGtleSA9PT0gJ2FsbG9jVW5zYWZlU2xvdycpIGNvbnRpbnVlOwogIFNhZmVyW2tleV0gPSBCdWZmZXJba2V5XTsKfQoKc2FmZXIuQnVmZmVyLnByb3RvdHlwZSA9IEJ1ZmZlci5wcm90b3R5cGU7Cgpp
ZiAoIVNhZmVyLmZyb20gfHwgU2FmZXIuZnJvbSA9PT0gVWludDhBcnJheS5mcm9tKSB7CiAgU2FmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgInZhbHVlIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAnICsgX3R5cGVvZih2YWx1ZSkpOwogICAgfQoKICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubGVu
Z3RoID09PSAndW5kZWZpbmVkJykgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgX3R5cGVvZih2YWx1ZSkpOwogICAgfQoKICAgIHJldHVybiBCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfQoKaWYgKCFTYWZlci5hbGxvYykgewogIFNhZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUs
IGZpbGwsIGVuY29kaW5nKSB7CiAgICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSAic2l6ZSIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAnICsgX3R5cGVvZihzaXplKSk7CiAgICB9CgogICAgaWYgKHNpemUgPCAwIHx8IHNpemUgPj0gMiAqICgxIDw8IDMwKSkgewogICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlICInICsgc2l6ZSArICciIGlzIGludmFsaWQgZm9yIG9wdGlvbiAic2l6ZSInKTsKICAg
IH0KCiAgICB2YXIgYnVmID0gQnVmZmVyKHNpemUpOwoKICAgIGlmICghZmlsbCB8fCBmaWxsLmxlbmd0aCA9PT0gMCkgewogICAgICBidWYuZmlsbCgwKTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgewogICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZyk7CiAgICB9IGVsc2UgewogICAgICBidWYuZmlsbChmaWxsKTsKICAgIH0KCiAgICByZXR1cm4gYnVmOwogIH07Cn0KCmlmICghc2FmZXIua1N0cmluZ01heExlbmd0aCkgewogIHRyeSB7CiAgICBzYWZlci5rU3RyaW5nTWF4TGVuZ3Ro
ID0gcHJvY2Vzcy5iaW5kaW5nKCdidWZmZXInKS5rU3RyaW5nTWF4TGVuZ3RoOwogIH0gY2F0Y2ggKGUpIHsvLyB3ZSBjYW4ndCBkZXRlcm1pbmUga1N0cmluZ01heExlbmd0aCBpbiBlbnZpcm9ubWVudHMgd2hlcmUgcHJvY2Vzcy5iaW5kaW5nCiAgICAvLyBpcyB1bnN1cHBvcnRlZCwgc28gbGV0J3Mgbm90IHNldCBpdAogIH0KfQoKaWYgKCFzYWZlci5jb25zdGFudHMpIHsKICBzYWZlci5jb25zdGFudHMgPSB7CiAgICBNQVhfTEVOR1RIOiBzYWZlci5rTWF4TGVuZ3RoCiAgfTsKCiAgaWYgKHNhZmVyLmtTdHJpbmdNYXhMZW5n
dGgpIHsKICAgIHNhZmVyLmNvbnN0YW50cy5NQVhfU1RSSU5HX0xFTkdUSCA9IHNhZmVyLmtTdHJpbmdNYXhMZW5ndGg7CiAgfQp9Cgptb2R1bGUuZXhwb3J0cyA9IHNhZmVyOwoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpCgp9LHsiX3Byb2Nlc3MiOjM1OCwiYnVmZmVyIjoyMTZ9XSwzODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQ7IGlmICh0eXBlb2Yg
U3ltYm9sID09PSAidW5kZWZpbmVkIiB8fCBvW1N5bWJvbC5pdGVyYXRvcl0gPT0gbnVsbCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSAibnVtYmVyIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUg
fTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJl
dHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJv
dyBlcnI7IH0gfSB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVj
dG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3Ig
KHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1
Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFi
bGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47
IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJh
eSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9B
cnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBlZDUgPSByZXF1aXJlKCJ4bWxjaGFycy94bWwvMS4wL2VkNSIpOwoKdmFyIGVkMiA9IHJlcXVpcmUoInhtbGNoYXJz
L3htbC8xLjEvZWQyIik7Cgp2YXIgTlNlZDMgPSByZXF1aXJlKCJ4bWxjaGFycy94bWxucy8xLjAvZWQzIik7Cgp2YXIgaXNTID0gZWQ1LmlzUzsKdmFyIGlzQ2hhcjEwID0gZWQ1LmlzQ2hhcjsKdmFyIGlzTmFtZVN0YXJ0Q2hhciA9IGVkNS5pc05hbWVTdGFydENoYXI7CnZhciBpc05hbWVDaGFyID0gZWQ1LmlzTmFtZUNoYXI7CnZhciBTX0xJU1QgPSBlZDUuU19MSVNUOwp2YXIgTkFNRV9SRSA9IGVkNS5OQU1FX1JFOwp2YXIgaXNDaGFyMTEgPSBlZDIuaXNDaGFyOwp2YXIgaXNOQ05hbWVTdGFydENoYXIgPSBOU2VkMy5pc05D
TmFtZVN0YXJ0Q2hhcjsKdmFyIGlzTkNOYW1lQ2hhciA9IE5TZWQzLmlzTkNOYW1lQ2hhcjsKdmFyIE5DX05BTUVfUkUgPSBOU2VkMy5OQ19OQU1FX1JFOwp2YXIgWE1MX05BTUVTUEFDRSA9ICJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UiOwp2YXIgWE1MTlNfTkFNRVNQQUNFID0gImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvIjsKdmFyIHJvb3ROUyA9IHsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueQogIF9fcHJvdG9fXzogbnVs
bCwKICB4bWw6IFhNTF9OQU1FU1BBQ0UsCiAgeG1sbnM6IFhNTE5TX05BTUVTUEFDRQp9Owp2YXIgWE1MX0VOVElUSUVTID0gewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55CiAgX19wcm90b19fOiBudWxsLAogIGFtcDogIiYiLAogIGd0OiAiPiIsCiAgbHQ6ICI8IiwKICBxdW90OiAiXCIiLAogIGFwb3M6ICInIgp9OyAvLyBFT0M6IGVuZC1vZi1jaHVuawoKdmFyIEVPQyA9IC0xOwp2YXIgTkxfTElLRSA9IC0yOwp2YXIgU19CRUdJTiA9IDA7IC8vIEluaXRp
YWwgc3RhdGUuCgp2YXIgU19CRUdJTl9XSElURVNQQUNFID0gMTsgLy8gbGVhZGluZyB3aGl0ZXNwYWNlCgp2YXIgU19ET0NUWVBFID0gMjsgLy8gPCFET0NUWVBFCgp2YXIgU19ET0NUWVBFX1FVT1RFID0gMzsgLy8gPCFET0NUWVBFICIvL2JsYWgKCnZhciBTX0RURCA9IDQ7IC8vIDwhRE9DVFlQRSAiLy9ibGFoIiBbIC4uLgoKdmFyIFNfRFREX1FVT1RFRCA9IDU7IC8vIDwhRE9DVFlQRSAiLy9ibGFoIiBbICJmb28KCnZhciBTX0RURF9PUEVOX1dBS0EgPSA2Owp2YXIgU19EVERfT1BFTl9XQUtBX0JBTkcgPSA3Owp2YXIgU19E
VERfQ09NTUVOVCA9IDg7IC8vIDwhLS0KCnZhciBTX0RURF9DT01NRU5UX0VORElORyA9IDk7IC8vIDwhLS0gYmxhaCAtCgp2YXIgU19EVERfQ09NTUVOVF9FTkRFRCA9IDEwOyAvLyA8IS0tIGJsYWggLS0KCnZhciBTX0RURF9QSSA9IDExOyAvLyA8PwoKdmFyIFNfRFREX1BJX0VORElORyA9IDEyOyAvLyA8P2hpICJ0aGVyZSIgPwoKdmFyIFNfVEVYVCA9IDEzOyAvLyBnZW5lcmFsIHN0dWZmCgp2YXIgU19FTlRJVFkgPSAxNDsgLy8gJmFtcCBhbmQgc3VjaAoKdmFyIFNfT1BFTl9XQUtBID0gMTU7IC8vIDwKCnZhciBTX09QRU5f
V0FLQV9CQU5HID0gMTY7IC8vIDwhLi4uCgp2YXIgU19DT01NRU5UID0gMTc7IC8vIDwhLS0KCnZhciBTX0NPTU1FTlRfRU5ESU5HID0gMTg7IC8vIDwhLS0gYmxhaCAtCgp2YXIgU19DT01NRU5UX0VOREVEID0gMTk7IC8vIDwhLS0gYmxhaCAtLQoKdmFyIFNfQ0RBVEEgPSAyMDsgLy8gPCFbQ0RBVEFbIHNvbWV0aGluZwoKdmFyIFNfQ0RBVEFfRU5ESU5HID0gMjE7IC8vIF0KCnZhciBTX0NEQVRBX0VORElOR18yID0gMjI7IC8vIF1dCgp2YXIgU19QSV9GSVJTVF9DSEFSID0gMjM7IC8vIDw/aGksIGZpcnN0IGNoYXIKCnZhciBT
X1BJX1JFU1QgPSAyNDsgLy8gPD9oaSwgcmVzdCBvZiB0aGUgbmFtZQoKdmFyIFNfUElfQk9EWSA9IDI1OyAvLyA8P2hpIHRoZXJlCgp2YXIgU19QSV9FTkRJTkcgPSAyNjsgLy8gPD9oaSAidGhlcmUiID8KCnZhciBTX1hNTF9ERUNMX05BTUVfU1RBUlQgPSAyNzsgLy8gPD94bWwKCnZhciBTX1hNTF9ERUNMX05BTUUgPSAyODsgLy8gPD94bWwgZm9vCgp2YXIgU19YTUxfREVDTF9FUSA9IDI5OyAvLyA8P3htbCBmb289Cgp2YXIgU19YTUxfREVDTF9WQUxVRV9TVEFSVCA9IDMwOyAvLyA8P3htbCBmb289Cgp2YXIgU19YTUxfREVD
TF9WQUxVRSA9IDMxOyAvLyA8P3htbCBmb289ImJhciIKCnZhciBTX1hNTF9ERUNMX1NFUEFSQVRPUiA9IDMyOyAvLyA8P3htbCBmb289ImJhciIKCnZhciBTX1hNTF9ERUNMX0VORElORyA9IDMzOyAvLyA8P3htbCAuLi4gPwoKdmFyIFNfT1BFTl9UQUcgPSAzNDsgLy8gPHN0cm9uZwoKdmFyIFNfT1BFTl9UQUdfU0xBU0ggPSAzNTsgLy8gPHN0cm9uZyAvCgp2YXIgU19BVFRSSUIgPSAzNjsgLy8gPGEKCnZhciBTX0FUVFJJQl9OQU1FID0gMzc7IC8vIDxhIGZvbwoKdmFyIFNfQVRUUklCX05BTUVfU0FXX1dISVRFID0gMzg7IC8v
IDxhIGZvbyBfCgp2YXIgU19BVFRSSUJfVkFMVUUgPSAzOTsgLy8gPGEgZm9vPQoKdmFyIFNfQVRUUklCX1ZBTFVFX1FVT1RFRCA9IDQwOyAvLyA8YSBmb289ImJhcgoKdmFyIFNfQVRUUklCX1ZBTFVFX0NMT1NFRCA9IDQxOyAvLyA8YSBmb289ImJhciIKCnZhciBTX0FUVFJJQl9WQUxVRV9VTlFVT1RFRCA9IDQyOyAvLyA8YSBmb289YmFyCgp2YXIgU19DTE9TRV9UQUcgPSA0MzsgLy8gPC9hCgp2YXIgU19DTE9TRV9UQUdfU0FXX1dISVRFID0gNDQ7IC8vIDwvYSAgID4KCnZhciBUQUIgPSA5Owp2YXIgTkwgPSAweEE7CnZhciBD
UiA9IDB4RDsKdmFyIFNQQUNFID0gMHgyMDsKdmFyIEJBTkcgPSAweDIxOwp2YXIgRFFVT1RFID0gMHgyMjsKdmFyIEFNUCA9IDB4MjY7CnZhciBTUVVPVEUgPSAweDI3Owp2YXIgTUlOVVMgPSAweDJEOwp2YXIgRk9SV0FSRF9TTEFTSCA9IDB4MkY7CnZhciBTRU1JQ09MT04gPSAweDNCOwp2YXIgTEVTUyA9IDB4M0M7CnZhciBFUVVBTCA9IDB4M0Q7CnZhciBHUkVBVEVSID0gMHgzRTsKdmFyIFFVRVNUSU9OID0gMHgzRjsKdmFyIE9QRU5fQlJBQ0tFVCA9IDB4NUI7CnZhciBDTE9TRV9CUkFDS0VUID0gMHg1RDsKdmFyIE5FTCA9
IDB4ODU7CnZhciBMUyA9IDB4MjAyODsgLy8gTGluZSBTZXBhcmF0b3IKCnZhciBpc1F1b3RlID0gZnVuY3Rpb24gaXNRdW90ZShjKSB7CiAgcmV0dXJuIGMgPT09IERRVU9URSB8fCBjID09PSBTUVVPVEU7Cn07Cgp2YXIgUVVPVEVTID0gW0RRVU9URSwgU1FVT1RFXTsKdmFyIERPQ1RZUEVfVEVSTUlOQVRPUiA9IFtdLmNvbmNhdChRVU9URVMsIFtPUEVOX0JSQUNLRVQsIEdSRUFURVJdKTsKdmFyIERURF9URVJNSU5BVE9SID0gW10uY29uY2F0KFFVT1RFUywgW0xFU1MsIENMT1NFX0JSQUNLRVRdKTsKdmFyIFhNTF9ERUNMX05B
TUVfVEVSTUlOQVRPUiA9IFtFUVVBTCwgUVVFU1RJT05dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoU19MSVNUKSk7CnZhciBBVFRSSUJfVkFMVUVfVU5RVU9URURfVEVSTUlOQVRPUiA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoU19MSVNUKSwgW0dSRUFURVIsIEFNUCwgTEVTU10pOwoKZnVuY3Rpb24gbnNQYWlyQ2hlY2socGFyc2VyLCBwcmVmaXgsIHVyaSkgewogIHN3aXRjaCAocHJlZml4KSB7CiAgICBjYXNlICJ4bWwiOgogICAgICBpZiAodXJpICE9PSBYTUxfTkFNRVNQQUNFKSB7CiAgICAgICAgcGFyc2Vy
LmZhaWwoInhtbCBwcmVmaXggbXVzdCBiZSBib3VuZCB0byAiLmNvbmNhdChYTUxfTkFNRVNQQUNFLCAiLiIpKTsKICAgICAgfQoKICAgICAgYnJlYWs7CgogICAgY2FzZSAieG1sbnMiOgogICAgICBpZiAodXJpICE9PSBYTUxOU19OQU1FU1BBQ0UpIHsKICAgICAgICBwYXJzZXIuZmFpbCgieG1sbnMgcHJlZml4IG11c3QgYmUgYm91bmQgdG8gIi5jb25jYXQoWE1MTlNfTkFNRVNQQUNFLCAiLiIpKTsKICAgICAgfQoKICAgICAgYnJlYWs7CgogICAgZGVmYXVsdDoKICB9CgogIHN3aXRjaCAodXJpKSB7CiAgICBjYXNlIFhNTE5T
X05BTUVTUEFDRToKICAgICAgcGFyc2VyLmZhaWwocHJlZml4ID09PSAiIiA/ICJ0aGUgZGVmYXVsdCBuYW1lc3BhY2UgbWF5IG5vdCBiZSBzZXQgdG8gIi5jb25jYXQodXJpLCAiLiIpIDogIm1heSBub3QgYXNzaWduIGEgcHJlZml4IChldmVuIFwieG1sbnNcIikgdG8gdGhlIFVSSSAiLmNvbmNhdChYTUxOU19OQU1FU1BBQ0UsICIuIikpOwogICAgICBicmVhazsKCiAgICBjYXNlIFhNTF9OQU1FU1BBQ0U6CiAgICAgIHN3aXRjaCAocHJlZml4KSB7CiAgICAgICAgY2FzZSAieG1sIjoKICAgICAgICAgIC8vIEFzc2luZ2luZyB0
aGUgWE1MIG5hbWVzcGFjZSB0byAieG1sIiBpcyBmaW5lLgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgIiI6CiAgICAgICAgICBwYXJzZXIuZmFpbCgidGhlIGRlZmF1bHQgbmFtZXNwYWNlIG1heSBub3QgYmUgc2V0IHRvICIuY29uY2F0KHVyaSwgIi4iKSk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHBhcnNlci5mYWlsKCJtYXkgbm90IGFzc2lnbiB0aGUgeG1sIG5hbWVzcGFjZSB0byBhbm90aGVyIHByZWZpeC4iKTsKICAgICAgfQoKICAgICAgYnJlYWs7CgogICAgZGVmYXVs
dDoKICB9Cn0KCmZ1bmN0aW9uIG5zTWFwcGluZ0NoZWNrKHBhcnNlciwgbWFwcGluZykgewogIGZvciAodmFyIF9pID0gMCwgX09iamVjdCRrZXlzID0gT2JqZWN0LmtleXMobWFwcGluZyk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykgewogICAgdmFyIGxvY2FsID0gX09iamVjdCRrZXlzW19pXTsKICAgIG5zUGFpckNoZWNrKHBhcnNlciwgbG9jYWwsIG1hcHBpbmdbbG9jYWxdKTsKICB9Cn0KCnZhciBpc05DTmFtZSA9IGZ1bmN0aW9uIGlzTkNOYW1lKG5hbWUpIHsKICByZXR1cm4gTkNfTkFNRV9SRS50ZXN0KG5h
bWUpOwp9OwoKdmFyIGlzTmFtZSA9IGZ1bmN0aW9uIGlzTmFtZShuYW1lKSB7CiAgcmV0dXJuIE5BTUVfUkUudGVzdChuYW1lKTsKfTsKCnZhciBGT1JCSURERU5fU1RBUlQgPSAwOwp2YXIgRk9SQklEREVOX0JSQUNLRVQgPSAxOwp2YXIgRk9SQklEREVOX0JSQUNLRVRfQlJBQ0tFVCA9IDI7Ci8qKgogKiBUaGUgbGlzdCBvZiBzdXBwb3J0ZWQgZXZlbnRzLgogKi8KCmV4cG9ydHMuRVZFTlRTID0gWyJ4bWxkZWNsIiwgInRleHQiLCAicHJvY2Vzc2luZ2luc3RydWN0aW9uIiwgImRvY3R5cGUiLCAiY29tbWVudCIsICJvcGVudGFn
c3RhcnQiLCAiYXR0cmlidXRlIiwgIm9wZW50YWciLCAiY2xvc2V0YWciLCAiY2RhdGEiLCAiZXJyb3IiLCAiZW5kIiwgInJlYWR5Il07CnZhciBFVkVOVF9OQU1FX1RPX0hBTkRMRVJfTkFNRSA9IHsKICB4bWxkZWNsOiAieG1sZGVjbEhhbmRsZXIiLAogIHRleHQ6ICJ0ZXh0SGFuZGxlciIsCiAgcHJvY2Vzc2luZ2luc3RydWN0aW9uOiAicGlIYW5kbGVyIiwKICBkb2N0eXBlOiAiZG9jdHlwZUhhbmRsZXIiLAogIGNvbW1lbnQ6ICJjb21tZW50SGFuZGxlciIsCiAgb3BlbnRhZ3N0YXJ0OiAib3BlblRhZ1N0YXJ0SGFuZGxlciIs
CiAgYXR0cmlidXRlOiAiYXR0cmlidXRlSGFuZGxlciIsCiAgb3BlbnRhZzogIm9wZW5UYWdIYW5kbGVyIiwKICBjbG9zZXRhZzogImNsb3NlVGFnSGFuZGxlciIsCiAgY2RhdGE6ICJjZGF0YUhhbmRsZXIiLAogIGVycm9yOiAiZXJyb3JIYW5kbGVyIiwKICBlbmQ6ICJlbmRIYW5kbGVyIiwKICByZWFkeTogInJlYWR5SGFuZGxlciIKfTsKCnZhciBTYXhlc1BhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQHBhcmFtIG9wdCBUaGUgcGFyc2VyIG9wdGlvbnMuCiAgICovCiAgZnVuY3Rpb24gU2F4
ZXNQYXJzZXIob3B0KSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2F4ZXNQYXJzZXIpOwoKICAgIHRoaXMub3B0ID0gb3B0ICE9PSBudWxsICYmIG9wdCAhPT0gdm9pZCAwID8gb3B0IDoge307CiAgICB0aGlzLmZyYWdtZW50T3B0ID0gISF0aGlzLm9wdC5mcmFnbWVudDsKICAgIHZhciB4bWxuc09wdCA9IHRoaXMueG1sbnNPcHQgPSAhIXRoaXMub3B0LnhtbG5zOwogICAgdGhpcy50cmFja1Bvc2l0aW9uID0gdGhpcy5vcHQucG9zaXRpb24gIT09IGZhbHNlOwogICAgdGhpcy5maWxlTmFtZSA9IHRoaXMub3B0LmZpbGVO
YW1lOwoKICAgIGlmICh4bWxuc09wdCkgewogICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB3ZSB1c2UgdG8gcGVyZm9ybSBuYW1lIGNoZWNrcyBvbiBQSXMgYW5kIGVudGl0aWVzLgogICAgICAvLyBXaGVuIG5hbWVzcGFjZXMgYXJlIHVzZWQsIGNvbG9ucyBhcmUgbm90IGFsbG93ZWQgaW4gUEkgdGFyZ2V0IG5hbWVzIG9yCiAgICAgIC8vIGVudGl0eSBuYW1lcy4gU28gdGhlIGNoZWNrIGRlcGVuZHMgb24gd2hldGhlciBuYW1lc3BhY2VzIGFyZSB1c2VkLiBTZWU6CiAgICAgIC8vCiAgICAgIC8vIGh0dHBzOi8vd3d3Lncz
Lm9yZy9YTUwveG1sLW5hbWVzLTE5OTkwMTE0LWVycmF0YS5odG1sCiAgICAgIC8vIE5FMDgKICAgICAgLy8KICAgICAgdGhpcy5uYW1lU3RhcnRDaGVjayA9IGlzTkNOYW1lU3RhcnRDaGFyOwogICAgICB0aGlzLm5hbWVDaGVjayA9IGlzTkNOYW1lQ2hhcjsKICAgICAgdGhpcy5pc05hbWUgPSBpc05DTmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZAoKICAgICAgdGhpcy5wcm9jZXNzQXR0cmlicyA9IHRoaXMucHJvY2Vzc0F0dHJpYnNOUzsgLy8gZXNsaW50
LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZAoKICAgICAgdGhpcy5wdXNoQXR0cmliID0gdGhpcy5wdXNoQXR0cmliTlM7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55CgogICAgICB0aGlzLm5zID0gT2JqZWN0LmFzc2lnbih7CiAgICAgICAgX19wcm90b19fOiBudWxsCiAgICAgIH0sIHJvb3ROUyk7CiAgICAgIHZhciBhZGRpdGlvbmFsID0gdGhpcy5vcHQuYWRkaXRpb25hbE5hbWVzcGFjZXM7CgogICAgICBpZiAo
YWRkaXRpb25hbCAhPSBudWxsKSB7CiAgICAgICAgbnNNYXBwaW5nQ2hlY2sodGhpcywgYWRkaXRpb25hbCk7CiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm5zLCBhZGRpdGlvbmFsKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdGhpcy5uYW1lU3RhcnRDaGVjayA9IGlzTmFtZVN0YXJ0Q2hhcjsKICAgICAgdGhpcy5uYW1lQ2hlY2sgPSBpc05hbWVDaGFyOwogICAgICB0aGlzLmlzTmFtZSA9IGlzTmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZAoK
ICAgICAgdGhpcy5wcm9jZXNzQXR0cmlicyA9IHRoaXMucHJvY2Vzc0F0dHJpYnNQbGFpbjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZAoKICAgICAgdGhpcy5wdXNoQXR0cmliID0gdGhpcy5wdXNoQXR0cmliUGxhaW47CiAgICB9IC8vCiAgICAvLyBUaGUgb3JkZXIgb2YgdGhlIG1lbWJlcnMgaW4gdGhpcyB0YWJsZSBuZWVkcyB0byBjb3JyZXNwb25kIHRvIHRoZSBzdGF0ZQogICAgLy8gbnVtYmVycyBnaXZlbiB0byB0aGUgc3RhdGVzIHRoYXQgY29ycmVzcG9u
ZCB0byB0aGUgbWV0aG9kcyBiZWluZyByZWNvcmRlZAogICAgLy8gaGVyZS4KICAgIC8vCgoKICAgIHRoaXMuc3RhdGVUYWJsZSA9IFsKICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZCAqLwogICAgdGhpcy5zQmVnaW4sIHRoaXMuc0JlZ2luV2hpdGVzcGFjZSwgdGhpcy5zRG9jdHlwZSwgdGhpcy5zRG9jdHlwZVF1b3RlLCB0aGlzLnNEVEQsIHRoaXMuc0RURFF1b3RlZCwgdGhpcy5zRFRET3Blbldha2EsIHRoaXMuc0RURE9wZW5XYWthQmFuZywgdGhpcy5zRFREQ29tbWVudCwg
dGhpcy5zRFREQ29tbWVudEVuZGluZywgdGhpcy5zRFREQ29tbWVudEVuZGVkLCB0aGlzLnNEVERQSSwgdGhpcy5zRFREUElFbmRpbmcsIHRoaXMuc1RleHQsIHRoaXMuc0VudGl0eSwgdGhpcy5zT3Blbldha2EsIHRoaXMuc09wZW5XYWthQmFuZywgdGhpcy5zQ29tbWVudCwgdGhpcy5zQ29tbWVudEVuZGluZywgdGhpcy5zQ29tbWVudEVuZGVkLCB0aGlzLnNDRGF0YSwgdGhpcy5zQ0RhdGFFbmRpbmcsIHRoaXMuc0NEYXRhRW5kaW5nMiwgdGhpcy5zUElGaXJzdENoYXIsIHRoaXMuc1BJUmVzdCwgdGhpcy5zUElCb2R5LCB0aGlz
LnNQSUVuZGluZywgdGhpcy5zWE1MRGVjbE5hbWVTdGFydCwgdGhpcy5zWE1MRGVjbE5hbWUsIHRoaXMuc1hNTERlY2xFcSwgdGhpcy5zWE1MRGVjbFZhbHVlU3RhcnQsIHRoaXMuc1hNTERlY2xWYWx1ZSwgdGhpcy5zWE1MRGVjbFNlcGFyYXRvciwgdGhpcy5zWE1MRGVjbEVuZGluZywgdGhpcy5zT3BlblRhZywgdGhpcy5zT3BlblRhZ1NsYXNoLCB0aGlzLnNBdHRyaWIsIHRoaXMuc0F0dHJpYk5hbWUsIHRoaXMuc0F0dHJpYk5hbWVTYXdXaGl0ZSwgdGhpcy5zQXR0cmliVmFsdWUsIHRoaXMuc0F0dHJpYlZhbHVlUXVvdGVkLCB0
aGlzLnNBdHRyaWJWYWx1ZUNsb3NlZCwgdGhpcy5zQXR0cmliVmFsdWVVbnF1b3RlZCwgdGhpcy5zQ2xvc2VUYWcsIHRoaXMuc0Nsb3NlVGFnU2F3V2hpdGVdOwoKICAgIHRoaXMuX2luaXQoKTsKICB9CiAgLyoqCiAgICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBwYXJzZXIgaXMgY2xvc2VkLiBJZiBgYHRydWVgYCwgd2FpdCBmb3IKICAgKiB0aGUgYGByZWFkeWBgIGV2ZW50IHRvIHdyaXRlIGFnYWluLgogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFNheGVzUGFyc2VyLCBbewogICAga2V5OiAiX2luaXQiLAogICAgdmFs
dWU6IGZ1bmN0aW9uIF9pbml0KCkgewogICAgICB2YXIgX2E7CgogICAgICB0aGlzLm9wZW5XYWthQmFuZyA9ICIiOwogICAgICB0aGlzLnRleHQgPSAiIjsKICAgICAgdGhpcy5uYW1lID0gIiI7CiAgICAgIHRoaXMucGlUYXJnZXQgPSAiIjsKICAgICAgdGhpcy5lbnRpdHkgPSAiIjsKICAgICAgdGhpcy5xID0gbnVsbDsKICAgICAgdGhpcy50YWdzID0gW107CiAgICAgIHRoaXMudGFnID0gbnVsbDsKICAgICAgdGhpcy50b3BOUyA9IG51bGw7CiAgICAgIHRoaXMuY2h1bmsgPSAiIjsKICAgICAgdGhpcy5jaHVua1Bvc2l0aW9u
ID0gMDsKICAgICAgdGhpcy5pID0gMDsKICAgICAgdGhpcy5wcmV2SSA9IDA7CiAgICAgIHRoaXMuY2FycmllZEZyb21QcmV2aW91cyA9IHVuZGVmaW5lZDsKICAgICAgdGhpcy5mb3JiaWRkZW5TdGF0ZSA9IEZPUkJJRERFTl9TVEFSVDsKICAgICAgdGhpcy5hdHRyaWJMaXN0ID0gW107IC8vIFRoZSBsb2dpYyBpcyBvcmdhbml6ZWQgc28gYXMgdG8gbWluaW1pemUgdGhlIG5lZWQgdG8gY2hlY2sKICAgICAgLy8gdGhpcy5vcHQuZnJhZ21lbnQgd2hpbGUgcGFyc2luZy4KCiAgICAgIHZhciBmcmFnbWVudE9wdCA9IHRoaXMuZnJh
Z21lbnRPcHQ7CiAgICAgIHRoaXMuc3RhdGUgPSBmcmFnbWVudE9wdCA/IFNfVEVYVCA6IFNfQkVHSU47IC8vIFdlIHdhbnQgdGhlc2UgdG8gYmUgYWxsIHRydWUgaWYgd2UgYXJlIGRlYWxpbmcgd2l0aCBhIGZyYWdtZW50LgoKICAgICAgdGhpcy5yZXBvcnRlZFRleHRCZWZvcmVSb290ID0gdGhpcy5yZXBvcnRlZFRleHRBZnRlclJvb3QgPSB0aGlzLmNsb3NlZFJvb3QgPSB0aGlzLnNhd1Jvb3QgPSBmcmFnbWVudE9wdDsgLy8gQW4gWE1MIGRlY2xhcmF0aW9uIGlzIGludGlhbGx5IHBvc3NpYmxlIG9ubHkgd2hlbiBwYXJzaW5n
IHdob2xlCiAgICAgIC8vIGRvY3VtZW50cy4KCiAgICAgIHRoaXMueG1sRGVjbFBvc3NpYmxlID0gIWZyYWdtZW50T3B0OwogICAgICB0aGlzLnhtbERlY2xFeHBlY3RzID0gWyJ2ZXJzaW9uIl07CiAgICAgIHRoaXMuZW50aXR5UmV0dXJuU3RhdGUgPSB1bmRlZmluZWQ7CiAgICAgIHZhciBkZWZhdWx0WE1MVmVyc2lvbiA9IHRoaXMub3B0LmRlZmF1bHRYTUxWZXJzaW9uOwoKICAgICAgaWYgKGRlZmF1bHRYTUxWZXJzaW9uID09PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAodGhpcy5vcHQuZm9yY2VYTUxWZXJzaW9uID09PSB0
cnVlKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImZvcmNlWE1MVmVyc2lvbiBzZXQgYnV0IGRlZmF1bHRYTUxWZXJzaW9uIGlzIG5vdCBzZXQiKTsKICAgICAgICB9CgogICAgICAgIGRlZmF1bHRYTUxWZXJzaW9uID0gIjEuMCI7CiAgICAgIH0KCiAgICAgIHRoaXMuc2V0WE1MVmVyc2lvbihkZWZhdWx0WE1MVmVyc2lvbik7CiAgICAgIHRoaXMucG9zaXRpb25BdE5ld0xpbmUgPSAwOwogICAgICB0aGlzLmRvY3R5cGUgPSBmYWxzZTsKICAgICAgdGhpcy5fY2xvc2VkID0gZmFsc2U7CiAgICAgIHRoaXMueG1sRGVjbCA9
IHsKICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsCiAgICAgICAgZW5jb2Rpbmc6IHVuZGVmaW5lZCwKICAgICAgICBzdGFuZGFsb25lOiB1bmRlZmluZWQKICAgICAgfTsKICAgICAgdGhpcy5saW5lID0gMTsKICAgICAgdGhpcy5jb2x1bW4gPSAwOwogICAgICB0aGlzLkVOVElUSUVTID0gT2JqZWN0LmNyZWF0ZShYTUxfRU5USVRJRVMpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zCgogICAgICAoX2EgPSB0aGlzLnJlYWR5SGFuZGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQg
MCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcyk7CiAgICB9CiAgICAvKioKICAgICAqIFRoZSBzdHJlYW0gcG9zaXRpb24gdGhlIHBhcnNlciBpcyBjdXJyZW50bHkgbG9va2luZyBhdC4gVGhpcyBmaWVsZCBpcwogICAgICogemVyby1iYXNlZC4KICAgICAqCiAgICAgKiBUaGlzIGZpZWxkIGlzIG5vdCBiYXNlZCBvbiBjb3VudGluZyBVbmljb2RlIGNoYXJhY3RlcnMgYnV0IGlzIHRvIGJlCiAgICAgKiBpbnRlcnByZXRlZCBhcyBhIHBsYWluIGluZGV4IGludG8gYSBKYXZhU2NyaXB0IHN0cmluZy4KICAgICAqLwoKICB9LCB7CiAg
ICBrZXk6ICJvbiIsCgogICAgLyoqCiAgICAgKiBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgb24gYW4gZXZlbnQuIFRoZSBwYXJzZXIgc3VwcG9ydHMgb25lIGhhbmRsZXIgcGVyCiAgICAgKiBldmVudCB0eXBlLiBJZiB5b3UgdHJ5IHRvIHNldCBhbiBldmVudCBoYW5kbGVyIG92ZXIgYW4gZXhpc3RpbmcgaGFuZGxlciwKICAgICAqIHRoZSBvbGQgaGFuZGxlciBpcyBzaWxlbnRseSBvdmVyd3JpdHRlbi4KICAgICAqCiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgZXZlbnQgdG8gbGlzdGVuIHRvLgogICAgICoKICAgICAqIEBwYXJhbSBo
YW5kbGVyIFRoZSBoYW5kbGVyIHRvIHNldC4KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIG9uKG5hbWUsIGhhbmRsZXIpIHsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkKICAgICAgdGhpc1tFVkVOVF9OQU1FX1RPX0hBTkRMRVJfTkFNRVtuYW1lXV0gPSBoYW5kbGVyOwogICAgfQogICAgLyoqCiAgICAgKiBVbnNldCBhbiBldmVudCBoYW5kbGVyLgogICAgICoKICAgICAqIEBwYXJtYSBuYW1lIFRoZSBldmVudCB0byBzdG9wIGxpc3RlbmluZyB0
by4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvZmYiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihuYW1lKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55CiAgICAgIHRoaXNbRVZFTlRfTkFNRV9UT19IQU5ETEVSX05BTUVbbmFtZV1dID0gdW5kZWZpbmVkOwogICAgfQogICAgLyoqCiAgICAgKiBNYWtlIGFuIGVycm9yIG9iamVjdC4gVGhlIGVycm9yIG9iamVjdCB3aWxsIGhhdmUgYSBtZXNzYWdlIHRoYXQgY29udGFpbnMKICAgICAqIHRoZSBg
YGZpbGVOYW1lYGAgb3B0aW9uIHBhc3NlZCBhdCB0aGUgY3JlYXRpb24gb2YgdGhlIHBhcnNlci4gSWYgcG9zaXRpb24KICAgICAqIHRyYWNraW5nIHdhcyB0dXJuZWQgb24sIGl0IHdpbGwgYWxzbyBoYXZlIGxpbmUgYW5kIGNvbHVtbiBudW1iZXIKICAgICAqIGluZm9ybWF0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIGRlc2NyaWJpbmcgdGhlIGVycm9yIHRvIHJlcG9ydC4KICAgICAqCiAgICAgKiBAcmV0dXJucyBBbiBlcnJvciBvYmplY3Qgd2l0aCBhIHByb3Blcmx5IGZvcm1hdHRlZCBt
ZXNzYWdlLgogICAgICovCgogIH0sIHsKICAgIGtleTogIm1ha2VFcnJvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWFrZUVycm9yKG1lc3NhZ2UpIHsKICAgICAgdmFyIF9hOwoKICAgICAgdmFyIG1zZyA9IChfYSA9IHRoaXMuZmlsZU5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICIiOwoKICAgICAgaWYgKHRoaXMudHJhY2tQb3NpdGlvbikgewogICAgICAgIGlmIChtc2cubGVuZ3RoID4gMCkgewogICAgICAgICAgbXNnICs9ICI6IjsKICAgICAgICB9CgogICAgICAgIG1zZyArPSAiIi5jb25jYXQodGhp
cy5saW5lLCAiOiIpLmNvbmNhdCh0aGlzLmNvbHVtbik7CiAgICAgIH0KCiAgICAgIGlmIChtc2cubGVuZ3RoID4gMCkgewogICAgICAgIG1zZyArPSAiOiAiOwogICAgICB9CgogICAgICByZXR1cm4gbmV3IEVycm9yKG1zZyArIG1lc3NhZ2UpOwogICAgfQogICAgLyoqCiAgICAgKiBSZXBvcnQgYSBwYXJzaW5nIGVycm9yLiBUaGlzIG1ldGhvZCBpcyBtYWRlIHB1YmxpYyBzbyB0aGF0IGNsaWVudCBjb2RlIG1heQogICAgICogY2hlY2sgZm9yIGlzc3VlcyB0aGF0IGFyZSBvdXRzaWRlIHRoZSBzY29wZSBvZiB0aGlzIHByb2pl
Y3QgYW5kIGNhbiByZXBvcnQKICAgICAqIGVycm9ycy4KICAgICAqCiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgZXJyb3IgdG8gcmVwb3J0LgogICAgICoKICAgICAqIEByZXR1cm5zIHRoaXMKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmYWlsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmYWlsKG1lc3NhZ2UpIHsKICAgICAgdmFyIGVyciA9IHRoaXMubWFrZUVycm9yKG1lc3NhZ2UpOwogICAgICB2YXIgaGFuZGxlciA9IHRoaXMuZXJyb3JIYW5kbGVyOwoKICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkgewogICAg
ICAgIHRocm93IGVycjsKICAgICAgfSBlbHNlIHsKICAgICAgICBoYW5kbGVyKGVycik7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgLyoqCiAgICAgKiBXcml0ZSBhIFhNTCBkYXRhIHRvIHRoZSBwYXJzZXIuCiAgICAgKgogICAgICogQHBhcmFtIGNodW5rIFRoZSBYTUwgZGF0YSB0byB3cml0ZS4KICAgICAqCiAgICAgKiBAcmV0dXJucyB0aGlzCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAid3JpdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlKGNodW5rKSB7CiAgICAgIGlmICh0aGlzLmNsb3Nl
ZCkgewogICAgICAgIHJldHVybiB0aGlzLmZhaWwoImNhbm5vdCB3cml0ZSBhZnRlciBjbG9zZTsgYXNzaWduIGFuIG9ucmVhZHkgaGFuZGxlci4iKTsKICAgICAgfQoKICAgICAgdmFyIGVuZCA9IGZhbHNlOwoKICAgICAgaWYgKGNodW5rID09PSBudWxsKSB7CiAgICAgICAgLy8gV2UgY2Fubm90IHJldHVybiBpbW1lZGlhdGVseSBiZWNhdXNlIGNhcnJpZWRGcm9tUHJldmlvdXMgbWF5IG5lZWQKICAgICAgICAvLyBwcm9jZXNzaW5nLgogICAgICAgIGVuZCA9IHRydWU7CiAgICAgICAgY2h1bmsgPSAiIjsKICAgICAgfSBlbHNl
IGlmIChfdHlwZW9mKGNodW5rKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICBjaHVuayA9IGNodW5rLnRvU3RyaW5nKCk7CiAgICAgIH0gLy8gV2UgY2hlY2tlZCBpZiBwZXJmb3JtaW5nIGEgcHJlLWRlY29tcG9zaXRpb24gb2YgdGhlIHN0cmluZyBpbnRvIGFuIGFycmF5CiAgICAgIC8vIG9mIHNpbmdsZSBjb21wbGV0ZSBjaGFyYWN0ZXJzIChgYEFycmF5LmZyb20oY2h1bmspYGApIHdvdWxkIGJlIGZhc3RlcgogICAgICAvLyB0aGFuIHRoZSBjdXJyZW50IHJlcGVhdGVkIGNhbGxzIHRvIGBgY2hhckNvZGVBdGBgLiBBcyBvZiBB
dWd1c3QgMjAxOCwgaXQKICAgICAgLy8gaXNuJ3QuIChUaGVyZSBtYXkgYmUgTm9kZS1zcGVjaWZpYyBjb2RlIHRoYXQgd291bGQgcGVyZm9ybSBmYXN0ZXIgdGhhbgogICAgICAvLyBgYEFycmF5LmZyb21gYCBidXQgZG9uJ3Qgd2FudCB0byBiZSBkZXBlbmRlbnQgb24gTm9kZS4pCgoKICAgICAgaWYgKHRoaXMuY2FycmllZEZyb21QcmV2aW91cyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgLy8gVGhlIHByZXZpb3VzIGNodW5rIGhhZCBjaGFyIHdlIG11c3QgY2Fycnkgb3Zlci4KICAgICAgICBjaHVuayA9ICIiLmNvbmNhdCh0
aGlzLmNhcnJpZWRGcm9tUHJldmlvdXMpLmNvbmNhdChjaHVuayk7CiAgICAgICAgdGhpcy5jYXJyaWVkRnJvbVByZXZpb3VzID0gdW5kZWZpbmVkOwogICAgICB9CgogICAgICB2YXIgbGltaXQgPSBjaHVuay5sZW5ndGg7CiAgICAgIHZhciBsYXN0Q29kZSA9IGNodW5rLmNoYXJDb2RlQXQobGltaXQgLSAxKTsKCiAgICAgIGlmICghZW5kICYmICggLy8gQSB0cmFpbGluZyBDUiBvciBzdXJyb2dhdGUgbXVzdCBiZSBjYXJyaWVkIG92ZXIgdG8gdGhlIG5leHQKICAgICAgLy8gY2h1bmsuCiAgICAgIGxhc3RDb2RlID09PSBDUiB8
fCBsYXN0Q29kZSA+PSAweEQ4MDAgJiYgbGFzdENvZGUgPD0gMHhEQkZGKSkgewogICAgICAgIC8vIFRoZSBjaHVuayBlbmRzIHdpdGggYSBjaGFyYWN0ZXIgdGhhdCBtdXN0IGJlIGNhcnJpZWQgb3Zlci4gV2UgY2Fubm90CiAgICAgICAgLy8ga25vdyBob3cgdG8gaGFuZGxlIGl0IHVudGlsIHdlIGdldCB0aGUgbmV4dCBjaHVuayBvciB0aGUgZW5kIG9mIHRoZQogICAgICAgIC8vIHN0cmVhbS4gU28gc2F2ZSBpdCBmb3IgbGF0ZXIuCiAgICAgICAgdGhpcy5jYXJyaWVkRnJvbVByZXZpb3VzID0gY2h1bmtbbGltaXQgLSAxXTsK
ICAgICAgICBsaW1pdC0tOwogICAgICAgIGNodW5rID0gY2h1bmsuc2xpY2UoMCwgbGltaXQpOwogICAgICB9CgogICAgICB2YXIgc3RhdGVUYWJsZSA9IHRoaXMuc3RhdGVUYWJsZTsKICAgICAgdGhpcy5jaHVuayA9IGNodW5rOwogICAgICB0aGlzLmkgPSAwOwoKICAgICAgd2hpbGUgKHRoaXMuaSA8IGxpbWl0KSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkKICAgICAgICBzdGF0ZVRhYmxlW3RoaXMuc3RhdGVdLmNhbGwodGhpcyk7CiAgICAg
IH0KCiAgICAgIHRoaXMuY2h1bmtQb3NpdGlvbiArPSBsaW1pdDsKICAgICAgcmV0dXJuIGVuZCA/IHRoaXMuZW5kKCkgOiB0aGlzOwogICAgfQogICAgLyoqCiAgICAgKiBDbG9zZSB0aGUgY3VycmVudCBzdHJlYW0uIFBlcmZvcm0gZmluYWwgd2VsbC1mb3JtZWRuZXNzIGNoZWNrcyBhbmQgcmVzZXQKICAgICAqIHRoZSBwYXJzZXIgdHN0YXRlLgogICAgICoKICAgICAqIEByZXR1cm5zIHRoaXMKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgIHJldHVy
biB0aGlzLndyaXRlKG51bGwpOwogICAgfQogICAgLyoqCiAgICAgKiBHZXQgYSBzaW5nbGUgY29kZSBwb2ludCBvdXQgb2YgdGhlIGN1cnJlbnQgY2h1bmsuIFRoaXMgdXBkYXRlcyB0aGUgY3VycmVudAogICAgICogcG9zaXRpb24gaWYgd2UgZG8gcG9zaXRpb24gdHJhY2tpbmcuCiAgICAgKgogICAgICogVGhpcyBpcyB0aGUgYWxnb3JpdGhtIHRvIHVzZSBmb3IgWE1MIDEuMC4KICAgICAqCiAgICAgKiBAcmV0dXJucyBUaGUgY2hhcmFjdGVyIHJlYWQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0Q29kZTEwIiwKICAg
IHZhbHVlOiBmdW5jdGlvbiBnZXRDb2RlMTAoKSB7CiAgICAgIHZhciBjaHVuayA9IHRoaXMuY2h1bmssCiAgICAgICAgICBpID0gdGhpcy5pOwogICAgICB0aGlzLnByZXZJID0gaTsgLy8gWWVzLCB3ZSBkbyB0aGlzIGluc3RlYWQgb2YgZG9pbmcgdGhpcy5pKysuIERvaW5nIGl0IHRoaXMgd2F5LCB3ZSBkbyBub3QKICAgICAgLy8gcmVhZCB0aGlzLmkgYWdhaW4sIHdoaWNoIGlzIGEgYml0IGZhc3Rlci4KCiAgICAgIHRoaXMuaSA9IGkgKyAxOwoKICAgICAgaWYgKGkgPj0gY2h1bmsubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJu
IEVPQzsKICAgICAgfSAvLyBVc2luZyBjaGFyQ29kZUF0IGFuZCBoYW5kbGluZyB0aGUgc3Vycm9nYXRlcyBvdXJzZWx2ZXMgaXMgZmFzdGVyCiAgICAgIC8vIHRoYW4gdXNpbmcgY29kZVBvaW50QXQuCgoKICAgICAgdmFyIGNvZGUgPSBjaHVuay5jaGFyQ29kZUF0KGkpOwogICAgICB0aGlzLmNvbHVtbisrOwoKICAgICAgaWYgKGNvZGUgPCAweEQ4MDApIHsKICAgICAgICBpZiAoY29kZSA+PSBTUEFDRSB8fCBjb2RlID09PSBUQUIpIHsKICAgICAgICAgIHJldHVybiBjb2RlOwogICAgICAgIH0KCiAgICAgICAgc3dpdGNoIChj
b2RlKSB7CiAgICAgICAgICBjYXNlIE5MOgogICAgICAgICAgICB0aGlzLmxpbmUrKzsKICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSAwOwogICAgICAgICAgICB0aGlzLnBvc2l0aW9uQXROZXdMaW5lID0gdGhpcy5wb3NpdGlvbjsKICAgICAgICAgICAgcmV0dXJuIE5MOwoKICAgICAgICAgIGNhc2UgQ1I6CiAgICAgICAgICAgIC8vIFdlIG1heSBnZXQgTmFOIGlmIHdlIHJlYWQgcGFzdCB0aGUgZW5kIG9mIHRoZSBjaHVuaywgd2hpY2ggaXMgZmluZS4KICAgICAgICAgICAgaWYgKGNodW5rLmNoYXJDb2RlQXQoaSArIDEpID09
PSBOTCkgewogICAgICAgICAgICAgIC8vIEEgXHJcbiBzZXF1ZW5jZSBpcyBjb252ZXJ0ZWQgdG8gXG4gc28gd2UgaGF2ZSB0byBza2lwIG92ZXIgdGhlCiAgICAgICAgICAgICAgLy8gbmV4dCBjaGFyYWN0ZXIuIFdlIGFscmVhZHkga25vdyBpdCBoYXMgYSBzaXplIG9mIDEgc28gKysgaXMgZmluZQogICAgICAgICAgICAgIC8vIGhlcmUuCiAgICAgICAgICAgICAgdGhpcy5pID0gaSArIDI7CiAgICAgICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBhIFxyIGlzIGp1c3QgY29udmVydGVkIHRvIFxuLCBzbyB3ZSBkb24ndCBoYXZlIHRv
IHNraXAKICAgICAgICAgICAgLy8gYWhlYWQuCiAgICAgICAgICAgIC8vIEluIGVpdGhlciBjYXNlLCBcciBiZWNvbWVzIFxuLgoKCiAgICAgICAgICAgIHRoaXMubGluZSsrOwogICAgICAgICAgICB0aGlzLmNvbHVtbiA9IDA7CiAgICAgICAgICAgIHRoaXMucG9zaXRpb25BdE5ld0xpbmUgPSB0aGlzLnBvc2l0aW9uOwogICAgICAgICAgICByZXR1cm4gTkxfTElLRTsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgdGhlbiBjb2RlIDwgU1BBQ0UgYW5kIGl0IGlzIG5vdCBOTCBDUiBv
ciBUQUIuCiAgICAgICAgICAgIHRoaXMuZmFpbCgiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuIik7CiAgICAgICAgICAgIHJldHVybiBjb2RlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGNvZGUgPiAweERCRkYpIHsKICAgICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBpc0NoYXIxMCB0aGF0IHRha2VzIGludG8gYWNjb3VudAogICAgICAgIC8vIHRoYXQgaW4gdGhpcyBjb250ZXh0IGNvZGUgPiAweERCRkYgYW5kIGNvZGUgPD0gMHhGRkZGLiBTbyBpdCBkb2VzIG5vdAogICAgICAgIC8vIHRlc3Qg
Y2FzZXMgdGhhdCBkb24ndCBuZWVkIHRlc3RpbmcuCiAgICAgICAgaWYgKCEoY29kZSA+PSAweEUwMDAgJiYgY29kZSA8PSAweEZGRkQpKSB7CiAgICAgICAgICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyLiIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGNvZGU7CiAgICAgIH0KCiAgICAgIHZhciBmaW5hbCA9IDB4MTAwMDAgKyAoY29kZSAtIDB4RDgwMCkgKiAweDQwMCArIChjaHVuay5jaGFyQ29kZUF0KGkgKyAxKSAtIDB4REMwMCk7CiAgICAgIHRoaXMuaSA9IGkgKyAyOyAvLyBUaGlzIGlzIGEgc3BlY2lh
bGl6ZWQgdmVyc2lvbiBvZiBpc0NoYXIxMCB0aGF0IHRha2VzIGludG8gYWNjb3VudCB0aGF0IGluCiAgICAgIC8vIHRoaXMgY29udGV4dCBuZWNlc3NhcmlseSBmaW5hbCA+PSAweDEwMDAwLgoKICAgICAgaWYgKGZpbmFsID4gMHgxMEZGRkYpIHsKICAgICAgICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyLiIpOwogICAgICB9CgogICAgICByZXR1cm4gZmluYWw7CiAgICB9CiAgICAvKioKICAgICAqIEdldCBhIHNpbmdsZSBjb2RlIHBvaW50IG91dCBvZiB0aGUgY3VycmVudCBjaHVuay4gVGhpcyB1cGRhdGVzIHRo
ZSBjdXJyZW50CiAgICAgKiBwb3NpdGlvbiBpZiB3ZSBkbyBwb3NpdGlvbiB0cmFja2luZy4KICAgICAqCiAgICAgKiBUaGlzIGlzIHRoZSBhbGdvcml0aG0gdG8gdXNlIGZvciBYTUwgMS4xLgogICAgICoKICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjaGFyYWN0ZXIgcmVhZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRDb2RlMTEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvZGUxMSgpIHsKICAgICAgdmFyIGNodW5rID0gdGhpcy5jaHVuaywKICAgICAgICAgIGkgPSB0aGlzLmk7CiAgICAgIHRoaXMucHJl
dkkgPSBpOyAvLyBZZXMsIHdlIGRvIHRoaXMgaW5zdGVhZCBvZiBkb2luZyB0aGlzLmkrKy4gRG9pbmcgaXQgdGhpcyB3YXksIHdlIGRvIG5vdAogICAgICAvLyByZWFkIHRoaXMuaSBhZ2Fpbiwgd2hpY2ggaXMgYSBiaXQgZmFzdGVyLgoKICAgICAgdGhpcy5pID0gaSArIDE7CgogICAgICBpZiAoaSA+PSBjaHVuay5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gRU9DOwogICAgICB9IC8vIFVzaW5nIGNoYXJDb2RlQXQgYW5kIGhhbmRsaW5nIHRoZSBzdXJyb2dhdGVzIG91cnNlbHZlcyBpcyBmYXN0ZXIKICAgICAgLy8gdGhhbiB1
c2luZyBjb2RlUG9pbnRBdC4KCgogICAgICB2YXIgY29kZSA9IGNodW5rLmNoYXJDb2RlQXQoaSk7CiAgICAgIHRoaXMuY29sdW1uKys7CgogICAgICBpZiAoY29kZSA8IDB4RDgwMCkgewogICAgICAgIGlmIChjb2RlID4gMHgxRiAmJiBjb2RlIDwgMHg3RiB8fCBjb2RlID4gMHg5RiAmJiBjb2RlICE9PSBMUyB8fCBjb2RlID09PSBUQUIpIHsKICAgICAgICAgIHJldHVybiBjb2RlOwogICAgICAgIH0KCiAgICAgICAgc3dpdGNoIChjb2RlKSB7CiAgICAgICAgICBjYXNlIE5MOgogICAgICAgICAgICAvLyAweEEKICAgICAgICAg
ICAgdGhpcy5saW5lKys7CiAgICAgICAgICAgIHRoaXMuY29sdW1uID0gMDsKICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkF0TmV3TGluZSA9IHRoaXMucG9zaXRpb247CiAgICAgICAgICAgIHJldHVybiBOTDsKCiAgICAgICAgICBjYXNlIENSOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgLy8gMHhECiAgICAgICAgICAgICAgLy8gV2UgbWF5IGdldCBOYU4gaWYgd2UgcmVhZCBwYXN0IHRoZSBlbmQgb2YgdGhlIGNodW5rLCB3aGljaCBpcwogICAgICAgICAgICAgIC8vIGZpbmUuCiAgICAgICAgICAgICAgdmFyIG5leHQg
PSBjaHVuay5jaGFyQ29kZUF0KGkgKyAxKTsKCiAgICAgICAgICAgICAgaWYgKG5leHQgPT09IE5MIHx8IG5leHQgPT09IE5FTCkgewogICAgICAgICAgICAgICAgLy8gQSBDUiBOTCBvciBDUiBORUwgc2VxdWVuY2UgaXMgY29udmVydGVkIHRvIE5MIHNvIHdlIGhhdmUgdG8gc2tpcAogICAgICAgICAgICAgICAgLy8gb3ZlciB0aGUgbmV4dCBjaGFyYWN0ZXIuIFdlIGFscmVhZHkga25vdyBpdCBoYXMgYSBzaXplIG9mIDEuCiAgICAgICAgICAgICAgICB0aGlzLmkgPSBpICsgMjsKICAgICAgICAgICAgICB9IC8vIE90aGVyd2lz
ZSwgYSBDUiBpcyBqdXN0IGNvbnZlcnRlZCB0byBOTCwgbm8gc2tpcC4KCiAgICAgICAgICAgIH0KCiAgICAgICAgICAvKiB5ZXMsIGZhbGwgdGhyb3VnaCAqLwoKICAgICAgICAgIGNhc2UgTkVMOiAvLyAweDg1CgogICAgICAgICAgY2FzZSBMUzoKICAgICAgICAgICAgLy8gT3gyMDI4CiAgICAgICAgICAgIHRoaXMubGluZSsrOwogICAgICAgICAgICB0aGlzLmNvbHVtbiA9IDA7CiAgICAgICAgICAgIHRoaXMucG9zaXRpb25BdE5ld0xpbmUgPSB0aGlzLnBvc2l0aW9uOwogICAgICAgICAgICByZXR1cm4gTkxfTElLRTsKCiAg
ICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyLiIpOwogICAgICAgICAgICByZXR1cm4gY29kZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChjb2RlID4gMHhEQkZGKSB7CiAgICAgICAgLy8gVGhpcyBpcyBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgaXNDaGFyQW5kTm90UmVzdHJpY3RlZCB0aGF0IHRha2VzIGludG8KICAgICAgICAvLyBhY2NvdW50IHRoYXQgaW4gdGhpcyBjb250ZXh0IGNvZGUgPiAweERCRkYgYW5kIGNvZGUgPD0gMHhGRkZGLiBTbyBpdAog
ICAgICAgIC8vIGRvZXMgbm90IHRlc3QgY2FzZXMgdGhhdCBkb24ndCBuZWVkIHRlc3RpbmcuCiAgICAgICAgaWYgKCEoY29kZSA+PSAweEUwMDAgJiYgY29kZSA8PSAweEZGRkQpKSB7CiAgICAgICAgICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyLiIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGNvZGU7CiAgICAgIH0KCiAgICAgIHZhciBmaW5hbCA9IDB4MTAwMDAgKyAoY29kZSAtIDB4RDgwMCkgKiAweDQwMCArIChjaHVuay5jaGFyQ29kZUF0KGkgKyAxKSAtIDB4REMwMCk7CiAgICAgIHRoaXMuaSA9IGkg
KyAyOyAvLyBUaGlzIGlzIGEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBpc0NoYXJBbmROb3RSZXN0cmljdGVkIHRoYXQgdGFrZXMgaW50bwogICAgICAvLyBhY2NvdW50IHRoYXQgaW4gdGhpcyBjb250ZXh0IG5lY2Vzc2FyaWx5IGZpbmFsID49IDB4MTAwMDAuCgogICAgICBpZiAoZmluYWwgPiAweDEwRkZGRikgewogICAgICAgIHRoaXMuZmFpbCgiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuIik7CiAgICAgIH0KCiAgICAgIHJldHVybiBmaW5hbDsKICAgIH0KICAgIC8qKgogICAgICogTGlrZSBgYGdldENvZGVgYCBidXQgd2l0aCB0
aGUgcmV0dXJuIHZhbHVlIG5vcm1hbGl6ZWQgc28gdGhhdCBgYE5MYGAgaXMKICAgICAqIHJldHVybmVkIGZvciBgYE5MX0xJS0VgYC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRDb2RlTm9ybSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29kZU5vcm0oKSB7CiAgICAgIHZhciBjID0gdGhpcy5nZXRDb2RlKCk7CiAgICAgIHJldHVybiBjID09PSBOTF9MSUtFID8gTkwgOiBjOwogICAgfQogIH0sIHsKICAgIGtleTogInVuZ2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1bmdldCgpIHsKICAgICAgdGhpcy5pID0gdGhp
cy5wcmV2STsKICAgICAgdGhpcy5jb2x1bW4tLTsKICAgIH0KICAgIC8qKgogICAgICogQ2FwdHVyZSBjaGFyYWN0ZXJzIGludG8gYSBidWZmZXIgdW50aWwgZW5jb3VudGVyaW5nIG9uZSBvZiBhIHNldCBvZgogICAgICogY2hhcmFjdGVycy4KICAgICAqCiAgICAgKiBAcGFyYW0gY2hhcnMgQW4gYXJyYXkgb2YgY29kZXBvaW50cy4gRW5jb3VudGVyaW5nIGEgY2hhcmFjdGVyIGluIHRoZSBhcnJheQogICAgICogZW5kcyB0aGUgY2FwdHVyZS4gKGBgY2hhcnNgYCBtYXkgc2FmZWx5IGNvbnRhaW4gYGBOTGBgLikKICAgICAqCiAg
ICAgKiBAcmV0dXJuIFRoZSBjaGFyYWN0ZXIgY29kZSB0aGF0IG1hZGUgdGhlIGNhcHR1cmUgZW5kLCBvciBgYEVPQ2BgIGlmIHdlIGhpdAogICAgICogdGhlIGVuZCBvZiB0aGUgY2h1bmsuIFRoZSByZXR1cm4gdmFsdWUgY2Fubm90IGJlIE5MX0xJS0U6IE5MIGlzIHJldHVybmVkCiAgICAgKiBpbnN0ZWFkLgogICAgICovCgogIH0sIHsKICAgIGtleTogImNhcHR1cmVUbyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FwdHVyZVRvKGNoYXJzKSB7CiAgICAgIHZhciBzdGFydCA9IHRoaXMuaTsKICAgICAgdmFyIGNodW5rID0gdGhp
cy5jaHVuazsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvbgoKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICB2YXIgYyA9IHRoaXMuZ2V0Q29kZSgpOwogICAgICAgIHZhciBpc05MTGlrZSA9IGMgPT09IE5MX0xJS0U7CiAgICAgICAgdmFyIGZpbmFsID0gaXNOTExpa2UgPyBOTCA6IGM7CgogICAgICAgIGlmIChmaW5hbCA9PT0gRU9DIHx8IGNoYXJzLmluY2x1ZGVzKGZpbmFsKSkgewogICAgICAgICAgdGhpcy50ZXh0ICs9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTsK
ICAgICAgICAgIHJldHVybiBmaW5hbDsKICAgICAgICB9CgogICAgICAgIGlmIChpc05MTGlrZSkgewogICAgICAgICAgdGhpcy50ZXh0ICs9ICIiLmNvbmNhdChjaHVuay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSksICJcbiIpOwogICAgICAgICAgc3RhcnQgPSB0aGlzLmk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICAvKioKICAgICAqIENhcHR1cmUgY2hhcmFjdGVycyBpbnRvIGEgYnVmZmVyIHVudGlsIGVuY291bnRlcmluZyBhIGNoYXJhY3Rlci4KICAgICAqCiAgICAgKiBAcGFyYW0gY2hhciBUaGUgY29kZXBvaW50
IHRoYXQgZW5kcyB0aGUgY2FwdHVyZS4gKipOT1RFIGBgY2hhcmBgIE1BWSBOT1QKICAgICAqIENPTlRBSU4gYGBOTGBgLioqIFBhc3NpbmcgYGBOTGBgIHdpbGwgcmVzdWx0IGluIGJ1Z2d5IGJlaGF2aW9yLgogICAgICoKICAgICAqIEByZXR1cm4gYGB0cnVlYGAgaWYgd2UgcmFuIGludG8gdGhlIGNoYXJhY3Rlci4gT3RoZXJ3aXNlLCB3ZSByYW4gaW50byB0aGUKICAgICAqIGVuZCBvZiB0aGUgY3VycmVudCBjaHVuay4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjYXB0dXJlVG9DaGFyIiwKICAgIHZhbHVlOiBmdW5jdGlv
biBjYXB0dXJlVG9DaGFyKGNoYXIpIHsKICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pOwogICAgICB2YXIgY2h1bmsgPSB0aGlzLmNodW5rOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uCgogICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgIHZhciBjID0gdGhpcy5nZXRDb2RlKCk7CgogICAgICAgIHN3aXRjaCAoYykgewogICAgICAgICAgY2FzZSBOTF9MSUtFOgogICAgICAgICAgICB0aGlzLnRleHQgKz0gIiIuY29uY2F0KGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKSwgIlxu
Iik7CiAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5pOwogICAgICAgICAgICBjID0gTkw7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgRU9DOgogICAgICAgICAgICB0aGlzLnRleHQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgICAgZGVmYXVsdDoKICAgICAgICB9CgogICAgICAgIGlmIChjID09PSBjaGFyKSB7CiAgICAgICAgICB0aGlzLnRleHQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAg
ICAgICAgfQogICAgICB9CiAgICB9CiAgICAvKioKICAgICAqIENhcHR1cmUgY2hhcmFjdGVycyB0aGF0IHNhdGlzZnkgYGBpc05hbWVDaGFyYGAgaW50byB0aGUgYGBuYW1lYGAgZmllbGQgb2YKICAgICAqIHRoaXMgcGFyc2VyLgogICAgICoKICAgICAqIEByZXR1cm4gVGhlIGNoYXJhY3RlciBjb2RlIHRoYXQgbWFkZSB0aGUgdGVzdCBmYWlsLCBvciBgYEVPQ2BgIGlmIHdlIGhpdAogICAgICogdGhlIGVuZCBvZiB0aGUgY2h1bmsuIFRoZSByZXR1cm4gdmFsdWUgY2Fubm90IGJlIE5MX0xJS0U6IE5MIGlzIHJldHVybmVkCiAg
ICAgKiBpbnN0ZWFkLgogICAgICovCgogIH0sIHsKICAgIGtleTogImNhcHR1cmVOYW1lQ2hhcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhcHR1cmVOYW1lQ2hhcnMoKSB7CiAgICAgIHZhciBjaHVuayA9IHRoaXMuY2h1bmssCiAgICAgICAgICBzdGFydCA9IHRoaXMuaTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvbgoKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICB2YXIgYyA9IHRoaXMuZ2V0Q29kZSgpOwoKICAgICAgICBpZiAoYyA9PT0gRU9DKSB7CiAgICAgICAgICB0aGlz
Lm5hbWUgKz0gY2h1bmsuc2xpY2Uoc3RhcnQpOwogICAgICAgICAgcmV0dXJuIEVPQzsKICAgICAgICB9IC8vIE5MIGlzIG5vdCBhIG5hbWUgY2hhciBzbyB3ZSBkb24ndCBoYXZlIHRvIHRlc3Qgc3BlY2lmaWNhbGx5IGZvciBpdC4KCgogICAgICAgIGlmICghaXNOYW1lQ2hhcihjKSkgewogICAgICAgICAgdGhpcy5uYW1lICs9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTsKICAgICAgICAgIHJldHVybiBjID09PSBOTF9MSUtFID8gTkwgOiBjOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiBT
a2lwIHdoaXRlIHNwYWNlcy4KICAgICAqCiAgICAgKiBAcmV0dXJuIFRoZSBjaGFyYWN0ZXIgdGhhdCBlbmRlZCB0aGUgc2tpcCwgb3IgYGBFT0NgYCBpZiB3ZSBoaXQKICAgICAqIHRoZSBlbmQgb2YgdGhlIGNodW5rLiBUaGUgcmV0dXJuIHZhbHVlIGNhbm5vdCBiZSBOTF9MSUtFOiBOTCBpcyByZXR1cm5lZAogICAgICogaW5zdGVhZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJza2lwU3BhY2VzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBza2lwU3BhY2VzKCkgewogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUg
bm8tY29uc3RhbnQtY29uZGl0aW9uCiAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgdmFyIGMgPSB0aGlzLmdldENvZGVOb3JtKCk7CgogICAgICAgIGlmIChjID09PSBFT0MgfHwgIWlzUyhjKSkgewogICAgICAgICAgcmV0dXJuIGM7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0WE1MVmVyc2lvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0WE1MVmVyc2lvbih2ZXJzaW9uKSB7CiAgICAgIHRoaXMuY3VycmVudFhNTFZlcnNpb24gPSB2ZXJzaW9uOwogICAgICAvKiAgZXNsaW50LWRpc2Fi
bGUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kICovCgogICAgICBpZiAodmVyc2lvbiA9PT0gIjEuMCIpIHsKICAgICAgICB0aGlzLmlzQ2hhciA9IGlzQ2hhcjEwOwogICAgICAgIHRoaXMuZ2V0Q29kZSA9IHRoaXMuZ2V0Q29kZTEwOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuaXNDaGFyID0gaXNDaGFyMTE7CiAgICAgICAgdGhpcy5nZXRDb2RlID0gdGhpcy5nZXRDb2RlMTE7CiAgICAgIH0KICAgICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2QgKi8KCiAg
ICB9IC8vIFNUQVRFIEVOR0lORSBNRVRIT0RTCiAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIGEgc3RhdGUgc2VwYXJhdGUgZnJvbSBTX0JFR0lOX1dISVRFU1BBQ0UgYmVjYXVzZSB3ZSB3YW50CiAgICAvLyB0byBiZSBzdXJlIG5ldmVyIHRvIGNvbWUgYmFjayB0byB0aGlzIHN0YXRlIGxhdGVyLgoKICB9LCB7CiAgICBrZXk6ICJzQmVnaW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNCZWdpbigpIHsKICAgICAgLy8gV2UgYXJlIGVzc2VudGlhbGx5IHBlZWtpbmcgYXQgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiB0aGUgY2h1bmsuIFNp
bmNlCiAgICAgIC8vIFNfQkVHSU4gY2FuIGJlIGluIGVmZmVjdCBvbmx5IHdoZW4gd2Ugc3RhcnQgd29ya2luZyBvbiB0aGUgZmlyc3QgY2h1bmssCiAgICAgIC8vIHRoZSBpbmRleCBhdCB3aGljaCB3ZSBtdXN0IGxvb2sgaXMgbmVjZXNzYXJpbHkgMC4gTm90ZSBhbHNvIHRoYXQgdGhlCiAgICAgIC8vIGZvbGxvd2luZyB0ZXN0IGRvZXMgbm90IGRlcGVuZCBvbiBkZWNvZGluZyBzdXJyb2dhdGVzLgogICAgICAvLyBJZiB0aGUgaW5pdGlhbCBjaGFyYWN0ZXIgaXMgMHhGRUZGLCBpZ25vcmUgaXQuCiAgICAgIGlmICh0aGlzLmNo
dW5rLmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikgewogICAgICAgIHRoaXMuaSsrOwogICAgICAgIHRoaXMuY29sdW1uKys7CiAgICAgIH0KCiAgICAgIHRoaXMuc3RhdGUgPSBTX0JFR0lOX1dISVRFU1BBQ0U7CiAgICB9CiAgfSwgewogICAga2V5OiAic0JlZ2luV2hpdGVzcGFjZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0JlZ2luV2hpdGVzcGFjZSgpIHsKICAgICAgLy8gV2UgbmVlZCB0byBrbm93IHdoZXRoZXIgd2UndmUgZW5jb3VudGVyZWQgc3BhY2VzIG9yIG5vdCBiZWNhdXNlIGFzIHNvb24KICAgICAgLy8gYXMgd2Ug
cnVuIGludG8gYSBzcGFjZSwgYW4gWE1MIGRlY2xhcmF0aW9uIGlzIG5vIGxvbmdlciBwb3NzaWJsZS4gUmF0aGVyCiAgICAgIC8vIHRoYW4gc2xvdyBkb3duIHNraXBTcGFjZXMgZXZlbiBpbiBwbGFjZXMgd2hlcmUgd2UgZG9uJ3QgY2FyZSB3aGV0aGVyIGl0CiAgICAgIC8vIHNraXBwZWQgYW55dGhpbmcgb3Igbm90LCB3ZSBjaGVjayB3aGV0aGVyIHByZXZJIGlzIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZgogICAgICAvLyBpIGZyb20gYmVmb3JlIHdlIHNraXAgc3BhY2VzLgogICAgICB2YXIgaUJlZm9yZSA9IHRoaXMuaTsKICAg
ICAgdmFyIGMgPSB0aGlzLnNraXBTcGFjZXMoKTsKCiAgICAgIGlmICh0aGlzLnByZXZJICE9PSBpQmVmb3JlKSB7CiAgICAgICAgdGhpcy54bWxEZWNsUG9zc2libGUgPSBmYWxzZTsKICAgICAgfQoKICAgICAgc3dpdGNoIChjKSB7CiAgICAgICAgY2FzZSBMRVNTOgogICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfT1BFTl9XQUtBOyAvLyBXZSBjb3VsZCBuYWl2ZWx5IGNhbGwgY2xvc2VUZXh0IGJ1dCBpbiB0aGlzIHN0YXRlLCBpdCBpcyBub3Qgbm9ybWFsCiAgICAgICAgICAvLyB0byBoYXZlIHRleHQgYmUgZmlsbGVkIHdpdGgg
YW55IGRhdGEuCgogICAgICAgICAgaWYgKHRoaXMudGV4dC5sZW5ndGggIT09IDApIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJuby1lbXB0eSB0ZXh0IGF0IHN0YXJ0Iik7CiAgICAgICAgICB9CgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRU9DOgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnVuZ2V0KCk7CiAgICAgICAgICB0aGlzLnN0YXRlID0gU19URVhUOwogICAgICAgICAgdGhpcy54bWxEZWNsUG9zc2libGUgPSBmYWxzZTsKICAgICAgfQogICAgfQog
IH0sIHsKICAgIGtleTogInNEb2N0eXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzRG9jdHlwZSgpIHsKICAgICAgdmFyIF9hOwoKICAgICAgdmFyIGMgPSB0aGlzLmNhcHR1cmVUbyhET0NUWVBFX1RFUk1JTkFUT1IpOwoKICAgICAgc3dpdGNoIChjKSB7CiAgICAgICAgY2FzZSBHUkVBVEVSOgogICAgICAgICAgewogICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zCiAgICAgICAgICAgIChfYSA9IHRoaXMuZG9jdHlwZUhhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2
b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRoaXMudGV4dCk7CiAgICAgICAgICAgIHRoaXMudGV4dCA9ICIiOwogICAgICAgICAgICB0aGlzLnN0YXRlID0gU19URVhUOwogICAgICAgICAgICB0aGlzLmRvY3R5cGUgPSB0cnVlOyAvLyBqdXN0IHJlbWVtYmVyIHRoYXQgd2Ugc2F3IGl0LgoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgIGNhc2UgRU9DOgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnRleHQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQo
Yyk7CgogICAgICAgICAgaWYgKGMgPT09IE9QRU5fQlJBQ0tFVCkgewogICAgICAgICAgICB0aGlzLnN0YXRlID0gU19EVEQ7CiAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHsKICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRE9DVFlQRV9RVU9URTsKICAgICAgICAgICAgdGhpcy5xID0gYzsKICAgICAgICAgIH0KCiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzRG9jdHlwZVF1b3RlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzRG9jdHlwZVF1b3RlKCkgewogICAgICB2YXIgcSA9IHRoaXMucTsKCiAgICAg
IGlmICh0aGlzLmNhcHR1cmVUb0NoYXIocSkpIHsKICAgICAgICB0aGlzLnRleHQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQocSk7CiAgICAgICAgdGhpcy5xID0gbnVsbDsKICAgICAgICB0aGlzLnN0YXRlID0gU19ET0NUWVBFOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic0RURCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0RURCgpIHsKICAgICAgdmFyIGMgPSB0aGlzLmNhcHR1cmVUbyhEVERfVEVSTUlOQVRPUik7CgogICAgICBpZiAoYyA9PT0gRU9DKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0
aGlzLnRleHQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7CgogICAgICBpZiAoYyA9PT0gQ0xPU0VfQlJBQ0tFVCkgewogICAgICAgIHRoaXMuc3RhdGUgPSBTX0RPQ1RZUEU7CiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gTEVTUykgewogICAgICAgIHRoaXMuc3RhdGUgPSBTX0RURF9PUEVOX1dBS0E7CiAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZShjKSkgewogICAgICAgIHRoaXMuc3RhdGUgPSBTX0RURF9RVU9URUQ7CiAgICAgICAgdGhpcy5xID0gYzsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNEVERRdW90ZWQi
LAogICAgdmFsdWU6IGZ1bmN0aW9uIHNEVERRdW90ZWQoKSB7CiAgICAgIHZhciBxID0gdGhpcy5xOwoKICAgICAgaWYgKHRoaXMuY2FwdHVyZVRvQ2hhcihxKSkgewogICAgICAgIHRoaXMudGV4dCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChxKTsKICAgICAgICB0aGlzLnN0YXRlID0gU19EVEQ7CiAgICAgICAgdGhpcy5xID0gbnVsbDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNEVERPcGVuV2FrYSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0RURE9wZW5XYWthKCkgewogICAgICB2YXIgYyA9IHRoaXMuZ2V0Q29k
ZU5vcm0oKTsKICAgICAgdGhpcy50ZXh0ICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KGMpOwoKICAgICAgc3dpdGNoIChjKSB7CiAgICAgICAgY2FzZSBCQU5HOgogICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX09QRU5fV0FLQV9CQU5HOwogICAgICAgICAgdGhpcy5vcGVuV2FrYUJhbmcgPSAiIjsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIFFVRVNUSU9OOgogICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX1BJOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLnN0YXRl
ID0gU19EVEQ7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzRFRET3Blbldha2FCYW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzRFRET3Blbldha2FCYW5nKCkgewogICAgICB2YXIgY2hhciA9IFN0cmluZy5mcm9tQ29kZVBvaW50KHRoaXMuZ2V0Q29kZU5vcm0oKSk7CiAgICAgIHZhciBvd2IgPSB0aGlzLm9wZW5XYWthQmFuZyArPSBjaGFyOwogICAgICB0aGlzLnRleHQgKz0gY2hhcjsKCiAgICAgIGlmIChvd2IgIT09ICItIikgewogICAgICAgIHRoaXMuc3RhdGUgPSBvd2IgPT09ICItLSIgPyBTX0RURF9DT01N
RU5UIDogU19EVEQ7CiAgICAgICAgdGhpcy5vcGVuV2FrYUJhbmcgPSAiIjsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNEVERDb21tZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzRFREQ29tbWVudCgpIHsKICAgICAgaWYgKHRoaXMuY2FwdHVyZVRvQ2hhcihNSU5VUykpIHsKICAgICAgICB0aGlzLnRleHQgKz0gIi0iOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX0RURF9DT01NRU5UX0VORElORzsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNEVERDb21tZW50RW5kaW5nIiwKICAgIHZhbHVlOiBmdW5j
dGlvbiBzRFREQ29tbWVudEVuZGluZygpIHsKICAgICAgdmFyIGMgPSB0aGlzLmdldENvZGVOb3JtKCk7CiAgICAgIHRoaXMudGV4dCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTsKICAgICAgdGhpcy5zdGF0ZSA9IGMgPT09IE1JTlVTID8gU19EVERfQ09NTUVOVF9FTkRFRCA6IFNfRFREX0NPTU1FTlQ7CiAgICB9CiAgfSwgewogICAga2V5OiAic0RURENvbW1lbnRFbmRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0RURENvbW1lbnRFbmRlZCgpIHsKICAgICAgdmFyIGMgPSB0aGlzLmdldENvZGVOb3JtKCk7CiAgICAgIHRo
aXMudGV4dCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTsKCiAgICAgIGlmIChjID09PSBHUkVBVEVSKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZmFpbCgibWFsZm9ybWVkIGNvbW1lbnQuIik7IC8vIDwhLS0gYmxhaCAtLSBibG9vIC0tPiB3aWxsIGJlIHJlY29yZGVkIGFzCiAgICAgICAgLy8gYSBjb21tZW50IG9mICIgYmxhaCAtLSBibG9vICIKCiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREX0NPTU1FTlQ7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6
ICJzRFREUEkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNEVERQSSgpIHsKICAgICAgaWYgKHRoaXMuY2FwdHVyZVRvQ2hhcihRVUVTVElPTikpIHsKICAgICAgICB0aGlzLnRleHQgKz0gIj8iOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX0RURF9QSV9FTkRJTkc7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzRFREUElFbmRpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNEVERQSUVuZGluZygpIHsKICAgICAgdmFyIGMgPSB0aGlzLmdldENvZGVOb3JtKCk7CiAgICAgIHRoaXMudGV4dCArPSBTdHJpbmcuZnJvbUNvZGVQ
b2ludChjKTsKCiAgICAgIGlmIChjID09PSBHUkVBVEVSKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRFREOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic1RleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNUZXh0KCkgewogICAgICAvLwogICAgICAvLyBXZSBkaWQgdHJ5IGEgdmVyc2lvbiBvZiBzYXhlcyB3aGVyZSB0aGUgU19URVhUIHN0YXRlIHdhcyBzcGxpdCBpbiB0d28KICAgICAgLy8gc3RhdGVzOiBvbmUgZm9yIHRleHQgaW5zaWRlIHRoZSByb290IGVsZW1lbnQsIGFuZCBvbmUgZm9yIHRleHQKICAgICAg
Ly8gb3V0c2lkZS4gVGhpcyB3YXMgYXZvaWRpbmcgaGF2aW5nIHRvIHRlc3QgdGhpcy50YWdzLmxlbmd0aCB0byBkZWNpZGUKICAgICAgLy8gd2hhdCBpbXBsZW1lbnRhdGlvbiB0byBhY3R1YWxseSB1c2UuCiAgICAgIC8vCiAgICAgIC8vIFBlZm9ybWFuY2UgdGVzdGluZyBvbiBnaWdhYnl0ZS1zaXplIGZpbGVzIGRpZCBub3Qgc2hvdyBhbnkgYWR2YW50YWdlIHRvCiAgICAgIC8vIHVzaW5nIHRoZSB0d28gc3RhdGVzIHNvbHV0aW9uIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgb25lLiBDb252ZXJzZWx5LCBpdAogICAgICAvLyBt
YWRlIHRoZSBjb2RlIGEgYml0IG1vcmUgY29tcGxpY2F0ZWQgZWxzZXdoZXJlLiBGb3IgaW5zdGFuY2UsIGEgY29tbWVudAogICAgICAvLyBjYW4gYXBwZWFyIGJlZm9yZSB0aGUgcm9vdCBlbGVtZW50IHNvIHdoZW4gYSBjb21tZW50IGVuZGVkIGl0IHdhcwogICAgICAvLyBuZWNlc3NhcnkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmV0dXJuIHRvIHRoZSBTX1RFWFQgc3RhdGUgb3IgdG8gdGhlCiAgICAgIC8vIG5ldyB0ZXh0LW91dHNpZGUtcm9vdCBzdGF0ZS4KICAgICAgLy8KICAgICAgaWYgKHRoaXMudGFncy5sZW5ndGgg
IT09IDApIHsKICAgICAgICB0aGlzLmhhbmRsZVRleHRJblJvb3QoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmhhbmRsZVRleHRPdXRzaWRlUm9vdCgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic0VudGl0eSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0VudGl0eSgpIHsKICAgICAgLy8gVGhpcyBpcyBlc3NlbnRpYWxseSBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgY2FwdHVyZVRvQ2hhcihTRU1JQ09MT04uLi4pCiAgICAgIHZhciBzdGFydCA9IHRoaXMuaTsKICAgICAgdmFyIGNodW5rID0gdGhpcy5j
aHVuazsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVscywgbm8tcmVzdHJpY3RlZC1zeW50YXgKCiAgICAgIGxvb3A6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb24KICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0Q29kZSgpKSB7CiAgICAgICAgICBjYXNlIE5MX0xJS0U6CiAgICAgICAgICAgIHRoaXMuZW50aXR5ICs9ICIiLmNvbmNhdChjaHVuay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSksICJcbiIpOwogICAgICAgICAgICBzdGFy
dCA9IHRoaXMuaTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBTRU1JQ09MT046CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICB2YXIgZW50aXR5UmV0dXJuU3RhdGUgPSB0aGlzLmVudGl0eVJldHVyblN0YXRlOwogICAgICAgICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLmVudGl0eSArIGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTsKICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gZW50aXR5UmV0dXJuU3RhdGU7CiAgICAgICAgICAgICAgdmFyIHBhcnNlZCA9IHZvaWQgMDsKCiAgICAgICAgICAg
ICAgaWYgKGVudGl0eSA9PT0gIiIpIHsKICAgICAgICAgICAgICAgIHRoaXMuZmFpbCgiZW1wdHkgZW50aXR5IG5hbWUuIik7CiAgICAgICAgICAgICAgICBwYXJzZWQgPSAiJjsiOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlRW50aXR5KGVudGl0eSk7CiAgICAgICAgICAgICAgICB0aGlzLmVudGl0eSA9ICIiOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKGVudGl0eVJldHVyblN0YXRlICE9PSBTX1RFWFQgfHwgdGhpcy50ZXh0SGFuZGxlciAhPT0g
dW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gcGFyc2VkOwogICAgICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVscwoKCiAgICAgICAgICAgICAgYnJlYWsgbG9vcDsKICAgICAgICAgICAgfQoKICAgICAgICAgIGNhc2UgRU9DOgogICAgICAgICAgICB0aGlzLmVudGl0eSArPSBjaHVuay5zbGljZShzdGFydCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHMKCiAgICAgICAgICAgIGJyZWFrIGxvb3A7CgogICAgICAgICAgZGVmYXVsdDoKICAg
ICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzT3Blbldha2EiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNPcGVuV2FrYSgpIHsKICAgICAgLy8gUmVtaW5kZXI6IGEgc3RhdGUgaGFuZGxlciBpcyBjYWxsZWQgd2l0aCBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyCiAgICAgIC8vIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBjaHVuay4gU28gdGhlIGZpcnN0IGNhbGwgdG8gZ2V0IGNvZGUgaW5zaWRlIG9mCiAgICAgIC8vIGEgc3RhdGUgaGFuZGxlciBjYW5ub3QgcmV0dXJuIGBgRU9DYGAuIFRoYXQncyB3aHkgd2Ug
ZG9uJ3QgdGVzdAogICAgICAvLyBmb3IgaXQuCiAgICAgIHZhciBjID0gdGhpcy5nZXRDb2RlKCk7IC8vIGVpdGhlciBhIC8sID8sICEsIG9yIHRleHQgaXMgY29taW5nIG5leHQuCgogICAgICBpZiAoaXNOYW1lU3RhcnRDaGFyKGMpKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfT1BFTl9UQUc7CiAgICAgICAgdGhpcy51bmdldCgpOwogICAgICAgIHRoaXMueG1sRGVjbFBvc3NpYmxlID0gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3dpdGNoIChjKSB7CiAgICAgICAgICBjYXNlIEZPUldBUkRfU0xBU0g6CiAgICAg
ICAgICAgIHRoaXMuc3RhdGUgPSBTX0NMT1NFX1RBRzsKICAgICAgICAgICAgdGhpcy54bWxEZWNsUG9zc2libGUgPSBmYWxzZTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBCQU5HOgogICAgICAgICAgICB0aGlzLnN0YXRlID0gU19PUEVOX1dBS0FfQkFORzsKICAgICAgICAgICAgdGhpcy5vcGVuV2FrYUJhbmcgPSAiIjsKICAgICAgICAgICAgdGhpcy54bWxEZWNsUG9zc2libGUgPSBmYWxzZTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBRVUVTVElPTjoKICAgICAgICAgICAgdGhpcy5z
dGF0ZSA9IFNfUElfRklSU1RfQ0hBUjsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhpcy5mYWlsKCJkaXNhbGxvd2VkIGNoYXJhY3RlciBpbiB0YWcgbmFtZSIpOwogICAgICAgICAgICB0aGlzLnN0YXRlID0gU19URVhUOwogICAgICAgICAgICB0aGlzLnhtbERlY2xQb3NzaWJsZSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNPcGVuV2FrYUJhbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNPcGVuV2FrYUJhbmcoKSB7CiAgICAgIHRo
aXMub3Blbldha2FCYW5nICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KHRoaXMuZ2V0Q29kZU5vcm0oKSk7CgogICAgICBzd2l0Y2ggKHRoaXMub3Blbldha2FCYW5nKSB7CiAgICAgICAgY2FzZSAiW0NEQVRBWyI6CiAgICAgICAgICBpZiAoIXRoaXMuc2F3Um9vdCAmJiAhdGhpcy5yZXBvcnRlZFRleHRCZWZvcmVSb290KSB7CiAgICAgICAgICAgIHRoaXMuZmFpbCgidGV4dCBkYXRhIG91dHNpZGUgb2Ygcm9vdCBub2RlLiIpOwogICAgICAgICAgICB0aGlzLnJlcG9ydGVkVGV4dEJlZm9yZVJvb3QgPSB0cnVlOwogICAgICAgICAg
fQoKICAgICAgICAgIGlmICh0aGlzLmNsb3NlZFJvb3QgJiYgIXRoaXMucmVwb3J0ZWRUZXh0QWZ0ZXJSb290KSB7CiAgICAgICAgICAgIHRoaXMuZmFpbCgidGV4dCBkYXRhIG91dHNpZGUgb2Ygcm9vdCBub2RlLiIpOwogICAgICAgICAgICB0aGlzLnJlcG9ydGVkVGV4dEFmdGVyUm9vdCA9IHRydWU7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQ0RBVEE7CiAgICAgICAgICB0aGlzLm9wZW5XYWthQmFuZyA9ICIiOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgIi0tIjoKICAgICAgICAgIHRo
aXMuc3RhdGUgPSBTX0NPTU1FTlQ7CiAgICAgICAgICB0aGlzLm9wZW5XYWthQmFuZyA9ICIiOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgIkRPQ1RZUEUiOgogICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRE9DVFlQRTsKCiAgICAgICAgICBpZiAodGhpcy5kb2N0eXBlIHx8IHRoaXMuc2F3Um9vdCkgewogICAgICAgICAgICB0aGlzLmZhaWwoImluYXBwcm9wcmlhdGVseSBsb2NhdGVkIGRvY3R5cGUgZGVjbGFyYXRpb24uIik7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5vcGVuV2FrYUJhbmcgPSAiIjsKICAg
ICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgLy8gNyBoYXBwZW5zIHRvIGJlIHRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgc3RyaW5nIHRoYXQgY2FuIHBvc3NpYmx5CiAgICAgICAgICAvLyBtYXRjaCBvbmUgb2YgdGhlIGNhc2VzIGFib3ZlLgogICAgICAgICAgaWYgKHRoaXMub3Blbldha2FCYW5nLmxlbmd0aCA+PSA3KSB7CiAgICAgICAgICAgIHRoaXMuZmFpbCgiaW5jb3JyZWN0IHN5bnRheC4iKTsKICAgICAgICAgIH0KCiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzQ29tbWVudCIs
CiAgICB2YWx1ZTogZnVuY3Rpb24gc0NvbW1lbnQoKSB7CiAgICAgIGlmICh0aGlzLmNhcHR1cmVUb0NoYXIoTUlOVVMpKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQ09NTUVOVF9FTkRJTkc7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzQ29tbWVudEVuZGluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0NvbW1lbnRFbmRpbmcoKSB7CiAgICAgIHZhciBfYTsKCiAgICAgIHZhciBjID0gdGhpcy5nZXRDb2RlTm9ybSgpOwoKICAgICAgaWYgKGMgPT09IE1JTlVTKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQ09N
TUVOVF9FTkRFRDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucwoKICAgICAgICAoX2EgPSB0aGlzLmNvbW1lbnRIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB0aGlzLnRleHQpOwogICAgICAgIHRoaXMudGV4dCA9ICIiOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudGV4dCArPSAiLSIuY29uY2F0KFN0cmluZy5mcm9tQ29kZVBvaW50KGMpKTsKICAgICAgICB0aGlzLnN0YXRlID0gU19DT01NRU5UOwogICAgICB9CiAg
ICB9CiAgfSwgewogICAga2V5OiAic0NvbW1lbnRFbmRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0NvbW1lbnRFbmRlZCgpIHsKICAgICAgdmFyIGMgPSB0aGlzLmdldENvZGVOb3JtKCk7CgogICAgICBpZiAoYyAhPT0gR1JFQVRFUikgewogICAgICAgIHRoaXMuZmFpbCgibWFsZm9ybWVkIGNvbW1lbnQuIik7IC8vIDwhLS0gYmxhaCAtLSBibG9vIC0tPiB3aWxsIGJlIHJlY29yZGVkIGFzCiAgICAgICAgLy8gYSBjb21tZW50IG9mICIgYmxhaCAtLSBibG9vICIKCiAgICAgICAgdGhpcy50ZXh0ICs9ICItLSIuY29uY2F0KFN0
cmluZy5mcm9tQ29kZVBvaW50KGMpKTsKICAgICAgICB0aGlzLnN0YXRlID0gU19DT01NRU5UOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc3RhdGUgPSBTX1RFWFQ7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzQ0RhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNDRGF0YSgpIHsKICAgICAgaWYgKHRoaXMuY2FwdHVyZVRvQ2hhcihDTE9TRV9CUkFDS0VUKSkgewogICAgICAgIHRoaXMuc3RhdGUgPSBTX0NEQVRBX0VORElORzsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNDRGF0YUVuZGluZyIs
CiAgICB2YWx1ZTogZnVuY3Rpb24gc0NEYXRhRW5kaW5nKCkgewogICAgICB2YXIgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTsKCiAgICAgIGlmIChjID09PSBDTE9TRV9CUkFDS0VUKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQ0RBVEFfRU5ESU5HXzI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy50ZXh0ICs9ICJdIi5jb25jYXQoU3RyaW5nLmZyb21Db2RlUG9pbnQoYykpOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX0NEQVRBOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic0NEYXRhRW5kaW5nMiIsCiAgICB2
YWx1ZTogZnVuY3Rpb24gc0NEYXRhRW5kaW5nMigpIHsKICAgICAgdmFyIF9hOwoKICAgICAgdmFyIGMgPSB0aGlzLmdldENvZGVOb3JtKCk7CgogICAgICBzd2l0Y2ggKGMpIHsKICAgICAgICBjYXNlIEdSRUFURVI6CiAgICAgICAgICB7CiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMKICAgICAgICAgICAgKF9hID0gdGhpcy5jZGF0YUhhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRoaXMudGV4dCk7CiAg
ICAgICAgICAgIHRoaXMudGV4dCA9ICIiOwogICAgICAgICAgICB0aGlzLnN0YXRlID0gU19URVhUOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgY2FzZSBDTE9TRV9CUkFDS0VUOgogICAgICAgICAgdGhpcy50ZXh0ICs9ICJdIjsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy50ZXh0ICs9ICJdXSIuY29uY2F0KFN0cmluZy5mcm9tQ29kZVBvaW50KGMpKTsKICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0NEQVRBOwogICAgICB9CiAgICB9IC8vIFdlIG5lZWQg
dGhpcyBzZXBhcmF0ZSBzdGF0ZSB0byBjaGVjayB0aGUgZmlyc3QgY2hhcmFjdGVyIGZvIHRoZSBwaSB0YXJnZXQKICAgIC8vIHdpdGggdGhpcy5uYW1lU3RhcnRDaGVjayB3aGljaCBhbGxvd3MgbGVzcyBjaGFyYWN0ZXJzIHRoYW4gdGhpcy5uYW1lQ2hlY2suCgogIH0sIHsKICAgIGtleTogInNQSUZpcnN0Q2hhciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc1BJRmlyc3RDaGFyKCkgewogICAgICB2YXIgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTsgLy8gVGhpcyBpcyBmaXJzdCBiZWNhdXNlIGluIHRoZSBjYXNlIHdoZXJlIHRoZSBm
aWxlIGlzIHdlbGwtZm9ybWVkIHRoaXMgaXMKICAgICAgLy8gdGhlIGJyYW5jaCB0YWtlbi4gV2Ugb3B0aW1pemUgZm9yIHdlbGwtZm9ybWVkbmVzcy4KCiAgICAgIGlmICh0aGlzLm5hbWVTdGFydENoZWNrKGMpKSB7CiAgICAgICAgdGhpcy5waVRhcmdldCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTsKICAgICAgICB0aGlzLnN0YXRlID0gU19QSV9SRVNUOwogICAgICB9IGVsc2UgaWYgKGMgPT09IFFVRVNUSU9OIHx8IGlzUyhjKSkgewogICAgICAgIHRoaXMuZmFpbCgicHJvY2Vzc2luZyBpbnN0cnVjdGlvbiB3aXRob3V0
IGEgdGFyZ2V0LiIpOwogICAgICAgIHRoaXMuc3RhdGUgPSBjID09PSBRVUVTVElPTiA/IFNfUElfRU5ESU5HIDogU19QSV9CT0RZOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZmFpbCgiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBuYW1lLiIpOwogICAgICAgIHRoaXMucGlUYXJnZXQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoYyk7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfUElfUkVTVDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNQSVJlc3QiLAogICAgdmFsdWU6
IGZ1bmN0aW9uIHNQSVJlc3QoKSB7CiAgICAgIC8vIENhcHR1cmUgY2hhcmFjdGVycyBpbnRvIGEgcGlUYXJnZXQgd2hpbGUgYGB0aGlzLm5hbWVDaGVja2BgIHJ1biBvbiB0aGUKICAgICAgLy8gY2hhcmFjdGVyIHJlYWQgcmV0dXJucyB0cnVlLgogICAgICB2YXIgY2h1bmsgPSB0aGlzLmNodW5rLAogICAgICAgICAgc3RhcnQgPSB0aGlzLmk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb24KCiAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgdmFyIGMgPSB0aGlzLmdldENvZGVOb3Jt
KCk7CgogICAgICAgIGlmIChjID09PSBFT0MpIHsKICAgICAgICAgIHRoaXMucGlUYXJnZXQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0gLy8gTkwgY2Fubm90IHNhdGlzZnkgdGhpcy5uYW1lQ2hlY2sgc28gd2UgZG9uJ3QgaGF2ZSB0byB0ZXN0IHNwZWNpZmljYWxseQogICAgICAgIC8vIGZvciBpdC4KCgogICAgICAgIGlmICghdGhpcy5uYW1lQ2hlY2soYykpIHsKICAgICAgICAgIHRoaXMucGlUYXJnZXQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpOwogICAgICAg
ICAgdmFyIGlzUXVlc3Rpb24gPSBjID09PSBRVUVTVElPTjsKCiAgICAgICAgICBpZiAoaXNRdWVzdGlvbiB8fCBpc1MoYykpIHsKICAgICAgICAgICAgaWYgKHRoaXMucGlUYXJnZXQgPT09ICJ4bWwiKSB7CiAgICAgICAgICAgICAgaWYgKCF0aGlzLnhtbERlY2xQb3NzaWJsZSkgewogICAgICAgICAgICAgICAgdGhpcy5mYWlsKCJhbiBYTUwgZGVjbGFyYXRpb24gbXVzdCBiZSBhdCB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50LiIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IGlzUXVlc3Rp
b24gPyBTX1hNTF9ERUNMX0VORElORyA6IFNfWE1MX0RFQ0xfTkFNRV9TVEFSVDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gaXNRdWVzdGlvbiA/IFNfUElfRU5ESU5HIDogU19QSV9CT0RZOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyIGluIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbmFtZS4iKTsKICAgICAgICAgICAgdGhpcy5waVRhcmdldCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjKTsK
ICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzUElCb2R5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzUElCb2R5KCkgewogICAgICBpZiAodGhpcy50ZXh0Lmxlbmd0aCA9PT0gMCkgewogICAgICAgIHZhciBjID0gdGhpcy5nZXRDb2RlTm9ybSgpOwoKICAgICAgICBpZiAoYyA9PT0gUVVFU1RJT04pIHsKICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX1BJX0VORElORzsKICAgICAgICB9IGVsc2UgaWYgKCFpc1MoYykpIHsKICAgICAgICAgIHRoaXMudGV4
dCA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGMpOwogICAgICAgIH0KICAgICAgfSAvLyBUaGUgcXVlc3Rpb24gbWFyayBjaGFyYWN0ZXIgaXMgbm90IHZhbGlkIGluc2lkZSBhbnkgb2YgdGhlIFhNTAogICAgICAvLyBkZWNsYXJhdGlvbiBuYW1lL3ZhbHVlIHBhaXJzLgogICAgICBlbHNlIGlmICh0aGlzLmNhcHR1cmVUb0NoYXIoUVVFU1RJT04pKSB7CiAgICAgICAgICB0aGlzLnN0YXRlID0gU19QSV9FTkRJTkc7CiAgICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNQSUVuZGluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24g
c1BJRW5kaW5nKCkgewogICAgICB2YXIgX2E7CgogICAgICB2YXIgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTsKCiAgICAgIGlmIChjID09PSBHUkVBVEVSKSB7CiAgICAgICAgdmFyIHBpVGFyZ2V0ID0gdGhpcy5waVRhcmdldDsKCiAgICAgICAgaWYgKHBpVGFyZ2V0LnRvTG93ZXJDYXNlKCkgPT09ICJ4bWwiKSB7CiAgICAgICAgICB0aGlzLmZhaWwoInRoZSBYTUwgZGVjbGFyYXRpb24gbXVzdCBhcHBlYXIgYXQgdGhlIHN0YXJ0IG9mIHRoZSBkb2N1bWVudC4iKTsKICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGlu
ZSBuby11bnVzZWQtZXhwcmVzc2lvbnMKCgogICAgICAgIChfYSA9IHRoaXMucGlIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB7CiAgICAgICAgICB0YXJnZXQ6IHBpVGFyZ2V0LAogICAgICAgICAgYm9keTogdGhpcy50ZXh0CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5waVRhcmdldCA9IHRoaXMudGV4dCA9ICIiOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX1RFWFQ7CiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gUVVFU1RJT04pIHsKICAgICAgICAvLyBXZSByYW4gaW50
byA/PyBhcyBwYXJ0IG9mIGEgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbi4gV2UgaW5pdGlhbGx5IHRvb2sKICAgICAgICAvLyB0aGUgZmlyc3QgPyBhcyBhIHNpZ24gdGhhdCB0aGUgUEkgd2FzIGVuZGluZywgYnV0IGl0IGlzIG5vdC4gU28gd2UgaGF2ZQogICAgICAgIC8vIHRvIGFkZCBpdCB0byB0aGUgYm9keSBidXQgd2UgdGFrZSB0aGUgbmV3ID8gYXMgYSBzaWduIHRoYXQgdGhlIFBJIGlzCiAgICAgICAgLy8gZW5kaW5nLgogICAgICAgIHRoaXMudGV4dCArPSAiPyI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy50ZXh0
ICs9ICI/Ii5jb25jYXQoU3RyaW5nLmZyb21Db2RlUG9pbnQoYykpOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX1BJX0JPRFk7CiAgICAgIH0KCiAgICAgIHRoaXMueG1sRGVjbFBvc3NpYmxlID0gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAic1hNTERlY2xOYW1lU3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNYTUxEZWNsTmFtZVN0YXJ0KCkgewogICAgICB2YXIgYyA9IHRoaXMuc2tpcFNwYWNlcygpOyAvLyBUaGUgcXVlc3Rpb24gbWFyayBjaGFyYWN0ZXIgaXMgbm90IHZhbGlkIGluc2lkZSBhbnkgb2YgdGhlIFhN
TAogICAgICAvLyBkZWNsYXJhdGlvbiBuYW1lL3ZhbHVlIHBhaXJzLgoKICAgICAgaWYgKGMgPT09IFFVRVNUSU9OKSB7CiAgICAgICAgLy8gSXQgaXMgdmFsaWQgdG8gZ28gdG8gU19YTUxfREVDTF9FTkRJTkcgZnJvbSB0aGlzIHN0YXRlLgogICAgICAgIHRoaXMuc3RhdGUgPSBTX1hNTF9ERUNMX0VORElORzsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChjICE9PSBFT0MpIHsKICAgICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9OQU1FOwogICAgICAgIHRoaXMubmFtZSA9IFN0cmluZy5mcm9tQ29kZVBv
aW50KGMpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic1hNTERlY2xOYW1lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzWE1MRGVjbE5hbWUoKSB7CiAgICAgIHZhciBjID0gdGhpcy5jYXB0dXJlVG8oWE1MX0RFQ0xfTkFNRV9URVJNSU5BVE9SKTsgLy8gVGhlIHF1ZXN0aW9uIG1hcmsgY2hhcmFjdGVyIGlzIG5vdCB2YWxpZCBpbnNpZGUgYW55IG9mIHRoZSBYTUwKICAgICAgLy8gZGVjbGFyYXRpb24gbmFtZS92YWx1ZSBwYWlycy4KCiAgICAgIGlmIChjID09PSBRVUVTVElPTikgewogICAgICAgIHRoaXMuc3RhdGUg
PSBTX1hNTF9ERUNMX0VORElORzsKICAgICAgICB0aGlzLm5hbWUgKz0gdGhpcy50ZXh0OwogICAgICAgIHRoaXMudGV4dCA9ICIiOwogICAgICAgIHRoaXMuZmFpbCgiWE1MIGRlY2xhcmF0aW9uIGlzIGluY29tcGxldGUuIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoIShpc1MoYykgfHwgYyA9PT0gRVFVQUwpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLm5hbWUgKz0gdGhpcy50ZXh0OwogICAgICB0aGlzLnRleHQgPSAiIjsKCiAgICAgIGlmICghdGhpcy54bWxEZWNsRXhwZWN0
cy5pbmNsdWRlcyh0aGlzLm5hbWUpKSB7CiAgICAgICAgc3dpdGNoICh0aGlzLm5hbWUubGVuZ3RoKSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHRoaXMuZmFpbCgiZGlkIG5vdCBleHBlY3QgYW55IG1vcmUgbmFtZS92YWx1ZSBwYWlycy4iKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICB0aGlzLmZhaWwoImV4cGVjdGVkIHRoZSBuYW1lICIuY29uY2F0KHRoaXMueG1sRGVjbEV4cGVjdHNbMF0sICIuIikpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBkZWZh
dWx0OgogICAgICAgICAgICB0aGlzLmZhaWwoImV4cGVjdGVkIG9uZSBvZiAiLmNvbmNhdCh0aGlzLnhtbERlY2xFeHBlY3RzLmpvaW4oIiwgIikpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuc3RhdGUgPSBjID09PSBFUVVBTCA/IFNfWE1MX0RFQ0xfVkFMVUVfU1RBUlQgOiBTX1hNTF9ERUNMX0VROwogICAgfQogIH0sIHsKICAgIGtleTogInNYTUxEZWNsRXEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNYTUxEZWNsRXEoKSB7CiAgICAgIHZhciBjID0gdGhpcy5nZXRDb2RlTm9ybSgpOyAvLyBUaGUgcXVlc3Rpb24g
bWFyayBjaGFyYWN0ZXIgaXMgbm90IHZhbGlkIGluc2lkZSBhbnkgb2YgdGhlIFhNTAogICAgICAvLyBkZWNsYXJhdGlvbiBuYW1lL3ZhbHVlIHBhaXJzLgoKICAgICAgaWYgKGMgPT09IFFVRVNUSU9OKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfWE1MX0RFQ0xfRU5ESU5HOwogICAgICAgIHRoaXMuZmFpbCgiWE1MIGRlY2xhcmF0aW9uIGlzIGluY29tcGxldGUuIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoaXNTKGMpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoYyAhPT0gRVFV
QUwpIHsKICAgICAgICB0aGlzLmZhaWwoInZhbHVlIHJlcXVpcmVkLiIpOwogICAgICB9CgogICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9WQUxVRV9TVEFSVDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzWE1MRGVjbFZhbHVlU3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNYTUxEZWNsVmFsdWVTdGFydCgpIHsKICAgICAgdmFyIGMgPSB0aGlzLmdldENvZGVOb3JtKCk7IC8vIFRoZSBxdWVzdGlvbiBtYXJrIGNoYXJhY3RlciBpcyBub3QgdmFsaWQgaW5zaWRlIGFueSBvZiB0aGUgWE1MCiAgICAgIC8vIGRlY2xhcmF0
aW9uIG5hbWUvdmFsdWUgcGFpcnMuCgogICAgICBpZiAoYyA9PT0gUVVFU1RJT04pIHsKICAgICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9FTkRJTkc7CiAgICAgICAgdGhpcy5mYWlsKCJYTUwgZGVjbGFyYXRpb24gaXMgaW5jb21wbGV0ZS4iKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChpc1MoYykpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICghaXNRdW90ZShjKSkgewogICAgICAgIHRoaXMuZmFpbCgidmFsdWUgbXVzdCBiZSBxdW90ZWQuIik7CiAgICAgICAgdGhpcy5xID0g
U1BBQ0U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5xID0gYzsKICAgICAgfQoKICAgICAgdGhpcy5zdGF0ZSA9IFNfWE1MX0RFQ0xfVkFMVUU7CiAgICB9CiAgfSwgewogICAga2V5OiAic1hNTERlY2xWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc1hNTERlY2xWYWx1ZSgpIHsKICAgICAgdmFyIGMgPSB0aGlzLmNhcHR1cmVUbyhbdGhpcy5xLCBRVUVTVElPTl0pOyAvLyBUaGUgcXVlc3Rpb24gbWFyayBjaGFyYWN0ZXIgaXMgbm90IHZhbGlkIGluc2lkZSBhbnkgb2YgdGhlIFhNTAogICAgICAvLyBkZWNsYXJhdGlv
biBuYW1lL3ZhbHVlIHBhaXJzLgoKICAgICAgaWYgKGMgPT09IFFVRVNUSU9OKSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfWE1MX0RFQ0xfRU5ESU5HOwogICAgICAgIHRoaXMudGV4dCA9ICIiOwogICAgICAgIHRoaXMuZmFpbCgiWE1MIGRlY2xhcmF0aW9uIGlzIGluY29tcGxldGUuIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoYyA9PT0gRU9DKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgdmFsdWUgPSB0aGlzLnRleHQ7CiAgICAgIHRoaXMudGV4dCA9ICIiOwoKICAgICAgc3dp
dGNoICh0aGlzLm5hbWUpIHsKICAgICAgICBjYXNlICJ2ZXJzaW9uIjoKICAgICAgICAgIHsKICAgICAgICAgICAgdGhpcy54bWxEZWNsRXhwZWN0cyA9IFsiZW5jb2RpbmciLCAic3RhbmRhbG9uZSJdOwogICAgICAgICAgICB2YXIgdmVyc2lvbiA9IHZhbHVlOwogICAgICAgICAgICB0aGlzLnhtbERlY2wudmVyc2lvbiA9IHZlcnNpb247IC8vIFRoaXMgaXMgdGhlIHRlc3Qgc3BlY2lmaWVkIGJ5IFhNTCAxLjAgYnV0IGl0IGlzIGZpbmUgZm9yIFhNTCAxLjEuCgogICAgICAgICAgICBpZiAoIS9eMVwuWzAtOV0rJC8udGVzdCh2
ZXJzaW9uKSkgewogICAgICAgICAgICAgIHRoaXMuZmFpbCgidmVyc2lvbiBudW1iZXIgbXVzdCBtYXRjaCAvXjFcXC5bMC05XSskLy4iKTsKICAgICAgICAgICAgfSAvLyBXaGVuIGZvcmNlWE1MVmVyc2lvbiBpcyBzZXQsIHRoZSBYTUwgZGVjbGFyYXRpb24gaXMgaWdub3JlZC4KICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMub3B0LmZvcmNlWE1MVmVyc2lvbikgewogICAgICAgICAgICAgICAgdGhpcy5zZXRYTUxWZXJzaW9uKHZlcnNpb24pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAg
fQoKICAgICAgICBjYXNlICJlbmNvZGluZyI6CiAgICAgICAgICBpZiAoIS9eW0EtWmEtel1bQS1aYS16MC05Ll8tXSokLy50ZXN0KHZhbHVlKSkgewogICAgICAgICAgICB0aGlzLmZhaWwoImVuY29kaW5nIHZhbHVlIG11c3QgbWF0Y2ggXAovXltBLVphLXowLTldW0EtWmEtejAtOS5fLV0qJC8uIik7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy54bWxEZWNsRXhwZWN0cyA9IFsic3RhbmRhbG9uZSJdOwogICAgICAgICAgdGhpcy54bWxEZWNsLmVuY29kaW5nID0gdmFsdWU7CiAgICAgICAgICBicmVhazsKCiAgICAgICAg
Y2FzZSAic3RhbmRhbG9uZSI6CiAgICAgICAgICBpZiAodmFsdWUgIT09ICJ5ZXMiICYmIHZhbHVlICE9PSAibm8iKSB7CiAgICAgICAgICAgIHRoaXMuZmFpbCgic3RhbmRhbG9uZSB2YWx1ZSBtdXN0IG1hdGNoIFwieWVzXCIgb3IgXCJub1wiLiIpOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMueG1sRGVjbEV4cGVjdHMgPSBbXTsKICAgICAgICAgIHRoaXMueG1sRGVjbC5zdGFuZGFsb25lID0gdmFsdWU7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDogLy8gV2UgZG9uJ3QgbmVlZCB0byByYWlzZSBhbiBl
cnJvciBoZXJlIHNpbmNlIHdlJ3ZlIGFscmVhZHkgcmFpc2VkIG9uZQogICAgICAgIC8vIHdoZW4gY2hlY2tpbmcgd2hhdCBuYW1lIHdhcyBleHBlY3RlZC4KCiAgICAgIH0KCiAgICAgIHRoaXMubmFtZSA9ICIiOwogICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9TRVBBUkFUT1I7CiAgICB9CiAgfSwgewogICAga2V5OiAic1hNTERlY2xTZXBhcmF0b3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNYTUxEZWNsU2VwYXJhdG9yKCkgewogICAgICB2YXIgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTsgLy8gVGhlIHF1ZXN0aW9uIG1h
cmsgY2hhcmFjdGVyIGlzIG5vdCB2YWxpZCBpbnNpZGUgYW55IG9mIHRoZSBYTUwKICAgICAgLy8gZGVjbGFyYXRpb24gbmFtZS92YWx1ZSBwYWlycy4KCiAgICAgIGlmIChjID09PSBRVUVTVElPTikgewogICAgICAgIC8vIEl0IGlzIHZhbGlkIHRvIGdvIHRvIFNfWE1MX0RFQ0xfRU5ESU5HIGZyb20gdGhpcyBzdGF0ZS4KICAgICAgICB0aGlzLnN0YXRlID0gU19YTUxfREVDTF9FTkRJTkc7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoIWlzUyhjKSkgewogICAgICAgIHRoaXMuZmFpbCgid2hpdGVzcGFjZSBy
ZXF1aXJlZC4iKTsKICAgICAgICB0aGlzLnVuZ2V0KCk7CiAgICAgIH0KCiAgICAgIHRoaXMuc3RhdGUgPSBTX1hNTF9ERUNMX05BTUVfU1RBUlQ7CiAgICB9CiAgfSwgewogICAga2V5OiAic1hNTERlY2xFbmRpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNYTUxEZWNsRW5kaW5nKCkgewogICAgICB2YXIgX2E7CgogICAgICB2YXIgYyA9IHRoaXMuZ2V0Q29kZU5vcm0oKTsKCiAgICAgIGlmIChjID09PSBHUkVBVEVSKSB7CiAgICAgICAgaWYgKHRoaXMucGlUYXJnZXQgIT09ICJ4bWwiKSB7CiAgICAgICAgICB0aGlzLmZhaWwo
InByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25zIGFyZSBub3QgYWxsb3dlZCBiZWZvcmUgcm9vdC4iKTsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMubmFtZSAhPT0gInZlcnNpb24iICYmIHRoaXMueG1sRGVjbEV4cGVjdHMuaW5jbHVkZXMoInZlcnNpb24iKSkgewogICAgICAgICAgdGhpcy5mYWlsKCJYTUwgZGVjbGFyYXRpb24gbXVzdCBjb250YWluIGEgdmVyc2lvbi4iKTsKICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMKCgogICAgICAgIChfYSA9IHRoaXMueG1sZGVjbEhh
bmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRoaXMueG1sRGVjbCk7CiAgICAgICAgdGhpcy5uYW1lID0gIiI7CiAgICAgICAgdGhpcy5waVRhcmdldCA9IHRoaXMudGV4dCA9ICIiOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX1RFWFQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gV2UgZ290IGhlcmUgYmVjYXVzZSB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIHdhcyBhID8sIGJ1dCB0aGUgcXVlc3Rpb24KICAgICAgICAvLyBtYXJrIGNoYXJhY3RlciBpcyBub3QgdmFsaWQg
aW5zaWRlIGFueSBvZiB0aGUgWE1MIGRlY2xhcmF0aW9uCiAgICAgICAgLy8gbmFtZS92YWx1ZSBwYWlycy4KICAgICAgICB0aGlzLmZhaWwoIlRoZSBjaGFyYWN0ZXIgPyBpcyBkaXNhbGxvd2VkIGFueXdoZXJlIGluIFhNTCBkZWNsYXJhdGlvbnMuIik7CiAgICAgIH0KCiAgICAgIHRoaXMueG1sRGVjbFBvc3NpYmxlID0gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAic09wZW5UYWciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNPcGVuVGFnKCkgewogICAgICB2YXIgX2E7CgogICAgICB2YXIgYyA9IHRoaXMuY2FwdHVyZU5h
bWVDaGFycygpOwoKICAgICAgaWYgKGMgPT09IEVPQykgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHRhZyA9IHRoaXMudGFnID0gewogICAgICAgIG5hbWU6IHRoaXMubmFtZSwKICAgICAgICBhdHRyaWJ1dGVzOiBPYmplY3QuY3JlYXRlKG51bGwpCiAgICAgIH07CiAgICAgIHRoaXMubmFtZSA9ICIiOwoKICAgICAgaWYgKHRoaXMueG1sbnNPcHQpIHsKICAgICAgICB0aGlzLnRvcE5TID0gdGFnLm5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUg
bm8tdW51c2VkLWV4cHJlc3Npb25zCgoKICAgICAgKF9hID0gdGhpcy5vcGVuVGFnU3RhcnRIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB0YWcpOwogICAgICB0aGlzLnNhd1Jvb3QgPSB0cnVlOwoKICAgICAgaWYgKCF0aGlzLmZyYWdtZW50T3B0ICYmIHRoaXMuY2xvc2VkUm9vdCkgewogICAgICAgIHRoaXMuZmFpbCgiZG9jdW1lbnRzIG1heSBjb250YWluIG9ubHkgb25lIHJvb3QuIik7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAoYykgewogICAgICAgIGNhc2UgR1JF
QVRFUjoKICAgICAgICAgIHRoaXMub3BlblRhZygpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRk9SV0FSRF9TTEFTSDoKICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX09QRU5fVEFHX1NMQVNIOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBpZiAoIWlzUyhjKSkgewogICAgICAgICAgICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyIGluIHRhZyBuYW1lLiIpOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQjsKICAgICAgfQogICAgfQog
IH0sIHsKICAgIGtleTogInNPcGVuVGFnU2xhc2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNPcGVuVGFnU2xhc2goKSB7CiAgICAgIGlmICh0aGlzLmdldENvZGUoKSA9PT0gR1JFQVRFUikgewogICAgICAgIHRoaXMub3BlblNlbGZDbG9zaW5nVGFnKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5mYWlsKCJmb3J3YXJkLXNsYXNoIGluIG9wZW5pbmcgdGFnIG5vdCBmb2xsb3dlZCBieSA+LiIpOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQjsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNBdHRyaWIi
LAogICAgdmFsdWU6IGZ1bmN0aW9uIHNBdHRyaWIoKSB7CiAgICAgIHZhciBjID0gdGhpcy5za2lwU3BhY2VzKCk7CgogICAgICBpZiAoYyA9PT0gRU9DKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoaXNOYW1lU3RhcnRDaGFyKGMpKSB7CiAgICAgICAgdGhpcy51bmdldCgpOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9OQU1FOwogICAgICB9IGVsc2UgaWYgKGMgPT09IEdSRUFURVIpIHsKICAgICAgICB0aGlzLm9wZW5UYWcoKTsKICAgICAgfSBlbHNlIGlmIChjID09PSBGT1JXQVJEX1NMQVNI
KSB7CiAgICAgICAgdGhpcy5zdGF0ZSA9IFNfT1BFTl9UQUdfU0xBU0g7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5mYWlsKCJkaXNhbGxvd2VkIGNoYXJhY3RlciBpbiBhdHRyaWJ1dGUgbmFtZS4iKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInNBdHRyaWJOYW1lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzQXR0cmliTmFtZSgpIHsKICAgICAgdmFyIGMgPSB0aGlzLmNhcHR1cmVOYW1lQ2hhcnMoKTsKCiAgICAgIGlmIChjID09PSBFUVVBTCkgewogICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9WQUxV
RTsKICAgICAgfSBlbHNlIGlmIChpc1MoYykpIHsKICAgICAgICB0aGlzLnN0YXRlID0gU19BVFRSSUJfTkFNRV9TQVdfV0hJVEU7CiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gR1JFQVRFUikgewogICAgICAgIHRoaXMuZmFpbCgiYXR0cmlidXRlIHdpdGhvdXQgdmFsdWUuIik7CiAgICAgICAgdGhpcy5wdXNoQXR0cmliKHRoaXMubmFtZSwgdGhpcy5uYW1lKTsKICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLnRleHQgPSAiIjsKICAgICAgICB0aGlzLm9wZW5UYWcoKTsKICAgICAgfSBlbHNlIGlmIChjICE9PSBFT0MpIHsKICAgICAg
ICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyIGluIGF0dHJpYnV0ZSBuYW1lLiIpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic0F0dHJpYk5hbWVTYXdXaGl0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0F0dHJpYk5hbWVTYXdXaGl0ZSgpIHsKICAgICAgdmFyIGMgPSB0aGlzLnNraXBTcGFjZXMoKTsKCiAgICAgIHN3aXRjaCAoYykgewogICAgICAgIGNhc2UgRU9DOgogICAgICAgICAgcmV0dXJuOwoKICAgICAgICBjYXNlIEVRVUFMOgogICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQVRUUklCX1ZBTFVF
OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aGlzLmZhaWwoImF0dHJpYnV0ZSB3aXRob3V0IHZhbHVlLiIpOyAvLyBTaG91bGQgd2UgZG8gdGhpcz8/PwogICAgICAgICAgLy8gdGhpcy50YWcuYXR0cmlidXRlc1t0aGlzLm5hbWVdID0gIiI7CgogICAgICAgICAgdGhpcy50ZXh0ID0gIiI7CiAgICAgICAgICB0aGlzLm5hbWUgPSAiIjsKCiAgICAgICAgICBpZiAoYyA9PT0gR1JFQVRFUikgewogICAgICAgICAgICB0aGlzLm9wZW5UYWcoKTsKICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYW1l
U3RhcnRDaGFyKGMpKSB7CiAgICAgICAgICAgIHRoaXMudW5nZXQoKTsKICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfQVRUUklCX05BTUU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyIGluIGF0dHJpYnV0ZSBuYW1lLiIpOwogICAgICAgICAgICB0aGlzLnN0YXRlID0gU19BVFRSSUI7CiAgICAgICAgICB9CgogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic0F0dHJpYlZhbHVlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzQXR0cmliVmFsdWUoKSB7CiAg
ICAgIHZhciBjID0gdGhpcy5nZXRDb2RlTm9ybSgpOwoKICAgICAgaWYgKGlzUXVvdGUoYykpIHsKICAgICAgICB0aGlzLnEgPSBjOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9WQUxVRV9RVU9URUQ7CiAgICAgIH0gZWxzZSBpZiAoIWlzUyhjKSkgewogICAgICAgIHRoaXMuZmFpbCgidW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiIpOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9WQUxVRV9VTlFVT1RFRDsKICAgICAgICB0aGlzLnVuZ2V0KCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzQXR0
cmliVmFsdWVRdW90ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNBdHRyaWJWYWx1ZVF1b3RlZCgpIHsKICAgICAgLy8gV2UgZGVsaWJlcmF0ZWx5IGRvIG5vdCB1c2UgY2FwdHVyZVRvIGhlcmUuIFRoZSBzcGVjaWFsaXplZCBjb2RlIHdlIHVzZQogICAgICAvLyBoZXJlIGlzIGZhc3RlciB0aGFuIHVzaW5nIGNhcHR1cmVUby4KICAgICAgdmFyIHEgPSB0aGlzLnEsCiAgICAgICAgICBjaHVuayA9IHRoaXMuY2h1bms7CiAgICAgIHZhciBzdGFydCA9IHRoaXMuaTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0
YW50LWNvbmRpdGlvbgoKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0Q29kZSgpKSB7CiAgICAgICAgICBjYXNlIHE6CiAgICAgICAgICAgIHRoaXMucHVzaEF0dHJpYih0aGlzLm5hbWUsIHRoaXMudGV4dCArIGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKSk7CiAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMudGV4dCA9ICIiOwogICAgICAgICAgICB0aGlzLnEgPSBudWxsOwogICAgICAgICAgICB0aGlzLnN0YXRlID0gU19BVFRSSUJfVkFMVUVfQ0xPU0VEOwogICAgICAgICAgICBy
ZXR1cm47CgogICAgICAgICAgY2FzZSBBTVA6CiAgICAgICAgICAgIHRoaXMudGV4dCArPSBjaHVuay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSk7CiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0VOVElUWTsKICAgICAgICAgICAgdGhpcy5lbnRpdHlSZXR1cm5TdGF0ZSA9IFNfQVRUUklCX1ZBTFVFX1FVT1RFRDsKICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgIGNhc2UgTkw6CiAgICAgICAgICBjYXNlIE5MX0xJS0U6CiAgICAgICAgICBjYXNlIFRBQjoKICAgICAgICAgICAgdGhpcy50ZXh0ICs9ICIiLmNvbmNhdChj
aHVuay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSksICIgIik7CiAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5pOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIExFU1M6CiAgICAgICAgICAgIHRoaXMudGV4dCArPSBjaHVuay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSk7CiAgICAgICAgICAgIHRoaXMuZmFpbCgiZGlzYWxsb3dlZCBjaGFyYWN0ZXIuIik7CiAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgICBjYXNlIEVPQzoKICAgICAgICAgICAgdGhpcy50ZXh0ICs9IGNodW5rLnNsaWNlKHN0YXJ0KTsKICAg
ICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic0F0dHJpYlZhbHVlQ2xvc2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzQXR0cmliVmFsdWVDbG9zZWQoKSB7CiAgICAgIHZhciBjID0gdGhpcy5nZXRDb2RlTm9ybSgpOwoKICAgICAgaWYgKGlzUyhjKSkgewogICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQjsKICAgICAgfSBlbHNlIGlmIChjID09PSBHUkVBVEVSKSB7CiAgICAgICAgdGhpcy5vcGVuVGFnKCk7CiAgICAgIH0gZWxzZSBp
ZiAoYyA9PT0gRk9SV0FSRF9TTEFTSCkgewogICAgICAgIHRoaXMuc3RhdGUgPSBTX09QRU5fVEFHX1NMQVNIOwogICAgICB9IGVsc2UgaWYgKGlzTmFtZVN0YXJ0Q2hhcihjKSkgewogICAgICAgIHRoaXMuZmFpbCgibm8gd2hpdGVzcGFjZSBiZXR3ZWVuIGF0dHJpYnV0ZXMuIik7CiAgICAgICAgdGhpcy51bmdldCgpOwogICAgICAgIHRoaXMuc3RhdGUgPSBTX0FUVFJJQl9OQU1FOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZmFpbCgiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gYXR0cmlidXRlIG5hbWUuIik7CiAgICAg
IH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzQXR0cmliVmFsdWVVbnF1b3RlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0F0dHJpYlZhbHVlVW5xdW90ZWQoKSB7CiAgICAgIC8vIFdlIGRvbid0IGRvIGFueXRoaW5nIHJlZ2FyZGluZyBFT0wgb3Igc3BhY2UgaGFuZGxpbmcgZm9yIHVucXVvdGVkCiAgICAgIC8vIGF0dHJpYnV0ZXMuIFdlIGFscmVhZHkgaGF2ZSBmYWlsZWQgYnkgdGhlIHRpbWUgd2UgZ2V0IGhlcmUsIGFuZCB0aGUKICAgICAgLy8gY29udHJhY3QgdGhhdCBzYXhlcyB1cGhvbGRzIHN0YXRlcyB0aGF0IHVwb24g
ZmFpbHVyZSwgaXQgaXMgbm90IHNhZmUgdG8KICAgICAgLy8gcmVseSBvbiB0aGUgZGF0YSBwYXNzZWQgdG8gZXZlbnQgaGFuZGxlcnMgKG90aGVyIHRoYW4KICAgICAgLy8gYGBvbmVycm9yYGApLiBQYXNzaW5nICJiYWQiIGRhdGEgaXMgbm90IGEgcHJvYmxlbS4KICAgICAgdmFyIGMgPSB0aGlzLmNhcHR1cmVUbyhBVFRSSUJfVkFMVUVfVU5RVU9URURfVEVSTUlOQVRPUik7CgogICAgICBzd2l0Y2ggKGMpIHsKICAgICAgICBjYXNlIEFNUDoKICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0VOVElUWTsKICAgICAgICAgIHRoaXMu
ZW50aXR5UmV0dXJuU3RhdGUgPSBTX0FUVFJJQl9WQUxVRV9VTlFVT1RFRDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIExFU1M6CiAgICAgICAgICB0aGlzLmZhaWwoImRpc2FsbG93ZWQgY2hhcmFjdGVyLiIpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgRU9DOgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBpZiAodGhpcy50ZXh0LmluY2x1ZGVzKCJdXT4iKSkgewogICAgICAgICAgICB0aGlzLmZhaWwoInRoZSBzdHJpbmcgXCJdXT5cIiBpcyBkaXNhbGxvd2VkIGlu
IGNoYXIgZGF0YS4iKTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnB1c2hBdHRyaWIodGhpcy5uYW1lLCB0aGlzLnRleHQpOwogICAgICAgICAgdGhpcy5uYW1lID0gdGhpcy50ZXh0ID0gIiI7CgogICAgICAgICAgaWYgKGMgPT09IEdSRUFURVIpIHsKICAgICAgICAgICAgdGhpcy5vcGVuVGFnKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnN0YXRlID0gU19BVFRSSUI7CiAgICAgICAgICB9CgogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic0Nsb3NlVGFnIiwKICAgIHZhbHVlOiBmdW5j
dGlvbiBzQ2xvc2VUYWcoKSB7CiAgICAgIHZhciBjID0gdGhpcy5jYXB0dXJlTmFtZUNoYXJzKCk7CgogICAgICBpZiAoYyA9PT0gR1JFQVRFUikgewogICAgICAgIHRoaXMuY2xvc2VUYWcoKTsKICAgICAgfSBlbHNlIGlmIChpc1MoYykpIHsKICAgICAgICB0aGlzLnN0YXRlID0gU19DTE9TRV9UQUdfU0FXX1dISVRFOwogICAgICB9IGVsc2UgaWYgKGMgIT09IEVPQykgewogICAgICAgIHRoaXMuZmFpbCgiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gY2xvc2luZyB0YWcuIik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6
ICJzQ2xvc2VUYWdTYXdXaGl0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc0Nsb3NlVGFnU2F3V2hpdGUoKSB7CiAgICAgIHN3aXRjaCAodGhpcy5za2lwU3BhY2VzKCkpIHsKICAgICAgICBjYXNlIEdSRUFURVI6CiAgICAgICAgICB0aGlzLmNsb3NlVGFnKCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBFT0M6CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRoaXMuZmFpbCgiZGlzYWxsb3dlZCBjaGFyYWN0ZXIgaW4gY2xvc2luZyB0YWcuIik7CiAgICAgIH0KICAgIH0gLy8gRU5E
IE9GIFNUQVRFIEVOR0lORSBNRVRIT0RTCgogIH0sIHsKICAgIGtleTogImhhbmRsZVRleHRJblJvb3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVRleHRJblJvb3QoKSB7CiAgICAgIC8vIFRoaXMgaXMgZXNzZW50aWFsbHkgYSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGNhcHR1cmVUbyB3aGljaCBpcyBvcHRpbWl6ZWQKICAgICAgLy8gZm9yIHBlcmZvcm1pbmcgdGhlIF1dPiBjaGVjay4gQSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgY29kZSwgY2hlY2tlZAogICAgICAvLyBgYHRoaXMudGV4dGBgIGZvciB0aGUgcHJl
c2VuY2Ugb2YgXV0+LiBJdCBzaW1wbGlmaWVkIHRoZSBjb2RlIGJ1dCB3YXMKICAgICAgLy8gdmVyeSBjb3N0bHkgd2hlbiBjaGFyYWN0ZXIgZGF0YSBjb250YWluZWQgYSBsb3Qgb2YgZW50aXRpZXMgdG8gYmUgcGFyc2VkLgogICAgICAvLwogICAgICAvLyBTaW5jZSB3ZSBhcmUgdXNpbmcgYSBzcGVjaWFsaXplZCBsb29wLCB3ZSBhbHNvIGtlZXAgdHJhY2sgb2YgdGhlIHByZXNlbmNlCiAgICAgIC8vIG9mIF1dPiBpbiB0ZXh0IGRhdGEuIFRoZSBzZXF1ZW5jZSBdXT4gaXMgZm9yYmlkZGVuIHRvIGFwcGVhciBhcy1pcy4KICAg
ICAgLy8KICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pLAogICAgICAgICAgZm9yYmlkZGVuU3RhdGUgPSB0aGlzLmZvcmJpZGRlblN0YXRlOwogICAgICB2YXIgY2h1bmsgPSB0aGlzLmNodW5rLAogICAgICAgICAgaGFuZGxlciA9IHRoaXMudGV4dEhhbmRsZXI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4CgogICAgICBzY2FuTG9vcDogLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvbgogICAgICB3aGlsZSAodHJ1ZSkgewogICAg
ICAgIHN3aXRjaCAodGhpcy5nZXRDb2RlKCkpIHsKICAgICAgICAgIGNhc2UgTEVTUzoKICAgICAgICAgICAgewogICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX09QRU5fV0FLQTsKCiAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdmFyIHRleHQgPSB0aGlzLnRleHQ7CiAgICAgICAgICAgICAgICB2YXIgc2xpY2UgPSBjaHVuay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSk7CgogICAgICAgICAgICAgICAgaWYgKHRleHQubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICAg
ICAgICAgIGhhbmRsZXIodGV4dCArIHNsaWNlKTsKICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gIiI7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNsaWNlLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgICAgICAgICBoYW5kbGVyKHNsaWNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGZvcmJpZGRlblN0YXRlID0gRk9SQklEREVOX1NUQVJUOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbGFiZWxzCgogICAgICAgICAgICAgIGJyZWFrIHNjYW5Mb29wOwog
ICAgICAgICAgICB9CgogICAgICAgICAgY2FzZSBBTVA6CiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTX0VOVElUWTsKICAgICAgICAgICAgdGhpcy5lbnRpdHlSZXR1cm5TdGF0ZSA9IFNfVEVYVDsKCiAgICAgICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJldkkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3JiaWRkZW5TdGF0ZSA9IEZPUkJJRERFTl9TVEFSVDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1s
aW5lIG5vLWxhYmVscwoKICAgICAgICAgICAgYnJlYWsgc2Nhbkxvb3A7CgogICAgICAgICAgY2FzZSBDTE9TRV9CUkFDS0VUOgogICAgICAgICAgICBzd2l0Y2ggKGZvcmJpZGRlblN0YXRlKSB7CiAgICAgICAgICAgICAgY2FzZSBGT1JCSURERU5fU1RBUlQ6CiAgICAgICAgICAgICAgICBmb3JiaWRkZW5TdGF0ZSA9IEZPUkJJRERFTl9CUkFDS0VUOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgRk9SQklEREVOX0JSQUNLRVQ6CiAgICAgICAgICAgICAgICBmb3JiaWRkZW5TdGF0ZSA9IEZPUkJJ
RERFTl9CUkFDS0VUX0JSQUNLRVQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBGT1JCSURERU5fQlJBQ0tFVF9CUkFDS0VUOgogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImltcG9zc2libGUgc3RhdGUiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBHUkVBVEVSOgogICAgICAgICAgICBpZiAoZm9yYmlkZGVuU3RhdGUgPT09IEZPUkJJRERFTl9CUkFD
S0VUX0JSQUNLRVQpIHsKICAgICAgICAgICAgICB0aGlzLmZhaWwoInRoZSBzdHJpbmcgXCJdXT5cIiBpcyBkaXNhbGxvd2VkIGluIGNoYXIgZGF0YS4iKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yYmlkZGVuU3RhdGUgPSBGT1JCSURERU5fU1RBUlQ7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgTkxfTElLRToKICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHRoaXMudGV4dCArPSAiIi5jb25jYXQoY2h1bmsuc2xpY2Uoc3RhcnQsIHRoaXMucHJl
dkkpLCAiXG4iKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3RhcnQgPSB0aGlzLmk7CiAgICAgICAgICAgIGZvcmJpZGRlblN0YXRlID0gRk9SQklEREVOX1NUQVJUOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIEVPQzoKICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHRoaXMudGV4dCArPSBjaHVuay5zbGljZShzdGFydCk7CiAgICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVscwoKCiAgICAgICAgICAgIGJyZWFr
IHNjYW5Mb29wOwoKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIGZvcmJpZGRlblN0YXRlID0gRk9SQklEREVOX1NUQVJUOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5mb3JiaWRkZW5TdGF0ZSA9IGZvcmJpZGRlblN0YXRlOwogICAgfQogIH0sIHsKICAgIGtleTogImhhbmRsZVRleHRPdXRzaWRlUm9vdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlVGV4dE91dHNpZGVSb290KCkgewogICAgICAvLyBUaGlzIGlzIGVzc2VudGlhbGx5IGEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBjYXB0dXJlVG8gd2hp
Y2ggaXMgb3B0aW1pemVkCiAgICAgIC8vIGZvciBhIHNwZWNpYWxpemVkIHRhc2suIFdlIGtlZXAgdHJhY2sgb2YgdGhlIHByZXNlbmNlIG9mIG5vbi1zcGFjZQogICAgICAvLyBjaGFyYWN0ZXJzIGluIHRoZSB0ZXh0IHNpbmNlIHRoZXNlIGFyZSBlcnJvcnMgd2hlbiBhcHBlYXJpbmcgb3V0c2lkZSB0aGUKICAgICAgLy8gZG9jdW1lbnQgcm9vdCBlbGVtZW50LgogICAgICB2YXIgc3RhcnQgPSB0aGlzLmk7CiAgICAgIHZhciBjaHVuayA9IHRoaXMuY2h1bmssCiAgICAgICAgICBoYW5kbGVyID0gdGhpcy50ZXh0SGFuZGxlcjsK
ICAgICAgdmFyIG5vblNwYWNlID0gZmFsc2U7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4CgogICAgICBvdXRSb290TG9vcDogLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvbgogICAgICB3aGlsZSAodHJ1ZSkgewogICAgICAgIHZhciBjb2RlID0gdGhpcy5nZXRDb2RlKCk7CgogICAgICAgIHN3aXRjaCAoY29kZSkgewogICAgICAgICAgY2FzZSBMRVNTOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9
IFNfT1BFTl9XQUtBOwoKICAgICAgICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMudGV4dDsKICAgICAgICAgICAgICAgIHZhciBzbGljZSA9IGNodW5rLnNsaWNlKHN0YXJ0LCB0aGlzLnByZXZJKTsKCiAgICAgICAgICAgICAgICBpZiAodGV4dC5sZW5ndGggIT09IDApIHsKICAgICAgICAgICAgICAgICAgaGFuZGxlcih0ZXh0ICsgc2xpY2UpOwogICAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSAiIjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAo
c2xpY2UubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICAgICAgICAgIGhhbmRsZXIoc2xpY2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVscwoKCiAgICAgICAgICAgICAgYnJlYWsgb3V0Um9vdExvb3A7CiAgICAgICAgICAgIH0KCiAgICAgICAgICBjYXNlIEFNUDoKICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNfRU5USVRZOwogICAgICAgICAgICB0aGlzLmVudGl0eVJldHVyblN0YXRlID0gU19URVhUOwoKICAgICAgICAgICAgaWYgKGhhbmRs
ZXIgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHRoaXMudGV4dCArPSBjaHVuay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5vblNwYWNlID0gdHJ1ZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVscwoKICAgICAgICAgICAgYnJlYWsgb3V0Um9vdExvb3A7CgogICAgICAgICAgY2FzZSBOTF9MSUtFOgogICAgICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgdGhpcy50ZXh0ICs9ICIiLmNvbmNhdChjaHVu
ay5zbGljZShzdGFydCwgdGhpcy5wcmV2SSksICJcbiIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzdGFydCA9IHRoaXMuaTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBFT0M6CiAgICAgICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICB0aGlzLnRleHQgKz0gY2h1bmsuc2xpY2Uoc3RhcnQpOwogICAgICAgICAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHMKCgogICAgICAgICAgICBicmVhayBvdXRSb290TG9vcDsKCiAgICAgICAg
ICBkZWZhdWx0OgogICAgICAgICAgICBpZiAoIWlzUyhjb2RlKSkgewogICAgICAgICAgICAgIG5vblNwYWNlID0gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmICghbm9uU3BhY2UpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy8gV2UgdXNlIHRoZSByZXBvcnRlZFRleHRCZWZvcmVSb290IGFuZCByZXBvcnRlZFRleHRBZnRlclJvb3QgZmxhZ3MKICAgICAgLy8gdG8gYXZvaWQgcmVwb3J0aW5nIGVycm9ycyBmb3IgZXZlcnkgc2luZ2xlIGNoYXJhY3RlciB0aGF0IGlzIG91dCBvZgog
ICAgICAvLyBwbGFjZS4KCgogICAgICBpZiAoIXRoaXMuc2F3Um9vdCAmJiAhdGhpcy5yZXBvcnRlZFRleHRCZWZvcmVSb290KSB7CiAgICAgICAgdGhpcy5mYWlsKCJ0ZXh0IGRhdGEgb3V0c2lkZSBvZiByb290IG5vZGUuIik7CiAgICAgICAgdGhpcy5yZXBvcnRlZFRleHRCZWZvcmVSb290ID0gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuY2xvc2VkUm9vdCAmJiAhdGhpcy5yZXBvcnRlZFRleHRBZnRlclJvb3QpIHsKICAgICAgICB0aGlzLmZhaWwoInRleHQgZGF0YSBvdXRzaWRlIG9mIHJvb3Qgbm9kZS4iKTsKICAg
ICAgICB0aGlzLnJlcG9ydGVkVGV4dEFmdGVyUm9vdCA9IHRydWU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwdXNoQXR0cmliTlMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2hBdHRyaWJOUyhuYW1lLCB2YWx1ZSkgewogICAgICB2YXIgX2E7CgogICAgICB2YXIgX3RoaXMkcW5hbWUgPSB0aGlzLnFuYW1lKG5hbWUpLAogICAgICAgICAgcHJlZml4ID0gX3RoaXMkcW5hbWUucHJlZml4LAogICAgICAgICAgbG9jYWwgPSBfdGhpcyRxbmFtZS5sb2NhbDsKCiAgICAgIHZhciBhdHRyID0gewogICAgICAgIG5hbWU6
IG5hbWUsCiAgICAgICAgcHJlZml4OiBwcmVmaXgsCiAgICAgICAgbG9jYWw6IGxvY2FsLAogICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICB9OwogICAgICB0aGlzLmF0dHJpYkxpc3QucHVzaChhdHRyKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucwoKICAgICAgKF9hID0gdGhpcy5hdHRyaWJ1dGVIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBhdHRyKTsKCiAgICAgIGlmIChwcmVmaXggPT09ICJ4bWxucyIpIHsKICAgICAg
ICB2YXIgdHJpbW1lZCA9IHZhbHVlLnRyaW0oKTsKCiAgICAgICAgaWYgKHRoaXMuY3VycmVudFhNTFZlcnNpb24gPT09ICIxLjAiICYmIHRyaW1tZWQgPT09ICIiKSB7CiAgICAgICAgICB0aGlzLmZhaWwoImludmFsaWQgYXR0ZW1wdCB0byB1bmRlZmluZSBwcmVmaXggaW4gWE1MIDEuMCIpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy50b3BOU1tsb2NhbF0gPSB0cmltbWVkOwogICAgICAgIG5zUGFpckNoZWNrKHRoaXMsIGxvY2FsLCB0cmltbWVkKTsKICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAieG1sbnMiKSB7CiAgICAg
ICAgdmFyIF90cmltbWVkID0gdmFsdWUudHJpbSgpOwoKICAgICAgICB0aGlzLnRvcE5TWyIiXSA9IF90cmltbWVkOwogICAgICAgIG5zUGFpckNoZWNrKHRoaXMsICIiLCBfdHJpbW1lZCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwdXNoQXR0cmliUGxhaW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2hBdHRyaWJQbGFpbihuYW1lLCB2YWx1ZSkgewogICAgICB2YXIgX2E7CgogICAgICB2YXIgYXR0ciA9IHsKICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICB9OwogICAgICB0
aGlzLmF0dHJpYkxpc3QucHVzaChhdHRyKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucwoKICAgICAgKF9hID0gdGhpcy5hdHRyaWJ1dGVIYW5kbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBhdHRyKTsKICAgIH0KICAgIC8qKgogICAgICogRW5kIHBhcnNpbmcuIFRoaXMgcGVyZm9ybXMgZmluYWwgd2VsbC1mb3JtZWRuZXNzIGNoZWNrcyBhbmQgcmVzZXRzIHRoZQogICAgICogcGFyc2VyIHRvIGEgY2xlYW4gc3RhdGUuCiAgICAg
KgogICAgICogQHJldHVybnMgdGhpcwogICAgICovCgogIH0sIHsKICAgIGtleTogImVuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5kKCkgewogICAgICB2YXIgX2EsIF9iOwoKICAgICAgaWYgKCF0aGlzLnNhd1Jvb3QpIHsKICAgICAgICB0aGlzLmZhaWwoImRvY3VtZW50IG11c3QgY29udGFpbiBhIHJvb3QgZWxlbWVudC4iKTsKICAgICAgfQoKICAgICAgdmFyIHRhZ3MgPSB0aGlzLnRhZ3M7CgogICAgICB3aGlsZSAodGFncy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIHRhZyA9IHRhZ3MucG9wKCk7CiAgICAgICAgdGhp
cy5mYWlsKCJ1bmNsb3NlZCB0YWc6ICIuY29uY2F0KHRhZy5uYW1lKSk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTX0JFR0lOICYmIHRoaXMuc3RhdGUgIT09IFNfVEVYVCkgewogICAgICAgIHRoaXMuZmFpbCgidW5leHBlY3RlZCBlbmQuIik7CiAgICAgIH0KCiAgICAgIHZhciB0ZXh0ID0gdGhpcy50ZXh0OwoKICAgICAgaWYgKHRleHQubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucwogICAgICAgIChfYSA9IHRoaXMudGV4
dEhhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRleHQpOwogICAgICAgIHRoaXMudGV4dCA9ICIiOwogICAgICB9CgogICAgICB0aGlzLl9jbG9zZWQgPSB0cnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zCgogICAgICAoX2IgPSB0aGlzLmVuZEhhbmRsZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKHRoaXMpOwoKICAgICAgdGhpcy5faW5pdCgpOwoKICAgICAgcmV0dXJuIHRoaXM7
CiAgICB9CiAgICAvKioKICAgICAqIFJlc29sdmUgYSBuYW1lc3BhY2UgcHJlZml4LgogICAgICoKICAgICAqIEBwYXJhbSBwcmVmaXggVGhlIHByZWZpeCB0byByZXNvbHZlLgogICAgICoKICAgICAqIEByZXR1cm5zIFRoZSBuYW1lc3BhY2UgVVJJIG9yIGBgdW5kZWZpbmVkYGAgaWYgdGhlIHByZWZpeCBpcyBub3QgZGVmaW5lZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZXNvbHZlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKHByZWZpeCkgewogICAgICB2YXIgX2EsIF9iOwoKICAgICAgdmFyIHVyaSA9IHRo
aXMudG9wTlNbcHJlZml4XTsKCiAgICAgIGlmICh1cmkgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiB1cmk7CiAgICAgIH0KCiAgICAgIHZhciB0YWdzID0gdGhpcy50YWdzOwoKICAgICAgZm9yICh2YXIgaW5kZXggPSB0YWdzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHsKICAgICAgICB1cmkgPSB0YWdzW2luZGV4XS5uc1twcmVmaXhdOwoKICAgICAgICBpZiAodXJpICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJldHVybiB1cmk7CiAgICAgICAgfQogICAgICB9CgogICAgICB1cmkgPSB0aGlz
Lm5zW3ByZWZpeF07CgogICAgICBpZiAodXJpICE9PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gdXJpOwogICAgICB9CgogICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5vcHQpLnJlc29sdmVQcmVmaXgpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBwcmVmaXgpOwogICAgfQogICAgLyoqCiAgICAgKiBQYXJzZSBhIHFuYW1lIGludG8gaXRzIHByZWZpeCBhbmQgbG9jYWwgbmFtZSBwYXJ0cy4KICAgICAqCiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSB0byBwYXJzZQog
ICAgICoKICAgICAqIEByZXR1cm5zCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicW5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHFuYW1lKG5hbWUpIHsKICAgICAgLy8gVGhpcyBpcyBmYXN0ZXIgdGhhbiB1c2luZyBuYW1lLnNwbGl0KCI6IikuCiAgICAgIHZhciBjb2xvbiA9IG5hbWUuaW5kZXhPZigiOiIpOwoKICAgICAgaWYgKGNvbG9uID09PSAtMSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBwcmVmaXg6ICIiLAogICAgICAgICAgbG9jYWw6IG5hbWUKICAgICAgICB9OwogICAgICB9CgogICAgICB2YXIgbG9j
YWwgPSBuYW1lLnNsaWNlKGNvbG9uICsgMSk7CiAgICAgIHZhciBwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGNvbG9uKTsKCiAgICAgIGlmIChwcmVmaXggPT09ICIiIHx8IGxvY2FsID09PSAiIiB8fCBsb2NhbC5pbmNsdWRlcygiOiIpKSB7CiAgICAgICAgdGhpcy5mYWlsKCJtYWxmb3JtZWQgbmFtZTogIi5jb25jYXQobmFtZSwgIi4iKSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgcHJlZml4OiBwcmVmaXgsCiAgICAgICAgbG9jYWw6IGxvY2FsCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvY2Vz
c0F0dHJpYnNOUyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc0F0dHJpYnNOUygpIHsKICAgICAgdmFyIF9hOwoKICAgICAgdmFyIGF0dHJpYkxpc3QgPSB0aGlzLmF0dHJpYkxpc3Q7CiAgICAgIHZhciB0YWcgPSB0aGlzLnRhZzsKICAgICAgewogICAgICAgIC8vIGFkZCBuYW1lc3BhY2UgaW5mbyB0byB0YWcKICAgICAgICB2YXIgX3RoaXMkcW5hbWUyID0gdGhpcy5xbmFtZSh0YWcubmFtZSksCiAgICAgICAgICAgIHByZWZpeCA9IF90aGlzJHFuYW1lMi5wcmVmaXgsCiAgICAgICAgICAgIGxvY2FsID0gX3RoaXMkcW5h
bWUyLmxvY2FsOwoKICAgICAgICB0YWcucHJlZml4ID0gcHJlZml4OwogICAgICAgIHRhZy5sb2NhbCA9IGxvY2FsOwogICAgICAgIHZhciB1cmkgPSB0YWcudXJpID0gKF9hID0gdGhpcy5yZXNvbHZlKHByZWZpeCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICIiOwoKICAgICAgICBpZiAocHJlZml4ICE9PSAiIikgewogICAgICAgICAgaWYgKHByZWZpeCA9PT0gInhtbG5zIikgewogICAgICAgICAgICB0aGlzLmZhaWwoInRhZ3MgbWF5IG5vdCBoYXZlIFwieG1sbnNcIiBhcyBwcmVmaXguIik7CiAgICAgICAg
ICB9CgogICAgICAgICAgaWYgKHVyaSA9PT0gIiIpIHsKICAgICAgICAgICAgdGhpcy5mYWlsKCJ1bmJvdW5kIG5hbWVzcGFjZSBwcmVmaXg6ICIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHByZWZpeCksICIuIikpOwogICAgICAgICAgICB0YWcudXJpID0gcHJlZml4OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGF0dHJpYkxpc3QubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYXR0cmlidXRlcyA9IHRhZy5hdHRyaWJ1dGVzOwogICAgICB2YXIgc2VlbiA9
IG5ldyBTZXQoKTsgLy8gTm90ZTogZG8gbm90IGFwcGx5IGRlZmF1bHQgbnMgdG8gYXR0cmlidXRlczoKICAgICAgLy8gICBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLW5hbWVzLyNkZWZhdWx0aW5nCgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYXR0cmliTGlzdCksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBhdHRyID0gX3N0ZXAu
dmFsdWU7CiAgICAgICAgICB2YXIgbmFtZSA9IGF0dHIubmFtZSwKICAgICAgICAgICAgICBfcHJlZml4ID0gYXR0ci5wcmVmaXgsCiAgICAgICAgICAgICAgX2xvY2FsID0gYXR0ci5sb2NhbDsKCiAgICAgICAgICB2YXIgX3VyaSA9IHZvaWQgMDsKCiAgICAgICAgICB2YXIgZXFuYW1lID0gdm9pZCAwOwoKICAgICAgICAgIGlmIChfcHJlZml4ID09PSAiIikgewogICAgICAgICAgICBfdXJpID0gbmFtZSA9PT0gInhtbG5zIiA/IFhNTE5TX05BTUVTUEFDRSA6ICIiOwogICAgICAgICAgICBlcW5hbWUgPSBuYW1lOwogICAgICAg
ICAgfSBlbHNlIHsKICAgICAgICAgICAgX3VyaSA9IHRoaXMucmVzb2x2ZShfcHJlZml4KTsgLy8gaWYgdGhlcmUncyBhbnkgYXR0cmlidXRlcyB3aXRoIGFuIHVuZGVmaW5lZCBuYW1lc3BhY2UsCiAgICAgICAgICAgIC8vIHRoZW4gZmFpbCBvbiB0aGVtIG5vdy4KCiAgICAgICAgICAgIGlmIChfdXJpID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICB0aGlzLmZhaWwoInVuYm91bmQgbmFtZXNwYWNlIHByZWZpeDogIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoX3ByZWZpeCksICIuIikpOwogICAgICAgICAgICAgIF91cmkg
PSBfcHJlZml4OwogICAgICAgICAgICB9CgogICAgICAgICAgICBlcW5hbWUgPSAieyIuY29uY2F0KF91cmksICJ9IikuY29uY2F0KF9sb2NhbCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHNlZW4uaGFzKGVxbmFtZSkpIHsKICAgICAgICAgICAgdGhpcy5mYWlsKCJkdXBsaWNhdGUgYXR0cmlidXRlOiAiLmNvbmNhdChlcW5hbWUsICIuIikpOwogICAgICAgICAgfQoKICAgICAgICAgIHNlZW4uYWRkKGVxbmFtZSk7CiAgICAgICAgICBhdHRyLnVyaSA9IF91cmk7CiAgICAgICAgICBhdHRyaWJ1dGVzW25hbWVdID0gYXR0
cjsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgdGhpcy5hdHRyaWJMaXN0ID0gW107CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvY2Vzc0F0dHJpYnNQbGFpbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc0F0dHJpYnNQbGFpbigpIHsKICAgICAgdmFyIGF0dHJpYkxpc3QgPSB0aGlzLmF0dHJpYkxpc3Q7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVm
ZXItZGVzdHJ1Y3R1cmluZwoKICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLnRhZy5hdHRyaWJ1dGVzOwoKICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihhdHRyaWJMaXN0KSwKICAgICAgICAgIF9zdGVwMjsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBfc3RlcDIkdmFsdWUgPSBfc3RlcDIudmFsdWUsCiAgICAgICAgICAgICAgbmFtZSA9IF9zdGVwMiR2YWx1ZS5u
YW1lLAogICAgICAgICAgICAgIHZhbHVlID0gX3N0ZXAyJHZhbHVlLnZhbHVlOwoKICAgICAgICAgIGlmIChhdHRyaWJ1dGVzW25hbWVdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhpcy5mYWlsKCJkdXBsaWNhdGUgYXR0cmlidXRlOiAiLmNvbmNhdChuYW1lLCAiLiIpKTsKICAgICAgICAgIH0KCiAgICAgICAgICBhdHRyaWJ1dGVzW25hbWVdID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRl
cmF0b3IyLmYoKTsKICAgICAgfQoKICAgICAgdGhpcy5hdHRyaWJMaXN0ID0gW107CiAgICB9CiAgICAvKioKICAgICAqIEhhbmRsZSBhIGNvbXBsZXRlIG9wZW4gdGFnLiBUaGlzIHBhcnNlciBjb2RlIGNhbGxzIHRoaXMgb25jZSBpdCBoYXMgc2VlbgogICAgICogdGhlIHdob2xlIHRhZy4gVGhpcyBtZXRob2QgY2hlY2tzIGZvciB3ZWxsLWZvcm1lbmVzcyBhbmQgdGhlbiBlbWl0cwogICAgICogYGBvbm9wZW50YWdgYC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJvcGVuVGFnIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVu
VGFnKCkgewogICAgICB2YXIgX2E7CgogICAgICB0aGlzLnByb2Nlc3NBdHRyaWJzKCk7CiAgICAgIHZhciB0YWdzID0gdGhpcy50YWdzOwogICAgICB2YXIgdGFnID0gdGhpcy50YWc7CiAgICAgIHRhZy5pc1NlbGZDbG9zaW5nID0gZmFsc2U7IC8vIFRoZXJlIGNhbm5vdCBiZSBhbnkgcGVuZGluZyB0ZXh0IGhlcmUgZHVlIHRvIHRoZSBvbm9wZW50YWdzdGFydCB0aGF0IHdhcwogICAgICAvLyBuZWNlc3NhcmlseSBlbWl0dGVkIGJlZm9yZSB3ZSBnZXQgaGVyZS4gU28gd2UgZG8gbm90IGNoZWNrIHRleHQuCiAgICAgIC8vIGVz
bGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMKCiAgICAgIChfYSA9IHRoaXMub3BlblRhZ0hhbmRsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHRhZyk7CiAgICAgIHRhZ3MucHVzaCh0YWcpOwogICAgICB0aGlzLnN0YXRlID0gU19URVhUOwogICAgICB0aGlzLm5hbWUgPSAiIjsKICAgIH0KICAgIC8qKgogICAgICogSGFuZGxlIGEgY29tcGxldGUgc2VsZi1jbG9zaW5nIHRhZy4gVGhpcyBwYXJzZXIgY29kZSBjYWxscyB0aGlzIG9uY2UgaXQg
aGFzCiAgICAgKiBzZWVuIHRoZSB3aG9sZSB0YWcuIFRoaXMgbWV0aG9kIGNoZWNrcyBmb3Igd2VsbC1mb3JtZW5lc3MgYW5kIHRoZW4gZW1pdHMKICAgICAqIGBgb25vcGVudGFnYGAgYW5kIGBgb25jbG9zZXRhZ2BgLgogICAgICovCgogIH0sIHsKICAgIGtleTogIm9wZW5TZWxmQ2xvc2luZ1RhZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlblNlbGZDbG9zaW5nVGFnKCkgewogICAgICB2YXIgX2EsIF9iLCBfYzsKCiAgICAgIHRoaXMucHJvY2Vzc0F0dHJpYnMoKTsKICAgICAgdmFyIHRhZ3MgPSB0aGlzLnRhZ3M7CiAgICAg
IHZhciB0YWcgPSB0aGlzLnRhZzsKICAgICAgdGFnLmlzU2VsZkNsb3NpbmcgPSB0cnVlOyAvLyBUaGVyZSBjYW5ub3QgYmUgYW55IHBlbmRpbmcgdGV4dCBoZXJlIGR1ZSB0byB0aGUgb25vcGVudGFnc3RhcnQgdGhhdCB3YXMKICAgICAgLy8gbmVjZXNzYXJpbHkgZW1pdHRlZCBiZWZvcmUgd2UgZ2V0IGhlcmUuIFNvIHdlIGRvIG5vdCBjaGVjayB0ZXh0LgogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zCgogICAgICAoX2EgPSB0aGlzLm9wZW5UYWdIYW5kbGVyKSA9PT0gbnVs
bCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB0YWcpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zCgogICAgICAoX2IgPSB0aGlzLmNsb3NlVGFnSGFuZGxlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwodGhpcywgdGFnKTsKICAgICAgdmFyIHRvcCA9IHRoaXMudGFnID0gKF9jID0gdGFnc1t0YWdzLmxlbmd0aCAtIDFdKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBudWxsOwoKICAgICAgaWYgKHRv
cCA9PT0gbnVsbCkgewogICAgICAgIHRoaXMuY2xvc2VkUm9vdCA9IHRydWU7CiAgICAgIH0KCiAgICAgIHRoaXMuc3RhdGUgPSBTX1RFWFQ7CiAgICAgIHRoaXMubmFtZSA9ICIiOwogICAgfQogICAgLyoqCiAgICAgKiBIYW5kbGUgYSBjb21wbGV0ZSBjbG9zZSB0YWcuIFRoaXMgcGFyc2VyIGNvZGUgY2FsbHMgdGhpcyBvbmNlIGl0IGhhcyBzZWVuCiAgICAgKiB0aGUgd2hvbGUgdGFnLiBUaGlzIG1ldGhvZCBjaGVja3MgZm9yIHdlbGwtZm9ybWVuZXNzIGFuZCB0aGVuIGVtaXRzCiAgICAgKiBgYG9uY2xvc2V0YWdgYC4KICAg
ICAqLwoKICB9LCB7CiAgICBrZXk6ICJjbG9zZVRhZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VUYWcoKSB7CiAgICAgIHZhciB0YWdzID0gdGhpcy50YWdzLAogICAgICAgICAgbmFtZSA9IHRoaXMubmFtZTsgLy8gT3VyIHN0YXRlIGFmdGVyIHRoaXMgd2lsbCBiZSBTX1RFWFQsIG5vIG1hdHRlciB3aGF0LCBhbmQgd2UgY2FuIGNsZWFyCiAgICAgIC8vIHRhZ05hbWUgbm93LgoKICAgICAgdGhpcy5zdGF0ZSA9IFNfVEVYVDsKICAgICAgdGhpcy5uYW1lID0gIiI7CgogICAgICBpZiAobmFtZSA9PT0gIiIpIHsKICAgICAg
ICB0aGlzLmZhaWwoIndlaXJkIGVtcHR5IGNsb3NlIHRhZy4iKTsKICAgICAgICB0aGlzLnRleHQgKz0gIjwvPiI7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgaGFuZGxlciA9IHRoaXMuY2xvc2VUYWdIYW5kbGVyOwogICAgICB2YXIgbCA9IHRhZ3MubGVuZ3RoOwoKICAgICAgd2hpbGUgKGwtLSA+IDApIHsKICAgICAgICB2YXIgdGFnID0gdGhpcy50YWcgPSB0YWdzLnBvcCgpOwogICAgICAgIHRoaXMudG9wTlMgPSB0YWcubnM7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVz
c2lvbnMKCiAgICAgICAgaGFuZGxlciA9PT0gbnVsbCB8fCBoYW5kbGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBoYW5kbGVyKHRhZyk7CgogICAgICAgIGlmICh0YWcubmFtZSA9PT0gbmFtZSkgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmZhaWwoInVuZXhwZWN0ZWQgY2xvc2UgdGFnLiIpOwogICAgICB9CgogICAgICBpZiAobCA9PT0gMCkgewogICAgICAgIHRoaXMuY2xvc2VkUm9vdCA9IHRydWU7CiAgICAgIH0gZWxzZSBpZiAobCA8IDApIHsKICAgICAgICB0aGlzLmZhaWwoInVubWF0Y2hl
ZCBjbG9zaW5nIHRhZzogIi5jb25jYXQobmFtZSwgIi4iKSk7CiAgICAgICAgdGhpcy50ZXh0ICs9ICI8LyIuY29uY2F0KG5hbWUsICI+Iik7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogUmVzb2x2ZXMgYW4gZW50aXR5LiBNYWtlcyBhbnkgbmVjZXNzYXJ5IHdlbGwtZm9ybWVkbmVzcyBjaGVja3MuCiAgICAgKgogICAgICogQHBhcmFtIGVudGl0eSBUaGUgZW50aXR5IHRvIHJlc29sdmUuCiAgICAgKgogICAgICogQHJldHVybnMgVGhlIHBhcnNlZCBlbnRpdHkuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicGFyc2VF
bnRpdHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlRW50aXR5KGVudGl0eSkgewogICAgICAvLyBzdGFydHNXaXRoIHdvdWxkIGJlIHNpZ25pZmljYW50bHkgc2xvd2VyIGZvciB0aGlzIHRlc3QuCiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLXN0cmluZy1zdGFydHMtZW5kcy13aXRoCiAgICAgIGlmIChlbnRpdHlbMF0gIT09ICIjIikgewogICAgICAgIHZhciBkZWZpbmVkID0gdGhpcy5FTlRJVElFU1tlbnRpdHldOwoKICAgICAgICBpZiAoZGVmaW5lZCAhPT0g
dW5kZWZpbmVkKSB7CiAgICAgICAgICByZXR1cm4gZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHRoaXMuZmFpbCh0aGlzLmlzTmFtZShlbnRpdHkpID8gInVuZGVmaW5lZCBlbnRpdHkuIiA6ICJkaXNhbGxvd2VkIGNoYXJhY3RlciBpbiBlbnRpdHkgbmFtZS4iKTsKICAgICAgICByZXR1cm4gIiYiLmNvbmNhdChlbnRpdHksICI7Iik7CiAgICAgIH0KCiAgICAgIHZhciBudW0gPSBOYU47CgogICAgICBpZiAoZW50aXR5WzFdID09PSAieCIgJiYgL14jeFswLTlhLWZdKyQvaS50ZXN0KGVudGl0eSkpIHsKICAgICAgICBudW0g
PSBwYXJzZUludChlbnRpdHkuc2xpY2UoMiksIDE2KTsKICAgICAgfSBlbHNlIGlmICgvXiNbMC05XSskLy50ZXN0KGVudGl0eSkpIHsKICAgICAgICBudW0gPSBwYXJzZUludChlbnRpdHkuc2xpY2UoMSksIDEwKTsKICAgICAgfSAvLyBUaGUgY2hhcmFjdGVyIHJlZmVyZW5jZSBpcyByZXF1aXJlZCB0byBtYXRjaCB0aGUgQ0hBUiBwcm9kdWN0aW9uLgoKCiAgICAgIGlmICghdGhpcy5pc0NoYXIobnVtKSkgewogICAgICAgIHRoaXMuZmFpbCgibWFsZm9ybWVkIGNoYXJhY3RlciBlbnRpdHkuIik7CiAgICAgICAgcmV0dXJuICIm
Ii5jb25jYXQoZW50aXR5LCAiOyIpOwogICAgICB9CgogICAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQobnVtKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjbG9zZWQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jbG9zZWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAicG9zaXRpb24iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNodW5rUG9zaXRpb24gKyB0aGlzLmk7CiAgICB9CiAgICAvKioKICAgICAqIFRoZSBjb2x1bW4gbnVtYmVyIG9m
IHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSByZWFkIGJ5IHRoZSBwYXJzZXIuICAqCiAgICAgKiBUaGlzIGZpZWxkIGlzIHplcm8tYmFzZWQuIChUaGUgZmlyc3QgY29sdW1uIGluIGEgbGluZSBpcyAwLikKICAgICAqCiAgICAgKiBUaGlzIGZpZWxkIHJlcG9ydHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBuZXh0IGNoYXJhY3RlciB3b3VsZCBiZSBpbiB0aGUKICAgICAqIGxpbmUgaWYgdGhlIGxpbmUgd2VyZSByZXByZXNlbnRlZCBhcyBhIEphdmFTY3JpcHQgc3RyaW5nLiAgTm90ZSB0aGF0IHRoaXMKICAgICAqICpjYW4qIGJl
IGRpZmZlcmVudCB0byBhIGNvdW50IGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgKlVuaWNvZGUgY2hhcmFjdGVycyoKICAgICAqIGR1ZSB0byBob3cgSmF2YVNjcmlwdCBoYW5kbGVzIGFzdHJhbCBwbGFuZSBjaGFyYWN0ZXJzLgogICAgICoKICAgICAqIFNlZSBbW2NvbHVtbl1dIGZvciBhIG51bWJlciB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgY291bnQgb2YgVW5pY29kZQogICAgICogY2hhcmFjdGVycy4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb2x1bW5JbmRleCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAg
cmV0dXJuIHRoaXMucG9zaXRpb24gLSB0aGlzLnBvc2l0aW9uQXROZXdMaW5lOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNheGVzUGFyc2VyOwp9KCk7CgpleHBvcnRzLlNheGVzUGFyc2VyID0gU2F4ZXNQYXJzZXI7Cgp9LHsieG1sY2hhcnMveG1sLzEuMC9lZDUiOjQzMSwieG1sY2hhcnMveG1sLzEuMS9lZDIiOjQzMiwieG1sY2hhcnMveG1sbnMvMS4wL2VkMyI6NDMzfV0sMzg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChzZXRJbW1lZGlhdGUpewondXNlIHN0cmljdCc7Cgptb2R1bGUu
ZXhwb3J0cyA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicgPyBzZXRJbW1lZGlhdGUgOiBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoKSB7CiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5hcHBseShhcmd1bWVudHMpOwogIGFyZ3Muc3BsaWNlKDEsIDAsIDApOwogIHNldFRpbWVvdXQuYXBwbHkobnVsbCwgYXJncyk7Cn07Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgidGltZXJzIikuc2V0SW1tZWRpYXRlKQoKfSx7InRpbWVycyI6NDExfV0sMzg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJp
Y3QiOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOyAvLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zCgoKZnVuY3Rpb24gSGFzaChibG9ja1NpemUsIGZpbmFsU2l6ZSkgewogIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jKGJsb2NrU2l6ZSk7CiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplOwogIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZTsKICB0aGlzLl9sZW4gPSAwOwp9CgpIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7CiAg
aWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgewogICAgZW5jID0gZW5jIHx8ICd1dGY4JzsKICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmMpOwogIH0KCiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2s7CiAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuX2Jsb2NrU2l6ZTsKICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGg7CiAgdmFyIGFjY3VtID0gdGhpcy5fbGVuOwoKICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBsZW5ndGg7KSB7CiAgICB2YXIgYXNzaWduZWQgPSBhY2N1bSAlIGJsb2NrU2l6ZTsKICAgIHZh
ciByZW1haW5kZXIgPSBNYXRoLm1pbihsZW5ndGggLSBvZmZzZXQsIGJsb2NrU2l6ZSAtIGFzc2lnbmVkKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbWFpbmRlcjsgaSsrKSB7CiAgICAgIGJsb2NrW2Fzc2lnbmVkICsgaV0gPSBkYXRhW29mZnNldCArIGldOwogICAgfQoKICAgIGFjY3VtICs9IHJlbWFpbmRlcjsKICAgIG9mZnNldCArPSByZW1haW5kZXI7CgogICAgaWYgKGFjY3VtICUgYmxvY2tTaXplID09PSAwKSB7CiAgICAgIHRoaXMuX3VwZGF0ZShibG9jayk7CiAgICB9CiAgfQoKICB0aGlzLl9sZW4gKz0gbGVu
Z3RoOwogIHJldHVybiB0aGlzOwp9OwoKSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykgewogIHZhciByZW0gPSB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemU7CiAgdGhpcy5fYmxvY2tbcmVtXSA9IDB4ODA7IC8vIHplcm8gKHJlbSArIDEpIHRyYWlsaW5nIGJpdHMsIHdoZXJlIChyZW0gKyAxKSBpcyB0aGUgc21hbGxlc3QKICAvLyBub24tbmVnYXRpdmUgc29sdXRpb24gdG8gdGhlIGVxdWF0aW9uIChsZW5ndGggKyAxICsgKHJlbSArIDEpKSA9PT0gZmluYWxTaXplIG1vZCBibG9ja1NpemUKCiAgdGhp
cy5fYmxvY2suZmlsbCgwLCByZW0gKyAxKTsKCiAgaWYgKHJlbSA+PSB0aGlzLl9maW5hbFNpemUpIHsKICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jayk7CgogICAgdGhpcy5fYmxvY2suZmlsbCgwKTsKICB9CgogIHZhciBiaXRzID0gdGhpcy5fbGVuICogODsgLy8gdWludDMyCgogIGlmIChiaXRzIDw9IDB4ZmZmZmZmZmYpIHsKICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoYml0cywgdGhpcy5fYmxvY2tTaXplIC0gNCk7IC8vIHVpbnQ2NAoKICB9IGVsc2UgewogICAgdmFyIGxvd0JpdHMgPSAoYml0cyAmIDB4ZmZm
ZmZmZmYpID4+PiAwOwogICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwOwoKICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoaGlnaEJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDgpOwoKICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNCk7CiAgfQoKICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spOwoKICB2YXIgaGFzaCA9IHRoaXMuX2hhc2goKTsKCiAgcmV0dXJuIGVuYyA/IGhhc2gudG9TdHJpbmcoZW5jKSA6IGhhc2g7Cn07CgpI
YXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkgewogIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzJyk7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IEhhc2g7Cgp9LHsic2FmZS1idWZmZXIiOjM4NH1dLDM4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBfZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU0hBKGFsZ29yaXRobSkgewogIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgp
OwogIHZhciBBbGdvcml0aG0gPSBfZXhwb3J0c1thbGdvcml0aG1dOwogIGlmICghQWxnb3JpdGhtKSB0aHJvdyBuZXcgRXJyb3IoYWxnb3JpdGhtICsgJyBpcyBub3Qgc3VwcG9ydGVkICh3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cyknKTsKICByZXR1cm4gbmV3IEFsZ29yaXRobSgpOwp9OwoKX2V4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKTsKX2V4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpOwpfZXhwb3J0cy5zaGEyMjQgPSByZXF1aXJlKCcuL3NoYTIyNCcpOwpfZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcu
L3NoYTI1NicpOwpfZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYTM4NCcpOwpfZXhwb3J0cy5zaGE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpOwoKfSx7Ii4vc2hhIjozOTAsIi4vc2hhMSI6MzkxLCIuL3NoYTIyNCI6MzkyLCIuL3NoYTI1NiI6MzkzLCIuL3NoYTM4NCI6Mzk0LCIuL3NoYTUxMiI6Mzk1fV0sMzkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKLyoKICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNI
QS0wLCBhcyBkZWZpbmVkCiAqIGluIEZJUFMgUFVCIDE4MC0xCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgZGVyaXZlZCBmcm9tIHNoYTEuanMgb2YgdGhlIHNhbWUgcmVwb3NpdG9yeS4KICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBTSEEtMCBhbmQgU0hBLTEgaXMganVzdCBhIGJpdHdpc2Ugcm90YXRlIGxlZnQKICogb3BlcmF0aW9uIHdhcyBhZGRlZC4KICovCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUt
YnVmZmVyJykuQnVmZmVyOwoKdmFyIEsgPSBbMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXTsKdmFyIFcgPSBuZXcgQXJyYXkoODApOwoKZnVuY3Rpb24gU2hhKCkgewogIHRoaXMuaW5pdCgpOwogIHRoaXMuX3cgPSBXOwogIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpOwp9Cgppbmhlcml0cyhTaGEsIEhhc2gpOwoKU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkgewogIHRoaXMuX2EgPSAweDY3NDUyMzAxOwogIHRoaXMuX2IgPSAweGVmY2RhYjg5OwogIHRoaXMuX2Mg
PSAweDk4YmFkY2ZlOwogIHRoaXMuX2QgPSAweDEwMzI1NDc2OwogIHRoaXMuX2UgPSAweGMzZDJlMWYwOwogIHJldHVybiB0aGlzOwp9OwoKZnVuY3Rpb24gcm90bDUobnVtKSB7CiAgcmV0dXJuIG51bSA8PCA1IHwgbnVtID4+PiAyNzsKfQoKZnVuY3Rpb24gcm90bDMwKG51bSkgewogIHJldHVybiBudW0gPDwgMzAgfCBudW0gPj4+IDI7Cn0KCmZ1bmN0aW9uIGZ0KHMsIGIsIGMsIGQpIHsKICBpZiAocyA9PT0gMCkgcmV0dXJuIGIgJiBjIHwgfmIgJiBkOwogIGlmIChzID09PSAyKSByZXR1cm4gYiAmIGMgfCBiICYgZCB8IGMg
JiBkOwogIHJldHVybiBiIF4gYyBeIGQ7Cn0KClNoYS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7CiAgdmFyIFcgPSB0aGlzLl93OwogIHZhciBhID0gdGhpcy5fYSB8IDA7CiAgdmFyIGIgPSB0aGlzLl9iIHwgMDsKICB2YXIgYyA9IHRoaXMuX2MgfCAwOwogIHZhciBkID0gdGhpcy5fZCB8IDA7CiAgdmFyIGUgPSB0aGlzLl9lIHwgMDsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7CiAgICBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNCk7CiAgfQoKICBmb3IgKDsgaSA8IDgwOyArK2kpIHsKICAg
IFdbaV0gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdOwogIH0KCiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7CiAgICB2YXIgcyA9IH5+KGogLyAyMCk7CiAgICB2YXIgdCA9IHJvdGw1KGEpICsgZnQocywgYiwgYywgZCkgKyBlICsgV1tqXSArIEtbc10gfCAwOwogICAgZSA9IGQ7CiAgICBkID0gYzsKICAgIGMgPSByb3RsMzAoYik7CiAgICBiID0gYTsKICAgIGEgPSB0OwogIH0KCiAgdGhpcy5fYSA9IGEgKyB0aGlzLl9hIHwgMDsKICB0aGlzLl9iID0gYiArIHRoaXMuX2IgfCAw
OwogIHRoaXMuX2MgPSBjICsgdGhpcy5fYyB8IDA7CiAgdGhpcy5fZCA9IGQgKyB0aGlzLl9kIHwgMDsKICB0aGlzLl9lID0gZSArIHRoaXMuX2UgfCAwOwp9OwoKU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMCk7CiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApOwogIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KTsKICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOCk7CiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKTsK
ICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpOwogIHJldHVybiBIOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBTaGE7Cgp9LHsiLi9oYXNoIjozODgsImluaGVyaXRzIjoyNzgsInNhZmUtYnVmZmVyIjozODR9XSwzOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgovKgogKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWQKICogaW4gRklQUyBQVUIgMTgwLTEKICogVmVyc2lvbiAyLjFhIENv
cHlyaWdodCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDAyLgogKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0CiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZQogKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgZGV0YWlscy4KICovCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVm
ZmVyOwoKdmFyIEsgPSBbMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXTsKdmFyIFcgPSBuZXcgQXJyYXkoODApOwoKZnVuY3Rpb24gU2hhMSgpIHsKICB0aGlzLmluaXQoKTsKICB0aGlzLl93ID0gVzsKICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KTsKfQoKaW5oZXJpdHMoU2hhMSwgSGFzaCk7CgpTaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkgewogIHRoaXMuX2EgPSAweDY3NDUyMzAxOwogIHRoaXMuX2IgPSAweGVmY2RhYjg5OwogIHRoaXMuX2MgPSAweDk4YmFk
Y2ZlOwogIHRoaXMuX2QgPSAweDEwMzI1NDc2OwogIHRoaXMuX2UgPSAweGMzZDJlMWYwOwogIHJldHVybiB0aGlzOwp9OwoKZnVuY3Rpb24gcm90bDEobnVtKSB7CiAgcmV0dXJuIG51bSA8PCAxIHwgbnVtID4+PiAzMTsKfQoKZnVuY3Rpb24gcm90bDUobnVtKSB7CiAgcmV0dXJuIG51bSA8PCA1IHwgbnVtID4+PiAyNzsKfQoKZnVuY3Rpb24gcm90bDMwKG51bSkgewogIHJldHVybiBudW0gPDwgMzAgfCBudW0gPj4+IDI7Cn0KCmZ1bmN0aW9uIGZ0KHMsIGIsIGMsIGQpIHsKICBpZiAocyA9PT0gMCkgcmV0dXJuIGIgJiBjIHwg
fmIgJiBkOwogIGlmIChzID09PSAyKSByZXR1cm4gYiAmIGMgfCBiICYgZCB8IGMgJiBkOwogIHJldHVybiBiIF4gYyBeIGQ7Cn0KClNoYTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkgewogIHZhciBXID0gdGhpcy5fdzsKICB2YXIgYSA9IHRoaXMuX2EgfCAwOwogIHZhciBiID0gdGhpcy5fYiB8IDA7CiAgdmFyIGMgPSB0aGlzLl9jIHwgMDsKICB2YXIgZCA9IHRoaXMuX2QgfCAwOwogIHZhciBlID0gdGhpcy5fZSB8IDA7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgewogICAgV1tpXSA9IE0ucmVh
ZEludDMyQkUoaSAqIDQpOwogIH0KCiAgZm9yICg7IGkgPCA4MDsgKytpKSB7CiAgICBXW2ldID0gcm90bDEoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSk7CiAgfQoKICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHsKICAgIHZhciBzID0gfn4oaiAvIDIwKTsKICAgIHZhciB0ID0gcm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSB8IDA7CiAgICBlID0gZDsKICAgIGQgPSBjOwogICAgYyA9IHJvdGwzMChiKTsKICAgIGIgPSBhOwogICAgYSA9IHQ7CiAgfQoK
ICB0aGlzLl9hID0gYSArIHRoaXMuX2EgfCAwOwogIHRoaXMuX2IgPSBiICsgdGhpcy5fYiB8IDA7CiAgdGhpcy5fYyA9IGMgKyB0aGlzLl9jIHwgMDsKICB0aGlzLl9kID0gZCArIHRoaXMuX2QgfCAwOwogIHRoaXMuX2UgPSBlICsgdGhpcy5fZSB8IDA7Cn07CgpTaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMCk7CiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApOwogIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KTsKICBILndyaXRlSW50
MzJCRSh0aGlzLl9jIHwgMCwgOCk7CiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKTsKICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpOwogIHJldHVybiBIOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBTaGExOwoKfSx7Ii4vaGFzaCI6Mzg4LCJpbmhlcml0cyI6Mjc4LCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMzkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKLyoqCiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGht
LCBTSEEtMjU2LCBhcyBkZWZpbmVkCiAqIGluIEZJUFMgMTgwLTIKICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuCiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXQKICoKICovCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgU2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKTsKCnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7Cgp2YXIgQnVmZmVyID0gcmVx
dWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgp2YXIgVyA9IG5ldyBBcnJheSg2NCk7CgpmdW5jdGlvbiBTaGEyMjQoKSB7CiAgdGhpcy5pbml0KCk7CiAgdGhpcy5fdyA9IFc7IC8vIG5ldyBBcnJheSg2NCkKCiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nik7Cn0KCmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KTsKClNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLl9hID0gMHhjMTA1OWVkODsKICB0aGlzLl9iID0gMHgzNjdjZDUwNzsKICB0aGlzLl9jID0gMHgzMDcwZGQxNzsKICB0aGlzLl9kID0g
MHhmNzBlNTkzOTsKICB0aGlzLl9lID0gMHhmZmMwMGIzMTsKICB0aGlzLl9mID0gMHg2ODU4MTUxMTsKICB0aGlzLl9nID0gMHg2NGY5OGZhNzsKICB0aGlzLl9oID0gMHhiZWZhNGZhNDsKICByZXR1cm4gdGhpczsKfTsKClNoYTIyNC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7CiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjgpOwogIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApOwogIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpOwogIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpOwogIEgud3JpdGVJ
bnQzMkJFKHRoaXMuX2QsIDEyKTsKICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNik7CiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApOwogIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KTsKICByZXR1cm4gSDsKfTsKCm1vZHVsZS5leHBvcnRzID0gU2hhMjI0OwoKfSx7Ii4vaGFzaCI6Mzg4LCIuL3NoYTI1NiI6MzkzLCJpbmhlcml0cyI6Mjc4LCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMzkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKLyoqCiAqIEEgSmF2YVNjcmlwdCBpbXBs
ZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkCiAqIGluIEZJUFMgMTgwLTIKICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuCiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXQKICoKICovCnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Cgp2YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpOwoKdmFyIEJ1ZmZlciA9
IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKdmFyIEsgPSBbMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSwgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSwgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMywgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCwgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQywgMHgyREU5MkM2RiwgMHg0QTc0
ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSwgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNywgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NywgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMywgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSwgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMywgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBF
MzU4NSwgMHgxMDZBQTA3MCwgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSwgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMywgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCwgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMl07CnZhciBXID0gbmV3IEFycmF5KDY0KTsKCmZ1bmN0aW9uIFNoYTI1NigpIHsKICB0aGlzLmluaXQoKTsKICB0aGlzLl93ID0gVzsgLy8gbmV3IEFycmF5KDY0
KQoKICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KTsKfQoKaW5oZXJpdHMoU2hhMjU2LCBIYXNoKTsKClNoYTI1Ni5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLl9hID0gMHg2YTA5ZTY2NzsKICB0aGlzLl9iID0gMHhiYjY3YWU4NTsKICB0aGlzLl9jID0gMHgzYzZlZjM3MjsKICB0aGlzLl9kID0gMHhhNTRmZjUzYTsKICB0aGlzLl9lID0gMHg1MTBlNTI3ZjsKICB0aGlzLl9mID0gMHg5YjA1Njg4YzsKICB0aGlzLl9nID0gMHgxZjgzZDlhYjsKICB0aGlzLl9oID0gMHg1YmUwY2QxOTsKICByZXR1cm4gdGhp
czsKfTsKCmZ1bmN0aW9uIGNoKHgsIHksIHopIHsKICByZXR1cm4geiBeIHggJiAoeSBeIHopOwp9CgpmdW5jdGlvbiBtYWooeCwgeSwgeikgewogIHJldHVybiB4ICYgeSB8IHogJiAoeCB8IHkpOwp9CgpmdW5jdGlvbiBzaWdtYTAoeCkgewogIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKTsKfQoKZnVuY3Rpb24gc2lnbWExKHgpIHsKICByZXR1cm4gKHggPj4+IDYgfCB4IDw8IDI2KSBeICh4ID4+PiAxMSB8IHggPDwgMjEpIF4gKHggPj4+IDI1
IHwgeCA8PCA3KTsKfQoKZnVuY3Rpb24gZ2FtbWEwKHgpIHsKICByZXR1cm4gKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4geCA+Pj4gMzsKfQoKZnVuY3Rpb24gZ2FtbWExKHgpIHsKICByZXR1cm4gKHggPj4+IDE3IHwgeCA8PCAxNSkgXiAoeCA+Pj4gMTkgfCB4IDw8IDEzKSBeIHggPj4+IDEwOwp9CgpTaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkgewogIHZhciBXID0gdGhpcy5fdzsKICB2YXIgYSA9IHRoaXMuX2EgfCAwOwogIHZhciBiID0gdGhpcy5fYiB8IDA7CiAg
dmFyIGMgPSB0aGlzLl9jIHwgMDsKICB2YXIgZCA9IHRoaXMuX2QgfCAwOwogIHZhciBlID0gdGhpcy5fZSB8IDA7CiAgdmFyIGYgPSB0aGlzLl9mIHwgMDsKICB2YXIgZyA9IHRoaXMuX2cgfCAwOwogIHZhciBoID0gdGhpcy5faCB8IDA7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgewogICAgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpOwogIH0KCiAgZm9yICg7IGkgPCA2NDsgKytpKSB7CiAgICBXW2ldID0gZ2FtbWExKFdbaSAtIDJdKSArIFdbaSAtIDddICsgZ2FtbWEwKFdbaSAtIDE1XSkgKyBXW2kgLSAx
Nl0gfCAwOwogIH0KCiAgZm9yICh2YXIgaiA9IDA7IGogPCA2NDsgKytqKSB7CiAgICB2YXIgVDEgPSBoICsgc2lnbWExKGUpICsgY2goZSwgZiwgZykgKyBLW2pdICsgV1tqXSB8IDA7CiAgICB2YXIgVDIgPSBzaWdtYTAoYSkgKyBtYWooYSwgYiwgYykgfCAwOwogICAgaCA9IGc7CiAgICBnID0gZjsKICAgIGYgPSBlOwogICAgZSA9IGQgKyBUMSB8IDA7CiAgICBkID0gYzsKICAgIGMgPSBiOwogICAgYiA9IGE7CiAgICBhID0gVDEgKyBUMiB8IDA7CiAgfQoKICB0aGlzLl9hID0gYSArIHRoaXMuX2EgfCAwOwogIHRoaXMuX2Ig
PSBiICsgdGhpcy5fYiB8IDA7CiAgdGhpcy5fYyA9IGMgKyB0aGlzLl9jIHwgMDsKICB0aGlzLl9kID0gZCArIHRoaXMuX2QgfCAwOwogIHRoaXMuX2UgPSBlICsgdGhpcy5fZSB8IDA7CiAgdGhpcy5fZiA9IGYgKyB0aGlzLl9mIHwgMDsKICB0aGlzLl9nID0gZyArIHRoaXMuX2cgfCAwOwogIHRoaXMuX2ggPSBoICsgdGhpcy5faCB8IDA7Cn07CgpTaGEyNTYucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkgewogIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDMyKTsKICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKTsK
ICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KTsKICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KTsKICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMik7CiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpOwogIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKTsKICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNCk7CiAgSC53cml0ZUludDMyQkUodGhpcy5faCwgMjgpOwogIHJldHVybiBIOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBTaGEyNTY7Cgp9LHsiLi9oYXNoIjozODgsImluaGVyaXRzIjoyNzgsInNhZmUtYnVmZmVy
IjozODR9XSwzOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKdmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJyk7Cgp2YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpOwoKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKdmFyIFcgPSBuZXcgQXJyYXkoMTYwKTsKCmZ1bmN0aW9uIFNoYTM4NCgpIHsKICB0aGlzLmluaXQoKTsKICB0aGlzLl93ID0gVzsKICBIYXNoLmNhbGwodGhp
cywgMTI4LCAxMTIpOwp9Cgppbmhlcml0cyhTaGEzODQsIFNIQTUxMik7CgpTaGEzODQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7CiAgdGhpcy5fYWggPSAweGNiYmI5ZDVkOwogIHRoaXMuX2JoID0gMHg2MjlhMjkyYTsKICB0aGlzLl9jaCA9IDB4OTE1OTAxNWE7CiAgdGhpcy5fZGggPSAweDE1MmZlY2Q4OwogIHRoaXMuX2VoID0gMHg2NzMzMjY2NzsKICB0aGlzLl9maCA9IDB4OGViNDRhODc7CiAgdGhpcy5fZ2ggPSAweGRiMGMyZTBkOwogIHRoaXMuX2hoID0gMHg0N2I1NDgxZDsKICB0aGlzLl9hbCA9IDB4YzEw
NTllZDg7CiAgdGhpcy5fYmwgPSAweDM2N2NkNTA3OwogIHRoaXMuX2NsID0gMHgzMDcwZGQxNzsKICB0aGlzLl9kbCA9IDB4ZjcwZTU5Mzk7CiAgdGhpcy5fZWwgPSAweGZmYzAwYjMxOwogIHRoaXMuX2ZsID0gMHg2ODU4MTUxMTsKICB0aGlzLl9nbCA9IDB4NjRmOThmYTc7CiAgdGhpcy5faGwgPSAweGJlZmE0ZmE0OwogIHJldHVybiB0aGlzOwp9OwoKU2hhMzg0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0OCk7CgogIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSho
LCBsLCBvZmZzZXQpIHsKICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldCk7CiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KTsKICB9CgogIHdyaXRlSW50NjRCRSh0aGlzLl9haCwgdGhpcy5fYWwsIDApOwogIHdyaXRlSW50NjRCRSh0aGlzLl9iaCwgdGhpcy5fYmwsIDgpOwogIHdyaXRlSW50NjRCRSh0aGlzLl9jaCwgdGhpcy5fY2wsIDE2KTsKICB3cml0ZUludDY0QkUodGhpcy5fZGgsIHRoaXMuX2RsLCAyNCk7CiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2VoLCB0aGlzLl9lbCwgMzIpOwogIHdyaXRlSW50NjRCRSh0
aGlzLl9maCwgdGhpcy5fZmwsIDQwKTsKICByZXR1cm4gSDsKfTsKCm1vZHVsZS5leHBvcnRzID0gU2hhMzg0OwoKfSx7Ii4vaGFzaCI6Mzg4LCIuL3NoYTUxMiI6Mzk1LCJpbmhlcml0cyI6Mjc4LCJzYWZlLWJ1ZmZlciI6Mzg0fV0sMzk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKdmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKCnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7Cgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7Cgp2
YXIgSyA9IFsweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLCAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLCAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LCAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LCAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLCAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLCAweDcy
YmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLCAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LCAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLCAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LCAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLCAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LCAweDk4M2U1MTUyLCAweGVl
NjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLCAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LCAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LCAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLCAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LCAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLCAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2
NmEwYWJiLCAweDNjNzdiMmE4LCAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLCAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLCAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLCAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLCAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LCAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUx
NDFhYjUzLCAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LCAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLCAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLCAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLCAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLCAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LCAweGJl
ZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLCAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LCAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LCAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LCAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLCAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLCAweDNjOWViZTBhLCAweDE1
YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLCAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLCAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XTsKdmFyIFcgPSBuZXcgQXJyYXkoMTYwKTsKCmZ1bmN0aW9uIFNoYTUxMigpIHsKICB0aGlzLmluaXQoKTsKICB0aGlzLl93ID0gVzsKICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpOwp9Cgppbmhlcml0cyhTaGE1MTIsIEhhc2gpOwoKU2hhNTEyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkgewog
IHRoaXMuX2FoID0gMHg2YTA5ZTY2NzsKICB0aGlzLl9iaCA9IDB4YmI2N2FlODU7CiAgdGhpcy5fY2ggPSAweDNjNmVmMzcyOwogIHRoaXMuX2RoID0gMHhhNTRmZjUzYTsKICB0aGlzLl9laCA9IDB4NTEwZTUyN2Y7CiAgdGhpcy5fZmggPSAweDliMDU2ODhjOwogIHRoaXMuX2doID0gMHgxZjgzZDlhYjsKICB0aGlzLl9oaCA9IDB4NWJlMGNkMTk7CiAgdGhpcy5fYWwgPSAweGYzYmNjOTA4OwogIHRoaXMuX2JsID0gMHg4NGNhYTczYjsKICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmI7CiAgdGhpcy5fZGwgPSAweDVmMWQzNmYxOwog
IHRoaXMuX2VsID0gMHhhZGU2ODJkMTsKICB0aGlzLl9mbCA9IDB4MmIzZTZjMWY7CiAgdGhpcy5fZ2wgPSAweGZiNDFiZDZiOwogIHRoaXMuX2hsID0gMHgxMzdlMjE3OTsKICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0aW9uIENoKHgsIHksIHopIHsKICByZXR1cm4geiBeIHggJiAoeSBeIHopOwp9CgpmdW5jdGlvbiBtYWooeCwgeSwgeikgewogIHJldHVybiB4ICYgeSB8IHogJiAoeCB8IHkpOwp9CgpmdW5jdGlvbiBzaWdtYTAoeCwgeGwpIHsKICByZXR1cm4gKHggPj4+IDI4IHwgeGwgPDwgNCkgXiAoeGwgPj4+IDIgfCB4IDw8
IDMwKSBeICh4bCA+Pj4gNyB8IHggPDwgMjUpOwp9CgpmdW5jdGlvbiBzaWdtYTEoeCwgeGwpIHsKICByZXR1cm4gKHggPj4+IDE0IHwgeGwgPDwgMTgpIF4gKHggPj4+IDE4IHwgeGwgPDwgMTQpIF4gKHhsID4+PiA5IHwgeCA8PCAyMyk7Cn0KCmZ1bmN0aW9uIEdhbW1hMCh4LCB4bCkgewogIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4geCA+Pj4gNzsKfQoKZnVuY3Rpb24gR2FtbWEwbCh4LCB4bCkgewogIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwg
eGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSk7Cn0KCmZ1bmN0aW9uIEdhbW1hMSh4LCB4bCkgewogIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeIHggPj4+IDY7Cn0KCmZ1bmN0aW9uIEdhbW1hMWwoeCwgeGwpIHsKICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNiB8IHhsIDw8IDI2KTsKfQoKZnVuY3Rpb24gZ2V0Q2FycnkoYSwgYikgewogIHJldHVybiBhID4+PiAwIDwgYiA+Pj4gMCA/IDEgOiAwOwp9
CgpTaGE1MTIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkgewogIHZhciBXID0gdGhpcy5fdzsKICB2YXIgYWggPSB0aGlzLl9haCB8IDA7CiAgdmFyIGJoID0gdGhpcy5fYmggfCAwOwogIHZhciBjaCA9IHRoaXMuX2NoIHwgMDsKICB2YXIgZGggPSB0aGlzLl9kaCB8IDA7CiAgdmFyIGVoID0gdGhpcy5fZWggfCAwOwogIHZhciBmaCA9IHRoaXMuX2ZoIHwgMDsKICB2YXIgZ2ggPSB0aGlzLl9naCB8IDA7CiAgdmFyIGhoID0gdGhpcy5faGggfCAwOwogIHZhciBhbCA9IHRoaXMuX2FsIHwgMDsKICB2YXIgYmwgPSB0
aGlzLl9ibCB8IDA7CiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwOwogIHZhciBkbCA9IHRoaXMuX2RsIHwgMDsKICB2YXIgZWwgPSB0aGlzLl9lbCB8IDA7CiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwOwogIHZhciBnbCA9IHRoaXMuX2dsIHwgMDsKICB2YXIgaGwgPSB0aGlzLl9obCB8IDA7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkgKz0gMikgewogICAgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpOwogICAgV1tpICsgMV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0ICsgNCk7CiAgfQoKICBmb3IgKDsgaSA8IDE2MDsgaSAr
PSAyKSB7CiAgICB2YXIgeGggPSBXW2kgLSAxNSAqIDJdOwogICAgdmFyIHhsID0gV1tpIC0gMTUgKiAyICsgMV07CiAgICB2YXIgZ2FtbWEwID0gR2FtbWEwKHhoLCB4bCk7CiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHhoKTsKICAgIHhoID0gV1tpIC0gMiAqIDJdOwogICAgeGwgPSBXW2kgLSAyICogMiArIDFdOwogICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4aCwgeGwpOwogICAgdmFyIGdhbW1hMWwgPSBHYW1tYTFsKHhsLCB4aCk7IC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2
XQoKICAgIHZhciBXaTdoID0gV1tpIC0gNyAqIDJdOwogICAgdmFyIFdpN2wgPSBXW2kgLSA3ICogMiArIDFdOwogICAgdmFyIFdpMTZoID0gV1tpIC0gMTYgKiAyXTsKICAgIHZhciBXaTE2bCA9IFdbaSAtIDE2ICogMiArIDFdOwogICAgdmFyIFdpbCA9IGdhbW1hMGwgKyBXaTdsIHwgMDsKICAgIHZhciBXaWggPSBnYW1tYTAgKyBXaTdoICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTBsKSB8IDA7CiAgICBXaWwgPSBXaWwgKyBnYW1tYTFsIHwgMDsKICAgIFdpaCA9IFdpaCArIGdhbW1hMSArIGdldENhcnJ5KFdpbCwgZ2FtbWExbCkg
fCAwOwogICAgV2lsID0gV2lsICsgV2kxNmwgfCAwOwogICAgV2loID0gV2loICsgV2kxNmggKyBnZXRDYXJyeShXaWwsIFdpMTZsKSB8IDA7CiAgICBXW2ldID0gV2loOwogICAgV1tpICsgMV0gPSBXaWw7CiAgfQoKICBmb3IgKHZhciBqID0gMDsgaiA8IDE2MDsgaiArPSAyKSB7CiAgICBXaWggPSBXW2pdOwogICAgV2lsID0gV1tqICsgMV07CiAgICB2YXIgbWFqaCA9IG1haihhaCwgYmgsIGNoKTsKICAgIHZhciBtYWpsID0gbWFqKGFsLCBibCwgY2wpOwogICAgdmFyIHNpZ21hMGggPSBzaWdtYTAoYWgsIGFsKTsKICAgIHZh
ciBzaWdtYTBsID0gc2lnbWEwKGFsLCBhaCk7CiAgICB2YXIgc2lnbWExaCA9IHNpZ21hMShlaCwgZWwpOwogICAgdmFyIHNpZ21hMWwgPSBzaWdtYTEoZWwsIGVoKTsgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2pdICsgV1tqXQoKICAgIHZhciBLaWggPSBLW2pdOwogICAgdmFyIEtpbCA9IEtbaiArIDFdOwogICAgdmFyIGNoaCA9IENoKGVoLCBmaCwgZ2gpOwogICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpOwogICAgdmFyIHQxbCA9IGhsICsgc2lnbWExbCB8IDA7CiAgICB2YXIgdDFoID0gaGggKyBzaWdtYTFoICsg
Z2V0Q2FycnkodDFsLCBobCkgfCAwOwogICAgdDFsID0gdDFsICsgY2hsIHwgMDsKICAgIHQxaCA9IHQxaCArIGNoaCArIGdldENhcnJ5KHQxbCwgY2hsKSB8IDA7CiAgICB0MWwgPSB0MWwgKyBLaWwgfCAwOwogICAgdDFoID0gdDFoICsgS2loICsgZ2V0Q2FycnkodDFsLCBLaWwpIHwgMDsKICAgIHQxbCA9IHQxbCArIFdpbCB8IDA7CiAgICB0MWggPSB0MWggKyBXaWggKyBnZXRDYXJyeSh0MWwsIFdpbCkgfCAwOyAvLyB0MiA9IHNpZ21hMCArIG1hagoKICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbCB8IDA7CiAgICB2YXIg
dDJoID0gc2lnbWEwaCArIG1hamggKyBnZXRDYXJyeSh0MmwsIHNpZ21hMGwpIHwgMDsKICAgIGhoID0gZ2g7CiAgICBobCA9IGdsOwogICAgZ2ggPSBmaDsKICAgIGdsID0gZmw7CiAgICBmaCA9IGVoOwogICAgZmwgPSBlbDsKICAgIGVsID0gZGwgKyB0MWwgfCAwOwogICAgZWggPSBkaCArIHQxaCArIGdldENhcnJ5KGVsLCBkbCkgfCAwOwogICAgZGggPSBjaDsKICAgIGRsID0gY2w7CiAgICBjaCA9IGJoOwogICAgY2wgPSBibDsKICAgIGJoID0gYWg7CiAgICBibCA9IGFsOwogICAgYWwgPSB0MWwgKyB0MmwgfCAwOwogICAg
YWggPSB0MWggKyB0MmggKyBnZXRDYXJyeShhbCwgdDFsKSB8IDA7CiAgfQoKICB0aGlzLl9hbCA9IHRoaXMuX2FsICsgYWwgfCAwOwogIHRoaXMuX2JsID0gdGhpcy5fYmwgKyBibCB8IDA7CiAgdGhpcy5fY2wgPSB0aGlzLl9jbCArIGNsIHwgMDsKICB0aGlzLl9kbCA9IHRoaXMuX2RsICsgZGwgfCAwOwogIHRoaXMuX2VsID0gdGhpcy5fZWwgKyBlbCB8IDA7CiAgdGhpcy5fZmwgPSB0aGlzLl9mbCArIGZsIHwgMDsKICB0aGlzLl9nbCA9IHRoaXMuX2dsICsgZ2wgfCAwOwogIHRoaXMuX2hsID0gdGhpcy5faGwgKyBobCB8IDA7
CiAgdGhpcy5fYWggPSB0aGlzLl9haCArIGFoICsgZ2V0Q2FycnkodGhpcy5fYWwsIGFsKSB8IDA7CiAgdGhpcy5fYmggPSB0aGlzLl9iaCArIGJoICsgZ2V0Q2FycnkodGhpcy5fYmwsIGJsKSB8IDA7CiAgdGhpcy5fY2ggPSB0aGlzLl9jaCArIGNoICsgZ2V0Q2FycnkodGhpcy5fY2wsIGNsKSB8IDA7CiAgdGhpcy5fZGggPSB0aGlzLl9kaCArIGRoICsgZ2V0Q2FycnkodGhpcy5fZGwsIGRsKSB8IDA7CiAgdGhpcy5fZWggPSB0aGlzLl9laCArIGVoICsgZ2V0Q2FycnkodGhpcy5fZWwsIGVsKSB8IDA7CiAgdGhpcy5fZmggPSB0
aGlzLl9maCArIGZoICsgZ2V0Q2FycnkodGhpcy5fZmwsIGZsKSB8IDA7CiAgdGhpcy5fZ2ggPSB0aGlzLl9naCArIGdoICsgZ2V0Q2FycnkodGhpcy5fZ2wsIGdsKSB8IDA7CiAgdGhpcy5faGggPSB0aGlzLl9oaCArIGhoICsgZ2V0Q2FycnkodGhpcy5faGwsIGhsKSB8IDA7Cn07CgpTaGE1MTIucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkgewogIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDY0KTsKCiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFKGgsIGwsIG9mZnNldCkgewogICAgSC53cml0ZUludDMyQkUoaCwgb2Zm
c2V0KTsKICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpOwogIH0KCiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMCk7CiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOCk7CiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpOwogIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KTsKICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMik7CiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApOwogIHdyaXRlSW50NjRCRSh0
aGlzLl9naCwgdGhpcy5fZ2wsIDQ4KTsKICB3cml0ZUludDY0QkUodGhpcy5faGgsIHRoaXMuX2hsLCA1Nik7CiAgcmV0dXJuIEg7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IFNoYTUxMjsKCn0seyIuL2hhc2giOjM4OCwiaW5oZXJpdHMiOjI3OCwic2FmZS1idWZmZXIiOjM4NH1dLDM5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVk
LCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2Yg
dGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBX
SVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNU
SU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KbW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07Cgp2YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7Cgp2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKaW5oZXJpdHMoU3RyZWFtLCBFRSk7ClN0cmVhbS5SZWFkYWJsZSA9IHJlcXVpcmUoJ3Jl
YWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcycpOwpTdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTsKU3RyZWFtLkR1cGxleCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9kdXBsZXguanMnKTsKU3RyZWFtLlRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnKTsKU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7IC8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54
CgpTdHJlYW0uU3RyZWFtID0gU3RyZWFtOyAvLyBvbGQtc3R5bGUgc3RyZWFtcy4gIE5vdGUgdGhhdCB0aGUgcGlwZSBtZXRob2QgKHRoZSBvbmx5IHJlbGV2YW50Ci8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuCgpmdW5jdGlvbiBTdHJlYW0oKSB7CiAgRUUuY2FsbCh0aGlzKTsKfQoKU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIG9wdGlvbnMpIHsKICB2YXIgc291cmNlID0gdGhpczsKCiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7CiAgICBp
ZiAoZGVzdC53cml0YWJsZSkgewogICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkgewogICAgICAgIHNvdXJjZS5wYXVzZSgpOwogICAgICB9CiAgICB9CiAgfQoKICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpOwoKICBmdW5jdGlvbiBvbmRyYWluKCkgewogICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7CiAgICAgIHNvdXJjZS5yZXN1bWUoKTsKICAgIH0KICB9CgogIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7IC8vIElmIHRoZSAnZW5kJyBvcHRp
b24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW4KICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS4KCiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7CiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTsKICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKTsKICB9CgogIHZhciBkaWRPbkVuZCA9IGZhbHNlOwoKICBmdW5jdGlvbiBvbmVuZCgpIHsKICAg
IGlmIChkaWRPbkVuZCkgcmV0dXJuOwogICAgZGlkT25FbmQgPSB0cnVlOwogICAgZGVzdC5lbmQoKTsKICB9CgogIGZ1bmN0aW9uIG9uY2xvc2UoKSB7CiAgICBpZiAoZGlkT25FbmQpIHJldHVybjsKICAgIGRpZE9uRW5kID0gdHJ1ZTsKICAgIGlmICh0eXBlb2YgZGVzdC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSBkZXN0LmRlc3Ryb3koKTsKICB9IC8vIGRvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy4KCgogIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHsKICAgIGNsZWFudXAoKTsKCiAgICBp
ZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA9PT0gMCkgewogICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLgogICAgfQogIH0KCiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpOwogIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7IC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuCgogIGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpOwogICAgZGVzdC5yZW1vdmVM
aXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTsKICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpOwogICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpOwogICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOwogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTsKICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7CiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7CiAgICBkZXN0LnJl
bW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApOwogIH0KCiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTsKICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7CiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTsKICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpOyAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKQoKICByZXR1cm4gZGVzdDsKfTsKCn0seyJldmVudHMiOjI1OCwiaW5oZXJpdHMiOjI3OCwicmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcyI6Mzk3LCJyZWFkYWJsZS1zdHJl
YW0vcGFzc3Rocm91Z2guanMiOjQwNiwicmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzIjo0MDcsInJlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiOjQwOCwicmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzIjo0MDl9XSwzOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7Cgp9LHsiLi9saWIvX3N0cmVhbV9kdXBsZXguanMiOjM5OH1dLDM5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUs
ZXhwb3J0cyl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9u
IHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQK
Ly8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVU
SE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxl
IGFuZCB3cml0YWJsZS4KLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3MKLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbQovLyBXcml0YWJsZS4KJ3VzZSBzdHJpY3QnOwovKjxyZXBsYWNlbWVudD4qLwoKdmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7Ci8qPC9yZXBsYWNlbWVudD4qLwoKLyo8cmVwbGFjZW1lbnQ+Ki8KCgp2YXIgb2JqZWN0S2V5cyA9IE9i
amVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHsKICB2YXIga2V5cyA9IFtdOwoKICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICBrZXlzLnB1c2goa2V5KTsKICB9CgogIHJldHVybiBrZXlzOwp9OwovKjwvcmVwbGFjZW1lbnQ+Ki8KCgptb2R1bGUuZXhwb3J0cyA9IER1cGxleDsKLyo8cmVwbGFjZW1lbnQ+Ki8KCnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7CnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCnZhciBSZWFkYWJs
ZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpOwoKdmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7Cgp1dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpOwp7CiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZAogIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpOwoKICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHsKICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdOwogICAgaWYg
KCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdOwogIH0KfQoKZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7CiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTsKICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpOwogIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxl
ID0gZmFsc2U7CiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTsKICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlOwogIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlOwogIHRoaXMub25jZSgnZW5kJywgb25lbmQpOwp9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHsKICAvLyBtYWtpbmcgaXQgZXhw
bGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZQogIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpbgogIC8vIHVzZXJsYW5kIHdpbGwgZmFpbAogIGVudW1lcmFibGU6IGZhbHNlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyazsKICB9Cn0pOyAvLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyCgpmdW5jdGlvbiBvbmVuZCgpIHsKICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9y
IGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLAogIC8vIHRoZW4gd2UncmUgb2suCiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47IC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi4KICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay4KCiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpOwp9CgpmdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHsKICBzZWxmLmVuZCgpOwp9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4
LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHsKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7CiAgfSwKICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0
aGUgc3RyZWFtCiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0CiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm47CiAgICB9IC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHkKICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZAoKCiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlOwogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95
ZWQgPSB2YWx1ZTsKICB9Cn0pOwoKRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7CiAgdGhpcy5wdXNoKG51bGwpOwogIHRoaXMuZW5kKCk7CiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpOwp9OwoKfSx7Ii4vX3N0cmVhbV9yZWFkYWJsZSI6NDAwLCIuL19zdHJlYW1fd3JpdGFibGUiOjQwMiwiY29yZS11dGlsLWlzIjoyMTksImluaGVyaXRzIjoyNzgsInByb2Nlc3MtbmV4dGljay1hcmdzIjozNTd9XSwzOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBDb3B5cmlnaHQg
Sm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQovLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29w
eSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAovLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vi
c3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERF
UlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgovLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLgovLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0
cmVhbS4KLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy4KJ3VzZSBzdHJpY3QnOwoKbW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDsKCnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7Ci8qPHJlcGxhY2VtZW50PiovCgoKdmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTsKdXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Ci8qPC9yZXBsYWNlbWVudD4qLwoKdXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJh
bnNmb3JtKTsKCmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpOwogIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpOwp9CgpQYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgY2IobnVsbCwgY2h1bmspOwp9OwoKfSx7Ii4vX3N0cmVhbV90cmFuc2Zvcm0iOjQwMSwiY29yZS11dGlsLWlzIjoyMTksImluaGVyaXRzIjoy
Nzh9XSw0MDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhl
IFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUg
Y29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElD
VUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRX
QVJFLgondXNlIHN0cmljdCc7Ci8qPHJlcGxhY2VtZW50PiovCgp2YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTsKLyo8L3JlcGxhY2VtZW50PiovCgoKbW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTsKLyo8cmVwbGFjZW1lbnQ+Ki8KCnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCi8qPHJlcGxhY2VtZW50PiovCgoKdmFyIER1cGxleDsKLyo8L3JlcGxhY2VtZW50PiovCgpSZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTsKLyo8cmVw
bGFjZW1lbnQ+Ki8KCnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjsKCnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiBFRWxpc3RlbmVyQ291bnQoZW1pdHRlciwgdHlwZSkgewogIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7Cn07Ci8qPC9yZXBsYWNlbWVudD4qLwoKLyo8cmVwbGFjZW1lbnQ+Ki8KCgp2YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCi8qPHJlcGxhY2VtZW50PiovCgoKdmFyIEJ1
ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyOwoKdmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTsKCmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHsKICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspOwp9CgpmdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikgewogIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5Owp9Ci8qPC9yZXBsYWNlbWVudD4qLwoKLyo8cmVwbGFjZW1lbnQ+Ki8K
Cgp2YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpOwp1dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKLyo8L3JlcGxhY2VtZW50PiovCgovKjxyZXBsYWNlbWVudD4qLwoKdmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTsKCnZhciBkZWJ1ZyA9IHZvaWQgMDsKCmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7CiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpOwp9IGVsc2UgewogIGRlYnVnID0gZnVuY3Rpb24gZGVidWcoKSB7
fTsKfQovKjwvcmVwbGFjZW1lbnQ+Ki8KCgp2YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7Cgp2YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpOwoKdmFyIFN0cmluZ0RlY29kZXI7CnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7CnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107CgpmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwg
ZXZlbnQsIGZuKSB7CiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd24KICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS4KICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTsgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueQog
IC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkcwogIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGUKICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suCgogIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50
LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dOwp9CgpmdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkgewogIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxl
IGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlCiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuCiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnQKICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLgogIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLgoKICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFu
Y2VvZiBEdXBsZXg7IC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvCiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXkKCiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7CiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTsgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3Jl
YWQoKSB0byBmaWxsIHRoZSBidWZmZXIKICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zICJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyIgoKICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrOwogIHZhciByZWFkYWJsZUh3bSA9IG9wdGlvbnMucmVhZGFibGVIaWdoV2F0ZXJNYXJrOwogIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7CiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1
cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207IC8vIGNhc3QgdG8gaW50cy4KCiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspOyAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZQogIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVu
dHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuCiAgLy8gYXJyYXkuc2hpZnQoKQoKICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7CiAgdGhpcy5sZW5ndGggPSAwOwogIHRoaXMucGlwZXMgPSBudWxsOwogIHRoaXMucGlwZXNDb3VudCA9IDA7CiAgdGhpcy5mbG93aW5nID0gbnVsbDsKICB0aGlzLmVuZGVkID0gZmFsc2U7CiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7CiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScv
J2RhdGEnIGlzIGVtaXR0ZWQKICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZQogIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCAibGF0ZXIiIHNob3VsZCBnZW5lcmFsbHkgYWxzbwogIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuCgogIHRoaXMuc3luYyA9IHRydWU7IC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5CiAgLy8gdGhhdCB3
ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uCgogIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7CiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTsKICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7CiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTsgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkCgogIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7IC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmcKICAvLyBl
bmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuCiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLgoKICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXMKCiAgdGhpcy5hd2FpdERyYWluID0gMDsgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhh
cyBiZWVuIHNjaGVkdWxlZAoKICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7CiAgdGhpcy5kZWNvZGVyID0gbnVsbDsKICB0aGlzLmVuY29kaW5nID0gbnVsbDsKCiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHsKICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7CiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTsKICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nOwogIH0K
fQoKZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykgewogIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTsKICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7IC8vIGxlZ2FjeQoKICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTsKCiAgaWYgKG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24n
KSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkOwogICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7CiAgfQoKICBTdHJlYW0uY2FsbCh0aGlzKTsKfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHsKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVy
biB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDsKICB9LAogIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW0KICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXQKICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkgewogICAgICByZXR1cm47CiAgICB9IC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHkKICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZAoKCiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRl
c3Ryb3llZCA9IHZhbHVlOwogIH0KfSk7ClJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTsKUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7CgpSZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikgewogIHRoaXMucHVzaChudWxsKTsKICBjYihlcnIpOwp9OyAvLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci4KLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hX
YXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsCi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGQKLy8gd3JpdGUoKSBzb21lIG1vcmUuCgoKUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKICB2YXIgc2tpcENodW5rQ2hlY2s7CgogIGlmICghc3RhdGUub2JqZWN0TW9kZSkgewogICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHsKICAgICAg
ZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7CgogICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7CiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpOwogICAgICAgIGVuY29kaW5nID0gJyc7CiAgICAgIH0KCiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTsKICAgIH0KICB9IGVsc2UgewogICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlOwogIH0KCiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwg
c2tpcENodW5rQ2hlY2spOwp9OyAvLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKQoKClJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7CiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTsKfTsKCmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7CiAgdmFyIHN0YXRlID0gc3RyZWFtLl9y
ZWFkYWJsZVN0YXRlOwoKICBpZiAoY2h1bmsgPT09IG51bGwpIHsKICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTsKICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7CiAgfSBlbHNlIHsKICAgIHZhciBlcjsKICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7CgogICAgaWYgKGVyKSB7CiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTsKICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7CiAgICAgIGlmICh0
eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHsKICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspOwogICAgICB9CgogICAgICBpZiAoYWRkVG9Gcm9udCkgewogICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBz
dGF0ZSwgY2h1bmssIHRydWUpOwogICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7CiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7CgogICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykgewogICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTsKICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0
aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7CiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTsKICAgIH0KICB9CgogIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpOwp9CgpmdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRl
LCBjaHVuaywgYWRkVG9Gcm9udCkgewogIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykgewogICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7CiAgICBzdHJlYW0ucmVhZCgwKTsKICB9IGVsc2UgewogICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby4KICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDsKICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIu
cHVzaChjaHVuayk7CiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTsKICB9CgogIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7Cn0KCmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHsKICB2YXIgZXI7CgogIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7CiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9i
dWZmZXIgY2h1bmsnKTsKICB9CgogIHJldHVybiBlcjsKfSAvLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLgovLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZQovLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCwKLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGEKLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQg
cmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0Ci8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyCi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuCgoKZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7CiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTsKfQoKUmVhZGFibGUucHJvdG90eXBlLmlz
UGF1c2VkID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlOwp9OyAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KCgpSZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7CiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjsKICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpOwogIHRoaXMuX3Jl
YWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7CiAgcmV0dXJuIHRoaXM7Cn07IC8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUIKCgp2YXIgTUFYX0hXTSA9IDB4ODAwMDAwOwoKZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikgewogIGlmIChuID49IE1BWF9IV00pIHsKICAgIG4gPSBNQVhfSFdNOwogIH0gZWxzZSB7CiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW4KICAgIC8vIHRpbnkgYW1vdW50cwogICAgbi0tOwog
ICAgbiB8PSBuID4+PiAxOwogICAgbiB8PSBuID4+PiAyOwogICAgbiB8PSBuID4+PiA0OwogICAgbiB8PSBuID4+PiA4OwogICAgbiB8PSBuID4+PiAxNjsKICAgIG4rKzsKICB9CgogIHJldHVybiBuOwp9IC8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nCi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuCgoKZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkgewogIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAw
ICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDsKICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7CgogIGlmIChuICE9PSBuKSB7CiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWUKICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDsKICB9IC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLgoKCiAgaWYg
KG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7CiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjsgLy8gRG9uJ3QgaGF2ZSBlbm91Z2gKCiAgaWYgKCFzdGF0ZS5lbmRlZCkgewogICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKICAgIHJldHVybiAwOwogIH0KCiAgcmV0dXJuIHN0YXRlLmxlbmd0aDsKfSAvLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LgoK
ClJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHsKICBkZWJ1ZygncmVhZCcsIG4pOwogIG4gPSBwYXJzZUludChuLCAxMCk7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKICB2YXIgbk9yaWcgPSBuOwogIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTsgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZQogIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBq
dXN0IHRyaWdnZXIKICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi4KCiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHsKICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTsKICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpOwogICAgcmV0
dXJuIG51bGw7CiAgfQoKICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7IC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC4KCiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHsKICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpOwogICAgcmV0dXJuIG51bGw7CiAgfSAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlCiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFz
b24gaXMgdGhhdCBpbiBjZXJ0YWluCiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZAogIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2UKICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlbgogIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLgogIC8vCiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6CiAgLy8gMS4gRmlndXJlIG91dCB3aGF0
IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkbwogIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuCiAgLy8KICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLgogIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpcwogIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhbgogIC8vIHRoYXQgdGhlIFJl
YWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmUKICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLgogIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbAogIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXQKICAvLyAncmVhZGFibGUnIGV0Yy4KICAvLwogIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3Rl
ZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi4KICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuCgoKICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlOwogIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTsgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lCgogIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0
YXRlLmhpZ2hXYXRlck1hcmspIHsKICAgIGRvUmVhZCA9IHRydWU7CiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpOwogIH0gLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHkKICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuCgoKICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykgewogICAgZG9SZWFkID0gZmFsc2U7CiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7
CiAgfSBlbHNlIGlmIChkb1JlYWQpIHsKICAgIGRlYnVnKCdkbyByZWFkJyk7CiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTsKICAgIHN0YXRlLnN5bmMgPSB0cnVlOyAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LgoKICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2QKCiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspOwoKICAgIHN0YXRlLnN5
bmMgPSBmYWxzZTsgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSwKICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci4KCiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7CiAgfQoKICB2YXIgcmV0OwogIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDsKCiAgaWYgKHJldCA9PT0g
bnVsbCkgewogICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKICAgIG4gPSAwOwogIH0gZWxzZSB7CiAgICBzdGF0ZS5sZW5ndGggLT0gbjsKICB9CgogIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsKICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vdwogICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLgogICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsgLy8gSWYgd2UgdHJpZWQg
dG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLgoKICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7CiAgfQoKICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpOwogIHJldHVybiByZXQ7Cn07CgpmdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHsKICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjsKCiAgaWYgKHN0YXRlLmRlY29kZXIpIHsKICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5k
KCk7CgogICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgewogICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7CiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDsKICAgIH0KICB9CgogIHN0YXRlLmVuZGVkID0gdHJ1ZTsgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuCgogIGVtaXRSZWFkYWJsZShzdHJlYW0pOwp9IC8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2Ug
dGhpcyBjYW4gdHJpZ2dlcgovLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXIKLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLgoKCmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7CiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7CgogIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7CiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxl
Jywgc3RhdGUuZmxvd2luZyk7CiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlOwogICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pOwogIH0KfQoKZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHsKICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpOwogIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpOwogIGZsb3coc3RyZWFtKTsKfSAvLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAn
cmVhZGFibGUnIGV2ZW50LAovLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkCi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmCi8vIGl0J3MgaW4gcHJvZ3Jlc3MuCi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sCi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuCgoKZnVu
Y3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7CiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkgewogICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlOwogICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTsKICB9Cn0KCmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHsKICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoOwoKICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRl
LmhpZ2hXYXRlck1hcmspIHsKICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpOwogICAgc3RyZWFtLnJlYWQoMCk7CiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuCiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoOwogIH0KCiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTsKfSAvLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuCi8vIGNhbGwgY2Io
ZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguCi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCAibGVuZ3RoIiBpcyBzb21ld2hhdAovLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuCgoKUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHsKICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTsKfTsKClJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rp
b24gKGRlc3QsIHBpcGVPcHRzKSB7CiAgdmFyIHNyYyA9IHRoaXM7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKCiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7CiAgICBjYXNlIDA6CiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDsKICAgICAgYnJlYWs7CgogICAgY2FzZSAxOgogICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07CiAgICAgIGJyZWFrOwoKICAgIGRlZmF1bHQ6CiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7CiAgICAgIGJyZWFrOwogIH0KCiAgc3RhdGUucGlwZXND
b3VudCArPSAxOwogIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7CiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjsKICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlOwogIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTsKICBkZXN0Lm9u
KCd1bnBpcGUnLCBvbnVucGlwZSk7CgogIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7CiAgICBkZWJ1Zygnb251bnBpcGUnKTsKCiAgICBpZiAocmVhZGFibGUgPT09IHNyYykgewogICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7CiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTsKICAgICAgICBjbGVhbnVwKCk7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIG9uZW5kKCkgewogICAgZGVidWcoJ29uZW5kJyk7CiAgICBk
ZXN0LmVuZCgpOwogIH0gLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlcgogIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKQogIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzCiAgLy8gdG9vIHNsb3cuCgoKICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7CiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTsKICB2YXIgY2xlYW5lZFVwID0gZmFs
c2U7CgogIGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICBkZWJ1ZygnY2xlYW51cCcpOyAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuCgogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTsKICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTsKICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7CiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOwogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcign
dW5waXBlJywgb251bnBpcGUpOwogICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7CiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7CiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpOwogICAgY2xlYW5lZFVwID0gdHJ1ZTsgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpcwogICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0CiAgICAvLyBmbG93aW5nIGFnYWluLgog
ICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LgogICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLgoKICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTsKICB9IC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2Un
bGwgZW5kIHVwCiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2UKICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLgogIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi4KCgogIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7CiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTsKCiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7
CiAgICBkZWJ1Zygnb25kYXRhJyk7CiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7CiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7CgogICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHsKICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlCiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlCiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2Uu
CiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLgogICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7CiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTsKICAgICAgICBzcmMuX3JlYWRhYmxl
U3RhdGUuYXdhaXREcmFpbisrOwogICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlOwogICAgICB9CgogICAgICBzcmMucGF1c2UoKTsKICAgIH0KICB9IC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LgogIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy4KCgogIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHsKICAgIGRlYnVnKCdvbmVycm9yJywgZXIpOwogICAgdW5waXBlKCk7CiAgICBkZXN0LnJlbW92ZUxpc3RlbmVy
KCdlcnJvcicsIG9uZXJyb3IpOwogICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTsKICB9IC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy4KCgogIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTsgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS4KCiAgZnVuY3Rpb24gb25jbG9zZSgpIHsKICAgIGRlc3Qu
cmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTsKICAgIHVucGlwZSgpOwogIH0KCiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpOwoKICBmdW5jdGlvbiBvbmZpbmlzaCgpIHsKICAgIGRlYnVnKCdvbmZpbmlzaCcpOwogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTsKICAgIHVucGlwZSgpOwogIH0KCiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7CgogIGZ1bmN0aW9uIHVucGlwZSgpIHsKICAgIGRlYnVnKCd1bnBpcGUnKTsKICAgIHNyYy51bnBpcGUoZGVzdCk7CiAgfSAv
LyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0bwoKCiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTsgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LgoKICBpZiAoIXN0YXRlLmZsb3dpbmcpIHsKICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpOwogICAgc3JjLnJlc3VtZSgpOwogIH0KCiAgcmV0dXJuIGRlc3Q7Cn07CgpmdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRl
OwogICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7CiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tOwoKICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHsKICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7CiAgICAgIGZsb3coc3JjKTsKICAgIH0KICB9Owp9CgpSZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwog
IHZhciB1bnBpcGVJbmZvID0gewogICAgaGFzVW5waXBlZDogZmFsc2UKICB9OyAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuCgogIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpczsgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLgoKICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgewogICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuCiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5w
aXBlcykgcmV0dXJuIHRoaXM7CiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlczsgLy8gZ290IGEgbWF0Y2guCgogICAgc3RhdGUucGlwZXMgPSBudWxsOwogICAgc3RhdGUucGlwZXNDb3VudCA9IDA7CiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7CiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTsKICAgIHJldHVybiB0aGlzOwogIH0gLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy4KCgogIGlmICghZGVzdCkgewogICAgLy8gcmVtb3ZlIGFsbC4K
ICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzOwogICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7CiAgICBzdGF0ZS5waXBlcyA9IG51bGw7CiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDsKICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0gLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS4KCgogIHZhciBpbmRleCA9IGlu
ZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpOwogIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzOwogIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7CiAgc3RhdGUucGlwZXNDb3VudCAtPSAxOwogIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdOwogIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7CiAgcmV0dXJuIHRoaXM7Cn07IC8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3IKLy8gRW5zdXJlIHJlYWRhYmxlIGxp
c3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmcKCgpSZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7CiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pOwoKICBpZiAoZXYgPT09ICdkYXRhJykgewogICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkCiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTsKICB9IGVsc2UgaWYgKGV2
ID09PSAncmVhZGFibGUnKSB7CiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwoKICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHsKICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlOwogICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTsKCiAgICAgIGlmICghc3RhdGUucmVhZGluZykgewogICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTsKICAgICAgfSBlbHNlIGlm
IChzdGF0ZS5sZW5ndGgpIHsKICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiByZXM7Cn07CgpSZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247CgpmdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHsKICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7CiAgc2VsZi5yZWFkKDApOwp9IC8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUEkK
Ly8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLgoKClJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKCiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7CiAgICBkZWJ1ZygncmVzdW1lJyk7CiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTsKICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7CiAgfQoKICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7CiAgaWYgKCFzdGF0ZS5y
ZXN1bWVTY2hlZHVsZWQpIHsKICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7CiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7CiAgfQp9CgpmdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHsKICBpZiAoIXN0YXRlLnJlYWRpbmcpIHsKICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7CiAgICBzdHJlYW0ucmVhZCgwKTsKICB9CgogIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlOwogIHN0YXRlLmF3YWl0RHJhaW4gPSAwOwogIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTsKICBmbG93
KHN0cmVhbSk7CiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApOwp9CgpSZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7CiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7CgogIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7CiAgICBkZWJ1ZygncGF1c2UnKTsKICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlOwogICAgdGhpcy5lbWl0KCdwYXVz
ZScpOwogIH0KCiAgcmV0dXJuIHRoaXM7Cn07CgpmdW5jdGlvbiBmbG93KHN0cmVhbSkgewogIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpOwoKICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fQp9IC8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuCi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS4KLy8gSXQgaXMgYW4g
dWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuCgoKUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7CiAgdmFyIF90aGlzID0gdGhpczsKCiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKICB2YXIgcGF1c2VkID0gZmFsc2U7CiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7CiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTsKCiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHsKICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTsK
ICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7CiAgICB9CgogICAgX3RoaXMucHVzaChudWxsKTsKICB9KTsKICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHsKICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTsKICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspOyAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGUKCiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51
bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47CgogICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspOwoKICAgIGlmICghcmV0KSB7CiAgICAgIHBhdXNlZCA9IHRydWU7CiAgICAgIHN0cmVhbS5wYXVzZSgpOwogICAgfQogIH0pOyAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuCiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuCgogIGZvciAodmFy
IGkgaW4gc3RyZWFtKSB7CiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9KGkpOwogICAgfQogIH0gLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLgoKCiAgZm9yICh2YXIgbiA9IDA7IG4gPCBr
UHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHsKICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpOwogIH0gLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZQogIC8vIHVuZGVybHlpbmcgc3RyZWFtLgoKCiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7CiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pOwoKICAgIGlmIChwYXVzZWQpIHsKICAgICAgcGF1c2VkID0gZmFsc2U7CiAgICAgIHN0
cmVhbS5yZXN1bWUoKTsKICAgIH0KICB9OwoKICByZXR1cm4gdGhpczsKfTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7CiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGUKICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW4KICAvLyB1c2VybGFuZCB3aWxsIGZhaWwKICBlbnVtZXJhYmxlOiBmYWxzZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJl
dHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7CiAgfQp9KTsgLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LgoKUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7IC8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy4KLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC4KLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hl
biBtYWtpbmcKLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS4KCmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7CiAgLy8gbm90aGluZyBidWZmZXJlZAogIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsOwogIHZhciByZXQ7CiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7CiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3QKICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBz
dGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTsKICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpOwogIH0gZWxzZSB7CiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdAogICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7CiAgfQogIHJldHVybiByZXQ7Cn0gLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVm
ZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLgovLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZwovLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LgoKCmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7CiAgdmFyIHJldDsKCiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHsKICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdz
CiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTsKICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7CiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHsKICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaAogICAgcmV0ID0gbGlzdC5zaGlmdCgpOwogIH0gZWxzZSB7CiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXIKICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNv
cHlGcm9tQnVmZmVyKG4sIGxpc3QpOwogIH0KCiAgcmV0dXJuIHJldDsKfSAvLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhCi8vIGNodW5rcy4KLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmcKLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS4KCgpmdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7CiAgdmFyIHAgPSBsaXN0Lmhl
YWQ7CiAgdmFyIGMgPSAxOwogIHZhciByZXQgPSBwLmRhdGE7CiAgbiAtPSByZXQubGVuZ3RoOwoKICB3aGlsZSAocCA9IHAubmV4dCkgewogICAgdmFyIHN0ciA9IHAuZGF0YTsKICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47CiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pOwogICAgbiAtPSBuYjsKCiAgICBpZiAobiA9PT0gMCkgewogICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHsKICAgICAgICArK2M7CiAgICAgICAg
aWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICBsaXN0LmhlYWQgPSBwOwogICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7CiAgICAgIH0KCiAgICAgIGJyZWFrOwogICAgfQoKICAgICsrYzsKICB9CgogIGxpc3QubGVuZ3RoIC09IGM7CiAgcmV0dXJuIHJldDsKfSAvLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuCi8vIFRoaXMg
ZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nCi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuCgoKZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkgewogIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7CiAgdmFyIHAgPSBsaXN0LmhlYWQ7CiAgdmFyIGMgPSAxOwogIHAuZGF0YS5jb3B5KHJldCk7CiAgbiAtPSBwLmRhdGEubGVuZ3RoOwoKICB3aGlsZSAocCA9IHAubmV4dCkgewogICAgdmFyIGJ1ZiA9IHAuZGF0YTsKICAg
IHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47CiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7CiAgICBuIC09IG5iOwoKICAgIGlmIChuID09PSAwKSB7CiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkgewogICAgICAgICsrYzsKICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIGxpc3QuaGVhZCA9IHA7CiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNl
KG5iKTsKICAgICAgfQoKICAgICAgYnJlYWs7CiAgICB9CgogICAgKytjOwogIH0KCiAgbGlzdC5sZW5ndGggLT0gYzsKICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7IC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGEKICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uCgogIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3Io
JyJlbmRSZWFkYWJsZSgpIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpOwoKICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHsKICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTsKICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTsKICB9Cn0KCmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkgewogIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LgogIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHsKICAgIHN0YXRl
LmVuZEVtaXR0ZWQgPSB0cnVlOwogICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7CiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7CiAgfQp9CgpmdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7CiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7CiAgfQoKICByZXR1cm4gLTE7Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRl
ZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiLi9fc3RyZWFtX2R1cGxleCI6Mzk4LCIuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCI6NDAzLCIuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveSI6NDA0LCIuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtIjo0MDUsIl9wcm9jZXNzIjozNTgsImNvcmUtdXRpbC1pcyI6MjE5LCJldmVudHMiOjI1OCwiaW5oZXJpdHMiOjI3OCwiaXNhcnJheSI6MjgwLCJwcm9jZXNzLW5leHRpY2stYXJncyI6MzU3LCJzYWZlLWJ1
ZmZlciI6Mzg0LCJzdHJpbmdfZGVjb2Rlci8iOjQxMCwidXRpbCI6MTg1fV0sNDAxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRv
IGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwov
LyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1Mg
Rk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1Mg
SU4gVEhFIFNPRlRXQVJFLgovLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvCi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgImZpbHRlciIsCi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlCi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGQKLy8gYmUgYSB2YWxp
ZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKQovLwovLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhCi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLAovLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW4KLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJl
LgovLwovLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6Ci8vCi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZQovLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpCi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXMKLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVh
ZChuKSB1bnRpbAovLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuCi8vCi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuCi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlCi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZQovLyB3cml0dGVuIGNodW5rIHdvdWxk
IHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdAovLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG8KLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LgovLwovLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsCi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8g
c3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsCi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmcKLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXMKLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueQovLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixm
ZixmZixmZn0gd291bGQgcmVzdWx0IGluCi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbAovLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluCi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbAovLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0
ZSBjb3VsZAovLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LgovLwovLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rCi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWwKLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuCid1c2Ugc3RyaWN0JzsKCm1vZHVsZS5leHBvcnRzID0gVHJh
bnNmb3JtOwoKdmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTsKLyo8cmVwbGFjZW1lbnQ+Ki8KCgp2YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpOwp1dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKLyo8L3JlcGxhY2VtZW50PiovCgp1dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTsKCmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7CiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7CiAgdHMudHJhbnNmb3JtaW5n
ID0gZmFsc2U7CiAgdmFyIGNiID0gdHMud3JpdGVjYjsKCiAgaWYgKCFjYikgewogICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTsKICB9CgogIHRzLndyaXRlY2h1bmsgPSBudWxsOwogIHRzLndyaXRlY2IgPSBudWxsOwogIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYAogICAgdGhpcy5wdXNoKGRhdGEpOwogIGNiKGVyKTsKICB2YXIgcnMgPSB0aGlz
Ll9yZWFkYWJsZVN0YXRlOwogIHJzLnJlYWRpbmcgPSBmYWxzZTsKCiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7CiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspOwogIH0KfQoKZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7CiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7CiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7CiAgICBhZnRl
clRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSwKICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLAogICAgdHJhbnNmb3JtaW5nOiBmYWxzZSwKICAgIHdyaXRlY2I6IG51bGwsCiAgICB3cml0ZWNodW5rOiBudWxsLAogICAgd3JpdGVlbmNvZGluZzogbnVsbAogIH07IC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLgoKICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9y
ZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5ncwogIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGUKICAvLyBzeW5jIGd1YXJkIGZsYWcuCgogIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlOwoKICBpZiAob3B0aW9ucykgewogICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07CiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09
ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDsKICB9IC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy4KCgogIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7Cn0KCmZ1bmN0aW9uIHByZWZpbmlzaCgpIHsKICB2YXIgX3RoaXMgPSB0aGlzOwoKICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7CiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHsKICAgICAgZG9uZShfdGhpcywg
ZXIsIGRhdGEpOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7CiAgfQp9CgpUcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7CiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlOwogIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpOwp9OyAvLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiEKLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBp
bXBsZW1lbnRhdGlvbiBjbGFzc2VzLgovLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLgovLwovLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXQKLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy4KLy8KLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3MKLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xl
IG9wZXJhdGlvbi4gIElmIHlvdQovLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLgoKClRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7Cn07CgpUcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7CiAg
dHMud3JpdGVjYiA9IGNiOwogIHRzLndyaXRlY2h1bmsgPSBjaHVuazsKICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7CgogIGlmICghdHMudHJhbnNmb3JtaW5nKSB7CiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwogICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7CiAgfQp9OyAvLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLgovLyBfdHJhbnNm
b3JtIGRvZXMgYWxsIHRoZSB3b3JrLgovLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLgoKClRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikgewogIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlOwoKICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHsKICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7CgogICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRz
LndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTsKICB9IGVsc2UgewogICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpbgogICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuCiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTsKICB9Cn07CgpUcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHsKICB2YXIgX3RoaXMyID0gdGhpczsKCiAgRHVwbGV4LnByb3RvdHlw
ZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHsKICAgIGNiKGVycjIpOwoKICAgIF90aGlzMi5lbWl0KCdjbG9zZScpOwogIH0pOwp9OwoKZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7CiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwogIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYAogICAgc3RyZWFtLnB1c2goZGF0YSk7IC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUg
d3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnMKICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWQKCiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7CiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTsKICByZXR1cm4gc3RyZWFt
LnB1c2gobnVsbCk7Cn0KCn0seyIuL19zdHJlYW1fZHVwbGV4IjozOTgsImNvcmUtdXRpbC1pcyI6MjE5LCJpbmhlcml0cyI6Mjc4fV0sNDAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxzZXRJbW1lZGlhdGUpewovLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKLy8gY29weSBv
ZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQovLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAovLyBwZXJzb25zIHRvIHdob20gdGhlIFNv
ZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJ
TkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgovLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwg
T1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLgovLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGwKLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuCid1c2Ugc3RyaWN0JzsKLyo8cmVwbGFjZW1lbnQ+Ki8KCnZhciBwbmEgPSByZXF1aXJlKCdw
cm9jZXNzLW5leHRpY2stYXJncycpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCgptb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlOwovKiA8cmVwbGFjZW1lbnQ+ICovCgpmdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgdGhpcy5jaHVuayA9IGNodW5rOwogIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZzsKICB0aGlzLmNhbGxiYWNrID0gY2I7CiAgdGhpcy5uZXh0ID0gbnVsbDsKfSAvLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3QKLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2Ug
Zm9yIGVhY2ggc3RyZWFtCgoKZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkgewogIHZhciBfdGhpcyA9IHRoaXM7CgogIHRoaXMubmV4dCA9IG51bGw7CiAgdGhpcy5lbnRyeSA9IG51bGw7CgogIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkgewogICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTsKICB9Owp9Ci8qIDwvcmVwbGFjZW1lbnQ+ICovCgovKjxyZXBsYWNlbWVudD4qLwoKCnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZl
cnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7Ci8qPC9yZXBsYWNlbWVudD4qLwoKLyo8cmVwbGFjZW1lbnQ+Ki8KCnZhciBEdXBsZXg7Ci8qPC9yZXBsYWNlbWVudD4qLwoKV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7Ci8qPHJlcGxhY2VtZW50PiovCgp2YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpOwp1dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKLyo8L3JlcGxhY2VtZW50PiovCgovKjxyZXBs
YWNlbWVudD4qLwoKdmFyIGludGVybmFsVXRpbCA9IHsKICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJykKfTsKLyo8L3JlcGxhY2VtZW50PiovCgovKjxyZXBsYWNlbWVudD4qLwoKdmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTsKLyo8L3JlcGxhY2VtZW50PiovCgovKjxyZXBsYWNlbWVudD4qLwoKCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24g
KCkge307CgpmdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7CiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTsKfQoKZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHsKICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTsKfQovKjwvcmVwbGFjZW1lbnQ+Ki8KCgp2YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpOwoKdXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTsKCmZ1bmN0aW9uIG5vcCgp
IHt9CgpmdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkgewogIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlCiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuCiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnQKICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFk
YWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLgogIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLgoKICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7IC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbQogIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy4KCiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9i
amVjdE1vZGU7CiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTsgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZQogIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmCiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKQoKICB2YXIgaHdtID0gb3B0aW9ucy5oaWdo
V2F0ZXJNYXJrOwogIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrOwogIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7CiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207IC8vIGNhc3Qg
dG8gaW50cy4KCiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspOyAvLyBpZiBfZmluYWwgaGFzIGJlZW4gY2FsbGVkCgogIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTsgLy8gZHJhaW4gZXZlbnQgZmxhZy4KCiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTsgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKCkKCiAgdGhpcy5lbmRpbmcgPSBmYWxzZTsgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZAoKICB0aGlzLmVuZGVkID0gZmFsc2U7IC8vIHdo
ZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZAoKICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7IC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZAoKICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlOyAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT8KICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmcKICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLgoKICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29k
ZVN0cmluZ3MgPT09IGZhbHNlOwogIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTsgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZwogIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS4KICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guCgogIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwg
J3V0ZjgnOyAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudAogIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmcKICAvLyBzb2NrZXQgb3IgZmlsZS4KCiAgdGhpcy5sZW5ndGggPSAwOyAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLgoKICB0aGlzLndyaXRpbmcgPSBmYWxzZTsgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAu
dW5jb3JrKCkgY2FsbAoKICB0aGlzLmNvcmtlZCA9IDA7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LAogIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55CiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgImxhdGVyIiBzaG91bGQgZ2VuZXJhbGx5IGFsc28KICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC4KCiAgdGhpcy5zeW5j
ID0gdHJ1ZTsgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaAogIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0CiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uCgogIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlOyAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpCgogIHRoaXMub253cml0ZSA9
IGZ1bmN0aW9uIChlcikgewogICAgb253cml0ZShzdHJlYW0sIGVyKTsKICB9OyAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYikKCgogIHRoaXMud3JpdGVjYiA9IG51bGw7IC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC4KCiAgdGhpcy53cml0ZWxlbiA9IDA7CiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsOwogIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7IC8vIG51bWJlciBvZiBw
ZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzCiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkCgogIHRoaXMucGVuZGluZ2NiID0gMDsgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNicwogIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zCgogIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTsgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1p
dHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW4KCiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTsgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHMKCiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7IC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXMKICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvCgogIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7Cn0K
CldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHsKICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0OwogIHZhciBvdXQgPSBbXTsKCiAgd2hpbGUgKGN1cnJlbnQpIHsKICAgIG91dC5wdXNoKGN1cnJlbnQpOwogICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDsKICB9CgogIHJldHVybiBvdXQ7Cn07CgooZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7CiAgICAg
IGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7CiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKQogICAgfSk7CiAgfSBjYXRjaCAoXykge30KfSkoKTsgLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsCi8vIHdob3NlIHByb3RvdHlwZSBj
aGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS4KCgp2YXIgcmVhbEhhc0luc3RhbmNlOwoKaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykgewogIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7CiAgICB2YWx1
ZTogZnVuY3Rpb24gdmFsdWUob2JqZWN0KSB7CiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTsKICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7CiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTsKICAgIH0KICB9KTsKfSBlbHNlIHsKICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiByZWFsSGFzSW5zdGFuY2Uob2JqZWN0KSB7CiAgICByZXR1cm4gb2JqZWN0IGluc3Rh
bmNlb2YgdGhpczsKICB9Owp9CgpmdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7CiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTsgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uCiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgCiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLgogIC8vIFRyeWluZyB0byB1
c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZQogIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvcgogIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi4KCiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgewogICAgcmV0dXJuIG5ldyBXcml0
YWJsZShvcHRpb25zKTsKICB9CgogIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTsgLy8gbGVnYWN5LgoKICB0aGlzLndyaXRhYmxlID0gdHJ1ZTsKCiAgaWYgKG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlOwogICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7CiAgICBpZiAodHlwZW9mIG9w
dGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsOwogIH0KCiAgU3RyZWFtLmNhbGwodGhpcyk7Cn0gLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLgoKCldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkgewogIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcg
RXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7Cn07CgpmdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHsKICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpOyAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYgoKICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7CiAgcG5hLm5leHRUaWNrKGNiLCBlcik7Cn0gLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5
IGZvciB0aGUgcGFydGljdWxhcgovLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkCi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS4KCgpmdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikgewogIHZhciB2YWxpZCA9IHRydWU7CiAgdmFyIGVyID0gZmFsc2U7CgogIGlmIChjaHVuayA9PT0gbnVsbCkgewogICAgZXIgPSBuZXcgVHlwZUVycm9y
KCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpOwogIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7CiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTsKICB9CgogIGlmIChlcikgewogICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwogICAgcG5hLm5leHRUaWNrKGNiLCBlcik7CiAgICB2YWxpZCA9IGZhbHNlOwogIH0KCiAgcmV0dXJuIHZhbGlkOwp9
CgpXcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7CiAgdmFyIHJldCA9IGZhbHNlOwoKICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTsKCiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7CiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspOwogIH0KCiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykg
ewogICAgY2IgPSBlbmNvZGluZzsKICAgIGVuY29kaW5nID0gbnVsbDsKICB9CgogIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nOwogIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wOwogIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkgewogICAgc3RhdGUucGVuZGluZ2NiKys7CiAg
ICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7CiAgfQogIHJldHVybiByZXQ7Cn07CgpXcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwogIHN0YXRlLmNvcmtlZCsrOwp9OwoKV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoKICBpZiAoc3RhdGUuY29ya2VkKSB7CiAgICBzdGF0ZS5jb3JrZWQt
LTsKICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTsKICB9Cn07CgpXcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7CiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuCiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9
PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTsKICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpOwogIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5j
b2Rpbmc7CiAgcmV0dXJuIHRoaXM7Cn07CgpmdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7CiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHsKICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTsKICB9CgogIHJldHVybiBjaHVuazsKfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHsKICAv
LyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZQogIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpbgogIC8vIHVzZXJsYW5kIHdpbGwgZmFpbAogIGVudW1lcmFibGU6IGZhbHNlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyazsKICB9Cn0pOyAvLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXMKLy8gaW4gdGhlIHF1
ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGUKLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy4KCmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHsKICBpZiAoIWlzQnVmKSB7CiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTsKCiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7CiAgICAgIGlzQnVm
ID0gdHJ1ZTsKICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJzsKICAgICAgY2h1bmsgPSBuZXdDaHVuazsKICAgIH0KICB9CgogIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDsKICBzdGF0ZS5sZW5ndGggKz0gbGVuOwogIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrOyAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS4KCiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7Cgog
IGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkgewogICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0OwogICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHsKICAgICAgY2h1bms6IGNodW5rLAogICAgICBlbmNvZGluZzogZW5jb2RpbmcsCiAgICAgIGlzQnVmOiBpc0J1ZiwKICAgICAgY2FsbGJhY2s6IGNiLAogICAgICBuZXh0OiBudWxsCiAgICB9OwoKICAgIGlmIChsYXN0KSB7CiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7CiAgICB9IGVsc2Ugewog
ICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0OwogICAgfQoKICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7CiAgfSBlbHNlIHsKICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7CiAgfQoKICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgc3RhdGUud3JpdGVsZW4gPSBsZW47CiAgc3RhdGUud3JpdGVj
YiA9IGNiOwogIHN0YXRlLndyaXRpbmcgPSB0cnVlOwogIHN0YXRlLnN5bmMgPSB0cnVlOwogIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTsKICBzdGF0ZS5zeW5jID0gZmFsc2U7Cn0KCmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHsKICAtLXN0YXRlLnBlbmRpbmdjYjsKCiAgaWYgKHN5bmMpIHsKICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3
ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHkKICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrCiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTsgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW4KICAgIC8vIGFmdGVyIGVycm9yCgogICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTsKICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlOwogICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwog
IH0gZWxzZSB7CiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWYKICAgIC8vIGl0IGlzIGFzeW5jCiAgICBjYihlcik7CiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTsKICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTsgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdAogICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvcgoKICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpOwogIH0KfQoKZnVuY3Rpb24gb253cml0ZVN0YXRlVXBk
YXRlKHN0YXRlKSB7CiAgc3RhdGUud3JpdGluZyA9IGZhbHNlOwogIHN0YXRlLndyaXRlY2IgPSBudWxsOwogIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjsKICBzdGF0ZS53cml0ZWxlbiA9IDA7Cn0KCmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikgewogIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTsKICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7CiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjsKICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpOwogIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwg
c3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7CiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldAogICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7CgogICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgewogICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTsKICAgIH0KCiAgICBpZiAoc3luYykgewogICAgICAvKjxyZXBsYWNlbWVu
dD4qLwogICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7CiAgICAgIC8qPC9yZXBsYWNlbWVudD4qLwogICAgfSBlbHNlIHsKICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHsKICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7CiAgc3RhdGUucGVuZGluZ2NiLS07CiAgY2IoKTsKICBmaW5pc2hNYXli
ZShzdHJlYW0sIHN0YXRlKTsKfSAvLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndAovLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuCi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuCgoKZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHsKICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikgewog
ICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7CiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTsKICB9Cn0gLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXQKCgpmdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7CiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7CiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0OwoKICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkgewogICAgLy8gRmFzdCBjYXNlLCB3
cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKQogICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDsKICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7CiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlOwogICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7CiAgICB2YXIgY291bnQgPSAwOwogICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlOwoKICAgIHdoaWxlIChlbnRyeSkgewogICAgICBidWZmZXJbY291bnRdID0gZW50cnk7CiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZl
cnMgPSBmYWxzZTsKICAgICAgZW50cnkgPSBlbnRyeS5uZXh0OwogICAgICBjb3VudCArPSAxOwogICAgfQoKICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVyczsKICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTsgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWUKICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZQoKICAgIHN0YXRlLnBlbmRp
bmdjYisrOwogICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7CgogICAgaWYgKGhvbGRlci5uZXh0KSB7CiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0OwogICAgICBob2xkZXIubmV4dCA9IG51bGw7CiAgICB9IGVsc2UgewogICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7CiAgICB9CgogICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwOwogIH0gZWxzZSB7CiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBv
bmUtYnktb25lCiAgICB3aGlsZSAoZW50cnkpIHsKICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7CiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nOwogICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjazsKICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoOwogICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpOwogICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7CiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENv
dW50LS07IC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuCiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuCiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHkKICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uCgogICAgICBpZiAoc3RhdGUud3JpdGluZykgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAg
aWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsKICB9CgogIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5OwogIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTsKfQoKV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7Cn07CgpXcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7CgpXcml0YWJsZS5wcm90b3R5cGUuZW5k
ID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoKICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7CiAgICBjYiA9IGNodW5rOwogICAgY2h1bmsgPSBudWxsOwogICAgZW5jb2RpbmcgPSBudWxsOwogIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7CiAgICBjYiA9IGVuY29kaW5nOwogICAgZW5jb2RpbmcgPSBudWxsOwogIH0KCiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQp
IHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTsgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3MKCiAgaWYgKHN0YXRlLmNvcmtlZCkgewogICAgc3RhdGUuY29ya2VkID0gMTsKICAgIHRoaXMudW5jb3JrKCk7CiAgfSAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuCgoKICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7Cn07CgpmdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7CiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGgg
PT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZzsKfQoKZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHsKICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHsKICAgIHN0YXRlLnBlbmRpbmdjYi0tOwoKICAgIGlmIChlcnIpIHsKICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTsKICAgIH0KCiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7CiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7CiAgICBmaW5pc2hN
YXliZShzdHJlYW0sIHN0YXRlKTsKICB9KTsKfQoKZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHsKICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkgewogICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHN0YXRlLnBlbmRpbmdjYisrOwogICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7CiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpOwogICAgfSBlbHNlIHsKICAgICAgc3RhdGUucHJlZmluaXNo
ZWQgPSB0cnVlOwogICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7CiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTsKCiAgaWYgKG5lZWQpIHsKICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTsKCiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7CiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTsKICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpOwogICAgfQogIH0KCiAgcmV0dXJuIG5lZWQ7Cn0KCmZ1bmN0aW9u
IGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7CiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTsKICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTsKCiAgaWYgKGNiKSB7CiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpOwogIH0KCiAgc3RhdGUuZW5kZWQgPSB0cnVlOwogIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlOwp9CgpmdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7CiAgdmFyIGVudHJ5ID0gY29ya1JlcS5l
bnRyeTsKICBjb3JrUmVxLmVudHJ5ID0gbnVsbDsKCiAgd2hpbGUgKGVudHJ5KSB7CiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjazsKICAgIHN0YXRlLnBlbmRpbmdjYi0tOwogICAgY2IoZXJyKTsKICAgIGVudHJ5ID0gZW50cnkubmV4dDsKICB9CgogIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHsKICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTsKICB9IGVsc2UgewogICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTsKICB9Cn0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0
eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7CiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7CiAgfSwKICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtCiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0CiAgICBpZiAoIXRoaXMu
X3dyaXRhYmxlU3RhdGUpIHsKICAgICAgcmV0dXJuOwogICAgfSAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5CiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWQKCgogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTsKICB9Cn0pOwpXcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7CldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95OwoKV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95
ID0gZnVuY3Rpb24gKGVyciwgY2IpIHsKICB0aGlzLmVuZCgpOwogIGNiKGVycik7Cn07Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoInRpbWVycyIpLnNldEltbWVkaWF0ZSkKCn0seyIuL19zdHJlYW1fZHVwbGV4IjozOTgsIi4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Ijo0MDQs
Ii4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0iOjQwNSwiX3Byb2Nlc3MiOjM1OCwiY29yZS11dGlsLWlzIjoyMTksImluaGVyaXRzIjoyNzgsInByb2Nlc3MtbmV4dGljay1hcmdzIjozNTcsInNhZmUtYnVmZmVyIjozODQsInRpbWVycyI6NDExLCJ1dGlsLWRlcHJlY2F0ZSI6NDEyfV0sNDAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3Ry
dWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjsKCnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpOwoKZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7CiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkgewogICAgX2NsYXNzQ2FsbENo
ZWNrKHRoaXMsIEJ1ZmZlckxpc3QpOwoKICAgIHRoaXMuaGVhZCA9IG51bGw7CiAgICB0aGlzLnRhaWwgPSBudWxsOwogICAgdGhpcy5sZW5ndGggPSAwOwogIH0KCiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikgewogICAgdmFyIGVudHJ5ID0gewogICAgICBkYXRhOiB2LAogICAgICBuZXh0OiBudWxsCiAgICB9OwogICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5OwogICAgdGhpcy50YWlsID0gZW50cnk7CiAgICAr
K3RoaXMubGVuZ3RoOwogIH07CgogIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHsKICAgIHZhciBlbnRyeSA9IHsKICAgICAgZGF0YTogdiwKICAgICAgbmV4dDogdGhpcy5oZWFkCiAgICB9OwogICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTsKICAgIHRoaXMuaGVhZCA9IGVudHJ5OwogICAgKyt0aGlzLmxlbmd0aDsKICB9OwoKICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkgewogICAgaWYgKHRoaXMubGVuZ3Ro
ID09PSAwKSByZXR1cm47CiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7CiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDsKICAgIC0tdGhpcy5sZW5ndGg7CiAgICByZXR1cm4gcmV0OwogIH07CgogIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7CiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsOwogICAgdGhpcy5sZW5ndGggPSAwOwogIH07CgogIEJ1ZmZlckxpc3Qu
cHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHsKICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnOwogICAgdmFyIHAgPSB0aGlzLmhlYWQ7CiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7CgogICAgd2hpbGUgKHAgPSBwLm5leHQpIHsKICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7CiAgICB9CgogICAgcmV0dXJuIHJldDsKICB9OwoKICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikgewogICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFs
bG9jKDApOwogICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7CiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApOwogICAgdmFyIHAgPSB0aGlzLmhlYWQ7CiAgICB2YXIgaSA9IDA7CgogICAgd2hpbGUgKHApIHsKICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7CiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDsKICAgICAgcCA9IHAubmV4dDsKICAgIH0KCiAgICByZXR1cm4gcmV0OwogIH07CgogIHJldHVybiBCdWZmZXJMaXN0Owp9KCk7CgppZiAodXRpbCAm
JiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkgewogIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoewogICAgICBsZW5ndGg6IHRoaXMubGVuZ3RoCiAgICB9KTsKICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7CiAgfTsKfQoKfSx7InNhZmUtYnVmZmVyIjozODQsInV0aWwiOjE4NX1dLDQwNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ug
c3RyaWN0JzsKLyo8cmVwbGFjZW1lbnQ+Ki8KCnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSQoKCmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikgewogIHZhciBfdGhpcyA9IHRoaXM7CgogIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7CiAgdmFyIHdyaXRhYmxlRGVz
dHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDsKCiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7CiAgICBpZiAoY2IpIHsKICAgICAgY2IoZXJyKTsKICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7CiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTsKICAgIH0KCiAgICByZXR1cm4gdGhpczsKICB9IC8v
IHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlcgogIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrcwoKCiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHsKICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTsKICB9IC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGwKCgogIGlm
ICh0aGlzLl93cml0YWJsZVN0YXRlKSB7CiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7CiAgfQoKICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7CiAgICBpZiAoIWNiICYmIGVycikgewogICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpOwoKICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7CiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTsKICAgICAgfQogICAgfSBlbHNlIGlmIChjYikgewog
ICAgICBjYihlcnIpOwogICAgfQogIH0pOwoKICByZXR1cm4gdGhpczsKfQoKZnVuY3Rpb24gdW5kZXN0cm95KCkgewogIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7CiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlOwogICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7CiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7CiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTsKICB9CgogIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7CiAg
ICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlOwogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlOwogICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTsKICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTsKICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7CiAgfQp9CgpmdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHsKICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAg
ZGVzdHJveTogZGVzdHJveSwKICB1bmRlc3Ryb3k6IHVuZGVzdHJveQp9OwoKfSx7InByb2Nlc3MtbmV4dGljay1hcmdzIjozNTd9XSw0MDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMzgxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6MzgxLCJldmVudHMiOjI1OH1dLDQwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlBhc3NUaHJvdWdoOwoKfSx7
Ii4vcmVhZGFibGUiOjQwN31dLDQwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTsKZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzOwpleHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0czsKZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTsKZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycp
OwpleHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7CmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7Cgp9LHsiLi9saWIvX3N0cmVhbV9kdXBsZXguanMiOjM5OCwiLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyI6Mzk5LCIuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIjo0MDAsIi4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIjo0MDEsIi4vbGliL19zdHJlYW1fd3JpdGFibGUuanMiOjQwMn1dLDQwODpbZnVu
Y3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybTsKCn0seyIuL3JlYWRhYmxlIjo0MDd9XSw0MDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Cgptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTsKCn0seyIuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIjo0MDJ9XSw0MTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9y
dHMpewovLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQovLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUg
cmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAovLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCi8vIGlu
IGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMg
T1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgovLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCid1c2Ugc3RyaWN0JzsKLyo8cmVwbGFjZW1lbnQ+Ki8KCnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1
ZmZlcicpLkJ1ZmZlcjsKLyo8L3JlcGxhY2VtZW50PiovCgoKdmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHsKICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7CgogIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkgewogICAgY2FzZSAnaGV4JzoKICAgIGNhc2UgJ3V0ZjgnOgogICAgY2FzZSAndXRmLTgnOgogICAgY2FzZSAnYXNjaWknOgogICAgY2FzZSAnYmluYXJ5JzoKICAgIGNhc2UgJ2Jhc2U2NCc6CiAgICBjYXNlICd1Y3MyJzoKICAg
IGNhc2UgJ3Vjcy0yJzoKICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgY2FzZSAndXRmLTE2bGUnOgogICAgY2FzZSAncmF3JzoKICAgICAgcmV0dXJuIHRydWU7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlOwogIH0KfTsKCmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHsKICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JzsKICB2YXIgcmV0cmllZDsKCiAgd2hpbGUgKHRydWUpIHsKICAgIHN3aXRjaCAoZW5jKSB7CiAgICAgIGNhc2UgJ3V0ZjgnOgogICAgICBjYXNlICd1dGYtOCc6CiAgICAgICAgcmV0dXJu
ICd1dGY4JzsKCiAgICAgIGNhc2UgJ3VjczInOgogICAgICBjYXNlICd1Y3MtMic6CiAgICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICBjYXNlICd1dGYtMTZsZSc6CiAgICAgICAgcmV0dXJuICd1dGYxNmxlJzsKCiAgICAgIGNhc2UgJ2xhdGluMSc6CiAgICAgIGNhc2UgJ2JpbmFyeSc6CiAgICAgICAgcmV0dXJuICdsYXRpbjEnOwoKICAgICAgY2FzZSAnYmFzZTY0JzoKICAgICAgY2FzZSAnYXNjaWknOgogICAgICBjYXNlICdoZXgnOgogICAgICAgIHJldHVybiBlbmM7CgogICAgICBkZWZhdWx0OgogICAgICAgIGlmIChyZXRy
aWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZAoKICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgcmV0cmllZCA9IHRydWU7CiAgICB9CiAgfQp9Cgo7IC8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZQovLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzCgpmdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHsKICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNv
ZGluZyhlbmMpOwoKICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTsKICByZXR1cm4gbmVuYyB8fCBlbmM7Cn0gLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZgovLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFr
aW5nIGFwYXJ0IG11bHRpLWJ5dGUKLy8gY2hhcmFjdGVycy4KCgpleHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyOwoKZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykgewogIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7CiAgdmFyIG5iOwoKICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHsKICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7CiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7CiAgICAgIG5iID0gNDsKICAgICAgYnJlYWs7
CgogICAgY2FzZSAndXRmOCc6CiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7CiAgICAgIG5iID0gNDsKICAgICAgYnJlYWs7CgogICAgY2FzZSAnYmFzZTY0JzoKICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDsKICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7CiAgICAgIG5iID0gMzsKICAgICAgYnJlYWs7CgogICAgZGVmYXVsdDoKICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlOwogICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDsKICAgICAgcmV0dXJuOwogIH0KCiAgdGhpcy5sYXN0TmVlZCA9IDA7
CiAgdGhpcy5sYXN0VG90YWwgPSAwOwogIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpOwp9CgpTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHsKICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnOwogIHZhciByOwogIHZhciBpOwoKICBpZiAodGhpcy5sYXN0TmVlZCkgewogICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTsKICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJzsKICAgIGkgPSB0aGlzLmxhc3ROZWVkOwogICAgdGhpcy5sYXN0TmVlZCA9
IDA7CiAgfSBlbHNlIHsKICAgIGkgPSAwOwogIH0KCiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpOwogIHJldHVybiByIHx8ICcnOwp9OwoKU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDsgLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIKClN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDsgLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYt
OCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlcgoKU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7CiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkgewogICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTsKICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTsKICB9CgogIGJ1Zi5jb3B5KHRoaXMubGFz
dENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7CiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoOwp9OyAvLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhCi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLgoKCmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkgewogIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vs
c2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0OwogIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yOwp9IC8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW4KLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywg
b3IgNCkKLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC4KCgpmdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkgewogIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7CiAgaWYgKGogPCBpKSByZXR1cm4gMDsKICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7CgogIGlmIChuYiA+PSAwKSB7CiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxOwogICAgcmV0dXJuIG5iOwogIH0KCiAgaWYgKC0taiA8IGkg
fHwgbmIgPT09IC0yKSByZXR1cm4gMDsKICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTsKCiAgaWYgKG5iID49IDApIHsKICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7CiAgICByZXR1cm4gbmI7CiAgfQoKICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwOwogIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pOwoKICBpZiAobmIgPj0gMCkgewogICAgaWYgKG5iID4gMCkgewogICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7CiAgICB9Cgog
ICAgcmV0dXJuIG5iOwogIH0KCiAgcmV0dXJuIDA7Cn0gLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzCi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0Ci8vIG9uZSwgd2UgInJlcGxhY2UiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGgKLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFj
dGVyICgnXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2RpbmcKLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZQovLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLgovLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhCi8vIGxvb3AuCgoKZnVuY3Rp
b24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHsKICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7CiAgICBzZWxmLmxhc3ROZWVkID0gMDsKICAgIHJldHVybiAiXHVGRkZEIjsKICB9CgogIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkgewogICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkgewogICAgICBzZWxmLmxhc3ROZWVkID0gMTsKICAgICAgcmV0dXJuICJcdUZGRkQiOwogICAgfQoKICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4g
MikgewogICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7CiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7CiAgICAgICAgcmV0dXJuICJcdUZGRkQiOwogICAgICB9CiAgICB9CiAgfQp9IC8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci4KCgpmdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7CiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7CiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRo
aXMsIGJ1ZiwgcCk7CiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7CgogIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHsKICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpOwogICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpOwogIH0KCiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7CiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoOwp9IC8vIFJldHVybnMgYWxs
IGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYQovLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWQKLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuCgoKZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7CiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpOwogIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRm
OCcsIGkpOwogIHRoaXMubGFzdFRvdGFsID0gdG90YWw7CiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTsKICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpOwogIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpOwp9IC8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsCi8vIGNoYXJhY3Rlci4KCgpmdW5jdGlvbiB1dGY4RW5kKGJ1ZikgewogIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGgg
PyB0aGlzLndyaXRlKGJ1ZikgOiAnJzsKICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAiXHVGRkZEIjsKICByZXR1cm4gcjsKfSAvLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlbgovLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaAovLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0
ZXMgaW4gb3JkZXIgdG8KLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS4KCgpmdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7CiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7CiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpOwoKICAgIGlmIChyKSB7CiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7CgogICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHsKICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjsKICAgICAgICB0aGlzLmxh
c3RUb3RhbCA9IDQ7CiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07CiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07CiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHI7CiAgfQoKICB0aGlzLmxhc3ROZWVkID0gMTsKICB0aGlzLmxhc3RUb3RhbCA9IDI7CiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07CiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5s
ZW5ndGggLSAxKTsKfSAvLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZQovLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC4KCgpmdW5jdGlvbiB1dGYxNkVuZChidWYpIHsKICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7CgogIGlmICh0aGlzLmxhc3ROZWVkKSB7CiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3RO
ZWVkOwogICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTsKICB9CgogIHJldHVybiByOwp9CgpmdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkgewogIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7CiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpOwogIHRoaXMubGFzdE5lZWQgPSAzIC0gbjsKICB0aGlzLmxhc3RUb3RhbCA9IDM7CgogIGlmIChuID09PSAxKSB7CiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAx
XTsKICB9IGVsc2UgewogICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07CiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTsKICB9CgogIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTsKfQoKZnVuY3Rpb24gYmFzZTY0RW5kKGJ1ZikgewogIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJzsKICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNl
NjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7CiAgcmV0dXJuIHI7Cn0gLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KQoKCmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1ZikgewogIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7Cn0KCmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHsKICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJzsKfQoKfSx7InNhZmUtYnVmZmVyIjozODR9XSw0MTE6W2Z1
bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHNldEltbWVkaWF0ZSxjbGVhckltbWVkaWF0ZSl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBuZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MvYnJvd3Nlci5qcycpLm5leHRUaWNrOwoKdmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5Owp2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7CnZhciBpbW1lZGlhdGVJZHMgPSB7fTsKdmFyIG5leHRJbW1lZGlhdGVJZCA9IDA7IC8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzCgpleHBv
cnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpOwp9OwoKZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTsKfTsKCmV4cG9ydHMuY2xlYXJUaW1lb3V0ID0gZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24gKHRpbWVvdXQp
IHsKICB0aW1lb3V0LmNsb3NlKCk7Cn07CgpmdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7CiAgdGhpcy5faWQgPSBpZDsKICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjsKfQoKVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbiAoKSB7fTsKClRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkgewogIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTsKfTsgLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUg
bWVtYmVycyBuZWVkZWQuCgoKZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbiAoaXRlbSwgbXNlY3MpIHsKICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7CiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2VjczsKfTsKCmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbiAoaXRlbSkgewogIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTsKICBpdGVtLl9pZGxlVGltZW91dCA9IC0xOwp9OwoKZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uIChpdGVtKSB7CiAgY2xlYXJU
aW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpOwogIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0OwoKICBpZiAobXNlY3MgPj0gMCkgewogICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkgewogICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KSBpdGVtLl9vblRpbWVvdXQoKTsKICAgIH0sIG1zZWNzKTsKICB9Cn07IC8vIFRoYXQncyBub3QgaG93IG5vZGUuanMgaW1wbGVtZW50cyBpdCBidXQgdGhlIGV4cG9zZWQgYXBpIGlzIHRoZSBzYW1lLgoKCmV4cG9ydHMuc2V0SW1t
ZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gImZ1bmN0aW9uIiA/IHNldEltbWVkaWF0ZSA6IGZ1bmN0aW9uIChmbikgewogIHZhciBpZCA9IG5leHRJbW1lZGlhdGVJZCsrOwogIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBmYWxzZSA6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICBpbW1lZGlhdGVJZHNbaWRdID0gdHJ1ZTsKICBuZXh0VGljayhmdW5jdGlvbiBvbk5leHRUaWNrKCkgewogICAgaWYgKGltbWVkaWF0ZUlkc1tpZF0pIHsKICAgICAgLy8gZm4uY2FsbCgpIGlzIGZhc3RlciBzbyB3
ZSBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiB1c2UtY2FzZQogICAgICAvLyBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NhbGwtYXBwbHktc2VndQogICAgICBpZiAoYXJncykgewogICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpOwogICAgICB9IGVsc2UgewogICAgICAgIGZuLmNhbGwobnVsbCk7CiAgICAgIH0gLy8gUHJldmVudCBpZHMgZnJvbSBsZWFraW5nCgoKICAgICAgZXhwb3J0cy5jbGVhckltbWVkaWF0ZShpZCk7CiAgICB9CiAgfSk7CiAgcmV0dXJuIGlkOwp9OwpleHBvcnRzLmNsZWFySW1tZWRpYXRlID0gdHlwZW9m
IGNsZWFySW1tZWRpYXRlID09PSAiZnVuY3Rpb24iID8gY2xlYXJJbW1lZGlhdGUgOiBmdW5jdGlvbiAoaWQpIHsKICBkZWxldGUgaW1tZWRpYXRlSWRzW2lkXTsKfTsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCJ0aW1lcnMiKS5zZXRJbW1lZGlhdGUscmVxdWlyZSgidGltZXJzIikuY2xlYXJJbW1lZGlhdGUpCgp9LHsicHJvY2Vzcy9icm93c2VyLmpzIjozNTgsInRpbWVycyI6NDExfV0sNDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewoidXNlIHN0cmljdCI7CgovKioKICog
TW9kdWxlIGV4cG9ydHMuCiAqLwptb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTsKLyoqCiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuCiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuCiAqCiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLgogKgogKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBm
dW5jdGlvbnMKICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuCiAqCiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9ucwogKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLgogKgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGUKICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNv
bnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWQKICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyAiZGVwcmVjYXRlZCIgdmVyc2lvbiBvZiBgZm5gCiAqIEBhcGkgcHVibGljCiAqLwoKZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBtc2cpIHsKICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHsKICAgIHJldHVybiBmbjsKICB9CgogIHZhciB3YXJuZWQgPSBmYWxzZTsKCiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHsKICAgIGlmICghd2FybmVkKSB7CiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkgewogICAg
ICAgIHRocm93IG5ldyBFcnJvcihtc2cpOwogICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7CiAgICAgICAgY29uc29sZS50cmFjZShtc2cpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUud2Fybihtc2cpOwogICAgICB9CgogICAgICB3YXJuZWQgPSB0cnVlOwogICAgfQoKICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgcmV0dXJuIGRlcHJlY2F0ZWQ7Cn0KLyoqCiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRo
ZSBnaXZlbiBgbmFtZWAuCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lCiAqIEByZXR1cm5zIHtCb29sZWFufQogKiBAYXBpIHByaXZhdGUKICovCgoKZnVuY3Rpb24gY29uZmlnKG5hbWUpIHsKICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lcwogIHRyeSB7CiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTsKICB9IGNhdGNoIChfKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgdmFsID0gZ2xv
YmFsLmxvY2FsU3RvcmFnZVtuYW1lXTsKICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTsKICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnOwp9Cgp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0se31dLDQxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0
IjsKCmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykgewogIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlCiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yOwogICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHsKICAgICAgY29uc3RydWN0b3I6IHsKICAgICAgICB2YWx1ZTogY3RvciwKICAgICAgICBlbnVt
ZXJhYmxlOiBmYWxzZSwKICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICBjb25maWd1cmFibGU6IHRydWUKICAgICAgfQogICAgfSk7CiAgfTsKfSBlbHNlIHsKICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2VycwogIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7CiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjsKCiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiBUZW1wQ3RvcigpIHt9OwoKICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5w
cm90b3R5cGU7CiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpOwogICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yOwogIH07Cn0KCn0se31dLDQxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBf
dHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHsKICByZXR1cm4gYXJnICYmIF90eXBlb2Yo
YXJnKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJzsKfTsKCn0se31dLDQxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpewoidXNlIHN0cmljdCI7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9u
IiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCi8v
IENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMg
dG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNv
cGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZ
UklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KdmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7CgpleHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uIChmKSB7CiAgaWYg
KCFpc1N0cmluZyhmKSkgewogICAgdmFyIG9iamVjdHMgPSBbXTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTsKICAgIH0KCiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7CiAgfQoKICB2YXIgaSA9IDE7CiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoOwogIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uICh4KSB7CiAgICBp
ZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJzsKICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7CgogICAgc3dpdGNoICh4KSB7CiAgICAgIGNhc2UgJyVzJzoKICAgICAgICByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7CgogICAgICBjYXNlICclZCc6CiAgICAgICAgcmV0dXJuIE51bWJlcihhcmdzW2krK10pOwoKICAgICAgY2FzZSAnJWonOgogICAgICAgIHRyeSB7CiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTsKICAgICAgICB9IGNhdGNoIChfKSB7CiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxh
cl0nOwogICAgICAgIH0KCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIHg7CiAgICB9CiAgfSk7CgogIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7CiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkgewogICAgICBzdHIgKz0gJyAnICsgeDsKICAgIH0gZWxzZSB7CiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpOwogICAgfQogIH0KCiAgcmV0dXJuIHN0cjsKfTsgLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC4KLy8gUmV0dXJucyBhIG1v
ZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC4KLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC4KCgpleHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uIChmbiwgbXNnKSB7CiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC4KICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4s
IG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfQoKICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7CiAgICByZXR1cm4gZm47CiAgfQoKICB2YXIgd2FybmVkID0gZmFsc2U7CgogIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7CiAgICBpZiAoIXdhcm5lZCkgewogICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7CiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7CiAgICAgICAgY29uc29sZS50
cmFjZShtc2cpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTsKICAgICAgfQoKICAgICAgd2FybmVkID0gdHJ1ZTsKICAgIH0KCiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIHJldHVybiBkZXByZWNhdGVkOwp9OwoKdmFyIGRlYnVncyA9IHt9Owp2YXIgZGVidWdFbnZpcm9uOwoKZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uIChzZXQpIHsKICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSkgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJV
RyB8fCAnJzsKICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTsKCiAgaWYgKCFkZWJ1Z3Nbc2V0XSkgewogICAgaWYgKG5ldyBSZWdFeHAoJ1xcYicgKyBzZXQgKyAnXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHsKICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkOwoKICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7CiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7
CiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uICgpIHt9OwogICAgfQogIH0KCiAgcmV0dXJuIGRlYnVnc1tzZXRdOwp9OwovKioKICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dAogKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy4KICoKICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC4KICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0
aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC4KICovCgovKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovCgoKZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHsKICAvLyBkZWZhdWx0IG9wdGlvbnMKICB2YXIgY3R4ID0gewogICAgc2VlbjogW10sCiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvcgogIH07IC8vIGxlZ2FjeS4uLgoKICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07CiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4
LmNvbG9ycyA9IGFyZ3VtZW50c1szXTsKCiAgaWYgKGlzQm9vbGVhbihvcHRzKSkgewogICAgLy8gbGVnYWN5Li4uCiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7CiAgfSBlbHNlIGlmIChvcHRzKSB7CiAgICAvLyBnb3QgYW4gIm9wdGlvbnMiIG9iamVjdAogICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7CiAgfSAvLyBzZXQgZGVmYXVsdCBvcHRpb25zCgoKICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlOwogIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHgu
ZGVwdGggPSAyOwogIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlOwogIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTsKICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yOwogIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTsKfQoKZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDsgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dy
YXBoaWNzCgppbnNwZWN0LmNvbG9ycyA9IHsKICAnYm9sZCc6IFsxLCAyMl0sCiAgJ2l0YWxpYyc6IFszLCAyM10sCiAgJ3VuZGVybGluZSc6IFs0LCAyNF0sCiAgJ2ludmVyc2UnOiBbNywgMjddLAogICd3aGl0ZSc6IFszNywgMzldLAogICdncmV5JzogWzkwLCAzOV0sCiAgJ2JsYWNrJzogWzMwLCAzOV0sCiAgJ2JsdWUnOiBbMzQsIDM5XSwKICAnY3lhbic6IFszNiwgMzldLAogICdncmVlbic6IFszMiwgMzldLAogICdtYWdlbnRhJzogWzM1LCAzOV0sCiAgJ3JlZCc6IFszMSwgMzldLAogICd5ZWxsb3cnOiBbMzMsIDM5XQp9
OyAvLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGUKCmluc3BlY3Quc3R5bGVzID0gewogICdzcGVjaWFsJzogJ2N5YW4nLAogICdudW1iZXInOiAneWVsbG93JywKICAnYm9vbGVhbic6ICd5ZWxsb3cnLAogICd1bmRlZmluZWQnOiAnZ3JleScsCiAgJ251bGwnOiAnYm9sZCcsCiAgJ3N0cmluZyc6ICdncmVlbicsCiAgJ2RhdGUnOiAnbWFnZW50YScsCiAgLy8gIm5hbWUiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nCiAgJ3JlZ2V4cCc6ICdyZWQnCn07CgpmdW5jdGlvbiBzdHlsaXplV2l0aENvbG9y
KHN0ciwgc3R5bGVUeXBlKSB7CiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTsKCiAgaWYgKHN0eWxlKSB7CiAgICByZXR1cm4gIlx4MUJbIiArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArICJceDFCWyIgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7CiAgfSBlbHNlIHsKICAgIHJldHVybiBzdHI7CiAgfQp9CgpmdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkgewogIHJldHVybiBzdHI7Cn0KCmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7
CiAgdmFyIGhhc2ggPSB7fTsKICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGlkeCkgewogICAgaGFzaFt2YWxdID0gdHJ1ZTsKICB9KTsKICByZXR1cm4gaGFzaDsKfQoKZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7CiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLgogIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdAogIGlmIChjdHguY3VzdG9tSW5zcGVjdCAm
JiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbAogIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJiAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay4KICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7CiAgICB2YXIgcmV0ID0gdmFsdWUuaW5z
cGVjdChyZWN1cnNlVGltZXMsIGN0eCk7CgogICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7CiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpOwogICAgfQoKICAgIHJldHVybiByZXQ7CiAgfSAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllcwoKCiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTsKCiAgaWYgKHByaW1pdGl2ZSkgewogICAgcmV0dXJuIHByaW1pdGl2ZTsKICB9IC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC4K
CgogIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpOwogIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpOwoKICBpZiAoY3R4LnNob3dIaWRkZW4pIHsKICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7CiAgfSAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlCiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHgKCgogIGlmIChpc0Vycm9yKHZhbHVlKSAmJiAoa2V5cy5p
bmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHsKICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7CiAgfSAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuCgoKICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHsKICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkgewogICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnOwogICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tG
dW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpOwogICAgfQoKICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTsKICAgIH0KCiAgICBpZiAoaXNEYXRlKHZhbHVlKSkgewogICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7CiAgICB9CgogICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7CiAgICAgIHJldHVybiBmb3JtYXRF
cnJvcih2YWx1ZSk7CiAgICB9CiAgfQoKICB2YXIgYmFzZSA9ICcnLAogICAgICBhcnJheSA9IGZhbHNlLAogICAgICBicmFjZXMgPSBbJ3snLCAnfSddOyAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5CgogIGlmIChpc0FycmF5KHZhbHVlKSkgewogICAgYXJyYXkgPSB0cnVlOwogICAgYnJhY2VzID0gWydbJywgJ10nXTsKICB9IC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9ucwoKCiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7CiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAn
OiAnICsgdmFsdWUubmFtZSA6ICcnOwogICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7CiAgfSAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwcwoKCiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkgewogICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7CiAgfSAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGUKCgogIGlmIChpc0RhdGUodmFsdWUpKSB7CiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9V
VENTdHJpbmcuY2FsbCh2YWx1ZSk7CiAgfSAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yCgoKICBpZiAoaXNFcnJvcih2YWx1ZSkpIHsKICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7CiAgfQoKICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHsKICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdOwogIH0KCiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHsKICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHsK
ICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpOwogICAgfQogIH0KCiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7CiAgdmFyIG91dHB1dDsKCiAgaWYgKGFycmF5KSB7CiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTsKICB9IGVsc2UgewogICAgb3V0cHV0ID0ga2V5
cy5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7CiAgICB9KTsKICB9CgogIGN0eC5zZWVuLnBvcCgpOwogIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7Cn0KCmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7CiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7
CgogIGlmIChpc1N0cmluZyh2YWx1ZSkpIHsKICAgIHZhciBzaW1wbGUgPSAnXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL14ifCIkL2csICcnKS5yZXBsYWNlKC8nL2csICJcXCciKS5yZXBsYWNlKC9cXCIvZywgJyInKSArICdcJyc7CiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7CiAgfQoKICBpZiAoaXNOdW1iZXIodmFsdWUpKSByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpOwogIGlmIChpc0Jvb2xlYW4odmFsdWUpKSByZXR1cm4gY3R4LnN0eWxpemUo
JycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTsgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzICJvYmplY3QiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS4KCiAgaWYgKGlzTnVsbCh2YWx1ZSkpIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7Cn0KCmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7CiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJzsKfQoKZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5
cywga2V5cykgewogIHZhciBvdXRwdXQgPSBbXTsKCiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHsKICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkgewogICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBTdHJpbmcoaSksIHRydWUpKTsKICAgIH0gZWxzZSB7CiAgICAgIG91dHB1dC5wdXNoKCcnKTsKICAgIH0KICB9CgogIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICBp
ZiAoIWtleS5tYXRjaCgvXlxkKyQvKSkgewogICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIHRydWUpKTsKICAgIH0KICB9KTsKICByZXR1cm4gb3V0cHV0Owp9CgpmdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7CiAgdmFyIG5hbWUsIHN0ciwgZGVzYzsKICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7
CiAgICB2YWx1ZTogdmFsdWVba2V5XQogIH07CgogIGlmIChkZXNjLmdldCkgewogICAgaWYgKGRlc2Muc2V0KSB7CiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpOwogICAgfSBlbHNlIHsKICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTsKICAgIH0KICB9IGVsc2UgewogICAgaWYgKGRlc2Muc2V0KSB7CiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7CiAgICB9CiAgfQoKICBpZiAoIWhhc093blByb3BlcnR5
KHZpc2libGVLZXlzLCBrZXkpKSB7CiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nOwogIH0KCiAgaWYgKCFzdHIpIHsKICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkgewogICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHsKICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpOwogICAgICB9IGVsc2UgewogICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7CiAgICAgIH0KCiAgICAgIGlmIChzdHIuaW5k
ZXhPZignXG4nKSA+IC0xKSB7CiAgICAgICAgaWYgKGFycmF5KSB7CiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xuJykubWFwKGZ1bmN0aW9uIChsaW5lKSB7CiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTsKICAgICAgICAgIH0pLmpvaW4oJ1xuJykuc3Vic3RyKDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdHIgPSAnXG4nICsgc3RyLnNwbGl0KCdcbicpLm1hcChmdW5jdGlvbiAobGluZSkgewogICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lOwogICAgICAgICAgfSkuam9pbignXG4nKTsKICAg
ICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTsKICAgIH0KICB9CgogIGlmIChpc1VuZGVmaW5lZChuYW1lKSkgewogICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxkKyQvKSkgewogICAgICByZXR1cm4gc3RyOwogICAgfQoKICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7CgogICAgaWYgKG5hbWUubWF0Y2goL14iKFthLXpBLVpfXVthLXpBLVpfMC05XSopIiQvKSkgewogICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwg
bmFtZS5sZW5ndGggLSAyKTsKICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7CiAgICB9IGVsc2UgewogICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csICJcXCciKS5yZXBsYWNlKC9cXCIvZywgJyInKS5yZXBsYWNlKC8oXiJ8IiQpL2csICInIik7CiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7CiAgICB9CiAgfQoKICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7Cn0KCmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7CiAgdmFy
IG51bUxpbmVzRXN0ID0gMDsKICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyKSB7CiAgICBudW1MaW5lc0VzdCsrOwogICAgaWYgKGN1ci5pbmRleE9mKCdcbicpID49IDApIG51bUxpbmVzRXN0Kys7CiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cdTAwMWJcW1xkXGQ/bS9nLCAnJykubGVuZ3RoICsgMTsKICB9LCAwKTsKCiAgaWYgKGxlbmd0aCA+IDYwKSB7CiAgICByZXR1cm4gYnJhY2VzWzBdICsgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xuICcpICsgJyAnICsgb3V0
cHV0LmpvaW4oJyxcbiAgJykgKyAnICcgKyBicmFjZXNbMV07CiAgfQoKICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdOwp9IC8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYAovLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC4KCgpmdW5jdGlvbiBpc0FycmF5KGFyKSB7CiAgcmV0dXJuIEFy
cmF5LmlzQXJyYXkoYXIpOwp9CgpleHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5OwoKZnVuY3Rpb24gaXNCb29sZWFuKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7Cn0KCmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuOwoKZnVuY3Rpb24gaXNOdWxsKGFyZykgewogIHJldHVybiBhcmcgPT09IG51bGw7Cn0KCmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsOwoKZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PSBudWxsOwp9CgpleHBvcnRzLmlzTnVsbE9yVW5kZWZp
bmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7CgpmdW5jdGlvbiBpc051bWJlcihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7Cn0KCmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjsKCmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJzsKfQoKZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nOwoKZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7CiAgcmV0dXJuIF90eXBlb2YoYXJnKSA9PT0gJ3N5bWJvbCc7Cn0KCmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJv
bDsKCmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykgewogIHJldHVybiBhcmcgPT09IHZvaWQgMDsKfQoKZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkOwoKZnVuY3Rpb24gaXNSZWdFeHAocmUpIHsKICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7Cn0KCmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDsKCmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykgewogIHJldHVybiBfdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDsKfQoK
ZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0OwoKZnVuY3Rpb24gaXNEYXRlKGQpIHsKICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJzsKfQoKZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7CgpmdW5jdGlvbiBpc0Vycm9yKGUpIHsKICByZXR1cm4gaXNPYmplY3QoZSkgJiYgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7Cn0KCmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7CgpmdW5jdGlvbiBpc0Z1bmN0
aW9uKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nOwp9CgpleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uOwoKZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fCB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgX3R5cGVvZihhcmcpID09PSAnc3ltYm9sJyB8fCAvLyBFUzYgc3ltYm9sCiAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7Cn0KCmV4cG9y
dHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTsKZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpOwoKZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7Cn0KCmZ1bmN0aW9uIHBhZChuKSB7CiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7Cn0KCnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdB
dWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ107IC8vIDI2IEZlYiAxNjoxOTozNAoKZnVuY3Rpb24gdGltZXN0YW1wKCkgewogIHZhciBkID0gbmV3IERhdGUoKTsKICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSwgcGFkKGQuZ2V0TWludXRlcygpKSwgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpOwogIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7Cn0gLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBw
cmVwZW5kcyBhIHRpbWVzdGFtcAoKCmV4cG9ydHMubG9nID0gZnVuY3Rpb24gKCkgewogIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpOwp9OwovKioKICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLgogKgogKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lCiAqIGZ1bmN0aW9uIChub3Qg
b24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZAogKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZQogKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXMKICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3Ig
Q29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGUKICogICAgIHByb3RvdHlwZS4KICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uCiAqLwoKCmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpOwoKZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24gKG9yaWdpbiwgYWRkKSB7CiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdAogIGlmICghYWRkIHx8ICFpc09i
amVjdChhZGQpKSByZXR1cm4gb3JpZ2luOwogIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTsKICB2YXIgaSA9IGtleXMubGVuZ3RoOwoKICB3aGlsZSAoaS0tKSB7CiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07CiAgfQoKICByZXR1cm4gb3JpZ2luOwp9OwoKZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOwp9Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xv
YmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQoKfSx7Ii4vc3VwcG9ydC9pc0J1ZmZlciI6NDE0LCJfcHJvY2VzcyI6MzU4LCJpbmhlcml0cyI6NDEzfV0sNDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpPYmplY3Qu
ZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgInYxIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3YuZGVmYXVsdDsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgInYzIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3YyLmRlZmF1bHQ7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJ2NCIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0
KCkgewogICAgcmV0dXJuIF92My5kZWZhdWx0OwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAidjUiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfdjQuZGVmYXVsdDsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIk5JTCIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF9uaWwuZGVmYXVsdDsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywg
InZlcnNpb24iLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfdmVyc2lvbi5kZWZhdWx0OwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAidmFsaWRhdGUiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfdmFsaWRhdGUuZGVmYXVsdDsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgInN0cmluZ2lmeSIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rp
b24gZ2V0KCkgewogICAgcmV0dXJuIF9zdHJpbmdpZnkuZGVmYXVsdDsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgInBhcnNlIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3BhcnNlLmRlZmF1bHQ7CiAgfQp9KTsKCnZhciBfdiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi92MS5qcyIpKTsKCnZhciBfdjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vdjMuanMiKSk7Cgp2YXIgX3YzID0gX2ludGVyb3BS
ZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL3Y0LmpzIikpOwoKdmFyIF92NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi92NS5qcyIpKTsKCnZhciBfbmlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL25pbC5qcyIpKTsKCnZhciBfdmVyc2lvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi92ZXJzaW9uLmpzIikpOwoKdmFyIF92YWxpZGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi92YWxpZGF0ZS5qcyIpKTsKCnZhciBfc3RyaW5naWZ5ID0gX2lu
dGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL3N0cmluZ2lmeS5qcyIpKTsKCnZhciBfcGFyc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vcGFyc2UuanMiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Cgp9LHsiLi9uaWwuanMiOjQxOCwiLi9wYXJzZS5qcyI6NDE5LCIuL3N0cmluZ2lmeS5qcyI6NDIzLCIuL3YxLmpzIjo0MjQsIi4vdjMuanMiOjQyNSwi
Li92NC5qcyI6NDI3LCIuL3Y1LmpzIjo0MjgsIi4vdmFsaWRhdGUuanMiOjQyOSwiLi92ZXJzaW9uLmpzIjo0MzB9XSw0MTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsKLyoKICogQnJvd3Nlci1jb21wYXRpYmxlIEphdmFTY3JpcHQgTUQ1CiAqCiAqIE1vZGlmaWNhdGlvbiBvZiBKYXZhU2NyaXB0IE1ENQogKiBodHRwczov
L2dpdGh1Yi5jb20vYmx1ZWltcC9KYXZhU2NyaXB0LU1ENQogKgogKiBDb3B5cmlnaHQgMjAxMSwgU2ViYXN0aWFuIFRzY2hhbgogKiBodHRwczovL2JsdWVpbXAubmV0CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZToKICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQKICoKICogQmFzZWQgb24KICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZQogKiBEaWdlc3QgQWxnb3JpdGhtLCBhcyBkZWZpbmVkIGluIFJG
QyAxMzIxLgogKiBWZXJzaW9uIDIuMiBDb3B5cmlnaHQgKEMpIFBhdWwgSm9obnN0b24gMTk5OSAtIDIwMDkKICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldAogKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2UKICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby4KICovCgpmdW5jdGlvbiBtZDUoYnl0ZXMpIHsKICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykgewogICAgdmFyIG1zZyA9IHVuZXNj
YXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZQoKICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobXNnLmxlbmd0aCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHsKICAgICAgYnl0ZXNbaV0gPSBtc2cuY2hhckNvZGVBdChpKTsKICAgIH0KICB9CgogIHJldHVybiBtZDVUb0hleEVuY29kZWRBcnJheSh3b3Jkc1RvTWQ1KGJ5dGVzVG9Xb3JkcyhieXRlcyksIGJ5dGVzLmxlbmd0aCAqIDgpKTsKfQovKgogKiBDb252ZXJ0IGFuIGFycmF5IG9mIGxpdHRsZS1lbmRp
YW4gd29yZHMgdG8gYW4gYXJyYXkgb2YgYnl0ZXMKICovCgoKZnVuY3Rpb24gbWQ1VG9IZXhFbmNvZGVkQXJyYXkoaW5wdXQpIHsKICB2YXIgb3V0cHV0ID0gW107CiAgdmFyIGxlbmd0aDMyID0gaW5wdXQubGVuZ3RoICogMzI7CiAgdmFyIGhleFRhYiA9ICcwMTIzNDU2Nzg5YWJjZGVmJzsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGgzMjsgaSArPSA4KSB7CiAgICB2YXIgeCA9IGlucHV0W2kgPj4gNV0gPj4+IGkgJSAzMiAmIDB4ZmY7CiAgICB2YXIgaGV4ID0gcGFyc2VJbnQoaGV4VGFiLmNoYXJBdCh4ID4+PiA0ICYg
MHgwZikgKyBoZXhUYWIuY2hhckF0KHggJiAweDBmKSwgMTYpOwogICAgb3V0cHV0LnB1c2goaGV4KTsKICB9CgogIHJldHVybiBvdXRwdXQ7Cn0KLyoqCiAqIENhbGN1bGF0ZSBvdXRwdXQgbGVuZ3RoIHdpdGggcGFkZGluZyBhbmQgYml0IGxlbmd0aAogKi8KCgpmdW5jdGlvbiBnZXRPdXRwdXRMZW5ndGgoaW5wdXRMZW5ndGg4KSB7CiAgcmV0dXJuIChpbnB1dExlbmd0aDggKyA2NCA+Pj4gOSA8PCA0KSArIDE0ICsgMTsKfQovKgogKiBDYWxjdWxhdGUgdGhlIE1ENSBvZiBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRz
LCBhbmQgYSBiaXQgbGVuZ3RoLgogKi8KCgpmdW5jdGlvbiB3b3Jkc1RvTWQ1KHgsIGxlbikgewogIC8qIGFwcGVuZCBwYWRkaW5nICovCiAgeFtsZW4gPj4gNV0gfD0gMHg4MCA8PCBsZW4gJSAzMjsKICB4W2dldE91dHB1dExlbmd0aChsZW4pIC0gMV0gPSBsZW47CiAgdmFyIGEgPSAxNzMyNTg0MTkzOwogIHZhciBiID0gLTI3MTczMzg3OTsKICB2YXIgYyA9IC0xNzMyNTg0MTk0OwogIHZhciBkID0gMjcxNzMzODc4OwoKICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KSB7CiAgICB2YXIgb2xkYSA9IGE7
CiAgICB2YXIgb2xkYiA9IGI7CiAgICB2YXIgb2xkYyA9IGM7CiAgICB2YXIgb2xkZCA9IGQ7CiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpXSwgNywgLTY4MDg3NjkzNik7CiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMV0sIDEyLCAtMzg5NTY0NTg2KTsKICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTcsIDYwNjEwNTgxOSk7CiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgM10sIDIyLCAtMTA0NDUyNTMzMCk7CiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgNF0sIDcs
IC0xNzY0MTg4OTcpOwogICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDVdLCAxMiwgMTIwMDA4MDQyNik7CiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7CiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgN10sIDIyLCAtNDU3MDU5ODMpOwogICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA3LCAxNzcwMDM1NDE2KTsKICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTsKICAgIGMgPSBtZDVmZihjLCBkLCBh
LCBiLCB4W2kgKyAxMF0sIDE3LCAtNDIwNjMpOwogICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDExXSwgMjIsIC0xOTkwNDA0MTYyKTsKICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyAxMl0sIDcsIDE4MDQ2MDM2ODIpOwogICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDEzXSwgMTIsIC00MDM0MTEwMSk7CiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNywgLTE1MDIwMDIyOTApOwogICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDE1XSwgMjIsIDEyMzY1MzUzMjkpOwog
ICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDFdLCA1LCAtMTY1Nzk2NTEwKTsKICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyA2XSwgOSwgLTEwNjk1MDE2MzIpOwogICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDExXSwgMTQsIDY0MzcxNzcxMyk7CiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpXSwgMjAsIC0zNzM4OTczMDIpOwogICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA1LCAtNzAxNTU4NjkxKTsKICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAxMF0sIDksIDM4
MDE2MDgzKTsKICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE0LCAtNjYwNDc4MzM1KTsKICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA0XSwgMjAsIC00MDU1Mzc4NDgpOwogICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDldLCA1LCA1Njg0NDY0MzgpOwogICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDE0XSwgOSwgLTEwMTk4MDM2OTApOwogICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNCwgLTE4NzM2Mzk2MSk7CiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwg
eFtpICsgOF0sIDIwLCAxMTYzNTMxNTAxKTsKICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDUsIC0xNDQ0NjgxNDY3KTsKICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAyXSwgOSwgLTUxNDAzNzg0KTsKICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyA3XSwgMTQsIDE3MzUzMjg0NzMpOwogICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDEyXSwgMjAsIC0xOTI2NjA3NzM0KTsKICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNCwgLTM3ODU1OCk7CiAgICBkID0gbWQ1
aGgoZCwgYSwgYiwgYywgeFtpICsgOF0sIDExLCAtMjAyMjU3NDQ2Myk7CiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNiwgMTgzOTAzMDU2Mik7CiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTRdLCAyMywgLTM1MzA5NTU2KTsKICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxXSwgNCwgLTE1MzA5OTIwNjApOwogICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDRdLCAxMSwgMTI3Mjg5MzM1Myk7CiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgN10sIDE2LCAtMTU1
NDk3NjMyKTsKICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAxMF0sIDIzLCAtMTA5NDczMDY0MCk7CiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMTNdLCA0LCA2ODEyNzkxNzQpOwogICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaV0sIDExLCAtMzU4NTM3MjIyKTsKICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTYsIC03MjI1MjE5NzkpOwogICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDZdLCAyMywgNzYwMjkxODkpOwogICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSAr
IDldLCA0LCAtNjQwMzY0NDg3KTsKICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2kgKyAxMl0sIDExLCAtNDIxODE1ODM1KTsKICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE2LCA1MzA3NDI1MjApOwogICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDJdLCAyMywgLTk5NTMzODY1MSk7CiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpXSwgNiwgLTE5ODYzMDg0NCk7CiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgN10sIDEwLCAxMTI2ODkxNDE1KTsKICAgIGMgPSBtZDVpaShjLCBk
LCBhLCBiLCB4W2kgKyAxNF0sIDE1LCAtMTQxNjM1NDkwNSk7CiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgNV0sIDIxLCAtNTc0MzQwNTUpOwogICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgNiwgMTcwMDQ4NTU3MSk7CiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgM10sIDEwLCAtMTg5NDk4NjYwNik7CiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTBdLCAxNSwgLTEwNTE1MjMpOwogICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDFdLCAyMSwgLTIwNTQ5MjI3OTkp
OwogICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA2LCAxODczMzEzMzU5KTsKICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxNV0sIDEwLCAtMzA2MTE3NDQpOwogICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNSwgLTE1NjAxOTgzODApOwogICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDEzXSwgMjEsIDEzMDkxNTE2NDkpOwogICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDRdLCA2LCAtMTQ1NTIzMDcwKTsKICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAx
MV0sIDEwLCAtMTEyMDIxMDM3OSk7CiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE1LCA3MTg3ODcyNTkpOwogICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDldLCAyMSwgLTM0MzQ4NTU1MSk7CiAgICBhID0gc2FmZUFkZChhLCBvbGRhKTsKICAgIGIgPSBzYWZlQWRkKGIsIG9sZGIpOwogICAgYyA9IHNhZmVBZGQoYywgb2xkYyk7CiAgICBkID0gc2FmZUFkZChkLCBvbGRkKTsKICB9CgogIHJldHVybiBbYSwgYiwgYywgZF07Cn0KLyoKICogQ29udmVydCBhbiBhcnJheSBieXRlcyB0byBhbiBhcnJh
eSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzCiAqIENoYXJhY3RlcnMgPjI1NSBoYXZlIHRoZWlyIGhpZ2gtYnl0ZSBzaWxlbnRseSBpZ25vcmVkLgogKi8KCgpmdW5jdGlvbiBieXRlc1RvV29yZHMoaW5wdXQpIHsKICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gW107CiAgfQoKICB2YXIgbGVuZ3RoOCA9IGlucHV0Lmxlbmd0aCAqIDg7CiAgdmFyIG91dHB1dCA9IG5ldyBVaW50MzJBcnJheShnZXRPdXRwdXRMZW5ndGgobGVuZ3RoOCkpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDg7IGkgKz0gOCkg
ewogICAgb3V0cHV0W2kgPj4gNV0gfD0gKGlucHV0W2kgLyA4XSAmIDB4ZmYpIDw8IGkgJSAzMjsKICB9CgogIHJldHVybiBvdXRwdXQ7Cn0KLyoKICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseQogKiB0byB3b3JrIGFyb3VuZCBidWdzIGluIHNvbWUgSlMgaW50ZXJwcmV0ZXJzLgogKi8KCgpmdW5jdGlvbiBzYWZlQWRkKHgsIHkpIHsKICB2YXIgbHN3ID0gKHggJiAweGZmZmYpICsgKHkgJiAweGZmZmYpOwogIHZhciBtc3cgPSAoeCA+PiAxNikg
KyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KTsKICByZXR1cm4gbXN3IDw8IDE2IHwgbHN3ICYgMHhmZmZmOwp9Ci8qCiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC4KICovCgoKZnVuY3Rpb24gYml0Um90YXRlTGVmdChudW0sIGNudCkgewogIHJldHVybiBudW0gPDwgY250IHwgbnVtID4+PiAzMiAtIGNudDsKfQovKgogKiBUaGVzZSBmdW5jdGlvbnMgaW1wbGVtZW50IHRoZSBmb3VyIGJhc2ljIG9wZXJhdGlvbnMgdGhlIGFsZ29yaXRobSB1c2VzLgogKi8KCgpmdW5jdGlvbiBtZDVjbW4ocSwg
YSwgYiwgeCwgcywgdCkgewogIHJldHVybiBzYWZlQWRkKGJpdFJvdGF0ZUxlZnQoc2FmZUFkZChzYWZlQWRkKGEsIHEpLCBzYWZlQWRkKHgsIHQpKSwgcyksIGIpOwp9CgpmdW5jdGlvbiBtZDVmZihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7CiAgcmV0dXJuIG1kNWNtbihiICYgYyB8IH5iICYgZCwgYSwgYiwgeCwgcywgdCk7Cn0KCmZ1bmN0aW9uIG1kNWdnKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHsKICByZXR1cm4gbWQ1Y21uKGIgJiBkIHwgYyAmIH5kLCBhLCBiLCB4LCBzLCB0KTsKfQoKZnVuY3Rpb24gbWQ1aGgoYSwgYiwgYywg
ZCwgeCwgcywgdCkgewogIHJldHVybiBtZDVjbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KTsKfQoKZnVuY3Rpb24gbWQ1aWkoYSwgYiwgYywgZCwgeCwgcywgdCkgewogIHJldHVybiBtZDVjbW4oYyBeIChiIHwgfmQpLCBhLCBiLCB4LCBzLCB0KTsKfQoKdmFyIF9kZWZhdWx0ID0gbWQ1OwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsKCn0se31dLDQxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIs
IHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwp2YXIgX2RlZmF1bHQgPSAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJzsKZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Cgp9LHt9XSw0MTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsKCnZhciBfdmFsaWRhdGUgPSBf
aW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vdmFsaWRhdGUuanMiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBwYXJzZSh1dWlkKSB7CiAgaWYgKCEoMCwgX3ZhbGlkYXRlLmRlZmF1bHQpKHV1aWQpKSB7CiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpOwogIH0KCiAgdmFyIHY7CiAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTsg
Ly8gUGFyc2UgIyMjIyMjIyMtLi4uLi0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uCgogIGFyclswXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgwLCA4KSwgMTYpKSA+Pj4gMjQ7CiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmOwogIGFyclsyXSA9IHYgPj4+IDggJiAweGZmOwogIGFyclszXSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0jIyMjLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi4KCiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODsKICBhcnJbNV0gPSB2ICYgMHhm
ZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0jIyMjLS4uLi4tLi4uLi4uLi4uLi4uCgogIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4OwogIGFycls3XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tIyMjIy0uLi4uLi4uLi4uLi4KCiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7CiAgYXJyWzldID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0uLi4uLSMjIyMjIyMjIyMjIwog
IC8vIChVc2UgIi8iIHRvIGF2b2lkIDMyLWJpdCB0cnVuY2F0aW9uIHdoZW4gYml0LXNoaWZ0aW5nIGhpZ2gtb3JkZXIgYnl0ZXMpCgogIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmOwogIGFyclsxMV0gPSB2IC8gMHgxMDAwMDAwMDAgJiAweGZmOwogIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7CiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjsKICBhcnJbMTRdID0gdiA+Pj4gOCAmIDB4ZmY7CiAgYXJyWzE1XSA9IHYgJiAweGZmOwogIHJl
dHVybiBhcnI7Cn0KCnZhciBfZGVmYXVsdCA9IHBhcnNlOwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsKCn0seyIuL3ZhbGlkYXRlLmpzIjo0Mjl9XSw0MjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsKdmFyIF9kZWZhdWx0ID0gL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFi
XVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsKCn0se31dLDQyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gcm5nOyAvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMg
Z2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmUKLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyCi8vIGdlbmVyYXRvcnMgKGxpa2UgTWF0aC5yYW5kb20oKSkuCi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSAidGhpcyIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uIEFsc28sCi8vIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0
aW9uIG9mIGNyeXB0byAobXNDcnlwdG8pIG9uIElFMTEuCgp2YXIgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pOwp2YXIgcm5kczggPSBuZXcgVWlu
dDhBcnJheSgxNik7CgpmdW5jdGlvbiBybmcoKSB7CiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHsKICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTsKICB9CgogIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpOwp9Cgp9LHt9XSw0MjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5l
UHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsgLy8gQWRhcHRlZCBmcm9tIENocmlzIFZlbmVzcycgU0hBMSBjb2RlIGF0Ci8vIGh0dHA6Ly93d3cubW92YWJsZS10eXBlLmNvLnVrL3NjcmlwdHMvc2hhMS5odG1sCgpmdW5jdGlvbiBmKHMsIHgsIHksIHopIHsKICBzd2l0Y2ggKHMpIHsKICAgIGNhc2UgMDoKICAgICAgcmV0dXJuIHggJiB5IF4gfnggJiB6OwoKICAgIGNhc2UgMToKICAgICAgcmV0dXJuIHggXiB5IF4gejsKCiAgICBjYXNl
IDI6CiAgICAgIHJldHVybiB4ICYgeSBeIHggJiB6IF4geSAmIHo7CgogICAgY2FzZSAzOgogICAgICByZXR1cm4geCBeIHkgXiB6OwogIH0KfQoKZnVuY3Rpb24gUk9UTCh4LCBuKSB7CiAgcmV0dXJuIHggPDwgbiB8IHggPj4+IDMyIC0gbjsKfQoKZnVuY3Rpb24gc2hhMShieXRlcykgewogIHZhciBLID0gWzB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMsIDB4Y2E2MmMxZDZdOwogIHZhciBIID0gWzB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjBdOwoKICBp
ZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykgewogICAgdmFyIG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZQoKICAgIGJ5dGVzID0gW107CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHsKICAgICAgYnl0ZXMucHVzaChtc2cuY2hhckNvZGVBdChpKSk7CiAgICB9CiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShieXRlcykpIHsKICAgIC8vIENvbnZlcnQgQXJyYXktbGlrZSB0byBBcnJheQogICAgYnl0ZXMgPSBBcnJheS5wcm90b3R5
cGUuc2xpY2UuY2FsbChieXRlcyk7CiAgfQoKICBieXRlcy5wdXNoKDB4ODApOwogIHZhciBsID0gYnl0ZXMubGVuZ3RoIC8gNCArIDI7CiAgdmFyIE4gPSBNYXRoLmNlaWwobCAvIDE2KTsKICB2YXIgTSA9IG5ldyBBcnJheShOKTsKCiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IE47ICsrX2kpIHsKICAgIHZhciBhcnIgPSBuZXcgVWludDMyQXJyYXkoMTYpOwoKICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikgewogICAgICBhcnJbal0gPSBieXRlc1tfaSAqIDY0ICsgaiAqIDRdIDw8IDI0IHwgYnl0ZXNbX2kgKiA2NCAr
IGogKiA0ICsgMV0gPDwgMTYgfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAyXSA8PCA4IHwgYnl0ZXNbX2kgKiA2NCArIGogKiA0ICsgM107CiAgICB9CgogICAgTVtfaV0gPSBhcnI7CiAgfQoKICBNW04gLSAxXVsxNF0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4IC8gTWF0aC5wb3coMiwgMzIpOwogIE1bTiAtIDFdWzE0XSA9IE1hdGguZmxvb3IoTVtOIC0gMV1bMTRdKTsKICBNW04gLSAxXVsxNV0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4ICYgMHhmZmZmZmZmZjsKCiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgTjsgKytf
aTIpIHsKICAgIHZhciBXID0gbmV3IFVpbnQzMkFycmF5KDgwKTsKCiAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDE2OyArK3QpIHsKICAgICAgV1t0XSA9IE1bX2kyXVt0XTsKICAgIH0KCiAgICBmb3IgKHZhciBfdCA9IDE2OyBfdCA8IDgwOyArK190KSB7CiAgICAgIFdbX3RdID0gUk9UTChXW190IC0gM10gXiBXW190IC0gOF0gXiBXW190IC0gMTRdIF4gV1tfdCAtIDE2XSwgMSk7CiAgICB9CgogICAgdmFyIGEgPSBIWzBdOwogICAgdmFyIGIgPSBIWzFdOwogICAgdmFyIGMgPSBIWzJdOwogICAgdmFyIGQgPSBIWzNdOwogICAg
dmFyIGUgPSBIWzRdOwoKICAgIGZvciAodmFyIF90MiA9IDA7IF90MiA8IDgwOyArK190MikgewogICAgICB2YXIgcyA9IE1hdGguZmxvb3IoX3QyIC8gMjApOwogICAgICB2YXIgVCA9IFJPVEwoYSwgNSkgKyBmKHMsIGIsIGMsIGQpICsgZSArIEtbc10gKyBXW190Ml0gPj4+IDA7CiAgICAgIGUgPSBkOwogICAgICBkID0gYzsKICAgICAgYyA9IFJPVEwoYiwgMzApID4+PiAwOwogICAgICBiID0gYTsKICAgICAgYSA9IFQ7CiAgICB9CgogICAgSFswXSA9IEhbMF0gKyBhID4+PiAwOwogICAgSFsxXSA9IEhbMV0gKyBiID4+PiAw
OwogICAgSFsyXSA9IEhbMl0gKyBjID4+PiAwOwogICAgSFszXSA9IEhbM10gKyBkID4+PiAwOwogICAgSFs0XSA9IEhbNF0gKyBlID4+PiAwOwogIH0KCiAgcmV0dXJuIFtIWzBdID4+IDI0ICYgMHhmZiwgSFswXSA+PiAxNiAmIDB4ZmYsIEhbMF0gPj4gOCAmIDB4ZmYsIEhbMF0gJiAweGZmLCBIWzFdID4+IDI0ICYgMHhmZiwgSFsxXSA+PiAxNiAmIDB4ZmYsIEhbMV0gPj4gOCAmIDB4ZmYsIEhbMV0gJiAweGZmLCBIWzJdID4+IDI0ICYgMHhmZiwgSFsyXSA+PiAxNiAmIDB4ZmYsIEhbMl0gPj4gOCAmIDB4ZmYsIEhbMl0gJiAw
eGZmLCBIWzNdID4+IDI0ICYgMHhmZiwgSFszXSA+PiAxNiAmIDB4ZmYsIEhbM10gPj4gOCAmIDB4ZmYsIEhbM10gJiAweGZmLCBIWzRdID4+IDI0ICYgMHhmZiwgSFs0XSA+PiAxNiAmIDB4ZmYsIEhbNF0gPj4gOCAmIDB4ZmYsIEhbNF0gJiAweGZmXTsKfQoKdmFyIF9kZWZhdWx0ID0gc2hhMTsKZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Cgp9LHt9XSw0MjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUi
LCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsKCnZhciBfdmFsaWRhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vdmFsaWRhdGUuanMiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Ci8qKgogKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybToKICogWFhY
WFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYCiAqLwoKCnZhciBieXRlVG9IZXggPSBbXTsKCmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHsKICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTsKfQoKZnVuY3Rpb24gc3RyaW5naWZ5KGFycikgewogIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7CiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29k
ZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2UKICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzQKICB2YXIgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2Fy
cltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSAr
IGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZQogIC8vIG9mIHRoZSBmb2xsb3dpbmc6CiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvCiAgLy8gInVuZGVmaW5lZCIgaW4gdGhlIHV1aWQpCiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAg
b3IgYHZhcmlhbnRgIGZpZWxkcwoKICBpZiAoISgwLCBfdmFsaWRhdGUuZGVmYXVsdCkodXVpZCkpIHsKICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7CiAgfQoKICByZXR1cm4gdXVpZDsKfQoKdmFyIF9kZWZhdWx0ID0gc3RyaW5naWZ5OwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsKCn0seyIuL3ZhbGlkYXRlLmpzIjo0Mjl9XSw0MjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywg
Il9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsKCnZhciBfcm5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL3JuZy5qcyIpKTsKCnZhciBfc3RyaW5naWZ5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL3N0cmluZ2lmeS5qcyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0gLy8gKipgdjEo
KWAgLSBHZW5lcmF0ZSB0aW1lLWJhc2VkIFVVSUQqKgovLwovLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qcwovLyBhbmQgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3V1aWQuaHRtbAoKCnZhciBfbm9kZUlkOwoKdmFyIF9jbG9ja3NlcTsgLy8gUHJldmlvdXMgdXVpZCBjcmVhdGlvbiB0aW1lCgoKdmFyIF9sYXN0TVNlY3MgPSAwOwp2YXIgX2xhc3ROU2VjcyA9IDA7IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzCgpmdW5jdGlvbiB2
MShvcHRpb25zLCBidWYsIG9mZnNldCkgewogIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwOwogIHZhciBiID0gYnVmIHx8IG5ldyBBcnJheSgxNik7CiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDsKICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxOyAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhl
eSdyZSBub3QKICAvLyBzcGVjaWZpZWQuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXMgcmVsYXRlZCB0byBpbnN1ZmZpY2llbnQKICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5CgogIGlmIChub2RlID09IG51bGwgfHwgY2xvY2tzZXEgPT0gbnVsbCkgewogICAgdmFyIHNlZWRCeXRlcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBfcm5nLmRlZmF1bHQpKCk7CgogICAgaWYgKG5vZGUgPT0gbnVsbCkgewogICAgICAvLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlk
LCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSkKICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbc2VlZEJ5dGVzWzBdIHwgMHgwMSwgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1dOwogICAgfQoKICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7CiAgICAgIC8vIFBlciA0LjIuMiwgcmFuZG9taXplICgxNCBiaXQpIGNsb2Nrc2VxCiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzdd
KSAmIDB4M2ZmZjsKICAgIH0KICB9IC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsCiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc28KICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcycKICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2No
LCAxOTcwLTAxLTAxIDAwOjAwLgoKCiAgdmFyIG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5tc2VjcyA6IERhdGUubm93KCk7IC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2sKICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9jawoKICB2YXIgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7IC8vIFRpbWUgc2lu
Y2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcykKCiAgdmFyIGR0ID0gbXNlY3MgLSBfbGFzdE1TZWNzICsgKG5zZWNzIC0gX2xhc3ROU2VjcykgLyAxMDAwMDsgLy8gUGVyIDQuMi4xLjIsIEJ1bXAgY2xvY2tzZXEgb24gY2xvY2sgcmVncmVzc2lvbgoKICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkgewogICAgY2xvY2tzZXEgPSBjbG9ja3NlcSArIDEgJiAweDNmZmY7CiAgfSAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92
ZWQgb250byBhIG5ldwogIC8vIHRpbWUgaW50ZXJ2YWwKCgogIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7CiAgICBuc2VjcyA9IDA7CiAgfSAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkCgoKICBpZiAobnNlY3MgPj0gMTAwMDApIHsKICAgIHRocm93IG5ldyBFcnJvcigidXVpZC52MSgpOiBDYW4ndCBjcmVhdGUgbW9yZSB0aGFuIDEwTSB1dWlkcy9zZWMiKTsKICB9CgogIF9sYXN0TVNlY3Mg
PSBtc2VjczsKICBfbGFzdE5TZWNzID0gbnNlY3M7CiAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7IC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaAoKICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDsgLy8gYHRpbWVfbG93YAoKICB2YXIgdGwgPSAoKG1zZWNzICYgMHhmZmZmZmZmKSAqIDEwMDAwICsgbnNlY3MpICUgMHgxMDAwMDAwMDA7CiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjsKICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmOwogIGJbaSsrXSA9IHRsID4+PiA4ICYg
MHhmZjsKICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGAKCiAgdmFyIHRtaCA9IG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCAmIDB4ZmZmZmZmZjsKICBiW2krK10gPSB0bWggPj4+IDggJiAweGZmOwogIGJbaSsrXSA9IHRtaCAmIDB4ZmY7IC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gCgogIGJbaSsrXSA9IHRtaCA+Pj4gMjQgJiAweGYgfCAweDEwOyAvLyBpbmNsdWRlIHZlcnNpb24KCiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7IC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQu
Mi4yIC0gaW5jbHVkZSB2YXJpYW50KQoKICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7IC8vIGBjbG9ja19zZXFfbG93YAoKICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7IC8vIGBub2RlYAoKICBmb3IgKHZhciBuID0gMDsgbiA8IDY7ICsrbikgewogICAgYltpICsgbl0gPSBub2RlW25dOwogIH0KCiAgcmV0dXJuIGJ1ZiB8fCAoMCwgX3N0cmluZ2lmeS5kZWZhdWx0KShiKTsKfQoKdmFyIF9kZWZhdWx0ID0gdjE7CmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OwoKfSx7Ii4vcm5nLmpzIjo0MjEsIi4vc3RyaW5n
aWZ5LmpzIjo0MjN9XSw0MjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsKCnZhciBfdiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi92MzUuanMiKSk7Cgp2YXIgX21kID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL21kNS5qcyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1
bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCnZhciB2MyA9ICgwLCBfdi5kZWZhdWx0KSgndjMnLCAweDMwLCBfbWQuZGVmYXVsdCk7CnZhciBfZGVmYXVsdCA9IHYzOwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsKCn0seyIuL21kNS5qcyI6NDE3LCIuL3YzNS5qcyI6NDI2fV0sNDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2Vz
TW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsKZXhwb3J0cy5VUkwgPSBleHBvcnRzLkROUyA9IHZvaWQgMDsKCnZhciBfc3RyaW5naWZ5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL3N0cmluZ2lmeS5qcyIpKTsKCnZhciBfcGFyc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vcGFyc2UuanMiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmog
OiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikgewogIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsgLy8gVVRGOCBlc2NhcGUKCiAgdmFyIGJ5dGVzID0gW107CgogIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTsKICB9CgogIHJldHVybiBieXRlczsKfQoKdmFyIEROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnOwpleHBvcnRzLkROUyA9
IEROUzsKdmFyIFVSTCA9ICc2YmE3YjgxMS05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnOwpleHBvcnRzLlVSTCA9IFVSTDsKCmZ1bmN0aW9uIF9kZWZhdWx0KG5hbWUsIHZlcnNpb24sIGhhc2hmdW5jKSB7CiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7CiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgICB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUpOwogICAgfQoKICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykgewog
ICAgICBuYW1lc3BhY2UgPSAoMCwgX3BhcnNlLmRlZmF1bHQpKG5hbWVzcGFjZSk7CiAgICB9CgogICAgaWYgKG5hbWVzcGFjZS5sZW5ndGggIT09IDE2KSB7CiAgICAgIHRocm93IFR5cGVFcnJvcignTmFtZXNwYWNlIG11c3QgYmUgYXJyYXktbGlrZSAoMTYgaXRlcmFibGUgaW50ZWdlciB2YWx1ZXMsIDAtMjU1KScpOwogICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuMwogICAgLy8gRnV0dXJlOiBVc2Ugc3ByZWFkIHN5bnRheCB3aGVuIHN1cHBvcnRlZCBvbiBhbGwgcGxhdGZvcm1z
LCBlLmcuIGBieXRlcyA9CiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWAKCgogICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyB2YWx1ZS5sZW5ndGgpOwogICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7CiAgICBieXRlcy5zZXQodmFsdWUsIG5hbWVzcGFjZS5sZW5ndGgpOwogICAgYnl0ZXMgPSBoYXNoZnVuYyhieXRlcyk7CiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247CiAgICBieXRlc1s4XSA9IGJ5dGVzWzhdICYgMHgzZiB8IDB4ODA7CgogICAgaWYgKGJ1
ZikgewogICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgewogICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldOwogICAgICB9CgogICAgICByZXR1cm4gYnVmOwogICAgfQoKICAgIHJldHVybiAoMCwgX3N0cmluZ2lmeS5kZWZhdWx0KShieXRlcyk7CiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MCkKCgogIHRyeSB7CiAgICBnZW5lcmF0ZVVVSUQubmFtZSA9IG5hbWU7IC8vIGVzbGludC1kaXNh
YmxlLW5leHQtbGluZSBuby1lbXB0eQogIH0gY2F0Y2ggKGVycikge30gLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnQKCgogIGdlbmVyYXRlVVVJRC5ETlMgPSBETlM7CiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDsKICByZXR1cm4gZ2VuZXJhdGVVVUlEOwp9Cgp9LHsiLi9wYXJzZS5qcyI6NDE5LCIuL3N0cmluZ2lmeS5qcyI6NDIzfV0sNDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxl
IiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7Cgp2YXIgX3JuZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9ybmcuanMiKSk7Cgp2YXIgX3N0cmluZ2lmeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9zdHJpbmdpZnkuanMiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiB2NChvcHRpb25z
LCBidWYsIG9mZnNldCkgewogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBfcm5nLmRlZmF1bHQpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAKCgogIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7CiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkCgogIGlmIChidWYpIHsKICAg
IG9mZnNldCA9IG9mZnNldCB8fCAwOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgewogICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldOwogICAgfQoKICAgIHJldHVybiBidWY7CiAgfQoKICByZXR1cm4gKDAsIF9zdHJpbmdpZnkuZGVmYXVsdCkocm5kcyk7Cn0KCnZhciBfZGVmYXVsdCA9IHY0OwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsKCn0seyIuL3JuZy5qcyI6NDIxLCIuL3N0cmluZ2lmeS5qcyI6NDIzfV0sNDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJp
Y3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7Cgp2YXIgX3YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vdjM1LmpzIikpOwoKdmFyIF9zaGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vc2hhMS5qcyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1
bHQ6IG9iagogIH07Cn0KCnZhciB2NSA9ICgwLCBfdi5kZWZhdWx0KSgndjUnLCAweDUwLCBfc2hhLmRlZmF1bHQpOwp2YXIgX2RlZmF1bHQgPSB2NTsKZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Cgp9LHsiLi9zaGExLmpzIjo0MjIsIi4vdjM1LmpzIjo0MjZ9XSw0Mjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsKCnZh
ciBfcmVnZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vcmVnZXguanMiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7CiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBfcmVnZXguZGVmYXVsdC50ZXN0KHV1aWQpOwp9Cgp2YXIgX2RlZmF1bHQgPSB2YWxpZGF0ZTsKZXhwb3J0cy5kZWZhdWx0ID0g
X2RlZmF1bHQ7Cgp9LHsiLi9yZWdleC5qcyI6NDIwfV0sNDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7Cgp2YXIgX3ZhbGlkYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL3ZhbGlkYXRlLmpzIikpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYm
IG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gdmVyc2lvbih1dWlkKSB7CiAgaWYgKCEoMCwgX3ZhbGlkYXRlLmRlZmF1bHQpKHV1aWQpKSB7CiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpOwogIH0KCiAgcmV0dXJuIHBhcnNlSW50KHV1aWQuc3Vic3RyKDE0LCAxKSwgMTYpOwp9Cgp2YXIgX2RlZmF1bHQgPSB2ZXJzaW9uOwpleHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsKCn0seyIuL3ZhbGlkYXRlLmpzIjo0Mjl9XSw0MzE6W2Z1bmN0aW9uKHJlcXVp
cmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Ci8qKgogKiBDaGFyYWN0ZXIgY2xhc3NlcyBhbmQgYXNzb2NpYXRlZCB1dGlsaXRpZXMgZm9yIHRoZSA1dGggZWRpdGlvbiBvZiBYTUwgMS4wLgogKgogKiBAYXV0aG9yIExvdWlzLURvbWluaXF1ZSBEdWJlYXUKICogQGxpY2Vuc2UgTUlUCiAqIEBjb3B5cmlnaHQgTG91aXMtRG9taW5pcXVlIER1YmVhdQogKi8KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsgLy8KLy8gRnJhZ21lbnRzLgovLwoKZXhw
b3J0cy5DSEFSID0gIlx0XG5cciAtXHVEN0ZGXHVFMDAwLVx1RkZGRFx1RDgwMFx1REMwMC1cdURCRkZcdURGRkYiOwpleHBvcnRzLlMgPSAiIFx0XHJcbiI7IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGgKCmV4cG9ydHMuTkFNRV9TVEFSVF9DSEFSID0gIjpBLVpfYS16XHhDMC1ceEQ2XHhEOC1ceEY2XHhGOC1cdTAyRkZcdTAzNzAtXHUwMzdEXHUwMzdGLVx1MUZGRlx1MjAwQ1x1MjAwRFx1MjA3MC1cdTIxOEZcdTJDMDAtXHUyRkVGXHUzMDAxLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVG
RkZEXHVEODAwXHVEQzAwLVx1REI3Rlx1REZGRiI7CmV4cG9ydHMuTkFNRV9DSEFSID0gIi0iICsgZXhwb3J0cy5OQU1FX1NUQVJUX0NIQVIgKyAiLjAtOVx4QjdcdTAzMDAtXHUwMzZGXHUyMDNGLVx1MjA0MCI7IC8vCi8vIFJlZ3VsYXIgZXhwcmVzc2lvbnMuCi8vCgpleHBvcnRzLkNIQVJfUkUgPSBuZXcgUmVnRXhwKCJeWyIgKyBleHBvcnRzLkNIQVIgKyAiXSQiLCAidSIpOwpleHBvcnRzLlNfUkUgPSBuZXcgUmVnRXhwKCJeWyIgKyBleHBvcnRzLlMgKyAiXSskIiwgInUiKTsKZXhwb3J0cy5OQU1FX1NUQVJUX0NIQVJfUkUg
PSBuZXcgUmVnRXhwKCJeWyIgKyBleHBvcnRzLk5BTUVfU1RBUlRfQ0hBUiArICJdJCIsICJ1Iik7CmV4cG9ydHMuTkFNRV9DSEFSX1JFID0gbmV3IFJlZ0V4cCgiXlsiICsgZXhwb3J0cy5OQU1FX0NIQVIgKyAiXSQiLCAidSIpOwpleHBvcnRzLk5BTUVfUkUgPSBuZXcgUmVnRXhwKCJeWyIgKyBleHBvcnRzLk5BTUVfU1RBUlRfQ0hBUiArICJdWyIgKyBleHBvcnRzLk5BTUVfQ0hBUiArICJdKiQiLCAidSIpOwpleHBvcnRzLk5NVE9LRU5fUkUgPSBuZXcgUmVnRXhwKCJeWyIgKyBleHBvcnRzLk5BTUVfQ0hBUiArICJdKyQiLCAi
dSIpOwp2YXIgVEFCID0gOTsKdmFyIE5MID0gMHhBOwp2YXIgQ1IgPSAweEQ7CnZhciBTUEFDRSA9IDB4MjA7IC8vCi8vIExpc3RzLgovLwoKLyoqIEFsbCBjaGFyYWN0ZXJzIGluIHRoZSBgYFNgYCBwcm9kdWN0aW9uLiAqLwoKZXhwb3J0cy5TX0xJU1QgPSBbU1BBQ0UsIE5MLCBDUiwgVEFCXTsKLyoqCiAqIERldGVybWluZXMgd2hldGhlciBhIGNvZGVwb2ludCBtYXRjaGVzIHRoZSBgYENIQVJgYCBwcm9kdWN0aW9uLgogKgogKiBAcGFyYW0gYyBUaGUgY29kZSBwb2ludC4KICoKICogQHJldHVybnMgYGB0cnVlYGAgaWYgdGhl
IGNvZGVwb2ludCBtYXRjaGVzIGBgQ0hBUmBgLgogKi8KCmZ1bmN0aW9uIGlzQ2hhcihjKSB7CiAgcmV0dXJuIGMgPj0gU1BBQ0UgJiYgYyA8PSAweEQ3RkYgfHwgYyA9PT0gTkwgfHwgYyA9PT0gQ1IgfHwgYyA9PT0gVEFCIHx8IGMgPj0gMHhFMDAwICYmIGMgPD0gMHhGRkZEIHx8IGMgPj0gMHgxMDAwMCAmJiBjIDw9IDB4MTBGRkZGOwp9CgpleHBvcnRzLmlzQ2hhciA9IGlzQ2hhcjsKLyoqCiAqIERldGVybWluZXMgd2hldGhlciBhIGNvZGVwb2ludCBtYXRjaGVzIHRoZSBgYFNgYCAoc3BhY2UpIHByb2R1Y3Rpb24uCiAqCiAq
IEBwYXJhbSBjIFRoZSBjb2RlIHBvaW50LgogKgogKiBAcmV0dXJucyBgYHRydWVgYCBpZiB0aGUgY29kZXBvaW50IG1hdGNoZXMgYGBTYGAuCiAqLwoKZnVuY3Rpb24gaXNTKGMpIHsKICByZXR1cm4gYyA9PT0gU1BBQ0UgfHwgYyA9PT0gTkwgfHwgYyA9PT0gQ1IgfHwgYyA9PT0gVEFCOwp9CgpleHBvcnRzLmlzUyA9IGlzUzsKLyoqCiAqIERldGVybWluZXMgd2hldGhlciBhIGNvZGVwb2ludCBtYXRjaGVzIHRoZSBgYE5BTUVfU1RBUlRfQ0hBUmBgIHByb2R1Y3Rpb24uCiAqCiAqIEBwYXJhbSBjIFRoZSBjb2RlIHBvaW50Lgog
KgogKiBAcmV0dXJucyBgYHRydWVgYCBpZiB0aGUgY29kZXBvaW50IG1hdGNoZXMgYGBOQU1FX1NUQVJUX0NIQVJgYC4KICovCgpmdW5jdGlvbiBpc05hbWVTdGFydENoYXIoYykgewogIHJldHVybiBjID49IDB4NDEgJiYgYyA8PSAweDVBIHx8IGMgPj0gMHg2MSAmJiBjIDw9IDB4N0EgfHwgYyA9PT0gMHgzQSB8fCBjID09PSAweDVGIHx8IGMgPT09IDB4MjAwQyB8fCBjID09PSAweDIwMEQgfHwgYyA+PSAweEMwICYmIGMgPD0gMHhENiB8fCBjID49IDB4RDggJiYgYyA8PSAweEY2IHx8IGMgPj0gMHgwMEY4ICYmIGMgPD0gMHgw
MkZGIHx8IGMgPj0gMHgwMzcwICYmIGMgPD0gMHgwMzdEIHx8IGMgPj0gMHgwMzdGICYmIGMgPD0gMHgxRkZGIHx8IGMgPj0gMHgyMDcwICYmIGMgPD0gMHgyMThGIHx8IGMgPj0gMHgyQzAwICYmIGMgPD0gMHgyRkVGIHx8IGMgPj0gMHgzMDAxICYmIGMgPD0gMHhEN0ZGIHx8IGMgPj0gMHhGOTAwICYmIGMgPD0gMHhGRENGIHx8IGMgPj0gMHhGREYwICYmIGMgPD0gMHhGRkZEIHx8IGMgPj0gMHgxMDAwMCAmJiBjIDw9IDB4RUZGRkY7Cn0KCmV4cG9ydHMuaXNOYW1lU3RhcnRDaGFyID0gaXNOYW1lU3RhcnRDaGFyOwovKioKICog
RGV0ZXJtaW5lcyB3aGV0aGVyIGEgY29kZXBvaW50IG1hdGNoZXMgdGhlIGBgTkFNRV9DSEFSYGAgcHJvZHVjdGlvbi4KICoKICogQHBhcmFtIGMgVGhlIGNvZGUgcG9pbnQuCiAqCiAqIEByZXR1cm5zIGBgdHJ1ZWBgIGlmIHRoZSBjb2RlcG9pbnQgbWF0Y2hlcyBgYE5BTUVfQ0hBUmBgLgogKi8KCmZ1bmN0aW9uIGlzTmFtZUNoYXIoYykgewogIHJldHVybiBpc05hbWVTdGFydENoYXIoYykgfHwgYyA+PSAweDMwICYmIGMgPD0gMHgzOSB8fCBjID09PSAweDJEIHx8IGMgPT09IDB4MkUgfHwgYyA9PT0gMHhCNyB8fCBjID49IDB4
MDMwMCAmJiBjIDw9IDB4MDM2RiB8fCBjID49IDB4MjAzRiAmJiBjIDw9IDB4MjA0MDsKfQoKZXhwb3J0cy5pc05hbWVDaGFyID0gaXNOYW1lQ2hhcjsKCn0se31dLDQzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKLyoqCiAqIENoYXJhY3RlciBjbGFzc2VzIGFuZCBhc3NvY2lhdGVkIHV0aWxpdGllcyBmb3IgdGhlIDJuZCBlZGl0aW9uIG9mIFhNTCAxLjEuCiAqCiAqIEBhdXRob3IgTG91aXMtRG9taW5pcXVlIER1YmVhdQogKiBAbGljZW5zZSBNSVQKICogQGNvcHlyaWdodCBMb3Vp
cy1Eb21pbmlxdWUgRHViZWF1CiAqLwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOyAvLwovLyBGcmFnbWVudHMuCi8vCgpleHBvcnRzLkNIQVIgPSAiXHgwMS1cdUQ3RkZcdUUwMDAtXHVGRkZEXHVEODAwXHVEQzAwLVx1REJGRlx1REZGRiI7CmV4cG9ydHMuUkVTVFJJQ1RFRF9DSEFSID0gIlx4MDEtXGJceDBCXGZceDBFLVx4MUZceDdGLVx4ODRceDg2LVx4OUYiOwpleHBvcnRzLlMgPSAiIFx0XHJcbiI7IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpt
YXgtbGluZS1sZW5ndGgKCmV4cG9ydHMuTkFNRV9TVEFSVF9DSEFSID0gIjpBLVpfYS16XHhDMC1ceEQ2XHhEOC1ceEY2XHhGOC1cdTAyRkZcdTAzNzAtXHUwMzdEXHUwMzdGLVx1MUZGRlx1MjAwQ1x1MjAwRFx1MjA3MC1cdTIxOEZcdTJDMDAtXHUyRkVGXHUzMDAxLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkZEXHVEODAwXHVEQzAwLVx1REI3Rlx1REZGRiI7CmV4cG9ydHMuTkFNRV9DSEFSID0gIi0iICsgZXhwb3J0cy5OQU1FX1NUQVJUX0NIQVIgKyAiLjAtOVx4QjdcdTAzMDAtXHUwMzZGXHUyMDNGLVx1MjA0MCI7
IC8vCi8vIFJlZ3VsYXIgZXhwcmVzc2lvbnMuCi8vCgpleHBvcnRzLkNIQVJfUkUgPSBuZXcgUmVnRXhwKCJeWyIgKyBleHBvcnRzLkNIQVIgKyAiXSQiLCAidSIpOwpleHBvcnRzLlJFU1RSSUNURURfQ0hBUl9SRSA9IG5ldyBSZWdFeHAoIl5bIiArIGV4cG9ydHMuUkVTVFJJQ1RFRF9DSEFSICsgIl0kIiwgInUiKTsKZXhwb3J0cy5TX1JFID0gbmV3IFJlZ0V4cCgiXlsiICsgZXhwb3J0cy5TICsgIl0rJCIsICJ1Iik7CmV4cG9ydHMuTkFNRV9TVEFSVF9DSEFSX1JFID0gbmV3IFJlZ0V4cCgiXlsiICsgZXhwb3J0cy5OQU1FX1NU
QVJUX0NIQVIgKyAiXSQiLCAidSIpOwpleHBvcnRzLk5BTUVfQ0hBUl9SRSA9IG5ldyBSZWdFeHAoIl5bIiArIGV4cG9ydHMuTkFNRV9DSEFSICsgIl0kIiwgInUiKTsKZXhwb3J0cy5OQU1FX1JFID0gbmV3IFJlZ0V4cCgiXlsiICsgZXhwb3J0cy5OQU1FX1NUQVJUX0NIQVIgKyAiXVsiICsgZXhwb3J0cy5OQU1FX0NIQVIgKyAiXSokIiwgInUiKTsKZXhwb3J0cy5OTVRPS0VOX1JFID0gbmV3IFJlZ0V4cCgiXlsiICsgZXhwb3J0cy5OQU1FX0NIQVIgKyAiXSskIiwgInUiKTsKdmFyIFRBQiA9IDk7CnZhciBOTCA9IDB4QTsKdmFy
IENSID0gMHhEOwp2YXIgU1BBQ0UgPSAweDIwOyAvLwovLyBMaXN0cy4KLy8KCi8qKiBBbGwgY2hhcmFjdGVycyBpbiB0aGUgYGBTYGAgcHJvZHVjdGlvbi4gKi8KCmV4cG9ydHMuU19MSVNUID0gW1NQQUNFLCBOTCwgQ1IsIFRBQl07Ci8qKgogKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBjb2RlcG9pbnQgbWF0Y2hlcyB0aGUgYGBDSEFSYGAgcHJvZHVjdGlvbi4KICoKICogQHBhcmFtIGMgVGhlIGNvZGUgcG9pbnQuCiAqCiAqIEByZXR1cm5zIGBgdHJ1ZWBgIGlmIHRoZSBjb2RlcG9pbnQgbWF0Y2hlcyBgYENIQVJgYC4KICovCgpm
dW5jdGlvbiBpc0NoYXIoYykgewogIHJldHVybiBjID49IDB4MDAwMSAmJiBjIDw9IDB4RDdGRiB8fCBjID49IDB4RTAwMCAmJiBjIDw9IDB4RkZGRCB8fCBjID49IDB4MTAwMDAgJiYgYyA8PSAweDEwRkZGRjsKfQoKZXhwb3J0cy5pc0NoYXIgPSBpc0NoYXI7Ci8qKgogKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBjb2RlcG9pbnQgbWF0Y2hlcyB0aGUgYGBSRVNUUklDVEVEX0NIQVJgYCBwcm9kdWN0aW9uLgogKgogKiBAcGFyYW0gYyBUaGUgY29kZSBwb2ludC4KICoKICogQHJldHVybnMgYGB0cnVlYGAgaWYgdGhlIGNvZGVwb2lu
dCBtYXRjaGVzIGBgUkVTVFJJQ1RFRF9DSEFSYGAuCiAqLwoKZnVuY3Rpb24gaXNSZXN0cmljdGVkQ2hhcihjKSB7CiAgcmV0dXJuIGMgPj0gMHgxICYmIGMgPD0gMHg4IHx8IGMgPT09IDB4QiB8fCBjID09PSAweEMgfHwgYyA+PSAweEUgJiYgYyA8PSAweDFGIHx8IGMgPj0gMHg3RiAmJiBjIDw9IDB4ODQgfHwgYyA+PSAweDg2ICYmIGMgPD0gMHg5RjsKfQoKZXhwb3J0cy5pc1Jlc3RyaWN0ZWRDaGFyID0gaXNSZXN0cmljdGVkQ2hhcjsKLyoqCiAqIERldGVybWluZXMgd2hldGhlciBhIGNvZGVwb2ludCBtYXRjaGVzIHRoZSBg
YENIQVJgYCBwcm9kdWN0aW9uIGFuZCBkb2VzIG5vdAogKiBtYXRjaCB0aGUgYGBSRVNUUklDVEVEX0NIQVJgYCBwcm9kdWN0aW9uLiBgYGlzQ2hhckFuZE5vdFJlc3RyaWN0ZWQoeClgYCBpcwogKiBlcXVpdmFsZW50IHRvIGBgaXNDaGFyKHgpICYmICFpc1Jlc3RyaWN0ZWRDaGFyKHgpYGAuIFRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyCiAqIHRoYW4gcnVubmluZyB0aGUgdHdvLWNhbGwgZXF1aXZhbGVudC4KICoKICogQHBhcmFtIGMgVGhlIGNvZGUgcG9pbnQuCiAqCiAqIEByZXR1cm5zIGBgdHJ1ZWBgIGlmIHRoZSBjb2RlcG9p
bnQgbWF0Y2hlcyBgYENIQVJgYCBhbmQgZG9lcyBub3QgbWF0Y2gKICogYGBSRVNUUklDVEVEX0NIQVJgYC4KICovCgpmdW5jdGlvbiBpc0NoYXJBbmROb3RSZXN0cmljdGVkKGMpIHsKICByZXR1cm4gYyA9PT0gMHg5IHx8IGMgPT09IDB4QSB8fCBjID09PSAweEQgfHwgYyA+IDB4MUYgJiYgYyA8IDB4N0YgfHwgYyA9PT0gMHg4NSB8fCBjID4gMHg5RiAmJiBjIDw9IDB4RDdGRiB8fCBjID49IDB4RTAwMCAmJiBjIDw9IDB4RkZGRCB8fCBjID49IDB4MTAwMDAgJiYgYyA8PSAweDEwRkZGRjsKfQoKZXhwb3J0cy5pc0NoYXJBbmRO
b3RSZXN0cmljdGVkID0gaXNDaGFyQW5kTm90UmVzdHJpY3RlZDsKLyoqCiAqIERldGVybWluZXMgd2hldGhlciBhIGNvZGVwb2ludCBtYXRjaGVzIHRoZSBgYFNgYCAoc3BhY2UpIHByb2R1Y3Rpb24uCiAqCiAqIEBwYXJhbSBjIFRoZSBjb2RlIHBvaW50LgogKgogKiBAcmV0dXJucyBgYHRydWVgYCBpZiB0aGUgY29kZXBvaW50IG1hdGNoZXMgYGBTYGAuCiAqLwoKZnVuY3Rpb24gaXNTKGMpIHsKICByZXR1cm4gYyA9PT0gU1BBQ0UgfHwgYyA9PT0gTkwgfHwgYyA9PT0gQ1IgfHwgYyA9PT0gVEFCOwp9CgpleHBvcnRzLmlzUyA9
IGlzUzsKLyoqCiAqIERldGVybWluZXMgd2hldGhlciBhIGNvZGVwb2ludCBtYXRjaGVzIHRoZSBgYE5BTUVfU1RBUlRfQ0hBUmBgIHByb2R1Y3Rpb24uCiAqCiAqIEBwYXJhbSBjIFRoZSBjb2RlIHBvaW50LgogKgogKiBAcmV0dXJucyBgYHRydWVgYCBpZiB0aGUgY29kZXBvaW50IG1hdGNoZXMgYGBOQU1FX1NUQVJUX0NIQVJgYC4KICovCi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjeWNsb21hdGljLWNvbXBsZXhpdHkKCmZ1bmN0aW9uIGlzTmFtZVN0YXJ0Q2hhcihjKSB7CiAgcmV0dXJuIGMgPj0gMHg0MSAmJiBjIDw9
IDB4NUEgfHwgYyA+PSAweDYxICYmIGMgPD0gMHg3QSB8fCBjID09PSAweDNBIHx8IGMgPT09IDB4NUYgfHwgYyA9PT0gMHgyMDBDIHx8IGMgPT09IDB4MjAwRCB8fCBjID49IDB4QzAgJiYgYyA8PSAweEQ2IHx8IGMgPj0gMHhEOCAmJiBjIDw9IDB4RjYgfHwgYyA+PSAweDAwRjggJiYgYyA8PSAweDAyRkYgfHwgYyA+PSAweDAzNzAgJiYgYyA8PSAweDAzN0QgfHwgYyA+PSAweDAzN0YgJiYgYyA8PSAweDFGRkYgfHwgYyA+PSAweDIwNzAgJiYgYyA8PSAweDIxOEYgfHwgYyA+PSAweDJDMDAgJiYgYyA8PSAweDJGRUYgfHwgYyA+
PSAweDMwMDEgJiYgYyA8PSAweEQ3RkYgfHwgYyA+PSAweEY5MDAgJiYgYyA8PSAweEZEQ0YgfHwgYyA+PSAweEZERjAgJiYgYyA8PSAweEZGRkQgfHwgYyA+PSAweDEwMDAwICYmIGMgPD0gMHhFRkZGRjsKfQoKZXhwb3J0cy5pc05hbWVTdGFydENoYXIgPSBpc05hbWVTdGFydENoYXI7Ci8qKgogKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBjb2RlcG9pbnQgbWF0Y2hlcyB0aGUgYGBOQU1FX0NIQVJgYCBwcm9kdWN0aW9uLgogKgogKiBAcGFyYW0gYyBUaGUgY29kZSBwb2ludC4KICoKICogQHJldHVybnMgYGB0cnVlYGAgaWYgdGhl
IGNvZGVwb2ludCBtYXRjaGVzIGBgTkFNRV9DSEFSYGAuCiAqLwoKZnVuY3Rpb24gaXNOYW1lQ2hhcihjKSB7CiAgcmV0dXJuIGlzTmFtZVN0YXJ0Q2hhcihjKSB8fCBjID49IDB4MzAgJiYgYyA8PSAweDM5IHx8IGMgPT09IDB4MkQgfHwgYyA9PT0gMHgyRSB8fCBjID09PSAweEI3IHx8IGMgPj0gMHgwMzAwICYmIGMgPD0gMHgwMzZGIHx8IGMgPj0gMHgyMDNGICYmIGMgPD0gMHgyMDQwOwp9CgpleHBvcnRzLmlzTmFtZUNoYXIgPSBpc05hbWVDaGFyOwoKfSx7fV0sNDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRz
KXsKInVzZSBzdHJpY3QiOwovKioKICogQ2hhcmFjdGVyIGNsYXNzIHV0aWxpdGllcyBmb3IgWE1MIE5TIDEuMCBlZGl0aW9uIDMuCiAqCiAqIEBhdXRob3IgTG91aXMtRG9taW5pcXVlIER1YmVhdQogKiBAbGljZW5zZSBNSVQKICogQGNvcHlyaWdodCBMb3Vpcy1Eb21pbmlxdWUgRHViZWF1CiAqLwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOyAvLwovLyBGcmFnbWVudHMuCi8vCi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGgK
CmV4cG9ydHMuTkNfTkFNRV9TVEFSVF9DSEFSID0gIkEtWl9hLXpceEMwLVx4RDZceEQ4LVx4RjZceEY4LVx1MDJGRlx1MDM3MC1cdTAzN0RcdTAzN0YtXHUxRkZGXHUyMDBDLVx1MjAwRFx1MjA3MC1cdTIxOEZcdTJDMDAtXHUyRkVGXHUzMDAxLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkZEXHVEODAwXHVEQzAwLVx1REI3Rlx1REZGRiI7CmV4cG9ydHMuTkNfTkFNRV9DSEFSID0gIi0iICsgZXhwb3J0cy5OQ19OQU1FX1NUQVJUX0NIQVIgKyAiLjAtOVx4QjdcdTAzMDAtXHUwMzZGXHUyMDNGLVx1MjA0MCI7IC8vCi8v
IFJlZ3VsYXIgZXhwcmVzc2lvbnMuCi8vCgpleHBvcnRzLk5DX05BTUVfU1RBUlRfQ0hBUl9SRSA9IG5ldyBSZWdFeHAoIl5bIiArIGV4cG9ydHMuTkNfTkFNRV9TVEFSVF9DSEFSICsgIl0kIiwgInUiKTsKZXhwb3J0cy5OQ19OQU1FX0NIQVJfUkUgPSBuZXcgUmVnRXhwKCJeWyIgKyBleHBvcnRzLk5DX05BTUVfQ0hBUiArICJdJCIsICJ1Iik7CmV4cG9ydHMuTkNfTkFNRV9SRSA9IG5ldyBSZWdFeHAoIl5bIiArIGV4cG9ydHMuTkNfTkFNRV9TVEFSVF9DSEFSICsgIl1bIiArIGV4cG9ydHMuTkNfTkFNRV9DSEFSICsgIl0qJCIs
ICJ1Iik7Ci8qKgogKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBjb2RlcG9pbnQgbWF0Y2hlcyBbW05DX05BTUVfU1RBUlRfQ0hBUl1dLgogKgogKiBAcGFyYW0gYyBUaGUgY29kZSBwb2ludC4KICoKICogQHJldHVybnMgYGB0cnVlYGAgaWYgdGhlIGNvZGVwb2ludCBtYXRjaGVzLgogKi8KLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmN5Y2xvbWF0aWMtY29tcGxleGl0eQoKZnVuY3Rpb24gaXNOQ05hbWVTdGFydENoYXIoYykgewogIHJldHVybiBjID49IDB4NDEgJiYgYyA8PSAweDVBIHx8IGMgPT09IDB4NUYgfHwgYyA+PSAw
eDYxICYmIGMgPD0gMHg3QSB8fCBjID49IDB4QzAgJiYgYyA8PSAweEQ2IHx8IGMgPj0gMHhEOCAmJiBjIDw9IDB4RjYgfHwgYyA+PSAweDAwRjggJiYgYyA8PSAweDAyRkYgfHwgYyA+PSAweDAzNzAgJiYgYyA8PSAweDAzN0QgfHwgYyA+PSAweDAzN0YgJiYgYyA8PSAweDFGRkYgfHwgYyA+PSAweDIwMEMgJiYgYyA8PSAweDIwMEQgfHwgYyA+PSAweDIwNzAgJiYgYyA8PSAweDIxOEYgfHwgYyA+PSAweDJDMDAgJiYgYyA8PSAweDJGRUYgfHwgYyA+PSAweDMwMDEgJiYgYyA8PSAweEQ3RkYgfHwgYyA+PSAweEY5MDAgJiYgYyA8
PSAweEZEQ0YgfHwgYyA+PSAweEZERjAgJiYgYyA8PSAweEZGRkQgfHwgYyA+PSAweDEwMDAwICYmIGMgPD0gMHhFRkZGRjsKfQoKZXhwb3J0cy5pc05DTmFtZVN0YXJ0Q2hhciA9IGlzTkNOYW1lU3RhcnRDaGFyOwovKioKICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgY29kZXBvaW50IG1hdGNoZXMgW1tOQ19OQU1FX0NIQVJdXS4KICoKICogQHBhcmFtIGMgVGhlIGNvZGUgcG9pbnQuCiAqCiAqIEByZXR1cm5zIGBgdHJ1ZWBgIGlmIHRoZSBjb2RlcG9pbnQgbWF0Y2hlcy4KICovCgpmdW5jdGlvbiBpc05DTmFtZUNoYXIoYykgewog
IHJldHVybiBpc05DTmFtZVN0YXJ0Q2hhcihjKSB8fCBjID09PSAweDJEIHx8IGMgPT09IDB4MkUgfHwgYyA+PSAweDMwICYmIGMgPD0gMHgzOSB8fCBjID09PSAweDAwQjcgfHwgYyA+PSAweDAzMDAgJiYgYyA8PSAweDAzNkYgfHwgYyA+PSAweDIwM0YgJiYgYyA8PSAweDIwNDA7Cn0KCmV4cG9ydHMuaXNOQ05hbWVDaGFyID0gaXNOQ05hbWVDaGFyOwoKfSx7fV19LHt9LFsxNV0pKDE1KQp9KTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhjZWxqcy5iYXJlLmpzLm1hcAo=

EndContent
Return cVar
