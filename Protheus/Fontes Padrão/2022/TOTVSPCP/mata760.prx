#Include "MATA760.CH"
#Include "Protheus.ch"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ MATA760  ³ Autor ³ Marcos Bregantim      ³ Data ³ 05/04/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Gera OPs baseado no ponto de pedido                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATA760(ExpL1)                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = indica processam. em batch		                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                              		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Descri‡ao ³ PLANO DE MELHORIA CONTINUA        ³Programa    MATA760.PRX ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ITEM PMC  ³ Responsavel              ³ Data       	|BOPS             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³      01  ³                          ³           	|                 ³±±
±±³      02  ³ Ricardo Berti            ³ 12/09/2006	| 00000107203     ³±±
±±³      03  ³                          ³           	|                 ³±±
±±³      04  ³ Ricardo Berti            ³ 12/09/2006	| 00000107203     ³±±
±±³      05  ³                          ³           	|                 ³±±
±±³      06  ³                          ³           	|                 ³±±
±±³      07  ³                          ³           	|                 ³±±
±±³      08  ³ Ricardo Berti            ³ 12/09/2006	| 00000107203     ³±±
±±³      09  ³                          ³           	|                 ³±±
±±³      10  ³ Ricardo Berti            ³ 12/09/2006	| 00000107203     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MATA760(lBatch)  
Local oDLg
Local nOpca     := 0
Local ni        := 0
Local lSchedule := IsBlind()
Local bBlNewProc := {|oCenterPanel|A760Point(,,,lEnd,oCenterPanel)}
Local lUsaNewPrc := UsaNewPrc()

Default lBatch  := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Array criado p/ substituir parametros                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private aSav650  := Array(20)
Private lConsTerc
Private lConsNPT
Private lShowOcr
Private lProj711 := .F.
Private lMata712 := .F.
PRIVATE lPCPA107 := .F.
Private lEnd := .F.
Private aOPOpc := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas na geracao de SCS aglutinadas por data  ³
//³ de necessidade.                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private aDataOPC1 :={},aDataOPC7:={},aOPC1:={},aOPC7:={}

Private Inclui := .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Pontos de entrada utilizados para geracao de OPs (MATA650)   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private lMTA650I:=.F.,lMT650C1 := .F.,lM650Emp:= .F.,lM650EmpT:= .F.

lMTA650I := (ExistBlock("MTA650I"))
lMT650C1 := (ExistBlock("MT650C1"))             
lM650EmpT:= (ExistTemplate("EMP650"))
lM650Emp := (ExistBlock("EMP650"))
l650Auto := lBatch .Or. lSchedule

If !lUsaNewPrc
	Pergunte("MTA650",.F.)
	//Salvar variaveis existentes
	For ni := 1 to 20
		aSav650[ni] := &("mv_par"+StrZero(ni,2))
	Next ni

	Pergunte("MTA760",.F.)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas para parametros                 ³
//³ mv_par01     // Produto de                           ³
//³ mv_par02     // Produto ate                          ³
//³ mv_par03     // Grupo de                             ³
//³ mv_par04     // Grupo ate                            ³
//³ mv_par05     // Tipo de                              ³
//³ mv_par06     // Tipo ate                             ³
//³ mv_par07     // Saldo Neg Considera                  ³	
//³ mv_par08     // Almoxarifado De                      ³	
//³ mv_par09     // Almoxarifado At‚                     ³	
//³ mv_par10     // Gera OPs / SCs 1- Firme 2- Prevista  ³
//³ mv_par11     // Data limite p/ empenhos              ³
//³ mv_par12     // Cons.Qtd. De 3os.? Sim / Nao         ³
//³ mv_par13     // Cons.Qtd. Em 3os.? Sim / Nao         ³
//³ mv_par14     // Qtd PV nao liberado?                 ³
//³ mv_par15     // Ao atingir Estoque Maximo ?          ³1=Qtde. Original; 2=Ajusta Est. Max
//³ mv_par16     // Mostra Ocorrencias?  				 ³
//³ mv_par17     // Considera Est. Seguranca ? (Sim/Nao) ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lBatch
	If lSchedule
		A760Point()
    Else
    	If lUsaNewPrc
			tNewProcess():New("MATA760",OemToAnsi(STR0001),bBlNewProc,OemToAnsi(STR0002)+" "+OemToAnsi(STR0003)+OemToAnsi(STR0004),"MTA760")				
		Else
			BatchProcess(STR0001,OemToAnsi(STR0002)+OemToAnsi(STR0003)+OemToAnsi(STR0004),"MTA760",{ || MsgMeter( {|oMeter, oText, oDlg, lEnd| A760Point(oMeter, oText, oDlg, lEnd ) },OemToAnsi(STR0005),OemToAnsi(STR0001)) })
		EndIf
    EndIf
Else
	MsgMeter( {|oMeter, oText, oDlg, lEnd| A760Point(oMeter, oText, oDlg, lEnd ) },OemToAnsi(STR0005),OemToAnsi(STR0001))	//"Gerando OPs por Ponto de Pedido..."###"OPs por Ponto de Pedido"
EndIf

Return Nil
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ A760Point³ Autor ³ Marcos Bregantim      ³ Data ³ 05/04/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Gera as OPs                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ A760Point(ExpO1,ExpO2,ExpO3,ExpL1)                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpO1 = obj do proces.                                     ³±±
±±³          ³ ExpO2 = obj do texto do proc.       			              ³±±
±±³          ³ ExpO3 = obj da dialog		       			              ³±±
±±³          ³ ExpL1 = controla interrupcao do usuario	                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                              		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA760                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A760Point(oMeter, oText, oDlg, lEnd, oCenterPanel)
Local nRec      := 1
Local bBlock    := {|| oMeter:Set(nRec), SysRefresh(), !lEnd}
Local nPrazo    := 0
Local nSaldo    := 0
Local nNeces    := 0
Local nQuant    := 0
Local cKey      := ""
Local cCond     := ""
Local cIndex    := ""
Local aInd      := {}
Local cProduto  := ""
Local nOps      := 0
Local cNomBat   := "BATCH"+cEmpAnt+"0.OP"
Local nOldOrder := 0 
Local nOldRecno := 0
Local cNivel    := ""
Local n         := 0
Local nPrazoTot := 0
Local lRet      := .T.   
Local cQuery    := ""
Local lQuery    := .F.
Local cCursor   := "SG1"
Local lM760OPI  := .T.
Local nEstMax   := 0
Local nx        := 0                       
Local ni        := 0
Local lM760VLDP := ExistBlock('M760VLDP')
Local lM760SLDP := ExistBlock('M760SLDP')
Local nRet      := 0 // variavel auxiliar para tratamento do retorno do ponto de entrada
Local lSchedule := IsBlind()
Local nEmin     := 0
Local aNegEst	:= {}
Local lGerouOP  := .F.
Local cCampo    := ""
Local cDadosProd:= Alltrim(SuperGetMV("MV_ARQPROD",.F.,"SB1"))
Local lM760PPed	:= .F.
Local lPrGerOP	:= .F.
local lPCPREVATU	:= FindFunction('PCPREVATU')  .AND.  SuperGetMv("MV_REVFIL",.F.,.F.)
local nDiasOci	:= SuperGetMV("MV_DIASOCI", .T., .F.)

Private nSeqC2,cNumOp,cItemOp
Private aLotesUsado := {}
Private aValAlt   := {}

A710GrvTm(oCenterPanel, STR0013) //"Inicio Processamento"

lConsTerc := mv_par12 == 1
lConsNPT  := mv_par13 == 1
lShowOcr  := mv_par16 == 1

Pergunte("MTA650",.F.)
//Salvar variaveis existentes para utilizacao da rotina automatica
For ni := 1 to 20
	aSav650[ni] := &("mv_par"+StrZero(ni,2))
Next ni

Pergunte("MTA760",.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cria Indice Condicional.                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cCursor:=GetNextAlias()
lQuery:=.T.
cQuery:="SELECT G1_FILIAL, G1_COD, G1_COMP, G1_TRT, G1_NIV, Abs(G1_QUANT) AS G1_QUANT FROM "+RetSQLName('SG1')+" SG1 "
cQuery+="JOIN "+RetSQLName('SB1')+" SB1 ON "
cQuery+="SB1.B1_FILIAL = '"+xFilial('SB1')+"' AND "
cQuery+="SB1.B1_COD = SG1.G1_COD AND SB1.B1_GRUPO BETWEEN '"+mv_par03+"' AND '"+mv_par04+"' AND "
cQuery+="SB1.B1_TIPO BETWEEN '"+mv_par05+"' AND '"+mv_par06+"' "

// Projeto Implementeacao de campos MRP e FANTASM no SBZ
if cDadosProd == "SB1"
	cQuery += "	AND SB1.B1_FANTASM <> 'S' "
Endif
cQuery+=" AND SUBSTRING(SB1.B1_COD,1,3) <> 'MOD' AND SB1.D_E_L_E_T_ = ' ' "

// Projeto Implementeacao de campos MRP e FANTASM no SBZ
if cDadosProd == "SBZ"
	cQuery += "  LEFT OUTER JOIN "+RetSqlName("SBZ")+" SBZ "
	cQuery += "    ON BZ_FILIAL = '"+xFilial("SBZ")+"' AND BZ_COD = SG1.G1_COD "
	cQuery += "    AND SBZ.D_E_L_E_T_ = ' ' "
Endif		

cQuery+="WHERE SG1.G1_FILIAL = '"+xFilial('SG1')+"' AND "
cQuery+=" SG1.G1_COD BETWEEN '"+mv_par01+"' AND '"+mv_par02+"' AND "
cQuery+=" SG1.D_E_L_E_T_ = ' ' "	

// Projeto Implementeacao de campos MRP e FANTASM no SBZ
if cDadosProd == "SBZ"
	cQuery+=" AND ISNULL( BZ_FANTASM, B1_FANTASM ) <> 'S' "
Endif			

//-- Processa ponto de pedido de subprodutos
If SuperGetMV("MV_NEGESTR",.F.,.F.)
	cQuery+="UNION ALL "
	cQuery+="SELECT G1_FILIAL, G1_COD, G1_COMP, G1_TRT, 'ZZ' AS G1_NIV, G1_QUANT "
	cQuery+="FROM "+RetSQLName('SG1')+" SG1 JOIN "+RetSQLName('SB1')+" SB1 ON "
	cQuery+="SB1.B1_FILIAL = '"+xFilial('SB1')+"' AND "
	cQuery+="SB1.B1_COD = SG1.G1_COMP AND SB1.B1_GRUPO BETWEEN '"+mv_par03+"' AND '"+mv_par04+"' AND "
	cQuery+="SB1.B1_TIPO BETWEEN '"+mv_par05+"' AND '"+mv_par06+"' "
	
	// Projeto Implementeacao de campos MRP e FANTASM no SBZ
	if cDadosProd == "SB1"
		cQuery += "	AND SB1.B1_FANTASM <> 'S' "
	Endif

	cQuery+=" AND SUBSTRING(SB1.B1_COD,1,3) <> 'MOD' AND SB1.D_E_L_E_T_ = ' ' "

	// Projeto Implementeacao de campos MRP e FANTASM no SBZ
	if cDadosProd == "SBZ"
		cQuery += "  LEFT OUTER JOIN "+RetSqlName("SBZ")+" SBZ "
		cQuery += "    ON BZ_FILIAL = '"+xFilial("SBZ")+"' AND BZ_COD = SG1.G1_COD "
		cQuery += "    AND SBZ.D_E_L_E_T_ = ' ' "
	Endif		
	
	cQuery+="WHERE SG1.G1_FILIAL = '"+xFilial('SG1')+"' AND "
	cQuery+="SG1.G1_COMP BETWEEN '"+mv_par01+"' AND '"+mv_par02+"' AND "
	cQuery+=" SG1.G1_QUANT < 0 AND "
	
	//Produto negativos sem estrutura.
	cQuery+=" (( SELECT COUNT(G1_COD) FROM "+RetSQLName('SG1')+" CONT WHERE CONT.G1_COD = SG1.G1_COMP AND "
  	cQuery+=" CONT.G1_FILIAL = SG1.G1_FILIAL AND "
 	cQuery+=" CONT.D_E_L_E_T_ = ' ') = 0) AND "

	cQuery+=" SG1.D_E_L_E_T_ = ' ' "	
   
	// Projeto Implementeacao de campos MRP e FANTASM no SBZ
	if cDadosProd == "SBZ"
		cQuery+=" AND ISNULL( BZ_FANTASM, B1_FANTASM ) <> 'S' "
	Endif			
	
EndIf
cQuery+="ORDER BY "+SqlOrder("G1_FILIAL+G1_NIV+G1_COD")
cQuery:=ChangeQuery(cQuery)
dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),cCursor)

DbGoTop()
If !lSchedule
	If BOF() .and. EOF()
		HELP(" ",1,"RECNO")
	ElseIf (oCenterPanel==Nil)
  		oMeter:nTotal:=nTotRegs:=LastRec()
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Obtem numero da proxima OP                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SC2")
cNumOP    := GetNumSc2()
cItemOP   := "01"
nSeqC2    := 1
lConsTerc := mv_par12 == 1
lConsNPT  := mv_par13 == 1
lShowOcr  := mv_par16 == 1

dbSelectArea(cCursor)
If (oCenterPanel<>Nil)
	oCenterPanel:SetRegua2((cCursor)->(LastRec()))
EndIf
While !Eof() 
	cNivel:=(cCursor)->G1_NIV
	cProduto:=""
	Do While !Eof() .And. (cCursor)->G1_NIV == cNivel 
	
		cCampo := "G1_COD"
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Processa movimento da regua ilustrativa             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    	If !lSchedule
    		If (oCenterPanel==Nil)
	    		EVAL(bBlock)
	    	Else
	    		oCenterPanel:SetRegua1(3)
	    	EndIf
	    EndIf
		nRec++
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Processa cada produto somente uma vez               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (oCenterPanel<>Nil)
			oCenterPanel:IncRegua1(OemToAnsi(STR0010))
		EndIf
		If cProduto != (cCursor)->&(cCampo)
			cProduto:=(cCursor)->&(cCampo)
		Else
			dbSkip()
			Loop
		EndIf
		dbSelectArea("SB1")
		If !(dbSeek(xFilial("SB1")+(cCursor)->&(cCampo)))
			dbSelectArea(cCursor)
			dbSkip()
			Loop
		EndIf
		If !lQuery
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Filtra grupos e tipos nao selecionados e tambem se for MOD³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If SB1->B1_GRUPO < mv_par03 .Or. SB1->B1_GRUPO > mv_par04 .Or.;
				SB1->B1_TIPO  < mv_par05 .Or. SB1->B1_TIPO  > mv_par06 .Or.;
				IsProdMod(SB1->B1_COD) .Or. RetFldProd(SB1->B1_COD,"B1_FANTASM") == "S" 	// Projeto Implementeacao de campos MRP e FANTASM no SBZ
				dbSelectArea(cCursor)
				dbSkip()
				Loop
			EndIf
		EndIf	
		dbSelectArea(cCursor)   
				
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³PE que permite validar se devera ou nao gerar OP para um³
		//³determinado produto.                                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lM760VLDP
			lPrGerOP := ExecBlock('M760VLDP',.F.,.F.,{(cCursor)->&(cCampo)})
		    If Valtype( lPrGerOp ) == "L"  .And. !lPrGerOP
				(cCursor)->( dbSkip() )
				Loop
			EndIf
		EndIf
		
		dbSelectArea(cCursor)   
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula o saldo atual dos almoxarifados escolhidos ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (oCenterPanel<>Nil)
			oCenterPanel:IncRegua1(OemToAnsi(STR0011))
		EndIf
		dbSelectArea("SB2")
		dbSeek(xFilial("SB2")+(cCursor)->&(cCampo))
		While !EOF() .And. SB2->(B2_FILIAL+B2_COD) == xFilial("SB2")+(cCursor)->&(cCampo)
			If SB2->B2_LOCAL >= mv_par08 .And. SB2->B2_LOCAL <= mv_par09
			  	nSaldo += (SALDOSB2(.T.,NIL,If(Empty(mv_par11),dDataBase,mv_par11),mv_par12==1,mv_par13==1)+SB2->B2_SALPEDI+AvalQtdPre("SB2",2))
				If mv_par14 == 1
					nSaldo -= SB2->B2_QPEDVEN
				EndIf
			EndIf			
			dbSkip()
		EndDo  

		If mv_par07 == 2 .and. nSaldo < 0
			nSaldo -= RetFldProd(SB1->B1_COD,"B1_LE")
		Endif
		If lM760SLDP
		   nRet   := ExecBlock('M760SLDP', .F., .F., {SB1->B1_COD,nSaldo})
		   If ValType(nRet) =="N"
				nSaldo :=nRet
			EndIf
		EndIf

		// Ponto de Entrada para que seja permitido trabalhar com estoque em cima do Ponto de Pedido, sem acrescentar 1 unidade
		If Existblock("M760PPED")
			lM760PPed := Execblock("M760PPED",.F.,.F.,{SB1->B1_COD})
		Endif		 

		nEmin := RetFldProd(SB1->B1_COD,"B1_EMIN")
		Do Case
		Case QtdComp(nSaldo) < QtdComp(0)
			nNeces := Abs(nSaldo) + nEmin
		Case ( QtdComp(nSaldo) == QtdComp(nEmin) ) .And. ( QtdComp(nEmin) > QtdComp(0) ) .And. !lM760PPed
			nNeces := 1
		OtherWise
			nNeces := nEmin - nSaldo
		EndCase
		
		If QtdComp(nSaldo) < QtdComp(nEmin) .And. !lM760PPed
			nNeces += 1
		EndIf

		If mv_par17 == 1
			nNeces += CalcEstSeg( RetFldProd(SB1->B1_COD,"B1_ESTFOR") )
		EndIf
	
		If nNeces > 0 .and. SB1->B1_MSBLQL == "2"
			//-- Trata subproduto
			If (cCursor)->G1_QUANT < 0 .And. ((aNegEst := IsNegEstr((cCursor)->&(cCampo),dDataBase,nNeces))[1])
				nNeces := aNegEst[4]
				SB1->(dbSeek(xFilial("SB1")+aNegEst[2]))
				//Se o pai do subproduto for um fantasma, deverá ser chamado novamente a função isNegEstr para buscar o pai imediatamente superior que não seja fantasma.
				if SB1->B1_FANTASM == 'S'
					aNegEst := IsNegEstr((cCursor)->&(cCampo),dDataBase,nNeces,aNegEst[2])
				endif
			Else
				//Caso nao seja subproduto, valores default
				aNegEst := {.F.,(cCursor)->&(cCampo),SB1->B1_OPC,NIL,1}
			EndIf

			For nI := 1 To aNegEst[5]
				aQtdes := CalcLote(aNegEst[2],nNeces,"F")
				//ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ mv_par15 | Ao atingir Estoque Maximo ? ³1=Qtde. Original; 2=Ajusta Est. Max³
				//ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If (nEstMax := A711Sb1EstMax(aNegEst[2])) # 0 .And. mv_par15 == 2
					aQtdes := A711LotMax(aNegEst[2], nEstMax - nSaldo, aQtdes, .T.)
				Endif
	
				For nX := 1 to Len(aQtdes)
					nQuant := aQtdes[nX]
					If nQuant > 0
						nPrazo := CalcPrazo(aNegEst[2],nQuant,,,.T.,dDataBase)
						// Verifica se usuario confirma geracao das OPs
						nPrazoTot:=0;lRet:=.T.
						nPrazoTot:=PrazoEstru(aNegEst[2],nQuant)
						If lShowOcr .And. nPrazoTot > 0
							lRet:=A650Alert2(cNumOP+cItemOP+StrZero(nSeqC2,Len(SC2->C2_SEQUEN)),nPrazoTot,aNegEst[2])
						EndIf
						If lRet	.AND. A760VLOPC(aNegEst[2])
							Begin Transaction
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Esta funcao cria o registro no SC2 , zerando os valores acumulados ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							RecLock("SC2",.T.)
							Replace C2_PRODUTO	With aNegEst[2] , C2_FILIAL  With xFilial("SC2"),;
									C2_NUM		With cNumOp, C2_ITEM With cItemOp,;
									C2_EMISSAO	With dDataBase  , C2_LOCAL With RetFldProd(SB1->B1_COD,"B1_LOCPAD"),;
									C2_CC		With SB1->B1_CC , C2_UM With SB1->B1_UM,;
									C2_QUANT	With nQuant , C2_DATPRF  With SomaPrazo(dDataBase, nPrazo),;
									C2_DESTINA	With "E" , C2_PRIOR   With "500",;
									C2_SEQUEN	With StrZero(nSeqC2,Len(C2_SEQUEN)),;
									C2_DATPRI	With dDataBase,;
									C2_QTSEGUM	With ConvUm(SB1->B1_COD,nQuant,0,2),;
									C2_TPOP		With If(mv_par10 == 1,"F","P"),;
									C2_ROTEIRO	With SB1->B1_OPERPAD,;
									C2_OPC		With aNegEst[3],;
									C2_REVISAO	With IIF(lPCPREVATU , PCPREVATU(SB1->B1_COD), SB1->B1_REVATU )//SB1->B1_REVATU
									If  nDiasOci >= 0
										Replace C2_DIASOCI With nDiasOci
									EndIf

							If cPaisLoc == "BRA"
								Replace C2_TPPR     With "I"
							EndIf

							lGerouOP := .T.
							
							If ExistBlock("M760SC2")
								ExecBlock("M760SC2",.F.,.F.)
							Endif

							MsUnlock()		
							If ( __lSx8 )
								ConFirmSx8()
							EndIf
							dbSelectArea("SB2")
							If !dbSeek(xFilial("SB2")+aNegEst[2]+SC2->C2_LOCAL)
								CriaSB2(SC2->C2_PRODUTO,SC2->C2_LOCAL)
							EndIf
							GravaB2Pre("+",nQuant,SC2->C2_TPOP)
							MsUnlock()

							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Gera integracao com Inspecao de Processos (QIP), caso exista    ³
							//| Obs: funcao OPGeraQIP esta programada no PCPXFUN.				³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							OPGeraQIP()

							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Envia para funcao de inclusao de OP's do SIGAPCP        ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If (oCenterPanel<>Nil)
								oCenterPanel:IncRegua1(OemToAnsi(STR0012))
							EndIf
							dbSelectArea("SC2")
					  	    A650PutBatch(C2_FILIAL+C2_NUM+C2_ITEM+C2_SEQUEN+C2_ITEMGRD,,SC2->C2_DATPRI,SC2->C2_DATPRF)
							cNumOP := GetNumSc2()
							End Transaction
						EndIf
					EndIf
				Next nx
			Next nI
		EndIf
		dbSelectArea(cCursor)
		nSaldo := 0
		nQuant := 0
        nNeces := 0
		dbSkip()
		If (oCenterPanel<>Nil)
			oCenterPanel:IncRegua2()
		EndIf
	EndDo
	If ( __lSx8 )
		RollBackSx8()
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Abre, testa integridade e indexa o arquivo BATCHxx0.OP         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !lQuery
		nOldOrder:=IndexOrd()
		nOldRecno:=Recno()
	EndIf
	SG1->(dbSetOrder(1))
	If lGerouOP
		a650RegOPI(, @nOps)		
		
		If ExistBlock("M760OPI")
			lM760OPI := ExecBlock("M760OPI",.F.,.F.)
			lM760OPI := If(ValType(lM760OPI) == "L", lM760OPI, .T.)
		EndIf
		If lM760OPI
			Pergunte("MTA650",.F.)
			Processa({|lEnd| MA650Process(@lEnd,nOps)},STR0007,OemToAnsi(STR0008),.F.) 	//"Gera‡„o de OPs Intermediarias e SCs"###"Gerando OPs Intermediarias e SCs..."
			lGerouOP := .F.
			Pergunte("MTA760",.F.)
			lConsTerc := mv_par12 == 1
			lConsNPT  := mv_par13 == 1
		Endif
	EndIf
	dbSelectArea(cCursor)
	If !lQuery
		dbSetOrder(nOldOrder)
		dbGoto(nOldRecno)
	EndIf
EndDo
If lQuery
	dbSelectArea(cCursor)
	dbCloseArea()
EndIf
dbSelectArea("SG1")

If ExistBlock("A760FIM")
	ExecBlock("A760FIM",.F.,.F.)
Endif	

A710GrvTm(oCenterPanel, STR0014) //"Fim Processamento"
Return Nil

/*/{Protheus.doc} A760VLOPC
//Rotina para fazer a validação de opcionais na estrutura
@author Thiago.Zoppi
@since 18/05/2018
/*/

FUNCTION A760VLOPC(cCodProd)
	Local lRet		 := .T.
	Local aAreaAnt   := GetArea()
	Local aAreaSB1   := SB1->(GetArea())
	Local aAreaSG1   := SG1->(GetArea())
	Local cNomeArq   := ''
	Local oTempTable := NIL
	Private nEstru   := 0

	cNomeArq := Estrut2(cCodProd,/*nQuant*/,/*cAliasEstru*/,@oTempTable,/*lAsShow*/,/*lPreEstru*/,/*lVldData*/,/*lVldRev*/,.F.)

	dbSelectArea('ESTRUT')
	ESTRUT->(dbGotop())

	Do While !ESTRUT->(Eof())
		
		IF !VldOpc(ESTRUT->CODIGO, cCodProd)
			lRet := .F.
			Exit
		ENDIF
				
		ESTRUT->(dbSkip())
	EndDo

	FimEstrut2(Nil,oTempTable)

	RestArea(aAreaSG1)
	RestArea(aAreaSB1)
	RestArea(aAreaAnt)

RETURN lRet

/*/{Protheus.doc} VldOpc
Valida se tem opcionais e se opcionais esta como obrigratorio
--Função trazida do fonte pcpa107 após a descontinuação da rotina
@type  Static Function
@author Lucas Fagundes
@since 19/07/2022
@version P12
@param cProduto  , Character, Produto que irá validar o opcionais
@param cProdPaOpc, Character, Produto pai que irá buscar os opcionais
@return lRet, Logico, Indica se os opcionais estão ok
/*/
Static Function VldOpc(cProduto, cProdPaOpc)
	Local aArea      := GetArea()
	Local aGrupos    := {}
	Local aOpcionais := {}
	Local aOpcionAUX := {}
	Local cAlias     := GetNextAlias()
	Local cOpcDefa   := ""
	Local lOpcDefa   := .F.
	Local lRet       := .T.
	Local nAcho      := 0
	Local nTamDif    := (GetSx3Cache("GA_OPC", "X3_TAMANHO")+GetSx3Cache("GA_DESCOPC", "X3_TAMANHO")+13)-(GetSx3Cache("GA_GROPC", "X3_TAMANHO")+GetSx3Cache("GA_DESCGRP", "X3_TAMANHO")+3)

	Default cProdPaOpc := cProduto

	// Estrutura do array dos opcionais
	// 1 Marcado (.T. ou .F.)
	// 2 Titulo("0") ou Item("1")
	// 3 Item Opcional+Descricao Opcional
	// 4 Grupo de Opcionais
	// 5 Registro no SGA
	// 6 Nivel no SG1
	// 7 Recno do SG1
	// 8 Componente Ok (.T.) ou Vencido (.F.)
	// 9 Codigo do componente
	// 10 Default ?

	BeginSql alias cAlias
		SELECT SG1.G1_GROPC,
		       SG1.G1_OPC,
		       SG1.R_E_C_N_O_ RecnoSG1,
		       SG1.G1_NIV,
		       SG1.G1_COMP,
		       SGA.GA_GROPC,
		       SGA.GA_DESCGRP,
		       SGA.GA_OPC, 
		       SGA.GA_DESCOPC,
		       SGA.GA_OBG,
		       SGA.R_E_C_N_O_ RecnoSGA,
		       SB1.B1_OPC
		 FROM %table:SG1% SG1
		INNER JOIN %table:SGA% SGA
		   ON SGA.GA_FILIAL = %xFilial:SGA%
		  AND SGA.GA_GROPC  = SG1.G1_GROPC
		  AND SGA.GA_OPC    = SG1.G1_OPC
		  AND SGA.%notDel%
		INNER JOIN %table:SB1% SB1
		   ON SB1.B1_FILIAL = %xFilial:SB1%
		  AND SB1.B1_COD    = SG1.G1_COD
		  AND SB1.%notDel%
		WHERE SG1.G1_FILIAL = %xFilial:SG1% 
		  AND SG1.G1_COD    = %exp:cProduto%
		  AND SG1.G1_GROPC  <> ' '
		  AND SG1.G1_OPC    <> ' '
		  AND SG1.%notDel%
	EndSql

	While !(cAlias)->(EoF())		
		cOpcArq := (cAlias)->(G1_GROPC)+(cAlias)->(G1_OPC)
		cOpcDefa := (cAlias)->(B1_OPC)

		If (!Empty(cOpcDefa) .And. !Empty(cOpcArq) .And. !(cOpcArq $ cOpcDefa)) .Or. (Empty(cOpcDefa) .Or. Empty(cOpcArq))
			lOpcDefa := .F.
		Else
			lOpcDefa := .T.
		EndIf

		nAcho := ASCAN(aGrupos, {|x| x[1] == (cAlias)->(G1_GROPC)})
		If nAcho == 0
			AADD(aGrupos, {(cAlias)->(G1_GROPC),;
			               (cAlias)->(GA_OBG)  })
			
			// Adiciona titulo ao array
			AADD(aOpcionais, {.F.                                                             ,;
			                  "0"                                                             ,;
			                  (cAlias)->(GA_GROPC)+" - "+(cAlias)->(GA_DESCGRP)+Space(nTamDif),;
			                  (cAlias)->(GA_GROPC)                                            ,;
			                  (cAlias)->(RecnoSGA)                                            ,;
			                  (cAlias)->(G1_NIV) + (cAlias)->(G1_COMP)                        ,;
			                  (cAlias)->(RecnoSG1)                                            ,;
			                  .T.                                                             ,;
			                  (cAlias)->(G1_COMP)                                             ,;
			                  lOpcDefa                                                        })

			AADD(aOpcionAUX, aClone(aTail(aOpcionais)))
		EndIf

		// Verifica se o grupo ja foi digitado neste nivel
		nAcho := ASCAN(aOpcionais, {|x| x[2] == "1" .And. x[4] == (cAlias)->(GA_GROPC) .And. x[5] == (cAlias)->(RecnoSGA)})
		If nAcho == 0
			// Adiciona item ao array
			AADD(aOpcionais, {.F.                                            ,;
			                  "1"                                            ,;
			                  (cAlias)->(GA_OPC)+" - "+(cAlias)->(GA_DESCOPC),;
			                  (cAlias)->(GA_GROPC)                           ,;
			                  (cAlias)->(RecnoSGA)                           ,;
			                  (cAlias)->(G1_NIV) + (cAlias)->(G1_COMP)       ,;
			                  (cAlias)->(RecnoSG1)                           ,;
			                  .T.                                            ,;
			                  (cAlias)->(G1_COMP)                            ,;
			                  lOpcDefa                                       })

			AADD(aOpcionAUX,aClone(aTail(aOpcionais)))
		Else
			// Verifica se o grupo e produto ja foi digitado neste nivel
			nAcho := ASCAN(aOpcionAUX, {|x| x[2] == "1" .And. x[4] == (cAlias)->(GA_GROPC) .And. x[5] == (cAlias)->(RecnoSGA) .And. x[7] == (cAlias)->(RecnoSG1) })
			
			If nAcho == 0
				// Adiciona item ao array
				AADD(aOpcionAUX, {.F.                                            ,;
				                  "1"                                            ,;
				                  (cAlias)->(GA_OPC)+" - "+(cAlias)->(GA_DESCOPC),;
				                  (cAlias)->(GA_GROPC)                           ,;
				                  (cAlias)->(RecnoSGA)                           ,;
				                  (cAlias)->(G1_NIV) + (cAlias)->(G1_COMP)       ,;
				                  (cAlias)->(RecnoSG1)                           ,;
				                  .T.                                            ,;
				                  (cAlias)->(G1_COMP)                            ,;
				                  lOpcDefa                                       })

				nAcho := ASCAN(aOpcionais, {|x| x[2] == "1" .And. x[4] == (cAlias)->(GA_GROPC) .And. x[5] == (cAlias)->(RecnoSGA)})
				If nAcho > 0
					aOpcionais[nAcho,8] := .T.
				EndIf
			EndIf
		EndIf

		(cAlias)->(dbSkip())
	End
	(cAlias)->(dbCloseArea())

	If Len(aOpcionais) > 0
		IF (ASCAN(aOpcionais, {|x| x[8]})) > 0
			lRet := OpcOk(aOpcionais, aGrupos, cProdPaOpc)
		EndIf
	EndIf

	RestArea(aArea)

	FwFreeArray(aOpcionais)
	FwFreeArray(aOpcionAUX)
	FwFreeArray(aGrupos)
	aSize(aArea, 0)
Return lRet

/*/{Protheus.doc} OpcOk
Valida os grupos dos campos de opcionais
--Função trazida do fonte pcpa107 após a descontinuação da rotina
@type  Static Function
@author Lucas Fagundes
@since 19/07/2022
@version P12
@param aArray    , Array    , Array com os opcionais da estrutura
@param aGrupos   , Array    , Array coms os grupos de opcional da estrutura
@param cProdPaOpc, Character, Produto pai que irá buscar os opcionais
@return lRet, Logico, Indica se os opcionais estão ok
/*/
Static Function OpcOk(aArray, aGrupos, cProdPaOpc)
	Local aArea     := GetArea()
	Local cDefault  := ""
	Local cOpcSB1   := ""
	Local lObrigat  := .T.
	Local lRet      := .T.
	Local nAcho     := 0
	Local nIndex    := 0
	Local nString   := 0
	Local nTamGropc := GetSx3Cache("GA_GROPC", "X3_TAMANHO")
	Local nTamOpc   := GetSx3Cache("GA_OPC", "X3_TAMANHO")
	
	// Valida se todos grupos tiveram um item selecionado ou possuem
	// opcional default cadastrado no SB1                           
	SB1->(dbSetOrder(1))
	SB1->(dbSeek(xFilial("SB1")+cProdPaOpc))
	For nIndex := 1 to Len(aGrupos)
		lObrigat := .T.
		nAcho    := Iif(aScan(aArray, {|x| x[4] == aGrupos[nIndex][1] .And. x[8]}) != 0,; //Condição
		                aScan(aArray, {|x| x[4] == aGrupos[nIndex][1] .And. x[1]})     ,; //Se .T.
		                1                                                               ) //Se .F.

		If nAcho == 0
			lObrigat := Iif(aGrupos[nIndex][2] == "0", .F., .T.)

			If lObrigat .And. !SB1->(EoF())
				cOpcSB1 := SB1->B1_OPC
				
				If !Empty(cOpcSB1)
					// Verifica se o grupo esta na primeira posicao
					If Substr(cOpcSB1, 1, nTamGropc) == aGrupos[nIndex][1]
						nString := 1
					Else
						// Procura grupo nas posicoes seguintes
						nString := AT("/"+aGrupos[nIndex][1], cOpcSB1)
					EndIf

					If nString > 0
						nString  := Iif(nString=1,1,nString+1)
						cDefault := Substr(cOpcSB1, nString, nTamGropc+nTamOpc)
						nAcho    := aScan(aArray, {|x| Substr(x[3],1,nTamGropc) == Substr(cDefault, 1, nTamGropc) })
					EndIf
				EndIf
				// Caso nao achou o grupo no campo de opcionais default
            	If nString <= 0 .Or. nAcho <= 0
					If lObrigat
						lRet := .F.
						Exit
					EndIf
				EndIf
			EndIf
		EndIf
	Next nIndex

	RestArea(aArea)
	aSize(aArea, 0)
Return lRet
