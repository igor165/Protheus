#Include "MATA720.CH"
#include "TOTVS.ch"
                                                   
#DEFINE _ENTER CHR(13)+CHR(10)
Static _lNewMRP := Nil
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Descri‡…o ³ PLANO DE MELHORIA CONTINUA                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ITEM PMC  ³ Responsavel              ³ Data                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³      01  ³                          ³                                 ³±±
±±³      02  ³Erike Yuri da Silva       ³16/12/2005                       ³±±
±±³      03  ³                          ³                                 ³±±
±±³      04  ³                          ³                                 ³±±
±±³      05  ³                          ³                                 ³±±
±±³      06  ³                          ³                                 ³±±
±±³      07  ³Erike Yuri da Silva       ³16/12/2005                       ³±±
±±³      08  ³                          ³                                 ³±±
±±³      09  ³                          ³                                 ³±±
±±³      10  ³                          ³                                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/	

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ MATA720  ³ Autor ³ Ary Medeiros          ³ Data ³ 02/06/93 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Aglutinacao de Ordens de Producao                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Marcelo Pim.³15/01/98³xxxxxx³Controle de Saldos em unidade de medida.  ³±±
±±³Edson  M.   ³16/01/98³xxxxxx³Inclusao do Campo C2_SLDOP.               ³±±
±±³Edson  M.   ³19/01/98³12672A³Inclusao da Pergunta MV_PAR06.            ³±±
±±³Edson  M.   ³02/02/98³XXXXXX³Subst. do Campo C2_SLDOP por Funcao.      ³±±
±±³Rodrigo Sart³13/05/98³14215A³Acerto p/ considerar opcionais na rotina  ³±±
±±³            ³        ³      ³de aglutinacao.                           ³±±
±±³Eduardo     ³25/06/98³16726A³ Acerto numeracao SC1/SC2/SC7             ³±±
±±³Rodrigo Sart³19/08/98³XXXXXX³Correcao no indice condicional            ³±±
±±³Rodrigo Sart³27/08/98³XXXXXX³Inclusao de parametro para manter as OPs  ³±±
±±³            ³        ³      ³intermediarias amarradas as OPs PAIS      ³±±
±±³Rodrigo Sart³05/10/98³XXXXXX³Acerto ref. variavel nao existe SEQPAI    ³±±
±±³Fernando J. ³26/07/99³22064A³Inclus„o de Pergunta MV_PAR08 para atuali-³±±
±±³            ³        ³      ³zar Pedido de Vendas.                     ³±±
±±³Rodrigo Sart³26/08/99³XXXXXX³Criacao PE A720OP                         ³±±
±±³Patricia Sal³03/12/99³25460A³Inclusao da Pergunta mv_par09/mv_par10    ³±±
±±³Iuspa       ³13/12/00³Kelly ³Inclusao da Pergunta mv_par11/mv_par12    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MATA720
Local oDlg 
Local oUsado
Local cSavAlias := Alias()
Local nPeriodo  := 0
Local aStru     := {}
Local aTam      := {}
Local cPerg     := "MTA720"
Local cTexto    := ""
Local bProcess  := {|oSelf|MTA720EXEC(oSelf)}
Local aInfoProc := {}
Local lUsaNewPrc := UsaNewPrc()
Local lIntNewMRP := Iif(_lNewMRP  == Nil, FindFunction("Ma650MrpOn") .AND. Ma650MrpOn(@_lNewMRP),_lNewMRP)
Private cCadastro := OemToAnsi(STR0001)	//"Aglutina OPs"
Private nRegiao   := 1
Private aTipo     := {}
Private aGrupo    := {}
Private aOpcoes[5][6]
Private nNivel    := 1
Private aPeriodos := {}
Private cMarca    := GetMark()             
Private nUsado    := 1
Private cDescPer  := ''	

If ChkBatchOP()
	Help(" ",1,"A720OPSFIL")
Else
	If lUsaNewPrc
		cTexto := STR0028 +_ENTER        //"Esta rotina permite que as ordens de produção e os empenhos de um mesmo produto sejam "
		cTexto += STR0029 +_ENTER        //"aglutinadas, conforme períodos definidos: diário, semanal, quinzenal, mensal, "
		cTexto += STR0030 +_ENTER+_ENTER //"trimestral e semestral."
		cTexto += STR0031 +_ENTER        //"A aglutinação se faz necessária para diminuir o número de ordens de produção, "
		cTexto += STR0032                //"facilitando o controle e o uso."
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ AInfoProc                                              |
		//³ AInfoProc[1] - Titulo                                  |
		//³ AInfoProc[2] - Bloco de Codigo a ser Executado         |
		//³ AInfoProc[3] - Resource (BitMap)                       |
		//³ AInfoProc[4,1] - Array contendo Cabecalho              |
		//³ AInfoProc[4,2] - Array contendo os Itens               |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Aadd(aInfoProc,{STR0025,{|oMainPanel| SelPeriodo(oMainPanel,@oUsado) },"BTCALEND_MDI"}) //"Periodicidade"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Sintaxe da tNewProcess():New( cFunction, cTitle, bProcess, cDescription, cPerg, aInfoCustom ) |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		tNewProcess():New( "MATA720",OemToAnsi(STR0001),bProcess,cTexto,cPerg,aInfoProc )
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica as perguntas selecionadas                           	³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Pergunte(cPerg,.F.)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Variaveis utilizadas para parametros                            ³
		//³ mv_par01        	// Da OP                                    ³
		//³ mv_par02        	// Ate a OP                                 ³
		//³ mv_par03        	// Data de                                  ³
		//³ mv_par04        	// Data ate                                 ³
		//³ mv_par05        	// Considera j  Aglutinadas  1-Sim  2-N„o   ³
		//³ mv_par06        	// Num. Inicial da Op Aglutinada.           ³
		//³ mv_par07        	// Considera Niveis                         ³
		//³ mv_par08        	// Atualiza Pedido de Venda ? 1-Sim 2-N„o   ³
		//³ mv_par09        	// De Almoxarifado                          ³
		//³ mv_par10        	// Ate Almoxarifado                         ³
		//³ mv_par11        	// De Produto                               ³
		//³ mv_par12        	// Ate Produto                              ³
		//³ mv_par13        	// OP Normal em Grade         1-Sim 2-Nao   ³
		//³ mv_par14        	// Dt. Prev. Fim a Cons. ?  1-Menor 2-Maior ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DEFINE MSDIALOG oDlg FROM  119,5 TO 323,605 TITLE cCadastro PIXEL

		@ 15,135 TO 50,280 OF oDlg  PIXEL
		@ 25,140 SAY OemToAnsi(STR0003) SIZE 130, 7 OF oDlg PIXEL	//"Este programa permite que as ordens de produ‡„o de"
		@ 32,140 SAY OemToAnsi(STR0004) SIZE 130, 7 OF oDlg PIXEL	//"um mesmo produto sejam aglutinadas conforme os"
		@ 39,140 SAY OemToAnsi(STR0005) SIZE 130, 7 OF oDlg PIXEL	//"per¡odos definidos ao lado."
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem das opcoes da Periodicidade para Aglutinacao³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SelPeriodo(oDlg,@oUsado)
		
		DEFINE SBUTTON FROM 78, 196 TYPE 5 ACTION PERGUNTE(cPerg ,.T.) ENABLE OF oDlg
		DEFINE SBUTTON FROM 78, 223 TYPE 1 ACTION (MTA720EXEC(),oDlg:End()) ENABLE OF oDlg
		DEFINE SBUTTON FROM 78, 250 TYPE 2 ACTION oDlg:End() ENABLE OF oDlg
		ACTIVATE MSDIALOG oDlg CENTERED
	EndIf
EndIf

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SelPeriodo³ Autor ³ Felipe Nunes de Toledo³ Data ³ 12/07/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta tela para selecao da Periodicidade                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³oDlg   = Objeto Dialog                                      ³±±
±±³          ³oUsado = Objeto Radio                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA720                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function SelPeriodo(oDlg,oUsado)

@ 15, 20 TO 90,120 LABEL OemToAnsi(STR0002) OF oDlg  PIXEL	//"Per¡odos para a Aglutina‡„o"
@ 25,25 RADIO oUsado VAR nUsado 3D SIZE 70,10 PROMPT  OemToAnsi(STR0006),;	//"Per¡odo Di rio"
OemToAnsi(STR0007),;	//"Per¡odo Semanal"
OemToAnsi(STR0008),;	//"Per¡odo Quinzenal"
OemToAnsi(STR0009),;	//"Per¡odo Mensal"
OemToAnsi(STR0010),;	//"Per¡odo Trimestral"
OemToAnsi(STR0011) OF oDlg PIXEL	//"Per¡odo Semestral"

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A720Aglut ³ Autor ³ Ary Medeiros          ³ Data ³ 02/06/93 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Processa a aglutinacao das Ordens de Producao              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA720                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A720Aglut(nTipo)
Local cProduto  := ""
Local cRoteiro  := ""
Local cOpcional := ""
Local dData     := CtoD('  /  /  ')
Local cIndex    := ""
Local cKey      := ""
Local cCond     := ""
Local cTpOP     := ""
Local cTpPr     := ""
Local cRevisao  := ""
Local lAglut    := .T.
Local nOrdem    := 0
Local nRec      := 0
Local nIndex    := 0
Local dDataIni  := CtoD('  /  /  ')
Local dDataFim  := CtoD('  /  /  ')
Local cSeqPai   := ""
Local cCompara  := ""
Local cCampos   := ""
Local nRecSC2   := 0
Local nOrderSC2 := 0
Local nRecTRB   := 0
Local cProdPai  := ""
Local cNumOp    := ""
Local cLocal    := ""
Local cDescric  := ""
Local cFil720   := ""
Local lTppr		:= Iif(SC2->(FieldPos("C2_TPPR")) > 0, .T., .F.)
Local lMA720CPU := ExistBlock("MA720CPU")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Execblock a ser executado antes da Indregua                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF (ExistTemplate('MA720FIL'))
	cFil720:=ExecTemplate('MA720FIL',.F.,.F.,cFil720)
	If ValType(cFil720)#'C'
		cFil720 := ''
	EndIf
Endif

IF (ExistBlock('MA720FIL'))
	cFil720:=ExecBlock('MA720FIL',.F.,.F.,cFil720)
	If ValType(cFil720)#'C'
		cFil720 := ''
	EndIf
Endif

dbSelectArea("SD4")
dbSetOrder(4)

cIndex := CriaTrab(nil,.f.)
dbSelectArea("SC2")

If lTppr
	If mv_par07 == 1
		cKey :="C2_FILIAL+C2_SEQPAI+C2_TPOP+C2_PRODUTO+C2_ROTEIRO+C2_OPC+DTOS(C2_DATPRF)+C2_REVISAO+C2_TPPR"
	Else
		cKey :="C2_FILIAL+C2_TPOP+C2_PRODUTO+C2_ROTEIRO+C2_OPC+DTOS(C2_DATPRF)+C2_REVISAO+C2_TPPR"
	EndIf
Else
	If mv_par07 == 1
		cKey :="C2_FILIAL+C2_SEQPAI+C2_TPOP+C2_PRODUTO+C2_ROTEIRO+C2_OPC+DTOS(C2_DATPRF)+C2_REVISAO"
	Else
		cKey :="C2_FILIAL+C2_TPOP+C2_PRODUTO+C2_ROTEIRO+C2_OPC+DTOS(C2_DATPRF)+C2_REVISAO"
	EndIf
EndIf

cCond:= 'DTOS(C2_DATRF) == "        " .and. C2_FILIAL == "'
cCond+= xFilial("SC2")+ '" .and. C2_QUJE == 0 .and. C2_PERDA == 0 .and. '
cCond+= 'DTOS(C2_DATPRF) >= "'+DtoS(mv_par03)+ '" .and. DTOS(C2_DATPRF) <= "'+DtoS(mv_par04)+'" .and. '
cCond+= 'C2_LOCAL>="'+ mv_par09+'".and.C2_LOCAL<="'+ mv_par10+'" .and. '
cCond+= 'C2_PRODUTO>="'+mv_par11+'".and.C2_PRODUTO<="'+mv_par12+'"'
If !Empty(cFIl720)
    cCond := "(" +cCond+ ").and.(" +cFil720+ ")"
EndIf
IndRegua("SC2",cIndex,cKey,,cCond,STR0012)	//"Selecionando Registros..."
nIndex := RetIndex("SC2")
dbSetOrder(nIndex+1)
dbSeek(xFilial("SC2"))
lSkip := .F.
While !Eof() .And. SC2->C2_FILIAL == xFilial("SC2")              
	cProduto := SC2->C2_PRODUTO
	cRoteiro := SC2->C2_ROTEIRO
	cOpcional:= SC2->C2_OPC
	cTpOp    := SC2->C2_TPOP
	cSeqPai	 := SC2->C2_SEQPAI
	cRevisao := SC2->C2_REVISAO
	dDataIni := CtoD('  /  /  ')
	dDataFim := CtoD('  /  /  ')
	cDescric := ""
	cLocal   := SC2->C2_LOCAL 
	If lTppr
		cTpPr    := SC2->C2_TPPR
		If mv_par07 == 1
			cCampos :="C2_FILIAL+C2_SEQPAI+C2_TPOP+C2_PRODUTO+C2_ROTEIRO+C2_OPC+C2_REVISAO+C2_TPPR"
			cCompara:=xFilial("SC2")+cSeqPai+cTpOp+cProduto+cRoteiro+cOpcional+cRevisao+cTpPr
		Else
			cCampos :="C2_FILIAL+C2_TPOP+C2_PRODUTO+C2_ROTEIRO+C2_OPC+C2_REVISAO+C2_TPPR"
			cCompara:=xFilial("SC2")+cTpOp+cProduto+cRoteiro+cOpcional+cRevisao+cTpPr
		EndIf
	Else
		If mv_par07 == 1
			cCampos :="C2_FILIAL+C2_SEQPAI+C2_TPOP+C2_PRODUTO+C2_ROTEIRO+C2_OPC+C2_REVISAO"
			cCompara:=xFilial("SC2")+cSeqPai+cTpOp+cProduto+cRoteiro+cOpcional+cRevisao
		Else
			cCampos :="C2_FILIAL+C2_TPOP+C2_PRODUTO+C2_ROTEIRO+C2_OPC+C2_REVISAO"
			cCompara:=xFilial("SC2")+cTpOp+cProduto+cRoteiro+cOpcional+cRevisao
		EndIf
	EndIf

	While !Eof() .And. cCompara == &(cCampos)  
		If !Empty(SC2->C2_AGLUT) .And. mv_par05 == 2
			dbSkip()
			Loop
		EndIf           
		lAglut:=.T.
		dbSelectArea("SD3")
		dbSetOrder(1)
		dbSeek(xFilial("SD3")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD) 
		While !Eof() .And. SD3->(D3_FILIAL+D3_OP) == xFilial("SD3")+SC2->(C2_NUM+C2_ITEM+C2_SEQUEN+C2_ITEMGRD)
			If SD3->D3_ESTORNO <> "S"
				lAglut:=.F.
				Exit					
			EndIf	
			dbSkip()
		End   
		If lAglut
			dbSelectArea("SH6")
			dbSetOrder(1)
			If dbSeek(xFilial("SH6")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD) 
				lAglut:=.F.		
			EndIf
		EndIf
		dbSelectArea("SC2")      
		If !lAglut
			dbSkip()
			Loop
		EndIf
		dData    := SC2->C2_DATPRF
		nOrdem   := 1
		dDataIni := CtoD('  /  /  ')
		dDataFim := CtoD('  /  /  ')
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se existe outra OP a ser aglutinada, para nao      ³
		//³ aglutinar OP de 1 para 1                                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nRec := SC2->( RecNo() )
		SC2->( dbSkip() )
		If !(A720Periodo(dData,SC2->C2_DATPRF,nTipo) .And. cCompara == &(cCampos) .And. IIF(mv_par05 == 2,Empty(SC2->C2_AGLUT),(SC2->C2_AGLUT $ "S ")) .And.;
			(SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD >= mv_par01 .And. SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD <= mv_par02))
			Loop
		EndIf
		lAglut:=.T.
		dbSelectArea("SD3")
		dbSetOrder(1)
		dbSeek(xFilial("SD3")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD) 
		While !Eof() .And. D3_FILIAL+D3_OP == xFilial("SD3")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD
			If SD3->D3_ESTORNO <> "S"
				lAglut:=.F.
				Exit					
			EndIf	
			dbSkip()
		End   
		If lAglut
			dbSelectArea("SH6")
			dbSetOrder(1)
			If dbSeek(xFilial("SH6")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD) 
				lAglut:=.F.		
			EndIf
		EndIf
		dbSelectArea("SC2")      
		If !lAglut
			dbSkip()
			Loop
		Else
			dbGoto(nRec)		
		EndIf
		While A720Periodo(dData,SC2->C2_DATPRF,nTipo,@cDescPer) .And. SC2->C2_FILIAL == xFilial("SC2") .And. IIF(mv_par05 == 2,Empty(SC2->C2_AGLUT),(SC2->C2_AGLUT $ "S "))
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se nao existe OP PAI no arquivo TRB, nao gravar OP Filho no  ³
			//³ arquivo TRB, se considerar niveis. (mv_par07 == 1)           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !(SC2->C2_SEQPAI$"   000") .And. mv_par07 == 1
				If !TRB->(dbSeek(SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQPAI+SC2->C2_ITEMGRD))
					dbSkip()
					Loop
				EndIf
			Endif
			lAglut:=.T.
			dbSelectArea("SD3")
			dbSetOrder(1)
			dbSeek(xFilial("SD3")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD) 
			While !Eof() .And. D3_FILIAL+D3_OP == xFilial("SD3")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD
				If SD3->D3_ESTORNO <> "S"
					lAglut:=.F.
					Exit					
				EndIf	
				dbSkip()
			End   
			If lAglut
				dbSelectArea("SH6")
				dbSetOrder(1)
				If dbSeek(xFilial("SH6")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD) 
					lAglut:=.F.		
				EndIf
			EndIf
			dbSelectArea("SC2")      
			If !lAglut
				dbSkip()
				Loop
			EndIf
			cLocal := SC2->C2_LOCAL
			// Menor data prevista de inicio
			If Empty(dDataIni)
				dDataIni := SC2->C2_DATPRI
			ElseIf !Empty(dDataIni) .And. SC2->C2_DATPRI < dDataIni
				dDataIni := SC2->C2_DATPRI
			EndIf
			// Maior data prevista de fim
			If Empty(dDataFim)
				dDataFim := SC2->C2_DATPRF
			ElseIf !Empty(dDataFim) .And. SC2->C2_DATPRF > dDataFim
				dDataFim := SC2->C2_DATPRF
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Filtro das Ops (De ... Ate)                                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If SC2->(C2_NUM+C2_ITEM+C2_SEQUEN+C2_ITEMGRD) >= mv_par01 .And. SC2->(C2_NUM+C2_ITEM+C2_SEQUEN+C2_ITEMGRD) <= mv_par02
				If SB1->(dbSeek(xFilial("SB1")+cProduto))
					cDescric := Left(SB1->B1_DESC,30)
				EndIf				
				dbSelectArea("TRB")
				RecLock("TRB",.T.)
				Replace MARK      With cMarca
				Replace NUMOP     With SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD
				Replace PRODUTO   With SC2->C2_PRODUTO
				Replace DESCRICAO With cDescric
				Replace QUANT     With SC2->C2_QUANT
				Replace INICIO    With dDataIni
				Replace ENTREGA   With dDataFim
				Replace ORDEM     With nOrdem++ //-- Utilizado para gravacao do campo D4_ORDEM, evitando chave duplicada (A Chave Unica no SD4 eh D4_FILIAL+D4_COD+D4_OP+D4_TRT+D4_LOTECTL+D4_NUMLOTE+D4_LOCAL+D4_ORDEM+D4_OPORIG)
				Replace ROTEIRO   With cRoteiro
				Replace GRADE     With SC2->C2_GRADE
				Replace ITEMGRD   With SC2->C2_ITEMGRD
				Replace OPCIONAL  With cOpcional
				Replace TPOP      With cTpOp
				If lTppr
					Replace TPPR      With cTpPr
				EndIf
				Replace SEQPAI    With If(Val(SC2->C2_SEQPAI)==0,"",SC2->C2_SEQPAI)
 				Replace REFGRD	  With SB1->B1_GRADE
 				Replace REVISAO   With SC2->C2_REVISAO
				Replace DESCPER	  With cDescPer
				Replace ARMAZEM   With cLocal
				If mv_par07 == 1
					nRecTRB:=Recno()
					cProdPai:=""
					dbSelectArea("SD4")
					If dbSeek(xFilial("SD4")+SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD)
						dbSelectArea("SC2")
						nRecSC2:=Recno()
						nOrderSC2:=IndexOrd()
						dbSetOrder(1)
						If dbSeek(xFilial("SC2")+SD4->D4_OP)
							cProdPai:=SC2->C2_PRODUTO
						EndIf
						dbSetOrder(nOrderSC2)
						dbGoto(nRecSC2)
						dbSelectArea("TRB")
						dbGoto(nRecTRB)
						If !Empty(cProdPai)
							Replace PRODPAI With cProdPai
						EndIf
					EndIf	
				EndIf
				IF lMA720CPU
					ExecBlock("MA720CPU",.F.,.F.,{2})
				EndIf
				MsUnlock()
			EndIf
			dbSelectArea("SC2")
			dbSkip()
			lSkip := .T.
			If !(cCompara == &(cCampos))
				Exit
			EndIf
		End
		If !lSkip
			dbSkip()
		EndIf
		lSkip := .F.
	End
End

dbSelectArea("SC2")
RetIndex("SC2")
dbClearFilter()
Ferase(cIndex+OrdBagExt())

Return Nil
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A720Periodo³ Autor ³ Ary Medeiros          ³ Data ³ 02/06/93 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica se as OPS estao no periodo p/ aglutinacao          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA720                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A720Periodo(dDatRef,dData,nTipo,cDescPer)
LOCAL lRet 			:= .f., nMes
default cDescPer 	:= ''

Do Case
	Case nTipo == 1 // Diario
		If dDatRef == dData
			lRet := .T.
		EndIf
	
	if lRet
		cDescPer := dtoc(dDatRef)+' '+dtoc(dDatRef)
	endif

	Case nTipo == 2 // Semanal
		While Dow(dDatRef) != 2
			dDatRef--
		End
		If dData < dDatRef + 7
			lRet := .T.
		EndIf
		if lRet
			cDescPer := dtoc(dDatRef)+' '+dtoc(dDatRef + 7)
		endif
	Case nTipo == 3 // Quinzenal
		If Month(dDatRef) == Month(dData)
			If Day(dDatRef) <=15
				If Day(dData) <= 15
					lRet := .T.
				cQuinzena := 'Primeira'	
				EndIf
			Else
				If Day(dData) > 15
					lRet := .T.
				cQuinzena := 'Segunda'
				EndIf
			EndIf
		
		IF lRet
			cDescPer := 'Mes '+alltrim(str(Month(dDatRef))) +' '+ cQuinzena + ' Quinzena' + ' '+ALLTRIM(STR(Year(dData)))
		Endif

		EndIf
		
	Case nTipo == 4 // Mensal
		If Month(dDatRef) == Month(dData)
			lRet := .T.
			cDescPer := 'Mes '+alltrim(str(Month(dDatRef)))
		EndIf
	
	Case nTipo == 5 // Trimestral
		nRef := Month(dDatRef)
		nMes := Month(dData)
		If Year(dData)-Year(dDatRef)==1 		
			If nRef >=11 .And. nMes <= 2
				lRet := .T.
				cDescPer := 'Periodos 11 - 2' +' '+ALLTRIM(STR(Year(dData))) 
			EndIf		
		ElseIf nRef >=1 .and. nRef <= 3
			If nMes >= 1 .and. nMes <= 3
				lRet := .T.
				cDescPer := 'Periodos 1 - 3'+ ' '+ALLTRIM(STR(Year(dData)))
			EndIf
		ElseIf nRef >=4 .and. nRef <= 6
			If nMes >=4 .and. nMes <= 6
				lRet := .T.
				cDescPer := 'Periodos 4 - 6'+ ' '+ALLTRIM(STR(Year(dData)))
			EndIf
		ElseIf nRef >=7 .and. nRef <= 9
			If nMes >=7 .and. nMes <= 9
				lRet := .T.
				cDescPer := 'Periodos 7 - 9'+ ' '+ALLTRIM(STR(Year(dData)))
			EndIf
		ElseIf nRef >=10 .and. nRef <= 12
			If nMes >=10 .and. nMes <= 12
				lRet := .T.
				cDescPer := 'Periodos 10 - 12'+ ' '+ALLTRIM(STR(Year(dData)))
			EndIf
		EndIf
	Case nTipo == 6 // Semestral
		If Year(dData)-Year(dDatRef)==1 		
			If Month(dData)<=6 .And. Month(dDatRef) >=6
				lRet := .t.
				cDescPer := '1 Semestre' + ' '+ALLTRIM(STR(Year(dData)))
			EndIf	
		ElseIf Month(dDatRef) <= 6
			If Month(dData) <= 6
				lRet := .t.
				cDescPer := '1 Semestre' + ' '+ ALLTRIM(STR(Year(dData)))
			EndIf
		Else
			If Month(dData) > 6
				lRet := .t.
				cDescPer := '2 Semestre' +' '+ ALLTRIM(STR(Year(dData)))
			EndIf
		EndIf
EndCase

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A720Browse ³ Autor ³ Ary Medeiros          ³ Data ³ 02/06/93 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Mostra o Browse para marcacao das OPs                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³oTNewProc = Objeto tNewProcess()                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA720                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A720Browse(oTNewProc)
Local oDlg
Local lCont    := .T.
Local lInverte := .F.
Local nOpca    := 0
Local a720CPU  := {}
Private inclui := .T.

dbSelectArea("TRB")
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefinicao do aCampos para utilisar no MarkBrow             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aCampos := { 	{"MARK"     ,"A720Marca",STR0013},;  	//"Ok"
				{"NUMOP"    ,"A720Marca",STR0014},;		//"Ordem de Producao"
				{"PRODUTO"  ,"A720Marca",STR0015},;	    //"Produto"
				{"DESCRICAO","A720Marca",STR0023},;	    //"Descricao do Produto"
				{"QUANT"    ,"A720Marca",STR0016},;		//"Quantidade"
				{"DESCPER"  ,"A720Marca",STR0037}}   	// Descricao do Periodo
				
If SC2->(FieldPos("C2_TPPR")) > 0
	Aadd(aCampos, {"TPPR"     ,"A720Marca",STR0036})	//"Tipo Produção"
EndIf

If ExistBlock("MA720CPU")
	a720CPU := ExecBlock("MA720CPU",.F.,.F.,{3,aCampos})
	If ValType(a720CPU) == "A"
		aCampos := aClone(a720CPU)
	EndIf
EndIf

dbGotop()
If Bof() .and. Eof()
	Help(" ",1,"RECNO")
	lCont := .F.
Else
	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0017) From 9,0 To 28,80 OF oMainWnd	//"Sele‡„o das OPs"
	cAlias:=Alias()
	oMark := MsSelect():New("TRB","MARK",,aCampos,@linverte,cMarca,{35,1,143,315})
	oMark:oBrowse:lCanAllMark:=.T.
	oMark:oBrowse:lHasMark	 :=.T.
	oMark:bMark 			 := {| | A720ESCOL(cMarca,@lInverte,@oDlg)}
	oMark:oBrowse:bAllMark	 := {| | A720MarkAll(cMarca,@oDlg)} 
	oMark:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar(oDlg,{||nopca:=1,If(MTA720OK(),oDlg:End(),)},{||nopca:=0,oDlg:End()})
EndIf
If lCont .And. nOpca == 1
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Aglutina Ops                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	A720GeraAglut(oTNewProc)
	If (oTNewProc<>Nil)
    	A720Make(oTNewProc)
	Else
		Processa({|| A720Make()},cCadastro,OemToAnsi(STR0018),.F.)	//"Aglutinando OPs Selecionadas..."
	EndIf
EndIf

Return Nil
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A720GeraAglut ³ Autor ³ Larson Zordan     ³ Data ³ 10/09/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Gera NumOPs das OPs Selecionadas                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³oTNewProc = Objeto tNewProcess()                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA720                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A720GeraAglut(oTNewProc)
Local cNovaOpPai := ""
Local cNovaSeq   := ""
Local cRefGrd    := ""
Local lNovoItem  := .F.
Local nx         := 0
Local nIG        := 0
Local lNumOpIni  := .F.
Local nOrd       := 0
Local nAglutItem := 1
Local nAglutIGrd := 1
Local cAglutSeq  := "001"
Local cAglutIGrd := StrZero(nAglutIGrd,Len(SC2->C2_ITEMGRD))
Local lComp      := .F.
Local cAglutNum  := mv_par06
Local cQuebrOpc  := ""
Local cRevisao	 := ""
Local cTpPr      := ""
local cIdent	 := '' // identifica descricao do periodo
Local cIdentNum  := '' 
Local lTppr		:= Iif(SC2->(FieldPos("C2_TPPR")) > 0, .T., .F.)
nx  := Val(Left(GETMV("MV_MASCGRD",.F.),2))
nIG := Len(TRB->ITEMGRD)

dbSelectArea("TRB")
dbSetOrder(2)
dbGoTop()

If (oTNewProc<>Nil)
	oTNewProc:SetRegua1(TRB->(LastRec()))
EndIf

While !Eof()
	If (oTNewProc<>Nil) .And. oTNewProc:lEnd
    	Exit
	EndIf
	
	SC2->( dbSetOrder(1) )
	SC2->( MsSeek(xFilial("SC2")+cAglutNum) )
	If Empty(cAglutNum) .Or. SC2->( Found() )
		nAglutItem := 1
		cAglutNum  := GetNumSc2(.T.)
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Caso tenha atingido o item 99, troca a numeracao da OP       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nAglutItem > 99
			If !SC2->( MsSeek(xFilial("SC2")+Soma1(cAglutNum)) )
				cAglutNum := Soma1(cAglutNum)
			Else
				cAglutNum  := GetNumSc2(.T.)
			EndIf
			nAglutItem := 1
		Else
			lNumOpIni := .T.
		EndIf
	EndIf

	nOrd       := 0
	While nOrd < TRB->ORDEM 
	cIdent 	 	:= TRB->DESCPER
	cIdentNum	:= cAglutNum
		If (oTNewProc<>Nil) .And. oTNewProc:lEnd
    		Exit
		EndIf
		
		If (oTNewProc<>Nil)
			oTNewProc:IncRegua1(STR0026) //"Incrementando Arquivo de Trabalho..."
		EndIf
		
		nOrd := TRB->ORDEM
		If Empty(TRB->MARK)
			If (oTNewProc<>Nil)
				oTNewProc:IncRegua1(STR0026) //"Incrementando Arquivo de Trabalho..."
			EndIf
			dbSkip()
			Loop
		EndIf   
        
    	cProd1		:= If(REFGRD=="S",Left(TRB->PRODUTO,nx),TRB->PRODUTO)
	    cProd2		:= TRB->PRODUTO
	    cRevisao	:= TRB->REVISAO
	    cQuebrOpc	:= TRB->OPCIONAL
		If lTppr
	   		cTpPr   := TRB->TPPR
		EndIf

		If TRB->REFGRD # "S" .And. TRB->GRADE # "S"
			cAglutIGrd := ""
			lNovoItem  := .F.
		EndIf	
    
		If mv_par13 == 2
			cAglutIGrd := ""
		EndIf	

		If mv_par07 == 1
			nRecTRB   := Recno()
			cNumOP    := TRB->NUMOP
			cNovaSeq  := ""
			cNovaOpPai:= ""   
			cRefGrd   := ""
			dbSelectArea("SD4")
			dbSetOrder(4)
			If dbSeek(xFilial("SD4")+cNumOP)
				dbSelectArea("SC2")
				nRecSC2  :=Recno()
				nOrderSC2:=IndexOrd()
				dbSetOrder(1)
				If dbSeek(xFilial("SC2")+SD4->D4_OP)
					cNumOP :=SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD
				EndIf
				dbSetOrder(nOrderSC2)
				dbGoto(nRecSC2)
				dbSelectArea("TRB")
				dbSetOrder(1)
				If dbSeek(cNumOP) .And. !Empty(TRB->MARK)
					cNovaOPPai:=TRB->AGLUT
					cRefGrd   :=If(Empty(TRB->GRADE),TRB->REFGRD,TRB->GRADE)
				EndIf        
				dbSetOrder(2)
    			dbGoto(nRecTRB)
				If !Empty(cNovaOpPai)
					cNovaSeq := SubStr(TRB->NUMOP,9,3)
					cAglutIGrd := ""
					If (mv_par13 == 1 .And. !Empty(SubStr(cNovaOpPai,12,nIG))) .Or. (mv_par13 == 3 .And. cRefGrd == "S")
						cAglutIGrd := SubStr(cNovaOpPai,12,nIG)
					EndIf
					RecLock("TRB",.F.)
					Replace TRB->AGLUT   With Substr(cNovaOpPai,1,8)+cNovaSeq+cAglutIGrd
					Replace TRB->ITEMGRD With cAglutIGrd
					Replace TRB->GRADE   With If(Empty(TRB->ITEMGRD),"","S")
				Else
					dbSelectArea("TRB")
					RecLock("TRB",.F.)
					Replace TRB->AGLUT   With cAglutNum+StrZero(nAglutItem,2)+cAglutSeq+cAglutIGrd
					Replace TRB->ITEMGRD With If(Empty(TRB->REFGRD),"",cAglutIGrd)
					Replace TRB->GRADE   With If(Empty(TRB->ITEMGRD),"","S")
				EndIf
			Else
				dbSelectArea("TRB")
				RecLock("TRB",.F.)
				Replace TRB->AGLUT   With cAglutNum+StrZero(nAglutItem,2)+cAglutSeq+cAglutIGrd
				Replace TRB->ITEMGRD With If(Empty(TRB->REFGRD),"",cAglutIGrd)
				Replace TRB->GRADE   With If(Empty(TRB->ITEMGRD),"","S")
			EndIf
		Else			
			RecLock("TRB",.F.)
			Replace TRB->AGLUT   With cAglutNum+StrZero(nAglutItem,2)+cAglutSeq+cAglutIGrd
			Replace TRB->ITEMGRD With cAglutIGrd
			Replace TRB->GRADE   With If(Empty(TRB->ITEMGRD),"","S")
		EndIf
		TRB->(MsUnlock())
		TRB->(dbSkip())
	
		If lTppr
			If mv_par13 == 2
				lComp := (cProd2+cTpPr+cRevisao # TRB->PRODUTO+TRB->TPPR+TRB->REVISAO) .Or. (cQuebrOpc # TRB->OPCIONAL)
			Else
				lComp := (cProd1+cTpPr+cRevisao # If(TRB->REFGRD=="S",Left(TRB->PRODUTO,nx),TRB->PRODUTO)+TRB->TPPR+TRB->REVISAO) .Or. (cQuebrOpc # TRB->OPCIONAL)

			Endif	     
		Else
			If mv_par13 == 2
				lComp := (cProd2+cRevisao # TRB->PRODUTO+TRB->REVISAO) .Or. (cQuebrOpc # TRB->OPCIONAL)
			Else
				lComp := (cProd1+cRevisao # If(TRB->REFGRD=="S",Left(TRB->PRODUTO,nx),TRB->PRODUTO)+TRB->REVISAO) .Or. (cQuebrOpc # TRB->OPCIONAL)
			Endif	
		EndIf
	     
		If lComp
			nAglutItem++
			If nAglutItem > 99
				If lNumOpIni
					cAglutNum := Soma1(cAglutNum)
				Else
					cAglutNum := GetNumSc2(.T.)
				Endif	
				nAglutItem := 1
				cAglutSeq  := "001"
			Endif           
		ElseIf cProd2+cRevisao # TRB->PRODUTO+TRB->REVISAO .And. TRB->REFGRD == "S"
			lNovoItem  := .T.
		EndIf

		If lNovoItem
			nAglutIGrd++
			If nAglutIGrd > 99 
				cAglutNum  := GetNumSc2(.T.)
				nAglutIGrd := 1
			Endif
			cAglutIGrd := StrZero(nAglutIGrd,nIG)
			lNovoItem  := .F.
		EndIf

		/*VALIDA SE PERIODO FOI ALTERADO, E SE O NUMERO DA OP GERADO É O MESMO*/
		IF !(cIdent == TRB->DESCPER ) .and. cIdentNum == cAglutNum
		
			If !SC2->( MsSeek(xFilial("SC2")+Soma1(cAglutNum)) )
				cAglutNum := Soma1(cAglutNum)
			Else
				cAglutNum  := GetNumSc2(.T.)
			EndIf
			nAglutItem := 1
			cAglutSeq  := "001"
		EndIf

	End
End
dbSetOrder(1)
Return Nil
//----------------------------------------------------------
/*Função adiciona OP a array se for válida*/
//----------------------------------------------------------
Static Function fOPsAglut(aOPsAglut,cOP)
	Local nI
	Local lEncontrou := .F.
	If !Empty(cOP)
		//Verifica se a OP já foi adicionada ao array
		For nI := 1 To Len(aOPsAglut)
			If cOP == aOPsAglut[nI]
				lEncontrou := .T.
			EndIf
		Next
		//Se não foi encontrada, adiciona no array
		If !lEncontrou
			aAdd(aOPsAglut,cOP)
		EndIf
	EndIf
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ A720Make  ³ Autor ³ Ary Medeiros          ³ Data ³ 02/06/93 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Grava as OPs aglutinadas, acerta os empenhos e remove as OPs³±±
±±³          ³ antigas do SC2.                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³oTNewProc = Objeto tNewProcess()                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA720                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A720Make(oTNewProc)
Local aAliasTRB := {}
Local dDtValid 	:= dDataBase
Local cOpOrig   := ""
Local cProduto	:= ""
Local cLocal	:= ""
Local cOpSkip   := "" // ordens de produção que não vão ser processadas.
Local cTRT		:= ""
Local cLote		:= ""
Local cLoteCtl	:= ""
Local cFiltroC6 := ""
Local cIndC6    := ""
Local cNomArqC6 := ""
Local cSeekC6   := ""
Local cSeekSD3  := ""
Local cSeekDC   := ""
Local cRoteiro	:= ""
Local cFilSD3   := xFilial('SD3')
Local lMTA720A  := ExistBlock("MTA720A")
Local lTA720OP	:= ExistTemplate("A720OP")
Local lA720OP	:= ExistBlock("A720OP")
Local lIntSFC	:= IntegraSFC()
Local aRecnoC6  := {}
Local aAreaSC2	:= {}
Local aArraySDC	:= {}
Local aOPsAglut	:= {} //OPs que foram geradas por aglutinação
Local nQuantD4	:= 0
Local nRecno	:= 0
Local nIndC6    := 0
Local nX,nI     := 0
Local nForSDC   := 0
Local nQtdAcu   := 0
Local nTamOP    := Len(SC2->C2_NUM)
Local nTamIt    := Len(SC2->C2_ITEM)
Local bWhileDC  := Nil
Local lAtuSGJ    := SuperGetMV("MV_PVCOMOP",.F.,.F.) .And. FindFunction("ALIASINDIC") .And. AliasIndic("SGJ")
Local cAliasSGJ  := ""
Local cSelSGJ    := ""
Local nTamItem   := 0
Local nTamSeq    := 0
Local nTamGrd    := 0

Local cRotAglut  := ""
Local cOperAglut := ""
Local cProdAglut := ""

Local cFilial   := ""
Local cNumOp    := ""
Local cProd     := ""
Local lTppr		:= Iif(SC2->(FieldPos("C2_TPPR")) > 0, .T., .F.)

Local lIntNewMRP := Iif(_lNewMRP  == Nil, FindFunction("Ma650MrpOn") .AND. Ma650MrpOn(@_lNewMRP),_lNewMRP)
Local aMRPxJson  := Iif(lIntNewMRP, {{}, JsonObject():New()}, Nil) //{aDados para commit, JsonObject() com RECNOS} - Integracao Novo MRP - APONTAMENTOS
Local cLocProc   := GetMvNNR('MV_LOCPROC','99')
Local lOPIPROC   := SuperGetMv("MV_OPIPROC",.F.,.T.)

Local cIdDCF     := "" 
Local cIdSDD     := ""
Local cItem      := ""
Local cLocaliz   := ""
Local cNumSeri   := ""
Local cPedido    := ""
Local nQtdOrigDC := 0
Local nQuantDC   := 0
Local nRecSDC    := 0
                         
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Checa se o carga maquina nao esta sendo executado³
//³se nao estiver efetua lock para permitir delecao.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

if MV_PAR08 = 1 .and. lAtuSGJ
     
   //SC2->C2_NUM+SC2->C2_ITEM+SC2->C2_SEQUEN+SC2->C2_ITEMGRD
   nTamOP   := TamSX3("C2_NUM"   )[1]
   nTamItem := TamSX3("C2_ITEM"  )[1]
   nTamSeq  := TamSX3("C2_SEQUEN")[1]
   nTamGrd  := TamSX3("C2_ITEMGRD")[1]    
              
   cAliasSGJ := "TabSGJ"    
     
endif

//-----------------------------------------------------------
//Valida as Op's apontadas durante a seleção da aglutinação
//-----------------------------------------------------------
dbSetOrder(1)                                                          
dbSelectArea("TRB")
dbSelectArea("SH6")
dbSelectArea("SC2")

TRB->(dbGoTop())

aAliasTRB := TRB->(GetArea())

While TRB->(!Eof())
	
	SC2->(dbSetOrder(1))
	SC2->(dbSeek(xFilial("SC2")+TRB->NUMOP))
	If (SC2->C2_QUJE <> 0)	
		cOpSkip += TRB->NUMOP+','
		RecLock("TRB", .F.)
		TRB->(DbDelete())
		TRB->(MsUnlock())
		TRB->(DbSkip())
		Loop
	EndIf
	
	SH6->(dbSetOrder(1))
	If SH6->(dbSeek(xFilial("SH6")+Alltrim(TRB->NUMOP)))
		cOpSkip += TRB->NUMOP+','
		RecLock("TRB", .F.)
		TRB->(DbDelete())
		TRB->(MsUnlock())
		TRB->(DbSkip())
		Loop	
	EndIf		

	TRB->(DbSkip())
Enddo

RestArea(aAliasTRB)

If !empty(cOpSkip)
	Help(NIL, NIL, STR0038, NIL, STR0039+cOpSkip+STR0040, 1, 0, NIL, NIL, NIL, NIL, NIL,{STR0041})	
		//"Ordens de Produção não aglutinadas." # "As ordens de produção: "+cOpSkip+" possuem apontamentos de produção e a aglutinação não será possivel."
		//"Refaça o processo de aglutinação."
	Return Nil		
Endif

If OpenSemSH8() 
	//-- Indexa SC6 por Filial + NumOP + ItemOP
	If MV_PAR08 == 1
		dbSelectArea('SC6')
		dbSetOrder(1)
	
		cFiltroC6 := 'C6_FILIAL=="'+xFilial("SC6")+'".And.'
		cFiltroC6 += 'C6_NUMOP>="'+Subs(mv_par01,1,nTamOP)+'".And.'
		cFiltroC6 += 'C6_NUMOP<="'+Subs(mv_par02,1,nTamOP)+'"'
	
		cIndC6    := 'C6_FILIAL + C6_NUMOP + C6_ITEMOP + C6_PRODUTO'
		cNomArqC6 := CriaTrab('',.F.)
	
		IndRegua('SC6',cNomArqC6,cIndC6,,cFiltroC6,STR0012)//'Selecionando Registros...'
		nIndC6 := RetIndex('SC6')
		dbSetOrder(nIndC6 + 1)
	EndIf

    If (oTNewProc<>Nil)
    	oTNewProc:SetRegua2(TRB->(LastRec()))
    Else
		ProcRegua(LastRec(),15,6)
	EndIf

	TRB->(dbGoTop())
	
	While TRB->(!Eof())
		If (oTNewProc<>Nil) .And. oTNewProc:lEnd
    		Exit
	    EndIf

		cAglut  := TRB->AGLUT
		lGera   := .f.
		Begin Transaction
		While TRB->(!Eof()) .And. TRB->AGLUT == cAGLUT
			//------------------------------
			//Validações antes de aglutinar
			//------------------------------
			If (oTNewProc<>Nil) .And. oTNewProc:lEnd
    			Exit
		    EndIf

			If (oTNewProc<>Nil)
				oTNewProc:IncRegua2(STR0027) //"Gravando as Ordens de Produções..."
			Else
				IncProc()
			EndIf
			
			If !Empty(TRB->GERADO) .Or. Empty(TRB->MARK)
				dbSkip()
				cAglut  := TRB->AGLUT
				Loop
			EndIf
			
			//Integracao com Chao de Fabrica, só aglutina se conseguir excluir no SFC
			SC2->(dbSetOrder(1))
			SC2->(dbSeek(xFilial("SC2")+TRB->NUMOP))
			If lIntSFC .And. !A650IntSFC(5)
				dbSkip()
				Loop
			EndIf
			//------------------------------
			//Fim Validações
			//------------------------------
			
			fOPsAglut(@aOPsAglut,TRB->AGLUT)
			
			lGera   := .t.
			nQuant  := TRB->QUANT
			RecLock("TRB")
			Replace GERADO with "û"
			MsUnlock() // Nao precisa ter controle no TTS para arq de trabalho
			
			DbSelectArea("SB1")
			DbSeek(xFilial("SB1")+TRB->PRODUTO)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Esta funcao cria Ordem de Producao ou soma quantidade no SC2 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea("SC2")
			If dbSeek(xFilial("SC2")+cAglut)
				RecLock("SC2",.F.)
			Else
				If lOPIPROC
					cLocalOP := If(SB1->B1_APROPRI=="I",cLocProc,RetFldProd(SB1->B1_COD,"B1_LOCPAD"))
				Else
					cLocalOP := RetFldProd(SB1->B1_COD,"B1_LOCPAD")
				EndIf
				
				RecLock("SC2",.T.)
				Replace;
				C2_PRODUTO	With TRB->PRODUTO,;
				C2_FILIAL	With xFilial("SC2"),;
				C2_NUM		With Substr(cAglut,1,6),;
				C2_ITEM	    With Substr(cAglut,7,2),;
				C2_EMISSAO	With dDataBase,;
				C2_LOCAL	With cLocalOP,;				
				C2_CC		With SB1->B1_CC,;
				C2_UM		With SB1->B1_UM,;
				C2_OPC		With TRB->OPCIONAL,;
				C2_DATPRF	With TRB->ENTREGA,;
				C2_DESTINA	With "E",;
				C2_PRIOR	With "500",;
				C2_SEQUEN	With Substr(cAglut,9,3),;
				C2_GRADE	With If(!Empty(TRB->ITEMGRD),"S"," "),;
				C2_DATPRI	With TRB->INICIO,;
				C2_ITEMGRD	With TRB->ITEMGRD,;
				C2_AGLUT	With "S",;
				C2_SEGUM	With SB1->B1_SEGUM,;
				C2_ROTEIRO	With TRB->ROTEIRO,;
				C2_TPOP     With TRB->TPOP,; 
				C2_REVISAO	With TRB->REVISAO
				If lTppr
					Replace C2_TPPR With TRB->TPPR
				EndIf
			EndIf

			Replace	C2_QUANT   	With C2_QUANT+nQuant
			Replace	C2_QTSEGUM  With C2_QTSEGUM+ConvUm(TRB->PRODUTO,nQuant,0,2)
			If mv_par14 == 1
				Replace C2_DATPRF   With If(C2_DATPRF < TRB->ENTREGA, C2_DATPRF, TRB->ENTREGA)
			Else
				Replace C2_DATPRF   With If(C2_DATPRF > TRB->ENTREGA, C2_DATPRF, TRB->ENTREGA)
			EndIf
			If mv_par07 == 1
				Replace C2_SEQPAI With TRB->SEQPAI
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Atualizacao dos campos utilizados pelo processo de geracao ³
			//³em BATCH.                                                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			Replace C2_BATCH   With "S"
			Replace C2_BATUSR  With RetCodUsr()
			Replace C2_BATROT  With FunName()
								
			// Forca gravacao para a integridade
			SC2->(FKCommit())
			
			SC2->(RecNo())

			//Integração de ordem de produção com o novo MRP.
			//Operação de INCLUSÃO/ALTERAÇÃO.
			//Integração de OPs filhas com o novo MRP. Carrega os dados para enviar
			If lIntNewMRP
				A650AddJIn(@aMRPxJson) //Inclui dados no array para integração com o novo MRP
			EndIf

			// Ponto de Entrada
			If lMTA720A
				ExecBlock("MTA720A",.f.,.f.)
			EndIf
			//Atualiza SB2 quando os armazens forem divergentes 
			AtuB2720(cLocalOP)
			
			dbSelectArea("SC1")
			dbSetOrder(4)
			dbSeek(xFilial("SC1")+TRB->NUMOP)
			If Found()
				While !Eof() .And. xFilial("SC1")+TRB->NUMOP == C1_FILIAL+C1_OP
					dbSkip()
					If xFilial("SC1")+TRB->NUMOP == C1_FILIAL+C1_OP
						nRecno:=Recno()
						dbSkip(-1)
						RecLock("SC1",.F.)
						Replace C1_OP With TRB->AGLUT
						MsUnlock()
						dbGoto(nRecno)
					Else
						dbSkip(-1)
						RecLock("SC1",.F.)
						Replace C1_OP With TRB->AGLUT
						MsUnlock()
					EndIf
				End
			EndIf
			dbSetOrder(1)
			
			//-- Atualiza o Numero das OP's nos Pedidos de Vendas (SC6)
			If MV_PAR08 == 1
				aRecnoC6 := {}
				dbSelectArea('SC6')
				If dbSeek(cSeekC6 := xFilial("SC6") + Left(TRB->NUMOP, Len(SC6->C6_NUMOP + SC6->C6_ITEMOP)) + TRB->PRODUTO, .F.)
					Do While !Eof() .And. C6_FILIAL + C6_NUMOP + C6_ITEMOP + C6_PRODUTO == cSeekC6
						If C6_NUMOP+C6_ITEMOP >= Subs(mv_par01,1,nTamOP+nTamIt);
						.And. C6_NUMOP+C6_ITEMOP <= Subs(mv_par02,1,nTamOP+nTamIt)
							aAdd(aRecnoC6, Recno())
							dbSkip()
						EndIf
					EndDo
				EndIf
				For nX := 1 to Len(aRecnoC6)
					dbSelectArea('SC6')
					dbGoto(aRecnoC6[nX])
					Begin Transaction
					RecLock('SC6', .F.)
					Replace C6_NUMOP  With Left(TRB->AGLUT, Len(C6_NUMOP))
					Replace C6_ITEMOP With SubStr(TRB->AGLUT, Len(C6_NUMOP) + 1, Len(C6_ITEMOP))
					MsUnlock()
					
					
					if lAtuSGJ	   
                     cSelSGJ := "SELECT GJ_FILIAL, GJ_NUMPV, GJ_ITEMPV, GJ_ITGRDPV, GJ_PRODUTO, GJ_LOCAL, GJ_NUMOP, GJ_ITEMOP, " + ;
                                "       GJ_SEQUEN, GJ_ITGRDOP, GJ_QUANT, GJ_QEMPN, GJ_QEMPN2, SGJ.R_E_C_N_O_ SGJRECNO " + ;
                                "  FROM "+RetSqlName("SGJ")+ " SGJ " + ;               
                                " WHERE SGJ.GJ_FILIAL  = '" + xFilial("SGJ") + "' " + ;   											   
						        "   AND SGJ.GJ_NUMPV   = '" + SC6->C6_NUM  + "' " + ;   
    						    "   AND SGJ.GJ_ITEMPV =  '" + SC6->C6_ITEM + "' " + ;
   	 							"   AND SGJ.GJ_PRODUTO = '" + SC6->C6_PRODUTO + "' " + ;								   	   	 							      	 							    							   
							    "   AND SGJ.GJ_NUMOP   = '" + SUBSTR( TRB->NUMOP, 1, nTamOP ) + "' " + ;
								"   AND SGJ.GJ_ITEMOP  = '" + SUBSTR( TRB->NUMOP, nTamOp + 1, nTamItem ) + "' " + ;   							      								        
								"   AND SGJ.GJ_SEQUEN  = '" + SUBSTR( TRB->NUMOP, nTamOP + nTamItem + 1, nTamSeq ) +  "' "
								      
  								if( alltrim( SUBSTR( TRB->NUMOP, nTamOP + nTamItem + nTamSeq + 1, nTamGrd ) ) <> "" )  							         
									cSelSGJ := cSelSGJ + " AND GJ_ITGRDOP = '" + SUBSTR( TRB->NUMOP, nTamOP + nTamItem + nTamSeq + 1, nTamGrd ) + "' "
								endif   

	                  cQuery := ChangeQuery(cSelSGJ)	
	                  dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSGJ,.T.,.T.)
	              
   	                  while( !eof() )
	                     dbSelectArea('SGJ')
	                     RecLock("SGJ",.T.)                 	                    
                         Replace GJ_FILIAL  WITH (cAliasSGJ)->GJ_FILIAL
                         Replace GJ_NUMPV   WITH (cAliasSGJ)->GJ_NUMPV   
                         Replace GJ_ITEMPV  WITH (cAliasSGJ)->GJ_ITEMPV
                         Replace GJ_ITGRDPV WITH (cAliasSGJ)->GJ_ITGRDPV
                         Replace GJ_PRODUTO WITH (cAliasSGJ)->GJ_PRODUTO
                         Replace GJ_LOCAL   WITH (cAliasSGJ)->GJ_LOCAL                       
                         Replace GJ_NUMOP   WITH SC6->C6_NUMOP                       
                         Replace GJ_ITEMOP  WITH SC6->C6_ITEMOP
                         Replace GJ_SEQUEN  WITH (cAliasSGJ)->GJ_SEQUEN
                         Replace GJ_ITGRDOP WITH (cAliasSGJ)->GJ_ITGRDOP
                         Replace GJ_QUANT   WITH (cAliasSGJ)->GJ_QUANT
                         Replace GJ_QEMPN   WITH (cAliasSGJ)->GJ_QEMPN
                         Replace GJ_QEMPN2  WITH (cAliasSGJ)->GJ_QEMPN2                              	                                           
                         MsUnlock()	
                        
					       dbSelectArea('SGJ')
					       dbGoto( (cAliasSGJ)->SGJRECNO )
					       RecLock("SGJ",.F.)
					       dbDelete( )
					       MsUnLock()
					      
					       dbSelectArea(cAliasSGJ)
					       dbSkip( )                        
	                  enddo
	                 
	                  dbSelectArea(cAliasSGJ)
	                  dbCloseArea()
	               Endif						
					End Transaction
				Next nX
			EndIf
			
			dbSelectArea('SD3')
			dbSetOrder(1)
			If dbSeek(cSeekSD3 := cFilSD3 + TRB->NUMOP)
				Do While !Eof() .And. cSeekSD3 == D3_FILIAL + D3_OP
					If Empty(D3_ESTORNO)
						RecLock('SD3', .F.)
						Replace D3_OP With TRB->AGLUT
						MsUnlock()
					EndIf
					dbSkip()
				EndDo
			EndIf
			
			dbSelectArea("SD4")
			dbSetOrder(4)
			dbSeek(xFilial("SD4")+TRB->NUMOP)
			Do While !Eof() .And. xFilial("SD4")+TRB->NUMOP == D4_FILIAL+D4_OPORIG
				Reclock("SD4",.F.)
				Replace D4_OPORIG With TRB->AGLUT
				Replace D4_ORDEM  With StrZero(TRB->ORDEM, Len(D4_ORDEM)) //-- Evita chave duplicada (A Chave Unica no SD4 eh D4_FILIAL+D4_COD+D4_OP+D4_TRT+D4_LOTECTL+D4_NUMLOTE+D4_LOCAL+D4_ORDEM+D4_OPORIG)
				MsUnlock()
				dbSkip()
			EndDo
			
			dbSelectArea("SD4")
			dbSetOrder(2)
			dbSeek(xFilial("SD4")+TRB->NUMOP)
			While !Eof() .And. SD4->D4_FILIAL+SD4->D4_OP == xFilial("SD4")+TRB->NUMOP
				nRecSD4  := RecNo()
				nQuantD4 := SD4->D4_QUANT
				cProduto := SD4->D4_COD
				cLOCAL   := SD4->D4_LOCAL
				cTRT     := SD4->D4_TRT
				cLote 	 := SD4->D4_NUMLOTE
				cLoteCtl := SD4->D4_LOTECTL
				dDtValid := SD4->D4_DTVALID
				cOpOrig  :=	SD4->D4_OPORIG
				cRotAglut  := SD4->D4_ROTEIRO
				cOperAglut := SD4->D4_OPERAC
				cProdAglut := SD4->D4_PRODUTO
				dbSetOrder(1)
				dbSeek(xFilial("SD4")+cProduto+TRB->AGLUT+cTRT+cLoteCtl+cLote)
				If Found()
					RecLock("SD4",.F.)
					Replace D4_QUANT    With D4_QUANT + nQuantD4
					Replace D4_QTDEORI  With D4_QUANT
					Replace D4_QTSEGUM  With ConvUm(cProduto,D4_QUANT,0,2)
				Else
					RecLock("SD4",.T.)
					Replace	D4_FILIAL 	With xFilial("SD4")	,D4_DATA    With TRB->ENTREGA,;
					        D4_COD    	With cProduto  	    ,D4_LOCAL   With cLOCAL,;
					        D4_QUANT  	With nQuantD4  	    ,D4_QTDEORI With nQuantD4,;
					        D4_OP     	With TRB->AGLUT	    ,D4_TRT     With cTRT,;
					        D4_NUMLOTE	With cLote		    ,D4_LOTECTL With cLoteCtl,;
					        D4_DTVALID	With dDtValid  	    ,D4_QTSEGUM With ConvUm(cProduto,nQuantD4,0,2),;
					        D4_OPORIG	With cOpOrig        ,D4_ROTEIRO With cRotAglut,;
					        D4_OPERAC   With cOperAglut     ,D4_PRODUTO With cProdAglut
				EndIf
				MsUnlock() // para nao dar excesso de locks na estacao
				dbSetOrder(2)
				dbGoto(nRecSD4)
	
				dbSelectArea("SDC")
				dbSetOrder(2)
				// Procura por empenho sem lotes
				If !(Rastro(SD4->D4_COD)) .Or. (Rastro(SD4->D4_COD) .And. Empty(SD4->D4_LOTECTL))
					cSeekDC  := xFilial("SDC")+SD4->D4_COD+SD4->D4_LOCAL+SD4->D4_OP+SD4->D4_TRT
					bWhileDC := {|| DC_FILIAL+DC_PRODUTO+DC_LOCAL+DC_OP+DC_TRT}
				Else
					If Rastro(SD4->D4_COD,"L")
						// Procura por empenho com lote
						cSeekDC   := xFilial("SDC")+SD4->D4_COD+SD4->D4_LOCAL+SD4->D4_OP+SD4->D4_TRT+SD4->D4_LOTECTL
						bWhileDC  := {|| DC_FILIAL+DC_PRODUTO+DC_LOCAL+DC_OP+DC_TRT+DC_LOTECTL}
					Else
						// Procura por empenho com lote+sub-lote
						cSeekDC  := xFilial("SDC")+SD4->D4_COD+SD4->D4_LOCAL+SD4->D4_OP+SD4->D4_TRT+SD4->D4_LOTECTL+SD4->D4_NUMLOTE
						bWhileDC := {|| DC_FILIAL+DC_PRODUTO+DC_LOCAL+DC_OP+DC_TRT+DC_LOTECTL+DC_NUMLOTE}
					EndIf
				EndIf
	
				dbSeek(cSeekDC)
				aArraySDC := {}
				Do While ! Eof() .And. cSeekDC == Eval(bWhileDC)
					Aadd(aArraySDC, SDC->(RecNo()))
					dbSkip()
				Enddo
	
				For nForSDC := 1 to Len(aArraySDC)
					SDC->(dbGoto(aArraySDC[nForSDC]))
					nRecSDC    := SDC->(RecNo())
					nQuantDC   := SDC->DC_QUANT
					cProduto   := SDC->DC_PRODUTO
					cLOCAL     := SDC->DC_LOCAL
					cTRT       := SDC->DC_TRT
					cLote 	   := SDC->DC_NUMLOTE
					cLoteCtl   := SDC->DC_LOTECTL
					cLocaliz   := SDC->DC_LOCALIZ
					cNumSeri   := SDC->DC_NUMSERI
					cOpOrig    := SDC->DC_ORIGEM
					nQtdOrigDC := SDC->DC_QTDORIG
					cPedido    := SDC->DC_PEDIDO
					cItem      := SDC->DC_ITEM
					cIdDCF     := SDC->DC_IDDCF
					cIdSDD     := SDC->DC_IDSDD
					
					If Rastro(cProduto,"L") // Procura por empenho com lote
						cSeekDC := xFilial("SDC")+cProduto+cLOCAL+TRB->AGLUT+cTRT+cLoteCtl
					Else // Procura por empenho com lote+sub-lote
						cSeekDC := xFilial("SDC")+cProduto+cLOCAL+TRB->AGLUT+cTRT+cLoteCtl+cLote
					EndIf

					SDC->(dbSetOrder(2))
					If SDC->(dbSeek(cSeekDC))
						RecLock("SDC",.F.)
						Replace DC_QUANT    With DC_QUANT + nQuantDC
						Replace DC_QTDORIG  With DC_QUANT
						Replace DC_QTSEGUM  With ConvUm(cProduto,DC_QUANT,0,2)
					Else
						RecLock("SDC",.T.)
						Replace DC_FILIAL   With xFilial("SDC")
						Replace DC_ORIGEM   With cOpOrig
						Replace DC_PRODUTO  With cProduto
						Replace DC_LOCAL    With cLocal
						Replace DC_LOTECTL  With cLoteCtl
						If Rastro(cProduto,"S")
							Replace DC_NUMLOTE   With cLote
						EndIf
						Replace DC_LOCALIZ  With cLocaliz
						Replace DC_NUMSERI  With cNumSeri
						Replace DC_QTDORIG  With nQtdOrigDC
						Replace DC_QUANT    With nQuantDC
						Replace DC_QTSEGUM  With ConvUm(cProduto,nQuantDC,0,2)
						Replace DC_OP       With TRB->AGLUT
						Replace DC_TRT      With cTRT
						Replace DC_IDSDD    With cIdSDD
						Replace DC_PEDIDO   With cPedido
						Replace DC_ITEM     With cItem
						Replace DC_SEQ      With cTRT
						Replace DC_IDDCF    With cIdDCF
					EndIf
					SDC->(MsUnlock()) // para nao dar excesso de locks na estacao

					SDC->(dbSetOrder(1))
					SDC->(dbGoto(aArraySDC[nForSDC]))
					SDC->(RecLock("SDC",.f.,.t.))
					SDC->(dbDelete())
					SDC->(MsUnlock()) // para nao dar excesso de locks na estacao
				Next	
	
				RecLock("SD4",.f.,.t.)
				dbDelete()
				MsUnlock() // para nao dar excesso de locks na estacao
				dbSkip()
			End
			
			dbSelectArea("SH8")
			dbSetOrder(1)
			If dbSeek(xFilial("SH8")+TRB->NUMOP)
				RecLock("SH8",.F.,.T.)
				dbDelete()
				MsUnlock() 
			EndIf
			
			dbSelectArea("SHD")
			dbSetOrder(1)
			If dbSeek(xFilial("SHD")+TRB->NUMOP)
				RecLock("SHD",.F.,.T.)
				dbDelete()
				MsUnlock() 
			EndIf		
			
			dbSelectArea("SC2")
			aAreaSC2 := SC2->(GetArea())
			SC2->(dbSetOrder(1))
			If dbSeek(xFilial("SC2")+TRB->NUMOP)
				//Integração de ordem de produção com o novo MRP.
				//Operação de INCLUSÃO/ALTERAÇÃO.
				//Integração de OPs filhas com o novo MRP. Carrega os dados para enviar
				If lIntNewMRP
					A650AddJIn(@aMRPxJson, "DELETE") //Inclui dados no array para integração com o novo MRP
				EndIf

			    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Integração Quality - QIPxPCP                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If IntQIP()
					QIPAtualiza("SC2",2)
				Endif
			
				// Pontos de Entrada
				If lTA720OP
					ExecTemplate("A720OP",.F.,.F.)
				EndIf
	
				If lA720OP
					ExecBlock("A720OP",.F.,.F.)
				EndIf
				RecLock("SC2",.F.,.T.)   
				dbDelete()
			EndIf
			RestArea(aAreaSC2)
			dbSelectArea("TRB")
			dbSkip()
		End

		//Gera integracao com Inspecao de Processos (QIP), caso exista
		//Obs: funcao OPGeraQIP esta contida no PCPXFUN.
		aAreaSC2 := SC2->(GetArea())
		dbSelectArea("SC2")
		dbSetOrder(9) //C2_FILIAL+C2_NUM+C2_ITEM+C2_PRODUTO
    	If dbSeek(xFilial("SC2")+Substr(cAglut,1,6)+Substr(cAglut,7,2))
    		RecLock("SC2",.F.)
			OPGeraQIP()
			MsUnLock()
		Endif
		RestArea(aAreaSC2)

		End Transaction
		dbSelectArea("TRB")
	End

	//Integração com MRP
	If lIntNewMRP
		enviaOpMrp("INSERT", @aMRPxJson)
	EndIf
	
	aAreaSC2 := SC2->(GetArea())
	SC2->(dbSetOrder(1))
	For nI := 1 To Len(aOPsAglut)
		If SC2->(dbSeek(xFilial("SC2")+aOPsAglut[nI]))
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Integracoes TOTVS APS e SFC: gera Operacoes X Ordem (SHY)    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ			
			If Empty(cRoteiro := SC2->C2_ROTEIRO)
				If Empty(cRoteiro := Posicione("SB1",1,xFilial("SB1")+SC2->C2_PRODUTO,"B1_OPERPAD"))
					cRoteiro := StrZero(1,TamSX3("G2_CODIGO")[1])
				EndIf		
			EndIf
			SC2->(TAPSOperac(C2_NUM+C2_ITEM+C2_SEQUEN+C2_ITEMGRD,C2_PRODUTO,cRoteiro,C2_QUANT))
			
			//-- Integracao com Chao de Fabrica
			If lIntSFC
				A650IntSFC(3,4)	//-- Gera OP
				A650IntSFC(4,2)	//-- Gera operacoes da ordem
				A650IntSFC(4,3)	//-- Gera empenhos
			EndIf
		EndIf
	Next
	RestArea(aAreaSC2)
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Devolve as ordens originais dos arquivos                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	RetIndex('SC6')
	dbClearFilter()
	If File(cNomArqC6 += OrdBagExt())
		fErase(cNomArqC6)
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Fecha semaforo desbloqueando o SH8 para a filial³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ClosSemSH8()
EndIf
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MTA720EXEC³ Autor ³ Rodrigo de A. Sartorio³ Data ³ 04/01/96 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Executa montagem do arquivo de trabalho e do markbrowse    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³oTNewProc = Objeto tNewProcess()                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA720                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MTA720EXEC(oTNewProc)
Local oTempTable:= NIL
Local aStru     := {}
Local aTam      := {}
Local nPeriodo  := nUsado
Local a720CPU	:= {}
Local nI		:= 0
Local cSavAlias	:= ""
Local lTppr		:= Iif(SC2->(FieldPos("C2_TPPR")) > 0, .T., .F.)
 
A710GrvTm(oTNewProc, STR0033) //"Inicio Processamento"

If nPeriodo > 0
	AADD(aStru,{ "MARK"   		,"C",02		,0})
	aTam:=TamSX3("D4_OP")
	AADD(aStru,{ "AGLUT"  		,"C",aTam[1],0})
	AADD(aStru,{ "NUMOP"  		,"C",aTam[1],0})
	aTam:=TamSX3("B1_COD")
	AADD(aStru,{ "PRODUTO"		,"C",aTam[1],0})
	AADD(aStru,{ "PRODPAI"		,"C",aTam[1],0})
	aTam:=TamSX3("B1_DESC")
	AADD(aStru,{ "DESCRICAO"	,"C",aTam[1],0})
	aTam:=TamSX3("C2_QUANT")
	AADD(aStru,{ "QUANT"  		,"N",aTam[1],aTam[2]})
	AADD(aStru,{ "INICIO" 		,"D",08		,0})
	AADD(aStru,{ "ENTREGA"		,"D",08		,0})
	AADD(aStru,{ "ORDEM"  		,"N",04		,0})
	AADD(aStru,{ "GERADO" 		,"C",01		,0})
	AADD(aStru,{ "ROTEIRO" 		,"C",02		,0})
	AADD(aStru,{ "GRADE"   		,"C",01		,0})
	aTam:=TamSX3("C2_ITEMGRD")
	AADD(aStru,{ "ITEMGRD" 		,"C",aTam[1],0})
	aTam:=TamSX3("C2_OPC")
	AADD(aStru,{ "OPCIONAL"		,"C",aTam[1],0})
	aTam:=TamSX3("C2_TPOP")
	AADD(aStru,{ "TPOP"			,"C",aTam[1],0})
	aTam:=TamSX3("C2_SEQPAI")
	AADD(aStru,{ "SEQPAI"		,"C",aTam[1],0})
	AADD(aStru,{ "REFGRD"		,"C",01,0})
	aTam:=TamSX3("C2_REVISAO")
	AADD(aStru,{ "REVISAO"		,"C",aTam[1],0})
	If lTppr
		aTam:=TamSX3("C2_TPPR")
		AADD(aStru,{ "TPPR"			,"C",aTam[1],0})
	EndIf
	AADD(aStru,{ "DESCPER"      ,"C",100,aTam[2]})
	aTam:=TamSX3("C2_LOCAL")
	AADD(aStru,{ "ARMAZEM"		,"C",aTam[1],0})
	
	If ExistBlock("MA720CPU")
		a720CPU := ExecBlock("MA720CPU",.F.,.F.,{1})
		If ValType(a720CPU) == "A"
			For nI := 1 to Len(a720CPU)
				aAdd(aStru,a720CPU[nI])
			Next nI
		EndIf
	EndIf
	cSavAlias := Alias()
	
	oTempTable := FWTemporaryTable():New( "TRB" )
	oTempTable:SetFields( aStru )
	
	oTempTable:AddIndex("indice1", {"NUMOP"} )

	If lTppr
		If mv_par07 == 1
			oTempTable:AddIndex("indice2", {"MARK","SEQPAI","TPOP","PRODUTO","ROTEIRO","OPCIONAL","ENTREGA","TPPR"} )
		Else
			oTempTable:AddIndex("indice2", {"MARK","TPOP","PRODUTO","ROTEIRO","OPCIONAL","ENTREGA","TPPR"} )
		EndIf
	Else
		If mv_par07 == 1
			oTempTable:AddIndex("indice2", {"MARK","SEQPAI","TPOP","PRODUTO","ROTEIRO","OPCIONAL","ENTREGA"} )
		Else
			oTempTable:AddIndex("indice2", {"MARK","TPOP","PRODUTO","ROTEIRO","OPCIONAL","ENTREGA"} )
		EndIf
	EndIf

	oTempTable:Create() 
	
	A720Aglut(nPeriodo)
	A720Browse(oTNewProc)
	
	oTempTable:Delete()
	
	dbSelectArea(cSavAlias)
		
EndIf
A710GrvTm(oTNewProc, STR0034) //"Fim Processamento"
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Fun‡…o   ³MTA720OK  ³ Autor ³Rodrigo de A. Sartorio ³ Data ³ 04/01/96 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descri‡…o³ Confirmacao antes de executar a Aglutinacao.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MTA720OK                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function MTA720OK()
Local cText := OemToAnsi(STR0019)+CHR(13)	//"Esta rotina ir  aglutinar as Ordens de Produ‡„o"
cText += OemToAnsi(STR0020)+CHR(13)     	//"conforme os parƒmetros selecionados."
cText += OemToAnsi(STR0021)	                //"Confirma a aglutina‡„o das OPs ?"
Return (MsgYesNo(cText,OemToAnsi(STR0022)))	//"Aten‡„o"

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ A720Escol  ³ Autor ³Rodrigo de A.Sartorio³ Data ³ 04/01/96 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Escolhe as Ops para Aglutinar                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA720                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A720Escol(cMarca,lInverte,oDlg)
If IsMark("MARK",cMarca,lInverte)
	RecLock("TRB",.F.)
	If !lInverte
		Replace TRB->MARK With cMarca
	Else
		Replace TRB->MARK With "  "
	Endif
	MsUnlock()
Else
	RecLock("TRB",.F.)
	If !lInverte
		Replace TRB->MARK With "  "
	Else
		Replace TRB->MARK With cMarca
	Endif
	MsUnlock()
Endif
oDlg:Refresh()
Return .T.

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ A720MarkAll³ Autor ³Rodrigo de A.Sartorio³ Data ³ 04/01/96 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Inverte as OPs Marcadas/Desmarcadas                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA720                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A720MarkAll(cMarca,oDlg)
Local nRecno := Recno()
dbGotop()
Do While !Eof()
	RecLock("TRB",.F.)
	If Empty(TRB->MARK)
		Replace TRB->MARK With cMarca
	Else
		Replace TRB->MARK With "  "
	Endif
	MsUnlock()
	dbSkip()
EndDo
dbGoto(nRecno)
oDlg:Refresh()
Return .T.


/*/{Protheus.doc} enviaOpMrp
Envia os empenhos para o MRP

@type  Static Function
@author brunno.costa
@since 23/07/2019
@version P12.1.27
@param cOperac    , Character, Operação em execução (INSERT/DELETE)
@param aMRPxJson  , Array    , Array com os dados para enviar - APONTAMENTOS.
@param lDelTBMRP  , logico   , indica se deve excluir a tabela temporaria
@return Nil
/*/
Static Function enviaOpMrp(cOperac, aMRPxJson, lDelTBMRP)
	Local aAreaAtu   := GetArea()

	//Integra os dados com a API - APONTAMENTOS
	If _lNewMRP .and. aMRPxJson != Nil .and. Len(aMRPxJson[1]) > 0
		MATA650INT(cOperac, aMRPxJson[1])
		aSize(aMRPxJson[1], 0)
		FreeObj(aMRPxJson[2])
		aMRPxJson[2] := Nil
	EndIf

	//Inicializa variável de controle da integração com o novo mrp.
	If lDelTBMRP
		_lNewMRP := Nil
	EndIf

	RestArea(aAreaAtu)
Return Nil

/*/{Protheus.doc} AtuB2720
	Atualiza SB2 após aglutinação das OPs
	@type  Static Function
	@author maiara.cunhago
	@since 26/07/2022
	@version 1.0
	@param cLocalOP, Caractere, Armazem no qual sera aglutinados as op
	/*/
Static Function AtuB2720(cLocalOP)
Local aAliasTRB2 := TRB->(GetArea())

If TRB->ARMAZEM != cLocalOP
	DbSelectArea("SB2")
	DbSetOrder(1)
	If DBSeek(xFilial('SB2')+TRB->PRODUTO+TRB->ARMAZEM)
		GravaB2Pre('-',TRB->QUANT,TRB->TPOP)
		
		If DBSeek(xFilial('SB2')+TRB->PRODUTO+cLocalOP)
			GravaB2Pre('+',TRB->QUANT,TRB->TPOP)
		Else 
			CriaSB2(TRB->PRODUTO,cLocalOP)
			MsUnlock()
			GravaB2Pre('+',TRB->QUANT,TRB->TPOP)
		EndIf
	EndIf
EndIf

RestArea(aAliasTRB2)

Return 
