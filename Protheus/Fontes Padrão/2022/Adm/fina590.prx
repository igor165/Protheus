#INCLUDE "FINA590.ch"
#INCLUDE "PROTHEUS.ch"
#INCLUDE "FONT.CH"
#INCLUDE "COLORS.CH"
#INCLUDE "FWMVCDEF.CH"

Static cMVINSIRF    := nil
Static lPCCBaixa    := nil
Static dLastPcc     := nil
Static __cChvSEA    := ""
Static __cFilBor    := ""

// Motor de Retencoes
Static __lMotorRet 	:= NIL
Static __lPccMR 	:= .F.
Static __lIrfMR 	:= .F.
Static __lIssMR 	:= .F.
Static __lImpMotRet := .F.
Static __lUsaFlag	:= .F.
Static __lImpMT 	:= .F.
Static __nImpMT 	:= 0
Static __nTotImp 	:= 0
Static __lPccBxMR 	:= .F.
Static __lIrfBxMR 	:= .F.
Static __lFPIXatv   := FindFunction("PIXIsActiv")
Static __lBCOApi    := .F.
Static __l241Canc   := Nil 

//-------------------------------------------------------------------
/*/{Protheus.doc} FINA590
Manutenção de Borderôs

@author Karen Honda
@since 22/09/2017
@version P11
/*/
//-------------------------------------------------------------------
Function FINA590(nPosArotina, lAutomato)
Local lPanelFin	:= IsPanelFin()
Local oDlg      := Nil
Local oRadio    := Nil
Local nOpca		:= 0
Local lF590Rec	:= ExistBlock("F590REC")
Local lF590Pag	:= ExistBlock("F590PAG")
Local lF590TMB	:= ExistBlock("F590TMB")
Local aCampos	:= {}

If !lPanelFin
    Private cNumBor 	:= CriaVar("EA_NUMBOR")
Endif

PRIVATE nRadio
Private cPort590
Private cAgen590
Private cConta590
Private cModPgto
Private cTipoPag
Private cLote
Private dDataBor	:= StoD("")
Private dDataBord	:= StoD("")
Private nIrrfFina061:= 0
Private nPisFina061	:= 0
Private nCofFina061	:= 0
Private nCslFina061	:= 0
Private aBaixaSE5	:= {}
Private nPIS		:= 0 // Variaveis Relativas a gravacao dos impostos (Junho/2013) ³
Private nCOFINS		:= 0
Private nCSLL		:= 0
Private nIrrf		:= 0
Private nParciais 	:= 0
Private nValRec		:= 0
Private nOldValRec	:= 0
Private aDadosRef	:= Array(7)
Private aDadosRet	:= Array(7)
Private lRaRtImp	:= FRaRtImp()     //Define se ha retencao de impostos PCC/IRPJ no R.A
Private aDadosTit	:= {}
Private cBordImp	:= ""
Private lTotMes		:= .F. //Nao calculo na totmes a parte das query´s referentes aos registros gerados por bordero de recebto de imposto.
Private cFilent
Private lBoRApi     := .F.
Private cSubCta060  := "" // Sub Conta
Private cEspec060   := "" // Espécie do Boleto

DEFAULT nPosArotina := 0
DEFAULT lAutomato 	:= .F.

__lUsaFlag	:= SuperGetMV( "MV_CTBFLAG" , .T. /*lHelp*/, .F. /*cPadrao*/)

// Motor Retenção
__lMotorRet := FindFunction("FTemMotor") .and. FTemMotor()

If cMVINSIRF == nil
    Ini590Var()
EndIf

// Procura o Lote do Financeiro
LoteCont( "FIN" )

// Api de bancos
If FindFunction("F713VldUso") .And. FindFunction("F713VldBco")
    __lBCOApi := F713VldUso()
EndIf

While .T.

    If !lF590TMB

        nOpca := 0
        DEFINE MSDIALOG oDlg FROM  094,1 TO 200,293 TITLE OemToAnsi(STR0001) PIXEL
        @ 05,07 TO 32, 140 OF oDlg  PIXEL
        If ! lPanelFin
            If cPaisLoc $ "CHI"
                @ 10,10 RADIO oRadio VAR nRadio ITEMS OemToAnsi(STR0003) 3D SIZE 50,10 WHEN .F. OF oDlg PIXEL //"Receber"
            Else
                @ 10,10 RADIO oRadio VAR nRadio;
                ITEMS OemToAnsi(STR0003),OemToAnsi(STR0004); //"Receber"###"Pagar"
                3D SIZE 50,10 OF oDlg PIXEL
            EndIf

            @ 10,60 SAY OemToAnsi(STR0009) SIZE 023,07 OF oDlg PIXEL  //"Bordero"
            @ 10,90 MSGET cNumBor          SIZE 023,10 OF oDlg PIXEL Valid FA590NumC()

            DEFINE SBUTTON FROM 35,085 TYPE 1 ENABLE OF oDlg ACTION (nOpca := 1, oDlg:End())
            DEFINE SBUTTON FROM 35,115 TYPE 2 ENABLE OF oDlg ACTION (nOpca := 0, oDlg:End())

            ACTIVATE MSDIALOG oDlg CENTERED

        Else

            If lPanelFin .And. (Alltrim(cNumBor)) == ""
                F590Bord()
            Endif

            If Finwindow:cAliasFile == "SE1"
                nRadio := 1
            Else
                nRadio := 2
            Endif

            nOpca := nOpcAPriv

        Endif
    Else

        Aadd( aCampos, nRadio  )
        Aadd( aCampos, cNumBor )
        Aadd( aCampos, nOpca   )

        aCampAnt := aClone( aCampos )
        aCampos := aClone(Execblock("F590TMB",.F.,.F.,aCampos))

        If Valtype( aCampos ) != "A" .Or. Len( aCampos ) < 3
            aCampos := aClone( aCampAnt )
        EndIf

        nRadio  := aCampos[1]
        cNumBor := aCampos[2]
        nOpca   := aCampos[3]
    EndIf

    If nOpca == 1
        If !Fa590NumC()
            Return
        EndIf
        
        //Valida se já houve integração do borderô com o TCB
        If nRadio == 2 .And. SA6->(FieldPos("A6_TCB")) > 0 .And. AliasIndic("FWO") .And. BordInterg(SEA->EA_NUMBOR)
            Help(" ", 1, "HELP", Nil, STR0125, 1 , 1 )  // "Não é permitido alterar borderô que já foi enviado ao TOTVS Connect Bank."
            Return
        EndIf
        
        cPort590  := SEA->EA_PORTADO
        cAgen590  := SEA->EA_AGEDEP
        cConta590 := SEA->EA_NUMCON
        cModPgto  := SEA->EA_MODELO
        cTipoPag  := SEA->EA_TIPOPAG
        dDataBor  := SEA->EA_DATABOR
        dDataBord := SEA->EA_DATABOR
        cFilent   := SEA->EA_FILIAL        
        
        If nRadio == 1			// Bordero a Receber
            If SEA->EA_CART == "R"
                SomaAbat("","","","R")
                // Executa rotina de manutencao de bordero a receber
                Fin590Rec(lF590Rec,nPosArotina,lAutomato)//F,4,T
                If lPanelFin
                    Exit
                Endif
            Endif
        ElseIf nRadio == 2		// Bordero a Pagar
            If SEA->EA_CART == "P"
                SomaAbat("","","","P")
                // Executa rotina de manutencao de bordero a receber
                Fin590Pag(lF590Pag,nPosArotina,lAutomato)
                If lPanelFin
                    Exit
                Endif
            Endif
        Endif
    Else
        Exit
    EndIf
EndDo

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} Fin590Rec
Manutenção de Borderôs - Contas a Receber

@author Fernando Dourado
@since 12/02/2001
@version P11
/*/
//-------------------------------------------------------------------
Function Fin590Rec(lF590Rec,nPosArotina,lAutomato)

Private lRecTrue  := .T.
PRIVATE aRotina := MenuDef()
PRIVATE cCadastro := OemToAnsi(STR0001)

DEFAULT lAutomato := .F.

//----------------------------------------------------------------
// CARREGA FUNCAO PERGUNTE
//----------------------------------------------------------------
// mv_par01 - Mostra lan‡amento Contabil
// mv_par02 - Aglutina Lancamentos
// mv_par03 - Contabiliza Transferencia
// mv_par04 - Considera Retencao Bancaria
// mv_par05 - Contabiliza Online
//----------------------------------------------------------------
SetKey (VK_F12,{|a,b| AcessaPerg("FIN590",.T.)})

pergunte("FIN590",.F.)

If lF590rec
    ExecBlock("F590REC",.F.,.F.)
Endif

If nPosArotina > 0 // Sera executada uma opcao diretamento de aRotina, sem passar pela mBrowse
    dbSelectArea("SE1")
    If !lAutomato
        bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPosArotina,2 ] + "(a,b,c,d,e) }" )
        Eval( bBlock, Alias(), (Alias())->(Recno()),nPosArotina)
    Else
        bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPosArotina,2 ] + "(a,b,c,d,e)}" )
        Eval( bBlock, Alias(), (Alias())->(Recno()),nPosArotina,lAutomato)
    Endif
Else
    mBrowse( 6, 1,22,75,"SE1",,,,,,FA590Legen("SE1"))
Endif

If lF590rec
    dbSelectArea("SE1")
    dbClearFil()
    RetIndex("SE1")
    dbSetOrder(1)
Endif

Return


//-------------------------------------------------------------------
/*/{Protheus.doc} Fin590Pag
Manutenção de Borderôs - Contas a Pagar

@author Fernando Dourado
@since 12/02/2001
@version P11
/*/
//-------------------------------------------------------------------
Function Fin590Pag(lF590Pag,nPosArotina,lAutomato)

PRIVATE aRotina := MenuDef()
PRIVATE cCadastro := OemToAnsi(STR0001)

DEFAULT lAutomato := .F.

//------------------------------------------------------------
// CARREGA FUNCAO PERGUNTE
//------------------------------------------------------------
// mv_par01 - Mostra lan‡amento Contabil
// mv_par02 - Aglutina Lancamentos
// mv_par03 - Contabiliza Transferencia
// mv_par04 - Considera Retencao Bancaria
//------------------------------------------------------------
SetKey (VK_F12,{|a,b| AcessaPerg("FIN590",.T.)})

pergunte("FIN590",.F.)

// Endereca a funcao de BROWSE
If lF590Pag
    ExecBlock("F590PAG",.F.,.F.)
Endif

If nPosArotina > 0 // Sera executada uma opcao diretamento de aRotina, sem passar pela mBrowse
    dbSelectArea("SE2")
    If !lAutomato
        bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPosArotina,2 ] + "(a,b,c,d,e) }" )
        Eval( bBlock, Alias(), (Alias())->(Recno()),nPosArotina)
    Else
        bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPosArotina,2 ] + "(a,b,c,d,e)}" )
        Eval( bBlock, Alias(), (Alias())->(Recno()),nPosArotina,lAutomato)
    EndIf
Else
    mBrowse( 6, 1,22,75,"SE2",,,,,,FA590Legen("SE2"))
Endif

If lF590Pag
    dbSelectArea("SE2")
    dbClearFil()
    RetIndex("SE2")
    dbSetOrder(1)
Endif

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa590Inclu
Manutenção de Borderôs - Inclusão de títulos

@author Fernando Dourado
@since 12/02/2001
@version P11
/*/
//-------------------------------------------------------------------
Function Fa590Inclu(cAlias, nReg, nPosArotina, lAutomato)
Local lPanelFin		:= IsPanelFin()
Local aMoedas		:= GetMoedas()
Local cTit			:= ""
Local cForne		:= ""
Local cLoja			:= ""
Local cContrato		:= ""
Local nOpc			:= 0
Local lF590Inc		:= Existblock("F590INC")
Local l590IncPrv	:= Existblock("F590INCPRV")
Local lF590IncTx	:= Existblock("F590INCTX")
Local lF590IOK		:= Existblock("F590IOK")
Local nRecSEA		:= 0
Local nRegSE2		:= SE2->(RECNO())
Local cSituAtu		:= ""
Local lRet 			:= .T.
Local dBase			:= CTOD("  /  /  ")
Local nDias			:= 0
Local aFeriados		:= {}
Local aAreaSA6		:= {}
Local nIndBaseIR	:= 0
Local lBaseIrrf		:= .F.
Local lCarret		:= .F.
Local nFatorIR		:= 0
Local aAlt  		:= {}
Local nTotal		:= 0
Local nHdlPrv		:= 0
Local lContabil		:= .T.
Local aFlagCTB		:= {}
Local lFinVDoc		:= IIF(GetNewPar("MV_FINVDOC","2")=="1",.T.,.F.)		//Controle de validacao de documentos obrigatorios
Local lIRPFBaixa    := .F.
Local lCalcIssBx :=	IsIssBx("P")
Local nValoIRPF	 := 0
Local cSituAnt	 := ""
Local lPermitePA := IF(ExistBlock("FA240PA"), ExecBlock("FA240PA",.F.,.F.), .F.) // PE que permite a seleção de PA com mov. bancária na tela de Borderô
Local lIRBaixa	 := .F.
Local aSEA       := SEA->(GetArea())
Local l590Versao := SEA->( ColumnPos( "EA_VERSAO" ) ) > 0
Local aAreaSE1   := {}
Local oBcoCod	 := NIL
Local oBcoAge	 := NIL
Local oBcoCnt	 := NIL
Local lCanBorder := GetMv("MV_CANBORP") == "S"//Cancelamento do borderô
Local lClearBrd	 := ExistFunc("FClearBrd")	//Função para ajuste de base
Local aCTB		 := {}
Local cAgencAnt	 := ""
Local cBancoAnt	 := ""
Local cContaAnt	 := ""
Local lCtliPag   := SuperGetMv("MV_CTLIPAG", .F., .F.)
Local nVrlMinPag := SuperGetMv("MV_VLMINPG", .F., 0)
Local cChaveSE5  := ""
Local lAtulizSE2 := .T.
Local cArquivo   := ""
Local aRetencao  := {}

Private	nIrfBaseR 	:= 0
Private	nIrfBaseC 	:= 0
Private aContab  	:= {}
Private nAcresc 	:= 0 // para a função F080JuMuDe
Private nDecresc 	:= 0 // para a função F080JuMuDe
Private nIrfCalc	:= 0

Default lAutomato	:= .F.

If (alltrim(SEA->EA_ORIGEM) == "FINA061" .or. alltrim(SEA->EA_ORIGEM) == "FINA590I")
    alert(STR0009 + cNumBor + STR0121)
    Return
EndIf

If cMVINSIRF == nil
    Ini590Var()
EndIf

SEA->(DbSetOrder(2))
If !SEA->(DbSeek(__cChvSEA)) //Borderô não encontrado.! Certifique-se de que o borderô não tenha sido cancelado.!
    Help(" ", 1, "NO_BORDERO",,STR0009 + ": " + cNumBor + " " + STR0123, 2, 0,,,,,, {STR0124})
    Return .F.
EndIf

DbSelectArea("SA6")
DbSelectArea("SE5")
RestArea(aSEA)

//Se o banco estiver configurado para envio ao TCB, não permite incluir títulos de filiais diferentes
If SEA->EA_FILORIG != SE2->E2_FILORIG .And. SA6->(FieldPos("A6_TCB")) > 0
    SA6->(DbSetOrder(1))
    
    If SA6->(DbSeek(FWxFilial("SA6",SEA->EA_FILORIG)+SEA->(EA_PORTADO+EA_AGEDEP+EA_NUMCON))) .And. SA6->A6_TCB == "1"
        Help(" ", 1, "HELP", Nil, STR0126, 1, 1)
        Return .F.
    EndIf
EndIf

If nRadio == 2	//Borderô C. Pagar    
    If SE2->E2_TIPO $ MVPAGANT        
        SE5->(DbSetOrder(7))
        cChaveSE5 := (xFilial("SE2", SE2->E2_FILORIG)+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA))
        
        //Vld se o PA possui Mov.Bancária.
        If !lPermitePA .And. SE5->(DbSeek(cChaveSE5)) .And. SE5->E5_TIPODOC $ MVPAGANT
            Help(" ", 1, "PAMOVBANC", Nil, STR0119, 1, 0)
            Return .f.
        EndIf
    EndIf

    f241LRatIR(.T.) // Limpa objeto __oRatIRF IR Progressivo

    nBaseIrpf := 0
    aDadosIR  := Array(3)
    aFill(aDadosIR, 0)
    
    //Verifica se pode baixar sem aprovação
    If lCtliPag .And. Empty(SE2->E2_DATALIB) .And. (SE2->(E2_SALDO+E2_SDACRES-E2_SDDECRE) > nVrlMinPag)
        Help(" ",1,"A590FLIPAG")
        lRet := .F.
    Endif

    If lRet .and. !Empty(SE2->E2_NUMBOR)
        Help(" ",1,"FA590TITBOR")	//O título selecionado já está em borderô.
        lRet := .F.					//Selecione um título que não esteja em borderô.
    Endif
    
    If lRet .and. SE2->E2_TIPO $ MV_CPNEG
        Help(" ",1,"FA590NCRED")	//Tipo de título inválido para envio em   bordero
        lRet := .F.					//Utilize outro tipo de titulo para incluir neste borderô que não seja crédito
    Endif
    
    If lRet .And. If(l590IncPrv .AND. ExecBlock("F590IncPrv",.F.,.F.,{"P",cNumBor}),.F.,SE2->E2_TIPO $ MVPROVIS)
        Help(" ",1,"FA590PROV")	//Tipo de título inválido para envio em   bordero
        lRet := .F.				//Utilize outro tipo de titulo para incluir neste borderô que não seja provisório.
    Endif
    
    If lRet .And. SE2->E2_TIPO $ MVENVBCOR
        Help(" ",1,"F590ENVBCO")	//Tipo de título inválido para envio em   bordero
        lRet := .F.					//Utilize um titulo com tipo válido para envio ao banco.
    Endif
    
    //Verifica se data do movimento não é menor que data limite de movimentacao no financeiro
    If lRet .and. !DtMovFin(,,"1") .Or. SE2->E2_SALDO == 0
        lRet := .F.
    Endif
    
    If lRet .and. GetNewPar("MV_VLTITAD",.F.)
        lRet := F590BuscAD( "SE2", SE2->E2_FORNECE, SE2->E2_LOJA,"P")
    Endif
    
    //Verifica se o titulo esta bloqueado - Gestao de Contratos
    If SE2->(FieldPos("E2_MSBLQL")) > 0 .And. SE2->E2_MSBLQL == "1"
        Help(" ",1,"SE2BLOQ")	//O titulo selecionado encontra-se bloqueado
        lRet := .F.
    EndIf
    
    //Documentos Apresentados
    If !CN062ValDocs("06", .F.)
        lRet := .F.
    EndIf
    
    //Validação SIAFI - Documento Hábil. Titulos relacionados a documento habil nao vao para borderô
    If FinTemDH()
        lRet := .F.
    Endif
    
    If lRet
        SE2->(DbGoTo(nRegSE2))
        cTit      := SE2->E2_PREFIXO+"-"+SE2->E2_NUM+"-"+SE2->E2_PARCELA+"-"+SE2->E2_TIPO
        cForne    := SE2->E2_FORNECE
        cLoja     := SE2->E2_LOJA
        cContrato :=  ""
        
        While .T.            
            cVar := aMoedas[SE2->E2_MOEDA]
            nOpc := 1
            
            If !lAutomato
                nOpc := 0
                
                //Tela para inclusão do titulo no borderô
                If lPanelFin //Chamado pelo Painel Financeiro
                    oPanelDados := FinWindow:GetVisPanel()
                    oPanelDados:FreeChildren()
                    aDim := DLGinPANEL(oPanelDados)
                    DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0,0 To 0,0 PIXEL STYLE nOR( WS_VISIBLE, WS_POPUP )
                    //------------------------------------------------------------------
                    // Observacao Importante quanto as coordenadas calculadas abaixo:
                    //------------------------------------------------------------------
                    // a funcao DlgWidthPanel() retorna o dobro do valor da area do
                    // painel, sendo assim este deve ser dividido por 2 antes da
                    // subtracao e redivisao por 2 para a centralizacao.
                    //------------------------------------------------------------------
                    nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 196) /2
                    nEspLin  := 3
               Else
                    nEspLarg := 0
                    nEspLin  := 0
                    DEFINE MSDIALOG oDlg FROM  15,6 TO 219,404 TITLE OemToAnsi(STR0001) PIXEL  //"Borderos de Pagamentos"
                Endif
                
                oDlg:lMaximized := .F.
                oPanel := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,20,20)
                oPanel:Align := CONTROL_ALIGN_ALLCLIENT

                @ 001+nEspLin, 001+nEspLarg TO 029+nEspLin, 199+nEspLarg OF oPanel  PIXEL
                @ 033+nEspLin, 001+nEspLarg TO 063+nEspLin, 199+nEspLarg OF oPanel  PIXEL

                If lPanelFin
                    @ 067+nEspLin,001+nEspLarg TO 097+nEspLin,199+nEspLarg OF oPanel  PIXEL
                Else
                    @ 067+nEspLin,001+nEspLarg TO 097+nEspLin,131+nEspLarg OF oPanel  PIXEL
                Endif

                @ 006+nEspLin,009+nEspLarg say OemToAnsi(STR0009)	 	SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,045+nEspLarg say OemToAnsi(STR0010) 		SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,081+nEspLarg say OemToAnsi(STR0011)    	SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,115+nEspLarg SAY OemToAnsi(STR0021)    	SIZE 53, 07 OF oPanel PIXEL
                @ 040+nEspLin,009+nEspLarg SAY OemToAnsi(STR0012)		SIZE 23, 07 OF oPanel PIXEL  //"Banco"    ,
                @ 040+nEspLin,035+nEspLarg SAY OemToAnsi(STR0013)		SIZE 32, 07 OF oPanel PIXEL  //"Agˆncia"
                @ 040+nEspLin,069+nEspLarg SAY OemToAnsi(STR0014)		SIZE 32, 07 OF oPanel PIXEL  //"Conta"
                @ 040+nEspLin,119+nEspLarg SAY OemToAnsi(STR0015)		SIZE 53, 07 OF oPanel PIXEL  //"Contrato"
                @ 073+nEspLin,009+nEspLarg SAY OemToAnsi(STR0016)		SIZE 23, 07 OF oPanel PIXEL  //"Moeda"
                @ 073+nEspLin,063+nEspLarg SAY OemToAnsi(STR0017)		SIZE 22, 07 OF oPanel PIXEL  //"Modelo"
                @ 073+nEspLin,097+nEspLarg SAY OemToAnsi(STR0018)		SIZE 32, 07 OF oPanel PIXEL  //"Tipo Pagto"
                @ 015+nEspLin,009+nEspLarg MSGET cNumBor         		SIZE 32, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,045+nEspLarg MSGET cForne    				SIZE 32, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,081+nEspLarg MSGET cLoja  				SIZE 23, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,110+nEspLarg MSGET cTit					SIZE 80, 10 OF oPanel PIXEL WHEN .F.
                @ 049+nEspLin,009+nEspLarg MSGET oBcoCod VAR cPort590	SIZE 10, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_PORTADO')
                @ 049+nEspLin,035+nEspLarg MSGET oBcoAge VAR cAgen590	SIZE 26, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_AGEDEP')
                @ 049+nEspLin,069+nEspLarg MSGET oBcoCnt VAR cConta590	SIZE 42, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_NUMCON')
                @ 049+nEspLin,119+nEspLarg MSGET cContrato       		SIZE 42, 10 OF oPanel PIXEL Picture "@S3" WHEN .F.
                @ 082+nEspLin,009+nEspLarg COMBOBOX oCbx VAR cVar ITEMS aMoedas SIZE 46, 13 OF oPanel PIXEL WHEN .F.
                @ 082+nEspLin,063+nEspLarg MSGET cModPgto        		SIZE 18, 10 OF oPanel PIXEL Picture "@!" WHEN .F.
                @ 082+nEspLin,097+nEspLarg MSGET cTipoPag        		SIZE 18, 10 OF oPanel PIXEL Picture "@!" WHEN .F.
                
                If lPanelFin //Chamado pelo Painel Financeiro
                    oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1])
                    ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg, {||nOpc := 1, oDlg:End()}, {||oDlg:End()})
                Else
                    DEFINE SBUTTON FROM 85, 142 TYPE 1 ENABLE OF oPanel ACTION (nOpc := 1, oDlg:End() )
                    DEFINE SBUTTON FROM 85, 170 TYPE 2 ENABLE OF oPanel ACTION oDlg:End()
                    ACTIVATE MSDIALOG oDlg CENTERED
                Endif
            Endif
            
            If nOpc != 1
                SE2->(DbSetOrder(1))
                Exit
            EndIF
            
            //Permite ou nao a inclusao do titulo no bordero.
            If lF590IOK .and. !(ExecBlock("F590IOK",.F.,.F.,{"P",cNumBor}))
                Exit
            Endif
            
            SE2->(DbGoTo(nRegSE2))
            
            //Para o Brasil, apresenta somente os titulos cuja moeda e' a mesma do banco em caso de banco em moeda estrangeira
            If FXMultSld()
                If !F240VldMd(cPort590, cAgen590, cConta590, SE2->E2_MOEDA)
                    Exit
                Endif
                
                //Titulos em moeda estrangeira que possua calculo de impostos nacionais na baixa
                //nao podem ser transferidos para contas em moeda estrangeira.
                If !FXVldBxBco(cPort590, cAgen590, cConta590, SE2->E2_NATUREZ, SE2->E2_MOEDA)
                    Exit
                Endif
            Endif            
            
            If nOpc == 1                
                BEGIN TRANSACTION                    
                    SA2->(DbSetOrder(1))
                    SED->(DbSetOrder(1))
                    SA2->(MSSeek(xFilial("SA2", SE2->E2_FILORIG)+SE2->(E2_FORNECE+E2_LOJA)))                    
                    SED->(MSSeek(xFilial("SED", SE2->E2_FILORIG)+SE2->E2_NATUREZ))
                    
                    If !__lIrfMR                        
                        If (lIRPFBaixa := (cPaisLoc == "BRA" .And. SA2->A2_CALCIRF == "2" .And. SED->ED_CALCIRF == "S")) 
                            lCarret    := SED->ED_IRRFCAR == "S" //Calcule IRRF de carreteiro
                            nIndBaseIR := 1
                            lIRBaixa   := lIRPFBaixa 
                            
                            If (lBaseIrrf  := F050BIRPF(2))
                                nIndBaseIR := If(SED->ED_BASEIRF > 0, (SED->ED_BASEIRF/100), 1)
                            EndIf
                            
                            If !lCarret
                                nBaseIrpf := (SE2->E2_VALOR + nFatorIR)
                                
                                //Verifico se controla a base de Impostos
                                If lBaseIrrf .And. SE2->E2_BASEIRF > 0
                                    nBaseIrpf := SE2->E2_BASEIRF - Iif(cMVINSIRF == "2", 0, SE2->E2_INSS)
                                Endif
                                
                                nBaseIrpf += SE2->E2_INSS
                                
                                If !lCalcIssBx
                                    nBaseIrpf += SE2->E2_ISS
                                EndIf
                                
                                If !lIRPFBaixa
                                    nBaseIrpf += SE2->E2_IRRF
                                EndIf
                            EndIf
                        EndIf
                    Endif
                    
                    //Verifica se tem um registro solto na SEA para evitar que dê chave duplicada quando MV_CANBORP == s
                    If lCanBorder .AND. lClearBrd
                        FClearBrd(cNumBor)
                    Endif
                    
                    //Grava a inclusão do titulo no borderô
                    DbSelectArea("SEA")
                    RecLock("SEA", .T.)
                    SEA->EA_FILIAL	:= __cFilBor
                    SEA->EA_PORTADO	:= cPort590
                    SEA->EA_AGEDEP	:= cAgen590
                    SEA->EA_NUMCON	:= cConta590
                    SEA->EA_NUMBOR	:= cNumBor
                    SEA->EA_DATABOR	:= dDataBase
                    SEA->EA_PREFIXO	:= SE2->E2_PREFIXO
                    SEA->EA_NUM		:= SE2->E2_NUM
                    SEA->EA_PARCELA	:= SE2->E2_PARCELA
                    SEA->EA_TIPO	:= SE2->E2_TIPO
                    SEA->EA_FORNECE	:= SE2->E2_FORNECE
                    SEA->EA_LOJA	:= SE2->E2_LOJA
                    SEA->EA_CART	:= "P"
                    SEA->EA_MODELO	:= cModPgto
                    SEA->EA_TIPOPAG	:= cTipoPag
                    SEA->EA_FILORIG	:= SE2->E2_FILORIG
                    SEA->EA_ORIGEM	:= "FINA590S"
                    
                    If l590Versao
                        SEA->EA_VERSAO := "0001"
                    Endif
                    SEA->(MsUnlock())
                    FKCOMMIT()
                    
                    //MANUTENÇÃO BORDERÔ CP' ,  Efetuada inclusão do Título a Receber no borderô CP
                    Aadd(aAlt, {STR0076, '', '', '', STR0077 + Alltrim(cNumBor)})
                    
                    //Cria o histórico de Cobrança
                    FinaCONC(aAlt)                    
                    DbSelectArea("SE2")                    
                    
                    //Calculo do IR na inclusão do título a pagar no borderô de pagamento, cálculo na baixa do título de acordo com a IN480 para PJ
                    If !__lIrfMR .And. lIRBaixa
                        //Verifico se controla a base de Impostos
                        nBaseIrpf := (SE2->E2_VALOR + nFatorIR)
                        
                        If lBaseIrrf .And. (SE2->E2_BASEIRF > 0 .Or. SE2->E2_VALOR != SE2->E2_SALDO)
                            If SE2->E2_BASEIRF > 0
                                nBaseIrpf := SE2->E2_BASEIRF - Iif((cMVINSIRF == "2"), 0, SE2->E2_INSS)
                            Else
                                nBaseIrpf := SE2->(E2_SALDO+E2_VRETPIS+E2_VRETCSL+E2_VRETCOF+E2_VRETINS)
                                nBaseIrpf += SE2->E2_VRETISS
                                nBaseIrpf += SE2->E2_VRETIRF
                            Endif
                        Endif
                        
                        //Busca base de cálculo para o IRPF caso não tenha sido calculada
                        If ((SE2->E2_TIPO $ MVPAGANT) .AND. lPermitePA) .OR. !SE2->E2_TIPO $ MVPAGANT
                            RecLock("SE2", .F.)
                            SE2->E2_PRETIRF := "1"
                            SE2->(MsUnlock())
                            
                            nValoIRPF := FCalcIRBx(0, SA2->A2_TIPO, dDataBase, dDataBase)
                            
                            //Atualiza número do borderô na SE2
                            F590AtuSE2(cNumBor, cPort590)
                            lAtulizSE2 := .F.
                            
                            If nValoIRPF > 0 .And. SE2->(E2_COFINS+E2_PIS+E2_CSLL+E2_ISS) == 0
                                //Efetua baixa parcial do título caso o mesmo tenha retenção do IRPF
                                F241BxIRPF(nValoIRPF, .T., nRegSE2, @nTotal, @nHdlprv, __lUsaFlag, @aFlagCTB)
                                
                                If nTotal > 0
                                    lContabil := Iif(lAutomato, .F., (mv_par01 == 1))
                                    
                                    cA100Incl(cArquivo, nHdlPrv, 3, cLote, lContabil, .F. ,Nil, Nil, Nil, @aFlagCTB, Nil, Nil)
                                    aFlagCTB := {}  //Limpa o coteudo apos a efetivacao do lancamento
                                EndIf
                            EndIf
                        EndIf
                    Endif
                    
                    //Atualiza número do borderô na SE2
                    If lAtulizSE2
                        F590AtuSE2(cNumBor, cPort590)                                      
                    EndIf
                    
                    //Adiciono o titulo atual para calculos de retenção
                    Aadd(aRetencao, {nRegSE2, SE2->E2_FORNECE, SE2->E2_LOJA, DTOS(SE2->E2_VENCREA), .T., __lImpMotRet})
                    
                    //Envio de e-mail pela rotina de checklist de documentos obrigatorios
                    IF lFinVDoc
                        CN062ValDocs("06", .F., .T.)
                    EndIf
                    
                    If lF590Inc
                        Execblock("F590INC", .F., .F., {"P", cNumBor})
                    Endif
                    
                    //Efetua o recalculo dos tx's c/os tit. que foram mantidos no bordero
                    If Len(aRetencao) > 0
                        F590Impost(aRetencao, @aFlagCTB)
                    Endif                    
                    
                    If lF590IncTx
                        Execblock("F590INCTX", .F., .F., {"P", cNumBor})
                    EndIf
                END TRANSACTION
            EndIf
            
            Exit
        EndDo
    Endif
    
    If lCanBorder .And. lClearBrd
        F240Clean() //zera o objeto criado pela FClearBrd()
    Endif
    
    f241LRatIR(.T.) // Limpa objeto __oRatIRF IR Progressivo

    dbSelectArea("SE2" )
    SE2->(DbSetOrder(1))
    
    If lPanelFin .And. lRet
        DbSelectarea(FinWindow:cAliasFile)
        FinVisual(FinWindow:cAliasFile,FinWindow,(FinWindow:cAliasFile)->(Recno()),.T.)
    Endif
Else
    If !CtbValiDt(,dDatabase,,,,{"FIN002"},)
        Return
    EndIf
    
    //Situacao de cobrança com desconto nao permite manutenção
    If FN022SITCB(SEA->EA_SITUACA)[3]		//SEA->EA_SITUACA $ "2/7"
        Help (" ",1,"NOBRDDES",,STR0029+STR0030+STR0031,1,0) 	//	"Os borderoes de cobranca descontada ou descontada
                                                                                    //	caucionada nao sofrerao manutencao
                                                                                    //	nesta rotina. Utilizar rotina de Transferencia"
        lRet := .F.
    Endif

    If lRet .and. !empty(SE1->E1_NUMBOR)
        Help(" ",1,"FA590TITBOR")	//O título selecionado já está em borderô.
        lRet := .F.					//Selecione um título que não esteja em borderô.
    Endif

    If lRet .and. SE1->E1_TIPO $ MVPROVIS
        Help(" ",1,"FA590PROV")	//Tipo de título inválido para envio em   bordero
        lRet := .F.				//Utilize outro tipo de titulo para incluir neste borderô que não seja provisório.
    Endif

    If lRet .and. SE1->E1_TIPO $ MVENVBCOR
        Help(" ",1,"F590ENVBCO")	//Tipo de título inválido para envio em   bordero
        lRet := .F.					//Utilize um titulo com tipo válido para envio ao banco.
    Endif

    If lRet .and. SE1->E1_TIPO $ MVRECANT
        Help(" ",1,"FA590ADIAN")	//Recebimento Antecipado não pode constar em Bordero
        lRet := .F.					//Escolha outro título
    Endif

    If lRet .and. SE1->E1_TIPO $ MV_CRNEG
        Help(" ",1,"FA590NCRED")	//Tipo de título inválido para envio em   bordero
        lRet := .F.					//Utilize titulos que não representem adiantamentos.
    Endif

    If lRet .and. SE1->E1_SALDO == 0
        Help(" ",1,"FA590BAIX")	//Título já baixado
        lRet := .F.				//Selecione outro título
    EndIf

    If lRet .and. GetNewPar("MV_VLTITAD",.F.)
        aAreaSE1 := SE1->(GetArea())
        lRet := F590BuscAD( "SE1", SE1->E1_CLIENTE, SE1->E1_LOJA,"R")
        RestArea(aAreaSE1)
    EndIf

    // Verifica se o titulo esta bloqueado - Gestao de Contratos
    If SE1->(FieldPos("E1_MSBLQL")) > 0
        If SE1->E1_MSBLQL == "1"
            Help(" ",1,"SE1BLOQ")	//O titulo selecionado encontra-se bloqueado
            lRet := .F.
        EndIf
    EndIf

    // Monta a tabela de situações de títulos
    If lRet
        SE1->(dbSelectArea("SE1"))
        cTit		:= SE1->E1_PREFIXO+"-"+SE1->E1_NUM+"-"+SE1->E1_PARCELA+"-"+SE1->E1_TIPO
        cForne		:= SE1->E1_CLIENTE
        cLoja		:= SE1->E1_LOJA
        cContrato	:= SE1->E1_CONTRAT
        cSituAnt	:= SE1->E1_SITUACA
        cSituaca	:= FN022SITCB(SEA->EA_SITUACA)[9]		//descricao da situacao de cobranca
        cSituAtu	:= SEA->EA_SITUACA

        nRecSEA := SEA->(Recno())

        While .T.
            cVar := aMoedas[SE1->E1_MOEDA]
            nOpc := 0

            If !lAutomato
                If lPanelFin //Chamado pelo Painel Financeiro
                    oPanelDados := FinWindow:GetVisPanel()
                    oPanelDados:FreeChildren()
                    aDim := DLGinPANEL(oPanelDados)
                    DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0,0 To 0,0 PIXEL STYLE nOR( WS_VISIBLE, WS_POPUP )

                    //------------------------------------------------------------------
                    // Observacao Importante quanto as coordenadas calculadas abaixo:
                    //------------------------------------------------------------------
                    // a funcao DlgWidthPanel() retorna o dobro do valor da area do
                    // painel, sendo assim este deve ser dividido por 2 antes da
                    // subtracao e redivisao por 2 para a centralizacao.
                    //------------------------------------------------------------------
                    nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 196) /2
                    nEspLin  := 3
               Else
                       nEspLarg := 0
                      nEspLin  := 0
                    DEFINE MSDIALOG oDlg FROM  15,6 TO 219,404 TITLE OemToAnsi(STR0001) PIXEL
                Endif
                oDlg:lMaximized := .F.
                oPanel := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,20,20)
                oPanel:Align := CONTROL_ALIGN_ALLCLIENT

                @  -1+nEspLin,001+nEspLarg TO 029+nEspLin,197+nEspLarg OF oPanel  PIXEL
                @ 033+nEspLin,001+nEspLarg TO 063+nEspLin,197+nEspLarg OF oPanel  PIXEL

                If lPanelFin
                    @ 067+nEspLin,001+nEspLarg TO 097+nEspLin,197+nEspLarg OF oPanel  PIXEL
                Else
                    @ 067+nEspLin,001+nEspLarg TO 100+nEspLin,131+nEspLarg OF oPanel  PIXEL
                Endif

                @ 006+nEspLin,009+nEspLarg say OemToAnsi(STR0009) 	SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,045+nEspLarg say OemToAnsi(STR0019) 	SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,081+nEspLarg say OemToAnsi(STR0011)    SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,115+nEspLarg SAY OemToAnsi(STR0021)    SIZE 53, 07 OF oPanel PIXEL
                @ 040+nEspLin,009+nEspLarg SAY OemToAnsi(STR0012)		SIZE 23, 07 OF oPanel PIXEL  //"Banco"    ,
                @ 040+nEspLin,035+nEspLarg SAY OemToAnsi(STR0013)		SIZE 32, 07 OF oPanel PIXEL  //"Agˆncia"
                @ 040+nEspLin,069+nEspLarg SAY OemToAnsi(STR0014)		SIZE 32, 07 OF oPanel PIXEL  //"Conta"
                @ 040+nEspLin,119+nEspLarg SAY OemToAnsi(STR0015)		SIZE 53, 07 OF oPanel PIXEL  //"Contrato"
                @ 073+nEspLin,009+nEspLarg SAY OemToAnsi(STR0016)		SIZE 23, 07 OF oPanel PIXEL  //"Moeda"
                @ 073+nEspLin,058+nEspLarg SAY OemToAnsi(STR0026)		SIZE 50, 07 OF oPanel PIXEL  //"Situacao"

                @ 015+nEspLin,009+nEspLarg MSGET cNumBor         		SIZE 32, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,045+nEspLarg MSGET cForne    				SIZE 32, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,081+nEspLarg MSGET cLoja  			   	SIZE 23, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,110+nEspLarg MSGET cTit					SIZE 80, 10 OF oPanel PIXEL WHEN .F.
                @ 049+nEspLin,009+nEspLarg MSGET oBcoCod VAR cPort590	SIZE 10, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_PORTADO')
                @ 049+nEspLin,035+nEspLarg MSGET oBcoAge VAR cAgen590	SIZE 26, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_AGEDEP')
                @ 049+nEspLin,069+nEspLarg MSGET oBcoCnt VAR cConta590	SIZE 42, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_NUMCON')
                @ 049+nEspLin,119+nEspLarg MSGET cContrato       		SIZE 42, 10 OF oPanel PIXEL Picture "@S3" WHEN .F.
                @ 082+nEspLin,009+nEspLarg COMBOBOX oCbx VAR cVar ITEMS aMoedas SIZE 46, 50 OF oPanel PIXEL WHEN .F.
                @ 082+nEspLin,058+nEspLarg MSGET cSituaca        		SIZE 65, 10 OF oPanel PIXEL WHEN .F.

                If lPanelFin //Chamado pelo Painel Financeiro
                    oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1])
                    ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg,;
                    {||nOpc:=1,oDlg:End()},;
                    {||oDlg:End()})
                Else
                    DEFINE SBUTTON FROM 70, 142 TYPE 1 ENABLE OF oPanel ACTION ( nOpc:=1,oDlg:End() )
                    DEFINE SBUTTON FROM 70, 170 TYPE 2 ENABLE OF oPanel ACTION oDlg:End()
                    ACTIVATE MSDIALOG oDlg CENTERED
                EndIf
            Else
                nOpc := 1
            Endif

            If nOpc != 1
                Exit
            EndIf

            //Permite ou nao a inclusao do titulo no bordero.
            If lF590IOK .and. !(ExecBlock("F590IOK",.F.,.F.,{"R",cNumBor}))
                Exit
            Endif

            If nOpc == 1

                If !lAutomato .And. __lBCOApi .And. lBorApi
                    MSGINFO(STR0128, STR0127)  // Registro Online -- "O borderô está parametrizado para registro online. O status de transmissão deste título pode ser acompanhado pelo monitor de boletos no Novo Gestor Financeiro."
                EndIf
                // Faz tratamento de dias de retencao bancaria somente se pais Brasil
                If cPaisLoc == "BRA"

                    // Para o Brasil, apresenta somente os titulos cuja moeda e' a mesma do banco em caso de banco em moeda estrangeira
                    If FXMultSld()
                        If !F240VldMd(cPort590,cAgen590,cConta590,SE1->E1_MOEDA)
                            Exit
                        Endif
                    Endif

                    aAreaSA6 := SA6->(GetArea())
                    SA6->( dbSetOrder(1) )
                    SA6->( MsSeek( xFilial("SA6") + cPort590 + cAgen590 + cConta590 ) )
                    dBase := SE1->E1_VENCREA
                    nDias := SA6->A6_RETENCA
                    // Se considera retencao bancaria, atualiza vencimento com a retencao
                    If nDias > 0 .And. !(FN022SITCB(SEA->EA_SITUACA)[3])	// Situacao 2 e 7, usar rotina de Transferencia
                        // Com a pergunta considera retencao bancaria igual a "Sim", calcula a nova data de
                        // vencimento real considerando os dias de retencao do banco.
                        If cPaisLoc $ "BRA" .And. mv_par04 == 1
                            aFeriados := RetFeriados()

                            While nDias > 0
                                dBase++
                                If Ascan(aFeriados,Dtos(dBase)) == 0 .And. Dow(dBase) <> 1 .And. Dow(dBase) <> 7
                                       nDias--
                                EndIf
                            EndDo

                            // Atualiza data vencto real c/retenção Bancária
                            RecLock("SE1")
                            SE1->E1_VENCREA := dBase
                            SE1->(MsUnLock())
                            // Atualiza tambem os registros agregados
                            F060AtuAgre()
                        EndIf
                        RestArea(aAreaSA6)
                    EndIf
                EndIf

                BEGIN TRANSACTION

                RecLock("SEA",.T. )
                    EA_FILIAL	:= __cFilBor
                    EA_PORTADO	:= cPort590
                    EA_AGEDEP	:= cAgen590
                    EA_NUMCON	:= cConta590
                    EA_NUMBOR	:= cNumBor
                    EA_DATABOR	:= dDataBase
                    EA_PREFIXO	:= SE1->E1_PREFIXO
                    EA_NUM		:= SE1->E1_NUM
                    EA_PARCELA	:= SE1->E1_PARCELA
                    EA_TIPO		:= SE1->E1_TIPO
                    EA_SITUANT	:= cSituAnt
                    EA_SITUACA	:= cSituAtu
                    EA_CART		:= "R"
                    EA_FILORIG  := SE1->E1_FILORIG
                    EA_ORIGEM	:= "FINA590S"
                    If l590Versao
                        EA_VERSAO  := "0001"
                    Endif
                    IF __lBCOApi
                        EA_BORAPI  := If(lBorApi, 'S', 'N')
                        EA_SUBCTA  := cSubCta060
                        EA_ESPECIE := cEspec060
                    EndIf
                MsUnlock()
                FKCOMMIT()

                cAgencAnt := SE1->E1_AGEDEP
                cBancoAnt := SE1->E1_PORTADO
                cContaAnt := SE1->E1_CONTA

                dbSelectArea( "SE1" )
                RecLock("SE1")
                Replace E1_NUMBOR  With cNumBor
                Replace E1_PORTADO With cPort590
                Replace E1_AGEDEP  With cAgen590
                Replace E1_CONTA   With cConta590
                Replace E1_DATABOR With dDataBase
                Replace E1_SITUACA With SEA->EA_SITUACA
                MsUnlock( )
                FKCOMMIT()

                AAdd(aCTB, SE1->E1_SALDO)	//[01] = FWI_VALOR (Valor da Movimentação)
                AAdd(aCTB, 0) 				//[02] = FWI_DESCON (Desconto da Movimentação)
                AAdd(aCTB, 0) 				//[03] = FWI_IOF (Valor do IOF)
                AAdd(aCTB, cSituAtu) 		//[04] = FWI_SITUAC (Carteira Atual)
                AAdd(aCTB, cSituAnt) 		//[05] = FWI_SITANT (Carteira Anterior)
                AAdd(aCTB, cBancoAnt) 		//[06] = FWI_BCOANT (Portador Anterior)
                AAdd(aCTB, cAgencAnt) 		//[07] = FWI_AGEANT (Agência Anterior)
                AAdd(aCTB, cContaAnt) 		//[08] = FWI_CONANT (Número da Conta Anterior)
                AAdd(aCTB, cContrato) 		//[09] = FWI_CONTRA (Contrato)
                AAdd(aCTB, "") 				//[10] = FWI_IDMOV (Id da Movimentação na FK5)
                AAdd(aCTB, cNumBor) 		//[11] = FWI_NUMBOR (Número do Borderô)

                //numbor
                aAlt := {}
                aadd( aAlt,{ STR0076,'','','',STR0077 + Alltrim(cNumBor) })   //'MANUTENÇÃO BORDERÔ CR' ,  Efetuada inclusão do Título a Receber no borderô CR
                //chamada da Função que cria o Histórico de Cobrança
                FinaCONC(aAlt)

                If lF590Inc
                    Execblock("F590INC",.F.,.F.,{"R",cNumBor})
                Endif

                F590Contb(.F., aCTB)  // Contabilizar inclusao dos titulos a receber

                //Chamada para a mensagem unica.
                If FWHasEAI("FINA055",.F.,,.T.) .And. AllTrim(SE1->E1_ORIGEM) == "FINI055"
                    FwIntegDef("FINA040B")
                Endif

                END TRANSACTION

            EndIf
            Exit
        EndDo
        SEA->(DbGoto(nRecSEA))
    Endif
    dbSelectArea( "SE1" )
    dbSetOrder(1)
EndIf

Return

//----------------------------------------------------------------------------------------------
/*/{Protheus.doc} Fa590Canc
Função para a retirada de um titulo de borderô

@author Mauricio Pequim Jr

@since  28/12/2017
@version 12
/*/
//----------------------------------------------------------------------------------------------
Function Fa590Canc(cAlias, nReg, nPosArotina, lAutomato)
Local lPanelFin 	:= IsPanelFin()
Local lTitOk 		:= .F.
Local cChave		:= ""
Local cLoja			:= ""
Local cForne		:= ""
Local cSituaca		:= ""
Local cTit			:= ""
Local cVar			:= ""
LOCAL aMoedas 		:= GetMoedas()
Local nOpc			:= 0
Local lF590Can		:= Existblock("F590CAN")
Local lF590COK		:= Existblock("F590COK")
Local aSemRet		:= {}
Local aVetores 		:= {}
Local aRetencao 	:= {}
Local lRecalcPCC	:= GetNewPar("MV_RC10925","2") == "1"
Local lIRPFBaixa	:= .F.
Local lCalcIssBx	:= .F.
Local aArea			:= GetArea()
Local nI			:= 0
Local aBaixa    	:= {}
Local nTotAdto   	:= 0
Local lBaixaAbat 	:=  .F.
Local nVlrBaixa  	:= 0
Local lBxCec     	:= .F.
Local lBxLiq		:= .F.
Local lTipBxCP   	:= .F.
Local lSigaloja		:= .F.
Local nPisSE5		:= 0
Local nCofSE5		:= 0
Local nCsllSE5		:= 0
Local lIRPJBaixa	:= .F.
Local lPccBxCr 		:= FPccBxCr() //Controla o Pis Cofins e Csll na baixa  (1-Retem PCC na Baixa ou 2-Retem PCC na Emissão(default) )
Local lTpJur		:= .F.
Local lBorFina061	:= .F.
Local nValSaldo 	:= 0
Local nSaldo    	:= 0
Local nRegSE1 		:= 0
Local nOrdSE1		:= 0
Local cPortador		:= ""
Local cAgeDep		:= ""
Local cConta		:= ""
Local aImpPCC		:= {{"PIS"},{"COF"},{"CSL"},{"IRF"},{"ISS"}}
Local cChaveTit		:= ""
Local cIdDoc		:= ""
Local cQuery		:= ""
Local cAliasFK		:= ""
Local lGeraPIS		:= .F.
Local lGeraCof		:= .F.
Local lGeraCSLL		:= .F.
Local lCartRec		:= .F.
Local aTitulos 		:= {}
Local nX			:= 0
Local lCNAB			:= FWIsInCallStack("fA430Ger") .Or. FWIsInCallStack("fA300Processa")
Local nVImpMt		:= 0
Local oBcoCod		:= NIL
Local oBcoAge		:= NIL
Local oBcoCnt		:= NIL
Local aCTB			:= {}
Local cAgencAnt		:= ""
Local cBancoAnt		:= ""
Local cContaAnt		:= ""
Local cSituAnt		:= ""
Local cSitPIX       := if(FindFunction("F022SITPIX"),F022SITPIX(),"")
Local lTitTemPIX 	:= FindFunction("TitTemPIX")
Local lCanImpPix    := .T.
Local dDtGerBor	    := CTOD("  /  /  ")	

Private aPar379		:= {}

DEFAULT lAutomato := .F.

__l241Canc   := Iif(__l241Canc == Nil, FindFunction("F241DtCanc"), __l241Canc)

If lCNAB // Processo de retirada do título do borderô pela FINA430 - Rejeitado
    nRadio := 2
    cNumbor := SE2->E2_NUMBOR
    lAutomato := .T.
Endif

If !lAutomato .and. IIf(nRadio==1,Empty(SE1->E1_NUMBOR),Empty(SE2->E2_NUMBOR))
   MsgStop(OemToAnsi(STR0020))//"Atencao!!! Este titulo nao tem Bordero,Verifique!!!")
   Return
EndIf

If cMVINSIRF == nil
    Ini590Var()
EndIf

If !lAutomato
    If nRadio == 2
        If cNumbor != SE2->E2_NUMBOR
            HELP(" " , 1 , "FA590MNTBORB")
            Return
        ElseIf SE2->E2_SALDO == 0
               HELP(" " , 1 , "FA590MNTBORS")
            Return
        EndIf
    Else
        If cNumbor != SE1->E1_NUMBOR
            HELP(" " , 1 , "FA590MNTBORB")
            Return
        ElseIf SE1->E1_SALDO == 0
               HELP(" " , 1 , "FA590MNTBORS")
            Return
        EndIf
    EndIf
Endif

If nRadio == 2
    cChave := cNumBor+SE2->E2_PREFIXO+SE2->E2_NUM+SE2->E2_PARCELA+SE2->E2_TIPO+SE2->E2_FORNECE+SE2->E2_LOJA
Else
    cChave := cNumBor+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO
    lCartRec := .T.
EndIf
if nradio == 1
    If !CtbValiDt(,dDatabase,,,,{"FIN002"},)
        Return
    EndIf
else
    If !CtbValiDt(,dDatabase,,,,{"FIN001"},)
        Return
    EndIf
endif

dbSelectArea( "SEA" )
SEA->(DbSetOrder(1))

If Fa590PesqB(cChave) .And. (lCartRec .Or. !Fa590ImpAg())
    If !Fa241Filho(.T.) .And. !lCartRec .and. !lAutomato
        Help(" ",1,"NODELETA",,STR0062, 4, 0)
        Return
    EndIf

    If __l241Canc .And. !F241DtCanc(dDataBase, SEA->EA_NUMBOR, SEA->EA_CART, SEA->EA_FILIAL, @dDtGerBor, Nil,.T.)        
        Help(" ",1,"FA590DTCAN",,STR0132 + SEA->EA_NUMBOR + STR0133 + DTOC(dDtGerBor) + STR0134,1,1) //"Não é permitido excluir o título do borderô "### " com data anterior à " ### "."
        Return
    EndIf

    lTitOk := .T.
    nOpc   := 0
    
    If nRadio == 1
        cVar := aMoedas[SE1->E1_MOEDA]
    ELSE
        cVar := aMoedas[SE2->E2_MOEDA]
    Endif
    
    If SEA->EA_CART == "P".and.nRadio == 2
        cTit := SE2->E2_PREFIXO+"-"+SE2->E2_NUM+"-"+SE2->E2_PARCELA+"-"+SE2->E2_TIPO
        nOpc := 1

        f241LRatIR(.T.) // Limpa objeto __oRatIRF IR Progressivo

        If cPaisLoc == "BRA"
            lIRPFBaixa := Posicione("SA2", 1, xfilial("SA2") + SE2->E2_FORNECE + SE2->E2_LOJA, "A2_CALCIRF") == "2"
        EndIf
        
        If !lAutomato
            nOpc := 0
            
            If lPanelFin //Chamado pelo Painel Financeiro
                oPanelDados := FinWindow:GetVisPanel()
                oPanelDados:FreeChildren()
                aDim := DLGinPANEL(oPanelDados)
                DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0,0 To 0,0 PIXEL STYLE nOR( WS_VISIBLE, WS_POPUP )
                //-------------------------------------------------------------------
                // Observacao Importante quanto as coordenadas calculadas abaixo:
                //-------------------------------------------------------------------
                // A funcao DlgWidthPanel() retorna o dobro do valor da area do
                // painel, sendo assim este deve ser dividido por 2 antes da
                // subtracao e redivisao por 2 para a centralizacao.
                //-------------------------------------------------------------------
                nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 196) /2
                nEspLin  := 3
            Else
                nEspLarg := 0
                nEspLin  := 0
                DEFINE MSDIALOG oDlg FROM  15,6 TO 219,404 TITLE OemToAnsi(STR0027) PIXEL
            Endif

            oDlg:lMaximized := .F.
            oPanel := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,20,20)
            oPanel:Align := CONTROL_ALIGN_ALLCLIENT

            @ 001+nEspLin, 001+nEspLarg TO 029+nEspLin, 199+nEspLarg OF oPanel  PIXEL
            @ 033+nEspLin, 001+nEspLarg TO 063+nEspLin, 199+nEspLarg OF oPanel  PIXEL

            If lPanelFin
                @ 067+nEspLin,001+nEspLarg TO 097+nEspLin,199+nEspLarg OF oPanel  PIXEL
            Else
                @ 067+nEspLin,001+nEspLarg TO 097+nEspLin,131+nEspLarg OF oPanel  PIXEL
            Endif

            @ 006+nEspLin,009+nEspLarg say OemToAnsi(STR0009)				SIZE 23, 07 OF oPanel PIXEL
            @ 006+nEspLin,045+nEspLarg say OemToAnsi(STR0010)				SIZE 23, 07 OF oPanel PIXEL
            @ 006+nEspLin,081+nEspLarg say OemToAnsi(STR0011)				SIZE 23, 07 OF oPanel PIXEL
            @ 006+nEspLin,115+nEspLarg SAY OemToAnsi(STR0021)				SIZE 53, 07 OF oPanel PIXEL
            @ 040+nEspLin,009+nEspLarg SAY OemToAnsi(STR0012)				SIZE 23, 07 OF oPanel PIXEL  //"Banco"    ,
            @ 040+nEspLin,035+nEspLarg SAY OemToAnsi(STR0013)				SIZE 32, 07 OF oPanel PIXEL  //"Agˆncia"
            @ 073+nEspLin,009+nEspLarg SAY OemToAnsi(STR0016)				SIZE 23, 07 OF oPanel PIXEL  //"Moeda"
            @ 073+nEspLin,063+nEspLarg SAY OemToAnsi(STR0017)				SIZE 22, 07 OF oPanel PIXEL  //"Modelo"
            @ 073+nEspLin,097+nEspLarg SAY OemToAnsi(STR0018)				SIZE 32, 07 OF oPanel PIXEL  //"Tipo Pagto"
            @ 015+nEspLin,009+nEspLarg MSGET SEA->EA_NUMBOR					SIZE 32, 10 OF oPanel PIXEL WHEN .F.
            @ 015+nEspLin,045+nEspLarg MSGET SEA->EA_FORNECE				SIZE 23, 10 OF oPanel PIXEL WHEN .F.
            @ 015+nEspLin,081+nEspLarg MSGET SEA->EA_LOJA					SIZE 32, 10 OF oPanel PIXEL WHEN .F.
            @ 015+nEspLin,115+nEspLarg MSGET cTit							SIZE 80, 10 OF oDlg PIXEL WHEN .F.
            @ 049+nEspLin,009+nEspLarg MSGET oBcoCod VAR SEA->EA_PORTADO 	SIZE 10, 10 OF oPanel PIXEL Picture "@!"  WHEN .F. OBFUSCATED RetGlbLGPD('EA_PORTADO')
            @ 049+nEspLin,035+nEspLarg MSGET oBcoAge VAR SEA->EA_AGEDEP		SIZE 26, 10 OF oPanel PIXEL Picture "@!"  WHEN .F. OBFUSCATED RetGlbLGPD('EA_AGEDEP')
            @ 049+nEspLin,069+nEspLarg MSGET oBcoCnt VAR SEA->EA_NUMCON		SIZE 42, 10 OF oPanel PIXEL Picture "@!"  WHEN .F. OBFUSCATED RetGlbLGPD('EA_NUMCON')
            @ 082+nEspLin,009+nEspLarg COMBOBOX oCbx VAR cVar ITEMS aMoedas SIZE 46, 13 OF oPanel PIXEL WHEN .F.
            @ 082+nEspLin,063+nEspLarg MSGET SEA->EA_MODELO					SIZE 18, 10 OF oPanel PIXEL Picture "@!"  WHEN .F.
            @ 082+nEspLin,097+nEspLarg MSGET SEA->EA_TIPOPAG				SIZE 18, 10 OF oPanel PIXEL Picture "@!"  WHEN .F.

            If lPanelFin //Chamado pelo Painel Financeiro
                oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1])
                ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg, {||nOpc := 1, oDlg:End()}, {||oDlg:End()})
            Else
                DEFINE SBUTTON FROM 85, 142 TYPE 1 ENABLE OF oPanel ACTION (nOpc := 1, oDlg:End())
                DEFINE SBUTTON FROM 85, 170 TYPE 2 ENABLE OF oPanel ACTION oDlg:End()
                ACTIVATE MSDIALOG oDlg CENTERED
            Endif
        Endif
        
        If nOpc != 1
            dbSetOrder(1)
            If lPanelFin
                dbSelectarea(FinWindow:cAliasFile)
                FinVisual(FinWindow:cAliasFile,FinWindow,(FinWindow:cAliasFile)->(Recno()),.T.)
            Endif
            Return
        EndIF
        
        //Permite ou nao a retirada do titulo do bordero
        If lF590COK .and. !(ExecBlock("F590COK",.F.,.F.,{"P",cNumBor}))
            dbSetOrder(1)
            If lPanelFin
                dbSelectarea(FinWindow:cAliasFile)
                FinVisual(FinWindow:cAliasFile,FinWindow,(FinWindow:cAliasFile)->(Recno()),.T.)
            Endif
            Return
        Endif
        
        BEGIN TRANSACTION
            cForne   := SEA->EA_FORNECE
            cLoja    := SEA->EA_LOJA
            nRecSE2  := SE2->(recno())
            aTitulos := {}
            
            //Borderos gerados em versao anterior
            If !Empty(SEA->EA_FILORIG) .And. (FWModeAccess("SE2", 3) == "E")
                cChave := SEA->(EA_FILORIG+EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO+EA_FORNECE)+cLoja
            Else
                cChave := xFilial("SE2")+SEA->(EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO+EA_FORNECE)+cLoja
            Endif
            
            If FunName() == "FINA590"
                SE2->(DbGoto(nRecSE2))
            Else
                dbSelectArea("SE2")
                SE2->(dbSetOrder(1))
                SE2->(MsSeek(cChave))
                nRecSE2 := SE2->(recno())
            EndIf
            
            SA2->(DbSetOrder(1))
            SED->(DbSetOrder(1))
            SA2->(MSSeek(xFilial("SA2", SE2->E2_FILORIG)+SE2->(E2_FORNECE+E2_LOJA)))                    
            SED->(MSSeek(xFilial("SED", SE2->E2_FILORIG)+SE2->E2_NATUREZ))
            lIRPFBaixa := !__lIrfMR .And. cPaisLoc == "BRA" .And. SA2->A2_CALCIRF == "2" .And. SED->ED_CALCIRF == "S"
            lCalcIssBx := Iif(!__lIssMR , IsIssBx("P"), .F.)
            
            //Adiciono título atual para exclusão das possíveis retenções
            Aadd(aRetencao, {SE2->(Recno()), SE2->E2_FORNECE, SE2->E2_LOJA, DTOS(SE2->E2_VENCREA), .T., __lImpMotRet, {}})
            
            //Carrega vetor com os titulos a pagar do bordero posicionado
            If F590NoImp("SE2", SE2->(Recno()))	// Valida se bordero possui retencao de imposto
                aVetores  := Fa590CarBor(.F., .F., cForne, cLoja, .T., SEA->EA_FILIAL)
                aSemRet   := aVetores[2] //2a dimensao: Array com os Recnos (SE2) dos titulos pendente retencao.
                nOpcUsu   := 1			 // Cancela bordero sem validar impostos
            Else
                aVetores   := Fa590CarBor(.T., .T., cForne, cLoja, .F., SEA->EA_FILIAL)
                
                If !lIRPFBaixa
                    aSemRet := aVetores[2] //2a dimensao: Array com os Recnos (SE2) dos titulos pendente retencao.
                EndIf
                
                //Caso se IRPF na Baixa procede a exclusão, caso contrário utiliza a funcao verificadora de retencao de fornecedores em outro bordero.
                nOpcUsu := Fa590RetBd(aRetencao, aVetores[2], cNumBor, "P", lAutomato)
            EndIf
            
            If nOpcUsu != 2
                If nOpcUsu == 1 .Or. nOpcUsu == 4
                    aAdd(aTitulos, nRecSE2)
                Else
                    For ni := 1 to len(aRetencao)
                        aAdd(aTitulos, aRetencao[ni][1])
                    Next ni
                    
                    For ni := 1 to len(aSemRet)
                        aAdd(aTitulos, aSemRet[ni][1])
                    Next ni
                EndIf
                
                For nX := 1 to Len(aTitulos)
                    SE2->(DbGoto(aTitulos[nX]))
                    aSemRet := aVetores[2] //2a dimensao: Array com os Recnos (SE2) dos titulos pendente retencao.
                    
                    dbSelectArea("SE2")
                    SE2->(dbSetOrder(1))
                    SE2->(DbGoto(aTitulos[nX]))
                    
                    //Executa a delecao do tx's gerados pelo bordero (FINA241)
                    If Len(aRetencao) > 0
                        F590DelImp(aRetencao)
                    Endif
                    
                    If FunName() == "FINA590"
                        SE2->(DbGoto(nRecSE2))
                    Else
                        dbSelectArea("SE2")
                        SE2->(dbSetOrder(1))
                        SE2->(MsSeek(cChave))
                        nRecSE2 := SE2->(recno())
                    EndIf
                    
                    If SE2->E2_SALDO > 0
                        dbSelectArea("SE2")
                        RecLock("SE2",.F.)
                        SE2->E2_NUMBOR  := Space(TamSX3("E2_NUMBOR")[1])
                        SE2->E2_PORTADO := ""
                        SE2->E2_NUMBCO  := ""
                        SE2->E2_BAIXA   := CTOD ("//")
                        
                        If cPaisLoc == "BRA"
                            SE2->E2_DTBORDE := CTOD ("//")
                        Endif
                        
                        SE2->(MsUnlock())
                        
                        //Excluir vínculo do título com o borderô de pagamento
                        SEA->(RecLock("SEA",.F.,.T.))
                        SEA->(dbDelete())
                        SEA->(MsUnlock( ))
                        
                        //Exclui os Tx's de IRPJ - Modo antigo
                        If !__lIrfMR .and. lIRPFBaixa
                            F241ExIRPF(Nil, Nil, Nil, .F., .F., Nil, cNumBor)
                        EndIf
                        
                        //Exclui titulos PCC gerados no bordero - Modo antigo
                        If !__lPccMR .and. lPccBaixa
                            F241CanImp(Nil, Nil, Nil, Nil, Nil, Nil, cNumBor)
                            
                            If Len(aRetencao) > 0 .And. SE2->E2_SALDO > SE2->E2_VALOR .And. (SE2->(E2_SALDO-E2_VALOR) == SE2->(E2_PIS+E2_COFINS+E2_CSLL))
                                SE2->(RecLock( "SE2" ))
                                SE2->E2_SALDO := SE2->E2_VALOR
                                SE2->E2_BAIXA := CTOD("//")
                                SE2->(MsUnlock())
                            EndIf
                        Endif
                        
                        //Exclui os Tx's de ISS - Modo Antigo
                        If !__lIssMR .And. lCalcIssBx .And. SE2->E2_ISS != 0
                            F241DelIS(SE2->(Recno()), SE2->E2_ISS, Nil, Nil, Nil, .F., .F., Nil, cNumBor)
                        EndIf
                        
                        //Abro o SE2 com outro Alias se o mesmo não estiver aberto
                        If Select("__SE2") == 0
                            ChkFile("SE2",.F.,"__SE2")
                        Else
                            DbSelectArea("__SE2")
                        EndIf
                        
                        If SE2->(E2_PIS+E2_COFINS+E2_CSLL+E2_IRRF+E2_ISS) > 0
                            //Deleto os registros FK3 de impostos retidos em outros titulos
                            //Dados da tabela auxiliar com o código do título a pagar
                            cChaveTit := xFilial("SE2")+"|"+SE2->E2_PREFIXO+"|"+SE2->E2_NUM+"|"+SE2->E2_PARCELA+"|"+SE2->E2_TIPO+"|"+SE2->E2_FORNECE+"|"+SE2->E2_LOJA
                            cIdDoc    := FINGRVFK7( "SE2", cChaveTit )
                            FINGFK3BOR(3, "FK7", cIdDoc, aImpPCC)
                        Endif
                        
                        //Deleto o numero do bordero em todos os titulos de abatimentos
                        __SE2->(dbSetOrder(1))
                        __SE2->(MsSeek(xFilial("SE2")+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA)))
                        
                        While !__SE2->(Eof()) .And. __SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA) == (xFilial("SE2")+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA))
                            If __SE2->E2_TIPO $ MVABATIM .And. __SE2->E2_FORNECE == SE2->E2_FORNECE
                                RecLock("__SE2")
                                __SE2->E2_NUMBOR  := Space(TamSX3("E2_NUMBOR")[1])
                                __SE2->E2_PORTADO := ""
                                __SE2->E2_NUMBCO  := ""
                                __SE2->E2_BAIXA   := CTOD ("//")
                                
                                If cPaisLoc == "BRA"
                                    __SE2->E2_DTBORDE := CTOD ("//")
                                Endif
                                
                                __SE2->(MsUnlock())
                            Endif
                            
                            __SE2->(dbSkip())
                        Enddo
                        
                        If lF590Can
                            Execblock("F590CAN",.F.,.F.,{"P",cNumBor})			//Pagar
                        Endif
                    Endif
                    
                    If !__lPccMR
                        TitCalcPCC(SE2->E2_NATUREZ, SE2->E2_FORNECE, @lGeraPis, @lGeraCof, @lGeraCsLL)
                    Endif
                Next nX
                
                dbSelectArea("SE2")
            Endif
            
            //Configurador de tributos, Geração das retenções após a retirada do titulo do borderô
            If __lImpMotRet
                cFilAtu := cFilAnt
                
                For nX := 1 to Len(aRetencao)
                    //Não considero o titulo que está sendo retirado do borderô para recalculo dos impostos
                    If nRecSE2 != aRetencao[nX][1]
                        SE2->(dbGoto(aRetencao[nX][1]))
                        cFilAnt := Iif(Empty(SE2->E2_FILORIG), cFilAnt, SE2->E2_FILORIG)
                        
                        //Tem retenção pelo configurador de tributos, grava a baixa da retenção
                        If aRetencao[nX,6]
                            F241GrvIMR(dDataBord, "FINA241",.F.)
                        EndIF
                    Endif
                Next
                
                cFilAnt := cFilAtu
            Endif
            
            If !__lPccMR .and. lRecalcPcc .And. (lGeraPIS .or. lGeraCof .or. lGeraCSLL)
                //1 - Mês do periodo de verificacao
                //2 - Ano do periodo de verificacao
                //3 - Fornecedor De
                //4 - Fornecedor Até
                //5 - Mostra tela Contabilizacao (NAO, para este caso)
                SaveInter()
                aPar379 := {}
                aPar379 := {Month(dDatabase), Year(dDatabase), cForne, cForne, 2}
                Fina379()
                RestInter()
                pergunte("FIN590",.F.)
            Endif
        END TRANSACTION
    ElseIf SEA->EA_CART == "R".and.nRadio == 1
        If FN022SITCB(SEA->EA_SITUACA)[3]	//Situacao de cobrança descontada
            Help (" ",1,"NOBRDDES",,STR0029+STR0030+STR0031,1,0)//	"Os borderoes de cobranca descontada ou descontada
            //	caucionada nao sofrerao manutencao
            //	nesta rotina. Utilizar rotina de Transferencia"
        Else
            // Monta a tabela de situações de Titulos
            dbSelectArea("SE1")
            cTit  	 := SE1->E1_PREFIXO+"-"+SE1->E1_NUM+"-"+SE1->E1_PARCELA+"-"+SE1->E1_TIPO
            cSituaca := FN022SITCB(SEA->EA_SITUACA)[9]		//descricao da situacao de cobranca
            cVar 	 := aMoedas[SE1->E1_MOEDA]
            nOpc 	 := 0
            nRegSE1 := SE1->(Recno())


            If !lAutomato
                If lPanelFin //Chamado pelo Painel Financeiro
                    oPanelDados := FinWindow:GetVisPanel()
                    oPanelDados:FreeChildren()
                    aDim := DLGinPANEL(oPanelDados)
                    DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0,0 To 0,0 PIXEL STYLE nOR( WS_VISIBLE, WS_POPUP )
                    //------------------------------------------------------------------
                    // Observacao Importante quanto as coordenadas calculadas abaixo:
                    //------------------------------------------------------------------
                    // a funcao DlgWidthPanel() retorna o dobro do valor da area do
                    // painel, sendo assim este deve ser dividido por 2 antes da
                    // subtracao e redivisao por 2 para a centralizacao.
                    //------------------------------------------------------------------
                    nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 196) /2
                    nEspLin  := 3
                Else
                    nEspLarg := 0
                    nEspLin  := 0
                    DEFINE MSDIALOG oDlg FROM  15,6 TO 219,404 TITLE OemToAnsi(STR0028) PIXEL
                Endif
                oDlg:lMaximized := .F.
                oPanel := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,20,20)
                oPanel:Align := CONTROL_ALIGN_ALLCLIENT

                @  -1+nEspLin,001+nEspLarg TO 029+nEspLin,197+nEspLarg OF oPanel  PIXEL
                @ 033+nEspLin,001+nEspLarg TO 063+nEspLin,197+nEspLarg OF oPanel  PIXEL
                If lPanelFin
                    @ 067+nEspLin,001+nEspLarg TO 097+nEspLin,197+nEspLarg OF oPanel  PIXEL
                Else
                    @ 067+nEspLin,001+nEspLarg TO 100+nEspLin,131+nEspLarg OF oPanel  PIXEL
                Endif

                @ 006+nEspLin,009+nEspLarg say OemToAnsi(STR0009) 	SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,045+nEspLarg say OemToAnsi(STR0019) 	SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,081+nEspLarg say OemToAnsi(STR0011)   SIZE 23, 07 OF oPanel PIXEL
                @ 006+nEspLin,115+nEspLarg SAY OemToAnsi(STR0021)   SIZE 53, 07 OF oPanel PIXEL
                @ 040+nEspLin,009+nEspLarg SAY OemToAnsi(STR0012)	SIZE 23, 07 OF oPanel PIXEL  //"Banco"    ,
                @ 040+nEspLin,035+nEspLarg SAY OemToAnsi(STR0013)	SIZE 32, 07 OF oPanel PIXEL  //"Agˆncia"
                @ 040+nEspLin,069+nEspLarg SAY OemToAnsi(STR0014)	SIZE 32, 07 OF oPanel PIXEL  //"Conta"
                @ 073+nEspLin,009+nEspLarg SAY OemToAnsi(STR0016)	SIZE 23, 07 OF oPanel PIXEL  //"Moeda"
                @ 073+nEspLin,058+nEspLarg SAY OemToAnsi(STR0026)	SIZE 50, 07 OF oPanel PIXEL  //"Situacao"

                @ 015+nEspLin,009+nEspLarg MSGET SEA->EA_NUMBOR     			SIZE 32, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,045+nEspLarg MSGET SE1->E1_CLIENTE   				SIZE 32, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,081+nEspLarg MSGET SE1->E1_LOJA  					SIZE 23, 10 OF oPanel PIXEL WHEN .F.
                @ 015+nEspLin,110+nEspLarg MSGET cTit							SIZE 80, 10 OF oPanel PIXEL WHEN .F.
                @ 049+nEspLin,009+nEspLarg MSGET oBcoCod VAR SEA->EA_PORTADO    SIZE 10, 10 OF oPanel PIXEL Picture "@!"  WHEN .F. OBFUSCATED RetGlbLGPD('EA_PORTADO')
                @ 049+nEspLin,035+nEspLarg MSGET oBcoAge VAR SEA->EA_AGEDEP     SIZE 26, 10 OF oPanel PIXEL Picture "@!"  WHEN .F. OBFUSCATED RetGlbLGPD('EA_AGEDEP')
                @ 049+nEspLin,069+nEspLarg MSGET oBcoCnt VAR SEA->EA_NUMCON  	SIZE 42, 10 OF oPanel PIXEL Picture "@!"  WHEN .F. OBFUSCATED RetGlbLGPD('EA_NUMCON')
                @ 082+nEspLin,009+nEspLarg COMBOBOX oCbx VAR cVar ITEMS aMoedas SIZE 46, 50 OF oPanel PIXEL WHEN .F.
                @ 082+nEspLin,058+nEspLarg MSGET cSituaca        				SIZE 65, 10 OF oPanel PIXEL WHEN .F.


                If lPanelFin //Chamado pelo Painel Financeiro
                    oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1])
                    ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg,;
                    {||nOpc:=1,oDlg:End()},;
                    {||oDlg:End()})
                Else
                    DEFINE SBUTTON FROM 70, 142 TYPE 1 ENABLE OF oPanel ACTION ( nOpc:=1,oDlg:End() )
                    DEFINE SBUTTON FROM 70, 170 TYPE 2 ENABLE OF oPanel ACTION oDlg:End()

                    ACTIVATE MSDIALOG oDlg CENTERED
                Endif

                // API de bancos, confirmação se transmitido
                If __lBCOApi .And. 'S' $ SEA->EA_BORAPI .And. 'S' $ SEA->EA_TRANSF
                    If !F713YesNo(1)
                        nOpc := 0
                    EndIf
                EndIf
            Else
                nOpc := 1
            Endif

            BEGIN TRANSACTION

            If nOpc != 1
                dbSetOrder(1)
                If lPanelFin
                    dbSelectarea(FinWindow:cAliasFile)
                    FinVisual(FinWindow:cAliasFile,FinWindow,(FinWindow:cAliasFile)->(Recno()),.T.)
                Endif
                DisarmTransaction()
                Return
            EndIF

            If __lMotorRet
                F590CalImp( SE1->E1_NATUREZ, SE1->E1_CLIENTE, SE1->E1_LOJA, SE1->E1_FILORIG, SE1->E1_VALOR, dDataBase, SE1->E1_TIPO )
                lPccBxCr 	:= ( __lPccMR .And. __lPccBxMR ) .Or. ( !__lPccMR .And. lPccBxCr )
                lIRPJBaixa	:= ( __lIrfMR .And. __lIrfBxMR ) .Or.	( !__lIrfMR .And. lIRPJBaixa )
            EndIf

            //Permite ou nao a retirada do titulo do bordero
            If lF590COK .and. !(ExecBlock("F590COK",.F.,.F.,{"R",cNumBor}))
                dbSetOrder(1)
                If lPanelFin
                    dbSelectarea(FinWindow:cAliasFile)
                    FinVisual(FinWindow:cAliasFile,FinWindow,(FinWindow:cAliasFile)->(Recno()),.T.)
                Endif
                DisarmTransaction()
                Return
            Endif

            cLoja := Iif ( Empty (SEA->EA_LOJA) , "" , SEA->EA_LOJA )
            cChave := SEA->EA_PREFIXO+SEA->EA_NUM+SEA->EA_PARCELA+SEA->EA_TIPO+SEA->EA_FORNECE+cLoja
            dbSelectArea("SE1")
            dbSetOrder(1)
            MsSeek(cFilial + cChave)
            cBordImp		:= ""

            //Somente gerar IRRF e PCC na baixa para pessoa juridica.
            lTpJur	:=	.T.
            SA1->(Dbsetorder(1))
            If SA1->(Dbseek(xFilial("SA1")+SE1->(E1_CLIENTE+E1_LOJA)))
                If SA1->A1_PESSOA <> "J"
                    lTpJur	:=	.F.
                Endif
            Endif

            nOpcUsu	   := 1
			lCanImpPix := If(__lFPIXatv,!PIXIsActiv(),.T.)

            If !F590NoImp("SE1",SE1->(Recno()))	// Valida se bordero possui retencao de imposto
                aVetores := F590CrImp(cNumBor,SE1->E1_CLIENTE,SE1->E1_LOJA)
                aRetencao := aVetores[1]
                aSemRet   := aVetores[2]

                // Verifica se é IRPF pela Baixa para guardar os títulos que devem ter retenção
                If cPaisLoc == "BRA"
                    lIRPJBaixa :=	SA1->A1_IRBAX == "1" .And. !(SA1->A1_ENTID $ "00_02_10") .And. SA1->A1_PESSOA == "J" .And.;
                                    Posicione("SED",1,xfilial("SED") + SE1->(E1_NATUREZ),"ED_CALCIRF") = "S"

                    If lCanImpPix
                        nOpcUsu  := Fa590RetBd(aVetores[1],aVetores[2],cNumBor, "R", lAutomato)
                    Endif
                EndIf
            Endif

            If nOpcUsu != 2
                If nOpcUsu == 1 .or. nOpcUsu == 4
                    aAdd(aTitulos, nRegSE1)
                Else
                    For ni := 1 to len(aRetencao)
                        aAdd(aTitulos, aRetencao[ni][1])
                    Next ni
                    For ni := 1 to len(aSemRet)
                        aAdd(aTitulos, aSemRet[ni][1])
                    Next ni
                EndIf
                For nX := 1 to Len(aTitulos)

                    SE1->(DbGoto(aTitulos[nX]))

                    lBorFina061	:=	.F.
                    cAgencAnt	:= SE1->E1_AGEDEP
                    cBancoAnt	:= SE1->E1_PORTADO
                    cContaAnt	:= SE1->E1_CONTA
                    cSituAnt	:= SE1->E1_SITUACA

                    //Procura pela baixas dependendo do Tipodoc passado como parametro
                    dbSelectArea("SE5")
                    SE5->(dbSetOrder(2))
                    If SE5->(DBSeek(xFilial("SE5")+"BA"+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO))
                        While !SE5->(Eof()) .and. SE5->E5_FILIAL==xFilial("SE5") .And. ;
                            SE5->E5_TIPODOC+SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO== ("BA"+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO)

                               If SE5->E5_SITUACA == "C"
                                SE5->(dbSkip())
                                Loop
                            Endif

                             If (("FINA061" $ Subst(SE5->E5_HISTOR,1,7)) .And. SE5->E5_MOTBX $ "PCC_IRF") .Or. (__lMotorRet .And. SE5->E5_MOTBX $ "IMR")
                                lBorFina061	:=	.T.
                                Exit
                            Endif
                              SE5->(Dbskip())
                        Enddo
                    Endif

                    nValSaldo	:= 0
                    nSaldo		:=	0

                    If lTpJur .And. lBorFina061 .And. (lPccBxCR .Or. lIRPJBaixa .Or. __lImpMT)
                          //Criando bordero de recebimento de imposto.
                        cBordImp		:= cNumBor

                        nValSaldo += SE1->E1_SALDO
                        nSaldo    := SE1->E1_SALDO

                        dBaixa		:=	CriaVar("E1_BAIXA")
                        nTxMoeda 	:=	If(SE1->E1_MOEDA > 1, If(SE1->E1_TXMOEDA > 0, SE1->E1_TXMOEDA,RecMoeda(dBaixa,SE1->E1_MOEDA)),0)
                        nParciais	:= 0
                        nPisSE5	:=	nCofSE5	:=	nCsllSE5	  := 0
                        aBaixa		:= {}
                        aBaixaSE5	:=	{}

                        If (SE1->E1_VALOR > SE1->E1_SALDO) .And. Empty(SE1->E1_TIPOLIQ)	//Verificar valores de baixas existentes no titulo.
                            lTipBxCP		:=	lRaRtImp
                            aBaixa		 	:= 	Sel070Baixa( "VL /V2 /BA /RA /CP /LJ /" + MV_CRNEG, SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO,;
                                                                            @nTotAdto, @lBaixaAbat, SE1->E1_CLIENTE, SE1->E1_LOJA, @nVlrBaixa, , @lBxCec, @lBxLiq ,@lSigaloja, @lTipBxCP)
                            For nI := 1 To Len(aBaixaSE5)
                                nParciais += aBaixaSE5[nI][8]

                                If lPccBxCR .And. lRaRtImp
                                   nParciais += aBaixaSE5[nI][18]+aBaixaSE5[nI][19]+aBaixaSE5[nI][20]+aBaixaSE5[nI][30]// somar impostos PCC
                                Endif

                                nPisSE5	+= aBaixaSE5[nI][18]
                                nCofSE5	+= aBaixaSE5[nI][19]
                                nCsllSE5 += aBaixaSE5[nI][20]
                            Next

                            nParciais += nTotAdto
                            If SE1->E1_SDDECRE <> SE1->E1_DECRESC //Soma valor de decrescimo em baixas parciais, para evitar diferencas entre valor original e valor recebido
                                nParciais += ( SE1->E1_DECRESC - SE1->E1_SDDECRE )
                            EndIf
                        Else
                            nParciais 	:= SE1->E1_VALOR-SE1->E1_SALDO
                        Endif

                        If "RA" $ SE1->E1_TIPO
                            nParciais 	:= SE1->E1_VALOR-SE1->E1_SALDO
                        Endif

                        nIrrfFina061		:=	nPisFina061	:=	nCofFina061	:=	nCslFina061	:= 	0

                        nRegSE1	:=	SE1->(Recno())
                        nOrdSE1	:= SE1->(IndexOrd())
                        /*
                        */
                        cChaveTit := xFilial("SE1") + "|" + SE1->E1_PREFIXO + "|" + SE1->E1_NUM     + "|" + SE1->E1_PARCELA + "|" + ;
                                                                      SE1->E1_TIPO    + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA
                        cIdDoc := FINGRVFK7( "SE1", cChaveTit )

                        If lPccBxCR
                            cQuery := "select FK1_IDFK1,FK4_IDFK4,FK3_IDORIG,FK3_IMPOS,FK3_VALOR,FK7_CHAVE from "
                            cQuery += RetSQLName("FK1") + " FK1, " + RetSQLName("FK4") + " FK4, " + RetSQLName("FK3") + " FK3, " + RetSQLName("FK7") + " FK7"
                            cQuery += " where FK1_IDDOC = '" + cIdDoc + "'"
                            cQuery += " and FK1_TPDOC = 'BA'"
                            cquery += " and FK1_MOTBX = 'PCC'"
                            cquery += " and FK1_DOC = '" + cNumBor + "'"
                            cQuery += " and FK1_FILIAL = '" + xFilial("FK1") + "'"
                            cQuery += " and FK1.D_E_L_E_T_ = ' '"
                            cQuery += " and FK4_IDORIG = FK1_IDFK1"
                            cQuery += " and FK4_FILIAL = '" + xFilial("FK4") + "'"
                            cQuery += " and FK4_IMPOS in ('CSL','COF','PIS')"
                            cQuery += " and FK4.D_E_L_E_T_= ' '"
                            cQuery += " and FK3_IDRET = FK4_IDFK4"
                            cQuery += " and FK3_IDORIG <> FK4_IDORIG"
                            cQuery += " and FK3_FILIAL = '" + xFilial("FK3") + "'"
                            cQuery += " and FK3.D_E_L_E_T_ = ' '"
                            cQuery += " and FK7_IDDOC = FK3_IDORIG"
                            cQuery += " and FK7_FILIAL = '" + xFilial("FK7") + "'"
                            cQuery += " and FK7.D_E_L_E_T_ = ' '"
                            cQuery := ChangeQuery(cQuery)
                            cAliasFK := GetNextAlias()
                            aRetencao := {}
                            DbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),cAliasFK,.F.,.T.)
                            While !((cAliasFK)->(Eof()))
                                nI := Ascan(aRetencao,{|titulo| titulo[1] == (cAliasFK)->FK3_IDORIG})
                                If nI == 0
                                    Aadd(aRetencao,{(cAliasFK)->FK3_IDORIG,StrTran((cAliasFK)->FK7_CHAVE,"|",""),{0,0,0}})
                                    nI := Len(aRetencao)
                                Endif
                                Do Case
                                    Case (cAliasFK)->FK3_IMPOS == "PIS"
                                        aRetencao[nI,3,1] := (cAliasFK)->FK3_VALOR
                                    Case (cAliasFK)->FK3_IMPOS == "COF"
                                        aRetencao[nI,3,2] := (cAliasFK)->FK3_VALOR
                                    Case (cAliasFK)->FK3_IMPOS == "CSL"
                                        aRetencao[nI,3,3] := (cAliasFK)->FK3_VALOR
                                EndCase
                                (cAliasFK)->(DbSkip())
                            Enddo
                            DbSelectArea(cAliasFK)
                            DbCloseArea()
                            DbSelectArea("SE1")
                        Endif
                        /*-*/

                        lPccBxCR   := if(lPccBxCR, lPccBxCR .And. lCanImpPix, .F. )
                        lIRPJBaixa := if(lIRPJBaixa, lIRPJBaixa .And. lCanImpPix, .F. )

                        if lCanImpPix

                            F061DelReg(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA,;
                                            lPccBxCR,lIRPJBaixa,SE1->(Recno()),nParciais,__lMotorRet,__lPccMR, __lIrfMR,__lImpMT, @nVImpMt)
                        EndIf

                        //Deleto os registros FK3 de impostos retidos em outros titulos
                        //Dados da tabela auxiliar com o código do título a pagar
                        If lCanImpPix
                            FNGFK3BCR(3,"FK7",cIdDoc,aImpPCC)
                        EndIf

                        SE1->(dbGoto(nRegSE1))

                        RecLock("SE1",.F.)
                        SE1->E1_NUMBOR   := ""
                        SE1->E1_PORTADO  := ""
                        SE1->E1_AGEDEP   := ""
                        SE1->E1_SITUACA  := "0"
                        SE1->E1_CONTRAT  := ""
                        SE1->E1_DATABOR  := Ctod(Space(8))
                        SE1->E1_MOVIMEN	 := Ctod(Space(8))
                        SE1->E1_CONTA	 := ""
                        SE1->E1_NUMBCO   := ""

                        // Com a pergunta considera retencao bancaria igual a "Sim", retorna a data de
                        // vencimento real sem os dias de retencao do banco.
                        If mv_par04 == 1
                            SE1->E1_VENCREA := DataValida(SE1->E1_VENCTO,.T.)
                        EndIf
                        SE1->E1_NUMBCO  := ""

                        If !(FN022SITCB(SEA->EA_SITUACA)[3])	//Situacao de cobranca diferente de descontada
                            SE1->E1_VALLIQ	:=	0
                            SE1->E1_SALDO	+=	Iif(lPccBxCR,(nPisFina061 + nCslFina061 + nCofFina061),0) + Iif(lIRPJBaixa,nIrrfFina061,0) + nVImpMt
                        Endif

                        If SE1->E1_SALDO > 0
                            SE1->E1_STATUS  := "A"
                        Endif

                        SE1->( MsUnlock() )
                        nValSaldo += SE1->E1_SALDO
                        // Atualiza tambem os registros agregados
                        F061AtuAgre()

                        dbSelectArea("SA1")
                        If (dbSeek(cFilial+SE1->E1_CLIENTE+SE1->E1_LOJA))
                            //Situacao de cobranca com protesto
                            If (FN022SITCB(SEA->EA_SITUACA)[4]) .And. (SA1->A1_TITPROT >= 0)
                                Reclock("SA1")
                                SA1->A1_TITPROT := A1_TITPROT-1
                                If SA1->A1_TITPROT == 0
                                    SA1->A1_DTULTIT := cToD("")
                                Endif
                                MsUnlock()
                            Endif
                        Endif

                        cPortador:= SEA->EA_PORTADO
                        cAgeDep	:= SEA->EA_AGEDEP
                        cConta	:= SEA->EA_NUMCON
                        if Len(aTitulos) > 1
                            cChaveSE1 :=  SE1->(E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO )
                            SEA->(dbSetOrder(2))
                            SEA->(dbSeek(xFilial("SEA") + padr(cNumbor,TamSx3("EA_NUMBOR")[1]) + "R" + cChaveSe1))
                            SEA->(dbSetOrder(1))
                        EndIf
                        RecLock("SEA",.F.,.T.)
                        dbDelete()
                        MsUnlock()

                        If lF590Can
                            Execblock("F590CAN",.F.,.F.,{"R",cNumBor})		// Receber
                        Endif

                        If lCanImpPix
                            F061TitBx(cNumBor, cPortador, cAgeDep, cConta) //Excluir registros criados neste bordero referente a baixas realizadas em titulos.
                        EndIf
                        /*
                        */
                        If !Empty(aRetencao)
                            For nI := 1 To Len(aRetencao)
                                If SE1->(DbSeek(aRetencao[nI,2]))
                                    RecLock("SE1",.F.)
                                    Replace SE1->E1_SABTPIS With aRetencao[nI,3,1]
                                    Replace SE1->E1_SABTCOF	With aRetencao[nI,3,2]
                                    Replace SE1->E1_SABTCSL	With aRetencao[nI,3,3]
                                    SE1->(MsUnLock())
                                Endif
                            Next
                        Endif
                        /*-*/
                    Else
                        If SE1->E1_SALDO > 0
                            RecLock( "SE1" )
                            Replace E1_NUMBOR With Space(6)
                            Replace E1_DATABOR With CTOD("//")
                            If Alltrim(Upper(FunName())) <> "FINA089" .and. !( AllTrim(SE1->E1_ORIGEM) $ 'L|S|T' .or. SE1->E1_IDLAN > 0)
                                Replace E1_PORTADO With ""
                                Replace E1_AGEDEP  With ""
                                Replace E1_CONTA   With ""
                                Replace E1_NUMBCO  With ""
                            EndIf
                            //caso o titulo seja PIX voltar para carteira pix
                            If lTitTemPIX .and. TitTemPIX() .And. !Empty(cSitPIX)
                                Replace E1_SITUACA With cSitPIX
                            Else
                                Replace E1_SITUACA With "0"
                            EndIf
                            MsUnlock()
                            // Com a pergunta considera retencao bancaria igual a "Sim", retorna a data de
                            // vencimento real sem os dias de retencao do banco.
                            If cPaisLoc $ "BRA" .And. mv_par04 == 1
                                RecLock( "SE1" )
                                    SE1->E1_VENCREA := DataValida(SE1->E1_VENCTO,.T.)
                                SE1->( MsUnlock() )
                                // Atualiza tambem os registros agregados
                                F060AtuAgre()
                            EndIf
                            RecLock("SEA",.F.,.T.)
                                dbDelete()
                            MsUnlock()

                            If lCanImpPix .and. SE1->(E1_PIS+E1_COFINS+E1_CSLL+E1_IRRF+E1_ISS) > 0
                                //Deleto os registros FK3 de impostos retidos em outros titulos
                                cChaveTit := xFilial("SE1")+"|"+SE1->E1_PREFIXO+"|"+SE1->E1_NUM+"|"+SE1->E1_PARCELA+"|"+SE1->E1_TIPO+"|"+SE1->E1_CLIENTE+"|"+SE1->E1_LOJA
                                cIdDoc := FINGRVFK7("SE1", cChaveTit )
                                FINGFK3BOR(3,"FK7",cIdDoc,aImpPCC)
                            Endif

                            If lF590Can
                                Execblock("F590CAN",.F.,.F.,{"R",cNumBor})		// Receber
                            Endif

                            //Chamada para a mensagem unica.
                            If FWHasEAI("FINA055",.F.,,.T.) .And. AllTrim(SE1->E1_ORIGEM) == "FINI055"
                                FwIntegDef("FINA040B")
                            Endif
                        Endif
                        dbSelectArea("SE1")
                    Endif

                    AAdd(aCTB, SE1->E1_SALDO)	//[01] = FWI_VALOR (Valor da Movimentação)
                    AAdd(aCTB, 0) 				//[02] = FWI_DESCON (Desconto da Movimentação)
                    AAdd(aCTB, 0) 				//[03] = FWI_IOF (Valor do IOF)
                    AAdd(aCTB, SE1->E1_SITUACA)	//[04] = FWI_SITUAC (Carteira Atual)
                    AAdd(aCTB, cSituAnt) 		//[05] = FWI_SITANT (Carteira Anterior)
                    AAdd(aCTB, cBancoAnt) 		//[06] = FWI_BCOANT (Portador Anterior)
                    AAdd(aCTB, cAgencAnt) 		//[07] = FWI_AGEANT (Agência Anterior)
                    AAdd(aCTB, cContaAnt) 		//[08] = FWI_CONANT (Número da Conta Anterior)
                    AAdd(aCTB, "")				//[09] = FWI_CONTRA (Contrato)
                    AAdd(aCTB, "") 				//[10] = FWI_IDMOV (Id da Movimentação na FK5)
                    AAdd(aCTB, cNumBor)			//[11] = FWI_NUMBOR (Número do Borderô)

                    F590Contb(.T., aCTB)  // Contabilizar inclusao dos titulos a receber
                Next Nx

                //Limpa ambiente
                PixDelStmt()

            Endif
            END TRANSACTION
        Endif
    Endif
Endif

dbSelectarea ("SEA")
SEA->(DbSetOrder(1))

If lPanelFin .And. lTitOk
    dbSelectarea(FinWindow:cAliasFile)
    FinVisual(FinWindow:cAliasFile,FinWindow,(FinWindow:cAliasFile)->(Recno()),.T.)
Endif

RestArea(aArea)
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} FA590NumC
Verifica se o numero do bordero informado existe

@author Fernando Dourado
@since 14/02/2001
@version P11
/*/
//-------------------------------------------------------------------
Function FA590NumC(lF590Bord)
    Local lRetorna   := .F.
    Local aSaveArea  := GetArea()
    Local cCart      := "P"
    
    Default lF590Bord := .F.
    
    If (lF590Bord .And. Finwindow:cAliasFile == "SE1") .Or. (!lF590Bord .And. nRadio == 1)
        cCart := "R"
    Endif
    
    If !Empty(cNumBor)
        dbSelectArea("SEA")
        SEA->(dbSetOrder(2))
        
        If (lRetorna := SEA->(dbSeek(cFilial + PADR(cNumBor, TamSX3("EA_NUMBOR")[1]) + cCart, .T.)))
            __cFilBor := XFILIAL("SEA",cFilAnt)
            __cChvSEA := SEA->(EA_FILIAL+EA_NUMBOR+EA_CART)
            lBoRApi   := __lBCOApi .And. "S" $ SEA->EA_BORAPI
            If (__lBCOApi)
                cSubCta060 := SEA->EA_SUBCTA
                cEspec060  := SEA->EA_ESPECIE
            EndIf
        Endif
    Endif
    
    //Ponto de Entrada para validacao sobre a selecao do bordero para manutencao.
    If ExistBlock( "FA590BOR" )
        lRetorna := ExecBlock( "FA590BOR", .F., .F., { cNumBor, cCart } )
    EndIf
    
    If !lRetorna
        Help(" ",1,"F590NOBORD")
    EndIf
    
    RestArea(aSaveArea)
    FWFreeArray(aSaveArea)
Return lRetorna

/*/{Protheus.doc} F590Contb
Contabilizacao de contas a receber.

@author 	Fernando Dourado
@since 		14/02/2001
@param		lCancel, logical, caso seja verdadeiro é um cancelamento
@param		aCTB, array, array de contabilização
@version 	P11
/*/
Function F590Contb(lCancel As Logical, aCTB As Array)

    Local cArquivo		As Character
    Local cPadrao		As Character

    Local lAglut		As Logical
    Local lCtbOfflin	As Logical
    Local lDigita		As Logical
    Local lPadrao		As Logical
    Local lVldCtbOff	As Logical

    Local nTotal		As Numeric

    Private cLote		As Character

    Default lCancel		:= .F.
    Default aCTB		:= {}

    cArquivo	:= ""
    cPadrao		:= IIf(lCancel, "554", Fa060Pad(SE1->E1_SITUACA))
    lAglut		:= IIf(MV_PAR02 == 1 , .T., .F.) // Aglutina Lanctos
    lCtbOfflin	:= .F.
    lDigita		:= IIf(MV_PAR01 == 1 , .T., .F.) // Mostra Lancto Padrao
    lPadrao		:= VerPadrao(cPadrao)
    lVldCtbOff 	:= FindFunction("F060VldCtb") .And. F060VldCtb()
    nTotal		:= 0

    LoteCont("FIN")

    //Se existe contabilização offline e o parâmetro for igual a não OU não encontre o LP
    If lVldCtbOff
        If MV_PAR05 == 2
            lCtbOfflin := .T.
        EndIf
    ElseIf MV_PAR03 == 2
        lCtbOfflin := .T.
    EndIf

    //[01] = FWI_LA ('S' ou 'N')
    //[02] = FWI_LANPAD (Lançamento Padrão utilizado)
    //[03] = FWI_VALOR (Valor da Movimentação)
    //[04] = FWI_DESCON (Desconto da Movimentação)
    //[05] = FWI_IOF (Valor do IOF)
    //[06] = FWI_SITUAC (Carteira Atual)
    //[07] = FWI_SITANT (Carteira Anterior)
    //[08] = FWI_BCOANT (Portador Anterior)
    //[09] = FWI_AGEANT (Agência Anterior)
    //[10] = FWI_CONANT (Número da Conta Anterior)
    //[11] = FWI_CONTRA (Contrato)
    //[12] = FWI_IDMOV (Id da Movimentação na FK5)
    //[13] = FWI_NUMBOR (Número do Borderô)
    If lVldCtbOff .And. !(Empty(aCTB))
        FinAGrvFWI({IIf(!lCtbOfflin .And. lPadrao, "S", "N"), cPadrao, aCTB[1], aCTB[2], aCTB[3], aCTB[4], aCTB[5],;
            aCTB[6], aCTB[7], aCTB[8], aCTB[9], aCTB[10], aCTB[11]})
    EndIf

    If lPadrao .And. !lCtbOfflin
        nHdlPrv := HeadProva(cLote, "FINA590", SubStr(cUsuario, 7, 6), @cArquivo)
        nTotal	+= DetProva(nHdlPrv, cPadrao, "FINA590", cLote)
        cA100Incl(cArquivo, nHdlPrv, 3, cLote, lDigita, lAglut)
    EndIf

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} FA590Legen
Legenda

@author Fernando Dourado
@since 14/02/2001
@version P11
/*/
//-------------------------------------------------------------------
Function FA590Legen(cAlias,nReg)
    Local uRetorno := .T.
    Local aLegenda := {}
    
    aLegenda := {{"ENABLE",     STR0023},;	      //Titulo em Carteira"
                {"DISABLE",    STR0024},;	      //Titulo Transferido"
                {"BR_AZUL"	,	STR0025	},;	      //Titulo Baixado"
                {"BR_AMARELO",	STR0032+cNumBor}} //Titulo do bordero"
    
    If Type("lBoRApi") != "L"
        Private lBoRApi := .F.
    EndIf
    
    //Validação para uso do documento habil (SIAFI)
    If cAlias == "SE2" .and. FinUsaDH()
        Aadd(aLegenda,{"BR_VIOLETA", STR0131})
    Endif
    
    //API de bancos
    If cAlias == "SE1" .and. __lBCOApi
        Aadd(aLegenda,{"BR_LARANJA", STR0032 + cNumBor + " " + STR0129}) // "pendente de registro online"
        Aadd(aLegenda,{"BR_MARRON_OCEAN", STR0032 + cNumBor + " " + STR0130}) // "registrado online"
    Endif
    
    If nReg = Nil	// Chamada direta da funcao onde nao passa, via menu Recno eh passado
        dbSelectArea(cAlias)
        If cAlias == "SE1"
            uRetorno := {}
            Aadd(uRetorno,{ 'Empty(E1_PORTADO) .AND. E1_SALDO>0'  , 'ENABLE' }) // Em Carteira
            Aadd(uRetorno,{ '!Empty(E1_PORTADO).and. E1_SALDO>0 .and. E1_NUMBOR != cNumBor' , 'DISABLE'})	// Transferido
            Aadd(uRetorno,{ '!lBorApi .And. !Empty(E1_PORTADO).and. E1_SALDO>0 .and. E1_NUMBOR == cNumBor' , 'BR_AMARELO'}) // Titulo  do Bordero
            Aadd(uRetorno,{ 'E1_SALDO=0' , 'BR_AZUL'}) 	// Titulo Baixado
            If __lBCOApi
                Aadd(uRetorno,{ 'lBorApi .And. F713VldTit(.F., E1_FILIAL, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO, E1_NUMBOR)'  , 'BR_MARRON_OCEAN' }) // "registrado online"
                Aadd(uRetorno,{ 'lBorApi .And. !F713VldTit(.F., E1_FILIAL, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO, E1_NUMBOR)'  , 'BR_LARANJA' }) // "pendente de registro online"
            EndIf
        Else
            uRetorno := {}

            //Validação para uso do documento habil (SIAFI)

            If FinUsaDH()
                Aadd(uRetorno, { 'ROUND(E2_SALDO,2) > 0 .And. E2_TEMDH == "1" '	, aLegenda[Len(aLegenda)][1] } ) //"Titulo relacionado ao Documento hábil"
            Endif

            Aadd(uRetorno,{ 'Empty(E2_NUMBOR) .AND. E2_SALDO>0'  , 'ENABLE' }) // Em Carteira
            Aadd(uRetorno,{ '!Empty(E2_NUMBOR).and. E2_SALDO>0 .and. E2_NUMBOR != cNumBor' , 'DISABLE'}) 	// Transferido
            Aadd(uRetorno,{ '!Empty(E2_NUMBOR).and. E2_SALDO>0 .and. E2_NUMBOR == cNumBor' , 'BR_AMARELO'})	 // Titulo  do Bordero
            Aadd(uRetorno,{ 'E2_SALDO=0' , 'BR_AZUL'})	// Titulo Baixado
        Endif
    Else
        BrwLegenda(cCadastro,STR0022,aLegenda) //"Legenda"
    Endif
Return uRetorno

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa590CarBor
Efetua a carga da matriz com os titulos existentes no bordero de
pagamentos gerados a partir do Fina241

@author Nilton Pereira
@since 22/03/2005
@version P11
/*/
//-------------------------------------------------------------------
Function Fa590CarBor(lCalcImp, lCalcRet, cForne, cLoja, lTodos, cFilBord)
    Local aRetencao  := {}
    Local aVetores	 := {}
    Local aSemRet	 := {}    
    Local lIRPFBaixa := .F.
    Local lLojaAtu   := GetNewPar("MV_LJ10925", "1" ) == "1"
    Local lTemImpMR	 := .F.
    Local lAddRetenc := .F.
    Local cNextKey	 := ""
    Local cChave	 := ""
    Local nRecSEA	 := 0
    Local aAreaAtu   := {}
    Local aAreaSE2   := {}
    Local aAreaSEA	 := {}
    Local aAreaSA2	 := {}
    
    Default lCalcRet 	:= .F.
    Default lTodos 		:= .F.
    
    //Verifico se o titulo a ser inserido no borderô não possui retenções
    If F590NoImp("SE2", SE2->(Recno()))
        lCalcImp := .F.
    EndIf
    
    //Tem impostos configurados via motor de retenção para o titulo que está sendo incluso no borderô
    lTemImpMR := __lImpMotRet
    aAreaAtu  := GetArea()    
    aAreaSEA  := SEA->(GetArea())    
    nRecSEA   := SEA->(Recno())
    
    SEA->(dbSetOrder(2))    
    If SEA->(DbSeek(xFilial("SEA", cFilBord) + cNumBor + "P" )) //Carteira Pagar
        aAreaSE2 := SE2->(GetArea())
        aAreaSA2 := SA2->(GetArea())
        
        SE2->(dbSetOrder(1))
        SA2->(DbSetOrder(1))
        cNumBord := SEA->EA_NUMBOR
        
        While SEA->(!Eof()) .And. SEA->EA_NUMBOR == cNumBor .And. SEA->EA_CART == "P"
            If AllTrim(SEA->EA_FORNECE) != AllTrim(cForne)
                SEA->(DbSkip())
                Loop
            EndIf
            
            //Exlui os impostos apenas do título posicionado
            If !Empty(cChave) .And. Empty(cNextKey)
                cNextKey := SEA->(EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO+EA_FORNECE)+cLoja
            EndIf
            
            //Verifica se deve processar o recalculo de impostos para todas as lojas do fornecedor ou somente a loja do titulo selecionado
            If (!lLojaAtu .Or. (SEA->EA_LOJA == cLoja))
                cChave := SEA->(EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO+EA_FORNECE+EA_LOJA)
                
                If SE2->(DbSeek(xFilial("SE2", SE2->E2_FILORIG) + cChave))                
                    SA2->(DbSeek(xFilial("SA2", SE2->E2_FILORIG) + cForne + SEA->EA_LOJA))
                    //Função que seleciona as baixas a cancelar
                    __lPccMR   := .F.
                    __lIrfMR   := .F.
                    __lIssMR   := .F.
                    lAddRetenc := .F.
                    
                    If SE2->E2_SALDO > 0
                        //Verifico os impostos que estão configurados pelo Motor e se o titulo que está sendo incluido no borderô também tem
                        If __lMotorRet .and. lTemImpMR
                            aMotRet := F590ImpCnf("1", SE2->E2_FILORIG, SE2->E2_FORNECE, SE2->E2_LOJA, SE2->E2_NATUREZ)
                            
                            If __lImpMotRet
                                F241VImpMR(aRetencao, .T., cNumBor, __lIrfMR )
                            Endif
                        EndIf
                        
                        //Verifique se título teve retenção de IRPF na Baixa
                        If !__lIrfMR .And. cPaisLoc == "BRA"
                            lIRPFBaixa := SA2->A2_CALCIRF == "2" .And. Posicione("SED", 1, xFilial("SED", SE2->E2_FILORIG) + SE2->(E2_NATUREZ), "ED_CALCIRF") == "S"
                            
                            If ((SE2->E2_IRRF == 0 .And. SE2->E2_PRETIRF == "1") .Or. SE2->E2_VRETIRF > 0)
                                AAdd(aRetencao, {SE2->(Recno()), SE2->E2_FORNECE, SE2->E2_LOJA, DTOS(SE2->E2_VENCREA), __lIrfMR, .F.,{}})
                                lAddRetenc := .T.
                            Endif
                        EndIf
                        
                        If !__lPccMR .And. lPccBaixa .And. lCalcImp .And. SE2->(E2_PIS+E2_COFINS+E2_CSLL) > 0 
                            //Guardo os titulos que tiveram impostos da 10925 para verificar posteriormente a retencao dos mesmos
                            If lCalcRet
                                If SE2->E2_PRETPIS $ "4#3# " .And. (nRecSEA == SEA->(RECNO()) .Or. lTodos)   //Foi o titulo retentor de impostos.
                                    If !lAddRetenc
                                        Aadd(aRetencao, {SE2->(Recno()), SE2->E2_FORNECE, SE2->E2_LOJA, DTOS(SE2->E2_VENCREA), __lIrfMR, .F., {}})
                                        lAddRetenc := .T.
                                    Endif
                                ElseIf SE2->E2_PRETPIS $ "1#2" //Nao foi o titulo retentor de impostos.
                                    Aadd(aSemRet, {SE2->(Recno()), SE2->(E2_FORNECE+E2_LOJA), .T.})
                                Endif
                            ElseIf !lIRPFBaixa
                                Aadd(aRetencao, {SE2->(Recno()), SE2->E2_FORNECE, SE2->E2_LOJA, DTOS(SE2->E2_VENCREA), .T., .F., {}})
                            Endif
                        Endif
                    Endif
                EndIf
            Endif        
            
            SEA->(DbSkip())
        Enddo
        
        If lCalcImp .And. lCalcRet
            aVetores := {aRetencao, aSemRet}
        Else
            aVetores := {aRetencao, {}}
        Endif
        
        RestArea(aAreaSE2)
        RestArea(aAreaSA2)
        FwFreeArray(aAreaSE2)
        FwFreeArray(aAreaSA2)
    EndIf
    
    RestArea(aAreaSEA)
    RestArea(aAreaAtu)
    FwFreeArray(aAreaSEA)
    FwFreeArray(aAreaAtu)    
Return aVetores

//----------------------------------------------------------------------------------------------
/*/{Protheus.doc} F590Impost
Efetua o recalculo dos tx's a partir dos titulos ainda existentes no bordero de pagamentos

@author Nilton Pereira

@since  22/03/2005
@version 12
/*/
//----------------------------------------------------------------------------------------------
Static Function F590Impost(aRetencao, aFlagCTB)
    Local cArquivo   := ""
    Local lBaseSE2   := SuperGetMv("MV_BS10925",.T.,"1") == "1"
    Local cModTot    := GetNewPar( "MV_MT10925", "1" )
    Local cModRetPIS := GetNewPar( "MV_RT10925", "1" )
    
    //1-Cria NCC/NDF referente a diferenca de impostos entre emitidos (SE2) e retidos (SE5)
    //2-Nao Cria NCC/NDF, ou seja, controla a diferenca num proximo titulo
    //3-Nao Controla
    Local cNccRet    := SuperGetMv("MV_NCCRET",.F.,"1")
    Local nVlMinImp  := GetNewPar("MV_VL10925",5000)
    Local nX         := 0
    Local nValorISS  := 0
    Local lCalcIssBx :=	IF(!__lIssMR , IsIssBx("P"), .F. )
    Local cFilBckp   := cFilAnt
    Local lF590CTB   := ExistBlock("F590CTB")
    Local nRetMotor  := 0
    
    SaveInter() // Salvo variaveis publicas
    aSort(aRetencao, Nil, Nil, {|x,y| x[2] + x[3] < y[2] + x[3] .And. x[4] > y[4]})
    
    nTotal    := 0
    nHdlPrv   := 0
    lContabil := .T.
    
    If lF590CTB
        lContabil := ExecBlock("F590CTB",.F.,.F.)
    EndIf
    
    For nX := 1 to Len(aRetencao)
        SE2->(dbGoto(aRetencao[nX][1]))
        cFilAnt := Iif( Empty( SE2->E2_FILORIG ) , cFilBckp , SE2->E2_FILORIG )
        
        //Configurador de tributos
        nRetMotor := 0
        
        If aRetencao[nX,6] //Tem retenção pelo Configurador de tributos, faz a gravação da baixa do valor retido
            nRetMotor := F241GrvIMR(dDataBord,"FINA241", lContabil, @nTotal, @nHdlprv, @cArquivo, __lUsaFlag, @aFlagCTB)
        EndIF
        
        //PCC com IRRF na baixa - Regra antiga, Manutenção do tratamento para PCC na baixa do título                        ³
        F241Impost(lBaseSE2, cModTot, cModRetPis, cNccRet, nVlMinImp, @nTotal, @nHdlPrv, @cArquivo, lContabil, 0, Nil,;
                  @aFlagCtb, Len(aRetencao) == nX, nRetMotor, __lPCCMR, __lIrfMR)
        
        //Efetua baixa parcial do título caso o mesmo tenha retenção do ISS
        If lCalcIssBx .And. SE2->(E2_ISS+E2_VRETISS) > 0
            nValorIss := (SE2->E2_ISS - SE2->E2_VRETISS)
            F241BxISS(nValorIss, lContabil, aRetencao[nX,1], @nTotal, @nHdlprv)
        Endif
    Next
    
    cFilAnt := cFilBckp
    RestInter() // Restauro variaveis publicas
    
    If lContabil .And. nTotal > 0
        cA100Incl(cArquivo, nHdlPrv, 3 /*nOpcx*/, cLote, .T. /*lDigita*/, .F. /*lAglut*/, /*cOnLine*/, /*dData*/, /*dReproc*/, @aFlagCTB, /*aDadosProva*/, /*aDiario*/ )
        aFlagCTB := {}  // Limpa o coteudo apos a efetivacao do lancamento
    EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} F590DelImp
Efetua o descalculo dos tx's a partir dos titulos que existiam no
bordero de pagamentos

@author Nilton Pereira
@since 22/03/2005
@version P11
/*/
//-------------------------------------------------------------------
Static Function F590DelImp(aRetencao)
Local nTotal    := 0
Local nHdlPrv   := 0
Local lContabil := .T.
Local cArquivo  := ""
Local cSvPar01  := mv_par01
Local nX		:= 0
Local aFlagCTB	:= {}
Local aImpPCC	:= {{"PIS"},{"COF"},{"CSL"},{"ISS"}}
Local cChaveTit	:= ""
Local cIdDoc	:= ""
Local cFilBck	:= cFilAnt
Local aImpBx2Can := {}
Local nRegCanc   := SE2->(Recno())
Local lCalcIssBx := Iif(!__lIssMR , IsIssBx("P"), .F.)

dbSelectArea("SE2")
If Len(aRetencao[1]) > 4
    Aadd(aImpPCC,{"IRF"})
Endif

For nX := 1 to Len(aRetencao)
    SE2->(dbGoto(aRetencao[nX][1]))
    cFilAnt := Iif( Empty( SE2->E2_FILORIG ) , cFilBck , SE2->E2_FILORIG )
    mv_par01 := SE2->E2_NUMBOR

    //Cancelo as baixas de retenção dos impostos com configurações no motor
    //Esta função realiza o cancelamento de todas as baixas de uma vez
    If __lImpMotRet
        aImpBx2Can := aRetencao[nX,7]
        F241CanIMR(@nTotal,@nHdlPrv,@cArquivo,lContabil,__lUsaFlag,@aFlagCTB,MV_PAR01,aImpBx2Can)
    Endif

    If !__lIrfMR .and. Len(aRetencao[nX]) > 4
        //Exclui titulos IR gerados no bordero
        F241ExIRPF(@nTotal,@nHdlPrv,@cArquivo,lContabil,__lUsaFlag,@aFlagCTB,mv_par01)
    EndIf

    //Exclui titulos PCC gerados no bordero
    If !__lPccMR .and. nRegCanc == SE2->(Recno())
        F241CanImp(@nTotal,@nHdlPrv,@cArquivo,lContabil,__lUsaFlag,@aFlagCTB,mv_par01)
    Endif

    //Exclui títulos ISS gerados no bordero
    If !__lIssMR .And. lCalcIssBx .And. SE2->E2_ISS != 0
        F241DelIS(aRetencao[nX][1],SE2->E2_ISS,@nTotal,@nHdlPrv,@cArquivo,lContabil,__lUsaFlag,@aFlagCTB)
    EndIf

    If SE2->(E2_PIS+E2_COFINS+E2_CSLL+E2_IRRF+E2_ISS) > 0
        //Deleto os registros FK3 de impostos retidos em outros titulos
        //Dados da tabela auxiliar com o código do título a pagar
        cChaveTit := xFilial("SE2") + "|" + SE2->E2_PREFIXO + "|" + SE2->E2_NUM     + "|" + SE2->E2_PARCELA + "|" + SE2->E2_TIPO    + "|" + SE2->E2_FORNECE + "|" + SE2->E2_LOJA
        cIdDoc := FINGRVFK7( "SE2", cChaveTit )
        FINGFK3BOR(3,"FK7",cIdDoc,aImpPCC)
    Endif
Next nX

cFilAnt := cFilBck
mv_par01 := cSvPar01

If lContabil .and. nTotal > 0
    cA100Incl(cArquivo,nHdlPrv,3,cLote,.T.,.F.)
EndIf

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa590RetBd
Efetua verificacao se o titulo tem sua retencao no proprio bordero
que esta sendo cancelado

@author Nilton Pereira
@since 22/03/2005
@version P11
/*/
//-------------------------------------------------------------------
Function Fa590RetBd(aRetencao,aSemRet,cNumBor,cCart, lAutomato)

Local lRetencao := .F.
Local nOpcUsu   := 1
Local nOpcUsu2  := 0
Local nX		:= 0
Local nY		:= 0
Local lTodRetCr :=.F.

Default aRetencao 	:= {}
Default aSemRet		:= {}
Default cNumBor		:= ""
Default cCart		:= "P"
Default lAutomato	:= .F.

If cCart == "P"
    If Len(aRetencao) == 0
        lRetencao := .T.
    Else
        For nX := 1 To Len(aSemRet)
            If aSemRet[nX][3] // Verifica se eh o titulo selecionado na mBrowse
                For nY := 1 To Len(aRetencao)
                    If aSemRet[nX][2] == aRetencao[nY][2] + aRetencao[nY][3] // Compara se os fornecedores sao os mesmo (tit. retentor X tit. s/ retencao)
                        lRetencao := .T.
                    Else
                        aSemRet[nX][3] := .F.
                    Endif
                Next
            Endif
        Next
    Endif
Else
    If Len(aRetencao) == 0 	//aRetencao == 0 indica que não existem titulos com retenção contas a receber. Conceito função F590CrImp
        lRetencao := .F.
    Else
        lRetencao := .T. // Indica que existem titulos com retenção contas a receber
        If Len(aSemRet) == 0 //aSemRet igual a 0, indica que não existem registros sem retenção de impostos no bordero. Conceito função F590CrImp
            lTodRetCr := .T. // indica que todos os titulos do bordero possuem retençao
        EndIf
    Endif
Endif

If !lAutomato
    //Caso nao seja o bordero em que ocorreu a retencao, executa processo de alerta.
    //Isso ocorrera somente se o Array aRetencao estiver vazio (no bordero nao houve retencao).
    If lRetencao .And. ( Len(aSemRet) > 0 .Or. lTodRetCr )
        nOpcUsu	:= Aviso( STR0033,;                                //Cancelamento de Bordero
                        STR0034 + " ("+AllTrim(cNumBor)+") " +; //Alguns titulos deste bordero
                        STR0035 +;                                //tiveram retencao dos impostos da Lei 10925/1337
                        STR0036 +;                                //retidos em outros borderos. Execute
                        STR0037 +;                                //a impressao do relatorio para localizar onde esta
                        STR0038 + Chr(13) + Chr(10) +;           //ocorrendo a retencao.
                        STR0112 +; 						//"Ou selecione a Opção Cancelar Todos, para "
                        STR0113 +; //"cancelar todos os títulos em aberto deste cliente/fornecedor "
                        STR0114 +;//"gerados neste borderô."
                        STR0115 +;//"OK para cancelar somente o título selecionado. "
                        STR0116,{"Ok", STR0040, STR0041,STR0110})        //"Sair para abortar a operação. "### Sair ### Imprimir ##"Cancelar Todos"

        //Conforme selecao do usuário, efetua a impressão do relatorio, sai da rotina sem
        //excluir o bordero, ou consuma a delecao.
        //nOpcUsu = 1 // cancela somente o titulo do bordero
        //nOpcUsu = 2 // não cancela
        //nOpcUsu = 3 // imprime Rel
        //nOpcUsu = 4 // cancela todos titulos do bordero deste mesmo fornecedor
        If nOpcUsu == 3
            //Caso o usuario faca a opcao por imprimir os titulos, dentro da funcao
            //que executa a impressao, chamo novamente a tela de alerta para que o
            //usuario possa a partir daquele ponto decidir de deseja ou nao confirmar a exclusao.
            If cCart == "P"
                Fa241Rel(aSemRet,cNumBor,aRetencao,"P")
            Else
                Fa241Rel(aSemRet,cNumBor,aRetencao,"R")
            EndIf

            nOpcUsu2 := Aviso(STR0043,STR0042,{STR0111,STR0040,STR0110}) //Deseja processeguir com o cancelamento do bordero? ### "Cancelamento de Bordero" "Sim"##"Cancelar Todos"
            If nOpcUsu2 == 1
                nOpcUsu := 1 // cancela somente o titulo do bordero
            ElseIf nOpcUsu2 == 2
                nOpcUsu := 2 // não cancela
            ElseIf nOpcUsu2 == 3
                nOpcUsu := 4	// cancela todos
            EndIf
        Endif
    Endif
Else
    nOpcUsu := 4
Endif

Return nOpcUsu

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa590PesqB
Pesquisa Bordero em todas as filiais

@author Nilton Pereira
@since 22/03/2005
@version P11
/*/
//-------------------------------------------------------------------
Static Function Fa590PesqB(cChave)

Local cFilOld 	:= cFilAnt
Local cAliasAnt := Alias()
Local lRet 		:= .F.
Local nInc		:= 0
Local aSM0		:= AdmAbreSM0()
Local cFilOrig  := If( nRadio == 1, SE1->E1_FILORIG, SE2->E2_FILORIG)
Local cchaveaux:=""

// Se o SEA for exclusivo, pesquisa o bordero em todas as filiais
If !Empty(xFilial("SEA"))
    For nInc := 1 To Len( aSM0 )
        If aSM0[nInc][1] == cEmpAnt
            cFilAnt := aSM0[nInc][2]

            If SEA->( MsSeek( xFilial( "SEA" ) + cChave ) )
                if nradio =1
                    cchaveaux  := SEA->(EA_FILIAL+EA_NUMBOR+EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO)
                    While SEA->(!EOF() .AND. cchaveaux ==  xFilial( "SEA" ) + cChave )
                        If SEA->EA_FILORIG == cFilOrig
                            lRet := .T.
                            Exit
                        Endif
                        SEA->(dbSkip())
                    EndDo
                Else
                      cchaveaux  := SEA->(EA_FILIAL+EA_NUMBOR+EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO+EA_FORNECE+EA_LOJA)
                    While SEA->(!EOF() .AND. cchaveaux ==  xFilial( "SEA" ) + cChave )
                        If SEA->EA_FILORIG == cFilOrig
                            lRet := .T.
                            Exit
                        EndIf
                        SEA->(dbSkip())
                    EndDo
                Endif
            Endif
        EndIf
        If lRet
            Exit
        EndIf
    Next
Else
    lRet := SEA->(dbSeek(xFilial("SEA")+cChave))
Endif

// Restaura ambiente
cFilAnt := cFilOld
DbSelectArea(cAliasAnt)

Return lRet

//-------------------------------------------------------------------
/*{Protheus.doc} MenuDef
Utilizacao de menu Funcional

Parametros do array aRotina
1. Nome a aparecer no cabecalho
2. Nome da Rotina associada
3. Reservado
4. Tipo de Transação a ser efetuada:
    1 - Pesquisa e Posiciona em um Banco de Dados
    2 - Simplesmente Mostra os Campos
    3 - Inclui registros no Bancos de Dados
    4 - Altera o registro corrente
    5 - Remove o registro corrente do Banco de Dados
5. nIvel de acesso
6. Habilita Menu Funcional

@author Ana Paula N. Silva
@version P12
@since   29/11/2006
@return  Array com opcoes da rotina.
*/
//-------------------------------------------------------------------
Static Function MenuDef()
Local lPanelFin := IsPanelFin()
Local aRotina := {}

Local lReceber		:= ( Type("lRecTrue") != "U" )

If lReceber
    aRotina := {{STR0005, "AxPesqui"  , 0 , 1,,.F.},;  // "Pesquisar"
                {STR0006, "AxVisual"  , 0 , 2},;  // "Visualizar"
                {STR0007, "FA590Inclu", 0 , 3},;  // "Incluir"
                {STR0074, "IncBordImp", 0 , 4},;  // "Bord.Rec.Imp."
                {STR0008, "FA590Canc" , 0 , 4},;  // "Cancelar"
                {STR0022, "FA590Legen", 0 , 4, ,.F.} }  // "Legenda"

Else
     aRotina := {{STR0005, "AxPesqui"  , 0 , 1,,.F.},;  // "Pesquisar"
                {STR0006, "AxVisual"  , 0 , 2},;  // "Visualizar"
                {STR0007, "FA590Inclu", 0 , 4},;  // "Incluir"
                {STR0008, "FA590Canc" , 0 , 4},;  // "Cancelar"
                {STR0022, "FA590Legen", 0 , 4, ,.F.} }  // "Legenda"
Endif

If lPanelFin
   aAdd(aRotina,{STR0059, "F590Bord"  , 0 , 1,,.F.}) // Trocar Bordero
Endif

If ExistBlock("FA590AROT")
    aAux := ExecBlock("FA590AROT",.F.,.F.,{aRotina})
    If ValType(aAux) == "A"
        aRotina := aClone(aAux)
    EndIf
EndIf

Return(aRotina)

//-------------------------------------------------------------------
/*/{Protheus.doc} F590BuscAD
Rotina de verificacao de existencia de adiantamentos
para o titulo que esta sendo incluido no bordero

@author Karen Honda
@since 22/09/2017
@version P11
/*/
//-------------------------------------------------------------------
Function F590BuscAD( cAliasB, cFor, cLj,cCart )

Local aArBusca		:= GetArea()
Local cArea			:= ""
Local cMsg			:= ""
Local cAliasQry		:= ""
Local nRet			:= 0
Local cFilter		:= ""
Local nIndice		:= Iif(cCart == "R",2,6)
Local lRet			:= .T.
Local nTamSaldo		:= TamSx3("E1_SALDO")

Default cAliasB		:= ""
Default cFor		:= ""
Default cLj 		:= ""
Default cCart		:= ""

Private cAlias		:= cAliasB  //Necessario ser Private para a macro

cArea    := Iif(cCart="R","E1","E2")

If Select(cAlias) <= 0
    If cCart == "R"
        SomaAbat("","","","R")
    Else
        SomaAbat("","","","P")
    Endif
EndIf

If !Empty(cAlias) .And. !Empty(cFor) .And. !Empty(cLj) .and. !Empty(cCart)

    cFilter := (cAlias)->(DbFilter())

    dbSelectArea(cAlias)
    dbSetOrder(nIndice)
    If dbSeek( xFilial(cAlias)+cFor+cLj )

        If cCart == "R"
            cQuery := "SELECT E1_FILIAL, E1_TIPO,E1_CLIENTE,E1_LOJA,E1_SALDO FROM "
            cQuery += RetSqlName("SE1")
            cQuery += " WHERE E1_FILIAL = '" + xFilial("SE1") + "' "
            cQuery += " AND E1_CLIENTE = '" + cFor + "' "
            cQuery += " AND E1_LOJA = '" + cLj + "' "
            cQuery += " AND E1_TIPO IN ('" +MV_CRNEG+ "','"+MVRECANT+"' )"
            cQuery += " AND E1_SALDO > 0 " // Somente verifica titulo com saldo
            cQuery += " AND D_E_L_E_T_ = ' ' "

            cAliasQry := GetNextAlias()
            cQuery := ChangeQuery(cQuery)
            dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasQry , .F., .T.)

            TCSetField(cAliasQry, "E1_SALDO", "N", nTamSaldo[1], nTamSaldo[2])

            DbSelectArea(cAliasQry)

            While !(cAliasQry)->(Eof()) .And. ( xFilial(cAlias)+cFor+cLj == (cAliasQry)->(E1_FILIAL+E1_CLIENTE+E1_LOJA) )
                // Adiantamento
                If (cAliasQry)->E1_TIPO $ MVPAGANT+"/"+MVRECANT
                    cMsg := STR0045 //"O Cliente para este titulo possui "
                    cMsg += STR0047  //"Adiantamento."
                    nRet := 1
                Endif
                // Devolucao
                If (cAliasQry)->E1_TIPO $ MV_CPNEG+"/"+MV_CRNEG
                    cMsg := STR0045 //"O Cliente para este titulo possui "
                    cMsg += STR0048 //"Devolucao."
                    nRet := 2
                Endif

                If nRet <> 0
                    cMsg += chr(13)+chr(10)
                    cMsg += STR0044  //"Deseja mesmo assim seleciona-lo ?"
                    If MsgYesNo( cMsg )
                        lRet := .T.
                    Else
                        lRet := .F.
                    Endif
                    Exit
                Endif

                DbSkip()
            EndDo

        Else
            cQuery := "SELECT E2_FILIAL, E2_TIPO,E2_FORNECE,E2_LOJA,E2_SALDO FROM "
            cQuery += RetSqlName("SE2")
            cQuery += " WHERE E2_FILIAL = '" + xFilial("SE2") + "' "
            cQuery += " AND E2_FORNECE = '" + cFor + "' "
            cQuery += " AND E2_LOJA = '" + cLj + "' "
            cQuery += " AND E2_TIPO IN " + FormatIn(MV_CPNEG + "|" +MVPAGANT,"|" )
            cQuery += " AND E2_SALDO > 0 "  // Somente verifica titulo com saldo
            cQuery += " AND D_E_L_E_T_ = ' ' "

            cAliasQry := GetNextAlias()
            cQuery := ChangeQuery(cQuery)
            dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasQry , .F., .T.)

            TCSetField(cAliasQry, "E2_SALDO", "N", nTamSaldo[1], nTamSaldo[2])

            DbSelectArea(cAliasQry)

            While !(cAliasQry)->(Eof()) .And. ( xFilial(cAlias)+cFor+cLj == (cAliasQry)->(E2_FILIAL+E2_FORNECE+E2_LOJA) )
                // Adiantamento
                If (cAliasQry)->E2_TIPO $ MVPAGANT+"/"+MVRECANT
                    cMsg := STR0046 //"O Fornecedor para este titulo possui "
                    cMsg += STR0047  //"Adiantamento."
                    nRet := 1
                Endif
                // Devolucao
                If (cAliasQry)->E2_TIPO $ MV_CPNEG+"/"+MV_CRNEG
                    cMsg := STR0046 //"O Fornecedor para este titulo possui "
                    cMsg += STR0048 //"Devolucao."
                    nRet := 2
                Endif

                If nRet <> 0
                    cMsg += chr(13)+chr(10)
                    cMsg += STR0044  //"Deseja mesmo assim seleciona-lo ?"
                    If MsgYesNo( cMsg )
                        lRet := .T.
                    Else
                        lRet := .F.
                    Endif
                    Exit
                Endif

                DbSkip()
            EndDo

        EndIf
        (cAliasQry)->(DbCloseArea())
    EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Recupera a Integridade dos dados                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RetIndex(cAlias)
DbSelectArea(cAlias)
Set Filter to &cFilter
RestArea( aArBusca )

Return( lRet )

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa590ImpAg
Verifica se o título pai tem titulos de impostos gerados e
se esses títulos estão baixados por aglutinação

@author Karen Honda
@since 22/09/2017
@version P11
/*/
//-------------------------------------------------------------------
Function Fa590ImpAg()
Local aArea 	:= SE2->(GetArea())
Local cPrefixo 	:= SE2->E2_PREFIXO
Local cNum		:= SE2->E2_NUM
Local lPisBxAg	:= .F.
Local lCofBxAg	:= .F.
Local lCslBxAg	:= .F.
Local cProcAg	:= ""
Local lGeraPIS 	:= .F.
Local lGeraCof 	:= .F.
Local lGeraCSLL := .F.

If cMVINSIRF == nil
    Ini590Var()
EndIf

If lPCCBaixa
    If SE2->E2_PRETPIS == '2' .or. SE2->E2_PRETCOF == '2' .or. SE2->E2_PRETCSL == '2'
        SFQ->(DBSetOrder(2))
        If SFQ->(DbSeek(xFilial("SFQ")+"SE2"+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)));
            .and. SFQ->FQ_FILDES == xFilial("SE2")
            SE2->(DbSeek(xFilial("SE2")+SFQ->(FQ_PREFORI+FQ_NUMORI+FQ_PARCORI+FQ_TIPOORI+FQ_CFORI+FQ_LOJAORI)))
            cPrefixo 	:= SE2->E2_PREFIXO
            cNum		:= SE2->E2_NUM
        EndIf
    EndIf
    //verifica se o título tem natureza e fornecedor que
    //farão com que deva ser gerado PCC
    TitCalcPCC(SE2->E2_NATUREZ, SE2->E2_FORNECE, @lGeraPis, @lGeraCof, @lGeraCsLL)

    If lGeraPis .or. lGeraCof .or. lGeraCsLL

        // Abre o SE2 com outro alias para ser localizado o titulo principal do imposto
        If !( ChkFile("SE2",.F.,"NEWSE2") )
            Return(Nil)
        EndIf
        dbSelectArea("NEWSE2")
        dbSetOrder(1)
        SE5->(dbSetOrder(2))
        If NEWSE2->(MsSeek(xFilial("SE2")+cPrefixo+cNum))
            //Verifica quais os impostos que foram gerados.
            While !Eof() .and. ;//If(lTitPai, NEWSE2->(E2_TITPAI) == cTitPai .or. NEWSE2->(E2_TITPAI) == '',;
                NEWSE2->(E2_FILIAL+E2_PREFIXO+E2_NUM) == xFilial("SE2")+SE2->(E2_PREFIXO+E2_NUM)
                If lGeraPis .and. NEWSE2->E2_PARCELA == SE2->E2_PARCPIS
                    If Trim(DToC(NEWSE2->E2_BAIXA)) <> "" .and. SE5->(DbSeek(xFilial("SE2")+"BA"+cPrefixo+cNum+SE2->E2_PARCPIS+"TX"))
                        While !SE5->(Eof()) .and. (SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA) == cPrefixo+cNum+SE2->E2_PARCPIS) .and.;
                            SE5->E5_TIPODOC == "BA" .and. SE5->E5_TIPO == "TX "
                            If Trim(SE5->E5_AGLIMP) <> '' .and. SE5->E5_SITUACA <> "C"
                                lPisBxAg := .T.
                                if !(SE5->E5_AGLIMP $ cProcAg)
                                    cProcAg  += SE5->E5_AGLIMP + " "
                                EndIf
                            EndIf
                            SE5->(DbSkip())
                        EndDo
                    EndIf
                ElseIf lGeraCof .and. NEWSE2->E2_PARCELA == SE2->E2_PARCCOF
                    If Trim(DToC(NEWSE2->E2_BAIXA)) <> "" .and. SE5->(DbSeek(xFilial("SE2")+"BA"+cPrefixo+cNum+SE2->E2_PARCPIS+"TX"))
                        While !SE5->(Eof()) .and. (SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA) == cPrefixo+cNum+SE2->E2_PARCPIS) .and.;
                            SE5->E5_TIPODOC == "BA" .and. SE5->E5_TIPO == "TX "
                            If Trim(SE5->E5_AGLIMP) <> '' .and. SE5->E5_SITUACA <> "C"
                                lCofBxAg := .T.
                                if !(SE5->E5_AGLIMP $ cProcAg)
                                    cProcAg  += SE5->E5_AGLIMP + " "
                                EndIf
                            EndIf
                            SE5->(DbSkip())
                        EndDo
                    EndIf
                ElseIf lGeraCsLL .and. NEWSE2->E2_PARCELA == SE2->E2_PARCSLL
                    If Trim(DToC(NEWSE2->E2_BAIXA)) <> "" .and. SE5->(DbSeek(xFilial("SE2")+"BA"+cPrefixo+cNum+SE2->E2_PARCPIS+"TX"))
                        While !SE5->(Eof()) .and. (SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA) == cPrefixo+cNum+SE2->E2_PARCPIS) .and.;
                            SE5->E5_TIPODOC == "BA" .and. SE5->E5_TIPO == "TX "
                            If Trim(SE5->E5_AGLIMP) <> '' .and. SE5->E5_SITUACA <> "C"
                                lCslBxAg := .T.
                                if !(SE5->E5_AGLIMP $ cProcAg)
                                    cProcAg  += SE5->E5_AGLIMP + " "
                                EndIf
                            EndIf
                            SE5->(DbSkip())
                        EndDo
                     EndIf
                EndIf
                NEWSE2->(DbSkip())
            Enddo
        EndIf
        RestArea(aArea)
        NEWSE2->(dbCloseArea())
    EndIf

    If lPisBxAg .or. lCofBxAg .or. lCslBxAg
        If FunName() <> "FINA241"
            //"Esse título tem impostos ""PIS ""COFINS ""CSLL "
            MsgInfo(STR0050 + If(lPisBxAg,STR0051,"") + If(lCofBxAg,STR0052,"") +;
                             If(lCslBxAg,STR0053,"") + STR0054 + CRLF +; //"que estão Aglutinados."
                            STR0055 + CRLF +; //"Não é possível prosseguir essa operação enquanto os títulos"
                            STR0056 + CRLF +;     //"permanecerem aglutinados"
                            STR0057 +cProcAg) //"Processo de aglutinação: "
        Else
            //"Esse borderô tem títulos com impostos ""PIS ""COFINS ""CSLL "
            MsgInfo(STR0058 + If(lPisBxAg,STR0051,"") + If(lCofBxAg,STR0052,"") +;
                             If(lCslBxAg,STR0053,"") + STR0054 + CRLF +; //"que estão Aglutinados."
                            STR0055 + CRLF +; //"Não é possível prosseguir essa operação enquanto os títulos"
                            STR0056 + CRLF +;     //"permanecerem aglutinados"
                            STR0057 +cProcAg) //"Processo de aglutinação: "
        EndIf
    Endif
EndIf
RestArea(aArea)
Return (lPisBxAg .or. lCofBxAg .or. lCslBxAg)

//-------------------------------------------------------------------
/*/{Protheus.doc} TitCalcPCC
Função para verificar se a natureza e fornecedor do título farão
com que deva ser gerado PCC

@author Mauricio Pequim Jr
@since 22/09/2017
@version P11
/*/
//-------------------------------------------------------------------
STATIC Function TitCalcPCC(cNat, cFornece, lGeraCSLL, lGeraCof, lGeraPIS)

Local lRet := .F.

SED->(DbSetOrder(1))
SA2->(DbSetOrder(1))
If cPaisLoc == "BRA"
    If SED->(DbSeek(xFilial("SED")+cNat)) .and. SA2->(DbSeek(xFilial("SA2")+cFornece))
        If (SED->ED_CALCCSL == "S" .and. SA2->A2_RECCSLL == "2").or.;
           (SED->ED_CALCCOF == "S" .and. SA2->A2_RECCOFI == "2").or.;
           (SED->ED_CALCPIS == "S" .and. SA2->A2_RECPIS  == "2")
            lRet := .T.

            If SED->ED_CALCCSL == "S" .and. SA2->A2_RECCSLL == "2" // JROBERTO - ESTAVA SA2->A2_RECCSLL== "1" (CORRETO "2")
                lGeraCSLL:= .T.
            EndIf

            If SED->ED_CALCCOF == "S" .and. SA2->A2_RECCOFI == "2" // JROBERTO - ESTAVA SA2->A2_RECCOFI== "1" (CORRETO "2")
                lGeraCof := .T.
            EndIf

            If SED->ED_CALCPIS == "S" .and. SA2->A2_RECPIS  == "2"  // JROBERTO - ESTAVA SA2->A2_RECPIS== "1" (CORRETO "2")
                lGeraPIS := .T.
            EndIf
        EndIf
    EndIf
EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} FinA590T
Chamada semi-automatica utilizado pelo gestor financeiro

@author Mauricio Pequim Jr
@since 13/05/2008
@version P11
/*/
//-------------------------------------------------------------------
Function FinA590T(aParam)
    cRotinaExec := "FINA590"
    ReCreateBrow(FinWindow:cAliasFile,FinWindow)
    FinA590(aParam[1])
    ReCreateBrow(FinWindow:cAliasFile,FinWindow)
    dbSelectArea(FinWindow:cAliasFile)

    INCLUI := .F.
    ALTERA := .F.

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa590Val
Funcao utilizada para consistir o valor digitado

@author Mauricio Pequim Jr
@since 13/05/2008
@version P11
/*/
//-------------------------------------------------------------------
Function Fa590Val(oPis,oCofins,oCsll,oValPgto,nOldPis,nOldCof,nOldCsl)

Local lRet := .T.
Local nOldValPgto := nValPgto

nValPgto 	:= nValPgto +(nOldPis+nOldCof+nOldCsl)- (nPis+nCoFins+nCsll)

If nValPgto < 0
    Help(" ",1,"FA590MNTBORV")
    lRet := .F.
    nValPgto := nOldValPgto
    oValPgto:Refresh()
Else
    nOldPIS	 := nPis
    nOldCof	 := nCofins
    nOldCSL	 := nCsll

    oPis:Refresh()
    oCofins:Refresh()
    oCsll:Refresh()
    oValPgto:Refresh()

EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} F590Bord
Função para informar código do borderô (Painel Financeiro)

@author Mauricio Pequim Jr
@since 13/05/2008
@version P11
/*/
//-------------------------------------------------------------------
Function F590Bord()
    Local cNumBorAux := cNumBor

    DEFINE MSDIALOG oDlg FROM  094,1 TO 200,293 TITLE OemToAnsi(STR0001) PIXEL
    @ 10,12 SAY OemToAnsi(STR0009) SIZE 023,07 OF oDlg PIXEL  //"Bordero"
    @ 10,42 MSGET cNumBor          SIZE 070,10 OF oDlg PIXEL Valid FA590NumC(.T.)

    DEFINE SBUTTON FROM 35,085 TYPE 1 ENABLE OF oDlg ACTION (nOpcAPriv := 1, oDlg:End())
    DEFINE SBUTTON FROM 35,115 TYPE 2 ENABLE OF oDlg ACTION (nOpcAPriv := 0, oDlg:End())

    ACTIVATE MSDIALOG oDlg CENTERED

    If nOpcAPriv == 0
        cNumBor := cNumBorAux
    Endif

Return nOpcAPriv

//-------------------------------------------------------------------
/*/{Protheus.doc} AdmAbreSM0
Retorna um array com as informacoes das filias das empresas

@author Mauricio Pequim Jr
@since 13/05/2008
@version P11
/*/
//-------------------------------------------------------------------
Static Function AdmAbreSM0()
    Local aArea			:= SM0->( GetArea() )
    Local aAux			:= {}
    Local aRetSM0		:= {}
    Local lFWLoadSM0	:= .T.
    Local lFWCodFilSM0 	:= .T.

    If lFWLoadSM0
        aRetSM0	:= FWLoadSM0()
    Else
        DbSelectArea( "SM0" )
        SM0->( DbGoTop() )
        While SM0->( !Eof() )
            aAux := { 	SM0->M0_CODIGO,;
                        IIf( lFWCodFilSM0, FWGETCODFILIAL, SM0->M0_CODFIL ),;
                        "",;
                        "",;
                        "",;
                        SM0->M0_NOME,;
                        SM0->M0_FILIAL }

            aAdd( aRetSM0, aClone( aAux ) )
            SM0->( DbSkip() )
        End
    EndIf

    RestArea( aArea )
Return aRetSM0

//-------------------------------------------------------------------
/*/{Protheus.doc} IncBordImp
Inclusao de borderô que gera imposto com titulo a receber.

@author Andrea V. Santiago
@since 29/10/2013
@version P11
/*/
//-------------------------------------------------------------------
Function IncBordImp(cAlias,nReg,nPosArotina,lAutomato)

    Local lPanelFin	:= IsPanelFin()
    LOCAL aMoedas 		:= GetMoedas()
    Local cTit		:= ""
    Local cForne	:= ""
    Local cLoja		:= ""
    Local cContrato	:= ""
    Local nOpc		:= 0
    Local lF590Inc	:= Existblock("F590INC")
    Local lF590IOK	:= Existblock("F590IOK")
    Local nRecSEA	:= 0
    local cSituAtu	:= ""
    Local aRetencao	:= {}
    Local lRet 		:= .T.
    Local dBase	    := CTOD("//")
    Local nDias		:= 0
    Local aFeriados	:= {}
    Local aAreaSA6	:= {}
    Local nVlMinImp := GetNewPar("MV_VL10925",5000)

    //Incluindo tratamento para borderô criado pela rotina FINA061.
    Local lIRPJBaixa	:= .F.
    Local lPccBxCr 		:= FPccBxCr()	 //Controla o Pis Cofins e Csll na baixa  (1-Retem PCC na Baixa ou 2-Retem PCC na Emissão(default) )
    Local cSequencia	:= ""
    Local nTxMoeda 		:= 0
    Local nOrdSe5		:= 0
    Local nOrdSe1		:= 0
    Local nVrTitRet		:= 0
    Local cPrefixoOrig	:= ""
    Local cNumOrig		:= ""
    Local cParcOrig		:= ""
    Local cTipoOrig		:= ""
    Local cCliOrig		:= ""
    Local cLojaOrig		:= ""
    Local aBaixa     	:= {}
    Local nTotAdto   	:= 0
    Local lBaixaAbat 	:= .F.
    Local nVlrBaixa  	:= 0
    Local lBxCec     	:= .F.
    Local lBxLiq		:= .F.
    Local lTipBxCP   	:= .F.
    Local lSigaloja  	:= .F.
    Local nTotBordAc	:= 0
    Local nPisSE5		:= 0
    Local nCofSE5		:= 0
    Local nCsllSE5		:= 0
    Local aBorAc		:= {}
    Local nVrAc			:= 0
    Local lGerTitAc		:= .F.
    Local lRegSe5		:= .T.
    Local lTpJur		:= .F.
    Local nI			:= 0
    Local nValSaldo		:=	0
    Local nSaldo		:= 0
    //=====================================
    //Trecho alterado com o uso dos models:
    //=====================================
    Local oModelBxR := FWLoadModel("FINM010") //Model de baixas a pagar
    Local oSubFKA
    Local oSubFK1
    Local oSubFK3
    Local oSubFK4
    Local cLog 		:= ""
    Local cChaveTit := ""
    Local cChaveFK7 := ""
    Local cCamposE5 := ""
    Local aImpostos	:={}
    Local nX		:= 0
    Local aAlt 		:= {}
    Local l590Versao:= SEA->( ColumnPos( "EA_VERSAO" ) ) > 0
    Local nValMot 	:= 0
    Local nRecE1	:= 0
    Local dDtBor	:= dDataBase
    Local oBcoCod	:= NIL
    Local oBcoAge	:= NIL
    Local oBcoCnt	:= NIL
    Local aCTB		:= {}
    Local cAgencAnt	:= ""
    Local cBancoAnt	:= ""
    Local cContaAnt	:= ""
    Local aTitCalc	:= {}
    Local oImpRetBx := Nil

    PRIVATE dBaixa 		:= dDataBase
    Private lRetTitMin	:= .F.
    Private lDadosRet	:=	.F.
    Private aPccExc		:= {}
    PRIVATE nMoeda		:=1
    PRIVATE aSituacoes	:= {}
    PRIVATE cCliDe  	:= Space(Len(SE1->E1_CLIENTE))
    PRIVATE cCliAte 	:= Replicate("Z",Len(SE1->E1_CLIENTE))
    PRIVATE dEmisDe 	:= FirstDay(dDataBase)
    PRIVATE dEmisAte	:= LastDay(dDataBase)
    PRIVATE dVencIni	:= FirstDay(dDataBase)
    PRIVATE dVencFim	:= FirstDay(dDataBase)
    PRIVATE cPrefDe  	:= Space(Len(SE1->E1_PREFIXO))
    PRIVATE cPrefAte 	:= Replicate("Z",Len(SE1->E1_PREFIXO))
    PRIVATE cNumDe  	:= Space(Len(SE1->E1_NUM))
    PRIVATE cNumAte 	:= Replicate("Z",Len(SE1->E1_NUM))

    //Reestruturacao SE5
    Private nPisCalc	:= 0
    Private nCofCalc	:= 0
    Private nCslCalc	:= 0
    Private nIrfCalc	:= 0
    Private nPisBaseR 	:= 0
    Private nCofBaseR	:= 0
    Private nCslBaseR 	:= 0
    Private nIrfBaseR 	:= 0
    Private nPccBaseC 	:= 0
    Private nIrfBaseC 	:= 0
    Private nVlPis	 	:= 0
    Private nVlCofins 	:= 0
    Private nVlCsll 	:= 0

    Default lAutomato := .F.

    If !(alltrim(SEA->EA_ORIGEM) == "FINA061" .or. alltrim(SEA->EA_ORIGEM) == "FINA590I")
        alert(STR0009 + cNumBor + STR0122)
    EndIf
    If dDataBase >= dLastPcc
	    nVlMinImp	:= 0
    EndIf

    //Rotina deve ser executada somente para titulos a receber.
    If nRadio == 1

        If FN022SITCB(SEA->EA_SITUACA)[3]		//Cobranca descontada
            Help (" ",1,"NOBRDDES",,STR0029+STR0030+STR0031,1,0) 	//	"Os borderoes de cobranca descontada ou descontada
                                                                                        //	caucionada nao sofrerao manutencao
                                                                                        //	nesta rotina. Utilizar rotina de Transferencia"
            lRet := .F.
        Endif

        If lRet .and. !empty(SE1->E1_NUMBOR)
            lRet := .F.
        Endif

        If lRet .and. SE1->E1_TIPO $ MVPROVIS
            Help(" ",1,"FA590PROV")
            lRet := .F.
        Endif

        If lRet .and. SE1->E1_TIPO $ MVENVBCOR
            Help(" ",1,"F590ENVBCO")
            lRet := .F.
        Endif

        If lRet .and. SE1->E1_TIPO $ MVRECANT
            Help(" ",1,"FA590ADIAN")
            lRet := .F.
        Endif

        If lRet .and. SE1->E1_TIPO $ MV_CRNEG
            Help(" ",1,"FA590NCRED")
            lRet := .F.
        Endif

        If lRet .and. SE1->E1_SALDO == 0
            Help(" ",1,"FA590BAIX")
            lRet := .F.
        EndIf

        If lRet .and. GetNewPar("MV_VLTITAD",.F.)
            lRet := F590BuscAD( "SE1", SE1->E1_CLIENTE, SE1->E1_LOJA,"R")
        Endif

        // Verifica se o titulo esta bloqueado - Gestao de Contratos
        If SE2->(FieldPos("E2_MSBLQL")) > 0
            If SE2->E2_MSBLQL == "1"
                Help(" ",1,"SE2BLOQ")
                lRet := .F.
            EndIf
        EndIf

        // Monta a tabela de situações de Titulos
        If lRet
            dbSelectArea("SE1")
            cTit  := SE1->E1_PREFIXO+"-"+SE1->E1_NUM+"-"+SE1->E1_PARCELA+"-"+SE1->E1_TIPO
            cForne:= SE1->E1_CLIENTE
            cLoja := SE1->E1_LOJA
            cContrato:= SE1->E1_CONTRAT
            cSituaca := FN022SITCB(SEA->EA_SITUACA)[9]		//descricao da situacao de cobranca
            cSituAtu := SEA->EA_SITUACA

            nRecSEA := SEA->(Recno())

            While .T.
                cVar := aMoedas[SE1->E1_MOEDA]
                nOpc := 0
                If !lAutomato
                    If lPanelFin //Chamado pelo Painel Financeiro
                        oPanelDados := FinWindow:GetVisPanel()
                        oPanelDados:FreeChildren()
                        aDim := DLGinPANEL(oPanelDados)
                        DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0,0 To 0,0 PIXEL STYLE nOR( WS_VISIBLE, WS_POPUP )
                        //------------------------------------------------------------------
                        // Observacao Importante quanto as coordenadas calculadas abaixo:
                        //------------------------------------------------------------------
                        // a funcao DlgWidthPanel() retorna o dobro do valor da area do
                        // painel, sendo assim este deve ser dividido por 2 antes da
                        // subtracao e redivisao por 2 para a centralizacao.
                        //------------------------------------------------------------------
                        nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 196) /2
                        nEspLin  := 3
                    Else
                        nEspLarg := 0
                        nEspLin  := 0
                        DEFINE MSDIALOG oDlg FROM  15,6 TO 219,404 TITLE OemToAnsi(STR0075) PIXEL
                    Endif
                    oDlg:lMaximized := .F.
                    oPanel := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,20,20)
                    oPanel:Align := CONTROL_ALIGN_ALLCLIENT

                    @  -1+nEspLin,001+nEspLarg TO 029+nEspLin,197+nEspLarg OF oPanel  PIXEL
                    @ 033+nEspLin,001+nEspLarg TO 063+nEspLin,197+nEspLarg OF oPanel  PIXEL

                    If lPanelFin
                        @ 067+nEspLin,001+nEspLarg TO 097+nEspLin,197+nEspLarg OF oPanel  PIXEL
                    Else
                        @ 067+nEspLin,001+nEspLarg TO 100+nEspLin,131+nEspLarg OF oPanel  PIXEL
                    Endif

                    @ 006+nEspLin,009+nEspLarg say OemToAnsi(STR0009) 		SIZE 23, 07 OF oPanel PIXEL
                    @ 006+nEspLin,045+nEspLarg say OemToAnsi(STR0019) 		SIZE 23, 07 OF oPanel PIXEL
                    @ 006+nEspLin,081+nEspLarg say OemToAnsi(STR0011)    	SIZE 23, 07 OF oPanel PIXEL
                    @ 006+nEspLin,115+nEspLarg SAY OemToAnsi(STR0021)    	SIZE 53, 07 OF oPanel PIXEL
                    @ 040+nEspLin,009+nEspLarg SAY OemToAnsi(STR0012)		SIZE 23, 07 OF oPanel PIXEL  //"Banco"    ,
                    @ 040+nEspLin,035+nEspLarg SAY OemToAnsi(STR0013)		SIZE 32, 07 OF oPanel PIXEL  //"Agˆncia"
                    @ 040+nEspLin,069+nEspLarg SAY OemToAnsi(STR0014)		SIZE 32, 07 OF oPanel PIXEL  //"Conta"
                    @ 040+nEspLin,119+nEspLarg SAY OemToAnsi(STR0015)		SIZE 53, 07 OF oPanel PIXEL  //"Contrato"
                    @ 073+nEspLin,009+nEspLarg SAY OemToAnsi(STR0016)		SIZE 23, 07 OF oPanel PIXEL  //"Moeda"
                    @ 073+nEspLin,058+nEspLarg SAY OemToAnsi(STR0026)		SIZE 50, 07 OF oPanel PIXEL  //"Situacao"

                    @ 015+nEspLin,009+nEspLarg MSGET cNumBor         		SIZE 32, 10 OF oPanel PIXEL WHEN .F.
                    @ 015+nEspLin,045+nEspLarg MSGET cForne    				SIZE 32, 10 OF oPanel PIXEL WHEN .F.
                    @ 015+nEspLin,081+nEspLarg MSGET cLoja  			   	SIZE 23, 10 OF oPanel PIXEL WHEN .F.
                    @ 015+nEspLin,110+nEspLarg MSGET cTit					SIZE 80, 10 OF oPanel PIXEL WHEN .F.
                    @ 049+nEspLin,009+nEspLarg MSGET oBcoCod VAR cPort590	SIZE 10, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_PORTADO')
                    @ 049+nEspLin,035+nEspLarg MSGET oBcoAge VAR cAgen590 	SIZE 26, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_AGEDEP')
                    @ 049+nEspLin,069+nEspLarg MSGET oBcoCnt VAR cConta590	SIZE 42, 10 OF oPanel PIXEL Picture "@!" WHEN .F. OBFUSCATED RetGlbLGPD('EA_NUMCON')
                    @ 049+nEspLin,119+nEspLarg MSGET cContrato       		SIZE 42, 10 OF oPanel PIXEL Picture "@S3" WHEN .F.
                    @ 082+nEspLin,009+nEspLarg COMBOBOX oCbx VAR cVar ITEMS aMoedas SIZE 46, 50 OF oPanel PIXEL WHEN .F.
                    @ 082+nEspLin,058+nEspLarg MSGET cSituaca        		SIZE 65, 10 OF oPanel PIXEL WHEN .F.


                    If lPanelFin //Chamado pelo Painel Financeiro
                        oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1])
                        ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg,;
                            {||nOpc:=1,oDlg:End()},;
                            {||oDlg:End()})
                    Else
                        DEFINE SBUTTON FROM 70, 142 TYPE 1 ENABLE OF oPanel ACTION ( nOpc:=1,oDlg:End() )
                        DEFINE SBUTTON FROM 70, 170 TYPE 2 ENABLE OF oPanel ACTION oDlg:End()
                        ACTIVATE MSDIALOG oDlg CENTERED
                    Endif
                Else
                    nOpc := 1
                EndIf

                If nOpc != 1
                    Exit
                EndIF

                //Permite ou nao a inclusao do titulo no bordero.
                If lF590IOK .and. !(ExecBlock("F590IOK",.F.,.F.,{"R",cNumBor}))
                    Exit
                Endif

                If nOpc == 1

                    // Faz tratamento de dias de retencao bancaria somente se pais Brasil
                    If cPaisLoc == "BRA"

                        // Para o Brasil, apresenta somente os titulos cuja moeda e' a mesma do banco em caso de banco em moeda estrangeira
                        If FXMultSld()
                            If !F240VldMd(cPort590,cAgen590,cConta590,SE1->E1_MOEDA)
                                Exit
                            Endif
                        Endif

                        aAreaSA6 := SA6->(GetArea())
                        SA6->( dbSetOrder(1) )
                        SA6->( MsSeek( xFilial("SA6") + cPort590 + cAgen590 + cConta590 ) )
                        dBase := SE1->E1_VENCREA
                        nDias := SA6->A6_RETENCA
                        // Se considera retencao bancaria, atualiza vencimento com a retencao
                        If nDias > 0 .And. !(FN022SITCB(SEA->EA_SITUACA)[3]) 	// Situacao 2 e 7, usar rotina de Transferencia
                            // Com a pergunta considera retencao bancaria igual a "Sim", calcula a nova data de
                            // vencimento real considerando os dias de retencao do banco.
                            If mv_par04 == 1
                                aFeriados := RetFeriados()

                                // Atualiza data vencto real c/retenção Bancária
                                RecLock("SE1")
                                SE1->E1_VENCREA := dBase
                                SE1->(MsUnLock())
                                // Atualiza tambem os registros agregados
                                F060AtuAgre()
                            EndIf
                            RestArea(aAreaSA6)
                        EndIf
                    EndIf

                    dDtBor	:= SEA->EA_DATABOR

                    BEGIN TRANSACTION

                    RecLock("SEA",.T. )
                        EA_FILIAL	:= __cFilBor
                        EA_PORTADO	:= cPort590
                        EA_AGEDEP	:= cAgen590
                        EA_NUMCON	:= cConta590
                        EA_NUMBOR	:= cNumBor
                        EA_DATABOR	:= dDtBor
                        EA_PREFIXO	:= SE1->E1_PREFIXO
                        EA_NUM		:= SE1->E1_NUM
                        EA_PARCELA	:= SE1->E1_PARCELA
                        EA_TIPO		:= SE1->E1_TIPO
                        EA_SITUANT	:= SEA->EA_SITUACA
                        EA_SITUACA	:= cSituAtu
                        EA_CART		:= "R"
                        EA_FILORIG  := SE1->E1_FILORIG
                        EA_ORIGEM	:= "FINA590I"
                        If l590Versao
                            EA_VERSAO  := "0001"
                        Endif

                        IF (__lBCOApi .AND. Type("cSubCta060") == "C" .AND. Type("cEspec060") == "C")
                            EA_BORAPI  := If(lBorApi, 'S', 'N')
                            EA_SUBCTA  := cSubCta060
                            EA_ESPECIE := cEspec060
                        EndIf
                    MsUnlock()
                    FKCOMMIT()

                    //numbor
                    aAlt := {}
                    aadd( aAlt,{ STR0076,'','','',STR0077 + Alltrim(cNumBor) })   //'MANUTENÇÃO BORDERÔ CR' ,  Efetuada inclusão do Título a Receber no borderô CR
                    //chamada da Função que cria o Histórico de Cobrança
                    FinaCONC(aAlt)

                    cAgencAnt := SE1->E1_AGEDEP
                    cBancoAnt := SE1->E1_PORTADO
                    cContaAnt := SE1->E1_CONTA

                    dbSelectArea( "SE1" )
                    RecLock("SE1")
                    Replace E1_NUMBOR  With cNumBor
                    Replace E1_PORTADO With cPort590
                    Replace E1_AGEDEP  With cAgen590
                    Replace E1_CONTA   With cConta590
                    Replace E1_DATABOR With dDtBor
                    Replace E1_SITUACA With SEA->EA_SITUACA
                    MsUnlock( )
                    FKCOMMIT()

                    AAdd(aCTB, SE1->E1_SALDO)	//[01] = FWI_VALOR (Valor da Movimentação)
                    AAdd(aCTB, 0) 				//[02] = FWI_DESCON (Desconto da Movimentação)
                    AAdd(aCTB, 0) 				//[03] = FWI_IOF (Valor do IOF)
                    AAdd(aCTB, cSituAtu) 		//[04] = FWI_SITUAC (Carteira Atual)
                    AAdd(aCTB, SEA->EA_SITUANT)	//[05] = FWI_SITANT (Carteira Anterior)
                    AAdd(aCTB, cBancoAnt) 		//[06] = FWI_BCOANT (Portador Anterior)
                    AAdd(aCTB, cAgencAnt) 		//[07] = FWI_AGEANT (Agência Anterior)
                    AAdd(aCTB, cContaAnt) 		//[08] = FWI_CONANT (Número da Conta Anterior)
                    AAdd(aCTB, cContrato) 		//[09] = FWI_CONTRA (Contrato)
                    AAdd(aCTB, "") 				//[10] = FWI_IDMOV (Id da Movimentação na FK5)
                    AAdd(aCTB, cNumBor) 		//[11] = FWI_NUMBOR (Número do Borderô)

                    lTpJur	:=	.T.
                    SA1->(Dbsetorder(1))
                    If SA1->(Dbseek(xFilial("SA1")+SE1->(E1_CLIENTE+E1_LOJA)))
                        If SA1->A1_PESSOA <> "J"
                            lTpJur	:=	.F.
                        Endif
                    Endif

                    // Verifica se é IRPF pela Baixa para guardar os títulos que devem ter retenção
                    If cPaisLoc == "BRA"
                        lIRPJBaixa := SA1->A1_IRBAX == "1" .And. !(SA1->A1_ENTID $ "00_02_10") .And. SA1->A1_PESSOA == "J" .And. ;
                                    Posicione("SED",1,xfilial("SED")+SE1->(E1_NATUREZ),"ED_CALCIRF") == "S"
                    EndIf
                    nValSaldo	:= 0
                    nSaldo		:=	0
                    cCliDe  	:= SE1->E1_CLIENTE
                    cCliAte 	:= SE1->E1_CLIENTE
                    dEmisDe 	:= FirstDay(SE1->E1_EMISSAO)
                    dEmisAte	:= LastDay(SE1->E1_EMISSAO)
                    dVencIni	:= FirstDay(SE1->E1_VENCTO)
                    dVencFim	:= FirstDay(SE1->E1_VENCTO)
                    cPrefDe	:= SE1->E1_PREFIXO
                    cPrefAte	:= SE1->E1_PREFIXO
                    cNumDe  	:= SE1->E1_NUM
                    cNumAte 	:= SE1->E1_NUM
                    cFilDe		:= xFilial("SE1")
                    cFilAte	:= xFilial("SE1")

                    If __lMotorRet
                        F590CalImp( SE1->E1_NATUREZ, SE1->E1_CLIENTE, SE1->E1_LOJA, SE1->E1_FILORIG, SE1->E1_VALOR, dDataBase, SE1->E1_TIPO )
                        lPccBxCr	:= ( __lPccMR .And. __lPccBxMR ) .Or.	( !__lPccMR .And. lPccBxCr )
                        lIRPJBaixa	:= ( __lIrfMR .And. __lIrfBxMR ) .Or.	( !__lIrfMR .And. lIRPJBaixa )
                    EndIf

                    If lTpJur .And. (lPccBxCR .Or. lIRPJBaixa .Or. __lImpMT)
                        nVrAc			:=	nPIS		:=	nCOFINS			:=	nCSLL			:=	nIrrf := 0
                        nParciais 		:= nValRec		:=	nOldValRec		:=	nTotBordAc		:=	0
                        nIrrfFina061	:=	nPisFina061	:=	nCofFina061		:=	nCslFina061		:= 0
                        aRetencao		:=	{}
                        lGerTitAc		:= .F.
                        lDadosRet		:=	.F.
                        aDadosTit		:= {}
                        aTitCalc	    := {}
                        aBorAc  := F061BorAc() //Seleciona titulos com borderos gerados anteriormente com PCC acumulado.
                        nRegSe1 := SE1->(Recno())

                        For nI := 1 to Len(aBorAc)
                            SE1->(DbGoto(aBorAc[nI,1]) )
                            nTotBordAc	+=	SE1->E1_VALOR	- aBorAc[nI,6]
                            aadd(aRetencao, {SE1->(Recno()),;   // 1
                                            SE1->E1_CLIENTE,;  	// 2
                                            SE1->E1_LOJA,;      // 3
                                            aBorAc[nI,2]	,;	// 4
                                            aBorAc[nI,3]	,; 	// 5
                                            aBorAc[nI,4]	,; 	// 6
                                            SE1->E1_STATUS,;   	// 7
                                            SE1->E1_VALOR ,;	// 8
                                            SE1->E1_IRRF,;  	// 9
                                            SE1->E1_SALDO,;	  	// 10
                                            0,;					// 11
                                            'BO',;				// 12  (BO=bordero, RE=retido em outro, BX=baixado)
                                            SE1->E1_PORTADO,;	// 13 Portaro
                                            SE1->E1_AGEDEP,;  	// 14 Agedep
                                            SE1->E1_SITUACA,;	// 15 Situaca
                                            SE1->E1_CONTRAT,; 	// 16 Contrata
                                            SE1->E1_NUMBOR,;	// 17 Numbor
                                            SE1->E1_CONTA,;		// 18 Conta
                                            "",;				// 19 Prefixo Origem
                                            "",;				// 20 Numero Origem
                                            "",;				// 21 Parcela Origem
                                            "",;				// 22 Tipo Origem
                                            "",;				// 23 Cf Origem
                                            "",;				// 24 Loja Origem
                                            "",;				// 25 ID Retencao PIS
                                            "",;				// 26 ID Retencao COF
                                            ""})				// 27 ID Retencao CSL
                        Next

                        SE1->(Dbgoto(nRegSe1))
                        aDadosRef	:= Array(7)
                        aDadosRet	:= Array(7)

                        dBaixa		:=	CriaVar("E1_BAIXA")
                        nTxMoeda 	:=	If(SE1->E1_MOEDA > 1, If(SE1->E1_TXMOEDA > 0, SE1->E1_TXMOEDA,RecMoeda(dBaixa,SE1->E1_MOEDA)),0)
                        nParciais	:= 0
                        nPisSE5	:=	nCofSE5	:=	nCsllSE5	  := 0
                        aBaixa		:= {}
                        aBaixaSE5	:=	{}

                        If (SE1->E1_VALOR > SE1->E1_SALDO) .And. Empty(SE1->E1_TIPOLIQ)	//Verificar valores de baixas existentes no registro.
                            lTipBxCP		:=	lRaRtImp //Procura pelas baixas deste titulo
                            aBaixa		 	:= 	Sel070Baixa( "VL /V2 /RA /" + MV_CRNEG, SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO,;
                                @nTotAdto, @lBaixaAbat, SE1->E1_CLIENTE, SE1->E1_LOJA, @nVlrBaixa, , @lBxCec, @lBxLiq ,@lSigaloja, @lTipBxCP)
                            For nI	:=	1 to Len(aBaixaSE5)
                                nParciais += aBaixaSE5[nI][8]
                                If lPccBxCR .And. lRaRtImp
                                    nParciais += aBaixaSE5[nI][18]+aBaixaSE5[nI][19]+aBaixaSE5[nI][20]+aBaixaSE5[nI][30]// somar impostos PCC
                                Endif
                                nPisSE5	+= aBaixaSE5[nI][18]
                                nCofSE5	+= aBaixaSE5[nI][19]
                                nCsllSE5	+= aBaixaSE5[nI][20]
                            Next

                            nParciais += nTotAdto
                            If SE1->E1_SDDECRE <> SE1->E1_DECRESC //Soma valor de decrescimo em baixas parciais, para evitar diferencas entre valor original e valor recebido
                                nParciais += ( SE1->E1_DECRESC - SE1->E1_SDDECRE )
                            EndIf
                        Else
                            nParciais 	:= SE1->E1_VALOR-SE1->E1_SALDO
                        Endif

                        If "RA" $ SE1->E1_TIPO
                            nParciais 	:= SE1->E1_VALOR-SE1->E1_SALDO
                        Endif

                        If SE1->E1_MOEDA > 1
                            nValRec	:=	xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,1,dDatabase,3,nTxMoeda)
                            nValRec	:=	nValRec - (nParciais)
                            nOldValRec	:= 	nValRec
                        Else
                            nValRec := SE1->E1_VALOR - (nParciais)
                            nOldValRec	:= 	nValRec
                        EndIf

                        If __lMotorRet .And. (__lPccMR .Or. __lImpMT .Or. __lIrfMR)//Calcula os impostos pelo motor de retenões
                            nValMot := xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,1,dDatabase,3,nTxMoeda)
                            nValMot := nValMot - (nParciais)
                        Endif

                        If	lIRPJBaixa .And. (SE1->E1_IRRF > 0  .OR. (SED->ED_CALCIRF == 'S' .AND. (SED->ED_RECIRRF == '3' .AND. SA1->A1_RECIRRF = '2').OR. SED->ED_RECIRRF == '2' ) ) .And. !__lIrfMR //Calculando IR caso esteja na baixa e o titulo retenha IR.
                            nIrfBaseC 	:= nIrfBaseR := SE1->E1_BASEIRF
                            nRecE1		:= SE1->( Recno() )
                            nIrrf := FCaIrBxCR(nValRec,nRecE1,,,,dDtBor)
                        Endif

                        If lPccBxCR .And. (SE1->E1_PIS + SE1->E1_COFINS + SE1->E1_CSLL) > 0 //Calculando PCC caso esteja na baixa e o titulo retenha PCC.
                            nValRec := nOldValRec

                            If Len(aRetencao) > 0  .And. !lGerTitAc //Titulo retido em outro.
                                For nI := 1 to Len(aRetencao)
                                    nValRec		+= 	Iif(aRetencao[nI,12]='AC',aRetencao[nI,8],0)
                                    nVrAc			+=	Iif(aRetencao[nI,12]='AC',aRetencao[nI,8],0)
                                    If aRetencao[nI,12]<>'BX'
                                        aRetencao[nI,19]	:=	SE1->E1_PREFIXO
                                        aRetencao[nI,20]	:=	SE1->E1_NUM
                                        aRetencao[nI,21]	:=	SE1->E1_PARCELA
                                        aRetencao[nI,22]	:=	SE1->E1_TIPO
                                        aRetencao[nI,23]	:=	SE1->E1_CLIENTE
                                        aRetencao[nI,24]	:=	SE1->E1_LOJA
                                    Endif
                                    If aRetencao[nI,12]='AC'
                                        aRetencao[nI,11]	:= 'S'
                                    Endif
                                Next
                                nPis	:= nCofins	:=	nCsll	:=	0
                            Endif

                            //Reestruturacao SE5
                            //Base de calculo do PCC para o titulo em questão
                            nPccBaseC	:= nOldValRec
                            nValRec	:= nValRec + nTotBordAc

                            If dDataBase < dLastPcc
                                f070TotMes(dBaixa,.T.,,,,nTxMoeda)
                            Else
                                If SE1->E1_TIPO # MVRECANT .And. !__lPccMR
                                    aPcc	:= newMinPcc(dDataBase,nValRec,SE1->E1_NATUREZ,"R",SE1->E1_CLIENTE+SE1->E1_LOJA)
                                    nPis	:= aPcc[2]
                                    nCofins	:= aPcc[3]
                                    nCsll	:= aPcc[4]

                                    If len(aPCC) > 4
                                        aTitCalc := aPCC[5]
                                    Endif
                                Endif
                            EndIF

                            If nParciais > 0 .And. !__lPccMR .And. !SE1->E1_TIPO $ MVRECANT+"|"+MV_CRNEG+"|"+MVABATIM
                                aPccExc := F061PccExc(SE1->E1_FILORIG, SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, @oImpRetBx)

                                If oImpRetBx != Nil
                                    oImpRetBx:Destroy()
                                    oImpRetBx := Nil
                                EndIf
                            EndIf

                            nRegSe1	:= 	SE1->(Recno())
                            nOrdSe1	:=	SE1->(IndexOrd())
                            nRegSe5	:=	SE5->(Recno())
                            nOrdSe5	:=	SE5->(IndexOrd())
                            lRegSe5	:=	.T.

                            //Reestruturacao SE5
                            //Valor calculado do PCC para o titulo em questão (Valores vem da F070TOTMES())
                            If lPccBxCR .and. dDataBase < dLastPcc
                                nPisCalc	:= nVlPis
                                nCofCalc	:= nVlCofins
                                nCslCalc	:= nVlCsll
                            Endif

                            If ValType(aPccExc) <> "U" .And. Len(aPccExc) > 0 .And. ValType(aDadosRet) <> "U"
                                If ValType(aDadosRet[2]) == "N" .And. ValType(aDadosRet[3]) == "N" .And. ValType(aDadosRet[4]) == "N"
                                    If (aPccExc[1,1] + aPccExc[1,2] + aPccExc[1,3] <> aDadosRet[2] + aDadosRet[3] + aDadosRet[4])
                                        lRegSe5	:=	.F.
                                    Endif
                                EndIf
                            Endif

                            If ValType(aDadosRet[2]) <> "U"
                                If (aDadosRet[2]+aDadosRet[3]+aDadosRet[4]) > 0  .And. lRegSe5
                                    //Baixas realizadas anteriromente com titulos com os impostos acumulados e que nao foram incluidos ainda neste bordero.
                                    cPrefixoOrig	:=	SE1->E1_PREFIXO
                                    cNumOrig		:=	SE1->E1_NUM
                                    cParcOrig		:=	SE1->E1_PARCELA
                                    cTipoOrig		:=	SE1->E1_TIPO
                                    cCliOrig		:=	SE1->E1_CLIENTE
                                    cLojaOrig		:=	SE1->E1_LOJA

                                    SE5->(Dbsetorder(7))   //E5_FILIAL+E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ
                                    SE1->(Dbsetorder(1))  //E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO

                                    For nI := 1 to Len(aDadosRet[6]) //Titulos com PCC acumulados quando realizei a baixa.

                                        SE5->(DbGoto(aDadosRet[6,nI]) )
                                        // Trecho que será eliminado com a emiminação da SE5
                                       // Os impostos sao tratados na baixa.
                                        Reclock("SE5",.F.)   //Alterando baixa de pendente de retencao para retido em outro titulo.
                                        If SE5->E5_PRETPIS = "1"
                                            SE5->E5_PRETPIS	:= "2"
                                        Endif
                                        If SE5->E5_PRETCOF = "1"
                                            SE5->E5_PRETCOF	:= "2"
                                        Endif
                                        If SE5->E5_PRETCSL = "1"
                                            SE5->E5_PRETCSL	:= "2"
                                        Endif

                                        SE5->E5_HISTOR 	:=	"FINA061-Ref. Baixa"

                                        MsUnlock()

                                        If SE1->(dbSeek(xFilial("SE1")+SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO))
                                            aadd(aRetencao, {SE1->(Recno()),;  					// 1
                                                            SE1->E1_CLIENTE,;  					// 2
                                                            SE1->E1_LOJA,;       				// 3
                                                            SE5->E5_VRETPIS,;					// 4
                                                            SE5->E5_VRETCOF,; 					// 5
                                                            SE5->E5_VRETCSL,; 					// 6
                                                            SE1->E1_STATUS,;   					// 7
                                                            SE5->E5_VALOR,;	  					// 8
                                                            SE5->E5_VRETIRF,;  					// 9
                                                            SE1->E1_SALDO,;    					// 10
                                                            0,;							 		// 11
                                                            'BX',;								// 12  (BO=bordero, RE=retido em outro, BX=baixado)
                                                            cPort590,;					  		// 13 Portaro
                                                            cAgen590,;					  		// 14 Agedep
                                                            cSituAtu,;  				  		// 15 Situaca
                                                            cContrato,;					  		// 16 Contrata
                                                            cNumBor,;					  		// 17 Numbor
                                                            cConta590,;					  		// 18 Conta
                                                            cPrefixoOrig,;				  		// 19 Prefixo Origem
                                                            cNumOrig,;					  		// 20 Numero Origem
                                                            cParcOrig,;					  		// 21 Parcela Origem
                                                            cTipoOrig,;					  		// 22 Tipo Origem
                                                            cCliOrig,;						  	// 23 Cf Origem
                                                            cLojaOrig,;					  		// 24 Loja Origem
                                                            "",;								// 25 ID Retencao PIS
                                                            "",;								// 26 ID Retencao COF
                                                            ""})								// 27 ID Retencao CSL
                                        Endif
                                    Next
                                Endif
                            Endif
                            SE1->(Dbsetorder(nOrdSe1))
                            SE1->(Dbgoto(nRegSe1))
                            SE5->(Dbsetorder(nOrdSe5))
                            SE5->(Dbgoto(nRegSe5))
                        Endif

                        If	((lIRPJBaixa .Or. lPccBxCR) .And. ( ((SE1->E1_PIS + SE1->E1_COFINS + SE1->E1_CSLL) > 0 .And. !__lPccMR).Or. (SE1->E1_IRRF > 0 .OR. nIrrf > 0) .And. !__lIrfMR))

                            If Len(aPccExc) > 0 .And. nValRec > 0
                                //Alterando campos PRETS dos registros de pcc que foram excluidos e estao acumulados.
                                F061PccAc(SE1->E1_FILIAL,SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA)
                            Endif

                            nPisFina061	:=	nPis
                            nCofFina061	:=	nCofins
                            nCslFina061	:=	nCsll
                            nIrrfFina061		:= 	nIrrf

                            If nValRec <= nVlMinImp .And. ValType(aDadosRet[1]) <> "U"
                                If (aDadosRet[1]) > 0 .And. (nPis+nCofins+nCsll) > 0 //Titulo com valor minimo de retencao mas PCC foi gerado em titulo anterior entao devo reter os impostos.
                                    lRetTitMin	:= .T.
                                Endif
                            Endif

                            A040DupRec("FINA061")

                            Reclock("SE1",.F.)

                            If !(FN022SITCB(cSituAtu)[3])	//Cobranca descontada
                                SE1->E1_SALDO 	:=	SE1->E1_SALDO - Iif( (lIRPJBaixa .And. nIrrf>0) , nIrrf, 0) - Iif(lPccBxCR .And. (nValRec > nVlMinImp .Or. lRetTitMin), (nPis+nCofins+nCsll),0 )
                                SE1->E1_VALLIQ	:= SE1->E1_VALLIQ + Iif( (lIRPJBaixa .And. nIrrf>0) , nIrrf, 0) + Iif(lPccBxCR .And. (nValRec > nVlMinImp .Or. lRetTitMin), (nPis+nCofins+nCsll),0 )
                            Endif

                            SE1->E1_SITUACA	:=	cSituAtu
                            MsUnlock()

                            //Dados da tabela auxiliar com o código do título a pagar
                            cChaveTit := xFilial("SE1")+"|"+SE1->E1_PREFIXO+"|"+SE1->E1_NUM+"|"+SE1->E1_PARCELA+"|"+SE1->E1_TIPO+"|"+SE1->E1_CLIENTE+"|"+SE1->E1_LOJA
                            cChaveFK7 := FINGRVFK7("SE1", cChaveTit )

                            If nIrfCalc > 0 .And. lIRPJBaixa .And. !__lIrfMR
							    aImpostos := {}
							    aadd(aImpostos,{"IRF", nIrfCalc,&(SuperGetMV("MV_IRF")),"", nIrrf, nIrfBaseC, nIrfBaseR,"",SA1->A1_COD,SA1->A1_LOJA,SA1->A1_CGC})

							    If nIrrf > 0
                                    cSequencia 	:= FaNxtSeqBx("SE1")  // Sequencia da baixa do adiantamento + 1
                                    nMoedaBco 	:= Max( MoedaBco(cPort590,cAgen590,cConta590), 1)
                                    dBaixa		:=	CriaVar("E1_BAIXA")
                                    nTxMoeda 	:=	If(SE1->E1_MOEDA > 1, If(SE1->E1_TXMOEDA > 0, SE1->E1_TXMOEDA,RecMoeda(dBaixa,SE1->E1_MOEDA)),0)

                                    DbSelectArea("SE5")
                                    //Define os campos que não existem nas FKs e que serão gravados apenas na E5, para que a gravação da E5 continue igual
                                    cCamposE5 := "{"
                                    cCamposE5 += "{'E5_DTDIGIT', dDataBase}"
                                    cCamposE5 += ",{'E5_PREFIXO', SE1->E1_PREFIXO}"
                                    cCamposE5 += ",{'E5_NUMERO', SE1->E1_NUM}"
                                    cCamposE5 += ",{'E5_PARCELA', SE1->E1_PARCELA}"
                                    cCamposE5 += ",{'E5_CLIFOR', SE1->E1_CLIENTE}"
                                    cCamposE5 += ",{'E5_CLIENTE', SE1->E1_CLIENTE}"
                                    cCamposE5 += ",{'E5_LOJA', SE1->E1_LOJA}"
                                    cCamposE5 += ",{'E5_BENEF', SE1->E1_NOMCLI}"
                                    cCamposE5 += ",{'E5_TIPO', SE1->E1_TIPO}"
                                    cCamposE5 += ",{'E5_DTDISPO', dDatabase}"
                                    cCamposE5 += ",{'E5_VRETIRF', nIrrf}"
                                    cCamposE5 += ",{'E5_PRETIRF', '4'}"
                                    cCamposE5 += "}"

                                    oModelBxR := FWLoadModel("FINM010") //Model de baixas a pagar
                                    oModelBxR:SetOperation( MODEL_OPERATION_INSERT ) //Inclusao
                                    oModelBxR:Activate()
                                    oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Informa se vai gravar SE5 ou não
                                    oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5
                                    oModelBxR:SetValue( "MASTER", "NOVOPROC", .T. ) //Informa que a inclusão será feita com um novo número de processo
                                    oModelBxR:SetValue( "MASTER", "HISTMOV", "FINA061-Ger.IRF-Bordero"  ) //"Baixa Ger.Impostos-Bordero"

                                    oSubFK1 := oModelBxR:GetModel("FK1DETAIL")
                                    oSubFK4 := oModelBxR:GetModel("FK4DETAIL")
                                    oSubFK3 := oModelBxR:GetModel("FK3DETAIL")
                                    oSubFKA := oModelBxR:GetModel("FKADETAIL")

                                    //Dados do Processo - Define a chave da FK1 no IDORIG
                                    cIdFK1 := FWUUIDV4()

                                    oSubFKA:SetValue( "FKA_IDORIG", cIdFK1 )
                                    oSubFKA:SetValue( "FKA_TABORI", "FK1" )

                                    //Dados da baixa a pagar
                                    oSubFK1:SetValue( "FK1_IDDOC" , cChaveFK7 )
                                    oSubFK1:SetValue( "FK1_IDFK1" , cIdFK1 )
                                    oSubFK1:SetValue( "FK1_DATA"  , dDatabase )
                                    oSubFK1:SetValue( "FK1_NATURE", SE1->E1_NATUREZ )
                                    oSubFK1:SetValue( "FK1_RECPAG", "R" )
                                    oSubFK1:SetValue( "FK1_TPDOC" , Iif(FN022SITCB(cSituAtu)[3],"BD","BA") )
                                    oSubFK1:SetValue( "FK1_MOTBX" , "IRF")
                                    oSubFK1:SetValue( "FK1_ORIGEM", FunName() )
                                    oSubFK1:SetValue( "FK1_SEQ"   , cSequencia )
                                    oSubFK1:SetValue( "FK1_CCUSTO", SE1->E1_CCUSTO)
                                    oSubFK1:SetValue( "FK1_DOC"   , cNumBor )
                                    oSubFK1:SetValue( "FK1_VALOR" , nIrrf)
                                    oSubFK1:SetValue( "FK1_VLMOE2", nIrrf)
                                    oSubFK1:SetValue( "FK1_MOEDA" , StrZero(nMoedaBco,2))
                                    oSubFK1:SetValue( "FK1_TXMOED", nTxMoeda)
                                    oSubFK1:SetValue( "FK1_FILORI", SE1->E1_FILORIG)
                                    oSubFK1:SetValue( "FK1_HISTOR", "FINA061-Ger.IRF-Bordero")

                                    If !oSubFK3:IsEmpty()
                                        //Inclui a quantidade de linhas necessárias
                                        oSubFK3:AddLine()
                                        //Vai para linha criada
                                        oSubFK3:GoLine( oSubFK3:Length() )
                                    Endif

                                    cIdFK3	:= FINFKSID('FK3', 'FK3_IDFK3')
                                    cIdFK4	:= FINFKSID('FK4', 'FK4_IDFK4')
                                    aImpostos[1,4] := cIdFK4

                                    oSubFK3:SetValue( "FK3_IDFK3" , cIdFK3 )
                                    oSubFK3:SetValue( "FK3_DATA"  , dDataBase )
                                    oSubFK3:SetValue( "FK3_ORIGEM", FunName() )
                                    oSubFK3:SetValue( "FK3_IMPOS" , "IRF" )
                                    oSubFK3:SetValue( "FK3_RECPAG", "R" )
                                    oSubFK3:SetValue( "FK3_MOEDA" , "01" )
                                    oSubFK3:SetValue( "FK3_VALOR" , nIrfCalc )
                                    oSubFK3:SetValue( "FK3_NATURE", &(SuperGetMV("MV_IRF")) )
                                    oSubFK3:SetValue( "FK3_FILORI", SE1->E1_FILORIG )
                                    oSubFK3:SetValue( "FK3_BASIMP", nIrfBaseC )
                                    oSubFK3:SetValue( "FK3_IDORIG", cIdFK1 )
                                    oSubFK3:SetValue( "FK3_TABORI", "FK1")
                                    oSubFK3:SetValue( "FK3_IDRET" , cIdFK4)
                                  	If __lMotorRet
                                        oSubFK3:SetValue( "FK3_CODFKM", aImpostos[1][8] )
                                        oSubFK3:SetValue( "FK3_CLIFOR", aImpostos[1][9])
                                        oSubFK3:SetValue( "FK3_LOJA"  , aImpostos[1][10] )
                                        oSubFK3:SetValue( "FK3_CGC"   , aImpostos[1][11] )
                                        oSubFK3:SetValue( "FK3_RAICGC", Substr(aImpostos[1][11], 1, 8) )
                                    Endif

                                    If !oSubFK4:IsEmpty()
                                        //Inclui a quantidade de linhas necessárias
                                        oSubFK4:AddLine()
                                        //Vai para linha criada
                                        oSubFK4:GoLine( oSubFK4:Length() )
                                    Endif

                                    oSubFK4:SetValue( "FK4_IDFK4" , cIdFK4)
                                    oSubFK4:SetValue( "FK4_DATA"  , dDataBase )
                                    oSubFK4:SetValue( "FK4_ORIGEM", FunName() )
                                    oSubFK4:SetValue( "FK4_IMPOS" , "IRF" )
                                    oSubFK4:SetValue( "FK4_RECPAG", "R" )
                                    oSubFK4:SetValue( "FK4_MOEDA" , "01" )
                                    oSubFK4:SetValue( "FK4_VALOR" , nIrrf )
                                    oSubFK4:SetValue( "FK4_NATURE", &(SuperGetMV("MV_IRF")) )
                                    oSubFK4:SetValue( "FK4_FILORI", SE1->E1_FILORIG )
                                    oSubFK4:SetValue( "FK4_BASIMP", nIrfBaseR ) // Valor a receber

                                    If __lMotorRet
                                        oSubFK4:SetValue( "FK4_CODFKM", aImpostos[1][8] )
                                        oSubFK4:SetValue( "FK4_CLIFOR", aImpostos[1][9] )
                                        oSubFK4:SetValue( "FK4_LOJA"  , aImpostos[1][10] )
                                        oSubFK4:SetValue( "FK4_CGC"   , aImpostos[1][11] )
                                        oSubFK4:SetValue( "FK4_RAICGC", Substr(aImpostos[1][11], 1, 8) )
                                    Endif

                                    //Gravo o relacionamento de retenção dos títulos que tiveram impostos retidos na baixa atual
								    FinFk3BCR(aTitCalc, aImpostos)

                                    If oModelBxR:VldData()
                                        oModelBxR:CommitData()
                                        SE5->(dbGoto(oModelBxR:GetValue( "MASTER", "E5_RECNO" )))
                                        oModelBxR:DeActivate()
                                    Else
                                        lRet := .F.
                                        cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                                        cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                                        cLog += cValToChar(oModelBxR:GetErrorMessage()[6])
                                        Help( ,,"M020VALID",,cLog, 1, 0 )
                                    Endif
                                Else
                                    //NÃO Houve retencao de IRRF neste titulo
                                    //E o mesmo pertence ao bordero em processamento
                                    If !Empty(SE1->E1_NUMBOR)
                                        FNGFK3BCR(1,"FK7",cChaveFK7,aImpostos,cNumBor)
                                    Endif
                                Endif

                            EndIf
                            //PCC
                            //Array para gravacao dos impostos FK3
                            aImpostos := {}
                            aadd(aImpostos,{"PIS",nPisCalc ,SuperGetMV("MV_PISNAT") ,"", nPis    , nPccBaseC, nPisBaseR ,"",SA1->A1_COD ,SA1->A1_LOJA ,SA1->A1_CGC})
                            aadd(aImpostos,{"COF",nCofCalc ,SuperGetMV("MV_COFINS") ,"", nCofins , nPccBaseC, nCofBaseR ,"",SA1->A1_COD ,SA1->A1_LOJA ,SA1->A1_CGC})
                            aadd(aImpostos,{"CSL",nCslCalc ,SuperGetMV("MV_CSLL")   ,"", nCsll   , nPccBaseC, nCslBaseR ,"",SA1->A1_COD ,SA1->A1_LOJA ,SA1->A1_CGC})

                            If (nValRec > nVlMinImp  .Or. lRetTitMin) .And. (SE1->E1_PIS + SE1->E1_COFINS + SE1->E1_CSLL) > 0

                                If (nPis + nCofins + nCsll) > 0.00

                                    cSequencia 	:= FaNxtSeqBx("SE1")  // Sequencia da baixa do adiantamento + 1
                                    nMoedaBco 	:= Max( MoedaBco(cPort590,cAgen590,cConta590), 1)
                                    dBaixa		:=	CriaVar("E1_BAIXA")
                                    nTxMoeda 	:=	If(SE1->E1_MOEDA > 1, If(SE1->E1_TXMOEDA > 0, SE1->E1_TXMOEDA,RecMoeda(dBaixa,SE1->E1_MOEDA)),0)

                                    DbSelectArea("SE5")
                                    cCamposE5 := "{"
                                    cCamposE5 += " {'E5_DTDIGIT' , dDataBase}"
                                    cCamposE5 += ",{'E5_PREFIXO' , SE1->E1_PREFIXO}"
                                    cCamposE5 += ",{'E5_NUMERO'  , SE1->E1_NUM}"
                                    cCamposE5 += ",{'E5_PARCELA' , SE1->E1_PARCELA}"
                                    cCamposE5 += ",{'E5_CLIFOR'  , SE1->E1_CLIENTE}"
                                    cCamposE5 += ",{'E5_CLIENTE' , SE1->E1_CLIENTE}"
                                    cCamposE5 += ",{'E5_BENEF'   , SE1->E1_NOMCLI}"
                                    cCamposE5 += ",{'E5_LOJA'    , SE1->E1_LOJA}"
                                    cCamposE5 += ",{'E5_TIPO'    , SE1->E1_TIPO}"
                                    cCamposE5 += ",{'E5_DTDISPO' , dDatabase}"
                                    cCamposE5 += ",{'E5_VRETPIS' , Val('"+cValToChar(nPis)+"')}"
                                    cCamposE5 += ",{'E5_VRETCOF' , Val('"+cValToChar(nCofins)+"')}"
                                    cCamposE5 += ",{'E5_VRETCSL' , Val('"+cValToChar(nCsll)+"')}"
                                    cCamposE5 += ",{'E5_PRETPIS' , '4'}"
                                    cCamposE5 += ",{'E5_PRETCOF' , '4'}"
                                    cCamposE5 += ",{'E5_PRETCSL' , '4'}"
                                    cCamposE5 += "}"

                                    oModelBxR := FWLoadModel("FINM010") //Model de baixas a pagar
                                    oModelBxR:SetOperation( MODEL_OPERATION_INSERT ) //Inclusao
                                    oModelBxR:Activate()
                                    oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Informa se vai gravar SE5 ou não
                                    oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5
                                    oModelBxR:SetValue( "MASTER", "NOVOPROC", .T. ) //Informa que a inclusão será feita com um novo número de processo
                                    oModelBxR:SetValue( "MASTER", "HISTMOV", STR0072  ) //"Baixa Ger.Impostos-Bordero"

                                    oSubFK1 := oModelBxR:GetModel("FK1DETAIL")
                                    oSubFK3 := oModelBxR:GetModel("FK3DETAIL")
                                    oSubFK4 := oModelBXR:GetModel("FK4DETAIL")
                                    oSubFKA := oModelBxR:GetModel("FKADETAIL")

                                    //Dados do Processo - Define a chave da FK2 no IDORIG
                                    cIdFK1 := FWUUIDV4()

                                    oSubFKA:SetValue( "FKA_IDORIG", cIdFK1)
                                    oSubFKA:SetValue( "FKA_TABORI", "FK1" )

                                    //Dados da baixa a pagar
                                    oSubFK1:SetValue( "FK1_IDFK1" , cIdFK1 )
                                    oSubFK1:SetValue( "FK1_DATA"  , dDataBase )
                                    oSubFK1:SetValue( "FK1_VALOR" , nPis + nCofins + nCsll )
                                    oSubFK1:SetValue( "FK1_MOEDA" , StrZero(nMoedaBco,2) )
                                    oSubFK1:SetValue( "FK1_TXMOED", nTxMoeda)
                                    oSubFK1:SetValue( "FK1_NATURE", SE1->E1_NATUREZ )
                                    oSubFK1:SetValue( "FK1_RECPAG", "R" )
                                    oSubFK1:SetValue( "FK1_TPDOC" , "BA" )
                                    oSubFK1:SetValue( "FK1_VLMOE2", nPis + nCofins + nCsll )
                                    oSubFK1:SetValue( "FK1_MOTBX" , "PCC" )
                                    oSubFK1:SetValue( "FK1_ORIGEM", FunName() )
                                    oSubFK1:SetValue( "FK1_SEQ"   , cSequencia )
                                    oSubFK1:SetValue( "FK1_DOC"   , cNumBor )
                                    oSubFK1:SetValue( "FK1_IDDOC" , cChaveFK7 )
                                    oSubFK1:SetValue( "FK1_CCUSTO", SE1->E1_CCUSTO)
                                    oSubFK1:SetValue( "FK1_FILORI", SE1->E1_FILORIG )
                                    oSubFK1:SetValue( "FK1_HISTOR", "FINA061-Ger.Imp.-Bordero") //Informa os campos da SE5 que serão gravados indepentes de FK5

                                    For nX := 1 to Len(aImpostos)

                                        //Houve calculo de impostos PCC
                                        If aImpostos[nX,2] > 0
                                            cIdFK3 := FINFKSID('FK3', 'FK3_IDFK3')

                                            //Houve retencao de impostos PCC
                                            If aImpostos[nX][5] > 0
                                                cIdFK4:= FINFKSID('FK4', 'FK4_IDFK4')
                                                aImpostos[nX,4] := cIdFK4
                                            Endif

                                            If !oSubFK3:IsEmpty()
                                                //Inclui a quantidade de linhas necessárias
                                                oSubFK3:AddLine()

                                                //Vai para linha criada
                                                oSubFK3:GoLine( oSubFK3:Length() )
                                            Endif

                                            //---------------------------------------------
                                            // Grava Imposto Calculado
                                            //---------------------------------------------
                                            oSubFK3:SetValue( "FK3_IDFK3" , cIdFK3			)
                                            oSubFK3:SetValue( "FK3_DATA"  , dDataBase		)
                                            oSubFK3:SetValue( "FK3_ORIGEM", FunName() 		)
                                            oSubFK3:SetValue( "FK3_IMPOS" , aImpostos[nX][1]	)
                                            oSubFK3:SetValue( "FK3_RECPAG", "R"				)
                                            oSubFK3:SetValue( "FK3_MOEDA" , "01"			)
                                            oSubFK3:SetValue( "FK3_VALOR" , aImpostos[nX][2]	)
                                            oSubFK3:SetValue( "FK3_NATURE", aImpostos[nX][3]	)
                                            oSubFK3:SetValue( "FK3_FILORI", SE1->E1_FILORIG )
                                            oSubFK3:SetValue( "FK3_BASIMP", aImpostos[nX][6]	)
                                            oSubFK3:SetValue( "FK3_IDORIG", cIdFK1			)
                                            oSubFK3:SetValue( "FK3_TABORI", "FK1"			)
                                            oSubFK3:SetValue( "FK3_IDRET" , aImpostos[nX,4]	)
                                            If __lMotorRet
                                                oSubFK3:SetValue( "FK3_CODFKM", aImpostos[nX][8] )
                                                oSubFK3:SetValue( "FK3_CLIFOR", aImpostos[nX][9] )
                                                oSubFK3:SetValue( "FK3_LOJA"  , aImpostos[nX][10] )
                                                oSubFK3:SetValue( "FK3_CGC"   , aImpostos[nX][11] )
                                                oSubFK3:SetValue( "FK3_RAICGC", Substr(aImpostos[nX][11], 1, 8) )
                                            Endif
                                            //---------------------------------------------
                                            // Grava Imposto Retido
                                            //---------------------------------------------
                                            If aImpostos[nX][5] > 0   //Houve retencao
                                                If !oSubFK4:IsEmpty()
                                                    //Inclui a quantidade de linhas necessárias
                                                    oSubFK4:AddLine()

                                                    //Vai para linha criada
                                                    oSubFK4:GoLine( oSubFK4:Length() )
                                                Endif

                                                oSubFK4:SetValue( "FK4_IDFK4" , aImpostos[nx,4]	)
                                                oSubFK4:SetValue( "FK4_DATA"  , dDataBase		)
                                                oSubFK4:SetValue( "FK4_ORIGEM", FunName()  	)
                                                oSubFK4:SetValue( "FK4_IMPOS" , aImpostos[nx,1]	)
                                                oSubFK4:SetValue( "FK4_RECPAG", "R"				)
                                                oSubFK4:SetValue( "FK4_MOEDA" , "01"			)
                                                oSubFK4:SetValue( "FK4_VALOR" , aImpostos[nX,5]	)
                                                oSubFK4:SetValue( "FK4_NATURE", aImpostos[nX,3]	)
                                                oSubFK4:SetValue( "FK4_FILORI", SE1->E1_FILORIG )
                                                oSubFK4:SetValue( "FK4_BASIMP", aImpostos[nX][7]	)
                                                If __lMotorRet
                                                    oSubFK4:SetValue( "FK4_CODFKM", aImpostos[nX][8] )
                                                    oSubFK4:SetValue( "FK4_CLIFOR", aImpostos[nX][9] )
                                                    oSubFK4:SetValue( "FK4_LOJA"  , aImpostos[nX][10] )
                                                    oSubFK4:SetValue( "FK4_CGC"   , aImpostos[nX][11] )
                                                    oSubFK4:SetValue( "FK4_RAICGC", Substr(aImpostos[nX][11], 1, 8) )
                                                Endif
                                            Endif
                                        Endif
                                    Next

                                    For nX:= 1 to len(aTitCalc)
									    FINGFK3BOR(2,aTitCalc[nx,1],aTitCalc[nx,2],aImpostos,.F.)
								    Next

                                    If oModelBxR:VldData()
                                        oModelBxR:CommitData()
                                        SE5->(dbGoto(oModelBxR:GetValue( "MASTER", "E5_RECNO" )))
                                        oModelBxR:DeActivate()
                                    Else
                                        lRet := .F.
                                        cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                                        cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                                        cLog += cValToChar(oModelBxR:GetErrorMessage()[6])
                                        Help( ,,"M020VALID",,cLog, 1, 0 )
                                    Endif
                                Else
                                    //NÃO Houve retencao de PCC neste titulo
                                    //E o mesmo pertence ao bordero em processamento
                                    If !Empty(SE1->E1_NUMBOR)
                                        FNGFK3BCR(1,"FK7",cChaveFK7,aImpostos,cNumBor)
                                    Endif

                                EndIf

                                nPIS	  	:= 0
                                nCOFINS		:= 0
                                nCSLL		:= 0
                                nIrrf 		:= 0
                                nParciais 	:= 0
                                nValRec		:= 0
                                nVrTitRet	:= 0
                                nOldValRec	:= 0

                                If nTotBordAc > 0 //Neste caso o valor do bordero acumulado acabou de ser gerado entao nao devo guardar conteudo para gerar novamente.
                                    nTotBordAc	:=	0
                                Endif

                                If nVrAc >0 //Gerei titulos acumulados que constam neste bordero.
                                    lGerTitAc	:=	.T.
                                Endif
                                If ValType(aDadosRet[2]) <> "U"
                                    If (aDadosRet[2]+aDadosRet[3]+aDadosRet[4]) > 0   //Gravando valores retidos no vetor aDadosRet para nao influenciar caso tenha um outro titulo neste bordero.
                                        lDadosRet	:= .T.
                                    Endif
                                Endif
                            Else//Titulos que possuam imposto acumulado.
                                If !Empty(SE1->E1_NUMBOR)
                                    FNGFK3BCR(1,"FK7",cChaveFK7,aImpostos,cNumBor)
                                Endif
                                nPis		:=	SE1->E1_PIS
                                nCofins 	:=	SE1->E1_COFINS
                                nCsll		:=	SE1->E1_CSLL

                                If SE1->E1_VALOR>SE1->E1_SALDO  .And. Len(aBaixa) > 0
                                    nPis		-=	nPisSE5
                                    nCofins 	-=	nCofSE5
                                    nCsll		-=	nCsllSE5
                                Endif

                                If nValRec <= nVlMinImp .And. 	nVrTitRet > 0
                                    nValRec	:= nValRec - nVrTitRet
                                Endif

                                aadd(aRetencao, {SE1->(Recno()),;       		// 1
                                                SE1->E1_CLIENTE,; 				// 2
                                                SE1->E1_LOJA,;      			// 3
                                                nPis,;          				// 4
                                                nCofins,;  	 					// 5
                                                nCsll,;       					// 6
                                                SE1->E1_STATUS,;  // 7
                                                nValRec+Iif(lIRPJBaixa .And. SE1->E1_VALOR>SE1->E1_SALDO,nIrrf,0),; // 8
                                                nIrrf,;                   		// 9
                                                SE1->E1_SALDO,; 				// 10
                                                "",;							// 11
                                                'AC',;							// 12  (BO=bordero, AC=acumulado no bordero ,BX=acumulado na baixa)
                                                cPort590,;						// 13 Portaro
                                                cAgen590,;						// 14 Agedep
                                                cSituAtu,;  					// 15 Situaca
                                                cContrato,;						// 16 Contrata
                                                cNumBor,;						// 17 Numbor
                                                cConta590,;						// 18 Conta
                                                '',;							// 19 Prefixo Origem
                                                '',;							// 20 Numero Origem
                                                '',;							// 21 Parcela Origem
                                                '',;							// 22 Tipo Origem
                                                '',;							// 23 Cf Origem
                                                '',;							// 24 Loja Origem
                                                '',;							// 25 ID Retencao PIS
                                                '',;							// 26 ID Retencao COF
                                                ''})							// 27 ID Retencao CSL

                                nVrTitRet	+= 	nValRec+Iif(lIRPJBaixa .And. SE1->E1_VALOR>SE1->E1_SALDO,nIrrf,0)
                            Endif
                        Endif

                        If __lMotorRet .And. (__lPccMR .Or. __lIrfMR .Or. __lImpMT)//Calcula os impostos pelo motor de retenões
                            aMotRet	:= F590CalImp( SE1->E1_NATUREZ, SE1->E1_CLIENTE, SE1->E1_LOJA, SE1->E1_FILORIG, nValMot, dDataBase, SE1->E1_TIPO )
                            If Len(aMotRet) > 0
                                F061GrvIMt(aMotRet,cNumBor,cSituAtu,__nTotImp)
                            EndIf
                        Else
                            If  Len(aRetencao) > 0
                                For nI := 1 to Len(aRetencao)
                                    If aRetencao[nI,12] <> 'BX'
                                        aRetencao[nI,25] :=	SE1->(RECNO())
                                        For nX := 1 to Len(aImpostos)
                                            IF nX == 1
                                                aRetencao[nI,25] :=	aImpostos[nX,4]	//Id Retencao PIS
                                            ElseIf nX == 2
                                                aRetencao[nI,26] :=	aImpostos[nX,4]	//Id Retencao COFINS
                                            ElseIf nX == 3
                                                aRetencao[nI,27] :=	aImpostos[nX,4]	//Id Retencao CSLL
                                            Endif
                                        Next
                                    Endif
                                Next
                                F061Grava(aRetencao,nValRec,cNumBor,cSituAtu,cPort590,cAgen590,cConta590)
                            Endif
                        EndIf
                    Endif

                    If lF590Inc
                        Execblock("F590INC",.F.,.F.,{"R",cNumBor})

                        //Chamada para a mensagem unica.
                        If FWHasEAI("FINA055",.F.,,.T.) .And. AllTrim(SE1->E1_ORIGEM) == "FINI055"
                            FwIntegDef("FINA040B")
                        Endif

                    Endif

                    END TRANSACTION

                Endif

                F590Contb(.F., aCTB)  // Contabilizar inclusao dos titulos a receber
                Exit
            EndDo
            SEA->(DbGoto(nRecSEA))
        Endif
        dbSelectArea( "SE1" )
        dbSetOrder(1)
    EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} GetMoedas
Funcao utilizada para consistir o valor digitado

@author Marcel Borges Ferreira
@since 28/09/2006
@version P11
/*/
//-------------------------------------------------------------------
Static Function GetMoedas()

Local aRet     := {}
Local aArea    := GetArea()
Local aAreaSx6 := Sx6->(GetArea())
Local cFilSx6  := ''

// Inicializa array com as moedas existentes.
GetMv("MV_MOEDA1")
cFilSx6 := SX6->X6_FIL
While Substr(SX6->X6_VAR,1,8) == "MV_MOEDA" .And. ;
        SX6->(!Eof()) .And. SX6->X6_FIL == cFilSx6
    If Substr(SX6->X6_VAR,9,1) != "P" .AND. Substr(SX6->X6_VAR,9,2) != "CM" // Desconsiderar plural e MV_MOEDACM
        Aadd( aRet, StrZero(Val(Substr(SX6->X6_VAR,9,2)),2) + " " + GetMv(SX6->X6_VAR) )
    Endif
    SX6->(DbSkip())
EndDo
ASort(aRet)
Sx6->(RestArea(aAreaSx6))
RestArea(aArea)

Return aRet

//-------------------------------------------------------------------
/*/{Protheus.doc} F590CrImp
Função para verificar se existe titulo cr no bordero de mesmo
cliente onde tem calculo de PCC e não houve retenção e se
existe a retenção em outro titulo no mesmo bordero
parametros: cNumbor - Numero
aVetores = Array com os titulos com retenção e sem retenção

@author Karen Honda
@since 15/01/2016
@version P11
/*/
//-------------------------------------------------------------------
Static Function F590CrImp(cNumBor,cCliente,cLoja)

Local aAreaSEA := SEA->(GetArea())
Local aAreaSE1 := SE1->(GetArea())
Local aVetores := {}
Local aRetencao := {}
Local aSemRet := {}
Local cQuery := ""
Static cDBType	:= Alltrim(Upper(TCGetDB()))
Static lPGR		:= (cDBType = "POSTGRES")
Local cAliasQry := ""

Local lSE1FIL := FWMODEACCESS("SE1",3) == 'C'

SEA->(dbSetOrder(2))
SEA->(dbSeek(xFilial("SEA") + cNumBor + "R" ))		// Carteira receber

//Query para pegar os titulos originais com impostos que teve retenção do mesmo bordero
cQuery := "SELECT SE1.R_E_C_N_O_ RECNO "
cQuery += "FROM " + RetSqlName("SE1") + " SE1 INNER JOIN " + RetSqlName("SEA") + " SEA ON "
cQuery += " SE1.E1_NUMBOR = SEA.EA_NUMBOR "
cQuery += " AND SE1.E1_NUM = SEA.EA_NUM "
cQuery += " AND SE1.E1_PARCELA = SEA.EA_PARCELA "
cQuery += " AND SE1.E1_TIPO = SEA.EA_TIPO "
cQuery += " AND SEA.EA_CART = 'R' AND SEA.D_E_L_E_T_ = ' ' "
cQuery += " WHERE "
cQuery += " SE1.E1_FILIAL = '" + xFilial("SE1") +"' AND "
cQuery += " SE1.E1_CLIENTE =  '" + cCliente +"' AND "
cQuery += " SE1.E1_LOJA = '" + cLoja +"' AND "
cQuery += " SE1.E1_NUMBOR = '" + cNumBor + "' AND "
cQuery += " SE1.E1_SALDO > 0 AND "
cQuery += " SE1.E1_PIS + SE1.E1_CSLL + SE1.E1_COFINS > 0 AND "
IF lPGR
    cQuery += " RPAD(SE1.E1_PREFIXO," + CVALTOCHAR(tamsx3("E1_PREFIXO")[1]) + ")|| RPAD(SE1.E1_NUM," + CVALTOCHAR(tamsx3("E1_NUM")[1]) + ") ||"
    cQuery += " RPAD(SE1.E1_PARCELA," + CVALTOCHAR(tamsx3("E1_PARCELA")[1]) + ")|| RPAD(SE1.E1_TIPO," + CVALTOCHAR(tamsx3("E1_TIPO")[1]) + ") ||"
    cQuery += " RPAD(SE1.E1_CLIENTE," + CVALTOCHAR(tamsx3("E1_CLIENTE")[1]) + ")|| RPAD(SE1.E1_LOJA," + CVALTOCHAR(tamsx3("E1_LOJA")[1]) + ") IN "
Else
    cQuery += " SE1.E1_PREFIXO||SE1.E1_NUM||SE1.E1_PARCELA||SE1.E1_TIPO||SE1.E1_CLIENTE || SE1.E1_LOJA IN "
EndIf

cQuery += " (SELECT TX.E1_TITPAI FROM " + RetSqlName("SE1") +" TX "

If !lSE1FIL
    cQuery += " WHERE  TX.E1_FILIAL = SE1.E1_FILIAL AND "
else
    cQuery += " WHERE  TX.E1_FILORIG = SE1.E1_FILORIG AND "
Endif

IF lPGR
    cQuery += " TX.E1_TITPAI = RPAD(SE1.E1_PREFIXO," + CVALTOCHAR(tamsx3("E1_PREFIXO")[1]) + ")|| RPAD(SE1.E1_NUM," + CVALTOCHAR(tamsx3("E1_NUM")[1]) + ")||"
    cQuery += "RPAD(SE1.E1_PARCELA," + CVALTOCHAR(tamsx3("E1_PARCELA")[1]) + ")||RPAD(SE1.E1_TIPO," + CVALTOCHAR(tamsx3("E1_TIPO")[1]) + ")||"
    cQuery += "RPAD(SE1.E1_CLIENTE," + CVALTOCHAR(tamsx3("E1_CLIENTE")[1]) + ") ||RPAD(SE1.E1_LOJA," + CVALTOCHAR(tamsx3("E1_LOJA")[1]) + ") "
Else
    cQuery += " TX.E1_TITPAI = SE1.E1_PREFIXO||SE1.E1_NUM||SE1.E1_PARCELA||SE1.E1_TIPO||SE1.E1_CLIENTE || SE1.E1_LOJA "
EndIf
cQuery += " AND TX.E1_TIPO IN ('PIS','COF','CSL') OR  TX.E1_TIPO IN ('PI-','CF-','CS-')"
cQuery += " AND TX.D_E_L_E_T_ = ' ')"
cQuery += " AND SE1.D_E_L_E_T_ = ' '"

cQuery := ChangeQuery(cQuery)
cAliasQry := GetNextAlias()

DbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),cAliasQry,.F.,.T.)
While (cAliasQry)->(!Eof())
    SE1->( DBGoTo((cAliasQry)->RECNO ) )
    aadd(aRetencao, {SE1->(Recno()),SE1->E1_CLIENTE,SE1->E1_LOJA,DTOS(SE1->E1_VENCREA)})
    (cAliasQry)->( DBSkip())
EndDo
(cAliasQry)->(DBCloseArea())

//Query para pegar os titulos originais com imposto sem retenção do mesmo bordero
cQuery := "SELECT SE1.R_E_C_N_O_ RECNO "
cQuery += "FROM " + RetSqlName("SE1") + " SE1 INNER JOIN " + RetSqlName("SEA") + " SEA ON "
cQuery += " SE1.E1_NUMBOR = SEA.EA_NUMBOR "
cQuery += " AND SEA.EA_CART = 'R' "
cQuery += " AND SE1.E1_NUM = SEA.EA_NUM "
cQuery += " AND SE1.E1_PARCELA = SEA.EA_PARCELA "
cQuery += " AND SE1.E1_TIPO = SEA.EA_TIPO "
cQuery += " WHERE "
cQuery += " SE1.E1_FILIAL = '" + xFilial("SE1") +"' AND "
cQuery += " SE1.E1_CLIENTE =  '" + cCliente +"' AND "
cQuery += " SE1.E1_LOJA = '" + cLoja +"' AND "
cQuery += " SE1.E1_NUMBOR = '" + cNumBor + "' AND "
If !F590NoImp("SE1",SE1->(Recno()))
    cQuery += " SE1.E1_PIS + SE1.E1_CSLL + SE1.E1_COFINS > 0 AND "
EndIf
If lPGR
    cQuery += " RPAD(SE1.E1_PREFIXO," + CVALTOCHAR(tamsx3("E1_PREFIXO")[1]) + ")||RPAD(SE1.E1_NUM," + CVALTOCHAR(tamsx3("E1_NUM")[1]) + ")||"
    cQuery += " RPAD(SE1.E1_PARCELA," + CVALTOCHAR(tamsx3("E1_PARCELA")[1]) + ")||RPAD(SE1.E1_TIPO," + CVALTOCHAR(tamsx3("E1_TIPO")[1]) + ")||"
    cQuery += " RPAD(SE1.E1_CLIENTE," + CVALTOCHAR(tamsx3("E1_CLIENTE")[1]) + ")||RPAD(SE1.E1_LOJA," + CVALTOCHAR(tamsx3("E1_LOJA")[1]) + ") NOT IN "
Else
    cQuery += " SE1.E1_PREFIXO||SE1.E1_NUM||SE1.E1_PARCELA||SE1.E1_TIPO||SE1.E1_CLIENTE || SE1.E1_LOJA NOT IN "
EndIf

cQuery += " (SELECT TX.E1_TITPAI FROM " + RetSqlName("SE1") +" TX "

If !lSE1FIL
    cQuery += " WHERE  TX.E1_FILIAL = SE1.E1_FILIAL AND "
else
    cQuery += " WHERE  TX.E1_FILORIG = SE1.E1_FILORIG AND "
Endif

If lPGR
    cQuery += " TX.E1_TITPAI = RPAD(SE1.E1_PREFIXO," + CVALTOCHAR(tamsx3("E1_PREFIXO")[1]) + ")||RPAD(SE1.E1_NUM," + CVALTOCHAR(tamsx3("E1_NUM")[1]) + ")||"
    cQuery += " RPAD(SE1.E1_PARCELA," + CVALTOCHAR(tamsx3("E1_PARCELA")[1]) + ")||RPAD(SE1.E1_TIPO," + CVALTOCHAR(tamsx3("E1_TIPO")[1]) + ")||"
    cQuery += " RPAD(SE1.E1_CLIENTE," + CVALTOCHAR(tamsx3("E1_CLIENTE")[1]) + ")||RPAD(SE1.E1_LOJA," + CVALTOCHAR(tamsx3("E1_LOJA")[1]) + ") "
Else
    cQuery += " TX.E1_TITPAI = SE1.E1_PREFIXO||SE1.E1_NUM||SE1.E1_PARCELA||SE1.E1_TIPO||SE1.E1_CLIENTE || SE1.E1_LOJA "
EndIf
cQuery += " AND TX.E1_TIPO IN ('PIS','COF','CSL') OR  TX.E1_TIPO IN ('PI-','CF-','CS-')"
cQuery += " AND TX.D_E_L_E_T_ = ' ')"
cQuery += " AND SE1.E1_SALDO > 0  "
cQuery += " AND SE1.D_E_L_E_T_ = ' '"
cQuery += " AND SEA.D_E_L_E_T_ = ' ' "

cQuery := ChangeQuery(cQuery)
cAliasQry := GetNextAlias()

DbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),cAliasQry,.F.,.T.)
While (cAliasQry)->(!Eof())
    SE1->( DBGoTo((cAliasQry)->RECNO ) )
    aadd(aSemRet, {SE1->(Recno()),SE1->E1_CLIENTE+SE1->E1_LOJA,.T.} )
    (cAliasQry)->( DBSkip())
EndDo

(cAliasQry)->(DBCloseArea())


RestArea(aAreaSEA)
RestArea(aAreaSE1)

aVetores := {aRetencao,aSemRet}

Return aVetores

//-------------------------------------------------------------------
/*/{Protheus.doc} F590NoImp
Função para verificar se bordero de impostos ou nao
(bordero gerado pelo FINA240 = Sem imposto)

cAlias = Tabela a ser validada	(SE1 ou SE2)
nRecno = Registro a ser posicionado na SE2 para validacao

@author Igor Sousa
@since 30/03/2016
@version P11
/*/
//-------------------------------------------------------------------
Static Function F590NoImp(cAlias, nRecno)
    Local aArea	   := GetArea()
    Local lNoRet   := .F.
    Local aMotRet  := {}
    
    Default cAlias := Iif(Empty(Alias()), "SE2", Alias())
    Default nRecno := 0
    
    If cAlias == "SE2"
        dbSelectArea("SE2")
        SE2->(DbGoTo(nRecno))
        
        //Verifico os impostos que estão configurados pelo Motor
        If __lMotorRet
            aMotRet := F590ImpCnf("1", SE2->E2_FILORIG, SE2->E2_FORNECE, SE2->E2_LOJA, SE2->E2_NATUREZ)
        Endif
        
        If Len(aMotRet) == 0 .and. (SE2->E2_PIS+SE2->E2_COFINS+SE2->E2_CSLL) == 0
            lNoRet := .T.
        EndIf
    ElseIf cAlias == "SE1"
        dbSelectArea("SE1")
        SE1->(DbGoTo(nRecno))
        
        //Verifico os impostos que estão configurados pelo Motor
        If __lMotorRet
            aMotRet := F590ImpCnf("2", SE1->E1_FILORIG, SE1->E1_CLIENTE, SE1->E1_LOJA, SE1->E1_NATUREZ)
        Endif

        If Len(aMotRet) == 0 .and. (SE1->E1_PIS+SE1->E1_COFINS+SE1->E1_CSLL+SE1->E1_IRRF+SE1->E1_ISS+SE1->E1_INSS) == 0
            lNoRet := .T.
        EndIf
    EndIf
    
    RestArea(aArea)
    FwFreeArray(aArea)
    FwFreeArray(aMotRet)
Return lNoRet

//-------------------------------------------------------------------
/*/{Protheus.doc} Ini590Var
Inicializa as variaveis dos parametros MV

@author Karen Honda
@since 22/09/2017
@version P11
/*/
//-------------------------------------------------------------------
Static Function Ini590Var()
    cMVINSIRF := SuperGetMv("MV_INSIRF",.F.,"2")
    lPCCBaixa := SuperGetMv("MV_BX10925",.T.,"2") == "1"
    dLastPcc  := CTOD("22/06/2015")
Return

//----------------------------------------------------------------------------------------------
/*/{Protheus.doc} F590ImpCnf
Função para verificação dos impostos configurados via Motor de Retenção

@author Mauricio Pequim Jr

Parametros
cCart - Carteira (1 = Pagar ou 2 = Receber)
cFilOrig - Filial de origem do titulo
cCliFor - Código do Cliente/Fornecedor
cLoja - Loja do Cliente/Fornecedor
cNatur - Natureza do título (principal)
cTipo - Tipo do Título

@return aImpConf - Retencoes configuradas no Motor para Natureza/Fornecedor

@since  28/12/2017
@version 12
/*/
//----------------------------------------------------------------------------------------------
Function F590ImpCnf(cCart As Character,cFilOrig As Character,cCliFor As Character,cLoja As Character, cNatur As Character, cTipo As Character) As Array

Local aImpConf As Array
Local nZ As Numeric
Local lPisMR As Logical
Local lCofMR As Logical
Local lCslMR As Logical
Local lPisBxMR As Logical
Local lCofBxMR As Logical
Local lCslBxMR As Logical

aImpConf := {}
nZ := 0
lPisMR 	:= .F.
lCofMR 	:= .F.
lCslMR 	:= .F.
lPisBxMR 	:= .F.
lCofBxMR 	:= .F.
lCslBxMR 	:= .F.

__lPccMR 	:= .F.
__lIrfMR	:= .F.
__lIssMR	:= .F.
__lImpMT 	:= .F.

//Valida quais os impostos configurados pelo motor de retenções
If cCart == "1"
    aImpConf := FinImpConf("1", SE2->E2_FILORIG, SE2->E2_FORNECE, SE2->E2_LOJA, SE2->E2_NATUREZ)
Else
    aImpConf := FinImpConf("2", SE1->E1_FILORIG, SE1->E1_CLIENTE, SE1->E1_LOJA, SE1->E1_NATUREZ)
Endif

__lImpMotRet := Len(aImpConf) > 0

For nZ := 1 To Len( aImpConf )
        Do Case

            Case aImpConf[nZ,1] == "PIS"
                lPisMR := .T.
                lPisBxMR := ( aImpConf[nZ,2] == "2" )
            Case aImpConf[nZ,1] == "COF"
                lCofMR := .T.
                lCofBxMR := ( aImpConf[nZ,2] == "2" )
            Case aImpConf[nZ,1] == "CSL"
                lCslMR := .T.
                lCslBxMR := ( aImpConf[nZ,2] == "2" )
            Case aImpConf[nZ,1] == "IRF"
                __lIrfMR := .T.
                __lIrfBxMR := ( aImpConf[nZ,2] == "2" )
            Case aImpConf[nZ,1] == "ISS"
                __lIssMR := .T.
            OtherWise
                __lImpMT := ( aImpConf[nZ,2] == "2" )
        EndCase
    Next nZ

    __lPccMR := lPisMR .Or. lCofMR .Or. lCslMR
    __lPccBxMR := lPisBxMR .Or. lCofBxMR .Or. lCslBxMR

    aSize ( aImpConf, 0 )
    aImpConf := {}

Return aImpConf

/*/{Protheus.doc} F590CalImp()
Função para realizar o cálculo de imposto através do motor de retenções

@param cNatMR, Natureza para cálculo do imposto pelo motor de retenções
@param cCliMR, Cliente para cálculo do imposto pelo motor de retenções
@param cLojaMR, Loja para cálculo do imposto pelo motor de retenções
@param cFilMR, Filial de origem para cálculo do imposto pelo motor de retenções
@param nBaseMR, Valor base para cálculo do imposto pelo motor de retenções
@param dDataMR, Data para cálculo do imposto pelo motor de retenções
@param cTipoTitMR, Tipo do tíutlo para cálculo do imposto pelo motor de retenções

@author Jose.Gavetti
@since 04/12/2018
@version 12
/*/
Static Function F590CalImp( cNatMR As Char, cCliMR As Char, cLojaMR As Char, cFilMR As Char, nBaseMR As Numeric, dDataMR As Date, cTipoTitMR As Char )
    Local nZ As Numeric
    Local cTitPosic As Char
    Local lPisMR As Logical
    Local lCofMR As Logical
    Local lCslMR As Logical
    Local lPisBxMR As Logical
    Local lCofBxMR As Logical
    Local lCslBxMR As Logical
    Default cNatMR := ""
    Default cCliMR := ""
    Default cLojaMR := ""
    Default cFilMR := ""
    Default nBaseMR := 0
    Default dDataMR	:= CtoD("//")
    Default cTipoTitMR := ""

    lPisMR 	:= .F.
    lCofMR 	:= .F.
    lCslMR 	:= .F.
    lPisBxMR 	:= .F.
    lCofBxMR 	:= .F.
    lCslBxMR 	:= .F.

    __lPccMR 	:= .F.
    __lIrfMR	:= .F.
    __lImpMT 	:= .F.

    cTitPosic := FWxFilial( "SE1", SE1->E1_FILORIG ) + "|" + SE1->E1_PREFIXO + "|" + SE1->E1_NUM + "|" + SE1->E1_PARCELA + "|" + SE1->E1_TIPO + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA

    nPis := 0
    nCofins := 0
    nCsll := 0
    nIrrf := 0
    __nImpMT :=0

    /*-------------------------------------------
    Estrutura da aImpos
    [1] = Codigo do tipo de imposto (FKM_CODIGO)
    [2] = Base do imposto
    [3] = Valor calculado do imposto
    [4] = Base de retenção do imposto
    [5] = Valor a reter do imposto
    [6] = IDRET FK4
    [7] = Array contendo os Recnos FK3 das pendências de retenção
    [8] = Tipo do Imposto (SX5 - 0C )
    [9] = Fato gerador ( 1=Competência; 2=Caixa )
    [10] = Natureza do imposto
    [11] = Tabela onde foi gerado o imposto
    [12] = Recno do titulo de imposto gerado
    [13] = Ação aplicada no valor da nota na emissão(1 = subtrai, 2 = soma, 3 = sem ação)
    [14] = Carteira de movimento na emissão (1 = Pagar, 2 = Receber)
    [15] = Tipo de movimento na emissão (1 = Abtimento, 2 = Provisão, 3 = Retenção, 4 = Não Gerar)
    [16] = Ação aplicada no valor da nota na baixa(1 = subtrai, 2 = soma, 3 = sem ação)
    [17] = Carteira de movimento na baixa (1 = Pagar, 2 = Receber)
    [18] = Tipo de movimento na baixa (1 = Abtimento, 2 = Provisão, 3 = Retenção, 4 = Não Gerar)
    [19] = Ação sobre títulos de antecipação pagamento/recebimento: 1 = Retém, 2 = Provisiona, 3 = sem ação
    --------------------------------------------*/
    __aImpos := FINCalImp( "2", cNatMR, cCliMR, cLojaMR, cFilMR, nBaseMR, dDataMR, .T., {}, cTipoTitMR,cTitPosic,Nil, {} )

    For nZ := 1 To Len( __aImpos )
        Do Case
            Case __aImpos[nZ,8] == "PIS"
                nPis	+= __aImpos[nZ,5]
                nPisCalc	:= nPis
                lPisMR := .T.
                lPisBxMR := (__aImpos[nZ,9] == "2")
            Case __aImpos[nZ,8] == "COF"
                nCofins += __aImpos[nZ,5]
                nCofCalc	:= nCofins
                lCofMR := .T.
                lCofBxMR := (__aImpos[nZ,9] == "2")
            Case __aImpos[nZ,8] == "CSL"
                nCsll	+= __aImpos[nZ,5]
                nCslCalc	:= nCsll
                lCslMR := .T.
                lCslBxMR := (__aImpos[nZ,9] == "2")
            Case __aImpos[nZ,8] == "IRF"
                nIrrf	+= __aImpos[nZ,5]
                __lIrfMR := .T.
                __lIrfBxMR := (__aImpos[nZ,9] == "2")
            OtherWise
                __nImpMT	+= __aImpos[nZ,5]
                __lImpMT := (__aImpos[nZ,9] == "2")
        EndCase
    Next nZ

    __nTotImp := nPis + nCofins + nCsll + nIrrf + __nImpMT

    __lPccMR := lPisMR .Or. lCofMR .Or. lCslMR
    __lPccBxMR := lPisBxMR .Or. lCofBxMR .Or. lCslBxMR

Return __aImpos

/*/{Protheus.doc} F590CtbOff()
Função para validar se o fonte esta atualizado para garantir o funcionamento da contabilização off-line das transferências.

@version    12.1.23/12.1.25/12.1.27
@author     Rafael Riego
@since      12/06/2020
/*/

Function F590CtbOff()
Return .T.

/*/{Protheus.doc} F590AtuSE2
Atualiza o número do borderô e portador na tabela SE2

@author Sivaldo Oliveira
@since 13/04/2021
@version P12

@param cNroBorder, char, número do borderô
@param cPortador, char, código do banco/portador
/*/
Static Function F590AtuSE2(cNroBorder As Char, cPortador As Char)
    Default cNroBorder := ""
    Default cPortador  := "" 
    
    If SE2->(RecLock("SE2"))
        SE2->E2_NUMBOR  := cNroBorder
        SE2->E2_PORTADO := cPortador
        
        If cPaisLoc == "BRA"
            SE2->E2_DTBORDE := dDataBase
        Endif
        
        SE2->(MsUnlock())
    EndIf
Return Nil

//----------------------------------------
/*/{Protheus.doc} BordInterg
Verifica se o boorderô já foi integrado com o TCB

@author Sivaldo Oliveira
@since 07/07/2021
@version P12

@Param cNroBorder, Char, Número do borderô. 
@return lRet, Logical, indica se houve integração do borderô
/*/
//----------------------------------------
Static Function BordInterg(cNroBorder As Char) As Logical
    Local lRet   As Logical
    Local cQuery As Char
    
    //Valores default
    Default cNroBorder := ""

    //Inicializa variáveis.
    lRet   := .F.
    cQuery := ""
    
    If Empty(cNroBorder)
        cQuery := "SELECT COUNT(FWO.FWO_NUMBOR) NBORDEROS FROM "
        cQuery += RetSqlName("FWO") + " FWO WHERE "
        cQuery += "FWO.FWO_FILIAL = '" + xFilial("FWO") + "' "
        cQuery += "AND FWO.FWO_NUMBOR = '" + cNroBorder + "' "
        cQuery += "AND FWO.D_E_L_E_T_ = ' ' "
        cQuery := ChangeQuery(cQuery)
        lRet := (MpSysExecScalar(cQuery, "NBORDEROS") > 0)
    EndIf

Return lRet

