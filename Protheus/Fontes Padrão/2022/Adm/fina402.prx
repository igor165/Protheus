#include "FINA402.ch"
#include "PROTHEUS.ch"

Static lFWCodFil := .T.

// 17/08/2009 - Compilacao para o campo filial de 4 posicoes
// 18/08/2009 - Compilacao para o campo filial de 4 posicoes


/*ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ FINA402    ³ Autor ³ Adilson H Yamaguchia  ³ Data ³ 18.03.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Gera dados para IR, INSS e Pagamento de Fornecedores         ³±±
±±³          ³ Autonomos na Folha                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FINA402()                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAFIN                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FINA402()

Local lPanelFin := IsPanelFin()
Local nOpca := 0
Local oDlg, aButtons := {} , aSays := {}
Local cPerg := "FIN402"

Private cCadastro := STR0001  //"Gera dados para SEFIP"

Pergunte(cPerg,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas para parametros								   ³
//³ mv_par01		// Data Inicial									       ³
//³ mv_par02		// Data Final   									   ³
//³ mv_par03		// Do Fornecedor									   ³
//³ mv_par04		// Ate Fornecedor									   ³
//³ mv_par05		// C.Custo  										   ³
//| mv_par06       	// Do Prefixo										   |
//| mv_par07		// Ate Prefixo                                         |
//| mv_par08       	// Cons. Filiais abaixo?							   |
//| mv_par09       	// Da Filial 										   |
//| mv_par10		// Ate Filial                                          |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


If cPaisLoc == "BRA"
	AADD(aSays, STR0002) //"Este programa tem como objetivo gerar os dados necessarios  "
	AADD(aSays, STR0003) //"para SEFIP na folha."

	If lPanelFin  //Chamado pelo Painel Financeiro
		aButtonTxt := {}
		AADD(aButtonTxt,{STR0009,STR0009, {||Pergunte("FIN402",.T. )}}) // Parametros
		FaMyFormBatch(aSays,aButtonTxt,{||nOpca:=1},{||nOpca:=0})
	Else
		AADD(aButtons, { 5,.T.,{|| Pergunte("FIN402",.T. ) } } )
		AADD(aButtons, { 1,.T.,{|o| nOpca:= 1,o:oWnd:End()}} )
		AADD(aButtons, { 2,.T.,{|o| o:oWnd:End() }} )
		FormBatch( cCadastro, aSays, aButtons )
	Endif

Else

	MsgAlert( STR0006,STR0007 ) //"Não foi encontrado o campo E2_SEFIP em sua base. A rotina não continuará seu processamento. Verifique boletim técnico disponível"###"Atenção"

Endif

If nOpcA == 1
	Processa({|lEnd| fa402Processa()})
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³O codigo abaixo eh utilizado nesse ponto para garantir que tanto o alias³
//³quanto o browse serao recriados sem problemas na utilizacao do painel   ³
//|financeiro quando a rotina nao eh chamada de forma semi-automatica pois |
//|esse tratamento eh realizado na rotina T	            				   |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lPanelFin  //Chamado pelo Painel Financeiro
	dbSelectArea(FinWindow:cAliasFile)
	ReCreateBrow(FinWindow:cAliasFile,FinWindow)
Endif


/*ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fa402Process³ Autor ³ Adilson H Yamaguchi   ³ Data ³ 18.03.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Processa geracao dos dados da SEFIP para folha                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fa402Processa()                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nao ha'                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAFIN                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Fa402Processa()

Local cIndex
Local cRaMat
Local aArea := GetArea()
Local cFiltro
Local nIndex
Local aStru    := SE2->(dbStruct()), ni
Local cChave   := ""
Local cAliasTrbA
Local cCPOS_SE2
Local cSepAba    := If("|"$MVABATIM,"|",",")
Local cSepAnt    := If("|"$MVPAGANT,"|",",")
Local cSepNeg    := If("|"$MV_CRNEG,"|",",")
Local cSepProv   := If("|"$MVPROVIS,"|",",")
Local cSepRec    := If("|"$MVRECANT,"|",",")
Local cSepNdf    := If("|"$MV_CPNEG,"|",",")
Local dData		  := GetNewPar("MV_DTSEFIP",CTOD("  /  /  "))
Local cChaveSE2  := ""
Local nValorTit  := 0 //base
Local nValorINSS := 0
Local nValorIRRF := 0
Local aSaldo     := {0,0}
Local aSaldoIR   := {0,0}
Local nBaseDep   := GetMV("MV_TMSVDEP",,0)

//-- Matriz do varialvel aNatureza - Id. Calculo
//-- 221 - Base INSS
//-- 064 - Valor INSS
//-- 218 - Salario Autonomo
//-- 015 - Base IR Salario
//-- 066 - IRRF
//-- 437 - sest/senat Carreteiro
//-- 047 - Liquido a Receber
//-- 059 - Dependentes de IR
Local aNatureza  := {"221", "064", "218" , "015" , "066" , "437" , "047" , "059" }
Local cNatureza  := ''
Local nTamCodFol := TamSx3("RV_CODFOL")[1]
Local nCodFol    := 0
Local lSEFIP 	   := Empty( SE2->( FieldPos( "E2_SEFIP" ) ) )

Local aRecno := {}
Local cRecno := ""
Local cRA_CC := ""
Local cNextPgto
Local lF402SRA  := Existblock("F402SRA")
Local nRecNo    := 0
Local nBaseINSS := 0
Local nBaseIRRF := 0
Local nValorBruto := 0
Local nValorLiq   := 0


Local nCount := 0
Local lPCCBaixa := SuperGetMv("MV_BX10925",.T.,"2") == "1"
Local nRecnoSA2 := 0
Local nSest := 0
Local lF402SRC := Existblock("F402SRC")
Local lF402GRC := Existblock("F402GRC")
Local lGravaSRC := .T.
Local nRegSM0
Local cFilDe
Local cFilAte
Local cFilialSRA
Local cFilialSRC
Local cAliasSa2
Local cSeqBx
Local lGrava:=.F.
Local cMat := ""
Local lF402Natur := ExistBlock("F402NATUR")
Local lF402CCUS 	:= ExistBlock("F402CCUS")
Local cCCusto := ""
Local aRegSRA	:= {}
Local cCampoFat := Pad( "NOTFAT" , TamSx3( "E2_FATURA" )[ 1 ] )//Filtra as faturas para evitar duplicidade
Local lFiltraFil := .T.
Private aRecnoSE2 := {}
Private nOrdSRA	  := RetOrdem("RA_FILIAL+RA_MAT")

If lF402Natur
	aNatureza := Execblock("F402NATUR",.F.,.F.,{aNatureza})
Endif


DBSelectArea("SRA")
cFilialSRA := xFilial("SRA")

DbSelectArea("SRC")
cFilialSRC := xFilial("SRC")

DbSelectArea("SRV")
SRV->(DbSetOrder(2))
SRV->(DbGoTop())
For nI := 1 To Len(aNatureza)
	nCodFol:= PadL(aNatureza[nI],nTamCodFol,"0")
	DBSeek(xFilial("SRV") + AllTrim(nCodFol))
 	If SRV->(EOF())
		MsgAlert("Verba nao cadastrada para o Identificador " + nCodFol + ".")
		Return
	EndIf
Next

If lSEFIP
	MsgAlert(OemToAnsi(STR0005))
	Return Nil
EndIf

// Posiciona no ultimo registro do Cadastro de funcionarios
// para verificar a ultima matricula na filial atual
If mv_par08 == 2
	lFiltraFil := .T.
	cFilDe     := cFilAnt
	cFilAte    := cFilAnt
ELSE
	cFilDe  := mv_par09	// Todas as filiais
	cFilAte := mv_par10
Endif

dbSelectArea("SM0")
dbSeek(cEmpAnt+cFilDe,.T.)

nRegSM0 := SM0->(Recno())

While SM0->(!Eof()) .and. SM0->M0_CODIGO == cEmpAnt .and. IIf( lFWCodFil, FWGETCODFILIAL, SM0->M0_CODFIL ) <= cFilAte

	cFilant := IIf( lFWCodFil, FWGETCODFILIAL, SM0->M0_CODFIL )
	dbSelectArea("SE2")
	dbSetOrder(1)
	cChave := "E2_FILIAL+E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO"
	nCount    := 0

	cAliasTrbA := GetNextAlias()
	cAliasSa2	:= cAliasTrbA
	//SELECIONA TITULOS PAGOS
	cCPOS_SE2 := ""
	aEval(DbStruct(),{|e| IIf(!Empty(cCPOS_SE2), cCPOS_SE2 += ", ",""),cCPOS_SE2 += "SE2." + AllTrim(e[1])})
	cQuery := "SELECT COUNT(*) REGISTROS"
	cQuery += " FROM " + RetSqlName("SE2") + " SE2, " +  RetSqlName("SA2") + " SA2 "
	cQuery += " WHERE E2_FILIAL = '" + xFilial("SE2") + "' and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MVABATIM,cSepAba) + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MVPAGANT,cSepAnt) + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MV_CRNEG,cSepNeg)  + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MVPROVIS,cSepProv) + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MVRECANT,cSepRec)  + " and "
	cQuery += " SE2.E2_SEFIP = ' ' and "
	cQuery += " SE2.D_E_L_E_T_=' ' and "
	If !Empty(Mv_par01) .And. !Empty(Mv_Par02)
		cQuery += " ( E2_EMISSAO >= '" + Dtos(Mv_par01) + "' and E2_EMISSAO <= '" + Dtos(Mv_par02) + "' ) and "
	EndIf
	cQuery += "(E2_PREFIXO >= '" + mv_par06 +  "' AND E2_PREFIXO <= '" + mv_par07 + "') AND "
	cQuery += " A2_FILIAL = '"+xFilial("SA2") + "' and "
	cQuery += " A2_COD = E2_FORNECE AND"
	cQuery += " A2_LOJA = E2_LOJA AND"
	cQuery += " A2_TIPO = 'F' AND "
	cQuery += " SA2.D_E_L_E_T_ = ' ' AND "
	cQuery += " SE2.E2_FATURA <> '" + cCampoFat + "' AND "
	cQuery += " E2_FORNECE BETWEEN '"+ mv_par03 + "' AND '" + mv_par04 + "' "

	If lFiltraFil
		cQuery += " AND SE2.E2_FILORIG = '" + cFilAnt + "'"
	EndIf

	cQuery := ChangeQuery(cQuery)
	dBUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasTrbA,.F.,.T.)
	If !(cAliasTrbA)->(EOF())
		nCount := (cAliasTrbA)->REGISTROS
	EndIf
	(cAliasTrbA)->(DBCloseArea())


	cQuery := "SELECT " + cCPOS_SE2 + ", SE2.R_E_C_N_O_, SA2.A2_CGC, SA2.A2_NOME, SA2.A2_END, SA2.A2_BAIRRO, SA2.A2_MUN, SA2.A2_EST, SA2.A2_CEP, SA2.A2_NUMDEP, SED.ED_CODIGO, SED.ED_CALCINS "
	cQuery += " FROM " + RetSqlName("SE2") + " SE2, " +  RetSqlName("SA2") + " SA2, "+  RetSqlName("SED") + " SED "
	cQuery += " WHERE E2_FILIAL = '" + xFilial("SE2") + "' and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MVABATIM,cSepAba) + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MVPAGANT,cSepAnt) + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MV_CRNEG,cSepNeg)  + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MVPROVIS,cSepProv) + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MVRECANT,cSepRec)  + " and "
	cQuery += " E2_TIPO NOT IN " + FormatIn(MV_CPNEG,cSepNdf)  + " and "
	cQuery += "(E2_PREFIXO >= '" + mv_par06 +  "' AND E2_PREFIXO <= '" + mv_par07 + "') AND "
	cQuery += " SE2.E2_SEFIP = ' ' AND "
	cQuery += " SE2.D_E_L_E_T_ = ' ' AND "
	If !Empty(Mv_par01) .And. !Empty(Mv_Par02)
		cQuery += " ( E2_EMISSAO >= '" + Dtos(Mv_par01) + "' and E2_EMISSAO <= '" + Dtos(Mv_par02) + "' ) AND "
	EndIf
	cQuery += " A2_FILIAL = '" + xFilial("SA2") + "' AND "
	cQuery += " A2_COD = E2_FORNECE AND "
	cQuery += " A2_LOJA = E2_LOJA AND "
	cQuery += " A2_TIPO = 'F' AND "
	cQuery += " SA2.D_E_L_E_T_ = ' ' AND "
	cQuery += " ED_FILIAL = '" + xFilial("SED") + "' AND "
	cQuery += " ED_CODIGO = E2_NATUREZ AND "
	cQuery += " SED.D_E_L_E_T_ = ' ' AND "
	cQuery += " E2_FORNECE BETWEEN '"+ mv_par03 + "' AND '" + mv_par04 + "' AND  "
	cQuery += " SE2.E2_FATURA <> '" + cCampoFat + "' AND "

	If lFiltraFil
		cQuery += " SE2.E2_FILORIG = '" + cFilAnt + "' AND "
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³PE permite regra customizada para o retorno de titulos     ³
	//³para a SEFIP, podendo por exemplo trazer titulos com valor ³
	//³de INSS zerado.                                            ³
	//³Caso contrario segue a regra padrao, de descartar os que   ³
	//³nao sofreram retencao de INSS e/ou SEST                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	If ExistBlock("F402INS")
		cQuery += ExecBlock("F402INS",.F.,.F.)
	Else
		cQuery += " ( (A2_RECINSS = 'S' AND ED_CALCINS = 'S') OR "
		cQuery += "   (A2_RECSEST = '1' AND ED_CALCSES = 'S') ) "
	Endif
	cQuery += " ORDER BY " + SqlOrder(cChave)
	cQuery := ChangeQuery(cQuery)

	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasTrbA,.F.,.T.)

	For ni := 1 to Len(aStru)
		If aStru[ni,2] != 'C' .and. FieldPos(aStru[ni,1]) > 0
			TCSetField(cAliasTrbA, aStru[ni,1], aStru[ni,2],aStru[ni,3],aStru[ni,4])
		Endif
	Next

	ProcRegua(nCount)
	While (cAliasTrbA)->(!Eof())
		aRecnoSE2 := {}
		DbSelectArea(cAliasTrbA)



		nValorTit  	:= 0
		nValorINSS 	:= 0
		nValorIRRF 	:= 0
		nSest       := 0

		DbSelectArea(cAliasTrbA)

		aAdd(aRecno, R_E_C_N_O_)  //Acumula todos os recnos para update posterior
		aAdd(aRecnoSE2, R_E_C_N_O_)  //acumula apenas os recnos do titulos do fornecedor atual

		DBSelectArea("SED")
		SED->(DBSetOrder(1))
		SED->(DBSeek(xFilial("SED")+(cAliasTrbA)->E2_NATUREZ))
		nBaseINSS := 0
		nBaseIRRF := 0
		If !SED->(EOF())
			nBaseINSS := SED->ED_BASEINS
			If SED->ED_IRRFCAR == 'S'
				nBaseIRRF := SED->ED_BASEIRC //-- Base de redução do IR Carreteiro
			Else
				nBaseIRRF := SED->ED_BASEIRF
			EndIf
		EndIf

		DBSelectArea(cAliasTrbA)
		nValorBruto := (cAliasTrbA)->(E2_VALOR+E2_IRRF+E2_ISS+E2_INSS+If(!lPCCBaixa,E2_PIS+E2_COFINS+E2_CSLL,0))
		nValorLiq   := (cAliasTrbA)->E2_VALOR
		nSEST	    := (cAliasTrbA)->(E2_SEST)
		nValorBruto += nSest

		If nBaseINSS > 0
			nValorTit  := nValorBruto * ( nBaseINSS / 100 )
		Else
			nValorTit  := nValorBruto
		EndIf
		nValorINSS := (cAliasTrbA)->E2_INSS
		aSaldo     := { nValorTit, nValorINSS }


		If nBaseIRRF > 0
			nValorTit := nValorBruto * ( nBaseIRRF / 100 )
		Else
			nValorTit := nValorBruto
		EndIf
		nValorIRRF := (cAliasTrbA)->E2_IRRF
		aSaldoIR   := { nValorTit, nValorIRRF }

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Posiciona Registros                                          ³
		//³ Aqui se faz necessaria a cria‡Æo de tratamento de filial de  ³
		//³ origem para quando se tem SE2 compartilhado e SRA e SRC       ³
		//³ exclusivos                                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SE2->(FieldPos("E2_MSFIL")) > 0
			If !Empty((cAliasTrbA)->E2_MSFIL) .and. !(Empty(cFilialSRA))
				cFilialSRA := (cAliasTrbA)->E2_MSFIL
			Endif
			If !Empty((cAliasTrbA)->E2_MSFIL) .and. !(Empty(cFilialSRC))
				cFilialSRC := (cAliasTrbA)->E2_MSFIL
			Endif
		Endif		
		//valida cadastro de funcionario
		SRA->(DbSetOrder(5))
		SRA->(DbSeek(cFilialSRA+(cAliasSA2)->A2_CGC))
		If (cAliasSA2)->A2_CGC <> SRA->RA_CIC
			lGrava:=.T.
		Else
			While  SRA->(!Eof()) .And. Alltrim((cAliasSA2)->A2_CGC) == SRA->RA_CIC //.And. SRA->RA_CATFUNC <> "A"
				If  SRA->RA_SITFOLH=="D" .Or. SRA->RA_CATFUNC <> "A"
					lGrava:=.T.
				Else
					lGrava:=.F.
					cMat:=SRA->RA_MAT
				EndIf
				SRA->(DbSkip())
			EndDo
		EndIf
		If lGrava
			//INCLUI AUTONOMO EM SRA
			SRA->(DbSetOrder(1))
			SRA->(DbSeek(IncLast(cFilialSRA),.T.))
			SRA->(DbSkip(-1))
			cRaMat := fMatSRA( cFilialSRA, SRA->RA_MAT, @aRegSRA )
			//cRaMat := Soma1(SRA->RA_MAT,9)
			//cRaMat := If(Val(SRA->RA_MAT) < 900000 .And. Val(cRaMat) < 900000, "900000",cRaMat)
			RecLock("SRA",.T.)
			SRA->RA_FILIAL    := cFilialSRA
			SRA->RA_MAT       := cRaMat
			SRA->RA_CIC       := (cAliasSA2)->A2_CGC
			SRA->RA_NOME      := (cAliasSA2)->A2_NOME
			SRA->RA_TIPOPGT   := "M"
			If lF402CCUS
				cCCusto	:= ExecBlock("F402CCUS",.F.,.F.,{cAliasTrbA})
				SRA->RA_CC        := cCCusto
				cRA_CC            := cCCusto
			Else
				SRA->RA_CC        := mv_par05
				cRA_CC            := mv_par05
			EndIf
			SRA->RA_CATFUNC   := "A"   //autonomo
			SRA->RA_CATEG     := "15" //Categoria de Autonomo utilizado na SEFIP.
			SRA->RA_ENDEREC   := (cAliasSA2)->A2_END
			SRA->RA_BAIRRO    := (cAliasSA2)->A2_BAIRRO
			SRA->RA_MUNICIP   := (cAliasSA2)->A2_MUN
			SRA->RA_ESTADO    := (cAliasSA2)->A2_EST
			SRA->RA_CEP       := (cAliasSA2)->A2_CEP
			SRA->RA_DEPIR     := StrZero((cAliasSA2)->A2_NUMDEP,TamSx3("RA_DEPIR")[1])
			SRA->RA_ADMISSA   := CToD("01/"+StrZero(Month((cAliasTrbA)->E2_EMISSAO),2)+"/"+StrZero(Year((cAliasTrbA)->E2_EMISSAO),4))

			//Ponto de entrada para complemento do cadastro de autonomo gerado a partir da
			//integracao FIN x GPE para SEFIP
			If lF402SRA
				ExecBlock("F402SRA",.F.,.F.,{.F.,cAliasTrbA})
			Endif
			MsUnLock()
		Else
			//Ponto de entrada para complemento do cadastro de autonomo gerado a partir da
			//integracao FIN x GPE para SEFIP
			If lF402SRA
				ExecBlock("F402SRA",.F.,.F.,{.T.,cAliasTrbA})
			Endif
			SRA->(DbSetOrder(1))
			SRA->(DbSeek(cFilialSRA+cMat))
			cRA_CC      := SRA->RA_CC
		EndIf

		cNextPgto := AllTrim(NextPgto(SRA->RA_MAT,cFilialSRC))
		cSeqSRC   := AllTrim(NextSRC (SRA->RA_MAT,cFilialSRC))
		lGravaSRC := .T.

		//Ponto de entrada para permitir ou nao a gravacao dos dados no SRC
		If lF402GRC
			lGravaSRC := ExecBlock("F402GRC",.F.,.F.)
		Endif

		DBSelectArea("SED")
		SED->(DBSetOrder(1))
		SED->(DBSeek(xFilial("SED")+(cAliasTrbA)->E2_NATUREZ))
		If lGravaSRC .and. Val(cNextPgto) < 100
			//Inclui Movimento Mensal em SRC - id.: 221 e 064
			For nI := 1 To 2
				SRV->(DbSetOrder(2))
				nCodFol:= PadL(aNatureza[nI],nTamCodFol,"0")
				SRV->(DBSeek(xFilial("SRV") + nCodFol))
				If !SRC->(DbSeek(cFilialSRC+SRA->RA_MAT+SRV->RV_COD+SRA->RA_CC+cNextPgto))
					RecLock("SRC",.T.)
					SRC->RC_FILIAL	:= cFilialSRC
					SRC->RC_MAT		:= SRA->RA_MAT
					SRC->RC_PD		:= SRV->RV_COD
					SRC->RC_TIPO1	:= "V"
					SRC->RC_QTDSEM	:= 0
					SRC->RC_HORAS	:= 0
					SRC->RC_VALOR	:= aSaldo[nI]
					SRC->RC_DATA	:= IIf(Empty(mv_par12),CtoD(AllTrim(Str(Last_Day(dDataBase))+SubStr(DtoC(dDataBase),3,Len(DtoC(dDataBase))))),mv_par12)
					SRC->RC_SEMANA	:= cNextPgto
					SRC->RC_CC		:= SRA->RA_CC
					SRC->RC_PARCELA:= 0
					SRC->RC_TIPO2	:= "G"
					SRC->RC_SEQ		:= cSeqSRC
				Else
					RecLock("SRC",.F.)
					SRC->RC_VALOR	+= aSaldo[nI]
				Endif
				SRC->(MsUnlock())

				//Ponto de entrada para complemento do registro no SRC gerado a partir da
				//integracao FIN x GPE para SEFIP
				//E passado como parametro qual o movimento esta sendo gravado
				//1 = Base do Inss
				//2 = Valor do Inss
				If lF402SRC
					ExecBlock("F402SRC",.F.,.F.,nI)
				Endif
			Next
		EndIf


		DBSelectArea("SED")
		SED->(DBSetOrder(1))
		SED->(MSSeek(xFilial("SED")+(cAliasTrbA)->E2_NATUREZ))
		//Inclusão do registro correspondente a Verba de Codigo 218.
		//que recebera o Valor Bruto do Titulo.
		If lGravaSRC .And. MV_PAR11 == 1 .AND. SED->ED_INSSCAR == "S" .and. Val(cNextPgto) < 100

			SRV->(DbSetOrder(2))
			nCodFol:= PadL(aNatureza[3],nTamCodFol,"0")
			SRV->(DBSeek(xFilial("SRV") + nCodFol))
			If !SRC->(DbSeek(cFilialSRC+SRA->RA_MAT+SRV->RV_COD+SRA->RA_CC+cNextPgto))
				RecLock("SRC",.T.)
				SRC->RC_FILIAL	:= cFilialSRC
				SRC->RC_MAT		:= SRA->RA_MAT
				SRC->RC_PD		:= SRV->RV_COD
				SRC->RC_TIPO1	:= "V"
				SRC->RC_QTDSEM	:= 0
				SRC->RC_HORAS	:= 0
				SRC->RC_VALOR	:= nValorBruto
				SRC->RC_DATA	:= IIf(Empty(mv_par12),CtoD(AllTrim(Str(Last_Day(dDataBase))+SubStr(DtoC(dDataBase),3,Len(DtoC(dDataBase))))),mv_par12)
				SRC->RC_SEMANA	:= cNextPgto
				SRC->RC_CC		:= SRA->RA_CC
				SRC->RC_PARCELA:= 0
				SRC->RC_TIPO2	:= "G"
				SRC->RC_SEQ		:= cSeqSRC
			Else
				RecLock("SRC",.F.)
				SRC->RC_VALOR	+= nValorBruto
			Endif
			SRC->(MsUnlock())

			//Ponto de entrada para complemento do registro no SRC gerado a partir da
			//integracao FIN x GPE para SEFIP
			//E passado como parametro qual o movimento esta sendo gravado
			//3 = Salario do Autonimo
			If lF402SRC
				ExecBlock("F402SRC",.F.,.F.,nI)
			Endif
		Endif


		DBSelectArea("SED")
		SED->(DBSetOrder(1))
		SED->(MSSeek(xFilial("SED")+(cAliasTrbA)->E2_NATUREZ))
		If lGravaSRC .and. Val(cNextPgto) < 100
			//-- Inclui Movimento Mensal em SRC referente ao IRRF - id.: 015 e 066
			For nI := 1 To 2
				If !Empty(aSaldoIR[nI])
					//-- Somado +3 para coincidir com a posição correta do array.
					cNatureza := aNatureza[nI+3]
					nCodFol:= PadL(aNatureza[nI+3],nTamCodFol,"0")
					SRV->(DbSetOrder(2))
					SRV->(DBSeek(xFilial("SRV") + nCodFol))
					If !SRC->(DbSeek(cFilialSRC+SRA->RA_MAT+SRV->RV_COD+SRA->RA_CC+cNextPgto))
						RecLock("SRC",.T.)
						SRC->RC_FILIAL	:= cFilialSRC
						SRC->RC_MAT		:= SRA->RA_MAT
						SRC->RC_PD		:= SRV->RV_COD
						SRC->RC_TIPO1	:= "V"
						SRC->RC_QTDSEM	:= 0
						SRC->RC_HORAS	:= 0
						SRC->RC_VALOR	:= aSaldoIR[nI]
						SRC->RC_DATA	:= IIf(Empty(mv_par12),CtoD(AllTrim(Str(Last_Day(dDataBase))+SubStr(DtoC(dDataBase),3,Len(DtoC(dDataBase))))),mv_par12)
						SRC->RC_SEMANA	:= cNextPgto
						SRC->RC_CC		:= SRA->RA_CC
						SRC->RC_PARCELA:= 0
						SRC->RC_TIPO2	:= "G"
						SRC->RC_SEQ		:= cSeqSRC
					Else
						RecLock("SRC",.F.)
						SRC->RC_VALOR	+= aSaldoIR[nI]
					Endif

					//Ponto de entrada para complemento do registro no SRC gerado a partir da
					//integracao FIN x GPE para SEFIP
					//E passado como parametro qual o movimento esta sendo gravado
					//4 = Base do IRRF
					//5 = Valor do IRRF
					If lF402SRC
						ExecBlock("F402SRC",.F.,.F.,nI+3)
					Endif
				Endif
			Next
		EndIf


		DBSelectArea("SED")
		SED->(DBSetOrder(1))
		SED->(MSSeek(xFilial("SED")+(cAliasTrbA)->E2_NATUREZ))
		//Inclui Movimento Mensal em SRC referente ao Sest/senat - id.: 149
		If lGravaSRC .And. !Empty(nSest) .and. Val(cNextPgto) < 100
			SRV->(DbSetOrder(2))
			nCodFol:= PadL(aNatureza[6],nTamCodFol,"0")
			SRV->(DBSeek(xFilial("SRV") + nCodFol))
			If !SRC->(DbSeek(cFilialSRC+SRA->RA_MAT+SRV->RV_COD+SRA->RA_CC+cNextPgto))
				RecLock("SRC",.T.)
				SRC->RC_FILIAL	:= cFilialSRC
				SRC->RC_MAT		:= SRA->RA_MAT
				SRC->RC_PD		:= SRV->RV_COD
				SRC->RC_TIPO1	:= "V"
				SRC->RC_QTDSEM	:= 0
				SRC->RC_HORAS	:= 0
				SRC->RC_VALOR	:= nSest
				SRC->RC_DATA	:= IIf(Empty(mv_par12),CtoD(AllTrim(Str(Last_Day(dDataBase))+SubStr(DtoC(dDataBase),3,Len(DtoC(dDataBase))))),mv_par12)
				SRC->RC_SEMANA	:= cNextPgto
				SRC->RC_CC		:= SRA->RA_CC
				SRC->RC_PARCELA:= 0
				SRC->RC_TIPO2	:= "G"
				SRC->RC_SEQ		:= cSeqSRC
			Else
				RecLock("SRC",.F.)
				SRC->RC_VALOR	+= nSest
			Endif
			SRC->(MsUnlock())

			//Ponto de entrada para complemento do registro no SRC gerado a partir da
			//integracao FIN x GPE para SEFIP
			//E passado como parametro qual o movimento esta sendo gravado
			//6 = Terceiro - Sest/Senat
			If lF402SRC
				ExecBlock("F402SRC",.F.,.F.,6)
			Endif
		Endif


		DBSelectArea("SED")
		SED->(DBSetOrder(1))
		SED->(MSSeek(xFilial("SED")+(cAliasTrbA)->E2_NATUREZ))
		//Inclui Movimento Mensal em SRC referente ao Valor Liquido - id.: 047
		If lGravaSRC .and. Val(cNextPgto) < 100
			SRV->(DbSetOrder(2))
			nCodFol:= PadL(aNatureza[7],nTamCodFol,"0")
			SRV->(DBSeek(xFilial("SRV") + nCodFol))
			If !SRC->(DbSeek(cFilialSRC+SRA->RA_MAT+SRV->RV_COD+SRA->RA_CC+cNextPgto))
				RecLock("SRC",.T.)
				SRC->RC_FILIAL	:= cFilialSRC
				SRC->RC_MAT		:= SRA->RA_MAT
				SRC->RC_PD		:= SRV->RV_COD
				SRC->RC_TIPO1	:= "V"
				SRC->RC_QTDSEM	:= 0
				SRC->RC_HORAS	:= 0
				SRC->RC_VALOR	:= nValorLiq
				SRC->RC_DATA	:= IIf(Empty(mv_par12),CtoD(AllTrim(Str(Last_Day(dDataBase))+SubStr(DtoC(dDataBase),3,Len(DtoC(dDataBase))))),mv_par12)
				SRC->RC_SEMANA	:= cNextPgto
				SRC->RC_CC		:= SRA->RA_CC
				SRC->RC_PARCELA:= 0
				SRC->RC_TIPO2	:= "G"
				SRC->RC_SEQ		:= cSeqSRC
			Else
				RecLock("SRC",.F.)
				SRC->RC_VALOR	+= nValorLiq
			Endif
			SRC->(MsUnlock())

			//Ponto de entrada para complemento do registro no SRC gerado a partir da
			//integracao FIN x GPE para SEFIP
			//E passado como parametro qual o movimento esta sendo gravado
			//7 = Liq. A Receber
			If lF402SRC
				ExecBlock("F402SRC",.F.,.F.,7)
			Endif
		Endif

		DBSelectArea("SED")
		SED->(DBSetOrder(1))
		SED->(MSSeek(xFilial("SED")+(cAliasTrbA)->E2_NATUREZ))
		//--Inclui Movimento Mensal em SRC referente ao Valor Dependente IR - id.: 059
		//--Para dependente de IR, so pode ser incluido um unica vez para a mesma matricula.
		//--e somente se o fornecedor possuir dependentes informados A2_NUMDEP.
		If lGravaSRC .And. !Empty((cAliasSA2)->A2_NUMDEP) .and. Val(cNextPgto) < 100
			SRV->(DbSetOrder(2))
			nCodFol:= PadL(aNatureza[8],nTamCodFol,"0")
			SRV->(DBSeek(xFilial("SRV") + nCodFol))
			If !SRC->(DbSeek(cFilialSRC+SRA->RA_MAT+SRV->RV_COD+SRA->RA_CC/*+cNextPgto*/))
				RecLock("SRC",.T.)
				SRC->RC_FILIAL	:= cFilialSRC
				SRC->RC_MAT		:= SRA->RA_MAT
				SRC->RC_PD		:= SRV->RV_COD
				SRC->RC_TIPO1	:= "V"
				SRC->RC_QTDSEM	:= 0
				SRC->RC_HORAS	:= (cAliasSA2)->A2_NUMDEP
				SRC->RC_VALOR	:= nBaseDep * (cAliasSA2)->A2_NUMDEP
				SRC->RC_DATA	:= IIf(Empty(mv_par12),CtoD(AllTrim(Str(Last_Day(dDataBase))+SubStr(DtoC(dDataBase),3,Len(DtoC(dDataBase))))),mv_par12)
				SRC->RC_SEMANA	:= cNextPgto
				SRC->RC_CC		:= SRA->RA_CC
				SRC->RC_PARCELA:= 0
				SRC->RC_TIPO2	:= "G"
				SRC->RC_SEQ		:= cSeqSRC
			Endif
			SRC->(MsUnlock())

			//Ponto de entrada para complemento do registro no SRC gerado a partir da
			//integracao FIN x GPE para SEFIP
			//E passado como parametro qual o movimento esta sendo gravado
			//8 = Valor Dependente do IR
			If lF402SRC
				ExecBlock("F402SRC",.F.,.F.,8)
			Endif
		Endif

		DbSelectArea(cAliasTrbA)
		DbSkip()
		IncProc()
	End


	If Len(aRecno) > 0
		cRecno:=""
		For nI:=1 To Len(aRecno)
			cRecno += IIf(nI==1,"",",") + Str(aRecno[nI])
		Next
		cQuery := "UPDATE "
		cQuery += RetSqlName("SE2")+" "
		cQuery += "SET E2_SEFIP = 'X'"
		cQuery += " WHERE R_E_C_N_O_ IN (" + cRecno + ") AND "
		cQuery += "D_E_L_E_T_ = ' ' "
		TcSqlExec(cQuery)
	EndIf
	(cAliasTrbA)->(DbCloseArea())

	If !lFiltraFil .And. Empty(xFilial("SE2"))
		Exit
	Endif
	dbSelectArea("SM0")
	SM0->(dbSkip())
EndDo

SM0->(dbGoTo(nRegSM0))
cFilAnt := IIf( lFWCodFil, FWGETCODFILIAL, SM0->M0_CODFIL )
RestArea(aArea)
Return Nil

Static Function IncLast( cString )
Return Left(cString, Len(cString)-1)+;
       CHR(ASC(RIGHT(cString,1))+1)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³FINA402   ºAutor  ³Microsiga           º Data ³  06/09/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function NextPgto(cMAT)
Local aArea := GetArea()
Local cNextPgto := 1
	DbSelectArea("SRC")
	DbSetOrder(1)
	DbSeek(xFilial("SRC")+cMAT)
	If EOF()
		cNextPgto := "1"
	Else
		cNextPgto := Str(Val(RC_SEMANA) + 1)
	EndIf
	DbSelectArea(aArea)
Return cNextPgto

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³FINA402   ºAutor  ³Microsiga           º Data ³  06/09/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function NextSRC(cMAT)
Local aArea := GetArea()
Local cSeqSRC := "0"

	DbSelectArea("SRC")
	DbSetOrder(1)
	SRC->(DbGoTop())
	DbSeek(xFilial("SRC")+cMAT)

	If EOF() .and. MV_PAR11 == 1 .AND. SED->ED_INSSCAR == "S"
		cSeqSRC := "1"
	Else
		If MV_PAR11 == 1 .AND. SED->ED_INSSCAR == "S" .and. SRC->(DbSeek(SRC->RC_FILIAL+SRA->RA_MAT+SRV->RV_COD+SRA->RA_CC+SRC->RC_SEMANA+cSeqSRC))
			cSeqSRC := SRC->RC_SEQ
			While (SRC->(RC_FILIAL+RC_MAT+RC_PD+RC_CC+RC_SEMANA+RC_SEQ)) == ;
					(SRC->RC_FILIAL + SRA->RA_MAT + SRV->RV_COD + SRA->RA_CC + SRC->RC_SEMANA + cSeqSRC)
 				cSeqSRC := Soma1(cSeqSRC,Len(cSeqSRC))
				dBSkip()
			EndDo
		EndIf
	Endif
	DbSelectArea(aArea)
Return cSeqSRC
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fMatSRA   ºAutor  ³ Igor Franzoi		 º Data ³02/07/2012   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Função que trás a matrícula a ser utilizada				  º±±
±±º          ³ Localiza matrículas com lacunas                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fMatSRA( cFilSRA, cLastMat, aReg )

Local cNextMat	:= ""
Local cPesqKey	:= ""
Local cNextFin	:= ""
Local cMatIni	:= "900000"

Local nPosFil	:= 0
Local nRecSRA	:= 0

Local aArea		:= GetArea()

dbSelectArea("SRA")
dbSetOrder(nOrdSRA)

If ( Soma1(cLastMat,9) > "999999" )

	If ( nPosFil := aScan( aReg, { |x| x[01] == cFilSRA } ) ) > 0
		//Se encontrei a filial no array, posiciono no ultimo recno pesquisado anteriormente
		SRA->(dbGoTo(aReg[nPosFil,02]))
	Else
		cPesqKey := cFilSRA+cMatIni
		SRA->(dbSeek(cPesqKey))
	EndIf

	cNextFin := Soma1(SRA->RA_MAT,9)

	While SRA->(!Eof())
		SRA->(dbSkip())

		If SRA->(!Eof())

			If !(cNextFin == SRA->RA_MAT)
				cNextMat := cNextFin
				nRecSRA  := SRA->(Recno())
				If !SRA->(dbSeek(cFilSRA+cNextMat))
					If ( nPosFil > 0 )
						aReg[nPosFil,02] := nRecSRA
					Else
						aAdd( aReg, { cFilSRA, nRecSRA } )
					EndIf
					Exit
				EndIf
			Else
				cNextFin := Soma1(cNextFin,9)
			EndIf
		Else
			cNextMat := cNextFin
		EndIf

	EndDo

ElseIf (cLastMat < cMatIni .and. Soma1(cLastMat,9) < cMatIni)
	cLastMat := '899999'
	cPesqKey := cFilSRA+Soma1(cLastMat,9)
	If !SRA->(dbSeek(cPesqKey))
		cNextMat := Soma1(cLastMat,9)
		If ( nPosFil > 0 )
			aReg[nPosFil,02] := nRecSRA
		Else
			aAdd( aReg, { cFilSRA, nRecSRA } )
		EndIf
	EndIf
Else
	cNextMat := Soma1(cLastMat,9)
	aReg := {}
EndIf

If ( cNextMat > "999999" )
	If TestPictSRA()
		MsgAlert(OemToAnsi(STR0012),OemToAnsi(STR0007)) // "Para utilizar Matrículas maiores que 999999, devem ser alteradas as mascáras do dicionário para os campos de matrícula." "Atenção"
	EndIf
EndIf

RestArea(aArea)

Return cNextMat

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fMatSRA   ºAutor  ³ Igor Franzoi		 º Data ³03/07/2012   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Testa picture do SRA										  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function TestPictSRA()

Local lRet := .F.

Local aArea := GetArea()

dbSelectArea("SX3")
dbSetOrder(2)

SX3->(dbSeek("RA_MAT"))
If (SX3->X3_PICTURE == "@!")
	lRet := .T.
EndIf

RestArea(aArea)

Return lRet
