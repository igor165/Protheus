#INCLUDE 'PROTHEUS.CH'
#INCLUDE 'FINA010.CH'
#INCLUDE 'FWMVCDEF.CH'
#INCLUDE 'FWADAPTEREAI.CH'

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINA010
Cadastro de naturezas

Esse fonte é usado por todos os paises, por esse motivo tudo que existir aqui deve ser referente ao
padrão. Se alguma regra se aplica somente a um pais ou a alguns paises, a regra deve ser escrita
no fonte correspondente ao país(es).

As validações e integrações realizadas após/durante a gravação estão definidas nos eventos do modelo,
na classe xpto.

@type Function

@author Pedro Pereira Lima
@since 18/05/2017
@version P12.1.17

/*/
//-------------------------------------------------------------------------------------------------------------
Function FINA010(aRotAuto,nOpcAuto)
Local oBrowse As Object

Private lF010Auto	:= .F.

Default nOpcAuto := 3


If ValType(aRotAuto) == "A"
	lF010Auto	:= .T.
	F010Auto(aRotAuto,nOpcAuto)
Else
	oBrowse := BrowseDef()
	oBrowse:Activate()
EndIf

Return

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} BrowseDef()
Define o browse padrão para o cadastro de naturezas

@type Function

@author Pedro Pereira Lima
@since 18/05/2017
@version P12.1.17

/*/
//-------------------------------------------------------------------------------------------------------------
Static Function BrowseDef() As Object
Local oBrowse As Object

oBrowse := FWMBrowse():New()
oBrowse:SetAlias('SED')
oBrowse:SetDescription(STR0006) //"Atualização de Naturezas"

Return oBrowse

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} ModelDef()
Define o model padrão para o cadastro de naturezas

Eventos:
	- padrão

@type Function

@author Pedro Pereira Lima
@since 18/05/2017
@version P12.1.17

/*/
//-------------------------------------------------------------------------------------------------------------
Static Function ModelDef() As Object
Local oModel		As Object
Local oStrSED		As Object
Local oEventMain	As Object

oStrSED		:= FWFormStruct(1,"SED")
oEventMain	:= FINA010EVDEF():New()

oModel := MPFormModel():New( 'FINA010', /* bPreValidacao */, {|oModel|Fin010Pos( oModel )} /* bPosValidacao */  )

oModel:SetDescription(STR0067)
oModel:addFields('SEDMASTER',,oStrSED)

oModel:InstallEvent( 'FINA010EVDEF', /*cOwner*/, oEventMain )

Return oModel

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} ViewDef()
Definição de View para o cadastro de naturezas

@type Function

@author Pedro Pereira Lima
@since 19/05/2017
@version 12.1.17

/*/
//-------------------------------------------------------------------------------------------------------------
Static Function ViewDef() As Object
Local oModel		As Object
Local oStruSED		As Object
Local oView			As Object
Local lIntPFS   	As Logical
Local aF3CCZ    	As ARRAY
Local nI        	As Numeric
Local nA        	As Numeric
Local cMaiorOrd    	As Character
Local nOrdTABCCZ 	As Numeric

oModel		:= FWLoadModel( 'FINA010' )
oStruSED	:= FWFormStruct( 2, 'SED' )
oView		:= FWFormView():New()

lIntPFS   := SuperGetMV("MV_JURXFIN",,.F.)

cMaiorOrd	:= ""
nOrdTABCCZ	:= 0
aF3CCZ		:= {}


If !lIntPFS .And. SED->(ColumnPos("ED_CCJURI")) > 0 //Proteção
	oStruSED:RemoveField("ED_CMOEJUR")
	oStruSED:RemoveField("ED_DMOEJUR")
	oStruSED:RemoveField("ED_TPCOJR")
	oStruSED:RemoveField("ED_CFJUR")
	oStruSED:RemoveField("ED_CPJUR")
	oStruSED:RemoveField("ED_CRJUR")
	oStruSED:RemoveField("ED_BANCJUR")
	oStruSED:RemoveField("ED_CBANCO")
	oStruSED:RemoveField("ED_CAGENC")
	oStruSED:RemoveField("ED_CCONTA")
	oStruSED:RemoveField("ED_DBANCO")
	oStruSED:RemoveField("ED_CCJURI")
	oStruSED:RemoveField("ED_RATJUR")
EndIf

// Confere ordenação dos campos de retorno da consulta (F3) CCZ
// Estrutura aF3CCZ {{'CAMPO','SEQUENCIA','POSICAO NA TELA'},..,{n}} 
aF3CCZ := {{'ED_TABCCZ',1,""},{'ED_CODCCZ',2,""},{'ED_GRUCCZ',3,""},{'ED_DTFCCZ',4,""}}

nOrdTABCCZ := ASCAN(oStruSED:aFields,{ |E| aF3CCZ[1,1] == Alltrim(E[1]) })

If !(nOrdTABCCZ > 0 .And. oStruSED:aFields[nOrdTABCCZ + 1 ][1] == aF3CCZ[2][1] .And. ;
	oStruSED:aFields[nOrdTABCCZ + 2 ][1] == aF3CCZ[3][1] .And. ;
	oStruSED:aFields[nOrdTABCCZ + 3 ][1] == aF3CCZ[4][1])
	For nI := 1 TO LEN(aF3CCZ)
		// Verifica existência na View 
		If ASCAN(oStruSED:aFields,{ |E| aF3CCZ[nI,1] == ALLTRIM(E[1]) }) > 0
			// Verifica e controla o sequenciamento dos 4 campos na lista de campos
			If nI == 1

				// Pega a maior ordem dos campos da View e soma 1
				For nA := 1 To Len(oStruSED:AFIELDS)
					cMaiorOrd := Iif(cMaiorOrd < oStruSED:AFIELDS[nA][2], oStruSED:AFIELDS[nA][2], cMaiorOrd)				 
				Next nA
				
				// atribui a maior ordem ao primeiro item do array aF3CCZ
				aF3CCZ[nI,3] := cMaiorOrd	
			ElseIf nI > 1
				aF3CCZ[nI,3] := Soma1(aF3CCZ[nI-1,3])		
			EndIf

			oStruSED:SetProperty( aF3CCZ[nI,1], MVC_VIEW_ORDEM, Alltrim(aF3CCZ[nI,3]) )

		Elseif ASCAN(oStruSED:aFields,{ |E| aF3CCZ[1,1] == Alltrim(E[1]) }) > 0
		
			// Retira a consulta padrão para não dar error log caso não encontre os quatro campos na View
			oStruSED:SetProperty( 'ED_TABCCZ', MVC_VIEW_LOOKUP, "" )

		EndIf
	Next
EndIf

oView:SetModel(oModel)

oView:AddField('SEDMASTER' , oStruSED )

oView:CreateVerticalBox( 'BOXMAIN', 100 )
oView:SetOwnerView('SEDMASTER','BOXMAIN')

oView:AddUserButton( STR0011, '', { || F010SldCTb() }, , , { MODEL_OPERATION_VIEW } )

Return oView

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} MenuDef()
Definição de Menu - MVC

@type Function

@author Pedro Pereira Lima
@since 19/05/2017
@version 12.1.17

/*/
//-------------------------------------------------------------------------------------------------------------
Static Function MenuDef() As Array
Local aRotina As Array

aRotina := {}

ADD OPTION aRotina Title STR0002 Action 'VIEWDEF.FINA010' OPERATION 2 ACCESS 0 //'Visualizar'
ADD OPTION aRotina Title STR0003 Action 'VIEWDEF.FINA010' OPERATION 3 ACCESS 0 //'Incluir'
ADD OPTION aRotina Title STR0004 Action 'VIEWDEF.FINA010' OPERATION 4 ACCESS 0 //'Alterar'
ADD OPTION aRotina Title STR0005 Action 'VIEWDEF.FINA010' OPERATION 5 ACCESS 0 //'Excluir'

Return aRotina

/*/{Protheus.doc} IntegDef
Função para integração via Mensagem Única Totvs.

@author  Felipe Raposo
@version P12.1.17
@since   07/05/2018
/*/
Static Function IntegDef(cXml, cTypeTrans, cTypeMsg, cVersion, cTransac)
Return FINI010I(cXml, cTypeTrans, cTypeMsg, cVersion, cTransac)

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} F010Auto()
Função que realiza a rotina automatica para o FINA010 em MVC

@type Function

@author Pedro Pereira Lima
@since 23/05/2017
@version 12.1.17
/*/
//-------------------------------------------------------------------------------------------------------------
Function F010Auto( aRotAuto, nOpcAuto )

//------------------------------------------------------------------------------------------------
// Aqui é usado o LoadModel() e não ModelDef() pois o LoadModel trata a localização e carrega o
// o model referente a localização (se houver)
// Se for colocado modeldef() vai carregar o modelo default e não o localizado
//------------------------------------------------------------------------------------------------
FWMVCRotAuto( FWLoadModel( 'FINA010' ), 'SED', nOpcAuto, { { 'SEDMASTER', aRotAuto } }, , .T. )

Return

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} F010NatWhen()
When dos campos de tipo e natureza pai - MVC

@type Function

@author Pedro Pereira Lima
@since 19/05/2017
@version 12.1.17

/*/
//-------------------------------------------------------------------------------------------------------------
Function F010NatWhen() as logical

Local lRet       := .F.
Local aArea      := {}
Local aAreaSED   := {}
Local cNatureza  := ""
Local oModel     as object

If FwIsInCallStack("msExecAuto") .OR. FwIsInCallStack("NatColar")
	lRet := .T.
ElseIf FNatSAIsOn()
	If ReadVar() == "M->ED_PAI"
		lRet := .T.
	ElseIf ReadVar() == "M->ED_TIPO"
		oModel := FWModelActive()
		If oModel:GetOperation() == MODEL_OPERATION_INSERT
			lRet := .T.
		ElseIf oModel:GetOperation() == MODEL_OPERATION_UPDATE
			// Tipo sintético sem filhos pode ser alterado.
			If SED->ED_TIPO == "1"  // 1-Sintético.
				aArea := GetArea()
				aAreaSED  := SED->(GetArea())
				cNatureza := SED->ED_CODIGO
				SED->(dbSetOrder(4))  // ED_FILIAL + ED_PAI.
				lRet := !(SED->(MsSeek(xfilial("SED") + cNatureza, .F.)))
				RestArea(aAreaSED)
				RestArea(aArea)
			Else
				lRet := .T.
			Endif
		Endif
	Endif
Endif

Return lRet

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FA010Pai()
Valid do campo de natureza pai

@type Function

@author Mauricio Pequim Jr.
@since 17/12/2012
@version 12.1.17

/*/
//-------------------------------------------------------------------------------------------------------------
Function FA010Pai(cNatPai) As Logical
Local lRet		As Logical
Local aAreaSED	As Array

lRet		:= .T.
aAreaSED	:= SED->(GetArea())

If M->ED_CODIGO == cNatPai
	Help( " ", 1, "A010PAI1", /**/, STR0058, 1, 0) //"Os códigos da natureza e natureza pai não podem ser os mesmos."
	lRet := .F.
Else
	SED->(DbSetOrder(1)) //ED_FILIAL+ED_CODIGO
	If !Empty( cNatPai )
		If SED->( MsSeek( xFilial("SED") + cNatPai ) )
			If SED->ED_TIPO $ " /2"
		 		Help( " ", 1, "A010PAI2", /**/, STR0059, 1, 0 ) //"Tentativa de relacionar a natureza a uma natureza analítica. Apenas naturezas sintéticas podem ser relacionadas como natureza pai."
				lRet := .F.
			Endif
		Else
	 		Help( " ", 1, "A010PAI3", /**/, STR0061, 1, 0 ) //"Natureza não encontrada."
			lRet := .F.
		Endif
	Endif
Endif

RestArea( aAreaSED )

Return lRet

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FA010Bar()
Botões específicos da consulta de naturezas

@type Function

@author Mauricio Pequim Jr.
@since 23/11/2009
@version 12.1.17

/*/
//-------------------------------------------------------------------------------------------------------------
Function F010SldCtb()
Local aSaldos		As Array
Local oDlg			As Object
Local bSldCTBAnt	As Codeblock
Local bSldCTBAtu	As Codeblock
Local aSaldosAnt	As Array
Local aSaldosAtu	As Array
Local cSalAnt		As Character
Local cMovPer		As Character
Local cSalAtu		As Character

aSaldos		:= {}
aSaldosAnt	:= {}
aSaldosAtu	:= {}


If !Empty (SED->ED_CONTA)
	//--------------------------------------------------------
	// Saldo da conta contabil relacionada a Natureza
	// Saldo inicial ( ultimo dia do mes anterior )
	//--------------------------------------------------------
	bSldCTBAnt	:= {||SaldoCT7(SED->ED_CONTA,FirstDay(dDatabase)-1,"01")}

	//--------------------------------------------------------
	// Saldo atual ( database )
	//--------------------------------------------------------
	bSldCTBAtu	:= {||SaldoCT7(SED->ED_CONTA,dDatabase,"01")}

	//--------------------------------------------------------
	// Retorno SaldoCT7:
	// [1] Saldo Atual (com sinal)
	// [2] Debito na Data
	// [3] Credito na Data
	// [4] Saldo Atual Devedor
	// [5] Saldo Atual Credor
	// [6] Saldo Anterior (com sinal)
	// [7] Saldo Anterior Devedor
	// [8] Saldo Anterior Credor
	//--------------------------------------------------------

	//--------------------------------------------------------
	// Adiciona botoes do usuario na EnchoiceBar
	//--------------------------------------------------------
	If ExistBlock( "F010BUT" )
		bSldCTBAnt := ExecBlock( "F010BUT", .F., .F., {1} )
		bSldCTBAtu := ExecBlock( "F010BUT", .F., .F., {2} )
	EndIf

	aSaldosAnt := Eval(bSldCTBAnt)
	aSaldosAtu := Eval(bSldCTBAtu)

	cSalAnt :=  ValorCtb( aSaldosAnt[1]/*------------*/, 0, 0, 17, 2, .T.,,, SED->ED_CONTA,,,,, .T., .F. )
	cMovPer :=  ValorCtb( aSaldosAtu[1] - aSaldosAnt[1], 0, 0, 17, 2, .T.,,, SED->ED_CONTA,,,,, .T., .F. )
	cSalAtu := 	ValorCtb( aSaldosAtu[1]/*------------*/, 0, 0, 17, 2, .T.,,, SED->ED_CONTA,,,,, .T., .F. )

	DEFINE MSDIALOG oDlg FROM 00,00 TO 120, 300 TITLE STR0012 PIXEL //"Saldo Contábil"
	@ 003, 003 Say STR0013 OF oDlg PIXEL //"Saldo Anterior: "
	@ 003, 095 Say cSalAnt OF oDlg PIXEL
	@ 015, 003 Say STR0014 OF oDlg PIXEL //"Movimento no periodo: "
	@ 015, 095 Say cMovPer OF oDlg PIXEL
	@ 029, 003 Say STR0015 OF oDlg PIXEL //"Saldo Atual: "
	@ 029, 095 Say cSalAtu OF oDlg PIXEL

	@ 001, 001 TO 40,150 OF oDlg PIXEL

	DEFINE SBUTTON FROM 045,100	TYPE 1 ACTION oDlg:End() ENABLE OF oDlg

	ACTIVATE MSDIALOG oDlg CENTERED

Else

   Help("  ",1,"EMPTYCC",,STR0016,1,1) //"Conta contábil não preenchida para esta natureza"

EndIf

Return

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} Fin010Vldper

Função para alterar o valor dos campos de percentual de cálculo dos impostos quando os mesmos forem
alterados para "Não". O valor do campo, nesse caso, será definido como zero

@type Function

@author Caio Quiqueto dos Santos
@version 12.1.17
@since 24/02/2015

@return True

/*/
//-------------------------------------------------------------------------------------------------------------
Function Fin010Vldper() As Logical

If M->ED_CALCCSL == 'N'
	M->ED_PERCCSL := 0
EndIf

If M->ED_CALCCOF == 'N'
	M->ED_PERCCOF := 0
EndIf

If M->ED_CALCPIS == 'N'
	M->ED_PERCPIS := 0
EndIf

Return .T.

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} Fin010VldEsc

Validação do campo ED_ESCRIT

@author Mauricio Pequim Jr
@version 12.1.17
@since 12/03/13

@return True

/*/
//-------------------------------------------------------------------------------------------------------------
Function Fin010VldEsc(cEscritorio) As Logical
Default cEscritorio := ''

If !Empty(cEscritorio) .And. cEscritorio == '2'
	M->ED_GRPJUR := '2'
Endif

Return .T.

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} Fin010Pos

Pós-Validação do Modelo - TUDOOK

@author Jorge Luis Branco Martins Junior
@version 12.1.17
@since 11/08/17

@param oModel Modelo de Dados

@return lRet

/*/
//-------------------------------------------------------------------------------------------------------------
Static Function Fin010Pos(oModel) As Logical

Local lRet       := .T.
Local lIntPFS    := SuperGetMV("MV_JURXFIN",,.F.) // Habilita a integracao entre os modulos SIGAFIN - Financeiro e SIGAPFS - Juridico
Local nOper      := 0
Local aArea      := {}
Local aAreaSED   := {}

If lIntPFS .And. ExistFunc("JVldFin010")
	lRet := JVldFin010(oModel) // Validações dos campos da aba Jurídico (Integração SIGAFIN x SIGAPFS)
EndIf

// Verifica a estrutura da natureza.
If lRet
	nOper := oModel:GetOperation()
	If nOper == MODEL_OPERATION_INSERT .or. nOper == MODEL_OPERATION_UPDATE
		// Verifica se usa natureza estruturada.
		If FNatSAIsOn()
			// Tipo analítico não pode ter filhos.
			If oModel:GetValue("SEDMASTER", "ED_TIPO") == "2"  // 2-Analítico.
				aArea := GetArea()
				aAreaSED := SED->(GetArea())
				SED->(dbSetOrder(4))  // ED_FILIAL + ED_PAI.
				If SED->(MsSeek(xfilial("SED") + oModel:GetValue("SEDMASTER", "ED_CODIGO"), .F.))
					Help("  ", 1, "NATISON1",, STR0079, 1, 1) // "Essa natureza é pai de outra natureza. Portanto não pode ser analítica."
					lRet := .F.
				EndIf
				RestArea(aAreaSED)
				RestArea(aArea)
			EndIf
		Else
			// Se não tem estrutura, as naturezas devem ser analíticas e sem pai.
			If !empty(oModel:GetValue("SEDMASTER", "ED_PAI")) .or. oModel:GetValue("SEDMASTER", "ED_TIPO") <> "2"  // 2-Analítico.
				Help("  ", 1, "NATISON2",, STR0080, 1, 1) // "Para ativar natureza estruturada, verifique o parâmetro MV_NATSINT."
				lRet := .F.
			EndIf
		EndIf
	EndIf
EndIf

Return lRet

//-------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc} IsAuto
Função para verificar se a execução é via rotina automática

@author Rodrigo Oliveira
@version 12.1.25
@since 20/11/19

@return lRet - indica se a execução e via rotina automática (.T.)

/*/
//-------------------------------------------------------------------------------------------------------------
Function IsAuto() As Logical
	Local lRet As Character
	
	lRet	:= Type("aRotAuto") == "A"

Return lRet
