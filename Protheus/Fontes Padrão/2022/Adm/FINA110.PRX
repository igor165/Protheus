#Include "PROTHEUS.CH"
#Include "FILEIO.CH"
#Include "FINA110.CH"
#Include "FWMVCDEF.CH"

Static lFuncIrPj 	:= .T.	
Static lFA110BUT	:= ExistBlock("FA110BUT")
Static lF110Rec		:= (ExistBlock("F110REC") )
Static lFa110Se5 	:= (ExistBlock("FA110SE5"))
Static lFa110Desc	:= (ExistBlock("FA110DES"))
Static lFa110Juros	:= (ExistBlock("FA110JUR"))
Static lFa110Mult	:= (ExistBlock("FA110MUL"))
Static lFina110  	:= (ExistBlock("FINA110" ))
Static lFa110AtCp 	:= (ExistBlock("FA110ATCP" ))
Static lTFina110  	:= (ExistTemplate("FINA110"))
Static lPcoInte
Static lBxCnab
Static cTpComiss
Static lFinImp		:= .T. //Define se ha retencao de impostos PCC/IRPJ no R.A 
Static cDescontada	:= "" //SITCOB
Static _oFINA1101   := Nil
Static _oFINA1102	:= Nil
Static cArqTrab		:= ""
Static cAliasSe1	:= ""
Static lExistFKD	:= ExistFunc("FSetFK6FKD")
Static lFKDBx		:= ExistFunc("FAtuFKDBx")
Static lF110Fil		:= ExistBlock("F110FIL")
Static lFCalDesc	:= (ExistBlock("FCalDesc"))
Static dLastPcc		:= CTOD("22/06/2015")
Static __nQTitCh	
Static __lLgpd		:= FindFunction( "FwPDCanUse" ) .And. FwPDCanUse(.T.)
Static __lAntCred	:= .F.
Static __cTempVA	:= ""				// Alias Tabela temporária VA
Static __lSeekVA	:= .T.				// Define se busca VA para o título
Static __oObjAb		:= NIL
Static __lfTemCfg   := FindFunction("FinTemCfg")
Static __lfTotAb	:= FindFunction("FinTotAb")
Static __lF110TIT   := ExistBlock("F110TIT")
Static _lF110TIT2   := ExistBlock("F110TIT2") // Este ponto de entrada substitui o F110TIT, adicionado ao desmarcar o titulo
Static __lPIXCanc	:= NIL
Static __lFPIXatv   := FindFunction("PIXIsActiv")
Static __lBordImp   := FindFunction("BorderoImp")
Static __lCalcImp   := .F.
Static __nTamBco 	:= Nil
Static __nTamAge 	:= Nil 
Static __nTamCC 	:= Nil
Static __aMotBx 	:= NIL
Static __JGrvBaixa	:= Nil
Static __cPict		:= Nil
Static __lIsBRA		:= Nil
Static __lHasEAI	:= Nil
Static __lHasSerasa	:= Nil
Static __lHasLoja	:= Nil
Static __cQryBx		:= ""
Static __cTmpBx		:= ""
Static oTmpVA		:= Nil
Static nESaldo3		:= Nil
Static nESaldo2		:= Nil
Static nESaldo1		:= Nil
Static lFa110Tot	:= ExistBlock("FA110TOT")
Static lF110QRCP	:= ExistBlock("F110QRCP")
Static lF110SE5		:= Existblock("F110SE5")
Static lF110CPOS	:= ExistBlock("F110CPOS")

//Motor de retenções 
//=====================
Static __lMotRet 	:= .F.
Static __lPccMR  	:= .F.
Static __lIrfMR  	:= .F.
Static __lIssMR 	:= .F.
Static __lImpMR  	:= .F.
Static __aImpos  	:= {}
Static __nTotImp	:= 0
Static __lGlosaMr 	:= .F. // Substituição da usabilidade do parâmetro MV_GLOSA pela configuração FKM_PGTPAR
Static __lGlosIrf 	:= .F.
Static __lGlosPis 	:= .F.
Static __lGlosCof 	:= .F.
Static __lGlosCsl 	:= .F.
Static __lGlosIss 	:= .F.
Static __lGlosIns	:= .F.
Static __lGlosMr	:= .F.

//=====================

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ FINA110  ³ Autor ³ Mauricio Pequim Jr    ³ Data ³ 06/01/00 ³±±                     
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Baixa Autom tica de Titulos a Receber                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FINA110()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FINA110( nOpcAuto, aTitulos, lThread, cKeyId, aRegConc, cMyUId)
	Local nSavRec		:= Recno()
	Local aRotina		:= MenuDef()
	Local lSitef		:= FWIsInCallStack('FINA910') .Or. FWIsInCallStack('FINA918')

	Private aAreaSM0	:= {}
	Private cFil110
	Private lOracle		:= "ORACLE" $ Upper( TCGetDB() )
	// Define o cabe‡alho da tela de baixas
	Private cCadastro	:= STR0003 // "Baixa de Titulos"
	// Verifica o n£mero do Lote
	Private cLote
	Private cFilPos		:= SM0->M0_CODFIL

	Default lThread		:= .F.
	Default cKeyId		:= 'F910_KEY'		//Definição da chave que foi criada no FINA910A para controle de variáveis "globais"
	Default aRegConc	:= {} 
	Default cMyUId		:= 'F910_THREAD_ID'	//Definição do nome da seção que foi criada no FINA910A controle de variáveis "globais"

	LoteCont( "FIN" )


	// Carrega fun‡„o Pergunte
	SetKey( VK_F12, { |a,b| AcessaPerg("FIN110",.T.) } )
	Pergunte( "FIN110", .F. )

	//Não permito contabilização online se estiver executando multi-thread
	If lThread .Or. lSitef
		MV_PAR03 := 2
	EndIf

	__lMotRet := ExistFunc("FTemMotor") .And. FTemMotor()

	// Inicializa Staticas
	A110IniVar()	

	// Variaveis utilizadas para parƒmetros
	// mv_par01	Mostra Lan‡ Contabil
	// mv_par02   Aglutina Lancamentos
	// mv_par03   Contabiliza On-Line
	lDigita	:= IIf(mv_par01==1,.T.,.F.)
	lAglut	:= IIf(mv_par02==1,.T.,.F.)

	Default nOpcAuto := 0
	Default aTitulos := {}

	If nOpcAuto == 0
		dbSelectArea( "SE1" )
		SE1->( dbSetOrder(1) )
		SE1->( MSSeek(cFilial) )
	EndIf	

	If ExistBlock("F110BROW")
		ExecBlock("F110BROW",.f.,.f.)
	EndIf 

	aAreaSM0 := SM0->(GetArea())

	//Obtenho a lista das situacoes de cobranca com desconto
	cDescontada	:= FN022LSTCB(2) //SITCOB

	If ( nOpcAuto > 0 )
		bBlock := &( "{ |a,b,c,d,e,f,g,h,i,j| " + aRotina[ nOpcAuto,2 ] + "(a,b,c,d,e,f,g,h,i,j) }" )
		Eval( bBlock, Alias(), (Alias())->(Recno()),nOpcAuto,,aTitulos,lThread,cKeyId,aRegConc,cMyUId )
	Else
		// Endereca a Fun‡„o de BROWSE
		mBrowse( 6, 1,22,75,"SE1",,,,,, Fa040Legenda("SE1"))
	EndIf

	// Recupera a Integridade dos dados
	SE1->(DbClearFilter())
	dbSelectArea("SE1")
	dbSetOrder(1)
	dbGoTo( nSavRec )

	//Limpa as variáveis estáticas utilizadas para o motor de retenções
	LimpaVarMR()

Return 

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fA110Aut ³ Autor ³ Mauricio Pequim Jr    ³ Data ³ 06/01/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Baixa Autom tica                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Fa110Aut()                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FA110Aut( cAlias, cCampo, nOpcE, aM, aTitulos, lThread, cKeyId, aRegConc,cMyUId )

	Local cIndex		:= ""
	Local cChave		:= ""
	Local cDescrMo		:= ""
	Local cArquivo		:= ""	
	Local cNumero		:= ""
	Local cPrefixo		:= ""
	Local cParcela		:= ""
	Local cCliente		:= ""
	Local cSequencia 	:= ""
	Local nValAbat  	:= 0
	Local nValorTotal	:= 0
	Local nRec			:= 0
	Local nRegPrinc 	:= 0
	Local nRegAtu		:= 0
	Local nRecnoSe1		:= 0
	Local nI			:= 0
	Local nC			:= 0
	Local nX 			:= 0
	Local nOpca			:= 0
	Local nTotal		:= 0
	Local nHdlPrv		:= 0
	Local nSaldoCru		:= 0
	Local nSavOrd1		:= SE1->(IndexOrd())
	Local nSaldo		:= 0
	Local nSE1Rec 		:= 0
	Local aBaixas 		:= {}
	Local aDescMotbx	:= {}
	Local aArea			:= GetArea()
	Local aButtons		:= {}          
	Local aFlagCTB		:= {}
	Local lGravaAglut	:= .T.
	Local lInverte		:= .F.
	Local lEof			:= .F.
	Local lPadrao 		:= .F.
	Local lGerTotal 	:= .F.
	Local lDigita		:= IIF(mv_par01==1,.T.,.F.)
	Local lAglut		:= IIF(mv_par02==1,.T.,.F.)
	Local lDesconto 	:= IIF(mv_par04 == 1, .T., .F. )
	Local lJuros  		:= IIF(mv_par05 == 1, .T., .F. )
	Local lUsaFlag		:= SuperGetMV("MV_CTBFLAG", .T., .F.)
	Local lBxCnab		:= SuperGetMV("MV_BXCNAB",,"N") == "S"
	Local lSpbInUse 	:= SpbInUse()
	Local lPanelFin		:= IsPanelFin()
	Local nTxMoeda		:= 0
	Local oDlg
	Local oDlg1
	Local oMark
	Local oQtda
	Local oCbx
	Local oValor		:= 0
	Local oBanco110		:= ""
	Local lLojxRMul		:= FindFunction("LojxRMul")
	Local cMvJurTipo	:= SuperGetMv("MV_JURTIPO",,"")  // calculo de Multa do Loja , se JURTIPO == L 
	Local lMulLoj		:= SuperGetMv("MV_LJINTFS", ,.F.) //Calcula multa conforme regra do loja, se integração com financial estiver habilitada
	Local cNatIrf 		:= SuperGetMV("MV_IRF",,"IRF")
	Local cNatPis 		:= SuperGetMV("MV_PISNAT",,"PIS")
	Local cNatCof 		:= SuperGetMV("MV_COFINS",,"COFINS")
	Local cNatCsl 		:= SuperGetMV("MV_CSLL",,"CSLL")
	Local cNatIss 		:= SuperGetMV("MV_ISS",,"ISS")
	//Controle de timer para que o usuario nao fique travando os registros
	Local oTimer
	Local nTimeOut		:= SuperGetMv("MV_FATOUT",,900)*1000 	// Estabelece 15 minutos para que o usuarios selecione os titulos a faturar
	Local nTimeMsg		:= SuperGetMv("MV_MSGTIME",,120)*1000 	// Estabelece 02 minutos para exibir a mensagem para o usuário
	//Controla o Pis Cofins e Csll na baixa  (1-Retem PCC na Baixa ou 2-Retem PCC na Emissão(default) )
	Local lPccBxCr		:= FPccBxCr(.T.)
	//Controla IRPJ na baixa
	Local lIrPjBxCr		:= If (lFuncIrPj,FIrPjBxCr(.T.),.F.)
	Local nBaseIr		:= 0
	Local nLoop			:= 0
	Local cModRetPIS	:= SA1->A1_ABATIMP
	Local nSalvRec		:= SE1->(Recno())
	Local lAplVlMin		:= .T.
	Local nVlMinImp		:= GetNewPar("MV_VL10925",5000)
	//Variavel para armazenar o tipo original do titulo originador
	Local cTipoOr		:= ""
	//Controle de Rotina Automatizada
	Local nY			:= 0
	Local lSetAuto		:= .F.
	Local lSetHelp		:= .F.
	Local lAtuSalDup	:= .T.	
	Local cFilOld		:= ""   
	Local nSomaCheq		:= 0
	Local lFilDes		:= .T.
	Local lGemSE1Grv	:= ExistTemplate("GEMSE1Grv")
	Local lGemSE5Grv	:= ExistTemplate("GEMSE5Grv")
	Local lExistSFQ		:= .T.
	Local lLjAtuSa		:= SuperGetMv("MV_LJATUSA",,.F.)
	Local lMovBcoBx		:= .T.

	//Controle de abatimento
	Local lTitpaiSE1	:= .T.
	Local nOrdTitPai	:= 0
	Local cTipo
	Local bWhile		:= {|| !Eof() .And. E1_FILIAL == xFilial("SE1") .And. E1_CLIENTE == cCliente .And. E1_LOJA == cLoja .And. E1_PREFIXO == cPrefixo .And. E1_NUM == cNumero .And. E1_PARCELA == cParcela }
	Local nValImp		:= 0
	Local lRaRtImp		:= lFinImp .And.FRaRtImp()        //Define se ha retencao de impostos PCC/IRPJ no R.A   
	Local cQuery		:= ""
	Local aRecNoAbat	:= {}			// RecNo's SE1 para registros de abatimento para atualização em lote.
	Local i				:= 0 			// Auxiliar para contadores
	Local dBKPDTBase	:= dDataBase	// Copia para restaurar no final
	Local lRetISS		:= IIF( __lIsBRA , GetMV("MV_MRETISS") == "1",.F.)
	//Gestao
	Local aSelFil		:= {}
	Local aSelFilAux	:= {}
	Local aTmpFil		:= {}
	Local aCampos		:= {} 
	Local cFilLogin		:= cFilAnt
	Local cFilTit		:= ""
	Local cFilLancto	:= ""
	Local cFilBkp		:=""
	Local nLenFil		:= 1 
	Local nRecSM0		:= SM0->( RecNo() )   
	Local nTamCli		:= TamSX3("E1_CLIENTE")[1]     
	Local lGestao		:= FWSizeFilial() > 2	// Indica se usa Gestao Corporativa
	Local cSA6Emp		:= FWModeAccess("SA6",1)
	Local cSA6UNe		:= FWModeAccess("SA6",2)
	Local cSA6Fil		:= FWModeAccess("SA6",3)
	Local cSE1Emp		:= FWModeAccess("SE1",1)
	Local cSE1UNe		:= FWModeAccess("SE1",2)
	Local cSE1Fil		:= FWModeAccess("SE1",3)
	Local cSEAEmp		:= FWModeAccess("SEA",1)
	Local cSEAUNe		:= FWModeAccess("SEA",2)
	Local cSEAFil		:= FWModeAccess("SEA",3)
	Local lSA6Access	:= cSA6Fil == "E"
	Local lSE1Access	:= Iif( lGestao, FWModeAccess("SE1",1) == "C", FWModeAccess("SE1",3) == "C")
	Local lSE5Access	:= Iif( lGestao, FWModeAccess("SE5",1) == "C", FWModeAccess("SE5",3) == "C")
	Local nIndSEA       := Iif(cSEAEmp == "C" .OR. cSEAUNe == "C" .OR. cSEAFil == "C" , 2 , 4)
	Local lMV_NOTSA1	:= SuperGetMv("MV_NOTSA1",,.T.)
	Local aNroPag		:= {}

	//Reestrutura das tabelas do processo de movimento bancário
	Local oModelBxR		:= Nil
	Local oModelImp		:= Nil
	Local oSubFK1		:= Nil	//BAIXAS A RECEBER
	Local oSubFK3		:= Nil	//IMPOSTOS CALCULADOS
	Local oSubFK4		:= Nil	//IMPOSTOS RETIDOS
	Local oSubFK5		:= Nil	//MOVTO BANCARIO
	Local oSubFK6		:= Nil	//Valores complementares
	Local cLog			:= ""
	Local cChaveFK7		:= ""
	Local cCamposE5		:= ""
	Local lRet			:= .T.
	Local oSubFKA		:= Nil	//Baixas a receber para atualização de retenção
	Local aImpostos		:= {}	
	Local nZ			:= 0
	Local nW 			:= 0
	Local oSubFKAA		:= Nil
	Local cChaveTit		:= 	""
	Local cFilFK6		:= FWxFilial("FK6")
	Local nValCpo		:= 0
	Local cIdFK1		:= ''
	Local cIdFK5		:= ''
	Local cIdFk4IR		:= ''
	Local cHistMov		:= ''
	Local cTpDoc		:= ''
	Local cChaveFKA		:= ''
	Local cCamposE5A	:= ''
	Local aAreaAnt		:= {}
	Local aRecSe5		:= {}
	Local aAlt			:= {}
	Local cTpMens		:= ''
	Local cLoteBord		:= ''  
	Local nBasePCC		:= 0
	Local cNatLote		:= FINNATMOV("R")
	Local lEofSE5		:= .F.
	Local nAbat			:= 0
	Local cTpDesc		:= "I"
	//Variaveis de tela
	Local nLinIni		:= 0
	Local nColIni		:= 0
	Local nLinFin		:= 0
	Local nColFin		:= 0
	Local oSize			:= NIL
	Local llOpc			:= .F.	
	Local aResposta		:= {}
	Local cIdOrig		:= ""
	Local lIrRetBord	:= .F.
	Local lMVCNABImp	:= GetNewPar("MV_CNABIMP",.F.)
	Local lBxLotSitef 	:= .F.
	Local aValor		:= {}				//Array que armazenará os valores "globais"
	Local cSldBxCr 		:= SuperGetMv("MV_SLDBXCR",,"B")
	Local aRetThread	:= {}
	Local lJFilBco		:= ExistFunc("JurVldSA6") .And. SuperGetMv("MV_JFILBCO", .F., .F.) //Indica se filtra as contas correntes vinculadas ao escritório logado - SIGAPFS
	Local cEscrit		:= IIF(lJFilBco, JurGetDados("NS7", 4, xFilial("NS7") + cFilant + cEmpAnt, "NS7_COD"), "")
	Local cF3Bco		:= IIF(lJFilBco, "SA6JUR", "SA6")
	Local aRecImpos		:= {}
	Local nParciais 	:= 0 
	Local aOutImp 		:= {}
	Local aDadosPar 	:= {}
	Local nM			:= 0
	Local nImp 			:= 0
	Local lJurMulDes 	:= (SuperGetMv("MV_IMPBAIX",.t.,"2") == "1")
	Local cFunName		:= ""  //  Variavel para gravar o campo Origem
	Local aAreaSx8      := {}
	Local cNumber 		:= ""
	Local lFINA910 		:= FWIsInCallStack('FINA910')
	Local lFINA918		:= FWIsInCallStack('FINA918')
	Local cOldBanco  	:= ""
	Local cOldAgenc  	:= ""
	Local cFilOri		:= ""
	Local lVendedor		:= .F.
	Local cInsert		:= ""
	Local nJ			:= 0
	Local cFields		:= ""
	Local lBXDTFIN		:= SuperGetMv("MV_BXDTFIN",.T.,"1") == "2" // Nao permite data de baixa menor que o a data contida no parâmetro MV_DATAFIM (1=Permite, 2=Não Permite)                                               
	Local aTitCalc		:= {}
	Local nRecNoSE5		:= 0
	Local nRecNoFK1		:= 0
	Local lRetTemp		:= .T.
	Local oQryFk1		:= NIL
	Local oQryFk5		:= NIL
	Local lVerMotor		:= .F.
	Local nDtContOn		:= SuperGetMv("MV_DTCNBX",.F.,1) // Data para contabilização Online baixas receber 1- Data Digitação; 2- Data Disponibilidade; 3- Data Recebimento
	Local dDtLanc		:= dDataBase
	Local nVlrLote		:= 0
    LOCAL lDoLaunch     := .F.
	Local cFilCli		:= ""
	Local lComisBx		:=.F.
	Local nTcSql		:= 0
	
	PRIVATE cLoteFin 	:= Space(TamSX3("E5_LOTE")[1])
	PRIVATE cBco110 	:= CRIAVAR("A6_COD")
	PRIVATE cAge110 	:= CRIAVAR("A6_AGENCIA")
	PRIVATE cCta110 	:= CRIAVAR("A6_NUMCON")
	PRIVATE cCliDe  	:= CRIAVAR("E1_CLIENTE")
	PRIVATE cCliAte 	:= CRIAVAR("E1_CLIENTE")
	PRIVATE cMotBx		:= CriaVar("E5_MOTBX")
	PRIVATE nMulta		:= 0
	PRIVATE nDescont	:= 0
	PRIVATE nCorrec		:= 0
	PRIVATE nJuros		:= 0
	PRIVATE nVA			:= 0
	PRIVATE cPadrao		:= "520"
	PRIVATE cBord110	:= CriaVar("E1_NUMBOR")
	PRIVATE cBcoDe		:= CriaVar("E1_PORTADO")
	PRIVATE cBcoAte		:= CriaVar("E1_PORTADO")
	PRIVATE cPortado	:= CriaVar("E1_PORTADO")
	PRIVATE dVencIni	:= dDataBase
	PRIVATE dVencFim	:= dDataBase
	PRIVATE cMarca		:= GetMark()
	PRIVATE nTotAbat	:= 0			// Utilizada por Fa070Data
	PRIVATE dBaixa 		:= dDataBase	// Utilizada por Fa070Data
	PRIVATE dDtCredito 	:= dBaixa		// Utilizada por Fa070Data
	PRIVATE cBanco		:= cBco110
	PRIVATE cAgencia	:= cAge110
	PRIVATE cConta		:= cCta110
	PRIVATE nCM1 		:= 0
	PRIVATE nProRata	:= 0
	PRIVATE nDescGeral  := 0
	PRIVATE aBaixaSE5	:= {}
	//PCC Baixa CR
	PRIVATE nPis 		:= 0
	PRIVATE nCofins		:= 0
	PRIVATE nCsll		:= 0
	PRIVATE aDadosRef	:= Array(7)
	PRIVATE aDadosRet	:= Array(7)
	PRIVATE nVlRetPis	:= 0
	PRIVATE nVlRetCof	:= 0
	PRIVATE nVlRetCsl	:= 0
	PRIVATE nDiferImp	:= 0
	PRIVATE nValRec		:= 0
	PRIVATE nOldValRec	:= 0
	PRIVATE lRetParc  	:= .T.
	PRIVATE nAcresc   	:= 0
	PRIVATE nDecresc  	:= 0
	PRIVATE nMoedaBco	:= 1
	//IR Baixa CR
	PRIVATE nIrrf 		:= 0
	Private lF110Auto	:= .F.

	//Baixa Automatizada
	Default aTitulos	:= {}
	Default lPcoInte	:= GetMV("MV_PCOINTE") == "1"
	Default lBxCnab		:= GetMv("MV_BXCNAB") == "S"
	Default cTpComiss 	:= GetMv("MV_TPCOMIS")
	Default lThread		:= .F. //Variável utilizada para controle de múltiplas threads quando baixa oriunda do SITEF (FINA910A)
	Default aRegConc	:= {}
	Default cKeyId		:= 'F910_KEY'		//Definição da chave que foi criada no FINA910A para controle de variáveis "globais"
	Default cMyUId		:= 'F910_THREAD_ID'	//Definição do nome da seção que foi criada no FINA910A controle de variáveis "globais"

	lBxLotSitef := (lFINA910 .or. lFINA918 .or. lThread)

	cFunName := Iif(lBxLotSitef, Iif(lFINA918,"FINA918","FINA910"),Substr(FunName(),1,8)) 

	If Len(aTitulos) >= 9 .And. ValType(aTitulos[09]) == "L" .And. aTitulos[09] 
		// vindo da conciliacao SITEF para considerar a data de credito como a data de baixa 
		dBaixa := aTitulos[08]
	EndIf

	If dDataBase >= dLastPcc
		nVlMinImp	:= 0
	EndIf

	cFilOld := cFilAnt

	aFill(aDadosRef,0)
	aFill(aDadosRet,0)

	// Zerar variaveis para contabilizar os impostos da lei 10925.
	VALOR5 := 0
	VALOR6 := 0
	VALOR7 := 0

	// o browse posiciona a SM0 baseado no titulo posicionado, o que não se deve usar na rotina automatica
	If TYPE("aAreaSM0") <> "U"
		RestArea(aAreaSM0)
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se data do movimento ‚ menor que data limite de     ³
	//³ movimentacao no financeiro                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If SuperGetMv("MV_BXDTFIN",,"1") == "2" .and.!DtMovFin(,,"2")
		dDataBase:= dBKPDTBase	
		Return
	Endif

	//Verificar ou nao o limite de 5000 para Pis cofins Csll
	// 1 = Verifica o valor minimo de retencao
	// 2 = Nao verifica o valor minimo de retencao
	If SE1->E1_APLVLMN == "2"
		lAplVlMin := .F.
	Endif	  

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ A fun‡„o SomaAbat reabre o SE1 com outro nome pela ChkFile para  ³
	//³ efeito de performance. Se o alias auxiliar para a SumAbat() n„o  ³
	//³ estiver aberto antes da IndRegua, ocorre Erro de & na ChkFile,   ³
	//³ pois o Filtro do SE1 uptrapassa 255 Caracteres.                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SomaAbat("","","","R")

	//Reestruturacao SE5
	PRIVATE nDescCalc 	:= 0
	PRIVATE nJurosCalc 	:= 0
	PRIVATE nVACalc 	:= 0
	PRIVATE nMultaCalc 	:= 0
	PRIVATE nCorrCalc	:= 0
	PRIVATE nDifCamCalc	:= 0
	PRIVATE nImpSubCalc	:= 0
	PRIVATE nPisCalc	:= 0
	PRIVATE nCofCalc	:= 0
	PRIVATE nCslCalc	:= 0
	PRIVATE nIrfCalc	:= 0
	PRIVATE nIss		:= 0
	PRIVATE nIssCalc	:= 0
	PRIVATE nPisBaseR 	:= 0
	PRIVATE nCofBaseR	:= 0
	PRIVATE nCslBaseR 	:= 0
	PRIVATE nIrfBaseR 	:= 0
	PRIVATE nIssBaseR 	:= 0
	PRIVATE nPisBaseC 	:= 0
	PRIVATE nCofBaseC 	:= 0
	PRIVATE nCslBaseC 	:= 0
	PRIVATE nIrfBaseC 	:= 0
	PRIVATE nIssBaseC 	:= 0
	PRIVATE nlImpMR 	:= 0
		
	If Type("lMsErroAuto")=="U"
		Private lMsErroAuto := .F.
	EndIF

	//Verifico se houve chamada Automatizada
	If !Empty(aTitulos)

		//Composição de aTitulos
		//aTitulos [1]:= aRecnos	(array contendo os Recnos dos registros a serem baixados)
		//aTitulos [2]:= cBanco 	(Banco da baixa)
		//aTitulos [3]:= cAgencia	(Agencia da baixa)
		//aTitulos [4]:= cConta		(Conta da baixa)
		//aTitulos [5]:= cCheque	(Cheque da Baixa - apenas Contas a Pagar)
		//aTitulos [6]:= cLoteFin	(Lote Financeiro da baixa)
		//aTitulos [7]:= cNatureza	(Natureza do movimento bancario - apenas Contas a Pagar)
		//aTitulos [8]:= dBaixa		(Data da baixa)

		lF110Auto 	:= .T.
		lMsErroAuto := .F.
		cAliasSe1	:="SE1"
		If lThread ////Não permito contabilização online se estiver executando multi-thread
			mv_par03 := 2
		EndIf

		//Caso a contabilizacao seja online
		//E a tela de contabilizacao possa ser mostrada em caso de erro no lancamento 
		//(falta de conta, debito/credito nao batem, etc)
		//A baixa automatica em lote nao podera ser utilizada.
		//Somente sera processada se: 
		//MV_PRELAN = S
		//MV_CT105MS = N
		//MV_ALTLCTO = N	
		If mv_par03 == 1 .and. !CTBINTRAN(1,.F.) 
			dDataBase:= dBKPDTBase
			Return
		Endif	
	Else
		If GetHlpLGPD({"A6_COD", "A6_AGENCIA", "A6_NUMCON"})
			Return .F.
		Endif	
	Endif	

	If lGerTotal
		cChaveFK7	:= FWUUIDV4()
	EndIf

	__lAntCred := SuperGetMv("MV_ANTCRED",,.F.) // Verifica 1 vez a cada início de operação de baixa em lote, para não chamar várias vezes

	// Criação de tabela temporária para armazernar a chave da FK7 para os títulos que possuem VA (FKD)
	If oTmpVA <> Nil
		//-- Limpa registros para nova execução
		nTcSql := TcSQLExec("DELETE FROM "+oTmpVA:GetRealName())
		If nTcSql < 0
			//-- Se ocorrer algum problema refaz a temporaria
			oTmpVA:Delete()
			oTmpVA := Nil
		Else
			(__cTempVA)->(dbGoTo(1))
		EndIf
	EndIf
	If oTmpVA == Nil	
		__cTempVA	:= GetNextAlias()			// Alias Tabela temporária VA
		__lSeekVA	:= .T.						// Define se busca VA para o título
		oTmpVA 	:= FwTemporaryTable():New( __cTempVA )		
		oTmpVA:SetFields( { {'CHAVE','C',100,0} } )
		oTmpVA:AddIndex( '01', {'CHAVE'} )
		oTmpVA:Create()		
	EndIf
	cInsert := " INSERT INTO " + oTmpVA:GetRealName()  + "  (CHAVE)  "
	cInsert += " SELECT FK7.FK7_CHAVE FROM " + RetSqlName( 'FK7' ) + " FK7  JOIN " 
	cInsert += RetSqlName( 'FKD' ) + " FKD ON FK7.FK7_FILIAL = FKD.FKD_FILIAL AND FK7.FK7_IDDOC = FKD.FKD_IDDOC "
	cInsert += " WHERE FK7.D_E_L_E_T_ = ' ' AND FKD.D_E_L_E_T_ = ' ' "
	TcSqlExec( cInsert )

	__cTempVA:=oTmpVA:GetAlias()
	( __cTempVA )->(DbGoTop())
	//Caso não haja nenhum registro de Valores Acessórios, evito chamar a rotina de cálculo de VA
	If ( __cTempVA )->( BOF() ) .And. ( __cTempVA )->( EOF() )  
		__lSeekVA := .F.
	EndIf		

	cIdFK1 := FWUUIDV4()

	aStru := SE1->(dbStruct())

	For nj := 1 to Len(aStru)
		If nj == Len(aStru)
			cFields += aStru[nj,1]
		Else
			cFields += aStru[nj,1] + ", "
		EndIf
	Next nj

	aAdd(aStru, {"RECNO","N",10,0})
	aAdd(aStru, {"ABAT_V"		, nESaldo3, nESaldo1, nESaldo2})
	aAdd(aStru, {"VA_V"			, nESaldo3, nESaldo1, nESaldo2})
	aAdd(aStru, {"JUROS_V"		, nESaldo3, nESaldo1, nESaldo2})
	aAdd(aStru, {"CM1_V"		, nESaldo3, nESaldo1, nESaldo2})
	aAdd(aStru, {"PRORATA_V"	, nESaldo3, nESaldo1, nESaldo2})
	aAdd(aStru, {"MULTA_V"		, nESaldo3, nESaldo1, nESaldo2})
	aAdd(aStru, {"DESCONTO_V"	, nESaldo3, nESaldo1, nESaldo2})
	aAdd(aStru, {"TEMMOTRET"	, "N", 2,0})

	While .T.
		aCampos		:= {}
		nRec := SE1->( RecNo() )

		nOpca		:= 0   
		nDescGeral  := 0

		cMotBx	:= "NORMAL"
		If Empty(cCliAte)
			cCliAte := Replicate("Z",Len(SE1->E1_CLIENTE))
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Retorna o Array aDescMotBx contendo apenas a descricao do   ³
		//³ motivo das Baixas.									 		³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nI := 1 to len( __aMotBx )
			If Substr(__aMotBx[nI],34,01) == "A" .or. Substr(__aMotBx[nI],34,01) =="R"
				If !(substr(__aMotBx[nI],01,03) $ "FAT|LOJ|LIQ|CEC|CMP|STP")
					AADD( aDescMotbx,Substr(__aMotBx[nI],07,10))
				EndIf
			EndIf
		Next

		UltiLote()

		//Se for rotina normal (nao automatizada)
		If !lF110Auto

			If lPanelFin
				oPanelDados := FinWindow:GetVisPanel()
				oPanelDados:FreeChildren()
				aDim := DLGinPANEL(oPanelDados)		
				DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0, 0 TO 0, 0 PIXEL STYLE nOR( WS_VISIBLE, WS_POPUP )
				oDlg:lMaximized := .F.
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Observacao Importante quanto as coordenadas calculadas abaixo: ³ 
				//³ -------------------------------------------------------------- ³ 		
				//³ a funcao DlgWidthPanel() retorna o dobro do valor da area do	 ³
				//³ painel, sendo assim este deve ser dividido por 2 antes da sub- ³
				//³ tracao e redivisao por 2 para a centralizacao. 					 ³		
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
				nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 150) /2		 					
				nEspLin  := 0
			Else		
				DEFINE MSDIALOG oDlg FROM 30,16 To 335, 300  TITLE STR0010 PIXEL //"Baixa Autom tica"
				nEspLarg := 0
				nEspLin  := 0

			Endif

			oPanel := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,40,40,.T.,.T. )
			oPanel:Align := CONTROL_ALIGN_ALLCLIENT

			@ 002,002+nEspLarg TO 150,160+nEspLarg PIXEL OF oPanel 

			@ 004,005+nEspLarg SAY STR0007 SIZE 40,08 PIXEL OF oPanel // "Vencimento"
			@ 013,005+nEspLarg MSGET dVencIni SIZE 45,08  PIXEL OF oPanel HASBUTTON
			@ 013,060+nEspLarg SAY STR0006 SIZE 10,08  PIXEL OF oPanel // "at‚ " 
			@ 013,080+nEspLarg MSGET dVencFim Valid dVencFim >= dVencIni SIZE 50,08  PIXEL OF oPanel HASBUTTON

			@ 023,005+nEspLarg SAY STR0005 SIZE 40,08 PIXEL OF oPanel // "Cliente "
			@ 032,005+nEspLarg MSGET cCliDe	F3 "CLI"  SIZE 45,08 Picture PesqPict("SA1","A1_COD",Len(cCliDe)) PIXEL OF oPanel HASBUTTON
			@ 032,060+nEspLarg SAY STR0006 SIZE 10,08  PIXEL OF oPanel // "at‚ "
			@ 032,080+nEspLarg MSGET cCliAte	F3 "CLI" VALID cCliAte >= cCliDe SIZE 45,08 Picture PesqPict("SA1","A1_COD",Len(cCliAte)) PIXEL OF oPanel HASBUTTON

			@ 042,005+nEspLarg SAY STR0008 SIZE 40,08  PIXEL OF oPanel // "Mot.Baixa"
			@ 051,005+nEspLarg COMBOBOX oCbx VAR cMotBx ;
			ITEMS aDescMotBx SIZE 65, 47  PIXEL OF oPanel ;
			Valid F110BXBORD(.T.) .And. (ShowMotBx("R",.T.))

			@ 072,005+nEspLarg Say STR0019 SIZE 30,08  PIXEL OF oPanel  // "Banco : "
			@ 081,005+nEspLarg MSGET oBanco110 VAR cBco110 F3 cF3Bco When MovBcoBx(cMotBx, .T.) Valid (CarregaSa6(@cBco110, @cAge110, @cCta110, .T.,,,,,.T., @cOldBanco, @cOldAgenc) .And. IIF(lJFilBco, JurVldSA6("1", {cEscrit, cBco110, cAge110, cCta110}), .T.)) SIZE 30,08  PIXEL OF oPanel HASBUTTON
			@ 072,040+nEspLarg Say STR0020 SIZE 30,08  PIXEL OF oPanel // "Agência : "
			@ 081,040+nEspLarg MSGET cAge110 When MovBcoBx(cMotBx, .T.) Valid (CarregaSa6(@cBco110, @cAge110, @cCta110, .T.,,,,,.T., @cOldBanco, @cOldAgenc) .And. IIF(lJFilBco, JurVldSA6("2", {cEscrit, cBco110, cAge110, cCta110}), .T.)) SIZE 30,08 PIXEL OF oPanel HASBUTTON
			@ 072,080+nEspLarg Say STR0021 SIZE 30,08  PIXEL OF oPanel // "Conta : "
			@ 081,080+nEspLarg MSGET cCta110 When MovBcoBx(cMotBx, .T.) Valid If(CarregaSa6(@cBco110,@cAge110,@cCta110,.T.,,.T.,,,.T., @cOldBanco, @cOldAgenc),.T.,oBanco110:SetFocus() .And. IIF(lJFilBco, JurVldSA6("3", {cEscrit, cBco110, cAge110, cCta110}), .T.)) PIXEL OF oPanel SIZE 60,08 HASBUTTON


			@ 092,005+nEspLarg SAY STR0009 SIZE 40,08  PIXEL OF oPanel	// "Border“"
			@ 101,005+nEspLarg MSGET cBord110 Picture "@S6" SIZE 65,08 PIXEL OF oPanel ;
			Valid F110BXBORD(.T.) .and. Iif(!MovBcoBx(cMotBx, .T.),Empty(cBord110),.T.)	HASBUTTON 

			@ 092,080+nEspLarg SAY STR0023  PIXEL OF oPanel SIZE 40,08 //"Lote"
			@ 101,080+nEspLarg MSGET cLoteFin Picture "@!" When !Empty(cBord110) .And. lBxCnab  Valid CheckLote("R")  SIZE 60,08 PIXEL OF oPanel HASBUTTON

			@ 115,005+nEspLarg SAY STR0071  PIXEL OF oPanel SIZE 40,08 //"Data Baixa"
			@ 125,005+nEspLarg MSGET dBaixa Picture "@S6" SIZE 65,08 PIXEL OF oPanel HASBUTTON ; 


			If lPanelFin
				// posiciona dialogo sobre a celula
				oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1])
				ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg,	{|| nOpca := 1,If(Fa110TudOk(lBxCnab),oDlg:End(),nOpca:=0)},;
				{|| oDlg:End()},,,.F.)
				FinVisual(cAlias,FinWindow,(cAlias)->(Recno()),.T.)
			Else
				DEFINE SBUTTON FROM 135,083 TYPE 1 ACTION (nOpca := 1,If(Fa110TudOk(lBxCnab),oDlg:End(),nOpca:=0)) ENABLE OF oDlg
				DEFINE SBUTTON FROM 135,113 TYPE 2 ACTION oDlg:End() ENABLE OF oDlg
				ACTIVATE MSDIALOG oDlg CENTER
			EndIf

			If nOpca == 0
				Exit
			EndIf

			nRec := SE1->( RecNo() )
			lGerTotal := (!Empty(cBord110) .And. lBxCnab)
			//Altera database se necessário
			if dBaixa < dDataBase
				dDataBase := 	dBaixa
			Endif	

			If MV_PAR10 == 1
				//SA6 exclusivo nao permite a selecao de filiais
				If lSA6Access 
					Help( ,, 'SA6_COMPART',,;
					STR0033+CRLF+;		//"O compartilhamento do cadastro de Bancos (tabela SA6) não permite a seleção de filiais."
					STR0034+CRLF+;		//"O processo será feito considerando apenas titulos da filial corrente."
					" "+CRLF+;		
					STR0035+CRLF+;  	//"Compartilhamento da tabela SA6:"
					STR0036+If(cSA6Emp == "C",STR0039,STR0040)+CRLF+;		//"Empresa    : "###"Compartilhado"###"Exclusivo"
					STR0037+If(cSA6UNe == "C",STR0039,STR0040)+CRLF+;		//"Un. Negócio: "###"Compartilhado"###"Exclusivo"
					STR0038+If(cSA6Fil == "C",STR0039,STR0040)+CRLF+;  		//"Filial     : "###"Compartilhado"###"Exclusivo"
					" "+CRLF+;		
					STR0041+CRLF+;		//"(Para que esta mensagem deixe de ser apresentada, altere a pergunta (F12) "
					STR0042,1,0)		//"<Seleciona Filiais?> para Não.)"

					aSelFil := { cFilAnt }	 				

					//SE1 totalmente compartilhado nao habilita tela de selecao de filiais				
				ElseIf lSE1Access
					aSelFil := { cFilAnt }	 				

				ElseIf Len( aSelFil ) <= 0 
					aSelFil := AdmGetFil(.F.,.T.,"SE1")
					nLenFil := Len( aSelFil )
					If nLenFil <= 0
						Exit
					EndIf	

					If cSA6Emp == "E" .or. cSA6UNe == "E"
						For nX := 1 to Len(aSelFil)
							If xFilial("SA6",cFilAnt) == xFilial("SA6",aSelFil[nX]) 
								Aadd(aSelFilAux, aSelFil[nX] )
							EndIf
						Next nX 

						aSelFil := aClone(aSelFilAux)
					EndIf

				Endif
			Else
				aSelFil := { cFilAnt }	 
			EndIf

			If !Empty(cBord110)
				// Considerar todos os vencimentos para baixar todos do bordero
				dVencIni := CtoD("01/01/1980","ddmmyy")
				dVencFim := CtoD("31/12/2049","ddmmyy")
				cCliDe  := Space(nTamCli)
				cCliAte := Replicate("Z",nTamCli)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se bordero pode baixado ou nÆo. 							³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lBxBord := f110BxBord()
				If !lBxBord
					Exit
				Endif
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ PONTO DE ENTRADA F110FIL                                      ³
			//³ ExecBlock que retornara chave complementar do filtro da sele- ³
			//³ ‡Æo de contas a receber a serem baixadas.                     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF lF110Fil
				cFil110 := ExecBlock("F110FIL",.f.,.f.)
			Else
				cFIl110 := ""
			Endif

			dbSelectArea( cAlias )			
			cQuery := FA110ChecF(aSelFil,aTmpFil,cFields)

			IF lF110QRCP
				cQuery := ExecBlock("F110QRCP",.F.,.F.,{cQuery})
			Endif

			cChave		:= SE1->(IndexKey())

			If _oFINA1101 <> Nil
				//-- Limpa registros para nova execução
				nTcSql := TcSQLExec("DELETE FROM "+_oFINA1101:GetRealName())
				If nTcSql < 0
					//-- Se ocorrer algum problema refaz a temporaria
					_oFINA1101:Delete()
					_oFINA1101 := Nil	
				Else					
					(cAliasSE1)->(dbGoTo(1))
				EndIf
			Endif
			If _oFINA1101 == Nil
				cAliasSE1 := GetNextAlias()
				_oFINA1101 := FWTemporaryTable():New( cAliasSe1 )  
				_oFINA1101:SetFields(aStru) 
				_oFINA1101:AddIndex("1", {"E1_FILORIG","E1_PREFIXO","E1_NUM","E1_PARCELA","E1_TIPO"})
				_oFINA1101:AddIndex("2", {"E1_OK","E1_FILORIG","E1_PREFIXO","E1_NUM","E1_PARCELA","E1_TIPO"})
				_oFINA1101:Create() 
			EndIF
			//cAliasSE1 := _oFINA1101:GetAlias()
			dbSelectArea(cAliasSE1)

			Processa( { || lRetTemp := F110ToTrb(cQuery, aStru, cAliasSe1 , _oFINA1101:GetRealName() , cFields ) } ) // Cria arquivo temporario
			If !lRetTemp
				HELP(" ",1,"SGDBInfo",,STR0084 ,2,0,,,,,, { STR0085 })  // Ocorreu erro no comando do banco de dados. ###  Avalie o log de incosistências gerado na pasta system arquivo FR110Log.
				Return .F.
			EndIf
			(cAliasSe1)->(DBGoTop())
			(cAliasSe1)->(DbSetOrder(0)) // Fica na ordem da query

			If (cAliasSE1)->(Bof()) .And. (cAliasSE1)->(Eof())
				Help(" ",1,"RECNO")
				RetIndex("SE1")
				Set Filter to
				Exit
			EndIf

			nValor	:= 0    // valor total dos titulos,mostrado no rodap‚ do browse
			nQtdTit	:= 0    // quantidade de titulos,mostrado no rodap‚ do browse
			__nQTitCh := 0
			nOpcA		:= 0
			nValorTotal := 0	  

			nMoedaBco	:= Max(SA6->A6_MOEDA,1)

			//Gestao
			AADD(aCampos,{"E1_OK","","  ",""})
			dbSelectArea("SX3")
			SX3->(dbSetOrder(1))
			SX3->(MsSeek("SE1"))
			While SX3->(!EOF()) .And. (SX3->X3_ARQUIVO == "SE1")
				IF ( X3USO(SX3->X3_USADO) .or. ;
				Alltrim(SX3->X3_CAMPO) $ "E1_SALDO|E1_PORTADO|E1_NUMBOR" .OR. ;
				( Alltrim(SX3->X3_CAMPO) == "E1_FILIAL" .and. Len(aSelFil) > 0 )) ;
				.AND. cNivel >= SX3->X3_NIVEL .AND. SX3->X3_CONTEXT != "V"
					AADD(aCampos,{SX3->X3_CAMPO,"",X3Titulo(),SX3->X3_PICTURE})
				Endif
				SX3->(dbSkip())
			EndDo

			//Ponto de entrada para tratamento dos campos a serem demonstrados na tela de selecao dos titulos
			If lF110CPOS
				aCampos := EXECBLOCK("F110CPOS",.F.,.F.,aCampos)
			EndIf

			//Traz titulos pre-marcados
			//Utilizado apenas na rotina manual. Nao utilizar na rotina automatica
			If mv_par09 == 1	
				Fa110Marca(cAliasSE1,cMarca,aTitulos)
			EndIf

			nDescont := nDescGeral

			//Faz o calculo automatico de dimensoes de objetos 
			oSize := FWDefSize():New(.T.)

			oSize:AddObject("MASTER",100,100,.T.,.T.)
			oSize:lLateral := .F.				
			oSize:lProp := .T.

			oSize:Process()			
			DEFINE MSDIALOG oDlg1 TITLE STR0004 PIXEL FROM oSize:aWindSize[1],oSize:aWindSize[2] To oSize:aWindSize[3],oSize:aWindSize[4] OF oMainWnd //"Reconcilia‡„o Banc ria"
			oTimer:= TTimer():New((nTimeOut-nTimeMsg),{|| MsgTimer(nTimeMsg,oDlg1) },oDlg1) // Ativa timer
			oTimer:Activate()

			nLinIni := oSize:GetDimension("MASTER","LININI")
			nColIni := oSize:GetDimension("MASTER","COLINI")
			nLinFin := oSize:GetDimension("MASTER","LINEND")
			nColFin := oSize:GetDimension("MASTER","COLEND")

			@nLinIni+003,005	Say STR0012  SIZE 50,10 PIXEL Of oDlg1 	// "Valor Total:"
			@nLinIni+003,060	Say oValor	 VAR nValor	Picture "@E 999,999,999.99" SIZE 50,10  PIXEL Of oDlg1 
			@nLinIni+003,150	Say STR0013  SIZE 50,10 PIXEL Of oDlg1 	// "Quantidade:"
			@nLinIni+003,200	Say oQtda	 VAR nQtdTit Picture "@E 99999" SIZE 50,10  PIXEL Of oDlg1 

			oMark		:= MsSelect():New(cAliasSE1,"E1_OK","!E1_SALDO",aCampos,@lInverte,@cMarca,{nLinIni+18,nColIni,nLinFin,nColFin})
			oMark:bMark	:= {||finadisplay(cMarca,lInverte,oValor,oQtda,"R")}

			oMark:bAval	:= {||Fa110bAval(cAliasSE1,cMarca,oValor,oQtda,oMark,@nValor)}
			oMark:oBrowse:lhasMark		:= .t.
			oMark:oBrowse:lCanAllmark	:= .t.
			oMark:oBrowse:bAllMark		:= { || ProcInverte(cAliasSE1,cMarca,oValor,oQtda,.T.,oMark,@nValor)}
			oMark:oBrowse:Refresh() 			

			// Ponto de entrada para inclusao de botao
			If lFA110BUT
				aButtons := Execblock("FA110BUT",.F.,.F.,)
			Endif

			If IsPanelFin()
				ACTIVATE MSDIALOG oDlg1 ON INIT FaMyBar( oDlg1,{|| Iif( FA110BtOk(), (nOpca := 1,oDlg1:End()), nOpca := 0) },{|| nOpca := 0,oDlg1:End()},aButtons )
			Else
				ACTIVATE MSDIALOG oDlg1 ;				
				ON INIT EnchoiceBar( oDlg1,{|| Iif( FA110BtOk(), (nOpca := 1,oDlg1:End()), nOpca := 0) },{|| nOpca := 0,oDlg1:End()},,aButtons ) CENTER				
			Endif

			If nOpca != 1
				If __lSX8
					RollBackSX8()
				Endif

				DbSelectArea(cAliasSe1)
				(cAliasSe1)->(DbGoTop())				
				While (cAliasSe1)->(!Eof())
					If (cAliasSE1)->E1_OK == cMarca
						//Destrava registros do SE1 para liberar para outros usuários
						SE1->(DbGoTo((cAliasSe1)->RECNO))
						SE1->(MsUnlock())
					Endif
					(cAliasSe1)->(dbSkip())
				EndDo
				(cAliasSe1)->(DBGoTop())

				dbSelectArea("SE1")
				RetIndex("SE1")
				Set Filter to
				dbSetOrder(nSavOrd1)

				If lF110CPOS
					aCampos := {}
				Endif

				Loop

			Endif

			dbSelectArea( "SE1" )

			IF nValor < 0
				Exit
			EndIF

			If __lSX8
				ConfirmSX8()
			Endif


		Else

			//Rotina Automatizada
			nValor		:= 0    // valor total dos titulos,mostrado no rodap‚ do browse
			nQtdTit		:= 0    // quantidade de titulos,mostrado no rodap‚ do browse
			nOpcA		:= 0
			nValorTotal	:= 0	
			__nQTitCh	:= 0
			nRec		:= SE1->( RecNo() )	
			cBco110		:= PadR(aTitulos[2],__nTamBco)
			cAge110		:= PadR(aTitulos[3],__nTamAge)
			cCta110		:= PadR(aTitulos[4],__nTamCC)
			cLoteFin	:= aTitulos[6]
			lGerTotal	:= lBxCnab .AND. !Empty(cLoteFin)
			nMoedaBco	:= Max( MoedaBco(cBco110,cAge110,cCta110), 1)		
			If lF110Auto .and. Len(aTitulos) >= 9 .And. ValType(aTitulos[09]) == "L" .And. aTitulos[09]
				dBaixa := aTitulos[8]
			EndIf
			Fa110Marca("SE1",cMarca,aTitulos[1])
			nDescont := nDescGeral

			nY		:= 1	
			nLast	:= Len(aTitulos[1])

		EndIf	

		//-- Data limite para realização de mnovimento financeiro.
		If lBXDTFIN 
			If !(DtMovFin(dBaixa,.T.,"2"))
				Return .F.
			Endif
		Endif

		nI := Ascan(__aMotBx, {|x| Substr(x,1,3) == TrazCodMot(cMotBx) })
		cDescrMo := if( nI > 0,Substr(__aMotBx[nI],07,10),"" )
		
		//-- Calcula comissão na baixa.
		lComisBx:=(ComisBx(TrazCodMot(cMotBx)) .And. cTpComiss=="O")

		dbSelectArea("SE1")
		//MsUnlockall() retirado para não permitir concorrencia de registros.
		ChkFile("SE1",.f.,"ABAT")

		dbSelectArea(cAliasSe1)
		(cAliasSE1)->(DbSetOrder(1))
		dbGoTop()

		//Rotina Padrao (nao automatizada)
		If !lF110Auto
			IF !Empty(cBord110)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Procura o primeiro registro com carteira  ³
				//³ igual a "R"                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea("SEA")
				dbSetOrder(nIndSEA)		//2 = EA_FILIAL+EA_NUMBOR+EA_CART ou 4 = EA_FILORIG+EA_NUMBOR+EA_CART
				If MSSeek( xFilial("SEA")+cBord110+"R" )
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Posiciona no banco para a contabilizacao  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					dbSelectArea("SA6")
					dbSetOrder(1)
					MsSeek(xFilial("SA6") + SEA->EA_PORTADO+SEA->EA_AGEDEP+SEA->EA_NUMCON)

					dbSelectArea("SEA")
					cBco110 := SA6->A6_COD
					cAge110 := SA6->A6_AGENCIA
					cCta110 := SA6->A6_NUMCON
					nMoedaBco := Max(SA6->A6_MOEDA, 1)

				Else
					cBord110 := Space(6)				// portanto limpa a vari vel
				EndIf
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicia processo de integracao com o SIGAPCO ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PCOIniLan("000012")	

		dbSelectArea(cAliasSE1)
		lEof := Eof()
		If lF110Auto .And. nQtdTit == __nQTitCh
			lEof := .T.
		EndIf
		//Em situacoes que contabilizar com o LP521, zero a variavel VALOR que pode, 
		//neste caso, conter um carga realizada pelo LP520 em uma baixa anterior.
		Valor := 0

		lMovBcoBx := MovBcoBx(cMotBx, .T.)

		//Gestao
		cFilLogin := cFilAnt
		//Controle de documentos contabeis
		lDigita			:=IIF(mv_par01==1 .and. !lF110Auto ,.T.,.F.)
		lAglut			:=IIF(mv_par02==1,.T.,.F.)
		lContabiliza 	:=IIF(mv_par03==1,.T.,.F.)
		nHdlPrv 		:= 0

		//Carrego model de Bx a Receber
		oModelBxR	:= FWLoadModel("FINM010") //Model de baixas a receber
		oSubFK1	:= oModelBxR:GetModel("FK1DETAIL")
		oSubFK3	:= oModelBxR:GetModel("FK3DETAIL")
		oSubFK4	:= oModelBxR:GetModel("FK4DETAIL")
		oSubFK5	:= oModelBxR:GetModel("FK5DETAIL")
		oSubFK6	:= oModelBxR:GetModel("FK6DETAIL")
		oSubFKA	:= oModelBxR:GetModel("FKADETAIL")
		oModelBxR:SetOperation( MODEL_OPERATION_INSERT ) //Inclusao
		oModelBxR:Activate()

		If !lF110Auto
			(cAliasSE1)->(DbSetOrder(2))
			(cAliasSE1)->(dbSeek(cMarca))
		Endif	

		While !lEof			
			lVerMotor := .F.
			
			If __lfTemCfg .and. !lF110Auto
				If (cAliasSE1)->TEMMOTRET > 0
					lVerMotor := .T.
				Endif
			Else
				lVerMotor := .T.
			Endif		

			cCamposE5 := ""
			nParciais := 0
			//Gestao
			If !lF110Auto			
				If !lSE1Access//-- Exclusivo
					If !SM0->( DbSeek( SM0->M0_CODIGO + (cAliasSE1)->E1_FILORIG ) )
						(cAliasSE1)->(dbSkip())
						Loop
					EndIf
					cFilAnt := (cAliasSE1)->E1_FILORIG 
				EndIf

				SE1->(dbGoTo((cAliasSE1)->RECNO))
			EndIf

			//Rotina Automatizada	
			If lF110Auto
				(cAliasSE1)->(dbGoto(aTitulos[1,nY]))
				If SE1->E1_SALDO == 0
					If nY == nLast
						lEof := .T.
					Endif
					nY++
					Loop
				EndIf

				lPccBxCr		:= FPccBxCr(.T.)
				//Controla IRPJ na baixa
				lIrPjBxCr		:= If (lFuncIrPj,FIrPjBxCr(.T.),.F.)

				aBaixas := {}	

				nRegAtu := Recno()

				cFilOri := cFilAnt := (cAliasSE1)->E1_FILORIG
				// Alterado para permitir baixar titulos de outras filiais
				// desde que seja de mesmo prefixo do banco. Exemplo:
				// SA6 - Compartilhamento EEC. Se estiver na filial D MG 01, baixar todos os titulos que sejam da D MG
                SA6->(dbSetOrder(1))    // A6_FILIAL, A6_COD, A6_AGENCIA, A6_NUMCON
				If !SA6->(MsSeek(xFilial('SA6')+PadR(aTitulos[2],__nTamBco)+PadR(aTitulos[3],__nTamAge)+PadR(aTitulos[4],__nTamCC)))
                    If nY == nLast
                        lEof := .T.
                    Endif

                    nY++
                    LOOP
				EndIf
			Else										
                cFilOri := (cAliasSE1)->E1_FILORIG
				If !lSE1Access  //-- Exclusivo
					cFilAnt	:= cFilOri 
				EndIf
			EndIf

			cFilLancto :=(cAliasSE1)->E1_FILORIG
			cFilTit := FwXFilial("SE1",(cAliasSE1)->E1_FILORIG)
			nTxMoeda := FA110TxMoed( cAliasSE1 ) 
			// Avalia saldo para garantir que já não esta baixado 
			If (cAliasSE1)->E1_OK == cMarca .And. SE1->E1_SALDO > 0 .and. !((cAliasSE1)->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT)

				oModelBxR:DeActivate()
				oModelBxR:SetOperation( MODEL_OPERATION_INSERT ) //Inclusao
				oModelBxR:Activate()
				oModelBxR:SetValue("MASTER","E5_GRV"  , .T. ) //habilita gravação de SE5
				oModelBxR:SetValue("MASTER","NOVOPROC", .T. )

				//Gestao
				//Controle de documentos contabeis
				nC++
				cPadrao  := fA070Pad()
				lPadrao  := VerPadrao( cPadrao )

				IF lPadrao .and. lContabiliza
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Inicializa Lancamento Contabil                                   ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If nHdlPrv == 0
						cFilBkp	:=	cFilAnt						
						cFilAnt := fDefLancto(lSE5Access,lSE1Access,cFilLancto,cFilLogin)
						nHdlPrv := HeadProva( cLote,"FINA110",Substr( cUsuario, 7, 6 ),@cArquivo )
						cFilAnt := cFilBkp
					Endif
				Else
					//Se for TOP e nao automatico, posiciono o SE1 e sigo o fluxo normal da rotina
					If !lF110Auto
						SE1->(dbGoTo((cAliasSE1)->RECNO))
					Endif			
				EndIf

				BEGIN TRANSACTION
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Posiciona no Cadastro de Naturezas ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					dbSelectArea("SED")
					dbSetOrder(1)
					MSSeek(xFilial("SED")+SE1->E1_NATUREZ)
					dbSelectArea("SE1")
					nRegAtu     := RecNo()
					nSaldo		:= E1_SALDO
					
					If !lF110Auto
						nAbat := (cAliasSE1)->(ABAT_V)
					Else
						nAbat := SomaAbat(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,"R",SE1->E1_MOEDA,dDataBase,SE1->E1_CLIENTE,SE1->E1_LOJA,XFILIAL('SE1',SE1->E1_FILORIG))
					EndIf

					nSaldoCru	:= Round(NoRound(xMoeda((SE1->E1_SALDO-nAbat),SE1->E1_MOEDA,nMoedaBco,,3,If(__lIsBRA,SE1->E1_TXMOEDA,0)),3),2)			
					cNumero		:= SE1->E1_NUM
					cPrefixo	:= SE1->E1_PREFIXO
					cParcela	:= SE1->E1_PARCELA
					cCliente	:= SE1->E1_CLIENTE
					cLoja   	:= SE1->E1_LOJA           
					cTipoOr		:= SE1->E1_TIPO
					nBaseIr		:= SE1->E1_SALDO   //utilizado para definir a base do IR quando calculado na baixa
					nTotAbat	:= 0
					nValImp     := 0
					nValAbat	:= 0
					nMoeda		:= 2
					nJuros		:= 0
					nVA			:= 0
					nMulta		:= 0
					nDescont	:= 0
					nCorrec		:= 0
					nCM1 		:= 0
					nProRata 	:= 0
					lRet 		:=.T.

					If mv_par06 == 1 .And. !lF110Auto
						cBco110	:= IIF(!Empty(E1_PORTADO), E1_PORTADO, cBco110)
						cAge110	:= IIF(!Empty(E1_AGEDEP) , E1_AGEDEP , cAge110)
						cCta110	:= IIF(!Empty(E1_CONTA)  , E1_CONTA  , cCta110)
					EndIf	

					nAcresc		:= Round(NoRound(xMoeda(SE1->E1_SDACRES,SE1->E1_MOEDA,nMoedaBco,,3,If(__lIsBRA,SE1->E1_TXMOEDA,0)),3),2)
					nDecresc	:= Round(NoRound(xMoeda(SE1->E1_SDDECRE,SE1->E1_MOEDA,nMoedaBco,,3,If(__lIsBRA,SE1->E1_TXMOEDA,0)),3),2)
					dBaixa		:= dDataBase // Utilizada por Fa070Data

					If lF110Auto .and. Len(aTitulos) >= 9 .And. ValType(aTitulos[09]) == "L" .And. aTitulos[09]
						dBaixa := aTitulos[8]
					EndIf
					
					nCorrec	:= fa110Correc()

					//as variaveis abaixo sao utilizadas em algumas funcoes chamadas a partir
					//da funcao Fa070Data. A retirada destas causara problemas a rotina.
					cBanco   	:= cBco110
					cAgencia 	:= cAge110
					cConta		:= cCta110
					//Pcc Baixa CR
					nPis		:= 0 
					nCofins 	:= 0
					nCsll		:= 0
					nValRec		:= 0
					nIrrf		:= 0
					
					//Zera variaveis de calculo de impostos (FK3)
					nPisCalc 	:= 0
					nCofCalc 	:= 0
					nCslCalc 	:= 0
					nIrfCalc 	:= 0
					nIssCalc	:= 0

					F110Ret()

					If !lF110Auto
						nVa 		:= (cAliasSE1)->VA_V
						nJuros 		:= (cAliasSE1)->JUROS_V
						nCM1 		:= (cAliasSE1)->CM1_V
						nProRata 	:= (cAliasSE1)->PRORATA_V
						nMulta 		:= (cAliasSE1)->MULTA_V
						nDescont 	:= (cAliasSE1)->DESCONTO_V
					Else
						FA110Valores()
					EndIf			

					If cMvJurTipo == "L" .OR. lMulLoj	//CALCULO AUTOMÁTICO DE MULTA - QUANDO ORIGEM NO LOJA
						//--------------------------------------------------------------------------
						// Calcula o valor da Multa  :funcao LojxRMul :fonte Lojxrec
						//--------------------------------------------------------------------------
						If lLojxRMul .and. dBaixa > SE1->E1_VENCREA
							nMulta := LojxRMul( , , ,SE1->E1_SALDO, SE1->E1_ACRESC, SE1->E1_VENCREA, dDtCredito , , SE1->E1_MULTA, ,;
							SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_CLIENTE, SE1->E1_LOJA, "SE1",.T. )

							nMulta := xMoeda(nMulta,SE1->E1_MOEDA,nMoedaBco,dBaixa,,If(__lIsBRA,SE1->E1_TXMOEDA,0))
						Else
							nMulta := 0
						Endif
					Endif

					dbSelectArea("SA1")
					dbSetOrder(1)	
					cFilCli:=xFilial("SA1")
					If MsSeek(cFilCli+cCliente+cLoja)//Manter posicionamento do SA1 fora do lMV_NOTSA1, pois utiliza SA1 nos trechos mais abaixo
						If lMV_NOTSA1 //Atualiza saldo do cliente ao realizar baixa automática.
							IF (nI := aScan(aNroPag,{|x| x[1]+x[2]+x[3]==cFilCli+cCliente+cLoja}) ) > 0
								aNroPag[nI,4]++
							Else							
								Aadd(aNroPag, {cFilCli, cCliente, cLoja , 1 } )
							EndIF						
						EndIf
					EndIF

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ PONTO DE ENTRADA FA110DES                                     ³
					//³ ExecBlock para calculo de descontos                           ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lFa110Desc
						nDescont := Execblock("FA110DES",.F.,.F.)
					Endif

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ PONTO DE ENTRADA FA110JUR                                     ³
					//³ ExecBlock para calculo de Juros                               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lFa110Juros
						nJuros := Execblock("FA110JUR",.F.,.F.)
					Endif

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ PONTO DE ENTRADA FA110MUL                                     ³
					//³ ExecBlock para calculo de Multas                              ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lFa110Mult
						nMulta := Execblock("FA110MUL",.F.,.F.)
					Endif
					cTipo:= SE1->E1_TIPO
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Soma Titulos Abatimentos                         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					dbSelectArea( "ABAT" )
					dbSetOrder( 2 )

					//Tratamento para quando não for "CEE"					
					If !( cSE1Emp == "E" .And. cSE1UNe == "E" .And.	cSE1Fil== "C")
						MSSeek( xFilial("SE1")+cCliente+cLoja+cPrefixo+cNumero+cParcela )
						If lTitpaiSE1
							If (nOrdTitPai:= OrdTitpai()) > 0
								DbSetOrder(nOrdTitPai)
								If	MsSeek(xFilial("SE1")+cPrefixo+cNumero+cParcela+cTipo+cCliente+cLoja)    
									bWhile := {|| !Eof() .And. Alltrim(xFilial("SE1")+E1_TITPAI) == Alltrim(xFilial("SE1")+cPrefixo+cNumero+cParcela+cTipo+cCliente+cLoja) }
								Else
									dbSetOrder( 2 )
									MsSeek( xFilial("SE1")+cCliente+cLoja+cPrefixo+cNumero+cParcela )
								EndIf	
							Endif
						Endif
					Else
						MSSeek( cFilTit+cCliente+cLoja+cPrefixo+cNumero+cParcela )
						If lTitpaiSE1
							If (nOrdTitPai:= OrdTitpai()) > 0
								DbSetOrder(nOrdTitPai)
								If	MsSeek(cFilTit+cPrefixo+cNumero+cParcela+cTipo+cCliente+cLoja)
									bWhile := {|| !Eof() .And. Alltrim(cFilTit+E1_TITPAI) == Alltrim(cFilTit+cPrefixo+cNumero+cParcela+cTipo+cCliente+cLoja) }
								Else
									dbSetOrder( 2 )
									MsSeek( cFilTit+cCliente+cLoja+cPrefixo+cNumero+cParcela )
								EndIf
							Endif
						Endif
					EndIf
					nRecnoSe1 := SE1->(Recno())

					While Eval(bWhile) 

						IF E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT .And.;
						E1_SALDO   >  0            .And.;
						E1_CLIENTE == cCLIENTE                                       

							If lTitpaiSE1
								If  !Empty(E1_TITPAI).and.(Alltrim(E1_TITPAI)!=Alltrim(cPrefixo+cNumero+cParcela+cTipo+cCliente+cLoja))
									DbSkip()
									Loop
								EndIf
							EndIf  					

							//Abatimento baixado pela rotina de compensacao, desconsiderar
							If !Empty(SE1->E1_TITPAI) .AND. (MVRECANT $ SE1->E1_TITPAI .OR. MV_CRNEG $ SE1->E1_TITPAI)
								SE1->(dbSkip())
								Loop
							Endif

							nTotAbat += Round(NoRound(xMoeda(E1_SALDO,E1_MOEDA,nMoedaBco,,3,If(__lIsBRA,E1_TXMOEDA,0)),3),2)
							nValAbat += E1_SALDO
							nValImp  += If( E1_TIPO $ MVIRABT+"/"+MVINABT, E1_SALDO, 0)
							ABATIMENTO := nTotAbat
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Carrega variavies para contabilizacao dos    ³
							//³ abatimentos (impostos da lei 10925).         ³			
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If E1_TIPO == MVPIABT
								VALOR5 := E1_VALOR			
							ElseIf E1_TIPO == MVCFABT
								VALOR6 := E1_VALOR
							ElseIf E1_TIPO == MVCSABT
								VALOR7 := E1_VALOR						
							Endif			
							AADD( aRecNoAbat, ABAT->(Recno()) )
							#IFDEF TOP
							If Len( aRecNoAbat ) > 0
								cQuery := "UPDATE "+ RetSQLName( "SE1" ) + " " 
								cQuery += "SET E1_SALDO = 0"
								cQuery += ", E1_BAIXA = '" + DTOS(dDataBase) + "'"
								cQuery += ", E1_MOVIMEN = '" + DTOS(dDataBase) + "'"
								cQuery += ", E1_STATUS = 'B' "
								cQuery += ", E1_TITPAI = '" + cPrefixo + cNumero + cParcela + cTipoOr + cCliente + cLoja + "' "
								cQuery += "WHERE "
								cQuery += "R_E_C_N_O_ IN ("
								For i := 1 To Len( aRecNoAbat )
									cQuery += If( i > 1, ", ", " " ) + AllTrim( Str(aRecNoAbat[i]) )
									If i == Len( aRecNoAbat )
										cQuery += ")" 
									EndIf
								Next i

								TCSQLExec( cQuery )
								aRecNoAbat := {}
							EndIf
							#ELSE
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Atualiza a Baixa do Titulo     ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							SE1->(Msgoto(ABAT->(Recno())))
							RecLock("SE1",.F.)
							Replace E1_SALDO	With 0
							Replace E1_BAIXA	With dDataBase
							Replace E1_MOVIMEN  With dDataBase
							Replace E1_STATUS   With "B"

							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Gravar o titulo que baixou o AB- para evitar estornos de ³
							//³abatimentos baixados por outras rotinas. Evita que um AB-³
							//³baixado pelo FINA070 / 110 seja estornado indevidamente  ³
							//³pelo FINA330, que gera erro na composicao do saldo do    ³
							//³titulo principal com abatimento.                         ³
							//³Gravar SEMPRE NCC/RA para identificar a baixa do AB-     ³
							//³pela rotina FINA330					    ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							Replace E1_TITPAI	With (cPrefixo + cNumero + cParcela + cTipoOr + cCliente + cLoja)

							SE1->(MsUnlock())
							DbSelectArea("ABAT")
							#ENDIF
						EndIF
						If !lIrRetBord
							lIrRetBord := AllTrim(ABAT->E1_TIPO) == "IRF" .And. AllTrim(ABAT->E1_ORIGEM) $ "FINA061|FINA891"
						EndIf
						dbSkip()
					Enddo
					
					If __lMotRet .and. lVerMotor
						F110VerImp("2",cFilAnt,SE1->E1_CLIENTE,SE1->E1_LOJA,.T.,@lIrPjBxCr,@lPccBxCr)
					EndIf

					DbSetOrder(1)
					dbSelectArea( "SE1" )
					MsGoto(nRecnoSe1)

					//Controle de impostos Pis Cofins Csll na baixa
					nValRec    := nSaldoCru+nJuros+nVA+nMulta-nDescont+nAcresc-nDecresc
					nBasePCC   := 0
					__lCalcImp := .F.
					
					If __lBordImp .And. !Empty(SE1->E1_NUMBOR)
						__lCalcImp := BorderoImp(SE1->E1_FILORIG, SE1->E1_NUMBOR, "R", SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO)
					EndIf
					
					If __lFPIXatv .And. !__lCalcImp .And. !lMVCNABImp
						__lCalcImp := PIXIsActiv()
					EndIf
					
					If lPccBxCR .Or. lIrPjBxCr

						nBasePCC := If((cAliasSE1)->E1_BASEPIS > 0, (cAliasSE1)->E1_BASEPIS, If((cAliasSE1)->E1_BASECOF > 0, (cAliasSE1)->E1_BASECOF, If((cAliasSE1)->E1_BASECSL > 0, (cAliasSE1)->E1_BASECSL, 0)))  

						If (cAliasSE1)->E1_SALDO < (cAliasSE1)->E1_VALOR
							//Array vazio ou título ainda não presente
							aBaixaSE5 := {}
							Sel070Baixa( "VL /V2 /BA /RA /CP /LJ /" + MV_CRNEG, cPrefixo , cNumero , cParcela , cTipo , , , cCliente , cLoja )

							For nX := 1 To Len( aBaixaSE5 )
								nParciais += Iif(SE1->E1_MOEDA > 1, aBaixaSE5[nX][8]-aBaixaSE5[nX,17]/*VlCorr*/, aBaixaSE5[nX][8]/*E5_VALOR*/+aBaixaSE5[nX,16]/*E5_VLDESCO*/-aBaixaSE5[nX,14]/*E5_VLJUROS*/-aBaixaSE5[nX,15]/*E5_VLMULTA*/)
								If aBaixaSE5[ nX , 1 ] + Pad( aBaixaSE5[ nX , 2 ] , Len( SE1->E1_NUM ) ) + aBaixaSE5[ nX, 3 ] + aBaixaSE5[ nX , 4 ] + aBaixaSE5[ nX , 5 ] + aBaixaSE5[ nX , 6 ] == cPrefixo + cNumero + cParcela + cTipo + cCliente + cLoja
									nBasePCC -= aBaixaSE5[nX][8]
									If lRaRtImp //.And. nParciais > nVlMinImp
										nBasePCC -= aBaixaSE5[nX][18]+aBaixaSE5[nX][19]+aBaixaSE5[nX][20]+aBaixaSE5[nX][30]+aBaixaSE5[nX][32]+aBaixaSE5[nX][33]
									EndIf
									nBasePCC += (aBaixaSE5[nX][14]+aBaixaSE5[nX][15])  // Soma Acrescimo mais Multa
								EndIf
							Next nX

							//Posiciono novamente o alias caso a função Sel070Baixa não o faça...
							DbSetOrder( 1 )
							dbSelectArea( "SE1" )
							MsGoto( nRecnoSe1 )

							If nBasePCC == (cAliasSE1)->E1_VALOR
								nBasePCC := nValRec 
							EndIf
						Else
							nValRec  -= (nPis+nCofins+nCsll)
							If lJurMulDes
								nBasePCC += (nJuros+nVA+nMulta-nDescont+nAcresc-nDecresc)
							EndIf	
						EndIf
					EndIf

					nOldValRec := nValRec
					nVlRetPis  := 0
					nVlRetCof  := 0
					nVlRetCsl  := 0				
					
					cChaveTit := cFilTit+"|"+SE1->E1_PREFIXO+"|"+SE1->E1_NUM+"|"+SE1->E1_PARCELA+"|"+SE1->E1_TIPO+"|"+SE1->E1_CLIENTE+"|"+SE1->E1_LOJA
					cChaveFK7 := FINGRVFK7("SE1",cChaveTit)
					If __lMotRet .and. lVerMotor .And. !__lCalcImp
						F110VldImp(nValRec, dBaixa, @lPccBxCr, @lIrPjBxCr,cChaveFK7)
					EndIf

					If lPccBxCr .and. !__lPccMr
						aTitCalc := {}

						If SA1->A1_PESSOA == 'J' .And.;
							( ( SED->ED_CALCCSL == 'S' .And. SA1->A1_RECCSLL = 'S') .OR.;
							 (SED->ED_CALCPIS == 'S' .And. SA1->A1_RECPIS == 'S') .OR.;
							 (SED->ED_CALCCOF == 'S' .And. SA1->A1_RECCOFI == 'S') )
						
							If dDataBase < dLastPcc
								f070TotMes(dBaixa,.T.,,.F.)      
							ElseIf !__lCalcImp .And. !SE1->E1_TIPO $ MVRECANT .And. Iif(lMVCNABImp,.T.,VLDBOR(SE1->E1_NUMBOR,"R"))
								aPcc	:= newMinPcc(dBaixa, nBasePCC,SE1->E1_NATUREZ,"R",SA1->A1_COD+SA1->A1_LOJA)
								nPis	:= aPcc[2]
								nCofins := aPcc[3]
								nCsll	:= aPcc[4]
								
								If len(aPCC) > 4
									aTitCalc := aPCC[5]
								EndIf
							EndIf      
							
							PIS := nPis   
							COFINS := nCofins
							CSLL := nCsll
						EndIf
					EndIf
					
					lIrPjBxCr:=.F.
					If SED->ED_CALCIRF == "S" 
						lIrPjBxCr := FIrPjBxCr(lVerMotor)	
					Endif  					
					
					//Garanto que não vai tentar reter um valor maior que o saldo do título
					If __lMotRet .and. nValrec <> 0 .and. nValrec < __nTotImp
						aAdd(aOutImp, {"PIS", nPis })
						aAdd(aOutImp, {"COF", nCofins })
						aAdd(aOutImp, {"CSL", nCsll })
						aAdd(aOutImp, {"IRF", nIrrf })
						aAdd(aOutImp, {"OUT", nlImpMR })

						aDadosPar := verVrAR(nValrec, aOutImp )
						nPis		:= aDadosPar[1]
						nCofins		:= aDadosPar[2]
						nCsll		:= aDadosPar[3]
						nImp 		:= Len(__aImpos)

						For nM := 1 To nImp
							Do Case
								Case AllTrim(__aImpos[nM,8]) == "PIS" .And. __aImpos[nM,9] == "2"
								__aImpos[nM,5] := nPis
								Case AllTrim(__aImpos[nM,8]) == "COF" .And. __aImpos[nM,9] == "2"
								__aImpos[nM,5] := nCofins
								Case AllTrim(__aImpos[nM]) == "CSL" .And. __aImpos[nM,9] == "2"
								__aImpos[nM,5] := nCsll
							End Case  
						Next nM
					Endif

					
					If lPccBxCR .and. nValRec + aDadosRet[1] > nVlMinImp
						nValRec -= (nPis+nCofins+nCsll)
					Endif						

					If __lIsBRA
						If SED->ED_RECIRRF == "3" .and. SA1->A1_RECIRRF == "" // Se definir na natureza que o cliente define quem retem e o cliente não definir, não retenho
							nIrrf	:= 0
						Else
							If lIrPjBxCr .And. !lIrRetBord .and. !__lIrfMR
								nIrrf := Iif(!__lCalcImp, FCaIrBxCR(nBaseIr), nIrrf)
								
								If SA1->A1_RECIRRF == "1" // se cliente
									nValrec 	-= nIrrf
								EndIf
							Else   	 
								nValrec -= nIrrf
							EndIf
						EndIf
					EndIf
	
					If __lImpMR //Outros tipos de retenções pelo Motor
						nValrec -= nlImpMR
					Endif

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Atualiza a Baixa do Titulo                 ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					// Os titulos de abatimentos ja foram baixados no processo acima.
					If ! SE1->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT .And. SE1->E1_SALDO > 0
						RecLock("SE1",.F.)
						SE1->E1_SALDO	:= 0
						SE1->E1_BAIXA	:= If(lBxLotSitef .And. Len( aTitulos ) >= 8 , aTitulos[8], dDataBase)
						SE1->E1_MOVIMEN := SE1->E1_BAIXA
						SE1->E1_JUROS	:= nJuros + nAcresc
						SE1->E1_CORREC	:= nCorrec
						SE1->E1_DESCONT	:= nDescont + nDecresc
						SE1->E1_MULTA  	:= nMulta
						SE1->E1_VALLIQ	:= nValRec
						SE1->E1_STATUS  := Iif(E1_SALDO>0.01,"A","B")
						SE1->E1_SDACRES := 0 
						SE1->E1_SDDECRE := 0 
						SE1->E1_LOTE	:= If(lBxCnab,cLoteFin,'')
						If !(SE1->E1_OK == cMarca)
							SE1->E1_OK := cMarca 
						EndIf	
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Salva os campos na tabela SE1 especifico do Template GEM       ³
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lGemSE1Grv
							ExecTemplate("GEMSE1Grv",.F.,.F.)
						EndIf
						SE1->(MsUnlock())

						If lThread
							aAdd(aRetThread, {{ .T. , SE1->(Recno()), "Baixa Ok", cKeyId}})
							VarSetA(cMyUId,cKeyId,aRetThread)
						EndIf

						//---------------------------------------------------------
						// Atualiza status do adiantamento de viagem
						If (ALLTRIM(SE1->E1_ORIGEM) == "FINA677")
							FINATURES(SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA),.T.,SE1->E1_ORIGEM,"R")
						Endif

						//-----------------------------------------------------------------------------------------------------------------
						// Atualiza o saldo da natureza. O valor ja esta liquido dos abatimentos, desta forma nao precisa atualizar na baixa dos abatimentos
						AtuSldNat(SE1->E1_NATUREZ, SE1->E1_BAIXA, SE1->E1_MOEDA, "3", "R", nValrec, xMoeda(nValrec,SE1->E1_MOEDA,nMoedaBco,SE1->E1_BAIXA,,,If(__lIsBRA,SE1->E1_TXMOEDA,0)), If(SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG,"-","+"),,cFunName,"SE1", SE1->(Recno()),0)
						
						//--------------------------------------------------------
						//-- Trecho incluido para integração e-commerce
						iF __lHasLoja
							If LJ861EC01(SE1->E1_NUM, SE1->E1_PREFIXO, .T./*PrecisaTerPedido*/, SE1->E1_FILORIG)
								LJ861EC02(SE1->E1_NUM, SE1->E1_PREFIXO, SE1->E1_FILORIG)
							EndIf		
						EndIF
						
						//---------------------------------------------------------
						//-- Atualiza o status do titulo no SERASA						
						If __lIsBRA .And. SE1->E1_SALDO <= 0 .And. __lHasSerasa							
							F770BxRen("1",TrazCodMot(cMotBx),cChaveFK7)
						EndIf	
					Else
						If lThread
							aAdd(aRetThread, {{ .F. , SE1->(Recno()), "Falha na Baixa", cKeyId}})	
							VarSetA(cMyUId,cKeyId,aRetThread)	
						EndIf
					EndIf	

					nValorTotal += SE1->E1_VALLIQ

					//---------------------------------------------------------
					//-- Soma o valor dos cheques recebidos
					If AllTrim(cSldBxCr) == "C"  .and. lGerTotal
						nSomaCheq:= SomaCheqCr(.F.,SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_CLIENTE)
						nValorTotal -= nSomaCheq
					EndIf	
					//---------------------------------------------------------
					//-- Obtem a nova sequencia de baixa
					cSequencia := FaNxtSeqBx("SE1", .T. , @oQryFk1 , , @oQryFk5 , .T.)  // Sequencia da baixa do titulo + 1

					SE5->( dbGoBottom() )
					SE5->( dbSkip() )

					MsUnlock()

					// Joga em variaveis o valor do Acrescimo e Decrescimo
					nJuros   := nJuros   + nAcresc
					nDescont := nDescont + nDecresc
					
					//Gravacao aglutinada apenas para situlos com situacao de cobranca diferente de descontada
					lGravaAglut := !(SE1->E1_SITUACA  $ cDescontada)	//SITCOB

					If !lGerTotal .AND. EMPTY(cChaveFK7)
						cChaveFK7	:= FWUUIDV4()
					EndIf
					cIdFK1 	 	:= FWUUIDV4()			

					//----------------------------------------------------------------
					// Atualiza a Movimentação Bancária
					//----------------------------------------------------------------
					For nX := 1 To 6
						//----------------------------------------------------------------
						// Atualiza a Movimentação Bancária
						//----------------------------------------------------------------
						If nX == 1
							nValCpo := SE1->E1_VALLIQ            //SITCOB
							cTpDoc := Iif(SE1->E1_SITUACA $ cDescontada,"V2",Iif(!lGerTotal .And. lMovBcoBx,"VL","BA"))
							cHistMov := Iif(lMovBcoBx, STR0014 ,; // "Valor recebido s /Titulo"
							cDescrMo ) 					
							If AllTrim(cSldBxCr) == "C" .And. cTpDoc == "VL" 
								aAreaAtu := GetArea()
								If Select("SEF") == 0
									dbSelectArea("SEF")
								EndIf
								SEF->(dbSetOrder(3)) //EF_FILIAL+EF_PREFIXO+EF_TITULO+EF_PARCELA+EF_TIPO+EF_NUM+EF_SEQUENC                                                                                             
								If SEF->(MsSeek(xFilial("SEF")+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)))
									While !SEF->(EOF()) .And. SEF->EF_TITULO == SE1->E1_NUM
										If AllTrim(SEF->EF_CART) == "R" .AND. AllTrim(SEF->EF_ORIGEM) $ "FINA040|FINA191|FINA460"
											cTpDoc := "BA"
											exit	
										EndIf
										SEF->(dbSkip()) 	
									Enddo
								EndIf 						
								RestArea(aAreaAtu)
							EndIf 
							nValRec := SE1->E1_VALLIQ
							nSE1Rec := SE1->(Recno())
						Elseif nX == 2
							nValCpo := nJuros
							cTpDoc  :=IIF(SE1->E1_SITUACA $ cDescontada,"J2","JR")
						Elseif nX == 3
							nValCpo := nDescont
							cTpDoc  :=IIF(SE1->E1_SITUACA $ cDescontada,"D2","DC")
						Elseif nX == 4
							nValCpo := nCorrec
							cTpDoc  :=IIF(SE1->E1_SITUACA $ cDescontada,"C2","CM")
						Elseif nX == 5
							nValCpo := nMulta
							cTpDoc  :=IIF(SE1->E1_SITUACA $ cDescontada,"M2","MT")
						ElseIf nX == 6
							nValCpo  := nVA
							cTpDoc   := "VA"
							cHistMov := ""
						Endif

						If nX == 1
							If cTpDoc $ 'VL/BA/V2'
								//Define os campos que não existem nas FKs e que serão gravados apenas na E5, para que a gravação da E5 continue igual
								If !Empty(cCamposE5) .And. !lF110Auto
									cCamposE5 += "|"
								ElseIf lF110Auto .And. Len(aTitulos[1]) > 1
									cCamposE5 := ""
								EndIf
								cCamposE5 += " { "
								cCamposE5 += " {'E5_PREFIXO'	,'" +  SE1->E1_PREFIXO+ "'}"
								cCamposE5 += ",{'E5_NUMERO'		,'" +  SE1->E1_NUM + "'}"
								cCamposE5 += ",{'E5_PARCELA'	,'" +  SE1->E1_PARCELA + "'}"
								cCamposE5 += ",{'E5_CLIENTE'	,'" +  SE1->E1_CLIENTE + "'}"
								cCamposE5 += ",{'E5_CLIFOR'		,'" +  SE1->E1_CLIENTE + "'}"
								cCamposE5 += ",{'E5_LOJA'		,'" +  SE1->E1_LOJA + "'}"
								cCamposE5 += ",{'E5_BENEF'		,'" +  SE1->E1_NOMCLI + "'}"
								cCamposE5 += ",{'E5_TIPO'		,'" +  SE1->E1_TIPO + "'}"
								cCamposE5 += ",{'E5_DTDIGIT'	, STOD('" + DTOS(dBKPDTBase) + "')}"
								cCamposE5 += ",{'E5_DTDISPO'	, STOD('" + DTOS(If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dDtCredito)) + "')}"
								cCamposE5 += ",{'E5_TPDESC'		,'I'}"
								cCamposE5 += ",{'E5_VLCORRE'	," + cValToChar(nCorrec) + "}"

								If (lGerTotal .And. cTpDoc == "BA") .OR. (!lGerTotal .AND. cTpDoc == "V2")
									cCamposE5 += ",{'E5_BANCO'	, '" + cBco110 + "'}"
									cCamposE5 += ",{'E5_AGENCIA', '" + cAge110 + "'}"
									cCamposE5 += ",{'E5_CONTA'	, '" + cCta110 + "'}"
								EndIf

								If __lIsBRA
									cCamposE5 += ",{'E5_TPDESC'  , '" + cTpDesc + "' }"
								Endif

								cChaveFKA := FWUUIDV4()

								If !oSubFKA:IsEmpty()
									oSubFKA:AddLine()
								EndIf
								oSubFKA:SetValue( "FKA_IDORIG"	, cChaveFKA )
								oSubFKA:SetValue( "FKA_TABORI"	, 'FK1')

								If !oSubFK1:IsEmpty()
									oSubFK1:AddLine()
								EndIf

								oSubFK1:SetValue( "FK1_IDFK1"	, cIdFK1 )
								oSubFK1:SetValue( "FK1_DATA"	, If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dBaixa))	
								oSubFK1:SetValue( "FK1_VENCTO"	, SE1->E1_VENCTO )
								oSubFK1:LoadValue( "FK1_NATURE"	, SE1->E1_NATUREZ )
								oSubFK1:SetValue( "FK1_RECPAG"	, Iif(SE1->E1_TIPO $ MVRECANT+'/'+MV_CRNEG,'P','R') )
								oSubFK1:SetValue( "FK1_HISTOR"	, cHistMov )
								oSubFK1:SetValue( "FK1_MOTBX"	, Iif(Empty(cMotBx),"NOR",TrazCodMot( cMotBx )) )
								oSubFK1:SetValue( "FK1_ORIGEM"	, cFunName )
								oSubFK1:SetValue( "FK1_SEQ"		, cSequencia )
								oSubFK1:SetValue( "FK1_DOC"		, SE1->E1_NUMBOR )
								oSubFK1:SetValue( "FK1_IDDOC"	, cChaveFK7 )
								oSubFK1:SetValue( "FK1_TPDOC"	, cTpDoc )	
								oSubFK1:SetValue( "FK1_CCUSTO"	, SE1->E1_CCUSTO )	
								oSubFK1:SetValue( "FK1_FILORI"	, SE1->E1_FILORIG )
								oSubFK1:SetValue( "FK1_VALOR"	, nValCpo )
								oSubFK1:SetValue( "FK1_VLMOE2"	, Round(xMoeda(nValCpo,nMoedaBco,SE1->E1_MOEDA,SE1->E1_BAIXA,3,,If(__lIsBRA,SE1->E1_TXMOEDA,0)),2))
								oSubFK1:SetValue( "FK1_SITCOB"	, SE1->E1_SITUACA )
								oSubFK1:SetValue( "FK1_MOEDA"  	,StrZero(nMoedaBco,2) )
								oSubFK1:SetValue( "FK1_LOTE"	, Iif(nSomaCheq==0,cLoteFin,"" ))
								oSubFK1:SetValue( "FK1_TXMOED" 	,nTxMoeda)
								oSubFK1:SetValue( "FK1_LA"		, If(mv_par03 == 1 .And. !lUsaFlag, "S", "N"))

								//------------------------------------------------------
								// Grava os valores agregados ao titulo no totalizador 
								//------------------------------------------------------
								//Reestruturacao SE5
								//aImpostos[1] = codigo imposto
								//aImpostos[2] = imposto calculado
								//aImpostos[3] = natureza
								//aImpostos[4] = cIdFK4															
								//aImpostos[5] = imposto retido
								//aImpostos[6] = base calculado
								//aImpostos[7] = base retencao 
								//aImpostos[8] = código regra financeira (Motor)
								//aImpostos[9] = se a retenção veio do motor

								If __lMotRet
									For nW := 1 To Len(__aImpos)
										aAdd(aImpostos,{__aImpos[nW,8], __aImpos[nW,3], __aImpos[nW,10],"", __aImpos[nW,5], __aImpos[nW,2], __aImpos[nW,4], __aImpos[nW,1],"M"})
									Next nW
								EndIf

								If (!__lMotRet .Or. !__lIrfMR) .And. lIrPjBxCr .and. lRetParc  //ver base impostos
									aadd(aImpostos,{"IRF",nIrfCalc,&(cNatIrf),"", nIrrf, nIrfBaseC, nIrfBaseR,"",""})
								Endif

								If (!__lMotRet .Or. !__lPCCMR) .And. lPCCBxCR //.and. lRetParc
									aadd(aImpostos,{"PIS",nPisCalc ,cNatPis ,"", nPis    , nPisBaseC, nPisBaseR,"",""})
									aadd(aImpostos,{"COF",nCofCalc ,cNatCof ,"", nCofins , nCofBaseC, nCofBaseR,"",""})  
									aadd(aImpostos,{"CSL",nCslcalc ,cNatCsl ,"", nCsll   , nCslBaseC, nCslBaseR,"",""})
								Endif

								If (!__lMotRet .Or. (!__lIssMR .And. !__lPCCMR )) .And. lPccBxCR .AND. lRetISS
									aadd(aImpostos,{"ISS",nIssCalc,&(cNatIss),"", nIss, nIssBaseC, nIssBaseR,"",""})
								Endif

								//Grava FK3 E/OU FK4
								For nZ := 1 to Len(aImpostos)
									//Gravar FK4 se os valores de PCC forem maiores que zero IMPOSTOS
									If aImpostos[nZ][2] > 0
										cIdFK4 := ""
										If aImpostos[nZ][5] > 0 //Houve retencao
											cIdFK4:= FINFKSID('FK4', 'FK4_IDFK4')
											aImpostos[nZ,4] := cIdFK4
											If __lMotRet .And. Len(__aImpos)>0 .And. aImpostos[nZ][9] == "M"
												__aImpos[nZ,6] := cIdFK4
											EndIf

											//Guardo o IDFK4 do IRF para usar posteriormente
											If aImpostos[nZ,1] == "IRF"
												cIdFk4IR := cIdFK4
											Endif

										Endif

										//Reposiciona a FKA para FK1.
										oSubFKA:SeekLine({{"FKA_TABORI","FK1"}})

										If !oSubFK3:IsEmpty()
											//Inclui a quantidade de linhas necessárias
											oSubFK3:AddLine()		

											//Vai para linha criada
											oSubFK3:GoLine( oSubFK3:Length() )	
										Endif	
										aAreaSx8 := GetArea()
										cNumber := GetSxENum('FK3', 'FK3_IDFK3')
										RestArea(aAreaSx8)
										//---------------------------------------------
										// Grava Imposto calculado
										//---------------------------------------------
										oSubFK3:SetValue( "FK3_IDFK3" , cNumber)
										oSubFK3:SetValue( "FK3_DATA"  , dDataBase )
										oSubFK3:SetValue( "FK3_ORIGEM", cFunName )
										oSubFK3:SetValue( "FK3_IMPOS" , aImpostos[nZ][1] )
										oSubFK3:SetValue( "FK3_RECPAG", "R" )
										oSubFK3:SetValue( "FK3_MOEDA" , "01" )
										oSubFK3:SetValue( "FK3_VALOR" , aImpostos[nZ][2] )
										oSubFK3:SetValue( "FK3_NATURE", aImpostos[nZ][3] )
										oSubFK3:SetValue( "FK3_FILORI", SE1->E1_FILORIG  )
										oSubFK3:SetValue( "FK3_BASIMP", aImpostos[nZ][6] )
										oSubFK3:SetValue( "FK3_IDORIG", cIdFK1 )
										oSubFK3:SetValue( "FK3_TABORI", "FK1") 
										oSubFK3:SetValue( "FK3_IDRET" , aImpostos[nZ,4] )       
										oSubFK3:SetValue( "FK3_FILORI", (cAliasSE1)->E1_FILORIG )

										If __lMotRet .And. Len(aImpostos[nZ]) > 7
											oSubFK3:SetValue( "FK3_CODFKM", aImpostos[nZ,8] )
											oSubFK3:SetValue( "FK3_CLIFOR", SA1->A1_COD )
											oSubFK3:SetValue( "FK3_LOJA"  , SA1->A1_LOJA )
											oSubFK3:SetValue( "FK3_CGC"   , SA1->A1_CGC )
											oSubFK3:SetValue( "FK3_RAICGC", Substr(SA1->A1_CGC, 1, 8) )
										Endif   

										//---------------------------------------------
										// Grava Imposto Retido
										//---------------------------------------------
										If aImpostos[nZ][5] > 0   //Houve retencao
											If !oSubFK4:IsEmpty()
												//Inclui a quantidade de linhas necessárias
												oSubFK4:AddLine()		

												//Vai para linha criada
												oSubFK4:GoLine( oSubFK4:Length() )	
											EndIf	

											oSubFK4:SetValue( "FK4_IDFK4" , aImpostos[nZ,4])
											oSubFK4:SetValue( "FK4_DATA"  , dDataBase )
											oSubFK4:SetValue( "FK4_ORIGEM", cFunName )
											oSubFK4:SetValue( "FK4_IMPOS" , aImpostos[nZ,1] )
											oSubFK4:SetValue( "FK4_RECPAG", "R" )
											oSubFK4:SetValue( "FK4_MOEDA" , "01" )
											oSubFK4:SetValue( "FK4_VALOR" , aImpostos[nZ,5] )
											oSubFK4:SetValue( "FK4_NATURE", aImpostos[nZ,3])
											oSubFK4:SetValue( "FK4_FILORI", SE1->E1_FILORIG )
											oSubFK4:SetValue( "FK4_BASIMP", aImpostos[nZ][7] )
											oSubFK4:SetValue( "FK4_FILORI", (cAliasSE1)->E1_FILORIG )
											If __lMotRet .And. Len(aImpostos[nZ]) > 7
												oSubFK4:SetValue( "FK4_CODFKM", aImpostos[nZ,8] )
												oSubFK4:SetValue( "FK4_CLIFOR", SA1->A1_COD )
												oSubFK4:SetValue( "FK4_LOJA"  , SA1->A1_LOJA )
												oSubFK4:SetValue( "FK4_CGC"   , SA1->A1_CGC )
												oSubFK4:SetValue( "FK4_RAICGC", Substr(SA1->A1_CGC, 1, 8) )
												// Atualizacao de retencao da FK3 - Cumulatividade
												If aImpostos[nZ][9] == "M" .And. Len(__aImpos[nZ,7]) > 0 .And. __aImpos[nZ,7,1] > 0
													FK3->(DbGoTo(__aImpos[nZ,7,1]))
													RecLock("FK3")
													FK3->FK3_IDRET := __aImpos[nZ,6]
													FK3->(MsUnlock())
												EndIf
											Endif
										Endif					
										If Len(__aImpos) > 0 .And. aImpostos[nZ][9] == "M"
											__aImpos[nZ,6] := aImpostos[nZ,4]
										Endif		
									Endif
								Next

								//Gravo o relacionamento de retenção dos títulos que tiveram impostos retidos na baixa atual
								FinFk3BCR(aTitCalc, aImpostos)

								If cTpDoc $ "VL"
									//Relacionamento FKA X FK5
									If !oSubFKA:IsEmpty()
										//Inclui a quantidade de linhas necessárias
										oSubFKA:AddLine()		
										//Vai para linha criada
										oSubFKA:GoLine( oSubFKA:Length() )	
									Endif	
									oSubFKA:SetValue( 'FKA_IDORIG', FWUUIDV4() )			
									oSubFKA:SetValue( 'FKA_TABORI', "FK5" )	

									cIdFK5 := FWUUIDV4()
									oSubFK5:SetValue( "FK5_IDMOV"	, cIdFK5 )
									oSubFK5:SetValue( "FK5_DTDISP"	, If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dDtCredito))
									oSubFK5:SetValue( "FK5_DATA"	, If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dBaixa))
									oSubFK5:SetValue( "FK5_MOEDA"	, StrZero(SE1->E1_MOEDA,2) )
									oSubFK5:SetValue( "FK5_VLMOE2"	, Round(xMoeda(nValCpo,nMoedaBco,SE1->E1_MOEDA,SE1->E1_BAIXA,3,,If(__lIsBRA,SE1->E1_TXMOEDA,0)),2))
									oSubFK5:SetValue( "FK5_VALOR"	, SE1->E1_VALLIQ )
									oSubFK5:SetValue( "FK5_NATURE"	, SE1->E1_NATUREZ )
									oSubFK5:SetValue( "FK5_RECPAG"	, Iif(SE1->E1_TIPO $ MVRECANT+'/'+MV_CRNEG,'P','R') )
									oSubFK5:SetValue( "FK5_TPDOC"	, cTpDoc )
									oSubFK5:SetValue( "FK5_FILORI"	, SE1->E1_FILORIG )
									oSubFK5:SetValue( "FK5_ORIGEM"	, cFunName )
									oSubFK5:SetValue( "FK5_HISTOR"	, cHistMov )
									oSubFK5:SetValue( "FK5_LOTE"	, cLoteFin )
									oSubFK5:SetValue( "FK5_MOEDA"	, StrZero(nMoedaBco,2) )
									oSubFK5:SetValue( "FK5_TXMOED"	, nTxMoeda )
									oSubFK5:SetValue( "FK5_LA"		, If(mv_par03 == 1 .And. !lUsaFlag, "S", "N"))
									oSubFK5:SetValue( "FK5_SEQ"		, cSequencia )
								EndIf

								nMoedaBco := Max( MoedaBco(cBco110,cAge110,cCta110), 1)

								If lMovBcoBx

									If cTpDoc $ "VL"
										oSubFK5:SetValue( "FK5_BANCO"	, cBco110 )
										oSubFK5:SetValue( "FK5_AGENCI"	, cAge110 )
										oSubFK5:SetValue( "FK5_CONTA"	, cCta110 )

										//Caso seja execucao automatizada
										If lF110Auto .And. !lBxLotSitef
											oSubFK5:SetValue( "FK5_DATA"   , dBaixa 	)
											oSubFK5:SetValue( "FK5_DTDISP" , dDtCredito	)
										EndIf
									EndIf

									If mv_par06 == 2 .And. !lF110Auto .And. (nJuros+nMulta+nCorrec+nDescont+nAcresc+nDecresc) <> 0  
										cCamposE5 += ",{'E5_BANCO'	, '" + cBco110 + "'}"
										cCamposE5 += ",{'E5_AGENCIA', '" + cAge110 + "'}"
										cCamposE5 += ",{'E5_CONTA'	, '" + cCta110 + "'}"
									EndIf						
								EndIf
								If lGerTotal
									//Reposiciona a FKA para FK1.
									oSubFKA:SeekLine({{"FKA_TABORI"	,"FK1"}})
									oSubFK1:SetValue( "FK1_ARCNAB"	, 'FINA110' )
									oSubFK1:SetValue( "FK1_LOTE"	, Iif(nSomaCheq==0,cLoteFin,"") )				
								EndIf	

								//Pcc Baixa CR
								//Gravar SFQ
								If lPccBxCR .and. !__lPccMR

									nBaseRet := nValRec+nPis+nCofins+nCsll+nIrrf+nDescont+nTotAbat-nJuros-nMulta-nVA

									Do Case 
										Case cModRetPIS == "1" 
											If aDadosRet[ 1 ] + nBaseRet > nVlMinImp .or. !lAplVlMin
												nSalvRec := SE5->( Recno() ) 
												lRetParc := .T.                                                                                  									

												//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
												//³ Exclui a Marca de "pendente recolhimento" dos demais registros   ³
												//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
												If aDadosRet[1] > 0
													aRecnos := aClone( aDadosRet[ 6 ] ) 

													cPrefOri  := SE5->E5_PREFIXO
													cNumOri   := SE5->E5_NUMERO
													cParcOri  := SE5->E5_PARCELA
													cTipoOri  := SE5->E5_TIPO
													cCfOri    := SE5->E5_CLIFOR
													cLojaOri  := SE5->E5_LOJA

													aAreaAnt := GetArea()		       
													For nLoop := 1 to Len( aRecnos )

														SE5->( dbGoto( aRecnos[ nLoop ] ) )

														oModelImp := FWLoadModel('FINM010')
														oModelImp:SetOperation( MODEL_OPERATION_UPDATE )
														oModelImp:Activate()
														oModelImp:SetValue( "MASTER", "E5_GRV", .T. ) //Habilita gravação SE5
														oSubFKAA := oModelImp:GetModel( "FKADETAIL" )
														oSubFKAA:SeekLine( { {"FKA_IDORIG", SE5->E5_IDORIG } } )

														//Atualizar o status de retencao de impostos          
														oSubFK3A:= oModelImp:GetModel( "FK3DETAIL" )
														For nZ := 1 to Len(aImpostos)
															If oSubFK3A:SeekLine({{"FK3_IMPOS",aImpostos[nZ,1]}})         //Nome do imposto 
																If aImpostos[nZ,1] != "IRF"
																	oSubFK3A:SetValue( "FK3_IDRET",aImpostos[nZ,4] )      //cIdFk4
																Endif                                                            
															EndIf
														Next nZ

														cCamposE5A := ''
														cCamposE5A += "{{'E5_PRETPIS' , '2'}"
														cCamposE5A += ",{'E5_PRETCOF' , '2'}"
														cCamposE5A += ",{'E5_PRETCSL' , '2'}}"

														oModelImp:SetValue( "MASTER", "E5_CAMPOS", cCamposE5A )
														//Grava os dados
														If oModelImp:VldData()
															oModelImp:CommitData()
															SE5->(dbGoto(oModelImp:GetValue('MASTER','E5_RECNO') ) )
														Else
															lRet := .F.
															cLog := cValToChar(oModelBxPA:GetErrorMessage()[4]) + ' - '
															cLog += cValToChar(oModelBxPA:GetErrorMessage()[5]) + ' - '
															cLog += cValToChar(oModelBxPA:GetErrorMessage()[6])          
															Help( ,,"M010VLDI1",,cLog, 1, 0 )
															Exit               
														EndIf 
														oModelImp:DeActivate()
														oModelImp:Destroy()
														oModelImp := Nil

														If lExistSFQ 
															If nSalvRec <> aRecnos[ nLoop ] 
																dbSelectArea("SFQ")
																RecLock("SFQ",.T.)
																SFQ->FQ_FILIAL  := xFilial("SFQ")
																SFQ->FQ_ENTORI  := "E1B"
																SFQ->FQ_PREFORI := cPrefOri
																SFQ->FQ_NUMORI  := cNumOri
																SFQ->FQ_PARCORI := cParcOri
																SFQ->FQ_TIPOORI := cTipoOri										
																SFQ->FQ_CFORI   := cCfOri
																SFQ->FQ_LOJAORI := cLojaOri
																SFQ->FQ_SEQORI  := cSequencia

																SFQ->FQ_ENTDES  := "E1B"
																SFQ->FQ_PREFDES := SE5->E5_PREFIXO
																SFQ->FQ_NUMDES  := SE5->E5_NUMERO
																SFQ->FQ_PARCDES := SE5->E5_PARCELA                             
																SFQ->FQ_TIPODES := SE5->E5_TIPO
																SFQ->FQ_CFDES   := SE5->E5_CLIFOR
																SFQ->FQ_LOJADES := SE5->E5_LOJA
																SFQ->FQ_SEQDES  := SE5->E5_SEQ

																//Grava a filial de destino caso o campo exista
																If lFilDes 
																	SFQ->FQ_FILDES := SE5->E5_FILIAL 
																EndIf 											

																SFQ->(MsUnlock())
															Endif					
														Endif	
													Next nLoop
													RestArea(aAreaAnt) 
												EndIf

												//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
												//³ Retorna do ponteiro do SE1 para a parcela         ³
												//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
												SE5->( MsGoto( nSalvRec ) ) 
											Else 	                                
												If nVlRetPis + nVlRetCof + nVlRetCsl > 0
													cCamposE5 += ",{'E5_VRETPIS' , "+cValToChar(nVlRetPis)+"}"																		
													cCamposE5 += ",{'E5_VRETCOF' , "+cValToChar(nVlRetCof)+"}"
													cCamposE5 += ",{'E5_VRETCSL' , "+cValToChar(nVlRetCsl)+"}"
													cCamposE5 += ",{'E5_PRETPIS' , '1'}"
													cCamposE5 += ",{'E5_PRETCOF' , '1'}"
													cCamposE5 += ",{'E5_PRETCSL' , '1'}"  																								
												EndIf	
												lRetParc := .F.
											EndIf

										Case cModRetPIS == "2" 
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³ Efetua a retencao                                                 ³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											nSalvRec := SE5->( Recno() ) 

											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³ Exclui a Marca de "pendente recolhimento" dos demais registros   ³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											If aDadosRet[1] > 0
												aRecnos := aClone( aDadosRet [ 6 ] ) 

												cPrefOri  := SE5->E5_PREFIXO
												cNumOri   := SE5->E5_NUMERO
												cParcOri  := SE5->E5_PARCELA
												cTipoOri  := SE5->E5_TIPO
												cCfOri    := SE5->E5_CLIFOR
												cLojaOri  := SE5->E5_LOJA

												aAreaAnt := GetArea()
												For nLoop := 1 to Len( aRecnos )

													SE5->( dbGoto( aRecnos[ nLoop ] ) )

													oModelImp := FWLoadModel('FINM010')
													oModelImp:SetOperation( MODEL_OPERATION_UPDATE )
													oModelImp:Activate()
													oModelImp:SetValue( "MASTER", "E5_GRV", .T. ) //Habilita gravação SE5
													oSubFKAA := oModelImp:GetModel( "FKADETAIL" )
													oSubFKAA:SeekLine( { {"FKA_IDORIG", SE5->E5_IDORIG } } )

													//Atualizar o status de retencao de impostos          
													oSubFK3A:= oModelImp:GetModel( "FK3DETAIL" )
													For nZ := 1 to Len(aImpostos)
														If oSubFK3A:SeekLine({{"FK3_IMPOS",aImpostos[nZ,1]}})         //Nome do imposto 
															If aImpostos[nZ,1] != "IRF"
																oSubFK3A:SetValue( "FK3_IDRET",aImpostos[nZ,4] )      //cIdFk4
															Endif                                                            
														EndIf
													Next nZ

													cCamposE5A := ''
													If !Empty(SE5->E5_PRETPIS) .And. !Empty(SE5->E5_PRETCOF) .And. !Empty(SE5->E5_PRETCSL)
														cCamposE5 += ",{'E5_PRETPIS' , '2'}"
														cCamposE5 += ",{'E5_PRETCOF' , '2'}"
														cCamposE5 += ",{'E5_PRETCSL' , '2'}"
													EndIf

													oModelImp:SetValue( "MASTER", "E5_CAMPOS", cCamposE5A )
													//Grava os dados
													If oModelImp:VldData()
														oModelImp:CommitData()
														SE5->(dbGoto(oModelImp:GetValue('MASTER','E5_RECNO') ) )
													Else
														lRet := .F.
														cLog := cValToChar(oModelBxPA:GetErrorMessage()[4]) + ' - '
														cLog += cValToChar(oModelBxPA:GetErrorMessage()[5]) + ' - '
														cLog += cValToChar(oModelBxPA:GetErrorMessage()[6])          
														Help( ,,"M010VLDI1",,cLog, 1, 0 )
														Exit               
													EndIf 
													oModelImp:DeActivate()
													oModelImp:Destroy()
													oModelImp := Nil

													If lExistSFQ
														If nSalvRec <> aRecnos[ nLoop ] 
															dbSelectArea("SFQ")
															RecLock("SFQ",.T.)
															SFQ->FQ_FILIAL  := xFilial("SFQ")
															SFQ->FQ_ENTORI  := "E1B"
															SFQ->FQ_PREFORI := cPrefOri
															SFQ->FQ_NUMORI  := cNumOri
															SFQ->FQ_PARCORI := cParcOri
															SFQ->FQ_TIPOORI := cTipoOri										
															SFQ->FQ_CFORI   := cCfOri
															SFQ->FQ_LOJAORI := cLojaOri
															SFQ->FQ_SEQORI  := cSequencia
															SFQ->FQ_ENTDES  := "E1B"
															SFQ->FQ_PREFDES := SE5->E5_PREFIXO
															SFQ->FQ_NUMDES  := SE5->E5_NUMERO
															SFQ->FQ_PARCDES := SE5->E5_PARCELA                             
															SFQ->FQ_TIPODES := SE5->E5_TIPO
															SFQ->FQ_CFDES   := SE5->E5_CLIFOR
															SFQ->FQ_LOJADES := SE5->E5_LOJA
															SFQ->FQ_SEQDES  := SE5->E5_SEQ											

															//Grava a filial de destino caso o campo exista
															If lFilDes
																SFQ->FQ_FILDES := SE5->E5_FILIAL 
															EndIf 											

															SFQ->(MsUnlock())
														Endif					
													Endif	
												Next nLoop
												RestArea(aAreaAnt) 

											Endif	
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³ Retorna do ponteiro do SE1 para a parcela         ³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
											SE5->( MsGoto( nSalvRec ) ) 
											lRetParc := .T.

										Case cModRetPIS == "3" 			
											//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
											//³ Grava a Marca de "pendente recolhimento" dos demais registros    ³
											//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
											If nVlRetPis + nVlRetCof + nVlRetCsl > 0
												cCamposE5 += ",{'E5_VRETPIS' , "+cValToChar(nVlRetPis)+"}"																		
												cCamposE5 += ",{'E5_VRETCOF' , "+cValToChar(nVlRetCof)+"}"
												cCamposE5 += ",{'E5_VRETCSL' , "+cValToChar(nVlRetCsl)+"}"
												cCamposE5 += ",{'E5_PRETPIS' , '1'}"
												cCamposE5 += ",{'E5_PRETCOF' , '1'}"
												cCamposE5 += ",{'E5_PRETCSL' , '1'}"  																								
											EndIf	
											lRetParc := .F.
									EndCase 			
									//Gravo os titulos de impostos Pis Cofins Csll quando controlados pela baixa
									If lPCCBxCR .and. lRetParc
										FGrvPccRec(@nPis,@nCofins,@nCsll,nRegAtu,.F.,lRetParc,cSequencia,"FINA070",SE1->E1_MOEDA)
									Endif
								EndIf

								//Grava os campos de valores e base de retenção dos impostos							
								cCamposE5 += ",{'E5_VRETPIS' , "+cValToChar(nPis)+" }"
								cCamposE5 += ",{'E5_VRETCOF' , "+cValToChar(nCofins)+" }"
								cCamposE5 += ",{'E5_VRETCSL' , "+cValToChar(nCsll)+" }"
								cCamposE5 += ",{'E5_VRETIRF' , "+cValToChar(nIrrf)+" }"
								//Na SE5 grava o valor da base do título e não a base total da retenção
								cCamposE5 += ",{'E5_BASEIRF' , "+cValToChar(nIrfBaseC)+" }"
								//Pendência de retenção
								If nIrfCalc > 0 .and. nIrrf == 0 
									cCamposE5 += ",{'E5_PRETIRF' , '1' }"
								Endif

								aImpostos := {}
								aSize(aImpostos, 0)

							EndIf

							If nJuros <> 0 .Or.  nAcresc <> 0  
								cCamposE5 += ",{'E5_VLJUROS'," + Str(nJuros) + "}"
								//Reposiciona a FKA para FK1.
								oSubFKA:SeekLine({{"FKA_TABORI","FK1"}})
								If !oSubFK6:IsEmpty()
									oSubFK6:AddLine()
								EndIf
								oSubFK6:SetValue( 'FK6_FILIAL'	, cFilFK6 )
								oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )											
								oSubFK6:SetValue( 'FK6_TABORI'	, 'FK1' )
								oSubFK6:SetValue( 'FK6_TPDOC'	, 'JR' )
								oSubFK6:SetValue( 'FK6_VALCAL'	, nJuros )	
								oSubFK6:SetValue( 'FK6_VALMOV'	, nJuros )
								oSubFK6:SetValue( 'FK6_RECPAG'	, "R" )
								oSubFK6:SetValue( 'FK6_IDORIG'	, cIdFK1 )
								oSubFK6:SetValue( 'FK6_HISTOR'	, STR0015 )
							EndIf

							//-----------------------------------------------------------
							//Valores Acessorios.
							//-----------------------------------------------------------
							If lExistFKD
								//Reposiciona a FKA para FK1.
								oSubFKA:SeekLine({{"FKA_TABORI","FK1"}})
								//Grava Novos Valores Acessorios (FKD)
								FSetFK6FKD(oSubFK6,cChaveFK7,cIdFK1,"R")
							EndIf

							If nMulta <> 0
								cCamposE5 += ",{'E5_VLMULTA'," + Str(nMulta) + "}"
								//Reposiciona a FKA para FK1.
								oSubFKA:SeekLine({{"FKA_TABORI","FK1"}})
								If !oSubFK6:IsEmpty()
									oSubFK6:AddLine()
								EndIf
								oSubFK6:SetValue( 'FK6_FILIAL'	, cFilFK6 )
								oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )											
								oSubFK6:SetValue( 'FK6_TABORI'	, 'FK1' )
								oSubFK6:SetValue( 'FK6_TPDOC'	, 'MT' )
								oSubFK6:SetValue( 'FK6_VALCAL'	, nMulta )	
								oSubFK6:SetValue( 'FK6_VALMOV'	, nMulta )
								oSubFK6:SetValue( 'FK6_RECPAG'	, "R" )
								oSubFK6:SetValue( 'FK6_IDORIG'	, cIdFK1 )
								oSubFK6:SetValue( 'FK6_HISTOR'	, STR0018 )
							EndIf

							If nCorrec <> 0
								//Reposiciona a FKA para FK1.
								oSubFKA:SeekLine({{"FKA_TABORI","FK1"}})							
								If !oSubFK6:IsEmpty()
									oSubFK6:AddLine()
								EndIf
								oSubFK6:SetValue( 'FK6_FILIAL'	, cFilFK6 )
								oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )											
								oSubFK6:SetValue( 'FK6_TABORI'	, 'FK1' )
								oSubFK6:SetValue( 'FK6_TPDOC'	, 'CM' )
								oSubFK6:SetValue( 'FK6_VALCAL'	, nCorrec )	
								oSubFK6:SetValue( 'FK6_VALMOV'	, nCorrec )
								oSubFK6:SetValue( 'FK6_RECPAG'	, "R" )
								oSubFK6:SetValue( 'FK6_IDORIG'	, cIdFK1 )
								oSubFK6:SetValue( 'FK6_HISTOR'	, STR0016 )
							EndIf

							If nDescont <> 0
								cCamposE5 += ",{'E5_VLDESCO'," + Str(nDescont) + "}"
								//Reposiciona a FKA para FK1.
								oSubFKA:SeekLine({{"FKA_TABORI","FK1"}})
								If !oSubFK6:IsEmpty()
									oSubFK6:AddLine()
								EndIf
								oSubFK6:SetValue( 'FK6_FILIAL'	, cFilFK6 )
								oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )											
								oSubFK6:SetValue( 'FK6_TABORI'	, 'FK1' )
								oSubFK6:SetValue( 'FK6_TPDOC'	, 'DC' )
								oSubFK6:SetValue( 'FK6_VALCAL'	, nDescont )	
								oSubFK6:SetValue( 'FK6_VALMOV'	, nDescont )
								oSubFK6:SetValue( 'FK6_RECPAG'	, "R" )
								oSubFK6:SetValue( 'FK6_IDORIG'	, cIdFK1 )
								oSubFK6:SetValue( 'FK6_HISTOR'	, STR0017 )
							EndIf

							//Atulizado apenas os campos da SE5 de acrescimo e decrescimo, pois 
							//os registros de "JR" e "DC" ser?o criado pelo juros e desconto, respectivamentes.
							If nAcresc <> 0
								cCamposE5 += ",{'E5_VLACRES'," + Str(nAcresc) +"}"
							Endif

							If nDecresc <> 0
								cCamposE5 += ",{'E5_VLDECRE'," + Str(nDecresc) +"}" 
							EndIf

							//Grava titulo de IRRF
							If lIrPjBxCr .and. lRetParc .and. !__lIrfMR
								FGrvIrRec(@nIrrf,nRegAtu,.F.,cSequencia,"FINA110",SE1->E1_MOEDA) 
							Endif

							// Salva os campos na tabela SE5 especifico do Template GEM
							If lGemSE5Grv
								ExecTemplate("GEMSE5Grv",.F.,.F.)
							EndIf

							nRegPrinc := SE5->(Recno())
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Grava o lançamento de integração com o SIGAPCO ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lPcoInte
								PcoDetLan("000012","01","FINA110")
							EndIf

							If lSpbInUse
								cCamposE5 += ",{'E5_MODSPB' , '1'}"
								If !lGerTotal
									oSubFK5:SetValue( "FK5_MODSPB"	, "1" )
								EndIf
							Endif

							If lPadrao .and. mv_par03 == 1 .and. nX != 1 
								cCamposE5 += ",{'E5_LA' , 'S'}"
								If !lGerTotal
									oSubFK5:SetValue( "FK5_LA" , "S")
								EndIf
							Endif
							MsUnlock()
							aBaixas := {}	
							If aDadosRet[1] > 0 .And. !Empty(SE5->E5_MOTBX)
								aadd(aBaixas,{SE5->E5_MOTBX,SE5->E5_SEQ,SE5->(Recno())})  
							EndIf
							nSomaCheq :=	0					
							If AllTrim(cSldBxCr) == "C" //Soma o total recebido em cheque.					
								nSomaCheq := SomaCheqCr(.F.,SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_CLIENTE)
							Endif	
						

						EndIf	
					Next

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Atualiza o Cadastro de CLIENTES     ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					dbSelectArea("SA1")
					If lMV_NOTSA1 .And. MSSeek(xFilial('SA1')+SE1->E1_CLIENTE+SE1->E1_LOJA)
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³No Conciliador quando for cliente ADM Finan e o parametro³
						//³estiver habilitado nao trava o registro do cliente 		³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ			
						lAtuSalDup 	:= .T.					
						DbSelectArea("SAE")
						SAE->(DbSetOrder(2))
						If MSSeek(xFilial("SAE")+SA1->A1_COD)
							iF lLjAtuSa
								lAtuSalDup 	:= .F.
							EndIF
						EndIF

						If lAtuSalDup
							IF SE1->E1_MOEDA > 1
								nSaldoCru := Round(NoRound(xMoeda(nSaldo-nValAbat,SE1->E1_MOEDA,nMoedaBco,SE1->E1_EMISSAO,3,If(cPaisLoc=="BRA",SE1->E1_TXMOEDA,0)),3),2)
							Else
								nSaldoCru -= nTotAbat				
							Endif
							AtuSalDup("-",nSaldoCru,1,SE1->E1_TIPO,,SE1->E1_EMISSAO)
						EndIf	
					Endif
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Verifica qual o Lanc Padrao que sera utilizado      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					lEofSE5 := .F.
					dbSelectArea("SE1")

					If lPadrao .and. mv_par03 == 1 .And. nHdlPrv > 0

						dbSelectArea("SE5")
						dbGoto(nRegPrinc)
						lEofSE5 := SE5->( Eof() )

						If !lEofSE5
							If lUsaFlag
								aAdd( aFlagCTB, { "E5_LA", "S", "SE5", SE5->( Recno() ), 0, 0, 0 } )
							EndIf

							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Prepara Lancamento Contabil                                      ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							cFilBkp	:=	cFilAnt
							cFilAnt := fDefLancto(lSE5Access,lSE1Access,cFilLancto,cFilLogin)
							nTotal += DetProva( nHdlPrv,cPadrao,"FINA110",cLote,/*nLinha*/,/*lExecuta*/,/*cCriterio*/,/*lRateio*/,/*cChaveBusca*/,/*aCT5*/,/*lPosiciona*/,@aFlagCTB,/*aTabRecOri*/,/*aDadosProva*/ )
							cFilAnt:=cFilBkp
							If nTotal > 0 .And. ! lUsaFlag
								cCamposE5 += ",{'E5_LA' , 'S'}"
								If !lGerTotal
									oSubFK5:SetValue( "FK5_LA" , "S")
								EndIf
							EndIf
						EndIf
					EndIf

					cCamposE5 += " } "    

					dbSelectArea("SE1")

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ PONTO DE ENTRADA FA110DES                                     ³
					//³ ExecBlock generico anterior a contabiliza‡Æo                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lFINA110
						Execblock("FINA110",.f.,.f.)
					Endif

					/*
					* Seta os campos e os valores que devem ser gravados na tabela SE5
					*/
					oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 )

					/*
					* Grava os dados da Baixa a Receber Automática
					*/
					If oModelBxR:VldData()
						oModelBxR:CommitData()
						SE5->(dbGoto(oModelBxR:GetValue('MASTER','E5_RECNO') ) )
						cIdOrig := SE5->E5_IDORIG

						// Integração SIGAPFS e SIGAFIN
						If __JGrvBaixa
							JGrvBaixa( SE1->(Recno()),  SE5->(Recno()))
						EndIf
						//PONTO DE ENTRADA FA110SE5
						//ExecBlock para gravar dados complementares a baixa do titulo
						If lFa110Se5
							Execblock("FA110SE5",.F.,.F.)
						Endif

						If aDadosRet[1] == 0 .Or. Empty(aBaixas)
							aadd(aBaixas,{SE5->E5_MOTBX,SE5->E5_SEQ,SE5->(Recno())}) 
						EndIf						

						If lF110SE5
							Aadd(aRecSe5, oModelBxR:GetValue('MASTER','E5_RECNO'))							
						Endif		
						/*
						Verifica se titulo esta no PIX e retira */
						If __lPIXCanc
							If !( cSE1Emp == "E" .And. cSE1UNe == "E" .And.	cSE1Fil== "C")
								lRet := !PIXCancel(SE1->E1_FILIAL, cChaveFK7)
							Else
								lRet := !PIXCancel(cFilTit, cChaveFK7)
							EndIf
							If lRet
								DisarmTransaction()
							EndIf
						EndIf		

						If lEofSE5 .And. lPadrao .and. mv_par03 == 1 .And. nHdlPrv > 0

							If lUsaFlag
								aAdd( aFlagCTB, { "E5_LA", "S", "SE5", SE5->( Recno() ), 0, 0, 0 } )
							EndIf

							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Prepara Lancamento Contabil                                      ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							cFilBkp	:=	cFilAnt
							cFilAnt := fDefLancto(lSE5Access,lSE1Access,cFilLancto,cFilLogin)
							nTotal += DetProva( nHdlPrv,;
							cPadrao,;
							"FINA110",;
							cLote,;
							/*nLinha*/,;
							/*lExecuta*/,;
							/*cCriterio*/,;
							/*lRateio*/,;
							/*cChaveBusca*/,;
							/*aCT5*/,;
							/*lPosiciona*/,;
							@aFlagCTB,;
							/*aTabRecOri*/,;
							/*aDadosProva*/ )
							cFilAnt:=cFilBkp
							If nTotal > 0 .And. !lUsaFlag
								RecLock( "SE5" , .F. )
								SE5->E5_LA := "S"
								SE5->( MsUnLock() )
							EndIf 
						EndIf

					Else	
						lRet := .F.
						cLog := cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_IDFIELDERR]) + ' - '
						cLog += cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_ID]) + ' - '
						cLog += cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_MESSAGE])         	
						Help( ,,"M020VALID",,cLog, 1, 0 ) 
					EndIf

					//-----------------------------------------------------------------------
					//-- Gravação dos titulos de impostos (Motor)
					If __lMotRet .and. Len(__aImpos) > 0
						aRecImpos := FinGrvImp("2" , SE1->(Recno()), __aImpos, "FINA070", .F., {}, {}, .T., .F., .T./*lBaixa*/, dBaixa, "FK1",cSequencia,.T.)
					Endif	
					//-----------------------------------------------------------------------------------------
					//-- Verifica se uma rotina possui configuração de EAI
					If __lHasEAI
						cIntegSeq := cSequencia

						llOpc	:= ALTERA
						ALTERA 	:= .T.

						aResposta := FwIntegDef( 'FINA070' )
						If !aResposta[1]
							help("",1,aResposta[2])
							aRetThread := {}
							DisarmTransaction()
						EndIf

						ALTERA 	:= llOpc
					Endif
					
					//-----------------------------------------------------------------------------------------
					//-- Calcula comissão
					If lComisBx
						lVendedor := !Empty(SE1->E1_VEND1) .Or. !Empty(SE1->E1_VEND2) .Or. !Empty(SE1->E1_VEND3) .Or.;
									!Empty(SE1->E1_VEND4) .Or. !Empty(SE1->E1_VEND5) .Or. AllTrim(SE1->E1_ORIGEM) $ "FINA280|FINA460"
						If lVendedor
							// Procura pelas SE5 geradas de multa, juros, desconto, etc...
							F110Baixas(@aBaixas,cIdOrig)
							 //-- Efetua calculo das comissoes
							Fa440CalcB(aBaixas,lJuros,lDesconto,"FINA110",,,,.T.,nSE1Rec)							
							//-- Volta recno da SE5 principal
							SE5->(dbSetOrder(2))
							SE5->(dbGoto(oModelBxR:GetValue('MASTER','E5_RECNO') ) )						
						EndIF
					Endif

					//-----------------------------------------------------------------------------------------
					//-- Chamada da Função que cria o Histórico de Cobrança
					aAlt := {}	
					cTpMens   := IIf(!Empty(cLoteFin),'Lote','Borderô')  			
					cLoteBord := IIf(!Empty(cLoteFin),cLoteFin,(cAliasSE1)->E1_NUMBOR)  

					aadd( aAlt,{ STR0068,'','','',STR0069 + cTpMens  + ' ' +  Alltrim(cLoteBord) + ' no valor de ' + Alltrim(Transform(FK5->FK5_VALOR,__cPict)) })   										
					FinaCONC(aAlt)

					//Alteração do posicionamento da Função AtuSalBCO (SE8) para receber informações da SE5 CORRETAMENTE
					If !lGerTotal .And. lMovBcoBx .and. !(SE1->E1_SITUACA $ cDescontada) 	//SITCOB
						AtuSalBco(cBco110,cAge110,cCta110,SE5->E5_DATA,(SE5->E5_VALOR-nSomaCheq),If(SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG,"-","+"))
					EndIf						

					//-----------------------------------------------------------
					//-- Atualiza informações de Valores Acessorios.
					If lFKDBx
						FAtuFKDBx()
					EndIf	

				END TRANSACTION  					

				//-----------------------------------------------------------
				//-- Contabiliza totalizador na mudança de filial
				IF lPadrao .and. lContabiliza
				
                    IF EMPTY(lF110Auto)
                        (cAliasSE1)->(DBSKIP())
                    ELSE
                        (cAliasSE1)->(DBGOTO(IF(nY < LEN(aTitulos[1]),aTitulos[1,nY+1],0)))
                    ENDIF

					//Caso tenha selecionado mais de uma filial
					//fecho o documento contabil por filial
                    lDoLaunch := (cFilOri <> (cAliasSE1)->E1_FILORIG) .AND.;
                                 (nC > 0) .AND. (nValorTotal > 0) .AND. (nHdlPrv > 0)

                    IF EMPTY(lF110Auto)
                        (cAliasSE1)->(DBSKIP(-1))
                    ELSE
                        (cAliasSE1)->(DBGOTO(aTitulos[1,nY]))
                    ENDIF

                    If !lSE1Access//-- Exclusivo
                        cFilAnt := (cAliasSE1)->E1_FILORIG
                    EndIf

                    If lDoLaunch

                        // Finaliza processo de integracao com SIGAPCO
                        PCOFinLan("000012")

                        // vai para EOF() para contabilizar apenas o total
						SE5->( dbGoBottom() )
						SE5->( dbSkip() )
						SE1->( dbGoBottom() )
						SE1->( dbSkip() )
						FK1->( dbGoBottom() )
						FK1->( dbSkip() )
						FK5->( dbGoBottom() )
						FK5->( dbSkip() )						

                        // Zera as variaveis de PCC para que não contabilize duas vezes os impostos do ultimo titulo 
                        PIS:=0
                        COFINS:=0
                        CSLL:= 0

                        VALOR := nValorTotal
                        nVlrLote += nValorTotal
                        nValorTotal := 0
						
                        cFilBkp := cFilAnt
                        cFilAnt := fDefLancto(lSE5Access,lSE1Access,cFilLancto,cFilLogin)
                        nTotal += DetProva( nHdlPrv,cPadrao,"FINA110",cLote,/*nLinha*/,/*lExecuta*/,/*cCriterio*/,/*lRateio*/,/*cChaveBusca*/,/*aCT5*/,/*lPosiciona*/,@aFlagCTB,/*aTabRecOri*/,/*aDadosProva*/ )
                        cFilAnt := cFilBkp

                        //-- Se for rotina automatica força exibir mensagens na tela, pois mesmo quando não exibe os lançametnos, a tela 
                        //-- sera exibida caso ocorram erros nos lançamentos padronizados
                        If lF110Auto
                            lSetAuto := _SetAutoMode(.F.)
                            lSetHelp := HelpInDark(.F.)
                        EndIf

                        //	Define data da contabilização on line
                        Do Case 
                            Case nDtContOn == 1 // 1- Data Digitação
                                dDtLanc := dBKPDTBase
                            Case nDtContOn == 2 // 2- Data Disponibilizadade
                                dDtLanc :=  IIF(lBxLotSitef .And. Len( aTitulos ) >= 8 , aTitulos[8] , dDtCredito )
                            Case nDtContOn == 3 // 3- Data Recebimento
                                dDtLanc := dBaixa
                        EndCase

                        cFilBkp	:=	cFilAnt
                        cFilAnt := fDefLancto(lSE5Access,lSE1Access,cFilLancto,cFilLogin)
                        cA100Incl( cArquivo,nHdlPrv,3,cLote,lDigita,lAglut,	/*cOnLine*/,dDtLanc,/*dReproc*/,@aFlagCTB,/*aDadosProva*/,/*aDiario*/ )
                        aFlagCTB := {}  // Limpa o coteudo apos a efetivacao do lancamento
                        cFilAnt := cFilBkp

                        If lF110Auto
                            HelpInDark(lSetHelp)
                            _SetAutoMode(lSetAuto)
                        EndIf

                        nTotal 	:= 0
                        nHdlPrv := 0
                        VALOR 	:= 0        
                        cFilAnt := cFilOri

                        PCOIniLan("000012")
                    Endif	
				EndIf
			Else
				If lThread
					aAdd(aRetThread, {{ .F. , SE1->(Recno()), "Falha na Baixa", cKeyId}})	
					VarSetA(cMyUId,cKeyId,aRetThread)	
				EndIf
			EndIf

			dbSelectArea("SE1")

			//Rotina Automatizada
			If lF110Auto
				If nY == nLast
					lEof := .T.
				Endif
				nY++
				//Rotina Padrao (Nao Automatizada)
			Else
				(cAliasSE1)->(dbSkip())
				If (cAliasSE1)->(Eof())
					lEof := .T.
				Endif
			Endif                      
		EndDo

		cCamposE5 := ""
		oModelBxR:DeActivate()
		oModelBxR:Destroy()
		oModelBxR := Nil
	
		//--------------------------------------------------------------------------------
		//-- Atualiza saldo do cliente ao realizar baixa automática.
		If lMV_NOTSA1 .And. Len(aNroPag)>0
			Fa110UpdSa1(aNroPag)
		EndIF		

		//--------------------------------------------------------------------------------
		// ponto de entrada para manipulação dos títulos marcados e processados na SE5.
		If lF110SE5
			ExecBlock("F110SE5",.F.,.F.,{aRecSe5})
		Endif	

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Finaliza processo de integracao com SIGAPCO ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PCOFinLan("000012")

		//Ponto de entrada para geracao de recibo com todos os titulos baixados
		If lF110Rec
			ExecBlock("F110REC",.F.,.F.)
		Endif

		//vai para EOF() para contabilizar apenas o total
		nRecNoSE1 := SE1->( RecNo() )
		nRecNoSE5 := SE5->( RecNo() )
		nRecNoFK1 := FK1->( RecNo() )

		SE5->( dbGoBottom() )
		SE5->( dbSkip() )
		SE1->( dbGoBottom() )
		SE1->( dbSkip() )
		FK1->( dbGoBottom() )
		FK1->( dbSkip() )

		// Zera as variaveis de PCC para que não contabilize duas vezes os impostos do ultimo titulo 
		PIS		:= 0
		COFINS	:= 0
		CSLL	:= 0

		// Credito do Banco = Variavel VALOR
		VALOR := nValorTotal

		If lPadrao .And. mv_par03 == 1 .And. nC > 0 .And. nValorTotal > 0  .And. nHdlPrv > 0
			PCOIniLan("000012")
			cFilBkp	:=	cFilAnt
			cFilAnt := fDefLancto(lSE5Access,lSE1Access,cFilLancto,cFilLogin)
			nTotal += DetProva( nHdlPrv,;
								cPadrao,;
								"FINA110",;
								cLote,;
								/*nLinha*/,;
								/*lExecuta*/,;
								/*cCriterio*/,;
								/*lRateio*/,;
								/*cChaveBusca*/,;
								/*aCT5*/,;
								/*lPosiciona*/,;
								@aFlagCTB,;
								/*aTabRecOri*/,;
								/*aDadosProva*/ )

			cFilAnt:=cFilBkp
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Finaliza processo de integracao com SIGAPCO ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PCOFinLan("000012")


			//-- Se for rotina automatica força exibir mensagens na tela, pois mesmo quando não exibe os lançametnos, a tela 
			//-- sera exibida caso ocorram erros nos lançamentos padronizados
			If lF110Auto
				lSetAuto := _SetAutoMode(.F.)
				lSetHelp := HelpInDark(.F.)
			EndIf

			//	Define data da contabilização on line
			Do Case 
				Case nDtContOn == 1 // 1- Data Digitação
					dDtLanc := dBKPDTBase
				Case nDtContOn == 2 // 2- Data Disponibilizadade
					dDtLanc :=  IIF(lBxLotSitef .And. Len( aTitulos ) >= 8 , aTitulos[8] , dDtCredito )
				Case nDtContOn == 3 // 3- Data Recebimento
					dDtLanc := dBaixa
			EndCase

			cFilBkp	:=	cFilAnt
			cFilAnt := fDefLancto(lSE5Access,lSE1Access,cFilLancto,cFilLogin)
			cA100Incl( cArquivo,nHdlPrv,3,cLote,lDigita,lAglut,/*cOnLine*/,dDtLanc,/*dReproc*/,@aFlagCTB,/*aDadosProva*/,/*aDiario*/ )
			aFlagCTB := {}  // Limpa o coteudo apos a efetivacao do lancamento
			cFilAnt:=cFilBkp

			If lF110Auto
				HelpInDark(lSetHelp)
				_SetAutoMode(lSetAuto)
			EndIf

		EndIf

		//Gestao
		cFilAnt := cFilLogin
		SM0->(dbGoto(nRecSM0))

		//Restaura a posicao do arquivo
		SE1->( dbGoTo( nRecNoSE1 ) )
		SE5->( dbGoTo( nRecNoSE5 ) )
		FK1->( dbGoTo( nRecNoFK1 ) )

		VALOR := 0
		dbSelectArea( "ABAT" )
		dbCloseArea()

		dbSelectArea( "SE1" )
		RetIndex( "SE1" )
		Set Filter to

		Exit

	EndDo

	If __lSX8
		RollBackSX8()
	EndIf

	//Gestao
	cFilAnt := If(lBxLotSitef, If(lFINA918,F918BxLote(),FilBxLote()), cFilLogin)

	// Somo o valor total de todas a threads em execução para movimento aglutinado
	If lThread .And. lBxLotSitef
		//Obtenho o array que pode estar ainda vazio (primeira execução) ou já alimentado com valores, permitindo incluir mais valores
		VarGetA( cMyUId, cKeyId, @aValor )
		//Adiciono um novo valor no array
		aAdd( aValor, {{ .T. , nValorTotal, "Total Conciliado", cKeyId}})

		//Gravo o array contendo os valores, permitindo que as threads em execução possam complementar sua gravação e seja feita a totalização
		//na rotina FINA910A no momento da gravação do movimento do tipo VL, tanto no FK5 quanto na SE5
		VarSetA( cMyUId, cKeyId, aValor )
	EndIf

	//Gera registro totalizador no SE5, caso baixa seja
	//aglutinada (BX_CNAB=S)
	
	IF lPadrao .and. lContabiliza
		nValorTotal:= nVlrLote
	EndIf

	If nValorTotal > 0 .And. lGerTotal .And. lGravaAglut .And. IIf( lBxLotSitef, !lThread, .T. )
		//Define os campos que não existem nas FKs e que serão gravados apenas na E5, para que a gravação da E5 continue igual
		//Estrutura para o E5_CAMPOS: "{{'SE5->CAMPO', Valor}, {'SE5->CAMPO', Valor}}|{{'SE5->CAMPO', Valor}, {'SE5->CAMPO', Valor}}"
		cCamposE5 := "{"

		oModelBxR := FWLoadModel("FINM030")
		oModelBxR:SetOperation( MODEL_OPERATION_INSERT ) //Inclusao
		oModelBxR:Activate()
		oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Informa se vai gravar SE5 ou não 
		oModelBxR:SetValue( "MASTER", "NOVOPROC", .T. ) //Informa que a inclusão será feita com um novo número de processo

		//Dados do Processo
		oSubFKA := oModelBxR:GetModel("FKADETAIL")
		oSubFKA:SetValue( "FKA_IDORIG", FWUUIDV4() )
		oSubFKA:SetValue( "FKA_TABORI", "FK5" )

		//Informacoes do movimento
		oSubFK5 := oModelBxR:GetModel( "FK5DETAIL" )
		oSubFK5:SetValue( "FK5_VALOR"	, nValorTotal )
		oSubFK5:SetValue( "FK5_TPDOC"	, 'VL' )
		oSubFK5:SetValue( "FK5_BANCO"	, cBco110)
		oSubFK5:SetValue( "FK5_AGENCI"	, cAge110 )
		oSubFK5:SetValue( "FK5_CONTA"	, cCta110 )
		oSubFK5:SetValue( "FK5_RECPAG"	, "R" )
		oSubFK5:SetValue( "FK5_HISTOR"	, STR0010 + " / " + STR0023 + " " + cLoteFin ) // "Baixa Automatica / Lote : "	
		oSubFK5:SetValue( "FK5_DTDISP"	, If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dDataBase))
		oSubFK5:SetValue( "FK5_FILORI"	, cFilAnt)
		oSubFK5:SetValue( "FK5_ORIGEM"	, cFunName )
		oSubFK5:SetValue( "FK5_LOTE"	, cLoteFin )
		oSubFK5:SetValue( "FK5_NATURE"	, cNatLote ) 
		oSubFK5:SetValue( "FK5_MOEDA"	, StrZero(nMoedaBco,2) )

		If lF110Auto .And. lMovBcoBx
			oSubFK5:SetValue( "FK5_DATA", If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dBaixa))
			cCamposE5 += "{'E5_DTDIGIT',STOD('" + DTOS(dBKPDTBase) + "')}"
			cCamposE5 += ",{'E5_DTDISPO',STOD('" + DTOS(If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dBaixa)) + "')}"
		Else
			oSubFK5:SetValue( "FK5_DATA", If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dDataBase))
			cCamposE5 += "{'E5_DTDIGIT',STOD('" + DTOS(dBKPDTBase) + "')}"
			cCamposE5 += ",{'E5_DTDISPO',STOD('" + DTOS(If(lBxLotSitef .And. Len( aTitulos ) >= 8, aTitulos[8], dBaixa)) + "')}"
		EndIf

		If lSpbInUse
			cCamposE5 += ",{'E5_MODSPB','1'}"
		Endif
		If __lIsBRA
			cCamposE5 += ",{'E5_TPDESC'  , '" + cTpDesc + "' }"
		Endif

		cCamposE5 += ",{'E5_LOTE','" + cLoteFin + "'}"
		cCamposE5 += "}"

		oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5

		If oModelBxR:VldData()		
			oModelBxR:CommitData()
			SE5->(dbGoto(oModelBxR:GetValue('MASTER','E5_RECNO')))
		Else
			lRet := .F.
			cLog := cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_IDFIELDERR]) + ' - '
			cLog += cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_ID]) + ' - '
			cLog += cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_MESSAGE])        	

			Help( ,,"M030VALID",,cLog, 1, 0 )	            
		Endif
		oModelBxR:DeActivate()
		oModelBxR:Destroy()
		oModelBxR := Nil

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ PONTO DE ENTRADA FA110TOT                                          ³
		//³ ExecBlock para gravar dados complementares ao registro totalizador ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lFa110Tot
			Execblock("FA110TOT",.F.,.F.)
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza saldo bancario.      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AtuSalBco(cBco110,cAge110,cCta110,SE5->E5_DATA,SE5->E5_VALOR,"+")
	EndIf

	//Gestao
	cFilAnt := cFilLogin

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Restaura os ¡ndices                                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lF110Auto 
		dbSelectArea("SE1")
		RetIndex("SE1")
		dbSetOrder(nSavOrd1)
		MSSeek(xFilial())
		FErase (cIndex+OrdBagExt())
	Endif

	If oQryFk1 != Nil
		oQryFk1:Destroy()
		oQryFk1 := Nil	
	EndIf
	If oQryFk5 != Nil
		oQryFk5:Destroy()
		oQryFk5 := Nil	
	EndIf	

	If __oObjAb != NIL
		__oObjAb:Destroy()
		__oObjAb := Nil
	Endif	

	cFilAnt := cFilOld
	SM0->(dbGoto(nRecSM0))

	FwFreeArray(aBaixas)
	FwFreeArray(aCampos)	
	FwFreeArray(aDescMotbx)	
	FwFreeArray(aBaixaSE5)
	FwFreeArray(aFlagCTB)
	FwFreeArray(aImpostos)
	FwFreeArray(aSelFil)
	FwFreeArray(aSelFilAux)
	FwFreeArray(aTmpFil)
	FwFreeArray(aDadosPar)
	FwFreeArray(aOutImp)
	FwFreeArray(aNroPag)

	RestArea(aArea)
	//volta database
	dDataBase:= dBKPDTBase
Return (.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³fa110blank³ Autor ³ Mauricio Pequim Jr 	  ³ Data ³ 06/01/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Limpa o campo E1_OK para efetuar marca‡„o. 					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³fa110blank() 															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³FINA110																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fa110Blank()

	Reclock("SE1")
	Replace E1_OK with "  "
	SE1->(MsUnlock())

Return

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³fa110ChecF³ Autor ³ Mauricio Pequim Jr.   ³ Data ³ 06/01/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Retorna Condi‡„o para Indice Condicional						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³fa110ChecF() 															  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Fa110ChecF(aSelFil,aTmpFil,cFields)

	Local cFiltro 		:= ""
	Local cTmpSE1Fil 	:= ""
	Local cLstSit		:= ""

	//PCREQ-3782 - Bloqueio por situação de cobrança
	cLstSit := F023VerBlq("2","0004")

	cFiltro += "SELECT "
	cFiltro += cFields
	cFiltro +=  " , R_E_C_N_O_ RECNO "
	cFiltro +=  " FROM "+	RetSqlName("SE1") + " SE1 "
	cFiltro +=  " WHERE "

	//Gestao
	cFiltro += "E1_FILIAL " + GetRngFil( aSelFil, "SE1", .T., @cTmpSE1Fil ) 
	aAdd(aTmpFil, cTmpSE1Fil)

	cFiltro += "AND E1_VENCREA Between '" + DTOS(dVencIni) + "' AND '" + DTOS(dVencFim) + "' " 
	cFiltro += "AND E1_CLIENTE Between '" + cCliDe         + "' AND '" + cCliAte        + "' " 

	If !GetMv("MV_ANTCRED") 
		cFiltro += "AND E1_EMISSAO <= '"+DTOS(dDataBase)+"' "
	EndIf

	cFiltro += "AND E1_SALDO > 0 "
	
	If FindFunction('FINTP02')
    	cFiltro += FINTP02() // retornar o filtro de bloqueio do titulo do TIN  AND E1_ORIGEM <> 'FINI055'
	EndIf

	If !Empty(cBord110)
		cFiltro += "AND E1_NUMBOR = '"+ cBord110      +"' "
	Else
		If mv_par06 == 1 // Filtra pelo banco informado
			cFiltro += "AND E1_PORTADO = '" +cBco110 +"' "
			cFiltro += "AND E1_AGEDEP  = '" +cAge110 +"' "
			cFiltro += "AND E1_CONTA   = '" +cCta110 +"' "
		Endif	  
		If !MovBcoBx(cMotBx,.T.)
			cFiltro += "AND E1_NUMBOR = '"+ Space(TamSX3("E1_NUMBOR")[1]) +"' "
		EndIf
	EndIf

	If MV_PAR08 == 1
		cFiltro += "AND E1_TIPO NOT IN " + F110NotIN()	
	Else
		cFiltro += " AND E1_TIPO IN ('"+ MVRECANT+"','"+MV_CRNEG+"') "
	EndIf

	// Verifica integracao com PMS e nao permite baixar titulos que tenham solicitacoes
	// de transferencias em aberto.
	cFiltro += " AND E1_NUMSOL = ' ' "

	// Para o Brasil, apresenta somente os titulos cuja moeda e' a mesma do banco
	// selecionado para baixa.
	// Caso a moeda do banco estiver vazia ou caso o motivo de baixa nao movimente banco, considero apenas a moeda forte
	If FXMultSld() 
		If SA6->A6_MOEDA > 1 .And. MovBcoBx(cMotBx,.T.)
			cFiltro += " AND E1_MOEDA = " + StrZero( SA6->A6_MOEDA, 2 ) + " "
		Endif
	EndIf

	//PCREQ-3782 - Bloqueio por situação de cobrança
	If !Empty(cLstSit)	
		cFiltro	+= "AND E1_SITUACA NOT IN "+ FormatIn(cLstSit,"|")+" " //Diferente de Carteira, Carteira Protesto e Carteira Acordo

	Endif

	// Filtro de Usuario
	If !Empty(cFil110)
		cFiltro += ' AND ' + cFil110 
	Endif

	cFiltro	+= " AND D_E_L_E_T_ = ' ' "

	cFiltro += " ORDER BY "+ SqlOrder(SE1->(IndexKey()))

Return cFiltro

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³fa110Corre³ Autor ³ Mauricio Pequim Jr 	  ³ Data ³ 06/01/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Calcula a corre‡„o monet ria.										  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³fa110Corr()																  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Gen‚rico																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fa110Correc( )

	Local nCorrecao := 0
	Local nValAtual := 0
	Local nValEmiss := 0

	IF SE1->E1_MOEDA > 1 .AND. SE1->E1_TXMOEDA == 0
		If Empty(SE1->E1_DTVARIA) .And. Int(SE1->E1_VLCRUZ) = Int(xMoeda(SE1->E1_SALDO,SE1->E1_MOEDA,1,SE1->E1_EMISSAO,,If(cPaisLoc=="BRA",SE1->E1_TXMOEDA,0)))
			nValEmiss := SE1->E1_VLCRUZ
		Else
			If !Empty(SE1->E1_TXMDCOR)
				nValEmiss := xMoeda(SE1->E1_SALDO,SE1->E1_MOEDA,1,Iif(Empty(SE1->E1_DTVARIA),SE1->E1_EMISSAO,SE1->E1_DTVARIA),8,SE1->E1_TXMDCOR)
			Else
				nValEmiss := xMoeda(SE1->E1_SALDO,SE1->E1_MOEDA,1,Iif(Empty(SE1->E1_DTVARIA),SE1->E1_EMISSAO,SE1->E1_DTVARIA),8,Iif(Empty(SE1->E1_DTVARIA),SE1->E1_TXMOEDA,0))
			EndIf
		EndIf

		nValAtual := xMoeda(SE1->E1_SALDO,SE1->E1_MOEDA,1,dDataBase)

		If(SE1->E1_IRRF > 0) .And. !FIrPjBxCr(.T.)
			nValAtual -= SE1->E1_IRRF
		EndIf
		nValEmiss -= SomaAbat(E1_PREFIXO,E1_NUM,E1_PARCELA,"R",E1_MOEDA,dDataBase,E1_CLIENTE,E1_LOJA,E1_FILORIG)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica atraves do parametro MV_CALCCM se sera calculada a cor-³
		//³ recao monetaria.                                           	  ³
		//³ Caso o parametro nao exista, sera assumido "S"						  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SuperGetMv("MV_CALCCM",,"S") == "S"
			nCorrecao := nValAtual - nValEmiss
		Else
			nCorrecao := 0
		Endif
	Endif
Return (nCorrecao)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³fA110Par	³ Autor ³ Mauricio Pequim Jr 	  ³ Data ³ 06/01/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Ativa Parƒmetros do Programa										  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ 																			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Gen‚rico 																  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fA110Par()
	pergunte("FIN110",.T.)
Return .T.

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³Fa110Marca³ Autor ³ Mauricio Pequim Jr    ³ Data ³ 06/01/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Trata o valor	para marcar e desmarcar item					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ Fa110Marca(ExpN1,ExpD1,ExpD2) 									  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ FINA110																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Fa110Marca(cAlias,cMarca,aTitulos)

	Local lBxTit 		:= .T.     
	Local lBxTit2		:= .T. 
	Local aRetTit2		:= {}   // Retorno do F110TIT2
	Local lRet			:=.T.
	Local nAbat  		:= 0
	Local nRec      	:= 0
	Local cAliasAnt 	:= Alias()
	Local nX			:= 0
	Local cMarcaSE1		:= ""
	Local lBxCnab		:= SuperGetMv( "MV_BXCNAB",,"S" ) == "S"
	Local lSldBxCr 		:= SuperGetMv("MV_SLDBXCR",,"B") == "C"
	Local lGerTotal 	:= (!Empty(cBord110) .And. lBxCnab)
	Local aValores		:= {}

	Private nValorMarca	:= 0 // Permitir alterar valor do titulo marcado no PE F110TIT

	DEFAULT cAlias	 := "SE1"
	DEFAULT aTitulos := {}

	dbSelectArea(cAlias)
	nRec	:= Recno()
	

	//Rotina Padrao (nao automatizada)
	If Empty(aTitulos)

		DbGoTop()
		While (cAlias)->(!Eof())

			dbSelectArea("SE1")
			SE1->(dbGoto((cAlias)->(RECNO)))

			nJuros   := 0
			nVA      := 0
			nMulta	 := 0
			nCM1 	 := 0
			nProRata := 0
			nDescont := 0
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Somente deve marcar o titulo se passar na validacao da data limite ³
			//³ para operacoes financeiras (MV_DATAFIN) e de permissao de baixa do ³
			//³ titulo com data de credito menor que a emissao (MV_ANTCRED)        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ			
			If FA110Data()

				aValores 	:= FA110Valores()

				nAbat 		:= aValores[1]
				nDescont 	:= aValores[2]			
				
				lRet := Fa070Integ(.F.,.F.)
				If lRet	
					If SE1->(MsRLock()) // Se conseguir travar o registro na tabela SE1
						cMarcaSE1 := SE1->E1_OK 
						
						If lGerTotal .And. lSldBxCr 
							nSomaCheq := SomaCheqCr(.F.,SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_CLIENTE)
							If nSomaCheq > 0
								__nQTitCh ++
							EndIf
						EndIf
						
						If SE1->E1_MOEDA == 1			
							nValorMarca	:= xMoeda(E1_SALDO+E1_SDACRES-E1_SDDECRE+nJuros+nVA+(nCM1+nProRata)+nMulta-nAbat-nDescont,SE1->E1_MOEDA,nMoedaBco,,,If(cPaisLoc=="BRA",SE1->E1_TXMOEDA,0))
						Else
							nValorMarca	:= xMoeda(E1_SALDO+E1_SDACRES-E1_SDDECRE+nJuros+(nCM1+nProRata)+nMulta-nAbat-nDescont,SE1->E1_MOEDA,nMoedaBco,,,If(cPaisLoc=="BRA",SE1->E1_TXMOEDA,0))+nVA
						EndIf

						lBxTit := .T.
						lBxTit2 := .T.

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ PONTO DE ENTRADA F110TIT                                      ³
						//³ Verifica se titulo pode ser marcado para baixa ou nÆo. Caso	³
						//³ tenha sido alterada a marca‡Æo do titulo, ExecBlock dever     ³
						//³ retornar .F., para nÆo haver altera‡Æo dos acumuladores de    ³
						//³ valores e numero de titulos.                                  ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If _lF110TIT2 		// PE novo, considerar o novo, criado para chamada ao desmarcar também
							aRetTit2 := ExecBlock("F110TIT2",.F.,.F.,{nValorMarca,"M"})
							If ValType(aRetTit2) == "A" .AND. Len(aRetTit2) == 2
								lBxTit2 := aRetTit2[1]
								nValorMarca := aRetTit2[2]
							EndIf
						ElseIf __lF110TIT
							lBxTit := ExecBlock("F110TIT",.F.,.F.,{nValorMarca})
						Endif					

						If lBxTit .AND. lBxTit2
							RecLock(cAlias)
								(cAlias)->E1_OK 	:= cMarca
								(cAlias)->ABAT_V 	:= nAbat
								(cAlias)->VA_V 		:= nVa
								(cAlias)->JUROS_V	:= nJuros
								(cAlias)->CM1_V		:= nCM1
								(cAlias)->PRORATA_V	:= nProRata
								(cAlias)->MULTA_V	:= nMulta
								(cAlias)->DESCONTO_V:= nDescont
							(cAlias)->(MsUnlock())

							nValor += nValorMarca
							nQtdTit++        				
						Else
							SE1->E1_OK := cMarcaSE1
						Endif

						If lFCalDesc
							ExecBlock("FCalDesc",.F.,.F.,{cMarca,1,cAliasSE1},)
						Endif					
					Endif
				Endif
				nDescGeral += nDescont
			EndIf	

			dbSelectArea(cAlias)	
			(cAlias)->(dbSkip())
		EndDo
	Else

		//Rotina Automatizada
		For nX := 1 to Len(aTitulos)

			nJuros		:= 0
			nVA			:= 0
			nMulta		:= 0
			nCM1		:= 0
			nProRata	:= 0

			(cAlias)->(dbGoto(aTitulos[nX]))

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Somente deve marcar o titulo se passar na validacao da data limite ³
			//³ para operacoes financeiras (MV_DATAFIN) e de permissao de baixa do ³
			//³ titulo com data de credito menor que a emissao (MV_ANTCRED)        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If FA110Data()

				aValores 	:= FA110Valores()

				nAbat 		:= aValores[1]
				nDescont 	:= aValores[2]

				lBxTit := .T.

				lRet := Fa070Integ(.F.,.F.)
				If lRet	
					If SE1->(MsRLock()) // Se conseguir travar o registro		

						If lBxCnab .And. lSldBxCr .And. !Empty(cLoteFin) 
							nSomaCheq := SomaCheqCr(.F.,SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_CLIENTE)
							If nSomaCheq > 0
								__nQTitCh ++
							EndIf
						EndIf

						cMarcaSE1 := SE1->E1_OK
						nValorMarca	:= xMoeda(E1_SALDO+E1_SDACRES-E1_SDDECRE+nJuros+nVa+(nCM1+nProRata)+nMulta-nAbat-nDescont,SE1->E1_MOEDA,nMoedaBco,,,If(cPaisLoc=="BRA",SE1->E1_TXMOEDA,0))

						lBxTit := .T.
						lBxTit2 := .T.

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ PONTO DE ENTRADA F110TIT                                      ³
						//³ Verifica se titulo pode ser marcado para baixa ou nÆo. Caso	³
						//³ tenha sido alterada a marca‡Æo do titulo, ExecBlock dever     ³
						//³ retornar .F., para nÆo haver altera‡Æo dos acumuladores de    ³
						//³ valores e numero de titulos.                                  ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If _lF110TIT2 		// PE novo, considerar o novo, criado para chamada ao desmarcar também
							aRetTit2 := ExecBlock("F110TIT2",.F.,.F.,{nValorMarca,"M"})
							If ValType(aRetTit2) == "A" .AND. Len(aRetTit2) == 2
								lBxTit2 := aRetTit2[1]
								nValorMarca := aRetTit2[2]
							EndIf
						ElseIf __lF110TIT
							lBxTit := ExecBlock("F110TIT",.F.,.F.,{nValorMarca})
						Endif					

						If lBxTit .AND. lBxTit2 
							
							SE1->E1_OK := cMarca

							nValor += nValorMarca
							nQtdTit++

						Else
							SE1->E1_OK := cMarcaSE1
						Endif
					Endif
					nDescGeral += nDescont
				Endif
			EndIf	
		Next nX

	Endif

	FwFreeArray(aValores)
	dbGoto(nRec)
	dbSelectArea(cAliasAnt)

Return

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³Fa110bAval ³ Autor ³ Mauricio Pequim Jr.  ³ Data ³ 02/04/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Bloco de marcacoo       			          						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ Fa110bAval()		  													  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ FINA110																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Fa110bAval(cAliasSe1,cMarca,oValor,oQtdTit,oMark,nValor)

	Local lRet 		:= .T.
	Local lMarca	:= .T.


	// Verifica se o registro nao esta sendo utilizado em outro terminal
	If FINTP01(.T.,cAliasSe1) // Restringe o uso do programa Financeiro quando a origem do titulo for de origem Totvs Incorporação
		lRet := .F.
	EndIf

	If lRet
		lRet := IIF(SE1->E1_OK==cMarca,.T.,Fa070Integ(.F.,.T.))
	Endif

	SE1->(dbGoto((cAliasSE1)->RECNO))
	lMarca := SE1->(MsRLock()) .AND. (cAliasSE1)->(MsRLock())	

	If lRet
		If lMarca
			Fa110Inverte(cAliasSE1, cMarca, oValor, oQtdTit,.F., oMark, @nValor)
			lRet := .T.
		Else
			Help("  ",1,STR0025,,STR0024,1,1)//"Este titulo está sendo utilizado em outro terminal"
			lRet := .F.
		Endif	
	Endif

	oMark:oBrowse:Refresh(.t.)

Return lRet


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} ProcInverte
Função para apresentar a barra de progresso da função Fa110Inverte

@author	richard.lopes
@since 28/04/2020
/*/
//-----------------------------------------------------------------------------------------------------
Static Function ProcInverte(cAliasSE1, cMarca, oValor, oQtda, lTodos, oMark, nValor)
	Processa({ || Fa110Inverte(cAliasSE1, cMarca, oValor, oQtda, lTodos, oMark, @nValor)})
	oMark:oBrowse:SetFocus()
Return Nil 


/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FA110Inver³ Autor ³ Mauricio Pequim Jr 	  ³ Data ³ 06/01/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Marca / Desmarca todos os titulos								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ FINA110																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Fa110Inverte(cAliasSe1,cMarca,oValor,oQtda,lTodos,oMark,nValor)

	Local nReg			:= (cAliasSe1)->(Recno())
	Local lBxTit 		:= .T. 
	Local lBxTit2		:= .T.
	Local aRetTit2		:= {}
	Local nAbat 		:= 0
	Local dBaixa 
	Local lLojxRMul  	:= FindFunction("LojxRMul")
	Local cMvJurTipo 	:= SuperGetMv("MV_JURTIPO",,"")  // calculo de Multa do Loja , se JURTIPO == L 
	Local lMulLoj	  	:= SuperGetMv("MV_LJINTFS", ,.F.) // Calcula multa conforme regra do loja, se integração com financial estiver habilitada
	Local lBxCnab		:= SuperGetMv( "MV_BXCNAB",,"S" ) == "S"
	Local lSldBxCr 		:= SuperGetMv("MV_SLDBXCR",,"B") == "C"
	Local nSomaCheq		:= 0
	Local nTotalRec     := 0
	Local aValores		:= {}

	Private nValorMarca	:= 0 // Permitir alterar valor do titulo marcado no PE F110TIT

	DEFAULT lTodos  := .T.
	
	lGerTotal := (!Empty(cBord110) .And. lBxCnab)

	dbSelectArea(cAliasSE1)

	If lTodos
		dbGoTop()
	
		nTotalRec := (cAliasSe1)->(RecCount())
	Else
		nTotalRec := 1
	EndIf

	ProcRegua(nTotalRec)

	While !lTodos .Or. (!Eof())
		IncProc()

		If lSldBxCr  .and. lGerTotal 
			nSomaCheq := SomaCheqCr(.F.,(cAliasSE1)->E1_PREFIXO, (cAliasSE1)->E1_NUM, (cAliasSE1)->E1_PARCELA, (cAliasSE1)->E1_TIPO, (cAliasSE1)->E1_CLIENTE)
		
			If nSomaCheq > 0
				If !lTodos .And. (cAliasSE1)->E1_OK <> cMarca
					Help( ,,"TITCHEQ",,STR0078, 1, 0 )
				EndIf
				// Para controle da quantidade de titulos selecionados que possuem cheques
				IF (cAliasSE1)->E1_OK <> cMarca
					__nQTitCh ++
				ElseIf (cAliasSE1)->E1_OK == cMarca
					__nQTitCh --
				EndIf	
			ENDIF	
		ENDIF	

		dBaixa := CriaVar("E1_BAIXA")
		 
		SE1->(dbGoto((cAliasSE1)->RECNO))
		lCondic := SE1->(MsRLock()) .AND. (cAliasSE1)->(MsRLock()) 

		If (lTodos .And. lCondic ) .Or. !lTodos
			nJuros   := 0
			nVA      := 0
			nCM1     := 0
			nProRata := 0
			nMulta   := 0


			If cMvJurTipo == "L" .OR. lMulLoj	//CALCULO AUTOMÁTICO DE MULTA - QUANDO ORIGEM NO LOJA
				If lLojxRMul .and. dDataBase > dBaixa
					nMulta := LojxRMul( , , ,SE1->E1_SALDO, SE1->E1_ACRESC, SE1->E1_VENCREA, dDtCredito , , SE1->E1_MULTA, ,;
					SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_CLIENTE, SE1->E1_LOJA, "SE1",.T. )
				Else
					nMulta := 0
				Endif
			Endif

			/*
				Somente deve marcar o titulo se passar na validacao da data limite 
				para operacoes financeiras (MV_DATAFIN) e de permissao de baixa do 
				titulo com data de credito menor que a emissao (MV_ANTCRED)        
			*/
			If FA110Data()

				dbSelectArea("SE1")
				
				// Tratativa para não precisar calcular novamente
				If !lF110Auto
					If !(cAliasSE1)->E1_OK == cMarca	// Está marcando -> Calcular e gravar os valores

						aValores 	:= FA110Valores()

						nAbat 		:= aValores[1]
						nDescont 	:= aValores[2]

						RecLock(cAliasSE1, .F.)
							(cAliasSE1)->ABAT_V 	:= nAbat
							(cAliasSE1)->VA_V 		:= nVa
							(cAliasSE1)->JUROS_V	:= nJuros
							(cAliasSE1)->CM1_V		:= nCM1
							(cAliasSE1)->PRORATA_V	:= nProRata
							(cAliasSE1)->MULTA_V	:= nMulta
							(cAliasSE1)->DESCONTO_V	:= nDescont
						MsUnlock()
					Else // Desmarcar -> Considera os valores gravados anteriormente para diminuir do valor em tela
						nAbat		:= (cAliasSE1)->(ABAT_V)
						nVa 		:= (cAliasSE1)->VA_V
						nJuros 		:= (cAliasSE1)->JUROS_V
						nCM1 		:= (cAliasSE1)->CM1_V
						nProRata 	:= (cAliasSE1)->PRORATA_V
						nMulta 		:= (cAliasSE1)->MULTA_V
						nDescont 	:= (cAliasSE1)->DESCONTO_V						
					EndIf
				Else
					aValores 	:= FA110Valores()

					nAbat 		:= aValores[1]
					nDescont 	:= aValores[2]
				EndIf

				If (cAliasSE1)->E1_MOEDA == 1
					nValorMarca := xMoeda(E1_SALDO+E1_SDACRES-E1_SDDECRE+nVA+(nCM1+nProRata)+nMulta-nAbat-nDescont,SE1->E1_MOEDA,nMoedaBco,,,If(cPaisLoc=="BRA",SE1->E1_TXMOEDA,0))+nJuros
				Else
					nValorMarca := xMoeda(E1_SALDO+E1_SDACRES-E1_SDDECRE+(nCM1+nProRata)+nMulta-nAbat-nDescont,SE1->E1_MOEDA,nMoedaBco,,,If(cPaisLoc=="BRA",SE1->E1_TXMOEDA,0))+nVA+nJuros		
				EndIf	

				//Limpo a Marca
				If (cAliasSE1)->E1_OK == cMarca
					lBxTit2 := .T.
					If _lF110TIT2
						aRetTit2 := ExecBlock("F110TIT2",.F.,.F.,{nValorMarca,"D"})
						If ValType(aRetTit2) == "A" .AND. Len(aRetTit2) == 2
							lBxTit2 := aRetTit2[1]
							nValorMarca := aRetTit2[2]
						EndIf
					Endif
					If lBxTit2
						(cAliasSE1)->E1_OK	:= "  "
						(cAliasSE1)->(MsUnlock())
						SE1->(MsUnlock())					
						nValor -= nValorMarca
						nQtdTit--
					EndIf

				ElseIf !(FINTP01(.F.,cAliasSe1)) // Títulos de Integração TIN?
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ PONTO DE ENTRADA F110TIT                                      ³
					//³ Verifica se titulo pode ser marcado para baixa ou nÆo. Caso	³
					//³ tenha sido alterada a marca‡Æo do titulo, ExecBlock dever     ³
					//³ retornar .F., para nÆo haver altera‡Æo dos acumuladores de    ³
					//³ valores e numero de titulos.                                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					lBxTit := .T.
					lBxTit2 := .T.

					If _lF110TIT2 		// PE novo, considerar o novo, criado para chamada ao desmarcar também
						aRetTit2 := ExecBlock("F110TIT2",.F.,.F.,{nValorMarca,"M"})
						If ValType(aRetTit2) == "A" .AND. Len(aRetTit2) == 2
							lBxTit2 := aRetTit2[1]
							nValorMarca := aRetTit2[2]
						EndIf
					ElseIf __lF110TIT
						lBxTit := ExecBlock("F110TIT",.F.,.F.,{nValorMarca})
					Endif					

					If lBxTit .AND. lBxTit2
						nValor += nValorMarca
						nQtdTit++
						(cAliasSE1)->E1_OK	:= cMarca
						(cAliasSE1)->(MsUnlock())						
					Endif

				Endif
			EndIf	
		Endif
		If lFCalDesc
			ExecBlock("FCalDesc",.F.,.F.,{cMarca,1,cAliasSE1},)
		Endif
		If lTodos
			dbSelectArea(cAliasSE1)
			dbSkip()
		Else
			Exit
		Endif
	Enddo

	nQtdTit:= Iif(nQtdTit<0,0,nQtdTit)
	(cAliasSe1)->(dbGoto(nReg))
	oValor:Refresh()
	oQtda:Refresh()
	oMark:oBrowse:Refresh(.t.)

Return Nil

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³F110BxBord³ Autor ³ Mauricio Pequim Jr    ³ Data ³ 06/01/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Controla permissao de baixa automatica de bordero   		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ FINA110													  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function F110BxBord(lHelp)

	Local lBxBord := .T.

	Default lHelp	:= .F.
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ PONTO DE ENTRADA F110BOR                                      ³
	//³ Verifica se bordero pode baixado ou nÆo. 							³
	//³ ExecBlock dever  retornar .F., para nÆo baixar o bordero em   ³
	//³ questao                                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock("F110BOR")
		lBxBord := ExecBlock("F110BOR",.F.,.F.)
	ElseIf lHelp .And. !MovBcoBx(cMotBx, .T.) .And. !Empty(cBord110)
		Help("  ",1,STR0076,,STR0077,1,1) // "Não é permitida a baixa automática por motivo que não movimente banco."
	EndIf

Return lBxBord

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³VerCliFor ³ Autor ³ Mauricio Pequim Jr    ³ Data ³ 06/01/99 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Carrega  as variaveis Cliente/Fornecedor e Loja             ³±±
±±³			 ³Carrega os proximos campos quando valor digitado for encon- ³±±
±±³			 ³trado. 													  ³±±
±±³			 ³As variaveis cClifor e cLoja deverÆo ser passadas por refe- ³±±
±±³			 ³rencia.         											  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³VerCliFor(ExpC1,ExpC2,ExpL1,ExpC3)						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Cliente/Fornecedor,Loja,Flag para Help no ato (default= .T.)³±±
±±³			 ³Carteira                                					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function VerCliForn(cCliFor,cLoja,lHelp,cCarteira)
	Local cAlias:=Alias()
	Local cChave:=cCliFor+Iif(Empty(cLoja),"",cLoja)
	Local lRet:=.T.
	Local cArea := IIF(cCarteira == "R", "A1","A2")
	Local cOpenArq := "S" + cArea

	If (cCliFor = NIL) .or. (cCarteira = NIL)
		lRet := .F.
	Endif

	If lRet
		lHelp := Iif( lHelp=Nil,.T.,lHelp)
		DbSelectArea(cOpenArq)
		DbSetOrder(1)
		If !DbSeek(xFilial()+cChave)
			If lHelp
				Help(" ",1,IIF(cCarteira == "R","NOCLIENTE","NOFORNEC"))
			EndIf
			lRet := .F.
		Else
			cLoja := Iif(cLoja==NIl.or.Empty(cLoja),&cArea._LOJA,cLoja)
		Endif
	Endif
	DbSelectArea( cAlias )
Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³Fa110TudOk³ Autor ³ Claudio D. de Souza   ³ Data ³ 22/05/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Valida os gets da tela inicial da baixa automatica          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³Fa110TudOk(.T./.F.)        								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³lBxCnab - Se a baixa se aglutinada                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ FINA110  												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Fa110TudOk(lBxCnab)
	Local lRet := .T.
	Local nMoeda := 0

	// Valida todos os gets
	Do Case
		Case !(dVencFim >= dVencIni)
		lRet := .F.
		Case Empty(cCliAte)
		lRet := .F.
		Case !(cCliAte >= cCliDe)
		lRet := .F.
		Case MovBcoBx(cMotBx, .T.) .and. !(CarregaSa6(@cBco110,,,.T.,,,,,.T.)) 
		lRet := .F.
		Case MovBcoBx(cMotBx, .T.) .and. !(CarregaSa6(@cBco110,@cAge110,,.T.,,,,,.T.))
		lRet := .F.
		Case MovBcoBx(cMotBx, .T.) .and. !(CarregaSa6(@cBco110,@cAge110,@cCta110,.T.,,.T.,,,.T.))
		lRet := .F.
		Case !(ShowMotBx("R",.T.))
		lRet := .F.
		Case !(F110BXBORD() .and. IIF(!MovBcoBx(cMotBx, .T.),Empty(cBord110),.T.))
		lRet := .F.
		Case (!Empty(cBord110) .And. lBxCnab)  .And. !(CheckLote("R"))
		lRet := .F.
	EndCase

	If FXMultSld() .AND. !Empty( cBord110 )
		//Valida se banco da tela e banco do portador possuem mesma moeda
		//Evitando que se baixe o bordero de portador US$ em conta EURO, por exemplo.
		//
		//Exemplos:
		//Moeda Portador (SEA) - Moeda Banco Tela - Pode Baixar
		//--------------------------------------------------------
		//		R$						R$					OK
		//		US$						R$					OK
		//		US$						US$					OK	
		//		US$						EURO				NAO  
		//		R$						US$					NAO 
		//--------------------------------------------------------			
		If !Empty(cBord110)
			SEA->(DBSETORDER(2))
			If SEA->(MsSeek(xFilial("SEA")+cBord110+"R"))
				//Obtenho a moeda do Portador
				nMoeda := Max( MoedaBco(SEA->EA_PORTADO,SEA->EA_AGEDEP,SEA->EA_NUMCON), 1)
			Endif
			//Valido se o banco da tela pode receber baixa do bordero
			lRet := FXVldBco( cBco110, cAge110, cCta110, nMoeda, .T.)
		Endif
	EndIf

	If lRet .and. ExistBlock("F110TOK")
		lRet := ExecBlock("F110TOK",.F.,.F.,{cBco110,cAge110,cCta110})
	Endif

Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³F110Ret   ³ Autor ³ Mauricio Pequim Jr    ³ Data ³ 25/11/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Tratamento de retencao na data de credito					 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ FINA110				 													  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function F110Ret()

	Local nJ := 0

	dDtCredito := dBaixa
	If mv_par07 == 1 // Considera retencao bancaria
		SA6->(MsSeek(xFilial("SA6")+cBanco+cAgencia+cConta))

		If !(SA6->(Eof())) .AND. SA6->A6_RETENCA > 0 .AND. SE1->E1_SITUACA $ "12347"
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Atualiza data vencto real c/reten‡„o Banc ria³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			For nj:=1 To SA6->A6_RETENCA
				dDtCredito = DataValida(dDtCredito+1,.T.)
			Next nj
		Else
			dDtCredito := dDataBase
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³MenuDef   ³ Autor ³ Ana Paula N. Silva     ³ Data ³22/11/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Utilizacao de menu Funcional                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Array com opcoes da rotina.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Parametros do array a Rotina:                               ³±±
±±³          ³1. Nome a aparecer no cabecalho                             ³±±
±±³          ³2. Nome da Rotina associada                                 ³±±
±±³          ³3. Reservado                                                ³±±
±±³          ³4. Tipo de Transa‡„o a ser efetuada:                        ³±±
±±³          ³	  1 - Pesquisa e Posiciona em um Banco de Dados     	  ³±±
±±³          ³    2 - Simplesmente Mostra os Campos                       ³±±
±±³          ³    3 - Inclui registros no Bancos de Dados                 ³±±
±±³          ³    4 - Altera o registro corrente                          ³±±
±±³          ³    5 - Remove o registro corrente do Banco de Dados        ³±±
±±³          ³5. Nivel de acesso                                          ³±±
±±³          ³6. Habilita Menu Funcional                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MenuDef() As Array

Local aUserMenu As Array
Local aRotina	As Array
	
aUserMenu := {}
aRotina  := {	{ STR0026, "AxPesqui"    , 0 , 1,,.F. },; // "Pesquisa"
				{ STR0001, "fA110Par"    , 0 , 1      },; // "Parƒmetros"
				{ STR0002, "fA110Aut"    , 0 , 3      },; // "Autom tica"
				{ STR0050, "FA110CAUT"   , 0 , 5 ,,.F.},; // "Cancelamento Automatico"  
				{ STR0022, "FA040Legenda", 0 , 6, ,.F.} } //"Legenda"
	
//Rateio Multinatureza
If ExistFunc("F040CMNT")
	If MV_MULNATR
		aAdd( aRotina,	{ STR0073 ,"F040CMNT()", 0 , 2})	//"Consulta Rateio Multi Naturezas"	
	Endif
EndIf	

// Ponto de entrada para acrescentar botões no menu
If ExistBlock('FI110ROT')   
	aUserMenu := ExecBlock( 'FI110ROT')
	If ValType( aUserMenu ) == 'A'
		aEval( aUserMenu, { |aAux| aAdd( aRotina, aAux ) } )
	EndIf
EndIf

Return(aRotina)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³ FA110BtOK ³ Autor ³ Gustavo Henrique     ³ Data ³ 11/06/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Validacao no botao OK da tela de baixa					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ FA110BtOK()			 									  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ FINA110													  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FA110BtOK()

	Local lFa110BtOk	:= ExistBlock("F110BtOK")
	Local lRet := .T.
	Local lBxCnab		:= SuperGetMv( "MV_BXCNAB",,"S" ) == "S"
	Local lSldBxCr 		:=SuperGetMv("MV_SLDBXCR",,"B") == "C"

	lGerTotal := (!Empty(cBord110) .And. lBxCnab)
	If lFa110BtOk
		lRet := ExecBlock("F110BtOK",.F.,.F.)
	Endif      
	
	If lGerTotal .And. lSldBxCr .And. nQtdTit>0 .And. lRet
		If nQtdTit == __nQTitCh
			Help( ,,"TITCHEQ",,STR0079, 1, 0 )
			lRet := .F.
		ElseIf __nQTitCh >0 .And. nQtdTit > __nQTitCh
			lRet:= MsgYesNo(STR0080,STR0081) 
		EndIf
	EndIf		
Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³FinA110T   ³ Autor ³ Marcelo Celi Marques ³ Data ³ 27.03.08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Chamada semi-automatica utilizado pelo gestor financeiro   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ FINA110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FinA110T(aParam)

	cRotinaExec := "FINA110"
	ReCreateBrow("SE1",FinWindow)      	
	FinA110(aParam[1])
	ReCreateBrow("SE1",FinWindow)      	

	dbSelectArea("SE1")

	INCLUI := .F.
	ALTERA := .F.

Return .T.	

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³F110ToTrb  ³ Autor ³ Mauricio Pequim Jr    ³ Data ³ 26/07/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Cria temporario a partir de uma Query                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1 = Query a ser processada                               ³±±
±±³          ³ExpA2 = Array com estrutura do arquivo temporario            ³±±
±±³          ³ExpC3 = Nome do alias para o arquivo temporario              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³FINA110			                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function F110ToTrb( cQuery, aStruTmp, cAliasTmp , cRealName , cFields )

	Local nTotalRec := 0
	Local lGrava 	:= .T.
	Local cInsert	:= ""
	Local nSqlExec	:= 0
	Local lRet		:= .T.


	cQuery := ChangeQuery(cQuery)

	cInsert := " INSERT INTO " + cRealName
	cInsert += " ( "
	cInsert += cFields
	cInsert += ", RECNO"
	cInsert += " ) "
	cInsert += cQuery

	MsAguarde( { || nSqlExec := TcSqlExec( cInsert ) } , STR0012 )   

	If nSqlExec < 0	
		FR110Log( TCSqlError() , "TEMPORARIA_TITULOS")
		lRet := .F.
	Endif

	If lRet .and. __lfTemCfg .and. FinTemCfg(_oFINA1101:GetRealName(),"TEMMOTRET","R",{"E1_CLIENTE","E1_LOJA"}) < 0
		FR110Log( TCSqlError() , "UPDATE_TEMPORARIA_IMPOSTOS")
		lRet := .F.
	Endif
	
	If lRet

		nTotalRec:= (cAliasTmp)->(RecCount())

		(cAliasTmp)->(DbGoTop())

		ProcRegua( nTotalRec )	

		While !(cAliasTmp)->(Eof())

			IncProc()	

			// Para o Brasil, apresenta somente os titulos cuja moeda e' a mesma do banco
			// selecionado para baixa.
			// Caso a moeda do banco estiver vazia ou caso o motivo de baixa nao movimente banco, considero apenas a moeda forte
			If FXMultSld() 
				If cPaisLoc=="BRA" .And. SA6->A6_MOEDA > 1 .And. MovBcoBx(cMotBx,.T.)
					lGrava := FXVldBxBco(cBco110,cAge110,cCta110,(cAliasTmp)->E1_NATUREZ, (cAliasTmp)->E1_MOEDA,.F.)
				Endif
			EndIf

			If lGrava
				If lFa110AtCp 	
					ExecBlock("FA110ATCP",.f.,.f.,{cAliasTmp})
				Endif		
			Else
				RecLock(cAliasTmp,.F.)
				(cAliasTmp)->(DbDelete())
				(cAliasTmp)->(MsUnlock())
			EndIf

			(cAliasTmp)->(DbSkip())		

		EndDo		

		DbSelectArea(cAliasTmp)
		(cAliasTmp)->(DbGoTop())

	EndIf

Return lRet


/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ F110NotIn    ³ Autor ³ Mauricio Pequim Jr    ³ Data ³ 19/07/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta a expressão do NOT IN da query do bordero				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ FINA110                                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function F110NotIN()

	Local cTipos := ''

	cTipos += MVRECANT+"/"+MV_CRNEG+"/"+MVABATIM+"/"+MVPROVIS

	cTipos	:=	StrTran(cTipos,',','/')
	cTipos	:=	StrTran(cTipos,';','/')
	cTipos	:=	StrTran(cTipos,'|','/')
	cTipos	:=	StrTran(cTipos,'\','/')

	cTipos := Formatin(cTipos,"/")

Return cTipos

//-----------------------------------------------------------------------------------------------
/*/{Protheus.doc}FA110CAUT
Filtros para montagem do grid de Títulos a Receber, visando cancelamento das suas baixas
@author Alexandre Felicio
@since  26/06/2015
@version 12
/*/
//-----------------------------------------------------------------------------------------------
Function FA110CAUT( aParam )
	Local oDlg1
	Local nOpca := 0 
	Local aRadio := {}
	Local aSelFil	:= {}
	Local nLenFil	:= 1 

	Local lGestao   := FWSizeFilial() > 2	// Indica se usa Gestao Corporativa
	Local cSA6Emp	:= FWModeAccess("SA6",1)
	Local cSA6UNe	:= FWModeAccess("SA6",2)
	Local cSA6Fil	:= FWModeAccess("SA6",3)
	Local lSA6Access:= (cSA6Fil == "E" )
	Local lSE1Access := Iif( lGestao, FWModeAccess("SE1",1) == "C", FWModeAccess("SE1",3) == "C")
	Local oSize
	Local oMasterPanel

	private nRadio := 0
	private oBord1 
	private cBord1 := Space(6)
	private oBord2 
	private cBord2 := Space(6)
	private oDatB1
	private cDatB1 := cTod(Space(8))
	private oDatB2
	private cDatB2 := cTod(Space(8))
	private oClie1
	private cClie1 := Space(6)
	private oClie2
	private cClie2 := Space(6)
	
	aAdd(aRadio,"Títulos")
	aAdd(aRadio,"Borderô")	

	DEFINE MSDIALOG oDlg1 TITLE STR0051 OF oMainWnd PIXEL FROM 050,010 TO 294,350

	//Defino o tamanho dos componentes através do método FwDefSize(), amarrando ao objeto oDlg
	oSize := FwDefSize():New(.F.,,,oDlg1)

	oSize:lLateral := .F.
	oSize:lProp := .T.

	oSize:AddObject("MASTER",100,100,.T.,.T.)

	oSize:Process()	

	//Instancio um painel "master" como container
	oMasterPanel := TPanel():New(oSize:GetDimension("MASTER","LININI"),oSize:GetDimension("MASTER","COLINI"),;
	,oDlg1,,,,,,oSize:GetDimension("MASTER","XSIZE"),oSize:GetDimension("MASTER","YSIZE"),.F.,.F.)

	oPanel1 := TPanel():New(0,0,'',oMasterPanel,, .T., .T.,, ,115,115,.f.,.f. )
	oPanel1:Align := CONTROL_ALIGN_ALLCLIENT

	@ 05,021 TO 101,158 PROMPT ""  PIXEL OF oPanel1 

	@ 6,027 TO 33,150 PROMPT STR0052  PIXEL OF oPanel1 ///  "Cancelar Baixas " 
	@ 12,73 RADIO oRadio VAR nRadio ITEMS aRadio[1],aRadio[2]  SIZE 080,209 PIXEL OF oPanel1 ON CHANGE Fa110Radio(nRadio)  

	@ 35,028 SAY STR0053     SIZE 555,10 PIXEL 						OF oPanel1  /// "Borderô De"
	@ 43,026 MSGET oBord1 VAR cBord1	   PICTURE  "@S6"  			OF oPanel1  SIZE 060,10 PIXEL  

	@ 35,95 SAY  STR0054     SIZE 555,10 PIXEL						OF oPanel1  /// "Borderô Até"  
	@ 43,93 MSGET oBord2 VAR cBord2		   PICTURE  "@S6"  			OF oPanel1  SIZE 060,10 PIXEL VALID cBord2 >= cBord1    

	@ 55,028 SAY  STR0055     SIZE 555,10 PIXEL 					OF oPanel1 ////"Dt. Baixa De"
	@ 63,026 MSGET oDatB1 VAR cDatB1	   PICTURE "@!"		        OF oPanel1 SIZE 060,10 PIXEL HASBUTTON

	@ 55,95 SAY  STR0056      SIZE 555,10 PIXEL 					OF oPanel1   ///"Dt. Baixa Ate" 
	@ 63,93 MSGET oDatB2 VAR cDatB2		  PICTURE "@!"		        OF oPanel1 SIZE 060,10 PIXEL HASBUTTON

	@ 75,028 SAY STR0057      SIZE 555,10 PIXEL 					OF oPanel1  /// "Cliente De" 
	@ 83,026 MSGET oClie1  VAR cClie1     F3 "CLI" 	PICTURE "@!"  	OF oPanel1  SIZE 060,10 PIXEL  HASBUTTON

	@ 75,95 SAY  STR0058      SIZE 555,10 PIXEL 					OF oPanel1   ///"Cliente Ate"  
	@ 83,93 MSGET oClie2 VAR cClie2		  F3 "CLI"  PICTURE "@!"	OF oPanel1  SIZE 060,10 PIXEL VALID cClie2 >= cClie1 HASBUTTON

	DEFINE SBUTTON FROM 105,103 TYPE 1 ACTION (nOpca := 1,If(Fa110ValOk(nRadio),oDlg1:End(),nOpca:=0))  ENABLE OF oPanel1
	DEFINE SBUTTON FROM 105,132 TYPE 2 ACTION oDlg1:End()  ENABLE OF oPanel1	

	oDatB1:disable()
	oDatB2:disable()
	oClie1:disable()
	oClie2:disable()
	oBord1:disable()
	oBord2:disable()

	If Empty(cClie2)
		cClie2 := Replicate("Z",Len(SE1->E1_CLIENTE))
		cBord2 := Replicate("Z",Len(SEA->EA_NUMBOR))
	Endif

	ACTIVATE MSDIALOG oDlg1  CENTERED

	If nOpca == 0
		Return()
	EndIf

	pergunte("FIN110",.F.)

	cFilAnt := cFilPos

	//Gestao
	//Selecao de filiais
	If mv_par10 == 1 

		//SA6 exclusivo nao permite a selecao de filiais
		If lSA6Access 
			Help( ,, 'SA6_COMPART',,;
			STR0033+CRLF+;		//"O compartilhamento do cadastro de Bancos (tabela SA6) não permite a seleção de filiais."
			STR0034+CRLF+;		//"O processo será feito considerando apenas titulos da filial corrente."
			" "+CRLF+;		
			STR0035+CRLF+;  	//"Compartilhamento da tabela SA6:"
			STR0036+If(cSA6Emp == "C",STR0039,STR0040)+CRLF+;		//"Empresa    : "###"Compartilhado"###"Exclusivo"
			STR0037+If(cSA6UNe == "C",STR0039,STR0040)+CRLF+;		//"Un. Negócio: "###"Compartilhado"###"Exclusivo"
			STR0038+If(cSA6Fil == "C",STR0039,STR0040)+CRLF+;  		//"Filial     : "###"Compartilhado"###"Exclusivo"
			" "+CRLF+;		
			STR0041+CRLF+;		//"(Para que esta mensagem deixe de ser apresentada, altere a pergunta (F12) "
			STR0042,1,0)		//"<Seleciona Filiais?> para Não.)"

			aSelFil := { cFilAnt }
			Return()						

		//SE1 totalmente compartilhado nao habilita tela de selecao de filiais
		ElseIf lSE1Access
			aSelFil := { cFilAnt }			
		ElseIf Len( aSelFil ) <= 0 
			aSelFil := AdmGetFil(.F.,.T.,"SE1")
			nLenFil := Len( aSelFil )		
			If nLenFil <= 0
				Return()
			EndIf	

		Endif
	Else
		aSelFil := { cFilAnt }	 
	EndIf

	FA110STIT(aSelFil)		

Return 	

/*/{Protheus.doc}FA110STIT
FWMarkBrowse contendo os Títulos a Receber, visando o cancelamento das suas baixas, a partir dos Filtros escolhidos
@author Alexandre Felicio
@since  26/06/2015
@version 12
///*/
Static Function FA110STIT(aSelFil)
	Local aArea		    := GetArea()
	Local cQuery 		:= ''
	Local aStruct		:= {}
	Local nX 			:= 1
	Local cTmpSE1Fil    := ''
	Local aDadosBx		:= {}
	Local aColumns		:= {}
	Local nOpcBrow		:= 0
	Local bOk := {|| Iif( F110OkCan( cArqTrab, @aDadosBx), ( nOpcBrow:=1, oMrkBrowse:Deactivate(), oDlgy:End() ), NIl ) } 
	Local oDlgy			:= Nil
	Local cAliasBX		:= GetNextAlias()
	Local oSize
	Local oMasterPanel
	Local aSize 		:= {}
	Local oFnt2S  		:= TFont():New("Arial      ",6,15,.T.,.T.,,,,,.F.) 	  //NEGRITO SUBLINHADO
	Local lOracle		:= "ORACLE"$Upper(TCGetDB())
	Local aFields 		:= {}	
	Local aLgpd			:= {}
	Local aNoAcess		:= {}
	Local aOfuscar		:= {}
	Local nTcSql		:= 0
	Private oMrkBrowse	:= FWMarkBrowse():New()
	
	//Cria estrutura e tabela tmp com os campos necessarios da SE1 e FK1
	Aadd(aStruct, {"FK1_OK","C",1,0})
	Aadd(aStruct, {"FK1_FILIAL" ,TamSx3("FK1_FILIAL")[3],TamSx3("FK1_FILIAL")[1],0})
	Aadd(aStruct, {"E1_PREFIXO" ,TamSx3("E1_PREFIXO")[3],TamSx3("E1_PREFIXO")[1],0})
	Aadd(aStruct, {"E1_NUM"		,TamSx3("E1_NUM")[3]	,TamSx3("E1_NUM")[1],0})
	Aadd(aStruct, {"E1_PARCELA"	,TamSx3("E1_PARCELA")[3],TamSx3("E1_PARCELA")[1],0})
	Aadd(aStruct, {"E1_TIPO"	,TamSx3("E1_TIPO")[3]	,TamSx3("E1_TIPO")[1],0})
	Aadd(aStruct, {"E1_CLIENTE"	,TamSx3("E1_CLIENTE")[3],TamSx3("E1_CLIENTE")[1],0})
	Aadd(aStruct, {"E1_LOJA"	,TamSx3("E1_LOJA")[3]	,TamSx3("E1_LOJA")[1],0})
	Aadd(aStruct, {"E1_NOMCLI"	,TamSx3("E1_NOMCLI")[3]	,TamSx3("E1_NOMCLI")[1],0})
	Aadd(aStruct, {"FK1_VALOR"	,TamSx3("FK1_VALOR")[3]	,TamSx3("FK1_VALOR")[1],TamSx3("FK1_VALOR")[2]})
	Aadd(aStruct, {"FK7_CHAVE"	,TamSx3("FK7_CHAVE")[3]	,TamSx3("FK7_CHAVE")[1],TamSx3("FK7_CHAVE")[2]})
	Aadd(aStruct, {"FK1_IDDOC"	,TamSx3("FK1_IDDOC")[3]	,TamSx3("FK1_IDDOC")[1],TamSx3("FK1_IDDOC")[2]})
	Aadd(aStruct, {"FK1_FILORI"	,TamSx3("FK1_FILORI")[3],TamSx3("FK1_FILORI")[1],TamSx3("FK1_FILORI")[2]})
	Aadd(aStruct, {"FK1_IDFK1"	,TamSx3("FK1_IDFK1")[3]	,TamSx3("FK1_IDFK1")[1],TamSx3("FK1_IDFK1")[2]})
	Aadd(aStruct, {"FK1_SEQ"	,TamSx3("FK1_SEQ")[3]	,TamSx3("FK1_SEQ")[1],TamSx3("FK1_SEQ")[2]})
	Aadd(aStruct, {"NUM_REG","N",10,0})

	If _oFINA1102 <> Nil
		//-- Limpa registros para nova execução
		nTcSql := TcSQLExec("DELETE FROM "+_oFINA1102:GetRealName())
		If nTcSql < 0
			//-- Se ocorrer algum problema refaz a temporaria
			_oFINA1102:Delete()
			_oFINA1102 := Nil
		Else 
			(cArqTrab)->(dbGoto(1))
		EndIf
	Endif
	If _oFINA1102 == Nil
		cArqTrab := GetNextAlias()
		_oFINA1102 := FWTemporaryTable():New( cArqTrab )  
		_oFINA1102:SetFields(aStruct) 
		_oFINA1102:AddIndex("1", {"FK1_FILIAL","E1_PREFIXO","E1_NUM","E1_PARCELA","E1_TIPO","FK1_SEQ"})
		_oFINA1102:Create() 
	EndIf
	cArqTrab:=_oFINA1102:GetAlias()

	//Filtra baixas realizadas nos Titulos a Receber
	cQuery := " Select Distinct FKA.FKA_IDPROC, FK1.FK1_FILIAL, SE1.E1_NUM, SE1.E1_PREFIXO, SE1.E1_PARCELA, FK1.FK1_IDDOC, FK1.FK1_FILORI, FK1.FK1_IDFK1, FK1.FK1_TPDOC, SE1.E1_NOMCLI, SE1.E1_TIPO,  "
	cQuery += " SE1.E1_CLIENTE, SE1.E1_LOJA, FK1.FK1_VALOR, FK7.FK7_CHAVE, FK1.FK1_SEQ, SE1.R_E_C_N_O_ NUM_REG "
	cQuery += " From " + RetSqlName("SE1") + " SE1 " 

	//-----------------------------	
	//Amarracao SE1 + FK7	
	cQuery += "		Inner Join  "+RetSqlName("FK7")+" FK7 "
	cQuery += "		On FK7.FK7_ALIAS='SE1' "
	If lOracle
		cQuery += "		And SE1.E1_FILIAL ||'|'|| SE1.E1_PREFIXO ||'|'|| SE1.E1_NUM ||'|'|| SE1.E1_PARCELA ||'|'||  SE1.E1_TIPO ||'|'||  SE1.E1_CLIENTE ||'|'||  SE1.E1_LOJA = FK7.FK7_CHAVE "
	Else
		cQuery += "		And CONCAT(SE1.E1_FILIAL,'|',SE1.E1_PREFIXO,'|',SE1.E1_NUM,'|',SE1.E1_PARCELA,'|',SE1.E1_TIPO,'|',SE1.E1_CLIENTE,'|',SE1.E1_LOJA) = FK7.FK7_CHAVE "
	EndIf
	cQuery += "		And   FK7.D_E_L_E_T_ = ' ' "

	//-----------------------------
	//Amarracao FK7 + FK1
	cQuery += "		Inner Join  "+RetSqlName("FK1")+" FK1 "
	cQuery += "		On FK1.FK1_IDDOC = FK7.FK7_IDDOC "
	If nRadio == 1///Opção Titulo  
		cQuery += "	And FK1.FK1_DATA >= '"+ DTOS(cDatB1) + "' And FK1.FK1_DATA <= '"+ DTOS(cDatB2) + "' "
	EndIf
	cQuery += "		And FK1.FK1_MOTBX NOT IN ('DSD','LIQ','CEC','PCC','IRF','ISS','FAT','CMP','STP','IMR','IPA') "
	cQuery += "		And FK1.FK1_TPDOC <> 'ES'    And FK1.D_E_L_E_T_ = ' ' "

	//-----------------------------
	//Amarracao FK1 + FKA
	cQuery += "		Inner JOIN "+RetSqlName("FKA")+" FKA "
	cQuery += "		On FKA.FKA_IDORIG = FK1.FK1_IDFK1 "
	cQuery += "		And FKA.D_E_L_E_T_ = ' ' "

	//-----------------------------
	// Filtro
	cQuery += " Where SE1.E1_FILIAL  " + GetRngFil( aSelFil, "SE1", .T., @cTmpSE1Fil ) 
	If nRadio == 1///Opção Titulo   	   	
		cQuery += "  And SE1.E1_CLIENTE >= '"+cClie1+"' "
		cQuery += "  And SE1.E1_CLIENTE <= '"+cClie2+"' "
	Else
		cQuery += "  And SE1.E1_NUMBOR  >= '"+cBord1+"' "
		cQuery += "  And SE1.E1_NUMBOR  <= '"+cBord2+"' "
	endif
	cQuery += "and (SE1.E1_VALOR <> SE1.E1_SALDO) "
	cQuery += "and   SE1.D_E_L_E_T_ = ' ' "
	cQuery += "And NOT EXISTS "
	cQuery += "		(SELECT A.FK1_IDDOC "
	cQuery += "		FROM "+RetSqlName("FK1")+" A "
	cQuery += "		WHERE A.FK1_FILIAL = FK1.FK1_FILIAL "
	cQuery += "		And A.FK1_IDDOC = FK1.FK1_IDDOC "
	cQuery += "		And A.FK1_SEQ = FK1.FK1_SEQ "
	cQuery += "		And A.FK1_TPDOC = 'ES' "
	cQuery += "		And A.D_E_L_E_T_ = ' ') "
	cQuery += "	Order by FK1.FK1_FILIAL, SE1.E1_NUM,SE1.E1_PREFIXO,SE1.E1_PARCELA,FK1.FK1_IDDOC "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasBX,.T.,.T.)

	If Eof()
		MsgAlert( STR0059 , STR0067 )
	Endif 
	
	While !(cAliasBX)->(Eof())
		RecLock(cArqTrab,.T.)
		(cArqTrab)->FK1_FILIAL := (cAliasBX)->FK1_FILIAL
		(cArqTrab)->E1_PREFIXO := (cAliasBX)->E1_PREFIXO
		(cArqTrab)->E1_NUM     := (cAliasBX)->E1_NUM
		(cArqTrab)->E1_PARCELA := (cAliasBX)->E1_PARCELA
		(cArqTrab)->E1_TIPO    := (cAliasBX)->E1_TIPO
		(cArqTrab)->E1_CLIENTE := (cAliasBX)->E1_CLIENTE
		(cArqTrab)->E1_LOJA    := (cAliasBX)->E1_LOJA
		(cArqTrab)->E1_NOMCLI  := (cAliasBX)->E1_NOMCLI
		(cArqTrab)->FK1_VALOR  := (cAliasBX)->FK1_VALOR
		(cArqTrab)->FK7_CHAVE  := (cAliasBX)->FK7_CHAVE
		(cArqTrab)->FK1_IDDOC  := (cAliasBX)->FK1_IDDOC
		(cArqTrab)->FK1_FILORI := (cAliasBX)->FK1_FILORI
		(cArqTrab)->FK1_IDFK1  := (cAliasBX)->FK1_IDFK1		
		(cArqTrab)->FK1_SEQ	   := (cAliasBX)->FK1_SEQ
		(cArqTrab)->NUM_REG	   := (cAliasBX)->NUM_REG			
		MsUnlock()	 	 	        

		(cAliasBX)->(dbSkip())  
	EndDo
	(cAliasBX)->(dbCloseArea())	

	//----------------MarkBrowse----------------------------------------------------
	For nX := 1 To Len(aStruct)
		If	aStruct[nX][1] $ "FK1_FILIAL|E1_PREFIXO|E1_NUM|E1_PARCELA|E1_TIPO|E1_CLIENTE|E1_LOJA|E1_NOMCLI|FK1_VALOR"
			AAdd(aColumns,FWBrwColumn():New())
			aColumns[Len(aColumns)]:SetData( &("{||"+aStruct[nX][1]+"}") )
			aColumns[Len(aColumns)]:SetTitle(Alltrim(RetTitle(aStruct[nX][1]))  ) 
			aColumns[Len(aColumns)]:SetSize(/*aStruct[nX][3]*/6) 
			aColumns[Len(aColumns)]:SetDecimal(aStruct[nX][4])
	
			IF aStruct[nX][1] == 'FK1_VALOR'
				aColumns[Len(aColumns)]:SetPicture(PesqPict("FK1",aStruct[nX][1])) 
				aColumns[Len(aColumns)]:SetAlign('RIGHT') 
			endif  
	
			Aadd(aFields,{RetTitle(aStruct[nX][1]),; //titulo
			aStruct[nX][1],; //campo
			aStruct[nX][2],; // tipo
			aStruct[nX][3],; // tamanho
			aStruct[nX][4],; // decimal
			PesqPict(IIf(aStruct[nX][1] $ "FK1_FILIAL|FK1_VALOR","FK1","SE1"),aStruct[nX][1]),,,,,,;// picture
			aStruct[nX][1]}) //ID
	
		EndIf 	
	
	Next nX 
	
	(cArqTrab)->(DbGoTop())
	
	If !(cArqTrab)->(Eof())
		//Tratamento para LGPD verifica os campos que devem ser ofuscados
		If __lLgpd
			AEval(aFields, {|x| AAdd( aLgpd, x[2])})
			aNoAcess := FwProtectedDataUtil():UsrNoAccessFieldsInList(aLgpd)
			AEval(aNoAcess, {|x| AAdd( aOfuscar, x:CFIELD)})
			oMrkBrowse:oBrowse:SetObfuscFields(aOfuscar)
		EndIf

		aSize := MSADVSIZE(.F.)	
	
		DEFINE MSDIALOG oDlgy TITLE STR0060 From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd PIXEL 

		//Defino o tamanho dos componentes através do método FwDefSize(), amarrando ao objeto oDlg
		oSize := FwDefSize():New(.T.,,,oDlgy)

		oSize:lLateral := .F.
		oSize:lProp := .T.

		oSize:AddObject("MASTER",100,100,.T.,.T.)

		oSize:Process()

		//Instancio um painel "master" como container
		oMasterPanel := TPanel():New(oSize:GetDimension("MASTER","LININI"),oSize:GetDimension("MASTER","COLINI"),;
								,oDlgy,,,,,,oSize:GetDimension("MASTER","XSIZE"),oSize:GetDimension("MASTER","YSIZE"),.F.,.F.)

		oPanel1 := TPanel():New(0,0,'',oMasterPanel,, .T., .T.,, ,115,115,.F.,.F. )
		oPanel1:Align := CONTROL_ALIGN_ALLCLIENT
		
		oMrkBrowse:SetFieldMark("FK1_OK")
		oMrkBrowse:SetOwner(oPanel1)
		oMrkBrowse:SetAlias(cArqTrab)	
		oMrkBrowse:bMark := {||FI110Mark(cArqTrab )}
		oMrkBrowse:bAllMark := {||FA110AllMk(oMrkBrowse,cArqTrab)}
		oMrkBrowse:SetDescription("")
		oMrkBrowse:SetFields(aFields)
		oMrkBrowse:SetTemporary(.T.)

		oMrkBrowse:SetMenuDef("")
		oMrkBrowse:DisableReport("")

		oMrkBrowse:Activate()

		oMrkBrowse:SetFontBrowse(oFnt2S)
		oMrkBrowse:SetLineHeight(25)
	
		ACTIVATE MSDIALOG oDlgy ON INIT EnchoiceBar( oDlgy,	{|| ( Eval(bOk) ) }, {|| nOpcBrow:=0,oDlgy:End()},, ) CENTER
	EndIf
	
	//-- Processa o cancelamento das baixas
	If Len(aDadosBx) > 0 .And. nOpcBrow==1
		Processa( {|| Fa110ExcA( aDadosBx )})	
		FwFreeArray(aDadosBx)		
	Endif		

	FwFreeArray(aStruct)
	FwFreeArray(aColumns)
	FwFreeArray(aFields)

	RestArea(aArea)
	
Return 


//---------------------------------------------------------------------
/*/{Protheus.doc}
Faz gravação no cmapo FK1_OK com a marcação.
@author Mauricio Pequim Jr
@since  02/03/2018
@version 12
/*/
//---------------------------------------------------------------------
Function FI110Mark(cAliasTRB)

Local lRet		:= .T.

SE1->(dbGoto((cAliasTRB)->NUM_REG))

If SE1->(MsRLock()) .AND. (cAliasTRB)->(MsRLock())
	// destravamos o mesmo para uso de outro terminal
	If Empty( (cAliasTRB)->FK1_OK )
		(cAliasTRB)->(MsUnlock())
		SE1->(MsUnlock())
	Endif
Else
	lRet := .F.
Endif

Return lRet


//---------------------------------------------------------------------
/*/{Protheus.doc}FA110AllMk
Faz gravação no campo FK1_OK com a marcação.
@author Mauricio Pequim Jr
@since  02/03/2018
@version 12
/*/
//---------------------------------------------------------------------
Static Function FA110AllMk(oMrkBrowse,cArqTrab)

Local nReg 	 := (cArqTrab)->(Recno())

Default cMarca := oMrkBrowse:cMark

dbSelectArea(cArqTrab)
(cArqTrab)->(DbGoTop())

While !(cArqTrab)->(Eof())
	SE1->(dbGoto((cArqTrab)->NUM_REG))
	If SE1->(MsRLock()) .AND. (cArqTrab)->(MsRLock())
		IF	(cArqTrab)->FK1_OK == cMarca
			(cArqTrab)->FK1_OK := "  "
			(cArqTrab)->(MsUnlock())
			SE1->(MsUnlock())
		Else
			(cArqTrab)->FK1_OK := cMarca
		Endif
	Endif
	(cArqTrab)->(dbSkip())
Enddo

(cArqTrab)->(dbGoto(nReg))

oMrkBrowse:oBrowse:Refresh(.t.)

Return .T.

//--------------------------------------------------------------------------------------------------------------
/*/{Protheus.doc}Fa110ValOk
Validacao dos Gets - Tela de Filtros para selecao dos dados - Cancelamento Automatico Baixas Titulo a Receber
@author Alexandre Felicio
@since  26/06/2015
@version 12
/*/
//--------------------------------------------------------------------------------------------------------------
Static Function Fa110ValOk(lBxCnab)
	Local lRet := .T.

	// Valida todos os gets
	Do Case
		Case !(cDatB2 >= cDatB1)
		lRet := .F.
		Case Empty(cClie2)
		lRet := .F.	
		Case !(cClie2 >= cClie1)
		lRet := .F.
		Case !(cBord2 >= cBord1)
		lRet := .F.	
	EndCase

	If Empty(cClie2)
		MsgAlert( STR0062 , STR0067 ) ////"Cliente Até não está preenchido"
		lRet := .F.	    
	endif

	If Empty(cBord2)
		MsgAlert( STR0063 , STR0067 )   //"Borderô Até não está preenchido"
		lRet := .F.	    
	endif

	If Empty(nRadio)
		MsgAlert( STR0064 , STR0067 )   ///"Não escolhido o Tipo de Cancelamento: Título ou Borderô" 
		lRet := .F.	 
	endif 

Return lRet

/*/{Protheus.doc}Fa110Radio
Validacao do RadioButtom - Tela de Filtros para selecao dos dados - Cancelamento Automatico Baixas Titulo a Receber
@author Alexandre Felicio
@since  26/06/2015
@version 12
/*/
Static Function Fa110Radio(nRadio)

	cBord1 := Space(TamSX3("EA_NUMBOR")[1])
	cBord2 := Replicate("Z",TamSX3("EA_NUMBOR")[1] )

	If nRadio == 1///Opção TITULO
		oDatB1:enable()
		oDatB2:enable()
		oClie1:enable()
		oClie2:enable()
		oBord1:disable()
		oBord2:disable()
		cDatB1 := dDataBase
		cDatB2 := dDataBase
		cClie1 := Space(TamSX3("E1_CLIENTE")[1])
		cClie2 := Replicate("Z",TamSX3("E1_CLIENTE")[1] )
		oDatB1:SetFocus()    
	Else//Opção BORDERO
		oDatB1:disable()
		oDatB2:disable()
		oClie1:disable()
		oClie2:disable()
		oBord1:enable()
		oBord2:enable()

		cDatB1 := CtoD("01/01/1980","ddmmyy")
		cDatB2 := CtoD("31/12/2099","ddmmyy")
		cClie1 := Space(TamSX3("E1_CLIENTE")[1])
		cClie2 := Replicate("Z",TamSX3("E1_CLIENTE")[1])	
		oBord1:SetFocus()
	EndIf

Return


/*/{Protheus.doc}Fa110ExcA
Rotina Automática(ExecAuto) para Cancelamento de Baixas de Titulo a Receber
@author Alexandre Felicio
@since  26/06/2015
@version 12
/*/
Static Function Fa110ExcA(aDadosBx)  
	Local lRet              :=  .T.
	Local aVetor            := {}
	Local cFilAtu           := cFilAnt
	Local nE1FILI 			:= 0
	Local nE1PREF			:= 0
	Local nE1NUM 			:= 0
	Local nE1PARC			:= 0
	Local nE1CLIE			:= 0
	Local nE1LOJA			:= 0
	Local nE1TIPO 			:= 0     
	Local bX                := 0
	Local cChaveTit 		:= ""
	Local _cFK1_SEQ			:= ""
	Local _cIdOrig  		:= ""
	Local lGestao			:= FWSizeFilial() > 2	// Indica se usa Gestao Corporativa
	Local lSE1Comp			:= Iif( lGestao, FWModeAccess("SE1",1) == "C", FWModeAccess("SE1",3) == "C")
	Local lFK1Comp			:= Iif( lGestao, FWModeAccess("FK1",1) == "C", FWModeAccess("FK1",3) == "C")
	Local cFK1Emp			:= FWModeAccess("FK1",1)
	Local cFK1UNe			:= FWModeAccess("FK1",2)
	Local cFK1Fil			:= FWModeAccess("FK1",3)

	Private lMsErroAuto     := .F.
	Private lMsHelpAuto     := .T.
	Private lMostraErro     := .F.

	BEGIN TRANSACTION

	nE1FILI := TamSX3("E1_FILIAL")[1]
	nE1PREF := TamSX3("E1_PREFIXO")[1]
	nE1NUM  := TamSX3("E1_NUM")[1]
	nE1PARC := TamSX3("E1_PARCELA")[1]
	nE1CLIE := TamSX3("E1_CLIENTE")[1]
	nE1LOJA := TamSX3("E1_LOJA")[1]
	nE1TIPO := TamSX3("E1_TIPO")[1]
	dbSelectArea('SE1')
	SE1->(dbSetOrder(2)) //E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO

	dbSelectArea('SE5')
	SE5->(dbSetOrder(21)) //E5_FILIAL+E5_IDORIG+E5_TIPODOC
		
	nLenBx:=Len( aDadosBx )
	ProcRegua( nLenBx )
	For bX := 1 to nLenBx

		cChaveTit := Substr( aDadosBx[bX,1], 1, nE1FILI ) //Filial
		cChaveTit += Substr( aDadosBx[bX,1], (nE1FILI+1+nE1PREF+1+nE1NUM+1+nE1PARC+1+nE1TIPO+2), nE1CLIE ) //Cliente
		cChaveTit += Substr( aDadosBx[bX,1], (nE1FILI+1+nE1PREF+1+nE1NUM+1+nE1PARC+1+nE1TIPO+1+nE1CLIE+2), nE1LOJA ) //Loja
		cChaveTit += Substr( aDadosBx[bX,1], (nE1FILI+2), nE1PREF ) //Prefixo
		cChaveTit += Substr( aDadosBx[bX,1], (nE1FILI+1+nE1PREF+2), nE1NUM ) //Número
		cChaveTit += Substr( aDadosBx[bX,1], (nE1FILI+1+nE1PREF+1+nE1NUM+2), nE1PARC ) //Parcela
		cChaveTit += Substr( aDadosBx[bX,1], (nE1FILI+1+nE1PREF+1+nE1NUM+1+nE1PARC+2), nE1TIPO ) //Tipo

		/*
		aDadosBx[1] -> (cArqTrab)->FK7_CHAVE 
		aDadosBx[2] -> (cArqTrab)->FK1_IDDOC
		aDadosBx[3]	-> (cArqTrab)->FK1_SEQ
		aDadosBx[4]	-> (cArqTrab)->FK1_FILORI
		aDadosBx[5] -> (cArqTrab)->FK1_IDFK1
		aDadosBx[6] -> (cArqTrab)->FK1_FILIAL
		*/		
		_cFK1_SEQ := aDadosBx[bX,3]
		_cIdOrig  := aDadosBx[bX,5]

		IncProc( STR0074 + Str(bX,4)+'/'+Alltrim(Str(nLenBx))+CRLF+cChaveTit) //"Cancelando a baixa do título " 
		SE1->(dbSetOrder(2)) 
		If SE1->( MsSeek( cChaveTit ) )
			aVetor := {}		
			AADD(aVetor,{"E1_FILIAL" , SE1->E1_FILIAL , Nil})
			AADD(aVetor,{"E1_PREFIXO", SE1->E1_PREFIXO, Nil})
			AADD(aVetor,{"E1_NUM"    , SE1->E1_NUM    , Nil})
			AADD(aVetor,{"E1_PARCELA", SE1->E1_PARCELA, Nil})
			AADD(aVetor,{"E1_TIPO"   , SE1->E1_TIPO   , Nil})
			AADD(aVetor,{"E1_CLIENTE", SE1->E1_CLIENTE, Nil})
			AADD(aVetor,{"E1_LOJA"   , SE1->E1_LOJA   , Nil})
			AADD(aVetor,{"AUTSEQ"    , _cFK1_SEQ      , Nil})

			If !lSE1Comp//-- Exclusivo
				cFilAnt := aDadosBx[bX,4]
			Else				
				If "C"$(cFK1Emp+cFK1UNe+cFK1Fil)//-- Filail da baixa não é totalmente exclusiva
					cFilAnt:=Iif(lFK1Comp,aDadosBx[bX,4],cFilAtu)//-- Para SE5/FK's totalmente compartilhada utiliza FILORIG, senao pega filial do Login
				Else
					cFilAnt	:= aDadosBx[bX,6]//-- Filial onde ocorreu a baixa (SE5/FK's Exclusivas)
				EndIf				
			EndIf

			//-- Posiciona SE5 a partir do FK1_IDFK1
			lMsErroAuto:=.F.
			SE5->(dbSetOrder(21))
			If SE5->(DbSeek( xFilial("SE5",cFilAnt) + _cIdOrig ) ) .And. AllTrim( SE5->E5_TABORI ) == "FK1"
				// Contabilização do Cancelamento segue parametrização do FINA070 (https://tdn.totvs.com/pages/viewpage.action?pageId=312167132)
				MSExecAuto({|x,y| Fina070(x,y)},aVetor,5)
			Else
				lRet:= .F.
			EndIf

			//Em caso de erro na baixa desarma a transação
			If lMsErroAuto 
				lRet:= .F.
				If !IsBlind()
					MOSTRAERRO() 
				EndIf
			Endif
		Endif

	Next bX

END TRANSACTION
cFilAnt := cFilAtu // Restaura cFilAnt para Filial logada

// Devolve o pergunte da rotina fina110
Pergunte("FIN110",.F.)
If lRet
	MsgInfo( STR0065 , STR0066  )  ///"Cancelamento de Baixas de Títulos a Receber foi realizado com sucesso."    ///"Cancelamento de Baixas a Receber"
EndIF

Return lRet

/*/{Protheus.doc}F110OkCan
Função chamada na confirmação do cancelamento da baixa automatica

@author Pedro Alencar
@since 26/07/2017
@version 12.1.17
/*/
Static Function F110OkCan( cArqTrab As Character, aDadosBx As Array) As Logical
Local lRet As Logical 
Local nRecNo As Numeric 
		
	lRet := .T.
	nRecNo := 0

	dbSelectArea(cArqTrab)
	nRecno := (cArqTrab)->(RecNo())
	(cArqTrab)->(DbGoTop())
	While !(cArqTrab)->(Eof())
		If !Empty((cArqTrab)->FK1_OK)

			aAdd(aDadosBx,{ (cArqTrab)->FK7_CHAVE ,;
			 				(cArqTrab)->FK1_IDDOC,;
							(cArqTrab)->FK1_SEQ,;
							(cArqTrab)->FK1_FILORI,;
							(cArqTrab)->FK1_IDFK1,;
							(cArqTrab)->FK1_FILIAL})
		EndIf
		(cArqTrab)->(DbSkip())
	End

	lRet := If (Len(aDadosBx) > 0, .T., .F.) 
	(cArqTrab)->(DbGoTo(nRecno))

Return lRet

/*/{Protheus.doc} F110VldImp()
Função para realizar o cálculo de imposto através do motor de retenções

@param nVlReceb, Valore recebido para cálculo do motor. 
@param dDataRef, Data da baixa
@param lPccBxCr, Indica se o imposto do tipo PCC será retido na emissão ou baixa
@param lIrPjBxCr,Indica se o imposto do tipo IRF será retido na emissão ou baixa

@author Jose.Gavetti
@since 22/01/2018
@version 12
/*/
Static Function F110VldImp(nVlReceb AS Numeric, dDataRef As Date , lPccBxCr As Logical, lIrPjBxCr As Logical, cChaveFK7 As Character)
Local nZ        	As Numeric
Local cChaveAux 	As Character
Local cIdTit 	  	As Character
Local aBaseImp  	As Array
Local lIrfBxMR  	As Logical
Local lPccBxMR		As Logical
Local lPCCMR 		As Logical
Local lIrfMR 		As Logical
Local lIssMR 		As Logical
Local lRetImp 		As Logical

Default nVlReceb 	:= 0
Default dDataRef 	:= dBaixa
Default lPccBxCr 	:= .F.
Default lIrPjBxCr	:= .F.

lPCCMR 		:= __lPCCMR
lIrfMR 		:= __lIrfMR
lIssMR 		:= __lIssMR
lRetImp 	:= .T.	
lPccBxMR 	:= .F.
lIrfBxMR 	:= .F.
cChaveAux 	:= ""
cIdTit 		:= ""
aBaseImp	:= {}

If !Empty(SE1->E1_NUMBOR)
	lRetImp := VLDBOR(SE1->E1_NUMBOR,"R")
EndIf

If lRetImp
	cChaveAux := FWxFilial( "SE1", SE1->E1_FILORIG ) + "|" + SE1->E1_PREFIXO + "|" + SE1->E1_NUM + "|" + SE1->E1_PARCELA + "|" + SE1->E1_TIPO + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA
	cIdTit	  := cChaveFK7

	// Subistituição da validação do parãmetro MV_GLOSA para base diferenciada.
	If __lGlosIrf .And. (SE1->E1_VALOR == SE1->E1_SALDO)
		Aadd(aBaseImp, {"IRF",SE1->E1_VALOR})
	Endif
	If __lGlosPis .And. (SE1->E1_VALOR == SE1->E1_SALDO)
		Aadd(aBaseImp, {"PIS",SE1->E1_VALOR})
	Endif
	If __lGlosCof .And. (SE1->E1_VALOR == SE1->E1_SALDO)
		Aadd(aBaseImp, {"COF",SE1->E1_VALOR})	
	Endif
	If __lGlosCsl .And. (SE1->E1_VALOR == SE1->E1_SALDO)
		Aadd(aBaseImp, {"CSL",SE1->E1_VALOR})	
	Endif
	If __lGlosIss .And. (SE1->E1_VALOR == SE1->E1_SALDO)
		Aadd(aBaseImp, {"ISS",SE1->E1_VALOR})
	Endif
	If __lGlosIns .And. (SE1->E1_VALOR == SE1->E1_SALDO)
		Aadd(aBaseImp, {"INSS",SE1->E1_VALOR})				
	Endif	
	If __lGlosMr .And. (SE1->E1_VALOR == SE1->E1_SALDO)
		Aadd(aBaseImp, {"",SE1->E1_VALOR})				
	Endif	

	/*-------------------------------------------
	Estrutura da __aImpos
	[1] = Codigo do tipo de imposto (FKM_CODIGO)
	[2] = Base do imposto
	[3] = Valor calculado do imposto
	[4] = Base de retenção do imposto
	[5] = Valor a reter do imposto
	[6] = IDRET FK4
	[7] = Array contendo os Recnos FK3 das pendências de retenção	
	[8] = Tipo do Imposto (SX5 - 0C )
	[9] = Fato gerador ( 1=Competência; 2=Caixa )
	[10] = Natureza do imposto
	[11] = Tabela onde foi gerado o imposto
	[12] = Recno do titulo de imposto gerado
	[13] = Ação aplicada no valor da nota na emissão(1 = subtrai, 2 = soma, 3 = sem ação) 
	[14] = Carteira de movimento na emissão (1 = Pagar, 2 = Receber)
	[15] = Tipo de movimento na emissão (1 = Abtimento, 2 = Provisão, 3 = Retenção, 4 = Não Gerar)
	[16] = Ação aplicada no valor da nota na baixa(1 = subtrai, 2 = soma, 3 = sem ação)
	[17] = Carteira de movimento na baixa (1 = Pagar, 2 = Receber)
	[18] = Tipo de movimento na baixa (1 = Abtimento, 2 = Provisão, 3 = Retenção, 4 = Não Gerar) 
	[19] = Ação sobre títulos de antecipação pagamento/recebimento: 1 = Retém, 2 = Provisiona, 3 = sem ação
	--------------------------------------------*/
	//aRetInc		:= FinBaseMR(SE1->E1_SALDO, .F., SE1->E1_FILIAL, SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_CLIENTE, SE1->E1_LOJA, lPCCMR, lIrfMR, .f., lIssMR, .F. /*_lCidMR*/, .F. /*_lSesMR*/ )
	//nBaseImp	:= aRetInc[1]
	nBaseImp	:= SE1->E1_SALDO

	//Calculo Motor de retencoes.
	__aImpos := FINCalImp(  "2", SE1->E1_NATUREZ, SE1->E1_CLIENTE, SE1->E1_LOJA, cFilAnt, nBaseImp, dBaixa, .T.,aBaseImp, SE1->E1_TIPO,cChaveAux,cIdTit,{} )	 

	//limpas os campos de memória
	nPis := 0 
	nCofins := 0
	nCsll := 0
	nIrrf := 0
	nlImpMR := 0

	For nZ := 1 To Len( __aImpos )
		Do Case
			Case __aImpos[nZ,8] == "PIS"
			nPis += __aImpos[nZ,5]			
			__lPccMR := .T.
			lPccBxMR := ( __aImpos[nZ,9] == "2" )
			Case __aImpos[nZ,8] == "COF"
			nCofins += __aImpos[nZ,5]
			__lPccMR := .T.  		
			lPccBxMR := ( __aImpos[nZ,9] == "2" )
			Case __aImpos[nZ,8] == "CSL"  
			nCsll += __aImpos[nZ,5]
			__lPccMR := .T.  
			lPccBxMR := ( __aImpos[nZ,9] == "2" )
			Case __aImpos[nZ,8] == "IRF"
			nIrrf += __aImpos[nZ,5]
			__lIrfMR := .T.
			lIrfBxMR := ( __aImpos[nZ,9] == "2" )
			OtherWise
			nlImpMR += __aImpos[nZ,5]
			__lImpMR := .T.
		EndCase
	Next nZ

	__nTotImp := (nPis + nCofins + nCsll + nIrrf + nlImpMR)
EndIf
Return Nil

/*/{Protheus.doc} F110VerImp()
Verifica quais impostos a serem calculados (Natureza x Cliente)

@param cCart, Carteira do prodessamento do Título(Receber)
@param cFilOrig, Filial de Origem do Título.
@param cClifor, Código do Cliente utilizado no título.
@param cLoja, Numero da Loja do cliente utilizado no título.
@param lBaixa, Indica se o cálculo dos impostos pelo motor de retenção será retido na baixa.
@param lPccBxCr, Indica se o imposto do tipo PCC será retido na emissão ou baixa
@param lIrPjBxCr,Indica se o imposto do tipo IRF será retido na emissão ou baixa
@param lCalcIssBx,Indica se o imposto do tipo IRF será retido na emissão ou baixa
@param lIrfMR, Indica se o imposto do tipo IRF será calculado pelo Motor de Retenções
@param lPccMR, Indica se o imposto do tipo PCC será calculado pelo Motor de Retenções


@author Jose.Gavetti
@since 22/01/2018
@version 12

@return aImpConf , Array com a configuração dos impostos a serem calculados pelo Motor de retenção.
/*/
//-------------------------------------------------------------------
Static Function F110VerImp(cCart As Character,cFilOrig As Character,cCliFor As Character,cLoja As Character, lBaixa As Logical,lIrPjBxCr As Logical,lPccBxCr As Logical,lCalcIssBx As Logical,;
lIrfMR As Logical , lPccMR As Logical) As Array

Local nY As Numeric
Local aImpConf As Array

nY := 0
aImpConf := {}

//Parâmetros da função
Default cCart := ""
Default cFilOrig := ""
Default cCliFor := ""
Default cLoja := ""
Default lBaixa := .F.
Default lIrPjBxCr	:= .F.
Default lPccBxCr	:= .F.
Default lCalcIssBx	:= .F.
Default lIrfMR := .F.
Default lPccMR := .F.

//Limpa as variáveis estáticas utilizadas para o motor de retenções
LimpaVarMR()

aImpConf := FinImpConf(cCart, cFilOrig, cCliFor, cLoja, SE1->E1_NATUREZ)

For nY := 1 To Len(aImpConf)
	Do Case 
		Case aImpConf[nY,1] $ "PIS|COF|CSL"
		__lPccMR := .T.
		lPccBxCr := .T.
		lPccMR   := .T.
		If aImpConf[nY,7] == "1" // Subistituição da validação do parãmetro MV_GLOSA
			If aImpConf[nY,1] $ "PIS"
				__lGlosPis := .T.
			ElseIf aImpConf[nY,1] $ "COF"
				__lGlosCof := .T.
			Elseif aImpConf[nY,1] $ "CSL"
				__lGlosCsl := .T.
			Endif		
		Endif	
		Case aImpConf[nY,1] == "IRF"
		__lIrfMR 	:= .T.
		lIrPjBxCr 	:= .T.
		lIrfMR 	:= .T.
		If aImpConf[nY,7] == "1" // Subistituição da validação do parãmetro MV_GLOSA
			__lGlosIrf := .T.
		Endif
		OtherWise	
		__lImpMR := .T.
		If aImpConf[nY,7] == "1" // Subistituição da validação do parãmetro MV_GLOSA
			__lGlosMr := .T.
		Endif
	EndCase	
Next nY

If __lGlosPis .or. __lGlosCof .or. __lGlosCsl .or. __lGlosIrf .or. __lGlosIss .or. __lGlosIns .or. __lGlosMr
	lGlosaMr := .T.
Endif

Return aImpConf

	/*/{Protheus.doc} LimpaVarMR()
	Função para limpar as variáveis estáticas utilizadas para o motor de retenções

	@author Jose.Gavetti
	@since 22/01/2018
	@version 12
	/*/
Static Function LimpaVarMR( )

	__lPccMR := .F.
	__lIrfMR := .F.
	__lIssMR := .F.
	__lInsMR := .F.
	__lImpMR := .F.
	aSize ( __aImpos, 0 )
	__aImpos := {}

Return Nil


/*/{Protheus.doc} FA110Data()
Valida Data no FINA110

@author rafael.rondon
@since 24/09/2020
@version 12
/*/
Static Function FA110Data() As Logical

Local lRet	As Logical

lRet	:= .T.

If (dBaixa < SE1->E1_EMISSAO .OR. dBaixa > dDataBase) .and. !__lAntCred
	Help( " ", 1, "DATAERR" )
	lRet := .F.
EndIf

Return lRet


/*/{Protheus.doc} FA110TxMoed()
Retorna taxa da moeda do titulo posicionado

@author rafael.rondon
@since 24/09/2020
@version 12
/*/
Static Function FA110TxMoed( cAliasSE1 As Character) As Numeric

Local nTxMoeda	 As Numeric

nTxMoeda := 0

Default cAliasSE1 := "SE1"

If (cAliasSE1)->E1_MOEDA > 1
	If (cAliasSE1)->E1_TXMOEDA > 0 
		nTxMoeda := (cAliasSE1)->E1_TXMOEDA
	Else
		nTxMoeda := RecMoeda(dbaixa,(cAliasSE1)->E1_MOEDA)
	EndIf
Else
	nTxMoeda := 1
EndIf

Return nTxMoeda


/*/{Protheus.doc} FA110Valores()
Alimenta variáveis Private com valroes referentes ao título

nJuros
nVA
nMulta
nCM1
nProRata
nDescont

@return aValores[1] = nAbat
		aValores[2] = nDescont
		aValores[5] = nJuros
		aValores[6] = nCM1	
		aValores[7] = nProRata
		aValores[8] = nMulta
		aValores[9] = nVA	
@author rafael.rondon
@since 24/09/2020
@version 12
/*/
Static Function FA110Valores() As Array

Local nTxMoeda 	As Numeric
Local aValores 	As Array
Local nAbat 	As Numeric
Local nCasDec 	As Numeric

nCasDec     := TamSx3("E2_TXMOEDA")[2]
nTxMoeda 	:= FA110TxMoed()
aValores	:= {}
nAbat		:= 0

nJuros   := 0
nVA      := 0
nMulta	 := 0
nCM1 	 := 0
nProRata := 0
nDescont := 0

If __lSeekVA .AND. ( __cTempVA )->( DbSeek( SE1->(	E1_FILIAL	+ '|' + ;
													E1_PREFIXO	+ '|' + ;
													E1_NUM		+ '|' + ;
													E1_PARCELA	+ '|' + ;
													E1_TIPO		+ '|' + ;
													E1_CLIENTE	+ '|' + ;
													E1_LOJA		) ) )				
	nVa	:= FValAcess(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA,SE1->E1_NATUREZ, /*lBaixados*/,/*cCodVa*/,"R",dBaixa,/*aValAces*/,SE1->E1_MOEDA,nMoedaBco,nTxMoeda)
EndIf
		
nDescont := FaDescFin("SE1",dBaixa,SE1->E1_SALDO,1)

fa070Juros(nMoedaBco)

//Calcular Multa - nMulta é calculado nessa chamada.
 
faLojxRMul(dDtCredito,nTxMoeda,nMoedaBco)

If nCM1 > 0
	nJuros -= nCM1
Else
	nDescont += nCM1
EndIf

If nProRata > 0
	nJuros -= nProRata
Else
	nDescont += nProRata
EndIf

If __lfTotAb
	nAbat := FinTotAb("SE1", SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA), SE1->E1_FILORIG, E1_MOEDA, dDataBase, nCasDec, @__oObjAb, MVABATIM, "|")
Else	
	nAbat := SomaAbat(E1_PREFIXO,E1_NUM,E1_PARCELA,"R",E1_MOEDA,dDataBase,E1_CLIENTE,E1_LOJA,XFILIAL('SE1',E1_FILORIG))
Endif

AADD( aValores , nAbat			)
AADD( aValores , nDescont		)
AADD( aValores , nJuros			)
AADD( aValores , nCM1			)
AADD( aValores , nProRata		)
AADD( aValores , nMulta			)
AADD( aValores , nVA			)

Return aValores


//-------------------------------------------------------------------
/*/{Protheus.doc} FR110Log
Função para logar os erros de execução do TcSQLExec.

@author rafael.rondon
@since 27/04/20
/*/
//-------------------------------------------------------------------
Static Function FR110Log(cLogText As Character, cSQLControl As Character) 

Local cFunction As Character 
Local cLogFile  As Character 
Local cLogHead  As Character 
Local cPath     As Character
Local cProcLine As Character
Local cThreadID As Character 
Local lContinua As Logical 
Local nHandle   As Numeric 

lContinua := .T. 
cPath := "\SYSTEM\"
cLogFile := cPath + "FR110Log"+Alltrim(cEmpAnt+cFilant)+"_"+Dtos(Date())+".log"

If !File(cLogFile)
    nHandle := FCreate( cLogFile ) 
    If nHandle == -1 
        lContinua := .F. 
    Else 
        cLogHead:= DToC(date()) + CRLF
        FSeek ( nHandle, 0, 2 )	// Posiciona no final do arquivo.
        FWrite( nHandle, cLogHead, Len(cLogHead) )
        FClose(nHandle)

    EndIf 
EndIf 

If lContinua

    cThreadID 	:= AllTrim(Str(ThreadID())) 	//Retorna o ID (número de identificação) da thread em que a chamada da função foi realizada
    cProcLine 	:= AllTrim(Str(ProcLine(1))) 	//Retorna o número da linha do código fonte executado que fez a chamada da geração do LOG
    cFunction 	:= ProcName(1) 					//Retorna o nome da funcao em execução que fez a chamada da geração do LOG

    cFunction := " Function " + cFunction
    
    cLogText := Time() + " " + "["+cThreadID+"]" + cFunction + " Line " + cProcLine + CRLF +;
                Space(5) +  "[" + cSQLControl + "] " + cLogText + CRLF

    // Grava o texto no Arquivo de LOG
    nHandle := FOpen(cLogFile, 2 )
    FSeek ( nHandle, 0, 2 )	// Posiciona no final do arquivo.
    FWrite( nHandle, cLogText, Len(cLogText) )
    FClose( nHandle )
EndIf 

Return


//--------------------------------------------------------------------------
/*/{Protheus.doc} fDefLancto
Tratamento para os cenários de compartilhamento de tabelas do CTB e FIN

@author fabio.zanchim
@since 21/01/22
/*/
//--------------------------------------------------------------------------						
Static Function fDefLancto(	lSE5Access 	As Logical,;
							lSE1Access 	As Logical,;							
							cFilLancto 	As Character,;
							cFilLogin 	As Character) As Character

Local _cFilLcto as Character
_cFilLcto:=""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ -- SE1 e SE5 Compartilhada - Filial do Lancto conforme FilOrig do titulo             ³
//³ -- SE1 Compartilhada e SE5 Exclusiva - Filial do Lancto conforme filial logada       ³
//³ -- Todas Exclusivas - Filial do titulo                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

_cFilLcto := Iif( (lSE5Access .And. lSE1Access) , cFilLancto , cFilLogin)

If !lSE5Access .And. !lSE1Access //.And. !lCT2Access
	_cFilLcto:=cFilLancto
EndIF

Return(_cFilLcto) 


//---------------------------------------------------------------------------
/*/{Protheus.doc} A110IniVar
Inicia variaveis staticas utilizadas no fonte               

@type Function
@author Fabio Zanchim
@since 07/06/2022
@version 12   
/*/
//---------------------------------------------------------------------------
Static Function A110IniVar()

If __nTamBco == Nil
	__nTamBco := TamSX3("A6_COD")[1]
EndIf

If __nTamAge == Nil 
	__nTamAge := TamSX3("A6_AGENCIA")[1]
EndIf

If __nTamCC == Nil
	__nTamCC := TamSX3("A6_NUMCON")[1]
EndIf

If __lPIXCanc == NIL
	__lPIXCanc:= FindFunction("PIXCancel")
EndIf

If __aMotBx == NIL
	__aMotBx := ReadMotBx()
EndIF

If __JGrvBaixa == NIL
	__JGrvBaixa:= FindFunction("JGrvBaixa")
EndIF

If __cPict == Nil 
	__cPict := PesqPict("SE1","E1_VALOR")
EndIF

If __lIsBRA == NIL
	__lIsBRA := (cPaisLoc == "BRA")
EndIF

If __lHasEAI == Nil
	__lHasEAI := FWHasEAI("FINA070",.T.,,.T.)
EndIf

If nESaldo1 == Nil
	nESaldo3	:= TamSX3("E1_SALDO")[3]
	nESaldo2	:= TamSX3("E1_SALDO")[2]
	nESaldo1	:= TamSX3("E1_SALDO")[1]
EndIF

If __lHasLoja == Nil
	dbSelectArea('SL1')
	__lHasLoja:=!Eof()
EndIf

If __lHasSerasa == Nil
	dbSelectArea('FW8')
	__lHasSerasa:=!Eof()
	dbSelectArea( "SE1" )
EndIf

Return

//---------------------------------------------------------------------------
/*/{Protheus.doc} Fa110UpdSa1
Atualiza saldo do cliente ao realizar baixa automática (MV_NOTSA1 = True).

@type Function
@author Fabio Zanchim
@since 23/06/2022
@version 12   
/*/
//---------------------------------------------------------------------------
Static Function Fa110UpdSa1(aNroPag As Array)

Local nI 	  As Numeric
Local cX2Name As Character
Local cUpdate As Character

nI		:= 0
cX2Name	:= RetSqlName('SA1')

For nI:=1 to Len(aNroPag)
	cUpdate	:= "Update "+cX2Name+" Set "	
	cUpdate +=" A1_NROPAG = A1_NROPAG + "+Str(aNroPag[nI,4])
	cUpdate +=" Where A1_FILIAL='"+aNroPag[nI,1]+"'"	
	cUpdate +=" And A1_COD ='"+aNroPag[nI,2]+"'"	
	cUpdate +=" And A1_LOJA='"+aNroPag[nI,3]+"'"		
	cUpdate +=" And D_E_L_E_T_ = ' '"

	 TcSqlExec(cUpdate)
Next nI
		
Return

//---------------------------------------------------------------------------
/*/{Protheus.doc} F110Baixas
Pega registros de baixa gerados

@type Function
@author Fabio Zanchim
@since 23/06/2022
@version 12   
/*/
//---------------------------------------------------------------------------
Static Function F110Baixas(aBaixas as Array, cIdOrig As Character)

Local aBindParam:={ xFilial("SE5") , cIdOrig }

If Empty(__cQryBx)
	__cTmpBx := GetNextAlias()
	__cQryBx := "SELECT E5_MOTBX,E5_SEQ, R_E_C_N_O_ AS REC FROM " + RetSQLName("SE5") 
	__cQryBx += " WHERE E5_FILIAL = ?"    //#01
	__cQryBx += " AND E5_IDORIG = ?"      //#02
	__cQryBx += " AND E5_TIPODOC IN ('CM','C2','CX','DC','D2','MT','M2','JR','J2')"		
	__cQryBx += " AND D_E_L_E_T_ = ' '"
	__cQryBx += " Order By E5_TIPODOC"
	__cQryBx := ChangeQuery(__cQryBx)
EndIf
dbUseArea(.T.,"TOPCONN",TCGenQry2(Nil,Nil,__cQryBx,aBindParam),__cTmpBx,.F.,.T.)

While (__cTmpBx)->(!EoF())
	aadd(aBaixas,{(__cTmpBx)->E5_MOTBX,;
				  (__cTmpBx)->E5_SEQ,;
				  (__cTmpBx)->REC})
	(__cTmpBx)->(dbSkip())
EndDo
(__cTmpBx)->(dbCloseArea())

Return
