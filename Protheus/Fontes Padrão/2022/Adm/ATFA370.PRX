#INCLUDE "ATFA370.ch"
#INCLUDE "FILEIO.CH"  
#INCLUDE "PROTHEUS.CH"

Static __cExt 	:= GetDbExtension()
Static lBlind	:= IsBlind()
Static a330RegCTB := {} // Array com filiais a serem processadas na contabilizacao
Static __lConOut := if( GetNewPar("MV_CONOUTR",0) > 0, .T., .F. )

//********************************
// Controle de multiplas moedas  *
//********************************
Static lMultMoed := .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ ATFA370	³ Autor ³ Claudio D. de Souza	³ Data ³ 31/07/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de contabilizacao off-line do Ativo        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ Atfa370  								  				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ SIGAATF									  				  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
FUNCTION ATFA370(lDireto, aPARAMAUTO)
LOCAL nOpca    	:= 0
LOCAL aButtons 	:= {}
LOCAL aSays    	:= {}
LOCAL cPerg		:= "AFA370"
LOCAL cSEMATF	:= GetNextAlias()
LOCAL lATF130VLD := ExistBlock("ATF370VLD")
Local lRet		 := .T.	

DEFAULT lDireto		:= .F.
DEFAULT aPARAMAUTO	:= {}

PRIVATE cCadastro := STR0003 //"Contabilização off-line do Ativo fixo"

AADD(aSays, STR0001 ) //"Este programa tem como objetivo contabilizar as     "
AADD(aSays, STR0002 ) //"correções, depreciações e correções das depreciações"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas para parametros                         ³
//³ mv_par01 // Data Inicial ?                                   ³
//³ mv_par02 // Data Final ?                                     ³
//³ mv_par03 // Aglutina Lancamentos: (Sim/Nao)                  ³
//³ mv_par04 // Considera C.Custo (Sim/Nao)                      ³
//³ mv_par05 // Mostra Lanctos Contabeis                         ³
//³ mv_par06 // Considera Filiais Abaixo (Sim/Nao)               ³
//³ mv_par07 // Da Filial                                        ³
//³ mv_par08 // Ate a Filial                                     ³
//³ mv_par09 // Do Bem                                           ³
//³ mv_par10 // Ate o Bem                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Pergunte(cPerg,.F.)

//Verifica se o Ativo está atualizado
ATFXKERNEL()

IF lBlind .Or. lDireto // Processamento Batch ou Chamada Direta por outra Rotina

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa o log de processamento                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ProcLogIni( aButtons )
	ProcLogAtu("INICIO")
	
	If mv_par06 == 1 // Seleciona filiais
		If ATFCanProc(cSEMATF, mv_par01, mv_par02, mv_par07,mv_par08) // Data de, Data Ate, Filial de, Filial Ate
			ProcLogAtu("INICIO")
			BatchProcess(cCadastro, "Este programa tem como objetivo gerar Lançamentos Contábeis Off para as movimentações" + CRLF + "do módulo Ativo Fixo.",cPerg,{ || Atfa370Proc(.T.,aPARAMAUTO) }, { || .F. }) ////"Este programa tem como objetivo gerar Lançamentos Contábeis Off para as movimentações"#"do módulo Ativo Fixo."
		EndIf
	Else
		If ATFCanProc(cSEMATF, mv_par01, mv_par02) // Data de, Data Ate, Filial a processar
			ProcLogAtu("INICIO")
			BatchProcess(cCadastro, "Este programa tem como objetivo gerar Lançamentos Contábeis Off para as movimentações" + CRLF + "do módulo Ativo Fixo.",cPerg,{ || Atfa370Proc(.T.,aPARAMAUTO) }, { || .F. })////"  Este programa tem como objetivo gerar Lançamentos Contábeis Off para as movimentações"#"do módulo Ativo Fixo."
		EndIf	
	EndIf	

	//Libera o Processamento e envia mensagem no server (tempo)
	ATFFreeProc(cSEMATF)        
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualiza o log de processamento   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ProcLogAtu("FIM")
	RETURN .T.

ELSE

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa o log de processamento                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ProcLogIni( aButtons )
	
	AADD(aButtons, { 5,.T.,{|| Pergunte("AFA370",.T. ) } } )
	AADD(aButtons, { 1,.T.,{|o| nOpca:= 1,o:oWnd:End()}})
	AADD(aButtons, { 2,.T.,{|o| o:oWnd:End() }})
	
	
	FormBatch( STR0003, aSays, aButtons,,,440) //"Contabilização off-line do Ativo fixo"
		
	If nOpcA == 1
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza o log de processamento   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ProcLogAtu("INICIO")
		
		If lATF130VLD
			lRet := ExecBlock("ATF370VLD", .F., .F.,)
        Endif                                              
		         
        If lRet
	
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Atualiza o log de processamento   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ProcLogAtu("INICIO")
	
			If mv_par06 == 1 // Seleciona filiais
				If ATFCanProc(cSEMATF, mv_par01, mv_par02, mv_par07,mv_par08) // Data de, Data Ate, Filial de, Filial Ate
					ProcLogAtu("INICIO")
					Processa({|lEnd| Atfa370Proc(.F.)})
				EndIf
			Else
				If ATFCanProc(cSEMATF, mv_par01, mv_par02) // Data de, Data Ate, Filial a processar
					ProcLogAtu("INICIO")
					Processa({|lEnd| Atfa370Proc(.F.)})
				EndIf	
			EndIf	
			
			//Libera o Processamento e envia mensagem no server (tempo)
			ATFFreeProc(cSEMATF)
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza o log de processamento   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ProcLogAtu("FIM")	
	Endif

EndIf

Return



/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³Atfa370Pro³ Autor ³ Claudio D. de Souza   ³ Data ³ 31/07/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de contabilizacao off-line do ativo				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ Atfa370Proc()											  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ ATFA370													  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Atfa370Proc(lBat,aPARAMAUTO)
Local aCampos
Local cAtfMoedas
Local cLoteAtf := LoteCont("ATF")
Local cConta
Local cCCusto
Local cSubCta
Local cDebito 
Local cCredito
Local cSubDeb
Local cSubCre
Local cMesAno
Local cCodCusto := ""
Local cDescr
//********************************
// Controle de multiplas moedas  *
//********************************
Local aValor	:= If(lMultMoed,AtfMultMoe(,,{|x| 0}), {0,0,0,0,0} )
/*Local nValor1
Local nValor2
Local nValor3
Local nValor4
Local nValor5*/
Local cQuaisMoedas
Local aLancam := Array( 19 )
Local cQuery
Local cAliasQry
Local cAliasSn3
Local cAliasSn1
Local cArquivo
Local nHdlPrv
Local lCtb 		:= CtbInUse()
Local lPadrao	:= VerPadrao("820")
Local lPadraoRAT:= VerPadrao("823")

Local lATFInfl	:= If( cPaisLoc=="ARG", GetNewPar("MV_ATFINFL",.F.), .F. ) // Ajuste por Inflacao
Local lPdrAju	:= .F.  // 830 - cPadrao para Ajuste por Inflacao (Paises Localizados)
Local nTotal	:= 0
Local cProva 	:= ""

Local cFilDe  := cFilAnt
Local cFilAte := cFilAnt
Local cFilOld := cFilAnt
Local nX	  := 0

Local aFlagCTB := {}
Local lUsaFlag := GetNewPar( "MV_CTBFLAG" , .F.) // controle de flags do CTB

Local nInc		:= 0
Local aSM0		:= AdmAbreSM0()

//Variaveis para gravação do código de correlativo
Local aDiario	:= {}
Local lSeqCorr	:= UsaSeqCor("SN1/SN3/SN4")

Local lExclusivo:= ADMTabExc("SN4")
Local cFilProc	:= ""
Local Arat		:= GetArea()
Local aStru   	:= SN4->(dbStruct())

Local lQuerySNX := .T.
Local cAliasSNX := "SNX"
Local bCondSNX := {||.T.}


DEFAULT lBat	:= .F.

IF lBat .AND. ValType(aPARAMAUTO) == "A"
	FOR nX := 1 to Len(aPARAMAUTO)
		&("mv_par"+StrZero(nX,2)) := aPARAMAUTO[nX]
	NEXT nX
ENDIF

Procregua( Len( aSM0 ) + 10 )

If mv_par06 == 1 // considera filiais
  	cFilDe := mv_par07
  	cFilAte := mv_par08
Endif

//Para usuarios do SigaCon
If ! CtbInUse()
	lUsaFlag := .F.
Endif

For nInc := 1 To Len( aSM0 )

	IncProc("Contabilização do Ativo. Processando filial: " + aSM0[nInc][1] + "|" + aSM0[nInc][2] + " (" + Alltrim(Str(nInc)) + "/" + Alltrim(Str(Len( aSM0 ))) + ") - Passo 1"  )
	
	
	If aSM0[nInc][1] == cEmpAnt .AND. aSM0[nInc][2] <= cFilAte
		nHdlPrv  := 0	// Endereco do arquivo de contra prova dos lanctos cont.	
		nTotal   := 0	// Total dos lancamentos contabeis
		cArquivo :=""	// Nome do arquivo contra prova
		cFilAnt := aSM0[nInc][2]
		lPadrao	:= VerPadrao("820") // Verificar a existencia do lancamento Padrao na Filial 
		//Tratamento Gestao Corporativa
		If Len(AllTrim(XFilial("SN4")) ) > 2
			If Alltrim(cFilProc) != Alltrim(xFilial("SN4"))
				cFilProc:= xFilial("SN4")
			Else
				Loop
			EndIf
		EndIf

		IncProc("Contabilização do Ativo. Processando filial: " + aSM0[nInc][1] + "|" + aSM0[nInc][2] + " (" + Alltrim(Str(nInc)) + "/" + Alltrim(Str(Len( aSM0 ))) + ") - Passo 2"  )

		cAliasQry := GetNextAlias()
		cAliasSn3 := "SN3"
		cAliasSn1 := "SN1"


		cQuery := "SELECT	N4_DATA, N4_OCORR, N4_TIPOCNT, SN4.R_E_C_N_O_ RECNOSN4, N4_IDMOV,N4_TPSALDO,"

		//********************************
		// Controle de multiplas moedas  *
		//********************************
		If lMultMoed
			AtfMultMoe(,,{|x| cQuery += "N4_VLROC" + Alltrim(Str(x)) + "," })
		Else
			cQuery += "N4_VLROC1, N4_VLROC2, N4_VLROC3, N4_VLROC4, N4_VLROC5,"
		EndIf	
		cQuery += " SN3.R_E_C_N_O_ RECNOSN3,"
		cQuery += "			SN1.R_E_C_N_O_ RECNOSN1 "

		cQuery += "FROM "+RetSqlName("SN4")+" SN4,"
		cQuery +=         RetSqlName("SN1")+" SN1,"
		cQuery +=         RetSqlName("SN3")+" SN3 "

		cQuery += "WHERE N4_FILIAL = '"+xFilial("SN4")+"'"
		cQuery += "  AND N4_DATA  >= '"+Dtos(MV_PAR01)+"'"
		cQuery += "  AND N4_DATA  <= '"+Dtos(MV_PAR02)+"'"
		cQuery += "  AND N4_CBASE >= '" + MV_PAR09 + "'"
		cQuery += "  AND N4_CBASE <= '" + MV_PAR10 + "'"
		cQuery += "  AND N4_DCONTAB = ' '"
		cQuery += "  AND N4_OCORR IN ('06','07','08', '10','11','12', '20')"
		cQuery += "  AND N4_TIPOCNT IN ('2','3','5')"
		cQuery += "  AND N1_FILIAL='"+xFilial("SN1")+"'"
		cQuery += "  AND N1_CBASE = N4_CBASE"
		cQuery += "  AND N1_ITEM  = N4_ITEM"
		cQuery += "  AND N3_FILIAL='"+xFilial("SN3")+"'"
		cQuery += "  AND N3_CBASE = N4_CBASE"
		cQuery += "  AND N3_ITEM  = N4_ITEM"
		cQuery += "  AND N3_TIPO  = N4_TIPO"
		cQuery += "  AND N3_SEQ   = N4_SEQ"
		cQuery += "  AND N3_SEQREAV = N4_SEQREAV"
		cQuery += "  AND SN4.D_E_L_E_T_ = ' '"
		cQuery += "  AND SN1.D_E_L_E_T_ = ' '"
		cQuery += "  AND SN3.D_E_L_E_T_ = ' '"

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry,.T.,.T.)
		aEval(aStru, {|e| If(e[2]!= "C" .And. (cAliasQry)->(FieldPos(Alltrim(e[1]))) > 0, TCSetField(cAliasQry, e[1], e[2],e[3],e[4]),Nil)})
		
		// Se houver dados a contabilizar, existir o LP ou se nao existir o LP e nao for CTB
		// contabiliza, ou seja somente contabiliza quando nao existir o LP se nao for SIGACTB
		IncProc("Contabilização do Ativo. Processando filial: " + aSM0[nInc][1] + "|" + aSM0[nInc][2] + " (" + Alltrim(Str(nInc)) + "/" + Alltrim(Str(Len( aSM0 ))) + ") - Passo 3"  )
		
		If lATFInfl .And. lPadrao
			lPdrAju	:= VerPadrao("850")
			lPadrao	:= lPdrAju        
		Endif
		
		// VerIfica se há contabilização do rateio cadastrado
		lPadraoRAT := VerPadrao("823")
				
		If (cAliasQry )->( ! Eof() ) .And. lPadrao
	
			// Se existir o LP, cria CPROVA
			If lPadrao
				nHdlPrv := HeadProva(cLoteAtf,"ATFA370",Substr(cUsuario,7,6),@cArquivo)
			Endif
				
			While (cAliasQry)->(!Eof())
				dbSelectArea("SN4")
				MsGoto((cAliasQry)->RECNOSN4)
				dbSelectArea("SN1")
				MsGoto((cAliasQry)->RECNOSN1)
				dbSelectArea("SN3")
				MsGoto((cAliasQry)->RECNOSN3)
				
				// mes de referencia
				cMesAno := StrZero( Month( ( cAliasQry )->N4_DATA ) ,2) + "/" + Subs( StrZero( Year( ( cAliasQry )->N4_DATA ) ,4) ,3 ,2)
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Se o usuario desejar utilizar centro de custo (MV_PAR04 ==1 ), a cada  ³
				//³ despesa ser  considerado, caso contr rio, dever  ser analisado a obriga³
				//³ toriedade do centro de custo na CONTA, se for obrigado ele sera        ³
				//³ considerado.                                                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If mv_par04 == 1	
					// considerar centro de custo
					cCodCusto := (cAliasSn3)->N3_CUSTBEM
				Else 
					// Nao considerar centro de custo ou nao esta utilizando SIGACTB
					dbSelectArea("SI1")
					dbSetOrder(1)
					
					If dbSeek(xFilial("SI1")+(cAliasSn3)->N3_CCONTAB)
						If SI1->I1_CCOBRIG == "S"	// se CC for obrigat¢rio, deve considerar C.Custo
							cCodCusto := (cAliasSn3)->N3_CUSTBEM
						Endif
					Endif
				Endif
			
				DbSelectArea(cAliasQry)
				If lPadrao
					cProva := "820"
	
					If lATFInfl .And. ( (cAliasQry)->N4_OCORR $ "07|08" )
						cProva := "850"
					EndIf
	
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Tratamento utilização do controle de flags do ctb                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lUsaFlag
						aAdd(aFlagCTB,{"N4_DCONTAB",dDataBase,"SN4",SN4->(Recno()),0,0,0})
					EndiF
					
					If lSeqCorr
						aAdd(aDiario, {"SN4",SN4->(Recno()),SN4->N4_DIACTB,"N4_NODIA","N4_DIACTB"})
               		EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Tratamento para campos de controle no CTK e CV3 (TABORI e RECORI)      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aTabRecOri := {"SN4",SN4->(RECNO())}
	
					IncProc("Contabilização do Ativo. Processando filial: " + aSM0[nInc][1] + "|" + aSM0[nInc][2] + " (" + Alltrim(Str(nInc)) + "/" + Alltrim(Str(Len( aSM0 ))) + ") - Passo 4 - Montando Lançamento contábil - CTK"  )
					
					nTotal += DetProva( nHdlPrv, cProva, "ATFA370", cLoteATF,,,,,,,, @aFlagCTB, aTabRecOri)
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Tratamento para a contabilização do rateio dos ativos                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					If lPadraoRAT .And. ( SN3->N3_RATEIO == "1" .and. !Empty(SN3->N3_CODRAT) )
						aRat := GetArea()

						If __lConOut
							CONOUTR("ATFA370 | "+ALLTRIM(STR(ThreadId())) + " Processando Rateios " )
						EndIf
				
						lQuerySNX := .T.
						cAliasSNX := CriaTrab(,.F.)
						bCondSNX := {||.T.}

						cQuery := "SELECT R_E_C_N_O_"
						cQuery += "  FROM " + RetSqlName("SNX") + " SNX"
						cQuery += " WHERE SNX.NX_FILIAL = '" + xFilial("SNX") + "'"
						cQuery += "   AND SNX.NX_DTMOV = '" + DTOS((cAliasQry)->N4_DATA) + "'"
						cQuery += "   AND SNX.NX_IDMOV = '" + (cAliasQry)->N4_IDMOV + "'"
						cQuery += "   AND SNX.NX_TPSALDO = '" + (cAliasQry)->N4_TPSALDO + "'"
						cQuery += "   AND SNX.NX_CODRAT = '" + SN3->N3_CODRAT + "'"
						cQuery += "   AND SNX.D_E_L_E_T_ = ' '"
						dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSNX,.T.,.T.)
							
						While (cAliasSNX)->(!EOF()) .And. Eval(bCondSNX)
							// Compatibilidade com os LPs apontados para a tabela SNX
							If lQuerySNX
								DbSelectArea("SNX")
								SNX->(DbGoto( (cAliasSNX)->R_E_C_N_O_ ))
							Endif

							If SNX->NX_CODRAT == SN3->N3_CODRAT
								If __lConOut
									CONOUTR("ATFA370 | "+ALLTRIM(STR(ThreadId())) + " Processando Rateios - REG.:" + ALLTRIM(STR(SNX->(RECNO()))))
								Endif
								nTotal += DetProva( nHdlPrv, "823", "ATFA370", cLoteATF,,,,,,,, @aFlagCTB, {"SNX",SNX->(Recno())})
							EndIF
								
							DbSelectArea(cAliasSNX)
							(cAliasSNX)->(DBSKIP())
						EndDo

						If lQuerySNX
							DbSelectArea(cAliasSNX)
							Dbclosearea()
						Endif

						RestArea( aRat )								
					EndIf
				EndIf	
			
				If !lUsaFlag
					If RecLock("SN4")
						Replace N4_DCONTAB With dDataBase
						SN4->(MsUnlock())
					Endif	
				Endif
	
				DbSelectArea(cAliasQry)
				DbSkip()
			EndDo	
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Envia para Lancamento Contabil                                       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nTotal > 0
				if __lConOut
					CONOUTR("ATFA370 | "+ALLTRIM(STR(ThreadId())) + " Gravando Lançamento contábil - CT2" )
				endif	
				IncProc("Contabilização do Ativo. Processando filial: " + aSM0[nInc][1] + "|" + aSM0[nInc][2] + " (" + Alltrim(Str(nInc)) + "/" + Alltrim(Str(Len( aSM0 ))) + ") - Passo 5 - Gravando Lançamento contábil - CT2"  )					
				cATF370Inc( cArquivo, @nHdlPrv, cLoteATF, nTotal, @aFlagCTB ,,@aDiario )
			Endif

		Endif
	
		// Fecha a query
		DbSelectArea(cAliasQry)
		DbCloseArea()
	
		// Se o arquivo for compartilhado, processa apenas uma vez
		If !lExclusivo
			Exit
		Endif
		IncProc("Contabilização do Ativo. Processando filial: " + aSM0[nInc][1] + "|" + aSM0[nInc][2] + " (" + Alltrim(Str(nInc)) + "/" + Alltrim(Str(Len( aSM0 ))) + ") - Passo 4"  )
	EndIf
Next

//Ponto de entrada após efetivação da contabilização off line 
If ExistBlock("ATF370CFR")
	ExecBlock("ATF370CFR", .F., .F.,)
Endif
// Restaura a filial
cFilAnt := cFilOld

Return



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ATFCanProcº Autor ³ Marcos S. Lobo     º Data ³  06/26/06   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Cria Semaforo de processamento e verifica concorrencia com  º±±
±±º          ³base nos intervalos de parametros                           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP - Contabilizacao Off-Line Ativo Fixo                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ATFCanProc(cSEMATF, dDtVldDe, dDtVldAte, cFilDe, cFilAte)
LOCAL lRet		:= .F.
LOCAL nX		:= 1
LOCAL aInfos	:= {}
LOCAL nEr		:= 0 
LOCAL cFile		:= ""
LOCAL cBuffer	:= ""
LOCAL cUserLck	:= ""
LOCAL dDTDe
LOCAL dDTAte
LOCAL nHandle 	:= -1
LOCAL lCreate	:= .F.
LOCAL lOK
LOCAL cUserCTB	:= PADR('SCHED',15)

DEFAULT cFilDe := cFilAnt
DEFAULT cFilAte:= cFilAnt

If !lBlind
	cUserCTB := cUserName
EndIf
 
While !LockByName("ATFA370LOCKPROC"+cEmpAnt,.T.,.T.,.T.)
    nER++
	If !lBlind
		MsAguarde({|| Sleep(1000) }, "Semaforo de processamento... tentativa "+ALLTRIM(STR(nER)), "Aguarde, arquivo sendo criado por outro usuário.") //"Semaforo de processamento... tentativa "#"Aguarde, arquivo sendo criado por outro usuário."
	Else
		Sleep(50)		
	EndIf
	If nER > 5	/// A PARTIR DA QUINTA TENTATIVA
		If !lBlind
			If Aviso("Criação de Semaforo de processamento.","Não foi possivel acesso exclusivo para criar o semaforo de processamento.",{"Repetir","Fechar"},2) == 2//"Criação de Semaforo de processamento."#"Não foi possivel acesso exclusivo para criar o semaforo de processamento."#"Repetir"#"Fechar"
				ProcLogAtu("ERRO","Atenção!","Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo) por outro usuário no momento"+"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde.") //"Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo) por outro usuário no momento"#"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde."	
				Return lRet
			Else
				nER := 0
			EndIf		
		ElseIf nER >= 30
			ProcLogAtu("ERRO","Atenção!","Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo) por outro usuário no momento"+"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde.") //"Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo) por outro usuário no momento"#"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde."	)	
			Return lRet
		EndIf
    EndIf
EndDo

cFile := "ATF370"+AllTrim(cEmpAnt)

If Alltrim(Upper(TcGetDb())) $ "MSSQL7/MSSQL/MYSQL/SYBASE"
	cFile := Upper( cFile )	// Tratativa especifica para SQL devido ao case-sensitive - a correção foi feita na versão * DBAccess 4.2 Server - Build 20180606 - Sep  4 2018 14:39:25
								// * Revision: 3189 - * Build Version: 18.1.1.3 - Estamos colocando esta proteção por precaução. 
Else
	cFile := Lower( cFile )	/// Atribui LowerCase por causa do Linux/Unix (case sensitive)
Endif

If ! MsFile(cFile,,"TOPCONN") // verifica se a tabela existe
	aStruct  := {}
	AAdd( aStruct, { "FILDE"	, "C", Len( cFilAnt )	, 0 } )
	AAdd( aStruct, { "FILATE"	, "C", Len( cFilAnt )	, 0 } )
	AAdd( aStruct, { "DTDE"		, "D", 8 				, 0 } )
	AAdd( aStruct, { "DTATE"	, "D", 8 				, 0 } )
	AAdd( aStruct, { "CUSER"	, "C", Len( cUserCTB )	, 0 } )
	AAdd( aStruct, { "HORAI"	, "C", Len(Time())		, 0 } )
	AAdd( aStruct, { "DATAI"	, "D", 8				, 0 } )
	AAdd( aStruct, { "HORAF"	, "C", Len(Time())		, 0 } )
	AAdd( aStruct, { "DATAF"	, "D", 8				, 0 } )

	MsCreate( cFile , aStruct , 'TOPCONN' )
	cArqTrab := cFile

Else

	cArqTrab := cFile

EndIf

IF Select(cSEMATF) > 0
	dbSelectArea(cSEMATF)
	DbCloseArea()
ENDIF
dbUseArea(.T.,"TOPCONN",cArqTrab,cSEMATF,.T.,.F.)

dbSelectArea(cSEMATF)			
dbGoTop()

lSai		:= .F.
lRet1		:= .T.
lRet2		:= .T.

While !lSai .and. (cSEMATF)->(!Eof())
	        
	IF cFilDe <= (cSEMATF)->FILDE .and. cFilAte >= (cSEMATF)->FILATE
		lRet1 := .F.
	ElseIF cFilDe >= (cSEMATF)->FILDE .and. cFilDe <= (cSEMATF)->FILATE
		lRet1 := .F.
	ElseIf cFilAte >= (cSEMATF)->FILDE .and. cFilAte <= (cSEMATF)->FILATE
		lRet1 := .F.
	ElseIf cFilDe > cFilAte
		lRet1 := .F.		
	Endif	    

	IF dDtVldDe <= (cSEMATF)->DTDE .and. dDtVldAte >= (cSEMATF)->DTATE
		lRet2 := .F.
	ElseIF dDtVldDe >= (cSEMATF)->DTDE .and. dDtVldDe <= (cSEMATF)->DTATE
		lRet2 := .F.
	ElseIf dDtVldAte >= (cSEMATF)->DTDE .and. dDtVldAte <= (cSEMATF)->DTATE
		lRet2 := .F.
	ElseIf dDtVldDe > dDtVldAte
		lRet2 := .F.		
	Endif
	
	If !lRet1 .and. !lRet2
		/// SE LOCALIZOU NO MESMO PERIODO E NAS MESMAS FILIAIS E MESMA CARTEIRA

		If (cSEMATF)->(RLock())			/// SE CONSEGUIR ALOCAR 	
			(cSEMATF)->(dbDelete())		/// NAO TEM CONCORRENCIA
			(cSEMATF)->(MsUnlock())
		Else		
			If !lBlind
				Aviso("Atenção!","Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo ) por outro usuário no momento."+Alltrim((cSEMATF)->CUSER)+" "+(cSEMATF)->HORAI+" "+"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde.",{"Fechar"},2) //"Atenção!"###"Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo ou carteiras ) por outro usuário ( "###" ) no momento. Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde."###"Fechar"
			EndIf
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Atualiza o log de processamento com o erro  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ProcLogAtu("ERRO","Atenção!","Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo ) por outro usuário no momento."+Alltrim((cSEMATF)->CUSER)+"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde.")
			lSai		:= .T.
		EndIf
	EndIf
	(cSEMATF)->(dbSkip())
EndDo

If !lSai
	RecLock(cSEMATF,.T.)
	Field->FILDE		:= PADR(cFilDe,len(cFilAnt))
	Field->FILATE		:= PADR(cFilAte,len(cFilAnt))
	Field->DTDE			:= dDtVldDe
	Field->DTATE	    := dDtVldAte
	Field->CUSER		:= cUserCTB
	Field->HORAI		:= Time()
	Field->DATAI	    := Date()
	MsUnlock()	
	RecLock(cSEMATF,.F.) ///DEIXA REGISTRO ALOCADO
	if __lConOut
		CONOUTR("ATFA370 | "+ALLTRIM(STR(ThreadId())) +" Start Time "+Time()+" "+ALLTRIM(STR(Seconds())))
	endif	
	lRet := .T.		///PROCESSAMENTO PODE SER EFETUADO
EndIf

UnLockByName("ATFA370LOCKPROC"+cEmpAnt,.T.,.T.,.T.)
If __lConOut
	CONOUTR("ATFA370 | "+ALLTRIM(STR(ThreadId())) + "| Concluido em: " + Time()+" | "+ALLTRIM(STR(Seconds())) )
Endif
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ATFFREEPRC³Autor  ³ Marcos S. Lobo     ³ Data ³  06/26/06   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Libera registro alocado no semaforo de processamento.      º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP Contabilizacao Off-Line Ativo Fixo                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ATFFreeProc(cSEMATF)

LOCAL cFile
LOCAL nER		:= 0

cFile := "ATF370"+AllTrim(cEmpAnt)

If Alltrim(Upper(TcGetDb())) $ "MSSQL7/MSSQL/MYSQL/SYBASE"
	cFile := Upper( cFile )	// Tratativa especifica para SQL devido ao case-sensitive - a correção foi feita na versão * DBAccess 4.2 Server - Build 20180606 - Sep  4 2018 14:39:25
								// * Revision: 3189 - * Build Version: 18.1.1.3 - Estamos colocando esta proteção por precaução. 
Else
	cFile := Lower( cFile )	/// Atribui LowerCase por causa do Linux/Unix (case sensitive)
Endif

If ! MsFile(cFile,,"TOPCONN") // verifica se a tabela existe
	Return
EndIf

If Select(cSEMATF) <= 0
	Return
EndIf

While !LockByName("ATFA370LOCKPROC"+cEmpAnt,.T.,.T.,.T.)
    nER++
	If !lBlind
		MsAguarde({|| Sleep(1000) }, "Semaforo de processamento... tentativa "+ALLTRIM(STR(nER)), "Aguarde, arquivo sendo criado por outro usuário.")//"Semaforo de processamento... tentativa "#"Aguarde, arquivo sendo criado por outro usuário."
	Else
		Sleep(50)		
	EndIf
	If nER > 5	/// A PARTIR DA QUINTA TENTATIVA
		If !lBlind
			If Aviso("Gravacao de Semaforo de processamento.","Não foi possivel acesso exclusivo para gravar o semaforo de processamento.",{"Repetir","Fechar"},2) == 2//"Gravacao de Semaforo de processamento."#"Não foi possivel acesso exclusivo para gravar o semaforo de processamento."#"Repetir"#"Fechar"
				ProcLogAtu("ERRO","Atenção!","Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo ) por outro usuário no momento."+"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde.")	     //"Atenção!"#"Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo ) por outro usuário no momento."#"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde."
				Return
			Else
				nER := 0
			EndIf		
		ElseIf nER >= 30
			ProcLogAtu("ERRO","Atenção!","Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo ) por outro usuário no momento."+"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde.")	     //"Atenção!"#"Este processo esta sendo utilizado com parametros conflitantes ( mesmo periodo ) por outro usuário no momento."#"Verifique o período e os parametros selecionados para o processamento ou tente novamente mais tarde."
			Return
		EndIf
    EndIf
EndDo

dbSelectArea(cSEMATF)
If !Eof()
	If (cSEMATF)->(RLock())
		Field->HORAF	:= Time()
		Field->DATAF	:= Date()
	EndIf
	MsUnlock()
	if __lConOut
		CONOUTR("ATFA370 | "+ALLTRIM(STR(ThreadId())) +" End Time   "+Time()+" "+ALLTRIM(STR(Seconds())))
	endif	
	RecLock(cSEMATF,.F.)
	(cSEMATF)->(dbDelete())
	MsUnlock()
EndIf

UnLockByName("ATFA370LOCKPROC"+cEmpAnt,.T.,.T.,.T.)

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³cATF370Inc³ Autor ³ Renato F. Campos      ³ Data ³ 15/11/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Envia lancamentos para contabilizade.                  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³cATF370Inc(cArquivo,nHdlPrv,cLoteATF,nTotal,aFlagCTB		  ³±±
±±|			 ³			,aDadosProva)									  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³ATFA370							        				  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function cATF370Inc(cArquivo,nHdlPrv,cLoteATF,nTotal,aFlagCTB,aDadosProva,aDiario)
LOCAL lDigita := .F.
LOCAL lAglut  := .F.
Local nSeconds := Seconds()

DEFAULT aDadosProva := nil
DEFAULT aFlagCTB	:= {}
DEFAULT aDiario	:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grava Rodapé 									  	³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nHdlPrv > 0
	RodaProva( nHdlPrv , nTotal, aDadosProva )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Seta os parametro para a utilização da aglutinação e digitação ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	lDigita := IIF( mv_par05 == 1, .T., .F.)
	lAglut  := IIF( mv_par03 == 1, .T., .F.)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Envia para Lan‡amento Cont bil 						³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if __lConOut
		CONOUTR("ATFA370 | "+ALLTRIM(STR(ThreadId())) + " FUNCTION CA100INCL " + Time() + " " + ALLTRIM(STR(Seconds())))
		CONOUTR("ATFA370 | aFlagCTB Tam: " + STR(LEN(aFlagCTB)))
	endif	
	cA100Incl( cArquivo, nHdlPrv, 3, cLoteATF, lDigita, lAglut,,,, @aFlagCTB, aDadosProva,aDiario )
	
	if __lConOut
		CONOUTR("ATFA370 | "+ALLTRIM(STR(ThreadId())) + " Efetivação de lançamento contabil para " + Alltrim(STR(LEN(aFlagCTB))) + " registros, concluido! Tempo gasto:" + Str( seconds() - nSeconds ) )
	Endif

	aFlagCTB := {}  
	aDiario  := {}
	nHdlPrv := 0
Endif

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AdmAbreSM0³ Autor ³ Orizio                ³ Data ³ 22/01/10 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna um array com as informacoes das filias das empresas ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function AdmAbreSM0()
	Local aArea			:= SM0->( GetArea() )
	Local aAux			:= {}
	Local aRetSM0		:= {}
	Local lFWLoadSM0	:= .T.
	Local lFWCodFilSM0 	:= .T.

	If lFWLoadSM0
		aRetSM0	:= FWLoadSM0()
	Else
		DbSelectArea( "SM0" )
		SM0->( DbGoTop() )
		While SM0->( !Eof() )
			aAux := { 	SM0->M0_CODIGO,;
						IIf( lFWCodFilSM0, FWGETCODFILIAL, SM0->M0_CODFIL ),;
						"",;
						"",;
						"",;
						SM0->M0_NOME,;
						SM0->M0_FILIAL }

			aAdd( aRetSM0, aClone( aAux ) )
			SM0->( DbSkip() )
		End
	EndIf

	RestArea( aArea )
Return aRetSM0
