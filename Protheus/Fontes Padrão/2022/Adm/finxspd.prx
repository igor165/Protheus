#INCLUDE "PROTHEUS.CH"

Static dLastPcc  := CTOD("22/06/2015")

//Controle de arqs. temporarios
// Bloco F100
Static _oFINXSPD1  := Nil
Static __cFin1Name := Nil
// Bloco F500
Static _oFINXSPD2  := Nil
Static __cFin2Name := Nil
// Bloco I
Static _oFINXSPD3  := Nil
Static __cFin3Name := Nil

Static lSpdDtEm		:= ExistBlock("SPDF1001")
Static lSpdTipo		:= ExistBlock("SPDF1002")
Static lSpdOrig		:= ExistBlock("SPDF1003")
Static lSpdPart		:= ExistBlock("SPDF1004") 
Static lSpdNOrig	:= ExistBlock("SPDF1005")
Static lSpdDtEm2	:= ExistBlock("SPDF1006")
Static lSPD100FIN	:= ExistBlock("SPD100FIN")
Static lSPD10019	:= ExistBlock("SPD10019")
Static lEdF100		:= Nil
Static __lUnidNeg	:= Nil
Static __lIsBra		:= (cPaisLoc == "BRA")
Static __lDcOPFS	:= FindFunction("DocOrigPFS")

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINXSPD 

Funções do SPED PIS COFINS

@Author Vários
@version 12
@since   09/12/2014

/*/
//-----------------------------------------------------------------------------------------------------

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±                                                                         ±±
±±            Funcoes retiradas do arquivo MATXATU.PRX                     ±±
±±                                                                         ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINSPDF100

Funcão para retornar os títulos que compoem o bloco F100 do SPED PIS/COFINS
Arquivo anterior: MATXATU.PRX

@Author	TOTVS
@since	28/04/2011
/*/
//-----------------------------------------------------------------------------------------------------
Function FinSpdF100(nMesRef,nAnoRef,lTotF100, cDataIni,cDataFim,cBloco)

Local aReturn	:= {}
Local aF100  	:= {}
Local cAliasQry	:= ""
Local nA		:= 0
Local nX		:= 0 
Local nJ		:= 0 
Local nValorPis	:= 0
Local nValorCof	:= 0    
Local cIndCmlt	:= ""
Local dLastDay 	:= ""
Local cDocSpd	:= SuperGetMv("MV_DOCSPD",,"")	
Local cDcsSpd	:= SuperGetMv("MV_DCSSPD",,"")	
Local cMotBx	:= SuperGetMv("MV_MTBXSD",,"")	
Local lSpdMt100	:=	.F.
Local lSpdMt460	:=	.F.
Local aAreaSF1	:= {}
Local aAreaSF2	:= {}
Local lCodPart	:=	.T.
Local cNOrigem	:=	""
Local cTipo		:=	""
Local cNome		:=	""
Local cOrigem	:=	""
Local cNomeApl	:=	""
Local cTpSel	:= ""
Local cTpApl	:= ""      
Local lBxSped	:= SuperGetMv("MV_RENTRIB",,.F.) //Habilita o envio receitas financeiras não tributaveis 	
																 //,ou seja, dados da baixa (juros, descontos ou variacao cambial).
Local cNatRec	:= SuperGetMv("MV_NATRNT",,"") 	//Codigo da Natureza de Receita Nao Tributavel.
Local cNatDesp	:= SuperGetMv("MV_NATDNT",,"") 	//Codigo da Natureza de Despesa Nao Tributavel.
Local aNatNTrib	:= {}
Local lAplSped	:= SuperGetMv("MV_APLFIN",,.F.) //Habilita o envio das Aplicacoes financeiras.
Local cNatApl	:= SuperGetMv("MV_APLNAT",,"") 	//Codigo da Natureza das Aplicacoes Financeiras.
Local cTpSe5	:=	"'JR','CM','DC','MT'" //Juros, Variacao Cambial, Desconto e Multa.
Local lEnvReg	:=	.F.
Local aAreaSED	:=	{}
Local nI		:=	0
Local aAlias	:= If(lBxSped,{"SE5","SE1","SE2"},{"SE1","SE2"})
Local aRegSped	:=	{}
Local aAreaSEV	:=	{}
Local lRenTribR	:=	.T. //Valida as naturezas de receitas nao tributaveis.
Local lRenTribD	:=	.T. //Valida as naturezas de despesas nao tributaveis.
Local cChave	:=	""  
Local aMotBx 	:= ReadMotBx()
Local lBxOk		:=	.T.   
Local nVrRateio:=	0
Local cCstPis	:=	""
Local cCstCof	:=	""
Local lEnvBaseP	:=	.T. //Enviar ou nao base de Pis dependendo do codigo de CST.
Local lEnvBaseC	:=	.T. //Enviar ou nao base de Cofins dependendo do codigo de CST.
Local nBase		:=	0
Local nMoeda	:= 0
Local lSEI_		:= SuperGetMv("MV_APLAPRO",,.F.) //Habilita o envio das Aplicacoes financeiras.
Local nProp		:= 0
Local cChaveBx	:= cChArray	:= ""
Local nDescBx	:=	0
Local nDescBxI	:=	0
Local nDescBxC	:=0
Local aRecNTrib := {}
Local nTotF100	:= 0
Local lBaseImp	:=	.T. 		// Nf possui valor de base de imposto.    
Local nValTit	:=	0		//Campos para a geracao do arquivo para o RH.                
Local aTitRH	:= {}
Local aTamRH   	:= {}
Local cChaveRH	:=	""
Local cArqRH	:=	""
Local cIndRH  	:=	""
Local cAliasRH	:=	""   
Local cNomeRH	:=	""   
Local nBasePis	:=	0
Local aBasePis	:=	{}                  
Local lTitRet	:=	.F.		//Titulo retido em outro ou que retem outro.											
Local nVlMinImp	:= IIF(dDataBase > dLastPcc, GetNewPar("MV_VL13137",10), GetNewPar("MV_VL10925",5000))
Local cOriTit	:=	""		//Origem do titulo qdo fatura vou precisar utilizar...
Local nAliasSe2	:=	0
Local cMoeda	:=	""                        
Local cNatSe2	:= SuperGetMv("MV_NATCP",,"") 	
Local lDescDoc	:= SuperGetMv("MV_DESCDOC",,.F.) //Habilita o envio da descrição da operação/documento no bloco F100 do SPED PIS/COFINS. 	
Local cNatResg	:= &(GetMv("MV_NATRAPL"))
Local lNRastDSD	:= SuperGetMV("MV_NRASDSD",.T.,.F.)
Local lIntPFS   := SuperGetMv("MV_JESCJUR",,.F.) //Integração PFS Juridico
Local nVrDescInc:=	0 //Valor do desconto incondicional referente ao campo E1_TPDESC (Legado)
Local cData		:= ""	
Local cNro		:= ""					                                                                           
Local nVrJuros	:=	nRegApl	:=	0
Local cChaveApl	:=	""                             
Local nTxMoeda	:=	0
Local aRegApl	:= 	{}  
Local nVrCanc	:= 	0
Local aAreaSE5	:=	{}
Local cChaveSE5	:= 	""
Local lRecIss	:=	.F.
Local lMVDescIss:=	GetNewPar("MV_DESCISS",.F.)
Local cNewDocSpd:=","+STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(cDocSpd,";",","),"/",","),"|",",")," ",","),"-",","),"_",",")+","
Local cNewDcsSpd:=","+STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(cDcsSpd,";",","),"/",","),"|",",")," ",","),"-",","),"_",",")+","
Local lRetFat	:=	.T.

Local cNatRcm	:= SuperGetMv("MV_NATRCM",,"")	//Codigo da Natureza de Receita Nao Tributavel correcao monetaria
Local cOldNat	:= ""
Local cNatDcm	:= SuperGetMv("MV_NATDCM",,"")	//Codigo da Natureza de Despesa Nao Tributavel correcao monetaria
Local lDescSe2	:= __lIsBra //Verifica campo TPDESC na tabela SE5 (<C>ondicional ou <I>ncondicional)
Local lDescSe5	:= __lIsBra	//Verifica campo TPDESC na tabela SE5 (<C>ondicional ou <I>ncondicional)
Local nCm		:= 0
Local aSpd		:=	{}
Local lEdCprb	:= .F.
Local cTpAplAnt	:= ""
Local lDbSkip 	:= .T.
Local cNatRec1	:= SuperGetMv("MV_NATRNT1",,"") 	//Codigo da Natureza de Receita Nao Tributavel do parâmetro complementar do MV_NATRNT.
Local cNatDesp1	:= SuperGetMv("MV_NATDNT1",,"") 	//Codigo da Natureza de Despesa Nao Tributavel do parâmetro complementar do MV_NATDNT.
Local cNatRcm1	:= SuperGetMv("MV_NATRCM1",,"")		//Codigo da Natureza de Receita Nao Tributavel correcao monetaria do parâmetro complementar do MV_NATRCM.
Local cNatDcm1	:= SuperGetMv("MV_NATDCM1",,"")		//Codigo da Natureza de Despesa Nao Tributavel correcao monetaria do parâmetro complementar do MV_NATDCM.
Local c2DuPref  := SuperGetMv("MV_2DUPREF",,"")
Local cCprb		:= ""
Local cFilSED	:=xFilial("SED")
Local cFilSe1	:=xFilial("SE1")
Local cFilSe2	:=xFilial("SE2")
Local cFilSe5	:=xFilial("SE5")
Local lPCCBx 	:= SuperGetMv("MV_BX10925",.T.,"2") == "1" 
Local lCalcIssBx:= GetNewPar("MV_MRETISS","1") == "2"  	//Retencao do ISS pela emissao (1) ou baixa (2)
Local nStatus 	:= 0

Private lEnvDesd	:= .F. //Diferencia query da tabela SE2 que seleciona somente desdobramentos.						

DEFAULT nMesRef := Month(dDataBase)
DEFAULT nAnoRef := Year(dDataBase)
DEFAULT lTotF100:= .F.                                     
DEFAULT cBloco	:= ""  

If __lIsBra

cDataIni := If(cDataIni	= Nil, StrZero(nAnoRef,4)+StrZero(nMesRef,2)+"01", cDataIni)
dLastDay := LastDay(Ctod("01/"+StrZero(nMesRef,2)+"/"+StrZero(nAnoRef,4))) 
cDataFim := If(cDataFim	= Nil, StrZero(nAnoRef,4)+StrZero(nMesRef,2)+StrZero(Day(dLastDay),2), cDataFim)

If !Empty(cNatRec1) 
	cNatRec += ";"+cNatRec1
EndIf

If !Empty(cNatDesp1) 
	cNatDesp += ";"+cNatDesp1
EndIf

If !Empty(cNatRcm1) 
	cNatRcm += ";"+cNatRcm1
EndIf

If !Empty(cNatDcm1) 
	cNatDcm += ";"+cNatDcm1
EndIf

If lTotF100 //Caso seja realizada a totalizacao para o RH um arquivo DBF vai ser criado para o Relatorio de Desoneracao dos Dados do Financeiro.
	//Criando arquivo para o Relatorio de Desoneracao dos Dados do Financeiro.
	aTitRH := {}
	aTamRH:=TamSX3("E5_FILIAL")                         
	AADD(aTitRH,{"FILIAL"  ,"C",aTamRH[1],aTamRH[2]})      			
	aTamRH:=TamSX3("E5_PREFIXO")
	AADD(aTitRH,{"PREFIXO"    ,"C",aTamRH[1],aTamRH[2]})
	aTamRH:=TamSX3("E5_NUMERO")
	AADD(aTitRH,{"NUMERO"   ,"C",aTamRH[1],aTamRH[2]})
	aTamRH:=TamSX3("E5_PARCELA")
	AADD(aTitRH,{"PARCELA" ,"C",aTamRH[1],aTamRH[2]})
	aTamRH:=TamSX3("E5_TIPO")                                                     
	AADD(aTitRH,{"TIPO"   ,"C",aTamRH[1],aTamRH[2]})
	aTamRH:=TamSX3("E5_CLIFOR")
	AADD(aTitRH,{"CLIENTE" ,"C",aTamRH[1],aTamRH[2]})
	aTamRH:=TamSX3("E5_LOJA")
	AADD(aTitRH,{"LOJA"   ,"C",aTamRH[1],aTamRH[2]})
	aTamRH:=TamSX3("E5_DATA")
	AADD(aTitRH,{"DTMOV" ,"C",8,0})
	aTamRH:=TamSX3("E1_NATUREZ")
	AADD(aTitRH,{"NATUREZ"   ,"C",aTamRH[1],aTamRH[2]})
	aTamRH:=TamSX3("E5_VALOR")
	AADD(aTitRH,{"VALOR"   ,"N",aTamRH[1],aTamRH[2]})
	AADD(aTitRH,{"TABELA" ,"C",8,0})

	//Nome do arquivo FIN+Nome Filial+DES+mesano.
	cAliasRH	:= "FINDESRH" 
	cNomeRH	:= "FIN" + Alltrim(xFilial("SE1")) + "DES" + Alltrim(Str(nMesRef)) + Alltrim(Str(nAnoRef)) + ".DBF"	
	
	cIndRH		:=	CriaTrab(Nil,.F.)
	
	cChaveRH   := "FILIAL+PREFIXO+NUMERO+PARCELA+TIPO+CLIENTE+LOJA" 
	
	If _oFINXSPD1 <> Nil
		nStatus := TCSQLEXEC("DELETE FROM "+__cFin1Name)

		if nStatus < 0 .Or. SELECT(cAliasRH)<=0 
			_oFINXSPD1:Delete()
			_oFINXSPD1 	:= Nil
			__cFin1Name := ""
		Else
			(cAliasRH)->(DBGOTO(1))
		Endif
	Endif

	If _oFINXSPD1 == Nil
		_oFINXSPD1 := FWTemporaryTable():New( cAliasRH )  
		_oFINXSPD1:SetFields(aTitRH) 	
		_oFINXSPD1:AddIndex("1", StrToKarr2( cChaveRH, "+")) 	
		_oFINXSPD1:Create()

		__cFin1Name := _oFINXSPD1:GetRealName()
	EndIf
	DbSetOrder(1) 					
Endif

dbSelectArea("SED")

//Identifico se tenho unidade de negócios.
If __lUnidNeg == Nil
	__lUnidNeg := FWSizeFilial() > 2	// Indica se usa Gestao Corporativa
EndIf
If lEdF100 == Nil
	lEdF100 := SED->(ColumnPos("ED_F100"))	> 0
EndIf

cTipo	:=	"" //Tratamentos para o ponto de entrada SPDF1002
If lSpdTipo
	cTipo := ExecBlock ("SPDF1002",.F.,.F.)	
Endif
If !Empty(cTipo) // Inserindo aspas e virgulas para o select da query.
	cNome:="'"
	For nA:=1 To Len(cTipo)
		If Subst(cTipo,nA,1) $ ";,-_.|/"
  	   	cNome+="','"
  	   Else
  	   	cNome+=Subst(cTipo,nA,1)
  	   Endif
  	Next
Endif
cNome	+=	"'"
If !Empty(cTipo) //Verificando o tamanho dos tipos de titulos fornecidos pelo usuario.
	cTpSel:=""
	cTipo:=""
	For nA:=1 To Len(cNome)
		If Subst(cNome,nA,1) $ "'"
 	  	   	If Len(cTipo) > 1 .And. Len(cTipo) < 3
 	  	       	cTpSel+=Space(1)
 	  	      Endif
 	  	     	cTpSel+=Subst(cNome,nA,1)
 	  	      cTipo:=""
  	   ElseIf Subst(cNome,nA,1) $ ","
  	      cTpSel+=Subst(cNome,nA,1)
 	  	   Else
  	   	cTpSel+=Subst(cNome,nA,1)
  			cTipo+=Subst(cNome,nA,1)
  	   Endif
  	Next
Endif

cOrigem	:=	"" //Tratamentos para o ponto de entrada SPDF1003
If lSpdOrig
	cOrigem := ExecBlock ("SPDF1003",.F.,.F.)
Endif		

cNOrigem	:=	"" //Ponto de Entrada que das origens que nao devem ser checadas para o envio no bloco F100.
If lSpdNOrig
	cNOrigem := ExecBlock ("SPDF1005",.F.,.F.)	 
	cNOrigem :=	SpdVldVar( cNOrigem )  
Endif

If lAplSped .And. !Empty(cNatApl) // Tratamento para o parametro MV_APLNAT.
	Aadd(aAlias,"SEI")	
	cNomeApl:="'"	// Inserindo aspas e virgulas para o select da query.
	For nA:=1 To Len(cNatApl)
		If Subst(cNatApl,nA,1) $ ";,-_|/" 				 
  	   	cNomeApl+="','"
  	   Else
  	   	cNomeApl+=Subst(cNatApl,nA,1)  
  	   Endif
  	Next
	
	cNomeApl	+=	"'"
	cTpApl	:=""
	cNatApl	:=""
	For nA:=1 To Len(cNomeApl)			
		If Subst(cNomeApl,nA,1) $ "'" 				 
	  	   If Len(cNatApl) > 1 .And. Len(cNatApl) < 10
  	       	cTpApl+=Space(1)    	  	      
  	      Endif  	  	         
	  	   cTpApl+=Subst(cNomeApl,nA,1)  	  	   
  	      cNatApl:=""	  	   
	   ElseIf Subst(cNomeApl,nA,1) $ "," 
		   cTpApl+=Subst(cNomeApl,nA,1)  
  	   Else
  	   	cTpApl	+=Subst(cNomeApl,nA,1) 
  			cNatApl	+=Subst(cNomeApl,nA,1) 	   	 
	   Endif
	Next	
Endif
cTpAplAnt	:= cTpApl
aRecNTrib	:=	{}	
nAliasSe2	:=	0
			
For nA:= 1 to Len(aAlias)
	If aAlias[nA] == "SE5"
		cAliasQry	:= "SE5QRY"
	Elseif aAlias[nA] == "SEI"
		cAliasQry	:= "SEIQRY"
	Elseif aAlias[nA] == "SE1"
		cAliasQry	:= "SE1QRY"
	Elseif aAlias[nA] == "SE2"
		cAliasQry	:= "SE2QRY"
	Endif

	F100Top(aAlias[nA],cAliasQry,cDataIni,cDataFim,cTpSe5,cTpApl,lSpdDtEm,cTpSel,lSEI_,cNOrigem,lSpdDtEm2,;
			__lUnidNeg,cNatSe2,lDescDoc,cNatResg,lNRastDSD,lIntPFS)	
	
	lEdCprb := (cAliasQry)->(ColumnPos("CPRB"))	> 0 // Verifica se o campo existe na tabela temporária

	While !(cAliasQry)->(Eof()) 
		lDbSkip := .T.
		
		//aF100 Posição 34 - retorna o campo ED_CPRB, para verificar se vai compor o saldo da CPRB.
		If lEdCprb
			If (cAliasQry)->CPRB $ "2" 
				cCprb := "2"
			Else
				cCprb := "1"
			EndIf
		Else
			cCprb := "1"
		EndIf

		If aAlias[nA] == "SE5" 
			
			//Receber
			If Empty(cNatRcm) .and. (cAliasQry)->TIPODOC $ "CM_C2"
				lRenTribR	:=	.F.//Valida as naturezas de receitas nao tributaveis.
			ElseIf Empty(cNatRec) .and. !((cAliasQry)->TIPODOC $ "CM_C2")
				lRenTribR	:=	.F.//Valida as naturezas de receitas nao tributaveis.
			Else
				If(cAliasQry)->TIPODOC $ "CM_C2"
					If !Empty(cNatRcm)
						cOldNat	:= cNatRec
						cNatRec	:= 	cNatRcm
					EndIf
				EndIf
				//Naturezas das Receitas e Despesas nao Tributáveis
				aAreaSED := SED->(GetArea())
				DbSelectArea("SED")							
				DbSetOrder(1)			
				If MsSeek(cFilSED+ cNatRec) //SE1
					Aadd(aNatNTrib,{"SE1",SED->ED_CODIGO,SED->ED_APURPIS,SED->ED_APURCOF,SED->ED_CSTPIS,;
					SED->ED_CSTCOF,SED->ED_TABCCZ,SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
					SED->ED_CLASFIS,SED->ED_INDCMLT,	SED->ED_PCAPPIS,SED->ED_PCAPCOF,SED->(Recno()),;
					SED->ED_CONTA,SED->ED_CCD,SED->ED_CCC})	
					If !Empty(cOldNat) .and. (cAliasQry)->TIPODOC $ "CM_C2"
						cNatRec	:= cOldNat	
					EndIf
					lRenTribR	:=	.T.								
				Else
					lRenTribR	:=	.F.				
				Endif
				RestArea(aAreaSED)								        		
			Endif
			
			//Pagar
			If Empty(cNatDcm) .and. (cAliasQry)->TIPODOC $ "CM_C2"
				lRenTribD	:=	.F.//Valida as naturezas de receitas nao tributaveis.
			ElseIf Empty(cNatDesp) .and. !((cAliasQry)->TIPODOC $ "CM_C2")
				lRenTribD	:=	.F.//Valida as naturezas de receitas nao tributaveis.
			Else
				If(cAliasQry)->TIPODOC $ "CM_C2"
					If !Empty(cNatDcm)
						cOldNat	:= cNatDesp
						cNatDesp:= 	cNatDcm
					EndIf
				EndIf
				aAreaSED := SED->(GetArea())
				DbSelectArea("SED")							
				DbSetOrder(1)																
				If MsSeek(cFilSED+ cNatDesp) //SE2
					Aadd(aNatNTrib,{"SE2",SED->ED_CODIGO,SED->ED_APURPIS,SED->ED_APURCOF,SED->ED_CSTPIS,;
					SED->ED_CSTCOF,SED->ED_TABCCZ,SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
					SED->ED_CLASFIS,SED->ED_INDCMLT,	SED->ED_PCAPPIS,SED->ED_PCAPCOF,SED->(Recno()),;
					SED->ED_CONTA,SED->ED_CCD,SED->ED_CCC})									
					If !Empty(cOldNat) .and. (cAliasQry)->TIPODOC $ "CM_C2"
						cNatDesp:= cOldNat	
					EndIf
					lRenTribD	:=	.T.
				Else
					lRenTribD	:=	.F.				
				Endif			  							        								
			Endif			
			
		ElseIf aAlias[nA] == "SEI" 
			If Empty(cTpApl) 
			   lRenTribR	:=	.F.//Valida as naturezas de receita e despesa das receitas financeiras nao tributaveis e as aplicacoes financeiras.
			Else
				aAreaSED := SED->(GetArea())
				DbSelectArea("SED")							
				DbSetOrder(1)			
				SED->(Dbseek(xFilial("SED")))				
				While !(Eof()) .And. SED->ED_FILIAL = xFilial("SED")				
					If Alltrim(SED->ED_CODIGO) $ cTpApl
						Aadd(aNatNTrib,{"SEI",SED->ED_CODIGO,SED->ED_APURPIS,SED->ED_APURCOF,SED->ED_CSTPIS,;
						SED->ED_CSTCOF,SED->ED_TABCCZ,SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
						SED->ED_CLASFIS,SED->ED_INDCMLT,	SED->ED_PCAPPIS,SED->ED_PCAPCOF,SED->(Recno()),;
						SED->ED_CONTA,SED->ED_CCD,SED->ED_CCC})			
						lRenTribR	:=	.T.
					Endif
					SED->(Dbskip())
				Enddo				
			Endif		
		Endif
			   
		lEnvReg		:=	.F.
		aRegSped	:=	{}						
		lSpdMt100 	:= .F.
		lSpdMt460 	:= .F.
		nProp 		:= 0
		cMoeda		:=	""                        
		nCm			:= 0 
		nDescBxI	:= 0
		nVrDescInc	:= 0   
		aSpd		:= {}                    
		If aAlias[nA] == "SE5" 
			//De acordo com o tipo do titulo (receber ou a pagar) que refere-se o desconto, multa, juros ou variacao cambial
			// o parametro correto deve estar preenchido (MV_NATDNT ou MV_NATRNT).		
			If ((cAliasQry)->RECPAG == "R" .And. !lRenTribR) 
				(cAliasQry)->(Dbskip())
				Loop	   	   	   
			Endif							
			
			If ((cAliasQry)->RECPAG == "P" .And. !lRenTribD)
				(cAliasQry)->(Dbskip())
				Loop	   	   	   
			Endif							

	   Endif
	
		If aAlias[nA] == "SEI" .And. !lRenTribR 
			//No caso de aplicacao financeira utilizo tambem a natureza do parametro MV_NATRNT.
	   		Exit	
		Endif
			
		If aAlias[nA] == "SE5" .And. (cAliasQry)->RECPAG == "R"	//SE1	 				   
	    	//Desconto Condicional em titulo a receber nao deve ser enviando no SPED PIS/COFINS.
			If(cAliasQry)->TIPODOC $ "DC_D2"
		   	If (lDescSe5 .And. (cAliasQry)->TPDESC = "C")				     					     	
					(cAliasQry)->(Dbskip())
					Loop
				Endif
			Endif					
		Endif
      
		If aAlias[nA] == "SE5" .And. (cAliasQry)->RECPAG == "P"	//SE2
			//Juros e multas de titulo a pagar não devem influenciar no SPED PIS/COFINS.	 				   
			If(cAliasQry)->TIPODOC $ "JR_MT_J2_M2" //_CM_C2"
				(cAliasQry)->(Dbskip())
				Loop
			Endif					
		Endif

		If	(aAlias[nA] = "SE2" .And. (cAliasQry)->DESDOBR == "S")
		   lRetFat	:=	.T.
			If !Empty((cAliasQry)->FATURA)
				lRetFat	:= VerFatF100(cAliasQry,aAlias[nA])				
			Endif
			If !lRetFat                     
				(cAliasQry)->(dbSkip())
				Loop		
			Endif
		Endif				
				
		If ("SE5" $ cAliasQry) .OR. ("SEI" $ cAliasQry) // EH_MOEDA ou E5_MOEDA -> Único campo moeda que é caracter!
			
			If ("SE5" $ cAliasQry)
			  cMoeda	:= (cAliasQry)->MOEDA 
			ElseIf ("SEI" $ cAliasQry)		
			  cMoeda	:= Iif(lSEI_,Alltrim(Str((cAliasQry)->MOEDA)),(cAliasQry)->MOEDA ) 
			Endif										
			
			If cMoeda $ ("M1;R")
				nMoeda := 1
			Elseif cMoeda $ ("M")
				nMoeda := Val(SUBSTR( cMoeda ,2,1))
			Else
				nMoeda := Val( cMoeda )
			Endif
			
			If nMoeda > 1 
				nProp 	:= 1 // movimentos de não tributaveis e aplicações e emprestimo não tem proporcionalização  //(cAliasQry)->VALOR / (cAliasQry)->BASEPIS
			Endif
		Else
			
			nMoeda 	:= (cAliasQry)->MOEDA
		  	cChave	:=	((cAliasQry)->PREFIXO+ (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)-> CLIFOR + (cAliasQry)->LOJA )            
			aBasePis	:=	{}
			aBasePis := FinRepBase(cAliasQry,nMoeda,cChave,cFilSED,lPCCBx,lCalcIssBx)
			nBasePis	:=	aBasePis[1] //Valor base para calculo do Pis e Cofins...
							                
			If aAlias[nA] = "SE1" .And. aBasePis[1] == 0 .And. aBasePis[2] == 0//Tit. a Rec. originado do juridico com natureza que retem e apura PIS e COFINS mas nao gera os impostos nao devem ser enviados.
				(cAliasQry)->(dbSkip())
				Loop				
			Endif				
											
			If nMoeda > 1 
				If aAlias[nA] $ "SE1_SE2" .And. (cAliasQry)->TXMOEDA == 0
					nProp := xMoeda(nBasePis,(cAliasQry)->MOEDA, 1,STOD((cAliasQry)->EMISSAO)) / nBasePis
				Else
					If	aAlias[nA] = "SE2"   
						nProp := (cAliasQry)->TXMOEDA						
					Else
						nProp := (cAliasQry)->VLCRUZ / nBasePis
					Endif	
				Endif					
			Endif					  							
			
			cOriTit	:=	(cAliasQry)->ORIGEM
	
		Endif			     			
		
		nVrJuros	:=	nRegApl	:=	0		
		aRegApl	:= 	{}
                              												
		If aAlias[nA] == "SEI" 	.And. 	lSEI_ .And. !Empty(cTpApl) //Somar todos os titulos referentes a taxas I1,I2,I3,I4 e JR das apropriacoes das aplicacoes financeiras e dos resgates.
				
			nTxMoeda	:=	(cAliasQry)->TXMOEDA
			cTpAplAnt	:= 	cTpApl
			cTpApl		:=	(cAliasQry)->TIPO
			cChaveApl	:= 	(cAliasQry)->FILIAL+ (cAliasQry)->APLEMP + (cAliasQry)->NUM + (cAliasQry)->REVISAO + (cAliasQry)->SEQ						
	
			aAdd(aRegApl,{aAlias[nA],(cAliasQry)->FILIAL,(cAliasQry)->APLEMP,(cAliasQry)->NUM,(cAliasQry)->REVISAO,(cAliasQry)->SEQ,;
											(cAliasQry)->TIPO,(cAliasQry)->BANCO,(cAliasQry)->AGENCIA,(cAliasQry)->CONTA,(cAliasQry)->NATUREZ,;
											(cAliasQry)->DATAM,(cAliasQry)->RECNO})
				
			 While !(cAliasQry)->(Eof()) .And. ((cAliasQry)->FILIAL+ (cAliasQry)->APLEMP + (cAliasQry)->NUM + (cAliasQry)->REVISAO + (cAliasQry)->SEQ) = cChaveApl
				If  (cAliasQry)->TIPODOC $ "JR,I7" 							 	
					nVrJuros	+=	(cAliasQry)->VALOR		
				Endif                                               				 			 	
				 
				 (cAliasQry)->(Dbskip())				 								 		 	 
			 	//Não executa o skip na mesma tabela no laço principal
			 	lDbSkip := .F.
			 Enddo                                                                			                                                                                           			
	                                     
			nBase	:=	nVrJuros			
				
			If  nMoeda >1  .And. Alltrim(aRegApl[1,7]) <> "CDI"
				nBase	:= nBase	* nTxMoeda
			Endif
	
			aAdd(aRegSped,{aAlias[nA],"2",	"",; // 3
						nBase,; // 4 VALOR
						100,aRegApl[1,2], aRegApl[1,3],aRegApl[1,4],aRegApl[1,5],aRegApl[1,6],; //  10 FILIAL,APLEMP,NUM,REVISAO,SEQ
						aRegApl[1,7], aRegApl[1,8],aRegApl[1,9],aRegApl[1,10],aRegApl[1,11],; //  15 TIPO,BANCO,AGENCIA,CONTA, NATUREZ
						aRegApl[1,12],aRegApl[1,13]}) // 17 DATA e RECNO
			aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})	 						 										
			  	
		Endif			
		
		nVrCanc	:=	0
			
		If aAlias[nA] == "SE5" //Verificando se o movimento tem um titulo que retenha Pis ou Cofins.				
			
			If (cAliasQry)->RECPAG == "R"	//SE1	 
			
				DbSelectArea("SE1")
				DbSetOrder(1)
				If SE1->(MsSeek(cFilSE1+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO))) .And. SED->(MsSeek(cFilSED+SE1->E1_NATUREZ))
					If SE1->E1_TIPO $ (MVPROVIS,'PR ','PRE')
						(cAliasQry)->(Dbskip())
						Loop
					Endif
					If (Empty(SED->ED_APURCOF) .Or. Empty(SED->ED_APURPIS))
							If (cAliasQry)->TIPODOC $ "JR_MT_J2_M2_CM_C2" .and. ( SED->ED_JURSPD = "2" .or. Empty(SED->ED_JURSPD))
							(cAliasQry)->(Dbskip())
							Loop
						EndIf
					Endif	
				Endif				   
				
				lEnvReg		:=	.T.																	   					
				cChaveBx		:=	(cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA 
				cChArray		:= cFilSE1 + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA					
				nDescBxI		:=	nDescBxC	:= 0  
				
				cData	:= "DATAM"
				cNro	:= "RECNO"					
				
					If (cAliasQry)->TIPODOC $ "JR_MT_J2_M2_CM_C2"					
						If (cAliasQry)->VALOR > 0
							//Juros, Multas e Variacoes cambiais devem ser enviados em registros separados.				
						  	aAdd(aRegSped,{"SE1","1","R",(cAliasQry)->VALOR,100,;//5
												(cAliasQry)->(CLIFOR+LOJA),(cAliasQry)->&cData,(cAliasQry)->&cNro,; //8
												(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
												(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
												(cAliasQry)->LOJA,"","","",(cAliasQry)->EDCONTA,"","",""})	 						 										
							aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})	 						 										
						EndIf
					ElseIf(cAliasQry)->TIPODOC $ "DC_D2"
						//Descontos Incondicionais devem ser subtraidos do valor da base do titulo.			     	
				     	If lDescSe5 .And. (cAliasQry)->TPDESC = "I"					     	
					     	nDescBxI	+= (cAliasQry)->VALOR																	     							 							
					   Endif  	
				   Endif			         
				
				If nDescBxI+nVrDescInc > 0
					If SE1->E1_DECRESC == 0 // considero somente os descontos inclusos na baixa 
						aAdd(aRecNTrib,{cChArray,(nDescBxI+nVrDescInc),0})//Chave + Desconto Incondicional
					EndIf				
				EndIf
				If Len(aRegSped) > 0
				 	lEnvReg	:=	.T.																	
				Else
				(cAliasQry)->(Dbskip())
					Loop
				Endif
					
			ElseIf (cAliasQry)->RECPAG == "P"	//SE2
				DbSelectArea("SE2")
				DbSetOrder(1)				
				If SE2->(MsSeek(cFilSE2+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO))) .And. SED->(MsSeek(cFilSED+SE2->E2_NATUREZ))					
					If SE2->E2_TIPO $ (MVPROVIS,'PR ','PRE')
						(cAliasQry)->(Dbskip())
						Loop
					Endif
					If	(Empty(SED->ED_APURCOF) .Or. Empty(SED->ED_APURPIS))
							If (cAliasQry)->TIPODOC $ "CM_C2" .and. ( SED->ED_JURSPD = "2" .or. Empty(SED->ED_JURSPD))
							(cAliasQry)->(Dbskip())
							Loop
						EndIf
					Endif	
				Endif	 
				
				//De acordo com a definicao do Fiscal no caso de titulo a pagar devo somente calcular o valor para apuracao e enviar somente um titulo.			   								
				cChaveBx		:=	(cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA 
				cChArray		:= cFilSE2 + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA					
				nDescBxI		:=	nDescBxC	:=	 0  
														
					If((cAliasQry)->TIPODOC $ "DC_D2_CP" .And. lDescSe5) .or. (cAliasQry)->TIPODOC $ "CM_C2"
					  	//Desconto Condicional para titulo a pagar deve ser levado em linha separada no bloco.					   				     					     	
			     		If ((cAliasQry)->TPDESC = "C" .and. (cAliasQry)->TIPODOC $ "DC_D2_CP") .or. (cAliasQry)->TIPODOC $ "CM_C2"                                          				     						     	  	                                          				     						     	  	
					   
						   	If (cAliasQry)->TIPODOC $ "DC_D2_CP"
						   		nDescBxC	+= (cAliasQry)->VALOR
						   	ElseIf (cAliasQry)->TIPODOC $ "CM_C2"
						   		If (cAliasQry)->VALOR < 0
						   			nCm += ((cAliasQry)->VALOR * -1)// Contas a pagar deve ir a variação cambial negativa, mas deve ser impresso o valor positivo
						   		EndIf
						   	EndIf
				
							cData	:= "DATAM"
							cNro	:= "RECNO"					
	
							If (cAliasQry)->TIPODOC $ "DC_D2" 
								aAdd(aRegSped,{"SE2","2","P",(cAliasQry)->VALOR,100,;//5
									(cAliasQry)->CLIFOR+(cAliasQry)->LOJA,(cAliasQry)->&cData,(cAliasQry)->&cNro,; //8
									(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
									(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
									(cAliasQry)->LOJA})
								aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})	 						 										
							ElseIf ((cAliasQry)->TIPODOC $ "CM_C2" .and. nCm > 0)
								aAdd(aRegSped,{"SE2","2","P",nCm,100,;//5
									(cAliasQry)->CLIFOR+(cAliasQry)->LOJA,(cAliasQry)->&cData,(cAliasQry)->&cNro,; //8
									(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
									(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
									(cAliasQry)->LOJA})
								aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})
							ElseIf (cAliasQry)->TIPODOC $ "CP" 
								aAdd(aRegSped,{"SE2","2","P",(cAliasQry)->DESCONTO,100,;//5
									(cAliasQry)->CLIFOR+(cAliasQry)->LOJA,(cAliasQry)->&cData,(cAliasQry)->&cNro,; //8
									(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
									(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
									(cAliasQry)->LOJA})
								aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})
							EndIf	 						 	
					   ElseIf  (cAliasQry)->TPDESC = "I"  
					     	//Desconto Incondicional deve ser subtraido do valor da base de calculo para a apuracao do titulo.		
						   nDescBxI	+= (cAliasQry)->VALOR													
						Endif  	
				   Endif			         
		         
				If nDescBxI > 0 
					If !(Empty(SED->ED_APURCOF) .Or. Empty(SED->ED_APURPIS))
						If SE2->E2_DECRESC == 0 // CONSIDERO SOMENTE OS DESCONTOS INCUSOS NA BAIXA
							aAdd(aRecNTrib,{cChArray,nDescBxI,nDescBxC}) //Chave + Desconto Incondicional + Desconto Condicional
						EndIf
					EndIf						
				Endif																			
				
				If Len(aRegSped) > 0
				  	lEnvReg	:=	.T.																	
				Else
					nDescBxI	:= 0
					nDescBxC	:= 0
					nCm			:= 0
					(cAliasQry)->(Dbskip())
					Loop
				Endif
				
			Endif	
		Else							
			If aAlias[nA] == "SEI" 
				lEnvReg	:=	.T.				
		   Else										
				lBxOk	:=	.T.
				If  aAlias[nA] $ "SE1_SE2" 
					If  aAlias[nA] $ "SE2"
						If (lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .AND.  (cAliasQry)->DECRESC ==  (cAliasQry)->VALOR)
							If Len(aNatNTrib) > 0
								nDescBxC	:= (cAliasQry)->DECRESC	
								#IFDEF TOP                												
									cNro	:= "RECNO"					
								#ELSE					   	   		
									cData	:= "DTMOV"
									cNro	:= "NROREG"								
								#ENDIF
								aAdd(aRegSped,{"SE2","2","P",(cAliasQry)->DECRESC,100,;//5
										(cAliasQry)->CLIFOR+(cAliasQry)->LOJA,(cAliasQry)->EMISSAO,(cAliasQry)->&cNro,; //8
										(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
										(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
										(cAliasQry)->LOJA,"","","","","","",""})
								aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})
								If !Empty((cAliasQry)->APURPIS) .AND. !Empty((cAliasQry)->APURCOF)
									aAdd(aRegSped,{"SE2","2","P",(cAliasQry)->VALOR,100,;//5
										(cAliasQry)->CLIFOR+(cAliasQry)->LOJA,(cAliasQry)->EMISSAO,(cAliasQry)->&cNro,; //8
										(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
										(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
										(cAliasQry)->LOJA,"","","","","","",""})
									aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})
								EndIf
							Else
								(cAliasQry)->(Dbskip())
								Loop
							EndIf
						Else
							nDescBxI	:= (cAliasQry)->DECRESC
							If Empty((cAliasQry)->APURPIS) .AND. Empty((cAliasQry)->APURCOF)
								nDescBxI	:= 0
								(cAliasQry)->(Dbskip())
								Loop
							EndIf
						EndIf
					EndIf	
					
					If  (cAliasQry)->TIPO $ MV_CRNEG //NCC nao deve ser enviada no SPED PIS/COFINS.  		
						(cAliasQry)->(Dbskip())
						Loop													
					Endif															
					
					dbSelectArea("SE5")
					SE5 -> ( dbSetOrder ( 7 ) ) //FILIAL+PREFIXO+NUMERO+PARCELA+TIPO+CLIFOR+LOJA+SEQ
					SE5 -> ( dbSeek ( cFilSE5 + (cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA) ) )
			
					Do While ( SE5->(!Eof()) .And.;
						 cFilSE5+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA) == SE5->(E5_FILIAL+E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA))
						
						If !(Dtos(SE5->E5_DATA) >= cDataIni .And. Dtos(SE5->E5_DATA) <= cDataFim )				
							SE5->(Dbskip())
							Loop							
						Endif																	
						
						If SE5->E5_TIPODOC = 'ES' .Or. SE5->E5_MOTBX $ 'FAT_LIQ' 
							SE5->(dbSkip())
							Loop
						EndIf
	        
						If SE5->E5_TIPO $ (MVABATIM+MV_CRNEG+MVPROVIS)
							SE5->(dbSkip())
							Loop
						EndIf
				
						If SE5->E5_SITUACA = 'C' 
							SE5->(dbSkip())
							Loop
						EndIf		        
						
						If TemBxCanc(SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ),.T.)	
							SE5->(dbSkip())
							Loop							
						Endif														
						
						If aAlias[nA] = "SE1" .And. SE5->E5_TIPODOC = 'CP'  	//Compensacao com NCC e sem baixa cancelada.
						 	SA1->( DbSeek( xFilial("SA1") + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) )		                       
							lRecIss := (SA1->A1_RECISS == "1" .And. lMVDescIss)
							aAreaSE5		:= 	SE5->(GetArea())   
							cChaveSE5	:=	SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO+SE5->E5_LOJA																
							SE5->(Dbsetorder(10)) // E5_FILIAL+E5_DOCUMEN
							If SE5->(Dbseek(xFilial("SE5")+ cChaveSE5)) .And. SE5->E5_TIPO $ MV_CRNEG   					
								nVrCanc := SE5->E5_VALOR 
							Endif								                    
							SE5 -> ( dbSetOrder ( 7 ) ) //FILIAL+PREFIXO+NUMERO+PARCELA+TIPO+CLIFOR+LOJA+SEQ								
							SE5->(RestArea(aAreaSE5))
							SE5->(dbSkip())
							Loop														
						ElseIf SE5->E5_MOTBX <> 'NOR'  
							nI :=  Ascan(aMotBx, {|x| Substr(x,1,3) == Upper(SE5->E5_MOTBX) })
							If SE5->E5_MOTBX $ cMotBx .And. nI > 0 
								If Substr(aMotBx[nI],26,01) == "N"
									lBxOk	:=	.F.  
									Exit																																										
								Else
									Exit
								Endif									
							Else
								Exit
							Endif 	
						Else
							SE5->(dbSkip())
							Loop
						Endif																												
					Enddo						
				Endif																
				
				If  (Alltrim(cBloco) $ "F100" .And. !lBxOk) 
					(cAliasQry)->(Dbskip())
					Loop													
				Endif
				
				If lSpdOrig 
					lEnvReg	:=	(AllTrim((cAliasQry)->ORIGEM) $ ("FINA040|FINA050|FINA280|FINA290|FINA565|FINA460|SIGATMS|CNTA120|CNTA121|JURA203|LOJA701|MNTA666|MNTA765|MNTA805|MNTA815|MNTA845|" + OrigemEasy() + cOrigem))
				Else
					lEnvReg	:=	(AllTrim((cAliasQry)->ORIGEM) $ "FINA040|FINA050|FINA280|FINA290|FINA565|FINA460|SIGATMS|CNTA120|CNTA121|JURA203|LOJA701|MNTA666|MNTA765|MNTA805|MNTA815|MNTA845|" + OrigemEasy())
				Endif

				If AllTrim((cAliasQry)->ORIGEM) == "MATA100" 
					aAreaSF1 := SF1->(GetArea())
					
					If Upper(AllTrim(c2DuPref)) == AllTrim(SF1->F1_PREFIXO)
						DbSelectArea("SF1")
						DbSetOrder(1)
						If DbSeek(xFilial("SF1")+(cAliasQry)->(NUM+PREFIXO+CLIFOR+LOJA)) .And. At(","+Alltrim(SF1->F1_ESPECIE)+",",cNewDocSpd)>0  
							lSpdMt100 := .T.
						Endif
						RestArea(aAreaSF1)
					Else					
						DbSelectArea("SF1")
						DbSetOrder(2)
						If DbSeek(xFilial("SF1")+(cAliasQry)->(CLIFOR+LOJA+NUM))						
							While !SF1->(Eof())			
								If SF1->( F1_FILIAL + F1_FORNECE + F1_LOJA + F1_DOC ) == xFilial("SF1")+(cAliasQry)->(CLIFOR+LOJA+NUM)				
									If SF1->(F1_PREFIXO) == SE2->E2_PREFIXO .And. At(","+Alltrim(SF1->F1_ESPECIE)+",",cNewDocSpd)>0
										lSpdMt100 := .T.		
										Exit								
									Endif
								Else
									Exit
								EndIf											
								SF1->(Dbskip())								
							Enddo											   					  		
						Endif
						RestArea(aAreaSF1)					
					Endif			
				Endif
				

				If AllTrim((cAliasQry)->ORIGEM) == "MATA460"
					aAreaSF2 := SF2->(GetArea())
					DbSelectArea("SF2")
					DbSetOrder(1)
					If ( If( aAlias[nA] == "SE1", DbSeek(xFilial("SF2")+(cAliasQry)->(NUM + SERIE + CLIFOR + LOJA)) , .F. ) .OR.;
						DbSeek(xFilial("SF2")+(cAliasQry)->(NUM + PREFIXO + CLIFOR + LOJA)) ) .and.;
						At("," + Alltrim(SF2->F2_SERIE) + ",", cNewDcsSpd) > 0
						lSpdMt460 := .T.
					Endif
					RestArea(aAreaSF2) 
				Endif
			Endif				
			
			If aAlias[nA] $ "SE1_SE2"	.And. (cAliasQry)->MULTNAT = "1"			
				aAreaSEV := SEV->(GetArea())
				DbSelectArea("SEV")
				DbSetOrder(1)
				//Verificar se o titulo possui multiplas naturezas.
				SEV->(DbSeek(xFilial("SEV")+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA)))
				While SEV->(EV_PREFIXO+EV_NUM+EV_PARCELA+EV_TIPO+EV_CLIFOR+EV_LOJA) ==;
						(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA) .And. !SEV->(EOF())					
						
						nVrRateio	:=	0
						 
						If SEV->EV_IDENT <> "1" // 1=Rateio de Inclusao 2=Rateio de Baixa 
							SEV->(Dbskip())
							Loop							
						Endif
						
						If	(aAlias[nA] == "SE2" .And. SEV->EV_RECPAG == "P") .Or. (aAlias[nA] == "SE1" .And. SEV->EV_RECPAG == "R") 							
							aAreaSED := SED->(GetArea()) //Caso a natureza apure Pis ou Cofins
							DbSelectArea("SED")							
							DbSetOrder(1)			
							If DbSeek(xFilial("SED")+ SEV->EV_NATUREZ) 
								If (!Empty(SED->ED_APURCOF) .Or. !Empty(SED->ED_APURPIS))
									
									If aAlias[nA] == "SE1"										
										If nMoeda > 1
										  	nVrRateio	:= Round((SEV->EV_VALOR/(cAliasQry)->VALOR) * (cAliasQry)->VLCRUZ,2)
										Else
											nVrRateio	:= SEV->EV_VALOR										
										Endif											
									ElseIf aAlias[nA] == "SE2"  																					
										If nMoeda > 1 
											If (cAliasQry)->TXMOEDA == 0
												nVrRateio	:=	xMoeda((nBasePis*SEV->EV_PERC),(cAliasQry)->MOEDA, 1,STOD((cAliasQry)->EMISSAO)) 
											Else
												nVrRateio	:=	Round((nBasePis*SEV->EV_PERC)*(cAliasQry)->TXMOEDA,2)												
											Endif	
										Else 
											nVrRateio	:=	Round((nBasePis*SEV->EV_PERC),2)																							
										Endif																					
									Endif									
									
									aAdd(aRegSped,{aAlias[nA],; //1
														(cAliasQry)->MULTNAT,;//2
														SEV->EV_RECPAG,;//3
														nVrRateio,;//4
														SEV->EV_PERC,;//5
														SED->ED_CODIGO,;//6
														SED->ED_APURPIS,;//7
														SED->ED_APURCOF,;//8
														SED->ED_CSTPIS,;//9
														SED->ED_CSTCOF,;//10
														SED->ED_PCAPPIS,;//11
														SED->ED_PCAPCOF,;//12
														SED->ED_CLASFIS,;//13
														SED->ED_INDCMLT,;//14
														SED->ED_TABCCZ,;//15
														SED->ED_CODCCZ,;//16
														SED->ED_GRUCCZ,;//17
														Dtos(SED->ED_DTFCCZ),;//18
														SED->ED_CONTA,;//19
														SED->ED_CCD,;//20
														SED->ED_CCC,;//21
														SED->ED_CLASFIS,;//22
														SEV->EV_PERC,Iif (aAlias[nA] == "SE1" .Or. aAlias[nA] == "SE2",(cAliasQry)->NUMPRO,""),;
														Iif (aAlias[nA] == "SE1" .Or. aAlias[nA] == "SE2",(cAliasQry)->INDPRO,""),;
														Iif(!Empty(SED->ED_REDPIS) .And. Empty(SED->ED_PERCPIS),(SED->ED_REDPIS/100),0),;
														Iif(!Empty(SED->ED_REDCOF) .And. Empty(SED->ED_PERCCOF),(SED->ED_REDCOF/100),0),;
														Iif(lDescDoc,(cAliasQry)->HIST,"")})																																						
									aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})																																					
								Endif			
							
							Endif
							RestArea(aAreaSED)								        		
						Endif
					  	SEV->(Dbskip())
				Enddo
			   RestArea(aAreaSEV)										
        	ElseIf  !(Len(aRegApl)>0) .and. !(aAlias[nA] == "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatNTrib)>0) //Nao trata de multiplas naturezas e nao for desconto incondicional a pagar
				aAdd(aRegSped,{aAlias[nA],"2","",(cAliasQry)->VALOR,0,"","","","","","","","","","","","","","","","",""})	
				aAdd(aSpd, {Iif(lEdF100,(cAliasQry)->ED_F100, "1")})
				SE5->(dbSkip())					
			Endif		
		Endif
			
		//Proteção pois campo E5_MOEDA é caracter
		If aAlias[nA] == "SEI" .and. !lSEI_
			If SE5 -> E5_MOEDA $ ("M1;R")
				nMoeda := 1
			Elseif SE5 -> E5_MOEDA $ ("M")
				nMoeda := Val(SUBSTR(SE5->E5_MOEDA,2,1))
			Else
				nMoeda := Val(SE5 -> E5_MOEDA)
			Endif
		Endif
		If lEnvReg .Or. lSpdMt100 .Or. lSpdMt460
			
			For nJ	:= 1 To Len(aRegSped)			             
			
				If  (aAlias[nA] = "SE1" .And. (cAliasQry)->TIPO $ MVRECANT) //.Or. (aAlias[nA] = "SE5" .And. (cAliasQry)->TIPODOC $ MVRECANT)						 		
					Loop
				Endif	
				
				If lTotF100 .And. aAlias[nA] $ "SEI_SE5_SE1" // Leva valor total para RH
					
					If aAlias[nA] = "SE5" .And. (cAliasQry)->RECPAG <> "R"
					  	Loop
					Endif						
				
					nValTit	:=	0
					//Calcular o valor que deve ser enviado.
					If aAlias[nA] == "SEI"
						If lSEI_
							If Len(aRegApl) > 0
								nTotF100  += aRegSped[nJ,4]
								nValTit	 := aRegSped[nJ,4]							
							Else
								nTotF100  += If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],If((cAliasQry)->MOEDA>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR))
								nValTit	 := If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],If((cAliasQry)->MOEDA>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR))								
							Endif	
						Else
							nTotF100  += If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],If( nMoeda>1 ,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR)) 
							nValTit	 := If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],If( nMoeda>1 ,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR)) 
						Endif
					ElseIf aAlias[nA] = "SE1"
						nTotF100  += If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,4],If((cAliasQry)->MOEDA>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR))		   												
						nValTit 	 := If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,4],If((cAliasQry)->MOEDA>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR))     																				
					ElseIf  aAlias[nA] = "SE5"	//Descontos, juros, multas e variacoes cambiais enviadas no SPED PIS/COFINS.
						nTotF100 += If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],(cAliasQry)->VALOR)
						nValTit	:=	If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],(cAliasQry)->VALOR)
			  		Endif   				  	
				  		
			  		(cAliasRH)->(DbAppend())
					(cAliasRH)->VALOR		:= nValTit		  //VALOR													
					(cAliasRH)->TABELA	:= aAlias[nA]	 																							  		
				
					If Len(aRegApl) > 0			
							(cAliasRH)->FILIAL		:=	aRegSped[1,6] //FILIAL
							(cAliasRH)->PREFIXO		:=	"" // PREFIXO
							(cAliasRH)->NUMERO		:=	aRegSped[1,8]	//NUMERO
							(cAliasRH)->PARCELA		:=	""
							(cAliasRH)->TIPO			:=	aRegSped[1,11] 
							(cAliasRH)->CLIENTE		:=	aRegSped[1,12]  + aRegSped[1,13] //BANCO + AGENCIA
							(cAliasRH)->LOJA			:=	aRegSped[1,14] //CONTA
							(cAliasRH)->NATUREZ		:=	aRegSped[1,15] //NATUREZ								
							(cAliasRH)->VALOR			:= 	aRegSped[nJ,4] //VALOR													
 							(cAliasRH)->DTMOV  := aRegSped[1,16]	// -- Data
					Else						
							(cAliasRH)->FILIAL		:=	(cAliasQry)->FILIAL  //FILIAL
							(cAliasRH)->PREFIXO		:=	Iif(aAlias[nA] = "SEI" ,"",(cAliasQry)->PREFIXO ) //PREFIXO
							(cAliasRH)->NUMERO		:=	(cAliasQry)->NUM		 //NUMERO
							(cAliasRH)->PARCELA		:=	Iif(aAlias[nA] = "SEI","",(cAliasQry)->PARCELA ) //PARCELA
							(cAliasRH)->TIPO			:=	Iif(aAlias[nA] = "SE5",(cAliasQry)->TIPODOC,(cAliasQry)->TIPO)  	//TIPO
							(cAliasRH)->CLIENTE		:=	Iif(aAlias[nA] = "SEI",Alltrim((cAliasQry)->BANCO)+" - "+Alltrim((cAliasQry)->AGENCIA),(cAliasQry)->CLIFOR)  //CLIENTE
							(cAliasRH)->LOJA			:=	Iif(aAlias[nA] = "SEI",Alltrim((cAliasQry)->CONTA),(cAliasQry)->LOJA)    //LOJA
							(cAliasRH)->NATUREZ		:=	Iif(aAlias[nA] = "SE5","",(cAliasQry)->NATUREZ) 	//NATUREZ
							(cAliasRH)->DTMOV  := If(aAlias[nA] $ "SE5_SEI",(cAliasQry)->DATAM,(cAliasQry)->EMISSAO)	// -- Data
					Endif											  																										
			  Endif				

				aF100		:= Array(34)
				cCstPis	:=	""	
				cCstCof	:=	""	
				lEnvBaseP 	:=  .T.
				lEnvBaseC 	:=  .T.
				lBaseImp	:=	.T.
									
				If aAlias[nA] $ "SE1_SE2"										
					If 	(lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatNTrib) > 0 .and. nj == 1 )	
						cCstPis	:= aNatNTrib[1][5]
						cCstCof	:= aNatNTrib[1][6]
					Else
						cCstPis	:=	If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,9],(cAliasQry)->CSTPIS)
						cCstCof	:=	If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,10],(cAliasQry)->CSTCOF)
					EndIf										
					If aAlias[nA] = "SE1" .And. (cCstPis $ "07_08_09_49")  	
						lEnvBaseP	:=	.F.	
					Endif	
					If aAlias[nA] = "SE1" .And.	(cCstCof $ "07_08_09_49")
						lEnvBaseC	:=	.F.	
					Endif					
					If aAlias[nA] = "SE2" .And. (cCstPis $ "70_71_72_74_75_98")  							
						lEnvBaseP	:=	.F.						                                                                  
					Endif	
					If aAlias[nA] = "SE2" .And. (cCstCof $ "70_71_72_74_75_98")	
						lEnvBaseC	:=	.F.		
					Endif					
				Endif						
				
				If aAlias[nA] $ "SE5_SEI"					
					If aAlias[nA] == "SE5"
						//Desconto Condicional em caso de titulo a pagar.
						If (cAliasQry)->RECPAG == "R" .Or. Alltrim(aRegSped[nJ,3])=="R"	//SE1					
							nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE1"}) //nI	:=	1
						ElseIf (cAliasQry)->RECPAG == "P" .Or. Alltrim(aRegSped[nJ,3])=="P"//SE2					
							nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE2"}) //nI	:=	2                                                       							
						Endif											
					ElseIf aAlias[nA] == "SEI"
						If Len(aRegApl) >0
							nI				:=	Ascan(aNatNTrib, {|x| x[2]= Alltrim(aRegSped[nJ,15])})	
						Else 
							nI				:=	Ascan(aNatNTrib, {|x| x[2]= Alltrim((cAliasQry)->NATUREZ)})																			
						Endif						
					Endif
												
					If Len(aNatNTrib)>0 .and. !Empty(aNatNTrib[nI,3])
						If aAlias[nA] = "SE5"  .Or. Len(aRegApl) > 0
							nValorPis := Round(aRegSped[nJ,4] * (aNatNTrib[nI,13]/100),2) 
						Else
							If !lSEI_
								nValorPis := Round(Iif( nMoeda > 1 ,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR)*(aNatNTrib[nI,13]/100),2)
							Else
								nValorPis := Round(Iif(nMoeda > 1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR)*(aNatNTrib[nI,13]/100),2)
							Endif									
						Endif							
					Else
						nValorPis := 0
					Endif	

					If Len(aNatNTrib)>0 .and. !Empty(aNatNTrib[nI,4])
						If aAlias[nA] = "SE5" .Or. Len(aRegApl) > 0
							nValorCof := Round(aRegSped[nJ,4] * (aNatNTrib[nI,14]/100),2) 						 
						Else
							If !lSEI_
								nValorCof := Round(If(nMoeda>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR)* (aNatNTrib[nI,14]/100),2)
							Else	
								nValorCof := Round(If(nMoeda>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR)* (aNatNTrib[nI,14]/100),2)
							Endif
						Endif								
					Else
						nValorCof := 0
					Endif											
				Else														
					If aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
						nBasePis	:= (cAliasQry)->DECRESC
					Else
						nBasePis	:=	aBasePis[1]
					EndIf
					nBase	:= nBasePis	 
						
					If (aAlias[nA] = "SE1" .And. (cAliasQry)->DESDOBR = "1")								
						nBase	:=	(cAliasQry)->VALOR								
						If (cAliasQry)->TPDESC == "I" .And. (cAliasQry)->DECRESC > 0                       
                    	nBase	-= (cAliasQry)->DECRESC
						Endif		
					Endif

					If aAlias[nA] = "SE2" 								
						If lDescSe2 .And. (cAliasQry)->TPDESC == "I" .And. (cAliasQry)->DECRESC > 0                       
                    		nBase	-= nDescBxI
						Endif		
					Endif
					If aRegSped[nJ,2] == "1" //Multiplas naturezas 
						If nMoeda = 1  .And. lBaseImp 
							nBase	:= nBasePis * aRegSped[nJ,23]
						Else
							nBase	:=	aRegSped[nJ,4]
						Endif   
							
						//Calculando reducao do valor em natureza que contenha somente apuracao de Pis e Cofins.			
						If aRegSped[nJ,26] > 0 //Reducao de Apuracao de PIS.
							nBase	:=	nBase	* aRegSped[nJ,26] 								
						ElseIf aRegSped[nJ,27] > 0 //Reducao de Apuracao de COFINS.
							nBase	:=	nBase	* aRegSped[nJ,27] 																
						Endif							
					Endif  
					
					nDescBx	:=	0 
					If aAlias[nA] = "SE2"																			
						lTitRet	:=	.F.
						If STOD((cAliasQry)->EMISSAO) >= dLastPcc
							nVlMinImp	:= 0
						EndIf
						If nBase <= nVlMinImp 
							SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES	
							If SFQ->(DbSeek(xFilial("SFQ")+"SE2"+ (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ))               
								lTitRet	:=	.T. //Caso o titulo seja retido em outro.
							Endif														
						Endif					         							
							
						SFQ->(DbSetOrder(1)) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
						If SFQ->(DbSeek(xFilial("SFQ")+"SE2"+ SE2->E2_PREFIXO + SE2->E2_NUM + SE2->E2_PARCELA + SE2->E2_TIPO + SE2->E2_FORNECE + SE2->E2_LOJA))
							lTitRet	:=	.T.	//Caso o titulo seja titulo que retem outro.																	  	         	
			  			Endif											      			
			
						nX	:=	 Ascan(aRecNTrib, {|x| x[1] == ((cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) }) 
						If nX > 0 .And. !(Alltrim(cBloco) $ "1900_F550")
					      nDescBx	:=	If(aRegSped[nJ,2] == "1" .And. nMoeda = 1 ,(aRecNTrib[nX,2]*aRegSped[nJ,23]),aRecNTrib[nX,2])
					      //If nMoeda > 1
					      //	nDescBx	:=	nDescBx	/ nProp
					      //Endif						      
					      nBase	:= nBase - nDescBx 
						Endif														
					Endif                                                                    																	                     									                     							

					If aAlias[nA] = "SE1"					
						nX	:=	 Ascan(aRecNTrib, {|x| x[1] == ((cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) }) 
						If nX > 0	.And. !(Alltrim(cBloco) $ "1900_F550")	
					      nDescBx	:=	If(aRegSped[nJ,2] == "1" .And. nMoeda = 1 ,(aRecNTrib[nX,2]*aRegSped[nJ,23]),aRecNTrib[nX,2])
					      //If nMoeda > 1
					      //	nDescBx	:=	nDescBx	/ nProp
					      //Endif						      
					      nBase	:= (nBase - nDescBx )
						Endif																			
					Endif					

					If aAlias[nA] == "SE1"	.And. Alltrim(cBloco) = "F100"  .And. nVrCanc > 0
						nBase	:=	nBase - nVrCanc						
					Endif										 					
					 											
					If aAlias[nA] $ "SE1_SE2" .And. aRegSped[nJ,2] == "1" .And. aRegSped[nJ,11] > 0
						//nValorPis := Round(If(nMoeda>1,nBase*nProp,nBase) * (aRegSped[nJ,11]/100),2)
						nValorPis := Round(nBase * (aRegSped[nJ,11]/100),2)						
					ElseIf aAlias[nA] $ "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. len(aNatnTrib) > 0 .and. aNatnTrib[1][13] > 0 .and. nj == 1
						nValorPis := Round(nBase * (aNatnTrib[1][13]/100),2)
					ElseIf !Empty((cAliasQry)->APURPIS)
						//nValorPis := Round(If(nMoeda>1,nBase*nProp,nBase) * ((cAliasQry)->PCAPPIS/100),2)
						nValorPis := Round(nBase * ((cAliasQry)->PCAPPIS/100),2)
					Else
						nValorPis := 0
					Endif													
					
					If aAlias[nA] $ "SE1_SE2" .And. aRegSped[nJ,2] == "1" .And. aRegSped[nJ,12] > 0
						//nValorCof := Round(If(nMoeda>1,nBase*nProp,nBase) * (aRegSped[nJ,12]/100),2) 
						nValorCof := Round(nBase * (aRegSped[nJ,12]/100),2) 
					ElseIf aAlias[nA] $ "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. len(aNatnTrib) > 0 .and. aNatnTrib[1][13] > 0 .and. nj == 1
						nValorCof := Round(nBase * (aNatnTrib[1][14]/100),2)
					ElseIf !Empty((cAliasQry)->APURCOF) 
						//nValorCof := Round(If(nMoeda>1,nBase*nProp,nBase) * ((cAliasQry)->PCAPCOF/100),2) 
						nValorCof := Round(nBase * ((cAliasQry)->PCAPCOF/100),2) 
					Else
						nValorCof := 0
					Endif				
				Endif				
				            
				If aAlias[nA] $ "SE5" 		
					cCstPis	:=	aNatNTrib[nI,5]	//CST PIS
					cCstCof	:=	aNatNTrib[nI,6]	//CST COFINS  		
					If (cCstPis $ "07_08_09_49") //Tabela SE1
						lEnvBaseP :=	.F.
					Endif	
					If (cCstCof $ "07_08_09_49")
					 	lEnvBaseC := .F.
					Endif				
				Endif									
				
				If  aAlias[nA] == "SE5"
					aF100[1]  := aRegSped[nJ,7]	// -- Data				
				ElseIf Len(aRegApl) > 0
					aF100[1]  := aRegSped[nJ,16]									
				Else										
					If (aAlias[nA] == "SE2" .And. !Empty(cNatSe2) .And. (cAliasQry)->DESDOBR == "S" .And. (cAliasQry)->STATUS == " ")  					
						aF100[1]  	:= (cAliasQry)->VENCTO	
					ElseIf aAlias[nA] == "SE2" .And. (cAliasQry)->SALDO == 0 .And. (cAliasQry)->CLASFIS == "08" .And. !lSpdDtEm
						aF100[1]  	:=  (cAliasQry)->BAIXA
					Else					                																						
						aF100[1]  := If(aAlias[nA] $ "SE5_SEI",(cAliasQry)->DATAM,(cAliasQry)->EMISSAO)	
					Endif	
				Endif
		  		
		  		If aAlias[nA] == "SEI" // -- Valor
					If lSEI_
						If Len(aRegApl) > 0
							aF100[2]  := aRegSped[nJ,4]						
						Else
							aF100[2]  := If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],If(nMoeda>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR)) 
						Endif							
					Else
						aF100[2]  := If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],If( nMoeda>1 ,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR)) + Iif((cAliasQry)->(FieldPos("TIPODOC")) > 0 .And. (cAliasQry)->TIPODOC = 'CM' .And. (cAliasQry)->(FieldPos("TOT_VM")) > 0, (cAliasQry)->TOT_VM, 0)   
					Endif
				ElseIf aAlias[nA] = "SE1" 
					If aRegSped[nJ,2] == "1" .And. nMoeda == 1//Multiplas naturezas 
						aF100[2]  :=  aRegSped[nJ,4]					
					ElseIf nMoeda > 1
						aF100[2]  := If((nBase*nProp) <> (cAliasQry)->VLCRUZ ,(cAliasQry)->VLCRUZ,nBase*nProp)  // -- Valor						
					Else
						aF100[2]  := (cAliasQry)->VALOR  	// -- Valor	  						
					Endif											
				ElseIf aAlias[nA] = "SE2"				 																				
					If	aRegSped[nJ,2] == "1" 
						aF100[2]  := aRegSped[nJ,4]    						
					Else 
						If !(Alltrim(cBloco) $ "1900_F550")
							If lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. nj == 1
								aF100[2]  := If(nMoeda>1,nBase+nDescBx,nBasePis)
							Else
								aF100[2]  := If(nMoeda>1,nBase+nDescBx,If(lTitRet,aBasePis[1],aBasePis[2]))
							EndIf 							 							
						Else
							aF100[2]  := If(nMoeda>1,nBase+nDescBx,If(nX>0,(aBasePis[2]-aRecNTrib[nX,2]+aRecNTrib[nX,3]),If(lTitRet,aBasePis[1],aBasePis[2]))) 													
						Endif	
					Endif											
				Else
					aF100[2]  := If(aRegSped[nJ,2] == "1" .Or. nDescBxC > 0 .or. (aRegSped[nJ,2] == "2" .and. nCm > 0),aRegSped[nJ,4] + Iif((cAliasQry)->(FieldPos("TIPODOC")) > 0 .And. (cAliasQry)->TIPODOC = 'CM' .And. (cAliasQry)->(FieldPos("TOT_VM")) > 0, (cAliasQry)->TOT_VM, 0), (cAliasQry)->VALOR)  
		  		Endif                     
                               
		  		If aAlias[nA] $ "SE5_SEI" 
		  			aF100[3]  :=  aNatNTrib[nI,5]	
		  		Else			  		
					If SED->(FieldPos("ED_CSTPIS")) > 0
			   			If aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
			   				aF100[3]  :=  aNatNTrib[1,5]
			   			Else
							aF100[3]  :=  (cAliasQry)->CSTPIS
						EndIf	
					Else 
						aF100[3]  :=  "" 
					Endif
				Endif	
									
				If aAlias[nA] == "SEI" // -- Base PIS						
					If lSEI_
						If Len(aRegApl) > 0
							aF100[4]  := aRegSped[nJ,4]
						Else
							aF100[4]  := If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],Iif(nMoeda>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR))// -- Base PIS
						Endif
					Else
						aF100[4]  := If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],Iif( nMoeda>1 ,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR))// -- Base PIS
					Endif
				ElseIf aAlias[nA] $ "SE1_SE2"	
					If !lEnvBaseP											
						aF100[4]  :=	0
					Else						
						aF100[4]  := nBase // -- Base PIS													
					Endif												
            Else					
					If !lEnvBaseP 
						aF100[4]  :=	0
					Else               
						aF100[4]  := If(aRegSped[nJ,2] == "1" .Or. nDescBxC > 0 .or. (aRegSped[nJ,2] == "2" .and. nCm > 0),aRegSped[nJ,4],(cAliasQry)->VALOR)	// -- Base PIS										
					Endif				
				Endif					
				
				If aAlias[nA] $ "SE1_SE2" .And. aRegSped[nJ,2] == "1" .And. aRegSped[nJ,11] > 0 //Aliquota PIS
					aF100[5]  := aRegSped[nJ,11] 				
				ElseIf	aAlias[nA] $ "SE5_SEI"					
					aF100[5]  := aNatNTrib[nI,13]		
				ElseIf aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
					aF100[5]  := aNatNTrib[1,13]
				Else
					aF100[5]  := (cAliasQry)->PCAPPIS 	
				Endif										
				
				aF100[6]  :=  nValorPis            // -- Valor do PIS			  		

		  		If aAlias[nA] $ "SE5_SEI" 
		  			aF100[7]  :=  aNatNTrib[nI,6]		
		  		Else
					If SED->(FieldPos("ED_CSTCOF")) > 0
			   			If aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
			   				aF100[7]  :=  aNatNTrib[1,6]
			   			Else
							aF100[7]  :=  (cAliasQry)->CSTCOF
						EndIf	
					Else 
						aF100[7]  :=  "" 
					Endif
				EndIf
					
				If aAlias[nA] == "SEI"	// -- Base COFINS			                                         
					If lSEI_
						If Len(aRegApl) > 0
							aF100[8]  := aRegSped[nJ,4]						
						Else							
							aF100[8]  := If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],If(nMoeda>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR))// -- Base COFINS   
						Endif							
					Else
						aF100[8]  := If(aRegSped[nJ,2] == "1",aRegSped[nJ,4],If(nMoeda>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALOR))// -- Base COFINS
					Endif
				ElseIf aAlias[nA] $ "SE1_SE2"	
					If	!lEnvBaseC						
						aF100[8]  :=	0
					Else
						aF100[8]  := nBase// -- Base COFINS																																																		
					Endif												
				Else                    
					If !lEnvBaseC 
						aF100[8]  :=	0
					Else               
						aF100[8]  := If(aRegSped[nJ,2] == "1" .Or. nDescBxC > 0 .or. (aRegSped[nJ,2] == "2" .and. nCm > 0),aRegSped[nJ,4],(cAliasQry)->VALOR)// -- Base COFINS						
					Endif				
				Endif

				If aAlias[nA] $ "SE1_SE2" .And. aRegSped[nJ,2] == "1" .And. aRegSped[nJ,12] > 0 //Aliquota COFINS
					aF100[9]  := aRegSped[nJ,12] 				
				ElseIf	aAlias[nA] $ "SE5_SEI"					
					aF100[9]  := aNatNTrib[nI,14]		
				ElseIf aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
					aF100[9]  := aNatNTrib[1,14]		
				Else					
					aF100[9]  := (cAliasQry)->PCAPCOF	
				Endif					
				
				aF100[10] :=  nValorCof            // -- Valor do COFINS
		  		
		  		If aAlias[nA] $ "SE5_SEI" 			
					aF100[11]  := aNatNTrib[nI,11]	
				Else		  		
			   		If aRegSped[nJ,2] == "2"
			   			If aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
							aF100[11]  := aNatNTrib[1,11]
						Else
							aF100[11]  :=  (cAliasQry)->CLASFIS
						EndIf
					ElseIf aRegSped[nJ,2] == "1"
						aF100[11] := aRegSped[nJ,13] 
					Else
						aF100[11] := ""
					EndIf		      
				Endif

				If aAlias[nA] $ "SE5_SEI"
					aF100[12] := aNatNTrib[nI,3]			
					aF100[13] := aNatNTrib[nI,4]			
				Else					
					If aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
						aF100[12] := aNatNTrib[1,3]			
						aF100[13] := aNatNTrib[1,4]
					Else					
						aF100[12] := (cAliasQry)->APURPIS	
						aF100[13] := (cAliasQry)->APURCOF
					EndIf	
				Endif
							
				If aAlias[nA] $ "SE5_SEI"		//Indice de Cumulatividade
					If aNatNTrib[nI,12] == "1" 
					 	cIndCmlt := "0" //Cumulativo
					ElseIf aNatNTrib[nI,12] == "2" 
					  	cIndCmlt := "1" //Não Cumulativo
					Else
						cIndCmlt := ""
					EndIf				    	
					aF100[14] := cIndCmlt				
				ElseIf aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
					If aNatNTrib[1,12] == "1" 
					 	cIndCmlt := "0" //Cumulativo
					ElseIf aNatNTrib[1,12] == "2" 
					  	cIndCmlt := "1" //Não Cumulativo
					Else
						cIndCmlt := ""
					EndIf				    	
					aF100[14] := cIndCmlt
				Else				
					If (cAliasQry)->INDCMLT == "1" 
						cIndCmlt := "0" //Cumulativo
					ElseIf (cAliasQry)->INDCMLT == "2"
						cIndCmlt := "1" //Não Cumulativo
					EndIf				    	
					aF100[14] := cIndCmlt
				Endif
									
				aF100[15] := aAlias[nA]            //-- Tabela			
				
				If aAlias[nA] == "SE5"	
					aF100[16] := aRegSped[nJ,8]  		//-- Recno									
				ElseIf  Len(aRegApl) > 0
					aF100[16] := aRegSped[nJ,17]  				
				Else
 					aF100[16] := (cAliasQry)->RECNO    
				Endif
		
	            lCodPart	:= .T.
				If lSpdPart	//Ponto de entrada SPDF1004 permite enviar o campo COD_PART vazio.
					lCodPart	:=	ExecBlock ("SPDF1004",.F.,.F.,{(cAliasQry)})	
				Endif				
				
				If !lCodPart	.Or. aAlias[nA] == "SEI"	//Ponto de entrada para enviar o campo COD_PART vazio.
					aF100[17] := ""								//-- Cod. Fornecedor/Cliente + Loja
            Else 
              	If aAlias[nA] == "SE5"	
						aF100[17] := aRegSped[nJ,6]	//-- Cod. Fornecedor/Cliente - sem a loja						
    				Else											
						aF100[17] := ((cAliasQry)->CLIFOR+(cAliasQry)->LOJA)	
					Endif	
				Endif
				
				If	aAlias[nA] $ "SE5_SEI"					
					aF100[18] := aNatNTrib[nI,7] 			
					aF100[19] := aNatNTrib[nI,8] 			
					aF100[20] := aNatNTrib[nI,9]			
					aF100[21] := aNatNTrib[nI,10]			
				ElseIf aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
					aF100[18] := aNatNTrib[1,7] 			
					aF100[19] := aNatNTrib[1,8] 			
					aF100[20] := aNatNTrib[1,9]			
					aF100[21] := aNatNTrib[1,10]
				Else 
					aF100[18] := (cAliasQry)->TABCCZ   
					aF100[19] := (cAliasQry)->CODCCZ   
					aF100[20] := (cAliasQry)->GRUCCZ	
					aF100[21] := (cAliasQry)->DTFCCZ	
				Endif						
									
				If aAlias[nA] == "SE1"					
					aF100[22] := (cAliasQry)->TIPOA1	
				ElseIf  aAlias[nA] == "SE5"
					aF100[22]  := aRegSped[nj][3]	
				Else
					aF100[22] := ""	
				Endif
								
				If	aAlias[nA] $ "SE1_SE2" // Trata geracao de conta contabil
					If aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
						aF100[23] := aNatNTrib[1,16]
					ElseIf Len(aRegSped[nJ]) > 18 .AND. (cAliasQry)->( FieldPos( "EDCONTA" ) ) > 0
						aF100[23] := If(aRegSped[nJ,2] == "1",aRegSped[nJ,19],(cAliasQry)->EDCONTA)	//-- Cod. Cta Analista Contabil
					Else
						aF100[23] := "" 
					EndIf						 											 					
				ElseIf	aAlias[nA] == "SE5" .Or. (aAlias[nA] == "SEI" .And. !lSEI_) 
					If Len(aNatnTrib) > 0 .and. nj == 1
						aF100[23] := AllTrim(aNatNTrib[nI,16])
					ElseIf Len(aRegSped[nJ]) > 18 .AND. (cAliasQry)->( FieldPos( "EDCONTA" ) ) > 0
						aF100[23] := aRegSped[nJ,19] //-- Cod. Cta Analista Contabil
					Else
						aF100[23] := "" 
					EndIf		
				Else //SEI
					aF100[23] := ""   
				Endif																				

				// Trata geracao de centro de custo
				If	aAlias[nA] == "SE2"
					// Soh grava centro de custo para CST entre 50 e 66 conforme definicao em layout SPED F100.
					If	( aF100[3] >= "50" .And. aF100[3] <= "66" ) .Or. ;
						( aF100[7] >= "50" .And. aF100[7] <= "66" )
						aF100[24] := If(aRegSped[nJ,2] == "1",aRegSped[nJ,20],(cAliasQry)->EDCCD)	//-- Codigo Centro de Custo
					Else
						aF100[24] := ""   
					Endif																		
				Else
					aF100[24] := ""   
				Endif																				

				If aAlias[nA] == "SE1"
    				aF100[25] := (cAliasQry)->SCORGP
    			Else
					aF100[25] := ""									
				Endif
    			
				
				If	aAlias[nA] $ "SE1_SE2"	//-- Cod. Natureza						 	
					If aAlias[nA] = "SE2" .and. lDescSe2 .and. (cAliasQry)->TPDESC == "C" .and. (cAliasQry)->DECRESC > 0 .and. Len(aNatnTrib) > 0 .and. nj == 1
						aF100[26] := aNatNTrib[1,2]
					Else
						aF100[26] := If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,6],(cAliasQry)->NATUREZ)	//-- Cod. Natureza
					EndIf					 										
				ElseIf	aAlias[nA] $ "SE5_SEI"
					aF100[26] := aNatNTrib[nI,2]	
				Else 
					aF100[26] := ""   
				Endif																							  
				If	aAlias[nA] == "SE1" .Or. aAlias[nA] == "SE2" 			
			      If aRegSped[nJ,2] == "1"
						aF100[27] :=	aRegSped[nJ,24] 
						aF100[28] :=	aRegSped[nJ,25]	
			      Else
						aF100[27] := (cAliasQry)->NUMPRO	
						aF100[28] := (cAliasQry)->INDPRO	
					Endif	
				Else					 
					aF100[27] := ""   
					aF100[28] := ""   
				Endif	
				
				If	(aAlias[nA] == "SE1"	.And. lDescDoc) .Or.  (aAlias[nA] == "SE2" .And. lDescDoc)
						If aRegSped[nJ,2] == "1"                    
							aF100[29] := aRegSped[nJ,28]	//-- Descricao da Documento/Operacao
						Else
							aF100[29] := (cAliasQry)->HIST											 
						Endif
				ElseiF aAlias[nA] == "SEI" .And. lDescDoc .And. !lSEI_//Movimentos com natureza de Aplicação Fianceira(MV_APLNAT) de origem SE5 (MV_APLAPRO=.F. e MV_APLFIN=.T.)
					aF100[29] := (cAliasQry)->HIST													
				Else					 
					aF100[29] := ""   
				Endif	
								
				If lSPD10019
					aF100[29] := ExecBlock("SPD10019",.F., .F., {aF100[29]})
				EndIf
																																				  
				If aAlias[nA] == "SE1"	.And. Alltrim(cBloco) $ "1900_F550"  .And. !lBxOk 
					aF100[30] :=	.T. //Status de Cancelado.
				Else
					aF100[30] := 	.F.
				Endif					
					
				If aAlias[nA] == "SE1"	.And. Alltrim(cBloco) = "F550" 
				   
	  				aF100[31] := 0	

					If  nVrCanc > 0 
						aF100[31] := nVrCanc			
					Endif	
		 			
		 			nX	:=	 Ascan(aRecNTrib, {|x| x[1] == ((cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) }) 
					If nX > 0 //Desconto incondicional deve ser destacados nos campos 4 e 9 do bloco F550.
						aF100[31] := aRecNTrib[nX,2] 
					Endif
		 				
				Else
					aF100[31] := 0					
				Endif
				
				//POsição 32 - retorna se é pagar ou receber para verificação do campo 3
				If aAlias[nA] == "SE1"					
					aF100[32] := "R" 	
				ElseIf  aAlias[nA] == "SE5"
					aF100[32]  := aRegSped[nj][3]
				ElseIf aAlias[nA] == "SE2"
					aF100[32]  := "P"
				Else
					aF100[32] := ""	
				Endif
				
				//Posição 33 - retorna o campo ED_F100, para verificar se soma no bloco totalizador 0111 e gera o bloco F100 (1-Sim) ou somente gera o bloco F100(2-Não)
				If Len(aSpd) > 0 
					aF100[33]	:= aSpd[nj][1]
				Else
					aF100[33]	:= "1"
				EndIf
				
				//Posição 34 - retorna o campo ED_CPRB, para verificar se vai compor o saldo da CPRB.
				aF100[34] := cCprb

				aAdd(aReturn, aF100)
				
				nValorPis := 0
				nValorCof := 0
				
			Next																											
		EndIf 
		
		//No caso de envio de descontos, juros, multas ou variacoes cambiais o proximo registro está posicionado.
		aNatNTrib	:= {}	
		cTpApl		:= cTpAplAnt            
		
		//controla o skip para não ser executado duas vezes na mesma Tmp
		If lDbSkip
			(cAliasQry)->(dbSkip())	
		EndIf
	EndDo
	
	
	(cAliasQry)->(dbCloseArea())
	aNatNTrib := {}
	lRenTribR := .T.
	lRenTribD := .T.	

Next nA	


If lTotF100 	

	If file(cNomeRH) 
		FErase(cNomeRH)
	Endif    
	
	FRename(cArqRH+GetDBExtension(),cNomeRH) 
Endif

If lSPD100FIN
	aReturn := ExecBlock("SPD100FIN",.F., .F., {aReturn})
EndIf

Endif

Return Iif( lTotF100 , nTotF100 , aReturn )


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINSPDF600

Funcão para retornar os títulos que compoem o bloco F600 do SPED PIS/COFINS
Arquivo anterior: MATXATU.PRX

@Author	TOTVS
@since	28/04/2011
/*/
//-----------------------------------------------------------------------------------------------------
Function FinSpdF600(nMesRef,nAnoRef)       

Local aReturn		:= {}
Local cQuery 		:= ""
Local aF600  		:= {}
Local cAliasQry		:= "" 
Local aStruct		:= {}    
Local nX			:= 0 
Local nBase			:= 0
Local cIndCmlt		:= ""
Local dLastDay  	:= ""
Local lSpdMotBx		:= ExistBlock("SPDF6001")
Local lSpdNat		:= ExistBlock("SPDF6002")  
Local lSpdCodRec  	:= ExistBlock("SPDF6003")
Local lSpdCodR2	  	:= ExistBlock("SPDF6004")
Local cPeCodRec		:="" 
Local cNatur		:= ""   
Local nI			:=	0       
Local nJ			:=	0       
Local lBaixa 		:= FPccBxCr()
Local nPercBx		:=	0
Local nJurosBx		:=	0
Local nDescBx		:=	0
Local cChaveBx		:= ""
Local nPisBx		:=	0
Local nCofBx		:= 0
Local nVlrSe5		:=	0
Local aRegBx		:=	{}
Local lRecIss		:=	.F. 
Local cMotBx		:= SuperGetMv("MV_MTBXF6",,"")	
Local cBaixa		:=	"" 
Local aMotBx 		:= ReadMotBx()
Local cMotQry		:= ""
Local nTpMoeda		:= 0
Local lMVDescIss	:= GetNewPar("MV_DESCISS",.F.)
Local nVlMinImp		:= IIF(dDataBase > dLastPcc, GetNewPar("MV_VL13137",10), GetNewPar("MV_VL10925",5000))
Local aSpdMotTRF	:= {}
Local cAliasSPED	:= ""                   
Local lRetSFQ		:= .F. 						//titulo que retem valores de outros titulos                        
Local cFilSe5		:= xFilial("SE5")
Local cFilSe1		:= xFilial("SE1")
Local lSe5MsFil		:= SE5->(FieldPos("E5_MSFIL")) > 0
Local cTipoTit		:=	""
Local cTpAbIss		:=	SuperGetMv("MV_TPABISS",,"2") //Verificando se os titulos criados no modulo FATURAMENTO os impostos do PCC sao calculados atraves do valor do titulo com a reducao do ISS. 	
Local aTitRet		:=	{} 						//titulos que retem outros
Local cIndCmlDes  	:= cIndCmlOri	:= ""    //indicadores de cumulatividade    
Local	nVrPIS		:=	nVrCOFINS	:=	nVrCSLL :=	nVrIR	:=	nVrISS :=	nVrINSS	:=	0                            
Local lTitRet		:= .F. 						//titulo retido em outro
Local cRASpd		:= SuperGetMv("MV_NTRASPD",,'')//Indica as naturezas de titulos RA que devo antecipar os creditos na geração deste bloco.
Local aAreaSEV 		:= SEV->(GetArea())
Local nVrRateio		:= 0
Local nTxMoeda		:= 0 
Local nPercPis		:= 0  
Local nPercCof		:= 0  
Local cChaveOri		:= cChaveDes	:=	""     
Local aAreaSC5 		:= SC5->(GetArea())
Local aRet			:= {}
Local nTotPis		:= 0
Local nTotCof		:= 0
Local nTotCsll 		:= 0
Local lTotalImp 	:= .T.
Local lIdent		:= .F.
Local aAreaSF2		:= {}
Local lSF2			:= .F.
Local nVlPis		:= 0
Local lSe1MsFil		:= SE1->(FieldPos("E1_MSFIL")) > 0
Local lIrrfSE2		:= .F.
Local lIssSE2		:= .F.
Local lMvImpBxCR 	:= .F.
Local lMaxSeq       := .F.
Local aRegCmp		:= {}

PRIVATE aBaixaSE5	:= {}
Private cPeMBx		:=	""
Private cBxSql		:= ""
Private cDataIni	:= ""
Private cDataFim 	:= ""
Private cMotBaixa	:= ""   
Private cPeNat		:=	""
Private lUnidNeg 	:= FWSizeFilial() > 2	// Indica se usa Gestao Corporativa

DEFAULT nMesRef := Month(dDataBase)
DEFAULT nAnoRef := Year(dDataBase)
                               
If cPaisLoc == "BRA"
                               
If lUnidNeg
	cFilSe5	:= SM0->M0_CODFIL 
	cFilSe1 := SM0->M0_CODFIL 
Else
	cFilSe5	:= xFilial("SE5")
	cFilSe1 := xFilial("SE1")
Endif

cDataIni := StrZero(nAnoRef,4)+StrZero(nMesRef,2)+"01"
dLastDay := LastDay(Ctod("01/"+StrZero(nMesRef,2)+"/"+StrZero(nAnoRef,4))) 
cDataFim := StrZero(nAnoRef,4)+StrZero(nMesRef,2)+StrZero(Day(dLastDay),2)
    
//Tratamentos para o ponto de entrada SPDF6001
cPeMBx	:=	""
If lSpdMotBx
	cPeMBx := ExecBlock ("SPDF6001",.F.,.F.)	
Endif		

If !Empty(cPeMBx) // Inserindo aspas e virgulas para o select da query.
	cMotBaixa:="'"
	For nI:=1 To Len(cPeMBx)
		If Subst(cPeMBx,nI,1) $ ";,-_|./" 				 
	  	  	cMotBaixa+="','"
	  	Else
	  	 	cMotBaixa+=Subst(cPeMBx,nI,1)  
	  	Endif
	Next
Endif	
cMotBaixa	+=	"'"

//Tratamentos para o ponto de entrada SPDF6002
cPeNat	:=	""
If lSpdNat
	cPeNat := ExecBlock ("SPDF6002",.F.,.F.)	
Endif		

If !Empty(cPeNat) // Inserindo aspas e virgulas para o select da query.
	cNatur	:=	"'"
	For nI:=1 To Len(cPeNat)
		If Subst(cPeNat,nI,1) $ ";,-_|./" 				 
	  	  	cNatur	+=	"','"
	  	Else
	  	 	cNatur	+=	Subst(cPeNat,nI,1)  
	  	Endif
	Next
Endif	                             
cNatur	+=	"'"
             
dbSelectArea("SED")

If !Empty(cMotBx)// Para o parametro MV_MTBXF6
	cBxSql	+=""
	cBaixa	:=	""		
	For nI:=1 To Len(cMotBx)  		
		If Subst(cMotBx,nI,1) $ ";,-_|./" 				 
	   		If !Empty(cBaixa)
	    		nJ :=  Ascan(aMotBx, {|x| Substr(x,1,3) == Upper(cBaixa) })
				If nJ >0 .And. Substr(aMotBx[nJ],26,01) == "N" //Nao movimenta banco.
					If !Empty(cBxSql)
						cBxSql	+= ",'" 
					Else
						cBxSql	+= "'" 
					Endif
					cBxSql	+= cBaixa + "'"  				   	
				Endif
			   	cBaixa	:=	""
	  	  	Endif	  	  		
	  	Else
	  	 	cBaixa+=Subst(cMotBx,nI,1)  
	  	Endif
	Next
	If !Empty(cBaixa)			
		If !Empty(cBxSql)
			cBxSql	+= ",'" 
	   	Else
	   		cBxSql	+= "'" 
	   	Endif
		cBxSql	+= cBaixa 
	Endif
	cBxSql	+=	"'"
Endif                   

cPeCodRec:=	"" //Tratamentos para o ponto de entrada SPDF6003
If lSpdCodRec
	cPeCodRec := ExecBlock ("SPDF6003",.F.,.F.)	
	If Len(cPeCodRec) > 4
		cPeCodRec := Subst(cPeCodRec,1,4)	 			
	Endif
Endif		

//PIS e COFINS na emissão
If !lBaixa     
	lMvImpBxCR := SuperGetMv( "MV_IMPBXCR" , , "1" ) == "2"
	cAliasQry	:= "SE5QRY"
	aStruct	 	:= SE5->(dbStruct())
	cQuery	 	:= "SELECT "
			
	//Campos de referência
	cQuery	 	+= "SE5.E5_FILIAL FILIAL , SE5.E5_PREFIXO PREFIXO, SE5.E5_NUMERO NUMERO, SE5.E5_PARCELA PARCELA, SE5.E5_TIPO TIPO, "		
	cQuery	 	+= "SE5.E5_CLIFOR CLIENTE, SE5.E5_LOJA LOJA, SE5.E5_TIPODOC TIPODOC, SE5.E5_DATA DATAM, SE5.E5_FILORIG FILORIG, "
	cQuery		+= "SE5.E5_VALOR VALORE5 , SE5.E5_NATUREZ NATUREZ, SE5.E5_MOTBX MOTBX, SE5.E5_DOCUMEN DOCUMEN, SE5.R_E_C_N_O_ RECNO, "
	cQuery		+= "SE5.E5_PRETCOF PRETCOF , SE5.E5_PRETPIS PRETPIS, SE5.E5_SEQ SEQ, SE5.E5_VALOR VALORBX , " 		
	cQuery		+= "SE1.E1_PIS PIS, SE1.E1_COFINS COFINS, SE1.E1_CSLL CSLL, SE1.E1_SALDO SALDO, SE1.E1_VALOR VALORE1, SE1.E1_BASEPIS BASEPIS, "
	cQuery		+= "SE1.E1_IRRF VRIR, SE1.E1_INSS VRINSS, SE1.E1_ISS VRISS, SE1.E1_MOEDA TPMOEDA, SE1.E1_VLCRUZ VLCRUZ, SE1.E1_ORIGEM ORIGEM, "
	cQuery		+= "SE1.E1_MULTNAT MULTNAT, SE1.E1_PEDIDO PEDIDO, SE1.E1_NUMLIQ NUMLIQ"
	cQuery		+= ", SE1.E1_SCORGP SCORGP "
	cQuery		+= ", SED.ED_PERCPIS PERCPIS, SED.ED_PERCCOF PERCCOF,SED.ED_RECIRRF RECIRRF,SED.ED_CALCIRF CALCIRF, SED.ED_CODIGO CODIGO "
	cQuery	 	+= ", SA1.A1_RECPIS RECPIS, SA1.A1_RECCOFI RECCOFI, SA1.A1_CGC CNPJ "
	cQuery	 	+= ", SA1.A1_INDRET A1INDRET "
	cQuery	 	+= ", SE1.E1_EMISSAO, SE1.E1_SABTPIS, SE1.E1_SABTCOF, SE1.R_E_C_N_O_ E1RECNO "
				
	cQuery	 	+= "FROM "
	cQuery 		+= RetSqlName("SE5") + " SE5, "
	cQuery 		+= RetSqlName("SE1") + " SE1 ,"	
	cQuery 		+= RetSqlName("SED") + " SED ,"	
	cQuery 		+= RetSqlName("SA1") + " SA1 "						
				
	cQuery	 	+= "WHERE "

	If !Empty( Iif( lUnidNeg, FWFilial("SE5") , xFilial("SE5") ) )
		cQuery 	+= "SE5.E5_FILIAL = '"  + xFilial("SE5") + "' AND "
	Else
		If lSe5MsFil
			cQuery 	+= "SE5.E5_MSFIL = '" + Iif(lUnidNeg, cFilSe5, cFilAnt) + "' AND "					
		Else	
			cQuery 	+= "SE5.E5_FILORIG = '" + Iif(lUnidNeg, cFilSe5, cFilAnt) + "' AND "	
		Endif	
	EndIf   		
	
	If !Empty( Iif( lUnidNeg, FWFilial("SE1") , xFilial("SE1") ) )
		cQuery 	+= "SE1.E1_FILIAL = '"  + xFilial("SE1") + "' AND "
	Else
		If lSe1MsFil
			If FWModeAccess("SE1",3) <> "C"
				cQuery 	+= "SE1.E1_MSFIL = '" + Iif(lUnidNeg, cFilSe1, cFilAnt) + "' AND "
			EndIf					
		Else	
			cQuery 	+= "SE1.E1_FILORIG = '" + Iif(lUnidNeg, cFilSe1, cFilAnt) + "' AND "	
		Endif	
	EndIf   
	
	cQuery	 		+=	"SED.ED_FILIAL='" + xFilial("SED") + "' AND " 							
	cQuery 		+=	"SA1.A1_FILIAL ='" + xFilial("SA1") + "' AND "
	cQuery 		+= "SE5.E5_PREFIXO = SE1.E1_PREFIXO AND " 
	cQuery 		+= "SE5.E5_NUMERO = SE1.E1_NUM AND " 
	cQuery 		+= "SE5.E5_PARCELA = SE1.E1_PARCELA AND " 
	cQuery 		+= "SE5.E5_TIPO = SE1.E1_TIPO AND " 					
	cQuery	 		+= "SE5.E5_CLIFOR = SE1.E1_CLIENTE AND "
	cQuery			+= "SE5.E5_LOJA = SE1.E1_LOJA AND "
	cQuery			+= "SE5.E5_CLIFOR = SA1.A1_COD AND "
	cQuery			+= "SE5.E5_LOJA = SA1.A1_LOJA AND " 
	cQuery			+= "SE1.E1_CLIENTE = SA1.A1_COD AND "
	cQuery			+= "SE1.E1_LOJA = SA1.A1_LOJA AND " 
	cQuery			+= "SA1.A1_PESSOA != 'F' AND "
	cQuery			+= "SE1.E1_NATUREZ = SED.ED_CODIGO AND"
			
	If lMvImpBxCR
		cQuery		+= " ( ( ( SE1.E1_PIS > 0 AND SE1.E1_SABTPIS = 0 ) OR ( SE1.E1_COFINS > 0 AND SE1.E1_SABTCOF = 0 ) ) "
		cQuery		+= " OR ( SE1.E1_EMISSAO < '" + DtoS( dLastPcc ) + "' AND ( ( SE1.E1_PIS > 0 AND SE1.E1_SABTPIS > 0 ) OR ( SE1.E1_COFINS > 0 AND SE1.E1_SABTCOF > 0 ) ) ) ) AND "
	Else
		cQuery		+= "( ( SE1.E1_PIS > 0 AND SE1.E1_SABTPIS = 0 ) OR ( SE1.E1_COFINS > 0 AND SE1.E1_SABTCOF = 0 ) ) AND "
	EndIf
			
	cQuery	 	+= "SE5.E5_RECPAG = 'R' AND "
			
	cTipoTit		:=	""
	cTipoTit		:=	MVABATIM + "|" + MV_CRNEG + "|" + MVPROVIS  
	cQuery 		+= "SE5.E5_TIPO NOT IN " + FormatIn(cTipoTit,If("|"$cTipoTit,"|",","))  + " AND "
	
	cQuery		+= " (SE5.E5_TIPODOC <> 'BA ' OR (SE5.E5_LOTE <> '' AND SE5.E5_BANCO <> '' AND SE5.E5_TIPODOC = 'BA ')) AND "

	cQuery		+= "SE5.E5_SITUACA <> 'C' AND "
	cQuery	 	+= "SE5.E5_DATA BETWEEN '" + cDataIni + "' AND '" + cDataFim + "' AND "
		 
	cMotQry		:= "('FAT','LIQ'"
			
	If !Empty(cPeMBx)                    
		cMotQry += "," + cMotBaixa
	Endif                        
				
	If !Empty(cBxSql)
		cMotQry += "," + cBxSql
	EndIf                       
			
	cMotQry		+= ")"
			
	cQuery		+= "SE5.E5_MOTBX NOT IN " + cMotQry + " AND "

	//Exclui os titulos que possuem estorno
	cQuery	 	+= "SE5.E5_SEQ NOT IN "
	cQuery 		+= "( SELECT SE5AUX.E5_SEQ FROM "
	cQuery		+=      RetSqlName("SE5") + " SE5AUX WHERE "
	cQuery		+= 		" SE5AUX.E5_FILIAL = SE5.E5_FILIAL AND "
	cQuery		+= 		" SE5AUX.E5_PREFIXO = SE5.E5_PREFIXO AND "
	cQuery		+= 		" SE5AUX.E5_NUMERO = SE5.E5_NUMERO AND  "
	cQuery		+= 		" SE5AUX.E5_PARCELA = SE5.E5_PARCELA AND " 
	cQuery		+= 		" SE5AUX.E5_TIPO = SE5.E5_TIPO AND "      
	cQuery		+= 		" SE5AUX.E5_CLIFOR = SE5.E5_CLIFOR AND " 
	cQuery		+= 		" SE5AUX.E5_LOJA = SE5.E5_LOJA AND "
	cQuery		+= 		" SE5AUX.E5_TIPODOC = 'ES' AND "
	cQuery		+= 		" SE5AUX.D_E_L_E_T_ = ' ' "
	cQuery 		+= ") AND "

	cQuery		+= "SED.D_E_L_E_T_ = ' ' AND "
	cQuery		+= "SA1.D_E_L_E_T_ = ' ' AND "
	cQuery		+= "SE1.D_E_L_E_T_ = ' ' AND "
	cQuery		+= "SE5.D_E_L_E_T_ = ' ' "
	
	cQuery 		+= " ORDER BY FILIAL, PREFIXO, NUMERO, PARCELA, TIPO, CLIENTE, LOJA, SEQ, VALORE5"

	cQuery 		:= ChangeQuery(cQuery)                 
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
			                                                          
	For nX := 1 To len(aStruct)
		If aStruct[nX][2] <> "C" .And. FieldPos(aStruct[nX][1]) > 0
			TcSetField(cAliasQry,aStruct[nX,1],aStruct[nX,2],aStruct[nX,3],aStruct[nX,4])
		EndIf
	Next nX

	TcSetField( cAliasQry , "E1_EMISSAO" , "D" , 8 , 0 )
	TcSetField( cAliasQry , "E1_SABTPIS" , "N" , TamSX3("E1_SABTPIS")[ 1 ] , TamSX3("E1_SABTPIS")[ 2 ] )
	TcSetField( cAliasQry , "E1_SABTCOF" , "N" , TamSX3("E1_SABTCOF")[ 1 ] , TamSX3("E1_SABTCOF")[ 2 ] )

	// Tabelas posicionadas no laco de processamento da query
	SE1 -> ( dbSetOrder ( 1 ) ) //FILIAL+PREFIXO+NUM+PARCELA+TIPO
	SED -> ( dbSetOrder ( 1 ) )
	SA1 -> ( dbSetOrder ( 1 ) )
		
	dbSelectArea(cAliasQry) 		
	cAliasSPED := cAliasQry
	aTitRet		:= {}		
	While !(cAliasQry)->(Eof())

      		If (cAliasQry)->SCORGP  = "1" .And. (cAliasQry)->MOTBX == "CMP"  .And. "NCC" $ (cAliasQry)->DOCUMEN              
				(cAliasQry)->(Dbskip())			   
				Loop						
			Endif
			
			If !Empty(cRASpd) .And. 'RA' $ (cAliasQry)->DOCUMEN .And.;  //Caso tenham naturezas tenho que antecipar o credito do tipo RA.
				SE1->(DbSeek(xFilial("SE1") + (cAliasQry)->DOCUMEN )) .And. Alltrim(SE1->E1_NATUREZ) $ cRASpd
				(cAliasQry)->(Dbskip())		   
				Loop
			EndIf
			
			//Verificação de retenção na baixa do título gerado em lei antiga...
			If lMvImpBxCR .And. (cAliasQry)->E1_EMISSAO < dLastPcc .And. ( (cAliasQry)->E1_SABTPIS > 0 .Or. (cAliasQry)->E1_SABTCOF > 0 )
				If !TemImpBx( (cAliasQry)->E1RECNO , cDataIni , cDataFim )
					(cAliasQry)->( Dbskip() )
					Loop
				EndIf
			EndIf

			lTitRet	:=	.F.			
			aTitRet	:= {}		
			If (cAliasQry)->VALORE1 <= nVlMinImp 
				SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES
				If SFQ->(DbSeek(xFilial("SFQ")+"SE1"+ (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA ))             								
					Aadd(aTitRet,{(xFilial("SE1") + SFQ->FQ_PREFORI + SFQ->FQ_NUMORI + SFQ->FQ_PARCORI + SFQ->FQ_TIPOORI + SFQ->FQ_CFORI+ SFQ->FQ_LOJAORI),;
											(cAliasQry)->PIS,(cAliasQry)->COFINS,(cAliasQry)->CSLL,	(cAliasQry)->VRIR,(cAliasQry)->VRISS,(cAliasQry)->VRINSS})					
					lTitRet	:=	.T.																													
				Endif											
		    EndIf
		    
		    lRetSFQ		:=.F. //Retem valores de impostos de outros titulos.
			SFQ->(DbSetOrder(1)) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
			If SFQ->(DbSeek(xFilial("SFQ")+"SE1"+ (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA))
			   	lRetSFQ	:=	.T.		
			   	If Len(aTitRet) == 0
			   		While SFQ->FQ_FILIAL + SFQ->FQ_ENTORI + SFQ->FQ_PREFORI + SFQ->FQ_NUMORI + SFQ->FQ_PARCORI + SFQ->FQ_TIPOORI + SFQ->FQ_CFORI + SFQ->FQ_LOJAORI ==	xFilial("SFQ") +;
			   			( "SE1" + (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA)			   	
			   			SE1 -> ( dbSetOrder ( 1 ) ) //FILIAL+PREFIXO+NUM+PARCELA+TIPO 
						If SE1 -> ( dbSeek ( xFilial("SE1") + SFQ->FQ_PREFDES + SFQ->FQ_NUMDES + SFQ->FQ_PARCDES + SFQ->FQ_TIPODES ) )			
			   				Aadd(aTitRet,{(xFilial("SE1") + SFQ->FQ_PREFDES + SFQ->FQ_NUMDES + SFQ->FQ_PARCDES + SFQ->FQ_TIPODES + SFQ->FQ_CFDES+ SFQ->FQ_LOJADES),;
											SE1->E1_PIS,SE1->E1_COFINS,SE1->E1_CSLL,	SE1->E1_IRRF , SE1->E1_ISS, SE1->E1_INSS})					
						Endif
			   			SFQ->(Dbskip())			   			
			   		Enddo			   		
			   	Endif		   			        			   				        			   	
			Endif			
		    
			If (cAliasQry)->MOTBX $ 'NOR_CMP'
				cChaveBx		:=	SpdMotNOR((cAliasQry)->( FILIAL + PREFIXO + NUMERO + PARCELA + TIPO))
				If Empty(cChaveBx)
					(cAliasQry)->(Dbskip())
					Loop
				Endif
			ElseIf (cAliasQry)->MOTBX = 'TRF'
				aSpdMotTRF	:=	SpdMotTRF((cAliasQry)->( PREFIXO + NUMERO + PARCELA + TIPO + FILORIG))
                        
				If !aSpdMotTRF[3] .Or. !aSpdMotTRF[1]  
					(cAliasQry)->( dbSkip())
					Loop
				Endif

				If aSpdMotTRF[1] 
					cAliasQry := aSpdMotTRF[2] // novo alias a ser tratado
				Endif
			Endif  			

			cChaveBx		:=	(cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA 
			nJurosBx		:=	 nDescBx		:=		nVlrSe5		:=	0
			nTpMoeda		:=	(cAliasQry)->TPMOEDA
			aSpdMotTRF	:= {}
			aRegBx		:=	{}
			nVrPIS		:=		nVrCOFINS	:=	nVrCSLL :=	nVrIR	:=	nVrISS :=	nVrINSS	:=	0                            
					
			// Posiciona no cliente e loja e natureza do titulo que serao processadas as movimentacoes no loop abaixo
			SA1->( MsSeek( xFilial("SA1") + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA ) )
		
			// Indica se a retencao do IR (carteira Receber) sera feita no CP
			lIrrfSE2 := (cPaisLoc == "BRA" .And. SA1->A1_RECIRRF == "2" .And.; 
						(cAliasQry)->RECIRRF <> '1' .And. (cAliasQry)->CALCIRF == "S")
			lIssSE2  := (cPaisLoc == "BRA" .And. SA1->A1_RECISS == "2" .And. lMVDescIss)

			If Select ("SF2") > 0
				aAreaSF2 := SF2->(GetArea())
				DbSelectArea("SF2")
				DbSetOrder(1)
				lSF2 := .T.
			EndIf		
			
			While  (cAliasQry)->( !EoF()) .AND. cChaveBx ==  ( (cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA ) 
			
				SED->( MsSeek( xFilial("SED") + (cAliasQry)->NATUREZ ) )

				If !Empty(cPeNat) .And. !SED->ED_INDRET $ cNatur 
					(cAliasQry)->( dbSkip() )
					Loop
				Endif		                

				If (cAliasQry)->TIPO $ ( MVABATIM + MV_CRNEG + MVPROVIS )
					(cAliasQry)->( dbSkip() )
					Loop
				EndIf	

				lRecIss := (SA1->A1_RECISS == "1" .And. lMVDescIss)                                  
		
				If !Empty((cAliasQry)->PEDIDO) .And. Alltrim((cAliasQry)->ORIGEM) == "MATA460"									
					SC5->(Dbsetorder(3)) //C5_FILIAL+C5_CLIENTE+C5_LOJACLI+C5_NUM
					If SC5->(Dbseek(xFilial("SC5") + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA + (cAliasQry)->PEDIDO )) .And. !Empty(SC5->C5_RECISS)				    
						lRecIss := (SC5->C5_RECISS == "1" .And. lMVDescIss)				    
					ElseIf lSF2 .And. (SF2->( MsSeek((cAliasQry)->(FILIAL + NUMERO + PREFIXO + CLIENTE + LOJA ))) .And. !Empty(SF2->F2_RECISS) )		
						lRecIss := (SF2->F2_RECISS == "1" .And. lMVDescIss)
				    Endif
				Endif										
				
				nVrPIS		:=	(cAliasQry)->PIS
				nVrCOFINS	:=	(cAliasQry)->COFINS
				nVrCSLL		:=	(cAliasQry)->CSLL
				nVrIR		:=	If(lIrrfSE2,0,(cAliasQry)->VRIR)
				nVrISS		:=	If(lIssSE2,0,(cAliasQry)->VRISS)
				nVrINSS		:=	(cAliasQry)->VRINSS

				If lRetSFQ //Caso seja titulo que retenha outro com cumulatividades diferentes devo entao subtrair os valores para nao enviar duas vezes.
					For nI:= 1 To Len(aTitRet)
						nVrPIS		-=	aTitRet[nI,2]
						nVrCOFINS	-=	aTitRet[nI,3]
						nVrCSLL		-=	aTitRet[nI,4]
						nVrIR		-=	aTitRet[nI,5]
						nVrISS		-=	aTitRet[nI,6]
						nVrINSS		-=	aTitRet[nI,7]																									
					Next
				Endif
				
				If (cAliasQry)->TIPODOC $ "JR_MT_J2_M2"
					nJurosBx	+= (cAliasQry)->VALORE5	 
				ElseIf(cAliasQry)->TIPODOC $ "DC_CM_D2_C2"
			     	nDescBx	+= (cAliasQry)->VALORE5													
				ElseIf !(cAliasQry)->TIPODOC $ "JR_MT_J2_M2_DC_CM_D2_C2"
					nVlrSe5	+=	(cAliasQry)->VALORE5			     					
					aRegBx	:= {}													         					
	               nTxMoeda	:= 1
               
					If (cAliasQry)->MULTNAT = "1" //Tratamento para multiplas naturezas.			
						aAreaSEV := SEV->(GetArea())
						DbSelectArea("SEV")
						DbSetOrder(1)	//Verificar se o titulo possui multiplas naturezas.
						SEV->(DbSeek(xFilial("SEV")+(cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO+(cAliasQry)->CLIENTE+(cAliasQry)->LOJA))
						While SEV->(EV_PREFIXO+EV_NUM+EV_PARCELA+EV_TIPO+EV_CLIFOR+EV_LOJA) ==;
								((cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO+(cAliasQry)->CLIENTE+(cAliasQry)->LOJA) .And. !SEV->(EOF())					
								
								nVrRateio:=	0
								
								If nTpMoeda > 1
									nTxMoeda	:= (cAliasQry)->VLCRUZ	/(cAliasQry)->VALORE1
								Endif							
								
								If SEV->EV_IDENT <> "1" // 1=Rateio de Inclusao 2=Rateio de Baixa  
									SEV->(Dbskip())
									Loop							
								Endif								
								
								aAreaSED := SED->(GetArea()) //Caso a natureza apure Pis ou Cofins
								DbSelectArea("SED")							
								DbSetOrder(1)			
								If DbSeek(xFilial("SED")+ SEV->EV_NATUREZ) .And. !Empty(SED->ED_PERCPIS) .Or. !Empty(SED->ED_PERCCOF)										
												   
									   nVrRateio	:=	SEV->EV_PERC
														                                                   
                                        AaDd(aRegBx,{SA1->A1_CGC,; //1
                                        (cAliasQry)->DATAM,;//2
                                        ((SEV->EV_VALOR*nTxMoeda)*SED->ED_PERCPIS)/100,;//3
                                        ((SEV->EV_VALOR*nTxMoeda)*SED->ED_PERCCOF)/100,;//4
                                        ((SEV->EV_VALOR*nTxMoeda)*SED->ED_PERCCSL)/100,;//5
                                        (cAliasQry)->VALORE1,;//6
                                        (cAliasQry)->VALORE5,;//7
                                        SA1->A1_RECPIS,;//8
                                        SA1->A1_RECCOFI,;//9
                                        SED->ED_PERCPIS,;//10
                                        SED->ED_INDRET,;//11
                                        SED->ED_INDCMLT,;//12
                                        (cAliasQry)->RECNO,;//13
                                        SED->ED_COND,;//14
                                        (cAliasQry)->SALDO,;//15
                                        nVrIR,;//16
                                        If(lRecIss, nVrISS,0),;//17
                                        nVrINSS,;//18
                                        (cAliasQry)->VLCRUZ,;//19
                                        SA1->A1_INDRET,;//20
                                        (cAliasQry)->BASEPIS,;//21
                                        (cAliasQry)->ORIGEM,;//22
										Iif(lRetSFQ,((cAliasQry)->PIS+(cAliasQry)->COFINS+(cAliasQry)->CSLL+(cAliasQry)->VRIR+Iif(lRecIss,(cAliasQry)->VRISS,0)+(cAliasQry)->VRINSS),0),;//23
                                        (cAliasQry)->MULTNAT,;//24
                                        nVrRateio,;//25
                                        SED->ED_PERCCOF,;//26
                                        nVrPIS,;//27
                                        nVrCOFINS,;//28
                                        nVrCSLL,;//29
                                        (cAliasQry)->SEQ,;//30
                                        (cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA})//31
								Endif
								RestArea(aAreaSED)								        		
								SEV->(Dbskip())
						Enddo
					   RestArea(aAreaSEV)										
					Else //Nao trata de multiplas naturezas
						AaDd(aRegBx,{SA1->A1_CGC,;  // 1
											(cAliasQry)->DATAM,;  // 2
											nVrPIS,;  // 3
											nVrCOFINS,;  // 4
											nVrCSLL,;  // 5
										 	(cAliasQry)->VALORE1,;  // 6
										 	(cAliasQry)->VALORE5,;  // 7
										 	SA1->A1_RECPIS,;  // 8
										 	SA1->A1_RECCOFI,;  // 9
										  	SED->ED_PERCPIS,;  // 10
										  	SED->ED_INDRET,;  // 11
										  	SED->ED_INDCMLT,;  // 12
										  	(cAliasQry)->RECNO,;  // 13
										  	SED->ED_COND,;  // 14
										  	(cAliasQry)->SALDO,;  // 15
										  	nVrIR,;  // 16
										  	If(lRecIss, nVrISS,0),;  // 17
										  	nVrINSS,;  // 18
										  	(cAliasQry)->VLCRUZ,;  // 19
										  	SA1->A1_INDRET,;  // 20
										  	(cAliasQry)->BASEPIS,;  // 21
										  	(cAliasQry)->ORIGEM,;  // 22
										  	Iif(lRetSFQ,    ( (cAliasQry)->PIS+(cAliasQry)->COFINS+(cAliasQry)->CSLL+(cAliasQry)->VRIR+(cAliasQry)->VRINSS+;
										  							Iif(lRecIss,  (cAliasQry)->VRISS,0)),;
										  							0),;	// 23
										  	(cAliasQry)->MULTNAT,;  // 24
										  	0,;  // 25
										  	SED->ED_PERCCOF,;  // 26
										  	0,;  // 27
										  	0,;  // 28
                                            0,;//29
                                            (cAliasQry)->SEQ,;//30
                                            (cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA})  // 31
						EndIf
					Endif													
				(cAliasQry)->(Dbskip())	
			
				If (cAliasQry)->(Eof()) .and. (cAliasQry <> cAliasSPED)
			   	(cAliasQry)->(dbCloseArea())
			   	cAliasQry := cAliasSPED
  					(cAliasQry)->(Dbskip())
			   Endif

			EndDo

			If !Empty( aAreaSF2 )
				RestArea(aAreaSF2)
			EndIf

			If Len(aRegBx) = 0
				Loop
			EndIf
			
			nTotPis	:= 0
			nTotCof	:= 0
			nTotCsll	:= 0
			If lTotalImp	
				For nI:=1 to Len(aTitRet)
					nTotPis += aTitRet[nI][2]
					nTotCof += aTitRet[nI][3]
					nTotCsll += aTitRet[nI][4]
				Next
			EndIf		
           
            For nI:=1 TO Len(aRegBx)
                
                aF600 	    := Array(12)
				nPisBx	    := 0
				nCofBx	    := 0							
                nBase	    := 0
                
                // verifica se é a ultima baixa
                lMaxSeq    := MaxSeq(aRegBx[nI,30], aRegBx[nI,31])

				If Alltrim(aRegBx[nI,22]) == "MATA460" .And. (aRegBx[nI,15] == 0) .And. cTpAbIss == "1" .And. lMaxSeq
					nPercBx	:=	((( nVlrSe5 + (aRegBx[nI,3]+aRegBx[nI,4]+aRegBx[nI,5]+aRegBx[nI,16]+aRegBx[nI,18]) - nJurosBx + nDescBx ) *100)/ aRegBx[nI,6])
				ElseIf aRegBx[nI,15] > 0 //Titulo nao baixado totalmente
					nPercBx	:=	((( nVlrSe5 - nJurosBx + nDescBx ) *100)/ If(nTpMoeda>1,aRegBx[nI,7],aRegBx[nI,6]))	
				ElseIf aRegBx[nI,24] = "1"     //Multiplas naturezas.
					If aRegBx[nI,15] == 0 .and. aRegBx[nI,6] == aRegBx[nI,7]//baixado totalmente e não descontou os impostos
						nPercBx	:=	(((nVlrSe5 - nJurosBx + nDescBx ) *100)/ aRegBx[nI,6])
					ElseIf Len(aTitRet) > 0
						nPercBx	:=	(((nVlrSe5 + (aRegBx[nI,27]+nTotPis+aRegBx[nI,28]+nTotCof+aRegBx[nI,29]+nTotCsll) - nJurosBx + nDescBx ) *100)/ aRegBx[nI,6])
						lTotalImp := .F.
					Else
						nPercBx	:=	(((nVlrSe5 + (aRegBx[nI,16]+aRegBx[nI,17]+aRegBx[nI,18]+aRegBx[nI,27]+aRegBx[nI,28]+aRegBx[nI,29]) - nJurosBx + nDescBx ) *100)/ aRegBx[nI,6])
					EndIf					
					If nTpMoeda > 1
						nPercBx	:= (nPercBx)/nTxMoeda
					Endif															
				Else// baixa total ou ultima baixa do titulo precisa acrescentar o valor dos impostos descontados na movimentacao do SE5            
					If nTpMoeda > 1
						nPercBx	:=	((( aRegBx[nI,19] - nJurosBx + nDescBx ) *100)/ aRegBx[nI,19])
					ElseIf lTitRet //titulo retido em outro
						nPercBx	:=	((nVlrSe5 + aRegBx[nI,16]+aRegBx[nI,17]+aRegBx[nI,18]) *100)/ aRegBx[nI,6]
					ElseIf aRegBx[nI,15] == 0 .and. lMaxSeq //baixado totalmente e é ultima baixa
                        nPercBx	:=	((( nVlrSe5 +(aRegBx[nI,3]+aRegBx[nI,4]+aRegBx[nI,5]+aRegBx[nI,16]+aRegBx[nI,17]+aRegBx[nI,18] + ;
                        if(lRetSFQ,aRegBx[nI,23],0)	 - nJurosBx + nDescBx )) *100)/ aRegBx[nI,6])        
                    Else
                        nPercBx	:=	((( nVlrSe5 - nJurosBx + nDescBx ) *100)/ aRegBx[nI,6])        
					Endif							
				Endif
				
				nPisBx	:=	(aRegBx[nI,3]	* nPercBx)/100
				nCofBx	:=	(aRegBx[nI,4]	* nPercBx)/100         
				
				If nVlrSe5 <= nVlMinImp .And. nPercBx > 100 //Para casos de titulos gerados com valor que nao retenha imposto.
					nPisBx	:=	0
					nCofBx	:=	0							
				Endif						
				
				//Calculo inverso da retenção para achar a base
				If nTpMoeda > 1
					nBase 	:= Round((((aRegBx[nI,19]*aRegBx[nI,10])/100)* nPercBx)/ aRegBx[nI,10],2)										
				ElseIf aRegBx[nI,15] > 0 //.Or. lRetSFQ //Titulo nao baixado totalmente ou titulo que retem impostos de outros titulos.		
					nBase 	:= Round((aRegBx[nI,3] * nPercBx)/ aRegBx[nI,10],2)						
					If (nBase < aRegBx[nI,7] .And. (aRegBx[nI,7] - nBase) < 1) .Or.; // Problema com arredondamento diferenca a menor
						(nBase > aRegBx[nI,7] .And. (nBase - aRegBx[nI,7]) < 1) //diferenca a maior					    
						nBase	:=	aRegBx[nI,7]
					Endif
				Else				
					nBase 	:=	aRegBx[nI,21]
					If aRegBx[nI,3]  == Round((aRegBx[nI,6] * (aRegBx[nI,10]/100)), 2) .or. aRegBx[nI,3]  == NoRound((aRegBx[nI,6] * (aRegBx[nI,10]/100)), 2) 
						nVlPis	:= aRegBx[nI,6] * (aRegBx[nI,10]/100) // voltar as casas decimais
					Else
						nVlPis	:= aRegBx[nI,3]
					EndIf
					If nBase <> Round((nVlPis * nPercBx)/ aRegBx[nI,10],2)
						nBase := Round((aRegBx[nI,3] * nPercBx)/ aRegBx[nI,10],2)
					EndIf 				
				Endif												
				
				If aRegBx[nI,24] = "1" .And.  !(aRegBx[nI,15] > 0)     //Multiplas naturezas.)
				   nBase		:=	nBase * aRegBx[nI,25]
			   Endif
						   
				//Indicador da retenção			
				If	Empty(aRegBx[nI,11]) 
					aF600[1] := aRegBx[nI,20]				
				Else 
					aF600[1] := aRegBx[nI,11]
				Endif										
			    
			   aF600[2] := aRegBx[nI,2] 			//-- Data da emissão
			   aF600[3] := nBase 					//-- Base do imposto
			   aF600[4] := nPisBx + nCofBx 		//-- Valor da retenção
			    
			   //Indicador de cumulatividade das naturezas de receita
			    If aRegBx[nI,12] == "1" 
			    	cIndCmlt := "0" //Cumulativo
			    ElseIf aRegBx[nI,12] == "2"
			       	cIndCmlt := "1" //Não Cumulativo
				EndIf
			    	
			    aF600[5] := Iif(aRegBx[nI,14] == "R", cIndCmlt, "")
			    
				aF600[6] := aRegBx[nI,1] 			//-- CNPJ do cliente
				aF600[7] := nPisBx 	 				//-- Valor da retenção de PIS
			   aF600[8] := nCofBx 					//-- Valor da retenção de COFINS
			    
			   //Indicador da pessoa declarante
			   If (aRegBx[nI,8] $ "SP" .Or. aRegBx[nI,9] $ "SP") .And. SM0->M0_CGC <> aRegBx[nI,1] 	  						//-- Empresa beneficiária da retenção
			   	aF600[9] := "0"
			   ElseIf (aRegBx[nI,8] $ "SP" .Or. aRegBx[nI,9] $ "SP") .And. SM0->M0_CGC == aRegBx[nI,1] //-- Empresa responsável pelo recolhimento
			   	aF600[9] := "1"
			   EndIf
			    
			   aF600[10] := "SE5" 					//-- Tabela
			   aF600[11] := aRegBx[nI,13] 		//-- Recno 
			   
				If lSPDCodR2
					cPeCodRec := ExecBlock ("SPDF6004",.F.,.F.,{aF600})	
					If Len(cPeCodRec) > 4
						cPeCodRec := Subst(cPeCodRec,1,4)	 			
					Endif
				EndIf
			   	
			   If (lSpdCodRec .Or. lSPDCodR2) .And. !Empty(cPeCodRec)
					aF600[12] := cPeCodRec 			//-- Codigo da Receita			 					
				Else
					aF600[12] := ""		 			//-- Codigo da Receita			 									
				Endif
			    
			   aAdd(aReturn, aF600)
			   nBase := 0
			Next   		      		    
	EndDo

	(cAliasQry)->(dbCloseArea())    

Else					
	
	//PIS e COFINS na baixa
		
	cAliasQry	:= "SE5QRY"
	aStruct	 	:= SE5->(dbStruct())
			
	cQuery	 	:= "SELECT " 
		
	//Campos de referência
	cQuery	 	+= "SE5.E5_FILIAL FILIAL, SE5.E5_PREFIXO PREFIXO, SE5.E5_NUMERO NUMERO, SE5.E5_PARCELA PARCELA, SE5.E5_TIPO TIPO, SE5.E5_CLIFOR CLIENTE, "
	cQuery		+= "SE5.E5_LOJA LOJA, SE5.E5_TXMOEDA TXMOEDA, SE5.E5_MOTBX MOTBX, SE5.E5_FILORIG FILORIG, "
	cQuery	 	+= "SE5.E5_TIPODOC TIPODOC, SE5.E5_PRETPIS PRETPIS, SE5.E5_DOCUMEN DOCUMEN, SE5.E5_VLMOED2 VLMOED2, SE5.E5_PRETCOF PRETCOF, " 				
	cQuery	 	+= "SE5.E5_DATA DATAM, SE5.E5_VALOR VALORBX, SE5.E5_VRETPIS PIS, SE5.E5_VRETCOF COFINS, SE5.E5_VRETCSL CSL, SE5.E5_SEQ SEQ , "  
	cQuery	 	+= "SE5.R_E_C_N_O_ RECNO, " 		
					
	//Campos do SED
	cQuery	 	+= "SED.ED_PERCPIS PERCPIS, SED.ED_COND COND, SED.ED_PERCCOF PERCCOF, SED.ED_CODIGO CODIGO, " 		 		

	//Indicador de Retenção
	cQuery	+= "SED.ED_INDRET INDRET, "
			
	//Indicador de Cumulatividade
	cQuery	+= "SED.ED_INDCMLT INDCMLT, "

	//Dados do cliente para o SPED
	cQuery	 	+= "SA1.A1_CGC CNPJ, SA1.A1_RECPIS RECPIS, SA1.A1_RECCOFI RECCOFI "					
	cQuery	 	+= ", SA1.A1_INDRET A1INDRET "					
	cQuery	 	+= "FROM "		
	cQuery 		+= RetSqlName("SE5") + " SE5,  "
	cQuery 		+= RetSqlName("SED") + " SED,  "		
	cQuery 		+= RetSqlName("SA1") + " SA1   "		
			
	cQuery	 	+= "WHERE " 		
		
	cQuery	 	+=	"SED.ED_FILIAL='" + xFilial("SED") + "' AND " 							
	cQuery 		+=	"SA1.A1_FILIAL ='" + xFilial("SA1") + "' AND "
  
	If !Empty( Iif( lUnidNeg, FWFilial("SE5") , xFilial("SE5") ) )
		cQuery 	+= "SE5.E5_FILIAL = '"  + xFilial("SE5") + "' AND "
	Else
			If lSe5MsFil
				cQuery 	+= "SE5.E5_MSFIL = '" + Iif(lUnidNeg, cFilSe5, cFilAnt) + "' AND "					
			Else	
				cQuery 	+= "SE5.E5_FILORIG = '" + Iif(lUnidNeg, cFilSe5, cFilAnt) + "' AND "	
			Endif	
	EndIf   					

	cQuery	 	+= "SE5.E5_CLIFOR = SA1.A1_COD AND "
	cQuery	 	+= "SE5.E5_LOJA = SA1.A1_LOJA AND "				
	cQuery	 	+= "(SE5.E5_DATA >= '"+cDataIni+"' AND SE5.E5_DATA <= '"+cDataFim+"') AND "
	cQuery		+= "SE5.E5_SITUACA <> 'C' AND "			
	cQuery	 	+= "SE5.E5_RECPAG = 'R' AND "		
		
	cTipoTit		:=	""
	cTipoTit		:=	MVABATIM + "|" + MV_CRNEG + "|" + MVPROVIS 
	cQuery 		+= "SE5.E5_TIPO NOT IN " + FormatIn(cTipoTit,If("|"$cTipoTit,"|",","))  + " AND "		

	cMotQry		:= "('FAT','LIQ'"
			
	If !Empty(cPeMBx)                    
		cMotQry += "," + cMotBaixa
	Endif                        
				
	If !Empty(cBxSql)
		cMotQry += "," + cBxSql
	EndIf                       
		
	cMotQry		+= ")"
			
	cQuery		+= "SE5.E5_MOTBX NOT IN " + cMotQry + " AND "
								
	//Exclui os titulos que possuem estorno
	cQuery	 	+= "SE5.E5_SEQ NOT IN "
	cQuery 		+= "(SELECT SE5AUX.E5_SEQ FROM "+RetSqlName("SE5")+" SE5AUX WHERE "
	cQuery		+=		" SE5AUX.E5_FILIAL = SE5.E5_FILIAL AND "
	cQuery		+= 		" SE5AUX.E5_PREFIXO = SE5.E5_PREFIXO AND "
	cQuery		+= 		" SE5AUX.E5_NUMERO = SE5.E5_NUMERO AND  "
	cQuery		+= 		" SE5AUX.E5_PARCELA = SE5.E5_PARCELA AND " 
	cQuery		+= 		" SE5AUX.E5_TIPO = SE5.E5_TIPO AND " 
	cQuery		+= 		" SE5AUX.E5_CLIFOR = SE5.E5_CLIFOR AND " 
	cQuery		+= 		" SE5AUX.E5_LOJA = SE5.E5_LOJA AND "     
	cQuery		+= 		" SE5AUX.E5_TIPODOC = 'ES' AND "
	cQuery		+= 		" SE5AUX.D_E_L_E_T_ = ' ' "
	cQuery 		+= ") AND "      

	If !Empty(cPeNat)
		cQuery 	+= "SED.ED_INDRET NOT IN (" + cNatur + ") AND " 
	Endif		
                                                     
	cQuery	 	+= "SED.ED_CODIGO = SE5.E5_NATUREZ AND "

	cQuery		+= "SED.D_E_L_E_T_ = ' ' AND "
	cQuery		+= "SE5.D_E_L_E_T_ = ' ' AND "
	cQuery		+= "SA1.D_E_L_E_T_ = ' ' 	"
			
	cQuery 		:= ChangeQuery(cQuery)                 
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
			
	For nX := 1 To len(aStruct)
			If aStruct[nX][2] <> "C" .And. FieldPos(aStruct[nX][1])<>0
			TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		EndIf                                          
			
	Next nX

	SE1 -> ( dbSetOrder ( 1 ) ) //FILIAL+PREFIXO+NUM+PARCELA+TIPO
	SA1 -> ( dbSetOrder ( 1 ) ) //FILIAL+COD+LOJA
	SED -> ( dbSetOrder ( 1 ) ) //FILIAL+CODIGO
				
	aTitRet	:= {}				
	dbSelectArea(cAliasQry) 
	cAliasSPED := cAliasQry		
	While !(cAliasQry)->(Eof())
                               
			If (cAliasQry)->MOTBX == "CMP"  .And. "NCC" $ (cAliasQry)->DOCUMEN 
				If SE1->(DbSeek(xFilial("SE1") + (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO )) 							
					If SE1->E1_SCORGP = "1" 
						(cAliasQry)->(Dbskip())			   
						Loop						
					Endif
				Endif	
			Endif     

			If !Empty(cRASpd) .And. MVRECANT $ (cAliasQry)->TIPO .And.;//Caso tenham naturezas tenho que antecipar o credito do tipo RA (MV_NTRASPD).
				SE1->(DbSeek(xFilial("SE1") + (cAliasQry)->DOCUMEN )) .And. Alltrim(SE1->E1_NATUREZ) $ cRASpd
				(cAliasQry)->(Dbskip())			   
				Loop
			ElseIf MVRECANT $ (cAliasQry)->TIPO .And.;//Caso seja um RA sem compensar que não será antecipado.
				SE1->(DbSeek(xFilial("SE1") + (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)-> PARCELA + (cAliasQry)->TIPO ))
				(cAliasQry)->(Dbskip())			   
				Loop
			Endif
			
			//Titulo compensado com Retenção Antecipada
			If !Empty(cRASpd) .And. (cAliasQry)->MOTBX == "CMP" .And. ;
				!((cAliasQry)->TIPO $ MVRECANT) .And. ;
				SE1->(DbSeek(xFilial("SE1") + (cAliasQry)->DOCUMEN)) .And. ;		
				Alltrim(SE1->E1_NATUREZ) $ cRASpd .And. ;
				(SE1->E1_TIPO $ MVRECANT) .And. ;
				Dtos(SE1->E1_EMISSAO) < cDataIni
				
				(cAliasQry)->(Dbskip())			   
				Loop

			Endif
			
			If (Alltrim((cAliasQry)->RECPIS) == "N" .And. Alltrim((cAliasQry)->RECCOFI) == "N") .Or. ((cAliasQry)->(PERCPIS+PERCCOF) <= 0 .And. (cAliasQry)->RECPIS <> "P" .And. (cAliasQry)->RECCOFI <> "P")
			 	(cAliasQry)->(Dbskip())			   
				Loop
			Endif	
			
			aRet		:=	{}
			aRegBx		:= {}			
			aTitRet	:= {}
			cChaveBx	:=	""
			
			If (cAliasQry)->MOTBX $ 'NOR_CMP'
				cChaveBx		:=	SpdMotNOR((cAliasQry)->( FILIAL + PREFIXO + NUMERO + PARCELA + TIPO))
				If Empty(cChaveBx)
					(cAliasQry)->(Dbskip())
					Loop
				Endif
			ElseIf (cAliasQry)->MOTBX = 'TRF'
				aSpdMotTRF	:=	SpdTRFB((cAliasQry)->( PREFIXO + NUMERO + PARCELA + TIPO + FILORIG))

				If !aSpdMotTRF[3] 
					(cAliasQry)->( dbSkip())
					Loop
				Endif

				If aSpdMotTRF[1] 
					cAliasQry := aSpdMotTRF[2] // novo alias a ser tratado
				Endif
			Endif  									
			
			cChaveDes	:=	cChaveOri	:=	""
			cIndCmlDes	:=	cIndCmlOri	:= ""		
			
			If stod((cAliasQry)->DATAM) >= ctod("22/06/2015")
				nVlMinImp	:= 0
			EndIf
			
			If (cAliasQry)->VALORBX <= nVlMinImp //Caso o titulo seja retido em outro nao devo enviar no bloco F600.
				SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES
				If SFQ->(DbSeek(xFilial("SFQ")+"E1B"+ (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA ))               
					
					If SE1->(DbSeek(xFilial("SE1") + SFQ->FQ_PREFDES + SFQ->FQ_NUMDES + SFQ->FQ_PARCDES + SFQ->FQ_TIPODES)) 			
						cIndCmlDes	:=	Iif(SED->(Dbseek(xFilial("SED")+SE1->E1_NATUREZ)),SED->ED_INDCMLT,'') //Natureza destino  					
						cChaveDes	:=(xFilial("SE1") + SFQ->FQ_PREFDES + SFQ->FQ_NUMDES + SFQ->FQ_PARCDES + SFQ->FQ_TIPODES)     
					Endif
									
					If SE1->(DbSeek(xFilial("SE1") + SFQ->FQ_PREFORI + SFQ->FQ_NUMORI + SFQ->FQ_PARCORI + SFQ->FQ_TIPOORI)) 
						cIndCmlOri	:= Iif(SED->(Dbseek(xFilial("SED")+SE1->E1_NATUREZ)),SED->ED_INDCMLT,'')	//Natureza origem  
						cChaveOri	:= (xFilial("SE1") + SFQ->FQ_PREFORI + SFQ->FQ_NUMORI + SFQ->FQ_PARCORI + SFQ->FQ_TIPOORI)     
					Endif
					
					If Alltrim(cIndCmlDes) == Alltrim(cIndCmlOri) 											
						aRegBx	:= {}			
						cChaveBx	:=	""
						If (cAliasQry)->MOTBX $ 'NOR_CMP'
							cChaveBx		:=	SpdMotNOR((cAliasQry)->( FILIAL + PREFIXO + NUMERO + PARCELA + TIPO))
							If Empty(cChaveBx)
								(cAliasQry)->(Dbskip())
								Loop
							Endif
						ElseIf (cAliasQry)->MOTBX = 'TRF'
							aSpdMotTRF	:=	SpdTRFB((cAliasQry)->( PREFIXO + NUMERO + PARCELA + TIPO + FILORIG))
			
							If !aSpdMotTRF[3] 
								(cAliasQry)->( dbSkip())
								Loop
							Endif
			
							If aSpdMotTRF[1] 
								cAliasQry := aSpdMotTRF[2] // novo alias a ser tratado
							Endif
						Endif 						
					Else
						Aadd(aTitRet,{(xFilial("SE1") + SFQ->FQ_PREFORI + SFQ->FQ_NUMORI + SFQ->FQ_PARCORI + SFQ->FQ_TIPOORI + SFQ->FQ_CFORI+ SFQ->FQ_LOJAORI),;
											(cAliasQry)->PIS,(cAliasQry)->COFINS,(cAliasQry)->CSL})					
					Endif	
				Endif						
			Endif
			
			
			lRetSFQ		:=.F. //Retem valores de impostos de outros titulos.
			SFQ->(DbSetOrder(1)) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
			If SFQ->(DbSeek(xFilial("SFQ")+"E1B"+ (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA))
		   		lRetSFQ	:=	.T.			   	
		   	  	If Len(aTitRet) == 0
			   		While SFQ->FQ_FILIAL + SFQ->FQ_ENTORI + SFQ->FQ_PREFORI + SFQ->FQ_NUMORI + SFQ->FQ_PARCORI + SFQ->FQ_TIPOORI + SFQ->FQ_CFORI + SFQ->FQ_LOJAORI ==	xFilial("SFQ") +;
				   			( "E1B" + (cAliasQry)->PREFIXO + (cAliasQry)->NUMERO + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIENTE + (cAliasQry)->LOJA)			   	
				   			SE1 -> ( dbSetOrder ( 1 ) ) //FILIAL+PREFIXO+NUM+PARCELA+TIPO 
						If SE1 -> ( dbSeek ( xFilial("SE1") + SFQ->FQ_PREFDES + SFQ->FQ_NUMDES + SFQ->FQ_PARCDES + SFQ->FQ_TIPODES ) )			
			   				Aadd(aTitRet,{(xFilial("SE1") + SFQ->FQ_PREFDES + SFQ->FQ_NUMDES + SFQ->FQ_PARCDES + SFQ->FQ_TIPODES + SFQ->FQ_CFDES+ SFQ->FQ_LOJADES),;
												SE1->E1_PIS,SE1->E1_COFINS,SE1->E1_CSLL,	SE1->E1_IRRF , SE1->E1_ISS, SE1->E1_INSS})					
						Endif
			   			SFQ->(Dbskip())			   			
			   		Enddo			   		
			   	Endif		   			        			   				 		   	
			Endif					 
		 
		   nVrPIS		:=	(cAliasQry)->PIS
			nVrCOFINS	:=	(cAliasQry)->COFINS
			nVrCSLL		:=	(cAliasQry)->CSL
			
			If lRetSFQ //Caso seja titulo que retenha outro com cumulatividades diferentes devo entao subtrair os valores para nao enviar duas vezes.					                                          								
				For nI:= 1 To Len(aTitRet)
					nVrPIS		-=	aTitRet[nI,2]
					nVrCOFINS	-=	aTitRet[nI,3]
					nVrCSLL	-=	aTitRet[nI,4]						
				Next
			Endif									
				
		  	nTxMoeda	:= If((cAliasQry)->TXMOEDA>1,(cAliasQry)->TXMOEDA,1)
		    
		  	aAreaSEV := SEV->(GetArea())//Tratamento para multiplas naturezas.			
			DbSelectArea("SEV")
			DbSetOrder(1)	//Verificar se o titulo possui multiplas naturezas.
			If	SEV->(DbSeek(xFilial("SEV")+(cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO+(cAliasQry)->CLIENTE+(cAliasQry)->LOJA))
				While SEV->(EV_PREFIXO+EV_NUM+EV_PARCELA+EV_TIPO+EV_CLIFOR+EV_LOJA) ==;
						((cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO+(cAliasQry)->CLIENTE+(cAliasQry)->LOJA) .And. !SEV->(EOF())					
								
						nVrRateio:=	0								
								
						If SEV->EV_IDENT == "1"  // 1=Rateio de Inclusao 2=Rateio de Baixa 
							lIdent	:= .T.
							SEV->(Dbskip())
							Loop							
						Endif								
								
						If ((cAliasQry)->PIS >0 .or. (cAliasQry)->COFINS > 0 ) .AND. !lIdent
							aAreaSED := SED->(GetArea()) //Caso a natureza apure Pis ou Cofins
							DbSelectArea("SED")							
							DbSetOrder(1)			
							If DbSeek(xFilial("SED")+ SEV->EV_NATUREZ) .And. !Empty(SED->ED_PERCPIS) .Or. !Empty(SED->ED_PERCCOF)										
										   
							   nVrRateio	:=	SEV->EV_PERC
											                                                   
 								AaDd(aRegBx,{(cAliasQry)->CNPJ,(cAliasQry)->DATAM,((SEV->EV_VALOR*nTxMoeda)*SED->ED_PERCPIS)/100,;
													((SEV->EV_VALOR*nTxMoeda)*SED->ED_PERCCOF)/100,((SEV->EV_VALOR*nTxMoeda)*SED->ED_PERCCSL)/100,;
												 	((cAliasQry)->VALORBX*nVrRateio),SED->ED_PERCPIS,(cAliasQry)->A1INDRET,SED->ED_INDRET,;
												  	SED->ED_INDCMLT,SED->ED_COND,;
												  	(cAliasQry)->RECCOFI,(cAliasQry)->RECPIS,(cAliasQry)->RECNO,;
												  	(nVrPIS*nVrRateio),(nVrCOFINS*nVrRateio),(nVrCSLL*nVrRateio),"1",0,"",SED->ED_PERCCOF,(cAliasQry)->DOCUMEN})
							Endif
							RestArea(aAreaSED)
						EndIf								        		
						SEV->(Dbskip())
				Enddo
				
				If lIdent .and. ((cAliasQry)->PIS >0 .or. (cAliasQry)->COFINS > 0 )// rateio na emissão, então deve ser incluso no array como não sendo multiplas naturezas.
					lIdent	:= .F.
					If   !Empty((cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO)
								AaDd(aRegBx,{(cAliasQry)->CNPJ,(cAliasQry)->DATAM,nVrPIS,nVrCOFINS,nVrCSLL,;
													 	(cAliasQry)->VALORBX,(cAliasQry)->PERCPIS,(cAliasQry)->A1INDRET,(cAliasQry)->INDRET,;
													  	(cAliasQry)->INDCMLT,(cAliasQry)->COND,;
													  	(cAliasQry)->RECCOFI,(cAliasQry)->RECPIS,(cAliasQry)->RECNO,;
													  	0,0,0,"2",(cAliasQry)->VLMOED2,((cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO),;
													  	(cAliasQry)->PERCCOF,(cAliasQry)->DOCUMEN})
					Endif	
				Endif								
			Else //Nao trata de multiplas naturezas

				If   !Empty((cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO);
					.and. ((cAliasQry)->PIS >0 .or. (cAliasQry)->COFINS > 0	)
 						AaDd(aRegBx,{(cAliasQry)->CNPJ,(cAliasQry)->DATAM,nVrPIS,nVrCOFINS,nVrCSLL,;
												 	(cAliasQry)->VALORBX,(cAliasQry)->PERCPIS,(cAliasQry)->A1INDRET,(cAliasQry)->INDRET,;
												  	(cAliasQry)->INDCMLT,(cAliasQry)->COND,;
												  	(cAliasQry)->RECCOFI,(cAliasQry)->RECPIS,(cAliasQry)->RECNO,;
												  	0,0,0,"2",(cAliasQry)->VLMOED2,((cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO),;
												  	(cAliasQry)->PERCCOF,(cAliasQry)->DOCUMEN})
				Endif	
			Endif																									  						  
			For nI:= 1 to Len(aRegBx)
			
				aF600 := Array(12)							
				nPercCof	:=	0
				If !Empty(aRegBx[nI][22])						
					Aadd(aRegCmp,aRegBx[nI][22])
				EndIf	
				     
				//Calculo inverso da retenção para achar a base
				If nTxMoeda > 1
					nBase := Round((((If(aRegBx[nI,18]="2",(aRegBx[nI,3]+aRegBx[nI,4]+aRegBx[nI,5]),(aRegBx[nI,15]+aRegBx[nI,16]+aRegBx[nI,17]))+aRegBx[nI,6]) *;
																			 aRegBx[nI,7]/100) * 100)/ aRegBx[nI,7],2)		
				Else                                             					 
					If aRegBx[nI,7] == 0 .And. aRegBx[nI,18]="2"  
						//Caso seja um titulo gerado por outro modulo que possua uma natureza sem percentual de imposto. Ou seja, que os Pis e Cofins 
						//por exemplo sejam gerados pelos percentuais do produto.
						SE1 -> ( DbSeek ( xFilial("SE1") + aRegBx[nI,20]) )            						
						nPercPis	:=	(aRegBx[nI,3]/If(SE1->E1_SALDO == 0 ,aRegBx[nI,19],aRegBx[nI,6]))*100										
					Else    
						nPercPis	:=	aRegBx[nI,7]					
						nPercCof	:=	aRegBx[nI,21]											
					Endif
					
					
					nBase:=SpdVlBase(aRegBx[nI])//-- Busca a base de calculo nos registros de impostos retidos

					If nBase==0

						nBase := Round((aRegBx[nI,4] * 100)/ nPercCof ,2)
						
						//Problemas com arredondamento.
						If Round((aRegBx[nI,3] * 100)/ nPercPis ,2) <> Round((aRegBx[nI,4] * 100)/ nPercCof ,2) .And.;
								Round((aRegBx[nI,4] * 100)/ nPercCof ,2) > Round((aRegBx[nI,3] * 100)/ nPercPis ,2) 
							nBase := Round((aRegBx[nI,4] * 100)/ nPercCof ,2)															
						Endif

						If lRetSFQ					
							If nPercCof > 0 .And. Round((aRegBx[nI,4] * 100)/ nPercCof ,2) > nBase
								nBase	:=	nBase + (Round((aRegBx[nI,4] * 100)/ nPercCof ,2) - nBase)
							Endif					
						Endif					
						
						If 	SE1 -> ( DbSeek ( xFilial("SE1") + aRegBx[nI,20]) ) //Tratando erro de centavos no cálculo.            						
							If SE1->E1_SALDO == 0 .And. SE1->E1_VALOR > nBase .And. (SE1->E1_VALOR - nBase) <= 0.5
								nBase	:=	SE1->E1_VALOR 						
							Endif					
						Endif
					EndIF
				
				Endif					
	
		    	//Indicador da retenção
				If Empty(aRegBx[nI,9]) 
					aF600[1] := aRegBx[nI,8]
				Else 
					aF600[1] := aRegBx[nI,9]
				Endif	
			    
		   		aF600[2] := aRegBx[nI,2]					//-- Data da emissão			    
			   aF600[3] := nBase 						//-- Base do imposto
			   aF600[4] := aRegBx[nI,3] + aRegBx[nI,4]//-- Valor da retenção
			    
			   //Indicador de cumulatividade das naturezas de receita
			    If Alltrim(aRegBx[nI,10]) == "1" 
			    	cIndCmlt := "0" //Cumulativo
			    ElseIf Alltrim(aRegBx[nI,10]) == "2"
			       	cIndCmlt := "1" //Não Cumulativo
		        EndIf		    	
			    	
			    aF600[5] := Iif(Alltrim(aRegBx[nI,11]) == "R", cIndCmlt, "")
			    
			   aF600[6] := aRegBx[nI,1] 	 //-- CNPJ do cliente
			   aF600[7] := aRegBx[nI,3]	 //-- Valor da retenção de PIS
			   aF600[8] := aRegBx[nI,4]   //-- Valor da retenção de COFINS
			    
			   //Indicador da pessoa declarante
			   If (aRegBx[nI,13] $ "SP" .Or. aRegBx[nI,12] $ "SP") .And. SM0->M0_CGC <> aRegBx[nI,1]  //-- Empresa beneficiária da retenção
			   	aF600[9] := "0"
			   ElseIf (aRegBx[nI,13] $ "SP" .Or. aRegBx[nI,12] $ "SP") .And. SM0->M0_CGC == aRegBx[nI,1] //-- Empresa responsável pelo recolhimento
			    	aF600[9] := "1"
			   EndIf
			    
			   aF600[10] := "SE5" 			 //-- Tabela
	 	    	aF600[11] := aRegBx[nI,14] //-- Recno 		   	

				If lSPDCodR2
					cPeCodRec := ExecBlock ("SPDF6004",.F.,.F.,{aF600})	
					If Len(cPeCodRec) > 4
						cPeCodRec := Subst(cPeCodRec,1,4)	 			
					Endif
				EndIf
				If (lSpdCodRec .Or. lSPDCodR2) .And. !Empty(cPeCodRec)
					aF600[12] := cPeCodRec 	 //-- Codigo da Receita			 					
				Else
					aF600[12] := ""		 	//-- Codigo da Receita			 									
				Endif
	 	    	 
			   aAdd(aReturn,aF600)		   
				nBase := 0
		   	nProp := 0
			
			Next 
			(cAliasQry)->(dbSkip())
		
			If (cAliasQry)->(Eof()) .and. (cAliasQry <> cAliasSPED)
		   	(cAliasQry)->(dbCloseArea())
		   	cAliasQry := cAliasSPED
				(cAliasQry)->(Dbskip())
		   Endif
	EndDo		
	 
	(cAliasQry)->(dbCloseArea())
			
Endif

If !Empty(cRASpd) //Enviar somente os titulos do tipo RA caso o parametro esteja configurado para antecipacao de creditos de Pis e Cofins.
		
	cAliasQry	:= "SE5QRY"
	aStruct	 	:= SE5->(dbStruct())
			
	cQuery	 	:= "SELECT " 
		
	//Campos de referência
	cQuery	 	+= "SE5.E5_FILIAL FILIAL, SE5.E5_PREFIXO PREFIXO, SE5.E5_NUMERO NUMERO, SE5.E5_PARCELA PARCELA, SE5.E5_TIPO TIPO, SE5.E5_CLIFOR CLIENTE, "
	cQuery		+= "SE5.E5_LOJA LOJA, SE5.E5_TXMOEDA TXMOEDA, SE5.E5_MOTBX MOTBX, SE5.E5_FILORIG FILORIG, "
	cQuery	 	+= "SE5.E5_TIPODOC TIPODOC, SE5.E5_PRETPIS PRETPIS, SE5.E5_DOCUMEN DOCUMEN, "		
	cQuery	 	+= "SE5.E5_DATA DATAM, SE5.E5_VLMOED2 VALORBX, " 
	cQuery	 	+= "SE5.R_E_C_N_O_ RECNO, " 		
					
	//Campos do SED
	cQuery	 	+= "SED.ED_PERCPIS PERCPIS, SED.ED_PERCCOF PERCCOF, SED.ED_COND COND, " 		

	//Indicador de Retenção
	cQuery	+= "SED.ED_INDRET INDRET, "
			
	//Indicador de Cumulatividade
	cQuery	+= "SED.ED_INDCMLT INDCMLT, "
		
	//Dados do cliente para o SPED
	cQuery	 	+= "SA1.A1_CGC CNPJ, SA1.A1_RECPIS RECPIS, SA1.A1_RECCOFI RECCOFI "					
	cQuery	 	+= ", SA1.A1_INDRET A1INDRET "								
	cQuery	 	+= "FROM "		
	cQuery 		+= RetSqlName("SE5") + " SE5,  "
	cQuery 		+= RetSqlName("SED") + " SED,  "		
	cQuery 		+= RetSqlName("SA1") + " SA1   "		
			
	cQuery	 	+= "WHERE " 		
		
	cQuery	 	+=	"SED.ED_FILIAL='" + xFilial("SED") + "' AND " 							
	cQuery 		+=	"SA1.A1_FILIAL ='" + xFilial("SA1") + "' AND "

	If !Empty( iif( lUnidNeg, FWFilial("SE5") , xFilial("SE5") ) ) //Filiais compartilhadas   
		cQuery 		+=	"SE5.E5_FILIAL='" + xFilial("SE5") + "' AND "		
	Else
		cQuery 		+=	"SE5.E5_FILORIG='" + cFilAnt + "' AND "
	Endif
  
	cQuery	 	+= "SE5.E5_CLIFOR = SA1.A1_COD AND "
	cQuery	 	+= "SE5.E5_LOJA = SA1.A1_LOJA AND "				
	cQuery	 	+= "(SE5.E5_DATA >= '"+cDataIni+"' AND SE5.E5_DATA <= '"+cDataFim+"') AND "
	cQuery		+= "SE5.E5_SITUACA <> 'C' AND "			
	cQuery	 	+= "SE5.E5_RECPAG = 'R' AND "	
	cQuery 		+= "SE5.E5_TIPO = 'RA' AND "
	cQuery 		+= "SE5.E5_TIPODOC = 'RA' AND "
	cQuery 		+= "SE5.E5_DOCUMEN = '' AND "
	cQuery 		+= "SE5.E5_NATUREZ IN " + FormatIn(cRASpd,"|") + " AND "

	//Exclui os titulos que possuem estorno
	cQuery	 	+= "SE5.E5_SEQ NOT IN "
	cQuery 		+= "(SELECT SE5AUX.E5_SEQ FROM "+RetSqlName("SE5")+" SE5AUX WHERE "
	cQuery		+=		" SE5AUX.E5_FILIAL = SE5.E5_FILIAL AND "
	cQuery		+= 		" SE5AUX.E5_PREFIXO = SE5.E5_PREFIXO AND "
	cQuery		+= 		" SE5AUX.E5_NUMERO = SE5.E5_NUMERO AND  "
	cQuery		+= 		" SE5AUX.E5_PARCELA = SE5.E5_PARCELA AND " 
	cQuery		+= 		" SE5AUX.E5_TIPO = SE5.E5_TIPO AND " 
	cQuery		+= 		" SE5AUX.E5_CLIFOR = SE5.E5_CLIFOR AND " 
	cQuery		+= 		" SE5AUX.E5_LOJA = SE5.E5_LOJA AND "     
	cQuery		+= 		" SE5AUX.E5_TIPODOC = 'ES' AND "
	cQuery		+= 		" SE5AUX.D_E_L_E_T_ = ' ' "
	cQuery 		+= ") AND "      
                                                     
	cQuery	 	+= "SED.ED_CODIGO = SE5.E5_NATUREZ AND "

	cQuery		+= "SED.D_E_L_E_T_ = ' ' AND "
	cQuery		+= "SE5.D_E_L_E_T_ = ' ' AND "
	cQuery		+= "SA1.D_E_L_E_T_ = ' ' 	"
			
	cQuery 		:= ChangeQuery(cQuery)                 
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
			
	For nX := 1 To len(aStruct)
			If aStruct[nX][2] <> "C" .And. FieldPos(aStruct[nX][1])<>0
			TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		EndIf                                          
			
	Next nX
	
	SE1 -> ( dbSetOrder ( 1 ) ) //FILIAL+PREFIXO+NUM+PARCELA+TIPO

	dbSelectArea(cAliasQry) 
	cAliasSPED := cAliasQry		
	While !(cAliasQry)->(Eof())				
			
			If lBaixa //caso ja tenha sido registrado em baixa por compensação no mesmo periodo 
				If Ascan(aRegCmp,{|x| AllTrim(x) == AllTrim((cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO+(cAliasQry)->LOJA)}) > 0
					(cAliasQry)->( dbSkip())
					Loop
				EndIf	
			EndIf
			If SE1->(DbSeek(xFilial("SE1") + (cAliasQry)->PREFIXO+(cAliasQry)->NUMERO+(cAliasQry)->PARCELA+(cAliasQry)->TIPO )) 
				nBase := SE1->E1_BASEPIS
			EndIf
			aF600 := Array(11)
			
			nPisBx	:= Round((nBase *(cAliasQry)->PERCPIS)/100,2)
			nCofBx	:=	Round((nBase * (cAliasQry)->PERCCOF)/100,2)		
			
	    	//Indicador da retenção
			If Empty((cAliasQry)->INDRET) 
				aF600[1] := (cAliasQry)->A1INDRET				
			Else 
				aF600[1] := (cAliasQry)->INDRET
			Endif	
		    
			aF600[2] := (cAliasQry)->DATAM 	//-- Data da emissão
			aF600[3] := nBase 				//-- Base do imposto
			aF600[4] := nPisBx + nCofBx 	//-- Valor da retenção
		    
		   //Indicador de cumulatividade das naturezas de receita
		    If (cAliasQry)->INDCMLT == "1" 
		    	cIndCmlt := "0" //Cumulativo
		    ElseIf (cAliasQry)->INDCMLT == "2"
		       	cIndCmlt := "1" //Não Cumulativo
	        EndIf		    	
		    	
		    aF600[5] := Iif((cAliasQry)->COND == "R", cIndCmlt, "")
		    
		   aF600[6] := (cAliasQry)->CNPJ 	 	//-- CNPJ do cliente
		   aF600[7] := nPisBx 						//-- Valor da retenção de PIS
		   aF600[8] := nCofBx 						//-- Valor da retenção de COFINS
		    
		   //Indicador da pessoa declarante
		   If ((cAliasQry)->RECPIS $ "SP" .Or. (cAliasQry)->RECCOFI $ "SP") .And. SM0->M0_CGC <> (cAliasQry)->CNPJ 	  //-- Empresa beneficiária da retenção
		   	aF600[9] := "0"
		   ElseIf ((cAliasQry)->RECPIS $ "SP" .Or. (cAliasQry)->RECCOFI $ "SP") .And. SM0->M0_CGC == (cAliasQry)->CNPJ //-- Empresa responsável pelo recolhimento
		    	aF600[9] := "1"
		   EndIf
		    
		   aF600[10] := "SE5" 				 //-- Tabela
		   aF600[11] := (cAliasQry)->RECNO  //-- Recno 
		    
		   aAdd(aReturn,aF600)
		    
		   nBase := 0
		   nProp := 0

			(cAliasQry)->(dbSkip())
		
			If (cAliasQry)->(Eof()) .and. (cAliasQry <> cAliasSPED)
		   	(cAliasQry)->(dbCloseArea())
		   	cAliasQry := cAliasSPED
				(cAliasQry)->(Dbskip())
		   Endif
	EndDo		
	 
	(cAliasQry)->(dbCloseArea())
			
Endif

If Select(cAliasSPED)>0
	(cAliasSPED)->(dbCloseArea())
Endif                                  

SC5->(RestArea(aAreaSC5))

FWFreeArray(aRegCmp)

EndIf

Return aReturn


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SPDVLDVAR

Valida variaveis globais e conteudo de paramentros criadas para o Sped Pis/Cofins..
Arquivo anterior: MATXATU.PRX

Parametros
EXPC1 - Conteudo da variavel que vai ser utilizada no SQL  

@Author	Andrea Verissimo
@since	06/03/2012
/*/
//-----------------------------------------------------------------------------------------------------


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ SpdVldVar   º Autor ³ Andrea Verissimo º Data ³  06/03/12  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Valida variaveis globais e conteudo de paramentros criadas º±±
±±º          ³ para o Sped Pis/Cofins.                                    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ EXPC1 - Conteudo da variavel que vai ser utilizada no SQL  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Financeiro - Relatorio de Razonete                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function SpdVldVar( cTexto )
     
Local cRet			:= ""
Local nA				:=	0

If Len(cTexto) > 0 
	cRet	:=	"'"	// Inserindo aspas e virgulas para o select da query.
	For nA:=1 To Len(cTexto)
		If Subst(cTexto,nA,1) $ ";,-_|./" 				 
  	   	cRet+="','"
  	   Else                                                               
  	   	cRet+=Subst(cTexto,nA,1)        
  	   Endif
  	Next	
	cRet	+=	"'"	
Endif

Return cRet


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINSPDM220

Função para retornar deducoes para os registros M210/M610 M220/M620 do SPED PIS/COFINS.
Arquivo anterior: MATXATU.PRX

@Author	TOTVS
@since	06/03/2012
/*/
//-----------------------------------------------------------------------------------------------------
Function FinSpdM220(nMesRef,nAnoRef)
Local aReturn	:= {}
Local aM220  	:= {}
Local cQuery 	:= ""
Local cAliasQry:= ""
Local aStruct	:= {}    
Local nJ			:= 0
Local nI			:= 0 
Local nX			:=	0
Local nValorPis:= 0
Local nValorCof:= 0 
Local nBasePis	:= 0   
Local nBaseCof	:= 0   
Local cDataIni	:= ""
Local cDataFim := ""
Local dLastDay := ""
Local cMotBx	:= SuperGetMv("MV_MTBXSD",,"")	
Local aMotBx 	:= ReadMotBx()
Local aRegSped	:=	{}
Local aAreaSEV	:=	{}
Local nVrRateio:=	0
Local cDescBx	:= ""
Local cIndCmlt	:=	""              
Local lUnidNeg := FWSizeFilial() > 2	// Indica se usa Gestao Corporativa
Local nQtdMesAnt	:=	SuperGetMv("MV_NMSPD",,2)  //Nro de meses que devem ser checado para a emissão dos titulos.
Local dDtCanc		:=	Ctod("01/"+StrZero(nMesRef,2)+"/"+StrZero(nAnoRef,4)) 
Local aBaseIrf	:=	{} //Compoem os valores das bases dos titulos para calcular os impostos. 	
Local nBaseIrf	:= 0
Local nVlMinImp	:= IIF(dDataBase > dLastPcc, GetNewPar("MV_VL13137",10), GetNewPar("MV_VL10925",5000))                        
Local lPCCBaixa := FPccBxCr()
Local nPerc		:=	0         
Local cOrigem	:= ""
Local dDtRef		:=	Ctod("  /  /  ")
Local cChaveSe5	:=	""

DEFAULT nMesRef := Month(dDataBase)
DEFAULT nAnoRef := Year(dDataBase)

If cPaisLoc == "BRA"

cDataIni := StrZero(nAnoRef,4)+StrZero(nMesRef,2)+"01"
dLastDay := LastDay(Ctod("01/"+StrZero(nMesRef,2)+"/"+StrZero(nAnoRef,4))) 
cDataFim := StrZero(nAnoRef,4)+StrZero(nMesRef,2)+StrZero(Day(dLastDay),2)

For nX := 1 to nQtdMesAnt
	dDtCanc	:= Firstday(dDtCanc)-1
Next nX
dDtCanc	:= Firstday(dDtCanc)
	                        
cMotBx	:=	SpdVldVar(cMotBx)
           
cOrigem	:=	"" //Tratamentos para o ponto de entrada SPDF1003
If lSpdOrig
	cOrigem := ExecBlock ("SPDF1003",.F.,.F.)	
Endif		

If !Empty(cMotBx)
	
	cAliasQry	:= "SE5QRY"
	aStruct 	:= SE5->(dbStruct())			
	cQuery	 	:= "SELECT " 	                                     
	cQuery	 	+= "SE5.E5_FILIAL FILIAL, SE5.E5_PREFIXO PREFIXO, SE5.E5_NUMERO NUM, SE5.E5_PARCELA PARCELA, SE5.E5_TIPO TIPO, "
	cQuery		+= "SE5.E5_CLIFOR CLIFOR, SE5.E5_LOJA LOJA, SE5.E5_TIPODOC TIPODOC, SE5.E5_MOTBX MOTBX, "
	cQuery	 	+= "SE5.E5_DATA DATAM, SE5.E5_VALOR VALOR, SE5.E5_RECPAG RECPAG, " 
	cQuery	 	+= "SE5.E5_VRETPIS VRETPIS, SE5.E5_VRETCOF VRETCOF, SE5.E5_PRETPIS PRETPIS, SE5.E5_PRETCOF PRETCOF, " 				
	cQuery	 	+= "SE5.R_E_C_N_O_ RECNO, " 				
		
	cQuery		+= "SE1.E1_ORIGEM ORIGEM, SE1.E1_EMISSAO EMISSAO, SE1.E1_MOEDA MOEDA, SE1.E1_VLCRUZ VLCRUZ, SE1.E1_VALOR VALORE1, "   
	cQuery		+= "SE1.E1_PIS PIS, SE1.E1_COFINS COFINS, SE1.E1_CSLL CSLL, SE1.E1_SALDO SALDO, "   
	cQuery		+= "SE1.E1_IRRF VRIR, SE1.E1_INSS VRINSS, SE1.E1_ISS VRISS, "		
	cQuery		+= "SE1.E1_TXMOEDA TXMOEDA,SE1.E1_BASEIRF BASEIRF, SE1.E1_MULTNAT MULTNAT, SE1.E1_TIPO TIPOE1, SE1.E1_NATUREZ NATUREZ "

	cQuery		+= ",SED.ED_CONTA SEDCCONTA "
		
	cQuery	 	+= "FROM "		
	cQuery 		+= RetSqlName("SE5") + " SE5, "		
	cQuery 		+= RetSqlName("SE1") + " SE1, "
	cQuery 		+= RetSqlName("SED") + " SED "			

	cQuery	 	+= "WHERE " 		
		
	If !Empty( iif( lUnidNeg, FWFilial("SE5") , xFilial("SE5") ) ) //Filiais compartilhadas
		cQuery	+= "SE5.E5_FILIAL = '"  + cFilAnt + "' AND "
	Else                                                    
		cQuery	+= "SE5.E5_FILIAL = '"  + xFilial("SE5") + "' AND "			
		cQuery	+= "SE5.E5_FILORIG = '" + cFilAnt + "' AND "
	EndIf
		
	If !Empty( xFilial("SE1") )
		cQuery 	+= "SE1.E1_FILIAL = '"  + cFilAnt + "' AND "
	Else                                                
		cQuery  += "SE1.E1_FILIAL = '" + xFilial("SE1") + "' AND "
		cQuery 	+= "SE1.E1_FILORIG = '" + cFilAnt + "' AND "	
	EndIf                      

	cQuery 	+= "SED.ED_CODIGO = SE1.E1_NATUREZ AND "			
	cQuery 	+=	"SED.ED_FILIAL='" + xFilial("SED") + "' AND " 	

	cQuery 		+= "SE5.E5_PREFIXO = SE1.E1_PREFIXO AND " 
	cQuery 		+= "SE5.E5_NUMERO = SE1.E1_NUM AND " 
	cQuery 		+= "SE5.E5_PARCELA = SE1.E1_PARCELA AND " 
	cQuery 		+= "SE5.E5_TIPO = SE1.E1_TIPO AND " 					
	cQuery	 	+= "SE5.E5_CLIFOR = SE1.E1_CLIENTE AND "
	cQuery		+= "SE5.E5_LOJA = SE1.E1_LOJA AND "
			
	cQuery	 	+= "SE5.E5_RECPAG = 'R' AND "					  
		
	cQuery	 	+= "(SE5.E5_DATA >= '"+cDataIni+"' AND SE5.E5_DATA <= '"+cDataFim+"') AND "
		
	cQuery	 	+= "(SE1.E1_EMISSAO >= '"+Dtos(dDtCanc)+"' AND SE1.E1_EMISSAO <= '"+Dtos(dDataBase)+"') AND "		
		
	cQuery 		+= "(SED.ED_APURCOF <> '' OR SED.ED_APURPIS <> '') AND "

	//Exclui os titulos que possuem estorno
	cQuery	 	+= "SE5.E5_SEQ NOT IN "
	cQuery 		+= "(SELECT SE5AUX.E5_SEQ FROM "+RetSqlName("SE5")+" SE5AUX WHERE "
	cQuery		+= 		" SE5AUX.E5_FILIAL = SE5.E5_FILIAL AND "
	cQuery		+= 		" SE5AUX.E5_PREFIXO = SE5.E5_PREFIXO AND "
	cQuery		+= 		" SE5AUX.E5_NUMERO = SE5.E5_NUMERO AND  "
	cQuery		+= 		" SE5AUX.E5_PARCELA = SE5.E5_PARCELA AND " 
	cQuery		+= 		" SE5AUX.E5_TIPO = SE5.E5_TIPO AND " 
	cQuery		+= 		" SE5AUX.E5_CLIFOR = SE5.E5_CLIFOR AND " 
	cQuery		+= 		" SE5AUX.E5_LOJA = SE5.E5_LOJA AND "     
	cQuery		+= 		" SE5AUX.E5_TIPODOC = 'ES' AND "
	cQuery		+= 		" SE5AUX.D_E_L_E_T_ = '' "
	cQuery 		+= ") AND "
				     
	cQuery 		+= "SE5.E5_TIPO NOT IN " + FormatIn(MVABATIM,"|") + " AND "
	cQuery 		+= "SE5.E5_TIPO NOT IN " + FormatIn(MV_CRNEG,If("|"$MV_CRNEG,"|",","))  + " AND "
	cQuery		+= "SE5.E5_TIPO NOT IN " + FormatIn(MVPROVIS,If("|"$MVPROVIS,"|",",") ) + " AND " 
		
	If lPCCBaixa //PCC na Baixa.
		cQuery		+= "SE5.E5_TIPODOC NOT IN ('JR','MT','J2','M2','DC','CM','D2','C2','LJ','OC','OD','OG','CX') AND "
	Endif						
		
	cQuery 		+= "(SE5.E5_MOTBX IN (" + cMotBx + ")  OR SE5.E5_TIPODOC='CP') AND " 	//Compensacao com NCC e baixa cancelada (MV_MTBXSD).
	cQuery		+= "SE5.E5_SITUACA <> 'C' AND "
	cQuery		+= "SE5.D_E_L_E_T_ = '' "						
	    
	cQuery 		+= " ORDER BY FILIAL, PREFIXO, NUM, PARCELA, TIPO, CLIFOR, LOJA"
	
	cQuery 		:= ChangeQuery(cQuery)                 
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)
				
	For nX := 1 To Len(aStruct)
		If aStruct[nX][2] <> "C" 
			TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
		EndIf
	Next nX							   
 	
	dbSelectArea(cAliasQry) 
	
	While !(cAliasQry)->(Eof()) 
					   
			aRegSped		:=	{}								
			cDescBx		:= ""			                                                                                                
			dDtRef  := (cAliasQry)->DATAM			// Data de Referencia 																			

		  	If 	(cAliasQry)->TIPODOC = 'CP'  	//Verifica somente Compensacao de NF com NCC. 
					cChaveSE5	:=(cAliasQry)->PREFIXO+	(cAliasQry)->NUM+(cAliasQry)->PARCELA+(cAliasQry)->TIPO+(cAliasQry)->LOJA																
					SE5->(Dbsetorder(10)) // E5_FILIAL+E5_DOCUMEN
					If SE5->(Dbseek(xFilial("SE5")+ cChaveSE5)) .And. !(SE5->E5_TIPO $ MV_CRNEG)
						(cAliasQry)->(dbSkip())
						Loop															
					Endif								                    
		 	Endif				
			
			If lPCCBaixa //PCC na Baixa.
				//Para casos de titulos gerados com valor que nao retenha imposto vou enviar o ajuste qdo for gerado o imposto que esta retido em outro titulo.				
				If (cAliasQry)->VALOR <= nVlMinImp	.And. ((cAliasQry)->PRETPIS == "2"  .Or. (cAliasQry)->PRETCOF == "2")
					(cAliasQry)->(Dbskip())
					Loop					
				Endif	
			Else //PCC na Emissao.
				If (cAliasQry)->VALOR <= nVlMinImp //Caso o titulo seja retido em outro nao devo enviar no bloco F600.
					SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES
					If SFQ->(DbSeek(xFilial("SFQ")+"SE1"+ (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ))               					
						(cAliasQry)->(Dbskip())
						Loop															
					Endif						
				Endif					
			Endif
				                           
			If 	(cAliasQry)->TIPODOC = 'CP'  
         	cDescBx	:=	"Baixa Financeira compensando "
			Else				
				//Checando motivos de baixas que nao foram enviados.
				nI :=  Ascan(aMotBx, {|x| Substr(x,1,3) == Upper((cAliasQry)->MOTBX ) })
				If (cAliasQry)->MOTBX $ cMotBx .And. nI > 0 
					If Substr(aMotBx[nI],26,01) <> "N" //movimenta banco
						(cAliasQry)->(Dbskip())
						Loop					
					Else
						cDescBx	:=	"Baixa Financeira por "+ Substr(aMotBx[nI],07,10)
					Endif									
				Else
					(cAliasQry)->(Dbskip())
					Loop					
				Endif										
			Endif
				
			If (Month(Stod((cAliasQry)->EMISSAO)) = Month(Stod((cAliasQry)->DATAM)) ) .And. (Year(Stod((cAliasQry)->EMISSAO)) = Year(Stod((cAliasQry)->DATAM)))
				(cAliasQry)->(Dbskip())
				Loop										
			Endif
			
			If (cAliasQry)->TIPOE1 $ (MVPROVIS,'PR ','PRE')
				(cAliasQry)->(Dbskip())
				Loop
			Endif            
											
			If !(AllTrim((cAliasQry)->ORIGEM) $ ("FINA040|FINA050|FINA280|FINA290|FINA565|FINA460|JURA203|CNTA121|LOJA701|"+cOrigem))//Somente de titulos financeiros. Assim não se duplica envio de Bloco M com a nota de devolução do FISCAL													
				(cAliasQry)->(Dbskip())
				Loop
			Endif
			
			aBaseIrf	:=	{}
			aBaseIrf := FinRepM220(cAliasQry)				
			nBaseIrf	:=	aBaseIrf[1] //Valor base para calculo do Pis e Cofins...

			If (cAliasQry)->MULTNAT	=	"1"
				aAreaSEV := SEV->(GetArea())
				DbSelectArea("SEV")
				DbSetOrder(1)
				//Verificar se o titulo possui multiplas naturezas.
				SEV->(DbSeek(xFilial("SEV")+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA)))
				While SEV->(EV_PREFIXO+EV_NUM+EV_PARCELA+EV_TIPO+EV_CLIFOR+EV_LOJA) ==;
						(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA) .And. !SEV->(EOF())														
						nVrRateio	:=	0									
						If SEV->EV_IDENT <> "1" // 1=Rateio de Inclusao 2=Rateio de Baixa 
							SEV->(Dbskip())
							Loop							
						Endif									
						aAreaSED := SED->(GetArea()) //Caso a natureza apure Pis ou Cofins
						DbSelectArea("SED")							
						DbSetOrder(1)			
						If DbSeek(xFilial("SED")+ SEV->EV_NATUREZ) 
							If (!Empty(SED->ED_APURCOF) .Or. !Empty(SED->ED_APURPIS))											
								If (cAliasQry)->MOEDA > 1
								  nVrRateio	:= Round((SEV->EV_VALOR/(cAliasQry)->VALORE1) * (cAliasQry)->VLCRUZ,2)
								Endif											
									aAdd(aRegSped,{"SE1","1",;
											SEV->EV_RECPAG,If((cAliasQry)->MOEDA > 1,nVrRateio,SEV->EV_VALOR),SEV->EV_PERC,SED->ED_CODIGO,SED->ED_APURPIS,SED->ED_APURCOF,;
											SED->ED_CSTPIS,SED->ED_CSTCOF,SED->ED_PCAPPIS,SED->ED_PCAPCOF,SED->ED_INDCMLT,(cAliasQry)->MOEDA,(cAliasQry)->VLCRUZ,;
											(cAliasQry)->BASEIRF,(cAliasQry)->VALORE1,(cAliasQry)->NUM,(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA),dDtRef, (cAliasQry)->SEDCCONTA})																					
							Endif												
							RestArea(aAreaSED)								        		
						Endif
					  	SEV->(Dbskip())
				Enddo
			   RestArea(aAreaSEV)										
			Else //Nao trata de multiplas naturezas
			 	SED->(Dbseek(xFilial("SED")+(cAliasQry)->NATUREZ))						
				If	(!Empty(SED->ED_APURCOF) .Or. !Empty(SED->ED_APURPIS)) 
					aAdd(aRegSped,{"SE1",; //1
										"2",; //2
										SEV->EV_RECPAG,; //3
										If((cAliasQry)->MOEDA > 1,nVrRateio,SEV->EV_VALOR),; //4
										SEV->EV_PERC,; //5
										SED->ED_CODIGO,; //6
										SED->ED_APURPIS,; //7
										SED->ED_APURCOF,; //8
										SED->ED_CSTPIS,; //9
										SED->ED_CSTCOF,; //10
										SED->ED_PCAPPIS,; //11
										SED->ED_PCAPCOF,; //12
										SED->ED_INDCMLT,; //13
										(cAliasQry)->MOEDA,; //14
										(cAliasQry)->VLCRUZ,; //15
										(cAliasQry)->BASEIRF,; //16
										(cAliasQry)->VALORE1,; //17
										(cAliasQry)->NUM,; //18
										(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA),;//19
										dDtRef,; //20
										(cAliasQry)->SEDCCONTA}) //21
				Endif													
			Endif  
			
			nPerc		:=	0
			If !lPCCBaixa //PCC na Emissao vou precisar de um percentual devido a gravacao dos valores dos impostos e do titulo serem diferentes que na baixa.				
				nPerc	:=	PercM220(cAliasQry)// Percentual da baixa.							
				nBaseIrf	:=	(nBaseIrf *nPerc)/100
			Endif	
																							
			For nJ	:= 1 To Len(aRegSped)			
	   		aM220			:= Array(15)				
				nValorPis	:=	0					
				nValorCof	:=	0										 					
				nBasePis	:=  0   
				nBaseCof	:=  0   
				If aRegSped[nJ,2] == "1" //Possui multiplas naturezas
					nValorPis := Round(aRegSped[nJ,4] * (aRegSped[nJ,11]/100),2) 
					nBasePis  := aRegSped[nJ,4]	
				ElseIf !Empty(aRegSped[nJ,7])//APURPIS
					//nValorPis := Round(If(aRegSped[nJ,14]>1,aRegSped[nJ,15],If(aRegSped[nJ,16]>0 .And. aRegSped[nJ,16]>aRegSped[nJ,17],aRegSped[nJ,16],aRegSped[nJ,17])) *;
					//						 (aRegSped[nJ,11]/100),2) 												
					nValorPis := Round(nBaseIrf*(aRegSped[nJ,11]/100),2) 	
					nBasePis  := nBaseIrf	
				Else
					nValorPis := 0
				Endif	
							
				If aRegSped[nJ,2] == "1" //Possui multiplas naturezas
					nValorCof := Round(aRegSped[nJ,4] * (aRegSped[nJ,12]/100),2) 
					nBaseCof  := aRegSped[nJ,4] 
				ElseIf !Empty(aRegSped[nJ,8])//APURCOF
					//nValorCof := Round(If(aRegSped[nJ,14]>1,aRegSped[nJ,15],If(aRegSped[nJ,16]>0 .And. aRegSped[nJ,16]>aRegSped[nJ,17],aRegSped[nJ,16],aRegSped[nJ,17])) *;
					//							 (aRegSped[nJ,12]/100),2) 
					nValorCof := Round(nBaseIrf*(aRegSped[nJ,12]/100),2) 				
					nBaseCof  := nBaseIrf
				Else
					nValorCof := 0
				Endif																			  																				
					
				aM220[1]  := "0"				// Ajuste de Redução 										
				aM220[2]  := "06"				// Código do Ajuste 
				aM220[3]  := aRegSped[nJ,19]					// Nro documento (nao obrigatorio)
				aM220[4]  := cDescBx		// Descricao do Ajuste (nao obrigatorio)								                                    
				aM220[5]  := aRegSped[nJ,20]				// Data de Referencia 				
				aM220[6]  := nValorPis		// Valor do Pis 										
				aM220[7]  := nValorCof		// Valor do Cofins 													
				aM220[8]  :=	aRegSped[nJ,9]			//CST PIS                     
				aM220[9]  :=	aRegSped[nJ,10]		//CST COF                     
				aM220[10]  :=	aRegSped[nJ,11]	// Aliquota do Pis 										
				aM220[11]  := aRegSped[nJ,12]		// Aliquota do Cofins 										
		                                                  
				//Indicador de Cumulatividade
				If aRegSped[nJ,13] == "1" 
				 	cIndCmlt := "0" //Cumulativo
				ElseIf aRegSped[nJ,13] == "2"
				  	cIndCmlt := "1" //Não Cumulativo
				EndIf				    	
				aM220[12] := cIndCmlt
				aM220[13] := nBasePis //Base de Cálculo do PIS
				aM220[14] := nBaseCof //Base de Cálculo da COFINS
				aM220[15] := aRegSped[nJ,21] //Conta da Natureza
					
				aAdd(aReturn, aM220)
				     
			Next				
		  
			If lPCCBaixa //PCC na Emissao vou precisar de um percentual devido a gravacao dos valores dos impostos e do titulo serem diferentes que na baixa.				
				(cAliasQry)->(Dbskip())
			Endif
   Enddo	   	               																																	              							
	
	(cAliasQry)->(dbCloseArea())
			
Endif		
		
EndIf
		
Return aReturn


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SPDMOTTRF

Verifica titulos de transferencia entre filiais se devem ser enviados para o Sped Pis/Cofins..
Arquivo anterior: MATXATU.PRX

@Author	Andrea Verissimo
@since	13/03/2012
/*/
//-----------------------------------------------------------------------------------------------------
Static Function SpdMotTRF(cChave)
Local cQuery 	:= ""
Local cAlias	:= "TRF"
Local lAchou	:= .F.
Local cMotQry	:= ""
Local lConsidera := .T.

dbSelectArea("SE6")
SE6->(Dbsetorder(4)) // FILIAL + PREFIXO + NUM + PARCELA + TIPO + FILORIG
If SE6->(Dbseek(xFilial("SE6")+cChave))  // Titulo do tipo TRF
	dbSelectArea("SE1")
	SE1->(Dbsetorder(1)) // FILIAL + PREFIXO + NUM + PARCELA + TIPO
	If SE1->(Dbseek(SE6->(E6_FILDEB+E6_PREFIXO+E6_NUM+E6_PARCELA+E6_TIPO))) .And. !Empty(SE1->E1_BAIXA) // baixado
		lAchou	:= .T.
	
		cQuery	:= "SELECT "
		
		//Campos de referência
		cQuery	+= "SE5.E5_FILIAL FILIAL , SE5.E5_PREFIXO PREFIXO, SE5.E5_NUMERO NUMERO, SE5.E5_PARCELA PARCELA, SE5.E5_TIPO TIPO, "		
		cQuery	+= "SE5.E5_CLIFOR CLIENTE, SE5.E5_LOJA LOJA, SE5.E5_TIPODOC TIPODOC, SE5.E5_DATA DATAM, SE5.E5_FILORIG FILORIG, "
		cQuery	+= "SE5.E5_VALOR VALORE5 , SE5.E5_NATUREZ NATUREZ, SE5.E5_MOTBX MOTBX, SE5.R_E_C_N_O_ RECNO, "
		cQuery	+= "SE1.E1_PIS PIS, SE1.E1_COFINS COFINS, SE1.E1_CSLL CSLL, SE1.E1_SALDO SALDO, SE1.E1_VALOR VALORE1, SE1.E1_BASEPIS BASEPIS, "
		cQuery	+= "SE1.E1_IRRF VRIR, SE1.E1_INSS VRINSS, SE1.E1_ISS VRISS, SE1.E1_MOEDA TPMOEDA, SE1.E1_VLCRUZ VLCRUZ,SE1.E1_PEDIDO PEDIDO"
		
		cQuery	+= "FROM "
		cQuery 	+= RetSqlName("SE5") + " SE5, "
		cQuery 	+= RetSqlName("SE1") + " SE1 "								
			
		cQuery 	+= "WHERE "
		
		If !Empty( iif( lUnidNeg, FWFilial("SE5") , xFilial("SE5") ) ) //Filiais compartilhadas   
			cQuery 	+=	"SE5.E5_FILIAL='" + SE6->E6_FILDEB + "' AND "				
		Else                                                              
			cQuery 	+=	"SE5.E5_FILORIG='" + SE6->E6_FILDEB + "' AND "
		Endif

		cQuery	+= "SE1.E1_FILIAL = '"  + SE6->E6_FILDEB + "' AND "														
		cQuery 	+= "E5_PREFIXO='"+SE1->E1_PREFIXO+"' AND "
		cQuery 	+= "E5_NUMERO='"+SE1->E1_NUM+"' AND "
		cQuery 	+= "E5_PARCELA='"+SE1->E1_PARCELA+"' AND "
		cQuery 	+= "E5_TIPO='"+SE1->E1_TIPO+"' AND "
		cQuery 	+= "E5_CLIFOR='"+SE1->E1_CLIENTE+"' AND "
		cQuery 	+= "E5_LOJA='"+SE1->E1_LOJA+"' AND "
		cQuery 	+= "SE5.E5_PREFIXO = SE1.E1_PREFIXO AND " 
		cQuery 	+= "SE5.E5_NUMERO = SE1.E1_NUM AND " 
		cQuery 	+= "SE5.E5_PARCELA = SE1.E1_PARCELA AND " 
		cQuery 	+= "SE5.E5_TIPO = SE1.E1_TIPO AND " 					
		cQuery	+= "SE5.E5_CLIFOR = SE1.E1_CLIENTE AND "
		cQuery	+= "SE5.E5_LOJA = SE1.E1_LOJA AND "
	
		cQuery	+= "( ( SE1.E1_PIS > 0 AND SE1.E1_SABTPIS = 0 ) OR ( SE1.E1_COFINS > 0 AND SE1.E1_SABTCOF = 0 ) ) AND "
		
		cQuery	 	+= "SE5.E5_RECPAG = 'R' AND "
		cQuery		+= "SE5.E5_SITUACA <> 'C' AND "
		cQuery	 	+= "SE5.E5_DATA BETWEEN '" + cDataIni + "' AND '" + cDataFim + "' AND "
	 
		cMotQry		:= "('FAT','LIQ'"
		
		If !Empty(cPeMBx)
			cMotQry += "," + cMotBaixa
		Endif
			
		If !Empty(cBxSql)
			cMotQry += "," + cBxSql
		EndIf

		cMotQry		+= ")"
		
		cQuery		+= "SE5.E5_MOTBX NOT IN " + cMotQry + " AND "

		//Exclui os titulos que possuem estorno
		cQuery	 	+= "SE5.E5_SEQ NOT IN "
		cQuery 		+= "( SELECT SE5AUX.E5_SEQ FROM "
		cQuery		+=      RetSqlName("SE5") + " SE5AUX WHERE "
		cQuery		+= 		" SE5AUX.E5_FILIAL = SE5.E5_FILIAL AND "
		cQuery		+= 		" SE5AUX.E5_PREFIXO = SE5.E5_PREFIXO AND "
		cQuery		+= 		" SE5AUX.E5_NUMERO = SE5.E5_NUMERO AND  "
		cQuery		+= 		" SE5AUX.E5_PARCELA = SE5.E5_PARCELA AND " 
		cQuery		+= 		" SE5AUX.E5_TIPO = SE5.E5_TIPO AND "      
		cQuery		+= 		" SE5AUX.E5_CLIFOR = SE5.E5_CLIFOR AND " 
		cQuery		+= 		" SE5AUX.E5_LOJA = SE5.E5_LOJA AND "
		cQuery		+= 		" SE5AUX.E5_TIPODOC = 'ES' AND "
		cQuery		+= 		" SE5AUX.D_E_L_E_T_ = ' ' "
		cQuery 		+= ") AND "

		cQuery		+= "SE1.D_E_L_E_T_ = ' ' AND "
		cQuery		+= "SE5.D_E_L_E_T_ = ' ' "
    	
		cQuery 		+= " ORDER BY FILIAL, PREFIXO, NUMERO, PARCELA, TIPO, CLIENTE, LOJA"
		
		cQuery 	:= ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)

	ELSE
		lConsidera := .F.
	Endif

Endif

Return {lAchou,cAlias,lConsidera}


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SPDTRFB

Verifica titulos de transferencia entre filiais se devem ser enviados para o Sped Pis/Cofins.
Arquivo anterior: MATXATU.PRX

@Author	Andrea Verissimo
@since	13/03/2012
/*/
//-----------------------------------------------------------------------------------------------------
Static Function SpdTRFB(cChave)
Local cQuery 		:= ""
Local cAlias		:= "TRF"
Local lAchou		:= .F.
Local cMotQry		:= ""
Local lConsidera 	:= .T.

dbSelectArea("SE6")
SE6->(Dbsetorder(4)) // FILIAL + PREFIXO + NUM + PARCELA + TIPO + FILORIG
If SE6->(Dbseek(xFilial("SE6")+cChave))  // Titulo do tipo TRF
	dbSelectArea("SE1")
	SE1->(Dbsetorder(1)) // FILIAL + PREFIXO + NUM + PARCELA + TIPO
	If SE1->(Dbseek(SE6->(E6_FILDEB+E6_PREFIXO+E6_NUM+E6_PARCELA+E6_TIPO))) .And. !Empty(SE1->E1_BAIXA) // baixado
		lAchou		:= .T.
	
		cQuery		:= "SELECT "		
		cQuery	 	+= "SE5.E5_FILIAL FILIAL, SE5.E5_PREFIXO PREFIXO, SE5.E5_NUMERO NUMERO, SE5.E5_PARCELA PARCELA, SE5.E5_TIPO TIPO, SE5.E5_CLIFOR CLIENTE, "
		cQuery		+= "SE5.E5_LOJA LOJA, SE5.E5_TXMOEDA TXMOEDA, SE5.E5_MOTBX MOTBX, SE5.E5_FILORIG FILORIG, "
		cQuery	 	+= "SE5.E5_TIPODOC TIPODOC, "		
		cQuery	 	+= "SE5.E5_DATA DATAM, SE5.E5_VALOR VALORBX, SE5.E5_VRETPIS PIS, SE5.E5_VRETCOF COFINS, SE5.E5_VRETCSL CSL,SE5.E5_VLMOED2 VLMOED2, " 
		cQuery	 	+= "SE5.R_E_C_N_O_ RECNO,SE5.R_E_C_N_O_ NROREG, " 				
		cQuery	 	+= "SED.ED_PERCPIS PERCPIS, SED.ED_COND COND, SED.ED_INDRET INDRET, SED.ED_INDCMLT INDCMLT,SED.ED_CODIGO CODIGO,SED.ED_PERCCOF PERCCOF, "
		
		//Dados do cliente para o SPED
		cQuery	 	+= "SA1.A1_CGC CNPJ, SA1.A1_RECPIS RECPIS, SA1.A1_RECCOFI RECCOFI "					
		cQuery		+= ", SA1.A1_INDRET A1INDRET "
		cQuery	 	+= "FROM "		
		cQuery 		+= RetSqlName("SE5") + " SE5,  "
		cQuery 		+= RetSqlName("SED") + " SED,  "		
		cQuery 		+= RetSqlName("SA1") + " SA1   "		
			
		cQuery	 	+= "WHERE " 		
		
		If !Empty( iif( lUnidNeg, FWFilial("SE5") , xFilial("SE5") ) ) //Filiais compartilhadas   
			cQuery 	+=	"SE5.E5_FILIAL='" + SE6->E6_FILDEB + "' AND "				
		Else                                                              
			cQuery 	+=	"SE5.E5_FILORIG='" + SE6->E6_FILDEB + "' AND "
		Endif

		cQuery	 	+=	"SED.ED_FILIAL='" + xFilial("SED") + "' AND "
		cQuery 		+=	"SA1.A1_FILIAL ='" + xFilial("SA1") + "' AND "
		
  		cQuery 		+= "E5_PREFIXO='"+SE1->E1_PREFIXO+"' AND "
		cQuery 		+= "E5_NUMERO='"+SE1->E1_NUM+"' AND "
		cQuery 		+= "E5_PARCELA='"+SE1->E1_PARCELA+"' AND "
		cQuery 		+= "E5_TIPO='"+SE1->E1_TIPO+"' AND "
		cQuery 		+= "E5_CLIFOR='"+SE1->E1_CLIENTE+"' AND "
		cQuery 		+= "E5_LOJA='"+SE1->E1_LOJA+"' AND "
		
		cQuery	 	+= "SE5.E5_CLIFOR = SA1.A1_COD AND "
		cQuery	 	+= "SE5.E5_LOJA = SA1.A1_LOJA AND "				
		cQuery	 	+= "(SE5.E5_DATA >= '"+cDataIni+"' AND SE5.E5_DATA <= '"+cDataFim+"') AND "
		cQuery	 	+= "((SE5.E5_VRETPIS > 0 AND SE5.E5_PRETPIS = '') OR (SE5.E5_VRETCOF > 0 AND SE5.E5_PRETCOF = '')) AND "
		cQuery		+= "SE5.E5_SITUACA <> 'C' AND "			
		cQuery	 	+= "SE5.E5_RECPAG = 'R' AND "	
		cQuery 		+= "SE5.E5_TIPO NOT IN " + FormatIn(MVABATIM,"|") + " AND "
		cQuery 		+= "SE5.E5_TIPO NOT IN " + FormatIn(MV_CRNEG,If("|"$MV_CRNEG,"|",","))  + " AND "
		cQuery		+= "SE5.E5_TIPO NOT IN " + FormatIn(MVPROVIS,If("|"$MVPROVIS,"|",",") ) + " AND "	

		cMotQry		:= "('FAT','LIQ'"
			
		If !Empty(cPeMBx)
			cMotQry += "," + cMotBaixa
		Endif                        
				
		If !Empty(cBxSql)
			cMotQry += "," + cBxSql
		EndIf                       
		
		cMotQry		+= ")"			
		cQuery		+= "SE5.E5_MOTBX NOT IN " + cMotQry + " AND "
								
		//Exclui os titulos que possuem estorno
		cQuery	 	+= "SE5.E5_SEQ NOT IN "
		cQuery 		+= "(SELECT SE5AUX.E5_SEQ FROM "+RetSqlName("SE5")+" SE5AUX WHERE "
		cQuery		+=		" SE5AUX.E5_FILIAL = SE5.E5_FILIAL AND "
		cQuery		+= 		" SE5AUX.E5_PREFIXO = SE5.E5_PREFIXO AND "
		cQuery		+= 		" SE5AUX.E5_NUMERO = SE5.E5_NUMERO AND  "
		cQuery		+= 		" SE5AUX.E5_PARCELA = SE5.E5_PARCELA AND " 
		cQuery		+= 		" SE5AUX.E5_TIPO = SE5.E5_TIPO AND " 
		cQuery		+= 		" SE5AUX.E5_CLIFOR = SE5.E5_CLIFOR AND " 
		cQuery		+= 		" SE5AUX.E5_LOJA = SE5.E5_LOJA AND "     
		cQuery		+= 		" SE5AUX.E5_TIPODOC = 'ES' AND "
		cQuery		+= 		" SE5AUX.D_E_L_E_T_ = ' ' "
		cQuery 		+= ") AND "      

		If !Empty(cPeNat)
			cQuery 	+= "SED.ED_INDRET NOT IN (" + cNatur + ") AND " 
		Endif		
                                                     
		cQuery	 	+= "SED.ED_CODIGO = SE5.E5_NATUREZ AND "
		cQuery		+= "SED.D_E_L_E_T_ = ' ' AND "
		cQuery		+= "SE5.D_E_L_E_T_ = ' ' AND "
		cQuery		+= "SA1.D_E_L_E_T_ = ' ' 	"		
		
		cQuery 	:= ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias,.T.,.T.)

	ELSE
		lConsidera := .F.
	Endif

Endif

Return {lAchou,cAlias,lConsidera}


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SPDMOTNOR

Verifica titulos de transferencia entre filiais se devem ser enviados para o Sped Pis/Cofins.
Arquivo anterior: MATXATU.PRX

@Author	Andrea Verissimo
@since	13/03/2012
/*/
//-----------------------------------------------------------------------------------------------------
Static Function SpdMotNOR(cChave)         
Local cChaveRet	:= cChave

dbSelectArea("SE6")
SE6->(Dbsetorder(5)) // FILDEB + PREFIXO + NUM + PARCELA + TIPO 
If SE6->(Dbseek(cChave)) // se achar nao leva 
	cChaveRet	:= ""
Endif

Return cChaveRet

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINSPD500

Funcão para retornar informacoes para a geracao do Regime de Caixa bloco F500 do SPED PIS/COFINS.
Arquivo anterior: MATXATU.PRX

@Author	Clovis /Andrea
@since	30/05/2012
/*/
//-----------------------------------------------------------------------------------------------------
Function FinSpdF500(nMesRef,nAnoRef,cAliasF500,lMudReg)
Local cDataIni	:= ""
Local cDataFim 	:= ""
Local dLastDay 	:= ""
Local aCampos	:= {}
Local aTam     	:= {}
Local cChave	:=	""
Local cArqTrab	:=	""
Local cIndTmp  	:=	""
Local cNome		:= ""
Local nTamCli_1	:= 0
Local nTamCli_2	:= 0 	
Local nStatus	:= 0

Default lMudReg := .F. // Valida mudança de regime.

cDataIni := StrZero(nAnoRef,4)+StrZero(nMesRef,2)+"01"
dLastDay := LastDay(Ctod("01/"+StrZero(nMesRef,2)+"/"+StrZero(nAnoRef,4)))
cDataFim := StrZero(nAnoRef,4)+StrZero(nMesRef,2)+StrZero(Day(dLastDay),2)


If _oFINXSPD2 <> Nil // Se ja existe a estrutura da temporaria, apaga os dados e reutiliza ela
	nStatus := TCSQLEXEC("DELETE FROM "+__cFin2Name)
    
	cAliasF500 := _oFINXSPD2:GetAlias()
    
	If nStatus < 0 .Or. SELECT(cAliasF500) <= 0
		_oFINXSPD2:Delete()
		_oFINXSPD2 	:= Nil
		__cFin2Name := ""
	Else
		(cAliasF500)->(DBGOTO(1))
	Endif

Endif

If _oFINXSPD2 == Nil
	aCampos := {}
	aTam:=TamSX3("E5_FILIAL")
	AADD(aCampos,{"FILIAL"  ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_PREFIXO")
	AADD(aCampos,{"PREFIXO"    ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_NUMERO")
	AADD(aCampos,{"NUMERO"   ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_PARCELA")
	AADD(aCampos,{"PARCELA" ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_TIPO")
	AADD(aCampos,{"TIPO"   ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_CLIFOR")
	nTamCli_1 := aTam[1] + 12
	nTamCli_2 := aTam[2]
	AADD(aCampos,{"CLIENTE" ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_LOJA")
	nTamCli_1 += aTam[1]
	nTamCli_2 += aTam[2]
	AADD(aCampos,{"LOJA"   ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_TIPODOC")
	AADD(aCampos,{"TIPODOC"   ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E1_ORIGEM")
	AADD(aCampos,{"ORIGEM"   ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_VALOR")
	AADD(aCampos,{"VALOR"   ,"N",aTam[1],aTam[2]})
	aTam:=TamSX3("E5_DATA")
	AADD(aCampos,{"DTMOV" ,"C",8,0})
	aTam:=TamSX3("E1_NATUREZ")
	AADD(aCampos,{"NATUREZ"   ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("ED_CSTPIS")
	AADD(aCampos,{"CSTPIS"   ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("ED_PCAPPIS")
	AADD(aCampos,{"ALIQPIS"   ,"N",aTam[1],aTam[2]})
	aTam:=TamSX3("E1_VALOR")
	AADD(aCampos,{"BASEPIS"   ,"N",aTam[1],aTam[2]})
	aTam:=TamSX3("E1_PIS")
	AADD(aCampos,{"VRPIS"   ,"N",aTam[1],aTam[2]})
	aTam:=TamSX3("E1_COFINS")
	AADD(aCampos,{"VRCOFINS"   ,"N",aTam[1],aTam[2]})
	aTam:=TamSX3("ED_CSTCOF")
	AADD(aCampos,{"CSTCOF"   ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("ED_PCAPCOF")
	AADD(aCampos,{"ALIQCOF"   ,"N",aTam[1],aTam[2]})
	aTam:=TamSX3("E1_VALOR")
	AADD(aCampos,{"BASECOF"   ,"N",aTam[1],aTam[2]})
	aTam:=TamSX3("ED_CONTA")
	AADD(aCampos,{"CONTA"   ,"C",aTam[1],aTam[2]})			
	aTam:=TamSX3("E1_VALOR")
	AADD(aCampos,{"VRDESC"   ,"N",aTam[1],aTam[2]})
	aTam:=TamSX3("E1_VALOR")
	AADD(aCampos,{"VRDESCON"   ,"N",aTam[1],aTam[2]})
	AADD(aCampos,{"TABELA"  ,"C",3,0})
	AADD(aCampos,{"NROREG"  ,"N",9,0})
	aTam:=TamSX3("E1_SERIE")
	AADD(aCampos,{"SERIE"  ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("E1_VALOR")
	AADD(aCampos,{"PERC"   ,"N",aTam[1],6})
	aTam:=TamSX3("E1_VALOR")
	AADD(aCampos,{"VALORE1"   	,"N",aTam[1],aTam[2]})
	AADD(aCampos,{"ORIFIN"  ,"L",1,0})
	aTam:=TamSX3("ED_TABCCZ")
	AADD(aCampos,{"ED_TABCCZ"  ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("ED_CODCCZ")
	AADD(aCampos,{"ED_CODCCZ"  ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("ED_GRUCCZ")
	AADD(aCampos,{"ED_GRUCCZ"  ,"C",aTam[1],aTam[2]})
	aTam:=TamSX3("ED_DTFCCZ")
	AADD(aCampos,{"ED_DTFCCZ"  ,"C",aTam[1],aTam[2]})
	AADD(aCampos,{"CHVCLIENTE" ,"C" , nTamCli_1 , nTamCli_2 })
	aTam:=TamSX3("E1_EMISSAO")
	AADD(aCampos,{"EMISSAO" ,"C",8,0})
	aTam:=TamSX3("E1_NUMPRO")				
	AADD(aCampos,{"NUMPRO"   ,"C",aTam[1],aTam[2]})					
	aTam:=TamSX3("E1_INDPRO")
	AADD(aCampos,{"INDPRO"   ,"C",aTam[1],aTam[2]})   
	aTam:=TamSX3("E1_TITPAI")
	AADD(aCampos,{"RASTRO"   ,"C",aTam[1],aTam[2]}) 
	aTam:=TamSX3("E1_EMISSAO")
	AADD(aCampos,{"DTPAI" ,"C",10,0})

    cIndTmp  := CriaTrab(Nil,.F.)
    cChave   := "FILIAL+PREFIXO+NUMERO+PARCELA+TIPO+CLIENTE+LOJA+TIPODOC"
    _oFINXSPD2 := FWTemporaryTable():New( cAliasF500 )  
    _oFINXSPD2:SetFields(aCampos)   
    _oFINXSPD2:AddIndex(cIndTmp, StrToKarr2( cChave, "+"))  
    _oFINXSPD2:Create()

    __cFin2Name := _oFINXSPD2:GetRealName()
Endif

DbSelectArea(cAliasF500)
DbSetOrder(1)
					
TrbF500(cArqTrab,cDataIni,cDataFim,cAliasF500,lMudReg) //Gera dados na tabela TRB quando banco em TOP.

cNome	:= ""
If !(cAliasF500)->(Eof())
   cNome	:=	cAliasF500
Endif
  			
Return(cNome)


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FinSpdDel

Indica para FISA001 se pode fechar o Alias cAliasF500 e cAliasBlcI

@Author	TOTVS
@since	13/07/2022
/*/
//-----------------------------------------------------------------------------------------------------
Function FinSpdDel(nIdObject As Numeric) As Logical

	Local cAls As Character
	Local lRet As Logical

	cAls := '' 
	lRet := .T.

	If nIdObject == 2
		If _oFINXSPD2 <> Nil
			cAls := _oFINXSPD2:GetAlias()
			If SELECT(cAls) > 0
				lRet:=.F.
			EndIF
		EndIf
	EndIF

	If nIdObject == 3
		If _oFINXSPD3 <> Nil
			cAls := _oFINXSPD3:GetAlias()
			If SELECT(cAls) > 0
				lRet:=.F.
			EndIF
		EndIf
	EndIF

Return(lRet)

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} TRBF500

Funcão para gerar tabela TRB a ser enviada no bloco F500 do SPED PIS/COFINS..
Arquivo anterior: MATXATU.PRX

@Author	TOTVS
@since	31/05/2012
/*/
//-----------------------------------------------------------------------------------------------------
Static Function TrbF500(cArqTrab,cDataIni,cDataFim,cAliasF500,lMudReg)
Local cNomeArq		:= ""
Local cAlias		:= ""
Local nI 			:= 0   
Local aAreaSEV 		:= SEV->(GetArea())
Local aAreaSED 		:= SED->(GetArea()) 
Local nVrRateio		:= 0								
Local nPisBx		:= 0
Local nCofBx		:= 0							
Local nBase			:= 0	
Local nPercBx		:= 0
Local cChaveBx		:= ""
Local nVlrSe5		:= 0
Local nTpMoeda		:= 0
Local aRegBx		:= {}
Local nVrPIS		:= nVrCOFINS	:=	nVrCSLL :=	nVrIR	:=	nVrISS :=	nVrINSS	:=	0                            
Local lTitRet		:= .F.			
Local nVlMinImp 	:= IIF(dDataBase > dLastPcc, GetNewPar("MV_VL13137",10), GetNewPar("MV_VL10925",5000))
Local aTitRet		:= {} 						//titulos que retem outros
Local lRecIss		:= .F.
Local lMVDescIss	:= GetNewPar("MV_DESCISS",.F.)
Local lBxSped		:= SuperGetMv("MV_RENTRIB",,.F.) //Habilita o envio receitas financeiras não tributaveis 	
																	 //,ou seja, dados da baixa (juros, descontos ou variacao cambial).
Local cNatRec		:= SuperGetMv("MV_NATRNT",,"") 	//Codigo da Natureza de Receita Nao Tributavel.
Local aNatNTrib		:= {}
Local lNRastDSD		:= SuperGetMV("MV_NRASDSD",.T.,.F.) //Parametro que permite ao usuario utilizar o desdobramento da maneira anterior ao implementado com o rastremaento.
Local cMotBx		:= SuperGetMv("MV_MTBXSD",,"")	
Local aMotBx 		:= ReadMotBx()
Local cBaixa		:= cBxSql		:=	""
Local nJ			:= 0
Local nVRDESC		:= 0
Local lRetSe5		:= .F.
Local lPCCBaixa		:= FPccBxCr()
Local nVrRet		:= nVrRetOld	:=	nVrRetAnt	:=	0
Local nDescInc		:= 0 //Valor do desconto incondicional .
Local nDescCon  	:= 0 //Valor do desconto condicional .
Local nOldDescCon	:= 0
Local nTotBx		:= nTotBaixa	:= 0
Local nVrSevPIS		:= nVrSevCOF		:=	nVrSevCSLL 	:=	nVrSev	:=	0
Local nDescSev		:= nMultaSev	:=	nJurosSev		:=	0
Local nTotPis		:= nTotCof		:=	nTotCsll	:=	nVrPcc	:= nTotIRF	:=	0	
Local lEnvBaseP	:=	.T. //Enviar ou nao base de Pis dependendo do codigo de CST.
Local lEnvBaseC	:=	.T. //Enviar ou nao base de Cofins dependendo do codigo de CST.
Local cUltBx		:= ""	
Local lAplSped 		:= SuperGetMv("MV_APLFIN",,.F.) //Habilita o envio das Aplicacoes financeiras.
Local aAlias		:= If(lAplSped,{"SE5","SEI"},{"SE5"})
Local nA			:= 0
Local aAreaSC5 		:= SC5->(GetArea())
Local nTxMoeda		:= nMoeda	:=	0
Local cTpApl		:= ""                            
Local aRegApl		:= {}                   
Local cNatApl		:= SuperGetMv("MV_APLNAT",,"") 	//Codigo da Natureza das Aplicacoes Financeiras.      
Local lSEI_			:= SuperGetMv("MV_APLAPRO",,.F.) //Habilita o envio das Aplicacoes financeiras.
Local cChaveApl		:= ""           
Local nVrJuros		:= nRegApl	:=	0		
Local cChaveSE5		:= "" 
Local lSpdBase		:= ExistBlock("SPDF500B")
Local cOrigem		:= ""
Local lHelp			:= .F.
Local cEnvLiq 		:= SuperGetMv("MV_ENVLIQ",.T.,"2")  //1 = Envia    2= Não envia				 		
Local lLiq			:= .T.
Local aAreaSe5		:= GetArea()
Local aTitBrut		:= {}
Local lBq10925		:= SuperGetMv("MV_BQ10925",.T.,"1") == "1" //1- bruto / 2 - liquido
Local lRaRtImp		:= SuperGetMv("MV_RARTIMP ",.T.,"1") == "1" //Controla reetnções na antecipação ? 1- controla  / 2 - Não Controla
Local lSpdf500i		:= ExistBlock("SPDF500I")
Local aImpost		:= Array(6)	
Local nValF500		:= 0
Local lContinua		:= .T.
Local nIndexSE5		:= 0
Local cKeyRast 		:= ""
Local aRastro  		:= {}
// Para movimentos da compensacao CR
Local lCompens		:= .F.
Local nPIS330		:= 0
Local nCOF330		:= 0
Local nCSL330		:= 0
Local cNatRec1		:= SuperGetMv("MV_NATRNT1",,"") 	//Codigo da Natureza de Receita Nao Tributavel do parâmetro complementar do MV_NATRNT.
Local lMaxSeq		:= .F.
Local cSeq			:= ""
Local lIrBax		:= .T.
Local lbxParcLiq	:= .F.
Local nRetIrf		:= 0
Local cChaveTit		:= ""
Local nE5_VALOR		:= 0
Local cIdent        := 0
Local lDesInc		:= .F.
Local lIntPFS       := SuperGetMv("MV_JESCJUR",,.F.) //Integração PFS Juridico
Local aDocPFS       := {}

If cPaisLoc == "BRA"

If !Empty(cNatRec1) 
	cNatRec += ";"+cNatRec1
EndIf

If lSpdOrig
	cOrigem := ExecBlock ("SPDF1003",.F.,.F.)	
Endif		
			
If !Empty(cMotBx) // Para o parametro MV_MTBXSD
	cMotBx := SpdVldVar(cMotBx)
	cBxSql += ""
	cBaixa := ""		
	For nI:=1 To Len(cMotBx)  		
		If Subst(cMotBx,nI,1) $ ";,-_|./" 				 
	  	 	If !Empty(cBaixa)
	  	  		nJ := Ascan(aMotBx, {|x| Substr(x,1,3) == Upper(Substr(cBaixa,2,3)) })
				If nJ >0 .And. Substr(aMotBx[nJ],26,01) == "N" //Nao movimenta banco.
					If !Empty(cBxSql)
						cBxSql += ",'" 
					Else
						cBxSql += "'" 
					Endif
					cBxSql += Substr(cBaixa,2,3) + "'"  				   	
				Endif
			   	cBaixa := ""
	  	  	Endif	  	  		
	  	Else
	  	 	cBaixa+=Subst(cMotBx,nI,1)  
	  	Endif
	Next
	If !Empty(cBaixa)			
		If !Empty(cBxSql)
			cBxSql	+= ",'" 
		Else
			cBxSql	+= "'" 
		Endif
	  	cBxSql	+= Substr(cBaixa,2,3)
	Endif
	cBxSql	+=	"'"
Endif

If lBxSped //Verificando naturezas das receitas tributaveis...
	If !SED->(DbSeek(xFilial("SED")+ cNatRec))
		aNatNTrib	:=	{}		
	Else
		Aadd(aNatNTrib,{SED->ED_CODIGO,SED->ED_CSTPIS,SED->ED_APURPIS,SED->ED_PCAPPIS,SED->ED_CSTCOF,SED->ED_APURCOF,SED->ED_PCAPCOF,;							
										SED->ED_CLASFIS,SED->ED_INDCMLT,	SED->ED_CONTA,SED->ED_CCD,SED->ED_CCC,;
										SED->ED_TABCCZ,SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ)})																			
   Endif
Endif
		
For nA:= 1 to Len(aAlias)             

	If aAlias[nA] == "SE5"
		cAlias	:= "SE5QRY"
	Elseif aAlias[nA] == "SEI"
		cAlias	:= "SEIQRY"
	Endif
	
	If aAlias[nA] == "SE5"

		SE5 -> ( dbSetOrder ( 1 ) ) //FILIAL+DTOS(DATA)...		
		
		F500Top(lNRastDSD,cDataIni,cDataFim,cMotBx,lBxSped,aNatNTrib,cBxSql,cAlias)
		
		dbSelectArea(cAlias)

		While !(cAlias)->(Eof())
			
			lLiq	:=	.F.

			If cChaveTit <> xFilial("SE5")+(cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->CLIENTE + (cAlias)->LOJA
				aTitBrut	:= {}
				nPIS330		:= 0
				nCOF330		:= 0
				nCSL330		:= 0
			EndIf
			
			cChaveTit := xFilial("SE5")+(cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->CLIENTE + (cAlias)->LOJA

			If lBxSped .AND. Len(aNatNTrib) == 0 .AND. ((cAlias)->TIPODOC $ "JR_MT_J2_M2_DC_CM_D2_C2")	
				(cAlias)->(Dbskip())
				Loop
			Endif
			
			If cEnvLiq == "1" 
			//Qdo envio titulo referente a liquidacao devo selecinar somente as baixas sem movimentacao bancaria
			//que sejam liquidacao. 
				If (cAlias)->TIPODOC = 'BA' .And. !((cAlias)->MOTBX $ 'LIQ')
					(cAlias)->(Dbskip())
					Loop
				Endif
			Endif
			
			If cEnvLiq == "1" .And. !((cAlias)->MOTBX $ 'LIQ')
				//Qdo envio titulo no momento da liquidacao não devo enviar baixa de um titulo que tenha sido liquidado. 
				SE5->(Dbsetorder(10)) // E5_FILIAL+E5_DOCUMEN				
				If SE5->(Dbseek(xFilial("SE5")+ (cAlias)->NUMLIQ ))    					
					While !SE5->(Eof()) .And. SE5->E5_FILIAL + Alltrim(SE5-> E5_DOCUMEN) == (xFilial("SE5") + (cAlias)->NUMLIQ)												
						If SE5->E5_TIPODOC $ 'BA' .And. SE5->E5_MOTBX $ 'LIQ' .And.;
							 SE5->E5_RECPAG = 'R' .And. SE5->E5_SITUACA <> 'C'							 
							lLiq	:=	.T.
						Endif	 							
						SE5->(dbSkip())
						Loop
					Enddo
					
					If lLiq
						(cAlias)->(dbSkip())
						Loop
					Endif																					
				Endif				
			Endif


			//Conforme definicao do Fiscal somente titulos com natureza configurada para realizar apuracao de PIS e COFINS.
			If AllTrim((cAlias)->ORIGEM) $ "FINA040_FINA050_FINA280_FINA290_FINA565_FINA460_MATA460_JURA203_CNTA121_LOJA701_"+Alltrim(cOrigem)
			   If !Empty((cAlias)->CODIGO) //CODIGO NATUREZA
				  If Empty( (cAlias)->APURCOF ) .And. Empty( (cAlias)->APURPIS )
				     (cAlias)->(Dbskip())
				     Loop
				  Endif 
			   Endif 
			Else
			   (cAlias)->(Dbskip())
			   Loop 
			Endif 

			aTitRet	:= {} //Tratamento para Titulos retidos em outro
			lTitRet	:= .F.
	
			If (cAlias)->TIPODOC = 'CP'  	//Compensacao com NCC nao deve ser enviada. 
				cChaveSE5	:=(cAlias)->PREFIXO+	(cAlias)->NUMERO+(cAlias)->PARCELA+(cAlias)->TIPO+(cAlias)->LOJA																
				SE5->(Dbsetorder(10)) // E5_FILIAL+E5_DOCUMEN
				If SE5->(Dbseek(xFilial("SE5")+ cChaveSE5)) .And. SE5->E5_TIPO $ MV_CRNEG   					
					(cAlias)->(dbSkip())
					Loop															
				Endif								                    
			Endif			
			
				
			             
			If (cAlias)->VALORE1 <= nVlMinImp //titulo seja retido em outro 
				SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES
				If SFQ->(DbSeek(xFilial("SFQ")+Iif(lPCCBaixa,"E1B","SE1")+ (cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->PARCELA + (cAlias)->TIPO + (cAlias)->CLIENTE + (cAlias)->LOJA ))               							
					Aadd(aTitRet,{(xFilial("SE1") + SFQ->FQ_PREFORI + SFQ->FQ_NUMORI + SFQ->FQ_PARCORI + SFQ->FQ_TIPOORI + SFQ->FQ_CFORI+ SFQ->FQ_LOJAORI),;
										(cAlias)->PIS,(cAlias)->COFINS,(cAlias)->CSLL,(cAlias)->IRRF,(cAlias)->ISS,(cAlias)->INSS})					
					lTitRet	:=	.T.											
				Endif						
			Endif
						
			lRetSFQ := .F. //Retem valores de impostos de outros titulos.
			SFQ->(DbSetOrder(1)) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
		
			If SFQ->(DbSeek(xFilial("SFQ")+Iif(lPCCBaixa,"E1B","SE1")+ (cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->PARCELA + (cAlias)->TIPO + (cAlias)->CLIENTE + (cAlias)->LOJA))
			  	lRetSFQ := .T.		
			Endif					   		
			
			//Array utilizado para recompor o valor quando configurado como bruto. Deve possuir valor somente na ultima baixa
			If lBq10925
				aAreaSE5  := SE5->(GetArea())
				nIndexSE5 := SE5->(IndexOrd())				
				SE5->(DbSetOrder(7))
				If SE5->(DbSeek(xFilial("SE5")+(cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->PARCELA + (cAlias)->TIPO + (cAlias)->CLIENTE + (cAlias)->LOJA)) .and. SE5->(RECNO()) <> (cAlias)->NROREG .AND. !((cAlias)->TIPO $ "RA ")
					While !(SE5->(EOF())) .and. ((cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->PARCELA + (cAlias)->TIPO + (cAlias)->CLIENTE + (cAlias)->LOJA==;
					SE5->E5_PREFIXO + SE5->E5_NUMERO + SE5->E5_PARCELA + SE5->E5_TIPO + SE5->E5_CLIFOR + SE5->E5_LOJA) .and. SE5->(RECNO()) <> (cAlias)->NROREG
						If SE5->E5_PRETPIS <> "1" .AND. SE5->E5_PRETCOF <> "1" .AND. SE5->E5_PRETCSL <> "1" .AND. SE5->E5_TIPODOC <> "ES"
							If Len(aTitBrut) == 0
								Aadd(aTitBrut,{SE5->E5_VRETPIS,SE5->E5_VRETCOF,SE5->E5_VRETCSL,SE5->E5_VRETIRF,SE5->E5_VRETISS})
							Else
								aTitBrut[1][1]	+= SE5->E5_VRETPIS
								aTitBrut[1][2]	+= SE5->E5_VRETCOF
								aTitBrut[1][3]	+= SE5->E5_VRETCSL
								aTitBrut[1][4]	+= SE5->E5_VRETIRF
								aTitBrut[1][5]	+= SE5->E5_VRETISS
							EndIf	 
						EndIf
						SE5->(Dbskip())				
					EndDo
					// só pode somar na ultima baixa
					If (cAlias)->VRETPIS+(cAlias)->VRETCOF+(cAlias)->VRETCSL+ Iif(Len(aTitBrut)>0,aTitBrut[1][1]+aTitBrut[1][2]+aTitBrut[1][3],0) <> (cAlias)->PIS+(cAlias)->COFINS+(cAlias)->CSLL
						If Len(aTitBrut) > 0
							aTitBrut[1][1]	:= 0
							aTitBrut[1][2]	:= 0
							aTitBrut[1][3]	:= 0
							aTitBrut[1][4]	:= 0
							aTitBrut[1][5]	:= 0
						EndIf
					EndIf
				ElseIf (cAlias)->TIPODOC $ "RA "
					// TRATAMENTO PARA COMPENSACAO
					SE5->(DbSetOrder(2))
					If SE5->(DbSeek(xFilial("SE5")+"BA"+(cAlias)->PREFIXO+(cAlias)->NUMERO+(cAlias)->PARCELA+(cAlias)->TIPO)).AND. SE5->E5_MOTBX == "CMP"
						SE5->(DbSetOrder(10))	// Filial+Documento
						If SE5->(DbSeek(xFilial("SE5")+SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO)) .And. (cAlias)->CLIENTE == SE5->E5_CLIFOR // Busca nota com impostos
							If SE5->E5_PRETPIS <> "1" .AND. SE5->E5_PRETCOF <> "1" .AND. SE5->E5_PRETCSL <> "1" 										
								nPIS330	 := SE5->E5_VRETPIS
								nCOF330	 := SE5->E5_VRETCOF
								nCSL330	 := SE5->E5_VRETCSL
								lCompens := .T.								
							EndIf	 
						EndIf
					EndIf	
				EndIf
				SE5->(DbSetOrder(nIndexSE5))				
				RestArea(aAreaSE5) 
			EndIf	
			cChaveBx	:=	((cAlias)->FILIAL + (cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->PARCELA + (cAlias)->TIPO + (cAlias)->CLIENTE + (cAlias)->LOJA)
			nDescInc	:=	0
			nDescCon	:=	0
			nVlrSe5	    :=	0
			nTotBaixa   :=	0
			nTpMoeda	:=	(cAlias)->TPMOEDA	
			aRegBx	    :=	{}
			nVrPIS	    :=	nVrCOFINS	:=	nVrCSLL :=	nVrIR	:=	nVrISS :=	nVrINSS	:=	nVrRetOld	:=	nVrRetAnt	:=	0
			nVrSevPIS   :=	nVrSevCOF	:=	nVrSevCSLL 	:=	nVrSev		:=	0
			nDescSev	:=	nMultaSev	:=	nJurosSev	:=	0                            
			
			SA1->( Dbseek( xFilial("SA1") + (cAlias)->CLIENTE + (cAlias)->LOJA ) )		                       
			While  !(cAlias)->(EoF()) .AND. cChaveBx ==  ( (cAlias)->FILIAL+ (cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->PARCELA + (cAlias)->TIPO + (cAlias)->CLIENTE + (cAlias)->LOJA )

					If lBxSped .AND. Len(aNatNTrib) == 0 .AND. ((cAlias)->TIPODOC $ "JR_MT_J2_M2_DC_CM_D2_C2")	
						(cAlias)->(Dbskip())
						Loop
					Endif
		
					If (cAlias)->TIPODOC $ "DC_D2"
					   	//Descontos Concidionais não devem ser enviados neste bloco.					
					   	If ((cAlias == "SE5QRY" .and. (cAlias)->E5_TPDESC == "C") .or. (cAlias <> "SE5QRY" .and. (cAlias)->TPDESC == "C")) .And. (cAlias)->DECRESC > 0
  							nDescCon	+= (cAlias)->DECRESC 
  							(cAlias)->(Dbskip())
							Loop												   
						//Descontos Incondicionais devem ser levados nos campos 4 e 9 deste bloco.
						ElseIf ((cAlias == "SE5QRY" .and. (cAlias)->E5_TPDESC == "I") .or. (cAlias <> "SE5QRY" .and. (cAlias)->TPDESC == "I")) .And. (cAlias)->DECRESC > 0
							nDescInc	:= (cAlias)->DECRESC 
							(cAlias)->(Dbskip())
							Loop								
						Endif	

						If ((cAlias == "SE5QRY" .and. (cAlias)->E5_TPDESC == "C") .or. (cAlias <> "SE5QRY" .and. (cAlias)->TPDESC == "C")) .AND. !lDesInc
							nDescCon	+= (cAlias)->VALOR 
							(cAlias)->(Dbskip())
							Loop												   					   
						ElseIf ((cAlias == "SE5QRY" .and. (cAlias)->E5_TPDESC == "I") .or. (cAlias <> "SE5QRY" .and. (cAlias)->TPDESC == "I"))
							nDescInc	:=	(cAlias)->VALOR			
							(cAlias)->(Dbskip())
							Loop
						Endif	
					ElseIf ((cAlias == "SE5QRY" .and. (cAlias)->E5_TPDESC == "I") .or. (cAlias <> "SE5QRY" .and. (cAlias)->TPDESC == "I")) 
						If (cAlias)->DECRESC > 0
							nDescInc	:= (cAlias)->DECRESC 
						Else
							nDescInc	:=	(cAlias)->VLDESCO
						EndIf
						lDesInc := .T.
					Endif
					
					lRecIss	 := (SA1->A1_RECISS == "1" .And. lMVDescIss)
					lIrBax	 := (SA1->A1_IRBAX == '1') // 1 = baixa
					
					If !((cAlias)->TIPODOC $ "JR_MT_J2_M2_DC_CM_D2_C2")
							
						If !Empty((cAlias)->PEDIDO) .And. Alltrim((cAlias)->ORIGEM) == "MATA460"									
							SC5->(Dbsetorder(3)) //C5_FILIAL+C5_CLIENTE+C5_LOJACLI+C5_NUM
							If SC5->(Dbseek(xFilial("SC5") + (cAlias)->CLIENTE + (cAlias)->LOJA + (cAlias)->PEDIDO )) .And. !Empty(SC5->C5_RECISS)				    
								lRecIss := (SC5->C5_RECISS == "1" .And. lMVDescIss)				    
						    Endif
						Endif										
	
						nVrPIS		:=	If(lCompens,nPIS330,(cAlias)->PIS)
						nVrCOFINS	:=	If(lCompens,nCOF330,(cAlias)->COFINS)
						nVrCSLL		:=	If(lCompens,nCSL330,(cAlias)->CSLL)
						nVrIR		:=	(cAlias)->IRRF
						If lIrBax .AND. lRaRtImp .And. !lBq10925
							nVrIR		:=	(cAlias)->VRETIRF
						EndIf							
						nVrISS		:=	(cAlias)->ISS
						nVrINSS		:=	(cAlias)->INSS
                        nVRDESC 	:= 	0
						nMultaSev	:=  0
						nJurosSev	:=  0
						nRetIrf		:=	0
						
						If lSpdf500i
							aF500I	:= SE1->(GetArea())
							If SE1->(Dbseek((cAlias)->FILIAL+ (cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->PARCELA + (cAlias)->TIPO + (cAlias)->CLIENTE + (cAlias)->LOJA ))
								aImpost[1] := nVrPIS
								aImpost[2] := nVrCOFINS
								aImpost[3] := nVrCSLL
								aImpost[4] := nVrIR
								aImpost[5] := nVrINSS
								aImpost[6] := nVrISS
								aImpost	   := ExecBlock ("SPDF500I",.F.,.F., {aImpost})
								nVrPIS     := aImpost[1]		
								nVrCOFINS  := aImpost[2]		
								nVrCSLL	   := aImpost[3]		
								nVrIR	   := aImpost[4]		
								nVrINSS	   := aImpost[5]		
								nVrISS	   := aImpost[6]	
							EndIf
							RestArea(aF500I)
						EndIf
						
						If lRetSFQ .And. !lTitRet //.And. (lPccBaixa .Or. (!lPccBaixa .And. !Empty((cAlias)->PRETPIS) .And. !Empty((cAlias)->PRETCOF) .And. !Empty((cAlias)->PRETCSL)))  
							For nI:= 1 To Len(aTitRet)
								If aTitRet[nI,1] == (xFilial("SE1")+ (cAlias)->PREFIXO + (cAlias)->NUMERO + (cAlias)->PARCELA + (cAlias)->TIPO + (cAlias)->CLIENTE + (cAlias)->LOJA )
									nVrPIS		-=	aTitRet[nI,2]
									nVrCOFINS	-=	aTitRet[nI,3]
									nVrCSLL		-=	aTitRet[nI,4]
									nVrIR		-=	aTitRet[nI,5]
									nVrISS		-=	aTitRet[nI,6]
									nVrINSS		-=	aTitRet[nI,7]
								Endif														
							Next
						Endif					      		                           
			
						If (cAlias)->MOTBX $ cMotBx .AND. Month(Stod((cAlias)->EMISSAO))==Month(Stod((cAlias)->DTMOV))
							nVRDESC := (cAlias)->VALOR
						Endif		         						
									
						nVlrSe5		:=	(cAlias)->VALOR
						nTxMoeda	:= 1
						nTotBaixa	++           
		  				nVrSevPIS	+=	(cAlias)->VRETPIS
						nVrSevCOF	+= (cAlias)->VRETCOF
						nVrSevCSLL 	+=	(cAlias)->VRETCSL
						nVrSev		+= (cAlias)->VALOR
						nDescSev	+= (cAlias)->VLDESCO
						nMultaSev	+= (cAlias)->VLMULTA	
						nJurosSev	+= (cAlias)->VLJUROS
					
						If (nJurosSev>0 .or. nMultaSev>0)
							//Quando tenho multa, juros ou descontos influencia o valor gravado na SE5 aqui recomponho o valor baixado.
							nVlrSe5	-=	(nMultaSev + nJurosSev)
						EndIf						
						If nDescInc > 0  .and. (cAlias)->VLDESCO > 0
							nVlrSe5	+= nDescInc
						Endif							
						If nDescCon > 0  .and. (cAlias)->VLDESCO > 0
							nVlrSe5	+= nDescCon
						Endif							
						If lBq10925 .and. Len(aTitBrut) > 0
							nVlrSe5	+= aTitBrut[1][1]+aTitBrut[1][2]+aTitBrut[1][3]+aTitBrut[1][4]+aTitBrut[1][5]
						EndIf							

						If nTpMoeda > 1 
							nTxMoeda := (cAlias)->VLCRUZ/(cAlias)->VALORE1
						Endif

						aAreaSEV := SEV->(GetArea())
						DbSelectArea("SEV")
						DbSetOrder(1)	//Verificar se o titulo possui multiplas naturezas.
						If	SEV->(DbSeek(xFilial("SEV")+(cAlias)->PREFIXO+(cAlias)->NUMERO+(cAlias)->PARCELA+(cAlias)->TIPO+(cAlias)->CLIENTE+(cAlias)->LOJA))
							
							cIdent := SEV->EV_IDENT

							While SEV->(EV_PREFIXO+EV_NUM+EV_PARCELA+EV_TIPO+EV_CLIFOR+EV_LOJA) ==;
									((cAlias)->PREFIXO+(cAlias)->NUMERO+(cAlias)->PARCELA+(cAlias)->TIPO+(cAlias)->CLIENTE+(cAlias)->LOJA) .And. !SEV->(EOF())					
		
								nVrRateio:=	0
		
								If SEV->EV_IDENT <> cIdent // 1=Rateio de Inclusao 2=Rateio de Baixa 
									SEV->(Dbskip())
									Loop
								Endif         
								
								cUltBx	:= "N"						                     						
		
								aAreaSED := SED->(GetArea())
								DbSelectArea("SED")
								DbSetOrder(1)
								If SED->(DbSeek(xFilial("SED")+ SEV->EV_NATUREZ)) 	.And.	(!Empty(SED->ED_APURCOF) .Or. !Empty(SED->ED_APURPIS)) 
								
									   nVrRateio	:=	SEV->EV_PERC											  		
			 						                 
									    If (cAlias)->VALORE1= nVrSev
											cUltBx	:= "S"						   						   
										ElseIf (cAlias)->VALORE1= (nVrSev+(cAlias)->PIS+(cAlias)->COFINS+(cAlias)->CSLL +(cAlias)->IRRF + (cAlias)->INSS + Iif(lRecIss,(cAlias)->ISS,0)+ ;
													Iif( (cAlias)->SALDO == 0, 	nDescSev,0) - Iif( (cAlias)->SALDO == 0, (nJurosSev+nMultaSev),0)) 
											cUltBx	:= "S"						   								                                                                                                                                                             
										ElseIf (cAlias)->VALORE1 + (cAlias)->VLJUROS+(cAlias)->VLMULTA= (nVrSev+(cAlias)->PIS+(cAlias)->COFINS+(cAlias)->CSLL+;
													(cAlias)->IRRF + (cAlias)->INSS + Iif(lRecIss,(cAlias)->ISS,0)  + Iif( (cAlias)->SALDO == 0, 	nDescSev,0) -Iif( (cAlias)->SALDO == 0, (nJurosSev+nMultaSev),0) ) 
											cUltBx	:= "S"						   								                                                                                                                                                             									
										ElseIf (cAlias)->VALOR == 0 .and. (cAlias)->SALDO == 0 // em casos que a ultima baixa é realizada por completo não sobrando valor de baixa ex.: saldo de 0,02 com 0,02 de desconto
											cUltBx	:= "S"
										Endif	
									
										AaDd(aRegBx,{(cAlias)->FILIAL,(cAlias)->PREFIXO,(cAlias)->NUMERO,(cAlias)->PARCELA,(cAlias)->TIPO,;   //1,2,3,4,5
														(cAlias)->CLIENTE,(cAlias)->LOJA,(cAlias)->DTMOV,(cAlias)->NROREG,SED->ED_CODIGO,(cAlias)->ORIGEM,;     //6,7,8,9,10,11
														SED->ED_CSTPIS,SED->ED_PCAPPIS,SED->ED_CSTCOF,SED->ED_PCAPCOF,;       //12,13,14,15
														((SEV->EV_VALOR*nTxMoeda)*SED->ED_PCAPPIS)/100,((SEV->EV_VALOR*nTxMoeda)*SED->ED_PCAPCOF)/100,nVrCSLL,SEV->EV_VALOR,;  //16,17,18,19
														SED->ED_PERCPIS,SED->ED_PERCCOF,	(cAlias)->SALDO,nVrIR,If(lRecIss, nVrISS,0),nVrINSS,(cAlias)->VLCRUZ,;     //20,21,22,23,24,25,26
														If((cAlias)->DESDOBR = "1",(cAlias)->VALOR,(cAlias)->BASEIRF),;    //27
														Iif(lRetSFQ,((cAlias)->PIS+(cAlias)->COFINS+(cAlias)->CSLL+(cAlias)->IRRF+Iif(lRecIss,(cAlias)->ISS,0)+(cAlias)->INSS),0),; //28
												  		"1",nVrPIS,nVrCOFINS,nVrCSLL,nVrRateio,Round((nVlrSe5 * nVrRateio),2),(cAlias)->TIPODOC,SED->ED_CONTA,(cAlias)->DESDOBR,(cAlias)->SERIE,;      //29,30,31,32,33,34,35,36,37,38
												  		(cAlias)->ED_TABCCZ,(cAlias)->ED_CODCCZ,(cAlias)->ED_GRUCCZ,(cAlias)->ED_DTFCCZ,(cAlias)->EMISSAO,;   //39,40,41,42,43
												  		(cAlias)->VALOR,(nDescCon*nVrRateio),0,nVRDESC,(nDescInc*nVrRateio),(cAlias)->VRETPIS,(cAlias)->VRETCOF,(cAlias)->VRETCSL,; //44,45,47,47,48,49,50,51
												  		(cAlias)->TPDESC,(cAlias)->MOTBX,;     //52,53
												  		(cAlias)->NUMPRO,(cAlias)->INDPRO,; //54,55       
														cUltBx,(cAlias)->PRETPIS,(cAlias)->PRETCOF,(cAlias)->PRETCSL,;  //56 Identifica se trata-se da ultima baixa em multiplas naturezas, 57, 58,59		
														"",; //60 SEQ
														(cAlias)->VLCORRE,;//61 vlcorre
														Val((cAlias)->MOEDAE5)}) //62 E5_MOEDA
							
								Endif
								RestArea(aAreaSED)
								SEV->(Dbskip())
							Enddo
					  		RestArea(aAreaSEV)
						Else //Nao trata de multiplas naturezas
							aAreaSED := SED->(GetArea())
							DbSelectArea("SED")
							DbSetOrder(1)
							If !Empty((cAlias)->NATUREZ) .And. SED->(DbSeek(xFilial("SED")+ (cAlias)->NATUREZ)) .And. (!Empty(SED->ED_APURCOF) .Or. !Empty(SED->ED_APURPIS))                         
							 	nVrRet	:=	0						
								If lRetSFQ
									If lPCCBaixa
										If (cAlias)->VRETCOF > 0 .And. ((cAlias)->VRETCOF/SED->ED_PERCCOF)*100 > nVlMinImp //retem cofins e valor retido maior que minimo para retencao titulo com varias baixas
											nVrRetAnt := (cAlias)->VRETPIS+(cAlias)->VRETCOF+(cAlias)->VRETCSL
										Endif
										If (cAlias)->VRETPIS > 0 .And. ((cAlias)->VRETPIS/SED->ED_PERCPIS)*100> nVlMinImp //retem cofins e valor retido maior que minimo para retencao titulo com varias baixas
											nVrRetAnt := (cAlias)->VRETPIS+(cAlias)->VRETCOF+(cAlias)->VRETCSL
										Endif																					
										nVrRetOld	+=  nVlrSe5	+	(cAlias)->VRETPIS+(cAlias)->VRETCOF+(cAlias)->VRETCSL
										If (nVrRetOld	+  (cAlias)->IRRF + (cAlias)->INSS + Iif(lRecIss,(cAlias)->ISS,0))  = (cAlias)->VALORE1 .And. nTotBaixa > 1 //titulo possui mais de uma baixa porem trata se da ultima
											nVrRet	:= nVrRetAnt											
										Endif		
										nVrRet	:=	nVrRet	+	(cAlias)->VRETPIS+(cAlias)->VRETCOF+(cAlias)->VRETCSL
									Else
										nVrRet	:= (cAlias)->PIS+(cAlias)->COFINS+(cAlias)->CSLL							
									Endif
								Endif
										
								nVrRet	:= nVrRet + (cAlias)->IRRF + (cAlias)->INSS + Iif(lRecIss,(cAlias)->ISS,0)

								If (cAlias)->SALDO > 0 .And. lRaRtImp .And. !lBq10925
									nRetIrf := (cAlias)->VRETIRF
								EndIf 																  																		
								
								AaDd(aRegBx,{(cAlias)->FILIAL,; //1
																(cAlias)->PREFIXO,; //2
																(cAlias)->NUMERO,; //3
																(cAlias)->PARCELA,; //4
																(cAlias)->TIPO,;         //5
																(cAlias)->CLIENTE,;   //6
																(cAlias)->LOJA,; //7
																(cAlias)->DTMOV,; //8
																(cAlias)->NROREG,; //9
																SED->ED_CODIGO,(cAlias)->ORIGEM,; // 10 e 11
																SED->ED_CSTPIS, SED->ED_PCAPPIS,; //12 e 13
																SED->ED_CSTCOF, SED->ED_PCAPCOF,; //14 e 15
																nVrPIS,nVrCOFINS,nVrCSLL,; // 16, 17 e 18
																(cAlias)->VALORE1,SED->ED_PERCPIS,SED->ED_PERCCOF,; // 19, 20 e 21											  
												  				(cAlias)->SALDO,nVrIR,If(lRecIss, nVrISS,0),nVrINSS,(cAlias)->VLCRUZ,; // 22 a 26								
																If((cAlias)->DESDOBR = "1",(cAlias)->VALOR,(cAlias)->BASEIRF),;  // 27
														  		nVrRet,; // 28
														  		"2",0,0,0,; // 29 a 33
														  		nVrRateio,nVlrSe5+nRetIrf,; //33 e 34
														  		(cAlias)->TIPODOC,SED->ED_CONTA,(cAlias)->DESDOBR,(cAlias)->SERIE,; // 35 a 38              
														  		SED->ED_TABCCZ,SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),; // 39 a 42
														  		(cAlias)->EMISSAO,;	// 43 
														  		(cAlias)->VALOR+ Iif(lBq10925 .and. Len(aTitBrut) > 0,aTitBrut[1][1]+aTitBrut[1][2]+aTitBrut[1][3]+aTitBrut[1][4]+aTitBrut[1][5], 0  )+nRetIrf,; // 44
														  		nDescCon,(cAlias)->VLMULTA,nVRDESC,nDescInc,; // 45 a 48
														  		If(lCompens,nPIS330,(cAlias)->VRETPIS),If(lCompens,nCOF330,(cAlias)->VRETCOF),If(lCompens,nCSL330,(cAlias)->VRETCSL),; // 49 a 51
										 				  		(cAlias)->TPDESC,(cAlias)->MOTBX,(cAlias)->NUMPRO,(cAlias)->INDPRO,"",;	// 52 A 56										  		  
																(cAlias)->PRETPIS,(cAlias)->PRETCOF,(cAlias)->PRETCSL,(cAlias)->E5_SEQ,;  //57 a 60
																(cAlias)->VLCORRE,;  //61 VALOR DA CORREÇÃO
																Val((cAlias)->MOEDAE5)}) //62 E5_MOEDA 
		
							Elseif Empty( (cAlias)->NATUREZ )
								AaDd(aRegBx,{	(cAlias)->FILIAL,; // 1
													(cAlias)->PREFIXO,; // 2
													(cAlias)->NUMERO,; // 3
													(cAlias)->PARCELA,; // 4
													(cAlias)->TIPO,; // 5
													(cAlias)->CLIENTE,; // 6
													(cAlias)->LOJA,; // 7
													(cAlias)->DTMOV,; // 8
													(cAlias)->NROREG,; // 9
													"" /*SED->ED_CODIGO*/,; // 10
													(cAlias)->ORIGEM ,; // 11
													"" /*SED->ED_CSTPIS*/ ,; // 12
													"" /*SED->ED_PCAPPIS*/,; // 13
													"" /*SED->ED_CSTCOF*/,; // 14
												  	"" /*SED->ED_PCAPCOF*/,; // 15
													nVrPIS,; // 16
													nVrCOFINS,; // 17
													nVrCSLL,; // 18
													(cAlias)->VALORE1,; // 19
													0 /*SED->ED_PERCPIS*/,; // 20
													0 /*SED->ED_PERCCOF*/,; // 21
												  	(cAlias)->SALDO,; // 22
												  	nVrIR,; // 23
												  	If(lRecIss, nVrISS,0),; // 24
												  	nVrINSS,; // 25
												  	(cAlias)->VLCRUZ,;// 26
													Iif( (cAlias)->DESDOBR == "1", (cAlias)->VALOR, (cAlias)->BASEIRF ),; // 27
											  		Iif( lRetSFQ, ( (cAlias)->PIS+(cAlias)->COFINS+(cAlias)->CSLL+(cAlias)->IRRF+(cAlias)->INSS+;
											  					Iif(lRecIss,(cAlias)->ISS,0)),0),; // 28
											  		"2",; // 29
											  		0,; // 30
											  		0,; // 31
											  		0,; // 32
											  		nVrRateio,; // 33
											  		nVlrSe5,; // 34
											  		(cAlias)->TIPODOC,; // 35
											  		"" /*SED->ED_CONTA*/ ,; // 36
											  		(cAlias)->DESDOBR,; // 37
											  		(cAlias)->SERIE,; //38
											  		(cAlias)->ED_TABCCZ,; //39
											  		(cAlias)->ED_CODCCZ,; //40
											  		(cAlias)->ED_GRUCCZ,; //41
											  		(cAlias)->ED_DTFCCZ,; //42
											  		(cAlias)->EMISSAO,;//43
											  		(cAlias)->VALOR,;//44 valor movimento
											  		nDescCon,;//45 valor desconto condicional
											  		0,;//46 valor multa
											  		nVRDESC,;//47 valor desconto
											  		nDescInc,;//48 valor desconto incondicional									  		
											  		If(lCompens,nPIS330,(cAlias)->VRETPIS),;//49 valor retido do PIS
											  		If(lCompens,nCOF330,(cAlias)->VRETCOF),;//50 valor retido do COFINS
											  		If(lCompens,nCSL330,(cAlias)->VRETCSL), ;//51 valor retido do CSL 
											  		(cAlias)->TPDESC,;//52 tipo de desconto 
											  		(cAlias)->MOTBX,;//53 motivo de baixa
											  		(cAlias)->NUMPRO,;//54 Nro Processo Referencial
											  		(cAlias)->INDPRO,;//55 Tipo Processo Referencial			  		
											  		"",; //56 Campo especifico para multiplas naturezas										
													(cAlias)->PRETPIS,; //57 Status de Retenção do PIS
													(cAlias)->PRETCOF,; //58 Status de Retenção do COFINS
													(cAlias)->PRETCSL,; //59 Status de Retenção do CSLL
													(cAlias)->E5_SEQ,;	// 60 Sequencia da E5		
													(cAlias)->VLCORRE,; //61 VLCORRE
													Val((cAlias)->MOEDAE5)}) //62 E5_MOEDA  																							  													  											
							Endif
		
							RestArea(aAreaSED)
						Endif
					ElseIf ((cAlias)->TIPODOC $ "JR_MT_J2_M2_CM_C2")	 //Juros, Multas e Variacoes cambiais.
						//Utilizar natureza configurada no parametro MV_NATRNT para receitas nao tributaveis de titulos a receber.						
						If lBxSped .and. Empty(cNatRec)
							lHelp := .T.
						ElseIf lBxSped .and. !Empty(cNatRec)
								AaDd(aRegBx,{(cAlias)->FILIAL,; //1
													(cAlias)->PREFIXO,; //2
													(cAlias)->NUMERO,; //3
													(cAlias)->PARCELA,; //4
													(cAlias)->TIPO,;         //5
													(cAlias)->CLIENTE,;   //6
													(cAlias)->LOJA,; //7
													(cAlias)->DTMOV,; //8
													(cAlias)->NROREG,; //9
													aNatNTrib[1,1],; //10 CODIGO DA NATUREZA
													(cAlias)->ORIGEM,; //11
													aNatNTrib[1,2],;	//12 ED_CSTPIS
													If((cAlias)->TIPO $ "RA " .And. !lRaRtImp,0,aNatNTrib[1,4]),; //13 ED_PCAPPIS
													aNatNTrib[1,5],;	//14 ED_CSTCOF
													If((cAlias)->TIPO $ "RA " .And. !lRaRtImp,0,aNatNTrib[1,7]),; //15 ED_PCAPCOF											
													0,0,0,;          // PIS, COFINS e CSLL retidos; // 16, 17 e 18	
													(cAlias)->VALORE1,; // 19											
													0,; //20 ED_PERCPIS nao tenho retencao entao nao preciso.
													0,; //21 ED_PERCCOF nao tenho retencao entao nao preciso. 
													0,0,0,0,0,; // 22 a 26 (SALDO, IR, ISS, INSS, VLCRUZ)
													(cAlias)->VALOR,;  // 27
													0,; // 28
													"2",0,0,0,; // 29 a 33
													0,0,; //33 e 34
													(cAlias)->TIPODOC,;// 35											
													aNatNTrib[1,10],;	//36 ED_CONTA											
													(cAlias)->DESDOBR,(cAlias)->SERIE,; // 37 a 38              
													aNatNTrib[1,13],;	//39 ED_TABCCZ
													aNatNTrib[1,14],; //40 ED_CODCCZ 
													aNatNTrib[1,15],;	//41 ED_GRUCCZ
													aNatNTrib[1,16],; //42 ED_DTFCCZ											
													(cAlias)->EMISSAO,;	// 43 
													(cAlias)->VALOR,; // 44									  		 
														0,0,0,0,; // 45 a 48											
														0,0,0,; // 49 a 51
													"",(cAlias)->MOTBX,;// 52 a 53 
													(cAlias)->NUMPRO,(cAlias)->INDPRO,"",;//54 55 56												  		  
													"","","",; // 57 58 59
													(cAlias)->E5_SEQ,; // 60 SEQ
													(cAlias)->VLCORRE,; //61 VLCORRE
													Val((cAlias)->MOEDAE5)}) //62 E5_MOEDA  					  											
						EndIf
					Endif
					nOldDescCon := nDescCon
					nDescInc :=0
					nDescCon :=0
			       (cAlias)->(Dbskip())
			Enddo
	
			nTotBx 	 :=	0
			nTotPis	 :=	0
			nTotCof	 :=	0
			nTotCsll :=	0
			nTotIRF	 := 0                      
	
			For nI	:=	1 TO Len(aRegBx)                           
			
				lEnvBaseP :=	.T.
				lEnvBaseC :=	.T.
				lbxParcLiq	:=	.F.          
			 	nVrPcc		:=	0  
		
				(cAliasF500)->(DbAppend())
				(cAliasF500)->FILIAL	:=	aRegBx[nI,1] //FILIAL
				(cAliasF500)->PREFIXO	:=	aRegBx[nI,2] //PREFIXO
				(cAliasF500)->NUMERO	:=	aRegBx[nI,3] //NUMERO
				(cAliasF500)->PARCELA	:=	aRegBx[nI,4] //PARCELA
				(cAliasF500)->TIPO		:=	aRegBx[nI,5] //TIPO
				(cAliasF500)->CLIENTE	:=	aRegBx[nI,6] //CLIENTE
				(cAliasF500)->LOJA		:=	aRegBx[nI,7] //LOJA
				(cAliasF500)->DTMOV    	:=	aRegBx[nI,8] //DATA
				(cAliasF500)->TIPODOC   :=	aRegBx[nI,35] //TIPODOC
				(cAliasF500)->TABELA	:=	"SE5"        //TABELA SE5
				(cAliasF500)->NROREG   	:=	aRegBx[nI,9] //RECNO

				cKeyRast := ((cAliasF500)->FILIAL+(cAliasF500)->PREFIXO+(cAliasF500)->NUMERO+(cAliasF500)->PARCELA+(cAliasF500)->TIPO+(cAliasF500)->CLIENTE+(cAliasF500)->LOJA)

				If lMudReg //Mudança de regime. 
					aRastro := FISARast("FI7",cKeyRast)
					If Len(aRastro) > 0
						(cAliasF500)->RASTRO := aRastro[1]
						(cAliasF500)->DTPAI  := aRastro[2]
					Endif
				Endif
				
				If aAlias[nA] == "SE5" .and. aRegBx[nI,35] $ "JR_MT_J2_M2_CM_C2" .and. Alltrim(aRegBx[nI,11]) == "MATA460"
					(cAliasF500)->ORIFIN := .T.   // .T. PARA JUROS, MULTA.. ORIGINADOS DO FINANCEIRO SENDO O TÍTULO DO FATURAMENTO
					(cAliasF500)->ORIGEM := "FINA070" // ORIGEM CONTAS A RECEBER FINANCEIRO
				Else
					(cAliasF500)->ORIGEM :=	aRegBx[nI,11] //ORIGEM
					(cAliasF500)->ORIFIN := ( Alltrim(aRegBx[nI,11]) != "MATA460" ) // Envio (.F.) para titulos que possuem notas fiscais.
				EndIf
				
				If lIntPFS .And. __lDcOPFS .And. Alltrim(aRegBx[nI,11]) == "JURA203"
					DocOrigPFS(aRegBx[nI,1], aRegBx[nI,2], aRegBx[nI,3], aRegBx[nI,4], aRegBx[nI,5], @aDocPFS) // Verificar se título gerado pelo SIGAPFS possue nota fiscal
					If Len(aDocPFS) > 0
						(cAliasF500)->NUMERO  := aDocPFS[nI,1] // Documento Fiscal PFS
						(cAliasF500)->SERIE   := aDocPFS[nI,2] // Série Documento Fiscal PFS
						(cAliasF500)->EMISSAO := aDocPFS[nI,3] // Emissão Documento Fiscal PFS
						(cAliasF500)->ORIFIN  := .F.
					EndIf
				Else
					(cAliasF500)->SERIE   := aRegBx[nI,38] //SERIE
					(cAliasF500)->EMISSAO := aRegBx[nI,43] // SE1 E1_EMISSAO
				EndIf
		
				If (aRegBx[nI,35] $ "JR_MT_J2_M2_CM_C2")	
					nVlrSe5	:= aRegBx[nI,27]
					(cAliasF500)->VALORE1 := aRegBx[nI,27] 
					(cAliasF500)->VALOR	:= aRegBx[nI,27] 				
				ElseIf aRegBx[nI,29] = "1" // 1 = Multiplas Naturezas
					nVlrSe5	:= aRegBx[nI,34]   
				Else
					nVlrSe5	:= aRegBx[nI,44]
					(cAliasF500)->VALORE1 := aRegBx[nI,19] 
					(cAliasF500)->VALOR	:= aRegBx[nI,44] 
				Endif
				                                      
				If aRegBx[nI,29] <> "1" //Multiplas naturezas o valor no array encontra-se correto.	
					//Recompondo o valor da baixa gravado na SE5.
					If aRegBx[nI,48] > 0 //Desconto Incondicional.
						//Quando tenho mais de uma baixa para o mesmo titulo (baixas parciais) devo incluir o desconto 
						//somente na ultima baixa.	Ou quando o titulo foi baixado total numa unica parcela.
					 	If (aRegBx[nI,22] == 0 .And. nTotBaixa==1) .Or. (nTotBx <> nTotBaixa .And. nTotBaixa > 1 .And. nTotBx > 0)									
							nVlrSe5	+= aRegBx[nI,48]
							(cAliasF500)->VALOR	+= aRegBx[nI,48]
						Endif	
					Endif		
					
					If aRegBx[nI,45] > 0 //Desconto Condicional
						If (aRegBx[nI,22] == 0 .And. nTotBaixa==1) .Or. (nTotBx <> nTotBaixa .And. nTotBaixa > 1 .And. nTotBx > 0)		
							nVlrSe5 += aRegBx[nI,45]
							(cAliasF500)->VALORE1 += aRegBx[nI,45] 
							(cAliasF500)->VALOR	+= aRegBx[nI,45]
						Endif	
					Endif										
				Endif
				
				nPisBx	:= 0
				nCofBx	:= 0
				nBase	:= 0
				nPercBx	:= 0
				lRetSe5	:= .F.
				cSeq	:= Iif(Len(aRegBx[nI]) > 59,  aRegBx[nI,60], "")				
				cChaveBx:= aRegBx[nI,1]+aRegBx[nI,2]+aRegBx[nI,3]+aRegBx[nI,4]+aRegBx[nI,5]+aRegBx[nI,6]+aRegBx[nI,7]

				If nTpMoeda > 1 .and. aRegBx[nI][62] > 1
					nVlrSE5	:=	 (nVlrSe5 * nTxMoeda) 
				EndIf
				
				If (aRegBx[nI,35] $ "JR_MT_J2_M2_CM_C2")						
					nPercBx	:=	100							          							
				ElseIf aRegBx[nI,29] = "1"    //Multiplas naturezas.		
				
					nVrPcc		:= 0
					If aRegBx[nI,22]  == 0 		//Titulo baixado totalmente
						If	aRegBx[nI,56] = "S" .Or.  nTpMoeda > 1
							nVrPcc		:= ( (aRegBx[nI,30]+aRegBx[nI,31]+aRegBx[nI,32]+aRegBx[nI,23]+aRegBx[nI,24]+aRegBx[nI,25])*aRegBx[nI,33]) //impostos (pcc+ir+inss+iss)
						Endif			
					Endif

					If nTpMoeda > 1	.and. aRegBx[nI][62] > 1					
						(cAliasF500)->VALORE1	+= (aRegBx[nI,34]* nTxMoeda)  + nVrPcc
					Else						
						(cAliasF500)->VALORE1	+= aRegBx[nI,34]  + nVrPcc
					EndIf 

					nPercBx	:=	 nVlrSe5 + nVrPcc  												
					nPercBx	:=	(((nPercBx) *100)/If(nTpMoeda>1,aRegBx[nI,19]*nTxMoeda,aRegBx[nI,19]))															
				
				ElseIf aRegBx[nI,22] > 0 //Titulo nao baixado totalmente
					
					nPercBx	:=	nVlrSe5						                                                         
					
					if (aRegBx[nI,34]) < aRegBx[nI,19] // se o valor baixado,somente do título, descontando juros multa..., for menor que o valor do título
						nPercBx := aRegBx[nI,34]
						if aRegBx[nI,45] > 0// se desconto condicional
							nPercBx := aRegBx[nI,44]+aRegBx[nI,45]
						EndIf 
						nBase	:= nPercBx	
					endif  

					If lRaRtImp .And. !lBq10925
						lbxParcLiq := .T.
						nPercBx	+= aRegBx[nI,49]+aRegBx[nI,50]+aRegBx[nI,51]
					EndIf               

					nPercBx	:= ((nPercBx*100)/ If(nTpMoeda>1,aRegBx[nI,26],aRegBx[nI,19]))
				Else// baixa total ou ultima baixa do titulo precisa acrescentar o valor dos impostos descontados na movimentacao do SE5            			
		
					nPercBx	:=	0	  
					
					If !(aRegBx[nI,35] $ "JR_MT_J2_M2_CM_C2")						
						nTotBx	:= nTotBx + 1
					Endif
													
					If nTpMoeda > 1
						nPercBx	:=	((( aRegBx[nI,19] * nTxMoeda) *100)/ aRegBx[nI,26])
					Else
						If aRegBx[nI,20] > 0 .And. aRegBx[nI,49] > 0 //Retencao de PIS
							lRetSe5	:=	Iif( ((nVlrSe5*aRegBx[nI,20])/100 == aRegBx[nI,49]) ,.T.,.F.)
						ElseIf aRegBx[nI,21] > 0 .And. aRegBx[nI,50] > 0 //Retencao de COFINS
							lRetSe5	:=	Iif( ((nVlrSe5*aRegBx[nI,21])/100 == aRegBx[nI,50]) ,.T.,.F.)				
						Endif	
						
						nPercBx	:=	nVlrSe5 
						
						If !(lTitRet .And. lRetSFQ .And. nTotBx <> nTotBaixa )
							If lPccBaixa
								nTotPis	 :=	nTotPis + aRegBx[nI,49]
								nTotCof	 :=	nTotCof + aRegBx[nI,50]
								nTotCsll :=	nTotCsll + aRegBx[nI,51]
								nTotIRF	 := nTotIRF + aRegBx[nI,23] //IRRF
							Else
								nTotPis	 :=	nTotPis + aRegBx[nI,16]
								nTotCof	 :=	nTotCof + aRegBx[nI,17]
								nTotCsll :=	nTotCsll + aRegBx[nI,18]							
							Endif	
						Endif
																	
						If aRegBx[nI,34] < aRegBx[nI,19] 	// se o valor SE5, valor do titulo menos juros.., for menor que o valor total do título 
							nPercBx := aRegBx[nI,34]
						EndIf	
																
						If !lTitRet .And. !lRetSFQ .And. !lRetSe5 
								If	nTotBx = nTotBaixa 
									If Len(aRegBx[nI])> 59
										lMaxSeq	:= MaxSeq(cSeq, cChaveBx)
									EndIf  
									If lPccBaixa					
										If lRaRtImp .And. !lBq10925
											nPercBx	+= ( Iif(Alltrim((cAliasF500)->ORIGEM) == "FINA280" , 0 ,nTotPis+nTotCof+nTotCsll)) + nTotIRF + aRegBx[nI,24]+aRegBx[nI,25]// IR + ISS + INSS
											(cAliasF500)->VALOR		+=  ( Iif(Alltrim((cAliasF500)->ORIGEM) == "FINA280" , 0 ,nTotPis+nTotCof+nTotCsll)) + nTotIRF+aRegBx[nI,24]+aRegBx[nI,25]// IR + ISS + INSS
										Else
											nPercBx	:=	nPercBx 	+ ( Iif(Alltrim((cAliasF500)->ORIGEM) == "FINA280" , 0 ,nTotPis+nTotCof+nTotCsll)+(iif(lIrBax,aRegBx[nI,23],0)))// IR 
											(cAliasF500)->VALOR		+=  ( Iif(Alltrim((cAliasF500)->ORIGEM) == "FINA280" , 0 ,nTotPis+nTotCof+nTotCsll)+ aRegBx[nI,23]+aRegBx[nI,24]+aRegBx[nI,25],0)
											If lMaxSeq
												nPercBx					+= aRegBx[nI,23]+aRegBx[nI,24]+aRegBx[nI,25]// IR + ISS + INSS
												(cAliasF500)->VALOR		+=  aRegBx[nI,23]+aRegBx[nI,24]+aRegBx[nI,25]
											EndIf																				
										EndIf

										If aRegBx[nI,19] <= nVlMinImp	.And. nPercBx > aRegBx[nI,19] .And. Alltrim((cAliasF500)->ORIGEM) <> "FINA280" //titulo normal com valor inferior a valor minimo 
											nPercBx	:=	nPercBx - (nTotPis+nTotCof+nTotCsll)
											(cAliasF500)->VALOR	:= (cAliasF500)->VALOR - (nTotPis+nTotCof+nTotCsll)
										Endif										
									Else
										nPercBx	:=	nPercBx
										If lMaxSeq
											nPercBx	+=	(Iif((Alltrim((cAliasF500)->ORIGEM) $ "FINA460_MATA460_JURA203" .Or. Alltrim(aRegBx[nI,53]) = "CMP")  .And. aRegBx[nI,19] <= nVlMinImp,0, aRegBx[nI,16]+aRegBx[nI,17]+aRegBx[nI,18])+aRegBx[nI,23]+aRegBx[nI,24]+aRegBx[nI,25])
											(cAliasF500)->VALOR	+= (Iif((Alltrim((cAliasF500)->ORIGEM) $"FINA460_MATA460_JURA203" .Or. Alltrim(aRegBx[nI,53]) = "CMP") .And. aRegBx[nI,19] <= nVlMinImp ,0,aRegBx[nI,16]+aRegBx[nI,17]+aRegBx[nI,18])+aRegBx[nI,23]+aRegBx[nI,24]+aRegBx[nI,25])
										EndIf 
									Endif							
								Endif																						
						Endif										
						
						If  (lTitRet .And. nTotBx = nTotBaixa) .Or.	(lRetSFQ .And. nTotBx = nTotBaixa)
							nPercBx	:=	nPercBx + aRegBx[nI,28]								
						Endif	                              																														
					
						If Alltrim((cAliasF500)->ORIGEM) $ "MATA460_JURA203"
							nBase := nPercBx							
						Endif
							
						If !lDesInc
							nPercBx += nDescCon
						EndIf

						nPercBx	:= (nPercBx *100) / aRegBx[nI,19]																	
								
					Endif	
		
					If nPercBx > 100	// se o percentual de baixa for maior que o valor que 100
						nPercBx := (aRegBx[nI,34]* 100) / aRegBx[nI,19]  //o que foi realmente baixado do título (sem multa, juros...)
					EndIf
		
				Endif                                   
		
				If aRegBx[nI,47] > 0 
					If Alltrim(aRegBx[nI,11]) $ 'MATA460_JURA203' 
						nPercBx := 100
						(cAliasF500)->PERC := 100					 	
					Else						
						(cAliasF500)->PERC := 0
					Endif	
				Else
			  		(cAliasF500)->PERC := Round(nPercBx,6) // Percentual
				Endif

				If (aRegBx[nI,12] $ "07_08_09_49")
					lEnvBaseP	:=	.F.
				Endif	
				If (aRegBx[nI,14] $ "07_08_09_49")
					lEnvBaseC := .F.
				Endif
				
				nValF500 := nBase		// Guarda valor base definido sem influencia do PE SPDF500B
		
				If Alltrim(aRegBx[nI,11]) $ "FINA040_FINA050_FINA280_FINA290_FINA565_FINA460_JURA203_CNTA121_LOJA701_"+Alltrim(cOrigem) .OR. (aRegBx[nI,35] $ "JR_MT_J2_M2_CM_C2") .OR. aRegBx[nI,48]>0 .OR. lbxParcLiq
		
					(cAliasF500)->ED_TABCCZ	:= aRegBx[nI,39]
					(cAliasF500)->ED_CODCCZ	:= aRegBx[nI,40]
					(cAliasF500)->ED_GRUCCZ	:= aRegBx[nI,41]
					(cAliasF500)->ED_DTFCCZ	:= aRegBx[nI,42]
					(cAliasF500)->CHVCLIENTE:= aRegBx[nI,6] + aRegBx[nI,7] // CODIGO + LOJA CLIENTE     

					If (aRegBx[nI,35] $ "JR_MT_J2_M2_CM_C2")						
						nBase	:=(cAliasF500)->VALOR
					Else
						If aRegBx[nI,29] == "1".Or. (aRegBx[nI,37] = "1" .And. nTotBx <> nTotBaixa)
							nBase	:=(cAliasF500)->VALORE1
						ElseIf aRegBx[nI,48]>0 // se desconto incondicional devo manter o valor base o valor baixado.
							nBase := Round(If(nTpMoeda>1,aRegBx[nI,34]*nPercBx/100,If(nPercBx == 100,aRegBx[nI,19],aRegBx[nI,34])),2)
						Else
							 If Alltrim((cAlias)->ORIGEM) == 'FINA460' .and. aRegBx[nI,27] > 0 .and. aRegBx[nI,27]<>aRegBx[nI,19]
								nBase	:= (cAliasF500)->VALORE1
							Else
								nBase	:= Round(If(nTpMoeda>1,aRegBx[nI,34],If(aRegBx[nI,27]>0 .And. aRegBx[nI,27]>aRegBx[nI,19],aRegBx[nI,27],aRegBx[nI,19])),2)
							Endif
						EndIf    
					Endif

					nValF500 := nBase - aRegBx[nI,48] 
					
					If lSpdBase
						nBase	:= ExecBlock ("SPDF500B",.F.,.F.)	
					Endif

					nPisBx := Round( nBase * (aRegBx[nI,13]/100),2)
					nCofBx := Round( nBase * (aRegBx[nI,15]/100),2)

					If nPercBx < 100 .And. aRegBx[nI,29] <> "1" .And. aRegBx[nI,48]=0 // se baixa parcial e nao for multiplas naturezas e não possuirdesconto incondicional
						nValF500 := Round(nValF500  * nPercBx,2)/100
						nBase 	 := Round(nBase  * nPercBx,2)/100
						nPisBx	 := Round(nPisBx * nPercBx,2)/100
						nCofBx	 := Round(nCofBx * nPercBx,2)/100
					Endif
					
					(cAliasF500)->NATUREZ	:=	aRegBx[nI,10]//CODIGO NATUREZA		
					(cAliasF500)->CSTPIS	:=	aRegBx[nI,12] //CST PIS
					(cAliasF500)->ALIQPIS	:=	aRegBx[nI,13] //ALIQUOTA APURACAO PIS
					(cAliasF500)->CSTCOF	:=	aRegBx[nI,14] //CST COFINS
					(cAliasF500)->ALIQCOF	:=	aRegBx[nI,15] //ALIQUOTA APURACAO COFINS		
				  	(cAliasF500)->CONTA		:=	aRegBx[nI,36] //CONTA ANALITICA CONTABIL
					(cAliasF500)->BASEPIS	:=	Iif(lEnvBaseP,nBase,0) //BASE PIS
					(cAliasF500)->VRPIS		:=	nPisBx        //VALOR PIS
					(cAliasF500)->BASECOF	:=	Iif(lEnvBaseC,nBase,0) //BASE COFINS			
					(cAliasF500)->VRCOFINS	:=	nCofBx        //VALOR COFINS
		
					//Tratar cancelamento - Ainda nao foi definido pelo Fiscal.
					(cAliasF500)->VRDESC	:=  aRegBx[nI,47] //VALOR DESCONTO                                    
					(cAliasF500)->NUMPRO	:=	aRegBx[nI,54]//Nro do Processo Referencial	
					(cAliasF500)->INDPRO	:=	aRegBx[nI,55] //Tipo do Processo Referencial			
		
				Else
					(cAliasF500)->CSTPIS	:=	"" //CST PIS
					(cAliasF500)->ALIQPIS	:=	0  //ALIQUOTA APURACAO PIS
					(cAliasF500)->CSTCOF	:=	"" //CST COFINS
					(cAliasF500)->ALIQCOF	:=	0  //ALIQUOTA APURACAO COFINS		
					(cAliasF500)->CONTA		:=	"" //CONTA ANALITICA CONTABIL
					(cAliasF500)->BASEPIS	:=	0  //BASE PIS
					(cAliasF500)->VRPIS		:=	0  //VALOR PIS
					(cAliasF500)->BASECOF	:=	0  //BASE COFINS
					(cAliasF500)->VRCOFINS	:=	0  //VALOR COFINS
					(cAliasF500)->VRDESC	:=	aRegBx[nI,47] //VALOR DESCONTO          
					(cAliasF500)->NUMPRO	:=	"" //Nro Processo Referencial
					(cAliasF500)->INDPRO	:=  ""	//Tipo Processo Referencial		
				Endif				
				
				(cAliasF500)->VRDESCON		:=	aRegBx[nI,48] 

				//Quando tenho mais de uma baixa para o mesmo titulo (baixas parciais) devo gerar o desconto 
				//somente na ultima baixa.					
				If nTotBaixa > 1 .And. nTotBx > 0
					If nTotBaixa <> nTotBx
						(cAliasF500)->VRDESCON := 0					
					Endif
				Endif							
				If aRegBx[nI][62] > 1
					nE5_VALOR := aRegBx[nI,44] / nTxMoeda
				Else
					nE5_VALOR := aRegBx[nI,44]	
				EndIf
				If nE5_VALOR > aRegBx[nI,19] .and. aRegBx[nI,29]<>"1" .and. lBxSped // Se o valor baixado for maior que o valor do título
					(cAliasF500)->VALOR	:= aRegBx[nI,44] - aRegBx[nI,46] - nJurosSev - aRegBx[nI,61] //O valor baixado deve ser o valor da SE5 descontando juros, multa e correção.
				Elseif aRegBx[nI,34] > nE5_VALOR .and. nOldDescCon < 0 // se o valor baixado for menor que o valor da se5, significa que teve desconto
					(cAliasF500)->VALOR	:= aRegBx[nI,44]// valor baixado
				Else
					(cAliasF500)->VALOR	:= nValF500
				EndIf	
				(cAliasF500)->(DBCOMMIT())
				lDesInc := .F.
			Next
			aRegBx	:=	{}
		EndDo		
		
	Elseif aAlias[nA] == "SEI"	.And. lSEI_ .And. !Empty(cNatApl)               

		F500Top(lNRastDSD,cDataIni,cDataFim,cMotBx,lBxSped,aNatNTrib,cBxSql,cAlias)

		dbSelectArea(cAlias)		
		
		aSei := {} 
		
		While !(cAlias)->(Eof()) 
			If Len(aSei) == 0
				aadd(aSei, {(cAlias)->SEQ,(cAlias)->MOTBX,(cAlias)->(RECNO()),(cAlias)->NUMERO,((cAlias)->FILIAL+ (cAlias)->APLEMP + (cAlias)->NUMERO + (cAlias)->REVISAO),0})
			ElseIf AScan(aSei,{|x|AllTrim(x[5])== Alltrim((cAlias)->FILIAL+ (cAlias)->APLEMP + (cAlias)->NUMERO + (cAlias)->REVISAO)}) > 0 
				For ni := 1 to Len(aSei)
					If AllTrim(aSei[ni][5]) == Alltrim((cAlias)->FILIAL+ (cAlias)->APLEMP + (cAlias)->NUMERO + (cAlias)->REVISAO)
						aSei[ni][6]	:=	(cAlias)->VALOR		
					EndIf
				Next
			Else
				aadd(aSei, {(cAlias)->SEQ,(cAlias)->MOTBX,(cAlias)->(RECNO()),(cAlias)->NUMERO,((cAlias)->FILIAL+ (cAlias)->APLEMP + (cAlias)->NUMERO + (cAlias)->REVISAO),0})
			EndIf                                               				 			 	
			(cAlias)->(Dbskip())				 								 		 	 
		Enddo   
		
		(cAlias)->(dbgotop())
		
		While !(cAlias)->(Eof())

				lEnvBaseP :=	.T.
				lEnvBaseC :=	.T.        
				nBase		:=	nPisBx	:=	nCofBx	:=	0	

				If  ((cAlias)->CSTPIS $ "07_08_09_49")
					lEnvBaseP	:=	.F.
				Endif	
				If ((cAlias)->CSTCOF  $ "07_08_09_49")
					lEnvBaseC	:=	.F.
				Endif
					nVrJuros	:=	nRegApl	:=	0		
					aRegApl		:= 	{}			
					nTxMoeda	:=	(cAlias)->TXMOEDA
					cTpApl		:=	(cAlias)->TIPO
					cChaveApl	:= 	(cAlias)->FILIAL+ (cAlias)->APLEMP + (cAlias)->NUMERO + (cAlias)->REVISAO + (cAlias)->SEQ						
					nSeq		:=	(cAlias)->SEQ
					nMoeda		:=	(cAlias)->MOEDA 
					
					aAdd(aRegApl,{aAlias[nA],; // 1 
													(cAlias)->FILIAL,; //2 
													(cAlias)->APLEMP,; //3 
													(cAlias)->NUMERO,; // 4 
													(cAlias)->REVISAO,; // 5 
													(cAlias)->SEQ,; // 6 
													(cAlias)->TIPO,; // 7 
													(cAlias)->BANCO,; // 8 
													(cAlias)->AGENCIA,; // 9 
													(cAlias)->CONTA,; // 10 
													(cAlias)->NATUREZ,;  // 11 
									  				(cAlias)->DATAM,; // 12 
									  				(cAlias)->CSTPIS,; // 13 
									  				(cAlias)->PCAPPIS,; // 14 
									  				(cAlias)->CSTCOF,; // 15 
									  				(cAlias)->PCAPCOF,; // 16 									  				
									  				(cAlias)->TABCCZ,; // 17 
									  				(cAlias)->CODCCZ,; // 18 
									  				(cAlias)->GRUCCZ,; // 19 
									  				(cAlias)->DTFCCZ,; // 20 
									  				(cAlias)->CONTASED,; // 21 									  				
									  				(cAlias)->RECNO}) // 22

					For ni:= 1 to Len(aSEI)
						If Alltrim((cAlias)->FILIAL+ (cAlias)->APLEMP + (cAlias)->NUMERO + (cAlias)->REVISAO) == AllTrim(aSei[ni][5]) 
							If aSei[ni][6] > 0
								If nSeq == aSei[ni][1]
									nVrJuros	:= aSei[ni][6]
									lContinua	:= .T.
								Else
									lContinua	:= .F.
								EndIf
							Else
								nVrJuros	:=	(cAlias)->VALOR	
								lContinua	:= .T.
							EndIf
						EndIf
					Next
					
					If !lContinua
						(cAlias)->(Dbskip())
						Loop
					Endif

					nBase	:=	nVrJuros
			
					If  nMoeda >1  .And. Alltrim(aRegApl[1,7]) <> "CDI"
						nBase	:= nBase	* nTxMoeda
					Endif				
			
				   If	aRegApl[1,14]	> 0 //Apuracao PIS
						nPisBx := Round( nBase * ( aRegApl[1,14]/100),2)
					Endif
					
					If 	 aRegApl[1,16] >0 //Apuracao COFINS 
						nCofBx := Round( nBase * ( aRegApl[1,16]/100),2)
					Endif

					(cAliasF500)->(DbAppend())
					(cAliasF500)->FILIAL		:=	aRegApl[1,2]  		
					(cAliasF500)->PREFIXO		:=	aRegApl[1,3] // APLEMP 
					(cAliasF500)->NUMERO		:=	aRegApl[1,4] 
					(cAliasF500)->PARCELA		:=	aRegApl[1,5] // REVISAO
					(cAliasF500)->TIPO			:=	aRegApl[1,7]							
					(cAliasF500)->CLIENTE		:=	aRegApl[1,8]  // BANCO 
					(cAliasF500)->LOJA			:=	aRegApl[1,9] // AGENCIA 
					(cAliasF500)->CHVCLIENTE	:=  aRegApl[1,8] + aRegApl[1,9] + aRegApl[1,10]// BANCO + AGENCIA + CONTA
					(cAliasF500)->DTMOV    		:=	aRegApl[1,12]
					(cAliasF500)->TABELA	  	:=	"SEI"        					
					(cAliasF500)->NROREG   		:=	aRegApl[1,22]
					(cAliasF500)->ORIGEM		:=	 "FINA181"				
					(cAliasF500)->SERIE			:=	aRegApl[1,6]// SEQ
					(cAliasF500)->ORIFIN		:=	.T. 									//ORIGEM FINANCEIRO (.T.) OU NÃO (.F.)
					(cAliasF500)->EMISSAO		:= 	aRegApl[1,12]			
					(cAliasF500)->VALORE1		:=  nBase						
					(cAliasF500)->VALOR			:=	nBase							  
					(cAliasF500)->PERC 			:= 	100               					
					(cAliasF500)->ED_TABCCZ		:= 	aRegApl[1,17]			
					(cAliasF500)->ED_CODCCZ		:=	aRegApl[1,18]	
					(cAliasF500)->ED_GRUCCZ		:= 	aRegApl[1,19]	
					(cAliasF500)->ED_DTFCCZ		:= 	aRegApl[1,20]
					(cAliasF500)->NATUREZ		:= 	aRegApl[1,11]						
					(cAliasF500)->CSTPIS		:=	aRegApl[1,13]	
					(cAliasF500)->ALIQPIS		:=	aRegApl[1,14]  // PCAPPIS	
					(cAliasF500)->CSTCOF		:=	aRegApl[1,15]	
					(cAliasF500)->ALIQCOF		:=	aRegApl[1,16]	 // PCAPCOF 
				  	(cAliasF500)->CONTA			:=	aRegApl[1,21]	 // CONTASED 
					(cAliasF500)->BASEPIS		:=	Iif(lEnvBaseP,nBase,0) //BASE PIS
					(cAliasF500)->VRPIS			:=	nPisBx        //VALOR PIS
					(cAliasF500)->BASECOF		:=	Iif(lEnvBaseC,nBase,0) //BASE COFINS			
					(cAliasF500)->VRCOFINS		:=	nCofBx        //VALOR COFINS
					(cAliasF500)->VRDESC		:=   0                       
					(cAliasF500)->NUMPRO		:=	""//Nro do Processo Referencial	
					(cAliasF500)->INDPRO		:=	""//Tipo do Processo Referencial														
					(cAliasF500)->(DBCOMMIT())
			(cAlias)->(Dbskip())
			Enddo			
	Endif
	
	If Select(cAlias) <> 0
		dbSelectArea(cAlias)
		dbCloseArea()
		Ferase(cNomeArq+GetDBExtension())
	EndIf		
Next     

If lHelp
	Help(" ",1,"PARAMINC")
EndIf    

SC5->(RestArea(aAreaSC5))          
EndIf       

Return


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} F500TOP

Funcao de filtros dos registros do bloco F500 - SPED PIS COFINS - para TOP CONNECT.
Arquivo anterior: MATXATU.PRX

@Author	Clovis Magenta
@since	29/06/2012
/*/
//-----------------------------------------------------------------------------------------------------
Function F500Top(lNRastDSD,cDataIni,cDataFim,cMotBx,lBxSped,aNatNTrib,cBxSql,cAlias)
Local cQuery		:= ""
Local aStrucTRB1:= {}
Local aStrucTRB2:= {}
Local nI		:= 	0
Local nA		:=	0
//Identifico se tenho unidade de negócios.
Local lUnidNeg 	:= FWSizeFilial() > 2	// Indica se usa Gestao Corporativa
Local cFilSe5	:= xFilial("SE5")
Local cFilSe1	:= xFilial("SE1")
Local cFilSei	:= xFilial("SEI")
Local lSe1MsFil	:=	SE1->(FieldPos("E1_MSFIL")) > 0
Local lSe5MsFil	:=	SE5->(FieldPos("E5_MSFIL")) > 0
Local lSeiMsFil	:=	SEI->(FieldPos("EI_MSFIL")) > 0
Local cTipoTit	:=	""
Local lAplSped	:= SuperGetMv("MV_APLFIN",,.F.) //Habilita o envio das Aplicacoes financeiras.
Local cNatApl	:= SuperGetMv("MV_APLNAT",,"") 	//Codigo da Natureza das Aplicacoes Financeiras.                                   
Local cTpApl	:= cNomeApl	:=	""
Local cNatResg 	:= &(GetMv("MV_NATRAPL"))            
Local cBxCanc	:= 	"" 
Local lSpdDtEmis:=	ExistBlock("SPDF500")
Local cDtEmis	:= ""
Local cEnvLiq 	:= SuperGetMv("MV_ENVLIQ",.T.,"2")  //1 = Envia    2= Não envia		
Local cDb		:= UPPER(AllTrim(TcGetDb()))
Local cFuncao 	:= ""
Local lF500E5TQ	:= ExistBlock("F500E5TQ")
Local lF500EITQ	:= ExistBlock("F500EITQ")
Local cEnvRa    := SuperGetMv("MV_ENVRA",.T.,"2")  //1 = Envia    2= Não envia		

//Valida banco para utilização de Substring/Substr
If cDb $ "DB2|ORACLE|INFORMIX" 
	cFuncao := "SUBSTR"
Else
	cFuncao := "SUBSTRING"
EndIf


If	cAlias	= "SEIQRY"	
 		If lAplSped .And. !Empty(cNatApl) // Tratamento para o parametro MV_APLNAT.
			cNomeApl:="'"	// Inserindo aspas e virgulas para o select da query.
			For nA:=1 To Len(cNatApl)
				If Subst(cNatApl,nA,1) $ ";,-_|./" 				 
		  	   	cNomeApl+="','"
		  	   Else
		  	   	cNomeApl+=Subst(cNatApl,nA,1)  
		  	   Endif
		  	Next			
			cNomeApl	+=	"'"
			cTpApl	:=""
			cNatApl	:=""
			For nA:=1 To Len(cNomeApl)			
				If Subst(cNomeApl,nA,1) $ "'" 				 
			  	   If Len(cNatApl) > 1 .And. Len(cNatApl) < 10
		  	       	cTpApl+=Space(1)    	  	      
		  	      Endif  	  	         
			  	   cTpApl+=Subst(cNomeApl,nA,1)  	  	   
		  	      cNatApl:=""	  	   
			   ElseIf Subst(cNomeApl,nA,1) $ "," 
				   cTpApl+=Subst(cNomeApl,nA,1)  
		  	   Else
		  	   	cTpApl	+=Subst(cNomeApl,nA,1) 
		  			cNatApl	+=Subst(cNomeApl,nA,1) 	   	 
			   Endif
			Next	
		Endif		
Endif
	             	                  	
If	cAlias	= "SE5QRY"	
		If lUnidNeg
			cFilSe5	:= SM0->M0_CODFIL 
			cFilSe1 := SM0->M0_CODFIL 
		Else
			cFilSe5	:= xFilial("SE5")
			cFilSe1 := xFilial("SE1")
		Endif
		
		dbSelectArea("SE5")
		aStrucTRB1 := dbStruct()
		
		cQuery 		:= "SELECT  "
		cQuery	 	+= "SE5.E5_FILIAL FILIAL, SE5.E5_PREFIXO PREFIXO, SE5.E5_NUMERO NUMERO, SE5.E5_PARCELA PARCELA, SE5.E5_TIPO TIPO, "
		cQuery		+= "SE5.E5_CLIFOR CLIENTE, SE5.E5_LOJA LOJA, SE5.E5_TIPODOC TIPODOC, SE5.E5_MOTBX MOTBX, SE5.E5_DATA DTMOV, "
		cQuery	 	+= "SE5.E5_VRETPIS VRETPIS, SE5.E5_VRETCOF VRETCOF, SE5.E5_VRETCSL VRETCSL, SE5.E5_VRETIRF VRETIRF, SE5.E5_VALOR VALOR, SE5.R_E_C_N_O_ NROREG, " 								
		cQuery		+= "SE5.E5_VLMULTA VLMULTA, SE5.E5_VLJUROS VLJUROS, SE5.E5_VLDESCO VLDESCO, SE5.E5_DOCUMEN DOCUMEN, "
		cQuery		+= "SE5.E5_PRETPIS PRETPIS, SE5.E5_PRETCOF PRETCOF, SE5.E5_PRETCSL PRETCSL, SE5.E5_VLCORRE VLCORRE, "
		cQuery   	+= "SE5.E5_TPDESC E5_TPDESC, SE5.E5_SEQ E5_SEQ, SE5.E5_MOEDA MOEDAE5, "		

		//Campos da tabela SE1
		cQuery	 	+= "SE1.E1_ORIGEM ORIGEM, SE1.E1_NATUREZ NATUREZ, SE1.E1_SALDO SALDO,SE1.E1_MOEDA TPMOEDA, "
		cQuery	 	+= "SE1.E1_PIS PIS, SE1.E1_COFINS COFINS, SE1.E1_INSS INSS, SE1.E1_ISS ISS, SE1.E1_IRRF IRRF, "
		cQuery		+= "SE1.E1_CSLL CSLL, SE1.E1_VALOR VALORE1, SE1.E1_SERIE SERIE, SE1.E1_VLCRUZ VLCRUZ, SE1.E1_BASEIRF BASEIRF, "
		cQuery		+= "SE1.E1_DESDOBR DESDOBR, SE1.E1_EMISSAO EMISSAO,  SE1.E1_PEDIDO PEDIDO, SE1.E1_DECRESC DECRESC, "
		cQuery   += "SE1.E1_TPDESC TPDESC, "		
		cQuery   += "SE1.E1_NUMPRO NUMPRO, SE1.E1_INDPRO INDPRO, SE1.E1_NUMLIQ NUMLIQ, "			   			
		
		//Campos da tabela SED
		cQuery	 	+= "SED.ED_CSTPIS CSTPIS, SED.ED_PCAPPIS PCAPPIS, SED.ED_CSTCOF CSTCOF, SED.ED_PCAPCOF PCAPCOF, SED.ED_CONTA CONTA, "
		cQuery	 	+= "SED.ED_CODIGO CODIGO, SED.ED_APURCOF APURCOF, SED.ED_APURPIS APURPIS,SED.ED_TABCCZ ED_TABCCZ, "
		cQuery	 	+= "SED.ED_CODCCZ ED_CODCCZ, SED.ED_GRUCCZ ED_GRUCCZ, SED.ED_DTFCCZ ED_DTFCCZ "
				
		cQuery	 	+= "FROM "				
		cQuery 		+= RetSqlName("SE5") + " SE5, "		
		cQuery 		+= RetSqlName("SE1") + " SE1 	"
		cQuery 		+= " LEFT JOIN " // Left join pois existe a possibilidade de titulos vindos do FAT não terem natureza.
		cQuery 		+= RetSqlName("SED") + " SED "
		cQuery 		+= " ON SE1.E1_NATUREZ = SED.ED_CODIGO AND "
		cQuery 	    += "SED.ED_FILIAL = '"  + xFilial("SED") + "' AND "
		cQuery 		+= " SED.D_E_L_E_T_ = '' "
		
		cQuery	 	+= "WHERE "			
		
		If !Empty( Iif( lUnidNeg, FWFilial("SE5") , xFilial("SE5") ) )
			cQuery 	+= "SE5.E5_FILIAL = '"  + xFilial("SE5") + "' AND "
		Else
			If lSe5MsFil
				cQuery 	+= "SE5.E5_MSFIL = '" + Iif(lUnidNeg, cFilSe5, cFilAnt) + "' AND "					
			Else	
				cQuery 	+= "SE5.E5_FILORIG = '" + Iif(lUnidNeg, cFilSe5, cFilAnt) + "' AND "	
			Endif	
		EndIf   		
			
		If !Empty( Iif( lUnidNeg, FWFilial("SE1") , xFilial("SE1") ) )
			cQuery 	+= "SE1.E1_FILIAL = '"  + xFilial("SE1") + "' AND "
		Else
			If lSe1MsFil
				cQuery 	+= "SE1.E1_MSFIL = '" + Iif(lUnidNeg, cFilSe1, cFilAnt) + "' AND "
			Else	
				cQuery 	+= "SE1.E1_FILORIG = '" + Iif(lUnidNeg, cFilSe1, cFilAnt) + "' AND "	
			EndIf					
				
		EndIf   
					
		cQuery 		+= "SE5.E5_PREFIXO = SE1.E1_PREFIXO AND " 
		cQuery 		+= "SE5.E5_NUMERO = SE1.E1_NUM AND " 
		cQuery 		+= "SE5.E5_PARCELA = SE1.E1_PARCELA AND " 
		cQuery 		+= "SE5.E5_TIPO = SE1.E1_TIPO AND " 					
		cQuery	 	+= "SE5.E5_CLIFOR = SE1.E1_CLIENTE AND "
		cQuery		+= "SE5.E5_LOJA = SE1.E1_LOJA AND "
	
		If lSpdDtEmis
			cDtEmis := ExecBlock ("SPDF500",.F.,.F.)
			If ( ValType(cDtEmis) != "C" ) .Or. ( Empty(cDtEmis) )
    	    	cDtEmis	:=	"E5_DATA"
			Endif    
    	    cQuery	 	+= "(SE5."+cDtEmis+" >= '"+cDataIni+"' AND SE5."+cDtEmis+" <= '"+cDataFim+"') AND "
		Else    
            cQuery	 	+= "(SE5.E5_DATA >= '"+cDataIni+"' AND SE5.E5_DATA <= '"+cDataFim+"') AND "
	    Endif
					 		
					
		If  !lNRastDSD //Tratamento para desdobramento
			cQuery	+= "((SE1.E1_DESDOBR = '1' AND SE1.E1_BAIXA <>'' AND SE1.E1_SITUACA <> '') OR SE1.E1_DESDOBR <> '1') AND "
		Endif
		
		//Exclui os titulos que possuem estorno
		cQuery	 	+= "SE5.E5_SEQ NOT IN "
		cQuery 		+= "(SELECT SE5AUX.E5_SEQ FROM "+RetSqlName("SE5")+" SE5AUX WHERE "
		cQuery		+= 		" SE5AUX.E5_FILIAL = SE5.E5_FILIAL AND "
		cQuery		+= 		" SE5AUX.E5_PREFIXO = SE5.E5_PREFIXO AND "
		cQuery		+= 		" SE5AUX.E5_NUMERO = SE5.E5_NUMERO AND  "
		cQuery		+= 		" SE5AUX.E5_PARCELA = SE5.E5_PARCELA AND " 
		cQuery		+= 		" SE5AUX.E5_TIPO = SE5.E5_TIPO AND " 
		cQuery		+= 		" SE5AUX.E5_CLIFOR = SE5.E5_CLIFOR AND " 
		cQuery		+= 		" SE5AUX.E5_LOJA = SE5.E5_LOJA AND "     
		cQuery		+= 		" SE5AUX.E5_TIPODOC = 'ES' AND "
		cQuery		+= 		" SE5AUX.D_E_L_E_T_ = '' "
		cQuery 		+= ") AND "
		
		cTipoTit		:=	""
		cTipoTit		:=	MVTAXA + "|" + MVABATIM + "|" + MV_CRNEG + "|" + MVPROVIS 
		cQuery 		+= "SE5.E5_TIPO NOT IN " + FormatIn(cTipoTit,If("|"$cTipoTit,"|",","))  + " AND "		
				
		//Caso os parametros estejam configurados devem ser enviadas as receitas nao tributaveis (juros, multas, variacao cambial).
		If lBxSped .And. Len(aNatNTrib)>0 
			cQuery		+= "((SE5.E5_MOTBX = 'FAT' AND SE5.E5_TIPODOC IN ('DC','JR','MT','CM')) OR "
			cQuery		+= " (SE5.E5_MOTBX <> 'FAT') OR (SE5.E5_MOTBX = 'CMP' AND SE5.E5_TIPODOC = 'CP' AND SE5.E5_TIPO = 'NF')) AND "		
		Endif
		
		cQuery		+= " ( "
		cQuery		+= " (SE5.E5_MOTBX NOT IN ( 'FAT','RA' ) "

		If cEnvRa == "2"
			cQuery 	+= " AND SE5.E5_TIPO <> 'RA')  "
			cQuery	+= " OR (SE5.E5_TIPO = 'NF' AND SE5.E5_MOTBX = 'CMP') " //Considera a NF devido as informações das retenções
		Else
			cQuery 	+= " ) AND (SE5.E5_MOTBX <> 'CMP') " 	
		Endif	
		
		cQuery	 	+= " ) AND "		
		
		If cEnvLiq	==	"1" //Enviar titulo no momento que foi liquidado. 
			If !Empty(cBxSql)
				cBxCanc += "(" + cBxSql + ")"
				cQuery		+= "SE5.E5_MOTBX NOT IN " + cBxCanc + " AND "			
			EndIf	
		Else		
			cBxCanc		:= "('FAT','LIQ'"			
			If !Empty(cBxSql)
				cBxCanc += "," + cBxSql
			EndIf	
			cBxCanc		+= ")"
			cQuery		+= "SE5.E5_MOTBX NOT IN " + cBxCanc + " AND "	
		Endif		
		
		If cEnvLiq	==	"2" //Não enviar 
			cQuery		+= "(SE5.E5_TIPODOC NOT IN ('BA') OR E5_LOTE <> '') AND " //Nao selecionar baixas que nao movimentam banco.
		Endif		

	
		cQuery		+= "SE5.E5_SITUACA <> 'C' AND "		
	
		cQuery	 	+= "SE5.E5_RECPAG = 'R' AND "		//Conforme definicao do Fiscal somente titulos a receber (tabela SE1).			
				
		cQuery		+= "SE5.D_E_L_E_T_ = '' "										
		
		cQuery		+= "AND SE1.D_E_L_E_T_ = '' "		
		cQuery 		+= "ORDER BY FILIAL, PREFIXO, NUMERO, PARCELA, TIPO, CLIENTE, LOJA, SE5.R_E_C_N_O_ "

		If lF500E5TQ
			cQuery := ExecBlock("F500E5TQ", .F. , .F. , {cQuery})
		Endif
		
		cQuery 		:= ChangeQuery(cQuery)                 
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias)
		
		For nI := 1 To len(aStrucTRB1)
			If aStrucTRB1[nI][2] <> "C" 
				TcSetField(cAlias,aStrucTRB1[nI][1],aStrucTRB1[nI][2],aStrucTRB1[nI][3],aStrucTRB1[nI][4])
			EndIf
		Next nI

ElseIf	cAlias	= "SEIQRY"
		If lUnidNeg
			cFilSei	:= SM0->M0_CODFIL 
		Else
			cFilSei	:= xFilial("SEI")
		Endif
		
		dbSelectArea("SEI")
		aStrucTRB := dbStruct()		

		cQuery	 	:= "SELECT " 	
		cQuery	 	+= "SEI.EI_FILIAL FILIAL, SEI.EI_NUMERO NUMERO, SEI.EI_REVISAO REVISAO, SEI.EI_APLEMP APLEMP, SEI.EI_SEQ SEQ,  "
		cQuery	 	+= "SEI.EI_TIPO TIPO, SEI.EI_DATA DATAM,SEI.EI_VALOR VALOR,  "
		cQuery	 	+= "SEI.EI_BANCO BANCO, SEI.EI_AGENCIA AGENCIA, SEI.EI_CONTA CONTA, SEI.EI_TIPODOC TIPODOC, SEI.EI_MOTBX MOTBX, "
		cQuery   	+= "SEI.EI_VLMOED2 VLCRUZ, SEH.EH_MOEDA MOEDA, SEI.EI_NATUREZ NATUREI, SEI.EI_TXMOEDA TXMOEDA, "			   			
		cQuery   	+= "SEH.EH_NATUREZ NATUREZ,  "			   					
		
		//Campos da tabela SED
		cQuery	 	+= "SED.ED_CSTPIS CSTPIS, SED.ED_PCAPPIS PCAPPIS, SED.ED_CSTCOF CSTCOF, SED.ED_PCAPCOF PCAPCOF, SED.ED_CONTA CONTASED, "
		cQuery	 	+= "SED.ED_CODIGO CODIGO, SED.ED_APURCOF APURCOF, SED.ED_APURPIS APURPIS,SED.ED_TABCCZ TABCCZ, "
		cQuery	 	+= "SED.ED_CODCCZ CODCCZ, SED.ED_GRUCCZ GRUCCZ, SED.ED_DTFCCZ DTFCCZ,  "				
		
		cQuery	 	+= "SEI.R_E_C_N_O_ RECNO " 		
		cQuery	 	+= "FROM "
		cQuery 		+= RetSqlName("SEI") + " SEI,  "		
		cQuery 		+= RetSqlName("SEH") + " SEH,  "
		cQuery 		+= RetSqlName("SA6") + " SA6,  "		
		cQuery 		+= RetSqlName("SED") + " SED   "		
		
		cQuery	 	+= "WHERE " 		
		
		cQuery	 	+= "(SEI.EI_DATA >= '"+cDataIni+"' AND SEI.EI_DATA <= '"+cDataFim+"') AND "									
		
		If !Empty( Iif( lUnidNeg, FWFilial("SEI") , xFilial("SEI") ) )
			cQuery 	+= "SEI.EI_FILIAL = '"  + xFilial("SEI") + "' AND "
		Else
			If lSeiMsFil
				cQuery 	+= "SEI.EI_MSFIL = '" + Iif(lUnidNeg, cFilSei, cFilAnt) + "' AND "					
			Else	
				cQuery 	+= "SEI.EI_FILIAL = '"  + xFilial("SEI") + "' AND "
			Endif	
		EndIf   			
	
		cQuery 		+=	"SEH.EH_FILIAL='" + xFilial("SEH") + "' AND "  					
		cQuery 		+=	"SA6.A6_FILIAL='" + xFilial("SA6") + "' AND "  
		cQuery 		+=	"SED.ED_FILIAL='" + xFilial("SED") + "' AND "  
		
		cQuery		+= "SEI.EI_NUMERO = SEH.EH_NUMERO AND " 
		cQuery		+= "SEI.EI_REVISAO = SEH.EH_REVISAO AND " 
		cQuery		+= "SEI.EI_APLEMP = SEH.EH_APLEMP AND " 
               
	 	cQuery 	+=  "SEI.EI_STATUS NOT IN ( 'C')   AND "

        cQuery 		+=  "SEI.EI_TIPODOC IN ('JR')  AND "
        //cQuery		+=	"SEI.EI_MOTBX NOT IN ('APR') AND "	//Desconsidera apropriacao	 		 
         
		cQuery 		+= "SEH.EH_NATUREZ IN (" + cTpApl + ") AND " 		
		cQuery 		+= "SEI.EI_NATUREZ IN ('" + cNatResg + "') AND " 				
		                                                                                          
		cQuery 	+=  "SEI.EI_BANCO  != ' '  AND "
	 	cQuery 	+=  "SEI.EI_AGENCIA  != ' '  AND "
	 	cQuery 	+=  "SEI.EI_CONTA  != ' '   AND "

		cQuery		+= "SA6.A6_COD = SEI.EI_BANCO AND " 
		cQuery		+= "SA6.A6_AGENCIA = SEI.EI_AGENCIA AND " 					                                               
		cQuery		+= "SA6.A6_NUMCON = SEI.EI_CONTA AND "

		cQuery		+= "SED.ED_CODIGO = SEH.EH_NATUREZ AND " 
		cQuery		+= "SEI.D_E_L_E_T_ = '' "               
		
		cQuery 		+= " ORDER BY FILIAL, APLEMP, NUMERO, REVISAO, SEQ"

		If lF500EITQ
			cQuery := ExecBlock("F500EITQ", .F. , .F. , {cQuery})
		Endif
		
		cQuery 		:= ChangeQuery(cQuery)                 
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAlias)
		
		For nI := 1 To len(aStrucTRB2)
			If aStrucTRB2[nI][2] <> "C" 
				TcSetField(cAlias,aStrucTRB2[nI][1],aStrucTRB2[nI][2],aStrucTRB2[nI][3],aStrucTRB2[nI][4])
			EndIf
		Next nI

Endif
		
Return

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINREPM220

Funcao para compor o valor da base para calculo dos impostos Pis e Cofins na geracao do bloco M220.
Arquivo anterior: MATXATU.PRX

@Author	Andrea V. Santiago
@since	20/08/2012
/*/
//-----------------------------------------------------------------------------------------------------
Function FinRepM220(cAliasQry)

Local nValBase 	:=	0	//Valor base para calculdo do PIS e COFINS. 
Local nValTit		:=	0	//Valor total do titulo gerado.
Local lPCCBaixa	:= FPccBxCr()
Local nMoeda		:=	(cAliasQry)->MOEDA				               
			
If ("SE5" $ cAliasQry .And. IsInCallStack("FinSpdM220"))
	
 	nValBase	:=	0
 	
 	If lPCCBaixa // Pcc na Baixa	 		 	
	 	SED->(DbSetOrder(1))
		If SED->(DbSeek(xFilial("SED")+ (cAliasQry)->NATUREZ))			
		 	//Calculo inverso assim caso seja base reduzida ou normal o valor vai ser gerado correto.
		 	If (cAliasQry)->VRETPIS > 0 .And. !Empty(SED->ED_PERCPIS) 
		 		nValBase	:=	(cAliasQry)->VRETPIS / (SED->ED_PERCPIS/100) 			 		
		 	Endif                       				 	
		 	If (cAliasQry)->VRETCOF > 0 .And. (nValBase == 0 .Or. nValBase <> (cAliasQry)->VRETCOF / (SED->ED_PERCCOF/100)) .And. !Empty(SED->ED_PERCCOF)	
		 		nValBase	:=	(cAliasQry)->VRETCOF / (SED->ED_PERCCOF/100) 			 		
		 	Endif
	   Endif	   
	Else
		SED->(DbSetOrder(1))
		If SED->(DbSeek(xFilial("SED")+ (cAliasQry)->NATUREZ)) 		
			//Calculo inverso assim caso seja base reduzida ou normal o valor vai ser gerado correto.
		 	If (cAliasQry)->PIS > 0 .And. !Empty(SED->ED_PERCPIS) 
		 		nValBase	:=	(cAliasQry)->PIS / (SED->ED_PERCPIS/100) 			 		
		 	Endif                       				 	
		 	If (cAliasQry)->COFINS > 0 .And. (nValBase == 0 .Or. nValBase <> 	(cAliasQry)->COFINS / (SED->ED_PERCCOF/100)) .And. !Empty(SED->ED_PERCCOF)	
		 		nValBase	:=	(cAliasQry)->COFINS / (SED->ED_PERCCOF/100) 			 		
		 	Endif	
		Endif 		 		 		 	
	Endif
				
   If nValBase == 0 //Natureza somente de apuracao sem retencao.			  				
		nValBase	:= If(nMoeda>1,(cAliasQry)->VLCRUZ,(cAliasQry)->VALORE1)								
	Endif						

	nValTit	:=	 nValBase					
Endif

Return ({nValBase,nValTit})


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} PERCM220

Funcao para calcular o valor percentual para o calculo do Pis e Cofins quando Pcc na Baixa para o bloco 
M220.  
Arquivo anterior: MATXATU.PRX

@Author	Andrea V. Santiago
@since	21/08/2012
/*/
//-----------------------------------------------------------------------------------------------------
Function PercM220(cAliasQry,nMoeda)
Local lRecISS 		:= .T.
Local cChaveBx		:=	""				          
Local nJurosBx	,nDescBx,nVlrSe5,nRet,nTxMoeda
Local	nVrPIS,nVrCOFINS,nVrCSLL,nVrIR,nVrISS,nVrINSS
Local aRet			:=	{}
Local lMVDescIss	:= GetNewPar("MV_DESCISS",.F.)
						
cChaveBx		:=	(cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA 
nJurosBx		:=	nDescBx		:=	nVlrSe5		:=	nTxMoeda	:=	0
nRet			:=	nVrPIS		:=	nVrCOFINS	:=	nVrCSLL :=	nVrIR	:=	nVrISS :=	nVrINSS	:=	0                            

// Posiciona no cliente e loja do titulo que serao processadas as movimentacoes no loop abaixo
SA1->( MsSeek( xFilial("SA1") + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) )          
		
While  (cAliasQry)->( !EoF()) .AND. cChaveBx ==  ( (cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) 

		SED->( MsSeek( xFilial("SED") + (cAliasQry)->NATUREZ ) )

		If (cAliasQry)->TIPO $ ( MVABATIM + MV_CRNEG + MVPROVIS )
			(cAliasQry)->( dbSkip() )
			Loop
		EndIf	      	
		
		lRecIss := (SA1->A1_RECISS == "1" .And. lMVDescIss)
				
		nVrPIS		:=	(cAliasQry)->PIS
		nVrCOFINS	:=	(cAliasQry)->COFINS
		nVrCSLL		:=	(cAliasQry)->CSLL
		nVrIR			:=	(cAliasQry)->VRIR
		nVrISS		:=	(cAliasQry)->VRISS
		nVrINSS		:=	(cAliasQry)->VRINSS

		If (cAliasQry)->TIPODOC $ "JR_MT_J2_M2"
			nJurosBx	+= (cAliasQry)->VALOR
		ElseIf(cAliasQry)->TIPODOC $ "DC_CM_D2_C2"
	     	nDescBx	+= (cAliasQry)->VALOR													
		ElseIf !(cAliasQry)->TIPODOC $ "JR_MT_J2_M2_DC_CM_D2_C2"
			nVlrSe5	+=	(cAliasQry)->VALOR									     					
			nTxMoeda	:=	0
			If (cAliasQry)->MOEDA > 1
				If (cAliasQry)->TXMOEDA == 0
					nTxMoeda := RecMoeda(Stod((cAliasQry)->EMISSAO),(cAliasQry)->MOEDA) 
				Else
					nTxMoeda := (cAliasQry)->TXMOEDA
				Endif					
			Endif						                        												
	 
			AaDd(aRet,{	nVrPIS,;  		// 1
							nVrCOFINS,;  	// 2
							nVrCSLL,;  		// 3
						  	nVrIR,;  		// 4
						  	If(lRecIss, nVrISS,0),;  // 5
						  	nVrINSS,;  		// 6 
						  	(cAliasQry)->VALORE1,;	// 7 
						  	(cAliasQry)->VALOR,;		//	8
						  	(cAliasQry)->SALDO,;		//	9
						  	(cAliasQry)->VLCRUZ,;	//	10 	
						  	(cAliasQry)->MULTNAT,;	//	11                      
						  	nTxMoeda	})					// 12		
		Endif		
		(cAliasQry)->(Dbskip())
Enddo             
            
nRet	:=	0
If Len(aRet)>0
	If aRet[1,9] > 0 //Titulo nao baixado totalmente
		nRet	:=	((( nVlrSe5 - nJurosBx + nDescBx ) *100)/ If(aRet[1,12]>1,aRet[1,8],aRet[1,7]))	
	Else// baixa total ou ultima baixa do titulo precisa acrescentar o valor dos impostos descontados na movimentacao do SE5            
		nRet	:=	((((nVlrSe5 + aRet[1,1]+aRet[1,2]+aRet[1,3]+aRet[1,4]+aRet[1,5]+aRet[1,6]) - nJurosBx + nDescBx)*100)/aRet[1,7])
		If aRet[1,12] > 0 
			nRet	:= (nRet)/aRet[1,12]
		Endif																			
	Endif										
Endif	
Return nRet


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} VERFATF100

Funcao para verificar se titulo contendo uma fatura deve ser enviado na geracao do bloco F100.
Arquivo anterior: MATXATU.PRX

@Author	Andrea V. Santiago
@since	11/07/2013
/*/
//-----------------------------------------------------------------------------------------------------
Function VerFatF100(cAliasQry,cAlias)	
Local nOrdSE2	:=	SE2->(IndexOrd())
Local nRegSE2	:=	SE2->(Recno())      
Local lRetorno	:= .F.
                                                          
//Procurar a fatura deste titulo se a data de emissao for posterior que a data do titulo devo enviar para o SPED PIS/COFINS.
If cAlias = "SE2"
	DbSelectArea("SE2")
	SE2->(Dbsetorder(6)) //FILIAL+FORNECE+LOJA+PREFIXO+NUM//+PARCELA+TIPO
		   
	If SE2->(Dbseek( xFilial("SE2") + (cAliasQry)->FATFOR + (cAliasQry)->FATLOJ + (cAliasQry)->FATPREF + (cAliasQry)->FATURA  ))	
	 	While !SE2->(Eof()) .And.; 
				SE2->E2_FILIAL = xFilial("SE2") .And. ;
				(SE2->E2_FORNECE + SE2->E2_LOJA + SE2->E2_PREFIXO + SE2->E2_NUM) = ((cAliasQry)->FATFOR + (cAliasQry)->FATLOJ + (cAliasQry)->FATPREF + (cAliasQry)->FATURA)
	
			If SE2->E2_TIPO = (cAliasQry)->TIPOFAT .And. !Empty(SE2->E2_BAIXA)  
				lRetorno	:=	.T.
			Endif
			SE2->(Dbskip())			
		Enddo
	Endif	   

SE2->(Dbsetorder(nOrdSE2)) 
SE2->(Dbgoto(nRegSE2))
Endif
	

Return lRetorno


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} BLOCOITOP

Funcao de filtros dos registros do bloco I - SPED CONTRIBUICOES - para TOP CONNECT.
Arquivo anterior: MATXATU.PRX

@Author	Andrea V. Santiago
@since	17/01/2014
/*/
//-----------------------------------------------------------------------------------------------------
Function BlocoITop(cAlias,cAliasQry,cDataIni,cDataFim)

Local lNRastDSD	:= SuperGetMV("MV_NRASDSD",.T.,.F.)
Local aStruct		:= {}
Local cQuery		:= ""
Local cDtEmis		:= ""
Local nX				:= 0
Local cFilSe1		:= ""
Local cFilSe2		:= ""
Local cFilSe5		:= ""
Local lSe1MsFil	:=	SE1->(FieldPos("E1_MSFIL")) > 0
Local lSe2MsFil	:=	SE2->(FieldPos("E2_MSFIL")) > 0
Local lSe5MsFil	:=	SE5->(FieldPos("E5_MSFIL")) > 0
Local cTipoTit		:=	""		  
Local lUnidNeg		:= FWSizeFilial() > 2	// Indica se usa Gestao Corporativa

//Tratamento para jutos, multa e descontos
Local cTpSe5		:=	"'JR','CM','DC','MT'" //Juros, Variacao Cambial, Desconto e Multa.

If cPaisLoc == "BRA"

If lUnidNeg 	
	cFilSe1	:= SM0->M0_CODFIL 
	cFilSe2	:= SM0->M0_CODFIL 
	cFilSe5	:= SM0->M0_CODFIL 		
Else
	cFilSe1	:= xFilial("SE1")
	cFilSe2	:= xFilial("SE2")
	cFilSe5	:= xFilial("SE5")
Endif

If cAlias == "SE5"

	aStruct 	:= SE5->(dbStruct())			
	cQuery	:= "SELECT " 	
	cQuery	+= "SE5.E5_FILIAL FILIAL, SE5.E5_PREFIXO PREFIXO, SE5.E5_NUMERO NUM, SE5.E5_PARCELA PARCELA, "
	cQuery	+= "SE5.E5_TIPO TIPO, SE5.E5_CLIFOR CLIFOR, SE5.E5_LOJA LOJA, "	
	cQuery	+= "SE5.E5_TIPODOC TIPODOC, SE5.E5_SEQ SEQBX, SE5.E5_MOEDA MOEDA, SE5.E5_TXMOEDA TXMOEDA, "
	cQuery	+= "SE5.E5_DATA DATAM, SE5.E5_VALOR VALOR, SE5.E5_VRETPIS PIS, SE5.E5_VRETCOF COFINS, SE5.E5_RECPAG RECPAG, " 		
	cQuery   += "SE5.E5_TPDESC TPDESC, "		
	cQuery	 	+= "SE5.R_E_C_N_O_ RECNO " 		
	cQuery	 	+= "FROM "		
	cQuery 		+= RetSqlName("SE5") + " SE5 "		
	cQuery	 	+= "WHERE " 		
	
	If !Empty( Iif( lUnidNeg, FWFilial("SE5") , xFilial("SE5") ) )
		cQuery 	+= "SE5.E5_FILIAL = '"  + xFilial("SE5") + "' AND "
	Else
		If lSe5MsFil
			cQuery 	+= "SE5.E5_MSFIL = '" + Iif(lUnidNeg, cFilSe5, cFilAnt) + "' AND "					
		Else	
			cQuery 	+= "SE5.E5_FILORIG = '" + Iif(lUnidNeg, cFilSe5, cFilAnt) + "' AND "	
		Endif	
	EndIf   		
	
	cQuery	 	+= "(SE5.E5_DATA >= '"+cDataIni+"' AND SE5.E5_DATA <= '"+cDataFim+"') AND "                                         

	//Exclui os titulos que possuem estorno
	cQuery	 	+= "SE5.E5_SEQ NOT IN "
	cQuery 		+= "(SELECT SE5AUX.E5_SEQ FROM "+RetSqlName("SE5")+" SE5AUX WHERE "
	cQuery		+= 		" SE5AUX.E5_PREFIXO = SE5.E5_PREFIXO AND "
	cQuery		+= 		" SE5AUX.E5_NUMERO = SE5.E5_NUMERO AND  "
	cQuery		+= 		" SE5AUX.E5_PARCELA = SE5.E5_PARCELA AND " 
	cQuery		+= 		" SE5AUX.E5_TIPO = SE5.E5_TIPO AND " 
	cQuery		+= 		" SE5AUX.E5_CLIFOR = SE5.E5_CLIFOR AND " 
	cQuery		+= 		" SE5AUX.E5_LOJA = SE5.E5_LOJA AND "     
	cQuery		+= 		" SE5AUX.E5_TIPODOC = 'ES' AND "
	cQuery		+= 		" SE5AUX.D_E_L_E_T_ = '' "
	cQuery 		+= ") AND "
	
	cTipoTit		:=	""
	cTipoTit		:=	MVABATIM + "|" + MV_CRNEG + "|" + MVPROVIS 
	cQuery 		+= "SE5.E5_TIPO NOT IN " + FormatIn(cTipoTit,If("|"$cTipoTit,"|",","))  + " AND "	
	
	cQuery		+= "((SE5.E5_MOTBX = 'FAT' AND SE5.E5_TIPODOC IN ('DC','JR','MT')) OR SE5.E5_MOTBX <> 'FAT') AND "	

	cQuery		+= "SE5.E5_MOTBX <> 'LIQ' AND "						
	
	If !Empty(cTpSe5)
		cQuery 	+= "SE5.E5_TIPODOC IN (" + cTpSe5 + ") AND " 
	Endif	

	cQuery		+= "SE5.E5_SITUACA <> 'C' AND "			
	cQuery		+= "SE5.D_E_L_E_T_ = '' "						
                          
	cQuery 		+= " ORDER BY FILIAL, PREFIXO, NUM, PARCELA, TIPO, CLIFOR, LOJA, TIPODOC"	

Else
	If cAlias == "SE1"

		cDtEmis	:=	"E1_EMISSAO"		
		cAliasQry:= "SE1QRY"
		aStruct 	:= SE1->(dbStruct())
		
		cQuery	:= "SELECT SE1." + Alltrim(cDtEmis) +  " EMISSAO, SE1.E1_VALOR VALOR, SE1.E1_ORIGEM ORIGEM, SE1.E1_CLIENTE CLIFOR, SE1.E1_TIPO TIPO, " 
		cQuery   += "SE1.E1_NUM NUM, SE1.E1_PREFIXO PREFIXO, SE1.E1_LOJA LOJA, SE1.E1_PARCELA PARCELA, SE1.E1_MULTNAT MULTNAT, "
		cQuery   += "SE1.E1_DESDOBR DESDOBR, SE1.E1_FILIAL FILIAL, SE1.E1_FILORIG FILORIG, SE1.E1_NATUREZ NATUREZ, SE1.E1_TXMOEDA TXMOEDA, SE1.E1_DECRESC DECRESC, "			   			
		cQuery   += "SE1.E1_VLCRUZ VLCRUZ, SE1.E1_MOEDA MOEDA, SE1.E1_BASEIRF BASEPIS, "			   			
			
		If !lNRastDSD  //	.And. !lEnvFatCr 
			cQuery   += "SE1.E1_FATPREF FATPREF, SE1.E1_FATURA FATURA, SE1.E1_TIPOFAT TIPOFAT,  "			   							
		Endif
			
		cQuery   += "SE1.E1_NUMPRO NUMPRO, SE1.E1_INDPRO INDPRO,"			   			
		cQuery   += "SE1.E1_TPDESC TPDESC, "		
	
	ElseIf cAlias == "SE2"
	
		cDtEmis	:=	"E2_EMISSAO"				
		cAliasQry:= "SE2QRY"
		aStruct 	:= SE2->(dbStruct())	  
	   
		If lEnvDesd 
			cDtEmis	:=	"E2_BAIXA"
		Endif                       		
			
		cQuery	:= "SELECT SE2." + Alltrim(cDtEmis) + " EMISSAO, SE2.E2_VALOR VALOR, SE2.E2_ORIGEM ORIGEM, SE2.E2_FORNECE CLIFOR, SE2.E2_TIPO TIPO, " 						
		cQuery   += "SE2.E2_NUM NUM, SE2.E2_PREFIXO PREFIXO, SE2.E2_LOJA LOJA, SE2.E2_PARCELA PARCELA, SE2.E2_MULTNAT MULTNAT, SE2.E2_VENCTO VENCTO, "
		cQuery   += "SE2.E2_DESDOBR DESDOBR, SE2.E2_FILIAL FILIAL, SE2.E2_FILORIG FILORIG, SE2.E2_NATUREZ NATUREZ, SE2.E2_TXMOEDA TXMOEDA, "			      
		cQuery   += "SE2.E2_VLCRUZ VLCRUZ, SE2.E2_MOEDA MOEDA, SE2.E2_BASEPIS BASEPIS, SE2.E2_STATUS STATUS, SE2.E2_BASEIRF BASEIRF, "			   			
		cQuery   += "SE2.E2_VRETPIS VRETPIS, SE2.E2_VRETCOF VRETCOF, SE2.E2_VRETCSL VRETCSL, SE2.E2_VRETINS VRETINS, SE2.E2_VRETISS VRETISS, SE2.E2_VRETIRF VRETIRF, "			   					
		cQuery   += "SE2.E2_FATURA FATURA,SE2.E2_FATFOR FATFOR, SE2.E2_FATLOJ FATLOJ, SE2.E2_TIPOFAT TIPOFAT, SE2.E2_FATPREF FATPREF, "			   					
		cQuery   += "SE2.E2_NUMPRO NUMPRO, SE2.E2_INDPRO INDPRO,"			   			
	   	
	EndIf 
	
	cQuery 		+= "SED.ED_APURPIS APURPIS, SED.ED_APURCOF APURCOF, SED.ED_PCAPPIS PCAPPIS,SED.ED_PCAPCOF PCAPCOF, "
	cQuery 		+= "SED.ED_CONTA EDCONTA, SED.ED_CDRECA CDRECA, SED.ED_CDDEDA CDDEDA, "	
	cQuery 		+= "SED.ED_NATJR NATJR, SED.ED_NATDC NATDC, SED.ED_NATMT NATMT, "
	cQuery 		+= "SED.ED_TABCCZ TABCCZ, SED.ED_CODCCZ CODCCZ, SED.ED_GRUCCZ GRUCCZ,SED.ED_DTFCCZ DTFCCZ, "
	
	//CST PIS
	cQuery	+= "SED.ED_CSTPIS CSTPIS, "
	//CST COFINS
	cQuery	+= "SED.ED_CSTCOF CSTCOF, "
		
	If cAlias == "SE1"
		cQuery		+= "SE1.R_E_C_N_O_ RECNO FROM "
		cQuery 		+= RetSqlName(cAlias) + " SE1, "
		cQuery 		+= RetSqlName("SA1") + " SA1, "
	ElseIf cAlias == "SE2" 
		cQuery		+= "SE2.R_E_C_N_O_ RECNO FROM "
		cQuery 		+= RetSqlName(cAlias) + " SE2, "
		cQuery 		+= RetSqlName("SA2") + " SA2, "
	EndIf
		
	cQuery 		+= RetSqlName("SED") + " SED  "
	cQuery 		+= "WHERE"
	
	//Somente natureza que apure Pis ou Cofins e que tenha codigo de receita analitico ou codigo de deducao analitico.
	cQuery 		+= "(SED.ED_APURCOF <> '' OR SED.ED_APURPIS <> '') AND "
	cQuery 		+= "(SED.ED_CDRECA <> '' OR  SED.ED_CDDEDA <> '') AND "
	
	If cAlias == "SE1"
		
		cTipoTit		:=	""
		cTipoTit		:=		MVTAXA + "|" + MVPROVIS + "|" + MVABATIM + "|" + "PR|PRE" 				
		cQuery 		+= "SE1.E1_TIPO NOT IN " + FormatIn(cTipoTit,If("|"$cTipoTit,"|",",") ) + " AND "      	
	
		cQuery 		+= "SE1.E1_ORIGEM NOT IN ('FINA460 ','FINA280 ') AND " //Fatura ou Liquidacao  
			
		cQuery 		+= "SED.ED_CODIGO = SE1.E1_NATUREZ AND "			
		cQuery 		+=	"SED.ED_FILIAL='" + xFilial("SED") + "' AND " 			
		cQuery 		+=	"SA1.A1_FILIAL='" + xFilial("SA1") + "' AND " 			
											 
		If !Empty( Iif( lUnidNeg, FWFilial("SE1") , xFilial("SE1") ) )
			cQuery 	+= "SE1.E1_FILIAL = '"  + xFilial("SE1") + "' AND "
		Else
			If lSe1MsFil
				cQuery 	+= "SE1.E1_MSFIL = '" + Iif(lUnidNeg, cFilSe1, cFilAnt) + "' AND "
			Else	
				cQuery 	+= "SE1.E1_FILORIG = '" + Iif(lUnidNeg, cFilSe1, cFilAnt) + "' AND "	
			Endif									
				
		EndIf   
			
		If !lNRastDSD	
			cQuery	+= "((SE1.E1_DESDOBR = '1' AND SE1.E1_PARCELA <> '' ) OR "						
			cQuery	+= " SE1.E1_DESDOBR <> '1') AND  "											 							
		Endif		
			
		cQuery	+= "(SE1." + Alltrim(cDtEmis) + " BETWEEN '"+cDataIni+"' AND '"+cDataFim+ "') AND "						
		cQuery 	+= "SA1.A1_COD = SE1.E1_CLIENTE AND " 
		cQuery 	+= "SA1.A1_LOJA = SE1.E1_LOJA AND " 
		cQuery 	+= "SA1.D_E_L_E_T_ = '' AND " 
		cQuery 	+= "SE1.D_E_L_E_T_ = '' AND "
		cQuery 	+= "SED.D_E_L_E_T_ = '' "
		
	ElseIf cAlias == "SE2" 
			                                                 
		cTipoTit		:=	""
		cTipoTit		:=	MVTAXA + "|" + MVPROVIS + "|" + MVABATIM + "|" + "PR|PRE" 				
		cQuery 		+= "SE2.E2_TIPO NOT IN " + FormatIn(cTipoTit,If("|"$cTipoTit,"|",",") ) + " AND "      			
				      
		cQuery 	+= "SED.ED_CODIGO = SE2.E2_NATUREZ AND "						
		cQuery 	+=	"SED.ED_FILIAL='" + xFilial("SED") + "' AND " 			
		cQuery 	+=	"SA2.A2_FILIAL='" + xFilial("SA2") + "' AND " 			
	      
		If !Empty( Iif( lUnidNeg, FWFilial("SE2") , xFilial("SE2") ) )
			cQuery 	+= "SE2.E2_FILIAL = '"  + xFilial("SE2") + "' AND "
		Else
			If lSe2MsFil
				cQuery 	+= "SE2.E2_MSFIL = '" + Iif(lUnidNeg, cFilSe2, cFilAnt) + "' AND "					
			Else	
				cQuery 	+= "SE2.E2_FILORIG = '" + Iif(lUnidNeg, cFilSe2, cFilAnt) + "' AND "	
			Endif	
		EndIf   
	
		If !lEnvDesd //Query da tabela SE2 que nao seleciona desdobramento, ou seja, titulos por data de emissao.					
			cQuery		+= " SE2.E2_DESDOBR <> 'S' AND "														
			lEnvDesd	:= .T.					
		Else// Query somente para os desdobramentos da tabela SE2 por data de baixa. 							
			cQuery	+= " (SE2.E2_DESDOBR = 'S' AND SE2.E2_BAIXA <>'' AND SE2.E2_STATUS = '') AND "						
		Endif		
	      
		cQuery 	+= " SE2.E2_ORIGEM NOT IN ('FINA565 ','FINA290 ') AND " 	//Fatura ou Liquidacao 	
		cQuery	+= "(SE2." + cDtEmis + " BETWEEN '"+cDataIni+"' AND '" +cDataFim+ "') AND "			
		
		cQuery 	+= "SA2.A2_COD = SE2.E2_FORNECE AND " 
		cQuery 	+= "SA2.A2_LOJA = SE2.E2_LOJA AND " 
		cQuery 	+= "SA2.D_E_L_E_T_ = '' AND " 
		cQuery 	+= "SE2.D_E_L_E_T_ = '' AND "
		cQuery 	+= "SED.D_E_L_E_T_ = ''"   
	Endif
Endif		

cQuery 		:= ChangeQuery(cQuery)
                 
dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)

For nX := 1 To Len(aStruct)
	If aStruct[nX][2] <> "C" 
		TcSetField(cAliasQry,aStruct[nX][1],aStruct[nX][2],aStruct[nX][3],aStruct[nX][4])
	EndIf
Next nX

EndIf

Return


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINSPDBLCI

Funcão para retornar os títulos que compoem o bloco F100 do SPED PIS/COFINS.
Arquivo anterior: MATXATU.PRX

@Author	TOTVS
@since	09/01/2014
/*/
//-----------------------------------------------------------------------------------------------------
Function FinSpdBlcI(nMesRef,nAnoRef,cAliasBlcI)

	Local cAliasQry	:= ""
	Local nA		  		:= 0
	Local nX				:= 0 
	Local nValorPis	:= 0
	Local nValorCof	:= 0    
	Local dLastDay 	:= ""
	Local cMotBx		:= SuperGetMv("MV_MTBXSD",,"")	

	//ARQUIVO TEMPORARIO
	Local aCampos		:= {}
	Local aTam     	:= {}
	Local cChave		:=	""
	Local cIndTmp  	:=	""
	Local cNome			:= ""

	//DESCONTOS, JUROS E MULTAS
	Local aNatNTrib	:= {}
	Local nDescBx		:=	0
	Local nDescBxI		:=	0
	Local nDescBxC		:=0
	Local aRecNTrib 	:= {}
	Local nVrDescInc	:=	0 //Valor do desconto incondicional referente ao campo E1_TPDESC (Legado)
	Local lEnvReg		:=	.F.
	Local aAreaSED		:=	{}
	Local nI				:=	0
	Local nJ				:=	0
	Local aAlias		:= {"SE5","SE1","SE2","SE2"}
	Local aRegSped		:=	{}
	Local aAreaSEV		:=	{}
	Local aMotBx 		:= ReadMotBx()
	Local lBxOk			:=	.T.   
	Local nVrRateio	:=	0

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Parametro que permite ao usuario utilizar o desdobramento³
	//³da maneira anterior ao implementado com o rastreamento.  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Local cDataIni		:=	""
	Local cDataFim		:=	""

	Local cCstPis		:=	""
	Local cCstCof		:=	""
	Local lEnvBaseP		:=	.T. //Enviar ou nao base de Pis dependendo do codigo de CST.
	Local lEnvBaseC		:=	.T. //Enviar ou nao base de Cofins dependendo do codigo de CST.
	Local nBase			:=	0
	Local nMoeda		:= 0
	Local nProp			:= 0
	Local cChaveBx		:= cChArray	:= ""
	Local lBaseImp		:=	.T. 		// Nf possui valor de base de imposto.    
	Local nBasePis		:=	0
	Local aBasePis		:=	{}                  
	Local lTitRet		:=	.F.		//Titulo retido em outro ou que retem outro.											
	Local nVlMinImp	:= IIF(dDataBase > dLastPcc, GetNewPar("MV_VL13137",10), GetNewPar("MV_VL10925",5000))
	Local cMoeda		:=	""                        
	Local cData			:= ""	
	Local nVrCanc		:= 0
	Local aAreaSE5		:=	{}
	Local cChaveSE5	:= ""
	Local lRecIss	  	:=	.F.
	Local lMVDescIss	:=	GetNewPar("MV_DESCISS",.F.)
	Local lRetFat		:=	.T.
	Local cNatJr	:= "" //Natureza de Juros
	Local cNatMT	:= "" //Natureza de Multa
	Local cNatDc	:=	"" //Natureza de Desconto
	Local aRec		:= {}	
	Local nStatus	:= 0				
	Private lEnvDesd:= .F. //Diferencia query da tabela SE2 que seleciona somente desdobramentos.						

	DEFAULT nMesRef := Month(dDataBase)
	DEFAULT nAnoRef := Year(dDataBase)

	If cPaisLoc == "BRA"

	cDataIni := StrZero(nAnoRef,4)+StrZero(nMesRef,2)+"01"
	dLastDay := LastDay(Ctod("01/"+StrZero(nMesRef,2)+"/"+StrZero(nAnoRef,4))) 
	cDataFim := StrZero(nAnoRef,4)+StrZero(nMesRef,2)+StrZero(Day(dLastDay),2)
		
	dbSelectArea("SED")

	If _oFINXSPD3 <> Nil	
		nStatus := TCSQLEXEC("DELETE FROM "+__cFin3Name)

		cAliasBlcI:=_oFINXSPD3:GetAlias()//Atualiza nome do Alias, pois vem GetNextAlias via A001BlocoI() (FISA001)
		if nStatus < 0 .Or. SELECT(cAliasBlcI)<=0 
			_oFINXSPD3:Delete()
			_oFINXSPD3 	:= Nil
			__cFin3Name := ""
		Else
			(cAliasBlcI)->(DBGOTO(1))
		Endif
	Endif

	If _oFINXSPD3 == Nil
		aCampos := {}
		aTam:=TamSX3("ED_CDRECA")
		AADD(aCampos,{"CDRECA"  ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("ED_CDDEDA")
		AADD(aCampos,{"CDDEDA"  ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("E5_VALOR")
		AADD(aCampos,{"VALOR"   ,"N",aTam[1],aTam[2]})

		aTam:=TamSX3("ED_CSTPIS")
		AADD(aCampos,{"CSTPIS"   ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("ED_PCAPPIS")
		AADD(aCampos,{"ALIQPIS"   ,"N",aTam[1],aTam[2]})
		aTam:=TamSX3("E1_VALOR")
		AADD(aCampos,{"BASEPIS"   ,"N",aTam[1],aTam[2]})
		aTam:=TamSX3("E1_VALOR")
		AADD(aCampos,{"VRPIS"   ,"N",aTam[1],aTam[2]})

		aTam:=TamSX3("ED_CSTCOF")
		AADD(aCampos,{"CSTCOF"   ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("ED_PCAPCOF")
		AADD(aCampos,{"ALIQCOF"   ,"N",aTam[1],aTam[2]})
		aTam:=TamSX3("E1_VALOR")
		AADD(aCampos,{"BASECOF"   ,"N",aTam[1],aTam[2]})
		aTam:=TamSX3("E1_VALOR")
		AADD(aCampos,{"VRCOF"   ,"N",aTam[1],aTam[2]})
						
		aTam:=TamSX3("ED_CONTA")
		AADD(aCampos,{"CONTA"   ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("ED_CODIGO")
		AADD(aCampos,{"NATUREZ"  ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("ED_TABCCZ")
		AADD(aCampos,{"TABCCZ"  ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("ED_CODCCZ")
		AADD(aCampos,{"CODCCZ"  ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("ED_GRUCCZ")
		AADD(aCampos,{"GRUCCZ"  ,"C",aTam[1],aTam[2]})
		aTam:=TamSX3("ED_DTFCCZ")
		AADD(aCampos,{"DTFCCZ"  ,"C",8,aTam[2]})                                            

		AADD(aCampos,{"RECNO"  ,"N",10,0})
		AADD(aCampos,{"ALIAS"  ,"C",3,0})
		//campos do processo referencial criados nas tabelas SE1 e SE2. 		
		aTam:=TamSX3("E1_NUMPRO")				
		AADD(aCampos,{"NUMPRO"   ,"C",aTam[1],aTam[2]})					
		aTam:=TamSX3("E1_INDPRO")
		AADD(aCampos,{"INDPRO"   ,"C",aTam[1],aTam[2]})     

		cChave   	:= "CSTPIS+CSTCOF"
		cIndTmp		:= CriaTrab(Nil,.F.)
		_oFINXSPD3 := FWTemporaryTable():New( cAliasBlcI )  
		_oFINXSPD3:SetFields(aCampos) 	
		_oFINXSPD3:AddIndex(cIndTmp, StrToKarr2( cChave, "+")) 	
		_oFINXSPD3:Create()

		__cFin3Name := _oFINXSPD3:GetRealName()
	EndIF

	DbSelectArea(cAliasBlcI)
	DbSetOrder(1)

	aRecNTrib	:=	{}	
				
	For nA:= 1 to Len(aAlias)
		
		If aAlias[nA] == "SE1"
			cAliasQry	:= "SE1QRY"
		Elseif aAlias[nA] == "SE2"
			cAliasQry	:= "SE2QRY"
		Elseif aAlias[nA] == "SE5"
			cAliasQry	:= "SE5QRY"	
		Endif

		BlocoITop(aAlias[nA],cAliasQry,cDataIni,cDataFim)	
			
		dbSelectArea(cAliasQry) 

		While !(cAliasQry)->(Eof()) 
				
			lEnvReg		:=	.F.
			aRegSped		:=	{}						
			lSpdMt100 	:= .F.
			lSpdMt460 	:= .F.
			nProp 		:= 0
			cMoeda		:=	""                        
			aRec		:= {}                    
				
			If aAlias[nA] == "SE5" .And. (cAliasQry)->RECPAG == "R"	//SE1	 				   
				//Desconto Condicional em titulo a receber nao deve ser enviando no SPED PIS/COFINS.
				If(cAliasQry)->TIPODOC $ "DC_D2"
					If (cAliasQry)->TPDESC = "C"				     	
							(cAliasQry)->(Dbskip())
							Loop
						Endif
				Endif					
			Endif		      
			
			//Faturas para titulo a pagar...
			If	(aAlias[nA] = "SE2" .And. (cAliasQry)->DESDOBR == "S")
			lRetFat	:=	.T.
				If !Empty((cAliasQry)->FATURA)
					lRetFat	:= VerFatF100(cAliasQry,aAlias[nA])				
				Endif
				If !lRetFat                     
					(cAliasQry)->(dbSkip())
					Loop		
				Endif
			Endif				
					
			If ("SE5" $ cAliasQry) 			
				If ("SE5" $ cAliasQry)
				cMoeda	:= (cAliasQry)->MOEDA 
				Endif										
				
				If cMoeda $ ("M1;R")
					nMoeda := 1
				Elseif cMoeda $ ("M")
					nMoeda := Val(SUBSTR( cMoeda ,2,1))
				Else
					nMoeda := Val( cMoeda )
				Endif
				
				If nMoeda > 1 
					nProp 	:= 1 // movimentos de não tributaveis e aplicações e emprestimo não tem proporcionalização  //(cAliasQry)->VALOR / (cAliasQry)->BASEPIS
				Endif
			Else			
				nMoeda 	:= (cAliasQry)->MOEDA
				cChave	:=	((cAliasQry)->PREFIXO+ (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)-> CLIFOR + (cAliasQry)->LOJA )            
				aBasePis	:=	{}
				aBasePis := FinRepBase(cAliasQry,nMoeda,cChave)
				nBasePis	:=	aBasePis[1] //Valor base para calculo do Pis e Cofins...
												
				If aAlias[nA] = "SE1" .And. aBasePis[1] == 0 .And. aBasePis[2] == 0//Tit. a Rec. originado do juridico com natureza que retem e apura PIS e COFINS mas nao gera os impostos nao devem ser enviados.
					(cAliasQry)->(dbSkip())
					Loop				
				Endif				
												
				If nMoeda > 1 
					If aAlias[nA] $ "SE1_SE2" .And. (cAliasQry)->TXMOEDA == 0
						nProp := xMoeda(nBasePis,(cAliasQry)->MOEDA, 1,STOD((cAliasQry)->EMISSAO)) / nBasePis
					Else
						If	aAlias[nA] = "SE2"   
							nProp := (cAliasQry)->TXMOEDA						
						Else
							nProp := (cAliasQry)->VLCRUZ / nBasePis
						Endif	
					Endif					
				Endif							  													
			Endif	     							
				
			nVrCanc	:=	0		
			cNatJr		:= ""
			cNatMt		:= ""
			cNatDc		:= ""		
			
			If aAlias[nA] == "SE5" 				
				
				If (cAliasQry)->RECPAG == "R"	//SE1	 			
					DbSelectArea("SE1")
					DbSetOrder(1)
					If SE1->(DbSeek(xFilial("SE1")+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO))) .And. SED->(Dbseek(xFilial("SED")+SE1->E1_NATUREZ))
						If SE1->E1_TIPO $ (MVPROVIS,'PR ','PRE')
							(cAliasQry)->(Dbskip())
							Loop
						Endif
						//Natureza configurada para apuracao.		
						If	(Empty(SED->ED_APURCOF) .Or. Empty(SED->ED_APURPIS))
							(cAliasQry)->(Dbskip())
							Loop
						Endif		
						
						//Natureza configurada para Bloco I.		
						If	(Empty(SED->ED_CDRECA) .And. Empty(SED->ED_CDDEDA))
							(cAliasQry)->(Dbskip())
							Loop
						Endif						
						
						//Verificando naturezas referentes a Juros, Multa e Desconto.
						cNatJr	:= Alltrim(SED->ED_NATJR) //Juros
						cNatMT	:= Alltrim(SED->ED_NATMT) //Multa
						cNatDc	:=	Alltrim(SED->ED_NATDC) //Desconto
						
						If !Empty(cNatJr) .And. SED->(Dbseek(xFilial("SED")+cNatJr))												
									Aadd(aNatNTrib,{"SE1",; //1
														SED->ED_CODIGO,; 	//2
														SED->ED_APURPIS,; //3
														SED->ED_APURCOF,; //4
														SED->ED_CSTPIS,; //5
														SED->ED_CSTCOF,; //6
														SED->ED_TABCCZ,; //7
														SED->ED_CODCCZ,; //8
														SED->ED_GRUCCZ,; //9
														Dtos(SED->ED_DTFCCZ),;//10
														SED->ED_CLASFIS,; //11
														SED->ED_INDCMLT,; //12
														SED->ED_PCAPPIS,; //13
														SED->ED_PCAPCOF,; //14
														SED->(Recno()),; //15
														SED->ED_CONTA,;//16
														SED->ED_CCD,;//17
														SED->ED_CCC,;//18
														"JR",SED->ED_NATJR,;// 19 E 20
														SED->ED_CDRECA,;// 21
														SED->ED_CDDEDA}) // 22																	
						Endif					
						
						//Multa 
						If !Empty(cNatMt) .And. SED->(Dbseek(xFilial("SED")+cNatMt))
													
								Aadd(aNatNTrib,{"SE1",; 
														SED->ED_CODIGO, SED->ED_APURPIS,SED->ED_APURCOF,; 
														SED->ED_CSTPIS, SED->ED_CSTCOF,	SED->ED_TABCCZ,; 
														SED->ED_CODCCZ, SED->ED_GRUCCZ,	Dtos(SED->ED_DTFCCZ),;
														SED->ED_CLASFIS, SED->ED_INDCMLT, SED->ED_PCAPPIS,;
														SED->ED_PCAPCOF,	SED->(Recno()), SED->ED_CONTA,;
														SED->ED_CCD,SED->ED_CCC,"MT",SED->ED_NATMT,;
														SED->ED_CDRECA,SED->ED_CDDEDA})											
						Endif
							
						//Desconto 					
						If !Empty(cNatDc) .And. SED->(Dbseek(xFilial("SED")+cNatDc))												
								Aadd(aNatNTrib,{"SE1",; //1
														SED->ED_CODIGO,SED->ED_APURPIS,	SED->ED_APURCOF,; 
														SED->ED_CSTPIS,SED->ED_CSTCOF,SED->ED_TABCCZ,; 
														SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
														SED->ED_CLASFIS,SED->ED_INDCMLT,SED->ED_PCAPPIS,; 
														SED->ED_PCAPCOF,SED->(Recno()),	SED->ED_CONTA,;
														SED->ED_CCD, SED->ED_CCC,"DC",SED->ED_NATDC,;
														SED->ED_CDRECA,SED->ED_CDDEDA})											
						Endif						
								
						//Manter o legado para clientes que utilizavam o campo E1_TPDESC. Pois, está o campo está sendo descontinuado.
						If (cAliasQry)->TIPODOC $ "DC_D2" //Em caso de descontos incondicionais de titulos a receber o desconto nao deve ser enviado.
							If SE1->E1_TPDESC == "I" .And. SE1->E1_DECRESC > 0
								nVrDescInc	:=	SE1->E1_DECRESC
							Endif
						Endif							
					Else				
						(cAliasQry)->(Dbskip())
						Loop																								
					Endif				   
					
					lEnvReg		:=	.T.																	   					
					cChaveBx		:=	(cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA 
					cChArray		:= xFilial("SE1") + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA					
					nDescBxI		:=	nDescBxC	:= 0  
					cData			:= "DATAM"				
					
					While  (cAliasQry)->( !EoF()) .AND. cChaveBx ==  ( (cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) 	
						
						If (cAliasQry)->TIPODOC $ "JR_MT_J2_M2_CM_C2"					
							//Juros, Multas e Variacoes cambiais devem ser enviados em registros separados.				
							aAdd(aRegSped,{"SE1","1","R",(cAliasQry)->VALOR,100,;//5
												(cAliasQry)->(CLIFOR+LOJA),(cAliasQry)->&cData,'',; //8
												(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
												(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
												(cAliasQry)->LOJA,(cAliasQry)->TIPODOC})	 						 										
							aAdd(aRec,{aAlias[nA],(cAliasQry)->RECNO}) 						 										
						
						ElseIf(cAliasQry)->TIPODOC $ "DC_D2"
							//Descontos Incondicionais devem ser subtraidos do valor da base do titulo.			     	
							If (cAliasQry)->TPDESC = "I"				     	
								nDescBxI	+= (cAliasQry)->VALOR																	     							 							
						Endif  	
					Endif			         
					(cAliasQry)->(Dbskip())			            
					Enddo	
					
					If nDescBxI+nVrDescInc > 0 
						aAdd(aRecNTrib,{cChArray,(nDescBxI+nVrDescInc),0})//Chave + Desconto Incondicional				
					Endif							                                                              
					
					If Len(aRegSped) > 0
						lEnvReg	:=	.T.																	
					Else
						Loop
					Endif
						
				ElseIf (cAliasQry)->RECPAG == "P"	//SE2
					DbSelectArea("SE2")
					DbSetOrder(1)
									
					cNatJr	:=	""
					cNatMt	:=	""
					cNatDc	:=	""
														
					If SE2->(DbSeek(xFilial("SE2")+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO))) .And. SED->(Dbseek(xFilial("SED")+SE2->E2_NATUREZ))					
						If SE2->E2_TIPO $ (MVPROVIS,'PR ','PRE')
							(cAliasQry)->(Dbskip())
							Loop
						Endif                                                                     
						//Natureza configurada para apuracao
						If	(Empty(SED->ED_APURCOF) .Or. Empty(SED->ED_APURPIS))
							(cAliasQry)->(Dbskip())
							Loop
						Endif	
				
						//Natureza configurada para Bloco I.		
						If	(Empty(SED->ED_CDRECA) .And. Empty(SED->ED_CDDEDA))
							(cAliasQry)->(Dbskip())
							Loop
						Endif						
							
						//Verificando naturezas referentes a Juros, Multa e Desconto.					
						cNatJr	:= Alltrim(SED->ED_NATJR) //Juros
						cNatMt	:= Alltrim(SED->ED_NATMT) //Multa
						cNatDc	:=	Alltrim(SED->ED_NATDC) //Desconto
						
						If !Empty(cNatJr) .And. SED->(Dbseek(xFilial("SED")+cNatJr))												
								Aadd(aNatNTrib,{"SE2", SED->ED_CODIGO,;
														SED->ED_APURPIS,SED->ED_APURCOF,; 
														SED->ED_CSTPIS,SED->ED_CSTCOF,; 
														SED->ED_TABCCZ,SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
														SED->ED_CLASFIS,SED->ED_INDCMLT,SED->ED_PCAPPIS,SED->ED_PCAPCOF,; 
														SED->(Recno()),SED->ED_CONTA,SED->ED_CCD,SED->ED_CCC,"JR",SED->ED_NATJR,;
														SED->ED_CDRECA,SED->ED_CDDEDA})																
						Endif					
						
						//Multa
						If !Empty(cNatMt) .And. SED->(Dbseek(xFilial("SED")+cNatMt))												
								Aadd(aNatNTrib,{"SE2",SED->ED_CODIGO,SED->ED_APURPIS,SED->ED_APURCOF,; 
														SED->ED_CSTPIS,SED->ED_CSTCOF,SED->ED_TABCCZ,; 
														SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
														SED->ED_CLASFIS,SED->ED_INDCMLT,SED->ED_PCAPPIS,; 
														SED->ED_PCAPCOF,SED->(Recno()),	SED->ED_CONTA,;
														SED->ED_CCD,SED->ED_CCC,	"MT",SED->ED_NATMT,;
														SED->ED_CDRECA,SED->ED_CDDEDA})											
						Endif
							
						//Desconto
						If !Empty(cNatDc) .And. SED->(Dbseek(xFilial("SED")+cNatDc))												
								Aadd(aNatNTrib,{"SE2",SED->ED_CODIGO,;
														SED->ED_APURPIS,SED->ED_APURCOF,SED->ED_CSTPIS,SED->ED_CSTCOF,; 
														SED->ED_TABCCZ,SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
														SED->ED_CLASFIS,SED->ED_INDCMLT,SED->ED_PCAPPIS,SED->ED_PCAPCOF,; 
														SED->(Recno()),SED->ED_CONTA,SED->ED_CCD,SED->ED_CCC,"DC",;
														SED->ED_NATDC,SED->ED_CDRECA,SED->ED_CDDEDA})											
						Endif																																																													
					Endif	 
					
					//De acordo com a definicao do Fiscal no caso de titulo a pagar devo somente calcular o valor para apuracao e enviar somente um titulo.			   								
					cChaveBx		:=	(cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA 
					cChArray		:= xFilial("SE2") + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA					
					nDescBxI		:=	nDescBxC	:=	 0  
					While  (cAliasQry)->( !EoF()) .AND. cChaveBx ==  ( (cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA )														
						
						If (cAliasQry)->TIPODOC $ "JR_MT_J2_M2_CM_C2"					
							//Juros, Multas e Variacoes cambiais devem ser enviados em registros separados.				
							aAdd(aRegSped,{"SE2","2","P",(cAliasQry)->VALOR,100,;//5
												(cAliasQry)->(CLIFOR+LOJA),(cAliasQry)->&cData,'',; //8
												(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
												(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
												(cAliasQry)->LOJA,(cAliasQry)->TIPODOC})	 						 										
							aAdd(aRec,{aAlias[nA],(cAliasQry)->RECNO})
						Endif					
						
						If(cAliasQry)->TIPODOC $ "DC_D2" 
																						
							//Desconto Condicional para titulo a pagar deve ser levado em linha separada no bloco.					   				     					     	
							If (cAliasQry)->TPDESC = "C"                                          				     						     	  	
						
							nDescBxC	+= (cAliasQry)->VALOR																	     							 	
									
								cData	:= "DATAM"
		
								aAdd(aRegSped,{"SE2","2","P",(cAliasQry)->VALOR,100,;//5
										(cAliasQry)->CLIFOR+(cAliasQry)->LOJA,(cAliasQry)->&cData,'',; //8
										(cAliasQry)->FILIAL,	(cAliasQry)->PREFIXO,(cAliasQry)->NUM,; // 11
										(cAliasQry)->PARCELA,(cAliasQry)->TIPO,(cAliasQry)->CLIFOR,; // 14
										(cAliasQry)->LOJA,(cAliasQry)->TIPODOC})	 						 	
								aAdd(aRec,{aAlias[nA],(cAliasQry)->RECNO})
																
						ElseIf  (cAliasQry)->TPDESC = "I"  
								//Desconto Incondicional deve ser subtraido do valor da base de calculo para a apuracao do titulo.		
							nDescBxI	+= (cAliasQry)->VALOR													
							Endif  	
					Endif			         
					
					(cAliasQry)->(Dbskip())			            
					Enddo	
					
					If nDescBxI > 0 
						aAdd(aRecNTrib,{cChArray,nDescBxI,nDescBxC}) //Chave + Desconto Incondicional + Desconto Condicional					
					Endif																			
					
					If Len(aRegSped) > 0
						lEnvReg	:=	.T.																	
					Else
						Loop
					Endif
					
				Endif	
			Else							
				lEnvReg	:=	.T.				
				lBxOk		:=	.T.
				
				If  aAlias[nA] $ "SE1_SE2" 
						
					If  (cAliasQry)->TIPO $ MV_CRNEG //NCC nao deve ser enviada no SPED PIS/COFINS.  		
						(cAliasQry)->(Dbskip())
						Loop													
					Endif															
						
					dbSelectArea("SE5")
					SE5 -> ( dbSetOrder ( 7 ) ) //FILIAL+PREFIXO+NUMERO+PARCELA+TIPO+CLIFOR+LOJA+SEQ
					SE5 -> ( dbSeek ( xFilial("SE5") + (cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA) ) )
				
					Do While ( SE5->(!Eof()) .And.;
						xFilial("SE5")+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA) == SE5->(E5_FILIAL+E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA))
							
						If !(Dtos(SE5->E5_DATA) >= cDataIni .And. Dtos(SE5->E5_DATA) <= cDataFim )				
							SE5->(Dbskip())
							Loop							
						Endif																	
							
						If SE5->E5_TIPODOC = 'ES' .Or. SE5->E5_MOTBX $ 'FAT_LIQ' 
							SE5->(dbSkip())
							Loop
						EndIf
				
						If SE5->E5_TIPO $ (MVABATIM+MV_CRNEG+MVPROVIS)
							SE5->(dbSkip())
							Loop
						EndIf
					
						If SE5->E5_SITUACA = 'C' 
							SE5->(dbSkip())
							Loop
						EndIf		        
							
						If TemBxCanc(SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ),.T.)	
							SE5->(dbSkip())
							Loop							
						Endif														
							
						If aAlias[nA] = "SE1" .And. SE5->E5_TIPODOC = 'CP'  	//Compensacao com NCC e sem baixa cancelada.
							SA1->( Dbseek( xFilial("SA1") + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) )		                       
							lRecIss := (SA1->A1_RECISS == "1" .And. lMVDescIss)
							aAreaSE5		:= 	SE5->(GetArea())   
							cChaveSE5	:=	SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO+SE5->E5_LOJA																
							SE5->(Dbsetorder(10)) // E5_FILIAL+E5_DOCUMEN
							If SE5->(Dbseek(xFilial("SE5")+ cChaveSE5)) .And. SE5->E5_TIPO $ MV_CRNEG   					
								nVrCanc := SE5->E5_VALOR 
							Endif								                    
							SE5 -> ( dbSetOrder ( 7 ) ) //FILIAL+PREFIXO+NUMERO+PARCELA+TIPO+CLIFOR+LOJA+SEQ								
							SE5->(RestArea(aAreaSE5))
							SE5->(dbSkip())
							Loop														
						ElseIf SE5->E5_MOTBX <> 'NOR'  
							nI :=  Ascan(aMotBx, {|x| Substr(x,1,3) == Upper(SE5->E5_MOTBX) })
							If SE5->E5_MOTBX $ cMotBx .And. nI > 0 
								If Substr(aMotBx[nI],26,01) == "N"
									lBxOk	:=	.F.  
									Exit																																										
								Else
									Exit
								Endif									
							Else
								Exit
							Endif 	
						Else
							SE5->(dbSkip())
							Loop
						Endif																												
					Enddo						
				Endif																
					
				If  !lBxOk 
					(cAliasQry)->(Dbskip())
					Loop													
				Endif												
				
				If aAlias[nA] $ "SE1_SE2"	.And. (cAliasQry)->MULTNAT = "1"			
					aAreaSEV := SEV->(GetArea())
					DbSelectArea("SEV")
					DbSetOrder(1)
					//Verificar se o titulo possui multiplas naturezas.
					SEV->(DbSeek(xFilial("SEV")+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA)))
					While SEV->(EV_PREFIXO+EV_NUM+EV_PARCELA+EV_TIPO+EV_CLIFOR+EV_LOJA) ==;
							(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO+CLIFOR+LOJA) .And. !SEV->(EOF())					
							
							nVrRateio	:=	0
							
							If SEV->EV_IDENT <> "1" // 1=Rateio de Inclusao 2=Rateio de Baixa 
								SEV->(Dbskip())
								Loop							
							Endif
							
							If	(aAlias[nA] == "SE2" .And. SEV->EV_RECPAG == "P") .Or. (aAlias[nA] == "SE1" .And. SEV->EV_RECPAG == "R") 							
								aAreaSED := SED->(GetArea()) //Caso a natureza apure Pis ou Cofins
								DbSelectArea("SED")							
								DbSetOrder(1)			
								If DbSeek(xFilial("SED")+ SEV->EV_NATUREZ) 
									If (!Empty(SED->ED_APURCOF) .Or. !Empty(SED->ED_APURPIS))
										
										If aAlias[nA] == "SE1"										
											If nMoeda > 1
												nVrRateio	:= Round((SEV->EV_VALOR/(cAliasQry)->VALOR) * (cAliasQry)->VLCRUZ,2)
											Else
												nVrRateio	:= SEV->EV_VALOR										
											Endif											
										ElseIf aAlias[nA] == "SE2"  																					
											If nMoeda > 1 
												If (cAliasQry)->TXMOEDA == 0
													nVrRateio	:=	xMoeda((nBasePis*SEV->EV_PERC),(cAliasQry)->MOEDA, 1,STOD((cAliasQry)->EMISSAO)) 
												Else
													nVrRateio	:=	Round((nBasePis*SEV->EV_PERC)*(cAliasQry)->TXMOEDA,2)												
												Endif	
											Else 
												nVrRateio	:=	Round((nBasePis*SEV->EV_PERC),2)																							
											Endif																					
										Endif									
										
										aAdd(aRegSped,{aAlias[nA],; //1
															(cAliasQry)->MULTNAT,;//2
															SEV->EV_RECPAG,;//3
															nVrRateio,;//4
															SEV->EV_PERC,;//5
															SED->ED_CODIGO,;//6
															SED->ED_APURPIS,;//7
															SED->ED_APURCOF,;//8
															SED->ED_CSTPIS,;//9
															SED->ED_CSTCOF,;//10
															SED->ED_PCAPPIS,;//11
															SED->ED_PCAPCOF,;//12
															SED->ED_CLASFIS,;//13
															SED->ED_INDCMLT,;//14
															SED->ED_TABCCZ,;//15
															SED->ED_CODCCZ,;//16
															SED->ED_GRUCCZ,;//17
															Dtos(SED->ED_DTFCCZ),;//18
															SED->ED_CONTA,;//19
															SED->ED_CCD,;//20
															SED->ED_CCC,;//21
															SED->ED_CLASFIS,;//22
															SEV->EV_PERC,Iif ((aAlias[nA] == "SE1"	) .Or.  (aAlias[nA] == "SE2"),(cAliasQry)->NUMPRO,""),;//23 E 24
															Iif ((aAlias[nA] == "SE1") .Or.  (aAlias[nA] == "SE2"),(cAliasQry)->INDPRO,""),;//25
															Iif(!Empty(SED->ED_REDPIS) .And. Empty(SED->ED_PERCPIS),(SED->ED_REDPIS/100),0),;//26
															Iif(!Empty(SED->ED_REDCOF)	.And. Empty(SED->ED_PERCCOF),(SED->ED_REDCOF/100),0),;//27
															"",SED->ED_CDRECA, SED->ED_CDDEDA }) // 28, 29 e 30																																						
															
										aAdd(aRec,{aAlias[nA],(cAliasQry)->RECNO})
																																													
									Endif			
								
								Endif
								RestArea(aAreaSED)								        		
							Endif
							SEV->(Dbskip())
					Enddo
				RestArea(aAreaSEV)										
				Else //Nao trata de multiplas naturezas
					aAdd(aRegSped,{aAlias[nA],"2","",(cAliasQry)->VALOR,0,"","","","","","","","","","","","","","","","",""})					
					aAdd(aRec,{aAlias[nA],(cAliasQry)->RECNO})				
				Endif
				
				//Tit. a pagar ou receber preciso verificar se natureza contem nat. para desconto. 
				//Caso o titulo possua desc. incondicional será necessário para o abatimento na base do Pis e Cofins.		
				If aAlias[nA] == "SE1"	//SE1	 			
					DbSelectArea("SE1")
					DbSetOrder(1)
					If SE1->(DbSeek(xFilial("SE1")+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO))) .And. SED->(Dbseek(xFilial("SED")+SE1->E1_NATUREZ))
						If SE1->E1_TIPO $ (MVPROVIS,'PR ','PRE')
							(cAliasQry)->(Dbskip())
							Loop
						Endif			
					Else				
						(cAliasQry)->(Dbskip())
						Loop				
					Endif
				Endif
				
				If aAlias[nA] == "SE2"	//SE2 						
					DbSelectArea("SE2")
					DbSetOrder(1)																					
					If SE2->(DbSeek(xFilial("SE2")+(cAliasQry)->(PREFIXO+NUM+PARCELA+TIPO))) .And. SED->(Dbseek(xFilial("SED")+SE2->E2_NATUREZ))					
						If SE2->E2_TIPO $ (MVPROVIS,'PR ','PRE')
							(cAliasQry)->(Dbskip())
							Loop
						Endif                                                                    			
					Else
						(cAliasQry)->(Dbskip())
						Loop				
					Endif
				Endif
				
				//Natureza configurada para apuracao.		
				If	(Empty(SED->ED_APURCOF) .Or. Empty(SED->ED_APURPIS))
					(cAliasQry)->(Dbskip())
					Loop
				Endif		
						
				//Natureza configurada para Bloco I.		
				If	(Empty(SED->ED_CDRECA) .And. Empty(SED->ED_CDDEDA))
					(cAliasQry)->(Dbskip())
					Loop
				Endif						
				
				cNatDc	:=	Alltrim(SED->ED_NATDC) //Desconto
				
				//Desconto 					
				If !Empty(cNatDc) .And. SED->(Dbseek(xFilial("SED")+cNatDc))												
						
					If aAlias[nA] == "SE1"	//SE1													
						Aadd(aNatNTrib,{"SE1",; //1
											SED->ED_CODIGO,SED->ED_APURPIS,	SED->ED_APURCOF,; 
											SED->ED_CSTPIS,SED->ED_CSTCOF,SED->ED_TABCCZ,; 
											SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
											SED->ED_CLASFIS,SED->ED_INDCMLT,SED->ED_PCAPPIS,; 
											SED->ED_PCAPCOF,SED->(Recno()),	SED->ED_CONTA,;
											SED->ED_CCD, SED->ED_CCC,"DC",SED->ED_NATDC,;
											SED->ED_CDRECA,SED->ED_CDDEDA})											
					ElseIf aAlias[nA] == "SE2"	//SE2							
						Aadd(aNatNTrib,{"SE2",SED->ED_CODIGO,;
											SED->ED_APURPIS,SED->ED_APURCOF,SED->ED_CSTPIS,SED->ED_CSTCOF,; 
											SED->ED_TABCCZ,SED->ED_CODCCZ,SED->ED_GRUCCZ,Dtos(SED->ED_DTFCCZ),;
											SED->ED_CLASFIS,SED->ED_INDCMLT,SED->ED_PCAPPIS,SED->ED_PCAPCOF,; 
											SED->(Recno()),SED->ED_CONTA,SED->ED_CCD,SED->ED_CCC,"DC",;
											SED->ED_NATDC,SED->ED_CDRECA,SED->ED_CDDEDA})																						
					Endif					
				Endif							
			Endif
				
			If lEnvReg 			
				For nJ	:= 1 To Len(aRegSped)			             			
					If  (aAlias[nA] = "SE1" .And. (cAliasQry)->TIPO $ MVRECANT) .Or. (aAlias[nA] = "SE5" .And. (cAliasQry)->TIPODOC $ MVRECANT)						 		
						Loop
					Endif				
					
					If aAlias[nA] = "SE5" //Juros,Multas e Descontos				
						If Alltrim(aRegSped[nJ,3])=="R"	//SE1					
							If aRegSped[nJ,16] $ "JR_CM"					
								nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE1" .And. x[19]="JR" })					
							ElseIf aRegSped[nJ,16] = "MT"
								nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE1" .And. x[19]="MT" })						
							ElseIf aRegSped[nJ,16] = "DC"
								nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE1" .And. x[19]="DC" })
							Endif					
						ElseIf Alltrim(aRegSped[nJ,3])=="P"//SE2					
							If aRegSped[nJ,16] $ "JR_CM"					
								nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE2" .And. x[19]="JR" })					
							ElseIf aRegSped[nJ,16] = "MT"
								nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE2" .And. x[19]="MT" })						
							ElseIf aRegSped[nJ,16] = "DC"
								nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE2" .And. x[19]="DC" })
							Endif																				
						Endif	
						
						If nI == 0 //Nao possui natureza configurada para juros, multa ou desconto entao nao devo processar esse titulo.
							Loop					
						Endif																			
					ElseIf aAlias[nA] $ "SE1_SE2"//Desconto Incondicional	
						If aAlias[nA] == "SE1"
							nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE1" .And. x[19]="DC" })				
						ElseIf aAlias[nA] == "SE2"
							nI	:=	Ascan(aNatNTrib, {|x| x[1]= "SE2" .And. x[19]="DC" })					
						Endif
					Endif				
									
					(cAliasBlcI)-> (DbAppend())									
					
					If aAlias[nA] = "SE1"	// Codigo da Receita Analitico									
						(cAliasBlcI)->CDRECA	:=	If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,29],(cAliasQry)->CDRECA)
					ElseIf aAlias[nA] = "SE2" // Codigo da Deducao Analitoc													
						(cAliasBlcI)->CDDEDA	:=	If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,30],(cAliasQry)->CDDEDA)										
					ElseIf aAlias[nA] = "SE5"																		
						//If Alltrim(aRegSped[nJ,3]) == "R"	//SE1
							(cAliasBlcI)->CDRECA	:= aNatNTrib[nI,21]	
						//ElseIf Alltrim(aRegSped[nJ,3]) == "P"	//SE2
							(cAliasBlcI)->CDDEDA	:=	aNatNTrib[nI,22]
						//Endif																	
					Endif				
									
					cCstPis	:=	""	
					cCstCof	:=	""	
					lEnvBaseP 	:=  .T.
					lEnvBaseC 	:=  .T.
					lBaseImp	:=	.T.
										
					If aAlias[nA] $ "SE1_SE2"										
						cCstPis	:=	If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,9],(cAliasQry)->CSTPIS)
						cCstCof	:=	If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,10],(cAliasQry)->CSTCOF)										
						
						If aAlias[nA] = "SE1" .And. (cCstPis $ "07_08_09_49")  	
							lEnvBaseP	:=	.F.	
						Endif	
						If aAlias[nA] = "SE1" .And.	(cCstCof $ "07_08_09_49")
							lEnvBaseC	:=	.F.	
						Endif					
						If aAlias[nA] = "SE2" .And. (cCstPis $ "70_71_72_74_75_98")  							
							lEnvBaseP	:=	.F.						                                                                  
						Endif
						If aAlias[nA] = "SE2" .And.	(cCstCof $ "70_71_72_74_75_98")	
							lEnvBaseC	:=	.F.	
						Endif						
					ElseIf aAlias[nA] $ "SE5" 		
						cCstPis	:=	aNatNTrib[nI,5]	//CST PIS
						cCstCof	:=	aNatNTrib[nI,6]	//CST COFINS  		
						If (cAliasQry)->RECPAG == "R" .And. (cCstPis $ "07_08_09_49") //Tabela SE1
							lEnvBaseP	:=	.F.
						Endif	
						If (cAliasQry)->RECPAG == "R" .And. (cCstCof $ "07_08_09_49")	
							lEnvBaseC	:=	.F.
						Endif							
					Endif									
		
					If aAlias[nA] $ "SE5"																
						If !Empty(aNatNTrib[nI,3])
							nValorPis := Round(aRegSped[nJ,4] * (aNatNTrib[nI,13]/100),2) 
						Else
							nValorPis := 0
						Endif	

						If !Empty(aNatNTrib[nI,4])
							nValorCof := Round(aRegSped[nJ,4] * (aNatNTrib[nI,14]/100),2) 						 
						Else
							nValorCof := 0
						Endif											
					Else														
						
						nBase	:= nBasePis	 
							
						If (aAlias[nA] = "SE1" .And. (cAliasQry)->DESDOBR = "1")								
							nBase	:=	(cAliasQry)->VALOR								
						//Titulo a Receber o desconto incondicional será abatido na base das apuracoes.
							If (cAliasQry)->TPDESC == "I" .And. (cAliasQry)->DECRESC > 0 .And. nI > 0                        
							nBase	-= (cAliasQry)->DECRESC
							Endif		
						Endif

						If aRegSped[nJ,2] == "1" //Multiplas naturezas 
							If nMoeda = 1  .And. lBaseImp 
								nBase	:= nBasePis * aRegSped[nJ,23]
							Else
								nBase	:=	aRegSped[nJ,4]
							Endif   
								
							//Calculando reducao do valor em natureza que contenha somente apuracao de Pis e Cofins.			
							If aRegSped[nJ,26] > 0 //Reducao de Apuracao de PIS.
								nBase	:=	nBase	* aRegSped[nJ,26] 								
							ElseIf aRegSped[nJ,27] > 0 //Reducao de Apuracao de COFINS.
								nBase	:=	nBase	* aRegSped[nJ,27] 																
							Endif							
						Endif  
						
						nDescBx	:=	0 
						If aAlias[nA] = "SE2" //Titulo a pagar retido em outro.																			
							lTitRet	:=	.F.
							If nBase <= nVlMinImp 
								SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES	
								If SFQ->(DbSeek(xFilial("SFQ")+"SE2"+ (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ))               
									lTitRet	:=	.T. //Caso o titulo seja retido em outro.
								Endif														
							Endif					         							
								
							SFQ->(DbSetOrder(1)) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
							If SFQ->(DbSeek(xFilial("SFQ")+"SE2"+ SE2->E2_PREFIXO + SE2->E2_NUM + SE2->E2_PARCELA + SE2->E2_TIPO + SE2->E2_FORNECE + SE2->E2_LOJA))
								lTitRet	:=	.T.	//Caso o titulo seja titulo que retem outro.																	  	         	
							Endif											      			
				
							nX	:=	 Ascan(aRecNTrib, {|x| x[1] == ((cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) }) 
							If nX > 0 .And. nI > 0
							nDescBx	:=	If(aRegSped[nJ,2] == "1" .And. nMoeda = 1 ,(aRecNTrib[nX,2]*aRegSped[nJ,23]),aRecNTrib[nX,2])
							nBase	:= nBase - nDescBx 
							Endif														
						Endif                                                                    																	                     									                     							

						If aAlias[nA] = "SE1"					
							nX	:=	 Ascan(aRecNTrib, {|x| x[1] == ((cAliasQry)->FILIAL + (cAliasQry)->PREFIXO + (cAliasQry)->NUM + (cAliasQry)->PARCELA + (cAliasQry)->TIPO + (cAliasQry)->CLIFOR + (cAliasQry)->LOJA ) }) 
							If nX > 0	.And. nI > 0	
							nDescBx	:=	If(aRegSped[nJ,2] == "1" .And. nMoeda = 1 ,(aRecNTrib[nX,2]*aRegSped[nJ,23]),aRecNTrib[nX,2])
							nBase	:= (nBase - nDescBx )
							Endif																			
						Endif					

						If aAlias[nA] == "SE1"	.And. nVrCanc > 0
							nBase	:=	nBase - nVrCanc						
						Endif										 					
																	
						If aAlias[nA] $ "SE1_SE2" .And. aRegSped[nJ,2] == "1" .And. aRegSped[nJ,11] > 0
							nValorPis := Round(nBase * (aRegSped[nJ,11]/100),2)						
						ElseIf !Empty((cAliasQry)->APURPIS)
							nValorPis := Round(nBase * ((cAliasQry)->PCAPPIS/100),2)
						Else
							nValorPis := 0
						Endif													
						
						If aAlias[nA] $ "SE1_SE2" .And. aRegSped[nJ,2] == "1" .And. aRegSped[nJ,12] > 0
							nValorCof := Round(nBase * (aRegSped[nJ,12]/100),2) 
						ElseIf !Empty((cAliasQry)->APURCOF) 
							nValorCof := Round(nBase * ((cAliasQry)->PCAPCOF/100),2) 
						Else
							nValorCof := 0
						Endif				
					Endif																																
									
					//Valor								
					If aAlias[nA] = "SE1"  
						If aRegSped[nJ,2] == "1" 
							(cAliasBlcI)->VALOR  :=  aRegSped[nJ,4] - nDescBx				
						ElseIf nMoeda > 1
							(cAliasBlcI)->VALOR  := If((nBase*nProp) <> (cAliasQry)->VLCRUZ ,(cAliasQry)->VLCRUZ - nDescBx,nBase*nProp) // -- Valor						
						Else
							(cAliasBlcI)->VALOR  := (cAliasQry)->VALOR - nDescBx 	// -- Valor	  						
						Endif											
					ElseIf aAlias[nA] = "SE2"				 																				
						If	aRegSped[nJ,2] == "1" 
							(cAliasBlcI)->VALOR  := aRegSped[nJ,4] - nDescBx			
						Else 
							(cAliasBlcI)->VALOR  := If(nMoeda>1,nBase,If(lTitRet,aBasePis[1]-nDescBx,aBasePis[2]-nDescBx)) 							
						Endif											
					ElseIf aAlias[nA] = "SE5"	
						(cAliasBlcI)->VALOR := aRegSped[nJ,4]	- nDescBx									 
					Endif                                                                                      
				
					// CST Pis                 
					(cAliasBlcI)->CSTPIS  :=  cCstPis
					
					// Base Pis																			
					If aAlias[nA] $ "SE1_SE2"	
						If !lEnvBaseP											
							(cAliasBlcI)->BASEPIS  :=	0
						Else							
							(cAliasBlcI)->BASEPIS  := nBase 													
						Endif												
				ElseIf aAlias[nA] == "SE5"
						If !lEnvBaseP
							(cAliasBlcI)->BASEPIS  :=	0
						Else               
							(cAliasBlcI)->BASEPIS  := aRegSped[nJ,4]	// -- Base PIS															
						Endif				
					Endif																													
					
					// Aliquota Pis				
					If aAlias[nA] $ "SE1_SE2" .And. aRegSped[nJ,2] == "1" 
						(cAliasBlcI)->ALIQPIS  := aRegSped[nJ,11] 				
					ElseIf	aAlias[nA] $ "SE5"					
						(cAliasBlcI)->ALIQPIS  := aNatNTrib[nI,13]		
					Else
						(cAliasBlcI)->ALIQPIS  := (cAliasQry)->PCAPPIS 	
					Endif													
					
					(cAliasBlcI)->VRPIS  :=  nValorPis	// Valor Pis			

					//CST Cofins
					(cAliasBlcI)->CSTCOF  :=  cCstCof
						
					//Base Cofins				
					If aAlias[nA] $ "SE1_SE2"	
						If	!lEnvBaseC						
							(cAliasBlcI)->BASECOF  :=	0
						Else
							(cAliasBlcI)->BASECOF  := nBase// -- Base COFINS																																																		
						Endif												
					Else                    
						If !lEnvBaseC 
							(cAliasBlcI)->BASECOF  :=	0
						Else               
							(cAliasBlcI)->BASECOF  := aRegSped[nJ,4]// -- Base COFINS									
						Endif				
					Endif

					//Aliquota Cofins				
					If aAlias[nA] $ "SE1_SE2" .And. aRegSped[nJ,2] == "1" .And. aRegSped[nJ,12] > 0 //Aliquota COFINS
						(cAliasBlcI)->ALIQCOF  := aRegSped[nJ,12] 				
					ElseIf	aAlias[nA] $ "SE5"					
						(cAliasBlcI)->ALIQCOF  := aNatNTrib[nI,14]		
					Else					
						(cAliasBlcI)->ALIQCOF  := (cAliasQry)->PCAPCOF				
					Endif				
					
					(cAliasBlcI)->VRCOF :=  nValorCof            // -- Valor do COFINS																																							
									
					//Conta Contabil				
					If	aAlias[nA] $ "SE1_SE2" // Trata geracao de conta contabil
						(cAliasBlcI)->CONTA := If(aRegSped[nJ,2] == "1",aRegSped[nJ,19],(cAliasQry)->EDCONTA)	//-- Cod. Cta Analista Contabil						 					
					ElseIf	aAlias[nA] == "SE5"
						(cAliasBlcI)->CONTA := aNatNTrib[nI,16]	
					Endif																			
					
					//Processo Referencial
					If	(aAlias[nA] == "SE1") .Or.  (aAlias[nA] == "SE2")			
					If aRegSped[nJ,2] == "1"
							(cAliasBlcI)->NUMPRO :=	aRegSped[nJ,24] 
							(cAliasBlcI)->INDPRO :=	aRegSped[nJ,25]	
					Else
							(cAliasBlcI)->NUMPRO := (cAliasQry)->NUMPRO	
							(cAliasBlcI)->INDPRO := (cAliasQry)->INDPRO	
						Endif	
					Else					 
						(cAliasBlcI)->NUMPRO := ""   
						(cAliasBlcI)->INDPRO := ""   
					Endif																	
					
					//Natureza
					If	aAlias[nA] $ "SE1_SE2"							 	
						(cAliasBlcI)->NATUREZ := If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,6],(cAliasQry)->NATUREZ)	//-- Cod. Natureza					 										
					ElseIf	aAlias[nA] == "SE5"
						(cAliasBlcI)->NATUREZ := aNatNTrib[nI,2]	
					Else 
						(cAliasBlcI)->NATUREZ := ""   
					Endif																							  
					
					//Familia CCZ
					If	aAlias[nA] == "SE5"					
						(cAliasBlcI)->TABCCZ := aNatNTrib[nI,7] 			
						(cAliasBlcI)->CODCCZ := aNatNTrib[nI,8] 			
						(cAliasBlcI)->GRUCCZ := aNatNTrib[nI,9]			
						(cAliasBlcI)->DTFCCZ := aNatNTrib[nI,10]			
					Else 
						(cAliasBlcI)->TABCCZ := If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,15],(cAliasQry)->TABCCZ)
						(cAliasBlcI)->CODCCZ := If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,16],(cAliasQry)->CODCCZ)   
						(cAliasBlcI)->GRUCCZ := If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,17],(cAliasQry)->GRUCCZ)	
						(cAliasBlcI)->DTFCCZ := If(aRegSped[nJ,2] == "1" ,aRegSped[nJ,18],(cAliasQry)->DTFCCZ)	
					Endif						
					nValorPis 	:= 0
					nValorCof 	:= 0
					
					(cAliasBlcI)->ALIAS := aRec[nJ,1]
					(cAliasBlcI)->RECNO := aRec[nJ,2]
					
				Next																											
			EndIf 
									
			If !(aAlias[nA] == "SE5")	
				(cAliasQry)->(dbSkip())			
			Endif			
		EndDo
			
		
		(cAliasQry)->(dbCloseArea())

		
	Next nA

	Endif
  			
Return(cAliasBlcI)


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINSPDBLCI

Funcao para compor o valor da base para calculo dos impostos Pis e Cofins na geracao do bloco F100.
Arquivo anterior: MATXATU.PRX

@Author	Clovis Magenta
@since	31/07/2012
/*/
//-----------------------------------------------------------------------------------------------------
Function FinRepBase(cAliasQry,nMoeda,cChave,cFilSED,lPCCBx,lCalcIssBx)

Local nValBase 	:=	0	//Valor base para calculdo do PIS e COFINS. 
Local nValTit	:=	0	//Valor total do titulo gerado.
Local lDescISS 	:= .F.
Local lPCCBaixa	:= FPccBxCr()
Local aArea 	:= GetArea()
Local cIRPFBaixa:= ""
Local lEnvia	:= .T.

Default cFilSED		:= xFilial("SED")
Default lPCCBx 		:= SuperGetMv("MV_BX10925",.T.,"2") == "1" 
Default lCalcIssBx 	:= GetNewPar("MV_MRETISS","1") == "2"  	//Retencao do ISS pela emissao (1) ou baixa (2)

If __lIsBra
	Do Case
	
		Case "SE1" $ cAliasQry
			dbSelectArea("SE1")
			dbSetOrder(1)           
			If DbSeek( xFilial("SE1") + cChave )					 		 			 	
			 	nValBase	:=	0    		 	
			 	
			 	If "JURA" $ SE1->E1_ORIGEM //Gerado pelo Juridico com natureza que retem imposto mas nao gera imposto o titulo nao deve ser enviado.
			 		SED->(DbSetOrder(1))
					If SED->(DbSeek(xFilial("SED")+ SE1->E1_NATUREZ)) .And. !Empty(SED->ED_PERCPIS) .And. !Empty(SED->ED_PERCCOF) .And.;
						SE1->E1_PIS == 0 .And. SE1->E1_COFINS == 0 .And. SE1->E1_BASEPIS == 0 .And. SE1->E1_BASECOF == 0
						lEnvia	:=	.F.								   
			 		Endif		 		
			 	Endif		 	
			 		
			 	If !lEnvia
					nValBase	:=	nValTit	:=	0		 			 	
			 	Else		 						 			 	
				 	//Calculo inverso assim caso seja base reduzida ou normal o valor vai ser gerado correto.
				 	If SE1->E1_PIS > 0		   
						SED->(DbSetOrder(1))
						If SED->(MsSeek(cFilSED+ SE1->E1_NATUREZ)) .And. !Empty(SED->ED_PERCPIS) 
					   		nValBase	:=	SE1->E1_BASEPIS
				 		Endif
				 	Endif                       
				 	
				 	If nValBase == 0 .And. SE1->E1_COFINS > 0
						SED->(DbSetOrder(1))
						If SED->(MsSeek(cFilSED+ SE1->E1_NATUREZ)) .And. !Empty(SED->ED_PERCCOF)	
							nValBase	:= SE1->E1_BASECOF
				 		Endif		 	
				 	Endif
				
				   If nValBase == 0 
						nValBase	+= SE1->E1_VALOR		 				
					Endif			
					
					If nMoeda > 1
						If SE1->E1_TXMOEDA == 0
							nValBase := nValBase*RecMoeda(SE1->E1_EMISSAO,nMoeda) 
						Else
							nValBase := (nValBase*SE1->E1_TXMOEDA)
						Endif					
					Endif						                        						
					
					SFQ->(DbSetOrder(1)) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
					If SFQ->(DbSeek(xFilial("SFQ")+"SE1"+ SE1->E1_PREFIXO + SE1->E1_NUM + SE1->E1_PARCELA + SE1->E1_TIPO + SE1->E1_CLIENTE + SE1->E1_LOJA))
						nValBase	:= SE1->E1_VALOR		 						
				  	Endif			
		
				  	If SE1->E1_MULTNAT <> "1" .And. (SE1->E1_PIS = 0 .Or. SE1->E1_COFINS = 0) //Para naturezas de APURACAO que possuam reducao.
						SED->(DbSetOrder(1))
						If SED->(MsSeek(xFilial("SED")+ SE1->E1_NATUREZ)) .And. !Empty(SED->ED_REDPIS)	.And. Empty(SED->ED_PERCPIS) 
					 		nValBase	:=	nValBase * (SED->ED_REDPIS/100) 			 						
						ElseIf SED->(MsSeek(xFilial("SED")+ SE1->E1_NATUREZ)) .And. !Empty(SED->ED_REDCOF) .And. Empty(SED->ED_PERCCOF)		 
					 		nValBase	:=	nValBase * (SED->ED_REDCOF/100) 			 						
						Endif
					Endif
			
					nValTit	:=	 nValBase					
					
					If SE1->E1_TPDESC == "I" .And. SE1->E1_DECRESC > 0 .And.  nValBase > SE1->E1_DECRESC
						nValBase	-=	SE1->E1_DECRESC
					Endif			
				Endif
			Endif
		Case "SE2" $ cAliasQry
			dbSelectArea("SE2")
			dbSetOrder(1)              
			
			If DbSeek( xFilial("SE2") + cChave )
				nValBase	:=	0
				SED->(DbSetOrder(1))
				SED->(MsSeek(cFilSED+ SE2->E2_NATUREZ)) 				
				
				If !Empty(SED->ED_PERCPIS) .Or. !Empty(SED->ED_PERCCOF) //Caso tenha uma natureza que retenha impostos...
				 	//Calculo inverso assim caso seja base reduzida ou normal o valor vai ser gerado correto.
				 	If SE2->E2_PIS > 0 .And. !Empty(SED->ED_PERCPIS) 		   
				 		nValBase	:=	SE2->E2_BASEPIS
				 	ElseIf SE2->E2_COFINS > 0 .And. !Empty(SED->ED_PERCCOF)	
				 		nValBase	:=	SE2->E2_BASECOF
				 	Else
						nValBase	:= SE2->E2_VALOR		 							 	
				 	Endif                       			 										
				Endif
				
				If nMoeda > 1  
					If SE2->E2_TXMOEDA == 0
						nValBase := nValBase*RecMoeda(SE2->E2_EMISSAO,nMoeda)  
					Else
						nValBase := (nValBase*SE2->E2_TXMOEDA)
					Endif					
				Endif						                        										
				
				nValTit := SE2->E2_VLCRUZ
				
				If !lPccBx .And. SE2->(E2_PIS+E2_COFINS+E2_CSLL) > 0
					nValTit += SE2->(E2_PIS+E2_COFINS+E2_CSLL) 
				EndIf
				
				If SE2->E2_INSS > 0
					nValTit += SE2->E2_INSS
				Endif
				
				If SE2->E2_FETHAB > 0
					nValTit += SE2->E2_FETHAB
				Endif
				
				If SE2->E2_FABOV > 0
					nValTit += SE2->E2_FABOV
				Endif
				
				If SE2->E2_FACS > 0
					nValTit += SE2->E2_FACS
				Endif
				
				nValTit += SE2->E2_SEST
				
				If SE2->E2_IRRF > 0				
		         cIRPFBaixa	:= Posicione("SA2", 1, xFilial("SA2")+SE2->(E2_FORNECE+E2_LOJA) , "A2_CALCIRF" )       				
					If cIRPFBaixa = "1" //Emissao
					   nValTit += SE2->E2_IRRF
					Endif
				Endif
					
				If SE2->E2_ISS > 0
					lDescISS := IIF(GetNewPar("MV_DESCISS",.F.) .And. lCalcIssBx ,.T.,.F.)
					If !lDescISS //Emissao.
						nValTit += SE2->E2_ISS
					Endif
				Endif       		         	      				
				
				If nValBase == 0 //Caso tenha uma natureza que nao retenha impostos... exemplo imposto gerado por outro modulo com retencao no produto.
					nValBase	:=	nValTit
				Endif		  
				
		   		If SE2->E2_MULTNAT <> "1" .And. (SE2->E2_PIS = 0 .Or. SE2->E2_COFINS = 0) //Para naturezas de APURACAO que possuam reducao.
					SED->(DbSetOrder(1))
					If SED->(MsSeek(xFilial("SED")+ SE2->E2_NATUREZ)) .And. !Empty(SED->ED_REDPIS)	.And. Empty(SED->ED_PERCPIS) 
				 		nValBase	:=	nValBase * (SED->ED_REDPIS/100) 			 						
					ElseIf SED->(MsSeek(xFilial("SED")+ SE2->E2_NATUREZ)) .And. !Empty(SED->ED_REDCOF) .And. Empty(SED->ED_PERCCOF)		 
				 		nValBase	:=	nValBase * (SED->ED_REDCOF/100) 			 						
					Endif
				Endif
		   		
		   		If lPccBaixa .And. SE2->E2_DESDOBR == "S" .And. Empty(SE2->E2_STATUS)
					nValTit	:=	nValBase				
				Endif
			EndIf
	EndCase
	
	RestArea(aArea)
Endif

Return ({nValBase,nValTit})

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo	 ³MaxSeq	   ³ Autor ³ Totvs          	    ³ Data ³ 02/07/15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funco para retornar a maior sequência do tít. na SE5      ³±±
±±³          ³ do SPED PIS/COFINS                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ MaxSeq()			   											  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ SIGAFIS													  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function MaxSeq(cSeq, cChaveBx)

Local cQry		:=	""
Local aArea		:= GetArea()
Local lRet		:= .F.
Local ME5		:= GetNextAlias()
Local cKeyFil 	:= "" 
Local cKeyPref 	:= "" 
Local cKeyNum 	:= "" 
Local cKeyParc 	:= "" 
Local cKeyTipo 	:= "" 
Local cKeyClifo := "" 
Local cKeyLoja 	:= "" 
Local nTamFil 	:= TamSX3("E5_FILIAL")[1]
Local nTamPre 	:= TamSX3("E5_PREFIXO")[1]
Local nTamNum 	:= TamSX3("E5_NUMERO")[1]
Local nTamPar 	:= TamSX3("E5_PARCELA")[1]
Local nTamTip 	:= TamSX3("E5_TIPO")[1]
Local nTamCli 	:= TamSX3("E5_CLIFOR")[1]
Local nTamLoj 	:= TamSX3("E5_LOJA")[1]

cKeyFil   := Substr(cChaveBx,01,nTamFil)
cKeyPref  := Substr(cChaveBx,nTamFil+1,nTamPre)
cKeyNum   := Substr(cChaveBx,nTamFil+nTamPre+1,nTamNum)
cKeyParc  := Substr(cChaveBx,nTamFil+nTamPre+nTamNum+1,nTamPar)
cKeyTipo  := Substr(cChaveBx,nTamFil+nTamPre+nTamNum+nTamPar+1,nTamTip)
cKeyClifo := Substr(cChaveBx,nTamFil+nTamPre+nTamNum+nTamPar+nTamTip+1,nTamCli)
cKeyLoja  := Substr(cChaveBx,nTamFil+nTamPre+nTamNum+nTamPar+nTamTip+nTamCli+1,nTamLoj)

cQry	:= 	" Select MAX(E5_SEQ) SEQ "
cQry	+= 	" From " + RetSqlName("SE5") + " SE5 "
cQry 	+=	" Where E5_FILIAL = '" + cKeyFil +  "' AND " 
cQry 	+=	" E5_PREFIXO 	  = '" + cKeyPref + "' AND " 
cQry 	+=	" E5_NUMERO       = '" + cKeyNum +  "' AND " 
cQry 	+=	" E5_PARCELA      = '" + cKeyParc + "' AND " 
cQry 	+=	" E5_TIPO         = '" + cKeyTipo + "' AND " 
cQry 	+=	" E5_CLIFOR       = '" + cKeyClifo +"' AND " 
cQry 	+=	" E5_LOJA         = '" + cKeyLoja + "' AND " 
cQry	+= 	" D_E_L_E_T_ = ' ' "
cQry 	:= ChangeQuery(cQry)

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQry),ME5)

lRet := AllTrim(cSeq) == AllTrim((ME5)->SEQ) 

(ME5)->(DbCloseArea())

RestArea(aArea)

Return lRet 

/*/{Protheus.doc} TemImpBx
Verifica a existência de títulos de impostos gerados com
base no título da SE1 informado via RecNo

@param nRecNoSE1 - RecNo da SE1 no título principal 
@param cDataIni - Data inicial de baixa do título
@param cDataFim - Data final de baixa do título

@author Daniel Mendes
@since 28/07/06
@version P12
@return Retorno Booleano da existência
/*/
Static Function TemImpBx( nRecNoSE1 , cDataIni , cDataFim )
Local lRet := .T.
Local cQry := ""
Local cPai := "" 
Local cNat := ""
Local cAls := ""
Local cTip := ""
Local nNat := 0
Local nTip := 0
Local nRcn := 0

cAls := Alias()
nRcn := SE1->( RecNo() )
cQry := GetNextAlias()

SE1->( dbGoTo( nRecNoSE1 ) )

nNat := Len( SE1->E1_NATUREZ )
nTip := Len( SE1->E1_TIPO    )
cPai := Pad( SE1->( E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO + E1_CLIENTE + E1_LOJA ) , Len( SE1->E1_TITPAI ) )
cNat := "% ( '" + Pad( SuperGetMv( "MV_PISNAT" ) , nNat ) + "' , '" + Pad( SuperGetMv( "MV_COFINS" ) , nNat ) + "' ) %"
cTip := "% ( '" + Pad( MVCFABT , nTip ) + "' , '" + Pad( MVPIABT , nTip ) + "' ) %"

BeginSql Alias cQry
	SELECT COUNT(E1_TITPAI) TEMIMP
	  FROM %Table:SE1%
	 WHERE E1_FILIAL  = %Exp:SE1->E1_FILIAL%
	   AND E1_TITPAI  = %Exp:cPai%
	   AND E1_NATUREZ IN %Exp:cNat%
	   AND E1_TIPO    IN %Exp:cTip%
	   AND E1_BAIXA   BETWEEN %Exp:cDataIni% AND %Exp:cDataFim%
	   AND %NotDel%
EndSql

lRet := (cQry)->TEMIMP > 0
(cQry)->( dbCloseArea() )
SE1->( dbGoTo( nRcn ) )

If !Empty( cAls )
	dbSelectArea( cAls )
EndIf

Return lRet

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} FINCXSIMP

Alimenta tabela temporária do componente fiscal

@param cTableAlias 	- Alias da tabela temporária já criada anteriormente (essa função não cria a tabela temporária) --> FWTemporaryTable com estrutura definida pelo fiscal
@param aFiliais		 	- Filiais a serem consideradas
@param cCliDe				- SOMENTE PARA AUTOMAÇÃO
@param cCliAte			- SOMENTE PARA AUTOMAÇÃO
@param cLojaDe			- SOMENTE PARA AUTOMAÇÃO
@param cLojaAte			- SOMENTE PARA AUTOMAÇÃO

@return lRet				- Retorna se executou o processamento
@author rafael.rondon
@since 10/04/2019
/*/
//-----------------------------------------------------------------------------------------------------
Function FINCXSIMP( cTableAlias , aFiliais , cCliDe , cCliAte , cLojaDe , cLojaAte )

	Local aArea				:= GetArea()
	Local cQuery 			:= ''	
	Local nRetSaldo 	:= 0
	Local nValjud   	:= 0.00
	Local cTpDocFK1		:= "AP|C2|D2|DB|DC|IB|J2|M2|MT|PE|TR"
	Local cMVSituaca	:= SuperGetMV("MV_SITUACA",.T.,"6|F|H")
	Local cAliasTMP 	:= GetNextAlias()
	Local cChaveAnt		:= ""													// Armazena a parcela anteriormente processada para controlar o saldo
	Local nParcAcum		:= 0													// Acumula os valores baixados de parcela
	Local lIsSE1Comp 	:= Empty(FWxFilial("SE1"))		// SE1 Totalmente compartilhada
	Local lRet				:= .T.
	Local cTmpSE1Fil	:= ""
	Local cExprFil		:= ""

	//Tratamento da Automação
	Default cTableAlias	:= ""
	Default aFiliais		:= {}
	Default cCliDe      := Space( TamSX3("A1_COD")[1] )
	Default cCliAte     := Replicate( 'Z' , TamSX3("A1_COD")[1] )
	Default cLojaDe     := Space(TamSX3("A1_LOJA")[1])
	Default cLojaAte    := Replicate( 'Z' , TamSX3("A1_LOJA")[1] )

	If !Empty(cTableAlias) .AND. Len(aFiliais) > 0
	
		cQuery 	:= "	SELECT FK7_IDDOC, "
		cQuery 	+= "	E1_FILIAL, E1_EMISSAO, E1_CLIENTE, E1_LOJA, E1_PREFIXO, E1_NUM, "
		cQuery 	+=			"(SELECT COUNT(E1_PARCELA) FROM " + RetSqlName("SE1") + " E1QTD "
		cQuery 	+=				"WHERE E1QTD.D_E_L_E_T_ = ' ' "
		cQuery 	+=				"AND E1QTD.E1_FILIAL = SE1.E1_FILIAL "
		cQuery 	+=				"AND E1QTD.E1_PREFIXO = SE1.E1_PREFIXO "
		cQuery 	+=				"AND E1QTD.E1_NUM = SE1.E1_NUM "
		cQuery 	+=				"AND E1QTD.E1_TIPO = SE1.E1_TIPO "
		cQuery 	+=				"AND E1QTD.E1_CLIENTE = SE1.E1_CLIENTE "
		cQuery 	+=				"AND E1QTD.E1_LOJA = SE1.E1_LOJA "
		cQuery 	+=			") As	QTDPARC, "
		cQuery 	+= " E1_PARCELA ,E1_TIPO, E1_VALOR, "
		cQuery 	+= " E1_CLIENTE, E1_LOJA, E1_VENCTO, FK1_DATA, FK1_VALOR , FK1_MOEDA, E1_SITUACA, E1_FILORIG, E1_ORIGEM, "
		cQuery 	+= " FK1_TPDOC, FK1_SEQ, E1_NATUREZ, FK1_TXMOED,E1_SALDO, SE1.R_E_C_N_O_ , E1_MOEDA , FK1_MOEDA , E1_VLCRUZ "
		cQuery 	+= " FROM " + RetSqlName("SE1") + " SE1 "

		cQuery 	+= " INNER JOIN " + RetSqlName("FK7") + " FK7 "
		cQuery 	+= " 		ON  RTRIM(LTRIM(CONCAT(E1_FILIAL,'|',E1_PREFIXO,'|',E1_NUM,'|',E1_PARCELA,'|',E1_TIPO,'|',E1_CLIENTE,'|',E1_LOJA))) = RTRIM(LTRIM(FK7_CHAVE)) "
		cQuery 	+= "  	AND FK7_FILIAL IN ( SELECT FK7_FILIAL FROM " + RetSqlName("FK7") + " GROUP BY FK7_FILIAL  ) 
		cQuery 	+= " 		AND FK7_ALIAS = 'SE1' "
		cQuery 	+= " 		AND FK7.D_E_L_E_T_ = ' ' "

		cQuery 	+= " LEFT JOIN " + RetSqlName("FK1") + " FK1 "
		cQuery 	+= " 		ON FK1_IDDOC = FK7_IDDOC "
		cQuery 	+= " 		AND FK1_FILIAL = FK7_FILIAL "
		cQuery 	+= " 		AND FK1.D_E_L_E_T_ = ' ' "
		cQuery 	+= " 		AND NOT EXISTS (	SELECT 0 FROM " + RetSqlName("FK1") + " FK1ES  "	// Que não exista um movimento estornado
		cQuery 	+= " 											WHERE FK1ES.D_E_L_E_T_ = ' ' "
		cQuery 	+= " 											AND FK1ES.FK1_FILIAL = FK1.FK1_FILIAL "
		cQuery 	+= " 											AND FK1ES.FK1_IDDOC = FK1.FK1_IDDOC "
		cQuery 	+= " 											AND FK1ES.FK1_SEQ = FK1.FK1_SEQ "
		cQuery 	+= " 											AND FK1ES.FK1_TPDOC = 'ES' "
		cQuery 	+= " 										)
		cQuery  += " 		AND FK1_TPDOC NOT IN " + FormatIn(cTpDocFK1,"|") + "  "

		cQuery  += " WHERE E1_TIPO NOT IN " + FormatIn(MVPAGANT;
																									+"|"+MVABATIM+"|"+MVCHEQUES+"|"+MV_CRNEG;
																									+"|"+MVRECANT+"|"+MVTAXA+"|"+MVTXA;
																									+"|"+MVCOFINS+"|"+MVPIS+"|"+MVINSS;
																									+"|"+MVCOFINS+"|"+MVCS ,"|")

		/*
				Tratamento para Filiais
		*/
		cExprFil := GetRngFil( aFiliais , 'SE1', .T. /*lTmpFil*/, @cTmpSE1Fil /*cTmpFil*/, /*nLimTmp*/, .T. /*lFilOrg*/ , /*cRealTmp*/ )
		Do Case

			Case FWModeAccess("SE1",3) == "E" 	// SE1 totalmente Exclusivo

				cQuery +=	" AND E1_FILIAL " + cExprFil

			Case lIsSE1Comp											// SE1 totalmente Compartilhado

				cQuery +=	" AND E1_FILIAL = '" + Space(FwSizeFilial()) + "' "
				cQuery +=	" AND E1_FILORIG " + cExprFil

			OtherWise														

				cQuery +=	" AND E1_FILIAL IN ( SELECT E1_FILIAL FROM " + RetSqlName("SE1") + " GROUP BY E1_FILIAL  ) "
				cQuery +=	" AND E1_FILORIG " + cExprFil

		EndCase

		cQuery +=	" AND EXISTS  (	SELECT 0 FROM " + RetSqlName("SE1") + " SE1PARC "		// Que exista alguma parcela com saldo
		cQuery +=	" 							WHERE D_E_L_E_T_ = ' ' "
		cQuery +=	" 							AND SE1PARC.E1_FILIAL = SE1.E1_FILIAL "
		cQuery +=	" 							AND SE1PARC.E1_PREFIXO = SE1.E1_PREFIXO "
		cQuery +=	" 							AND SE1PARC.E1_NUM = SE1.E1_NUM "
		cQuery +=	" 							AND SE1PARC.E1_TIPO = SE1.E1_TIPO "
		cQuery +=	" 							AND SE1PARC.E1_CLIENTE = SE1.E1_CLIENTE "
		cQuery +=	" 							AND SE1PARC.E1_LOJA = SE1.E1_LOJA "
		cQuery +=	" 							AND SE1PARC.E1_SALDO > 0 "
		cQuery +=	" ) "
		cQuery += " AND E1_ORIGEM NOT LIKE 'FIN%' " 	// Tudo o que não for origem financeiro

		//------------------------------------------------------------------------------------------------------------------------------
		// Parâmetros Utilizados somente para AUTOMAÇÃO - INÍCIO
		If !Empty(cCliDe)
			cQuery += " AND E1_CLIENTE  BETWEEN '" + cCliDe + "' AND '" + cCliAte + "' "
			cQuery += " AND E1_LOJA  BETWEEN '" + cLojaDe + "' AND '" + cLojaAte + "' "
		EndIf
		// Parâmetros Utilizados somente para AUTOMAÇÃO - FIM
		//------------------------------------------------------------------------------------------------------------------------------
		
		cQuery += " ORDER BY E1_FILORIG , E1_PREFIXO , E1_NUM , E1_PARCELA, E1_TIPO , FK1_DATA , FK1_SEQ "

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasTMP,.T.,.T.)

		(cAliasTMP)->(DbGoTop())

		While (cAliasTMP)->(!EOF())

			If !Empty((cAliasTMP)->FK1_DATA)

				/*
					Tratamento para mostrar o saldo após cada movimentação de baixa
				*/
				If cChaveAnt == (cAliasTMP)->E1_FILORIG + (cAliasTMP)->E1_PREFIXO + (cAliasTMP)->E1_NUM + (cAliasTMP)->E1_PARCELA + (cAliasTMP)->E1_TIPO
					
					nParcAcum += (cAliasTMP)->FK1_VALOR

					nRetSaldo := (cAliasTMP)->E1_VLCRUZ - nParcAcum

				Else

					cChaveAnt := (cAliasTMP)->E1_FILORIG + (cAliasTMP)->E1_PREFIXO + (cAliasTMP)->E1_NUM + (cAliasTMP)->E1_PARCELA + (cAliasTMP)->E1_TIPO

					nParcAcum := (cAliasTMP)->FK1_VALOR

					nRetSaldo := (cAliasTMP)->E1_VLCRUZ - nParcAcum

				EndIf

			Else
				nRetSaldo := (cAliasTMP)->E1_VLCRUZ
			EndIf

			If (cAliasTMP)->E1_SITUACA $ cMVSituaca 
				nValjud  := nRetSaldo
			Else
				nValjud := 0.00
			EndIf

			Reclock(cTableAlias,.T.)

				(cTableAlias)->FILIAL     := (cAliasTMP)->E1_FILORIG
				(cTableAlias)->PREFIXO    := (cAliasTMP)->E1_PREFIXO
				(cTableAlias)->NUMERO     := (cAliasTMP)->E1_NUM
				(cTableAlias)->QTDPARC    := (cAliasTMP)->QTDPARC
				(cTableAlias)->PARCELA    := (cAliasTMP)->E1_PARCELA
				(cTableAlias)->TIPO       := (cAliasTMP)->E1_TIPO
				(cTableAlias)->CLIENTE    := (cAliasTMP)->E1_CLIENTE
				(cTableAlias)->LOJA       := (cAliasTMP)->E1_LOJA
				(cTableAlias)->EMISSAO    := SToD((cAliasTMP)->E1_EMISSAO)
				(cTableAlias)->VLTITULO   := (cAliasTMP)->E1_VLCRUZ
				(cTableAlias)->VENCIMENTO := SToD((cAliasTMP)->E1_VENCTO)
				(cTableAlias)->BAIXA      := SToD((cAliasTMP)->FK1_DATA)
				(cTableAlias)->SALDO      := nRetSaldo
				(cTableAlias)->VLPAGTO    := (cAliasTMP)->FK1_VALOR
				(cTableAlias)->INCOBRAVEL := nValjud
				(cTableAlias)->ORIGEM     := (cAliasTMP)->E1_ORIGEM
				(cTableAlias)->SEQBAIXA   := (cAliasTMP)->FK1_SEQ

			(cTableAlias)->(MsUnlock())

			(cAliasTMP)->(dbskip())
			
		Enddo

		(cAliasTMP)->(dbCloseArea())

		If !Empty(cTmpSE1Fil)
			CtbTmpErase(cTmpSE1Fil)
		Endif

	Else
		lRet := .F.
	EndIf		

	RestArea(aArea)

Return lRet

/*/{Protheus.doc} FISARast
Função para buscar o rastreamento do título, quando houver mudança de regime fiscal.

@param   cAliasRst  Alias da tabela que será usada no rastreamento (FI7 ou FI8).
@param   cKeyRast   Chave para o registro que será rastreado.
@return  Chave do título originador.
@author	 Jose Gavetti
@since	 06/07/2020
/*/
Function FISARast(cAliasRst, cKeyRast)

Local lRet      := .T.
Local aArea     := GetArea()
Local aRstArea  := (cAliasRst)->(GetArea())
Local aRoots    := {}
Local cKey 		:= ""

bOrdemOri := {|| FI7->(dbSetOrder(1))}  // FI7_FILIAL, FI7_PRFORI, FI7_NUMORI, FI7_PARORI, FI7_TIPORI, FI7_CLIORI, FI7_LOJORI.
bOrdemDes := {|| FI7->(dbSetOrder(2))}  // FI7_FILIAL, FI7_PRFDES, FI7_NUMDES, FI7_PARDES, FI7_TIPDES, FI7_CLIDES, FI7_LOJDES.
bRegOri   := {|| FI7->(FI7_FILIAL + FI7_PRFORI + FI7_NUMORI + FI7_PARORI + FI7_TIPORI + FI7_CLIORI + FI7_LOJORI)}
bRegDes   := {|| FI7->(FI7_FILIAL + FI7_PRFDES + FI7_NUMDES + FI7_PARDES + FI7_TIPDES + FI7_CLIDES + FI7_LOJDES)}

// Posiciona o título.
Eval(bOrdemOri)
If !(cAliasRst)->(dbSeek(cKeyRast, .F.))
	Eval(bOrdemDes)
	lRet := (cAliasRst)->(dbSeek(cKeyRast, .F.))
Endif

// Vefirica se o título tem rastreamento.
If lRet
	aRoots := FISARastre(cAliasRst, bOrdemDes, bRegOri, bRegDes, cKeyRast, aRoots)
Endif

If Len(aRoots) > 0
	cKey:= aRoots[1]
	DbSelectArea("SE1")							
	DbSetOrder(1)		
	If SE1->(DbSeek(cKey))
		aAdd(aRoots, Dtoc(SE1->E1_EMISSAO)) 
	Endif
Endif

RestArea(aRstArea)
RestArea(aArea)

Return aRoots

/*/{Protheus.doc} FISARastre
Função para retornar o título originador.
@author	    Jose Gavetti
@since		06/07/2020
/*/
Function FISARastre(cAliasRst, bOrdemDes, bRegOri, bRegDes, cBranch, aRoots)

Local aArea    := (cAliasRst)->(GetArea())

Default aRoots := {}

// Verifica se existe nível acima do item posicionado.
Eval(bOrdemDes)
If (cAliasRst)->(dbSeek(cBranch, .F.))
	Do While (cAliasRst)->(!eof() .and. Eval(bRegDes) == cBranch)
		FISARastre(cAliasRst, bOrdemDes, bRegOri, bRegDes, Eval(bRegOri), aRoots)
		(cAliasRst)->(dbSkip())
	EndDo
ElseIf aScan(aRoots, cBranch) = 0
	aAdd(aRoots, cBranch)
Endif

RestArea(aArea)

Return aRoots


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SpdVlBase

Funcao para retornar o valor da base de calculo do COFINS para o bloco F600.

@param aReg - Array com os dados do titulo
@return nValBase - Valor da base de calculo
@Author	Fabio Zanchim
@since	20/12/2021
/*/
//-----------------------------------------------------------------------------------------------------
Static Function SpdVlBase(aReg as Array) As Numeric

Local nValBase	As Numeric
Local aArea		As Array
Local cAliasQry	As Character
Local cQuery	As Character

nValBase	:= 0
aArea		:= GetArea()
cAliasQry	:= GetNextAlias()
cQuery		:= ""

dbSelectArea('SE5')
dbGoTo(aReg[14])
cQuery := " SELECT FK4_BASIMP FROM "+RetSQLName("FK4")	
cQuery += " Where FK4_FILIAL='"+xFilial('FK4')+"'"
cQuery += " And FK4_IDORIG='"+SE5->E5_IDORIG+"'" 
cQuery += " And FK4_RECPAG='R' "
cQuery += " And FK4_IMPOS='COF' "
cQuery += " And FK4_STATUS='1' "
cQuery += " And D_E_L_E_T_=' '"
cQuery := ChangeQuery( cQuery )

dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry, .F., .T. )

DbSelectArea(cAliasQry)
DbGoTop()
If !Eof()
	TCSetField(cAliasQry, "FK4_BASIMP" ,"N",16,2)
	nValBase := (cAliasQry)->(FK4_BASIMP)
EndIF
(cAliasQry)->(dbCloseArea())

RestArea(aArea)

Return(nValBase)

/*/{Protheus.doc} OrigemEasy
Retornar as Origens dos títulos dos Módulos de Comércio Exterior para consideração no registro F100
@author	    Equipe Comercio Exterior - Parceiros Thomson Reuters
@since		18/03/2022
/*/
Static Function OrigemEasy() As Character
Local cRet As Character
 
cRet := ""

If FindFunction("TEOrigEasy")
	cRet := TEOrigEasy() //Função localizada no fonte de Parceiros Comércio Exterior AvGeral.Prw
EndIf


Return cRet
