#INCLUDE "FINA060.ch"
#INCLUDE "PROTHEUS.ch"
#INCLUDE "FONT.CH"
#INCLUDE "COLORS.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "Dbstruct.ch"
#INCLUDE "FWLIBVERSION.CH"

Static _lF060ASit   := .F.
Static _oFINA0601
Static _oFINA0602
Static _lExistVA    := .F.
Static _lF060Exit   := .F.  // Log para Saida
Static _lFa60Fil    := .F.
Static _lF060CpBor  := .F.
Static _lF060NDes	:= .F.
Static _lTFA60BDE   := .F.
Static _lFA60BDE    := .F.
Static _lFA60Can1   := .F.
Static _lTFA60Can2  := .F.
Static _lFA60Can2   := .F.
Static _lF060Auto   := .F.
Static _lVlBcoApi   := .F.
Static _lVlCGCEmp   := .F.
Static _lTitTemPIX  := Nil
Static __l241Canc   := Nil 
Static _cSitPIX     := Nil
Static _oSeqbx      := Nil
Static _lBCOApi     := .F.
Static _lMetric     := .F.
Static _lGrvMetri   := .F.
Static _oMovTrfDB   := Nil
Static _oSeqFK1     := Nil
Static _oBorDtCan	:= Nil

/*/{Protheus.doc} FINA060
Transfere portador , situação e cria Bordero

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function FinA060(nPosArotina,aRotAuto)

    Local cFilter		:= ""
    Local bFiltraBrw	:= {||}
    Local aIndexFil		:= {}

    //VERIFICA SE A FUNCAO QUE ESTA CHAMANDO E A FINA740
    //NECESSARIO PARA NAO DUPLICAR VARIAVEL
    If !(FwIsInCallStack('FINA740'))
        Private lF060LOOP := .T.
    EndIf

    //Define Array contendo as Rotinas a executar do programa
    //----------- Elementos contidos por dimensão ------------
    //1. Nome a aparecer no cabeçalho
    //2. Nome da Rotina associada
    //3. Usado pela rotina
    //4. Tipo de Transação a ser efetuada
    // 1 - Pesquisa e Posiciona em uma Cotação
    // 4 - Analisa e/ou encerra uma cotação

    Private aRotina := MenuDef()
    Private cCodDiario :=""
    Private cFil060

    //Variaveis Relativas ao Entidades Bancarias (Junho/2012)
    Private cBcoChq	  := Criavar("E1_BCOCHQ")
    Private cAgeChq	  := Criavar("E1_AGECHQ")
    Private cCtaChq	  := Criavar("E1_CTACHQ")

    If cPaisLoc == "ARG"
        Private cPostal   := Criavar("E1_POSTAL")
    EndIf

    // -----------------------------------------------------
    // CARREGA FUNCAO PERGUNTE
    // -----------------------------------------------------
    // MV_PAR01 - Mostra lançamento Contabil
    // MV_PAR02 - Aglutina Lancamentos
    // MV_PAR03 - Contabiliza Transferencia - Descontinuado
    // MV_PAR04 - Baixar Titulos Descont.
    // MV_PAR05 - Considera Filiais abaixo
    // MV_PAR06 - Filial de
    // MV_PAR07 - Filial ate
    // MV_PAR08 - Considera Abatimentos (So Transferencia)
    // MV_PAR09 - Considera Acrescimos e Decrescimos
    // MV_PAR10 - Considera Retencao Bancaria
    // MV_PAR11 - Marcar Títulos Aut.?
    // MV_PAR12 - Seleciona Tipos?
    // MV_PAR13 - Seleciona Filiais?
    // MV_PAR14 - Contabiliza Online? 1=Sim;2=Não
    // ----------------------------------------------------
    SetKey (VK_F12,{|a,b| AcessaPerg("FIN060",.T.)})

    Pergunte("FIN060",.F.)

    Private cMarca   	:= GetMark()
    Private lInverte	:= .F.
    Private nPrazo		:= 0			  //para ponto de entrda
    Private nPrazoMed	:= 0			  //idem
    Private nTaxaDesc	:= 0			  //idem
    Private VALOR		:= 0
    Private VALOR2		:= 0
    Private nValdesc	:= 0
    Private aGets[0]
    Private cLote		:= ""
    Private dDataMov	:= dDataBase
    Private nIndice		:= SE1->(Indexord())
    Private lconsBco	:= GetMV("MV_CONSBCO")
    Private nMoeda		:= 1
    Private nMoedaBco	:= 1
    Private nDecs 		:= 2
    Private nTxmoeda	:= 0
    Private cPict06014	:= PesqPict("SE1","E1_VALOR",16,nMoeda)
    Private cPict06018	:= PesqPict("SE1","E1_VALOR",TamSx3("E1_VALOR")[1],nMoeda)
    Private nAbatim		:= 0
    Private nDescont	:= 0
    Private nJuros		:= 0
    Private nMoedaBor	:= 1
    Private IOF			:= 0
    Private nValCred  	:= 0
    Private nValor 		:= 0
    Private nVlrForm    := 0
    Private nVlrDesc    := 0

    Default nPosArotina := 0

    _lF060Auto	:= (aRotAuto <> Nil)
    _lF060NDes	:= ExistBlock("F060NDES")

    If !_lMetric
        _lMetric := _lGrvMetri := (FwLibVersion() >= "20210517")
    EndIf

    If !_lF060Auto .And. GetHlpLGPD({"A6_COD","A6_AGENCIA","A6_NUMCC"})
        Return .F.
    EndIf

    If _lTitTemPIX == Nil .Or. _cSitPIX == Nil
        _lTitTemPIX := FindFunction("TitTemPIX")
        If _lTitTemPIX .And. FindFunction("F022SITPIX")
            _cSitPIX := F022SITPIX()
        Endif
    Endif

    If _cSitPIX == Nil .Or. Empty(_cSitPIX)
        _cSitPIX := "0"
    Endif

    _lExistVA := TableInDic("FKD") .And. TableInDic("FKC") .And. ExistFunc("FVALACESS")

    // Validação para uso da api de boletos
    If FindFunction("F713VldUso") .And. FindFunction("F713VldBco")
        _lBCOApi := F713VldUso()
    EndIf

    LoteCont("FIN")
    DbSelectArea("SE1")

    //Aplicacao de filtro para nao exibir os titulos do tipo RA
    //das notas de adiantamento - Manejo de Anticipo
    If cPaisLoc == "MEX" .And. X3Usado("ED_OPERADT")
        cFilter := 'E1_TIPO != "'+SubStr(MVRECANT,1,3)+'" .Or. '
        cFilter += 'Upper(AllTrim(E1_ORIGEM)) != "FINA087A" .Or. '
        cFilter += 'GetAdvFVal("SED","ED_OPERADT",xFilial("SED")+E1_NATUREZ,1,"") != "1" '
        bFiltraBrw := { || FilBrowse("SE1",@aIndexFil,@cFilter)}
        DbSelectArea("SE1")
        Eval(bFiltraBrw)
    EndIf

    If nPosArotina > 0 .And. lF060LOOP
        DbSelectArea('SE1')
        If _lF060Auto .AND. nPosArotina = 2
            aAutoCab := SE1->(MSArrayXDB(aRotAuto,Nil,4))
            If Len(aAutoCab) == 0
                Return
            EndIf
        EndIf
        bBlock := &("{ |a,b,c,d,e| " + aRotina[ nPosArotina,2 ] + "(a,b,c,d,e) }")
        Eval(bBlock, Alias(), (Alias())->(Recno()),nPosArotina,aRotAuto)

    ElseIf nPosArotina = 0  .And. lF060LOOP

        If ExistBlock("F060BROW")
            ExecBlock("F060BROW",.F.,.F.)
        EndIf

        //Intervencao para o Requisito de Entidades Bancarias
        //Junho de 2012
        If cPaisLoc != "BRA"
            mBrowse(6, 1,22,75,"SE1",,,,,,FA060Legend(),,,,{ || o:=GetMBrowse() ,o:SetNoBrowse(.T.) })
        Else
            mBrowse(6, 1,22,75,"SE1",,,,,,FA060Legend(),,,,)
        EndIf
    Else
        lF060LOOP := .T.
    EndIf

    DbSelectArea("SE1")
    DbSetOrder(1)	// devolve ordem principal
    EvalGeneric()

Return

/*/{Protheus.doc} FA060Trans
Transfere um Titulo de um portador para outro

@param ExpC1 = Alias do arquivo
@param ExpN1 = N£mero do registro
@param ExpN2 = Opção selecionada no menu

@author pequim

@since 02/12/2013
@version 1.0
/*/
Function FA060Trans(cAlias,nReg,nOpcx,aRotAuto)
    Local cFormula 		:= Space(3)
    Local lPadrao		:= .F.
    Local nTotal		:= 0
    Local nHdlPrv		:= 0
    Local nOpca 		:= 0
    Local lDesc 		:= .F.
    Local cAgen060		:= CriaVar("EF_AGENCIA",.F.)
    Local cContrato		:= ""
    Local cNumBco		:= ""
    Local cConta060		:= CriaVar("EF_CONTA",.F.)
    Local cPort060		:= CriaVar("EF_BANCO",.F.)
    Local cPadrao 		:= Space(3)
    Local cChavEA		:= ""
    Local cHistorico	:= ""
    Local cArquivo		:= ""
    Local lHead 		:= .F.
    Local cSequencia 	:= 0
    Local aBaixa 		:= {}
    Local l060SEA 		:= ExistBlock("F060SEA")
    Local aTempos  		:= {}
    Local cClearing		:= ""
    Local cCliente		:= ""
    Local cTitulo		:= "" // ira guardar Prefixo+Num+Parc
    Local nRecSe5Trf 	:= 0 // Registro da transferencia no SE5
    Local nRecSe5Bai 	:= 0 // Registro da baixa na transferencia no SE5
    Local lF060DGV 		:= ExistBlock("F060DGV")
    Local nPos			:= 0
    Local dBase			:= CToD("//")
    Local nDias			:= 0
    Local aFeriados		:= {}
    Local lSpbInUse 	:= SpbInuse()
    Local aAreaSE1 		:= {}
    Local nJ			:= 0
    Local nRetencao		:= 0
    Local lF060ABT 		:= ExistBlock("F060ABT")
    Local lMarkAbt 		:= .F.
    Local aBaixas 		:= {}
    Local lJuros 		:= .F.
    Local lDescont 		:= .F.
    Local nTotAbImp 	:= 0
    Local lPanelFin 	:= IsPanelFin()
    Local nEspLarg 		:= 0
    Local nEspLin  		:= 0
    Local aFlagCTB 		:= {}
    Local lUsaFlag		:= SuperGetMV("MV_CTBFLAG" , .T. /*lHelp*/, .F. /*cPadrao*/)
    Local aDadosF060ACT	:= {}
    //--- Junho de 2012
    Local nRecor        := 0
    //Controle de abatimento
    Local lTitpaiSE1	:= .T.
    Local nOrdTitPai	:= 0
    Local cTitPai		:= ""
    Local bWhile 		:= {||!EOF() .And. E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA == cKeySE1}
    Local cFilBor		:= ""
    // Situacoes de cobranca
    Local cDescricao	:= ""
    Local cSituacAtu	:= ""
    Local E1_SITUACA	:= ""
    Local oDlg
    Local cPortador
    Local oCbxClea
    Local oDescricao
    Local oSituacao
    Local lEnabled	:= .T.
    Local oModelBx	:= FwLoadModel("FINM010") //Model de baixas de titulo a Receber
    Local oSubFKA
    Local oSubFK5
    Local cLog 		:= ""
    Local cChaveTit := ""
    Local cCamposE5 := ""
    Local lRet 		:= .T.
    Local lGerMovTrf := .F.
    Local cE1SITUACA  := AllTrim(Transform(SE1->E1_SITUACA,PesqPict("SE1","E1_SITUACA")))
    Local cE1PORTADO  :=  AllTrim(Transform(SE1->E1_PORTADO,PesqPict("SE1","E1_PORTADO"))) + '-' + ;
                        AllTrim(Transform(SE1->E1_AGEDEP,PesqPict("SE1","E1_AGEDEP"))) + '-' + ;
                        AllTrim(Transform(SE1->E1_CONTA,PesqPict("SE1","E1_CONTA")))
    Local aAlt 		  := {}
    Local oBrut
    Local lRMInteg		:= IIf(FindFunction("FWHasEai"),FwHasEai("FINI150A",.F.,,.T.),.F.)
    Local aRmTinCa		:= {}
    Local nSldAut		:= 0
    Local lCtbOfflin    := .F.
    Local lVldCtbOff    := .F.
    Local cAgencAnt     := ""
    Local cContaAnt     := ""
    Local cIdFk5        := ""
    Local aVetBaixa     := {}
    Local cSituaAnt     := 0
    Local cNatAnt       := ""
    Local lBxCobDesc    := .F.
    Local cSLDBXCR      := SuperGetMv("MV_SLDBXCR", .F., "B")
    Local nVLTRANS      := SuperGetMv("MV_VLTRANS", .F., 2)
    Local cSitCobCau    := PadR("7", TamSX3("E1_SITUACA")[1])
    Local nCasDec       := TamSx3("E1_TXMOEDA")[2]
    Local lGrvFI2       := .F.
    Local cFunName      := AllTrim(FunName())
    Local lProtesto     := .F.
    Local lCancProt     := .F.
    Local lTemTela      := .T.
    Local nListaSEA     := 0
    Local nVlMoed2      := 0
    Local cFilBordero   := ""
    Local lEstCobDes    := .F.
    Local cIdDocFK7     := ""
    Local cTmpFK5       := ""
    Local cSeq          := ""

    Private nQtdTit		:= 1
    Private nSomaData 	:= 0
    Private cNatureza 	:= Space(10)
    Private aBaixaSE5 	:= {}
    Private cSituAnt	:= ""
    Private cSituacao	:= ""
    Private cPortAnt	:= ""
    Private nValSaldo 	:= 0
    Private oPort060	:= Nil
    Private aItemsFI2	:= {} // Usada no envio de instrucoes de cobranca na Fa040AltOk
    Private lOracle		:= "ORACLE"$Upper(TCGetDB())
    Private nTxIOF		:= 0
    Private nVlrIOF	  	:= 0
    Private lValorBruto := .F.
    Private lMsErroAuto := .F.

    _lF060Exit := ExistBlock("F060EXIT")			// Log para Saida
    nIndice    := SE1->(IndexOrd())
    nValCred   := 0
    nValor	   := 0

    // Intervencao para o Requisito de Entidades Bancarias - Junho de 2012
    If !_lF060Auto  .and. cPaisLoc != "BRA"
        If Aviso(OemToAnsi(STR0081), OemToAnsi(STR0087) , { OemToAnsi(STR0085) , OemToAnsi(STR0086) }) == 1   // "Deseja realizar filtro de cheques ?"
            If fA060Bco()   // Essa rotina tem assegurado a consistencia do ambiente com GetArea
                nRecor := fa060EBan()
                If nRecor == 0
                    Return
                Else
                    DbSelectArea("SE1")
                    nReg := nRecor
                    DbGoTo(nRecor)
                    //--- Verifica se ja existe a mBrowse !!
                    oBrowse := GetMBrowse()
                    If Type("oBrowse") <> "U"
                        oBrowse:GoTo(nRecor)
                    EndIf
                EndIf
            Else
                Return
            EndIf
        EndIf
    EndIf

    //Verifica se data do movimento não  menor que data limite de
    //movimentacao no financeiro

    If !DtMovFin(,,"2")
        Return
    EndIf

    //Caso os titulos estejam em carteira TechFin - E1_SITUACA == MV_CARTECF / MV_DEVTECF
    //Nao permitir esta operacao, pois ele so pode ser tranferido pela rotina F136Transf
    If F60VldTecf(SE1->E1_SITUACA)
        Help("", 1, "CARTTECFIN", , STR0144 /*"Titulos em carteira Techfin so podem ser tranferidos pelo TOTVS Antecipa."*/, 1,,,,,,, {STR0143 /*"Avalie se o titulo faz parte de um processo do TOTVS Antecipa"*/})
        Return
    EndIf

    If SE1->E1_TIPO $ MVPROVIS
        Help(" ",1,"FA060PROV")
        Return
    EndIf

    If SE1->E1_TIPO $ MVENVBCOR
        Help(" ",1,"F060ENVBCO")
        Return
    EndIf

    If SE1->E1_TIPO $ MVRECANT
        Help(" ",1,"FA060ADIANT")
        Return
    EndIf

    If SE1->E1_TIPO $ MV_CRNEG
        Help(" ",1,"FA060NCRED")
        Return
    EndIf

    If SE1->E1_TIPO $ MVABATIM
        Help(" ",1,"FA060ABT",,STR0069+CHR(10)+STR0070,1,0) //"Titulos de abatimento serão transferidos"###"junto com os titulos principais"
        Return
    EndIf

    If SE1->E1_SALDO = 0
        Help(" ",1,"FA060BAIX")
        Return
    EndIf

    cChaveTit := SE1->E1_FILIAL+"|"+SE1->E1_PREFIXO+"|"+SE1->E1_NUM+"|"+SE1->E1_PARCELA+"|"+SE1->E1_TIPO+"|"+SE1->E1_CLIENTE+"|"+SE1->E1_LOJA
    cIdDocFK7 := FINGRVFK7("SE1", cChaveTit)

    If SE1->E1_VALOR <> SE1->E1_SALDO .And. FN022SITCB(SE1->E1_SITUACA)[3]
        If F60ExistV2(cIdDocFK7)
            Help(" ",1,STR0065, , STR0148, 1, 0, , , , , , {STR0150})
            Return .F.
        EndIf
    EndIf

    If Existblock("FA060TRF")
        If !(Execblock("FA060TRF",.F.,.F.)) // Permite travar um titulo
            Return  // para nao ser transferido
        EndIf
    EndIf

    If !_lF060Auto .And. FindFunction("FINTP01") .And. FINTP01(.T.) // Bloquear Transferência quando E1_ORIGEM = FINI055 - Totvs Incorporação
        Return
    EndIf

    //Caso titulos originados pelo SIGALOJA estejam nas carteiras:
    // I = Carteira Caixa Loja
    // J = Carteira Caixa Geral
    // Nao permitir esta operacao, pois ele precisa ser transferido
    // antes pelas rotinas do SIGALOJA.
    If Upper(AllTrim(SE1->E1_SITUACA)) $ "I|J" .AND. Upper(AllTrim(SE1->E1_ORIGEM)) $ "LOJA010|LOJA701|FATA701"
        Help(" ",1,"NOUSACLJ")
        Return
    EndIf

    If FN022SITCB(SE1->E1_SITUACA)[10] //A rotina de transferência não poderá transferir títulos em PDD
        Help(,,"TITPDD",,STR0146/*"Não é permitido transferir um título que está na carteira PDD."*/,1,0,,,,,,{STR0147/*"Utilize a rotina de Controle da Provisão para Devedores Duvidosos"*/})
        Return
    EndIf

    //Bloqueia o Registro do SE1

    If !Softlock("SE1")
        MsUnlock()
        Return
    EndIf

    DbSelectArea("SA1")
    DbSelectArea("FRV")
    FRV->(DbSetOrder(1))

    If FRV->(MsSeek(xFilial("FRV")+SE1->E1_SITUACA))
        M->E1_SITUACA	:= FRV->FRV_CODIGO
        cDescricao 		:= FRV->FRV_DESCRI
        cSituacAtu		:= M->E1_SITUACA +" ("+ cDescricao +")"
        cNatureza		:= FRV->FRV_NATIOF
    Else
        Help(" ",1,"SITCOB",,STR0106,1,0) //"Situação de cobrança não cadastrada. Verifique o cadastro de situações de cobrança."
        Return
    EndIf

    PcoIniLan("000003")

    cPort060	:= SE1->E1_PORTADO
    cAgen060	:= SE1->E1_AGEDEP
    cConta060	:= SE1->E1_CONTA
    cSituacao	:= SE1->E1_SITUACA
    cContrato	:= SE1->E1_CONTRAT
    cNumBco		:= SE1->E1_NUMBCO

    //Validação RMClassis x Protheus (Mensagem Única)

    DbSetOrder(1)

    If cPaisLoc <> "BRA"
        If cPaisLoc == "CHI"
            aTempos  := {"0"+OemToAnsi(STR0057),"24"+OemToAnsi(STR0057),"48"+OemToAnsi(STR0057),"72"+OemToAnsi(STR0057),"96"+OemToAnsi(STR0057),"1 "+OemToAnsi(STR0059),OemToAnsi(STR0058)+"1"+OemToAnsi(STR0059)} // " Horas" # .....# " Semana" # "Mais de " # " Semana"
        Else
            aTempos  := {"","24"+OemToAnsi(STR0057),"48"+OemToAnsi(STR0057),"72"+OemToAnsi(STR0057),"96"+OemToAnsi(STR0057),"1 "+OemToAnsi(STR0059),OemToAnsi(STR0058)+"1"+OemToAnsi(STR0059)} // " Horas" # .....# " Semana" # "Mais de " # " Semana"
        EndIf
    EndIf

    Pergunte("FIN060",.F.)

    //Considerar os abatimentos no bordero para serem enviados ao banco.
    //Normalmente eles nao devem ir mas tem cliente que necessita.
    If lF060ABT
        lMarkAbt := ExecBlock("F060ABT",.F.,.F.)
    EndIf

    //Gravação da metrica de acesso
    If _lMetric
        SetFunName(Iif(cFunName == "RPC", (cFunName + "FINA060"), cFunName))
        FwCustomMetrics():setSumMetric(Alltrim(ProcName()), "financeiro-protheus_qtd-por-acesso_total", 1)
        SetFunName(cFunName)
    EndIf

    While .T.
        lDesc := .F.

        SA1->(DbSeek(cFilial+SE1->E1_CLIENTE+SE1->E1_LOJA))

        If RetGlbLGPD("A1_NOME")
            cCliente := SubStr(SE1->E1_CLIENTE+" "+ SE1->E1_LOJA	+" "+ REPLICATE("*",TamSx3("A1_NOME")[1]),1,50)
        Else
            cCliente := SubStr(SE1->E1_CLIENTE+" "+ SE1->E1_LOJA	+" "+ SA1->A1_NOME,1,50)
        EndIf

        cTitulo	:= SE1->E1_PREFIXO + " " + SE1->E1_NUM 	 + " " + SE1->E1_PARCELA
        cContrat := Subs(SE1->E1_CONTRAT, 1, 3)

        //Se situacao de cobranca possui portador (nao e carteira)
        If FN022SITCB(SE1->E1_SITUACA)[2]	//utiliza banco
            SA6->(DbSeek(xFilial("SA6")+SE1->E1_PORTADO+SE1->E1_AGEDEP+SE1->E1_CONTA+SA6->A6_NOME))
        Else
            SA6->(DbSeek(xFilial("SA6")))
        EndIf

        //Carrega o prtador se a cobranca possui portador (nao e carteira)
        cPortador   := IIf(FN022SITCB(SE1->E1_SITUACA)[2],SE1->E1_PORTADO + " "+ SE1->E1_AGEDEP + " "+ SE1->E1_CONTA+ " "+Subs(SA6->A6_NOME,1,25),"")
        nValor      := SE1->E1_SALDO

        If cPaisLoc <> "BRA"
            SEL->(DbSetOrder(2))
            If SEL->(MsSeek(xFilial("SEL")+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA))) .And. Val(SEL->EL_ACREBAN) > 0
                cClearing   := aTempos[Val(SEL->EL_ACREBAN)+1]
            EndIf
        EndIf

        //Caso a rotina tenha sido chamada através de execauto não apresenta a interface.
        If !_lF060Auto
            If lPanelFin
                oPanelDados := FinWindow:GetVisPanel()
                oPanelDados:FreeChildren()
                aDim := DLGinPANEL(oPanelDados)

                DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0, 0 TO 0, 0 PIXEL STYLE nOR(WS_VISIBLE, WS_POPUP)

                //Observacao Importante quanto as coordenadas calculadas abaixo:
                //--------------------------------------------------------------
                //a funcao DlgWidthPanel() retorna o dobro do valor da area do
                //painel, sendo assim este deve ser dividido por 2 antes da sub-
                //tracao e redivisao por 2 para a centralizacao.

                nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 274) /2
                nEspLin  := 0
            Else
                nEspLarg := 0
                nEspLin  := 0
                DEFINE MSDIALOG oDlg FROM	15,6 TO 275,562 TITLE OemToAnsi(STR0005) PIXEL
            EndIf

            //Painel dos dados
            oPanelD := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,25,25)
            oPanelD:Align := CONTROL_ALIGN_ALLCLIENT

            @ 010, 003+nEspLarg SAY	OemToAnsi(STR0012)	SIZE	21,  7	 OF oPanelD PIXEL  // "Cliente"
            @ 010, 030+nEspLarg MSGET oCliente VAR cCliente 	F3 "SA1"	SIZE 149, 10	 OF oPanelD PIXEL HASBUTTON
            oCliente:lReadOnly := .T.

            If RetGlbLGPD("A1_NOME")
                oCliente:bWhen := {||.F.}
            EndIf

            @ 010, 195+nEspLarg SAY	OemToAnsi(STR0013)	SIZE	21,  7	 OF oPanelD PIXEL  // "Título"
            @ 010, 220+nEspLarg MSGET oTitulo VAR cTitulo	F3 "SE1RDO"	SIZE	54, 10 OF oPanelD PIXEL HASBUTTON
            oTitulo:lReadOnly := .T.

            @ 025, 003+nEspLarg SAY	OemToAnsi(STR0014)	SIZE  26,  7	 OF oPanelD PIXEL  // "Situação"
            @ 025, 030+nEspLarg MSGET cSituacAtu		SIZE 149, 10	 OF oPanelD PIXEL WHEN .F.

            @ 025, 195+nEspLarg SAY	OemToAnsi(STR0015)	SIZE  25,  7	 OF oPanelD PIXEL  // "Contrato"
            @ 025, 220+nEspLarg MSGET cContrato			SIZE  54, 10	 OF oPanelD PIXEL WHEN .F.

            @ 041, 003+nEspLarg SAY	OemToAnsi(STR0016)	SIZE  25,  7	 OF oPanelD PIXEL  // "Portador"
            @ 041, 030+nEspLarg MSGET cPortador			SIZE 149, 10	 OF oPanelD PIXEL WHEN .F.

            If FN022SITCB(SE1->E1_SITUACA)[3] //SE1->E1_SITUACA = "2"
                @ 041 ,195+nEspLarg CHECKBOX oBrut VAR lValorBruto PROMPT OemToAnsi(STR0130) SIZE 82, 10 OF oPanelD PIXEL	// "Estorno Valor Bruto"
            EndIf

            //Parte 2 da tela - Operacao

            @ 070, 003+nEspLarg SAY	OemToAnsi(STR0016)	SIZE 32, 7 OF oPanelD PIXEL  // "Portador"
            @ 070, 030+nEspLarg MSGET oPort060 VAR cPort060 F3 "SA6" ;
                Valid FA060Por2(cPort060,@cAgen060,@cSituacao,@cContrato,@cNumBco,@cConta060,@cClearing,@oCbxClea,aTempos);
                SIZE 25,10 OF oPanelD PIXEL HASBUTTON WHEN lEnabled

            @ 070, 065+nEspLarg SAY	OemToAnsi(STR0017)	SIZE 26, 7 OF oPanelD PIXEL  // "Agncia"
            @ 070, 097+nEspLarg MSGET cAgen060 ;
                Valid	FA060Age2(cPort060,cAgen060,cConta060);
                SIZE 35,10 OF oPanelD PIXEL WHEN lEnabled

            @ 070,135+nEspLarg SAY	OemToAnsi(STR0018)	SIZE 26, 7 OF oPanelD PIXEL  //"Conta"
            @ 070,155+nEspLarg MSGET cConta060	;
                Valid If(FA060Cta2(cPort060,cAgen060,cConta060),.T.,oPort060:SetFocus())	;
                SIZE 50,10 OF oPanelD PIXEL WHEN lEnabled

            If cPaisLoc <> "BRA"
                @ 070,208+nEspLarg SAY   OemToAnsi(STR0060)   SIZE 26, 7 OF oPanelD PIXEL  //"Clearing"
                @ 070,230+nEspLarg MSCOMBOBOX oCbxClea VAR cClearing  ITEMS aTempos SIZE 45,13 OF oPanelD PIXEL
            EndIf

            @ 085, 003+nEspLarg SAY OemToAnsi(STR0014)	SIZE 26, 7 OF oPanelD PIXEL  // "Situação"

            @ 085, 030+nEspLarg MSGET oSituacao VAR M->E1_SITUACA  F3 "FRV" PICTURE "@!" ;
                Valid F60VldPix(M->E1_SITUACA) .And. ;
							(IIf(FA060Sit(M->E1_SITUACA, cPort060,oSituacao,oDescricao,@cNatureza,@cDescricao) .And. ;
                            F060Valor(M->E1_SITUACA) .And. ;
                            Fa060VerSit(M->E1_SITUACA,@cPort060,@cAgen060,@cConta060,@nValCred,@cFormula,@nTaxaDesc,@dDataMov,@cHistorico,;
                                    @nValDesc,@lDesc,@nRetencao,@cClearing,@oCbxClea,aTempos),(oDescricao:Refresh(),.T.),oSituacao:SetFocus()));
                SIZE 35, 10 OF oPanelD PIXEL HASBUTTON

            @ 085, 065+nEspLarg SAY STR0107 SIZE 28, 7 	OF oPanelD PIXEL  	//'Descri?o'
            @ 085, 097+nEspLarg MSGET oDescricao VAR cDescricao SIZE 120, 10 OF oPanelD PIXEL WHEN .F.

            @ 100, 003+nEspLarg SAY OemToAnsi(STR0015) 	SIZE 25, 7 OF oPanelD PIXEL  // "Contrato"
            @ 100, 030+nEspLarg MSGET cContrato			SIZE 45,10 OF oPanelD PIXEL WHEN lEnabled

            @ 100, 090+nEspLarg SAY	 OemToAnsi(STR0019)	SIZE 42, 7 OF oPanelD PIXEL  // "No. Portador"
            @ 100, 126+nEspLarg MSGET cNumBco 			SIZE 88,10 OF oPanelD PIXEL WHEN lEnabled

            @ 001, 001+nEspLarg TO 060, 280+nEspLarg LABEL OemToAnsi(STR0010) OF oPanelD PIXEL  // "Posição Atual"
            @ 060, 001+nEspLarg TO 115, 280+nEspLarg LABEL OemToAnsi(STR0011) OF oPanelD PIXEL  // "Transferir para"

            If lPanelFin
                // define dimenção da dialog
                oDlg:nWidth := aDim[4]-aDim[2]

                ACTIVATE MSDIALOG oDlg ON INIT (FaMyBar(oDlg,{|| (,nOpca:=1,;
                    If(FA060TelOK(M->E1_SITUACA, cPort060, cAgen060, cConta060, lDesc, cCliente, cTitulo, cSituacao, cContrato, cPortador),;
                        oDlg:End(),;
                        nOpca := Fa060Erro()))},{|| (nOpca:=0,oDlg:End())},,,.F.),oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1]))

                DbSelectArea(cAlias)
                FinVisual(cAlias,FinWindow,(cAlias)->(Recno()))

            Else
                DEFINE SBUTTON FROM 118, 224 TYPE 1 ACTION (nOpca:=1,;
                    If(FA060TelOK(M->E1_SITUACA, cPort060, cAgen060, cConta060, lDesc, cCliente, cTitulo, cSituacao, cContrato, cPortador),;
                        oDlg:End(), nOpca := 0)) ENABLE OF oPanelD

                DEFINE SBUTTON FROM 118, 251 TYPE 2 ACTION (nOpca:=0,oDlg:End()) ENABLE OF oPanelD

                ACTIVATE MSDIALOG oDlg CENTERED
            EndIf
            cSituacao := M->E1_SITUACA
        Else
            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTSITUACA'})) >0
                If FindFunction("FINTP01") .And. FINTP01(.F.) //Validação TIN
                    cSituacao := aRotAuto[nPos][2]
                    If cSituacao <> "0"
                        aRmTinCa := RMTINCA()
                        If aRmTinCa[1]
                            cSituacao := aRmTinCa[2]
                        Else
                            Return (.F.)
                        EndIf
                    EndIf
                Else
                    cSituacao := aRotAuto[nPos][2]
                EndIf
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTNUMBCO'})) > 0
                cNumBco := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTBANCO'})) > 0
                cPort060 := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTAGENCIA'})) > 0
                cAgen060 := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTCONTA'})) > 0
                cConta060 := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTDESCONT'})) > 0
                nValDesc := nVlrDesc := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTCREDIT'})) > 0
                nValCred := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTIOF'})) > 0
                nVlrIOF := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTDATAMOV'})) > 0
                dDataMov := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto,{|x| x[1]='AUTGRVFI2'})) > 0
                lGrvFI2 := aRotAuto[nPos][2]
            EndIf

            If (nPos := aScan(aRotAuto, {|x|x[1] == 'AUTTXMOEDA'})) > 0
                nTxMoeda := aRotAuto[nPos][2]
            EndIf

            nTaxaDesc 	:= 0
            nTxIOF		:= 0

            If FA060Cta2(cPort060,cAgen060,cConta060) .And.	FA060Sit(cSituacao, cPort060,oSituacao,oDescricao,@cNatureza,@cDescricao) .And. ;
                F060Valor(cSituacao) .And. Fa060VerSit(cSituacao,@cPort060,@cAgen060,@cConta060,@nValCred,@cFormula,@nTaxaDesc,@dDataMov,@cHistorico,@nValDesc,@lDesc,@nRetencao,@cClearing,@oCbxClea,aTempos) .And. F060VldNat(cNatureza, cSituacao)
                nOpca := 1

                //Por execauto é verificado se os valores para carteira descontada é igual ao saldo disponível do título
                If FN022SITCB(cSituacao)[3] // cSituacao $ "27"
                    nSldAut := SE1->E1_SALDO
                    If MV_PAR09 == 1 //Considera acrescimos/decrescimos
                        nSldAut += SE1->E1_SDACRES - SE1->E1_SDDECRE
                    EndIf
                    If MV_PAR08 == 1 //Considera Abatimentos
                        nSldAut -= nAbatim
                    EndIf
                    If nSldAut <> (nValCred + nVlrIOF + nValDesc)
                        nOpca := 0
                        Help(,,,"F060AUTOVLR",STR0133, 1, 0) //Soma do valor de crédito, IOF e desconto diferente do saldo do título.
                    EndIf
                EndIf
                If ! F60VldPix(cSituacao)  // Chamada de help ja na função de validação
                    nOpca := 0
                EndIf
            Else
                nOpca := 0
            EndIf
        EndIf

        If nOpca != 2
            Exit
        EndIf
    EndDo

    If nOpcA == 1
        DbSelectArea("SA6")
        SA6->(DbSetOrder(1))
        If Empty(cPort060)
            SA6->(DbSeek(xFilial()+SE1->E1_PORTADO+SE1->E1_AGEDEP+SE1->E1_CONTA))
        Else
            SA6->(DbSeek(xFilial()+cPort060+cAgen060+cConta060))
        EndIf

        DbSelectArea("SE1")
        aAreaSe1  := SE1->(GetArea())
        cFilBor   := xFilial("SEA")
        nListaSEA := 0
        nMoedaBco := Max(SA6->A6_MOEDA, 1)

        If !Empty(SE1->E1_NUMBOR)
            If Fa150PesqBord(SE1->E1_NUMBOR, @cFilBordero)
                 cFilBor := cFilBordero
            EndIf

            If !Empty(SE1->E1_IDCNAB)
                nListaSEA := TotalTitBo(cFilBor, SE1->E1_NUMBOR)
            EndIf
        EndIf

        cChavEA	 := cFilBor+SE1->(E1_NUMBOR+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)
        cSituAnt := SE1->E1_SITUACA
        cPortAnt := SE1->E1_PORTADO

        If cSituAnt != cSituacao
            cPadrao := fA060Pad(cSituacao, .F.)
            lPadrao := VerPadrao(cPadrao)
        EndIf

        lVldCtbOff := F060VldCtb()

        //Se existe contabilização offline e o parâmetro for igual a não OU não encontre o LP
        If lVldCtbOff
            If MV_PAR14 == 2
                lCtbOfflin := .T.
            EndIf
        ElseIf MV_PAR03 == 2
            lCtbOfflin := .T.
        EndIf

        BEGIN TRANSACTION
            //Transferido para situacao de protesto
            If FN022SITCB(cSituacao)[4] .And. !FN022SITCB(cSituAnt)[4]
                SA1->(DbSetOrder(1))

                If SA1->(DbSeek(cFilial+SE1->E1_CLIENTE+SE1->E1_LOJA))
                    Reclock("SA1")
                    SA1->A1_TITPROT := A1_TITPROT + 1
                    SA1->A1_DTULTIT := dDataBase
                    SA1->(MsUnlock())
                EndIf

                lProtesto := .T.

                DbSelectArea("SE1")

                If cPaisLoc == "CHI"
                    RecLock("SE1",.F.)

                    If SubStr(SE1->E1_TIPO,1,2) == "CH"
                        SE1->E1_TIPO := "CHP"
                    ElseIf SubStr(SE1->E1_TIPO,1,2) == "LT"
                        SE1->E1_TIPO := "LTP"
                    EndIf

                    SE1->(MsUnlock())
                EndIf
            EndIf

            //Atualizo o numero de protestos dos clientes quando transfiro de uma situacao de protesto para carteira que nao tenha protesto
            If !FN022SITCB(cSituacao)[4] .And. FN022SITCB(cSituAnt)[4]
                SA1->(DbSetOrder(1))

                //Atualiza Títulos protestados
                If SA1->(DbSeek(cFilial+SE1->(E1_CLIENTE+E1_LOJA)))
                    Reclock("SA1")
                    SA1->A1_TITPROT := A1_TITPROT - 1
                    SA1->(MsUnlock())
                EndIf

                lCancProt := .T.
            EndIf

            DbSelectArea("SE1")
            lTemTela := !(IsBlind())

            If nListaSEA > 1 .And. IIf(!lTemTela, lGrvFI2, MsgYesNo(STR0079, STR0052)) // "Deseja cadastrar instrução de cobrança para posterior envio ao banco?"
                Fa040AltOk({"E1_SITUACA"}, {cSituacao}, lTemTela, .F., lProtesto, lCancProt)
                F040GrvFI2()
            ElseIf nListaSEA == 1
                ExluirFI2(cFilBor, SE1->E1_NUMBOR)
            EndIf

            //Transferido para situacao com portador
            If FN022SITCB(cSituacao)[2] .And. cSituacao != cSituAnt
                //Atualiza data vencto real c/retenção Bancária se possuir retencao bancaria, grava a data de vencimento
                If MV_PAR10 == 1 .And. nRetencao > 0
                    dBase :=	SE1->E1_VENCREA

                    For nJ := 1 To nRetencao
                        dBase := DataValida(dBase+1,.T.)
                    Next nJ

                    Reclock("SE1")
                    SE1->E1_VENCREA := dBase
                    SE1->(MsUnlock())

                    //Atualiza tambem os registros agregados
                    F060AtuAgre()
                EndIf

                //DDA - Debito Direto Autorizado
                If SE1->E1_OCORREN $ "53/52"
                    Reclock("SE1")
                    SE1->E1_OCORREN := "01"
                    SE1->(MsUnlock())
                EndIf
            EndIf

            //Transferido para carteira (situacao anterior com portador)
            If MV_PAR10 == 1 .And. FN022SITCB(cSituacao)[1] .And. FN022SITCB(cSituAnt)[2]
                //Atualiza data vencto real s/retenção Bancária se considera retencao bancaria
                Reclock("SE1")
                SE1->E1_VENCREA := DataValida(E1_VENCORI,.T.)

                If SE1->E1_VENCREA < SE1->E1_VENCTO
                    SE1->E1_VENCREA := DataValida(E1_VENCTO,.T.)
                EndIf

                SE1->(MsUnlock())

                //Atualiza tambem os registros agregados
                F060AtuAgre()
            EndIf

            //Estorno de cobrança descontada -> carteira
            If (lEstCobDes := (FN022SITCB(cSituAnt)[3] .And. cSituacao != cSituAnt))
                If GetMV("MV_ESTDESC") == "S"
                    /*Só dever  ser buscada a baixa no SE5 quando o titulo a ser
                    transferido para carteira não pertença a um bordero descontado
                    pois o valor que  informado no momento da transferencia banco
                    p/carteira se perde por não se encontrar o movimento no SE5,
                    pois o movimento no SE5 p/ bord.descontados  o do bordero e
                    não o do titulo.*/

                    aBaixa := Sel070Baixa("TR /", SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, Nil, Nil, SE1->E1_CLIENTE, SE1->E1_LOJA, nValDesc, .T.)
                    nValCred := nValDesc

                    If lF060DGV
                        nValCred := ExecBlock("F060DGV", .F., .F., {nValCred, nValDesc})
                    EndIf

                    If SE1->E1_MOEDA != nMoedaBco
                        If !Empty(cIdDocFK7) .And. !Empty(cTmpFK5 := F060MovBan(cIdDocFK7, SA6->A6_COD, SA6->A6_AGENCIA, SA6->A6_NUMCON))
                            If !lF060DGV
                                nValCred := (cTmpFK5)-> FK5_VALOR
                            EndIf

                            nTxMoeda := (cTmpFK5)->FK5_TXMOED
                            nVlMoed2 := (cTmpFK5)->FK5_VLMOE2
                        ElseIf Len(aBaixaSE5) >= 36 .And. (nVlMoed2 := aBaixaSE5[1,36]) > 0
                            nTxMoeda := NoRound((nValCred / nVlMoed2), nCasDec)
                        EndIf

                        If !Empty(cTmpFK5)
                            (cTmpFK5)->(DbCloseArea())
                        EndIf

                        If _oMovTrfDB != Nil
                            _oMovTrfDB:Destroy()
                            _oMovTrfDB := Nil
                        EndIf
                    EndIf

                    If !Empty(cCamposE5)
                        cCamposE5 += "|"
                    EndIf

                    cCamposE5 := "{"
                    cCamposE5 += "{'E5_DTDIGIT'  , dDataBase}"
                    cCamposE5 += ",{'E5_PREFIXO' , SE1->E1_PREFIXO}"
                    cCamposE5 += ",{'E5_NUMERO'  , SE1->E1_NUM}"
                    cCamposE5 += ",{'E5_PARCELA' , SE1->E1_PARCELA}"
                    cCamposE5 += ",{'E5_CLIFOR'  , SE1->E1_CLIENTE}"
                    cCamposE5 += ",{'E5_CLIENTE' , SE1->E1_CLIENTE}"
                    cCamposE5 += ",{'E5_LOJA'    , SE1->E1_LOJA}"
                    cCamposE5 += ",{'E5_TIPO'    , SE1->E1_TIPO}"
                    cCamposE5 += ",{'E5_DTDISPO' , CToD('"+DToC(dDataMov)+"')}"
                    cCamposE5 += ",{'E5_LA'      , '"+ IIf(!lCtbOfflin .And. lPadrao, "S", "N")+"'}"
                    cCamposE5 += ",{'E5_BANCO'   , SE1->E1_PORTADO }"
                    cCamposE5 += ",{'E5_AGENCIA' , SE1->E1_AGEDEP  }"
                    cCamposE5 += ",{'E5_CONTA'   , SE1->E1_CONTA   }"
                    cCamposE5 += ",{'E5_MOTBX'   , 'NOR' }"
                    cCamposE5 += ",{'E5_TIPODOC', 'E2' }"

                    If lSpbInUse
                        cCamposE5 += ",{'E5_MODSPB', '1' }"
                    EndIf

                    cCamposE5 += "}"
                    oModelBx := FwLoadModel("FINM030")
                    oModelBx:SetOperation(MODEL_OPERATION_INSERT)
                    oModelBx:Activate()
                    oModelBx:SetValue("MASTER", "E5_GRV", .T.)
                    oModelBx:SetValue("MASTER", "HISTMOV", cHistorico)
                    oModelBx:SetValue("MASTER", "NOVOPROC", .T.)

                    //Dados do Processo - Define a chave da FK5 no IDORIG
                    oSubFKA := oModelBx:GetModel("FKADETAIL")
                    oSubFK5 := oModelBx:GetModel("FK5DETAIL")
                    oSubFK6 := oModelBx:GetModel("FK6DETAIL")
                    cIdFK5 	:= FwUUIDV4()

                    oSubFKA:SetValue("FKA_IDORIG", cIdFK5)
                    oSubFKA:SetValue("FKA_TABORI", "FK5")

                    cSequencia := If(Len(aBaixa) > 0, aBaixaSE5[01,09], "")

                    oSubFK5:SetValue("FK5_IDDOC" , cIdDocFK7)
                    oSubFK5:SetValue("FK5_DATA"  , dDataMov)
                    oSubFK5:SetValue("FK5_NATURE", If (Empty(cNatureza), SE1->E1_NATUREZ, cNatureza))
                    oSubFK5:SetValue("FK5_RECPAG", "P")
                    oSubFK5:SetValue("FK5_TPDOC" , "E2")
                    oSubFK5:SetValue("FK5_ORIGEM", FunName())
                    oSubFK5:SetValue("FK5_SEQ"   , cSequencia)
                    oSubFK5:SetValue("FK5_CCUSTO", SE1->E1_CCUSTO)
                    oSubFK5:SetValue("FK5_HISTOR", cHistorico)
                    oSubFK5:SetValue("FK5_MOEDA" , StrZero(nMoedaBco,2))
                    oSubFK5:SetValue("FK5_BANCO" , SE1->E1_PORTADO)
                    oSubFK5:SetValue("FK5_AGENCI", SE1->E1_AGEDEP)
                    oSubFK5:SetValue("FK5_CONTA" , SE1->E1_CONTA)
                    oSubFK5:SetValue("FK5_DOC"   , SE1->E1_NUMBOR)
                    oSubFK5:SetValue("FK5_DTDISP", dDataMov)
                    oSubFK5:SetValue("FK5_TXMOED", nTxMoeda)
                    oSubFK5:SetValue("FK5_FILORI", SE1->E1_FILORIG)

                    If cPaisloc != "BRA"
                        nDecs := MsDecimais(nMoedaBco)
                        oSubFK5:SetValue("FK5_VALOR",  nValCred)
                        oSubFK5:SetValue("FK5_VLMOE2", Round(NoRound(xMoeda(nValCred,SE1->E1_MOEDA,nMoedaBco,dDataMov,nDecs+1), nDecs+1), nDecs))
                    Else
                        oSubFK5:SetValue("FK5_VALOR",  nValCred)

                        If nVlMoed2 > 0
                            oSubFK5:SetValue("FK5_VLMOE2", nVlMoed2)
                        Else
                            oSubFK5:SetValue("FK5_VLMOE2", Round(NoRound(xMoeda(nValCred, nMoedaBco, SE1->E1_MOEDA, dDataMov, nDecs+1), nDecs+1), nDecs))
                        EndIf
                    EndIf

                    If lSpbInUse
                        oSubFK5:SetValue("FK5_MODSPB", "1")
                    EndIf

                    If nVlrIOF > 0 .And. cPaisloc=="BRA"
                        If !oSubFK6:IsEmpty()
                            oSubFK6:AddLine()
                            oSubFK6:GoLine(oSubFK6:Length())
                        EndIf

                        oSubFK6:SetValue('FK6_IDFK6',  GetSxEnum('FK6','FK6_IDFK6'))
                        oSubFK6:SetValue('FK6_TPDOC',  "EI")
                        oSubFK6:SetValue('FK6_VALCAL', nVlrIOF)
                        oSubFK6:SetValue('FK6_VALMOV', nVlrIOF)
                        oSubFK6:SetValue('FK6_RECPAG', "R")
                        oSubFK6:SetValue('FK6_IDORIG', cIdFK5)
                        oSubFK6:SetValue('FK6_TABORI', 'FK5')
                        oSubFK6:SetValue('FK6_HISTOR', STR0109)		//"Cancelamento de cob de IOF"
                        oSubFK6:SetValue('FK6_GRVSE5', .T.)
                        oSubFK6:SetValue('FK6_TPDESC', If(SE1->E1_TPDESC == "I","2","1"))
                    EndIf

                    oModelBx:SetValue("MASTER", "E5_CAMPOS", cCamposE5) //Informa os campos da SE5 que serão gravados indepentes de FK5

                    If oModelBx:VldData()
                        oModelBx:CommitData()
                        SE5->(DbGoTo(oModelBx:GetValue("MASTER", "E5_RECNO")))
                        nRecSe5Trf := SE5->(Recno())
                    Else
                        lRet := .F.
                        cLog := cValToChar(oModelBx:GetErrorMessage()[4]) + ' - '
                        cLog += cValToChar(oModelBx:GetErrorMessage()[5]) + ' - '
                        cLog += cValToChar(oModelBx:GetErrorMessage()[6])
                        Help(,,"M060TRFS4",,cLog, 1, 0)
                    EndIf

                    oModelBx:DeActivate()
                    oModelBx:Destroy()
                    oModelBx:= Nil

                    //Verifica se a natureza esta cadastrada. Se nao, cria.
                    Fa060Nat(2,cNatureza)

                    //permite manipulacao do SE5 neste momento
                    If Existblock("FA60SIT2")
                        Execblock("FA60SIT2",.F.,.F.)
                    EndIf

                    AtuSalBco(SE1->E1_PORTADO, SE1->E1_AGEDEP, SE1->E1_CONTA,  dDataMov, nValCred, "-")
                    MsUnlock()
                EndIf
            ElseIf cPaisLoc == "BRA" .And. nTxMoeda != 0 .And. SE1->E1_MOEDA == 1 .And. SE1->E1_MOEDA == nMoedaBco
                nTxMoeda := 0
            EndIf

            //Retorno para carteira os abatimentos do titulo independente de serem considerados
            If cSituacao != cSituAnt .And. (lMarkAbt .Or. FN022SITCB(cSituAnt)[3])
                If (nAbatim > 0 .Or. lMarkAbt)
                    cKeySE1  := xFilial("SE1")+SE1->(E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA)
                    aAreaSe1 := SE1->(GetArea())
                    DbSelectArea("SE1")
                    SE1->(DbSetOrder(2))
                    SE1->(DbSeek(cKeySE1))

                    While SE1->(!Eof()) .And. SE1->(E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA) == cKeySE1
                        If SE1->E1_TIPO $ MVABATIM
                            RecLock("SE1")
                            SE1->E1_PORTADO := cPort060
                            SE1->E1_AGEDEP  := cAgen060
                            SE1->E1_SITUACA := cSituacao
                            SE1->E1_CONTRAT := cContrato
                            SE1->E1_NUMBCO  := cNumBco
                            SE1->E1_MOVIMEN := dDataMov
                            SE1->E1_CONTA	 := cConta060

                            If cSituacao != cSituAnt
                                SE1->E1_NUMBOR := " "
                                SE1->E1_DATABOR:= CToD("  /  /  ")
                            EndIf
                            SE1->(MsUnlock())
                        EndIf

                        SE1->(DbSkip())
                    EndDo

                    RestArea(aAreaSe1)
                EndIf
            EndIf

            If cPaisLoc != "BRA" .And. FN022SITCB(cSituacao)[6]		//cSituacao $ "1H"
                //Calculo para o tempo de Clearing, o tempo de Clearing esta
                //sendo calculado somente com dias uteis corridos.
                //Se o Tempo for de mais de uma semana, coloco uma data de
                //aqui a dez anos assim tem que ser acreditado manualmente.
                dBase := Iif(SE1->E1_VENCREA <= dDataBase, dDataBase, SE1->E1_VENCREA)

                nPos := AScan(aTempos, cClearing) - 1
                nDias := Iif(nPos >= 1 .And. nPos <= 5, nPos, 3650)

                If nDias == 3650
                    dBase	+=	3650
                Else
                    aFeriados:=RetFeriados()

                    While nDias > 0
                        dBase++

                        If AScan(aFeriados,Dtos(dBase)) == 0 .And. Dow(dBase) <> 1 .And. Dow(dBase) <> 7
                            nDias--
                        EndIf
                    EndDo
                EndIf

                RecLock("SE1")
                SE1->E1_DTACRED := dBase
                SE1->(MsUnlock())
            EndIf

            lBxCobDesc := MV_PAR04 == 1 .And. FN022SITCB(cSituacao)[3] // Bx. cobranca descontada
            nValSaldo  := SE1->(E1_SALDO+E1_SDACRES-E1_SDDECRE)
            nVlMoed2   := nValCred

            //Tratamento para transferência entre moedas diferentes
            If !lEstCobDes .And. SE1->E1_MOEDA <> nMoedaBco .And. cPaisLoc == "BRA"
                If SE1->E1_MOEDA == 1
                    nValSaldo := Round(xMoeda(nValSaldo, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, 0, nTxMoeda), 2)

                    If !lBxCobDesc
                        nValCred := Round(xMoeda(nValCred, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, 0, nTxMoeda), 2)
                    EndIf

                    If nVlrDesc > 0
                        nVlrDesc := Round(xMoeda(nVlrDesc, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, 0, nTxMoeda), 2)
                    EndIf

                    If nVlrIOF > 0
                        nVlrIOF := Round(xMoeda(nVlrIOF, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, 0, nTxMoeda), 2)
                    EndIf
                ElseIf nMoedaBco == 1
                    nValSaldo := Round(xMoeda(nValSaldo, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)

                    If !lBxCobDesc
                        nValCred := Round(xMoeda(nValCred, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)
                    EndIf

                    If nVlrDesc > 0
                        nVlrDesc := Round(xMoeda(nVlrDesc, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)
                    EndIf

                    If nVlrIOF > 0
                        nVlrIOF := Round(xMoeda(nVlrIOF, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)
                    EndIf
                Else
                    nValSaldo := Round(xMoeda(nValSaldo, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, SE1->E1_TXMOEDA, nTxMoeda), 2)

                    If !lBxCobDesc
                        nValCred := Round(xMoeda(nValCred, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, SE1->E1_TXMOEDA, nTxMoeda), 2)
                    EndIf

                    If nVlrDesc > 0
                        nVlrDesc := Round(xMoeda(nVlrDesc, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, SE1->E1_TXMOEDA, nTxMoeda), 2)
                    EndIf

                    If nVlrIOF > 0
                        nVlrIOF := Round(xMoeda(nVlrIOF, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, SE1->E1_TXMOEDA, nTxMoeda), 2)
                    EndIf
                EndIf
            EndIf

            //Baixa da cobranca descontada (opcional)
            If lBxCobDesc .And. cSituacao != cSituAnt .And. cPaisLoc != "PTG"
                aAreaSe1 := SE1->(GetArea())

                //Atualiza Saldo de Duplicadas do Cliente
                SA1->(DbSetOrder(1))
                If SA1->((DbSeek(cFilial+SE1->E1_CLIENTE+SE1->E1_LOJA)))
                    AtuSalDup("-", SE1->E1_SALDO, SE1->E1_MOEDA, SE1->E1_TIPO, Nil, SE1->E1_EMISSAO)
                EndIf

                aVetBaixa := {;
                {"E1_PREFIXO",   SE1->E1_PREFIXO,   Nil},;
                {"E1_NUM",       SE1->E1_NUM,       Nil},;
                {"E1_PARCELA",   SE1->E1_PARCELA,   Nil},;
                {"E1_TIPO",      SE1->E1_TIPO,      Nil},;
                {"AUTMOTBX",     "NOR",             Nil},;
                {"AUTDTBAIXA",   dDataBase,         Nil},;
                {"AUTDTCREDITO", dDataBase,         Nil},;
                {"AUTHIST",      STR0056,           Nil},;
                {"AUTTXMOEDA",   nTxMoeda,          Nil},;
                {"AUTSITUCOB",   cSituacao,         Nil},;
                {"AUTDESCONT",   (nVlrDesc+nVlrIOF),Nil},;
                {"AUTBANCO",     cPort060,          Nil},;
                {"AUTAGENCIA",   cAgen060,          Nil},;
                {"AUTCONTA",     cConta060,         Nil},;
                {"AUTREGBXPRIN", 0,                 Nil}}

                cSituaAnt := cSituacao
                cNatAnt   := cNatureza

                //Efetiva a baixa do titulo:
                MSExecAuto( {|a, b| FINA070(a, b)}, aVetBaixa, 3)
                Pergunte("FIN060",.F.)

                If lMsErroAuto
                    MostraErro()
                    DisarmTransaction()
                    lRet := .F.
                    BREAK
                EndIf

                cNatureza := cNatAnt
                cSituacao := cSituaAnt
                RestArea(aAreaSe1)

                //Baixo todos os abatimentos do titulo independente de serem considerados
                If nAbatim > 0
                    cKeySE1 := xFilial("SE1")+SE1->(E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA)
                    cTitPai	:= SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO+SE1->E1_CLIENTE+SE1->E1_LOJA

                    DbSelectArea("SE1")
                    SE1->(DbSetOrder(2))
                    SE1->(DbSeek(cKeySE1))

                    If lTitpaiSE1 .And. (nOrdTitPai := OrdTitpai()) > 0
                        DbSetOrder(nOrdTitPai)
                        If	DbSeek(xFilial("SE1")+cTitPai)
                            bWhile  := {|| !EOF() .And. AllTrim(SE1->E1_TITPAI) == AllTrim(cTitPai)}
                        Else
                            SE1->(DbSetOrder(2))
                            SE1->(DbSeek(cKeySE1))
                        EndIf
                    EndIf

                    While Eval(bWhile)
                        If E1_TIPO $ MVABATIM
                            RecLock("SE1")
                            SE1->E1_SALDO		:= 0
                            SE1->E1_BAIXA		:= dDataBase
                            SE1->E1_MOVIMEN		:= dDataMov
                            SE1->E1_STATUS		:= "B"
                            SE1->E1_SDACRES		:= 0
                            SE1->E1_SDDECRE		:= 0
                            SE1->E1_PORTADO		:= cPort060
                            SE1->E1_AGEDEP		:= cAgen060
                            SE1->E1_CONTA		:= cConta060
                            SE1->E1_SITUACA		:= cSituacao
                            SE1->E1_CONTRAT		:= cContrato
                        EndIf
                        DbSkip()
                    EndDo

                    RestArea(aAreaSe1)
                EndIf

                FwFreeArray(aAreaSe1)

                If lRet .And. SE1->E1_FLUXO != "N" // Verifica se atualiza o saldo da natureza
                    cSeq := F060SeqBx(cIdDocFK7) 
                    FK1->(DbSetOrder(2)) //FK1_FILIAL+FK1_IDDOC+FK1_SEQ
                    If FK1->(dbSeek(xFilial("FK1", SE1->E1_FILORIG) + cIdDocFK7 + cSeq))
                        AtuSldNat(FK1->FK1_NATURE, FK1->FK1_DATA, FK1->FK1_MOEDA, "3", "R", FK1->FK1_VALOR, FK1->FK1_VLMOE2, "+",,FunName(),"SE1",SE1->(Recno()),nOpcx)
                    EndIf
                EndIf
            EndIf

            //Transferencia para situacao descontada
            If FN022SITCB(cSituacao)[3] .And. cSituacao != cSituAnt
                //Se nao for adiantamento, verifico os abatimentos
                If !SE1->E1_TIPO $ MVRECANT + "/" + MV_CRNEG
                    SumAbatRec(SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_MOEDA, "V",, @nTotAbImp)
                EndIf

                //Verifica se a natureza esta cadastrada. Se nao, cria.
                Fa060Nat(1, cNatureza)

                //Controla a geracao do movimento bancario de transferencia
                lGerMovTrf := .T.

                //MOVIMENTO DE BAIXA, Controla saldo do titulo na compensacao do cheque
                If cSLDBXCR == "C" .And. cSituacao == cSitCobCau
                    If (lGerMovTrf := (cPaisloc == "BRA" .And. nVLTRANS != 1))
                        //MOVIMENTO BANCARIO DA TRANSFERENCIA
                        If AllTrim(SE1->E1_ORIGEM) == "FINA460" .And. SuperGetMv("MV_GRSEFLQ",,.F.)
                            DbSelectArea("SEF")
                            DbSetOrder(7)

                            If SEF->(DbSeek(xFilial("SEF")+"R"+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO))
                                RecLock("SEF",.F.)
                                SEF->EF_DTCOMP := dDataMov
                                MsUnlock()
                            EndIf
                        EndIf
                    EndIf
                EndIf

                If lGerMovTrf //MOVIMENTO BANCÁRIO DA TRANSFERENCIA
                    If lBxCobDesc .And. (nPos := Ascan(aVetBaixa, {|x| x[1] == "AUTREGBXPRIN"})) > 0 .And. aVetBaixa[nPos,2] > 0
                        SE5->(DbGoto(aVetBaixa[nPos,2]))
                        nValCred   := SE5->E5_VALOR
                        nVlMoed2   := SE5->E5_VLMOED2
                        cSequencia := SE5->E5_SEQ
                    Else
                        cSequencia := FaNxtSeqBx() //Sequencia da baixa do titulo + 1
                    EndIf

                    cCamposE5 := "{"
                    cCamposE5 += " {'E5_DTDIGIT',   dDataBase}"
                    cCamposE5 += ",{'E5_PREFIXO',   SE1->E1_PREFIXO}"
                    cCamposE5 += ",{'E5_NUMERO',    SE1->E1_NUM}"
                    cCamposE5 += ",{'E5_PARCELA',   SE1->E1_PARCELA}"
                    cCamposE5 += ",{'E5_CLIFOR',    SE1->E1_CLIENTE}"
                    cCamposE5 += ",{'E5_CLIENTE',   SE1->E1_CLIENTE}"
                    cCamposE5 += ",{'E5_LOJA',      SE1->E1_LOJA}"
                    cCamposE5 += ",{'E5_TIPO',      SE1->E1_TIPO}"
                    cCamposE5 += ",{'E5_DTDISPO',   CToD('"+DToC(dDataMov)+"')}"
                    cCamposE5 += ",{'E5_LA','"      + IIf(!lCtbOfflin .And. lPadrao, "S", "N") + "'}"
                    cCamposE5 += ",{'E5_BANCO','"   + cPort060+"' }"
                    cCamposE5 += ",{'E5_AGENCIA','" + cAgen060+"' }"
                    cCamposE5 += ",{'E5_CONTA','"   + cConta060+"'}"
                    cCamposE5 += ",{'E5_MOTBX',     'NOR'}"

                    If lSpbInUse
                        cCamposE5 += ",{'E5_MODSPB', '1' }"
                    EndIf

                    cCamposE5 += ",{'E5_VLDESCO'," + cValTochar(nVlrDesc) + "} }"

                    oModelBx := FwLoadModel("FINM030") //Model de movimento bancário
                    oModelBx:SetOperation(MODEL_OPERATION_INSERT) //Inclusao
                    oModelBx:Activate()
                    oModelBx:SetValue("MASTER", "E5_GRV", .T.) //Informa se vai gravar SE5 ou não
                    oModelBx:SetValue("MASTER", "HISTMOV", cHistorico) //Informa os campos da SE5 que serão gravados indepentes de FK5
                    oModelBx:SetValue("MASTER", "NOVOPROC", .T.) //Informa que a inclusão será feita com um novo número de processo

                    //Dados do Processo - Define a chave da FK5 no IDORIG
                    oSubFKA := oModelBx:GetModel("FKADETAIL")
                    oSubFK5 := oModelBx:GetModel("FK5DETAIL")
                    oSubFK6 := oModelBx:GetModel("FK6DETAIL")

                    cIdFK5 	 := FwUUIDV4()

                    oSubFKA:SetValue("FKA_IDORIG", cIdFK5)
                    oSubFKA:SetValue("FKA_TABORI", "FK5")
                    oSubFK5:SetValue("FK5_IDDOC" , cIdDocFK7)
                    oSubFK5:SetValue("FK5_DATA"  , dDataMov)
                    oSubFK5:SetValue("FK5_NATURE", If (Empty(cNatureza), SE1->E1_NATUREZ, cNatureza))
                    oSubFK5:SetValue("FK5_RECPAG", "R")
                    oSubFK5:SetValue("FK5_TPDOC" , "TR")
                    oSubFK5:SetValue("FK5_ORIGEM", FunName())
                    oSubFK5:SetValue("FK5_SEQ"   , cSequencia)
                    oSubFK5:SetValue("FK5_CCUSTO", SE1->E1_CCUSTO)
                    oSubFK5:SetValue("FK5_HISTOR", cHistorico)
                    oSubFK5:SetValue("FK5_MOEDA" , StrZero(nMoedaBco,2))
                    oSubFK5:SetValue("FK5_BANCO" , cPort060)
                    oSubFK5:SetValue("FK5_AGENCI", cAgen060)
                    oSubFK5:SetValue("FK5_CONTA" , cConta060)
                    oSubFK5:SetValue("FK5_DTDISP", dDataMov)
                    oSubFK5:SetValue("FK5_TXMOED", nTxMoeda)
                    oSubFK5:SetValue("FK5_FILORI", SE1->E1_FILORIG)

                    If cPaisloc != "BRA"
                        nDecs := MsDecimais(nMoedaBco)
                        oSubFK5:SetValue("FK5_VALOR", Round(NoRound(xMoeda(nValCred, SE1->E1_MOEDA, nMoedaBco, dDataMov, nDecs+1), nDecs+1), nDecs))
                        oSubFK5:SetValue("FK5_VLMOE2", nValCred)
                    Else
                        oSubFK5:SetValue("FK5_VALOR",  nValCred)
                        oSubFK5:SetValue("FK5_VLMOE2", nVlMoed2)
                    EndIf

                    cCamposE5 += ",{'E5_VLDESCO'," + cValTochar(nVlrDesc) + "}}"

                    If lSpbInUse
                        oSubFK5:SetValue("FK5_MODSPB", "1")
                    EndIf

                    //Desconto
                    If nVlrDesc <> 0
                        //Adicionando valores acessórios (Multa, Desconto, Juros, Acréscimo, Decréscimo)
                        If !oSubFK6:IsEmpty()
                            oSubFK6:AddLine()
                            oSubFK6:GoLine(oSubFK6:Length())
                        EndIf

                        oSubFK6:SetValue('FK6_IDFK6',  GetSxEnum('FK6','FK6_IDFK6'))
                        oSubFK6:SetValue('FK6_TPDOC',  "DC")
                        oSubFK6:SetValue('FK6_VALCAL', nVlrDesc)
                        oSubFK6:SetValue('FK6_VALMOV', nVlrDesc)
                        oSubFK6:SetValue('FK6_RECPAG', "R")
                        oSubFK6:SetValue('FK6_IDORIG', cIdFK5)
                        oSubFK6:SetValue('FK6_TABORI', 'FK5')
                        oSubFK6:SetValue("FK6_HISTOR", cHistorico)
                        oSubFK6:SetValue('FK6_GRVSE5', .F.)
                        oSubFK6:SetValue("FK6_TPDESC", If(SE1->E1_TPDESC == "I","2","1"))
                    EndIf

                    //IOF
                    If nVlrIOF > 0 .And. cPaisloc == "BRA"
                        If !oSubFK6:IsEmpty()
                            oSubFK6:AddLine()
                            oSubFK6:GoLine(oSubFK6:Length())
                        EndIf

                        oSubFK6:SetValue('FK6_IDFK6',  GetSxEnum('FK6','FK6_IDFK6'))
                        oSubFK6:SetValue('FK6_TPDOC',  "I2")
                        oSubFK6:SetValue('FK6_VALCAL', nVlrIOF)
                        oSubFK6:SetValue('FK6_VALMOV', nVlrIOF)
                        oSubFK6:SetValue('FK6_RECPAG', "P")
                        oSubFK6:SetValue('FK6_IDORIG', cIdFK5)
                        oSubFK6:SetValue('FK6_TABORI', 'FK5')
                        oSubFK6:SetValue("FK6_HISTOR", STR0108) //"IOF sobre cob descontada"
                        oSubFK6:SetValue('FK6_GRVSE5', .T.)
                        oSubFK6:SetValue('FK6_TPDESC', If(SE1->E1_TPDESC == "I","2","1"))
                    EndIf

                    oModelBx:SetValue("MASTER", "E5_CAMPOS", cCamposE5) //Informa os campos da SE5 que serão gravados indepentes de FK5

                    If oModelBx:VldData()
                        oModelBx:CommitData()
                        SE5->(DbGoTo(oModelBx:GetValue("MASTER", "E5_RECNO")))
                        nRecSe5Trf := SE5->(Recno())
                    Else
                        lRet := .F.
                        cLog := cValToChar(oModelBx:GetErrorMessage()[4]) + ' - '
                        cLog += cValToChar(oModelBx:GetErrorMessage()[5]) + ' - '
                        cLog += cValToChar(oModelBx:GetErrorMessage()[6])

                        Help(,,"M060TRFS4",,cLog, 1, 0)
                    EndIf

                    oModelBx:DeActivate()
                    oModelBx:Destroy()
                    oModelBx:= Nil
                EndIf

                AtuSalBco(cPort060, cAgen060, cConta060, dDataMov, nValCred, "+")
            EndIf

            //Cálculo da comissão.
            If lBxCobDesc .And. cSituacao != cSituAnt
                //Caso baixe o titulo por cobranca descontada, gero comissao para o fornecedor
                If (nPos := Ascan(aVetBaixa, {|x| x[1] == "AUTREGBXPRIN"})) > 0 .And. aVetBaixa[nPos,2] > 0
                    SE5->(DbGoto(aVetBaixa[nPos,2]))
                EndIf

                AAdd(aBaixas, {SE5->E5_MOTBX, SE5->E5_SEQ, SE5->(Recno() )})

                If GETMV("MV_TPCOMIS") == "O"
                    Fa440CalcB(aBaixas, lJuros, lDescont, "FINA060",,,, .T., SE1->(Recno()))
                EndIf
            EndIf

            If FN022SITCB(cSituacao)[1]		//cSituacao $ "0FG"
                DbSelectArea("SEA")
                If DbSeek(cChavEA)
                    RecLock("SEA",.F.,.T.)
                    DbDelete()
                    MsUnlock()
                    SX2->(MsUnlock())
                EndIf
            Else
                DbSelectArea("SEA")
                If !SEA->(DbSeek(cChavEA))
                    RecLock("SEA",.T.)     ///numbor
                Else
                    RecLock("SEA")
                EndIf

                SEA->EA_FILIAL  := xFilial("SEA")
                SEA->EA_DATABOR := dDataBase
                SEA->EA_PORTADO := cPort060
                SEA->EA_AGEDEP  := cAgen060
                SEA->EA_NUMCON  := cConta060
                SEA->EA_SITUACA := cSituacao
                SEA->EA_NUM 	:= SE1->E1_NUM
                SEA->EA_PARCELA := SE1->E1_PARCELA
                SEA->EA_PREFIXO := SE1->E1_PREFIXO
                SEA->EA_TIPO	:= SE1->E1_TIPO
                SEA->EA_CART	:= "R"
                SEA->EA_SITUANT := cSituAnt
                SEA->EA_FILORIG := SE1->E1_FILORIG

                If l060SEA
                    ExecBlock("F060SEA",.F.,.F.)
                EndIf

                SEA->(MsUnlock())	// Destravar SEA apos alteracoes
            EndIf

            FKCOMMIT()

            RecLock("SE1")
            VAR_IXB         := SE1->E1_PORTADO // Guardo portador anterior, para possivel utilizacao no LP
            cAgencAnt       := SE1->E1_AGEDEP
            cContaAnt       := SE1->E1_CONTA
            SE1->E1_PORTADO := cPort060
            SE1->E1_AGEDEP  := cAgen060
            SE1->E1_SITUACA := cSituacao
            SE1->E1_CONTRAT := cContrato
            SE1->E1_NUMBCO  := cNumBco
            SE1->E1_MOVIMEN := dDataMov
            SE1->E1_CONTA	:= cConta060

            If cSituacao != cSituAnt .And. !Empty(SE1->E1_NUMBOR)
                SE1->E1_NUMBOR := " "
                SE1->E1_DATABOR:= CToD("  /  /  ")
            EndIf

            FKCOMMIT()

            If ExistBlock("F060ACT")  //PE antes da Contabilização da Transferência
                aDadosF060ACT := {M->E1_SITUACA,cPort060,cAgen060,cConta060,lDesc,cCliente,cTitulo,cSituAnt,cContrato,cPortador}
                ExecBlock("F060ACT",.F.,.F.,{aDadosF060ACT})
            EndIf

            //Contabilização
            If cSituAnt != SE1->E1_SITUACA
                STRLCTPAD   := cSituAnt     // Disponibiliza a situacao anterior para ser utilizada no LP
                VALOR       := nValCred     // para contabilizar o total descontado (Private)
                IOF         := nVlrIOF      // Valor da taxa IOF calculada
                VALOR2      := nValSaldo    // Saldo dos titulo para contabilizacao da diferenca
                //[01] = FWI_LA ('S' ou 'N')
                //[02] = FWI_LANPAD (Lançamento Padrão utilizado)
                //[03] = FWI_VALOR (Valor da Movimentação)
                //[04] = FWI_DESCON (Desconto da Movimentação)
                //[05] = FWI_IOF (Valor do IOF)
                //[06] = FWI_SITUAC (Carteira Atual)
                //[07] = FWI_SITANT (Carteira Anterior)
                //[08] = FWI_BCOANT (Portador Anterior)
                //[09] = FWI_AGEANT (Agência Anterior)
                //[10] = FWI_CONANT (Número da Conta Anterior)
                //[11] = FWI_CONTRA (Contrato)
                //[12] = FWI_IDMOV (Id da Movimentação na FK5)
                //[13] = FWI_NUMBOR (Número do Borderô)
                If lVldCtbOff
                    FinAGrvFWI({IIf(!lCtbOfflin .And. lPadrao, "S", "N"), cPadrao, nValCred, nVlrDesc, nVlrIOF, cSituacao, cSituAnt,;
                        VAR_IXB, cAgencAnt, cContaAnt, cContrato, cIdFK5, ""})
                EndIf

                If !lCtbOfflin .And. lPadrao
                    //A variavel lHead controla se a rotina HeadProva ja
                    //foi executada, visto que ela só pode ser executada
                    //uma £nica vez e não h  como identificar se a mesma
                    //j  foi executada ou não (T=J  fez , F=Não fez)
                    If !lHead
                        //Inicializa Lancamento Contabil
                        nHdlPrv := HeadProva(cLote, "FINA060" /*cPrograma*/, SubStr(cUsuario, 7, 6), @cArquivo)
                        lHead := .T.
                    EndIf

                    //Prepara Lancamento Contabil
                    If lUsaFlag .And. (nRecSe5Trf > 0) // Armazena em aFlagCTB para atualizar no modulo Contabil
                        AAdd(aFlagCTB, {"E5_LA", "S", "SE5", nRecSe5Trf, 0, 0, 0})
                    EndIf

                    nTotal += DetProva(nHdlPrv, cPadrao, "FINA060" /*cPrograma*/, cLote, /*nLinha*/, /*lExecuta*/, /*cCriterio*/,;
                                        /*lRateio*/, /*cChaveBusca*/, /*aCT5*/, /*lPosiciona*/, @aFlagCTB, /*aTabRecOri*/, /*aDadosProva*/)

                    //Lancamento 522 - Contabilizacao de Titulos a serem descontados
                    //Lancamento 528 - Idem 522 para caucion descontados
                    cPadrao := IIf(cSituacao == "2", "522", "528")
                    lPadrao := VerPadrao(cPadrao)

                    If lPadrao .And. lBxCobDesc
                        If !lHead
                            //Inicializa Lancamento Contabil
                            nHdlPrv := HeadProva(cLote, "FINA060" /*cPrograma*/, SubStr(cUsuario, 7, 6), @cArquivo)
                            lHead := .T.
                        EndIf

                        //Prepara Lancamento Contabil
                        If lUsaFlag .And. (nRecSe5Bai > 0) // Armazena em aFlagCTB para atualizar no modulo Contabil
                            AAdd(aFlagCTB, {"E5_LA", "S", "SE5", nRecSe5Bai, 0, 0, 0})
                        EndIf

                        nTotal += DetProva(nHdlPrv, cPadrao, "FINA060" /*cPrograma*/, cLote, /*nLinha*/, /*lExecuta*/, /*cCriterio*/,;
                                            /*lRateio*/, /*cChaveBusca*/, /*aCT5*/, /*lPosiciona*/, @aFlagCTB, /*aTabRecOri*/, /*aDadosProva*/)
                    EndIf

                    If lHead
                        aDiario := {}

                        If UsaSeqCor()
                            aDiario := {{"SE5", SE5->(Recno()), cCodDiario, "E5_NODIA", "E5_DIACTB"}}
                        EndIf

                        //Efetiva Lançamento Contabil
                        cA100Incl(cArquivo, nHdlPrv, 3 /*nOpcx*/, cLote, MV_PAR01 == 1, MV_PAR02 == 1, /*cOnLine*/, /*dData*/, /*dReproc*/, @aFlagCTB, /*aDadosProva*/, aDiario)
                        aFlagCTB := {}  // Limpa o coteudo apos a efetivacao do lancamento
                    EndIf
                EndIf

                If nTotal > 0 .And. nRecSe5Trf > 0 .And. !lUsaFlag
                    SE5->(DbGoTo(nRecSe5Trf))
                    cCamposE5 := "{}"

                    oModelBx := FwLoadModel("FINM030") //Recarrega o Model de movimentos para pegar o campo do relacionamento (SE5->E5_IDORIG)
                    oModelBx:SetOperation(MODEL_OPERATION_UPDATE) //Alteração
                    oModelBx:Activate()
                    oModelBx:SetValue("MASTER", "E5_GRV", .T.) //habilita gravação de SE5
                    oModelBx:SetValue("MASTER", "E5_CAMPOS", cCamposE5) //Informa os campos da SE5 que serão gravados indepentes de FK5
                    oSubFKA := oModelBx:GetModel("FKADETAIL")

                    //Posiciona a FKA com base no IDORIG da SE5 posicionada
                    If oSubFKA:SeekLine({ {"FKA_IDORIG", SE5->E5_IDORIG } })
                        oSubFK5 := oModelBx:GetModel("FK5DETAIL")
                        oSubFK5:SetValue("FK5_LA", "S")

                        If oModelBx:VldData()
                            oModelBx:CommitData()
                            SE5->(DbGoTo(nRecSe5Trf))
                        Else
                            lRet := .F.
                            cLog := cValToChar(oModelBx:GetErrorMessage()[4]) + ' - '
                            cLog += cValToChar(oModelBx:GetErrorMessage()[5]) + ' - '
                            cLog += cValToChar(oModelBx:GetErrorMessage()[6])
                            Help(,,"M060TRFS6",,cLog, 1, 0)
                        EndIf
                    EndIf

                    oModelBx:DeActivate()
                    oModelBx:Destroy()
                    oModelBx:= Nil
                EndIf

                If nTotal > 0 .And. nRecSe5Bai > 0 .And. !lUsaFlag
                    SE5->(DbGoTo(nRecSe5Bai))
                    cCamposE5 := "{}"
                    oModelBx  := FwLoadModel("FINM010") //Recarrega o Model de movimentos para pegar o campo do relacionamento (SE5->E5_IDORIG)

                    oModelBx:SetOperation(MODEL_OPERATION_UPDATE) //Alteração
                    oModelBx:Activate()
                    oModelBx:SetValue("MASTER", "E5_GRV", .T.) //habilita gravação de SE5
                    oModelBx:SetValue("MASTER", "E5_CAMPOS", cCamposE5) //Informa os campos da SE5 que serão gravados indepentes de FK5
                    oSubFKA := oModelBx:GetModel("FKADETAIL")

                    //Posiciona a FKA com base no IDORIG da SE5 posicionada
                    If oSubFKA:SeekLine({ {"FKA_IDORIG", SE5->E5_IDORIG } })
                        oSubFK1 := oModelBx:GetModel("FK1DETAIL")
                        oSubFK1:SetValue("FK1_LA", "S")

                        If oModelBx:VldData()
                            oModelBx:CommitData()
                            SE5->(DbGoTo(nRecSe5Bai))
                        Else
                            lRet := .F.
                            cLog := cValToChar(oModelBx:GetErrorMessage()[4]) + ' - '
                            cLog += cValToChar(oModelBx:GetErrorMessage()[5]) + ' - '
                            cLog += cValToChar(oModelBx:GetErrorMessage()[6])
                            Help(,,"M060TRFS7",,cLog, 1, 0)
                        EndIf
                    EndIf

                    oModelBx:DeActivate()
                    oModelBx:Destroy()
                    oModelBx:= Nil
                EndIf
            EndIf

            //Integracao TIN x PROTHEUS
            If FwHasEAI("FINA055",.F.,,.T.) .And. AllTrim(SE1->E1_ORIGEM) == "FINI055"
                FwIntegDef("FINA040B")
            EndIf
        END TRANSACTION

        If !(cE1SITUACA == AllTrim(SE1->E1_SITUACA))
            AAdd(aAlt,{ STR0116,STR0117,'',STR0118 + ' - '  +  AllTrim(cE1SITUACA) , STR0119 + ' - '  + AllTrim(SE1->E1_SITUACA)})
        EndIf

        If !(cE1PORTADO == (AllTrim(SE1->E1_PORTADO) + AllTrim(SE1->E1_AGEDEP) + AllTrim(SE1->E1_CONTA)))
            AAdd(aAlt,{ STR0116,STR0117,'',STR0120 + ' - '  +  AllTrim(cE1PORTADO) , STR0121 + ' - '  +  AllTrim(SE1->E1_PORTADO)+ '-' + AllTrim(SE1->E1_AGEDEP) + '-' + AllTrim(SE1->E1_CONTA) })
        EndIf

        //chamada da Função que cria o Histórico de Cobrança
        FinaCONC(aAlt,"SE1")

        If cSituacao $ "0FG" 		//Carteira, Carteira Protesto e Carteira Acordo
            PcoDetLan("000003","01","FINA060")
        ElseIf cSituacao $ "1H"		//Simples e Cartorio
            PcoDetLan("000003","02","FINA060")
        ElseIf cSituacao == "2"		//Descontada
            PcoDetLan("000003","03","FINA060")
        ElseIf cSituacao == "3"		//Caucionada
            PcoDetLan("000003","04","FINA060")
        ElseIf cSituacao == "4"		//Vinculada
            PcoDetLan("000003","05","FINA060")
        ElseIf cSituacao == "5"		//Advogado
            PcoDetLan("000003","06","FINA060")
        ElseIf cSituacao == "6"		//Judicial
            PcoDetLan("000003","07","FINA060")
        ElseIf cSituacao == "7"		//Caucionada Descontada
            PcoDetLan("000003","16","FINA060")
        //Para as novas situacoes de cobranca
        //repito os processos padroes existentes de acordo com a categoria de cada uma
        ElseIF FN022SITCB(cSituacao)[1]		//Carteira cSituacao $ "0|F|G"
            PcoDetLan("000003","01","FINA060")
        ElseIf FN022SITCB(cSituacao)[6]	//Simples e Cartorio   cSituacao $ "1|H"
            PcoDetLan("000003","02","FINA060")
        ElseIf FN022SITCB(cSituacao)[3]	//Descontada 	cSituacao $ "2|7"
            PcoDetLan("000003","03","FINA060")
        ElseIf FN022SITCB(cSituacao)[4]	//Cobranca em banco com protesto
            PcoDetLan("000003","07","FINA060")
        ElseIf FN022SITCB(cSituacao)[2]	//Cobranca em banco sem protesto exceto Simples e Cartorio
            PcoDetLan("000003","05","FINA060")
        EndIf

        //Pontos de Entrada
        If ExistTemplate("FA60TRAN")
            ExecTemplate("FA60TRAN",.F.,.F.)
        EndIf

        If ExistBlock("FA60TRAN")
            ExecBlock("FA60TRAN",.F.,.F.)
        EndIf

        //Chamada de integração para geração do nosso numero via RM
        If lRMInteg .And. (AllTrim(SE1->E1_ORIGEM) $ 'L|S|T' .Or. SE1->E1_IDLAN > 0)
            If Empty(SE1->E1_NUMBCO) .And. !EMPTY(cPort060)
                SetRotInteg('FINI150A')
                FINI150A()
            EndIf
        EndIf
    EndIf

    nValor := nTaxaDesc := nTxIof := 0

    If _lF060Exit // Log para Saida
        Execblock("F060EXIT",.F.,.F.)
    EndIf

    PcoFinLan("000003")
    DbSelectArea("SE1")
    MsUnlock()
    DbSetOrder(nIndice)
Return

/*/{Protheus.doc} Fa060Borde
Define os borderos a serem enviados ao banco

@param ExpC1 = Alias do arquivo
@param ExpN1 = N£mero do registro
@param ExpN2 = Opção selecionada no menu
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function Fa060Borde(cAlias, nReg, nOpcx, aRotAuto)
    Local cNumBor	:=Space(06)
    Local cPadrao	:= ""
    Local cPadrao060:= ""
    Local cFormula	:= "   "
    Local nSitTam   := TamSX3("E1_SITUACA")[1]
    Local cSituacao := PadR("",nSitTam)
    Local cContrato := Space(15)
    Local nLimite	:= 0
    Local nC		:= 0
    Local nValSaldo	:= 0
    Local lLanc		:= .F.
    Local cPictTd	:= PesqPict("SA6","A6_TAXADES",,nMoeda)
    Local cPictIOF 	:= ""
    Local cHistorico:= ""
    Local dDataMov	:= dDataBase
    Local nTotal	:= 0
    Local nHdlPrv	:= 0
    Local cArquivo	:= ""
    Local lPadrao	:= .F.
    Local lPadrao060:= .F.
    Local lSaida	:= .F.
    Local aStru		:= {}
    Local aCampos	:= {}
    Local lFa060Se5 := ExistBlock("FA060SE5")
    Local nI		:= 0
    Local nRegSE1 	:= 0
    Local nRegSEA	:= 0
    Local cPortAnt  := ""
    Local cAgAnt 	:= ""
    Local cContAnt	:= ""
    Local aTempos   := {} //{"24"+OemToAnsi(STR0057),"48"+OemToAnsi(STR0057),"72"+OemToAnsi(STR0057),"96"+OemToAnsi(STR0057),"1 "+OemToAnsi(STR0059),OemToAnsi(STR0058)+"1"+OemToAnsi(STR0059)} // " Horas" # .....# " Semana" # "Mais de " # " Semana"
    Local cClearing	:= ""
    Local E1_SITUACA:= ""
    Local lF060BOR	:= ExistBlock("F060BOR")
    Local cSituAnt	:= ""
    Local nPos		:= 0
    Local dBase		:= CTOD('//')
    Local nDias		:= 0
    Local aFeriados	:= {}
    Local lSpbInUse := SpbInuse()
    Local lF060Proc := Existblock("F060PROC")
    Local nAbat		:= 0
    Local nTotAbat	:= 0
    Local nSaldo	:= 0
    Local lF060ABT	:= ExistBlock("F060ABT")
    Local lMarkAbt	:= .F.
    Local nACTpBor	:= 2
    Local lSelCpo	:= .F.
    Local cCampoCli := " "
    Local lF060Hist := Existblock("F060HIST")
    Local lF060SEA2 := ExistBlock("F060SEA2")
    Local aAux      := {}
    Local nEspLarg	:= 0
    Local nEspLin	:= 0
    Local aBaixas	:= {}
    Local lJuros	:= .F.
    Local lDescont	:= .F.
    Local aFlagCTB	:= {}
    Local lUsaFlag	:= SuperGetMV("MV_CTBFLAG" , .T. /*lHelp*/, .F. /*cPadrao*/)
    Local lF060QRCP	:= ExistBlock("F060QRCP")
    Local lF060TRB	:= Existblock("F060Trb")
    Local lF060CHAV	:= ExistBlock("F060CHAV")
    Local aUserFils	:= GetBrwFils()
    Local cProxNum	:= ""
    Local aChaveTRB	:= {}
    Local nRetencao	:=	0
    Local lVerEntBanc := cPaisLoc == "ARG"
    Local nEntBanc    := If(lVerEntBanc, 14, 0)   // Valor somado a nEspLin, na montagem da tela do Bordero
    Local lFa060Qry := Existblock("FA060QRY")
    Local lGestao   := FwSizeFilial() > 2	// Indica se usa Gestao Corporativa
    Local lSE1Access:= IIf(lGestao, FwModeAccess("SE1",1) == "E", FwModeAccess("SE1",3) == "E")
    Local cQueryADD := ""
    Local nj		:= 0
    Local aSelFil	:= {}
    Local aTmpFil	:= {}
    Local cTmpSE1Fil := ""
    Local cDescricao	:= ""
    Local cListCart 	:= FN022LSTCB(1)	//Obtem a lista de situacos de cobranca que nao possuem portador (Carteira)
    Local oDlgDesc
    Local oValor
    Local oPrazoMed
    Local oDescricao
    Local oSituacao
    Local lHasTemplate := HasTemplate("LOT")
    Local nMoedBco 	:= 0
    Local oModelBx	:= Nil
    Local oSubFKA	:= Nil
    Local oSubFK6	:= Nil
    Local oSubFK5	:= Nil
    Local cLog 		:= ""
    Local lRet 		:= .T.
    Local cCamposE5 := ""
    Local nDescFK5	:= 0
    Local cIdFK5	:= ""
    Local aSM0		:= {}
    Local nInc	:=	0
    Local nTmp := 0 //contador para exclusão das tabelas temp criadas no banco.
    Local aAlt := {}
    Local cOrigem := AllTrim(GetNewPar("MV_RMORIG",""))
    Local cIndice	:= ""
    Local cAuxNat	:= SubStr(&(GetMV("MV_NATDESC")),1,TamSX3('ED_CODIGO')[1])
    Local aStruSE1	:= {}
    Local dDataFin	:= SuperGetMv("MV_DATAFIN")
    Local lBxDtFin	:= SuperGetMv("MV_BXDTFIN",,"1") == "2"
    Local cTpComis	:= GETMV("MV_TPCOMIS")
    Local nRecSe5Trf 	:= 0 // Registro da transferencia no SE5
    Local lJurXFin      := SuperGetMv("MV_JURXFIN",,.F.) // Habilita a integracao entre os modulos SIGAFIN - Financeiro e SIGAPFS - Juridico
    Local nAt		:= 0
    Local cAutFil	:= ""
    Local cAutPre	:= ""
    Local cAutNum	:= ""
    Local cAutPar	:= ""
    Local cAutTip	:= ""
    Local cIndF060CH := ""
    Local aF060CH    := {}
    Local nHelp      := 0
    Local cOldBanco  := ""
    Local cOldAgenc  := ""
    Local cOldConta  := ""
    Local lFilBor	 := .T.
    Local lCtbOfflin := .F.
    Local lVldCtbOff := .F.
    Local cSituaAnt  := ""
    Local aVetBaixa  := {}
    Local cNatAnt    := ""
    Local cChaveTit  := ""
    Local nTotalBaix := 0
    Local nCasDec    := TamSx3("E1_TXMOEDA")[2]
    Local oBolApi
    Local nLinBtn    := If(_lBCOApi, 22, 0)
    Local nLenLin    := If(_lBCOApi, 2, 0)
    Local lBolApi    := .F.
    Local lWhenApi   := .F.
    Local cBolApi    := ""
    Local cBcoAgCnt  := ""
    Local cEspec060  := If(_lBCOApi, Criavar("EA_ESPECIE",.F.), "")
    Local cSubCta060 := If(_lBCOApi, Criavar("EA_SUBCTA",.F.), "")
    Local cFunName   := AllTrim(FunName())
    Local lCobranDes := .F.
    Local nTxMoeda   := 0
    Local nVlMoed2   := 0
    Local cIdDocFK7  := ""
    Local cSeq       := ""

    Private cPort060	:= Criavar("EF_BANCO",.F.)
    Private cAgen060	:= CriaVar("EF_AGENCIA",.F.)
    Private cConta060   := Criavar("EF_CONTA",.F.)
    Private cBcoOfi060  := ""
    Private oSayF77     := Nil
    Private aSituacoes	:= {}
    Private dVencIni	:= dDataBase
    Private dVencFim	:= dDataBase
    Private dEmisDe		:= dDataBase
    Private dEmisAte	:= dDataBase
    Private cCliDe		:= Space(Len(SE1->E1_CLIENTE))
    Private cCliAte		:= Replicate("Z",Len(SE1->E1_CLIENTE))
    Private cPrefDe		:= Space(Len(SE1->E1_PREFIXO))
    Private cPrefAte	:= Replicate("Z",Len(SE1->E1_PREFIXO))
    Private cNumDe		:= Space(Len(SE1->E1_NUM))
    Private cNumAte		:= Replicate("Z",Len(SE1->E1_NUM))
    Private nValBaixa	:= 0
    Private nJuros		:= 0
    Private nDescont	:= 0
    Private nValor		:= 0
    Private nQtdTit		:= 0
    Private nSomaData	:= 0
    Private nIndice		:= SE1->(Indexord())
    Private cTipos		:= "" //Utilizada pela FINATIPOS()
    Private nTxIOF		:= 0
    Private nVlrIOF	  	:= 0
    Private cNatureza 	:= Space(10)
    Private lMsErroAuto := .F.

    _lF060Exit	:= ExistBlock("F060EXIT")
    _lFa60Fil	:= ExistBlock("FA60FIL")
    _lF060CpBor	:= ExistBlock("F060CPBOR")
    _lTFA60BDE	:= ExistTemplate("FA60BDE")
    _lFA60BDE	:= ExistBlock("FA60BDE")

    nValCred := nValSaldo := 0

    If _cSitPIX <> NIL .And. _cSitPIX <> "0"
        cListCart += _cSitPIX+"|"
    EndIf

    If lGestao
        aSM0 := FwLoadSM0()
    Else
        aSM0 := AdmAbreSM0()
    EndIf

    If cPaisLoc == "BRA"
        cPictIOF := PesqPict("SED","ED_PERCIOF")
    EndIf

    If lVerEntBanc
        cBcoChq := Criavar("E1_BCOCHQ")
        cAgeChq := Criavar("E1_AGECHQ")
        cCtaChq := Criavar("E1_CTACHQ")
        If cPaisLoc == "ARG"
        cPostal := Criavar("E1_POSTAL")
        EndIf
    EndIf

    nIndice := SE1->(IndexOrd())

    If cPaisLoc == "CHI"
        aTempos     := {"0"+OemToAnsi(STR0057),"24"+OemToAnsi(STR0057),"48"+OemToAnsi(STR0057),"72"+OemToAnsi(STR0057),"96"+OemToAnsi(STR0057),"1 "+OemToAnsi(STR0059),OemToAnsi(STR0058)+"1"+OemToAnsi(STR0059)} // " Horas" # .....# " Semana" # "Mais de " # " Semana"
    Else
        aTempos     := {"24"+OemToAnsi(STR0057),"48"+OemToAnsi(STR0057),"72"+OemToAnsi(STR0057),"96"+OemToAnsi(STR0057),"1 "+OemToAnsi(STR0059),OemToAnsi(STR0058)+"1"+OemToAnsi(STR0059)} // " Horas" # .....# " Semana" # "Mais de " # " Semana"
    EndIf

    //Verifica se data do movimento não  menor que data limite de movimentacao no financeiro
    If !DtMovFin(,,"2")
        Return
    EndIf

    //VERIFICA SE A TELA DE PARAMETROS VAI ABRIR NOVAMENTE APOS A INCLUSAO DE UM BORDERO
    If !lF060LOOP
        lF060LOOP := .T.
        Return
    EndIf

    Pergunte("FIN060",.F.)

    //A função SomaAbat reabre o SE1 com outro nome pela ChkFile para
    //efeito de performance. Se o alias auxiliar para a SumAbat() não
    //estiver aberto antes da IndRegua, ocorre Erro de & na ChkFile,
    //pois o Filtro do SE1 uptrapassa 255 Caracteres.

    SomaAbat("","","","R")

    //Considerar os abatimentos no bordero para serem enviados ao banco.
    //Normalmente eles nao devem ir mas tem cliente que necessita.
    If lF060ABT
        lMarkAbt := ExecBlock("F060ABT",.F.,.F.)
    EndIf

    If _lF060Auto
        //cSituacao
        If	(nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTSITUACA"})) > 0
            cSituacao	:= PadR(aRotAuto[1][nPos][2],nSitTam)
        EndIf
        //cNumBor
        If	(nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTNUMBOR"})) > 0
            cNumBor := aRotAuto[1][nPos][2]
        EndIf
        //cPort060
        If	(nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTBANCO"})) > 0
            cPort060 := aRotAuto[1][nPos][2]
        EndIf
        //cAgen060
        If	(nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTAGENCIA"})) > 0
            cAgen060 := aRotAuto[1][nPos][2]
        EndIf
        //cConta060
        If	(nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTCONTA"})) > 0
            cConta060 := aRotAuto[1][nPos][2]
        EndIf
        //cContrato
        If	(nPos := aScan(aRotAuto[1],{|x| x[1]== "AUTCONTRAT"})) > 0
            cContrato := aRotAuto[1][nPos][2]
        EndIf

        If !F060Vld(cPort060,cAgen060,cConta060,cSituacao,cContrato) .OR. (!Empty(cNumBor) .AND. !FA060Num(cNumBor)) //Caso o número do borderô seja informado será validado
            nOpc := 0
            Help(,,,"F060AUTOBCO",STR0135, 1, 0) //Informações bancário inválidas para rotina automática.
            Return (.F.)
        EndIf

    EndIf

    //Gravação da metrica de acesso
    If _lMetric .And. _lGrvMetri
        SetFunName(Iif(cFunName == "RPC", (cFunName + "FINA060"), cFunName))
        FwCustomMetrics():setSumMetric(Alltrim(ProcName()), "financeiro-protheus_qtd-por-acesso_total", 1)
        SetFunName(cFunName)
    EndIf

    _lGrvMetri := _lMetric

    While .T.
        //Preciso primeiro definir aqui essas variaveis, pois, no caso de Gestao Pessoal com o parametro MV_ACATIVO = .T.
        //se nao tiver aqui teremos erro de variavel inexistente.
        cFilDe  := MV_PAR06
        cFilAte := MV_PAR07

        If MV_PAR05 != 1
            cFilDe  := xFilial("SE1")
            cFilAte := cFilDe
        EndIf

        DbSelectArea("SE1")
        nSavRec		:= RecNo()
        VALOR 	 	:= 0
        IOF	   		:= 0
        VALOR2    	:= 0
        ABATIMENTO	:= 0
        nValSaldo	:= 0
        nAbat 	 	:= 0

        //Vai pegar o ultimo N£mero de bordero utilizado
        If lF060BOR
            cNumBor := ExecBlock("F060BOR",.F.,.F.)
        ElseIf Empty(cNumBor) // Por execauto se não informado o número do borderô pega o próximo
            cNumBor := Soma1(GetMV("MV_NUMBORR"),6)
            cNumBor := Replicate("0",6-Len(AllTrim(cNumBor)))+AllTrim(cNumBor)
            While !MayIUseCode("SE1"+xFilial("SE1")+cNumBor) .OR. !FA060Num(cNumBor, .F.)  //verifica se esta na memoria, sendo usado e se o número é válido
                // busca o proximo numero disponivel
                cNumBor := Soma1(cNumBor)
            EndDo
        EndIf

        If cPaisLoc == "CHI"
            cSituacao := PadR('2',nSitTam)
        ElseIf !_lF060Auto
            cSituacao := PadR('0',nSitTam)
        EndIf

        M->E1_SITUACA := cSituacao

        //Atualiza a descricao e a natureza de IOF da situacao de cobranca
        F060GetDesc(cSituacao,@cDescricao,@cNatureza)
        nOpca  := 0
        nMoeda := 1

        //Se MV_ACATIVO = .T. (Gestao Educacional em uso), verifica qual interface
        //de parametros de bordero deve ser utilizada.
        //- MV_ACTPBOR = 1 --> Filtros academicos
        //- MV_ACTPBOR = 2 --> Filtros financeiros
        //- MV_ACTPBOR = 3 --> Perguntar ao usuario
        If GetNewPar("MV_ACATIVO", .F.)
            nACTpBor := GetNewPar("MV_ACTPBOR", 1)
            If nACTpBor == 3
                // Define a variavel de acordo com a resposta
                If !Pergunte("ACFA60", .T.)
                    FreeUsedCode()  //libera codigos de correlativos reservados pela MayIUseCode()
                    Return
                EndIf
                nACTpBor := MV_PAR01

                // Reposiciona as perguntas anteriores
                Pergunte("FIN060",.F.)
            EndIf
        EndIf

        If ! GetNewPar("MV_ACATIVO", .F.) .Or. nACTpBor == 2
            // Caso a rotina tenha sido chamada por execauto não apresenta a interface.
            If !_lF060Auto
                If IsPanelFin()  //Chamado pelo Painel Financeiro
                    DbSelectArea(cAlias)
                    oPanelDados := FinWindow:GetVisPanel()
                    oPanelDados:FreeChildren()
                    aDim := DLGinPANEL(oPanelDados)
                    DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0,0 To 0,0 PIXEL STYLE nOR(WS_VISIBLE, WS_POPUP)

                    //Observacao Importante quanto as coordenadas calculadas abaixo:
                    //--------------------------------------------------------------
                    //a funcao DlgWidthPanel() retorna o dobro do valor da area do
                    //painel, sendo assim este deve ser dividido por 2 antes da sub-
                    //tracao e redivisao por 2 para a centralizacao.

                    nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 274) /2
                    nEspLin  := 0
                Else
                    nEspLarg := 2
                    nEspLin  := 2

                    //Requisito de Entidades Bancarias - Junho/2012
                    //Abre em mais 01 linha a tela de parametros
                    nLenLin  += If(lVerEntBanc, 2, 0)

                    DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0003) FROM 5,0 To 23+nLenLin,69 OF oMainWnd  //"Border"
                EndIf

                oDlg:lMaximized := .F.
                oPanel := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,20,20)
                oPanel:Align := CONTROL_ALIGN_ALLCLIENT


                @ 002+nEspLin, 002+nEspLarg Say STR0023 SIZE 39, 7 OF oPanel PIXEL // "Border N§"
                @ 002+nEspLin, 035+nEspLarg MSGET cNumBor  Picture "@!" SIZE 37,8 ;
                    Valid !Empty(cNumBor) .And. FA060Num(cNumBor) OF oPanel PIXEL

                @ 013+nEspLin, 002+nEspLarg Say STR0024		SIZE 40,7 OF oPanel PIXEL// "Venc Real "
                @ 013+nEspLin, 035+nEspLarg MSGET dVencIni	SIZE 54,8 OF oPanel PIXEL HASBUTTON
                @ 013+nEspLin, 098+nEspLarg Say STR0053 		SIZE 40,7 OF oPanel PIXEL //"a"
                @ 013+nEspLin, 117+nEspLarg MSGET dVencFim	SIZE 54,8 OF oPanel PIXEL ;
                                                    Valid FA060DATA(dVencIni,dVencFim) HASBUTTON

                @ 024+nEspLin, 002+nEspLarg Say STR0025 		SIZE 40,7 OF oPanel PIXEL  // "Limite Valor"
                @ 024+nEspLin, 035+nEspLarg MSGET nLimite Picture cPict06018 Valid nLimite >= 0 ;
                                                                            SIZE 54,8 OF oPanel PIXEL HASBUTTON
                @ 024+nEspLin, 092+nEspLarg Say STR0026		SIZE 40,7 OF oPanel PIXEL // "Moeda"
                @ 024+nEspLin, 117+nEspLarg MSGET nMoeda 	Picture "99"   Valid nMoeda>=1 .And. nMoeda<=99 ;
                                                                            SIZE 54,8 OF oPanel PIXEL
                @ 024+nEspLin, 182+nEspLarg Say STR0015 		SIZE 40, 7 OF oPanel PIXEL //"Contrato"
                @ 024+nEspLin, 204+nEspLarg MSGET cContrato Picture "@S5" F3 "SE9" ;
                                                                            SIZE 62,8 OF oPanel PIXEL HASBUTTON

                @ 035+nEspLin, 002+nEspLarg Say STR0027		SIZE 40, 7 OF oPanel PIXEL // "Banco "
                If cPaisLoc == "BRA"
                    @ 035+nEspLin, 035+nEspLarg MSGET cPort060  Picture "@!" F3 "SA6" Valid CarregaSa6(cPort060, @cAgen060, @cConta060, .T.,,,,,, @cOldBanco, @cOldAgenc, @cOldConta, "cChmBco") .And. BorApiVld(cPort060, cAgen060, cConta060, @lWhenApi, @lBolApi, @cBcoAgCnt, @cSubCta060, @cEspec060, @cBcoOfi060);
                                                                            SIZE 54,8 OF oPanel PIXEL HASBUTTON
                Else
                    @ 035+nEspLin, 035+nEspLarg MSGET cPort060  Picture "@!" F3 "SA6" Valid (CarregaSa6(cPort060, @cAgen060, @cConta060, .F.,,,,,, @cOldBanco, @cOldAgenc) .And. fa060Clear(@cClearing,@oCbxClea,aTempos)) ;
                                                                            SIZE 54,8 OF oPanel PIXEL HASBUTTON
                EndIf
                @ 035+nEspLin, 092+nEspLarg Say STR0017 		SIZE 40, 7 OF oPanel PIXEL //"Agência"
                @ 035+nEspLin, 117+nEspLarg MSGET cAgen060	Picture "@!" Valid CarregaSa6(cPort060, cAgen060, @cConta060, .T.,,,,,, @cOldBanco, @cOldAgenc, @cOldConta, "cChmAge") .And. BorApiVld(cPort060, cAgen060, cConta060, @lWhenApi, @lBolApi, @cBcoAgCnt, @cSubCta060, @cEspec060, @cBcoOfi060);
                                                                            SIZE 54,8 OF oPanel PIXEL
                @ 035+nEspLin, 182+nEspLarg Say STR0018 		SIZE 40, 7 OF oPanel PIXEL // "Conta"
                @ 035+nEspLin, 204+nEspLarg MSGET cConta060	Picture "@!" Valid CarregaSa6(cPort060, cAgen060, cConta060,.T.,,.T.,,,,cOldBanco,cOldAgenc,cOldConta, "cChmCta")  .And. BorApiVld(cPort060, cAgen060, cConta060, @lWhenApi, @lBolApi, @cBcoAgCnt, @cSubCta060, @cEspec060, @cBcoOfi060);
                                                                            SIZE 62,8 OF oPanel PIXEL

                @ 046+nEspLin, 002+nEspLarg Say STR0014 		SIZE 40, 7 OF oPanel PIXEL  // "Situação"
                @ 046+nEspLin, 035+nEspLarg MSGET oSituacao VAR M->E1_SITUACA F3 "FRV" Picture "@!" Valid IIf(FN022SITCB(M->E1_SITUACA)[2],.T.,(Help(" ",1,"FA060SITU",,STR0113 ,1,0),.F.)) .And. ;//Situação de cobrança não cadastrada ou não utiliza banco
                    F060GetDesc(M->E1_SITUACA,@cDescricao,@cNatureza,oDescricao) .And.;
                    IIf(F60VldTecf(M->E1_SITUACA),(Help(" ",1,"CARTTECFIN",, STR0142 /*"A situação de cobrança não pode ser utilizada, carteira especifica para TOTVS Antecipa."*/,1,,,,,,, {}),.F.), .T.) .And. ;
					F60VldPix(M->E1_SITUACA, .T.) ;
					SIZE 10,8 OF oPanel PIXEL HASBUTTON

                @ 046+nEspLin, 062+nEspLarg MSGET oDescricao VAR cDescricao SIZE 108, 8 OF oPanel PIXEL WHEN .F.

                If cPaisLoc != "BRA"
                    @ 046+nEspLin,182+nEspLarg Say STR0060 	SIZE 40, 7 OF oPanel PIXEL // "Clearing"
                    If cPaisLoc == "CHI"
                        @ 046+nEspLin,204+nEspLarg   MSCOMBOBOX oCbxClea VAR cClearing ITEMS aTempos Valid ;
                            (AScan(aTempos,cClearing) >= 0) 	SIZE 62,08 OF oPanel PIXEL
                    Else
                        @ 046+nEspLin,204+nEspLarg   MSCOMBOBOX oCbxClea VAR cClearing ITEMS aTempos Valid ;
                            (AScan(aTempos,cClearing) > 0) 		SIZE 62,08 OF oPanel PIXEL
                    EndIf
                EndIf

                //Requisito de Entidades Bancarias - Junho/2012
                //Possibilita filtrar o Bordero por Banco/Agencia/Cod. Postal
                If lVerEntBanc

                    @ 060+nEspLin, 002+nEspLarg Say STR0088  SIZE 40, 7 OF oPanel PIXEL // "Bco Cheque"

                    @ 059+nEspLin, 035+nEspLarg MSGET cBcoChq F3 "FJNCON" Picture "@!" Valid VerFJN("cBcoChq") SIZE 30, 8 OF oPanel Hasbutton PIXEL

                    @ 060+nEspLin, 074+nEspLarg Say STR0089  SIZE 40, 7 OF oPanel PIXEL // "Age Cheque"

                    @ 059+nEspLin, 108+nEspLarg MSGET cAgeChq Picture "@!" Valid VerFJN("cAgeChq") SIZE 30, 8 OF oPanel PIXEL

                    @ 060+nEspLin, 144+nEspLarg Say STR0090  SIZE 40, 7 OF oPanel PIXEL // "Cta Cheque"

                    @ 059+nEspLin, 175+nEspLarg MSGET cCtaChq Picture "@!" SIZE 23, 8 OF oPanel PIXEL READONLY

                    @ 060+nEspLin, 206+nEspLarg Say STR0091  SIZE 40, 7 OF oPanel PIXEL // "Cod. Postal"

                    @ 059+nEspLin, 236+nEspLarg MSGET cPostal Picture "9999" Valid VerFJN("cPostal") SIZE 28, 8 OF oPanel PIXEL
                EndIf
                //F I M

                @ 058+nEspLin+nEntBanc, 002+nEspLarg Say STR0028 		SIZE 40,7 OF oPanel PIXEL  // "Emissão"
                @ 058+nEspLin+nEntBanc, 035+nEspLarg MSGET dEmisDe 	SIZE 54,8 OF oPanel PIXEL HASBUTTON
                @ 058+nEspLin+nEntBanc, 100+nEspLarg Say STR0053 		SIZE 40,7 OF oPanel PIXEL  //"a"
                @ 058+nEspLin+nEntBanc, 117+nEspLarg MSGET dEmisAte   Valid dEmisAte >= dEmisDe ;
                                                                            SIZE 54,8 OF oPanel PIXEL HASBUTTON
                @ 069+nEspLin+nEntBanc, 002+nEspLarg Say STR0012 		SIZE 40,7 OF oPanel PIXEL // "Cliente"
                @ 069+nEspLin+nEntBanc, 035+nEspLarg MSGET cCliDe F3 "CLI" SIZE 54,8 OF oPanel PIXEL HASBUTTON
                @ 069+nEspLin+nEntBanc, 100+nEspLarg Say STR0053 		SIZE 40,7 OF oPanel PIXEL //"a"
                @ 069+nEspLin+nEntBanc, 117+nEspLarg MSGet cCliAte F3 "CLI" Valid cCliAte >= cCliDe SIZE 54,8 OF oPanel PIXEL HASBUTTON

                @ 080+nEspLin+nEntBanc, 002+nEspLarg Say STR0067 		SIZE 40,7 OF oPanel PIXEL  //Prefixo
                @ 080+nEspLin+nEntBanc, 035+nEspLarg MSGET cPrefDe 	SIZE 54,8 OF oPanel PIXEL
                @ 080+nEspLin+nEntBanc, 100+nEspLarg Say STR0053 		SIZE 40,7 OF oPanel PIXEL //"a"
                @ 080+nEspLin+nEntBanc, 117+nEspLarg MSGET cPrefAte Valid cPrefAte >= cPrefDe SIZE 54,8 OF oPanel PIXEL

                @ 091+nEspLin+nEntBanc, 002+nEspLarg Say STR0068 		SIZE 40,7 OF oPanel PIXEL  //"Titulo"
                @ 091+nEspLin+nEntBanc, 035+nEspLarg MSGET cNumDe 		SIZE 54,8 OF oPanel PIXEL
                @ 091+nEspLin+nEntBanc, 100+nEspLarg Say STR0053 		SIZE 40,7 OF oPanel PIXEL //"a"
                @ 091+nEspLin+nEntBanc, 117+nEspLarg MSGet cNumAte Valid cNumAte >= cNumDe SIZE 54,8 OF oPanel PIXEL

                @ nEspLin, nEspLarg TO 105+nEspLin+nEntBanc , 272+nEspLarg-4 OF oPanel PIXEL
                If _lBCOApi // Habilita campos do Boleto Registrado
                    @ 107+nEspLin+nEntBanc, nEspLarg TO 130+nEspLin+nEntBanc , 272+nEspLarg-4 OF oPanel PIXEL
                    @ 108+nEspLin+nEntBanc, 004+nEspLarg CHECKBOX oBolApi VAR lBolApi Valid {|| BolApiVld(lBolApi, @cSubCta060, @cEspec060)} PROMPT OemToAnsi(STR0161) SIZE 82, 10 OF oPanel PIXEL WHEN lWhenApi // "Registro online de boletos"

                    @ 118+nEspLin+nEntBanc, 004+nEspLarg SAY	OemToAnsi(STR0162)	SIZE 40, 7 OF oPanel PIXEL  // "Sub Conta"
                    @ 118+nEspLin+nEntBanc, 035+nEspLarg MSGET cSubCta060  Picture "@!" F3 "SEEBOR" Valid {|| SubCApiVld(cPort060, cAgen060, cConta060, cSubCta060)} SIZE 30,8 OF oPanel PIXEL HASBUTTON WHEN lBolApi

                    @ 118+nEspLin+nEntBanc, 092+nEspLarg SAY	OemToAnsi(STR0163)	SIZE 40, 7 OF oPanel PIXEL  // "Espécie"
                    @ 118+nEspLin+nEntBanc, 117+nEspLarg MSGET cEspec060 Picture "@!" F3 "F77BOR" Valid {|| EspeApiVld(cBcoOfi060, cEspec060)} SIZE 30,8 OF oPanel PIXEL HASBUTTON WHEN lBolApi
                    oSayF77 := TSay():New(118+nEspLin+nEntBanc, 150+nEspLarg, {|| OemToAnsi(Space(TamSX3('F77_DESCRI')[01]))}, oPanel,,,,,, .T.)
                EndIf
                If IsPanelFin()  //Chamado pelo Painel Financeiro
                    oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1])
                    ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg,;
                    {|| IIf(F060Vld(cPort060,cAgen060,cConta060,M->E1_SITUACA,cContrato, lBolApi, cSubCta060, cEspec060).And.;
                        F60VldUser(cNumBor, cPort060,cAgen060,cConta060,M->E1_SITUACA,dVencIni,dVencFim,nLimite,nMoeda,cContrato,dEmisDe,dEmisAte,cCliDe,cCliAte),(oDlg:End(),nOpca:=1),(oDlg:End(),nOpca:=0))},;
                        {||nOpca:=0,oDlg:End()},,,.F.)

                    cAlias := FinWindow:cAliasFile
                    DbSelectArea(cAlias)
                    FinVisual(cAlias,FinWindow,(cAlias)->(Recno()),.T.)
                Else
                    //Reposiciona os Buttons se a tela for a ampliada
                    nLinBtn += If(lVerEntBanc, 20, 0)

                    DEFINE SBUTTON FROM 114+nLinBtn, 217 TYPE 1 ACTION (nOpca := 1,oDlg:End()) ENABLE OF oDlg
                    DEFINE SBUTTON FROM 114+nLinBtn, 244 TYPE 2 ACTION (nOpca := 0,oDlg:End()) ENABLE OF oDlg


                    ACTIVATE MSDIALOG oDlg CENTERED VALID (IIf(nOpca==1,;
                        (F060Vld(cPort060,cAgen060,cConta060,M->E1_SITUACA,cContrato, lBolApi, cSubCta060, cEspec060) .And. ;
                        F60VldUser(cNumBor, cPort060,cAgen060,cConta060,M->E1_SITUACA,dVencIni,dVencFim,nLimite,nMoeda,cContrato,dEmisDe,dEmisAte,cCliDe,cCliAte)),.T.))
                EndIf

                cSituacao := M->E1_SITUACA
            EndIf

            If nOpca == 0 .AND. !_lF060Auto
                If _lF060Exit
                    Execblock("F060EXIT",.F.,.F.)
                EndIf
                FreeUsedCode()  //libera codigos de correlativos reservados pela MayIUseCode()
                Return
            EndIf

            If FN022SITCB(cSituacao)[3] .And. (MV_PAR13 == 1 .Or. MV_PAR05 == 1) .And. lSE1Access
                Help(" ",1,"F060DES",, STR0151,1,0)
                lFilBor:= .F.
            EndIf

            If lFilBor .And. lSE1Access .And. MV_PAR13 == 1 .And. lGestao .AND. !_lF060Auto// Seleciona filiais == SIM
                aSelFil := AdmGetFil(.F.,.T.,"SE1")
                If Len(aSelFil) <= 0
                    Return
                EndIf
                cFilDe := aSelFil [1]
                cFilAte:= aSelFil [Len(aSelFil)]

            ElseIf lFilBor .And. MV_PAR05 == 1 //Considera Filiais == SIM
                If cFilDe != MV_PAR06
                    cFilDe  := MV_PAR06
                EndIf
                If cFilAte != MV_PAR07
                    cFilAte := MV_PAR07
                EndIf

                For nI := Len(aSM0) To 1 Step(-1)

                    If  aSM0[nI,2]>= cFilDe .And. aSM0[nI,2]<= cFilAte
                        AAdd(aSelFil,aSM0[nI,SM0_CODFIL])
                    EndIf

                    If  !(aSM0[nI,2]>= cFilDe .And. aSM0[nI,2]<= cFilAte)
                        Adel(aSM0,nI)
                        nInc++
                    EndIf
                Next

                If nInc > 0
                    Asize(aSM0,Len(aSM0) - nInc)
                EndIf
            Else
                If	lFilBor .And. MV_PAR13 == 1 .AND. !_lF060Auto
                    aSelFil := AdmGetFil(.F.,.T.,"SE1")
                    If Len(aSelFil) <= 0
                        Return
                    EndIf
                Else
                    aSelFil	:= { cFilAnt }
                EndIf

                If cPaisLoc <> "BRA"
                    cFilDe	:=	cFilAnt
                    cFilAte	:=	cFilAnt
                Else
                    cFilDe := aSelFil[1]
                    cFilAte:= aSelFil[Len(aSelFil)]
                EndIf
            EndIf

            //Seleciona tipos de titulos
            If MV_PAR12 == 1 .AND. !_lF060Auto
                finatipos()
            EndIf

            cPict06014:= PesqPict("SE1","E1_VALOR",16,nMoeda)
            cPict06018:= PesqPict("SE1","E1_VALOR",TamSx3("E1_VALOR")[1],nMoeda)

            //Filtra o arquivo por tipo e vencimento
            If _lFa60Fil .AND. !_lF060Auto
                cFil060 := ExecBlock("FA60FIL",.F.,.F.,{cPort060,cAgen060,cConta060,cSituacao,dVencIni,dVencFim,nLimite,nMoeda,cContrato,dEmisDe,dEmisAte,cCliDe,cCliAte})
            Else
                cFil060 := ".T."
            EndIf

            nMoedBco := MoedaBco(cPort060,cAgen060,cConta060)

            //Implementação de performace para atender a versão 2.06 e ++.
            //Fazer o Browse() e a IndRegua() em uma area de trabalho a partir
            //do SE1.

            nQtdTit := 0
            nSomaData := 0
            nValor  := 0
            If _lF060CpBor
                cCampoCli:= ExecBlock("F060CPBOR", .F., .F.)
                lSelCpo := .T.
            EndIf

            //Montagem de array para tratamento na MarkBrowse com o arquivo TRB
            AAdd(aCampos,{"E1_OK",""," "," "})
            DbSelectArea("SX3")
            DbSetOrder(1)
            DbSeek("SE1")
            While !EOF() .And. X3_ARQUIVO=="SE1"
                If x3Uso(x3_usado) .And. AllTrim(X3_CAMPO) != "E1_OK" .And. X3_CONTEXT != "V" .And. X3_TIPO != "M" .And. IIf(lSelCpo,AllTrim(X3_CAMPO)$AllTrim(cCampoCli),.T.) .OR. AllTrim(X3_CAMPO) == "E1_FILIAL"
                    AAdd(aCampos,{SX3->X3_CAMPO,"",AllTrim(X3Titulo()),SX3->X3_PICTURE})
                EndIf
                DbSkip()
            EndDo

            //Criação da estrutura de TRB com base em SE1.
            DbSelectArea("SE1")
            DbSetOrder(nIndice)

            aStruSE1 := DbStruct()
            aStru	 := {}
            For nJ := 1 To Len(aStruSE1)
                If aStruSE1[nJ][DBS_TYPE] <> "M"
                    AAdd(aStru, aStruSE1[nJ])
                EndIf
            Next nJ
            ASize(aStruSE1,0)

            AAdd(aStru,{"RECSE1","N",10,0})

            If lF060TRB
                aStru:= ExecBlock("F060Trb",.F.,.F.,{aStru})
            EndIf

            //Certifico de que o TRB esta fechado.
            If (Select("TRB") <> 0)
                DbSelectArea("TRB")
                DbCloseArea()
            EndIf

            cIndice	:= SE1->(IndexKey())
            aChaveTRB := TTFtIndex(Strtokarr2(cIndice, "+"))


            //Cria tabela temporária
            If lF060CHAV
                aF060CH := ExecBlock("F060CHAV", .F., .F., { aChaveTRB })

                If ValType(aF060CH) == "C"
                    If Empty(AllTrim(aF060CH))
                        nHelp := 1
                    Else
                        aF060CH := Strtokarr2(aF060CH, "+")
                    EndIf
                ElseIf ValType(aF060CH) == "A"
                    If Len(aF060CH) == 0
                        nHelp := 2
                    EndIf
                Else
                    nHelp := 3
                EndIf

                If nHelp == 1 .OR. nHelp == 2
                    Help(" ",1,"F060CHV",, STR0141,1,0) //O retorno do ponto de entrada é vazio, consequentemente o ponto de entrada não será processado.
                ElseIf nHelp == 3
                    Help(" ",1,"F060CHT",, STR0136,1,0) //Tipo de dado do retorno do ponto de entrada é diferente do esperado, consequentemente o ponto de entrada não será processado.
                ElseIf nHelp == 0
                    cIndF060CH	:= F60FindInd(aF060CH)
                    If !Empty(AllTrim(cIndF060CH))
                        aChaveTRB := TTFtIndex(aF060CH)
                    EndIf
                EndIf
            EndIf

            If _oFINA0601 <> Nil
                _oFINA0601:Delete()
                _oFINA0601 := Nil
            EndIf

            _oFINA0601 := FwTemporaryTable():New("TRB")
            _oFINA0601:SetFields(aStru)
            _oFINA0601:AddIndex("1", aChaveTRB)

            //Criação da tabela temporaria
            _oFINA0601:Create()

            //Posicionar em SE1 no primeiro registro que satisfaça a condição
            //de filtro considerando E1_NUMBOR = "      " (Space(6)).
            DbSelectArea("SE1")
            DbSetOrder(12)            // Chave (Numero do Bordero+DTOS(Data de Emissao))
            aStru := DbStruct()

            If !_lF060Auto
                cQuery := "SELECT "
                For nj:= 1 to Len(aStru)
                    If aStru[nJ][DBS_TYPE] <> "M"
                        cQuery += aStru[nj,1]+", "
                    EndIf
                Next
                cQuery += "R_E_C_N_O_ RECNO "
                cQuery += "  FROM "+	RetSqlName("SE1") + " SE1 "
                cQuery += " WHERE "

                //Gestao
                iF !lSE1Access .And. MV_PAR13 == 2 .And. MV_PAR05 == 2
                    cQuery += "E1_FILIAL = '" + xFilial("SE1") + "' "
                Else
                    cQuery += "E1_FILORIG " + GetRngFil(aSelFil, "SE1", .T., @cTmpSE1Fil,,.T.) + " "
                    AAdd(aTmpFil, cTmpSE1Fil)
                EndIf

                cQuery += "   AND E1_NUMBOR = '      '"
                cQuery += "   AND E1_EMISSAO Between '" + DTOS(dEmisDe) + "' AND '" + DTOS(dEmisAte) + "'"
                cQuery += "   AND E1_CLIENTE between '" + cCliDe        + "' AND '" + cCliAte        + "'"
                cQuery += "   AND E1_VENCREA between '" + DTOS(dVencIni)+ "' AND '" + DTOS(dVencFim) + "'"
                cQuery += "   AND E1_MOEDA = "+ STR(nMoeda)
                cQuery += "   AND E1_PREFIXO Between '" + cPrefDe + "' AND '" + cPrefAte + "'"
                cQuery += "   AND E1_NUM between '"     + cNumDe  + "' AND '" + cNumAte  + "'"
                cQuery += "   AND E1_SALDO > 0 "
                If FindFunction("FINTP02")
                    cQuery += FINTP02() // retornar o filtro de bloqueio do titulo do TIN  AND E1_ORIGEM <> 'FINI055'
                EndIf

                //Seleciona Tipos
                If MV_PAR12 == 1
                    cQuery += "   AND E1_TIPO IN " + FormatIn(cTipos,"/")
                EndIf

                cQuery += "   AND E1_TIPO NOT IN " + F060NotIN(lMarkAbt)

                //Titulos de integração RM Classis não serão enviados para borderô
                If !Empty(cOrigem)
                    cQuery += " AND E1_ORIGEM NOT IN " + FINFormTp(cOrigem)
                EndIf

                // Requisitos de Entidades Bancarias
                If lVerEntBanc
                    If Empty(cBcoChq)
                        If cPaisLoc == "ARG" .And. !Empty(cPostal)
                            cQuery += " AND E1_POSTAL = '" + cPostal + "'"
                        EndIf
                    Else
                        cQuery += " AND E1_BCOCHQ = '" + cBcoChq + "'"
                        cQuery += " AND E1_AGECHQ = '" + cAgeChq + "' "
                    EndIf
                EndIf

               	//Retira os títulos em PIX se o borderô for de cobrança descontada e protesto
                If _cSitPIX <> "0" .AND. (FN022SITCB(cSituacao)[3] .or.FN022SITCB(cSituacao)[4])
                    cQuery += " AND E1_SITUACA <> '"+_cSitPIX+"' "
                EndIf

                // SIGAPFS - Se o título foi criado pelo faturamento do PFS (E1_JURFAT preenchido),
                // então só pode entrar no borderô caso for do tipo boleto (E1_BOLETO = '1')
                cQuery += IIf(lJurXFin .And. FindFunction("JurQWBorde"), JurQWBorde(), "")

                //Não pode entrar em bordero, títulos associados a uma NFS OFF Balance ou movimentos de concialiação OFF Balance.
	            cQuery += Iif(FindFunction("RskQWBorde"),RskQWBorde(),"")

                cQuery += "   AND E1_SITUACA IN " + FormatIn(cListCart,"|")
                cQuery += "   AND D_E_L_E_T_ = ' ' "

                // Permite a inclusão de uma condicao adicional para a Query
                // Esta condicao obrigatoriamente devera ser tratada em um AND ()
                // para nao alterar as regras basicas da mesma.
                If lFa060Qry
                    cQueryADD := ExecBlock("FA060QRY",.F.,.F.,{cAgen060,cConta060,cPort060})
                    If ValType(cQueryADD) == "C"
                        cQuery += " AND (" + cQueryADD + ")"
                    EndIf
                EndIf

                cQuery += " ORDER BY "+ SqlOrder(SE1->(IndexKey()))

                If lF060QRCP
                    cQuery := ExecBlock("F060QRCP",.F.,.F.,{cQuery})
                EndIf

                cQuery := ChangeQuery(cQuery)

                DbSelectArea("SE1")
                DbCloseArea()
                DbSelectArea("SA1")

                DbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), 'SE1', .F., .T.)

                For ni := 1 to Len(aStru)
                    If aStru[ni,2] != 'C' .AND. aStru[ni,2] != "M"
                        TCSetField('SE1', aStru[ni,1], aStru[ni,2],aStru[ni,3],aStru[ni,4])
                    EndIf
                Next

                While !EOF() .And. IIf(MV_PAR05 == 2 .OR. (MV_PAR05 == 1 .And. MV_PAR06 == MV_PAR07), ;
                        DTOS(SE1->E1_EMISSAO) <= DTOS(dEmisAte) .And. E1_NUMBOR == Space(6),;
                        .T.)

                    //Verifica acesso do usuário na filial em processamento
                    If !Empty(SE1->E1_FILIAL) .And. aScan(aUserFils, SE1->E1_FILIAL) == 0
                        DbSkip()
                        Loop
                    EndIf

                    //Verificar a existência do filtro qdo existir o ExecBlock("FA60FIL")
                    If ! &(cFil060)
                        DbSkip()
                        Loop
                    EndIf

                    If FN022SITCB(SE1->E1_SITUACA)[10] //A rotina de transferência não poderá transferir títulos em PDD
                        DbSkip()
                        Loop
                    EndIf

                    // Para o Brasil, apresenta somente os titulos cuja moeda e' a mesma do banco
                    // selecionado para baixa.
                    // Caso a moeda do banco estiver vazia ou caso o motivo de baixa nao movimente banco, considero apenas a moeda forte
                    If FXMultSld()
                        If nMoedBco > 1
                            If cPaisLoc=="BRA" .And. !FXVldBxBco(cPort060,cAgen060,cConta060,SE1->E1_NATUREZ, SE1->E1_MOEDA,.F.)
                                DbSkip()
                                Loop
                            EndIf
                        EndIf
                    EndIf

                    //Gravar campos de TRB

                    If SE1->E1_SALDO > 0
                        If FN022SITCB(SE1->E1_SITUACA)[1] .Or. FN022SITCB(SE1->E1_SITUACA)[11]  //Carteira ou Situação PIX
                            DbSelectArea("TRB")
                            RecLock("TRB",.T.)
                            For ni := 1 to SE1->(FCount())
                                If TRB->(FieldName(nI)) == SE1->(FieldName(nI))
                                    If SE1->(ValType(FieldName(nI))) # "M"
                                        TRB->(FieldPut(nI,SE1->(FieldGet(ni))))
                                    EndIf
                                EndIf
                            Next

                            If TcSrvType() != "AS/400"
                                TRB->RECSE1 	:= SE1->RECNO
                            Else
                                TRB->RECSE1 	:= SE1->(Recno())
                            EndIf

                            TRB->E1_OK  	:= Space(2)
                            TRB->E1_NUMBOR	:= cNumBor

                            // Template GEM
                            If lHasTemplate.And. !Empty(SE1->E1_NCONTR)
                                aAux := ExecTemplate("CMDtPrc",.F.,.F.,{SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_VENCTO, SE1->E1_VENCTO})
                                TRB->E1_VALOR += aAux[2] + aAux[3]
                                If SE1->E1_VALOR == SE1->E1_SALDO
                                    TRB->E1_SALDO := TRB->E1_VALOR
                                EndIf
                            EndIf

                            MsUnLock()
                        EndIf
                    EndIf
                    DbSelectArea("SE1")
                    DbSkip()
                EndDo
            Else // Execução por rotina automática
                DbSelectArea("SE1")
                DbSetOrder(1)
                For nAt := 1 to Len(aRotAuto[2])
                    cAutFil := ""
                    cAutPre := ""
                    cAutNum := ""
                    cAutPar := ""
                    cAutTip := ""

                    //E1_FILIAL
                    If	(nPos := aScan(aRotAuto[2][nAt],{|x| x[1] == "E1_FILIAL"})) > 0
                        cAutFil	:= aRotAuto[2][nAt][nPos][2]
                    EndIf
                    //E1_PREFIXO
                    If	(nPos := aScan(aRotAuto[2][nAt],{|x| x[1] == "E1_PREFIXO"})) > 0
                        cAutPre	:= aRotAuto[2][nAt][nPos][2]
                    EndIf
                    //E1_NUM
                    If	(nPos := aScan(aRotAuto[2][nAt],{|x| x[1] == "E1_NUM"})) > 0
                        cAutNum	:= aRotAuto[2][nAt][nPos][2]
                    EndIf
                    //E1_PARCELA
                    If	(nPos := aScan(aRotAuto[2][nAt],{|x| x[1] == "E1_PARCELA"})) > 0
                        cAutPar	:= aRotAuto[2][nAt][nPos][2]
                    EndIf
                    //E1_TIPO
                    If	(nPos := aScan(aRotAuto[2][nAt],{|x| x[1] == "E1_TIPO"})) > 0
                        cAutTip	:= aRotAuto[2][nAt][nPos][2]
                    EndIf

                    If (DbSeek(cAutFil+cAutPre+cAutNum+cAutPar+cAutTip))

                        If SE1->E1_SALDO > 0
                            If FN022SITCB(SE1->E1_SITUACA)[1] .And. !FN022SITCB(SE1->E1_SITUACA)[10] //Carteira
                                DbSelectArea("TRB")
                                RecLock("TRB",.T.)
                                For ni := 1 to SE1->(FCount())
                                    If TRB->(FieldName(nI)) == SE1->(FieldName(nI))
                                        If SE1->(ValType(FieldName(nI))) # "M"
                                            TRB->(FieldPut(nI,SE1->(FieldGet(ni))))
                                        EndIf
                                    EndIf
                                Next

                                TRB->RECSE1 	:= SE1->(Recno())
                                TRB->E1_OK  	:= Space(2)
                                TRB->E1_NUMBOR	:= cNumBor
                                MsUnLock()
                                DbSelectArea("SE1")
                            EndIf
                        EndIf
                    EndIf
                Next
            EndIf

            DbSelectArea("SE1")
            DbCloseArea()
            ChKFile("SE1")
            DbSelectArea("SE1")
            DbSetOrder(12)
        Else
            //Necessario esse If para o caso da filial ser alterada entao as variaveis que definem as filiais de pesquisa
            //tambem serao atualizadas.
            If MV_PAR05 == 1
                If cFilDe != MV_PAR06
                    cFilDe  := MV_PAR06
                EndIf
                If cFilAte != MV_PAR07
                    cFilAte := MV_PAR07
                EndIf
            EndIf

            // Reinicializa os parametros do pergunte FIN060
            Pergunte("FIN060",.F.)
        EndIf

        //Verifica a existencia de registros no TRB.
        DbSelectArea("TRB")
        TRB->(DbGoTop())
        lSaida := .T.

        If TRB->(BOF()) .And. TRB->(EOF())
            Help(" ",1,"RECNO")
            Exit
        EndIf

        //Disparar chamada do Browse de seleção ou markBrowse para TRB.
        nOpca := fA060MarkB("TRB",nLimite,dVencIni,dVencFim,cSituacao,oPrazoMed,ovalor,aCampos,cNumbor,lMarkAbt,nIndice,cIndF060CH)

        If nOpca == 2
            Exit
            lSaida := .T.
        ElseIf nOpca == 0
            DbSelectArea("TRB")
            DbCloseArea()
            If _oFINA0601 <> Nil
                _oFINA0601:Delete()
                _oFINA0601 := Nil
            EndIf
            DbSelectArea("SE1")
            DbSetOrder(nIndice)
            lSaida := .F.
            Loop
        EndIf
        DbSelectArea("SE1")

        //Caso o nenhum titulo tenha sido selecionado, não gera bordero
        If nValor = 0 .And. Abs(nQtdTit) = 0		// Nenhum titulo Selecionado
            Help(" ",1,"FA060VALOR")
            Exit
        EndIf

        //Caso o valor de Abatimentos seja maior que de titulos, não gera bordero
        If nValor < 0.01 .And. Abs(nQtdTit) >= 0
            Help(" ",1,"FA060VLNEG")
            Exit
        EndIf

        If lF060Proc
            Execblock("F060PROC",.F.,.F.,{cPort060,cAgen060,cConta060,cSituacao,dVencIni,dVencFim,nLimite,nMoeda,cContrato,dEmisDe,dEmisAte,cCliDe,cCliAte})
        EndIf

        nRetencao := SA6->A6_RETENCA
        lCobranDes := FN022SITCB(cSituacao)[3]

        //Se for transferencia para Desconto ele devera pegar a conta corrente a ser creditada e a data do credito
        If lCobranDes
            If lF060Hist
                cHistorico := ExecBlock("F060HIST",.F.,.F.,{cSituacao})
            ElseIf cSituacao == PadR("2",nSitTam)
                cHistorico	:= OemToAnsi(STR0031)  //"Titulos para desconto         "
            Else
                cHistorico := OemToAnsi(STR0032)  //"Titulos Cob Caucao Descontada  "
            EndIf

            //Se no cadastro de situacao de cobranca (FRV) faltar informacao, usa informacoes do cadastro de bancos SA6
            dDataMov  := dDataBase + SA6->A6_RETDESC
            nTaxaDesc := FN022SITCB(cSituacao)[7]
            cNatureza := FN022SITCB(cSituacao)[8]

            If nTaxaDesc == 0
                nTaxaDesc := FN022SITCB(cSituacao)[7]
                If nTaxaDesc > 0
                    cPictTd	  := PesqPict("FRV","FRV_PERCEN",,nMoeda)
                EndIf
            EndIf

            If nTaxaDesc == 0
                nTaxaDesc	:= SA6->A6_TAXADES
            EndIf

            If Empty(cNatureza)
                cNatureza	:= cAuxNat
            EndIf

            cNatureza	:= PadR(cNatureza,10)

            If !_lF060Auto
                fa060TxDes(@nValCred,nTaxaDesc,@nTxIOF,@nVlrIOF)
            EndIf

            nOpca := IIf(nOpca <> 2, 0, nOpca)

            While nOpca == 0 .Or. nOpca == 2
                If !_lF060Auto
                    DEFINE MSDIALOG oDlgDesc TITLE OemToAnsi(STR0033) From 5,5 To 14,72 OF oMainWnd	// "Dados da Cobrança"

                    oPanel := TPanel():New(0,0,'',oDlgDesc,, .T., .T.,, ,40,40,.T.,.T.)
                    oPanel:Align := CONTROL_ALIGN_ALLCLIENT

                    @ 003,003 Say OemToAnsi(STR0034) Size 40,8 of oPanel Pixel	// "Histórico"
                    @ 003,043 MSGet cHistorico Picture "@S50" Size 215,8 of oPanel Pixel

                    @ 018,003 Say OemToAnsi(STR0035)		Size 40,8 of oPanel Pixel// "Data Crédito"
                    @ 018,043 MSGet dDataMov 				Size 45,8 of oPanel Pixel hasbutton
                    @ 018,095 Say OemToAnsi(STR0043) 	Size 40,8 of oPanel Pixel	// "Tx Desc"
                    @ 018,120 MSGet nTaxaDesc Picture cPictTd Valid fa060TxDes(@nValCred,@nTaxaDesc,@nTxIOF,@nVlrIOF) .And. F060VldF(nTxIOF, nTaxaDesc, @cFormula) Size 40,8 of oPanel Pixel hasbutton
                    @ 018,170 Say OemToAnsi(STR0036)		Size 40,8 of oPanel Pixel	// "Natureza"
                    @ 018,195 MSGet cNatureza Picture "@!"  F3 "SED" Valid F060VldNat(cNatureza, cSituacao) .And. IIf(_lF060NDes,ExecBlock("F060NDES",.F.,.F.,{cNatureza}),.T.) .And. fa060TxDes(@nValCred,nTaxaDesc,@nTxIOF,@nVlrIOF) Size 60,8 of oPanel Pixel hasbutton

                    @ 033,003 Say OemToAnsi(STR0037)	Size 40,8 of oPanel Pixel  // "Fórmula"
                    @ 033,043 MSGet cFormula  Picture "@!"  F3 "SM4" Valid FA060REFR1(cFormula,@nValCred) hasbutton Size 45,8 of oPanel Pixel
                    @ 033,095 Say OemToAnsi(STR0038)	Size 40,8 of oPanel Pixel// "Crédito"
                    @ 033,120 MSGet nValCred  Picture cPict06018 Valid fa060TxDes(@nValCred,@nTaxaDesc,@nTxIOF,@nVlrIOF) .And. nValCred <= nValor hasbutton Size 70,8 of oPanel Pixel

                    If cPaisloc=="BRA"
                        @ 033,190 Say OemToAnsi(STR0102)	Size 40,8 of oPanel Pixel// "Tx IOF"
                        @ 033,210 MSGet nTxIOF  Picture cPictIOF Valid fa060TxDes(@nValCred,@nTaxaDesc,@nTxIOF,@nVlrIOF) .And. F060VldF(nTxIOF, nTaxaDesc, @cFormula) Size 50,8 of oPanel Pixel hasbutton
                    EndIf

                    If IsPanelFin()
                        ACTIVATE MSDIALOG oDlgDesc ON INIT FaMyBar(oDlgDesc,{|| IIf(F060VldNat(cNatureza, cSituacao), (lRetorna := .T., nOpca := 1, oDlgDesc:End()), .F.)},,,,.F.) CENTERED
                    Else
                        DEFINE SBUTTON FROM 054 , 205 TYPE 1 ACTION IIf(!F060VldNat(cNatureza, cSituacao), .F., (lRetorna := .T., nOpca := 1, oDlgDesc:End())) ENABLE OF oDlgDesc
                        DEFINE SBUTTON FROM 054 , 235 TYPE 2 ACTION (lRetorna:=.F., nOpca := 0, oDlgDesc:End()) ENABLE OF oDlgDesc

                        @ 001, 001 TO 050, 262 OF oPanel Pixel
                        ACTIVATE MSDIALOG oDlgDesc CENTERED
                    EndIf
                Else
                    //nTaxaDesc
                    If	(nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTTXDESC"})) > 0
                        nTaxaDesc := aRotAuto[1][nPos][2]
                    EndIf

                    //nTxIOF
                    If	(nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTTXIOF"})) > 0
                        nTxIOF	:= aRotAuto[1][nPos][2]
                    EndIf

                    //dDataMov
                    If	(nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTDATAMOV"})) > 0
                        dDataMov	:= aRotAuto[1][nPos][2]
                    EndIf

                    If (nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTCREDIT"})) > 0 .And. aRotAuto[1][nPos][2] > 0
                        nValCred := aRotAuto[1][nPos][2]
                    EndIf

                    fa060TxDes(nValCred, nTaxaDesc, @nTxIOF, @nVlrIOF)
                    F060VldF(nTxIOF, nTaxaDesc, @cFormula)
                    nOpca := 1

                    If !F060VldNat(cNatureza, cSituacao)
                        nOpcA := 0
                    EndIf
                EndIf

                //Verifica se data do movimento não é menor que data limite de movimentacao no financeiro
                If dDataMov < dDataFin .And. lBxDtFin
                    MsgAlert(STR0105)	//"Não são permitidas movimentações financeiras com data menores que a data limite de movimentações no financeiro.Verifique o conteudo do parametro MV_DATAFIN"
                    Return
                EndIf

                If nOpca == 2
                    Loop
                EndIf
                Exit
            EndDo

            If nOpca == 3
                DbSelectArea("TRB")
                DbCloseArea()
                If _oFINA0601 <> Nil
                    _oFINA0601:Delete()
                    _oFINA0601 := Nil
                EndIf
                DbSelectArea("SE1")
                DbSetOrder(nIndice)
                lSaida := .F.
                Loop
            EndIf
        Else
            If FN022SITCB(cSituacao)[6] //cSituacao $ "1H"
                nValCred := nValor - (nQtdTit * SA6->A6_TXCOBSI)
            Else
                nValCred := nValor
            EndIf
        EndIf

        If nOpcA == 2
            DbSelectArea("TRB")
            DbCloseArea()
            If _oFINA0601 <> Nil
                _oFINA0601:Delete()
                _oFINA0601 := Nil
            EndIf
            DbSelectArea("SE1")
            DbSetOrder(nIndice)
            lSaida := .F.
            Loop
        ElseIf nOpcA == 1
            nMoedaBco := Max(SA6->A6_MOEDA, 1)

            If nValCred < 0 .Or. nValCred > nValor
                Exit
            EndIf

            _lGrvMetri := .F.
            lVldCtbOff := F060VldCtb()
            cPadrao060 := fA060Pad(cSituacao)
            lPadrao060 := VerPadrao(cPadrao060)

            If lVldCtbOff
                If MV_PAR14 == 2 //Se Offline igual a SIM
                    lCtbOfflin := .T.
                EndIf
            ElseIf MV_PAR03==2 //Se contabiliza igual a NÃO
                lCtbOfflin := .T.
            EndIf

            If lCobranDes .And. nTaxaDesc > 0
                nDescFK5 := nValor - (nValor * ((100 - nTaxaDesc) / 100))
            EndIf

            lLanc := .F.
            DbSelectArea("SE5")
            SE5->(DbGoTo(0))
            DbSelectArea("TRB")
            TRB->(DbGoTop())

            If lCobranDes
                cIdFK5 := FwUUIDV4()
            EndIf

            If _lBCOApi  // Boleto API, tranforma o lógico para character
                cBolApi := If (lBolApi , 'S', 'N')
            EndIf

            Begin Transaction
                While TRB->(!Eof())
                    DbSelectArea("SE1")
                    SE1->(DbGoTo(TRB->RECSE1))

                    If TRB->E1_OK == cMarca .And. (!SE1->E1_TIPO $ MVABATIM .Or. lMarkAbt)
                        nSaldo     := SE1->E1_SALDO
                        nTxMoeda   := SE1->E1_TXMOEDA
                        nVlrDesTit := 0
                        nVlrIofTit := 0
                        nC++

                        //Tratamento para carteira descontada com moedas estrangeira diferente do banco
                        If lCobranDes .And. SE1->E1_MOEDA > 1 .And. cPaisLoc == "BRA"
                            If mv_par04 == 1 .And. (nTxMoeda == 0 .Or. !Empty(SE1->E1_DTVARIA))
                                nTxMoeda := RecMoeda(Iif(Empty(SE1->E1_DTVARIA), dDataBase, SE1->E1_DTVARIA), SE1->E1_MOEDA)
                            ElseIf mv_par04 != 1 .And. nTxMoeda == 0
                                nTxMoeda := RecMoeda(dDataBase, SE1->E1_MOEDA)
                            EndIf

                            If nMoedaBco == 1
                                If nTaxaDesc > 0
                                    nVlrDesTit := (nSaldo * (nTaxaDesc / 100))
                                    nSaldo     -= nVlrDesTit
                                    nVlrDesTit := Round(xMoeda(nVlrDesTit, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)

                                    If nC == 1 .And. nVlrDesc > 0
                                        nVlrDesc := Round(xMoeda(nVlrDesc, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)
                                    EndIf
                                EndIf

                                If nTxIof > 0
                                    nVlrIofTit := (nSaldo * (nTxIof / 100))
                                    nSaldo     -= nVlrIofTit
                                    nVlrIofTit := Round(xMoeda(nVlrIofTit, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)

                                    If nC == 1 .And. nVlrIOF > 0
                                        nVlrIOF := Round(xMoeda(nVlrIOF, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)
                                    EndIf
                                EndIf

                                nSaldo := Round(xMoeda(nSaldo, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda, 0), 2)
                            Else
                                If nTaxaDesc > 0
                                    nVlrDesTit := (nSaldo * (nTaxaDesc / 100))
                                    nSaldo     -= nVlrDesTit
                                EndIf

                                If nTxIof > 0
                                    nVlrIofTit := (nSaldo * (nTxIof / 100))
                                    nSaldo     -= nVlrIofTit
                                EndIf

                                If SE1->E1_MOEDA != nMoedaBco .And. (nVlrDesTit+nVlrIofTit) > 0
                                    If nVlrDesTit > 0
                                        nVlrDesTit := Round(xMoeda(nVlrDesTit, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda), 2)

                                        If nC == 1 .And. nVlrDesc > 0
                                            nVlrDesc := Round(xMoeda(nVlrDesc, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda), 2)
                                        EndIf
                                    EndIf

                                    If nVlrIofTit > 0
                                        nVlrIofTit := Round(xMoeda(nVlrIofTit, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda), 2)

                                        If nC == 1 .And. nVlrIOF > 0
                                            nVlrIOF := Round(xMoeda(nVlrIOF, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda), 2)
                                        EndIf
                                    EndIf

                                    nSaldo  := Round(xMoeda(nSaldo, SE1->E1_MOEDA, nMoedaBco, dDataMov, nCasDec, nTxMoeda), 2)
                                EndIf
                            EndIf                        
                        EndIf

                        //Verifica qual o Lanc Padrao que sera utilizado
                        If !lCtbOfflin .And. lPadrao060 .And. !lLanc
                            lLanc := .T.
                            nHdlPrv := HeadProva(cLote, "FINA060" /*cPrograma*/, SubStr(cUsuario, 7, 6), @cArquivo)
                        EndIf

                        cSituAnt := SE1->E1_SITUACA
                        cPortAnt := SE1->E1_PORTADO
                        cAgAnt   := SE1->E1_AGEDEP
                        cContAnt := SE1->E1_CONTA

                        If cPaisLoc <> "BRA"
                            //Calculo para o tempo de Clearing, o tempo de Clearing esta
                            //sendo calculado somente com dias uteis corridos.
                            //Se o Tempo for de mais de uma semana, coloco uma data de
                            //aqui a dez anos assim tem que ser acreditado manualmente.
                            dBase := Iif(SE1->E1_VENCREA <= dDataBase, dDataBase, SE1->E1_VENCREA)
                            nPos  := AScan(aTempos, cClearing)
                            nDias := If(nPos <= 5, nPos, 3650)

                            If nDias == 3650
                                dBase += 3650
                                nDias := 0
                            EndIf
                        Else
                            dBase := SE1->E1_VENCREA
                            nDias := nRetencao
                        EndIf

                        //Se considera retencao bancaria, atualiza vencimento com a retencao
                        If nDias > 0 .And. FN022SITCB(cSituacao)[2]	//cSituacao $ "12347H"
                            aFeriados := RetFeriados()

                            While nDias > 0
                                dBase++
                                If AScan(aFeriados,Dtos(dBase)) == 0 .And. Dow(dBase) <> 1 .And. Dow(dBase) <> 7
                                    nDias--
                                EndIf
                            EndDo

                            RecLock("SE1")

                            If cPaisLoc == "BRA"
                                //Atualiza data vencto real c/retenção Bancária se considera retencao bancaria
                                If MV_PAR10 == 1
                                    SE1->E1_VENCREA := dBase
                                    F060AtuAgre() //Atualiza tambem os registros agregados
                                EndIf
                            Else
                                //Atualiza data em que o cheque serah creditado
                                SE1->E1_DTACRED := dBase
                            EndIf
                            SE1->(MsUnlock())
                        EndIf

                        RecLock("SEA",.T.)
                        SEA->EA_FILIAL 	:= xFilial()
                        SEA->EA_NUMBOR  := cNumBor
                        SEA->EA_DATABOR := dDataBase
                        SEA->EA_PORTADO := cPort060
                        SEA->EA_AGEDEP  := cAgen060
                        SEA->EA_NUMCON  := cConta060
                        SEA->EA_NUM 	:= SE1->E1_NUM
                        SEA->EA_PARCELA := SE1->E1_PARCELA
                        SEA->EA_PREFIXO := SE1->E1_PREFIXO
                        SEA->EA_TIPO	:= SE1->E1_TIPO
                        SEA->EA_CART	:= "R"
                        SEA->EA_SITUACA := cSituacao
                        SEA->EA_SITUANT := cSituAnt
                        SEA->EA_FILORIG := SE1->E1_FILORIG
                        SEA->EA_PORTANT := cPortAnt
                        SEA->EA_AGEANT  := cAgAnt
                        SEA->EA_CONTANT := cContAnt
                        SEA->EA_ORIGEM  := "FINA060"

                        If _lBCOApi
                            SEA->EA_BORAPI :=  cBolApi
                            SEA->EA_SUBCTA  := cSubCta060
                            SEA->EA_ESPECIE := cEspec060
                        EndIf

                        If lF060SEA2
                            ExecBlock("F060SEA2",.F.,.F.)
                        EndIf

                        MsUnlock()
                        FKCOMMIT()

                        aAlt := {}
                        AAdd(aAlt, { STR0114, '', '', '', STR0115 +  AllTrim(SEA->EA_NUMBOR)})
                        FinaCONC(aAlt,"SE1") //chamada da Função que cria o Histórico de Cobrança

                        RecLock("SE1",.F.)
                        SE1->E1_PORTADO := cPort060
                        SE1->E1_AGEDEP  := cAgen060
                        SE1->E1_SITUACA := cSituacao
                        SE1->E1_CONTRAT := cContrato
                        SE1->E1_NUMBOR  := cNumBor
                        SE1->E1_DATABOR := dDataBase
                        SE1->E1_MOVIMEN := dDataBase
                        SE1->E1_CONTA	:= cConta060

                        If lVldCtbOff
                            FinAGrvFWI({IIf(!lCtbOfflin .And. lPadrao060, "S", "N"), cPadrao060, SE1->E1_SALDO, nDescFK5, nVlrIOF,;
                                cSituacao, cSituAnt, cPortAnt, cAgAnt, cContAnt, cContrato, cIdFK5, cNumBor})
                        EndIf

                        //DDA - Debito Direto Autorizado
                        If SE1->E1_OCORREN $ "53/52"
                            Reclock("SE1")
                            SE1->E1_OCORREN := "01"
                            MsUnlock()
                        EndIf

                        MsUnlock()
                        FKCOMMIT()
                        DbSelectArea("SA1")
                        SA1->(MsSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA))

                        If !lCtbOfflin .And. lPadrao060 .And. lLanc
                            nTotal += DetProva(nHdlPrv, cPadrao060, "FINA060", cLote)
                        EndIf

                        nValSaldo += SE1->E1_SALDO //Saldo do titulo para contabilizacao de diferenca

                        If lCobranDes
                            nAbat	 := SomaAbat(SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, "R", SE1->E1_MOEDA, dDataBase, SE1->E1_CLIENTE, SE1->E1_LOJA, Nil, Nil, SE1->E1_TIPO)
                            nTotAbat += nAbat

                            If MV_PAR04 == 1 //Baixa titulos descontados
                                cPadrao := IIf(cSituacao == PadR("2", nSitTam), "522", "528") //TODO Verificar tipo 2
                                lPadrao := VerPadrao(cPadrao)

                                If !lCtbOfflin .And. lPadrao .And. !lLanc
                                    lLanc   := .T.
                                    nHdlPrv := HeadProva(cLote, "FINA060" /*cPrograma*/, SubStr(cUsuario, 7, 6), @cArquivo)
                                EndIf

                                //Atualiza Saldo de Duplicadas do Cliente
                                DbSelectArea("SA1")

                                If SA1->(DbSeek(cFilial+SE1->E1_CLIENTE+SE1->E1_LOJA))
                                    AtuSalDup("-", SE1->E1_SALDO, SE1->E1_MOEDA, SE1->E1_TIPO, Nil, SE1->E1_EMISSAO)
                                EndIf

                                //Grava baixa do titulo descontado no SE5 (se optado)
                                nValBaixa := SE1->E1_SALDO - nAbat + SE1->E1_SDACRES - SE1->E1_SDDECRE

                                If MV_PAR09 == 1
                                    nJuros   := SE1->E1_SDACRES
                                    nDescont := SE1->E1_SDDECRE
                                EndIf

                                DbSelectArea("SE1")
                                SE1->(DbGoTo(TRB->RECSE1))

                                aVetBaixa := {;
                                    {"E1_PREFIXO",   SE1->E1_PREFIXO,           Nil},;
                                    {"E1_NUM",       SE1->E1_NUM,               Nil},;
                                    {"E1_PARCELA",   SE1->E1_PARCELA,           Nil},;
                                    {"E1_TIPO",      SE1->E1_TIPO,              Nil},;
                                    {"AUTMOTBX",     "NOR",                     Nil},;
                                    {"AUTDTBAIXA",   dDataBase,                 Nil},;
                                    {"AUTDTCREDITO", dDataBase,                 Nil},;
                                    {"AUTHIST",      STR0056,                   Nil},;
                                    {"AUTTXMOEDA",   nTxMoeda,                  Nil},;
                                    {"AUTSITUCOB",   cSituacao,                 Nil},;
                                    {"AUTDESCONT",   (nVlrDesTit+nVlrIofTit),   Nil},;
                                    {"AUTBANCO",     cPort060,                  Nil},;
                                    {"AUTAGENCIA",   cAgen060,                  Nil},;
                                    {"AUTCONTA",     cConta060,                 Nil},;
                                    {"AUTREGBXPRIN", 0,                         Nil}}

                                cSituaAnt := cSituacao
                                cNatAnt   := cNatureza

                                //Efetiva a baixa do titulo:
                                MSExecAuto( { |a, b| FINA070(a, b) }, aVetBaixa, 3)
                                Pergunte("FIN060", .F.)
                                SE1->(DbGoTo(TRB->RECSE1))

                                If lMsErroAuto
                                    MostraErro()
                                    Exit
                                Else
                                    cSituacao := cSituaAnt
                                    cNatureza := cNatAnt
                                    cChaveTit := SE1->E1_FILIAL+"|"+SE1->E1_PREFIXO+"|"+SE1->E1_NUM+"|"+SE1->E1_PARCELA+"|"+SE1->E1_TIPO+"|"+SE1->E1_CLIENTE+"|"+SE1->E1_LOJA
                                    cIdDocFK7 := FINBuscaFK7(cChaveTit, "SE1", SE1->E1_FILORIG)
                                    cSeq := F060SeqBx(cIdDocFK7)
                                    FK1->(DbSetOrder(2)) //FK1_FILIAL+FK1_IDDOC+FK1_SEQ 
                                    If FK1->(dbSeek(xFilial("FK1", SE1->E1_FILORIG) + cIdDocFK7+cSeq))
                                        nTotalBaix += FK1->FK1_VALOR
                                    EndIf

                                    If (nPos := Ascan(aVetBaixa, {|x| x[1] == "AUTREGBXPRIN"})) > 0 .And. aVetBaixa[nPos,2] > 0
                                        SE5->(DbGoto(aVetBaixa[nPos,2]))

                                        If SE5->E5_LA != "S" .And. !lCtbOfflin .And. lPadrao060
                                            Reclock("SE5")
                                            SE5->E5_LA := "S"
                                            SE5->(MsUnlock())
                                        EndIf

                                        If FK1->FK1_VALOR == 0
                                            nTotalBaix += SE5->E5_VALOR
                                        EndIf
                                    EndIf

                                    If SE1->E1_FLUXO != "N"  // Verifica se atualiza o saldo da natureza
                                        AtuSldNat(FK1->FK1_NATURE, FK1->FK1_DATA, FK1->FK1_MOEDA, "3", "R", FK1->FK1_VALOR, FK1->FK1_VLMOE2, "+",,FunName(),"SE1",SE1->(Recno()),nOpcx)
                                    EndIf

                                    If lUsaFlag .And. lPadrao .And. nPos > 0 // Armazena em aFlagCTB para atualizar no modulo Contabil
                                        AAdd(aFlagCTB, {"E5_LA", "S", "SE5", aVetBaixa[nPos,2] , 0, 0, 0})
                                    EndIf

                                    If !lCtbOfflin .And. lPadrao
                                        nTotal += DetProva(nHdlPrv, cPadrao, "FINA060" /*cPrograma*/, cLote, /*nLinha*/, /*lExecuta*/, /*cCriterio*/,;
                                                            /*lRateio*/, /*cChaveBusca*/, /*aCT5*/, /*lPosiciona*/, @aFlagCTB, /*aTabRecOri*/, /*aDadosProva*/)
                                    EndIf

                                    //Caso baixe o titulo por cobranca descontada, gero comissao para o fornecedor
                                    If cTpComis == "O" .And. nPos > 0 .And. cSituacao != cSituAnt
                                        AAdd(aBaixas, {SE5->E5_MOTBX, SE5->E5_SEQ, aVetBaixa[nPos,2]})

                                        //Gera commissão
                                        Fa440CalcB(aBaixas, lJuros, lDescont, "FINA060", Nil, Nil, Nil, .T., TRB->RECSE1)
                                        aBaixas := {}
                                    EndIf
                                EndIf
                            EndIf
                        EndIf

                        //Atualiza Títulos protestados
                        If FN022SITCB(cSituacao)[4] //cSituacao $ "6F"
                            DbSelectArea("SA1")
                            If SA1->(DbSeek(cFilial+SE1->E1_CLIENTE+SE1->E1_LOJA))
                                Reclock("SA1")
                                SA1->A1_TITPROT := A1_TITPROT+1
                                SA1->A1_DTULTIT := dDataBase
                                SA1->(MsUnlock())
                            EndIf
                        EndIf
                    EndIf

                    DbSelectArea("TRB")

                    If _lTFA60BDE
                        ExecTemplate("FA60BDE",.F.,.F.)
                    EndIf

                    If _lFA60BDE
                        ExecBlock("FA60BDE",.F.,.F.)
                    EndIf

                    //Integracao TIN x PROTHEUS
                    If AllTrim(SE1->E1_ORIGEM) == "FINI055" .And. FwHasEAI("FINA055",.F.,,.T.)
                        If TRB->E1_SITUACA <> SE1->E1_SITUACA .And. SE1->E1_NUM == TRB->E1_NUM
                            FwIntegDef("FINA040B")
                        EndIf
                    EndIf

                    TRB->(DbSkip())
                EndDo

                If !lMsErroAuto
                    nTxMoeda  := 0
                    nMoedaBco := Max(MoedaBco(cPort060, cAgen060, cConta060), 1)

                    If cPaisLoc == "BRA" .And. nMoeda > 1
                        If _lF060Auto .And. (nPos := aScan(aRotAuto[1],{|x| x[1] == "AUTTXMOEDA"})) > 0
                            nTxMoeda := aRotAuto[1][nPos][2]
                        EndIf

                        If nTxMoeda == 0 .And. (nTxMoeda := RecMoeda(dDataBase, nMoeda)) <= 0
                            nTxMoeda := 1
                        EndIf

                        nVlMoed2 := nValCred

                        If nMoeda != nMoedaBco
                            nValCred := xMoeda(nValCred, nMoeda, nMoedaBco, dDataBase, nCasDec, nTxMoeda)
                        EndIf
                    EndIf

                    If lCobranDes //Movimento bancário totalizador do borderô de cobrança descontada (cSituacao $ "27")  
                        If (nMoeda == 1 .Or. cPaisLoc != "BRA")
                            If MV_PAR04 == 1 .And. nTotalBaix > 0
                                nValCred := nTotalBaix - IIf(nMoeda == 1, (nVlrDesc + nVlrIof), 0)      
                            ElseIf MV_PAR04 != 1
                                //Dedução do desconto e valor de IOF
                                nValCred := (nValSaldo - (nVlrDesc + nVlrIof))

                                //Dedução do(s) abatimento(s)
                                If nTotAbat > 0 .And. MV_PAR08 == 1
                                    nValCred -= nTotAbat
                                EndIf

                                //Soma do acréscimo e dedução do decréscimo
                                If MV_PAR09 == 1 .And. SE1->(E1_SDACRES+E1_SDDECRE) > 0
                                    nValCred := ((nValCred + SE1->E1_SDACRES) - SE1->E1_SDDECRE)
                                EndIf
                            EndIf
                        EndIf

                        //Verifica se a natureza esta cadastrada. Se nao, cria.
                        Fa060Nat(1, cNatureza)

                        cCamposE5 := "{"
                        cCamposE5 += " {'E5_DTDIGIT', dDataBase}"
                        cCamposE5 += ",{'E5_DTDISPO', CToD('"+DToC(dDataMov)+"')}"
                        cCamposE5 += ",{'E5_BANCO', '" + cPort060 + "' }"
                        cCamposE5 += ",{'E5_AGENCIA', '" + cAgen060 + "' }"
                        cCamposE5 += ",{'E5_CONTA', '" + cConta060 + "'}"
                        cCamposE5 += ",{'E5_MOTBX', 'NOR' }"
                        cCamposE5 += ",{'E5_LA', '" + IIf(!lCtbOfflin .And. lPadrao060, "S", "N") + "'}"
                        cCamposE5 += ",{'E5_SITCOB', '" + cSituacao + "' }"
                        cCamposE5 += ",{'E5_VLDESCO', " +  cValTochar(nVlrDesc) + "}"

                        If lSpbInUse
                            cCamposE5 += ",{'E5_MODSPB', '1' }"
                        EndIf

                        cCamposE5 += "}"

                        oModelBx := FwLoadModel("FINM030") //Model de movimento bancário
                        oModelBx:SetOperation(MODEL_OPERATION_INSERT) //Inclusao
                        oModelBx:Activate()
                        oModelBx:SetValue("MASTER", "E5_GRV", .T.)
                        oModelBx:SetValue("MASTER", "HISTMOV", cHistorico)
                        oModelBx:SetValue("MASTER", "NOVOPROC", .T.)

                        //Dados do Processo - Define a chave da FK5 no IDORIG
                        oSubFKA := oModelBx:GetModel("FKADETAIL")
                        oSubFK5 := oModelBx:GetModel("FK5DETAIL")
                        oSubFK6 := oModelBx:GetModel("FK6DETAIL")

                        oSubFKA:SetValue("FKA_IDORIG", cIdFK5)
                        oSubFKA:SetValue("FKA_TABORI", "FK5")
                        oSubFK5:SetValue("FK5_DATA"  , dDataMov)
                        oSubFK5:SetValue("FK5_NATURE", cNatureza)
                        oSubFK5:SetValue("FK5_RECPAG", "R")
                        oSubFK5:SetValue("FK5_TPDOC" , "BD")
                        oSubFK5:SetValue("FK5_ORIGEM", cFunName)
                        oSubFK5:SetValue("FK5_HISTOR", cHistorico)
                        oSubFK5:SetValue("FK5_MOEDA" , StrZero(nMoedaBco, 2))
                        oSubFK5:SetValue("FK5_BANCO" , cPort060)
                        oSubFK5:SetValue("FK5_AGENCI", cAgen060)
                        oSubFK5:SetValue("FK5_CONTA" , cConta060)
                        oSubFK5:SetValue("FK5_DOC"   , cNumBor)
                        oSubFK5:SetValue("FK5_FILORI", cFilAnt)
                        oSubFK5:SetValue("FK5_DTDISP", dDataMov)
                        oSubFK5:SetValue("FK5_TXMOED", nTxMoeda)

                        If cPaisloc != "BRA"
                            nDecs := MsDecimais(nMoedaBco)
                            oSubFK5:SetValue("FK5_VALOR", Round(NoRound(xMoeda(nValCred, nMoeda, nMoedaBco, dDataMov, nDecs+1), nDecs+1), nDecs))
                            oSubFK5:SetValue("FK5_VLMOE2", nValCred)
                        Else
                            oSubFK5:SetValue("FK5_VALOR",  nValCred)
                            oSubFK5:SetValue("FK5_VLMOE2", nVlMoed2)
                        EndIf

                        If lSpbInUse
                            oSubFK5:SetValue("FK5_MODSPB", "1")
                        EndIf

                        //Desconto
                        If nVlrDesc <> 0
                            If !oSubFK6:IsEmpty()
                                oSubFK6:AddLine()
                                oSubFK6:GoLine(oSubFK6:Length())
                            EndIf
                            oSubFK6:SetValue('FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6'))
                            oSubFK6:SetValue('FK6_TPDOC'	, "DC")
                            oSubFK6:SetValue('FK6_VALCAL'	, nVlrDesc)
                            oSubFK6:SetValue('FK6_VALMOV'	, nVlrDesc)
                            oSubFK6:SetValue('FK6_RECPAG'	, "R")
                            oSubFK6:SetValue('FK6_IDORIG'	, cIdFK5)
                            oSubFK6:SetValue('FK6_TABORI'	, 'FK5')
                            oSubFK6:SetValue("FK6_HISTOR"  , cHistorico)
                            oSubFK6:SetValue('FK6_GRVSE5'  , .F.)
                        EndIf

                        //IOF
                        If nVlrIOF > 0 .And. cPaisloc == "BRA"
                            If !oSubFK6:IsEmpty()
                                oSubFK6:AddLine()
                                oSubFK6:GoLine(oSubFK6:Length())
                            EndIf
                            oSubFK6:SetValue('FK6_IDFK6',  GetSxEnum('FK6','FK6_IDFK6'))
                            oSubFK6:SetValue('FK6_TPDOC',  "I2")
                            oSubFK6:SetValue('FK6_VALCAL', nVlrIOF)
                            oSubFK6:SetValue('FK6_VALMOV', nVlrIOF)
                            oSubFK6:SetValue('FK6_RECPAG', "P")
                            oSubFK6:SetValue('FK6_IDORIG', cIdFK5)
                            oSubFK6:SetValue('FK6_TABORI', 'FK5')
                            oSubFK6:SetValue("FK6_HISTOR", STR0108) //"IOF sobre cob descontada"
                            oSubFK6:SetValue('FK6_GRVSE5', .T.)
                        EndIf

                        oModelBx:SetValue("MASTER", "E5_CAMPOS", cCamposE5)

                        If oModelBx:VldData()
                            oModelBx:CommitData()
                            SE5->(DbGoTo(oModelBx:GetValue("MASTER", "E5_RECNO")))
                            nRecSE5Trf := SE5->(Recno())
                        Else
                            lRet := .F.
                            cLog := cValToChar(oModelBx:GetErrorMessage()[4]) + ' - '
                            cLog += cValToChar(oModelBx:GetErrorMessage()[5]) + ' - '
                            cLog += cValToChar(oModelBx:GetErrorMessage()[6])
                            Help(,,"M060TRFS4",,cLog, 1, 0)
                        EndIf

                        oModelBx:DeActivate()
                        oModelBx:Destroy()
                        oModelBx:= Nil

                        nRegSEA := SEA->(RecNo())
                        nRegSE1 := SE1->(RecNo())
                        SEA->(DbGoto(0))
                        SE1->(DbGoto(0))
                        DbSelectArea("SE5")

                        VALOR  		:= nValCred
                        IOF	   		:= nVlrIOF
                        VALOR2 		:= nValSaldo
                        ABATIMENTO	:= nTotAbat

                        If !lCtbOfflin .And. lPadrao060
                            If lUsaFlag .And. nRecSe5Trf > 0   // Armazena em aFlagCTB para atualizar no modulo Contabil
                                AAdd(aFlagCTB, {"E5_LA", "S", "SE5", nRecSe5Trf, 0, 0, 0})
                            EndIf

                            nTotal += DetProva(nHdlPrv, cPadrao060, "FINA060" /*cPrograma*/, cLote, /*nLinha*/, /*lExecuta*/, /*cCriterio*/,;
                                                /*lRateio*/, /*cChaveBusca*/, /*aCT5*/, /*lPosiciona*/, @aFlagCTB, /*aTabRecOri*/, /*aDadosProva*/)
                        EndIf
                    EndIf

                    DbSelectArea("SA1")
                    DbSelectArea("SA6")
                    DbSelectArea("SE1")
                    SE1->(DbSetOrder(7))
                    SE1->(DbGoTo(nRegSE1))

                    If lFa060Se5
                        Execblock("FA060SE5",.F.,.F.)
                    EndIf

                    //Posiciona Registros para contabilizacao
                    SA1->(DbSeek(cFilial+SE1->E1_CLIENTE+SE1->E1_LOJA))
                    SA6->(DbSeek(cFilial+SE1->E1_PORTADO+SE1->E1_AGEDEP))
                    SEA->(DbGoTo(nRegSEA))

                    //Envia para Lancamento Contabil, se gerado arquivo
                    If !lCtbOfflin .And. lPadrao060 .And. nC > 0 .And. lLanc
                        aDiario := {}

                        If UsaSeqCor()
                            aDiario := {{"SE5", nRecSe5Trf, cCodDiario, "E5_NODIA", "E5_DIACTB"}}
                        EndIf

                        //Efetiva Lançamento Contabil
                        cA100Incl(cArquivo, nHdlPrv, 3 /*nOpcx*/, cLote, MV_PAR01 == 1, MV_PAR02 == 1, /*cOnLine*/, /*dData*/, /*dReproc*/, @aFlagCTB, /*aDadosProva*/, aDiario)
                        aFlagCTB := {}  // Limpa o coteudo apos a efetivacao do lancamento
                    EndIf

                    If lCobranDes
                        AtuSalBco(cPort060, cAgen060, cConta060, dDataMov, nValCred, "+")
                    EndIf

                    cProxNum := cNumBor

                    Do While !FA060Num(cProxNum, .F.)
                        cNumBor  := cProxNum
                        cProxNum := Soma1(cNumBor)
                    EndDo

                    //Grava o Número do bordero atualizado posicionar no sx6 sempre usando GetMV. Não utilize Seek !!!
                    DbSelectArea("SX6")
                    PutMv("MV_NUMBORR", cNumBor)
                EndIf
            End Transaction
        EndIf

        Exit
    EndDo

    DbSelectArea("SX6")
    GetMV("MV_NUMBORR")
    MsUnlock()

    If lSaida
        //Restaura os indices
        DbSelectArea("TRB")
        DbCloseArea()
        If _oFINA0601 <> Nil
            _oFINA0601:Delete()
            _oFINA0601 := Nil
        EndIf
        DbSelectArea("SE1")
        DbSetOrder(nIndice)
    EndIf

    If _lF060Exit			// Log para Saida
        Execblock("F060EXIT",.F.,.F.)
    EndIf

    //Ponto de entrada para tela de filtro de titulos abrir novamente ou nao
    //apos inclusao de bordero
    If ExistBlock("F060LOOP") .And. nOpcx = 3
        lF060LOOP := ExecBlock("F060LOOP",.F.,.F.)
    EndIf

    FreeUsedCode()  //libera codigos de correlativos reservados pela MayIUseCode()
    DbSelectArea("SE1")
    DbSetOrder(nIndice)
    DbGoTo(nSavRec)
    nTaxaDesc := nTxIof := 0

    If Len(aTmpFil) >= 1
        For nTmp := 1 to Len(aTmpFil)
            CtbTmpErase(aTmpFil[nTmp])
        Next
    EndIf

    If lBolApi .And. _lMetric
        // controle de acessos para o NGF - uso da borderô para API de boletos
        FWLsPutAsyncInfo("LS006", RetCodUsr(), '06', "NGF_API_BORDERO")
    Endif

    If _oSeqFK1 != Nil
        _oSeqFK1:Destroy()
        _oSeqFK1 := Nil
    EndIf

Return Nil

/*/{Protheus.doc} FA060Num
Verifica se o N£mero do bordero informado existe

@param ExpC1 = N£mero do bordero informado
@param ExpL1 = Define se apresenta Help ou não (.T. apresenta e .F. não apresenta)
@return lRetorna - retorna se o número de borderõ é válido para a operação
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function FA060Num(cNumBor, lHelp)

    Local lRetorna := .T.

    Default lHelp  := .T.

    DbSelectArea("SEA")
    DbSetOrder(1)
    If DbSeek(cFilial+cNumBor,.T.)
        Do While cFilial == EA_FILIAL .And. cNumBor == EA_NUMBOR .And. !eof()
            If EA_CART == "R"
                If lHelp
                    Help(" ",1,"F240BORDE")
                EndIf
                lRetorna := .F.
                Exit
            EndIf
            DbSkip(1)
        EndDO
    Else
        If	!MayIUseCode("SE1"+xFilial("SE1")+cNumBor)
            lRetorna:=.F.
        EndIf
    EndIf
    DbSelectArea("SE1")

Return lRetorna

/*/{Protheus.doc} Fa060Por2
Desativa a tecla F3 e verifica o Portador

@param cPort060		= Codigo do portador
@param cAgen060		= Agencia
@param cSituacao	= Situação
@param cContrato	= Contrato
@param cNumBco		= N£mero do documento no banco
@param cConta060	= Conta Corrente
@param cClearing	= Periodicidade do Clearing (localizado)
@param oCbxClear	= Objeto do combo de clearing
@param aTempos		= Combo de periodicidade do clearing
@return lRetorna - retorna se válidado ou nao
@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function Fa060Por2(cPort060,cAgen060,cSituacao,cContrato,cNumBco,cConta060,cClearing,oCbxClear,aTempos)
    Local lRetorna := .T.

    If Empty(cPort060)
        If ExistBlock("F060POR2")
            ExecBlock("F060POR2",.F.,.F.)
        Else
            If FwIsInCallStack("FA060Trans")
                cNumBco	 := Space(Len(cNumBco))  //Nosso Numero
            EndIf
        EndIf
        cAgen060  := Space(Len(cAgen060))
        cSituacao := Replicate("0",Len(cSituacao))
        cContrato := Space(Len(cContrato))
        cConta060 := Space(Len(cConta060))
    ElseIf Empty(SE1->E1_PORTADO)
        DbSelectArea("SA6")
        If !(DbSeek(cFilial+cPort060))
            Help(" ",1,"E1_PORTADO")
            lRetorna := .F.
        EndIf
    ElseIf cPort060 != SE1->E1_PORTADO .And. (GetNewPar("MV_TRFBCO","2") == "2" .Or. FN022SITCB(SE1->E1_SITUACA)[3]) 		// se Permite TRF entre bancos
        Help(" ",1,"FA060PORT")
        lRetorna := .F.
    EndIf
    If cPaisLoc <> "BRA"

        //Se o cheque nao tiver um clearing definido, pego o clearing
        //padrao do banco de depósito.

        If !Empty(cPort060) .And. FN022SITCB(cSituacao)[1]		//cSituacao $"0FG"
            DbSelectArea("SA6")
            DbSetOrder(1)
            DbSeek(xFilial()+cPort060+cAgen060+cConta060)
            If Found()
                If A6_DIASCOB > 5
                    cClearing   := aTempos[6+1]
                Else
                    cClearing   := aTempos[A6_DIASCOB+1]
                EndIf
                oCbxClear:Refresh()
            EndIf
        EndIf
    EndIf
    DbSelectArea("SE1")
Return lRetorna

/*/{Protheus.doc} FA060Age2
Ativa a tecla F3 para consultas padroes se seta para cima e verifica existencia da
agencia qdo banco foi informado

@param cPort060		= Codigo do portador
@param cAgen060		= Agencia
@param cConta060	= Conta Corrente
@return lRetorna - retorna se válidado ou nao
@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function FA060Age2(cPort060,cAgen060, cConta060)

    Local lRetorna := .T.

    _lF060ASit := ExistBlock("F060ASit")

    If _lF060ASit .AND. !Empty(SE1->E1_NUMBOR)
        _lF060ASit := ExecBlock("F060ASit")
    EndIf

    If !Empty(cPort060)
        DbSelectArea("SA6")
        If !(DbSeek(cFilial+cPort060+cAgen060))
            Help(" ",1,"E1_PORTADO")
            lRetorna := .F.
        Else
        EndIf
        DbSelectArea("SE1")
    EndIf

    If (!Empty(SE1->E1_NUMBOR) .And. ((cConta060 <> SE1->E1_CONTA .And. !Empty(cConta060)) .Or.;
        (cAgen060 != SE1->E1_AGEDEP .And. !Empty(cAgen060)))) .And. !_lF060ASit
        Help(,,"FA060PORT")
        lRetorna := .F.
    EndIf

Return lRetorna

/*/{Protheus.doc} FA060Cta2
Ativa a tecla F3 para consultas padroes se seta para cima e verifica existencia da
agencia qdo banco foi informado

@param cPort060		= Codigo do portador
@param cAgen060		= Agencia
@param cConta060	= Conta Corrente
@return lRetorna - retorna se válidado ou nao
@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function FA060Cta2(cPort060,cAgen060,cConta060)

    Local lRetorna := .T.

    _lF060ASit := ExistBlock("F060ASit")

    If !Empty(cConta060)
        DbSelectArea("SA6")
        If !(DbSeek(cFilial+cPort060+cAgen060+cConta060))
            Help(" ",1,"E1_CONTA")
            lRetorna := .F.
        ElseIf SA6->A6_BLOCKED == "1"
            Help(" ", 1, "CCBLOCKED")
            lRetorna := .F.
        EndIf

        // Para o Brasil, apresenta somente os titulos cuja moeda e' a mesma do banco
        // selecionado para baixa.
        // Caso a moeda do banco estiver vazia ou caso o motivo de baixa nao movimente banco, considero apenas a moeda forte
        If FXMultSld()
            If MoedaBco(cPort060,cAgen060,cConta060) > 1
                If cPaisLoc=="BRA" .And. !FXVldBxBco(cPort060,cAgen060,cConta060,SE1->E1_NATUREZ, SE1->E1_MOEDA)
                    lRetorna := .F.
                EndIf
            EndIf
        EndIf

        DbSelectArea("SE1")
    EndIf

    If !(FN022SITCB(cSituacao)[1]) //(cSituacao $ "0FG")
        If Empty(cPort060) .Or. Empty(cAgen060) .Or. Empty(cConta060)
            Help(" ",1,"BCOOBRIGAT")
            lRetorna := .F.
        End
    EndIf

    If (!Empty(SE1->E1_NUMBOR) .And. ((cConta060 != SE1->E1_CONTA .And. !Empty(cConta060)) .Or.;
            (cAgen060 != SE1->E1_AGEDEP .And. !Empty(cAgen060)))) .And. !_lF060ASit
        Help(,,"FA060PORT")
        lRetorna := .F.
    EndIf

Return lRetorna

/*/{Protheus.doc} FA060Sit
Verifica se a situação informada esta correta

@param cSituacao	= Situacao de cobranca a ser validada
@param cPort060		= Codigo do portador
@param oSituacao	= Objeto da situacao de cobranca
@param oDescricao	= Objeto da descrição da situacao de cobranca
@param cNatureza	= Natureza para IOF  (referencia)
@param oDescricao	= Descrição da situacao de cobranca (referencia)
@return lRetorna - retorna se válidado ou nao
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function FA060Sit(cSituacao As Character,cPort060 As Character,oSituacao As Object,oDescricao As Object,;
                  cNatureza As Character,cDescricao As Character) as Logical

    Local lRetorna	    As Logical
    Local lIsCarteira	As Logical

    //Valores default
    Default cSituacao  := ""
    Default cPort060   := ""
    Default oSituacao  := Nil
    Default oDescricao := Nil
    Default cNatureza  := ""
    Default cDescricao := ""

    //Inicializa variáveis
    lRetorna	:= .T.
    lIsCarteira	:= FN022SITCB(cSituacao)[1]

    //Verifico se a situacao de cobranca esta cadastrada
    If !(cSituacao $ FN022LSTCB(0))
        Help(" ",1,"SITCOB",,STR0106,1,0) //"Situação de cobrança não cadastrada. Verifique o cadastro de situações de cobrança."
        lRetorna := .F.
    EndIf

    //Verifica se cSituacao == MV_CARRTECF somente a rotina F136Transf pode transferir titulos para carteira TechFin
    If lRetorna .And. F60VldTecf(cSituacao)
        Help("", 1, "CARTTECFIN", , STR0145 /*"Somente o TOTVS Antecipa pode transferir titulos para carteira Techfin"*/, 1,,,,,,, {})
        lRetorna := .F.
    EndIf

    //Verifico se a situação de cobrança é descontada
    If lRetorna .And. FN022SITCB(cSituacao)[2] .And. SE1->E1_TIPO $ MVABATIM
        Help(" ",1,"FA060ABAT")
        lRetorna := .F.
    EndIf


    If lRetorna
        //Verifico se o codigo da situacao de cobranca está cadastrado
        If ((FN022SITCB(SE1->E1_SITUACA)[1] .Or. lIsCarteira .Or. SE1->E1_SITUACA == cSituacao) .And.;
            ((lIsCarteira .And. Empty(cPort060)) .Or. (!lIsCarteira .And. !Empty(cPort060))) .Or. ;
            (FN022SITCB(SE1->E1_SITUACA)[3] .And. FN022SITCB(cSituacao)[3]))
            lRetorna := .T.

        ElseIf (GetNewPar("MV_TRFBCO","2") == "2")
            Help(" ",1,"E1_SITUACA")
            lRetorna := .F.
        ElseIf !Empty(cPort060) .And. cPort060 != SE1->E1_PORTADO .And. (GetNewPar("MV_TRFBCO","2") == "2" .Or. FN022SITCB(SE1->E1_SITUACA)[3]) 	// se Permite TRF entre bancos
            Help(" ",1,"FA060PORT")
            lRetorna := .F.
        EndIf

        If lRetorna .And. cPaisLoc <> "BRA" .And. ;
            (	(!lIsCarteira .And.  Fin060IsCx(cPort060)) .Or.;
                (lIsCarteira .And. !Fin060IsCx(cPort060)))
            Help(" ",1,"FA060PORT")
            lRetorna := .F.
        EndIf
    EndIf

    //Verifico se o Título está em Serasa e se a Situação de Cobrança permite Movimentação no Serasa
    If lRetorna	.And. cPaisLoc == "BRA"
        FWA->(DbSetOrder(2))
        If FWA->(DbSeek(xFilial("SE1") + SE1->E1_PREFIXO + SE1->E1_NUM + SE1->E1_PARCELA + SE1->E1_TIPO + SE1->E1_CLIENTE + SE1->E1_LOJA))
            If FWA->FWA_STATUS != "0"
                FW2->(DbSetOrder(1))
                If FW2->(DbSeek(xFilial("FW2")+ cSituacao +"0012"))
                    Help(" ",1,"SITUACABLQ",,STR0122,1,0)//O título está em Serasa e essa situação de cobraça não permite movimentação no Serasa.
                    lRetorna := .F.
                EndIf
            EndIf
        EndIf
    EndIf

    If lRetorna
        DbSelectArea("FRV")
        If MsSeek(xFilial("FRV")+cSituacao)
            cDescricao 		:= FRV->FRV_DESCRI
            cNatureza		:= FRV->FRV_NATIOF
        EndIf
    EndIf

    If !_lF060Auto
        If oDescricao != Nil
            oDescricao:Refresh()
        EndIf

        If oSituacao != Nil
            oSituacao:Refresh()
        EndIf
    EndIf

Return lRetorna

/*/{Protheus.doc} FA060TxDes
Verifica a taxa de desconto cobrada pelo banco e calcula o valor a ser creditado.

@param nValCred		= Valor a ser creditado (referencia)
@param nTaxaDesc	= Taxa de desconto
@param nVlrIOF		= IOF (referencia)
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function FA060TxDes(nValCred,nTaxaDesc,nTxIOF,nVlrIOF,lEstorno)

    Local cFieldAlt   := AllTrim(ReadVar())
    Local nVlrTxDes   := 0
    Local nVlrTxIOF   := 0

    Default lEstorno  := (nValor == 0 .And. nValCred != SE5->E5_VALOR)
    Default nValCred  := 0
    Default nTaxaDesc := 0
    Default nTxIOF    := 0
    Default nVlrIOF   := 0

    If nValCred == 0 .And. nTxIOF == 0 .And. cPaisloc="BRA" .And. SE1->E1_MOEDA==1 .And. cFieldAlt != "NVALCRED" .And. !_lF060Auto
        DbSelectArea("SED")
        DbSetOrder(1)	//"ED_FILIAL+ED_CODIGO"
        SED->(DbSeek(xFilial("SED")+cNatureza))
        If SED->(FieldPos("ED_PERCIOF"))>0 .And. !Empty(SED->ED_PERCIOF)
            nTxIOF	:= SED->ED_PERCIOF
        EndIf
        nVlrIOF   := If(nTxIOF > 0, nValor*(nTxIOF/100), 0)
        nValCred  := nValor - nVlrIOF
        nTaxaDesc := 0
        nVlrDesc  := 0
    ElseIf nValCred == 0
        nValCred := nValor
    EndIf

    If nValCred == nValor .And. cFieldAlt == "NVALCRED" .Or. nValCred > nValor
        nValCred := nValor
        nTxIOF    := 0
        nVlrIOF   := 0
        nTaxaDesc := 0
        nVlrDesc  := 0
    Else
        If !lEstorno
            If cFieldAlt == "NTXIOF" .And. nTxIOF <= 0
                nValCred += nVlrIOF
                nVlrIOF := 0
                nTxIOF := 0
            EndIf

            If cFieldAlt == "NTAXADESC" .And. nTaxaDesc <= 0
                nValCred += nVlrDesc
                nVlrDesc := 0
            EndIf

            nVlrTxDes := (nValor * nTaxaDesc / 100)
            nVlrTxIOF := (nTxIof / 100)

            If nValCred != (nValor - nVlrTxDes) - ((nValor - nVlrTxDes) * nVlrTxIOF) .And. cFieldAlt == "NVALCRED"
                nTaxaDesc := 100 - (nValCred * 100 / (nValor - (nValor * nVlrTxIOF))) // Recupera a taxa do credito
                nVlrDesC  := nVlrTxDes
                nVlrIOF   := If(nTxIOF > 0, ((nValor - nVlrDesC) * nVlrTxIOF), 0)
            Else
                If nTxIOF > 0 .And. nTaxaDesc > 0
                    nVlrDesc := (nValor * (nTaxaDesc/100))
                    nValCred := (nValor - nVlrDesc)
                    nVlrIOF	 := (nValCred * (nTxIOF/100))
                    nValCred -= nVlrIOF
                ElseIf nTxIOF > 0
                    nVlrIOF := (nValor * (nTxIOF/100))
                    nValCred := (nValor - nVlrIOF)
                ElseIf nTaxaDesc > 0
                    nVlrDesc := ((If(nVlrIOF > 0, (nValor-nVlrIOF), nValor) * nTaxaDesc)/100)       
                    nValCred := (If(nVlrIOF > 0, (nValor-nVlrIOF), nValor) - nVlrDesc)
                ElseIf nVlrForm <= 0
                    nValCred := If((SE5->E5_VLDESCO+nVlrIOF) > 0, nValCred, nValor)
                EndIf
            EndIf
        EndIf
    EndIf

Return .T.

/*/{Protheus.doc} Fa060DbEva
para marcar e desmarcar item

@param nLimite   = Limite de valor para marcar Títulos
@param dVencIni  = Data de vencimento inicial a considerar
@param dVencFim  = Data de vencimento final a considerar
@param cAlias    = Alias para marcacao
@param aChaveLbn = Chave para liberacao do registro
@param lMarkAbt  = Marca abatimentos ou nao
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function Fa060DbEva(nLimite,dVencIni,dVencFim,cAlias,aChaveLbn,lMarkAbt)

    Local nData 	 := 0
    Local nAbat 	 := 0
    Local cChaveLbn := ""
    Local bCond
    Local lACAtivo  := GetNewPar("MV_ACATIVO",.F.)
    Local lF060DPM  := ExistBlock("F060DPM")
    Local lFa060Vld	:= ExistBlock("FA060VLD")
    Local lRet	    := .T.

    If !lACAtivo
        bCond	:=	{|| (((nValor + E1_SALDO) <= (nLimite) .Or. Empty(nLimite)) .And.;
                    E1_VENCREA >= dVencIni .And. E1_VENCREA <= dVencFim	  		 .And.;
                    E1_EMISSAO >= dEmisDe .And. E1_EMISSAO <= dEmisAte) .OR. _lF060Auto }
    Else
        bCond	:=	{|| ((nValor + E1_SALDO) <= (nLimite) .Or. Empty(nLimite)) .Or. _lF060Auto }
    EndIf

    If Eval(bCond) .And. (MV_PAR11 == 1 .Or. _lF060Auto)
        DbSelectArea("SA1")
        DbSeek(xFilial("SA1")+(cAlias)->E1_CLIENTE+(cAlias)->E1_LOJA)
        DbSelectArea(cAlias)
        If !(FINTP01(.F., cAlias)) // Restringe o uso do programa Financeiro quando a origem do titulo for de origem Totvs Incorporação = FINTP01(.F.) == .T.
            If (lConsBco .And. cPort060 $ (SA1->A1_BCO1+"/"+SA1->A1_BCO2+"/"+SA1->A1_BCO3+"/"+SA1->A1_BCO4+"/"+SA1->A1_BCO5)) .Or. (!lConsBco)
                cChaveLbn := "BOR" + (cAlias)->(E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)
                SE1->(DbGoTo((cAlias)->RECSE1))

                If lFa060Vld
                    lRet := ExecBlock("FA060VLD", .F., .F.,{ cMarca, cAlias })
                EndIf

                If SE1->(SimpleLock()) .And. lRet
                    Reclock(cAlias,.F.)
                        If Empty(SA1->A1_CGC) .And. _lVlBcoApi
                            Replace (cAlias)->E1_OK With Space(2)
                            _lVlCGCEmp := .T.
                        Else
                            Replace (cAlias)->E1_OK With cMarca
                        Endif
                    MsUnlock()
                    If !lMarkAbt .And. !lACAtivo
                        nAbat := SomaAbat(E1_PREFIXO,E1_NUM,E1_PARCELA,"R",E1_MOEDA,dDataBase,E1_CLIENTE,E1_LOJA,E1_FILIAL,,E1_TIPO)
                    EndIf
                    If (cAlias)->E1_TIPO $ MVABATIM
                        nValor  -= E1_SALDO
                    Else
                        nValor  += (E1_SALDO - nAbat)
                        //Se considerar Acrescimos e Decrescimos
                        If MV_PAR09 == 1
                            nValor += E1_SDACRES - E1_SDDECRE
                        EndIf
                        //Calculo de Valor Acessorio
                        If _lExistVA
                            nValor += FValAcess(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA,SE1->E1_NATUREZ, IIf(Empty(SE1->E1_BAIXA),.F.,.T.),"","R",SE1->E1_BAIXA)
                        EndIf
                    EndIf
                    If lF060DPM
                        nData := ExecBlock("F060DPM",.F.,.F.)
                    Else
                        nData := E1_VENCREA - E1_EMISSAO
                    EndIf
                    nPrazo	  += (nData * E1_SALDO)
                    nQtdTit++
                    nSomaData  += nData
                    If AScan(aChaveLbn, (cAlias)->RECSE1) == 0
                        AAdd(aChaveLbn,(cAlias)->RECSE1)
                    EndIf
                EndIf
            EndIf
        EndIf
    EndIf

Return

/*/{Protheus.doc} fA060Pad
Verifica qual Lancamento Padrao sera sugerido para o usuario, de acordo com a
situação do Título.

@param cSituacao = Situacao de cobranca
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function fA060Pad(cSituacao,lBordero)

    Local cPadrao := Space(3)

    Default lBordero := .T.

    If !lBordero 	//Transferencia
        If cSituacao $ "0FG" 		//Carteira, Carteira Protesto e Carteira Acordo
            cPadrao:="540"
        ElseIf cSituacao $ "1H"		//Simples e Cartorio
            cPadrao:="541"
        ElseIf cSituacao == "2"		//Descontada
            cPadrao:="542"
        ElseIf cSituacao == "3"		//Caucionada
            cPadrao:="543"
        ElseIf cSituacao == "4"		//Vinculada
            cPadrao:="544"
        ElseIf cSituacao == "5"		//Advogado
            cPadrao:="545"
        ElseIf cSituacao == "6"		//Judicial
            cPadrao:="546"
        ElseIf cSituacao == "7"		//Caucionada Descontada
            cPadrao:="555"

        //Novas situacoes de cobranca do usuario
        ElseIF FN022SITCB(cSituacao)[1]	//Carteira cSituacao $ "0|F|G"
            cPadrao:="540"
        ElseIf FN022SITCB(cSituacao)[6]	//Simples e Cartorio   cSituacao $ "1|H"
            cPadrao:="541"
        ElseIf FN022SITCB(cSituacao)[3]	//Descontada 	cSituacao $ "2|7"
            cPadrao:="542"
        ElseIf FN022SITCB(cSituacao)[4]	//Cobranca em banco com protesto
            cPadrao:="546"
        ElseIf FN022SITCB(cSituacao)[2]	//Cobranca em banco sem protesto exceto Simples e Cartorio
            cPadrao:="544"
        EndIf
    Else
        If cSituacao $ "0FG"         //Carteira, Carteira Protesto e Carteira Acordo
            cPadrao := "547"
        ElseIf cSituacao $ "1H"     //Simples, Cartorio
            cPadrao := "548"
        ElseIf cSituacao = "2"     //Descontada
            cPadrao := "549"
        ElseIf cSituacao = "3"     //Caucionada
            cPadrao := "550"
        ElseIf cSituacao = "4"     //Vinculada
            cPadrao := "551"
        ElseIf cSituacao = "5"     //Advogado
            cPadrao := "552"
        ElseIf cSituacao = "6"     //Judicial
            cPadrao := "553"
        ElseIf cSituacao = "7"     //Caucionada Descontada
            cPadrao := "556"

        //Novas situacoes de cobranca do usuario
        ElseIF FN022SITCB(cSituacao)[1]		//Carteira cSituacao $ "0|F|G"
            cPadrao:="547"
        ElseIf FN022SITCB(cSituacao)[6]	//Simples e Cartorio   cSituacao $ "1|H"
            cPadrao:="548"
        ElseIf FN022SITCB(cSituacao)[3]	//Descontada 	cSituacao $ "2|7"
            cPadrao:="549"
        ElseIf FN022SITCB(cSituacao)[4]	//Cobranca em banco com protesto
            cPadrao:="553"
        ElseIf FN022SITCB(cSituacao)[2]	//Cobranca em banco sem protesto exceto Simples e Cartorio
            cPadrao:="551"
        EndIf
    EndIf

Return cPadrao

/*/{Protheus.doc} FA060Data
Verifica se data final  maior que data inicial

@param dVencIni  = Data de vencimento inicial a considerar
@param dVencFim  = Data de vencimento final a considerar

@return lRet = Validado ou nao

@author pequim

@since 02/12/2013
@version 1.0
/*/
Function FA060Data(dVencIni,dVencFim)

    Local lRet:=.T.

    If dVencFim < dVencIni
        Help(" ",1,"DATAMENOR")
        lRet:=.F.
    EndIf

Return lRet

/*/{Protheus.doc} Fa060Canc
Cancela Borderos

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function Fa060Canc(cAlias,nReg,nOpcx,aRotAuto)

    Local cSituaca	:= Space(1)
    Local lFirst	:= .T.
    Local lFirstL	:= .T.
    Local cPortador	:= ""
    Local cAgeDep	:= ""
    Local cConta	:= ""
    Local cPadrao	:= "554"
    Local lPadrao	:= VerPadrao("554")
    Local nTotal	:= 0
    Local cArquivo	:= ""
    Local lDigita	:= .F.
    Local lAglut	:= .F.
    Local nCount	:= 0
    Local cHistorico := ""
    Local nTaxaDesc	:= 0
    Local cFormula	:= ""
    Local lContinua	:=.T.
    Local cTamDoc	:= CriaVar("E5_DOCUMEN")
    Local nTamBor	:= CriaVar("EA_NUMBOR")
    Local cBorder	:= ""
    Local cIndexSE5 := ""
    Local nRegSE1	:= 0
    Local nValSaldo := 0
    Local lSpbInUse := SpbInuse()
    Local lCancela  := .T.
    Local cPortAnt	:= ""
    Local cAgeAnt	:= ""
    Local cContAnt	:= ""
    Local aBaixa	:= {}
    Local cFilter	:= ""
    Local lPanelFin := IsPanelFin()
    Local nPos		:= 0
    Local aFlagCTB	:= {}
    Local lUsaFlag	:= SuperGetMV("MV_CTBFLAG" , .T. /*lHelp*/, .F. /*cPadrao*/)
    Local lCont		:=  MV_PAR03==1
    Local nIndex	:= 0
    Local dDtGerBor	:= CTOD("  /  /  ")	

    //Reestruturacao SE5
    Local nRegSE5Bor := 0
    Local aAreaAnt 	 := {}
    Local oModelBx 	 := Nil
    Local oSubFKA    := Nil
    Local lCtbBx     := .F.
    Local nHdlPrv    := 0

    //Contabilização Offline
    Local cAgenciSE1	:= ""
    Local cContaSE1		:= ""
    Local lCtbOfflin	:= .F.
    Local lVldCtbOff	:= .F.
    Local cIdFK5Desc	:= ""
    Local cSitPIX       := F022SITPIX()
    Local nSeqbx        := 0
    Local aBxSE5        := {}
    Local nI            := 0
    Local cSeqBx        := ""
    Local cSeqBxa       := ""
    Local nBaixas       := 0
    Local nTamSeqSE5    := TamSx3("E5_SEQ")[1]
    Local cFunName      := AllTrim(FunName())    

    Private cNatureza := Space(10)
    Private lMsErroAuto := .F.
    Private nTxIOF	:= 0
    Private nVlrIOF	:= 0
    Private lValorBruto := .F.

    _lFA60Can1	:= ExistBlock("FA60CAN1")
    _lTFA60Can2	:= ExistTemplate("FA60CAN2")
    _lFA60Can2	:= ExistBlock("FA60CAN2")
    __l241Canc  := Iif(__l241Canc == Nil, FindFunction("F241DtCanc"), __l241Canc)    

    nIndice := SE1->(Indexord())

    //Verifica se data do movimento não  menor que data limite de
    //movimentacao no financeiro
    If !DtMovFin(,, "2")
        Return
    EndIf

    //Verifica as perguntas selecionadas
    If lPanelFin
        If !PergInPanel("AFIC60", .T.)
            Return .T.
        EndIf
    ElseIf !Pergunte("AFIC60", .T.)
        Return .T.
    EndIf

    If _lF060Auto
        If (nPos := aScan(aRotAuto,{|x| x[1]='AUTNUMBOR'})) > 0
            SetMvValue("AFIC60", "MV_PAR01", aRotAuto[nPos][2])
            Pergunte("AFIC60", .F.)
        Else
            Help(,,, "F060AUTCAN1", STR0134, 1, 0) //Problema com o número do borderô AUTNUMBOR!
            Return .F.
        EndIf
    Else
        MV_PAR01 := IIf(Valtype(MV_PAR01) == Nil, Space(6), MV_PAR01)
    EndIf

    cBorder	:= MV_PAR01 + Space(Len(cTamDoc) - (Len(nTamBor)))

    If Empty(cBorder)
        Help(" ", 1, ".AFIC6001.")
        Return .T.
    EndIf

    //Gravação da metrica de acesso
    If _lMetric
        SetFunName(Iif(cFunName == "RPC", (cFunName + "FINA060"), cFunName))
        FwCustomMetrics():setSumMetric(Alltrim(ProcName()), "financeiro-protheus_qtd-por-acesso_total", 1)
        SetFunName(cFunName)
    EndIf

    //Não permite excluir o bordero se um dos titulos pertencente ao bordero estiver baixado
    DbSelectArea("SEA")
    If DbSeek(cFilial + MV_PAR01)
        //Não permite excluir o bordero se um dos titulos pertencente ao bordero estiver baixado
        If cPaisLoc <> "BRA" .And. !(FN022SITCB(SEA->EA_SITUACA)[3])		//SEA->EA_SITUACA $ "27"
            SE1->(DbSetOrder(5))
            SE1->(DbSeek(xFilial("SE1")+MV_PAR01))
            While SE1->(!EOF()) .And. SE1->E1_NUMBOR == MV_PAR01 .And. SE1->E1_FILIAL == xFilial("SE1")
                If SE1->E1_SALDO <> SE1->E1_VALOR
                    MsgAlert(STR0075 + " " + MV_PAR01 + " " + STR0076 + Chr(13)+;//"Para el Bordero num. " - "Ya existe titulo dado de baja"
                    STR0068 + " " + AllTrim(SE1->E1_NUM) + " " + STR0077)   //"Titulo"  // ", anule primero la baja del titulo y despues borre el Bordero."
                    Return .T.
                EndIf
                SE1->(DbSkip())
            EndDo
        EndIf

        //Garanto o Posicionamento no bordero de EA_CART = R
        While SEA->(!EOF()) .And. EA_NUMBOR == MV_PAR01 .And. EA_FILIAL == xFilial()
            If SEA->EA_CART != "R"
                DbSkip()
            Else
                Exit
            EndIf
        EndDo

        If __l241Canc .And. !F241DtCanc(dDataBase, SEA->EA_NUMBOR, SEA->EA_CART, SEA->EA_FILIAL, @dDtGerBor, @_oBorDtCan, .F.)
	        Help(" ",1,"FA060DTCAN",,STR0172 + SEA->EA_NUMBOR + STR0173 + DTOC(dDtGerBor) + STR0174,1,1) //"Não é permitido cancelar o borderô "### " com data anterior à sua geração (" ### ")."
	        lContinua := .F.
        EndIf

        If lContinua .And. FN022SITCB(SEA->EA_SITUACA)[3] //SEA->EA_SITUACA $ "27"

            DbSelectArea("SE5")

            //Monta expressao do Filtro para selecao
            cIndexSE5	:= CriaTrab(Nil, .F.)
            cChaveSE5	:= "E5_FILIAL+E5_TIPODOC+E5_DOCUMEN"
            IndRegua("SE5", cIndexSE5, cChaveSE5,, FA060Checa("BD|I2|E2|EI"), OemToAnsi(STR0029)) //"Selecionando Registros..."
            nIndex := RetIndex("SE5")
            DbSetOrder(nIndex + 1)

            DbGoTop()
            If DbSeek(xFilial("SE5") + "I2" + cBorder) //armazena valor do IOF
                nVlrIOF := SE5->E5_VALOR
            Else
                nVlrIOF := 0
            EndIf

            DbGoTop()
            If DbSeek(cFilial + "BD" + cBorder)
                cNatureza 	:= SE5->E5_NATUREZ
                nValDesc 	:= SE5->E5_VALOR
                cIdFK5Desc	:= SE5->E5_IDORIG
                If cPaisLoc <> "BRA"
                    nMoedaBor:= Val(SE5->E5_MOEDA)
                EndIf
                nRegSE5Bor := Recno()
            Else
                nValDesc := 0
            EndIf

            DbSelectArea("SE1")

            If !_lF060Auto
                lValorBruto := !MsgYesNo(OemToAnsi(STR0131), OemToAnsi(STR0052))	// "O estorno do Borderô será pelo valor Líquido?"###"Atenção"
            Else
                If (nPos := AScan(aRotAuto, {|x| x[1] = 'AUTCANLIQ'})) > 0
                    lValorBruto := !aRotAuto[nPos][2]
                EndIf
            EndIf

            If Fa060CanDe(@cHistorico, @dDataMov, @nTaxaDesc, @nValDesc, @cFormula, @cNatureza, .T., @nVlrIOF, @nTxIOF)
                lContinua := .T.
            Else
                lContinua := .F.
            EndIf

        ElseIf lContinua
            // Verifica se existem títulos transferidos por API e se continua o processo
            If _lBCOApi .And. FindFunction('F713VldBol') 
                lContinua := !F713VldBol(.T., xFilial('SEA'), MV_PAR01)
            EndIf
        EndIf

        If lContinua
            nValSaldo := 0
            DbSelectArea("SEA")

            lVldCtbOff := F060VldCtb()

            //Se existe contabilização offline e o parâmetro for igual a não OU não encontre o LP
            If lVldCtbOff
                If MV_PAR05 == 2
                    lCtbOfflin := .T.
                EndIf
            ElseIf !lCont
                lCtbOfflin := .T.
            EndIf

            lPadrao		:= VerPadrao(cPadrao)

            While !EOF() .And. EA_NUMBOR == MV_PAR01 .And. EA_FILIAL == xFilial()

                If SEA->EA_CART == "P"
                    SEA->(DbSkip())
                    Loop
                EndIf

                cSitAnt 	:= EA_SITUANT
                cPortAnt	:= EA_PORTANT
                cAgeAnt 	:= EA_AGEANT
                cContAnt	:= EA_CONTANT

                DbSelectArea("SE1")
                DbSetOrder(1)
                If SE1->(MsSeek(xFilial("SE1", SEA->EA_FILORIG) + SEA->(EA_PREFIXO + EA_NUM + EA_PARCELA + EA_TIPO)))
                    nCount++
                    cSituaca	:= SE1->E1_SITUACA
                    VALOR 		:= 0
                    IOF	  		:= 0
                    VALOR2 		:= 0
                    // Posiciona SA6
                    DbSelectArea("SA6")
                    SA6->(DbSetOrder(1))
                    SA6->(DbSeek(xFilial("SA6") + SEA->(EA_PORTADO + EA_AGEDEP + EA_NUMCON)))
                    DbSelectArea("SE1")

                    VAR_IXB   := SE1->E1_PORTADO  // Guardo portador anterior, para possivel utilizacao no LP
                    STRLCTPAD := SE1->E1_SITUACA  // Guardo situacao anterior, para possivel utilizacao no LP

                    cAgenciSE1	:= SE1->E1_AGEDEP
                    cContaSE1	:= SE1->E1_CONTA

                    If !lCtbOfflin .And. lPadrao .And. lFirstL .And. nCount >= 1
                        //Inicializa Lancamento Contabil
                        nHdlPrv := HeadProva(cLote, "FINA060" /*cPrograma*/, SubStr(cUsuario, 7, 6), @cArquivo)
                        lFirstL:=.F.
                    EndIf

                    If _lFA60Can1
                        lCancela := ExecBlock("FA60CAN1",.F.,.F.)
                    EndIf

                    // Se o titulo for PIX(FKF_RECPIX=SIM) o titulo precisa ser colocado em carteira PIX
                    If lCancela .And. _lTitTemPIX .And. TitTemPIX()
                        cSitAnt := Iif(!Empty(cSitPIX ),cSitPIX,cSitAnt)
                    EndIf

                    // Trata o retorno do PE para permitir ou nao o cancelamento
                    If ValType(lCancela) != "L" .Or. lCancela

                        DbSelectArea("SE1")
                        Reclock("SE1")
                        SE1->E1_NUMBOR   := Space(6)
                        SE1->E1_PORTADO  := cPortAnt
                        SE1->E1_AGEDEP   := cAgeAnt
                        SE1->E1_CONTA	 := cContAnt
					    SE1->E1_SITUACA := cSitAnt
					    SE1->E1_CONTRAT  := Space(15)
                        SE1->E1_DATABOR  := CToD(Space(8))
                        SE1->E1_MOVIMEN  := dDatabase
                        SE1->E1_NUMBCO   := ""
                        If MV_PAR10 == 1
                            SE1->E1_VENCREA  := Datavalida(E1_VENCTO,.T.)
                        EndIf
                        If FwIsInCallStack("FA060Trans")
                            SE1->E1_NUMBCO  := ""
                        EndIf
                        SE1->(MsUnlock())
                        FKCOMMIT()

                        ///numbor
                        aAlt := {}
                        AAdd(aAlt,{ STR0114,STR0004 + " " + STR0047,'','',STR0023 +  AllTrim(cBorder) })
                        ///chamada da Função que cria o Histórico de Cobrança
                        FinaCONC(aAlt,"SE1")

                        // Atualiza tambem os registros agregados
                        F060AtuAgre()
                        DbSelectArea("SA1")
                        If SA1->(DbSeek(cFilial + SE1->E1_CLIENTE + SE1->E1_LOJA))
                            If FN022SITCB(cSituaca)[4] .And. (SA1->A1_TITPROT >= 0)		//(cSituaca  $ "6F")
                                Reclock("SA1")
                                SA1->A1_TITPROT := A1_TITPROT-1
                                If SA1->A1_TITPROT == 0
                                    SA1->A1_DTULTIT := cToD("")
                                EndIf
                                MsUnlock()
                            EndIf
                        EndIf
                    EndIf

                    //Pontos de Entrada
                    If _lTFA60Can2
                        ExecTemplate("FA60CAN2",.F.,.F.)
                    EndIf
                    If _lFA60Can2
                        ExecBlock("FA60CAN2",.F.,.F.)
                    EndIf

                    //Integracao TIN x PROTHEUS
                    If FwHasEAI("FINA055",.F.,,.T.) .And. AllTrim(SE1->E1_ORIGEM) == "FINI055"
                        If SEA->EA_SITUACA <> SE1->E1_SITUACA .And. SE1->E1_NUM == SEA->EA_NUM
                            FwIntegDef("FINA040B")
                        EndIf
                    EndIf

                    DbSelectArea("SEA")

                    If lFirst
                        cPortador	:= EA_PORTADO
                        cAgeDep		:= EA_AGEDEP
                        cConta		:= EA_NUMCON
                        dData 		:= EA_DATABOR
                        lFirst		:=.F.
                    EndIf
                    // Trata o retorno do PE FA60CAN1 para permitir ou nao o cancelamento
                    If ValType(lCancela) != "L" .Or. lCancela
                        // Cancela baixa de titulos baixados na geracao do bordero.
                        If FN022SITCB(cSituaca)[3] .And. MV_PAR04 == 1 .And. ;
                            Empty(SE1->E1_SALDO) .And.;
                            !(SE1->E1_TIPO $ MVIRABT + "/" + MVCSABT + "/" + MVCFABT + "/" + MVPIABT + "/" + MVABATIM)
                            cFilter := SE5->(DbFilter())
                            DbSelectArea("SE5")
                            Set Filter To	// Desfaz o filtro do SE5, para conseguir fazer o cancelamento da baixa
                                                // em ambientes TOP, senao o registro da baixa nao sera encontrado.
                            // Cancela a baixa
                            aBaixa := {}
                            AAdd(aBaixa , {"E1_FILIAL"    , SE1->E1_FILIAL		, Nil})
                            AAdd(aBaixa , {"E1_PREFIXO"   , SE1->E1_PREFIXO		, Nil})
                            AAdd(aBaixa , {"E1_NUM"       , SE1->E1_NUM			, Nil})
                            AAdd(aBaixa , {"E1_PARCELA"   , SE1->E1_PARCELA		, Nil})
                            AAdd(aBaixa , {"E1_TIPO"      , SE1->E1_TIPO		, Nil})

                            If _oSeqbx == Nil
                                cQuery := "SELECT E5_SEQ "
                                cQuery += "FROM " + RetSqlName("SE5") + " "
                                cQuery += "WHERE E5_FILIAL = ? "
                                cQuery += "AND E5_PREFIXO = ? "
                                cQuery += "AND E5_NUMERO = ? "
                                cQuery += "AND E5_PARCELA = ? "
                                cQuery += "AND E5_TIPO = ? "
                                cQuery += "AND E5_CLIFOR = ? "
                                cQuery += "AND E5_LOJA = ? "
                                cQuery += "AND E5_FILORIG = ? "
                                cQuery += "AND D_E_L_E_T_ = ' ' "
                                cQuery += "AND E5_TIPODOC = 'V2' "
                                cQuery += "AND E5_SITUACA = ' ' "
                                cQuery := ChangeQuery(cQuery)
                                _oSeqbx := FWPreparedStatement():New(cQuery)
                            EndIf

                            _oSeqbx:SetString(1,  FwXFilial("SE5"))
                            _oSeqbx:SetString(2,  SE1->E1_PREFIXO)
                            _oSeqbx:SetString(3,  SE1->E1_NUM)
                            _oSeqbx:SetString(4,  SE1->E1_PARCELA)
                            _oSeqbx:SetString(5,  SE1->E1_TIPO)
                            _oSeqbx:SetString(6,  SE1->E1_CLIENTE)
                            _oSeqbx:SetString(7,  SE1->E1_LOJA)
                            _oSeqbx:SetString(8,  SE1->E1_FILORIG)

                            cQuery := _oSeqbx:GetFixQuery()

                            lCtbBx := nHdlPrv <= 0

                            If !Empty(cSeqBx := MpSysExecScalar(cQuery,"E5_SEQ"))
                                aBxSE5 := Sel070Baixa("VL /V2 /BA /RA /CP /LJ /" + MV_CRNEG,SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,Nil,Nil,SE1->E1_CLIENTE,SE1->E1_LOJA)

                                If (nBaixas := Len(aBxSE5)) > 0
                                    For nI := 1 to nBaixas
                                        cSeqBxa := SubStr(aBxSE5[nI], (1 + ((Len(aBxSE5[nI])) - nTamSeqSE5)), nTamSeqSE5)
                                        If cSeqBxa != cSeqBx
                                            Loop
                                        EndIf
                                        nSeqBx := nI
                                    Next nI
                                EndIf

                                //Executa o Cancelamento da Baixa do Titulo
                                MSExecAuto({|a,b,c,d,e,f,g,h,i,j| Fina070(a,b,c,d,e,f,g,h,i,j)}, aBaixa, 5, ,nSeqbx, , , , , , lCtbBx )
                                Pergunte("FIN060",.F.)
                                If lMsErroAuto
                                    MostraErro()
                                EndIf
                            EndIf

                            DbSelectArea("SE5")
                            If !Empty(cFilter)
                                Set Filter To &cFilter
                            EndIf
                            Pergunte("AFIC60", .F.)
                        EndIf

                        //[01] = FWI_LA ('S' ou 'N')
                        //[02] = FWI_LANPAD (Lançamento Padrão utilizado)
                        //[03] = FWI_VALOR (Valor da Movimentação)
                        //[04] = FWI_DESCON (Desconto da Movimentação)
                        //[05] = FWI_IOF (Valor do IOF)
                        //[06] = FWI_SITUAC (Carteira Atual)
                        //[07] = FWI_SITANT (Carteira Anterior)
                        //[08] = FWI_BCOANT (Portador Anterior)
                        //[09] = FWI_AGEANT (Agência Anterior)
                        //[10] = FWI_CONANT (Número da Conta Anterior)
                        //[11] = FWI_CONTRA (Contrato)
                        //[12] = FWI_IDMOV (Id da Movimentação na FK5)
                        //[13] = FWI_NUMBOR (Número do Borderô)
                        If lVldCtbOff
                            FinAGrvFWI({IIf(!lCtbOfflin .And. lPadrao, "S", "N"), cPadrao, SE1->E1_SALDO, 0, nVlrIOF, cSitAnt,;
                                STRLCTPAD, VAR_IXB, cAgenciSE1, cContaSE1, SE1->E1_CONTRAT, cIdFK5Desc, SEA->EA_NUMBOR})
                        EndIf

                        nValSaldo += SE1->E1_SALDO

                        If !lCtbOfflin .And. lPadrao .And. nCount >= 1
                            nTotal += DetProva(nHdlPrv, cPadrao, "FINA060", cLote)
                        EndIf

                        RecLock("SEA")
                        SEA->(DbDelete())
                        SEA->(MsUnlock())
                        FKCOMMIT()
                    EndIf
                EndIf
                SEA->(DbSkip())
            EndDo

            //MOVIMENTO DE ESTORNO DO BORDERO DESCONTADO
            If FN022SITCB(cSituaca)[3] .And. nRegSE5Bor > 0	//cSituaca $ "27"

                SE5->(DbGoTo(nRegSE5Bor))
                // Verifica se a natureza esta cadastrada. Se nao, cria.
                Fa060Nat(2, cNatureza)

                //Posiciona a FK5 para mandar a operação de alteração com base no registro posicionado da SE5
                aAreaAnt := GetArea()
                oModelBx := FwLoadModel("FINM030")
                oModelBx:SetOperation(MODEL_OPERATION_UPDATE) //Alteração
                oModelBx:Activate()
                oModelBx:SetValue("MASTER","E5_GRV", .T.) //Habilita gravação SE5
                oSubFKA := oModelBx:GetModel("FKADETAIL")
                If oSubFKA:SeekLine({{"FKA_IDORIG", SE5->E5_IDORIG}})

                    //E5_OPERACAO 1 = Altera E5_SITUACA da SE5 para 'C' e gera estorno na FK5
                    //E5_OPERACAO 2 = Altera E5_TIPODOC da SE5 para 'ES' e gera estorno na FK5
                    //E5_OPERACAO 3 = Deleta da SE5 e gera estorno na FK5
                    oModelBx:SetValue("MASTER", "E5_OPERACAO", 	2)
                    oModelBx:SetValue("MASTER", "HISTMOV",		cHistorico)
                    oModelBx:SetValue("MASTER", "E5_TIPODOC",	"CB")
                    oModelBx:SetValue("MASTER", "VALEST",		nValDesc)
                    oModelBx:SetValue("MASTER", "VALESTIOF",	nVlrIOF)

                    If oModelBx:VldData()
                        oModelBx:CommitData()
                        SE5->(DbGoTo(oModelBx:GetValue("MASTER", "E5_RECNO")))

                        //-- ATENCAO --------------------------------------------------------
                        // Gravacao do SE5 mantida de forma manual.
                        // Unico caso de estorno onde o valor acessorio tambem e estornado
                        // Sera retirado quando a SE5 deixar de existir
                        If nVlrIOF > 0 .And. cPaisLoc == "BRA"
                            cIdOrig 	:= SE5->E5_IDORIG
                            cPortAnt	:= SE5->E5_BANCO
                            cAgeAnt		:= SE5->E5_AGENCIA
                            cContAnt	:= SE5->E5_CONTA
                            nMoedaBco 	:= Max(MoedaBco(SE5->E5_BANCO, SE5->E5_AGENCIA, SE5->E5_CONTA), 1)
                            nTxMoeda	:= If(nMoedaBco > 1, RecMoeda(dDataMov, nMoedaBco), 1)

                            DbSelectArea("SE5")
                            RecLock("SE5", .T.)
                            SE5->E5_FILIAL	:= xFilial("SE5")
                            SE5->E5_BANCO	:= cPortAnt
                            SE5->E5_AGENCIA	:= cAgeAnt
                            SE5->E5_CONTA	:= cContAnt
                            SE5->E5_DATA	:= dDataMov
                            SE5->E5_TIPODOC	:= "EI"
                            SE5->E5_HISTOR	:= STR0109	//"Cancelamento de cob de IOF"
                            SE5->E5_MOEDA	:= StrZero(nMoedaBco,2)
                            SE5->E5_VALOR	:= nVlrIOF
                            SE5->E5_VLMOED2 := nVlrIOF
                            SE5->E5_RECPAG  := "R"
                            SE5->E5_LA		:= IIf(!lCtbOfflin .And. lPadrao, "S", "N")
                            SE5->E5_DTDIGIT := dDataBase
                            SE5->E5_DTDISPO := dDataMov
                            SE5->E5_NATUREZ := cNatureza
                            SE5->E5_MOTBX	:= "IOF"
                            SE5->E5_FILORIG	:= cFilAnt
                            SE5->E5_MOVFKS	:= 'S'
                            SE5->E5_IDORIG	:= cIdOrig
                            SE5->E5_TABORI	:= "FK5"
                            SE5->E5_ORIGEM	:= FunName()
                            SE5->E5_TXMOEDA	:= nTxMoeda
                            SE5->E5_DOCUMEN	:= cBorder
                            If lSpbInUse
                                SE5->E5_MODSPB := "1"
                            EndIf
                            MsUnlock()
                        EndIf
                    Else
                        lRet := .F.
                        cLog := cValToChar(oModelBx:GetErrorMessage()[4]) + ' - '
                        cLog += cValToChar(oModelBx:GetErrorMessage()[5]) + ' - '
                        cLog += cValToChar(oModelBx:GetErrorMessage()[6])

                    Help(,,"M010VLDE2",,cLog, 1, 0)
                    EndIf
                EndIf
                oModelBx:DeActivate()
                oModelBx:Destroy()
                oModelBx:= Nil

                RestArea(aAreaAnt)

                //Este If impede que ao cancelar um bordero o saldo seja atualizado novamente no SE8.
                If ValType(lCancela) = "L" .Or. lCancela
                    AtuSalBco(cPortador, cAgeDep, cConta, dDataMov, nValDesc, "-")
                EndIf

                MsUnlock()
                If ExistBlock("F060EXCL")
                    ExecBlock("F060EXCL",.F.,.F.)
                EndIf
            EndIf

            nRegSE1 := SE1->(RecNo())
            DbSelectArea("SE1")
            DbGoBottom()
            DbSkip()
            DbSelectArea("SE5")
            VALOR 	:= IIf(FN022SITCB(cSituaca)[3], nValDesc, nValSaldo)		//cSituaca $ "27"
            IOF	   	:= nVlrIOF
            VALOR2	:= nValSaldo
            If !lCtbOfflin .And. lPadrao .And. nCount >= 1// .And. lCont

                //Prepara Lancamento Contabil
                If lUsaFlag  .And. FN022SITCB(cSituaca)[3]	// Armazena em aFlagCTB para atualizar no modulo Contabil para
                    AAdd(aFlagCTB, {"E5_LA", "S", "SE5", nRegSE5Bor, 0, 0, 0})
                EndIf
                nTotal += DetProva(nHdlPrv,;
                                    cPadrao,;
                                    "FINA060" /*cPrograma*/,;
                                    cLote,;
                                    /*nLinha*/,;
                                    /*lExecuta*/,;
                                    /*cCriterio*/,;
                                    /*lRateio*/,;
                                    /*cChaveBusca*/,;
                                    /*aCT5*/,;
                                    /*lPosiciona*/,;
                                    @aFlagCTB,;
                                    /*aTabRecOri*/,;
                                    /*aDadosProva*/)
            EndIf
            SE1->(DbGoTo(nRegSE1))

            If !lCtbOfflin .And. lPadrao .And. nCount >= 1
                lDigita:= IIf(MV_PAR02 == 1, .T., .F.)
                lAglut := IIf(MV_PAR03 == 1, .T., .F.)
                If (UsaSeqCor())
                    aDiario := {{"SE5", SE5->(Recno()), cCodDiario, "E5_NODIA", "E5_DIACTB"}}
                Else
                    aDiario := {}
                EndIf

                cA100Incl(cArquivo,;
                        nHdlPrv,;
                        3 /*nOpcx*/,;
                        cLote,;
                        lDigita,;
                        lAglut,;
                        /*cOnLine*/,;
                        /*dData*/,;
                        /*dReproc*/,;
                        @aFlagCTB,;
                        /*aDadosProva*/,;
                        aDiario)
                        aFlagCTB := {}  // Limpa o coteudo apos a efetivacao do lancamento
            EndIf
        EndIf
    EndIf

    //Restaura a integridade da janela
    DbSelectArea("SE5")
    Set Filter to
    RetIndex("SE5")

    nTaxaDesc := nTxIof := 0
    DbSetOrder(1)
    DbSelectArea("SE1")
    DbSetOrder(nIndice)
    DbSeek(xFilial("SE1"))

    If _oSeqbx != Nil
        _oSeqbx:Destroy()
        _oSeqbx := Nil
    EndIf

    If _oBorDtCan <> Nil
        _oBorDtCan:Destroy()
        _oBorDtCan:= Nil
    EndIf

Return .T.

/*/{Protheus.doc} FA060NumC
Verifica se o N£mero do bordero informado existe

@return lRetorna = Validado ou nao
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function FA060NumC()

    Local lRetorna	:= .T.
    Local nSavRec	:= 0
    Local aArea		:= GetArea()

    DbSelectArea("SEA")
    nSavRec := RecNo()
    DbSetOrder(2)		//EA_FILIAL+EA_NUMBOR+EA_CART+EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO+EA_FORNECE+EA_LOJA

    If !MsSeek(xFilial("SEA")+MV_PAR01+"R")
        Help(" ",1,"F060NOBORD")
        lRetorna := .F.
    EndIf

    RestArea(aArea)

Return lRetorna

/*/{Protheus.doc} Fa060VerSit
Verifica a Situacao do titulo

@param cSituacao	= Situação
@param cPort060		= Codigo do portador
@param cAgen060		= Agencia
@param cConta060	= Conta Corrente
@param nValCred 	= Valor do credito
@param cFormula		= Codigo da formula para desconto
@param nTaxaDesc	= Taxa de desconto
@param dDataMov		= Data de movimento
@param cHistorico	= Historico
@param nValDesc		= Valor de desconto
@param lDesc		= Sinaliza se houve desonto ou nao
@param nRetencao	= Dias de retencao
@param cClearing	= Periodicidade do Clearing (localizado)
@param oCbxClear	= Objeto do combo de clearing
@param aTempos		= Combo de periodicidade do clearing
@return lRet		= Validado ou nao
@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function Fa060VerSit(cSituacao,cPort060,cAgen060,cConta060,nValCred,;
    cFormula,nTaxaDesc,dDataMov,cHistorico,nValDesc,lDesc,nRetencao,cClearing,oCbxClear,aTempos)

    Local aAreaSE5		:= {}
    Local lIsCarteira	:= FN022SITCB(cSituacao)[1]
    Local lIsDescont	:= FN022SITCB(cSituacao)[3]
    Local lRet			:= .T.
    Local aRetPor		:= {}
    Local nDescAux      := 0
    Local nValTran      := 0
    Local cChaveTit     := ""
    Local cIdFK7        := ""
    Local nMoedaMov     := 0
    Local nCasDec       := TamSx3("E1_TXMOEDA")[2]

    If (ExistBlock("F060ALTPOR"))
        aRetPor   := ExecBlock("F060ALTPOR",.F.,.F.,{cPort060,cAgen060,cConta060, cSituacao})
        cPort060  := aRetPor[1]
        cAgen060  := aRetPor[2]
        cConta060 := aRetPor[3]
    EndIf

    //Acrescentado em 16/03/2020 - Projeto Upgrade v12.1.25 (TDI) - fim
    //Verifica se situação e banco/agencia/conta estão coerentes.
    If lIsCarteira  //Se situacao de cobranca for carteira
        If !Empty(cPort060) .Or. !Empty(cAgen060) .Or. !Empty(cConta060)
            If cPaisLoc == "BRA"
                Help(" ",1,"CARTEIRA")
                lRet := .F.
            Else
                If !(AllTrim(cPort060) $ GetMV("MV_CARTEIR"))
                    Help(" ",1,"CARTEIRA")
                    lRet := .F.
                EndIf
            EndIf
        EndIf
    EndIf

    //Se for transferência para Desconto ele devera pegar a conta corrente a ser creditada e a data do credito
    If lRet
        If lIsDescont .And. SE1->E1_SITUACA != cSituacao
            If ((FN022SITCB(SE1->E1_SITUACA)[1] .Or. GetNewPar("MV_TRFBCO","2") == "1"))
                Fa060Desc(@cHistorico,@dDataMov,@nTaxaDesc,@nValCred,@cFormula,cSituacao)
                lDesc := .T.
            EndIf
            nRetencao := If(MV_PAR10 == 1, SA6->A6_RETENCA, 0)
        Else
            nRetencao:=SA6->A6_RETENCA

            If FN022SITCB(cSituacao)[6]		//Simples e Cartorio
                nValCred := nValor - (nQtdTit * SA6->A6_TXCOBSI)
            Else
                nValCred := nValor
            EndIf
        EndIf

        //Estorno de cobrança descontada
        If FN022SITCB(SE1->E1_SITUACA)[3] .And. SE1->E1_SITUACA != cSituacao
            DbSelectArea("SE5")

            If Empty(SE1->E1_NUMBOR)
                cChaveTit := FwXFilial("SE1") + "|" + SE1->E1_PREFIXO + "|" + SE1->E1_NUM + "|" + SE1->E1_PARCELA + "|" + SE1->E1_TIPO + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA
                cIdFK7    := FinBuscaFK7(cChaveTit, "SE1")

                If !(Empty(cIdFK7))
                    cAliasTMP := Fa060TrDes(cIdFK7, SE1->E1_FILORIG)
                    SE5->(DbSetOrder(21)) //E5_FILIAL+E5_IDORIG+E5_TIPODOC

                    If (cAliasTMP)->(!EoF()) .And. SE5->(DbSeek(FwXFilial("SE5") + (cAliasTMP)->FK5_IDMOV + "TR"))
                        cNatureza := SE5->E5_NATUREZ
                        nVlrIOF   := Fa060IOF((cAliasTMP)->FK5_IDMOV)
                        nMoedaMov := Val(SE5->E5_MOEDA)

                        If SE1->E1_MOEDA == nMoedaMov
                            nValDesc    := SE5->E5_VALOR
                            nValCred    := SE5->E5_VALOR

                            If SE5->E5_VLDESCO < 0
                                nValDesc := SE1->E1_VALOR
                            EndIf

                            If lValorBruto .And. SE5->E5_VLDESCO <> 0	// se o valor a ser estornado é o valor bruto, calculo o valor bruto
                                nValDesc := SE5->E5_VALOR + SE5->E5_VLDESCO
                            EndIf

                            aAreaSE5	:= SE5->(GetArea())

                            If AllTrim(SE5->E5_TIPODOC) == "TR"
                                nValTran := SE5->E5_VALOR
                            EndIf

                            If SE5->E5_VLDESCO > 0
                                nDescAux := SE5->E5_VLDESCO
                            EndIf

                            nVlrIOF := Fa060IOF((cAliasTMP)->FK5_IDMOV)
                            RestArea(aAreaSE5)

                            nTaxaDesc := nDescAux / (nDescAux + nValTran + nVlrIOF) * 100
                        Else
                            nValDesc    := SE5->E5_VLMOED2
                            nValCred    := SE5->E5_VLMOED2

                            If SE5->E5_VLDESCO < 0
                                nValDesc := SE1->E1_VALOR
                            EndIf

                            If lValorBruto .And. SE5->E5_VLDESCO != 0
                                nValDesc := SE5->E5_VLMOED2

                                If nMoedaMov == 1
                                    nValDesc += xMoeda(SE5->E5_VLDESCO, nMoedaMov, SE1->E1_MOEDA, SE5->E5_DATA, nCasDec, 0, SE5->E5_TXMOEDA)
                                ElseIf SE1->E1_MOEDA == 1
                                    nValDesc += xMoeda(SE5->E5_VLDESCO, nMoedaMov, SE1->E1_MOEDA, SE5->E5_DATA, nCasDec, SE5->E5_TXMOEDA)
                                Else
                                    nValDesc += xMoeda(SE5->E5_VLDESCO, nMoedaMov, SE1->E1_MOEDA, SE5->E5_DATA, nCasDec, SE5->E5_TXMOEDA, SE1->E1_TXMOEDA)
                                EndIf
                            EndIf

                            If AllTrim(SE5->E5_TIPODOC) == "TR"
                                nValTran := SE5->E5_VALOR
                            EndIf

                            If SE5->E5_VLDESCO > 0
                                nDescAux := SE5->E5_VLDESCO
                            EndIf

                            nTaxaDesc := (nDescAux / (nDescAux + nValTran + nVlrIOF)) * 100
                        EndIf
                    Else
                        nValDesc := 0
                    EndIf

                    (cAliasTMP)->(DbCloseArea())
                EndIf
            Else
                If SE1->E1_VALOR > SE1->E1_SALDO
                    nValDesc:= SE1->E1_SALDO
                Else
                    nValDesc:= SE1->E1_VALOR
                EndIf

                aAreaSE5 := SE5->(GetArea())
                SE5->(Dbsetorder(10))

                If SE5->(Dbseek(FwXFilial("SE5") + SE1->E1_NUMBOR))
                    cChave := AllTrim(FwXFilial("SE5") + SE1->E1_NUMBOR)
                    While AllTrim(SE5->E5_FILIAL + SE5->E5_DOCUMEN) == cChave .And. !SE5->(EOF())
                        If SE5->E5_TIPODOC == "I2"
                            nVlrIOF := SE5->E5_VALOR
                            Exit
                        ElseIf SE5->E5_TIPODOC = "BD"
                            cNatureza	:= SE5->E5_NATUREZ
                        EndIf
                        SE5->(DBSKIP())
                    EndDo
                EndIf
                RestArea(aAreaSE5)
            EndIf

            DbSelectArea("SE1")
            lDesc := Fa060CanDe(@cHistorico,@dDataMov,@nTaxaDesc,@nValDesc,@cFormula,@cNatureza,.F.,@nVlrIOF,@nTxIOF)
        EndIf

        If cPaisLoc <> "BRA"
            If !(FN022SITCB(cSituacao)[5])    //Simples e Cartorio
                cClearing   := ""
            ElseIf !Empty(cPort060).And.Empty(cClearing)
                DbSelectArea("SA6")
                DbSetOrder(1)
                If MsSeek(xFilial()+cPort060+cAgen060+cConta060)
                    If A6_DIASCOB > 5
                        cClearing   := aTempos[6+1]
                    Else
                        cClearing   := aTempos[A6_DIASCOB+1]
                    EndIf
                EndIf
            EndIf
            oCbxClear:Refresh()
        EndIf
    EndIf

Return lRet

/*/{Protheus.doc} Fa060Desc
Transferencia para desconto

@param cHistorico	= Historico
@param dDataMov		= Data de movimento
@param nTaxaDesc	= Taxa de desconto
@param nValCred 	= Valor do credito
@param cFormula		= Codigo da formula para desconto
@param cSituacao	= Situação de cobranca
@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function Fa060Desc(cHistorico,dDataMov,nTaxaDesc,nValCred,cFormula,cSituacao)
    Local oDlgDesc
    Local cPictIOF
    Local cPictTd	:= PesqPict("SA6","A6_TAXADES",,nMoeda)
    Local nOpca 	:= 0
    Local lF060Hist := Existblock("F060HIST")
    Local dBaixa    := CriaVar("E1_BAIXA")

    nTxMoeda := Iif(Type("nTxMoeda") != "N", 0, nTxMoeda)

    If SE1->E1_MOEDA > 1 .And. nTxMoeda == 0
        nTxMoeda := SE1->E1_TXMOEDA

        If (nTxMoeda <= 0 .Or. !Empty(SE1->E1_DTVARIA))
            nTxMoeda := RecMoeda(Iif(Empty(SE1->E1_DTVARIA), dBaixa, SE1->E1_DTVARIA), SE1->E1_MOEDA)
        EndIf
    EndIf

    If cPaisLoc == "BRA"
        cPictIOF := PesqPict("SED","ED_PERCIOF")
    EndIf

    If lF060Hist
        cHistorico := ExecBlock("F060HIST",.F.,.F.,{cSituacao})
    ElseIf cSituacao == PadR("7", TamSX3("E1_SITUACA")[1]) //cSituacao == "7"
        cHistorico := OemToAnsi(STR0032)  //"Titulos Cob Caucao Descontada  "
    ElseIf FN022SITCB(cSituacao)[3] //cSituacao == "2"
        cHistorico	:= OemToAnsi(STR0031)  //"Titulos para desconto         "
    EndIf

    //Se no cadastro de situacao de cobranca (FRV) faltar informacao,
    //usa informacoes do cadastro de bancos SA6
    dDataMov  := dDataBase + SA6->A6_RETDESC
    If nTaxaDesc == 0
        nTaxaDesc := FN022SITCB(cSituacao)[7]
        If nTaxaDesc > 0
            cPictTd	  := PesqPict("FRV","FRV_PERCEN",,nMoeda)
        EndIf
    EndIf

    If Empty(cNatureza)
        cNatureza := FN022SITCB(cSituacao)[8]
        If Empty(cNatureza)
            cNatureza	:= SubStr(&(GetMV("MV_NATDESC")),1,10)
        EndIf
    EndIf

    If nTaxaDesc == 0
        nTaxaDesc	:= SA6->A6_TAXADES
    EndIf

    If Empty(cPictTd)
        cPictTd		:= PesqPict("SA6","A6_TAXADES",,nMoeda)
    EndIf

    cNatureza	:= PadR(cNatureza,10)

    If !_lF060Auto

        fa060TxDes(@nValCred,nTaxaDesc,@nTxIOF,@nVlrIOF)

        DEFINE MSDIALOG oDlgDesc TITLE OemToAnsi(STR0033) From 5,5 To 15,70 OF oMainWnd	// "Dados da Cobrança"

        oPanel := TPanel():New(0,0,'',oDlgDesc,, .T., .T.,, ,40,40,.T.,.T.)
        oPanel:Align := CONTROL_ALIGN_ALLCLIENT

        @ 003,003 Say OemToAnsi(STR0034) Size 40,8 of oPanel Pixel	// "Histórico"
        @ 003,040 MSGet cHistorico Picture "@S50" Size 215,8 of oPanel Pixel

        @ 018,003 Say OemToAnsi(STR0035)	Size 40,8 of oPanel Pixel// "Data Crédito"
        @ 018,040 MSGet dDataMov 			Size 45,8 of oPanel Pixel hasbutton
        @ 018,085 Say OemToAnsi(STR0043) 	Size 40,8 of oPanel Pixel	// "Tx Desc"
        @ 018,110 MSGet nTaxaDesc Picture cPictTd Valid fa060TxDes(@nValCred,@nTaxaDesc,@nTxIOF,@nVlrIOF) .And. F060VldF(nTxIOF, nTaxaDesc, @cFormula) Size 40,8 of oPanel Pixel hasbutton
        @ 018,170 Say OemToAnsi(STR0036)		Size 40,8 of oPanel Pixel	// "Natureza"
        @ 018,195 MSGet cNatureza Picture "@!"  F3 "SED" Valid F060VldNat(cNatureza, cSituacao) .And. IIf(_lF060NDes,ExecBlock("F060NDES",.F.,.F.,{cNatureza}),.T.) .And. fa060TxDes(@nValCred,nTaxaDesc,@nTxIOF,@nVlrIOF) Size 60,8 of oPanel Pixel hasbutton

        @ 033,003 Say OemToAnsi(STR0037)	Size 40,8 of oPanel Pixel  // "Fórmula"
        @ 033,040 MSGet cFormula  Picture "@!"  F3 "SM4" Valid FA060REFR1(cFormula,@nValCred) hasbutton Size 40,8 of oPanel Pixel
        @ 033,085 Say OemToAnsi(STR0038)	Size 40,8 of oPanel Pixel// "Crédito"
        @ 033,110 MSGet nValCred  Picture cPict06018 Valid fa060TxDes(@nValCred,@nTaxaDesc,@nTxIOF,@nVlrIOF) .And. nValCred <= nValor hasbutton Size 60,8 of oPanel Pixel

        If cPaisloc=="BRA"
            @ 033,170 Say OemToAnsi(STR0102)	Size 40,8 of oPanel Pixel// "TX IOF"
            @ 033,195 MSGet nTxIOF  Picture cPictIOF Valid fa060TxDes(@nValCred,@nTaxaDesc,@nTxIOF,@nVlrIOF) .And. F060VldF(nTxIOF, nTaxaDesc, @cFormula) Size 50,8 of oPanel Pixel hasbutton
        EndIf

        If cPaisLoc == "BRA" .And. SE1->E1_MOEDA > 1
            @ 048,003 Say OemToAnsi(STR0084) Size 40,8 of oPanel Pixel	// "Tx Contr."
            @ 048,040 MSGet nTxMoeda Picture PesqPict("SE1","E1_TXMOEDA") Size 60,8 of oPanel Pixel Valid nTxMoeda > 0
        EndIf

        DEFINE SBUTTON FROM 063	,230 TYPE 1 ACTION IIf(!F060VldNat(cNatureza, cSituacao), .F., (lRetorna:=.T., nOpca := 1, oDlgDesc:End())) ENABLE OF oDlgDesc
        @ 001, 001 TO 060, 258 OF oPanel Pixel
        ACTIVATE MSDIALOG oDlgDesc CENTERED

    EndIf

    VALOR  := nValCred 		// Lanc Contabil
    IOF	   := nVlrIOF

Return .T.

/*/{Protheus.doc} Fa060CanDe
Cancela transferencia para desconto

@param cHistorico	= Historico
@param dDataMov	= Data de movimento
@param nTaxaDesc	= Taxa de desconto
@param nValCred	= Valor do credito
@param cFormula	= Codigo da formula para desconto
@param lCanBord	= Indica se é cancelamento de bordero
@param nVlrIOF		= Valor do Iof
@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function Fa060CanDe(cHistorico,dDataMov,nTaxaDesc,nValDesc,cFormula,cNatureza,lCanBord,nVlrIOF,nTxIOF)
    Local oDlgDesc      := Nil
    Local nOpca         := 0
    Local lValorZero    := .F. //Permitir estorno com valor zerado
    Local aAreaSE5      := {}
    Local aAreaSE1      := {}
    Local lRet          := .T.
    Local nValBor       := 0
    Local nVlrIOFBor    := 0
    Local nTxIOFBor     := 0
    Local nDescAux      := 0
    Local nEstBor       := 0
    Local nEstIOFBor    := 0
    Local nVlrIOFOri    := 0

    Default lCanBord	:= .F.
    Default nValDesc	:= 0
    Default nVlrIOF	:= 0
    Default nTxIOF	:= 0
    Default nTaxaDesc	:= 0
    Default cNatureza	:= SubStr(&(GetMV("MV_NATDESC")), 1, 10)

    cHistorico	:= OemToAnsi(STR0054) // "Estorno Titulos Descontados   "
    dDataMov 	:= dDataBase + SA6->A6_RETDESC

    If nTaxaDesc == 0 .And. !Empty(SA6->A6_TAXADES)
        nTaxaDesc	:= SA6->A6_TAXADES
    EndIf

    If !Empty(SE1->E1_NUMBOR) .OR. lCanBord
        If lCanBord
            cNumBord := MV_PAR01
        Else
            cNumBord := SE1->E1_NUMBOR
        EndIf

        //Salva indice e posição atual
        aAreaSE1 := SE1->(GetArea())
        aAreaSE5 := SE5->(GetArea())

        SE5->(DbSetOrder(10)) //"E5_FILIAL+E5_DOCUMEN"
        If SE5->(DbSeek(xFilial("SE5") + cNumBord))
            While !SE5->(EOF()) .AND. AllTrim(SE5->(E5_FILIAL+E5_DOCUMEN)) == AllTrim(xFilial("SE5") + cNumBord)
                //Procura pelo lançamento de IOF
                If AllTrim(SE5->E5_TIPODOC) == "I2"
                    nVlrIOFBor := SE5->E5_VALOR
                ElseIf AllTrim(SE5->E5_TIPODOC) == "BD"
                    nValBor := SE5->E5_VALOR

                    If SE5->E5_VLDESCO > 0
                        nDescAux := SE5->E5_VLDESCO
                    EndIf

                    nTaxaDesc := nDescAux / (nDescAux + nValBor + nVlrIOF) * 100
                //Se for um estorno de um título para carteira, feito separadamente, então desconsidera do valor total do borderô
                ElseIf AllTrim(SE5->E5_TIPODOC) == "E2" .And. lCanBord
                    nEstBor += SE5->E5_VALOR
                ElseIf AllTrim(SE5->E5_TIPODOC) == "EI" .And. lCanBord //Se for um estorno de IOF, então desconsidera do valor total do IOF do borderô
                    nEstIOFBor += SE5->E5_VALOR
                EndIf

                SE5->(DbSkip())
            EndDo

        EndIf

        //Restaura ambiente da SE5
        RestArea(aAreaSE5)
        //Restaura ambiente da SE1
        SE1->(RestArea(aAreaSE1))

        If lCanBord
            If nVlrIOFBor > 0
                nTxIOFBor   := (nVlrIOFBor * 100) / NoRound(nValBor + nVlrIOFBor, 4)
                nTxIOF      := nTxIOFBor
                nVlrIOFOri  := nVlrIOFBor
                nVlrIOFBor  -= nEstIOFBor
                nVlrIOF     := nVlrIOFBor
            EndIf

            nValDesc    := (nValBor + nDescAux + nVlrIOFOri) - (nEstBor + nEstIOFBor)

            // se o valor a ser estornado é o valor bruto, calculo o valor bruto
            If !lValorBruto .And. nTaxaDesc > 0
                nValDesc := nValDesc * (1 - (nTaxaDesc / 100))
            EndIf

            nValDesc -= nVlrIOF
        Else //se for transferência de título de carteira descontada para carteira 0
            If nVlrIOFBor > 0
                nTxIOFBor   := (nVlrIOFBor * 100) / NoRound(nValBor + nVlrIOFBor, 4)
            EndIf

            nTxIOF := nTxIOFBor

            If nDescAux > 0 .And. nTaxaDesc == 0
                nTaxaDesc := ((nDescAux * 100) / (nValBor + nDescAux + nVlrIOFBor))
            EndIf

            nVlrIOF     := (nValDesc - (nValDesc * (nTaxaDesc / 100))) * (nTxIOF / 100)

            If !lValorBruto
                nDescAux := nValDesc * (nTaxaDesc / 100)

                nValDesc := nValDesc - (nDescAux + nVlrIOF)
            Else
                nValDesc    := NoRound(nValDesc - nVlrIOF, 4)
            EndIf
        EndIf
    EndIf

    cNatureza	:= cNatureza + Space(10- Len(cNatureza))
    nValDesc	:= IIf(Empty(nValDesc), SE1->E1_VALOR, nValDesc)

    If !lCanBord .And. MV_PAR09 == 1
        If nValDesc == SE1->E1_VALOR
            nValDesc := nValDesc - SE1->E1_DECRESC + SE1->E1_ACRESC
        EndIf
    EndIf

    If ExistBlock("F060VLZ")
        lValorZero := ExecBlock("F060VLZ",.F.,.F.)
    EndIf
    /*SE1->E1_SITUACA $ "2/7"*/
    If FN022SITCB(SE1->E1_SITUACA)[3] .And. MV_PAR08 == 1 .And. !Empty(SE1->E1_NUMBOR) //Abatimentos só vão ser descontados no cancelamento, quando o título vier de borderô.
        If nAbatim > 0
            nValDesc -= nAbatim
        EndIf
    EndIf

    nOpca := 0

    If Empty(SE1->E1_NUMBOR)
        //Cálcula o Vlr da Tx do Iof para exibição em tela.
        If nTxIof == 0 .And. nVlrIof > 0
            nTxIof := ((nVlrIof * 100) / (SE5->E5_VALOR + nVlrIof))
        EndIf
    EndIf

    //Não apresenta tela para rotina automática
    If !_lF060Auto
        While nOpca == 0

            If lValorBruto
                DEFINE MSDIALOG oDlgDesc TITLE OemToAnsi(STR0044+STR0132) From 5,5 To 175,380 PIXEL OF oMainWnd	// "Dados do Estorno"###" - Valor Bruto"
            Else
                DEFINE MSDIALOG oDlgDesc TITLE OemToAnsi(STR0044) From 5,5 To 175,380 PIXEL OF oMainWnd	// "Dados do Estorno"
            EndIf

            oPanel := TPanel():New(0,0,'',oDlgDesc,, .T., .T.,,,25,25)
            oPanel:Align := CONTROL_ALIGN_ALLCLIENT

            @ 003, 003 Say OemToAnsi(STR0034)	PIXEL OF oPanel SIZE 30,08	//"Histórico"
            @ 003, 035 MSGet cHistorico  		PIXEL OF oPanel SIZE 150,08

            @ 018, 003 Say OemToAnsi(STR0045)	PIXEL OF oPanel SIZE 30,08	//"Data Estorno"
            @ 018, 035 MSGet dDataMov           WHEN .F. PIXEL OF oPanel SIZE 60,08  HASBUTTON

            @ 018, 100 Say OemToAnsi(STR0036)	PIXEL OF oPanel SIZE 30,08 //"Natureza"
            @ 018, 130 MSGet cNatureza          WHEN .F. PIXEL OF oPanel SIZE 50,08 HASBUTTON

            @ 035, 003 Say OemToAnsi(STR0046)	PIXEL OF oPanel SIZE 30,08 //"Valor Estorno"
            @ 035, 035 MSGet nValDesc Picture cPict06018 WHEN .F. PIXEL OF oPanel SIZE 60,08 HASBUTTON

            @ 035, 100 Say STR0126 PIXEL OF oPanel SIZE 30,08 //"Tx Desc(%)"
            @ 035, 130 MSGet nTaxaDesc Picture cPict06018 WHEN .F. PIXEL OF oPanel SIZE 50,08 HASBUTTON

            If cPaisLoc="BRA"
                @ 052, 003 Say STR0127 PIXEL OF oPanel SIZE 30,08 //"Vlr IOF"
                @ 052, 035 MSGet nVlrIOF Picture cPict06018 WHEN .F. PIXEL OF oPanel SIZE 60,08 HASBUTTON

                @ 052, 100 Say STR0128 PIXEL OF oPanel SIZE 30,08 //"tx Iof" //"Tx IOF(%)"
                @ 052, 130 MSGet nTxIOF Picture cPict06018 WHEN .F. PIXEL OF oPanel SIZE 50,08 HASBUTTON
            EndIf

            DEFINE SBUTTON FROM 70 ,160 TYPE 1 ACTION (If(f060VlDel(nValDesc,cNatureza,lCanBord,lValorZero,dDataMov),(lRet:=.T.,nOpca:=1,oDlgDesc:End()),nOpca:=0)) ENABLE OF oDlgDesc
            DEFINE SBUTTON FROM 70, 130 TYPE 2 ENABLE ACTION (nOpca:=2,lRet := .F.,oDlgDesc:End()) OF oDlgDesc
            @ 001, 001 TO 065, 190 OF oPanel Pixel
            ACTIVATE MSDIALOG oDlgDesc CENTERED

        EndDo
    Else
        If f060VlDel(nValDesc,cNatureza,lCanBord,lValorZero,dDataMov)
            lRetorna := .T.
            nOpca := 1
        EndIf
    EndIf

    If nOpca <> 2
        VALOR := nValDesc //Lanc Contabil
        IOF := nVlrIOF
    EndIf

Return lRet

/*/{Protheus.doc} Fa060MarkB
Markbrowse para selecao de titulos para bordero

@param cAlias	 = Alias para marcacao
@param nLimite   = Limite de valor para marcar Títulos
@param dVencIni  = Data de vencimento inicial a considerar
@param dVencFim  = Data de vencimento final a considerar
@param cSituacao = Situação de cobranca
@param oPrazoMed = Objeto para refresh do prazo medio
@param oValor	 = Objeto para refresh do valor selecionado
@param aCampos	 = Campos a serem mostrados na MSSelect
@param cNumBor 	 = Codigo do bordero
@param lMarkAbt  = Marca abatimentos ou nao
@param nIndice   = Indice para pesquisa na tabela

@return nOpca	 = Opcao selecionada pelo usuario (confirma/cancela)

@author pequim

@since 02/12/2013
@version 1.0
/*/
Function Fa060MarkB(cAlias,nLimite,dVencIni,dVencFim,cSituacao,oPrazoMed,oValor,aCampos,cNumBor,lMarkAbt,nIndice,cIndF060CH)

    Local oDlg1
    Local oFnt
    Local bWhile
    Local nRec		:= 0
    Local nOpca		:= 0
    Local lF060Mark	:= ExistBlock("F060MARK")
    Local aBut060	:= {}
    Local bSet16	:= SetKey(16,{||Fa060Pesq(oMark,"TRB",nIndice)})
    Local aChaveLbn := {}
    Local lF060COL	:= ExistBlock("F060COL")
    Local oSize		:= Nil
    Local a1stRow	:= {}
    Local a2ndRow	:= {}
    Local iX		:= 0
    Local aF060But	:= {}

    Default nIndice := cAlias->(Indexord())
    Default cIndF060CH := ""

    aBut060 := {{"PESQUISA",{||Fa060Pesq(oMark,"TRB",nIndice,cIndF060CH)}, STR0074,STR0001}} //"Pesquisar..(CTRL-P)"###"Pesquisar"

    DEFINE FONT oFnt NAME "Arial" SIZE 12,14 BOLD

    nPrazo := 0
    nValor := 0

    _lVlCGCEmp  := .F.

    DbSelectArea(cAlias)
    bWhile := { || ! EOF() }
    nRec:=RecNo()
    DbSeek(xFilial("SE1"))
    DBEVAL({ |a| FA060DBEVA(nLimite,dVencIni,dVencFim,"TRB",aChaveLbn,lMarkAbt) } , bWhile)
    DbGoTo(nRec)
    nOpca :=0

    If _lVlCGCEmp
        Help(" ",1,"CAD_DESAT_INI",, STR0179 + CRLF + CRLF + STR0180 ,1,,,,,,, { STR0181 }) // "Como este borderô será transmitido automaticamente para o banco selecionado, faz-se necessário que todos os clientes possuam CNPJ/CPF." # Identificamos clientes sem esta informação, logo, os títulos destes clientes não permitirão sua seleção. #"Ajustar campo CNPJ/CPF em base de dados"
    Endif

    //Ponto de entrada para possibilitar alteracao do valor total do bordero
    If ExistBlock ("F060VLTOT")
        nValor:= ExecBlock("F060VLTOT",.F.,.F.,{nValor})
    EndIf

    If !_lF060Auto
        //Faz o calculo automatico de dimensoes de objetos
        oSize := FwDefSize():New(.T.)

        oSize:lLateral := .F.
        oSize:lProp	:= .T. // Proporcional

        oSize:AddObject("1STROW" ,  100, 10, .T., .T.) // Totalmente dimensionavel
        oSize:AddObject("2NDROW" ,  100, 90, .T., .T.) // Totalmente dimensionavel

        oSize:aMargins := { 2, 2, 1, 2 } // Espaco ao lado dos objetos 0, entre eles 3

        oSize:Process() // Dispara os calculos

        a1stRow := {oSize:GetDimension("1STROW","LININI"),;
                    oSize:GetDimension("1STROW","COLINI"),;
                    oSize:GetDimension("1STROW","LINEND"),;
                    oSize:GetDimension("1STROW","COLEND")}

        a2ndRow := {oSize:GetDimension("2NDROW","LININI"),;
                    oSize:GetDimension("2NDROW","COLINI"),;
                    oSize:GetDimension("2NDROW","LINEND"),;
                    oSize:GetDimension("2NDROW","COLEND")}

        DEFINE MSDIALOG oDlg1 TITLE OemToAnsi(STR0047) From oSize:aWindSize[1],oSize:aWindSize[2] to oSize:aWindSize[3],oSize:aWindSize[4] OF oMainWnd PIXEL //"Bordero de Cobrança"
        oDlg1:lMaximized := .T.

        ////////
        // Panel
            @ a1stRow[1] + 001 , a1stRow[2] + 001  To a1stRow[3],a1stRow[4] PIXEL OF oDlg1
            @ a1stRow[1] + 003 , a1stRow[2] + 003 Say OemToAnsi(STR0023) FONT oDlg1:oFont PIXEl OF oDlg1 // "Border N§"
            @ a1stRow[1] + 003 , a1stRow[2] + 040 Say cNumbor	Picture "@!" FONT oFnt COLOR CLR_HBLUE PIXEl OF oDlg1
            @ a1stRow[1] + 013 , a1stRow[2] + 003 Say OemToAnsi(STR0048) PIXEl OF oDlg1  // "Valor Total:"
            @ a1stRow[1] + 013 , a1stRow[2] + 040 Say oValor VAR nValor Picture cPict06014 SIZE 60,8 PIXEl OF oDlg1
            @ a1stRow[1] + 013 , a1stRow[2] + 100 Say OemToAnsi(STR0049) PIXEl OF oDlg1 // "Quantidade:"
            @ a1stRow[1] + 013 , a1stRow[2] + 150 Say oQtda VAR nQtdTit Picture "@E 99999" SIZE 50,8 PIXEl OF oDlg1
        // Panel
        ////////
    EndIf

    If FN022SITCB(cSituacao)[3]		//cSituacao $ "27"
        If nValor != 0
            nPrazoMed := nPrazo / nValor
        Else
            nPrazoMed := 0
        EndIf
        If !_lF060Auto
            @ a1stRow[1] + 003 , a1stRow[2] + 100 Say OemToAnsi(STR0050) SIZE 70,8 PIXEl OF oDlg1 // "Prazo Mdio Vencimento:"
            @ a1stRow[1] + 003 , a1stRow[2] + 175 Say oPrazoMed VAR nPrazoMed Picture "@E 9999.99" SIZE 50,8 PIXEl OF oDlg1
        EndIf
    EndIf


    If !_lF060Auto
        //////////////
        // Mark Browse
            If lF060COL
                aCampos:= ExecBlock("F060COL",.F.,.F.,{aCampos})
            EndIf

            oMark := MsSelect():New(cAlias,"E1_OK","!E1_SALDO",aCampos,@lInverte,@cMarca,{a2ndRow[1],a2ndRow[2],a2ndRow[3],a2ndRow[4]})
            oMark:bMark := {| | fa060disp(cMarca,lInverte,oValor,oQtda,oPrazoMed,lF060Mark,nLimite,lMarkAbt)}
            oMark:oBrowse:lhasMark = .T.
            oMark:oBrowse:lCanAllmark := .T.
            oMark:bAval	:= {||Fa060bAval(cMarca,oValor,oQtda,oPrazoMed,nLimite,lMarkAbt,aChaveLbn,lF060Mark)}
            oMark:oBrowse:bAllMark := { || FA060Inverte(cMarca,oValor,oQtda,oPrazoMed,nLimite,lMarkAbt,aChaveLbn,,,lF060Mark) }
        // Mark Browse
        //////////////

        AAdd(aBut060, {"S4WB005N",{ || Fa060Visu() }, OemToAnsi(STR0078)+" "+OemToAnsi(STR0013), OemToAnsi(STR0078)})
        // Caso a rotina tenha sido chamada através da automação de testes, não apresenta a interface.

        If ExistBlock("F060But")
            aF060But := ExecBlock("F060But", .F., .F.)
            AEval(aF060But, { |x| AAdd(aBut060, x) })
        EndIf

        If IsPanelFin()
            ACTIVATE MSDIALOG oDlg1 ON INIT (FaMyBar(oDlg1,;
            {|| nOpca := 1,If(ABS(NVALOR)>0,oDlg1:End(),Help(" ",1,"FA060VALOR"))},;
            {|| nOpca := 2,oDlg1:End()},aBut060),oMark:oBrowse:Refresh())
        Else
            ACTIVATE MSDIALOG oDlg1 ON INIT (MayIUseCode("SE1"+xFilial("SE1")+cNumBor),EnchoiceBar(oDlg1,;
            {|| nOpca := 1,If(ABS(NVALOR)>0,oDlg1:End(),Help(" ",1,"FA060VALOR"))},;
            {|| nOpca := 2,oDlg1:End()},,aBut060),oMark:oBrowse:Refresh()) CENTERED

        EndIf

        SetKey(16,bSet16)
    Else
        nOpca := 1
    EndIf

    If !Empty(aChaveLbn)
        For iX := 1 to Len(aChaveLbn)
            SE1->(msRUnlock(aChaveLbn[iX]))
        Next
    EndIf

Return nOpca

/*/{Protheus.doc} FA060REFR1
Calcula valor liquido Títulos a serem descontados - transferencia

@param cFormula	 = Formula
@param nValCred  = Valor do Credito (referencia)
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function FA060REFR1(cFormula,nValCred)

    Local xRet:=" "

    If Empty(cFormula)
        Return .T.
    EndIf

    xRet:=Formula(cFormula)

    If Valtype(xRet)!="N" .Or. Valtype(xRet)="U"
        Help(" ",1,"FA060NOFOR")
        Return .F.
        nValcred := 0
    EndIf

    If Valtype(xRet)="N" .Or. Valtype(xRet)!="U"
        nValCred := nVlrIOF := nTxIOF := nTaxaDesc := 0
        nValCred:=Formula(cFormula)
        nVlrForm := nValCred
    EndIf

Return .T.

/*/{Protheus.doc} FA060REFOR
Calcula valor liquido Títulos a serem descontados - Bordero

@param dVencIni  = Data de vencimento inicial a considerar
@param dVencFim  = Data de vencimento final a considerar
@param cFormula	 = Formula
@param nValCred  = Valor do Credito (referencia)
@param cNumBor 	 = Codigo do bordero

@return nOpca	 = Opcao selecionada pelo usuario (confirma/cancela)

@author pequim

@since 02/12/2013
@version 1.0
/*/
Function FA060REFOR(cFormula,dVencIni,dVencFim,nValCred,cNumBor)

    Local cAlias := Alias(),nReg:=0,xRet:=" ",lFirst:=.T.,lRet:=.T.
    Local nRegEmp := SM0->(RecNo())

    //--- Tratamento Gestao Corporativa
    Local cFilFwSE1 := FwFilial("SE1")

    If Empty(cFormula)
        Return .T.
    EndIf

    cNumBor := IIf(Empty(cNumBor),Space(6),cNumBor)

    DbSelectArea("TRB")
    nOrdem:=IndexOrd()
    nReg:=Recno()

    DbSelectArea("SM0")
    DbSeek(cEmpAnt+cFilDe,.T.)

    //Verifico se o arquivo est  compartilhado (Empty(xFilial("SE1"))) pois
    //se for, não posso comparar com M0_CODFIL (que nunca sera vazio) sob pena
    //de não validar a formula.
    While !EOF() .And. M0_CODIGO == cEmpAnt .And. ;
            IIf(Empty(cFilFwSE1), .T., FWGETCODFILIAL <= cFilAte)

        cFilAnt := FWGETCODFILIAL

        DbSelectArea("TRB")
        DbGoTop()
        While !EOF()
            If E1_VENCREA > dVencFim .And. E1_VENCREA < dVencIni
                DbSkip()
                Loop
            EndIf

            DbSelectArea("SE1")
            DbGoTo(TRB->RECSE1)
            DbSelectArea("TRB")
            If E1_OK == cMarca .And. FN022SITCB(SE1->E1_SITUACA)[1]		//SE1->E1_SITUACA $ "0FG"
                xRet:=Formula(cFormula)
                If Valtype(xRet)!="N" .Or. Valtype(xRet)="U"
                    Help(" ",1,"FA060NOFOR")
                    lRet := .F.
                    Exit
                Else
                    If lFirst
                        lFirst:=.F.
                        nValcred:=0
                    EndIf
                    nValcred+=Formula(cFormula)
                EndIf
            EndIf
            DbSkip()
        EndDo

        If Empty(cFilFwSE1)
            Exit
        EndIf
        DbSelectArea("SM0")
        DbSkip()
    EndDo
    SM0->(DbGoTo(nRegEmp))
    cFilAnt := FWGETCODFILIAL
    DbSelectArea("TRB")
    DbGoTo(nReg)
    DbSetOrder(nOrdem)
    DbSelectArea(cAlias)
Return lRet

/*/{Protheus.doc} FA060TelOk
Verifica a Situacao do titulo

@param cSituacao	= Situação
@param cPort060		= Codigo do portador
@param cAgen060		= Agencia
@param cConta060	= Conta Corrente
@param lDesc		= Sinaliza se houve desonto ou nao
@param cCliente		= Codigo do cliente
@param cTitulo		= Numero do titulo
@param cSituAnt		= Situacao anterior
@param cContrato	= Numero do contrato bancário
@param cPortador	= Portador anterior do titulo

@return lRet		= Validado ou nao

@author pequim

@since 02/12/2013
@version 1.0
/*/
Function FA060TelOk(cSituacao,cPort060,cAgen060,cConta060,lDesc,cCliente,cTitulo,cSituAnt,cContrato,cPortador)

    Local lRet := .T.
    Local aDados := {}
    Local lIsCarteira := FN022SITCB(cSituacao)[1]
    Local lIsDescont  := FN022SITCB(cSituacao)[3]

    //Conteudo de aDados
    //cSituacao	= Situacao para a qual esta sendo transferido o titulo
    //cPort060	= Banco para o qual esta sendo transferido o titulo
    //cAgen060	= Agencia para a qual esta sendo transferido o titulo
    //cConta060	= Conta para a qual esta sendo transferido o titulo
    //lDesc		= Informa se a carteira para a qual esta sendo transferido o titulo eh 2 (descontada) ou 7 (Descontada caucionada)
    //cCliente	= Cliente, Loja e Nome do Cliente do titulo
    //cTitulo	= Prefixo, Numero e Parcela do titulo
    //cSituAnt	= Situacao de cobranca anterior
    //cContrato	= Numero do contrato bancário
    //cPortador	= Portador anterior do titulo

    aDados := {cSituacao,cPort060,cAgen060,cConta060,lDesc,cCliente,cTitulo,cSituAnt,cContrato,cPortador}

    If !lIsCarteira .And. (Empty(cPort060) .Or. Empty(cAgen060) .Or. Empty(cConta060))
        //Função Help(..) acrescentada em 16/03/2020 - Projeto Upgrade v12.1.25 (TDI)
        Help(" ",1,"BCOOBRIGAT")
        lRet := .F.
    EndIf

    If lRet .And. lIsCarteira .And. (!Empty(cPort060) .Or. !Empty(cAgen060) .Or. !Empty(cConta060))
        If cPaisLoc == "BRA"
            lRet := .F.
        Else
            If !(AllTrim(cPort060) $ GetMV("MV_CARTEIR"))
                lRet := .F.
            EndIf
        EndIf
    EndIf

    //Se situacao atual é descontada e se a situação do titulo também for descontada
    If lRet .And. lIsDescont .And. FN022SITCB(SE1->E1_SITUACA)[3]
        lRet := .T.
    EndIf

    If	lRet .And. lIsDescont .And. !lDesc .And. MV_PAR03 == 1
        lRet := .F.
    EndIf

    If	lRet .And. cPaisLoc <> "BRA" .And. ((!lIsCarteira .And.  Fin060IsCx(cPort060)) .Or. (lIsCarteira .And. !Fin060IsCx(cPort060)))
        Help(" ",1,"FA060PORT")
        lRet := .F.
    EndIf

    //Verifica Bloqueio da Conta Corrente
    If lRet .And. CCBlocked(cPort060,cAgen060,cConta060,.F.)
        lRet := .F.
    EndIf

    If lRet .And. !(F060VldNat(cNatureza, cSituacao))
        lRet := .F.
    EndIf

    // Consiste se a moeda do banco eh nacional
    If lRet .And. FXMultSld()
        lRet := FXVldBco(cPort060, cAgen060, cConta060, SE1->E1_MOEDA)
    EndIf

    If lRet .And. ExistBlock("F060OK")
        lRet := ExecBlock("F060OK",.F.,.F.,aDados)
    EndIf

    If lRet .And. (UsaSeqCor())
        cCodDiario := CTBAVerDia()
    EndIf
    // Se utiliza api de bancos, verifica se foi transmitido para confirmar o processo
    If lRet
        // Verifica se já transmitido para exigir a confirmação do processo.
        If _lBCOApi .And. F713VldTit(.F., SE1->E1_FILIAL, SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA, SE1->E1_TIPO, SE1->E1_NUMBOR)
            lRet := F713YesNo(1)
        Else
            lRet := MsgYesNo(OemToAnsi(STR0051),OemToAnsi(STR0052)) // "Confirma Dados ?"###"Atenção"
        EndIf
    EndIf
Return lRet

/*/{Protheus.doc} FA060Erro
Indica que houve erro na janela

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function Fa060Erro()
    Help(" ",1,"FA060ERR")
Return 0

/*/
{Protheus.doc} Fa060Inverte
Inverte marcacoes

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function Fa060Inverte(cMarca,oValor,oQtda,oPrazoMed,nLimite,lMarkAbt,aChaveLbn,cChaveLbn, lTodos,lF060Mark)
    Local nReg := TRB->(Recno())
    Local lF060DPM      := ExistBlock("F060DPM")
    Local lF060CPM      := ExistBlock("F060CPM")
    Local lMarcado
    Local nAbat         := 0
    Local nAscan
    Local aAreaSE1      := SE1->(getArea())
    Local lFa060Vld	    := ExistBlock("FA060VLD")
    Local lRet          := .T.
    Local lRetCGCCPF    := .F.
    Local cCNPJCPF      := ""
    Local cMarcaAux     := ""

    nSomaData := 0
    Default lTodos := .T.

    DbSelectArea("TRB")
    If lTodos
        DbSeek(Xfilial("SE1",cFilDe),.T.)
    EndIf
    While !lTodos .Or. (!EOF() .And. E1_FILIAL >= Xfilial("SE1",cFilDe) .And. E1_FILIAL <= Xfilial("SE1",cFilAte))
        If lTodos .Or. cChaveLbn == Nil
            cChaveLbn := "BOR" + E1_FILIAL +E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO
        EndIf

        SE1->(DbGoTo(TRB->RECSE1))

        If _lVlBcoApi
            cMarcaAux   := cMarca
            cCNPJCPF    := GetAdvFVal("SA1", "A1_CGC" , xFilial("SA1", cFilAnt) + TRB->E1_CLIENTE + TRB->E1_LOJA,1,"",.T.)
            If Empty(cCNPJCPF) .And. !lTodos
                cMarca  := Space(2)
                Help(" ",1,"CAD_DESAT_MKW",, STR0182 + CRLF + CRLF + STR0183 ,1,,,,,,, { STR0181 }) //Como este borderô será transmitido automaticamente para o banco selecionado, faz-se necessário que o cliente possua CNPJ/CPF. #"Identificamos que o cliente está sem essa informação, logo, o título do cliente não será selecionado." #"Informar o CNPJ/CPF no cadastro de clientes."
            ElseIf Empty(cCNPJCPF) .And. lTodos
                lRetCGCCPF  := .T.
                cMarca      := Space(2)
            Endif
        Endif

        If lFa060Vld
            lRet := ExecBlock("FA060VLD", .F., .F., { cMarca, "TRB" })
        EndIf

        If lRet .And. (!lTodos .Or. (lTodos .And. SE1->(SimpleLock())))
            If !lMarkAbt .And. !GetNewPar("MV_ACATIVO",.F.)
                nAbat := SomaAbat(E1_PREFIXO,E1_NUM,E1_PARCELA,"R",E1_MOEDA,dDataBase,E1_CLIENTE,E1_LOJA,E1_FILIAL,,E1_TIPO)
            EndIf
            RecLock("TRB", .F.)
            (lMarcado := IsMark("E1_OK", cMarca, lInverte))
            If lMarcado .Or. lInverte
                Replace E1_OK With Space(2)
                nAscan := AScan(aChaveLbn, TRB->RECSE1)
                If nAscan > 0
                    SE1->(MsrUnlock(TRB->RECSE1))
                    aDel(aChaveLbn,nAscan)
                    ASize(aChaveLbn,Len(aChaveLbn)-1) // Libera Lock
                EndIf
            Else
                If (nValor + (E1_SALDO-nAbat)) <= (nLimite) .Or. Empty(nLimite)
                    Replace E1_OK With cMarca
                    If AScan(aChaveLbn, TRB->RECSE1) == 0
                        AAdd(aChaveLbn,TRB->RECSE1)
                    EndIf
                EndIf
            EndIf
            MsUnLock()
            If E1_OK == cMarca
                If TRB->E1_TIPO $ MVABATIM
                    nValor	-= E1_SALDO
                    If lF060DPM
                        nData := ExecBlock("F060DPM",.F.,.F.)
                    Else
                        nData := E1_VENCREA - E1_EMISSAO
                    EndIf
                    nPrazo	-= (nData * E1_SALDO)
                Else
                    nValor	+= (E1_SALDO-nAbat)
                    //Se considerar Acrescimos e Decrescimos
                    If MV_PAR09 == 1
                        nValor += E1_SDACRES - E1_SDDECRE
                    EndIf
                    //Calculo de Valor de Acessorios
                    If _lExistVA
                        nValor += FValAcess(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA,SE1->E1_NATUREZ, IIf(Empty(SE1->E1_BAIXA),.F.,.T.),"","R",SE1->E1_BAIXA)
                    EndIf
                    If lF060DPM
                        nData := ExecBlock("F060DPM",.F.,.F.)
                    Else
                        nData := E1_VENCREA - E1_EMISSAO
                    EndIf
                    nPrazo	+= (nData * (E1_SALDO-nAbat))
                EndIf
                nQtdTit++
                nSomaData += nData
                If nValor != 0
                    nPrazoMed := nPrazo / nValor
                Else
                    nPrazoMed := 0
                EndIf
                If lF060Mark
                    ExecBlock("F060MARK",.F.,.F.)
                EndIf
            Elseif lMarcado
                If TRB->E1_TIPO $ MVABATIM
                    nValor	+= (E1_SALDO-nAbat)
                    If lF060DPM
                        nData := ExecBlock("F060DPM",.F.,.F.)
                    Else
                        nData := E1_VENCREA - E1_EMISSAO
                    EndIf
                    nPrazo	+= (nData * E1_SALDO)
                Else
                    nValor	-= (E1_SALDO-nAbat)
                    //Se considerar Acrescimos e Decrescimos
                    If MV_PAR09 == 1
                        nValor -= E1_SDACRES - E1_SDDECRE
                    EndIf
                    //Calculo de Valor de Acessorios
                    If _lExistVA
                        nValor -= FValAcess(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA,SE1->E1_NATUREZ, IIf(Empty(SE1->E1_BAIXA),.F.,.T.),"","R",SE1->E1_BAIXA)
                    EndIf
                    If lF060DPM
                        nData := ExecBlock("F060DPM",.F.,.F.)
                    Else
                        nData := E1_VENCREA - E1_EMISSAO
                    EndIf
                    nPrazo	-= (nData * (E1_SALDO-nAbat))
                EndIf
                nQtdTit--
                nSomaData -= nData
                If nValor != 0
                    nPrazoMed := nPrazo / nValor
                Else
                    nPrazoMed := 0
                EndIf
            EndIf
            nQtdTit:= IIf(nQtdTit<0,0,nQtdTit)
            nSomaData := IIf(nSomaData<0,0,nSomaData)
        EndIf
        If lTodos
            If lRetCGCCPF
                cMarca := cMarcaAux
            Endif
            DbSkip()
        Else
            Exit
        EndIf
    EndDo

    If lRetCGCCPF .And. lTodos
        Help(" ",1,"CAD_DESAT_INV",, STR0179 + CRLF + CRLF + STR0180 ,1,,,,,,, { STR0181 }) // "Como este borderô será transmitido automaticamente para o banco selecionado, faz-se necessário que todos os clientes possuam CNPJ/CPF." # Identificamos clientes sem esta informação, logo, os títulos destes clientes não permitirão sua seleção. #"Ajustar campo CNPJ/CPF em base de dados"
    Endif

    // Calcula prazo medio, conforme necessidade.
    If lF060CPM
        nPrazoMed := ExecBlock("F060CPM",.F.,.F., {nSomaData,nQtdTit,nPrazo,nValor,nPrazoMed})
    EndIf
    TRB->(DbGoTo(nReg))
    oValor:Refresh()
    oQtda:Refresh()
    If VALTYPE(oPrazoMed) == "O"
    oPrazoMed:Refresh()
    EndIf
    oMark:oBrowse:Refresh(.T.)
    RestArea(aAreaSE1)

Return Nil

/*/{Protheus.doc} Fa060bAval
Bloco de marcacao

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function Fa060bAval(cMarca,oValor,oQtda,oPrazoMed,nLimite,lMarkAbt,aChaveLbn,lF060Mark)
    Local lRet 		:= .T.
    Local cChaveLbn
    Local aAreaSE1	:= SE1->(getArea())

    cChaveLbn := "BOR" + TRB->(E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)
    // Verifica se o registro nao esta sendo utilizado em outro terminal
    //-- Parametros da Funcao LockByName() :
    //   1o - Nome da Trava
    //   2o - usa informacoes da Empresa na chave
    //   3o - usa informacoes da Filial na chave
    SE1->(DbGoTo(TRB->RECSE1))
    If SE1->(SimpleLock())
        If lRet
            FA060Inverte(cMarca,oValor,oQtda,oPrazoMed,nLimite,lMarkAbt,aChaveLbn,cChaveLbn, .F.,lF060Mark)
        EndIf
    Else
        IW_MsgBox(STR0080,STR0081,"STOP") //"Este titulo está sendo utilizado em outro terminal, não pode ser utilizado neste Borderô"###"Atenção"
        lRet := .F.
    EndIf
    oMark:oBrowse:Refresh(.T.)
    RestArea(aAreaSE1)
Return lRet

/*/{Protheus.doc} Fa060Disp
Exibe Valores na tela

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function Fa060Disp(cMarca,lInverte,oValor,oQtda,oPrazoMed,lF060Mark,nLimite,lMarkAbt)
    Local nData := 0
    Local lMarcado
    Local nAbat := 0

    If !lMarkAbt
        nAbat := SomaAbat(E1_PREFIXO,E1_NUM,E1_PARCELA,"R",E1_MOEDA,dDataBase,E1_CLIENTE,E1_LOJA,,,E1_TIPO)
    EndIf

    If (lMarcado := IsMark("E1_OK",cMarca,lInverte))
        If (nValor + E1_SALDO) <= (nLimite) .Or. Empty(nLimite)
            If E1_TIPO $ MVABATIM
                nValor -= E1_SALDO
                If VALTYPE(oPrazoMed) == "O"
                    If ExistBlock("F060DPM")
                        nData := ExecBlock("F060DPM",.F.,.F.)
                    Else
                        nData := E1_VENCREA - E1_EMISSAO
                    EndIf
                    nPrazo	-= (nData * E1_SALDO)
                EndIf
            Else
                nValor += (E1_SALDO-nAbat)
                //Se considerar Acrescimos e Decrescimos
                If MV_PAR09 == 1
                    nValor += E1_SDACRES - E1_SDDECRE
                EndIf

                If VALTYPE(oPrazoMed) == "O"
                    If ExistBlock("F060DPM")
                        nData := ExecBlock("F060DPM",.F.,.F.)
                    Else
                        nData := E1_VENCREA - E1_EMISSAO
                    EndIf
                    nPrazo	+= (nData * (E1_SALDO-nAbat))
                EndIf
            EndIf
            nQtdTit++
            nSomaData += nData
            If lF060Mark
                ExecBlock("F060MARK",.F.,.F.)
            EndIf
        Else
            If IsMark("E1_OK",cMarca,lInverte)
                Reclock("TRB")
                TRB->E1_OK := "  "
                MsUnlock()
            EndIf
        EndIf
    Elseif !lMarcado
        If E1_TIPO $ MVABATIM
            nValor += E1_SALDO
            If VALTYPE(oPrazoMed) == "O"
                If ExistBlock("F060DPM")
                    nData := ExecBlock("F060DPM",.F.,.F.)
                Else
                    nData := E1_VENCREA - E1_EMISSAO
                EndIf
                nPrazo	+= (nData * E1_SALDO)
            EndIf
        Else
            nValor -= (E1_SALDO-nAbat)
            //Se considerar Acrescimos e Decrescimos
            If MV_PAR09 == 1
                nValor -= E1_SDACRES - E1_SDDECRE
            EndIf
            //Calculo de Valor Acessorio
            If _lExistVA
                nValor -= FValAcess(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA,SE1->E1_NATUREZ, IIf(Empty(SE1->E1_BAIXA),.F.,.T.),"","R",SE1->E1_BAIXA)
            EndIf
            If VALTYPE(oPrazoMed) == "O"
                If ExistBlock("F060DPM")
                    nData := ExecBlock("F060DPM",.F.,.F.)
                Else
                    nData := E1_VENCREA - E1_EMISSAO
                EndIf
                nPrazo	-= (nData * (E1_SALDO-nAbat))
        EndIf
        EndIf
        nQtdTit--
        nSomaData -= nData
        nQtdTit:= IIf(nQtdTit<0,0,nQtdTit)
        nSomaData := IIf(nSomaData<0,0,nSomaData)
    EndIf
    oValor:Refresh()
    oQtda:Refresh()
    If VALTYPE(oPrazoMed) == "O"
        If nValor != 0
            nPrazoMed := nPrazo / nValor
        Else
            nPrazoMed := 0
        EndIf
        // Calcula prazo medio, conforme necessidade.
        If ExistBlock("F060CPM")
            nPrazoMed := ExecBlock("F060CPM",.F.,.F., {nSomaData,nQtdTit,nPrazo,nValor,nPrazoMed})
        EndIf
        oPrazoMed:Refresh()
    EndIf
Return

/*/{Protheus.doc} fa060Blank
Limpa as marcacoes do arquivo (E1_OK)

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function fa060Blank()
    If !Empty(TRB->E1_OK)
        Reclock("TRB")
        TRB->E1_OK := "  "
        MsUnlock()
    EndIf
Return

/*/{Protheus.doc} fa060Checa
Filtro da Indiregua no SE5 para cancelamento do bordero

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function fa060Checa(ctipodoc)

    Local cFiltro
    Local cTamDoc	:= CriaVar("E5_DOCUMEN")
    Local nTamBor	:= CriaVar("EA_NUMBOR")
    Local cBorder	:= MV_PAR01+Space(Len(cTamDoc)-(Len(nTamBor)))
    Default ctipodoc:="BD"


    cFiltro := '(E5_FILIAL=="'+xFilial("SE5")+'".And.'
    cFiltro += 'E5_TIPODOC $ "'+ctipodoc+'".And.'
    cFiltro += 'E5_DOCUMEN=="'+ cBorder	+ '")'
Return(cFiltro)

/*/{Protheus.doc} fa060Clear
Preenche o campo do clearing dacordo com o clearing do SA6.

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function fa060Clear(cClearing,oCbxClear,aTempos)
    If SA6->A6_DIASCOB < 6.AND.SA6->A6_DIASCOB > 0
        cClearing   := aTempos[SA6->A6_DIASCOB]
    ElseIf SA6->A6_DIASCOB > 5
        cClearing   := aTempos[6]
    Else
        cClearing   := aTempos[1]
    EndIf
    oCbxClear:Refresh()
Return .T.

/*/{Protheus.doc} f060Vld
Validação de Banco e situação na montagem do bordero

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function f060Vld(cBanco,cAgencia,cConta,cSituacao,cContrato, lBolApi, cSubCta060, cEspec060)
    Local lF060VBCO	:= ExistBlock("F060VBCO")
    Local lRet		:= .F.

    Default lBolApi    := .F.
    Default cSubCta060 := ""
    Default cEspec060  := ""

    If CarregaSa6(cBanco,cAgencia,cConta,.T.,,.T.) .And. FN022SITCB(cSituacao)[2]	//Cobranca em banco
        lRet := .T.
    Else
        Help(" ",1,"BORD_TRANS")
    EndIf

    If (lRet .AND. lBolApi .AND. (Empty(cSubCta060) .OR. Empty(cEspec060)))
        lRet := .F.
        Help("", 1, "BOLREG", , STR0164, 1,; // #"Sub Conta e Espécie do Boleto devem ser informadas."
            ,,,,,, {STR0165}) // #"Preencha os campos solicitados."
    EndIf

    // PE F060VBCO
    // Utilizado para validações extras do usuário
    If lRet .AND. lF060VBCO
        lRet := ExecBlock("F060VBCO",.F.,.F.,{cBanco,cAgencia,cConta,cSituacao,cContrato})
    EndIf
    // Se Portugal, pega cod. Diario
    If lRet .And. UsaSeqCor()
        cCodDiario := CTBAVerDia()
    EndIf

    If lRet .And. FXMultSld()
        lRet := FXVldBco(cBanco, cAgencia, cConta, nMoeda, .T.)
    EndIf

Return lRet

/*/{Protheus.doc} Fa060Pesq
tela de pesquisa

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function Fa060Pesq(oMark, cAlias,nIndice,cIndF060CH)
    Local nRecno  := 0
    Local nRecTrb := 0
    Local cCampos := {}
    Local aPesqui := {}
    Local aSIXVal := {}
    Local cSeek   := ""

    Default  nIndice := cAlias->(Indexord())
    Default  cIndF060CH := ""

    If Empty(cIndF060CH)
        aSIXVal := aClone(FIndPesq("SE1"))//Retorna a descricao do indice posicionado para compor a pesquisa

        If ValType(aSIXVal) == "A" .And. Len(aSIXVal) > 0 //Precaucao caso o retorno da rotina tenha algum problema
            aPesqui := {aClone(aSIXVal[nIndice])}
        Else
            SIX->(DbSeek("SE1"+AllTrim(STR(nIndice))))
            AAdd(aPesqui,{SIX->DESCRICAO,1})
        EndIf
    Else
        AAdd(aPesqui,{cIndF060CH,1})
    EndIf

    DbSelectArea(cAlias)
    nRecno  := Recno()
    nRecTrb := TRB->(RecNo())
    cCampos := TRB->(IndexKey())
    // Obtem os campos de pesquisa de cAlias, para pesquisar no TRB, pois
    // os indice do TRB eh unico (FILIAL+PREFIXO+NUMERO+PARCELA+TIPO) e em
    // AxPesqui, o usuario pode escolher a chave desejada.
    cCampos := cAlias + "->(" + cCampos + ")"

    WndxPesqui(oMark:oBrowse,aPesqui,cSeek,.F.)

    oMark:oBrowse:Refresh(.T.)

Return Nil

/*/{Protheus.doc} FA060Legend
Cria uma janela contendo a legenda da mBrowse

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function FA060Legend(nReg)

    Local aTmpCores
    Local nI
    Local aPicture := {}
    Local lF060Legen := ExistBlock("F060LEGEN")
    Local aLegenda := {}
    Local aTmp     := {}
    Local uRetorno := {}
    Local cCSitu   :=  '0' + Space(Len(Space(TamSx3('E1_SITUACA')[1]))-1)
    Local cCSituP  :=  'F' + Space(Len(Space(TamSx3('E1_SITUACA')[1]))-1)

    aLegenda := {	{"ENABLE"		, 	STR0063	},;	// "Titulo em Carteira"
                    {"DISABLE"		, 	STR0064	},;	//"Titulo Transferido"
                    {"BR_AZUL"		,   STR0065	},;	//"Titulo Baixado"
                    {"BR_AMARELO"	, 	STR0073	} } //"Titulo Protestado"

    If lF060Legen
        aTmp := aClone(ExecBlock("F060LEGEN", .F., .F.))

        If Len(aTmp) >= Len(aLegenda)
            aLegenda := aClone(aTmp)
        EndIf
    EndIf

    //____________________________________________________________________________________________________________________
    //|Ponto de Entrada implementado para que o usuario possa customizar as cores e legendas de situacao dos titulos      |
    //|                                                                                                                   |
    //| "F060CORES"                                                                                                       |
    //| Devera retornar um Array Bi-Dimensional de 3 Colunas sendo:                                                       |
    //| [nReg][1] Logica do status                                                                                        |
    //| [nReg][2] Picture                                                                                                 |
    //| [nReg][3] Descricao da Legenda                                                                                    |
    //|____________________________________________________________________________________________________________________

    If ExistBlock("F060CORES")
        AAdd(aPicture, "ENABLE")
        AAdd(aPicture, "BR_AZUL")
        AAdd(aPicture, "BR_LARANJA")
        AAdd(aPicture, "BR_BRANCO")
        AAdd(aPicture, "BR_PRETO")
        AAdd(aPicture, "BR_MARROM")
        AAdd(aPicture, "BR_PINK")
        AAdd(aPicture, "BR_CINZA")
        AAdd(aPicture, "BR_AMARELO")
        AAdd(aPicture, "LIGHTBLU")
        AAdd(aPicture, "DISABLE")

        aTmpCores := ExecBlock("F060CORES", .F., .F., aLegenda)
        If ValType(aTmpCores) == "A"
            For nI := 1 To Len(aTmpCores)
                If ValType(aTmpCores[nI][1])# "U" .And. ValType(aTmpCores[nI][2])# "U" .And. ValType(aTmpCores[nI][3])# "U"
                    If aScan(aPicture, aTmpCores[nI][2]) # 0 .And. !Empty(aTmpCores[nI][3])
                        // adiciona no array aLegenda
                        AAdd(aLegenda, { aTmpCores[nI][2], aTmpCores[nI][3] })
                        // adiciona no array uRetorno
                        AAdd(uRetorno, { aTmpCores[nI][1], aTmpCores[nI][2] })
                    EndIf
                EndIf
            Next
        EndIf
    EndIf

    If nReg = Nil	// Chamada direta da funcao onde nao passa, via menu Recno eh passado
        AAdd(uRetorno, { 'Empty(E1_PORTADO) .AND. E1_SALDO>0 .AND. E1_SITUACA == ' + "'" + cCSituP + "'" , aLegenda[4][1] })//"Titulo Protestado"
        AAdd(uRetorno, { 'E1_SITUACA == ' +   "'" + cCSitu + "'"  +  ' .AND. E1_SALDO > 0', aLegenda[1][1] })// "Titulo em Carteira"
        AAdd(uRetorno, { 'E1_SITUACA <> ' +   "'" + cCSitu + "'"  +  ' .And. E1_SALDO>0', aLegenda[2][1] })//"Titulo Transferido"
        AAdd(uRetorno, { 'E1_SALDO=0', aLegenda[3][1] })//"Titulo Baixado"
    Else
        BrwLegenda(STR0005,STR0062,aLegenda)  // "Legenda"
    EndIf

Return uRetorno

/*/{Protheus.doc} Fin060IsCx
Verifica se o banco eh caixa do Loja

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function Fin060IsCx(cBco)

    Local lRet	:=	.F.

    If (cBco $ GetMV("MV_CARTEIR")) .Or. (GetMV("MV_CXLJFIN",,.F.) .And. !Empty(Tabela("23",cBco,.F.)) .Or. cBco $ Space(Len(cBco)))
        lRet	:=	.T.
    EndIf

Return lRet

/*/{Protheus.doc} F060VlDel
Validacao dos valores do estorno

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function F060VlDel(nValorDesc,nNatDesc, lCanBord, lValorZero,dDataMov)
    Local lRet 	:= .T.
    Local nTaxa := 0
    Local nValor := nValorDesc
    Local nValBor := 0
    //--- Tratamento Gestao Corporativa
    Local lGestao   := FwSizeFilial() > 2	// Indica se usa Gestao Corporativa
    Local cFilFwSE5 := FwFilial("SE5")
    Local lSEASE5Fil := .T.
    Local nTitBor := 0
    Local aAreaSE1 := SE1 -> (GetArea())

    Default dDataMov := dDataBase

    If lGestao // TRATAMENTO PARA PEGAR FILIAL DA SEA SOMENTE SE AMBOS FOREM EXCLUSIVOS
        lSEASE5Fil := !EMPTY(FwFilial("SEA")) .AND. !EMPTY(FwFilial("SE5"))
    Else
        lSEASE5Fil := !EMPTY(xFilial("SEA")) .AND. !EMPTY(xFilial("SE5"))
    EndIf

    If lCanBord
        DbSelectArea("SE1")
        DbSetOrder(1)
        SE1->(DbSeek(xFilial("SE1")+SEA->(EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO)))
    EndIf

    nTaxa := IIf(SE1->E1_MOEDA # 1, IIf(!Empty(SE1->E1_TXMOEDA),SE1->E1_TXMOEDA,RecMoeda(dDataMov,SE1->E1_MOEDA)),1)

    lValorZero := IIf(lValorZero == Nil, .F.,lValorZero)

    If SE1->E1_MOEDA > 1 .And. !lCanBord
        nValor := Round(NoRound(xMoeda(nValor,1,SE1->E1_MOEDA,dDataMov,3),3),2)
    EndIf

    If lValorZero
        If nValor < 0  .Or. Empty(nNatDesc) .Or. (nValor > (SE1->E1_VALOR * nTaxa) .AND. !lCanBord)
            lRet := .F.
        EndIf
    Else
        //Posiciona no registro do bordero no SE5 para poder validar se o valor a ser estornado
        // superior ao valor do bordero
        aArea:=GetArea()
        If !Empty(SE1->E1_NUMBOR)
            nEspNum:=TamSX3("E5_DOCUMEN")[1] - TamSX3("E1_NUMBOR")[1]
            nNumBor:=SE1->E1_NUMBOR+Space(nEspNum)

            //*****************************************************************
            // Bloco para tratar bordero gerado em filial difenrete do titulo *
            //*****************************************************************
            If TcSrvType() != "AS/400" .And. !Empty(cFilFwSE5)
                //*****************************************************
                // Localiza a Filial do Bordero do titulo posicionado *
                //*****************************************************
                cQuery := "SELECT EA_FILIAL FROM " + RetSqlName("SEA")
                cQuery += " WHERE EA_FILORIG='" + SE1->E1_FILORIG + "' AND EA_NUMBOR='" + SE1->E1_NUMBOR + "'	AND "
                cQuery += "EA_PREFIXO='" + SE1->E1_PREFIXO + "' AND EA_NUM='" + SE1->E1_NUM + "' AND EA_PARCELA='" + SE1->E1_PARCELA + "' AND "
                cQuery += "EA_TIPO='" + SE1->E1_TIPO + "'" // AND EA_FORNECE='" + SE1->E1_CLIENTE + "' AND EA_LOJA='" + SE1->E1_LOJA + "'"
                cQuery := ChangeQuery(cQuery)
                DbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), 'TRBFIL', .F., .T.)
                If !TRBFIL->(EOF()) .AND. lSEASE5Fil
                    cFilBorder	:= TRBFIL->EA_FILIAL
                Else
                    cFilBorder	:= xFilial("SE5")
                EndIf
                TRBFIL->(DbCloseArea())
            Else
                cFilBorder	:= xFilial("SE5")
            EndIf

            DbSelectArea("SE5")
            SE5->(DbSetOrder(10))
            SE5->(MsSeek(cFilBorder + nNumBor))
            Do While SE5->(!EoF()) .And. SE5->E5_FILIAL == cFilBorder .And. SE5->E5_DOCUMEN == nNumBor
                // Movimento de baixa por 2-Cobranca Descontada
                If SE5->E5_TIPODOC == "BD"
                    If SE5->E5_VLDESCO <> 0 .And. !lCanBord
                        nValBor := SE1->E1_VALOR + SE1->E1_ACRESC - SE1->E1_DECRESC
                    Else
                        nValBor := SE5->E5_VALOR
                    EndIf
                EndIf
                SE5->(DbSkip())
            EndDo

            If Empty(nValorDesc)
                nValorDesc := nValor := nValBor
            EndIf
        EndIf
        //Valida o valor digitado na transferencia de descontada para carteira (Situaca = 0)
        //Valor digitado tem que ser maior que zero
        //A Natureza digitada deve existir
        //Caso seja processado via transferencia manual (nao eh cancelamento de bordero)
        //Valor de estorno nao pode ser maior que o valor do titulo + acrescimos - decrescimos e
        //Valor de estorno não pode ser maior que o valor do bordero
        If nValor <= 0 .Or. Empty(nNatDesc) .Or. ;
        (!lCanBord .And. If(MV_PAR09==2, (nValor > SE1->E1_VALOR*nTaxa), IIf(nTitBor <= 1,(nValor > SE1->(E1_VALOR+E1_ACRESC-E1_DECRESC)*nTaxa),.F.)).Or. (!Empty(SE1->E1_NUMBOR) .And. IIf(nTitBor > 1 ,nValor > nValBor * nTaxa,.F.)))
            lRet := .F.
        EndIf
        RestArea(aArea)
    EndIf

    If !lRet
        Help(" ",1,"DADOSERR",,STR0066,1,0) //"Valor ou Natureza invalidos. Verifique."
    EndIf

    // Se Portugal, pega cod. Diario
    If UsaSeqCor()
        cCodDiario := CTBAVerDia()
    EndIf

    RestArea(aAreaSE1)

Return lRet

/*/{Protheus.doc} F060Valor
Tratamento para abatimento, acrescimos e decrescimos

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function F060Valor(cSituaca)

    If	FN022SITCB(CSITUACA)[3]	//Transferência p/ descontada

        nAbatim := SomaAbat(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,"R",SE1->E1_MOEDA,dDataBase,SE1->E1_CLIENTE,SE1->E1_LOJA,,,SE1->E1_TIPO)

        If MV_PAR08 == 1 //Abatimentos
            nValor -= nAbatim
        EndIf
        If MV_PAR09 == 1 //Acrescimos e Decrescimos
            nDescont := SE1->E1_SDDECRE
            nJuros	 := SE1->E1_SDACRES
            nValor += SE1->E1_SDACRES - SE1->E1_SDDECRE
        EndIf
    ElseIf	FN022SITCB(SE1->E1_SITUACA)[3] .And. !Empty(SE1->E1_NUMBOR)  //Transferencia de descontada p/ carteira
        nAbatim := SomaAbat(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,"R",SE1->E1_MOEDA,dDataBase,SE1->E1_CLIENTE,SE1->E1_LOJA,,,SE1->E1_TIPO)
        nValor -= nAbatim

        If MV_PAR09 == 1 //Acrescimos e Decrescimos
                nDescont := SE1->E1_SDDECRE
                nJuros	 := SE1->E1_SDACRES
                nValor += SE1->E1_SDACRES - SE1->E1_SDDECRE
        EndIf
    EndIf

Return .T.

/*/{Protheus.doc} Fa060Visu
Visualiza Titulo a partir da tela de Bordero

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function Fa060Visu()

    Local aArea 		:= GetArea()
    Local cSavFil		:= cFilAnt
    Private cCadastro 	:= OemToAnsi(STR0013)

    DbSelectArea("SE1")
    DbSetOrder(1)
    If DbSeek(TRB->E1_FILIAL + TRB->E1_PREFIXO + TRB->E1_NUM + TRB->E1_PARCELA + TRB->E1_TIPO)
        cFilAnt := TRB->E1_FILIAL

        AxVisual("SE1", SE1->(Recno()), 2)

        cFilAnt := cSavFil
    EndIf

    RestArea(aArea)
Return

/*/{Protheus.doc} F060AtuAgre
Atualiza data de vencto. dos registros agregados

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function F060AtuAgre()
    Local cChave
    Local dVencRea := SE1->E1_VENCREA
    Local aAreaSe1 := SE1->(GetArea())
    Local aArea    := GetArea()

    // Atualiza tambem os registros agregados
    If !(SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG)
        DbSetOrder(1)
        cChave := xFilial("SE1") + SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA)
        MsSeek(cChave)
        While SE1->(!EOF()) .And. SE1->(E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA) == cChave
            If SE1->E1_TIPO $ MVABATIM +"/"+MVIRABT+"/"+MVINABT   // AB-/IR-/IN-
                RecLock("SE1" ,.F.)
                SE1->E1_VENCREA := dVencRea
                MsUnlock()
            EndIf
            SE1->(DbSkip())
        EndDo
    EndIf

    SE1->(RestArea(aAreaSe1))
    RestArea(aArea)

Return Nil

/*/{Protheus.doc} MenuDef
Utilizacao de menu Funcional

@version    12
@author     Ana Paula N. Silva
@since      21/11/06

@param      Parametros do array a Rotina:
            1. Nome a aparecer no cabecalho
            2. Nome da Rotina associada
            3. Reservado
            4. Tipo de Transação a ser efetuada:
            		1 - Pesquisa e Posiciona em um Banco de Dados
               2 - Simplesmente Mostra os Campos
               3 - Inclui registros no Bancos de Dados
               4 - Altera o registro corrente
               5 - Remove o registro corrente do Banco de Dados
            5. Nivel de acesso
            6. Habilita Menu Funcional
@return     Array, Array com opcoes da rotina.
/*/
Static Function MenuDef()

    Local aRotina := {  { STR0001 , "AxPesqui"    , 0 , 1,,.F.},;	// "Pesquisar"
                        { STR0002 , "FA060Trans"  , 0 , 2},;		// "Transferir"
                        { STR0003 , "FA060Borde"  , 0 , 3},;		// "Bordero"
                        { STR0004 , "FA060Canc"   , 0 , 3},;		// "Cancelar"
                        { STR0062 , "FA060Legend" , 0 , 2,,.F.} }	//"Legenda"

Return(aRotina)

/*/{Protheus.doc} FiValDesc
Exibe mensagem após validar os dados para cobrança via bordero

@author pequim

@since 02/12/2013
@version 1.0
/*/
Function FiValDesc (nValCred,nValor)

    If nValCred < 0 .Or. nValCred > nValor
        MsgAlert(STR0082) //"Valor de desconto não pode ser maior que o valor do crédito!"
    EndIf

RETURN (nValCred > 0 .And. nValCred <= nValor)

/*/{Protheus.doc} FinA060T
Chamada semi-automatica utilizado pelo gestor financeiro

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function FinA060T(aParam)

    cRotinaExec := "FINA060"
    ReCreateBrow("SE1",FinWindow)
    FinA060(aParam[1] /*nPosRotina*/)
    ReCreateBrow("SE1",FinWindow)
    DbSelectArea("SE1")

    INCLUI := .F.
    ALTERA := .F.

Return .T.

/*/{Protheus.doc} F60VldUser
Funçao para que seja possivel a validaçao de usuario na tela de bordero

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function F60VldUser(cNumBor, cPort060,cAgen060,cConta060,cSituacao,dVencIni,dVencFim,nLimite,nMoeda,cContrato,dEmisDe,dEmisAte,cCliDe,cCliAte)

    Local lRet:= .T.
    Local lF060VlOk := ExistBlock("F060VLOK")

    If lF060VlOk
        lRet := ExecBlock("F060VLOK",.F.,.F.,{cNumBor, cPort060,cAgen060,cConta060,cSituacao,dVencIni,dVencFim,nLimite,nMoeda,cContrato,dEmisDe,dEmisAte,cCliDe,cCliAte})
    EndIf

Return lRet

/*/{Protheus.doc} fa060EBan
Realizar SELECT sobre SE1, apos o acionamento de fA060Bco, para
levantamento de tipos CHEQUES. Apresenta o resultado sob a forma
de MsSelect, permitindo apenas 1 selecao para a transferencia.

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function fa060EBan()

    //--- Retorno !!
    Local nRecor  := 0   // Manter essa inicializacao

    //--- Ambiente
    Local aOrigin := GetArea()
    Local aSX3    := SX3->(GetArea())

    //--- MsSelect
    Local oDlg60
    Local oMark

    //--- Genericas
    Local nX          := 1
    Local nOpc        := 1
    Local cQuery      := " "
    Local cArqTRB     := ""
    Local cTipCheques := " "
    Local cTipos      := MVPROVIS+"/"+MVRECANT+"/"+MV_CRNEG+"/"+MVENVBCOR
    Local aCampos     := {}
    Local aSupQry     := {}

    Local cT60Query := GetNextAlias()

    //--- MsSelect
    Private cMarca  := GetMark()
    Private lInvert := .F.
    Private nMarked := 0

    cTipos	:=	StrTran(cTipos,',','/')
    cTipos	:=	StrTran(cTipos,';','/')
    cTipos	:=	StrTran(cTipos,'|','/')
    cTipos	:=	StrTran(cTipos,'\','/')


    //Certifico de que o TRB esta fechado

    If Select(cT60Query) > 0
    (cT60Query)->(DbCloseArea())
    EndIf

    //Montagem do array aCampos, para o MsSelect, e um auxiliar para a criacao de TRB
    DbSelectArea("SX3")
    DbSetOrder(2)

    DbSeek("E1_OK")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_VALOR")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_BCOCHQ")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_AGECHQ")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_CTACHQ")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    If cPaisLoc == "ARG"
        DbSeek("E1_POSTAL")
        AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
        AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })
    EndIf

    DbSeek("E1_PORTADO")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_NUM")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_PREFIXO")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_PARCELA")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_TIPO")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_MOEDA")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_VLCRUZ")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_CLIENTE")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_LOJA")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    DbSeek("E1_VENCTO")
    AAdd(aCampos, { X3_CAMPO , "", AllTrim(X3Titulo()), SX3->X3_PICTURE })
    AAdd(aSupQry, { X3_CAMPO , X3_TIPO, X3_TAMANHO, X3_DECIMAL })

    AAdd(aSupQry, { "RECSE1", "N" ,14 ,0  })

    //--- Retorna estado original de SX3
    RestArea(aSX3)


    //Selecao dos registros de CHEQUES


    SE1->(DbSetOrder(7)) //E1_FILIAL+DTOS(E1_VENCREA)+E1_NOMCLI+E1_PREFIXO+E1_NUM+E1_PARCELA

    cQuery := "SELECT "

    For nX := 1	To Len(aSupQry) - 1
        cQuery += aSupQry[nX][1] + ","
    Next nX

    cQuery += " R_E_C_N_O_  RECNO "
    cQuery += " FROM " + RetSqlName("SE1")
    cQuery += " WHERE E1_FILIAL = '" + xFilial("SE1") + "'"

    cQuery += " AND D_E_L_E_T_ = ' ' AND ("

    cTipCheques := SubStr(MVCHEQUES, 1, 3)
    //--- Apenas Tipos Cheques interessam
    For nX := 1 TO Len(MVCHEQUES) Step 4

        cQuery += " E1_TIPO = '" + cTipCheques + "'"

        If nX + 2 <> Len(MVCHEQUES)
            cQuery += " OR "
            cTipCheques := SubStr(MVCHEQUES, nX + 4, 3)
        EndIf

    Next nX

    cQuery += ")"

    If !Empty(MVPROVIS) .Or. !Empty(MVRECANT) .Or. !Empty(MV_CRNEG) .Or. !Empty(MVENVBCOR)
        cQuery += "  AND E1_TIPO NOT IN " + FormatIn(cTipos, '/')
    EndIf

    cQuery += " AND E1_SALDO > 0 "


    //Requisitos de Entidades Bancarias - variaveis preenchidas em fa060Bco

    If Empty(cBcoChq)

    If cPaisLoc == "ARG" .And. !Empty(cPostal)

        cQuery += " AND E1_POSTAL = '" + cPostal + "'"

    EndIf

    Else

        cQuery += " AND E1_BCOCHQ = '" + cBcoChq + "'"
        cQuery += " AND E1_AGECHQ = '" + cAgeChq + "' "

    EndIf

    cQuery += " ORDER BY " + SQLORDER(SE1->(IndexKey()))


    //Geracao e Abertura de Temporario

    cQuery := ChangeQuery(cQuery)

    MsAguarde({ | | DbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cT60Query, .T., .T.) },STR0092,STR0093) //"Por favor aguarde"###"Seleccionando registros en el Servidor..."

    For nX := 1 TO Len(aSupQry) - 1

        If aSupQry[nX][2] != 'C'
        TCSetField(cT60Query , aSupQry[nX][1], aSupQry[nX][2], aSupQry[nX][3], aSupQry[nX][4])
        EndIf

    Next nX

    DbSelectArea(cT60Query)


    //Migra registros do resultado do Select para um TRB

    Processa({|| cArqTRB := a060BdTRB(aSupQry, cT60Query) })

    //--- Remove o resultado da QUERY
    DbSelectArea(cT60Query)
    DbCloseArea()


    //Precisa verificar o que resultou do processo

    DbSelectArea(cArqTRB)
    DbGoTop()

    If BOF() .And. EOF()

    HELP(" ",1,"NORECS")

    Else


        //Montagem da MSSELECT

        DEFINE MSDIALOG oDlg60 TITLE OemToAnsi(STR0094) From 9,0 TO 28,80   // "Cheques"

        oMark := MsSelect():New(cArqTRB, "E1_OK", "", aCampos, @lInvert, @cMarca, { 35, 01, 143, 315 })

        oMark:bMark := { || a060Seta(cMarca, lInverte) }
        oMark:oBrowse:lHasMark     := .T.
        oMark:oBrowse:lCanAllmark  := .F.

        ACTIVATE MSDIALOG oDlg60 ON INIT (EnchoiceBar(oDlg60, {|| nOpc := 1, If(a060Flag(), oDlg60:End(), nOpc := 0) }, {|| nOpc := 0, oDlg60:End() },,)) CENTERED

        If nOpc == 1

            DbSelectArea(cArqTRB)

            DbGoTop()

            While !EOF()

                If (cArqTRB)->E1_OK == cMarca
                    nOpc := 99
                    EXIT
                EndIf

                DbSkip()

            EndDo

            If nOpc == 99

                nRecor := (cArqTRB)->RECSE1

            EndIf

        EndIf

    EndIf


    //Delecao do arquivo Temporario

    DbSelectArea(cArqTRB)
    DbCloseArea()

    //Deleta tabela temporária do banco de dados (Criada na função a060BdTRB)
    If _oFINA0602 <> Nil
        _oFINA0602:Delete()
        _oFINA0602 := Nil
    EndIf


    //Restaura Ambiente

    RestArea(aOrigin)

    DbSelectArea("SE1")

Return(nRecor)

/*/{Protheus.doc} a060Flag
Valida toda a operacao de MsSelect, com base no conteudo
da variavel nMarked. Somente 1 titulo deve ser selecionado.

@author pequim

@since 02/12/2013
@version 1.0
/*/
Static Function a060Flag()

    Local lRet := (nMarked == 1)

    If !lRet

        Aviso(OemToAnsi(STR0081), OemToAnsi(STR0095) , {'Ok'})  // Atencao # "Selecione apenas 01 Cheque para completar a operação."

    EndIf

Return(lRet)

/*/{Protheus.doc} a060Seta
Funcao que incrementa ou decrementa a variavel nMarked,
a ser usada na validacao da MsSelect (somente 1 marcado).

@author pequim

@since 02/12/2013
@version 1.0
/*/
Static Function a060Seta(cMarca, lInverte)

    Local lRet := .T.
    Local lMarcado

    If (lMarcado := IsMark("E1_OK",cMarca,lInverte))

    nMarked ++

    Else

    nMarked --

    EndIf

Return(lRet)

/*/{Protheus.doc} a060BdTRB
A partir do resultado da QUERY, montar o TRB para apresentacao

@Param   aCampos = Lista de Campos do SELECT ; Alias resultante do Select
@Return  c60Alia = Nome do Alias do Arquivo Temporario, a ser usado no MsSelect

@author pequim

@since 02/12/2013
@version 1.0
/*/
Static Function a060BdTRB(aCampos, cFromQry)

    //--- Genericas
    Local nX        := 1
    Local nPosCampo := 1

    //--- Retorno da funcao
    Local c60Alia  := GetNextAlias()


    //Certifico de que o TRB esta fechado

    If Select(c60Alia) > 0
    (c60Alia)->(DbCloseArea())
    EndIf


    //Cria tabela temporária


    If _oFINA0602 <> Nil
        _oFINA0602:Delete()
        _oFINA0602 := Nil
    EndIf

    _oFINA0602 := FwTemporaryTable():New(c60Alia)
    _oFINA0602:SetFields(aCampos)
    _oFINA0602:AddIndex("1", {AllTrim(aCampos[1][1])})

    //Criação da tabela temporaria
    _oFINA0602:Create()

    DbSelectArea(c60Alia)
    DbSetOrder(0) //Manter ordem natural de inserção na tabela

    DbSelectArea(cFromQry)

    ProcRegua(Reccount())

    //Migra registros da QRY para TRB
    While !(cFromQry)->(EOF())

        DbSelectArea(c60Alia)

        RecLock(c60Alia, .T.)

            For nX := 2	To Len(aCampos)
                // Verifica a existencia do Campo do Select no TRB
                nPosCampo := (cFromQry)->(FieldPos(aCampos[nX][1]))

                If nPosCampo > 0
                    (c60Alia)->(FIELDPUT(FieldPos(aCampos[nX][1]),(cFromQry)->(FIELDGET(nPosCampo))))
                Else
                    (c60Alia)->RECSE1 := (cFromQry)->RECNO
                EndIf
            Next nX

        MsUnLock()

        DbSelectArea(cFromQry)
        IncProc(OemToAnsi(STR0096))   // "Preparando Arquivo Temporário ..."
        DbSkip()
    EndDo

    DbSelectArea(c60Alia)

Return(c60Alia)

/*/{Protheus.doc} fA060Bco
Seleciona Banco / Agencia / Conta / Cod. Postal

@Return  lRet = Logico, validando os parametros informados
@author pequim
@since 02/12/2013
@version 1.0
/*/
Function fA060Bco()

    //--- Retorno
    Local lRet := .F.

    //--- Ambiente
    Local aOrigin  := GetArea()

    //--- Genericas
    Local nEspLarg := 8
    Local nEspLin  := 5
    Local nOpca    := 0

    //--- Tela
    Local oDlg
    Local oPanel

    cBcoChq := Criavar("E1_BCOCHQ")
    cAgeChq := Criavar("E1_AGECHQ")
    cCtaChq := Criavar("E1_CTACHQ")

    If cPaisLoc == "ARG"
        cPostal := Criavar("E1_POSTAL")
    EndIf

    //Pergunte construido via Dialog

    DEFINE MSDIALOG oDlg FROM 143,145 TO 158,190 TITLE OemToAnsi(STR0097) //"Entidades Bancarias"

        oDlg:lMaximized := .F.
        oPanel := TPanel():New(00,00,'',oDlg,, .T., .T.,, ,00,00)
        oPanel:Align := CONTROL_ALIGN_ALLCLIENT

        //Metade Superior - Variaveis Relativas ao Banco de Deposito

        @ 000+nEspLin,003+nEspLarg TO 075+nEspLin,163+nEspLarg OF oPanel  PIXEL

        @ 011+nEspLin,010+nEspLarg SAY STR0098 SIZE 55, 7 OF oPanel PIXEL //"Banco Cheque:"

        @ 009+nEspLin,060+nEspLarg MSGET cBcoChq	F3 "FJNCON" Picture "@!" Valid VerFJN("cBcoChq") SIZE 17, 10 OF oPanel Hasbutton PIXEL

        @ 026+nEspLin,010+nEspLarg SAY STR0099 SIZE 55, 7 OF oPanel PIXEL //"Agencia Cheque:"

        @ 024+nEspLin,060+nEspLarg MSGET cAgeChq	Picture "@!" Valid VerFJN("cAgeChq") SIZE 32, 10 OF oPanel PIXEL

        @ 042+nEspLin,010+nEspLarg SAY STR0100 SIZE 55, 7 OF oPanel PIXEL //"Conta Cheque:"

        @ 040+nEspLin,060+nEspLarg MSGET cCtaChq	Picture PesqPict("SE8","E8_CONTA") SIZE 47, 10 OF oPanel PIXEL READONLY

        If cPaisLoc == "ARG"
            @ 058+nEspLin,010+nEspLarg SAY STR0101 SIZE 55, 7 OF oPanel PIXEL //"Codigo Postal:"

            @ 056+nEspLin,060+nEspLarg MSGET cPostal	Picture "9999" Valid VerFJN("cPostal") SIZE 47, 10 OF oPanel PIXEL
        EndIf

        DEFINE SBUTTON FROM 090, 100 TYPE 1 ENABLE ACTION (nOpca := 1 , oDlg:End()) OF oPanel
        DEFINE SBUTTON FROM 090, 130 TYPE 2 ENABLE ACTION oDlg:End() OF oPanel

    ACTIVATE MSDIALOG oDlg CENTERED

    If nOpca == 1
        //Critica dos paramentros - validando um Return True
        If !(Empty(cBcoChq) .And. Empty(cAgeChq)) .Or. !Empty(cPostal)

            lRet := .T.
        Else
            Aviso(OemToAnsi(STR0081) , OemToAnsi(STR0103) , {'Ok'})  // Atencao # "Nenhuma seleção foi efetuada."
        EndIf
    Else
        Aviso(OemToAnsi(STR0081) , OemToAnsi(STR0103) , {'Ok'})  // Atencao # "Nenhuma seleção foi efetuada."
    EndIf

    RestArea(aOrigin)

Return lRet

/*/{Protheus.doc} F060NotIN
Monta a expressão do NOT IN da query do bordero

@author pequim
@since 02/12/2013
@version 1.0
/*/
Static Function F060NotIN(lMarkAbt,lIntegra)

    Local cTipos := ""
    Default lIntegra := .F.

    If (cPaisLoc == "CHI")
        cTipos := 'RA /NCC/NDC/NF /FT /LTC'
    EndIf

    If !Empty(MVPROVIS) .Or. !Empty(MVRECANT) .Or. !Empty(MV_CRNEG) .Or. !Empty(MVENVBCOR)
        If !Empty(cTipos)
            cTipos += "/"
        EndIf

        cTipos += MVPROVIS+"/"+MVRECANT+"/"+MV_CRNEG+"/"+MVENVBCOR
    EndIf

    If !lMarkAbt
        If !Empty(cTipos)
            cTipos += "/"
        EndIf

        cTipos += MVABATIM+"/"+MVIRABT+"/"+MVCSABT+"/"+MVCFABT+"/"+MVPIABT
    EndIf

    cTipos := FINFormTp(cTipos)

Return cTipos

/*/{Protheus.doc} FINFormTp
Monta a expressão utilizada para IN ou NOT IN

@author pequim

@since 02/12/2013
@version 1.0
/*/
Function FINFormTp(cTipos)

    Default cTipos := ""
    cTipos	:=	StrTran(cTipos,',','/')
    cTipos	:=	StrTran(cTipos,';','/')
    cTipos	:=	StrTran(cTipos,'|','/')
    cTipos	:=	StrTran(cTipos,'\','/')

    cTipos := Formatin(cTipos,"/")

Return cTipos

/*/{Protheus.doc} F060GetDesc
Obtencao da descricao da situacao de cobranca

@author pequim
@since 02/12/2013
@version 1.0
/*/
Function F060GetDesc(cSituacao,cDescricao,cNatureza,oDescricao)

    Local aArea := GetArea()

    Default oDescricao := Nil

    DbSelectArea("FRV")
    If MsSeek(xFilial("FRV")+cSituacao)
        cDescricao 		:= FRV->FRV_DESCRI
        cNatureza		:= FRV->FRV_NATIOF
    EndIf

    If oDescricao != Nil
        oDescricao:Refresh()
    EndIf

    RestArea(aArea)

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±                                                                         ±±
±±            Funcoes retiradas do arquivo FINXFUN.PRX                     ±±
±±                                                                         ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*/{Protheus.doc} Fa060Nat
Verifica se a natureza foi cadastrada, se nao, cria.

@author     Pilar S. Albaladejo
@since      11/01/96
@version    1.0
@param      nTipo, numeric, tipo da natureza
@param      cNatureza, character, naturez
@return     Nil
/*/
Function Fa060Nat(nTipo,cNatureza)

    Local cAlias:= Alias()

    nTipo := IIf(nTipo==Nil,1,nTipo)
    Default cNatureza := "DESCONT   "

    DbSelectArea("SED")
    If !DbSeek(cFilial+cNatureza) .And. !Empty(cNatureza)
        RecLock("SED",.T.)
        Replace ED_FILIAL   With cFilial
    Replace ED_CODIGO   With cNatureza
        If nTipo == 1
            Replace ED_DESCRIC  With OemToAnsi(STR0111) // "NATUREZA TITULO DESCONTADO"
        Else
            Replace ED_DESCRIC  With OemToAnsi(STR0112) // "NAT ESTORNO TIT DESCONTADO"
        EndIf
        Replace ED_CALCIRF  With "N"
        Replace ED_CALCISS  With "N"
        Replace ED_PERCIRF  With 0
        Replace ED_CALCINS	With "N"
        Replace ED_CALCCOF	With "N"
        Replace ED_CALCCSL	With "N"
        Replace ED_CALCPIS	With "N"
        Replace ED_TIPO		With "2"
        MsUnlock()
    EndIf
    DbSelectArea(cAlias)
Return

/*/{Protheus.doc} F060VldF
Desconsidera fórmula se existir taxa de IOF ou Desconto

@author     TOTVS
@since      07/06/18
@version    1.0
@param      nTxIOF, numeric, taxa do IOF
@param      nTaxaDesc, numeric, taxa de desconto
@param      cFormula, character, formula
@return     logical, sempre verdadeiro
/*/
Static Function F060VldF(nTxIOF, nTaxaDesc, cFormula)
    If nVlrForm > 0
        cFormula := If((nTxIOF + nTaxaDesc) > 0, "   ", cFormula)
        If Empty(cFormula)
            nVlrForm := 0
        EndIf
    EndIf
Return .T.

/*/{Protheus.doc} F60FindInd
Retorna o titlos dos campos do indice aChave

@param aChave = Chave do Indice
@return cTitulo = Titulo da Chave do Indice
@author Igor Fricks
@since 04/11/19
@version 1.0
/*/
Static Function F60FindInd(aChave As Array) As Character
    Local i	As Numeric
    Local cTitulo As Character
    Local cTempTit As Character
    Local cNencTit As Character
    Local nNencTit As Numeric

    Default aChave  := {}

    i			:= 0
    cTitulo		:= ""
    cTempTit	:= ""
    cNencTit  	:= ""
    nNencTit  	:= 0

    For i := 1 to Len(aChave)
        cTempTit := FwX3Titulo(aChave[i])
        If !Empty(cTempTit)
            cTitulo += IIf(Empty(cTitulo),""," + ") + AllTrim(cTempTit)
        Else
            cNencTit += IIf(Empty(cNencTit),"",", ") + AllTrim(aChave[i])
            nNencTit++
        EndIf
    Next

    If nNencTit == 1
        Help(" ",1,"F060CHC",, STR0137+cNencTit+STR0138,1,0) //O campo "cNencTit" passado pelo retorno do ponto de entrada não foi encontrado no dicionário de dados, consequentemente o ponto de entrada não será processado.
        cTitulo := ""
    ElseIf nNencTit > 1
        Help(" ",1,"F060CHF",, STR0139+cNencTit+STR0140,1,0) //Os campos "cNencTit" passados pelo retorno do ponto de entrada não foram encontrados no dicionário de dados, consequentemente não irão compor a chave de pesquisa.
        cTitulo := ""
    EndIf

Return cTitulo

/*/{Protheus.doc} F60VldTecf
Avaliar se a carteira é uma carteira do tipo TechFin / Supplier Mais.

@param cSituacao = Situação de cobrança a ser avaliada.
@return lRet = Retorno logico informando se é ou não uma carteira TechFin
@author Fernando Navarro
@since 26/05/2020
@version 1.0
/*/
Static Function F60VldTecf(cSituacao) As Logical

    Local cCartTechF As Character
    Local lRet       As Logical
    Local nTamSx3    As Numeric

    nTamSx3 := TamSX3("E1_SITUACA")[1]
    lRet := .F.
    // Carteira TechFin (antecipação)
    cCartTechF := PadR(SuperGetMV("MV_CARTECF",, ""), nTamSx3)
    // Carteira TechFin (devolução)
    cCartTechF += "/" + PadR(SuperGetMV("MV_DEVTECF",, ""), nTamSx3)
    // Carteira Supplier Mais
    cCartTechF += "/" + PadR(SuperGetMV("MV_SUPCART",, ""), nTamSx3)

    If !Empty(cSituacao) .And. cSituacao $ cCartTechF
        lRet := .T.
    EndIf

Return lRet

/*/{Protheus.doc} F060CtbOff()
Função para validar se o fonte esta atualizado para garantir o funcionamento da contabilização off-line das transferências.

@version    12.1.23/12.1.25/12.1.27
@author     Rafael Riego
@since      12/06/2020
/*/
Function F060CtbOff()
Return .T.

//------------------------------------------------------------------------------------------------------
/*{Protheus.doc} F60VldPix
Valida titulo PIX x Situacao se sao compativeis
@return: se o titulo pode ou não ser transferido para a carteira selecionada
@author Marcelo Iuspa

@since 21/10/2020
@version 1.0
*/
//------------------------------------------------------------------------------------------------------

Static Function F60VldPix(cSituacao As Character, lVldSitPix As Logical) As Logical
    Local lRet As Logical

    Default cSituacao  := ""
	Default lVldSitPix := .F.

	If _lTitTemPIX == Nil
		_lTitTemPIX := FindFunction("TitTemPIX")
	Endif

    lRet := .T.

	If ! _lTitTemPIX
		Return(lRet)
	Endif

	If FN022SITCB(cSituacao)[11]
        Help("", 1, "SITCOBPIX",,STR0157, 1,,,,,,, {STR0158})
		lRet := .F.
	Endif

	If lVldSitPix .Or. (! lRet)
		Return(lRet)
	Endif

    If TitTemPIX()// TITULO PIX NÃO P0DE SER TRANSFERIDO PARA UMA SIT. SEM BANCO
		If !FN022SITCB(cSituacao)[2]
	        Help("", 1, "TITINPIX",,STR0153, 1,,,,,,, {STR0154}) // "Help -> Título em carteira PIX" / "Solução -> Usar uma situação de cobrança definida como Banco=Sim"
    	    lRet := .F.
		Endif
        If lRet .and. (FN022SITCB(cSituacao)[3] .or.FN022SITCB(cSituacao)[4]) //não permite transferncia para cobrança descontada e protesto
	        Help("", 1, "TITINPIX",,STR0153, 1,,,,,,, {STR0159}) // "Help -> Título em carteira PIX" / "Solução -> "Cancelar a cobrança PIX do título""
    	    lRet := .F.
        EndIf

	ElseIf FN022SITCB(cSituacao)[11]
        Help("", 1, "TITINPIX",,STR0155, 1,,,,,,, {STR0156}) // "Help -> Título PIX = Não" / "Solução -> Não poderá usar situação de cobrança definida como PIX=Sim"
        lRet := .F.

    EndIf
Return(lRet)

/*/{Protheus.doc} BorApiVld
    Validação para habilitar o checkbox para registro online de boletos
    @type  Static Function
    @author renato.ito
    @since 14/04/2021
    @version 12.1.33
    @param cPort060, Character, banco
    @param cAgen060, Character, agencia
    @param cConta060, Character, conta
    @param lWhenApi, Logical, variável pra habilitar o checkbox
    @param lBolApi, Logical, variável pra marcar o checkbox
    @param cBcoAgCnt, Character, controle do último banco testado para não acionar ao passar pelo campo
    @param cSubCta060, Character, Sub Conta
    @param cEspec060, Character, Espécie do Boleto
    @param cBcoOfi060, Character, Código Banco Febraban
    @return Logical, true
/*/
Static Function BorApiVld(cPort060 As Character, cAgen060 As Character, cConta060 As Character, lWhenApi As Logical, lBolApi As Logical, cBcoAgCnt As Character, cSubCta060 As Character, cEspec060 As Character, cBcoOfi060 As Character) As Logical
    Default lConta := .F.
    If _lBCOApi
        If cBcoAgCnt <> (cPort060 + cAgen060 + cConta060)
            cBcoAgCnt := cPort060 + cAgen060 + cConta060
            lBolApi := lWhenApi := F713VldBco(FwXfilial("SA6"), cPort060, cAgen060, cConta060, @cBcoOfi060, @_lVlBcoApi)
            // zerando variáveis
            If (!lBolApi .AND. Type("oSayF77") == "O")
                cSubCta060       := Criavar("EA_SUBCTA" , .F.)
                cEspec060        := Criavar("EA_ESPECIE", .F.)
                oSayF77:cCaption := Criavar("F77_DESCRI", .F.)
            EndIf
        EndIf
    EndIf
Return .T.

/*/{Protheus.doc} SubCApiVld
    Validação da Sub Conta

    @type  Static Function
    @author alison.kaique
    @since 11/05/2021
    @version 12.1.33

    @param cPort060  , character, Código do Portador
    @param cAgen060  , character, Número da Agência
    @param cConta060 , character, Número da Conta Bancária
    @param cSubCta060, character, Sub Conta

    @return lRet, logical, controle de processamento
/*/
Static Function SubCApiVld(cPort060 As Character, cAgen060 As Character, cConta060 As Character, cSubCta060 As Character)
    Local lRet As Logical

    lRet := NaoVazio(cSubCta060) .AND. ExistCpo("SEE", cPort060 + cAgen060 + cConta060 + cSubCta060)

    If lRet .And. FindFunction("VldBanB001")
        lRet := VldBanB001(cPort060, cAgen060, cConta060, cSubCta060)
    EndIf

Return lRet

/*/{Protheus.doc} EspeApiVld
    Validação da Espécie do Boleto Registrado

    @type  Static Function
    @author alison.kaique
    @since 11/05/2021
    @version 12.1.33

    @param cBcoOfi060, character, Código Banco Febraban
    @param cEspec060 , character, Espécie do Boleto

    @return lRet, logical, controle de processamento
/*/
Static Function EspeApiVld(cBcoOfi060 As Character, cEspec060 As Character) As Logical
    Local lRet As Logical

    // valida se as variáveis existem
    lRet := Type("oSayF77") == "O"

    // valida se registro existe
    If (lRet .AND. NaoVazio(cEspec060) .AND. ExistCpo("F77", cBcoOfi060 + cEspec060))
        // atualiza descrição
        oSayF77:cCaption := AllTrim(Posicione('F77', 01, FWxFilial('F77') + cBcoOfi060 + cEspec060, 'F77_DESCRI'))
    Else
        lRet := .F.
    EndIf
Return lRet

/*/{Protheus.doc} BolApiVld
    Validação do CheckBox de Registro de Boleto

    @type  Static Function
    @author alison.kaique
    @since 11/05/2021
    @version 12.1.33

    @param lBolApi   , logical  , Registra o Boleto?
    @param cSubCta060, character, SubConta
    @param cEspec060 , character, Espécie do Boleto

    @return lRet, logical, controle de processamento
/*/
Static Function BolApiVld(lBolApi As Logical, cSubCta060 As Character, cEspec060 As Character) As Logical
    Local lRet As Logical

    lRet := .T.

    // zerando variáveis
    If (!lBolApi .AND. Type("oSayF77") == "O")
        cSubCta060       := Criavar("EA_SUBCTA" , .F.)
        cEspec060        := Criavar("EA_ESPECIE", .F.)
        oSayF77:cCaption := Criavar("F77_DESCRI", .F.)
    EndIf
Return lRet

/*/{Protheus.doc} F60ExistV2
Realiza a pesquisa de baixa descontada (V2) na tabela FK1.

@version    12.1.27
@author     Rafael Riego
@since      08/06/2021
@param      cIdFK7, character, id do título na tabela FK7
@return     logical, verdadeiro caso encontre o registro V2 que não possui estorno
/*/
Static Function F60ExistV2(cIdFK7 As Character) As Logical

    Local cAliasFK1     As Character
    Local cQueryFK1     As Character
    Local lTemBxDesc    As Logical

    lTemBxDesc := .F.

    cQueryFK1 := "SELECT FK1.R_E_C_N_O_ FK1_RECNO "
    cQueryFK1 += "FROM " + RetSQLName("FK1") + " FK1 "
    cQueryFK1 += "WHERE FK1.D_E_L_E_T_ = ' ' "
    cQueryFK1 += "AND FK1.FK1_FILIAL = '"   + FwXFilial("FK1")  + "' "
    cQueryFK1 += "AND FK1.FK1_IDDOC = '"    + cIdFK7            + "' "
    cQueryFK1 += "AND FK1.FK1_TPDOC = 'V2' "
    cQueryFK1 += "AND NOT EXISTS ( "
    cQueryFK1 += "SELECT FK1EST.FK1_IDDOC FROM " + RetSQLName("FK1") + " FK1EST "
    cQueryFK1 += "WHERE FK1EST.FK1_FILIAL = FK1.FK1_FILIAL "
    cQueryFK1 += "AND FK1EST.FK1_IDDOC = FK1.FK1_IDDOC "
    cQueryFK1 += "AND FK1EST.FK1_SEQ = FK1.FK1_SEQ "
    cQueryFK1 += "AND FK1EST.FK1_DOC = FK1.FK1_DOC "
    cQueryFK1 += "AND FK1EST.FK1_TPDOC = 'ES' "
    cQueryFK1 += "AND FK1EST.D_E_L_E_T_ = ' ') "

    cQueryFK1 := ChangeQuery(cQueryFK1)

    cAliasFK1 := GetNextAlias()
    MPSysOpenQuery(cQueryFK1, cAliasFK1)

    If (cAliasFK1)->(!(EoF()))
        lTemBxDesc := .T.
    EndIf

    (cAliasFK1)->(DbCloseArea())

Return lTemBxDesc

/*/{Protheus.doc} Fa060TrDes
Realiza a pesquisa do movimento TR na tabela FK5.

@version    12.1.27
@author     Rafael Riego
@since      08/06/2021
@param      cIdFK7, character, id do título na tabela FK7
@param      cFilOri, character, filial de origem do título
@return     character, alias contendo o último movimento TR do título
/*/
Static Function Fa060TrDes(cIdFK7 As Character, cFilOri As Character) As Character

    Local cAliasTMP As Character
    Local cFilFK5   As Character
    Local cAliasFK5 As Character
    Local cQuery    As Character

    cAliasFK5   := RetSQLName("FK5")
    cAliasTMP   := GetNextAlias()
    cFilFK5     := FwXFilial("FK5")

    cQuery := "SELECT FK5.FK5_IDMOV "
    cQuery += "FROM " + cAliasFK5 + " FK5 "
    cQuery += "WHERE FK5.FK5_FILIAL = '"    + cFilFK5   + "' "
    cQuery += "AND FK5.FK5_IDDOC = '"       + cIdFK7    + "' "
    cQuery += "AND FK5.FK5_TPDOC = '"       + "TR"      + "' "
    cQuery += "AND FK5.FK5_RECPAG = '"      + "R"       + "' "
    cQuery += "AND FK5.FK5_FILORI = '"      + cFilOri   + "' "
    cQuery += "AND FK5.D_E_L_E_T_ = ' ' "
    cQuery += "AND NOT EXISTS ("
    cQuery += "SELECT FK5EST.R_E_C_N_O_ "
    cQuery += "FROM  " + cAliasFK5 + " FK5EST "
    cQuery += "WHERE FK5EST.FK5_FILIAL = '" + cFilFK5   + "' "
    cQuery += "AND FK5EST.FK5_IDDOC = '"    + cIdFK7    + "' "
    cQuery += "AND FK5EST.FK5_TPDOC = '"    + "E2"      + "' "
    cQuery += "AND FK5EST.FK5_RECPAG = '"   + "P"       + "' "
    cQuery += "AND FK5EST.FK5_FILORI = '"   + cFilOri   + "' "
    cQuery += "AND FK5EST.D_E_L_E_T_ = ' ' "
    cQuery += "AND FK5EST.FK5_SEQ = FK5.FK5_SEQ) "

    cQuery := ChangeQuery(cQuery)

    MPSysOpenQuery(cQuery, cAliasTMP)

Return cAliasTMP

/*/{Protheus.doc} Fa060IOF
Realiza a pesquisa do movimento IOF na tabela FK6.

@version    12.1.27
@author     Rafael Riego
@since      08/06/2021
@param      cIdMov, character, id do movimento da tabela FK5
@return     numeric, valor do IOF para o movimento TR
/*/
Static Function Fa060IOF(cIdMov As Character) As Numeric

    Local cAliasTMP As Character
    Local cQuery    As Character
    Local nValIOF   As Numeric

    nValIOF     := 0
    cAliasTMP   := GetNextAlias()

    cQuery := "SELECT FK6_VALMOV IOF "
    cQuery += "FROM " + RetSQLName("FK6") + " FK6 "
    cQuery += "WHERE FK6_FILIAL = '"    + FwXFilial("FK6")  + "' "
    cQuery += "AND FK6_IDORIG = '"      + cIdMov            + "' "
    cQuery += "AND FK6_TPDOC = '"       + "I2"              + "' "
    cQuery += "AND FK6_RECPAG = '"      + "P"               + "' "
    cQuery += "AND FK6.D_E_L_E_T_ = ' ' "

    cQuery := ChangeQuery(cQuery)

    MPSysOpenQuery(cQuery, cAliasTMP)

    If (cAliasTMP)->(!(EoF()))
        nValIOF := (cAliasTMP)->IOF
    EndIf

    (cAliasTMP)->(DbCloseArea())

Return nValIOF

/*/{Protheus.doc} F060VldNat
Realiza a pesquisa do movimento IOF na tabela FK6.

@version    12.1.27
@author     Rafael Riego
@since      08/06/2021
@param      cNaturez, character, código da natureza a ser validada
@param      cSituacao, character, situação para qual o título está sendo transferido
@return     logical, verdadeiro caso seja válida
/*/
Function F060VldNat(cNaturez As Character, cSituacao As Character) As Logical

    Local lNatValid As Logical

    Default cNaturez    := ""

    lNatValid := .T.

    //Só valida caso seja carteira descontada
    If FN022SITCB(cSituacao)[3]
        If Empty(cNaturez)
            Help("", 1, "NATBRANCO",, STR0166, 1,,,,,,, {}) //"Natureza não pode estar em branco."
            lNatValid := .F.
        ElseIf SED->(DbSeek(FwXFilial("SED") + cNaturez))
            If SED->ED_MSBLQL == "1"
                lNatValid := .F.
                Help("", 1, "NATINVALID",, STR0167, 1,,,,,,, {STR0168}) //"Natureza bloqueada" "Informe uma Natureza válida ou revise o conteúdo do parâmetro MV_NATDESC"
            EndIf
        Else
            lNatValid := .F.
            Help("", 1, "NATNAOENC",, STR0169, 1,,,,,,, {}) // "Natureza não encontrada."
        EndIf
    EndIf

Return lNatValid

//----------------------------------------
/*/{Protheus.doc} TotalTitBo
Busca a quantidade de títulos que compõe
o borderô

@author Sivaldo Oliveira
@since 29/10/2021
@version P12

@Param cFilialBord, Char, Filial do borderô
@Param cNroBordero, Char, Número do borderô
@Return nQuant, Numeric, Quantidade de títulos no borderô
/*/
//----------------------------------------
Static Function TotalTitBo(cFilialBord As Char, cNroBordero As Char) As Numeric
    Local cQuery As Char
    Local nQuant As Numeric

    //Inicializa variáveis.
    cQuery := ""
    nQuant := 0

    cQuery := "SELECT COUNT(R_E_C_N_O_) NLINHAS FROM " + RetSqlName("SEA") + " SEA "
    cQuery += "WHERE SEA.EA_FILIAL = '" + cFilialBord + "'
    cQuery += "AND SEA.EA_NUMBOR = '" + cNroBordero + "' "
    cQuery += "AND SEA.EA_CART = 'R' AND SEA.D_E_L_E_T_ = ' ' "
    cQuery := ChangeQuery(cQuery)
    nQuant := MpSysExecScalar(cQuery, "NLINHAS")
Return nQuant

//----------------------------------------
/*/{Protheus.doc} ExluirFI2
Exclui as instruções de cobrança
que ainda não foram geradas para o bordero.

@author Sivaldo Oliveira
@since 29/10/2021
@version P12

@Param cFilialBord, Char, Filial do borderô
@Param cNroBordero, Char, Número do borderô
/*/
//----------------------------------------
Static Function ExluirFI2(cFilialBord As Char, cNroBordero As Char)
    Local cChaveFI2  As Char
    Local aAreaAtual As Array

    //Inicializa variáveis
    cChaveFI2  := (cFilialBord + "1" + cNroBordero)
    aAreaAtual := GetArea()

    DbSelectArea("FI2")
    FI2->(DbSetOrder(1))

    If FI2->(DbSeek(cChaveFI2))
        cChaveFI2 := AllTrim(cChaveFI2)

        While FI2->(!Eof()) .And. FI2->(FI2_FILIAL+FI2_CARTEI+FI2_NUMBOR) == cChaveFI2
            If FI2->FI2_GERADO == "2"
                RecLock("FI2")
                FI2->(DbDelete())
                FI2->(MsUnlock())
            EndIf
            FI2->(DbSkip())
        EndDo
    EndIf

    RestArea(aAreaAtual)
    FwFreeArray(aAreaAtual)
Return Nil

//----------------------------------------
/*/{Protheus.doc} F060MovBan
Busca os registros de movimentações bancárias
Trf e BD das operações de transferência
e borderô para a carteira descontada.

@author Sivaldo Oliveira
@since 07/12/2021
@version P12

@Param cIdDocFK7, Char, Identificador do registro
de inclusão do título na tabela auxiliar FK7
@Param cCodBanco, Char, Código do banco
@Param cNroAgenc, Char, Número da Agência bancária
@Param cNroConta, Char, Número da conta bancária
/*/
//----------------------------------------
Static Function F060MovBan(cIdDocFK7 As Char, cCodBanco As Char, cNroAgenc, cNroConta) As Char
    Local cQuery  As Char
    Local cTblTmp As Char
    Local cTblFK5 As Char

    Default cIdDocFK7 := ""
    Default cCodBanco := ""
    Default cNroAgenc := ""
    Default cNroConta := ""

    //Inicializa variáveis.
    cQuery  := ""
    cTblTmp := ""
    cTblFK5 := ""

    If !Empty(cIdDocFK7) .And. !Empty(cCodBanco) .And. !Empty(cNroAgenc) .And. !Empty(cNroConta)
        cTblFK5 := RetSqlName("FK5")

        If _oMovTrfDB == Nil
            cQuery := "SELECT FK5.FK5_MOEDA, FK5.FK5_VALOR, FK5.FK5_VLMOE2, FK5.FK5_TXMOED FROM ? FK5 WHERE "
            cQuery += "FK5.FK5_FILIAL = ? AND FK5.FK5_BANCO = ? AND FK5.FK5_AGENCI = ? AND FK5.FK5_CONTA = ? "
            cQuery += "AND FK5.FK5_IDDOC = ? AND FK5.FK5_TPDOC IN ('TR', 'BD') AND FK5.D_E_L_E_T_ = ' ' "
            cQuery += "AND NOT EXISTS (SELECT FK5ES.FK5_FILIAL FROM ? FK5ES WHERE "
            cQuery += "FK5.FK5_FILIAL = FK5ES.FK5_FILIAL AND FK5.FK5_BANCO = FK5ES.FK5_BANCO "
            cQuery += "AND FK5.FK5_AGENCI = FK5ES.FK5_AGENCI AND FK5.FK5_CONTA = FK5ES.FK5_CONTA "
            cQuery += "AND FK5.FK5_SEQ = FK5ES.FK5_SEQ AND FK5ES.FK5_IDDOC = ? "
            cQuery += "AND FK5ES.FK5_TPDOC = 'E2' AND FK5ES.D_E_L_E_T_ = ' ')"
            cQuery := ChangeQuery(cQuery)
            _oMovTrfDB := FWPreparedStatement():New(cQuery)
        EndIf

        _oMovTrfDB:SetNumeric(1, cTblFK5)
        _oMovTrfDB:SetString(2,  xFilial("FK5"))
        _oMovTrfDB:SetString(3,  cCodBanco)
        _oMovTrfDB:SetString(4,  cNroAgenc)
        _oMovTrfDB:SetString(5,  cNroConta)
        _oMovTrfDB:SetString(6,  cIdDocFK7)
        _oMovTrfDB:SetNumeric(7, cTblFK5)
        _oMovTrfDB:SetString(8,  cIdDocFK7)
        cQuery  := _oMovTrfDB:GetFixQuery()
        cTblTmp := MpSysOpenQuery(cQuery)

        If (cTblTmp)->(Eof())
            (cTblTmp)->(DbCloseArea())
            cTblTmp := ""
        EndIf
    EndIf
Return cTblTmp
//----------------------------------------
/*/{Protheus.doc} F060SeqBx
Busca a sequencia de baixa do título 
baixado via FINA070

@author Pâmela Bernardo
@since 07/06/2022
@version P12

@Param cIdDocFK7, Char, Identificador do registro
de inclusão do título na tabela auxiliar FK7
/*/
//----------------------------------------
Static Function F060SeqBx(cIdDocFK7 As Char) As Char
    Local cSeq As Char
    Local cQuery As Char

    Default cIdDocFK7 := ""

    cSeq := ""
    cQuery := ""

    If _oSeqFK1 == NIL

        cQuery := "SELECT MAX(FK1_SEQ) MAXSEQ "
        cQuery += "FROM " + RetSqlName("FK1") + " FK1 "
        cQuery += "WHERE FK1_IDDOC = ? "
        cQuery += "AND FK1.D_E_L_E_T_ = ' ' "
        _oSeqFK1 := FWPreparedStatement():New(cQuery)   

    EndIf

    _oSeqFK1:SetString(1,  cIdDocFK7)

    cQuery := _oSeqFK1:GetFixQuery()

    cSeq := MpSysExecScalar(cQuery,"MAXSEQ")

Return cSeq
