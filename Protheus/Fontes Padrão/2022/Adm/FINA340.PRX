#INCLUDE "FINA340.CH" 
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWCOMMAND.CH" 
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "FWLIBVERSION.CH"

#DEFINE TX_VAL    6
#DEFINE TX_REC    8
#DEFINE IMP_VALCP 6
#DEFINE IMP_COUNT 7

STATIC lFWCodFil  	:= .T.
STATIC __lBlind	  	:= IsBlind()
STATIC __nTxMoedP 	:= 0
Static __nTxTiBrw 	:= 0
STATIC __nTxCont  	:= 0
STATIC __nRecPart 	:= 0
STATIC __lPaBruto 	:= .F.
STATIC __lBxVlLiq 	:= .F.
STATIC __lPaPrime 	:= .F.
STATIC __lProvImp 	:= .F.
STATIC __lPccBaix 	:= .F.
STATIC __lAglPcc  	:= .F.
STATIC __lIrfBaix 	:= .F.
STATIC __lIssBaix 	:= .F.
STATIC __lBxAuImp 	:= .F.
STATIC __lStartPA 	:= .F.
STATIC __lNoTxMov 	:= .F.
STATIC __cOrder   	:= ""
STATIC __lFinVDoc 	:= .F.
STATIC __nTotSel  	:= 0
STATIC __nTotal   	:= 0
STATIC __oImpRet  	:= Nil
STATIC __oMovPA   	:= Nil
Static __oMovCnb  	:= Nil
STATIC __lCmTxCon 	:= .T.
STATIC __lCalcCM  	:= .T.
STATIC __lF340CMP 	:= .F.
STATIC __lOk      	:= .F.
Static __oFina340 	:= Nil
Static __nCasDec  	:= 2
Static __aImpos   	:= {}
Static __nBase    	:= 0
Static __aDIC     	:= {}
Static __aDdsDic  	:= {}
Static __nVlrAbt  	:= 0   
Static __nTamForn 	:= 6
Static __nTamLoja 	:= 2
Static __nTamNatu 	:= 10
Static __nTamParc 	:= 2
Static __nTamTipo 	:= 3
Static __cE5_KEY  	:= " "
Static __E5_MOVCX 	:= " "
Static __ObjParc  	:= Nil
Static __DelDic   	:= Nil
Static __VerDic	  	:= Nil
Static __MaxSeq	  	:= Nil
Static __TmpNF	  	:= Nil
Static __ValDic	  	:= Nil
Static __OIMPPA   	:= Nil
Static __aRetAuto 	:= {}
Static __lGetParA 	:= .F.
Static __lFA340ORD	:= .F.
Static __nMvPar13 	:= 0 
Static __nMvPar14 	:= 0
Static __nSldCmp  	:= 0
Static __o340Filho	:= NIL
Static __oEstIPA  	:= Nil
Static __lBtrISS  	:= .F.
Static __nQtdeDIC 	:= 0
Static __nQtdePA  	:= 0
Static __oDicBx   	:= Nil
Static __oCanDic  	:= Nil
Static __oMovNF 	:= Nil
Static __lTxPrCon	:= .F.
STATIC __nTxDesAl	:= 0
STATIC __lCmpM103  	:= .F.

// Motor de retenção 
Static __lTemMR 	:= .F.
Static __lMetric	:= .F.
Static __cFunBkp    := ""
Static __cFunMet	:= ""
Static __aParCTB	:= NIL
Static __oRatIRF 	:= NIL		// Rateio IR Progressivo
Static __lFinXRatIR := NIL
Static __lBxDtFin	:= NIL
Static __aRecAPI	:= {}

//------------------------------------
/*/{Protheus.doc}Fina340
Compensação entre títulos e adiantamentos

@author Valter G. Nogueira Jr
@since  18/03/94
@version 8
/*/
//------------------------------------
Function Fina340(nPosArotina, lAutomato, aRetAuto, aParCTB, aRecAPI, cPedFIE)
	
	Local nVlMoeda	:= 0
	Local nSavInd   := IndexOrd()
	LOCAL nSavRec	:= RecNO()
	Local nA        := 0
	Local cMoedaTx  := ""
	Local aRetSX5	:= {}
	Local cMoedaNome := ""

	//Variáveis privates
	Private aCores      := {{'E2_SALDO = E2_VALOR .AND. E2_ACRESC = E2_SDACRES', 'ENABLE'}, {'E2_SALDO = 0', 'DISABLE'}, {'E2_SALDO <> 0', 'BR_AZUL'}}
	Private aRotina     := MenuDef()
	Private cCodDiario	:= ""
	Private CODFORCP  	:= ""
	Private LOJFORCP 	:= ""
	If !lAutomato .Or. Type("aFil340") == "U"
		Private aFil340		:= {}
	EndIf
	Private aTitulos	:= {}
	Private aTitINSS	:= {}
	Private aRecNo		:= {}
	Private aRegSE2		:= {}
	Private aBaixaSE5	:= {}
	Private cPrefixo	:= ""
	Private cNum		:= ""
	Private cTipoTit 	:= ""
	Private cFornece 	:= ""
	Private cLoja 		:= ""
	Private cSaldo		:= ""
	Private nValor		:= 0
	Private cParcela 	:= ""
	Private nMoeda340	:= 0
	Private dBaixa		:= CTOD("  /  /    ")
	Private dEmiss		:= CTOD("  /  /    ")
	Private nValTot		:= 0
	Private cBanco		:= ""
	Private lDebito		:= .F.
	Private nValCorCM	:= 0
	Private lPrImPA 	:= .F.
	Private cTitPai		:= ""
	Private cTitPaiINS	:= ""
	Private lF340SE5    := .F.
	Private aRecSe5     := {}
	Private nHdlPrv  	:= 0
	Private aFlagCTB 	:= {}
	Private lUsaFlag 	:= SuperGetMV("MV_CTBFLAG", .T., .F.)
	Private VALOR 	 	:= 0
	Private VALOR2   	:= 0//Valor de Acréscimo
	Private VALOR3	 	:= 0//Valor de Decréscimo
	Private VALOR4	 	:= 0//Variação da correção monetária
	Private VLRINSTR 	:= 0//Armazena o valor compensado
	Private nSldReal 	:= 0//armazena o valor compensado na moeda correspondente do título
	Private ABATIMENTO	:= 0//Valores de abatimentos
	Private REGVALOR	:= 0//Recno do(s) registro(s) selecionado(s) para compensação.
	Private STRLCTPAD	:= 0//Chave do título principal+número do documento
	Private VALOR7 	 	:= 0//Utilizada para Contabilizacao
	Private VALOR8 	 	:= 0//Utilizada para Contabilizacao
	Private VALORMF  	:= 0//Utilizada para Contabilizacao
	Private cCadastro   := STR0025
	Private cLote       := ""
	Private lFina340    := ExistBlock("FA340FILT")
	Private cCpoNum     := ""
	Private nTamTit     := TamSX3("E2_PREFIXO")[1]+TamSX3("E2_NUM")[1]+TamSX3("E2_PARCELA")[1]
	Private nTamTip     := TamSX3("E2_TIPO")[1]
	Private aTxMoedas	:=	{}	
	Private NPIS340     := 0
	Private NCOF340     := 0
	Private NCSL340     := 0
	Private NIRF340     := 0
	Private NISS340     := 0
	Private lQryTxCon	:= .F.

	//variaveis utilizadas na FcalcIRBx
	Private nVlRetIrf	:= 0
	Private nBaseIrpf	:= 0
	//variaveis utilizadas no Processo Russia 
	PRIVATE lFilMark   as Logical 	//Filter mark for function FA340Filte
	PRIVATE cTitFilt   as Character
	PRIVATE cPayType   as Character
	PRIVATE cSortField as Character
	PRIVATE cSortType  as Character
	PRIVATE nSel	   as Numeric
	PRIVATE nRadio	   as Numeric

	//***Reestruturacao SE5***
	Private nPisCalc	:= 0
	Private nCofCalc	:= 0
	Private nCslCalc	:= 0
	Private nIrfCalc	:= 0
	Private nIssCalc	:= 0
	Private nPisBaseR 	:= 0
	Private nCofBaseR	:= 0
	Private nCslBaseR 	:= 0
	Private nIrfBaseR 	:= 0
	Private nIssBaseR 	:= 0
	Private nPisBaseC 	:= 0
	Private nCofBaseC 	:= 0
	Private nCslBaseC 	:= 0
	Private nIrfBaseC 	:= 0
	Private nIssBaseC 	:= 0
	//***Reestruturacao SE5***

	__lTemMR	:= (FindFunction("FTemMotor") .and. FTemMotor())

	__lMetric	:= FwLibVersion() >= "20210517"

	SetKey (VK_F12, {|a,b| AcessaPerg("AFI340",.T.)})
	Pergunte("AFI340",.F.)
	LoteCont("FIN")
	
	DEFAULT nPosArotina := 0
	DEFAULT lAutomato   := .F.
	DEFAULT aRetAuto	:= {}
	DEFAULT aParCTB		:= {}
	DEFAULT aRecAPI		:= {}
	DEFAULT cPedFIE     := ""

	__aParCTB := aParCTB

	If cPaisLoc == "RUS"
		cTitFilt  := ''
		cPayType  := ''
		cSortField:= ''
		nSel	  := 0
		nRadio    := 1	
		lFilMark  := .F.
	Endif 
	//verificação se existe o tipo DIC
	aRetSX5 := FWGetSX5( "05", "DIC   " ,"pt-br")
	
	FCadMotBx("CMP", Padr("COMPENSA", 10), "ANSN") //Inclusao motivo de baixa
	
	If !cPaisLoc $ "EUA|RUS" .And. nPosArotina <= 3 .And. Empty(aRetSX5)
		HELP(' ', 1, "TIPO_DIC" ,Nil, STR0114, 2,0,,,,,, {STR0115 + "http://tdn.totvs.com/pages/viewpage.action?pageId=450138002"})
		Return Nil
	Else
		Aadd(aTxMoedas, {"", 1, PesqPict("SM2","M2_MOEDA1"), 1})
		
		For nA := 2	To MoedFin()
			cMoedaTx :=	Str(nA, IIf(nA <= 9, 1, 2))
			cMoedaNome := SuperGetMv("MV_MOEDA" + cMoedaTx, .F., "")
			
			If !Empty(cMoedaNome)
				nVlMoeda := RecMoeda(dDataBase, nA)
				Aadd(aTxMoedas,{cMoedaNome, nVlMoeda, PesqPict("SM2","M2_MOEDA" + cMoedaTx), nVlMoeda })
			Else
				Exit
			Endif
		Next
		
		If nPosArotina > 0
			dbSelectArea("SE2")
			bBlock := &( "{ |a,b,c,d,e,f| " + aRotina[ nPosArotina,2 ] + "(a,b,c,d,e,f) }" )
			Eval( bBlock, Alias(), (Alias())->(Recno()), nPosArotina, lAutomato, aRetAuto, cPedFIE)
		Else
			If ExistBlock("F340BROW")
				ExecBlock("F340BROW",.f.,.f.)
			Endif
			
			dbSelectArea("SE2")
			dbSetOrder(1)
			dbGoTop()
			mBrowse( 6, 1,22,75,"SE2",,,,,,Fa340Leg())
		Endif
	EndIf	

	FwFreeArray(__aParCTB)

	If __lCmpM103
		aRecAPI := aClone(__aRecAPI)
		FwFreeArray(__aRecAPI)	
		__aRecAPI := {}	
	EndIf

	//Recupera a Integridade dos dados
	SE2->(DbClearFilter())
	dbSelectArea("SE2")
	dbSetOrder(nSavInd)
	dbGoTo(nSavRec)
Return

//-----------------------------------------------
/*/{Protheus.doc} fA340Comp
Função de marcação dos títulos a serem compensados

@Author Valter G. Nogueira Jr.
@since	 18/04/94
/*/
//-----------------------------------------------
Function fA340Comp(cAlias, cCampo, nOpcE, lAutomato, aRetAuto, cPedFIE)
	Local lPanelFin 	:= IsPanelFin()
	Local cVarQ 		:= "  "
	LOCAL lPadrao
	LOCAL nOpca			:= 0
	LOCAL nTotal		:= 0
	LOCAL lContabil		:= .F.
	LOCAL nTotalCmp     := 0
	LOCAL cAdiantamento := ""
	LOCAL cArquivo      := ""
	LOCAL cPadrao		:= "597"
	LOCAL nOrdem		:= SE2->(IndexOrd())
	LOCAL lF340_PA 		:= ExistBlock("F340_PA")
	Local lAglutina		:= Iif(mv_par08==1,.T.,.F.)
	Local lDigita  		:= iif(mv_par09==1,.T.,.F.)
	LOCAL oTitulo
	LOCAL oDlg
	LOCAL oOk   		:= LoadBitmap( GetResources(), "LBOK" )
	LOCAL oNo   		:= LoadBitmap( GetResources(), "LBNO" )
	Local nSldReal 		:= 0
	LOCAL lF340NAT 		:= ExistBlock("F340NAT")
	LOCAL oGet01
	LOCAL oValorCp
	Local nTotAbat		:= 0
	Local nTit 			:= 0
	Local nAcresc 		:= 0
	Local nDecres 		:= 0
	Local nX          	:= 0
	Local lVerLibTit 	:= .T.
	Local lPCCBaixa 	:= SuperGetMv("MV_BX10925",.T.,"2") == "1"
	Local lIRPFBaixa 	:= .F.
	Local aSize 		:= {}
	Local oPanel
	Local oPanel2
	Local lPaBruto		:= GetNewPar("MV_PABRUTO","2") == "1"
	Local aButtonTxt 	:= {}
	Local aDiario 		:= {}
	Local lVldDtFin  	:= .T.
	Local lChequeLib 	:= .T.
	Local cCondic
	Local aTitAux   	:= {}
	Local cChvSE2		:=	SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
	Local lRInssPa 		:= .F.
	Local oChkFltMed	:= NIL													// Objeto para check box para habilitar Filtra Medicao
	Local lCheck    	:= .F.													// Variavel do objeto oChkFltMed
	Local oNumCont  	:= NIL													// Objeto para MSGet para receber o numero do contrato
	Local cNumCont  	:= Space(TamSX3("E2_MDCONTR")[1])						// Numero do contrato quando o checkbox oChkFltMed estiver marcado
	Local cSeqImp		:= ""
	Local lNoTitComp	:= .F.
	Local lInssBx 		:=	SuperGetMv("MV_INSBXCP",.F.,"2") == "1"   // INSS Baixa
	Local nRegFK2 		:= 0
	Local cChqLib 		:= ""
	Local lLibChq 		:= SuperGetMv("MV_LIBCHEQ", .F., "S") == "N" 
	Local nVlrMov 		:= 0
	Local lBordImp  	:= .F.
	Local nTotImp   	:= 0
	Local dDtMov    	:= dDatabase
	Local aAutAux   	:= {}
	Local lCompensa 	:= .F.
	Local aImpFK3FK4    := {}
	Local lF340DTFIN 	:= ExistBlock("F340DTFIN")	
	Local lDic			:= .T.
	Local nTotNF		:= 0
	Local nTotPA		:= 0
	Local aDicCMP		:= {}
	Local nAcresPart	:= 0
	Local nDecrePart	:= 0
	Local _aRecno		:= {}
	Local nCnt			:= 1
	Local cNatImpBlq	:= ""
	Local lValBlqNat 	:= SED->(FieldPos("ED_MSBLQL")) > 0	
	// Projeto FKs
	Local aTitCalc		:= {}
	Local aAreaSE2		:= {}

	Local nInicio		:= 0
	Local nFim			:= 0
	Local nGravados		:= 0
	Local nRegistros	:= 0
	Local nMoedSel		:= 0 
	Local cHelp			:= ""
	Local cLink			:= ""
	Local cTitle		:= ""
	Local cUrl			:= ""
	Local cFilE2		:= ""
	Local lAdtPed   	:= .F.

	NPIS340 	:= 0
	NCOF340		:= 0
	NCSL340 	:= 0
	NIRF340 	:= 0
	NISS340 	:= 0
	If !lAutomato
		aFil340	:= {}
	Endif
	aTitulos	:= {}
	aTitINSS	:= {}
	aRecNo		:= {}
	aRegSE2		:= {}
	aBaixaSE5	:= {}
	cPrefixo	:= SE2->E2_PREFIXO
	cNum		:= SE2->E2_NUM
	cTipoTit 	:= SE2->E2_TIPO
	cFornece 	:= SE2->E2_FORNECE
	cLoja 		:= SE2->E2_LOJA
	cSaldo		:= CriaVar("E2_SALDO")
	nValor		:= CriaVar("E2_SALDO")
	cParcela 	:= SE2->E2_PARCELA
	nMoeda340	:= SE2->E2_MOEDA
	dBaixa		:= dDataBase
	dEmiss		:= SE2->E2_EMIS1
	nValTot		:= 0
	cBanco		:= Criavar("E2_PORTADO")
	lDebito		:= .F.
	nValCorCM	:= 0
	lPrImPA 	:= !lPaBruto .And. SuperGetMv("MV_PAPRIME",.T.,"2") == "1"
	cTitPai		:= SE2->E2_TITPAI
	cTitPaiINS	:= CriaVar("E2_TITPAI")
	lF340SE5    := Existblock("F340SE5")
	aRecSe5     := {}
	VALOR		:= 0 	// Utilizada para Contabilizacao
	VALOR2		:= 0	//Valor de Acréscimo
	VALOR3		:= 0	//Valor de Decréscimo
	VALOR4		:= 0	//Variação da correção monetária
	VALOR7		:= 0 	// Utilizada para Contabilizacao
	VALOR8		:= 0 	// Utilizada para Contabilizacao
	VLRINSTR	:= 0	//Armazena o valor compensado
	nSldReal	:= 0	//armazena o valor compensado na moeda correspondente do título
	ABATIMENTO  := 0	//Valores de abatimentos
	REGVALOR	:= 0	//Recno do(s) registro(s) selecionado(s) para compensação.
	STRLCTPAD	:= 0	//Chave do título principal+número do documento
	VALORMF		:= 0 	// Utilizada para Contabilizacao
	__aDdsDic	:= {}
	lQryTxCon	:= .F.

	Default lAutomato := .F.
	Default aRetAuto  := {}
	Default cPedFIE   := ""

	If __lOk .And. SE2->E2_SALDO == 0
		__lOk := .F.
		Return __lOk
	EndIf

	__cFunBkp   := FunName()
	__cFunMet	:= Iif(AllTrim(__cFunBkp)=='RPC',"RPCFINA340",__cFunBkp)

	If __lMetric
		SetFunName(__cFunMet)
		// Metrica de controle de acessos 
		FwCustomMetrics():setSumMetric(Alltrim(ProcName()), "financeiro-protheus_qtd-por-acesso_total", 1)
		SetFunName(__cFunBkp)
	Endif

	f340LRatIR(.T.) // Limpa objeto __oRatIRF IR Progressivo

	DbSelectArea("SED")
	SED->(DbSetOrder(1))
	Dbselectarea("SA2")
	SA2->(Dbsetorder(1))
	
	If (!SED->(Dbseek(xFilial("SED")+SE2->E2_NATUREZ)) .Or. !SA2->(Dbseek(xFilial("SA2")+SE2->(E2_FORNECE+E2_LOJA))))
		Help(" ", 1, "NATFORN",,STR0081, 2, 0,,,,,, {STR0082+cFilAnt})
		Return .T.
	EndIf 
	
	If lPrImPA .And. cPaisLoc == "BRA"
		lRInssPa := SED->ED_RINSSPA == '1'
	EndIf
	
	If cPaisLoc == "BRA"
		__lIrfBaix := SA2->A2_CALCIRF == "2" .AND. (Posicione("SED",1,xFilial("SED",SE2->E2_FILORIG) + SE2->(E2_NATUREZ),"ED_CALCIRF") == "S")
		lIRPFBaixa := __lIrfBaix
	Endif

	If !LockCmpCP()
		Return
	Endif
	
	//Não permitir compensaao de titulos de abatimento
	If cTipoTit $ MVABATIM
		Help(" ",1,"NOCMPABT")
		Return (.T.)
	Endif
	
	If cTipoTit $ MVPAGANT+"|"+MV_CPNEG+"|INA|DIC"
		lDebito := .T.
	Endif
	
	IF lFina340
		SX3->(dbSetOrder(2))
		If	SX3->(dbSeek("E2_NUM"))
			If X3USO(SX3->X3_USADO)
				cCpoNum := SE2->E2_NUM
			EndIf
		EndIf
	Endif
	
	IF (ExistBlock("F340LIBT"))
		lVerLibTit :=ExecBlock("F340LIBT",.f.,.f.)
	Endif
	
	// Não permite compensaÆo de titulos nao liberados
	If lVerLibTit
		If !( SE2->E2_TIPO $ MVPAGANT+"/INA" ) .And. ;
				(GetMv("MV_CTLIPAG").and.Empty(SE2->E2_DATALIB).and.(SE2->E2_SALDO+SE2->E2_SDACRES-SE2->E2_SDDECRE)>GetMV("MV_VLMINPG"))
			Help(" " , 1 , "FA080NAOLIB") // NÆo permite baixar t¡tulos nÆo liberados
			Return .F.
		Endif
	EndIf
	
	//Verifica a apresentação dos documentos
	IF __lFinVDoc
		If !CN062ValDocs("07",.F.)
			Return .F.
		EndIf
	EndIf
	
	//Caso tenha integracao SIGAPFS (MV_JURXFIN = .T.), valida as regras para manipulação do título
	If !Fa340Juri(.F., .T.)
		Return .F.
	EndIf
	
	//Não permite compensaÆo de impostos possam ser acessados
	If GetMv("MV_IMPADT") != "S" .and. mv_par10 == 2
		Help(" ",1,"NOADTIMP")
		DeleteObject(oOk)
		DeleteObject(oNo)
		Return (.T.)
	Endif
	
	//Não permite que t¡tulos j  baixados possam ser acessados
	If SE2->E2_SALDO == 0
		Help(" ",1,"FA330JABAI")
		DeleteObject(oOk)
		DeleteObject(oNo)
		Return (.T.)
	Endif
	
	If lF340DTFIN
		lVldDtFin := ExecBlock("F340DTFIN",.F.,.F.)
	EndIf
	
	//Verifica se data do movimento no  menor que data limite de movimentacao no financeiro
	If lVldDtFin .and. !DtMovFin(,,"1")
		Return
	Endif
	
	//Caso esteja ligado o controle de solicitacao de notas de credito e exista alguma ³
	//pendencia para este titulo
	If cPaisLoc	<> "BRA"
		SCU->(DbSetOrder(2))
	Endif
	If cPaisloc <> "BRA" .And. GetMv('MV_SOLNCP') .And. SE2->E2_TIPO == MVNOTAFIS ;
			.And. SCU->(MsSeek(xFilial()+SE2->E2_FORNECE+SE2->E2_LOJA+SE2->E2_NUM+SE2->E2_PREFIXO)).And. Empty(SCU->CU_NCRED)
		HELP(" ",1,"SOLNCPAB")
		Return
	Endif
	
	//Titulos de adiantamento nÆo sÆo compensaveis como titulo principal. No
	//caso doa tipos TX, quando for ISS (gerado via C.Receber) s¢ compenso c/
	//adiantamentos ao municipio. Quando gerados via C.Pagar, apenas com titu
	//los de adiantamento de impostos (TXA)
	If lPrimPa
		If (((cTipoTit $ MVTAXA .and. Alltrim(cFornece) == GetMv("MV_MUNIC")) .Or. !(cTipoTit $ MVTAXA+"/"+MVINSS+"/INA")) .and. mv_par10 == 2) .or. ;
				(cTipoTit $ MVTAXA+"/"+MVINSS+"/INA" .and. mv_par10 == 1)
			lNoTitComp := .T.
		EndIf
	Else
		//Para permitir compensação de titulos TX FunRural
		If (((cTipoTit $ MVTAXA .and. Alltrim(cFornece) == GetMv("MV_MUNIC")) .Or. !(cTipoTit $ MVTAXA)).and. mv_par10 == 2)
			lNoTitComp := .T.
		EndIf
	Endif
	
	If lNoTitComp .Or. (mv_par10 != 2 .And. SE2->E2_TIPO $ MVTAXA+MVTXA+MVINSS+MVISS+MVABATIM+"INA")
		Help(" ",1,"NOTITCOMP")
		FA340IntD("SE2", 1, oOk, oNo)
		Return (.T.)
	EndIf
	
	//A Data de Emissao(EMIS1) do Titulo posicionado não podera ser maior que a DataBase do Sistema
	If dEmiss > dDatabase
		Help(" ",1,"NOTITSEL",,"" ,1,0,,,,,,{STR0131})
		FA340IntD("SE2", 1, oOk, oNo)
		Return (.T.)
	Endif
	
	//Valida título de moneda
	If cPaisLoc == "EUA"
		If Empty(GetMv("MV_MOEDA" + Alltrim(Str(Val(GetMv("MV_MCUSTO"))))))
			Help(" ", 1, "TITMONEDA",,STR0106, 2, 0,,,,,, {StrTran( STR0107, '#MOEDA', "MV_MOEDA" + Alltrim(Str(Val(GetMv("MV_MCUSTO")))) )}) //"¡Título de moneda no configurado!" //"Verifique que se tenga configurado el título para la moneda (#MOEDA) configurada en el parámetro: MV_MCUSTO"
			Return .T.
		EndIf
	EndIf	
	
	//Titulos provisorios nao sao compensaveis como titulo principal
	If cTipoTit $ MVPROVIS+"|PRE"
		Help(" ",1,"NOCMPPROV",,STR0028+chr(13)+STR0029,1,0 )
		FA340IntD("SE2", 1, oOk, oNo)
		Return (.T.)
	Endif
	
	If mv_par12 == 2 .and. !Empty(SE2->E2_NUMBOR)
		Help(" ",1,"NOCMPTRF")
		FA340IntD("SE2", 1, oOk, oNo)
		Return (.T.)
	Endif
	
	If mv_par12 == 2 .And. !Empty(SE2->E2_NUMBOR) .And. !(SE2->E2_TIPO $ MVPAGANT)
		If (lPCCBaixa .and. !(Empty(SE2->E2_PIS) .AND. Empty(SE2->E2_CSLL).and. Empty(SE2->E2_COFINS))) .Or. (lIRPFBaixa .And. !Empty(SE2->E2_IRRF) ) .Or. (lInssBx .And. !Empty(SE2->E2_INSS) )
			Help(" ",1,"NOCMPIMP")
			FA340IntD("SE2", 1, oOk, oNo)
			Return (.T.)
		Endif
	Endif
	
	//Verifica se o titulo esta bloqueado - Gestao de Contratos
	If !Empty(SE2->(FieldPos("E2_MSBLQL"))) .And. SE2->E2_MSBLQL == "1"
		Help(" ",1,"SE2BLOQ")
		Return .F.
	EndIf
	
	//AAF - Titulos originados no SIGAEFF não devem ser alterados
	If "SIGAEFF" $ SE2->E2_ORIGEM
		Help(" ",1,"FAORIEFF")
		Return .F.
	EndIf

   //Verifica qual título PA originado pelo módulo SIGAEIC pode sofrer compensação.
   //Títulos PA da invoice/ Puchase Order só podem ser compensados pelo SIGAEIC.
   //Títulos PA ao despachante (numerário) devem ser compensados e estornados pelo SIGAFIN.*/
   lAlteraTit := .F.
   
   If AllTrim(SE2->E2_ORIGEM) == "SIGAEIC" .And. EasyOrigem(AllTrim(SE2->E2_ORIGEM)) .And. !lAlteraTit
      Return .F.
   EndIf

	// Se for um titulo de adiantamento, verifica se existem cheques nao liberados, pois se existir, nao permitir a baixa
	// Isso ocorre quando o parametro MV_LIBCHEQ esta igual a N, foi gerado um cheque para o adiantamento e este
	// ainda nao foi liberado
	If Alltrim(cTipoTit) $ MVPAGANT+"/"+"INA"
		If mv_par01 = 1 .And. mv_par02 = 1 
			//Considera Loja e Fornecedor Original.
			cCondic := 'SE2->E2_FORNECE == SEF->EF_FORNECE .And. SE2->E2_LOJA == SEF->EF_LOJA .And. SEF->EF_LIBER == "N"'
		Elseif (mv_par01 = 2 .And. mv_par02 = 1) .Or. (mv_par02 = 2)
			//Não considera Loja e considera o Fornecedor Original ou então apenas considera Outros Fornecedores.
			cCondic := 'SE2->E2_FORNECE == SEF->EF_FORNECE .And. SEF->EF_LIBER == "N"'
		Else
			cCondic := 'SEF->EF_LIBER == "N"'
		Endif
		
		SEF->(DbSetOrder(3))
		If SEF->(DbSeek(xFilial("SEF", SE2->E2_FILORIG)+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+Pad(E2_NUMBCO,Len(SEF->EF_NUM))))) 
			cChqLib := If(lLibChq, SEF->EF_LIBER, cChqLib)  
		EndIf
		
		While SEF->(EF_PREFIXO+EF_TITULO+EF_PARCELA+EF_TIPO+EF_NUM)==SE2->( E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+Pad(E2_NUMBCO,Len(SEF->EF_NUM)) ) .and. !SEF->(Eof())
			//Verifica se ha cheques nao liberados de acordo com a condicao.
			If &cCondic
				lChequeLib := .F. // Cheque nao esta liberado
				Exit
			Endif
			
			SEF->(dbSkip())
		EndDo

		//Caso o PA não tenha movimentação, a compensacao nao sera executada.
		If Alltrim(cTipoTit) $ MVPAGANT .and. !F340MovPA(Nil, "SE2",.F.)[1]
			Help(" ",1,"NOMOVADT",,STR0092,1,0)  //"Não é possível compensar pagamento antecipado sem movimentação bancária."
			FA340IntD("SE2", 1, oOk, oNo)
			Return (.T.)
		Endif
		
		//Caso haja algum cheque nao liberado, a compensacao nao sera executada. Validação apenas para Brasil
		If cPaisLoc == "BRA"
			If !lChequeLib .Or. (cChqLib != "S" .And. !F340MovPA(Nil, "SE2", .T.)[1])
				Help(" ",1,"NOCHQADT")
				FA340IntD("SE2", 1, oOk, oNo)
				Return (.T.)
			Endif
		EndIf
		
		//ANGOLA|BRASIL - Nao permitir compensar titulos de adiantamento relacionado a pedido
		If cPaisLoc $ "ANG|BRA|MEX" .and. !__lCmpM103
			lAdtPed   := .F.
			If SE2->E2_FILORIG != cFilAnt
				cFilE2	:= cFilAnt
				cFilAnt	:= SE2->E2_FILORIG
			EndIf
			If FinAdtSld("P", SE2->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO))
				Help(" ",1,"ADTXPED",,STR0047,1,0)
				FA340IntD("SE2", 1, oOk, oNo)
				lAdtPed   := .T.
			EndIf
			If !Empty(cFilE2)
				cFilAnt	:= cFilE2
				cFilE2	:= ""
			EndIf
			If lAdtPed
				Return (.T.)
			Endif
		EndIf
	EndIf
	
	// Validação - SIAFI
	If FinTemDH()
		Return .T.
	Endif
	
	If ExistBlock("F340Comp")
		if !ExecBlock("F340Comp",.F.,.F.)
			Return .F.
		Endif	
	Endif

	//Inicializa a gravacao dos lancamentos do SIGAPCO
	PcoIniLan("000017")
	
	//Inicializa as variáveis estáticas
	F340Static()
	
	//Quando a compensação de adiantamento automático está submetida ao MV_IMPCOM = .T.
	If __lCmpM103 .and. Len(__aParCTB) > 0
        mv_par11  := If (__aParCTB[01], 1, 2)		//Contabiliza
        lAglutina := __aParCTB[02]					//Aglutina
        lDigita	  := __aParCTB[03]					//Digita
	Endif
	
	If SE2->E2_OK == "LP"
		__nSldCmp := F340SldTx("SE2")
		If __nSldCmp == 0
			Help(" ",1,"TXJACOMP",,STR0117,1,0)//"Titulo de imposto ja compensado com saldo disponivel para pagamento do tributo"
			Return
		Endif	
	Endif

	If (__lPaBruto .And. (__lBxVlLiq .Or. __lPaPrime)) .Or. (!__lPaBruto .And. (!__lBxVlLiq .Or. !__lPaPrime))
		cHelp := IIf(__lPaBruto, "FA340PABRU", "FA340PALIQ")
		Help(" ", 1, cHelp,,STR0079, 2, 0,,,,,, {STR0080})
		FA340IntD("SE2", 1, oOk, oNo)
		Return .T.
	EndIf

	While .T.

		//Metricas
		nInicio		:= 0
		nFim		:= 0
		nGravados	:= 0
		nRegistros	:= 0

		If cPaisLoc == "ARG" .And. !Empty(nMoeda340)
			__nTxMoedP := RecMoeda(dDatabase, SE2->E2_MOEDA)
		Else
			If SE2->E2_MOEDA > 1
				If __nTxMoedP == 0
					__nTxMoedP := RecMoeda(If(SE2->E2_TIPO $ MVPAGANT, F340MovPA(Nil, "SE2", .T.)[2], dDatabase), nMoeda340)
				EndIf
				If !__lTxPrCon // Taxa do Processo, nao inicio o array para ter referencia da alteracao da taxa posteriormente
					aTxMoedas[nMoeda340, 2] := __nTxMoedP
				Else
					For nCnt := 2 To Len(aTxMoedas)
						aTxMoedas[nCnt, 2] := 0
						aTxMoedas[nCnt, 4] := 0
					Next nCnt
				EndIf
			EndIf
		EndIf
		
		__lNoTxMov := Empty(__nTxMoedP) 
		nSaldo := (SE2->(E2_SALDO+E2_SDACRES)-SE2->E2_SDDECRE)
		
		If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
			__nVlrAbt := SomaAbat(SE2->E2_PREFIXO, SE2->E2_NUM, SE2->E2_PARCELA, "P", SE2->E2_MOEDA,,SE2->E2_FORNECE) 
			nSaldo    -= __nVlrAbt 
		EndIf
		
		cSaldo := TRANSFORM(If(__nSldCmp > 0,__nSldCmp,nSaldo), "@E 9999,999,999.99")
		If cPaisLoc == "RUS"
			cSe2Key		:= SE2->E2_FILIAL + "|" + SE2->E2_PREFIXO + "|" + SE2->E2_NUM + "|" + SE2->E2_PARCELA + "|" + SE2->E2_TIPO + "|" + SE2->E2_FORNECE + "|" + SE2->E2_LOJA
			nValor := RU06XFUN06(cSe2Key) //Calculates Open Balance from F5M RU06XFUN06_GetOpenBalance
		EndIf		
		aSize := MSADVSIZE()
		
		If !lAutomato
			__lFA340ORD := ExistBlock("FA340ORD")
			
			If lPanelFin
				dbSelectArea(cAlias)
				oPanelDados := FinWindow:GetVisPanel()
				oPanelDados:FreeChildren()
				aDim := DLGinPANEL(oPanelDados)
				DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0,0 To 0,0 PIXEL STYLE nOR( WS_VISIBLE, WS_POPUP )
				nEspLarg := ((DlgWidthPanel(oPanelDados)/2) - 225) /2
				nEspLin  := 20
			Else
				nEspLarg := 0
				nEspLin  := 2
				DEFINE MSDIALOG oDlg FROM 88,31 TO 275,Iif(cPaisLoc != "RUS",545,550) TITLE STR0005 PIXEL  //Compensação Contas a Pagar
			Endif
			
			oDlg:lMaximized := .F.
			oPanel := TPanel():New(0,0,'',oDlg,, .T., .T.,, ,20,20)
			oPanel:Align := CONTROL_ALIGN_ALLCLIENT
			
			@ 000+nEspLin, 002+nEspLarg TO 030+nEspLin, Iif(cPaisLoc != "RUS",255,258)+nEspLarg OF oPanel	PIXEL
			@ 031+nEspLin, 002+nEspLarg TO 062+nEspLin, Iif(cPaisLoc != "RUS",255,258)+nEspLarg OF oPanel	PIXEL
			
			@ 15+nEspLin, 006+nEspLarg MSGET cPrefixo							SIZE 19, 10 OF oPanel PIXEL
			@ 15+nEspLin, 032+nEspLarg MSGET cNum 	 VALID !EMPTY(cNum)	SIZE 70, 10 OF oPanel PIXEL
			@ 15+nEspLin, 105+nEspLarg MSGET cParcela							SIZE 20, 10 OF oPanel PIXEL
			
			If lDebito
				@ 15+nEspLin, 129+nEspLarg MSGET cTipoTit Picture "@!"  Valid !Empty(cTipoTit) .AND.;
					cTipoTit $ MVPAGANT+"|"+MV_CPNEG+"|INA|DIC" .AND. Fa340Tit1() SIZE 12, 10 OF oPanel PIXEL
			else
				@ 15+nEspLin, 129+nEspLarg MSGET cTipoTit Picture "@!"  Valid !Empty(cTipoTit) .AND.;
					!cTipoTit $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC" .AND. Fa340Tit1() SIZE 12, 10 OF oPanel PIXEL
			Endif
			
			@ 15+nEspLin, 155+nEspLarg	MSGET cFornece Valid fa340For(cFornece) SIZE 70, 10 OF oPanel PIXEL
			@ 15+nEspLin, 226+nEspLarg	MSGET cLoja Valid Fa340For(cFornece,cLoja) SIZE 16, 10 OF oPanel PIXEL
			
			@ 47+nEspLin, 006+nEspLarg	MSGET nSaldo WHEN .F. Picture "@E 9999,999,999.99"	SIZE 60, 10 OF oPanel PIXEL HASBUTTON
			@ 47+nEspLin, 070+nEspLarg	MSGET nMoeda340  WHEN .F.	SIZE 18, 10 OF oPanel PIXEL HASBUTTON
			@ 47+nEspLin, 095+nEspLarg	MSGET oValorCp VAR nValor  Picture	"@E 9999,999,999.99" Valid nValor >= 0 .AND. Iif(cPaisLoc != 'RUS',nValor <= nSaldo,RU06XFUN69(nValor,nSaldo,STR0103)) SIZE 52, 10 OF oPanel PIXEL HASBUTTON
			oValorCp:cReadvar:= "NLIM450"
			
			@ 47+nEspLin, 152+nEspLarg	MSGET dBaixa   Valid dBaixa >= SE2->E2_EMISSAO .and. ;
				if(lVldDtFin,DtMovFin(dBaixa,,"1"),.T.) SIZE 50, 10 OF oPanel PIXEL HASBUTTON

			If cPaisLoc != "RUS"
				@ 47+nEspLin, 200+nEspLarg MSGET oNumCont VAR cNumCont SIZE 50, 10 Picture "@!" OF oPanel PIXEL
				oNumCont:lVisible := .F.
			Else
				@ 47+nEspLin, 192+nEspLarg MSGET oNumCont VAR cNumCont SIZE 50, 10 Picture "@!" OF oPanel PIXEL
				oNumCont:lVisible := .T.
				oNumCont:lActive  := .F.
			EndIf
			
			@ 07+nEspLin, 006+nEspLarg SAY STR0006  SIZE 21, 7 OF oPanel PIXEL  //"Prefixo"
			@ 07+nEspLin, 032+nEspLarg SAY STR0007  SIZE 22, 7 OF oPanel PIXEL  //"Número"
			@ 06+nEspLin, 105+nEspLarg SAY STR0008  SIZE 23, 7 OF oPanel PIXEL  //"Parcela"
			@ 06+nEspLin, 129+nEspLarg SAY STR0009  SIZE 14, 7 OF oPanel PIXEL  //"Tipo"
			@ 06+nEspLin, 155+nEspLarg SAY STR0010  SIZE 34, 7 OF oPanel PIXEL  //"Fornecedor"
			@ 06+nEspLin, 226+nEspLarg SAY STR0011  SIZE Iif(cPaisLoc != "RUS",14,21), 7 OF oPanel PIXEL  //"Loja"
			
			@ 38+nEspLin, 006+nEspLarg SAY STR0012  SIZE 34, 7 OF oPanel PIXEL  //"Saldo"
			@ 38+nEspLin, 070+nEspLarg SAY STR0013  SIZE 21, 7 OF oPanel PIXEL  //"Moeda"
			@ 38+nEspLin, 095+nEspLarg SAY STR0014  SIZE 55, 7 OF oPanel PIXEL  //"Valor a compensar"
			@ 38+nEspLin, 152+nEspLarg SAY STR0015  SIZE 45, 7 OF oPanel PIXEL  //"Data da Baixa"
			If cPaisLoc != "RUS"
				@ 37+nEspLin, 200+nEspLarg CHECKBOX oChkFltMed VAR lCheck PROMPT OemToAnsi(STR0063) SIZE 80,7 PIXEL OF oPanel ON CLICK(oNumCont:lVisible := lCheck, IIf(!lCheck, cNumCont := Space(TamSX3("E2_MDCONTR")[1]), .T.) ,oNumCont:Refresh())  //#"Filtra Medicao"
			Else
				@ 37+nEspLin, 192+nEspLarg CHECKBOX oChkFltMed VAR lCheck PROMPT OemToAnsi(STR0063) SIZE 80,7 PIXEL OF oPanel ON CLICK(oNumCont:lActive := lCheck, IIf(!lCheck, cNumCont := Space(TamSX3("E2_MDCONTR")[1]), cNumCont := SE2->E2_F5QCODE) ,oNumCont:Refresh())  //#"Filtra Medicao"
			EndIf
		EndIf
		
		If UsaSeqCor()
			SX3->(DbSetorder(2))
			SX3->(DbSeek("E5_DIACTB"))
			cCodDiario  := Criavar("E5_DIACTB",.T.)
			cTitDiar :=  AllTrim(X3TITULO())
			SX3->(DbSetorder(1))
			If !lAutomato
				@ 038+nEspLin, 192+nEspLarg SAY cTitDiar SIZE 45, 7 OF oPanel PIXEL
				@ 047+nEspLin, 192+nEspLarg MSGET cCodDiario F3 "CVL" SIZE 20, 10 OF oPanel Valid VldCodSeq( cCodDiario ) When CtbWdia() PIXEL HASBUTTON
			EndIf	
		Endif
		
		If lPanelFin
			aButtonTxt := {}
			AADD(aButtonTxt,{STR0026,STR0026, {||Fa340SetMo()}})
			oDlg:Move(aDim[1],aDim[2],aDim[4]-aDim[2], aDim[3]-aDim[1])
			
			ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg, {||nOpca:=1,If(fa340Tudok(oDlg),oDLg:End(),nOpca:=2)}, {||nOpca:=0,oDlg:End()},,aButtonTxt)
			FinVisual(cAlias,FinWindow,(cAlias)->(Recno()),.T.)
		Else
			If ExistBlock("F340TAXA")
				ExecBlock("F340TAXA",.F.,.F.,{aTxMoedas})
			Endif
			
			If !lAutomato
				@ 68, 05 BUTTON OemToAnsi(STR0026) SIZE 50,18 ACTION (Iif(nMoeda340 > 1, Fa340SetMo(), Nil)) OF oPanel PIXEL //Taxas Moedas
				DEFINE SBUTTON FROM 68, 190 TYPE 1 ENABLE ACTION (nOpca:=1,If(fa340Tudok(oDlg),oDLg:End(),nOpca:=2)) OF oPanel
				DEFINE SBUTTON FROM 68, 218 TYPE 2 ENABLE ACTION (nOpca:=0,oDlg:End()) OF oPanel

				DEFINE SBUTTON Var oBtFilial FROM 68,162 TYPE 05 ACTION { || F340SelFil() } ENABLE OF oPanel
				oBtFilial:cCaption := STR0065 //"Filiais"
				oBtFilial:cToolTip := STR0066 //"Seleciona filiais"
				ACTIVATE MSDIALOG oDlg CENTERED
			Else
				If __lGetParA .And. Len(__aRetAuto) == 0 
					If Empty(aRetAuto)
						__aRetAuto := GetParAuto("FINA340TestCase")
					else
						__aRetAuto := aClone(aRetAuto)
					Endif
					
					If Len(__aRetAuto) > 0	
						If __aRetAuto[1,1,2]
							cPrefixo := __aRetAuto[1,1,1]
						EndIf
						
						If __aRetAuto[1,2,2]
							cNum := __aRetAuto[1,2,1]
						EndIf
						
						If __aRetAuto[1,3,2]
							cParcela := __aRetAuto[1,3,1]
						EndIf
						
						If __aRetAuto[1,4,2]
							cTipoTit := __aRetAuto[1,4,1]
						EndIf
						
						If __aRetAuto[1,5,2]
							cFornece := __aRetAuto[1,5,1]
						EndIf
						
						If __aRetAuto[1,6,2]
							cLoja := __aRetAuto[1,6,1]
						EndIf
						
						If __aRetAuto[1,7,2]
							nValor := __aRetAuto[1,7,1]
						EndIf
						
						If __aRetAuto[1,8,2]
							dBaixa := __aRetAuto[1,8,1]
						EndIf

						If Len(__aRetAuto[1]) > 8 .And. __aRetAuto[1,10,1] > 0 .And. nMoeda340 > 1
							aTxMoedas[nMoeda340,2] :=  __aRetAuto[1,10,1]
							aTxMoedas[nMoeda340,4] :=  __aRetAuto[1,10,1]
							__nTxMoedP := __nTxCont := __aRetAuto[1,10,1]
						EndIf
						
						If fa340Tudok(oDlg,lAutomato)
							nOpca      := 1

							For nX := 1 To Len(__aRetAuto[2])
								If Len(__aRetAuto[2,nX]) > 7 .And. __aRetAuto[2,nX,9] > 0 .And. __aRetAuto[2,nX,8] > 1
									__nTxDesAl	:=  __aRetAuto[2,nX,9]

									If __lTxPrCon
										aTxMoedas[nMoeda340,2] :=  __aRetAuto[2,nX,9]
										aTxMoedas[nMoeda340,4] :=  __aRetAuto[2,nX,9]
									EndIf
								EndIf
							Next nX

							aAutAux    := Aclone(__aRetAuto[2])
							__aRetAuto := {}
							
							For nX := 1 to Len(aAutAux)
								Aadd(__aRetAuto, AllTrim(aAutAux[nX,1]+aAutAux[nX,2]+aAutAux[nX,3]+aAutAux[nX,4]+aAutAux[nX,5]+aAutAux[nX,6]+aAutAux[nX,7]))
							Next						
							
							aAutAux := {}
						EndIf
					EndIf
				EndIf
			Endif
		EndIf
		
		IF nOpca == 0
			DbSelectArea(cAlias)
			dbSetOrder(nOrdem)
			__nTxMoedP := 0
			Exit
		EndIF
		
		If nOpca == 2
			Loop
		EndIf

		//Metricas - Carregamento da tela de seleção
		If __lMetric
			nInicio := Seconds()
		Endif

		//Guardo dados do titulo principal para utilizar no historico da contabilização
		STRLCTPAD	:= SE2->E2_PREFIXO+SE2->E2_NUM+SE2->E2_PARCELA+SE2->E2_TIPO+SE2->E2_FORNECE+SE2->E2_LOJA
		CODFORCP	:= SE2->E2_FORNECE
		LOJFORCP    := SE2->E2_LOJA
		
		dbSelectArea("SA2")
		dbSelectArea("SED")
		dbSelectArea(cAlias)
		cNumCont := AllTrim(cNumCont)
		Fa340Tit(cNumCont,cPedFIE)
		
		If Len(aTitulos) == 0	
			If lQryTxCon
				If !lAutomato
					cTitle	:= "Nenhum título encontrado."
					cHelp	:= STR0137 + "<br><br>" + STR0138
					cUrl	:= "https://tdn.totvs.com/pages/releaseview.action?pageId=391550445"
					cLink	:= "<a href='"+ cUrl +"'>"+cUrl+"</a><br><br>"
					FinhlpUrl(cTitle,cHelp,cLink,cUrl)
				Else
					Help(" ",1,"NOTITSEL",,"" ,1,0,,,,,,{STR0137})
				Endif
			Else
				Help(" ",1,"NOTITSEL",,"" ,1,0,,,,,,{STR0130})
			EndIf
			Exit
		EndIf
		
		aTitAux := AClone(aTitulos)
		
		If ExistBlock("F340ATLIS")
			aTitulos := ExecBlock("F340ATLIS", .F., .F.,{aTitulos})
			If ValType(aTitulos) <> "A"
				aTitulos := AClone(aTitAux)
				FwFreeArray(aTitAux)
			Endif
		Endif
		
		nOpca := 0

		aSize := MsAdvSize(,.F.,400)
		If !lAutomato
			DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7], 0 to aSize[6], aSize[5] of oMainWnd PIXEL
			oDLg:lMaximized := .T.
			oPanel := TPanel():New(0, 0, '', oDlg,, .T., .T.,, ,20,20,.T.,.T. )
			oPanel:Align := CONTROL_ALIGN_TOP
			
			If cPaisLoc != "RUS"
				@003, 005 Say STR0042 + Pad(Getmv("MV_SIMB" + Alltrim(STR(SE2->E2_MOEDA))), 4)  PIXEL Of oPanel
			Else
				@003,005 Say STR0042 + SE2->E2_PREFIXO + " - " + SE2->E2_NUM + STR0108 + SE2->E2_FORNECE  + " - " + SE2->E2_LOJA PIXEL Of oPanel
			EndIf
			
			nWidth1 := GetTextWidth(0, "BBBBB")
			nWidth2 := GetTextWidth(0, "BBBBBBBBB")
			nWidth3 := GetTextWidth(0, "BBB")
			nWidth4 := GetTextWidth(0, "BBBBBBBBBB")		
			If cPaisLoc == "RUS"
				nWidth5 	:= GetTextWidth(0, "BBBBBB")		
				nWidth6 	:= GetTextWidth(0, "BBBBBBBB")		
				nWidth7 	:= GetTextWidth(0, "BB")	
				nWidth8 	:= GetTextWidth(0, "BBBBBBBBBBBBBBBB")	
				nWidth9 	:= GetTextWidth(0, "BBBBBBBBBBBBBBBBBBBB")	
				nWidth10 	:= GetTextWidth(0, "BBBBBBBBBBBBBBB")	
				nWidth11 	:= GetTextWidth(0, "B")	
			EndIf
			
			If cPaisLoc == "BRA"
				@ 1.0, 1.0 LISTBOX oTitulo   VAR cVarQ Fields;
				HEADER "",; 
				STR0006,;	//Prefixo
				STR0007,;	//Número
				STR0008,;	//Parcela
				STR0009,;	//Tipo
				STR0016,;	//Saldo do título
				STR0017,;	//Valor compensado
				STR0064,;	//Limite de compensação
				STR0038,;	//Acréscimos
				STR0039,;	//Decréscimos
				STR0010,;	//Fornecedor
				STR0027,;	//Emissao
				STR0043 COLSIZES 12, nWidth1, nWidth2, nWidth1, nWidth3, nWidth4, nWidth4, nWidth2, nWidth2, nWidth4 SIZE 293,54.5;
					ON DBLCLICK (aTitulos := FA340Troca(oTitulo:nAt, aTitulos, oGet01), oTitulo:Refresh()) NOSCROLL
				
				//Seta os valores para cada coluna do acols
				oTitulo:SetArray(aTitulos)

				If GetFinLGPD()
					oTitulo:aObfuscatedCols := {.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.,.F.,RetGlbLGPD("E2_NOMFOR"),.F.,.F.}
				EndIF

				oTitulo:bLine := { || {If(aTitulos[oTitulo:nAt,8], oOk, oNo), aTitulos[oTitulo:nAt,1], aTitulos[oTitulo:nAt,2], aTitulos[oTitulo:nAt,3], aTitulos[oTitulo:nAt,4],;
				aTitulos[oTitulo:nAt,5], aTitulos[oTitulo:nAt,6], aTitulos[oTitulo:nAt,9], aTitulos[oTitulo:nAt,10], aTitulos[oTitulo:nAt,11], aTitulos[oTitulo:nAt,7],;
				aTitulos[oTitulo:nAt,12], aTitulos[oTitulo:nAt,13]}}		
			ElseIf cPaisLoc == "RUS"
				@ 1.0, 1.0 LISTBOX oTitulo   VAR cVarQ Fields;
				HEADER "",OemToAnsi(STR0058),;   //"Branch"
				OemToAnsi(STR0006),;  //"Prefix"
				OemToAnsi(STR0007),;  //"Number"
				OemToAnsi(STR0008),;  //"Installment"
				OemToAnsi(STR0009),;  //"Type"
				OemToAnsi(STR0013),;   //"Moeda/Currency"
				OemToAnsi(STR0090),;   //"Curr. name"
				OemToAnsi(STR0016),;  //"Bill Balance"
				OemToAnsi(STR0017),;   //"Value Cleared"  
				OemToAnsi(STR0084),;   //"Supplier's code"                            
				OemToAnsi(STR0010),;   //"Supplier"
				OemToAnsi(STR0011),;   //"Unit"
				OemToAnsi(STR0086),;   //"Contract no."
				OemToAnsi(STR0027),;   //"Issue"
				OemToAnsi(STR0091),;   //"Due Date"
				OemToAnsi(STR0087),;   //"Bill Value"
				OemToAnsi(STR0088),;   //"Vl R$"
				OemToAnsi(STR0085);   //"Conv. Units"
				COLSIZES 12, nWidth5 ,nWidth1,nWidth6 ,nWidth1, nWidth3, nWidth7, nWidth4, nWidth8, nWidth8, nWidth5, nWidth9, nWidth7, nWidth10, nWidth6, nWidth6, nWidth8, nWidth8, nWidth11 SIZE 293,54.5;
					ON DBLCLICK (aTitulos:=FA340Troca(oTitulo:nAt,aTitulos,oGet01),oTitulo:Refresh()) NOSCROLL				
				oTitulo:SetArray(aTitulos)
				oTitulo:bLine := { || {If(aTitulos[oTitulo:nAt,8],oOk,oNo),;
					aTitulos[oTitulo:nAt,13],aTitulos[oTitulo:nAt,1],;
					aTitulos[oTitulo:nAt,2],aTitulos[oTitulo:nAt,3],;
					aTitulos[oTitulo:nAt,4],aTitulos[oTitulo:nAt,9],;
					aTitulos[oTitulo:nAt,18],;
					aTitulos[oTitulo:nAt,5],aTitulos[oTitulo:nAt,6],;
					aTitulos[oTitulo:nAt,11],aTitulos[oTitulo:nAt,7],;
					aTitulos[oTitulo:nAt,12],aTitulos[oTitulo:nAt,15],;
					aTitulos[oTitulo:nAt,10],aTitulos[oTitulo:nAt,19],;
					aTitulos[oTitulo:nAt,16],aTitulos[oTitulo:nAt,17],;
					aTitulos[oTitulo:nAt,14]}}
			Else
				@ 1.0, 1.0 LISTBOX oTitulo   VAR cVarQ Fields;
				HEADER "",OemToAnsi(STR0006),;  //"Prefixo"
				OemToAnsi(STR0007),;  			//"N£mero"
				OemToAnsi(STR0008),;  			//"Parcela"
				OemToAnsi(STR0009),;  			//"Tipo"
				OemToAnsi(STR0016),;  			//"Saldo do t¡tulo"
				OemToAnsi(STR0017),;   			//"Valor compensado"
				STR0038,; 						//"Acréscimos"
				STR0039,; 						//"Decréscimos"
				OemToAnsi(STR0010),;   			//"Fornecedor"
				OemToAnsi(STR0013),;   			//"Moeda"
				OemToAnsi(STR0027);   			//"Emissao"
				COLSIZES 12, nWidth1, nWidth2, nWidth1,nWidth3, nWidth4, nWidth4, nWidth4, nWidth4, nWidth4, nWidth1,GetTextWidth(0,"BBBBBBBB");
					SIZE 293,54.5 ON DBLCLICK (aTitulos:=FA340Troca(oTitulo:nAt,aTitulos,oGet01),oTitulo:Refresh()) NOSCROLL
				
				oTitulo:SetArray(aTitulos)
				oTitulo:bLine := { || {If(aTitulos[oTitulo:nAt,8], oOk, oNo), aTitulos[oTitulo:nAt,1], aTitulos[oTitulo:nAt,2], aTitulos[oTitulo:nAt,3], aTitulos[oTitulo:nAt,4],;
				aTitulos[oTitulo:nAt,5], aTitulos[oTitulo:nAt,6], aTitulos[oTitulo:nAt,11], aTitulos[oTitulo:nAt,12], aTitulos[oTitulo:nAt,7], aTitulos[oTitulo:nAt,9],;
				aTitulos[oTitulo:nAt,10]}}
			EndIf
			
			//Marca ou desmarca todos
			If cPaisLoc != "RUS"
				oTitulo:bHeaderClick := {|oObj,nCol| If(nCol == 1, fMarkAll(@aTitulos), Nil), oTitulo:Refresh(),oGet01:Refresh()}
			EndIf
			oTitulo:Align := CONTROL_ALIGN_ALLCLIENT
			If cPaisLoc != "RUS"
				@ 4, 353 SAY STR0031 PIXEL OF oPanel SIZE 70,7 //Total selecionado
				@ 4, 403 MSGET oGet01 VAR nValTot PICTURE "@E 999,999,999.99" WHEN .F. PIXEL OF oPanel SIZE 70,7 HASBUTTON
			Else
				nVlrCompe := nValor			
				@ 4, 455 SAY STR0031 PIXEL OF oPanel SIZE 70,7
				@ 4, 525 MSGET oGet01 VAR nValTot PICTURE "@E 999,999,999.99" WHEN .F. PIXEL OF oPanel SIZE 70,7 HASBUTTON
				@ 4, 303 SAY STR0089 PIXEL OF oPanel SIZE 70,7
				@ 4, 375 MSGET nVlrCompe PICTURE "@E 999,999,999.99" WHEN .F.	PIXEL OF oPanel SIZE 70,7 HASBUTTON
				
			EndIf
		EndIf
		If ExistBlock("F340TOTCP")
			ExecBlock("F340TOTCP",.F.,.F., { @oPanel , 1, nValTot , nValor } )
		EndIf
		
		If !lPanelFin
			If !lAutomato
				oPanel2 := TPanel():New(0,0,'',oDlg, oDlg:oFont, .T., .T.,, ,20,20,.T.,.T. )
				oPanel2:Align := CONTROL_ALIGN_BOTTOM
				@  4, 008 BUTTON STR0030 SIZE 50,11 ACTION ( Fa340Inver(@aTitulos,@oTitulo,@oGet01) ) OF oPanel2 PIXEL
				@  4, 065 BUTTON STR0001 SIZE 50,11 ACTION PesqListBox(@oTitulo,aTitulos) OF oPanel2 PIXEL
				@  4, 122 BUTTON STR0129 SIZE 50,11 ACTION ( fMarkAll(@aTitulos) ) OF oPanel2 PIXEL
				If cPaisLoc == "RUS"
					@  4, 122 BUTTON STR0093 SIZE 50,11 ACTION RU06XFUN70(@oTitulo,@aTitulos,cNumCont,lAutomato,@oOk,@oNo,STR0096,STR0097) OF oPanel2 PIXEL // RU06XFUN70_FA340Filte
					@  4, 179 BUTTON STR0104 SIZE 50,11 ACTION RU06XFUN71(@oTitulo,@aTitulos,cNumCont,lAutomato,@oOk,@oNo,STR0105,STR0104) OF oPanel2 PIXEL	// RU06XFUN71_FA340Unfil
					@  4, 236 BUTTON STR0094 SIZE 50,11 ACTION RU06XFUN72(@oTitulo,@aTitulos,cNumCont,lAutomato,@oOk,@oNo,STR0094,STR0098,STR0099,STR0100) OF oPanel2 PIXEL	// RU06XFUN72_FA340Sort
					@  4, 293 BUTTON STR0095 SIZE 50,11 ACTION RU06XFUN73(@oTitulo,@aTitulos, @oOk,@oNo,cNumCont,lAutomato,STR0101,STR0102,STR0103) OF oPanel2 PIXEL	// RU06XFUN73_F340AutMrk					
				EndIf				
			EndIf	
		Else
			aButtonTxt := {}
			AADD(aButtonTxt, {STR0045,STR0030, {||Fa340Inver(@aTitulos,@oTitulo,@oGet01)}})
			AADD(aButtonTxt, {STR0001,STR0001, {||PesqListBox(@oTitulo,aTitulos)}})
		Endif

		//Metricas - Carregamento da tela de seleção
		If __lMetric
			nRegistros := Len(aTitulos)
			If nRegistros > 0
				nFim := Seconds() - nInicio
				nFim := nFim / nRegistros
				SetFunName(__cFunMet)
				FwCustomMetrics():setAverageMetric(Alltrim(ProcName())+" - TempoEntrada", "financeiro-protheus_tempo-conclusão-processo_seconds", nFim)
				SetFunName(__cFunBkp)
			Endif
		Endif

		If lPanelFin
			ACTIVATE MSDIALOG oDlg ON INIT (oTitulo:Refresh(), FaMyBar(oDlg,{|| nOpca := 1,IF(Fa340OK(),oDlg:End(),nOpca:=0)},{|| oDlg:End()},,aButtonTxt))
		ElseIf lAutomato
			nOpcA := If(__lGetParA, 1, 0)
		Else
			DEFINE SBUTTON FROM 4 ,Iif(cPaisLoc != "RUS",325,425) TYPE 1 ACTION (nOpca := 1,IF(Fa340OK(), oDlg:End(), nOpca :=0)) ENABLE OF oPanel2
			DEFINE SBUTTON FROM 4 ,Iif(cPaisLoc != "RUS",360,460) TYPE 2 ACTION oDlg:End() ENABLE OF oPanel2
			ACTIVATE MSDIALOG oDlg CENTERED ON INIT (oTitulo:Refresh())
		EndIf
		
		If nOpcA == 2
			Loop
		ElseIf nOpcA == 0 .Or. nOpca == 3
			F340Semaforo(aTitulos,.F.,0)
			__nTxMoedP := 0
			Exit
		Else

			//Metricas - Gravação da compensação
			If __lMetric
				nInicio := Seconds()
			Endif

			If cPaisLoc != "RUS"			
				If nValtot <= 0
					Help(" ",1,"FA330COMP")
					If lAutomato
						Exit
					EndIf
					Loop
				EndIf
			Else
				If nValtot > nValor .and. nValor != 0 .and. nOpca == 1
					Help(" ",1,"FA330COMP")
					If lAutomato
						Exit
					Else
						Loop
					EndIf
				EndIf
			Endif
			
			nValor := Round(nValTot,2)
			
			If Str(nValor,17,2) > Str(nSaldo,17,2)
				Help(" ",1,"FA330IVAL")
				
				If lAutomato
					Exit
				EndIf 
				
				Loop
			EndIf
			
			lPadrao    := VerPadrao(cPadrao)
			VALOR  	   := 0
			VLRINSTR   := 0
			ABATIMENTO := 0
			aRegSE2    := {}
			aBaixaSE5  := {}
			
			//Ponto de entrada para permitir a manipulação dos titulos selecionados pela markbrowse
			If ExistBlock("F340MKTIT")
				aTitulos := ExecBlock("F340MKTIT",.F.,.F.,{aTitulos})
			Endif

			//Processo para ordenar os titulos selecionados de acordo com o valor para que o Cálculo de PCC fique correto
			_aRecno := {}
			For nX := 1 to Len(aTitulos)
				AADD(_aRecno,{aRecno[nX],aTitulos[nX]})
			Next

			ASORT(aTitulos, , , { | a,b | a[22] >= b[22] } )
			ASORT(_aRecno, , ,  { | a,b | a[2,22] >= b[2,22] } )
			
			For nX := 1 to Len(aRecno)
				aRecno[nX] := _aRecno[nX][1]
			Next

			Begin Transaction
				For nTit := 1 to Len(aTitulos)
					If aTitulos[nTit,8]
						lBordImp   := .F.
						nTotAbat   := 0
						__nBase    := 0
						__nTxTiBrw := 0
						nTotImp    := 0
						nVlrMov    := 0
						__aDdsDic  := {}
						nGravados  += 1

						If cPaisLoc == "BRA"
							SE2->(dbGoTo(__nRecPart))

							nVlrMov    := aTitulos[nTit,20]
							__nTxTiBrw := aTitulos[nTit,21] 
							nTotImp    := aTitulos[nTit,19]							
							
							If SE2->(E2_SALDO+E2_SDACRES) < nVlrMov
								nVlrMov := 	SE2->(E2_SALDO+E2_SDACRES)
							EndIf
							
							SE2->(dbGoTo(aRecNo[nTit]))
							
							If nMoeda340 == 1
								__nTxMoedP := __nTxTiBrw	
							EndIf							
														
							If xMoeda(SE2->(E2_SALDO+E2_SDACRES), SE2->E2_MOEDA, nMoeda340, dBaixa, __nCasDec, __nTxTiBrw, __nTxMoedP) < nVlrMov
								Loop
							EndIf
						Else
							__nTxTiBrw := aTxMoedas[SE2->E2_MOEDA][2]
							nVlrMov    := Fa340VTit(aTitulos[nTit, 6])
							
							If cPaisLoc == "BOL"
								nVlrMov := aTitulos[nTit,13]
								
								If aTitulos[nTit,5] != aTitulos[nTit,6]
									nVlrMov := Fa340VTit(aTitulos[nTit, 6])
								EndIf
							EndIf						
						EndIf
						
						Aadd(aRegSE2, aRecNo[nTit])
						REGVALOR := aRecNo[nTit] 
						nMoedSel := SE2->E2_MOEDA
						SE2->(dbGoTo(__nRecPart))
						If cPaisLoc != "RUS"
							nAcresc  := SE2->E2_SDACRES 
							nDecres  := SE2->E2_SDDECRE

							//Quarda o acrescimo e decrescimo do titulo de partida para contabilizacao
							nAcresPart := nAcresc
							nDecrePart := nDecres
						EndIf
						If lPadrao .And. !lContabil .And. mv_par11 == 1 .And. ( !__lCmpM103 .Or. (__lCmpM103 .And. mv_par11 == 1 ) )
							nTotal    := 0
							lContabil := .t.
							nHdlPrv   := HeadProva(cLote, "FINA340", Substr(cUsuario, 7, 6 ), @cArquivo)
						EndIf
						
						If mv_par10 == 1 .And. !SE2->E2_TIPO $ MVPAGANT							
							SE2->(dbGoTo(aRecNo[nTit]))
						EndIf

						cAdiantamento := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
						cChave        := "SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA)"
						SE2->(dbGoTo(__nRecPart))
						
						If cPaisLoc == "BRA"							
							If mv_par10 == 1
								nRecNF := __nRecPart  
								nRecPA := aRecNo[nTit]								
								
								If SE2->E2_TIPO $ MVPAGANT
									nRecNF := aRecNo[nTit]
									nRecPA := __nRecPart									
									SE2->(dbGoTo(aRecNo[nTit]))
								EndIf
								
								lBordImp := !Empty(SE2->E2_NUMBOR) .And. "4" $ SE2->(E2_PRETCOF+E2_PRETCSL+E2_PRETPIS+E2_PRETIRF)
								
								If !lBordImp 
									FA340ImPA(nTit, nRecPA, nRecNF, @aImpFK3FK4, aDicCMP, aTitCalc)
								EndIf

								If lValBlqNat
									For nX := 1 To Len(aImpFK3FK4)
										SED->(DbSetOrder(1))
										SED->(DbSeek(xFilial("SED", SE2->E2_FILORIG)+aImpFK3FK4[nX, 3]))
										If SED->ED_MSBLQL == "1"
											cNatImpBlq += AllTrim(aImpFK3FK4[nX, 3]) + chr(13)+chr(10)
										EndIf
									Next nX

									If !Empty(cNatImpBlq)
										Help(" ",1,"EDBLOCKED",,STR0132 +CHR(13)+CHR(13) + STR0133 +CHR(13)+CHR(10) + cNatImpBlq,1,0)
										lCompensa := .F.
										DisarmTransaction()
										Break								
									EndIf
								EndIf

								nTotNF += aTitulos[nTit,22]
								nTotPA += aTitulos[nTit,20]
								
								SE2->(dbGoTo(__nRecPart))
							EndIf
						EndIf
						
						//Gravação dos movimentos SE5
						Fa340Grv(lPadrao, nVlrMov, aRecno[nTit], nTotImp, @nAcresc, @nDecres, aBaixaSE5, nTit,lAutomato, aImpFK3FK4, aTitCalc, nMoedSel )
						
						aImpFK3FK4 := {}

						If !Empty(__aDdsDic)
							AAdd(aDicCMP, __aDdsDic)
						EndIf

						cSeqImp := SE5->E5_SEQ
						
						If lPadrao .And. mv_par11 == 1
							nTotalCmp += If(Val(SE5->E5_MOEDA) == 1, SE5->E5_VALOR, SE5->E5_VLMOED2)
						EndIf
						
						//Verifica se existe solicitacao de NCP e caso exista atualiza o campo CU_DTBAIXA...
						If cPaisLoc <> "BRA"
							A055AtuDtBx("1", SE2->E2_FORNECE, SE2->E2_LOJA, SE2->E2_NUM, SE2->E2_PREFIXO, SE2->E2_BAIXA)
						EndIf
						
						//Posiciona no título marcado para compensação.
						SE2->(dbGoTo(aRecNo[nTit]))
						SED->(DbSetOrder(1))
						SED->(DbSeek(xFilial("SED", SE2->E2_FILORIG)+SE2->E2_NATUREZ))
						dDtMov  := dBaixa 
						
						If cPaisLoc == "BRA"							
							nVlrMov := If(SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC", aTitulos[nTit,20], aTitulos[nTit,22])
							
							If SE2->E2_TIPO $ MVPAGANT
								dDtMov := F340MovPA(Nil, "SE2", .T.)[2]
							EndIf
						EndIf
						
						If (SE2->E2_MOEDA != nMoeda340) .Or. (SE2->E2_MOEDA > 1 .And. SE2->E2_TIPO $ MVPAGANT)
							nVlrMov := FA340Valor(nVlrMov, nMoeda340, SE2->E2_MOEDA, dDtMov, __nTxMoedP, __nTxTiBrw, .F.)
						EndIf
						
						//Ponto de Entrada
						If lF340NAT
							Execblock("F340NAT",.F.,.F.,__nRecPart)
							SE2->(dbGoTo(aRecNo[nTit]))
						Endif
						
						If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
							AltVencImp(dBaixa)
						EndIf
						
						Reclock("SE2")
						SE2->E2_SALDO   -= Round(FA340Acres(nVlrMov, @nAcresc), 2)
						SE2->E2_VALLIQ  := Round(nVlrMov, 2) 
						SE2->E2_MOVIMEN := dBaixa
						SE2->E2_BAIXA   := dBaixa
						
						If !SE2->E2_TIPO $ MVPAGANT+"|"+MVABATIM+"|INA"
							If cPaisLoc == "EUA" .OR. cPaisLoc == "RUS" 
								nTotAbat := 0
							Else
								nTotAbat := aTitulos[nTit,23]
								IF SE2->E2_MOEDA == 1
									SE2->E2_SDACRES -= nAcresc
									SE2->E2_SDDECRE -= nDecres
									SE2->E2_SALDO   -= nDecres
								Else
									SE2->E2_SDACRES -= xMoeda(nAcresc, 1, SE2->E2_MOEDA, dDataBase, __nCasDec)
									SE2->E2_SDDECRE -= xMoeda(nDecres, 1, SE2->E2_MOEDA, dDataBase, __nCasDec)
									SE2->E2_SALDO   -= xMoeda(nDecres, 1, SE2->E2_MOEDA, dDataBase, __nCasDec)
								ENDIF
								If SE2->E2_SALDO <= nTotAbat
									SE2->E2_SALDO -= nTotAbat	
								EndIf
							EndIf 
						EndIf
						
						If cPaisLoc != "BRA" .And. SE2->(ColumnPos("E2_SLPLAID")) > 0
							SE2->E2_SLPLAID := SE2->E2_SALDO
						EndIf
						
						SED->(MsSeek(xFilial("SED", SE2->E2_FILORIG)+SE2->E2_NATUREZ))
						
						If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"							
							If SE2->E2_SALDO == 0
								If AllTrim(SE2->E2_ORIGEM) $ "FINA667|FINA677"
									FINATURES(SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA), .T., SE2->E2_ORIGEM, "P")
								EndIf
								
								//Baixa os título(s) de abatimento(s)
								F340BxAbat(nTotAbat, __nTxTiBrw)
							EndIf
							
							If (nAtraso := (dBaixa - SE2->E2_VENCTO)) > 1
								F340MaAtr(nAtraso)
							EndIf
						EndIf
						
						If lF340_PA
							Execblock("F340_PA",.F.,.F.)
						Endif
						
						If cPaisLoc != "BRA" .And. SE2->(ColumnPos("E2_SLPLAID")) > 0
							SE2->E2_SLPLAID := SE2->E2_SALDO
						EndIf						
						SE2->(MsUnlock())
						
						//Execução TEMPLATE FACTORING
						If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC"
							If (ExistTemplate( "FA080PE" ) )
								ExecTemplate("FA080PE",.F.,.F.)
							Endif
						EndIf
						
						SE2->(dbGoTo(aRecNo[nTit]))
						SED->(DbSetOrder(1))
						SED->(DbSeek(xFilial("SED", SE2->E2_FILORIG)+SE2->E2_NATUREZ))						
						SA2->(DbSetOrder(1))
						SA2->(DbSeek(xFilial("SA2", SE2->E2_FILORIG)+SE2->E2_FORNECE+SE2->E2_LOJA))
						
						If lPadrao .And. mv_par11 == 1 .And. ( !__lCmpM103 .Or. (__lCmpM103 .And. mv_par11 == 1 ) )
							nTotal += DetProva( nHdlPrv,cPadrao,"FINA340",cLote,/*nLinha*/,/*lExecuta*/,/*cCriterio*/,/*lRateio*/,/*cChaveBusca*/,/*aCT5*/,/*lPosiciona*/,@aFlagCTB,/*aTabRecOri*/,/*aDadosProva*/)
						Endif
						
						//variáveis de contabilização
						NPIS340 := 0
						NCOF340 := 0
						NCSL340 := 0
						NIRF340 := 0
						NISS340 := 0						
						
						SE2->(dbGoTo(aRecNo[nTit]))
						F340Semaforo(aTitulos[nTit],.F.,aRecno[nTit])
						
						//Envio de e-mail pela rotina de checklist de documentos obrigatorios
						If __lFinVDoc
							FA340ValDocs(aTitulos[nTit],,.T.)
						EndIf

						If (!__lPccBaix .Or. !__lIrfBaix .Or. !__lIssBaix) .And. __nMvPar14 == 1 .And. mv_par10 == 1
							If !F340LiqTx(nTit, cSeqImp)
								DisarmTransaction()
								lCompensa := .F.
								Break
							Endif
						Endif

						If !__lPaBruto
							If nTotNF == nTotPA .And. !Empty(aDicCMP)
								lDic := .F.
							Endif
						EndIf
					EndIf

					lCompensa := If(!lCompensa, nVlrMov > 0, lCompensa)
					
				Next nTit

				FwFreeArray( aImpFK3FK4 )
				
				If lCompensa

					If lF340SE5
						ExecBlock("F340SE5",.F.,.F.,{aRecSe5})
					EndIf

					nAcresc := nAcresPart
					nDecres := nDecrePart
					
					nRegSE5 := SE5->(Recno())
					nRegSE2 := SE2->(Recno())
					nRegFK2 := FK2->(Recno())
					SE2->(dbGoTo(__nRecPart))
					SED->(DbSetOrder(1))
					SED->(DbSeek(xFilial("SED", SE2->E2_FILORIG)+SE2->E2_NATUREZ))
					
					If nTotalCmp > 0 .And. lPadrao .And. mv_par11 == 1 .And. ( !__lCmpM103 .Or. (__lCmpM103 .And. mv_par11 == 1 ) )
						VALOR	 := nTotalCmp
						VALOR2	 := nAcresc
						VALOR3	 := nDecres
						VALOR4	 := ABS(nValCorCM)
						VLRINSTR := nTotalCmp
						nSldReal := Round( xMoeda(nSaldo, nMoeda340, 1, dDataBase, __nCasDec, If(cPaisLoc == "BRA", __nTxTiBrw, 0)) , 2)
						
						//disposiciona as tabelas para contabilização.
						SE5->(dbGoTo(0))
						SE2->(dbGoTo(0))
						FK2->(dbGoTo(0))
						
						nTotal += DetProva( nHdlPrv, cPadrao, "FINA340", cLote, 0, .F., "FINA340", /*lRateio*/, /*cChaveBusca*/, /*aCT5*/, /*lPosiciona*/, @aFlagCTB, /*aTabRecOri*/, /*aDadosProva*/ )
						
						For nX := 1 To Len(aBaixaSE5)
							If UsaSeqCor()
								AAdd(aDiario,{"SE5",aBaixaSE5[nX],cCodDiario,"E5_NODIA","E5_DIACTB"})
							EndIf
						Next nX
						
						RodaProva(nHdlPrv, nTotal)
						cA100Incl(@cArquivo, nHdlPrv, 3, cLote, lDigita, lAglutina, /*cOnLine*/, /*dData*/, /*dReproc*/, @aFlagCTB, /*aDadosProva*/, aDiario)
						aFlagCTB := {}
					EndIf
					
					//Posiciona as tabelas após contabilização
					SE5->(dbGoTo(nRegSE5))
					SE2->(dbGoTo(nRegSE2))
					FK2->(dbGoTo(nRegFK2))

					//Geração do DIC
					If !Empty(aDicCMP) .And. lDic
						F340CmpDIC(aDicCMP)
					EndIF
					
					If __lBxAuImp .and. __nMvPar14 <> 1
						Fa340BTxAu(aTitulos, cSeqImp)
					Endif

					//Integracao com modulo PCO
					Fa340IntPco(nRegSE2, aRegSE2, aClone(aBaixaSE5))
				EndIf
				__lOk := .T.
			End Transaction
			
			//Envio de e-mail pela rotina de checklist de documentos obrigatorios
			IF lCompensa .And. __lFinVDoc
				CN062ValDocs("07",.F.,.T.)
			EndIf
		Endif
		
		//Atualiza dados no TMS pagamento de Diaria motorista
		If lCompensa
			If IntTMS() .And. AliasIndic("DYX") .And. TmsVLDSIX("DYX",'2')
				dbSelectArea("DYX")
				dbSetOrder(2)
				
				If DYX->(MsSeek(xFilial("DYX")+SE2->E2_PREFIXO+SE2->E2_NUM))
					RecLock("DYX", .F.)
					DYX->DYX_VALTIT := SE2->E2_SALDO
					DYX->DYX_NUMREC := DYX->DYX_IDCDIA+DYX->DYX_ITEM
					MsUnlock()
				EndIf
			EndIf
			
			//MCF - 31/05/2016 - Baixa da invoice do Siscoserv quando feito via compensação CP.
			If AvFlags("CONTROLE_SERVICOS_AQUISICAO") .And. !IsInCallStack("ESSPS400") .And. SE2->E2_TIPO == MVNOTAFIS
				lESSCOM := GetMv("MV_COMSEIC",,.F.) .And. GetMv("MV_ESS0012",,.F.) .And. GetMv("MV_ESS0013",,.F.) .And. AllTrim(SE2->E2_ORIGEM) == "MATA100"
				lESSEIC := GetMv("MV_ESS0022",,.T.) .And. AllTrim(SE2->E2_PREFIXO) == "EIC" .And. SWD->(FieldPos("WD_MOEDA")) > 0 .And. SWD->(FieldPos("WD_VL_MOE")) > 0 .And. SWD->(FieldPos("WD_TX_MOE")) > 0
				
				If lESSCOM .Or. lESSEIC
					PS400BuscFat("A",If(lESSCOM,"SIGACOM","SIGAEIC"),,SE2->E2_NUM,SE2->E2_PREFIXO,.T.,SE2->E2_FORNECE,SE2->E2_LOJA,SE2->E2_PARCELA)
				EndIf
			EndIf
		EndIf

		//Metricas - Gravação da compensação
		If __lMetric .and. nGravados > 0
			nFim := Seconds() - nInicio
			nFim := nFim / nGravados
			SetFunName(__cFunMet)
			FwCustomMetrics():setAverageMetric(Alltrim(ProcName())+" - TempoGravacao", "financeiro-protheus_tempo-conclusão-processo_seconds", nFim)
			SetFunName(__cFunBkp)
		Endif

		Exit
	Enddo
	
	cPrefixo   := CriaVar("E2_PREFIXO")
	cNum	   := CriaVar("E2_NUM")
	cTipoTit   := CriaVar("E2_TIPO")
	cFornece   := CriaVar("E2_FORNECE")
	cLoja 	   := CriaVar("E2_LOJA")
	cSaldo	   := CriaVar("E2_SALDO")
	nValor	   := CriaVar("E2_SALDO")
	cParcela   := CriaVar("E2_PARCELA")
	nMoeda340  := 1
	nValor	   := 0
	nValTot    := 0
	VALOR4     := 0
	__nTxMoedP := 0
	
	//Execução TEMPLATE FACTORING
	If lCompensa
		If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC" .And. ExistTemplate("FA080PE")
			ExecTemplate("FA080PE",.F.,.F.)
		EndIf
		
		PcoFinLan("000017")
		FA340IntD("SE2", nOrdem, oOk, oNo)
		SE2->(dbGoto(__nRecPart))
		
		//Ponto de entrada no final da atualização dos titulos
		If ExistBlock("F340GRV")
			Execblock("F340GRV",.F.,.F.,{nOpcA})
		EndIf
	EndIf

	f340LRatIR(.T.) // Limpa objeto __oRatIRF IR Progressivo	

	__nQtdePA  := 0
	__nQtdeDIC := 0
	__aDdsDic  := {}
	aAreaSE2:= SE2->(GetArea())
	SE2->(DbSetOrder(1))
	UnLockCmpCP( cChvSE2 )
	RestArea(aAreaSE2)

Return (.T.)

//-------------------------------------
/*/{Protheus.doc}fa340For
Verifica validade do Fornecedor

@author Mauricio Pequim Jr
@since  05/01/99
@version 8
/*/
//-------------------------------------
Static Function fa340For( cFornecedor, cLoja )
	Local cAlias:=Alias()
	Local lRet := .T.
	Local nRecSe2
	Local nOrdSe2
	
	If Empty(cFornecedor)
		lRet := .F.
	Else
		cAlias:=Alias()
		dbSelectArea("SA2")
		dbSetOrder(1)
		cLoja:=Iif(cLoja == Nil .or. (Empty(cLoja) .and. Empty(SE2->E2_LOJA)),"",cLoja)
		
		If !(dbSeek(xFilial("SA2")+cFornecedor+cLoja))
			lRet := .f.
		Else
			dbSelectArea("SE2")
			nOrdSe2 := IndexOrd()
			nRecSe2 := Recno()
			dbSetOrder(1)
			If !MsSeek(xFilial("SE2", SE2->E2_FILORIG)+cPrefixo+cNum+cParcela+cTipoTit+cFornecedor+cLoja)
				Help(" ",1,"NOTIT")
				lRet := .F.
			Endif
			dbSetOrder(nOrdSe2)
			DbGoto(nRecSe2)
		EndIf
	EndIf
	
	dbSelectArea(cAlias)
Return lRet

//-------------------------------------
/*/{Protheus.doc}FA340Can
Cancelamento de compensação de adiantamento(s) ou Tx's
@author Sivaldo Oliveira
@since  31/10/2018
@version 12
/*/
//-------------------------------------
Function FA340Can(cAlias As Character, nReg As Numeric, nOpc As Numeric, lAutomato As Logical)
	Local lPlnFin    As Logical
	Local lRet       As Logical
	Local cPrefixo   As Character
	Local cNumero    As Character
	Local cParcela   As Character
	Local cTipo      As Character
	Local cFornece   As Character
	Local cLoja      As Character
	Local cNatur     As Character
	Local nMoeda340  As Numeric
	Local cOrigem    As Character
	Local cTblTmp    As Character
	Local cDocumen   As Character
	Local nTotal     As Numeric
	Local lPadrao    As Logical
	Local cPadrao    As Character
	Local oPanel     As Object
	Local nOpca      As Numeric
	Local cSemaro    As Character
	Local nRecPart 	 As Numeric
	Local cChavSE2   As Character
	Local oDlg       As Object
	Local lInvert    As Logical
	Local cMarca     As Character
	Local nLinIni    As Numeric
	Local nColIni    As Numeric
	Local nLinFin    As Numeric
	Local nColFin    As Numeric	
	Local cE2FilOri  As Character
	Local cArquivo   As Character
	Local lFirst     As Logical
	Local nTotAbat   As Numeric
	Local lIntPFS    As Logical
	Local oModelMov  As Object
	Local oSubFKA    As Object
	Local oSubFK2    As Object
	Local cCamposE5  As Character
	Local lUsaFlag   As Logical
	Local nY         As Numeric
	Local nRecOldSE2 As Numeric
	Local nRecOldSE5 As Numeric
	Local nRecOldFK2 As Numeric
	Local nRecTitSE2 As Numeric
	Local nTotalCan  As Numeric	
	Local lAglutina  As Logical
	Local lDigita    As Logical	
	Local aDiario    As Array
	Local cPret      As Character
	Local aDICNDF    As Array
	Local lVldSeq    As Logical
	Local lImpostos  As Logical 
	Local lContabil  As Logical
	Local acTblTmp   As Array 
	Local aVetReg    As Array 
	Local lF340Can   As Logical
	Local lF340ACan  As Logical
	Local lF340FCan  As Logical
	Local lF340GREST As Logical
	Local lF340DTFIN As Logical
	Local lVldDtFin  As Logical
	Local cFilAtu    As Character
	Local cCompSe5   As Character
	Local lVldDic    As Logical
	Local lJaVldDic  As Logical
	Local aDicEST	 As Array
	Local aLstForn	 As Array
	Local aDicAux	 As Array
	Local aAreaSE2	 As Array
	Local nInicio	 As Numeric
	Local nFim		 As Numeric
	Local nGravados	 As Numeric
	Local nRegistros As Numeric
	Local nRecSA2	 As Numeric
	Local nMoedSel 	 As Numeric
	Local lPCO01705	 As Logical

	Private STRLCTPAD  := ""
	Private NPIS340 := 0
	Private NCOF340 := 0
	Private NCSL340 := 0
	Private NIRF340 := 0
	Private NISS340 := 0	
	
	//Parâmetros da função
	Default cAlias    := "SE2"
	Default nReg      := 0
	Default nOpc      := 0
	Default lAutomato := .F.
	
	//Inicializa variáveis
	lPlnFin    := IsPanelFin()
	lRet       := .T.
	cOrigem    := ""
	cTblTmp    := ""
	nTotal     := 0
	lPadrao    := .F.
	cPadrao    := "589"
	nOpca      := 0
	nRecPart   := SE2->(Recno())
	cChavSE2   := ""
	lInvert    := .F.
	cMarca     := GetMark()
	nLinIni    := 0
	nColIni    := 0
	nLinFin    := 0
	nColFin    := 0
	cOrigem    := AllTrim(SE2->E2_ORIGEM)
	cPrefixo   := SE2->E2_PREFIXO
	cNumero    := SE2->E2_NUM
	cParcela   := SE2->E2_PARCELA
	cTipo      := SE2->E2_TIPO
	cFornece   := SE2->E2_FORNECE
	cLoja      := SE2->E2_LOJA	
	cNatur     := SE2->E2_NATUREZ
	nMoeda340  := SE2->E2_MOEDA	
	cDocumen   := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
	cSemaro    := SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
	cE2FilOri  := SE2->E2_FILORIG  
	cArquivo   := ""
	lFirst     := .T.
	nTotAbat   := 0
	nRecMovSE5 := 0 
	oModelMov  := Nil
	oSubFKA    := Nil
	oSubFK2    := Nil
	cCamposE5  := ""
	nY         := 0
	nRecOldSE2 := 0
	nRecOldSE5 := 0
	nRecOldFK2 := 0
	nRecTitSE2 := 0
	nTotalCan  := 0	
	lAglutina  := mv_par08 == 1
	lDigita    := mv_par09 == 1	
	aDiario    := {}
	cPret      := ""
	aDICNDF    := {}
	lVldSeq    := .F.
	lImpostos  := .F.
	lContabil  := .F.
	acTblTmp   := {}
	aVetReg    := {}
	cFilAtu    := cFilAnt
	cCompSe5   := FWModeAccess( "SE5" , 3 )
	lVldDic    := .F.
	lJaVldDic  := .F.
	aDicEST	   := {}
	aLstForn   := {}	
	aDicAux	   := {}
	aAreaSE2   := SE2->(GetArea())
	nRecSA2    := 0
	nMoedSel   := 1	
	lPCO01705  := PcoExistLc("000017","05","1")

	//Privates
	STRLCTPAD := cDocumen 
	
	//Parâmetros SX6
	lIntPFS  := SuperGetMV("MV_JURXFIN", .F., .F.)
	lUsaFlag := SuperGetMV("MV_CTBFLAG", .T., .F.)
	//Pontos de Entrada.
	lF340Can   := ExistBlock("F340CAN")
	lF340ACan  := ExistBlock("F340ACAN")
	lF340FCan  := ExistBlock("F340FCAN")
	lF340GREST := ExistBlock("F340GREST")
	lF340DTFIN := ExistBlock("F340DTFIN")	
	lVldDtFin  := .T.

	nInicio		:= 0
	nFim		:= 0
	nGravados	:= 0
	nRegistros	:= 0

	__cFunBkp   := FunName()
	__cFunMet	:= Iif(AllTrim(__cFunBkp)=='RPC',"RPCFINA340",__cFunBkp)

	// Metrica de controle de acessos - Cancelamento da Compensação
	If __lMetric
		SetFunName(__cFunMet)
		// Metrica de controle de acessos 
		FwCustomMetrics():setSumMetric(Alltrim(ProcName()), "financeiro-protheus_qtd-por-acesso_total", 1)
		SetFunName(__cFunBkp)
	Endif

	If Type("cLote") != "C"
		cLote := ""
	EndIf
	
	If !LockCmpCP()
		lRet := .F.
	EndIf
	
	If lRet .And. cOrigem $ "FINA667|FINA677" .And. !cTipo $ MVPAGANT+"|"+MV_CPNEG+"|INA|DIC" .And. !FINVERRES(cDocumen, SE2->E2_ORIGEM, "P")
		Help(" " , 1 , "FAVIAGEM")
		lRet := .F.
	EndIf
	
	If lRet .And. SE2->E2_TIPO $ MVABATIM
		Help(" ", 1, "FA030INVAL")
		lRet := .F.
	Endif
	
	If lRet .And. lF340DTFIN
		lVldDtFin := ExecBlock("F340DTFIN", .F., .F.)
	EndIf

	If lRet .And. lVldDtFin .And. !Fa340VldDt(SE2->E2_BAIXA, nOpc)
		lRet := .F.
	EndIf
	
	If lRet .And. lF340aCan .And. !ExecBlock("F340ACAN",.F.,.F.)
		lRet := .F.
	EndIf
	
   //Verifica qual título PA originado pelo módulo SIGAEIC pode sofrer estorno da compensação.
   //Títulos PA da invoice/ Puchase Order só podem ser estonados pelo SIGAEIC.
   //Títulos PA ao despachante (numerário) devem ser compensados e estornados pelo SIGAFIN.
   lAlteraTit := .F.
   
   If AllTrim(cOrigem) == "SIGAEIC" .And. EasyOrigem(AllTrim(cOrigem)) .And. !lAlteraTit
      lRet := .F.
   EndIf

	If lRet
		F340Static()
		PcoIniLan("000017")
		aSize := MSADVSIZE()
		
		If lAutomato
			nOpca := 1
		Else
			If lPlnFin
				dbSelectArea(cAlias)
				oPanelDados := FinWindow:GetVisPanel()
				oPanelDados:FreeChildren()
				aDim := DLGinPANEL(oPanelDados)
				DEFINE MSDIALOG oDlg OF oPanelDados:oWnd FROM 0,0 To 0,0 PIXEL STYLE nOR( WS_VISIBLE, WS_POPUP )
				nEspLarg := ((DlgWidthPanel(oPanelDados) / 2) - 225) / 2
				nEspLin  := 20
			Else
				nEspLarg := 0
				nEspLin  := 2
				DEFINE MSDIALOG oDlg FROM 88, 31 TO 187, 535 TITLE Iif(cPaisLoc != "RUS",STR0005,STR0041) PIXEL				
			EndIf
			
			oDlg:lMaximized := .F.
			oPanel       := TPanel():New(0, 0, '', oDlg,, .T., .T.,, ,20,20)
			oPanel:Align := CONTROL_ALIGN_ALLCLIENT
			
			@ 00 + nEspLin, 003 + nEspLarg TO 29 + nEspLin, 252 + nEspLarg OF oPanel  PIXEL
			@ 14 + nEspLin, 006 + nEspLarg MSGET cPrefixo SIZE 19, 10 OF oPanel PIXEL
			@ 14 + nEspLin, 032 + nEspLarg MSGET cNumero  Valid !Empty(cNumero) SIZE 70, 10 OF oPanel PIXEL
			@ 14 + nEspLin, 105 + nEspLarg MSGET cParcela SIZE 20, 10 OF oPanel PIXEL
			@ 14 + nEspLin, 129 + nEspLarg MSGET cTipo    Picture "@!"  Valid  !Empty(cTipo) .And. !cTipo $ MVABATIM SIZE 16, 10 OF oPanel PIXEL
			@ 14 + nEspLin, 155 + nEspLarg MSGET cFornece Valid Fa340For(cFornece)  SIZE 67, 10 OF oPanel PIXEL
			@ 14 + nEspLin, 225 + nEspLarg MSGET cLoja    Valid Fa340For(cFornece, cLoja) SIZE 16, 10 OF oPanel PIXEL
				
			@ 06 + nEspLin, 006 + nEspLarg SAY STR0006 SIZE 21, 7 OF oPanel PIXEL
			@ 06 + nEspLin, 032 + nEspLarg SAY STR0007 SIZE 22, 7 OF oPanel PIXEL
			@ 05 + nEspLin, 105 + nEspLarg SAY STR0008 SIZE 23, 7 OF oPanel PIXEL
			@ 05 + nEspLin, 129 + nEspLarg SAY STR0009 SIZE 14, 7 OF oPanel PIXEL
			@ 05 + nEspLin, 155 + nEspLarg SAY STR0010 SIZE 34, 7 OF oPanel PIXEL
			@ 05 + nEspLin, 225 + nEspLarg SAY STR0011 SIZE 14, 7 OF oPanel PIXEL
				
			If lPlnFin
				oDlg:Move(aDim[1], aDim[2], aDim[4]-aDim[2], aDim[3]-aDim[1])
				ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg, {||nOpca := 1, oDLg:End()}, {||oDlg:End()})
				FinVisual(cAlias,FinWindow,(cAlias)->(Recno()),.T.)
			Else
				DEFINE SBUTTON FROM 34, 188 TYPE 1 ENABLE ACTION (nOpca := 1, oDLg:End()) OF oDlg
				DEFINE SBUTTON FROM 34, 216 TYPE 2 ENABLE ACTION oDlg:End() OF oDlg
				ACTIVATE MSDIALOG oDlg CENTERED
			Endif
			
			lRet := nOpca > 0
		EndIf
		
		If lRet 
			//Metricas - Tela do cancelamento da compensação - INICIO
			If __lMetric
				nInicio := Seconds()
			Endif

			SE2->(DbGoto(nRecPart))
			
			If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|"+MVTAXA+"|"+MVTXA+"|"+MVINSS+"|"+MVISS+"|INA|DIC"
				lVldSeq := (__lPccBaix .And. SE2->(E2_PIS+E2_COFINS+E2_CSLL) > 0) .Or. (__lIrfBaix .And. SE2->E2_IRRF > 0) .Or. (__lIssBaix .And. SE2->E2_ISS > 0)
			EndIf
			
			If lRet
				cTblTmp  	:= F340TitCan(cDocumen, cMarca, nOpc) 
				lRet 		:= !Empty(cTblTmp)
				
				If lRet .And. SE2->E2_TIPO $ MVPAGANT
					lVldDic := .T.
					
					If F340DICBX(SE2->E2_FILIAL, SE2->E2_PREFIXO, SE2->E2_NUM, SE2->E2_FORNECE, SE2->E2_LOJA)
						lRet := .F.
						Help(" ", 1, "DICBAIXADO", Nil, STR0120 + SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_FORNECE+E2_LOJA) + STR0121, 1, 0) //"O estorno da compensação não pode ser realizada porque o PA: " ## " está vinculado a um título do tipo DIC baixado."
					EndIf
				EndIf				
				
				If lRet .And. SE2->E2_TIPO == "DIC"
					lRet := F340CanDic(cDocumen)
					lJaVldDic := .T.
				EndIf

				//Metricas - Tela do cancelamento da compensação - FIM
				If lRet .and. __lMetric
					nRegistros := (cTblTmp)->(RecCount())

					If nRegistros > 0
						nFim := Seconds() - nInicio
						nFim := nFim / nRegistros
						SetFunName(__cFunMet)
						FwCustomMetrics():setAverageMetric(Alltrim(ProcName())+" - TempoEntrada", "financeiro-protheus_tempo-conclusão-processo_seconds", nFim)
						SetFunName(__cFunBkp)
					Endif
				Endif

				If lRet
					If !lAutomato
						nOpca	:= 0
						oSize := FWDefSize():New(.T.)				
						oSize:AddObject("MASTER", 100, 100, .T., .T.)
						oSize:lLateral := .F.				
						oSize:lProp    := .T.
						oSize:Process()
						
						DEFINE MSDIALOG oDlg TITLE STR0041 PIXEL FROM oSize:aWindSize[1],oSize:aWindSize[2] To oSize:aWindSize[3],oSize:aWindSize[4] OF oMainWnd
						nLinIni := oSize:GetDimension("MASTER", "LININI")
						nColIni := oSize:GetDimension("MASTER", "COLINI")
						nLinFin := oSize:GetDimension("MASTER", "LINEND")
						nColFin := oSize:GetDimension("MASTER", "COLEND")
						oMark := MsSelect():New(cTblTmp, "OK", "", FieldsBr(.T.), @lInvert, @cMarca, {nLinIni, nColIni, nLinFin, nColFin}) 
						oMark:bAval := {|| FA340Mark(cTblTmp, oMark, cMarca, .F., nOpc) } 
						oMark:oBrowse:lhasMark    := .T.
						oMark:oBrowse:lCanAllmark := .T.
						oMark:oBrowse:bAllMark := {|| FA340Mark(cTblTmp, oMark, cMarca, .T., nOpc) }
						
						If lPlnFin
							ACTIVATE MSDIALOG oDlg ON INIT FaMyBar(oDlg, {||nOpca := 1, oDlg:End()}, {|| nOpca := 0, oDlg:End()})     
						Else
							ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg, {||If(F340VldSeq(cTblTmp, cMarca, lVldSeq, @nOpca), oDlg:End(), .F.)}, {||nOpca := 0, oDlg:End()}) CENTER
						EndIf						
					EndIf
					
					If nOpca == 1
						lPadrao := VerPadrao(cPadrao)
						lFirst  := lPadrao

						//Metricas - Gravação do cancelamento - INICIO
						If __lMetric
							nInicio := Seconds()
						Endif

						Begin Transaction
							(cTblTmp)->(DbSetOrder(1))
							lRet := (cTblTmp)->(DbSeek(cMarca))
							
							If lRet
								If lF340Can
									acTblTmp := (cTblTmp)->(GetArea())
									
									While (cTblTmp)->(!Eof())
										Aadd(aVetReg, (cTblTmp)->RECNO)
										(cTblTmp)->(DbSkip())
									EndDo
									
									ExecBlock("F340CAN", .F., .F., aVetReg)	
									RestArea(acTblTmp)
								EndIf 
								
								SE2->(DbSetOrder(1))
								SE5->(DbSetOrder(7))							
								ABATIMENTO := 0
							Else
								Help(" ", 1, "F340NOREG", Nil, STR0109, 1, 0)
							EndIf 
							
							While lRet .And. (cTblTmp)->OK == cMarca .And. (cTblTmp)->(!Eof())
								If nY == 0
									lRet := .F.
								Endif	
								
								SE5->(DbGoto((cTblTmp)->RECNO))
								//Procura o movimento do título de partida
								If !SE5->(MsSeek(SE5->E5_FILIAL + cDocumen + (cTblTmp)->SEQ))
									(cTblTmp)->(DbSkip())
									Loop
								EndIf
								
								nTotAbat   := 0
								nRecMovSE5 := SE5->(Recno())
								SE5->(DbGoto((cTblTmp)->RECNO))
								cChavSE2   := xFilial("SE2", SE5->E5_FILORIG) + SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_FORNECE+E5_LOJA)

								//Geracao de DIC no estorno
								If !__lPaBruto
									If Empty(aLstForn)
										aLstForn := F340LstFor(cTblTmp, cMarca)
									EndIf

									If ASCAN(aLstForn, { |x| x[2] == (cTblTmp)->SEQ }) > 0 
										aDicAux := F340EstDIC(nRecMovSE5, SE5->(RECNO()), cTblTmp) 

										If !Empty(aDicAux)
											AAdd(aDicEST, aDicAux)
										Endif
									EndIf
								EndIf

								//Contabilização.
								If lFirst
									nHdlPrv := HeadProva(cLote, "FINA340", Substr(cUsuario, 7, 6), @cArquivo )
									lFirst	:= .F.
								EndIf
								
								If SE2->(MsSeek(cChavSE2))
									If !lVldDic .And. SE2->E2_TIPO $ MVPAGANT
										If F340DICBX(SE2->E2_FILIAL, SE2->E2_PREFIXO, SE2->E2_NUM, SE2->E2_FORNECE, SE2->E2_LOJA)
											lRet := .F.
											Help(" ", 1, "DICBAIXADO", Nil, STR0120 + SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_FORNECE+E2_LOJA) + STR0121, 1, 0) //"O estorno da compensação não pode ser realizada porque o PA: " ## " está vinculado a um título do tipo DIC baixado."
											DisarmTransaction()
											Break
										EndIf
									EndIf									
									
									//Valida cancelamento do dic.
									If !lJaVldDic .And. SE2->E2_TIPO == "DIC"
										If !(lRet := F340CanDic(SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)))
											DisarmTransaction()
											Break
										EndIf
										
										lJaVldDic := .T.
									EndIf									
									
									If xFilial("SE5") <> SE5->E5_FILIAL
										//Posiciona na filial do movimento e altera a cFilAnt
										F340FilMov(cCompSe5)
									Endif	
									
									lRet := .T.
									nRecTitSE2 := SE2->(Recno())
									nMoedSel	:= SE2->E2_MOEDA
									For nY := 1 To 2
										nTotAbat := 0
										nDecres  := 0
										nAcresc  := 0
										
										If nY == 2
											SE5->(DbGoto(nRecMovSE5)) //Mov de compensação do título de partida
											SE2->(DbGoto(nRecPart))   //Posiciona no título de partida
											
											If __lBxAuImp .And. !SE2->E2_TIPO $ MV_CPNEG+"|"+MVABATIM+"|INA|DIC" .and. __nMvPar14 <> 1
												cChavSE2   := xFilial("SE2", SE5->E5_FILORIG) + SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_FORNECE+E5_LOJA)
											EndIf
										EndIf
										
										lContabil := (nOpc == 4 .And. lPadrao .And. AllTrim(SE5->E5_LA) == "S")
										
										If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|"+MVTXA+"|"+MVTAXA+"|INA|DIC"
											nTotAbat := F340CanAba()
											If !F340EstIpa()
												DisarmTransaction()
												Break
											Endif	
										EndIf
										
										RecLock("SE2")
											If AllTrim(SE2->E2_OK) == "LP"
												SE2->E2_OK := " "
											Else	
												SE2->E2_SALDO += SE5->E5_VALOR
												
												If cPaisLoc == "BRA"
													lImpostos := SE5->(E5_VRETPIS+E5_VRETCOF+E5_VRETCSL+E5_VRETIRF+E5_VRETISS) > 0
													
													//Estorno dos impostos da baixa
													If lImpostos .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|"+MVTXA+"|"+MVTAXA+"|INA|DIC"
														//Pcc
														If __lPccBaix .And. SE5->(E5_VRETPIS+E5_VRETCOF+E5_VRETCSL) > 0
															//Alimenta variáveis de contabilização
															NPIS340 := SE5->E5_VRETPIS 
															NCOF340 := SE5->E5_VRETCOF
															NCSL340 := SE5->E5_VRETCSL

															If SE2->E2_MOEDA > 1 
																SE2->E2_SALDO += Round(xMoeda(SE5->(E5_VRETPIS+E5_VRETCOF+E5_VRETCSL), 1, SE2->E2_MOEDA, SE5->E5_DATA, __nCasDec, Nil, SE5->E5_TXMOEDA), 2)
															else
																SE2->E2_SALDO += SE5->(E5_VRETPIS+E5_VRETCOF+E5_VRETCSL)																	
															EndIf	

															//Atualiza os PRET's e VRET's
															If SE2->(E2_VRETPIS+E2_VRETCOF+E2_VRETCSL) > 0
																SE2->E2_VRETPIS -= SE5->E5_VRETPIS
																SE2->E2_VRETCOF -= SE5->E5_VRETCOF
																SE2->E2_VRETCSL -= SE5->E5_VRETCSL
																
																cPret := If(SE2->(E2_VRETPIS+E2_VRETCOF+E2_VRETCSL) == 0, "1", " ")
																
																SE2->E2_PRETPIS := cPret
																SE2->E2_PRETCOF := cPret
																SE2->E2_PRETCSL := cPret
															EndIf
														EndIf												
														nRecSA2 := SA2->(Recno())
														F340ImpBx(.F., "SE2")																								
														SA2->(DbGoTo(nRecSA2))
														
														//Irf
														If __lIrfBaix .And. SE5->E5_VRETIRF > 0
															//Alimenta variável de contabilização
															NIRF340 := If(SE5->E5_PRETIRF == "1",0,SE5->E5_VRETIRF)

															If SE2->E2_MOEDA > 1 
																SE2->E2_SALDO += Round(xMoeda(NIRF340, 1, SE2->E2_MOEDA, SE5->E5_DATA, __nCasDec, Nil, SE5->E5_TXMOEDA), 2)
															else
																SE2->E2_SALDO += NIRF340
															EndIf	
															
															//Atualiza os PRET's e VRET's
															If SE2->E2_VRETIRF > 0
																SE2->E2_VRETIRF -= NIRF340
																cPret := If(SE2->E2_VRETIRF == 0, "1", " ")
																SE2->E2_PRETIRF := cPret
															EndIf													
														EndIf
														
														//Iss
														If __lIssBaix .And. SE5->E5_VRETISS > 0
															//contabilização do imposto
															NISS340 := SE5->E5_VRETISS
															
															If SE2->E2_MOEDA > 1 
																SE2->E2_SALDO += Round(xMoeda(NISS340, 1, SE2->E2_MOEDA, SE5->E5_DATA, __nCasDec, Nil, SE5->E5_TXMOEDA), 2)
															else
																SE2->E2_SALDO += SE5->E5_VRETISS
															EndIf	
															
															//Atualiza os PRET's e VRET's
															If SE2->E2_VRETISS > 0
																SE2->E2_VRETISS -= SE5->E5_VRETISS
																cPret := If(SE2->E2_VRETISS == 0, "1", " ")
																SE2->E2_PRETIRF := cPret
															EndIf
														EndIf
														
														//Exclui os impostos.
														F340DelTx(cE2FilOri)
													ElseIf SE2->E2_TIPO $ MVPAGANT
														//Alimenta o array para Exclui NDF, DIC
														Aadd(aDICNDF, {SE2->(Recno()), SE5->E5_SEQ})
													EndIf
													
													//Estorno do abatimento
													If nTotAbat > 0
														SE2->E2_SALDO += nTotAbat 
													EndIf
													
													//Estorno do impostos
													If __lBxAuImp .And. !SE2->E2_TIPO $ MV_CPNEG+"|"+MVABATIM+"|"+MVTXA+"|"+MVTAXA+"|INA|DIC" .and. __nMvPar14 <> 1
														F340CanImp(cChavSE2, cE2FilOri)
													EndIf
													
													//Ajusta data de vencimento dos impostos
													AltvencImp(SE2->E2_VENCREA)
													
													//Atualiza o status de viagem
													If AllTrim(SE2->E2_ORIGEM) $ "FINA667|FINA677"
														FINATURES(SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA), .F., SE2->E2_ORIGEM, "P")
													EndIf										
												EndIf
												
												//Estorno do valores acessórios, multa, juros, desconto, acréscimo e decréscimo
												If SE5->(E5_VLJUROS+E5_VLDESCO) != 0 .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MVABATIM+"|INA"
													nAcresc := SE5->E5_VLJUROS
													nDecres := SE5->E5_VLDESCO 
													
													If SE2->E2_MOEDA > 1 
														nAcresc := Round(xMoeda(nAcresc, 1, SE2->E2_MOEDA, SE5->E5_DATA, __nCasDec, Nil, SE5->E5_TXMOEDA), 2)
														nDecres := Round(xMoeda(nDecres, 1, SE2->E2_MOEDA, SE5->E5_DATA, __nCasDec, Nil, SE5->E5_TXMOEDA), 2)
													EndIf	
													
													SE2->E2_SALDO   += nDecres - nAcresc
													SE2->E2_SDACRES += nAcresc
													SE2->E2_SDDECRE += nDecres
												EndIf
												
												If NoRound(SE2->E2_VALOR, 2) == NoRound(SE2->E2_SALDO, 2)
													SE2->E2_BAIXA   := CTOD("  /  /  ")
													SE2->E2_CORREC  := 0
													SE2->E2_MOVIMEN := SE2->E2_BAIXA
													SE2->E2_VALLIQ  := 0
													
													If cPaisLoc != "BRA"
														A055AtuDtBx("2", SE2->E2_FORNECE, SE2->E2_LOJA, SE2->E2_NUM, SE2->E2_PREFIXO, SE2->E2_BAIXA)
													EndIf
												EndIf
											Endif											
											
											If cPaisLoc == "BRA" .And. SE2->E2_SALDO == SE2->E2_VALOR .And. !Empty(SE2->E2_CODRET)
												If (SE2->(E2_VRETPIS+E2_VRETCOF+E2_VRETCSL+E2_VRETIRF+E2_VRETISS+E2_INSS) + Iif(__lBtrISS, SE2->E2_VRETBIS, 0)) == 0
													SE2->E2_DIRF := "1"
												EndIf
											EndIf
											
											If SE2->E2_MOEDA <> 1 .And. SE2->E2_MOEDA <> nMoedSel .And.  (SE2->E2_VALOR-SE2->E2_SALDO) == 0.01			
												SE2->E2_SALDO := SE2->E2_VALOR
											EndIf	
										SE2->(MsUnlock())
										
										nGravados += 1

										//Grava o lançamento do PCO
										PCODetLan("000017", "02", "FINA340", .T.)
										
										//Excluir os registro de correção monetária.
										If !SE2->E2_TIPO $ MVABATIM+"|INA"
											Fin340ExCM(SE5->E5_FILIAL, SE5->E5_SEQ, nOpc)
										EndIf
										
										//Estorno FK2.
										If AllTrim(SE5->E5_TABORI) == "FK2"
											oModelMov := FWLoadModel("FINM020")
											FK2->(DbSetOrder(1))
											
											If FK2->(MsSeek(SE5->(E5_FILIAL+E5_IDORIG)))
												oModelMov:SetOperation(4)
												oModelMov:Activate()
												oSubFKA := oModelMov:GetModel("FKADETAIL")
												oSubFKA:SeekLine({{"FKA_IDORIG", SE5->E5_IDORIG}})
												oModelMov:SetValue("MASTER", "E5_GRV", .T.)
												oModelMov:SetValue( "MASTER", "HISTMOV", STR0041)
												cCamposE5 := "{"
												
												If nOpc != 4
													cCamposE5 += "{'E5_LA','"+SE5->E5_LA+"'}" 

													If lPadrao .And. MV_PAR11 == 1														
														oModelMov:SetValue('MASTER', 'E5_LA', 'S')
													Else
														oModelMov:SetValue('MASTER', 'E5_LA', 'N')													
													EndIf
													
													If UsaSeqCor()
														cCamposE5 += " {'E5_NODIA', ' '} "
													EndIf
												EndIf
												
												cCamposE5 += "}"
												
												oModelMov:SetValue("MASTER", "E5_CAMPOS", cCamposE5 )
												oModelMov:SetValue("MASTER", "E5_OPERACAO", If(nOpc == 4, 3, 2))
												
												If oModelMov:VldData()
													oModelMov:CommitData()
													SE5->(dbGoto(oModelMov:GetValue("MASTER", "E5_RECNO")))
													
													If ((mv_par11 == 1 .And. lPadrao .And. AllTrim(SE5->E5_LA) == "S") .Or. lContabil) .And. lUsaFlag
														Aadd(aFlagCTB, {"E5_LA", "S", "SE5", SE5->(Recno()), 0, 0, 0})
													EndIf
													
													If UsaSeqCor()
														AAdd(aDiario, {"SE5", SE5->(Recno()), SE5->E5_DIACTB, "E5_NODIA", "E5_DIACTB"})
													EndIf
													
													If lIntPFS .And. FindFunction("JGrvBxPag")
														JGrvBxPag(SE2->(Recno()), 5, SE5->(Recno()))
													EndIf
												Else
													lRet := .F.
													cLog := cValToChar(oModelMov:GetErrorMessage()[4]) + ' - '
													cLog += cValToChar(oModelMov:GetErrorMessage()[5]) + ' - '
													cLog += cValToChar(oModelMov:GetErrorMessage()[6])
													Help(Nil, Nil, "M340VALID", Nil, cLog, 1, 0 )
												EndIf
											Else
												lRet := .F.
												Help(Nil, Nil, "M340VALID", Nil, STR0078, 1, 0 )
											EndIf
											
											//Destroi o objeto oModelMov
											oModelMov:DeActivate()
											oModelMov:Destroy()
											oModelMov:= nil											
										EndIf
										
										If lRet
											If (lContabil .Or. (lPadrao .And. !lFirst .And. mv_par11 == 1))
												nRecOldSE2 := SE2->(Recno())
												nRecOldSE5 := SE5->(Recno())
												
												If nY == 1
													SE5->(DbGoto((cTblTmp)->RECNO))
													SE2->(DbGoto(nRecTitSE2))
												Else
													SE5->(DbGoto(nRecMovSE5))
													SE2->(DbGoto(nRecPart))
												EndIf												
												
												If (!SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC" .Or. mv_par10 == 2)
													nTotalCan   += If(SE2->E2_MOEDA != 1, SE5->E5_VLMOED2, SE5->E5_VALOR)
													VALOR2		:= nAcresc
													VALOR3		:= nDecres
													VALOR4		:= ABS(SE5->E5_VLCORRE)
													ABATIMENTO  := nTotAbat
													
													SE5->(DbGoto(nRecOldSE5))
													SE2->(DbGoto(nRecOldSE2))											

													nTotal      += DetProva(nHdlPrv, cPadrao, "FINA340", cLote, Nil, Nil, Nil, Nil, Nil, Nil, Nil, @aFlagCTB, Nil, Nil)
													
													VALOR2		:= 0
													VALOR3		:= 0
													VALOR4		:= 0
													ABATIMENTO  := 0
													NPIS340     := 0
													NCOF340     := 0
													NCSL340     := 0
													NIRF340     := 0
													NISS340     := 0												
												EndIf
												
												SE5->(DbGoto(nRecOldSE5))
												SE2->(DbGoto(nRecOldSE2))											
											EndIf
											
											If nY == 1 .And. lPCO01705
												//Lançamento no PCO ref canc. baixa do titulo principal
												PCODetLan("000017", "05", "FINA340")
											Else
												//Lançamento no PCO ref canc. baixa do titulo compensado
												PCODetLan("000017", "06", "FINA340")											
											EndIf
											
											If lF340GREST .And. nOpc != 4
												ExecBlock("F340GREST",.F.,.F.)
											EndIf
										Else
											Exit
										EndIf									
									Next nY
								EndIf
								
								If lRet
									(cTblTmp)->(DbSkip())
								Else
									Exit
								EndIf
							EndDo
							
							If lRet
								
								//Contabilização do valor total cancelado
								If nTotalCan != 0 .And. (lContabil .Or. (lPadrao .And. !lFirst .And. mv_par11 == 1))
									VALOR := nTotalCan
									
									//Disposiciona as tabelas
									nRecOldSE2 := SE2->(Recno()) 
									nRecOldSE5 := SE5->(Recno()) 
									nRecOldFK2 := FK2->(Recno()) 
									
									SE2->(DbGoto(0))
									SE5->(DbGoto(0))
									FK2->(DbGoto(0))
									
									nTotal  += DetProva(nHdlPrv, cPadrao, "FINA340", cLote, 0, .F., "FINA340", Nil, Nil, Nil, Nil, @aFlagCTB, Nil, Nil)
									RodaProva(nHdlPrv, nTotal)
									
									//Lançamento Contábil
									cA100Incl(@cArquivo, nHdlPrv, 3, cLote, lDigita, lAglutina, Nil, Nil, Nil, @aFlagCTB, Nil, aDiario)
									aFlagCTB := {}									
									
									SE2->(DbGoto(nRecOldSE2))
									SE5->(DbGoto(nRecOldSE5))
									FK2->(DbGoto(nRecOldFK2))
								EndIf

								//Exclui NDF e DIC
								If Len(aDICNDF) > 0
									F340DelDic(cE2FilOri, aDICNDF)
								EndIf

								//Gera novo DIC
								If !Empty(aDicEST)
									F340CmpDIC(aDicEST)
								EndIf
								
								If lF340FCan
									SE2->(DbGoto(nRecPart))
									ExecBlock("F340FCAN",.F.,.F.)
								EndIf								

							Else
								DisarmTransaction()
							EndIf
						End Transaction
					EndIf	
					
					//Metricas - Gravação do cancelamento - FIM
					If __lMetric .and. nGravados > 0
						nFim := Seconds() - nInicio
						nFim := nFim / nGravados
						SetFunName(__cFunMet)
						FwCustomMetrics():setAverageMetric(Alltrim(ProcName())+" - TempoGravacao", "financeiro-protheus_tempo-conclusão-processo_seconds", nFim)
						SetFunName(__cFunBkp)
					Endif

				EndIf
			EndIf
		EndIf
	EndIf
	
	//Restauro a cFilAnt alterada pela função F340FilMov
	cFilAnt    := cFilAtu

	UnLockCmpCP(cSemaro)
	SE2->(dbSetOrder(1))
	SE2->(DbGoto(nRecPart))
	SE5->(DbSetOrder(1))
	SE5->(DbGoto(nReg))	
	
	//MCF - 31/05/2016 - Estorno da Invoice no Siscoserv quando feito via compensação CP.
	If lRet .And. AvFlags("CONTROLE_SERVICOS_AQUISICAO") .And. !IsInCallStack("ESSPS400") .And. Empty(SE2->E2_BAIXA) .And. SE2->E2_TIPO == MVNOTAFIS
		lESSCOM := GetMv("MV_COMSEIC",,.F.) .And. GetMv("MV_ESS0012",,.F.) .And. GetMv("MV_ESS0013",,.F.) .And. AllTrim(SE2->E2_ORIGEM) == "MATA100"
		lESSEIC := GetMv("MV_ESS0022",,.T.) .And. AllTrim(SE2->E2_PREFIXO) == "EIC" .And. SWD->(FieldPos("WD_MOEDA")) > 0 .And. SWD->(FieldPos("WD_VL_MOE")) > 0 .And. SWD->(FieldPos("WD_TX_MOE")) > 0
		
		If lESSCOM .Or. lESSEIC
			PS400BuscFat("A", If(lESSCOM, "SIGACOM", "SIGAEIC"),,SE2->E2_NUM, SE2->E2_PREFIXO, .T.,SE2->E2_FORNECE, SE2->E2_LOJA, SE2->E2_PARCELA)
		EndIf
	EndIf

	RestArea(aAreaSE2)
Return Nil

//-------------------------------------
/*/{Protheus.doc}F340TitCan
Filtra os movimentos de compensação, para compensação
@author Sivaldo Oliveira
@since  31/10/2018
@version 12
/*/
//-------------------------------------
Static Function F340TitCan(cDocumen As Character, cMarca As Character, nOpc As Numeric) As Character
	Local cDb       As Character
	Local cQry      As Character
	Local cInsert   As Character
	Local cTblTmp   As Character
	Local aArea     As Array
	Local oCanMov   As Object
	Local nErro     As Numeric
	Local nTcSql	As Numeric
	Local cCampos   As Character
	Local lFA340QRY As Logical
	Local cQryAdd   As Character
	Local cChaveFK7 As Character
	Local cChaveTit As Character
	local lNaoTodos As logical
	
	Default cDocumen := ""
	Default cMarca   := ""

	cChaveTit := SE2->E2_FILIAL+"|"+SE2->E2_PREFIXO+"|"+SE2->E2_NUM+"|"+SE2->E2_PARCELA+"|"+SE2->E2_TIPO+"|"+SE2->E2_FORNECE+"|"+SE2->E2_LOJA
	cChaveFK7 := FINGRVFK7("SE2", cChaveTit)
	
	DbSelectArea("FK2")
	FK2->(DBSetOrder(2))
	FK2->(DbSeek(SE2->E2_FILORIG + cChaveFk7))
	
	//Inicializa variáveis
	cDb       	:= AllTrim(tcGetdb()) 
	cQry      	:= ""
	cInsert   	:= ""
	cTblTmp   	:= ""
	aArea     	:= SE2->(GetArea())
	nErro     	:= 0
	nTcSql		:= 0
	lFA340QRY 	:= Existblock("FA340QRY") 
	lNaoTodos 	:= .F.
	
	cQry    := "SELECT "
	cQry	+= "'" + cMarca + "'" 
		
	If cDb $ "DB2|ORACLE"
		cQry	+= ",SE5.E5_NUMERO,SE5.E5_TIPO,SE5.E5_DATA,SE5.E5_DOCUMEN,SE5.E5_SEQ,SE5.E5_VALOR,"
		cQry    += "SE5.E5_VRETPIS,SE5.E5_VRETCOF,SE5.E5_VRETCSL,SE5.E5_VRETIRF,SE5.E5_VRETISS,SE5.R_E_C_N_O_ "      
		cCampos := " (OK,NUMERO,TIPO,DTAMOV,DOCUMEN,SEQ,VALOR,VRETPIS,VRETCOF,VRETCSL,VRETIRF,VRETISS,RECNO) "
	Else
		cQry	+= ",SE5.E5_PREFIXO,SE5.E5_NUMERO,SE5.E5_PARCELA,SE5.E5_TIPO,SE5.E5_DATA,SE5.E5_DOCUMEN,SE5.E5_SEQ,SE5.E5_VALOR,"
		cQry    += "SE5.E5_VRETPIS,SE5.E5_VRETCOF,SE5.E5_VRETCSL,SE5.E5_VRETIRF,SE5.E5_VRETISS,SE5.R_E_C_N_O_ "
		cCampos := " (OK,PREFIXO,NUMERO,PARCELA,TIPO,DTAMOV,DOCUMEN,SEQ,VALOR,VRETPIS,VRETCOF,VRETCSL,VRETIRF,VRETISS,RECNO) " 		 
	EndIf
	
	If !Empty(cDocumen)
		cDocumen := PadR(cDocumen, TamSx3("E5_DOCUMEN")[1], " ") 
		cTblTmp  := "TMPSE5"
		
		cQry += "FROM " + RetSqlName("SE5") + " SE5 "
		IF !EMPTY(FK2->FK2_IDCOMP) .AND. FK2->FK2_IDDOC == cChaveFK7
			cQry += "INNER JOIN " + RetSqlName("FK2") + " FK2 "
	    	cQry += "ON FK2.FK2_IDFK2 = SE5.E5_IDORIG "
	    	cQry += "AND FK2.FK2_IDCOMP = '" + cChaveFK7 + "' "
			cQry += "AND FK2.FK2_MOTBX = 'CMP' "
			cQry += "AND FK2.D_E_L_E_T_ = ' ' "
		ENDIF
		cQry += "WHERE SE5.E5_DOCUMEN = ? "
		cQry += "AND SE5.E5_RECPAG = 'P' "
		cQry += "AND SE5.E5_TIPODOC IN ('BA', 'CP') AND SE5.E5_MOTBX = 'CMP' " 
		cQry += "AND SE5.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') "
		cQry += "AND SE5.E5_DATA <= '" + DTOS(dDataBase) + "' "
		
		If lFA340QRY
			cQryAdd := ExecBlock("FA340QRY",.F.,.F.)
			If !Empty(cQryAdd)
				cQry += "AND (" + cQryAdd + ") "
			EndIf 
		EndIf
		
		cQry += "AND SE5.E5_KEY = '" + __cE5_KEY + "' AND SE5.D_E_L_E_T_ = ' ' AND SE5.E5_SEQ NOT IN ("
		cQry += "SELECT EST.E5_SEQ FROM " + RetSqlName("SE5") + " EST "
		IF !EMPTY(FK2->FK2_IDCOMP) .AND. FK2->FK2_IDDOC == cChaveFK7
			cQry += "INNER JOIN " + RetSqlName("FK2") + " FK2 "
	    	cQry += "ON FK2.FK2_IDFK2 = EST.E5_IDORIG "
	    	cQry += "AND FK2.FK2_IDCOMP = '" + cChaveFK7 + "' "
			cQry += "AND FK2.FK2_MOTBX = 'CMP' "
			cQry += "AND FK2.D_E_L_E_T_ = ' ' "
		ENDIF
		cQry += "WHERE EST.E5_DOCUMEN = ? "
		cQry += "AND EST.E5_RECPAG = 'R' AND EST.E5_TIPODOC = 'ES' "
		cQry += "AND EST.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') "
		cQry += "AND EST.E5_KEY = '" + __cE5_KEY +"' AND EST.E5_MOTBX = 'CMP' AND EST.D_E_L_E_T_ = ' ') "
		
		cQry := ChangeQuery(cQry)
		oCanMov := FWPreparedStatement():New(cQry)
		oCanMov:SetString(1, cDocumen)
		oCanMov:SetString(2, cDocumen)
		cQry := oCanMov:GetFixQuery()
		
		If __oFina340 != Nil
			//-- Limpa registros para nova execução
			cTblTmp := __oFina340:GetAlias()		
			nTcSql := TcSQLExec("DELETE FROM " + __oFina340:GetRealName() )
			If nTcSql < 0
				//-- Se ocorrer algum problema refaz a temporaria
				__oFina340:Delete()
				__oFina340 := Nil
			Else // Necessária para atualização do Alias após deleção dos dados 
				(cTblTmp)->(dbGoTo(1))
			EndIf
		EndIf
		If __oFina340 == Nil
			//Cria Alias Temporário com os RECNOs a excluir
		
			__oFina340 := FWTemporaryTable():New(cTblTmp)  
			__oFina340:SetFields(FieldsBr())
			__oFina340:AddIndex("1",	{"OK"})
			__oFina340:AddIndex("2",	{"SEQ"})
			__oFina340:Create()

		EndIf
		
		cInsert := "INSERT "
		
		If cDb == "ORACLE"
			cInsert += " /*+ APPEND */ "
		ElseIf cDb == "DB2"
			cQry := STRTRAN(cQry, "FOR READ ONLY", "")
		EndIf
		
		cInsert += "INTO " + __oFina340:GetRealName() + cCampos + cQry
		Processa({|| nErro := TcSQLExec(cInsert)})
		
		If nErro >= 0
			(cTblTmp)->(DbGoTop())
	
			If (cTblTmp)->(Eof())
				Help(" ", 1, "TITNOCOMP", Nil, STR0110, 1, 0 )
			Else
				(cTblTmp)->(DbSetOrder(2))
				(cTblTmp)->(DbGoTop())
				While (cTblTmp)->(!Eof()) 
					SE5->(DbGoto((cTblTmp)->RECNO))
					RecLock(cTblTmp)
					if cDb $ "DB2|ORACLE" 
						(cTblTmp)->PREFIXO := SE5->E5_PREFIXO
						(cTblTmp)->PARCELA := SE5->E5_PARCELA
					endIf				
					(cTblTmp)->OK := Iif(F340ImpBxC((cTblTmp)->RECNO),'',cMarca) //Se tem imposto filho baixado então não marca
					If !Empty((cTblTmp)->OK)
						(cTblTmp)->OK := Iif(Fa340VldDt((cTblTmp)->DTAMOV,nOpc,.T.), cMarca, '')
					EndIf
					lNaoTodos := lNaoTodos .or. ((cTblTmp)->OK != cMarca)
					(cTblTmp)->(MsUnlock())
					(cTblTmp)->(DbSkip())
				EndDo	
				(cTblTmp)->(DbGoTop())
			EndIf
		Else
			cTblTmp := ""
			Help(" ", 1, "F340TMP", Nil, STR0111, 1, 0 )
		EndIf 
	EndIf

	if lNaoTodos 
		Help(nil,nil,"F340NCTDS",,STR0134, 4, 0) //"Nem todos os títulos puderam ser selecionados. Selecione individualmente para ver o motivo." 
	endif
	
	RestArea(aArea)
Return cTblTmp 

//-------------------------------------
/*/{Protheus.doc}FA340Mark
Função para marcar e desmarcar
@author Sivaldo Oliveira
@since 03/11/18
@version 12
/*/
//-------------------------------------
Function FA340Mark(cTblTmp As Character, oMark As Object, cMarca As Character, lTodos As Logical, nOpc As Numeric)
	Local lRet As Logical
	Local nRec As Numeric
	local lNaoTodos as logical
	
	Default cTblTmp := ""
	Default oMark   := Nil
	Default cMarca  := "" 
	Default lTodos  := .F.
	Default nOpc 	:= 4

	If __lBxDtFin == Nil
		__lBxDtFin := SuperGetMv("MV_BXDTFIN",,"1") == "2"
	EndIf

	//Inicializa variáveis
	nRec 	:= 0
	lRet 	:= !Empty(cTblTmp) .And. oMark != Nil .And. !Empty(cMarca) 
	lNaoTodos := .F.
	
	If lRet
		nRec := (cTblTmp)->(Recno())
		(cTblTmp)->(DbSetOrder(2))
		
		If lTodos
			(cTblTmp)->(DbGotop())	
		EndIf
		
		While (cTblTmp)->(!Eof())
			RecLock(cTblTmp)
			
			If (cTblTmp)->OK == cMarca
				(cTblTmp)->OK := ""	
			Else
				if F340ImpBxC((cTblTmp)->RECNO)
					if lTodos
						lNaoTodos := .T.
					else
						Help(nil,nil,"TITIMPBX",,STR0135, 4, 0,,,,,,{STR0136}) /*"Esse título possui impostos e ao menos um desses impostos já sofreu baixa." "Cancele a baixa dos impostos para poder cancelar a compensação."*/
					endif
				else
					(cTblTmp)->OK := cMarca
				endif
				If __lBxDtFin
					If !Empty(AllTrim((cTblTmp)->OK)) 
						lRet := Fa340VldDt((cTblTmp)->DTAMOV , nOpc, lTodos) // DtMovFin((cTblTmp)->DTAMOV,!lTodos,"1")
						If !lRet
							(cTblTmp)->OK := ''
							If lTodos
								lNaoTodos 		:= .T.
							EndIf
						EndIf
					EndIf
				EndIf
			EndIf

			(cTblTmp)->(MsUnlock())
			
			If lTodos
				(cTblTmp)->(DbSkip())	
			Else
				Exit
			EndIf
		EndDo
		
		(cTblTmp)->(DbGoto(nRec))
		oMark:oBrowse:Refresh(.T.)
	EndIf

	if lNaoTodos 
		Help(nil,nil,"F340NCTDS",,STR0134, 4, 0) //"Nem todos os títulos puderam ser selecionados. Selecione individualmente para ver o motivo."
	endif
Return Nil 

//-------------------------------------
/*/{Protheus.doc}FieldsBr
Cria os campos p/ uso das funções:msselect e fwtemporaryTable
@author Sivaldo Oliveira
@since 03/11/18
@version 12
/*/
//-------------------------------------
Static Function FieldsBr(lMsSelect As Logical)
	Local aCampo As Array
	
	Default lMsSelect := .F.
	
	//Inicializa variáveis.
	aCampo := {}
	
	If !lMsSelect
		Aadd(aCampo, {"OK",      "C", 2,  0})
		Aadd(aCampo, {"PREFIXO", "C", TamSX3("E5_PREFIXO")[1],  0})
		Aadd(aCampo, {"NUMERO",  "C", TamSX3("E5_NUMERO")[1],   0})
		Aadd(aCampo, {"PARCELA", "C", TamSX3("E5_PARCELA")[1],  0})
		Aadd(aCampo, {"TIPO",    "C", TamSX3("E5_TIPO")[1],     0})
		Aadd(aCampo, {"DTAMOV",  "D", 10, 0})
		Aadd(aCampo, {"DOCUMEN", "C", TamSX3("E5_DOCUMEN")[1],  0})
		Aadd(aCampo, {"SEQ",     "C", TamSX3("E5_SEQ")[1],      0})
		Aadd(aCampo, {"VALOR",   "N", 16, 2})
		Aadd(aCampo, {"VRETPIS", "N", 16, 2})
		Aadd(aCampo, {"VRETCOF", "N", 16, 2})
		Aadd(aCampo, {"VRETCSL", "N", 16, 2})
		Aadd(aCampo, {"VRETIRF", "N", 16, 2})
		Aadd(aCampo, {"VRETISS", "N", 16, 2})
		Aadd(aCampo, {"RECNO",   "N", 14, })
	Else
		Aadd(aCampo, {"OK",      Nil, "  ", " "})
		Aadd(aCampo, {"PREFIXO", Nil, STR0006, "@X"})
		Aadd(aCampo, {"NUMERO",  Nil, STR0007, "@X"})
		Aadd(aCampo, {"PARCELA", Nil, STR0008, "@X"})
		Aadd(aCampo, {"TIPO",    Nil, STR0009, "@X"})
		Aadd(aCampo, {"DTAMOV",  Nil, STR0020, "@X"})
		Aadd(aCampo, {"DOCUMEN", Nil, STR0021, "@X"})
		Aadd(aCampo, {"SEQ",     Nil, STR0022, "@X"})
		Aadd(aCampo, {"VALOR",   Nil, STR0017, "@E 9,999,999,999.99"})
	EndIf
Return aCampo

//-------------------------------------
/*/{Protheus.doc}Fa340Tit
Gera Tabela com os titulos

@param cNumCont - Numero do contrato
@param cPedFIE  - Numero do pedido de compra 

@author Valter G. Nogueira
@since  18/03/94
@version 12
/*/
//-------------------------------------
Static Function Fa340Tit(cNumCont As Character, cPedFIE As Character) As Array
	Local aAreaSE2  := SE2->(GetArea())
	Local lMarca	:= .F.
	Local aAreaSM0	:= SM0->(GetArea())
	Local cEmpAnt	:= SM0->M0_CODIGO
	Local cCondicao := ""
	Local nX		:= 0
	Local nSldTit	:= 0
	Local lAdiciona	:= .T.
	Local cCondic 	:= ""
	Local lPrimeiro := .T.
	Local lGestao   := Iif(lFWCodFil, FWSizeFilial() > 2, .F. )
	Local cFilFwSE2 := IIF(lGestao, FwFilial("SE2"), xFilial("SE2"))
	Local aStru 	:= SE2->(dbStruct())
	Local cAliasSE2 := ""
	Local cEmpresa	:= FWCodEmp()
	Local nTaxaMov  := 0
	Local nTotMov 	:= 0
	Local nMovTit 	:= 0
	Local nVlrCmp 	:= 0
	Local nLimCmp 	:= 0
	Local aMovPA    := {}
	Local dDtMov    := dDataBase
	Local cPicture  := ""
	Local nSldOld   := 0
	Local lAutomat  := Len(__aRetAuto) > 0
	Local cFilOld   := cFilAnt
	Local aAdianta	:= ProtCfgAdt()
	Local bFilFIE   := IIF(!Empty(aAdianta),Iif(aAdianta[1,4],{|| FIE_FILORI==cFilAnt .Or. Empty(FIE_FILORI)},{||.T.}),{||.F.}) //FIE_FILOI vazio para o legado
	Local cChaveFIE := ''
	Local lAdtPed   := .F.
	Local lTravaDIC := .F.
	Local lDICZera  := .F.
	Local nMovTitAux := 0
	Local nTotMovAux := 0
	Local cTpTitSel := ""
	Local lRetImpBx := .F.
	Local lTipoDic 	:= SE2->E2_TIPO == "DIC"
	Local nRegParc	:= 0 
	Local nDif1Cent	:= 0
	Local cFilE2	:= ""

	Default cNumCont := ""
	Default cPedFIE  := ""
		
	If cPaisLoc == "BRA"
		cPicture := "@E 9999,999,999." + PadR("", __nCasDec, "9")
	Else
		SCU->(DbSetOrder(2))
	Endif
	
	SM0->(dbSeek(cEmpAnt, .T.))
	
	aTitulos := {}
	aRecNo   := {}
	Pergunte("AFI340",.F.)
	
	//Quando a compensação de adiantamento automático está submetida ao MV_IMPCOM = .T.
	If __lCmpM103 .and. Len(__aParCTB) > 0
        mv_par11  := If (__aParCTB[01], 1, 2)		//Contabiliza
        lAglutina := __aParCTB[02]					//Aglutina
        lDigita	  := __aParCTB[03]					//Digita
	Endif

	For nX:= 1 to Len(aStru)
		cCondicao += aStru[nX,1]+", "
	Next
	
	//Define o valor a ser compensado.
	If __nSldCmp > 0
		nVlrCmp := __nSldCmp
	Else
		nVlrCmp  := If(Empty(nValor), nSaldo, nValor)
	Endif	
	
	__nTotal := nVlrCmp 
	
	//Filtro dos títulos a serem compennsados.
	cAliasSE2 := FA340QryTi(cCondicao, cNumCont)
	
	If !Empty(cAliasSE2) 
		While SM0->(!Eof()) .And. (cAliasSE2)->(!Eof()) .And. SM0->M0_CODIGO == cEmpAnt
			cFilAnt  := IIf(lFWCodFil, FWGETCODFILIAL, SM0->M0_CODFIL )
			
			If cEmpresa != FWCodEmp()
				SM0->(DbSkip())
				Loop
			Endif
			
			If Empty((cAliasSE2)->E2_FILORIG)
				(cAliasSE2)->(DbSkip())
				Loop
			EndIf
			
			If (cAliasSE2)->E2_TIPO $ MVTAXA+"|INS" .And. (cAliasSE2)->E2_OK == "LP" .And. F340SldTx(cAliasSE2) <= 0
				(cAliasSE2)->(DbSkip())
				Loop			
			EndIf	

			//ANGOLA|BRASIL - Nao permitir compensar titulos de adiantamento relacionados a pedido
			If cPaisLoc $ "ANG|BRA|MEX" .And. !__lCmpM103 
				FIE->(dbSetOrder(3))
				cChaveFIE := xFilial("FIE", (cAliasSE2)->E2_FILORIG)+"P"+(cAliasSE2)->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)
				If FIE->(MsSeek(cChaveFIE))
					While FIE->(! Eof()) .And. FIE->(FIE_FILIAL+FIE_CART+FIE_FORNEC+FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO) == cChaveFIE
						lAdtPed := FIE->(Eval(bFilFIE))
						iF lAdtPed 
							Exit
						EndIf	
						FIE->(dbSkip())
					EndDo
					If lAdtPed
						(cAliasSE2)->( dbSkip() )
						Loop
					EndIf	
				Endif
			Endif
			
			While (cAliasSE2)->(!Eof()) .And. (cAliasSE2)->E2_FILIAL == xFilial("SE2", (cAliasSE2)->E2_FILORIG)
				dDtMov    := dDataBase
				lMarca    := .F.
				nTaxaMov  := 0
				lRetImpBx := .F.
				
				If lAutomat .And. Ascan(__aRetAuto, AllTrim((cAliasSE2)->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA))) <= 0
					(cAliasSE2)->(dbSkip())
					Loop
				EndIf 
				
				If (cAliasSE2)->E2_INSS = 0 .And. cPaisLoc $ "ANG|ARG|BRA|COS|EQU" .And. !__lPaBruto .And. __lPaPrime  .And. __lProvImp .And. __lBxVlLiq
					If SED->(MsSeek(xFilial("SED",(cAliasSE2)->E2_FILORIG)+(cAliasSE2)->E2_NATUREZ)) .And. SED->ED_RINSSPA == "1"
						(cAliasSE2)->( dbSkip() )
						Loop
					EndIf
				EndIf

				//Não considerar adiantamentos que estejam amarrados a pedido de compra.
				If cPaisLoc $ "ANG|BRA|MEX" .and. !__lCmpM103
					lAdtPed := .F.
					If (cAliasSE2)->E2_FILORIG != cFilAnt
						cFilE2	:= cFilAnt
						cFilAnt := (cAliasSE2)->E2_FILORIG
					EndIf
					If FinAdtSld("P", (cAliasSE2)->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)/*, (cAliasSE2)->E2_FILORIG*/)
						(cAliasSE2)->( dbSkip() )
						lAdtPed := .T.
					EndIf
					If !Empty(cFilE2)
						cFilAnt	:= cFilE2
						cFilE2	:= ""
					EndIf
					If lAdtPed
						Loop
					Endif
				Endif
				
				If lFina340
					lRet := Execblock("FA340FILT",.F.,.F.,{__nRecPart})
					If !lRet
						(cAliasSE2)->( dbSkip() )
						Loop
					Endif
				Endif
				
				//Verifica PA se tem movimento no SE5
				If (cAliasSE2)->E2_TIPO $ MVPAGANT
					aMovPA := F340MovPA(Nil, cAliasSE2, .T.)
					
					If aMovPA[1]
						dDtMov    := aMovPA[2]
					Else
						(cAliasSE2)->(DbSkip())
						Loop
					EndIf 
				EndIf

				If cPaisLoc == "BRA"
					// Não aplica validação de cheque liberado para (Aglutinação de IRRF - FINA375)
					If !( MV_PAR10 == 2 .And. AllTrim((cAliasSE2)->E2_TIPO) $ MVTXA .And. AllTrim((cAliasSE2)->E2_NUMTIT) $ "FINA375" .And. AllTrim((cAliasSE2)->E2_PREFIXO) == "AGL" )
						// Identifica se o Adiantamento possui cheque Liberado.
						If (cAliasSE2)->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|INA|DIC"
							lAdiciona := .T.
							SEF->(DbSetOrder(3))
							SEF->(MsSeek(xFilial("SEF", (cAliasSE2)->E2_FILORIG)+(cAliasSE2)->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+Pad(E2_NUMBCO,Len(SEF->EF_NUM)))))
							
							If mv_par01 == 1 .And. mv_par02 == 1
								cCondic := cAliasSE2 + '->E2_FORNECE == SEF->EF_FORNECE .And. ' + cAliasSE2 + '->E2_LOJA == SEF->EF_LOJA .And. SEF->EF_LIBER == "N"'
							Elseif (mv_par01 == 2 .And. mv_par02 == 1) .Or. (mv_par02 == 2)
								cCondic := cAliasSE2 + '->E2_FORNECE == SEF->EF_FORNECE .And. SEF->EF_LIBER == "N"'
							Else
								cCondic := 'SEF->EF_LIBER == "N"'
							Endif
							
							While !SEF->(Eof()) .And. SEF->(EF_PREFIXO+EF_TITULO+EF_PARCELA+EF_TIPO+EF_NUM)==(cAliasSE2)->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+Pad(E2_NUMBCO,Len(SEF->EF_NUM)) )
								If &cCondic
									lAdiciona := .F.
									Exit
								Endif
								SEF->(dbSkip())
							EndDo
							If !lAdiciona
								(cAliasSE2)->(DbSkip())
								Loop
							EndIf
						EndIf
					EndIf
				EndIf
									
				//Caso esteja ligado o controle de solicitacao de notas de credito e exista alguma pendencia para este titulo
				If cPaisLoc <> "BRA"
					SCU->(DbSetOrder(2))
				EndIf
				
				nTaxaMov := __nTxMoedP
				
				If (cAliasSE2)->E2_MOEDA != 1

					nTaxaMov := (cAliasSE2)->E2_TXMOEDA

					If !Empty(__nTxDesAl) .And. lAutomat //Taxa informada na compensacao automatica
						nTaxaMov := __nTxDesAl
					ElseIf __lTxPrCon
						If !Empty(aTxMoedas[(cAliasSE2)->E2_MOEDA, 2])
							nTaxaMov := aTxMoedas[(cAliasSE2)->E2_MOEDA, 2]
						EndIf
					EndIf 

					If Empty(nTaxaMov)
						nTaxaMov := RecMoeda(dDtMov, (cAliasSE2)->E2_MOEDA)					
					EndIf
				EndIf
				
				If (nMoeda340 != 1 .Or. (cAliasSE2)->E2_MOEDA != 1)
					//Se um dos títulos não possui taxa, pega a taxa de mov da contra partida
					If __lNoTxMov
						__nTxMoedP := nTaxaMov
					ElseIf Empty(nTaxaMov)
						nTaxaMov := __nTxMoedP	
					EndIf
					
					//Não compensa títulos moedas estrang s/ taxa de moeda
					If Empty(__nTxMoedP + nTaxaMov) 
						(cAliasSE2)->(DbSkip())
						Loop
					EndIf
				EndIf
				
				nMovTit := 0
				nMovBaix := 0
				nSldTit :=  (cAliasSE2)->(E2_SALDO + E2_SDACRES - E2_SDDECRE)

				If __lCmpM103 .And. (cAliasSE2)->E2_TIPO $ MVPAGANT
					DbSelectArea("FIE")
					FIE->(dbSetOrder(3))
					cChaveFIE := xFilial("FIE", (cAliasSE2)->E2_FILORIG)+"P"+(cAliasSE2)->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)+cPedFIE
					If FIE->(MsSeek(cChaveFIE))
						nSldTit := FIE->FIE_SALDO
					Endif
				Endif
				
				//Permite ao usuário calcular o valor do titulo NDF ou PA a ser compensado
				If __lF340CMP
					nSldTit := ExecBlock("F340CMP",.F.,.F.)
				EndIf			
				
				If cPaisLoc == "BRA"
					If !(cAliasSE2)->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
						__nVlrAbt := SomaAbat((cAliasSE2)->E2_PREFIXO,(cAliasSE2)->E2_NUM,(cAliasSE2)->E2_PARCELA,"P",(cAliasSE2)->E2_MOEDA,,(cAliasSE2)->E2_FORNECE,(cAliasSE2)->E2_LOJA)
						nSldTit -= __nVlrAbt 
					EndIf					
					
					//Converte o valor para a moeda de partida.
					nSldTit := FA340Valor(nSldTit, (cAliasSE2)->E2_MOEDA, nMoeda340, dDtMov, nTaxaMov, __nTxMoedP, .F.)
				
					If (lTipoDic .Or. (!lTipoDic .And. (cAliasSE2)->E2_TIPO == "DIC"))  
						lRetImpBx := F340ImpBx(.F., Iif(lTipoDic, cAliasSE2, "SE2"))
					EndIf
				ElseIf cPaisLoc == "BOL"
					nSldTit	:= xMoeda(nSldTit, (cAliasSE2)->E2_MOEDA, nMoeda340, dDatabase, 5, aTxMoedas[E2_MOEDA][2], aTxMoedas[nMoeda340][2])
				Else
					nMoedTit := Iif(aTxMoedas[E2_MOEDA][2] != 0, aTxMoedas[E2_MOEDA][2], Iif((cAliasSE2)->E2_TXMOEDA != 0, (cAliasSE2)->E2_TXMOEDA, 1)) 
					nSldTit := Round(xMoeda(nSldTit, (cAliasSE2)->E2_MOEDA, nMoeda340, dDatabase, 5, nMoedTit, aTxMoedas[nMoeda340][2]), __nCasDec)
				EndIf
				
				nSldOld := nSldTit
				
				If nTotMov < nVlrCmp
					cTpTitSel := AllTrim( (cAliasSE2)->E2_TIPO )
					
					//Não deixa carregar a tela com DIC e PA/NDF selecionados ao mesmo tempo, para garantir que o DIC não será compensado por último e que os impostos sejam retidos corretamente
					If cTpTitSel == "DIC"
						If  __nQtdePA > 0
							lTravaDIC := .T.
						EndIf
					ElseIf cTpTitSel $ ( MVPAGANT + "|" + MV_CPNEG )
						If __nQtdeDIC > 0
							lTravaDIC := .T.
						EndIf
					EndIf

					If !lTravaDIC
						
						If (nTotMov + nSldTit) > nVlrCmp
							nMovTitAux := (nVlrCmp - nTotMov) 
							nTotMovAux := nMovTitAux
						Else
							nTotMovAux := nSldTit
							nMovTitAux := nSldTit
						EndIf

						lDICZera := .F.
						If cTpTitSel == "DIC"
							If nTotMovAux + nTotMov >= nVlrCmp
								lDICZera := lRetImpBx
							EndIf
						ElseIf AllTrim(SE2->E2_TIPO) == "DIC"
							If nVlrCmp >= nSldTit
								lDICZera := lRetImpBx
							EndIf
						EndIf

						If !lDICZera
							lMarca := .T.
							
							nMovTit := nMovTitAux
							nTotMov += nTotMovAux
							
							nMovBaix := nMovTit

							If cTpTitSel == "DIC" 
								__nQtdeDIC ++
							ElseIf cTpTitSel $ ( MVPAGANT + "|" + MV_CPNEG )
								__nQtdePA ++
							EndIf
						EndIf
					EndIf
				EndIf
				
				If cPaisLoc <> "BRA" .and. GetMv('MV_SOLNCP') .And. (cAliasSE2)->E2_TIPO == MVNOTAFIS .And. SCU->(MsSeek(xFilial()+(cAliasSE2)->(E2_FORNECE+E2_LOJA+E2_NUM+E2_PREFIXO))) .And. Empty(SCU->CU_NCRED)
					lMarca   := .F. 
				EndIf			
				
				nLimCmp := nSldTit 
				nSldTit := nSldOld
				
				If cPaisLoc == "BRA"
						Aadd(aTitulos, {;
						(cAliasSE2)->E2_PREFIXO,; 									//1 - Prefixo
						(cAliasSE2)->E2_NUM,; 										//2 - Título
						(cAliasSE2)->E2_PARCELA,; 									//3 - Parcela
						(cAliasSE2)->E2_TIPO,; 										//4 - Tipo
						Transform(nSldTit, "@E 9999,999,999.99"),;					//5 - Saldo
						Transform(nMovTit, "@E 9999,999,999.99"),;					//6 - Valor a ser compensado
						(cAliasSE2)->E2_NOMFOR,; 									//7 - Nome Fornecedor
						lMarca,; 													//8 - Título marcado p/ compensação
						Transform(nLimCmp, cPicture),; 								//9 - Limite de compensacao
						Transform((cAliasSE2)->E2_SDACRES, cPicture),; 				//10- Acréscimo
						Transform((cAliasSE2)->E2_SDDECRE, cPicture),; 				//11- Decréscimo
						STOD((cAliasSE2)->E2_EMISSAO),; 							//12- Emissão
						STOD((cAliasSE2)->E2_VENCREA),; 							//13- Vencto Real
						(cAliasSE2)->E2_FORNECE,; 									//14- Cód. Fornecedor
						(cAliasSE2)->E2_LOJA,; 										//15- Loja
						(cAliasSE2)->E2_FILIAL,; 									//16- Filial
						(cAliasSE2)->E2_BASEPIS,; 									//17- Base imposto
						(cAliasSE2)->E2_VALOR,;										//18- Valor inclusão
						0,;															//19- Total impos retidos
						nMovBaix,;													//20- Valor a ser baixado do PA
						nTaxaMov,;													//21- Taxa da moeda (SM2 ou Tx contradada)
						nMovBaix,;													//22- Valor a ser baixado da NF
						__nVlrAbt,;													//23- Valor do abatimento
						lRetImpBx})													//24- Indica se há retenção de imposto na baixa
				Else
					If cPaisLoc == "BOL"
						Aadd(aTitulos, {;
						(cAliasSE2)->E2_PREFIXO,;
						(cAliasSE2)->E2_NUM,;
						(cAliasSE2)->E2_PARCELA,;
						(cAliasSE2)->E2_TIPO,;
						Transform(Round(xMoeda((cAliasSE2)->E2_SALDO+(cAliasSE2)->E2_SDACRES-(cAliasSE2)->E2_SDDECRE,(cAliasSE2)->E2_MOEDA,nMoeda340,E2_EMISSAO,__nCasDec,aTxMoedas[(cAliasSE2)->E2_MOEDA][2],aTxMoedas[nMoeda340][2]),__nCasDec),"@E 9999,999,999.99"),;
						Transform(nMovTit,"@E 9999,999,999.99"),;
						(cAliasSE2)->E2_NOMFOR,;
						lMarca,;
						(cAliasSE2)->E2_MOEDA,;
						(cAliasSE2)->E2_EMISSAO,;
						Transform(xMoeda((cAliasSE2)->E2_SDACRES,(cAliasSE2)->E2_MOEDA,nMoeda340,,5),"@E 9999,999,999.99"),;
						Transform(xMoeda((cAliasSE2)->E2_SDDECRE,(cAliasSE2)->E2_MOEDA,nMoeda340,,5),"@E 9999,999,999.99"),;
						nMovTit,;
						(cAliasSE2)->E2_FORNECE,;
						(cAliasSE2)->E2_LOJA,;
						(cAliasSE2)->E2_FILIAL})
					ElseIf cPaisLoc == "RUS"
						Aadd(aTitulos,{;
							(cAliasSE2)->E2_PREFIXO,;
							(cAliasSE2)->E2_NUM,;
							(cAliasSE2)->E2_PARCELA,;
							(cAliasSE2)->E2_TIPO,;
							Transform((cAliasSE2)->E2_SALDO,PesqPict("SE2","E2_SALDO")),;
							Transform(nMovTit,PesqPict("SE2","E2_SALDO")),;
							(cAliasSE2)->E2_NOMFOR,;
							lMarca,;
							(cAliasSE2)->E2_MOEDA,;
							(cAliasSE2)->E2_EMISSAO,;
							(cAliasSE2)->E2_FORNECE,;
							(cAliasSE2)->E2_LOJA,;
							(cAliasSE2)->E2_FILIAL,;
							(cAliasSE2)->E2_CONUNI,; 
							(cAliasSE2)->E2_F5QCODE,;
							Transform((cAliasSE2)->E2_VALOR,PesqPict("SE2","E2_VALOR")),;
							Transform((cAliasSE2)->E2_VLCRUZ,PesqPict("SE2","E2_VLCRUZ")),;
							AllTrim(Posicione("CTO",1,xFilial("CTO") + StrZero((cAliasSE2)->E2_MOEDA, GetSX3Cache("CTO_MOEDA", "X3_TAMANHO")), "CTO_SIMB")),;
							(cAliasSE2)->E2_VENCTO})						
					Else
						Aadd(aTitulos, {;
						(cAliasSE2)->E2_PREFIXO,;
						(cAliasSE2)->E2_NUM,;
						(cAliasSE2)->E2_PARCELA,;
						(cAliasSE2)->E2_TIPO,;
						Transform(Round(xMoeda((cAliasSE2)->E2_SALDO+(cAliasSE2)->E2_SDACRES-(cAliasSE2)->E2_SDDECRE,(cAliasSE2)->E2_MOEDA,nMoeda340,dDatabase,5,iif(aTxMoedas[E2_MOEDA][2]!=0,aTxMoedas[E2_MOEDA][2],iif((cAliasSE2)->E2_TXMOEDA!=0,(cAliasSE2)->E2_TXMOEDA,1)),aTxMoedas[nMoeda340][2]),__nCasDec),"@E 9999,999,999.99"),;
						Transform(nMovTit,"@E 9999,999,999.99"),;
						(cAliasSE2)->E2_NOMFOR,;
						lMarca,;
						(cAliasSE2)->E2_MOEDA,;
						(cAliasSE2)->E2_EMISSAO,;
						Transform(xMoeda((cAliasSE2)->E2_SDACRES,(cAliasSE2)->E2_MOEDA,nMoeda340,,5),"@E 9999,999,999.99"),;
						Transform(xMoeda((cAliasSE2)->E2_SDDECRE,(cAliasSE2)->E2_MOEDA,nMoeda340,,5),"@E 9999,999,999.99"),;
						(cAliasSE2)->E2_FORNECE,;
						(cAliasSE2)->E2_LOJA,;
						(cAliasSE2)->E2_FILIAL})
					EndIf
				EndIf
			    
				Aadd(aRecNo, (cAliasSE2)->E2_RECNO)
			    (cAliasSE2)->(DbSkip())
				
				If __lNoTxMov
					__nTxMoedP := 0
				EndIf
			EndDo
			
			SM0->(DbSkip())
			
			If Empty(cFilFwSE2)
				exit
			Endif
		EndDo
		
		(cAliasSE2)->(dbCloseArea())
		nValTot := 0
		__nVlrAbt := 0
		RestArea(aAreaSM0)
		RestArea(aAreaSE2)
		cFilAnt := cFilOld
		
		For nX := 1 to Len(aTitulos)
			If aTitulos[nX, 8]
				If F340Semaforo(aTitulos[nX], .T., aRecno[nX],,,,.F.)
					nValtot += Fa340VTit(aTitulos[nX,6])
					If aTitulos[nX][5] <> aTitulos[nx][6]
						nRegParc:= nX
					EndIf
					If cPaisLoc == "RUS"
						cSaldo :=  TRANSFORM((nValor - nValtot), "@E 9999,999,999.99")						
					EndIf					
				Else
					aTitulos[nX,8] := .F.
				Endif
			Endif
		Next
			
		nDif1Cent	:= nVlrCmp - nValTot	
		If nRegParc > 0 .And. Abs(nDif1Cent) == 0.01			
			nValTot		:= nVlrCmp		
			aTitulos[nRegParc,20]	+= nDif1Cent		
			aTitulos[nRegParc,22]	+= nDif1Cent		
			aTitulos[nRegParc,6]	:= Transform(aTitulos[nRegParc,20], "@E 9999,999,999.99")							
		EndIf
			
		//Validação dos documentos obrigatórios
		If __lFinVDoc
			FA340ValDocs(aTitulos,.T.,,.T.,@lPrimeiro)
		EndIf
	EndIf
	
	RestArea(aAreaSM0)
	RestArea(aAreaSE2)
	cFilAnt := cFilOld
Return aTitulos
		
//------------------------------------
/*/{Protheus.doc}Fa340VTit
Retorna o saldo ou valor do titulo a ser compensado

@author Mauricio Pequim Jr
@since  14/01/99
@version 8
/*/
//------------------------------------
STATIC Function Fa340VTit(aTitulo,cTipoTit,cValor)
	LOCAL nValor
	
	cValor := IIF (cValor == NIL, aTitulo, cValor)
	If cPaisLoc != "RUS"	//Bug fix, DesTrans("5 000,00") returns 5, in Lobo-Guara.
		nValor := DesTrans(cValor)
	Else
		nValor := DesTrans(StrTran(cValor, " ", ""))
	EndIf
Return nValor
		
//------------------------------------
/*/{Protheus.doc}Fa340Tit1
Retorna o saldo ou valor do titulo a ser compensado
@author Marcos Patricio
@since  19/12/95
@version 8
/*/
//------------------------------------
Static Function FA340Tit1()
	Local lRet  :=.T.
	Local aArea := SE2->(GetArea())
	
	If __lFA340ORD
		SE2->(DbSetOrder(ExecBlock("FA340ORD",.F.,.F.)))
		__cOrder := SqlOrder(SE2->(IndexKey()))
	Endif
	
	SE2->(DbSetOrder(6))	
	If !SE2->(dbSeek(xFilial("SE2", SE2->E2_FILORIG)+cFornece+cLoja+cPrefixo+cNum+cParcela+cTipoTit))
		SE2->(DbSetOrder(1))
		Help(" ", 1, "NOTIT")
		lRet :=.F.
	EndIf
	
	RestArea(aArea)
Return lRet
		
//------------------------------------
/*/{Protheus.doc}FA340OK
Confirma a marcacao dos titulos para compensacao
@author Marcos Patricio
@since  19/12/95
@version 8
/*/
//------------------------------------
Static Function FA340OK()
	Local lF340ValOk := ExistBlock("f340ValOk")
	Local lRet       := .t.
	
	If UsaSeqCor()
		If !CTBvldDiario(cCodDiario,dDataBase)
			Return(.f.)
		EndIf
	EndIf

	
	If lF340ValOk
		lRet := ExecBlock("F340ValOk", .f., .f., {aTitulos})
		If lRet == Nil
			lRet := (MsgYesNo(OemToAnsi(STR0024),OemToAnsi(STR0018)))  //"Confirma marcao de T¡tulos ?"###"Ateno"
		EndIf
	Else
		lRet :=	(MsgYesNo(OemToAnsi(STR0024),OemToAnsi(STR0018)))  //"Confirma marcao de T¡tulos ?"###"Ateno"
	EndIf

Return lRet
		
//------------------------------------
/*/{Protheus.doc}Fa340Troca
Troca o flag para marcado ou nao, aceitando valor
@author Marcos Patricio
@since  19/12/95
@version 8
/*/
//------------------------------------
Static Function FA340Troca(nIt, aArray, oGet, lAutomato)
	Local nOpca As Numeric
	Local nI As Numeric
	Local nX As Numeric
	Local nAcresc As Numeric
	Local nDecrec As Numeric
	Local nVlrLim As Numeric
	Local nDif As Numeric
	Local lValDocs As Logical
	Local lRet As Logical
	Local oDlg As Object
	Local nSldTitSel As Numeric
	Local lTravaDIC As Logical
	Local lRetImpBx As Logical
	Default nIt := 0
	Default aArray := {}
	Default lAutomato:= .F.	
	
	//Inicialiva variáveis
	nOpca 		:= 0
	nI 			:= 0
	nX 			:= 0
	nAcresc 	:= 0
	nDecrec 	:= 0
	nVlrLim 	:= 0
	nVlrSel 	:= 0
	nDif 		:= 0
	lValDocs 	:= .T.
	lRet 		:= !Empty(nIt)
	oDlg 		:= Nil
	lTravaDIC   := .F.
	lRetImpBx   := .F.
	
	//Caso esteja ligado o controle de solicitacao de notas de credito e exista alguma pendencia para este titulo
	If lRet .And. cPaisLoc != "BRA"
		If !aArray[nIt,8] .And. aTitulos[nIt,4] == MVNOTAFIS .And. SuperGetMv('MV_SOLNCP', .F., .F.)
			SCU->(DbSetOrder(2))
			If SCU->(MsSeek(xFilial() + SE2->(E2_FORNECE+E2_LOJA) + aTitulos[nIt,2] + aTitulos[nIt,1] )).And. Empty(SCU->CU_NCRED)
				Help(" ", 1, "SOLNCPAB")
				lRet := .F.
			Endif
		Endif
	EndIf
	
	If lRet 
		If cPaisLoc == "BRA"
			nVlrLim := DesTrans(aTitulos[nIt,9])
			lRetImpBx := aTitulos[nIt,24] 
		Else		
			nVlrLim := Fa340VTit(aTitulos[nIt,5])	
		EndIf
		
		nVlrSel := nVlrLim
		
		If !aArray[nIt,8]
			If __lFinVDoc
				If !FA340ValDocs(aArray[nIt])
					lValDocs := .F.
				EndIf
			EndIf
		EndIf
		
		If lValDocs
			aArray[nIt,8] := !aArray[nIt,8]
		EndIf
		
		If cPaisLoc $ "EUA|RUS"
			nDif := __nTotal - (nValtot - Val(aArray[nIt,6]))
		Else
			nDif := __nTotal - (nValtot - aArray[nIt,20])
		EndIf
		
		If Empty(nDif)
			lRet := .F.
			aArray[nIt,8] := lRet 
		EndIf
		
		//Trava para não deixar selecionar PA/NDF e DIC ao mesmo tempo, para garantir que o usuário compense primeiro o DIC e a base de imposto fique correta no fim do processo
		If aArray[nIt,8]
			If aTitulos[nIt,4] == "DIC"
				If __nQtdePA > 0
					lTravaDIC := .T.
				EndIf
			ElseIf aTitulos[nIt,4] $ ( MVPAGANT + "|" + MV_CPNEG )
				If __nQtdeDIC > 0
					lTravaDIC := .T.
				EndIf
			EndIf

			If lTravaDIC
				lRet := .F.
				aArray[nIt,8] := .F.
				MsgInfo(STR0124, STR0125) //"Para manter a integridade dos impostos, o sistema não permite selecionar DICs simultaneamente com PAs ou notas de débito para o mesmo processo de compensação." ## "Seleção de DIC"
			EndIf
		EndIf

		If lRet
			If aArray[nIt,8]
				If nVlrSel > nDif
					nVlrSel := nDif
				EndIf
				nSldTitSel := DesTrans( aTitulos[nIt,5] )

				If !lAutomato
					DEFINE MSDIALOG oDlg FROM 069,070 TO 160,330 TITLE OemToAnsi(STR0005) PIXEL //Compensação de Títulos a Pagar.
					@ 001, 002 TO 027, 128 OF oDlg  PIXEL
					If cPaisLoc == "RUS"
						cValor :=Iif(nVlrSel > DesTrans(cSaldo),cSaldo,TRANSFORM(nVlrSel, PesqPict("SE2","E2_SALDO")))						
						nVlrSel = DesTrans(cValor)
					ENDIF
					@ 010, 068 MSGET nVlrSel Picture "@E 9999,999,999.99" SIZE 54, 10 OF oDlg Hasbutton PIXEL //Valor dipsonível para compensação
					@ 011, 009 SAY OemToAnsi(STR0014)  SIZE 54, 7 OF oDlg PIXEL //Valor a compensar
					If cPaisLoc != "RUS"					
						DEFINE SBUTTON FROM 29, 71 TYPE 1 ENABLE ACTION (nOpca := 1, If(F340ValSel(nVlrSel, nVlrLim, nDif, aTitulos[nIt,4], nSldTitSel, lRetImpBx), oDLg:End(), nOpca := 0)) OF oDlg
					Else 
						DEFINE SBUTTON FROM 29, 71 TYPE 1 ENABLE ACTION (nOpca:=1,iIf((DesTrans(cValor) <= DesTrans(cSaldo)  .AND. DesTrans(cValor) <= DesTrans(StrTran(aTitulos[nIt,5], " ", "")) .AND. DesTrans(cValor) > 0),oDLg:End(),EVAL({|| Help("",1,"F340VlCrVl",,STR0103,1,0) , nOpca:=0 }))) OF oDlg
					Endif					
					DEFINE SBUTTON FROM 29, 99 TYPE 2 ENABLE ACTION (aArray[nIt,8] := .F., oDlg:End()) OF oDlg

					ACTIVATE MSDIALOG oDlg CENTERED
				Else
					nOpca := 1
				Endif
				
				If nOpca == 1
					If !F340Semaforo(aArray[nIt],.T.,aRecno[nIt])
						lRet := .F.
						aArray[nIt,8] := lRet
					Endif
					
					If lRet
						If cPaisLoc == "BRA"
							aArray[nIt,6] := Transf(nVlrSel, "@E 9999,999,999.99")
							aArray[nIt,20] := nVlrSel
							aArray[nIt,22] := nVlrSel
						Else
							aArray[nIt,6] := Transf(nVlrSel, "@E 9999,999,999.99")
							
							If cPaisLoc == "BOL"
								aArray[nIt,13] := Fa340VTit(aArray[nIt,6])
							EndIf
						EndIf
					EndIf
				Else
					lRet := .F.
					aArray[nIt,8] := .F.
				EndIf
			Else
				If cPaisLoc == "RUS" .And. DesTrans(cSaldo) < nValor
					cSaldo = TRANSFORM(DesTrans(cSaldo) +  DesTrans(StrTran(aArray[nIt,6], " ", "")), "@E 9999,999,999.99")
				EndIf
				aArray[nIt,6]:= Iif(cPaisLoc != "RUS",Transf(0,"@E 9999,999,999.99"),AllTrim(Transf(0,"@E 9999,999,999.99")))
				
				If cPaisLoc == "BRA"
					aArray[nIt,20] := 0
					aArray[nIt,22] := 0
				Endif
				
				F340Semaforo(aArray[nIt],.F.,aRecno[nIt])
			EndIf
			
			//Atualiza o total selecionado
			F340TotSel(aArray)
			
			If oGet != Nil
				oGet:Refresh()
			EndIf
			
			If ExistBlock("F340TOTCP")
				ExecBlock("F340TOTCP",.F.,.F., {  , 2 , nValTot, nValor } )
			EndIf
		EndIf
	EndIf

	If lRet
		If aTitulos[nIt,4] == "DIC"
			If aArray[nIt,8]
				__nQtdeDIC ++
			Else
				__nQtdeDIC --
			EndIf
		ElseIf aTitulos[nIt,4] $ ( MVPAGANT + "|" + MV_CPNEG )
			If aArray[nIt,8]
				__nQtdePA ++
			Else
				__nQtdePA --
			EndIf
		EndIf
	EndIf

Return aArray
		
//--------------------------------------------------------------------------
/*/{Protheus.doc}F340TotSel
Atualiza o valor total selecionado para compensação
@author Sivaldo Oliveira
@since  13/06/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function F340TotSel(aVet As Array)
	Local nI As Numeric
	Local nAvet As Numeric
	
	Default aVet := {}
	nAvet := Len(aVet)
	nValtot := 0

	For nI := 1 To nAvet
		If aVet[nI,8] 
			If cPaisLoc == "BRA"
				nValtot += aVet[nI,20]	
			Else
				nValtot += Fa340VTit(aVet[nI,6])
			EndIf
		EndIf
	Next nI 

Return Nil

//-----------------------------------
/*/{Protheus.doc}Fa340SetMo
Tela de taxas de moedas 
@author Fernando Machima
@since  19/02/01
@version 12
/*/
//-----------------------------------
Function Fa340SetMo()
	Local oDlg
	Local nLenMoedas := Len(aTxMoedas)
	Local nI := 1
	Local nLinTelaF
	Local nLinTelaD
	Local nLinButton
	Local aSay := {}
	Local aGet := {}
	Local cBlKMoeda
	Local lExistM := Type("nMoeda340") == "N" .And. nMoeda340 > 0  
	
	nLinTelaD  := 05  + ((nLenMoedas-1) * 14)
	nLinTelaF  := 200 + ((nLenMoedas-1) * 30.5) + 35
	nLinButton := 03  + nLinTelaD
	
	If nLenMoedas > 1
		DEFINE MSDIALOG oDlg From 200,0 TO nLinTelaF,230 TITLE OemToAnsi(STR0026) PIXEL  //Taxas Moedas
		@ 005,005  To nLinTelaD,110 OF oDlg PIXEL
		
		For nI := 1 To (nLenMoedas-1)
			cBlKMoeda := "{|| aTxMoedas["+AllTrim(Str(ni+1))+",1]}"
			aAdd(aSay, TSay():New(1+(ni*12),010,&cBlKMoeda,oDlg,,, .F., .F., .T.,.T.,,,,, .F., .F., .F., .F.))
			aAdd(aGet, TGet():New((ni*12)-2,060,&("{|x| If(x <> NIL,aTxMoedas["+AllTRim(Str(ni+1))+",2] := x,aTxMoedas["+Str(ni+1)+",2])}"),oDlg,45,,aTxMoedas[nI+1,3],,,,,,,.T.,,,,.F.,.T.,,.F.,.F.,,,,.F.,,.T.))
		Next nI
		
		DEFINE  SButton FROM nLinButton,80 TYPE 1 Action (oDlg:End() ) ENABLE OF oDlg  PIXEL
		ACTIVATE MSDIALOG oDlg CENTERED
		
		If lExistM .And. nI >= nMoeda340
			If !Empty(aTxMoedas[nMoeda340, 2])
				__nTxMoedP := aTxMoedas[nMoeda340, 2]
				__nTxCont  := __nTxMoedP
				__lNoTxMov := Empty(__nTxMoedP)
			EndIF
		EndIf
	Else
		Help("",1,"NoMoneda")
	Endif

Return
		
//-----------------------------------
/*/{Protheus.doc}Fa340TudOk
Validar os campos informados na compensacao 
@author Mauricio`Pequim Jr
@since  24/06/03
@version 12
/*/
//-----------------------------------
Function Fa340TudOk(oDlg, lAutomato)
	Local nX
	Local lRet := .T.
	
	Default lAutomato := .F.
	
	If !lAutomato
		For nX := 1 To Len(oDlg:aControls)
			If ValType(oDlg:aControls[nX]) == "O" .And.;
					!Empty(oDlg:aControls[nX]:bValid)
				
				lRet:=Eval(oDlg:aControls[nX]:bValid)
				If ValType(lRet) != "L"
					lRet := .T.
				Endif
				If !lRet
					Help(" ",1,"F340Erro")
					Exit // Sai no primeiro campo invalido
				Endif
			Endif
		Next
	EndIf
	//Ponto de entrada para permitir ou nao compensar um determinado titulo
	If lRet .and. ExistBlock("F340VLD")
		lRet := ExecBlock("F340VLD",.F.,.F.)
	Endif
Return lRet

//-----------------------------------
/*/{Protheus.doc} Fa340Leg
Cria uma janela contendo a legenda da mBrowse
@author Nilton Pereira
@since  17.03.04
@version 10
/*/
//-----------------------------------
Function Fa340Leg(nReg)
	Local uRetorno := .T.
	Local aLegenda := {	{"ENABLE", STR0034}, {"DISABLE", STR0035}, {"BR_AZUL", STR0036} }
	
	//Ponto de entrada para alterar informações da legenda.
	If ExistBlock("F340LEGE")
		aLegenda := ExecBlock("F340LEGE",.f.,.f.,{aLegenda})
	Endif
	
	If nReg = Nil	// Chamada direta da funcao onde nao passa, via menu Recno eh passado
		uRetorno := {}
		Aadd(uRetorno, {'E2_SALDO =  E2_VALOR .AND. E2_ACRESC = E2_SDACRES', aLegenda[1][1]}) // Titulo nao Compensado
		Aadd(uRetorno, {'E2_SALDO =  0', aLegenda[2][1]})			// Titulo Compensado Totalmente
		Aadd(uRetorno, {'E2_SALDO <> 0', aLegenda[3][1]})			// Titulo Compensado Parcialmente
	Else
		BrwLegenda(cCadastro,STR0037,aLegenda)
	Endif

Return uRetorno

//-----------------------------------
/*/{Protheus.doc}Fa340TxMd
Busca Taxa em aTxMoedas e verifica se foi trocada 
@author Cristiano Denardi
@since  05.04.05
@version 12
/*/
//-----------------------------------
Function Fa340TxMd(nMoeda2, nTx )
	Local lExistTxMd	:= Type("aTxMoedas")#"U" .And. Len(aTxMoedas) > 0
	
	Default nTx		:= 0
	Default nMoeda2 := 0
	
	If nMoeda2 > 0 .And. lExistTxMd
		If aTxMoedas[nMoeda2][2] <> aTxMoedas[nMoeda2][4] .and. (aTxMoedas[nMoeda2][2]<>0)
			nTx := aTxMoedas[nMoeda2][2]
		Endif
	Endif
	
Return( nTx )

//-----------------------------------
/*/{Protheus.doc}Fa340Inver
Inverte a selecao da relacao de Titulos a Compensar 
@author Cristiano Denardi
@since  05.04.05
@version 12
/*/
//-----------------------------------
Static Function Fa340Inver( aTit, oTit, oGet )
	Local nA 		:=  0
	Local lValDocs	:= .T.
	Local lPrimeiro := .T.
	Local nVlrTit   :=  0
	Local lTravaDIC := .F.
	Local lDICZera	:= .F.
	Local cTpTitSel := ""

	nValTot  := 0
	__nQtdePA := 0
	__nQtdeDIC := 0

	For nA := 1 To Len(aTit)
		lValDocs := .T.
		nVlrTit  := 0
		
		If !aTit[nA][08]
			If __lFinVDoc
				If !FA340ValDocs(aTit[nA],.T.,,,@lPrimeiro)		//Valida os documentos obrigatorios
					lValDocs := .F.
				EndIf
			EndIf
			If lValDocs
				cTpTitSel := AllTrim( aTit[nA,4] )
				
				//Bloqueia a seleção caso seja uma compensação com DIC/NDF e o saldo da nota fosse ser zerado, para garantir a integridade dos impostos
				lDICZera := .F.
				If cTpTitSel == "DIC"
					If nValTot + DesTrans(aTit[nA][9]) >= __nTotal
						lDICZera := .T.
					EndIf
				ElseIf AllTrim(SE2->E2_TIPO) == "DIC"
					If __nTotal >= DesTrans(aTit[nA][9])
						lDICZera := .T.
					EndIf
				EndIf
				
				If !lDICZera
					//Não deixa selecionar DIC e PA/NDF ao mesmo tempo, para garantir que o DIC não será compensado por último e que os impostos sejam retidos corretamente
					If cTpTitSel == "DIC"
						If __nQtdePA > 0
							lTravaDIC := .T.
						Else
							__nQtdeDIC ++
						EndIf
					ElseIf cTpTitSel $ ( MVPAGANT + "|" + MV_CPNEG )
						If __nQtdeDIC > 0
							lTravaDIC := .T.
						Else
							__nQtdePA ++
						EndIf
					EndIf
				EndIf

				IF !lTravaDIC .And. !lDICZera
					If F340Semaforo(aTit[nA],.T.,aRecno[nA], /*cChvSE2*/ , /*aRegs*/ ,/*lCompensa*/ , .F.)
						aTit[nA][08] := !aTit[nA][08]
					Endif
				EndIf
			EndIf
		Else
			F340Semaforo(aTit[nA],.F.,aRecno[nA])
			aTit[nA][08] := !aTit[nA][08]
		EndIf
		
		If (nValTot >= __nTotal .Or. !aTit[nA,08])
			aTit[nA][6] := Transform(nVlrTit, "@E 9999,999,999.99")
			aTit[nA,08] := .F.
			Loop
		EndIf
		
		If Fa340VTit(aTit[nA][6]) == 0
			aTit[nA][6] := aTit[nA][9]
			
			If cPaisLoc != "BRA"
				aTit[nA][6] := aTit[nA][5]
			EndIf
			
			aTit[nA][6] := Transform(DesTrans(aTit[nA][6]), "@E 9999,999,999.99") 
		Endif
		
		nVlrTit := Fa340VTit(aTit[nA][6])
		
		If (nValTot + nVlrTit) > __nTotal
			nVlrTit := (__nTotal - nValTot)
		EndIf
		
		nValTot += nVlrTit 
		aTit[nA][6] := Transform(nVlrTit, "@E 9999,999,999.99")
		
		If cPaisLoc == "BRA" 
			aTit[nA][20] := nVlrTit
			aTit[nA][22] := nVlrTit
		EndIf
	Next nA
	
	oTit:Refresh()
	oGet:Refresh()
Return Nil
		
//-----------------------------------
/*/{Protheus.doc}fMarkAll
Marca ou Desmarca todos os titulos 
@author Cristiano Denardi
@since  05.04.05
@version 12
/*/
//-----------------------------------
Static Function fMarkAll(aTit)
	Local nA := 0
	Local lValDocs := .T.
	Local lPrimeiro := .T.
	Local nAtit := 0
	Local nVlrLim := 0
	Local nMovTit := 0
	Local lMarca  := .T.
	Local lTravaDIC := .F.
	Local lDICZera := .F.

	Default aTit := {} 
	nAtit := Len(aTit)
	
	//Não permite selecionar vlr maior que o título de partida
	If nValTot >= __nTotal 
		lMarca   := .F.
		nValTot  := 0
	EndIf		
	
	For nA := 1 To nAtit
		lValDocs := .T.
		
		If lMarca
			If aTit[nA][8]
				Loop
			EndIf
			
			If __lFinVDoc
				If !FA340ValDocs(aTit[nA],.T.,,,@lPrimeiro)
					lValDocs := .F.
				EndIf
			EndIf
			
			If lValDocs
				If F340Semaforo(aTit[nA],.T.,aRecno[nA])
					
					If cPaisLoc == "BRA"
						//Bloqueia a seleção caso seja uma compensação com DIC e o saldo da nota fosse ser zerado, para garantir a integridade dos impostos
						lDICZera := .F.
						If aTit[nA,4] == "DIC"
							If nValTot + DesTrans(aTit[nA][9]) >= __nTotal
								lDICZera := .T.
							EndIf
						ElseIf SE2->E2_TIPO == "DIC"
							If __nTotal >= DesTrans(aTit[nA][9])
								lDICZera := .T.
							EndIf
						EndIf

						If !lDICZera
							//Não deixa selecionar DIC e PA/NDF ao mesmo tempo, para garantir que o DIC não será compensado por último e que os impostos sejam retidos corretamente
							lTravaDIC := .F.
							If aTit[nA,4] == "DIC"
								If __nQtdePA > 0
									lTravaDIC := .T.
								Else
									__nQtdeDIC ++
								EndIf
							ElseIf aTit[nA,4] $ ( MVPAGANT + "|" + MV_CPNEG )
								If __nQtdeDIC > 0
									lTravaDIC := .T.
								Else
									__nQtdePA ++
								EndIf
							EndIf
						EndIf
						
						If !lTravaDIC .And. !lDICZera .And. nValTot < __nTotal
							aTit[nA][8] := lMarca
							nVlrLim := DesTrans(aTit[nA][9])
							
							If (nValTot + nVlrLim) > __nTotal
								nMovTit := (__nTotal - nValTot)
							Else
								nMovTit := nVlrLim 
							EndIf
							
							aTit[nA][6] := Transform(nMovTit, "@E 9999,999,999.99")
							aTit[nA][20] := nMovTit
							aTit[nA][22] := nMovTit
							nValTot += nMovTit
						EndIf
					Else
						aTit[nA][8] := lMarca
						aTit[nA][6]		:= Iif(cPaisLoc != "RUS",aTit[nA][5],AllTrim(aTit[nA][5]))
						SCU->(DbSetOrder(2))
						
						If aTit[nA,4] == MVNOTAFIS .And. GetMv('MV_SOLNCP') .And. SCU->(MsSeek( xFilial()+SE2->E2_FORNECE+SE2->E2_LOJA+aTit[nA,2]+aTit[nA,1] )).And. Empty(SCU->CU_NCRED)
							aTit[nA][8]	:= .F.
							aTit[nA][6]		:= Iif(cPaisLoc != "RUS",Transform(0,"@E 9999,999,999.99"),AllTrim(Transform(0,"@E 9999,999,999.99")))
						Else
							nValTot += Fa340VTit(aTit[nA][6])
						Endif
					EndIf
					
					//Não permite selecionar vlr maior que o título de partida 
					If nValTot >= __nTotal
						exit
					EndIf						
				Endif
			EndIf
		Else
			F340Semaforo(aTit[nA], .F., aRecno[nA])
			If aTit[nA][8]
				If aTit[nA,4] == "DIC"
					__nQtdeDIC --
				ElseIf aTit[nA,4] $ ( MVPAGANT + "|" + MV_CPNEG )
					__nQtdePA --
				EndIf
			EndIf
			aTit[nA][8] := lMarca
			aTit[nA][6]		:= Iif(cPaisLoc != "RUS",Transform(0,"@E 9999,999,999.99"),AllTrim(Transform(0,"@E 9999,999,999.99")))
			If cPaisLoc == "BRA"
				aTit[nA][20] := 0
				aTit[nA][22] := 0
			EndIf
		Endif
	Next nA
	
Return(.T.)

//-----------------------------------
/*/{Protheus.doc}Fa340IntPco
Gera os lancamentos no sigapco (PcoDetLan()) 
@author Paulo Carnelossi
@since  22/11/06
@version 12
/*/
//-----------------------------------
Static Function Fa340IntPco(nRecSE2, aRecnoSE2, aBaixaSE5)
	Local aArea    := GetArea()
	Local aAreaSE2 := SE2->(GetArea())
	Local aAreaSE5 := SE5->(GetArea())
	Local nX
	
	If SuperGetMV("MV_PCOINTE",.F.,"2") == "1" .And. Len(aBaixaSE5) > 0
		dbSelectArea("SE2")
		dbGoto(nRecSE2)
		
		//Grava lançamento no PCO ref titulo principal apos a compensacao
		PCODetLan("000017","01","FINA340")
		
		For nX := 1 TO Len(aRecnoSE2) // ARRAY COM REGISTROS TITULOS COMPENSADOS
			dbSelectArea("SE2")
			dbGoto(aRecnoSE2[nX])
			
			//Grava lançamento no PCO ref titulo compensado apos a compensacao
			PCODetLan("000017","02","FINA340")
			
			//grava lctos das baixas referente titulo principal e titulo compensado
			dbSelectArea("SE5")
			SE5->(dbGoto(aBaixaSE5[(nX*2)-1]))
			
			//Grava lançamento no PCO ref baixa (Mov.Bancaria-SE5) do titulo principal apos a compensacao
			PCODetLan("000017","03","FINA340")
			SE5->(dbGoto(aBaixaSE5[(nX*2)]))
			
			//Grava lançamento no PCO ref baixa do titulo compensado (Mov.Bancaria-SE5)
			PCODetLan("000017","04","FINA340")
		Next
	EndIf
	
	RestArea(aAreaSE5)
	RestArea(aAreaSE2)
	RestArea(aArea)
Return
		
//---------------------------
/*/{Protheus.doc}MenuDef
Define as opções de menu

@author Sivaldo Oliveira
@since  13/06/2018
@version 12
/*/
//---------------------------
Static Function MenuDef()
	Local aRotina As Array
	
	//Inicializa variáveis
	If cPaisloc ==  "RUS"
		aRotina := {;
			{STR0001, "AxPesqui",  0, 1,   	Nil, .F.},;  //Pesquisar
			{STR0002, "AxVisual",  0, 2,   	Nil, Nil},;  //Visualizar
			{STR0003, "Fa340Comp", 0, 3,   	Nil, Nil},;  //Compensar
			{STR0040, "FA340Can",  0, 5, 	Nil, Nil},;  //Estornar (5)
			{STR0037, "Fa340Leg",  0, 2,   	Nil, .F.} }  //Legenda
	Else		
		aRotina := {;
			{STR0001, "AxPesqui",  0, 1, Nil, .F.},;  //Pesquisar
			{STR0002, "AxVisual",  0, 2, Nil, Nil},;  //Visualizar
			{STR0003, "Fa340Comp", 0, 4, Nil, Nil},;  //Compensar
			{STR0004, "FA340Can",  0, 4, Nil, Nil},;  //Excluir (4)
			{STR0040, "FA340Can",  0, 5, Nil, Nil},;  //Estornar (5)
			{STR0037, "Fa340Leg",  0, 2, Nil, .F.} }  //Legenda
	Endif
Return(aRotina)

//---------------------------
/*/{Protheus.doc}FinA340T
Chamada semi-automatica utilizado pelo gestor financeiro
@author Marcelo Celi Marques
@since  26.03.08
@version 12
/*/
//---------------------------
Function FinA340T(aParam)
	cRotinaExec := "FINA340"
	ReCreateBrow("SE2",FinWindow)
	FinA340(aParam[1])
	ReCreateBrow("SE2",FinWindow)
	dbSelectArea("SE2")
	
	INCLUI := .F.
	ALTERA := .F.
Return .T.

//---------------------------
/*/{Protheus.doc}F340MovPA
Verifica se o PA possui movimento bancário
@author Sivaldo Oliveira
@since  12/07/2018
@version 12
/*/
//---------------------------
Function F340MovPA(aMovPA As Array, cTbl As Character, lVerMov As Logical) As Array
	Local cQry      As Character
	Local cTblTmp   As Character
	Local aArea     As Array
	Local cCampoChq As Character 

	Default aMovPA  := {.F., dDataBase, ""}
	Default cTbl    := "SE2"
	Default lVerMov := .T.

	//Inicializa variáveis
	cQry 	  := ""
	cTblTmp   := ""
	cCampoChq := Padr("", TamSX3("E5_NUMCHEQ")[1])
	aArea     := GetArea()

	If lVerMov
		If __oMovPA == Nil
			cQry := "SELECT E5_DATA, E5_TIPODOC FROM " + RetSqlName("SE5") + " "
			cQry += "WHERE E5_FILIAL = ? AND E5_PREFIXO = ? AND "
			cQry += "E5_NUMERO = ? AND E5_PARCELA = ? AND "
			cQry += "E5_TIPO = ? AND E5_CLIFOR = ? AND E5_LOJA = ? AND "
			cQry += "((E5_TIPODOC = 'PA' ) OR (E5_TIPODOC = 'BA' AND E5_NUMCHEQ <> '" + cCampoChq + "' ) OR "
			cQry += "(E5_TIPODOC = 'CH' AND E5_NUMCHEQ <> '" + cCampoChq + "')) AND "
			cQry += "E5_RECPAG = 'P' AND E5_SITUACA = ' ' AND D_E_L_E_T_ = ' ' "
			cQry := ChangeQuery(cQry)
			__oMovPA := FWPreparedStatement():New(cQry)
		EndIf

		__oMovPA:SetString(1, xFilial("SE5", (cTbl)->E2_FILORIG))
		__oMovPA:SetString(2, (cTbl)->E2_PREFIXO)
		__oMovPA:SetString(3, (cTbl)->E2_NUM)
		__oMovPA:SetString(4, (cTbl)->E2_PARCELA)
		__oMovPA:SetString(5, (cTbl)->E2_TIPO)
		__oMovPA:SetString(6, (cTbl)->E2_FORNECE)
		__oMovPA:SetString(7, (cTbl)->E2_LOJA)

		cQry := __oMovPA:GetFixQuery()
		cTblTmp := MpSysOpenQuery(cQry)
	Else
		If __oMovCnb == Nil
			cQry := "SELECT E5_DATA, E5_TIPODOC FROM " + RetSqlName("SE5") + " "
			cQry += "WHERE E5_FILIAL = ? AND E5_PREFIXO = ? AND "
			cQry += "E5_NUMERO = ? AND E5_PARCELA = ? AND "
			cQry += "E5_TIPO = ? AND E5_CLIFOR = ? AND E5_LOJA = ? AND "
			cQry += "E5_RECPAG = 'P' AND E5_SITUACA = ' ' AND D_E_L_E_T_ = ' ' "
			cQry := ChangeQuery(cQry)
			__oMovCnb := FWPreparedStatement():New(cQry)
		EndIf

		__oMovCnb:SetString(1, xFilial("SE5", (cTbl)->E2_FILORIG))
		__oMovCnb:SetString(2, (cTbl)->E2_PREFIXO)
		__oMovCnb:SetString(3, (cTbl)->E2_NUM)
		__oMovCnb:SetString(4, (cTbl)->E2_PARCELA)
		__oMovCnb:SetString(5, (cTbl)->E2_TIPO)
		__oMovCnb:SetString(6, (cTbl)->E2_FORNECE)
		__oMovCnb:SetString(7, (cTbl)->E2_LOJA)

		cQry := __oMovCnb:GetFixQuery()
		cTblTmp := MpSysOpenQuery(cQry)
	Endif

	(cTblTmp)->(DbGotop())

	If (cTblTmp)->(!Eof())
		dDtMov := If(Empty((cTblTmp)->E5_DATA), dDataBase, STOD((cTblTmp)->E5_DATA))
		aMovPA := {.T., dDtMov, (cTblTmp)->E5_TIPODOC}
	EndIf

	(cTblTmp)->(DbCloseArea())
	RestArea(aArea)

Return aMovPA

//---------------------------
/*/{Protheus.doc}LockCmpCP
bloqueia os registros selecionados na rotina de
compensacao para manter integridade dos dados
@author Clovis Magenta
@since  22/10/10
@version 12
/*/
//---------------------------
Static Function LockCmpCP( lMsg )
	Local lRet := .T.
	
	DEFAULT lMsg := .T.
	
	If !SE2->(MsRLock())
		While lRet 
			If !__lBlind
				If lMsg // quando carregamos a tela para seleção de titulos, simplesmente não deixamos o titulo marcado.
					If Aviso(STR0067,STR0067+CHR(13)+CHR(10)+STR0128,{"Sim", "Não"},2)==1 //"Registro em uso"###"Este registro está sendo manipulado por outro usuário e se encontra travado. "###"Deseja tentar usá-lo novamente?"
						Loop
					Else
						lRet:=.F.
					Endif
				Else
					lRet:=.F.
				Endif
			Else
				Sleep( 5000 )
			EndIf
		EndDo
	Endif

Return lRet
		
//---------------------------
/*/{Protheus.doc}UnLockCmpCP
liberar registro em lock na rotina de compensação
@author Clovis Magenta
@since  22/10/10
@version 12
/*/
//---------------------------
Static Function UnLockCmpCP( cChave )

Local lRet := .F.

If SE2->(MsSeek(cChave))
	SE2->(MSUnlock())
	lRet := .T.
Endif

Return lRet

//---------------------------
/*/{Protheus.doc}F340Semaforo
bloqueio do registro SE2 selecionado no momento da 
compensacao, para nao haver conflito de dados
@author Clovis Magenta
@since  22/10/10
@version 12
/*/
//---------------------------
STATIC Function F340Semaforo( aDados , lTrava , nRecno , cChvSE2 , aRegs ,lCompensa ,lMsg )
	Local lCancel	:= (nRecno == 0) // quando igual a zero, a tela de seleção dos títulos fora cancelada Ou iniciada)
	Local lRet 		:= .T.
	Local aArea		:= GetArea()
	Local aAreaSE2	:= SE2->(GetArea())
	Local nX		:= 0
	
	//--- Tratamento Gestao Corporativa
	Local lGestao   := Iif( lFWCodFil, FWSizeFilial() > 2, .F. )	// Indica se usa Gestao Corporativa
	//
	Local cFilFwSE2 := IIF( lGestao , FwFilial("SE2") , xFilial("SE2") )
	
	DEFAULT aRegs		:= {}
	DEFAULT cChvSE2		:= ""
	DEFAULT lCompensa	:= .T.
	DEFAULT lMsg		:= .T.
	
	If lCompensa
		If !lCancel
			
			dbSelectArea("SE2")
			SE2->(dbGoTo(nRecno))
			cChvSE2 := xFilial("SE2")+aDados[1]+aDados[2]+aDados[3]+aDados[4]+SE2->(E2_FORNECE+E2_LOJA)
			If lTrava
				If !LockCmpCP(lMsg)
					lRet := .F.
				Endif
			Else
				UnLockCmpCP(cChvSE2)
			Endif
			
		Else /* --> Abandono da tela de seleção: destravar todos os travados <-- */
			
			dbSelectArea("SE2")
			For nX := 1 to Len(aDados)
				
				If aDados[nX,8] // verifica se está selecionado para liberar registro
					SE2->(dbGoTo(aRecno[nX]))
					cChvSE2 := xFilial("SE2")+aDados[nX,1]+aDados[nX,2]+aDados[nX,3]+aDados[nX,4]+SE2->(E2_FORNECE+E2_LOJA)
					UnLockCmpCP(cChvSE2)
				Endif
				
			Next nX
			
		Endif
		
		
	Else /* --> Estorno da compensação <-- */
		
		
		If !lCancel 	// Se estiver na tela de seleção dos titulos no estorno
			
			//***********************************************************************************************************//
			// Pega chave do titulo selecionado no estorno/exclusao da Compensacao baseando-se no recno do mesmo no SE5  //
			//***********************************************************************************************************//
			
			If Empty(cChvSE2)
				SE5->(dbGoTo(nRecno))
				
				If !Empty(SE5->E5_FILORIG) .and. !Empty( cFilFwSE2 )
					cChvSE2 := SE5->E5_FILORIG+SubStr( SE5->E5_DOCUMEN ,1,nTamTit+nTamTip )+SE5->(E5_FORNADT+E5_LOJAADT)
				Else
					cChvSE2 := xFilial("SE2")+SubStr( SE5->E5_DOCUMEN ,1,nTamTit+nTamTip )+SE5->(E5_FORNADT+E5_LOJAADT)
				Endif
			Endif
			
			//***********************************************************************************************************//
			
			If lTrava
				If !LockCmpCP(lMsg)
					lRet := .F.
				Endif
			Else
				UnLockCmpCP(cChvSE2)
			Endif
			
		Else  /* --> Abandono da tela de seleção no estorno: destravar todos os travados <-- */
			
			dbSelectArea("SE5")
			For nX := 1 to Len(aDados)
				
				If aDados[nX,10] // verifica se está selecionado para liberar registro
					
					SE5->(dbGoTo(aRegs[nX]))
					
					If !Empty(SE5->E5_FILORIG) .and. !Empty( cFilFwSE2 )
						cChvSE2 := SE5->E5_FILORIG+SubStr( SE5->E5_DOCUMEN ,1,nTamTit+nTamTip )+SE5->(E5_FORNADT+E5_LOJAADT)
					Else
						cChvSE2 := xFilial("SE2")+SubStr( SE5->E5_DOCUMEN ,1,nTamTit+nTamTip )+SE5->(E5_FORNADT+E5_LOJAADT)
					Endif
					
					UnLockCmpCP(cChvSE2)
				Endif
				
			Next nX
			
		Endif
		
	Endif
	
	RestArea(aAreaSE2)
	RestArea(aArea)
Return lRet
		
//---------------------------
/*/{Protheus.doc}Fa340VldDt
Consiste MV_DATAFIN antes de cancelar baixa/compensação 
@author Clovis Magenta
@since  13/01/11
@version 12
/*/
//---------------------------
Function Fa340VldDt(dData As Date, nOpc As Numeric, lTodos As Logical) As Logical
	Local lRet := .T.

	DEFAULT dData 	:= dDatabase
	DEFAULT lTodos	:= .F.
	
	If __lBxDtFin == Nil
		__lBxDtFin := SuperGetMv("MV_BXDTFIN",,"1") == "2"
	EndIf

	If lRet .and. __lBxDtFin
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ A data da baixa deve ser passada como parametro, pois ³
		//³ a "exclusao" deve ser validada pela data de baixa e o ³
		//³ cancelamento pela data base do sistema.				  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		
		If nOpc == 4 // Exclusão de Compensação
			lRet := DtMovFin(dData, !lTodos,"1")
		ElseIf nOpc == 5  // Estorno de Compensação
			lRet := DtMovFin(, !lTodos,"1")
		EndIf
	EndIf
Return lRet
		
//---------------------------
/*/{Protheus.doc}FA340ValDocs
Posiciona na tabela SE2 para validacao dos
documentos obrigatorios 
@author Renan G. Alexandre
@since  02/24/11
@version 12
/*/
//---------------------------
Static Function FA340ValDocs(aTitulo,lTodos,lEmail,lExibe,lPrimeiro)
	Local lRet			:= .T.
	Local aArea			:= {}
	Local aAreaSE2		:= {}
	Local cTitulo		:= ""
	Local nX			:= 0
	Default lPrimeiro :=.F.
	Default lTodos		:= .F.
	Default lEmail		:= .F.
	
	If __lFinVDoc .And. !lExibe
		aArea 		:= GetArea()
		aAreaSE2	:= SE2->(GetArea())
		
		dbSelectArea("SE2")
		
		If cPaisLoc == "BRA"
			cTitulo := aTitulo[16]+aTitulo[1]+aTitulo[2]+aTitulo[3]+aTitulo[4]+aTitulo[14]+aTitulo[15]
		ElseIf cPaisLoc == "BOL"
			cTitulo := aTitulo[16]+aTitulo[1]+aTitulo[2]+aTitulo[3]+aTitulo[4]+aTitulo[14]+aTitulo[15]
		Else
			cTitulo := aTitulo[15]+aTitulo[1]+aTitulo[2]+aTitulo[3]+aTitulo[4]+aTitulo[13]+aTitulo[14]
		EndIf
		
		SE2->(dbSetOrder(1))		//E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
		SE2->(dbGoTop())
		If SE2->(dbSeek(cTitulo))		//Posiciona no titulo para a funcao de validacao dos documentos.
			If lEmail
				CN062ValDocs("07",.F.,.T.)
			Else
				If !CN062ValDocs("07",.F.,.F.,lTodos,@lPrimeiro)
					lRet := .F.
				EndIf
			EndIf
		EndIf
		
		RestArea(aAreaSE2)
		RestArea(aArea)
		
	ElseIf __lFinVDoc .And. lExibe
		aArea 		:= GetArea()
		aAreaSE2	:= SE2->(GetArea())
		
		dbSelectArea("SE2")
		
		SE2->(dbSetOrder(1))		//E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
		SE2->(dbGoTop())
		For nX := 1 To Len(aTitulos)
			If aTitulos[nX][8]
				If cPaisLoc == "BRA"
					cTitulo := aTitulos[nX,16]+aTitulos[nX,1]+aTitulos[nX,2]+aTitulos[nX,3]+aTitulos[nX,4]+aTitulos[nX,14]+aTitulos[nX,15]
				ElseIf cPaisLoc == "BOL"
					cTitulo := aTitulos[nX,16]+aTitulos[nX,1]+aTitulos[nX,2]+aTitulos[nX,3]+aTitulos[nX,4]+aTitulos[nX,14]+aTitulos[nX,15]
				Else
					cTitulo := aTitulos[nX,15]+aTitulos[nX,1]+aTitulos[nX,2]+aTitulos[nX,3]+aTitulos[nX,4]+aTitulos[nX,13]+aTitulos[nX,14]
				EndIf
				If dbSeek(cTitulo)
					If !CN062ValDocs("07",.F.,.F.,lTodos,@lPrimeiro)
						aTitulos[nX][8] := .F.
					EndIf
				EndIf
			EndIf
		Next nX
		
		RestArea(aAreaSE2)
		RestArea(aArea)
		
	EndIf
Return lRet

//-----------------------------------
/*/{Protheus.doc}F340ForINA
Busca para o titulo passado os Fornecedor do titulo PAI

@author Andre Lago
@since 114/05/2012
@version 12
/*/
//-----------------------------------
Function F340ForINA(cPaiINS, cPaiINA)
	Local aAreaAt	   := GetArea()
	Local lRet		   := .F.
	Local cForINS    := ""
	Local cLjINS     := ""
	Local cForINA    := ""
	Local cLjINA     := ""
	Local cAliasB    := "__SE2"
	
	Default cPaiINS  := ""
	Default cPaiINA  := ""
	
	If Select(cAliasB) <= 0
		SomaAbat("", "", "", "P")
	EndIf
	
	If !Empty(cPaiINS)
		dbSelectArea(cAliasB)
		(cAliasB)->(dbSetOrder(1))
		
		If (cAliasB)->(DbSeek(xFilial("SE2")+cPaiINS))
			cForINS := (cAliasB)->E2_FORNECE
			cLjINS  := (cAliasB)->E2_LOJA
			
			If (cAliasB)->(DbSeek(xFilial("SE2")+cPaiINA))
				cForINA := (cAliasB)->E2_FORNECE
				cLjINA  := (cAliasB)->E2_LOJA
			EndIf
			
			If cForINS+cLjINS == cForINA+cLjINA
				If F090PagINA( (cAliasB)->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA) )
					lRet := .T.
				EndIf
			EndIf
		EndIf
	EndIf
	
	//Recupera a Integridade dos dados
	RestArea(aAreaAt)
Return lRet
		
//-----------------------------------
/*/{Protheus.doc}Tx10925
retorna uma matriz com os titulos TXs gerados a partir do titulo principal

@author TOTVS
@since 13/04/2012
@version 12
/*/
//-----------------------------------
Function Tx10925(cPrefixo,cNum,cParcela,cParcPis,cParcCof,cParCsll,xReserv1,cParcIrf,xReserv2,lEstorno,cParcIns, cParcIss)
	Local aArea     As Array
	Local aImpostos As Array
	Local cTaxa		As Character
	Local aTxImp	As Array
	Local nX 		As Numeric
	
	DEFAULT cParcPis := ""
	DEFAULT cParcCof := ""
	DEFAULT cParCsll := ""
	DEFAULT cParcIrf := ""
	DEFAULT lEstorno := .F.
	DEFAULT cParcIns := ""
	DEFAULT cParcIss := ""

	DEFAULT xReserv1 := NIL
	DEFAULT xReserv2 := NIL	

	aArea	   := GetArea()
	nX        := 0
	cTaxa     := ""
	aTxImp    := {}
	
	// Seleciono SE2 com outro alias para efetuar a varredura dos impostos
	If Select("__SE2") == 0
		ChkFile("SE2",.F.,"__SE2")
	Else
		DbSelectArea("__SE2")
		DbGoTop()
	EndIf
	
	dbSetOrder(1)

	// Estrutura de Repeticao
	If !__lPccBaix
		Aadd(aTxImp, {cParcPis, "PIS"})
		Aadd(aTxImp, {cParcCof, "COF"})
		Aadd(aTxImp, {cParCsll, "CSL"})
	EndIf
	
	If !__lIrfBaix
		Aadd(aTxImp, {cParcIrf, "IRF"})
	EndIf
	
	If !__lIssBaix
		Aadd(aTxImp, {cParcIss, "ISS"})
	EndIf	
	
	Aadd(aTxImp, {cParcIns, "INS"})
	
	aImpostos := Array(Len(aTxImp))
	
	For nX := 1 to Len(aTxImp)
		aImpostos[nX] := Array(0)
		
		If !Empty(aTxImp[nX,1])
			
			If SE2->E2_TIPO $ MVPAGANT+"|INA"
				If aTxImp[nX,2] == "IRF" .And. !__lIrfBaix
					cTaxa := MVTXA
				ElseIf aTxImp[nX,2] $ "PIS|COF|CSL" .And. !__lPccBaix
					cTaxa := MVTXA
				ElseIf aTxImp[nX,2] == "INS"
					cTaxa := MVTXA
				Else
					cTaxa := MVTAXA
				EndIf
			Else
				cTaxa := MVTAXA
			EndIf

			// Busca pelo TX(A) do t¡tulo
			If (dbSeek(xFilial("SE2") + cPrefixo + cNum + aTxImp[nX,1] + cTaxa))
				If __SE2->E2_SALDO > 0 .Or. lEstorno
					aADD(aImpostos[nX],E2_PREFIXO)				// 1 - PREFIXO
					aADD(aImpostos[nX],E2_NUM)					// 2 - NUMERO
					aaDD(aImpostos[nX],E2_PARCELA)				// 3 - PARCELA
					aADD(aImpostos[nX],E2_TIPO)					// 4 - TIPO
					aADD(aImpostos[nX],E2_NATUREZ)				// 5 - NATUREZA
					aADD(aImpostos[nX],E2_VALOR)				// 6 - VALOR
					aADD(aImpostos[nX],E2_SALDO)				// 7 - SALDO
					aADD(aImpostos[nX],__SE2->(Recno()))		// 8 - RECNO
					aADD(aImpostos[nX], aTxImp[nX,2])			// 9 - IMPOSTO
				Endif
			Endif
		Endif

	Next nX
	
	RestArea(aArea)
Return aImpostos
		
//-----------------------------------
/*/{Protheus.doc}Fa340BTxAu
Baixa impostos dos titulos envolvidos na compensação
Não podem estar baixado para serem compensados

@param aTitulos - titulos selecionados para compensacao
@param nRecno   - Recno do t¡tulo compensado.
@param cSeqImp  - Sequencia de baixa dos impostos

@author Clovis Magenta
@since 13/04/2012
@version 12
/*/
//-----------------------------------
Static Function Fa340BTxAu(aTitulos, cSeqImp)
	Local aArea 		:= SE2->(GetArea())
	Local aTitMarkImp	:= {}
	Local nX			:= 0
	Local nY			:= 0
	Local nValImp		:= 0
	Local nValorCP		:= 0
	Local cValorCP		:= ""
	Local cFornOri      := ""
	Local cLojaOri		:= ""
	Local lDebito		:= .F.
	Local nTitulo       := Len(aTitulos)
	Local cChave        := ""
	Local nAtitMark     := 0
	Local aImp10925		:= {}
	
	SE2->(DbSetOrder(1))
	
	For nX := 1 to nTitulo
		If aTitulos[nX][8]
			cChave := aTitulos[nX][16] + aTitulos[nX][1] + aTitulos[nX][2] + aTitulos[nX][3] + aTitulos[nX][4] + aTitulos[nX][14] + aTitulos[nX][15] 
			
			If SE2->(DbSeek(cChave))
				If SE2->E2_TIPO $ MVPAGANT+"|INA"
					cFornOri := SE2->E2_FORNECE
					cLojaOri := SE2->E2_LOJA
				Endif
				
				cValorCP := STRTRAN(aTitulos[nX][6], ".", "")
				cValorCP := STRTRAN(cValorCP, ",", ".")
				nValorCP := Round(Val(cValorCP) ,2) 
				
				Aadd(aTitMarkImp, Tx10925(SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_PARCPIS,SE2->E2_PARCCOF,SE2->E2_PARCSLL,,SE2->E2_PARCIR,,.F.,SE2->E2_PARCINS, SE2->E2_PARCISS) )
				Aadd(aTitMarkImp[len(aTitMarkImp)], nValorCP)
				Aadd(aTitMarkImp[len(aTitMarkImp)], nX)
			EndIf
		EndIf
	Next nX
	
	SE2->(DbGoto(__nRecPart))
	
	If SE2->E2_TIPO $ MVPAGANT+"|INA"
		cFornOri := SE2->E2_FORNECE
		cLojaOri := SE2->E2_LOJA
		lDebito  := .T.
	Endif
	
	aImp10925 := Tx10925(SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_PARCPIS,SE2->E2_PARCCOF,SE2->E2_PARCSLL,,SE2->E2_PARCIR,,.F.,SE2->E2_PARCINS)
	nAtitMark := Len(aTitMarkImp)
	
	For nX := 1 to nAtitMark
		For nY := 1 to Len(aTitMarkImp[nX])
			If ValType(aTitMarkImp[nX][nY]) != "A"
				Loop
			EndIf
			
			If !Empty(aTitMarkImp[nX][nY]) .And. !Empty(aImp10925[nY])
				SE2->(DbGoTo(aTitMarkImp[nX][nY][TX_REC]))
				nValImp := aTitMarkImp[nX][nY][TX_VAL]
				
				Reclock("SE2",.F.)
				SE2->E2_SALDO	-= If(nValImp > SE2->E2_SALDO, SE2->E2_SALDO, nValImp)  
				SE2->E2_VALLIQ	+= nValImp
				SE2->E2_BAIXA	:= dDataBase
				
				//Grava FK's do processo de baixa
				Fa340GrImp(nValImp, "", cSeqImp, cFornOri, cLojaOri, !lDebito)
				SE2->(MsUnLock())
				
				SE2->(DbGoTo(aImp10925[nY][TX_REC]))
				
				Reclock("SE2",.F.)
				SE2->E2_SALDO  -= If(nValImp > SE2->E2_SALDO, SE2->E2_SALDO, nValImp)
				SE2->E2_VALLIQ += nValImp
				SE2->E2_BAIXA  := dBaixa
				
				//Grava FK's do processo de baixa
				Fa340GrImp(nValImp, "", cSeqImp, cFornOri, cLojaOri, lDebito)
				SE2->(MsUnlock())
			EndIf
		Next nY
	Next nX
	
	Restarea(aArea)
Return

//------------------------------
/*/{Protheus.doc}F340CanImp
Cancelamento de baixa automática dos impotos
@author Sivaldo Oliveira
@since  13/11/2018
@version 12
/*/
//------------------------------
Static Function F340CanImp(cChaTiPai As Character, cE2FilOri As Character)
	Local aArea   As Array
	Local aSE2    As Array
	Local aSE5    As Array
	Local cSeqBx  As Character
	Local cFilSE5 As Character	
	Local cChvSE5 As Character
	Local lEditE2 As Logical
	Local cFilSE2 As Character
	Local nSE2    As Numeric
	Local nSE5    As Numeric
	
	Default cChaTiPai := ""
	Default cE2FilOri := SE2->E2_FILORIG
	
	//Inicializa variáveis
	aArea   := GetArea()
	aSE2    := SE2->(GetArea())
	aSE5    := SE5->(GetArea()) 
	cSeqBx  := SE5->E5_SEQ 
	cFilSE5 := xFilial("SE5", cE2FilOri)
	cFilSE2 := xFilial("SE2", cE2FilOri)         
	cChvSE5 := ""
	lEditE2 := .F.
	
	SE2->(DbSetOrder(17))
	SE5->(DbSetOrder(7))
	
	If SE2->(MsSeek(cChaTiPai)) 
		cChaTiPai := AllTrim(cChaTiPai)
		
		While SE2->(!Eof()) .And. AllTrim(cFilSE2+SE2->E2_TITPAI) == cChaTiPai  
			cChvSE5 := cFilSE5 + SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA) + cSeqBx
			
			If SE5->(MsSeek(cChvSE5)) .And. SE5->E5_SEQ == cSeqBx 
				Reclock("SE2")
				SE2->E2_SALDO  += SE5->E5_VALOR
				SE2->E2_VALLIQ -= SE5->E5_VALOR
				SE2->E2_BAIXA  := CTOD("  /  /    ")
				SE2->(MsUnLock())
				lEditE2 := .T.
				
				nSE2 := SE2->(Recno())
				nSE5 := SE5->(Recno())
				//Grava FK's cancel bx autom de imposto
				F340DelMov(cSeqBx)
				SE2->(DbGoto(nSE2))
				SE5->(DbGoto(nSE5))
				
				Reclock("SE5")
				SE5->(DbDelete())
				SE5->(MsUnLock())
			EndIf
			SE2->(DbSkip())
		EndDo
	EndIf
	
	Restarea(aSE2)
	Restarea(aSE5)
	Restarea(aArea)
	
	//Tabela em edição para continuar estorno do título principal 
	If lEditE2
		Reclock("SE2")
	EndIf	
Return Nil

//--------------------------------------------------------------------------
/*/{Protheus.doc}Fa340GrImp
Grava as baixas de TX(A)s referentes a compensa?o.
MV_CPIMPAT = Compensa?o automatica de impostos a pagar

@param nValor - Valor do TX(A)
@param cAdiant - Chave do t¡tulo de ADIANTAMENTO
@param cDocOrig - Chave do t¡tulo de ORIGEM
@param cSequencia - Sequencia de Baixa
@param cFornOri - Fornecedor do t¡tulo de ORIGEM
@param cLojaOri - Loja do Fornecedor do t¡tulo de ORIGEM
@param lDebito - Processo para titulo de Debito ou Crdito

@author Leonardo Castro
@since  24/07/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function Fa340GrImp(nValor,cDocOrig,cSequencia,cFornOri,cLojaOri,lDebito)
	Local aArea As Array
	Local oModelBx As Object
	Local oSubFKA As Object
	Local oSubFK2 As Object
	Local oSubFK5 As Object
	Local cLog As Character
	Local cIdFK2	As Character
	Local cChaveTit As Character
	Local cChaveFK7 As Character
	Local cCamposE5 As Character
	Local lRet As Logical
	
	Default nValor 		:= 0
	Default cDocOrig	:= ""
	Default cSequencia	:= "01"
	Default cFornOri 	:= ""
	Default cLojaOri	:= ""
	Default lDebito		:= .F. // True = TXA - Adiantamento | False = TX Nota Fiscal

	aArea := GetArea()
	cLog := ""
	cIdFK2	:= ""
	cChaveTit := ""
	cChaveFK7 := ""
	cCamposE5 := ""
	lRet := .T.
	
	If nValor > 0
		cCamposE5 += "{"
		cCamposE5 += "{'E5_DTDIGIT',  dBaixa}"
		cCamposE5 += ",{'E5_PREFIXO', SE2->E2_PREFIXO}"
		cCamposE5 += ",{'E5_NUMERO',  SE2->E2_NUM}"
		cCamposE5 += ",{'E5_PARCELA', SE2->E2_PARCELA}"
		cCamposE5 += ",{'E5_CLIFOR',  SE2->E2_FORNECE}"
		cCamposE5 += ",{'E5_FORNECE', SE2->E2_FORNECE}"
		cCamposE5 += ",{'E5_LOJA',    SE2->E2_LOJA}"
		cCamposE5 += ",{'E5_BENEF',   SE2->E2_NOMFOR}"
		cCamposE5 += ",{'E5_TIPO',    SE2->E2_TIPO}"
		cCamposE5 += ",{'E5_FORNADT', '"+ cFornOri +"'}"
		cCamposE5 += ",{'E5_LOJAADT', '"+ cLojaOri +"'}"
		cCamposE5 += "}"
		
		oModelBx := FWLoadModel("FINM020")
		oModelBx:SetOperation( MODEL_OPERATION_INSERT )
		oModelBx:Activate()
		oModelBx:SetValue( "MASTER", "E5_GRV", .T. )
		oModelBx:SetValue( "MASTER", "NOVOPROC", .T. )
		oModelBx:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 )
		oSubFKA := oModelBx:GetModel("FKADETAIL")
		oSubFK2 := oModelBx:GetModel("FK2DETAIL")
		oSubFK5 := oModelBx:GetModel("FK5DETAIL")

		cChaveTit := SE2->E2_FILIAL+"|"+SE2->E2_PREFIXO+"|"+SE2->E2_NUM+"|"+SE2->E2_PARCELA+"|"+SE2->E2_TIPO+"|"+SE2->E2_FORNECE+"|"+SE2->E2_LOJA
		cChaveFK7 := FINGRVFK7("SE2", cChaveTit)
		cIdFK2 := FWUUIDV4()
		
		If !oSubFKA:IsEmpty()
			oSubFKA:AddLine()
			oSubFKA:GoLine( oSubFKA:Length() )
		Endif
		
		oSubFKA:SetValue( 'FKA_IDORIG', cIdFK2 )
		oSubFKA:SetValue( 'FKA_TABORI', "FK2" )
		oSubFK2:SetValue( "FK2_IDFK2",  cIdFK2 )
		oSubFK2:SetValue( "FK2_DATA",   dBaixa )
		oSubFK2:SetValue( "FK2_VALOR",  nValor )
		oSubFK2:SetValue( "FK2_VLMOE2", nValor )
		oSubFK2:SetValue( "FK2_MOEDA",  StrZero(SE2->E2_MOEDA,2) )
		oSubFK2:SetValue( "FK2_NATURE", SE2->E2_NATUREZ )
		oSubFK2:SetValue( "FK2_RECPAG", "P" )
		oSubFK2:SetValue( "FK2_LOTE",	cLote)
		
		If lDebito
			oSubFK2:SetValue( "FK2_TPDOC" , "BA" )
			oSubFK2:SetValue( "FK2_HISTOR", OemToAnsi(STR0074) ) //Baixa por Compensacao
		Else 
			oSubFK2:SetValue( "FK2_TPDOC" , "CP" )
			oSubFK2:SetValue( "FK2_HISTOR", OemToAnsi(STR0075) ) //Compens. Adiantamento
		EndIf
		
		oSubFK2:SetValue( "FK2_MOTBX",  "CMP")
		oSubFK2:SetValue( "FK2_ORIGEM", FunName())
		oSubFK2:SetValue( "FK2_SEQ",    cSequencia)
		oSubFK2:SetValue( "FK2_IDDOC",  cChaveFK7 )
		oSubFK2:SetValue( "FK2_DOC",    cDocOrig)
		oSubFK2:SetValue( "FK2_CCUSTO", SE2->E2_CCUSTO)
		oSubFK2:SetValue( "FK2_FILORI",	SE2->E2_FILORIG)
		oSubFK2:SetValue( "FK2_LA", "N")
		
		If oModelBx:VldData()
			oModelBx:CommitData()
		Else
			lRet := .F.
			cLog := cValToChar(oModelBx:GetErrorMessage()[4]) + ' - '
			cLog += cValToChar(oModelBx:GetErrorMessage()[5]) + ' - '
			cLog += cValToChar(oModelBx:GetErrorMessage()[6])
			Help( ,,"M340VALRE",,cLog, 1, 0 )
		Endif

		oModelBx:DeActivate()
		oModelBx:Destroy()
		oModelBx:= nil
	EndIf
	
	RestArea(aArea)
Return lRet

//--------------------------------------------------------------------------
/*/{Protheus.doc}F340DelMov
Grava os cancelamentos das baixas de TX(A)s referentes a compensa?o.
MV_CPIMPAT = Compensa?o automatica de impostos a pagar

@param cSeq - Sequencia da Baixa

@author Leonardo Castro
@since  24/07/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function F340DelMov(cSeq As Character)
	Local aArea		:= GetArea()
	Local aAreaSE5	:= SE5->(GetArea())
	Local aAreaAnt	:= {}
	Local oModelMov	:= Nil
	Local oSubFKA   := Nil
	Local cLog		:= ""
	Local lRet		:= .T.
	
	DEFAULT cSeq := ""
	SE5->(dbSetOrder(7))
	
	If SE5->(DbSeek(xFilial("SE5")+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)+cSeq))
		oModelMov := FWLoadModel("FINM020")
		
		If AllTrim( SE5->E5_TABORI ) == "FK2"
			aAreaAnt := GetArea()
			
			oModelMov:SetOperation( MODEL_OPERATION_UPDATE )
			oModelMov:Activate()
			oSubFKA := oModelMov:GetModel( "FKADETAIL" )
			oSubFKA:SeekLine( { {"FKA_IDORIG", SE5->E5_IDORIG } } )
			oModelMov:SetValue("MASTER", "E5_GRV", .T.)
			oModelMov:SetValue("MASTER", "E5_OPERACAO", 3)
			oModelMov:SetValue("MASTER", "HISTMOV", STR0041)
			
			If oModelMov:VldData()
				oModelMov:CommitData()
			Else
				lRet := .F.
				cLog := cValToChar(oModelMov:GetErrorMessage()[4]) + ' - '
				cLog += cValToChar(oModelMov:GetErrorMessage()[5]) + ' - '
				cLog += cValToChar(oModelMov:GetErrorMessage()[6])
				Help( ,,"M030VALID",,cLog, 1, 0 )
			Endif
			
			RestArea(aAreaAnt)
		EndIf
		
		oModelMov:DeActivate()
		oModelMov:Destroy()
		oModelMov:= nil
	EndIf
	
	RestArea(aAreaSE5)
	RestArea(aArea)
Return
		
/*/{Protheus.doc}Fin340ExCM
Função que excluirá o registro de correção monetaria na SE5 ao excluir uma compensacao

@author Karen Honda
@since  28/08/13
@version 11
/*/
Static Function Fin340ExCM(cFilCmp, cSequen, nOpc )
	Local aArea 	:= GetArea()
	Local aAreaSE5 	:= SE5->( GetArea() )
	Local cChave	:= ""
	
	DEFAULT cFilCmp := xFilial("SE5")
	DEFAULT cSequen := SE5->E5_SEQ
	DEFAULT nOpc	:= 0
	
	If nOpc > 0
		SE5->(DbSetorder(7))
		If SE5->( DbSeek(cFilCmp + SE5->(E5_PREFIXO + E5_NUMERO + E5_PARCELA + E5_TIPO)) )
			cChave := cFilCmp+SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO
			
			While cChave == SE5->(E5_FILIAL + E5_PREFIXO + E5_NUMERO + E5_PARCELA + E5_TIPO )
				If SE5->E5_TIPODOC $ "VM|CM" .AND. cSequen == SE5->E5_SEQ
					RecLock("SE5")
					If nOpc == 4		//Exclusão
						dbDelete()
					ElseIf nOpc == 5	//Estorno
						SE5->E5_SITUACA := 'C'
					Endif
					SE5->(MsUnLock())
				EndIf
				SE5->(DbSkip())
			EndDo
		Endif
	Endif
	
	RestArea(aAreaSE5)
	RestArea(aArea)
Return
		
//--------------------------------------------------------------------------
/*/{Protheus.doc}fA340Grv
Atualiza o saldo do título de partida da compensação.

@author Valter G. Nogueira Jr
@since  21/03/94
@version 10
/*/
//--------------------------------------------------------------------------
Function fA340Grv(lPadrao, nVlrMov, nRecTmpSE2, nVlrImpBx, nAcresc, nDecres, aBaixaSE5, nPosTit, lAutomato, aImpFK3FK4, aTitCalc, nMoedSel)
	Local lRet    As Logical
	Local cAdiant As Character
	Local nVlrAbt As Numeric 
	
	Default lPadrao    	:= .F.
	Default nVlrMov    	:= 0
	Default nRecTmpSE2 	:= 0
	Default nVlrImpBx  	:= 0
	Default nAcresc    	:= 0
	Default nDecres    	:= 0	
	Default aBaixaSE5  	:= {}
	Default nPosTit    	:= 1
	Default lAutomato  	:= .F.
	Default aImpFK3FK4 	:= {}
	Default aTitCalc	:= {}
	Default nMoedSel	:= 1

	//Inicializa variáveis.
	lRet     := (!Empty(nVlrMov) .Or. !Empty(nRecTmpSE2))
	cAdiant  := ""
	nVlrAbt  := 0
	cNumero	 := SE2->E2_NUM
	cPrefixo := SE2->E2_PREFIXO
	cParcela := SE2->E2_PARCELA
	cTipoTit := ""
	
	If lRet
		If cPaisLoc == "BRA" .And. mv_par10 == 1			
			If SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
				nVlrMov := aTitulos[nPosTit,20]
			Else
				AltVencImp(dBaixa)
				nVlrMov := aTitulos[nPosTit,22]
				nVlrAbt := aTitulos[nPosTit,23]
			EndIf
		EndIf		
		
		nVlrMov := FA340Acres(nVlrMov, @nAcresc)

		//Atualiza a baixa do titulo
		RecLock("SE2")
			If mv_par10 = 2 .and. __nMvPar13 = 2 
				SE2->E2_OK := "LP"
			Else	
				SE2->E2_SALDO   -= Round(NoRound(nVlrMov, __nCasDec), 2)
				SE2->E2_BAIXA 	:= dBaixa
				SE2->E2_LOTE    := cLote
				SE2->E2_MOVIMEN := dBaixa
				SE2->E2_DESCONT := 0
				SE2->E2_MULTA   := 0
				SE2->E2_JUROS   := 0
				SE2->E2_CORREC  := 0
				SE2->E2_VALLIQ  := Round(NoRound(nVlrMov, __nCasDec), 2)
				
				If !SE2->E2_TIPO $ MVPAGANT+"|"+MVABATIM+"|INA"
					SE2->E2_SDDECRE -= nDecres
					SE2->E2_SDACRES -= nAcresc
					SE2->E2_SALDO   -= nDecres
					
					If SE2->E2_SALDO <= nVlrAbt
						SE2->E2_SALDO -= nVlrAbt	
					EndIf
				EndIf
				
				If __lF340CMP
					ExecBlock('F340CMP',.F.,.F.)
				EndIf
			EndIf	

			If SE2->E2_MOEDA <> 1 .And. SE2->E2_MOEDA <> nMoedSel .And. SE2->E2_SALDO == 0.01			
				SE2->E2_SALDO := 0 
			EndIf
		
		SE2->(MsUnlock())		
		SE2->(dbGoto(__nRecPart))

		FA340Mov(lPadrao, nVlrMov, nRecTmpSE2, @nAcresc, @nDecres, aBaixaSE5, nVlrImpBx, nPosTit, lAutomato, aImpFK3FK4, aTitCalc )
		
		SE2->(dbGoto(__nRecPart))
		
		If mv_par10 == 1 .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
			nAtraso := (dBaixa - SE2->E2_VENCTO)
			
			If SE2->E2_SALDO == 0
				If ALLTRIM(SE2->E2_ORIGEM) $ "FINA667|FINA677"
					FINATURES(SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA), .T., SE2->E2_ORIGEM, "P")
				EndIf
				
				//Baixar o(s) titulo(s) de abatimento(s)
				If nVlrAbt != 0
					F340BxAbat(nVlrAbt)
				EndIf
			EndIf

			If nAtraso > 1
				F340MaAtr(nAtraso)
			EndIf
		Endif
				
	EndIf

Return lRet

//--------------------------------------------------------------------------
/*/{Protheus.doc}FA340Mov
Gera movimento de baixa da compensação

@author Valter G. Nogueira Jr
@since  21/03/94
@version 10
/*/
//--------------------------------------------------------------------------
Static Function FA340Mov(lPadrao, nVlrMov, nRecTmpSE2, nAcresc, nDecres, aBaixaSE5, nVlrImpBx, nPosTit, lAutomato, aImpFK3FK4, aTitCalc)
	Local cFornOri	:= SE2->E2_FORNECE
	Local cLjOri	:= SE2->E2_LOJA
	Local nVlrReal	:= 0
	Local nTamSeq	:= TamSX3("E5_SEQ")[1]
	Local cSeqenc	:= Replicate("0", nTamSeq)
	Local l340Mov1	:= ExistBlock("SE5FI340")
	Local l340Mov2	:= ExistBlock("SE5FI341")
	
	Local aDadosAdt := {}
	Local cSeqPrc	:= Replicate("0", nTamSeq)
	Local cSeqAdt	:= Replicate("0", nTamSeq)
	Local oModelBxP	:= FWLoadModel("FINM020")
	Local oSubFKA	:= Nil
	Local oSubFK2	:= Nil
	Local oSubFK3	:= Nil
	Local oSubFK4	:= Nil
	Local oSubFK6	:= Nil
	Local cLog 		:= ""
	Local cChaveFK7	:= ""
	Local cChvFK7Out:= ""
	Local cCamposE5	:= ""
	Local lRet 		:= .T.
	Local cChaveTit := xFilial("SE2")+"|"+SE2->E2_PREFIXO+"|"+SE2->E2_NUM+"|"+SE2->E2_PARCELA+"|"+SE2->E2_TIPO+"|"+SE2->E2_FORNECE+"|"+SE2->E2_LOJA
	Local cFilFK6	:= FWxFilial("FK6")
	Local cIdFK2	:= ''
	Local aAux		:= {}
	Local aAreaFK2	:= {}
	Local nX		:= 0
	Local lIntPFS 	:= SuperGetMV("MV_JURXFIN",,.F.) // Integração SIGAPFS x SIGAFIN
	Local nCm 		:= 0
	Local nMoeTiBrw := 0
	Local cDoc1 	:= ""
	Local cDoc2		:= ""
	Local cFunName	:= FunName()
	Local lF340750  := cFunName $ "FINA340|FINA750"
	Local nRecnoSE5 := 0
	Local nVlRealPA := 0
	Local dDtMov    := dDataBase
	Local nTxOld    := __nTxCont
	Local lTxC      := !Empty(SE2->E2_TXMOEDA)
	Local nValVmP 	:= 0
	Local nValVmC 	:= 0
	Local nRecnoFK2	:= 0

	Default lPadrao    	:= .F.
	Default nVlrMov    	:= 0
	Default nRecTmpSE2 	:= 0
	Default nAcresc    	:= 0
	Default nDecres    	:= 0
	Default aBaixaSE5  	:= {}
	Default nVlrImpBx  	:= 0
	Default nPosTit    	:= 1
	Default lAutomato  	:= .F.
	Default aImpFK3FK4 	:= {}
	Default aTitCalc	:= {}

	//Doc do título de partida
	cDoc1 := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
	SE2->(dbSetOrder(1))
	cSeqAdt := FaNxtSeqBx("SE2", .T.)

	If !Empty(SE2->E2_TXMDCOR)	
		nValVmP := Round((nVlrMov * SE2->E2_TXMDCOR) - (nVlrMov * (SE2->E2_VLCRUZ / SE2->E2_VALOR)),2)
	EndIf
	
	//Doc do título marcado para compensação
	SE2->(dbGoTo(nRecTmpSE2))
	cDoc2 := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
	lTxC  := lTxC .And. !Empty(SE2->E2_TXMOEDA)

	If !Empty(SE2->E2_TXMDCOR)	
		nValVmC := Round((nVlrMov * SE2->E2_TXMDCOR) - (nVlrMov * (SE2->E2_VLCRUZ / SE2->E2_VALOR)),2)
	EndIf

	//Sequencia da baixa do titulo + 1
	cSeqPrc   := FaNxtSeqBx("SE2", .T.)
	cSeqenc   := If(cSeqAdt > cSeqPrc, cSeqAdt, cSeqPrc)
	aDadosAdt := {SE2->E2_NATUREZ, SE2->E2_TIPO, SE2->E2_PREFIXO, SE2->E2_NUM,SE2->E2_PARCELA, SE2->E2_FORNECE, SE2->E2_LOJA, SE2->E2_NOMFOR,SE2->E2_MOEDA, SE2->E2_FILIAL}
	nMoeTiBrw := SE2->E2_MOEDA

	//Volta para o título de partida da compensação.
	SE2->(dbGoTo(__nRecPart))

	dDtMov    := If(SE2->E2_TIPO $ MVPAGANT, SE2->E2_EMISSAO, dDtMov)
	
	If cPaisLoc == "BRA" .And. mv_par10 == 1
		nVlrMov  := If(SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC", aTitulos[nPosTit,20], aTitulos[nPosTit,22])
	EndIf
	
	If nMoeda340 == 1
		nVlrReal := nVlrMov
		nVlrEstr := xMoeda(nVlrMov,  nMoeda340, nMoeTiBrw, dDtMov, __nCasDec, 0, __nTxMoedP)
	Else
		nVlrEstr := nVlrMov
		nVlrReal := xMoeda(nVlrMov, nMoeda340, 1, dDtMov, __nCasDec, __nTxMoedP)
	EndIf
	
	If lTxC .And. __lCmTxCon .And. mv_par10 == 1 .And. cPaisLoc == "BRA"
		nVlRealPA := nVlrReal
		
		If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC"
			If nMoeTiBrw != nMoeda340 .And. nMoeTiBrw > 1 .And. nMoeda340 > 1
				//Converte o valor para moeda original do título
				nVlRealPA := xMoeda(aTitulos[nPosTit,20], nMoeda340, nMoeTiBrw, dDtMov, __nCasDec, __nTxMoedP, aTitulos[nPosTit,21])	
				//Converte o valor para real
				nVlRealPA := xMoeda(nVlRealPA, nMoeTiBrw, 1, dDatabase, __nCasDec, aTitulos[nPosTit,21])
			Else 
				nMoeTiBrw := If(nMoeTiBrw != 1, nMoeTiBrw, nMoeda340)
				nVlRealPA := xMoeda(aTitulos[nPosTit,20], nMoeTiBrw, 1, dDatabase, __nCasDec, aTitulos[nPosTit,21])
			EndIf
		EndIf
	EndIf
	
	If nVlrMov != 0
		oModelBxP:SetOperation( MODEL_OPERATION_INSERT )
		oModelBxP:Activate()
		oModelBxP:SetValue( "MASTER", "E5_GRV", .T. )
		oModelBxP:SetValue( "MASTER", "NOVOPROC", .T. )
		oSubFK2  := oModelBxP:GetModel("FK2DETAIL")
		oSubFK3  := oModelBxP:GetModel("FK3DETAIL")
		oSubFK4  := oModelBxP:GetModel("FK4DETAIL")
		oSubFK6  := oModelBxP:GetModel("FK6DETAIL")
		oSubFKA  := oModelBxP:GetModel("FKADETAIL")
		
		If !Empty(cCamposE5)
			cCamposE5 += "|"
		Endif
		
		cCamposE5 += "{"
		cCamposE5 += " {'E5_DTDIGIT' , dBaixa}"
		cCamposE5 += ",{'E5_PREFIXO' , '" + SE2->E2_PREFIXO + "'}"
		cCamposE5 += ",{'E5_NUMERO'  , '" + SE2->E2_NUM		+ "'}"
		cCamposE5 += ",{'E5_PARCELA' , '" + SE2->E2_PARCELA	+ "'}"
		cCamposE5 += ",{'E5_TIPO'    , '" + SE2->E2_TIPO	+ "'}"
		cCamposE5 += ",{'E5_FORNECE' , '" + SE2->E2_FORNECE	+ "'}"
		cCamposE5 += ",{'E5_CLIFOR'  , '" + SE2->E2_FORNECE	+ "'}"
		cCamposE5 += ",{'E5_LOJA'    , '" + SE2->E2_LOJA	+ "'}"
		cCamposE5 += ",{'E5_BENEF'   , '" + RemoveAsp(SE2->E2_NOMFOR) + "'}"
		cCamposE5 += ",{'E5_FILORIG' , '" + SE2->E2_FILORIG	+ "'}"
		
		If !oSubFKA:IsEmpty()
			oSubFKA:AddLine()
			oSubFKA:GoLine( oSubFKA:Length() )
		Endif
		
		cChaveTit   := SE2->E2_FILIAL+"|"+SE2->E2_PREFIXO+"|"+SE2->E2_NUM+"|"+SE2->E2_PARCELA+"|"+SE2->E2_TIPO+"|"+SE2->E2_FORNECE+"|"+SE2->E2_LOJA
		cChaveFK7	:= FINGRVFK7("SE2", cChaveTit)
		cChvFK7Out	:= cChaveFK7
		cIdFK2		:= FWUUIDV4()
		oSubFKA:SetValue('FKA_IDORIG', cIdFK2)
		oSubFKA:SetValue('FKA_TABORI', "FK2")
		
		If !oSubFK2:IsEmpty()
			oSubFK2:AddLine()
			oSubFK2:GoLine(oSubFK2:Length())
		Endif
		
		oSubFK2:SetValue( "FK2_DATA",		dBaixa )
		oSubFK2:LoadValue( "FK2_NATURE",	SE2->E2_NATUREZ )
		oSubFK2:SetValue( "FK2_RECPAG",		"P" )
		oSubFK2:SetValue( "FK2_MOTBX", 		"CMP")
		oSubFK2:SetValue( "FK2_ORIGEM",		cFunName )
		oSubFK2:SetValue( "FK2_SEQ", 		cSeqenc )
		oSubFK2:SetValue( "FK2_IDDOC",		cChaveFK7 )
		oSubFK2:SetValue( "FK2_LOTE",		cLote )
		oSubFK2:SetValue( "FK2_CCUSTO",		SE2->E2_CCUSTO )
		oSubFK2:SetValue( "FK2_DOC", 		cDoc2 )
		oSubFK2:SetValue( "FK2_FILORI",		SE2->E2_FILORIG)
		oSubFK2:SetValue( "FK2_MOEDA", 		StrZero(SE2->E2_MOEDA,2) )
		oSubFK2:SetValue( "FK2_LA", 		If(lPadrao .And. mv_par11 == 1, "S", "N") )
		
		If cPaisLoc != "BRA" .And. Type("aTxMoedas") # "U"
			nVlrEstr := Round(NoRound(xMoeda(nVlrReal, SE2->E2_MOEDA, nMoeda340, Nil, __nCasDec, aTxMoedas[SE2->E2_MOEDA][2],aTxMoedas[nMoeda340][2]), __nCasDec), __nCasDec)
		Endif
		
		If cPaisLoc != "BRA"
			oSubFK2:SetValue("FK2_VALOR", nVlrMov)
			oSubFK2:SetValue("FK2_VLMOE2",  IIf(SE2->E2_MOEDA == 1, nVlrEstr, nVlrReal))
		Else
			oSubFK2:SetValue("FK2_VALOR",  IIf(SE2->E2_MOEDA == 1, Round(nVlrReal, 2), Round(nVlrEstr, 2)))
			oSubFK2:SetValue("FK2_VLMOE2", IIf(SE2->E2_MOEDA == 1, Round(nVlrEstr, 2), Round(nVlrReal, 2)))
		EndIf
		
		If lDebito
			oSubFK2:SetValue("FK2_TPDOC", "BA")
			oSubFK2:SetValue("FK2_HISTOR", STR0074)//Baixa por Compensacao
		Else
			oSubFK2:SetValue("FK2_TPDOC", "CP")
			oSubFK2:SetValue("FK2_HISTOR", STR0075) //Compens. Adiantamento
		EndIf
		
		cCamposE5 += ",{'E5_DTDISPO', STOD('" + DTOS(dBaixa)+ "') }"
		cCamposE5 += ",{'E5_LA','" + IIF(lPadrao .And. mv_par11 == 1, "S", "N") + "' } "
		cCamposE5 += ",{'E5_FORNADT', '" + Left(Right(cDoc2, Len(SE2->(E2_FORNECE+E2_LOJA))), Len(SE2->E2_FORNECE)) + "' } "
		cCamposE5 += ",{'E5_LOJAADT', '" + Right(cDoc2, Len(SE2->E2_LOJA)) + "' } "
		
		If !SE2->E2_TIPO $ MVPAGANT+"|"+MVABATIM+"|INA"
			If nAcresc != 0
				If nAcresc > nVlrMov
					nAcresc := nVlrMov	
				EndIf
				
				nAcresc := Round(xMoeda(nAcresc, nMoeda340, 1, dBaixa, __nCasDec, __nTxMoedP), 2)
				
				If !oSubFK6:IsEmpty()
					oSubFK6:AddLine()
				EndIf
				
				oSubFK6:SetValue( 'FK6_FILIAL'	, cFilFK6 )
				oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )
				oSubFK6:SetValue( 'FK6_TABORI'	, 'FK2' )
				oSubFK6:SetValue( 'FK6_TPDOC'	, 'JR' )
				oSubFK6:SetValue( 'FK6_VALCAL'	, Round(NoRound(xMoeda(nAcresc, nMoeda340, 1,,__nCasDec, __nTxMoedP), __nCasDec), 2))
				oSubFK6:SetValue( 'FK6_VALMOV'	, Round(NoRound(xMoeda(nAcresc, nMoeda340, 1,,__nCasDec, __nTxMoedP), __nCasDec), 2))
				oSubFK6:SetValue( 'FK6_RECPAG'	, "P" )
				oSubFK6:SetValue( 'FK6_IDORIG'	, cIdFK2 )
				oSubFK6:SetValue( 'FK6_GRVSE5' , .F.)
				cCamposE5 += ",{'E5_VLJUROS', " + CVALTOCHAR(Round(NoRound(xMoeda(nAcresc, nMoeda340, 1,,__nCasDec, __nTxMoedP), __nCasDec), 2)) + "}"
				cCamposE5 += ",{'E5_VLACRES', " + CVALTOCHAR(Round(NoRound(xMoeda(nAcresc, nMoeda340, 1,,__nCasDec, __nTxMoedP), __nCasDec), 2)) + "}"
			EndIf
			
			If nDecres != 0
				If !oSubFK6:IsEmpty()
					oSubFK6:AddLine()
				EndIf
				oSubFK6:SetValue( 'FK6_FILIAL'	, cFilFK6 )
				oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )
				oSubFK6:SetValue( 'FK6_TABORI'	, 'FK2' )
				oSubFK6:SetValue( 'FK6_TPDOC'	, 'DC' )
				oSubFK6:SetValue( 'FK6_VALCAL'	, Round(NoRound(xMoeda(nDecres,nMoeda340, 1,,__nCasDec, __nTxMoedP),__nCasDec),2) )
				oSubFK6:SetValue( 'FK6_VALMOV'	, Round(NoRound(xMoeda(nDecres,nMoeda340, 1,,__nCasDec, __nTxMoedP),__nCasDec),2) )
				oSubFK6:SetValue( 'FK6_RECPAG'	, "P" )
				oSubFK6:SetValue( 'FK6_IDORIG'	, cIdFK2 )
				oSubFK6:SetValue( 'FK6_GRVSE5' , .F.)
				oSubFK6:SetValue( 'FK6_TPDESC'	, Iif(cPaisLoc == "BRA", IIF(SE2->E2_TPDESC == 'C', '1', '2'),'2') )
				cCamposE5 += ",{'E5_VLDESCO', " + CVALTOCHAR(Round(NoRound(xMoeda(nDecres, nMoeda340, 1,,__nCasDec, __nTxMoedP), __nCasDec), 2)) + "}"
				cCamposE5 += ",{'E5_VLDECRE', " + CVALTOCHAR(Round(NoRound(xMoeda(nDecres, nMoeda340, 1,,__nCasDec, __nTxMoedP), __nCasDec), 2)) + "}"
			EndIf
			//Caso haja retenção, define os valores na FK3 e FK4
			If Len(aImpFK3FK4) > 0
				DefFK3FK4(aImpFK3FK4, cFunName, oSubFK3, oSubFK4, cIdFK2, aTitCalc)
			EndIf
		EndIf
		
		oSubFK2:SetValue("FK2_TXMOED", Iif(cPaisLoc == "BRA", __nTxMoedP, aTxMoedas[nMoeda340][2]))
		
		If (nMoeda340 > 1.Or. cPaisLoc != "BRA")
			nCM := FA340Corr(nVlrEstr, nVlRealPA, "SE2", __nTxMoedP)
		EndIf

		If nCM <> 0 .and. nValVmC <> 0 .and. SE2->E2_TXMOEDA > 0
			nCM := nCM - nValVmC	
		Endif
		
		If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC" .And. ( (NPIS340+NCOF340+NCSL340+NIRF340+NISS340) > 0 .or. (nBaseIrpf > 0) )
			F340VPSE5(@cCamposE5)
		EndIf
		
		If l340Mov1
			ExecBlock("SE5FI340",.f.,.f.)
		EndIf
		
		If nCm != 0 
			RecLock("SE2")
			SE2->E2_CORREC := nCm
			SE2->(MsUnlock())
		
			If (lF340750 .or. lAutomato) .And. cPaisLoc == "BRA"
				FA340GrvCm(oSubFK6, nCm, cFilFK6, cIdFK2, @cCamposE5)
				
				If l340Mov1
					ExecBlock("SE5FI340",.F.,.F.)
				EndIf
			EndIf
		EndIf
		
		cCamposE5 += " } "
		oModelBxP:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 )
		
		//Grava os dados
		If oModelBxP:VldData()
			oModelBxP:CommitData()
			If (!SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC" .Or. mv_par10 == 2)
				nRecnoSE5 := oModelBxP:GetValue("MASTER","E5_RECNO")
			EndIf
			nRecnoFK2 := FK2->(Recno())
			If __lCmpM103
				If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
					AAdd(__aRecAPI, { oModelBxP:GetValue("MASTER","E5_RECNO"), SE2->(Recno()), nRecnoFK2 } )
				EndIf
			EndIf
			AAdd(aRecSe5, oModelBxP:GetValue("MASTER","E5_RECNO") ) // Adiciona o recno para utilizar no ponto de entrada F340SE5
			
			oModelBxP:DeActivate()
			If lIntPFS .And. FindFunction("JGrvBxPag")
				JGrvBxPag(SE2->(RECNO()), 3, SE5->(RECNO()), nRecTmpSE2)
			EndIf
		Else
			lRet := .F.
			cLog := cValToChar(oModelBxP:GetErrorMessage()[MODEL_MSGERR_IDFIELDERR]) + ' - '
			cLog += cValToChar(oModelBxP:GetErrorMessage()[MODEL_MSGERR_ID]) + ' - '
			cLog += cValToChar(oModelBxP:GetErrorMessage()[MODEL_MSGERR_MESSAGE])
			Help( ,,"M020VLDA1",,cLog, 1, 0 )
		Endif
		
		cCamposE5:=  ""
		
		If lRet
			If !Empty(nCm)
				F340MoedCm()	
			EndIf		
			
			If Len(aBaixaSE5) == 0
				aBaixaSE5 := aClone(FIM020RSE5())
			Else
				aAux := FIM020RSE5()
				for nX := 1 To len(aAux)
					AAdd(aBaixaSE5 ,aAux[nX] )
				next
			EndIf
			
			SA2->(DbSetOrder(1))
			If SA2->(MsSeek(xFilial("SA2",SE2->E2_FILORIG)+SE2->E2_FORNECE+SE2->E2_LOJA))
				RecLock("SA2")
				
				If SE5->E5_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|INA|DIC"
					SA2->A2_SALDUP	+= nVlrReal
					SA2->A2_SALDUPM	+= xMoeda(nVlrReal, 1, Val(GetMv("MV_MCUSTO")), SE2->E2_EMISSAO,,,Fa340TxMd(Val(GetMv("MV_MCUSTO")), __nTxMoedP))
				Else
					SA2->A2_SALDUP	-= nVlrReal
					SA2->A2_SALDUPM	-= xMoeda(nVlrReal, 1, Val(GetMv("MV_MCUSTO")), SE2->E2_EMISSAO,,,Fa340TxMd(Val(GetMv("MV_MCUSTO")), __nTxMoedP))
				Endif
				
				SA2->(MsUnlock())
			Endif
		
			If !Empty(cDoc1) .And. Len(aDadosAdt) > 0
				SE2->(dbSetOrder(1))
				SE2->(dbGoto(nRecTmpSE2))
				dDtMov    := If(SE2->E2_TIPO $ MVPAGANT, SE2->E2_EMISSAO, dDtMov)
				If !__lTxPrCon
					__nTxCont := 0
				EndIf
				
				nAcresc   := SE2->E2_SDACRES
				nDecres   := SE2->E2_SDDECRE
				
				If cPaisLoc == "BRA" .And. mv_par10 == 1
					nVlrMov := If(SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC", aTitulos[nPosTit,20], aTitulos[nPosTit,22] )
				EndIf
				
				If nMoeda340 == 1
					nVlrReal := nVlrMov
					nVlrEstr := xMoeda(nVlrMov, nMoeda340, SE2->E2_MOEDA, dDtMov, __nCasDec, 0, __nTxTiBrw)
				Else		
					//compensação entre moedas estrangeiras distintas
					If nMoeTiBrw != nMoeda340 .And. nMoeda340 > 1 .And. nMoeTiBrw > 1
						nVlrMov := xMoeda(nVlrMov, nMoeda340, nMoeTiBrw, dDtMov, __nCasDec, __nTxMoedP, __nTxTiBrw)	
					EndIf					
					
					nVlrEstr := nVlrMov
					nVlrReal := xMoeda(nVlrMov, nMoeda340, 1, dDtMov, __nCasDec, __nTxTiBrw)
				EndIf
				
				oModelBxP:SetOperation( MODEL_OPERATION_INSERT )
				oModelBxP:Activate()
				oModelBxP:SetValue( "MASTER", "E5_GRV", .T. )
				oModelBxP:SetValue( "MASTER", "NOVOPROC", .T. )
				oSubFK2  := oModelBxP:GetModel("FK2DETAIL")
				oSubFK3  := oModelBxP:GetModel("FK3DETAIL")
				oSubFK4  := oModelBxP:GetModel("FK4DETAIL")
				oSubFK6  := oModelBxP:GetModel("FK6DETAIL")
				oSubFKA  := oModelBxP:GetModel("FKADETAIL")
				
				cChaveTit:= aDadosAdt[10]+"|"+aDadosAdt[3]+"|"+aDadosAdt[4]+"|"+aDadosAdt[5]+"|"+aDadosAdt[2]+"|"+aDadosAdt[6]+"|"+aDadosAdt[7]
				cChaveFK7	:= FINGRVFK7("SE2", cChaveTit)
				cIdFK2		:= FWUUIDV4()
				oSubFKA:SetValue( 'FKA_IDORIG', cIdFK2 )
				oSubFKA:SetValue( 'FKA_TABORI', "FK2" )
				nCM := 0
				
				If Type("aTxMoedas")#"U" .And. cPaisLoc <> "BRA"
					nVlrEstr := Round(NoRound(xMoeda(nVlrMov, nMoeda340, aDadosAdt[9],,__nCasDec, aTxMoedas[nMoeda340][2], aTxMoedas[aDadosAdt[9]][2]), __nCasDec), __nCasDec)
				EndIf
				
				oSubFK2:SetValue( "FK2_DATA",	dBaixa )
				oSubFK2:SetValue( "FK2_NATURE",	aDadosAdt[1] )
				oSubFK2:SetValue( "FK2_RECPAG",	"P" )
				oSubFK2:SetValue( "FK2_MOTBX", 	"CMP")
				oSubFK2:SetValue( "FK2_ORIGEM", cFunName )
				oSubFK2:SetValue( "FK2_SEQ", 	cSeqenc )
				oSubFK2:SetValue( "FK2_IDDOC", 	cChaveFK7 )
				oSubFK2:SetValue( "FK2_LOTE", 	cLote )
				oSubFK2:SetValue( "FK2_CCUSTO", SE2->E2_CCUSTO )
				oSubFK2:SetValue( "FK2_DOC", 	cDoc1 )
				oSubFK2:SetValue( "FK2_FILORI", SE2->E2_FILORIG )
				oSubFK2:SetValue( "FK2_MOEDA",	StrZero(SE2->E2_MOEDA ,2) )
				oSubFK2:SetValue( "FK2_LA", 	IIf(lPadrao .And. mv_par11 == 1, "S", "N") )
				
				If cPaisLoc != "BRA" 
					oSubFK2:SetValue( "FK2_VALOR", 	IIf(SE2->E2_MOEDA == 1, nVlrReal, nVlrEstr ))
					oSubFK2:SetValue( "FK2_VLMOE2",	IIf(SE2->E2_MOEDA == 1, nVlrEstr, nVlrReal ))
				Else
					oSubFK2:SetValue("FK2_VALOR",  IIf(SE2->E2_MOEDA == 1, Round(nVlrReal, 2), Round(nVlrEstr, 2)))
					oSubFK2:SetValue("FK2_VLMOE2", IIf(SE2->E2_MOEDA == 1, Round(nVlrEstr, 2), Round(nVlrReal, 2)))
				EndIf
				
				If lDebito
					oSubFK2:SetValue("FK2_TPDOC"  ,"CP")
					oSubFK2:SetValue("FK2_HISTOR" , STR0075)//Compens. Adiantamento
				Else
					oSubFK2:SetValue("FK2_TPDOC"  ,"BA")
					oSubFK2:SetValue("FK2_HISTOR" , STR0074)//Baixa por Compensacao
				Endif
				
				oSubFK2:SetValue("FK2_TXMOED", __nTxTiBrw)
				oSubFK2:SetValue("FK2_IDCOMP", cChvFK7Out)
				If !Empty(cCamposE5)
					cCamposE5 += "|"
				EndIf
				
				cCamposE5 += "{"
				cCamposE5 += " {'E5_DTDIGIT',	dBaixa}"
				cCamposE5 += ",{'E5_DTDISPO', 	STOD( '" + DTOS(dBaixa) + "' )}"
				cCamposE5 += ",{'E5_PREFIXO', 	'" + aDadosAdt[3] + "'}"
				cCamposE5 += ",{'E5_NUMERO', 	'" + aDadosAdt[4] + "'}"
				cCamposE5 += ",{'E5_PARCELA', 	'" + aDadosAdt[5] + "'}"
				cCamposE5 += ",{'E5_TIPO', 		'" + aDadosAdt[2] + "'}"
				cCamposE5 += ",{'E5_FORNECE', 	'" + aDadosAdt[6] + "'}"
				cCamposE5 += ",{'E5_CLIFOR', 	'" + aDadosAdt[6] + "'}"
				cCamposE5 += ",{'E5_LOJA', 		'" + aDadosAdt[7] + "'}"
				cCamposE5 += ",{'E5_BENEF', 	'" + RemoveAsp(aDadosAdt[8]) + "'}"
				cCamposE5 += ",{'E5_FILORIG', 	'" + SE2->E2_FILORIG + "'}"
				cCamposE5 += ",{'E5_FORNADT', 	'" + cFornOri + "'}"
				cCamposE5 += ",{'E5_LOJAADT', 	'" + cLjOri + "'}"
				cCamposE5 += ",{'E5_LA', 		'" + IIF(lPadrao .And. mv_par11 == 1, "S", "N") + "'}"
				
				If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC" .And. ( (NPIS340+NCOF340+NCSL340+NIRF340+NISS340+nVlRetIrf) > 0 .or. (nBaseIrpf > 0) )
					F340VPSE5(@cCamposE5)
				EndIf
				
				If !SE2->E2_TIPO $ MVPAGANT+"|"+MVABATIM+"|INA"
					If nAcresc != 0
						If SE2->E2_SDACRES > Round(xMoeda(nVlrMov, SE2->E2_MOEDA, nMoeTiBrw, dBaixa, __nCasDec, __nTxTiBrw, __nTxMoedP), 2)
							nAcresc := nVlrMov
						EndIf
						
						nAcresc := Round(xMoeda(nAcresc, SE2->E2_MOEDA, 1, dBaixa, __nCasDec, __nTxTiBrw), 2)
						
						If !oSubFK6:IsEmpty()
							oSubFK6:AddLine()
						EndIf
						
						oSubFK6:SetValue( 'FK6_FILIAL'	, cFilFK6 )
						oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )
						oSubFK6:SetValue( 'FK6_TABORI'	, 'FK2' )
						oSubFK6:SetValue( 'FK6_TPDOC'	, 'JR' )
						oSubFK6:SetValue( 'FK6_VALCAL'	, nAcresc)
						oSubFK6:SetValue( 'FK6_VALMOV'	, nAcresc)
						oSubFK6:SetValue( 'FK6_RECPAG'	, "P" )
						oSubFK6:SetValue( 'FK6_IDORIG'	, cIdFK2 )
						oSubFK6:SetValue( 'FK6_GRVSE5' , .F.)
						cCamposE5 += ",{'E5_VLJUROS', " + cValToChar(nAcresc) + "}"
						cCamposE5 += ",{'E5_VLACRES', " + cValToChar(nAcresc) + "}"
					EndIf
					
					If nDecres != 0
						nDecres  := Round(xMoeda(nDecres, SE2->E2_MOEDA, 1, dBaixa, __nCasDec, __nTxTiBrw), 2)
						
						If !oSubFK6:IsEmpty()
							oSubFK6:AddLine()
						EndIf
						
						oSubFK6:SetValue( 'FK6_FILIAL'	, cFilFK6 )
						oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )
						oSubFK6:SetValue( 'FK6_TABORI'	, 'FK2' )
						oSubFK6:SetValue( 'FK6_TPDOC'	, 'DC' )
						oSubFK6:SetValue( 'FK6_VALCAL'	, nDecres)
						oSubFK6:SetValue( 'FK6_VALMOV'	, nDecres)
						oSubFK6:SetValue( 'FK6_RECPAG'	, "P" )
						oSubFK6:SetValue( 'FK6_IDORIG'	, cIdFK2 )
						oSubFK6:SetValue( 'FK6_GRVSE5' , .F.)
						oSubFK6:SetValue( 'FK6_TPDESC'	, Iif(cPaisLoc == "BRA",IIF(SE2->E2_TPDESC == 'C', '1', '2'),'2') )
						cCamposE5 += ",{'E5_VLDESCO' , " + cValToChar(nDecres) + "}"
						cCamposE5 += ",{'E5_VLDECRE' , " + cValToChar(nDecres) + "}"
					EndIf
					//Caso haja retenção, define os valores na FK3 e FK4
					If Len(aImpFK3FK4) > 0
						DefFK3FK4(aImpFK3FK4, cFunName, oSubFK3, oSubFK4, cIdFK2, aTitCalc)
					EndIf
				EndIf
				
				If (SE2->E2_MOEDA > 1 .Or. cPaisLoc != "BRA")
					nCM := FA340Corr(nVlrEstr, nVlRealPA, "SE2", __nTxTiBrw)
				EndIf

				If nCM <> 0 .and. nValVmP <> 0 .and. SE2->E2_TXMOEDA > 0
					nCM := nCM - nValVmP
				Endif
				
				If nCm != 0 
					RecLock("SE2")
					SE2->E2_CORREC := nCm
					SE2->(MsUnlock())
				
					If (lF340750 .or. lAutomato) .And. cPaisLoc == "BRA"
						FA340GrvCm(oSubFK6, nCm, cFilFK6, cIdFK2, @cCamposE5)
					
						If l340Mov2
							ExecBlock("SE5FI341", .F., .F.)
						Endif
					EndIf			
				EndIf
				
				cCamposE5 += " } "
				
				dbSelectArea("SA2")
				If MsSeek(xFilial("SA2",SE2->E2_FILORIG)+SE2->E2_FORNECE+SE2->E2_LOJA)
					RecLock("SA2")
					If SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC"
						SA2->A2_SALDUP	+= nVlrReal
						SA2->A2_SALDUPM	+= xMoeda(nVlrReal, 1, Val(GetMv("MV_MCUSTO")), SE2->E2_EMISSAO,,,Fa340TxMd(Val(GetMv("MV_MCUSTO")), __nTxTiBrw))
					Else
						SA2->A2_SALDUP	-= nVlrReal
						SA2->A2_SALDUPM	-= xMoeda(nVlrReal, 1, Val(GetMv("MV_MCUSTO")), SE2->E2_EMISSAO,,,Fa340TxMd(Val(GetMv("MV_MCUSTO")), __nTxTiBrw))
					Endif
					SA2->(MsUnlock())
				Endif
			EndIf
			
			oModelBxP:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 )
			
			If oModelBxP:VldData()
				oModelBxP:CommitData()
				If Empty(nRecnoSE5) .And. (!SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC" .Or. mv_par10 == 2)
					nRecnoSE5 := oModelBxP:GetValue("MASTER","E5_RECNO")
				EndIf				
				
				If __lCmpM103
					If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
						AAdd(__aRecAPI, { oModelBxP:GetValue("MASTER","E5_RECNO"), SE2->(Recno()), nRecnoFK2 } )
					EndIf
				EndIf
				AAdd(aRecSe5, oModelBxP:GetValue("MASTER","E5_RECNO") ) // Adiciona o recno para utilizar no ponto de entrada F340SE5

				oModelBxP:DeActivate()
				If lIntPFS .And. FindFunction("JGrvBxPag")
					JGrvBxPag(SE2->(RECNO()), 3, SE5->(RECNO()), __nRecPart)
				EndIf
				SE5->(DbGoto(nRecnoSE5))
				aAreaFK2	:= FK2->(GetArea())
				FK2->(DbGoTo(nRecnoFK2))
				RecLock("FK2", .F.)
					FK2->FK2_IDCOMP	:= cChaveFK7
				FK2->(MsUnLock())
				RestArea(aAreaFK2)
			Else
				lRet := .F.
				cLog := cValToChar(oModelBxP:GetErrorMessage()[MODEL_MSGERR_IDFIELDERR]) + ' - '
				cLog += cValToChar(oModelBxP:GetErrorMessage()[MODEL_MSGERR_ID]) + ' - '
				cLog += cValToChar(oModelBxP:GetErrorMessage()[MODEL_MSGERR_MESSAGE])
				Help( ,,"M020VLDA1",,cLog, 1, 0 )
			EndIf
			
			If !Empty(nCm)
				F340MoedCm()	
			EndIf
			
			If Len(aBaixaSE5) == 0
				aBaixaSE5 := aClone(FIM020RSE5())
			Else
				aAux := FIM020RSE5()
				
				for nX := 1 To len(aAux)
					AAdd(aBaixaSE5 ,aAux[nX] )
				next nX
			EndIf
		EndIf
	EndIf
	
	//Atualiza a sequência de baixa dos impostos
	For nX := 1 To Len(__aImpos)
		SE2->(DbGoto(__aImpos[nX]))
		RecLock("SE2")
		SE2->E2_SEQBX := cSeqenc 
		SE2->(MsUnlock())
	Next nX
	
	//Guarda a sequencia para atualizcao do DIC posteriormente
	If !Empty(__aDdsDic)
		AAdd(__aDdsDic, cSeqenc)
	EndIf

	oModelBxP:DeActivate()
	oModelBxP:Destroy()
	oModelBxP := Nil
	oSubFKA   := Nil
	oSubFK2   := Nil
	oSubFK5   := Nil
	oSubFK6   := Nil
	__aImpos  := {}
	__aDIC    := {}
	__nTxCont := nTxOld 
	SE2->(dbGoTo(__nRecPart))
Return .T.

//--------------------------------------------------------------------------
/*/{Protheus.doc}FA340GrvCm
Grava a correção monetária nos tabelas FK6 e SE5

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function FA340GrvCm(oSubFK6 As Object, nCm As Numeric, cFilFK6 As Character, cIdFK2 As Character, cCamposE5 As Character)
	Default oSubFK6   := Nil
	Default nCm       := 0
	Default cFilFK6   := ""
	Default cIdFK2    := ""
	Default cCamposE5 := ""
	
	If oSubFK6 != Nil
		If !oSubFK6:IsEmpty()
			oSubFK6:AddLine()
		EndIf
		
		oSubFK6:SetValue( 'FK6_FILIAL', cFilFK6 )
		oSubFK6:SetValue( 'FK6_IDFK6',  GetSxEnum('FK6','FK6_IDFK6'))
		oSubFK6:SetValue( 'FK6_TABORI', 'FK2')
		oSubFK6:SetValue( 'FK6_TPDOC',  'CM')
		oSubFK6:SetValue( 'FK6_VALCAL', nCm)
		oSubFK6:SetValue( 'FK6_VALMOV', nCm)
		oSubFK6:SetValue( 'FK6_RECPAG', "R" )
		oSubFK6:SetValue( 'FK6_IDORIG', cIdFK2)
		oSubFK6:SetValue( 'FK6_GRVSE5', .T.)
			
		If SE2->E2_TIPO $ MVPAGANT+"|"+MVRECANT+"|"+MV_CRNEG
			oSubFK6:SetValue('FK6_HISTOR', STR0076) //CORREC.DE ADIANTAMENTO
		Else
			oSubFK6:SetValue('FK6_HISTOR', STR0077)	//Correcao Monet s/Receb.Titulo
		EndIf
			
		cCamposE5 += ", {'E5_VLCORRE' , " + CVALTOCHAR( nCm ) + " }"
	EndIf
Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} F340MoedCm
Atualiza a moeda do registro de correção monetária
@author Sivaldo Oliveira
@since 06/04/2018
@version P12
/*/
//-------------------------------------------------------------------
Static Function F340MoedCm()
	Local aArea As Array
	
	//Inicializa variáveis.
	aArea := SE5->(GetArea())
	SE5->(DbSetOrder(2))		
	
	If SE5->(MsSeek(xFilial("SE5") + "CM" + SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)+DTOS(dBaixa)+SE2->(E2_FORNECE+E2_LOJA)+FK2->FK2_SEQ))
		If SE5->E5_MOEDA  != "01"
			RecLock("SE5", .F.)
			SE5->E5_MOEDA   :=  "01"
			SE5->E5_TXMOEDA := 0
			SE5->(MsUnlock())
		EndIf
	EndIf
	
	RestArea(aArea)
Return Nil

//-------------------------------
/*/{Protheus.doc}F340GerDic
Gera DIC
@author Marcel Borges Ferreira
@since 04/09/07
@version P12
/*/
//-------------------------------
Function F340GerDic(nRecno, nValor, cTitAdt, cFilorig)
	Local aArea			:= SE2->(GetArea())
	Local aTit			:= {}
	Local lFA340NDFGrv	:= ExistBlock("FA340NDFGrv") //Gravacoes complementares na NDF gerada
	Local cTitPrc		:= ''
	Local l340GerNdf	:= ExistBlock("F340GERNDF")
	Local a340GerNdf	:= {}
	Local cParc         := ""

	Default nRecno   := SE2->(Recno())
	Default nValor   := 0
	Default cTitAdt  := ""
	Default cFilorig := cFilAnt
	
	Private lMsErroAuto := .F.
	nOpc := 3
	
	If nRecno > 0 .And. nValor > 0 .And. !Empty(cTitAdt)
		SE2->(dbGoTo(nRecno))
		cTitPrc := SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
		
		//Parcela
		cParc := FA340Parc(SE2->E2_PREFIXO, SE2->E2_NUM, "DIC", SE2->E2_FORNECE, SE2->E2_LOJA, cFilorig)
		
		AADD(aTit , {"E2_FILIAL" , xFilial("SE2", cFilorig)	,NIL})
		AADD(aTit , {"E2_PREFIXO", SE2->E2_PREFIXO        	,NIL})
		AADD(aTit , {"E2_NUM"    , SE2->E2_NUM              ,NIL})
		AADD(aTit , {"E2_PARCELA", cParc       				,NIL})
		AADD(aTit , {"E2_TIPO"   , "DIC"                    ,NIL})
		AADD(aTit , {"E2_NATUREZ", SE2->E2_NATUREZ		    ,NIL})
		AADD(aTit , {"E2_FORNECE", SE2->E2_FORNECE          ,NIL})
		AADD(aTit , {"E2_LOJA"   , SE2->E2_LOJA            	,NIL})
		AADD(aTit , {"E2_EMISSAO", Ddatabase                ,NIL})
		AADD(aTit , {"E2_VENCTO" , Ddatabase                ,NIL})
		AADD(aTit , {"E2_VENCREA", DataValida(Ddatabase,.T.),NIL})
		AADD(aTit , {"E2_VALOR"  , nValor                 	,NIL})
		AADD(aTit , {"E2_EMIS1"  , Ddatabase                ,NIL})
		AADD(aTit , {"E2_VLCRUZ" , nValor           		,NIL})
		AADD(aTit , {"E2_HIST"   , "Diferença de imposto na compensação" ,NIL})
		AADD(aTit , {"E2_TITADT" , cTitadt               	,NIL})
		AADD(aTit , {"E2_CCUSTO" , SE2->E2_CCUSTO           ,NIL})
		AADD(aTit , {"E2_MULTNAT", "2"                  	,NIL})
		AADD(aTit , {"E2_ORIGEM",  "FINA340"               	,NIL})
		
		If l340GerNdf
			a340GerNdf := ExecBlock("F340GERNDF",.F.,.F.,aTit)
			If ValType(a340GerNdf) == "A"
				aTit := aClone(a340GerNdf)
			EndIf
		EndIf
		
		MSExecAuto({|x, y, z| FINA050(x, y, z)}, aTit,, nOpc)
		
		If lMsErroAuto
			MostraErro()
		Else
			Aadd(__aDIC, SE2->(Recno()))
			
			If lFA340NDFGrv
				Execblock("FA340NDFGrv",.F.,.F.,{cTitAdt, cTitPrc, .F.}) //Gravacoes complementares na NDF gerada
			EndIf
		EndIf
	EndIf
	
	RestArea(aArea)
Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa340Juri(lTodos, lPrimeiro)
Rotina para verifica se tem integracao com o SIGAPFS e realiza
realiza as validacoes da integracao.

@param lTodos    Se .T. indica se foi precionada a opção de selecionar todos os título
@param lPrimeiro  Quando encontrar o primeiro título que não atenda a validação e
exibir a mensagem, retorna por referencia que não serão exibidas
novas mensagens caso ocorram inconsistencias nos próximos títulos.

@Return lRet   .T. Se o título é valido para ser manipulado.

@author Luciano Pereira dos Santos
@since 09/10/2017
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function Fa340Juri(lTodos, lPrimeiro)
	Local lRet      := .T.
	Local lIntSJURI := SuperGetMv("MV_JURXFIN",.T.,.F.)
	
	Default lTodos    := .F.
	Default lPrimeiro := .T.
	
	If lIntSJURI .And. FindFunction("JVldBxPag")
		lRet := JVldBxPag(SE2->(RECNO()), lTodos, @lPrimeiro)
	EndIf
	
Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa340Juri(lTodos, lPrimeiro)
Recupera integridade dos dados do arquivo SE2
@author Sivaldo Oliveira
@since 06/04/2018
@version P12
/*/
//-------------------------------------------------------------------
Static Function FA340IntD(cAliasTbl As Character, nIndice As Numeric, oObjOk As Object, oObjNo As Object)
	Default cAliasTbl := "SE2"
	Default nIndice := 1
	Default oObjOk := {}
	Default oObjNo := {}
	
	If !Empty(oObjOk) .And. !Empty(oObjNo)
		dbSelectArea(cAliasTbl)
		dbSetOrder(nIndice)
		DeleteObject(oObjOk)
		DeleteObject(oObjNo)
	EndIf
Return Nil

//--------------------------------------------------------------------------
/*/{Protheus.doc}FA340Corr
Calcula a correção monetária

@author Sivaldo Oliveira
@since  05/05/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function FA340Corr(nBasCorr As Numeric, nVlrPA As Numeric, cTbl As Character, nTaxaMov As Numeric)
	Local nVlrCm    As Numeric 
	Local nVlrAtual As Numeric
	Local nVlrEmiss As Numeric
	Local dDtVaria  As Date
	Local dDtMov    As Date
	Local lGerCm    As Logical
	Local lTaxaInf	As Logical
	
	Default nBasCorr  := 0
	Default nVlrPA    := 0
	Default cTbl      := "SE2"
	Default nTaxaMov  := 0
	
	//Inicializa variáveis
	nVlrCm   := 0
	lTaxaInf := .F.
	dDtMov   := dDataBase
	lGerCm   := .T.
	
	If cPaisLoc == "BRA"

		lTaxaInf := __nTxCont != 0 .And. __nTxCont != (cTbl)->E2_TXMOEDA

		If __lCmTxCon .And. nVlrPA > 0
			If lTaxaInf .And. __lTxPrCon
				lGerCm := .T.
			Else
				lGerCm := !(cTbl)->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC"
			EndIf
		Else
			lGerCm := ((cTbl)->E2_TXMOEDA == 0 .Or. lTaxaInf)  
		EndIf  
	EndIf
	
	If __lCalcCM .And. lGerCm .And. (cTbl)->E2_MOEDA > 1 .And. !Empty(nBasCorr) 
		nVlrAtual := 0
		nVlrEmiss := 0
		dDtVaria := If(Empty((cTbl)->E2_DTVARIA), (cTbl)->E2_EMISSAO, (cTbl)->E2_DTVARIA)
		
		//a variação da NF ocorre em relação ao PA
		If __lCmTxCon .And. nVlrPA > 0 .And. !lTaxaInf		
			nVlrAtual := xMoeda(nBasCorr, (cTbl)->E2_MOEDA, 1, dDtMov, __nCasDec, nTaxaMov)
			nVlrCm    := Round((nVlrAtual - nVlrPA), 2)
		Else//Variação ocorre em realçao a moeda do dia(SM2)    
			If (cTbl)->E2_TIPO $ MVPAGANT
				dDtMov := F340MovPA(Nil, cTbl, .T.)[2]
			EndIf
			
			If Empty((cTbl)->E2_DTVARIA) .And. STR(nBasCorr, 17, 2) == STR((cTbl)->E2_VALOR, 17, 2)
				nVlrEmiss := (cTbl)->E2_VLCRUZ
			Else
				If !Empty((cTbl)->E2_TXMDCOR)
					nVlrEmiss := xMoeda(nBasCorr, (cTbl)->E2_MOEDA, 1, dDtVaria, __nCasDec, (cTbl)->E2_TXMDCOR)
				Else
					If (cTbl)->E2_TIPO $ MVPAGANT
						dDtVaria := dDtMov
					EndIf
					
					nVlrEmiss := xMoeda(nBasCorr, (cTbl)->E2_MOEDA, 1, dDtVaria, __nCasDec, (cTbl)->E2_TXMOEDA)
				EndIf
			Endif
			
			nVlrAtual := xMoeda(nBasCorr, (cTbl)->E2_MOEDA, 1, dDtMov, __nCasDec, nTaxaMov)
			nVlrCm := Round((nVlrAtual - nVlrEmiss), 2)
		EndIf
	EndIf
Return nVlrCm

//--------------------------------------------------------------------------
/*/{Protheus.doc}FA340QryTi
Seleciona os títulos para compensação  

@author Sivaldo Oliveira
@since  30/05/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function FA340QryTi(cCampos As Character, cNumCont As Character) As Character
	Local aArea      As Array
	Local lIntPFS    As Logical
	Local cQry       As Character
	Local lF340LIBT  As Logical
	Local lF340FLCP  As Logical
	Local lF340FCPTO As Logical	
	Local nX 		 As Numeric
	Local oSelTit    As Object
	Local cTmpSE2    As Character
	Local cMinPag    As Character
	Local lCompSe2   As Logical
	Default cCampos   := ""
	Default cNumCont  := ""
	
	//Inicializa variáveis
	aArea     := SE2->(GetArea())	
	lIntPFS   := SuperGetMV("MV_JURXFIN",,.F.)
	nX        := 0
	oSelTit   := Nil
	cTmpSE2   := ""
	lF340LIBT := SuperGetMv("MV_CTLIPAG", .F., .F.) 
	cMinPag   := cValToChar(SuperGetMv("MV_VLMINPG", .F., "0"))
	
	//Pontos de entrada.
	lF340FLCP  := ExistBlock("F340FLCP")
	lF340LIBT  := If(ExistBlock("F340LIBT"), ExecBlock("F340LIBT",.F.,.F.), lF340LIBT)  
	lF340FCPTO := ExistBlock("F340FCPTOP")
	lCompSe2   := FWModeAccess("SE2", 3) == "C"
	
	//Caso seja compartilhado e não tenha acionado o botão Filiais - Será considerado E2_FILIAL e não E2_FILORIG
	If lCompSe2 .and. Empty(aFil340)
		lCompSe2 := .F.
	Endif

	//Posiciona a SE2 no registro de partida
	SE2->(DbGoto(__nRecPart))
	
	cQry := "SELECT " + cCampos + " SE2.R_E_C_N_O_ E2_RECNO FROM " + RetSqlName("SE2") + " SE2 "
	
	If lIntPFS
		cQry += "INNER JOIN " + RetSqlName("FK7") + " FK7 "
		cQry += "ON FK7.FK7_CHAVE = E2_FILIAL ||'|'|| E2_PREFIXO ||'|'|| E2_NUM ||'|'|| E2_PARCELA ||'|'|| E2_TIPO ||'|'|| E2_FORNECE ||'|'|| E2_LOJA "
		cQry += "AND FK7.FK7_ALIAS = 'SE2' AND FK7.D_E_L_E_T_ = ' ' "
	EndIf
		
	cQry += "WHERE " + FinSelFil(aFil340, "SE2", lCompSe2)
	
	If mv_par01 == 1
		cQry += "AND SE2.E2_LOJA = '" + PadR(SE2->E2_LOJA, TamSX3("A2_LOJA")[1], "") + "' "
	EndIf
	
	If mv_par02 == 1 
		cQry += "AND SE2.E2_FORNECE = '" + PadR(SE2->E2_FORNECE, Len(SE2->E2_FORNECE), "") + "' "
	Else
		cQry += "AND SE2.E2_FORNECE >= '" + mv_par03 + "' AND SE2.E2_FORNECE <= '" + mv_par04 + "' "
	EndIf
	
	cQry += "AND SE2.E2_SALDO <> 0 AND SE2.E2_EMIS1 <= '" + DTOS(dDatabase) + "' AND SE2.E2_TIPO NOT IN " + F340ForIn( MVPROVIS+"|PRE", "|", 3)
	cQry += "AND SE2.E2_EMISSAO <= '" + DTOS(dBaixa) + "' "
	
	If cPaisLoc != "ANG"
		cQry += "AND SE2.E2_ORIGEM <> 'FINA085A' "
	EndIf
	
	If lF340LIBT
		If !SE2->E2_TIPO $ MVPAGANT+"|INA" 
			cQry += "AND (SE2.E2_DATALIB <> ' ' OR CAST((SE2.E2_SALDO + SE2.E2_SDACRES - SE2.E2_SDDECRE) AS VARCHAR(18)) < '" + cMinPag + "' OR SE2.E2_TIPO IN ('PA', 'INA')) "
		Else
			cQry += "AND (SE2.E2_DATALIB <> ' ' OR CAST((SE2.E2_SALDO + SE2.E2_SDACRES - SE2.E2_SDDECRE) AS VARCHAR(18)) < '" + cMinPag + "') "
		EndIf
	EndIf
	
	If mv_par10 == 1
		If SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC"
			If SE2->E2_TIPO $ MV_CPNEG+"|DIC"
				cQry += "AND SE2.E2_TIPO NOT IN " + F340ForIn(MV_CPNEG+"|"+MVPAGANT+"|"+MVTXA+"|"+MVINSS+"|"+MVISS+"|"+MVABATIM+"|INA"+"|DIC", "|", 3) + " "
			Else
				cQry += "AND SE2.E2_TIPO NOT IN " + F340ForIn(MV_CPNEG+"|"+MVPAGANT+"|"+MVTAXA+"|"+MVTXA+"|"+MVINSS+"|"+MVISS+"|"+MVABATIM+"|INA"+"|DIC", "|", 3) + " "
			EndIf
		Else
			cQry += "AND SE2.E2_TIPO IN " + F340ForIn(MV_CPNEG+"|"+MVPAGANT+"|DIC", "|", 3) + " "
		EndIf
	ElseIf (SE2->E2_TIPO $ MVTAXA .Or. !SE2->E2_TIPO $ MVINSS + "|INA")
		cQry += "AND SE2.E2_TIPO IN " + F340ForIn(MVTXA+"|"+MV_CPNEG+"|DIC", "|", 3) + " "
	ElseIf SE2->E2_TIPO $ MVINSS
		cQry += "AND SE2.E2_TIPO IN " + F340ForIn("INA", "|", 3) + " "
	Else
		cQry += "AND SE2.E2_TIPO IN " + F340ForIn(MVINSS, "|", 3) + " "
	EndIf
	
	//Filtrar pelo MSFIL em caso de arquivo compartilhado
	If lF340FLCP
		cQry += ExecBlock("F340FLCP",.F.,.F.) + " "
	Endif
	
	//mv_par12 = 1: Sim, permite que se compense titulos em borderô mv_par12 = 2: Não permite
	If mv_par12 != 1
		cQry += "AND SE2.E2_NUMBOR = '" + SPACE(TamSX3("E2_NUMBOR")[1]) + "' "
	Endif
	
	If !Empty(cNumCont) 
		If cPaisLoc != "RUS"
			cQry += "AND SE2.E2_MDCONTR = '" + cNumCont + "' "
		ELSE
			cQry += " AND E2_F5QCODE = '" + cNumCont + "'"
		Endif
	Endif
	
	//Siafi
	cQry += "AND SE2.R_E_C_N_O_ > 0 " + FinTemDH(.T. /*lFiltro*/,/*cAlias*/,.F. /*lHelp*/, .T./*lTop*/) + " "
	
	If mv_par10 == 1 .And. nMoeda340 > 1 .And. (SE2->E2_TXMOEDA != 0 .And. !__lCmTxCon) .And. !SE2->E2_TIPO $ MV_CPNEG+"|DIC"
		cQry += "AND (CAST(SE2.E2_TXMOEDA AS VARCHAR(18)) IN ('0', '" + cValToChar(SE2->E2_TXMOEDA) + "')) "
		lQryTxCon := .T.
	EndIf 
	
	If lIntPFS
		cQry += "AND SE2.E2_VALOR = (SELECT SUM(OHF.OHF_VALOR) FROM " + RetSqlName("OHF") + " OHF "
		cQry += "WHERE OHF_FILIAL = '" + xFilial("OHF") + "' AND OHF.OHF_IDDOC = FK7.FK7_IDDOC "
		cQry += "AND OHF.D_E_L_E_T_ = ' ' GROUP BY OHF.OHF_IDDOC) "
	EndIf
	If cPaisLoc == "RUS" .And. (lFilMark .Or. !EMPTY(cTitFilt))
		cQry += cTitFilt
	EndIf
	If cPaisLoc != "RUS"
		cQry += "AND SE2.D_E_L_E_T_ = ' ' ORDER BY " + __cOrder
	Else
		If RU06XFUN74()
			cQry += " AND SE2.D_E_L_E_T_ = ' ' ORDER BY " + cSortField + cSortType
		Else 
			cQry += "AND SE2.D_E_L_E_T_ = ' ' ORDER BY " + __cOrder
		EndIf
	Endif
	
	If lF340FCPTO
		cQry := ExecBlock("F340FCPTOP",.F.,.F.,{cQry})
	Endif
	
	cQry    := ChangeQuery(cQry)
	oSelTit := FWPreparedStatement():New(cQry)
	cQry    := oSelTit:GetFixQuery()
	cTmpSE2 := MpSysOpenQuery(cQry)
	
	If (cTmpSE2)->(Eof())
		(cTmpSE2)->(DbCloseArea())
		cTmpSE2 := ""	
	EndIf

Return cTmpSE2

//--------------------------------------------------------------------------
/*/{Protheus.doc}FA340ImPA
//Proporcionalização dos impostos da baixa

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function FA340ImPA(nTit As Numeric, nRecPA As Numeric, nRecNF As Numeric, aImpFK3FK4 As Array, aDicCMP As Array, aTitCalc As Array)
	Local lRet       As Logical
	Local lBxTot     As Logical
	//Dados do PA
	Local nSldPA     As Numeric
	Local nVlrPA     As Numeric
	Local lPccPA     As Logical
	Local lIrfPA     As Logical
	Local lIssPA     As Logical
	Local lInsPA     As Logical	
	Local lImpPA     As Logical
	Local nIssPr     As Numeric
	Local nImpPA     As Numeric
	Local nImposPA   As Numeric
	Local nImpEmPA   As Numeric
	Local lBxPa      As Logical
	Local cAdian     As Character
	//Dados da NF
	Local nVlrNF     As Numeric
	Local nPisNF     As Numeric
	Local nCofNF     As Numeric
	Local nCslNF     As Numeric
	Local nIrfNF     As Numeric
	Local nIssNF     As Numeric
	Local nInsNF     As Numeric
	Local nPenRet    As Numeric
	Local nRetEmi    As Numeric	
	Local nRetBai    As Numeric
	Local nPropoc    As Numeric
	Local nVlrDic    As Numeric
	Local nLiqNF     As Numeric
	Local nRetNF     As Numeric
	Local nBasIRPF 	 As Numeric
	Local lIrrfPF	 As Logical
	Local nIssAux  	 As Numeric
	Local lGerDic    As Logical
	Local aPCC       As Array
	Local cFilorig   As Character
	Local lGerDif    As Logical
	Local nTamADIC	 As Numeric
	Local nX	 	 As Numeric
	Local cForn	 	 As Character
	Local nDicAnt	 As Numeric
	
	Default nTit   		:= 1
	Default nRecPA 		:= 0 
	Default nRecNF 		:= 0
	Default aImpFK3FK4 	:= {}
	Default aDicCMP	   	:= {}
	Default aTitCalc	:= {}
	
	//Inicializa variáveis.
	lRet    := .T.
	lBxTot  := .F.
	//Dados do PA
	nVlrPA   := 0 
	nSldPA   := 0
	lPccPA   := .F.
	lIrfPA   := .F.
	lIssPA   := .F.
	lInsPA   := .F.	
	lImpPA   := .F.
	nIssPr   := 0
	nImpPA   := 0
	nImposPA := 0
	nImpEmPA := 0
	lBxPa    := .T.
	cAdian   := ""
	//Dados da NF
	nVlrNF   := 0
	nPisNF   := 0
	nCofNF   := 0
	nCslNF   := 0
	nIrfNF   := 0
	nIssNF   := 0
	nInsNF   := 0   
	nPenRet  := 0
	nRetBai  := 0
	nRetEmi  := 0
	nPropoc  := 0
	nVlrDic  := 0
	nLiqNF   := 0
	nRetNF   := 0
	nBasIRPF := 0
	nTamADIC := 0
	nX		 := 0
	lIrrfPF  := .F.
	lGerDic  := .T.
	lGerDif  := .F.
	nDicAnt  := 0

	// variáveis private utilizadas na FCalcIRBx 
	nVlRetIrf	:= 0
	nBaseIrpf	:= 0

	f340LRatIR(.T.) // Limpa objeto __oRatIRF IR Progressivo

	//Posiciona o título de PA
	SE2->(DbGoto(nRecPA))
	
	If SE2->E2_TIPO $ MVPAGANT .And. cPaisLoc == "BRA" .And. mv_par10 == 1
		cAdian := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
		nVlrPA := SE2->(E2_VALOR+E2_PIS+E2_COFINS+E2_CSLL+E2_IRRF+E2_ISS+E2_PRISS+E2_INSS+E2_PRINSS)
		nSldPA := SE2->E2_SALDO
		cForn  := SE2->E2_FORNECE + SE2->E2_LOJA
		
		//Verifica se o PA calcula impostos
		If SE2->(E2_PIS+E2_COFINS+E2_CSLL+E2_IRRF+E2_ISS+E2_PRISS+E2_INSS+E2_PRINSS) > 0
			lImpPA := .T.
			lPccPA := SE2->(E2_PIS+E2_COFINS+E2_CSLL) > 0
			lIrfPA := SE2->E2_IRRF > 0
			lIssPA := SE2->(E2_ISS+E2_PRISS) > 0
			lInsPA := SE2->(E2_INSS+E2_PRINSS) > 0 
			nIssPr := SE2->E2_PRISS
			lBxPa  := SE2->E2_VALOR != SE2->E2_SALDO  
			nImpPA := SE2->(E2_PIS+E2_COFINS+E2_CSLL+E2_IRRF+E2_ISS+E2_PRISS+E2_INSS+E2_PRINSS)
			
			If !__lPaBruto .And. aTitulos[nTit,20] >= nSldPA
				nImposPA := F340VlrRet(nVlrPA, nImpPA, @nImpEmPA)
				nRetEmPA := SE2->(E2_INSS+E2_PRINSS) + If(__lPccBaix, 0, SE2->(E2_PIS+E2_COFINS+E2_CSLL)) + If(__lIrfBaix, 0, SE2->E2_IRRF) +;
													   If(__lIssBaix, 0, SE2->(E2_ISS+E2_PRISS)) 
			EndIf
		EndIf
		
		//Posiciona o título de NF
		SE2->(DbGoto(nRecNF))
		lRet     := !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC" 
		cFilorig := SE2->E2_FILORIG
		
		If lRet .And. aTitulos[nTit,22] > SE2->E2_SDACRES .And. F340ImpBx(.F., "SE2")
			nVlrNF  := SE2->E2_VALOR
			nRetEmi := SE2->E2_INSS
			nLiqNF  := SE2->E2_SALDO
			lGerDif := !Empty(SE2->E2_CODRET)
			lIrrfPF := __lIrfBaix .And. (SA2->A2_TIPO == "F" .Or. SA2->A2_IRPROG == "1") .And. !SE2->E2_PRETIRF $ "4"
			
			If SE2->(E2_PIS+E2_COFINS+E2_CSLL) > 0
				If __lPccBaix
					nRetBai += SE2->(E2_VRETPIS+E2_VRETCOF+E2_VRETCSL) 
					nPenRet += SE2->(E2_PIS+E2_COFINS+E2_CSLL) - SE2->(E2_VRETPIS+E2_VRETCOF+E2_VRETCSL)
				Else
					nRetEmi += SE2->(E2_PIS+E2_COFINS+E2_CSLL)
					
					If (__lPaBruto .Or. !lPccPA)
						nRetNF += SE2->(E2_PIS+E2_COFINS+E2_CSLL)
					EndIf
				EndIf
			EndIf
			
			If SE2->E2_IRRF > 0 .Or. lIrrfPF
				If __lIrfBaix 
					nRetBai += SE2->E2_VRETIRF

					If lIrrfPF
						nBasIRPF := salRefPag(SE2->E2_FORNECE + SE2->E2_LOJA,,,,,,, .F.)
						nPenRet  += FCalcIRBx(nBasIRPF, SA2->A2_TIPO, dBaixa, dBaixa, Nil, Nil, Nil)
					Else
						nPenRet += (SE2->E2_IRRF - SE2->E2_VRETIRF)
					EndIf
				Else
					nRetEmi += SE2->E2_IRRF
					
					If (__lPaBruto .Or. !lIrfPA)
						nRetNF += SE2->E2_IRRF
					EndIf
				EndIf	
			EndIf
			
			If SE2->E2_ISS > 0
				If __lIssBaix 
					nRetBai += SE2->E2_VRETISS
					nPenRet += (SE2->E2_ISS - SE2->E2_VRETISS)
				Else
					nIssAux := Iif(__lBtrISS, SE2->E2_ISS + SE2->E2_BTRISS, SE2->E2_ISS )					
					nRetEmi += nIssAux

					If (__lPaBruto .Or. !lIssPA)
						nRetNF += nIssAux
					EndIf
				EndIf		
			EndIf
			
			If SE2->E2_INSS > 0
				If (__lPaBruto .Or. !lInsPA)
					nRetNF += SE2->E2_INSS	
				EndIf 
			EndIf

			If nMoeda340 > 1
				nPenRet := xMoeda(nPenRet, 1, nMoeda340, dBaixa, __nCasDec, __nTxMoedP, aTitulos[nTit,21])
			Endif

			nVlrNF  += nRetEmi
			__nBase := (aTitulos[nTit,22] - SE2->E2_SDACRES)
			nLiqNF  -= (aTitulos[nTit,23] + SE2->E2_SDDECRE + nPenRet)

			//Abate o valor do DIC ref a comp anteriores quando compensados juntos
			If !Empty(aDicCMP) .And. !__lPaBruto
				nTamADIC := Len(aDicCMP)

				For nX := 1 To nTamADIC
					nDicAnt += aDicCMP[nX][2]
				Next nX

				If __nBase == (nLiqNF - nDicAnt) 
					nLiqNF -= nDicAnt
				EndIf
			EndIf

			lBxTot  := __nBase >= nLiqNF
			
			//Define a base de retenção.
			If __lPaBruto
				If lBxTot
					__nBase := (SE2->E2_SALDO + nRetBai + nRetEmi)
				EndIf
			Else
				If !lBxTot .And. nImposPA > 0
					If (__nBase + nImposPA) <= SE2->E2_SALDO
						aTitulos[nTit,22] += nImposPA
						__nBase += (nImposPA+nImpEmPA) 	
					EndIf
				EndIf 
				
				If !lBxTot .And. !lBxPa .And. aTitulos[nTit,20] == nSldPA .And. SE2->E2_SALDO >= nSldPA  
					__nBase := (nVlrPA - SE2->E2_SDACRES)
					aTitulos[nTit,22] := nVlrPA
					
					//Se o PA possui os mesmos impostos da NF, subtrai os impostos da emissão
					If ((lPccPA .And. SE2->(E2_PIS+E2_COFINS+E2_CSLL) > 0) .Or. (!lPccPA .And. SE2->(E2_PIS+E2_COFINS+E2_CSLL) == 0)) .And.; 
					   ((lIrfPA .And. SE2->E2_IRRF > 0) .Or. (!lIrfPA .And. SE2->E2_IRRF == 0)) .And.;
					   ((lIssPA .And. SE2->(E2_ISS+E2_PRISS) > 0) .Or. (!lIssPA .And. SE2->(E2_ISS+E2_PRISS) == 0)) .And.;
					   ((lInsPA .And. SE2->(E2_INSS+E2_PRINSS) > 0) .Or. (!lInsPA .And. SE2->(E2_INSS+E2_PRINSS) == 0))
					   
					   aTitulos[nTit,22] := (nVlrPA - nRetEmPA)
					EndIf
				Else
					lBxPa := .T.
				EndIf
				
				If !lBxTot .And. !lImpPA .And. aTitulos[nTit,20] == nSldPA .And. (nLiqNF - nPenRet) == nSldPA
					lBxTot := .T.
				EndIf
				
				//Baixa Total da NF
				If lBxTot
					__nBase := salRefPag(SE2->E2_FORNECE + SE2->E2_LOJA,,,,,,, .F.)
				EndIf	
			EndIf
			
			If lBxTot
				aTitulos[nTit,22] := (SE2->(E2_SALDO+E2_SDACRES) - (SE2->E2_SDDECRE+aTitulos[nTit,23]))
			Else 
				__nBase += SE2->E2_SDDECRE
			EndIf
			
			nPropoc := (__nBase/nVlrNF)
		ElseIf lRet .And. aTitulos[nTit,22] > SE2->E2_SDACRES
			IF SE2->E2_MOEDA == 1
				__nBase := (aTitulos[nTit,22] - SE2->E2_SDACRES) + (SE2->E2_SDDECRE+aTitulos[nTit,23])
			Else
				__nBase := (aTitulos[nTit,22] - xMoeda(SE2->E2_SDACRES, SE2->E2_MOEDA, 1, dDataBase, __nCasDec)) + (xMoeda(SE2->E2_SDDECRE, SE2->E2_MOEDA, 1, dDataBase, __nCasDec)+aTitulos[nTit,23])
			Endif
		EndIf
		
		If !Empty(nPropoc)
			If __lPccBaix
				aPCC := NewMinPcc(dBaixa, __nBase, SE2->E2_NATUREZ, "P", SE2->(E2_FORNECE+E2_LOJA), 0, 0, 0, Nil, Nil, "CMP")
				
				If Len(aPCC) >= 4
					NPIS340 := aPcc[2]
					NCOF340 := aPcc[3]
					NCSL340 := aPcc[4]
					If Len(aPCC) > 4
						aTitCalc	:= aPCC[5]
					EndIf
					If __lAglPcc .and. NPIS340 !=0 .and. !NCOF340 == 0 .and. !NCSL340 == 0
						NPIS340 += NCOF340 +NCSL340
						NCOF340 := NCSL340 := 0
					EndIf
				EndIf
			EndIf
		
			If __lIrfBaix
				If (SA2->A2_TIPO == "F" .Or. SA2->A2_IRPROG == "1")
					NIRF340 := FCalcIRBx(__nBase, SA2->A2_TIPO, dBaixa, dBaixa, Nil, Nil, Nil)
				ElseIf SE2->E2_IRRF > 0
					NIRF340 := Round((nPropoc * SE2->E2_IRRF), 2)
				EndIf
			EndIf
			
			If __lIssBaix .And. SE2->E2_ISS > 0
				NISS340 := Round((nPropoc * SE2->E2_ISS), 2)
				nIssBaseC := nIssBaseR := Round((nPropoc * SE2->E2_BASEISS), 2)
			EndIf

			If nMoeda340 > 1
				aTitulos[nTit,19] := xMoeda((NPIS340+NCOF340+NCSL340+NIRF340+NISS340), 1, nMoeda340, dBaixa, __nCasDec, __nTxMoedP, aTitulos[nTit,21])
			Else
				aTitulos[nTit,19] := (NPIS340+NCOF340+NCSL340+NIRF340+NISS340)
			Endif
			
			If aTitulos[nTit,19] > 0
				If __lPaBruto

					If lBxTot
						aTitulos[nTit,22] -= aTitulos[nTit,19]

						If nSldPA >= nVlrNF
							aTitulos[nTit,20] := aTitulos[nTit,22]
						EndIf
					EndIf 
					
					If lBxTot .Or. (nSldPA > aTitulos[nTit,20] .And. ((nSldPA - aTitulos[nTit,20]) >= aTitulos[nTit,19])) 
						lGerDic := .F.
					EndIf	
				Else
					aTitulos[nTit,22] -= aTitulos[nTit,19]
					
					If aTitulos[nTit,20] >= aTitulos[nTit,22] 

						
						If (nSldPA > aTitulos[nTit,20] .Or. lBxTot)
							aTitulos[nTit,20] := aTitulos[nTit,22]
							lGerDic := .F.
						EndIf
					EndIf
				EndIf
			EndIf
			
			Reclock("SE2")
			SE2->E2_SALDO -= aTitulos[nTit,19]
			SE2->E2_DIRF := Iif(lGerDif, "2", SE2->E2_DIRF)
			SE2->(MsUnlock())
			
			//Gera na NF as retenções que não foram retidas no PA
			If __lPaBruto .Or. !lPccPA .Or. !lIrfPA .Or. (!lIssPA .Or. nIssPr > 0)
				If NPIS340+NCOF340+NCSL340+NIRF340+NISS340+nVlRetIrf > 0
					//PCC
					If (__lPaBruto .Or. !lPccPA) .And. (NPIS340+NCOF340+NCSL340) > 0
						If !lPccPA
							nPisNF  := NPIS340
							nCofNF  := NCOF340
							nCslNF  := NCSL340 
						EndIf
						
						nVlrDic += (NPIS340+NCOF340+NCSL340) 
					EndIf
					
					//IRRF
					If (__lPaBruto .Or. !lIrfPA) .And. NIRF340 > 0
						If !lIrfPA
							nIrfNF  := NIRF340 	
						EndIf
						
						nVlrDic += NIRF340
					EndIf 
					
					//ISS
					If (__lPaBruto .Or. (!lIssPA .Or. nIssPr > 0)) .And. NISS340 > 0
						If (!lIssPA .Or. nIssPr > 0) 
							nIssNF  := NISS340
						EndIf
						
						If(__lPaBruto .Or. !lIssPA)
							nVlrDic += NISS340
						EndIf
					EndIf
					
					//Impostos retidos na emissão da NF que não foram retidos no PA
					If nRetNF > 0 .And. lBxTot
						nVlrDic += nRetNF
					EndIf
					
					//Geração dos Tx's
					If (nPisNF+nCofNF+nCslNF+nIrfNF+nIssNF) > 0 
						aImpFK3FK4 := F340GrvImp(nPisNF, nCofNF, nCslNF, nIrfNF, nIssNF, lGerDif)				
					EndIf
				ElseIf (NPIS340+NCOF340+NCSL340+NIRF340+NISS340+nVlRetIrf == 0) .And. (nPisCalc+nCofCalc+nCslCalc+nIrfCalc+nIssCalc > 0)
					//Alimenta o array para gravar a FK3 com os valores calculados para quando nao houver retencao
					aImpFK3FK4 := F340GrvImp()
				EndIf
			EndIf     
			
			//Atauliza os Vrets e Prets da NF
			If (NPIS340+NCOF340+NCSL340+NIRF340+NISS340+nVlRetIrf) > 0
				FA340VPSE2()	
			EndIf
			
			//Gera DIC (Diferença de Imposto na Compensação)
			If lGerDic .And. nVlrDic > 0
				Aadd(__aDdsDic, nRecPA)
				Aadd(__aDdsDic, nVlrDic)
				Aadd(__aDdsDic, cAdian)
				Aadd(__aDdsDic, cFilorig)
				Aadd(__aDdsDic, cForn)
			EndIf		
		EndIf
	EndIf

	f340LRatIR(.T.) // Limpa objeto __oRatIRF IR Progressivo

	SE2->(DbGoto( __nRecPart ))
Return Nil

//-------------------------------------
/*/{Protheus.doc}F340GrvImp
Gera na NF os impostos que não foram retidos no PA.

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//-------------------------------------
Static Function F340GrvImp(nTxPis, nTxCof, nTxCsl, nTxIrf, nTxIss, lGerDif)	
	Local aAreaSE2  As Array
	Local aAreaSA2  As Array
	Local aRetImp	As Array
	Local aIRGerar	As Array
	Local cFornImp  As Character
	Local cLojaImp  As Character
	Local cNmForn   As Character
	Local cNmRedu   As Character
	Local cParImp   As Character
	Local cTaxa     As Character
	Local cPrefPai  As Character 
	Local cNumPai   As Character
	Local cFilorig  As Character
	Local cCodAprov As Character
	Local cLa       As Character
	Local cFormPag  As Character
	Local cTipoPes  As Character
	Local cTitPai   As Character
	Local cCodPis   As Character
	Local cCodCof   As Character
	Local cCodCsl   As Character
	Local cCodIrf   As Character
	Local cNatImp	As Character
	Local cDesc		As Character
	Local cImpost	As Character
	Local cImpFK4	As Character
	Local cCodRet   As Character
	Local cFornPai  As Character
	Local cLojaPai	As Character
	Local cCNPJPai  As Character
	Local dVenImp   As Date  
	Local nRecSA2   As Numeric
	Local nRecSED   As Numeric
	Local nX        As Numeric
	Local nVlrTrib  As Numeric
	Local nTrbCalc 	As Numeric
	Local nBasRet 	As Numeric
	Local nTitAGer	As Numeric
	Local nY        As Numeric
	Local lRatIRPF  As Logical
	
	Default nTxPis 	:= 0
	Default nTxCof 	:= 0
	Default nTxCsl 	:= 0
	Default nTxIrf 	:= 0
	Default nTxIss 	:= 0
	Default lGerDif := .F.
	
	//Inicializa variáveis
	aAreaSE2  	:= SE2->(GetArea())
	aAreaSA2	:= {}
	aRetImp	  	:= {}
	cFornImp  	:= ""	
	cLojaImp  	:= PadR("00", __nTamLoja, "0")
	cNmForn   	:= ""
	cNmRedu   	:= ""
	nRecSA2   	:= SA2->(Recno())
	nRecSED   	:= SED->(Recno())	
	nX        	:= 0
	nY        	:= 0
	cParImp   	:= ""
	dVenImp   	:= dDataBase 
	cTaxa     	:= ""
	nVlrTrib  	:= 0
	nTrbCalc  	:= 0
	nBasRet   	:= 0
	cPrefPai  	:= SE2->E2_PREFIXO
	cNumPai   	:= SE2->E2_NUM	
	cOrigem   	:= "FINA340"
	cFilorig  	:= SE2->E2_FILORIG
	cCodAprov 	:= SE2->E2_CODAPRO
	cLa       	:= SE2->E2_LA
	cFormPag  	:= SA2->A2_FORMPAG
	cTipoPes  	:= SA2->A2_TIPO
	cTitPai   	:= SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
	cCodPis   	:= cCodCof := cCodCsl := "5952"
	cCodIrf   	:= Iif(lGerDif, SE2->E2_CODRET, "")
	aIRGerar	:= {}
	nTitAGer	:= 0
	cFornPai	:= SA2->A2_COD
	cLojaPai	:= SA2->A2_LOJA
	cCNPJPai	:= SA2->A2_CGC
	
	If cPaisLoc $ "BRA|MEX" .And. !Empty(SE2->(E2_CODRPIS+E2_CODRCOF+E2_CODRCSL))
		cCodPis   := SE2->E2_CODRPIS
		cCodCof   := SE2->E2_CODRCOF
		cCodCsl   := SE2->E2_CODRCSL
	EndIf
	
	SA2->(DbSetOrder(1))
	SED->(DbSetOrder(1))
	SE2->(DbSetOrder(1))
	cChave := xFilial("SA2", SE2->E2_FILORIG) + SE2->E2_FORNECE+E2_LOJA
	
	If SA2->(DbSeek(cChave))
		nRecSA2 := SA2->(Recno())
	Else
		SA2->(DbGoto(nRecSA2))
	EndIf
	
	cChave := xFilial("SED", SE2->E2_FILORIG) + SE2->E2_NATUREZ
	
	If SED->(DbSeek(cChave))
		nRecSED := SED->(Recno())
	Else
		SED->(DbGoto(nRecSED))
	EndIf
	
	If (nTxPis+nTxCof+nTxCsl+nTxIrf) > 0
		cFornImp := SuperGetMv("MV_UNIAO", .T., "UNIAO")
		cNmForn  := "UNIAO"
		cChave   := xFilial("SA2", cFilorig) + PadR(cFornImp, __nTamForn, " ") + cLojaImp		
		
		aAreaSA2	:= SA2->(GetArea())
		If !SA2->(DbSeek(cChave))
			Reclock("SA2",.T.)
			SA2->A2_FILIAL := xFilial("SA2", cFilorig)
			SA2->A2_COD    := cFornImp
			SA2->A2_LOJA   := cLojaImp
			SA2->A2_NOME   := cNmForn
			SA2->A2_NREDUZ := cNmForn
			SA2->A2_BAIRRO := "."
			SA2->A2_MUN    := "."
			SA2->A2_EST    := SuperGetMv("MV_ESTADO")
			SA2->A2_End    := "."
			SA2->A2_TIPO   := "J"
			SA2->(MsUnlock())
		EndIf
	EndIf
	
	For nX := 1 To 5
		cTaxa    := MVTAXA
		cCodRet  := ""
		nTrbCalc := 0
		nBasRet  := 0
		lRatIRPF := .F.
		nTitAGer := 1
		
		Do Case 
			Case nX == 1	//-- PIS
				If nTxPis <= 0 .And. nPisCalc == 0
					Loop
				EndIf
				cNatImp  := Pad(SuperGetMV("MV_PISNAT"), __nTamNatu)
				cDesc    := "PIS"
				cImpost  := "PIS"
				cImpFK4  := "PIS"
				nVlrTrib := nTxPis 
				cCodRet  := cCodPis
				nTrbCalc := nPisCalc
				nBasRet	 := nPisBaseR
			
			Case nX == 2	//-- COFINS
				If nTxCof <= 0 .And. nCofCalc == 0
					Loop
				EndIf
				cNatImp  := Pad(SuperGetMV("MV_COFINS"), __nTamNatu)
				cDesc    := "COFINS"
				cImpost  := "COFINS"
				cImpFK4  := "COF"					
				nVlrTrib := nTxCof 
				cCodRet  := cCodCof
				nTrbCalc := nCofCalc
				nBasRet  := nCofBaseR

			Case nX == 3	//-- CSLL
				If nTxCsl <= 0 .And. nCslCalc == 0
					Loop
				EndIf
				cNatImp  := Pad(SuperGetMV("MV_CSLL"), __nTamNatu)
				cDesc    := "CONTRIB.S/LUCRO LIQUIDO"
				cImpost  := "CSLL"	
				cImpFK4  := "CSL"				
				nVlrTrib := nTxCsl
				cCodRet  := cCodCsl
				nTrbCalc := nCslCalc
				nBasRet  := nCslBaseR

			Case nX == 4	//-- IRRF
				If nTxIrf <= 0 .And. nIrfCalc == 0
					Loop
				EndIf
				cNatImp  := &(GetMv("MV_IRF"))
				cDesc    := "IMPOSTO RENDA RETIDO NA FONTE"
				cImpost  := "IRRF"
				cImpFK4  := "IRF"
				nVlrTrib := nTxIrf
				cCodRet  := cCodIrf
				nTrbCalc := nIrfCalc
				nBasRet  := Iif( nIrfBaseR == 0 .And. nTxIrf > 0, __nBase, nIrfBaseR) // REVER

				If __oRatIRF != Nil .and. !Empty(__oRatIRF:aRatIRF)
					For nY := 1 To Len(__oRatIRF:aRatIRF)
						If __oRatIRF:aRatIRF[nY][6] != 0
							aAdd(aIRGerar,{"IRF", __oRatIRF:aRatIRF[nY][6], cCodRet})
						EndIf
						aAdd(aRetImp,{cImpFK4, __oRatIRF:aRatIRF[nY][6], cNatImp, "", __oRatIRF:aRatIRF[nY][6], __oRatIRF:aRatIRF[nY][5], __oRatIRF:aRatIRF[nY][5], "", SA2->A2_COD, SA2->A2_LOJA, __oRatIRF:aRatIRF[nY][3], cCodRet})
					Next nY
					lRatIRPF := .T.
					nTitAGer := Len(aIRGerar)
				EndIf

			Case nX == 5	//-- ISS
				If nTxIss <= 0 .And. nIssCalc == 0
					Loop
				EndIf
				
				cNmForn  := "MUNICIPIO"
				
				If SA2->(FieldPos("A2_MUNIC")) > 0 .And. !Empty(SA2->A2_MUNIC)
					cFornImp := SA2->A2_MUNIC
				Else
					cFornImp := SuperGetMV("MV_MUNIC")
				EndIf
				
				cChave := xFilial("SA2", cFilorig) + PadR(cFornImp, __nTamForn, " ") + cLojaImp	
				
				If !SA2->(DbSeek(cChave))
					Reclock("SA2",.T.)
					SA2->A2_FILIAL  := xFilial("SA2", cFilorig)
					SA2->A2_COD 	:= cFornImp
					SA2->A2_LOJA	:= cLojaImp
					SA2->A2_NOME	:= cNmForn
					SA2->A2_NREDUZ  := cNmForn
					SA2->A2_BAIRRO  := "."
					SA2->A2_MUN 	:= "."
					SA2->A2_EST 	:= SuperGetMv("MV_ESTADO")
					SA2->A2_End 	:= "."
					SA2->(MsUnlock())
				EndIf
				
				cNatImp  := &(SuperGetMV("MV_ISS"))
				cDesc    := "IMPOSTO SOBRE SERVICOS"
				cImpost  := "ISS"
				cImpFK4  := "ISS"					
				nVlrTrib := nTxIss
				cTaxa    := MVISS
				nTrbCalc := nIssCalc
				nBasRet  := nIssBaseR
		EndCase
		
		//Cria a Natureza
		cChave  := (xFilial("SED", cFilorig) + cNatImp)
		
		If !SED->(DbSeek(cChave))
			RecLock("SED",.T.)
			SED->ED_FILIAL  := xFilial("SED", cFilorig)
			SED->ED_CODIGO  := cNatImp
			SED->ED_CALCIRF := "N"
			SED->ED_CALCISS := "N"
			SED->ED_CALCINS := "N"
			SED->ED_CALCCSL := "N"
			SED->ED_CALCCOF := "N"
			SED->ED_CALCPIS := "N"
			SED->ED_DESCRIC := cDesc
			SED->ED_TIPO	:= "2"
			MsUnlock()		
		EndIf			

		For nY := 1 to nTitAGer

			If nX == 4 .and. lRatIRPF
				cImpFK4  := aIRGerar[nY,1]
				nVlrTrib := aIRGerar[nY,2]
				cCodRet  := aIRGerar[nY,3]
			EndIf

			If nVlrTrib > 0
				dVenImp := F050VIMP(cImpost, dDataBase, dDataBase, dDataBase, cCodRet, cTipoPes, .T.)
				cParImp := FA340Parc(cPrefPai, cNumPai, cTaxa, cFornImp, cLojaImp, cFilorig)
				cNmForn := Posicione("SA2",1,xFilial("SA2",cFilorig) + cFornImp,"A2_NREDUZ")
				
				RecLock("SE2",.T.)
				SE2->E2_FILIAL  := xFilial("SE2", cFilorig)
				SE2->E2_PREFIXO := cPrefPai
				SE2->E2_NUM     := cNumPai
				SE2->E2_PARCELA := cParImp
				SE2->E2_TIPO    := cTaxa
				SE2->E2_EMISSAO := dBaixa
				SE2->E2_EMIS1   := dDataBase
				SE2->E2_VALOR   := nVlrTrib
				SE2->E2_VENCTO  := dVenImp
				SE2->E2_SALDO   := nVlrTrib
				SE2->E2_VENCREA := dVenImp
				SE2->E2_VENCORI := dVenImp
				SE2->E2_FORNECE := cFornImp
				SE2->E2_LOJA    := cLojaImp
				SE2->E2_NOMFOR  := cNmForn
				SE2->E2_MOEDA   := If(cPaisLoc == "BRA", 1, nMoeda340)
				SE2->E2_VLCRUZ  := Round(nVlrTrib, 2)
				SE2->E2_ORIGEM  := Upper(cOrigem)
				SE2->E2_NATUREZ := cNatImp
				SE2->E2_LA      := cLa
				
				If nX != 5 .And. cPaisLoc == "BRA"
					SE2->E2_CODRET := cCodRet
					SE2->E2_DIRF   := Iif(lGerDif, "1", "2")
				EndIf
				
				SE2->E2_FILORIG := cFilorig
				SE2->E2_TITPAI  := cTitPai
				SE2->E2_CODAPRO := cCodAprov
				SE2->E2_FORMPAG := cFormPag
				SE2->(MsUnlock())
				
				Aadd(__aImpos, SE2->(Recno()))
			EndIf
		Next nY

		If !lRatIRPF		
			SA2->(DbGoto(nRecSA2))
			aAdd( aRetImp, { cImpFK4, nTrbCalc, cNatImp, "", nVlrTrib, __nBase, nBasRet, "",SA2->A2_COD, SA2->A2_LOJA, SA2->A2_CGC, cCodRet})
		EndIf
	Next nX
	
	If !Empty(aAreaSA2)
		RestArea(aAreaSA2)
	EndIf
	RestArea(aAreaSE2)
	FwFreeArray(aAreaSE2)
	FwFreeArray(aIRGerar)

Return aRetImp

//--------------------------------------------------------------------------
/*/{Protheus.doc}FA340VPSE2
Atualiza os vrets e prets da tabela SE2

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function FA340VPSE2()	
	Reclock("SE2")
	
	If __lPccBaix .And. (NPIS340+NCOF340+NCSL340) > 0 
		If NPIS340 > 0
			SE2->E2_VRETPIS	+= NPIS340
			SE2->E2_PRETPIS	:= "7"
		EndIf
		
		If NCOF340 > 0
			SE2->E2_VRETCOF	+= NCOF340
			SE2->E2_PRETCOF	:= "7"
		EndIf
		
		If NCSL340> 0
			SE2->E2_VRETCSL	+= NCSL340
			SE2->E2_PRETCSL	:= "7"
		EndIf	
	EndIf
	
	If __lIrfBaix .And. NIRF340 > 0
		SE2->E2_VRETIRF	+= NIRF340
		SE2->E2_PRETIRF	:= "7"
	EndIf
	
	If __lIssBaix .And. NISS340 > 0
		SE2->E2_VRETISS	+= NISS340
	EndIf
	
	SE2->(MsUnlock())
Return Nil

//--------------------------------------------------------------------------
/*/{Protheus.doc}FA340VPSE5
Atualiza os vrets e prets da tabela SE5

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function F340VPSE5(cCamposE5 As Character)
	Default cCamposE5 := ""

	If !Empty(cCamposE5) .And. (__lPccBaix .Or. __lIrfBaix .Or. __lIssBaix)
		If __lPccBaix .And. (NPIS340+NCOF340+NCSL340) > 0 
			cCamposE5 += ",{'E5_PRETPIS', '7'}"
			cCamposE5 += ",{'E5_PRETCOF', '7'}"
			cCamposE5 += ",{'E5_PRETCSL', '7'}"
			cCamposE5 += ",{'E5_VRETPIS', " + CVALTOCHAR(NPIS340) + "}"
			cCamposE5 += ",{'E5_VRETCOF', " + CVALTOCHAR(NCOF340) + "}"
			cCamposE5 += ",{'E5_VRETCSL', " + CVALTOCHAR(NCSL340) + "}"
		Endif
		
		If __lIrfBaix 
			If NIRF340 > 0
				cCamposE5 += ",{'E5_PRETIRF', '7'}"
				cCamposE5 += ",{'E5_VRETIRF', " + CVALTOCHAR(NIRF340) + "}"
			elseIf nBaseIrpf > 0 
				cCamposE5 += ",{'E5_VRETIRF' , "+CVALTOCHAR(nVlRetIrf)+" }"
				cCamposE5 += ",{'E5_PRETIRF' , '1'}"
				cCamposE5 += ",{'E5_BASEIRF' , "+ CVALTOCHAR(nBaseIrpf)+" }"
			EndIf		
		Endif
		
		If __lIssBaix .And. NISS340 > 0
			cCamposE5 += ",{'E5_VRETISS' , " + CVALTOCHAR(NISS340) + "}"
		Endif
		
		If __nBase > 0
			cCamposE5 += ",{'E5_BASEIRF', " + CVALTOCHAR(__nBase) + "}"
		EndIf
	EndIf
Return Nil

//--------------------------------------------------------------------------
/*/{Protheus.doc}F340ValSel
Não permite digitar um valor maior que olimite do título ou maior 
que o total ser compensado

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function F340ValSel(nVlrSel As Numeric, nVlrLim As Numeric, nDif As Numeric, cTpTitSel As Char, nSldTitSel As Numeric, lRetImpBx As Logical) As Logical
	Local lRet As Logical
	Default cTpTitSel := ""
	Default nSldTitSel := 0
	Default lRetImpBx := .F. 
	
	//Inicializa variável
	lRet := .T.

	//Valida o título posicionado
	If nVlrSel <= 0 .Or. nVlrSel > nVlrLim
		lRet := .F.
	EndIf
	
	If lRet .And. (Empty(nDif) .Or. nVlrSel > nDif)
		lRet := .F.
	EndIf

	//Não deixa selecionar um valor de DIC que iria zerar o saldo da nota, para não impactar na retenção do imposto 
	If lRet
		If cTpTitSel == "DIC"
			If lRetImpBx .And. (nVlrSel + nValTot >= SE2->E2_SALDO)
				lRet := .F.
			EndIf
		ElseIf SE2->E2_TIPO == "DIC"
			If lRetImpBx .And. (nVlrSel >= nSldTitSel)
				lRet := .F.
			EndIf
		EndIf
		
		If !lRet
			MsgInfo(STR0126, STR0127) //"Para manter a integridade dos impostos, o sistema não permite zerar o saldo de títulos com retenções na baixa, através de compensações com títulos do tipo 'DIC'." ## "Compensação com DIC"
		EndIf
	EndIf
Return lRet

//---------------------------------------------------
/*/{Protheus.doc}FA340Acres
Define o valor do acréscimo a ser baixado e o valor a 
a ser abatido do saldo da NF

@author Sivaldo Oliveira
@since  19/06/2018
@version 12
/*/
//---------------------------------------------------
Static Function FA340Acres(nVlrMov As Numeric, nAcresc)
	Default nVlrMov := 0
	Default nAcresc := 0
	
	If nAcresc > 0
		If nAcresc > nVlrMov
			nAcresc := nVlrMov 	
		EndIf
	
		//Caso o valor a ser compens seja -= ao valor do acrésc, 
		//não abate nada do saldo da nota
		If !SE2->E2_TIPO $ MVPAGANT+"|"+MVABATIM+"|INA"
			nVlrMov -= nAcresc 
		EndIf
	EndIf

Return nVlrMov 	  

//--------------------------------------------------------------------------
/*/{Protheus.doc}F340SelFil
Seleciona as filiais para compensação.

@author Sivaldo Oliveira
@since  29/06/2018
@version 12
/*/
//--------------------------------------------------------------------------
Function F340SelFil()
	aFil340 := {}
	
	aFil340 := AdmGetFil(.F.,.T.,"SE2")
	
	If Empty(aFil340)
		aFil340 := {cFilAnt}
	EndIf

Return Nil

//--------------------------------------------------------------------------
/*/{Protheus.doc}FA340Valor
Define os valores a serem enviado para conversão da moeda

@author Sivaldo Oliveira
@since  02/06/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function FA340Valor(nVlr, nMoedPart, nMoedDest, dDtMov, nTaxaPart, nTaxaDest, lRound)	
	Default nVlr      := 0
	Default nMoedPart := 0
	Default nMoedDest := 0
	Default dDtMov    := dDataBase
	Default nTaxaPart := 0
	Default nTaxaPart := 0
	Default lRound    := .F.
	
	If nMoedPart != nMoedDest .And. nVlr != 0 .And. (nMoedPart != 0 .Or. nMoedDest != 0)
		If (nMoedPart == 1 .Or. nMoedDest == 1)
			If nMoedPart == 1
				nVlr := xMoeda(nVlr, nMoedPart, nMoedDest, dDtMov, __nCasDec, 0, nTaxaDest)
			Else
				nVlr := xMoeda(nVlr, nMoedPart, nMoedDest, dDtMov, __nCasDec, nTaxaPart, 0)
			EndIf 	
		Else
			nVlr := xMoeda(nVlr, nMoedPart, nMoedDest, dDtMov, __nCasDec, nTaxaPart, nTaxaDest)
		EndIf
	EndIf
	
	If lRound
		nVlr := Round(NoRound(nVlr, __nCasDec), 2)	
	EndIf
Return nVlr

//--------------------------------------------------------------------------
/*/{Protheus.doc}F340CanAba
Restaura o valor do título de abatimento

@author Sivaldo Oliveira
@since  18/07/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function F340CanAba() As Numeric
	Local nVlrAbt As Numeric
	Local cFilSE2 As Character	
	Local aAreaE2 As Array
	Local cTitPai As Character
	
	//Inicializa variáveis
	nVlrAbt := 0
	cFilSE2 := xFilial("SE2", SE2->E2_FILORIG)  
	cTitPai := cFilSE2+ SE2->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA)
	
	If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
		aAreaE2 := SE2->(GetArea())
		SE2->(dbSetOrder(6))
		SE2->(dbSeek(cTitPai))
		
		While SE2->(!Eof()) .And. cFilSE2+SE2->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA) == cTitPai
			If SE2->E2_TIPO $ MVABATIM
				nVlrAbt += SE2->E2_VALOR-SE2->E2_SALDO
				
				If SE2->E2_MOEDA != 1
					If cPaisLoc == "RUS"
						ABATIMENTO += xMoeda(nVlrAbt, SE2->E2_MOEDA, 1, SE5->E5_DATA, __nCasDec, SE5->E5_TXMOEDA)
					Else
						ABATIMENTO += Round(xMoeda(nVlrAbt, SE2->E2_MOEDA, 1, SE5->E5_DATA, __nCasDec, SE5->E5_TXMOEDA), 2)
					EndIf
				Else
					ABATIMENTO += nVlrAbt
				EndIf
				
				RecLock("SE2")
				SE2->E2_SALDO := SE2->E2_VALOR
				SE2->E2_BAIXA := Ctod("")
				SE2->(MsUnLock())
			EndIf
			SE2->(dbSkip())
		EndDo
		
		If cPaisLoc == "RUS"
			ABATIMENTO := Round(ABATIMENTO, 2)
		EndIf
		RestArea(aAreaE2)
	EndIf

Return nVlrAbt

//--------------------------------------------------------------------------
/*/{Protheus.doc}F340BxAbat
Baixa o(s) títulos de abatimento(s)

@author Sivaldo Oliveira
@since  18/07/2018
@version 12
/*/
//--------------------------------------------------------------------------
Static Function F340BxAbat(nVlrAbt As Numeric, nTaxaMov As Numeric)
	Local aAreaSE2 As Array
	Local cTitPai  As Character
	Local cPref    As Character
	Local cNro     As Character
	Local cParc    As Character
	Local cFilOri  As Character
	Local cForLoj  As Character
	
	Default nVlrAbt  := 0 
	Default nTaxaMov := 0
	
	If nVlrAbt != 0 .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
		If SE2->E2_SALDO == 0    
			//Inicializa variáveis
			aAreaSE2 := SE2->(GetArea())
			cFilOri  := xFilial("SE2", SE2->E2_FILORIG) 		
			cTitPai  := cFilOri+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA)
			cForLoj  := SE2->(E2_FORNECE+E2_LOJA) 
			SE2->(dbSetOrder(1))
			
			If SE2->(dbSeek(cTitPai))
				cPref   := SE2->E2_PREFIXO
				cNro    := SE2->E2_NUM
				cParc   := SE2->E2_PARCELA
				
				While SE2->(!Eof()) .And. SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA) ==  (cFilOri+cPref+cNro+cParc)
					If SE2->E2_TIPO $ MVABATIM .And. SE2->(E2_FORNECE+E2_LOJA) == cForLoj
						
						If SE2->E2_MOEDA != 1//converte o valor do abatimento para contabilização
							ABATIMENTO += Round(xMoeda(SE2->E2_SALDO, SE2->E2_MOEDA, 1, dDatabase, __nCasDec, nTaxaMov), 2)
						Else
							ABATIMENTO += SE2->E2_SALDO
						EndIf						
						
						//Baixa do Abatimento
						RecLock("SE2")
						Replace SE2->E2_SALDO	  	With 0
						Replace SE2->E2_BAIXA	  	With Iif(SE2->E2_BAIXA <= dBaixa, dBaixa, SE2->E2_BAIXA)
						Replace SE2->E2_LOTE	  	With cLote
						Replace SE2->E2_MOVIMEN  	With dBaixa
						Replace SE2->E2_PORTADO  	With cBanco
						SE2->(MsUnlock())
					EndIf
					
					SE2->(dbSkip())
				EndDo
			EndIf
			
			RestArea(aAreaSE2)
		EndIf
	EndIf
Return Nil

//------------------------------
/*/{Protheus.doc}F340DelTx
Excluir os impostos gerados pela compensação.

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//------------------------------
Static Function F340DelTx(cE2FilOri As Character)
	Local lEditSE2 As Logical
	Local aAreaSE2 As Array
	Local cFilSE2  As Character
	Local cChavImp As Character
		
	Default cE2FilOri := SE2->E2_FILORIG
	
	//Inicializa variáveis.
	lEditSE2 := .F.
	aAreaSE2 := SE2->(GetArea())
	cFilSE2  := xFilial("SE2", cE2FilOri) 
	cChavImp := cFilSE2 + SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_FORNECE+E5_LOJA)
	SE2->(DbSetOrder(17))
	
	If SE2->(MsSeek(cChavImp))
		cChavImp := AllTrim(cChavImp)
		
		While SE2->(!Eof()) .And. AllTrim(cFilSE2+SE2->E2_TITPAI) == cChavImp  
			If SE2->E2_SEQBX == SE5->E5_SEQ .And. AllTrim(SE2->E2_ORIGEM) == "FINA340"
				RecLock("SE2")
				SE2->(DbDelete())
				SE2->(MsUnlock())
				lEditSE2 := .T.
			EndIf
			SE2->(DbSkip())
		EndDo
	EndIf
	
	RestArea(aAreaSE2)
	
	//Deixa a tabela em edição para continuar estorno do título principal
	If lEditSE2
		RecLock("SE2")
	EndIf
Return Nil

//------------------------------
/*/{Protheus.doc}F340DelDic
Exclui a NDF, DIC gerada na compensação

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//------------------------------
Static Function F340DelDic(cE2FilOri As Character, aDICNDF As Array)
	Local cQry      As Character
	Local aAreaSE2  As Array
	Local cOrigem   As Character
	Local nDICNDF   As Numeric
	Local nX        As Numeric
	LOCAL aCancTit  As Array
	
	Default cE2FilOri := SE2->E2_FILORIG
	Default aDICNDF   := {}	

	nDICNDF  := Len(aDICNDF)
	aCancTit := {}

	PRIVATE lMsErroAuto := .F.
	
	If nDICNDF > 0
		//Inicializa variáveis.
		cQry     := ""
		aAreaSE2 := SE2->(GetArea())
		nX       := 0
		
		For nX := 1 To nDICNDF
			If !Empty(aDICNDF[nX, 2]) 
				SE2->(DbGoto(aDICNDF[nX, 1]))

				aCancTit := {}
				
				If __DelDic == Nil 
					cOrigem  := PadR("FINA340", TamSx3("E2_ORIGEM")[1], "")
					
					cQry := "SELECT R_E_C_N_O_ FROM ? WHERE "
					cQry += "E2_FILIAL = ? AND E2_PREFIXO = ? "
					cQry += "AND E2_NUM = ? AND E2_TIPO IN (?) "
					cQry += "AND E2_NATUREZ = ? AND E2_FORNECE = ? "
					cQry += "AND E2_LOJA = ? AND E2_SEQBX = ? "  
					cQry += "AND E2_ORIGEM = '" + cOrigem + "' "
					cQry += "AND D_E_L_E_T_ = ' '"
					cQry := ChangeQuery(cQry)
					__DelDic := FWPreparedStatement():New(cQry)
				EndIf
				
				__DelDic:SetNumeric(1, RetSqlName("SE2"))
				__DelDic:SetString(2, xFilial("SE2", cE2FilOri))
				__DelDic:SetString(3, SE2->E2_PREFIXO)
				__DelDic:SetString(4, SE2->E2_NUM)
				__DelDic:SetIn(5, {'DIC','NDF'})
				__DelDic:SetString(6, SE2->E2_NATUREZ)
				__DelDic:SetString(7, SE2->E2_FORNECE)
				__DelDic:SetString(8, SE2->E2_LOJA)
				__DelDic:SetString(9, aDICNDF[nX, 2])
				cQry := __DelDic:GetFixQuery()
				cTblTmp := MpSysOpenQuery(cQry)
				
				If (cTblTmp)->(!Eof())
					SE2->(DbGoto((cTblTmp)->R_E_C_N_O_))
								
					aAdd(aCancTit, {"E2_FILIAL"		,SE2->E2_FILIAL		,NIL})
					aAdd(aCancTit, {"E2_PREFIXO"	,SE2->E2_PREFIXO	,NIL})
					aAdd(aCancTit, {"E2_NUM"    	,SE2->E2_NUM		,NIL})
					aAdd(aCancTit, {"E2_PARCELA"	,SE2->E2_PARCELA	,NIL})
					aAdd(aCancTit, {"E2_TIPO"   	,SE2->E2_TIPO		,NIL})
					aAdd(aCancTit, {"E2_NATUREZ"	,SE2->E2_NATUREZ	,NIL})
					aAdd(aCancTit, {"E2_FORNECE"	,SE2->E2_FORNECE	,NIL})
					aAdd(aCancTit, {"E2_LOJA"   	,SE2->E2_LOJA		,NIL})
					
					MsExecAuto( { |x,y,z| FINA050(x,y,z)}, aCancTit,, 5)
					
					If lMsErroAuto
						MostraErro()
					Endif
				EndIf
				
			EndIf
		Next nX
		
		RestArea(aAreaSE2)
	EndIf
Return Nil

//------------------------------
/*/{Protheus.doc}F340ImpBx
Verifica se existe impostos configurados
para retenção na baixa

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//------------------------------
Static Function F340ImpBx(lCancel As Logical, cTbl As Character)
	Local lRet As Logical
	
	Default lCancel := .F.
	Default cTbl    := "SE2"

	//Inicializa variáveis
	lRet := .F.
	If cPaisLoc == "BRA" .And. mv_par10 == 1 
		If lCancel .And. __lPaBruto
			lRet := .T.
		EndIf		
		
		If !lRet
			SA2->(DbSetOrder(1))
			SA2->(dbSeek(xFilial("SA2", (cTbl)->E2_FILORIG) + (cTbl)->(E2_FORNECE+E2_LOJA)))	

			// Efetua refresh na __lIrfBaix 
			// pois só é verifica se o IR é na baixa na E2 posicionada no inicio, descartando as NFs selecionadas.
			__lIrfBaix := SA2->A2_CALCIRF == "2" .AND. (Posicione("SED",1,xFilial("SED",SE2->E2_FILORIG) + SE2->(E2_NATUREZ),"ED_CALCIRF") == "S")

			lRet := (__lPccBaix .And. (cTbl)->(E2_PIS+E2_COFINS+E2_CSLL) > 0) .Or.; //PCC
					(__lIrfBaix .And. (cTbl)->E2_IRRF > 0) .Or.; //IRRF  
					(__lIssBaix .And. (cTbl)->E2_ISS > 0) .Or.; //ISS
					(__lIrfBaix .And. (SA2->A2_TIPO == "F" .Or. SA2->A2_IRPROG == "1"))
		EndIf
	EndIf 	

Return lRet

//------------------------------
/*/{Protheus.doc}FA340Parc
Define a parcela do título Imposto/DIC

@author Sivaldo Oliveira
@since  02/01/2019
@version 12
/*/
//------------------------------
Static Function FA340Parc(cPrefPai As Character, cNumPai As Character, cTipo As Character, cForn As Character, cLoj As Character, cFilorig As Character)
	Local cQry     As Character
	Local cParc    As Character
	Local cTblTmp  As Character
	
	Default cPrefPai := ""
	Default cNumPai  := ""
	Default cTipo    := ""
	Default cForn    := ""
	Default cLoj     := ""
	Default cFilorig := cFilAnt
	
	//Inicializa variáveis
	cQry     := ""
	cParc    :=  STRZERO(1, __nTamParc)
	cTblTmp  := ""
	
	cTipo := PadR(cTipo, __nTamTipo, "")
	cForn := PadR(cForn, __nTamForn, "")
	cLoj  := PadR(cLoj,  __nTamLoja, "")
	
	If __ObjParc == Nil
		cQry := "SELECT MAX(E2_PARCELA) AS PARCELA FROM ? WHERE "
		cQry += "E2_FILIAL = ? AND E2_PREFIXO = ? AND E2_NUM = ? "
		cQry += "AND E2_TIPO = ? AND E2_FORNECE = ? AND E2_LOJA = ? "
		cQry += "AND D_E_L_E_T_ = ' ' "
		cQry := ChangeQuery(cQry)
		__ObjParc := FWPreparedStatement():New(cQry)
	EndIf
	
	__ObjParc:SetNumeric(1, RetSqlName("SE2"))
	__ObjParc:SetString(2, xFilial("SE2", cFilorig))
	__ObjParc:SetString(3, cPrefPai)
	__ObjParc:SetString(4, cNumPai)
	__ObjParc:SetString(5, cTipo)
	__ObjParc:SetString(6, cForn)
	__ObjParc:SetString(7, cLoj)
	cQry := __ObjParc:GetFixQuery()
	cTblTmp := MpSysOpenQuery(cQry)
	
	If (cTblTmp)->(!Eof()) .And. !Empty((cTblTmp)->PARCELA)	
		cParc := Soma1((cTblTmp)->PARCELA, __nTamParc, .T.)
	EndIf
	
Return cParc

//------------------------------
/*/{Protheus.doc}F340ForIn
Cria filtro para querys do tipo IN ()  

@author Sivaldo Oliveira
@since  02/01/2019
@version 12
/*/
//------------------------------
Static Function F340ForIn(cString, cSeparador, nPosSep)
	Local cRet     As Character
	Local nY       As Numeric
	Local nTamStr  As Numeric
	Local cTipos   As Character
	Local cCaract  As Character
	Local nQuant   As Numeric
	
	Default cString    := ""
	Default cSeparador := ""
	Default nPosSep    := 3
	
	//Inicializa variáveis
	cRet   := ""
	nY     := 0
	cTipos := ""
	nQuant := 0
	
	cString    := AllTrim(cString)
	nTamStr    := Len(cString)
	cSeparador := AllTrim(cSeparador)
	
	If !Empty(cSeparador)
		For nY := 1 To nTamStr
			cCaract := SUBSTR(cString,nY,1)
			
			If cSeparador == cCaract 
				If nY < nTamStr 
					Loop
				Else
					cCaract := ""	
				EndIf
			EndIf
			
			cTipos += cCaract 
			nQuant += 1
			
			If (nQuant == nPosSep .Or. nY == nTamStr) 
				cTipos := AllTrim(cTipos)
				
				If Empty(cRet)
					cRet   += "'" + Padr(cTipos, nPosSep, "") + "'"
				Else
					cRet   += ", '" + Padr(cTipos, nPosSep, "") + "'"
				EndIf
				
				cTipos := ""
				nQuant := 0
			EndIf
		Next nY
		
		cTipos := ""
		
		If !Empty(cRet)
			cTipos := "(" + cRet + ")" 	
		EndIf
	EndIf

Return cTipos

//------------------------------
/*/{Protheus.doc}F340VlrRet
@author Sivaldo Oliveira
@since  05/01/2019
@version 12
/*/
//------------------------------
Static Function F340VlrRet(nVlrPA As Numeric, nImpPA As Numeric, nImpEmPA As Numeric)
	Local cQry     As Character
	Local cTblTmp  As Character
	Local cDoc     As Character
	Local nVlrRet  As Numeric
	Local nPropoc  As Numeric
	
	Default nVlrPA   := 0
	Default nImpPA   := 0
	Default nImpEmPA := 0
	
	//Inicializa variáveis 
	cQry     := ""
	cTblTmp  := ""
	cDoc     := PadR(SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA), TamSx3("E5_DOCUMEN")[1], " ")
	nVlrRet  := 0
	nPropoc  := 0
	
	If __oImpPA == Nil
		cQry += "SELECT ISNULL(SUM(SE5.E5_VRETPIS+SE5.E5_VRETCOF+SE5.E5_VRETCSL+SE5.E5_VRETIRF+SE5.E5_VRETISS), 0) AS TOTRET "
		cQry += ",ISNULL(SUM(SE5.E5_BASEIRF), 0) AS BASEIMP "
		CQry += "FROM ? SE5 "
		cQry += "WHERE SE5.E5_DOCUMEN = ? "
		cQry += "AND SE5.E5_RECPAG = 'P' "
		cQry += "AND SE5.E5_TIPODOC IN ('BA', 'CP') AND SE5.E5_MOTBX = 'CMP' " 
		cQry += "AND SE5.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') "
		cQry += "AND SE5.E5_KEY = '" + __cE5_KEY + "' "
		cQry += "AND SE5.E5_MOVCX = '" + __E5_MOVCX + "' "
		cQry += "AND (SE5.E5_VRETPIS > 0 OR SE5.E5_VRETCOF > 0 OR SE5.E5_VRETCSL > 0 OR SE5.E5_VRETIRF > 0 OR SE5.E5_VRETISS > 0) " 
		cQry += "AND SE5.D_E_L_E_T_ = ' ' "
		//Estorno
		cQry += "AND SE5.E5_SEQ NOT IN (SELECT EST.E5_SEQ FROM ? EST "
		cQry += "WHERE EST.E5_DOCUMEN = ? "
		cQry += "AND EST.E5_RECPAG = 'R' AND EST.E5_TIPODOC = 'ES' "
		cQry += "AND EST.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') "
		cQry += "AND EST.E5_KEY = '" + __cE5_KEY +"' "
		cQry += "AND EST.E5_MOTBX = 'CMP' "
		cQry += "AND EST.E5_MOVCX = '" + __E5_MOVCX + "' "
		cQry += "AND EST.D_E_L_E_T_ = ' ') "
		
		cQry := ChangeQuery(cQry)
		__oImpPA := FWPreparedStatement():New(cQry)
	EndIf
	
	__oImpPA:SetNumeric(1, RetSqlName("SE5"))
	__oImpPA:SetString(2, cDoc)
	__oImpPA:SetNumeric(3, RetSqlName("SE5"))
	__oImpPA:SetString(4, cDoc)
	cQry    := __oImpPA:GetFixQuery()
	cTblTmp := MpSysOpenQuery(cQry)
		
	If (cTblTmp)->(!Eof()) .And. (cTblTmp)->BASEIMP > 0 .And. (cTblTmp)->TOTRET > 0
		nVlrRet := (nImpPA - (cTblTmp)->TOTRET)
		
		If  nVlrPA > 0
			nPropoc := ((cTblTmp)->BASEIMP / nVlrPA)
			
			If !__lPccBaix .And. SE2->(E2_PIS+E2_COFINS+E2_CSLL) > 0
				nVlrRet  -= SE2->(E2_PIS+E2_COFINS+E2_CSLL)
				nImpEmPA += (SE2->(E2_PIS+E2_COFINS+E2_CSLL) - Round(SE2->(E2_PIS+E2_COFINS+E2_CSLL) * nPropoc, 2)) 
			EndIf
			
			If !__lIrfBaix .And. SE2->E2_IRRF > 0 
				nVlrRet  -= SE2->E2_IRRF 
				nImpEmPA += (SE2->E2_IRRF - Round(SE2->E2_IRRF * nPropoc, 2))
			EndIf 
			
			If !__lIssBaix .And. SE2->(E2_ISS+E2_PRISS) > 0
				nVlrRet  -= SE2->(E2_ISS+E2_PRISS)
				nImpEmPA += (SE2->(E2_ISS+E2_PRISS) - Round(SE2->(E2_ISS+E2_PRISS) * nPropoc, 2))
			EndIf
			
			If SE2->(E2_INSS+E2_PRINSS) > 0
				nVlrRet  -= SE2->(E2_INSS+E2_PRINSS)
				nImpEmPA += (SE2->(E2_INSS+E2_PRINSS) - Round(SE2->(E2_INSS+E2_PRINSS) * nPropoc, 2))
			EndIf
		EndIf			
	EndIf
	
Return nVlrRet

//------------------------------
/*/{Protheus.doc}F340VldSeq
Valida sequência de cancelamento da compensação
@author Sivaldo Oliveira
@since  12/02/2019
@version 12
/*/
//------------------------------
Function F340VldSeq(cTblTmp As Character, cMarca As Character, lVldSeq As Logical, nOpca As Numeric)
	Local lRet As Logical
	Local nSeq As Character
	Local aTmp As Array
	Local Area As Array
	Local cChv As Character
	Local lSeqPart As Logical
	Local lSeqDest As Logical
	
	Default cTblTmp := ""
	Default cMarca  := "" 
	Default lVldSeq := .F.
	Default nOpca	:= 0
	
	//Inicializa variáveis.
	lRet := .T.
	nSeq := ""
	aTmp := {}
	Area := {}
	cChv := ""
	lSeqPart := .F.
	lSeqDest := .F.
		
	If !Empty(cTblTmp) .And. !Empty(cMarca)
		Area := GetArea()
		aTmp := (cTblTmp)->(GetArea())
		(cTblTmp)->(DbGotop())
		(cTblTmp)->(DbSetOrder(1))

		//Valida partida
		If (cTblTmp)->(DbSeek(Space(Len(cMarca))))
			If (cTblTmp)->(DbSeek(cMarca))
				(cTblTmp)->(DbSkip(-1))
				nSeq := Alltrim((cTblTmp)->SEQ)
				(cTblTmp)->(DbSkip())
				
				While (cTblTmp)->(!Eof()) .And. (cTblTmp)->OK == cMarca 
					If (lVldSeq .Or. ((cTblTmp)->(VRETPIS+VRETCOF+VRETCSL+VRETIRF+VRETISS) > 0)) .And. Alltrim((cTblTmp)->SEQ) < nSeq 
					 	lSeqPart := .T.
						Exit
					EndIf
					
					(cTblTmp)->(DbSkip())
				EndDo 
			EndIf
		EndIf

		//Valida destino
		If !(cTblTmp)->TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC"
			If (cTblTmp)->(DbSeek(cMarca))
				(cTblTmp)->(DbSkip(-1))
			EndIF

			While (cTblTmp)->(!Eof()) .And. (cTblTmp)->OK == cMarca 
				SE5->(DBGoTo((cTblTmp)->RECNO))
				
				cChv := SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA)
				nSeq := Alltrim((cTblTmp)->SEQ)
					
				If nSeq < CmpMaxSeq(cChv) .And. (cTblTmp)->(VRETPIS+VRETCOF+VRETCSL+VRETIRF+VRETISS) > 0
					lSeqDest := .T.
					Exit
				EndIf
				
				(cTblTmp)->(DbSkip())
			EndDo 
		EndIf

		If lSeqDest .Or. lSeqPart
			HELP(' ', 1, "F340SEQCAN" ,Nil, STR0112, 2,0,,,,,, {STR0113})
			lRet := .F.
		EndIf
		
		If lRet
			nOpca := 1
		EndIf
		RestArea(aTmp)
		RestArea(Area)
	EndIf 
	
Return lRet

//----------------------------------------------------------------------
/*/{Protheus.doc}F340FilMov
Altera a cFilAnt de acordo com a filial do movimento(E5_FILIAL)

@Param cCompSe5 , Nivel de compartilhamento da SE5
@Param lGestao , Indica se utiliza gestao de empresas

@author Vitor Duca
@since  23/09/2019
@version 12
/*/
//---------------------------------------------------------------------
Static Function F340FilMov(cCompSe5 As Character)
	Local nRecSm0  as Numeric

	//inicialização das variaveis
	nRecSm0  := SM0->(Recno())

	If cCompSe5 == "E"
		cFilAnt := SE5->E5_FILIAL
	Else
		SM0->(DbSetOrder(1))
		If SM0->(DbSeek(cEmpAnt+AllTrim(SE5->E5_FILIAL),.F.))
			cFilAnt	:= SM0->M0_CODFIL
		Endif
		SM0->(DbGoTo(nRecSm0))	
	Endif

Return Nil 

//------------------------------
/*/{Protheus.doc}F340MaAtr
Maior atraso do fornecedor

@Param nAtraso, dias de atraso

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//------------------------------
Static Function F340MaAtr(nAtraso As Numeric)
	Default nAtraso := 1 
	
	SA2->(DbSetOrder(1))
	
	If SA2->(MsSeek(xFilial("SA2", SE2->E2_FILORIG) + SE2->(E2_FORNECE+E2_LOJA)))
		If (Dow(SE2->E2_VENCTO) == 1 .Or. Dow(SE2->E2_VENCTO) == 7) .And. Dow(dBaixa) == 2 .And. nAtraso <= 2
			nAtraso := 0
		EndIf
		
		nAtraso := IIF(nAtraso < 0, 0, nAtraso)
		
		If SA2->A2_MATR < nAtraso
			RecLock("SA2")
			SA2->A2_MATR := nAtraso
			SA2->(MsUnlock())
		EndIf
	Endif

Return Nil

//------------------------------
/*/{Protheus.doc}F340Static
Inicializa as variáveis estáticas.

@author Sivaldo Oliveira
@since  12/06/2018
@version 12
/*/
//------------------------------
Static Function F340Static()
	__lPaBruto := SuperGetMv("MV_PABRUTO", .F., "2") $ "1| "
	__lBxVlLiq := SuperGetMv("MV_BP10925", .F., "1") == "2"
	__lPaPrime := SuperGetMv("MV_PAPRIME", .F., "2") == "1"
	__lProvImp := SuperGetMv("MV_COMPCP",  .F., .F.)
	__lPccBaix := SuperGetMv("MV_BX10925", .F., "2") == "1"
	__lIssBaix := SuperGetMv("MV_MRETISS",.F.,"1") == "2"	
	__lBxAuImp := SuperGetMV("MV_CPIMPAT", .F., 2) == 1
	__lAglPcc  := SuperGetMV("MV_AG10925", .F., 2) == "1"
	__lStartPA := SE2->E2_TIPO $ MVPAGANT 
	__nTxMoedP := SE2->E2_TXMOEDA
	__nTxTiBrw := 0
	__nTxCont  := 0
	__nRecPart := SE2->(Recno())
	__lNoTxMov := .F.
	__cOrder   := SqlOrder(SE2->(IndexKey()))
	__lFinVDoc := SuperGetMv("MV_FINVDOC", .F., "2") == "1"
	__nTotal   := 0
	__oMovPA   := Nil
	__oMovCnb  := Nil
	__ObjParc  := Nil
	__DelDic   := Nil
	__VerDic   := Nil
	__MaxSeq   := Nil
	__TmpNF	   := Nil
	__ValDic   := Nil
	__oImpPA   := Nil
	__oEstIPA  := Nil
	__oDicBx   := Nil
	__oCanDic  := Nil
	__oMovNF   := NIl
	__lCmTxCon := .T.
	__lCalcCM  := .T.
	__lF340CMP := ExistBlock("F340CMP")
	__lOk      := .F.
	__nCasDec  := TamSx3("E2_TXMOEDA")[2]
	__aImpos   := {}
	__nBase    := 0
	__nVlrAbt  := 0
	__nSldCmp  := 0
	__lTxPrCon := SuperGetMv("MV_TXPRCON", .F., .F.)
	__nTxDesAl	:= 0


	If cPaisLoc == "BRA" 
		//fator gerador do IRF
		SA2->(Dbsetorder(1))
		SA2->(Dbseek(xFilial("SA2")+SE2->(E2_FORNECE+E2_LOJA)))	
		
		__lIrfBaix := SA2->A2_CALCIRF == "2" .AND. (Posicione("SED",1,xFilial("SED",SE2->E2_FILORIG) + SE2->(E2_NATUREZ),"ED_CALCIRF") == "S")	
		
		//Conf. para gerar correção monetária
		__lCmTxCon := SuperGetMv("MV_CMTXCON", .F., .F.)
		__lCalcCM  := SuperGetMv("MV_CALCCM", .F., "N") == "S"
	EndIf
	
	__nTamForn := TamSx3("E2_FORNECE")[1]
	__nTamLoja := TamSx3("E2_LOJA")[1]
	__nTamNatu := TamSx3("E2_NATUREZ")[1]
	__nTamParc := TamSx3("E2_PARCELA")[1]
	__nTamTipo := TamSx3("E2_TIPO")[1]
	__cE5_KEY  := Space(TamSx3("E5_KEY")[1])
	__E5_MOVCX := Space(TamSx3("E5_MOVCX")[1])
	__aRetAuto := {}
	__lCmpM103 := IsInCallStack('FinCmpAut') .or. IsInCallStack('FinCmpAFK')
	__lGetParA := FindFunction("GetParAuto") .or. __lCmpM103
	__lBtrISS  := SE2->(ColumnPos("E2_BTRISS")) > 0 .And. SE2->(ColumnPos("E2_VRETBIS")) > 0 .And.;
				  SE2->(ColumnPos("E2_CODSERV")) > 0 .And. FindFunction("ISSCPOM") .And. FindFunction("BtrISSMun")
	
	SX1->(DbSetOrder(1))
	If SX1->(DbSeek(PadR("AFI340", Len(SX1->X1_GRUPO), " ") + "13"))
		__nMvPar13   := mv_par13
	EndIf

	If SX1->(DbSeek(PadR("AFI340", Len(SX1->X1_GRUPO), " ") + "14"))
		__nMvPar14   := mv_par14
	EndIf

Return Nil

//---------------------------------------------------------------
/*/{Protheus.doc}F340LiqTx
Baixa saldo do TX se na compensação NF x PA houver TXA vinculado ao PA 
que foi baixado (mv_par14 = Sim)

@Param aTitPai, Chaves dos titulos que foram selecionados para a compensação
@author Vitor Duca
@since  20/11/2019
@see 
@version 12
/*/
//----------------------------------------------------------------
Static Function F340LiqTx(nLaco As Numeric, cSeqBx As Character) As Logical
	Local cChaveNf	As Character
	Local cChaveAdt	As Character
	Local aAreaSE2  As Array
	Local nPos		As Numeric
	Local lRet		As Logical
	Local nValorBx  As Numeric
	Local aImpostos	As Array
	Local nRecBx	As Numeric
	Local nRecNF	As Numeric
	Local cDocTXA	As Character
	
	Default nLaco  	:= 0
	Default cSeqBx  := "00"
	
	aAreaSE2 	:= SE2->(GetArea())
	cChaveNf	:= ""
	cChaveAdt	:= ""
	nPos		:= 0
	lRet		:= .T.
	nValorBx	:= 0
	aImpostos	:= {}
	nRecBx		:= 0
	nRecNF		:= 0
	cDocTXA     := ""
	
	SE2->(DbSetOrder(17))
	SE2->(DbGoTo(__nRecPart))
	
	cChaveAdt 	:= SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
	cChaveNf	:= aTitulos[nLaco][1]+aTitulos[nLaco][2]+aTitulos[nLaco][3]+aTitulos[nLaco][4]+aTitulos[nLaco][14]+aTitulos[nLaco][15]
	nRecNF		:= aRecNo[nLaco]
	
	If !__lStartPA
		cChaveAdt 	:= aTitulos[nLaco][1]+aTitulos[nLaco][2]+aTitulos[nLaco][3]+aTitulos[nLaco][4]+aTitulos[nLaco][14]+aTitulos[nLaco][15]
		cChaveNf	:= SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
		nRecNF		:= SE2->(Recno())
		SE2->(DbGoTo(aRecNo[nLaco]))	
	Endif	
	
	//Posiciona nos impostos do adiantamento (PA)	
	If SE2->(MsSeek(xFilial("SE2", SE2->E2_FILORIG)+cChaveAdt))
		aImpostos := F340Filho(cChaveNf, nRecNF)
		
		If Len(aImpostos) > 0
			While Alltrim(SE2->E2_TITPAI) == cChaveAdt
				if SE2->E2_TIPO $ MVTXA
					nValorBx := BxMovBco() 
					
					If nValorBx > 0
						nPos := Ascan(aImpostos,{ |x| x[1] == SE2->E2_NATUREZ } )
						
						If nPos > 0
							cDocTXA  := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_NATUREZ+E2_FORNECE+E2_LOJA)
							nSaldoTx := aImpostos[nPos][2] - nValorBx
							
							If nSaldoTx < 0
								nSaldoTx := 0
								nValorBx := aImpostos[nPos][2]
							Endif	
							
							nRecBx := aImpostos[nPos][3]
							
							If !F340GrvLiq(nValorBx,nSaldoTx,cSeqBx,nRecBx,cDocTXA)
								lRet := .F.
								Exit
							Endif	
						Endif	
					Endif	
				Endif
				SE2->(DbSkip())
			Enddo
		Endif	 	
	Endif

	RestArea(aAreaSE2)
	FwFreeArray(aAreaSE2)
	FwFreeArray(aImpostos)

Return lRet

//--------------------------------------------------------------------
/*/{Protheus.doc} F340Filho
Função para buscar os impostos da NF

@Param cTitPai, Chave do titulo da nota fiscal
@Return aReturn, Array contendo as informações da tabela SE2 
(E2_NATUREZ,E2_SALDO,R_E_C_N_O)

@author Vitor Duca
@since 21/11/2019
@version P12
/*/
//-----------------------------------------------------------------------
Static Function F340Filho(cTitPai As Character, nRecNF As Numeric) As Character
	Local cQuery 	As Character
	Local cAliasTmp As Character
	Local aArea		As Array
	Local aReturn	As Array

	Default cTitPai   := ""
	Default nRecNF	  := 0

	//Inicialização das variaveis
	aArea	  := SE2->(GetArea())
	cAliasTmp := GetNextAlias()
	cQuery	  := ""
	aReturn	  := {}
	
	SE2->(DbGoTo(nRecNF))
	If __o340Filho == NIL
		cQuery := " "
		cQuery :=	"SELECT SE2.E2_NATUREZ, SE2.E2_SALDO, SE2.R_E_C_N_O_ RECNO"
		cQuery +=	" FROM "+RetSqlName("SE2")+" SE2"
		cQuery += 	" WHERE SE2.E2_FILIAL = ?"
		cQuery += 		" AND SE2.E2_TITPAI = ?"
		cQuery += 		" AND SE2.E2_TIPO IN (?)"
		cQuery +=		" AND SE2.D_E_L_E_T_ = ' '"
		cQuery := ChangeQuery(cQuery)
		__o340Filho := FWPreparedStatement():New(cQuery)
	Endif

	__o340Filho:SetString(1,xFilial("SE2",SE2->E2_FILORIG))
	__o340Filho:SetString(2,cTitPai)
	__o340Filho:SetIn(3,{'TX','TXA'})
	cQuery := __o340Filho:GetFixQuery()	
	MpSysOpenQuery(cQuery,cAliasTmp)

	While (cAliasTmp)->(!Eof())
		aAdd(aReturn,{(cAliasTmp)->E2_NATUREZ,(cAliasTmp)->E2_SALDO,(cAliasTmp)->RECNO})
		(cAliasTmp)->(DbSkip())
	EndDo	

	RestArea(aArea)
	FwFreeArray(aArea)

Return aReturn

//--------------------------------------------------------------------
/*/{Protheus.doc} F340EstIpa
Função responsavel por realizar o estorno da baixa do TX automatica 
de acordo com o pergunte (mv_par14)

@author Vitor Duca
@since 01/12/2019
@version P12
/*/
//-----------------------------------------------------------------------
Static Function F340EstIpa() As Logical
	Local oModelMov	As Object
	Local oSubFKA	As Object
	Local cCamposE5	As Character
	Local lRet		As Logical
	Local cLog		As Character
	Local aAreaSE2	As Array
	Local aAreaSE5	As Array
	Local cTitpai	As Character
	Local oTBxCanc	As Object
	Local cSeqbx	As Character
	Local cQry      As Character
	Local cTblTmp   As Character
	
	//inicialização das variaveis
	cSeqbx		:= SE5->E5_SEQ
	oModelMov	:= NIL
	oSubFKA		:= NIL
	cCamposE5	:= ""
	lRet		:= .T.
	cLog		:= ""
	aAreaSE2	:= SE2->(GetArea())
	aAreaSE5	:= SE5->(GetArea())
	cTitpai		:= SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
	oTBxCanc	:= FWPreparedStatement():New( '' )
	cQry        := ""
	cTblTmp     := ""
	
	SE2->(DbSetOrder(17))
	SE5->(DbSetOrder(7))
	If SE2->(DbSeek(xFilial("SE2",SE2->E2_FILORIG)+cTitpai))
		While lRet .and. AllTrim(SE2->E2_TITPAI) == cTitpai
			If SE5->(DbSeek(xFilial("SE5",SE2->E2_FILORIG)+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA+cSeqbx)))
				While lRet .and. SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_FORNECE+E5_LOJA) == SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)

					If SE5->E5_TIPODOC == "ES" .or. SE5->E5_SEQ <> cSeqbx
						SE5->(DbSkip())
						Loop
					Endif
					
					If __oEstIPA == Nil
						cQry := "SELECT MAX(FK2.R_E_C_N_O_) RECNO FROM ? FK2 JOIN ? FK7 ON (FK2.FK2_FILIAL = FK7.FK7_FILIAL AND FK2.FK2_IDDOC = FK7.FK7_IDDOC) "
						cQry += "WHERE FK2.FK2_FILIAL = ? AND FK2.FK2_MOTBX = 'IPA' AND "
						cQry += "FK7.FK7_CHAVE = ? AND "
						cQry += "FK2.D_E_L_E_T_ = ' ' AND FK7.D_E_L_E_T_ = ' ' "
						cQry := ChangeQuery(cQry)
						__oEstIPA := FWPreparedStatement():New(cQry)					
					EndIf
					
					__oEstIPA:SetNumeric(1, RetSqlName("FK2"))
					__oEstIPA:SetNumeric(2, RetSqlName("FK7"))
					__oEstIPA:SetString(3, SE5->E5_FILIAL)
					__oEstIPA:SetString(4, SE5->E5_FILIAL+"|"+SE5->E5_PREFIXO+"|"+SE5->E5_NUMERO+"|"+SE5->E5_PARCELA+"|"+SE5->E5_TIPO+"|"+SE5->E5_FORNECE+"|"+SE5->E5_LOJA)
					cQry := __oEstIPA:GetFixQuery()
					cTblTmp := MpSysOpenQuery(cQry)
					FK2->(DbGoTo((cTblTmp)->RECNO))
					
					If AllTrim(SE5->E5_TABORI) == "FK2" .And. SE5->E5_MOTBX == "IPA" .And. FK2->FK2_RECPAG == "P"
						oModelMov := FWLoadModel("FINM020")
						FK2->(DbSetOrder(1))
						
						If FK2->(MsSeek(SE5->(E5_FILIAL+E5_IDORIG)))
							RecLock("SE2")
								SE2->E2_SALDO 	+= SE5->E5_VALOR 
								SE2->E2_BAIXA 	:= Ctod("  /  /    ")
								SE2->E2_VALLIQ 	:= 0
								SE2->E2_MOVIMEN := Ctod("  /  /    ")
							SE2->(MsUnLock())

							oModelMov:SetOperation(4)
							oModelMov:Activate()
							oSubFKA := oModelMov:GetModel("FKADETAIL")
							oSubFKA:SeekLine({{"FKA_IDORIG", SE5->E5_IDORIG}})
							oModelMov:SetValue("MASTER", "E5_GRV", .T.)
							oModelMov:SetValue( "MASTER", "HISTMOV", STR0118)
							cCamposE5 := "{"
							cCamposE5 += "{'E5_LA','"+SE5->E5_LA+"'}"
							oModelMov:SetValue('MASTER', 'E5_LA', 'S')
							cCamposE5 += "}"
							
							oModelMov:SetValue("MASTER", "E5_CAMPOS", cCamposE5 )
							oModelMov:SetValue("MASTER", "E5_OPERACAO", 2)
							
							If oModelMov:VldData()
								oModelMov:CommitData()
							Else
								lRet := .F.
								cLog := cValToChar(oModelMov:GetErrorMessage()[4]) + ' - '
								cLog += cValToChar(oModelMov:GetErrorMessage()[5]) + ' - '
								cLog += cValToChar(oModelMov:GetErrorMessage()[6])
								Help(Nil, Nil, "M340VALID", Nil, cLog, 1, 0 )
							EndIf
						Else
							lRet := .F.
							Help(Nil, Nil, "M340VALID", Nil, STR0119, 1, 0 )//"Não foi possivel cancelar a baixa do TX, verifique compartilhamento SE5 e FK2"
						EndIf
						
						oModelMov:DeActivate()
						oModelMov:Destroy()
						oModelMov:= nil											
					EndIf
					SE5->(DbSkip())
				EndDo	
			Endif
			SE2->(DbSkip())
		EndDo
	Endif

	oTBxCanc:Destroy()
	oTBxCanc := Nil	

	RestArea(aAreaSE2)
	RestArea(aAreaSE5)
	FwFreeArray(aAreaSE2)
	FwFreeArray(aAreaSE5)

Return lRet


//--------------------------------------------------------------------
/*/{Protheus.doc} F340SldTx
Verifica saldo a compensar do TX, quando o mesmo estiver configurado 
para nao ser baixado pela compensação

@Return nSaldo, Saldo a compensar do TX
@author Vitor Duca
@since 08/12/2019
@version P12
/*/
//-----------------------------------------------------------------------
Static Function F340SldTx(cTbl As Character)
	Local cQuery 	As Character
	Local nSaldo	As Numeric

	Default cTbl := "SE2"

	//Inicialização das variaveis
	nSaldo := 0
	cQuery := ""

	cQuery += "SELECT SUM(VAL) VLRBX " 
	cQuery += "FROM   (SELECT SUM(E2_SALDO) VAL "  
	cQuery +=		"FROM " + RetSqlName("SE2") + " "
	cQuery +=		"WHERE E2_FILIAL = '"+xFilial("SE2",(cTbl)->E2_FILORIG)+"' "
	cQuery +=			"AND E2_PREFIXO = '"+(cTbl)->E2_PREFIXO+"' "
	cQuery +=			"AND E2_NUM = '"+(cTbl)->E2_NUM+"' "
	cQuery +=			"AND E2_PARCELA = '"+(cTbl)->E2_PARCELA+"' "
	cQuery +=			"AND E2_TIPO = '"+(cTbl)->E2_TIPO+"' "
	cQuery +=			"AND E2_FORNECE = '"+(cTbl)->E2_FORNECE+"' "
	cQuery +=			"AND E2_LOJA = '"+(cTbl)->E2_LOJA+"' "
	cQuery +=			"AND D_E_L_E_T_ = ' ' "
	cQuery +=		"UNION " 
	cQuery +=		"SELECT SUM(SE5.E5_VALOR) *- 1 VAL " 
	cQuery +=		"FROM " + RetSqlName("SE5") + " SE5 " 
	cQuery +=			"WHERE SE5.E5_NUMERO = '"+(cTbl)->E2_NUM+"' " 
	cQuery +=				"AND SE5.E5_PREFIXO = '"+(cTbl)->E2_PREFIXO+"' "
	cQuery +=				"AND SE5.E5_PARCELA = '"+(cTbl)->E2_PARCELA+"' " 
	cQuery +=				"AND SE5.E5_TIPO = '"+(cTbl)->E2_TIPO+"' "
	cQuery +=				"AND SE5.E5_FORNECE = '"+(cTbl)->E2_FORNECE+"' "
	cQuery +=				"AND SE5.E5_LOJA = '"+(cTbl)->E2_LOJA+"' " 
	cQuery +=				"AND SE5.E5_FILORIG = '"+(cTbl)->E2_FILORIG+"' "
	cQuery +=				"AND SE5.E5_SITUACA <> 'C' "
	cQuery +=				"AND 0 = (SELECT COUNT(*) "
	cQuery +=						"FROM " + RetSqlName("SE5") + " EST "
	cQuery +=						"WHERE  EST.E5_FILIAL = SE5.E5_FILIAL "
	cQuery +=							"AND EST.E5_PREFIXO = SE5.E5_PREFIXO "
	cQuery +=							"AND EST.E5_NUMERO = SE5.E5_NUMERO "
	cQuery +=							"AND EST.E5_PARCELA = SE5.E5_PARCELA "
	cQuery +=							"AND EST.E5_TIPO = SE5.E5_TIPO "
	cQuery +=							"AND EST.E5_CLIFOR = SE5.E5_CLIFOR "
	cQuery +=							"AND EST.E5_LOJA = SE5.E5_LOJA "
	cQuery +=							"AND EST.E5_SEQ = SE5.E5_SEQ "
	cQuery +=							"AND EST.E5_RECPAG = 'R' "
	cQuery +=							"AND EST.E5_TIPODOC = 'ES' "
	cQuery +=							"AND EST.D_E_L_E_T_ = ' ' ) "
	cQuery +=			"AND SE5.D_E_L_E_T_ = ' ') " + RetSqlName("SE2") + " " 
	cQuery := ChangeQuery(cQuery)

	nSaldo := MpSysExecScalar(cQuery,"VLRBX")

Return nSaldo  

//--------------------------------------------------------------------
/*/{Protheus.doc} F340GrvLiq
Função para gravação da SE5 e FK's do TX 

@Param nValorBx, Valor que sera baixado
@Param nSaldoTx, Saldo do TX que sera gravado
@Param nRecBx, Recno do TX para posicionamento na SE2

@Return lRet, Se conseguiu efetuar a gravação na tabelas
@author Vitor Duca
@since 11/12/2019
@version P12
/*/
//-----------------------------------------------------------------------
Static Function F340GrvLiq(nValorBx As Numeric, nSaldoTx As Numeric, cSeqBx As Character, nRecBx As Numeric, cDocTXA As Character)
	Local lBaixou 	As Logical 
	Local cLog		As Character		
	Local oBxImp	As Object
	Local lRet		As Logical
	Local aAreaSE2	As Array

	Default cSeqBx 		:= "00"
	Default nValorBx 	:= 0
	Default nSaldoTx	:= 0
	Default nRecBx		:= 0
	Default cDocTXA		:= ""

	//Inicialização das variaveis
	lBaixou 	:= .F.
	cLog		:= ""
	oBxImp		:= NIL
	lRet		:= .T.
	aAreaSE2	:= SE2->(GetArea())

	SE2->(DbGoTo(nRecBx))
	RecLock("SE2",.F.)
		SE2->E2_SALDO 	:= nSaldoTx
		SE2->E2_BAIXA 	:= dBaixa
		SE2->E2_VALLIQ 	:= nValorBx
		SE2->E2_MOVIMEN := dBaixa
	SE2->(MsUnLock())

	oBxImp := BxImposto():new()
	oBxImp:ModelOper(3)
	oBxImp:SetMotBx("IPA")
	oBxImp:SetSeqBx(cSeqBx)
	oBxImp:SetDocumen(cDocTXA)
	oBxImp:SetVlrBx(nValorBx)
	oBxImp:SetHistorico(STR0116)//"Imposto pago antecipadamente via TXA"
	oBxImp:Activate()
	lBaixou := oBxImp:Grava()
	
	If !lBaixou
		cLog := oBxImp:GetErrorGrava()
		Help( ,,"M340VALRE",,cLog, 1, 0 )
		lRet := .F.
	Endif
	
	oBxImp:Limpa()
	oBxImp := Nil

	RestArea(aAreaSE2)
Return lRet		

//---------------------------------------------------------------------------------------
/*/{Protheus.doc} DefFK3FK4
Função para definir os valores da FK3 e FK4, quando houver retenção da baixa da 
nf na compensação, via modelo FINM020

@param aImpFK3FK4, array, Vetor com os impostos que geraram TX para a NF na compensação
@sample aImpFK3FK4[1] = Código do imposto
       	aImpFK3FK4[2] = Valor do imposto calculado
        aImpFK3FK4[3] = Natureza do imposto
		aImpFK3FK4[4] = IDRET do imposto
        aImpFK3FK4[5] = Imposto retido
		aImpFK3FK4[6] = Base de cálculo do imposto
		aImpFK3FK4[7] = Base de Retenção do imposto
@param cFunName, char, Nome da função de onde a compensação está sendo chamada
@param oSubFK3, object, Objeto do submodelo de gravação da FK3
@param oSubFK4, object, Objeto do submodelo de gravação da FK4
@param cIdFK2, char, Id da baixa
@param aTitCalc, array, Recnos dos títulos que compõem a base de retenção
@return Nil

@author pedro.alencar
@since 23/09/2019
@version 12.1.27
@type Static Function
/*/
//---------------------------------------------------------------------------------------
Static Function DefFK3FK4(aImpFK3FK4 As Array, cFunName As Char, oSubFK3 As Object, oSubFK4 As Object, cIdFK2 As Char, aTitCalc As Array)
	Local nX 		As Numeric
	Local cIdFK4 	As Char
	Local lFKCodRet As Char

	Default aImpFK3FK4 	:= {}
	Default cFunName 	:= FunName()
	Default oSubFK3 	:= Nil
	Default oSubFK4 	:= Nil
	Default cIdFK2 		:= ""
	Default aTitCalc	:= ""

	lFKCodRet		:= (cPaisLoc == "BRA" .and. FK3->(FieldPos("FK3_CODRET")) > 0 .and. FK4->(FieldPos("FK4_CODRET")) > 0)
		
	For nX := 1 To Len(aImpFK3FK4)
		If ( ( aImpFK3FK4[nX][2] > 0 .And. aImpFK3FK4[nX][6] > 0 ) .OR. ( aImpFK3FK4[nX][5] > 0 ) )
			If !oSubFK3:IsEmpty()
				oSubFK3:AddLine()
			EndIf
			oSubFK3:GoLine( oSubFK3:Length() )
			
			oSubFK3:SetValue( "FK3_IDFK3" , FINFKSID('FK3', 'FK3_IDFK3') )
			oSubFK3:SetValue( "FK3_DATA"  , dDataBase )
			oSubFK3:SetValue( "FK3_ORIGEM", cFunName )
			oSubFK3:SetValue( "FK3_IMPOS" , aImpFK3FK4[nX][1] )
			oSubFK3:SetValue( "FK3_RECPAG", "P" )
			oSubFK3:SetValue( "FK3_MOEDA" , "01" )
			oSubFK3:SetValue( "FK3_VALOR" , If( aImpFK3FK4[nX][2] == 0, aImpFK3FK4[nX][5], aImpFK3FK4[nX][2] ) )
			oSubFK3:SetValue( "FK3_NATURE", aImpFK3FK4[nX][3] )
			oSubFK3:SetValue( "FK3_FILORI", SE2->E2_FILORIG )
			oSubFK3:SetValue( "FK3_BASIMP", aImpFK3FK4[nX][6] )
			oSubFK3:SetValue( "FK3_IDORIG", cIdFK2 )
			oSubFK3:SetValue( "FK3_TABORI", "FK2" )
			If __lTemMR
				oSubFK3:SetValue( "FK3_CODFKM", aImpFK3FK4[nX,8] )
				oSubFK3:SetValue( "FK3_CLIFOR", aImpFK3FK4[nX,9] )
				oSubFK3:SetValue( "FK3_LOJA"  , aImpFK3FK4[nX,10] )
				oSubFK3:SetValue( "FK3_CGC"   , aImpFK3FK4[nX,11] )
				oSubFK3:SetValue( "FK3_RAICGC", Substr(aImpFK3FK4[nX,11], 1, 8) )
			EndIf
			If lFKCodRet
				oSubFK3:SetValue( "FK3_CODRET" , aImpFK3FK4[nx,12] )
			EndIf
		EndIf

		If aImpFK3FK4[nX][5] > 0
		
			cIdFK4 := FINFKSID('FK4', 'FK4_IDFK4')
			oSubFK3:SetValue( "FK3_IDRET" , cIdFK4 )
			aImpFK3FK4[nX][4] := cIdFK4
			
			If !oSubFK4:IsEmpty()
				oSubFK4:AddLine()
			EndIf
			oSubFK4:GoLine( oSubFK4:Length() )

			oSubFK4:SetValue( "FK4_IDFK4" , cIdFK4 )
			oSubFK4:SetValue( "FK4_DATA"  , dDataBase )
			oSubFK4:SetValue( "FK4_ORIGEM", cFunName )
			oSubFK4:SetValue( "FK4_IMPOS" , aImpFK3FK4[nX][1] )
			oSubFK4:SetValue( "FK4_RECPAG", "P" )
			oSubFK4:SetValue( "FK4_MOEDA" , "01" )
			oSubFK4:SetValue( "FK4_VALOR" , aImpFK3FK4[nX][5] )
			oSubFK4:SetValue( "FK4_NATURE", aImpFK3FK4[nX][3] )
			oSubFK4:SetValue( "FK4_FILORI", SE2->E2_FILORIG )
			oSubFK4:SetValue( "FK4_BASIMP", aImpFK3FK4[nX][7] )
			If __lTemMR
				oSubFK4:SetValue( "FK4_CODFKM", aImpFK3FK4[nX,8] )
				oSubFK4:SetValue( "FK4_CLIFOR", aImpFK3FK4[nX,9] )
				oSubFK4:SetValue( "FK4_LOJA"  , aImpFK3FK4[nX,10] )
				oSubFK4:SetValue( "FK4_CGC"   , aImpFK3FK4[nX,11] )
				oSubFK4:SetValue( "FK4_RAICGC", Substr(aImpFK3FK4[nX,11], 1, 8) )
			EndIf
			If lFKCodRet
				oSubFK4:SetValue( "FK4_CODRET" , aImpFK3FK4[nx,12] )
			EndIf
		EndIf
	Next nX
	//Gravo o relacionamento de retenção dos títulos que tiveram impostos retidos na baixa atual
	FinFk3BCR(aTitCalc, aImpFK3FK4)
	FZerSFQIr()

Return Nil

/*/{Protheus.doc} F340DicBx
Valida se existe tipo DIC compensado/baixado

@param cFilTit, char, Filial do título
@param cPref, char, Prefixo do título
@param cNroTit, char, Número do título
@param cForn, char, Fornecedor do título
@param cLoja, char, Loja do fornecedor

@return lRet, logical, define se a compensação poderá ser cancelada	

@author Sivaldo Oliveira
@since 22/03/2020
@version 12
@type  Static Function	
/*/
Static Function F340DicBx(cFilTit As Char, cPref As Char, cNroTit As Char, cForn As Char, cLoja As Char)
	Local lRet As Logical
	Local cQry As Char
	Local cTblTmp As Char
	
	Default cFilTit := xFilial("SE2")
	Default cPref := ""
	Default cNroTit := ""
	Default cForn   := ""
	Default cLoja := ""
	//Inicializa variáveis.
	lRet := .F.
	cQry := ""
	cTblTmp := ""
	
	If __oDicBx == Nil		
		cQry := "SELECT E2_FILIAL, E2_PREFIXO, E2_NUM, E2_PARCELA, E2_TIPO, E2_FORNECE, E2_LOJA "
		cQry += "FROM ? SE2 WHERE"
		cQry += "SE2.E2_FILIAL = ? AND SE2.E2_PREFIXO = ? "
		cQry += "AND SE2.E2_NUM = ? AND E2_TIPO = 'DIC' "
		cQry += "AND SE2.E2_FORNECE = ? AND E2_LOJA = ? "
		cQry += "AND ISNULL(SE2.E2_VALOR, 0) > ISNULL(SE2.E2_SALDO, 0) "
		cQry += "AND SE2.D_E_L_E_T_ = ' ' "
		cQry := ChangeQuery(cQry)
		__oDicBx := FWPreparedStatement():New(cQry)
	EndIf
	
	__oDicBx:SetNumeric(1, RetSqlName("SE2"))
	__oDicBx:SetString(2, cFilTit)
	__oDicBx:SetString(3, cPref)
	__oDicBx:SetString(4, cNroTit)
	__oDicBx:SetString(5, cForn)
	__oDicBx:SetString(6, cLoja)
	
	cQry := __oDicBx:GetFixQuery()
	cTblTmp := MpSysOpenQuery(cQry)	
	lRet := (cTblTmp)->(!Eof())	
	
Return lRet

//-------------------------------------
/*/{Protheus.doc}F340CanDic
Valida se existe DIC que já foi usado para recomposição de base.

@param cDocumen, char, Chave do título DIC
@return lRet, logical, define se a compensação com o 
título DIC pode ser cancelada

@author Sivaldo Oliveira
@since  23/03/2020
@version 12
@type  Static Function	
/*/
//-------------------------------------
Static Function F340CanDic(cDocumen As Char) As logical
	Local lRet As Logical
	Local cQry As Character
	Local cTblTmp As Character
	Local cTblNF As Character
	
	Default cDocumen := ""
	
	//Inicializa variáveis
	lRet := .T.
	cQry := ""
	cTblTmp := ""	
	cTblNF := ""		
	
	If !Empty(cDocumen) .And. (__lPccBaix .Or. __lIrfBaix .Or. __lIssBaix)
		cDocumen := PadR(cDocumen, TamSx3("E5_DOCUMEN")[1], " ")		
		
		If __oCanDic == Nil			
			cQry := "SELECT E5_FILIAL, E5_PREFIXO, E5_NUMERO, E5_PARCELA, E5_TIPO, E5_CLIFOR, E5_LOJA, E5_SEQ"
			cQry += "FROM ? SE5 JOIN ? SE2 "
			cQry += "ON (SE5.E5_FILORIG = SE2.E2_FILORIG "
			cQry += "AND SE5.E5_PREFIXO = SE2.E2_PREFIXO "
			cQry += "AND SE5.E5_NUMERO = SE2.E2_NUM "
			cQry += "AND SE5.E5_PARCELA = SE2.E2_PARCELA "
			cQry += "AND SE5.E5_TIPO = SE2.E2_TIPO "
			cQry += "AND SE5.E5_FORNECE = SE2.E2_FORNECE "
			cQry += "AND SE5.E5_LOJA = SE2.E2_LOJA) WHERE "			
			cQry += "SE5.E5_DOCUMEN = ? "			
			cQry += "AND (E2_SALDO != E2_VALOR  OR (SE2.E2_NUMBOR <> ' ' "
			cQry += "AND (SE2.E2_PRETPIS = '4' OR SE2.E2_PRETCOF = '4' "
			cQry += "OR SE2.E2_PRETCSL = '4' OR SE2.E2_PRETIRF = '4'))) "			
			cQry += "AND SE5.E5_RECPAG = 'P' AND SE5.E5_TIPODOC IN ('BA', 'CP') "
			cQry += "AND SE5.E5_MOTBX = 'CMP' AND SE5.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') "
			cQry += "AND SE5.E5_DATA <= '" + DTOS(dDataBase) + "' "
			cQry += "AND SE5.D_E_L_E_T_ = ' ' AND SE2.D_E_L_E_T_ = ' ' "			
			//movimentos de estorno
			cQry += "AND SE5.E5_SEQ NOT IN ( "
			cQry += "SELECT ESSE5.E5_SEQ FROM ? ESSE5 JOIN ? ESSE2 " 
			cQry += "ON (ESSE5.E5_FILORIG = ESSE2.E2_FILORIG "
			cQry += "AND ESSE5.E5_PREFIXO = ESSE2.E2_PREFIXO "
			cQry += "AND ESSE5.E5_NUMERO = ESSE2.E2_NUM "
			cQry += "AND ESSE5.E5_PARCELA = ESSE2.E2_PARCELA "
			cQry += "AND ESSE5.E5_TIPO = ESSE2.E2_TIPO "
			cQry += "AND ESSE5.E5_FORNECE = ESSE2.E2_FORNECE "
			cQry += "AND ESSE5.E5_LOJA = ESSE2.E2_LOJA) WHERE "
			cQry += "ESSE5.E5_DOCUMEN = ? "
			cQry += "AND ESSE5.E5_RECPAG = 'R' AND ESSE5.E5_TIPODOC = 'ES' "
			cQry += "AND ESSE5.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') "
			cQry += "AND ESSE5.E5_DATA <= '" + DTOS(dDataBase) + "' AND ESSE5.E5_MOTBX = 'CMP' "
			cQry += "AND ESSE5.D_E_L_E_T_ = ' ' AND ESSE2.D_E_L_E_T_ = ' ') "			
			cQry := ChangeQuery(cQry)
			__oCanDic := FWPreparedStatement():New(cQry)
		EndIf		
		
		__oCanDic:SetNumeric(1, RetSqlName("SE5"))
		__oCanDic:SetNumeric(2, RetSqlName("SE2"))
		__oCanDic:SetString(3,  cDocumen)
		__oCanDic:SetNumeric(4, RetSqlName("SE5"))
		__oCanDic:SetNumeric(5, RetSqlName("SE2"))
		__oCanDic:SetString(6,  cDocumen)
		
		cQry := __oCanDic:GetFixQuery()
		cTblTmp := MpSysOpenQuery(cQry)
		cQry := ""
		
		While (cTblTmp)->(!Eof())
			If __oMovNF == Nil
				cQry := "SELECT SE5.E5_SEQ FROM ? SE5 WHERE "
				cQry += "SE5.E5_FILIAL = ? AND SE5.E5_PREFIXO = ? AND SE5.E5_NUMERO = ? "
				cQry += "AND SE5.E5_PARCELA = ? AND SE5.E5_TIPO = ? AND SE5.E5_CLIFOR = ? AND SE5.E5_LOJA = ? "
				cQry += "AND SE5.D_E_L_E_T_ = ' ' "
				cQry += "AND SE5.E5_SEQ > ? AND SE5.E5_RECPAG = 'P' "
				cQry += "AND (ISNULL(SE5.E5_VRETPIS, 0) > 0 OR ISNULL(SE5.E5_VRETCOF, 0) > 0 OR ISNULL(SE5.E5_VRETCSL, 0) > 0 "
				cQry += "OR ISNULL(SE5.E5_VRETIRF, 0) > 0 OR ISNULL(SE5.E5_VRETISS, 0) > 0) " 
				cQry := ChangeQuery(cQry)
				__oMovNF := FWPreparedStatement():New(cQry)			
			EndIf			
			
			__oMovNF:SetNumeric(1, RetSqlName("SE5"))
			__oMovNF:SetString(2,  (cTblTmp)->E5_FILIAL)
			__oMovNF:SetString(3,  (cTblTmp)->E5_PREFIXO)
			__oMovNF:SetString(4,  (cTblTmp)->E5_NUMERO)
			__oMovNF:SetString(5,  (cTblTmp)->E5_PARCELA)
			__oMovNF:SetString(6,  (cTblTmp)->E5_TIPO)
			__oMovNF:SetString(7,  (cTblTmp)->E5_CLIFOR)
			__oMovNF:SetString(8,  (cTblTmp)->E5_LOJA)
			__oMovNF:SetString(9,  (cTblTmp)->E5_SEQ)
			
			cQry := __oMovNF:GetFixQuery()
			cTblNF := MpSysOpenQuery(cQry)			
			
			If (cTblNF)->(!Eof())
				lRet := MsgYesNo( STR0122 + RTrim(cDocumen) + STR0123, STR0018 ) //"O valor compensado no título do tipo DIC: " ## " foi usado para recomposição de base de impostos. Esses impostos não serão recalculados. Deseja continuar?" ## "Atenção"
				Exit
			EndIf
			
			(cTblNF)->(DbCloseArea())
			cTblNF := ""
			(cTblTmp)->(DbSkip())			
		EndDo
		
		If !Empty(cTblNF) 
			(cTblNF)->(DbCloseArea())
		EndIf
		
	EndIf
Return lRet


//-------------------------------------
/*/{Protheus.doc}F340CmpDIC
Gera DIC na compensação.

@param aDicCMP, array, Array contendo
os dados para geracao do DIC.

@author  vinicius.prado
@since   29/09/2020
@version 12.1.27
@type    Static Function	
/*/
//-------------------------------------
Static Function F340CmpDIC(aDicCMP As Array)

	Local nX 		As Numeric
	Local nI 		As Numeric
	Local nTam 		As Numeric
	Local nRecPA 	As Numeric
	Local nVlrDic 	As Numeric
	Local cSeqDic	As Character
	Local cAdian	As Character
	Local cFilorig	As Character
	Local cFornece	As Character
	Local aAreaSE2 	As Array
	Local aTitDIC	As Array
	Local nTotForn	As Numeric
	Local nPos		As Numeric

	Default aDicCMP := {}

	nX 		 := 0
	nI		 := 0
	nTam 	 := Len(aDicCMP)
	nVlrDic  :=	0
	nRecPA 	 := 0
	cSeqDic	 := ""
	cAdian	 := ""
	cFilorig := ""
	cFornece := ""
	nTotForn := 0
	nPos	 := 0
	aTitDIC  := {}
	
	
	aAreaSE2 := SE2->(GetArea())

	If nTam > 0
		If __lPaBruto
			aTitDIC := aDicCMP
		Else
			For nX := 1 To nTam
				nRecPA 	 := aDicCMP[nX][1]
				nVlrDic  := aDicCMP[nX][2]
				cAdian	 := aDicCMP[nX][3]
				cFilorig := aDicCMP[nX][4]
				cFornece := aDicCMP[nX][5]
				cSeqDic	 := aDicCMP[nX][6]
				
				If !Empty(aTitDIC)
					nPos := ASCAN(aTitDIC, { |x| x[5] == cFornece })

					If nPos > 0
						aTitDIC[nPos][1] := nRecPA
						aTitDIC[nPos][2] += nVlrDic
						aTitDIC[nPos][3] := cAdian
						aTitDIC[nPos][4] := cFilorig
						aTitDIC[nPos][6] := cSeqDic
					Else
						AAdd( aTitDIC, {nRecPA, nVlrDic, cAdian, cFilorig, cFornece, cSeqDic} )
					EndIf
				Else
					AAdd( aTitDIC, {nRecPA, nVlrDic, cAdian, cFilorig, cFornece, cSeqDic} )
				EndIf
			Next nX
		EndIf

		For nI := 1 To Len(aTitDIC)
			F340GerDic(aTitDIC[nI][1], aTitDIC[nI][2], aTitDIC[nI][3], aTitDIC[nI][4]) //RecPA, nVlrDic, cAdian, cFilorig

			For nX := 1 To Len(__aDIC)
				SE2->(DbGoto(__aDIC[nX]))
				RecLock("SE2")
				SE2->E2_SEQBX := aTitDIC[nI][6]
				SE2->(MsUnlock())	
			Next nX

			__aDIC	  := {}
		Next nI

		aDicCMP   := {}
	EndIf

	RestArea(aAreaSE2)
Return Nil


//-------------------------------------
/*/{Protheus.doc}F340EstDIC

Gera DIC no estorno/exclusao.

@param nRecPart, numeric, recno de partida da cmp.
@param nRecDest, numeric, recno de destino da cmp.
@param cTblTmp, char, alias com compensacoes a serem canceladas.
@return aDicCMP, array, array contendo os dados para geracao
do DIC durante o estorno/exlusao.

@author  vinicius.prado
@since   29/09/2020
@version 12.1.27
@type    Static Function		
/*/
//-------------------------------------
Static Function F340EstDIC(nRecPart As Numeric, nRecDest As Numeric, cTblTmp As Character) As Array

	Local nValDic  As Numeric
	Local nRecPA   As Numeric
	Local nVlMovPA As Numeric
	Local cFilSE5  As Character
	Local cAdian   As Character
	Local nRecSE2  As Numeric
	Local cSeqDic  As Character
	Local lGeraDic As Logical
	Local aAreaAnt As Array
	Local aDicCMP  As Array
	Local nRecNf   As Numeric
	Local cTmpDIC  As Character
	Local lRet	   As Logical
	Local nDic	   As Numeric
	Local cFornPA  As Character

	nValDic  := 0
	nRecPA   := 0
	nVlMovPA := 0
	cFilSE5  := ""
	cAdian   := ""
	nRecSE2  := 0
	cSeqDic  := ""
	lGeraDic := .F.
	aAreaAnt := {}
	aDicCMP  := {}
	nRecNf	 := 0
	cTmpDIC  := ""
	lRet	 := .F.
	nDic	 := 0
	cFornPA	 := ""
	
	Default nRecPart := 0
	Default nRecDest := 0
	Default cTblTmp	 := ""

	aAreaAnt := SE5->(GetArea())

	//Acha o recno da movimentacao do PA e da NF
	SE5->(dbGoTo(nRecPart))

	nRecNf := IIf(!SE5->E5_TIPO $ MVPAGANT+"|"+MV_CPNEG, nRecPart, nRecDest)
	nRecPA := IIf(SE5->E5_TIPO $ MVPAGANT+"|"+MV_CPNEG, nRecPart, nRecDest)
	
	If SE5->(RECNO()) == nRecNf
		SE5->(dbGoTo(nRecPA))
		cTmpDIC := cTblTmp
	Else
		SE5->(dbGoTo(nRecPA))
		cTmpDIC := F340TmpEST(SE5->E5_DOCUMEN)
	EndIf

	cFornPA := SE5->E5_FORNECE + SE5->E5_LOJA

	If !Empty(cTmpDIC) .And. SE5->E5_TIPO <> "DIC"
		(cTmpDIC)->(dbGoTop())
		While (cTmpDIC)->(!Eof())
			SE5->(dbGoto((cTmpDIC)->RECNO))

			//Fornecedores Diferentes
			If (SE5->E5_FORNECE + SE5->E5_LOJA) <> cFornPA
				(cTmpDIC)->(dbSkip())
				Loop
			EndIf
				
			If nRecPA == (cTmpDIC)->(RECNO)
				SE2->(dbGoto(nRecSE2))
				If !Empty(nDic)
					lGeraDic := .F.
				Endif

				Exit
			EndIf

			lRet 	 := .F.
			nDic	 := 0
			nVlMovPA := (cTmpDIC)->VALOR
			cFilSE5  := SE5->E5_FILORIG

			//Estorno de compensacao com DIC nao gerar DIC
			If SE5->E5_TIPO == "DIC"
				nDic := SE5->(RECNO())
			Endif

			If SE5->(dbSeek(xFilial("SE5",cFilSE5)+AllTRim((cTmpDIC)->DOCUMEN)+SE5->E5_SEQ))

				nRecDic := F340VerDIC((cTmpDIC)->RECNO)
				
				If !Empty(nRecDic)
					SE2->(dbGoTo(nRecDic))

					If SE2->E2_VALOR == (nValDic + F340ValDIC(SE5->(RECNO())))
						nValDic := 0
						lGeraDic := .F.
					Endif 
				Else
					If nVlMovPA > SE5->E5_VALOR
						nRecNf := SE5->(RECNO())
						nValDic += F340ValDIC(nRecNf)
						If nValDic > 0
							lGeraDic := .T.
							lRet := .T.
						EndIf
					EndIf
				EndIf
			Else	
				(cTmpDIC)->(dbSkip())
				Loop
			EndIf

			If lRet
				SE5->(dbGoto((cTmpDIC)->RECNO))
				If SE2->(dbSeek(xFilial("SE5",SE5->E5_FILORIG)+SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ)))
					nRecSE2 := SE2->(RECNO())
					cSeqDic := SE5->E5_SEQ
				EndIf
			EndIF
			
			(cTmpDIC)->(dbSkip())
		EndDo
	EndIF

	If lGeraDic
		SE2->(dbGoto(nRecSE2))
		cAdian  := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)

		Aadd(aDicCMP, nRecSE2)
		Aadd(aDicCMP, nValDic)
		Aadd(aDicCMP, cAdian)
		Aadd(aDicCMP, SE2->E2_FILORIG)
		Aadd(aDicCMP, SE2->E2_FORNECE + SE2->E2_LOJA)
		Aadd(aDicCMP, cSeqDic)
	EndIf

	If !Empty(cTmpDIC)
		If !cTmpDIC == cTblTmp
			(cTmpDIC)->(DbCloseArea())
		EndIF
	Endif
	
	RestArea(aAreaAnt)

Return aDicCMP


//-------------------------------------
/*/{Protheus.doc}F340VerDIC
Verifica se o PA possui DIC.

@param nRecPA, numeric, recno do PA a ser verificado.
@return nRecDIC, numeric, recno do DIC existente para
o PA (caso nao exista retorna 0).

@author  vinicius.prado
@since   29/09/2020
@version 12.1.27
@type    Static Function	
/*/
//-------------------------------------
Static Function F340VerDIC(nRecPA As Numeric) As Numeric

	Local cFilSE5	As Character
	Local cPrefixo	As Character
	Local cNumero	As Character
	Local cNaturez	As Character
	Local cFornece	As Character
	Local cLoja		As Character
	Local cSeqBx	As Character
	Local nRecDIC	As Numeric
	Local cQry		As Character
	Local cOrigem	As Character
	Local aAreaAnt	As Array
	Local cTblDic	As Character

	Default nRecPA := SE5->(RECNO())
	aAreaAnt := SE5->(GetArea())
	SE5->(dbGoTo(nRecPA))
	
	cFilSE5  := SE5->E5_FILORIG
	cPrefixo := SE5->E5_PREFIXO
	cNumero  := SE5->E5_NUMERO
	cNaturez := SE5->E5_NATUREZ
	cFornece := SE5->E5_FORNECE
	cLoja	 := SE5->E5_LOJA
	cSeqBx   := SE5->E5_SEQ
	nRecDIC	 := 0
	cQry	 := ""
	cTblDic	 := ""

	If __VerDic == Nil 
		cOrigem  := PadR("FINA340", TamSx3("E2_ORIGEM")[1], "")
		
		cQry := "SELECT R_E_C_N_O_ RECNO FROM ? WHERE "
		cQry += "E2_FILIAL = ? AND E2_PREFIXO = ? "
		cQry += "AND E2_NUM = ? AND E2_TIPO IN (?) "
		cQry += "AND E2_NATUREZ = ? AND E2_FORNECE = ? "
		cQry += "AND E2_LOJA = ? AND E2_SEQBX = ? "  
		cQry += "AND E2_ORIGEM = '" + cOrigem + "' "
		cQry += "AND D_E_L_E_T_ = ' '"
		cQry := ChangeQuery(cQry)
		__VerDic := FWPreparedStatement():New(cQry)
	EndIf
	
	__VerDic:SetNumeric(1, RetSqlName("SE2"))
	__VerDic:SetString(2, xFilial("SE2", cFilSE5))
	__VerDic:SetString(3, cPrefixo)
	__VerDic:SetString(4, cNumero)
	__VerDic:SetIn(5, {'DIC','NDF'})
	__VerDic:SetString(6, cNaturez)
	__VerDic:SetString(7, cFornece)
	__VerDic:SetString(8, cLoja)
	__VerDic:SetString(9, cSeqBx)
	cQry := __VerDic:GetFixQuery()
	cTblDic := MpSysOpenQuery(cQry)
	
	If (cTblDic)->(!Eof())
		nRecDIC := (cTblDic)->RECNO 
	EndIf
	
	(cTblDic)->(DbCloseArea())

	RestArea(aAreaAnt)

Return nRecDIC


//-------------------------------------
/*/{Protheus.doc}F340ValDIC
Verifica se a compensacao geraria DIC 
e retorna o seu valor caso houver.

@param nRecNF, numeric, recno do NF a ser verificada.
@return nValDIC, numeric, retorna o valor do DIC 
calculado para a compensacao (caso nao exista retorna 0).

@author  vinicius.prado
@since   29/09/2020
@version 12.1.27
@type    Static Function		
/*/
//-------------------------------------
Static Function F340ValDIC(nRecNF As Numeric) As Numeric

	Local cFilSE5	As Character
	Local cPrefixo	As Character
	Local cNumero	As Character
	Local cParcela	As Character
	Local cTipo		As Character
	Local cFornece	As Character
	Local cLoja		As Character
	Local cSeqBx	As Character
	Local nValDIC	As Numeric
	Local cQry		As Character
	Local aAreaAnt	As Array
	Local cTbVlDic	As Character

	Default nRecNF := SE5->(RECNO())
	aAreaAnt := SE5->(GetArea())
	SE5->(dbGoTo(nRecNF))
	
	cFilSE5  := SE5->E5_FILORIG
	cPrefixo := SE5->E5_PREFIXO
	cNumero  := SE5->E5_NUMERO
	cParcela := SE5->E5_PARCELA
	cTipo	 := SE5->E5_TIPO
	cFornece := SE5->E5_FORNECE
	cLoja	 := SE5->E5_LOJA
	cSeqBx   := SE5->E5_SEQ
	nValDIC	 := 0
	cQry	 := ""
	cTbVlDic := ""

	If __ValDic == Nil 
		
		cQry := "SELECT (E5_VRETPIS+E5_VRETCOF+E5_VRETCSL+E5_VRETIRF+E5_VRETIRF) TOTIMP "
		cQry += "FROM ? SE5PAR "
		cQry += "WHERE E5_VALOR < ( "
		cQry += 		"SELECT E5_VALOR "
		cQry += 		"FROM ? SE5DES "
		cQry += 		"WHERE (E5_VRETPIS+E5_VRETCOF+E5_VRETCSL+E5_VRETIRF+E5_VRETIRF) = 0 "  
		cQry +=  		"AND SE5PAR.E5_SEQ = SE5DES.E5_SEQ "
		cQry +=  		"AND SE5PAR.E5_FILIAL = SE5DES.E5_FILIAL "
		cQry +=  		"AND  (SE5PAR.E5_PREFIXO || "
		cQry +=  		      "SE5PAR.E5_NUMERO  || "
		cQry +=  		      "SE5PAR.E5_PARCELA || "
		cQry +=  		      "SE5PAR.E5_TIPO    || "
		cQry += 		      "SE5PAR.E5_FORNECE || "
		cQry += 		      "SE5PAR.E5_LOJA ) = SE5DES.E5_DOCUMEN "
		cQry +=  		"AND SE5DES.E5_TIPODOC <> 'ES' "
		cQry +=  		"AND  D_E_L_E_T_ = ' ') "
		cQry += "AND SE5PAR.E5_SEQ NOT IN (  "
		cQry += 		"SELECT EST.E5_SEQ FROM ? EST "
		cQry += 		"WHERE EST.E5_FILIAL  = ? "
		cQry += 		"AND EST.E5_PREFIXO = ? "
		cQry += 		"AND EST.E5_NUMERO  = ? "
		cQry += 		"AND EST.E5_PARCELA = ? "
		cQry += 		"AND EST.E5_TIPO    = ? "
		cQry += 		"AND EST.E5_CLIFOR  = ? "
		cQry += 		"AND EST.E5_LOJA    = ? "
		cQry += 		"AND EST.E5_SEQ 	= ? "
		cQry += 		"AND EST.E5_RECPAG = 'R' AND EST.E5_TIPODOC = 'ES' "
		cQry += 		"AND EST.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') ""
		cQry += 		"AND EST.E5_MOTBX = 'CMP' AND EST.D_E_L_E_T_ = ' ') "
		cQry += "AND SE5PAR.E5_FILIAL  = ? "
		cQry += "AND SE5PAR.E5_PREFIXO = ? "
		cQry += "AND SE5PAR.E5_NUMERO  = ? "
		cQry += "AND SE5PAR.E5_PARCELA = ? "
		cQry += "AND SE5PAR.E5_TIPO    = ? "
		cQry += "AND SE5PAR.E5_CLIFOR  = ? "
		cQry += "AND SE5PAR.E5_LOJA    = ? "
		cQry += "AND SE5PAR.E5_SEQ 	  = ? "
		cQry += "AND SE5PAR.E5_TIPODOC = 'CP' "
		cQry += "AND D_E_L_E_T_ = ' ' "

		cQry := ChangeQuery(cQry)
		__ValDic := FWPreparedStatement():New(cQry)
	EndIf
	
	__ValDic:SetNumeric(1, RetSqlName("SE5"))
	__ValDic:SetNumeric(2, RetSqlName("SE5"))
	__ValDic:SetNumeric(3, RetSqlName("SE5"))
	__ValDic:SetString(4, xFilial("SE5", cFilSE5))
	__ValDic:SetString(5, cPrefixo)
	__ValDic:SetString(6, cNumero)
	__ValDic:SetString(7, cParcela)
	__ValDic:SetString(8, cTipo)
	__ValDic:SetString(9, cFornece)
	__ValDic:SetString(10, cLoja)
	__ValDic:SetString(11, cSeqBx)
	__ValDic:SetString(12, xFilial("SE5", cFilSE5))
	__ValDic:SetString(13, cPrefixo)
	__ValDic:SetString(14, cNumero)
	__ValDic:SetString(15, cParcela)
	__ValDic:SetString(16, cTipo)
	__ValDic:SetString(17, cFornece)
	__ValDic:SetString(18, cLoja)
	__ValDic:SetString(19, cSeqBx)

	cQry := __ValDic:GetFixQuery()
	cTbVlDic := MpSysOpenQuery(cQry)
	
	If (cTbVlDic)->(!Eof())
		nValDIC := (cTbVlDic)->TOTIMP 
	EndIf
	
	(cTbVlDic)->(DbCloseArea())

	RestArea(aAreaAnt)

Return nValDIC


//-------------------------------------
/*/{Protheus.doc}F340TmpEST
Cria tabela temporaria com as compensacoes
realizadas para tratamento no estorno/exclusao.

@param cDocumen, char, chave a ser verificada.
@return cTmpEst, char, alias contendo as 
compensacoes realizadas.

@author  vinicius.prado
@since   29/09/2020
@version 12.1.27
@type    Static Function		
/*/
//-------------------------------------
Static Function F340TmpEST(cDocumen As Character) As Character

	Local cQry		As Character
	Local aAreaAnt	As Array
	Local cTmpEst	As Character

	Default cDocumen := SE5->E5_DOCUMEN
	aAreaAnt := SE5->(GetArea())
	
	cQry	 := ""
	cTmpEst  := ""

	If __TmpNF == Nil 
		cQry := "SELECT SE5.E5_DOCUMEN DOCUMEN, SE5.E5_VALOR VALOR, SE5.E5_SEQ SEQ, SE5.R_E_C_N_O_ RECNO, "
		cQry += "(SE5.E5_VRETPIS+SE5.E5_VRETCOF+SE5.E5_VRETCSL+SE5.E5_VRETIRF+SE5.E5_VRETISS) TOTRET FROM ? SE5 "
		cQry += "WHERE SE5.E5_DOCUMEN = ? "
		cQry += "AND SE5.E5_RECPAG = 'P' "
		cQry += "AND SE5.E5_TIPODOC IN ('BA', 'CP') AND SE5.E5_MOTBX = 'CMP' " 
		cQry += "AND SE5.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') "
		cQry += "AND SE5.E5_DATA <= '" + DTOS(dDataBase) + "' "
		cQry += "AND SE5.E5_KEY = '" + __cE5_KEY + "' AND SE5.D_E_L_E_T_ = ' ' AND SE5.E5_SEQ NOT IN ( "
		cQry += "SELECT EST.E5_SEQ FROM " + RetSqlName("SE5") + " EST "
		cQry += "WHERE EST.E5_DOCUMEN = ? "
		cQry += "AND EST.E5_RECPAG = 'R' AND EST.E5_TIPODOC = 'ES' "
		cQry += "AND EST.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') "
		cQry += "AND EST.E5_DATA <= '" + DTOS(dDataBase) + "' "
		cQry += "AND EST.E5_KEY = '" + __cE5_KEY +"' AND EST.E5_MOTBX = 'CMP' AND EST.D_E_L_E_T_ = ' ') "

		cQry := ChangeQuery(cQry)
		__TmpNF := FWPreparedStatement():New(cQry)
	EndIf
	
	__TmpNF:SetNumeric(1, RetSqlName("SE5"))
	__TmpNF:SetString(2, cDocumen)
	__TmpNF:SetString(3, cDocumen)

	cQry := __TmpNF:GetFixQuery()
	cTmpEst := MpSysOpenQuery(cQry)
	
	If (cTmpEst)->(Eof())
		(cTmpEst)->(DbCloseArea())
		cTmpEst := ""
	EndIf
	
	RestArea(aAreaAnt)

Return cTmpEst


//-------------------------------------
/*/{Protheus.doc}CmpMaxSeq
Retorna a ultima sequencia da compensacao
com base no campo E5_DOCUMEN.

@param cDocumen, char, chave a ser verificada.
@return cSeqMax, char, ultima sequencia 
referente as compensacoes realizadas.

@author  vinicius.prado
@since   29/09/2020
@version 12.1.27
@type    Static Function	
/*/
//-------------------------------------
Static Function CmpMaxSeq(cDocumen As Character) As Character

	Local cSeqMax	As Character
	Local cQry		As Character
	Local aAreaAnt	As Array
	Local cTbSeqMax	As Character

	Default cDocumen := SE5->E5_DOCUMEN
	aAreaAnt := SE5->(GetArea())
	
	cSeqMax   := ""
	cQry	  := ""
	cTbSeqMax := ""

	If __MaxSeq == Nil 
		cQry := "SELECT MAX(E5_SEQ) MAXSEQ FROM ? "
		cQry += "WHERE "
		cQry += "E5_DOCUMEN = ? "
		cQry += "AND 0 = (  "
		cQry += 	"SELECT COUNT(EST.E5_SEQ) FROM ? EST "
		cQry += 	"WHERE EST.E5_DOCUMEN = ? "
		cQry += 	"AND EST.E5_RECPAG = 'R' AND EST.E5_TIPODOC = 'ES' "
		cQry += 	"AND EST.E5_ORIGEM NOT IN ('MATA103 ', 'MATA103') ""
		cQry += 	"AND EST.E5_MOTBX = 'CMP' AND EST.D_E_L_E_T_ = ' ') "
		cQry += "AND D_E_L_E_T_ = ' ' "
		cQry := ChangeQuery(cQry)
		__MaxSeq := FWPreparedStatement():New(cQry)
	EndIf
	
	__MaxSeq:SetNumeric(1, RetSqlName("SE5"))
	__MaxSeq:SetString(2, cDocumen)
	__MaxSeq:SetNumeric(3, RetSqlName("SE5"))
	__MaxSeq:SetString(4, cDocumen)

	cQry := __MaxSeq:GetFixQuery()
	cTbSeqMax := MpSysOpenQuery(cQry)
	
	If (cTbSeqMax)->(!Eof())
		cSeqMax := (cTbSeqMax)->MAXSEQ
	EndIf
	
	(cTbSeqMax)->(DbCloseArea())

	RestArea(aAreaAnt)

Return cSeqMax


//-------------------------------------
/*/{Protheus.doc}F340LstFor
Funcao que retorna a ultima sequencia 
das compensacao (para cada fornecedor) durante
o estorno/exclusao.

@param cTmpEst, char, alias contendo as compensacoes.
@param cMarca, char, marca de selecao das compensacoes.
@return aLastFor, array, Array contendo a ultima sequencia
de cada compensacao por fornecedor.

@author  vinicius.prado
@since   29/09/2020
@version 12.1.27
@type    Static Function	
/*/
//-------------------------------------
Static Function F340LstFor(cTmpEst As Character, cMarca As Character) As Array

	Local cForn    As Character
	Local cSeq	   As Character
	Local nPos     As Numeric
	Local aLastFor As Array
	Local aAreaTmp As Array
	Local aAreaSE5 As Array

	cForn    := ""
	cSeq	 := "" 
	nPos     := 0
	aLastFor := {}
	aAreaTmp := (cTmpEst)->(GetArea())
	aAreaSE5 := SE5->(GetArea())

	Default cTmpEst := Alias()
	Default cMarca	:= ""

	While (cTmpEst)->OK == cMarca .And. (cTmpEst)->(!Eof())

		SE5->(dbGoTo((cTmpEst)->RECNO))

		cForn := SE5->E5_CLIFOR + SE5->E5_LOJA
		cSeq  := SE5->E5_SEQ

		If !Empty(aLastFor)
			nPos := ASCAN(aLastFor, { |x| x[1] == cForn })

			If nPos > 0
				If cSeq > aLastFor[nPos][2]
					aLastFor[nPos][1] := cForn
					aLastFor[nPos][2] := cSeq
				EndIf
			Else
				AAdd( aLastFor, {cForn, cSeq} )
			EndIf
		Else
			AAdd( aLastFor, {cForn, cSeq} )
		EndIf

		(cTmpEst)->(dbSkip())	
	Enddo

	RestArea(aAreaSE5)
	RestArea(aAreaTmp)

Return aLastFor

//------------------------------
/*/{Protheus.doc}ProtCfgAdt
Retorna a configuração de compartilhamento das tabelas de adiantamento

@param 
@return aRet, Array
			[1,1]=Empresa - Modo de compartilhamento FIE
			[1,2]=Unidade de Negócio - Modo de compartilhamento FIE 
			[1,3]=Filial - Modo de compartilhamento FIE
			[1,4]Existe Indice 4-Cliente na tabela FIE
			[1,5]Existe Indice 5-fornecedor na tabela FIE
			[2,1]=Empresa - Modo de compartilhamento FR3
			[2,2]=Unidade de Negócio - Modo de compartilhamento FR3
			[2,3]=Filial - Modo de compartilhamento FR3
			[2,4]Existe Indice 8-Cliente na tabela FR3
			[2,5]Existe Indice 9-Fornecedor na tabela FR3
@author Francisco Oliveira
@since  02/02/2021
@version 12
@type static function
/*/
//------------------------------

Static Function ProtCfgAdt() As Array 

Local aRet As Array 

aRet := {;
		{FwModeAccess('FIE',1),;
		FwModeAccess('FIE',2),;
		FwModeAccess('FIE',3),;
		FWSIXUtil():ExistIndex( 'FIE', '4' ),;
		FWSIXUtil():ExistIndex( 'FIE', '5' )},;
		{FwModeAccess('FR3',1),;
		FwModeAccess('FR3',2),;
		FwModeAccess('FR3',3),;
		FWSIXUtil():ExistIndex( 'FR3' , '8' ),;
		FWSIXUtil():ExistIndex( 'FR3' , '9' )},;
		{FwModeAccess('SE1',3),;
		FwModeAccess('SE2',3)} }
Return (aRet)



/*/{Protheus.doc} Fa340TitEx
Funcao responsavel por retornar a funcao FINA340 externamente devido a filtros utlizados por localizacao 
@type function
@version  P12
@author eduardo.Flima
@since 5/25/2021
@param cNumCont, character, contract Number Optional
@return aTitulos_array, list with bills avaliable for compensation
/*/
Function Fa340TitEx(cNumCont)
	Local aTitulos as Array

	Default cNumCont := ""

	aTitulos := {}
	aTitulos := Fa340Tit(cNumCont)

Return aTitulos




//-------------------------------------
/*/{Protheus.doc}F340ImpBxC
Retorna se o título, ao ser compensado, gerou impostos e esses impostos estão baixados, 
impedindo o cancelamento da compensação.

@param nE5Rec, numeric, SE5->RecNo() do título analisado
@return , lRet, Tem imposto com baixa que impede o cancelamento da compensação?

@author  guilherme.sordi
@since   19/07/2021
@version 12.1.27
@type    Static Function	
/*/
//-------------------------------------
Static function F340ImpBxC (nE5Rec as numeric) as logical
	local lTemBx as Logical
	local lIsIrBx as Logical
	local lTemPCCBX as Logical
	local lTemISSBX as Logical
	local cChaveSE5 as Character
	local cChaveSE2 as Character
	local nLenDoc as numeric
	local aAreaSe5 as array
	local aAreaSe2 as array

	aAreaSe5  := SE5->(GetArea())
	aAreaSe2  := SE2->(GetArea())
	lTemBx := .F.
	aImp := {}
	cChaveSE5 := ''
	cChaveSE2 := ''
	nLenDoc := 0
	
	SE5->(DbGoTo(nE5Rec))

	lIsIrBx	  := Fa080IrBx(,.F.)
	lTemPCCBX := Fa080PCCBx(,.F.)
	lTemISSBX := Fa080ISSBx(,.F.) 	
	lTemBx    := (lIsIrBx .or. lTemPCCBX .or. lTemISSBX) 

	if lTemBx 
		SE2->(restArea(aAreaSe2))
		SE5->(restArea(aAreaSe5))
		return lTemBx
	endif

	//verifica a outra perna da compensação
	nLenDoc := TamSx3("E5_PREFIXO")[1] + TamSx3("E5_NUMERO")[1] + TamSx3("E5_PARCELA")[1] +;
		TamSx3("E5_TIPO")[1] + TamSx3("E5_CLIFOR")[1] + TamSx3("E5_LOJA")[1]
	cChaveSE5 := xFilial("SE5") + left(SE5->E5_DOCUMEN,nLenDoc) + SE5->E5_SEQ
	cChaveSE2 := xFilial("SE2",SE5->E5_FILORIG) + SE5->E5_PREFIXO + SE5->E5_NUMERO + SE5->E5_PARCELA + SE5->E5_TIPO + SE5->E5_CLIFOR + SE5->E5_LOJA

	SE5->(DbSetOrder(7)) //E5_FILIAL+E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ	
	SE5->(DbSeek(cChaveSE5))
	SE2->(DbSetOrder(1)) //E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA                                                                                               
	SE2->(DbSeek(cChaveSE2))

	lIsIrBx	:= Fa080IrBx(,.F.)
	lTemPCCBX := Fa080PCCBx(,.F.)
	lTemISSBX := Fa080ISSBx(,.F.) 
	lTemBx := (lIsIrBx .or. lTemPCCBX .or. lTemISSBX) 

	SE2->(restArea(aAreaSe2))
	SE5->(restArea(aAreaSe5))
return lTemBx


//-------------------------------------------------------------------------
/*/{Protheus.doc} F340CRatIR
Função para criar o objeto __oRatIRF

@author pequim
@since  17/02/2022
@version 12.1.33
@param 
/*/
//-------------------------------------------------------------------------
Function F340CRatIR() As Object

Local cCdRetIRRt	As Character

cCdRetIRRt    := SuperGetMv("MV_RETIRRT",.T.,"3208")

If __lFinXRatIR == NIL
	__lFinXRatIR := FindFunction("FinXRatIR")
Endif 

F340LRatIR(.F.)

If Alltrim(SE2->E2_CODRET) $ cCdRetIRRt
	If __lFinXRatIR
		If __oRatIRF == Nil
			__oRatIRF := FinBCRateioIR():New()
		EndIf
		__oRatIRF:SetFilOrig(cFilAnt)
		__oRatIRF:SetForLoja(SE2->E2_FORNECE,SE2->E2_LOJA)
		__oRatIRF:SetIRBaixa(.T.)
	EndIf
EndIf	

Return __oRatIRF

//-------------------------------------------------------------------------
/*/{Protheus.doc} F340LRatIR
Função para limpar o objeto __oRatIRF

@author pequim
@since  17/02/2022
@version 12.1.33
@param lExclui, Logical, Define se ira excluir o Objeto da memoria
/*/
//-------------------------------------------------------------------------
Function F340LRatIR(lExclui as Logical)

    Default lExclui := .T.

    If __oRatIRF <> Nil
        __oRatIRF:Clean()
        If lExclui
            FwFreeObj(__oRatIRF)
            __oRatIRF := Nil
        EndIf    
    EndIf

Return

//-------------------------------------------------------------------------
/*/{Protheus.doc} F340SRatIR
Função para setar o objeto __oRatIRF

@author pequim
@since  17/02/2022
@version 12.1.33
@param oObj, Object, Objeto que sera atribuido ao oRatIrf
/*/
//-------------------------------------------------------------------------
Function F340SRatIR(obj as Object)
    __oRatIRF := obj
Return 
