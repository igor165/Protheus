#INCLUDE "FINA120.CH"
#INCLUDE "PROTHEUS.CH"
#include "MSGRAPHI.CH"

#DEFINE USADO CHR(0)+CHR(0)+CHR(1)

//-------------------------------------------------------------------
/*/{Protheus.doc} FINA140
Programa de atualizacao de Contratos Bancarios

@author		Wagner Xavier
@since		18/06/1992
@version	P12
@sample		FINA120( aRotAuto, nOpcE, lAutomato )

/*/
//-------------------------------------------------------------------

Function FINA120( aRotAuto, nOpcE, lAutomato )

Private aRotina		:= MenuDef()
Private cCadastro	:= STR0009  //"Atualização de Contratos Bancarios"
Private lExecAuto	:= ( aRotAuto <> NIL )
Private aAutoCab	:= Nil
Private nOpcAuto	:= 0

Default aRotAuto	:= {}
Default nOpcE		:= 0
Default lAutomato	:= .F.

If lExecAuto
	nOpcAuto	:= nOpcE
	If nOpcAuto <> Nil
		aAutoCab	:= aRotAuto
		
		Do Case
			Case nOpcAuto == 3
				INCLUI := .T.
				ALTERA := .F.
			Case nOpcAuto == 4
				INCLUI := .F.
				ALTERA := .T.
			OtherWise
				INCLUI := .F.
				ALTERA := .F.
		EndCase
		
		//Chamada direta da funcao de Inclusao/Alteracao/Visualizacao/Exclusao
		nPos := Ascan( aRotina, { |x| x[4] == nOpcAuto } )

		If ( nPos # 0 )
			bBlock := &( "{ |x,y,z,k| " + aRotina[ nPos,2 ] + "(x,y,z,k) }" )
			DbSelectArea("SE9")
			SE9->( DbSetOrder(1) ) // E9_FILIAL + E9_NUMERO + E9_BANCO + E9_AGENCIA
			
			If nOpcAuto == 4 .OR. nOpcAuto == 5
				nPNum	:= AScan( aAutoCab, { |x| AllTrim(x[1]) == "E9_NUMERO"	} )
				nPBco	:= AScan( aAutoCab, { |x| AllTrim(x[1]) == "E9_BANCO"	} )
				nPAgen	:= AScan( aAutoCab, { |x| AllTrim(x[1]) == "E9_AGENCIA"	} )
				
				SE9->( DbSeek( xFilial("SE9") + aAutoCab[nPNum][2] + aAutoCab[nPBco][2] + aAutoCab[nPAgen][2] ) )
				
			EndIf
			
			Eval( bBlock, Alias(), SE9->(Recno()), nPos)
		EndIf
	EndIf
	
Else
	If !GetHlpLGPD({'E9_BANCO', 'E9_AGENCIA','E9_CONTA'})
		// Endereca a funcao de BROWSE
		mBrowse( 6, 1, 22, 75, "SE9" )
	EndIf
EndIf

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fA120Inclu
Programa de atualizacao de Contratos Bancarios

@author		Eduardo Riera
@since		01/04//1998
@version	P12
@sample		fA120Inclui( cAlias, nReg, nOpc )
@param		cAlias = Alias do arquivo
@param		nReg = Numero do registro
@param		nOpc = Numero da opcao selecionada
/*/
//-------------------------------------------------------------------

Function fA120Inclui( cAlias, nReg, nOpc )

Local lRetorno	:= .T.

If lExecAuto
	lMsErroAuto := .F.
	RegToMemory( cAlias, .T., .F. )

	If EnchAuto( cAlias, aAutoCab, "Fa120TudOk()", nOpc )
	
		nOpca := AxIncluiAuto( cAlias, "Fa120TudOk()", )
		If nOpca == 0
			lMsErroAuto := .T.
			lRetorno := .F.
		EndIf
	Else
		lMsErroAuto := .T.
		lRetorno := .F.
	EndIf
Else
	lRetorno := AxInclui( cAlias, nReg, nOpc, , , , "Fa120TudOk()" )
EndIf

Return(lRetorno)

//-------------------------------------------------------------------
/*/{Protheus.doc} fA120Altera
Programa de alteracao de Contratos Bancarios

@author		Eduardo Riera
@since		01/04//1998
@version	P12
@sample		fA120Altera(cAlias, nReg, nOpc)
@param		cAlias = Alias do arquivo
@param		nReg = Numero do registro
@param		nOpc = Numero da opcao selecionada
/*/
//-------------------------------------------------------------------

Function fA120Altera(cAlias, nReg, nOpc)

Local lRetorno

If lExecAuto
	lMsErroAuto := .F.
	RegToMemory(cAlias,.F.,.F.)
	
	If EnchAuto( cAlias, aAutoCab, "Fa120TudOk()", nOpc )
		//EnchAuto(cAlias,aAutoCab,cTudoOk,nOpc)
		//nOpcA := AxIncluiAuto( cAlias, cTudoOk,cFunct,4,SE2->(RecNo()))
		nOpca := AxIncluiAuto( cAlias, "Fa120TudOk()", , nOpc, nReg)
		If nOpca == 0
			lMsErroAuto := .T.
		EndIf
	Else
		lMsErroAuto := .T.
	EndIf
Else
	lRetorno := AxAltera(cAlias,nReg,nOpc,,,,,"Fa120TudOk()")
EndIf

Return(lRetorno)

//-------------------------------------------------------------------
/*/{Protheus.doc} fA120Altera
Programa de alteracao de Contratos Bancarios

@author		Eduardo Riera
@since		01/04//1998
@version	P12
@sample		FA120DELET(cAlias, nReg, nOpc)
@param		cAlias = Alias do arquivo
@param		nReg = Numero do registro
@param		nOpc = Numero da opcao selecionada
/*/
//-------------------------------------------------------------------

Function FA120DELET(cAlias, nReg, nOpc)

Local nOpcA		:= 0
Local oDlg		:= Nil
Local nI		:= 0
Local bCampo	:= Nil
Local aSize		:= MsAdvSize()
Local lEncerra	:= .F.

// Monta a entrada de dados do arquivo
Private aTELA[0][0],aGETS[0]

// Verifica se o arquivo est  realmente vazio ou se esta posicionado em outra filial.
If EOF() .OR. SE9->E9_FILIAL # xFilial("SE9")
   Help(" " , 1 , "ARQVAZIO")
   lEncerra := .T.
EndIf

SEH->(DbSetOrder(4))
If SEH->( MsSeek(xFilial("SEH") + SE9->( E9_BANCO + E9_AGENCIA + E9_CONTA + E9_NUMERO ) ) )
   Help(" " , 1 , "SE9TEMSEH")
   lEncerra := .T.
EndIf

If !lEncerra .AND. lExecAuto
	
	// Inicio da protecao via TTS
	BEGIN TRANSACTION
		// Excluir tambem do SE0
		DbSelectArea("SE0")
		MsSeek(xFilial("SE0")+SE9->(E9_BANCO+E9_AGENCIA+E9_CONTA+E9_NUMERO))
		
		// Enquanto houver cotacoes para o mesmo contrato, exclui a cotacao
		While	SE0->(!Eof()) .And.;
				xFilial("SE0")==SE0->E0_FILIAL .And.;
				SE0->(E0_BANCO+E0_AGENCIA+E0_CONTA+E0_CONTRAT) == SE9->(E9_BANCO+E9_AGENCIA+E9_CONTA+E9_NUMERO)
				
			RecLock("SE0",.F.,.T.)
			DbDelete()
			FkCommit()					
			DbSkip()	
		EndDo
				
		DbSelectArea(cAlias)
		RecLock(cAlias,.F.,.T.)
		DbDelete()
		// Final  da protecao via TTS
	END TRANSACTION
	
ElseIf !lExecAuto .AND. !lEncerra
	oSize := FWDefSize():New(.T.)
	oSize:AddObject( "ENCHOICE", 100, 100, .T., .T. )
	oSize:Process()
	
	aPos := {	oSize:GetDimension("ENCHOICE","LININI"),;
				oSize:GetDimension("ENCHOICE","COLINI"),;
				oSize:GetDimension("ENCHOICE","LINEND"),;
				oSize:GetDimension("ENCHOICE","COLEND")	}
	
	While .T.
		
		nOpcA:=0
		dbSelectArea(cAlias)
		
		If !SoftLock( "SE9" )
			Return
		EndIf
		
		DbSelectArea( cAlias )
		bCampo := { |nCPO| Field(nCPO) }
		
		For nI := 1 To FCount()
			M->&( EVAL(bCampo, nI) ) := FieldGet(nI)
		Next nI
		
		nOpca := 1
	
		DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],0 TO aSize[6],aSize[5] of oMainWnd PIXEL
		
			EnChoice( cAlias, nReg, nOpc, ,"AC",OemToAnsi(STR0011),, aPos)  // "Quanto … exclus„o?"	
		
		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{|| nOpca := 2,oDlg:End()},{|| nOpca := 1,oDlg:End()})
		
		If nOpcA == 2
			// Inicio da protecao via TTS
			BEGIN TRANSACTION
				// Excluir tambem do SE0
				DbSelectArea("SE0")
				MsSeek(xFilial("SE0")+SE9->(E9_BANCO+E9_AGENCIA+E9_CONTA+E9_NUMERO))
				
				// Enquanto houver cotacoes para o mesmo contrato, exclui a cotacao
				While	SE0->(!Eof()) .And.;
						xFilial("SE0")==SE0->E0_FILIAL .And.;
						SE0->(E0_BANCO+E0_AGENCIA+E0_CONTA+E0_CONTRAT) == SE9->(E9_BANCO+E9_AGENCIA+E9_CONTA+E9_NUMERO)
						
					RecLock("SE0",.F.,.T.)
					DbDelete()
					FkCommit()					
					DbSkip()	
				EndDo
						
				DbSelectArea(cAlias)
				RecLock(cAlias,.F.,.T.)
				DbDelete()
				// Final  da protecao via TTS
			END TRANSACTION
		Else
			MsUnlock( )
		EndIf
		
		Exit
	Enddo
EndIf

DbSelectArea( cAlias )

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} FA120TudOk
Programa de validacao dos contratos bancarios

@author		Wagner Xavier
@since		18/06/1992
@version	P12
@sample		FA120TudOk()
@param		cAlias = Alias do arquivo
@param		nReg = Numero do registro
@param		nOpc = Numero da opcao selecionada
/*/
//-------------------------------------------------------------------

Function FA120TudOk()

Local lRetorno := .F.

	If !Empty(M->E9_VLRCOTA)
		lRetorno := .T.
	Else
		If !Empty(M->E9_VENCTO) .And. !Empty(M->E9_TXACRES) .And. !Empty(M->E9_VALOR)
			lRetorno := .T.
		Else
			Help(" ",1,"FA120TUDOK")
		EndIf
	EndIf

	//Verifica se o Banco ou a Conta estao bloqueados.
	lRetorno := CarregaSa6( M->E9_BANCO, M->E9_AGENCIA, M->E9_CONTA, .T., /*cBenef100*/, .T. )

Return lRetorno

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa120Cota
Permite a digitacao das cotacoes diarias dos contratos

@author		Claudio D. de Souza
@since		23/09/2002
@version	P12
@sample		Fa120Cota(cAlias,nReg,nOpc,cBanco,cAgencia,cConta,cContrato,nChamada)
@param		cAlias = Alias do arquivo
@param		nReg = Numero do registro
@param		nOpc = Numero da opcao selecionada
/*/
//-------------------------------------------------------------------

Function Fa120Cota(cAlias, nReg, nOpc, cBanco, cAgencia, cConta, cContrato, nChamada)

Local oDlg		:= Nil
Local aOldHead	:= If( Type("aHeader") == "A", aClone(aHeader), {} )
Local oGet		:= Nil
Local nOpca		:= 0
Local aArea		:= GetArea()
Local aAreaSe9	:= SE9->(GetArea())
Local aOldRotina:= Nil
Local aBut		:= { {"LINE", { ||Grafico() }, STR0031, STR0032 } } //"Analise grafica" //"Analise gráfica"###"Grafico"

If Type("aRotina") == "A"
	aOldRotina	:= aClone(aRotina)
EndIf	

Default nChamada	:= 1
Default cBanco		:= Space(TamSx3("E9_BANCO")[1])
Default cAgencia	:= Space(TamSx3("E9_AGENCIA")[1])
Default cConta		:= Space(TamSx3("E9_CONTA")[1])
Default cContrato	:= Space(TamSx3("E9_NUMERO")[1])

aHeader := {}
aRotina := { { "", "", 0, 3 } }
					
Aadd( aHeader, { STR0014,	"E0_SUBCTA",	"@!",	TamSx3("E0_SUBCTA")[1],	0, ".T.",			USADO, "C", , "V" } )  
Aadd( aHeader, { STR0015,	"E0_DATA",		"@!",	8,						0, "NaoVazio()",	USADO, "D", , "V" } )  
Aadd( aHeader, { STR0016,	"E0_VALOR",		PesqPict("SE0","E0_VALOR", TamSx3("E0_VALOR")[1],1), TamSx3("E0_VALOR")[1], TamSx3("E0_VALOR")[2], "NaoVazio()", USADO, "N", , "V" } )
Aadd( aHeader, { "  ",		"_E0_ULTCOL",	"!",	1,						0, ".T.",			USADO, "C", , "V" } )

If (Type("aCols") == "A" .And. Empty(aCols)) .Or. Type("aCols") != "A"
	
	aCols := {}
	Aadd( aCols, Array( Len(aHeader) + 1 ) )
	AEval( aHeader, { |e, nX|	If( e[8] == "D", aCols[1][nX] := dDataBase,;
								If( e[8] == "N", aCols[1][nX] := 0,;
								If( e[8] == "C" .And. !Empty(e[1]),;
								aCols[1][nX] := Space(e[4]),;
								aCols[1][nX] := "" ) ) ) } )
	
	If nChamada == 1 // Cadastro de Contratos.
		DbSelectArea("SE0")
		DbSetOrder(1)
		MsSeek( xFilial("SE0") + SE9->(E9_BANCO+E9_AGENCIA+E9_CONTA+E9_NUMERO) )
	EndIf
		
	If nChamada == 1 .And. !Eof()
		aCols := {}
		// Carrega todas as cotacoes existentes
		While	SE0->(!Eof()) .And.;
				xFilial("SE0")==SE0->E0_FILIAL .And.;
				SE0->(E0_BANCO+E0_AGENCIA+E0_CONTA+E0_CONTRAT) == SE9->(E9_BANCO+E9_AGENCIA+E9_CONTA+E9_NUMERO)
				
			AAdd( aCols, { SE0->E0_SUBCTA, SE0->E0_DATA, SE0->E0_VALOR, " ", .F. } )
			SE0->( DbSkip() )
		EndDo
	Else
		aCols[1][1]  := Space(3)
		aCols[1][2]  := dDataBase
		aCols[1][3]  := 0
		aCols[1][4]  := " "
		aCols[1][Len(aCols[1])] := .F. // Indica que a linha nao esta deletada
	EndIf
	
	SE9->(RestArea(aAreaSe9))
	RestArea(aArea)
	
EndIf	

// Classifica os dados em ordem decrescente de data e crescente de sub-conta
//aSort(aCols,,,{|x,y| x[1] > y[1] .And. Dtos(x[2]) < Dtos(y[2]) })

DEFINE MSDIALOG oDlg TITLE STR0017 From 14,0 To 34,50 OF oMainWnd

	oGet := MSGetDados():New( 40, 0, 150, 198, 1, { || CadCotaOk(oGet)}, , , .T., {"E0_SUBCTA", "E0_DATA", "E0_VALOR"}, , , 999999999 )

ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(	oDlg, { || nOpca := 1, If( oGet:TudoOk(), oDlg:End(), nOpca := 0 ) },;
											{ || nOpca := 0, ( aCols := {}, oDlg:End() ) }, , aBut ) CENTERED

If nOpcA==1
	Fa120GrvCota()
EndIf

aCols	:= {}
aHeader	:= aClone( aOldHead )

If aOldRotina != Nil
	aRotina := aClone( aOldRotina )
EndIf

RestArea(aArea)

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} CadCotaOk
Valida a linha da GetDados na atualizacao das cotas

@author		Claudio D. de Souza
@since		16/04/2002
@version	P12
@sample		CadCotaOk(oGetDad)
@param		oGetDad - Objeto GetDados
/*/
//-------------------------------------------------------------------

Function CadCotaOk(oGetDad)

Local lRet	:= .T.
Local nX	:= 0

If !aCols[n][Len(aCols[1])]
	// Valida todas as colunas da GetDados
	For nX := 1 To Len(aCols[n])-1
		If Empty(aCols[n][nX]) .And. !Empty(aHeader[nX][1]) .And. !AllTrim(aHeader[nX][2])$"E0_SUBCTA/_E0_ULTCOL"
			lRet := .F.
			HELP(" ",1,"NVAZIO",,aHeader[nX][1],4,0)
			Exit
		EndIf
	Next nX
EndIf	

// Verifica se a cotacao nao esta cadastrada tanto em aCols quanto no SE0
If lRet
	nInd := aScan(aCols, {|e| e[1]+Dtos(e[2]) == aCols[n][1]+Dtos(aCols[n][2])})
	If nInd > 0 .And. nInd != n .And. !aCols[n][Len(aCols[1])]
		Help( " ", 1, "COTAJAEXIST",,STR0018, 4, 0)
		lRet := .F.
	EndIf
EndIf

If lRet
	cChave := aCols[n][1]+Dtos(aCols[n][2])
	// Organiza os dados de forma decrescente
	aSort(aCols,,,{|x,y|x[1]+Dtos(x[2]) > y[1]+Dtos(y[2])})
	// Posiciona o ponteiro para a GetDados nao se perder
	n := aScan(aCols, {|e| e[1]+Dtos(e[2]) == cChave})
	oGetDad:Goto(n)
EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} Fa120GrvCota
Grava cotacao no SE0 a partir de aCols

@author		Claudio D. de Souza
@since		25/09/2002
@version	P12
@sample		CadCotaOk()
/*/
//-------------------------------------------------------------------

Function Fa120GrvCota()

Local nX		:= 0
Local aArea		:= GetArea()
Local aAreaSe0	:= SE0->(GetArea())

If Type("aCols") == "A"
	
	DbSelectArea("SE0")
	DbSetOrder(1)
	For nX := 1 To Len(aCols)
	
		// Se a cotacao nao estiver deletada, os dados forem validos e nao existir no SE0
		If !aCols[nX][Len(aCols[1])]
		
			If !Empty(aCols[nX][2]) .And. !Empty(aCols[nX][3])
				
				If !MsSeek( xFilial("SE0") + SE9->(E9_BANCO + E9_AGENCIA + E9_CONTA + E9_NUMERO) + Str(21001231 - Val( DTOS( aCols[nX][2] ) ), 11 ) + aCols[nX][1] )
				
			  		RecLock("SE0", .T.)
		  			SE0->E0_FILIAL	:= xFilial("SE0")
		  			SE0->E0_BANCO	:= SE9->E9_BANCO
		  			SE0->E0_AGENCIA	:= SE9->E9_AGENCIA
		  			SE0->E0_CONTA	:= SE9->E9_CONTA
			  		SE0->E0_CONTRAT	:= SE9->E9_NUMERO
		  			SE0->E0_SUBCTA	:= aCols[nX][1]
		  			SE0->E0_DATA	:= aCols[nX][2]
		  			SE0->E0_ORDEM	:= Str( 21001231 - Val(DTOS(aCols[nX][2])), 11 )
			  	Else	
			  		RecLock("SE0", .F.)
			  	EndIf
			  	
		  		SE0->E0_VALOR		:= aCols[nX][3]
	  			SE0->E0_ORIGEM		:= "A" // Atualizacao
	  			MsUnlock()
	  		EndIf
	  	Else // Se estiver deletada, localiza a cotacao e exclui.
	  		If MsSeek(xFilial("SE0") + SE9->(E9_BANCO+E9_AGENCIA+E9_CONTA+E9_NUMERO) + Str( 21001231 - Val( DTOS( aCols[nX][2] ) ), 11 ) + aCols[nX][1] )
		  		RecLock("SE0",.F.)
		  			DbDelete()
		  		MsUnlock()
		  	EndIf	
		EndIf
	
	Next nX
	
	SE0->(RestArea(aAreaSe0))
	RestArea(aArea)
EndIf

aCols := {}

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} Grafico
Função para montagem do grafico

@author		Claudio D. de Souza
@since		25/09/2002
@version	P12
@sample		Grafico()
/*/
//-------------------------------------------------------------------

Static Function Grafico()

Local nX		:= 0
Local nSerie	:= 0
Local oBmp		:= Nil
Local oDlg		:= Nil
Local oGraphic	:= Nil
Local oBold		:= Nil
			
DEFINE MSDIALOG oDlg FROM 0,0 TO 450,700 PIXEL TITLE STR0019
DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD

// Layout da janela
@ 000, 000 BITMAP oBmp RESNAME "ProjetoAP" oF oDlg SIZE 50, 250 NOBORDER WHEN .F. PIXEL
@ 003, 060 SAY STR0020 + SE9->E9_DESTIP FONT oBold PIXEL

@ 014, 050 TO 16 ,400 LABEL '' OF oDlg  PIXEL

@ 014, 050 TO 16 ,400 LABEL '' OF oDlg  PIXEL

@ 020, 055 MSGRAPHIC oGraphic SIZE 285, 158 OF oDlg PIXEL
oGraphic:SetMargins( 2, 6, 6, 6 )

// Habilita a legenda, apenas se houver mais de uma serie de dados.
oGraphic:SetLegenProp( GRP_SCRTOP, CLR_YELLOW, GRP_SERIES, .F.)
nSerie  := oGraphic:CreateSerie(1)

If nSerie != GRP_CREATE_ERR
	For nX := Len(aCols) To 1 Step -1
		oGraphic:Add(nSerie ,aCols[nX][3],Transform(aCols[nX][2],""),CLR_HBLUE)
	Next nX
Else
	IW_MsgBox(STR0021,STR0022,"STOP")
EndIf
                             
oGraphic:SetGradient( GDBOTTOMTOP, CLR_HGRAY, CLR_WHITE )
oGraphic:SetTitle( STR0023,"", CLR_HRED , A_LEFTJUST , GRP_TITLE )
oGraphic:SetTitle( "", STR0024, CLR_GREEN, A_RIGHTJUS , GRP_FOOT  )
oGraphic:l3D := .F.

@ 190, 254 BUTTON o3D PROMPT "&2D"	SIZE 40,14 OF oDlg PIXEL ACTION (oGraphic:l3D := !oGraphic:l3D, o3d:cCaption := If(oGraphic:l3D, "&2D", "&3D"))
o3d:cCaption := If(oGraphic:l3D, "&2D", "&3D")
@ 190, 295 BUTTON STR0025  SIZE 40,14 OF oDlg PIXEL ACTION GrafSavBmp( oGraphic ) 
@ 190, 170 BUTTON STR0026 	SIZE 40,14 OF oDlg WHEN oGraphic:l3D PIXEL ACTION oGraphic:ChgRotat( nSerie, 1, .T. ) // nRotation tem que estar entre 1 e 30 passos //"Rotação &-"
@ 190, 212 BUTTON STR0027	SIZE 40,14 OF oDlg WHEN oGraphic:l3D PIXEL ACTION oGraphic:ChgRotat( nSerie, 1, .F. ) // nRotation tem que estar entre 1 e 30 passos //"Rotação &+"

@ 207, 050 TO 209 ,400 LABEL '' OF oDlg  PIXEL
@ 213, 254 BUTTON STR0028	SIZE 40,12 OF oDlg PIXEL ACTION PmsGrafMail(oGraphic,STR0029,{STR0020 + SE9->E9_DESTIP},,1)
@ 213, 295 BUTTON STR0030	SIZE 40,12 OF oDlg PIXEL ACTION oDlg:End()

ACTIVATE MSDIALOG oDlg CENTER

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de menu Funcional

@author		Ana Paula N. Silva
@since		22/11/2006
@version	P12
@sample		MenuDef()
/*/
//-------------------------------------------------------------------

Static Function MenuDef()

/*
Estrutura do aRotina 
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada
	3. Reservado
	4. Tipo de Transa‡„o a ser efetuada:
		1 - Pesquisa e Posiciona em um Banco de Dados
		2 - Simplesmente Mostra os Campos
		3 - Inclui registros no Bancos de Dados
		4 - Altera o registro corrente
		5 - Remove o registro corrente do Banco de Dados
	5. Nivel de acesso
	6. Habilita Menu Funcional
*/

Local aRotina := {	{ STR0004, "AxPesqui",		0, 1, , .F. }, ; // "Pesquisar"
					{ STR0005, "AxVisual",		0, 2		}, ; //  "Visualizar"
					{ STR0006, "Fa120Inclui",	0, 3		}, ;  // "Incluir"   
					{ STR0007, "Fa120Altera",	0, 4		}, ;  // "Alterar"   
					{ STR0008, "fA120Delet",	0, 5, 3		}, ;  // "Excluir"   
					{ STR0012, "Fa120Cota",		0, 4		}	}
Return(aRotina)
