#INCLUDE "TRKXFUN.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

Static lFilEdt := .F.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³TRKXFUN   ³ Autor ³ Sergio Silveira       ³ Data ³05/11/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de Funcoes de restreamento / Drill-Down           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ 04/04/02 ³ Paulo Augusto ³Alterado para considerar os remitos/Localiz.³±±
±±³			 ³               ³Acertado o posicionato da NF debaixo do pe- ³±±
±±³			 ³               ³dido qdo houver mais de uma NF(MATRKSCN)    ³±±
±±³12/04/02	 ³ Paulo Augusto ³Criacao da funcao MATRKSC9                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³MaRetRoot ³ Autor ³ Sergio Silveira       ³ Data ³26/10/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Localiza a origem da entidade                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaRetRoot( ExpC1, ExpC2, @ExpA1, @ExpN1 )                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nil                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias da entidade                                    ³±±
±±³          ³ExpC2: Chave unica da entidade                              ³±±
±±³          ³ExpA1: array contendo o caminho ate a origem                ³±±
±±³          ³ExpN1: Numero maximo de niveis a pesquisar                  ³±±
±±³          ³ExpN2: Numero da arvore                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GENERICO                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³22/09/2006³ Conrado Q.    ³Adicionado localizacao de entidade provindo ³±±
±±³          ³               ³de um apontamento tecnico.                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaRetRoot( cAlias, cKey, aRoot, nMaxLevel, nLevel, nTree, nGo )

LOCAL cCond						// Conteudo da clausula where de uma query
LOCAL cIndexKey 				// Utilizado para guardar um IndexKey()
LOCAL cAliasTmp    				// Utilizada para armazenar um alias.
LOCAL cAliasQRY   := ""			// Utilizado para guardar o alias de uma area
LOCAL cQuery      := ""			// Utilizado para guardar a query
LOCAL cTrkSeek    := ""			// Utilizado para o seek vaiavel das chaves de acordo com a filial de entrega
Local cFilialBsk  := ""          // Variavel generica com a Filial a ser utilizada de acordo com o processo
Local cKeyCNE     := ""
Local cFilCTR     := ""
Local cSCNum	  := ""

Local nTamFil     := 0
Local nTamContra  := 0
Local nTamRevisa  := 0
Local nTamMed     := 0

LOCAL lFixoGCT    := .T.
LOCAL lFilEnt	  := TRKFILENT()
Local lTemItem	  := .F.

Local lMARETGCT   := ExistBlock("MARETGCT")
Local lMRTGCT     := .T.
Local lRetMRTGCT  := .T.
Local lUsaLote	  := .F.

Local oModel
Local oModCO2
Local oModCO3
Local oModCP4

Local nPosCO2	  := 0
Local nPosCP4	  := 0
Local lCotFiap	  := SuperGetMV("MV_COTFIAP") = "E"
Local cCotFiap    := ""
Local aAreaSC7	  := {}

DEFAULT nLevel    := 0
DEFAULT aRoot     := {}
DEFAULT nMaxLevel := 1000000
DEFAULT nTree     := 1
DEFAULT nGo		  := 0

Do Case
	Case cAlias == "SUC"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pego o Atendimento                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SUC->( DbSetOrder( 1 ) )
		If SUC->( DbSeek( xFilial( "SUC" ) + cKey ) )
			If nLevel <= nMaxLevel
				nLevel++
				AAdd( aRoot, { "SUC", SUC->UC_CODIGO, nLevel,nTree } )
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Pego as Ocorrencias/Acoes do Atendimento                     ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If SUD->(DbSeek( xFilial( "SUC" ) + SUC->UC_CODIGO))
					While SUD->( !Eof() .AND. SUC->(xFilial("SUC"))+SUC->UC_CODIGO == SUD->(xFilial("SUD")) + SUD->UD_CODIGO )
                    	If !Empty(SUD->UD_CODFNC)
							AAdd( aRoot, { "QI2", SUC->UC_CODIGO, nLevel, nTree } )
    	                EndIf
						SUD->( dbSkip() )
					End
				 EndIf
				nLevel--
			EndIf
		EndIf

	Case cAlias == "AB7"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens da ordem de servico                                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AB7->( DbSetOrder( 1 ) )
		If AB7->( DbSeek( xFilial( "AB7" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel ++

				AAdd( aRoot, { "AB7", AB7->AB7_NUMOS + AB7->AB7_ITEM, nLevel, nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				Do Case
					Case !Empty( AB7->AB7_NRCHAM )
						MaRetRoot( "AB2", AB7->AB7_NRCHAM, @aRoot, @nMaxLevel, @nLevel, nTree )
					Case !Empty( AB7->AB7_NUMORC )
						MaRetRoot( "AB4", AB7->AB7_NUMORC, @aRoot, @nMaxLevel, @nLevel, nTree )
					Case !Empty( AB7->AB7_NUMHDE )
						MaRetRoot( "ABL", AB7->AB7_NUMHDE, @aRoot, @nMaxLevel, @nLevel, nTree )
					Otherwise
						ABI->( DbSetOrder( 2 ) )
						If ABI->( DbSeek( xFilial( "ABI" ) + cKey ) )
							MaRetRoot( "ABI", ABI->ABI_PROJET + ABI->ABI_ITEM, @aRoot, @nMaxLevel, @nLevel, nTree )
						EndIf
				EndCase

				nLevel--

			EndIf

		EndIf

	Case cAlias == "AB2"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do chamado tecnico                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AB2->( DbSetOrder( 1 ) )
		If AB2->( DbSeek( xFilial( "AB2" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "AB2", AB2->AB2_NRCHAM + AB2->AB2_ITEM, nLevel, nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				AB1->( DbSetOrder( 1 ) )
				AB1->( DbSeek( xFilial( "AB1" ) + AB2->AB2_NRCHAM ) )

				Do Case
					Case !Empty( AB1->AB1_NUMTMK )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Chamado call center                                          ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaRetRoot( "AB1", AB1->AB1_NRCHAM, @aRoot, @nMaxLevel, @nLevel, nTree )
				EndCase

				nLevel--

			EndIf

		EndIf

	Case cAlias == "AB1"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do chamado tecnico                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AB1->( DbSetOrder( 1 ) )
		If AB1->( DbSeek( xFilial( "AB1" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "AB1", AB1->AB1_NRCHAM, nLevel, nTree } )

				Do Case
					Case !Empty( AB1->AB1_NUMTMK )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Atendimento telemarketing                                    ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaRetRoot( "SUC", AB1->AB1_NUMTMK, @aRoot, @nMaxLevel, @nLevel, nTree )
				EndCase

				nLevel--

			EndIf

		EndIf


	Case cAlias == "SUC"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atendimento telemarketing                                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SUC->( DbSetOrder( 1 ) )
		If SUC->( DbSeek( xFilial( "SUC" ) + cKey ) )

			If nLevel <= nMaxLevel
				nLevel++
				AAdd( aRoot, { "SUC", SUC->UC_CODIGO, nLevel, nTree } )
				nLevel--
			EndIf
		EndIf

	Case cAlias == "AB4"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do orcamento tecnico                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AB4->( DbSetOrder( 1 ) )
		If AB4->( DbSeek( xFilial( "AB4" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "AB4", AB4->AB4_NUMORC + AB4->AB4_ITEM, nLevel, nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				Do Case
					Case !Empty( AB4->AB4_NRCHAM )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Chamado tecnico                                              ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaRetRoot( "AB2", AB4->AB4_NRCHAM, @aRoot, @nMaxLevel, @nLevel, nTree )
										Otherwise
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Apontamento tecnico                                          ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

						cAliasQry := GetNextAlias()

						cQuery := ""

						cQuery += "SELECT AB9_FILIAL, AB9_NUMOS
						cQuery += "FROM " + RetSqlName("AB9") + " "
						cQuery += "WHERE "
						cQuery += "AB9_FILIAL='" + xFilial("AB9") + "' AND "
						cQuery += "AB9_NUMORC='" + AB4->AB4_NUMORC + "' AND "
						cQuery += "D_E_L_E_T_=' ' "

						cQuery := ChangeQuery( cQuery )

						dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry, .F., .T. )

						If !( cAliasQry )->( Eof() )
							MaRetRoot( "AB9", (cAliasQry)->AB9_NUMOS, @aRoot, @nMaxLevel, @nLevel, nTree )
						EndIf

						( cAliasQry )->( dbCloseArea() )
				EndCase

				nLevel--

			EndIf

		EndIf

	Case cAlias == "AB9"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do atendimento da OS                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AB9->( DbSetOrder( 1 ) )
		If AB9->( DbSeek( xFilial( "AB9" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "AB9", AB9->AB9_NUMOS, nLevel, nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				Do Case
					Case !Empty( AB9->AB9_NUMOS )
						MaRetRoot( "AB7", AB9->AB9_NUMOS, @aRoot, @nMaxLevel, @nLevel, nTree )
				EndCase

				nLevel--

			EndIf

		EndIf

	Case cAlias == "ABL"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atendimento / Fila de Help desk                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ABL->( DbSetOrder( 2 ) )
		If ABL->( DbSeek( xFilial( "ABL" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "ABL", ABL->ABL_SEQUEN, nLevel, nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				MaRetRoot( "AB2", ABL->ABL_NRCHAM, @aRoot, @nMaxLevel, @nLevel, nTree )

				nLevel--

			EndIf

		EndIf

	Case cAlias == "ABK"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atendimento / Help desk                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ABK->( DbSetOrder( 1 ) )
		If ABK->( DbSeek( xFilial( "ABK" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "ABK", ABK->ABK_NRCHAM + ABK->ABK_SEQ, nLevel, nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				MaRetRoot( "ABL", ABK->ABK_NRCHAM, @aRoot, @nMaxLevel, @nLevel, nTree )

				nLevel--

			EndIf

		EndIf

	Case cAlias == "ABI"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do projeto                                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ABI->( DbSetOrder( 1 ) )
		If ABI->( DbSeek( xFilial( "ABI" ) + cKey ) )
			If nLevel <= nMaxLevel
				nLevel++
				AAdd( aRoot, { "ABI", ABI->ABI_PROJET + ABI->ABI_ITEM, nLevel,nTree } )
				nLevel--
			EndIf
		EndIf

	Case cAlias == "ABB"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Agendamento                                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ABB->( DbSetOrder( 1 ) )
		If ABB->( DbSeek( xFilial( "ABB" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "ABB", cKey, nLevel,nTree } )
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !Empty( ABB->ABB_NUMOS )
					MaRetRoot( "AB7", ABB->ABB_NUMOS, @aRoot, @nMaxLevel, @nLevel,nTree )
				EndIf

				nLevel--

			EndIf

		EndIf

	Case cAlias == "SC2"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ordem de Producao                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC2->( DbSetOrder( 1 ) )
		If SC2->( DbSeek( xFilial( "SC2" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "SC2",SC2->(C2_NUM+C2_ITEM+C2_SEQUEN+C2_ITEMGRD), nLevel,nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !Empty(SC2->C2_PEDIDO+SC2->C2_ITEMPV)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Pedido de Venda - Sigafat                                    ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					MaRetRoot( "SC6",SC2->C2_PEDIDO+SC2->C2_ITEMPV,@aRoot,@nMaxLevel, @nLevel,nTree )
				Else
					If lAtuSGJ .And. IsInCallStack("A650Track")
						cAliasQRY := GetNextAlias()
						cQuery    := "SELECT "
						cQuery    += " SGJ.GJ_NUMPV, SGJ.GJ_ITEMPV FROM "
						cQuery    += RetSqlName("SGJ")+ " SGJ "
						cQuery	  += " WHERE "
						cQuery    += " SGJ.GJ_FILIAL  = '" + xFilial("SGJ") + "' AND "
						cQuery	  += " SGJ.GJ_NUMOP   = '"+SC2->C2_NUM+"' AND "
						cQuery	  += " SGJ.GJ_ITEMOP  = '"+SC2->C2_ITEM+"' AND "
						cQuery	  += " SGJ.GJ_SEQUEN  = '"+SC2->C2_SEQUEN+"' AND "
						cQuery	  += " SGJ.GJ_ITGRDOP = '"+SC2->C2_ITEMGRD+"' AND "
						cQuery    += " SGJ.D_E_L_E_T_ <> '*' "
						cQuery    := ChangeQuery(cQuery)
						dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQRY,.T.,.T.)

						While !( cAliasQry )->( Eof() )
							nTree++
							AAdd( aRoot, { "SC5",(cAliasQry)->GJ_NUMPV, nLevel,nTree } )
							( cAliasQry )->( dbSkip() )
						End

						( cAliasQRY )->( dbCloseArea() )

					EndIf
				EndIf

				nLevel--
			EndIf

		EndIf

	Case cAlias == "SC6"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do pedido de venda                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC6->( DbSetOrder( 1 ) )
		If SC6->( DbSeek( xFilial( "SC6" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "SC6", SC6->C6_NUM + SC6->C6_ITEM, nLevel,nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				Do Case
					Case !Empty( SC6->C6_NUMOS )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Ordem de Servico - Sigatec                                   ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaRetRoot( "AB7", Left( SC6->C6_NUMOS, Len( AB7->AB7_NUMOS + AB7->AB7_ITEM ) ), @aRoot, @nMaxLevel, @nLevel,nTree )
					Case !Empty( SC6->C6_NUMOSFA )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Ordem de Servico - Fabricante                                ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaRetRoot( "AB7", Left( SC6->C6_NUMOSFA, Len( AB7->AB7_NUMOS + AB7->AB7_ITEM ) ), @aRoot, @nMaxLevel, @nLevel,nTree )
					Case !Empty( SC6->C6_NUMORC )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Orcamento de Venda                                           ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaRetRoot( "SCK", SC6->C6_NUMORC, @aRoot, @nMaxLevel, @nLevel,nTree )
					Case !Empty( SC6->C6_CONTRT )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Contrato de servicos                                         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If SC6->C6_TPCONTR == "1"
							MaRetRoot( "AAN", SC6->C6_CONTRT + SC6->C6_ITCONTR, @aRoot, @nMaxLevel, @nLevel,nTree )
						ElseIf SC6->C6_TPCONTR == "2"
							MaRetRoot( "AAO", SC6->C6_CONTRT + SC6->C6_ITCONTR, @aRoot, @nMaxLevel, @nLevel,nTree )
						EndIf
					Case !Empty( SC6->C6_CONTRAT )
						MaRetRoot( "ADB", SC6->C6_CONTRAT + SC6->C6_ITEMCON, @aRoot, @nMaxLevel, @nLevel,nTree )
					Case !Empty( SC6->C6_ITEMED )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Posiciona no cabecalho do pedido de venda                    ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						SC5->( dbSetOrder( 1 ) )
						If	SC5->( DbSeek( xFilial("SC5") + SC6->C6_NUM ) )
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Medicao                                                      ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							
							CND->( dbSetOrder( 4 ) )
							CND->(dbSeek(xFilial("CND")+SC5->C5_MDNUMED ,.T.))
							
							cKeyCNE := IIF(FWModeAccess("CND")=="E",CND->CND_FILCTR,xFilial("CND")) + SC5->C5_MDCONTR + CND->CND_REVISA + SC5->C5_MDNUMED + SC6->C6_ITEMED

							MaRetRoot( "CNE", cKeyCNE , @aRoot, @nMaxLevel, @nLevel,nTree )
						EndIf
					Otherwise
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Verifica se algum projeto criou este item de pedido          ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						ABI->( DbSetOrder( 3 ) )
						If ABI->( DbSeek( xFilial( "ABI" ) + SC6->C6_NUM + SC6->C6_ITEM ) )
							MaRetRoot( "ABI", ABI->ABI_PROJET + ABI->ABI_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
						EndIf

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Verifica se algum atendimento de TELEMARKETING criou este item de pedido  ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						SUB->( DbSetOrder( 3 ) )
						If SUB->( DbSeek( xFilial( "SUB" ) + SC6->C6_NUM + SC6->C6_ITEM ) )
							MaRetRoot( "SUB", SUB->UB_NUM + SUB->UB_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
						EndIf

				EndCase

				nLevel--

			EndIf

		EndIf

	Case cAlias == "SD2"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do pedido de venda                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SD2->( DbSetOrder( 3 ) )
		If SD2->( DbSeek( xFilial( "SD2" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "SD2", cKey, nLevel,nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				Do Case
					Case !Empty( SD2->D2_PEDIDO ) .And. !Empty( SD2->D2_ITEMPV )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Pedido de Venda                                              ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaRetRoot( "SC6", SD2->D2_PEDIDO + SD2->D2_ITEMPV, @aRoot, @nMaxLevel, @nLevel,nTree )
				EndCase

				nLevel--

			EndIf

		EndIf

	Case cAlias == "SCR"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Liberacao de Pedido de Compras                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SCR->( DbSetOrder( 1 ) )
		If lFilEnt
			cTrkSeek:= cKey
		Else
			cTrkSeek:= xFilial( "SCR" ) + cKey
		EndIf

		If SCR->( DbSeek (cTrkSeek) )
			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "SCR", cKey, nLevel,nTree  } )
				If lFilEnt
					MaRetRoot( "SC7", SCR->CR_FILIAL + SCR->CR_NUM, @aRoot, @nMaxLevel, @nLevel,nTree )
				Else
			   		MaRetRoot( "SC7", SCR->CR_NUM, @aRoot, @nMaxLevel, @nLevel,nTree )
				EndIf

				nLevel--

			EndIf
		EndIf

	Case cAlias == "SC7"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pedido de Compras                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lFilEnt
			SC7->( DbSetOrder( 14 ) )
			cTrkSeek := cKey
		Else	
			SC7->( DbSetOrder( 1 ) )
			cTrkSeek:= xFilial( "SC7" ) + cKey
		EndIf

        If SC7->( DbSeek ( cTrkSeek ))

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "SC7", cKey, nLevel,nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				Do Case
					Case !Empty( SC7->C7_NUMCOT )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Cotacao                                                      ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lFilEnt
							MaRetRoot( "SC8", IIF(FWModeAccess("SC8")=="E",xFilial("SC8"),SC7->C7_FILIAL) + SC7->C7_NUMCOT + SC7->C7_PRODUTO + SC7->C7_FORNECE + SC7->C7_LOJA + SC7->C7_NUM + SC7->C7_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
						Else
							MaRetRoot( "SC8", SC7->C7_NUMCOT + SC7->C7_PRODUTO + SC7->C7_FORNECE + SC7->C7_LOJA + SC7->C7_NUM + SC7->C7_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
						EndIf

					Case !Empty( SC7->C7_CODED ) .And. !Empty( SC7->C7_NUMPR )
						MaRetRoot( "CO1", SC7->C7_CODED + SC7->C7_NUMPR, @aRoot, @nMaxLevel, @nLevel,nTree )


					Case !Empty( SC7->C7_NUMSC )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Solicitacao de Compras / Autorizacao de entrega              ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If SC7->C7_TIPO == 1 .Or. SC7->C7_TIPO == 3
							If lFilEnt
								If !Empty(SC7->C7_FISCORI)
									If !FWModeAccess("SC1")=="E"
									    cFilialBsk:=IIF(FWModeAccess("SC1")=="C",xFilial("SC1",SC7->C7_FISCORI),SC7->C7_FISCORI)
									Else
									    cFilialBsk:=xFilial("SC1",SC7->C7_FISCORI)
									EndIf
								Else
								    If !FWModeAccess("SC1")=="E"
									    cFilialBsk:=IIF(FWModeAccess("SC1")=="C",xFilial("SC1"),SC7->C7_FILIAL)
									Else
									    cFilialBsk:=xFilial("SC1")
									EndIf
								EndIf

								MaRetRoot( "SC1", cFilialBsk + SC7->C7_NUMSC + SC7->C7_ITEMSC, @aRoot, @nMaxLevel, @nLevel,nTree )
							Else
								MaRetRoot( "SC1", SC7->C7_NUMSC + SC7->C7_ITEMSC, @aRoot, @nMaxLevel, @nLevel,nTree )
							EndIf
						Else
							If lFilEnt
								MaRetRoot( "SC3", IIF(FWModeAccess("SC3")=="E",SC7->C7_FILIAL,xFilial("SC3")) + SC7->C7_NUMSC + SC7->C7_ITEMSC, @aRoot, @nMaxLevel, @nLevel,nTree )
							Else
								MaRetRoot( "SC3", SC7->C7_NUMSC + SC7->C7_ITEMSC, @aRoot, @nMaxLevel, @nLevel,nTree )
							EndIf
						EndIf
					Case !Empty( SC7->C7_MEDICAO ) .And. !Empty( SC7->C7_ITEMED )
			     		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Ponto de entrada na execucao da arvore originada do Gestão de Contratos     ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lMARETGCT
							lMRTGCT := ExecBlock( "MARETGCT", .f., .f.,{cKeyCNE,aRoot,nMaxLevel,nLevel,nTree} )

							If ValType(lMRTGCT)=="L"
								lRetMRTGCT:= lMRTGCT
							EndIf
						EndIf
						CND->( dbSetOrder( 4 ) )
						CND->(dbSeek(xFilial("CND") + SC7->C7_MEDICAO,.T.))

						If (CND->CND_FILIAL != xFilial("CND", CND->CND_FILCTR))
							CNB->(DbSetOrder(1))//CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM

							If CNB->( DbSeek( xFilial("CNB", CND->CND_FILCTR) + SC7->(C7_CONTRA+C7_CONTREV+C7_PLANILH+C7_ITEMED) ) )
								cSCNum := CNB->CNB_NUMSC
							EndIf
						EndIf
						If Empty(cSCNum)
							If lRetMRTGCT
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³ Medicao                                                      ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								cKeyCNE := SC7->C7_CONTRA + SC7->C7_CONTREV + SC7->C7_MEDICAO + SC7->C7_ITEMED
								
								If lFilEnt
									MaRetRoot( "CNE", IIF(FWModeAccess("CND")=="E",CND->CND_FILCTR,xFilial("CND")) + cKeyCNE, @aRoot, @nMaxLevel, @nLevel,nTree )
								Else
									MaRetRoot( "CNE",  cKeyCNE, @aRoot, @nMaxLevel, @nLevel,nTree )
								EndIf
							EndIf
						Else						
							MaRetRoot( "SC1", CNB->(xFilial("SC1", CNB_FILORI)+CNB_NUMSC + CNB_ITEMSC), @aRoot, @nMaxLevel, @nLevel,nTree )
						EndIf

				EndCase

				nLevel--

			EndIf

		EndIf

	Case cAlias == "SC1"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Solicitacoes de Compra                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC1->( DbSetOrder( 1 ) )
		If lFilEnt
			cTrkSeek:= cKey
		Else
			cTrkSeek:= xFilial( "SC1" ) + cKey
		EndIf

		If  SC1->( DbSeek (cTrkSeek) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "SC1", cKey, nLevel,nTree } )

				nLevel--

			EndIf

		EndIf

	Case cAlias == "SC3"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Contrato de Parceria                                         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC3->( DbSetOrder( 1 ) )
		If lFilEnt
			cTrkSeek := cKey
		Else
			cTrkSeek := xFilial( "SC3" ) + cKey
		EndIf

		If SC3->( DbSeek (cTrkSeek) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "SC3", cKey, nLevel,nTree  } )

				nLevel--

			EndIf

		EndIf

	Case cAlias == "SC8"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Cotacoes de Compra                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC8->( DbSetOrder( 3 ) )
		If lFilEnt
			cTrkSeek := cKey
		Else
			cTrkSeek:= xFilial( "SC8" ) + cKey
		EndIf

		If SC8->( DbSeek (cTrkSeek) )

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "SC8", cKey, nLevel,nTree } )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				Do Case					
					
					Case !Empty( SC8->C8_NUMSC ) .AND. !Empty( SC8->C8_ITEMSC ) .And. SC8->( Empty(C8_NUMCON) .Or. C8_NUMCON == Replicate('X', Len(C8_NUMCON)) )

						cAliasQry := GetNextAlias()

						cQuery := ""

						If lFilEnt
							cQuery += "SELECT C1_FILIAL,C1_NUM,C1_ITEM FROM " + RetSqlName( "SC1" ) + " "
							cQuery += "WHERE "
							If FWModeAccess("SC1") == "E"  .And. FWModeAccess("SC8") == "E"
								cQuery += "C1_FILIAL='"  + SC8->C8_FILIAL   + "' AND "
							Else
								cQuery += "C1_FILIAL='"  + xFilial( "SC1" ) + "' AND "
							EndIf
							cQuery += "C1_COTACAO='" + SC8->C8_NUM      + "' AND "
							cQuery += "C1_PRODUTO='" + SC8->C8_PRODUTO  + "' AND "
							cQuery += "C1_IDENT='"   + SC8->C8_IDENT  + "' AND "
							cQuery += "D_E_L_E_T_=' ' "
							cQuery += "ORDER BY C1_FILIAL,C1_NUM,C1_ITEM"
						Else
							cQuery += "SELECT C1_NUM,C1_ITEM FROM " + RetSqlName( "SC1" ) + " "
							cQuery += "WHERE "
							cQuery += "C1_FILIAL='"  + xFilial( "SC1" ) + "' AND "
							cQuery += "C1_COTACAO='" + SC8->C8_NUM      + "' AND "
							cQuery += "C1_PRODUTO='" + SC8->C8_PRODUTO  + "' AND "
							cQuery += "C1_IDENT='"   + SC8->C8_IDENT  + "' AND "
							cQuery += "D_E_L_E_T_=' ' "
							cQuery += "ORDER BY C1_NUM,C1_ITEM"
						EndIf

						cQuery := ChangeQuery( cQuery )

						dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry, .F., .T. )

						If lFilEnt
							While !( cAliasQry )->( Eof() )
								MaRetRoot( "SC1", ( cAliasQRY )->C1_FILIAL + ( cAliasQRY )->C1_NUM + ( cAliasQRY )->C1_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
								nTree++
								( cAliasQry )->( dbSkip() )
							End
						Else
							While !( cAliasQry )->( Eof() )
								MaRetRoot( "SC1", ( cAliasQRY )->C1_NUM + ( cAliasQRY )->C1_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
								nTree++
								( cAliasQry )->( dbSkip() )
							End
						EndIf

						( cAliasQry )->( dbCloseArea() )
						dbSelectArea( "SC1" )

				EndCase

				nLevel--
			EndIf
		Else
			//Tratamento para buscar a filial da cotação quando os pedidos de compra forem administrados com pela filial de entrega
			If lCotFiap
				cCotFiap := GetNextAlias()
				BeginSQL Alias cCotFiap
					SELECT	C8_FILIAL,
						C8_NUM,
						C8_PRODUTO,
						C8_FORNECE,
						C8_LOJA,
						C8_NUMPED,
						C8_ITEM,
						C8_NUMSC
					FROM %Table:SC8% SC8 

					WHERE	SC8.C8_PRODUTO 		= %Exp:SC7->C7_PRODUTO%
						AND SC8.C8_FORNECE	= %Exp:SC7->C7_FORNECE%
						AND SC8.C8_LOJA 	= %Exp:SC7->C7_LOJA%
						AND SC8.C8_NUMPED 	= %Exp:SC7->C7_NUM%
						AND SC8.C8_ITEM     = %Exp:SC7->C7_ITEM%
						AND SC8.%NotDel%
				EndSQL

					While (cCotFiap)->(!EOF())
						MaRetRoot( "SC8", ( cCotFiap )->C8_FILIAL + SC7->C7_NUMCOT + SC7->C7_PRODUTO + SC7->C7_FORNECE + SC7->C7_LOJA + SC7->C7_NUM + SC7->C7_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
						nTree++
						( cCotFiap )->( dbSkip() )
					End 	
			EndIf
		EndIf

	Case cAlias == "SD1"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens de nota de entrada                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SD1->( DbSetOrder( 1 ) )
		If SD1->( DbSeek( xFilial( "SD1" ) + cKey ) )

			If nLevel <= nMaxLevel

				nLevel++

				If lFilEnt
					AAdd( aRoot, { "SD1", xFilial("SD1") + cKey, nLevel,nTree } )
				Else
					AAdd( aRoot, { "SD1", cKey, nLevel,nTree } )
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				Do Case
					Case !Empty( SD1->D1_PEDIDO ) .AND. !Empty( SD1->D1_ITEMPC )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Pedido de Compra                                             ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lFilEnt
							MaRetRoot( "SC7", SC7->(xFilEnt(xFilial("SC7"))) + SD1->D1_PEDIDO + SD1->D1_ITEMPC, @aRoot, @nMaxLevel, @nLevel,nTree )
						Else
							MaRetRoot( "SC7", SD1->D1_PEDIDO + SD1->D1_ITEMPC, @aRoot, @nMaxLevel, @nLevel,nTree )
						EndIf
					Case cPaisLoc<>"BRA" .AND. !Empty(SD1->D1_REMITO)
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Remito de Compra                                             ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaRetRoot( "SD1", SD1->D1_REMITO + SD1->D1_SERIREM + SD1->D1_FORNECE + SD1->D1_LOJA + SD1->D1_COD + SD1->D1_ITEMREM, @aRoot, @nMaxLevel, @nLevel,nTree )
				EndCase

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se o item foi devolvido                             ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				cAliasQry := GetNextAlias()

				cQuery := ""

				cQuery += "SELECT D2_FILIAL,D2_DOC,D2_SERIE,D2_CLIENTE,D2_LOJA,D2_COD,D2_ITEM "
				cQuery += "FROM " + RetSqlName( "SD2" ) + " "
				cQuery += "WHERE "
				cQuery += "D2_FILIAL='"  + xFilial( "SD2" ) + "' AND "
				cQuery += "D2_NFORI ='" + SD1->D1_DOC + "' AND "
				cQuery += "D2_SERIORI ='" + SD1->D1_SERIE + "' AND "
				cQuery += "D2_ITEMORI ='" + SD1->D1_ITEM + "' AND "
				cQuery += "D2_CLIENTE ='" + SD1->D1_FORNECE + "' AND "
				cQuery += "D2_LOJA ='" + SD1->D1_LOJA + "' AND "
				cQuery += "D_E_L_E_T_=' ' "

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. )

				While !( cAliasQry )->( Eof() )
					nTree++
					MaRetRoot("SD2",(cAliasQry)->D2_DOC+(cAliasQry)->D2_SERIE+(cAliasQry)->D2_CLIENTE+;
					(cAliasQry)->D2_LOJA+(cAliasQry)->D2_COD+(cAliasQry)->D2_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree)
					( cAliasQry )->( dbSkip() )
				End

				(cAliasQry)->(dbCloseArea())
				dbSelectArea("SD2")

				nLevel--

			EndIf

		EndIf

	Case cAlias == "SCK"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do orcamento                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		If nLevel <= nMaxLevel

			nLevel++
			SCK->( DbSetOrder( 1 ) )
			If SCK->( DbSeek( xFilial( "SCK" ) + cKey ) )
				AAdd( aRoot, { "SCK", SCK->CK_NUM + SCK->CK_ITEM, nLevel,nTree } )

				cAliasTmp  := GetNextAlias()
				cIndexKey := AD1->( IndexKey() )

				cCond     := ""
				cCond     += "AD1_FILIAL=='" + xFilial( "AD1" ) + "' .AND. "
				cCond     += "AD1_NUMORC=='" + SCK->CK_NUM      + "'"

				IndRegua( "AD1", cAliasTmp, cIndexKey, , cCond )

				AD1->( dbGoTop() )

				While !AD1->( Eof() )
					MaRetRoot( "AD1", AD1->AD1_NROPOR, @aRoot, @nMaxLevel, @nLevel,nTree )
					AD1->( dbSkip() )
				End

				RetIndex( "AD1" )

			EndIf

			nLevel--
		EndIf

	Case cAlias == "AAN"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do contrato de servico - parceria                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
		    nLevel++

			AAN->( DbSetOrder( 1 ) )
			If AAN->( DbSeek( xFilial( "AAN" ) + cKey ) )
				AAdd( aRoot, { "AAN", cKey, nLevel,nTree } )
			EndIf

			nLevel--
		EndIf

	Case cAlias == "AAO"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do contrato de servico - WMS                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++
			AAO->( DbSetOrder( 1 ) )
			If AAO->( DbSeek( xFilial( "AAO" ) + cKey ) )
				AAdd( aRoot, { "AAO", cKey, nLevel,nTree } )
			EndIf
			nLevel--
		EndIf

	Case cAlias == "ADB"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do contrato de parceria - Venda                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++
			ADB->( DbSetOrder( 1 ) )
			If ADB->( DbSeek( xFilial( "ADB" ) + cKey ) )
				AAdd( aRoot, { "ADB", cKey, nLevel,nTree } )
			EndIf
			nLevel--
		EndIf

	Case cAlias == "AD1"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do contrato de servico - WMS                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++
			AD1->( DbSetOrder( 1 ) )
			If AD1->( DbSeek( xFilial( "AD1" ) + cKey ) )
				AAdd( aRoot, { "AD1", cKey, nLevel,nTree } )
			EndIf
			nLevel--
		EndIf

	Case cAlias == "ADY"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Proposta Comercial                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++
			ADY->( DbSetOrder( 1 ) )
			If ADY->( DbSeek( xFilial( "ADY" ) + cKey ) )
				AAdd( aRoot, { "ADY", cKey, nLevel,nTree } )
			EndIf
			nLevel--
		EndIf

	Case cAlias == "AAH"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Contrato de Manutencao                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++
			AAH->( DbSetOrder( 6 ) )
			If AAH->( DbSeek( xFilial( "AAH" ) + cKey ) )
				AAdd( aRoot, { "AAH", cKey, nLevel,nTree } )
			EndIf
			nLevel--
		EndIf

	Case cAlias == "AAA"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Grupo de Cobertura                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++
			AAA->( DbSetOrder( 1 ) )
			If AAA->( DbSeek( xFilial( "AAA" ) + cKey ) )
				AAdd( aRoot, { "AAA", cKey, nLevel,nTree } )
			EndIf
			nLevel--
		EndIf

	Case cAlias == "AAM"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Contrato de Servicos                                         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++
			AAM->( DbSetOrder( 3 ) )
			If AAM->( DbSeek( xFilial( "AAM" ) + cKey ) )
				AAdd( aRoot, { "AAM", cKey, nLevel,nTree } )
			EndIf
			nLevel--
		EndIf

	Case cAlias == "SUB"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Itens do atendimento do telemarketing                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++
			SUB->( DbSetOrder( 1 ) )
			If SUB->( DbSeek( xFilial( "SUB" ) + cKey ) )
				AAdd( aRoot, { "SUB", cKey, nLevel,nTree } )
			EndIf
			nLevel--
		EndIf

	Case cAlias == "SA1"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Cadastro de Cliente -> Procura pelo Prospect                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		If nLevel <= nMaxLevel
			nLevel++

			SA1->( DbSetOrder( 1 ) )
			If SA1->( DbSeek( xFilial( "SA1" ) + cKey ) )

				AAdd( aRoot, { "SA1", SA1->A1_COD+SA1->A1_LOJA, nLevel,nTree } )

				SUS->( DbSetOrder( 5 ) )
				If SUS->( DbSeek( xFilial( "SUS" ) + cKey ) )
					MaRetRoot( "SUS", SUS->US_COD + SUS->US_LOJA, @aRoot, @nMaxLevel, @nLevel,nTree )
				EndIf
			EndIf
			nLevel--

		Endif

	Case cAlias == "SUS"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Cadastro de Prospect -> Procura pelo Suspect                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nLevel <= nMaxLevel
			nLevel++

			SUS->( DbSetOrder( 1 ) )
			If SUS->( DbSeek( xFilial( "SUS" ) + cKey ) )

				AAdd( aRoot, { "SUS", SUS->US_COD+SUS->US_LOJA, nLevel,nTree } )

				ACH->( DbSetOrder( 4 ) )
				If ACH->( DbSeek( xFilial( "ACH" ) + cKey ) )
					MaRetRoot( "ACH", ACH->ACH_CODIGO, @aRoot, @nMaxLevel, @nLevel,nTree )
				EndIf
			EndIf
			nLevel--
		Endif

	Case cAlias == "ACH"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Cadastro de Suspect -> Origem                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ACH->( DbSetOrder( 1 ) )
		If ACH->( DbSeek( xFilial( "ACH" ) + cKey ) )
			If nLevel <= nMaxLevel
				nLevel++
				AAdd( aRoot, { "ACH", ACH->ACH_CODIGO+ACH->ACH_LOJA,nLevel,nTree } )
				nLevel--
			Endif
		Endif

	Case cAlias == "CND20"
		If nLevel <= nMaxLevel
			nLevel++
			AAdd(aRoot,{"CND20", cKey, nLevel, nTree})
			nLevel--
		EndIf

	Case cAlias == "CXN20"
		If nLevel <= nMaxLevel
			nLevel++
			AAdd(aRoot, {"CXN20", cKey, nLevel, nTree})
			nLevel--
		EndIf
	
	Case cAlias == "CNE20"
		If nLevel <= nMaxLevel
			nLevel++
			AAdd( aRoot,{"CNE20", cKey, nLevel,nTree })
			nLevel--
		EndIf
		
	Case cAlias == "CND21"
		If nLevel <= nMaxLevel
			nLevel++
			AAdd(aRoot,{"CND21", cKey, nLevel, nTree})
			nLevel--
		EndIf

	Case cAlias == "CXN21"
		If nLevel <= nMaxLevel
			nLevel++
			AAdd(aRoot, {"CXN21", cKey, nLevel, nTree})
			nLevel--
		EndIf
	
	Case cAlias == "CNE21"
		If nLevel <= nMaxLevel
			nLevel++
			AAdd( aRoot,{"CNE21", cKey, nLevel,nTree })
			nLevel--
		EndIf

	Case cAlias == "CNE"
		cTrkSeek	:= cKey //- Item da medicao
		cAliasQry 	:= GetNextAlias()

		nTamFil    	:= Iif(lFilEnt,Len( CNE->CNE_FILIAL ),0)+1
		NTamContra 	:= Iif(lFilEnt,Len( CNE->CNE_FILIAL ),0)+Len( CNE->CNE_CONTRA )+1
		NTamRevisa 	:= Iif(lFilEnt,Len( CNE->CNE_FILIAL ),0)+Len( CNE->CNE_CONTRA )+Len( CNE->CNE_REVISA )+1
		NTamMed    	:= Iif(lFilEnt,Len( CNE->CNE_FILIAL ),0)+Len( CNE->CNE_CONTRA )+Len( CNE->CNE_REVISA )+Len( CNE->CNE_NUMMED )+1
		
		cQuery := ""
		cQuery += "SELECT CNE_NUMMED, CNE_CONTRA, CNE_ITEM, CNE_NUMERO, CNE_REVISA,CNE_FILIAL FROM "+RetSqlName("CNE")+" CNE "
		cQuery += "WHERE "
		If(lFilEnt)
		 If Substr(cTrkSeek,1, Len( CNE->CNE_FILIAL )) == CND->CND_FILIAL .and. CND->CND_CONTRA == Substr(cTrkSeek,nTamFil, Len( CNE->CNE_CONTRA )).and.Substr(cTrkSeek,nTamContra, Len( CNE->CNE_REVISA )) == CND->CND_REVISA
			cQuery += "CNE_FILIAL='" + Substr(cTrkSeek,  1          , Len( CNE->CNE_FILIAL )) + "' AND "
		  Else
		  	cQuery += "CNE_FILIAL='" + xFilial( "CNE" )  + "' AND "
		  EndIf	
		Else
			cQuery += "CNE_FILIAL='" + xFilial( "CNE" ) + "' AND "
		EndIf

		cQuery += "CNE_CONTRA='" + Substr(cTrkSeek,  nTamFil    , Len( CNE->CNE_CONTRA )) + "' AND "
		cQuery += "CNE_REVISA='" + Substr(cTrkSeek,  nTamContra	, Len( CNE->CNE_REVISA )) + "' AND "
		cQuery += "CNE_NUMMED='" + Substr(cTrkSeek,  nTamRevisa	, Len( CNE->CNE_NUMMED )) + "' AND "
		cQuery += "CNE_ITEM  ='" + Substr(cTrkSeek,  nTamMed    , Len( CNE->CNE_ITEM  ) ) + "' AND "
		cQuery += "CNE.D_E_L_E_T_='' "
		cQuery += "ORDER BY " + SqlOrder( CNE->( IndexKey() ) )

		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

		If !( cAliasQry )->( Eof() )
			If nLevel <= nMaxLevel
				nLevel++
				AAdd( aRoot, { "CNE", cKey, nLevel,nTree } )
				cFilCTR:= Substr(cTrkSeek,1, Len( CNE->CNE_FILIAL ))
				//- Verifica tipo do contrato
				CN9->( DbSetOrder(1) )
				If CN9->( DbSeek( xFilial("CN9", cFilCTR)+ ( cAliasQRY )->CNE_CONTRA + ( cAliasQRY )->CNE_REVISA ) )
					CN1->( DbSetOrder(1) )
					If CN1->( DbSeek(xFilial("CN1", cFilCTR) + CN9->CN9_TPCTO ) )
						If Empty( ( cAliasQRY )->CNE_NUMERO )
							// Se não tem planilha no CNE, busca tipo na CN1
							lFixoGCT := Empty( CN1->CN1_CTRFIX ) .OR. (CN1->CN1_CTRFIX == "1")
						Else
							// se tem planilha posiciona na CNA antes de chamar a CN300RetSt()
							CNA->( DbSetOrder(1) ) // CNA_FILIAL+CNA_CONTRA+CNA_REVISA+CNA_NUMERO
							If CNA->( DbSeek( xFilial("CNA", cFilCTR) + ( cAliasQRY )->CNE_CONTRA + ( cAliasQRY )->CNE_REVISA + ( cAliasQRY )->CNE_NUMERO ) )
								lFixoGCT := CN300RetSt("FIXO")

								// verifica se tem item de planilha
								CNB->( DbSetOrder(1) ) // CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
								lTemItem := CNB->( DbSeek( xFilial("CNB", cFilCTR) + ( cAliasQRY )->CNE_CONTRA + ( cAliasQRY )->CNE_REVISA + ( cAliasQRY )->CNE_NUMERO + StrZero( Val( ( cAliasQRY )->CNE_ITEM ), Len( CNB->CNB_ITEM ) ) ) )
							Endif
						EndIf
					EndIf
				Endif

				//- Analisa origem
				Do 	Case
					Case !Empty( ( cAliasQRY )->CNE_NUMERO ) .And. lTemItem
						//- Planilhas
						MaRetRoot( "CNB", ( cAliasQRY )->CNE_CONTRA + ( cAliasQRY )->CNE_REVISA + ( cAliasQRY )->CNE_NUMERO + StrZero( Val( ( cAliasQRY )->CNE_ITEM ), Len( CNB->CNB_ITEM ) ), @aRoot, @nMaxLevel, @nLevel,nTree )
					Case !lFixoGCT
						//- Contrato
						MaRetRoot( "CN9", ( cAliasQRY )->CNE_CONTRA + ( cAliasQRY )->CNE_REVISA, @aRoot, @nMaxLevel, @nLevel,nTree )
				EndCase
				nLevel--
			EndIf
		EndIf
	   ( cAliasQry )->( dbCloseArea())

	Case cAlias == "CNB"
		CNB->(DbSetOrder(1)) //CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
		If CNB->( DbSeek( xFilial("CNB", CND->CND_FILCTR) + cKey ) )
			cKey := xFilial("CNB", CND->CND_FILCTR) + cKey
			If nLevel <= nMaxLevel
				nLevel++
				AAdd( aRoot, { "CNB", cKey, nLevel,nTree } )

				//- Analisa origem
				If !Empty( CNB->CNB_NUMSC + CNB->CNB_ITEMSC ) .And. Empty(CN9->CN9_NUMCOT)
					//- Solicitacao de compras
					If lFilEnt
						MaRetRoot( "SC1", CNB->CNB_FILORI + CNB->CNB_NUMSC + CNB->CNB_ITEMSC, @aRoot, @nMaxLevel, @nLevel,nTree )
					Else
						MaRetRoot( "SC1", CNB->CNB_NUMSC + CNB->CNB_ITEMSC, @aRoot, @nMaxLevel, @nLevel,nTree )
					EndIf
				EndIf
				nLevel--
			EndIf
		EndIf

	Case cAlias == "CN9"
    	cAliasQry := GetNextAlias()
		CN9->( DbSetOrder( 1 ) )
		If !lFilEnt
			cTrkSeek:= cKey
		Else
			cTrkSeek:= xFilial( "CN9" ) + cKey
		EndIf
		If CN9->( DbSeek( cTrkSeek ) )
			If nLevel <= nMaxLevel
				nLevel++
				

				cQuery := " SELECT "
				cQuery += " 	CNB.CNB_NUMSC, "
				cQuery += " 	CNB.CNB_ITEMSC, "
				cQuery += " 	SC1.C1_COTACAO, "
				cQuery += " 	CNB.CNB_PRODUT, "
				cQuery += " 	CNA.CNA_FORNEC, "
				cQuery += " 	CNA.CNA_LJFORN "
				cQuery += " FROM " + RetSqlName("CN9") + " CN9  "
				cQuery += " 	INNER JOIN " + RetSqlName("CNA") + " CNA ON "
				cQuery += " 		CN9_NUMERO = CNA_CONTRA AND "
				cQuery += " 		CN9_REVISA = CNA_REVISA "
				cQuery += " 	INNER JOIN " + RetSqlName("CNB") + "  CNB ON "
				cQuery += " 		CNA_CONTRA = CNB_CONTRA AND "
				cQuery += " 		CNA_REVISA = CNB_REVISA AND "
				cQuery += " 		CNA_NUMERO = CNB_NUMERO "
				cQuery += " 	INNER JOIN " + RetSqlName("SC1") + " SC1 ON "
				cQuery += " 		CNB.CNB_NUMSC = SC1.C1_NUM"
				cQuery += " 		AND CNB.CNB_ITEMSC = SC1.C1_ITEM"				
				cQuery += " 		AND SC1.C1_COTACAO NOT IN('"+ Replicate('X', Len(SC1->C1_COTACAO)) +"','"+Space(Len(SC1->C1_COTACAO)) +"') "								
				cQuery += " WHERE  "
				cQuery += " 	CN9_NUMERO = '"+ CN9->CN9_NUMERO + "' AND "
				cQuery += "   CN9.D_E_L_E_T_=' ' AND "
				cQuery += "   CNA.D_E_L_E_T_=' ' AND "
				cQuery += "   CNB.D_E_L_E_T_=' ' AND "
				cQuery += "   SC1.D_E_L_E_T_=' ' "


				cQuery := ChangeQuery( cQuery )
				dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

				If !( cAliasQry )->( Eof() )
					MaRetRoot( "SC8", xFilial("SC8")+( cAliasQry )->C1_COTACAO + ( cAliasQry )->CNB_PRODUT + ( cAliasQry )->CNA_FORNEC + ( cAliasQry )->CNA_LJFORN/*+ SC7->C7_NUM + SC7->C7_ITEM*/,@aRoot,@nMaxLevel, @nLevel,nTree )
				else
					AAdd( aRoot, { "CN9", cKey, nLevel,nTree } )
				Endif

				nLevel--
			EndIf
		EndIf

	Case cAlias == "CO1"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Edital                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//Necessário guardar a posição da SC7 pois na primeira execução o Tracker está disposicionando
		aAreaSC7 := SC7->(GetArea()) 

		CO1->( DbSetOrder( 1 ) )

		If  CO1->( DbSeek(xFilial( "CO1", RetFilSC7() )+cKey))

			cAliasQry := GetNextAlias()

			If nLevel <= nMaxLevel

				nLevel++

				//AAdd( aRoot, { "CO1", CO1->CO1_CODEDT+CO1->CO1_NUMPRO, nLevel,nTree } ) //Esta linha foi reposicionada para atender ao Edital por Lote

				oModel 	:= FwModelActive()

				If ValType(oModel) <> "O"
					If CO1->CO1_AVAL == "1"
						oModel := FwLoadModel('GCPA200')
					Else
						oModel := FwLoadModel('GCPA201')
					EndIf
					oModel:SetOperation(MODEL_OPERATION_UPDATE)
					oModel:Activate()
				EndIf

				If lUsaLote := oModel:GetId() == 'GCPA201'
					oModCP3 := oModel:GetModel("CP3DETAIL")
				EndIf
				oModCO2 	:= oModel:GetModel("CO2DETAIL")
				oModCO3 	:= oModel:GetModel("CO3DETAIL")
				oModCP4 	:= oModel:GetModel("CP4DETAIL")

				//Posiciona os Modelos
				If nGo == 1
					If lUsaLote
						oModCP3:GoLine(nGo)
					EndIf
					oModCO2:GoLine(nGo)
					If !(Empty(oModCP4:GetValue('CP4_NUMSC')))
						oModCP4:GoLine(nGo)
					ElseIf CO1->CO1_GERDOC == '2'
						oModCO3:GoLine(nGo)
					EndIf
				EndIf

				//Verifica se a origem é Analise de Mercado
				COM->(DbSetOrder(2))
				If COM->(DbSeek(xFilial("COM")+CO1->CO1_CODEDT+CO1->CO1_NUMPRO))
					MaRetRoot( "COM", xFilial("COM") + COM->COM_CODIGO,@aRoot,@nMaxLevel, @nLevel,nTree )
				EndIf

				If !(Empty(oModCP4:GetValue('CP4_NUMSC')))
					nPosCP4 := oModCP4:GetLine() + 1
					If nPosCP4 <= oModCP4:Length()
						oModCP4:GoLine(nPosCP4)
					Else
						If oModCO2:GetLine() < oModCO2:Length()
							nPosCO2 := oModCO2:GetLine() + 1
						Else
							If lUsaLote .And. oModCP3:GetLine() <= oModCP3:Length()
								nPosCP3 := oModCP3:GetLine() + 1
								oModCP3:GoLine(nPosCP3)
								oPosCO2 := 1
							EndIf
						EndIf
							oModCO2:GoLine(nPosCO2)
					EndIf
				Else
					If oModCO2:GetLine() < oModCO2:Length()
						nPosCO2 := oModCO2:GetLine() + 1
					Else
						If lUsaLote .And. oModCP3:GetLine() <= oModCP3:Length()
							nPosCP3 := oModCP3:GetLine() + 1
							oModCP3:GoLine(nPosCP3)
							oPosCO2 := 1
						EndIf
					EndIf
					oModCO2:GoLine(nPosCO2)
				EndIf

				If lUsaLote
					AAdd( aRoot, { "CO1", CO1->CO1_CODEDT + CO1->CO1_NUMPRO + oModCP3:GetValue('CP3_LOTE'), nLevel,nTree } )
				Else
					AAdd( aRoot, { "CO1", CO1->CO1_CODEDT + CO1->CO1_NUMPRO, nLevel,nTree } )
				EndIf

				nLevel--

			EndIf

		EndIf

		RestArea(aAreaSC7)

	Case cAlias == "COM"

		COM->( DbSetOrder( 2 ) )

		If COM->( DbSeek( xFilial( "COM" ) + CO1->(CO1_CODEDT+CO1_NUMPRO) ) )

			cAliasQry := GetNextAlias()

			If nLevel <= nMaxLevel

				nLevel++

				AAdd( aRoot, { "COM", cKey, nLevel,nTree } )

				oModel 	:= FwModelActive()
				oModCO2 	:= oModel:GetModel("CO2DETAIL")
				oModCP4 	:= oModel:GetModel("CP4DETAIL")

				//oModCO2:GoLine(nGo)

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Analisa origem                                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				cQuery := ""
				cQuery := " SELECT "
				cQuery += " 	SC1.C1_NUM, "
				cQuery += " 	SC1.C1_ITEM "
				cQuery += " FROM " + RetSqlName("SC1") + " SC1  "
				cQuery += " WHERE "
				cQuery += " C1_CODED = '"+  CO1->CO1_CODEDT + "' AND "
				cQuery += " C1_NUMPR = '"+  CO1->CO1_NUMPRO + "' AND "
				cQuery += " C1_COTACAO = 'ANALIS' AND "
				cQuery += " C1_NUM = '" + oModCP4:GetValue('CP4_NUMSC') + "' AND "
				cQuery += " C1_PRODUTO = '"+  oModCO2:GetValue("CO2_CODPRO") + "' AND "
				cQuery += " SC1.D_E_L_E_T_ = ' ' "

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

	        	cC1Num	:= ( cAliasQry )->C1_NUM

				While !( cAliasQry )->( Eof() )
					If lFilEnt
					    If !FWModeAccess("SC1")=="E"
						    cFilialBsk:=IIF(FWModeAccess("SC1")=="C",xFilial("SC1"),SC7->C7_FILIAL)
						Else
						    cFilialBsk:=xFilial("SC1")
						EndIf
						MaRetRoot( "SC1", cFilialBsk + ( cAliasQry )->C1_NUM + ( cAliasQry )->C1_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
					Else
						MaRetRoot( "SC1", ( cAliasQry )->C1_NUM + ( cAliasQry )->C1_ITEM, @aRoot, @nMaxLevel, @nLevel,nTree )
					EndIf
					DbSelectArea( cAliasQry )
					( cAliasQry )->(DbSkip())
				EndDo

				nLevel--

			EndIf

		EndIf

	OtherWise
		Aviso( STR0001, STR0002 + cAlias, { STR0003 } )  //"Aviso","Nao existe localizador para a entidade ","Ok"
EndCase

Return( Nil )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³MaConvRoot³ Autor ³ Sergio Silveira       ³ Data ³12/12/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Obtem origens de cabecalho a partir das origens de item    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ExpA1 := MaConvRoot( ExpA2 )                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpA1 -> Array contendo as entidades de inicio header      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 -> Array contendo as entidades de inicio itens       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GENERICO                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaConvRoot( aEnt )

Local aNewEnt   := {}
Local aParc     := {}
Local cEntidade := ""
Local nLoop     := 0
Local nTamCNEIt := TamSx3('CNE_ITEM')[1]
Local nTamNumPl := TamSx3('CXN_NUMPLA')[1]
Local lCNTA300  := FwIsInCallStack("CNTA300")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Percorre as entidades ja existentes                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nLoop := 1 to Len( aEnt )

	cEntidade := aEnt[ nLoop, 1 ]

	aParc := {}

	Do Case
		Case cEntidade == "SCK"
			aParc := { "SCJ", Left( aEnt[ nLoop, 2 ], 6 ), aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "SC6"
			aParc := { "SC5", Left( aEnt[ nLoop, 2 ], 6 ), aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "SUB"
			aParc := { "SUA", Left( aEnt[ nLoop, 2 ], 6 ), aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "SD2"
			aParc := { "SF2", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - 2 ),aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "SD1"
			aParc := { "SF1", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - 4 ),aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "SC7"
			aParc := { "SC7H", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - 4 ),aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "SC1"
			If !( Empty(SC1->C1_CODED) .And. Empty(SC1->C1_NUMPR) )
				aParc := { "CO1", Left( SC1->C1_CODED+SC1->C1_NUMPR, Len( SC1->C1_CODED+SC1->C1_NUMPR) ) ,aEnt[ nLoop, 3 ] }
			Else
				aParc := { "SC1H", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - 4 ),aEnt[ nLoop, 3 ] }
			EndIf
		
		Case cEntidade == "SC3"
			aParc := { "SC3H", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - 4 ),aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "SC8" .And. !lCNTA300
			aParc := { "SC8H", Left( aEnt[ nLoop, 2 ], Len( SC8->C8_NUM ) ) ,aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "CNB"
			aParc := { "CNA", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - Len( CNB->CNB_ITEM ) ) ,aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "CNE"
			aParc := { "CND", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - Len( CNE->CNE_ITEM ) ) ,aEnt[ nLoop, 3 ] }		
		
		Case cEntidade == "CNE21"
			aParc := { "CXN21", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - nTamCNEIt ), aEnt[ nLoop, 3 ] }
		
		Case cEntidade == 'CXN21'
			aParc := { "CND21", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) - nTamNumPl ), aEnt[ nLoop, 3 ] }		
		
		Case cEntidade == "CN9" .And. !lCNTA300
			aParc := { "CN9H", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) ) ,aEnt[ nLoop, 3 ] }
		
		Case cEntidade == "CO1"
			aParc := { "SC1", Left( aEnt[ nLoop, 2 ], Len( aEnt[ nLoop, 2 ] ) ) ,aEnt[ nLoop, 3 ] }
	EndCase


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se ja existe esta entidade                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !Empty( aParc )
		If Empty( AScan( aNewEnt, { |x| x[1] == aParc[1] .And. x[2] == aParc[2] } ) )
			AAdd( aNewEnt, AClone( aParc ) )
		EndIf
	EndIf

Next nLoop

Return( aNewEnt )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKAB2 ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos chamados tecnicos                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKAB2( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³05/07/2006³ Cleber M.     ³Bops 101209: Alterada a ordem para montar   ³±±
±±³          ³               ³primeiro o Orcam. (AB4) e depois a OS (AB7) ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKAB2(	cNrCham,	oTree,	cAddString,		nLevel,;
					nMaxLevel,	lItem,	cTreeID	)

Local cImageAB2   := ""									// Imagem do arquivo AB2

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Variaveis usadas em Integracoes                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

AB2->( DbSetOrder( 1 ) )
If AB2->( DbSeek( xFilial( "AB2" ) + cNrCham ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageAB2 := MaEntImage( "AB2", 1 )

		oTree:AddItem( Pad( STR0004 + Transform( cNrCham, "@R XXXXXXXX/XX" ) + cAddString, 100 ),; //"Chamado/Item - "
		Pad( "AB2-" + cNrCham, 50 ) + cTreeID,cImageAB2,cImageAB2,,,nLevel)
		oTree:TreeSeek( Pad( "AB2-" + cNrCham, 50 ) + cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Do Case
			Case !Empty( AB2->AB2_NUMORC )
				MATRKAB4( AB2->AB2_NUMORC, @oTree, , @nLevel, nMaxLevel, ,cTreeID )
			Case !Empty( AB2->AB2_NUMOS )
				MATRKAB7( AB2->AB2_NUMOS, @oTree, , @nLevel, nMaxLevel, ,cTreeID )
			Case !Empty( AB2->AB2_NUMHDE )
				MATRKABL( AB2->AB2_NUMHDE, @oTree, , @nLevel, nMaxLevel, ,cTreeID )
		EndCase

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica as FNCs geradas no QNC                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oTree:TreeSeek( Pad( "AB2-" + cNrCham, 50 ))
       	If !Empty(AB2->AB2_CODFNC)
			MATRKQI2( AB2->AB2_CODFNC + AB2->AB2_FNCREV, @oTree, , @nLevel, nMaxLevel,,cTreeID, "TEC", "AB2-" + cNrCham )
		EndIf

	EndIf

	nLevel--

EndIf
oTree:Refresh()
oTree:Show()
Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKABI ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos projetos                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKABI( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKABI( cProjet, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

Local cImageABI   := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

ABI->( DbSetOrder( 1 ) )
If ABI->( DbSeek( xFilial( "ABI" ) + cProjet ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		oTree:TreeSeek( "ABI-" )

		cImageABI := MaEntImage( "ABI", 1 )

		oTree:AddItem( Pad( STR0005 + Transform( cProjet,"@R XXXXXX/XX" ) + ; //"Projeto/Item - "
		If( !Empty( cAddString ), " - " + STR0006 + cAddString, "" ), 100 ),; //" - Cliente : "
		Pad( "ABI-" + cProjet, 50 )+cTreeID,cImageABI,cImageABI,,,nLevel)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Geracao de OS                                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty( ABI->ABI_NUMOS )
			oTree:TreeSeek( Pad( "ABI-" + cProjet, 50 )+cTreeID )
			MATRKAB7( ABI->ABI_NUMOS, @oTree, , @nLevel, nMaxLevel,,cTreeID )
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Geracao de pedido de venda                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty( ABI->ABI_NUMPV + ABI->ABI_ITEMPV )
			oTree:TreeSeek( Pad( "ABI-" + cProjet, 50 ) )
			MATRKSC6( ABI->ABI_NUMPV + ABI->ABI_ITEMPV, @oTree, , @nLevel, nMaxLevel,,cTreeID )
		EndIf

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKAB7 ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas da OS                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKAB7( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKAB7( cNumOs, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cNumLaudo  := ""
LOCAL cAgenda    := ""
LOCAL cReq       := ""
LOCAL cImageAB7  := ""
LOCAL cImageAB9  := ""
LOCAL cImageABF  := ""
LOCAL cImageABB  := ""
LOCAL cQuery     := ""
LOCAL cAliasQry  := ""
DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

AB7->( DbSetOrder( 1 ) )
If AB7->( DbSeek( xFilial( "AB7" ) + cNumOs ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageAB7 := MaEntImage( "AB7", 1 )

		oTree:AddItem( Pad( STR0007 + Transform( cNumOs, "@R XXXXXX/XX" ) + ; //"O.S./Item - "
		cAddString,100), Pad( "AB7-" + cNumOs, 50 ) + cTreeID,cImageAB7,cImageAB7,,,nLevel) //  //" - Cliente : "

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se existem laudos, cria as ocorrencias                                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Obtem o alias devido a recursividade                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cAliasQry := GetNextAlias()

		cQuery := ""
		cQuery += "SELECT AB9_NUMOS, AB9_CODTEC, AB9_SEQ, AB9_NUMORC FROM "+RetSqlName("AB9")+" AB9 "
		cQuery += "WHERE "
		cQuery += "AB9_FILIAL='"  + xFilial( "AB9" ) + "' AND "
		cQuery += "AB9_NUMOS='"   + cNumOs           + "' AND "
		cQuery += "AB9.D_E_L_E_T_<>'*' "
		cQuery += "ORDER BY " + SqlOrder( AB9->( IndexKey() ) )

		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

		If Alias() == cAliasQry
			oTree:TreeSeek( Pad( "AB7-" + cNumOs, 50 ) + cTreeID )
			cImageAB9 := MaEntImage( "AB9", 1 )

			While !Eof()

				cNumLaudo := AB9_NUMOS + AB9_CODTEC + AB9_SEQ

				MATRKAB9( cNumLaudo, @oTree, , @nLevel, nMaxLevel, , cTreeID )
				oTree:TreeSeek( Pad( "AB7-" + cNumOs, 50 ) + cTreeID )

				dbSelectArea( cAliasQry )
				dbSkip()
			End
			dbCloseArea()
			dbSelectArea( "AB9" )
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se existem pedidos de venda, cria as ocorrencias                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		cAliasQry := GetNextAlias()

		cQuery := ""
		cQuery += "SELECT AB8_NUMPV, AB8_NUMPVF, AB8_NUMOS, AB8_ITEM FROM "+RetSqlName("AB8")+" AB8 "
		cQuery += "WHERE "
		cQuery += "AB8_FILIAL='"  + xFilial( "AB8" ) + "' AND "
		cQuery += "AB8_NUMOS='"   + AB7->AB7_NUMOS   + "' AND "
		cQuery += "AB8_ITEM='"    + AB7->AB7_ITEM    + "' AND "
		cQuery += "(AB8_NUMPV<>'" + Space(Len(AB8->AB8_NUMPV)) + "' OR "
		cQuery += "AB8_NUMPVF<>'"+ Space(Len(AB8->AB8_NUMPVF)) + "') AND "
		cQuery += "AB8.D_E_L_E_T_<>'*' "
		cQuery += "ORDER BY AB8_NUMPV, AB8_NUMPVF"

		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

		If Alias() == cAliasQry
			oTree:TreeSeek( Pad( "AB7-" + cNumOs, 50 ) + cTreeID  )
			While !( cAliasQry )->( Eof() )

				If !Empty( cPedido := ( cAliasQry )->AB8_NUMPV )
					MATRKSC6( cPedido, @oTree, , @nLevel, nMaxLevel,, cTreeID ) //" - Cliente : "
					oTree:TreeSeek( Pad( "AB7-" + cNumOs, 50 )+cTreeID )
				EndIf

				If !Empty( cPedido := ( cAliasQry )->AB8_NUMPVF )
					MATRKSC6( cPedido, @oTree, , @nLevel, nMaxLevel,, cTreeID ) //" - Cliente : "
					oTree:TreeSeek( Pad( "AB7-" + cNumOs, 50 )+cTreeID )
				EndIf

				( cAliasQry )->( dbSkip() )
			End
			( cAliasQry )->( dbCloseArea() )
			dbSelectArea( "AB8" )
		EndIf

		nLevel++

		If nLevel <= nMaxLevel

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se existem Requisicoes ao almoxarifado                                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			ABF->( DbSetOrder( 1 ) )
			cAliasQry := GetNextAlias()

			cQuery := ""
			cQuery += "SELECT ABF_NUMOS, ABF_ITEMOS, ABF_SEQRC FROM "+RetSqlName("ABF")+" ABF "
			cQuery += "WHERE "
			cQuery += "ABF_FILIAL='"  + xFilial( "ABF" ) + "' AND "
			cQuery += "ABF_NUMOS='"   + AB7->AB7_NUMOS   + "' AND "
			cQuery += "ABF_ITEMOS='"  + AB7->AB7_ITEM    + "' AND "
			cQuery += "ABF.D_E_L_E_T_<>'*' "
			cQuery += "ORDER BY " + SqlOrder( ABF->( IndexKey() ) )

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

			If Alias() == cAliasQry

				oTree:TreeSeek( Pad( "AB7-" + cNumOs, 50 )+cTreeID )
				cImageABF := MaEntImage( "ABF", 1 )

				While !( Eof() )
					cReq := ABF_NUMOS + ABF_ITEMOS + ABF_SEQRC

					oTree:AddItem( Pad( STR0010 + Transform(ABF_SEQRC,"@R XX"), 100 ), Pad( "ABF-" + cReq, 50 )+cTreeID,cImageABF,cImageABF,,,2)   //"Requisicao almoxarifado "
					dbSelectArea( cAliasQry )

					dbSkip()
				End
				dbCloseArea()
				dbSelectArea( "AB8" )
			EndIf

		EndIf

		nLevel--

		nLevel++

		If nLevel <= nMaxLevel

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se existem agendamentos                                                ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			ABB->( DbSetOrder( 1 ) )
			cAliasQry := GetNextAlias()

			cQuery := ""
			cQuery += "SELECT ABB_NUMOS, ABB_CODTEC, ABB_DTINI FROM "+RetSqlName("ABB")+" ABB "
			cQuery += "WHERE "
			cQuery += "ABB_FILIAL='"  + xFilial( "ABB" ) + "' AND "
			cQuery += "ABB_NUMOS='"   + AB7->AB7_NUMOS   + "' AND "
			cQuery += "ABB.D_E_L_E_T_<>'*' "
			cQuery += "ORDER BY " + SqlOrder( ABB->( IndexKey() ) )

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

			TcSetField( cAliasQry, "ABB_DTINI", "D", 8, 0 )

			If Alias() == cAliasQry
				oTree:TreeSeek( Pad( "AB7-" + cNumOs, 50 )+cTreeID )

				cImageABB := MaEntImage( "ABB", 1 )

				While !( Eof() )

					cAgenda := ABB_NUMOS + ABB_CODTEC + DToC( ABB_DTINI )
					oTree:AddItem( Pad( STR0011 + ABB_CODTEC + STR0012 + DToC( ABB_DTINI ), 100 ), Pad( "ABB-" + cAgenda, 50 )+cTreeID,cImageABB,cImageABB,,,2)   //"Agenda - Tecnico - "###" / Inicio - "

					dbSelectArea( cAliasQry )
					dbSkip()
				End
				dbCloseArea()
				dbSelectArea( "AB8" )
			EndIf

		EndIf

		nLevel--

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKABL ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas da fila de Help Desk                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKABL( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKABL( cNumHD, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cChaveABK := ""
LOCAL cImageABK := ""
LOCAL cImageABL := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

ABL->( DbSetOrder( 1 ) )
If ABL->( DbSeek( xFilial( "ABL" ) + cNumHD ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageABL := MaEntImage( "ABL", 1 )

		oTree:AddItem( Pad( STR0013 + cNumHd, 100 ), Pad( "ABL-" + cNumHd, 50 )+cTreeID,cImageABL,cImageABL,,,nLevel)  //"Help Desk - "
		If !Empty( ABL->ABL_NUMOS )
			oTree:TreeSeek( Pad( "ABL-" + cNumHd, 50 )+cTreeID )
			MATRKAB7( ABL->ABL_NUMOS, @oTree, , @nLevel, nMaxLevel,,cTreeID )
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se existem atendimentos, cria                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		cQuery := ""
		cQuery += "SELECT ABK_NRCHAM, ABK_SEQ FROM "+RetSqlName("ABK")+" ABK "
		cQuery += "WHERE "
		cQuery += "ABK_FILIAL='"  + xFilial( "ABK" ) + "' AND "
		cQuery += "ABK_NRCHAM='"  + ABL->ABL_NRCHAM  + "' AND "
		cQuery += "ABK.D_E_L_E_T_<>'*' "
		cQuery += "ORDER BY " + SqlOrder( ABK->( IndexKey() ) )

		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), "QUERY6", .F., .T. )

		If Alias() == "QUERY6"
			oTree:TreeSeek( Pad( "ABL-" + cNumHD, 50 )+cTreeID )
			cImageABK := MaEntImage( "ABK", 1 )
			While !QUERY6->( Eof() )
				cChaveABK := QUERY6->ABK_NRCHAM + QUERY6->ABK_SEQ

				MATRKABK( cChaveABK, @oTree, , @nLevel, nMaxLevel,,cTreeID )

				QUERY6->( dbSkip() )
			End
			QUERY6->( dbCloseArea() )
			dbSelectArea( "ABK" )
		EndIf

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKABK ³ Autor ³ Sergio Silveira       ³ Data ³01/02/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de atendimento de Help Desk                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKABK( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKABK( cNrCham, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cImageABK   := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

ABK->( DbSetOrder( 1 ) )
If ABK->( DbSeek( xFilial( "ABK" ) + cNrCham ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageABK  := MaEntImage( "ABK", 1 )

		oTree:AddItem( Pad( STR0014 + Transform(cNrCham,"@R XXXXXXXXXX/XX") + ; // "Atendimento Help Desk/Sequencia - "
		cAddString, 100 ), Pad( "ABK-" + cNrCham, 50 ) + cTreeID,cImageABK,cImageABK,,,nLevel)

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKAB4 ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de orcamentos                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKAB4( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKAB4( cNumOrc, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )


LOCAL cImageAB4   := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

AB4->( DbSetOrder( 1 ) )
If AB4->( DbSeek( xFilial( "AB4" ) + cNumOrc ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageAB4  := MaEntImage( "AB4", 1 )

		oTree:AddItem( Pad( STR0015 + Transform( cNumOrc, "@r XXXXXX/XX" ) + ; //"Orcamento/Item - "
		cAddString, 100 ), Pad( "AB4-" + cNumOrc, 50 ) +cTreeID,cImageAB4,cImageAB4,,,nLevel)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty( AB4->AB4_NUMOS )
			oTree:TreeSeek( Pad( "AB4-" + cNumOrc, 50 )+cTreeID )
			MATRKAB7( AB4->AB4_NUMOS, @oTree, , @nLevel, nMaxLevel,,cTreeID )
		EndIf

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSC2 ³ Autor ³Rodrigo A Sartorio     ³ Data ³18/11/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de Ordem de Producao                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSC2( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MATRKSC2( cNumOP, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )
LOCAL cImageSC2 := "",cImageSD3 := ""
LOCAL cPictOp   :=PesqPict("SD3","D3_OP",Len(SD3->D3_OP))
LOCAL aArea     := GetArea()
LOCAL aBackSC2  := SC2->(GetArea())
LOCAL aBackSD3  := SD3->(GetArea())
DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"
SC2->( DbSetOrder( 1 ) )
If SC2->( DbSeek( xFilial( "SC2" ) + cNumOP  ) )
	cImageSC2 := MaEntImage( "SC2", 1 )
	nLevel++
	If nLevel <= nMaxLevel
		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		oTree:AddItem( Pad( STR0050 + Transform( cNumOp, cPictOP ) + ;  // "Ordem de Producao "
		cAddString, 100 ), Pad( "SC2-" + cNumOp, 50 )+cTreeID,cImageSC2,cImageSC2,,,nLevel)
	EndIf
	// Inclui Movimentos internos relacionados a Ordem de Producao
	nLevel++
	If nLevel <= nMaxLevel
		cImageSD3 := MaEntImage( "SD3", 1 )
		dbSelectArea("SD3")
		dbSeek(xFilial()+cNumOP)
		While !Eof() .And. D3_FILIAL+D3_OP == xFilial()+cNumOP
			If D3_ESTORNO <> "S"
				cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
				oTree:TreeSeek( Pad( "SC2-" + cNumOp, 50 )+cTreeID )
				oTree:AddItem( Pad( STR0051 + SD3->D3_NUMSEQ + ;  // "Movimento Interno "
				cAddString, 100 ), Pad( "SD3-" + SD3->D3_NUMSEQ + Str(SD3->(Recno()),10), 50 ) + cTreeID,cImageSD3,cImageSD3,,,nLevel)
			EndIf
			dbSkip()
		End
	EndIf
	nLevel--
	nLevel--
EndIf
SC2->(RestArea(aBackSC2))
SD3->(RestArea(aBackSD3))
RestArea(aArea)
RETURN

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSC6 ³ Autor ³ Sergio Silveira       ³ Data ³28/11/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de itens de pedidos                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSC6( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSC6( cNumPed, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID )

LOCAL cPedido   := ""
LOCAL cItem     := ""
Local cFilPv    := ""
LOCAL cImageSC6 := ""
LOCAL cImageSC9 := ""
LOCAL cImageSC0 := ""
LOCAL cImageSD2 := ""
LOCAL lRemito	:=.T. 	// Identifica se existe remito ou nao
LOCAL nX		:=1
Local nVlEntcom := OsVlEntCom()
Local aTree	:={}
LOCAL cQuery    := ""
LOCAL cAliasQry := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

SC6->( DbSetOrder( 1 ) )
If SC6->( DbSeek( xFilial( "SC6" ) + cNumPed ) )

	cPedido   := Left( cNumPed, Len( SD2->D2_PEDIDO ) )
	cItem     := Right( cNumPed, Len( SD2->D2_ITEMPV ) )
	cImageSC6 := MaEntImage( "SC6", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		oTree:AddItem( Pad( STR0009 + Transform( cNumPed, "@r XXXXXX/XX" ) + ;  //"Pedido/Item - "
		cAddString, 100 ), Pad( "SC6-" + cNumPed, 50 )+cTreeID,cImageSC6,cImageSC6,,,nLevel)
		
		If FindFunction("OMSTracker")
			OMSTracker(oTree,cNumPed,cTreeID,@nLevel,nMaxLevel)
		EndIf

		If cPaisLoc =="BRA"
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens de notas fiscais deste pedido / item       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


			cAliasQry := "MTRKSC6SD2"

			cQuery := ""

			cQuery += "SELECT D2_COD, D2_DOC, D2_SERIE, D2_CLIENTE, D2_LOJA, D2_ITEM "
			cQuery += "FROM " + RetSqlName( "SD2" ) + " "
			cQuery += "WHERE "
			cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
			cQuery += "D2_PEDIDO='" + cPedido          + "' AND "
			cQuery += "D2_ITEMPV='" + cItem            + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY D2_DOC, D2_SERIE, D2_ITEM"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )

			cImageSD2 := MaEntImage( "SD2", 1 )

			While !( cAliasQry )->( Eof() )

				MATRKSD2( ( cAliasQry )->D2_DOC + ( cAliasQry )->D2_SERIE + ( cAliasQry )->D2_CLIENTE + ( cAliasQry )->D2_LOJA + ( cAliasQry )->D2_COD + ( cAliasQry )->D2_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
				oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )

				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SD2" )

		EndIf

		nLevel++
		If nLevel <= nMaxLevel

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta as liberacoes deste pedido / item       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := "MTRKSC6SC9"

			cQuery := ""
			If cPaisLoc<>"BRA"
				cQuery += "SELECT C9_PEDIDO, C9_ITEM, C9_SEQUEN, C9_REMITO, C9_SERIREM, C9_CLIENTE, C9_LOJA,C9_PRODUTO, C9_ITEMREM , C9_NFISCAL, C9_NUMSEQ"
			Else
				cQuery += "SELECT C9_PEDIDO, C9_ITEM, C9_SEQUEN "
			EndIf
			cQuery += "FROM " + RetSqlName( "SC9" ) + " "
			cQuery += "WHERE "
			cQuery += "C9_FILIAL='" + xFilial( "SC9" ) + "' AND "
			cQuery += "C9_PEDIDO='" + cPedido          + "' AND "
			cQuery += "C9_ITEM='"   + cItem            + "' AND "
			cQuery += "C9_PRODUTO='"+ SC6->C6_PRODUTO  + "' AND "
		
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY C9_SEQUEN "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )

			cImageSC9 := MaEntImage( "SC9", 1 )

			While  !( cAliasQry )->( Eof() )

				oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )
				If cPaisLoc<>"BRA"
					MATRKSC9(( cAliasQry )->C9_PEDIDO +( cAliasQry )->C9_ITEM + ( cAliasQry )->C9_SEQUEN+( cAliasQry )->C9_REMITO+( cAliasQry )->C9_SERIREM+( cAliasQry )->C9_CLIENTE+( cAliasQry )->C9_LOJA+( cAliasQry )->C9_PRODUTO+( cAliasQry )->C9_ITEMREM+( cAliasQry )->C9_NFISCAL+( cAliasQry )->C9_NUMSEQ , @oTree, , @nLevel, nMaxLevel,@lRemito,cNumPed ,@aTree)
				Else
					MATRKSC9( ( cAliasQry )->C9_PEDIDO +( cAliasQry )->C9_ITEM + ( cAliasQry )->C9_SEQUEN, @oTree, , @nLevel, nMaxLevel, NIL, NIL, @aTree,cTreeID )
				EndIf

				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SC9" )

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ A arvore do SC9 foi criada no final pois da problema em      ³
			//³ localizacoes por causa do remito / item da fatura            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			If Len(aTree) >0
				cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
				cImageSC9 := MaEntImage( "SC9", 1 )
				For nX := 1 To Len(aTree)
					oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )
					IF !(oTree:TreeSeek( Pad( "SC9-" + aTree[nX][1]  + aTree[nX][2] + aTree[nX][3], 50 )+cTreeID )  )
						oTree:AddItem( Pad( STR0019 + aTree[nX][3] + ;  //"Liberacao / Sequencia - "
						cAddString, 100 ), Pad( "SC9-" + aTree[nX][1] + aTree[nX][2] + ;
						aTree[nX][3],50 )+cTreeID,cImageSC9,cImageSC9,,,nLevel)
					EndIf
				Next nX
			EndIf
		EndIf

		nLevel--

		nLevel++

		If nLevel <= nMaxLevel

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens de reserva deste pedido / item             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !Empty( SC6->C6_RESERVA )
				SC0->( DbSetOrder( 1 ) )
				If SC0->( dbSeek( xFilial( "SC0" ) + SC6->C6_RESERVA ) )

					cImageSC0 := MaEntImage( "SC0", 1 )
					oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )

					oTree:AddItem( Pad( STR0020 + SC0->C0_NUM + ;  //"Reserva - "
					cAddString, 100 ), Pad( "SC0-" + SC0->C0_NUM, 50 )+cTreeID, cImageSC0,cImageSC0,,,nLevel)
				EndIf
			EndIf
		EndIf

		nLevel--

		nLevel++

		If nLevel <= nMaxLevel
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Informacao referente a ordem de producao                     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !Empty( SC6->C6_NUMOP+SC6->C6_ITEMOP )
				oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )
				MATRKSC2(  SC6->C6_NUMOP+SC6->C6_ITEMOP+"001"+Criavar("C2_ITEMGRD",.F.), @oTree, , @nLevel, nMaxLevel,,cTreeID )
			EndIf
		EndIf

		nLevel--

	EndIf

	nLevel--

EndIf

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSC5 ³ Autor ³ Sergio Silveira       ³ Data ³28/11/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de pedidos                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSC5( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSC5( cNumPed, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cImageSC5 := ""
LOCAL cQuery    := ""
LOCAL cAliasQry := ""
Local cRemIni   := ""
Local cRemFim   := ""
Local cAliasRem := ""

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

SC5->( DbSetOrder( 1 ) )
If SC5->( DbSeek( xFilial( "SC6" ) + cNumPed ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		cImageSC5 := MaEntImage( "SC5", 1 )

		oTree:AddItem( Pad( STR0034 + Transform( cNumPed, "@r XXXXXX" ) + ;   //"Pedido de Venda - "
		cAddString, 100 ), Pad( "SC5-" + cNumPed, 50 )+cTreeID,cImageSC5,cImageSC5,,,nLevel)

		oTree:TreeSeek( Pad( "SC5-" + cNumPed, 50 )+cTreeID )

		If lItem

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens deste pedido                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT C6_NUM, C6_ITEM "
			cQuery += "FROM " + RetSqlName( "SC6" ) + " "
			cQuery += "WHERE "
			cQuery += "C6_FILIAL='" + xFilial( "SC6" ) + "' AND "
			cQuery += "C6_NUM='"    + cNumPed          + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY C6_NUM, C6_ITEM"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SC5-" + cNumPed, 50 )+cTreeID )

			While !( cAliasQry )->( Eof() )
				MATRKSC6( ( cAliasQry )->C6_NUM + ( cAliasQry )->C6_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SC6" )

		Else

			cAliasQry := GetNextAlias()

			cQuery := ""
			If cPaisLoc<>"BRA"
				cQuery += "SELECT D2_CLIENTE, D2_LOJA, D2_DOC, D2_TIPODOC, D2_SERIE, D2_REMITO, D2_SERIREM "
				cQuery += "FROM " + RetSqlName( "SD2" ) + " "
				cQuery += "WHERE "
				cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
				cQuery += "D2_PEDIDO='" + cNumPed          + "' AND "
				cQuery += "D_E_L_E_T_=' ' "

				cQuery += "GROUP BY D2_CLIENTE, D2_LOJA, D2_DOC, D2_TIPODOC, D2_SERIE,D2_REMITO, D2_SERIREM "
				cQuery += "ORDER BY D2_CLIENTE, D2_LOJA, D2_TIPODOC DESC, D2_DOC,  D2_SERIE "

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

				// Busca Range de Remitos do Pedido, para encontrar as respectivas facturas em cAliasQry1
				cAliasRem := GetNextAlias()
				cQuery    := ""
				cQuery += "SELECT MIN(D2_DOC) REMINI, MAX(D2_DOC) REMMAX "
				cQuery += "FROM " + RetSqlName( "SD2" ) + " "
				cQuery += "WHERE "
				cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
				cQuery += "D2_PEDIDO='" + cNumPed          + "' AND "
				cQuery += "D_E_L_E_T_=' ' "

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasRem, .F., .T. )
				cRemIni := REMINI
				cRemFim := REMMAX
				dbSelectArea( cAliasRem )
				dbCloseArea()


				cAliasQry1 := GetNextAlias()
				cQuery := ""
				cQuery += "SELECT D2_CLIENTE, D2_LOJA, D2_DOC, D2_TIPODOC, D2_SERIE, D2_REMITO, D2_SERIREM "
				cQuery += "FROM " + RetSqlName( "SD2" ) + " "
				cQuery += "WHERE "
				cQuery += "D2_CLIENTE='" +( cAliasQry )->(D2_CLIENTE)   + "' AND "
				cQuery += "D2_LOJA='" +( cAliasQry )->(D2_LOJA)   + "' AND "
				cQuery += "D2_REMITO<>' '" + " AND "
				cQuery += "D2_REMITO>='" + cRemIni   + "' AND "
				cQuery += "D2_REMITO<='" + cRemFim   + "' AND "
				cQuery += "D2_SERIREM='" +( cAliasQry )->(D2_SERIE)   + "' AND "
				cQuery += "D2_TIPODOC<>'" + ( cAliasQry )->(D2_TIPODOC)    + "' AND "
				If cPaisLoc=="ARG"
					cQuery += " D2_PEDIDO='" + cNumPed + "' AND "
				EndIf
				cQuery += "D_E_L_E_T_=' ' "

				cQuery += "GROUP BY D2_CLIENTE, D2_LOJA, D2_DOC, D2_TIPODOC, D2_SERIE, "
				If cPaisLoc=="ARG"
					cQuery +="D2_PEDIDO, "  
				EndIf
				cQuery +=" D2_REMITO, D2_SERIREM "
				cQuery += "ORDER BY D2_CLIENTE, D2_LOJA, D2_TIPODOC DESC, D2_DOC,  D2_SERIE "

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry1, .F., .T. )
			Else
				cQuery += "SELECT D2_CLIENTE, D2_LOJA, D2_DOC, D2_SERIE "
				cQuery += "FROM " + RetSqlName( "SD2" ) + " "
				cQuery += "WHERE "
				cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
				cQuery += "D2_PEDIDO='" + cNumPed          + "' AND "
				cQuery += "D_E_L_E_T_=' ' "

				cQuery += "GROUP BY D2_CLIENTE, D2_LOJA, D2_DOC, D2_SERIE "
				cQuery += "ORDER BY D2_CLIENTE, D2_LOJA, D2_DOC, D2_SERIE "

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )
			EndIf

			oTree:TreeSeek( Pad( "SC5-" + cNumPed, 50 )+cTreeID )

			While !( cAliasQry )->( Eof() )
				MATRKSF2( ( cAliasQry )->D2_DOC + ( cAliasQry )->D2_SERIE + ;
				( cAliasQry )->D2_CLIENTE + ( cAliasQry )->D2_LOJA, @oTree, , @nLevel, nMaxLevel, .F. )
				oTree:TreeSeek( Pad( "SC5-" + cNumPed, 50 )+cTreeID ) 	    // para colocar as notas debaixo do pedido e nao debaixo da NF
				( cAliasQry )->( dbSkip() )
			End

			If cPaisLoc<>"BRA"
				While !( cAliasQry1 )->( Eof() )
					MATRKSF2( ( cAliasQry1 )->D2_DOC + ( cAliasQry1 )->D2_SERIE + ;
					( cAliasQry1 )->D2_CLIENTE + ( cAliasQry1 )->D2_LOJA, @oTree, , @nLevel, nMaxLevel, .F. )
					oTree:TreeSeek( Pad( "SC5-" + cNumPed, 50 )+cTreeID ) 	    // para colocar as notas debaixo do pedido e nao debaixo da NF
					( cAliasQry1 )->( dbSkip() )
				End
			EndIF

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SC5" )

		EndIf
		nLevel--
	EndIf
	nLevel--
EndIf

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSF2 ³ Autor ³ Sergio Silveira       ³ Data ³28/11/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas da nota fiscal de saida ( cabecalho )      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSF2( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSF2( cChaveNF, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID)

LOCAL cCliente  := ""
LOCAL cLoja     := ""
LOCAL cDoc      := ""
LOCAL cSerie    := ""
LOCAL cPrefixo  := ""
LOCAL cImageSE1 := ""
LOCAL cImageSF2 := ""
LOCAL cTitulos  := ""
LOCAL cQuery    := ""
LOCAL cAliasQry := ""

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

SF2->( DbSetOrder( 1 ) )
If SF2->( DbSeek( xFilial( "SF2" ) + cChaveNF ) )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Separa os componentes da query                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cDoc     := Left( cChaveNF,  Len( SF2->F2_DOC ) )
	cSerie   := SubStr( cChaveNF, Len( cDoc ) + 1, Len( SF2->F2_SERIE ) )
	cCliente := SubStr( cChaveNF, Len( cDoc ) + Len( cSerie ) + 1, Len( SF2->F2_CLIENTE ) )
	cLoja    := SubStr( cChaveNF, Len( cDoc ) + Len( cSerie ) + Len( cCliente ) + 1, Len( SF2->F2_LOJA ) )
	cPrefixo := If(Empty(SF2->F2_PREFIXO),&(SuperGetMv("MV_1DUPREF")),SF2->F2_PREFIXO)

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		cImageSF2 := MaEntImage( "SF2", 1 )

		If cPaisLoc <> "BRA"  .And. ISRemito(1,"SF2->F2_TIPODOC")
			oTree:AddItem( Pad( GetDescRem()+STR0047 + cDoc + "/" + cSerie + ;   //"Remito de saida / Serie - "
			cAddString, 100 ), Pad( "SF2-" + cChaveNF, 50 )+cTreeID, cImageSF2, cImageSF2,,,nLevel)
		Else
			oTree:AddItem( Pad( STR0035 + cDoc + "/" + cSerie + ;   //"Nota fiscal de saida / Serie - "
			cAddString, 100 ), Pad( "SF2-" + cChaveNF, 50 )+cTreeID, cImageSF2, cImageSF2,,,nLevel)
		EndIf

		If lItem

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens deste pedido                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT D2_ITEM "
			cQuery += "FROM " + RetSqlName( "SD2" ) + " "
			cQuery += "WHERE "
			cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SC5-" + cChaveNF, 50 )+cTreeID )

			cImageSD2 := MaEntImage( "SD2", 1 )

			While !( cAliasQry )->( Eof() )

				If cPaisLoc <> "BRA"  .And. ISRemito(1,"SF2->F2_TIPODOC")
					//"Remito/Serie/Item - "
					oTree:AddItem( Pad( GetDescRem() + ( cAliasQry )->D2_DOC + "/" + ( cAliasQry )->D2_SERIE + "/" + ( cAliasQry )->D2_ITEM + ;
					cAddString, 100 ), Pad( "SD2-" + ( cAliasQry )->D2_DOC + ( cAliasQry )->D2_SERIE + ( cAliasQry )->D2_CLIENTE + ;
					( cAliasQry )->D2_LOJA + ( cAliasQry )->D2_ITEM, 50 ) + cTreeID,cImageSD2,cImageSD2,,,nLevel)
				Else
					//"N.F./Serie/Item - "
					oTree:AddItem( Pad( STR0018 +( cAliasQry )->D2_DOC + "/" + ( cAliasQry )->D2_SERIE + "/" + ( cAliasQry )->D2_ITEM + ;
					cAddString, 100 ), Pad( "SD2-" + ( cAliasQry )->D2_DOC + ( cAliasQry )->D2_SERIE + ( cAliasQry )->D2_CLIENTE + ;
					( cAliasQry )->D2_LOJA + ( cAliasQry )->D2_ITEM, 50 )+cTreeID,cImageSD2,cImageSD2,,,nLevel)
				EndIf

				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SC6" )

		Else

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os titulos desta NF                                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			nLevel++

			If nLevel <= nMaxLevel

				cAliasQry := GetNextAlias()

				cQuery := ""

				cQuery += "SELECT E1_PREFIXO,E1_NUM,E1_PARCELA,E1_CLIENTE,E1_LOJA,E1_TIPO "
				cQuery += "FROM " + RetSqlName( "SE1" ) + " "
				cQuery += "WHERE "
				cQuery += "E1_FILIAL='" + xFilial( "SE1" ) + "' AND "
				cQuery += "E1_NUM='"    + cDoc             + "' AND "
				cQuery += "E1_PREFIXO='"+ cPrefixo         + "' AND "
				cQuery += "E1_CLIENTE='"+ cCliente         + "' AND "
				cQuery += "E1_LOJA='"   + cLoja            + "' AND "
				cQuery += "D_E_L_E_T_=' ' "

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

				oTree:TreeSeek( Pad( "SF2-" + cChaveNF, 50 )+cTreeID )

				cImageSE1 := MaEntImage( "SE1", 1 )

				While !( cAliasQry )->( Eof() )

					dbSelectArea( cAliasQry )
					cKey := Pad( "SE1-" + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_CLIENTE + E1_LOJA + E1_TIPO, 50 )+cTreeID
					cTitulos:=E1_PREFIXO + E1_NUM + E1_PARCELA + E1_CLIENTE + E1_LOJA + E1_TIPO
					If aScan(aTitulos,{|x| x[1] == cTitulos })==0
						oTree:AddItem( Pad( STR0036 +; //"Titulo - Cliente/Loja/Prefixo/Numero/Parcela/Tipo - "
						E1_CLIENTE + "/" + E1_LOJA + "/" + E1_PREFIXO + "/" + E1_NUM + "/" + E1_PARCELA + "/" + E1_TIPO, 100 ),;
						Pad( "SE1-" + E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO, 50 )+cTreeID, cImageSE1 ,cImageSE1,,,nLevel)

					   	AAdd(aTitulos,{cTitulos})
					EndIf

					(cAliasQry )->( dbSkip() )

				End

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Exclui a area de trabalho da query                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea( cAliasQry )
				dbCloseArea()

				dbSelectArea( "SE1" )

			EndIf
			nLevel--

		EndIf

	EndIf
	nLevel--
EndIf

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSCK ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos itens de orcamento                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSCK( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSCK( cNumOrc, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

Local cQuery    := ""
Local cAliasQry := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

SCK->( DbSetOrder( 1 ) )
If SCK->( DbSeek( xFilial( "SCK" ) + cNumOrc ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageSCK := MaEntImage( "SCK", 1 )

		oTree:AddItem( Pad( STR0015 + Transform( cNumOrc, "@R XXXXXX/XX" ) + cAddString, 100 ),;  //"Orcamento/Item - "
		Pad( "SCK-" + cNumOrc, 50 )+cTreeID, cImageSCK,cImageSCK,,,nLevel)
		oTree:TreeSeek( Pad( "SCK-" + cNumOrc, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Do Case
			Case !Empty( SCK->CK_NUMPV )

				cAliasQry := GetNextAlias()

				cQuery := ""

				cQuery += "SELECT C6_NUM, C6_ITEM FROM " + RetSqlName( "SC6" ) + " "
				cQuery += "WHERE "
				cQuery += "C6_FILIAL='"  + xFilial( "SC6" ) + "' AND "
				cQuery += "C6_PRODUTO='" + SCK->CK_PRODUTO  + "' AND "
				cQuery += "C6_NUM='"     + SCK->CK_NUMPV    + "' AND "
				cQuery += "C6_NUMORC='"  + SCK->CK_NUM + SCK->CK_ITEM + "' AND "
				cQuery += "D_E_L_E_T_=' '"

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. )

				While !( cAliasQry )->( Eof() )
					MATRKSC6( ( cAliasQry )->C6_NUM + ( cAliasQry )->C6_ITEM, @oTree, , @nLevel, nMaxLevel,, cTreeID )
					( cAliasQry )->( dbSkip() )
				End

		EndCase

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSCJ ³ Autor ³ Sergio Silveira       ³ Data ³28/11/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de orcamentos                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSCJ( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSCJ( cNumOrc, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cImageSCJ := ""

LOCAL cQuery    := ""
LOCAL cAliasQry := ""
DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

SCJ->( DbSetOrder( 1 ) )
If SCJ->( DbSeek( xFilial( "SCJ" ) + cNumOrc ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageSCJ  := MaEntImage( "SCJ", 1 )

		oTree:AddItem( Pad( STR0037 + Transform( cNumOrc, "@r XXXXXX" ) + ;   //"Orcamento de Venda - "
		cAddString, 100 ), Pad( "SCJ-" + cNumOrc, 50 ) + cTreeID,cImageSCJ,cImageSCJ,,,nLevel)

		If lItem

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens deste orcamento                                ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT CK_NUM, CK_ITEM "
			cQuery += "FROM " + RetSqlName( "SCK" ) + " "
			cQuery += "WHERE "
			cQuery += "CK_FILIAL='" + xFilial( "SCK" ) + "' AND "
			cQuery += "CK_NUM='"    + cNumOrc          + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY CK_NUM, CK_ITEM"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SCJ-" + cNumOrc, 50 ) + cTreeID )

			While !( cAliasQry )->( Eof() )
				MATRKSCK( ( cAliasQry )->CK_NUM + ( cAliasQry )->CK_ITEM, @oTree, , @nLevel, nMaxLevel, ,cTreeID )
				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SCK" )

		Else

			cAliasQry := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT CK_NUMPV "
			cQuery += "FROM " + RetSqlName( "SCK" ) + " "
			cQuery += "WHERE "
			cQuery += "CK_FILIAL='" + xFilial( "SCK" ) + "' AND "
			cQuery += "CK_NUM='"    + cNumOrc          + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "GROUP BY CK_NUMPV "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SCJ-" + cNumOrc, 50 )+cTreeID )

			While !( cAliasQry )->( Eof() )
				MATRKSC5( ( cAliasQry )->CK_NUMPV, @oTree, , @nLevel, nMaxLevel, .F.,cTreeID)
				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SCK" )

		EndIf

	EndIf

EndIf

Return Nil
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKAD1 ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas da oportunidade de venda                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKAD1( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKAD1( cNumOpor, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID, lConta )

LOCAL cImageAD1   := ""
LOCAL cQuery      := ""
LOCAL cAliasQry   := ""
Local cPropos     := ""
DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"
Default lConta    := .F.

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

AD1->( DbSetOrder( 1 ) )
If AD1->( DbSeek( xFilial( "AD1" ) + cNumOpor ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageAD1 := MaEntImage( "AD1", 1 )

		oTree:AddItem( Pad( STR0022 + Transform( cNumOpor, "@R XXXXXX" ) + cAddString, 100 ),;  //"Oportunidade de Venda - "
		Pad( "AD1-" + cNumOpor, 50 )+cTreeID, cImageAD1, cImageAD1,,,nLevel)
		oTree:TreeSeek( Pad( "AD1-" + cNumOpor, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Do Case
			Case !Empty( AD1->AD1_NUMORC ) .AND. SuperGetMv( "MV_FATPROP" ) <> "P"
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Orcamento de Venda                                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				cAliasQry := GetNextAlias()

				cQuery := ""

				cQuery += "SELECT CK_NUM,CK_ITEM FROM " + RetSqlName( "SCK" ) + " "
				cQuery += "WHERE "
				cQuery += "CK_FILIAL='" + xFilial( "SCK" ) + "' AND "
				cQuery += "CK_NUM='"    + AD1->AD1_NUMORC  + "' AND "
				cQuery += "D_E_L_E_T_=' ' "
				cQuery += "ORDER BY CK_ITEM"

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

				While !( cAliasQry )->( Eof() )
					MATRKSCK( ( cAliasQry )->CK_NUM + ( cAliasQry )->CK_ITEM, @oTree, , @nLevel, nMaxLevel, , cTreeID )
					( cAliasQry )->( dbSkip() )
				End

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Exclui a area de trabalho da query                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				( cAliasQry )->( dbCloseArea() )
				dbSelectArea( "SCK" )

		EndCase

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Proposta Comercial                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SuperGetMv( "MV_FATPROP" ) == "P"
			cPropos	  := TrkPropos( AD1->AD1_NROPOR, AD1->AD1_REVISA, AD1->AD1_PROPOS )		
			MATRKADY( cPropos, @oTree, , @nLevel, nMaxLevel, , cTreeID, lConta )
		EndIf
	EndIf

	nLevel--

EndIf

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKAAN ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos itens de contrato de parceria          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKAAN( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKAAN( cContPar, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cImageAAN  := ""
LOCAL cQuery     := ""
LOCAL cAliasQry  := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

AAN->( DbSetOrder( 1 ) )
If AAN->( DbSeek( xFilial( "AAN" ) + cContPar ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageAAN := MaEntImage( "AAN", 1 )

		oTree:AddItem( Pad( STR0023 + Transform( cContPar, "@R 999999999999999/99" ) + ; //"O.S./Item - " //"Contrato parceria / Item - "
		If( !Empty( cAddString ), " - " + STR0006 + cAddString, "" ),100), Pad( "AAN-" + cContPar, 50 )+cTreeID, cImageAAN, cImageAAN ,,,nLevel)

		oTree:TreeSeek( Pad( "AAN-" + cContPar, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se existem itens de pedidos , cria as ocorrencias                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Obtem o alias devido a recursividade                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cAliasQry := GetNextAlias()

		cQuery := ""
		cQuery += "SELECT C6_NUM, C6_ITEM FROM "+RetSqlName("SC6")+" SC6 "
		cQuery += "WHERE "
		cQuery += "C6_FILIAL='"  + xFilial( "SC6" ) + "' AND "
		cQuery += "C6_CONTRT='"  + AAN->AAN_CONTRT  + "' AND "
		cQuery += "C6_ITCONTR='" + AAN->AAN_ITEM    + "' AND "
		cQuery += "C6_TPCONTR='1' AND "
		cQuery += "D_E_L_E_T_<>'*' "
		cQuery += "ORDER BY C6_NUM, C6_ITEM"

		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

		While !( cAliasQry )->( Eof() )
			MATRKSC6( ( cAliasQry )->C6_NUM + ( cAliasQry )->C6_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID)
			( cAliasQry )->( dbSkip() )
			oTree:TreeSeek( Pad( "AAN-" + cContPar, 50 )+cTreeID )

		End

		( cAliasQRY )->( dbCloseArea() )
		dbSelectArea( "SC6" )

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKAAO ³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos itens de contrato de WMS               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKAAO( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKAAO( cContWMS, oTree, cAddString, nLevel, nMaxLevel, lItem,cTreeID )

LOCAL cImageAAO  := ""
LOCAL cQuery     := ""
LOCAL cAliasQry  := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

AAO->( DbSetOrder( 1 ) )
If AAO->( DbSeek( xFilial( "AAO" ) + cContWMS ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageAAO := MaEntImage( "AAO", 1 )

		oTree:AddItem( Pad( STR0024 + Transform( cContWMS, "@R 999999999999999/99" ) + ; //"O.S./Item - " //"Contrato WMS / Item - "
		If( !Empty( cAddString ), " - " + STR0006 + cAddString, "" ),100), Pad( "AAO-" + cContWMS, 50 )+cTreeID, cImageAAO, cImageAAO ,,,nLevel)

		oTree:TreeSeek( Pad( "AAO-" + cContWMS, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se existem itens de pedidos , cria as ocorrencias                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Obtem o alias devido a recursividade                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cAliasQry := GetNextAlias()

		cQuery := ""
		cQuery += "SELECT C6_NUM, C6_ITEM FROM "+RetSqlName("SC6")+" SC6 "
		cQuery += "WHERE "
		cQuery += "C6_FILIAL='"  + xFilial( "SC6" ) + "' AND "
		cQuery += "C6_CONTRT='"  + AAO->AAO_CONTRT  + "' AND "
		cQuery += "C6_ITCONTR='" + AAO->AAO_ITEM    + "' AND "
		cQuery += "C6_TPCONTR='2' AND "
		cQuery += "D_E_L_E_T_<>'*' "
		cQuery += "ORDER BY C6_NUM, C6_ITEM"

		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

		While !( cAliasQry )->( Eof() )
			MATRKSC6( ( cAliasQry )->C6_NUM + ( cAliasQry )->C6_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID)
			( cAliasQry )->( dbSkip() )
			oTree:TreeSeek( Pad( "AAO-" + cContWMS, 50 )+cTreeID )

		End

		( cAliasQRY )->( dbCloseArea() )
		dbSelectArea( "SC6" )

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSD2 ³ Autor ³ Sergio Silveira       ³ Data ³28/11/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de itens de NF de saida                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSD2( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSD2( cKeyNF, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID )

LOCAL cImageSD2 := ""
LOCAL cDoc      := ""
LOCAL cSerie    := ""
LOCAL cItem     := ""
LOCAL cPic      := ""
Local cTreeKey := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

nLevel++

If nLevel <= nMaxLevel

	SD2->( DbSetOrder( 3 ) )
	If SD2->( DbSeek( xFilial( "SD2" ) + cKeyNF ) )

		cPic      := "@R "

		cDoc      := Left( cKeyNF, Len( SD2->D2_DOC ) )
		cPic      += Replicate( "X", Len( cDoc ) ) + "/"
		cSerie    := SerieNfId("SD2", 2, "D2_SERIE")
		cPic      += Replicate( "X", Len( cSerie ) )	 + "/"
		cItem     := Right( cKeyNF, Len( SD2->D2_ITEM ) )
		cPic      += Replicate( "X", Len( cItem ) )

		//Tratamento para _SDOC dos documentos fiscais considerando devido a realização de busca no objeto DbTree pelo TreeSeek
		cTreeKey := 	SD2->(D2_DOC) + SerieNfID("SD2", 2, "D2_SERIE") + SD2->(D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM)

		cImageSD2 := MaEntImage( "SD2", 1 )

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		If cPaisLoc <> "BRA"  .And. ISRemito(1,"SD2->D2_TIPODOC")
			oTree:AddItem( Pad( GetDescRem() + Transform( cDoc + cSerie + ; //"Remito/Serie/Item - "
			cItem, cPic ) + cAddString, 100 ), Pad( "SD2-" + cTreeKey, 50 )+cTreeID,cImageSD2,cImageSD2,,,nLevel)
		Else
			oTree:AddItem( Pad( STR0038 + Transform( cDoc + cSerie + ; //"Nota fiscal/Serie/Item - "
			cItem, cPic ) + cAddString, 100 ), Pad( "SD2-" + cTreeKey, 50 )+cTreeID,cImageSD2,cImageSD2,,,nLevel)
		EndIf

	EndIf

EndIf

nLevel--


Return(.T.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKAB9 ³ Autor ³ Sergio Silveira       ³ Data ³09/01/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de itens de atendimentos da OS             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKAB9( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKAB9( cKeyLaudo, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID )

LOCAL cImageAB9 := ""
LOCAL cNumOrc   := ""
Local cAliasABC := "ABC"
Local cQuery 	  := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

nLevel++

If nLevel <= nMaxLevel

	AB9->( DbSetOrder( 1 ) )
	If AB9->( DbSeek( xFilial( "AB9" ) + cKeyLaudo ) )

		cImageAB9 := MaEntImage( "AB9", 1 )

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		oTree:AddItem( Pad( STR0008 + AB9->AB9_CODTEC + "/" + AB9->AB9_SEQ, 100 ), Pad( "AB9-" + cKeyLaudo, 50 )+cTreeID,cImageAB9,cImageAB9,,,2)  //"Laudo - "

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica as FNCs geradas no QNC                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    nLevel++
		oTree:TreeSeek( Pad( "AB9-" + cKeyLaudo, 50 ))
       	If !Empty(AB9->AB9_CODFNC)
			MATRKQI2( AB9->AB9_CODFNC + AB9->AB9_FNCREV, @oTree, , @nLevel, nMaxLevel,,cTreeID, "TEC")
			oTree:TreeSeek( Pad( "QI2-" + AB9->AB9_CODFNC + AB9->AB9_FNCREV, 50 ))
			oTree:SetFocus()
			oTree:PTCollapse()
		EndIf
		nLevel--

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Cria os orcamentos criados pelos laudos                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cNumOrc := AB9->AB9_NUMORC

		If !Empty( cNumOrc )
			AB4->( DbSetOrder( 1 ) )
			If AB4->( DbSeek( xFilial( "AB4" ) + cNumOrc ) )
				oTree:TreeSeek( Pad( "AB9-" + cKeyLaudo, 50 )+cTreeID )
				MATRKAB4( AB4->AB4_NUMORC + AB4->AB4_ITEM, @oTree, cAddString , @nLevel, nMaxLevel,,cTreeID )

			EndIf
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica as despesas financeiras                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea("ABC")
		DbSetOrder(1)

		cAliasABC := "MATRKABC"
		cQuery := "SELECT ABC_FILIAL,ABC_NUMOS,ABC_CODTEC,ABC_SEQ,ABC_ITEM "
		cQuery += "FROM "+RetSqlName("ABC")+" ABC "
		cQuery += "WHERE ABC.ABC_FILIAL='"+xFilial("ABC")+"' AND "
		cQuery += "ABC.ABC_NUMOS='"+AB9->AB9_NUMOS+"' AND "
		cQuery += "ABC.ABC_CODTEC='"+AB9->AB9_CODTEC+"' AND "
		cQuery += "ABC.ABC_SEQ='"+AB9->AB9_SEQ+"' AND "
		cQuery += "ABC.D_E_L_E_T_=' ' "
		cQuery += "ORDER BY "+SqlOrder(ABC->(IndexKey()))

		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasABC)

		While !Eof() .And. xFilial("ABC") == (cAliasABC)->ABC_FILIAL .And.;
			AB9->AB9_NUMOS == (cAliasABC)->ABC_NUMOS .And.;
			AB9->AB9_CODTEC == (cAliasABC)->ABC_CODTEC .And.;
			AB9->AB9_SEQ == (cAliasABC)->ABC_SEQ

			oTree:TreeSeek( Pad( "AB9-" + cKeyLaudo, 50 )+cTreeID )
			MATRKABC( (cAliasABC)->ABC_NUMOS + (cAliasABC)->ABC_CODTEC + (cAliasABC)->ABC_SEQ + (cAliasABC)->ABC_ITEM, @oTree, cAddString , @nLevel, nMaxLevel,,cTreeID )

			dbSelectArea(cAliasABC)
			dbSkip()
		End

		(cAliasABC)->( DBCloseArea() )
		DBSelectArea("ABC")

	EndIf

EndIf

nLevel--

Return()


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSUB ³ Autor ³ Sergio Silveira       ³ Data ³18/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos itens de orcamento / Telemarketing     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSUB( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSUB( cNumOrc, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID )

Local aArea     := {}
Local cImageSUB := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

SUB->( DbSetOrder( 1 ) )
If SUB->( DbSeek( xFilial( "SUB" ) + cNumOrc ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageSUB := MaEntImage( "SUB", 1 )

		oTree:AddItem( Pad( STR0043 + Transform( cNumOrc, "@R XXXXXX/XX" ) + cAddString, 100 ),;  // "Atendimento televendas / item"
		Pad( "SUB-" + cNumOrc, 50 )+cTreeID, cImageSUB,cImageSUB,,,nLevel)
		oTree:TreeSeek( Pad( "SUB-" + cNumOrc, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC6->( DbSetOrder( 1 ) )
		If SC6->( DbSeek( xFilial( "SC6" ) + SUB->UB_NUMPV + SUB->UB_ITEMPV ) )
			aArea := SC6->( GetArea() )
			MATRKSC6( SC6->C6_NUM + SC6->C6_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
			SC6->( RestArea( aArea ) )
		EndIf

	EndIf

	nLevel--

EndIf

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSUA ³ Autor ³ Sergio Silveira       ³ Data ³18/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de cabecalho de orcamentos - Televendas    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSUA( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSUA( cNumOrc, oTree, cAddString, nLevel, nMaxLevel, lItem,cTreeID)

LOCAL cImageSUA := ""
LOCAL cQuery    := ""
LOCAL cAliasQry := ""

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"


SUA->( DbSetOrder( 1 ) )
If SUA->( DbSeek( xFilial( "SUA" ) + cNumOrc ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageSUA  := MaEntImage( "SUA", 1 )

		oTree:AddItem( Pad( STR0044 + Transform( cNumOrc, "@r XXXXXX" ) + ; // "Atendimento televendas - "
		cAddString, 100 ), Pad( "SUA-" + cNumOrc, 50 )+cTreeID,cImageSUA,cImageSUA,,,nLevel)

		If lItem

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens deste orcamento                            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT UB_NUM, UB_ITEM "
			cQuery += "FROM " + RetSqlName( "SUB" ) + " "
			cQuery += "WHERE "
			cQuery += "UB_FILIAL='" + xFilial( "SUB" ) + "' AND "
			cQuery += "UB_NUM='"    + cNumOrc          + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY UB_NUM, UB_ITEM"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SUA-" + cNumOrc, 50 )+cTreeID )

			While !( cAliasQry )->( Eof() )
				MATRKSUB( ( cAliasQry )->UB_NUM + ( cAliasQry )->UB_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID)
				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SUB" )

		Else

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Usa o SUB para localizar o pedidos gerado pelo SUA           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT UB_NUMPV "
			cQuery += "FROM " + RetSqlName( "SUB" ) + " "
			cQuery += "WHERE "
			cQuery += "UB_FILIAL='" + xFilial( "SUB" ) + "' AND "
			cQuery += "UB_NUM='"    + cNumOrc          + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "GROUP BY UB_NUMPV "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SUA-" + cNumOrc, 50 )+cTreeID)

			While !( cAliasQry )->( Eof() )
				MATRKSC5( ( cAliasQry )->UB_NUMPV, @oTree, , @nLevel, nMaxLevel, .F.,cTreeID )
				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SUB" )

		EndIf

	EndIf

EndIf

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSUC ³ Autor ³ Sergio Silveira       ³ Data ³19/08/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas do telemarketing ( cabecalho )             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSUC( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSUC( cTlmk, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cImageSUC   := "" 								// Imagem ultilizada para representar o Item de Atendimento
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Variaveis usadas em Integracoes                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

SUC->( DbSetOrder( 1 ) )
If SUC->( DbSeek( xFilial( "SUC" ) + cTlmk ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		cImageSUC := MaEntImage( "SUC", 1 )

		oTree:AddItem( Pad( STR0045  + Transform( cTlmk, "@r XXXXXX" ) + ;    //"Atendimento Telemarketing  - "
		cAddString, 100 ), Pad( "SUC-" + cTlmk, 50 )+cTreeID,cImageSUC,cImageSUC,,,nLevel)

		oTree:TreeSeek( Pad( "SUC-" + cTlmk, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se gerou chamado no Field Service                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AB1->( DbSetOrder( 5 ) )
		If AB1->( DbSeek( xFilial( "AB1" ) + cTlmk ) )
			MATRKAB1( AB1->AB1_NRCHAM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
		EndIf

		oTree:TreeSeek( Pad( "SUC-" + cTlmk, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica as FNCs geradas no QNC                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SUD->(DbSeek( xFilial( "SUC" ) + SUC->UC_CODIGO))
			While SUD->( !Eof() .AND. SUC->(xFilial("SUC"))+SUC->UC_CODIGO == SUD->(xFilial("SUD")) + SUD->UD_CODIGO )
        	       	If !Empty(SUD->UD_CODFNC)
					MATRKQI2( SUD->UD_CODIGO, @oTree, , @nLevel, nMaxLevel,,cTreeID )
					Exit
  	  			EndIf
				SUD->( dbSkip() )
			End
		EndIf
	EndIf

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKAB1 ³ Autor ³ Sergio Silveira       ³ Data ³19/08/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas do chamado tecnico (Header) - Field Service³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKAB1( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKAB1( cChamado, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cQuery      := ""
LOCAL cAliasQry   := ""
LOCAL cImageAB1   := ""

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

AB1->( DbSetOrder( 1 ) )
If AB1->( DbSeek( xFilial( "AB1" ) + cChamado ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		cImageAB1 := MaEntImage( "AB1", 1 )

		oTree:AddItem( Pad( STR0046  + Transform( cChamado, "@r XXXXXXXX" ) + ;    //"Chamado Tecnico - "
		cAddString, 100 ), Pad( "AB1-" + cChamado, 50 )+cTreeID,cImageAB1,cImageAB1,,,nLevel)

		oTree:TreeSeek( Pad( "AB1-" + cChamado, 50 )+cTreeID )

		If lItem

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens deste chamado                              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT AB2_NRCHAM, AB2_ITEM "
			cQuery += "FROM " + RetSqlName( "AB2" ) + " "
			cQuery += "WHERE "
			cQuery += "AB2_FILIAL='" + xFilial( "AB2" ) + "' AND "
			cQuery += "AB2_NRCHAM='" + cChamado         + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY AB2_NRCHAM, AB2_ITEM"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			While !( cAliasQry )->( Eof() )
				MATRKAB2( ( cAliasQry )->AB2_NRCHAM + ( cAliasQry )->AB2_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
				oTree:TreeSeek( Pad( "AB1-" + cChamado, 50 )+cTreeID )
				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "AB2" )

		EndIf

	EndIf

	nLevel--

EndIf

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSA1 ³ Autor ³ Marcelo Kotaki        ³ Data ³17/11/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas do cadastro de Cliente                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSA1( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSA1( cCodigo, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID,lConta )

Local cImageSA1 := ""
Local cAliasQry := ''

DEFAULT nMaxLevel := 3
DEFAULT cTreeID   := "000001"
Default lConta    := .F.

DbSelectarea("SA1")
DbSetOrder(1)
If DbSeek( xFilial( "SA1" ) + cCodigo )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := FATPDObfuscate(SA1->A1_NOME, "A1_NOME", Nil, .T.)
		cImageSA1  := MaEntImage( "SA1", 1 )
		//"Cadastro de Cliente - Codigo: "		"Loja: " " Nome: "
		oTree:AddItem( Pad( STR0125 + SUBSTR(ALLTRIM(cCodigo),1,6) + STR0060 + SUBSTR(ALLTRIM(cCodigo),6,2) + STR0061 + cAddString, 100 ), Pad( "SA1-" + cCodigo, 50 )+cTreeID,cImageSA1,cImageSA1,,,nLevel)



		If lConta
			If !Empty(SA1->A1_COD) .AND. !Empty(SA1->A1_LOJA)
				AD1->( DbSetOrder( 1 ) )

				cAliasQry := GetNextAlias()

				cQuery := "SELECT * "
				cQuery += "FROM " + RetSqlName( "AD1" ) + " "
				cQuery += "WHERE "
				cQuery += "AD1_FILIAL='" + xFilial( "AD1" ) + "' AND "
				cQuery += "AD1_CODCLI ='" + SA1->A1_COD        + "' AND "
				cQuery += "AD1_LOJCLI='"  + SA1->A1_LOJA       + "' AND "
				cQuery += "D_E_L_E_T_=' ' "

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )


				(cAliasQry) -> (dbGoTop())
				While !( cAliasQry )->( Eof() )
					cChaveAD1 := ( cAliasQry )->AD1_NROPOR+( cAliasQry )->AD1_REVISA

					oTree:TreeSeek( Pad( "SA1-" + cCodigo, 50 )+cTreeID )

					If AD1->( DbSeek( xFilial( "AD1" ) + cChaveAD1 ) )
						MATRKAD1( cChaveAD1, @oTree, , @nLevel, nMaxLevel,,cTreeID,lConta)
					Endif

					( cAliasQry )->( dbSkip() )

				EndDo
			Endif
		EndIf
	Endif

	nLevel--
Endif

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSUS ³ Autor ³ Marcelo Kotaki        ³ Data ³17/11/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas do cadastro de Prospect                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSUS( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSUS( cCodigo, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

Local cImageSUS := ""
Local cChaveSA1 := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

DbSelectarea("SUS")
DbSetOrder(1)
If DbSeek( xFilial( "SUS" ) + cCodigo )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := FATPDObfuscate(SUS->US_NOME, "US_NOME", Nil, .T.)
		cImageSUS  := MaEntImage( "SUS", 1 )
		// "Cadastro de Prospect - Codigo: " " Loja: " " Nome: "
		oTree:AddItem( Pad( STR0062 + SUS->US_COD + STR0060 + SUS->US_LOJA + STR0061 + cAddString, 100 ), Pad( "SUS-" + cCodigo, 50 ),cImageSUS,cImageSUS,,,nLevel)

		oTree:TreeSeek( Pad( "SUS-" + cCodigo, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se o Cliente desse Prospect                         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(SUS->US_CODCLI) .AND. !Empty(SUS->US_LOJACLI)
			cChaveSA1 := SUS->US_CODCLI+SUS->US_LOJACLI
			SA1->( DbSetOrder( 1 ) )
			If SA1->( DbSeek( xFilial( "SA1" ) + cChaveSA1 ) )
				MATRKSA1( cChaveSA1, @oTree, , @nLevel, nMaxLevel,,cTreeID,.T.)
			Endif
		Endif
	Endif

	nLevel--
Endif

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKACH ³ Autor ³ Marcelo Kotaki        ³ Data ³17/11/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas do cadastro de Suspect                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKACH( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKACH( cCodigo, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

Local cImageACH := ""
Local cChavePro	:= ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

DbSelectarea("ACH")
DbSetOrder(1)
If DbSeek( xFilial( "ACH" ) + cCodigo )

	nLevel++

	If nLevel <= nMaxLevel
		cAddString := FATPDObfuscate(ACH->ACH_RAZAO, "ACH_RAZAO", Nil, .T.)
		cImageACH  := MaEntImage( "ACH", 1 )
		// "Cadastro de Suspect - Codigo: "
		oTree:AddItem( Pad( STR0063 + SUBSTR(ALLTRIM(cCodigo),1,6) + STR0060 + SUBSTR(ALLTRIM(cCodigo),6,2) + STR0061 + cAddString, 100 ), Pad( "ACH-" + cCodigo, 50 ),cImageACH,cImageACH,,,nLevel)

		oTree:TreeSeek( Pad( "ACH-" + cCodigo, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se ja existe o Prospect desse Suspect               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(ACH->ACH_CODPRO) .AND. !Empty(ACH->ACH_LOJPRO)
			cChavePro := ACH->ACH_CODPRO+ACH->ACH_LOJPRO
			SUS->( DbSetOrder( 1 ) )
			If SUS->( DbSeek( xFilial( "SUS" ) + cChavePro ) )
				MATRKSUS( cChavePro, @oTree, , @nLevel, nMaxLevel,,cTreeID )
			Endif
		Endif
	Endif

	nLevel--
Endif

Return( .T. )


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaMakeView³ Autor ³ Sergio Silveira       ³ Data ³25/10/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Dispara os visualizadores padrao para cada entidade        ³±±
±±³          ³ A tabela deve estar posionada no registro desejado         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ExpL1 := MaMakeView( ExpC1 )                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1 -> Indica se existe visualizador para a entidade     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Alias da entidade                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³02/03/2007³Norbert Waage  ³Alteracao do vetor aRotina criado para a    ³±±
±±³          ³               ³rotina TK271CallCenter. O aRotina so possuia³±±
±±³          ³               ³1 item para a chamada da funcao e ocasionava³±±
±±³          ³               ³erro na GetDados em uma subrotina do TMKA271³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MaMakeView( cAlias )
Local aArea      := GetArea()
Local aRotBack,cCadBack
Local aUserView  := { { "", { || .T. } } }
Local aCopAcols  := {}
Local aCopaHeader:= {}
Local lRet       := .T.
Local cSeekSF2   := ""
Local cFiltroBKP := ""
Local cFilBkp	 := ""
Local nBack

If Type( "N" ) == "N"
	nBack := n
	n     := 1
Else
	If Type( "N" ) == "U" .And. IsInCallStack("cn130track")
		Private n := 1
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso exista, faz uma copia do aRotina                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type( "aRotina" ) == "A"
	aRotBack := AClone( aRotina )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso exista, faz uma copia do cCadastro                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type( "cCadastro" ) == "C"
	cCadBack := cCadastro
Else
	Private cCadastro := STR0017 //Visualizar
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega o array de visualizadores definidos pelo usuario ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock( "MAUSVIEW" )
	aUserView := ExecBlock( "MAUSVIEW", .f., .f. )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se existe um visualizador do usuario para esta entidade ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty( nScan := AScan( aUserView, { |x| x[1] == cAlias } ) )
	Do Case
		Case cAlias == "AB1"
			TECA300( "At300Visua" )
		Case cAlias == "AB3"
			TECA400( "At400Visua" )
		Case cAlias == "AB6"
			TECA450( "At450Visua" )
		Case cAlias == "AB9"
			aRotina := 	{ { STR0017,"At460Visua" , 0 , 2 } }
			At460Visua( "AB9", AB9->( Recno() ), 1 )
		Case cAlias == "ABK"
			TECA310( "At310Visua" )
		Case cAlias == "ABL"
			TECA320( "AxVisual" )
		Case cAlias == "ABH"
			TECA700( "AT700Visua" )
		Case cAlias == "SC2"
			cCadastro := Alltrim(STR0050)
			AxVisual( "SC2", SC2->( Recno() ), 1 )
		Case cAlias == "SC5"
			cCadastro := STR0016	 //"Atualizacao de Pedidos de Venda"
			aRotina := { {  STR0017,"A410Visual",0,2 } }  //"Visualizar"
			A410Visual("SC5", SC5->( Recno() ), 1 )
		Case cAlias == "ABF"
			cCadastro := ""
			aRotina := { {  STR0017,"AT470Visua",0,2 } }  //"Visualizar"
			AT470Visua("ABF", ABF->( Recno() ), 1 )
		Case cAlias == "ABB"
			Atc050Age( "AB6", AB6->( Recno() ), 1 )
		Case cAlias == "ADA"
			cCadastro := "Contrato de Parceria - Venda"
			aRotina := { {  "Visualizar","Ft400Alter",0,2 } }  //"Visualizar"
			Ft400Alter("ADA",ADA->( Recno() ),1)
		Case cAlias == "SD2"
			If cPaisLoc == "BRA"
				aRotina := {{ "", "AxPesqui", 2 },{ "" ,"a920NFSAI", 0, 2}}
				A920NFSAI( "SD2", SD2->( Recno() ), 2 )
			Else
				SF2->( DbSetOrder( 2 ) )
				cSeekSF2:=SD2->D2_FILIAL+SD2->D2_CLIENTE+SD2->D2_LOJA+SD2->D2_DOC+SD2->D2_SERIE
				If SF2->( dbSeek( cSeekSF2 ) )
					VisualNfRem( "SF2", SF2->( Recno() ) )
				EndIf
			Endif
		Case cAlias == "SD3"
			cCadastro := Alltrim(STR0051) //"Movimento Interno "
			AxVisual( "SD3", SD3->( Recno() ), 1 )
		Case cAlias == "SC9"
			AxVisual( "SC9", SC9->( Recno() ), 1 )
		Case cAlias == "AAM"
			aRotina := { { STR0017,"At250Manut",0,2} }
			At250Manut( "AAM", AAM->( Recno() ), 1 )
		Case cAlias == "SCJ"
     		cCadastro	:=  STR0124 	//"Orçamentos de Venda"
			aRotina := { {"","AxPesqui",0,1},{STR0017,"A415Visual",0,2},{"","A415Inclui",0,3} }  	//Visualizar
			A415Visual("SCJ", SCJ->( Recno() ), 1 )

		Case cAlias == "ADY"
			FWExecView(Upper(STR0017),"VIEWDEF.FATA600",MODEL_OPERATION_VIEW,/*oDlg*/,/*bCloseOnOk*/,/*bOk*/,/*nPercReducao*/)

		Case cAlias == "AAH"
			cCadastro := ""
			aRotina := { {  STR0017,"At200Manut",0,2 } }  //"Visualizar"
			At200Manut( "AAH", AAH->( Recno() ), 1 )

		Case cAlias == "AAM"
			cCadastro := ""
			aRotina := { {  STR0017,"At250Manut",0,2 } }  //"Visualizar"
			At250Manut( "AAM", AAM->( Recno() ), 2 )

		Case cAlias == "AAA"
			cCadastro := ""
			aRotina := { {  STR0017,"At230Visu",0,2 } }  //"Visualizar"
			At230Visu( "AAA", AAA->( Recno() ), 1 )

		Case cAlias == "AD1"
			FWExecView(Upper(STR0017),"VIEWDEF.FATA300",MODEL_OPERATION_VIEW,/*oDlg*/,/*bCloseOnOk*/,/*bOk*/,/*nPercReducao*/)
		Case cAlias == "SC0"
			aRotina := { { "", "AxPesqui", 0, 1 },{ STR0017,"A430Visual",0,2 } }  //"Visualizar"
			A430Visual("SC0", SC0->( Recno() ), 2 )
		Case cAlias == "SE1"
			FINA040(NIL,2)
		Case cAlias == "SE2"
			FA050Visua( "SE2",SE2->( Recno() ),2 )
		Case cAlias == "SCN"
			// foi necessario guardar o aHeader e o Acols pois o programa A462Visual
			// cria essas mesma variaveis com conteudos diferentes
			aCopAcols:= Acols
			aCopaHeader:=aHeader
			aRotina := { { "", "AxPesqui", 0, 1 },{ STR0017,"A462Visual",0,2 } }  //"Visualizar"
			A462Visual("SCN", SCN->( Recno() ), 2 )
			Acols:=aCopAcols
			aHeader := aCopaHeader
		Case cAlias == "SUA"
			TkGetTipoAte("2")//Seta a abertura da tela de atendimento somente para Televendas
			cCadastro := STR0042 //"Atualizacao de Televendas"
			aRotina := { { "", "AxPesqui", 0, 1 },{ STR0017  ,"TK271CallCenter" ,0,2 },{"","TK271CallCenter" ,0,3} }  	//Visualizar
			TK271CallCenter("SUA", SUA->( Recno() ) , 2 )
		Case cAlias == "SC1"
			If SC1->C1_TIPO == 2
				MATA113(NIL,NIL,2)
			Else
				MATA110(NIL,NIL,2)
			EndIf
		Case cAlias == "SC7"
			Mata120(If(cAlias="SC7",1,2),,, 2 )
		Case cAlias == "SC3"
			Mata125(NIL,NIL,2)
		Case cAlias == "SCR"
			cCadastro := STR0017
			aRotina := { {  STR0017,"AxVisual",0,2 } }  //"Visualizar"
			AxVisual("SCR", SCR->( Recno() ), 1 )
		Case cAlias == "SC8"
			A161MapCot()
		Case cAlias == "SD1"
			cCadastro := "Documento de Entrada"
			cFiltroBKP:= SF1->(dbFilter())
			SF1->(dbClearFilter())
			SF1->( DbSetOrder( 1 ) )
	   		cSeekSF1:=xFilial("SF1")+SD1->D1_DOC+SD1->D1_SERIE+SD1->D1_FORNECE+SD1->D1_LOJA
			If SF1->( dbSeek( cSeekSF1 ) )
				If cPaisLoc == "BRA"
					aRotina := {{ STR0017 ,"A103NFiscal", 0, 2}}
					A103NFiscal( "SF1", SF1->( Recno() ), 1 )
				Else
					VisualNfRem( "SF1", SF1->( Recno() ) )
				Endif
			EndIf
			If !Empty(cFiltroBkp)
				SF1->(dbSetFilter({||&cFiltroBkp},cFiltroBkp))
			EndIF
		Case cAlias == "SA1"  // Cadastro de Clientes
			cCadastro := "Cadastro de Clientes"
			aRotina := { { STR0017,"A030Visual",0,2 } }  //"Visualizar"
			A030Visual("SA1", SA1->( Recno() ), 1 )

		Case cAlias == "SUS"  // Cadastro de Prospect
			FWExecView(Upper("Cadastro de Prospect"),"VIEWDEF.TMKA260",MODEL_OPERATION_VIEW,/*oDlg*/,/*bCloseOnOk*/,/*bOk*/,/*nPercReducao*/)

		Case cAlias == "ACH"  // Cadastro de Suspect
			FWExecView(Upper("Cadastro de Suspect"),"VIEWDEF.TMKA341",MODEL_OPERATION_VIEW,/*oDlg*/,/*bCloseOnOk*/,/*bOk*/,/*nPercReducao*/)
		Case cAlias == "CNA"
			FWExecView(STR0017,If(CN9->CN9_ESPCTR == "1","CNTA300","CNTA301"),MODEL_OPERATION_VIEW,,{|| .T.})//"Visualizar"

		Case cAlias == "CND"			
			CNTA120( NIL, NIL, 2, "cn130manut" )

		Case cAlias == "CND2" //Caso a medição for oriunda do CNTA121
			cFilBkp := cFilAnt //Guarda filial original
			
			If !Empty(CND->CND_FILMED)
				cFilAnt := CND->CND_FILMED
			ElseIf(FWModeAccess("CND",1)+FWModeAccess("CND",2)+FWModeAccess("CND",3) == "EEE")
				cFilAnt := CND->CND_FILIAL
			EndIf
			FWExecView(STR0017,"CNTA121",MODEL_OPERATION_VIEW,,{|| .T.})//"Visualizar"

			cFilAnt := cFilBkp //Restaura filial original
		Case cAlias == "CN9"
			CN300Visua()
		Otherwise
			lRet := .F.
	EndCase
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Dispara o visualizador do usuario                                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Eval( aUserView[ nScan, 2 ] )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura o aRotina                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ValType( aRotBack ) == "A"
	aRotina := AClone( aRotBack )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso exista, faz uma copia do cCadastro                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type( "cCadBack" ) == "C"
	cCadastro := cCadBack
EndIf

If ValType( nBack ) == "N"
	n := nBack
EndIf

RestArea( aArea )

Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaPrepView³ Autor ³ Sergio Silveira       ³ Data ³27/09/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Prepara a chamada dos visualizadores a partir do tree do   ³±±
±±³          ³ Tracker padrao                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ExpL1 := MaPrepView( ExpO1 )                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1 -> Indica se foi possivel preparar / disparar o      ³±±
±±³          ³ visualizador.                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpO1 -> Objeto Tree                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaPrepView(oTree, oSay) 

LOCAL aArea     := GetArea()
LOCAL aAreaBkp	:= {}
LOCAL cFiltroSF1:= ""
LOCAL cChave    := oTree:GetCargo()
LOCAL cAlias    := Left( cChave, 3 )
Local cFilBack  := cFilAnt
LOCAL lRet      := .T.
LOCAL lFilEnt	:= TRKFILENT()
LOCAL nTamChave := 0
Local nComeco 	:= 0

PRIVATE aRotina

if(oSay == Nil)
	FWMsgRun(, {|oSay| lRet:= MaPrepView(oTree, oSay) }, STR0132, STR0132)	
	Return ( lRet )
endIf

INCLUI := .F.
ALTERA := .F.

Do Case
	Case cAlias == "AB2" .Or. cAlias == "AB1"
		AB1->( DbSetOrder( 1 ) )
		If AB1->( DbSeek( xFilial( "AB1" ) + SubStr( cChave, 5, 8 ) ) )
			lRet := MaMakeView( "AB1" )
		EndIf
	Case cAlias == "AB4"
		AB3->( DbSetOrder( 1 ) )
		If AB3->( DbSeek( xFilial( "AB3" ) + SubStr( cChave, 5, 6 ) ) )
			lRet := MaMakeView( "AB3" )
		EndIf
	Case cAlias == "AB7"
		AB6->( DbSetOrder( 1 ) )
		If AB6->( DbSeek( xFilial( "AB6" ) + SubStr( cChave, 5, 6 ) ) )
			lRet := MaMakeView( "AB6" )
		EndIf
	Case cAlias == "AB9"
		AB9->( DbSetOrder( 1 ) )
		If AB9->( DbSeek( xFilial( "AB9" ) + Substr( cChave, 5, 24 ) ) )
			lRet := MaMakeView( "AB9" )
		EndIf
	Case cAlias == "ABK"
		ABK->( DbSetOrder( 1 ) )
		If ABK->( DbSeek( xFilial( "ABK" ) + Substr( cChave, 5, 12 ) ) )
			lRet := MaMakeView( "ABK" )
		EndIf
	Case cAlias == "ABL"
		ABL->( DbSetOrder( 1 ) )
		If ABL->( DbSeek( xFilial( "ABL" ) + Substr( cChave, 5, 10 ) ) )
			lRet := MaMakeView( "ABL" )
		EndIf
	Case cAlias == "ABI"
		ABH->( DbSetOrder( 1 ) )
		If ABH->( DbSeek( xFilial( "ABH" ) + Substr( cChave, 5, 6 ) ) )
			lRet := MaMakeView( "ABH" )
		EndIf
	Case cAlias == "SC2"
		SC2->( DbSetOrder( 1 ) )
		If SC2->( DbSeek( xFilial( "SC2" ) + Substr( cChave, 5, Len(SD3->D3_OP) ) ) )
			lRet := MaMakeView( "SC2" )
		EndIf
	Case cAlias == "SC6" .Or. cAlias == "SC5"
		SC5->( DbSetOrder( 1 ) )
		If SC5->( DbSeek( xFilial( "SC5" ) + Substr( cChave, 5, 6 ) ) )
			lRet := MaMakeView( "SC5" )
		EndIf

	Case cAlias == "CN9" .Or. cAlias == "N9H" .Or. cAlias == "CXN"

		cCadastro := STR0114 // "Contratos"
		
		nTamChave := Len( CN9->CN9_REVISA + CN9->CN9_NUMERO )
		nComeco := 5
		If(cAlias == "CXN" )			
			nComeco	+= FwSizeFilial()
		EndIf
				
		CN9->( DbSetOrder( 1 ) )
		If CN9->( DbSeek( xFilial( "CN9" ) + Substr( cChave, nComeco, nTamChave ) ) )
			lRet := MaMakeView( "CN9" )
		EndIf

	Case cAlias == "CNA" .Or. cAlias == "CNB"

		nTamChave := Len( CNA->CNA_CONTRA + CNA->CNA_REVISA + CNA->CNA_NUMERO )
		If !FunName() $ 'MATA110'
			CNA->( DbSetOrder( 1 ) )
			If CNA->( DbSeek( xFilial( "CNA", SubStr( cChave,5, FwSizeFilial())) + Substr( cChave, 5+FwSizeFilial(), nTamChave ) ) )
				lRet := MaMakeView( "CNA" )
			EndIf
		Else
			CN9->( DbSetOrder( 1 ) )
			If CN9->( DbSeek( xFilial( "CN9" ) + Substr( cChave, 5, Len( CN9->CN9_REVISA + CN9->CN9_NUMERO ) ) ) )
				lRet := MaMakeView( "CN9" )
			EndIf
		EndIf

 		Case cAlias == "CND" .Or. cAlias == "CNE"		
		
		nTamChave := Len( CND->(CND_CONTRA + CND_REVISA + CND_NUMERO + CND_NUMMED) )
		CND->( DbSetOrder( 1 ) ) //CND_FILIAL+CND_CONTRA+CND_REVISA+CND_NUMERO+CND_NUMMED

		If CND->( DbSeek( xFilial( "CND", SubStr(cChave,5, FwSizeFilial())) + Substr( cChave, 5+FwSizeFilial(), nTamChave ) ) )
			lRet := MaMakeView( "CND" )
		Else 
			//Caso a medição for oriunda do CNTA121
			CND->( DbSetOrder( 7 ) ) //CND_FILIAL+CND_CONTRA+CND_REVISA+CND_NUMMED
			If CND->( DbSeek( xFilial( "CND", SubStr(cChave,5, FwSizeFilial())) + Substr( cChave, 5+FwSizeFilial(), nTamChave-12 ) +  Substr( cChave, 29+FwSizeFilial(), nTamChave-24 )) )
				lRet := MaMakeView( "CND2" )
			EndIf	
		EndIf	

	Case cAlias == "ADA" .Or. cAlias == "ADB"
		ADA->( DbSetOrder( 1 ) )
		If ADA->( DbSeek( xFilial( "ADA" ) + Substr( cChave, 5, 6 ) ) )
			lRet := MaMakeView( "ADA" )
		EndIf
	Case cAlias == "ABF"
		ABF->( DbSetOrder( 1 ) )
		If ABF->( DbSeek( xFilial( "ABF" ) + Substr( cChave, 5, 10 ) ) )
			lRet := MaMakeView( "ABF" )
		EndIf
	Case cAlias == "ABB"
		AB6->( DbSetOrder( 1 ) )
		If AB6->( DbSeek( xFilial( "AB6" ) + SubStr( cChave, 5, 6 ) ) )
			lRet := MaMakeView( "ABB" )
		EndIf
	Case cAlias == "SD2" .Or. cAlias == "SF2"

		//Tratamento para _SDOC dos documentos fiscais, caso habilitado
		If SerieNFId("SD2", 3, "D2_SERIE") == "D2_SERIE"
			SD2->( DbSetOrder( 3 ) )
		Else
			SD2->( DbSetOrder( 13 ))
		EndIf

		nTamChave := Len( SD2->D2_DOC + SerieNFId("SD2", 2, "D2_SERIE") + SD2->D2_CLIENTE + SD2->D2_LOJA )
		If SD2->( DbSeek( xFilial( "SD2" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "SD2" )
		EndIf
	Case cAlias == "SD3"
		SD3->(dbGoto(Val(Substr(cChave,5+Len(SD3->D3_NUMSEQ),10))))
		lRet := MaMakeView( "SD3" )
	Case cAlias == "SC9"
		cCadastro := STR0025  //"Liberacao"

		nTamChave := Len( SC9->C9_PEDIDO + SC9->C9_ITEM + SC9->C9_SEQUEN )
		SC9->( DbSetOrder( 1 ) )
		If SC9->( DbSeek( xFilial( "SC9" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "SC9" )
		EndIf
	Case cAlias == "SCK"	.Or. cAlias == "SCJ"
		SCJ->( DbSetOrder( 1 ) )
		If SCJ->( DbSeek( xFilial( "SCJ" ) + SubStr( cChave, 5, 6 ) ) )
			lRet := MaMakeView( "SCJ" )
		EndIf

	Case cAlias == "ADY"
		nTamChave := Len( ADY->( ADY_PROPOS + ADY_PREVIS )  )
		ADY->( DbSetOrder( 1 ) )
		If ADY->( DbSeek( xFilial( "ADY" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "ADY" )
		EndIf

	Case cAlias == "AAH"
		nTamChave := Len( AAH->AAH_CONTRT  )
		AAH->( DbSetOrder( 1 ) )
		If AAH->( DbSeek( xFilial( "AAH" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "AAH" )
		EndIf

	Case cAlias == "AAM"
		nTamChave := Len( AAM->AAM_CONTRT  )
		AAM->( DbSetOrder( 1 ) )
		If AAM->( DbSeek( xFilial( "AAM" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "AAM" )
		EndIf

	Case cAlias == "AAA"
		nTamChave := Len( AAA->AAA_CODGRP  )
		AAA->( DbSetOrder( 1 ) )
		If AAA->( DbSeek( xFilial( "AAA" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "AAA" )
		EndIf

	Case cAlias == "AD1"
		AD1->( DbSetOrder( 1 ) )
		If AD1->( DbSeek( xFilial( "AD1" ) + SubStr( cChave, 5, 6 ) ) )
			lRet := MaMakeView( "AD1" )
		EndIf
	Case cAlias == "AAN"	.Or. cAlias == "AAO" .Or. cAlias == "AAP"
		AAM->( DbSetOrder( 1 ) )
		nTamChave := Len( AAM->AAM_CONTRT )
		If AAM->( DbSeek( xFilial( "AAM" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "AAM" )
		EndIf
	Case cAlias == "SC0"
		SC0->( DbSetOrder( 1 ) )
		nTamChave := Len( SC0->C0_NUM )
		If SC0->( DbSeek( xFilial( "SC0" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "SC0" )
		EndIf
	Case cAlias == "SE1"
		SE1->( DbSetOrder( 2 ) )
		nTamChave := Len( SE1->E1_CLIENTE + SE1->E1_LOJA + SE1->E1_PREFIXO + SE1->E1_NUM + SE1->E1_PARCELA + SE1->E1_TIPO )
		If SE1->( DbSeek( xFilial( "SE1" ) + SubStr( cChave, 5, nTamChave ) ) )
			lRet := MaMakeView( "SE1" )
		EndIf
	Case cAlias == "SE2"
		If lFilEnt
			SE2->( DbSetOrder( 6 ) )
			nTamChave := Len( SE2->E2_FILIAL + SE2->E2_FORNECE + SE2->E2_LOJA + SE2->E2_PREFIXO + SE2->E2_NUM + SE2->E2_PARCELA )
			If SE2->( DbSeek( SubStr( cChave, 5, nTamChave ) ) )
	            cFilBack := cFilAnt
	            cFilAnt  := SE2->E2_FILIAL
				lRet := MaMakeView( "SE2" )
	            cFilAnt := cFilBack
			EndIf
		Else
			SE1->( DbSetOrder( 2 ) )
			nTamChave := Len( SE2->E2_FORNECE + SE2->E2_LOJA + SE2->E2_PREFIXO + SE2->E2_NUM + SE2->E2_PARCELA )
			If SE2->( DbSeek( xFilial( "SE2" ) + SubStr( cChave, 5, nTamChave ) ) )
				lRet := MaMakeView( "SE2" )
			EndIf
		EndIf
	Case cAlias == "SCN"
		nTamChave :=  Len( SCN->CN_REMITO + SCN->CN_ITEM)
		SCN->( DbSetOrder(1 ) )  // Pesquisa por remito
		If SCN->( DbSeek( xFilial( "SCN" ) + SubStr( cChave, 5 + Len(SCN->CN_PEDIDO + SCN->CN_ITEMPED + SCN->CN_CLIENTE + SCN->CN_LOJA),nTamChave) )  )
			lRet := MaMakeView( "SCN" )
		EndIf
	Case cAlias == "SUA" .Or. cAlias == "SUB"
		nTamChave :=  Len( SUA->UA_NUM)
		SUA->( DbSetOrder(1 ) )  // Pesquisa por Atendimento - Televendas
		If SUA->( DbSeek( xFilial( "SUA" ) + SubStr( cChave, 5,nTamChave) )  )
			lRet := MaMakeView( "SUA" )
		EndIf
	Case cAlias == "SC1"
		SC1->( DbSetOrder( 1 ) )
		If lFilEnt
			If SC1->( DbSeek( Substr( cChave, 5, (TamSx3('C1_FILIAL')[1] + TamSx3('C1_NUM')[1]) )))
	            cFilBack := cFilAnt
	            cFilAnt  := SC1->C1_FILIAL
				lRet := MaMakeView( "SC1" )
	            cFilAnt := cFilBack
			EndIf
		Else
			If SC1->( DbSeek( xFilial( "SC1" ) + Substr( cChave, 5, 6 ) ) )
				lRet := MaMakeView( "SC1" )
			EndIf
		EndIf
	Case cAlias == "SC3"
		SC3->( DbSetOrder( 1 ) )
		If lFilEnt
			If SC3->( DbSeek( Substr( cChave, 5, (TamSx3('C3_FILIAL')[1] + TamSx3('C3_NUM')[1])) ) )
	            cFilBack := cFilAnt
	            cFilAnt  := SC3->C3_FILIAL
				lRet := MaMakeView( "SC3" )
	            cFilAnt := cFilBack
			EndIf
		Else
			If SC3->( DbSeek( xFilial( "SC3" ) + Substr( cChave, 5, 6 ) ) )
				lRet := MaMakeView( "SC3" )
			EndIf
		EndIf
	Case cAlias == "SC7"
		If lFilEnt
			SC7->( DbSetOrder( 14 ) )
			nTamChave := Len( SC7->(C7_FILENT + C7_NUM) )
			If SC7->( DbSeek( Substr( cChave, 5, nTamChave ) ) )
	            cFilBack := cFilAnt
	            cFilAnt  := SC7->C7_FILIAL
				lRet := MaMakeView( "SC7" )
	            cFilAnt := cFilBack
			EndIf
		Else
			SC7->( DbSetOrder( 1 ) )
			If SC7->( DbSeek( xFilial( "SC7" ) + Substr( cChave, 5, 6 ) ) )
				lRet := MaMakeView( "SC7" )
			EndIf
		EndIf
	Case cAlias == "SCR"
		If lFilEnt
			SCR->( DbSetOrder( 2 ) )
			cChave := Substr(cChave,5,4) + Pad(Substr(cChave,9,6),Len(SCR->CR_NUM))+Substr(cChave,15,6)
			If SCR->( DbSeek(cChave) )
	            cFilBack := cFilAnt
	            cFilAnt  := SCR->CR_FILIAL
				lRet := MaMakeView( "SCR" )
	            cFilAnt := cFilBack
			EndIf
		Else
	   		SCR->( DbSetOrder( 1 ) )
			If SCR->( DbSeek( xFilial( "SCR" ) + Substr( cChave, 5, 8 ) ) )
				lRet := MaMakeView( "SCR" )
			EndIf
		EndIf
	Case cAlias == "SC8"
		SC8->( DbSetOrder( 1 ) )
		If lFilEnt
			nTamChave := Len( SC8->C8_FILIAL ) + Len( SC8->C8_NUM )
	 		If SC8->( DbSeek(  Substr( cChave, 5, nTamChave ) ) )
	            cFilBack := cFilAnt
	            cFilAnt  := SC8->C8_FILIAL
				lRet := MaMakeView( "SC8" )
	            cFilAnt := cFilBack
			EndIf
		Else
			nTamChave := Len( SC8->C8_NUM )
	 		If SC8->( DbSeek( xFilial( "SC8" ) + Substr( cChave, 5, nTamChave ) ) )
				lRet := MaMakeView( "SC8" )
			EndIf
		EndIf
	Case cAlias == "SD1" .Or. cAlias == "SF1"
		SD1->( DbSetOrder( 1 ) )
		If cPaisLoc == "BRA" .And. lFilEnt
			nTamChave := Len( SD1->D1_FILIAL + SD1->D1_DOC + SD1->D1_SERIE + SD1->D1_FORNECE + SD1->D1_LOJA )
			If SD1->( DbSeek( SubStr( cChave, 5, nTamChave ) ) )
	            cFilBack := cFilAnt
	            cFilAnt  := SD1->D1_FILIAL
	            SF1->(DbSetOrder(1))
	   	        SF1->(dbSeek(SD1->D1_FILIAL+SD1->D1_DOC+SD1->D1_SERIE+SD1->D1_FORNECE+SD1->D1_LOJA))
				lRet := MaMakeView( "SD1" )
	            cFilAnt := cFilBack
			EndIf
		Else
			aAreaBkp:= GetArea()
			DbSelectArea("SF1")
			DbSetOrder(1)
			cFiltroSF1:= DbFilter()
			DbClearFilter()
			nTamChave := Len( SD1->D1_DOC + SD1->D1_SERIE + SD1->D1_FORNECE + SD1->D1_LOJA )
			If SD1->( DbSeek( xFilial( "SD1" ) + SubStr( cChave, 5, nTamChave ) ) )
            	SF1->(DbSetOrder(1))
   	    	    SF1->(dbSeek(xFilial("SF1")+SD1->D1_DOC+SD1->D1_SERIE+SD1->D1_FORNECE+SD1->D1_LOJA))
				lRet := MaMakeView( "SD1" )
			EndIf
			If !Empty(cFiltroSF1)
			   DbSetFilter ({|| &cFiltroSF1},cFiltroSF1)
			EndIf
			RestArea(aAreaBkp)
        EndIf
	Case cAlias == "SA1"
		nTamChave :=  Len(SA1->A1_COD)+Len(SA1->A1_LOJA)
		SA1->( DbSetOrder( 1 ) )
		If SA1->( DbSeek( xFilial( "SA1" ) + SubStr( cChave, 5,nTamChave) )  )
			lRet := MaMakeView( "SA1" )
		Endif

	Case cAlias == "SUS"
		nTamChave :=  Len( SUS->US_COD)+Len(SUS->US_LOJA)
		SUS->( DbSetOrder( 1 ) )
		If SUS->( DbSeek( xFilial( "SUS" ) + SubStr( cChave, 5,nTamChave) )  )
			lRet := MaMakeView( "SUS" )
		Endif

	Case cAlias == "ACH"
		nTamChave := Len(ACH->ACH_CODIGO)+Len(ACH->ACH_LOJA)
		ACH->( DbSetOrder( 1 ) )
		If ACH->( DbSeek( xFilial( "ACH" ) + AllTrim(SubStr( cChave, 5,nTamChave) )  ))
			lRet := MaMakeView( "ACH" )
		Endif
	Case cAlias == "OMS"
		If FindFunction("OmsPreView")
			OmsPreView(cChave)
		EndIf
	Otherwise
		lRet := .F.
EndCase

RestArea( aArea )

Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkShow ³ Autor ³ Sergio Silveira       ³ Data ³06/12/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta a tela de visualizacao do tracker                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkShow( ExpA1 )                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpO1 -> Objeto Tree                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkShow( aEnt )

Local aSize       := MsAdvSize( .F. )
Local aObjects    := {}
Local aUsButtons  := {}
Local aPosObj1    := {}

Local cGet1       := Space( 3 )
Local cGet2       := Space( 3 )

Local nTpRastUp   := 1
Local nTpRastDown := 1
Local nLoop       := 0

Local oDlg
Local oTree
Local oMenuTree
Local oPanel
Local oBmp1
Local oBmp2
Local oBmp3
Local oBmp4
Local oRast
Local oSair
Local oGet1
Local oGet2

Local oRad3
Local nNivel
Local lContinua	:= .T.
PRIVATE aTitulos  := {}


If(FwIsInCallStack("MaPrepView"))
	lContinua := .F.//Nao permite chamar o tracker 2x
	Help(" ",1,"TRKNOOPEN",,STR0133,5,0)//Não é possível acionar o tracker durante o processo de rastreamento.
EndIf

If(lContinua)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada para a criacao de botoes de usuario                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock( "MATRKBUT" )
		aUsButtons := ExecBlock( "MATRKBUT", .F., .F. )
	EndIf
	aObjects := {}
	AAdd( aObjects, { 100, 100, .T., .T. } )
	AAdd( aObjects, { 130, 100, .F., .T., .T. } )
	
	aInfo    := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 3, 3 }
	aPosObj1 := MsObjSize( aInfo, aObjects, .T., .T. )
	
	DEFINE MSDIALOG oDlg FROM	aSize[7],0 TO aSize[6],aSize[5] TITLE STR0026 OF oMainWnd PIXEL //"System Tracker"
		oTree := DbTree():New(aPosObj1[1,1],aPosObj1[1,2],aPosObj1[1,3],aPosObj1[1,4], oDlg,,,.T.)
	
		oTree:lShowHint := .F.
	
		MENU oMenuTree POPUP
		MENUITEM STR0017 Action MaPrepView(oTree) //"Visualizar"
		MENUITEM STR0033 ACTION MaTrkDisp( @oTree, aEnt, If( nTpRastUp == 1, Nil, Val( cGet1 ) ), If( nTpRastDown == 1, Nil, Val( cGet2 ) ) ) // "Rastear"
		MENUITEM STR0032 ACTION oDlg:End() // "Abandonar"
		ENDMENU
	
		oTree:bRClicked   := { |oObject,nx,ny| oMenuTree:Activate( nX, nY - 145, oObject ) }
	
		@ aPosObj1[2,1], aPosObj1[2,2] MSPANEL oPanel PROMPT "" SIZE aPosObj1[2,3],aPosObj1[2,4] OF oDlg CENTERED LOWERED
	
		@ 5, 5 TO 45, 125 of oPanel PROMPT STR0027  PIXEL //"Niveis para cima"
		@ 50,5 TO 90, 125 of oPanel PROMPT STR0028 PIXEL  //"Niveis para baixo"
		@ 95,5 TO 135, 125 of oPanel PROMPT STR0115 PIXEL  //"Detalhamento Total"
	
		nTpRastUp   := 1
		nTpRastDown := 1
	
		@ 018, 010 RADIO oRad1 VAR nTpRastUp   ITEMS STR0029,STR0030 ON CLICK MaTrkChang( oGet1, nTpRastUp, oBmp1, oBmp2 )   SIZE 40,10 PIXEL OF oPanel //"Ilimitado"###"Limitado a "
		@ 063, 010 RADIO oRad2 VAR nTpRastDown ITEMS STR0029,STR0030 ON CLICK MaTrkChang( oGet2, nTpRastDown, oBmp3, oBmp4 ) SIZE 40,10 PIXEL OF oPanel //"Ilimitado"###"Limitado a "
	
		@ 28, 52 MSGET oGet1 VAR cGet1 PICTURE "999" VALID Val(cGet1) >= 0 OF oPanel SIZE 20, 8 PIXEL
	
		@ 55, 148 BTNBMP oBmp1 RESNAME "VCUP"   ACTION ( cGet1 := Str( Val( cGet1 ) + 1, 3 ) )  SIZE 15, 10 OF oPanel PIXEL ADJUST
		@ 66, 148 BTNBMP oBmp2 RESNAME "VCDOWN" ACTION ( cGet1 := If( Val( cGet1 ) > 0, Str( Val( cGet1 ) - 1, 3 ), cGet1 ) )  SIZE 15, 10 OF oPanel PIXEL ADJUST
	
		@ 29, 86 SAY STR0031 OF oPanel SIZE 20, 8 PIXEL  //"niveis"
	
		@ 73, 52 MSGET oGet2 VAR cGet2 PICTURE "999" VALID Val(cGet2) >= 0 OF oPanel SIZE 20, 8 PIXEL
	
		@ 145, 148 BTNBMP oBmp3 RESNAME "VCUP"   ACTION ( cGet2 := Str( Val( cGet2 ) + 1, 3 ) )  SIZE 15, 10 OF oPanel PIXEL  ADJUST BORDER
		@ 156, 148 BTNBMP oBmp4 RESNAME "VCDOWN" ACTION ( cGet2 := If( Val( cGet2 ) > 0, Str( Val( cGet2 ) - 1, 3 ), cGet2 ) )  SIZE 15, 10 OF oPanel PIXEL  ADJUST BORDER
	
		@ 74, 86 SAY STR0031 OF oPanel SIZE 20, 8 PIXEL  //"niveis"
	
		@ 140, 42 BUTTON oSair PROMPT STR0032 SIZE 040,12 ACTION oDlg:End() OF oPanel PIXEL  //"Abandonar"
		@ 140, 85 BUTTON oRast PROMPT STR0033  SIZE 040,012 FONT oDlg:oFont ACTION ;  //"Rastrear"
		MaTrkDisp( @oTree, aEnt, If( nTpRastUp == 1, Nil, Val( cGet1 ) ), If( nTpRastDown == 1, Nil, Val( cGet2 ) ),nNivel ) PIXEL OF oPanel
	
		@ 110, 010 RADIO oRad3 VAR nNivel ITEMS STR0116,STR0117 SIZE 40,10 PIXEL OF oPanel //"Sim / Não"
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Efetua a criacao dos botoes de usuario                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ValType( aUsButtons ) == "A"
			If !Empty( aUsButtons )
				For nLoop := 1 To Len( aUsButtons )
					TButton():New( 95 + nLoop * 15, 85,AllTrim(aUsButtons[nLoop,1]),;
					oPanel,aUsButtons[ nLoop, 2 ],40,12,,oDlg:oFont,.F.,.T.,.F.,,.F.,,,.F.)
				Next nLoop
			EndIf
		EndIf
	
		MaTrkChang( oGet1, nTpRastUp, oBmp1, oBmp2 )
		MaTrkChang( oGet2, nTpRastDown, oBmp3, oBmp4 )
	
	ACTIVATE MSDIALOG oDlg
EndIf

Return( .t. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkDisp ³ Autor ³ Sergio Silveira       ³ Data ³06/12/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Dispara o tracker para uma ou mais entidades               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkDisp( ExpO1, ExpA1, ExpN1, ExpN2 )                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpA1 -> Array contendo os elementos a rastrear            ³±±
±±³          ³     Estrutura:                                             ³±±
±±³          ³        1 - C - Alias da tabela                             ³±±
±±³          ³        2 - C - Chave unica de relacionamento               ³±±
±±³          ³ ExpN1 -> Numero de niveis a subir                          ³±±
±±³          ³ ExpN2 -> Numero de niveis a descer                         ³±±
±±³          ³ ExpN3 -> Detalhamento Total                                ³±±
±±³          ³          1=Sim   /  2=Não  								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkDisp( oTree, aEnt, xLevelUp, xLevelDown, xNivel  )

LOCAL aRoot      := {}
LOCAL aRootTot   := {}
LOCAL aRootEnd   := {}
LOCAL aTreeNivel := {}

LOCAL bBlock     := { || .T. }

LOCAL cTreeID    := ""

LOCAL nLevel     := 0
LOCAL nLevelDown := 0
LOCAL nLoop      := 0
LOCAL nLoop2     := 0
LOCAL nScan      := 0	 

PRIVATE _aFatLoc := {}
PRIVATE _aRemLoc := {}

PRIVATE lAtuSGJ	 := SuperGetMV("MV_PVCOMOP",.F.,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Percorre as entidades a serem rastreadas                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

For nLoop := 1 to Len( aEnt )
	aRoot := {}
	MaRetRoot( aEnt[nLoop,1], aEnt[nLoop,2 ], @aRoot, xLevelUp, 0, , nLoop )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Localiza os eventos de maior nivel ( eventos de inicio ) por arvore         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	aTreeNivel := {}

	For nLoop2 := 1 to Len( aRoot )
		If Empty( nScan := AScan( aTreeNivel, { |x| x[1] == aRoot[nLoop2,4] } ) )
			AAdd( aTreeNivel, { aRoot[nLoop2,4], aRoot[nLoop2, 3], nLoop2 } )
		Else
			If aRoot[ nLoop2, 3 ] > aTreeNivel[ nScan, 2 ]
				aTreeNivel[ nScan, 2 ] := aRoot[ nLoop2, 3 ]
				aTreeNivel[ nScan, 3 ] := nLoop2
			EndIf
		EndIf
	Next nLoop2

	For nLoop2 := 1 To Len( aTreeNivel )
		aRootEnd := AClone( aRoot[ aTreeNivel[nLoop2,3] ] )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Elimina os eventos duplicados                                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Empty( AScan( aRootTot, { |x| x[1] == aRootEnd[1] .And. x[2] == aRootEnd[2] } ) )
			AAdd( aRootEnd, Len( aRoot ) )
			AAdd( aRootTot, AClone( aRootEnd ) )
		EndIf

	Next nLoop2

Next nLoop

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Limpa o Tree                                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oTree:BeginUpdate()
oTree:Reset()
oTree:EndUpdate()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Obtem os eventos de inicio para as arvores de cabecalho                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If xNivel == 1
	aRootHead := MaConvRoot( aRootTot )
	AEval( aRootHead, { |x| AAdd( aRootTot, { x[1], x[2], x[3], .F. } ) } )
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ordena os eventos de inicio                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSort( aRootTot,,, { |x,y| y[1] + y[2] > x[1] + x[2] } )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Dispara os trackers dos eventos de inicio, passando o tree como referencia  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oTree:BeginUpdate()

For nLoop := 1 To Len( aRootTot )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona na raiz do tree                                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oTree:TreeSeek( "" )
	oTree:CurrentNodeId := ""

	nLevel := 0

	nLevelDown := Nil

	If ValType( xLevelDown ) == "N"
		nLevelDown := xLevelDown + aRootTot[ nLoop, 3 ]
	EndIf

	lItem := .T.

	If Len( aRootTot[ nLoop ] ) > 3
		lItem := .F.
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa o identificador da arvore                                        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cTreeID := StrZero( nLoop, 6 )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Dispara a funcao de tracker adequada                                        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	bBlock := &( "{ || MATRK" + aRootTot[ nLoop, 1 ] + "( aRootTot[ nLoop,2 ], @oTree, ,@nLevel, nLevelDown, lItem, cTreeID, nLoop ) } " )
	Eval( bBlock )

Next nLoop

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona na entidade de referencia                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oTree:TreeSeek( aEnt[1,1] + "-" + aEnt[1,2] )

oTree:EndUpdate()

oTree:Refresh()

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkChang³ Autor ³ Sergio Silveira       ³ Data ³06/12/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao a ser executada quando da mudanca de tipo de busca  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkChang( ExpO1, ExpN1, ExpO2, ExpO3 )                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpO1 -> Objeto Get                                        ³±±
±±³          ³ ExpN1 -> Tipo de rastro - 1 - Ilimitado / 2 - Limitado     ³±±
±±³          ³ ExpO2 -> Objeto seta para cima                             ³±±
±±³          ³ ExpO3 -> Objeto seta para baixo                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function MaTrkChang( oGet, nTipoRast, oBmp1, oBmp2 )

If nTipoRast == 1
	oGet:Disable()
	oBmp1:Disable()
	oBmp2:Disable()
Else
	oGet:Enable()
	oBmp1:Enable()
	oBmp2:Enable()
EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaEntImage³ Autor ³ Sergio Silveira       ³ Data ³13/12/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Devolve a imagem padrao para cada entidade / Tipo          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ExpC1 := MaEntImage( ExpC2, ExpN1 )                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpC1 -> Nome da imagem                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Alias                                             ³±±
±±³          ³ ExpN1 -> Tipo de imagem                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaEntImage( cAlias, nTipo )

Local aImages := {}
Local aNames  := {}

Local cImage  := ""

AAdd( aImages, { "SC0", { "PMSEDT3" } } )
AAdd( aImages, { "SC1", { "FOLDER11"} } )
AAdd( aImages, { "SC2", { "PMSEDT3" } } )
AAdd( aImages, { "SC3", { "FOLDER11"} } )
AAdd( aImages, { "SC5", { "PMSEDT3" } } )
AAdd( aImages, { "SC6", { "PMSEDT3" } } )
AAdd( aImages, { "SC7", { "FOLDER5" } } )
AAdd( aImages, { "SC8", { "FOLDER7" } } )
AAdd( aImages, { "SC9", { "PMSEDT3" } } )
AAdd( aImages, { "SCR", { "FOLDER10"} } )
AAdd( aImages, { "SCN", { "PMSEDT1" } } )
AAdd( aImages, { "SE1", { "PMSEDT2" } } )
AAdd( aImages, { "SE2", { "PMSEDT2" } } )
AAdd( aImages, { "SCJ", { "PMSEDT1" } } )
AAdd( aImages, { "SCK", { "PMSEDT1" } } )
AAdd( aImages, { "SUC", { "PMSEDT1" } } )
AAdd( aImages, { "SUA", { "PMSEDT1" } } )
AAdd( aImages, { "SUB", { "PMSEDT1" } } )
AAdd( aImages, { "SF1", { "PMSEDT4" } } )
AAdd( aImages, { "SF2", { "PMSEDT4" } } )
AAdd( aImages, { "SD1", { "PMSEDT4" } } )
AAdd( aImages, { "SD2", { "PMSEDT4" } } )
AAdd( aImages, { "SD3", { "PMSEDT4" } } )
AAdd( aImages, { "AB2", { "FOLDER5"  } } )
AAdd( aImages, { "AB1", { "FOLDER5"  } } )
AAdd( aImages, { "ABI", { "FOLDER7"  } } )
AAdd( aImages, { "AB9", { "FOLDER10" } } )
AAdd( aImages, { "AAN", { "FOLDER10" } } )
AAdd( aImages, { "AAO", { "FOLDER10" } } )
AAdd( aImages, { "ABF", { "FOLDER10" } } )
AAdd( aImages, { "ABB", { "FOLDER10" } } )
AAdd( aImages, { "AB7", { "FOLDER10" } } )
AAdd( aImages, { "ABL", { "FOLDER12" } } )
AAdd( aImages, { "ABK", { "FOLDER12" } } )
AAdd( aImages, { "AB4", { "FOLDER14" } } )
AAdd( aImages, { "ADB", { "FOLDER10" } } )
AAdd( aImages, { "AD1", { "FOLDER10" } } )
AAdd( aImages, { "SA1", { "PMSEDT3" } } )
AAdd( aImages, { "SUS", { "PMSEDT2" } } )
AAdd( aImages, { "ACH", { "PMSEDT1" } } )
AAdd( aImages, { "DAI", { "FOLDER10" } } )
AAdd( aImages, { "CN9", { "FOLDER5" } } )
AAdd( aImages, { "CNA", { "FOLDER12" } } )
AAdd( aImages, { "CND", { "FOLDER14" } } )
AAdd( aImages, { "CNB", { "FOLDER12" } } )
AAdd( aImages, { "CNE", { "FOLDER14" } } )
AAdd( aImages, { "ADY", { "FOLDER10"  } } )
AAdd( aImages, { "AAH", { "FOLDER10"  } } )
AAdd( aImages, { "AAM", { "FOLDER10"  } } )
AAdd( aImages, { "AAA", { "PMSEDT1" } } )
AAdd( aImages, { "CO1", { "FOLDER15" } } )
AAdd( aImages, { "CPH", { "FOLDER13" } } )
AAdd( aImages, { "COM", { "AGENDA" } } )
AAdd( aImages, { "CX1", { "SSFONTES" } } )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Identificadores utilizados  na integracao com o Controle de Nao-Conformidades ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
// Inicio
AAdd( aImages, { "QI2",   { "UPDWARNING" } } )
AAdd( aImages, { "FNC00", { "BMPUSER" } } )
AAdd( aImages, { "FNC01", { "BMPCONS" } } )
AAdd( aImages, { "FNC02", { "BMPPARAM" } } )
AAdd( aImages, { "FNC03", { "BMPTABLE" } } )
AAdd( aImages, { "FNC04", { "BMPCALEN" } } )
AAdd( aImages, { "FNC05", { "BMPCPO" } } )
AAdd( aImages, { "FNC06", { "NEXT" } } )
AAdd( aImages, { "FNC07", { "FOLDER9" } } )
AAdd( aImages, { "FNC08", { "COLINC" } } )
AAdd( aImages, { "FNC09", { "BUDGET" } } )
AAdd( aImages, { "FNC10", { "BMPGROUP" } } )
AAdd( aImages, { "FNC11", { "BTPESQ" } } )
// Fim

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada para a modificacao do array                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock( "MAENTIMG" )
	aImages := ExecBlock( "MAENTIMG", .F., .F., { aImages } )
EndIf

If !Empty( nScan := AScan( aImages, { |x| x[1] == cAlias } ) )

	aNames := aImages[ nScan, 2 ]
	If Len( aNames ) >= nTipo
		cImage := aNames[ nTipo ]
	EndIf

EndIf

Return( cImage )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSCN ³ Autor ³ Paulo Augusto         ³ Data ³04/04/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas do Remito                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSCN( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSCN( cChaveNF, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cQuery    	:= ""
LOCAL cAliasQry 	:= ""
LOCAL cDoc      	:= ""
LOCAL cItemPed    	:= ""
LOCAL cCliente  	:= ""
LOCAL cLoja     	:= ""
LOCAL cRemito   	:= ""
LOCAL cItemRem  	:= ""
LOCAL cSerie		:= ""
LOCAL cNumNota  	:= ""
LOCAL cSerieRem		:= ""
LOCAL cChaveRem		:= ""
LOCAL cImageSCN 	:= ""
DEFAULT nMaxLevel 	:= 1000000
DEFAULT lItem     	:= .T.
DEFAULT cTreeID   := "000001"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Separa os componentes da query                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cDoc     	:= Left  ( cChaveNF,  Len( SCN->CN_PEDIDO ) )
cItemPed	:= SubStr( cChaveNF,  Len( cDoc ) + 1, Len( SCN->CN_ITEMPED ) )
cCliente	:= SubStr( cChaveNF,  Len( cDoc ) + Len( cItemPed ) + 1, Len( SCN->CN_CLIENTE ) )
cLoja    	:= SubStr( cChaveNF,  Len( cDoc ) + Len( cItemPed ) + Len( cCliente ) + 1, Len( SCN->CN_LOJA ) )
cRemito	 	:= SubStr( cChaveNF,  Len( cDoc ) + Len( cItemPed ) + Len( cCliente ) + Len( cLoja )+1,Len(SCN->CN_REMITO) )
cItemRem 	:= SubStr( cChaveNF,  Len( cDoc ) + Len( cItemPed ) + Len( cCliente ) + Len( cLoja )+ Len(cRemito)+1,Len(SCN->CN_ITEM) )
cSerie   	:= SubStr( cChaveNF,  Len( cDoc ) + Len( cItemPed ) + Len( cCliente ) + Len( cLoja )+ Len(cRemito)+ Len(cItemRem)+1,Len(SCN->CN_SERIENF) )
cNumNota 	:= SubStr( cChaveNF,  Len( cDoc ) + Len( cItemPed ) + Len( cCliente ) + Len( cLoja )+ Len(cRemito)+ Len(cItemRem)+Len(cSerie)+1,Len(SCN->CN_NFISCAL) )
cSerieRem	:= SubStr( cChaveNF,  Len( cDoc ) + Len( cItemPed ) + Len( cCliente ) + Len( cLoja )+ Len(cRemito)+ Len(cItemRem)+Len(cSerie)+Len(cNumNota)+1,Len(SCN->CN_SERIE) )
cChaveRem	:= SubStr( cChaveNF,1,Len( cDoc ) + Len( cItemPed ) + Len( cCliente ) + Len( cLoja )+ Len(cRemito)+ Len(cItemRem))
If nLevel <= nMaxLevel

	cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

	cImageSCN := MaEntImage( "SCN", 1 )

	IF !(oTree:TreeSeek( Pad( "SCN-" + cChaveRem, 50 ) + cTreeID )  )
		oTree:AddItem( Pad( Rtrim( RetTitle("CN_REMITO") )+ " / " + Rtrim( RetTitle("CN_SERIE") )+ " / " + Rtrim( RetTitle("CN_ITEM") ) + " - " +Transform( cRemito , PesqPict("SCN","CN_REMITO")) +" / "+Transform( cSerieRem , PesqPict("SCN","CN_SERIE"))+ " / "+ Transform(cItemRem,PesqPict("SCN","CN_ITEM"))+;
		cAddString, 100 ), Pad( "SCN-" + cChaveRem, 50 ) + cTreeID, cImageSCN, cImageSCN,,,nLevel)
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Alimenta os itens deste Remito     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	cAliasQry := GetNextAlias()

	cQuery := ""

	cQuery += "SELECT  D2_DOC, D2_SERIE ,D2_CLIENTE ,D2_LOJA ,D2_COD ,D2_ITEM,D2_REMITO,D2_ITEMREM "
	cQuery += "FROM " + RetSqlName( "SD2" ) + " "
	cQuery += "WHERE "
	cQuery += "D2_FILIAL='"		+ xFilial( "SD2" ) 	+ "' AND "
	cQuery += "D2_DOC='" 		+ cNumNota          + "' AND "
	cQuery += "D2_SERIE='" 		+ cSerie      		+ "' AND "
	cQuery += "D2_CLIENTE='"	+ cCliente      	+ "' AND "
	cQuery += "D2_LOJA='" 		+ cLoja       		+ "' AND "
	cQuery += "D2_REMITO='"		+ cRemito       	+ "' AND "
	cQuery += "D2_ITEMREM='"	+ cItemRem       	+ "' AND "
	cQuery += "D_E_L_E_T_=' ' "
	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )
	While !( cAliasQry )->( Eof() )
		oTree:TreeSeek( Pad( "SCN-" + cChaveRem, 50 )+cTreeID )
		MATRKSD2(( cAliasQry )->D2_DOC + ( cAliasQry )->D2_SERIE + ( cAliasQry )->D2_CLIENTE + ( cAliasQry )->D2_LOJA + ( cAliasQry )->D2_COD + ( cAliasQry )->D2_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
		( cAliasQry )->( dbSkip() )
	End
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Exclui a area de trabalho da query      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea( cAliasQry )
	dbCloseArea()
	dbSelectArea( "SD2" )
EndIf
Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSC8 ³ Autor ³ Aline Correa do Vale  ³ Data ³03/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de Cotacoes                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSC8( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO2 -> Objeto Tree                                       ³±±
±±³          ³ ExpC3 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN4 -> Nivel                                             ³±±
±±³          ³ ExpN5 -> Nivel maximo                                      ³±±
±±³          ³ ExpL6 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±³          ³ ExpC7 -> Numero do pedido de venda                         ³±±
±±³          ³ ExpA8 -> Array utilizado pelos remitos                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSC8( cChaveCot, oTree, cAddString, nLevel, nMaxLevel, lItem,cTreeID)

Local cTrkSeek	:= ""
Local lFilEnt	:= TRKFILENT()
LOCAL cQuery    := ""
LOCAL cAliasQry := ""
DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

SC8->( DbSetOrder( 3 ) )
If lFilEnt
	cTrkSeek:= cChaveCot
Else
	cTrkSeek:=  xFilial( "SC8" ) + cChaveCot
EndIf

If SC8->( DbSeek (cTrkSeek) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		cImageSC8 := MaEntImage( "SC8", 1 )
		If lFilEnt
			oTree:AddItem( Pad( STR0052 + Transform( SC8->C8_NUM + SC8->C8_ITEM, "@R "+REPLICATE("X",TAMSX3("C8_NUM")[1])+"/"+REPLICATE("X",TAMSX3("C8_ITEM")[1])) + ;   //"Cotacao - "
			cAddString, 100 ), Pad( "SC8-" + SC8->C8_FILIAL + SC8->C8_NUM + SC8->C8_FORNECE + SC8->C8_LOJA + SC8->C8_ITEM, 50 )+cTreeID,cImageSC8,cImageSC8,,,nLevel)
			oTree:TreeSeek( Pad( "SC8-" + SC8->C8_FILIAL + SC8->C8_NUM + SC8->C8_FORNECE + SC8->C8_LOJA + SC8->C8_ITEM, 50 )+cTreeID )
		Else
			oTree:AddItem( Pad( STR0052 + Transform( SC8->C8_NUM + SC8->C8_ITEM,  "@R "+REPLICATE("X",TAMSX3("C8_NUM")[1])+"/"+REPLICATE("X",TAMSX3("C8_ITEM")[1])) + ;   //"Cotacao - "
			cAddString, 100 ), Pad( "SC8-" + SC8->C8_NUM + SC8->C8_FORNECE + SC8->C8_LOJA + SC8->C8_ITEM, 50 )+cTreeID,cImageSC8,cImageSC8,,,nLevel)
			oTree:TreeSeek( Pad( "SC8-" + SC8->C8_NUM + SC8->C8_FORNECE + SC8->C8_LOJA + SC8->C8_ITEM, 50 )+cTreeID )
	  	EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Alimenta os itens deste pedido                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		cAliasQry := GetNextAlias()

		cQuery := ""
		If SC8->C8_TPDOC == '1' .Or. Empty(SC8->C8_TPDOC)
			If lFilEnt
				cQuery += "SELECT C7_FILENT,C7_FILIAL, C7_NUM, C7_ITEM "
				cQuery += "FROM " + RetSqlName( "SC7" ) + " "
				cQuery += "WHERE "
				If ( FWModeAccess("SC7")=="E" .And. FWModeAccess("SC8")=="C" ).Or.( FWModeAccess("SC7")=="C" .And. FWModeAccess("SC8")=="E" )
					cQuery += "C7_NUMCOT='" + SC8->C8_NUM + "' AND "
				Else
					cQuery += "C7_FILIAL='" + SC8->C8_FILIAL + "' AND "
				EndIf
			Else
				cQuery += "SELECT C7_NUM, C7_ITEM "
				cQuery += "FROM " + RetSqlName( "SC7" ) + " "
				cQuery += "WHERE "
				cQuery += "C7_FILIAL='" + xFilial( "SC7" ) + "' AND "
			EndIf
				cQuery += "C7_NUM='"    + SC8->C8_NUMPED   + "' AND "
				cQuery += "C7_ITEM='"   + SC8->C8_ITEMPED  + "' AND "
				cQuery += "D_E_L_E_T_=' ' "
				cQuery += "ORDER BY C7_NUM, C7_ITEM"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			If lFilEnt
				oTree:TreeSeek( Pad( "SC8-" + SC8->C8_FILIAL + SC8->C8_NUM + SC8->C8_FORNECE + SC8->C8_LOJA + SC8->C8_ITEM, 50 )+cTreeID )
			Else
				oTree:TreeSeek( Pad( "SC8-" + SC8->C8_NUM + SC8->C8_FORNECE + SC8->C8_LOJA + SC8->C8_ITEM, 50 )+cTreeID )
			EndIf

			If !( cAliasQry )->( Eof() )
				If lFilEnt
					MATRKSC7( ( cAliasQry )->C7_FILENT + ( cAliasQry )->C7_NUM + ( cAliasQry )->C7_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1)
				Else
					MATRKSC7( ( cAliasQry )->C7_NUM + ( cAliasQry )->C7_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1)
				EndIf
				( cAliasQry )->( dbSkip() )
			EndIf
		Else
			//--Tratamento para contratos
			cQuery += "SELECT CN9_NUMERO,CN9_REVISA, CN9_FILCTR  "
			cQuery += "FROM " + RetSqlName( "CN9" ) + " "
			cQuery += "WHERE "
			
			If (FWModeAccess("SC1",3) == FWModeAccess("CN9",3)) .And. !(FwIsInCallStack('CNTA300'))
				cQuery += "CN9_FILIAL='" + SC1->C1_FILIAL + "' AND "
			Else
				cQuery += "CN9_FILIAL='" + xFilial( "CN9" ) + "' AND "
			EndIf

			cQuery += "CN9_NUMERO='"    + SC8->C8_NUMCON   + "' AND "
			cQuery += "D_E_L_E_T_=' ' "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			//If lFilEnt
				//oTree:TreeSeek( Pad( "SC8-" + SC8->C8_FILIAL + SC8->C8_NUM + SC8->C8_FORNECE + SC8->C8_LOJA + SC8->C8_ITEM, 50 )+cTreeID )
			//Else
				oTree:TreeSeek( Pad( "SC8-" + SC8->C8_NUM + SC8->C8_FORNECE + SC8->C8_LOJA + SC8->C8_ITEM, 50 )+cTreeID )
			//EndIf

			If !( cAliasQry )->( Eof() )
				//If lFilEnt
					//MATRKSC7( ( cAliasQry )->C7_FILENT + ( cAliasQry )->C7_NUM + ( cAliasQry )->C7_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1)
				//Else
					//MATRKSC7( ( cAliasQry )->C7_NUM + ( cAliasQry )->C7_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1)
				//EndIf
				MATRKCN9( ( cAliasQry )->CN9_NUMERO + ( cAliasQry )->CN9_REVISA, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1, ( cAliasQry )->CN9_FILCTR)
				( cAliasQry )->( dbSkip() )
			EndIf

		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclui a area de trabalho da query                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea( cAliasQry )
		dbCloseArea()

		dbSelectArea( "SC8" )

	EndIf

EndIf

Return( .T. )
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSC9 ³ Autor ³ Paulo Augusto         ³ Data ³12/04/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas da Liberacao de Pedido                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSC9( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO2 -> Objeto Tree                                       ³±±
±±³          ³ ExpC3 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN4 -> Nivel                                             ³±±
±±³          ³ ExpN5 -> Nivel maximo                                      ³±±
±±³          ³ ExpL6 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±³          ³ ExpC7 -> Numero do pedido de venda                         ³±±
±±³          ³ ExpA8 -> Array utilizado pelos remitos                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSC9( cChaveNF, oTree, cAddString, nLevel, nMaxLevel, lRemito,cNumPed,aTree, cTreeID)

LOCAL cPedido   	:= ""
LOCAL cItemPed  	:= ""
LOCAL cSeqLib		:= ""
LOCAL cRemito	  	:= ""
LOCAL cItemRem		:= ""
LOCAL cSeekNFS		:= ""  	//Chave de pesquisa da Nota Fiscal
LOCAL nRecAnt     	:= 0
LOCAL cSerieRem   	:= ""
LOCAL cCliente    	:= ""
LOCAL cLoja       	:= ""
LOCAL cProduto    	:= ""
Local cChave      	:= ""
Local cNrSerItRem 	:= ""
Local cAlQrySD2  	:= ""
Local oTempTable	:= Nil
Local cNumSeq 		:= ""

DEFAULT cTreeID   := "000001"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Separa os componentes da query                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cPedido     := Left  ( cChaveNF,  Len( SC9->C9_PEDIDO ) )
cItemPed	:= SubStr( cChaveNF,  Len( cPedido ) + 1, Len( SC9->C9_ITEM ) )
cSeqLib		:= SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + 1, Len( SC9->C9_SEQUEN ) )
If cPaisLoc<>"BRA"
	cRemito  :=SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + Len( cSeqLib ) + 1, Len( SC9->C9_REMITO ) )
	cSerieRem:=SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + Len( cSeqLib ) + Len( cRemito )+1,Len( SC9->C9_SERIREM ) )
	cCliente :=SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + Len( cSeqLib ) + Len( cRemito )+ Len( SC9->C9_SERIREM )+1, Len( SC9->C9_CLIENTE ) )
	cLoja    :=SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + Len( cSeqLib ) + Len( cRemito )+ Len( SC9->C9_SERIREM )+ Len( SC9->C9_CLIENTE )+1, Len( SC9->C9_LOJA ) )
	cProduto :=SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + Len( cSeqLib ) + Len( cRemito )+ Len( SC9->C9_SERIREM )+ Len( SC9->C9_CLIENTE )+ Len( SC9->C9_LOJA )+1,Len( SC9->C9_PRODUTO ) )
	cItemRem	:=SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + Len( cSeqLib ) + Len( cRemito )+ Len( SC9->C9_SERIREM )+ Len( SC9->C9_CLIENTE )+ Len( SC9->C9_LOJA )+Len( SC9->C9_PRODUTO )+1,Len(SC9->C9_ITEMREM) )
	cSeekNFS	:=SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + Len( cSeqLib ) + Len( cRemito )+ Len( SC9->C9_SERIREM )+ Len( SC9->C9_CLIENTE )+ Len( SC9->C9_LOJA )+Len( SC9->C9_PRODUTO )+Len(SC9->C9_ITEMREM)+1 ,Len(SC9->C9_NFISCAL))
	cNumSeq		:=SubStr( cChaveNF,  Len( cPedido ) + Len( cItemPed ) + Len( cSeqLib ) + Len( cRemito )+ Len( SC9->C9_SERIREM )+ Len( SC9->C9_CLIENTE )+ Len( SC9->C9_LOJA )+Len( SC9->C9_PRODUTO )+Len(SC9->C9_ITEMREM)+Len(SC9->C9_NFISCAL)+1 ,Len(SC9->C9_NUMSEQ))

EndIf

cNrSerItRem :=cRemito+cSerieRem+cItemRem

If nLevel <= nMaxLevel .And. ValType( aTree ) == "A"
	AAdd(aTree,{cpedido,cItemPed,cSeqLib})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Alimenta os Remitos deste pedido / item - Localizacoes  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cPaisLoc <>"BRA"
	If nLevel <= nMaxLevel
		If !Empty(cNrSerItRem)
			aStruTRB := {}
			AADD(aStruTRB,{"D2_FILIAL" ,"C",TamSX3("D2_FILIAL")[1] ,TamSX3("D2_FILIAL")[2]})
			AADD(aStruTRB,{"D2_DOC"    ,"C",TamSX3("D2_DOC")[1]    ,TamSX3("D2_DOC")[2]})
			AADD(aStruTRB,{"D2_ITEM"   ,"C",TamSX3("D2_ITEM")[1]   ,TamSX3("D2_ITEM")[2]})
			AADD(aStruTRB,{"D2_SERIE"  ,"C",TamSX3("D2_SERIE")[1]  ,TamSX3("D2_SERIE")[2]})
			AADD(aStruTRB,{"D2_CLIENTE","C",TamSX3("D2_CLIENTE")[1],TamSX3("D2_CLIENTE")[2]})
			AADD(aStruTRB,{"D2_LOJA"   ,"C",TamSX3("D2_LOJA")[1]   ,TamSX3("D2_LOJA")[2]})
			AADD(aStruTRB,{"D2_COD"    ,"C",TamSX3("D2_COD")[1]    ,TamSX3("D2_COD")[2]})
			AADD(aStruTRB,{"D2_REMITO" ,"C",TamSX3("D2_REMITO")[1] ,TamSX3("D2_REMITO")[2]})
			AADD(aStruTRB,{"D2_ITEMREM","C",TamSX3("D2_ITEMREM")[1],TamSX3("D2_ITEMREM")[2]})
			AADD(aStruTRB,{"D2_SERIREM","C",TamSX3("D2_SERIREM")[1],TamSX3("D2_SERIREM")[2]})
			AADD(aStruTRB,{"D2_PEDIDO" ,"C",TamSX3("D2_PEDIDO")[1] ,TamSX3("D2_PEDIDO")[2]})
			AADD(aStruTRB,{"D2_ITEMPV" ,"C",TamSX3("D2_ITEMPV")[1] ,TamSX3("D2_ITEMPV")[2]})
			AADD(aStruTRB,{"D2_TIPODOC","C",TamSX3("D2_TIPODOC")[1],TamSX3("D2_TIPODOC")[2]})


			//-------------------------------------------------------------------
			// Criação do objeto
			//-------------------------------------------------------------------
			oTempTable	:= FWTemporaryTable():New( "TRB" )

			//-------------------------------------------------------------------
			// Atribui campos e índices.
			//-------------------------------------------------------------------
			oTempTable:SetFields( aStruTRB )
			oTempTable:AddIndex("1",{"D2_FILIAL","D2_DOC","D2_SERIE","D2_ITEM"})
			oTempTable:AddIndex("2",{"D2_FILIAL","D2_LOJA","D2_REMITO","D2_ITEMREM","D2_SERIREM"})

			//------------------
			//Criação da tabela
			//------------------
			oTempTable:Create()

			//VERIFICA SE EXISTE REMITO PARA O PEDIDO  E NF PARA O REMITO
			cAlQrySD2 := "MTRKSC6SD2"
			cQuery := ""
			cQuery += "SELECT D2_FILIAL, D2_DOC, D2_ITEM, D2_SERIE, D2_CLIENTE, D2_LOJA,  D2_COD, D2_REMITO, D2_ITEMREM, D2_SERIREM, D2_PEDIDO, D2_ITEMPV, D2_TIPODOC "
			cQuery += "FROM " + RetSqlName( "SD2" ) + " "
			cQuery += "WHERE "
			cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
			cQuery += "D2_PEDIDO='" + cPedido          + "' AND "
			cQuery += "D2_ITEMPV='" + cItemPed         + "' AND "
			cQuery += "D2_DOC='" + cRemito   + "' AND "
			cQuery += "D2_SERIE='" + cSerieRem   + "' AND "
			cQuery += "D2_ITEM='" + cItemRem   + "' AND "
			cQuery += "D2_TIPODOC>='" + "50"   + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += " UNION ALL "
			cQuery += "SELECT D2_FILIAL, D2_DOC, D2_ITEM, D2_SERIE, D2_CLIENTE, D2_LOJA,  D2_COD, D2_REMITO, D2_ITEMREM, D2_SERIREM, D2_PEDIDO, D2_ITEMPV, D2_TIPODOC "
			cQuery += "FROM " + RetSqlName( "SD2" ) + " "
			cQuery += "WHERE "
			cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
			cQuery += "D2_REMITO='" + cRemito   + "' AND "
			cQuery += "D2_SERIREM='" + cSerieRem   + "' AND "
			cQuery += "D2_ITEMREM='" + cItemRem   + "' AND "
			cQuery += "D2_TIPODOC<'" + "50"   + "' AND "
			cQuery += "D_E_L_E_T_=' ' "

			cQuery += " ORDER BY D2_FILIAL,D2_DOC,D2_SERIE,D2_ITEM"

			Processa({|lEnd| SqlToTrb(cQuery, aStruTRB, 'TRB' )},,STR0049)

			TRB->( DbSetOrder( 2 ) )
			TRB->( DbGoTop())
			While ! TRB->( Eof() )

				If TRB->D2_SERIE<>cSerieRem
					TRB->( dbSkip() )
					Loop
				EndIf

				oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )
				cImageSD2 := MaEntImage( "SD2", 1 )
				MATRKSD2( TRB->D2_DOC + TRB->D2_SERIE + TRB->D2_CLIENTE +TRB->D2_LOJA + TRB->D2_COD +;
				TRB->D2_ITEM,@oTree, , @nLevel, nMaxLevel,,cTreeID )
				cChave:=TRB->D2_DOC + TRB->D2_SERIE + TRB->D2_CLIENTE +TRB->D2_LOJA + TRB->D2_COD +TRB->D2_ITEM
				nRecAnt := TRB->( Recno() ) //GUARDA POSICIONAMENTO NO TRB

				//VERIFICA NO TRB SE EXISTE NF PARA O REMITO
				TRB->( DbSetOrder( 1 ) )     //  FILIAL+LOJA+REMITO+ITEMREMITO+SERIEREMITO
				TRB->( DbGoTop())
				cSeekNFS := xFilial( "TRB" ) + TRB->D2_LOJA + TRB->D2_DOC + TRB->D2_ITEM + TRB->D2_SERIE

				If TRB->(dbSeek( cSeekNFS ))

					nLevel++

					While !TRB->( Eof() ) .And. cSeekNFS == xFilial("TRB")+TRB->D2_LOJA+TRB->D2_REMITO+;
						TRB->D2_ITEMREM+TRB->D2_SERIREM

						If TRB->D2_TIPODOC >="50"
							TRB->( dbSkip() )
							Loop
						EndIf

						oTree:TreeSeek( Pad( "SD2-" + cChave, 50 )+cTreeID )
						cImageSD2 := MaEntImage( "SD2", 1 )

						MATRKSD2( TRB->D2_DOC + TRB->D2_SERIE + TRB->D2_CLIENTE +TRB->D2_LOJA +TRB->D2_COD +;
						TRB->D2_ITEM,@oTree, , @nLevel, nMaxLevel,,cTreeID )

						TRB->( DbSetOrder( 2 ) )
						TRB->( dbSkip() )

					End

					nLevel--
				EndIf

				//Reposiciona o TRB
				TRB->( DbSetOrder( 1 ) )
				TRB->( MsGoto( nRecAnt ) )
				TRB->( dbSkip() )
			End

			//------------------------------
			//Deleta da tabela temporaria
			//-------------------------------
			oTempTable:Delete()

		EndIf

			// VERIFICA SE EXISTE NFISCAL SEM REMITO PARA O PEDIDO NO SD2
			dbSelectArea( "SD2" )
			cAlQrySD2 := "MTRKSC6SD2"
			cQuery := ""
			cQuery += "SELECT D2_DOC, D2_SERIE, D2_CLIENTE, D2_LOJA, D2_ITEM, D2_COD "
			cQuery += "FROM " + RetSqlName( "SD2" ) + " "
			cQuery += "WHERE "
			cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
			cQuery += "D2_PEDIDO='" + cPedido          + "' AND "
			cQuery += "D2_ITEMPV='" + cItemPed         + "' AND "
			cQuery += "D2_REMITO='" + Space(Len(cRemito))   + "' AND "
			cQuery += "D2_DOC='" + cSeekNFS	 +"' AND "
			cQuery += "D2_NUMSEQ='" + cNumSeq	 +"' AND "
			cQuery += "D2_TIPODOC<'" + "50"   + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY D2_DOC, D2_SERIE, D2_ITEM"
			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAlQrySD2, .F., .T. )

			nLevel--

			While !( cAlQrySD2 )->( Eof() )
				oTree:TreeSeek( Pad( "SC6-" + cNumPed, 50 )+cTreeID )
				cImageSD2 := MaEntImage( "SD2", 1 )
				MATRKSD2( ( cAlQrySD2 )->D2_DOC + ( cAlQrySD2 )->D2_SERIE + ( cAlQrySD2 )->D2_CLIENTE +;
				( cAlQrySD2 )->D2_LOJA + ( cAlQrySD2 )->D2_COD +;
				( cAlQrySD2 )->D2_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
				( cAlQrySD2 )->( dbSkip() )
			End

			nLevel++
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAlQrySD2 )
			dbCloseArea()
			dbSelectArea( "SD2" )
	EndIf
EndIf
Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKABC ³ Autor ³ Eduardo Riera         ³ Data ³11/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas das despesas financeiras                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKABC( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKABC( cKeyDesp, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cImageABC := ""
LOCAL cImageSE2 := ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
nLevel++
If nLevel <= nMaxLevel

	ABC->( DbSetOrder( 1 ) )
	If ABC->( DbSeek( xFilial( "ABC" ) + cKeyDesp ) )

		cImageABC := MaEntImage( "ABC", 1 )

		oTree:AddItem( Pad( STR0040+ABC->ABC_ITEM+")", 100 ), Pad( "ABC-" + cKeyDesp, 50 )+cTreeID,cImageABC,cImageABC,,,2) //"Despesa Finaceira ("

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Cria os orcamentos criados pelos laudos                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty( ABC->ABC_NUMERO )
			nLevel++
			If nLevel <= nMaxLevel
				cImageABC := MaEntImage( "SE2", 1 )
				oTree:TreeSeek( Pad( "ABC-" + cKeyDesp, 50 )+cTreeID )
				SE2->( DbSetOrder( 1 ) )
				If SE2->( DbSeek( xFilial( "SE2" ) + ABC->ABC_PREFIX + ABC->ABC_NUMERO + ABC->ABC_PARCEL + ABC->ABC_TIPO + ABC->ABC_CODFOR + ABC->ABC_LOJFOR ) )
					oTree:AddItem( Pad( STR0041+RetTitle("ABC_NUMERO")+": "+ABC->ABC_PREFIX + ABC->ABC_NUMERO + ABC->ABC_PARCEL + ABC->ABC_TIPO + RetTitle("ABC_CODFOR")+": " + ABC->ABC_CODFOR + ABC->ABC_LOJFOR, 100 ), Pad( "SE2-" + ABC->ABC_PREFIX + ABC->ABC_NUMERO + ABC->ABC_PARCEL + ABC->ABC_TIPO + ABC->ABC_CODFOR + ABC->ABC_LOJFOR, 50 )+cTreeID,cImageSE2,cImageSE2,,,2) //"Contas a Pagar - "
				EndIf
			EndIf
			nLevel--
		EndIf
	EndIf

EndIf

nLevel--

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSD1 ³ Autor ³ Aline Correa do Vale  ³ Data ³05/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de itens de NF de Entrada                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSD1( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSD1( cKeyNF, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cImageSD1 := ""
LOCAL cDoc      := ""
LOCAL cSerie    := ""
LOCAL cItem     := ""
LOCAL cPic      := ""
LOCAL cTrkSeek  := ""
LOCAL lFilEnt  := TRKFILENT()

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

nLevel++

If nLevel <= nMaxLevel

	SD1->( DbSetOrder( 1 ) )
	If lFilEnt
		cTrkSeek:= cKeyNF
	Else
		cTrkSeek:= xFilial( 'SD1' ) + cKeyNF
	EndIf

	If SD1->( DbSeek (cTrkSeek) )

		cPic      := "@R "

		cDoc      := Substr( cKeyNF,TamSX3("D1_FILIAL")[1]+1, Len( SD1->D1_DOC ) )
		cPic      += Replicate( "X", Len( cDoc ) ) + "/"
		cSerie    := SubStr( cKeyNF, Len( cDoc ) + TamSX3("D1_FILIAL")[1]+1, Len( SD1->D1_SERIE ) )
		cPic      += Replicate( "X", Len( cSerie ) )	 + "/"
		cItem     := Right( cKeyNF, Len( SD1->D1_ITEM ) )
		cPic      += Replicate( "X", Len( cItem ) )

		cImageSD1 := MaEntImage( "SD1", 1 )

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		If cPaisLoc <> "BRA"
			If ISRemito(1,"SD1->D1_TIPODOC")
				if lFilEnt
					cKeyNF:= SubStr(cKeyNF,len(xFilial("SD1"))+1,len(cKeyNF))
				EndIf
				MaTrkSCM(cKeyNF,oTree,cAddString,nLevel,nMaxLevel,.T.,cTreeID)
			Else
				If Empty(SD1->D1_REMITO)
					oTree:AddItem( Pad( STR0038 + Transform( cDoc + cSerie + ; //"Nota fiscal/Serie/Item - "
					cItem, cPic ) + cAddString, 100 ), Pad( "SD1-" + Subs(cKeyNF,len(xFilial('SD1'))+1,len(cKeynf)), 50 )+cTreeID,cImageSD1,cImageSD1,,,nLevel)
					If Ascan(_aFatLoc,cKeyNF)==0
						Aadd(_aFatLoc,cKeyNF)
					Endif
				Endif
			Endif
		Else
			oTree:AddItem( Pad( STR0038 + Transform( cDoc + cSerie + ; //"Nota fiscal/Serie/Item - "
			cItem, cPic ) + cAddString, 100 ), Pad( "SD1-" + cKeyNF, 50 )+cTreeID,cImageSD1,cImageSD1,,,nLevel)
		EndIf

	EndIf

EndIf

nLevel--

Return(.T.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSF1 ³ Autor ³ Aline Correa do Vale  ³ Data ³05/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas da nota fiscal de entrada ( cabecalho )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSF1( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSF1( cChaveNF, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

LOCAL cFornece  := ""
LOCAL cLoja     := ""
LOCAL cDoc      := ""
LOCAL cSerie    := ""
LOCAL cImageSE2 := ""
LOCAL cImageSF1 := ""
LOCAL cTrkSeek	:= ""
LOCAL lFilEnt	:= TRKFILENT()
LOCAL cQuery    := ""
LOCAL cAliasQry := ""
Local aSf2Cred	:= {} 
Local lTemNcp	:= .F.

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := (cPaisLoc=="BRA")
DEFAULT cTreeID   := "000001"

SF1->( DbSetOrder( 1 ) )
If lFilEnt
	cTrkSeek:= Left(cChaveNF,Len(SF1->(F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA)))
Else
	cTrkSeek:= xFilial( "SF1" ) + Left(cChaveNF,Len(SF1->(F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA)))
EndIf

If SF1->( DbSeek (cTrkSeek) )

	IF cPaisLoc == "ARG" // Tratamento para caso exista titulo gerado pela NCP tambem seja apresentado no tracker.
		aSf2Cred := GetAdvFVal("SF2", { "F2_DOC", "F2_ESPECIE" }, xFilial("SF2")+SF1->(F1_SERIE+F1_DOC), 6, { "", ""}) 
		IF !Empty(aSf2Cred[1]) .and.  ALLTRIM(aSf2Cred[2]) == "NCP" 
			lTemNcp := .T.
		EndIF
	EndIF
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Separa os componentes da query                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lFilEnt
		cDoc     := SubStr( cChaveNF,TamSx3("F1_FILIAL")[1]+1,Len( SF1->F1_DOC ) )
		cSerie   := SubStr( cChaveNF, Len( cDoc ) + TamSx3("F1_FILIAL")[1]+1, Len( SF1->F1_SERIE ) )
		cFornece := SubStr( cChaveNF, Len( cDoc ) + Len( cSerie ) + TamSx3("F1_FILIAL")[1]+1, Len( SF1->F1_FORNECE ) )
		cLoja    := SubStr( cChaveNF, Len( cDoc ) + Len( cSerie ) + Len( cFornece ) + TamSx3("F1_FILIAL")[1]+1, Len( SF1->F1_LOJA ) )
	Else
		cDoc     := Left( cChaveNF,  Len( SF1->F1_DOC ) )
		cSerie   := SubStr( cChaveNF, Len( cDoc ) + 1, Len( SF1->F1_SERIE ) )
		cFornece := SubStr( cChaveNF, Len( cDoc ) + Len( cSerie ) + 1, Len( SF1->F1_FORNECE ) )
		cLoja    := SubStr( cChaveNF, Len( cDoc ) + Len( cSerie ) + Len( cFornece ) + 1, Len( SF1->F1_LOJA ) )
	EndIf

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		cImageSF1 := MaEntImage( "SF1", 1 )

		If cPaisLoc <> "BRA"
			If ISRemito(1,"SF1->F1_TIPODOC")
				MaTrkSCM(cDoc+cSerie+cFornece+cLoja,oTree,cAddString,nLevel,nMaxLevel,.F.,cTreeID)
			Else
				If !oTree:TreeSeek(Pad("SF1-"+cChaveNF,50)+cTreeID)
					oTree:AddItem( Pad( STR0056 + cDoc + "/" + cSerie + ;   //"Nota fiscal de entrada / Serie - "
					cAddString, 100 ), Pad( "SF1-" + cChaveNF, 50 )+cTreeID, cImageSF1, cImageSF1,,,nLevel)
				Endif
			Endif
		Else
			oTree:AddItem( Pad( STR0056 + cDoc + "/" + cSerie + ;   //"Nota fiscal de entrada / Serie - "
			cAddString, 100 ), Pad( "SF1-" + cChaveNF , 50 )+cTreeID, cImageSF1, cImageSF1,,,nLevel)
		EndIf

		If lItem

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens deste pedido                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			If lFilEnt
				cQuery += "SELECT D1_FILIAL,D1_DOC,D1_SERIE,D1_ITEM,D1_FORNECE,D1_LOJA "
   			Else
				cQuery += "SELECT D1_DOC,D1_SERIE,D1_ITEM,D1_FORNECE,D1_LOJA "
                EndIf
				cQuery += "FROM " + RetSqlName( "SD1" ) + " "
				cQuery += "WHERE "
				cQuery += "D1_FILIAL='" + xFilial( "SD1" ) + "' AND "
				cQuery += "D1_DOC='"    + cDoc     + "' AND "
				cQuery += "D1_SERIE='"  + cSerie   + "' AND "
				cQuery += "D1_FORNECE='"+ cFornece + "' AND "
				cQuery += "D1_LOJA='"   + cLoja    + "' AND "
				cQuery += "D_E_L_E_T_=' '"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "SD1-" + cChaveNF , 50 )+cTreeID )

			cImageSD1 := MaEntImage( "SD1", 1 )

			While !( cAliasQry )->( Eof() )

				If cPaisLoc <> "BRA"  .AND. ISRemito(1,"SF1->F1_TIPODOC")
					//"Remito/Serie/Item - "
					oTree:AddItem( Pad( GetDescRem() + ( cAliasQry )->D1_DOC + "/" + ( cAliasQry )->D1_SERIE + "/" + ( cAliasQry )->D1_ITEM + ;
					cAddString, 100 ), Pad( "SD1-" + ( cAliasQry )->D1_DOC + ( cAliasQry )->D1_SERIE + ( cAliasQry )->D1_FORNECE + ;
					( cAliasQry )->D1_LOJA + ( cAliasQry )->D1_ITEM, 50 )+cTreeID,cImageSD1,cImageSD1,,,nLevel)
				Else
					//"N.F./Serie/Item - "
					If lFilEnt
						oTree:AddItem( Pad( STR0018 +( cAliasQry )->D1_DOC + "/" + ( cAliasQry )->D1_SERIE + "/" + ( cAliasQry )->D1_ITEM + ;
						cAddString, 100 ), Pad( "SD1-" + ( cAliasQry )->D1_FILIAL + ( cAliasQry )->D1_DOC + ( cAliasQry )->D1_SERIE + ( cAliasQry )->D1_FORNECE + ;
						( cAliasQry )->D1_LOJA + ( cAliasQry )->D1_ITEM, 50 )+cTreeID,cImageSD1,cImageSD1,,,nLevel)
					Else
						oTree:AddItem( Pad( STR0018 +( cAliasQry )->D1_DOC + "/" + ( cAliasQry )->D1_SERIE + "/" + ( cAliasQry )->D1_ITEM + ;
						cAddString, 100 ), Pad( "SD1-" + ( cAliasQry )->D1_DOC + ( cAliasQry )->D1_SERIE + ( cAliasQry )->D1_FORNECE + ;
						( cAliasQry )->D1_LOJA + ( cAliasQry )->D1_ITEM, 50 )+cTreeID,cImageSD1,cImageSD1,,,nLevel)
					EndIf
				EndIf

				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SD1" )

		Else

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os titulos desta NF                                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			nLevel++

			If nLevel <= nMaxLevel

				cAliasQry := GetNextAlias()

				cQuery := ""

				If lFilEnt
					cQuery += "SELECT E2_FILIAL,E2_PREFIXO,E2_NUM,E2_PARCELA,E2_FORNECE,E2_LOJA,E2_TIPO "
					cQuery += "FROM " + RetSqlName( "SE2" ) + " "
					cQuery += "WHERE "
					If FWModeAccess("SF1") == "E" .And. FWModeAccess("SE2") == "E"
						cQuery += "E2_FILIAL='" + Substr(cChaveNF,1,TamSx3("E2_FILIAL")[1]) + "' AND "
					Else
						cQuery += "E2_FILIAL='" + xFilial("SE2") + "' AND "
					EndIf
				Else
					cQuery += "SELECT E2_PREFIXO,E2_NUM,E2_PARCELA,E2_FORNECE,E2_LOJA,E2_TIPO "
					cQuery += "FROM " + RetSqlName( "SE2" ) + " "
					cQuery += "WHERE "
					cQuery += "E2_FILIAL='" + xFilial( "SE2" ) + "' AND "
				EndIf
				IF lTemNcp 
					cQuery += "E2_NUM IN('"+ cDoc+ "','"+aSf2Cred[1]+"') AND " 
				Else
					cQuery += "E2_NUM='"    + cDoc	             + "' AND "
				EndIF
				cQuery += "E2_PREFIXO='"+&(SuperGetMv("MV_2DUPREF"))+"' AND "
				cQuery += "E2_FORNECE='"+ cFornece         + "' AND "
				cQuery += "E2_LOJA='"   + cLoja            + "' AND "
				cQuery += "D_E_L_E_T_=' ' "

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

				oTree:TreeSeek( Pad( "SF1-" + cChaveNF , 50 )+cTreeID )

				cImageSE2 := MaEntImage( "SE2", 1 )

				While !( cAliasQry )->( Eof() )

					dbSelectArea( cAliasQry )
					cKey := Pad( "SE2-" + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_FORNECE + E2_LOJA + E2_TIPO, 50 )

					If cPaisLoc<>"BRA"
						If !oTree:TreeSeek(cKey)
							If lFilEnt
								oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
								E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO, 100 ),;
								Pad( "SE2-" + E2_FILIAL + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
							Else
								oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
								E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO, 100 ),;
								Pad( "SE2-" + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
							EndIf
						Endif
					Else
						If lFilEnt
							oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
							E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO, 100 ),;
							Pad( "SE2-" + E2_FILIAL + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
						Else
							oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
							E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO, 100 ),;
							Pad( "SE2-" + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
						EndIf
					Endif

					(cAliasQry )->( dbSkip() )

				End

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Exclui a area de trabalho da query                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea( cAliasQry )
				dbCloseArea()

				dbSelectArea( "SE2" )

			EndIf

			nLevel--

		EndIf

	EndIf
	nLevel--
EndIf

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSC7 ³ Autor ³ Aline Correa do Vale  ³ Data ³05/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de pedidos de compra                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSC7( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpN3 -> Tipo - 1 - Pedido / 2 - Autorizacao de entrega    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSC7( cNumPed, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID, nTipo, nContPed, cPedAux)

Local cPedido   := ""
Local cItem     := ""
Local cImageSC7 := ""
Local cImageSCR := ""
Local cFilent   := ""
Local cFilSC7   := ""
Local cTrkSeek  := ""
LOCAL lFilEnt	:= TRKFILENT()
Local cQuery    := ""
Local cAliasQry := ""
Local cImageSD1 := ""

DEFAULT nMaxLevel := 1000000
DEFAULT nTipo     := 1
DEFAULT cTreeID   := "000001"
DEFAULT nContPed  := 0
DEFAULT cPedAux   := ""

If lFilEnt
	SC7->( DbSetOrder( 14 ) )
	cTrkSeek:= cNumPed
Else
	SC7->( DbSetOrder( 1 ) )
	cTrkSeek:= xFilial( "SC7" ) + cNumPed
EndIf

If SC7->C7_TIPO == 1 .And. nTipo <> 1
	nTipo := 1
EndIf

If SC7->( DbSeek (cTrkSeek) )

	If lFilEnt
		cFilSC7   := SC7->C7_FILIAL
		If FwModeAccess("SC7") == "E" .And. FwModeAccess("SD1") == "E"
			cFilEnt   := Substr( cNumPed,1,TamSx3("C7_FILIAL")[1])
		Else
			cFilEnt	  := xFilial("SD1")
		EndIf
	EndIf
	cPedido   := IIF(lFilEnt,Substr( cNumPed,TamSx3("C7_FILIAL")[1]+1, Len( SD1->D1_PEDIDO )),Left( cNumPed, Len( SD1->D1_PEDIDO ) ) ) // Left( cNumPed, Len( SD1->D1_PEDIDO ) )
	cItem     := Right( cNumPed, Len( SD1->D1_ITEMPC ) )
	cImageSC7 := MaEntImage( "SC7", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		If nContPed >= 1 //Controle do nivel de acordo com o pedido de compra/autorizações de entrega
			nLevel := 1
		EndIf

		If SC7->C7_TIPO == 1 .And. nTipo <> 1
			nTipo := 1 //Pedido de compra
		ElseIf SC7->C7_TIPO == 2 .And. nTipo == 1
			nTipo := 2 //Autorização de Entrega
		EndIf

		If cPaisLoc=="BRA"
			If lFilEnt
				oTree:AddItem( Pad( If(nTipo==1,STR0058,STR0067) + Transform( Substr(cNumPed,TamSx3("C7_FILIAL")[1]+1,10) , "@r XXXXXX/XXXX" ) + ;  //"Pedido/Item - "###"Autorizacao de Entrega/Item - "
				cAddString, 100 ), Pad( "SC7-" + cNumPed , 50 )+cTreeID,cImageSC7,cImageSC7,,,nLevel)
				oTree:TreeSeek( Pad( "SC7-" + cNumPed , 50 )+cTreeID )
			Else
				oTree:AddItem( Pad( If(nTipo==1,STR0058,STR0067) + Transform(Substr(cNumPed,TamSx3("C7_FILIAL")[1]+1,10),  "@r XXXXXX/XXXX" ) + ;  //"Pedido/Item - "###"Autorizacao de Entrega/Item - "
				cAddString, 100 ), Pad( "SC7-" + cNumPed, 50 )+cTreeID,cImageSC7,cImageSC7,,,nLevel)
				oTree:TreeSeek( Pad( "SC7-" + cNumPed, 50 )+cTreeID )
			Endif
		Endif

		nLevel ++

		If nLevel <= nMaxLevel

			nLevel--

			If cPaisLoc<>"BRA"
				MaTrkSC7Loc(cNumPed,oTree,cAddString,nLevel,nMaxLevel,.T.,cTreeID)
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Alimenta os itens de notas fiscais deste pedido / item       ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				cAliasQry := GetNextAlias()

				cQuery := ""

				If lFilEnt
					cQuery += "SELECT D1_FILIAL, D1_COD, D1_DOC, D1_SERIE, D1_FORNECE, D1_LOJA, D1_ITEM "
					cQuery += "FROM " + RetSqlName( "SD1" ) + " "
					cQuery += "WHERE "
					cQuery += "D1_FILIAL='" + iif(FWModeAccess("SD1") == "C",xFilial("SD1"),cFilEnt)+"' AND "
					cQuery += "D1_PEDIDO='" + cPedido          + "' AND "
					cQuery += "D1_ITEMPC='" + cItem            + "' AND "
					cQuery += "D_E_L_E_T_=' ' "
					cQuery += "ORDER BY D1_FILIAL, D1_DOC, D1_SERIE, D1_ITEM"
				Else
					cQuery += "SELECT D1_COD, D1_DOC, D1_SERIE, D1_FORNECE, D1_LOJA, D1_ITEM "
					cQuery += "FROM " + RetSqlName( "SD1" ) + " "
					cQuery += "WHERE "
					cQuery += "D1_FILIAL='" + xFilial( "SD1" ) + "' AND "
					cQuery += "D1_PEDIDO='" + cPedido          + "' AND "
					cQuery += "D1_ITEMPC='" + cItem            + "' AND "
					cQuery += "D_E_L_E_T_=' ' "
					cQuery += "ORDER BY D1_DOC, D1_SERIE, D1_ITEM"
				EndIf

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

				oTree:TreeSeek( Pad( "SC7-" + cNumPed , 50 )+cTreeID )

				cImageSD1 := MaEntImage( "SD1", 1 )
				
				While !( cAliasQry )->( Eof() )
					If lFilEnt
						MATRKSD1( ( cAliasQry )->D1_FILIAL + ( cAliasQry )->D1_DOC + ( cAliasQry )->D1_SERIE + ( cAliasQry )->D1_FORNECE + ( cAliasQry )->D1_LOJA + ( cAliasQry )->D1_COD + ( cAliasQry )->D1_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
                    Else
						MATRKSD1( ( cAliasQry )->D1_DOC + ( cAliasQry )->D1_SERIE + ( cAliasQry )->D1_FORNECE + ( cAliasQry )->D1_LOJA + ( cAliasQry )->D1_COD + ( cAliasQry )->D1_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
                        EndIf
					oTree:TreeSeek( Pad( "SC7-" + cNumPed , 50 )+ cTreeID )

					( cAliasQry )->( dbSkip() )
				End

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Exclui a area de trabalho da query                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea( cAliasQry )
				dbCloseArea()

				dbSelectArea( "SD1" )
				
			EndIf


			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta as liberacoes deste pedido / item       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT CR_NUM"
			cQuery += " FROM " + RetSqlName( "SCR" ) + " "
			cQuery += " WHERE "
		    If lFilEnt
				cQuery += "CR_FILIAL='"+ iif(FWModeAccess("SCR") == "C",xFilial("SCR"),cFilSC7)+"' AND "
			Else
				cQuery += "CR_FILIAL='" + xFilial( "SCR" ) + "' AND "
		    EndIf
			If nTipo == 2
				cQuery += "CR_TIPO='AE' AND "
			Else
				cQuery += "CR_TIPO='PC' AND "
			EndIf
			cQuery += "CR_NUM='"    + cPedido + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY CR_NUM"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			If lFilEnt
				oTree:TreeSeek( Pad( "SC7-" + Substr(cNumPed,1,TamSx3("C7_FILIAL")[1]+10), 50 )+cTreeID )
			Else
				oTree:TreeSeek( Pad( "SC7-" + cNumPed, 50 )+cTreeID )
			EndIf

			cImageSCR := MaEntImage( "SCR", 1 )

			If lFilEnt
				If !( cAliasQry )->( Eof() )
					oTree:TreeSeek( Pad( "SC7-" +  Substr(cNumPed,1,TamSx3("C7_FILIAL")[1]+10), 50 )+cTreeID )
					MATRKSCR(iif(FWModeAccess("SCR") == "C",xFilial("SCR"),cFilSC7)+IIF(nTipo == 2,"AE","PC") + ( cAliasQry )->CR_NUM , @oTree, , @nLevel, nMaxLevel, NIL, cTreeID )
				EndIf
			Else
				While  !( cAliasQry )->( Eof() )

					oTree:TreeSeek( Pad( "SC7-" + cNumPed, 50 )+cTreeID )

					If cPaisLoc == "BRA"
						MATRKSCR( "PC" + ( cAliasQry )->CR_NUM, @oTree, , @nLevel, nMaxLevel, NIL, cTreeID )
					EndIf

					( cAliasQry )->( dbSkip() )
				End
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "SCR" )

		EndIf

	EndIf

	nLevel--
EndIf

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSC1 ³ Autor ³ Aline Correa do Vale  ³ Data ³09/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de solicitacoes de compra                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSC1( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSC1( cNumSC, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID, nGo )

Local cImageSC1	:= ""
Local cTrkSeek	:= ""
Local cFil 		:= ""
Local cProdSc	:= ""
Local cSC  		:= ""
Local cItSc		:= ""
Local aAreaSC1
Local lFilEnt	:= TRKFILENT()

Local oModel
Local oModCO2

Local l121Loc	:= (cPaisLoc $ "ARG|BOL|CHI|PAR|URU") .and. FUNNAME() == "MATA121"
Local l110Loc	:= (cPaisLoc $ "ARG|BOL|CHI|PAR|URU") .and. FUNNAME() == "MATA110"

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"
DEFAULT nGo		  := 0

SC1->( DbSetOrder( 1 ) )
If lFilEnt
   cTrkSeek:= cNumSC
Else
   cTrkSeek:= xFilial( "SC1" ) + cNumSC
EndIf

If SC1->( DbSeek (cTrkSeek) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageSC1  := MaEntImage( "SC1", 1 )
		oTree:AddItem( Pad( STR0054 + Transform(SC1->C1_NUM+SC1->C1_ITEM ,"@R "+REPLICATE("X",TAMSX3("C1_NUM")[1])+"/"+REPLICATE("X",TAMSX3("C1_ITEM")[1])) + ; // "Solicitacao/Item - "
		cAddString, 100 ), Pad( "SC1-" + cNumSC, 50 )+cTreeID,cImageSC1,cImageSC1,,,nLevel)
		oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+ cTreeID )

		nLevel++
		cFil 	:= SC1->C1_FISCORI
		cProdSc:= SC1->C1_PRODUTO
		cSC  	:= SC1->C1_SCORI
		cItSc	:= SC1->C1_ITSCORI
		SC1->( DbSetOrder( 2 ) )

		aAreaSC1:= SC1->(GetArea())

		Do While SC1->( DbSeek ( cFil+cProdSc+cSC+cItSc ) )
			oTree:AddItem( Pad( "SC Origem : " + STR0054 + cFil +"/"+ cSC  +"/"+ cItSc ,100 ), Pad( "SC1-" + cFil+cSC+cItSc, 50 )+cTreeID,cImageSC1,cImageSC1,,,2)
			oTree:TreeSeek( Pad( "SC1-" + cFil+cSC+cItSc, 50 ) )
			cFil 	:= SC1->C1_FISCORI
			cProdSc:= SC1->C1_PRODUTO
			cSC  	:= SC1->C1_SCORI
			cItSc  := SC1->C1_ITSCORI
		EndDo

		RestArea(aAreaSC1)

		oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+ cTreeID )

		cFil 	:= SC1->C1_FILIAL
		cProdSc:= SC1->C1_PRODUTO
		cSC  	:= SC1->C1_NUM
		cItSc	:= SC1->C1_ITEM
		SC1->( DbSetOrder( 11 ) )//C1_FISCORI+C1_SCORI+C1_ITSCORI+C1_PRODUTO                                                                                                        C1_FILIAL+C1_PRODUTO+C1_NUM+C1_ITEM+C1_FORNECE+C1_LOJA                                                                                                          

		Do While SC1->( DbSeek ( cFil+cSC+cItSc+cProdSc ) )
			cFil 	:= SC1->C1_FILIAL
			cProdSc:= SC1->C1_PRODUTO
			cSC  	:= SC1->C1_NUM
			cItSc	:= SC1->C1_ITEM

			oTree:AddItem( Pad( "SC Centr. : " + STR0054 + cFil +"/"+ cSC  +"/"+ cItSc ,100 ), Pad( "SC1-" + cFil+cSC+cItSc, 50 )+cTreeID,cImageSC1,cImageSC1,,,2)
			oTree:TreeSeek( Pad( "SC1-" + cFil+cSC+cItSc, 50 ) )
		EndDo

		RestArea(aAreaSC1)
		nLevel--

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Do Case
			Case IsInCallStack('MATRKCN9') .And. !IsInCallStack('MATRKCNE')
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se foi usado em uma ou mais planilhas               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				CNB->( DbSetOrder( 2 ) )
				If CNB->( DbSeek( xFilial( "CNB" ) + SC1->C1_NUM + SC1->C1_ITEM ) )
					oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+cTreeID )
					MATRKCNB( CNB->CNB_FILIAL + CNB->CNB_CONTRA + CNB->CNB_REVISA + CNB->CNB_NUMERO + CNB->CNB_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
				EndIf

			Case !Empty( SC1->C1_COTACAO ) .AND. SC1->C1_COTACAO <> "XXXXXX" .AND. SC1->C1_COTACAO <> "IMPORX" .AND. SC1->C1_COTACAO <> "IMPORT" .AND. SC1->C1_COTACAO <> "ANALIS"

				cAliasQry := GetNextAlias()

				cQuery := ""
				If lFilEnt
					cQuery += "SELECT C8_FILIAL, C8_NUM, C8_FORNECE, C8_LOJA, C8_ITEM, C8_PRODUTO, C8_NUMPED, C8_ITEMPED FROM " + RetSqlName( "SC8" ) + " "
					cQuery += "WHERE "
					If FwModeAccess("SC1") == "E" .And. FwModeAccess("SC8") == "E"
						cQuery += "C8_FILIAL='"  + SC1->C1_FILIAL   + "' AND "
					Else
						cQuery += "C8_FILIAL='"  + xFilial( "SC8" )   + "' AND "
					EndIf
				Else
					cQuery += "SELECT C8_NUM, C8_FORNECE, C8_LOJA, C8_ITEM, C8_PRODUTO, C8_NUMPED, C8_ITEMPED FROM " + RetSqlName( "SC8" ) + " "
					cQuery += "WHERE "
					cQuery += "C8_FILIAL='"  + xFilial( "SC8" ) + "' AND "
				EndIf
					cQuery += "C8_PRODUTO='" + SC1->C1_PRODUTO  + "' AND "
					cQuery += "C8_NUM='"     + SC1->C1_COTACAO  + "' AND "
					If Empty(SC1->C1_FLAGGCT)
						cQuery += "C8_NUMPED='"  + SC1->C1_PEDIDO   + "' AND "
						cQuery += "C8_ITEMPED='" + SC1->C1_ITEMPED  + "' AND "
					Else
						cQuery += "C8_NUMCON <> '"+ Replicate('X', Len(SC8->C8_NUMCON)) +"' AND "						
					EndIf
					cQuery += "D_E_L_E_T_=' '"

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. )

				If !( cAliasQry )->( Eof() )
					If lFilEnt
						oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+cTreeID )
						MATRKSC8( ( cAliasQry )->(C8_FILIAL + C8_NUM + C8_PRODUTO + C8_FORNECE + C8_LOJA + C8_NUMPED + C8_ITEMPED), @oTree, , @nLevel, nMaxLevel,,cTreeID )
					Else
						oTree:TreeSeek( Pad( "SC1-" + cNumSC, 50 )+cTreeID )
						MATRKSC8( ( cAliasQry )->(C8_NUM + C8_PRODUTO + C8_FORNECE + C8_LOJA + C8_NUMPED + C8_ITEMPED), @oTree, , @nLevel, nMaxLevel,,cTreeID )
					EndIf
				EndIf

			Case !Empty( SC1->C1_CODED + SC1->C1_NUMPR) .And. SC1->C1_COTACAO == 'ANALIS'

				oModel 	:= FwModelActive()

				If ValType(oModel) <> "O"
					dbSelectArea("CO1")
					dbSetOrder(1)

					If dbSeek(xFilial("CO1")+SC1->C1_CODED+SC1->C1_NUMPR)
						If CO1->CO1_AVAL == "1"
							oModel := FwLoadModel('GCPA200')
						Else
							oModel := FwLoadModel('GCPA201')
						EndIf
						oModel:SetOperation(MODEL_OPERATION_UPDATE)
						oModel:Activate()
					EndIf
				EndIf

				If oModel <> Nil 
					oModCO2 	:= oModel:GetModel("CO2DETAIL")

					cAliasQrySC1 := GetNextAlias()

					cQuery := ""

					cQuery += "SELECT C1_FILIAL,C1_NUM, C1_ITEM "
					cQuery += "  FROM " + RetSqlName( "SC1" ) + " "
					cQuery += " WHERE "
					cQuery += "C1_CODED = '"	+ SC1->C1_CODED	+ "' AND "
					cQuery += "C1_NUMPR = '"	+ SC1->C1_NUMPR	+ "' AND "
					cQuery += "C1_COTACAO = '"	+ SC1->C1_COTACAO	+ "' AND "
					cQuery += "C1_PRODUTO = '" + oModCO2:GetValue("CO2_CODPRO") + "' AND "
					cQuery += "D_E_L_E_T_=' ' "
					cQuery += "ORDER BY C1_NUM, C1_ITEM"

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQrySC1, .F., .T. )

					If!( cAliasQrySC1 )->( Eof() )
						oTree:TreeSeek( Pad( "SC1-" +  (cAliasQrySC1 )->C1_NUM , 50 )+ cTreeID )
						MATRKCOM( SC1->C1_CODED + SC1->C1_NUMPR, @oTree, , @nLevel, nMaxLevel,,cTreeID )
						( cAliasQrySC1 )->( dbSkip() )
					EndIf
				Endif

			Case !Empty( SC1->C1_CODED + SC1->C1_NUMPR)

				oModel 	:= FwModelActive()

				If ValType(oModel) <> "O"
					dbSelectArea("CO1")
					dbSetOrder(1)

					If dbSeek(xFilial("CO1")+SC1->C1_CODED+SC1->C1_NUMPR)
						If CO1->CO1_AVAL == "1"
							oModel := FwLoadModel('GCPA200')
						Else
							oModel := FwLoadModel('GCPA201')
						EndIf
						oModel:SetOperation(MODEL_OPERATION_UPDATE)
						oModel:Activate()
					EndIf
				EndIf
				
				If oModel <> Nil 
					oModCO2 	:= oModel:GetModel("CO2DETAIL")

					cAliasQrySC1 := GetNextAlias()

					cQuery := ""

					cQuery += "SELECT C1_FILIAL,C1_NUM, C1_ITEM "
					cQuery += "  FROM " + RetSqlName( "SC1" ) + " "
					cQuery += " WHERE "
					cQuery += "C1_CODED = '"	+ SC1->C1_CODED	+ "' AND "
					cQuery += "C1_NUMPR = '"	+ SC1->C1_NUMPR	+ "' AND "
					cQuery += "C1_PRODUTO = '" + oModCO2:GetValue("CO2_CODPRO") + "' AND "
					cQuery += "D_E_L_E_T_=' ' "
					cQuery += "ORDER BY C1_NUM, C1_ITEM"

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQrySC1, .F., .T. )

					If!( cAliasQrySC1 )->( Eof() )
						oTree:TreeSeek( Pad( "SC1-" +  (cAliasQrySC1 )->C1_NUM , 50 )+ cTreeID )
						MATRKCO1( SC1->C1_CODED + SC1->C1_NUMPR, @oTree, , @nLevel, nMaxLevel,,cTreeID, /*1,*/ nGo )
						( cAliasQrySC1 )->( dbSkip() )
					EndIf
				EndIf

			Case !Empty( SC1->C1_PEDIDO )

				cAliasQry := GetNextAlias()

				cQuery := ""

				If lFilEnt
					cQuery += "SELECT C7_FILIAL, C7_FILENT, C7_NUM, C7_ITEM "
					cQuery += "  FROM " + RetSqlName( "SC7" ) + " "
					cQuery += " WHERE "
   					cQuery += "  C7_FILIAL = '"+iif(!FWModeAccess("SC7") == "E",SC1->C1_FILIAL,xFilial("SC7"))+"' AND "
				Else
					cQuery += "SELECT C7_NUM, C7_ITEM "
					cQuery += "  FROM " + RetSqlName( "SC7" ) + " "
					cQuery += " WHERE "
					cQuery += " C7_FILIAL='" + xFilial( "SC7" ) + "' AND "
			    EndIf
			    
				If l121Loc .or. l110Loc
					If l121Loc
						If ValType(cA120NUM) == "C"
							cQuery += "C7_NUM='" + cA120NUM  + "' AND "
						EndIf
					EndIf
					If ValType(CSC) == "C"
						cQuery += "C7_NUMSC='" + CSC  + "' AND "
					EndIf
					If ValType(CITSC) == "C"
						cQuery += "C7_ITEMSC='" + CITSC  + "' AND "
					EndIf
			    Else
	  				cQuery += "C7_NUM='"    + SC1->C1_PEDIDO   + "' AND "
				    cQuery += "C7_ITEM='"   + SC1->C1_ITEMPED  + "' AND "
			    EndIf
			    cQuery += "D_E_L_E_T_=' ' "
			    cQuery += "ORDER BY C7_NUM, C7_ITEM"

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

				If lFilEnt
					oTree:TreeSeek( Pad( "SC7-" + ( cAliasQry )->C7_FILENT + ( cAliasQry )->C7_NUM, 50 )+cTreeID )

					If !( cAliasQry )->( Eof() )
						If l121Loc .or. l110Loc
							While !( cAliasQry )->( Eof() )
								oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+cTreeID )
								MATRKSC7( ( cAliasQry )->C7_FILENT + ( cAliasQry )->C7_NUM + ( cAliasQry )->C7_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1 )
								( cAliasQry )->( dbSkip() )
							Enddo
						Else
							MATRKSC7( ( cAliasQry )->C7_FILENT + ( cAliasQry )->C7_NUM + ( cAliasQry )->C7_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1 )
							( cAliasQry )->( dbSkip() )
						EndIf
					EndIf
				Else
					oTree:TreeSeek( Pad( "SC7-" + SC7->C7_NUM, 50 )+cTreeID )

					If !( cAliasQry )->( Eof() )
						If l121Loc
							While !( cAliasQry )->( Eof() )
								MATRKSC7( ( cAliasQry )->C7_NUM + ( cAliasQry )->C7_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1 )
								( cAliasQry )->( dbSkip() )
							Enddo
						Else
							MATRKSC7( ( cAliasQry )->C7_NUM + ( cAliasQry )->C7_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1 )
							( cAliasQry )->( dbSkip() )
						EndIf
					EndIf
				EndIf
				( cAliasQry )->(dbCloseArea())
				dbSelectArea( "SC7" )
			Case SC1->C1_FLAGGCT == '1'
					CNB->( DbSetOrder( 2 ) )
				If CNB->( DbSeek( xFilial( "CNB" ) + SC1->C1_NUM + SC1->C1_ITEM ) )
					oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+cTreeID )
					MATRKCNB( CNB->CNB_FILIAL + CNB->CNB_CONTRA + CNB->CNB_REVISA + CNB->CNB_NUMERO + CNB->CNB_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID )
				EndIf
		EndCase
	EndIf

	nLevel--
EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKCNB ³ Autor ³ Sergio Silveira       ³ Data ³21/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de planilhas de contratos                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKCNB( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKCNB( cKey, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )
Local cImageCNB := ""
Local cAliasQry := GetNextAlias()
Local nComeco	:= FwSizeFilial() + 1
Local lPedMt120	:= IsInCallStack("MATA120")
DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

CNB->( DbSetOrder( 1 ) )
CNE->( DbSetOrder( 1 ) )

If CNB->( DbSeek( cKey ) )

	nLevel++

	If nLevel <= nMaxLevel

		cContrato := ExtraiStr(cKey, @nComeco, Len( CNB->CNB_CONTRA ))
		cRevisa   := ExtraiStr(cKey, @nComeco, Len( CNB->CNB_REVISA ))		
		cNumero   := ExtraiStr(cKey, @nComeco, Len( CNB->CNB_NUMERO ))
		cItem     := ExtraiStr(cKey, @nComeco, Len( CNB->CNB_ITEM ))

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageCNB  := MaEntImage( "CNB", 1 )

		oTree:AddItem( Pad( STR0110 + Transform(cKey,"@R XXXXXXXXXXXXXXX/XXX/XXXXXX/XXX") + ; // "Planilha : Contrato / Revisao / Numero / Item - "
		cAddString, 100 ), Pad( "CNB-" + cKey, 50 )+cTreeID,cImageCNB,cImageCNB,,,nLevel)
		oTree:TreeSeek( Pad( "CNB-" + cKey, 50 )+ cTreeID )
		
		//³ Verifica se a planilha possui medicao
		BeginSQL Alias cAliasQry
			SELECT	CNE_FILIAL,
					CNE_CONTRA,
					CNE_REVISA,
					CNE_NUMERO,
					CNE_NUMMED,
					CNE_ITEM
			FROM 	%Table:CNE% CNE 
			JOIN	%Table:CND% CND 
			ON		CND.CND_FILIAL 		= CNE.CNE_FILIAL
					AND CND.CND_CONTRA 	= CNE.CNE_CONTRA
					AND CND.CND_REVISA 	= CNE.CNE_REVISA
					AND CND.CND_NUMMED 	= CNE.CNE_NUMMED
					AND CND.CND_FILCTR 	= %Exp:CNB->CNB_FILORI%
					AND CND.%NotDel%
			WHERE	CNE.CNE_CONTRA 		= %Exp:cContrato%
					AND CNE.CNE_REVISA 	= %Exp:cRevisa%
					AND CNE.CNE_NUMERO 	= %Exp:cNumero%
					AND CNE.CNE_ITEM 	= %Exp:cItem%
					AND CNE.%NotDel%
			ORDER BY %Order:CNE,1%
		EndSQL

		oTree:TreeSeek( Pad( "CNB-" + cKey, 50 )+cTreeID )
		
		//³ Rastreia as medicoes da planilha		
		While !( cAliasQry )->( Eof() )			
			
			if !lPedMt120 .Or. (lPedMt120 .And. ( cAliasQry )->(CNE_CONTRA+CNE_REVISA+CNE_NUMMED) == SC7->(C7_CONTRA + C7_CONTREV + C7_MEDICAO))
				
				oTree:TreeSeek( Pad( "CNB-" + cKey, 50 ) + cTreeID )
								
				MATRKCNE( ( cAliasQry )->(CNE_FILIAL + CNE_CONTRA + CNE_REVISA + CNE_NUMERO + CNE_NUMMED + CNE_ITEM), @oTree, , @nLevel, nMaxLevel,,cTreeID )
			endif

			( cAliasQry )->( dbSkip() )
		End
		
		(cAliasQry)->(dbCloseArea())
	EndIf

	nLevel --
EndIf

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKCNE ³ Autor ³ Sergio Silveira       ³ Data ³21/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de medicoes de contratos                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKCNE( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKCNE( cKey, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )
Local nComeco	:= 1
Local cImageCNE  := ""
Local cFilCtr	:= ""
Local cNumMed    := ""
Local cItem      := ""
Local cContrato  := ""
Local cRevisa    := ""
Local cPlanilha  := ""
Local lFilEnt	 := TRKFILENT()
Local cQuery     := ""
Local cAliasQry := GetNextAlias()
Local cAliasQry2 := ""
Local cNumPedC7  := ""
Local cImageTit  := ''
Local lPedido	 := .F.
Local cDescrTit	 := ""
Local nSize		 := 0
DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cFilCtr 	:= ExtraiStr(cKey, @nComeco, FwSizeFilial())
cContrato	:= ExtraiStr(cKey, @nComeco, Len(CNE->CNE_CONTRA)	)
cRevisa		:= ExtraiStr(cKey, @nComeco, Len(CNE->CNE_REVISA)	)
cPlanilha	:= ExtraiStr(cKey, @nComeco, Len(CNE->CNE_NUMERO)	)
cNumMed		:= ExtraiStr(cKey, @nComeco, Len(CNE->CNE_NUMMED)	)
cItem		:= ExtraiStr(cKey, @nComeco, Len(CNE->CNE_ITEM)		)

cQuery := " SELECT "
cQuery += " CNE.CNE_FILIAL, "
cQuery += " CNE.CNE_NUMERO,	"
cQuery += " CNE.CNE_PEDIDO,	"
cQuery += " CNE.CNE_ITEM,	"
cQuery += " CNE.CNE_PEDTIT,	"

cQuery += " ISNULL(CXN.CXN_CLIENT, CND.CND_CLIENT) AS COD_CLI, "
cQuery += " ISNULL(CXN.CXN_LJCLI , CND.CND_LOJACL) AS LOJ_CLI, "
cQuery += " ISNULL(CXN.CXN_FORNEC, CND.CND_FORNEC) AS COD_FOR, "
cQuery += " ISNULL(CXN.CXN_LJFORN, CND.CND_LJFORN) AS LOJ_FOR "
cQuery += " FROM " + RetSqlName( "CNE" ) + " CNE "

cQuery += "INNER JOIN " + RetSQLName( "CND" ) + " CND  ON("
cQuery += FWJoinFilial("CND", "CNE") + " AND "
cQuery += " CND.CND_NUMMED = CNE.CNE_NUMMED AND "
cQuery += " CND.CND_CONTRA = CNE.CNE_CONTRA AND CND.D_E_L_E_T_=' ') "

cQuery += " LEFT JOIN " + RetSQLName( "CXN" ) + " CXN  ON("
cQuery += FWJoinFilial("CXN", "CNE") + " AND "
cQuery += " CXN.CXN_NUMMED = CNE.CNE_NUMMED AND "
cQuery += " CXN.CXN_CONTRA = CNE.CNE_CONTRA AND CXN.D_E_L_E_T_=' ') "

cQuery += " WHERE "
cQuery += " CNE.CNE_NUMMED='" + cNumMed 	+ "' AND "
cQuery += " CNE.CNE_ITEM='"   + cItem   	+ "' AND "
cQuery += " CNE.CNE_NUMERO='" + cPlanilha	+ "' AND "
cQuery += " CNE.CNE_FILIAL = '" + xFilial("CNE", cFilCtr) + "' AND "
cQuery += " CNE.D_E_L_E_T_=' ' "

cQuery := ChangeQuery( cQuery )
dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

If !( cAliasQry )->( Eof() )
	nLevel++
	If nLevel <= nMaxLevel	
		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageCNE  := MaEntImage( "CNE", 1 )
		oTree:AddItem( Pad( STR0111 + cNumMed + "/" + cItem + cAddString ,100 ),; // "Medicao / Item - "
					   Pad( "CNE-" + cKey, 50 )+cTreeID,cImageCNE,cImageCNE,,,nLevel)
		oTree:TreeSeek(Pad( "CNE-" + cKey, 50 )+cTreeID )

		//- Verifica os pedidos de compra e/ou Titulos gerados
		If !Empty((cAliasQry)->COD_FOR)
			cAliasQry2 := GetNextAlias()
			
			If (lPedido := (cAliasQry)->CNE_PEDTIT == '1')
				//- Identifica o item do pedido de compra
				cQuery := " SELECT SC7.C7_FILENT, SC7.C7_NUM, SC7.C7_ITEM"				
				cQuery += " FROM " + RetSQLName( "SC7" ) + " SC7 WHERE "

				If !Empty((cAliasQry)->CNE_PEDIDO)
					cQuery += "SC7.C7_NUM = '"    + ( cAliasQry )->CNE_PEDIDO + "' AND "
					cQuery += "SC7.C7_ITEMED = '" + ( cAliasQry )->CNE_ITEM + "'   AND "
				Else
					cQuery += " SC7.C7_CONTRA 	= '"+ cContrato	+"' AND "
					cQuery += " SC7.C7_CONTREV 	= '"+ cRevisa	+"' AND "
					cQuery += " SC7.C7_MEDICAO 	= '"+ cNumMed	+"' AND "
					cQuery += " SC7.C7_PLANILH	= '"+ cPlanilha	+"' AND "
					cQuery += " SC7.C7_ITEMED 	= '"+ ( cAliasQry )->CNE_ITEM + "' AND "
				EndIf
				cQuery += " SC7.D_E_L_E_T_ 	= ' '"				
				
			Else //Titulo a pagar
				nLevel++
				cQuery := " SELECT "
				cQuery += " E2_FILIAL, "
				cQuery += " E2_PREFIXO, "
				cQuery += " E2_NUM, "
				cQuery += " E2_PARCELA, "
				cQuery += " E2_FORNECE, "
				cQuery += " E2_LOJA, "
				cQuery += " E2_TIPO "
				cQuery += " FROM "+ RetSQLName("SE2") + " SE2 "
				cQuery += " WHERE "
				cQuery += " SE2.E2_FILIAL = '" 	+ xFilial("SE2", cFilCtr) 	+"' AND "
				cQuery += " SE2.E2_MDCONTR =  '"+ cContrato 				+"'	AND "
				cQuery += " SE2.E2_MDREVIS =  '"+ cRevisa 					+"'	AND "
				cQuery += " SE2.E2_MDPLANI =  '"+ cPlanilha 				+"'	AND "
				cQuery += " SE2.E2_MEDNUME =  '"+ cNumMed					+"'	AND "
				cQuery += " SE2.E2_FORNECE =  '"+ (cAliasQry)->COD_FOR 		+"'	AND "
				cQuery += " SE2.E2_LOJA    =  '"+ (cAliasQry)->LOJ_FOR 		+"' AND "
				cQuery += " SE2.E2_TITPAI = '"	+ Space(Len(SE2->E2_TITPAI))+"' AND " //Nao trazer titulos de impostos
				cQuery += " SE2.E2_PREFIXO =  '"+ SuperGetMV("MV_CNPREMD",.F.,"MED") +"' AND"				
				cQuery += " SE2.E2_ORIGEM  IN  ('CNTA120', 'CNTA121') AND SE2.D_E_L_E_T_ = ' '"				
			EndIf			
			cQuery := ChangeQuery( cQuery )
			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )

			//- Atualiza arvore do pedido de compra
			If !( cAliasQry2 )->(Eof())					
				If lPedido				
					If(lFilEnt)
						cNumPedC7 := PadR((cAliasQry2)->C7_FILENT	, Len(SC7->C7_FILENT)) 
						cNumPedC7 += PadR((cAliasQry2)->C7_NUM		, Len(SC7->C7_NUM))					
					Else
						cNumPedC7 := PadR((cAliasQry2)->(C7_NUM), Len(SC7->C7_NUM))	
					EndIf
					MaTrkSC7H(cNumPedC7, @oTree, , @nLevel, nMaxLevel, .F.	,cTreeID, 1 )					
				Else
					nSize := Len(SE2->(E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA)) + 4 /*Soma 4 por conta do 'SE2-'*/
					cKey := (cAliasQry2)->(E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA)
					If lFilEnt
						nSize+= Len(SE2->E2_FILIAL)
						cKey := (cAliasQry2)->E2_FILIAL + cKey					
					EndIf
					cKey := Pad("SE2-" + cKey, nSize) + cTreeID

					cDescrTit := STR0113 + (cAliasQry2)->(E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/")
					cDescrTit += (cAliasQry2)->(E2_PARCELA + "/" + E2_TIPO) + cAddString
					cDescrTit := Pad(cDescrTit, 100) //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "

					If !oTree:TreeSeek(cKey)
						cImageTit := MaEntImage( "SE2", 1 )
						oTree:AddItem( cDescrTit, cKey, cImageTit ,cImageTit,,,nLevel)
					EndIf					
				EndIf
			EndIf			
			(cAliasQry2)->(dbCloseArea())
		ElseIf !Empty((cAliasQry)->COD_CLI)			
			
			cAliasQry2 := GetNextAlias()
			If (lPedido := (cAliasQry)->CNE_PEDTIT == '1')
				//- Identifica o item do pedido de compra
				cQuery := " SELECT "
				cQuery += " SC6.C6_NUM , "
				cQuery += " SC6.C6_ITEM  "

				cQuery += " FROM " + RetSQLName( "SC5" ) + " SC5, " 

				cQuery += RetSQLName( "SC6" ) + " SC6  "

				cQuery += " WHERE "
				cQuery += " SC5.C5_FILIAL	= '"+ xFilial("SC5")+"' AND "

				If !Empty((cAliasQry)->CNE_PEDIDO)
					cQuery += "SC6.C6_NUM = '"    + ( cAliasQry )->CNE_PEDIDO + "' AND "
					cQuery += "SC6.C6_ITEMED = '" + ( cAliasQry )->CNE_ITEM + "' AND "
				Else
					cQuery += " SC5.C5_MDCONTR 	= '"+cContrato+"' 	AND "
					cQuery += " SC5.C5_MDNUMED 	= '"+cNumMed+"'		AND "
					cQuery += " SC5.C5_MDPLANI	= '"+cPlanilha+"'	AND
					cQuery += " SC5.D_E_L_E_T_ 	= ' ' AND "

					cQuery += " SC6.C6_ITEMED 	= '"+( cAliasQry )->CNE_ITEM + "' AND "
					cQuery += " SC6.C6_FILIAL 	= SC5.C5_FILIAL AND "
					cQuery += " SC6.C6_NUM 		= SC5.C5_NUM 	AND"
				EndIf

				cQuery += " SC6.D_E_L_E_T_ 	= ' ' "
				cQuery := ChangeQuery( cQuery )
				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )

				//- Atualiza arvore do pedido de venda
				If !( cAliasQry2 )->(Eof())
					MATRKSC6(PadR((cAliasQry2)->(C6_NUM+C6_ITEM), Len(SC6->C6_NUM+SC6->C6_ITEM)), @oTree, , @nLevel, nMaxLevel,,cTreeID )
				EndIf
				
				cAliasSF2 := GetNextAlias()

				cQuery := ""
				
				If cPaisLoc<>"BRA"
					cQuery += "SELECT D2_CLIENTE, D2_LOJA, D2_DOC, D2_TIPODOC, D2_SERIE, D2_REMITO, D2_SERIREM "
					cQuery += "FROM " + RetSqlName( "SD2" ) + " "
					cQuery += "WHERE "
					cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
					cQuery += "D2_PEDIDO='" + (cAliasQry2)->(C6_NUM) + "' AND "
					cQuery += "D_E_L_E_T_=' ' "	

					cQuery += "GROUP BY D2_CLIENTE, D2_LOJA, D2_DOC, D2_TIPODOC, D2_SERIE,D2_REMITO, D2_SERIREM "
					cQuery += "ORDER BY D2_CLIENTE, D2_LOJA, D2_TIPODOC DESC, D2_DOC,  D2_SERIE "

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasSF2, .F., .T. )

					// Busca Range de Remitos do Pedido, para encontrar as respectivas facturas em cAliasQry1
					cAliasRem := GetNextAlias()
					cQuery    := ""
					cQuery += "SELECT MIN(D2_DOC) REMINI, MAX(D2_DOC) REMMAX "
					cQuery += "FROM " + RetSqlName( "SD2" ) + " "
					cQuery += "WHERE "
					cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
					cQuery += "D2_PEDIDO='" + (cAliasQry2)->(C6_NUM)          + "' AND "
					cQuery += "D_E_L_E_T_=' ' "

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasRem, .F., .T. )
					cRemIni := REMINI
					cRemFim := REMMAX
					dbSelectArea( cAliasRem )
					dbCloseArea()

					cAliasQry1 := GetNextAlias()
					cQuery := ""
					cQuery += "SELECT D2_CLIENTE, D2_LOJA, D2_DOC, D2_TIPODOC, D2_SERIE, D2_REMITO, D2_SERIREM "
					cQuery += "FROM " + RetSqlName( "SD2" ) + " "
					cQuery += "WHERE "
					cQuery += "D2_CLIENTE='" +( cAliasQry )->(D2_CLIENTE)   + "' AND "
					cQuery += "D2_LOJA='" +( cAliasQry )->(D2_LOJA)   + "' AND "
					cQuery += "D2_REMITO<>' '" + " AND "
					cQuery += "D2_REMITO>='" + cRemIni   + "' AND "
					cQuery += "D2_REMITO<='" + cRemFim   + "' AND "
					cQuery += "D2_SERIREM='" +( cAliasQry )->(D2_SERIE)   + "' AND "
					cQuery += "D2_TIPODOC<>'" + ( cAliasQry )->(D2_TIPODOC)    + "' AND "
					cQuery += "D_E_L_E_T_=' ' "	

					cQuery += "GROUP BY D2_CLIENTE, D2_LOJA, D2_DOC, D2_TIPODOC, D2_SERIE,D2_REMITO, D2_SERIREM "
					cQuery += "ORDER BY D2_CLIENTE, D2_LOJA, D2_TIPODOC DESC, D2_DOC,  D2_SERIE "

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry1, .F., .T. )
					
				Else
					cQuery += "SELECT D2_CLIENTE, D2_LOJA, D2_DOC, D2_SERIE "
					cQuery += "FROM " + RetSqlName( "SD2" ) + " "
					cQuery += "WHERE "
					cQuery += "D2_FILIAL='" + xFilial( "SD2" ) + "' AND "
					cQuery += "D2_PEDIDO='" + (cAliasQry2)->(C6_NUM)          + "' AND "
					cQuery += "D_E_L_E_T_=' ' "
	
					cQuery += "GROUP BY D2_CLIENTE, D2_LOJA, D2_DOC, D2_SERIE "
					cQuery += "ORDER BY D2_CLIENTE, D2_LOJA, D2_DOC, D2_SERIE "
	
					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasSF2, .F., .T. )
				EndIf

				oTree:TreeSeek( Pad( "SC5-" + (cAliasQry2)->(C6_NUM), 50 )+cTreeID )
				
				While !( cAliasSF2 )->( Eof() )
				
					cAliasSE1 := GetNextAlias()

					cQuery := ""

					cQuery += "SELECT E1_PREFIXO,E1_NUM,E1_PARCELA,E1_CLIENTE,E1_LOJA,E1_TIPO "
					cQuery += "FROM " + RetSqlName( "SE1" ) + " "
					cQuery += "WHERE "
					cQuery += "E1_FILIAL='" + xFilial( "SE1" ) + "' AND "
					cQuery += "E1_NUM='"    + (cAliasSF2)->(D2_DOC) + "' AND "
					cQuery += "E1_PREFIXO='"+ (cAliasSF2)->(D2_SERIE) + "' AND "
					cQuery += "E1_CLIENTE='"+ (cAliasSF2)->(D2_CLIENTE) + "' AND "
					cQuery += "E1_LOJA='"   + (cAliasSF2)->(D2_LOJA) + "' AND "
					cQuery += "D_E_L_E_T_=' ' "

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasSE1, .F., .T. )

					cImageSE1 := MaEntImage( "SE1", 1 )

					While !( cAliasSE1 )->( Eof() )

						dbSelectArea( cAliasSE1 )
						cKey := Pad( "SE1-" + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_CLIENTE + E1_LOJA + E1_TIPO, 50 )+cTreeID
						cTitulos:=E1_PREFIXO + E1_NUM + E1_PARCELA + E1_CLIENTE + E1_LOJA + E1_TIPO
						If aScan(aTitulos,{|x| x[1] == cTitulos })==0
							oTree:AddItem( Pad( STR0036 +; //"Titulo - Cliente/Loja/Prefixo/Numero/Parcela/Tipo - "
							E1_CLIENTE + "/" + E1_LOJA + "/" + E1_PREFIXO + "/" + E1_NUM + "/" + E1_PARCELA + "/" + E1_TIPO, 100 ),;
							Pad( "SE1-" + E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO, 50 )+cTreeID, cImageSE1 ,cImageSE1,,,nLevel)

						EndIf

						(cAliasSE1 )->( dbSkip() )

					End
					(cAliasSE1)->(dbCloseArea())
					( cAliasSF2 )->( dbSkip() )
					
				End
				
				(cAliasSF2)->(dbCloseArea())
			
			Else //Titulo à receber
				nLevel++
				cQuery := " SELECT "
				cQuery += " E1_FILIAL, "
				cQuery += " E1_PREFIXO, "
				cQuery += " E1_NUM, "
				cQuery += " E1_PARCELA, "
				cQuery += " E1_CLIENTE, "
				cQuery += " E1_LOJA, "
				cQuery += " E1_TIPO "
				cQuery += " FROM "+ RetSQLName("SE1") + " SE1 "
				cQuery += " WHERE "
				cQuery += " SE1.E1_FILIAL = '" 	+ xFilial("SE1", cFilCtr) 	+"' AND "
				cQuery += " SE1.E1_MDCONTR =  '"+ cContrato 				+"'	AND "
				cQuery += " SE1.E1_MDREVIS =  '"+ cRevisa 					+"'	AND "
				cQuery += " SE1.E1_MDPLANI =  '"+ cPlanilha 				+"'	AND "
				cQuery += " SE1.E1_MEDNUME =  '"+ cNumMed					+"'	AND "
				cQuery += " SE1.E1_CLIENTE =  '"+ (cAliasQry)->COD_CLI 		+"'	AND "
				cQuery += " SE1.E1_LOJA    =  '"+ (cAliasQry)->LOJ_CLI 		+"' AND "
				cQuery += " SE1.E1_TITPAI = '"	+ Space(Len(SE1->E1_TITPAI))+"' AND " //Nao trazer titulos de impostos
				cQuery += " SE1.E1_PREFIXO =  '"+ SuperGetMV("MV_CNPREMD",.F.,"MED") +"' AND"
				cQuery += " SE1.E1_ORIGEM  IN  ('CNTA120', 'CNTA121') AND SE1.D_E_L_E_T_ = ' '"
				
				cQuery := ChangeQuery( cQuery )
				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )

				If !( cAliasQry2 )->(Eof())
					nSize:= Len(SE1->(E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO)) + 4 /*Soma 4 por conta do 'SE1-'*/
					cKey := (cAliasQry2)->(E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO)					
					cKey := Pad("SE1-" + cKey, nSize) + cTreeID 

					cDescrTit := STR0036 + (cAliasQry2)->(E1_CLIENTE + "/" + E1_LOJA + "/" + E1_PREFIXO + "/" + E1_NUM + "/")
					cDescrTit += (cAliasQry2)->(E1_PARCELA + "/" + E1_TIPO) + cAddString
					cDescrTit := Pad(cDescrTit, 100) //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "

					If !oTree:TreeSeek(cKey)
						cImageTit := MaEntImage( "SE1", 1 )
						oTree:AddItem( cDescrTit, cKey, cImageTit ,cImageTit,,,nLevel)
					EndIf
				EndIf
			EndIf
			(cAliasQry2)->(dbCloseArea())
		EndIf
	EndIf

	nLevel--
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Exclui a area de trabalho da query                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
(cAliasQry)->(dbCloseArea())

dbSelectArea( "CNE" )

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSC3 ³ Autor ³ Aline Correa do Vale  ³ Data ³16/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de contrato de parceria                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSC3( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSC3( cNumSC, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

Local cTrkSeek	:= ""
Local lFilEnt	:= TRKFILENT()
Local nContPed  := 0
Local cPedAux 	:= ""

DEFAULT nMaxLevel := 1000000

SC3->( DbSetOrder( 1 ) )

If lFilEnt
	cTrkSeek:= cNumSC
Else
	cTrkSeek:= xFilial( "SC3" ) + cNumSC
EndIf

If SC3->( DbSeek( cTrkSeek ) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageSC3  := MaEntImage( "SC3", 1 )

		oTree:AddItem( Pad( STR0064 + Transform(IIF(Len(cNumSC)>10,Substr(cNumSC,TamSx3("C3_FILIAL")[1]+1,10),cNumSC),"@R XXXXXX/XXXX") + ; // "Contrato/Item - "
		cAddString, 100 ), Pad( "SC3-" + cNumSC, 50 )+cTreeID,cImageSC3,cImageSC3,,,nLevel)
		oTree:TreeSeek( Pad( "SC3-" + cNumSC, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SC3->C3_QUJE > 0

			cAliasQry := GetNextAlias()

			cQuery := ""
			If lFilEnt
 				cQuery += "SELECT C7_FILENT,C7_NUMSC,C7_FORNECE,C7_LOJA,C7_NUM,C7_ITEM FROM " + RetSqlName( "SC7" ) + " "
				cQuery += "WHERE "
				cQuery += "C7_FILIAL='"  + SC3->C3_FILIAL   + "' AND "
   			Else
 				cQuery += "SELECT C7_NUMSC,C7_FORNECE,C7_LOJA,C7_NUM,C7_ITEM FROM " + RetSqlName( "SC7" ) + " "
				cQuery += "WHERE "
				cQuery += "C7_FILIAL='"  + xFilial( "SC7" ) + "' AND "
            EndIf
				cQuery += "C7_PRODUTO='" + SC3->C3_PRODUTO  + "' AND "
				cQuery += "C7_NUMSC='"   + SC3->C3_NUM      + "' AND "
				cQuery += "C7_ITEMSC='"  + SC3->C3_ITEM     + "' AND "
				cQuery += "C7_TIPO=2 AND "
				cQuery += "D_E_L_E_T_=' '"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. )

			If nContPed == 0
				cPedAux := ( cAliasQry )->(C7_NUM+C7_ITEM) //Guarda o número do pedido para ajustar a posição da arvore
			EndIf 

			If lFilEnt
				While !( cAliasQry )->( Eof() )
					MaTrkSC7( ( cAliasQry )->(C7_FILENT+C7_NUM+C7_ITEM), @oTree, , @nLevel, nMaxLevel,,cTreeID, 2, nContPed )
					nContPed++
					( cAliasQry )->( dbSkip() )
				End
    		Else
				While !( cAliasQry )->( Eof() )
					MaTrkSC7( ( cAliasQry )->(C7_NUM+C7_ITEM), @oTree, , @nLevel, nMaxLevel,,cTreeID, 2 )
					( cAliasQry )->( dbSkip() )
				End
			EndIf

			( cAliasQRY )->( dbCloseArea() )

			dbSelectArea( "SC7" )

		EndIf
	EndIf

	nLevel--
EndIf

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKSCR ³ Autor ³ Aline Correa do Vale  ³ Data ³09/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de liberacao de pedido de compra           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKSCR( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpCR -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKSCR( cNumPed, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID, cPedAux)

Local cImageSCR   := ""
Local lFilEnt	  := TRKFILENT()
Local cSeekSCR    := IIF(lFilEnt,cNumPed,xFilial( "SCR" ) + cNumPed)

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"
DEFAULT cPedAux   := ""

SCR->( DbSetOrder( 1 ) )
If SCR->( DbSeek( cSeekScr ) )

	nLevel++

	If lFilEnt
		While !SCR->( Eof() ) .AND. cSeekScr == SCR->CR_FILIAL + SCR->CR_TIPO +Left(SCR->CR_NUM,Len(SCR->(CR_NUM)))

			If nLevel <= nMaxLevel

				cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
				cImageSCR  := MaEntImage( "SCR", 1 )

				oTree:AddItem( Pad( STR0025 +" - "+ Transform( Substr(cNumPed,TamSx3("CR_FILIAL")[1]+1,8) ,"@R XX/XXXXXXXXXX") + ; // "Liberacao"
				cAddString, 100 ), Pad( "SCR-" + Substr(cNumPed,1,10) + SCR->CR_USER, 50 )+cTreeID,cImageSCR,cImageSCR,,,nLevel)

			EndIf
			SCR->(dbSkip())
		EndDo
		oTree:TreeSeek( Pad( "SCR-" +  Substr(cNumPed,1,10) , 50 )+cTreeID )
	Else
		While !SCR->( Eof() ) .And. cSeekScr == SCR->CR_FILIAL + SCR->CR_TIPO +Left(SCR->CR_NUM,Len(SC7->(C7_NUM)))

			If nLevel <= nMaxLevel

				cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
				cImageSCR  := MaEntImage( "SCR", 1 )

				oTree:AddItem( Pad( STR0025 +" - "+ Transform(cNumPed,"@R XX/XXXXXXXXXX") + ; // "Liberacao"
				cAddString, 100 ), Pad( "SCR-" + cNumPed, 50 )+cTreeID,cImageSCR,cImageSCR,,,nLevel)

			EndIf
			SCR->(dbSkip())
		End
		oTree:TreeSeek( Pad( "SCR-" + cNumPed, 50 )+cTreeID )
	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkSC1H ³ Autor ³ Aline Correa do Vale  ³ Data ³13/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de solicitacoes de compra simulando Header ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkSC1H( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se exibe os itens                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkSC1H( cNumSC, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

Local cImageSC1  := ""
Local cCotNValid := Replicate( "X", Len( SC1->C1_COTACAO ) )
Local cAliasSC1  := "SC1"
Local cFilialSC1 := ""
Local cTrkSeek	 := ""

Local lFilEnt	 := TRKFILENT()

Local nLoop    	 := 0
Local nContPed   := 0

Local cQuery     := ""
Local cAliasQRY  := ""
Local cAliasCNB  := ""

Local aAreaSC1	 := {}
Local aNumCot    := {}
Local lLoc110 	 := (cPaisLoc $ "ARG|BOL|CHI|PAR|URU") .and. FUNNAME() == "MATA110"

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

SC1->( DbSetOrder( 1 ) )
If lFilEnt
	cTrkSeek:= cNumSC
Else
	cTrkSeek:= xFilial( "SC1" ) + cNumSC
EndIf

If SC1->( DbSeek( cTrkSeek ) )

	cFilialSC1 := SC1->C1_FILIAL

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageSC1  := MaEntImage( "SC1", 1 )

		oTree:AddItem( Pad( STR0053 + Transform(IIF(Len(cNumSC)>6, Substr(cNumSC,TamSx3("C1_FILIAL")[1]+1,6),cNumSC),"@R XXXXXX") + ; // "Solicitacao - "
		cAddString, 100 ), Pad( "SC1-" + cNumSC , 50 )+cTreeID,cImageSC1,cImageSC1,,,nLevel)
		oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		cAliasQry := GetNextAlias()

		cQuery := ""
		If lFilEnt
			cQuery += "SELECT C7_FILENT,C7_NUM FROM " + RetSqlName( "SC7" ) + " "
			cQuery += "WHERE "

			cQuery += "  C7_FILIAL = '"+iif(!FWModeAccess("SC7") == "E",SC1->C1_FILIAL,xFilial("SC7"))+"' AND "
			If (cPaisLoc $ "ARG|BOL|CHI|PAR|URU") .and. FUNNAME() == "MATA121" .and. ValType(cA120NUM) == "C"
				cQuery += "C7_NUM='" + cA120NUM  + "' AND "
			EndIf
			cQuery += "C7_NUMSC='" + SC1->C1_NUM  + "' AND "

			cQuery += "( C7_NUMCOT='" + Space( Len( SC7->C7_NUMCOT ) ) + "' OR "
			cQuery += "C7_NUMCOT='"   + cCotNValid                      + "' ) AND "

			cQuery += "C7_TIPO=1 AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "GROUP BY C7_FILENT,C7_NUM "
			cQuery += "ORDER BY C7_FILENT,C7_NUM "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. )

			While !( cAliasQry )->( Eof() )
				If lLoc110
					oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+cTreeID )
					nLevel := oTree:Nivel()
				EndIf 
				nContPed++
				MaTrkSC7H( ( cAliasQry )->C7_FILENT + ( cAliasQry )->(C7_NUM), @oTree, , @nLevel, nMaxLevel, lItem, cTreeID, 1, nContPed )
				( cAliasQry )->( dbSkip() )
			End
		Else
			cQuery += "SELECT C7_FILIAL,C7_NUM FROM " + RetSqlName( "SC7" ) + " "
			cQuery += "WHERE "
			cQuery += "C7_FILIAL='"  + xFilial( "SC7" ) + "' AND "
			cQuery += "C7_NUMSC='" + SC1->C1_NUM  + "' AND "

			cQuery += "( C7_NUMCOT='" + Space( Len( SC7->C7_NUMCOT ) ) + "' OR "
			cQuery += "C7_NUMCOT='"   + cCotNValid                      + "' ) AND "

			cQuery += "C7_TIPO=1 AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "GROUP BY C7_FILIAL,C7_NUM "
			cQuery += "ORDER BY C7_FILIAL,C7_NUM "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. )

			While !( cAliasQry )->( Eof() )
				nContPed++
				MaTrkSC7H( ( cAliasQry )->(C7_NUM), @oTree, , @nLevel, nMaxLevel, lItem, cTreeID, 1, nContPed )
				( cAliasQry )->( dbSkip() )
			End
	 	EndIf
		(cAliasQry)->(dbCloseArea())
		dbSelectArea("SC7")

		cAliasSC1 := GetNextAlias()

		cQuery := ""

		cQuery += "SELECT C1_FILIAL, C1_COTACAO, C1_NUM FROM " + RetSqlName( "SC1" ) + " "
		cQuery += "WHERE "
		If lFilEnt
			cQuery += "C1_FILIAL='"  + cFilialSC1      + "' AND "
			cQuery += "C1_NUM='"     + Substr(cNumSC,TamSx3("C1_FILIAL")[1]+1,6) + "' AND "
		Else
			cQuery += "C1_FILIAL='"  + xFilial( "SC1" ) + "' AND "
			cQuery += "C1_NUM='"     + cNumSC           + "' AND "
        EndIf
		cQuery += "C1_COTACAO<>'" + cCotNValid       + "' AND "
		cQuery += "C1_COTACAO<>'" + Space( Len( SC1->C1_COTACAO ) ) + "' AND "
		cQuery += "D_E_L_E_T_=' ' "

		cQuery += "GROUP BY C1_FILIAL, C1_COTACAO, C1_NUM ORDER BY C1_FILIAL,C1_COTACAO, C1_NUM"

		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasSC1, .F., .T. )

		aNumCot := {}

		If lFilEnt
			If SC1->C1_COMPRAC <> "1"
			While !( cAliasSC1 )->( Eof() ) .AND. ( cAliasSC1 )->C1_FILIAL + ( cAliasSC1 )->C1_NUM == cFilialSC1 + Substr(cNumSC,TamSx3("C1_FILIAL")[1]+1,6)

				If ( cAliasSC1 )->C1_COTACAO <> cCotNValid .AND. ( cAliasSC1 )->C1_COTACAO <> Space( Len( SC1->C1_COTACAO ) )
					If Empty( AScan( aNumCot, { |x| x == ( cAliasSC1 )->C1_FILIAL + ( cAliasSC1 )->C1_COTACAO } ) )
						If FwModeAccess("SC1") == "E" .And. FwModeAccess("SC8") == "E"
							AAdd( aNumCot,( cAliasSC1 )->C1_FILIAL + ( cAliasSC1 )->C1_COTACAO )
						Else
							AAdd( aNumCot,xFilial("SC8") + ( cAliasSC1 )->C1_COTACAO )
						EndIf
					EndIf
				EndIf

				( cAliasSC1 )->( dbskip() )

			End
		Else
			aAreaSC1:= SC1->(GetArea())
				If SC1->C1_COMPRAC == "1"
					DbSelectArea("SC1")
					DbSetOrder(11)
					If MsSeek(xFilial( "SC1" ) + Substr(cNumSC,TamSx3("C1_FILIAL")[1]+1,6) )
					While !SC1->( Eof() ) .AND. SC1->C1_FISCORI + SC1->C1_SCORI == cFilialSC1 + Substr(cNumSC,TamSx3("C1_FILIAL")[1]+1,6)
						AAdd( aNumCot,SC1->C1_FILIAL + SC1->C1_COTACAO )
					SC1->(DbSkip())
					EndDo
					EndIf
				EndIf
			RestArea(aAreaSC1)
		EndIf
		Else
			While !( cAliasSC1 )->( Eof() ) .And. ( cAliasSC1 )->C1_FILIAL + ( cAliasSC1 )->C1_NUM == xFilial( "SC1" ) + cNumSC

				If ( cAliasSC1 )->C1_COTACAO <> cCotNValid .And. ( cAliasSC1 )->C1_COTACAO <> Space( Len( SC1->C1_COTACAO ) )
					If Empty( AScan( aNumCot, { |x| x == ( cAliasSC1 )->C1_COTACAO } ) )
						AAdd( aNumCot, ( cAliasSC1 )->C1_COTACAO )
					EndIf
				EndIf

				( cAliasSC1 )->( dbskip() )

			End
        EndIf

		( cAliasSC1 )->( dbCloseArea() )
		dbSelectArea( "SC1" )

		For nLoop := 1 To Len( aNumCot )
			MaTrkSC8H( aNumCot[ nLoop ], @oTree, , @nLevel, nMaxLevel, lItem, cTreeID )
		Next nLoop

        If A103GCDisp()

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Localiza as planilhas desta solicitacao ( apenas SQL )       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasCNB := GetNextAlias()

			cQuery := ""

			cQuery += "SELECT CNB_CONTRA, CNB_REVISA, CNB_NUMERO FROM " + RetSqlName( "CNB" ) + " "
			cQuery += "WHERE "
			cQuery += "CNB_FILORI='"  + xFilial( "CNB" )   + "' AND "
			cQuery += "CNB_NUMSC='"   + Substr(cNumSC,TamSx3("CNB_NUMSC")[1]+1,6) + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "GROUP BY CNB_CONTRA, CNB_REVISA, CNB_NUMERO ORDER BY CNB_CONTRA,CNB_REVISA,CNB_NUMERO"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasCNB, .F., .T. )

			While !( cAliasCNB )->( Eof() )
				MaTrkCNA( ( cAliasCNB )->CNB_CONTRA + ( cAliasCNB )->CNB_REVISA + ( cAliasCNB )->CNB_NUMERO, @oTree, , @nLevel, nMaxLevel, lItem, cTreeID )
				oTree:TreeSeek( Pad( "SC1-" + cNumSC , 50 )+cTreeID )
				( cAliasCNB )->( dbSkip() )
			End

			( cAliasCNB )->( dbCloseArea() )
			dbSelectArea( "CNB" )

        EndIf

	EndIf

	nLevel--
EndIf

Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkSC8H ³ Autor ³ Aline Correa do Vale  ³ Data ³13/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de solicitacoes de compra simulando Header ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkSC1H( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkSC8H( cNumCot, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

Local cImageSC8 := ""
Local cTrkSeek	:= ""
Local lFilEnt	:= TRKFILENT()
Local nLoop     := 0

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

SC8->( DbSetOrder( 1 ) )
If lFilEnt
	cTrkSeek:= cNumCot
Else
	cTrkSeek:= xFilial( "SC8" ) + cNumCot
EndIf

If SC8->( DbSeek (cTrkSeek) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageSC8  := MaEntImage( "SC8", 1 )

		If !oTree:TreeSeek( Pad( "SC8-" + cNumCot , 50 )+cTreeID )

			oTree:AddItem( Pad( STR0065  + Transform(IIF(Len(cNumCot)>6,Substr(cNumCot,TamSx3("C8_FILIAL")[1]+1,6),cNumCot),"@R XXXXXX") + ; // "Cotacao - "
			cAddString, 100 ), Pad( "SC8-" + cNumCot , 50 )+cTreeID,cImageSC8,cImageSC8,,,nLevel)
			oTree:TreeSeek( Pad( "SC8-" + cNumCot , 50 )+cTreeID )

			cAliasSC8 := GetNextAlias()

			cQuery := ""
			If SC8->C8_TPDOC == '1' .Or. Empty(SC8->C8_TPDOC)
				If lFilEnt
			 		cQuery += "SELECT C8_FILIAL,C8_FILENT,C8_NUMPED,C8_NUM FROM " + RetSqlName( "SC8" ) + " "
					cQuery += "WHERE "
					cQuery += "C8_FILIAL='"  + Substr(cNumCot,1,TamSx3("C8_FILIAL")[1]) + "' AND "
					cQuery += "C8_NUM='"     + Substr(cNumCot,Len(SC8->C8_FILIAL)+1,6) + "' AND "
					cQuery += "C8_NUMPED<>'" + Replicate( "X", Len( SC8->C8_NUMPED ) ) + "' AND "
					cQuery += "C8_NUMPED<>'" + Space( Len( SC8->C8_NUMPED ) ) + "' AND "
					cQuery += "D_E_L_E_T_=' '"
					cQuery += "GROUP BY C8_FILIAL,C8_FILENT,C8_NUMPED,C8_NUM ORDER BY C8_FILIAL,C8_NUMPED,C8_NUM"
				Else
			 		cQuery += "SELECT C8_FILIAL,C8_NUMPED,C8_NUM FROM " + RetSqlName( "SC8" ) + " "
					cQuery += "WHERE "
					cQuery += "C8_FILIAL='"  + xFilial( "SC8" ) + "' AND "
					cQuery += "C8_NUM='"     + cNumCot          + "' AND "
					cQuery += "C8_NUMPED<>'" + Replicate( "X", Len( SC8->C8_NUMPED ) ) + "' AND "
					cQuery += "C8_NUMPED<>'" + Space( Len( SC8->C8_NUMPED ) ) + "' AND "
					cQuery += "D_E_L_E_T_=' '"
					cQuery += "GROUP BY C8_FILIAL,C8_NUMPED,C8_NUM ORDER BY C8_FILIAL,C8_NUMPED,C8_NUM"
				EndIf
			Else
				If lFilEnt
			 		cQuery += "SELECT C8_FILIAL,C8_FILENT,C8_NUMCON,C8_NUM FROM " + RetSqlName( "SC8" ) + " "
					cQuery += "WHERE "
					cQuery += "C8_FILIAL='"  + Substr(cNumCot,1,TamSx3("C8_FILIAL")[1]) + "' AND "
					cQuery += "C8_NUM='"     + Substr(cNumCot,Len(SC8->C8_FILIAL)+1,6) + "' AND "
					cQuery += "C8_NUMCON<>'" + Replicate( "X", Len( SC8->C8_NUMCON ) ) + "' AND "
					cQuery += "C8_NUMCON<>'" + Space( Len( SC8->C8_NUMCON ) ) + "' AND "
					cQuery += "D_E_L_E_T_=' '"
					cQuery += "GROUP BY C8_FILIAL,C8_FILENT,C8_NUMCON,C8_NUM ORDER BY C8_FILIAL,C8_NUMCON,C8_NUM"
				Else
			 		cQuery += "SELECT C8_FILIAL,C8_NUMCON,C8_NUM FROM " + RetSqlName( "SC8" ) + " "
					cQuery += "WHERE "
					cQuery += "C8_FILIAL='"  + xFilial( "SC8" ) + "' AND "
					cQuery += "C8_NUM='"     + cNumCot          + "' AND "
					cQuery += "C8_NUMCON<>'" + Replicate( "X", Len( SC8->C8_NUMCON ) ) + "' AND "
					cQuery += "C8_NUMCON<>'" + Space( Len( SC8->C8_NUMCON ) ) + "' AND "
					cQuery += "D_E_L_E_T_=' '"
					cQuery += "GROUP BY C8_FILIAL,C8_NUMCON,C8_NUM ORDER BY C8_FILIAL,C8_NUMCON,C8_NUM"
				EndIf
			Endif
			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasSC8, .F., .T. )

	       If SC8->C8_TPDOC == '1' .Or. Empty(SC8->C8_TPDOC)
				aPedidos := {}

				If lFilEnt
					While !( cAliasSC8 )->( Eof() ) .AND. ( cAliasSC8 )->C8_FILIAL + ( cAliasSC8 )->C8_NUM == cNumCot

						If ( cAliasSC8 )->C8_NUMPED <> Replicate( "X", Len( SC8->C8_NUMPED ) ) .AND. ;
								( cAliasSC8 )->( C8_NUMPED ) <> Space( Len( SC8->C8_NUMPED ) )
							If Empty( AScan( aPedidos, ( cAliasSC8 )->C8_FILENT + ( cAliasSC8 )->C8_NUMPED ) )
								AAdd( aPedidos, ( cAliasSC8 )->C8_FILENT + ( cAliasSC8 )->C8_NUMPED )
							EndIf
						EndIf

						( cAliasSC8 )->( dbSkip() )

					End
		  		Else
					While !( cAliasSC8 )->( Eof() ) .And. ( cAliasSC8 )->C8_FILIAL + ( cAliasSC8 )->C8_NUM == xFilial( "SC8" ) + cNumCot

						If ( cAliasSC8 )->C8_NUMPED <> Replicate( "X", Len( SC8->C8_NUMPED ) ) .AND. ;
								( cAliasSC8 )->( C8_NUMPED ) <> Space( Len( SC8->C8_NUMPED ) )
							If Empty( AScan( aPedidos, ( cAliasSC8 )->C8_NUMPED ) )
								AAdd( aPedidos, ( cAliasSC8 )->C8_NUMPED )
							EndIf
						EndIf

						( cAliasSC8 )->( dbSkip() )

					End
				EndIf


				( cAliasSC8 )->( dbCloseArea() )
				dbSelectArea( "SC8" )

				For nLoop := 1 To Len( aPedidos )
					MaTrkSC7H( aPedidos[ nLoop ], @oTree, , @nLevel, nMaxLevel, lItem,cTreeID,  1 )
					oTree:TreeSeek( Pad( "SC8-" + cNumCot , 50 )+cTreeID )
				Next nLoop
			Else
				aContratos := {}

				If lFilEnt
					While !( cAliasSC8 )->( Eof() ) .AND. ( cAliasSC8 )->C8_FILIAL + ( cAliasSC8 )->C8_NUM == cNumCot

						If ( cAliasSC8 )->C8_NUMCON <> Replicate( "X", Len( SC8->C8_NUMCON ) ) .AND. ;
								( cAliasSC8 )->( C8_NUMCON ) <> Space( Len( SC8->C8_NUMCON ) )
							If Empty( AScan( aContratos, ( cAliasSC8 )->C8_FILENT + ( cAliasSC8 )->C8_NUMCON ) )
								AAdd( aContratos, ( cAliasSC8 )->C8_NUMCON )
							EndIf
						EndIf

						( cAliasSC8 )->( dbSkip() )

					End
		  		Else
					While !( cAliasSC8 )->( Eof() ) .And. ( cAliasSC8 )->C8_FILIAL + ( cAliasSC8 )->C8_NUM == xFilial( "SC8" ) + cNumCot

						If ( cAliasSC8 )->C8_NUMCON <> Replicate( "X", Len( SC8->C8_NUMCON ) ) .AND. ;
								( cAliasSC8 )->( C8_NUMCON ) <> Space( Len( SC8->C8_NUMCON ) )
							If Empty( AScan( aContratos, ( cAliasSC8 )->C8_NUMCON ) )
								AAdd( aContratos, ( cAliasSC8 )->C8_NUMCON )
							EndIf
						EndIf

						( cAliasSC8 )->( dbSkip() )

					End
				EndIf
				( cAliasSC8 )->( dbCloseArea() )
				dbSelectArea( "SC8" )

				For nLoop := 1 To Len( aContratos )
					MaTrkCN9H( aContratos[ nLoop ], @oTree, , @nLevel, nMaxLevel, lItem,cTreeID,  1 )
					oTree:TreeSeek( Pad( "SC8-" + cNumCot , 50 )+cTreeID )
				Next nLoop

			Endif
		EndIf

	EndIf

	nLevel--
EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkSC3H ³ Autor ³ Aline Correa do Vale  ³ Data ³13/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de solicitacoes de compra simulando Header ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkSC3H( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkSC3H( cNumCont, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID )

Local cImageSC3  := ""
Local cTrkSeek   := ""
Local lFilEnt	 := TRKFILENT()

Local cQuery     := ""
Local cAliasQRY  := ""
Local nContPed   := 0

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

SC3->( DbSetOrder( 1 ) )
If lFilEnt
	cTrkSeek:= cNumCont
Else
  	cTrkSeek:= xFilial( "SC3" ) + cNumCont
EndIf

If SC3->( DbSeek (cTrkSeek) )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		cImageSC3  := MaEntImage( "SC3", 1 )

		oTree:AddItem( Pad( STR0066 + Transform(IIF(Len(cNumCont)>6, Substr(cNumCont,TamSx3("C3_FILIAL")[1]+1,6),cNumCont),"@R XXXXXX") + ; // "Contrato - "
		cAddString, 100 ), Pad( "SC3-" + cNumCont, 50 )+cTreeID,cImageSC3,cImageSC3,,,nLevel)
		oTree:TreeSeek( Pad( "SC3-" + cNumCont, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa destino                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		cAliasQry := GetNextAlias()

		cQuery := ""

		If lFilEnt
			cQuery += "SELECT C7_FILENT,C7_NUM FROM " + RetSqlName( "SC7" ) + " "
			cQuery += "WHERE "
			cQuery += "C7_FILIAL='"  + SC3->C3_FILIAL + "' AND "
			cQuery += "C7_NUMSC='" + SC3->C3_NUM  + "' AND "
			cQuery += "C7_TIPO=2 AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "GROUP BY C7_FILENT,C7_NUM "
			cQuery += "ORDER BY C7_FILENT,C7_NUM "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. )

			While !( cAliasQry )->( Eof() )
				MaTrkSC7H( ( cAliasQry )->(C7_FILENT)+( cAliasQry )->(C7_NUM), @oTree, , @nLevel, nMaxLevel, lItem, cTreeID, 2,nContPed )
				nContPed++
				( cAliasQry )->( dbSkip() )
			End
		Else
			cQuery += "SELECT C7_NUM FROM " + RetSqlName( "SC7" ) + " "
			cQuery += "WHERE "
			cQuery += "C7_FILIAL='"  + xFilial( "SC7" ) + "' AND "
			cQuery += "C7_NUMSC='" + SC3->C3_NUM  + "' AND "
			cQuery += "C7_TIPO=2 AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "GROUP BY C7_NUM "
			cQuery += "ORDER BY C7_NUM "

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,,cQuery ), cAliasQry, .F., .T. )

			While !( cAliasQry )->( Eof() )
				MaTrkSC7H( ( cAliasQry )->(C7_NUM), @oTree, , @nLevel, nMaxLevel, lItem, cTreeID, 2 )
				( cAliasQry )->( dbSkip() )
			End
            EndIf

		(cAliasQry)->(dbCloseArea())
		dbSelectArea("SC7")

	EndIf

	nLevel--
EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkSC7H ³ Autor ³ Aline Correa do Vale  ³ Data ³13/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de pedidos de compra de Header             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkSC7H( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Exibe itens                                       ³±±
±±³          ³ ExpN3 -> Tipo 1-Pedido / 2-Autorizacao de entrega          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkSC7H( cNumPed, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo, nContPed )

Local cPedido   := ""
Local cImageSC7 := ""
Local cTrkSeek	:= ""
Local lFilEnt	:= TRKFILENT()
Local cImageSD1 := ""
Local cQuery    := ""
Local cAliasQry := ""

Local nLevelAux := 0

DEFAULT lItem     := .T.
DEFAULT nMaxLevel := 1000000
DEFAULT nTipo     := 1
DEFAULT nContPed  := 0
DEFAULT cTreeID   := "000001"

If SC7->C7_TIPO == 1 .And. nTipo <> 1
	nTipo := 1
EndIf

If lFilEnt
	SC7->( DbSetOrder( 14 ) )
	If Len(cNumPed) == Len(xFilial("SC7")+SD1->D1_PEDIDO+SD1->D1_ITEMPC)
		cTrkSeek := cNumPed
		cPedido  := Substr( cNumPed,TamSx3("D1_FILIAL")[1]+1, Len( SD1->D1_PEDIDO ) )		
	ElseIf Len(cNumPed) <> Len(xFilial("SC7")+SD1->D1_PEDIDO)
		cTrkSeek := xFilial("SC7")+cNumPed
		cPedido   := cNumPed
	Else
		cTrkSeek:= cNumPed
		cPedido   := Substr( cNumPed,TamSx3("D1_FILIAL")[1]+1, Len( SD1->D1_PEDIDO ) )
	EndIf
Else
	SC7->( DbSetOrder( 1 ) )
	cTrkSeek:= cNumPed
	If Len(cNumPed) == Len( SD1->D1_PEDIDO+SD1->D1_ITEMPC)
		cPedido := Left( cNumPed, Len( SD1->D1_PEDIDO ))
	Else
		cPedido   := Right( cNumPed, Len( SD1->D1_PEDIDO ) )
	EndIf
EndIf

If SC7->( DbSeek (cTrkSeek) )
	cImageSC7 := MaEntImage( "SC7", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		If cPaisLoc<>"BRA"
			MaTrkSC7Loc(cNumPed,oTree,cAddString,nLevel,nMaxLevel,.F.,cTreeID)
			nLevel--
		Else
			If nContPed >= 1
				nLevelAux := nLevel
				nLevel := 1
			EndIf

			If !oTree:AddItem( Pad( If(nTipo==1,STR0057,STR0068) + " - " + Transform(IIF(Len(cNumPed)>6, Substr(cNumPed,TamSx3("C7_FILIAL")[1]+1,6),cNumPed), "@r XXXXXX" ) + ;  //"Pedido de Compra"###"Autorizacao de Entrega"
				cAddString, 100 ), Pad( "SC7-" + cNumPed , 50 )+cTreeID,cImageSC7,cImageSC7,,,nLevel)
				oTree:TreeSeek( Pad( "SC7-" + cNumPed , 50 )+cTreeID )

				If nContPed > 1
					nLevel := nLevelAux
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Alimenta os itens de notas fiscais deste pedido / item       ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				cAliasQry := GetNextAlias()

				cQuery := ""
				If lFilEnt
					cQuery += "SELECT D1_FILIAL,D1_DOC,D1_SERIE,D1_FORNECE,D1_LOJA,D1_TIPO,D1_PEDIDO "
					cQuery += "FROM " + RetSqlName( "SD1" ) + " "
					cQuery += "WHERE "
					IF FWModeAccess("SD1") == "C"
						cQuery += "D1_FILIAL='" +IIF(FWModeAccess("SD1")=="C",xFilial("SD1"),SC7->C7_FILENT) + "' AND "
					Else
						cQuery += "D1_FILIAL='" + xFilial("SD1", SC7->C7_FILENT) + "' AND "
					EndIf
					cQuery += "D1_PEDIDO='" + cPedido          + "' AND "
					cQuery += "D_E_L_E_T_=' ' "
					cQuery += "GROUP BY D1_FILIAL,D1_DOC,D1_SERIE,D1_FORNECE,D1_LOJA,D1_TIPO,D1_PEDIDO "
					cQuery += "ORDER BY D1_FILIAL,D1_DOC,D1_SERIE,D1_FORNECE,D1_LOJA,D1_TIPO,D1_PEDIDO"

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

					oTree:TreeSeek( Pad( "SC7-" + cNumPed , 50 )+cTreeID )

					cImageSD1 := MaEntImage( "SF1", 1 )
					(cAliasQry) -> (dbGoTop())
					While !( cAliasQry )->( Eof() )

						MATRKSF1( ( cAliasQry )->D1_FILIAL + ( cAliasQry )->D1_DOC + ( cAliasQry )->D1_SERIE + ( cAliasQry )->D1_FORNECE + ( cAliasQry )->D1_LOJA + ( cAliasQry )->D1_TIPO + ( cAliasQry )->D1_PEDIDO, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
						oTree:TreeSeek( Pad( "SC7-" + cNumPed , 50 )+cTreeID )

						( cAliasQry )->( dbSkip() )
					End
				Else
					cQuery += "SELECT D1_DOC,D1_SERIE,D1_FORNECE,D1_LOJA,D1_TIPO "
					cQuery += "FROM " + RetSqlName( "SD1" ) + " "
					cQuery += "WHERE "
					cQuery += "D1_FILIAL='" + xFilial( "SD1" ) + "' AND "
					cQuery += "D1_PEDIDO='" + cPedido          + "' AND "
					cQuery += "D_E_L_E_T_=' ' "
					cQuery += "GROUP BY D1_DOC,D1_SERIE,D1_FORNECE,D1_LOJA,D1_TIPO "
					cQuery += "ORDER BY D1_DOC,D1_SERIE,D1_FORNECE,D1_LOJA,D1_TIPO"

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

					oTree:TreeSeek( Pad( "SC7-" + cNumPed, 50 )+cTreeID )

					cImageSD1 := MaEntImage( "SF1", 1 )
					(cAliasQry) -> (dbGoTop())
					While !( cAliasQry )->( Eof() )

						MATRKSF1( ( cAliasQry )->D1_DOC + ( cAliasQry )->D1_SERIE + ( cAliasQry )->D1_FORNECE + ( cAliasQry )->D1_LOJA + ( cAliasQry )->D1_TIPO, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
						oTree:TreeSeek( Pad( "SC7-" + cNumPed, 50 )+cTreeID )

						( cAliasQry )->( dbSkip() )
					End
				 EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Exclui a area de trabalho da query                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea( cAliasQry )
				dbCloseArea()

				dbSelectArea( "SD1" )

			EndIf

		EndIf

	EndIf

	nLevel--
EndIf

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkCN9  ³ Autor ³ Sergio Silveira       ³ Data ³22/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de cabecalho do contrato                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkCNA( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Exibe itens                                       ³±±
±±³          ³ ExpN3 -> Tipo 1-Pedido / 2-Autorizacao de entrega          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkCN9( cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo, cFilCtr )

LOCAL cContrato := ""
LOCAL cRevisa   := ""
Local lFixo     := .T.
Local lNFixo    := .F.
Local aPlan 	:= {}
Local nPlan		:= 0

LOCAL cImageCN9 := ""

LOCAL cQuery    := ""
LOCAL cAliasQry := ""

DEFAULT nMaxLevel 	:= 1000000
DEFAULT lItem     	:= .T.
DEFAULT nTipo     	:= 1
DEFAULT cTreeID   	:= "000001"
Default cFilCtr		:= cFilAnt

CN9->( DbSetOrder( 1 ) )
If CN9->( DbSeek( xFilial( "CN9", cFilCtr) + cKey ) )

	cContrato := Left( cKey, Len( CN9->CN9_NUMERO ) )
	cRevisa   := SubStr( cKey, Len( CN9->CN9_NUMERO ) + 1, Len( CN9->CN9_REVISA ) )

	CNA->( DbSetOrder(1) )
	If CNA->( dbSeek( xFilial("CNA", cFilCtr) + cContrato + cRevisa ) )
		lFixo := Cn300RetSt('FIXO',0,CNA->CNA_NUMERO,cContrato,CN9->CN9_FILCTR,.F.) .OR. Cn300RetSt('SEMIPROD',0,CNA->CNA_NUMERO,cContrato,CN9->CN9_FILCTR,.F.)
		lNFixo := !lFixo
	Endif

	cImageCN9 := MaEntImage( "CN9", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		If !oTree:AddItem( Pad( STR0107 + cContrato + "/" + cRevisa + ;  // "Contrato / Revisao - "
			cAddString, 100 ), Pad( "CN9-" + cKey, 50 )+cTreeID,cImageCN9,cImageCN9,,,nLevel)
            oTree:TreeSeek( Pad( "CN9-" + cKey, 50 )+cTreeID )

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta as planilhas deste contrato                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			If lFixo
				CNB->( DbSetOrder( 1 ) )

				cQuery += "SELECT CNB_FILIAL,CNB_CONTRA,CNB_REVISA,CNB_NUMERO,CNB_ITEM,CNB_NUMSC,CNB_ITEMSC "
				cQuery += "FROM " + RetSqlName( "CNB" ) + " "
				cQuery += "WHERE "
				cQuery += "CNB_FILIAL='" + xFilial( "CNB" , cFilCtr) + "' AND "
				cQuery += "CNB_CONTRA='" + cContrato        + "' AND "
				cQuery += "CNB_REVISA='" + cRevisa          + "' AND "
				cQuery += "D_E_L_E_T_=' ' "
				cQuery += "ORDER BY " + SqlOrder( CNB->( IndexKey() ) )

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

                oTree:TreeSeek( Pad( "CN9-" + cKey, 50 )+cTreeID )

				(cAliasQry) -> (dbGoTop())
				While !( cAliasQry )->( Eof() )

					If ( nPlan := aScan( aPlan, { |x| x == ( cAliasQry )->CNB_NUMERO } ) ) = 0
						aAdd( aPlan, ( cAliasQry )->CNB_NUMERO )
					Endif

					If !Empty(( cAliasQry )->CNB_NUMSC) .And. !FwIsInCallStack("MATRKSC1")
						If !lFilEdt //Valida se tem edital no Tracker ou apenas Contrato
							MATRKSC1(xFilial('SC1', cFilCtr)+(cAliasQry)->(CNB_NUMSC+CNB_ITEMSC),@oTree, ,@nLevel, nMaxLevel, lItem,cTreeID )
						Else
							MATRKSC1(xFilial('SC1', RetFilSC7() )+(cAliasQry)->(CNB_NUMSC+CNB_ITEMSC),@oTree, ,@nLevel, nMaxLevel, lItem,cTreeID )
						EndIf
					Else
						MATRKCNB((cAliasQry)->(CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM), @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					EndIf
					oTree:TreeSeek( Pad( "CN9-" + cKey, 50 )+cTreeID )
					( cAliasQry )->( dbSkip() )
				End

				dbSelectArea( cAliasQry )
				dbCloseArea()

			Endif

			If lNFixo			

				cQuery := "SELECT CNE_CONTRA,CNE_REVISA,CNE_NUMERO,CNE_NUMMED,CNE_ITEM, CND_FILCTR"
				cQuery += " FROM " + RetSqlName( "CNE" ) + " CNE"
				cQuery += " INNER JOIN " + RetSqlName( "CND" ) + " CND ON(CND_FILIAL = '"+ xFilial("CND") +"' AND CNE_CONTRA = CND_CONTRA AND CNE_REVISA = CND_REVISA AND CNE_NUMMED = CND_NUMMED AND CND.D_E_L_E_T_=' ')"
				cQuery += " WHERE"
				cQuery += " CNE_FILIAL='" + xFilial( "CNE" ) + "'"
				cQuery += " AND CNE_CONTRA='" + cContrato        + "'"
				cQuery += "	AND CNE_REVISA='" + cRevisa          + "'"
				cQuery += " AND CNE.D_E_L_E_T_=' ' "
				For nPlan := 1 To Len(aPlan)
					cQuery += " AND CNE_NUMERO <> '" + aPlan[nPlan] + "'"
				Next
				cQuery += "ORDER BY " + SqlOrder( CNE->( IndexKey() ) )

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

				oTree:TreeSeek( Pad( "CN9-" + cKey, 50 )+cTreeID )

				(cAliasQry) -> (dbGoTop())
				While !( cAliasQry )->( Eof() )

					MATRKCNE( ( cAliasQry )->(CND_FILCTR + CNE_CONTRA + CNE_REVISA + CNE_NUMERO + CNE_NUMMED + CNE_ITEM), @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					oTree:TreeSeek( Pad( "CN9-" + cKey, 50 )+cTreeID )

					( cAliasQry )->( dbSkip() )

				End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()
			Endif

			If lFixo
				dbSelectArea( "CNB" )
			Else
				dbSelectArea( "CNE" )
			EndIf

		EndIf

	EndIf

	nLevel--
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkCN9H ³ Autor ³ Sergio Silveira       ³ Data ³22/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de cabecalho do contrato ( estrut. header )³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkCN9H( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Exibe itens                                       ³±±
±±³          ³ ExpN3 -> Tipo 1-Pedido / 2-Autorizacao de entrega          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkCN9H( cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo )

LOCAL cContrato := ""
LOCAL cRevisa   := ""
LOCAL lFixo     := .T.
Local lNFixo    := .F.
Local aPlan 	:= {}
Local nPlan		:= 0

LOCAL cImageCN9 := ""

LOCAL cQuery    := ""
LOCAL cAliasQry := ""

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT nTipo     := 1
DEFAULT cTreeID   := "000001"

CN9->( DbSetOrder( 1 ) )
If CN9->( DbSeek( xFilial( "CN9" ) + cKey ) )

	cContrato := Left( cKey, Len( CN9->CN9_NUMERO ) )
	cRevisa   := SubStr( cKey, Len( CN9->CN9_NUMERO ) + 1, Len( CN9->CN9_REVISA ) )

	CN1->( DbSetOrder(1) )
	If CN1->( DbSeek( xFilial("CN1") + CN9->CN9_TPCTO ) )
		lFixo := Empty( CN1->CN1_CTRFIX ) .OR. CN1->CN1_CTRFIX == "1"
	EndIf

	CNA->( DbSetOrder(1) )
	If CNA->( dbSeek( xFilial("CNA") + cContrato + cRevisa ) )
		lFixo := CN300RetSt("FIXO",2)
		lNFixo := !CN300RetSt("FIXO",1)
	Endif

	cImageCN9 := MaEntImage( "CN9", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		If !oTree:AddItem( Pad( STR0107 + cContrato + "/" + cRevisa + ;  // "Contrato / Revisao - "
			cAddString, 100 ), Pad( "N9H-" + cKey, 50 )+cTreeID,cImageCN9,cImageCN9,,,nLevel)
			oTree:TreeSeek( Pad( "N9H-" + cKey, 50 )+cTreeID )

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta as planilhas deste contrato                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			If lFixo
				CNA->( DbSetOrder( 1 ) )

				cQuery += "SELECT CNA_CONTRA,CNA_REVISA,CNA_NUMERO "
				cQuery += "FROM " + RetSqlName( "CNA" ) + " CNA "
				cQuery += "JOIN " + RetSqlName( "CNB" ) + " CNB ON "
				cQuery += "CNB_FILIAL='" + xFilial( "CNB" ) + "' AND "
				cQuery += "CNB_CONTRA = CNA_CONTRA AND "
				cQuery += "CNB_REVISA = CNA_REVISA AND "
				cQuery += "CNB_NUMERO = CNA_NUMERO AND "
				cQuery += "CNB.D_E_L_E_T_= ' ' "
				cQuery += "WHERE "
				cQuery += "CNA_FILIAL='" + xFilial( "CNA" ) + "' AND "
				cQuery += "CNA_CONTRA='" + cContrato        + "' AND "
				cQuery += "CNA_REVISA='" + cRevisa          + "' AND "
				cQuery += "CNA.D_E_L_E_T_= ' ' "
				cQuery += "ORDER BY " + SqlOrder( CNA->( IndexKey() ) )

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

				oTree:TreeSeek( Pad( "CN9-" + cKey, 50 )+cTreeID )

				(cAliasQry) -> (dbGoTop())
				While !( cAliasQry )->( Eof() )

					If ( nPlan := aScan( aPlan, { |x| x == ( cAliasQry )->CNA_NUMERO } ) ) = 0
						aAdd( aPlan, ( cAliasQry )->CNA_NUMERO )
					Endif

					MATRKCNA( ( cAliasQry )->CNA_CONTRA + ( cAliasQry )->CNA_REVISA + ( cAliasQry )->CNA_NUMERO, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					oTree:TreeSeek( Pad( "N9H-" + cKey, 50 )+cTreeID )

					( cAliasQry )->( dbSkip() )

				End

				dbSelectArea( cAliasQry )
				dbCloseArea()

			Endif

			If lNFixo

				CND->( DbSetOrder( 1 ) )

				cQuery := " "
				cQuery += "SELECT CND_CONTRA,CND_REVISA,CND_NUMERO,CND_NUMMED "
				cQuery += "FROM " + RetSqlName( "CND" ) + " "
				cQuery += "WHERE "
				cQuery += "CND_FILIAL='" + xFilial( "CND" ) + "' AND "
				cQuery += "CND_CONTRA='" + cContrato        + "' AND "
				cQuery += "CND_REVISA='" + cRevisa          + "' AND "
				For nPlan := 1 To Len(aPlan)
					cQuery += "CND_NUMERO <> '" + aPlan[nPlan] + "' AND "
				Next
				cQuery += "D_E_L_E_T_=' ' "
				cQuery += "ORDER BY " + SqlOrder( CND->( IndexKey() ) )

				cQuery := ChangeQuery( cQuery )

				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

				oTree:TreeSeek( Pad( "CN9-" + cKey, 50 )+cTreeID )

				(cAliasQry) -> (dbGoTop())
				While !( cAliasQry )->( Eof() )

					MATRKCND( ( cAliasQry )->CND_CONTRA + ( cAliasQry )->CND_REVISA + ( cAliasQry )->CND_NUMERO + ( cAliasQry )->CND_NUMMED, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					oTree:TreeSeek( Pad( "N9H-" + cKey, 50 )+cTreeID )

					( cAliasQry )->( dbSkip() )

				End

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Exclui a area de trabalho da query                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea( cAliasQry )
				dbCloseArea()
			EndIf

			If lFixo
				dbSelectArea( "CNA" )
			Else
				dbSelectArea( "CND" )
			EndIf

		EndIf

	EndIf

	nLevel--
EndIf

Return



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkCNA  ³ Autor ³ Sergio Silveira       ³ Data ³22/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de cabecalho de planilhas                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkCNA( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Exibe itens                                       ³±±
±±³          ³ ExpN3 -> Tipo 1-Pedido / 2-Autorizacao de entrega          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkCNA( cPlanilha, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo )

LOCAL cContrato := ""
LOCAL cRevisa   := ""
LOCAL cNumero   := ""
LOCAL cImageCNA := ""
Local nTamFil 	:= TamSx3('CND_FILIAL')[1] +1
Local nTamContra:= nTamFil 		+ TamSx3('CND_CONTRA')[1]
Local nTamRevisa:= nTamContra 	+ TamSx3('CND_REVISA')[1]
Local cFilCtr	:= ""

LOCAL cQuery    := ""
LOCAL cAliasQry := ""

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT nTipo     := 1
DEFAULT cTreeID   := "000001"

CNA->( DbSetOrder( 1 ) )
If CNA->( DbSeek( cPlanilha ) )

	cFilCtr   := ExtraiStr(cPlanilha, 1, FwSizeFilial())
	cContrato := Substr(cPlanilha,nTamFil, 	TamSx3('CNE_CONTRA')[1])
	cRevisa   := Substr(cPlanilha,nTamContra,TamSx3('CNE_REVISA')[1])
	cNumero   := Substr(cPlanilha,nTamRevisa,TamSx3('CNE_NUMMED')[1])

	
	cImageCNA := MaEntImage( "CNA", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		If !oTree:AddItem( Pad( STR0108 + cContrato + "/" + cRevisa + "/" + cNumero + ;  // "Planilha : Contrato / Revisao / Numero - "
			cAddString, 100 ), Pad( "CNA-" + cPlanilha, 50 )+cTreeID,cImageCNA,cImageCNA,,,nLevel)
			oTree:TreeSeek( Pad( "CNA-" + cPlanilha, 50 )+cTreeID )

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os itens de notas fiscais deste pedido / item       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			CND->( DbSetOrder( 1 ) )

			cQuery += "SELECT CND_CONTRA,CND_REVISA,ISNULL(CXN.CXN_NUMPLA,CND.CND_NUMERO) AS CND_NUMERO,CND_NUMMED "
			cQuery += "FROM " + RetSqlName( "CND" ) + " CND "

			cQuery += " LEFT JOIN "
			cQuery += 	RetSqlName("CXN") + " CXN  "
			cQuery += " ON "
			cQuery += " CXN.CXN_CONTRA = CND.CND_CONTRA AND"
			cQuery += " CXN.CXN_REVISA = CND.CND_REVISA AND"
			cQuery += " CXN.CXN_NUMMED = CND.CND_NUMMED AND"
			cQuery += " CXN.CXN_CHECK  = 'T' AND"
			cQuery += " CXN.D_E_L_E_T_ = ' ' "

			cQuery += "WHERE "
			cQuery += "CND.CND_FILIAL='" + xFilial("CND") + "' AND "
			cQuery += "CND.CND_CONTRA='" + cContrato        + "' AND "
			cQuery += "CND.CND_REVISA='" + cRevisa          + "' AND "
			cQuery += "CND.D_E_L_E_T_=' ' "
			cQuery += "ORDER BY " + SqlOrder( CND->( IndexKey() ) )


			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			//oTree:TreeSeek( Pad( "CNA-" + cPlanilha, 50 )+cTreeID )

			(cAliasQry) -> (dbGoTop())
			While !( cAliasQry )->( Eof() )

				MATRKCND( ( cAliasQry )->CND_CONTRA + ( cAliasQry )->CND_REVISA + ( cAliasQry )->CND_NUMERO + ( cAliasQry )->CND_NUMMED, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
				oTree:TreeSeek( Pad( "CNA-" + cPlanilha, 50 )+cTreeID )

				( cAliasQry )->( dbSkip() )

			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

			dbSelectArea( "CNA" )

		EndIf

	EndIf

	nLevel--
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaTrkCND  ³ Autor ³ Sergio Silveira       ³ Data ³22/03/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas de cabecalho de planilhas                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MaTrkCND( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Exibe itens                                       ³±±
±±³          ³ ExpN3 -> Tipo 1-Pedido / 2-Autorizacao de entrega          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaTrkCND( cMedicao, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo )

LOCAL cContrato := ""
LOCAL cRevisa   := ""
LOCAL cNumero   := ""
LOCAL cPlanilha := ""
LOCAL cImageCND := ""
LOCAL cQuery    := ""
LOCAL cAliasQry := ""
LOCAl lFilEnt	:= TRKFILENT()
LOCAL cEspCtr   := ""

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT nTipo     := 1
DEFAULT cTreeID   := "000001"

cContrato := Left( cMedicao, Len( CND->CND_CONTRA ) )
cRevisa   := SubStr( cMedicao, Len( CND->CND_CONTRA ) + 1, Len( CND->CND_REVISA ) )
cPlanilha := SubStr( cMedicao, Len( CND->CND_CONTRA ) + Len( CND->CND_REVISA ) + 1, Len( CND->CND_NUMERO ) )
cNumero   := Right( cMedicao, Len( CND->CND_NUMMED ) )

CND->( DbSetOrder( 7 ) )
If CND->( DbSeek( xFilial( "CND" ) + cContrato + cRevisa + cNumero   ) )

	cImageCND := MaEntImage( "CND", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

		If !oTree:AddItem( Pad( STR0109 + cNumero + ;  // "Medicao - "
			cAddString, 100 ), Pad( "CND-" + xFilial("CND") + cMedicao, 50 )+cTreeID,cImageCND,cImageCND,,,nLevel)
			oTree:TreeSeek( Pad( "CND-" + xFilial("CND") + cMedicao, 50 )+cTreeID )

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta os pedidos de compra desta medicao                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			cAliasQry := GetNextAlias()

			cQuery := ""

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica especie da medicao compra / venda                   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cEspCtr := Posicione("CN9", 1, xFilial("CN9",CND->CND_FILCTR)+CND->CND_CONTRA+CND->CND_REVISA ,"CN9_ESPCTR")
			
			If cEspCtr == '1' 
			
				If lFilEnt
					cQuery += "SELECT C7_FILENT,C7_NUM "					
	            Else
					cQuery += "SELECT C7_NUM "
                EndIf
				cQuery += "FROM " + RetSqlName( "SC7" ) + " "
				cQuery += "WHERE "
				cQuery += "C7_FILIAL='"  + xFilial( "SC7" ) + "' AND "
				cQuery += "C7_PLANILH='" + cPlanilha        +"' AND "
				cQuery += "C7_MEDICAO='" + cNumero          + "' AND "
				cQuery += "D_E_L_E_T_=' ' "

				If lFilEnt
					cQuery += "GROUP BY C7_NUM,C7_FILENT "
				Else 
					cQuery += "ORDER BY C7_NUM"
				EndIf 

   		Else

				SC5->( DbSetOrder( 1 ) )

				cQuery += "SELECT C5_NUM "
				cQuery += "FROM " + RetSqlName( "SC5" ) + " "
				cQuery += "WHERE "
				cQuery += "C5_FILIAL='"  + xFilial( "SC5" ) + "' AND "
				cQuery += "C5_MDPLANI='" + cPlanilha        + "' AND "
				cQuery += "C5_MDNUMED='" + cNumero          + "' AND "
				cQuery += "D_E_L_E_T_=' ' "
				cQuery += "ORDER BY C5_NUM"

			EndIf

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

			oTree:TreeSeek( Pad( "CND-" + cMedicao, 50 )+cTreeID )

			cImageCND := MaEntImage( "CND", 1 )

			If lFilEnt
				(cAliasQry) -> (dbGoTop())
				While !( cAliasQry )->( Eof() )

					If cEspCtr == "1"
						MATRKSC7H( ( cAliasQry )->C7_FILENT + ( cAliasQry )->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					Else
						MATRKSC5( ( cAliasQry )->C5_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					EndIf
					oTree:TreeSeek( Pad( "CND-" + cMedicao, 50 )+cTreeID )

					( cAliasQry )->( dbSkip() )

				End
			Else
				(cAliasQry) -> (dbGoTop())
				While !( cAliasQry )->( Eof() )

					If cEspCtr == "1"
						MATRKSC7H( ( cAliasQry )->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					Else
						MATRKSC5( ( cAliasQry )->C5_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					EndIf
					oTree:TreeSeek( Pad( "CND-" + cMedicao, 50 )+cTreeID )

					( cAliasQry )->( dbSkip() )

				End
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( cAliasQry )
			dbCloseArea()

		

		EndIf

	EndIf

	nLevel--
EndIf

Return

//==============================================================================================================================
/*/{Protheus.doc} MaTrkCND21() - Tracker da nova medição - Medições
@Param	
@author Israel.Escorizza 
@since 	26/03/2018 
@return Nil
/*/
//==============================================================================================================================
Function MaTrkCND21(cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
Local aArea		:= GetArea() 
Local aAreaCND	:= CND->(GetArea())
Local aSaveLine	:= FWSaveRows()

Local lFilEnt	:= TRKFILENT()

Local cImageCND := MaEntImage("CND",1)
Local cAliasCND := ""
Local cQuery 	:= ""

DEFAULT nMaxLevel := 1000000
DEFAULT nTipo     := 1
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

CND->(dbSetOrder(7)) //- CND_FILIAL+CND_CONTRA+CND_REVISA+CND_NUMMED
If CND->(DbSeek(cKey))
	nLevel++
	If nLevel <= nMaxLevel
		cAddString := If(ValType(cAddString) == "C",cAddString,"")
		If !oTree:AddItem(Pad(STR0129+CND->CND_NUMMED+cAddString,100),Pad("CND-"+cKey,100)+cTreeID,cImageCND,cImageCND,,,nLevel)
			
			cQuery += " SELECT "
			cQuery += " CXN.CXN_NUMPLA "
			cQuery += " FROM "
			cQuery += 	RetSqlName("CND") + " CND  "
		
			cQuery += " INNER JOIN "
			cQuery += 	RetSqlName("CXN") + " CXN  "
			cQuery += " ON "
			cQuery += " CXN.CXN_CONTRA = CND.CND_CONTRA AND"
			cQuery += " CXN.CXN_REVISA = CND.CND_REVISA AND"
			cQuery += " CXN.CXN_NUMMED = CND.CND_NUMMED AND"
			cQuery += " CXN.CXN_CHECK  = 'T' AND"
			cQuery += " CXN.D_E_L_E_T_ = '' "
		
			cQuery += " WHERE "
			If lFilEnt
				cQuery += " CND.CND_FILIAL = '" + CND->CND_FILIAL +"' AND "
			Else
				cQuery += " CND.CND_FILIAL = '" + xFilial('CND') + "' AND "
			EndIf
			cQuery += " CND.CND_CONTRA = '" + CND->CND_CONTRA +"' AND "
			cQuery += " CND.CND_REVISA = '" + CND->CND_REVISA +"' AND "
			cQuery += " CND.CND_NUMMED = '" + CND->CND_NUMMED +"' AND "
			cQuery += " CND.D_E_L_E_T_ = '' "
		
			cQuery := ChangeQuery( cQuery )
			cAliasCND := GetNextAlias()
			dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasCND, .F., .T. )

			While !(cAliasCND)->(Eof())
				oTree:TreeSeek(Pad("CND-"+cKey,100)+cTreeID)
				MaTrkCXN21(cKey+(cAliasCND)->CXN_NUMPLA, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
				(cAliasCND)->(dbSkip())
			EndDo			
			(cAliasCND)->(dbCloseArea())
		EndIf
	EndIf
	nLevel--
EndIf

FWRestRows(aSaveLine)
RestArea(aAreaCND)    
RestArea(aArea)
Return

//==============================================================================================================================
/*/{Protheus.doc} MaTrkCXN21() - Tracker da nova medição - Planilhas
@Param	
@author Israel.Escorizza 
@since 	26/03/2018 
@return Nil
/*/
//==============================================================================================================================
Function MaTrkCXN21(cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
Local aArea		:= GetArea() 
Local aAreaCXN	:= CXN->(GetArea())
Local aSaveLine	:= FWSaveRows()

Local lFilEnt	:= TRKFILENT()

Local cImageCXN := MaEntImage("CNA",1)
Local cAliasCXN := ""
Local cQuery 	:= ""


DEFAULT nMaxLevel := 1000000
DEFAULT nTipo     := 1
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

CXN->(dbSetOrder(1)) //- CXN_FILIAL+CXN_CONTRA+CXN_REVISA+CXN_NUMMED+CXN_NUMPLA
If CXN->(DbSeek(cKey))
	nLevel++
	If nLevel <= nMaxLevel
		cAddString := If(ValType(cAddString) == "C", cAddString, "")
		If !oTree:AddItem(Pad(STR0130+CXN->CXN_NUMPLA +cAddString,100),Pad("CXN-"+cKey,100)+cTreeID,cImageCXN,cImageCXN,,,nLevel)
					
			cQuery += " SELECT "
			cQuery += " CNE.CNE_ITEM "
			cQuery += " FROM "
	
			cQuery += 	RetSqlName("CXN") + " CXN  "
			cQuery += " INNER JOIN "
			cQuery += 	RetSqlName("CNE") + " CNE  "
			cQuery += " ON "
			cQuery += " CNE.CNE_CONTRA = CXN.CXN_CONTRA AND"
			cQuery += " CNE.CNE_REVISA = CXN.CXN_REVISA AND"
			cQuery += " CNE.CNE_NUMMED = CXN.CXN_NUMMED AND"
			cQuery += " CNE.CNE_NUMERO = CXN.CXN_NUMPLA AND"
			cQuery += " CNE.D_E_L_E_T_ = '' "
			
			cQuery += " WHERE "
			If lFilEnt
				cQuery += " CXN.CXN_FILIAL = '" + CXN->CXN_FILIAL +"' AND "
			Else
				cQuery += " CXN.CXN_FILIAL = '" + xFilial('CXN') + "' AND "
			EndIf
			cQuery += " CXN.CXN_CONTRA = '" + CXN->CXN_CONTRA +"' AND "
			cQuery += " CXN.CXN_REVISA = '" + CXN->CXN_REVISA +"' AND "
			cQuery += " CXN.CXN_NUMMED = '" + CXN->CXN_NUMMED +"' AND "
			cQuery += " CXN.CXN_NUMPLA = '" + CXN->CXN_NUMPLA +"' AND "
			cQuery += " CXN.D_E_L_E_T_ = '' "
			
			cQuery := ChangeQuery( cQuery )
			cAliasCXN := GetNextAlias()
			dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasCXN, .F., .T. )
			
			While !(cAliasCXN)->(Eof())
				oTree:TreeSeek(Pad("CXN-"+cKey,100)+cTreeID)
				MaTrkCNE21(cKey+(cAliasCXN)->CNE_ITEM, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
				(cAliasCXN)->(dbSkip())
			EndDo
			(cAliasCXN)->(dbCloseArea())
		EndIf
	EndIf
	nLevel--
EndIf

FWRestRows(aSaveLine)
RestArea(aAreaCXN)    
RestArea(aArea)
Return

//==============================================================================================================================
/*/{Protheus.doc} MaTrkCNE21() - Tracker da nova medição - Itens
@Param	
@author Israel.Escorizza 
@since 	26/03/2018 
@return Nil
/*/
//==============================================================================================================================
Function MaTrkCNE21(cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
Local aArea		:= GetArea() 
Local aAreaCNE	:= CNE->(GetArea())
Local aSaveLine	:= FWSaveRows()

Local lFilEnt	:= TRKFILENT()

Local nTamFil 	:= Iif(lFilEnt,TamSx3('CND_FILIAL')[1],0)+1
Local nTamContra:= nTamFil 		+ TamSx3('CND_CONTRA')[1]
Local nTamRevisa:= nTamContra 	+ TamSx3('CND_REVISA')[1]
Local nTamMed	:= nTamRevisa	+ TamSx3('CND_NUMMED')[1]
Local nTamPlan	:= nTamMed		+ TamSx3('CXN_NUMPLA')[1]

Local cCtrFil 	:= ""
Local cContra   := ""
Local cCtrRev   := ""
Local cMedNum   := ""
Local cNumPla	:= ""
Local cNumItem	:= ""

Local cFornec	:= ""
Local cClient	:= ""
Local cParcel	:= ""

Local cQuery	:= ""
Local cAliasQry	:= ""
Local cAliasQry2:= ""

Local cImageCNE := MaEntImage("CNE",1)
Local cImageSE1 := MaEntImage("SE1",1)
Local cImageSE2 := MaEntImage("SE2",1)

DEFAULT nMaxLevel := 1000000
DEFAULT nTipo     := 1
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

cCtrFil		:=Iif(lFilEnt,Substr(cKey,1,TamSx3('CND_FILIAL')[1]),xFilial('CND'))
cContra		:= Substr(cKey,nTamFil,		TamSx3('CND_CONTRA')[1])
cCtrRev		:= Substr(cKey,nTamContra,	TamSx3('CND_REVISA')[1])
cMedNum		:= Substr(cKey,nTamRevisa,	TamSx3('CND_NUMMED')[1])
cNumPla		:= Substr(cKey,nTamMed,		TamSx3('CXN_NUMPLA')[1])
cNumItem	:= Substr(cKey,nTamPlan,	TamSx3('CNE_ITEM')[1])

nLevel++
If nLevel <= nMaxLevel
	cAddString := If(ValType(cAddString) == "C", cAddString, "")
		
	If !oTree:AddItem(Pad(STR0131+cNumItem+cAddString,100),Pad("CNE-"+cKey,100)+cTreeID,cImageCNE,cImageCNE,,,nLevel)
		oTree:TreeSeek(Pad("CNE-"+cKey,100)+cTreeID )

		cQuery	+= " SELECT "
		cQuery	+= " CNE.CNE_NUMERO, "
		cQuery	+= " CNE.CNE_PEDIDO, "
		cQuery	+= " CNE.CNE_ITEM, "
		cQuery	+= " CNE.CNE_PEDTIT, "
		cQuery  += " CXN.CXN_PARCEL, "
		cQuery	+= " CXN.CXN_CLIENT, "
		cQuery	+= " CXN.CXN_LJCLI, "
		cQuery	+= " CXN.CXN_FORNEC, "
		cQuery	+= " CXN.CXN_LJFORN "

		cQuery	+= " FROM "+ RetSqlName('CNE') +" CNE  "
		cQuery	+= " 	 INNER JOIN "+RetSqlName('CXN')+" CXN ON "
		cQuery	+= " 	 CXN.CXN_FILIAL = CNE.CNE_FILIAL AND "
		cQuery	+= " 	 CXN.CXN_CONTRA = CNE.CNE_CONTRA AND "
		cQuery	+= " 	 CXN.CXN_REVISA = CNE.CNE_REVISA AND "
		cQuery	+= " 	 CXN.CXN_NUMMED = CNE.CNE_NUMMED AND "
		cQuery  += "	 CXN.CXN_NUMPLA = CNE.CNE_NUMERO AND "
		cQuery	+= " 	 CXN.D_E_L_E_T_ = '' "
	 
		cQuery	+= " WHERE "
		cQuery	+= " CNE.CNE_FILIAL = '"+cCtrFil+"' AND "
		cQuery	+= " CNE.CNE_CONTRA = '"+cContra+"' AND "
		cQuery	+= " CNE.CNE_REVISA = '"+cCtrRev+"' AND "
		cQuery	+= " CNE.CNE_NUMMED = '"+cMedNum+"' AND "
		cQuery	+= " CNE.CNE_NUMERO = '"+cNumPla+"' AND "
		cQuery	+= " CNE.CNE_ITEM   = '"+cNumItem+"' AND "
		cQuery	+= " CNE.D_E_L_E_T_ = ''"

		cAliasQry 	:= GetNextAlias()
		cQuery 		:= ChangeQuery( cQuery )
		dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

		cFornec := (cAliasQry)->CXN_FORNEC 
		cClient := (cAliasQry)->CXN_CLIENT
		cLoja	:= AllTrim((cAliasQry)->CXN_LJCLI+(cAliasQry)->CXN_LJFORN)
		cParcel := (cAliasQry)->CXN_PARCEL

		If (cAliasQry)->CNE_PEDTIT != '2'	//- Gera pedido de Compra
			If !Empty(cFornec)				//- Pedido de Compra
				cQuery := " SELECT "
				cQuery += " SC7.C7_NUM,	"
				cQuery += " SC7.C7_ITEM	"
				cQuery += " FROM "+ RetSQLName("SC7") +" SC7 "
				cQuery += " WHERE "
				cQuery += " SC7.C7_FILIAL	= '"+xFilial("SC7") + "' AND "
				cQuery += " SC7.C7_CONTRA 	= '"+cContra+"'  AND "
				cQuery += " SC7.C7_CONTREV 	= '"+cCtrRev+"'	 AND "
				cQuery += " SC7.C7_FORNECE  = '"+cFornec+"'	 AND "
				cQuery += " SC7.C7_LOJA  	= '"+cLoja+"'	 AND "
				cQuery += " SC7.C7_MEDICAO 	= '"+cMedNum+"'	 AND "
				cQuery += " SC7.C7_PLANILH	= '"+cNumPla+"'	 AND "
				cQuery += " SC7.C7_ITEMED 	= '"+cNumItem+"' AND "
				cQuery += " SC7.D_E_L_E_T_ 	= ' '"
				
				cAliasQry2 	:= GetNextAlias()
				cQuery 		:= ChangeQuery( cQuery )
				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )
				
				If !(cAliasQry2)->(Eof())
									
					If lFilEnt
						MATRKSC7H(xFilial('SC7')+(cAliasQry2)->(C7_NUM+C7_ITEM), @oTree, , @nLevel, nMaxLevel,.F.,cTreeID, 1 )
					Else
						MATRKSC7H((cAliasQry2)->(C7_NUM+C7_ITEM), @oTree, , @nLevel, nMaxLevel,.F.,cTreeID, 1 )
					EndIf					

				EndIf
				( cAliasQry2 )->( dbCloseArea() )

			Else							//- Pedido de Venda
				cQuery := " SELECT "
				cQuery += " SC6.C6_NUM,	"
				cQuery += " SC6.C6_ITEM	"
				cQuery += " FROM "+ RetSQLName("SC5") + " SC5 "
				cQuery += " INNER JOIN "+ RetSQLName("SC6") + " SC6 ON "
				cQuery += " 	SC6.C6_FILIAL 	= SC5.C5_FILIAL AND "
				cQuery += " 	SC6.C6_NUM 		= SC5.C5_NUM 	AND"
				cQuery += "	 	SC6.C6_ITEMED 	= '"+( cAliasQry )->CNE_ITEM + "' AND "
				cQuery += "		SC5.D_E_L_E_T_ 	= ' '"	
				cQuery += " WHERE "
				cQuery += " SC5.C5_FILIAL = '"+ cCtrFil +"' 	AND "
				cQuery += " SC5.C5_MDCONTR 	= '"+ cContra +"' 	AND "
				cQuery += " SC5.C5_MDNUMED 	= '"+ cMedNum +"'	AND "
				cQuery += " SC5.C5_MDPLANI	= '"+ cNumPla +"'	AND
				cQuery += " SC5.D_E_L_E_T_ 	= ' '"
				
				cAliasQry2 	:= GetNextAlias()
				cQuery := ChangeQuery( cQuery )
				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )

				If !( cAliasQry2 )->(Eof()) //- Atualiza arvore do pedido de venda
					MATRKSC6(PadR((cAliasQry2)->(C6_NUM+C6_ITEM), Len(SC6->C6_NUM+SC6->C6_ITEM)), @oTree, , @nLevel, nMaxLevel,,cTreeID )
				EndIf
				( cAliasQry2 )->( dbCloseArea() )

			EndIf
		Else								//- Gera Titulo
			nLevel++
			If nLevel <= nMaxLevel
				If !Empty(cFornec)				//- Titulo a pagar
					cQuery := " SELECT "
					cQuery += " E2_FILIAL, "
					cQuery += " E2_PREFIXO, "
					cQuery += " E2_NUM, "
					cQuery += " E2_PARCELA, "
					cQuery += " E2_FORNECE, "
					cQuery += " E2_LOJA, "
					cQuery += " E2_TIPO "
					cQuery += " FROM "+ RetSQLName("SE2") + " SE2 "
					cQuery += " WHERE "
					cQuery += " SE2.E2_FILIAL  =  '"+ cCtrFil +"' 	AND "
					cQuery += " SE2.E2_MDCONTR =  '"+ cContra +"' 	AND "
					cQuery += " SE2.E2_MDREVIS =  '"+ cCtrRev +"' 	AND "
					cQuery += " SE2.E2_MDPLANI =  '"+ cNumPla +"' 	AND "
					cQuery += " SE2.E2_PREFIXO =  '"+ SuperGetMV("MV_CNPREMD",.F.,"MED") +"' AND"
					cQuery += " SE2.E2_FORNECE =  '"+ cFornec +"' 	AND "
					cQuery += " SE2.E2_LOJA    =  '"+ cLoja +"' 	AND "
					cQuery += " SE2.E2_ORIGEM  =  'CNTA121' 		AND "
					cQuery += " SE2.D_E_L_E_T_ = ' '"
					
					cAliasQry2 	:= GetNextAlias()
					cQuery := ChangeQuery( cQuery )
					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )
	
					If !( cAliasQry2 )->(Eof()) //- Atualiza arvore do pedido de venda
						dbSelectArea( cAliasQry2 )
						cKey := Pad( "SE2-" + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_FORNECE + E2_LOJA + E2_TIPO, 50 )
						If cPaisLoc<>"BRA"
							If !oTree:TreeSeek(cKey)
								If lFilEnt
									oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
									E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO + cAddString, 100 ),;
									Pad( "SE2-" + E2_FILIAL + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
								Else
									oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
									E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO + cAddString, 100 ),;
									Pad( "SE2-" + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
								EndIf
							Endif
						Else
							If lFilEnt
								oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
								E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO + cAddString, 100 ),;
								Pad( "SE2-" + E2_FILIAL + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
							Else
								oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
								E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO + cAddString, 100 ),;
								Pad( "SE2-" + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
							EndIf
						Endif
					EndIf
					( cAliasQry2 )->( dbCloseArea() )
					
				Else							//- Titulo a receber
					cQuery := " SELECT "
					cQuery += " E1_PREFIXO, "
					cQuery += " E1_NUM, "
					cQuery += " E1_PARCELA, "
					cQuery += " E1_CLIENTE, "
					cQuery += " E1_LOJA, "
					cQuery += " E1_TIPO "
					cQuery += " FROM "+ RetSQLName("SE1") + " SE1 "
					cQuery += " WHERE "
					cQuery += " SE1.E1_FILIAL  =  '"+ cCtrFil +"' 	AND "
					cQuery += " SE1.E1_MDCONTR =  '"+ cContra +"' 	AND "
					cQuery += " SE1.E1_MDREVIS =  '"+ cCtrRev +"' 	AND "
					cQuery += " SE1.E1_MEDNUME =  '"+ cMedNum +"' 	AND "
					cQuery += " SE1.E1_MDPLANI =  '"+ cNumPla +"' 	AND "
					cQuery += " SE1.E1_PREFIXO =  '"+ SuperGetMV("MV_CNPREMD",.F.,"MED") +"' AND"
					cQuery += " SE1.E1_CLIENTE =  '"+ cClient +"' 	AND "
					cQuery += " SE1.E1_LOJA    =  '"+ cLoja +"' 	AND "
					cQuery += " SE1.E1_ORIGEM  =  'CNTA121' 		AND "
					cQuery += " SE1.D_E_L_E_T_ = ' '"
					
					cAliasQry2 	:= GetNextAlias()
					cQuery := ChangeQuery( cQuery )
					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )
	
					If !( cAliasQry2 )->(Eof()) //- Atualiza arvore do pedido de venda
						dbSelectArea( cAliasQry2 )
						cKey := Pad( "SE1-" + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_CLIENTE + E1_LOJA + E1_TIPO, 50 )+cTreeID
						cTitulos:=E1_PREFIXO + E1_NUM + E1_PARCELA + E1_CLIENTE + E1_LOJA + E1_TIPO
						If aScan(aTitulos,{|x| x[1] == cTitulos })==0
							oTree:AddItem( Pad( STR0036 +; //"Titulo - Cliente/Loja/Prefixo/Numero/Parcela/Tipo - "
							E1_CLIENTE + "/" + E1_LOJA + "/" + E1_PREFIXO + "/" + E1_NUM + "/" + E1_PARCELA + "/" + E1_TIPO, 100 ),;
							Pad( "SE1-" + E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO, 50 )+cTreeID, cImageSE1 ,cImageSE1,,,nLevel)
						EndIf
					EndIf
					( cAliasQry2 )->( dbCloseArea() )
				EndIf
			EndIf
			nLevel--
		EndIf
	EndIf
EndIf
nLevel--

FWRestRows(aSaveLine)
RestArea(aAreaCNE)    
RestArea(aArea)
Return


//==============================================================================================================================
/*/{Protheus.doc} MaTrkCND20() - Tracker da nova medição - Medições
@Param	
@author Janaina.Jesus
@since 	26/10/2018 
@return Nil
/*/
//==============================================================================================================================
Function MaTrkCND20(cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
	Local aArea		:= GetArea() 
	Local aAreaCND	:= CND->(GetArea())
	Local aSaveLine	:= FWSaveRows()
	Local cImageCND := MaEntImage("CND",1)
	Local cFil       := ""
	Local cRev       := ""
	Local cMedicao   := ""
	Local cSeek := ""
	Local nComeco:= 0
	DEFAULT nMaxLevel := 1000000
	DEFAULT nTipo     := 1
	DEFAULT lItem     := .T.
	DEFAULT cTreeID   := "000001"
	
	CND->(dbSetOrder(7)) //- CND_FILIAL+CND_CONTRA+CND_REVISA+CND_NUMMED
	cSeek := xFilial("CND") + SubStr(cKey, FwSizeFilial() + 1)
	If CND->(DbSeek(cSeek))
		nLevel++
		If nLevel <= nMaxLevel
			cAddString := If(ValType(cAddString) == "C",cAddString,"")
			If !oTree:AddItem(Pad(STR0129+CND->CND_NUMMED+cAddString,100),Pad("CND-"+cKey,100)+cTreeID,cImageCND,cImageCND,,,nLevel)
				
				cFil	:= xFilial('CND')
				nComeco	:= FwSizeFilial() + 1			
				cContra := ExtraiStr(cKey,@nComeco,Len(CND->CND_CONTRA))			
				cRev	:= ExtraiStr(cKey,@nComeco,Len(CND->CND_REVISA)) 
				cMedicao:= ExtraiStr(cKey,@nComeco,Len(CND->CND_NUMMED))
				
				While ( CND->(!Eof() .And. CND_FILIAL+CND_CONTRA+CND_REVISA+CND_NUMMED == cSeek) )
					oTree:TreeSeek(Pad("CND-"+cKey,100)+cTreeID)
					MaTrkCXN20(cFil+cContra+cRev+CND->CND_NUMERO+cMedicao, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
					CND->(dbSkip())
				EndDo
			EndIf
		EndIf
		nLevel--
	EndIf
	
	FWRestRows(aSaveLine)
	RestArea(aAreaCND)    
	RestArea(aArea)
Return

//==============================================================================================================================
/*/{Protheus.doc} MaTrkCXN20() - Tracker da medição - Planilhas
@Param	
@author Janaina.Jesus
@since 	26/10/2018 
@return Nil
/*/
//==============================================================================================================================
Function MaTrkCXN20(cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
Local aArea		:= GetArea() 
Local aAreaCND	:= CND->(GetArea())
Local aSaveLine	:= FWSaveRows()

Local lFilEnt	:= TRKFILENT()

Local cImageCND := MaEntImage("CNA",1)
Local cAliasCND := ""
Local cQuery 	:= ""


DEFAULT nMaxLevel := 1000000
DEFAULT nTipo     := 1
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

CND->(dbSetOrder(1))
If CND->(DbSeek(cKey))
	nLevel++
	If nLevel <= nMaxLevel
		cAddString := If(ValType(cAddString) == "C", cAddString, "")
		If !oTree:AddItem(Pad(STR0130+CND->CND_NUMERO +cAddString,100),Pad("CXN-"+cKey,100)+cTreeID,cImageCND,cImageCND,,,nLevel)
					
			cQuery += " SELECT "
			cQuery += " CNE.CNE_ITEM "
			cQuery += " FROM "
	
			cQuery += 	RetSqlName("CND") + " CND  "
			cQuery += " INNER JOIN "
			cQuery += 	RetSqlName("CNE") + " CNE  "
			cQuery += " ON "
			cQuery += " CNE.CNE_FILIAL = CND.CND_FILIAL AND"
			cQuery += " CNE.CNE_CONTRA = CND.CND_CONTRA AND"
			cQuery += " CNE.CNE_REVISA = CND.CND_REVISA AND"
			cQuery += " CNE.CNE_NUMMED = CND.CND_NUMMED AND"
			cQuery += " CNE.CNE_NUMERO = CND.CND_NUMERO AND"
			cQuery += " CNE.D_E_L_E_T_ = '' "
			
			cQuery += " WHERE "
			If lFilEnt
				cQuery += " CND.CND_FILIAL = '" + CND->CND_FILIAL +"' AND "
			Else
				cQuery += " CND.CND_FILIAL = '" + xFilial('CND') + "' AND "
			EndIf
			cQuery += " CND.CND_CONTRA = '" + CND->CND_CONTRA +"' AND "
			cQuery += " CND.CND_REVISA = '" + CND->CND_REVISA +"' AND "
			cQuery += " CND.CND_NUMMED = '" + CND->CND_NUMMED +"' AND "
			cQuery += " CND.CND_NUMERO = '" + CND->CND_NUMERO +"' AND "
			cQuery += " CND.D_E_L_E_T_ = '' "
			
			cQuery := ChangeQuery( cQuery )
			cAliasCND := GetNextAlias()
			dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasCND, .F., .T. )
			
			While !(cAliasCND)->(Eof())
				oTree:TreeSeek(Pad("CXN-"+cKey,100)+cTreeID)
				MaTrkCNE20(cKey+(cAliasCND)->CNE_ITEM, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
				(cAliasCND)->(dbSkip())
			EndDo
			(cAliasCND)->(dbCloseArea())
		EndIf
	EndIf
	nLevel--
EndIf

FWRestRows(aSaveLine)
RestArea(aAreaCND)    
RestArea(aArea)
Return

//==============================================================================================================================
/*/{Protheus.doc} MaTrkCNE20() - Tracker da medição - Itens
@Param	
@author Janaina.Jesus
@since 	26/10/2018
@return Nil
/*/
//==============================================================================================================================
Function MaTrkCNE20(cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID, nTipo)
Local aArea		:= GetArea() 
Local aAreaCNE	:= CNE->(GetArea())
Local aSaveLine	:= FWSaveRows()

Local lFilEnt	:= TRKFILENT()

Local nTamFil 	:= Iif(lFilEnt,TamSx3('CND_FILIAL')[1],0)+1
Local nTamContra	:= nTamFil 	+ TamSx3('CND_CONTRA')[1]
Local nTamRevisa	:= nTamContra + TamSx3('CND_REVISA')[1]
Local nTamPlan	:= nTamRevisa	+ TamSx3('CXN_NUMPLA')[1]
Local nTamMed		:= nTamPlan	+ TamSx3('CND_NUMMED')[1]


Local cCtrFil 	:= ""
Local cContra   := ""
Local cCtrRev   := ""
Local cMedNum   := ""
Local cNumPla	:= ""
Local cNumItem	:= ""

Local cFornec	:= ""
Local cClient	:= ""
Local cParcel	:= ""

Local cQuery	:= ""
Local cAliasQry	:= ""
Local cAliasQry2:= ""

Local cImageCNE := MaEntImage("CNE",1)
Local cImageSE1 := MaEntImage("SE1",1)
Local cImageSE2 := MaEntImage("SE2",1)

DEFAULT nMaxLevel := 1000000
DEFAULT nTipo     := 1
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

cCtrFil		:= Iif(lFilEnt,Substr(cKey,1,TamSx3('CND_FILIAL')[1]),xFilial('CND'))
cContra		:= Substr(cKey,nTamFil,		TamSx3('CND_CONTRA')[1])
cCtrRev		:= Substr(cKey,nTamContra,	TamSx3('CND_REVISA')[1])
cNumPla		:= Substr(cKey,nTamRevisa,	TamSx3('CND_NUMERO')[1])
cMedNum		:= Substr(cKey,nTamPlan,		TamSx3('CND_NUMMED')[1])

cNumItem	 	:= Substr(cKey,nTamMed,	TamSx3('CNE_ITEM')[1])

nLevel++
If nLevel <= nMaxLevel
	cAddString := If(ValType(cAddString) == "C", cAddString, "")
		
	If !oTree:AddItem(Pad(STR0131+cNumItem+cAddString,100),Pad("CNE-"+cKey,100)+cTreeID,cImageCNE,cImageCNE,,,nLevel)
		oTree:TreeSeek(Pad("CNE-"+cKey,100)+cTreeID )

		cQuery	+= " SELECT "
		cQuery	+= " CNE.CNE_NUMERO, "
		cQuery	+= " CNE.CNE_PEDIDO, "
		cQuery	+= " CNE.CNE_ITEM, "
		cQuery	+= " CNE.CNE_PEDTIT, "
		cQuery  += " CND.CND_PARCEL, "
		cQuery	+= " CND.CND_CLIENT, "
		cQuery	+= " CND.CND_LOJACL, "
		cQuery	+= " CND.CND_FORNEC, "
		cQuery	+= " CND.CND_LJFORN "

		cQuery	+= " FROM "+ RetSqlName('CNE') +" CNE  "
		cQuery	+= " 	 INNER JOIN "+RetSqlName('CND')+" CND ON "
		cQuery	+= " 	 CND.CND_FILIAL = CNE.CNE_FILIAL AND "
		cQuery	+= " 	 CND.CND_CONTRA = CNE.CNE_CONTRA AND "
		cQuery	+= " 	 CND.CND_REVISA = CNE.CNE_REVISA AND "
		cQuery	+= " 	 CND.CND_NUMMED = CNE.CNE_NUMMED AND "
		cQuery  += "	 CND.CND_NUMERO = CNE.CNE_NUMERO AND "
		cQuery	+= " 	 CND.D_E_L_E_T_ = '' "
	 
		cQuery	+= " WHERE "
		cQuery	+= " CNE.CNE_FILIAL = '"+cCtrFil+"' AND "
		cQuery	+= " CNE.CNE_CONTRA = '"+cContra+"' AND "
		cQuery	+= " CNE.CNE_REVISA = '"+cCtrRev+"' AND "
		cQuery	+= " CNE.CNE_NUMMED = '"+cMedNum+"' AND "
		cQuery	+= " CNE.CNE_NUMERO = '"+cNumPla+"' AND "
		cQuery	+= " CNE.CNE_ITEM   = '"+cNumItem+"' AND "
		cQuery	+= " CNE.D_E_L_E_T_ = ''"

		cAliasQry 	:= GetNextAlias()
		cQuery 		:= ChangeQuery( cQuery )
		dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

		cFornec := (cAliasQry)->CND_FORNEC 
		cClient := (cAliasQry)->CND_CLIENT
		cLoja	:= AllTrim((cAliasQry)->CND_LOJACL+(cAliasQry)->CND_LJFORN)
		cParcel := (cAliasQry)->CND_PARCEL

		If (cAliasQry)->CNE_PEDTIT != '2'	//- Gera pedido de Compra
			If !Empty(cFornec)				//- Pedido de Compra
				cQuery := " SELECT "
				cQuery += " SC7.C7_NUM,	"
				cQuery += " SC7.C7_ITEM	"
				cQuery += " FROM "+ RetSQLName("SC7") +" SC7 "
				cQuery += " WHERE "
				cQuery += " SC7.C7_FILIAL	= '"+xFilial("SC7") + "' AND "
				cQuery += " SC7.C7_CONTRA 	= '"+cContra+"'  AND "
				cQuery += " SC7.C7_CONTREV 	= '"+cCtrRev+"'	 AND "
				cQuery += " SC7.C7_FORNECE  = '"+cFornec+"'	 AND "
				cQuery += " SC7.C7_LOJA  	= '"+cLoja+"'	 AND "
				cQuery += " SC7.C7_MEDICAO 	= '"+cMedNum+"'	 AND "
				cQuery += " SC7.C7_PLANILH	= '"+cNumPla+"'	 AND "
				cQuery += " SC7.C7_ITEMED 	= '"+cNumItem+"' AND "
				cQuery += " SC7.D_E_L_E_T_ 	= ' '"
				
				cAliasQry2 	:= GetNextAlias()
				cQuery 		:= ChangeQuery( cQuery )
				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )
				
				If !(cAliasQry2)->(Eof())
					If lFilEnt
						MATRKSC7H(xFilial('SC7')+(cAliasQry2)->(C7_NUM+C7_ITEM), @oTree, , @nLevel, nMaxLevel,.F.,cTreeID, 1 )
					Else
						MATRKSC7H((cAliasQry2)->(C7_NUM+C7_ITEM), @oTree, , @nLevel, nMaxLevel,.F.,cTreeID, 1 )
					EndIf
				EndIf
				( cAliasQry2 )->( dbCloseArea() )

			Else							//- Pedido de Venda
				cQuery := " SELECT "
				cQuery += " SC6.C6_NUM,	"
				cQuery += " SC6.C6_ITEM	"
				cQuery += " FROM "+ RetSQLName("SC5") + " SC5 "
				cQuery += " INNER JOIN "+ RetSQLName("SC6") + " SC6 ON "
				cQuery += " 	SC6.C6_FILIAL 	= SC5.C5_FILIAL AND "
				cQuery += " 	SC6.C6_NUM 		= SC5.C5_NUM 	AND"
				cQuery += "	 	SC6.C6_ITEMED 	= '"+( cAliasQry )->CNE_ITEM + "' AND "
				cQuery += "		SC5.D_E_L_E_T_ 	= ' '"	
				cQuery += " WHERE "
				cQuery += " SC5.C5_FILIAL = '"+ cCtrFil +"' 	AND "
				cQuery += " SC5.C5_MDCONTR 	= '"+ cContra +"' 	AND "
				cQuery += " SC5.C5_MDNUMED 	= '"+ cMedNum +"'	AND "
				cQuery += " SC5.C5_MDPLANI	= '"+ cNumPla +"'	AND
				cQuery += " SC5.D_E_L_E_T_ 	= ' '"
				
				cAliasQry2 	:= GetNextAlias()
				cQuery := ChangeQuery( cQuery )
				dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )

				If !( cAliasQry2 )->(Eof()) //- Atualiza arvore do pedido de venda
					MATRKSC6(PadR((cAliasQry2)->(C6_NUM+C6_ITEM), Len(SC6->C6_NUM+SC6->C6_ITEM)), @oTree, , @nLevel, nMaxLevel,,cTreeID )
				EndIf
				( cAliasQry2 )->( dbCloseArea() )

			EndIf
		Else								//- Gera Titulo
			nLevel++
			If nLevel <= nMaxLevel
				If !Empty(cFornec)				//- Titulo a pagar
					cQuery := " SELECT "
					cQuery += " E2_FILIAL, "
					cQuery += " E2_PREFIXO, "
					cQuery += " E2_NUM, "
					cQuery += " E2_PARCELA, "
					cQuery += " E2_FORNECE, "
					cQuery += " E2_LOJA, "
					cQuery += " E2_TIPO "
					cQuery += " FROM "+ RetSQLName("SE2") + " SE2 "
					cQuery += " WHERE "
					cQuery += " SE2.E2_FILIAL  =  '"+ cCtrFil +"' 	AND "
					cQuery += " SE2.E2_MDCONTR =  '"+ cContra +"' 	AND "
					cQuery += " SE2.E2_MDREVIS =  '"+ cCtrRev +"' 	AND "
					cQuery += " SE2.E2_MDPLANI =  '"+ cNumPla +"' 	AND "
					cQuery += " SE2.E2_PREFIXO =  '"+ SuperGetMV("MV_CNPREMD",.F.,"MED") +"' AND"
					cQuery += " SE2.E2_FORNECE =  '"+ cFornec +"' 	AND "
					cQuery += " SE2.E2_LOJA    =  '"+ cLoja +"' 	AND "
					cQuery += " SE2.E2_ORIGEM  =  'CNTA120' 		AND "
					cQuery += " SE2.D_E_L_E_T_ = ' '"
					
					cAliasQry2 	:= GetNextAlias()
					cQuery := ChangeQuery( cQuery )
					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )
	
					If !( cAliasQry2 )->(Eof()) //- Atualiza arvore do pedido de venda
						dbSelectArea( cAliasQry2 )
						cKey := Pad( "SE2-" + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_FORNECE + E2_LOJA + E2_TIPO, 50 )
						If cPaisLoc<>"BRA"
							If !oTree:TreeSeek(cKey)
								If lFilEnt
									oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
									E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO + cAddString, 100 ),;
									Pad( "SE2-" + E2_FILIAL + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
								Else
									oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
									E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO + cAddString, 100 ),;
									Pad( "SE2-" + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
								EndIf
							Endif
						Else
							If lFilEnt
								oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
								E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO + cAddString, 100 ),;
								Pad( "SE2-" + E2_FILIAL + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
							Else
								oTree:AddItem( Pad( STR0113 +; //"Titulo - Fornecedor/Loja/Prefixo/Numero/Parcela/Tipo - "
								E2_FORNECE + "/" + E2_LOJA + "/" + E2_PREFIXO + "/" + E2_NUM + "/" + E2_PARCELA + "/" + E2_TIPO + cAddString, 100 ),;
								Pad( "SE2-" + E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO, 50 )+cTreeID, cImageSE2 ,cImageSE2,,,nLevel)
							EndIf
						Endif
					EndIf
					( cAliasQry2 )->( dbCloseArea() )
					
				Else							//- Titulo a receber
					cQuery := " SELECT "
					cQuery += " E1_PREFIXO, "
					cQuery += " E1_NUM, "
					cQuery += " E1_PARCELA, "
					cQuery += " E1_CLIENTE, "
					cQuery += " E1_LOJA, "
					cQuery += " E1_TIPO "
					cQuery += " FROM "+ RetSQLName("SE1") + " SE1 "
					cQuery += " WHERE "
					cQuery += " SE1.E1_FILIAL  =  '"+ cCtrFil +"' 	AND "
					cQuery += " SE1.E1_MDCONTR =  '"+ cContra +"' 	AND "
					cQuery += " SE1.E1_MDREVIS =  '"+ cCtrRev +"' 	AND "
					cQuery += " SE1.E1_MEDNUME =  '"+ cMedNum +"' 	AND "
					cQuery += " SE1.E1_MDPLANI =  '"+ cNumPla +"' 	AND "
					cQuery += " SE1.E1_PREFIXO =  '"+ SuperGetMV("MV_CNPREMD",.F.,"MED") +"' AND"
					cQuery += " SE1.E1_CLIENTE =  '"+ cClient +"' 	AND "
					cQuery += " SE1.E1_LOJA    =  '"+ cLoja +"' 	AND "
					cQuery += " SE1.E1_ORIGEM  =  'CNTA120' 		AND "
					cQuery += " SE1.D_E_L_E_T_ = ' '"
					
					cAliasQry2 	:= GetNextAlias()
					cQuery := ChangeQuery( cQuery )
					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry2, .F., .T. )
	
					If !( cAliasQry2 )->(Eof()) //- Atualiza arvore do pedido de venda
						dbSelectArea( cAliasQry2 )
						cKey := Pad( "SE1-" + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_CLIENTE + E1_LOJA + E1_TIPO, 50 )+cTreeID
						cTitulos:=E1_PREFIXO + E1_NUM + E1_PARCELA + E1_CLIENTE + E1_LOJA + E1_TIPO
						If aScan(aTitulos,{|x| x[1] == cTitulos })==0
							oTree:AddItem( Pad( STR0036 +; //"Titulo - Cliente/Loja/Prefixo/Numero/Parcela/Tipo - "
							E1_CLIENTE + "/" + E1_LOJA + "/" + E1_PREFIXO + "/" + E1_NUM + "/" + E1_PARCELA + "/" + E1_TIPO, 100 ),;
							Pad( "SE1-" + E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO, 50 )+cTreeID, cImageSE1 ,cImageSE1,,,nLevel)
						EndIf
					EndIf
					( cAliasQry2 )->( dbCloseArea() )
				EndIf
			EndIf
			nLevel--
		EndIf
	EndIf
EndIf
nLevel--

FWRestRows(aSaveLine)
RestArea(aAreaCNE)    
RestArea(aArea)
Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MaTrackSCMºAutor  ³Marcello            ºFecha ³ 01/08/2004  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP8                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MaTrkSCM(cChaveNF,oTree,cAddString,nLevel,nMaxLevel,lItem,cTreeID,aFat)
LOCAL cForn  		:= ""
LOCAL cLoja     	:= ""
LOCAL cRemito   	:= ""
LOCAL cItemRem  	:= ""
LOCAL cSerieRem		:= ""
LOCAL cImageSCM 	:= ""
LOCAL cImageSD1 	:= ""
LOCAL cChave		:= ""
LOCAL aSD1			:= {}
LOCAL aArea			:= {}
LOCAL nLevelRem		:= 0
LOCAL lFat			:= .F.
LOCAL lPedido		:= (Type("lPc_LOC_")=="L")
LOCAL lFilEnt		:= TRKFILENT()
LOCAL cQuery    	:= ""
LOCAL cAliasQry 	:= ""
DEFAULT nMaxLevel	:= 1000000
DEFAULT lItem	 	:= .T.
DEFAULT cTreeID     := "000001"

lFat:=(ValType(aFat)=="A").And.(Len(aFat) > 0)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Separa os componentes da query                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cRemito	 	:= Left(cChaveNF,Len(SD1->D1_DOC))
cItemRem 	:= Right(cChaveNF,Len(SD1->D1_ITEM))
cSerieRem  	:= SubStr(cChaveNF,Len(cRemito)+1,Len(SD1->D1_SERIE))
cForn		:= Substr(cChaveNF,Len(cRemito)+Len(cSerieRem)+1,Len(SD1->D1_FORNECE))
cLoja		:= Substr(cChaveNF,Len(cRemito)+Len(cSerieRem)+Len(cForn)+1,Len(SD1->D1_LOJA))
nLevelRem	:= If(lPedido,nLevel+1,nLevel)
If nLevelRem <= nMaxLevel
	cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
	cImageSCM := MaEntImage( "SCM", 1 )
	cImageSD1 := MaEntImage( "SD1", 1 )
	If lPedido
		If !lItem
			If !(oTree:TreeSeek(Pad("SCM-CABECALHO",50)+cTreeID))
				nLevelRem--
				oTree:AddItem(Pad(GetDescRem(),100),Pad( "SCM-CABECALHO",50)+cTreeID,cImageSCM,cImageSCM,,,nLevelRem)
				oTree:TreeSeek(Pad("SCM-CABECALHO",50)+cTreeID)
				nLevelRem++
			Endif
			If Ascan(_aRemLoc,cChaveNF)>0
				Aadd(_aRemLoc,cChaveNF)
				oTree:AddItem( Pad( GetDescRem() + If(lItem,STR0048,"/"+Alltrim(RetTitle("D1_SERIREM"))+" - ") + Transform( cRemito + "/" + cSerieRem + ;
					If(lItem,"/"+cItemRem,""), "@!" ) + cAddString, 100 ), Pad( "SD1-" + cChaveNF, 50 )+cTreeID,cImageSCM,cImageSCM,,,nLevelRem)
				oTree:TreeSeek(Pad( "SD1-" + cChaveNF, 50 )+cTreeID)
			Endif
		Else
			oTree:AddItem( Pad( GetDescRem() + If(lItem,STR0048,"/"+Alltrim(RetTitle("D1_SERIREM"))+" - ") + Transform( cRemito + "/" + cSerieRem + ;
				If(lItem,"/"+cItemRem,""), "@!" ) + cAddString, 100 ), Pad( "SD1-" + cChaveNF, 50 )+cTreeID,cImageSCM,cImageSCM,,,nLevelRem)
			oTree:TreeSeek(Pad( "SD1-" + cChaveNF, 50 )+cTreeID)
			If Ascan(_aRemLoc,cChaveNF)==0
				Aadd(_aRemLoc,cChaveNF)
			Endif
		Endif
	Else
		If !(oTree:TreeSeek(Pad("SD1-"+cSerieRem+cRemito,50)+cTreeID))
			oTree:AddItem(Pad(GetDescRem()+" - "+cRemito+"/"+cSerieRem ,100),Pad("SD1-"+cSerieRem+cRemito,50)+cTreeID,cImageSCM,cImageSCM,,,nLevelRem)
			oTree:TreeSeek(Pad("SD1-"+cSerieRem+cRemito,50)+cTreeID)
			nLevelRem++
		Endif
		If lItem
			oTree:AddItem( Pad( GetDescRem() + STR0048 +" - " + Transform( cRemito + "/" + cSerieRem + ;
				"/"+cItemRem, "@!" ) + cAddString, 100 ), Pad( "SD1-" + cChaveNF, 50 )+cTreeID,cImageSCM,cImageSCM,,,nLevelRem)
			oTree:TreeSeek(Pad( "SD1-" + cChaveNF, 50 )+cTreeID)
		Endif
	Endif
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Alimenta os itens deste Remito     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aArea:=GetArea()

	cAliasQry := GetNextAlias()
	cQuery := ""
	cQuery += "SELECT  D1_FILIAL, D1_DOC, D1_SERIE , D1_ITEM, D1_COD, D1_TIPO, D1_FORNECE, D1_LOJA, D1_REMITO, D1_SERIREM "
	cQuery += "FROM " + RetSqlName( "SD1" ) + " "
	cQuery += "WHERE "
	cQuery += "D1_FILIAL='"		+ xFilial( "SD1" ) 	+ "' AND "
	cQuery += "D1_FORNECE='"	+ cForn				+ "' AND "
	cQuery += "D1_LOJA='" 		+ cLoja       		+ "' AND "
	cQuery += "D1_REMITO='"		+ cRemito       	+ "' AND "
	If lItem
		cQuery += "D1_ITEMREM='"	+ cItemRem       	+ "' AND "
	Endif
	cQuery += "D1_SERIREM='"	+ cSerieRem			+ "' AND "
	cQuery += "D_E_L_E_T_=' '"
	cQuery := ChangeQuery( cQuery )
	dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )
	If lItem
		cChaveRem:=xFilial("SD1")+cForn+cLoja+cSerieRem+cRemito+cItemRem
	Else
		cChaveRem:=xFilial("SD1")+cForn+cLoja+cSerieRem+cRemito
	Endif
	While !( cAliasQry )->( Eof() )
		oTree:TreeSeek( Pad( "SD1-" + cChaveRem, 50 )+cTreeID )
		If lItem
			oTree:AddItem(Pad(STR0038+Transform(D1_DOC+"/"+D1_SERIE+"/"+D1_ITEM,"@!")+cAddString,100),Pad( "SD1-"+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_COD+D1_ITEM,50)+cTreeID,cImageSD1,cImageSD1,,,nLevelRem)
			DbSkip()
		Else
			If lFat
               		cChave:=D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
               		If Ascan(aFat,cChave)==0
                		Aadd(aFat,cChave)
                	Endif
			Else
				aSD1:=GetArea()
				nLevelRem--
				If lFilEnt
					MaTrkSF1(D1_FILIAL+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA,@oTree,,@nLevelRem,nMaxLevel,.F.,cTreeID)
				Else
					MaTrkSF1(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA,@oTree,,@nLevelRem,nMaxLevel,.F.,cTreeID)
                    EndIf
				RestArea(aSD1)
			Endif
			While D1_FILIAL+D1_FORNECE+D1_LOJA+D1_SERIREM+D1_REMITO==cChaveRem
				DbSkip()
			End
		Endif
	End
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Exclui a area de trabalho da query      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea( cAliasQry )
	dbCloseArea()
	RestArea(aArea)
EndIf
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MATRKSC7LOCºAutor  ³Marcello            ºFecha ³ 09/01/2004  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                             º±±
±±º          ³                                                             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                          º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MaTrkSC7Loc(cNumPed,oTree,cAddString,nLevel,nMaxLevel,lItem,cTreeID)
Local cPedido:="",cItem:="",cAliasQry:=""
Local cQuery:="",cCond:="",cChave:=""
Local cImageSD1:="",cImageSCM:="",cImageSC7:=""
Local cTrkSeek:= ""
Local lFilEnt:= TRKFILENT()
Local nLevelPC:=0,nG:=0
Local aArea:={},aSD1:={},aFat:={}
Local cSC7Comp := FWModeAccess("SC7",3) // Verifica se as tabelas tem o mesmo X2_MODO
Local cSD1Comp := FWModeAccess("SD1",3)
Local lCompart := IIF(cSC7Comp == cSD1Comp, .T., .F.)
Local nTamFilC7	:= TamSx3("C7_FILIAL")[1]
Local nTamPedC7 := TamSx3("C7_NUM")[1]

PRIVATE lPc_LOC_:=.T.

DEFAULT lItem:=.T.
DEFAULT cTreeID := "000001"
If lFilEnt
	SC7->( DbSetOrder( 14 ) )
	cTrkSeek:= cNumPed
Else
	SC7->( DbSetOrder( 1 ) )
	cTrkSeek:= xFilial("SC7")+cNumPed
EndIf

If SC7->(DbSeek (cTrkSeek) )

	cImageSCM:=MaEntImage("SCM",1)
	cImageSC7:=MaEntImage("SC7",1)
	cImageSD1:=MaEntImage("SD1",1)
	cPedido:=Substr(cNumPed,TamSx3("C7_FILIAL")[1]+1,Len(SD1->D1_PEDIDO))
	cItem:=Right(cNumPed,Len(SD1->D1_ITEMPC))
	nLevelPC:=nLevel
	If nLevelPC<=nMaxLevel
		If !(oTree:TreeSeek(Pad("SC7-"+ Substr(cNumPed,1, nTamFilC7 + nTamPedC7) ,50)+cTreeID))
			oTree:AddItem( Pad( STR0057 + cPedido + cAddString, 100 ),;
			Pad("SC7-"+Substr(cNumPed,1, nTamFilC7 + nTamPedC7),50)+cTreeID,cImageSC7,cImageSC7,,,nLevelPC)
		Endif
		nLevelPC++
	    If lItem
		    oTree:TreeSeek(Pad("SC7-"+Substr(cNumPed,1, nTamFilC7 + nTamPedC7) ,50)+cTreeID)
			oTree:AddItem( Pad( STR0058 + Transform(IIF(Len(cNumPed)>10,Substr(cNumPed,TamSx3("C7_FILIAL")[1]+1,10),cNumPed), "@r XXXXXX/XXXX" ) + ;  //"Pedido/Item - "
			cAddString, 100 ), Pad( "SC7-" + cNumPed, 50 )+cTreeID,cImageSC7,cImageSC7,,,nLevelPC)
			oTree:TreeSeek(Pad("SC7-"+cNumPed,50 )+cTreeID )
	    Endif
	Endif
	If nLevelPC<=nMaxLevel
		cQuery := ""
		cCond:=""
		aArea:=GetArea()

		cAliasQry := GetNextAlias()
		If lFilEnt
			cQuery += "SELECT D1_FILIAL, D1_COD, D1_DOC, D1_SERIE, D1_FORNECE, D1_LOJA, D1_ITEM, D1_TIPO, D1_REMITO, D1_TIPODOC "
			cQuery += "FROM " + RetSqlName( "SD1" ) + " "
			cQuery += "WHERE "
			if cPaisLoc == "ARG"
				IF lCompart
					cQuery += "D1_FILIAL='" + Substr( cNumPed,1,TamSx3("D1_FILIAL")[1]) + "' AND "
				Else
					cQuery += "D1_FILIAL='" + xFilial( "SD1" ) + "' AND "
				Endif
			Else
				cQuery += "D1_FILIAL='" + Substr( cNumPed,1,TamSx3("D1_FILIAL")[1]) + "' AND "
			EndIf

		Else
			cQuery += "SELECT D1_COD, D1_DOC, D1_SERIE, D1_FORNECE, D1_LOJA, D1_ITEM, D1_TIPO, D1_REMITO, D1_TIPODOC "
			cQuery += "FROM " + RetSqlName( "SD1" ) + " "
			cQuery += "WHERE "
			cQuery += "D1_FILIAL='" + xFilial( "SD1" ) + "' AND "
	  	EndIf
		cQuery += "D1_PEDIDO='" + cPedido               + "' AND "
		If lItem
			cQuery += "D1_ITEMPC='" + cItem            + "' AND "
		Endif
		cQuery += "D_E_L_E_T_=' ' "
		cQuery += "ORDER BY D1_DOC, D1_SERIE, D1_FORNECE, D1_LOJA "
		cQuery := ChangeQuery( cQuery )
		dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )
		(cAliasQry) -> (dbGoTop())

		If lFilEnt
			While !(Eof())
				oTree:TreeSeek( Pad( "SC7-" + cNumPed, 50 )+cTreeID )
				cSeekSD1 :=D1_FILIAL+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
				aSD1:=GetArea()
				If lItem
					MATRKSD1(D1_FILIAL+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_COD+D1_ITEM,@oTree,,@nLevelPC,nMaxLevel,,cTreeID)
				Else
					If ISRemito(1,cAliasQry+"->D1_TIPODOC")
						MaTrkSCM(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA,oTree,cAddString,nLevelPC-1,nMaxLevel,.F.,cTreeID,aFat)
					Else
						If Empty(D1_REMITO)
							cChave:=D1_FILIAL+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
							If Ascan(aFat,cChave)==0
								Aadd(aFat,cChave)
							Endif
						Endif
					Endif
				Endif
				RestArea(aSD1)
				While cSeekSD1==D1_FILIAL+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
					DbSkip()
				End
			End
		Else
			While !(Eof())
				oTree:TreeSeek( Pad( "SC7-" + cNumPed, 50 )+cTreeID )
				cSeekSD1 :=D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
				aSD1:=GetArea()
				If lItem
					MATRKSD1(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_COD+D1_ITEM,@oTree,,@nLevelPC,nMaxLevel,,cTreeID)
				Else
					If ISRemito(1,cAliasQry+"->D1_TIPODOC")
						MaTrkSCM(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA,oTree,cAddString,nLevelPC-1,nMaxLevel,.F.,cTreeID,aFat)
					Else
						If Empty(D1_REMITO)
							cChave:=D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
							If Ascan(aFat,cChave)==0
								Aadd(aFat,cChave)
							Endif
						Endif
					Endif
				Endif
				RestArea(aSD1)
				While cSeekSD1==D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
					DbSkip()
				End
			End
		EndIf
		nLevelPC--
		If !lItem .And. Len(afat)<>0
			If !(oTree:TreeSeek(Pad("SC7-FATURAS",50)+cTreeID))
				oTree:TreeSeek(Pad("SC7-"+cPedido,50)+cTreeID)
				oTree:AddItem(Pad("Facturas",100 ),Pad("SC7-FATURAS",50)+cTreeID,cImageSD1,cImageSD1,,,nLevelPC)
			Endif
		Endif
		For nG:=1 To Len(aFat)
			If !oTree:TreeSeek(Pad("SF1-"+aFat[nG],50)+cTreeID) .AND. Ascan(_aFatLoc,afat[nG])<>0
				oTree:TreeSeek(Pad("SC7-FATURAS",50)+cTreeID)
				MaTrkSF1(aFat[nG],@oTree,,@nLevelPC,nMaxLevel,.F.,cTreeID)
			Endif
		Next

		dbSelectArea( cAliasQry )
		dbCloseArea()
		dbSelectArea( "SD1" )

	EndIf
EndIf
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKADB ³ Autor ³ Kleber Dias Gomes     ³ Data ³23/11/2005³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos itens de contrato de parceria          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKADB( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKADB( cNumCtr, oTree, cAddString, nLevel, nMaxLevel, lItem,cTreeID )

LOCAL cImageADB:= ""
LOCAL cQuery   := ""
LOCAL cAliasQry:= ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

ADB->( DbSetOrder( 1 ) )
If ADB->( DbSeek( xFilial( "ADB" ) + cNumCtr ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageADB := MaEntImage( "ADB", 1 )

		oTree:AddItem( Pad( STR0023 + Transform( cNumCtr, "@R 999999/99" ) + ; //"Contrato parceria / Item - "
		If( !Empty( cAddString ), " - " + STR0006 + cAddString, "" ),100), Pad( "ADB-" + cNumCtr, 50 )+cTreeID, cImageADB, cImageADB ,,,nLevel) //" - Cliente : "

		oTree:TreeSeek( Pad( "ADB-" + cNumCtr, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se existem itens de pedidos , cria as ocorrencias                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Obtem o alias devido a recursividade                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cAliasQry := GetNextAlias()

		cQuery := ""
		cQuery += "SELECT C6_NUM, C6_ITEM FROM "+RetSqlName("SC6")+" SC6 "
		cQuery += "WHERE "
		cQuery += "C6_FILIAL='"  + xFilial( "SC6" ) + "' AND "
		cQuery += "C6_CONTRAT='" + ADB->ADB_NUMCTR  + "' AND "
		cQuery += "C6_ITEMCON='" + ADB->ADB_ITEM    + "' AND "
		cQuery += "D_E_L_E_T_<>'*' "
		cQuery += "ORDER BY C6_NUM, C6_ITEM"

		cQuery := ChangeQuery( cQuery )

		dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. )

		While !( cAliasQry )->( Eof() )
			MATRKSC6( ( cAliasQry )->C6_NUM + ( cAliasQry )->C6_ITEM, @oTree, , @nLevel, nMaxLevel,,cTreeID)
			( cAliasQry )->( dbSkip() )
			oTree:TreeSeek( Pad( "ADB-" + cNumCtr, 50 )+cTreeID )
		End

		( cAliasQRY )->( dbCloseArea() )
		dbSelectArea( "SC6" )

	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKDAI ³ Autor ³ Kleber Dias Gomes     ³ Data ³09/01/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos itens da carga do pedido.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKDAI( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKDAI( cItCarga, oTree, cAddString, nLevel, nMaxLevel, lItem,cTreeID )

LOCAL cImageDAI:= ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

DAI->( DbSetOrder( 1 ) )
If DAI->( DbSeek( xFilial( "DAI" ) + cItCarga ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageDAI := MaEntImage( "DAI", 1 )

		oTree:AddItem( Pad( STR0069 + Transform( DAI->DAI_COD+DAI->DAI_SEQCAR, "@R 999999/99" ),100),; //"Carga / Seq.Carga - "
		Pad( "DAI-" + cItCarga, 50 )+cTreeID, cImageDAI, cImageDAI ,,,nLevel)
		oTree:TreeSeek( Pad( "DAI-" + cItCarga, 50 )+cTreeID )
	EndIf

	nLevel--

EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKQI2 ³ Autor ³ Cicero Odilio Cruz    ³ Data ³16/12/2005³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas da FNC baseado MATRKSA1                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKQI2( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Analista  ³ Data/Bops/Ver ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Cicero C. ³03/12/05³8.11  ³-Incluida a Integracao com o Controle de    ³±±
±±³          ³89415   ³      ³Nao-Conformidades                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MATRKQI2( cCodigo, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID, cMod, cChAnt )

Local cImageQI2 := "" 			// Figura no Tree

Default nMaxLevel := 3 			// Nivel Maximo default
Default cTreeID   := "000001"	// Id  do Tree
Default cMod      := "TMK" 		// Define  o Modulo de Origem
Default cChAnt	  := ""			// Chave Auxiliar

oTree:Hide()
cImageQI2  := MaEntImage( "QI2", 1 ) // Busco a Figura  referenta  a Tabela de Nao Conformidades

Do Case
Case (cMod == "TMK")
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Obtenho as Fichas de Não Conformidades por Atendimento³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DbSelectarea("SUD")
	DbSetOrder(1)
	If DbSeek( xFilial( "SUD" ) + cCodigo )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Exibo as FNCs³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		While SUD->( !Eof() .AND. SUC->(xFilial())+SUC->UC_CODIGO == SUD->(xFilial()) + SUD->UD_CODIGO )
			nLevel++
			oTree:TreeSeek( Pad( "SUC-" + SUD->UD_CODIGO, 50 ))
		  	If !Empty(SUD->UD_CODFNC)
				oTree:AddItem( Pad( STR0071 + SUD->UD_CODFNC + STR0072 +; // "Codigo da Ficha: " ### " Revisao: "
				               SUD->UD_FNCREV, 100 ) , Pad( "QI2-" + SUD->UD_CODFNC+SUD->UD_FNCREV, 50 ), cImageQI2 , cImageQI2 ,;
				               NIL                    , NIL                                , nLevel    )
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Chamo a funcao que  monta  a estrutura de uma Ficha  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				TMKSTRUFNC( SUD->UD_CODFNC+SUD->UD_FNCREV , @oTree , NIL , @nLevel ,;
				            nMaxLevel , NIL , cTreeID )
				oTree:TreeSeek( Pad( "SUC-" + SUD->UD_CODIGO, 50 ))
				oTree:TreeSeek( Pad( "QI2-" + SUD->UD_CODFNC+SUD->UD_FNCREV, 50 ))
				oTree:SetFocus()
				oTree:PTCollapse()
			EndIf
			SUD->( dbSkip() )
			nLevel--
		End
	Endif
	oTree:TreeSeek( Pad( "SUC-" + SUD->UD_CODIGO, 50 ))
	oTree:SetFocus()
	oTree:PTCollapse()
	oTree:Refresh()
	oTree:Show()
OtherWise
	nLevel++
	oTree:AddItem( Pad( STR0071 + SubStr(cCodigo,1,TamSx3("AB2_CODFNC")[1]) + STR0072 +; // "Codigo da Ficha: " ### " Revisao: "
	               SubStr(cCodigo,TamSx3("AB2_CODFNC")[1]+1,Len(cCodigo)-TamSx3("AB2_CODFNC")[1]), 100 ) , Pad( "QI2-" + cCodigo, 50 ), cImageQI2 , cImageQI2 ,;
	               NIL                    , NIL                                , nLevel    )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Chamo a funcao que  monta  a estrutura de uma Ficha  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	TMKSTRUFNC( cCodigo , @oTree , NIL , @nLevel ,;
	            nMaxLevel , NIL , cTreeID )
	oTree:TreeSeek( Pad( cChAnt , 50 ) )
	oTree:TreeSeek( Pad( "QI2-" + cCodigo, 50 ))
	oTree:SetFocus()
	oTree:PTCollapse()
	nLevel--
	oTree:TreeSeek( Pad( cChAnt , 50 ) )
	oTree:SetFocus()
	oTree:PTCollapse()
	oTree:Refresh()
	oTree:Show()
EndCase
Return( .T. )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³TMKSTRUFNC³ Autor ³ Cicero Odilio Cruz    ³ Data ³16/12/2005³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta a strutura da FNC (Nao respeita nivel por se entender³±±
±±³          ³ que o que qdo se tratar de FNC sera feito um Folow-up e nao³±±
±±³          ³ um Tracker)                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKQI2( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, ExpN2, ExpL1)  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±³          ³ ExpL1 -> Indica se deve expandir os itens ou cabecalhos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Analista  ³ Data/Bops/Ver ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Cicero C. ³03/12/05³8.11  ³-Incluida a Integracao com o Controle de    ³±±
±±³          ³89415   ³      ³Nao-Conformidades                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function TMKSTRUFNC( cCodigo  , oTree, cAddString, nLevel,;
                     nMaxLevel, lItem, cTreeID )

Local cMotRev := StrTran(AllTrim(MSMM(QI2->QI2_MOTREV)),chr(13)+chr(10),"")	// Motivo da Revisao da FNC
Local aStatus  := {"  0%"," 25%"," 50%"," 75%","100%"} 						// Array Status da Etapa
Local aTipQI6 := {} 															// Array Tipo Causa
Local aTipCau := {} 															// Array Cauza Raiz
Local nX := 0 																	// Contador

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Array  com o status da Ficha de Não-Conformidade ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aQI2Sit := {	STR0101,;										// "Registrada"
					STR0102,;										// "Em Analise"
                   	STR0103,;										// "Procede"
                   	STR0104,;										// "Nao Procede"
                   	STR0105} 										// "Cancelada"

QNCCBOX("QI6_TIPO" , @aTipQI6) // Carrego o array Tipo da Causa
QNCCBOX("QI6_RAIZ" , @aTipCau) // Carrego o array Causa raiz

nLevel++

QI2->(DbSetOrder(2))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Indicadores ultilizados na estrutura da FNC ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cIUser  := MaEntImage( "FNC00", 1 ) // Usuario
cIDesc  := MaEntImage( "FNC01", 1 ) // Descricao
cIPln   := MaEntImage( "FNC02", 1 ) // Plano de Acao
cIEtap  := MaEntImage( "FNC03", 1 ) // Etapas
cIPraz  := MaEntImage( "FNC04", 1 ) // Calendario
cICaus  := MaEntImage( "FNC05", 1 ) // Causas
cIPln1  := MaEntImage( "FNC06", 1 ) // Causa Raiz
cIPln2  := MaEntImage( "FNC07", 1 ) // Causa
cIPln3  := MaEntImage( "FNC08", 1 ) // Documentos
cIPln4  := MaEntImage( "FNC09", 1 ) // Custos
cIGrou  := MaEntImage( "FNC10", 1 ) // Grupo de Usuarios
cIDet   := MaEntImage( "FNC11", 1 ) // Grupo de Usuarios

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Dados da FNC ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If QI2->(dbSeek(xFilial("QI2")+cCodigo))

	oTree:TreeSeek( Pad( "QI2-" + cCodigo, 50 ))
	oTree:AddItem( PADR(STR0098,100) , Pad( "DETFNC-" + cCodigo, 50 ) , cIDet , cIDet ,; // "Detalhes"
	               NIL                               , NIL , nLevel )
	oTree:TreeSeek( Pad( "DETFNC-" + cCodigo, 50 ))
	oTree:AddItem( PADR(STR0073+": "+QI2->QI2_DESCR,100) , NIL , NIL   , NIL ,; // "Descricao"
	               NIL                                                , NIL , nLevel )
	oTree:AddItem( PADR(STR0099+aQI2SIT[Val(QI2->QI2_STATUS)]+"-"+STR0100+IIF(Empty(QI2->QI2_CONREA),"Em Analise","Baixada");   // "Situacao: " ### " Status : " ### "Em Analise" ### "Baixada"
	               ,100), NIL , NIL   , NIL ,; // "Status"
	               NIL   , NIL , NIL )
	oTree:TreeSeek( Pad( "DETFNC-" + cCodigo, 50 ))
	oTree:SetFocus()
	oTree:PTCollapse()

	oTree:TreeSeek( Pad( "QI2-" + cCodigo, 50 ))
	oTree:AddItem( PADR(STR0074+QI2->QI2_FILMAT+"-"+QI2->QI2_MAT+" "+; // "Usuario Originador: "
	               QA_NUSR(QI2->QI2_FILMAT,QI2->QI2_MAT),100), Pad( "QI2-" +"00"+QI2->QI2_MAT+cCodigo, 50 ) , cIUser , cIUser ,;
	               NIL                                         , NIL                                                   , nLevel )
	oTree:AddItem( PADR(STR0075+QI2->QI2_FILRES+"-"+QI2->QI2_MATRES+" "+; // "Usuario Responsavel: "
	               QA_NUSR(QI2->QI2_FILRES,QI2->QI2_MATRES),100), Pad( "QI2-" +"01"+QI2->QI2_MATRES+cCodigo, 50 ) , cIUser , cIUser ,;
	               NIL                                            , NIL                                                      , nLevel )
	oTree:AddItem( PADR(STR0106,100), Pad( "DETA-" + cCodigo, 50 ) , cIDesc , cIDesc ,; // "Descricao Detalhada"
	               NIL , NIL , nLevel )
	cChave := Pad( "DETA-" + cCodigo, 50 )
	TRKMEMOTREE( @oTree  , AllTrim(MSMM(QI2->QI2_DDETA)) , 80 , NIL ,;
	             @nLevel , cChave )

	If !Empty(QI2->QI2_DISPOS)
		oTree:TreeSeek( Pad( "QI2-" + cCodigo, 50 ))
		oTree:AddItem( PADR(STR0076,100) , Pad( "DISP-" + cCodigo, 50 ) , cIDesc , cIDesc ,; // "Disposicao"
		               NIL                                , NIL                                  , nLevel )
		cChave := Pad( "DISP-" + cCodigo, 50 )
		TRKMEMOTREE( @oTree  , AllTrim(MSMM(QI2->QI2_DISPOS)) , 80 , NIL ,;
		             @nLevel , cChave)
	Endif

	If !Empty(cMotRev)
		oTree:TreeSeek( Pad( "QI2-" + cCodigo, 50 ))
		oTree:AddItem( PADR(STR0077,100), Pad( "MOTI-" + cCodigo, 50 ),cIDesc,cIDesc,,,nLevel)	// "Motivo da Revisao"
		cChave := Pad( "MOTI-" + cCodigo, 50 )
		TRKMEMOTREE( @oTree  , cMotRev , 80 , NIL ,;
		             @nLevel , cChave)
	Endif

	If !Empty(QI2->QI2_CODACA)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Plano de Acao e sua Estrutura                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		QI3->(DbSetOrder(2))
		If QI3->(DBSeek(xFilial("QI3")+QI2->QI2_CODACA+QI2->QI2_REVACA))
		oTree:TreeSeek( Pad( "QI2-" + cCodigo, 50 ))
		oTree:AddItem( STR0078+PADR(TransForm(QI2->QI2_CODACA,"@R ######/####")+"-"+; // "Plano de Acao No. "
		                QI2->QI2_REVACA,100) , Pad( "QI3-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) , cIPln , cIPln ,;
		                NIL                    , NIL                                                  , nLevel )
		If !Empty(QI3->QI3_MOTREV)
			oTree:TreeSeek( Pad( "QI3-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) )
			oTree:AddItem( PADR(STR0077,100) , Pad( "MOTI-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) , cIDesc , cIDesc ,; // "Motivo da Revisao"
			               NIL                                       , NIL                                                   , nLevel )
			cChave :=  Pad( "MOTI-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 )
			TRKMEMOTREE( @oTree  , AllTrim(MSMM(QI3->QI3_MOTREV)) , 80 , NIL ,;
			             @nLevel , cChave)
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Etapas do Plano de Acao                                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("QI5")
		If dbSeek(xFilial("QI5")+QI2->QI2_CODACA+QI2->QI2_REVACA)
			oTree:TreeSeek( Pad( "QI3-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) )
			oTree:AddItem( STR0079+PADR(TransForm(QI2->QI2_CODACA,"@R ######/####")+"-"+; // "Etapas do Plano de Acao No. "
			               QI2->QI2_REVACA,100), Pad( "ETP-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ), cIEtap , cIEtap,;
			               NIL                   , NIL                                                 , nLevel )
			nI := 1
			While !Eof() .AND. xFilial("QI5")+QI5->QI5_CODIGO+QI5->QI5_REV == xFilial("QI2")+QI2->QI2_CODACA+QI2->QI2_REVACA
				oTree:TreeSeek( Pad( "ETP-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ))
				cDescComp := AllTrim(MSMM(QI5->QI5_DESCCO))
				cDescObs  := AllTrim(MSMM(QI5->QI5_DESCOB))
				oTree:AddItem( PADR(QI5->QI5_TPACAO +"-"+Alltrim(FQNCDSX5("QD",QI5->QI5_TPACAO))+" "+aStatus[SuperVal(QI5->QI5_STATUS)+1],100),;
				               PAD( "ETP-" + QI2->QI2_CODACA+QI2->QI2_REVACA+QI5->QI5_TPACAO+STRZERO(nI,2), 50 ),;
				               If(QI5->QI5_STATUS=="4","CHECKED","UNCHECKED"),;
				               If(QI5->QI5_STATUS=="4","CHECKED","UNCHECKED"),;
				               NIL ,;
				               NIL ,;
				               nLevel )
				oTree:TreeSeek( Pad( "ETP-" + QI2->QI2_CODACA+QI2->QI2_REVACA+QI5->QI5_TPACAO+STRZERO(nI,2), 50 ))
				oTree:AddItem( QI5->QI5_FILMAT+"-"+QI5->QI5_MAT+" "+AllTrim(QA_NUSR(QI5->QI5_FILMAT,QI5->QI5_MAT)), NIL , cIUser , cIUser ,;
				               NIL                                                                                   , NIL , nLevel )
				oTree:AddItem( STR0080+DTOC(QI5->QI5_PRAZO)+" "+STR0081+DTOC(QI5->QI5_REALIZ), NIL , cIPraz , cIPraz ,; // "Prazo Execucao: " ### "Data Realizacao: "
				               NIL                                                                                               , NIL , nLevel )
				oTree:AddItem( STR0082+AllTrim(QI5->QI5_DESCRE), NIL , cIDesc , cIDesc ,; // "Descricao Resumida: "
				               NIL                                                        , NIL , nLevel )
				If !Empty(cDescComp)
					cChave := Pad( "ETP-" + QI2->QI2_CODACA+QI2->QI2_REVACA+QI5->QI5_TPACAO+STRZERO(nI,2), 50 )
					TRKMEMOTREE( @oTree  , STR0083+AllTrim(cDescComp) , 90     , NIL ,; // "Descricao Completa: "
					             @nLevel , cChave                                                , cIDesc )
				Endif
				If !Empty(cDescObs)
					cChave := Pad( "ETP-" + QI2->QI2_CODACA+QI2->QI2_REVACA+QI5->QI5_TPACAO+STRZERO(nI,2), 50 )
					TRKMEMOTREE( @oTree  , STR0084+AllTrim(cDescObs) , 90    , NIL ,; // "Observacao: "
					             @nLevel , cChave                                       ,cIDesc )
				Endif
				dbSkip()
				oTree:TreeSeek( Pad( "ETP-" + QI2->QI2_CODACA+QI2->QI2_REVACA+QI5->QI5_TPACAO+STRZERO(nI,2), 50 ))
				oTree:SetFocus()
				oTree:PTCollapse()
				nI++
			End
		EndIF
		oTree:TreeSeek( Pad( "ETP-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ))
		oTree:SetFocus()
		oTree:PTCollapse()

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Causas do Plano de Acao                                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("QI6")
		If dbSeek(xFilial("QI6")+QI2->QI2_CODACA+QI2->QI2_REVACA)
			oTree:TreeSeek( Pad( "QI3-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) )
			oTree:AddItem( STR0085, Pad( "CAU-" + cCodigo, 50 ) , cICaus , cICaus ,; // "Causas"
			               NIL                 , NIL                                 , nLevel )
			oTree:TreeSeek( Pad( "CAU-" + cCodigo, 50 ) )
			While !Eof() .AND. xFilial("QI6")+QI6->QI6_CODIGO+QI6->QI6_REV == xFilial("QI2")+QI2->QI2_CODACA+QI2->QI2_REVACA
				cDescCausa := AllTrim(MSMM(QI6->QI6_DESCR))
				oTree:AddItem( STR0086+aTipQI6[Val(QI6->QI6_TIPO)]+Space(10)+STR0087+;	// "Tipo de Causa: " ### "Causa Raiz?"
				               aTipCau[Val(QI6->QI6_RAIZ)] , NIL , cIPln1 , cIPln1,;
				               NIL                           , NIL , nLevel )
				oTree:AddItem( STR0088+FQNCNTAB("1",QI6->QI6_CAUSA), NIL , cIPln2 , cIPln2,; // "Causa: "
				               NIL                                                , NIL , nLevel )
				oTree:AddItem( STR0089+AllTrim(QI6->QI6_METODO), NIL , cIPln2 , cIPln2 ,; // "Metodo Utilizado: "
				               NIL                                                      , NIL , nLevel )
				If !Empty(cDescCausa)
					cChave := Pad( "CAU-" + cCodigo, 50 )
					TRKMEMOTREE(@oTree  , STR0090+AllTrim(cDescCausa) , 100    , NIL ,; // "Descricao da Causa: "
					            @nLevel , cChave                                                 , cIDesc )
				Endif
				dbSkip()
			End
	    EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Documentos do Plano de Acao                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("QI7")
		If dbSeek(xFilial("QI7")+QI2->QI2_CODACA+QI2->QI2_REVACA)
			nX:=0
			oTree:TreeSeek( Pad( "QI3-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) )
			oTree:AddItem( STR0091 , Pad( "DOC-" + cCodigo, 50 ) , cIPln3 , cIPln3 ,; // "Documentos"
			               NIL                       , NIL                                 , nLevel )
			While !Eof() .AND. xFilial("QI7")+QI7->QI7_CODIGO+QI7->QI7_REV == xFilial("QI7")+QI2->QI2_CODACA+QI2->QI2_REVACA
				nX++
				oTree:TreeSeek( Pad( "DOC-" + cCodigo, 50 ))
				oTree:AddItem( PADR(QI7->QI7_DOC+"-"+QI7->QI7_RV,100),;
				               Pad( "TDO-" +QI2->QI2_CODACA+QI2->QI2_REVACA+QI7->QI7_DOC+"-"+QI7->QI7_RV+str(nX), 50 ), cIDesc ,;
				               cIDesc , NIL , NIL , nLevel)
				oTree:TreeSeek( Pad( "TDO-" +QI2->QI2_CODACA+QI2->QI2_REVACA+QI7->QI7_DOC+"-"+QI7->QI7_RV+str(nX), 50 ))
				oTree:AddItem( PADR(STR0092+QI7->QI7_TPDOC+"-"+FQNCDSX5("QC",QI7->QI7_TPDOC),100) , NIL , NIL    , NIL ,; //"Tipo de Documento: "
				               NIL                                                                                           , NIL , nLevel )

				If QDH->(dbSeek(If(FWModeAccess("QDH")=="C",xFilial("QDH"),QI7->QI7_FILIAL)+PADR(QI7->QI7_DOC,16)+QI7->QI7_RV))
					oTree:AddItem( PADR(STR0093+QDH->QDH_TITULO,100), NIL , NIL    , NIL ,;
					               NIL                                              , NIL , nLevel )	// "Titulo: "
				Else
					oTree:AddItem( PADR(STR0093+STR0094,100), NIL , NIL    , NIL ,; // "Titulo: " ### "Documento Externo"
					               NIL                                                 , NIL , nLevel )
				Endif
				dbSkip()
			End
			oTree:TreeSeek( Pad( "DOC-" + cCodigo, 50 ))
			oTree:SetFocus()
			oTree:PTCollapse()
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Custos do Plano de Acao                                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("QI8")
		If dbSeek(xFilial("QI8")+QI2->QI2_CODACA+QI2->QI2_REVACA)
			oTree:TreeSeek( Pad( "QI3-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) )
			oTree:AddItem( PADR(STR0095,100), Pad( "BUD-" + cCodigo, 50 ), cIPln4 , cIPln4,; // "Custos"
			               NIL                , NIL                                , nLevel )
			oTree:TreeSeek( Pad( "BUD-" + cCodigo, 50 ) )
			While !Eof() .AND. xFilial("QI8")+QI8->QI8_CODIGO+QI8->QI8_REV == xFilial("QI8")+QI2->QI2_CODACA+QI2->QI2_REVACA
				oTree:AddItem( STR0073+": "+Padr(FQNCDSX5("QB",QI8->QI8_CUSTO),30)+STR0096+; // "Descricao: " ### " Valor Custo "
				               AllTrim(Transform(QI8->QI8_VLCUST,"@E 999,999,999.99")) , NIL , cIDesc , cIDesc ,;
				               NIL                                                       , NIL , nLevel )
				dbSkip()
			End
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Equipes                                                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("QI4")
		If dbSeek(xFilial("QI4")+QI2->QI2_CODACA+QI2->QI2_REVACA)
			oTree:TreeSeek( Pad( "QI3-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) )
			oTree:AddItem( PADR(STR0097,100) , Pad( "EQU-" + cCodigo, 50 ) , cIGrou, cIGrou,;
			               NIL                  , NIL                                 , nLevel) // "Equipes"
			oTree:TreeSeek( Pad( "EQU-" + cCodigo, 50 ) )
			While !Eof() .AND. xFilial("QI4")+QI4->QI4_CODIGO+QI4->QI4_REV == xFilial("QI4")+QI2->QI2_CODACA+QI2->QI2_REVACA
				oTree:AddItem( QA_NUSR(QI4->QI4_FILMAT,QI4->QI4_MAT), NIL , cIUser , cIUser,;
				               NIL                                   , NIL , nLevel )
				dbSkip()
			End
	    EndIf
	EndIf
	oTree:TreeSeek( Pad( "QI3-" + QI2->QI2_CODACA+QI2->QI2_REVACA, 50 ) )
	oTree:SetFocus()
	oTree:PTCollapse()
EndIf
EndIf
nLevel--
oTree:TreeSeek( Pad( "QI2-" + cCodigo, 50 ))
oTree:SetFocus()
oTree:PTCollapse()
oTree:Show()
Return( .T. )


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³TRKMEMOTREE ³ Autor ³ Cicero Odilio Cruz  ³ Data ³ 20/12/05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa para adicionar linha no Tree                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ TRKMEMOTREE(oTree,cTexto,nTam,lResource)                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Analista  ³ Data/Bops/Ver ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Cicero C. ³03/12/05³8.11  ³-Incluida a Integracao com o Controle de    ³±±
±±³          ³89415   ³      ³Nao-Conformidades                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function TRKMEMOTREE( oTree , cTexto, nTam, lResource,;
                      nLevel, cChave, cBMP)
Local   nT   := 0 						//Contador
Local   aTextos := {} 					// Array onde sera adicionado o conteúdo do Memo
Default lResource := .T. 				// Indica  se a primeira linha tem uma figura
Default cBMP := ""   					// Nome da Figura

nLevel++

Q_MemoArray( cTexto , @aTextos , 80)    // Funcao do TMK que  converte  MEMO em Array

For nT :=1 TO Len(aTextos)
	If nT == 1 .AND. lResource
		oTree:TreeSeek( cChave )
		oTree:AddItem( aTextos[nT], NIL, cBMP   , cBMP,;
		               NIL         , NIL, nLevel )
	Else
		oTree:TreeSeek( cChave )
		oTree:AddItem( aTextos[nT], NIL, NIL   , NIL,;
		               NIL         , NIL, nLevel)
	Endif
Next nT

oTree:TreeSeek(cChave)
oTree:SetFocus()
oTree:PTCollapse()

nLevel--
Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³TRKFILENT	  ³ Autor ³ Turibio Miranda	    ³ Data |30/03/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao para verificar se utiliza filial de entrega         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ TRKFILENT()								                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function TRKFILENT()
Local lFilEnt	:= .T.
Local lTrkFilPe	:= ExistBlock("TRKFILEN")

// Não utiliza o conceito de filial de entrega se as 3 tabelas principais (SC1, SC7, SC8) forem compartilhadas
If FWModeAccess("SC1")=="C" .And. FWModeAccess("SC7")=="C" .And. FWModeAccess("SC8")=="C" .And. lTrkFilPe
	lFilEnt:= .F.
EndIf

Return lFilEnt

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MATRKADY ³ Autor ³ Totvs                 ³ Data ³17/05/2011³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta as pastas dos itens de orcamento                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ MATRKADY( ExpC1, @ExpO1, [ ExpC2 ], @ExpN1, [ ExpN2 ] )    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Chave de pesquisa                                 ³±±
±±³          ³ ExpO1 -> Objeto Tree                                       ³±±
±±³          ³ ExpC2 -> String a adicionar ao texto do item ( tree )      ³±±
±±³          ³ ExpN1 -> Nivel                                             ³±±
±±³          ³ ExpN2 -> Nivel maximo                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MATRKADY( cPropos, oTree, cAddString, nLevel, nMaxLevel, lItem, cTreeID,lConta )
Local cImageSCK 	:= ""
Local cPedido		:= ""
Local aPedidos		:= {}

DEFAULT nMaxLevel	:= 1000000
DEFAULT cTreeID		:= "000001"
DEFAULT lConta      := .F.

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

ADY->( DbSetOrder( 1 ) )
If ADY->( DbSeek( xFilial( "ADY" ) + cPropos ) )

	nLevel++
	If nLevel <= nMaxLevel

		cImageSCK := MaEntImage( "ADY", 1 )

		oTree:AddItem( Pad( STR0118 + cPropos + cAddString, 100 ),;  //"Proposta Comercial - "
		Pad( "ADY-" + cPropos, 50 )+cTreeID, cImageSCK,cImageSCK,,,nLevel)
		oTree:TreeSeek( Pad( "ADY-" + cPropos, 50 )+cTreeID )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Orcamentos                                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !lConta
			DbSelectArea( "SCJ" )
			SCJ->( DbSetOrder( 4 ) )
			If SCJ->( DbSeek( xFilial( "SCJ" ) + cPropos ) )
				oTree:TreeSeek( Pad( "ADY-" + cPropos, 50 )+cTreeID )
				cImageSCK := MaEntImage( "SCJ", 1 )
				oTree:AddItem( Pad( STR0015 + Transform( cPropos, "@R XXXXXX/XX" ), 100 ), Pad( "SCJ-" + cPropos, 50 )+cTreeID, cImageSCK,cImageSCK,,,nLevel) //"Orcamento - "
			EndIf


		Else
			cAliasQry := GetNextAlias()

			cQuery := ""
			cQuery += "SELECT CK_NUM,CK_ITEM FROM " + RetSqlName( "SCK" ) + " "
			cQuery += "WHERE "
			cQuery += "CK_FILIAL='" + xFilial( "SCK" ) + "' AND "
			cQuery += "CK_PROPOST='"    + cPropos  + "' AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY CK_ITEM"

			cQuery := ChangeQuery( cQuery )

			dbUseArea( .T., "TOPCONN", TcGenQry( ,, cQuery ), cAliasQry, .F., .T. )

			While !( cAliasQry )->( Eof() )
				MATRKSCK( ( cAliasQry )->CK_NUM + ( cAliasQry )->CK_ITEM, @oTree, , @nLevel, nMaxLevel, , cTreeID )
				( cAliasQry )->( dbSkip() )
			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a area de trabalho da query                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			( cAliasQry )->( dbCloseArea() )
			dbSelectArea( "SCK" )
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Contrato de Manutencao                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oTree:TreeSeek( Pad( "ADY-" + cPropos, 50 )+cTreeID )

		DbSelectArea( "AAH" )
		AAH->( DbSetOrder( 6 ) )
		If AAH->( DbSeek( xFilial( "AAH" ) + cPropos ) )
			cImageSCK := MaEntImage( "AAH", 1 )
			oTree:AddItem( Pad( STR0119 + " - " + AAH->AAH_CONTRT, 100 ), Pad( "AAH-" + AAH->AAH_CONTRT, 50 )+cTreeID, cImageSCK,cImageSCK,,,nLevel) //"Contrato de Manutenção"

			While AAH->( !Eof() ) .AND. AAH->AAH_FILIAL + AAH->AAH_PROPOS == xFilial( "AAH" ) + cPropos
				oTree:TreeSeek( Pad( "AAH-" + AAH->AAH_CONTRT, 50 ) + cTreeID )

				cImageSCK := MaEntImage( "AAA", 1 )
				oTree:AddItem( Pad( STR0120 + AAH->AAH_CODGRP, 100 ), Pad( "AAA-" + AAH->AAH_CODGRP, 50 )+cTreeID, cImageSCK,cImageSCK,,,nLevel) //"Grupo de Cobertura - "

				AAH->( DbSkip() )
			End
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Contrato de Prest. Servico                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oTree:TreeSeek( Pad( "ADY-" + cPropos, 50 )+cTreeID )

		DbSelectArea( "AAM" )
		AAM->( DbSetOrder( 3 ) )
		If AAM->( DbSeek( xFilial( "AAM" ) + cPropos ) )
			cImageSCK := MaEntImage( "AAM", 1 )
			oTree:AddItem( Pad( STR0121 + AAM->AAM_CONTRT, 100 ), Pad( "AAM-" + AAM->AAM_CONTRT, 50 )+cTreeID, cImageSCK,cImageSCK,,,nLevel) //"Contrato de Prestacao de Servicos - "

			While AAM->( !Eof() ) .AND. AAM->AAM_FILIAL + AAM->AAM_PROPOS == xFilial( "AAM" ) + cPropos
				DbSelectArea( "AAN" )
				AAN->( DbSetOrder( 1 ) )
				AAN->( DbSeek( xFilial( "AAN" ) + AAM->AAM_CONTRT ) )
				While AAN->( !Eof() ) .AND. AAN->( AAN_FILIAL + AAN_CONTRT ) == xFilial( "AAN" ) + AAM->AAM_CONTRT
					cPedido := AAN->AAN_ULTPED
					If !Empty( cPedido ) .AND. aScan( aPedidos, { |x| x = cPedido } ) == 0
						aAdd( aPedidos, cPedido )
						oTree:TreeSeek( Pad( "AAM-" + AAM->AAM_CONTRT, 50 ) + cTreeID )

						cImageSCK := MaEntImage( "SC5", 1 )
						oTree:AddItem( Pad( STR0122 + cPedido, 100 ), Pad( "SC5-" + cPedido, 50 )+cTreeID, cImageSCK,cImageSCK,,,nLevel) //"Pedido de Venda - "
					EndIf

					AAN->( DbSkip() )
				End

				AAM->( DbSkip() )
			End
		EndIf
	EndIf

	nLevel--
EndIf

Return .T.

//------------------------------------------------------------------
/*/{Protheus.doc} MaTrkCO1()

@author taniel.silva
@since 16/03/2015
@version P12
/*/
//-------------------------------------------------------------------
Function MaTrkCO1( cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID,nGo )
Local cCodEdt 		:= ""
Local cNumPro		:= ""
Local cImageCO1		:= ""
Local cAliasQryCN9	:= ""			// Utilizado para guardar o alias de uma area
Local cQuery     	:= ""
Local cLote			:= IIf(Len(cKey) > Len(CO1->(CO1_CODEDT+CO1_NUMPRO)),Substr(cKey,Len(CO1->(CO1_CODEDT+CO1_NUMPRO))+1),"") //pega o lote na variável do ckey
Local cAuxC7Key 	:= ""
Local cAliasTmp  	:= GetNextAlias()

Local lFilEnt	 	:= TRKFILENT()
Local lUsaLote		:= .F.
Local lTemSC		:= .F.

Local oModel
Local oModCO2
Local oModCO3
Local oModCP4

Local nPosCO2		:= 0
Local nPosCO3		:= 0
Local nPosCP4		:= 0
Local nContPed		:= 0 
Local nRecno		:= 0

DEFAULT nMaxLevel 	:= 1000000
DEFAULT lItem     	:= .T.
DEFAULT cTreeID   	:= "000001"
DEFAULT nGo			:= 0


cKey := Substr(cKey,1,Len(CO1->(CO1_CODEDT+CO1_NUMPRO))) //caso lote, corrige a variável cKey para trazer apenas a chave da CO1


CO1->( DbSetOrder( 1 ) )
If CO1->( DbSeek( xFilial( "CO1", RetFilSC7() ) + cKey ) )

	CN9->( DbSetOrder(9))
	If CN9->(IndexKey()) <> "CN9_FILIAL+CN9_CODED+CN9_NUMPR"
		CN9->( DbSetOrder(10))
	EndIf

	SC7->( DbSetOrder(21) )
	SC5->( DbSetOrder(6)  )
	CX0->( DbSetOrder(2)  )
	CX1->( DbSetOrder(1)  )

	cCodEdt	:=  CO1->CO1_CODEDT
	cNumPro	:=  CO1->CO1_NUMPRO

	cImageCO1 := MaEntImage( "CO1", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		If !oTree:AddItem( Pad( "Cod. Edital" + " / " + "Num.Pro" + ;
			IIf(!(Empty(cLote))," / Lote","") + " - " + cCodEdt  + " / " + cNumPro + ;
			IIf(!(Empty(cLote))," / " + cLote,"") +;
			cAddString, 100 ),Pad( "CO1-" + cKey, 50 )+cTreeID,cImageCO1,cImageCO1,,,nLevel)
			oTree:TreeSeek( Pad( "CO1-" + cKey, 50 )+cTreeID )
		EndIf

		oModel 	:= FwModelActive()

		If ValType(oModel) <> "O"
			If CO1->CO1_AVAL == "1"
				oModel := FwLoadModel('GCPA200')
			Else
				oModel := FwLoadModel('GCPA201')
			EndIf
			oModel:SetOperation(MODEL_OPERATION_UPDATE)
			oModel:Activate()
		EndIf

		If lUsaLote := oModel:GetId() == 'GCPA201'
			oModCP3 := oModel:GetModel("CP3DETAIL")
		EndIf
		oModCO2 	:= oModel:GetModel("CO2DETAIL")
		oModCO3 	:= oModel:GetModel("CO3DETAIL")
		oModCP4 	:= oModel:GetModel("CP4DETAIL")

		//Caso for o primeiro loop posiciona os modelos
		If nGo == 1
			//posiciona o lote
			If lUsaLote
				oModCP3:GoLine(nGo)
			EndIf
			//Posiciona o produto
			oModCO2:GoLine(nGo)
			//Se existir SC
			If !(Empty(oModCP4:GetValue('CP4_NUMSC')))
				oModCP4:GoLine(nGo)
			//Se for Pedido de Venda
			ElseIf CO1->CO1_GERDOC == '2'
				oModCO3:GoLine(nGo)
			EndIf
		EndIf

		//SRP - Ata de Registro de Preço
        If CPH->( DbSeek( xFilial( "CPH" ) + cKey ) )
			MATRKCPH(cCodEdt + cNumPro, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
		//Contrato
		ElseIf CN9->( DbSeek(xFilial("CN9") + cKey) )
			cAliasQryCN9 := GetNextAlias()
			//-- Query para retornar todos os contrato gerados pelo edital
			BeginSQL Alias cAliasQryCN9
				SELECT	CN9_NUMERO, CN9_REVISA, R_E_C_N_O_ AS RECNO
				FROM	%Table:CN9% CN9
				WHERE	CN9.CN9_FILIAL = %xFilial:CN9%
						AND CN9.CN9_CODED = %Exp:cCodEdt%
						AND CN9.CN9_NUMPR = %Exp:cNumPro%
						AND CN9.%NotDel%
				ORDER BY CN9_NUMERO,CN9_REVISA
			EndSQL

			nRecno := (cAliasQryCN9)->RECNO
			(cAliasQryCN9)->(DbGotop())

            While !(cAliasQryCN9)->( Eof() )
				If Empty((cAliasQryCN9)->CN9_REVISA) .And. (cAliasQryCN9)->RECNO != nRecno .And. nLevel > 0
					nLevel--
				EndIf 
				MATRKCN9(( cAliasQryCN9 )->CN9_NUMERO + CnGetRevAt(( cAliasQryCN9 )->CN9_NUMERO), @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
                (cAliasQryCN9)->(dbSkip())
            EndDo

		//Pedido de Compra
		ElseIf GetSC7xCO1(cAliasTmp, cCodEdt, cNumPro) > 0

			While (cAliasTmp)->( !Eof() )
				If (cAliasTmp)->C7_FILIAL + (cAliasTmp)->C7_NUM <> cAuxC7Key //Só chama a MATRKSC7H uma vez por número de pedido (pode haver mais de um pedido para um mesmo processo licitatório)
					cAuxC7Key := (cAliasTmp)->C7_FILIAL + (cAliasTmp)->C7_NUM
					nContPed++
					If lFilEnt
						MATRKSC7H( (cAliasTmp)->C7_FILENT + (cAliasTmp)->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID,, nContPed )
					Else
						MATRKSC7H( (cAliasTmp)->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID,, nContPed )
					EndIf
				EndIf
				(cAliasTmp)->( DbSkip() )
			EndDo

			(cAliasTmp)->(DbCloseArea())
			
		ElseIf GetSC5xCO1(cAliasTmp,cCodEdt,cNumPro,nRecno) > 0 //Pedido de Venda
			nRecno := (cAliasTmp)->RECNO
			While (cAliasTmp)->( !Eof() )
				If (cAliasTmp)->RECNO != nRecno .And. nLevel > 0
					nLevel--
				EndIf 	
				MATRKSC5( (cAliasTmp)->C5_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
		
				(cAliasTmp)->( DbSkip() )
			EndDo

			(cAliasTmp)->(DbCloseArea())
		Else
			Do Case
				Case !Empty(SC7->C7_CONTRA)
					cAliasQryCN9 := GetNextAlias()

					cQuery += "SELECT CN9_NUMERO,CN9_REVISA"
					cQuery += "FROM " + RetSqlName( "CN9" ) + " "
					cQuery += "WHERE "
					cQuery += "CN9_FILIAL='" + xFilial( "CN9" ) + "' AND "
					cQuery += "CN9_CODED ='" + cCodEdt        + "' AND "
					cQuery += "CN9_NUMPR ='" + cNumPro        + "' AND "
					cQuery += "D_E_L_E_T_=' ' "
					cQuery += "ORDER BY CN9_NUMERO,CN9_REVISA "

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQryCN9, .F., .T. )

					If !( cAliasQryCN9 )->( Eof() )
						MATRKCN9(( cAliasQryCN9 )->CN9_NUMERO+( cAliasQryCN9 )->CN9_REVISA, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					EndIf

				Case !Empty(SC7->C7_CODED)

					If lFilEnt
						MATRKSC7H(SC7->C7_FILENT + SC7->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					Else
						MATRKSC7H( SC7->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					EndIf

			EndCase

		EndIf

		//Nota de Empenho
		If CX0->(DbSeek(xFilial("CX0") + cKey))
			If CX1->(DbSeek(xFilial("CX1") + CX0->CX0_CODNE + oModCO2:GetValue("CO2_CODPRO")))
				//Reposiciona para trazer para a raiz da árvore
				oTree:TreeSeek( Pad( "CO1-" + cKey, 50 )+cTreeID )
				MATRKCX1( CX1->CX1_CODNE + oModCO2:GetValue("CO2_CODPRO"), @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
			EndIf
		EndIf

		//Reposiciona após a primeira passagem
		If !(Empty(oModCP4:GetValue('CP4_NUMSC')))
			nPosCP4 := oModCP4:GetLine() + 1
			If nPosCP4 <= oModCP4:Length()
				oModCP4:GoLine(nPosCP4)
			Else
				If lUsaLote .And. oModCP3:GetLine() <= oModCP3:Length()
					nPosCP3 := oModCP3:GetLine() + 1
					oModCP3:GoLine(nPosCP3)
					oPosCO2 := 1
				ElseIf oModCO2:GetLine() < oModCO2:Length()
					nPosCO2 := oModCO2:GetLine() + 1
				EndIf
				oModCO2:GoLine(nPosCO2)
			EndIf
		Else
			If lUsaLote .And. oModCP3:GetLine() <= oModCP3:Length()
				nPosCP3 := oModCP3:GetLine() + 1
				oModCP3:GoLine(nPosCP3)
				oPosCO2 := 1
			ElseIf oModCO2:GetLine() < oModCO2:Length()
				nPosCO2 := oModCO2:GetLine() + 1
			EndIf
			oModCO2:GoLine(nPosCO2)
		EndIf

	EndIf

	nLevel--
EndIf

Return


//------------------------------------------------------------------
/*/{Protheus.doc} MaTrkCPH()

@author taniel.silva
@since 24/03/2015
@version P12
/*/
//-------------------------------------------------------------------
Function MaTrkCPH( cKey, oTree, cAddString, nLevel, nMaxLevel,lItem,cTreeID )

Local cQuery			:= ""
Local cAliasQryCN9	:= ""
Local cImageCPH		:= ""
Local lFilEnt	 		:= TRKFILENT()

DEFAULT nMaxLevel := 1000000
DEFAULT lItem     := .T.
DEFAULT cTreeID   := "000001"

CPH->( DbSetOrder( 1 ) )
If CPH->( DbSeek( xFilial( "CPH" ) + cKey ) )

	CPI->( DbSetOrder(1) )
	CPE->( DbSetOrder(1) )

	cImageCPH := MaEntImage( "CPH", 1 )

	nLevel++

	If nLevel <= nMaxLevel

		cAddString := If( ValType( cAddString ) == "C", cAddString, "" )
		If !oTree:AddItem( Pad( "Cod. Edital" + " / " + "Num.Pro" + " / " + "Num.Ata" + " - " + CPH->CPH_CODEDT  + "/" + CPH->CPH_NUMPRO + "/" + CPH->CPH_NUMATA + ;
			cAddString, 100 ),Pad( "CPH-" + cKey, 50 )+cTreeID,cImageCPH,cImageCPH,,,nLevel)
			//oTree:TreeSeek( Pad( "CPH-" + cKey, 50 )+cTreeID )
		EndIf

		If CPI->( DbSeek( xFilial( "CPI" ) + cKey ) ) .And. CPE->( DbSeek( xFilial( "CPE" ) + CPI->(CPI_CODORG + CPI_TIPO) + cKey + CPH->CPH_NUMATA) )
			While !(CPE->(EoF()))

				oTree:TreeSeek( Pad( "CPH-" + cKey, 50 )+cTreeID )

				If CN9->( DbSeek(xFilial("CN9") + cKey) )
					cAliasQryCN9 := GetNextAlias()

					cQuery += "SELECT CN9.CN9_NUMERO,CN9.CN9_REVISA "
					cQuery += "FROM " + RetSqlName( "CN9" ) + " CN9 "
					cQuery += "INNER JOIN " + RetSqlName( "CNB" ) + " CNB ON "
					cQuery += "CNB.CNB_CONTRA = CN9.CN9_NUMERO"
					cQuery += "WHERE CN9.CN9_CODED = '" + CPH->CPH_CODEDT + "' AND "
					cQuery += "CN9.CN9_NUMPR = '" + CPH->CPH_NUMPRO + "' AND "
					cQuery += "CNB.CNB_PRODUT = '" + CPE->CPE_CODPRO + "' AND "
					cQuery += "CN9.D_E_L_E_T_ = ' ' AND "
					cQuery += "CNB.D_E_L_E_T_ = ' ' "

					cQuery := ChangeQuery( cQuery )

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQryCN9, .F., .T. )

					MATRKCN9(( cAliasQryCN9 )->CN9_NUMERO + CnGetRevAt(( cAliasQryCN9 )->CN9_NUMERO), @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )

				ElseIf SC7->(DbSeek(xFilial("SC7") + cKey))
					If lFilEnt
						MATRKSC7H(SC7->C7_FILENT + SC7->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					Else
						MATRKSC7H( SC7->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
					EndIf
				ElseIf SC5->(DbSeek(xFilial("SC5") + cKey)) //Pedido de Venda
					MATRKSC5( SC5->C5_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
				Else
				/*

					Do Case
						Case !Empty(SC7->C7_CONTRA)
							cAliasQryCN9 := GetNextAlias()

							cQuery += "SELECT CN9_NUMERO,CN9_REVISA"
							cQuery += "FROM " + RetSqlName( "CN9" ) + " "
							cQuery += "WHERE "
							cQuery += "CN9_FILIAL='" + xFilial( "CN9" ) + "' AND "
							cQuery += "CN9_CODED ='" + CPH->CPH_CODEDT        + "' AND "
							cQuery += "CN9_NUMPR ='" + CPH->CPH_NUMPRO        + "' AND "
							cQuery += "D_E_L_E_T_=' ' "
							cQuery += "ORDER BY CN9_NUMERO,CN9_REVISA "

							cQuery := ChangeQuery( cQuery )

							dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQryCN9, .F., .T. )

							If !( cAliasQryCN9 )->( Eof() )
								MATRKCN9(( cAliasQryCN9 )->CN9_NUMERO +( cAliasQryCN9 )->CN9_REVISA, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
							EndIf

						Case !Empty(SC7->C7_CODED)

							If lFilEnt
								MATRKSC7H(SC7->C7_FILENT + SC7->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
							Else
								MATRKSC7H( SC7->C7_NUM, @oTree, , @nLevel, nMaxLevel, lItem,cTreeID )
							EndIf

					EndCase
				*/
				EndIf
				CPE->(DbSkip())
			EndDo
		EndIf
	EndIf

	nLevel--

EndIf


Return

//------------------------------------------------------------------
/*/{Protheus.doc} MaTrkCOM()

@author jose.eulalio
@since 13/04/2015
@version P12
/*/
//-------------------------------------------------------------------
Function MATRKCOM( cKey, oTree, cAddString, nLevel, nMaxLevel, lItem,cTreeID )
Local cImageCOM:= ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

COM->( DbSetOrder( 2 ) )
If COM->( DbSeek( xFilial( "COM" ) + cKey ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageCOM := MaEntImage( "COM", 1 )

		oTree:AddItem( Pad( "Análise de Mercado - " + COM->COM_CODIGO,100),; //"Análise de Mercado"
		Pad( "COM-" + cKey, 50 )+cTreeID, cImageCOM, cImageCOM,,,nLevel)
		//oTree:TreeSeek( Pad( "COM-" + cItCarga, 50 )+cTreeID )
	EndIf

	If !Empty( COM->COM_CODEDT + COM->COM_NUMPRO)
		CO1->(DbSetOrder(1))

		If CO1->(DbSeek(xFilial("CO1") + COM->(COM_CODEDT + COM_NUMPRO)))
			oTree:TreeSeek( Pad( "COM-" +  COM->COM_CODIGO , 50 )+ cTreeID )
			MATRKCO1( COM->COM_CODEDT + COM->COM_NUMPRO, @oTree, , @nLevel, nMaxLevel,,cTreeID, 1 )
			CO1->( dbSkip() )
		EndIf
	EndIf

	nLevel--

EndIf

Return( .T. )

//------------------------------------------------------------------
/*/{Protheus.doc} MaTrkCX1()

@author jose.eulalio
@since 15/04/2015
@version P12
/*/
//-------------------------------------------------------------------
Function MATRKCX1( cKey, oTree, cAddString, nLevel, nMaxLevel, lItem,cTreeID )
Local cImageCX1:= ""

DEFAULT nMaxLevel := 1000000
DEFAULT cTreeID   := "000001"

cAddString := If( ValType( cAddString ) == "C", cAddString, "" )

CX1->( DbSetOrder( 1 ) )
If CX1->( DbSeek( xFilial( "CX1" ) + cKey ) )

	nLevel++

	If nLevel <= nMaxLevel

		cImageCX1 := MaEntImage( "CX1", 1 )

		oTree:AddItem( Pad( "Nota de Empenho - " + CX1->CX1_CODNE,100),; //"Nota de Empenho"
		Pad( "CX1-" + cKey, 50 )+cTreeID, cImageCX1, cImageCX1,,,nLevel)
		//oTree:TreeSeek( Pad( "CX1-" + cKey, 50 )+cTreeID )
		//oTree:TreeSeek( Pad( "CO1-" + CO1->(CO1->CODEDT + CO1_NUMPRO), 50 )+cTreeID )
	EndIf

	nLevel--

EndIf

Return( .T. )
//------------------------------------------------------------------
/*/{Protheus.doc} TrkPropos()
Rotina para retornar o numero da Proposta comercial

@param		cOportun, Char, Numero da Oportunidade de Venda
@param		cRevisa , Char, Codigo da Revisao
@param		cPropos , Char,  Proposta Comercial
@author 	danilo.salve
@since 		14/06/2018
@version 	P12
@return 	cPropos , Char,  Proposta Comercial
/*/
//-------------------------------------------------------------------
Function TrkPropos( cOportun , cRevisa , cPropos )
	Local aAreaADY  := {}
	
	Default cPropos := ""
	Default cPropos := ""
	Default cPropos := ""
	
	If Empty(cPropos)
		aAreaADY := ADY->( GetArea() )
		ADY->(DbSetOrder(2))
		If ADY->(DbSeek(xFilial("ADY") + cOportun + cRevisa))
			While ADY->(!Eof()) .And. cOportun == ADY->ADY_OPORTU .And. cRevisa == ADY->ADY_REVISA
				If ADY->ADY_SINCPR
					cPropos := ADY->ADY_PROPOS
					Exit
				Endif
				ADY->(Dbskip())
			Enddo				
		Endif			
		RestArea(aAreaADY)
		aSize(aAreaADY,0)
	Endif
	
Return cPropos

/*/{Protheus.doc} ExtraiStr
	Subtrai o trecho entre <nComeco> e <nTamanho> 
da string <cKey>.Soma <nTamanho> a <nComeco> no final.	
@author PHILIPE.POMPEU
@since 25/03/2019
@return cResult, trecho extraido
@param cKey, characters
@param nComeco, numeric
@param nTamanho, numeric/*/
Static Function ExtraiStr(cKey, nComeco, nTamanho)
	Local cResult := ""
	cResult := SubStr(cKey, nComeco, nTamanho)
	nComeco += nTamanho
Return cResult

//------------------------------------------------------------------
/*/{Protheus.doc} GetSC7xCO1
	Retorna a quantidade de pedidos de compra (SC7) existentes para um edital (CO1).	
@author leonardo.magalhaes
@since 19/07/2019
@return nRet, Quantidade de registros encontrados pela query
@param	cAliasAux, Alias temporário criado para extração dos dados
@param	cCodEdt, Código do edital
@param	cNumPr, Numero do processo
/*/
//-------------------------------------------------------------------
Static Function GetSC7xCO1(cAliasAux, cCodEdt, cNumPr)

	Local nRet 		  := 0

	Default cCodEdt	  := CO1->CO1_CODEDT
	Default cNumPr	  := CO1->CO1_NUMPRO
	Default cAliasAux := GetNextAlias()

	If Select(cAliasAux) > 0
		(cAliasAux)->(DbCloseArea())
	EndIf

	BeginSQL Alias cAliasAux
		SELECT	C7_FILIAL,
				C7_NUM,
				C7_CODED,
				C7_NUMPR,
				C7_FILENT
		FROM	%Table:SC7% SC7
		WHERE	SC7.C7_CODED = %Exp:cCodEdt%
				AND SC7.C7_NUMPR = %Exp:cNumPr%
				AND SC7.%NotDel%
		GROUP
		BY		C7_FILIAL, C7_NUM, C7_CODED, C7_NUMPR, C7_FILENT
		ORDER
		BY		C7_FILIAL, C7_NUM, C7_FILENT
	EndSQL

	While !(cAliasAux)->(Eof())
		nRet++
		(cAliasAux)->(DbSkip())
	EndDo

	(cAliasAux)->(DbGoTop())

Return nRet

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDObfuscate
    @description
    Realiza ofuscamento de uma variavel ou de um campo protegido.
	Remover essa função quando não houver releases menor que 12.1.27

    @type  Function
    @sample FATPDObfuscate("999999999","U5_CEL")
    @author Squad CRM & Faturamento
    @since 04/12/2019
    @version P12
    @param xValue, (caracter,numerico,data), Valor que sera ofuscado.
    @param cField, caracter , Campo que sera verificado.
    @param cSource, Caractere, Nome do recurso que buscar dados protegidos.
    @param lLoad, Logico, Efetua a carga automatica do campo informado

    @return xValue, retorna o valor ofuscado.
/*/
//-----------------------------------------------------------------------------
Static Function FATPDObfuscate(xValue, cField, cSource, lLoad)
    
    If FATPDActive()
		xValue := FTPDObfuscate(xValue, cField, cSource, lLoad)
    EndIf

Return xValue   

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDActive
    @description
    Função que verifica se a melhoria de Dados Protegidos existe.

    @type  Function
    @sample FATPDActive()
    @author Squad CRM & Faturamento
    @since 17/12/2019
    @version P12    
    @return lRet, Logico, Indica se o sistema trabalha com Dados Protegidos
/*/
//-----------------------------------------------------------------------------
Static Function FATPDActive()

    Static _lFTPDActive := Nil
  
    If _lFTPDActive == Nil
        _lFTPDActive := ( GetRpoRelease() >= "12.1.027" .Or. !Empty(GetApoInfo("FATCRMPD.PRW")) )  
    Endif
Return _lFTPDActive

//------------------------------------------------------------------
/*/{Protheus.doc} GetSC5xCO1
	Retorna a quantidade de pedidos de venda (SC5) existentes para um edital (CO1).	
@author eduardo.dias
@since 20/04/2021
@return nRet, Quantidade de registros encontrados pela query
@param	cAliasAux, Alias temporário criado para extração dos dados
@param	cCodEdt, Código do edital
@param	cNumPr, Numero do processo
/*/
//-------------------------------------------------------------------
Static Function GetSC5xCO1(cAliasAux,cCodEdt,cNumPr,nRecno)

	Local nRet 		  := 0

	Default cCodEdt	  := CO1->CO1_CODEDT
	Default cNumPr	  := CO1->CO1_NUMPRO
	Default cAliasAux := GetNextAlias()

	If Select(cAliasAux) > 0
		(cAliasAux)->(DbCloseArea())
	EndIf

	BeginSQL Alias cAliasAux
		SELECT	C5_FILIAL,
				C5_NUM,
				C5_CODED,
				C5_NUMPR,
				C5_CLIENTE,
				C5_LOJACLI, 
				SC5.R_E_C_N_O_ AS RECNO
		FROM	%Table:SC5% SC5
		WHERE	SC5.C5_CODED = %Exp:cCodEdt%
				AND SC5.C5_NUMPR = %Exp:cNumPr%
				AND SC5.%NotDel%
		GROUP BY C5_FILIAL, C5_NUM, C5_CODED, C5_NUMPR,  C5_CLIENTE, C5_LOJACLI, SC5.R_E_C_N_O_  
		ORDER BY C5_FILIAL, C5_NUM
	EndSQL

	While !(cAliasAux)->(Eof())
		nRet++
		(cAliasAux)->(DbSkip())
	EndDo
	
	(cAliasAux)->(DbGoTop())

Return nRet

//------------------------------------------------------------------
/*/{Protheus.doc} RetFilSC7
	Retorna do Pedido de Compras, a Filial do Edital Gerado em compras centralizadas.	
	@author rodrigo.carvalheiro
	@since 25/01/2021
	@return cFilEdt, Filial do Edital ou cFilant
/*/
//-------------------------------------------------------------------

Static Function RetFilSC7()

Local cFilEdt

	if FwIsInCallStack('A120TRACK')
		cFilEdt := Iif(Empty(SC7->C7_FILEDT),cFilAnt,SC7->C7_FILEDT)
		lFilEdt := .T.
	Else
		cFilEdt := cFilAnt
		lFilEdt := .F.
	EndIf

Return(cFilEdt)
